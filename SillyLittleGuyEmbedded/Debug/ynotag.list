
ynotag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfe8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae8  0800c0a4  0800c0a4  0000d0a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb8c  0800cb8c  0000eef0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb8c  0800cb8c  0000db8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb94  0800cb94  0000eef0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb94  0800cb94  0000db94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cb98  0800cb98  0000db98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000ef0  20000000  0800cb9c  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  20000ef0  0800da8c  0000eef0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200015d4  0800da8c  0000f5d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000eef0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b581  00000000  00000000  0000ef18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003541  00000000  00000000  0002a499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001860  00000000  00000000  0002d9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001402  00000000  00000000  0002f240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fb00  00000000  00000000  00030642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ec59  00000000  00000000  00050142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cae8d  00000000  00000000  0006ed9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139c28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064b4  00000000  00000000  00139c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  00140120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000ef0 	.word	0x20000ef0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800c08c 	.word	0x0800c08c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000ef4 	.word	0x20000ef4
 8000100:	0800c08c 	.word	0x0800c08c

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	0010      	movs	r0, r2
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	0019      	movs	r1, r3
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f001 ff65 	bl	80022f8 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f001 fea5 	bl	8002188 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 ff57 	bl	80022f8 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 ff4d 	bl	80022f8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fecf 	bl	8002210 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fec5 	bl	8002210 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_cfrcmple>:
 8000494:	4684      	mov	ip, r0
 8000496:	0008      	movs	r0, r1
 8000498:	4661      	mov	r1, ip
 800049a:	e7ff      	b.n	800049c <__aeabi_cfcmpeq>

0800049c <__aeabi_cfcmpeq>:
 800049c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800049e:	f000 fc59 	bl	8000d54 <__lesf2>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d401      	bmi.n	80004aa <__aeabi_cfcmpeq+0xe>
 80004a6:	2100      	movs	r1, #0
 80004a8:	42c8      	cmn	r0, r1
 80004aa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004ac <__aeabi_fcmpeq>:
 80004ac:	b510      	push	{r4, lr}
 80004ae:	f000 fbd9 	bl	8000c64 <__eqsf2>
 80004b2:	4240      	negs	r0, r0
 80004b4:	3001      	adds	r0, #1
 80004b6:	bd10      	pop	{r4, pc}

080004b8 <__aeabi_fcmplt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fc4b 	bl	8000d54 <__lesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	db01      	blt.n	80004c6 <__aeabi_fcmplt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)

080004cc <__aeabi_fcmple>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc41 	bl	8000d54 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	dd01      	ble.n	80004da <__aeabi_fcmple+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmpgt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fbe7 	bl	8000cb4 <__gesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dc01      	bgt.n	80004ee <__aeabi_fcmpgt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpge>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fbdd 	bl	8000cb4 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	da01      	bge.n	8000502 <__aeabi_fcmpge+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_uldivmod>:
 8000508:	2b00      	cmp	r3, #0
 800050a:	d111      	bne.n	8000530 <__aeabi_uldivmod+0x28>
 800050c:	2a00      	cmp	r2, #0
 800050e:	d10f      	bne.n	8000530 <__aeabi_uldivmod+0x28>
 8000510:	2900      	cmp	r1, #0
 8000512:	d100      	bne.n	8000516 <__aeabi_uldivmod+0xe>
 8000514:	2800      	cmp	r0, #0
 8000516:	d002      	beq.n	800051e <__aeabi_uldivmod+0x16>
 8000518:	2100      	movs	r1, #0
 800051a:	43c9      	mvns	r1, r1
 800051c:	0008      	movs	r0, r1
 800051e:	b407      	push	{r0, r1, r2}
 8000520:	4802      	ldr	r0, [pc, #8]	@ (800052c <__aeabi_uldivmod+0x24>)
 8000522:	a102      	add	r1, pc, #8	@ (adr r1, 800052c <__aeabi_uldivmod+0x24>)
 8000524:	1840      	adds	r0, r0, r1
 8000526:	9002      	str	r0, [sp, #8]
 8000528:	bd03      	pop	{r0, r1, pc}
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	fffffee9 	.word	0xfffffee9
 8000530:	b403      	push	{r0, r1}
 8000532:	4668      	mov	r0, sp
 8000534:	b501      	push	{r0, lr}
 8000536:	9802      	ldr	r0, [sp, #8]
 8000538:	f000 f81e 	bl	8000578 <__udivmoddi4>
 800053c:	9b01      	ldr	r3, [sp, #4]
 800053e:	469e      	mov	lr, r3
 8000540:	b002      	add	sp, #8
 8000542:	bc0c      	pop	{r2, r3}
 8000544:	4770      	bx	lr
 8000546:	46c0      	nop			@ (mov r8, r8)

08000548 <__aeabi_f2uiz>:
 8000548:	219e      	movs	r1, #158	@ 0x9e
 800054a:	b510      	push	{r4, lr}
 800054c:	05c9      	lsls	r1, r1, #23
 800054e:	1c04      	adds	r4, r0, #0
 8000550:	f7ff ffd0 	bl	80004f4 <__aeabi_fcmpge>
 8000554:	2800      	cmp	r0, #0
 8000556:	d103      	bne.n	8000560 <__aeabi_f2uiz+0x18>
 8000558:	1c20      	adds	r0, r4, #0
 800055a:	f000 ff2b 	bl	80013b4 <__aeabi_f2iz>
 800055e:	bd10      	pop	{r4, pc}
 8000560:	219e      	movs	r1, #158	@ 0x9e
 8000562:	1c20      	adds	r0, r4, #0
 8000564:	05c9      	lsls	r1, r1, #23
 8000566:	f000 fd81 	bl	800106c <__aeabi_fsub>
 800056a:	f000 ff23 	bl	80013b4 <__aeabi_f2iz>
 800056e:	2380      	movs	r3, #128	@ 0x80
 8000570:	061b      	lsls	r3, r3, #24
 8000572:	469c      	mov	ip, r3
 8000574:	4460      	add	r0, ip
 8000576:	e7f2      	b.n	800055e <__aeabi_f2uiz+0x16>

08000578 <__udivmoddi4>:
 8000578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057a:	4657      	mov	r7, sl
 800057c:	464e      	mov	r6, r9
 800057e:	4645      	mov	r5, r8
 8000580:	46de      	mov	lr, fp
 8000582:	b5e0      	push	{r5, r6, r7, lr}
 8000584:	0004      	movs	r4, r0
 8000586:	000d      	movs	r5, r1
 8000588:	4692      	mov	sl, r2
 800058a:	4699      	mov	r9, r3
 800058c:	b083      	sub	sp, #12
 800058e:	428b      	cmp	r3, r1
 8000590:	d830      	bhi.n	80005f4 <__udivmoddi4+0x7c>
 8000592:	d02d      	beq.n	80005f0 <__udivmoddi4+0x78>
 8000594:	4649      	mov	r1, r9
 8000596:	4650      	mov	r0, sl
 8000598:	f002 fe90 	bl	80032bc <__clzdi2>
 800059c:	0029      	movs	r1, r5
 800059e:	0006      	movs	r6, r0
 80005a0:	0020      	movs	r0, r4
 80005a2:	f002 fe8b 	bl	80032bc <__clzdi2>
 80005a6:	1a33      	subs	r3, r6, r0
 80005a8:	4698      	mov	r8, r3
 80005aa:	3b20      	subs	r3, #32
 80005ac:	d434      	bmi.n	8000618 <__udivmoddi4+0xa0>
 80005ae:	469b      	mov	fp, r3
 80005b0:	4653      	mov	r3, sl
 80005b2:	465a      	mov	r2, fp
 80005b4:	4093      	lsls	r3, r2
 80005b6:	4642      	mov	r2, r8
 80005b8:	001f      	movs	r7, r3
 80005ba:	4653      	mov	r3, sl
 80005bc:	4093      	lsls	r3, r2
 80005be:	001e      	movs	r6, r3
 80005c0:	42af      	cmp	r7, r5
 80005c2:	d83b      	bhi.n	800063c <__udivmoddi4+0xc4>
 80005c4:	42af      	cmp	r7, r5
 80005c6:	d100      	bne.n	80005ca <__udivmoddi4+0x52>
 80005c8:	e079      	b.n	80006be <__udivmoddi4+0x146>
 80005ca:	465b      	mov	r3, fp
 80005cc:	1ba4      	subs	r4, r4, r6
 80005ce:	41bd      	sbcs	r5, r7
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	da00      	bge.n	80005d6 <__udivmoddi4+0x5e>
 80005d4:	e076      	b.n	80006c4 <__udivmoddi4+0x14c>
 80005d6:	2200      	movs	r2, #0
 80005d8:	2300      	movs	r3, #0
 80005da:	9200      	str	r2, [sp, #0]
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	2301      	movs	r3, #1
 80005e0:	465a      	mov	r2, fp
 80005e2:	4093      	lsls	r3, r2
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	2301      	movs	r3, #1
 80005e8:	4642      	mov	r2, r8
 80005ea:	4093      	lsls	r3, r2
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	e029      	b.n	8000644 <__udivmoddi4+0xcc>
 80005f0:	4282      	cmp	r2, r0
 80005f2:	d9cf      	bls.n	8000594 <__udivmoddi4+0x1c>
 80005f4:	2200      	movs	r2, #0
 80005f6:	2300      	movs	r3, #0
 80005f8:	9200      	str	r2, [sp, #0]
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <__udivmoddi4+0x8e>
 8000602:	601c      	str	r4, [r3, #0]
 8000604:	605d      	str	r5, [r3, #4]
 8000606:	9800      	ldr	r0, [sp, #0]
 8000608:	9901      	ldr	r1, [sp, #4]
 800060a:	b003      	add	sp, #12
 800060c:	bcf0      	pop	{r4, r5, r6, r7}
 800060e:	46bb      	mov	fp, r7
 8000610:	46b2      	mov	sl, r6
 8000612:	46a9      	mov	r9, r5
 8000614:	46a0      	mov	r8, r4
 8000616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000618:	4642      	mov	r2, r8
 800061a:	469b      	mov	fp, r3
 800061c:	2320      	movs	r3, #32
 800061e:	1a9b      	subs	r3, r3, r2
 8000620:	4652      	mov	r2, sl
 8000622:	40da      	lsrs	r2, r3
 8000624:	4641      	mov	r1, r8
 8000626:	0013      	movs	r3, r2
 8000628:	464a      	mov	r2, r9
 800062a:	408a      	lsls	r2, r1
 800062c:	0017      	movs	r7, r2
 800062e:	4642      	mov	r2, r8
 8000630:	431f      	orrs	r7, r3
 8000632:	4653      	mov	r3, sl
 8000634:	4093      	lsls	r3, r2
 8000636:	001e      	movs	r6, r3
 8000638:	42af      	cmp	r7, r5
 800063a:	d9c3      	bls.n	80005c4 <__udivmoddi4+0x4c>
 800063c:	2200      	movs	r2, #0
 800063e:	2300      	movs	r3, #0
 8000640:	9200      	str	r2, [sp, #0]
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	4643      	mov	r3, r8
 8000646:	2b00      	cmp	r3, #0
 8000648:	d0d8      	beq.n	80005fc <__udivmoddi4+0x84>
 800064a:	07fb      	lsls	r3, r7, #31
 800064c:	0872      	lsrs	r2, r6, #1
 800064e:	431a      	orrs	r2, r3
 8000650:	4646      	mov	r6, r8
 8000652:	087b      	lsrs	r3, r7, #1
 8000654:	e00e      	b.n	8000674 <__udivmoddi4+0xfc>
 8000656:	42ab      	cmp	r3, r5
 8000658:	d101      	bne.n	800065e <__udivmoddi4+0xe6>
 800065a:	42a2      	cmp	r2, r4
 800065c:	d80c      	bhi.n	8000678 <__udivmoddi4+0x100>
 800065e:	1aa4      	subs	r4, r4, r2
 8000660:	419d      	sbcs	r5, r3
 8000662:	2001      	movs	r0, #1
 8000664:	1924      	adds	r4, r4, r4
 8000666:	416d      	adcs	r5, r5
 8000668:	2100      	movs	r1, #0
 800066a:	3e01      	subs	r6, #1
 800066c:	1824      	adds	r4, r4, r0
 800066e:	414d      	adcs	r5, r1
 8000670:	2e00      	cmp	r6, #0
 8000672:	d006      	beq.n	8000682 <__udivmoddi4+0x10a>
 8000674:	42ab      	cmp	r3, r5
 8000676:	d9ee      	bls.n	8000656 <__udivmoddi4+0xde>
 8000678:	3e01      	subs	r6, #1
 800067a:	1924      	adds	r4, r4, r4
 800067c:	416d      	adcs	r5, r5
 800067e:	2e00      	cmp	r6, #0
 8000680:	d1f8      	bne.n	8000674 <__udivmoddi4+0xfc>
 8000682:	9800      	ldr	r0, [sp, #0]
 8000684:	9901      	ldr	r1, [sp, #4]
 8000686:	465b      	mov	r3, fp
 8000688:	1900      	adds	r0, r0, r4
 800068a:	4169      	adcs	r1, r5
 800068c:	2b00      	cmp	r3, #0
 800068e:	db24      	blt.n	80006da <__udivmoddi4+0x162>
 8000690:	002b      	movs	r3, r5
 8000692:	465a      	mov	r2, fp
 8000694:	4644      	mov	r4, r8
 8000696:	40d3      	lsrs	r3, r2
 8000698:	002a      	movs	r2, r5
 800069a:	40e2      	lsrs	r2, r4
 800069c:	001c      	movs	r4, r3
 800069e:	465b      	mov	r3, fp
 80006a0:	0015      	movs	r5, r2
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	db2a      	blt.n	80006fc <__udivmoddi4+0x184>
 80006a6:	0026      	movs	r6, r4
 80006a8:	409e      	lsls	r6, r3
 80006aa:	0033      	movs	r3, r6
 80006ac:	0026      	movs	r6, r4
 80006ae:	4647      	mov	r7, r8
 80006b0:	40be      	lsls	r6, r7
 80006b2:	0032      	movs	r2, r6
 80006b4:	1a80      	subs	r0, r0, r2
 80006b6:	4199      	sbcs	r1, r3
 80006b8:	9000      	str	r0, [sp, #0]
 80006ba:	9101      	str	r1, [sp, #4]
 80006bc:	e79e      	b.n	80005fc <__udivmoddi4+0x84>
 80006be:	42a3      	cmp	r3, r4
 80006c0:	d8bc      	bhi.n	800063c <__udivmoddi4+0xc4>
 80006c2:	e782      	b.n	80005ca <__udivmoddi4+0x52>
 80006c4:	4642      	mov	r2, r8
 80006c6:	2320      	movs	r3, #32
 80006c8:	2100      	movs	r1, #0
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	2200      	movs	r2, #0
 80006ce:	9100      	str	r1, [sp, #0]
 80006d0:	9201      	str	r2, [sp, #4]
 80006d2:	2201      	movs	r2, #1
 80006d4:	40da      	lsrs	r2, r3
 80006d6:	9201      	str	r2, [sp, #4]
 80006d8:	e785      	b.n	80005e6 <__udivmoddi4+0x6e>
 80006da:	4642      	mov	r2, r8
 80006dc:	2320      	movs	r3, #32
 80006de:	1a9b      	subs	r3, r3, r2
 80006e0:	002a      	movs	r2, r5
 80006e2:	4646      	mov	r6, r8
 80006e4:	409a      	lsls	r2, r3
 80006e6:	0023      	movs	r3, r4
 80006e8:	40f3      	lsrs	r3, r6
 80006ea:	4644      	mov	r4, r8
 80006ec:	4313      	orrs	r3, r2
 80006ee:	002a      	movs	r2, r5
 80006f0:	40e2      	lsrs	r2, r4
 80006f2:	001c      	movs	r4, r3
 80006f4:	465b      	mov	r3, fp
 80006f6:	0015      	movs	r5, r2
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	dad4      	bge.n	80006a6 <__udivmoddi4+0x12e>
 80006fc:	4642      	mov	r2, r8
 80006fe:	002f      	movs	r7, r5
 8000700:	2320      	movs	r3, #32
 8000702:	0026      	movs	r6, r4
 8000704:	4097      	lsls	r7, r2
 8000706:	1a9b      	subs	r3, r3, r2
 8000708:	40de      	lsrs	r6, r3
 800070a:	003b      	movs	r3, r7
 800070c:	4333      	orrs	r3, r6
 800070e:	e7cd      	b.n	80006ac <__udivmoddi4+0x134>

08000710 <__aeabi_fadd>:
 8000710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000712:	46ce      	mov	lr, r9
 8000714:	4647      	mov	r7, r8
 8000716:	0243      	lsls	r3, r0, #9
 8000718:	0a5a      	lsrs	r2, r3, #9
 800071a:	024e      	lsls	r6, r1, #9
 800071c:	0045      	lsls	r5, r0, #1
 800071e:	0fc4      	lsrs	r4, r0, #31
 8000720:	0048      	lsls	r0, r1, #1
 8000722:	4691      	mov	r9, r2
 8000724:	0e2d      	lsrs	r5, r5, #24
 8000726:	0a72      	lsrs	r2, r6, #9
 8000728:	0e00      	lsrs	r0, r0, #24
 800072a:	4694      	mov	ip, r2
 800072c:	b580      	push	{r7, lr}
 800072e:	099b      	lsrs	r3, r3, #6
 8000730:	0fc9      	lsrs	r1, r1, #31
 8000732:	09b6      	lsrs	r6, r6, #6
 8000734:	1a2a      	subs	r2, r5, r0
 8000736:	428c      	cmp	r4, r1
 8000738:	d021      	beq.n	800077e <__aeabi_fadd+0x6e>
 800073a:	2a00      	cmp	r2, #0
 800073c:	dd0d      	ble.n	800075a <__aeabi_fadd+0x4a>
 800073e:	2800      	cmp	r0, #0
 8000740:	d12d      	bne.n	800079e <__aeabi_fadd+0x8e>
 8000742:	2e00      	cmp	r6, #0
 8000744:	d100      	bne.n	8000748 <__aeabi_fadd+0x38>
 8000746:	e08d      	b.n	8000864 <__aeabi_fadd+0x154>
 8000748:	1e51      	subs	r1, r2, #1
 800074a:	2a01      	cmp	r2, #1
 800074c:	d100      	bne.n	8000750 <__aeabi_fadd+0x40>
 800074e:	e11d      	b.n	800098c <__aeabi_fadd+0x27c>
 8000750:	2aff      	cmp	r2, #255	@ 0xff
 8000752:	d100      	bne.n	8000756 <__aeabi_fadd+0x46>
 8000754:	e0ab      	b.n	80008ae <__aeabi_fadd+0x19e>
 8000756:	000a      	movs	r2, r1
 8000758:	e027      	b.n	80007aa <__aeabi_fadd+0x9a>
 800075a:	2a00      	cmp	r2, #0
 800075c:	d04d      	beq.n	80007fa <__aeabi_fadd+0xea>
 800075e:	1b42      	subs	r2, r0, r5
 8000760:	2d00      	cmp	r5, #0
 8000762:	d000      	beq.n	8000766 <__aeabi_fadd+0x56>
 8000764:	e0cc      	b.n	8000900 <__aeabi_fadd+0x1f0>
 8000766:	2b00      	cmp	r3, #0
 8000768:	d100      	bne.n	800076c <__aeabi_fadd+0x5c>
 800076a:	e079      	b.n	8000860 <__aeabi_fadd+0x150>
 800076c:	1e54      	subs	r4, r2, #1
 800076e:	2a01      	cmp	r2, #1
 8000770:	d100      	bne.n	8000774 <__aeabi_fadd+0x64>
 8000772:	e128      	b.n	80009c6 <__aeabi_fadd+0x2b6>
 8000774:	2aff      	cmp	r2, #255	@ 0xff
 8000776:	d100      	bne.n	800077a <__aeabi_fadd+0x6a>
 8000778:	e097      	b.n	80008aa <__aeabi_fadd+0x19a>
 800077a:	0022      	movs	r2, r4
 800077c:	e0c5      	b.n	800090a <__aeabi_fadd+0x1fa>
 800077e:	2a00      	cmp	r2, #0
 8000780:	dc00      	bgt.n	8000784 <__aeabi_fadd+0x74>
 8000782:	e096      	b.n	80008b2 <__aeabi_fadd+0x1a2>
 8000784:	2800      	cmp	r0, #0
 8000786:	d04f      	beq.n	8000828 <__aeabi_fadd+0x118>
 8000788:	2dff      	cmp	r5, #255	@ 0xff
 800078a:	d100      	bne.n	800078e <__aeabi_fadd+0x7e>
 800078c:	e08f      	b.n	80008ae <__aeabi_fadd+0x19e>
 800078e:	2180      	movs	r1, #128	@ 0x80
 8000790:	04c9      	lsls	r1, r1, #19
 8000792:	430e      	orrs	r6, r1
 8000794:	2a1b      	cmp	r2, #27
 8000796:	dd51      	ble.n	800083c <__aeabi_fadd+0x12c>
 8000798:	002a      	movs	r2, r5
 800079a:	3301      	adds	r3, #1
 800079c:	e018      	b.n	80007d0 <__aeabi_fadd+0xc0>
 800079e:	2dff      	cmp	r5, #255	@ 0xff
 80007a0:	d100      	bne.n	80007a4 <__aeabi_fadd+0x94>
 80007a2:	e084      	b.n	80008ae <__aeabi_fadd+0x19e>
 80007a4:	2180      	movs	r1, #128	@ 0x80
 80007a6:	04c9      	lsls	r1, r1, #19
 80007a8:	430e      	orrs	r6, r1
 80007aa:	2101      	movs	r1, #1
 80007ac:	2a1b      	cmp	r2, #27
 80007ae:	dc08      	bgt.n	80007c2 <__aeabi_fadd+0xb2>
 80007b0:	0031      	movs	r1, r6
 80007b2:	2020      	movs	r0, #32
 80007b4:	40d1      	lsrs	r1, r2
 80007b6:	1a82      	subs	r2, r0, r2
 80007b8:	4096      	lsls	r6, r2
 80007ba:	0032      	movs	r2, r6
 80007bc:	1e50      	subs	r0, r2, #1
 80007be:	4182      	sbcs	r2, r0
 80007c0:	4311      	orrs	r1, r2
 80007c2:	1a5b      	subs	r3, r3, r1
 80007c4:	015a      	lsls	r2, r3, #5
 80007c6:	d459      	bmi.n	800087c <__aeabi_fadd+0x16c>
 80007c8:	2107      	movs	r1, #7
 80007ca:	002a      	movs	r2, r5
 80007cc:	4019      	ands	r1, r3
 80007ce:	d049      	beq.n	8000864 <__aeabi_fadd+0x154>
 80007d0:	210f      	movs	r1, #15
 80007d2:	4019      	ands	r1, r3
 80007d4:	2904      	cmp	r1, #4
 80007d6:	d000      	beq.n	80007da <__aeabi_fadd+0xca>
 80007d8:	3304      	adds	r3, #4
 80007da:	0159      	lsls	r1, r3, #5
 80007dc:	d542      	bpl.n	8000864 <__aeabi_fadd+0x154>
 80007de:	1c50      	adds	r0, r2, #1
 80007e0:	2afe      	cmp	r2, #254	@ 0xfe
 80007e2:	d03a      	beq.n	800085a <__aeabi_fadd+0x14a>
 80007e4:	019b      	lsls	r3, r3, #6
 80007e6:	b2c0      	uxtb	r0, r0
 80007e8:	0a5b      	lsrs	r3, r3, #9
 80007ea:	05c0      	lsls	r0, r0, #23
 80007ec:	4318      	orrs	r0, r3
 80007ee:	07e4      	lsls	r4, r4, #31
 80007f0:	4320      	orrs	r0, r4
 80007f2:	bcc0      	pop	{r6, r7}
 80007f4:	46b9      	mov	r9, r7
 80007f6:	46b0      	mov	r8, r6
 80007f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007fa:	20fe      	movs	r0, #254	@ 0xfe
 80007fc:	4680      	mov	r8, r0
 80007fe:	1c6f      	adds	r7, r5, #1
 8000800:	0038      	movs	r0, r7
 8000802:	4647      	mov	r7, r8
 8000804:	4207      	tst	r7, r0
 8000806:	d000      	beq.n	800080a <__aeabi_fadd+0xfa>
 8000808:	e08e      	b.n	8000928 <__aeabi_fadd+0x218>
 800080a:	2d00      	cmp	r5, #0
 800080c:	d000      	beq.n	8000810 <__aeabi_fadd+0x100>
 800080e:	e0b4      	b.n	800097a <__aeabi_fadd+0x26a>
 8000810:	2b00      	cmp	r3, #0
 8000812:	d100      	bne.n	8000816 <__aeabi_fadd+0x106>
 8000814:	e0db      	b.n	80009ce <__aeabi_fadd+0x2be>
 8000816:	2e00      	cmp	r6, #0
 8000818:	d06c      	beq.n	80008f4 <__aeabi_fadd+0x1e4>
 800081a:	1b98      	subs	r0, r3, r6
 800081c:	0145      	lsls	r5, r0, #5
 800081e:	d400      	bmi.n	8000822 <__aeabi_fadd+0x112>
 8000820:	e0f7      	b.n	8000a12 <__aeabi_fadd+0x302>
 8000822:	000c      	movs	r4, r1
 8000824:	1af3      	subs	r3, r6, r3
 8000826:	e03d      	b.n	80008a4 <__aeabi_fadd+0x194>
 8000828:	2e00      	cmp	r6, #0
 800082a:	d01b      	beq.n	8000864 <__aeabi_fadd+0x154>
 800082c:	1e51      	subs	r1, r2, #1
 800082e:	2a01      	cmp	r2, #1
 8000830:	d100      	bne.n	8000834 <__aeabi_fadd+0x124>
 8000832:	e082      	b.n	800093a <__aeabi_fadd+0x22a>
 8000834:	2aff      	cmp	r2, #255	@ 0xff
 8000836:	d03a      	beq.n	80008ae <__aeabi_fadd+0x19e>
 8000838:	000a      	movs	r2, r1
 800083a:	e7ab      	b.n	8000794 <__aeabi_fadd+0x84>
 800083c:	0031      	movs	r1, r6
 800083e:	2020      	movs	r0, #32
 8000840:	40d1      	lsrs	r1, r2
 8000842:	1a82      	subs	r2, r0, r2
 8000844:	4096      	lsls	r6, r2
 8000846:	0032      	movs	r2, r6
 8000848:	1e50      	subs	r0, r2, #1
 800084a:	4182      	sbcs	r2, r0
 800084c:	430a      	orrs	r2, r1
 800084e:	189b      	adds	r3, r3, r2
 8000850:	015a      	lsls	r2, r3, #5
 8000852:	d5b9      	bpl.n	80007c8 <__aeabi_fadd+0xb8>
 8000854:	1c6a      	adds	r2, r5, #1
 8000856:	2dfe      	cmp	r5, #254	@ 0xfe
 8000858:	d175      	bne.n	8000946 <__aeabi_fadd+0x236>
 800085a:	20ff      	movs	r0, #255	@ 0xff
 800085c:	2300      	movs	r3, #0
 800085e:	e7c4      	b.n	80007ea <__aeabi_fadd+0xda>
 8000860:	000c      	movs	r4, r1
 8000862:	0033      	movs	r3, r6
 8000864:	08db      	lsrs	r3, r3, #3
 8000866:	2aff      	cmp	r2, #255	@ 0xff
 8000868:	d146      	bne.n	80008f8 <__aeabi_fadd+0x1e8>
 800086a:	2b00      	cmp	r3, #0
 800086c:	d0f5      	beq.n	800085a <__aeabi_fadd+0x14a>
 800086e:	2280      	movs	r2, #128	@ 0x80
 8000870:	03d2      	lsls	r2, r2, #15
 8000872:	4313      	orrs	r3, r2
 8000874:	025b      	lsls	r3, r3, #9
 8000876:	20ff      	movs	r0, #255	@ 0xff
 8000878:	0a5b      	lsrs	r3, r3, #9
 800087a:	e7b6      	b.n	80007ea <__aeabi_fadd+0xda>
 800087c:	019f      	lsls	r7, r3, #6
 800087e:	09bf      	lsrs	r7, r7, #6
 8000880:	0038      	movs	r0, r7
 8000882:	f002 fcfd 	bl	8003280 <__clzsi2>
 8000886:	3805      	subs	r0, #5
 8000888:	4087      	lsls	r7, r0
 800088a:	4285      	cmp	r5, r0
 800088c:	dc24      	bgt.n	80008d8 <__aeabi_fadd+0x1c8>
 800088e:	003b      	movs	r3, r7
 8000890:	2120      	movs	r1, #32
 8000892:	1b42      	subs	r2, r0, r5
 8000894:	3201      	adds	r2, #1
 8000896:	40d3      	lsrs	r3, r2
 8000898:	1a8a      	subs	r2, r1, r2
 800089a:	4097      	lsls	r7, r2
 800089c:	1e7a      	subs	r2, r7, #1
 800089e:	4197      	sbcs	r7, r2
 80008a0:	2200      	movs	r2, #0
 80008a2:	433b      	orrs	r3, r7
 80008a4:	0759      	lsls	r1, r3, #29
 80008a6:	d193      	bne.n	80007d0 <__aeabi_fadd+0xc0>
 80008a8:	e797      	b.n	80007da <__aeabi_fadd+0xca>
 80008aa:	000c      	movs	r4, r1
 80008ac:	0033      	movs	r3, r6
 80008ae:	08db      	lsrs	r3, r3, #3
 80008b0:	e7db      	b.n	800086a <__aeabi_fadd+0x15a>
 80008b2:	2a00      	cmp	r2, #0
 80008b4:	d014      	beq.n	80008e0 <__aeabi_fadd+0x1d0>
 80008b6:	1b42      	subs	r2, r0, r5
 80008b8:	2d00      	cmp	r5, #0
 80008ba:	d14b      	bne.n	8000954 <__aeabi_fadd+0x244>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d0d0      	beq.n	8000862 <__aeabi_fadd+0x152>
 80008c0:	1e51      	subs	r1, r2, #1
 80008c2:	2a01      	cmp	r2, #1
 80008c4:	d100      	bne.n	80008c8 <__aeabi_fadd+0x1b8>
 80008c6:	e09e      	b.n	8000a06 <__aeabi_fadd+0x2f6>
 80008c8:	2aff      	cmp	r2, #255	@ 0xff
 80008ca:	d0ef      	beq.n	80008ac <__aeabi_fadd+0x19c>
 80008cc:	000a      	movs	r2, r1
 80008ce:	2a1b      	cmp	r2, #27
 80008d0:	dd5f      	ble.n	8000992 <__aeabi_fadd+0x282>
 80008d2:	0002      	movs	r2, r0
 80008d4:	1c73      	adds	r3, r6, #1
 80008d6:	e77b      	b.n	80007d0 <__aeabi_fadd+0xc0>
 80008d8:	4b50      	ldr	r3, [pc, #320]	@ (8000a1c <__aeabi_fadd+0x30c>)
 80008da:	1a2a      	subs	r2, r5, r0
 80008dc:	403b      	ands	r3, r7
 80008de:	e7e1      	b.n	80008a4 <__aeabi_fadd+0x194>
 80008e0:	21fe      	movs	r1, #254	@ 0xfe
 80008e2:	1c6a      	adds	r2, r5, #1
 80008e4:	4211      	tst	r1, r2
 80008e6:	d13b      	bne.n	8000960 <__aeabi_fadd+0x250>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d15d      	bne.n	80009a8 <__aeabi_fadd+0x298>
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d07f      	beq.n	80009f0 <__aeabi_fadd+0x2e0>
 80008f0:	2e00      	cmp	r6, #0
 80008f2:	d17f      	bne.n	80009f4 <__aeabi_fadd+0x2e4>
 80008f4:	2200      	movs	r2, #0
 80008f6:	08db      	lsrs	r3, r3, #3
 80008f8:	025b      	lsls	r3, r3, #9
 80008fa:	0a5b      	lsrs	r3, r3, #9
 80008fc:	b2d0      	uxtb	r0, r2
 80008fe:	e774      	b.n	80007ea <__aeabi_fadd+0xda>
 8000900:	28ff      	cmp	r0, #255	@ 0xff
 8000902:	d0d2      	beq.n	80008aa <__aeabi_fadd+0x19a>
 8000904:	2480      	movs	r4, #128	@ 0x80
 8000906:	04e4      	lsls	r4, r4, #19
 8000908:	4323      	orrs	r3, r4
 800090a:	2401      	movs	r4, #1
 800090c:	2a1b      	cmp	r2, #27
 800090e:	dc07      	bgt.n	8000920 <__aeabi_fadd+0x210>
 8000910:	001c      	movs	r4, r3
 8000912:	2520      	movs	r5, #32
 8000914:	40d4      	lsrs	r4, r2
 8000916:	1aaa      	subs	r2, r5, r2
 8000918:	4093      	lsls	r3, r2
 800091a:	1e5a      	subs	r2, r3, #1
 800091c:	4193      	sbcs	r3, r2
 800091e:	431c      	orrs	r4, r3
 8000920:	1b33      	subs	r3, r6, r4
 8000922:	0005      	movs	r5, r0
 8000924:	000c      	movs	r4, r1
 8000926:	e74d      	b.n	80007c4 <__aeabi_fadd+0xb4>
 8000928:	1b9f      	subs	r7, r3, r6
 800092a:	017a      	lsls	r2, r7, #5
 800092c:	d422      	bmi.n	8000974 <__aeabi_fadd+0x264>
 800092e:	2f00      	cmp	r7, #0
 8000930:	d1a6      	bne.n	8000880 <__aeabi_fadd+0x170>
 8000932:	2400      	movs	r4, #0
 8000934:	2000      	movs	r0, #0
 8000936:	2300      	movs	r3, #0
 8000938:	e757      	b.n	80007ea <__aeabi_fadd+0xda>
 800093a:	199b      	adds	r3, r3, r6
 800093c:	2501      	movs	r5, #1
 800093e:	3201      	adds	r2, #1
 8000940:	0159      	lsls	r1, r3, #5
 8000942:	d400      	bmi.n	8000946 <__aeabi_fadd+0x236>
 8000944:	e740      	b.n	80007c8 <__aeabi_fadd+0xb8>
 8000946:	2101      	movs	r1, #1
 8000948:	4835      	ldr	r0, [pc, #212]	@ (8000a20 <__aeabi_fadd+0x310>)
 800094a:	4019      	ands	r1, r3
 800094c:	085b      	lsrs	r3, r3, #1
 800094e:	4003      	ands	r3, r0
 8000950:	430b      	orrs	r3, r1
 8000952:	e7a7      	b.n	80008a4 <__aeabi_fadd+0x194>
 8000954:	28ff      	cmp	r0, #255	@ 0xff
 8000956:	d0a9      	beq.n	80008ac <__aeabi_fadd+0x19c>
 8000958:	2180      	movs	r1, #128	@ 0x80
 800095a:	04c9      	lsls	r1, r1, #19
 800095c:	430b      	orrs	r3, r1
 800095e:	e7b6      	b.n	80008ce <__aeabi_fadd+0x1be>
 8000960:	2aff      	cmp	r2, #255	@ 0xff
 8000962:	d100      	bne.n	8000966 <__aeabi_fadd+0x256>
 8000964:	e779      	b.n	800085a <__aeabi_fadd+0x14a>
 8000966:	199b      	adds	r3, r3, r6
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	0759      	lsls	r1, r3, #29
 800096c:	d000      	beq.n	8000970 <__aeabi_fadd+0x260>
 800096e:	e72f      	b.n	80007d0 <__aeabi_fadd+0xc0>
 8000970:	08db      	lsrs	r3, r3, #3
 8000972:	e7c1      	b.n	80008f8 <__aeabi_fadd+0x1e8>
 8000974:	000c      	movs	r4, r1
 8000976:	1af7      	subs	r7, r6, r3
 8000978:	e782      	b.n	8000880 <__aeabi_fadd+0x170>
 800097a:	2b00      	cmp	r3, #0
 800097c:	d12c      	bne.n	80009d8 <__aeabi_fadd+0x2c8>
 800097e:	2e00      	cmp	r6, #0
 8000980:	d193      	bne.n	80008aa <__aeabi_fadd+0x19a>
 8000982:	2380      	movs	r3, #128	@ 0x80
 8000984:	2400      	movs	r4, #0
 8000986:	20ff      	movs	r0, #255	@ 0xff
 8000988:	03db      	lsls	r3, r3, #15
 800098a:	e72e      	b.n	80007ea <__aeabi_fadd+0xda>
 800098c:	2501      	movs	r5, #1
 800098e:	1b9b      	subs	r3, r3, r6
 8000990:	e718      	b.n	80007c4 <__aeabi_fadd+0xb4>
 8000992:	0019      	movs	r1, r3
 8000994:	2520      	movs	r5, #32
 8000996:	40d1      	lsrs	r1, r2
 8000998:	1aaa      	subs	r2, r5, r2
 800099a:	4093      	lsls	r3, r2
 800099c:	1e5a      	subs	r2, r3, #1
 800099e:	4193      	sbcs	r3, r2
 80009a0:	430b      	orrs	r3, r1
 80009a2:	0005      	movs	r5, r0
 80009a4:	199b      	adds	r3, r3, r6
 80009a6:	e753      	b.n	8000850 <__aeabi_fadd+0x140>
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d100      	bne.n	80009ae <__aeabi_fadd+0x29e>
 80009ac:	e77e      	b.n	80008ac <__aeabi_fadd+0x19c>
 80009ae:	2e00      	cmp	r6, #0
 80009b0:	d100      	bne.n	80009b4 <__aeabi_fadd+0x2a4>
 80009b2:	e77c      	b.n	80008ae <__aeabi_fadd+0x19e>
 80009b4:	2280      	movs	r2, #128	@ 0x80
 80009b6:	03d2      	lsls	r2, r2, #15
 80009b8:	4591      	cmp	r9, r2
 80009ba:	d302      	bcc.n	80009c2 <__aeabi_fadd+0x2b2>
 80009bc:	4594      	cmp	ip, r2
 80009be:	d200      	bcs.n	80009c2 <__aeabi_fadd+0x2b2>
 80009c0:	0033      	movs	r3, r6
 80009c2:	08db      	lsrs	r3, r3, #3
 80009c4:	e753      	b.n	800086e <__aeabi_fadd+0x15e>
 80009c6:	000c      	movs	r4, r1
 80009c8:	1af3      	subs	r3, r6, r3
 80009ca:	3501      	adds	r5, #1
 80009cc:	e6fa      	b.n	80007c4 <__aeabi_fadd+0xb4>
 80009ce:	2e00      	cmp	r6, #0
 80009d0:	d0af      	beq.n	8000932 <__aeabi_fadd+0x222>
 80009d2:	000c      	movs	r4, r1
 80009d4:	0033      	movs	r3, r6
 80009d6:	e78d      	b.n	80008f4 <__aeabi_fadd+0x1e4>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d100      	bne.n	80009de <__aeabi_fadd+0x2ce>
 80009dc:	e767      	b.n	80008ae <__aeabi_fadd+0x19e>
 80009de:	2280      	movs	r2, #128	@ 0x80
 80009e0:	03d2      	lsls	r2, r2, #15
 80009e2:	4591      	cmp	r9, r2
 80009e4:	d3ed      	bcc.n	80009c2 <__aeabi_fadd+0x2b2>
 80009e6:	4594      	cmp	ip, r2
 80009e8:	d2eb      	bcs.n	80009c2 <__aeabi_fadd+0x2b2>
 80009ea:	000c      	movs	r4, r1
 80009ec:	0033      	movs	r3, r6
 80009ee:	e7e8      	b.n	80009c2 <__aeabi_fadd+0x2b2>
 80009f0:	0033      	movs	r3, r6
 80009f2:	e77f      	b.n	80008f4 <__aeabi_fadd+0x1e4>
 80009f4:	199b      	adds	r3, r3, r6
 80009f6:	2200      	movs	r2, #0
 80009f8:	0159      	lsls	r1, r3, #5
 80009fa:	d5b9      	bpl.n	8000970 <__aeabi_fadd+0x260>
 80009fc:	4a07      	ldr	r2, [pc, #28]	@ (8000a1c <__aeabi_fadd+0x30c>)
 80009fe:	4013      	ands	r3, r2
 8000a00:	08db      	lsrs	r3, r3, #3
 8000a02:	2201      	movs	r2, #1
 8000a04:	e778      	b.n	80008f8 <__aeabi_fadd+0x1e8>
 8000a06:	199b      	adds	r3, r3, r6
 8000a08:	3201      	adds	r2, #1
 8000a0a:	3501      	adds	r5, #1
 8000a0c:	0159      	lsls	r1, r3, #5
 8000a0e:	d49a      	bmi.n	8000946 <__aeabi_fadd+0x236>
 8000a10:	e6da      	b.n	80007c8 <__aeabi_fadd+0xb8>
 8000a12:	1e03      	subs	r3, r0, #0
 8000a14:	d08d      	beq.n	8000932 <__aeabi_fadd+0x222>
 8000a16:	08db      	lsrs	r3, r3, #3
 8000a18:	e76e      	b.n	80008f8 <__aeabi_fadd+0x1e8>
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	fbffffff 	.word	0xfbffffff
 8000a20:	7dffffff 	.word	0x7dffffff

08000a24 <__aeabi_fdiv>:
 8000a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a26:	464f      	mov	r7, r9
 8000a28:	4646      	mov	r6, r8
 8000a2a:	46d6      	mov	lr, sl
 8000a2c:	0244      	lsls	r4, r0, #9
 8000a2e:	b5c0      	push	{r6, r7, lr}
 8000a30:	0047      	lsls	r7, r0, #1
 8000a32:	1c0e      	adds	r6, r1, #0
 8000a34:	0a64      	lsrs	r4, r4, #9
 8000a36:	0e3f      	lsrs	r7, r7, #24
 8000a38:	0fc5      	lsrs	r5, r0, #31
 8000a3a:	2f00      	cmp	r7, #0
 8000a3c:	d03c      	beq.n	8000ab8 <__aeabi_fdiv+0x94>
 8000a3e:	2fff      	cmp	r7, #255	@ 0xff
 8000a40:	d042      	beq.n	8000ac8 <__aeabi_fdiv+0xa4>
 8000a42:	2300      	movs	r3, #0
 8000a44:	2280      	movs	r2, #128	@ 0x80
 8000a46:	4699      	mov	r9, r3
 8000a48:	469a      	mov	sl, r3
 8000a4a:	00e4      	lsls	r4, r4, #3
 8000a4c:	04d2      	lsls	r2, r2, #19
 8000a4e:	4314      	orrs	r4, r2
 8000a50:	3f7f      	subs	r7, #127	@ 0x7f
 8000a52:	0273      	lsls	r3, r6, #9
 8000a54:	0a5b      	lsrs	r3, r3, #9
 8000a56:	4698      	mov	r8, r3
 8000a58:	0073      	lsls	r3, r6, #1
 8000a5a:	0e1b      	lsrs	r3, r3, #24
 8000a5c:	0ff6      	lsrs	r6, r6, #31
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d01b      	beq.n	8000a9a <__aeabi_fdiv+0x76>
 8000a62:	2bff      	cmp	r3, #255	@ 0xff
 8000a64:	d013      	beq.n	8000a8e <__aeabi_fdiv+0x6a>
 8000a66:	4642      	mov	r2, r8
 8000a68:	2180      	movs	r1, #128	@ 0x80
 8000a6a:	00d2      	lsls	r2, r2, #3
 8000a6c:	04c9      	lsls	r1, r1, #19
 8000a6e:	4311      	orrs	r1, r2
 8000a70:	4688      	mov	r8, r1
 8000a72:	2000      	movs	r0, #0
 8000a74:	3b7f      	subs	r3, #127	@ 0x7f
 8000a76:	0029      	movs	r1, r5
 8000a78:	1aff      	subs	r7, r7, r3
 8000a7a:	464b      	mov	r3, r9
 8000a7c:	4071      	eors	r1, r6
 8000a7e:	b2c9      	uxtb	r1, r1
 8000a80:	2b0f      	cmp	r3, #15
 8000a82:	d900      	bls.n	8000a86 <__aeabi_fdiv+0x62>
 8000a84:	e0b5      	b.n	8000bf2 <__aeabi_fdiv+0x1ce>
 8000a86:	4a74      	ldr	r2, [pc, #464]	@ (8000c58 <__aeabi_fdiv+0x234>)
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	58d3      	ldr	r3, [r2, r3]
 8000a8c:	469f      	mov	pc, r3
 8000a8e:	4643      	mov	r3, r8
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d13f      	bne.n	8000b14 <__aeabi_fdiv+0xf0>
 8000a94:	3fff      	subs	r7, #255	@ 0xff
 8000a96:	3302      	adds	r3, #2
 8000a98:	e003      	b.n	8000aa2 <__aeabi_fdiv+0x7e>
 8000a9a:	4643      	mov	r3, r8
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d12d      	bne.n	8000afc <__aeabi_fdiv+0xd8>
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	0029      	movs	r1, r5
 8000aa4:	464a      	mov	r2, r9
 8000aa6:	4071      	eors	r1, r6
 8000aa8:	b2c9      	uxtb	r1, r1
 8000aaa:	431a      	orrs	r2, r3
 8000aac:	2a0e      	cmp	r2, #14
 8000aae:	d838      	bhi.n	8000b22 <__aeabi_fdiv+0xfe>
 8000ab0:	486a      	ldr	r0, [pc, #424]	@ (8000c5c <__aeabi_fdiv+0x238>)
 8000ab2:	0092      	lsls	r2, r2, #2
 8000ab4:	5882      	ldr	r2, [r0, r2]
 8000ab6:	4697      	mov	pc, r2
 8000ab8:	2c00      	cmp	r4, #0
 8000aba:	d113      	bne.n	8000ae4 <__aeabi_fdiv+0xc0>
 8000abc:	2304      	movs	r3, #4
 8000abe:	4699      	mov	r9, r3
 8000ac0:	3b03      	subs	r3, #3
 8000ac2:	2700      	movs	r7, #0
 8000ac4:	469a      	mov	sl, r3
 8000ac6:	e7c4      	b.n	8000a52 <__aeabi_fdiv+0x2e>
 8000ac8:	2c00      	cmp	r4, #0
 8000aca:	d105      	bne.n	8000ad8 <__aeabi_fdiv+0xb4>
 8000acc:	2308      	movs	r3, #8
 8000ace:	4699      	mov	r9, r3
 8000ad0:	3b06      	subs	r3, #6
 8000ad2:	27ff      	movs	r7, #255	@ 0xff
 8000ad4:	469a      	mov	sl, r3
 8000ad6:	e7bc      	b.n	8000a52 <__aeabi_fdiv+0x2e>
 8000ad8:	230c      	movs	r3, #12
 8000ada:	4699      	mov	r9, r3
 8000adc:	3b09      	subs	r3, #9
 8000ade:	27ff      	movs	r7, #255	@ 0xff
 8000ae0:	469a      	mov	sl, r3
 8000ae2:	e7b6      	b.n	8000a52 <__aeabi_fdiv+0x2e>
 8000ae4:	0020      	movs	r0, r4
 8000ae6:	f002 fbcb 	bl	8003280 <__clzsi2>
 8000aea:	2776      	movs	r7, #118	@ 0x76
 8000aec:	1f43      	subs	r3, r0, #5
 8000aee:	409c      	lsls	r4, r3
 8000af0:	2300      	movs	r3, #0
 8000af2:	427f      	negs	r7, r7
 8000af4:	4699      	mov	r9, r3
 8000af6:	469a      	mov	sl, r3
 8000af8:	1a3f      	subs	r7, r7, r0
 8000afa:	e7aa      	b.n	8000a52 <__aeabi_fdiv+0x2e>
 8000afc:	4640      	mov	r0, r8
 8000afe:	f002 fbbf 	bl	8003280 <__clzsi2>
 8000b02:	4642      	mov	r2, r8
 8000b04:	1f43      	subs	r3, r0, #5
 8000b06:	409a      	lsls	r2, r3
 8000b08:	2376      	movs	r3, #118	@ 0x76
 8000b0a:	425b      	negs	r3, r3
 8000b0c:	1a1b      	subs	r3, r3, r0
 8000b0e:	4690      	mov	r8, r2
 8000b10:	2000      	movs	r0, #0
 8000b12:	e7b0      	b.n	8000a76 <__aeabi_fdiv+0x52>
 8000b14:	2303      	movs	r3, #3
 8000b16:	464a      	mov	r2, r9
 8000b18:	431a      	orrs	r2, r3
 8000b1a:	4691      	mov	r9, r2
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	33fc      	adds	r3, #252	@ 0xfc
 8000b20:	e7a9      	b.n	8000a76 <__aeabi_fdiv+0x52>
 8000b22:	000d      	movs	r5, r1
 8000b24:	20ff      	movs	r0, #255	@ 0xff
 8000b26:	2200      	movs	r2, #0
 8000b28:	05c0      	lsls	r0, r0, #23
 8000b2a:	07ed      	lsls	r5, r5, #31
 8000b2c:	4310      	orrs	r0, r2
 8000b2e:	4328      	orrs	r0, r5
 8000b30:	bce0      	pop	{r5, r6, r7}
 8000b32:	46ba      	mov	sl, r7
 8000b34:	46b1      	mov	r9, r6
 8000b36:	46a8      	mov	r8, r5
 8000b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b3a:	000d      	movs	r5, r1
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	2200      	movs	r2, #0
 8000b40:	e7f2      	b.n	8000b28 <__aeabi_fdiv+0x104>
 8000b42:	4653      	mov	r3, sl
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d0ed      	beq.n	8000b24 <__aeabi_fdiv+0x100>
 8000b48:	2b03      	cmp	r3, #3
 8000b4a:	d033      	beq.n	8000bb4 <__aeabi_fdiv+0x190>
 8000b4c:	46a0      	mov	r8, r4
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d105      	bne.n	8000b5e <__aeabi_fdiv+0x13a>
 8000b52:	2000      	movs	r0, #0
 8000b54:	2200      	movs	r2, #0
 8000b56:	e7e7      	b.n	8000b28 <__aeabi_fdiv+0x104>
 8000b58:	0035      	movs	r5, r6
 8000b5a:	2803      	cmp	r0, #3
 8000b5c:	d07a      	beq.n	8000c54 <__aeabi_fdiv+0x230>
 8000b5e:	003b      	movs	r3, r7
 8000b60:	337f      	adds	r3, #127	@ 0x7f
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	dd2d      	ble.n	8000bc2 <__aeabi_fdiv+0x19e>
 8000b66:	4642      	mov	r2, r8
 8000b68:	0752      	lsls	r2, r2, #29
 8000b6a:	d007      	beq.n	8000b7c <__aeabi_fdiv+0x158>
 8000b6c:	220f      	movs	r2, #15
 8000b6e:	4641      	mov	r1, r8
 8000b70:	400a      	ands	r2, r1
 8000b72:	2a04      	cmp	r2, #4
 8000b74:	d002      	beq.n	8000b7c <__aeabi_fdiv+0x158>
 8000b76:	2204      	movs	r2, #4
 8000b78:	4694      	mov	ip, r2
 8000b7a:	44e0      	add	r8, ip
 8000b7c:	4642      	mov	r2, r8
 8000b7e:	0112      	lsls	r2, r2, #4
 8000b80:	d505      	bpl.n	8000b8e <__aeabi_fdiv+0x16a>
 8000b82:	4642      	mov	r2, r8
 8000b84:	4b36      	ldr	r3, [pc, #216]	@ (8000c60 <__aeabi_fdiv+0x23c>)
 8000b86:	401a      	ands	r2, r3
 8000b88:	003b      	movs	r3, r7
 8000b8a:	4690      	mov	r8, r2
 8000b8c:	3380      	adds	r3, #128	@ 0x80
 8000b8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b90:	dcc8      	bgt.n	8000b24 <__aeabi_fdiv+0x100>
 8000b92:	4642      	mov	r2, r8
 8000b94:	0192      	lsls	r2, r2, #6
 8000b96:	0a52      	lsrs	r2, r2, #9
 8000b98:	b2d8      	uxtb	r0, r3
 8000b9a:	e7c5      	b.n	8000b28 <__aeabi_fdiv+0x104>
 8000b9c:	2280      	movs	r2, #128	@ 0x80
 8000b9e:	2500      	movs	r5, #0
 8000ba0:	20ff      	movs	r0, #255	@ 0xff
 8000ba2:	03d2      	lsls	r2, r2, #15
 8000ba4:	e7c0      	b.n	8000b28 <__aeabi_fdiv+0x104>
 8000ba6:	2280      	movs	r2, #128	@ 0x80
 8000ba8:	03d2      	lsls	r2, r2, #15
 8000baa:	4214      	tst	r4, r2
 8000bac:	d002      	beq.n	8000bb4 <__aeabi_fdiv+0x190>
 8000bae:	4643      	mov	r3, r8
 8000bb0:	4213      	tst	r3, r2
 8000bb2:	d049      	beq.n	8000c48 <__aeabi_fdiv+0x224>
 8000bb4:	2280      	movs	r2, #128	@ 0x80
 8000bb6:	03d2      	lsls	r2, r2, #15
 8000bb8:	4322      	orrs	r2, r4
 8000bba:	0252      	lsls	r2, r2, #9
 8000bbc:	20ff      	movs	r0, #255	@ 0xff
 8000bbe:	0a52      	lsrs	r2, r2, #9
 8000bc0:	e7b2      	b.n	8000b28 <__aeabi_fdiv+0x104>
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	2b1b      	cmp	r3, #27
 8000bc8:	dcc3      	bgt.n	8000b52 <__aeabi_fdiv+0x12e>
 8000bca:	4642      	mov	r2, r8
 8000bcc:	40da      	lsrs	r2, r3
 8000bce:	4643      	mov	r3, r8
 8000bd0:	379e      	adds	r7, #158	@ 0x9e
 8000bd2:	40bb      	lsls	r3, r7
 8000bd4:	1e59      	subs	r1, r3, #1
 8000bd6:	418b      	sbcs	r3, r1
 8000bd8:	431a      	orrs	r2, r3
 8000bda:	0753      	lsls	r3, r2, #29
 8000bdc:	d004      	beq.n	8000be8 <__aeabi_fdiv+0x1c4>
 8000bde:	230f      	movs	r3, #15
 8000be0:	4013      	ands	r3, r2
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	d000      	beq.n	8000be8 <__aeabi_fdiv+0x1c4>
 8000be6:	3204      	adds	r2, #4
 8000be8:	0153      	lsls	r3, r2, #5
 8000bea:	d529      	bpl.n	8000c40 <__aeabi_fdiv+0x21c>
 8000bec:	2001      	movs	r0, #1
 8000bee:	2200      	movs	r2, #0
 8000bf0:	e79a      	b.n	8000b28 <__aeabi_fdiv+0x104>
 8000bf2:	4642      	mov	r2, r8
 8000bf4:	0163      	lsls	r3, r4, #5
 8000bf6:	0155      	lsls	r5, r2, #5
 8000bf8:	42ab      	cmp	r3, r5
 8000bfa:	d215      	bcs.n	8000c28 <__aeabi_fdiv+0x204>
 8000bfc:	201b      	movs	r0, #27
 8000bfe:	2200      	movs	r2, #0
 8000c00:	3f01      	subs	r7, #1
 8000c02:	2601      	movs	r6, #1
 8000c04:	001c      	movs	r4, r3
 8000c06:	0052      	lsls	r2, r2, #1
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	2c00      	cmp	r4, #0
 8000c0c:	db01      	blt.n	8000c12 <__aeabi_fdiv+0x1ee>
 8000c0e:	429d      	cmp	r5, r3
 8000c10:	d801      	bhi.n	8000c16 <__aeabi_fdiv+0x1f2>
 8000c12:	1b5b      	subs	r3, r3, r5
 8000c14:	4332      	orrs	r2, r6
 8000c16:	3801      	subs	r0, #1
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	d1f3      	bne.n	8000c04 <__aeabi_fdiv+0x1e0>
 8000c1c:	1e58      	subs	r0, r3, #1
 8000c1e:	4183      	sbcs	r3, r0
 8000c20:	4313      	orrs	r3, r2
 8000c22:	4698      	mov	r8, r3
 8000c24:	000d      	movs	r5, r1
 8000c26:	e79a      	b.n	8000b5e <__aeabi_fdiv+0x13a>
 8000c28:	201a      	movs	r0, #26
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	1b5b      	subs	r3, r3, r5
 8000c2e:	e7e8      	b.n	8000c02 <__aeabi_fdiv+0x1de>
 8000c30:	3b02      	subs	r3, #2
 8000c32:	425a      	negs	r2, r3
 8000c34:	4153      	adcs	r3, r2
 8000c36:	425b      	negs	r3, r3
 8000c38:	0035      	movs	r5, r6
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	b2d8      	uxtb	r0, r3
 8000c3e:	e773      	b.n	8000b28 <__aeabi_fdiv+0x104>
 8000c40:	0192      	lsls	r2, r2, #6
 8000c42:	2000      	movs	r0, #0
 8000c44:	0a52      	lsrs	r2, r2, #9
 8000c46:	e76f      	b.n	8000b28 <__aeabi_fdiv+0x104>
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	0252      	lsls	r2, r2, #9
 8000c4c:	0035      	movs	r5, r6
 8000c4e:	20ff      	movs	r0, #255	@ 0xff
 8000c50:	0a52      	lsrs	r2, r2, #9
 8000c52:	e769      	b.n	8000b28 <__aeabi_fdiv+0x104>
 8000c54:	4644      	mov	r4, r8
 8000c56:	e7ad      	b.n	8000bb4 <__aeabi_fdiv+0x190>
 8000c58:	0800c28c 	.word	0x0800c28c
 8000c5c:	0800c2cc 	.word	0x0800c2cc
 8000c60:	f7ffffff 	.word	0xf7ffffff

08000c64 <__eqsf2>:
 8000c64:	b570      	push	{r4, r5, r6, lr}
 8000c66:	0042      	lsls	r2, r0, #1
 8000c68:	024e      	lsls	r6, r1, #9
 8000c6a:	004c      	lsls	r4, r1, #1
 8000c6c:	0245      	lsls	r5, r0, #9
 8000c6e:	0a6d      	lsrs	r5, r5, #9
 8000c70:	0e12      	lsrs	r2, r2, #24
 8000c72:	0fc3      	lsrs	r3, r0, #31
 8000c74:	0a76      	lsrs	r6, r6, #9
 8000c76:	0e24      	lsrs	r4, r4, #24
 8000c78:	0fc9      	lsrs	r1, r1, #31
 8000c7a:	2aff      	cmp	r2, #255	@ 0xff
 8000c7c:	d010      	beq.n	8000ca0 <__eqsf2+0x3c>
 8000c7e:	2cff      	cmp	r4, #255	@ 0xff
 8000c80:	d00c      	beq.n	8000c9c <__eqsf2+0x38>
 8000c82:	2001      	movs	r0, #1
 8000c84:	42a2      	cmp	r2, r4
 8000c86:	d10a      	bne.n	8000c9e <__eqsf2+0x3a>
 8000c88:	42b5      	cmp	r5, r6
 8000c8a:	d108      	bne.n	8000c9e <__eqsf2+0x3a>
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d00f      	beq.n	8000cb0 <__eqsf2+0x4c>
 8000c90:	2a00      	cmp	r2, #0
 8000c92:	d104      	bne.n	8000c9e <__eqsf2+0x3a>
 8000c94:	0028      	movs	r0, r5
 8000c96:	1e43      	subs	r3, r0, #1
 8000c98:	4198      	sbcs	r0, r3
 8000c9a:	e000      	b.n	8000c9e <__eqsf2+0x3a>
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	2cff      	cmp	r4, #255	@ 0xff
 8000ca4:	d1fb      	bne.n	8000c9e <__eqsf2+0x3a>
 8000ca6:	4335      	orrs	r5, r6
 8000ca8:	d1f9      	bne.n	8000c9e <__eqsf2+0x3a>
 8000caa:	404b      	eors	r3, r1
 8000cac:	0018      	movs	r0, r3
 8000cae:	e7f6      	b.n	8000c9e <__eqsf2+0x3a>
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	e7f4      	b.n	8000c9e <__eqsf2+0x3a>

08000cb4 <__gesf2>:
 8000cb4:	b530      	push	{r4, r5, lr}
 8000cb6:	0042      	lsls	r2, r0, #1
 8000cb8:	0244      	lsls	r4, r0, #9
 8000cba:	024d      	lsls	r5, r1, #9
 8000cbc:	0fc3      	lsrs	r3, r0, #31
 8000cbe:	0048      	lsls	r0, r1, #1
 8000cc0:	0a64      	lsrs	r4, r4, #9
 8000cc2:	0e12      	lsrs	r2, r2, #24
 8000cc4:	0a6d      	lsrs	r5, r5, #9
 8000cc6:	0e00      	lsrs	r0, r0, #24
 8000cc8:	0fc9      	lsrs	r1, r1, #31
 8000cca:	2aff      	cmp	r2, #255	@ 0xff
 8000ccc:	d019      	beq.n	8000d02 <__gesf2+0x4e>
 8000cce:	28ff      	cmp	r0, #255	@ 0xff
 8000cd0:	d00b      	beq.n	8000cea <__gesf2+0x36>
 8000cd2:	2a00      	cmp	r2, #0
 8000cd4:	d11e      	bne.n	8000d14 <__gesf2+0x60>
 8000cd6:	2800      	cmp	r0, #0
 8000cd8:	d10b      	bne.n	8000cf2 <__gesf2+0x3e>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	d027      	beq.n	8000d2e <__gesf2+0x7a>
 8000cde:	2c00      	cmp	r4, #0
 8000ce0:	d134      	bne.n	8000d4c <__gesf2+0x98>
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d02f      	beq.n	8000d46 <__gesf2+0x92>
 8000ce6:	0008      	movs	r0, r1
 8000ce8:	bd30      	pop	{r4, r5, pc}
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d128      	bne.n	8000d40 <__gesf2+0x8c>
 8000cee:	2a00      	cmp	r2, #0
 8000cf0:	d101      	bne.n	8000cf6 <__gesf2+0x42>
 8000cf2:	2c00      	cmp	r4, #0
 8000cf4:	d0f5      	beq.n	8000ce2 <__gesf2+0x2e>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d107      	bne.n	8000d0a <__gesf2+0x56>
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d023      	beq.n	8000d46 <__gesf2+0x92>
 8000cfe:	0018      	movs	r0, r3
 8000d00:	e7f2      	b.n	8000ce8 <__gesf2+0x34>
 8000d02:	2c00      	cmp	r4, #0
 8000d04:	d11c      	bne.n	8000d40 <__gesf2+0x8c>
 8000d06:	28ff      	cmp	r0, #255	@ 0xff
 8000d08:	d014      	beq.n	8000d34 <__gesf2+0x80>
 8000d0a:	1e58      	subs	r0, r3, #1
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	4018      	ands	r0, r3
 8000d10:	3801      	subs	r0, #1
 8000d12:	e7e9      	b.n	8000ce8 <__gesf2+0x34>
 8000d14:	2800      	cmp	r0, #0
 8000d16:	d0f8      	beq.n	8000d0a <__gesf2+0x56>
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	d1f6      	bne.n	8000d0a <__gesf2+0x56>
 8000d1c:	4282      	cmp	r2, r0
 8000d1e:	dcf4      	bgt.n	8000d0a <__gesf2+0x56>
 8000d20:	dbeb      	blt.n	8000cfa <__gesf2+0x46>
 8000d22:	42ac      	cmp	r4, r5
 8000d24:	d8f1      	bhi.n	8000d0a <__gesf2+0x56>
 8000d26:	2000      	movs	r0, #0
 8000d28:	42ac      	cmp	r4, r5
 8000d2a:	d2dd      	bcs.n	8000ce8 <__gesf2+0x34>
 8000d2c:	e7e5      	b.n	8000cfa <__gesf2+0x46>
 8000d2e:	2c00      	cmp	r4, #0
 8000d30:	d0da      	beq.n	8000ce8 <__gesf2+0x34>
 8000d32:	e7ea      	b.n	8000d0a <__gesf2+0x56>
 8000d34:	2d00      	cmp	r5, #0
 8000d36:	d103      	bne.n	8000d40 <__gesf2+0x8c>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d1e6      	bne.n	8000d0a <__gesf2+0x56>
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	e7d3      	b.n	8000ce8 <__gesf2+0x34>
 8000d40:	2002      	movs	r0, #2
 8000d42:	4240      	negs	r0, r0
 8000d44:	e7d0      	b.n	8000ce8 <__gesf2+0x34>
 8000d46:	2001      	movs	r0, #1
 8000d48:	4240      	negs	r0, r0
 8000d4a:	e7cd      	b.n	8000ce8 <__gesf2+0x34>
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d0e8      	beq.n	8000d22 <__gesf2+0x6e>
 8000d50:	e7db      	b.n	8000d0a <__gesf2+0x56>
 8000d52:	46c0      	nop			@ (mov r8, r8)

08000d54 <__lesf2>:
 8000d54:	b530      	push	{r4, r5, lr}
 8000d56:	0042      	lsls	r2, r0, #1
 8000d58:	0244      	lsls	r4, r0, #9
 8000d5a:	024d      	lsls	r5, r1, #9
 8000d5c:	0fc3      	lsrs	r3, r0, #31
 8000d5e:	0048      	lsls	r0, r1, #1
 8000d60:	0a64      	lsrs	r4, r4, #9
 8000d62:	0e12      	lsrs	r2, r2, #24
 8000d64:	0a6d      	lsrs	r5, r5, #9
 8000d66:	0e00      	lsrs	r0, r0, #24
 8000d68:	0fc9      	lsrs	r1, r1, #31
 8000d6a:	2aff      	cmp	r2, #255	@ 0xff
 8000d6c:	d01a      	beq.n	8000da4 <__lesf2+0x50>
 8000d6e:	28ff      	cmp	r0, #255	@ 0xff
 8000d70:	d00e      	beq.n	8000d90 <__lesf2+0x3c>
 8000d72:	2a00      	cmp	r2, #0
 8000d74:	d11e      	bne.n	8000db4 <__lesf2+0x60>
 8000d76:	2800      	cmp	r0, #0
 8000d78:	d10e      	bne.n	8000d98 <__lesf2+0x44>
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d02a      	beq.n	8000dd4 <__lesf2+0x80>
 8000d7e:	2c00      	cmp	r4, #0
 8000d80:	d00c      	beq.n	8000d9c <__lesf2+0x48>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d01d      	beq.n	8000dc2 <__lesf2+0x6e>
 8000d86:	1e58      	subs	r0, r3, #1
 8000d88:	2302      	movs	r3, #2
 8000d8a:	4018      	ands	r0, r3
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	e010      	b.n	8000db2 <__lesf2+0x5e>
 8000d90:	2d00      	cmp	r5, #0
 8000d92:	d10d      	bne.n	8000db0 <__lesf2+0x5c>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	d120      	bne.n	8000dda <__lesf2+0x86>
 8000d98:	2c00      	cmp	r4, #0
 8000d9a:	d11e      	bne.n	8000dda <__lesf2+0x86>
 8000d9c:	2900      	cmp	r1, #0
 8000d9e:	d023      	beq.n	8000de8 <__lesf2+0x94>
 8000da0:	0008      	movs	r0, r1
 8000da2:	e006      	b.n	8000db2 <__lesf2+0x5e>
 8000da4:	2c00      	cmp	r4, #0
 8000da6:	d103      	bne.n	8000db0 <__lesf2+0x5c>
 8000da8:	28ff      	cmp	r0, #255	@ 0xff
 8000daa:	d1ec      	bne.n	8000d86 <__lesf2+0x32>
 8000dac:	2d00      	cmp	r5, #0
 8000dae:	d017      	beq.n	8000de0 <__lesf2+0x8c>
 8000db0:	2002      	movs	r0, #2
 8000db2:	bd30      	pop	{r4, r5, pc}
 8000db4:	2800      	cmp	r0, #0
 8000db6:	d0e6      	beq.n	8000d86 <__lesf2+0x32>
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d1e4      	bne.n	8000d86 <__lesf2+0x32>
 8000dbc:	4282      	cmp	r2, r0
 8000dbe:	dce2      	bgt.n	8000d86 <__lesf2+0x32>
 8000dc0:	db04      	blt.n	8000dcc <__lesf2+0x78>
 8000dc2:	42ac      	cmp	r4, r5
 8000dc4:	d8df      	bhi.n	8000d86 <__lesf2+0x32>
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	42ac      	cmp	r4, r5
 8000dca:	d2f2      	bcs.n	8000db2 <__lesf2+0x5e>
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d00b      	beq.n	8000de8 <__lesf2+0x94>
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	e7ee      	b.n	8000db2 <__lesf2+0x5e>
 8000dd4:	2c00      	cmp	r4, #0
 8000dd6:	d0ec      	beq.n	8000db2 <__lesf2+0x5e>
 8000dd8:	e7d5      	b.n	8000d86 <__lesf2+0x32>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d1d3      	bne.n	8000d86 <__lesf2+0x32>
 8000dde:	e7f5      	b.n	8000dcc <__lesf2+0x78>
 8000de0:	2000      	movs	r0, #0
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d0e5      	beq.n	8000db2 <__lesf2+0x5e>
 8000de6:	e7ce      	b.n	8000d86 <__lesf2+0x32>
 8000de8:	2001      	movs	r0, #1
 8000dea:	4240      	negs	r0, r0
 8000dec:	e7e1      	b.n	8000db2 <__lesf2+0x5e>
 8000dee:	46c0      	nop			@ (mov r8, r8)

08000df0 <__aeabi_fmul>:
 8000df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000df2:	464f      	mov	r7, r9
 8000df4:	4646      	mov	r6, r8
 8000df6:	46d6      	mov	lr, sl
 8000df8:	0243      	lsls	r3, r0, #9
 8000dfa:	0a5b      	lsrs	r3, r3, #9
 8000dfc:	0045      	lsls	r5, r0, #1
 8000dfe:	b5c0      	push	{r6, r7, lr}
 8000e00:	4699      	mov	r9, r3
 8000e02:	1c0f      	adds	r7, r1, #0
 8000e04:	0e2d      	lsrs	r5, r5, #24
 8000e06:	0fc6      	lsrs	r6, r0, #31
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_fmul+0x1e>
 8000e0c:	e088      	b.n	8000f20 <__aeabi_fmul+0x130>
 8000e0e:	2dff      	cmp	r5, #255	@ 0xff
 8000e10:	d100      	bne.n	8000e14 <__aeabi_fmul+0x24>
 8000e12:	e08d      	b.n	8000f30 <__aeabi_fmul+0x140>
 8000e14:	2280      	movs	r2, #128	@ 0x80
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	04d2      	lsls	r2, r2, #19
 8000e1a:	431a      	orrs	r2, r3
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	4691      	mov	r9, r2
 8000e20:	4698      	mov	r8, r3
 8000e22:	469a      	mov	sl, r3
 8000e24:	3d7f      	subs	r5, #127	@ 0x7f
 8000e26:	027c      	lsls	r4, r7, #9
 8000e28:	007b      	lsls	r3, r7, #1
 8000e2a:	0a64      	lsrs	r4, r4, #9
 8000e2c:	0e1b      	lsrs	r3, r3, #24
 8000e2e:	0fff      	lsrs	r7, r7, #31
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d068      	beq.n	8000f06 <__aeabi_fmul+0x116>
 8000e34:	2bff      	cmp	r3, #255	@ 0xff
 8000e36:	d021      	beq.n	8000e7c <__aeabi_fmul+0x8c>
 8000e38:	2280      	movs	r2, #128	@ 0x80
 8000e3a:	00e4      	lsls	r4, r4, #3
 8000e3c:	04d2      	lsls	r2, r2, #19
 8000e3e:	4314      	orrs	r4, r2
 8000e40:	4642      	mov	r2, r8
 8000e42:	3b7f      	subs	r3, #127	@ 0x7f
 8000e44:	195b      	adds	r3, r3, r5
 8000e46:	2100      	movs	r1, #0
 8000e48:	1c5d      	adds	r5, r3, #1
 8000e4a:	2a0a      	cmp	r2, #10
 8000e4c:	dc2e      	bgt.n	8000eac <__aeabi_fmul+0xbc>
 8000e4e:	407e      	eors	r6, r7
 8000e50:	4642      	mov	r2, r8
 8000e52:	2a02      	cmp	r2, #2
 8000e54:	dc23      	bgt.n	8000e9e <__aeabi_fmul+0xae>
 8000e56:	3a01      	subs	r2, #1
 8000e58:	2a01      	cmp	r2, #1
 8000e5a:	d900      	bls.n	8000e5e <__aeabi_fmul+0x6e>
 8000e5c:	e0bd      	b.n	8000fda <__aeabi_fmul+0x1ea>
 8000e5e:	2902      	cmp	r1, #2
 8000e60:	d06e      	beq.n	8000f40 <__aeabi_fmul+0x150>
 8000e62:	2901      	cmp	r1, #1
 8000e64:	d12c      	bne.n	8000ec0 <__aeabi_fmul+0xd0>
 8000e66:	2000      	movs	r0, #0
 8000e68:	2200      	movs	r2, #0
 8000e6a:	05c0      	lsls	r0, r0, #23
 8000e6c:	07f6      	lsls	r6, r6, #31
 8000e6e:	4310      	orrs	r0, r2
 8000e70:	4330      	orrs	r0, r6
 8000e72:	bce0      	pop	{r5, r6, r7}
 8000e74:	46ba      	mov	sl, r7
 8000e76:	46b1      	mov	r9, r6
 8000e78:	46a8      	mov	r8, r5
 8000e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e7c:	002b      	movs	r3, r5
 8000e7e:	33ff      	adds	r3, #255	@ 0xff
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d065      	beq.n	8000f50 <__aeabi_fmul+0x160>
 8000e84:	2203      	movs	r2, #3
 8000e86:	4641      	mov	r1, r8
 8000e88:	4311      	orrs	r1, r2
 8000e8a:	0032      	movs	r2, r6
 8000e8c:	3501      	adds	r5, #1
 8000e8e:	4688      	mov	r8, r1
 8000e90:	407a      	eors	r2, r7
 8000e92:	35ff      	adds	r5, #255	@ 0xff
 8000e94:	290a      	cmp	r1, #10
 8000e96:	dd00      	ble.n	8000e9a <__aeabi_fmul+0xaa>
 8000e98:	e0d8      	b.n	800104c <__aeabi_fmul+0x25c>
 8000e9a:	0016      	movs	r6, r2
 8000e9c:	2103      	movs	r1, #3
 8000e9e:	4640      	mov	r0, r8
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	4082      	lsls	r2, r0
 8000ea4:	20a6      	movs	r0, #166	@ 0xa6
 8000ea6:	00c0      	lsls	r0, r0, #3
 8000ea8:	4202      	tst	r2, r0
 8000eaa:	d020      	beq.n	8000eee <__aeabi_fmul+0xfe>
 8000eac:	4653      	mov	r3, sl
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d046      	beq.n	8000f40 <__aeabi_fmul+0x150>
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	d100      	bne.n	8000eb8 <__aeabi_fmul+0xc8>
 8000eb6:	e0bb      	b.n	8001030 <__aeabi_fmul+0x240>
 8000eb8:	4651      	mov	r1, sl
 8000eba:	464c      	mov	r4, r9
 8000ebc:	2901      	cmp	r1, #1
 8000ebe:	d0d2      	beq.n	8000e66 <__aeabi_fmul+0x76>
 8000ec0:	002b      	movs	r3, r5
 8000ec2:	337f      	adds	r3, #127	@ 0x7f
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	dd70      	ble.n	8000faa <__aeabi_fmul+0x1ba>
 8000ec8:	0762      	lsls	r2, r4, #29
 8000eca:	d004      	beq.n	8000ed6 <__aeabi_fmul+0xe6>
 8000ecc:	220f      	movs	r2, #15
 8000ece:	4022      	ands	r2, r4
 8000ed0:	2a04      	cmp	r2, #4
 8000ed2:	d000      	beq.n	8000ed6 <__aeabi_fmul+0xe6>
 8000ed4:	3404      	adds	r4, #4
 8000ed6:	0122      	lsls	r2, r4, #4
 8000ed8:	d503      	bpl.n	8000ee2 <__aeabi_fmul+0xf2>
 8000eda:	4b63      	ldr	r3, [pc, #396]	@ (8001068 <__aeabi_fmul+0x278>)
 8000edc:	401c      	ands	r4, r3
 8000ede:	002b      	movs	r3, r5
 8000ee0:	3380      	adds	r3, #128	@ 0x80
 8000ee2:	2bfe      	cmp	r3, #254	@ 0xfe
 8000ee4:	dc2c      	bgt.n	8000f40 <__aeabi_fmul+0x150>
 8000ee6:	01a2      	lsls	r2, r4, #6
 8000ee8:	0a52      	lsrs	r2, r2, #9
 8000eea:	b2d8      	uxtb	r0, r3
 8000eec:	e7bd      	b.n	8000e6a <__aeabi_fmul+0x7a>
 8000eee:	2090      	movs	r0, #144	@ 0x90
 8000ef0:	0080      	lsls	r0, r0, #2
 8000ef2:	4202      	tst	r2, r0
 8000ef4:	d127      	bne.n	8000f46 <__aeabi_fmul+0x156>
 8000ef6:	38b9      	subs	r0, #185	@ 0xb9
 8000ef8:	38ff      	subs	r0, #255	@ 0xff
 8000efa:	4210      	tst	r0, r2
 8000efc:	d06d      	beq.n	8000fda <__aeabi_fmul+0x1ea>
 8000efe:	003e      	movs	r6, r7
 8000f00:	46a1      	mov	r9, r4
 8000f02:	468a      	mov	sl, r1
 8000f04:	e7d2      	b.n	8000eac <__aeabi_fmul+0xbc>
 8000f06:	2c00      	cmp	r4, #0
 8000f08:	d141      	bne.n	8000f8e <__aeabi_fmul+0x19e>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	4642      	mov	r2, r8
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	4690      	mov	r8, r2
 8000f12:	002b      	movs	r3, r5
 8000f14:	4642      	mov	r2, r8
 8000f16:	2101      	movs	r1, #1
 8000f18:	1c5d      	adds	r5, r3, #1
 8000f1a:	2a0a      	cmp	r2, #10
 8000f1c:	dd97      	ble.n	8000e4e <__aeabi_fmul+0x5e>
 8000f1e:	e7c5      	b.n	8000eac <__aeabi_fmul+0xbc>
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d126      	bne.n	8000f72 <__aeabi_fmul+0x182>
 8000f24:	2304      	movs	r3, #4
 8000f26:	4698      	mov	r8, r3
 8000f28:	3b03      	subs	r3, #3
 8000f2a:	2500      	movs	r5, #0
 8000f2c:	469a      	mov	sl, r3
 8000f2e:	e77a      	b.n	8000e26 <__aeabi_fmul+0x36>
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d118      	bne.n	8000f66 <__aeabi_fmul+0x176>
 8000f34:	2308      	movs	r3, #8
 8000f36:	4698      	mov	r8, r3
 8000f38:	3b06      	subs	r3, #6
 8000f3a:	25ff      	movs	r5, #255	@ 0xff
 8000f3c:	469a      	mov	sl, r3
 8000f3e:	e772      	b.n	8000e26 <__aeabi_fmul+0x36>
 8000f40:	20ff      	movs	r0, #255	@ 0xff
 8000f42:	2200      	movs	r2, #0
 8000f44:	e791      	b.n	8000e6a <__aeabi_fmul+0x7a>
 8000f46:	2280      	movs	r2, #128	@ 0x80
 8000f48:	2600      	movs	r6, #0
 8000f4a:	20ff      	movs	r0, #255	@ 0xff
 8000f4c:	03d2      	lsls	r2, r2, #15
 8000f4e:	e78c      	b.n	8000e6a <__aeabi_fmul+0x7a>
 8000f50:	4641      	mov	r1, r8
 8000f52:	2202      	movs	r2, #2
 8000f54:	3501      	adds	r5, #1
 8000f56:	4311      	orrs	r1, r2
 8000f58:	4688      	mov	r8, r1
 8000f5a:	35ff      	adds	r5, #255	@ 0xff
 8000f5c:	290a      	cmp	r1, #10
 8000f5e:	dca5      	bgt.n	8000eac <__aeabi_fmul+0xbc>
 8000f60:	2102      	movs	r1, #2
 8000f62:	407e      	eors	r6, r7
 8000f64:	e774      	b.n	8000e50 <__aeabi_fmul+0x60>
 8000f66:	230c      	movs	r3, #12
 8000f68:	4698      	mov	r8, r3
 8000f6a:	3b09      	subs	r3, #9
 8000f6c:	25ff      	movs	r5, #255	@ 0xff
 8000f6e:	469a      	mov	sl, r3
 8000f70:	e759      	b.n	8000e26 <__aeabi_fmul+0x36>
 8000f72:	0018      	movs	r0, r3
 8000f74:	f002 f984 	bl	8003280 <__clzsi2>
 8000f78:	464a      	mov	r2, r9
 8000f7a:	1f43      	subs	r3, r0, #5
 8000f7c:	2576      	movs	r5, #118	@ 0x76
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	2300      	movs	r3, #0
 8000f82:	426d      	negs	r5, r5
 8000f84:	4691      	mov	r9, r2
 8000f86:	4698      	mov	r8, r3
 8000f88:	469a      	mov	sl, r3
 8000f8a:	1a2d      	subs	r5, r5, r0
 8000f8c:	e74b      	b.n	8000e26 <__aeabi_fmul+0x36>
 8000f8e:	0020      	movs	r0, r4
 8000f90:	f002 f976 	bl	8003280 <__clzsi2>
 8000f94:	4642      	mov	r2, r8
 8000f96:	1f43      	subs	r3, r0, #5
 8000f98:	409c      	lsls	r4, r3
 8000f9a:	1a2b      	subs	r3, r5, r0
 8000f9c:	3b76      	subs	r3, #118	@ 0x76
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	1c5d      	adds	r5, r3, #1
 8000fa2:	2a0a      	cmp	r2, #10
 8000fa4:	dc00      	bgt.n	8000fa8 <__aeabi_fmul+0x1b8>
 8000fa6:	e752      	b.n	8000e4e <__aeabi_fmul+0x5e>
 8000fa8:	e780      	b.n	8000eac <__aeabi_fmul+0xbc>
 8000faa:	2201      	movs	r2, #1
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b1b      	cmp	r3, #27
 8000fb0:	dd00      	ble.n	8000fb4 <__aeabi_fmul+0x1c4>
 8000fb2:	e758      	b.n	8000e66 <__aeabi_fmul+0x76>
 8000fb4:	359e      	adds	r5, #158	@ 0x9e
 8000fb6:	0022      	movs	r2, r4
 8000fb8:	40ac      	lsls	r4, r5
 8000fba:	40da      	lsrs	r2, r3
 8000fbc:	1e63      	subs	r3, r4, #1
 8000fbe:	419c      	sbcs	r4, r3
 8000fc0:	4322      	orrs	r2, r4
 8000fc2:	0753      	lsls	r3, r2, #29
 8000fc4:	d004      	beq.n	8000fd0 <__aeabi_fmul+0x1e0>
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	4013      	ands	r3, r2
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	d000      	beq.n	8000fd0 <__aeabi_fmul+0x1e0>
 8000fce:	3204      	adds	r2, #4
 8000fd0:	0153      	lsls	r3, r2, #5
 8000fd2:	d537      	bpl.n	8001044 <__aeabi_fmul+0x254>
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	e747      	b.n	8000e6a <__aeabi_fmul+0x7a>
 8000fda:	0c21      	lsrs	r1, r4, #16
 8000fdc:	464a      	mov	r2, r9
 8000fde:	0424      	lsls	r4, r4, #16
 8000fe0:	0c24      	lsrs	r4, r4, #16
 8000fe2:	0027      	movs	r7, r4
 8000fe4:	0c10      	lsrs	r0, r2, #16
 8000fe6:	0412      	lsls	r2, r2, #16
 8000fe8:	0c12      	lsrs	r2, r2, #16
 8000fea:	4344      	muls	r4, r0
 8000fec:	4357      	muls	r7, r2
 8000fee:	4348      	muls	r0, r1
 8000ff0:	4351      	muls	r1, r2
 8000ff2:	0c3a      	lsrs	r2, r7, #16
 8000ff4:	1909      	adds	r1, r1, r4
 8000ff6:	1852      	adds	r2, r2, r1
 8000ff8:	4294      	cmp	r4, r2
 8000ffa:	d903      	bls.n	8001004 <__aeabi_fmul+0x214>
 8000ffc:	2180      	movs	r1, #128	@ 0x80
 8000ffe:	0249      	lsls	r1, r1, #9
 8001000:	468c      	mov	ip, r1
 8001002:	4460      	add	r0, ip
 8001004:	043f      	lsls	r7, r7, #16
 8001006:	0411      	lsls	r1, r2, #16
 8001008:	0c3f      	lsrs	r7, r7, #16
 800100a:	19c9      	adds	r1, r1, r7
 800100c:	018c      	lsls	r4, r1, #6
 800100e:	1e67      	subs	r7, r4, #1
 8001010:	41bc      	sbcs	r4, r7
 8001012:	0c12      	lsrs	r2, r2, #16
 8001014:	0e89      	lsrs	r1, r1, #26
 8001016:	1812      	adds	r2, r2, r0
 8001018:	430c      	orrs	r4, r1
 800101a:	0192      	lsls	r2, r2, #6
 800101c:	4314      	orrs	r4, r2
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	d50e      	bpl.n	8001040 <__aeabi_fmul+0x250>
 8001022:	2301      	movs	r3, #1
 8001024:	0862      	lsrs	r2, r4, #1
 8001026:	401c      	ands	r4, r3
 8001028:	4314      	orrs	r4, r2
 800102a:	e749      	b.n	8000ec0 <__aeabi_fmul+0xd0>
 800102c:	003e      	movs	r6, r7
 800102e:	46a1      	mov	r9, r4
 8001030:	2280      	movs	r2, #128	@ 0x80
 8001032:	464b      	mov	r3, r9
 8001034:	03d2      	lsls	r2, r2, #15
 8001036:	431a      	orrs	r2, r3
 8001038:	0252      	lsls	r2, r2, #9
 800103a:	20ff      	movs	r0, #255	@ 0xff
 800103c:	0a52      	lsrs	r2, r2, #9
 800103e:	e714      	b.n	8000e6a <__aeabi_fmul+0x7a>
 8001040:	001d      	movs	r5, r3
 8001042:	e73d      	b.n	8000ec0 <__aeabi_fmul+0xd0>
 8001044:	0192      	lsls	r2, r2, #6
 8001046:	2000      	movs	r0, #0
 8001048:	0a52      	lsrs	r2, r2, #9
 800104a:	e70e      	b.n	8000e6a <__aeabi_fmul+0x7a>
 800104c:	290f      	cmp	r1, #15
 800104e:	d1ed      	bne.n	800102c <__aeabi_fmul+0x23c>
 8001050:	2280      	movs	r2, #128	@ 0x80
 8001052:	464b      	mov	r3, r9
 8001054:	03d2      	lsls	r2, r2, #15
 8001056:	4213      	tst	r3, r2
 8001058:	d0ea      	beq.n	8001030 <__aeabi_fmul+0x240>
 800105a:	4214      	tst	r4, r2
 800105c:	d1e8      	bne.n	8001030 <__aeabi_fmul+0x240>
 800105e:	003e      	movs	r6, r7
 8001060:	20ff      	movs	r0, #255	@ 0xff
 8001062:	4322      	orrs	r2, r4
 8001064:	e701      	b.n	8000e6a <__aeabi_fmul+0x7a>
 8001066:	46c0      	nop			@ (mov r8, r8)
 8001068:	f7ffffff 	.word	0xf7ffffff

0800106c <__aeabi_fsub>:
 800106c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800106e:	4647      	mov	r7, r8
 8001070:	46ce      	mov	lr, r9
 8001072:	024e      	lsls	r6, r1, #9
 8001074:	0243      	lsls	r3, r0, #9
 8001076:	0045      	lsls	r5, r0, #1
 8001078:	0a72      	lsrs	r2, r6, #9
 800107a:	0fc4      	lsrs	r4, r0, #31
 800107c:	0048      	lsls	r0, r1, #1
 800107e:	b580      	push	{r7, lr}
 8001080:	4694      	mov	ip, r2
 8001082:	0a5f      	lsrs	r7, r3, #9
 8001084:	0e2d      	lsrs	r5, r5, #24
 8001086:	099b      	lsrs	r3, r3, #6
 8001088:	0e00      	lsrs	r0, r0, #24
 800108a:	0fc9      	lsrs	r1, r1, #31
 800108c:	09b6      	lsrs	r6, r6, #6
 800108e:	28ff      	cmp	r0, #255	@ 0xff
 8001090:	d024      	beq.n	80010dc <__aeabi_fsub+0x70>
 8001092:	2201      	movs	r2, #1
 8001094:	4051      	eors	r1, r2
 8001096:	1a2a      	subs	r2, r5, r0
 8001098:	428c      	cmp	r4, r1
 800109a:	d00f      	beq.n	80010bc <__aeabi_fsub+0x50>
 800109c:	2a00      	cmp	r2, #0
 800109e:	dc00      	bgt.n	80010a2 <__aeabi_fsub+0x36>
 80010a0:	e16a      	b.n	8001378 <__aeabi_fsub+0x30c>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	d135      	bne.n	8001112 <__aeabi_fsub+0xa6>
 80010a6:	2e00      	cmp	r6, #0
 80010a8:	d100      	bne.n	80010ac <__aeabi_fsub+0x40>
 80010aa:	e0a2      	b.n	80011f2 <__aeabi_fsub+0x186>
 80010ac:	1e51      	subs	r1, r2, #1
 80010ae:	2a01      	cmp	r2, #1
 80010b0:	d100      	bne.n	80010b4 <__aeabi_fsub+0x48>
 80010b2:	e124      	b.n	80012fe <__aeabi_fsub+0x292>
 80010b4:	2aff      	cmp	r2, #255	@ 0xff
 80010b6:	d021      	beq.n	80010fc <__aeabi_fsub+0x90>
 80010b8:	000a      	movs	r2, r1
 80010ba:	e02f      	b.n	800111c <__aeabi_fsub+0xb0>
 80010bc:	2a00      	cmp	r2, #0
 80010be:	dc00      	bgt.n	80010c2 <__aeabi_fsub+0x56>
 80010c0:	e167      	b.n	8001392 <__aeabi_fsub+0x326>
 80010c2:	2800      	cmp	r0, #0
 80010c4:	d05e      	beq.n	8001184 <__aeabi_fsub+0x118>
 80010c6:	2dff      	cmp	r5, #255	@ 0xff
 80010c8:	d018      	beq.n	80010fc <__aeabi_fsub+0x90>
 80010ca:	2180      	movs	r1, #128	@ 0x80
 80010cc:	04c9      	lsls	r1, r1, #19
 80010ce:	430e      	orrs	r6, r1
 80010d0:	2a1b      	cmp	r2, #27
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_fsub+0x6a>
 80010d4:	e076      	b.n	80011c4 <__aeabi_fsub+0x158>
 80010d6:	002a      	movs	r2, r5
 80010d8:	3301      	adds	r3, #1
 80010da:	e032      	b.n	8001142 <__aeabi_fsub+0xd6>
 80010dc:	002a      	movs	r2, r5
 80010de:	3aff      	subs	r2, #255	@ 0xff
 80010e0:	4691      	mov	r9, r2
 80010e2:	2e00      	cmp	r6, #0
 80010e4:	d042      	beq.n	800116c <__aeabi_fsub+0x100>
 80010e6:	428c      	cmp	r4, r1
 80010e8:	d055      	beq.n	8001196 <__aeabi_fsub+0x12a>
 80010ea:	464a      	mov	r2, r9
 80010ec:	2a00      	cmp	r2, #0
 80010ee:	d100      	bne.n	80010f2 <__aeabi_fsub+0x86>
 80010f0:	e09c      	b.n	800122c <__aeabi_fsub+0x1c0>
 80010f2:	2d00      	cmp	r5, #0
 80010f4:	d100      	bne.n	80010f8 <__aeabi_fsub+0x8c>
 80010f6:	e077      	b.n	80011e8 <__aeabi_fsub+0x17c>
 80010f8:	000c      	movs	r4, r1
 80010fa:	0033      	movs	r3, r6
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d100      	bne.n	8001104 <__aeabi_fsub+0x98>
 8001102:	e06e      	b.n	80011e2 <__aeabi_fsub+0x176>
 8001104:	2280      	movs	r2, #128	@ 0x80
 8001106:	03d2      	lsls	r2, r2, #15
 8001108:	4313      	orrs	r3, r2
 800110a:	025b      	lsls	r3, r3, #9
 800110c:	20ff      	movs	r0, #255	@ 0xff
 800110e:	0a5b      	lsrs	r3, r3, #9
 8001110:	e024      	b.n	800115c <__aeabi_fsub+0xf0>
 8001112:	2dff      	cmp	r5, #255	@ 0xff
 8001114:	d0f2      	beq.n	80010fc <__aeabi_fsub+0x90>
 8001116:	2180      	movs	r1, #128	@ 0x80
 8001118:	04c9      	lsls	r1, r1, #19
 800111a:	430e      	orrs	r6, r1
 800111c:	2101      	movs	r1, #1
 800111e:	2a1b      	cmp	r2, #27
 8001120:	dc08      	bgt.n	8001134 <__aeabi_fsub+0xc8>
 8001122:	0031      	movs	r1, r6
 8001124:	2020      	movs	r0, #32
 8001126:	40d1      	lsrs	r1, r2
 8001128:	1a82      	subs	r2, r0, r2
 800112a:	4096      	lsls	r6, r2
 800112c:	0032      	movs	r2, r6
 800112e:	1e50      	subs	r0, r2, #1
 8001130:	4182      	sbcs	r2, r0
 8001132:	4311      	orrs	r1, r2
 8001134:	1a5b      	subs	r3, r3, r1
 8001136:	015a      	lsls	r2, r3, #5
 8001138:	d460      	bmi.n	80011fc <__aeabi_fsub+0x190>
 800113a:	2107      	movs	r1, #7
 800113c:	002a      	movs	r2, r5
 800113e:	4019      	ands	r1, r3
 8001140:	d057      	beq.n	80011f2 <__aeabi_fsub+0x186>
 8001142:	210f      	movs	r1, #15
 8001144:	4019      	ands	r1, r3
 8001146:	2904      	cmp	r1, #4
 8001148:	d000      	beq.n	800114c <__aeabi_fsub+0xe0>
 800114a:	3304      	adds	r3, #4
 800114c:	0159      	lsls	r1, r3, #5
 800114e:	d550      	bpl.n	80011f2 <__aeabi_fsub+0x186>
 8001150:	1c50      	adds	r0, r2, #1
 8001152:	2afe      	cmp	r2, #254	@ 0xfe
 8001154:	d045      	beq.n	80011e2 <__aeabi_fsub+0x176>
 8001156:	019b      	lsls	r3, r3, #6
 8001158:	b2c0      	uxtb	r0, r0
 800115a:	0a5b      	lsrs	r3, r3, #9
 800115c:	05c0      	lsls	r0, r0, #23
 800115e:	4318      	orrs	r0, r3
 8001160:	07e4      	lsls	r4, r4, #31
 8001162:	4320      	orrs	r0, r4
 8001164:	bcc0      	pop	{r6, r7}
 8001166:	46b9      	mov	r9, r7
 8001168:	46b0      	mov	r8, r6
 800116a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800116c:	2201      	movs	r2, #1
 800116e:	4051      	eors	r1, r2
 8001170:	428c      	cmp	r4, r1
 8001172:	d1ba      	bne.n	80010ea <__aeabi_fsub+0x7e>
 8001174:	464a      	mov	r2, r9
 8001176:	2a00      	cmp	r2, #0
 8001178:	d010      	beq.n	800119c <__aeabi_fsub+0x130>
 800117a:	2d00      	cmp	r5, #0
 800117c:	d100      	bne.n	8001180 <__aeabi_fsub+0x114>
 800117e:	e098      	b.n	80012b2 <__aeabi_fsub+0x246>
 8001180:	2300      	movs	r3, #0
 8001182:	e7bb      	b.n	80010fc <__aeabi_fsub+0x90>
 8001184:	2e00      	cmp	r6, #0
 8001186:	d034      	beq.n	80011f2 <__aeabi_fsub+0x186>
 8001188:	1e51      	subs	r1, r2, #1
 800118a:	2a01      	cmp	r2, #1
 800118c:	d06e      	beq.n	800126c <__aeabi_fsub+0x200>
 800118e:	2aff      	cmp	r2, #255	@ 0xff
 8001190:	d0b4      	beq.n	80010fc <__aeabi_fsub+0x90>
 8001192:	000a      	movs	r2, r1
 8001194:	e79c      	b.n	80010d0 <__aeabi_fsub+0x64>
 8001196:	2a00      	cmp	r2, #0
 8001198:	d000      	beq.n	800119c <__aeabi_fsub+0x130>
 800119a:	e088      	b.n	80012ae <__aeabi_fsub+0x242>
 800119c:	20fe      	movs	r0, #254	@ 0xfe
 800119e:	1c6a      	adds	r2, r5, #1
 80011a0:	4210      	tst	r0, r2
 80011a2:	d000      	beq.n	80011a6 <__aeabi_fsub+0x13a>
 80011a4:	e092      	b.n	80012cc <__aeabi_fsub+0x260>
 80011a6:	2d00      	cmp	r5, #0
 80011a8:	d000      	beq.n	80011ac <__aeabi_fsub+0x140>
 80011aa:	e0a4      	b.n	80012f6 <__aeabi_fsub+0x28a>
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d100      	bne.n	80011b2 <__aeabi_fsub+0x146>
 80011b0:	e0cb      	b.n	800134a <__aeabi_fsub+0x2de>
 80011b2:	2e00      	cmp	r6, #0
 80011b4:	d000      	beq.n	80011b8 <__aeabi_fsub+0x14c>
 80011b6:	e0ca      	b.n	800134e <__aeabi_fsub+0x2e2>
 80011b8:	2200      	movs	r2, #0
 80011ba:	08db      	lsrs	r3, r3, #3
 80011bc:	025b      	lsls	r3, r3, #9
 80011be:	0a5b      	lsrs	r3, r3, #9
 80011c0:	b2d0      	uxtb	r0, r2
 80011c2:	e7cb      	b.n	800115c <__aeabi_fsub+0xf0>
 80011c4:	0031      	movs	r1, r6
 80011c6:	2020      	movs	r0, #32
 80011c8:	40d1      	lsrs	r1, r2
 80011ca:	1a82      	subs	r2, r0, r2
 80011cc:	4096      	lsls	r6, r2
 80011ce:	0032      	movs	r2, r6
 80011d0:	1e50      	subs	r0, r2, #1
 80011d2:	4182      	sbcs	r2, r0
 80011d4:	430a      	orrs	r2, r1
 80011d6:	189b      	adds	r3, r3, r2
 80011d8:	015a      	lsls	r2, r3, #5
 80011da:	d5ae      	bpl.n	800113a <__aeabi_fsub+0xce>
 80011dc:	1c6a      	adds	r2, r5, #1
 80011de:	2dfe      	cmp	r5, #254	@ 0xfe
 80011e0:	d14a      	bne.n	8001278 <__aeabi_fsub+0x20c>
 80011e2:	20ff      	movs	r0, #255	@ 0xff
 80011e4:	2300      	movs	r3, #0
 80011e6:	e7b9      	b.n	800115c <__aeabi_fsub+0xf0>
 80011e8:	22ff      	movs	r2, #255	@ 0xff
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d14b      	bne.n	8001286 <__aeabi_fsub+0x21a>
 80011ee:	000c      	movs	r4, r1
 80011f0:	0033      	movs	r3, r6
 80011f2:	08db      	lsrs	r3, r3, #3
 80011f4:	2aff      	cmp	r2, #255	@ 0xff
 80011f6:	d100      	bne.n	80011fa <__aeabi_fsub+0x18e>
 80011f8:	e781      	b.n	80010fe <__aeabi_fsub+0x92>
 80011fa:	e7df      	b.n	80011bc <__aeabi_fsub+0x150>
 80011fc:	019f      	lsls	r7, r3, #6
 80011fe:	09bf      	lsrs	r7, r7, #6
 8001200:	0038      	movs	r0, r7
 8001202:	f002 f83d 	bl	8003280 <__clzsi2>
 8001206:	3805      	subs	r0, #5
 8001208:	4087      	lsls	r7, r0
 800120a:	4285      	cmp	r5, r0
 800120c:	dc21      	bgt.n	8001252 <__aeabi_fsub+0x1e6>
 800120e:	003b      	movs	r3, r7
 8001210:	2120      	movs	r1, #32
 8001212:	1b42      	subs	r2, r0, r5
 8001214:	3201      	adds	r2, #1
 8001216:	40d3      	lsrs	r3, r2
 8001218:	1a8a      	subs	r2, r1, r2
 800121a:	4097      	lsls	r7, r2
 800121c:	1e7a      	subs	r2, r7, #1
 800121e:	4197      	sbcs	r7, r2
 8001220:	2200      	movs	r2, #0
 8001222:	433b      	orrs	r3, r7
 8001224:	0759      	lsls	r1, r3, #29
 8001226:	d000      	beq.n	800122a <__aeabi_fsub+0x1be>
 8001228:	e78b      	b.n	8001142 <__aeabi_fsub+0xd6>
 800122a:	e78f      	b.n	800114c <__aeabi_fsub+0xe0>
 800122c:	20fe      	movs	r0, #254	@ 0xfe
 800122e:	1c6a      	adds	r2, r5, #1
 8001230:	4210      	tst	r0, r2
 8001232:	d112      	bne.n	800125a <__aeabi_fsub+0x1ee>
 8001234:	2d00      	cmp	r5, #0
 8001236:	d152      	bne.n	80012de <__aeabi_fsub+0x272>
 8001238:	2b00      	cmp	r3, #0
 800123a:	d07c      	beq.n	8001336 <__aeabi_fsub+0x2ca>
 800123c:	2e00      	cmp	r6, #0
 800123e:	d0bb      	beq.n	80011b8 <__aeabi_fsub+0x14c>
 8001240:	1b9a      	subs	r2, r3, r6
 8001242:	0150      	lsls	r0, r2, #5
 8001244:	d400      	bmi.n	8001248 <__aeabi_fsub+0x1dc>
 8001246:	e08b      	b.n	8001360 <__aeabi_fsub+0x2f4>
 8001248:	2401      	movs	r4, #1
 800124a:	2200      	movs	r2, #0
 800124c:	1af3      	subs	r3, r6, r3
 800124e:	400c      	ands	r4, r1
 8001250:	e7e8      	b.n	8001224 <__aeabi_fsub+0x1b8>
 8001252:	4b56      	ldr	r3, [pc, #344]	@ (80013ac <__aeabi_fsub+0x340>)
 8001254:	1a2a      	subs	r2, r5, r0
 8001256:	403b      	ands	r3, r7
 8001258:	e7e4      	b.n	8001224 <__aeabi_fsub+0x1b8>
 800125a:	1b9f      	subs	r7, r3, r6
 800125c:	017a      	lsls	r2, r7, #5
 800125e:	d446      	bmi.n	80012ee <__aeabi_fsub+0x282>
 8001260:	2f00      	cmp	r7, #0
 8001262:	d1cd      	bne.n	8001200 <__aeabi_fsub+0x194>
 8001264:	2400      	movs	r4, #0
 8001266:	2000      	movs	r0, #0
 8001268:	2300      	movs	r3, #0
 800126a:	e777      	b.n	800115c <__aeabi_fsub+0xf0>
 800126c:	199b      	adds	r3, r3, r6
 800126e:	2501      	movs	r5, #1
 8001270:	3201      	adds	r2, #1
 8001272:	0159      	lsls	r1, r3, #5
 8001274:	d400      	bmi.n	8001278 <__aeabi_fsub+0x20c>
 8001276:	e760      	b.n	800113a <__aeabi_fsub+0xce>
 8001278:	2101      	movs	r1, #1
 800127a:	484d      	ldr	r0, [pc, #308]	@ (80013b0 <__aeabi_fsub+0x344>)
 800127c:	4019      	ands	r1, r3
 800127e:	085b      	lsrs	r3, r3, #1
 8001280:	4003      	ands	r3, r0
 8001282:	430b      	orrs	r3, r1
 8001284:	e7ce      	b.n	8001224 <__aeabi_fsub+0x1b8>
 8001286:	1e57      	subs	r7, r2, #1
 8001288:	2a01      	cmp	r2, #1
 800128a:	d05a      	beq.n	8001342 <__aeabi_fsub+0x2d6>
 800128c:	000c      	movs	r4, r1
 800128e:	2aff      	cmp	r2, #255	@ 0xff
 8001290:	d033      	beq.n	80012fa <__aeabi_fsub+0x28e>
 8001292:	2201      	movs	r2, #1
 8001294:	2f1b      	cmp	r7, #27
 8001296:	dc07      	bgt.n	80012a8 <__aeabi_fsub+0x23c>
 8001298:	2120      	movs	r1, #32
 800129a:	1bc9      	subs	r1, r1, r7
 800129c:	001a      	movs	r2, r3
 800129e:	408b      	lsls	r3, r1
 80012a0:	40fa      	lsrs	r2, r7
 80012a2:	1e59      	subs	r1, r3, #1
 80012a4:	418b      	sbcs	r3, r1
 80012a6:	431a      	orrs	r2, r3
 80012a8:	0005      	movs	r5, r0
 80012aa:	1ab3      	subs	r3, r6, r2
 80012ac:	e743      	b.n	8001136 <__aeabi_fsub+0xca>
 80012ae:	2d00      	cmp	r5, #0
 80012b0:	d123      	bne.n	80012fa <__aeabi_fsub+0x28e>
 80012b2:	22ff      	movs	r2, #255	@ 0xff
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d09b      	beq.n	80011f0 <__aeabi_fsub+0x184>
 80012b8:	1e51      	subs	r1, r2, #1
 80012ba:	2a01      	cmp	r2, #1
 80012bc:	d0d6      	beq.n	800126c <__aeabi_fsub+0x200>
 80012be:	2aff      	cmp	r2, #255	@ 0xff
 80012c0:	d01b      	beq.n	80012fa <__aeabi_fsub+0x28e>
 80012c2:	291b      	cmp	r1, #27
 80012c4:	dd2c      	ble.n	8001320 <__aeabi_fsub+0x2b4>
 80012c6:	0002      	movs	r2, r0
 80012c8:	1c73      	adds	r3, r6, #1
 80012ca:	e73a      	b.n	8001142 <__aeabi_fsub+0xd6>
 80012cc:	2aff      	cmp	r2, #255	@ 0xff
 80012ce:	d088      	beq.n	80011e2 <__aeabi_fsub+0x176>
 80012d0:	199b      	adds	r3, r3, r6
 80012d2:	085b      	lsrs	r3, r3, #1
 80012d4:	0759      	lsls	r1, r3, #29
 80012d6:	d000      	beq.n	80012da <__aeabi_fsub+0x26e>
 80012d8:	e733      	b.n	8001142 <__aeabi_fsub+0xd6>
 80012da:	08db      	lsrs	r3, r3, #3
 80012dc:	e76e      	b.n	80011bc <__aeabi_fsub+0x150>
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d110      	bne.n	8001304 <__aeabi_fsub+0x298>
 80012e2:	2e00      	cmp	r6, #0
 80012e4:	d043      	beq.n	800136e <__aeabi_fsub+0x302>
 80012e6:	2401      	movs	r4, #1
 80012e8:	0033      	movs	r3, r6
 80012ea:	400c      	ands	r4, r1
 80012ec:	e706      	b.n	80010fc <__aeabi_fsub+0x90>
 80012ee:	2401      	movs	r4, #1
 80012f0:	1af7      	subs	r7, r6, r3
 80012f2:	400c      	ands	r4, r1
 80012f4:	e784      	b.n	8001200 <__aeabi_fsub+0x194>
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d104      	bne.n	8001304 <__aeabi_fsub+0x298>
 80012fa:	0033      	movs	r3, r6
 80012fc:	e6fe      	b.n	80010fc <__aeabi_fsub+0x90>
 80012fe:	2501      	movs	r5, #1
 8001300:	1b9b      	subs	r3, r3, r6
 8001302:	e718      	b.n	8001136 <__aeabi_fsub+0xca>
 8001304:	2e00      	cmp	r6, #0
 8001306:	d100      	bne.n	800130a <__aeabi_fsub+0x29e>
 8001308:	e6f8      	b.n	80010fc <__aeabi_fsub+0x90>
 800130a:	2280      	movs	r2, #128	@ 0x80
 800130c:	03d2      	lsls	r2, r2, #15
 800130e:	4297      	cmp	r7, r2
 8001310:	d304      	bcc.n	800131c <__aeabi_fsub+0x2b0>
 8001312:	4594      	cmp	ip, r2
 8001314:	d202      	bcs.n	800131c <__aeabi_fsub+0x2b0>
 8001316:	2401      	movs	r4, #1
 8001318:	0033      	movs	r3, r6
 800131a:	400c      	ands	r4, r1
 800131c:	08db      	lsrs	r3, r3, #3
 800131e:	e6f1      	b.n	8001104 <__aeabi_fsub+0x98>
 8001320:	001a      	movs	r2, r3
 8001322:	2520      	movs	r5, #32
 8001324:	40ca      	lsrs	r2, r1
 8001326:	1a69      	subs	r1, r5, r1
 8001328:	408b      	lsls	r3, r1
 800132a:	1e59      	subs	r1, r3, #1
 800132c:	418b      	sbcs	r3, r1
 800132e:	4313      	orrs	r3, r2
 8001330:	0005      	movs	r5, r0
 8001332:	199b      	adds	r3, r3, r6
 8001334:	e750      	b.n	80011d8 <__aeabi_fsub+0x16c>
 8001336:	2e00      	cmp	r6, #0
 8001338:	d094      	beq.n	8001264 <__aeabi_fsub+0x1f8>
 800133a:	2401      	movs	r4, #1
 800133c:	0033      	movs	r3, r6
 800133e:	400c      	ands	r4, r1
 8001340:	e73a      	b.n	80011b8 <__aeabi_fsub+0x14c>
 8001342:	000c      	movs	r4, r1
 8001344:	2501      	movs	r5, #1
 8001346:	1af3      	subs	r3, r6, r3
 8001348:	e6f5      	b.n	8001136 <__aeabi_fsub+0xca>
 800134a:	0033      	movs	r3, r6
 800134c:	e734      	b.n	80011b8 <__aeabi_fsub+0x14c>
 800134e:	199b      	adds	r3, r3, r6
 8001350:	2200      	movs	r2, #0
 8001352:	0159      	lsls	r1, r3, #5
 8001354:	d5c1      	bpl.n	80012da <__aeabi_fsub+0x26e>
 8001356:	4a15      	ldr	r2, [pc, #84]	@ (80013ac <__aeabi_fsub+0x340>)
 8001358:	4013      	ands	r3, r2
 800135a:	08db      	lsrs	r3, r3, #3
 800135c:	2201      	movs	r2, #1
 800135e:	e72d      	b.n	80011bc <__aeabi_fsub+0x150>
 8001360:	2a00      	cmp	r2, #0
 8001362:	d100      	bne.n	8001366 <__aeabi_fsub+0x2fa>
 8001364:	e77e      	b.n	8001264 <__aeabi_fsub+0x1f8>
 8001366:	0013      	movs	r3, r2
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	e726      	b.n	80011bc <__aeabi_fsub+0x150>
 800136e:	2380      	movs	r3, #128	@ 0x80
 8001370:	2400      	movs	r4, #0
 8001372:	20ff      	movs	r0, #255	@ 0xff
 8001374:	03db      	lsls	r3, r3, #15
 8001376:	e6f1      	b.n	800115c <__aeabi_fsub+0xf0>
 8001378:	2a00      	cmp	r2, #0
 800137a:	d100      	bne.n	800137e <__aeabi_fsub+0x312>
 800137c:	e756      	b.n	800122c <__aeabi_fsub+0x1c0>
 800137e:	1b47      	subs	r7, r0, r5
 8001380:	003a      	movs	r2, r7
 8001382:	2d00      	cmp	r5, #0
 8001384:	d100      	bne.n	8001388 <__aeabi_fsub+0x31c>
 8001386:	e730      	b.n	80011ea <__aeabi_fsub+0x17e>
 8001388:	2280      	movs	r2, #128	@ 0x80
 800138a:	04d2      	lsls	r2, r2, #19
 800138c:	000c      	movs	r4, r1
 800138e:	4313      	orrs	r3, r2
 8001390:	e77f      	b.n	8001292 <__aeabi_fsub+0x226>
 8001392:	2a00      	cmp	r2, #0
 8001394:	d100      	bne.n	8001398 <__aeabi_fsub+0x32c>
 8001396:	e701      	b.n	800119c <__aeabi_fsub+0x130>
 8001398:	1b41      	subs	r1, r0, r5
 800139a:	2d00      	cmp	r5, #0
 800139c:	d101      	bne.n	80013a2 <__aeabi_fsub+0x336>
 800139e:	000a      	movs	r2, r1
 80013a0:	e788      	b.n	80012b4 <__aeabi_fsub+0x248>
 80013a2:	2280      	movs	r2, #128	@ 0x80
 80013a4:	04d2      	lsls	r2, r2, #19
 80013a6:	4313      	orrs	r3, r2
 80013a8:	e78b      	b.n	80012c2 <__aeabi_fsub+0x256>
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	fbffffff 	.word	0xfbffffff
 80013b0:	7dffffff 	.word	0x7dffffff

080013b4 <__aeabi_f2iz>:
 80013b4:	0241      	lsls	r1, r0, #9
 80013b6:	0042      	lsls	r2, r0, #1
 80013b8:	0fc3      	lsrs	r3, r0, #31
 80013ba:	0a49      	lsrs	r1, r1, #9
 80013bc:	2000      	movs	r0, #0
 80013be:	0e12      	lsrs	r2, r2, #24
 80013c0:	2a7e      	cmp	r2, #126	@ 0x7e
 80013c2:	dd03      	ble.n	80013cc <__aeabi_f2iz+0x18>
 80013c4:	2a9d      	cmp	r2, #157	@ 0x9d
 80013c6:	dd02      	ble.n	80013ce <__aeabi_f2iz+0x1a>
 80013c8:	4a09      	ldr	r2, [pc, #36]	@ (80013f0 <__aeabi_f2iz+0x3c>)
 80013ca:	1898      	adds	r0, r3, r2
 80013cc:	4770      	bx	lr
 80013ce:	2080      	movs	r0, #128	@ 0x80
 80013d0:	0400      	lsls	r0, r0, #16
 80013d2:	4301      	orrs	r1, r0
 80013d4:	2a95      	cmp	r2, #149	@ 0x95
 80013d6:	dc07      	bgt.n	80013e8 <__aeabi_f2iz+0x34>
 80013d8:	2096      	movs	r0, #150	@ 0x96
 80013da:	1a82      	subs	r2, r0, r2
 80013dc:	40d1      	lsrs	r1, r2
 80013de:	4248      	negs	r0, r1
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1f3      	bne.n	80013cc <__aeabi_f2iz+0x18>
 80013e4:	0008      	movs	r0, r1
 80013e6:	e7f1      	b.n	80013cc <__aeabi_f2iz+0x18>
 80013e8:	3a96      	subs	r2, #150	@ 0x96
 80013ea:	4091      	lsls	r1, r2
 80013ec:	e7f7      	b.n	80013de <__aeabi_f2iz+0x2a>
 80013ee:	46c0      	nop			@ (mov r8, r8)
 80013f0:	7fffffff 	.word	0x7fffffff

080013f4 <__aeabi_i2f>:
 80013f4:	b570      	push	{r4, r5, r6, lr}
 80013f6:	2800      	cmp	r0, #0
 80013f8:	d013      	beq.n	8001422 <__aeabi_i2f+0x2e>
 80013fa:	17c3      	asrs	r3, r0, #31
 80013fc:	18c5      	adds	r5, r0, r3
 80013fe:	405d      	eors	r5, r3
 8001400:	0fc4      	lsrs	r4, r0, #31
 8001402:	0028      	movs	r0, r5
 8001404:	f001 ff3c 	bl	8003280 <__clzsi2>
 8001408:	239e      	movs	r3, #158	@ 0x9e
 800140a:	0001      	movs	r1, r0
 800140c:	1a1b      	subs	r3, r3, r0
 800140e:	2b96      	cmp	r3, #150	@ 0x96
 8001410:	dc0f      	bgt.n	8001432 <__aeabi_i2f+0x3e>
 8001412:	2808      	cmp	r0, #8
 8001414:	d034      	beq.n	8001480 <__aeabi_i2f+0x8c>
 8001416:	3908      	subs	r1, #8
 8001418:	408d      	lsls	r5, r1
 800141a:	026d      	lsls	r5, r5, #9
 800141c:	0a6d      	lsrs	r5, r5, #9
 800141e:	b2d8      	uxtb	r0, r3
 8001420:	e002      	b.n	8001428 <__aeabi_i2f+0x34>
 8001422:	2400      	movs	r4, #0
 8001424:	2000      	movs	r0, #0
 8001426:	2500      	movs	r5, #0
 8001428:	05c0      	lsls	r0, r0, #23
 800142a:	4328      	orrs	r0, r5
 800142c:	07e4      	lsls	r4, r4, #31
 800142e:	4320      	orrs	r0, r4
 8001430:	bd70      	pop	{r4, r5, r6, pc}
 8001432:	2b99      	cmp	r3, #153	@ 0x99
 8001434:	dc16      	bgt.n	8001464 <__aeabi_i2f+0x70>
 8001436:	1f42      	subs	r2, r0, #5
 8001438:	2805      	cmp	r0, #5
 800143a:	d000      	beq.n	800143e <__aeabi_i2f+0x4a>
 800143c:	4095      	lsls	r5, r2
 800143e:	002a      	movs	r2, r5
 8001440:	4811      	ldr	r0, [pc, #68]	@ (8001488 <__aeabi_i2f+0x94>)
 8001442:	4002      	ands	r2, r0
 8001444:	076e      	lsls	r6, r5, #29
 8001446:	d009      	beq.n	800145c <__aeabi_i2f+0x68>
 8001448:	260f      	movs	r6, #15
 800144a:	4035      	ands	r5, r6
 800144c:	2d04      	cmp	r5, #4
 800144e:	d005      	beq.n	800145c <__aeabi_i2f+0x68>
 8001450:	3204      	adds	r2, #4
 8001452:	0155      	lsls	r5, r2, #5
 8001454:	d502      	bpl.n	800145c <__aeabi_i2f+0x68>
 8001456:	239f      	movs	r3, #159	@ 0x9f
 8001458:	4002      	ands	r2, r0
 800145a:	1a5b      	subs	r3, r3, r1
 800145c:	0192      	lsls	r2, r2, #6
 800145e:	0a55      	lsrs	r5, r2, #9
 8001460:	b2d8      	uxtb	r0, r3
 8001462:	e7e1      	b.n	8001428 <__aeabi_i2f+0x34>
 8001464:	2205      	movs	r2, #5
 8001466:	1a12      	subs	r2, r2, r0
 8001468:	0028      	movs	r0, r5
 800146a:	40d0      	lsrs	r0, r2
 800146c:	0002      	movs	r2, r0
 800146e:	0008      	movs	r0, r1
 8001470:	301b      	adds	r0, #27
 8001472:	4085      	lsls	r5, r0
 8001474:	0028      	movs	r0, r5
 8001476:	1e45      	subs	r5, r0, #1
 8001478:	41a8      	sbcs	r0, r5
 800147a:	4302      	orrs	r2, r0
 800147c:	0015      	movs	r5, r2
 800147e:	e7de      	b.n	800143e <__aeabi_i2f+0x4a>
 8001480:	026d      	lsls	r5, r5, #9
 8001482:	2096      	movs	r0, #150	@ 0x96
 8001484:	0a6d      	lsrs	r5, r5, #9
 8001486:	e7cf      	b.n	8001428 <__aeabi_i2f+0x34>
 8001488:	fbffffff 	.word	0xfbffffff

0800148c <__aeabi_dadd>:
 800148c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148e:	4657      	mov	r7, sl
 8001490:	464e      	mov	r6, r9
 8001492:	4645      	mov	r5, r8
 8001494:	46de      	mov	lr, fp
 8001496:	b5e0      	push	{r5, r6, r7, lr}
 8001498:	b083      	sub	sp, #12
 800149a:	9000      	str	r0, [sp, #0]
 800149c:	9101      	str	r1, [sp, #4]
 800149e:	030c      	lsls	r4, r1, #12
 80014a0:	004f      	lsls	r7, r1, #1
 80014a2:	0fce      	lsrs	r6, r1, #31
 80014a4:	0a61      	lsrs	r1, r4, #9
 80014a6:	9c00      	ldr	r4, [sp, #0]
 80014a8:	031d      	lsls	r5, r3, #12
 80014aa:	0f64      	lsrs	r4, r4, #29
 80014ac:	430c      	orrs	r4, r1
 80014ae:	9900      	ldr	r1, [sp, #0]
 80014b0:	9200      	str	r2, [sp, #0]
 80014b2:	9301      	str	r3, [sp, #4]
 80014b4:	00c8      	lsls	r0, r1, #3
 80014b6:	0059      	lsls	r1, r3, #1
 80014b8:	0d4b      	lsrs	r3, r1, #21
 80014ba:	4699      	mov	r9, r3
 80014bc:	9a00      	ldr	r2, [sp, #0]
 80014be:	9b01      	ldr	r3, [sp, #4]
 80014c0:	0a6d      	lsrs	r5, r5, #9
 80014c2:	0fd9      	lsrs	r1, r3, #31
 80014c4:	0f53      	lsrs	r3, r2, #29
 80014c6:	432b      	orrs	r3, r5
 80014c8:	469a      	mov	sl, r3
 80014ca:	9b00      	ldr	r3, [sp, #0]
 80014cc:	0d7f      	lsrs	r7, r7, #21
 80014ce:	00da      	lsls	r2, r3, #3
 80014d0:	4694      	mov	ip, r2
 80014d2:	464a      	mov	r2, r9
 80014d4:	46b0      	mov	r8, r6
 80014d6:	1aba      	subs	r2, r7, r2
 80014d8:	428e      	cmp	r6, r1
 80014da:	d100      	bne.n	80014de <__aeabi_dadd+0x52>
 80014dc:	e0b0      	b.n	8001640 <__aeabi_dadd+0x1b4>
 80014de:	2a00      	cmp	r2, #0
 80014e0:	dc00      	bgt.n	80014e4 <__aeabi_dadd+0x58>
 80014e2:	e078      	b.n	80015d6 <__aeabi_dadd+0x14a>
 80014e4:	4649      	mov	r1, r9
 80014e6:	2900      	cmp	r1, #0
 80014e8:	d100      	bne.n	80014ec <__aeabi_dadd+0x60>
 80014ea:	e0e9      	b.n	80016c0 <__aeabi_dadd+0x234>
 80014ec:	49c9      	ldr	r1, [pc, #804]	@ (8001814 <__aeabi_dadd+0x388>)
 80014ee:	428f      	cmp	r7, r1
 80014f0:	d100      	bne.n	80014f4 <__aeabi_dadd+0x68>
 80014f2:	e195      	b.n	8001820 <__aeabi_dadd+0x394>
 80014f4:	2501      	movs	r5, #1
 80014f6:	2a38      	cmp	r2, #56	@ 0x38
 80014f8:	dc16      	bgt.n	8001528 <__aeabi_dadd+0x9c>
 80014fa:	2180      	movs	r1, #128	@ 0x80
 80014fc:	4653      	mov	r3, sl
 80014fe:	0409      	lsls	r1, r1, #16
 8001500:	430b      	orrs	r3, r1
 8001502:	469a      	mov	sl, r3
 8001504:	2a1f      	cmp	r2, #31
 8001506:	dd00      	ble.n	800150a <__aeabi_dadd+0x7e>
 8001508:	e1e7      	b.n	80018da <__aeabi_dadd+0x44e>
 800150a:	2120      	movs	r1, #32
 800150c:	4655      	mov	r5, sl
 800150e:	1a8b      	subs	r3, r1, r2
 8001510:	4661      	mov	r1, ip
 8001512:	409d      	lsls	r5, r3
 8001514:	40d1      	lsrs	r1, r2
 8001516:	430d      	orrs	r5, r1
 8001518:	4661      	mov	r1, ip
 800151a:	4099      	lsls	r1, r3
 800151c:	1e4b      	subs	r3, r1, #1
 800151e:	4199      	sbcs	r1, r3
 8001520:	4653      	mov	r3, sl
 8001522:	40d3      	lsrs	r3, r2
 8001524:	430d      	orrs	r5, r1
 8001526:	1ae4      	subs	r4, r4, r3
 8001528:	1b45      	subs	r5, r0, r5
 800152a:	42a8      	cmp	r0, r5
 800152c:	4180      	sbcs	r0, r0
 800152e:	4240      	negs	r0, r0
 8001530:	1a24      	subs	r4, r4, r0
 8001532:	0223      	lsls	r3, r4, #8
 8001534:	d400      	bmi.n	8001538 <__aeabi_dadd+0xac>
 8001536:	e10f      	b.n	8001758 <__aeabi_dadd+0x2cc>
 8001538:	0264      	lsls	r4, r4, #9
 800153a:	0a64      	lsrs	r4, r4, #9
 800153c:	2c00      	cmp	r4, #0
 800153e:	d100      	bne.n	8001542 <__aeabi_dadd+0xb6>
 8001540:	e139      	b.n	80017b6 <__aeabi_dadd+0x32a>
 8001542:	0020      	movs	r0, r4
 8001544:	f001 fe9c 	bl	8003280 <__clzsi2>
 8001548:	0003      	movs	r3, r0
 800154a:	3b08      	subs	r3, #8
 800154c:	2120      	movs	r1, #32
 800154e:	0028      	movs	r0, r5
 8001550:	1aca      	subs	r2, r1, r3
 8001552:	40d0      	lsrs	r0, r2
 8001554:	409c      	lsls	r4, r3
 8001556:	0002      	movs	r2, r0
 8001558:	409d      	lsls	r5, r3
 800155a:	4322      	orrs	r2, r4
 800155c:	429f      	cmp	r7, r3
 800155e:	dd00      	ble.n	8001562 <__aeabi_dadd+0xd6>
 8001560:	e173      	b.n	800184a <__aeabi_dadd+0x3be>
 8001562:	1bd8      	subs	r0, r3, r7
 8001564:	3001      	adds	r0, #1
 8001566:	1a09      	subs	r1, r1, r0
 8001568:	002c      	movs	r4, r5
 800156a:	408d      	lsls	r5, r1
 800156c:	40c4      	lsrs	r4, r0
 800156e:	1e6b      	subs	r3, r5, #1
 8001570:	419d      	sbcs	r5, r3
 8001572:	0013      	movs	r3, r2
 8001574:	40c2      	lsrs	r2, r0
 8001576:	408b      	lsls	r3, r1
 8001578:	4325      	orrs	r5, r4
 800157a:	2700      	movs	r7, #0
 800157c:	0014      	movs	r4, r2
 800157e:	431d      	orrs	r5, r3
 8001580:	076b      	lsls	r3, r5, #29
 8001582:	d009      	beq.n	8001598 <__aeabi_dadd+0x10c>
 8001584:	230f      	movs	r3, #15
 8001586:	402b      	ands	r3, r5
 8001588:	2b04      	cmp	r3, #4
 800158a:	d005      	beq.n	8001598 <__aeabi_dadd+0x10c>
 800158c:	1d2b      	adds	r3, r5, #4
 800158e:	42ab      	cmp	r3, r5
 8001590:	41ad      	sbcs	r5, r5
 8001592:	426d      	negs	r5, r5
 8001594:	1964      	adds	r4, r4, r5
 8001596:	001d      	movs	r5, r3
 8001598:	0223      	lsls	r3, r4, #8
 800159a:	d400      	bmi.n	800159e <__aeabi_dadd+0x112>
 800159c:	e12d      	b.n	80017fa <__aeabi_dadd+0x36e>
 800159e:	4a9d      	ldr	r2, [pc, #628]	@ (8001814 <__aeabi_dadd+0x388>)
 80015a0:	3701      	adds	r7, #1
 80015a2:	4297      	cmp	r7, r2
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dadd+0x11c>
 80015a6:	e0d3      	b.n	8001750 <__aeabi_dadd+0x2c4>
 80015a8:	4646      	mov	r6, r8
 80015aa:	499b      	ldr	r1, [pc, #620]	@ (8001818 <__aeabi_dadd+0x38c>)
 80015ac:	08ed      	lsrs	r5, r5, #3
 80015ae:	4021      	ands	r1, r4
 80015b0:	074a      	lsls	r2, r1, #29
 80015b2:	432a      	orrs	r2, r5
 80015b4:	057c      	lsls	r4, r7, #21
 80015b6:	024d      	lsls	r5, r1, #9
 80015b8:	0b2d      	lsrs	r5, r5, #12
 80015ba:	0d64      	lsrs	r4, r4, #21
 80015bc:	0524      	lsls	r4, r4, #20
 80015be:	432c      	orrs	r4, r5
 80015c0:	07f6      	lsls	r6, r6, #31
 80015c2:	4334      	orrs	r4, r6
 80015c4:	0010      	movs	r0, r2
 80015c6:	0021      	movs	r1, r4
 80015c8:	b003      	add	sp, #12
 80015ca:	bcf0      	pop	{r4, r5, r6, r7}
 80015cc:	46bb      	mov	fp, r7
 80015ce:	46b2      	mov	sl, r6
 80015d0:	46a9      	mov	r9, r5
 80015d2:	46a0      	mov	r8, r4
 80015d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015d6:	2a00      	cmp	r2, #0
 80015d8:	d100      	bne.n	80015dc <__aeabi_dadd+0x150>
 80015da:	e084      	b.n	80016e6 <__aeabi_dadd+0x25a>
 80015dc:	464a      	mov	r2, r9
 80015de:	1bd2      	subs	r2, r2, r7
 80015e0:	2f00      	cmp	r7, #0
 80015e2:	d000      	beq.n	80015e6 <__aeabi_dadd+0x15a>
 80015e4:	e16d      	b.n	80018c2 <__aeabi_dadd+0x436>
 80015e6:	0025      	movs	r5, r4
 80015e8:	4305      	orrs	r5, r0
 80015ea:	d100      	bne.n	80015ee <__aeabi_dadd+0x162>
 80015ec:	e127      	b.n	800183e <__aeabi_dadd+0x3b2>
 80015ee:	1e56      	subs	r6, r2, #1
 80015f0:	2a01      	cmp	r2, #1
 80015f2:	d100      	bne.n	80015f6 <__aeabi_dadd+0x16a>
 80015f4:	e23b      	b.n	8001a6e <__aeabi_dadd+0x5e2>
 80015f6:	4d87      	ldr	r5, [pc, #540]	@ (8001814 <__aeabi_dadd+0x388>)
 80015f8:	42aa      	cmp	r2, r5
 80015fa:	d100      	bne.n	80015fe <__aeabi_dadd+0x172>
 80015fc:	e26a      	b.n	8001ad4 <__aeabi_dadd+0x648>
 80015fe:	2501      	movs	r5, #1
 8001600:	2e38      	cmp	r6, #56	@ 0x38
 8001602:	dc12      	bgt.n	800162a <__aeabi_dadd+0x19e>
 8001604:	0032      	movs	r2, r6
 8001606:	2a1f      	cmp	r2, #31
 8001608:	dd00      	ble.n	800160c <__aeabi_dadd+0x180>
 800160a:	e1f8      	b.n	80019fe <__aeabi_dadd+0x572>
 800160c:	2620      	movs	r6, #32
 800160e:	0025      	movs	r5, r4
 8001610:	1ab6      	subs	r6, r6, r2
 8001612:	0007      	movs	r7, r0
 8001614:	4653      	mov	r3, sl
 8001616:	40b0      	lsls	r0, r6
 8001618:	40d4      	lsrs	r4, r2
 800161a:	40b5      	lsls	r5, r6
 800161c:	40d7      	lsrs	r7, r2
 800161e:	1e46      	subs	r6, r0, #1
 8001620:	41b0      	sbcs	r0, r6
 8001622:	1b1b      	subs	r3, r3, r4
 8001624:	469a      	mov	sl, r3
 8001626:	433d      	orrs	r5, r7
 8001628:	4305      	orrs	r5, r0
 800162a:	4662      	mov	r2, ip
 800162c:	1b55      	subs	r5, r2, r5
 800162e:	45ac      	cmp	ip, r5
 8001630:	4192      	sbcs	r2, r2
 8001632:	4653      	mov	r3, sl
 8001634:	4252      	negs	r2, r2
 8001636:	000e      	movs	r6, r1
 8001638:	464f      	mov	r7, r9
 800163a:	4688      	mov	r8, r1
 800163c:	1a9c      	subs	r4, r3, r2
 800163e:	e778      	b.n	8001532 <__aeabi_dadd+0xa6>
 8001640:	2a00      	cmp	r2, #0
 8001642:	dc00      	bgt.n	8001646 <__aeabi_dadd+0x1ba>
 8001644:	e08e      	b.n	8001764 <__aeabi_dadd+0x2d8>
 8001646:	4649      	mov	r1, r9
 8001648:	2900      	cmp	r1, #0
 800164a:	d175      	bne.n	8001738 <__aeabi_dadd+0x2ac>
 800164c:	4661      	mov	r1, ip
 800164e:	4653      	mov	r3, sl
 8001650:	4319      	orrs	r1, r3
 8001652:	d100      	bne.n	8001656 <__aeabi_dadd+0x1ca>
 8001654:	e0f6      	b.n	8001844 <__aeabi_dadd+0x3b8>
 8001656:	1e51      	subs	r1, r2, #1
 8001658:	2a01      	cmp	r2, #1
 800165a:	d100      	bne.n	800165e <__aeabi_dadd+0x1d2>
 800165c:	e191      	b.n	8001982 <__aeabi_dadd+0x4f6>
 800165e:	4d6d      	ldr	r5, [pc, #436]	@ (8001814 <__aeabi_dadd+0x388>)
 8001660:	42aa      	cmp	r2, r5
 8001662:	d100      	bne.n	8001666 <__aeabi_dadd+0x1da>
 8001664:	e0dc      	b.n	8001820 <__aeabi_dadd+0x394>
 8001666:	2501      	movs	r5, #1
 8001668:	2938      	cmp	r1, #56	@ 0x38
 800166a:	dc14      	bgt.n	8001696 <__aeabi_dadd+0x20a>
 800166c:	000a      	movs	r2, r1
 800166e:	2a1f      	cmp	r2, #31
 8001670:	dd00      	ble.n	8001674 <__aeabi_dadd+0x1e8>
 8001672:	e1a2      	b.n	80019ba <__aeabi_dadd+0x52e>
 8001674:	2120      	movs	r1, #32
 8001676:	4653      	mov	r3, sl
 8001678:	1a89      	subs	r1, r1, r2
 800167a:	408b      	lsls	r3, r1
 800167c:	001d      	movs	r5, r3
 800167e:	4663      	mov	r3, ip
 8001680:	40d3      	lsrs	r3, r2
 8001682:	431d      	orrs	r5, r3
 8001684:	4663      	mov	r3, ip
 8001686:	408b      	lsls	r3, r1
 8001688:	0019      	movs	r1, r3
 800168a:	1e4b      	subs	r3, r1, #1
 800168c:	4199      	sbcs	r1, r3
 800168e:	4653      	mov	r3, sl
 8001690:	40d3      	lsrs	r3, r2
 8001692:	430d      	orrs	r5, r1
 8001694:	18e4      	adds	r4, r4, r3
 8001696:	182d      	adds	r5, r5, r0
 8001698:	4285      	cmp	r5, r0
 800169a:	4180      	sbcs	r0, r0
 800169c:	4240      	negs	r0, r0
 800169e:	1824      	adds	r4, r4, r0
 80016a0:	0223      	lsls	r3, r4, #8
 80016a2:	d559      	bpl.n	8001758 <__aeabi_dadd+0x2cc>
 80016a4:	4b5b      	ldr	r3, [pc, #364]	@ (8001814 <__aeabi_dadd+0x388>)
 80016a6:	3701      	adds	r7, #1
 80016a8:	429f      	cmp	r7, r3
 80016aa:	d051      	beq.n	8001750 <__aeabi_dadd+0x2c4>
 80016ac:	2101      	movs	r1, #1
 80016ae:	4b5a      	ldr	r3, [pc, #360]	@ (8001818 <__aeabi_dadd+0x38c>)
 80016b0:	086a      	lsrs	r2, r5, #1
 80016b2:	401c      	ands	r4, r3
 80016b4:	4029      	ands	r1, r5
 80016b6:	430a      	orrs	r2, r1
 80016b8:	07e5      	lsls	r5, r4, #31
 80016ba:	4315      	orrs	r5, r2
 80016bc:	0864      	lsrs	r4, r4, #1
 80016be:	e75f      	b.n	8001580 <__aeabi_dadd+0xf4>
 80016c0:	4661      	mov	r1, ip
 80016c2:	4653      	mov	r3, sl
 80016c4:	4319      	orrs	r1, r3
 80016c6:	d100      	bne.n	80016ca <__aeabi_dadd+0x23e>
 80016c8:	e0bc      	b.n	8001844 <__aeabi_dadd+0x3b8>
 80016ca:	1e51      	subs	r1, r2, #1
 80016cc:	2a01      	cmp	r2, #1
 80016ce:	d100      	bne.n	80016d2 <__aeabi_dadd+0x246>
 80016d0:	e164      	b.n	800199c <__aeabi_dadd+0x510>
 80016d2:	4d50      	ldr	r5, [pc, #320]	@ (8001814 <__aeabi_dadd+0x388>)
 80016d4:	42aa      	cmp	r2, r5
 80016d6:	d100      	bne.n	80016da <__aeabi_dadd+0x24e>
 80016d8:	e16a      	b.n	80019b0 <__aeabi_dadd+0x524>
 80016da:	2501      	movs	r5, #1
 80016dc:	2938      	cmp	r1, #56	@ 0x38
 80016de:	dd00      	ble.n	80016e2 <__aeabi_dadd+0x256>
 80016e0:	e722      	b.n	8001528 <__aeabi_dadd+0x9c>
 80016e2:	000a      	movs	r2, r1
 80016e4:	e70e      	b.n	8001504 <__aeabi_dadd+0x78>
 80016e6:	4a4d      	ldr	r2, [pc, #308]	@ (800181c <__aeabi_dadd+0x390>)
 80016e8:	1c7d      	adds	r5, r7, #1
 80016ea:	4215      	tst	r5, r2
 80016ec:	d000      	beq.n	80016f0 <__aeabi_dadd+0x264>
 80016ee:	e0d0      	b.n	8001892 <__aeabi_dadd+0x406>
 80016f0:	0025      	movs	r5, r4
 80016f2:	4662      	mov	r2, ip
 80016f4:	4653      	mov	r3, sl
 80016f6:	4305      	orrs	r5, r0
 80016f8:	431a      	orrs	r2, r3
 80016fa:	2f00      	cmp	r7, #0
 80016fc:	d000      	beq.n	8001700 <__aeabi_dadd+0x274>
 80016fe:	e137      	b.n	8001970 <__aeabi_dadd+0x4e4>
 8001700:	2d00      	cmp	r5, #0
 8001702:	d100      	bne.n	8001706 <__aeabi_dadd+0x27a>
 8001704:	e1a8      	b.n	8001a58 <__aeabi_dadd+0x5cc>
 8001706:	2a00      	cmp	r2, #0
 8001708:	d100      	bne.n	800170c <__aeabi_dadd+0x280>
 800170a:	e16a      	b.n	80019e2 <__aeabi_dadd+0x556>
 800170c:	4663      	mov	r3, ip
 800170e:	1ac5      	subs	r5, r0, r3
 8001710:	4653      	mov	r3, sl
 8001712:	1ae2      	subs	r2, r4, r3
 8001714:	42a8      	cmp	r0, r5
 8001716:	419b      	sbcs	r3, r3
 8001718:	425b      	negs	r3, r3
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	021a      	lsls	r2, r3, #8
 800171e:	d400      	bmi.n	8001722 <__aeabi_dadd+0x296>
 8001720:	e203      	b.n	8001b2a <__aeabi_dadd+0x69e>
 8001722:	4663      	mov	r3, ip
 8001724:	1a1d      	subs	r5, r3, r0
 8001726:	45ac      	cmp	ip, r5
 8001728:	4192      	sbcs	r2, r2
 800172a:	4653      	mov	r3, sl
 800172c:	4252      	negs	r2, r2
 800172e:	1b1c      	subs	r4, r3, r4
 8001730:	000e      	movs	r6, r1
 8001732:	4688      	mov	r8, r1
 8001734:	1aa4      	subs	r4, r4, r2
 8001736:	e723      	b.n	8001580 <__aeabi_dadd+0xf4>
 8001738:	4936      	ldr	r1, [pc, #216]	@ (8001814 <__aeabi_dadd+0x388>)
 800173a:	428f      	cmp	r7, r1
 800173c:	d070      	beq.n	8001820 <__aeabi_dadd+0x394>
 800173e:	2501      	movs	r5, #1
 8001740:	2a38      	cmp	r2, #56	@ 0x38
 8001742:	dca8      	bgt.n	8001696 <__aeabi_dadd+0x20a>
 8001744:	2180      	movs	r1, #128	@ 0x80
 8001746:	4653      	mov	r3, sl
 8001748:	0409      	lsls	r1, r1, #16
 800174a:	430b      	orrs	r3, r1
 800174c:	469a      	mov	sl, r3
 800174e:	e78e      	b.n	800166e <__aeabi_dadd+0x1e2>
 8001750:	003c      	movs	r4, r7
 8001752:	2500      	movs	r5, #0
 8001754:	2200      	movs	r2, #0
 8001756:	e731      	b.n	80015bc <__aeabi_dadd+0x130>
 8001758:	2307      	movs	r3, #7
 800175a:	402b      	ands	r3, r5
 800175c:	2b00      	cmp	r3, #0
 800175e:	d000      	beq.n	8001762 <__aeabi_dadd+0x2d6>
 8001760:	e710      	b.n	8001584 <__aeabi_dadd+0xf8>
 8001762:	e093      	b.n	800188c <__aeabi_dadd+0x400>
 8001764:	2a00      	cmp	r2, #0
 8001766:	d074      	beq.n	8001852 <__aeabi_dadd+0x3c6>
 8001768:	464a      	mov	r2, r9
 800176a:	1bd2      	subs	r2, r2, r7
 800176c:	2f00      	cmp	r7, #0
 800176e:	d100      	bne.n	8001772 <__aeabi_dadd+0x2e6>
 8001770:	e0c7      	b.n	8001902 <__aeabi_dadd+0x476>
 8001772:	4928      	ldr	r1, [pc, #160]	@ (8001814 <__aeabi_dadd+0x388>)
 8001774:	4589      	cmp	r9, r1
 8001776:	d100      	bne.n	800177a <__aeabi_dadd+0x2ee>
 8001778:	e185      	b.n	8001a86 <__aeabi_dadd+0x5fa>
 800177a:	2501      	movs	r5, #1
 800177c:	2a38      	cmp	r2, #56	@ 0x38
 800177e:	dc12      	bgt.n	80017a6 <__aeabi_dadd+0x31a>
 8001780:	2180      	movs	r1, #128	@ 0x80
 8001782:	0409      	lsls	r1, r1, #16
 8001784:	430c      	orrs	r4, r1
 8001786:	2a1f      	cmp	r2, #31
 8001788:	dd00      	ble.n	800178c <__aeabi_dadd+0x300>
 800178a:	e1ab      	b.n	8001ae4 <__aeabi_dadd+0x658>
 800178c:	2120      	movs	r1, #32
 800178e:	0025      	movs	r5, r4
 8001790:	1a89      	subs	r1, r1, r2
 8001792:	0007      	movs	r7, r0
 8001794:	4088      	lsls	r0, r1
 8001796:	408d      	lsls	r5, r1
 8001798:	40d7      	lsrs	r7, r2
 800179a:	1e41      	subs	r1, r0, #1
 800179c:	4188      	sbcs	r0, r1
 800179e:	40d4      	lsrs	r4, r2
 80017a0:	433d      	orrs	r5, r7
 80017a2:	4305      	orrs	r5, r0
 80017a4:	44a2      	add	sl, r4
 80017a6:	4465      	add	r5, ip
 80017a8:	4565      	cmp	r5, ip
 80017aa:	4192      	sbcs	r2, r2
 80017ac:	4252      	negs	r2, r2
 80017ae:	4452      	add	r2, sl
 80017b0:	0014      	movs	r4, r2
 80017b2:	464f      	mov	r7, r9
 80017b4:	e774      	b.n	80016a0 <__aeabi_dadd+0x214>
 80017b6:	0028      	movs	r0, r5
 80017b8:	f001 fd62 	bl	8003280 <__clzsi2>
 80017bc:	0003      	movs	r3, r0
 80017be:	3318      	adds	r3, #24
 80017c0:	2b1f      	cmp	r3, #31
 80017c2:	dc00      	bgt.n	80017c6 <__aeabi_dadd+0x33a>
 80017c4:	e6c2      	b.n	800154c <__aeabi_dadd+0xc0>
 80017c6:	002a      	movs	r2, r5
 80017c8:	3808      	subs	r0, #8
 80017ca:	4082      	lsls	r2, r0
 80017cc:	429f      	cmp	r7, r3
 80017ce:	dd00      	ble.n	80017d2 <__aeabi_dadd+0x346>
 80017d0:	e0a9      	b.n	8001926 <__aeabi_dadd+0x49a>
 80017d2:	1bdb      	subs	r3, r3, r7
 80017d4:	1c58      	adds	r0, r3, #1
 80017d6:	281f      	cmp	r0, #31
 80017d8:	dc00      	bgt.n	80017dc <__aeabi_dadd+0x350>
 80017da:	e1ac      	b.n	8001b36 <__aeabi_dadd+0x6aa>
 80017dc:	0015      	movs	r5, r2
 80017de:	3b1f      	subs	r3, #31
 80017e0:	40dd      	lsrs	r5, r3
 80017e2:	2820      	cmp	r0, #32
 80017e4:	d005      	beq.n	80017f2 <__aeabi_dadd+0x366>
 80017e6:	2340      	movs	r3, #64	@ 0x40
 80017e8:	1a1b      	subs	r3, r3, r0
 80017ea:	409a      	lsls	r2, r3
 80017ec:	1e53      	subs	r3, r2, #1
 80017ee:	419a      	sbcs	r2, r3
 80017f0:	4315      	orrs	r5, r2
 80017f2:	2307      	movs	r3, #7
 80017f4:	2700      	movs	r7, #0
 80017f6:	402b      	ands	r3, r5
 80017f8:	e7b0      	b.n	800175c <__aeabi_dadd+0x2d0>
 80017fa:	08ed      	lsrs	r5, r5, #3
 80017fc:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <__aeabi_dadd+0x388>)
 80017fe:	0762      	lsls	r2, r4, #29
 8001800:	432a      	orrs	r2, r5
 8001802:	08e4      	lsrs	r4, r4, #3
 8001804:	429f      	cmp	r7, r3
 8001806:	d00f      	beq.n	8001828 <__aeabi_dadd+0x39c>
 8001808:	0324      	lsls	r4, r4, #12
 800180a:	0b25      	lsrs	r5, r4, #12
 800180c:	057c      	lsls	r4, r7, #21
 800180e:	0d64      	lsrs	r4, r4, #21
 8001810:	e6d4      	b.n	80015bc <__aeabi_dadd+0x130>
 8001812:	46c0      	nop			@ (mov r8, r8)
 8001814:	000007ff 	.word	0x000007ff
 8001818:	ff7fffff 	.word	0xff7fffff
 800181c:	000007fe 	.word	0x000007fe
 8001820:	08c0      	lsrs	r0, r0, #3
 8001822:	0762      	lsls	r2, r4, #29
 8001824:	4302      	orrs	r2, r0
 8001826:	08e4      	lsrs	r4, r4, #3
 8001828:	0013      	movs	r3, r2
 800182a:	4323      	orrs	r3, r4
 800182c:	d100      	bne.n	8001830 <__aeabi_dadd+0x3a4>
 800182e:	e186      	b.n	8001b3e <__aeabi_dadd+0x6b2>
 8001830:	2580      	movs	r5, #128	@ 0x80
 8001832:	032d      	lsls	r5, r5, #12
 8001834:	4325      	orrs	r5, r4
 8001836:	032d      	lsls	r5, r5, #12
 8001838:	4cc3      	ldr	r4, [pc, #780]	@ (8001b48 <__aeabi_dadd+0x6bc>)
 800183a:	0b2d      	lsrs	r5, r5, #12
 800183c:	e6be      	b.n	80015bc <__aeabi_dadd+0x130>
 800183e:	4660      	mov	r0, ip
 8001840:	4654      	mov	r4, sl
 8001842:	000e      	movs	r6, r1
 8001844:	0017      	movs	r7, r2
 8001846:	08c5      	lsrs	r5, r0, #3
 8001848:	e7d8      	b.n	80017fc <__aeabi_dadd+0x370>
 800184a:	4cc0      	ldr	r4, [pc, #768]	@ (8001b4c <__aeabi_dadd+0x6c0>)
 800184c:	1aff      	subs	r7, r7, r3
 800184e:	4014      	ands	r4, r2
 8001850:	e696      	b.n	8001580 <__aeabi_dadd+0xf4>
 8001852:	4abf      	ldr	r2, [pc, #764]	@ (8001b50 <__aeabi_dadd+0x6c4>)
 8001854:	1c79      	adds	r1, r7, #1
 8001856:	4211      	tst	r1, r2
 8001858:	d16b      	bne.n	8001932 <__aeabi_dadd+0x4a6>
 800185a:	0022      	movs	r2, r4
 800185c:	4302      	orrs	r2, r0
 800185e:	2f00      	cmp	r7, #0
 8001860:	d000      	beq.n	8001864 <__aeabi_dadd+0x3d8>
 8001862:	e0db      	b.n	8001a1c <__aeabi_dadd+0x590>
 8001864:	2a00      	cmp	r2, #0
 8001866:	d100      	bne.n	800186a <__aeabi_dadd+0x3de>
 8001868:	e12d      	b.n	8001ac6 <__aeabi_dadd+0x63a>
 800186a:	4662      	mov	r2, ip
 800186c:	4653      	mov	r3, sl
 800186e:	431a      	orrs	r2, r3
 8001870:	d100      	bne.n	8001874 <__aeabi_dadd+0x3e8>
 8001872:	e0b6      	b.n	80019e2 <__aeabi_dadd+0x556>
 8001874:	4663      	mov	r3, ip
 8001876:	18c5      	adds	r5, r0, r3
 8001878:	4285      	cmp	r5, r0
 800187a:	4180      	sbcs	r0, r0
 800187c:	4454      	add	r4, sl
 800187e:	4240      	negs	r0, r0
 8001880:	1824      	adds	r4, r4, r0
 8001882:	0223      	lsls	r3, r4, #8
 8001884:	d502      	bpl.n	800188c <__aeabi_dadd+0x400>
 8001886:	000f      	movs	r7, r1
 8001888:	4bb0      	ldr	r3, [pc, #704]	@ (8001b4c <__aeabi_dadd+0x6c0>)
 800188a:	401c      	ands	r4, r3
 800188c:	003a      	movs	r2, r7
 800188e:	0028      	movs	r0, r5
 8001890:	e7d8      	b.n	8001844 <__aeabi_dadd+0x3b8>
 8001892:	4662      	mov	r2, ip
 8001894:	1a85      	subs	r5, r0, r2
 8001896:	42a8      	cmp	r0, r5
 8001898:	4192      	sbcs	r2, r2
 800189a:	4653      	mov	r3, sl
 800189c:	4252      	negs	r2, r2
 800189e:	4691      	mov	r9, r2
 80018a0:	1ae3      	subs	r3, r4, r3
 80018a2:	001a      	movs	r2, r3
 80018a4:	464b      	mov	r3, r9
 80018a6:	1ad2      	subs	r2, r2, r3
 80018a8:	0013      	movs	r3, r2
 80018aa:	4691      	mov	r9, r2
 80018ac:	021a      	lsls	r2, r3, #8
 80018ae:	d454      	bmi.n	800195a <__aeabi_dadd+0x4ce>
 80018b0:	464a      	mov	r2, r9
 80018b2:	464c      	mov	r4, r9
 80018b4:	432a      	orrs	r2, r5
 80018b6:	d000      	beq.n	80018ba <__aeabi_dadd+0x42e>
 80018b8:	e640      	b.n	800153c <__aeabi_dadd+0xb0>
 80018ba:	2600      	movs	r6, #0
 80018bc:	2400      	movs	r4, #0
 80018be:	2500      	movs	r5, #0
 80018c0:	e67c      	b.n	80015bc <__aeabi_dadd+0x130>
 80018c2:	4da1      	ldr	r5, [pc, #644]	@ (8001b48 <__aeabi_dadd+0x6bc>)
 80018c4:	45a9      	cmp	r9, r5
 80018c6:	d100      	bne.n	80018ca <__aeabi_dadd+0x43e>
 80018c8:	e090      	b.n	80019ec <__aeabi_dadd+0x560>
 80018ca:	2501      	movs	r5, #1
 80018cc:	2a38      	cmp	r2, #56	@ 0x38
 80018ce:	dd00      	ble.n	80018d2 <__aeabi_dadd+0x446>
 80018d0:	e6ab      	b.n	800162a <__aeabi_dadd+0x19e>
 80018d2:	2580      	movs	r5, #128	@ 0x80
 80018d4:	042d      	lsls	r5, r5, #16
 80018d6:	432c      	orrs	r4, r5
 80018d8:	e695      	b.n	8001606 <__aeabi_dadd+0x17a>
 80018da:	0011      	movs	r1, r2
 80018dc:	4655      	mov	r5, sl
 80018de:	3920      	subs	r1, #32
 80018e0:	40cd      	lsrs	r5, r1
 80018e2:	46a9      	mov	r9, r5
 80018e4:	2a20      	cmp	r2, #32
 80018e6:	d006      	beq.n	80018f6 <__aeabi_dadd+0x46a>
 80018e8:	2140      	movs	r1, #64	@ 0x40
 80018ea:	4653      	mov	r3, sl
 80018ec:	1a8a      	subs	r2, r1, r2
 80018ee:	4093      	lsls	r3, r2
 80018f0:	4662      	mov	r2, ip
 80018f2:	431a      	orrs	r2, r3
 80018f4:	4694      	mov	ip, r2
 80018f6:	4665      	mov	r5, ip
 80018f8:	1e6b      	subs	r3, r5, #1
 80018fa:	419d      	sbcs	r5, r3
 80018fc:	464b      	mov	r3, r9
 80018fe:	431d      	orrs	r5, r3
 8001900:	e612      	b.n	8001528 <__aeabi_dadd+0x9c>
 8001902:	0021      	movs	r1, r4
 8001904:	4301      	orrs	r1, r0
 8001906:	d100      	bne.n	800190a <__aeabi_dadd+0x47e>
 8001908:	e0c4      	b.n	8001a94 <__aeabi_dadd+0x608>
 800190a:	1e51      	subs	r1, r2, #1
 800190c:	2a01      	cmp	r2, #1
 800190e:	d100      	bne.n	8001912 <__aeabi_dadd+0x486>
 8001910:	e0fb      	b.n	8001b0a <__aeabi_dadd+0x67e>
 8001912:	4d8d      	ldr	r5, [pc, #564]	@ (8001b48 <__aeabi_dadd+0x6bc>)
 8001914:	42aa      	cmp	r2, r5
 8001916:	d100      	bne.n	800191a <__aeabi_dadd+0x48e>
 8001918:	e0b5      	b.n	8001a86 <__aeabi_dadd+0x5fa>
 800191a:	2501      	movs	r5, #1
 800191c:	2938      	cmp	r1, #56	@ 0x38
 800191e:	dd00      	ble.n	8001922 <__aeabi_dadd+0x496>
 8001920:	e741      	b.n	80017a6 <__aeabi_dadd+0x31a>
 8001922:	000a      	movs	r2, r1
 8001924:	e72f      	b.n	8001786 <__aeabi_dadd+0x2fa>
 8001926:	4c89      	ldr	r4, [pc, #548]	@ (8001b4c <__aeabi_dadd+0x6c0>)
 8001928:	1aff      	subs	r7, r7, r3
 800192a:	4014      	ands	r4, r2
 800192c:	0762      	lsls	r2, r4, #29
 800192e:	08e4      	lsrs	r4, r4, #3
 8001930:	e76a      	b.n	8001808 <__aeabi_dadd+0x37c>
 8001932:	4a85      	ldr	r2, [pc, #532]	@ (8001b48 <__aeabi_dadd+0x6bc>)
 8001934:	4291      	cmp	r1, r2
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x4ae>
 8001938:	e0e3      	b.n	8001b02 <__aeabi_dadd+0x676>
 800193a:	4663      	mov	r3, ip
 800193c:	18c2      	adds	r2, r0, r3
 800193e:	4282      	cmp	r2, r0
 8001940:	4180      	sbcs	r0, r0
 8001942:	0023      	movs	r3, r4
 8001944:	4240      	negs	r0, r0
 8001946:	4453      	add	r3, sl
 8001948:	181b      	adds	r3, r3, r0
 800194a:	07dd      	lsls	r5, r3, #31
 800194c:	085c      	lsrs	r4, r3, #1
 800194e:	2307      	movs	r3, #7
 8001950:	0852      	lsrs	r2, r2, #1
 8001952:	4315      	orrs	r5, r2
 8001954:	000f      	movs	r7, r1
 8001956:	402b      	ands	r3, r5
 8001958:	e700      	b.n	800175c <__aeabi_dadd+0x2d0>
 800195a:	4663      	mov	r3, ip
 800195c:	1a1d      	subs	r5, r3, r0
 800195e:	45ac      	cmp	ip, r5
 8001960:	4192      	sbcs	r2, r2
 8001962:	4653      	mov	r3, sl
 8001964:	4252      	negs	r2, r2
 8001966:	1b1c      	subs	r4, r3, r4
 8001968:	000e      	movs	r6, r1
 800196a:	4688      	mov	r8, r1
 800196c:	1aa4      	subs	r4, r4, r2
 800196e:	e5e5      	b.n	800153c <__aeabi_dadd+0xb0>
 8001970:	2d00      	cmp	r5, #0
 8001972:	d000      	beq.n	8001976 <__aeabi_dadd+0x4ea>
 8001974:	e091      	b.n	8001a9a <__aeabi_dadd+0x60e>
 8001976:	2a00      	cmp	r2, #0
 8001978:	d138      	bne.n	80019ec <__aeabi_dadd+0x560>
 800197a:	2480      	movs	r4, #128	@ 0x80
 800197c:	2600      	movs	r6, #0
 800197e:	0324      	lsls	r4, r4, #12
 8001980:	e756      	b.n	8001830 <__aeabi_dadd+0x3a4>
 8001982:	4663      	mov	r3, ip
 8001984:	18c5      	adds	r5, r0, r3
 8001986:	4285      	cmp	r5, r0
 8001988:	4180      	sbcs	r0, r0
 800198a:	4454      	add	r4, sl
 800198c:	4240      	negs	r0, r0
 800198e:	1824      	adds	r4, r4, r0
 8001990:	2701      	movs	r7, #1
 8001992:	0223      	lsls	r3, r4, #8
 8001994:	d400      	bmi.n	8001998 <__aeabi_dadd+0x50c>
 8001996:	e6df      	b.n	8001758 <__aeabi_dadd+0x2cc>
 8001998:	2702      	movs	r7, #2
 800199a:	e687      	b.n	80016ac <__aeabi_dadd+0x220>
 800199c:	4663      	mov	r3, ip
 800199e:	1ac5      	subs	r5, r0, r3
 80019a0:	42a8      	cmp	r0, r5
 80019a2:	4180      	sbcs	r0, r0
 80019a4:	4653      	mov	r3, sl
 80019a6:	4240      	negs	r0, r0
 80019a8:	1ae4      	subs	r4, r4, r3
 80019aa:	2701      	movs	r7, #1
 80019ac:	1a24      	subs	r4, r4, r0
 80019ae:	e5c0      	b.n	8001532 <__aeabi_dadd+0xa6>
 80019b0:	0762      	lsls	r2, r4, #29
 80019b2:	08c0      	lsrs	r0, r0, #3
 80019b4:	4302      	orrs	r2, r0
 80019b6:	08e4      	lsrs	r4, r4, #3
 80019b8:	e736      	b.n	8001828 <__aeabi_dadd+0x39c>
 80019ba:	0011      	movs	r1, r2
 80019bc:	4653      	mov	r3, sl
 80019be:	3920      	subs	r1, #32
 80019c0:	40cb      	lsrs	r3, r1
 80019c2:	4699      	mov	r9, r3
 80019c4:	2a20      	cmp	r2, #32
 80019c6:	d006      	beq.n	80019d6 <__aeabi_dadd+0x54a>
 80019c8:	2140      	movs	r1, #64	@ 0x40
 80019ca:	4653      	mov	r3, sl
 80019cc:	1a8a      	subs	r2, r1, r2
 80019ce:	4093      	lsls	r3, r2
 80019d0:	4662      	mov	r2, ip
 80019d2:	431a      	orrs	r2, r3
 80019d4:	4694      	mov	ip, r2
 80019d6:	4665      	mov	r5, ip
 80019d8:	1e6b      	subs	r3, r5, #1
 80019da:	419d      	sbcs	r5, r3
 80019dc:	464b      	mov	r3, r9
 80019de:	431d      	orrs	r5, r3
 80019e0:	e659      	b.n	8001696 <__aeabi_dadd+0x20a>
 80019e2:	0762      	lsls	r2, r4, #29
 80019e4:	08c0      	lsrs	r0, r0, #3
 80019e6:	4302      	orrs	r2, r0
 80019e8:	08e4      	lsrs	r4, r4, #3
 80019ea:	e70d      	b.n	8001808 <__aeabi_dadd+0x37c>
 80019ec:	4653      	mov	r3, sl
 80019ee:	075a      	lsls	r2, r3, #29
 80019f0:	4663      	mov	r3, ip
 80019f2:	08d8      	lsrs	r0, r3, #3
 80019f4:	4653      	mov	r3, sl
 80019f6:	000e      	movs	r6, r1
 80019f8:	4302      	orrs	r2, r0
 80019fa:	08dc      	lsrs	r4, r3, #3
 80019fc:	e714      	b.n	8001828 <__aeabi_dadd+0x39c>
 80019fe:	0015      	movs	r5, r2
 8001a00:	0026      	movs	r6, r4
 8001a02:	3d20      	subs	r5, #32
 8001a04:	40ee      	lsrs	r6, r5
 8001a06:	2a20      	cmp	r2, #32
 8001a08:	d003      	beq.n	8001a12 <__aeabi_dadd+0x586>
 8001a0a:	2540      	movs	r5, #64	@ 0x40
 8001a0c:	1aaa      	subs	r2, r5, r2
 8001a0e:	4094      	lsls	r4, r2
 8001a10:	4320      	orrs	r0, r4
 8001a12:	1e42      	subs	r2, r0, #1
 8001a14:	4190      	sbcs	r0, r2
 8001a16:	0005      	movs	r5, r0
 8001a18:	4335      	orrs	r5, r6
 8001a1a:	e606      	b.n	800162a <__aeabi_dadd+0x19e>
 8001a1c:	2a00      	cmp	r2, #0
 8001a1e:	d07c      	beq.n	8001b1a <__aeabi_dadd+0x68e>
 8001a20:	4662      	mov	r2, ip
 8001a22:	4653      	mov	r3, sl
 8001a24:	08c0      	lsrs	r0, r0, #3
 8001a26:	431a      	orrs	r2, r3
 8001a28:	d100      	bne.n	8001a2c <__aeabi_dadd+0x5a0>
 8001a2a:	e6fa      	b.n	8001822 <__aeabi_dadd+0x396>
 8001a2c:	0762      	lsls	r2, r4, #29
 8001a2e:	4310      	orrs	r0, r2
 8001a30:	2280      	movs	r2, #128	@ 0x80
 8001a32:	08e4      	lsrs	r4, r4, #3
 8001a34:	0312      	lsls	r2, r2, #12
 8001a36:	4214      	tst	r4, r2
 8001a38:	d008      	beq.n	8001a4c <__aeabi_dadd+0x5c0>
 8001a3a:	08d9      	lsrs	r1, r3, #3
 8001a3c:	4211      	tst	r1, r2
 8001a3e:	d105      	bne.n	8001a4c <__aeabi_dadd+0x5c0>
 8001a40:	4663      	mov	r3, ip
 8001a42:	08d8      	lsrs	r0, r3, #3
 8001a44:	4653      	mov	r3, sl
 8001a46:	000c      	movs	r4, r1
 8001a48:	075b      	lsls	r3, r3, #29
 8001a4a:	4318      	orrs	r0, r3
 8001a4c:	0f42      	lsrs	r2, r0, #29
 8001a4e:	00c0      	lsls	r0, r0, #3
 8001a50:	08c0      	lsrs	r0, r0, #3
 8001a52:	0752      	lsls	r2, r2, #29
 8001a54:	4302      	orrs	r2, r0
 8001a56:	e6e7      	b.n	8001828 <__aeabi_dadd+0x39c>
 8001a58:	2a00      	cmp	r2, #0
 8001a5a:	d100      	bne.n	8001a5e <__aeabi_dadd+0x5d2>
 8001a5c:	e72d      	b.n	80018ba <__aeabi_dadd+0x42e>
 8001a5e:	4663      	mov	r3, ip
 8001a60:	08d8      	lsrs	r0, r3, #3
 8001a62:	4653      	mov	r3, sl
 8001a64:	075a      	lsls	r2, r3, #29
 8001a66:	000e      	movs	r6, r1
 8001a68:	4302      	orrs	r2, r0
 8001a6a:	08dc      	lsrs	r4, r3, #3
 8001a6c:	e6cc      	b.n	8001808 <__aeabi_dadd+0x37c>
 8001a6e:	4663      	mov	r3, ip
 8001a70:	1a1d      	subs	r5, r3, r0
 8001a72:	45ac      	cmp	ip, r5
 8001a74:	4192      	sbcs	r2, r2
 8001a76:	4653      	mov	r3, sl
 8001a78:	4252      	negs	r2, r2
 8001a7a:	1b1c      	subs	r4, r3, r4
 8001a7c:	000e      	movs	r6, r1
 8001a7e:	4688      	mov	r8, r1
 8001a80:	1aa4      	subs	r4, r4, r2
 8001a82:	3701      	adds	r7, #1
 8001a84:	e555      	b.n	8001532 <__aeabi_dadd+0xa6>
 8001a86:	4663      	mov	r3, ip
 8001a88:	08d9      	lsrs	r1, r3, #3
 8001a8a:	4653      	mov	r3, sl
 8001a8c:	075a      	lsls	r2, r3, #29
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	08dc      	lsrs	r4, r3, #3
 8001a92:	e6c9      	b.n	8001828 <__aeabi_dadd+0x39c>
 8001a94:	4660      	mov	r0, ip
 8001a96:	4654      	mov	r4, sl
 8001a98:	e6d4      	b.n	8001844 <__aeabi_dadd+0x3b8>
 8001a9a:	08c0      	lsrs	r0, r0, #3
 8001a9c:	2a00      	cmp	r2, #0
 8001a9e:	d100      	bne.n	8001aa2 <__aeabi_dadd+0x616>
 8001aa0:	e6bf      	b.n	8001822 <__aeabi_dadd+0x396>
 8001aa2:	0762      	lsls	r2, r4, #29
 8001aa4:	4310      	orrs	r0, r2
 8001aa6:	2280      	movs	r2, #128	@ 0x80
 8001aa8:	08e4      	lsrs	r4, r4, #3
 8001aaa:	0312      	lsls	r2, r2, #12
 8001aac:	4214      	tst	r4, r2
 8001aae:	d0cd      	beq.n	8001a4c <__aeabi_dadd+0x5c0>
 8001ab0:	08dd      	lsrs	r5, r3, #3
 8001ab2:	4215      	tst	r5, r2
 8001ab4:	d1ca      	bne.n	8001a4c <__aeabi_dadd+0x5c0>
 8001ab6:	4663      	mov	r3, ip
 8001ab8:	08d8      	lsrs	r0, r3, #3
 8001aba:	4653      	mov	r3, sl
 8001abc:	075b      	lsls	r3, r3, #29
 8001abe:	000e      	movs	r6, r1
 8001ac0:	002c      	movs	r4, r5
 8001ac2:	4318      	orrs	r0, r3
 8001ac4:	e7c2      	b.n	8001a4c <__aeabi_dadd+0x5c0>
 8001ac6:	4663      	mov	r3, ip
 8001ac8:	08d9      	lsrs	r1, r3, #3
 8001aca:	4653      	mov	r3, sl
 8001acc:	075a      	lsls	r2, r3, #29
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	08dc      	lsrs	r4, r3, #3
 8001ad2:	e699      	b.n	8001808 <__aeabi_dadd+0x37c>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	08d8      	lsrs	r0, r3, #3
 8001ad8:	4653      	mov	r3, sl
 8001ada:	075a      	lsls	r2, r3, #29
 8001adc:	000e      	movs	r6, r1
 8001ade:	4302      	orrs	r2, r0
 8001ae0:	08dc      	lsrs	r4, r3, #3
 8001ae2:	e6a1      	b.n	8001828 <__aeabi_dadd+0x39c>
 8001ae4:	0011      	movs	r1, r2
 8001ae6:	0027      	movs	r7, r4
 8001ae8:	3920      	subs	r1, #32
 8001aea:	40cf      	lsrs	r7, r1
 8001aec:	2a20      	cmp	r2, #32
 8001aee:	d003      	beq.n	8001af8 <__aeabi_dadd+0x66c>
 8001af0:	2140      	movs	r1, #64	@ 0x40
 8001af2:	1a8a      	subs	r2, r1, r2
 8001af4:	4094      	lsls	r4, r2
 8001af6:	4320      	orrs	r0, r4
 8001af8:	1e42      	subs	r2, r0, #1
 8001afa:	4190      	sbcs	r0, r2
 8001afc:	0005      	movs	r5, r0
 8001afe:	433d      	orrs	r5, r7
 8001b00:	e651      	b.n	80017a6 <__aeabi_dadd+0x31a>
 8001b02:	000c      	movs	r4, r1
 8001b04:	2500      	movs	r5, #0
 8001b06:	2200      	movs	r2, #0
 8001b08:	e558      	b.n	80015bc <__aeabi_dadd+0x130>
 8001b0a:	4460      	add	r0, ip
 8001b0c:	4560      	cmp	r0, ip
 8001b0e:	4192      	sbcs	r2, r2
 8001b10:	4454      	add	r4, sl
 8001b12:	4252      	negs	r2, r2
 8001b14:	0005      	movs	r5, r0
 8001b16:	18a4      	adds	r4, r4, r2
 8001b18:	e73a      	b.n	8001990 <__aeabi_dadd+0x504>
 8001b1a:	4653      	mov	r3, sl
 8001b1c:	075a      	lsls	r2, r3, #29
 8001b1e:	4663      	mov	r3, ip
 8001b20:	08d9      	lsrs	r1, r3, #3
 8001b22:	4653      	mov	r3, sl
 8001b24:	430a      	orrs	r2, r1
 8001b26:	08dc      	lsrs	r4, r3, #3
 8001b28:	e67e      	b.n	8001828 <__aeabi_dadd+0x39c>
 8001b2a:	001a      	movs	r2, r3
 8001b2c:	001c      	movs	r4, r3
 8001b2e:	432a      	orrs	r2, r5
 8001b30:	d000      	beq.n	8001b34 <__aeabi_dadd+0x6a8>
 8001b32:	e6ab      	b.n	800188c <__aeabi_dadd+0x400>
 8001b34:	e6c1      	b.n	80018ba <__aeabi_dadd+0x42e>
 8001b36:	2120      	movs	r1, #32
 8001b38:	2500      	movs	r5, #0
 8001b3a:	1a09      	subs	r1, r1, r0
 8001b3c:	e519      	b.n	8001572 <__aeabi_dadd+0xe6>
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2500      	movs	r5, #0
 8001b42:	4c01      	ldr	r4, [pc, #4]	@ (8001b48 <__aeabi_dadd+0x6bc>)
 8001b44:	e53a      	b.n	80015bc <__aeabi_dadd+0x130>
 8001b46:	46c0      	nop			@ (mov r8, r8)
 8001b48:	000007ff 	.word	0x000007ff
 8001b4c:	ff7fffff 	.word	0xff7fffff
 8001b50:	000007fe 	.word	0x000007fe

08001b54 <__aeabi_ddiv>:
 8001b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b56:	46de      	mov	lr, fp
 8001b58:	4645      	mov	r5, r8
 8001b5a:	4657      	mov	r7, sl
 8001b5c:	464e      	mov	r6, r9
 8001b5e:	b5e0      	push	{r5, r6, r7, lr}
 8001b60:	b087      	sub	sp, #28
 8001b62:	9200      	str	r2, [sp, #0]
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	030b      	lsls	r3, r1, #12
 8001b68:	0b1b      	lsrs	r3, r3, #12
 8001b6a:	469b      	mov	fp, r3
 8001b6c:	0fca      	lsrs	r2, r1, #31
 8001b6e:	004b      	lsls	r3, r1, #1
 8001b70:	0004      	movs	r4, r0
 8001b72:	4680      	mov	r8, r0
 8001b74:	0d5b      	lsrs	r3, r3, #21
 8001b76:	9202      	str	r2, [sp, #8]
 8001b78:	d100      	bne.n	8001b7c <__aeabi_ddiv+0x28>
 8001b7a:	e16a      	b.n	8001e52 <__aeabi_ddiv+0x2fe>
 8001b7c:	4ad4      	ldr	r2, [pc, #848]	@ (8001ed0 <__aeabi_ddiv+0x37c>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d100      	bne.n	8001b84 <__aeabi_ddiv+0x30>
 8001b82:	e18c      	b.n	8001e9e <__aeabi_ddiv+0x34a>
 8001b84:	4659      	mov	r1, fp
 8001b86:	0f42      	lsrs	r2, r0, #29
 8001b88:	00c9      	lsls	r1, r1, #3
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	2180      	movs	r1, #128	@ 0x80
 8001b8e:	0409      	lsls	r1, r1, #16
 8001b90:	4311      	orrs	r1, r2
 8001b92:	00c2      	lsls	r2, r0, #3
 8001b94:	4690      	mov	r8, r2
 8001b96:	4acf      	ldr	r2, [pc, #828]	@ (8001ed4 <__aeabi_ddiv+0x380>)
 8001b98:	4689      	mov	r9, r1
 8001b9a:	4692      	mov	sl, r2
 8001b9c:	449a      	add	sl, r3
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	2400      	movs	r4, #0
 8001ba2:	9303      	str	r3, [sp, #12]
 8001ba4:	9e00      	ldr	r6, [sp, #0]
 8001ba6:	9f01      	ldr	r7, [sp, #4]
 8001ba8:	033b      	lsls	r3, r7, #12
 8001baa:	0b1b      	lsrs	r3, r3, #12
 8001bac:	469b      	mov	fp, r3
 8001bae:	007b      	lsls	r3, r7, #1
 8001bb0:	0030      	movs	r0, r6
 8001bb2:	0d5b      	lsrs	r3, r3, #21
 8001bb4:	0ffd      	lsrs	r5, r7, #31
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d100      	bne.n	8001bbc <__aeabi_ddiv+0x68>
 8001bba:	e128      	b.n	8001e0e <__aeabi_ddiv+0x2ba>
 8001bbc:	4ac4      	ldr	r2, [pc, #784]	@ (8001ed0 <__aeabi_ddiv+0x37c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d100      	bne.n	8001bc4 <__aeabi_ddiv+0x70>
 8001bc2:	e177      	b.n	8001eb4 <__aeabi_ddiv+0x360>
 8001bc4:	4659      	mov	r1, fp
 8001bc6:	0f72      	lsrs	r2, r6, #29
 8001bc8:	00c9      	lsls	r1, r1, #3
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	2180      	movs	r1, #128	@ 0x80
 8001bce:	0409      	lsls	r1, r1, #16
 8001bd0:	4311      	orrs	r1, r2
 8001bd2:	468b      	mov	fp, r1
 8001bd4:	49bf      	ldr	r1, [pc, #764]	@ (8001ed4 <__aeabi_ddiv+0x380>)
 8001bd6:	00f2      	lsls	r2, r6, #3
 8001bd8:	468c      	mov	ip, r1
 8001bda:	4651      	mov	r1, sl
 8001bdc:	4463      	add	r3, ip
 8001bde:	1acb      	subs	r3, r1, r3
 8001be0:	469a      	mov	sl, r3
 8001be2:	2300      	movs	r3, #0
 8001be4:	9e02      	ldr	r6, [sp, #8]
 8001be6:	406e      	eors	r6, r5
 8001be8:	2c0f      	cmp	r4, #15
 8001bea:	d827      	bhi.n	8001c3c <__aeabi_ddiv+0xe8>
 8001bec:	49ba      	ldr	r1, [pc, #744]	@ (8001ed8 <__aeabi_ddiv+0x384>)
 8001bee:	00a4      	lsls	r4, r4, #2
 8001bf0:	5909      	ldr	r1, [r1, r4]
 8001bf2:	468f      	mov	pc, r1
 8001bf4:	46cb      	mov	fp, r9
 8001bf6:	4642      	mov	r2, r8
 8001bf8:	9e02      	ldr	r6, [sp, #8]
 8001bfa:	9b03      	ldr	r3, [sp, #12]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d016      	beq.n	8001c2e <__aeabi_ddiv+0xda>
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d100      	bne.n	8001c06 <__aeabi_ddiv+0xb2>
 8001c04:	e2a6      	b.n	8002154 <__aeabi_ddiv+0x600>
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d000      	beq.n	8001c0c <__aeabi_ddiv+0xb8>
 8001c0a:	e0df      	b.n	8001dcc <__aeabi_ddiv+0x278>
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2300      	movs	r3, #0
 8001c10:	2400      	movs	r4, #0
 8001c12:	4690      	mov	r8, r2
 8001c14:	051b      	lsls	r3, r3, #20
 8001c16:	4323      	orrs	r3, r4
 8001c18:	07f6      	lsls	r6, r6, #31
 8001c1a:	4333      	orrs	r3, r6
 8001c1c:	4640      	mov	r0, r8
 8001c1e:	0019      	movs	r1, r3
 8001c20:	b007      	add	sp, #28
 8001c22:	bcf0      	pop	{r4, r5, r6, r7}
 8001c24:	46bb      	mov	fp, r7
 8001c26:	46b2      	mov	sl, r6
 8001c28:	46a9      	mov	r9, r5
 8001c2a:	46a0      	mov	r8, r4
 8001c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2400      	movs	r4, #0
 8001c32:	4690      	mov	r8, r2
 8001c34:	4ba6      	ldr	r3, [pc, #664]	@ (8001ed0 <__aeabi_ddiv+0x37c>)
 8001c36:	e7ed      	b.n	8001c14 <__aeabi_ddiv+0xc0>
 8001c38:	002e      	movs	r6, r5
 8001c3a:	e7df      	b.n	8001bfc <__aeabi_ddiv+0xa8>
 8001c3c:	45cb      	cmp	fp, r9
 8001c3e:	d200      	bcs.n	8001c42 <__aeabi_ddiv+0xee>
 8001c40:	e1d4      	b.n	8001fec <__aeabi_ddiv+0x498>
 8001c42:	d100      	bne.n	8001c46 <__aeabi_ddiv+0xf2>
 8001c44:	e1cf      	b.n	8001fe6 <__aeabi_ddiv+0x492>
 8001c46:	2301      	movs	r3, #1
 8001c48:	425b      	negs	r3, r3
 8001c4a:	469c      	mov	ip, r3
 8001c4c:	4644      	mov	r4, r8
 8001c4e:	4648      	mov	r0, r9
 8001c50:	2700      	movs	r7, #0
 8001c52:	44e2      	add	sl, ip
 8001c54:	465b      	mov	r3, fp
 8001c56:	0e15      	lsrs	r5, r2, #24
 8001c58:	021b      	lsls	r3, r3, #8
 8001c5a:	431d      	orrs	r5, r3
 8001c5c:	0c19      	lsrs	r1, r3, #16
 8001c5e:	042b      	lsls	r3, r5, #16
 8001c60:	0212      	lsls	r2, r2, #8
 8001c62:	9500      	str	r5, [sp, #0]
 8001c64:	0c1d      	lsrs	r5, r3, #16
 8001c66:	4691      	mov	r9, r2
 8001c68:	9102      	str	r1, [sp, #8]
 8001c6a:	9503      	str	r5, [sp, #12]
 8001c6c:	f7fe fae4 	bl	8000238 <__aeabi_uidivmod>
 8001c70:	0002      	movs	r2, r0
 8001c72:	436a      	muls	r2, r5
 8001c74:	040b      	lsls	r3, r1, #16
 8001c76:	0c21      	lsrs	r1, r4, #16
 8001c78:	4680      	mov	r8, r0
 8001c7a:	4319      	orrs	r1, r3
 8001c7c:	428a      	cmp	r2, r1
 8001c7e:	d909      	bls.n	8001c94 <__aeabi_ddiv+0x140>
 8001c80:	9d00      	ldr	r5, [sp, #0]
 8001c82:	2301      	movs	r3, #1
 8001c84:	46ac      	mov	ip, r5
 8001c86:	425b      	negs	r3, r3
 8001c88:	4461      	add	r1, ip
 8001c8a:	469c      	mov	ip, r3
 8001c8c:	44e0      	add	r8, ip
 8001c8e:	428d      	cmp	r5, r1
 8001c90:	d800      	bhi.n	8001c94 <__aeabi_ddiv+0x140>
 8001c92:	e1fb      	b.n	800208c <__aeabi_ddiv+0x538>
 8001c94:	1a88      	subs	r0, r1, r2
 8001c96:	9902      	ldr	r1, [sp, #8]
 8001c98:	f7fe face 	bl	8000238 <__aeabi_uidivmod>
 8001c9c:	9a03      	ldr	r2, [sp, #12]
 8001c9e:	0424      	lsls	r4, r4, #16
 8001ca0:	4342      	muls	r2, r0
 8001ca2:	0409      	lsls	r1, r1, #16
 8001ca4:	0c24      	lsrs	r4, r4, #16
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	430c      	orrs	r4, r1
 8001caa:	42a2      	cmp	r2, r4
 8001cac:	d906      	bls.n	8001cbc <__aeabi_ddiv+0x168>
 8001cae:	9900      	ldr	r1, [sp, #0]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	468c      	mov	ip, r1
 8001cb4:	4464      	add	r4, ip
 8001cb6:	42a1      	cmp	r1, r4
 8001cb8:	d800      	bhi.n	8001cbc <__aeabi_ddiv+0x168>
 8001cba:	e1e1      	b.n	8002080 <__aeabi_ddiv+0x52c>
 8001cbc:	1aa0      	subs	r0, r4, r2
 8001cbe:	4642      	mov	r2, r8
 8001cc0:	0412      	lsls	r2, r2, #16
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	4693      	mov	fp, r2
 8001cc6:	464b      	mov	r3, r9
 8001cc8:	4659      	mov	r1, fp
 8001cca:	0c1b      	lsrs	r3, r3, #16
 8001ccc:	001d      	movs	r5, r3
 8001cce:	9304      	str	r3, [sp, #16]
 8001cd0:	040b      	lsls	r3, r1, #16
 8001cd2:	4649      	mov	r1, r9
 8001cd4:	0409      	lsls	r1, r1, #16
 8001cd6:	0c09      	lsrs	r1, r1, #16
 8001cd8:	000c      	movs	r4, r1
 8001cda:	0c1b      	lsrs	r3, r3, #16
 8001cdc:	435c      	muls	r4, r3
 8001cde:	0c12      	lsrs	r2, r2, #16
 8001ce0:	436b      	muls	r3, r5
 8001ce2:	4688      	mov	r8, r1
 8001ce4:	4351      	muls	r1, r2
 8001ce6:	436a      	muls	r2, r5
 8001ce8:	0c25      	lsrs	r5, r4, #16
 8001cea:	46ac      	mov	ip, r5
 8001cec:	185b      	adds	r3, r3, r1
 8001cee:	4463      	add	r3, ip
 8001cf0:	4299      	cmp	r1, r3
 8001cf2:	d903      	bls.n	8001cfc <__aeabi_ddiv+0x1a8>
 8001cf4:	2180      	movs	r1, #128	@ 0x80
 8001cf6:	0249      	lsls	r1, r1, #9
 8001cf8:	468c      	mov	ip, r1
 8001cfa:	4462      	add	r2, ip
 8001cfc:	0c19      	lsrs	r1, r3, #16
 8001cfe:	0424      	lsls	r4, r4, #16
 8001d00:	041b      	lsls	r3, r3, #16
 8001d02:	0c24      	lsrs	r4, r4, #16
 8001d04:	188a      	adds	r2, r1, r2
 8001d06:	191c      	adds	r4, r3, r4
 8001d08:	4290      	cmp	r0, r2
 8001d0a:	d302      	bcc.n	8001d12 <__aeabi_ddiv+0x1be>
 8001d0c:	d116      	bne.n	8001d3c <__aeabi_ddiv+0x1e8>
 8001d0e:	42a7      	cmp	r7, r4
 8001d10:	d214      	bcs.n	8001d3c <__aeabi_ddiv+0x1e8>
 8001d12:	465b      	mov	r3, fp
 8001d14:	9d00      	ldr	r5, [sp, #0]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	444f      	add	r7, r9
 8001d1a:	9305      	str	r3, [sp, #20]
 8001d1c:	454f      	cmp	r7, r9
 8001d1e:	419b      	sbcs	r3, r3
 8001d20:	46ac      	mov	ip, r5
 8001d22:	425b      	negs	r3, r3
 8001d24:	4463      	add	r3, ip
 8001d26:	18c0      	adds	r0, r0, r3
 8001d28:	4285      	cmp	r5, r0
 8001d2a:	d300      	bcc.n	8001d2e <__aeabi_ddiv+0x1da>
 8001d2c:	e1a1      	b.n	8002072 <__aeabi_ddiv+0x51e>
 8001d2e:	4282      	cmp	r2, r0
 8001d30:	d900      	bls.n	8001d34 <__aeabi_ddiv+0x1e0>
 8001d32:	e1f6      	b.n	8002122 <__aeabi_ddiv+0x5ce>
 8001d34:	d100      	bne.n	8001d38 <__aeabi_ddiv+0x1e4>
 8001d36:	e1f1      	b.n	800211c <__aeabi_ddiv+0x5c8>
 8001d38:	9b05      	ldr	r3, [sp, #20]
 8001d3a:	469b      	mov	fp, r3
 8001d3c:	1b3c      	subs	r4, r7, r4
 8001d3e:	42a7      	cmp	r7, r4
 8001d40:	41bf      	sbcs	r7, r7
 8001d42:	9d00      	ldr	r5, [sp, #0]
 8001d44:	1a80      	subs	r0, r0, r2
 8001d46:	427f      	negs	r7, r7
 8001d48:	1bc0      	subs	r0, r0, r7
 8001d4a:	4285      	cmp	r5, r0
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_ddiv+0x1fc>
 8001d4e:	e1d0      	b.n	80020f2 <__aeabi_ddiv+0x59e>
 8001d50:	9902      	ldr	r1, [sp, #8]
 8001d52:	f7fe fa71 	bl	8000238 <__aeabi_uidivmod>
 8001d56:	9a03      	ldr	r2, [sp, #12]
 8001d58:	040b      	lsls	r3, r1, #16
 8001d5a:	4342      	muls	r2, r0
 8001d5c:	0c21      	lsrs	r1, r4, #16
 8001d5e:	0007      	movs	r7, r0
 8001d60:	4319      	orrs	r1, r3
 8001d62:	428a      	cmp	r2, r1
 8001d64:	d900      	bls.n	8001d68 <__aeabi_ddiv+0x214>
 8001d66:	e178      	b.n	800205a <__aeabi_ddiv+0x506>
 8001d68:	1a88      	subs	r0, r1, r2
 8001d6a:	9902      	ldr	r1, [sp, #8]
 8001d6c:	f7fe fa64 	bl	8000238 <__aeabi_uidivmod>
 8001d70:	9a03      	ldr	r2, [sp, #12]
 8001d72:	0424      	lsls	r4, r4, #16
 8001d74:	4342      	muls	r2, r0
 8001d76:	0409      	lsls	r1, r1, #16
 8001d78:	0c24      	lsrs	r4, r4, #16
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	430c      	orrs	r4, r1
 8001d7e:	42a2      	cmp	r2, r4
 8001d80:	d900      	bls.n	8001d84 <__aeabi_ddiv+0x230>
 8001d82:	e15d      	b.n	8002040 <__aeabi_ddiv+0x4ec>
 8001d84:	4641      	mov	r1, r8
 8001d86:	1aa4      	subs	r4, r4, r2
 8001d88:	043a      	lsls	r2, r7, #16
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	9d04      	ldr	r5, [sp, #16]
 8001d8e:	0413      	lsls	r3, r2, #16
 8001d90:	0c1b      	lsrs	r3, r3, #16
 8001d92:	4359      	muls	r1, r3
 8001d94:	4647      	mov	r7, r8
 8001d96:	436b      	muls	r3, r5
 8001d98:	469c      	mov	ip, r3
 8001d9a:	0c10      	lsrs	r0, r2, #16
 8001d9c:	4347      	muls	r7, r0
 8001d9e:	0c0b      	lsrs	r3, r1, #16
 8001da0:	44bc      	add	ip, r7
 8001da2:	4463      	add	r3, ip
 8001da4:	4368      	muls	r0, r5
 8001da6:	429f      	cmp	r7, r3
 8001da8:	d903      	bls.n	8001db2 <__aeabi_ddiv+0x25e>
 8001daa:	2580      	movs	r5, #128	@ 0x80
 8001dac:	026d      	lsls	r5, r5, #9
 8001dae:	46ac      	mov	ip, r5
 8001db0:	4460      	add	r0, ip
 8001db2:	0c1f      	lsrs	r7, r3, #16
 8001db4:	0409      	lsls	r1, r1, #16
 8001db6:	041b      	lsls	r3, r3, #16
 8001db8:	0c09      	lsrs	r1, r1, #16
 8001dba:	183f      	adds	r7, r7, r0
 8001dbc:	185b      	adds	r3, r3, r1
 8001dbe:	42bc      	cmp	r4, r7
 8001dc0:	d200      	bcs.n	8001dc4 <__aeabi_ddiv+0x270>
 8001dc2:	e102      	b.n	8001fca <__aeabi_ddiv+0x476>
 8001dc4:	d100      	bne.n	8001dc8 <__aeabi_ddiv+0x274>
 8001dc6:	e0fd      	b.n	8001fc4 <__aeabi_ddiv+0x470>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	4b43      	ldr	r3, [pc, #268]	@ (8001edc <__aeabi_ddiv+0x388>)
 8001dce:	4453      	add	r3, sl
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	dc00      	bgt.n	8001dd6 <__aeabi_ddiv+0x282>
 8001dd4:	e0ae      	b.n	8001f34 <__aeabi_ddiv+0x3e0>
 8001dd6:	0751      	lsls	r1, r2, #29
 8001dd8:	d000      	beq.n	8001ddc <__aeabi_ddiv+0x288>
 8001dda:	e198      	b.n	800210e <__aeabi_ddiv+0x5ba>
 8001ddc:	4659      	mov	r1, fp
 8001dde:	01c9      	lsls	r1, r1, #7
 8001de0:	d506      	bpl.n	8001df0 <__aeabi_ddiv+0x29c>
 8001de2:	4659      	mov	r1, fp
 8001de4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ee0 <__aeabi_ddiv+0x38c>)
 8001de6:	4019      	ands	r1, r3
 8001de8:	2380      	movs	r3, #128	@ 0x80
 8001dea:	468b      	mov	fp, r1
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4453      	add	r3, sl
 8001df0:	493c      	ldr	r1, [pc, #240]	@ (8001ee4 <__aeabi_ddiv+0x390>)
 8001df2:	428b      	cmp	r3, r1
 8001df4:	dd00      	ble.n	8001df8 <__aeabi_ddiv+0x2a4>
 8001df6:	e71a      	b.n	8001c2e <__aeabi_ddiv+0xda>
 8001df8:	4659      	mov	r1, fp
 8001dfa:	08d2      	lsrs	r2, r2, #3
 8001dfc:	0749      	lsls	r1, r1, #29
 8001dfe:	4311      	orrs	r1, r2
 8001e00:	465a      	mov	r2, fp
 8001e02:	055b      	lsls	r3, r3, #21
 8001e04:	0254      	lsls	r4, r2, #9
 8001e06:	4688      	mov	r8, r1
 8001e08:	0b24      	lsrs	r4, r4, #12
 8001e0a:	0d5b      	lsrs	r3, r3, #21
 8001e0c:	e702      	b.n	8001c14 <__aeabi_ddiv+0xc0>
 8001e0e:	465a      	mov	r2, fp
 8001e10:	9b00      	ldr	r3, [sp, #0]
 8001e12:	431a      	orrs	r2, r3
 8001e14:	d100      	bne.n	8001e18 <__aeabi_ddiv+0x2c4>
 8001e16:	e07e      	b.n	8001f16 <__aeabi_ddiv+0x3c2>
 8001e18:	465b      	mov	r3, fp
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d100      	bne.n	8001e20 <__aeabi_ddiv+0x2cc>
 8001e1e:	e100      	b.n	8002022 <__aeabi_ddiv+0x4ce>
 8001e20:	4658      	mov	r0, fp
 8001e22:	f001 fa2d 	bl	8003280 <__clzsi2>
 8001e26:	0002      	movs	r2, r0
 8001e28:	0003      	movs	r3, r0
 8001e2a:	3a0b      	subs	r2, #11
 8001e2c:	271d      	movs	r7, #29
 8001e2e:	9e00      	ldr	r6, [sp, #0]
 8001e30:	1aba      	subs	r2, r7, r2
 8001e32:	0019      	movs	r1, r3
 8001e34:	4658      	mov	r0, fp
 8001e36:	40d6      	lsrs	r6, r2
 8001e38:	3908      	subs	r1, #8
 8001e3a:	4088      	lsls	r0, r1
 8001e3c:	0032      	movs	r2, r6
 8001e3e:	4302      	orrs	r2, r0
 8001e40:	4693      	mov	fp, r2
 8001e42:	9a00      	ldr	r2, [sp, #0]
 8001e44:	408a      	lsls	r2, r1
 8001e46:	4928      	ldr	r1, [pc, #160]	@ (8001ee8 <__aeabi_ddiv+0x394>)
 8001e48:	4453      	add	r3, sl
 8001e4a:	468a      	mov	sl, r1
 8001e4c:	449a      	add	sl, r3
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e6c8      	b.n	8001be4 <__aeabi_ddiv+0x90>
 8001e52:	465b      	mov	r3, fp
 8001e54:	4303      	orrs	r3, r0
 8001e56:	4699      	mov	r9, r3
 8001e58:	d056      	beq.n	8001f08 <__aeabi_ddiv+0x3b4>
 8001e5a:	465b      	mov	r3, fp
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d100      	bne.n	8001e62 <__aeabi_ddiv+0x30e>
 8001e60:	e0cd      	b.n	8001ffe <__aeabi_ddiv+0x4aa>
 8001e62:	4658      	mov	r0, fp
 8001e64:	f001 fa0c 	bl	8003280 <__clzsi2>
 8001e68:	230b      	movs	r3, #11
 8001e6a:	425b      	negs	r3, r3
 8001e6c:	469c      	mov	ip, r3
 8001e6e:	0002      	movs	r2, r0
 8001e70:	4484      	add	ip, r0
 8001e72:	4666      	mov	r6, ip
 8001e74:	231d      	movs	r3, #29
 8001e76:	1b9b      	subs	r3, r3, r6
 8001e78:	0026      	movs	r6, r4
 8001e7a:	0011      	movs	r1, r2
 8001e7c:	4658      	mov	r0, fp
 8001e7e:	40de      	lsrs	r6, r3
 8001e80:	3908      	subs	r1, #8
 8001e82:	4088      	lsls	r0, r1
 8001e84:	0033      	movs	r3, r6
 8001e86:	4303      	orrs	r3, r0
 8001e88:	4699      	mov	r9, r3
 8001e8a:	0023      	movs	r3, r4
 8001e8c:	408b      	lsls	r3, r1
 8001e8e:	4698      	mov	r8, r3
 8001e90:	4b16      	ldr	r3, [pc, #88]	@ (8001eec <__aeabi_ddiv+0x398>)
 8001e92:	2400      	movs	r4, #0
 8001e94:	1a9b      	subs	r3, r3, r2
 8001e96:	469a      	mov	sl, r3
 8001e98:	2300      	movs	r3, #0
 8001e9a:	9303      	str	r3, [sp, #12]
 8001e9c:	e682      	b.n	8001ba4 <__aeabi_ddiv+0x50>
 8001e9e:	465a      	mov	r2, fp
 8001ea0:	4302      	orrs	r2, r0
 8001ea2:	4691      	mov	r9, r2
 8001ea4:	d12a      	bne.n	8001efc <__aeabi_ddiv+0x3a8>
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	469a      	mov	sl, r3
 8001eaa:	2302      	movs	r3, #2
 8001eac:	4690      	mov	r8, r2
 8001eae:	2408      	movs	r4, #8
 8001eb0:	9303      	str	r3, [sp, #12]
 8001eb2:	e677      	b.n	8001ba4 <__aeabi_ddiv+0x50>
 8001eb4:	465a      	mov	r2, fp
 8001eb6:	9b00      	ldr	r3, [sp, #0]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef0 <__aeabi_ddiv+0x39c>)
 8001ebc:	469c      	mov	ip, r3
 8001ebe:	44e2      	add	sl, ip
 8001ec0:	2a00      	cmp	r2, #0
 8001ec2:	d117      	bne.n	8001ef4 <__aeabi_ddiv+0x3a0>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	431c      	orrs	r4, r3
 8001ec8:	2300      	movs	r3, #0
 8001eca:	469b      	mov	fp, r3
 8001ecc:	3302      	adds	r3, #2
 8001ece:	e689      	b.n	8001be4 <__aeabi_ddiv+0x90>
 8001ed0:	000007ff 	.word	0x000007ff
 8001ed4:	fffffc01 	.word	0xfffffc01
 8001ed8:	0800c308 	.word	0x0800c308
 8001edc:	000003ff 	.word	0x000003ff
 8001ee0:	feffffff 	.word	0xfeffffff
 8001ee4:	000007fe 	.word	0x000007fe
 8001ee8:	000003f3 	.word	0x000003f3
 8001eec:	fffffc0d 	.word	0xfffffc0d
 8001ef0:	fffff801 	.word	0xfffff801
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	0032      	movs	r2, r6
 8001ef8:	431c      	orrs	r4, r3
 8001efa:	e673      	b.n	8001be4 <__aeabi_ddiv+0x90>
 8001efc:	469a      	mov	sl, r3
 8001efe:	2303      	movs	r3, #3
 8001f00:	46d9      	mov	r9, fp
 8001f02:	240c      	movs	r4, #12
 8001f04:	9303      	str	r3, [sp, #12]
 8001f06:	e64d      	b.n	8001ba4 <__aeabi_ddiv+0x50>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	4698      	mov	r8, r3
 8001f0c:	469a      	mov	sl, r3
 8001f0e:	3301      	adds	r3, #1
 8001f10:	2404      	movs	r4, #4
 8001f12:	9303      	str	r3, [sp, #12]
 8001f14:	e646      	b.n	8001ba4 <__aeabi_ddiv+0x50>
 8001f16:	2301      	movs	r3, #1
 8001f18:	431c      	orrs	r4, r3
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	469b      	mov	fp, r3
 8001f1e:	3301      	adds	r3, #1
 8001f20:	e660      	b.n	8001be4 <__aeabi_ddiv+0x90>
 8001f22:	2300      	movs	r3, #0
 8001f24:	2480      	movs	r4, #128	@ 0x80
 8001f26:	4698      	mov	r8, r3
 8001f28:	2600      	movs	r6, #0
 8001f2a:	4b92      	ldr	r3, [pc, #584]	@ (8002174 <__aeabi_ddiv+0x620>)
 8001f2c:	0324      	lsls	r4, r4, #12
 8001f2e:	e671      	b.n	8001c14 <__aeabi_ddiv+0xc0>
 8001f30:	2201      	movs	r2, #1
 8001f32:	4252      	negs	r2, r2
 8001f34:	2101      	movs	r1, #1
 8001f36:	1ac9      	subs	r1, r1, r3
 8001f38:	2938      	cmp	r1, #56	@ 0x38
 8001f3a:	dd00      	ble.n	8001f3e <__aeabi_ddiv+0x3ea>
 8001f3c:	e666      	b.n	8001c0c <__aeabi_ddiv+0xb8>
 8001f3e:	291f      	cmp	r1, #31
 8001f40:	dc00      	bgt.n	8001f44 <__aeabi_ddiv+0x3f0>
 8001f42:	e0ab      	b.n	800209c <__aeabi_ddiv+0x548>
 8001f44:	201f      	movs	r0, #31
 8001f46:	4240      	negs	r0, r0
 8001f48:	1ac3      	subs	r3, r0, r3
 8001f4a:	4658      	mov	r0, fp
 8001f4c:	40d8      	lsrs	r0, r3
 8001f4e:	0003      	movs	r3, r0
 8001f50:	2920      	cmp	r1, #32
 8001f52:	d004      	beq.n	8001f5e <__aeabi_ddiv+0x40a>
 8001f54:	4658      	mov	r0, fp
 8001f56:	4988      	ldr	r1, [pc, #544]	@ (8002178 <__aeabi_ddiv+0x624>)
 8001f58:	4451      	add	r1, sl
 8001f5a:	4088      	lsls	r0, r1
 8001f5c:	4302      	orrs	r2, r0
 8001f5e:	1e51      	subs	r1, r2, #1
 8001f60:	418a      	sbcs	r2, r1
 8001f62:	431a      	orrs	r2, r3
 8001f64:	2307      	movs	r3, #7
 8001f66:	0019      	movs	r1, r3
 8001f68:	2400      	movs	r4, #0
 8001f6a:	4011      	ands	r1, r2
 8001f6c:	4213      	tst	r3, r2
 8001f6e:	d00c      	beq.n	8001f8a <__aeabi_ddiv+0x436>
 8001f70:	230f      	movs	r3, #15
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d100      	bne.n	8001f7a <__aeabi_ddiv+0x426>
 8001f78:	e0f9      	b.n	800216e <__aeabi_ddiv+0x61a>
 8001f7a:	1d11      	adds	r1, r2, #4
 8001f7c:	4291      	cmp	r1, r2
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	000a      	movs	r2, r1
 8001f82:	425b      	negs	r3, r3
 8001f84:	0759      	lsls	r1, r3, #29
 8001f86:	025b      	lsls	r3, r3, #9
 8001f88:	0b1c      	lsrs	r4, r3, #12
 8001f8a:	08d2      	lsrs	r2, r2, #3
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	4690      	mov	r8, r2
 8001f90:	2300      	movs	r3, #0
 8001f92:	e63f      	b.n	8001c14 <__aeabi_ddiv+0xc0>
 8001f94:	2480      	movs	r4, #128	@ 0x80
 8001f96:	464b      	mov	r3, r9
 8001f98:	0324      	lsls	r4, r4, #12
 8001f9a:	4223      	tst	r3, r4
 8001f9c:	d009      	beq.n	8001fb2 <__aeabi_ddiv+0x45e>
 8001f9e:	465b      	mov	r3, fp
 8001fa0:	4223      	tst	r3, r4
 8001fa2:	d106      	bne.n	8001fb2 <__aeabi_ddiv+0x45e>
 8001fa4:	431c      	orrs	r4, r3
 8001fa6:	0324      	lsls	r4, r4, #12
 8001fa8:	002e      	movs	r6, r5
 8001faa:	4690      	mov	r8, r2
 8001fac:	4b71      	ldr	r3, [pc, #452]	@ (8002174 <__aeabi_ddiv+0x620>)
 8001fae:	0b24      	lsrs	r4, r4, #12
 8001fb0:	e630      	b.n	8001c14 <__aeabi_ddiv+0xc0>
 8001fb2:	2480      	movs	r4, #128	@ 0x80
 8001fb4:	464b      	mov	r3, r9
 8001fb6:	0324      	lsls	r4, r4, #12
 8001fb8:	431c      	orrs	r4, r3
 8001fba:	0324      	lsls	r4, r4, #12
 8001fbc:	9e02      	ldr	r6, [sp, #8]
 8001fbe:	4b6d      	ldr	r3, [pc, #436]	@ (8002174 <__aeabi_ddiv+0x620>)
 8001fc0:	0b24      	lsrs	r4, r4, #12
 8001fc2:	e627      	b.n	8001c14 <__aeabi_ddiv+0xc0>
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d100      	bne.n	8001fca <__aeabi_ddiv+0x476>
 8001fc8:	e700      	b.n	8001dcc <__aeabi_ddiv+0x278>
 8001fca:	9800      	ldr	r0, [sp, #0]
 8001fcc:	1e51      	subs	r1, r2, #1
 8001fce:	4684      	mov	ip, r0
 8001fd0:	4464      	add	r4, ip
 8001fd2:	4284      	cmp	r4, r0
 8001fd4:	d200      	bcs.n	8001fd8 <__aeabi_ddiv+0x484>
 8001fd6:	e084      	b.n	80020e2 <__aeabi_ddiv+0x58e>
 8001fd8:	42bc      	cmp	r4, r7
 8001fda:	d200      	bcs.n	8001fde <__aeabi_ddiv+0x48a>
 8001fdc:	e0ae      	b.n	800213c <__aeabi_ddiv+0x5e8>
 8001fde:	d100      	bne.n	8001fe2 <__aeabi_ddiv+0x48e>
 8001fe0:	e0c1      	b.n	8002166 <__aeabi_ddiv+0x612>
 8001fe2:	000a      	movs	r2, r1
 8001fe4:	e6f0      	b.n	8001dc8 <__aeabi_ddiv+0x274>
 8001fe6:	4542      	cmp	r2, r8
 8001fe8:	d900      	bls.n	8001fec <__aeabi_ddiv+0x498>
 8001fea:	e62c      	b.n	8001c46 <__aeabi_ddiv+0xf2>
 8001fec:	464b      	mov	r3, r9
 8001fee:	07dc      	lsls	r4, r3, #31
 8001ff0:	0858      	lsrs	r0, r3, #1
 8001ff2:	4643      	mov	r3, r8
 8001ff4:	085b      	lsrs	r3, r3, #1
 8001ff6:	431c      	orrs	r4, r3
 8001ff8:	4643      	mov	r3, r8
 8001ffa:	07df      	lsls	r7, r3, #31
 8001ffc:	e62a      	b.n	8001c54 <__aeabi_ddiv+0x100>
 8001ffe:	f001 f93f 	bl	8003280 <__clzsi2>
 8002002:	2315      	movs	r3, #21
 8002004:	469c      	mov	ip, r3
 8002006:	4484      	add	ip, r0
 8002008:	0002      	movs	r2, r0
 800200a:	4663      	mov	r3, ip
 800200c:	3220      	adds	r2, #32
 800200e:	2b1c      	cmp	r3, #28
 8002010:	dc00      	bgt.n	8002014 <__aeabi_ddiv+0x4c0>
 8002012:	e72e      	b.n	8001e72 <__aeabi_ddiv+0x31e>
 8002014:	0023      	movs	r3, r4
 8002016:	3808      	subs	r0, #8
 8002018:	4083      	lsls	r3, r0
 800201a:	4699      	mov	r9, r3
 800201c:	2300      	movs	r3, #0
 800201e:	4698      	mov	r8, r3
 8002020:	e736      	b.n	8001e90 <__aeabi_ddiv+0x33c>
 8002022:	f001 f92d 	bl	8003280 <__clzsi2>
 8002026:	0002      	movs	r2, r0
 8002028:	0003      	movs	r3, r0
 800202a:	3215      	adds	r2, #21
 800202c:	3320      	adds	r3, #32
 800202e:	2a1c      	cmp	r2, #28
 8002030:	dc00      	bgt.n	8002034 <__aeabi_ddiv+0x4e0>
 8002032:	e6fb      	b.n	8001e2c <__aeabi_ddiv+0x2d8>
 8002034:	9900      	ldr	r1, [sp, #0]
 8002036:	3808      	subs	r0, #8
 8002038:	4081      	lsls	r1, r0
 800203a:	2200      	movs	r2, #0
 800203c:	468b      	mov	fp, r1
 800203e:	e702      	b.n	8001e46 <__aeabi_ddiv+0x2f2>
 8002040:	9900      	ldr	r1, [sp, #0]
 8002042:	3b01      	subs	r3, #1
 8002044:	468c      	mov	ip, r1
 8002046:	4464      	add	r4, ip
 8002048:	42a1      	cmp	r1, r4
 800204a:	d900      	bls.n	800204e <__aeabi_ddiv+0x4fa>
 800204c:	e69a      	b.n	8001d84 <__aeabi_ddiv+0x230>
 800204e:	42a2      	cmp	r2, r4
 8002050:	d800      	bhi.n	8002054 <__aeabi_ddiv+0x500>
 8002052:	e697      	b.n	8001d84 <__aeabi_ddiv+0x230>
 8002054:	1e83      	subs	r3, r0, #2
 8002056:	4464      	add	r4, ip
 8002058:	e694      	b.n	8001d84 <__aeabi_ddiv+0x230>
 800205a:	46ac      	mov	ip, r5
 800205c:	4461      	add	r1, ip
 800205e:	3f01      	subs	r7, #1
 8002060:	428d      	cmp	r5, r1
 8002062:	d900      	bls.n	8002066 <__aeabi_ddiv+0x512>
 8002064:	e680      	b.n	8001d68 <__aeabi_ddiv+0x214>
 8002066:	428a      	cmp	r2, r1
 8002068:	d800      	bhi.n	800206c <__aeabi_ddiv+0x518>
 800206a:	e67d      	b.n	8001d68 <__aeabi_ddiv+0x214>
 800206c:	1e87      	subs	r7, r0, #2
 800206e:	4461      	add	r1, ip
 8002070:	e67a      	b.n	8001d68 <__aeabi_ddiv+0x214>
 8002072:	4285      	cmp	r5, r0
 8002074:	d000      	beq.n	8002078 <__aeabi_ddiv+0x524>
 8002076:	e65f      	b.n	8001d38 <__aeabi_ddiv+0x1e4>
 8002078:	45b9      	cmp	r9, r7
 800207a:	d900      	bls.n	800207e <__aeabi_ddiv+0x52a>
 800207c:	e65c      	b.n	8001d38 <__aeabi_ddiv+0x1e4>
 800207e:	e656      	b.n	8001d2e <__aeabi_ddiv+0x1da>
 8002080:	42a2      	cmp	r2, r4
 8002082:	d800      	bhi.n	8002086 <__aeabi_ddiv+0x532>
 8002084:	e61a      	b.n	8001cbc <__aeabi_ddiv+0x168>
 8002086:	1e83      	subs	r3, r0, #2
 8002088:	4464      	add	r4, ip
 800208a:	e617      	b.n	8001cbc <__aeabi_ddiv+0x168>
 800208c:	428a      	cmp	r2, r1
 800208e:	d800      	bhi.n	8002092 <__aeabi_ddiv+0x53e>
 8002090:	e600      	b.n	8001c94 <__aeabi_ddiv+0x140>
 8002092:	46ac      	mov	ip, r5
 8002094:	1e83      	subs	r3, r0, #2
 8002096:	4698      	mov	r8, r3
 8002098:	4461      	add	r1, ip
 800209a:	e5fb      	b.n	8001c94 <__aeabi_ddiv+0x140>
 800209c:	4837      	ldr	r0, [pc, #220]	@ (800217c <__aeabi_ddiv+0x628>)
 800209e:	0014      	movs	r4, r2
 80020a0:	4450      	add	r0, sl
 80020a2:	4082      	lsls	r2, r0
 80020a4:	465b      	mov	r3, fp
 80020a6:	0017      	movs	r7, r2
 80020a8:	4083      	lsls	r3, r0
 80020aa:	40cc      	lsrs	r4, r1
 80020ac:	1e7a      	subs	r2, r7, #1
 80020ae:	4197      	sbcs	r7, r2
 80020b0:	4323      	orrs	r3, r4
 80020b2:	433b      	orrs	r3, r7
 80020b4:	001a      	movs	r2, r3
 80020b6:	465b      	mov	r3, fp
 80020b8:	40cb      	lsrs	r3, r1
 80020ba:	0751      	lsls	r1, r2, #29
 80020bc:	d009      	beq.n	80020d2 <__aeabi_ddiv+0x57e>
 80020be:	210f      	movs	r1, #15
 80020c0:	4011      	ands	r1, r2
 80020c2:	2904      	cmp	r1, #4
 80020c4:	d005      	beq.n	80020d2 <__aeabi_ddiv+0x57e>
 80020c6:	1d11      	adds	r1, r2, #4
 80020c8:	4291      	cmp	r1, r2
 80020ca:	4192      	sbcs	r2, r2
 80020cc:	4252      	negs	r2, r2
 80020ce:	189b      	adds	r3, r3, r2
 80020d0:	000a      	movs	r2, r1
 80020d2:	0219      	lsls	r1, r3, #8
 80020d4:	d400      	bmi.n	80020d8 <__aeabi_ddiv+0x584>
 80020d6:	e755      	b.n	8001f84 <__aeabi_ddiv+0x430>
 80020d8:	2200      	movs	r2, #0
 80020da:	2301      	movs	r3, #1
 80020dc:	2400      	movs	r4, #0
 80020de:	4690      	mov	r8, r2
 80020e0:	e598      	b.n	8001c14 <__aeabi_ddiv+0xc0>
 80020e2:	000a      	movs	r2, r1
 80020e4:	42bc      	cmp	r4, r7
 80020e6:	d000      	beq.n	80020ea <__aeabi_ddiv+0x596>
 80020e8:	e66e      	b.n	8001dc8 <__aeabi_ddiv+0x274>
 80020ea:	454b      	cmp	r3, r9
 80020ec:	d000      	beq.n	80020f0 <__aeabi_ddiv+0x59c>
 80020ee:	e66b      	b.n	8001dc8 <__aeabi_ddiv+0x274>
 80020f0:	e66c      	b.n	8001dcc <__aeabi_ddiv+0x278>
 80020f2:	4b23      	ldr	r3, [pc, #140]	@ (8002180 <__aeabi_ddiv+0x62c>)
 80020f4:	4a23      	ldr	r2, [pc, #140]	@ (8002184 <__aeabi_ddiv+0x630>)
 80020f6:	4453      	add	r3, sl
 80020f8:	4592      	cmp	sl, r2
 80020fa:	da00      	bge.n	80020fe <__aeabi_ddiv+0x5aa>
 80020fc:	e718      	b.n	8001f30 <__aeabi_ddiv+0x3dc>
 80020fe:	2101      	movs	r1, #1
 8002100:	4249      	negs	r1, r1
 8002102:	1d0a      	adds	r2, r1, #4
 8002104:	428a      	cmp	r2, r1
 8002106:	4189      	sbcs	r1, r1
 8002108:	4249      	negs	r1, r1
 800210a:	448b      	add	fp, r1
 800210c:	e666      	b.n	8001ddc <__aeabi_ddiv+0x288>
 800210e:	210f      	movs	r1, #15
 8002110:	4011      	ands	r1, r2
 8002112:	2904      	cmp	r1, #4
 8002114:	d100      	bne.n	8002118 <__aeabi_ddiv+0x5c4>
 8002116:	e661      	b.n	8001ddc <__aeabi_ddiv+0x288>
 8002118:	0011      	movs	r1, r2
 800211a:	e7f2      	b.n	8002102 <__aeabi_ddiv+0x5ae>
 800211c:	42bc      	cmp	r4, r7
 800211e:	d800      	bhi.n	8002122 <__aeabi_ddiv+0x5ce>
 8002120:	e60a      	b.n	8001d38 <__aeabi_ddiv+0x1e4>
 8002122:	2302      	movs	r3, #2
 8002124:	425b      	negs	r3, r3
 8002126:	469c      	mov	ip, r3
 8002128:	9900      	ldr	r1, [sp, #0]
 800212a:	444f      	add	r7, r9
 800212c:	454f      	cmp	r7, r9
 800212e:	419b      	sbcs	r3, r3
 8002130:	44e3      	add	fp, ip
 8002132:	468c      	mov	ip, r1
 8002134:	425b      	negs	r3, r3
 8002136:	4463      	add	r3, ip
 8002138:	18c0      	adds	r0, r0, r3
 800213a:	e5ff      	b.n	8001d3c <__aeabi_ddiv+0x1e8>
 800213c:	4649      	mov	r1, r9
 800213e:	9d00      	ldr	r5, [sp, #0]
 8002140:	0048      	lsls	r0, r1, #1
 8002142:	4548      	cmp	r0, r9
 8002144:	4189      	sbcs	r1, r1
 8002146:	46ac      	mov	ip, r5
 8002148:	4249      	negs	r1, r1
 800214a:	4461      	add	r1, ip
 800214c:	4681      	mov	r9, r0
 800214e:	3a02      	subs	r2, #2
 8002150:	1864      	adds	r4, r4, r1
 8002152:	e7c7      	b.n	80020e4 <__aeabi_ddiv+0x590>
 8002154:	2480      	movs	r4, #128	@ 0x80
 8002156:	465b      	mov	r3, fp
 8002158:	0324      	lsls	r4, r4, #12
 800215a:	431c      	orrs	r4, r3
 800215c:	0324      	lsls	r4, r4, #12
 800215e:	4690      	mov	r8, r2
 8002160:	4b04      	ldr	r3, [pc, #16]	@ (8002174 <__aeabi_ddiv+0x620>)
 8002162:	0b24      	lsrs	r4, r4, #12
 8002164:	e556      	b.n	8001c14 <__aeabi_ddiv+0xc0>
 8002166:	4599      	cmp	r9, r3
 8002168:	d3e8      	bcc.n	800213c <__aeabi_ddiv+0x5e8>
 800216a:	000a      	movs	r2, r1
 800216c:	e7bd      	b.n	80020ea <__aeabi_ddiv+0x596>
 800216e:	2300      	movs	r3, #0
 8002170:	e708      	b.n	8001f84 <__aeabi_ddiv+0x430>
 8002172:	46c0      	nop			@ (mov r8, r8)
 8002174:	000007ff 	.word	0x000007ff
 8002178:	0000043e 	.word	0x0000043e
 800217c:	0000041e 	.word	0x0000041e
 8002180:	000003ff 	.word	0x000003ff
 8002184:	fffffc02 	.word	0xfffffc02

08002188 <__eqdf2>:
 8002188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800218a:	4657      	mov	r7, sl
 800218c:	46de      	mov	lr, fp
 800218e:	464e      	mov	r6, r9
 8002190:	4645      	mov	r5, r8
 8002192:	b5e0      	push	{r5, r6, r7, lr}
 8002194:	000d      	movs	r5, r1
 8002196:	0004      	movs	r4, r0
 8002198:	0fe8      	lsrs	r0, r5, #31
 800219a:	4683      	mov	fp, r0
 800219c:	0309      	lsls	r1, r1, #12
 800219e:	0fd8      	lsrs	r0, r3, #31
 80021a0:	0b09      	lsrs	r1, r1, #12
 80021a2:	4682      	mov	sl, r0
 80021a4:	4819      	ldr	r0, [pc, #100]	@ (800220c <__eqdf2+0x84>)
 80021a6:	468c      	mov	ip, r1
 80021a8:	031f      	lsls	r7, r3, #12
 80021aa:	0069      	lsls	r1, r5, #1
 80021ac:	005e      	lsls	r6, r3, #1
 80021ae:	0d49      	lsrs	r1, r1, #21
 80021b0:	0b3f      	lsrs	r7, r7, #12
 80021b2:	0d76      	lsrs	r6, r6, #21
 80021b4:	4281      	cmp	r1, r0
 80021b6:	d018      	beq.n	80021ea <__eqdf2+0x62>
 80021b8:	4286      	cmp	r6, r0
 80021ba:	d00f      	beq.n	80021dc <__eqdf2+0x54>
 80021bc:	2001      	movs	r0, #1
 80021be:	42b1      	cmp	r1, r6
 80021c0:	d10d      	bne.n	80021de <__eqdf2+0x56>
 80021c2:	45bc      	cmp	ip, r7
 80021c4:	d10b      	bne.n	80021de <__eqdf2+0x56>
 80021c6:	4294      	cmp	r4, r2
 80021c8:	d109      	bne.n	80021de <__eqdf2+0x56>
 80021ca:	45d3      	cmp	fp, sl
 80021cc:	d01c      	beq.n	8002208 <__eqdf2+0x80>
 80021ce:	2900      	cmp	r1, #0
 80021d0:	d105      	bne.n	80021de <__eqdf2+0x56>
 80021d2:	4660      	mov	r0, ip
 80021d4:	4320      	orrs	r0, r4
 80021d6:	1e43      	subs	r3, r0, #1
 80021d8:	4198      	sbcs	r0, r3
 80021da:	e000      	b.n	80021de <__eqdf2+0x56>
 80021dc:	2001      	movs	r0, #1
 80021de:	bcf0      	pop	{r4, r5, r6, r7}
 80021e0:	46bb      	mov	fp, r7
 80021e2:	46b2      	mov	sl, r6
 80021e4:	46a9      	mov	r9, r5
 80021e6:	46a0      	mov	r8, r4
 80021e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ea:	2001      	movs	r0, #1
 80021ec:	428e      	cmp	r6, r1
 80021ee:	d1f6      	bne.n	80021de <__eqdf2+0x56>
 80021f0:	4661      	mov	r1, ip
 80021f2:	4339      	orrs	r1, r7
 80021f4:	000f      	movs	r7, r1
 80021f6:	4317      	orrs	r7, r2
 80021f8:	4327      	orrs	r7, r4
 80021fa:	d1f0      	bne.n	80021de <__eqdf2+0x56>
 80021fc:	465b      	mov	r3, fp
 80021fe:	4652      	mov	r2, sl
 8002200:	1a98      	subs	r0, r3, r2
 8002202:	1e43      	subs	r3, r0, #1
 8002204:	4198      	sbcs	r0, r3
 8002206:	e7ea      	b.n	80021de <__eqdf2+0x56>
 8002208:	2000      	movs	r0, #0
 800220a:	e7e8      	b.n	80021de <__eqdf2+0x56>
 800220c:	000007ff 	.word	0x000007ff

08002210 <__gedf2>:
 8002210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002212:	4657      	mov	r7, sl
 8002214:	464e      	mov	r6, r9
 8002216:	4645      	mov	r5, r8
 8002218:	46de      	mov	lr, fp
 800221a:	b5e0      	push	{r5, r6, r7, lr}
 800221c:	000d      	movs	r5, r1
 800221e:	030f      	lsls	r7, r1, #12
 8002220:	0b39      	lsrs	r1, r7, #12
 8002222:	b083      	sub	sp, #12
 8002224:	0004      	movs	r4, r0
 8002226:	4680      	mov	r8, r0
 8002228:	9101      	str	r1, [sp, #4]
 800222a:	0058      	lsls	r0, r3, #1
 800222c:	0fe9      	lsrs	r1, r5, #31
 800222e:	4f31      	ldr	r7, [pc, #196]	@ (80022f4 <__gedf2+0xe4>)
 8002230:	0d40      	lsrs	r0, r0, #21
 8002232:	468c      	mov	ip, r1
 8002234:	006e      	lsls	r6, r5, #1
 8002236:	0319      	lsls	r1, r3, #12
 8002238:	4682      	mov	sl, r0
 800223a:	4691      	mov	r9, r2
 800223c:	0d76      	lsrs	r6, r6, #21
 800223e:	0b09      	lsrs	r1, r1, #12
 8002240:	0fd8      	lsrs	r0, r3, #31
 8002242:	42be      	cmp	r6, r7
 8002244:	d01f      	beq.n	8002286 <__gedf2+0x76>
 8002246:	45ba      	cmp	sl, r7
 8002248:	d00f      	beq.n	800226a <__gedf2+0x5a>
 800224a:	2e00      	cmp	r6, #0
 800224c:	d12f      	bne.n	80022ae <__gedf2+0x9e>
 800224e:	4655      	mov	r5, sl
 8002250:	9e01      	ldr	r6, [sp, #4]
 8002252:	4334      	orrs	r4, r6
 8002254:	2d00      	cmp	r5, #0
 8002256:	d127      	bne.n	80022a8 <__gedf2+0x98>
 8002258:	430a      	orrs	r2, r1
 800225a:	d03a      	beq.n	80022d2 <__gedf2+0xc2>
 800225c:	2c00      	cmp	r4, #0
 800225e:	d145      	bne.n	80022ec <__gedf2+0xdc>
 8002260:	2800      	cmp	r0, #0
 8002262:	d11a      	bne.n	800229a <__gedf2+0x8a>
 8002264:	2001      	movs	r0, #1
 8002266:	4240      	negs	r0, r0
 8002268:	e017      	b.n	800229a <__gedf2+0x8a>
 800226a:	4311      	orrs	r1, r2
 800226c:	d13b      	bne.n	80022e6 <__gedf2+0xd6>
 800226e:	2e00      	cmp	r6, #0
 8002270:	d102      	bne.n	8002278 <__gedf2+0x68>
 8002272:	9f01      	ldr	r7, [sp, #4]
 8002274:	4327      	orrs	r7, r4
 8002276:	d0f3      	beq.n	8002260 <__gedf2+0x50>
 8002278:	4584      	cmp	ip, r0
 800227a:	d109      	bne.n	8002290 <__gedf2+0x80>
 800227c:	4663      	mov	r3, ip
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <__gedf2+0x54>
 8002282:	4660      	mov	r0, ip
 8002284:	e009      	b.n	800229a <__gedf2+0x8a>
 8002286:	9f01      	ldr	r7, [sp, #4]
 8002288:	4327      	orrs	r7, r4
 800228a:	d12c      	bne.n	80022e6 <__gedf2+0xd6>
 800228c:	45b2      	cmp	sl, r6
 800228e:	d024      	beq.n	80022da <__gedf2+0xca>
 8002290:	4663      	mov	r3, ip
 8002292:	2002      	movs	r0, #2
 8002294:	3b01      	subs	r3, #1
 8002296:	4018      	ands	r0, r3
 8002298:	3801      	subs	r0, #1
 800229a:	b003      	add	sp, #12
 800229c:	bcf0      	pop	{r4, r5, r6, r7}
 800229e:	46bb      	mov	fp, r7
 80022a0:	46b2      	mov	sl, r6
 80022a2:	46a9      	mov	r9, r5
 80022a4:	46a0      	mov	r8, r4
 80022a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a8:	2c00      	cmp	r4, #0
 80022aa:	d0d9      	beq.n	8002260 <__gedf2+0x50>
 80022ac:	e7e4      	b.n	8002278 <__gedf2+0x68>
 80022ae:	4654      	mov	r4, sl
 80022b0:	2c00      	cmp	r4, #0
 80022b2:	d0ed      	beq.n	8002290 <__gedf2+0x80>
 80022b4:	4584      	cmp	ip, r0
 80022b6:	d1eb      	bne.n	8002290 <__gedf2+0x80>
 80022b8:	4556      	cmp	r6, sl
 80022ba:	dce9      	bgt.n	8002290 <__gedf2+0x80>
 80022bc:	dbde      	blt.n	800227c <__gedf2+0x6c>
 80022be:	9b01      	ldr	r3, [sp, #4]
 80022c0:	428b      	cmp	r3, r1
 80022c2:	d8e5      	bhi.n	8002290 <__gedf2+0x80>
 80022c4:	d1da      	bne.n	800227c <__gedf2+0x6c>
 80022c6:	45c8      	cmp	r8, r9
 80022c8:	d8e2      	bhi.n	8002290 <__gedf2+0x80>
 80022ca:	2000      	movs	r0, #0
 80022cc:	45c8      	cmp	r8, r9
 80022ce:	d2e4      	bcs.n	800229a <__gedf2+0x8a>
 80022d0:	e7d4      	b.n	800227c <__gedf2+0x6c>
 80022d2:	2000      	movs	r0, #0
 80022d4:	2c00      	cmp	r4, #0
 80022d6:	d0e0      	beq.n	800229a <__gedf2+0x8a>
 80022d8:	e7da      	b.n	8002290 <__gedf2+0x80>
 80022da:	4311      	orrs	r1, r2
 80022dc:	d103      	bne.n	80022e6 <__gedf2+0xd6>
 80022de:	4584      	cmp	ip, r0
 80022e0:	d1d6      	bne.n	8002290 <__gedf2+0x80>
 80022e2:	2000      	movs	r0, #0
 80022e4:	e7d9      	b.n	800229a <__gedf2+0x8a>
 80022e6:	2002      	movs	r0, #2
 80022e8:	4240      	negs	r0, r0
 80022ea:	e7d6      	b.n	800229a <__gedf2+0x8a>
 80022ec:	4584      	cmp	ip, r0
 80022ee:	d0e6      	beq.n	80022be <__gedf2+0xae>
 80022f0:	e7ce      	b.n	8002290 <__gedf2+0x80>
 80022f2:	46c0      	nop			@ (mov r8, r8)
 80022f4:	000007ff 	.word	0x000007ff

080022f8 <__ledf2>:
 80022f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022fa:	4657      	mov	r7, sl
 80022fc:	464e      	mov	r6, r9
 80022fe:	4645      	mov	r5, r8
 8002300:	46de      	mov	lr, fp
 8002302:	b5e0      	push	{r5, r6, r7, lr}
 8002304:	000d      	movs	r5, r1
 8002306:	030f      	lsls	r7, r1, #12
 8002308:	0004      	movs	r4, r0
 800230a:	4680      	mov	r8, r0
 800230c:	0fe8      	lsrs	r0, r5, #31
 800230e:	0b39      	lsrs	r1, r7, #12
 8002310:	4684      	mov	ip, r0
 8002312:	b083      	sub	sp, #12
 8002314:	0058      	lsls	r0, r3, #1
 8002316:	4f30      	ldr	r7, [pc, #192]	@ (80023d8 <__ledf2+0xe0>)
 8002318:	0d40      	lsrs	r0, r0, #21
 800231a:	9101      	str	r1, [sp, #4]
 800231c:	031e      	lsls	r6, r3, #12
 800231e:	0069      	lsls	r1, r5, #1
 8002320:	4682      	mov	sl, r0
 8002322:	4691      	mov	r9, r2
 8002324:	0d49      	lsrs	r1, r1, #21
 8002326:	0b36      	lsrs	r6, r6, #12
 8002328:	0fd8      	lsrs	r0, r3, #31
 800232a:	42b9      	cmp	r1, r7
 800232c:	d020      	beq.n	8002370 <__ledf2+0x78>
 800232e:	45ba      	cmp	sl, r7
 8002330:	d00f      	beq.n	8002352 <__ledf2+0x5a>
 8002332:	2900      	cmp	r1, #0
 8002334:	d12b      	bne.n	800238e <__ledf2+0x96>
 8002336:	9901      	ldr	r1, [sp, #4]
 8002338:	430c      	orrs	r4, r1
 800233a:	4651      	mov	r1, sl
 800233c:	2900      	cmp	r1, #0
 800233e:	d137      	bne.n	80023b0 <__ledf2+0xb8>
 8002340:	4332      	orrs	r2, r6
 8002342:	d038      	beq.n	80023b6 <__ledf2+0xbe>
 8002344:	2c00      	cmp	r4, #0
 8002346:	d144      	bne.n	80023d2 <__ledf2+0xda>
 8002348:	2800      	cmp	r0, #0
 800234a:	d119      	bne.n	8002380 <__ledf2+0x88>
 800234c:	2001      	movs	r0, #1
 800234e:	4240      	negs	r0, r0
 8002350:	e016      	b.n	8002380 <__ledf2+0x88>
 8002352:	4316      	orrs	r6, r2
 8002354:	d113      	bne.n	800237e <__ledf2+0x86>
 8002356:	2900      	cmp	r1, #0
 8002358:	d102      	bne.n	8002360 <__ledf2+0x68>
 800235a:	9f01      	ldr	r7, [sp, #4]
 800235c:	4327      	orrs	r7, r4
 800235e:	d0f3      	beq.n	8002348 <__ledf2+0x50>
 8002360:	4584      	cmp	ip, r0
 8002362:	d020      	beq.n	80023a6 <__ledf2+0xae>
 8002364:	4663      	mov	r3, ip
 8002366:	2002      	movs	r0, #2
 8002368:	3b01      	subs	r3, #1
 800236a:	4018      	ands	r0, r3
 800236c:	3801      	subs	r0, #1
 800236e:	e007      	b.n	8002380 <__ledf2+0x88>
 8002370:	9f01      	ldr	r7, [sp, #4]
 8002372:	4327      	orrs	r7, r4
 8002374:	d103      	bne.n	800237e <__ledf2+0x86>
 8002376:	458a      	cmp	sl, r1
 8002378:	d1f4      	bne.n	8002364 <__ledf2+0x6c>
 800237a:	4316      	orrs	r6, r2
 800237c:	d01f      	beq.n	80023be <__ledf2+0xc6>
 800237e:	2002      	movs	r0, #2
 8002380:	b003      	add	sp, #12
 8002382:	bcf0      	pop	{r4, r5, r6, r7}
 8002384:	46bb      	mov	fp, r7
 8002386:	46b2      	mov	sl, r6
 8002388:	46a9      	mov	r9, r5
 800238a:	46a0      	mov	r8, r4
 800238c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800238e:	4654      	mov	r4, sl
 8002390:	2c00      	cmp	r4, #0
 8002392:	d0e7      	beq.n	8002364 <__ledf2+0x6c>
 8002394:	4584      	cmp	ip, r0
 8002396:	d1e5      	bne.n	8002364 <__ledf2+0x6c>
 8002398:	4551      	cmp	r1, sl
 800239a:	dce3      	bgt.n	8002364 <__ledf2+0x6c>
 800239c:	db03      	blt.n	80023a6 <__ledf2+0xae>
 800239e:	9b01      	ldr	r3, [sp, #4]
 80023a0:	42b3      	cmp	r3, r6
 80023a2:	d8df      	bhi.n	8002364 <__ledf2+0x6c>
 80023a4:	d00f      	beq.n	80023c6 <__ledf2+0xce>
 80023a6:	4663      	mov	r3, ip
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0cf      	beq.n	800234c <__ledf2+0x54>
 80023ac:	4660      	mov	r0, ip
 80023ae:	e7e7      	b.n	8002380 <__ledf2+0x88>
 80023b0:	2c00      	cmp	r4, #0
 80023b2:	d0c9      	beq.n	8002348 <__ledf2+0x50>
 80023b4:	e7d4      	b.n	8002360 <__ledf2+0x68>
 80023b6:	2000      	movs	r0, #0
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	d0e1      	beq.n	8002380 <__ledf2+0x88>
 80023bc:	e7d2      	b.n	8002364 <__ledf2+0x6c>
 80023be:	4584      	cmp	ip, r0
 80023c0:	d1d0      	bne.n	8002364 <__ledf2+0x6c>
 80023c2:	2000      	movs	r0, #0
 80023c4:	e7dc      	b.n	8002380 <__ledf2+0x88>
 80023c6:	45c8      	cmp	r8, r9
 80023c8:	d8cc      	bhi.n	8002364 <__ledf2+0x6c>
 80023ca:	2000      	movs	r0, #0
 80023cc:	45c8      	cmp	r8, r9
 80023ce:	d2d7      	bcs.n	8002380 <__ledf2+0x88>
 80023d0:	e7e9      	b.n	80023a6 <__ledf2+0xae>
 80023d2:	4584      	cmp	ip, r0
 80023d4:	d0e3      	beq.n	800239e <__ledf2+0xa6>
 80023d6:	e7c5      	b.n	8002364 <__ledf2+0x6c>
 80023d8:	000007ff 	.word	0x000007ff

080023dc <__aeabi_dmul>:
 80023dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023de:	4657      	mov	r7, sl
 80023e0:	46de      	mov	lr, fp
 80023e2:	464e      	mov	r6, r9
 80023e4:	4645      	mov	r5, r8
 80023e6:	b5e0      	push	{r5, r6, r7, lr}
 80023e8:	001f      	movs	r7, r3
 80023ea:	030b      	lsls	r3, r1, #12
 80023ec:	0b1b      	lsrs	r3, r3, #12
 80023ee:	0016      	movs	r6, r2
 80023f0:	469a      	mov	sl, r3
 80023f2:	0fca      	lsrs	r2, r1, #31
 80023f4:	004b      	lsls	r3, r1, #1
 80023f6:	0004      	movs	r4, r0
 80023f8:	4693      	mov	fp, r2
 80023fa:	b087      	sub	sp, #28
 80023fc:	0d5b      	lsrs	r3, r3, #21
 80023fe:	d100      	bne.n	8002402 <__aeabi_dmul+0x26>
 8002400:	e0d5      	b.n	80025ae <__aeabi_dmul+0x1d2>
 8002402:	4abb      	ldr	r2, [pc, #748]	@ (80026f0 <__aeabi_dmul+0x314>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d100      	bne.n	800240a <__aeabi_dmul+0x2e>
 8002408:	e0f8      	b.n	80025fc <__aeabi_dmul+0x220>
 800240a:	4651      	mov	r1, sl
 800240c:	0f42      	lsrs	r2, r0, #29
 800240e:	00c9      	lsls	r1, r1, #3
 8002410:	430a      	orrs	r2, r1
 8002412:	2180      	movs	r1, #128	@ 0x80
 8002414:	0409      	lsls	r1, r1, #16
 8002416:	4311      	orrs	r1, r2
 8002418:	00c2      	lsls	r2, r0, #3
 800241a:	4691      	mov	r9, r2
 800241c:	4ab5      	ldr	r2, [pc, #724]	@ (80026f4 <__aeabi_dmul+0x318>)
 800241e:	468a      	mov	sl, r1
 8002420:	189d      	adds	r5, r3, r2
 8002422:	2300      	movs	r3, #0
 8002424:	4698      	mov	r8, r3
 8002426:	9302      	str	r3, [sp, #8]
 8002428:	033c      	lsls	r4, r7, #12
 800242a:	007b      	lsls	r3, r7, #1
 800242c:	0ffa      	lsrs	r2, r7, #31
 800242e:	0030      	movs	r0, r6
 8002430:	0b24      	lsrs	r4, r4, #12
 8002432:	0d5b      	lsrs	r3, r3, #21
 8002434:	9200      	str	r2, [sp, #0]
 8002436:	d100      	bne.n	800243a <__aeabi_dmul+0x5e>
 8002438:	e096      	b.n	8002568 <__aeabi_dmul+0x18c>
 800243a:	4aad      	ldr	r2, [pc, #692]	@ (80026f0 <__aeabi_dmul+0x314>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d031      	beq.n	80024a4 <__aeabi_dmul+0xc8>
 8002440:	0f72      	lsrs	r2, r6, #29
 8002442:	00e4      	lsls	r4, r4, #3
 8002444:	4322      	orrs	r2, r4
 8002446:	2480      	movs	r4, #128	@ 0x80
 8002448:	0424      	lsls	r4, r4, #16
 800244a:	4314      	orrs	r4, r2
 800244c:	4aa9      	ldr	r2, [pc, #676]	@ (80026f4 <__aeabi_dmul+0x318>)
 800244e:	00f0      	lsls	r0, r6, #3
 8002450:	4694      	mov	ip, r2
 8002452:	4463      	add	r3, ip
 8002454:	195b      	adds	r3, r3, r5
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	9201      	str	r2, [sp, #4]
 800245a:	4642      	mov	r2, r8
 800245c:	2600      	movs	r6, #0
 800245e:	2a0a      	cmp	r2, #10
 8002460:	dc42      	bgt.n	80024e8 <__aeabi_dmul+0x10c>
 8002462:	465a      	mov	r2, fp
 8002464:	9900      	ldr	r1, [sp, #0]
 8002466:	404a      	eors	r2, r1
 8002468:	4693      	mov	fp, r2
 800246a:	4642      	mov	r2, r8
 800246c:	2a02      	cmp	r2, #2
 800246e:	dc32      	bgt.n	80024d6 <__aeabi_dmul+0xfa>
 8002470:	3a01      	subs	r2, #1
 8002472:	2a01      	cmp	r2, #1
 8002474:	d900      	bls.n	8002478 <__aeabi_dmul+0x9c>
 8002476:	e149      	b.n	800270c <__aeabi_dmul+0x330>
 8002478:	2e02      	cmp	r6, #2
 800247a:	d100      	bne.n	800247e <__aeabi_dmul+0xa2>
 800247c:	e0ca      	b.n	8002614 <__aeabi_dmul+0x238>
 800247e:	2e01      	cmp	r6, #1
 8002480:	d13d      	bne.n	80024fe <__aeabi_dmul+0x122>
 8002482:	2300      	movs	r3, #0
 8002484:	2400      	movs	r4, #0
 8002486:	2200      	movs	r2, #0
 8002488:	0010      	movs	r0, r2
 800248a:	465a      	mov	r2, fp
 800248c:	051b      	lsls	r3, r3, #20
 800248e:	4323      	orrs	r3, r4
 8002490:	07d2      	lsls	r2, r2, #31
 8002492:	4313      	orrs	r3, r2
 8002494:	0019      	movs	r1, r3
 8002496:	b007      	add	sp, #28
 8002498:	bcf0      	pop	{r4, r5, r6, r7}
 800249a:	46bb      	mov	fp, r7
 800249c:	46b2      	mov	sl, r6
 800249e:	46a9      	mov	r9, r5
 80024a0:	46a0      	mov	r8, r4
 80024a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024a4:	4b92      	ldr	r3, [pc, #584]	@ (80026f0 <__aeabi_dmul+0x314>)
 80024a6:	4326      	orrs	r6, r4
 80024a8:	18eb      	adds	r3, r5, r3
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d100      	bne.n	80024b0 <__aeabi_dmul+0xd4>
 80024ae:	e0bb      	b.n	8002628 <__aeabi_dmul+0x24c>
 80024b0:	2203      	movs	r2, #3
 80024b2:	4641      	mov	r1, r8
 80024b4:	4311      	orrs	r1, r2
 80024b6:	465a      	mov	r2, fp
 80024b8:	4688      	mov	r8, r1
 80024ba:	9900      	ldr	r1, [sp, #0]
 80024bc:	404a      	eors	r2, r1
 80024be:	2180      	movs	r1, #128	@ 0x80
 80024c0:	0109      	lsls	r1, r1, #4
 80024c2:	468c      	mov	ip, r1
 80024c4:	0029      	movs	r1, r5
 80024c6:	4461      	add	r1, ip
 80024c8:	9101      	str	r1, [sp, #4]
 80024ca:	4641      	mov	r1, r8
 80024cc:	290a      	cmp	r1, #10
 80024ce:	dd00      	ble.n	80024d2 <__aeabi_dmul+0xf6>
 80024d0:	e233      	b.n	800293a <__aeabi_dmul+0x55e>
 80024d2:	4693      	mov	fp, r2
 80024d4:	2603      	movs	r6, #3
 80024d6:	4642      	mov	r2, r8
 80024d8:	2701      	movs	r7, #1
 80024da:	4097      	lsls	r7, r2
 80024dc:	21a6      	movs	r1, #166	@ 0xa6
 80024de:	003a      	movs	r2, r7
 80024e0:	00c9      	lsls	r1, r1, #3
 80024e2:	400a      	ands	r2, r1
 80024e4:	420f      	tst	r7, r1
 80024e6:	d031      	beq.n	800254c <__aeabi_dmul+0x170>
 80024e8:	9e02      	ldr	r6, [sp, #8]
 80024ea:	2e02      	cmp	r6, #2
 80024ec:	d100      	bne.n	80024f0 <__aeabi_dmul+0x114>
 80024ee:	e235      	b.n	800295c <__aeabi_dmul+0x580>
 80024f0:	2e03      	cmp	r6, #3
 80024f2:	d100      	bne.n	80024f6 <__aeabi_dmul+0x11a>
 80024f4:	e1d2      	b.n	800289c <__aeabi_dmul+0x4c0>
 80024f6:	4654      	mov	r4, sl
 80024f8:	4648      	mov	r0, r9
 80024fa:	2e01      	cmp	r6, #1
 80024fc:	d0c1      	beq.n	8002482 <__aeabi_dmul+0xa6>
 80024fe:	9a01      	ldr	r2, [sp, #4]
 8002500:	4b7d      	ldr	r3, [pc, #500]	@ (80026f8 <__aeabi_dmul+0x31c>)
 8002502:	4694      	mov	ip, r2
 8002504:	4463      	add	r3, ip
 8002506:	2b00      	cmp	r3, #0
 8002508:	dc00      	bgt.n	800250c <__aeabi_dmul+0x130>
 800250a:	e0c0      	b.n	800268e <__aeabi_dmul+0x2b2>
 800250c:	0742      	lsls	r2, r0, #29
 800250e:	d009      	beq.n	8002524 <__aeabi_dmul+0x148>
 8002510:	220f      	movs	r2, #15
 8002512:	4002      	ands	r2, r0
 8002514:	2a04      	cmp	r2, #4
 8002516:	d005      	beq.n	8002524 <__aeabi_dmul+0x148>
 8002518:	1d02      	adds	r2, r0, #4
 800251a:	4282      	cmp	r2, r0
 800251c:	4180      	sbcs	r0, r0
 800251e:	4240      	negs	r0, r0
 8002520:	1824      	adds	r4, r4, r0
 8002522:	0010      	movs	r0, r2
 8002524:	01e2      	lsls	r2, r4, #7
 8002526:	d506      	bpl.n	8002536 <__aeabi_dmul+0x15a>
 8002528:	4b74      	ldr	r3, [pc, #464]	@ (80026fc <__aeabi_dmul+0x320>)
 800252a:	9a01      	ldr	r2, [sp, #4]
 800252c:	401c      	ands	r4, r3
 800252e:	2380      	movs	r3, #128	@ 0x80
 8002530:	4694      	mov	ip, r2
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4463      	add	r3, ip
 8002536:	4a72      	ldr	r2, [pc, #456]	@ (8002700 <__aeabi_dmul+0x324>)
 8002538:	4293      	cmp	r3, r2
 800253a:	dc6b      	bgt.n	8002614 <__aeabi_dmul+0x238>
 800253c:	0762      	lsls	r2, r4, #29
 800253e:	08c0      	lsrs	r0, r0, #3
 8002540:	0264      	lsls	r4, r4, #9
 8002542:	055b      	lsls	r3, r3, #21
 8002544:	4302      	orrs	r2, r0
 8002546:	0b24      	lsrs	r4, r4, #12
 8002548:	0d5b      	lsrs	r3, r3, #21
 800254a:	e79d      	b.n	8002488 <__aeabi_dmul+0xac>
 800254c:	2190      	movs	r1, #144	@ 0x90
 800254e:	0089      	lsls	r1, r1, #2
 8002550:	420f      	tst	r7, r1
 8002552:	d163      	bne.n	800261c <__aeabi_dmul+0x240>
 8002554:	2288      	movs	r2, #136	@ 0x88
 8002556:	423a      	tst	r2, r7
 8002558:	d100      	bne.n	800255c <__aeabi_dmul+0x180>
 800255a:	e0d7      	b.n	800270c <__aeabi_dmul+0x330>
 800255c:	9b00      	ldr	r3, [sp, #0]
 800255e:	46a2      	mov	sl, r4
 8002560:	469b      	mov	fp, r3
 8002562:	4681      	mov	r9, r0
 8002564:	9602      	str	r6, [sp, #8]
 8002566:	e7bf      	b.n	80024e8 <__aeabi_dmul+0x10c>
 8002568:	0023      	movs	r3, r4
 800256a:	4333      	orrs	r3, r6
 800256c:	d100      	bne.n	8002570 <__aeabi_dmul+0x194>
 800256e:	e07f      	b.n	8002670 <__aeabi_dmul+0x294>
 8002570:	2c00      	cmp	r4, #0
 8002572:	d100      	bne.n	8002576 <__aeabi_dmul+0x19a>
 8002574:	e1ad      	b.n	80028d2 <__aeabi_dmul+0x4f6>
 8002576:	0020      	movs	r0, r4
 8002578:	f000 fe82 	bl	8003280 <__clzsi2>
 800257c:	0002      	movs	r2, r0
 800257e:	0003      	movs	r3, r0
 8002580:	3a0b      	subs	r2, #11
 8002582:	201d      	movs	r0, #29
 8002584:	0019      	movs	r1, r3
 8002586:	1a82      	subs	r2, r0, r2
 8002588:	0030      	movs	r0, r6
 800258a:	3908      	subs	r1, #8
 800258c:	40d0      	lsrs	r0, r2
 800258e:	408c      	lsls	r4, r1
 8002590:	4304      	orrs	r4, r0
 8002592:	0030      	movs	r0, r6
 8002594:	4088      	lsls	r0, r1
 8002596:	4a5b      	ldr	r2, [pc, #364]	@ (8002704 <__aeabi_dmul+0x328>)
 8002598:	1aeb      	subs	r3, r5, r3
 800259a:	4694      	mov	ip, r2
 800259c:	4463      	add	r3, ip
 800259e:	1c5a      	adds	r2, r3, #1
 80025a0:	9201      	str	r2, [sp, #4]
 80025a2:	4642      	mov	r2, r8
 80025a4:	2600      	movs	r6, #0
 80025a6:	2a0a      	cmp	r2, #10
 80025a8:	dc00      	bgt.n	80025ac <__aeabi_dmul+0x1d0>
 80025aa:	e75a      	b.n	8002462 <__aeabi_dmul+0x86>
 80025ac:	e79c      	b.n	80024e8 <__aeabi_dmul+0x10c>
 80025ae:	4653      	mov	r3, sl
 80025b0:	4303      	orrs	r3, r0
 80025b2:	4699      	mov	r9, r3
 80025b4:	d054      	beq.n	8002660 <__aeabi_dmul+0x284>
 80025b6:	4653      	mov	r3, sl
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d100      	bne.n	80025be <__aeabi_dmul+0x1e2>
 80025bc:	e177      	b.n	80028ae <__aeabi_dmul+0x4d2>
 80025be:	4650      	mov	r0, sl
 80025c0:	f000 fe5e 	bl	8003280 <__clzsi2>
 80025c4:	230b      	movs	r3, #11
 80025c6:	425b      	negs	r3, r3
 80025c8:	469c      	mov	ip, r3
 80025ca:	0002      	movs	r2, r0
 80025cc:	4484      	add	ip, r0
 80025ce:	0011      	movs	r1, r2
 80025d0:	4650      	mov	r0, sl
 80025d2:	3908      	subs	r1, #8
 80025d4:	4088      	lsls	r0, r1
 80025d6:	231d      	movs	r3, #29
 80025d8:	4680      	mov	r8, r0
 80025da:	4660      	mov	r0, ip
 80025dc:	1a1b      	subs	r3, r3, r0
 80025de:	0020      	movs	r0, r4
 80025e0:	40d8      	lsrs	r0, r3
 80025e2:	0003      	movs	r3, r0
 80025e4:	4640      	mov	r0, r8
 80025e6:	4303      	orrs	r3, r0
 80025e8:	469a      	mov	sl, r3
 80025ea:	0023      	movs	r3, r4
 80025ec:	408b      	lsls	r3, r1
 80025ee:	4699      	mov	r9, r3
 80025f0:	2300      	movs	r3, #0
 80025f2:	4d44      	ldr	r5, [pc, #272]	@ (8002704 <__aeabi_dmul+0x328>)
 80025f4:	4698      	mov	r8, r3
 80025f6:	1aad      	subs	r5, r5, r2
 80025f8:	9302      	str	r3, [sp, #8]
 80025fa:	e715      	b.n	8002428 <__aeabi_dmul+0x4c>
 80025fc:	4652      	mov	r2, sl
 80025fe:	4302      	orrs	r2, r0
 8002600:	4691      	mov	r9, r2
 8002602:	d126      	bne.n	8002652 <__aeabi_dmul+0x276>
 8002604:	2200      	movs	r2, #0
 8002606:	001d      	movs	r5, r3
 8002608:	2302      	movs	r3, #2
 800260a:	4692      	mov	sl, r2
 800260c:	3208      	adds	r2, #8
 800260e:	4690      	mov	r8, r2
 8002610:	9302      	str	r3, [sp, #8]
 8002612:	e709      	b.n	8002428 <__aeabi_dmul+0x4c>
 8002614:	2400      	movs	r4, #0
 8002616:	2200      	movs	r2, #0
 8002618:	4b35      	ldr	r3, [pc, #212]	@ (80026f0 <__aeabi_dmul+0x314>)
 800261a:	e735      	b.n	8002488 <__aeabi_dmul+0xac>
 800261c:	2300      	movs	r3, #0
 800261e:	2480      	movs	r4, #128	@ 0x80
 8002620:	469b      	mov	fp, r3
 8002622:	0324      	lsls	r4, r4, #12
 8002624:	4b32      	ldr	r3, [pc, #200]	@ (80026f0 <__aeabi_dmul+0x314>)
 8002626:	e72f      	b.n	8002488 <__aeabi_dmul+0xac>
 8002628:	2202      	movs	r2, #2
 800262a:	4641      	mov	r1, r8
 800262c:	4311      	orrs	r1, r2
 800262e:	2280      	movs	r2, #128	@ 0x80
 8002630:	0112      	lsls	r2, r2, #4
 8002632:	4694      	mov	ip, r2
 8002634:	002a      	movs	r2, r5
 8002636:	4462      	add	r2, ip
 8002638:	4688      	mov	r8, r1
 800263a:	9201      	str	r2, [sp, #4]
 800263c:	290a      	cmp	r1, #10
 800263e:	dd00      	ble.n	8002642 <__aeabi_dmul+0x266>
 8002640:	e752      	b.n	80024e8 <__aeabi_dmul+0x10c>
 8002642:	465a      	mov	r2, fp
 8002644:	2000      	movs	r0, #0
 8002646:	9900      	ldr	r1, [sp, #0]
 8002648:	0004      	movs	r4, r0
 800264a:	404a      	eors	r2, r1
 800264c:	4693      	mov	fp, r2
 800264e:	2602      	movs	r6, #2
 8002650:	e70b      	b.n	800246a <__aeabi_dmul+0x8e>
 8002652:	220c      	movs	r2, #12
 8002654:	001d      	movs	r5, r3
 8002656:	2303      	movs	r3, #3
 8002658:	4681      	mov	r9, r0
 800265a:	4690      	mov	r8, r2
 800265c:	9302      	str	r3, [sp, #8]
 800265e:	e6e3      	b.n	8002428 <__aeabi_dmul+0x4c>
 8002660:	2300      	movs	r3, #0
 8002662:	469a      	mov	sl, r3
 8002664:	3304      	adds	r3, #4
 8002666:	4698      	mov	r8, r3
 8002668:	3b03      	subs	r3, #3
 800266a:	2500      	movs	r5, #0
 800266c:	9302      	str	r3, [sp, #8]
 800266e:	e6db      	b.n	8002428 <__aeabi_dmul+0x4c>
 8002670:	4642      	mov	r2, r8
 8002672:	3301      	adds	r3, #1
 8002674:	431a      	orrs	r2, r3
 8002676:	002b      	movs	r3, r5
 8002678:	4690      	mov	r8, r2
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	9201      	str	r2, [sp, #4]
 800267e:	4642      	mov	r2, r8
 8002680:	2400      	movs	r4, #0
 8002682:	2000      	movs	r0, #0
 8002684:	2601      	movs	r6, #1
 8002686:	2a0a      	cmp	r2, #10
 8002688:	dc00      	bgt.n	800268c <__aeabi_dmul+0x2b0>
 800268a:	e6ea      	b.n	8002462 <__aeabi_dmul+0x86>
 800268c:	e72c      	b.n	80024e8 <__aeabi_dmul+0x10c>
 800268e:	2201      	movs	r2, #1
 8002690:	1ad2      	subs	r2, r2, r3
 8002692:	2a38      	cmp	r2, #56	@ 0x38
 8002694:	dd00      	ble.n	8002698 <__aeabi_dmul+0x2bc>
 8002696:	e6f4      	b.n	8002482 <__aeabi_dmul+0xa6>
 8002698:	2a1f      	cmp	r2, #31
 800269a:	dc00      	bgt.n	800269e <__aeabi_dmul+0x2c2>
 800269c:	e12a      	b.n	80028f4 <__aeabi_dmul+0x518>
 800269e:	211f      	movs	r1, #31
 80026a0:	4249      	negs	r1, r1
 80026a2:	1acb      	subs	r3, r1, r3
 80026a4:	0021      	movs	r1, r4
 80026a6:	40d9      	lsrs	r1, r3
 80026a8:	000b      	movs	r3, r1
 80026aa:	2a20      	cmp	r2, #32
 80026ac:	d005      	beq.n	80026ba <__aeabi_dmul+0x2de>
 80026ae:	4a16      	ldr	r2, [pc, #88]	@ (8002708 <__aeabi_dmul+0x32c>)
 80026b0:	9d01      	ldr	r5, [sp, #4]
 80026b2:	4694      	mov	ip, r2
 80026b4:	4465      	add	r5, ip
 80026b6:	40ac      	lsls	r4, r5
 80026b8:	4320      	orrs	r0, r4
 80026ba:	1e42      	subs	r2, r0, #1
 80026bc:	4190      	sbcs	r0, r2
 80026be:	4318      	orrs	r0, r3
 80026c0:	2307      	movs	r3, #7
 80026c2:	0019      	movs	r1, r3
 80026c4:	2400      	movs	r4, #0
 80026c6:	4001      	ands	r1, r0
 80026c8:	4203      	tst	r3, r0
 80026ca:	d00c      	beq.n	80026e6 <__aeabi_dmul+0x30a>
 80026cc:	230f      	movs	r3, #15
 80026ce:	4003      	ands	r3, r0
 80026d0:	2b04      	cmp	r3, #4
 80026d2:	d100      	bne.n	80026d6 <__aeabi_dmul+0x2fa>
 80026d4:	e140      	b.n	8002958 <__aeabi_dmul+0x57c>
 80026d6:	1d03      	adds	r3, r0, #4
 80026d8:	4283      	cmp	r3, r0
 80026da:	41a4      	sbcs	r4, r4
 80026dc:	0018      	movs	r0, r3
 80026de:	4264      	negs	r4, r4
 80026e0:	0761      	lsls	r1, r4, #29
 80026e2:	0264      	lsls	r4, r4, #9
 80026e4:	0b24      	lsrs	r4, r4, #12
 80026e6:	08c2      	lsrs	r2, r0, #3
 80026e8:	2300      	movs	r3, #0
 80026ea:	430a      	orrs	r2, r1
 80026ec:	e6cc      	b.n	8002488 <__aeabi_dmul+0xac>
 80026ee:	46c0      	nop			@ (mov r8, r8)
 80026f0:	000007ff 	.word	0x000007ff
 80026f4:	fffffc01 	.word	0xfffffc01
 80026f8:	000003ff 	.word	0x000003ff
 80026fc:	feffffff 	.word	0xfeffffff
 8002700:	000007fe 	.word	0x000007fe
 8002704:	fffffc0d 	.word	0xfffffc0d
 8002708:	0000043e 	.word	0x0000043e
 800270c:	4649      	mov	r1, r9
 800270e:	464a      	mov	r2, r9
 8002710:	0409      	lsls	r1, r1, #16
 8002712:	0c09      	lsrs	r1, r1, #16
 8002714:	000d      	movs	r5, r1
 8002716:	0c16      	lsrs	r6, r2, #16
 8002718:	0c02      	lsrs	r2, r0, #16
 800271a:	0400      	lsls	r0, r0, #16
 800271c:	0c00      	lsrs	r0, r0, #16
 800271e:	4345      	muls	r5, r0
 8002720:	46ac      	mov	ip, r5
 8002722:	0005      	movs	r5, r0
 8002724:	4375      	muls	r5, r6
 8002726:	46a8      	mov	r8, r5
 8002728:	0015      	movs	r5, r2
 800272a:	000f      	movs	r7, r1
 800272c:	4375      	muls	r5, r6
 800272e:	9200      	str	r2, [sp, #0]
 8002730:	9502      	str	r5, [sp, #8]
 8002732:	002a      	movs	r2, r5
 8002734:	9d00      	ldr	r5, [sp, #0]
 8002736:	436f      	muls	r7, r5
 8002738:	4665      	mov	r5, ip
 800273a:	0c2d      	lsrs	r5, r5, #16
 800273c:	46a9      	mov	r9, r5
 800273e:	4447      	add	r7, r8
 8002740:	444f      	add	r7, r9
 8002742:	45b8      	cmp	r8, r7
 8002744:	d905      	bls.n	8002752 <__aeabi_dmul+0x376>
 8002746:	0015      	movs	r5, r2
 8002748:	2280      	movs	r2, #128	@ 0x80
 800274a:	0252      	lsls	r2, r2, #9
 800274c:	4690      	mov	r8, r2
 800274e:	4445      	add	r5, r8
 8002750:	9502      	str	r5, [sp, #8]
 8002752:	0c3d      	lsrs	r5, r7, #16
 8002754:	9503      	str	r5, [sp, #12]
 8002756:	4665      	mov	r5, ip
 8002758:	042d      	lsls	r5, r5, #16
 800275a:	043f      	lsls	r7, r7, #16
 800275c:	0c2d      	lsrs	r5, r5, #16
 800275e:	46ac      	mov	ip, r5
 8002760:	003d      	movs	r5, r7
 8002762:	4465      	add	r5, ip
 8002764:	9504      	str	r5, [sp, #16]
 8002766:	0c25      	lsrs	r5, r4, #16
 8002768:	0424      	lsls	r4, r4, #16
 800276a:	0c24      	lsrs	r4, r4, #16
 800276c:	46ac      	mov	ip, r5
 800276e:	0025      	movs	r5, r4
 8002770:	4375      	muls	r5, r6
 8002772:	46a8      	mov	r8, r5
 8002774:	4665      	mov	r5, ip
 8002776:	000f      	movs	r7, r1
 8002778:	4369      	muls	r1, r5
 800277a:	4441      	add	r1, r8
 800277c:	4689      	mov	r9, r1
 800277e:	4367      	muls	r7, r4
 8002780:	0c39      	lsrs	r1, r7, #16
 8002782:	4449      	add	r1, r9
 8002784:	436e      	muls	r6, r5
 8002786:	4588      	cmp	r8, r1
 8002788:	d903      	bls.n	8002792 <__aeabi_dmul+0x3b6>
 800278a:	2280      	movs	r2, #128	@ 0x80
 800278c:	0252      	lsls	r2, r2, #9
 800278e:	4690      	mov	r8, r2
 8002790:	4446      	add	r6, r8
 8002792:	0c0d      	lsrs	r5, r1, #16
 8002794:	46a8      	mov	r8, r5
 8002796:	0035      	movs	r5, r6
 8002798:	4445      	add	r5, r8
 800279a:	9505      	str	r5, [sp, #20]
 800279c:	9d03      	ldr	r5, [sp, #12]
 800279e:	043f      	lsls	r7, r7, #16
 80027a0:	46a8      	mov	r8, r5
 80027a2:	0c3f      	lsrs	r7, r7, #16
 80027a4:	0409      	lsls	r1, r1, #16
 80027a6:	19c9      	adds	r1, r1, r7
 80027a8:	4488      	add	r8, r1
 80027aa:	4645      	mov	r5, r8
 80027ac:	9503      	str	r5, [sp, #12]
 80027ae:	4655      	mov	r5, sl
 80027b0:	042e      	lsls	r6, r5, #16
 80027b2:	0c36      	lsrs	r6, r6, #16
 80027b4:	0c2f      	lsrs	r7, r5, #16
 80027b6:	0035      	movs	r5, r6
 80027b8:	4345      	muls	r5, r0
 80027ba:	4378      	muls	r0, r7
 80027bc:	4681      	mov	r9, r0
 80027be:	0038      	movs	r0, r7
 80027c0:	46a8      	mov	r8, r5
 80027c2:	0c2d      	lsrs	r5, r5, #16
 80027c4:	46aa      	mov	sl, r5
 80027c6:	9a00      	ldr	r2, [sp, #0]
 80027c8:	4350      	muls	r0, r2
 80027ca:	4372      	muls	r2, r6
 80027cc:	444a      	add	r2, r9
 80027ce:	4452      	add	r2, sl
 80027d0:	4591      	cmp	r9, r2
 80027d2:	d903      	bls.n	80027dc <__aeabi_dmul+0x400>
 80027d4:	2580      	movs	r5, #128	@ 0x80
 80027d6:	026d      	lsls	r5, r5, #9
 80027d8:	46a9      	mov	r9, r5
 80027da:	4448      	add	r0, r9
 80027dc:	0c15      	lsrs	r5, r2, #16
 80027de:	46a9      	mov	r9, r5
 80027e0:	4645      	mov	r5, r8
 80027e2:	042d      	lsls	r5, r5, #16
 80027e4:	0c2d      	lsrs	r5, r5, #16
 80027e6:	46a8      	mov	r8, r5
 80027e8:	4665      	mov	r5, ip
 80027ea:	437d      	muls	r5, r7
 80027ec:	0412      	lsls	r2, r2, #16
 80027ee:	4448      	add	r0, r9
 80027f0:	4490      	add	r8, r2
 80027f2:	46a9      	mov	r9, r5
 80027f4:	0032      	movs	r2, r6
 80027f6:	4665      	mov	r5, ip
 80027f8:	4362      	muls	r2, r4
 80027fa:	436e      	muls	r6, r5
 80027fc:	437c      	muls	r4, r7
 80027fe:	0c17      	lsrs	r7, r2, #16
 8002800:	1936      	adds	r6, r6, r4
 8002802:	19bf      	adds	r7, r7, r6
 8002804:	42bc      	cmp	r4, r7
 8002806:	d903      	bls.n	8002810 <__aeabi_dmul+0x434>
 8002808:	2480      	movs	r4, #128	@ 0x80
 800280a:	0264      	lsls	r4, r4, #9
 800280c:	46a4      	mov	ip, r4
 800280e:	44e1      	add	r9, ip
 8002810:	9c02      	ldr	r4, [sp, #8]
 8002812:	9e03      	ldr	r6, [sp, #12]
 8002814:	46a4      	mov	ip, r4
 8002816:	9d05      	ldr	r5, [sp, #20]
 8002818:	4466      	add	r6, ip
 800281a:	428e      	cmp	r6, r1
 800281c:	4189      	sbcs	r1, r1
 800281e:	46ac      	mov	ip, r5
 8002820:	0412      	lsls	r2, r2, #16
 8002822:	043c      	lsls	r4, r7, #16
 8002824:	0c12      	lsrs	r2, r2, #16
 8002826:	18a2      	adds	r2, r4, r2
 8002828:	4462      	add	r2, ip
 800282a:	4249      	negs	r1, r1
 800282c:	1854      	adds	r4, r2, r1
 800282e:	4446      	add	r6, r8
 8002830:	46a4      	mov	ip, r4
 8002832:	4546      	cmp	r6, r8
 8002834:	41a4      	sbcs	r4, r4
 8002836:	4682      	mov	sl, r0
 8002838:	4264      	negs	r4, r4
 800283a:	46a0      	mov	r8, r4
 800283c:	42aa      	cmp	r2, r5
 800283e:	4192      	sbcs	r2, r2
 8002840:	458c      	cmp	ip, r1
 8002842:	4189      	sbcs	r1, r1
 8002844:	44e2      	add	sl, ip
 8002846:	44d0      	add	r8, sl
 8002848:	4249      	negs	r1, r1
 800284a:	4252      	negs	r2, r2
 800284c:	430a      	orrs	r2, r1
 800284e:	45a0      	cmp	r8, r4
 8002850:	41a4      	sbcs	r4, r4
 8002852:	4582      	cmp	sl, r0
 8002854:	4189      	sbcs	r1, r1
 8002856:	4264      	negs	r4, r4
 8002858:	4249      	negs	r1, r1
 800285a:	430c      	orrs	r4, r1
 800285c:	4641      	mov	r1, r8
 800285e:	0c3f      	lsrs	r7, r7, #16
 8002860:	19d2      	adds	r2, r2, r7
 8002862:	1912      	adds	r2, r2, r4
 8002864:	0dcc      	lsrs	r4, r1, #23
 8002866:	9904      	ldr	r1, [sp, #16]
 8002868:	0270      	lsls	r0, r6, #9
 800286a:	4308      	orrs	r0, r1
 800286c:	1e41      	subs	r1, r0, #1
 800286e:	4188      	sbcs	r0, r1
 8002870:	4641      	mov	r1, r8
 8002872:	444a      	add	r2, r9
 8002874:	0df6      	lsrs	r6, r6, #23
 8002876:	0252      	lsls	r2, r2, #9
 8002878:	4330      	orrs	r0, r6
 800287a:	0249      	lsls	r1, r1, #9
 800287c:	4314      	orrs	r4, r2
 800287e:	4308      	orrs	r0, r1
 8002880:	01d2      	lsls	r2, r2, #7
 8002882:	d535      	bpl.n	80028f0 <__aeabi_dmul+0x514>
 8002884:	2201      	movs	r2, #1
 8002886:	0843      	lsrs	r3, r0, #1
 8002888:	4002      	ands	r2, r0
 800288a:	4313      	orrs	r3, r2
 800288c:	07e0      	lsls	r0, r4, #31
 800288e:	4318      	orrs	r0, r3
 8002890:	0864      	lsrs	r4, r4, #1
 8002892:	e634      	b.n	80024fe <__aeabi_dmul+0x122>
 8002894:	9b00      	ldr	r3, [sp, #0]
 8002896:	46a2      	mov	sl, r4
 8002898:	469b      	mov	fp, r3
 800289a:	4681      	mov	r9, r0
 800289c:	2480      	movs	r4, #128	@ 0x80
 800289e:	4653      	mov	r3, sl
 80028a0:	0324      	lsls	r4, r4, #12
 80028a2:	431c      	orrs	r4, r3
 80028a4:	0324      	lsls	r4, r4, #12
 80028a6:	464a      	mov	r2, r9
 80028a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002964 <__aeabi_dmul+0x588>)
 80028aa:	0b24      	lsrs	r4, r4, #12
 80028ac:	e5ec      	b.n	8002488 <__aeabi_dmul+0xac>
 80028ae:	f000 fce7 	bl	8003280 <__clzsi2>
 80028b2:	2315      	movs	r3, #21
 80028b4:	469c      	mov	ip, r3
 80028b6:	4484      	add	ip, r0
 80028b8:	0002      	movs	r2, r0
 80028ba:	4663      	mov	r3, ip
 80028bc:	3220      	adds	r2, #32
 80028be:	2b1c      	cmp	r3, #28
 80028c0:	dc00      	bgt.n	80028c4 <__aeabi_dmul+0x4e8>
 80028c2:	e684      	b.n	80025ce <__aeabi_dmul+0x1f2>
 80028c4:	2300      	movs	r3, #0
 80028c6:	4699      	mov	r9, r3
 80028c8:	0023      	movs	r3, r4
 80028ca:	3808      	subs	r0, #8
 80028cc:	4083      	lsls	r3, r0
 80028ce:	469a      	mov	sl, r3
 80028d0:	e68e      	b.n	80025f0 <__aeabi_dmul+0x214>
 80028d2:	f000 fcd5 	bl	8003280 <__clzsi2>
 80028d6:	0002      	movs	r2, r0
 80028d8:	0003      	movs	r3, r0
 80028da:	3215      	adds	r2, #21
 80028dc:	3320      	adds	r3, #32
 80028de:	2a1c      	cmp	r2, #28
 80028e0:	dc00      	bgt.n	80028e4 <__aeabi_dmul+0x508>
 80028e2:	e64e      	b.n	8002582 <__aeabi_dmul+0x1a6>
 80028e4:	0002      	movs	r2, r0
 80028e6:	0034      	movs	r4, r6
 80028e8:	3a08      	subs	r2, #8
 80028ea:	2000      	movs	r0, #0
 80028ec:	4094      	lsls	r4, r2
 80028ee:	e652      	b.n	8002596 <__aeabi_dmul+0x1ba>
 80028f0:	9301      	str	r3, [sp, #4]
 80028f2:	e604      	b.n	80024fe <__aeabi_dmul+0x122>
 80028f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002968 <__aeabi_dmul+0x58c>)
 80028f6:	0021      	movs	r1, r4
 80028f8:	469c      	mov	ip, r3
 80028fa:	0003      	movs	r3, r0
 80028fc:	9d01      	ldr	r5, [sp, #4]
 80028fe:	40d3      	lsrs	r3, r2
 8002900:	4465      	add	r5, ip
 8002902:	40a9      	lsls	r1, r5
 8002904:	4319      	orrs	r1, r3
 8002906:	0003      	movs	r3, r0
 8002908:	40ab      	lsls	r3, r5
 800290a:	1e58      	subs	r0, r3, #1
 800290c:	4183      	sbcs	r3, r0
 800290e:	4319      	orrs	r1, r3
 8002910:	0008      	movs	r0, r1
 8002912:	40d4      	lsrs	r4, r2
 8002914:	074b      	lsls	r3, r1, #29
 8002916:	d009      	beq.n	800292c <__aeabi_dmul+0x550>
 8002918:	230f      	movs	r3, #15
 800291a:	400b      	ands	r3, r1
 800291c:	2b04      	cmp	r3, #4
 800291e:	d005      	beq.n	800292c <__aeabi_dmul+0x550>
 8002920:	1d0b      	adds	r3, r1, #4
 8002922:	428b      	cmp	r3, r1
 8002924:	4180      	sbcs	r0, r0
 8002926:	4240      	negs	r0, r0
 8002928:	1824      	adds	r4, r4, r0
 800292a:	0018      	movs	r0, r3
 800292c:	0223      	lsls	r3, r4, #8
 800292e:	d400      	bmi.n	8002932 <__aeabi_dmul+0x556>
 8002930:	e6d6      	b.n	80026e0 <__aeabi_dmul+0x304>
 8002932:	2301      	movs	r3, #1
 8002934:	2400      	movs	r4, #0
 8002936:	2200      	movs	r2, #0
 8002938:	e5a6      	b.n	8002488 <__aeabi_dmul+0xac>
 800293a:	290f      	cmp	r1, #15
 800293c:	d1aa      	bne.n	8002894 <__aeabi_dmul+0x4b8>
 800293e:	2380      	movs	r3, #128	@ 0x80
 8002940:	4652      	mov	r2, sl
 8002942:	031b      	lsls	r3, r3, #12
 8002944:	421a      	tst	r2, r3
 8002946:	d0a9      	beq.n	800289c <__aeabi_dmul+0x4c0>
 8002948:	421c      	tst	r4, r3
 800294a:	d1a7      	bne.n	800289c <__aeabi_dmul+0x4c0>
 800294c:	431c      	orrs	r4, r3
 800294e:	9b00      	ldr	r3, [sp, #0]
 8002950:	0002      	movs	r2, r0
 8002952:	469b      	mov	fp, r3
 8002954:	4b03      	ldr	r3, [pc, #12]	@ (8002964 <__aeabi_dmul+0x588>)
 8002956:	e597      	b.n	8002488 <__aeabi_dmul+0xac>
 8002958:	2400      	movs	r4, #0
 800295a:	e6c1      	b.n	80026e0 <__aeabi_dmul+0x304>
 800295c:	2400      	movs	r4, #0
 800295e:	4b01      	ldr	r3, [pc, #4]	@ (8002964 <__aeabi_dmul+0x588>)
 8002960:	0022      	movs	r2, r4
 8002962:	e591      	b.n	8002488 <__aeabi_dmul+0xac>
 8002964:	000007ff 	.word	0x000007ff
 8002968:	0000041e 	.word	0x0000041e

0800296c <__aeabi_dsub>:
 800296c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800296e:	464e      	mov	r6, r9
 8002970:	4645      	mov	r5, r8
 8002972:	46de      	mov	lr, fp
 8002974:	4657      	mov	r7, sl
 8002976:	b5e0      	push	{r5, r6, r7, lr}
 8002978:	b085      	sub	sp, #20
 800297a:	9000      	str	r0, [sp, #0]
 800297c:	9101      	str	r1, [sp, #4]
 800297e:	030c      	lsls	r4, r1, #12
 8002980:	004f      	lsls	r7, r1, #1
 8002982:	0fce      	lsrs	r6, r1, #31
 8002984:	0a61      	lsrs	r1, r4, #9
 8002986:	9c00      	ldr	r4, [sp, #0]
 8002988:	46b0      	mov	r8, r6
 800298a:	0f64      	lsrs	r4, r4, #29
 800298c:	430c      	orrs	r4, r1
 800298e:	9900      	ldr	r1, [sp, #0]
 8002990:	0d7f      	lsrs	r7, r7, #21
 8002992:	00c8      	lsls	r0, r1, #3
 8002994:	0011      	movs	r1, r2
 8002996:	001a      	movs	r2, r3
 8002998:	031b      	lsls	r3, r3, #12
 800299a:	469c      	mov	ip, r3
 800299c:	9100      	str	r1, [sp, #0]
 800299e:	9201      	str	r2, [sp, #4]
 80029a0:	0051      	lsls	r1, r2, #1
 80029a2:	0d4b      	lsrs	r3, r1, #21
 80029a4:	4699      	mov	r9, r3
 80029a6:	9b01      	ldr	r3, [sp, #4]
 80029a8:	9d00      	ldr	r5, [sp, #0]
 80029aa:	0fd9      	lsrs	r1, r3, #31
 80029ac:	4663      	mov	r3, ip
 80029ae:	0f6a      	lsrs	r2, r5, #29
 80029b0:	0a5b      	lsrs	r3, r3, #9
 80029b2:	4313      	orrs	r3, r2
 80029b4:	00ea      	lsls	r2, r5, #3
 80029b6:	4694      	mov	ip, r2
 80029b8:	4693      	mov	fp, r2
 80029ba:	4ac1      	ldr	r2, [pc, #772]	@ (8002cc0 <__aeabi_dsub+0x354>)
 80029bc:	9003      	str	r0, [sp, #12]
 80029be:	9302      	str	r3, [sp, #8]
 80029c0:	4591      	cmp	r9, r2
 80029c2:	d100      	bne.n	80029c6 <__aeabi_dsub+0x5a>
 80029c4:	e0cd      	b.n	8002b62 <__aeabi_dsub+0x1f6>
 80029c6:	2501      	movs	r5, #1
 80029c8:	4069      	eors	r1, r5
 80029ca:	464d      	mov	r5, r9
 80029cc:	1b7d      	subs	r5, r7, r5
 80029ce:	46aa      	mov	sl, r5
 80029d0:	428e      	cmp	r6, r1
 80029d2:	d100      	bne.n	80029d6 <__aeabi_dsub+0x6a>
 80029d4:	e080      	b.n	8002ad8 <__aeabi_dsub+0x16c>
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	dc00      	bgt.n	80029dc <__aeabi_dsub+0x70>
 80029da:	e335      	b.n	8003048 <__aeabi_dsub+0x6dc>
 80029dc:	4649      	mov	r1, r9
 80029de:	2900      	cmp	r1, #0
 80029e0:	d100      	bne.n	80029e4 <__aeabi_dsub+0x78>
 80029e2:	e0df      	b.n	8002ba4 <__aeabi_dsub+0x238>
 80029e4:	4297      	cmp	r7, r2
 80029e6:	d100      	bne.n	80029ea <__aeabi_dsub+0x7e>
 80029e8:	e194      	b.n	8002d14 <__aeabi_dsub+0x3a8>
 80029ea:	4652      	mov	r2, sl
 80029ec:	2501      	movs	r5, #1
 80029ee:	2a38      	cmp	r2, #56	@ 0x38
 80029f0:	dc19      	bgt.n	8002a26 <__aeabi_dsub+0xba>
 80029f2:	2280      	movs	r2, #128	@ 0x80
 80029f4:	9b02      	ldr	r3, [sp, #8]
 80029f6:	0412      	lsls	r2, r2, #16
 80029f8:	4313      	orrs	r3, r2
 80029fa:	9302      	str	r3, [sp, #8]
 80029fc:	4652      	mov	r2, sl
 80029fe:	2a1f      	cmp	r2, #31
 8002a00:	dd00      	ble.n	8002a04 <__aeabi_dsub+0x98>
 8002a02:	e1e3      	b.n	8002dcc <__aeabi_dsub+0x460>
 8002a04:	4653      	mov	r3, sl
 8002a06:	2220      	movs	r2, #32
 8002a08:	4661      	mov	r1, ip
 8002a0a:	9d02      	ldr	r5, [sp, #8]
 8002a0c:	1ad2      	subs	r2, r2, r3
 8002a0e:	4095      	lsls	r5, r2
 8002a10:	40d9      	lsrs	r1, r3
 8002a12:	430d      	orrs	r5, r1
 8002a14:	4661      	mov	r1, ip
 8002a16:	4091      	lsls	r1, r2
 8002a18:	000a      	movs	r2, r1
 8002a1a:	1e51      	subs	r1, r2, #1
 8002a1c:	418a      	sbcs	r2, r1
 8002a1e:	4315      	orrs	r5, r2
 8002a20:	9a02      	ldr	r2, [sp, #8]
 8002a22:	40da      	lsrs	r2, r3
 8002a24:	1aa4      	subs	r4, r4, r2
 8002a26:	1b45      	subs	r5, r0, r5
 8002a28:	42a8      	cmp	r0, r5
 8002a2a:	4180      	sbcs	r0, r0
 8002a2c:	4240      	negs	r0, r0
 8002a2e:	1a24      	subs	r4, r4, r0
 8002a30:	0223      	lsls	r3, r4, #8
 8002a32:	d400      	bmi.n	8002a36 <__aeabi_dsub+0xca>
 8002a34:	e13d      	b.n	8002cb2 <__aeabi_dsub+0x346>
 8002a36:	0264      	lsls	r4, r4, #9
 8002a38:	0a64      	lsrs	r4, r4, #9
 8002a3a:	2c00      	cmp	r4, #0
 8002a3c:	d100      	bne.n	8002a40 <__aeabi_dsub+0xd4>
 8002a3e:	e147      	b.n	8002cd0 <__aeabi_dsub+0x364>
 8002a40:	0020      	movs	r0, r4
 8002a42:	f000 fc1d 	bl	8003280 <__clzsi2>
 8002a46:	0003      	movs	r3, r0
 8002a48:	3b08      	subs	r3, #8
 8002a4a:	2120      	movs	r1, #32
 8002a4c:	0028      	movs	r0, r5
 8002a4e:	1aca      	subs	r2, r1, r3
 8002a50:	40d0      	lsrs	r0, r2
 8002a52:	409c      	lsls	r4, r3
 8002a54:	0002      	movs	r2, r0
 8002a56:	409d      	lsls	r5, r3
 8002a58:	4322      	orrs	r2, r4
 8002a5a:	429f      	cmp	r7, r3
 8002a5c:	dd00      	ble.n	8002a60 <__aeabi_dsub+0xf4>
 8002a5e:	e177      	b.n	8002d50 <__aeabi_dsub+0x3e4>
 8002a60:	1bd8      	subs	r0, r3, r7
 8002a62:	3001      	adds	r0, #1
 8002a64:	1a09      	subs	r1, r1, r0
 8002a66:	002c      	movs	r4, r5
 8002a68:	408d      	lsls	r5, r1
 8002a6a:	40c4      	lsrs	r4, r0
 8002a6c:	1e6b      	subs	r3, r5, #1
 8002a6e:	419d      	sbcs	r5, r3
 8002a70:	0013      	movs	r3, r2
 8002a72:	40c2      	lsrs	r2, r0
 8002a74:	408b      	lsls	r3, r1
 8002a76:	4325      	orrs	r5, r4
 8002a78:	2700      	movs	r7, #0
 8002a7a:	0014      	movs	r4, r2
 8002a7c:	431d      	orrs	r5, r3
 8002a7e:	076b      	lsls	r3, r5, #29
 8002a80:	d009      	beq.n	8002a96 <__aeabi_dsub+0x12a>
 8002a82:	230f      	movs	r3, #15
 8002a84:	402b      	ands	r3, r5
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d005      	beq.n	8002a96 <__aeabi_dsub+0x12a>
 8002a8a:	1d2b      	adds	r3, r5, #4
 8002a8c:	42ab      	cmp	r3, r5
 8002a8e:	41ad      	sbcs	r5, r5
 8002a90:	426d      	negs	r5, r5
 8002a92:	1964      	adds	r4, r4, r5
 8002a94:	001d      	movs	r5, r3
 8002a96:	0223      	lsls	r3, r4, #8
 8002a98:	d400      	bmi.n	8002a9c <__aeabi_dsub+0x130>
 8002a9a:	e140      	b.n	8002d1e <__aeabi_dsub+0x3b2>
 8002a9c:	4a88      	ldr	r2, [pc, #544]	@ (8002cc0 <__aeabi_dsub+0x354>)
 8002a9e:	3701      	adds	r7, #1
 8002aa0:	4297      	cmp	r7, r2
 8002aa2:	d100      	bne.n	8002aa6 <__aeabi_dsub+0x13a>
 8002aa4:	e101      	b.n	8002caa <__aeabi_dsub+0x33e>
 8002aa6:	2601      	movs	r6, #1
 8002aa8:	4643      	mov	r3, r8
 8002aaa:	4986      	ldr	r1, [pc, #536]	@ (8002cc4 <__aeabi_dsub+0x358>)
 8002aac:	08ed      	lsrs	r5, r5, #3
 8002aae:	4021      	ands	r1, r4
 8002ab0:	074a      	lsls	r2, r1, #29
 8002ab2:	432a      	orrs	r2, r5
 8002ab4:	057c      	lsls	r4, r7, #21
 8002ab6:	024d      	lsls	r5, r1, #9
 8002ab8:	0b2d      	lsrs	r5, r5, #12
 8002aba:	0d64      	lsrs	r4, r4, #21
 8002abc:	401e      	ands	r6, r3
 8002abe:	0524      	lsls	r4, r4, #20
 8002ac0:	432c      	orrs	r4, r5
 8002ac2:	07f6      	lsls	r6, r6, #31
 8002ac4:	4334      	orrs	r4, r6
 8002ac6:	0010      	movs	r0, r2
 8002ac8:	0021      	movs	r1, r4
 8002aca:	b005      	add	sp, #20
 8002acc:	bcf0      	pop	{r4, r5, r6, r7}
 8002ace:	46bb      	mov	fp, r7
 8002ad0:	46b2      	mov	sl, r6
 8002ad2:	46a9      	mov	r9, r5
 8002ad4:	46a0      	mov	r8, r4
 8002ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ad8:	2d00      	cmp	r5, #0
 8002ada:	dc00      	bgt.n	8002ade <__aeabi_dsub+0x172>
 8002adc:	e2d0      	b.n	8003080 <__aeabi_dsub+0x714>
 8002ade:	4649      	mov	r1, r9
 8002ae0:	2900      	cmp	r1, #0
 8002ae2:	d000      	beq.n	8002ae6 <__aeabi_dsub+0x17a>
 8002ae4:	e0d4      	b.n	8002c90 <__aeabi_dsub+0x324>
 8002ae6:	4661      	mov	r1, ip
 8002ae8:	9b02      	ldr	r3, [sp, #8]
 8002aea:	4319      	orrs	r1, r3
 8002aec:	d100      	bne.n	8002af0 <__aeabi_dsub+0x184>
 8002aee:	e12b      	b.n	8002d48 <__aeabi_dsub+0x3dc>
 8002af0:	1e69      	subs	r1, r5, #1
 8002af2:	2d01      	cmp	r5, #1
 8002af4:	d100      	bne.n	8002af8 <__aeabi_dsub+0x18c>
 8002af6:	e1d9      	b.n	8002eac <__aeabi_dsub+0x540>
 8002af8:	4295      	cmp	r5, r2
 8002afa:	d100      	bne.n	8002afe <__aeabi_dsub+0x192>
 8002afc:	e10a      	b.n	8002d14 <__aeabi_dsub+0x3a8>
 8002afe:	2501      	movs	r5, #1
 8002b00:	2938      	cmp	r1, #56	@ 0x38
 8002b02:	dc17      	bgt.n	8002b34 <__aeabi_dsub+0x1c8>
 8002b04:	468a      	mov	sl, r1
 8002b06:	4653      	mov	r3, sl
 8002b08:	2b1f      	cmp	r3, #31
 8002b0a:	dd00      	ble.n	8002b0e <__aeabi_dsub+0x1a2>
 8002b0c:	e1e7      	b.n	8002ede <__aeabi_dsub+0x572>
 8002b0e:	2220      	movs	r2, #32
 8002b10:	1ad2      	subs	r2, r2, r3
 8002b12:	9b02      	ldr	r3, [sp, #8]
 8002b14:	4661      	mov	r1, ip
 8002b16:	4093      	lsls	r3, r2
 8002b18:	001d      	movs	r5, r3
 8002b1a:	4653      	mov	r3, sl
 8002b1c:	40d9      	lsrs	r1, r3
 8002b1e:	4663      	mov	r3, ip
 8002b20:	4093      	lsls	r3, r2
 8002b22:	001a      	movs	r2, r3
 8002b24:	430d      	orrs	r5, r1
 8002b26:	1e51      	subs	r1, r2, #1
 8002b28:	418a      	sbcs	r2, r1
 8002b2a:	4653      	mov	r3, sl
 8002b2c:	4315      	orrs	r5, r2
 8002b2e:	9a02      	ldr	r2, [sp, #8]
 8002b30:	40da      	lsrs	r2, r3
 8002b32:	18a4      	adds	r4, r4, r2
 8002b34:	182d      	adds	r5, r5, r0
 8002b36:	4285      	cmp	r5, r0
 8002b38:	4180      	sbcs	r0, r0
 8002b3a:	4240      	negs	r0, r0
 8002b3c:	1824      	adds	r4, r4, r0
 8002b3e:	0223      	lsls	r3, r4, #8
 8002b40:	d400      	bmi.n	8002b44 <__aeabi_dsub+0x1d8>
 8002b42:	e0b6      	b.n	8002cb2 <__aeabi_dsub+0x346>
 8002b44:	4b5e      	ldr	r3, [pc, #376]	@ (8002cc0 <__aeabi_dsub+0x354>)
 8002b46:	3701      	adds	r7, #1
 8002b48:	429f      	cmp	r7, r3
 8002b4a:	d100      	bne.n	8002b4e <__aeabi_dsub+0x1e2>
 8002b4c:	e0ad      	b.n	8002caa <__aeabi_dsub+0x33e>
 8002b4e:	2101      	movs	r1, #1
 8002b50:	4b5c      	ldr	r3, [pc, #368]	@ (8002cc4 <__aeabi_dsub+0x358>)
 8002b52:	086a      	lsrs	r2, r5, #1
 8002b54:	401c      	ands	r4, r3
 8002b56:	4029      	ands	r1, r5
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	07e5      	lsls	r5, r4, #31
 8002b5c:	4315      	orrs	r5, r2
 8002b5e:	0864      	lsrs	r4, r4, #1
 8002b60:	e78d      	b.n	8002a7e <__aeabi_dsub+0x112>
 8002b62:	4a59      	ldr	r2, [pc, #356]	@ (8002cc8 <__aeabi_dsub+0x35c>)
 8002b64:	9b02      	ldr	r3, [sp, #8]
 8002b66:	4692      	mov	sl, r2
 8002b68:	4662      	mov	r2, ip
 8002b6a:	44ba      	add	sl, r7
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	d02c      	beq.n	8002bca <__aeabi_dsub+0x25e>
 8002b70:	428e      	cmp	r6, r1
 8002b72:	d02e      	beq.n	8002bd2 <__aeabi_dsub+0x266>
 8002b74:	4652      	mov	r2, sl
 8002b76:	2a00      	cmp	r2, #0
 8002b78:	d060      	beq.n	8002c3c <__aeabi_dsub+0x2d0>
 8002b7a:	2f00      	cmp	r7, #0
 8002b7c:	d100      	bne.n	8002b80 <__aeabi_dsub+0x214>
 8002b7e:	e0db      	b.n	8002d38 <__aeabi_dsub+0x3cc>
 8002b80:	4663      	mov	r3, ip
 8002b82:	000e      	movs	r6, r1
 8002b84:	9c02      	ldr	r4, [sp, #8]
 8002b86:	08d8      	lsrs	r0, r3, #3
 8002b88:	0762      	lsls	r2, r4, #29
 8002b8a:	4302      	orrs	r2, r0
 8002b8c:	08e4      	lsrs	r4, r4, #3
 8002b8e:	0013      	movs	r3, r2
 8002b90:	4323      	orrs	r3, r4
 8002b92:	d100      	bne.n	8002b96 <__aeabi_dsub+0x22a>
 8002b94:	e254      	b.n	8003040 <__aeabi_dsub+0x6d4>
 8002b96:	2580      	movs	r5, #128	@ 0x80
 8002b98:	032d      	lsls	r5, r5, #12
 8002b9a:	4325      	orrs	r5, r4
 8002b9c:	032d      	lsls	r5, r5, #12
 8002b9e:	4c48      	ldr	r4, [pc, #288]	@ (8002cc0 <__aeabi_dsub+0x354>)
 8002ba0:	0b2d      	lsrs	r5, r5, #12
 8002ba2:	e78c      	b.n	8002abe <__aeabi_dsub+0x152>
 8002ba4:	4661      	mov	r1, ip
 8002ba6:	9b02      	ldr	r3, [sp, #8]
 8002ba8:	4319      	orrs	r1, r3
 8002baa:	d100      	bne.n	8002bae <__aeabi_dsub+0x242>
 8002bac:	e0cc      	b.n	8002d48 <__aeabi_dsub+0x3dc>
 8002bae:	0029      	movs	r1, r5
 8002bb0:	3901      	subs	r1, #1
 8002bb2:	2d01      	cmp	r5, #1
 8002bb4:	d100      	bne.n	8002bb8 <__aeabi_dsub+0x24c>
 8002bb6:	e188      	b.n	8002eca <__aeabi_dsub+0x55e>
 8002bb8:	4295      	cmp	r5, r2
 8002bba:	d100      	bne.n	8002bbe <__aeabi_dsub+0x252>
 8002bbc:	e0aa      	b.n	8002d14 <__aeabi_dsub+0x3a8>
 8002bbe:	2501      	movs	r5, #1
 8002bc0:	2938      	cmp	r1, #56	@ 0x38
 8002bc2:	dd00      	ble.n	8002bc6 <__aeabi_dsub+0x25a>
 8002bc4:	e72f      	b.n	8002a26 <__aeabi_dsub+0xba>
 8002bc6:	468a      	mov	sl, r1
 8002bc8:	e718      	b.n	80029fc <__aeabi_dsub+0x90>
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4051      	eors	r1, r2
 8002bce:	428e      	cmp	r6, r1
 8002bd0:	d1d0      	bne.n	8002b74 <__aeabi_dsub+0x208>
 8002bd2:	4653      	mov	r3, sl
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d100      	bne.n	8002bda <__aeabi_dsub+0x26e>
 8002bd8:	e0be      	b.n	8002d58 <__aeabi_dsub+0x3ec>
 8002bda:	2f00      	cmp	r7, #0
 8002bdc:	d000      	beq.n	8002be0 <__aeabi_dsub+0x274>
 8002bde:	e138      	b.n	8002e52 <__aeabi_dsub+0x4e6>
 8002be0:	46ca      	mov	sl, r9
 8002be2:	0022      	movs	r2, r4
 8002be4:	4302      	orrs	r2, r0
 8002be6:	d100      	bne.n	8002bea <__aeabi_dsub+0x27e>
 8002be8:	e1e2      	b.n	8002fb0 <__aeabi_dsub+0x644>
 8002bea:	4653      	mov	r3, sl
 8002bec:	1e59      	subs	r1, r3, #1
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d100      	bne.n	8002bf4 <__aeabi_dsub+0x288>
 8002bf2:	e20d      	b.n	8003010 <__aeabi_dsub+0x6a4>
 8002bf4:	4a32      	ldr	r2, [pc, #200]	@ (8002cc0 <__aeabi_dsub+0x354>)
 8002bf6:	4592      	cmp	sl, r2
 8002bf8:	d100      	bne.n	8002bfc <__aeabi_dsub+0x290>
 8002bfa:	e1d2      	b.n	8002fa2 <__aeabi_dsub+0x636>
 8002bfc:	2701      	movs	r7, #1
 8002bfe:	2938      	cmp	r1, #56	@ 0x38
 8002c00:	dc13      	bgt.n	8002c2a <__aeabi_dsub+0x2be>
 8002c02:	291f      	cmp	r1, #31
 8002c04:	dd00      	ble.n	8002c08 <__aeabi_dsub+0x29c>
 8002c06:	e1ee      	b.n	8002fe6 <__aeabi_dsub+0x67a>
 8002c08:	2220      	movs	r2, #32
 8002c0a:	9b02      	ldr	r3, [sp, #8]
 8002c0c:	1a52      	subs	r2, r2, r1
 8002c0e:	0025      	movs	r5, r4
 8002c10:	0007      	movs	r7, r0
 8002c12:	469a      	mov	sl, r3
 8002c14:	40cc      	lsrs	r4, r1
 8002c16:	4090      	lsls	r0, r2
 8002c18:	4095      	lsls	r5, r2
 8002c1a:	40cf      	lsrs	r7, r1
 8002c1c:	44a2      	add	sl, r4
 8002c1e:	1e42      	subs	r2, r0, #1
 8002c20:	4190      	sbcs	r0, r2
 8002c22:	4653      	mov	r3, sl
 8002c24:	432f      	orrs	r7, r5
 8002c26:	4307      	orrs	r7, r0
 8002c28:	9302      	str	r3, [sp, #8]
 8002c2a:	003d      	movs	r5, r7
 8002c2c:	4465      	add	r5, ip
 8002c2e:	4565      	cmp	r5, ip
 8002c30:	4192      	sbcs	r2, r2
 8002c32:	9b02      	ldr	r3, [sp, #8]
 8002c34:	4252      	negs	r2, r2
 8002c36:	464f      	mov	r7, r9
 8002c38:	18d4      	adds	r4, r2, r3
 8002c3a:	e780      	b.n	8002b3e <__aeabi_dsub+0x1d2>
 8002c3c:	4a23      	ldr	r2, [pc, #140]	@ (8002ccc <__aeabi_dsub+0x360>)
 8002c3e:	1c7d      	adds	r5, r7, #1
 8002c40:	4215      	tst	r5, r2
 8002c42:	d000      	beq.n	8002c46 <__aeabi_dsub+0x2da>
 8002c44:	e0aa      	b.n	8002d9c <__aeabi_dsub+0x430>
 8002c46:	4662      	mov	r2, ip
 8002c48:	0025      	movs	r5, r4
 8002c4a:	9b02      	ldr	r3, [sp, #8]
 8002c4c:	4305      	orrs	r5, r0
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	2f00      	cmp	r7, #0
 8002c52:	d000      	beq.n	8002c56 <__aeabi_dsub+0x2ea>
 8002c54:	e0f5      	b.n	8002e42 <__aeabi_dsub+0x4d6>
 8002c56:	2d00      	cmp	r5, #0
 8002c58:	d100      	bne.n	8002c5c <__aeabi_dsub+0x2f0>
 8002c5a:	e16b      	b.n	8002f34 <__aeabi_dsub+0x5c8>
 8002c5c:	2a00      	cmp	r2, #0
 8002c5e:	d100      	bne.n	8002c62 <__aeabi_dsub+0x2f6>
 8002c60:	e152      	b.n	8002f08 <__aeabi_dsub+0x59c>
 8002c62:	4663      	mov	r3, ip
 8002c64:	1ac5      	subs	r5, r0, r3
 8002c66:	9b02      	ldr	r3, [sp, #8]
 8002c68:	1ae2      	subs	r2, r4, r3
 8002c6a:	42a8      	cmp	r0, r5
 8002c6c:	419b      	sbcs	r3, r3
 8002c6e:	425b      	negs	r3, r3
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	021a      	lsls	r2, r3, #8
 8002c74:	d400      	bmi.n	8002c78 <__aeabi_dsub+0x30c>
 8002c76:	e1d5      	b.n	8003024 <__aeabi_dsub+0x6b8>
 8002c78:	4663      	mov	r3, ip
 8002c7a:	1a1d      	subs	r5, r3, r0
 8002c7c:	45ac      	cmp	ip, r5
 8002c7e:	4192      	sbcs	r2, r2
 8002c80:	2601      	movs	r6, #1
 8002c82:	9b02      	ldr	r3, [sp, #8]
 8002c84:	4252      	negs	r2, r2
 8002c86:	1b1c      	subs	r4, r3, r4
 8002c88:	4688      	mov	r8, r1
 8002c8a:	1aa4      	subs	r4, r4, r2
 8002c8c:	400e      	ands	r6, r1
 8002c8e:	e6f6      	b.n	8002a7e <__aeabi_dsub+0x112>
 8002c90:	4297      	cmp	r7, r2
 8002c92:	d03f      	beq.n	8002d14 <__aeabi_dsub+0x3a8>
 8002c94:	4652      	mov	r2, sl
 8002c96:	2501      	movs	r5, #1
 8002c98:	2a38      	cmp	r2, #56	@ 0x38
 8002c9a:	dd00      	ble.n	8002c9e <__aeabi_dsub+0x332>
 8002c9c:	e74a      	b.n	8002b34 <__aeabi_dsub+0x1c8>
 8002c9e:	2280      	movs	r2, #128	@ 0x80
 8002ca0:	9b02      	ldr	r3, [sp, #8]
 8002ca2:	0412      	lsls	r2, r2, #16
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	9302      	str	r3, [sp, #8]
 8002ca8:	e72d      	b.n	8002b06 <__aeabi_dsub+0x19a>
 8002caa:	003c      	movs	r4, r7
 8002cac:	2500      	movs	r5, #0
 8002cae:	2200      	movs	r2, #0
 8002cb0:	e705      	b.n	8002abe <__aeabi_dsub+0x152>
 8002cb2:	2307      	movs	r3, #7
 8002cb4:	402b      	ands	r3, r5
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d000      	beq.n	8002cbc <__aeabi_dsub+0x350>
 8002cba:	e6e2      	b.n	8002a82 <__aeabi_dsub+0x116>
 8002cbc:	e06b      	b.n	8002d96 <__aeabi_dsub+0x42a>
 8002cbe:	46c0      	nop			@ (mov r8, r8)
 8002cc0:	000007ff 	.word	0x000007ff
 8002cc4:	ff7fffff 	.word	0xff7fffff
 8002cc8:	fffff801 	.word	0xfffff801
 8002ccc:	000007fe 	.word	0x000007fe
 8002cd0:	0028      	movs	r0, r5
 8002cd2:	f000 fad5 	bl	8003280 <__clzsi2>
 8002cd6:	0003      	movs	r3, r0
 8002cd8:	3318      	adds	r3, #24
 8002cda:	2b1f      	cmp	r3, #31
 8002cdc:	dc00      	bgt.n	8002ce0 <__aeabi_dsub+0x374>
 8002cde:	e6b4      	b.n	8002a4a <__aeabi_dsub+0xde>
 8002ce0:	002a      	movs	r2, r5
 8002ce2:	3808      	subs	r0, #8
 8002ce4:	4082      	lsls	r2, r0
 8002ce6:	429f      	cmp	r7, r3
 8002ce8:	dd00      	ble.n	8002cec <__aeabi_dsub+0x380>
 8002cea:	e0b9      	b.n	8002e60 <__aeabi_dsub+0x4f4>
 8002cec:	1bdb      	subs	r3, r3, r7
 8002cee:	1c58      	adds	r0, r3, #1
 8002cf0:	281f      	cmp	r0, #31
 8002cf2:	dc00      	bgt.n	8002cf6 <__aeabi_dsub+0x38a>
 8002cf4:	e1a0      	b.n	8003038 <__aeabi_dsub+0x6cc>
 8002cf6:	0015      	movs	r5, r2
 8002cf8:	3b1f      	subs	r3, #31
 8002cfa:	40dd      	lsrs	r5, r3
 8002cfc:	2820      	cmp	r0, #32
 8002cfe:	d005      	beq.n	8002d0c <__aeabi_dsub+0x3a0>
 8002d00:	2340      	movs	r3, #64	@ 0x40
 8002d02:	1a1b      	subs	r3, r3, r0
 8002d04:	409a      	lsls	r2, r3
 8002d06:	1e53      	subs	r3, r2, #1
 8002d08:	419a      	sbcs	r2, r3
 8002d0a:	4315      	orrs	r5, r2
 8002d0c:	2307      	movs	r3, #7
 8002d0e:	2700      	movs	r7, #0
 8002d10:	402b      	ands	r3, r5
 8002d12:	e7d0      	b.n	8002cb6 <__aeabi_dsub+0x34a>
 8002d14:	08c0      	lsrs	r0, r0, #3
 8002d16:	0762      	lsls	r2, r4, #29
 8002d18:	4302      	orrs	r2, r0
 8002d1a:	08e4      	lsrs	r4, r4, #3
 8002d1c:	e737      	b.n	8002b8e <__aeabi_dsub+0x222>
 8002d1e:	08ea      	lsrs	r2, r5, #3
 8002d20:	0763      	lsls	r3, r4, #29
 8002d22:	431a      	orrs	r2, r3
 8002d24:	4bd3      	ldr	r3, [pc, #844]	@ (8003074 <__aeabi_dsub+0x708>)
 8002d26:	08e4      	lsrs	r4, r4, #3
 8002d28:	429f      	cmp	r7, r3
 8002d2a:	d100      	bne.n	8002d2e <__aeabi_dsub+0x3c2>
 8002d2c:	e72f      	b.n	8002b8e <__aeabi_dsub+0x222>
 8002d2e:	0324      	lsls	r4, r4, #12
 8002d30:	0b25      	lsrs	r5, r4, #12
 8002d32:	057c      	lsls	r4, r7, #21
 8002d34:	0d64      	lsrs	r4, r4, #21
 8002d36:	e6c2      	b.n	8002abe <__aeabi_dsub+0x152>
 8002d38:	46ca      	mov	sl, r9
 8002d3a:	0022      	movs	r2, r4
 8002d3c:	4302      	orrs	r2, r0
 8002d3e:	d158      	bne.n	8002df2 <__aeabi_dsub+0x486>
 8002d40:	4663      	mov	r3, ip
 8002d42:	000e      	movs	r6, r1
 8002d44:	9c02      	ldr	r4, [sp, #8]
 8002d46:	9303      	str	r3, [sp, #12]
 8002d48:	9b03      	ldr	r3, [sp, #12]
 8002d4a:	4657      	mov	r7, sl
 8002d4c:	08da      	lsrs	r2, r3, #3
 8002d4e:	e7e7      	b.n	8002d20 <__aeabi_dsub+0x3b4>
 8002d50:	4cc9      	ldr	r4, [pc, #804]	@ (8003078 <__aeabi_dsub+0x70c>)
 8002d52:	1aff      	subs	r7, r7, r3
 8002d54:	4014      	ands	r4, r2
 8002d56:	e692      	b.n	8002a7e <__aeabi_dsub+0x112>
 8002d58:	4dc8      	ldr	r5, [pc, #800]	@ (800307c <__aeabi_dsub+0x710>)
 8002d5a:	1c7a      	adds	r2, r7, #1
 8002d5c:	422a      	tst	r2, r5
 8002d5e:	d000      	beq.n	8002d62 <__aeabi_dsub+0x3f6>
 8002d60:	e084      	b.n	8002e6c <__aeabi_dsub+0x500>
 8002d62:	0022      	movs	r2, r4
 8002d64:	4302      	orrs	r2, r0
 8002d66:	2f00      	cmp	r7, #0
 8002d68:	d000      	beq.n	8002d6c <__aeabi_dsub+0x400>
 8002d6a:	e0ef      	b.n	8002f4c <__aeabi_dsub+0x5e0>
 8002d6c:	2a00      	cmp	r2, #0
 8002d6e:	d100      	bne.n	8002d72 <__aeabi_dsub+0x406>
 8002d70:	e0e5      	b.n	8002f3e <__aeabi_dsub+0x5d2>
 8002d72:	4662      	mov	r2, ip
 8002d74:	9902      	ldr	r1, [sp, #8]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	d100      	bne.n	8002d7c <__aeabi_dsub+0x410>
 8002d7a:	e0c5      	b.n	8002f08 <__aeabi_dsub+0x59c>
 8002d7c:	4663      	mov	r3, ip
 8002d7e:	18c5      	adds	r5, r0, r3
 8002d80:	468c      	mov	ip, r1
 8002d82:	4285      	cmp	r5, r0
 8002d84:	4180      	sbcs	r0, r0
 8002d86:	4464      	add	r4, ip
 8002d88:	4240      	negs	r0, r0
 8002d8a:	1824      	adds	r4, r4, r0
 8002d8c:	0223      	lsls	r3, r4, #8
 8002d8e:	d502      	bpl.n	8002d96 <__aeabi_dsub+0x42a>
 8002d90:	4bb9      	ldr	r3, [pc, #740]	@ (8003078 <__aeabi_dsub+0x70c>)
 8002d92:	3701      	adds	r7, #1
 8002d94:	401c      	ands	r4, r3
 8002d96:	46ba      	mov	sl, r7
 8002d98:	9503      	str	r5, [sp, #12]
 8002d9a:	e7d5      	b.n	8002d48 <__aeabi_dsub+0x3dc>
 8002d9c:	4662      	mov	r2, ip
 8002d9e:	1a85      	subs	r5, r0, r2
 8002da0:	42a8      	cmp	r0, r5
 8002da2:	4192      	sbcs	r2, r2
 8002da4:	4252      	negs	r2, r2
 8002da6:	4691      	mov	r9, r2
 8002da8:	9b02      	ldr	r3, [sp, #8]
 8002daa:	1ae3      	subs	r3, r4, r3
 8002dac:	001a      	movs	r2, r3
 8002dae:	464b      	mov	r3, r9
 8002db0:	1ad2      	subs	r2, r2, r3
 8002db2:	0013      	movs	r3, r2
 8002db4:	4691      	mov	r9, r2
 8002db6:	021a      	lsls	r2, r3, #8
 8002db8:	d46c      	bmi.n	8002e94 <__aeabi_dsub+0x528>
 8002dba:	464a      	mov	r2, r9
 8002dbc:	464c      	mov	r4, r9
 8002dbe:	432a      	orrs	r2, r5
 8002dc0:	d000      	beq.n	8002dc4 <__aeabi_dsub+0x458>
 8002dc2:	e63a      	b.n	8002a3a <__aeabi_dsub+0xce>
 8002dc4:	2600      	movs	r6, #0
 8002dc6:	2400      	movs	r4, #0
 8002dc8:	2500      	movs	r5, #0
 8002dca:	e678      	b.n	8002abe <__aeabi_dsub+0x152>
 8002dcc:	9902      	ldr	r1, [sp, #8]
 8002dce:	4653      	mov	r3, sl
 8002dd0:	000d      	movs	r5, r1
 8002dd2:	3a20      	subs	r2, #32
 8002dd4:	40d5      	lsrs	r5, r2
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d006      	beq.n	8002de8 <__aeabi_dsub+0x47c>
 8002dda:	2240      	movs	r2, #64	@ 0x40
 8002ddc:	1ad2      	subs	r2, r2, r3
 8002dde:	000b      	movs	r3, r1
 8002de0:	4093      	lsls	r3, r2
 8002de2:	4662      	mov	r2, ip
 8002de4:	431a      	orrs	r2, r3
 8002de6:	4693      	mov	fp, r2
 8002de8:	465b      	mov	r3, fp
 8002dea:	1e5a      	subs	r2, r3, #1
 8002dec:	4193      	sbcs	r3, r2
 8002dee:	431d      	orrs	r5, r3
 8002df0:	e619      	b.n	8002a26 <__aeabi_dsub+0xba>
 8002df2:	4653      	mov	r3, sl
 8002df4:	1e5a      	subs	r2, r3, #1
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d100      	bne.n	8002dfc <__aeabi_dsub+0x490>
 8002dfa:	e0c6      	b.n	8002f8a <__aeabi_dsub+0x61e>
 8002dfc:	4e9d      	ldr	r6, [pc, #628]	@ (8003074 <__aeabi_dsub+0x708>)
 8002dfe:	45b2      	cmp	sl, r6
 8002e00:	d100      	bne.n	8002e04 <__aeabi_dsub+0x498>
 8002e02:	e6bd      	b.n	8002b80 <__aeabi_dsub+0x214>
 8002e04:	4688      	mov	r8, r1
 8002e06:	000e      	movs	r6, r1
 8002e08:	2501      	movs	r5, #1
 8002e0a:	2a38      	cmp	r2, #56	@ 0x38
 8002e0c:	dc10      	bgt.n	8002e30 <__aeabi_dsub+0x4c4>
 8002e0e:	2a1f      	cmp	r2, #31
 8002e10:	dc7f      	bgt.n	8002f12 <__aeabi_dsub+0x5a6>
 8002e12:	2120      	movs	r1, #32
 8002e14:	0025      	movs	r5, r4
 8002e16:	1a89      	subs	r1, r1, r2
 8002e18:	0007      	movs	r7, r0
 8002e1a:	4088      	lsls	r0, r1
 8002e1c:	408d      	lsls	r5, r1
 8002e1e:	40d7      	lsrs	r7, r2
 8002e20:	40d4      	lsrs	r4, r2
 8002e22:	1e41      	subs	r1, r0, #1
 8002e24:	4188      	sbcs	r0, r1
 8002e26:	9b02      	ldr	r3, [sp, #8]
 8002e28:	433d      	orrs	r5, r7
 8002e2a:	1b1b      	subs	r3, r3, r4
 8002e2c:	4305      	orrs	r5, r0
 8002e2e:	9302      	str	r3, [sp, #8]
 8002e30:	4662      	mov	r2, ip
 8002e32:	1b55      	subs	r5, r2, r5
 8002e34:	45ac      	cmp	ip, r5
 8002e36:	4192      	sbcs	r2, r2
 8002e38:	9b02      	ldr	r3, [sp, #8]
 8002e3a:	4252      	negs	r2, r2
 8002e3c:	464f      	mov	r7, r9
 8002e3e:	1a9c      	subs	r4, r3, r2
 8002e40:	e5f6      	b.n	8002a30 <__aeabi_dsub+0xc4>
 8002e42:	2d00      	cmp	r5, #0
 8002e44:	d000      	beq.n	8002e48 <__aeabi_dsub+0x4dc>
 8002e46:	e0b7      	b.n	8002fb8 <__aeabi_dsub+0x64c>
 8002e48:	2a00      	cmp	r2, #0
 8002e4a:	d100      	bne.n	8002e4e <__aeabi_dsub+0x4e2>
 8002e4c:	e0f0      	b.n	8003030 <__aeabi_dsub+0x6c4>
 8002e4e:	2601      	movs	r6, #1
 8002e50:	400e      	ands	r6, r1
 8002e52:	4663      	mov	r3, ip
 8002e54:	9802      	ldr	r0, [sp, #8]
 8002e56:	08d9      	lsrs	r1, r3, #3
 8002e58:	0742      	lsls	r2, r0, #29
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	08c4      	lsrs	r4, r0, #3
 8002e5e:	e696      	b.n	8002b8e <__aeabi_dsub+0x222>
 8002e60:	4c85      	ldr	r4, [pc, #532]	@ (8003078 <__aeabi_dsub+0x70c>)
 8002e62:	1aff      	subs	r7, r7, r3
 8002e64:	4014      	ands	r4, r2
 8002e66:	0762      	lsls	r2, r4, #29
 8002e68:	08e4      	lsrs	r4, r4, #3
 8002e6a:	e760      	b.n	8002d2e <__aeabi_dsub+0x3c2>
 8002e6c:	4981      	ldr	r1, [pc, #516]	@ (8003074 <__aeabi_dsub+0x708>)
 8002e6e:	428a      	cmp	r2, r1
 8002e70:	d100      	bne.n	8002e74 <__aeabi_dsub+0x508>
 8002e72:	e0c9      	b.n	8003008 <__aeabi_dsub+0x69c>
 8002e74:	4663      	mov	r3, ip
 8002e76:	18c1      	adds	r1, r0, r3
 8002e78:	4281      	cmp	r1, r0
 8002e7a:	4180      	sbcs	r0, r0
 8002e7c:	9b02      	ldr	r3, [sp, #8]
 8002e7e:	4240      	negs	r0, r0
 8002e80:	18e3      	adds	r3, r4, r3
 8002e82:	181b      	adds	r3, r3, r0
 8002e84:	07dd      	lsls	r5, r3, #31
 8002e86:	085c      	lsrs	r4, r3, #1
 8002e88:	2307      	movs	r3, #7
 8002e8a:	0849      	lsrs	r1, r1, #1
 8002e8c:	430d      	orrs	r5, r1
 8002e8e:	0017      	movs	r7, r2
 8002e90:	402b      	ands	r3, r5
 8002e92:	e710      	b.n	8002cb6 <__aeabi_dsub+0x34a>
 8002e94:	4663      	mov	r3, ip
 8002e96:	1a1d      	subs	r5, r3, r0
 8002e98:	45ac      	cmp	ip, r5
 8002e9a:	4192      	sbcs	r2, r2
 8002e9c:	2601      	movs	r6, #1
 8002e9e:	9b02      	ldr	r3, [sp, #8]
 8002ea0:	4252      	negs	r2, r2
 8002ea2:	1b1c      	subs	r4, r3, r4
 8002ea4:	4688      	mov	r8, r1
 8002ea6:	1aa4      	subs	r4, r4, r2
 8002ea8:	400e      	ands	r6, r1
 8002eaa:	e5c6      	b.n	8002a3a <__aeabi_dsub+0xce>
 8002eac:	4663      	mov	r3, ip
 8002eae:	18c5      	adds	r5, r0, r3
 8002eb0:	9b02      	ldr	r3, [sp, #8]
 8002eb2:	4285      	cmp	r5, r0
 8002eb4:	4180      	sbcs	r0, r0
 8002eb6:	469c      	mov	ip, r3
 8002eb8:	4240      	negs	r0, r0
 8002eba:	4464      	add	r4, ip
 8002ebc:	1824      	adds	r4, r4, r0
 8002ebe:	2701      	movs	r7, #1
 8002ec0:	0223      	lsls	r3, r4, #8
 8002ec2:	d400      	bmi.n	8002ec6 <__aeabi_dsub+0x55a>
 8002ec4:	e6f5      	b.n	8002cb2 <__aeabi_dsub+0x346>
 8002ec6:	2702      	movs	r7, #2
 8002ec8:	e641      	b.n	8002b4e <__aeabi_dsub+0x1e2>
 8002eca:	4663      	mov	r3, ip
 8002ecc:	1ac5      	subs	r5, r0, r3
 8002ece:	42a8      	cmp	r0, r5
 8002ed0:	4180      	sbcs	r0, r0
 8002ed2:	9b02      	ldr	r3, [sp, #8]
 8002ed4:	4240      	negs	r0, r0
 8002ed6:	1ae4      	subs	r4, r4, r3
 8002ed8:	2701      	movs	r7, #1
 8002eda:	1a24      	subs	r4, r4, r0
 8002edc:	e5a8      	b.n	8002a30 <__aeabi_dsub+0xc4>
 8002ede:	9d02      	ldr	r5, [sp, #8]
 8002ee0:	4652      	mov	r2, sl
 8002ee2:	002b      	movs	r3, r5
 8002ee4:	3a20      	subs	r2, #32
 8002ee6:	40d3      	lsrs	r3, r2
 8002ee8:	0019      	movs	r1, r3
 8002eea:	4653      	mov	r3, sl
 8002eec:	2b20      	cmp	r3, #32
 8002eee:	d006      	beq.n	8002efe <__aeabi_dsub+0x592>
 8002ef0:	2240      	movs	r2, #64	@ 0x40
 8002ef2:	1ad2      	subs	r2, r2, r3
 8002ef4:	002b      	movs	r3, r5
 8002ef6:	4093      	lsls	r3, r2
 8002ef8:	4662      	mov	r2, ip
 8002efa:	431a      	orrs	r2, r3
 8002efc:	4693      	mov	fp, r2
 8002efe:	465d      	mov	r5, fp
 8002f00:	1e6b      	subs	r3, r5, #1
 8002f02:	419d      	sbcs	r5, r3
 8002f04:	430d      	orrs	r5, r1
 8002f06:	e615      	b.n	8002b34 <__aeabi_dsub+0x1c8>
 8002f08:	0762      	lsls	r2, r4, #29
 8002f0a:	08c0      	lsrs	r0, r0, #3
 8002f0c:	4302      	orrs	r2, r0
 8002f0e:	08e4      	lsrs	r4, r4, #3
 8002f10:	e70d      	b.n	8002d2e <__aeabi_dsub+0x3c2>
 8002f12:	0011      	movs	r1, r2
 8002f14:	0027      	movs	r7, r4
 8002f16:	3920      	subs	r1, #32
 8002f18:	40cf      	lsrs	r7, r1
 8002f1a:	2a20      	cmp	r2, #32
 8002f1c:	d005      	beq.n	8002f2a <__aeabi_dsub+0x5be>
 8002f1e:	2140      	movs	r1, #64	@ 0x40
 8002f20:	1a8a      	subs	r2, r1, r2
 8002f22:	4094      	lsls	r4, r2
 8002f24:	0025      	movs	r5, r4
 8002f26:	4305      	orrs	r5, r0
 8002f28:	9503      	str	r5, [sp, #12]
 8002f2a:	9d03      	ldr	r5, [sp, #12]
 8002f2c:	1e6a      	subs	r2, r5, #1
 8002f2e:	4195      	sbcs	r5, r2
 8002f30:	433d      	orrs	r5, r7
 8002f32:	e77d      	b.n	8002e30 <__aeabi_dsub+0x4c4>
 8002f34:	2a00      	cmp	r2, #0
 8002f36:	d100      	bne.n	8002f3a <__aeabi_dsub+0x5ce>
 8002f38:	e744      	b.n	8002dc4 <__aeabi_dsub+0x458>
 8002f3a:	2601      	movs	r6, #1
 8002f3c:	400e      	ands	r6, r1
 8002f3e:	4663      	mov	r3, ip
 8002f40:	08d9      	lsrs	r1, r3, #3
 8002f42:	9b02      	ldr	r3, [sp, #8]
 8002f44:	075a      	lsls	r2, r3, #29
 8002f46:	430a      	orrs	r2, r1
 8002f48:	08dc      	lsrs	r4, r3, #3
 8002f4a:	e6f0      	b.n	8002d2e <__aeabi_dsub+0x3c2>
 8002f4c:	2a00      	cmp	r2, #0
 8002f4e:	d028      	beq.n	8002fa2 <__aeabi_dsub+0x636>
 8002f50:	4662      	mov	r2, ip
 8002f52:	9f02      	ldr	r7, [sp, #8]
 8002f54:	08c0      	lsrs	r0, r0, #3
 8002f56:	433a      	orrs	r2, r7
 8002f58:	d100      	bne.n	8002f5c <__aeabi_dsub+0x5f0>
 8002f5a:	e6dc      	b.n	8002d16 <__aeabi_dsub+0x3aa>
 8002f5c:	0762      	lsls	r2, r4, #29
 8002f5e:	4310      	orrs	r0, r2
 8002f60:	2280      	movs	r2, #128	@ 0x80
 8002f62:	08e4      	lsrs	r4, r4, #3
 8002f64:	0312      	lsls	r2, r2, #12
 8002f66:	4214      	tst	r4, r2
 8002f68:	d009      	beq.n	8002f7e <__aeabi_dsub+0x612>
 8002f6a:	08fd      	lsrs	r5, r7, #3
 8002f6c:	4215      	tst	r5, r2
 8002f6e:	d106      	bne.n	8002f7e <__aeabi_dsub+0x612>
 8002f70:	4663      	mov	r3, ip
 8002f72:	2601      	movs	r6, #1
 8002f74:	002c      	movs	r4, r5
 8002f76:	08d8      	lsrs	r0, r3, #3
 8002f78:	077b      	lsls	r3, r7, #29
 8002f7a:	4318      	orrs	r0, r3
 8002f7c:	400e      	ands	r6, r1
 8002f7e:	0f42      	lsrs	r2, r0, #29
 8002f80:	00c0      	lsls	r0, r0, #3
 8002f82:	08c0      	lsrs	r0, r0, #3
 8002f84:	0752      	lsls	r2, r2, #29
 8002f86:	4302      	orrs	r2, r0
 8002f88:	e601      	b.n	8002b8e <__aeabi_dsub+0x222>
 8002f8a:	4663      	mov	r3, ip
 8002f8c:	1a1d      	subs	r5, r3, r0
 8002f8e:	45ac      	cmp	ip, r5
 8002f90:	4192      	sbcs	r2, r2
 8002f92:	9b02      	ldr	r3, [sp, #8]
 8002f94:	4252      	negs	r2, r2
 8002f96:	1b1c      	subs	r4, r3, r4
 8002f98:	000e      	movs	r6, r1
 8002f9a:	4688      	mov	r8, r1
 8002f9c:	2701      	movs	r7, #1
 8002f9e:	1aa4      	subs	r4, r4, r2
 8002fa0:	e546      	b.n	8002a30 <__aeabi_dsub+0xc4>
 8002fa2:	4663      	mov	r3, ip
 8002fa4:	08d9      	lsrs	r1, r3, #3
 8002fa6:	9b02      	ldr	r3, [sp, #8]
 8002fa8:	075a      	lsls	r2, r3, #29
 8002faa:	430a      	orrs	r2, r1
 8002fac:	08dc      	lsrs	r4, r3, #3
 8002fae:	e5ee      	b.n	8002b8e <__aeabi_dsub+0x222>
 8002fb0:	4663      	mov	r3, ip
 8002fb2:	9c02      	ldr	r4, [sp, #8]
 8002fb4:	9303      	str	r3, [sp, #12]
 8002fb6:	e6c7      	b.n	8002d48 <__aeabi_dsub+0x3dc>
 8002fb8:	08c0      	lsrs	r0, r0, #3
 8002fba:	2a00      	cmp	r2, #0
 8002fbc:	d100      	bne.n	8002fc0 <__aeabi_dsub+0x654>
 8002fbe:	e6aa      	b.n	8002d16 <__aeabi_dsub+0x3aa>
 8002fc0:	0762      	lsls	r2, r4, #29
 8002fc2:	4310      	orrs	r0, r2
 8002fc4:	2280      	movs	r2, #128	@ 0x80
 8002fc6:	08e4      	lsrs	r4, r4, #3
 8002fc8:	0312      	lsls	r2, r2, #12
 8002fca:	4214      	tst	r4, r2
 8002fcc:	d0d7      	beq.n	8002f7e <__aeabi_dsub+0x612>
 8002fce:	9f02      	ldr	r7, [sp, #8]
 8002fd0:	08fd      	lsrs	r5, r7, #3
 8002fd2:	4215      	tst	r5, r2
 8002fd4:	d1d3      	bne.n	8002f7e <__aeabi_dsub+0x612>
 8002fd6:	4663      	mov	r3, ip
 8002fd8:	2601      	movs	r6, #1
 8002fda:	08d8      	lsrs	r0, r3, #3
 8002fdc:	077b      	lsls	r3, r7, #29
 8002fde:	002c      	movs	r4, r5
 8002fe0:	4318      	orrs	r0, r3
 8002fe2:	400e      	ands	r6, r1
 8002fe4:	e7cb      	b.n	8002f7e <__aeabi_dsub+0x612>
 8002fe6:	000a      	movs	r2, r1
 8002fe8:	0027      	movs	r7, r4
 8002fea:	3a20      	subs	r2, #32
 8002fec:	40d7      	lsrs	r7, r2
 8002fee:	2920      	cmp	r1, #32
 8002ff0:	d005      	beq.n	8002ffe <__aeabi_dsub+0x692>
 8002ff2:	2240      	movs	r2, #64	@ 0x40
 8002ff4:	1a52      	subs	r2, r2, r1
 8002ff6:	4094      	lsls	r4, r2
 8002ff8:	0025      	movs	r5, r4
 8002ffa:	4305      	orrs	r5, r0
 8002ffc:	9503      	str	r5, [sp, #12]
 8002ffe:	9d03      	ldr	r5, [sp, #12]
 8003000:	1e6a      	subs	r2, r5, #1
 8003002:	4195      	sbcs	r5, r2
 8003004:	432f      	orrs	r7, r5
 8003006:	e610      	b.n	8002c2a <__aeabi_dsub+0x2be>
 8003008:	0014      	movs	r4, r2
 800300a:	2500      	movs	r5, #0
 800300c:	2200      	movs	r2, #0
 800300e:	e556      	b.n	8002abe <__aeabi_dsub+0x152>
 8003010:	9b02      	ldr	r3, [sp, #8]
 8003012:	4460      	add	r0, ip
 8003014:	4699      	mov	r9, r3
 8003016:	4560      	cmp	r0, ip
 8003018:	4192      	sbcs	r2, r2
 800301a:	444c      	add	r4, r9
 800301c:	4252      	negs	r2, r2
 800301e:	0005      	movs	r5, r0
 8003020:	18a4      	adds	r4, r4, r2
 8003022:	e74c      	b.n	8002ebe <__aeabi_dsub+0x552>
 8003024:	001a      	movs	r2, r3
 8003026:	001c      	movs	r4, r3
 8003028:	432a      	orrs	r2, r5
 800302a:	d000      	beq.n	800302e <__aeabi_dsub+0x6c2>
 800302c:	e6b3      	b.n	8002d96 <__aeabi_dsub+0x42a>
 800302e:	e6c9      	b.n	8002dc4 <__aeabi_dsub+0x458>
 8003030:	2480      	movs	r4, #128	@ 0x80
 8003032:	2600      	movs	r6, #0
 8003034:	0324      	lsls	r4, r4, #12
 8003036:	e5ae      	b.n	8002b96 <__aeabi_dsub+0x22a>
 8003038:	2120      	movs	r1, #32
 800303a:	2500      	movs	r5, #0
 800303c:	1a09      	subs	r1, r1, r0
 800303e:	e517      	b.n	8002a70 <__aeabi_dsub+0x104>
 8003040:	2200      	movs	r2, #0
 8003042:	2500      	movs	r5, #0
 8003044:	4c0b      	ldr	r4, [pc, #44]	@ (8003074 <__aeabi_dsub+0x708>)
 8003046:	e53a      	b.n	8002abe <__aeabi_dsub+0x152>
 8003048:	2d00      	cmp	r5, #0
 800304a:	d100      	bne.n	800304e <__aeabi_dsub+0x6e2>
 800304c:	e5f6      	b.n	8002c3c <__aeabi_dsub+0x2d0>
 800304e:	464b      	mov	r3, r9
 8003050:	1bda      	subs	r2, r3, r7
 8003052:	4692      	mov	sl, r2
 8003054:	2f00      	cmp	r7, #0
 8003056:	d100      	bne.n	800305a <__aeabi_dsub+0x6ee>
 8003058:	e66f      	b.n	8002d3a <__aeabi_dsub+0x3ce>
 800305a:	2a38      	cmp	r2, #56	@ 0x38
 800305c:	dc05      	bgt.n	800306a <__aeabi_dsub+0x6fe>
 800305e:	2680      	movs	r6, #128	@ 0x80
 8003060:	0436      	lsls	r6, r6, #16
 8003062:	4334      	orrs	r4, r6
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	e6d1      	b.n	8002e0e <__aeabi_dsub+0x4a2>
 800306a:	4688      	mov	r8, r1
 800306c:	000e      	movs	r6, r1
 800306e:	2501      	movs	r5, #1
 8003070:	e6de      	b.n	8002e30 <__aeabi_dsub+0x4c4>
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	000007ff 	.word	0x000007ff
 8003078:	ff7fffff 	.word	0xff7fffff
 800307c:	000007fe 	.word	0x000007fe
 8003080:	2d00      	cmp	r5, #0
 8003082:	d100      	bne.n	8003086 <__aeabi_dsub+0x71a>
 8003084:	e668      	b.n	8002d58 <__aeabi_dsub+0x3ec>
 8003086:	464b      	mov	r3, r9
 8003088:	1bd9      	subs	r1, r3, r7
 800308a:	2f00      	cmp	r7, #0
 800308c:	d101      	bne.n	8003092 <__aeabi_dsub+0x726>
 800308e:	468a      	mov	sl, r1
 8003090:	e5a7      	b.n	8002be2 <__aeabi_dsub+0x276>
 8003092:	2701      	movs	r7, #1
 8003094:	2938      	cmp	r1, #56	@ 0x38
 8003096:	dd00      	ble.n	800309a <__aeabi_dsub+0x72e>
 8003098:	e5c7      	b.n	8002c2a <__aeabi_dsub+0x2be>
 800309a:	2280      	movs	r2, #128	@ 0x80
 800309c:	0412      	lsls	r2, r2, #16
 800309e:	4314      	orrs	r4, r2
 80030a0:	e5af      	b.n	8002c02 <__aeabi_dsub+0x296>
 80030a2:	46c0      	nop			@ (mov r8, r8)

080030a4 <__aeabi_dcmpun>:
 80030a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030a6:	46c6      	mov	lr, r8
 80030a8:	031e      	lsls	r6, r3, #12
 80030aa:	0b36      	lsrs	r6, r6, #12
 80030ac:	46b0      	mov	r8, r6
 80030ae:	4e0d      	ldr	r6, [pc, #52]	@ (80030e4 <__aeabi_dcmpun+0x40>)
 80030b0:	030c      	lsls	r4, r1, #12
 80030b2:	004d      	lsls	r5, r1, #1
 80030b4:	005f      	lsls	r7, r3, #1
 80030b6:	b500      	push	{lr}
 80030b8:	0b24      	lsrs	r4, r4, #12
 80030ba:	0d6d      	lsrs	r5, r5, #21
 80030bc:	0d7f      	lsrs	r7, r7, #21
 80030be:	42b5      	cmp	r5, r6
 80030c0:	d00b      	beq.n	80030da <__aeabi_dcmpun+0x36>
 80030c2:	4908      	ldr	r1, [pc, #32]	@ (80030e4 <__aeabi_dcmpun+0x40>)
 80030c4:	2000      	movs	r0, #0
 80030c6:	428f      	cmp	r7, r1
 80030c8:	d104      	bne.n	80030d4 <__aeabi_dcmpun+0x30>
 80030ca:	4646      	mov	r6, r8
 80030cc:	4316      	orrs	r6, r2
 80030ce:	0030      	movs	r0, r6
 80030d0:	1e43      	subs	r3, r0, #1
 80030d2:	4198      	sbcs	r0, r3
 80030d4:	bc80      	pop	{r7}
 80030d6:	46b8      	mov	r8, r7
 80030d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030da:	4304      	orrs	r4, r0
 80030dc:	2001      	movs	r0, #1
 80030de:	2c00      	cmp	r4, #0
 80030e0:	d1f8      	bne.n	80030d4 <__aeabi_dcmpun+0x30>
 80030e2:	e7ee      	b.n	80030c2 <__aeabi_dcmpun+0x1e>
 80030e4:	000007ff 	.word	0x000007ff

080030e8 <__aeabi_f2d>:
 80030e8:	b570      	push	{r4, r5, r6, lr}
 80030ea:	0242      	lsls	r2, r0, #9
 80030ec:	0043      	lsls	r3, r0, #1
 80030ee:	0fc4      	lsrs	r4, r0, #31
 80030f0:	20fe      	movs	r0, #254	@ 0xfe
 80030f2:	0e1b      	lsrs	r3, r3, #24
 80030f4:	1c59      	adds	r1, r3, #1
 80030f6:	0a55      	lsrs	r5, r2, #9
 80030f8:	4208      	tst	r0, r1
 80030fa:	d00c      	beq.n	8003116 <__aeabi_f2d+0x2e>
 80030fc:	21e0      	movs	r1, #224	@ 0xe0
 80030fe:	0089      	lsls	r1, r1, #2
 8003100:	468c      	mov	ip, r1
 8003102:	076d      	lsls	r5, r5, #29
 8003104:	0b12      	lsrs	r2, r2, #12
 8003106:	4463      	add	r3, ip
 8003108:	051b      	lsls	r3, r3, #20
 800310a:	4313      	orrs	r3, r2
 800310c:	07e4      	lsls	r4, r4, #31
 800310e:	4323      	orrs	r3, r4
 8003110:	0028      	movs	r0, r5
 8003112:	0019      	movs	r1, r3
 8003114:	bd70      	pop	{r4, r5, r6, pc}
 8003116:	2b00      	cmp	r3, #0
 8003118:	d114      	bne.n	8003144 <__aeabi_f2d+0x5c>
 800311a:	2d00      	cmp	r5, #0
 800311c:	d01b      	beq.n	8003156 <__aeabi_f2d+0x6e>
 800311e:	0028      	movs	r0, r5
 8003120:	f000 f8ae 	bl	8003280 <__clzsi2>
 8003124:	280a      	cmp	r0, #10
 8003126:	dc1c      	bgt.n	8003162 <__aeabi_f2d+0x7a>
 8003128:	230b      	movs	r3, #11
 800312a:	002a      	movs	r2, r5
 800312c:	1a1b      	subs	r3, r3, r0
 800312e:	40da      	lsrs	r2, r3
 8003130:	0003      	movs	r3, r0
 8003132:	3315      	adds	r3, #21
 8003134:	409d      	lsls	r5, r3
 8003136:	4b0e      	ldr	r3, [pc, #56]	@ (8003170 <__aeabi_f2d+0x88>)
 8003138:	0312      	lsls	r2, r2, #12
 800313a:	1a1b      	subs	r3, r3, r0
 800313c:	055b      	lsls	r3, r3, #21
 800313e:	0b12      	lsrs	r2, r2, #12
 8003140:	0d5b      	lsrs	r3, r3, #21
 8003142:	e7e1      	b.n	8003108 <__aeabi_f2d+0x20>
 8003144:	2d00      	cmp	r5, #0
 8003146:	d009      	beq.n	800315c <__aeabi_f2d+0x74>
 8003148:	0b13      	lsrs	r3, r2, #12
 800314a:	2280      	movs	r2, #128	@ 0x80
 800314c:	0312      	lsls	r2, r2, #12
 800314e:	431a      	orrs	r2, r3
 8003150:	076d      	lsls	r5, r5, #29
 8003152:	4b08      	ldr	r3, [pc, #32]	@ (8003174 <__aeabi_f2d+0x8c>)
 8003154:	e7d8      	b.n	8003108 <__aeabi_f2d+0x20>
 8003156:	2300      	movs	r3, #0
 8003158:	2200      	movs	r2, #0
 800315a:	e7d5      	b.n	8003108 <__aeabi_f2d+0x20>
 800315c:	2200      	movs	r2, #0
 800315e:	4b05      	ldr	r3, [pc, #20]	@ (8003174 <__aeabi_f2d+0x8c>)
 8003160:	e7d2      	b.n	8003108 <__aeabi_f2d+0x20>
 8003162:	0003      	movs	r3, r0
 8003164:	002a      	movs	r2, r5
 8003166:	3b0b      	subs	r3, #11
 8003168:	409a      	lsls	r2, r3
 800316a:	2500      	movs	r5, #0
 800316c:	e7e3      	b.n	8003136 <__aeabi_f2d+0x4e>
 800316e:	46c0      	nop			@ (mov r8, r8)
 8003170:	00000389 	.word	0x00000389
 8003174:	000007ff 	.word	0x000007ff

08003178 <__aeabi_d2f>:
 8003178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800317a:	004b      	lsls	r3, r1, #1
 800317c:	030f      	lsls	r7, r1, #12
 800317e:	0d5b      	lsrs	r3, r3, #21
 8003180:	4c3b      	ldr	r4, [pc, #236]	@ (8003270 <__aeabi_d2f+0xf8>)
 8003182:	0f45      	lsrs	r5, r0, #29
 8003184:	b083      	sub	sp, #12
 8003186:	0a7f      	lsrs	r7, r7, #9
 8003188:	1c5e      	adds	r6, r3, #1
 800318a:	432f      	orrs	r7, r5
 800318c:	9000      	str	r0, [sp, #0]
 800318e:	9101      	str	r1, [sp, #4]
 8003190:	0fca      	lsrs	r2, r1, #31
 8003192:	00c5      	lsls	r5, r0, #3
 8003194:	4226      	tst	r6, r4
 8003196:	d00b      	beq.n	80031b0 <__aeabi_d2f+0x38>
 8003198:	4936      	ldr	r1, [pc, #216]	@ (8003274 <__aeabi_d2f+0xfc>)
 800319a:	185c      	adds	r4, r3, r1
 800319c:	2cfe      	cmp	r4, #254	@ 0xfe
 800319e:	dd13      	ble.n	80031c8 <__aeabi_d2f+0x50>
 80031a0:	20ff      	movs	r0, #255	@ 0xff
 80031a2:	2300      	movs	r3, #0
 80031a4:	05c0      	lsls	r0, r0, #23
 80031a6:	4318      	orrs	r0, r3
 80031a8:	07d2      	lsls	r2, r2, #31
 80031aa:	4310      	orrs	r0, r2
 80031ac:	b003      	add	sp, #12
 80031ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d102      	bne.n	80031ba <__aeabi_d2f+0x42>
 80031b4:	2000      	movs	r0, #0
 80031b6:	2300      	movs	r3, #0
 80031b8:	e7f4      	b.n	80031a4 <__aeabi_d2f+0x2c>
 80031ba:	433d      	orrs	r5, r7
 80031bc:	d0f0      	beq.n	80031a0 <__aeabi_d2f+0x28>
 80031be:	2380      	movs	r3, #128	@ 0x80
 80031c0:	03db      	lsls	r3, r3, #15
 80031c2:	20ff      	movs	r0, #255	@ 0xff
 80031c4:	433b      	orrs	r3, r7
 80031c6:	e7ed      	b.n	80031a4 <__aeabi_d2f+0x2c>
 80031c8:	2c00      	cmp	r4, #0
 80031ca:	dd14      	ble.n	80031f6 <__aeabi_d2f+0x7e>
 80031cc:	9b00      	ldr	r3, [sp, #0]
 80031ce:	00ff      	lsls	r7, r7, #3
 80031d0:	019b      	lsls	r3, r3, #6
 80031d2:	1e58      	subs	r0, r3, #1
 80031d4:	4183      	sbcs	r3, r0
 80031d6:	0f69      	lsrs	r1, r5, #29
 80031d8:	433b      	orrs	r3, r7
 80031da:	430b      	orrs	r3, r1
 80031dc:	0759      	lsls	r1, r3, #29
 80031de:	d041      	beq.n	8003264 <__aeabi_d2f+0xec>
 80031e0:	210f      	movs	r1, #15
 80031e2:	4019      	ands	r1, r3
 80031e4:	2904      	cmp	r1, #4
 80031e6:	d028      	beq.n	800323a <__aeabi_d2f+0xc2>
 80031e8:	3304      	adds	r3, #4
 80031ea:	0159      	lsls	r1, r3, #5
 80031ec:	d525      	bpl.n	800323a <__aeabi_d2f+0xc2>
 80031ee:	3401      	adds	r4, #1
 80031f0:	2300      	movs	r3, #0
 80031f2:	b2e0      	uxtb	r0, r4
 80031f4:	e7d6      	b.n	80031a4 <__aeabi_d2f+0x2c>
 80031f6:	0021      	movs	r1, r4
 80031f8:	3117      	adds	r1, #23
 80031fa:	dbdb      	blt.n	80031b4 <__aeabi_d2f+0x3c>
 80031fc:	2180      	movs	r1, #128	@ 0x80
 80031fe:	201e      	movs	r0, #30
 8003200:	0409      	lsls	r1, r1, #16
 8003202:	4339      	orrs	r1, r7
 8003204:	1b00      	subs	r0, r0, r4
 8003206:	281f      	cmp	r0, #31
 8003208:	dd1b      	ble.n	8003242 <__aeabi_d2f+0xca>
 800320a:	2602      	movs	r6, #2
 800320c:	4276      	negs	r6, r6
 800320e:	1b34      	subs	r4, r6, r4
 8003210:	000e      	movs	r6, r1
 8003212:	40e6      	lsrs	r6, r4
 8003214:	0034      	movs	r4, r6
 8003216:	2820      	cmp	r0, #32
 8003218:	d004      	beq.n	8003224 <__aeabi_d2f+0xac>
 800321a:	4817      	ldr	r0, [pc, #92]	@ (8003278 <__aeabi_d2f+0x100>)
 800321c:	4684      	mov	ip, r0
 800321e:	4463      	add	r3, ip
 8003220:	4099      	lsls	r1, r3
 8003222:	430d      	orrs	r5, r1
 8003224:	002b      	movs	r3, r5
 8003226:	1e59      	subs	r1, r3, #1
 8003228:	418b      	sbcs	r3, r1
 800322a:	4323      	orrs	r3, r4
 800322c:	0759      	lsls	r1, r3, #29
 800322e:	d015      	beq.n	800325c <__aeabi_d2f+0xe4>
 8003230:	210f      	movs	r1, #15
 8003232:	2400      	movs	r4, #0
 8003234:	4019      	ands	r1, r3
 8003236:	2904      	cmp	r1, #4
 8003238:	d117      	bne.n	800326a <__aeabi_d2f+0xf2>
 800323a:	019b      	lsls	r3, r3, #6
 800323c:	0a5b      	lsrs	r3, r3, #9
 800323e:	b2e0      	uxtb	r0, r4
 8003240:	e7b0      	b.n	80031a4 <__aeabi_d2f+0x2c>
 8003242:	4c0e      	ldr	r4, [pc, #56]	@ (800327c <__aeabi_d2f+0x104>)
 8003244:	191c      	adds	r4, r3, r4
 8003246:	002b      	movs	r3, r5
 8003248:	40a5      	lsls	r5, r4
 800324a:	40c3      	lsrs	r3, r0
 800324c:	40a1      	lsls	r1, r4
 800324e:	1e68      	subs	r0, r5, #1
 8003250:	4185      	sbcs	r5, r0
 8003252:	4329      	orrs	r1, r5
 8003254:	430b      	orrs	r3, r1
 8003256:	2400      	movs	r4, #0
 8003258:	0759      	lsls	r1, r3, #29
 800325a:	d1c1      	bne.n	80031e0 <__aeabi_d2f+0x68>
 800325c:	019b      	lsls	r3, r3, #6
 800325e:	2000      	movs	r0, #0
 8003260:	0a5b      	lsrs	r3, r3, #9
 8003262:	e79f      	b.n	80031a4 <__aeabi_d2f+0x2c>
 8003264:	08db      	lsrs	r3, r3, #3
 8003266:	b2e0      	uxtb	r0, r4
 8003268:	e79c      	b.n	80031a4 <__aeabi_d2f+0x2c>
 800326a:	3304      	adds	r3, #4
 800326c:	e7e5      	b.n	800323a <__aeabi_d2f+0xc2>
 800326e:	46c0      	nop			@ (mov r8, r8)
 8003270:	000007fe 	.word	0x000007fe
 8003274:	fffffc80 	.word	0xfffffc80
 8003278:	fffffca2 	.word	0xfffffca2
 800327c:	fffffc82 	.word	0xfffffc82

08003280 <__clzsi2>:
 8003280:	211c      	movs	r1, #28
 8003282:	2301      	movs	r3, #1
 8003284:	041b      	lsls	r3, r3, #16
 8003286:	4298      	cmp	r0, r3
 8003288:	d301      	bcc.n	800328e <__clzsi2+0xe>
 800328a:	0c00      	lsrs	r0, r0, #16
 800328c:	3910      	subs	r1, #16
 800328e:	0a1b      	lsrs	r3, r3, #8
 8003290:	4298      	cmp	r0, r3
 8003292:	d301      	bcc.n	8003298 <__clzsi2+0x18>
 8003294:	0a00      	lsrs	r0, r0, #8
 8003296:	3908      	subs	r1, #8
 8003298:	091b      	lsrs	r3, r3, #4
 800329a:	4298      	cmp	r0, r3
 800329c:	d301      	bcc.n	80032a2 <__clzsi2+0x22>
 800329e:	0900      	lsrs	r0, r0, #4
 80032a0:	3904      	subs	r1, #4
 80032a2:	a202      	add	r2, pc, #8	@ (adr r2, 80032ac <__clzsi2+0x2c>)
 80032a4:	5c10      	ldrb	r0, [r2, r0]
 80032a6:	1840      	adds	r0, r0, r1
 80032a8:	4770      	bx	lr
 80032aa:	46c0      	nop			@ (mov r8, r8)
 80032ac:	02020304 	.word	0x02020304
 80032b0:	01010101 	.word	0x01010101
	...

080032bc <__clzdi2>:
 80032bc:	b510      	push	{r4, lr}
 80032be:	2900      	cmp	r1, #0
 80032c0:	d103      	bne.n	80032ca <__clzdi2+0xe>
 80032c2:	f7ff ffdd 	bl	8003280 <__clzsi2>
 80032c6:	3020      	adds	r0, #32
 80032c8:	e002      	b.n	80032d0 <__clzdi2+0x14>
 80032ca:	0008      	movs	r0, r1
 80032cc:	f7ff ffd8 	bl	8003280 <__clzsi2>
 80032d0:	bd10      	pop	{r4, pc}
 80032d2:	46c0      	nop			@ (mov r8, r8)

080032d4 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80032d4:	b590      	push	{r4, r7, lr}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	0004      	movs	r4, r0
 80032dc:	0008      	movs	r0, r1
 80032de:	0011      	movs	r1, r2
 80032e0:	1dbb      	adds	r3, r7, #6
 80032e2:	1c22      	adds	r2, r4, #0
 80032e4:	801a      	strh	r2, [r3, #0]
 80032e6:	1d3b      	adds	r3, r7, #4
 80032e8:	1c02      	adds	r2, r0, #0
 80032ea:	801a      	strh	r2, [r3, #0]
 80032ec:	1cbb      	adds	r3, r7, #2
 80032ee:	1c0a      	adds	r2, r1, #0
 80032f0:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(y,x, color);
 80032f2:	1d3b      	adds	r3, r7, #4
 80032f4:	8818      	ldrh	r0, [r3, #0]
 80032f6:	1dbb      	adds	r3, r7, #6
 80032f8:	8819      	ldrh	r1, [r3, #0]
 80032fa:	1cbb      	adds	r3, r7, #2
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	001a      	movs	r2, r3
 8003300:	f000 fd00 	bl	8003d04 <ST7735_DrawPixel>
}
 8003304:	46c0      	nop			@ (mov r8, r8)
 8003306:	46bd      	mov	sp, r7
 8003308:	b003      	add	sp, #12
 800330a:	bd90      	pop	{r4, r7, pc}

0800330c <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800330c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800330e:	46c6      	mov	lr, r8
 8003310:	b500      	push	{lr}
 8003312:	b090      	sub	sp, #64	@ 0x40
 8003314:	af04      	add	r7, sp, #16
 8003316:	468c      	mov	ip, r1
 8003318:	0016      	movs	r6, r2
 800331a:	0019      	movs	r1, r3
 800331c:	221e      	movs	r2, #30
 800331e:	18ba      	adds	r2, r7, r2
 8003320:	1c03      	adds	r3, r0, #0
 8003322:	8013      	strh	r3, [r2, #0]
 8003324:	231c      	movs	r3, #28
 8003326:	18fb      	adds	r3, r7, r3
 8003328:	4662      	mov	r2, ip
 800332a:	801a      	strh	r2, [r3, #0]
 800332c:	201a      	movs	r0, #26
 800332e:	183b      	adds	r3, r7, r0
 8003330:	1c32      	adds	r2, r6, #0
 8003332:	801a      	strh	r2, [r3, #0]
 8003334:	2018      	movs	r0, #24
 8003336:	183b      	adds	r3, r7, r0
 8003338:	1c0a      	adds	r2, r1, #0
 800333a:	801a      	strh	r2, [r3, #0]
 800333c:	466b      	mov	r3, sp
 800333e:	4698      	mov	r8, r3
	uint16_t pallette[] = {color};
 8003340:	230c      	movs	r3, #12
 8003342:	0001      	movs	r1, r0
 8003344:	185e      	adds	r6, r3, r1
 8003346:	19f2      	adds	r2, r6, r7
 8003348:	2030      	movs	r0, #48	@ 0x30
 800334a:	1846      	adds	r6, r0, r1
 800334c:	19f3      	adds	r3, r6, r7
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	8013      	strh	r3, [r2, #0]
	    uint16_t pixels[w*h][2];
 8003352:	201a      	movs	r0, #26
 8003354:	183b      	adds	r3, r7, r0
 8003356:	2200      	movs	r2, #0
 8003358:	5e9b      	ldrsh	r3, [r3, r2]
 800335a:	187a      	adds	r2, r7, r1
 800335c:	2000      	movs	r0, #0
 800335e:	5e12      	ldrsh	r2, [r2, r0]
 8003360:	4353      	muls	r3, r2
 8003362:	1e5a      	subs	r2, r3, #1
 8003364:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003366:	001a      	movs	r2, r3
 8003368:	60ba      	str	r2, [r7, #8]
 800336a:	2200      	movs	r2, #0
 800336c:	60fa      	str	r2, [r7, #12]
 800336e:	68b8      	ldr	r0, [r7, #8]
 8003370:	68f9      	ldr	r1, [r7, #12]
 8003372:	0002      	movs	r2, r0
 8003374:	0ed2      	lsrs	r2, r2, #27
 8003376:	000e      	movs	r6, r1
 8003378:	0176      	lsls	r6, r6, #5
 800337a:	617e      	str	r6, [r7, #20]
 800337c:	697e      	ldr	r6, [r7, #20]
 800337e:	4316      	orrs	r6, r2
 8003380:	617e      	str	r6, [r7, #20]
 8003382:	0002      	movs	r2, r0
 8003384:	0152      	lsls	r2, r2, #5
 8003386:	613a      	str	r2, [r7, #16]
 8003388:	001a      	movs	r2, r3
 800338a:	603a      	str	r2, [r7, #0]
 800338c:	2200      	movs	r2, #0
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	6838      	ldr	r0, [r7, #0]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	0002      	movs	r2, r0
 8003396:	0ed2      	lsrs	r2, r2, #27
 8003398:	000e      	movs	r6, r1
 800339a:	0175      	lsls	r5, r6, #5
 800339c:	4315      	orrs	r5, r2
 800339e:	0002      	movs	r2, r0
 80033a0:	0154      	lsls	r4, r2, #5
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	3307      	adds	r3, #7
 80033a6:	08db      	lsrs	r3, r3, #3
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	466a      	mov	r2, sp
 80033ac:	1ad2      	subs	r2, r2, r3
 80033ae:	4695      	mov	sp, r2
 80033b0:	ab04      	add	r3, sp, #16
 80033b2:	3301      	adds	r3, #1
 80033b4:	085b      	lsrs	r3, r3, #1
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	62bb      	str	r3, [r7, #40]	@ 0x28

	    pixels[0][0] = 0;
 80033ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033bc:	2200      	movs	r2, #0
 80033be:	801a      	strh	r2, [r3, #0]
	    pixels[0][1] = w*h;
 80033c0:	201a      	movs	r0, #26
 80033c2:	183b      	adds	r3, r7, r0
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	2118      	movs	r1, #24
 80033c8:	187a      	adds	r2, r7, r1
 80033ca:	8812      	ldrh	r2, [r2, #0]
 80033cc:	4353      	muls	r3, r2
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d2:	805a      	strh	r2, [r3, #2]
	    drawImage(pixels, pallette, x, y, w, h, 1);
 80033d4:	221e      	movs	r2, #30
 80033d6:	18bb      	adds	r3, r7, r2
 80033d8:	881c      	ldrh	r4, [r3, #0]
 80033da:	231c      	movs	r3, #28
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	881d      	ldrh	r5, [r3, #0]
 80033e0:	183b      	adds	r3, r7, r0
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	0008      	movs	r0, r1
 80033e6:	187a      	adds	r2, r7, r1
 80033e8:	8812      	ldrh	r2, [r2, #0]
 80033ea:	210c      	movs	r1, #12
 80033ec:	1809      	adds	r1, r1, r0
 80033ee:	19c9      	adds	r1, r1, r7
 80033f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033f2:	2601      	movs	r6, #1
 80033f4:	46b4      	mov	ip, r6
 80033f6:	4666      	mov	r6, ip
 80033f8:	9602      	str	r6, [sp, #8]
 80033fa:	9201      	str	r2, [sp, #4]
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	002b      	movs	r3, r5
 8003400:	0022      	movs	r2, r4
 8003402:	f000 f9dd 	bl	80037c0 <drawImage>
 8003406:	46c5      	mov	sp, r8

	//ST7735_FillRectangle(x, y, w, h, color);
}
 8003408:	46c0      	nop			@ (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	b00c      	add	sp, #48	@ 0x30
 800340e:	bc80      	pop	{r7}
 8003410:	46b8      	mov	r8, r7
 8003412:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003414 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8003414:	b590      	push	{r4, r7, lr}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	0004      	movs	r4, r0
 800341c:	0008      	movs	r0, r1
 800341e:	0011      	movs	r1, r2
 8003420:	1dbb      	adds	r3, r7, #6
 8003422:	1c22      	adds	r2, r4, #0
 8003424:	801a      	strh	r2, [r3, #0]
 8003426:	1d3b      	adds	r3, r7, #4
 8003428:	1c02      	adds	r2, r0, #0
 800342a:	801a      	strh	r2, [r3, #0]
 800342c:	1cbb      	adds	r3, r7, #2
 800342e:	1c0a      	adds	r2, r1, #0
 8003430:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 8003432:	1cbb      	adds	r3, r7, #2
 8003434:	881a      	ldrh	r2, [r3, #0]
 8003436:	1d3b      	adds	r3, r7, #4
 8003438:	2100      	movs	r1, #0
 800343a:	5e59      	ldrsh	r1, [r3, r1]
 800343c:	1dbb      	adds	r3, r7, #6
 800343e:	2000      	movs	r0, #0
 8003440:	5e1b      	ldrsh	r3, [r3, r0]
 8003442:	0018      	movs	r0, r3
 8003444:	f7ff ff46 	bl	80032d4 <drawPixel>
}
 8003448:	46c0      	nop			@ (mov r8, r8)
 800344a:	46bd      	mov	sp, r7
 800344c:	b003      	add	sp, #12
 800344e:	bd90      	pop	{r4, r7, pc}

08003450 <drawString>:
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
void drawString(int16_t x, int16_t y, char* c, int16_t textColor, int16_t bgColor, uint8_t size, uint8_t spacing)
{
 8003450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003452:	b089      	sub	sp, #36	@ 0x24
 8003454:	af02      	add	r7, sp, #8
 8003456:	0004      	movs	r4, r0
 8003458:	0008      	movs	r0, r1
 800345a:	60ba      	str	r2, [r7, #8]
 800345c:	0019      	movs	r1, r3
 800345e:	230e      	movs	r3, #14
 8003460:	18fb      	adds	r3, r7, r3
 8003462:	1c22      	adds	r2, r4, #0
 8003464:	801a      	strh	r2, [r3, #0]
 8003466:	230c      	movs	r3, #12
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	1c02      	adds	r2, r0, #0
 800346c:	801a      	strh	r2, [r3, #0]
 800346e:	1dbb      	adds	r3, r7, #6
 8003470:	1c0a      	adds	r2, r1, #0
 8003472:	801a      	strh	r2, [r3, #0]
	uint16_t i =0;
 8003474:	2316      	movs	r3, #22
 8003476:	18fb      	adds	r3, r7, r3
 8003478:	2200      	movs	r2, #0
 800347a:	801a      	strh	r2, [r3, #0]

	while(c[i])
 800347c:	e03f      	b.n	80034fe <drawString+0xae>
	{
		drawChar(x, y, c[i], textColor, bgColor, size);
 800347e:	2516      	movs	r5, #22
 8003480:	197b      	adds	r3, r7, r5
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	18d3      	adds	r3, r2, r3
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	469c      	mov	ip, r3
 800348c:	1dbb      	adds	r3, r7, #6
 800348e:	2400      	movs	r4, #0
 8003490:	5f1c      	ldrsh	r4, [r3, r4]
 8003492:	230c      	movs	r3, #12
 8003494:	18fb      	adds	r3, r7, r3
 8003496:	2100      	movs	r1, #0
 8003498:	5e59      	ldrsh	r1, [r3, r1]
 800349a:	260e      	movs	r6, #14
 800349c:	19bb      	adds	r3, r7, r6
 800349e:	2000      	movs	r0, #0
 80034a0:	5e18      	ldrsh	r0, [r3, r0]
 80034a2:	232c      	movs	r3, #44	@ 0x2c
 80034a4:	2208      	movs	r2, #8
 80034a6:	189b      	adds	r3, r3, r2
 80034a8:	19db      	adds	r3, r3, r7
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	2328      	movs	r3, #40	@ 0x28
 80034b0:	189b      	adds	r3, r3, r2
 80034b2:	19db      	adds	r3, r3, r7
 80034b4:	2200      	movs	r2, #0
 80034b6:	5e9b      	ldrsh	r3, [r3, r2]
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	0023      	movs	r3, r4
 80034bc:	4662      	mov	r2, ip
 80034be:	f000 f82b 	bl	8003518 <drawChar>
		x+=(size*6)+spacing;
 80034c2:	232c      	movs	r3, #44	@ 0x2c
 80034c4:	2108      	movs	r1, #8
 80034c6:	185b      	adds	r3, r3, r1
 80034c8:	19db      	adds	r3, r3, r7
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	1c1a      	adds	r2, r3, #0
 80034d0:	1c13      	adds	r3, r2, #0
 80034d2:	18db      	adds	r3, r3, r3
 80034d4:	189b      	adds	r3, r3, r2
 80034d6:	18db      	adds	r3, r3, r3
 80034d8:	b29a      	uxth	r2, r3
 80034da:	2330      	movs	r3, #48	@ 0x30
 80034dc:	185b      	adds	r3, r3, r1
 80034de:	19db      	adds	r3, r3, r7
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	18d3      	adds	r3, r2, r3
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	19bb      	adds	r3, r7, r6
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	18d3      	adds	r3, r2, r3
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	19bb      	adds	r3, r7, r6
 80034f2:	801a      	strh	r2, [r3, #0]
		i++;
 80034f4:	197b      	adds	r3, r7, r5
 80034f6:	881a      	ldrh	r2, [r3, #0]
 80034f8:	197b      	adds	r3, r7, r5
 80034fa:	3201      	adds	r2, #1
 80034fc:	801a      	strh	r2, [r3, #0]
	while(c[i])
 80034fe:	2316      	movs	r3, #22
 8003500:	18fb      	adds	r3, r7, r3
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	18d3      	adds	r3, r2, r3
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1b7      	bne.n	800347e <drawString+0x2e>
	}
}
 800350e:	46c0      	nop			@ (mov r8, r8)
 8003510:	46c0      	nop			@ (mov r8, r8)
 8003512:	46bd      	mov	sp, r7
 8003514:	b007      	add	sp, #28
 8003516:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003518 <drawChar>:
void drawChar(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 8003518:	b5b0      	push	{r4, r5, r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af02      	add	r7, sp, #8
 800351e:	0005      	movs	r5, r0
 8003520:	000c      	movs	r4, r1
 8003522:	0010      	movs	r0, r2
 8003524:	0019      	movs	r1, r3
 8003526:	1dbb      	adds	r3, r7, #6
 8003528:	1c2a      	adds	r2, r5, #0
 800352a:	801a      	strh	r2, [r3, #0]
 800352c:	1d3b      	adds	r3, r7, #4
 800352e:	1c22      	adds	r2, r4, #0
 8003530:	801a      	strh	r2, [r3, #0]
 8003532:	1cfb      	adds	r3, r7, #3
 8003534:	1c02      	adds	r2, r0, #0
 8003536:	701a      	strb	r2, [r3, #0]
 8003538:	003b      	movs	r3, r7
 800353a:	1c0a      	adds	r2, r1, #0
 800353c:	801a      	strh	r2, [r3, #0]
     //(y >= _height))           //||
     //((x + 5 * size - 1) < 0) ||
     //((y + 8 * size - 1) < 0))
   // return;

  for (i=0; i<6; i++ ) {
 800353e:	2300      	movs	r3, #0
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	e0bd      	b.n	80036c0 <drawChar+0x1a8>
    if ((i) == 5)
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	2b05      	cmp	r3, #5
 8003548:	d104      	bne.n	8003554 <drawChar+0x3c>
      line = 0x0;
 800354a:	2317      	movs	r3, #23
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]
 8003552:	e00b      	b.n	800356c <drawChar+0x54>
    else
      line = Font[(c*5)+(i)];
 8003554:	1cfb      	adds	r3, r7, #3
 8003556:	781a      	ldrb	r2, [r3, #0]
 8003558:	0013      	movs	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	189a      	adds	r2, r3, r2
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	18d2      	adds	r2, r2, r3
 8003562:	2317      	movs	r3, #23
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	495b      	ldr	r1, [pc, #364]	@ (80036d4 <drawChar+0x1bc>)
 8003568:	5c8a      	ldrb	r2, [r1, r2]
 800356a:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 800356c:	2300      	movs	r3, #0
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	e09f      	b.n	80036b2 <drawChar+0x19a>
      if (line & 0x1) {
 8003572:	2317      	movs	r3, #23
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2201      	movs	r2, #1
 800357a:	4013      	ands	r3, r2
 800357c:	d043      	beq.n	8003606 <drawChar+0xee>
        if (size == 1)
 800357e:	232c      	movs	r3, #44	@ 0x2c
 8003580:	18fb      	adds	r3, r7, r3
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d115      	bne.n	80035b4 <drawChar+0x9c>
          writePixel(x+(i), y+(7-j), textColor);
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	b29a      	uxth	r2, r3
 800358c:	1dbb      	adds	r3, r7, #6
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	18d3      	adds	r3, r2, r3
 8003592:	b29b      	uxth	r3, r3
 8003594:	b218      	sxth	r0, r3
 8003596:	1d3b      	adds	r3, r7, #4
 8003598:	881a      	ldrh	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	b29b      	uxth	r3, r3
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	3307      	adds	r3, #7
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	b219      	sxth	r1, r3
 80035a8:	003b      	movs	r3, r7
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	001a      	movs	r2, r3
 80035ae:	f7ff ff31 	bl	8003414 <writePixel>
 80035b2:	e075      	b.n	80036a0 <drawChar+0x188>
        else {
          fillRect(x+((i)*size), y+((7-j)*size), size, size, textColor);
 80035b4:	212c      	movs	r1, #44	@ 0x2c
 80035b6:	187b      	adds	r3, r7, r1
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	b292      	uxth	r2, r2
 80035c0:	4353      	muls	r3, r2
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	1dbb      	adds	r3, r7, #6
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	18d3      	adds	r3, r2, r3
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	b218      	sxth	r0, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2207      	movs	r2, #7
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	000c      	movs	r4, r1
 80035d8:	187a      	adds	r2, r7, r1
 80035da:	7812      	ldrb	r2, [r2, #0]
 80035dc:	b292      	uxth	r2, r2
 80035de:	4353      	muls	r3, r2
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	1d3b      	adds	r3, r7, #4
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	18d3      	adds	r3, r2, r3
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	b219      	sxth	r1, r3
 80035ec:	193b      	adds	r3, r7, r4
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	b21a      	sxth	r2, r3
 80035f2:	193b      	adds	r3, r7, r4
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	b21c      	sxth	r4, r3
 80035f8:	003b      	movs	r3, r7
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	0023      	movs	r3, r4
 8003600:	f7ff fe84 	bl	800330c <fillRect>
 8003604:	e04c      	b.n	80036a0 <drawChar+0x188>
        }
      } else if (bgColor != textColor) {
 8003606:	2428      	movs	r4, #40	@ 0x28
 8003608:	193b      	adds	r3, r7, r4
 800360a:	0039      	movs	r1, r7
 800360c:	2200      	movs	r2, #0
 800360e:	5e9a      	ldrsh	r2, [r3, r2]
 8003610:	2300      	movs	r3, #0
 8003612:	5ecb      	ldrsh	r3, [r1, r3]
 8003614:	429a      	cmp	r2, r3
 8003616:	d043      	beq.n	80036a0 <drawChar+0x188>
        if (size == 1) // default size
 8003618:	232c      	movs	r3, #44	@ 0x2c
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d115      	bne.n	800364e <drawChar+0x136>
          writePixel(x+(i), y+(7-j), bgColor);
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	b29a      	uxth	r2, r3
 8003626:	1dbb      	adds	r3, r7, #6
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	18d3      	adds	r3, r2, r3
 800362c:	b29b      	uxth	r3, r3
 800362e:	b218      	sxth	r0, r3
 8003630:	1d3b      	adds	r3, r7, #4
 8003632:	881a      	ldrh	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	b29b      	uxth	r3, r3
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	b29b      	uxth	r3, r3
 800363c:	3307      	adds	r3, #7
 800363e:	b29b      	uxth	r3, r3
 8003640:	b219      	sxth	r1, r3
 8003642:	193b      	adds	r3, r7, r4
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	001a      	movs	r2, r3
 8003648:	f7ff fee4 	bl	8003414 <writePixel>
 800364c:	e028      	b.n	80036a0 <drawChar+0x188>
        else {  // big size
          fillRect(x+(i)*size, y+(7-j)*size, size, size, bgColor);
 800364e:	212c      	movs	r1, #44	@ 0x2c
 8003650:	187b      	adds	r3, r7, r1
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	b29b      	uxth	r3, r3
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	b292      	uxth	r2, r2
 800365a:	4353      	muls	r3, r2
 800365c:	b29a      	uxth	r2, r3
 800365e:	1dbb      	adds	r3, r7, #6
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	18d3      	adds	r3, r2, r3
 8003664:	b29b      	uxth	r3, r3
 8003666:	b218      	sxth	r0, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2207      	movs	r2, #7
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	b29b      	uxth	r3, r3
 8003670:	000c      	movs	r4, r1
 8003672:	187a      	adds	r2, r7, r1
 8003674:	7812      	ldrb	r2, [r2, #0]
 8003676:	b292      	uxth	r2, r2
 8003678:	4353      	muls	r3, r2
 800367a:	b29a      	uxth	r2, r3
 800367c:	1d3b      	adds	r3, r7, #4
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	18d3      	adds	r3, r2, r3
 8003682:	b29b      	uxth	r3, r3
 8003684:	b219      	sxth	r1, r3
 8003686:	193b      	adds	r3, r7, r4
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	b21a      	sxth	r2, r3
 800368c:	193b      	adds	r3, r7, r4
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	b21c      	sxth	r4, r3
 8003692:	2328      	movs	r3, #40	@ 0x28
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	0023      	movs	r3, r4
 800369c:	f7ff fe36 	bl	800330c <fillRect>
        }
      }
      line >>= 1;
 80036a0:	2217      	movs	r2, #23
 80036a2:	18bb      	adds	r3, r7, r2
 80036a4:	18ba      	adds	r2, r7, r2
 80036a6:	7812      	ldrb	r2, [r2, #0]
 80036a8:	0852      	lsrs	r2, r2, #1
 80036aa:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	3301      	adds	r3, #1
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2b07      	cmp	r3, #7
 80036b6:	dc00      	bgt.n	80036ba <drawChar+0x1a2>
 80036b8:	e75b      	b.n	8003572 <drawChar+0x5a>
  for (i=0; i<6; i++ ) {
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	3301      	adds	r3, #1
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2b05      	cmp	r3, #5
 80036c4:	dc00      	bgt.n	80036c8 <drawChar+0x1b0>
 80036c6:	e73d      	b.n	8003544 <drawChar+0x2c>
    }
  }
}
 80036c8:	46c0      	nop			@ (mov r8, r8)
 80036ca:	46c0      	nop			@ (mov r8, r8)
 80036cc:	46bd      	mov	sp, r7
 80036ce:	b006      	add	sp, #24
 80036d0:	bdb0      	pop	{r4, r5, r7, pc}
 80036d2:	46c0      	nop			@ (mov r8, r8)
 80036d4:	0800c348 	.word	0x0800c348

080036d8 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80036d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036da:	b091      	sub	sp, #68	@ 0x44
 80036dc:	af04      	add	r7, sp, #16
 80036de:	231e      	movs	r3, #30
 80036e0:	18f9      	adds	r1, r7, r3
 80036e2:	8008      	strh	r0, [r1, #0]
 80036e4:	4669      	mov	r1, sp
 80036e6:	000e      	movs	r6, r1
    uint16_t pallette[] = {color};
 80036e8:	210c      	movs	r1, #12
 80036ea:	2318      	movs	r3, #24
 80036ec:	18cb      	adds	r3, r1, r3
 80036ee:	19d9      	adds	r1, r3, r7
 80036f0:	231e      	movs	r3, #30
 80036f2:	18f8      	adds	r0, r7, r3
 80036f4:	8800      	ldrh	r0, [r0, #0]
 80036f6:	8008      	strh	r0, [r1, #0]
    uint16_t pixels[_width*_height][2];
 80036f8:	492f      	ldr	r1, [pc, #188]	@ (80037b8 <fillScreen+0xe0>)
 80036fa:	2300      	movs	r3, #0
 80036fc:	5ec9      	ldrsh	r1, [r1, r3]
 80036fe:	0008      	movs	r0, r1
 8003700:	492e      	ldr	r1, [pc, #184]	@ (80037bc <fillScreen+0xe4>)
 8003702:	2300      	movs	r3, #0
 8003704:	5ec9      	ldrsh	r1, [r1, r3]
 8003706:	4341      	muls	r1, r0
 8003708:	1e48      	subs	r0, r1, #1
 800370a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800370c:	0008      	movs	r0, r1
 800370e:	6138      	str	r0, [r7, #16]
 8003710:	2000      	movs	r0, #0
 8003712:	6178      	str	r0, [r7, #20]
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	0010      	movs	r0, r2
 800371a:	0ec0      	lsrs	r0, r0, #27
 800371c:	613a      	str	r2, [r7, #16]
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	015d      	lsls	r5, r3, #5
 8003722:	4305      	orrs	r5, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	015c      	lsls	r4, r3, #5
 8003728:	0008      	movs	r0, r1
 800372a:	6038      	str	r0, [r7, #0]
 800372c:	2000      	movs	r0, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	683c      	ldr	r4, [r7, #0]
 8003732:	687d      	ldr	r5, [r7, #4]
 8003734:	0023      	movs	r3, r4
 8003736:	0ed8      	lsrs	r0, r3, #27
 8003738:	002b      	movs	r3, r5
 800373a:	015b      	lsls	r3, r3, #5
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4303      	orrs	r3, r0
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	0023      	movs	r3, r4
 8003746:	015b      	lsls	r3, r3, #5
 8003748:	60bb      	str	r3, [r7, #8]
 800374a:	000b      	movs	r3, r1
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	3307      	adds	r3, #7
 8003750:	08db      	lsrs	r3, r3, #3
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	466a      	mov	r2, sp
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	469d      	mov	sp, r3
 800375a:	ab04      	add	r3, sp, #16
 800375c:	3301      	adds	r3, #1
 800375e:	085b      	lsrs	r3, r3, #1
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	62bb      	str	r3, [r7, #40]	@ 0x28

    pixels[0][0] = 0;
 8003764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003766:	2200      	movs	r2, #0
 8003768:	801a      	strh	r2, [r3, #0]
    pixels[0][1] = _width*_height;
 800376a:	4b13      	ldr	r3, [pc, #76]	@ (80037b8 <fillScreen+0xe0>)
 800376c:	2200      	movs	r2, #0
 800376e:	5e9b      	ldrsh	r3, [r3, r2]
 8003770:	b29b      	uxth	r3, r3
 8003772:	4a12      	ldr	r2, [pc, #72]	@ (80037bc <fillScreen+0xe4>)
 8003774:	2000      	movs	r0, #0
 8003776:	5e12      	ldrsh	r2, [r2, r0]
 8003778:	b292      	uxth	r2, r2
 800377a:	4353      	muls	r3, r2
 800377c:	b29a      	uxth	r2, r3
 800377e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003780:	805a      	strh	r2, [r3, #2]
    drawImage(pixels, pallette, 0, 0, _width, _height, 1);
 8003782:	4b0d      	ldr	r3, [pc, #52]	@ (80037b8 <fillScreen+0xe0>)
 8003784:	2200      	movs	r2, #0
 8003786:	5e9b      	ldrsh	r3, [r3, r2]
 8003788:	b29b      	uxth	r3, r3
 800378a:	4a0c      	ldr	r2, [pc, #48]	@ (80037bc <fillScreen+0xe4>)
 800378c:	2000      	movs	r0, #0
 800378e:	5e12      	ldrsh	r2, [r2, r0]
 8003790:	b292      	uxth	r2, r2
 8003792:	210c      	movs	r1, #12
 8003794:	2018      	movs	r0, #24
 8003796:	1809      	adds	r1, r1, r0
 8003798:	19c9      	adds	r1, r1, r7
 800379a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800379c:	2401      	movs	r4, #1
 800379e:	9402      	str	r4, [sp, #8]
 80037a0:	9201      	str	r2, [sp, #4]
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	2300      	movs	r3, #0
 80037a6:	2200      	movs	r2, #0
 80037a8:	f000 f80a 	bl	80037c0 <drawImage>
 80037ac:	46b5      	mov	sp, r6
	//fillRect(0, 0, _width, _height, color);
}
 80037ae:	46c0      	nop			@ (mov r8, r8)
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b00d      	add	sp, #52	@ 0x34
 80037b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037b6:	46c0      	nop			@ (mov r8, r8)
 80037b8:	20000f0c 	.word	0x20000f0c
 80037bc:	20000f0e 	.word	0x20000f0e

080037c0 <drawImage>:

void drawImage(uint16_t image[][2], uint16_t palette[], uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
{
 80037c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037c2:	46c6      	mov	lr, r8
 80037c4:	b500      	push	{lr}
 80037c6:	b092      	sub	sp, #72	@ 0x48
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	6278      	str	r0, [r7, #36]	@ 0x24
 80037cc:	6239      	str	r1, [r7, #32]
 80037ce:	0019      	movs	r1, r3
 80037d0:	231e      	movs	r3, #30
 80037d2:	18fb      	adds	r3, r7, r3
 80037d4:	801a      	strh	r2, [r3, #0]
 80037d6:	231c      	movs	r3, #28
 80037d8:	18fb      	adds	r3, r7, r3
 80037da:	1c0a      	adds	r2, r1, #0
 80037dc:	801a      	strh	r2, [r3, #0]
 80037de:	466b      	mov	r3, sp
 80037e0:	4698      	mov	r8, r3
	uint16_t i;
	uint16_t j;
	uint16_t totalInd =0;
 80037e2:	2322      	movs	r3, #34	@ 0x22
 80037e4:	2118      	movs	r1, #24
 80037e6:	185b      	adds	r3, r3, r1
 80037e8:	19db      	adds	r3, r3, r7
 80037ea:	2200      	movs	r2, #0
 80037ec:	801a      	strh	r2, [r3, #0]
	uint16_t ind;
	uint16_t count;
	uint16_t bufffer[w*h];
 80037ee:	2340      	movs	r3, #64	@ 0x40
 80037f0:	185b      	adds	r3, r3, r1
 80037f2:	19db      	adds	r3, r3, r7
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	2244      	movs	r2, #68	@ 0x44
 80037f8:	1852      	adds	r2, r2, r1
 80037fa:	19d2      	adds	r2, r2, r7
 80037fc:	8812      	ldrh	r2, [r2, #0]
 80037fe:	4353      	muls	r3, r2
 8003800:	1e5a      	subs	r2, r3, #1
 8003802:	637a      	str	r2, [r7, #52]	@ 0x34
 8003804:	001a      	movs	r2, r3
 8003806:	60ba      	str	r2, [r7, #8]
 8003808:	2200      	movs	r2, #0
 800380a:	60fa      	str	r2, [r7, #12]
 800380c:	68b8      	ldr	r0, [r7, #8]
 800380e:	68f9      	ldr	r1, [r7, #12]
 8003810:	0002      	movs	r2, r0
 8003812:	0f12      	lsrs	r2, r2, #28
 8003814:	000e      	movs	r6, r1
 8003816:	0136      	lsls	r6, r6, #4
 8003818:	617e      	str	r6, [r7, #20]
 800381a:	697e      	ldr	r6, [r7, #20]
 800381c:	4316      	orrs	r6, r2
 800381e:	617e      	str	r6, [r7, #20]
 8003820:	0002      	movs	r2, r0
 8003822:	0112      	lsls	r2, r2, #4
 8003824:	613a      	str	r2, [r7, #16]
 8003826:	001a      	movs	r2, r3
 8003828:	603a      	str	r2, [r7, #0]
 800382a:	2200      	movs	r2, #0
 800382c:	607a      	str	r2, [r7, #4]
 800382e:	6838      	ldr	r0, [r7, #0]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	0002      	movs	r2, r0
 8003834:	0f12      	lsrs	r2, r2, #28
 8003836:	000e      	movs	r6, r1
 8003838:	0135      	lsls	r5, r6, #4
 800383a:	4315      	orrs	r5, r2
 800383c:	0002      	movs	r2, r0
 800383e:	0114      	lsls	r4, r2, #4
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	3307      	adds	r3, #7
 8003844:	08db      	lsrs	r3, r3, #3
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	466a      	mov	r2, sp
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	469d      	mov	sp, r3
 800384e:	ab02      	add	r3, sp, #8
 8003850:	3301      	adds	r3, #1
 8003852:	085b      	lsrs	r3, r3, #1
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	633b      	str	r3, [r7, #48]	@ 0x30
for(i=0; i<c; i++)
 8003858:	2326      	movs	r3, #38	@ 0x26
 800385a:	2118      	movs	r1, #24
 800385c:	185b      	adds	r3, r3, r1
 800385e:	19db      	adds	r3, r3, r7
 8003860:	2200      	movs	r2, #0
 8003862:	801a      	strh	r2, [r3, #0]
 8003864:	e04d      	b.n	8003902 <drawImage+0x142>
{
	ind = image[i][0];
 8003866:	2126      	movs	r1, #38	@ 0x26
 8003868:	2018      	movs	r0, #24
 800386a:	180b      	adds	r3, r1, r0
 800386c:	19db      	adds	r3, r3, r7
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003874:	18d2      	adds	r2, r2, r3
 8003876:	2316      	movs	r3, #22
 8003878:	181b      	adds	r3, r3, r0
 800387a:	19db      	adds	r3, r3, r7
 800387c:	8812      	ldrh	r2, [r2, #0]
 800387e:	801a      	strh	r2, [r3, #0]
	count = image[i][1];
 8003880:	180b      	adds	r3, r1, r0
 8003882:	19db      	adds	r3, r3, r7
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800388a:	18d2      	adds	r2, r2, r3
 800388c:	2314      	movs	r3, #20
 800388e:	181b      	adds	r3, r3, r0
 8003890:	19db      	adds	r3, r3, r7
 8003892:	8852      	ldrh	r2, [r2, #2]
 8003894:	801a      	strh	r2, [r3, #0]
	for(j=0; j<count; j++)
 8003896:	2324      	movs	r3, #36	@ 0x24
 8003898:	181b      	adds	r3, r3, r0
 800389a:	19db      	adds	r3, r3, r7
 800389c:	2200      	movs	r2, #0
 800389e:	801a      	strh	r2, [r3, #0]
 80038a0:	e01c      	b.n	80038dc <drawImage+0x11c>
	{
		bufffer[totalInd++] = palette[ind];
 80038a2:	2316      	movs	r3, #22
 80038a4:	2418      	movs	r4, #24
 80038a6:	191b      	adds	r3, r3, r4
 80038a8:	19db      	adds	r3, r3, r7
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	6a3a      	ldr	r2, [r7, #32]
 80038b0:	18d2      	adds	r2, r2, r3
 80038b2:	2122      	movs	r1, #34	@ 0x22
 80038b4:	190b      	adds	r3, r1, r4
 80038b6:	19db      	adds	r3, r3, r7
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	1909      	adds	r1, r1, r4
 80038bc:	19c9      	adds	r1, r1, r7
 80038be:	1c58      	adds	r0, r3, #1
 80038c0:	8008      	strh	r0, [r1, #0]
 80038c2:	0018      	movs	r0, r3
 80038c4:	8811      	ldrh	r1, [r2, #0]
 80038c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c8:	0042      	lsls	r2, r0, #1
 80038ca:	52d1      	strh	r1, [r2, r3]
	for(j=0; j<count; j++)
 80038cc:	2124      	movs	r1, #36	@ 0x24
 80038ce:	190b      	adds	r3, r1, r4
 80038d0:	19db      	adds	r3, r3, r7
 80038d2:	881a      	ldrh	r2, [r3, #0]
 80038d4:	190b      	adds	r3, r1, r4
 80038d6:	19db      	adds	r3, r3, r7
 80038d8:	3201      	adds	r2, #1
 80038da:	801a      	strh	r2, [r3, #0]
 80038dc:	2324      	movs	r3, #36	@ 0x24
 80038de:	2018      	movs	r0, #24
 80038e0:	181b      	adds	r3, r3, r0
 80038e2:	19da      	adds	r2, r3, r7
 80038e4:	2314      	movs	r3, #20
 80038e6:	181b      	adds	r3, r3, r0
 80038e8:	19db      	adds	r3, r3, r7
 80038ea:	8812      	ldrh	r2, [r2, #0]
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d3d7      	bcc.n	80038a2 <drawImage+0xe2>
for(i=0; i<c; i++)
 80038f2:	2126      	movs	r1, #38	@ 0x26
 80038f4:	180b      	adds	r3, r1, r0
 80038f6:	19db      	adds	r3, r3, r7
 80038f8:	881a      	ldrh	r2, [r3, #0]
 80038fa:	180b      	adds	r3, r1, r0
 80038fc:	19db      	adds	r3, r3, r7
 80038fe:	3201      	adds	r2, #1
 8003900:	801a      	strh	r2, [r3, #0]
 8003902:	2326      	movs	r3, #38	@ 0x26
 8003904:	2118      	movs	r1, #24
 8003906:	185b      	adds	r3, r3, r1
 8003908:	19da      	adds	r2, r3, r7
 800390a:	2348      	movs	r3, #72	@ 0x48
 800390c:	185b      	adds	r3, r3, r1
 800390e:	19db      	adds	r3, r3, r7
 8003910:	8812      	ldrh	r2, [r2, #0]
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d3a6      	bcc.n	8003866 <drawImage+0xa6>
	}
}
ST7735_DrawImage(y, x, w, h, bufffer);
 8003918:	2344      	movs	r3, #68	@ 0x44
 800391a:	185b      	adds	r3, r3, r1
 800391c:	19db      	adds	r3, r3, r7
 800391e:	881c      	ldrh	r4, [r3, #0]
 8003920:	2340      	movs	r3, #64	@ 0x40
 8003922:	185b      	adds	r3, r3, r1
 8003924:	19db      	adds	r3, r3, r7
 8003926:	881a      	ldrh	r2, [r3, #0]
 8003928:	231e      	movs	r3, #30
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	8819      	ldrh	r1, [r3, #0]
 800392e:	231c      	movs	r3, #28
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	8818      	ldrh	r0, [r3, #0]
 8003934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	0023      	movs	r3, r4
 800393a:	f000 fa31 	bl	8003da0 <ST7735_DrawImage>
 800393e:	46c5      	mov	sp, r8
}
 8003940:	46c0      	nop			@ (mov r8, r8)
 8003942:	46bd      	mov	sp, r7
 8003944:	b010      	add	sp, #64	@ 0x40
 8003946:	bc80      	pop	{r7}
 8003948:	46b8      	mov	r8, r7
 800394a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800394c <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8003950:	23a0      	movs	r3, #160	@ 0xa0
 8003952:	05db      	lsls	r3, r3, #23
 8003954:	2200      	movs	r2, #0
 8003956:	2120      	movs	r1, #32
 8003958:	0018      	movs	r0, r3
 800395a:	f002 feca 	bl	80066f2 <HAL_GPIO_WritePin>
}
 800395e:	46c0      	nop			@ (mov r8, r8)
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8003968:	23a0      	movs	r3, #160	@ 0xa0
 800396a:	05db      	lsls	r3, r3, #23
 800396c:	2201      	movs	r2, #1
 800396e:	2120      	movs	r1, #32
 8003970:	0018      	movs	r0, r3
 8003972:	f002 febe 	bl	80066f2 <HAL_GPIO_WritePin>
}
 8003976:	46c0      	nop			@ (mov r8, r8)
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <ST7735_Reset>:

void ST7735_Reset()
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8003980:	2380      	movs	r3, #128	@ 0x80
 8003982:	0219      	lsls	r1, r3, #8
 8003984:	23a0      	movs	r3, #160	@ 0xa0
 8003986:	05db      	lsls	r3, r3, #23
 8003988:	2200      	movs	r2, #0
 800398a:	0018      	movs	r0, r3
 800398c:	f002 feb1 	bl	80066f2 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8003990:	2005      	movs	r0, #5
 8003992:	f002 fc0d 	bl	80061b0 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8003996:	2380      	movs	r3, #128	@ 0x80
 8003998:	0219      	lsls	r1, r3, #8
 800399a:	23a0      	movs	r3, #160	@ 0xa0
 800399c:	05db      	lsls	r3, r3, #23
 800399e:	2201      	movs	r2, #1
 80039a0:	0018      	movs	r0, r3
 80039a2:	f002 fea6 	bl	80066f2 <HAL_GPIO_WritePin>
}
 80039a6:	46c0      	nop			@ (mov r8, r8)
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	0002      	movs	r2, r0
 80039b4:	1dfb      	adds	r3, r7, #7
 80039b6:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80039b8:	23a0      	movs	r3, #160	@ 0xa0
 80039ba:	05db      	lsls	r3, r3, #23
 80039bc:	2200      	movs	r2, #0
 80039be:	2110      	movs	r1, #16
 80039c0:	0018      	movs	r0, r3
 80039c2:	f002 fe96 	bl	80066f2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80039c6:	2301      	movs	r3, #1
 80039c8:	425b      	negs	r3, r3
 80039ca:	1df9      	adds	r1, r7, #7
 80039cc:	4803      	ldr	r0, [pc, #12]	@ (80039dc <ST7735_WriteCommand+0x30>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	f005 fb14 	bl	8008ffc <HAL_SPI_Transmit>
}
 80039d4:	46c0      	nop			@ (mov r8, r8)
 80039d6:	46bd      	mov	sp, r7
 80039d8:	b002      	add	sp, #8
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	200012ac 	.word	0x200012ac

080039e0 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80039ea:	23a0      	movs	r3, #160	@ 0xa0
 80039ec:	05db      	lsls	r3, r3, #23
 80039ee:	2201      	movs	r2, #1
 80039f0:	2110      	movs	r1, #16
 80039f2:	0018      	movs	r0, r3
 80039f4:	f002 fe7d 	bl	80066f2 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	2301      	movs	r3, #1
 80039fe:	425b      	negs	r3, r3
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	4803      	ldr	r0, [pc, #12]	@ (8003a10 <ST7735_WriteData+0x30>)
 8003a04:	f005 fafa 	bl	8008ffc <HAL_SPI_Transmit>
}
 8003a08:	46c0      	nop			@ (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b002      	add	sp, #8
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	200012ac 	.word	0x200012ac

08003a14 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8003a14:	b590      	push	{r4, r7, lr}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	607a      	str	r2, [r7, #4]
 8003a22:	220f      	movs	r2, #15
 8003a24:	18ba      	adds	r2, r7, r2
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 8003a2a:	e04a      	b.n	8003ac2 <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	607a      	str	r2, [r7, #4]
 8003a32:	210b      	movs	r1, #11
 8003a34:	187a      	adds	r2, r7, r1
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 8003a3a:	187b      	adds	r3, r7, r1
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f7ff ffb4 	bl	80039ac <ST7735_WriteCommand>

        numArgs = *addr++;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	607a      	str	r2, [r7, #4]
 8003a4a:	200a      	movs	r0, #10
 8003a4c:	183a      	adds	r2, r7, r0
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8003a52:	183b      	adds	r3, r7, r0
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	230c      	movs	r3, #12
 8003a5a:	18fb      	adds	r3, r7, r3
 8003a5c:	2180      	movs	r1, #128	@ 0x80
 8003a5e:	400a      	ands	r2, r1
 8003a60:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 8003a62:	183b      	adds	r3, r7, r0
 8003a64:	183a      	adds	r2, r7, r0
 8003a66:	7812      	ldrb	r2, [r2, #0]
 8003a68:	217f      	movs	r1, #127	@ 0x7f
 8003a6a:	400a      	ands	r2, r1
 8003a6c:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 8003a6e:	183b      	adds	r3, r7, r0
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00c      	beq.n	8003a90 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8003a76:	0004      	movs	r4, r0
 8003a78:	183b      	adds	r3, r7, r0
 8003a7a:	781a      	ldrb	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	0011      	movs	r1, r2
 8003a80:	0018      	movs	r0, r3
 8003a82:	f7ff ffad 	bl	80039e0 <ST7735_WriteData>
            addr += numArgs;
 8003a86:	193b      	adds	r3, r7, r4
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	18d3      	adds	r3, r2, r3
 8003a8e:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8003a90:	210c      	movs	r1, #12
 8003a92:	187b      	adds	r3, r7, r1
 8003a94:	881b      	ldrh	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d013      	beq.n	8003ac2 <DisplayInit+0xae>
            ms = *addr++;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	781a      	ldrb	r2, [r3, #0]
 8003aa2:	187b      	adds	r3, r7, r1
 8003aa4:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 8003aa6:	187b      	adds	r3, r7, r1
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	2bff      	cmp	r3, #255	@ 0xff
 8003aac:	d103      	bne.n	8003ab6 <DisplayInit+0xa2>
 8003aae:	187b      	adds	r3, r7, r1
 8003ab0:	22fa      	movs	r2, #250	@ 0xfa
 8003ab2:	0052      	lsls	r2, r2, #1
 8003ab4:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 8003ab6:	230c      	movs	r3, #12
 8003ab8:	18fb      	adds	r3, r7, r3
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	0018      	movs	r0, r3
 8003abe:	f002 fb77 	bl	80061b0 <HAL_Delay>
    while(numCommands--) {
 8003ac2:	220f      	movs	r2, #15
 8003ac4:	18bb      	adds	r3, r7, r2
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	18ba      	adds	r2, r7, r2
 8003aca:	1e59      	subs	r1, r3, #1
 8003acc:	7011      	strb	r1, [r2, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1ac      	bne.n	8003a2c <DisplayInit+0x18>
        }
    }
}
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	46c0      	nop			@ (mov r8, r8)
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b005      	add	sp, #20
 8003ada:	bd90      	pop	{r4, r7, pc}

08003adc <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8003adc:	b5b0      	push	{r4, r5, r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	0005      	movs	r5, r0
 8003ae4:	000c      	movs	r4, r1
 8003ae6:	0010      	movs	r0, r2
 8003ae8:	0019      	movs	r1, r3
 8003aea:	1dfb      	adds	r3, r7, #7
 8003aec:	1c2a      	adds	r2, r5, #0
 8003aee:	701a      	strb	r2, [r3, #0]
 8003af0:	1dbb      	adds	r3, r7, #6
 8003af2:	1c22      	adds	r2, r4, #0
 8003af4:	701a      	strb	r2, [r3, #0]
 8003af6:	1d7b      	adds	r3, r7, #5
 8003af8:	1c02      	adds	r2, r0, #0
 8003afa:	701a      	strb	r2, [r3, #0]
 8003afc:	1d3b      	adds	r3, r7, #4
 8003afe:	1c0a      	adds	r2, r1, #0
 8003b00:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8003b02:	202a      	movs	r0, #42	@ 0x2a
 8003b04:	f7ff ff52 	bl	80039ac <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8003b08:	210c      	movs	r1, #12
 8003b0a:	187b      	adds	r3, r7, r1
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	701a      	strb	r2, [r3, #0]
 8003b10:	4b1c      	ldr	r3, [pc, #112]	@ (8003b84 <ST7735_SetAddressWindow+0xa8>)
 8003b12:	781a      	ldrb	r2, [r3, #0]
 8003b14:	1dfb      	adds	r3, r7, #7
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	18d3      	adds	r3, r2, r3
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	187b      	adds	r3, r7, r1
 8003b1e:	705a      	strb	r2, [r3, #1]
 8003b20:	187b      	adds	r3, r7, r1
 8003b22:	2200      	movs	r2, #0
 8003b24:	709a      	strb	r2, [r3, #2]
 8003b26:	4b17      	ldr	r3, [pc, #92]	@ (8003b84 <ST7735_SetAddressWindow+0xa8>)
 8003b28:	781a      	ldrb	r2, [r3, #0]
 8003b2a:	1d7b      	adds	r3, r7, #5
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	18d3      	adds	r3, r2, r3
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	187b      	adds	r3, r7, r1
 8003b34:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8003b36:	000c      	movs	r4, r1
 8003b38:	187b      	adds	r3, r7, r1
 8003b3a:	2104      	movs	r1, #4
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f7ff ff4f 	bl	80039e0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8003b42:	202b      	movs	r0, #43	@ 0x2b
 8003b44:	f7ff ff32 	bl	80039ac <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8003b48:	4b0f      	ldr	r3, [pc, #60]	@ (8003b88 <ST7735_SetAddressWindow+0xac>)
 8003b4a:	781a      	ldrb	r2, [r3, #0]
 8003b4c:	1dbb      	adds	r3, r7, #6
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	18d3      	adds	r3, r2, r3
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	0021      	movs	r1, r4
 8003b56:	187b      	adds	r3, r7, r1
 8003b58:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 8003b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b88 <ST7735_SetAddressWindow+0xac>)
 8003b5c:	781a      	ldrb	r2, [r3, #0]
 8003b5e:	1d3b      	adds	r3, r7, #4
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	18d3      	adds	r3, r2, r3
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	187b      	adds	r3, r7, r1
 8003b68:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8003b6a:	187b      	adds	r3, r7, r1
 8003b6c:	2104      	movs	r1, #4
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f7ff ff36 	bl	80039e0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8003b74:	202c      	movs	r0, #44	@ 0x2c
 8003b76:	f7ff ff19 	bl	80039ac <ST7735_WriteCommand>
}
 8003b7a:	46c0      	nop			@ (mov r8, r8)
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	b004      	add	sp, #16
 8003b80:	bdb0      	pop	{r4, r5, r7, pc}
 8003b82:	46c0      	nop			@ (mov r8, r8)
 8003b84:	20000f13 	.word	0x20000f13
 8003b88:	20000f14 	.word	0x20000f14

08003b8c <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	0002      	movs	r2, r0
 8003b94:	1dfb      	adds	r3, r7, #7
 8003b96:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 8003b98:	f7ff fed8 	bl	800394c <ST7735_Select>
    ST7735_Reset();
 8003b9c:	f7ff feee 	bl	800397c <ST7735_Reset>
    DisplayInit(init_cmds1);
 8003ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8003bdc <ST7735_Init+0x50>)
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	f7ff ff36 	bl	8003a14 <DisplayInit>
    DisplayInit(init_cmds2);
 8003ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8003be0 <ST7735_Init+0x54>)
 8003baa:	0018      	movs	r0, r3
 8003bac:	f7ff ff32 	bl	8003a14 <DisplayInit>
    DisplayInit(init_cmds3);
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003be4 <ST7735_Init+0x58>)
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f7ff ff2e 	bl	8003a14 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003be8 <ST7735_Init+0x5c>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8003bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003bec <ST7735_Init+0x60>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8003bc4:	1dfb      	adds	r3, r7, #7
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f000 f811 	bl	8003bf0 <ST7735_SetRotation>
    ST7735_Unselect();
 8003bce:	f7ff fec9 	bl	8003964 <ST7735_Unselect>

}
 8003bd2:	46c0      	nop			@ (mov r8, r8)
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b002      	add	sp, #8
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	46c0      	nop			@ (mov r8, r8)
 8003bdc:	0800c844 	.word	0x0800c844
 8003be0:	0800c87c 	.word	0x0800c87c
 8003be4:	0800c88c 	.word	0x0800c88c
 8003be8:	20000f11 	.word	0x20000f11
 8003bec:	20000f12 	.word	0x20000f12

08003bf0 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	0002      	movs	r2, r0
 8003bf8:	1dfb      	adds	r3, r7, #7
 8003bfa:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8003bfc:	230f      	movs	r3, #15
 8003bfe:	18fb      	adds	r3, r7, r3
 8003c00:	2200      	movs	r2, #0
 8003c02:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8003c04:	1dfb      	adds	r3, r7, #7
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2203      	movs	r2, #3
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	4b36      	ldr	r3, [pc, #216]	@ (8003ce8 <ST7735_SetRotation+0xf8>)
 8003c10:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8003c12:	4b35      	ldr	r3, [pc, #212]	@ (8003ce8 <ST7735_SetRotation+0xf8>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d041      	beq.n	8003c9e <ST7735_SetRotation+0xae>
 8003c1a:	dc53      	bgt.n	8003cc4 <ST7735_SetRotation+0xd4>
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d02b      	beq.n	8003c78 <ST7735_SetRotation+0x88>
 8003c20:	dc50      	bgt.n	8003cc4 <ST7735_SetRotation+0xd4>
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <ST7735_SetRotation+0x3c>
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d013      	beq.n	8003c52 <ST7735_SetRotation+0x62>
 8003c2a:	e04b      	b.n	8003cc4 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8003c2c:	230f      	movs	r3, #15
 8003c2e:	18fb      	adds	r3, r7, r3
 8003c30:	22c0      	movs	r2, #192	@ 0xc0
 8003c32:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8003c34:	4b2d      	ldr	r3, [pc, #180]	@ (8003cec <ST7735_SetRotation+0xfc>)
 8003c36:	22a0      	movs	r2, #160	@ 0xa0
 8003c38:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8003c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8003cf0 <ST7735_SetRotation+0x100>)
 8003c3c:	2280      	movs	r2, #128	@ 0x80
 8003c3e:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8003c40:	4b2c      	ldr	r3, [pc, #176]	@ (8003cf4 <ST7735_SetRotation+0x104>)
 8003c42:	781a      	ldrb	r2, [r3, #0]
 8003c44:	4b2c      	ldr	r3, [pc, #176]	@ (8003cf8 <ST7735_SetRotation+0x108>)
 8003c46:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8003c48:	4b2c      	ldr	r3, [pc, #176]	@ (8003cfc <ST7735_SetRotation+0x10c>)
 8003c4a:	781a      	ldrb	r2, [r3, #0]
 8003c4c:	4b2c      	ldr	r3, [pc, #176]	@ (8003d00 <ST7735_SetRotation+0x110>)
 8003c4e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003c50:	e038      	b.n	8003cc4 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8003c52:	230f      	movs	r3, #15
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	22a0      	movs	r2, #160	@ 0xa0
 8003c58:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8003c5a:	4b25      	ldr	r3, [pc, #148]	@ (8003cf0 <ST7735_SetRotation+0x100>)
 8003c5c:	22a0      	movs	r2, #160	@ 0xa0
 8003c5e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8003c60:	4b22      	ldr	r3, [pc, #136]	@ (8003cec <ST7735_SetRotation+0xfc>)
 8003c62:	2280      	movs	r2, #128	@ 0x80
 8003c64:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8003c66:	4b23      	ldr	r3, [pc, #140]	@ (8003cf4 <ST7735_SetRotation+0x104>)
 8003c68:	781a      	ldrb	r2, [r3, #0]
 8003c6a:	4b25      	ldr	r3, [pc, #148]	@ (8003d00 <ST7735_SetRotation+0x110>)
 8003c6c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8003c6e:	4b23      	ldr	r3, [pc, #140]	@ (8003cfc <ST7735_SetRotation+0x10c>)
 8003c70:	781a      	ldrb	r2, [r3, #0]
 8003c72:	4b21      	ldr	r3, [pc, #132]	@ (8003cf8 <ST7735_SetRotation+0x108>)
 8003c74:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003c76:	e025      	b.n	8003cc4 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8003c78:	230f      	movs	r3, #15
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8003c80:	4b1a      	ldr	r3, [pc, #104]	@ (8003cec <ST7735_SetRotation+0xfc>)
 8003c82:	22a0      	movs	r2, #160	@ 0xa0
 8003c84:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8003c86:	4b1a      	ldr	r3, [pc, #104]	@ (8003cf0 <ST7735_SetRotation+0x100>)
 8003c88:	2280      	movs	r2, #128	@ 0x80
 8003c8a:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8003c8c:	4b19      	ldr	r3, [pc, #100]	@ (8003cf4 <ST7735_SetRotation+0x104>)
 8003c8e:	781a      	ldrb	r2, [r3, #0]
 8003c90:	4b19      	ldr	r3, [pc, #100]	@ (8003cf8 <ST7735_SetRotation+0x108>)
 8003c92:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8003c94:	4b19      	ldr	r3, [pc, #100]	@ (8003cfc <ST7735_SetRotation+0x10c>)
 8003c96:	781a      	ldrb	r2, [r3, #0]
 8003c98:	4b19      	ldr	r3, [pc, #100]	@ (8003d00 <ST7735_SetRotation+0x110>)
 8003c9a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003c9c:	e012      	b.n	8003cc4 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8003c9e:	230f      	movs	r3, #15
 8003ca0:	18fb      	adds	r3, r7, r3
 8003ca2:	2260      	movs	r2, #96	@ 0x60
 8003ca4:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8003ca6:	4b12      	ldr	r3, [pc, #72]	@ (8003cf0 <ST7735_SetRotation+0x100>)
 8003ca8:	22a0      	movs	r2, #160	@ 0xa0
 8003caa:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8003cac:	4b0f      	ldr	r3, [pc, #60]	@ (8003cec <ST7735_SetRotation+0xfc>)
 8003cae:	2280      	movs	r2, #128	@ 0x80
 8003cb0:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8003cb2:	4b10      	ldr	r3, [pc, #64]	@ (8003cf4 <ST7735_SetRotation+0x104>)
 8003cb4:	781a      	ldrb	r2, [r3, #0]
 8003cb6:	4b12      	ldr	r3, [pc, #72]	@ (8003d00 <ST7735_SetRotation+0x110>)
 8003cb8:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8003cba:	4b10      	ldr	r3, [pc, #64]	@ (8003cfc <ST7735_SetRotation+0x10c>)
 8003cbc:	781a      	ldrb	r2, [r3, #0]
 8003cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf8 <ST7735_SetRotation+0x108>)
 8003cc0:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003cc2:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 8003cc4:	f7ff fe42 	bl	800394c <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8003cc8:	2036      	movs	r0, #54	@ 0x36
 8003cca:	f7ff fe6f 	bl	80039ac <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8003cce:	230f      	movs	r3, #15
 8003cd0:	18fb      	adds	r3, r7, r3
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f7ff fe83 	bl	80039e0 <ST7735_WriteData>
  ST7735_Unselect();
 8003cda:	f7ff fe43 	bl	8003964 <ST7735_Unselect>
}
 8003cde:	46c0      	nop			@ (mov r8, r8)
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	b004      	add	sp, #16
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	46c0      	nop			@ (mov r8, r8)
 8003ce8:	20000f10 	.word	0x20000f10
 8003cec:	20000f0e 	.word	0x20000f0e
 8003cf0:	20000f0c 	.word	0x20000f0c
 8003cf4:	20000f11 	.word	0x20000f11
 8003cf8:	20000f13 	.word	0x20000f13
 8003cfc:	20000f12 	.word	0x20000f12
 8003d00:	20000f14 	.word	0x20000f14

08003d04 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8003d04:	b590      	push	{r4, r7, lr}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	0004      	movs	r4, r0
 8003d0c:	0008      	movs	r0, r1
 8003d0e:	0011      	movs	r1, r2
 8003d10:	1dbb      	adds	r3, r7, #6
 8003d12:	1c22      	adds	r2, r4, #0
 8003d14:	801a      	strh	r2, [r3, #0]
 8003d16:	1d3b      	adds	r3, r7, #4
 8003d18:	1c02      	adds	r2, r0, #0
 8003d1a:	801a      	strh	r2, [r3, #0]
 8003d1c:	1cbb      	adds	r3, r7, #2
 8003d1e:	1c0a      	adds	r2, r1, #0
 8003d20:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 8003d22:	1dbb      	adds	r3, r7, #6
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	4a1c      	ldr	r2, [pc, #112]	@ (8003d98 <ST7735_DrawPixel+0x94>)
 8003d28:	2100      	movs	r1, #0
 8003d2a:	5e52      	ldrsh	r2, [r2, r1]
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	da2f      	bge.n	8003d90 <ST7735_DrawPixel+0x8c>
 8003d30:	1d3b      	adds	r3, r7, #4
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	4a19      	ldr	r2, [pc, #100]	@ (8003d9c <ST7735_DrawPixel+0x98>)
 8003d36:	2100      	movs	r1, #0
 8003d38:	5e52      	ldrsh	r2, [r2, r1]
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	da28      	bge.n	8003d90 <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 8003d3e:	f7ff fe05 	bl	800394c <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8003d42:	1dbb      	adds	r3, r7, #6
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	b2d8      	uxtb	r0, r3
 8003d48:	1d3b      	adds	r3, r7, #4
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	b2d9      	uxtb	r1, r3
 8003d4e:	1dbb      	adds	r3, r7, #6
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	3301      	adds	r3, #1
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	1d3b      	adds	r3, r7, #4
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	f7ff febb 	bl	8003adc <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8003d66:	1cbb      	adds	r3, r7, #2
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	0a1b      	lsrs	r3, r3, #8
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	210c      	movs	r1, #12
 8003d72:	187b      	adds	r3, r7, r1
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	1cbb      	adds	r3, r7, #2
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	187b      	adds	r3, r7, r1
 8003d7e:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 8003d80:	187b      	adds	r3, r7, r1
 8003d82:	2102      	movs	r1, #2
 8003d84:	0018      	movs	r0, r3
 8003d86:	f7ff fe2b 	bl	80039e0 <ST7735_WriteData>

    ST7735_Unselect();
 8003d8a:	f7ff fdeb 	bl	8003964 <ST7735_Unselect>
 8003d8e:	e000      	b.n	8003d92 <ST7735_DrawPixel+0x8e>
        return;
 8003d90:	46c0      	nop			@ (mov r8, r8)
}
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b005      	add	sp, #20
 8003d96:	bd90      	pop	{r4, r7, pc}
 8003d98:	20000f0c 	.word	0x20000f0c
 8003d9c:	20000f0e 	.word	0x20000f0e

08003da0 <ST7735_DrawImage>:
    }

    ST7735_Unselect();
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8003da0:	b5b0      	push	{r4, r5, r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	0005      	movs	r5, r0
 8003da8:	000c      	movs	r4, r1
 8003daa:	0010      	movs	r0, r2
 8003dac:	0019      	movs	r1, r3
 8003dae:	1dbb      	adds	r3, r7, #6
 8003db0:	1c2a      	adds	r2, r5, #0
 8003db2:	801a      	strh	r2, [r3, #0]
 8003db4:	1d3b      	adds	r3, r7, #4
 8003db6:	1c22      	adds	r2, r4, #0
 8003db8:	801a      	strh	r2, [r3, #0]
 8003dba:	1cbb      	adds	r3, r7, #2
 8003dbc:	1c02      	adds	r2, r0, #0
 8003dbe:	801a      	strh	r2, [r3, #0]
 8003dc0:	003b      	movs	r3, r7
 8003dc2:	1c0a      	adds	r2, r1, #0
 8003dc4:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8003dc6:	1dbb      	adds	r3, r7, #6
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	4a2a      	ldr	r2, [pc, #168]	@ (8003e74 <ST7735_DrawImage+0xd4>)
 8003dcc:	2100      	movs	r1, #0
 8003dce:	5e52      	ldrsh	r2, [r2, r1]
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	da47      	bge.n	8003e64 <ST7735_DrawImage+0xc4>
 8003dd4:	1d3b      	adds	r3, r7, #4
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	4a27      	ldr	r2, [pc, #156]	@ (8003e78 <ST7735_DrawImage+0xd8>)
 8003dda:	2100      	movs	r1, #0
 8003ddc:	5e52      	ldrsh	r2, [r2, r1]
 8003dde:	4293      	cmp	r3, r2
 8003de0:	da40      	bge.n	8003e64 <ST7735_DrawImage+0xc4>
    if((x + w - 1) >= _width) return;
 8003de2:	1dbb      	adds	r3, r7, #6
 8003de4:	881a      	ldrh	r2, [r3, #0]
 8003de6:	1cbb      	adds	r3, r7, #2
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	18d3      	adds	r3, r2, r3
 8003dec:	4a21      	ldr	r2, [pc, #132]	@ (8003e74 <ST7735_DrawImage+0xd4>)
 8003dee:	2100      	movs	r1, #0
 8003df0:	5e52      	ldrsh	r2, [r2, r1]
 8003df2:	4293      	cmp	r3, r2
 8003df4:	dc38      	bgt.n	8003e68 <ST7735_DrawImage+0xc8>
    if((y + h - 1) >= _height) return;
 8003df6:	1d3b      	adds	r3, r7, #4
 8003df8:	881a      	ldrh	r2, [r3, #0]
 8003dfa:	003b      	movs	r3, r7
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	18d3      	adds	r3, r2, r3
 8003e00:	4a1d      	ldr	r2, [pc, #116]	@ (8003e78 <ST7735_DrawImage+0xd8>)
 8003e02:	2100      	movs	r1, #0
 8003e04:	5e52      	ldrsh	r2, [r2, r1]
 8003e06:	4293      	cmp	r3, r2
 8003e08:	dc30      	bgt.n	8003e6c <ST7735_DrawImage+0xcc>

    ST7735_Select();
 8003e0a:	f7ff fd9f 	bl	800394c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8003e0e:	1dbb      	adds	r3, r7, #6
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	b2d8      	uxtb	r0, r3
 8003e14:	1d3b      	adds	r3, r7, #4
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	b2d9      	uxtb	r1, r3
 8003e1a:	1dbb      	adds	r3, r7, #6
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	1cbb      	adds	r3, r7, #2
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	18d3      	adds	r3, r2, r3
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b2dc      	uxtb	r4, r3
 8003e2e:	1d3b      	adds	r3, r7, #4
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	003b      	movs	r3, r7
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	18d3      	adds	r3, r2, r3
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	0022      	movs	r2, r4
 8003e44:	f7ff fe4a 	bl	8003adc <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8003e48:	1cbb      	adds	r3, r7, #2
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	003a      	movs	r2, r7
 8003e4e:	8812      	ldrh	r2, [r2, #0]
 8003e50:	4353      	muls	r3, r2
 8003e52:	005a      	lsls	r2, r3, #1
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	0011      	movs	r1, r2
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f7ff fdc1 	bl	80039e0 <ST7735_WriteData>
    ST7735_Unselect();
 8003e5e:	f7ff fd81 	bl	8003964 <ST7735_Unselect>
 8003e62:	e004      	b.n	8003e6e <ST7735_DrawImage+0xce>
    if((x >= _width) || (y >= _height)) return;
 8003e64:	46c0      	nop			@ (mov r8, r8)
 8003e66:	e002      	b.n	8003e6e <ST7735_DrawImage+0xce>
    if((x + w - 1) >= _width) return;
 8003e68:	46c0      	nop			@ (mov r8, r8)
 8003e6a:	e000      	b.n	8003e6e <ST7735_DrawImage+0xce>
    if((y + h - 1) >= _height) return;
 8003e6c:	46c0      	nop			@ (mov r8, r8)
}
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b002      	add	sp, #8
 8003e72:	bdb0      	pop	{r4, r5, r7, pc}
 8003e74:	20000f0c 	.word	0x20000f0c
 8003e78:	20000f0e 	.word	0x20000f0e

08003e7c <minmea_tocoord>:
/**
 * Convert a raw coordinate to a floating point DD.DDD... value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tocoord(struct minmea_float *f)
{
 8003e7c:	b5b0      	push	{r4, r5, r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
    if (f->scale == 0)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <minmea_tocoord+0x14>
        return NAN;
 8003e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8003f00 <minmea_tocoord+0x84>)
 8003e8e:	e033      	b.n	8003ef8 <minmea_tocoord+0x7c>
    int_least32_t degrees = f->value / (f->scale * 100);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2164      	movs	r1, #100	@ 0x64
 8003e9a:	434b      	muls	r3, r1
 8003e9c:	0019      	movs	r1, r3
 8003e9e:	0010      	movs	r0, r2
 8003ea0:	f7fc f9ce 	bl	8000240 <__divsi3>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	60fb      	str	r3, [r7, #12]
    int_least32_t minutes = f->value % (f->scale * 100);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2164      	movs	r1, #100	@ 0x64
 8003eb2:	434b      	muls	r3, r1
 8003eb4:	0019      	movs	r1, r3
 8003eb6:	0010      	movs	r0, r2
 8003eb8:	f7fc faa8 	bl	800040c <__aeabi_idivmod>
 8003ebc:	000b      	movs	r3, r1
 8003ebe:	60bb      	str	r3, [r7, #8]
    return (float) degrees + (float) minutes / (60 * f->scale);
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f7fd fa97 	bl	80013f4 <__aeabi_i2f>
 8003ec6:	1c04      	adds	r4, r0, #0
 8003ec8:	68b8      	ldr	r0, [r7, #8]
 8003eca:	f7fd fa93 	bl	80013f4 <__aeabi_i2f>
 8003ece:	1c05      	adds	r5, r0, #0
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	0013      	movs	r3, r2
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	0018      	movs	r0, r3
 8003ede:	f7fd fa89 	bl	80013f4 <__aeabi_i2f>
 8003ee2:	1c03      	adds	r3, r0, #0
 8003ee4:	1c19      	adds	r1, r3, #0
 8003ee6:	1c28      	adds	r0, r5, #0
 8003ee8:	f7fc fd9c 	bl	8000a24 <__aeabi_fdiv>
 8003eec:	1c03      	adds	r3, r0, #0
 8003eee:	1c19      	adds	r1, r3, #0
 8003ef0:	1c20      	adds	r0, r4, #0
 8003ef2:	f7fc fc0d 	bl	8000710 <__aeabi_fadd>
 8003ef6:	1c03      	adds	r3, r0, #0
}
 8003ef8:	1c18      	adds	r0, r3, #0
 8003efa:	46bd      	mov	sp, r7
 8003efc:	b004      	add	sp, #16
 8003efe:	bdb0      	pop	{r4, r5, r7, pc}
 8003f00:	7fc00000 	.word	0x7fc00000

08003f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f04:	b590      	push	{r4, r7, lr}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f0a:	f002 f8cb 	bl	80060a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f0e:	f000 fb59 	bl	80045c4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  steps=0;
 8003f12:	4bba      	ldr	r3, [pc, #744]	@ (80041fc <main+0x2f8>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
  sitting0.Body = *imgSitting0;
 8003f18:	4bb9      	ldr	r3, [pc, #740]	@ (8004200 <main+0x2fc>)
 8003f1a:	4aba      	ldr	r2, [pc, #744]	@ (8004204 <main+0x300>)
 8003f1c:	601a      	str	r2, [r3, #0]
  sitting0.Size = 307;
 8003f1e:	4bb8      	ldr	r3, [pc, #736]	@ (8004200 <main+0x2fc>)
 8003f20:	2234      	movs	r2, #52	@ 0x34
 8003f22:	32ff      	adds	r2, #255	@ 0xff
 8003f24:	605a      	str	r2, [r3, #4]
  sitting1.Body = *imgSitting1;
 8003f26:	4bb8      	ldr	r3, [pc, #736]	@ (8004208 <main+0x304>)
 8003f28:	4ab8      	ldr	r2, [pc, #736]	@ (800420c <main+0x308>)
 8003f2a:	601a      	str	r2, [r3, #0]
  sitting1.Size = 305;
 8003f2c:	4bb6      	ldr	r3, [pc, #728]	@ (8004208 <main+0x304>)
 8003f2e:	2232      	movs	r2, #50	@ 0x32
 8003f30:	32ff      	adds	r2, #255	@ 0xff
 8003f32:	605a      	str	r2, [r3, #4]
  animSitting[0] = sitting0;
 8003f34:	4bb6      	ldr	r3, [pc, #728]	@ (8004210 <main+0x30c>)
 8003f36:	4ab2      	ldr	r2, [pc, #712]	@ (8004200 <main+0x2fc>)
 8003f38:	ca03      	ldmia	r2!, {r0, r1}
 8003f3a:	c303      	stmia	r3!, {r0, r1}
  animSitting[1] = sitting1;
 8003f3c:	4bb4      	ldr	r3, [pc, #720]	@ (8004210 <main+0x30c>)
 8003f3e:	4ab2      	ldr	r2, [pc, #712]	@ (8004208 <main+0x304>)
 8003f40:	3308      	adds	r3, #8
 8003f42:	ca03      	ldmia	r2!, {r0, r1}
 8003f44:	c303      	stmia	r3!, {r0, r1}
  game.evo=0;
 8003f46:	4bb3      	ldr	r3, [pc, #716]	@ (8004214 <main+0x310>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	741a      	strb	r2, [r3, #16]
  game.uid[0]='h';
 8003f4c:	4ab1      	ldr	r2, [pc, #708]	@ (8004214 <main+0x310>)
 8003f4e:	2394      	movs	r3, #148	@ 0x94
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	2168      	movs	r1, #104	@ 0x68
 8003f54:	54d1      	strb	r1, [r2, r3]
  game.uid[1]='i';
 8003f56:	4aaf      	ldr	r2, [pc, #700]	@ (8004214 <main+0x310>)
 8003f58:	232a      	movs	r3, #42	@ 0x2a
 8003f5a:	33ff      	adds	r3, #255	@ 0xff
 8003f5c:	2169      	movs	r1, #105	@ 0x69
 8003f5e:	54d1      	strb	r1, [r2, r3]
  game.allSteps=0;
 8003f60:	4aac      	ldr	r2, [pc, #688]	@ (8004214 <main+0x310>)
 8003f62:	238c      	movs	r3, #140	@ 0x8c
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	2100      	movs	r1, #0
 8003f68:	50d1      	str	r1, [r2, r3]
  game.mood=100;
 8003f6a:	4baa      	ldr	r3, [pc, #680]	@ (8004214 <main+0x310>)
 8003f6c:	2264      	movs	r2, #100	@ 0x64
 8003f6e:	745a      	strb	r2, [r3, #17]
  game.numLocations=3;
 8003f70:	4ba8      	ldr	r3, [pc, #672]	@ (8004214 <main+0x310>)
 8003f72:	2203      	movs	r2, #3
 8003f74:	615a      	str	r2, [r3, #20]
  game.stepsToday=0;
 8003f76:	4aa7      	ldr	r2, [pc, #668]	@ (8004214 <main+0x310>)
 8003f78:	2390      	movs	r3, #144	@ 0x90
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	50d1      	str	r1, [r2, r3]
  game.weeklySteps=0;
 8003f80:	4aa4      	ldr	r2, [pc, #656]	@ (8004214 <main+0x310>)
 8003f82:	238e      	movs	r3, #142	@ 0x8e
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	2100      	movs	r1, #0
 8003f88:	50d1      	str	r1, [r2, r3]
  game.challengeGoal=20000;
 8003f8a:	4aa2      	ldr	r2, [pc, #648]	@ (8004214 <main+0x310>)
 8003f8c:	2392      	movs	r3, #146	@ 0x92
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	49a1      	ldr	r1, [pc, #644]	@ (8004218 <main+0x314>)
 8003f92:	50d1      	str	r1, [r2, r3]
  dummy.lat=12.34567;
 8003f94:	4ba1      	ldr	r3, [pc, #644]	@ (800421c <main+0x318>)
 8003f96:	4aa2      	ldr	r2, [pc, #648]	@ (8004220 <main+0x31c>)
 8003f98:	601a      	str	r2, [r3, #0]
  dummy.lon=-89.10111;
 8003f9a:	4ba0      	ldr	r3, [pc, #640]	@ (800421c <main+0x318>)
 8003f9c:	4aa1      	ldr	r2, [pc, #644]	@ (8004224 <main+0x320>)
 8003f9e:	605a      	str	r2, [r3, #4]
  game.positions[0]=dummy;
 8003fa0:	4b9c      	ldr	r3, [pc, #624]	@ (8004214 <main+0x310>)
 8003fa2:	4a9e      	ldr	r2, [pc, #632]	@ (800421c <main+0x318>)
 8003fa4:	3318      	adds	r3, #24
 8003fa6:	ca03      	ldmia	r2!, {r0, r1}
 8003fa8:	c303      	stmia	r3!, {r0, r1}
  game.positions[1]=dummy;
 8003faa:	4b9a      	ldr	r3, [pc, #616]	@ (8004214 <main+0x310>)
 8003fac:	4a9b      	ldr	r2, [pc, #620]	@ (800421c <main+0x318>)
 8003fae:	3320      	adds	r3, #32
 8003fb0:	ca03      	ldmia	r2!, {r0, r1}
 8003fb2:	c303      	stmia	r3!, {r0, r1}
  game.positions[2]=dummy;
 8003fb4:	4b97      	ldr	r3, [pc, #604]	@ (8004214 <main+0x310>)
 8003fb6:	4a99      	ldr	r2, [pc, #612]	@ (800421c <main+0x318>)
 8003fb8:	3328      	adds	r3, #40	@ 0x28
 8003fba:	ca03      	ldmia	r2!, {r0, r1}
 8003fbc:	c303      	stmia	r3!, {r0, r1}
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fbe:	f000 fdb7 	bl	8004b30 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003fc2:	f000 fb61 	bl	8004688 <MX_I2C1_Init>
  MX_SPI1_Init();
 8003fc6:	f000 fc4f 	bl	8004868 <MX_SPI1_Init>
  MX_TIM17_Init();
 8003fca:	f000 fc8d 	bl	80048e8 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8003fce:	f000 fd13 	bl	80049f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8003fd2:	f000 fd5f 	bl	8004a94 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8003fd6:	f000 fb97 	bl	8004708 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
  ST7735_Unselect();
 8003fda:	f7ff fcc3 	bl	8003964 <ST7735_Unselect>
  ST7735_Init(1);
 8003fde:	2001      	movs	r0, #1
 8003fe0:	f7ff fdd4 	bl	8003b8c <ST7735_Init>
  //testAll();
  buffer[0] = 'A';
 8003fe4:	4b90      	ldr	r3, [pc, #576]	@ (8004228 <main+0x324>)
 8003fe6:	2241      	movs	r2, #65	@ 0x41
 8003fe8:	701a      	strb	r2, [r3, #0]
  buffer[1] = 'B';
 8003fea:	4b8f      	ldr	r3, [pc, #572]	@ (8004228 <main+0x324>)
 8003fec:	2242      	movs	r2, #66	@ 0x42
 8003fee:	705a      	strb	r2, [r3, #1]
  TIM17->CCR1 = 5;
 8003ff0:	4b8e      	ldr	r3, [pc, #568]	@ (800422c <main+0x328>)
 8003ff2:	2205      	movs	r2, #5
 8003ff4:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM17->PSC=64;
 8003ff6:	4b8d      	ldr	r3, [pc, #564]	@ (800422c <main+0x328>)
 8003ff8:	2240      	movs	r2, #64	@ 0x40
 8003ffa:	629a      	str	r2, [r3, #40]	@ 0x28
  uint8_t ret=0;
 8003ffc:	1dfb      	adds	r3, r7, #7
 8003ffe:	2200      	movs	r2, #0
 8004000:	701a      	strb	r2, [r3, #0]
    //_ADXL343_Init();

      //Pedometer Setup
      _ADXL343_WriteReg8(0x19, 0x02);
 8004002:	2102      	movs	r1, #2
 8004004:	2019      	movs	r0, #25
 8004006:	f000 fe89 	bl	8004d1c <_ADXL343_WriteReg8>
      ////wait

      _ADXL343_WriteReg8(0x7C, 0x01);
 800400a:	2101      	movs	r1, #1
 800400c:	207c      	movs	r0, #124	@ 0x7c
 800400e:	f000 fe85 	bl	8004d1c <_ADXL343_WriteReg8>
       _ADXL343_WriteReg8(0x1A, 0x38);
 8004012:	2138      	movs	r1, #56	@ 0x38
 8004014:	201a      	movs	r0, #26
 8004016:	f000 fe81 	bl	8004d1c <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1B, 0x04);
 800401a:	2104      	movs	r1, #4
 800401c:	201b      	movs	r0, #27
 800401e:	f000 fe7d 	bl	8004d1c <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1F, 0x80);
 8004022:	2180      	movs	r1, #128	@ 0x80
 8004024:	201f      	movs	r0, #31
 8004026:	f000 fe79 	bl	8004d1c <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x21, 0x80);
 800402a:	2180      	movs	r1, #128	@ 0x80
 800402c:	2021      	movs	r0, #33	@ 0x21
 800402e:	f000 fe75 	bl	8004d1c <_ADXL343_WriteReg8>



      //  //Step Counter
      _ADXL343_WriteReg8(0x18, 0x01); // enable walking mode
 8004032:	2101      	movs	r1, #1
 8004034:	2018      	movs	r0, #24
 8004036:	f000 fe71 	bl	8004d1c <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x20, 0x01); // enable step interrupt
 800403a:	2101      	movs	r1, #1
 800403c:	2020      	movs	r0, #32
 800403e:	f000 fe6d 	bl	8004d1c <_ADXL343_WriteReg8>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
      //Before entering the while, fill the screen to clear it once
      fillScreen(BLACK);
 8004042:	2000      	movs	r0, #0
 8004044:	f7ff fb48 	bl	80036d8 <fillScreen>
  while (1)
  {

	  if((totalFrames++)%600==0) GetLatLon();
 8004048:	4b79      	ldr	r3, [pc, #484]	@ (8004230 <main+0x32c>)
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	b291      	uxth	r1, r2
 8004050:	4a77      	ldr	r2, [pc, #476]	@ (8004230 <main+0x32c>)
 8004052:	8011      	strh	r1, [r2, #0]
 8004054:	2296      	movs	r2, #150	@ 0x96
 8004056:	0091      	lsls	r1, r2, #2
 8004058:	0018      	movs	r0, r3
 800405a:	f7fc f8ed 	bl	8000238 <__aeabi_uidivmod>
 800405e:	000b      	movs	r3, r1
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <main+0x166>
 8004066:	f000 fe7f 	bl	8004d68 <GetLatLon>
	  //SendData();
	  //ReceiveData();
	  if((game.time.hours%dayLength)==0&&game.time.hours>0) game.stepsToday=0;
 800406a:	4b6a      	ldr	r3, [pc, #424]	@ (8004214 <main+0x310>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2218      	movs	r2, #24
 8004070:	0011      	movs	r1, r2
 8004072:	0018      	movs	r0, r3
 8004074:	f7fc f9ca 	bl	800040c <__aeabi_idivmod>
 8004078:	1e0b      	subs	r3, r1, #0
 800407a:	d108      	bne.n	800408e <main+0x18a>
 800407c:	4b65      	ldr	r3, [pc, #404]	@ (8004214 <main+0x310>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	dd04      	ble.n	800408e <main+0x18a>
 8004084:	4a63      	ldr	r2, [pc, #396]	@ (8004214 <main+0x310>)
 8004086:	2390      	movs	r3, #144	@ 0x90
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	2100      	movs	r1, #0
 800408c:	50d1      	str	r1, [r2, r3]
	  if((game.time.hours%weekLength)==0&&game.time.hours>0) game.weeklySteps=0;
 800408e:	4b61      	ldr	r3, [pc, #388]	@ (8004214 <main+0x310>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	22a8      	movs	r2, #168	@ 0xa8
 8004094:	0011      	movs	r1, r2
 8004096:	0018      	movs	r0, r3
 8004098:	f7fc f9b8 	bl	800040c <__aeabi_idivmod>
 800409c:	1e0b      	subs	r3, r1, #0
 800409e:	d108      	bne.n	80040b2 <main+0x1ae>
 80040a0:	4b5c      	ldr	r3, [pc, #368]	@ (8004214 <main+0x310>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	dd04      	ble.n	80040b2 <main+0x1ae>
 80040a8:	4a5a      	ldr	r2, [pc, #360]	@ (8004214 <main+0x310>)
 80040aa:	238e      	movs	r3, #142	@ 0x8e
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	2100      	movs	r1, #0
 80040b0:	50d1      	str	r1, [r2, r3]
	  if(steps!=0){
 80040b2:	4b52      	ldr	r3, [pc, #328]	@ (80041fc <main+0x2f8>)
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d033      	beq.n	8004122 <main+0x21e>
	  game.stepsToday +=steps*game.numLocations;
 80040ba:	4a56      	ldr	r2, [pc, #344]	@ (8004214 <main+0x310>)
 80040bc:	2390      	movs	r3, #144	@ 0x90
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	58d2      	ldr	r2, [r2, r3]
 80040c2:	4b4e      	ldr	r3, [pc, #312]	@ (80041fc <main+0x2f8>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	0019      	movs	r1, r3
 80040c8:	4b52      	ldr	r3, [pc, #328]	@ (8004214 <main+0x310>)
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	434b      	muls	r3, r1
 80040ce:	18d1      	adds	r1, r2, r3
 80040d0:	4a50      	ldr	r2, [pc, #320]	@ (8004214 <main+0x310>)
 80040d2:	2390      	movs	r3, #144	@ 0x90
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	50d1      	str	r1, [r2, r3]
	  game.weeklySteps+=steps*game.numLocations;
 80040d8:	4a4e      	ldr	r2, [pc, #312]	@ (8004214 <main+0x310>)
 80040da:	238e      	movs	r3, #142	@ 0x8e
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	58d2      	ldr	r2, [r2, r3]
 80040e0:	4b46      	ldr	r3, [pc, #280]	@ (80041fc <main+0x2f8>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	0019      	movs	r1, r3
 80040e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004214 <main+0x310>)
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	434b      	muls	r3, r1
 80040ec:	18d1      	adds	r1, r2, r3
 80040ee:	4a49      	ldr	r2, [pc, #292]	@ (8004214 <main+0x310>)
 80040f0:	238e      	movs	r3, #142	@ 0x8e
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	50d1      	str	r1, [r2, r3]
	  game.allSteps+=steps*game.numLocations;
 80040f6:	4a47      	ldr	r2, [pc, #284]	@ (8004214 <main+0x310>)
 80040f8:	238c      	movs	r3, #140	@ 0x8c
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	58d2      	ldr	r2, [r2, r3]
 80040fe:	4b3f      	ldr	r3, [pc, #252]	@ (80041fc <main+0x2f8>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	0019      	movs	r1, r3
 8004104:	4b43      	ldr	r3, [pc, #268]	@ (8004214 <main+0x310>)
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	434b      	muls	r3, r1
 800410a:	18d1      	adds	r1, r2, r3
 800410c:	4a41      	ldr	r2, [pc, #260]	@ (8004214 <main+0x310>)
 800410e:	238c      	movs	r3, #140	@ 0x8c
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	50d1      	str	r1, [r2, r3]
	  steps=0;
 8004114:	4b39      	ldr	r3, [pc, #228]	@ (80041fc <main+0x2f8>)
 8004116:	2200      	movs	r2, #0
 8004118:	701a      	strb	r2, [r3, #0]
	  _ADXL343_WriteReg8(0x7E, 0xB1);
 800411a:	21b1      	movs	r1, #177	@ 0xb1
 800411c:	207e      	movs	r0, #126	@ 0x7e
 800411e:	f000 fdfd 	bl	8004d1c <_ADXL343_WriteReg8>
	  }
	  //SendData();
	  //HAL_UART_Transmit(&huart2, "hello", 5, 100);
	  switch(currentMenu){
 8004122:	4b44      	ldr	r3, [pc, #272]	@ (8004234 <main+0x330>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	2b03      	cmp	r3, #3
 8004128:	d100      	bne.n	800412c <main+0x228>
 800412a:	e145      	b.n	80043b8 <main+0x4b4>
 800412c:	dc8c      	bgt.n	8004048 <main+0x144>
 800412e:	2b02      	cmp	r3, #2
 8004130:	d100      	bne.n	8004134 <main+0x230>
 8004132:	e0fe      	b.n	8004332 <main+0x42e>
 8004134:	dc88      	bgt.n	8004048 <main+0x144>
 8004136:	2b00      	cmp	r3, #0
 8004138:	d100      	bne.n	800413c <main+0x238>
 800413a:	e089      	b.n	8004250 <main+0x34c>
 800413c:	2b01      	cmp	r3, #1
 800413e:	d000      	beq.n	8004142 <main+0x23e>
 8004140:	e782      	b.n	8004048 <main+0x144>
	  case Main:


		  if((++updateScreen)>=5)
 8004142:	4b3d      	ldr	r3, [pc, #244]	@ (8004238 <main+0x334>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	4b3b      	ldr	r3, [pc, #236]	@ (8004238 <main+0x334>)
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	4b3a      	ldr	r3, [pc, #232]	@ (8004238 <main+0x334>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b04      	cmp	r3, #4
 8004152:	d922      	bls.n	800419a <main+0x296>
		  {
			  //Animate character
			  Animate(animSitting,1);
 8004154:	4b2e      	ldr	r3, [pc, #184]	@ (8004210 <main+0x30c>)
 8004156:	2101      	movs	r1, #1
 8004158:	0018      	movs	r0, r3
 800415a:	f000 fd7b 	bl	8004c54 <Animate>
			  updateScreen = 0;
 800415e:	4b36      	ldr	r3, [pc, #216]	@ (8004238 <main+0x334>)
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
			  //Update steps
			  _ADXL343_ReadReg8(0x15, &steps, 1);
 8004164:	4b25      	ldr	r3, [pc, #148]	@ (80041fc <main+0x2f8>)
 8004166:	2201      	movs	r2, #1
 8004168:	0019      	movs	r1, r3
 800416a:	2015      	movs	r0, #21
 800416c:	f000 fda4 	bl	8004cb8 <_ADXL343_ReadReg8>
			  sprintf(buffer2, "Steps today: %d ", steps);
 8004170:	4b22      	ldr	r3, [pc, #136]	@ (80041fc <main+0x2f8>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	001a      	movs	r2, r3
 8004176:	4931      	ldr	r1, [pc, #196]	@ (800423c <main+0x338>)
 8004178:	4b31      	ldr	r3, [pc, #196]	@ (8004240 <main+0x33c>)
 800417a:	0018      	movs	r0, r3
 800417c:	f007 f9da 	bl	800b534 <siprintf>
			  drawString(0, 20, buffer2, WHITE, BLACK, 1, 1);
 8004180:	2301      	movs	r3, #1
 8004182:	425b      	negs	r3, r3
 8004184:	4a2e      	ldr	r2, [pc, #184]	@ (8004240 <main+0x33c>)
 8004186:	2101      	movs	r1, #1
 8004188:	9102      	str	r1, [sp, #8]
 800418a:	2101      	movs	r1, #1
 800418c:	9101      	str	r1, [sp, #4]
 800418e:	2100      	movs	r1, #0
 8004190:	9100      	str	r1, [sp, #0]
 8004192:	2114      	movs	r1, #20
 8004194:	2000      	movs	r0, #0
 8004196:	f7ff f95b 	bl	8003450 <drawString>
		  }


		  //Change current Menu
		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET ) {
 800419a:	4b2a      	ldr	r3, [pc, #168]	@ (8004244 <main+0x340>)
 800419c:	2104      	movs	r1, #4
 800419e:	0018      	movs	r0, r3
 80041a0:	f002 fa8a 	bl	80066b8 <HAL_GPIO_ReadPin>
 80041a4:	0003      	movs	r3, r0
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d10e      	bne.n	80041c8 <main+0x2c4>
			  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80041aa:	4b27      	ldr	r3, [pc, #156]	@ (8004248 <main+0x344>)
 80041ac:	2100      	movs	r1, #0
 80041ae:	0018      	movs	r0, r3
 80041b0:	f005 fab2 	bl	8009718 <HAL_TIM_PWM_Start>
			  currentMenu = MusicTest;
 80041b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004234 <main+0x330>)
 80041b6:	2202      	movs	r2, #2
 80041b8:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 80041ba:	4b24      	ldr	r3, [pc, #144]	@ (800424c <main+0x348>)
 80041bc:	2200      	movs	r2, #0
 80041be:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 80041c0:	2000      	movs	r0, #0
 80041c2:	f7ff fa89 	bl	80036d8 <fillScreen>
		  }
		  else
			  canChange = 1;


		  break;
 80041c6:	e1bf      	b.n	8004548 <main+0x644>
		  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET ) {
 80041c8:	2380      	movs	r3, #128	@ 0x80
 80041ca:	011a      	lsls	r2, r3, #4
 80041cc:	23a0      	movs	r3, #160	@ 0xa0
 80041ce:	05db      	lsls	r3, r3, #23
 80041d0:	0011      	movs	r1, r2
 80041d2:	0018      	movs	r0, r3
 80041d4:	f002 fa70 	bl	80066b8 <HAL_GPIO_ReadPin>
 80041d8:	0003      	movs	r3, r0
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d109      	bne.n	80041f2 <main+0x2ee>
			  currentMenu = StatsDisplay;
 80041de:	4b15      	ldr	r3, [pc, #84]	@ (8004234 <main+0x330>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 80041e4:	4b19      	ldr	r3, [pc, #100]	@ (800424c <main+0x348>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 80041ea:	2000      	movs	r0, #0
 80041ec:	f7ff fa74 	bl	80036d8 <fillScreen>
		  break;
 80041f0:	e1aa      	b.n	8004548 <main+0x644>
			  canChange = 1;
 80041f2:	4b16      	ldr	r3, [pc, #88]	@ (800424c <main+0x348>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	701a      	strb	r2, [r3, #0]
		  break;
 80041f8:	e1a6      	b.n	8004548 <main+0x644>
 80041fa:	46c0      	nop			@ (mov r8, r8)
 80041fc:	2000122b 	.word	0x2000122b
 8004200:	2000118c 	.word	0x2000118c
 8004204:	200004a0 	.word	0x200004a0
 8004208:	20001194 	.word	0x20001194
 800420c:	2000096c 	.word	0x2000096c
 8004210:	2000119c 	.word	0x2000119c
 8004214:	20000f18 	.word	0x20000f18
 8004218:	00004e20 	.word	0x00004e20
 800421c:	20001060 	.word	0x20001060
 8004220:	414587dd 	.word	0x414587dd
 8004224:	c2b233c5 	.word	0xc2b233c5
 8004228:	20001108 	.word	0x20001108
 800422c:	40014800 	.word	0x40014800
 8004230:	20001104 	.word	0x20001104
 8004234:	20000e80 	.word	0x20000e80
 8004238:	20001188 	.word	0x20001188
 800423c:	0800c0a4 	.word	0x0800c0a4
 8004240:	200011c4 	.word	0x200011c4
 8004244:	50000400 	.word	0x50000400
 8004248:	20001310 	.word	0x20001310
 800424c:	20000e81 	.word	0x20000e81
	  case StatsDisplay:

		  if((++updateScreen)>=5)
 8004250:	4bbe      	ldr	r3, [pc, #760]	@ (800454c <main+0x648>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	4bbd      	ldr	r3, [pc, #756]	@ (800454c <main+0x648>)
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	4bbc      	ldr	r3, [pc, #752]	@ (800454c <main+0x648>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b04      	cmp	r3, #4
 8004260:	d951      	bls.n	8004306 <main+0x402>
		  {
			  //fillScreen(BLACK);

			  drawString(0, 150, "STEPS", WHITE, BLACK, 1, 1);
 8004262:	2301      	movs	r3, #1
 8004264:	425b      	negs	r3, r3
 8004266:	4aba      	ldr	r2, [pc, #744]	@ (8004550 <main+0x64c>)
 8004268:	2101      	movs	r1, #1
 800426a:	9102      	str	r1, [sp, #8]
 800426c:	2101      	movs	r1, #1
 800426e:	9101      	str	r1, [sp, #4]
 8004270:	2100      	movs	r1, #0
 8004272:	9100      	str	r1, [sp, #0]
 8004274:	2196      	movs	r1, #150	@ 0x96
 8004276:	2000      	movs	r0, #0
 8004278:	f7ff f8ea 	bl	8003450 <drawString>
			  sprintf(buffer2, "Today: %d ", game.stepsToday);
 800427c:	4ab5      	ldr	r2, [pc, #724]	@ (8004554 <main+0x650>)
 800427e:	2390      	movs	r3, #144	@ 0x90
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	58d2      	ldr	r2, [r2, r3]
 8004284:	49b4      	ldr	r1, [pc, #720]	@ (8004558 <main+0x654>)
 8004286:	4bb5      	ldr	r3, [pc, #724]	@ (800455c <main+0x658>)
 8004288:	0018      	movs	r0, r3
 800428a:	f007 f953 	bl	800b534 <siprintf>
			  drawString(0, 140, buffer2, WHITE, BLACK, 1, 1);
 800428e:	2301      	movs	r3, #1
 8004290:	425b      	negs	r3, r3
 8004292:	4ab2      	ldr	r2, [pc, #712]	@ (800455c <main+0x658>)
 8004294:	2101      	movs	r1, #1
 8004296:	9102      	str	r1, [sp, #8]
 8004298:	2101      	movs	r1, #1
 800429a:	9101      	str	r1, [sp, #4]
 800429c:	2100      	movs	r1, #0
 800429e:	9100      	str	r1, [sp, #0]
 80042a0:	218c      	movs	r1, #140	@ 0x8c
 80042a2:	2000      	movs	r0, #0
 80042a4:	f7ff f8d4 	bl	8003450 <drawString>
			  sprintf(buffer2, "This week: %d ", game.weeklySteps);
 80042a8:	4aaa      	ldr	r2, [pc, #680]	@ (8004554 <main+0x650>)
 80042aa:	238e      	movs	r3, #142	@ 0x8e
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	58d2      	ldr	r2, [r2, r3]
 80042b0:	49ab      	ldr	r1, [pc, #684]	@ (8004560 <main+0x65c>)
 80042b2:	4baa      	ldr	r3, [pc, #680]	@ (800455c <main+0x658>)
 80042b4:	0018      	movs	r0, r3
 80042b6:	f007 f93d 	bl	800b534 <siprintf>
			  drawString(0, 130, buffer2, WHITE, BLACK, 1, 1);
 80042ba:	2301      	movs	r3, #1
 80042bc:	425b      	negs	r3, r3
 80042be:	4aa7      	ldr	r2, [pc, #668]	@ (800455c <main+0x658>)
 80042c0:	2101      	movs	r1, #1
 80042c2:	9102      	str	r1, [sp, #8]
 80042c4:	2101      	movs	r1, #1
 80042c6:	9101      	str	r1, [sp, #4]
 80042c8:	2100      	movs	r1, #0
 80042ca:	9100      	str	r1, [sp, #0]
 80042cc:	2182      	movs	r1, #130	@ 0x82
 80042ce:	2000      	movs	r0, #0
 80042d0:	f7ff f8be 	bl	8003450 <drawString>
			  sprintf(buffer2, "All time: %d ", game.allSteps);
 80042d4:	4a9f      	ldr	r2, [pc, #636]	@ (8004554 <main+0x650>)
 80042d6:	238c      	movs	r3, #140	@ 0x8c
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	58d2      	ldr	r2, [r2, r3]
 80042dc:	49a1      	ldr	r1, [pc, #644]	@ (8004564 <main+0x660>)
 80042de:	4b9f      	ldr	r3, [pc, #636]	@ (800455c <main+0x658>)
 80042e0:	0018      	movs	r0, r3
 80042e2:	f007 f927 	bl	800b534 <siprintf>
			  drawString(0, 120, buffer2, WHITE, BLACK, 1, 1);
 80042e6:	2301      	movs	r3, #1
 80042e8:	425b      	negs	r3, r3
 80042ea:	4a9c      	ldr	r2, [pc, #624]	@ (800455c <main+0x658>)
 80042ec:	2101      	movs	r1, #1
 80042ee:	9102      	str	r1, [sp, #8]
 80042f0:	2101      	movs	r1, #1
 80042f2:	9101      	str	r1, [sp, #4]
 80042f4:	2100      	movs	r1, #0
 80042f6:	9100      	str	r1, [sp, #0]
 80042f8:	2178      	movs	r1, #120	@ 0x78
 80042fa:	2000      	movs	r0, #0
 80042fc:	f7ff f8a8 	bl	8003450 <drawString>

			  //drawString(0, 70, "PET", WHITE, BLACK, 1, 1);
			  updateScreen = 0;
 8004300:	4b92      	ldr	r3, [pc, #584]	@ (800454c <main+0x648>)
 8004302:	2200      	movs	r2, #0
 8004304:	601a      	str	r2, [r3, #0]
		  }
	  	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET ){
 8004306:	4b98      	ldr	r3, [pc, #608]	@ (8004568 <main+0x664>)
 8004308:	2104      	movs	r1, #4
 800430a:	0018      	movs	r0, r3
 800430c:	f002 f9d4 	bl	80066b8 <HAL_GPIO_ReadPin>
 8004310:	0003      	movs	r3, r0
 8004312:	2b01      	cmp	r3, #1
 8004314:	d109      	bne.n	800432a <main+0x426>
	  		currentMenu = Main;
 8004316:	4b95      	ldr	r3, [pc, #596]	@ (800456c <main+0x668>)
 8004318:	2201      	movs	r2, #1
 800431a:	701a      	strb	r2, [r3, #0]
	  		canChange = 0;
 800431c:	4b94      	ldr	r3, [pc, #592]	@ (8004570 <main+0x66c>)
 800431e:	2200      	movs	r2, #0
 8004320:	701a      	strb	r2, [r3, #0]
	  		fillScreen(BLACK);
 8004322:	2000      	movs	r0, #0
 8004324:	f7ff f9d8 	bl	80036d8 <fillScreen>
	  	  }
	  	  else
	  	      canChange = 1;

	  	  break;
 8004328:	e10e      	b.n	8004548 <main+0x644>
	  	      canChange = 1;
 800432a:	4b91      	ldr	r3, [pc, #580]	@ (8004570 <main+0x66c>)
 800432c:	2201      	movs	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]
	  	  break;
 8004330:	e10a      	b.n	8004548 <main+0x644>
	  case MusicTest:
		  //fillScreen(BLUE);

		  freq = freqs[(toneIndex++)%8];
 8004332:	4b90      	ldr	r3, [pc, #576]	@ (8004574 <main+0x670>)
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	b29b      	uxth	r3, r3
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	b291      	uxth	r1, r2
 800433c:	4a8d      	ldr	r2, [pc, #564]	@ (8004574 <main+0x670>)
 800433e:	8011      	strh	r1, [r2, #0]
 8004340:	001a      	movs	r2, r3
 8004342:	2307      	movs	r3, #7
 8004344:	4013      	ands	r3, r2
 8004346:	4a8c      	ldr	r2, [pc, #560]	@ (8004578 <main+0x674>)
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	18d3      	adds	r3, r2, r3
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	498a      	ldr	r1, [pc, #552]	@ (800457c <main+0x678>)
 8004352:	600a      	str	r2, [r1, #0]
 8004354:	604b      	str	r3, [r1, #4]
		  TIM17->ARR=(uint32_t)(987*(float)1000/(float)freq);
 8004356:	4b89      	ldr	r3, [pc, #548]	@ (800457c <main+0x678>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	0010      	movs	r0, r2
 800435e:	0019      	movs	r1, r3
 8004360:	f7fe ff0a 	bl	8003178 <__aeabi_d2f>
 8004364:	1c03      	adds	r3, r0, #0
 8004366:	1c19      	adds	r1, r3, #0
 8004368:	4885      	ldr	r0, [pc, #532]	@ (8004580 <main+0x67c>)
 800436a:	f7fc fb5b 	bl	8000a24 <__aeabi_fdiv>
 800436e:	1c03      	adds	r3, r0, #0
 8004370:	4c84      	ldr	r4, [pc, #528]	@ (8004584 <main+0x680>)
 8004372:	1c18      	adds	r0, r3, #0
 8004374:	f7fc f8e8 	bl	8000548 <__aeabi_f2uiz>
 8004378:	0003      	movs	r3, r0
 800437a:	62e3      	str	r3, [r4, #44]	@ 0x2c

		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET) {
 800437c:	2380      	movs	r3, #128	@ 0x80
 800437e:	011a      	lsls	r2, r3, #4
 8004380:	23a0      	movs	r3, #160	@ 0xa0
 8004382:	05db      	lsls	r3, r3, #23
 8004384:	0011      	movs	r1, r2
 8004386:	0018      	movs	r0, r3
 8004388:	f002 f996 	bl	80066b8 <HAL_GPIO_ReadPin>
 800438c:	0003      	movs	r3, r0
 800438e:	2b01      	cmp	r3, #1
 8004390:	d10e      	bne.n	80043b0 <main+0x4ac>
			  currentMenu = Main;
 8004392:	4b76      	ldr	r3, [pc, #472]	@ (800456c <main+0x668>)
 8004394:	2201      	movs	r2, #1
 8004396:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8004398:	4b75      	ldr	r3, [pc, #468]	@ (8004570 <main+0x66c>)
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 800439e:	4b7a      	ldr	r3, [pc, #488]	@ (8004588 <main+0x684>)
 80043a0:	2100      	movs	r1, #0
 80043a2:	0018      	movs	r0, r3
 80043a4:	f005 faa8 	bl	80098f8 <HAL_TIM_PWM_Stop>
			  fillScreen(BLACK);
 80043a8:	2000      	movs	r0, #0
 80043aa:	f7ff f995 	bl	80036d8 <fillScreen>
		  }
		  else
			  canChange = 1;

		  break;
 80043ae:	e0cb      	b.n	8004548 <main+0x644>
			  canChange = 1;
 80043b0:	4b6f      	ldr	r3, [pc, #444]	@ (8004570 <main+0x66c>)
 80043b2:	2201      	movs	r2, #1
 80043b4:	701a      	strb	r2, [r3, #0]
		  break;
 80043b6:	e0c7      	b.n	8004548 <main+0x644>
	  case ConnorDemo:
		  	  steps=0;
 80043b8:	4b74      	ldr	r3, [pc, #464]	@ (800458c <main+0x688>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	701a      	strb	r2, [r3, #0]

		  	  if((whileI++)%3==0)
 80043be:	4b74      	ldr	r3, [pc, #464]	@ (8004590 <main+0x68c>)
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	b291      	uxth	r1, r2
 80043c8:	4a71      	ldr	r2, [pc, #452]	@ (8004590 <main+0x68c>)
 80043ca:	8011      	strh	r1, [r2, #0]
 80043cc:	2103      	movs	r1, #3
 80043ce:	0018      	movs	r0, r3
 80043d0:	f7fb ff32 	bl	8000238 <__aeabi_uidivmod>
 80043d4:	000b      	movs	r3, r1
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10f      	bne.n	80043fc <main+0x4f8>
		  		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET)
 80043dc:	4b6d      	ldr	r3, [pc, #436]	@ (8004594 <main+0x690>)
 80043de:	2102      	movs	r1, #2
 80043e0:	0018      	movs	r0, r3
 80043e2:	f002 f969 	bl	80066b8 <HAL_GPIO_ReadPin>
 80043e6:	0003      	movs	r3, r0
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d104      	bne.n	80043f6 <main+0x4f2>
		  		  		  fillScreen(WHITE);
 80043ec:	4b6a      	ldr	r3, [pc, #424]	@ (8004598 <main+0x694>)
 80043ee:	0018      	movs	r0, r3
 80043f0:	f7ff f972 	bl	80036d8 <fillScreen>
 80043f4:	e002      	b.n	80043fc <main+0x4f8>
		  		  	  else
		  		  		  fillScreen(BLACK);
 80043f6:	2000      	movs	r0, #0
 80043f8:	f7ff f96e 	bl	80036d8 <fillScreen>
		  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET)
 80043fc:	2380      	movs	r3, #128	@ 0x80
 80043fe:	011a      	lsls	r2, r3, #4
 8004400:	23a0      	movs	r3, #160	@ 0xa0
 8004402:	05db      	lsls	r3, r3, #23
 8004404:	0011      	movs	r1, r2
 8004406:	0018      	movs	r0, r3
 8004408:	f002 f956 	bl	80066b8 <HAL_GPIO_ReadPin>
 800440c:	0003      	movs	r3, r0
 800440e:	2b01      	cmp	r3, #1
 8004410:	d106      	bne.n	8004420 <main+0x51c>
		  		  petXPos-=5;
 8004412:	4b62      	ldr	r3, [pc, #392]	@ (800459c <main+0x698>)
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b05      	subs	r3, #5
 800441a:	b29a      	uxth	r2, r3
 800441c:	4b5f      	ldr	r3, [pc, #380]	@ (800459c <main+0x698>)
 800441e:	801a      	strh	r2, [r3, #0]
		  	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET)
 8004420:	4b51      	ldr	r3, [pc, #324]	@ (8004568 <main+0x664>)
 8004422:	2104      	movs	r1, #4
 8004424:	0018      	movs	r0, r3
 8004426:	f002 f947 	bl	80066b8 <HAL_GPIO_ReadPin>
 800442a:	0003      	movs	r3, r0
 800442c:	2b01      	cmp	r3, #1
 800442e:	d106      	bne.n	800443e <main+0x53a>
		  		  petXPos+=5;
 8004430:	4b5a      	ldr	r3, [pc, #360]	@ (800459c <main+0x698>)
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	b29b      	uxth	r3, r3
 8004436:	3305      	adds	r3, #5
 8004438:	b29a      	uxth	r2, r3
 800443a:	4b58      	ldr	r3, [pc, #352]	@ (800459c <main+0x698>)
 800443c:	801a      	strh	r2, [r3, #0]
		  	  if(petXPos<3)petXPos=0;
 800443e:	4b57      	ldr	r3, [pc, #348]	@ (800459c <main+0x698>)
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	b29b      	uxth	r3, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d802      	bhi.n	800444e <main+0x54a>
 8004448:	4b54      	ldr	r3, [pc, #336]	@ (800459c <main+0x698>)
 800444a:	2200      	movs	r2, #0
 800444c:	801a      	strh	r2, [r3, #0]
		  	  if(petXPos>60) petXPos=60;
 800444e:	4b53      	ldr	r3, [pc, #332]	@ (800459c <main+0x698>)
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	b29b      	uxth	r3, r3
 8004454:	2b3c      	cmp	r3, #60	@ 0x3c
 8004456:	d902      	bls.n	800445e <main+0x55a>
 8004458:	4b50      	ldr	r3, [pc, #320]	@ (800459c <main+0x698>)
 800445a:	223c      	movs	r2, #60	@ 0x3c
 800445c:	801a      	strh	r2, [r3, #0]
		  	  freq = freqs[(toneIndex++)%8];
 800445e:	4b45      	ldr	r3, [pc, #276]	@ (8004574 <main+0x670>)
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	b29b      	uxth	r3, r3
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	b291      	uxth	r1, r2
 8004468:	4a42      	ldr	r2, [pc, #264]	@ (8004574 <main+0x670>)
 800446a:	8011      	strh	r1, [r2, #0]
 800446c:	001a      	movs	r2, r3
 800446e:	2307      	movs	r3, #7
 8004470:	4013      	ands	r3, r2
 8004472:	4a41      	ldr	r2, [pc, #260]	@ (8004578 <main+0x674>)
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	18d3      	adds	r3, r2, r3
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	493f      	ldr	r1, [pc, #252]	@ (800457c <main+0x678>)
 800447e:	600a      	str	r2, [r1, #0]
 8004480:	604b      	str	r3, [r1, #4]
		  	  TIM17->ARR=(uint32_t)(987*(float)1000/(float)freq);
 8004482:	4b3e      	ldr	r3, [pc, #248]	@ (800457c <main+0x678>)
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	0010      	movs	r0, r2
 800448a:	0019      	movs	r1, r3
 800448c:	f7fe fe74 	bl	8003178 <__aeabi_d2f>
 8004490:	1c03      	adds	r3, r0, #0
 8004492:	1c19      	adds	r1, r3, #0
 8004494:	483a      	ldr	r0, [pc, #232]	@ (8004580 <main+0x67c>)
 8004496:	f7fc fac5 	bl	8000a24 <__aeabi_fdiv>
 800449a:	1c03      	adds	r3, r0, #0
 800449c:	4c39      	ldr	r4, [pc, #228]	@ (8004584 <main+0x680>)
 800449e:	1c18      	adds	r0, r3, #0
 80044a0:	f7fc f852 	bl	8000548 <__aeabi_f2uiz>
 80044a4:	0003      	movs	r3, r0
 80044a6:	62e3      	str	r3, [r4, #44]	@ 0x2c
		  	  //fillScreen(WHITE);
		  	  drawImage(testImage, palette, petXPos, 40, 64, 64, 296);
 80044a8:	4b3c      	ldr	r3, [pc, #240]	@ (800459c <main+0x698>)
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	493c      	ldr	r1, [pc, #240]	@ (80045a0 <main+0x69c>)
 80044b0:	483c      	ldr	r0, [pc, #240]	@ (80045a4 <main+0x6a0>)
 80044b2:	2394      	movs	r3, #148	@ 0x94
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	9302      	str	r3, [sp, #8]
 80044b8:	2340      	movs	r3, #64	@ 0x40
 80044ba:	9301      	str	r3, [sp, #4]
 80044bc:	2340      	movs	r3, #64	@ 0x40
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	2328      	movs	r3, #40	@ 0x28
 80044c2:	f7ff f97d 	bl	80037c0 <drawImage>
//		  	  _ADXL343_ReadReg8(0x06, &accelZ, 1);
//		  	  _ADXL343_ReadReg8(0x07, &accelX, 1);
//		  	  _ADXL343_ReadReg8(0x08, &accelY, 1);
//		  	  _ADXL343_ReadReg8(0x09, &accelZ, 1);

		  	  sprintf(buffer2, "X:%d - Y:%d - Z:%d ", accelX, accelY, accelZ);
 80044c6:	4b38      	ldr	r3, [pc, #224]	@ (80045a8 <main+0x6a4>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	001a      	movs	r2, r3
 80044cc:	4b37      	ldr	r3, [pc, #220]	@ (80045ac <main+0x6a8>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	001c      	movs	r4, r3
 80044d2:	4b37      	ldr	r3, [pc, #220]	@ (80045b0 <main+0x6ac>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	4937      	ldr	r1, [pc, #220]	@ (80045b4 <main+0x6b0>)
 80044d8:	4820      	ldr	r0, [pc, #128]	@ (800455c <main+0x658>)
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	0023      	movs	r3, r4
 80044de:	f007 f829 	bl	800b534 <siprintf>
		  	  drawString(0, 10, buffer2, BLACK, GREEN, 1, 1);
 80044e2:	4a1e      	ldr	r2, [pc, #120]	@ (800455c <main+0x658>)
 80044e4:	2301      	movs	r3, #1
 80044e6:	9302      	str	r3, [sp, #8]
 80044e8:	2301      	movs	r3, #1
 80044ea:	9301      	str	r3, [sp, #4]
 80044ec:	4b32      	ldr	r3, [pc, #200]	@ (80045b8 <main+0x6b4>)
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	2300      	movs	r3, #0
 80044f2:	210a      	movs	r1, #10
 80044f4:	2000      	movs	r0, #0
 80044f6:	f7fe ffab 	bl	8003450 <drawString>

		  	  _ADXL343_ReadReg8(0x15, &steps, 1);
 80044fa:	4b24      	ldr	r3, [pc, #144]	@ (800458c <main+0x688>)
 80044fc:	2201      	movs	r2, #1
 80044fe:	0019      	movs	r1, r3
 8004500:	2015      	movs	r0, #21
 8004502:	f000 fbd9 	bl	8004cb8 <_ADXL343_ReadReg8>
		  	  sprintf(buffer2, "Steps: %d ", steps);
 8004506:	4b21      	ldr	r3, [pc, #132]	@ (800458c <main+0x688>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	001a      	movs	r2, r3
 800450c:	492b      	ldr	r1, [pc, #172]	@ (80045bc <main+0x6b8>)
 800450e:	4b13      	ldr	r3, [pc, #76]	@ (800455c <main+0x658>)
 8004510:	0018      	movs	r0, r3
 8004512:	f007 f80f 	bl	800b534 <siprintf>
		  	  drawString(0, 20, buffer2, BLACK, GREEN, 1, 1);
 8004516:	4a11      	ldr	r2, [pc, #68]	@ (800455c <main+0x658>)
 8004518:	2301      	movs	r3, #1
 800451a:	9302      	str	r3, [sp, #8]
 800451c:	2301      	movs	r3, #1
 800451e:	9301      	str	r3, [sp, #4]
 8004520:	4b25      	ldr	r3, [pc, #148]	@ (80045b8 <main+0x6b4>)
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	2300      	movs	r3, #0
 8004526:	2114      	movs	r1, #20
 8004528:	2000      	movs	r0, #0
 800452a:	f7fe ff91 	bl	8003450 <drawString>

		  	  	  //only run this code every few seconds

		  	  drawString(70, 70, buffer, BLACK, GREEN, 1, 1);
 800452e:	4a24      	ldr	r2, [pc, #144]	@ (80045c0 <main+0x6bc>)
 8004530:	2301      	movs	r3, #1
 8004532:	9302      	str	r3, [sp, #8]
 8004534:	2301      	movs	r3, #1
 8004536:	9301      	str	r3, [sp, #4]
 8004538:	4b1f      	ldr	r3, [pc, #124]	@ (80045b8 <main+0x6b4>)
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	2300      	movs	r3, #0
 800453e:	2146      	movs	r1, #70	@ 0x46
 8004540:	2046      	movs	r0, #70	@ 0x46
 8004542:	f7fe ff85 	bl	8003450 <drawString>

		  break;
 8004546:	46c0      	nop			@ (mov r8, r8)
	  if((totalFrames++)%600==0) GetLatLon();
 8004548:	e57e      	b.n	8004048 <main+0x144>
 800454a:	46c0      	nop			@ (mov r8, r8)
 800454c:	20001188 	.word	0x20001188
 8004550:	0800c0b8 	.word	0x0800c0b8
 8004554:	20000f18 	.word	0x20000f18
 8004558:	0800c0c0 	.word	0x0800c0c0
 800455c:	200011c4 	.word	0x200011c4
 8004560:	0800c0cc 	.word	0x0800c0cc
 8004564:	0800c0dc 	.word	0x0800c0dc
 8004568:	50000400 	.word	0x50000400
 800456c:	20000e80 	.word	0x20000e80
 8004570:	20000e81 	.word	0x20000e81
 8004574:	200011c0 	.word	0x200011c0
 8004578:	20000e40 	.word	0x20000e40
 800457c:	200011b8 	.word	0x200011b8
 8004580:	4970f780 	.word	0x4970f780
 8004584:	40014800 	.word	0x40014800
 8004588:	20001310 	.word	0x20001310
 800458c:	2000122b 	.word	0x2000122b
 8004590:	2000106a 	.word	0x2000106a
 8004594:	50000800 	.word	0x50000800
 8004598:	0000ffff 	.word	0x0000ffff
 800459c:	2000106c 	.word	0x2000106c
 80045a0:	20000e30 	.word	0x20000e30
 80045a4:	20000000 	.word	0x20000000
 80045a8:	20001228 	.word	0x20001228
 80045ac:	20001229 	.word	0x20001229
 80045b0:	2000122a 	.word	0x2000122a
 80045b4:	0800c0ec 	.word	0x0800c0ec
 80045b8:	ffffe007 	.word	0xffffe007
 80045bc:	0800c100 	.word	0x0800c100
 80045c0:	20001108 	.word	0x20001108

080045c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80045c4:	b590      	push	{r4, r7, lr}
 80045c6:	b095      	sub	sp, #84	@ 0x54
 80045c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80045ca:	2414      	movs	r4, #20
 80045cc:	193b      	adds	r3, r7, r4
 80045ce:	0018      	movs	r0, r3
 80045d0:	233c      	movs	r3, #60	@ 0x3c
 80045d2:	001a      	movs	r2, r3
 80045d4:	2100      	movs	r1, #0
 80045d6:	f006 ffcd 	bl	800b574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045da:	1d3b      	adds	r3, r7, #4
 80045dc:	0018      	movs	r0, r3
 80045de:	2310      	movs	r3, #16
 80045e0:	001a      	movs	r2, r3
 80045e2:	2100      	movs	r1, #0
 80045e4:	f006 ffc6 	bl	800b574 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80045e8:	2380      	movs	r3, #128	@ 0x80
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	0018      	movs	r0, r3
 80045ee:	f002 fee1 	bl	80073b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80045f2:	193b      	adds	r3, r7, r4
 80045f4:	220a      	movs	r2, #10
 80045f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80045f8:	193b      	adds	r3, r7, r4
 80045fa:	2280      	movs	r2, #128	@ 0x80
 80045fc:	0052      	lsls	r2, r2, #1
 80045fe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004600:	0021      	movs	r1, r4
 8004602:	187b      	adds	r3, r7, r1
 8004604:	2200      	movs	r2, #0
 8004606:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004608:	187b      	adds	r3, r7, r1
 800460a:	2240      	movs	r2, #64	@ 0x40
 800460c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800460e:	187b      	adds	r3, r7, r1
 8004610:	2201      	movs	r2, #1
 8004612:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004614:	187b      	adds	r3, r7, r1
 8004616:	2202      	movs	r2, #2
 8004618:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800461a:	187b      	adds	r3, r7, r1
 800461c:	2202      	movs	r2, #2
 800461e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8004620:	187b      	adds	r3, r7, r1
 8004622:	2200      	movs	r2, #0
 8004624:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8004626:	187b      	adds	r3, r7, r1
 8004628:	2208      	movs	r2, #8
 800462a:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800462c:	187b      	adds	r3, r7, r1
 800462e:	2280      	movs	r2, #128	@ 0x80
 8004630:	0292      	lsls	r2, r2, #10
 8004632:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004634:	187b      	adds	r3, r7, r1
 8004636:	2280      	movs	r2, #128	@ 0x80
 8004638:	0492      	lsls	r2, r2, #18
 800463a:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800463c:	187b      	adds	r3, r7, r1
 800463e:	2280      	movs	r2, #128	@ 0x80
 8004640:	0592      	lsls	r2, r2, #22
 8004642:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004644:	187b      	adds	r3, r7, r1
 8004646:	0018      	movs	r0, r3
 8004648:	f002 ff00 	bl	800744c <HAL_RCC_OscConfig>
 800464c:	1e03      	subs	r3, r0, #0
 800464e:	d001      	beq.n	8004654 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8004650:	f000 fd8e 	bl	8005170 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004654:	1d3b      	adds	r3, r7, #4
 8004656:	2207      	movs	r2, #7
 8004658:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800465a:	1d3b      	adds	r3, r7, #4
 800465c:	2202      	movs	r2, #2
 800465e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004660:	1d3b      	adds	r3, r7, #4
 8004662:	2200      	movs	r2, #0
 8004664:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004666:	1d3b      	adds	r3, r7, #4
 8004668:	2200      	movs	r2, #0
 800466a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800466c:	1d3b      	adds	r3, r7, #4
 800466e:	2102      	movs	r1, #2
 8004670:	0018      	movs	r0, r3
 8004672:	f003 fa4b 	bl	8007b0c <HAL_RCC_ClockConfig>
 8004676:	1e03      	subs	r3, r0, #0
 8004678:	d001      	beq.n	800467e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800467a:	f000 fd79 	bl	8005170 <Error_Handler>
  }
}
 800467e:	46c0      	nop			@ (mov r8, r8)
 8004680:	46bd      	mov	sp, r7
 8004682:	b015      	add	sp, #84	@ 0x54
 8004684:	bd90      	pop	{r4, r7, pc}
	...

08004688 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800468c:	4b1b      	ldr	r3, [pc, #108]	@ (80046fc <MX_I2C1_Init+0x74>)
 800468e:	4a1c      	ldr	r2, [pc, #112]	@ (8004700 <MX_I2C1_Init+0x78>)
 8004690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8004692:	4b1a      	ldr	r3, [pc, #104]	@ (80046fc <MX_I2C1_Init+0x74>)
 8004694:	4a1b      	ldr	r2, [pc, #108]	@ (8004704 <MX_I2C1_Init+0x7c>)
 8004696:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004698:	4b18      	ldr	r3, [pc, #96]	@ (80046fc <MX_I2C1_Init+0x74>)
 800469a:	2200      	movs	r2, #0
 800469c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800469e:	4b17      	ldr	r3, [pc, #92]	@ (80046fc <MX_I2C1_Init+0x74>)
 80046a0:	2201      	movs	r2, #1
 80046a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80046a4:	4b15      	ldr	r3, [pc, #84]	@ (80046fc <MX_I2C1_Init+0x74>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80046aa:	4b14      	ldr	r3, [pc, #80]	@ (80046fc <MX_I2C1_Init+0x74>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80046b0:	4b12      	ldr	r3, [pc, #72]	@ (80046fc <MX_I2C1_Init+0x74>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80046b6:	4b11      	ldr	r3, [pc, #68]	@ (80046fc <MX_I2C1_Init+0x74>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80046bc:	4b0f      	ldr	r3, [pc, #60]	@ (80046fc <MX_I2C1_Init+0x74>)
 80046be:	2200      	movs	r2, #0
 80046c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80046c2:	4b0e      	ldr	r3, [pc, #56]	@ (80046fc <MX_I2C1_Init+0x74>)
 80046c4:	0018      	movs	r0, r3
 80046c6:	f002 f831 	bl	800672c <HAL_I2C_Init>
 80046ca:	1e03      	subs	r3, r0, #0
 80046cc:	d001      	beq.n	80046d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80046ce:	f000 fd4f 	bl	8005170 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80046d2:	4b0a      	ldr	r3, [pc, #40]	@ (80046fc <MX_I2C1_Init+0x74>)
 80046d4:	2100      	movs	r1, #0
 80046d6:	0018      	movs	r0, r3
 80046d8:	f002 fdd4 	bl	8007284 <HAL_I2CEx_ConfigAnalogFilter>
 80046dc:	1e03      	subs	r3, r0, #0
 80046de:	d001      	beq.n	80046e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80046e0:	f000 fd46 	bl	8005170 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80046e4:	4b05      	ldr	r3, [pc, #20]	@ (80046fc <MX_I2C1_Init+0x74>)
 80046e6:	2100      	movs	r1, #0
 80046e8:	0018      	movs	r0, r3
 80046ea:	f002 fe17 	bl	800731c <HAL_I2CEx_ConfigDigitalFilter>
 80046ee:	1e03      	subs	r3, r0, #0
 80046f0:	d001      	beq.n	80046f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80046f2:	f000 fd3d 	bl	8005170 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80046f6:	46c0      	nop			@ (mov r8, r8)
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	2000122c 	.word	0x2000122c
 8004700:	40005400 	.word	0x40005400
 8004704:	10b17db5 	.word	0x10b17db5

08004708 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b090      	sub	sp, #64	@ 0x40
 800470c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800470e:	232c      	movs	r3, #44	@ 0x2c
 8004710:	18fb      	adds	r3, r7, r3
 8004712:	0018      	movs	r0, r3
 8004714:	2314      	movs	r3, #20
 8004716:	001a      	movs	r2, r3
 8004718:	2100      	movs	r1, #0
 800471a:	f006 ff2b 	bl	800b574 <memset>
  RTC_DateTypeDef sDate = {0};
 800471e:	2328      	movs	r3, #40	@ 0x28
 8004720:	18fb      	adds	r3, r7, r3
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8004726:	003b      	movs	r3, r7
 8004728:	0018      	movs	r0, r3
 800472a:	2328      	movs	r3, #40	@ 0x28
 800472c:	001a      	movs	r2, r3
 800472e:	2100      	movs	r1, #0
 8004730:	f006 ff20 	bl	800b574 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004734:	4b49      	ldr	r3, [pc, #292]	@ (800485c <MX_RTC_Init+0x154>)
 8004736:	4a4a      	ldr	r2, [pc, #296]	@ (8004860 <MX_RTC_Init+0x158>)
 8004738:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800473a:	4b48      	ldr	r3, [pc, #288]	@ (800485c <MX_RTC_Init+0x154>)
 800473c:	2200      	movs	r2, #0
 800473e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8004740:	4b46      	ldr	r3, [pc, #280]	@ (800485c <MX_RTC_Init+0x154>)
 8004742:	227f      	movs	r2, #127	@ 0x7f
 8004744:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8004746:	4b45      	ldr	r3, [pc, #276]	@ (800485c <MX_RTC_Init+0x154>)
 8004748:	22ff      	movs	r2, #255	@ 0xff
 800474a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800474c:	4b43      	ldr	r3, [pc, #268]	@ (800485c <MX_RTC_Init+0x154>)
 800474e:	2200      	movs	r2, #0
 8004750:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004752:	4b42      	ldr	r3, [pc, #264]	@ (800485c <MX_RTC_Init+0x154>)
 8004754:	2200      	movs	r2, #0
 8004756:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004758:	4b40      	ldr	r3, [pc, #256]	@ (800485c <MX_RTC_Init+0x154>)
 800475a:	2200      	movs	r2, #0
 800475c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800475e:	4b3f      	ldr	r3, [pc, #252]	@ (800485c <MX_RTC_Init+0x154>)
 8004760:	2280      	movs	r2, #128	@ 0x80
 8004762:	05d2      	lsls	r2, r2, #23
 8004764:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8004766:	4b3d      	ldr	r3, [pc, #244]	@ (800485c <MX_RTC_Init+0x154>)
 8004768:	2200      	movs	r2, #0
 800476a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800476c:	4b3b      	ldr	r3, [pc, #236]	@ (800485c <MX_RTC_Init+0x154>)
 800476e:	0018      	movs	r0, r3
 8004770:	f003 fdb2 	bl	80082d8 <HAL_RTC_Init>
 8004774:	1e03      	subs	r3, r0, #0
 8004776:	d001      	beq.n	800477c <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8004778:	f000 fcfa 	bl	8005170 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800477c:	212c      	movs	r1, #44	@ 0x2c
 800477e:	187b      	adds	r3, r7, r1
 8004780:	2200      	movs	r2, #0
 8004782:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8004784:	187b      	adds	r3, r7, r1
 8004786:	2200      	movs	r2, #0
 8004788:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800478a:	187b      	adds	r3, r7, r1
 800478c:	2200      	movs	r2, #0
 800478e:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8004790:	187b      	adds	r3, r7, r1
 8004792:	2200      	movs	r2, #0
 8004794:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004796:	187b      	adds	r3, r7, r1
 8004798:	2200      	movs	r2, #0
 800479a:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800479c:	187b      	adds	r3, r7, r1
 800479e:	2200      	movs	r2, #0
 80047a0:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80047a2:	1879      	adds	r1, r7, r1
 80047a4:	4b2d      	ldr	r3, [pc, #180]	@ (800485c <MX_RTC_Init+0x154>)
 80047a6:	2201      	movs	r2, #1
 80047a8:	0018      	movs	r0, r3
 80047aa:	f003 fe37 	bl	800841c <HAL_RTC_SetTime>
 80047ae:	1e03      	subs	r3, r0, #0
 80047b0:	d001      	beq.n	80047b6 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80047b2:	f000 fcdd 	bl	8005170 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80047b6:	2128      	movs	r1, #40	@ 0x28
 80047b8:	187b      	adds	r3, r7, r1
 80047ba:	2201      	movs	r2, #1
 80047bc:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80047be:	187b      	adds	r3, r7, r1
 80047c0:	2201      	movs	r2, #1
 80047c2:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80047c4:	187b      	adds	r3, r7, r1
 80047c6:	2201      	movs	r2, #1
 80047c8:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80047ca:	187b      	adds	r3, r7, r1
 80047cc:	2200      	movs	r2, #0
 80047ce:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80047d0:	1879      	adds	r1, r7, r1
 80047d2:	4b22      	ldr	r3, [pc, #136]	@ (800485c <MX_RTC_Init+0x154>)
 80047d4:	2201      	movs	r2, #1
 80047d6:	0018      	movs	r0, r3
 80047d8:	f003 fec8 	bl	800856c <HAL_RTC_SetDate>
 80047dc:	1e03      	subs	r3, r0, #0
 80047de:	d001      	beq.n	80047e4 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 80047e0:	f000 fcc6 	bl	8005170 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80047e4:	003b      	movs	r3, r7
 80047e6:	2200      	movs	r2, #0
 80047e8:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80047ea:	003b      	movs	r3, r7
 80047ec:	2200      	movs	r2, #0
 80047ee:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 80047f0:	003b      	movs	r3, r7
 80047f2:	2201      	movs	r2, #1
 80047f4:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80047f6:	003b      	movs	r3, r7
 80047f8:	2200      	movs	r2, #0
 80047fa:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80047fc:	003b      	movs	r3, r7
 80047fe:	2200      	movs	r2, #0
 8004800:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004802:	003b      	movs	r3, r7
 8004804:	2200      	movs	r2, #0
 8004806:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8004808:	003b      	movs	r3, r7
 800480a:	2200      	movs	r2, #0
 800480c:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800480e:	003b      	movs	r3, r7
 8004810:	2200      	movs	r2, #0
 8004812:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004814:	003b      	movs	r3, r7
 8004816:	2200      	movs	r2, #0
 8004818:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800481a:	003b      	movs	r3, r7
 800481c:	2220      	movs	r2, #32
 800481e:	2101      	movs	r1, #1
 8004820:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8004822:	003b      	movs	r3, r7
 8004824:	2280      	movs	r2, #128	@ 0x80
 8004826:	0052      	lsls	r2, r2, #1
 8004828:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800482a:	0039      	movs	r1, r7
 800482c:	4b0b      	ldr	r3, [pc, #44]	@ (800485c <MX_RTC_Init+0x154>)
 800482e:	2201      	movs	r2, #1
 8004830:	0018      	movs	r0, r3
 8004832:	f003 ff2d 	bl	8008690 <HAL_RTC_SetAlarm_IT>
 8004836:	1e03      	subs	r3, r0, #0
 8004838:	d001      	beq.n	800483e <MX_RTC_Init+0x136>
  {
    Error_Handler();
 800483a:	f000 fc99 	bl	8005170 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800483e:	4909      	ldr	r1, [pc, #36]	@ (8004864 <MX_RTC_Init+0x15c>)
 8004840:	4b06      	ldr	r3, [pc, #24]	@ (800485c <MX_RTC_Init+0x154>)
 8004842:	2200      	movs	r2, #0
 8004844:	0018      	movs	r0, r3
 8004846:	f004 fa59 	bl	8008cfc <HAL_RTCEx_SetWakeUpTimer_IT>
 800484a:	1e03      	subs	r3, r0, #0
 800484c:	d001      	beq.n	8004852 <MX_RTC_Init+0x14a>
  {
    Error_Handler();
 800484e:	f000 fc8f 	bl	8005170 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004852:	46c0      	nop			@ (mov r8, r8)
 8004854:	46bd      	mov	sp, r7
 8004856:	b010      	add	sp, #64	@ 0x40
 8004858:	bd80      	pop	{r7, pc}
 800485a:	46c0      	nop			@ (mov r8, r8)
 800485c:	20001280 	.word	0x20001280
 8004860:	40002800 	.word	0x40002800
 8004864:	0000500b 	.word	0x0000500b

08004868 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800486c:	4b1c      	ldr	r3, [pc, #112]	@ (80048e0 <MX_SPI1_Init+0x78>)
 800486e:	4a1d      	ldr	r2, [pc, #116]	@ (80048e4 <MX_SPI1_Init+0x7c>)
 8004870:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004872:	4b1b      	ldr	r3, [pc, #108]	@ (80048e0 <MX_SPI1_Init+0x78>)
 8004874:	2282      	movs	r2, #130	@ 0x82
 8004876:	0052      	lsls	r2, r2, #1
 8004878:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800487a:	4b19      	ldr	r3, [pc, #100]	@ (80048e0 <MX_SPI1_Init+0x78>)
 800487c:	2280      	movs	r2, #128	@ 0x80
 800487e:	0212      	lsls	r2, r2, #8
 8004880:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004882:	4b17      	ldr	r3, [pc, #92]	@ (80048e0 <MX_SPI1_Init+0x78>)
 8004884:	22e0      	movs	r2, #224	@ 0xe0
 8004886:	00d2      	lsls	r2, r2, #3
 8004888:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800488a:	4b15      	ldr	r3, [pc, #84]	@ (80048e0 <MX_SPI1_Init+0x78>)
 800488c:	2200      	movs	r2, #0
 800488e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004890:	4b13      	ldr	r3, [pc, #76]	@ (80048e0 <MX_SPI1_Init+0x78>)
 8004892:	2200      	movs	r2, #0
 8004894:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004896:	4b12      	ldr	r3, [pc, #72]	@ (80048e0 <MX_SPI1_Init+0x78>)
 8004898:	2280      	movs	r2, #128	@ 0x80
 800489a:	0092      	lsls	r2, r2, #2
 800489c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800489e:	4b10      	ldr	r3, [pc, #64]	@ (80048e0 <MX_SPI1_Init+0x78>)
 80048a0:	2220      	movs	r2, #32
 80048a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80048a4:	4b0e      	ldr	r3, [pc, #56]	@ (80048e0 <MX_SPI1_Init+0x78>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80048aa:	4b0d      	ldr	r3, [pc, #52]	@ (80048e0 <MX_SPI1_Init+0x78>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048b0:	4b0b      	ldr	r3, [pc, #44]	@ (80048e0 <MX_SPI1_Init+0x78>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80048b6:	4b0a      	ldr	r3, [pc, #40]	@ (80048e0 <MX_SPI1_Init+0x78>)
 80048b8:	2207      	movs	r2, #7
 80048ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80048bc:	4b08      	ldr	r3, [pc, #32]	@ (80048e0 <MX_SPI1_Init+0x78>)
 80048be:	2200      	movs	r2, #0
 80048c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80048c2:	4b07      	ldr	r3, [pc, #28]	@ (80048e0 <MX_SPI1_Init+0x78>)
 80048c4:	2208      	movs	r2, #8
 80048c6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80048c8:	4b05      	ldr	r3, [pc, #20]	@ (80048e0 <MX_SPI1_Init+0x78>)
 80048ca:	0018      	movs	r0, r3
 80048cc:	f004 fade 	bl	8008e8c <HAL_SPI_Init>
 80048d0:	1e03      	subs	r3, r0, #0
 80048d2:	d001      	beq.n	80048d8 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80048d4:	f000 fc4c 	bl	8005170 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80048d8:	46c0      	nop			@ (mov r8, r8)
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	46c0      	nop			@ (mov r8, r8)
 80048e0:	200012ac 	.word	0x200012ac
 80048e4:	40013000 	.word	0x40013000

080048e8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b094      	sub	sp, #80	@ 0x50
 80048ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80048ee:	2334      	movs	r3, #52	@ 0x34
 80048f0:	18fb      	adds	r3, r7, r3
 80048f2:	0018      	movs	r0, r3
 80048f4:	231c      	movs	r3, #28
 80048f6:	001a      	movs	r2, r3
 80048f8:	2100      	movs	r1, #0
 80048fa:	f006 fe3b 	bl	800b574 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80048fe:	003b      	movs	r3, r7
 8004900:	0018      	movs	r0, r3
 8004902:	2334      	movs	r3, #52	@ 0x34
 8004904:	001a      	movs	r2, r3
 8004906:	2100      	movs	r1, #0
 8004908:	f006 fe34 	bl	800b574 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800490c:	4b37      	ldr	r3, [pc, #220]	@ (80049ec <MX_TIM17_Init+0x104>)
 800490e:	4a38      	ldr	r2, [pc, #224]	@ (80049f0 <MX_TIM17_Init+0x108>)
 8004910:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8004912:	4b36      	ldr	r3, [pc, #216]	@ (80049ec <MX_TIM17_Init+0x104>)
 8004914:	2200      	movs	r2, #0
 8004916:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004918:	4b34      	ldr	r3, [pc, #208]	@ (80049ec <MX_TIM17_Init+0x104>)
 800491a:	2200      	movs	r2, #0
 800491c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800491e:	4b33      	ldr	r3, [pc, #204]	@ (80049ec <MX_TIM17_Init+0x104>)
 8004920:	4a34      	ldr	r2, [pc, #208]	@ (80049f4 <MX_TIM17_Init+0x10c>)
 8004922:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004924:	4b31      	ldr	r3, [pc, #196]	@ (80049ec <MX_TIM17_Init+0x104>)
 8004926:	2200      	movs	r2, #0
 8004928:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800492a:	4b30      	ldr	r3, [pc, #192]	@ (80049ec <MX_TIM17_Init+0x104>)
 800492c:	2200      	movs	r2, #0
 800492e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004930:	4b2e      	ldr	r3, [pc, #184]	@ (80049ec <MX_TIM17_Init+0x104>)
 8004932:	2200      	movs	r2, #0
 8004934:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004936:	4b2d      	ldr	r3, [pc, #180]	@ (80049ec <MX_TIM17_Init+0x104>)
 8004938:	0018      	movs	r0, r3
 800493a:	f004 fe35 	bl	80095a8 <HAL_TIM_Base_Init>
 800493e:	1e03      	subs	r3, r0, #0
 8004940:	d001      	beq.n	8004946 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8004942:	f000 fc15 	bl	8005170 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8004946:	4b29      	ldr	r3, [pc, #164]	@ (80049ec <MX_TIM17_Init+0x104>)
 8004948:	0018      	movs	r0, r3
 800494a:	f004 fe85 	bl	8009658 <HAL_TIM_PWM_Init>
 800494e:	1e03      	subs	r3, r0, #0
 8004950:	d001      	beq.n	8004956 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8004952:	f000 fc0d 	bl	8005170 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004956:	2134      	movs	r1, #52	@ 0x34
 8004958:	187b      	adds	r3, r7, r1
 800495a:	2260      	movs	r2, #96	@ 0x60
 800495c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800495e:	187b      	adds	r3, r7, r1
 8004960:	2200      	movs	r2, #0
 8004962:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004964:	187b      	adds	r3, r7, r1
 8004966:	2200      	movs	r2, #0
 8004968:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800496a:	187b      	adds	r3, r7, r1
 800496c:	2200      	movs	r2, #0
 800496e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004970:	187b      	adds	r3, r7, r1
 8004972:	2200      	movs	r2, #0
 8004974:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004976:	187b      	adds	r3, r7, r1
 8004978:	2200      	movs	r2, #0
 800497a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800497c:	187b      	adds	r3, r7, r1
 800497e:	2200      	movs	r2, #0
 8004980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004982:	1879      	adds	r1, r7, r1
 8004984:	4b19      	ldr	r3, [pc, #100]	@ (80049ec <MX_TIM17_Init+0x104>)
 8004986:	2200      	movs	r2, #0
 8004988:	0018      	movs	r0, r3
 800498a:	f005 f841 	bl	8009a10 <HAL_TIM_PWM_ConfigChannel>
 800498e:	1e03      	subs	r3, r0, #0
 8004990:	d001      	beq.n	8004996 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8004992:	f000 fbed 	bl	8005170 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004996:	003b      	movs	r3, r7
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800499c:	003b      	movs	r3, r7
 800499e:	2200      	movs	r2, #0
 80049a0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80049a2:	003b      	movs	r3, r7
 80049a4:	2200      	movs	r2, #0
 80049a6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80049a8:	003b      	movs	r3, r7
 80049aa:	2200      	movs	r2, #0
 80049ac:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80049ae:	003b      	movs	r3, r7
 80049b0:	2200      	movs	r2, #0
 80049b2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80049b4:	003b      	movs	r3, r7
 80049b6:	2280      	movs	r2, #128	@ 0x80
 80049b8:	0192      	lsls	r2, r2, #6
 80049ba:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80049bc:	003b      	movs	r3, r7
 80049be:	2200      	movs	r2, #0
 80049c0:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80049c2:	003b      	movs	r3, r7
 80049c4:	2200      	movs	r2, #0
 80049c6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80049c8:	003a      	movs	r2, r7
 80049ca:	4b08      	ldr	r3, [pc, #32]	@ (80049ec <MX_TIM17_Init+0x104>)
 80049cc:	0011      	movs	r1, r2
 80049ce:	0018      	movs	r0, r3
 80049d0:	f005 fc9e 	bl	800a310 <HAL_TIMEx_ConfigBreakDeadTime>
 80049d4:	1e03      	subs	r3, r0, #0
 80049d6:	d001      	beq.n	80049dc <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 80049d8:	f000 fbca 	bl	8005170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80049dc:	4b03      	ldr	r3, [pc, #12]	@ (80049ec <MX_TIM17_Init+0x104>)
 80049de:	0018      	movs	r0, r3
 80049e0:	f001 f9ea 	bl	8005db8 <HAL_TIM_MspPostInit>

}
 80049e4:	46c0      	nop			@ (mov r8, r8)
 80049e6:	46bd      	mov	sp, r7
 80049e8:	b014      	add	sp, #80	@ 0x50
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	20001310 	.word	0x20001310
 80049f0:	40014800 	.word	0x40014800
 80049f4:	0000ffff 	.word	0x0000ffff

080049f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80049fc:	4b23      	ldr	r3, [pc, #140]	@ (8004a8c <MX_USART1_UART_Init+0x94>)
 80049fe:	4a24      	ldr	r2, [pc, #144]	@ (8004a90 <MX_USART1_UART_Init+0x98>)
 8004a00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004a02:	4b22      	ldr	r3, [pc, #136]	@ (8004a8c <MX_USART1_UART_Init+0x94>)
 8004a04:	2296      	movs	r2, #150	@ 0x96
 8004a06:	0192      	lsls	r2, r2, #6
 8004a08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004a0a:	4b20      	ldr	r3, [pc, #128]	@ (8004a8c <MX_USART1_UART_Init+0x94>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004a10:	4b1e      	ldr	r3, [pc, #120]	@ (8004a8c <MX_USART1_UART_Init+0x94>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004a16:	4b1d      	ldr	r3, [pc, #116]	@ (8004a8c <MX_USART1_UART_Init+0x94>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8004a8c <MX_USART1_UART_Init+0x94>)
 8004a1e:	220c      	movs	r2, #12
 8004a20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a22:	4b1a      	ldr	r3, [pc, #104]	@ (8004a8c <MX_USART1_UART_Init+0x94>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a28:	4b18      	ldr	r3, [pc, #96]	@ (8004a8c <MX_USART1_UART_Init+0x94>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a2e:	4b17      	ldr	r3, [pc, #92]	@ (8004a8c <MX_USART1_UART_Init+0x94>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004a34:	4b15      	ldr	r3, [pc, #84]	@ (8004a8c <MX_USART1_UART_Init+0x94>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a3a:	4b14      	ldr	r3, [pc, #80]	@ (8004a8c <MX_USART1_UART_Init+0x94>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004a40:	4b12      	ldr	r3, [pc, #72]	@ (8004a8c <MX_USART1_UART_Init+0x94>)
 8004a42:	0018      	movs	r0, r3
 8004a44:	f005 fd00 	bl	800a448 <HAL_UART_Init>
 8004a48:	1e03      	subs	r3, r0, #0
 8004a4a:	d001      	beq.n	8004a50 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004a4c:	f000 fb90 	bl	8005170 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a50:	4b0e      	ldr	r3, [pc, #56]	@ (8004a8c <MX_USART1_UART_Init+0x94>)
 8004a52:	2100      	movs	r1, #0
 8004a54:	0018      	movs	r0, r3
 8004a56:	f006 fbf7 	bl	800b248 <HAL_UARTEx_SetTxFifoThreshold>
 8004a5a:	1e03      	subs	r3, r0, #0
 8004a5c:	d001      	beq.n	8004a62 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004a5e:	f000 fb87 	bl	8005170 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a62:	4b0a      	ldr	r3, [pc, #40]	@ (8004a8c <MX_USART1_UART_Init+0x94>)
 8004a64:	2100      	movs	r1, #0
 8004a66:	0018      	movs	r0, r3
 8004a68:	f006 fc2e 	bl	800b2c8 <HAL_UARTEx_SetRxFifoThreshold>
 8004a6c:	1e03      	subs	r3, r0, #0
 8004a6e:	d001      	beq.n	8004a74 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004a70:	f000 fb7e 	bl	8005170 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004a74:	4b05      	ldr	r3, [pc, #20]	@ (8004a8c <MX_USART1_UART_Init+0x94>)
 8004a76:	0018      	movs	r0, r3
 8004a78:	f006 fbac 	bl	800b1d4 <HAL_UARTEx_DisableFifoMode>
 8004a7c:	1e03      	subs	r3, r0, #0
 8004a7e:	d001      	beq.n	8004a84 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004a80:	f000 fb76 	bl	8005170 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004a84:	46c0      	nop			@ (mov r8, r8)
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	46c0      	nop			@ (mov r8, r8)
 8004a8c:	2000135c 	.word	0x2000135c
 8004a90:	40013800 	.word	0x40013800

08004a94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004a98:	4b23      	ldr	r3, [pc, #140]	@ (8004b28 <MX_USART2_UART_Init+0x94>)
 8004a9a:	4a24      	ldr	r2, [pc, #144]	@ (8004b2c <MX_USART2_UART_Init+0x98>)
 8004a9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004a9e:	4b22      	ldr	r3, [pc, #136]	@ (8004b28 <MX_USART2_UART_Init+0x94>)
 8004aa0:	22e1      	movs	r2, #225	@ 0xe1
 8004aa2:	0252      	lsls	r2, r2, #9
 8004aa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004aa6:	4b20      	ldr	r3, [pc, #128]	@ (8004b28 <MX_USART2_UART_Init+0x94>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004aac:	4b1e      	ldr	r3, [pc, #120]	@ (8004b28 <MX_USART2_UART_Init+0x94>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8004b28 <MX_USART2_UART_Init+0x94>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b28 <MX_USART2_UART_Init+0x94>)
 8004aba:	220c      	movs	r2, #12
 8004abc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004abe:	4b1a      	ldr	r3, [pc, #104]	@ (8004b28 <MX_USART2_UART_Init+0x94>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ac4:	4b18      	ldr	r3, [pc, #96]	@ (8004b28 <MX_USART2_UART_Init+0x94>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004aca:	4b17      	ldr	r3, [pc, #92]	@ (8004b28 <MX_USART2_UART_Init+0x94>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004ad0:	4b15      	ldr	r3, [pc, #84]	@ (8004b28 <MX_USART2_UART_Init+0x94>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ad6:	4b14      	ldr	r3, [pc, #80]	@ (8004b28 <MX_USART2_UART_Init+0x94>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004adc:	4b12      	ldr	r3, [pc, #72]	@ (8004b28 <MX_USART2_UART_Init+0x94>)
 8004ade:	0018      	movs	r0, r3
 8004ae0:	f005 fcb2 	bl	800a448 <HAL_UART_Init>
 8004ae4:	1e03      	subs	r3, r0, #0
 8004ae6:	d001      	beq.n	8004aec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004ae8:	f000 fb42 	bl	8005170 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004aec:	4b0e      	ldr	r3, [pc, #56]	@ (8004b28 <MX_USART2_UART_Init+0x94>)
 8004aee:	2100      	movs	r1, #0
 8004af0:	0018      	movs	r0, r3
 8004af2:	f006 fba9 	bl	800b248 <HAL_UARTEx_SetTxFifoThreshold>
 8004af6:	1e03      	subs	r3, r0, #0
 8004af8:	d001      	beq.n	8004afe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004afa:	f000 fb39 	bl	8005170 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004afe:	4b0a      	ldr	r3, [pc, #40]	@ (8004b28 <MX_USART2_UART_Init+0x94>)
 8004b00:	2100      	movs	r1, #0
 8004b02:	0018      	movs	r0, r3
 8004b04:	f006 fbe0 	bl	800b2c8 <HAL_UARTEx_SetRxFifoThreshold>
 8004b08:	1e03      	subs	r3, r0, #0
 8004b0a:	d001      	beq.n	8004b10 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004b0c:	f000 fb30 	bl	8005170 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004b10:	4b05      	ldr	r3, [pc, #20]	@ (8004b28 <MX_USART2_UART_Init+0x94>)
 8004b12:	0018      	movs	r0, r3
 8004b14:	f006 fb5e 	bl	800b1d4 <HAL_UARTEx_DisableFifoMode>
 8004b18:	1e03      	subs	r3, r0, #0
 8004b1a:	d001      	beq.n	8004b20 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004b1c:	f000 fb28 	bl	8005170 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004b20:	46c0      	nop			@ (mov r8, r8)
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	46c0      	nop			@ (mov r8, r8)
 8004b28:	200013f0 	.word	0x200013f0
 8004b2c:	40004400 	.word	0x40004400

08004b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004b30:	b590      	push	{r4, r7, lr}
 8004b32:	b08b      	sub	sp, #44	@ 0x2c
 8004b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b36:	2414      	movs	r4, #20
 8004b38:	193b      	adds	r3, r7, r4
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	2314      	movs	r3, #20
 8004b3e:	001a      	movs	r2, r3
 8004b40:	2100      	movs	r1, #0
 8004b42:	f006 fd17 	bl	800b574 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b46:	4b3f      	ldr	r3, [pc, #252]	@ (8004c44 <MX_GPIO_Init+0x114>)
 8004b48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b4a:	4b3e      	ldr	r3, [pc, #248]	@ (8004c44 <MX_GPIO_Init+0x114>)
 8004b4c:	2104      	movs	r1, #4
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b52:	4b3c      	ldr	r3, [pc, #240]	@ (8004c44 <MX_GPIO_Init+0x114>)
 8004b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b56:	2204      	movs	r2, #4
 8004b58:	4013      	ands	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
 8004b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b5e:	4b39      	ldr	r3, [pc, #228]	@ (8004c44 <MX_GPIO_Init+0x114>)
 8004b60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b62:	4b38      	ldr	r3, [pc, #224]	@ (8004c44 <MX_GPIO_Init+0x114>)
 8004b64:	2101      	movs	r1, #1
 8004b66:	430a      	orrs	r2, r1
 8004b68:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b6a:	4b36      	ldr	r3, [pc, #216]	@ (8004c44 <MX_GPIO_Init+0x114>)
 8004b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b6e:	2201      	movs	r2, #1
 8004b70:	4013      	ands	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b76:	4b33      	ldr	r3, [pc, #204]	@ (8004c44 <MX_GPIO_Init+0x114>)
 8004b78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b7a:	4b32      	ldr	r3, [pc, #200]	@ (8004c44 <MX_GPIO_Init+0x114>)
 8004b7c:	2102      	movs	r1, #2
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b82:	4b30      	ldr	r3, [pc, #192]	@ (8004c44 <MX_GPIO_Init+0x114>)
 8004b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b86:	2202      	movs	r2, #2
 8004b88:	4013      	ands	r3, r2
 8004b8a:	60bb      	str	r3, [r7, #8]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b8e:	4b2d      	ldr	r3, [pc, #180]	@ (8004c44 <MX_GPIO_Init+0x114>)
 8004b90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b92:	4b2c      	ldr	r3, [pc, #176]	@ (8004c44 <MX_GPIO_Init+0x114>)
 8004b94:	2108      	movs	r1, #8
 8004b96:	430a      	orrs	r2, r1
 8004b98:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b9a:	4b2a      	ldr	r3, [pc, #168]	@ (8004c44 <MX_GPIO_Init+0x114>)
 8004b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b9e:	2208      	movs	r2, #8
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	607b      	str	r3, [r7, #4]
 8004ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 8004ba6:	4928      	ldr	r1, [pc, #160]	@ (8004c48 <MX_GPIO_Init+0x118>)
 8004ba8:	23a0      	movs	r3, #160	@ 0xa0
 8004baa:	05db      	lsls	r3, r3, #23
 8004bac:	2200      	movs	r2, #0
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f001 fd9f 	bl	80066f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004bb4:	193b      	adds	r3, r7, r4
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bba:	193b      	adds	r3, r7, r4
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc0:	193b      	adds	r3, r7, r4
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bc6:	193b      	adds	r3, r7, r4
 8004bc8:	4a20      	ldr	r2, [pc, #128]	@ (8004c4c <MX_GPIO_Init+0x11c>)
 8004bca:	0019      	movs	r1, r3
 8004bcc:	0010      	movs	r0, r2
 8004bce:	f001 fc07 	bl	80063e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
 8004bd2:	193b      	adds	r3, r7, r4
 8004bd4:	4a1c      	ldr	r2, [pc, #112]	@ (8004c48 <MX_GPIO_Init+0x118>)
 8004bd6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bd8:	193b      	adds	r3, r7, r4
 8004bda:	2201      	movs	r2, #1
 8004bdc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bde:	193b      	adds	r3, r7, r4
 8004be0:	2200      	movs	r2, #0
 8004be2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004be4:	193b      	adds	r3, r7, r4
 8004be6:	2200      	movs	r2, #0
 8004be8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bea:	193a      	adds	r2, r7, r4
 8004bec:	23a0      	movs	r3, #160	@ 0xa0
 8004bee:	05db      	lsls	r3, r3, #23
 8004bf0:	0011      	movs	r1, r2
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	f001 fbf4 	bl	80063e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004bf8:	193b      	adds	r3, r7, r4
 8004bfa:	2204      	movs	r2, #4
 8004bfc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bfe:	193b      	adds	r3, r7, r4
 8004c00:	2200      	movs	r2, #0
 8004c02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c04:	193b      	adds	r3, r7, r4
 8004c06:	2200      	movs	r2, #0
 8004c08:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c0a:	193b      	adds	r3, r7, r4
 8004c0c:	4a10      	ldr	r2, [pc, #64]	@ (8004c50 <MX_GPIO_Init+0x120>)
 8004c0e:	0019      	movs	r1, r3
 8004c10:	0010      	movs	r0, r2
 8004c12:	f001 fbe5 	bl	80063e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004c16:	0021      	movs	r1, r4
 8004c18:	187b      	adds	r3, r7, r1
 8004c1a:	2280      	movs	r2, #128	@ 0x80
 8004c1c:	0112      	lsls	r2, r2, #4
 8004c1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c20:	187b      	adds	r3, r7, r1
 8004c22:	2200      	movs	r2, #0
 8004c24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c26:	187b      	adds	r3, r7, r1
 8004c28:	2200      	movs	r2, #0
 8004c2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c2c:	187a      	adds	r2, r7, r1
 8004c2e:	23a0      	movs	r3, #160	@ 0xa0
 8004c30:	05db      	lsls	r3, r3, #23
 8004c32:	0011      	movs	r1, r2
 8004c34:	0018      	movs	r0, r3
 8004c36:	f001 fbd3 	bl	80063e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8004c3a:	46c0      	nop			@ (mov r8, r8)
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	b00b      	add	sp, #44	@ 0x2c
 8004c40:	bd90      	pop	{r4, r7, pc}
 8004c42:	46c0      	nop			@ (mov r8, r8)
 8004c44:	40021000 	.word	0x40021000
 8004c48:	00008030 	.word	0x00008030
 8004c4c:	50000800 	.word	0x50000800
 8004c50:	50000400 	.word	0x50000400

08004c54 <Animate>:

/* USER CODE BEGIN 4 */
//AURORA: Put custom functions here!
void Animate (struct Img* animation, unsigned int size)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af04      	add	r7, sp, #16
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
	++currentFrame;
 8004c5e:	4b14      	ldr	r3, [pc, #80]	@ (8004cb0 <Animate+0x5c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	4b12      	ldr	r3, [pc, #72]	@ (8004cb0 <Animate+0x5c>)
 8004c66:	601a      	str	r2, [r3, #0]
	if(currentFrame > size)
 8004c68:	4b11      	ldr	r3, [pc, #68]	@ (8004cb0 <Animate+0x5c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d202      	bcs.n	8004c78 <Animate+0x24>
	{
		currentFrame = 0;
 8004c72:	4b0f      	ldr	r3, [pc, #60]	@ (8004cb0 <Animate+0x5c>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]
	}
	drawImage(animation[currentFrame].Body, palette, 40, 40, 64, 64, animation[currentFrame].Size);
 8004c78:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb0 <Animate+0x5c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	18d3      	adds	r3, r2, r3
 8004c82:	6818      	ldr	r0, [r3, #0]
 8004c84:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb0 <Animate+0x5c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	18d3      	adds	r3, r2, r3
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	4908      	ldr	r1, [pc, #32]	@ (8004cb4 <Animate+0x60>)
 8004c94:	9302      	str	r3, [sp, #8]
 8004c96:	2340      	movs	r3, #64	@ 0x40
 8004c98:	9301      	str	r3, [sp, #4]
 8004c9a:	2340      	movs	r3, #64	@ 0x40
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	2328      	movs	r3, #40	@ 0x28
 8004ca0:	2228      	movs	r2, #40	@ 0x28
 8004ca2:	f7fe fd8d 	bl	80037c0 <drawImage>
	return;
 8004ca6:	46c0      	nop			@ (mov r8, r8)
}
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	b002      	add	sp, #8
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	46c0      	nop			@ (mov r8, r8)
 8004cb0:	200011ac 	.word	0x200011ac
 8004cb4:	20000e30 	.word	0x20000e30

08004cb8 <_ADXL343_ReadReg8>:
int _ADXL343_ReadReg8 (unsigned char TargetRegister, unsigned char * TargetValue, uint8_t size)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	6039      	str	r1, [r7, #0]
 8004cc0:	0011      	movs	r1, r2
 8004cc2:	1dfb      	adds	r3, r7, #7
 8004cc4:	1c02      	adds	r2, r0, #0
 8004cc6:	701a      	strb	r2, [r3, #0]
 8004cc8:	1dbb      	adds	r3, r7, #6
 8004cca:	1c0a      	adds	r2, r1, #0
 8004ccc:	701a      	strb	r2, [r3, #0]
  if (!HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, &TargetRegister, 1, 1000)==HAL_OK)
 8004cce:	1dfa      	adds	r2, r7, #7
 8004cd0:	4811      	ldr	r0, [pc, #68]	@ (8004d18 <_ADXL343_ReadReg8+0x60>)
 8004cd2:	23fa      	movs	r3, #250	@ 0xfa
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	2301      	movs	r3, #1
 8004cda:	2128      	movs	r1, #40	@ 0x28
 8004cdc:	f001 fdcc 	bl	8006878 <HAL_I2C_Master_Transmit>
 8004ce0:	1e03      	subs	r3, r0, #0
 8004ce2:	d002      	beq.n	8004cea <_ADXL343_ReadReg8+0x32>
      return -1;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	425b      	negs	r3, r3
 8004ce8:	e011      	b.n	8004d0e <_ADXL343_ReadReg8+0x56>

  if (!HAL_I2C_Master_Receive(&hi2c1, 0x14<<1, TargetValue, size, 1000)==HAL_OK)
 8004cea:	1dbb      	adds	r3, r7, #6
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	b299      	uxth	r1, r3
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	4809      	ldr	r0, [pc, #36]	@ (8004d18 <_ADXL343_ReadReg8+0x60>)
 8004cf4:	23fa      	movs	r3, #250	@ 0xfa
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	000b      	movs	r3, r1
 8004cfc:	2128      	movs	r1, #40	@ 0x28
 8004cfe:	f001 fee5 	bl	8006acc <HAL_I2C_Master_Receive>
 8004d02:	1e03      	subs	r3, r0, #0
 8004d04:	d002      	beq.n	8004d0c <_ADXL343_ReadReg8+0x54>
    return -2;
 8004d06:	2302      	movs	r3, #2
 8004d08:	425b      	negs	r3, r3
 8004d0a:	e000      	b.n	8004d0e <_ADXL343_ReadReg8+0x56>

  return 0;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	0018      	movs	r0, r3
 8004d10:	46bd      	mov	sp, r7
 8004d12:	b002      	add	sp, #8
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	46c0      	nop			@ (mov r8, r8)
 8004d18:	2000122c 	.word	0x2000122c

08004d1c <_ADXL343_WriteReg8>:

int _ADXL343_WriteReg8 (unsigned char TargetRegister, unsigned char TargetValue)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	0002      	movs	r2, r0
 8004d24:	1dfb      	adds	r3, r7, #7
 8004d26:	701a      	strb	r2, [r3, #0]
 8004d28:	1dbb      	adds	r3, r7, #6
 8004d2a:	1c0a      	adds	r2, r1, #0
 8004d2c:	701a      	strb	r2, [r3, #0]
  unsigned char buff [2];
  buff[0] = TargetRegister;
 8004d2e:	210c      	movs	r1, #12
 8004d30:	187b      	adds	r3, r7, r1
 8004d32:	1dfa      	adds	r2, r7, #7
 8004d34:	7812      	ldrb	r2, [r2, #0]
 8004d36:	701a      	strb	r2, [r3, #0]
  buff[1] = TargetValue;
 8004d38:	187b      	adds	r3, r7, r1
 8004d3a:	1dba      	adds	r2, r7, #6
 8004d3c:	7812      	ldrb	r2, [r2, #0]
 8004d3e:	705a      	strb	r2, [r3, #1]

  if (HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, buff, 2, 100))
 8004d40:	187a      	adds	r2, r7, r1
 8004d42:	4808      	ldr	r0, [pc, #32]	@ (8004d64 <_ADXL343_WriteReg8+0x48>)
 8004d44:	2364      	movs	r3, #100	@ 0x64
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	2302      	movs	r3, #2
 8004d4a:	2128      	movs	r1, #40	@ 0x28
 8004d4c:	f001 fd94 	bl	8006878 <HAL_I2C_Master_Transmit>
 8004d50:	1e03      	subs	r3, r0, #0
 8004d52:	d002      	beq.n	8004d5a <_ADXL343_WriteReg8+0x3e>
      return -1;
 8004d54:	2301      	movs	r3, #1
 8004d56:	425b      	negs	r3, r3
 8004d58:	e000      	b.n	8004d5c <_ADXL343_WriteReg8+0x40>

  return 0;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	b004      	add	sp, #16
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	2000122c 	.word	0x2000122c

08004d68 <GetLatLon>:
	}
}

}
void GetLatLon()
{
 8004d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d6a:	b08b      	sub	sp, #44	@ 0x2c
 8004d6c:	af00      	add	r7, sp, #0
	int gpsI=0;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	627b      	str	r3, [r7, #36]	@ 0x24
	struct latLon tempPos;
	float checkW;
	float checkH;

	//HAL_UART_Recieve();
	while(HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000)==HAL_OK||1)
 8004d72:	e193      	b.n	800509c <GetLatLon+0x334>
			  		  	{
							if(buffer[gpsI]=='$')
							{
								for(ii=0;ii<=127;ii++) buffer[ii]=0;
 8004d74:	4bd5      	ldr	r3, [pc, #852]	@ (80050cc <GetLatLon+0x364>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	801a      	strh	r2, [r3, #0]
 8004d7a:	e00d      	b.n	8004d98 <GetLatLon+0x30>
 8004d7c:	4bd3      	ldr	r3, [pc, #844]	@ (80050cc <GetLatLon+0x364>)
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	001a      	movs	r2, r3
 8004d84:	4bd2      	ldr	r3, [pc, #840]	@ (80050d0 <GetLatLon+0x368>)
 8004d86:	2100      	movs	r1, #0
 8004d88:	5499      	strb	r1, [r3, r2]
 8004d8a:	4bd0      	ldr	r3, [pc, #832]	@ (80050cc <GetLatLon+0x364>)
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3301      	adds	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	4bcd      	ldr	r3, [pc, #820]	@ (80050cc <GetLatLon+0x364>)
 8004d96:	801a      	strh	r2, [r3, #0]
 8004d98:	4bcc      	ldr	r3, [pc, #816]	@ (80050cc <GetLatLon+0x364>)
 8004d9a:	881b      	ldrh	r3, [r3, #0]
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004da0:	d9ec      	bls.n	8004d7c <GetLatLon+0x14>
								buffer[0]='$';
 8004da2:	4bcb      	ldr	r3, [pc, #812]	@ (80050d0 <GetLatLon+0x368>)
 8004da4:	2224      	movs	r2, #36	@ 0x24
 8004da6:	701a      	strb	r2, [r3, #0]
								gpsI=0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	627b      	str	r3, [r7, #36]	@ 0x24
							}//HAL_UART_Transmit(&huart2, buffer[i], 1, 1000);
			  			  if(buffer[gpsI]=='\n')
 8004dac:	4ac8      	ldr	r2, [pc, #800]	@ (80050d0 <GetLatLon+0x368>)
 8004dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db0:	18d3      	adds	r3, r2, r3
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	2b0a      	cmp	r3, #10
 8004db6:	d000      	beq.n	8004dba <GetLatLon+0x52>
 8004db8:	e16d      	b.n	8005096 <GetLatLon+0x32e>
			  				  {
			  				  if(minmea_parse_rmc(&rmcStruct, &(buffer))){
 8004dba:	4ac5      	ldr	r2, [pc, #788]	@ (80050d0 <GetLatLon+0x368>)
 8004dbc:	4bc5      	ldr	r3, [pc, #788]	@ (80050d4 <GetLatLon+0x36c>)
 8004dbe:	0011      	movs	r1, r2
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	f000 fd91 	bl	80058e8 <minmea_parse_rmc>
 8004dc6:	1e03      	subs	r3, r0, #0
 8004dc8:	d100      	bne.n	8004dcc <GetLatLon+0x64>
 8004dca:	e0a2      	b.n	8004f12 <GetLatLon+0x1aa>
			  				      pos.lat = minmea_tocoord(&rmcStruct.latitude);
 8004dcc:	4bc2      	ldr	r3, [pc, #776]	@ (80050d8 <GetLatLon+0x370>)
 8004dce:	0018      	movs	r0, r3
 8004dd0:	f7ff f854 	bl	8003e7c <minmea_tocoord>
 8004dd4:	1c02      	adds	r2, r0, #0
 8004dd6:	240c      	movs	r4, #12
 8004dd8:	193b      	adds	r3, r7, r4
 8004dda:	601a      	str	r2, [r3, #0]
			  				      pos.lon = minmea_tocoord(&rmcStruct.longitude);
 8004ddc:	4bbf      	ldr	r3, [pc, #764]	@ (80050dc <GetLatLon+0x374>)
 8004dde:	0018      	movs	r0, r3
 8004de0:	f7ff f84c 	bl	8003e7c <minmea_tocoord>
 8004de4:	1c02      	adds	r2, r0, #0
 8004de6:	193b      	adds	r3, r7, r4
 8004de8:	605a      	str	r2, [r3, #4]
			  				      game.time = rmcStruct.time;
 8004dea:	4bbd      	ldr	r3, [pc, #756]	@ (80050e0 <GetLatLon+0x378>)
 8004dec:	4ab9      	ldr	r2, [pc, #740]	@ (80050d4 <GetLatLon+0x36c>)
 8004dee:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004df0:	c313      	stmia	r3!, {r0, r1, r4}
 8004df2:	6812      	ldr	r2, [r2, #0]
 8004df4:	601a      	str	r2, [r3, #0]
			  				      frameGot=1;
 8004df6:	4bbb      	ldr	r3, [pc, #748]	@ (80050e4 <GetLatLon+0x37c>)
 8004df8:	2201      	movs	r2, #1
 8004dfa:	701a      	strb	r2, [r3, #0]
			  				      for(int posCheckI=0;posCheckI<game.numLocations;posCheckI++)
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	623b      	str	r3, [r7, #32]
 8004e00:	e080      	b.n	8004f04 <GetLatLon+0x19c>
			  				      {

			  				    	  tempPos = game.positions[posCheckI];
 8004e02:	1d3a      	adds	r2, r7, #4
 8004e04:	49b6      	ldr	r1, [pc, #728]	@ (80050e0 <GetLatLon+0x378>)
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	3303      	adds	r3, #3
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	18cb      	adds	r3, r1, r3
 8004e0e:	cb03      	ldmia	r3!, {r0, r1}
 8004e10:	c203      	stmia	r2!, {r0, r1}
			  				    	if(tempPos.lat&&pos.lat){
 8004e12:	1d3b      	adds	r3, r7, #4
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2100      	movs	r1, #0
 8004e18:	1c18      	adds	r0, r3, #0
 8004e1a:	f7fb fb47 	bl	80004ac <__aeabi_fcmpeq>
 8004e1e:	1e03      	subs	r3, r0, #0
 8004e20:	d000      	beq.n	8004e24 <GetLatLon+0xbc>
			  				    	  checkH = abs(tempPos.lon-pos.lon);
			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;
			  				    	game.positions[game.numLocations] = pos;
			  				    									  game.numLocations++;
			  				    	}
			  				    	  else return;
 8004e22:	e14f      	b.n	80050c4 <GetLatLon+0x35c>
			  				    	if(tempPos.lat&&pos.lat){
 8004e24:	230c      	movs	r3, #12
 8004e26:	18fb      	adds	r3, r7, r3
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	1c18      	adds	r0, r3, #0
 8004e2e:	f7fb fb3d 	bl	80004ac <__aeabi_fcmpeq>
 8004e32:	1e03      	subs	r3, r0, #0
 8004e34:	d000      	beq.n	8004e38 <GetLatLon+0xd0>
			  				    	  else return;
 8004e36:	e145      	b.n	80050c4 <GetLatLon+0x35c>
			  				    	  checkW = abs(tempPos.lat-pos.lat);
 8004e38:	1d3b      	adds	r3, r7, #4
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	260c      	movs	r6, #12
 8004e3e:	19bb      	adds	r3, r7, r6
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	1c19      	adds	r1, r3, #0
 8004e44:	1c10      	adds	r0, r2, #0
 8004e46:	f7fc f911 	bl	800106c <__aeabi_fsub>
 8004e4a:	1c03      	adds	r3, r0, #0
 8004e4c:	1c18      	adds	r0, r3, #0
 8004e4e:	f7fc fab1 	bl	80013b4 <__aeabi_f2iz>
 8004e52:	0003      	movs	r3, r0
 8004e54:	17da      	asrs	r2, r3, #31
 8004e56:	189b      	adds	r3, r3, r2
 8004e58:	4053      	eors	r3, r2
 8004e5a:	0018      	movs	r0, r3
 8004e5c:	f7fc faca 	bl	80013f4 <__aeabi_i2f>
 8004e60:	1c03      	adds	r3, r0, #0
 8004e62:	61bb      	str	r3, [r7, #24]
			  				    	  checkH = abs(tempPos.lon-pos.lon);
 8004e64:	1d3b      	adds	r3, r7, #4
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	19bb      	adds	r3, r7, r6
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	1c19      	adds	r1, r3, #0
 8004e6e:	1c10      	adds	r0, r2, #0
 8004e70:	f7fc f8fc 	bl	800106c <__aeabi_fsub>
 8004e74:	1c03      	adds	r3, r0, #0
 8004e76:	1c18      	adds	r0, r3, #0
 8004e78:	f7fc fa9c 	bl	80013b4 <__aeabi_f2iz>
 8004e7c:	0003      	movs	r3, r0
 8004e7e:	17da      	asrs	r2, r3, #31
 8004e80:	189b      	adds	r3, r3, r2
 8004e82:	4053      	eors	r3, r2
 8004e84:	0018      	movs	r0, r3
 8004e86:	f7fc fab5 	bl	80013f4 <__aeabi_i2f>
 8004e8a:	1c03      	adds	r3, r0, #0
 8004e8c:	617b      	str	r3, [r7, #20]
			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;
 8004e8e:	69b9      	ldr	r1, [r7, #24]
 8004e90:	69b8      	ldr	r0, [r7, #24]
 8004e92:	f7fb ffad 	bl	8000df0 <__aeabi_fmul>
 8004e96:	1c03      	adds	r3, r0, #0
 8004e98:	1c1c      	adds	r4, r3, #0
 8004e9a:	6979      	ldr	r1, [r7, #20]
 8004e9c:	6978      	ldr	r0, [r7, #20]
 8004e9e:	f7fb ffa7 	bl	8000df0 <__aeabi_fmul>
 8004ea2:	1c03      	adds	r3, r0, #0
 8004ea4:	1c19      	adds	r1, r3, #0
 8004ea6:	1c20      	adds	r0, r4, #0
 8004ea8:	f7fb fc32 	bl	8000710 <__aeabi_fadd>
 8004eac:	1c03      	adds	r3, r0, #0
 8004eae:	1c18      	adds	r0, r3, #0
 8004eb0:	f7fe f91a 	bl	80030e8 <__aeabi_f2d>
 8004eb4:	0002      	movs	r2, r0
 8004eb6:	000b      	movs	r3, r1
 8004eb8:	0010      	movs	r0, r2
 8004eba:	0019      	movs	r1, r3
 8004ebc:	f006 ffd8 	bl	800be70 <sqrt>
 8004ec0:	0004      	movs	r4, r0
 8004ec2:	000d      	movs	r5, r1
 8004ec4:	4b88      	ldr	r3, [pc, #544]	@ (80050e8 <GetLatLon+0x380>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	1c18      	adds	r0, r3, #0
 8004eca:	f7fe f90d 	bl	80030e8 <__aeabi_f2d>
 8004ece:	0002      	movs	r2, r0
 8004ed0:	000b      	movs	r3, r1
 8004ed2:	0020      	movs	r0, r4
 8004ed4:	0029      	movs	r1, r5
 8004ed6:	f7fb fab5 	bl	8000444 <__aeabi_dcmplt>
 8004eda:	1e03      	subs	r3, r0, #0
 8004edc:	d000      	beq.n	8004ee0 <GetLatLon+0x178>
 8004ede:	e0ee      	b.n	80050be <GetLatLon+0x356>
			  				    	game.positions[game.numLocations] = pos;
 8004ee0:	4b7f      	ldr	r3, [pc, #508]	@ (80050e0 <GetLatLon+0x378>)
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	4a7e      	ldr	r2, [pc, #504]	@ (80050e0 <GetLatLon+0x378>)
 8004ee6:	3303      	adds	r3, #3
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	19b9      	adds	r1, r7, r6
 8004eec:	18d3      	adds	r3, r2, r3
 8004eee:	000a      	movs	r2, r1
 8004ef0:	ca03      	ldmia	r2!, {r0, r1}
 8004ef2:	c303      	stmia	r3!, {r0, r1}
			  				    									  game.numLocations++;
 8004ef4:	4b7a      	ldr	r3, [pc, #488]	@ (80050e0 <GetLatLon+0x378>)
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	1c5a      	adds	r2, r3, #1
 8004efa:	4b79      	ldr	r3, [pc, #484]	@ (80050e0 <GetLatLon+0x378>)
 8004efc:	615a      	str	r2, [r3, #20]
			  				      for(int posCheckI=0;posCheckI<game.numLocations;posCheckI++)
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	3301      	adds	r3, #1
 8004f02:	623b      	str	r3, [r7, #32]
 8004f04:	4b76      	ldr	r3, [pc, #472]	@ (80050e0 <GetLatLon+0x378>)
 8004f06:	695a      	ldr	r2, [r3, #20]
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d900      	bls.n	8004f10 <GetLatLon+0x1a8>
 8004f0e:	e778      	b.n	8004e02 <GetLatLon+0x9a>
			  				      }

			  				      break;
 8004f10:	e0d8      	b.n	80050c4 <GetLatLon+0x35c>
			  				  }
			  				if(minmea_parse_gga(&ggaStruct, &(buffer))){
 8004f12:	4a6f      	ldr	r2, [pc, #444]	@ (80050d0 <GetLatLon+0x368>)
 8004f14:	4b75      	ldr	r3, [pc, #468]	@ (80050ec <GetLatLon+0x384>)
 8004f16:	0011      	movs	r1, r2
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f000 fd59 	bl	80059d0 <minmea_parse_gga>
 8004f1e:	1e03      	subs	r3, r0, #0
 8004f20:	d100      	bne.n	8004f24 <GetLatLon+0x1bc>
 8004f22:	e0a1      	b.n	8005068 <GetLatLon+0x300>
			  							  				      pos.lat = minmea_tocoord(&ggaStruct.latitude);
 8004f24:	4b72      	ldr	r3, [pc, #456]	@ (80050f0 <GetLatLon+0x388>)
 8004f26:	0018      	movs	r0, r3
 8004f28:	f7fe ffa8 	bl	8003e7c <minmea_tocoord>
 8004f2c:	1c02      	adds	r2, r0, #0
 8004f2e:	240c      	movs	r4, #12
 8004f30:	193b      	adds	r3, r7, r4
 8004f32:	601a      	str	r2, [r3, #0]
			  							  				      pos.lon = minmea_tocoord(&ggaStruct.longitude);
 8004f34:	4b6f      	ldr	r3, [pc, #444]	@ (80050f4 <GetLatLon+0x38c>)
 8004f36:	0018      	movs	r0, r3
 8004f38:	f7fe ffa0 	bl	8003e7c <minmea_tocoord>
 8004f3c:	1c02      	adds	r2, r0, #0
 8004f3e:	193b      	adds	r3, r7, r4
 8004f40:	605a      	str	r2, [r3, #4]
			  							  				      game.time = ggaStruct.time;
 8004f42:	4b67      	ldr	r3, [pc, #412]	@ (80050e0 <GetLatLon+0x378>)
 8004f44:	4a69      	ldr	r2, [pc, #420]	@ (80050ec <GetLatLon+0x384>)
 8004f46:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004f48:	c313      	stmia	r3!, {r0, r1, r4}
 8004f4a:	6812      	ldr	r2, [r2, #0]
 8004f4c:	601a      	str	r2, [r3, #0]
			  							  				      frameGot=1;
 8004f4e:	4b65      	ldr	r3, [pc, #404]	@ (80050e4 <GetLatLon+0x37c>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	701a      	strb	r2, [r3, #0]
			  							  				  for(int posCheckI=0;posCheckI<game.numLocations;posCheckI++)
 8004f54:	2300      	movs	r3, #0
 8004f56:	61fb      	str	r3, [r7, #28]
 8004f58:	e07f      	b.n	800505a <GetLatLon+0x2f2>
			  							  				  			  				      {

			  							  				  			  				    	  tempPos = game.positions[posCheckI];
 8004f5a:	1d3a      	adds	r2, r7, #4
 8004f5c:	4960      	ldr	r1, [pc, #384]	@ (80050e0 <GetLatLon+0x378>)
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	3303      	adds	r3, #3
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	18cb      	adds	r3, r1, r3
 8004f66:	cb03      	ldmia	r3!, {r0, r1}
 8004f68:	c203      	stmia	r2!, {r0, r1}
			  							  				  			  				    	  if(tempPos.lat&&pos.lat){
 8004f6a:	1d3b      	adds	r3, r7, #4
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2100      	movs	r1, #0
 8004f70:	1c18      	adds	r0, r3, #0
 8004f72:	f7fb fa9b 	bl	80004ac <__aeabi_fcmpeq>
 8004f76:	1e03      	subs	r3, r0, #0
 8004f78:	d000      	beq.n	8004f7c <GetLatLon+0x214>
			  							  				  			  				    	  checkH = abs(tempPos.lon-pos.lon);
			  							  				  			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;
			  							  				  			  				  game.positions[game.numLocations] = pos;
			  							  				  			  				  								  game.numLocations++;
			  							  				  			  				    	  }
			  							  				  			  				    	  else return;
 8004f7a:	e0a3      	b.n	80050c4 <GetLatLon+0x35c>
			  							  				  			  				    	  if(tempPos.lat&&pos.lat){
 8004f7c:	230c      	movs	r3, #12
 8004f7e:	18fb      	adds	r3, r7, r3
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2100      	movs	r1, #0
 8004f84:	1c18      	adds	r0, r3, #0
 8004f86:	f7fb fa91 	bl	80004ac <__aeabi_fcmpeq>
 8004f8a:	1e03      	subs	r3, r0, #0
 8004f8c:	d000      	beq.n	8004f90 <GetLatLon+0x228>
			  							  				  			  				    	  else return;
 8004f8e:	e099      	b.n	80050c4 <GetLatLon+0x35c>
			  							  				  			  				    	  checkW = abs(tempPos.lat-pos.lat);
 8004f90:	1d3b      	adds	r3, r7, #4
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	260c      	movs	r6, #12
 8004f96:	19bb      	adds	r3, r7, r6
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	1c19      	adds	r1, r3, #0
 8004f9c:	1c10      	adds	r0, r2, #0
 8004f9e:	f7fc f865 	bl	800106c <__aeabi_fsub>
 8004fa2:	1c03      	adds	r3, r0, #0
 8004fa4:	1c18      	adds	r0, r3, #0
 8004fa6:	f7fc fa05 	bl	80013b4 <__aeabi_f2iz>
 8004faa:	0003      	movs	r3, r0
 8004fac:	17da      	asrs	r2, r3, #31
 8004fae:	189b      	adds	r3, r3, r2
 8004fb0:	4053      	eors	r3, r2
 8004fb2:	0018      	movs	r0, r3
 8004fb4:	f7fc fa1e 	bl	80013f4 <__aeabi_i2f>
 8004fb8:	1c03      	adds	r3, r0, #0
 8004fba:	61bb      	str	r3, [r7, #24]
			  							  				  			  				    	  checkH = abs(tempPos.lon-pos.lon);
 8004fbc:	1d3b      	adds	r3, r7, #4
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	19bb      	adds	r3, r7, r6
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	1c19      	adds	r1, r3, #0
 8004fc6:	1c10      	adds	r0, r2, #0
 8004fc8:	f7fc f850 	bl	800106c <__aeabi_fsub>
 8004fcc:	1c03      	adds	r3, r0, #0
 8004fce:	1c18      	adds	r0, r3, #0
 8004fd0:	f7fc f9f0 	bl	80013b4 <__aeabi_f2iz>
 8004fd4:	0003      	movs	r3, r0
 8004fd6:	17da      	asrs	r2, r3, #31
 8004fd8:	189b      	adds	r3, r3, r2
 8004fda:	4053      	eors	r3, r2
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f7fc fa09 	bl	80013f4 <__aeabi_i2f>
 8004fe2:	1c03      	adds	r3, r0, #0
 8004fe4:	617b      	str	r3, [r7, #20]
			  							  				  			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;
 8004fe6:	69b9      	ldr	r1, [r7, #24]
 8004fe8:	69b8      	ldr	r0, [r7, #24]
 8004fea:	f7fb ff01 	bl	8000df0 <__aeabi_fmul>
 8004fee:	1c03      	adds	r3, r0, #0
 8004ff0:	1c1c      	adds	r4, r3, #0
 8004ff2:	6979      	ldr	r1, [r7, #20]
 8004ff4:	6978      	ldr	r0, [r7, #20]
 8004ff6:	f7fb fefb 	bl	8000df0 <__aeabi_fmul>
 8004ffa:	1c03      	adds	r3, r0, #0
 8004ffc:	1c19      	adds	r1, r3, #0
 8004ffe:	1c20      	adds	r0, r4, #0
 8005000:	f7fb fb86 	bl	8000710 <__aeabi_fadd>
 8005004:	1c03      	adds	r3, r0, #0
 8005006:	1c18      	adds	r0, r3, #0
 8005008:	f7fe f86e 	bl	80030e8 <__aeabi_f2d>
 800500c:	0002      	movs	r2, r0
 800500e:	000b      	movs	r3, r1
 8005010:	0010      	movs	r0, r2
 8005012:	0019      	movs	r1, r3
 8005014:	f006 ff2c 	bl	800be70 <sqrt>
 8005018:	0004      	movs	r4, r0
 800501a:	000d      	movs	r5, r1
 800501c:	4b32      	ldr	r3, [pc, #200]	@ (80050e8 <GetLatLon+0x380>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	1c18      	adds	r0, r3, #0
 8005022:	f7fe f861 	bl	80030e8 <__aeabi_f2d>
 8005026:	0002      	movs	r2, r0
 8005028:	000b      	movs	r3, r1
 800502a:	0020      	movs	r0, r4
 800502c:	0029      	movs	r1, r5
 800502e:	f7fb fa09 	bl	8000444 <__aeabi_dcmplt>
 8005032:	1e03      	subs	r3, r0, #0
 8005034:	d145      	bne.n	80050c2 <GetLatLon+0x35a>
			  							  				  			  				  game.positions[game.numLocations] = pos;
 8005036:	4b2a      	ldr	r3, [pc, #168]	@ (80050e0 <GetLatLon+0x378>)
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	4a29      	ldr	r2, [pc, #164]	@ (80050e0 <GetLatLon+0x378>)
 800503c:	3303      	adds	r3, #3
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	19b9      	adds	r1, r7, r6
 8005042:	18d3      	adds	r3, r2, r3
 8005044:	000a      	movs	r2, r1
 8005046:	ca03      	ldmia	r2!, {r0, r1}
 8005048:	c303      	stmia	r3!, {r0, r1}
			  							  				  			  				  								  game.numLocations++;
 800504a:	4b25      	ldr	r3, [pc, #148]	@ (80050e0 <GetLatLon+0x378>)
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	4b23      	ldr	r3, [pc, #140]	@ (80050e0 <GetLatLon+0x378>)
 8005052:	615a      	str	r2, [r3, #20]
			  							  				  for(int posCheckI=0;posCheckI<game.numLocations;posCheckI++)
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	3301      	adds	r3, #1
 8005058:	61fb      	str	r3, [r7, #28]
 800505a:	4b21      	ldr	r3, [pc, #132]	@ (80050e0 <GetLatLon+0x378>)
 800505c:	695a      	ldr	r2, [r3, #20]
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	429a      	cmp	r2, r3
 8005062:	d900      	bls.n	8005066 <GetLatLon+0x2fe>
 8005064:	e779      	b.n	8004f5a <GetLatLon+0x1f2>
			  							  				  			  				      }
			  							  				      break;
 8005066:	e02d      	b.n	80050c4 <GetLatLon+0x35c>
			  							  				  }

			  				for(ii=0;ii<=127;ii++) buffer[ii]=0;
 8005068:	4b18      	ldr	r3, [pc, #96]	@ (80050cc <GetLatLon+0x364>)
 800506a:	2200      	movs	r2, #0
 800506c:	801a      	strh	r2, [r3, #0]
 800506e:	e00d      	b.n	800508c <GetLatLon+0x324>
 8005070:	4b16      	ldr	r3, [pc, #88]	@ (80050cc <GetLatLon+0x364>)
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	b29b      	uxth	r3, r3
 8005076:	001a      	movs	r2, r3
 8005078:	4b15      	ldr	r3, [pc, #84]	@ (80050d0 <GetLatLon+0x368>)
 800507a:	2100      	movs	r1, #0
 800507c:	5499      	strb	r1, [r3, r2]
 800507e:	4b13      	ldr	r3, [pc, #76]	@ (80050cc <GetLatLon+0x364>)
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	b29b      	uxth	r3, r3
 8005084:	3301      	adds	r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	4b10      	ldr	r3, [pc, #64]	@ (80050cc <GetLatLon+0x364>)
 800508a:	801a      	strh	r2, [r3, #0]
 800508c:	4b0f      	ldr	r3, [pc, #60]	@ (80050cc <GetLatLon+0x364>)
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	b29b      	uxth	r3, r3
 8005092:	2b7f      	cmp	r3, #127	@ 0x7f
 8005094:	d9ec      	bls.n	8005070 <GetLatLon+0x308>
			  				  }
			  			  gpsI++;
 8005096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005098:	3301      	adds	r3, #1
 800509a:	627b      	str	r3, [r7, #36]	@ 0x24
	while(HAL_UART_Receive(&huart1, &(buffer[gpsI]), 1, 1000)==HAL_OK||1)
 800509c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800509e:	4b0c      	ldr	r3, [pc, #48]	@ (80050d0 <GetLatLon+0x368>)
 80050a0:	18d1      	adds	r1, r2, r3
 80050a2:	23fa      	movs	r3, #250	@ 0xfa
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4814      	ldr	r0, [pc, #80]	@ (80050f8 <GetLatLon+0x390>)
 80050a8:	2201      	movs	r2, #1
 80050aa:	f005 fa23 	bl	800a4f4 <HAL_UART_Receive>
							if(buffer[gpsI]=='$')
 80050ae:	4a08      	ldr	r2, [pc, #32]	@ (80050d0 <GetLatLon+0x368>)
 80050b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b2:	18d3      	adds	r3, r2, r3
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	2b24      	cmp	r3, #36	@ 0x24
 80050b8:	d000      	beq.n	80050bc <GetLatLon+0x354>
 80050ba:	e677      	b.n	8004dac <GetLatLon+0x44>
 80050bc:	e65a      	b.n	8004d74 <GetLatLon+0xc>
			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;
 80050be:	46c0      	nop			@ (mov r8, r8)
 80050c0:	e000      	b.n	80050c4 <GetLatLon+0x35c>
			  							  				  			  				    	  if(sqrt((checkW*checkW)+(checkH*checkH))<gpsThreshold) return;
 80050c2:	46c0      	nop			@ (mov r8, r8)


			  		  	}


}
 80050c4:	46bd      	mov	sp, r7
 80050c6:	b00b      	add	sp, #44	@ 0x2c
 80050c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050ca:	46c0      	nop			@ (mov r8, r8)
 80050cc:	20001068 	.word	0x20001068
 80050d0:	20001108 	.word	0x20001108
 80050d4:	20001070 	.word	0x20001070
 80050d8:	20001084 	.word	0x20001084
 80050dc:	2000108c 	.word	0x2000108c
 80050e0:	20000f18 	.word	0x20000f18
 80050e4:	20001106 	.word	0x20001106
 80050e8:	200011b0 	.word	0x200011b0
 80050ec:	200010b8 	.word	0x200010b8
 80050f0:	200010c8 	.word	0x200010c8
 80050f4:	200010d0 	.word	0x200010d0
 80050f8:	2000135c 	.word	0x2000135c

080050fc <HAL_RTC_AlarmAEventCallback>:
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80050fc:	b590      	push	{r4, r7, lr}
 80050fe:	b091      	sub	sp, #68	@ 0x44
 8005100:	af04      	add	r7, sp, #16
 8005102:	6078      	str	r0, [r7, #4]
  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 8005104:	2380      	movs	r3, #128	@ 0x80
 8005106:	005a      	lsls	r2, r3, #1
 8005108:	2408      	movs	r4, #8
 800510a:	1939      	adds	r1, r7, r4
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	2300      	movs	r3, #0
 8005110:	f003 fbfe 	bl	8008910 <HAL_RTC_GetAlarm>
  if(sAlarm.AlarmTime.Seconds>58) {
 8005114:	0022      	movs	r2, r4
 8005116:	18bb      	adds	r3, r7, r2
 8005118:	789b      	ldrb	r3, [r3, #2]
 800511a:	2b3a      	cmp	r3, #58	@ 0x3a
 800511c:	d903      	bls.n	8005126 <HAL_RTC_AlarmAEventCallback+0x2a>
    sAlarm.AlarmTime.Seconds=0;
 800511e:	18bb      	adds	r3, r7, r2
 8005120:	2200      	movs	r2, #0
 8005122:	709a      	strb	r2, [r3, #2]
 8005124:	e006      	b.n	8005134 <HAL_RTC_AlarmAEventCallback+0x38>
  }else{
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 8005126:	2108      	movs	r1, #8
 8005128:	187b      	adds	r3, r7, r1
 800512a:	789b      	ldrb	r3, [r3, #2]
 800512c:	3301      	adds	r3, #1
 800512e:	b2da      	uxtb	r2, r3
 8005130:	187b      	adds	r3, r7, r1
 8005132:	709a      	strb	r2, [r3, #2]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8005134:	46c0      	nop			@ (mov r8, r8)
 8005136:	2308      	movs	r3, #8
 8005138:	18f9      	adds	r1, r7, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	0018      	movs	r0, r3
 8005140:	f003 faa6 	bl	8008690 <HAL_RTC_SetAlarm_IT>
 8005144:	1e03      	subs	r3, r0, #0
 8005146:	d1f6      	bne.n	8005136 <HAL_RTC_AlarmAEventCallback+0x3a>
  	  drawString(30, 30, "testTime", BLACK, GREEN, 1, 1);
 8005148:	4a07      	ldr	r2, [pc, #28]	@ (8005168 <HAL_RTC_AlarmAEventCallback+0x6c>)
 800514a:	2301      	movs	r3, #1
 800514c:	9302      	str	r3, [sp, #8]
 800514e:	2301      	movs	r3, #1
 8005150:	9301      	str	r3, [sp, #4]
 8005152:	4b06      	ldr	r3, [pc, #24]	@ (800516c <HAL_RTC_AlarmAEventCallback+0x70>)
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	2300      	movs	r3, #0
 8005158:	211e      	movs	r1, #30
 800515a:	201e      	movs	r0, #30
 800515c:	f7fe f978 	bl	8003450 <drawString>
}
 8005160:	46c0      	nop			@ (mov r8, r8)
 8005162:	46bd      	mov	sp, r7
 8005164:	b00d      	add	sp, #52	@ 0x34
 8005166:	bd90      	pop	{r4, r7, pc}
 8005168:	0800c208 	.word	0x0800c208
 800516c:	ffffe007 	.word	0xffffe007

08005170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005174:	b672      	cpsid	i
}
 8005176:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005178:	46c0      	nop			@ (mov r8, r8)
 800517a:	e7fd      	b.n	8005178 <Error_Handler+0x8>

0800517c <minmea_isfield>:
        return false;

    return true;
}

static inline bool minmea_isfield(char c) {
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	0002      	movs	r2, r0
 8005184:	1dfb      	adds	r3, r7, #7
 8005186:	701a      	strb	r2, [r3, #0]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8005188:	1dfb      	adds	r3, r7, #7
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	4b0d      	ldr	r3, [pc, #52]	@ (80051c4 <minmea_isfield+0x48>)
 8005190:	18d3      	adds	r3, r2, r3
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	001a      	movs	r2, r3
 8005196:	2397      	movs	r3, #151	@ 0x97
 8005198:	4013      	ands	r3, r2
 800519a:	d009      	beq.n	80051b0 <minmea_isfield+0x34>
 800519c:	1dfb      	adds	r3, r7, #7
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2b2c      	cmp	r3, #44	@ 0x2c
 80051a2:	d005      	beq.n	80051b0 <minmea_isfield+0x34>
 80051a4:	1dfb      	adds	r3, r7, #7
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80051aa:	d001      	beq.n	80051b0 <minmea_isfield+0x34>
 80051ac:	2301      	movs	r3, #1
 80051ae:	e000      	b.n	80051b2 <minmea_isfield+0x36>
 80051b0:	2300      	movs	r3, #0
 80051b2:	1c1a      	adds	r2, r3, #0
 80051b4:	2301      	movs	r3, #1
 80051b6:	4013      	ands	r3, r2
 80051b8:	b2db      	uxtb	r3, r3
}
 80051ba:	0018      	movs	r0, r3
 80051bc:	46bd      	mov	sp, r7
 80051be:	b002      	add	sp, #8
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	46c0      	nop			@ (mov r8, r8)
 80051c4:	0800ca58 	.word	0x0800ca58

080051c8 <minmea_scan>:

bool minmea_scan(const char *sentence, const char *format, ...)
{
 80051c8:	b40e      	push	{r1, r2, r3}
 80051ca:	b5b0      	push	{r4, r5, r7, lr}
 80051cc:	b0a7      	sub	sp, #156	@ 0x9c
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
    bool result = false;
 80051d2:	2397      	movs	r3, #151	@ 0x97
 80051d4:	18fb      	adds	r3, r7, r3
 80051d6:	2200      	movs	r2, #0
 80051d8:	701a      	strb	r2, [r3, #0]
    bool optional = false;
 80051da:	2396      	movs	r3, #150	@ 0x96
 80051dc:	18fb      	adds	r3, r7, r3
 80051de:	2200      	movs	r2, #0
 80051e0:	701a      	strb	r2, [r3, #0]
    va_list ap;
    va_start(ap, format);
 80051e2:	23a8      	movs	r3, #168	@ 0xa8
 80051e4:	2208      	movs	r2, #8
 80051e6:	189b      	adds	r3, r3, r2
 80051e8:	19db      	adds	r3, r3, r7
 80051ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

    const char *field = sentence;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2290      	movs	r2, #144	@ 0x90
 80051f0:	18ba      	adds	r2, r7, r2
 80051f2:	6013      	str	r3, [r2, #0]
        } else { \
            field = NULL; \
        } \
    } while (0)

    while (*format) {
 80051f4:	e345      	b.n	8005882 <minmea_scan+0x6ba>
        char type = *format++;
 80051f6:	21a4      	movs	r1, #164	@ 0xa4
 80051f8:	2008      	movs	r0, #8
 80051fa:	180b      	adds	r3, r1, r0
 80051fc:	19db      	adds	r3, r3, r7
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	1809      	adds	r1, r1, r0
 8005204:	19c9      	adds	r1, r1, r7
 8005206:	600a      	str	r2, [r1, #0]
 8005208:	2143      	movs	r1, #67	@ 0x43
 800520a:	187a      	adds	r2, r7, r1
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	7013      	strb	r3, [r2, #0]

        if (type == ';') {
 8005210:	187b      	adds	r3, r7, r1
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b3b      	cmp	r3, #59	@ 0x3b
 8005216:	d104      	bne.n	8005222 <minmea_scan+0x5a>
            // All further fields are optional.
            optional = true;
 8005218:	2396      	movs	r3, #150	@ 0x96
 800521a:	18fb      	adds	r3, r7, r3
 800521c:	2201      	movs	r2, #1
 800521e:	701a      	strb	r2, [r3, #0]
            continue;
 8005220:	e32f      	b.n	8005882 <minmea_scan+0x6ba>
        }

        if (!field && !optional) {
 8005222:	2390      	movs	r3, #144	@ 0x90
 8005224:	18fb      	adds	r3, r7, r3
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d108      	bne.n	800523e <minmea_scan+0x76>
 800522c:	2396      	movs	r3, #150	@ 0x96
 800522e:	18fb      	adds	r3, r7, r3
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	2201      	movs	r2, #1
 8005234:	4053      	eors	r3, r2
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d000      	beq.n	800523e <minmea_scan+0x76>
 800523c:	e32f      	b.n	800589e <minmea_scan+0x6d6>
            // Field requested but we ran out if input. Bail out.
            goto parse_error;
        }

        switch (type) {
 800523e:	2343      	movs	r3, #67	@ 0x43
 8005240:	18fb      	adds	r3, r7, r3
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	3b44      	subs	r3, #68	@ 0x44
 8005246:	2b30      	cmp	r3, #48	@ 0x30
 8005248:	d900      	bls.n	800524c <minmea_scan+0x84>
 800524a:	e32a      	b.n	80058a2 <minmea_scan+0x6da>
 800524c:	009a      	lsls	r2, r3, #2
 800524e:	4bbd      	ldr	r3, [pc, #756]	@ (8005544 <minmea_scan+0x37c>)
 8005250:	18d3      	adds	r3, r2, r3
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	469f      	mov	pc, r3
            case 'c': { // Single character field (char).
                char value = '\0';
 8005256:	258f      	movs	r5, #143	@ 0x8f
 8005258:	197b      	adds	r3, r7, r5
 800525a:	2200      	movs	r2, #0
 800525c:	701a      	strb	r2, [r3, #0]

                if (field && minmea_isfield(*field))
 800525e:	2490      	movs	r4, #144	@ 0x90
 8005260:	193b      	adds	r3, r7, r4
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00c      	beq.n	8005282 <minmea_scan+0xba>
 8005268:	193b      	adds	r3, r7, r4
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	0018      	movs	r0, r3
 8005270:	f7ff ff84 	bl	800517c <minmea_isfield>
 8005274:	1e03      	subs	r3, r0, #0
 8005276:	d004      	beq.n	8005282 <minmea_scan+0xba>
                    value = *field;
 8005278:	197b      	adds	r3, r7, r5
 800527a:	193a      	adds	r2, r7, r4
 800527c:	6812      	ldr	r2, [r2, #0]
 800527e:	7812      	ldrb	r2, [r2, #0]
 8005280:	701a      	strb	r2, [r3, #0]

                *va_arg(ap, char *) = value;
 8005282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005284:	1d1a      	adds	r2, r3, #4
 8005286:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	228f      	movs	r2, #143	@ 0x8f
 800528c:	18ba      	adds	r2, r7, r2
 800528e:	7812      	ldrb	r2, [r2, #0]
 8005290:	701a      	strb	r2, [r3, #0]
            } break;
 8005292:	e2db      	b.n	800584c <minmea_scan+0x684>

            case 'd': { // Single character direction field (int).
                int value = 0;
 8005294:	2300      	movs	r3, #0
 8005296:	2288      	movs	r2, #136	@ 0x88
 8005298:	18ba      	adds	r2, r7, r2
 800529a:	6013      	str	r3, [r2, #0]

                if (field && minmea_isfield(*field)) {
 800529c:	2490      	movs	r4, #144	@ 0x90
 800529e:	193b      	adds	r3, r7, r4
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d022      	beq.n	80052ec <minmea_scan+0x124>
 80052a6:	193b      	adds	r3, r7, r4
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	0018      	movs	r0, r3
 80052ae:	f7ff ff65 	bl	800517c <minmea_isfield>
 80052b2:	1e03      	subs	r3, r0, #0
 80052b4:	d01a      	beq.n	80052ec <minmea_scan+0x124>
                    switch (*field) {
 80052b6:	193b      	adds	r3, r7, r4
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b57      	cmp	r3, #87	@ 0x57
 80052be:	d00f      	beq.n	80052e0 <minmea_scan+0x118>
 80052c0:	dd00      	ble.n	80052c4 <minmea_scan+0xfc>
 80052c2:	e2f0      	b.n	80058a6 <minmea_scan+0x6de>
 80052c4:	2b53      	cmp	r3, #83	@ 0x53
 80052c6:	d00b      	beq.n	80052e0 <minmea_scan+0x118>
 80052c8:	dd00      	ble.n	80052cc <minmea_scan+0x104>
 80052ca:	e2ec      	b.n	80058a6 <minmea_scan+0x6de>
 80052cc:	2b45      	cmp	r3, #69	@ 0x45
 80052ce:	d002      	beq.n	80052d6 <minmea_scan+0x10e>
 80052d0:	2b4e      	cmp	r3, #78	@ 0x4e
 80052d2:	d000      	beq.n	80052d6 <minmea_scan+0x10e>
 80052d4:	e2e7      	b.n	80058a6 <minmea_scan+0x6de>
                        case 'N':
                        case 'E':
                            value = 1;
 80052d6:	2301      	movs	r3, #1
 80052d8:	2288      	movs	r2, #136	@ 0x88
 80052da:	18ba      	adds	r2, r7, r2
 80052dc:	6013      	str	r3, [r2, #0]
                            break;
 80052de:	e005      	b.n	80052ec <minmea_scan+0x124>
                        case 'S':
                        case 'W':
                            value = -1;
 80052e0:	2301      	movs	r3, #1
 80052e2:	425b      	negs	r3, r3
 80052e4:	2288      	movs	r2, #136	@ 0x88
 80052e6:	18ba      	adds	r2, r7, r2
 80052e8:	6013      	str	r3, [r2, #0]
                            break;
 80052ea:	46c0      	nop			@ (mov r8, r8)
                        default:
                            goto parse_error;
                    }
                }

                *va_arg(ap, int *) = value;
 80052ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ee:	1d1a      	adds	r2, r3, #4
 80052f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2288      	movs	r2, #136	@ 0x88
 80052f6:	18ba      	adds	r2, r7, r2
 80052f8:	6812      	ldr	r2, [r2, #0]
 80052fa:	601a      	str	r2, [r3, #0]
            } break;
 80052fc:	e2a6      	b.n	800584c <minmea_scan+0x684>

            case 'f': { // Fractional value with scale (struct minmea_float).
                int sign = 0;
 80052fe:	2300      	movs	r3, #0
 8005300:	2284      	movs	r2, #132	@ 0x84
 8005302:	18ba      	adds	r2, r7, r2
 8005304:	6013      	str	r3, [r2, #0]
                int_least32_t value = -1;
 8005306:	2301      	movs	r3, #1
 8005308:	425b      	negs	r3, r3
 800530a:	2280      	movs	r2, #128	@ 0x80
 800530c:	18ba      	adds	r2, r7, r2
 800530e:	6013      	str	r3, [r2, #0]
                int_least32_t scale = 0;
 8005310:	2300      	movs	r3, #0
 8005312:	67fb      	str	r3, [r7, #124]	@ 0x7c

                if (field) {
 8005314:	2390      	movs	r3, #144	@ 0x90
 8005316:	18fb      	adds	r3, r7, r3
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d100      	bne.n	8005320 <minmea_scan+0x158>
 800531e:	e088      	b.n	8005432 <minmea_scan+0x26a>
                    while (minmea_isfield(*field)) {
 8005320:	e07d      	b.n	800541e <minmea_scan+0x256>
                        if (*field == '+' && !sign && value == -1) {
 8005322:	2390      	movs	r3, #144	@ 0x90
 8005324:	18fb      	adds	r3, r7, r3
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2b2b      	cmp	r3, #43	@ 0x2b
 800532c:	d10d      	bne.n	800534a <minmea_scan+0x182>
 800532e:	2284      	movs	r2, #132	@ 0x84
 8005330:	18bb      	adds	r3, r7, r2
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d108      	bne.n	800534a <minmea_scan+0x182>
 8005338:	2380      	movs	r3, #128	@ 0x80
 800533a:	18fb      	adds	r3, r7, r3
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3301      	adds	r3, #1
 8005340:	d103      	bne.n	800534a <minmea_scan+0x182>
                            sign = 1;
 8005342:	2301      	movs	r3, #1
 8005344:	18ba      	adds	r2, r7, r2
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	e063      	b.n	8005412 <minmea_scan+0x24a>
                        } else if (*field == '-' && !sign && value == -1) {
 800534a:	2390      	movs	r3, #144	@ 0x90
 800534c:	18fb      	adds	r3, r7, r3
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	2b2d      	cmp	r3, #45	@ 0x2d
 8005354:	d10e      	bne.n	8005374 <minmea_scan+0x1ac>
 8005356:	2284      	movs	r2, #132	@ 0x84
 8005358:	18bb      	adds	r3, r7, r2
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d109      	bne.n	8005374 <minmea_scan+0x1ac>
 8005360:	2380      	movs	r3, #128	@ 0x80
 8005362:	18fb      	adds	r3, r7, r3
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3301      	adds	r3, #1
 8005368:	d104      	bne.n	8005374 <minmea_scan+0x1ac>
                            sign = -1;
 800536a:	2301      	movs	r3, #1
 800536c:	425b      	negs	r3, r3
 800536e:	18ba      	adds	r2, r7, r2
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	e04e      	b.n	8005412 <minmea_scan+0x24a>
                        } else if (isdigit((unsigned char) *field)) {
 8005374:	2190      	movs	r1, #144	@ 0x90
 8005376:	187b      	adds	r3, r7, r1
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	4b72      	ldr	r3, [pc, #456]	@ (8005548 <minmea_scan+0x380>)
 8005380:	18d3      	adds	r3, r2, r3
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	001a      	movs	r2, r3
 8005386:	2304      	movs	r3, #4
 8005388:	4013      	ands	r3, r2
 800538a:	d035      	beq.n	80053f8 <minmea_scan+0x230>
                            int digit = *field - '0';
 800538c:	187b      	adds	r3, r7, r1
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	3b30      	subs	r3, #48	@ 0x30
 8005394:	63bb      	str	r3, [r7, #56]	@ 0x38
                            if (value == -1)
 8005396:	2280      	movs	r2, #128	@ 0x80
 8005398:	18bb      	adds	r3, r7, r2
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3301      	adds	r3, #1
 800539e:	d102      	bne.n	80053a6 <minmea_scan+0x1de>
                                value = 0;
 80053a0:	2300      	movs	r3, #0
 80053a2:	18ba      	adds	r2, r7, r2
 80053a4:	6013      	str	r3, [r2, #0]
                            if (value > (INT_LEAST32_MAX-digit) / 10) {
 80053a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a8:	4a68      	ldr	r2, [pc, #416]	@ (800554c <minmea_scan+0x384>)
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	210a      	movs	r1, #10
 80053ae:	0018      	movs	r0, r3
 80053b0:	f7fa ff46 	bl	8000240 <__divsi3>
 80053b4:	0003      	movs	r3, r0
 80053b6:	001a      	movs	r2, r3
 80053b8:	2380      	movs	r3, #128	@ 0x80
 80053ba:	18fb      	adds	r3, r7, r3
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4293      	cmp	r3, r2
 80053c0:	dd04      	ble.n	80053cc <minmea_scan+0x204>
                                /* we ran out of bits, what do we do? */
                                if (scale) {
 80053c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d100      	bne.n	80053ca <minmea_scan+0x202>
 80053c8:	e26f      	b.n	80058aa <minmea_scan+0x6e2>
                                    /* truncate extra precision */
                                    break;
 80053ca:	e032      	b.n	8005432 <minmea_scan+0x26a>
                                } else {
                                    /* integer overflow. bail out. */
                                    goto parse_error;
                                }
                            }
                            value = (10 * value) + digit;
 80053cc:	2180      	movs	r1, #128	@ 0x80
 80053ce:	187b      	adds	r3, r7, r1
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	0013      	movs	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	189b      	adds	r3, r3, r2
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	001a      	movs	r2, r3
 80053dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053de:	189b      	adds	r3, r3, r2
 80053e0:	187a      	adds	r2, r7, r1
 80053e2:	6013      	str	r3, [r2, #0]
                            if (scale)
 80053e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d013      	beq.n	8005412 <minmea_scan+0x24a>
                                scale *= 10;
 80053ea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80053ec:	0013      	movs	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	189b      	adds	r3, r3, r2
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80053f6:	e00c      	b.n	8005412 <minmea_scan+0x24a>
                        } else if (*field == '.' && scale == 0) {
 80053f8:	2390      	movs	r3, #144	@ 0x90
 80053fa:	18fb      	adds	r3, r7, r3
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b2e      	cmp	r3, #46	@ 0x2e
 8005402:	d000      	beq.n	8005406 <minmea_scan+0x23e>
 8005404:	e253      	b.n	80058ae <minmea_scan+0x6e6>
 8005406:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005408:	2b00      	cmp	r3, #0
 800540a:	d000      	beq.n	800540e <minmea_scan+0x246>
 800540c:	e24f      	b.n	80058ae <minmea_scan+0x6e6>
                            scale = 1;
 800540e:	2301      	movs	r3, #1
 8005410:	67fb      	str	r3, [r7, #124]	@ 0x7c
                        } else {
                            goto parse_error;
                        }
                        field++;
 8005412:	2290      	movs	r2, #144	@ 0x90
 8005414:	18bb      	adds	r3, r7, r2
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3301      	adds	r3, #1
 800541a:	18ba      	adds	r2, r7, r2
 800541c:	6013      	str	r3, [r2, #0]
                    while (minmea_isfield(*field)) {
 800541e:	2390      	movs	r3, #144	@ 0x90
 8005420:	18fb      	adds	r3, r7, r3
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	0018      	movs	r0, r3
 8005428:	f7ff fea8 	bl	800517c <minmea_isfield>
 800542c:	1e03      	subs	r3, r0, #0
 800542e:	d000      	beq.n	8005432 <minmea_scan+0x26a>
 8005430:	e777      	b.n	8005322 <minmea_scan+0x15a>
                    }
                }

                if ((sign || scale) && value == -1)
 8005432:	2384      	movs	r3, #132	@ 0x84
 8005434:	18fb      	adds	r3, r7, r3
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d102      	bne.n	8005442 <minmea_scan+0x27a>
 800543c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <minmea_scan+0x286>
 8005442:	2380      	movs	r3, #128	@ 0x80
 8005444:	18fb      	adds	r3, r7, r3
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3301      	adds	r3, #1
 800544a:	d100      	bne.n	800544e <minmea_scan+0x286>
 800544c:	e231      	b.n	80058b2 <minmea_scan+0x6ea>
                    goto parse_error;

                if (value == -1) {
 800544e:	2280      	movs	r2, #128	@ 0x80
 8005450:	18bb      	adds	r3, r7, r2
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3301      	adds	r3, #1
 8005456:	d105      	bne.n	8005464 <minmea_scan+0x29c>
                    /* No digits were scanned. */
                    value = 0;
 8005458:	2300      	movs	r3, #0
 800545a:	18ba      	adds	r2, r7, r2
 800545c:	6013      	str	r3, [r2, #0]
                    scale = 0;
 800545e:	2300      	movs	r3, #0
 8005460:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005462:	e004      	b.n	800546e <minmea_scan+0x2a6>
                } else if (scale == 0) {
 8005464:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <minmea_scan+0x2a6>
                    /* No decimal point. */
                    scale = 1;
 800546a:	2301      	movs	r3, #1
 800546c:	67fb      	str	r3, [r7, #124]	@ 0x7c
                }
                if (sign)
 800546e:	2284      	movs	r2, #132	@ 0x84
 8005470:	18bb      	adds	r3, r7, r2
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <minmea_scan+0x2c0>
                    value *= sign;
 8005478:	2180      	movs	r1, #128	@ 0x80
 800547a:	187b      	adds	r3, r7, r1
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	18ba      	adds	r2, r7, r2
 8005480:	6812      	ldr	r2, [r2, #0]
 8005482:	4353      	muls	r3, r2
 8005484:	187a      	adds	r2, r7, r1
 8005486:	6013      	str	r3, [r2, #0]

                *va_arg(ap, struct minmea_float *) = (struct minmea_float) {value, scale};
 8005488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800548a:	1d1a      	adds	r2, r3, #4
 800548c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2280      	movs	r2, #128	@ 0x80
 8005492:	18ba      	adds	r2, r7, r2
 8005494:	6812      	ldr	r2, [r2, #0]
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800549a:	605a      	str	r2, [r3, #4]
            } break;
 800549c:	e1d6      	b.n	800584c <minmea_scan+0x684>

            case 'i': { // Integer value, default 0 (int).
                int value = 0;
 800549e:	2300      	movs	r3, #0
 80054a0:	67bb      	str	r3, [r7, #120]	@ 0x78

                if (field) {
 80054a2:	2290      	movs	r2, #144	@ 0x90
 80054a4:	18bb      	adds	r3, r7, r2
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d011      	beq.n	80054d0 <minmea_scan+0x308>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 80054ac:	2320      	movs	r3, #32
 80054ae:	18f9      	adds	r1, r7, r3
 80054b0:	18bb      	adds	r3, r7, r2
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	220a      	movs	r2, #10
 80054b6:	0018      	movs	r0, r3
 80054b8:	f006 f830 	bl	800b51c <strtol>
 80054bc:	0003      	movs	r3, r0
 80054be:	67bb      	str	r3, [r7, #120]	@ 0x78
                    if (minmea_isfield(*endptr))
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	0018      	movs	r0, r3
 80054c6:	f7ff fe59 	bl	800517c <minmea_isfield>
 80054ca:	1e03      	subs	r3, r0, #0
 80054cc:	d000      	beq.n	80054d0 <minmea_scan+0x308>
 80054ce:	e1f2      	b.n	80058b6 <minmea_scan+0x6ee>
                        goto parse_error;
                }

                *va_arg(ap, int *) = value;
 80054d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d2:	1d1a      	adds	r2, r3, #4
 80054d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80054da:	601a      	str	r2, [r3, #0]
            } break;
 80054dc:	e1b6      	b.n	800584c <minmea_scan+0x684>

            case 's': { // String value (char *).
                char *buf = va_arg(ap, char *);
 80054de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e0:	1d1a      	adds	r2, r3, #4
 80054e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	677b      	str	r3, [r7, #116]	@ 0x74

                if (field) {
 80054e8:	2390      	movs	r3, #144	@ 0x90
 80054ea:	18fb      	adds	r3, r7, r3
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d014      	beq.n	800551c <minmea_scan+0x354>
                    while (minmea_isfield(*field))
 80054f2:	e00a      	b.n	800550a <minmea_scan+0x342>
                        *buf++ = *field++;
 80054f4:	2190      	movs	r1, #144	@ 0x90
 80054f6:	187b      	adds	r3, r7, r1
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	1c53      	adds	r3, r2, #1
 80054fc:	1879      	adds	r1, r7, r1
 80054fe:	600b      	str	r3, [r1, #0]
 8005500:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005502:	1c59      	adds	r1, r3, #1
 8005504:	6779      	str	r1, [r7, #116]	@ 0x74
 8005506:	7812      	ldrb	r2, [r2, #0]
 8005508:	701a      	strb	r2, [r3, #0]
                    while (minmea_isfield(*field))
 800550a:	2390      	movs	r3, #144	@ 0x90
 800550c:	18fb      	adds	r3, r7, r3
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	0018      	movs	r0, r3
 8005514:	f7ff fe32 	bl	800517c <minmea_isfield>
 8005518:	1e03      	subs	r3, r0, #0
 800551a:	d1eb      	bne.n	80054f4 <minmea_scan+0x32c>
                }

                *buf = '\0';
 800551c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800551e:	2200      	movs	r2, #0
 8005520:	701a      	strb	r2, [r3, #0]
            } break;
 8005522:	e193      	b.n	800584c <minmea_scan+0x684>

            case 't': { // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field)
 8005524:	2290      	movs	r2, #144	@ 0x90
 8005526:	18bb      	adds	r3, r7, r2
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d100      	bne.n	8005530 <minmea_scan+0x368>
 800552e:	e1c4      	b.n	80058ba <minmea_scan+0x6f2>
                    goto parse_error;

                if (field[0] != '$')
 8005530:	18bb      	adds	r3, r7, r2
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2b24      	cmp	r3, #36	@ 0x24
 8005538:	d000      	beq.n	800553c <minmea_scan+0x374>
 800553a:	e1c0      	b.n	80058be <minmea_scan+0x6f6>
                    goto parse_error;
                for (int i=0; i<5; i++)
 800553c:	2300      	movs	r3, #0
 800553e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005540:	e01c      	b.n	800557c <minmea_scan+0x3b4>
 8005542:	46c0      	nop			@ (mov r8, r8)
 8005544:	0800c8b8 	.word	0x0800c8b8
 8005548:	0800ca58 	.word	0x0800ca58
 800554c:	7fffffff 	.word	0x7fffffff
                    if (!minmea_isfield(field[1+i]))
 8005550:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005552:	3301      	adds	r3, #1
 8005554:	001a      	movs	r2, r3
 8005556:	2390      	movs	r3, #144	@ 0x90
 8005558:	18fb      	adds	r3, r7, r3
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	189b      	adds	r3, r3, r2
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	0018      	movs	r0, r3
 8005562:	f7ff fe0b 	bl	800517c <minmea_isfield>
 8005566:	0003      	movs	r3, r0
 8005568:	001a      	movs	r2, r3
 800556a:	2301      	movs	r3, #1
 800556c:	4053      	eors	r3, r2
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d000      	beq.n	8005576 <minmea_scan+0x3ae>
 8005574:	e1a5      	b.n	80058c2 <minmea_scan+0x6fa>
                for (int i=0; i<5; i++)
 8005576:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005578:	3301      	adds	r3, #1
 800557a:	673b      	str	r3, [r7, #112]	@ 0x70
 800557c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800557e:	2b04      	cmp	r3, #4
 8005580:	dde6      	ble.n	8005550 <minmea_scan+0x388>
                        goto parse_error;

                char *buf = va_arg(ap, char *);
 8005582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005584:	1d1a      	adds	r2, r3, #4
 8005586:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                memcpy(buf, field+1, 5);
 800558c:	2390      	movs	r3, #144	@ 0x90
 800558e:	18fb      	adds	r3, r7, r3
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	1c59      	adds	r1, r3, #1
 8005594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005596:	2205      	movs	r2, #5
 8005598:	0018      	movs	r0, r3
 800559a:	f006 f81f 	bl	800b5dc <memcpy>
                buf[5] = '\0';
 800559e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055a0:	3305      	adds	r3, #5
 80055a2:	2200      	movs	r2, #0
 80055a4:	701a      	strb	r2, [r3, #0]
            } break;
 80055a6:	e151      	b.n	800584c <minmea_scan+0x684>

            case 'D': { // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 80055a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055aa:	1d1a      	adds	r2, r3, #4
 80055ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	633b      	str	r3, [r7, #48]	@ 0x30

                int d = -1, m = -1, y = -1;
 80055b2:	2301      	movs	r3, #1
 80055b4:	425b      	negs	r3, r3
 80055b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055b8:	2301      	movs	r3, #1
 80055ba:	425b      	negs	r3, r3
 80055bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055be:	2301      	movs	r3, #1
 80055c0:	425b      	negs	r3, r3
 80055c2:	667b      	str	r3, [r7, #100]	@ 0x64

                if (field && minmea_isfield(*field)) {
 80055c4:	2290      	movs	r2, #144	@ 0x90
 80055c6:	18bb      	adds	r3, r7, r2
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d067      	beq.n	800569e <minmea_scan+0x4d6>
 80055ce:	18bb      	adds	r3, r7, r2
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	0018      	movs	r0, r3
 80055d6:	f7ff fdd1 	bl	800517c <minmea_isfield>
 80055da:	1e03      	subs	r3, r0, #0
 80055dc:	d05f      	beq.n	800569e <minmea_scan+0x4d6>
                    // Always six digits.
                    for (int i=0; i<6; i++)
 80055de:	2300      	movs	r3, #0
 80055e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80055e2:	e011      	b.n	8005608 <minmea_scan+0x440>
                        if (!isdigit((unsigned char) field[i]))
 80055e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055e6:	2290      	movs	r2, #144	@ 0x90
 80055e8:	18ba      	adds	r2, r7, r2
 80055ea:	6812      	ldr	r2, [r2, #0]
 80055ec:	18d3      	adds	r3, r2, r3
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	4bbb      	ldr	r3, [pc, #748]	@ (80058e0 <minmea_scan+0x718>)
 80055f4:	18d3      	adds	r3, r2, r3
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	001a      	movs	r2, r3
 80055fa:	2304      	movs	r3, #4
 80055fc:	4013      	ands	r3, r2
 80055fe:	d100      	bne.n	8005602 <minmea_scan+0x43a>
 8005600:	e161      	b.n	80058c6 <minmea_scan+0x6fe>
                    for (int i=0; i<6; i++)
 8005602:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005604:	3301      	adds	r3, #1
 8005606:	663b      	str	r3, [r7, #96]	@ 0x60
 8005608:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800560a:	2b05      	cmp	r3, #5
 800560c:	ddea      	ble.n	80055e4 <minmea_scan+0x41c>
                            goto parse_error;

                    d = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 800560e:	2490      	movs	r4, #144	@ 0x90
 8005610:	193b      	adds	r3, r7, r4
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	781a      	ldrb	r2, [r3, #0]
 8005616:	211c      	movs	r1, #28
 8005618:	187b      	adds	r3, r7, r1
 800561a:	701a      	strb	r2, [r3, #0]
 800561c:	193b      	adds	r3, r7, r4
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3301      	adds	r3, #1
 8005622:	781a      	ldrb	r2, [r3, #0]
 8005624:	187b      	adds	r3, r7, r1
 8005626:	705a      	strb	r2, [r3, #1]
 8005628:	187b      	adds	r3, r7, r1
 800562a:	2200      	movs	r2, #0
 800562c:	709a      	strb	r2, [r3, #2]
 800562e:	187b      	adds	r3, r7, r1
 8005630:	220a      	movs	r2, #10
 8005632:	2100      	movs	r1, #0
 8005634:	0018      	movs	r0, r3
 8005636:	f005 ff71 	bl	800b51c <strtol>
 800563a:	0003      	movs	r3, r0
 800563c:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    m = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 800563e:	193b      	adds	r3, r7, r4
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3302      	adds	r3, #2
 8005644:	781a      	ldrb	r2, [r3, #0]
 8005646:	2118      	movs	r1, #24
 8005648:	187b      	adds	r3, r7, r1
 800564a:	701a      	strb	r2, [r3, #0]
 800564c:	193b      	adds	r3, r7, r4
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3303      	adds	r3, #3
 8005652:	781a      	ldrb	r2, [r3, #0]
 8005654:	187b      	adds	r3, r7, r1
 8005656:	705a      	strb	r2, [r3, #1]
 8005658:	187b      	adds	r3, r7, r1
 800565a:	2200      	movs	r2, #0
 800565c:	709a      	strb	r2, [r3, #2]
 800565e:	187b      	adds	r3, r7, r1
 8005660:	220a      	movs	r2, #10
 8005662:	2100      	movs	r1, #0
 8005664:	0018      	movs	r0, r3
 8005666:	f005 ff59 	bl	800b51c <strtol>
 800566a:	0003      	movs	r3, r0
 800566c:	66bb      	str	r3, [r7, #104]	@ 0x68
                    y = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 800566e:	193b      	adds	r3, r7, r4
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	3304      	adds	r3, #4
 8005674:	781a      	ldrb	r2, [r3, #0]
 8005676:	2114      	movs	r1, #20
 8005678:	187b      	adds	r3, r7, r1
 800567a:	701a      	strb	r2, [r3, #0]
 800567c:	193b      	adds	r3, r7, r4
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3305      	adds	r3, #5
 8005682:	781a      	ldrb	r2, [r3, #0]
 8005684:	187b      	adds	r3, r7, r1
 8005686:	705a      	strb	r2, [r3, #1]
 8005688:	187b      	adds	r3, r7, r1
 800568a:	2200      	movs	r2, #0
 800568c:	709a      	strb	r2, [r3, #2]
 800568e:	187b      	adds	r3, r7, r1
 8005690:	220a      	movs	r2, #10
 8005692:	2100      	movs	r1, #0
 8005694:	0018      	movs	r0, r3
 8005696:	f005 ff41 	bl	800b51c <strtol>
 800569a:	0003      	movs	r3, r0
 800569c:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                date->day = d;
 800569e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80056a2:	601a      	str	r2, [r3, #0]
                date->month = m;
 80056a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80056a8:	605a      	str	r2, [r3, #4]
                date->year = y;
 80056aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80056ae:	609a      	str	r2, [r3, #8]
            } break;
 80056b0:	e0cc      	b.n	800584c <minmea_scan+0x684>

            case 'T': { // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time = va_arg(ap, struct minmea_time *);
 80056b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b4:	1d1a      	adds	r2, r3, #4
 80056b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	637b      	str	r3, [r7, #52]	@ 0x34

                int h = -1, i = -1, s = -1, u = -1;
 80056bc:	2301      	movs	r3, #1
 80056be:	425b      	negs	r3, r3
 80056c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056c2:	2301      	movs	r3, #1
 80056c4:	425b      	negs	r3, r3
 80056c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056c8:	2301      	movs	r3, #1
 80056ca:	425b      	negs	r3, r3
 80056cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80056ce:	2301      	movs	r3, #1
 80056d0:	425b      	negs	r3, r3
 80056d2:	653b      	str	r3, [r7, #80]	@ 0x50

                if (field && minmea_isfield(*field)) {
 80056d4:	2290      	movs	r2, #144	@ 0x90
 80056d6:	18bb      	adds	r3, r7, r2
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d100      	bne.n	80056e0 <minmea_scan+0x518>
 80056de:	e0a7      	b.n	8005830 <minmea_scan+0x668>
 80056e0:	18bb      	adds	r3, r7, r2
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	0018      	movs	r0, r3
 80056e8:	f7ff fd48 	bl	800517c <minmea_isfield>
 80056ec:	1e03      	subs	r3, r0, #0
 80056ee:	d100      	bne.n	80056f2 <minmea_scan+0x52a>
 80056f0:	e09e      	b.n	8005830 <minmea_scan+0x668>
                    // Minimum required: integer time.
                    for (int i=0; i<6; i++)
 80056f2:	2300      	movs	r3, #0
 80056f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056f6:	e011      	b.n	800571c <minmea_scan+0x554>
                        if (!isdigit((unsigned char) field[i]))
 80056f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056fa:	2290      	movs	r2, #144	@ 0x90
 80056fc:	18ba      	adds	r2, r7, r2
 80056fe:	6812      	ldr	r2, [r2, #0]
 8005700:	18d3      	adds	r3, r2, r3
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	1c5a      	adds	r2, r3, #1
 8005706:	4b76      	ldr	r3, [pc, #472]	@ (80058e0 <minmea_scan+0x718>)
 8005708:	18d3      	adds	r3, r2, r3
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	001a      	movs	r2, r3
 800570e:	2304      	movs	r3, #4
 8005710:	4013      	ands	r3, r2
 8005712:	d100      	bne.n	8005716 <minmea_scan+0x54e>
 8005714:	e0d9      	b.n	80058ca <minmea_scan+0x702>
                    for (int i=0; i<6; i++)
 8005716:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005718:	3301      	adds	r3, #1
 800571a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800571c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800571e:	2b05      	cmp	r3, #5
 8005720:	ddea      	ble.n	80056f8 <minmea_scan+0x530>
                            goto parse_error;

                    h = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 8005722:	2490      	movs	r4, #144	@ 0x90
 8005724:	193b      	adds	r3, r7, r4
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	781a      	ldrb	r2, [r3, #0]
 800572a:	2110      	movs	r1, #16
 800572c:	187b      	adds	r3, r7, r1
 800572e:	701a      	strb	r2, [r3, #0]
 8005730:	193b      	adds	r3, r7, r4
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3301      	adds	r3, #1
 8005736:	781a      	ldrb	r2, [r3, #0]
 8005738:	187b      	adds	r3, r7, r1
 800573a:	705a      	strb	r2, [r3, #1]
 800573c:	187b      	adds	r3, r7, r1
 800573e:	2200      	movs	r2, #0
 8005740:	709a      	strb	r2, [r3, #2]
 8005742:	187b      	adds	r3, r7, r1
 8005744:	220a      	movs	r2, #10
 8005746:	2100      	movs	r1, #0
 8005748:	0018      	movs	r0, r3
 800574a:	f005 fee7 	bl	800b51c <strtol>
 800574e:	0003      	movs	r3, r0
 8005750:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    i = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 8005752:	193b      	adds	r3, r7, r4
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3302      	adds	r3, #2
 8005758:	781a      	ldrb	r2, [r3, #0]
 800575a:	210c      	movs	r1, #12
 800575c:	187b      	adds	r3, r7, r1
 800575e:	701a      	strb	r2, [r3, #0]
 8005760:	193b      	adds	r3, r7, r4
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3303      	adds	r3, #3
 8005766:	781a      	ldrb	r2, [r3, #0]
 8005768:	187b      	adds	r3, r7, r1
 800576a:	705a      	strb	r2, [r3, #1]
 800576c:	187b      	adds	r3, r7, r1
 800576e:	2200      	movs	r2, #0
 8005770:	709a      	strb	r2, [r3, #2]
 8005772:	187b      	adds	r3, r7, r1
 8005774:	220a      	movs	r2, #10
 8005776:	2100      	movs	r1, #0
 8005778:	0018      	movs	r0, r3
 800577a:	f005 fecf 	bl	800b51c <strtol>
 800577e:	0003      	movs	r3, r0
 8005780:	65bb      	str	r3, [r7, #88]	@ 0x58
                    s = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 8005782:	193b      	adds	r3, r7, r4
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	3304      	adds	r3, #4
 8005788:	781a      	ldrb	r2, [r3, #0]
 800578a:	2108      	movs	r1, #8
 800578c:	187b      	adds	r3, r7, r1
 800578e:	701a      	strb	r2, [r3, #0]
 8005790:	193b      	adds	r3, r7, r4
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3305      	adds	r3, #5
 8005796:	781a      	ldrb	r2, [r3, #0]
 8005798:	187b      	adds	r3, r7, r1
 800579a:	705a      	strb	r2, [r3, #1]
 800579c:	187b      	adds	r3, r7, r1
 800579e:	2200      	movs	r2, #0
 80057a0:	709a      	strb	r2, [r3, #2]
 80057a2:	187b      	adds	r3, r7, r1
 80057a4:	220a      	movs	r2, #10
 80057a6:	2100      	movs	r1, #0
 80057a8:	0018      	movs	r0, r3
 80057aa:	f005 feb7 	bl	800b51c <strtol>
 80057ae:	0003      	movs	r3, r0
 80057b0:	657b      	str	r3, [r7, #84]	@ 0x54
                    field += 6;
 80057b2:	193b      	adds	r3, r7, r4
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3306      	adds	r3, #6
 80057b8:	193a      	adds	r2, r7, r4
 80057ba:	6013      	str	r3, [r2, #0]

                    // Extra: fractional time. Saved as microseconds.
                    if (*field++ == '.') {
 80057bc:	193b      	adds	r3, r7, r4
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	1939      	adds	r1, r7, r4
 80057c4:	600a      	str	r2, [r1, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80057ca:	d12f      	bne.n	800582c <minmea_scan+0x664>
                        int value = 0;
 80057cc:	2300      	movs	r3, #0
 80057ce:	64bb      	str	r3, [r7, #72]	@ 0x48
                        int scale = 1000000;
 80057d0:	4b44      	ldr	r3, [pc, #272]	@ (80058e4 <minmea_scan+0x71c>)
 80057d2:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 80057d4:	e016      	b.n	8005804 <minmea_scan+0x63c>
                            value = (value * 10) + (*field++ - '0');
 80057d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057d8:	0013      	movs	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	189b      	adds	r3, r3, r2
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	0019      	movs	r1, r3
 80057e2:	2090      	movs	r0, #144	@ 0x90
 80057e4:	183b      	adds	r3, r7, r0
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	1838      	adds	r0, r7, r0
 80057ec:	6002      	str	r2, [r0, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	3b30      	subs	r3, #48	@ 0x30
 80057f2:	18cb      	adds	r3, r1, r3
 80057f4:	64bb      	str	r3, [r7, #72]	@ 0x48
                            scale /= 10;
 80057f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057f8:	210a      	movs	r1, #10
 80057fa:	0018      	movs	r0, r3
 80057fc:	f7fa fd20 	bl	8000240 <__divsi3>
 8005800:	0003      	movs	r3, r0
 8005802:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 8005804:	2390      	movs	r3, #144	@ 0x90
 8005806:	18fb      	adds	r3, r7, r3
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	4b34      	ldr	r3, [pc, #208]	@ (80058e0 <minmea_scan+0x718>)
 8005810:	18d3      	adds	r3, r2, r3
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	001a      	movs	r2, r3
 8005816:	2304      	movs	r3, #4
 8005818:	4013      	ands	r3, r2
 800581a:	d002      	beq.n	8005822 <minmea_scan+0x65a>
 800581c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800581e:	2b01      	cmp	r3, #1
 8005820:	dcd9      	bgt.n	80057d6 <minmea_scan+0x60e>
                        }
                        u = value * scale;
 8005822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005824:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005826:	4353      	muls	r3, r2
 8005828:	653b      	str	r3, [r7, #80]	@ 0x50
 800582a:	e001      	b.n	8005830 <minmea_scan+0x668>
                    } else {
                        u = 0;
 800582c:	2300      	movs	r3, #0
 800582e:	653b      	str	r3, [r7, #80]	@ 0x50
                    }
                }

                time->hours = h;
 8005830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005832:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005834:	601a      	str	r2, [r3, #0]
                time->minutes = i;
 8005836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005838:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800583a:	605a      	str	r2, [r3, #4]
                time->seconds = s;
 800583c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800583e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005840:	609a      	str	r2, [r3, #8]
                time->microseconds = u;
 8005842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005844:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005846:	60da      	str	r2, [r3, #12]
            } break;
 8005848:	e000      	b.n	800584c <minmea_scan+0x684>

            case '_': { // Ignore the field.
            } break;
 800584a:	46c0      	nop			@ (mov r8, r8)
            default: { // Unknown.
                goto parse_error;
            } break;
        }

        next_field();
 800584c:	e002      	b.n	8005854 <minmea_scan+0x68c>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	3301      	adds	r3, #1
 8005852:	607b      	str	r3, [r7, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	0018      	movs	r0, r3
 800585a:	f7ff fc8f 	bl	800517c <minmea_isfield>
 800585e:	1e03      	subs	r3, r0, #0
 8005860:	d1f5      	bne.n	800584e <minmea_scan+0x686>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	2b2c      	cmp	r3, #44	@ 0x2c
 8005868:	d107      	bne.n	800587a <minmea_scan+0x6b2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	3301      	adds	r3, #1
 800586e:	607b      	str	r3, [r7, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2290      	movs	r2, #144	@ 0x90
 8005874:	18ba      	adds	r2, r7, r2
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	e003      	b.n	8005882 <minmea_scan+0x6ba>
 800587a:	2300      	movs	r3, #0
 800587c:	2290      	movs	r2, #144	@ 0x90
 800587e:	18ba      	adds	r2, r7, r2
 8005880:	6013      	str	r3, [r2, #0]
    while (*format) {
 8005882:	23a4      	movs	r3, #164	@ 0xa4
 8005884:	2208      	movs	r2, #8
 8005886:	189b      	adds	r3, r3, r2
 8005888:	19db      	adds	r3, r3, r7
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d000      	beq.n	8005894 <minmea_scan+0x6cc>
 8005892:	e4b0      	b.n	80051f6 <minmea_scan+0x2e>
    }

    result = true;
 8005894:	2397      	movs	r3, #151	@ 0x97
 8005896:	18fb      	adds	r3, r7, r3
 8005898:	2201      	movs	r2, #1
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	e016      	b.n	80058cc <minmea_scan+0x704>
            goto parse_error;
 800589e:	46c0      	nop			@ (mov r8, r8)
 80058a0:	e014      	b.n	80058cc <minmea_scan+0x704>
                goto parse_error;
 80058a2:	46c0      	nop			@ (mov r8, r8)
 80058a4:	e012      	b.n	80058cc <minmea_scan+0x704>
                            goto parse_error;
 80058a6:	46c0      	nop			@ (mov r8, r8)
 80058a8:	e010      	b.n	80058cc <minmea_scan+0x704>
                                    goto parse_error;
 80058aa:	46c0      	nop			@ (mov r8, r8)
 80058ac:	e00e      	b.n	80058cc <minmea_scan+0x704>
                            goto parse_error;
 80058ae:	46c0      	nop			@ (mov r8, r8)
 80058b0:	e00c      	b.n	80058cc <minmea_scan+0x704>
                    goto parse_error;
 80058b2:	46c0      	nop			@ (mov r8, r8)
 80058b4:	e00a      	b.n	80058cc <minmea_scan+0x704>
                        goto parse_error;
 80058b6:	46c0      	nop			@ (mov r8, r8)
 80058b8:	e008      	b.n	80058cc <minmea_scan+0x704>
                    goto parse_error;
 80058ba:	46c0      	nop			@ (mov r8, r8)
 80058bc:	e006      	b.n	80058cc <minmea_scan+0x704>
                    goto parse_error;
 80058be:	46c0      	nop			@ (mov r8, r8)
 80058c0:	e004      	b.n	80058cc <minmea_scan+0x704>
                        goto parse_error;
 80058c2:	46c0      	nop			@ (mov r8, r8)
 80058c4:	e002      	b.n	80058cc <minmea_scan+0x704>
                            goto parse_error;
 80058c6:	46c0      	nop			@ (mov r8, r8)
 80058c8:	e000      	b.n	80058cc <minmea_scan+0x704>
                            goto parse_error;
 80058ca:	46c0      	nop			@ (mov r8, r8)

parse_error:
    va_end(ap);
    return result;
 80058cc:	2397      	movs	r3, #151	@ 0x97
 80058ce:	18fb      	adds	r3, r7, r3
 80058d0:	781b      	ldrb	r3, [r3, #0]
}
 80058d2:	0018      	movs	r0, r3
 80058d4:	46bd      	mov	sp, r7
 80058d6:	b027      	add	sp, #156	@ 0x9c
 80058d8:	bcb0      	pop	{r4, r5, r7}
 80058da:	bc08      	pop	{r3}
 80058dc:	b003      	add	sp, #12
 80058de:	4718      	bx	r3
 80058e0:	0800ca58 	.word	0x0800ca58
 80058e4:	000f4240 	.word	0x000f4240

080058e8 <minmea_parse_rmc>:

    return MINMEA_UNKNOWN;
}

bool minmea_parse_rmc(struct minmea_sentence_rmc *frame, const char *sentence)
{
 80058e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ea:	46d6      	mov	lr, sl
 80058ec:	464f      	mov	r7, r9
 80058ee:	4646      	mov	r6, r8
 80058f0:	b5c0      	push	{r6, r7, lr}
 80058f2:	b092      	sub	sp, #72	@ 0x48
 80058f4:	af0a      	add	r7, sp, #40	@ 0x28
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
    char type[6];
    char validity;
    int latitude_direction;
    int longitude_direction;
    int variation_direction;
    if (!minmea_scan(sentence, "tTcfdfdffDfd",
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	469a      	mov	sl, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3314      	adds	r3, #20
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	321c      	adds	r2, #28
 8005906:	6879      	ldr	r1, [r7, #4]
 8005908:	3124      	adds	r1, #36	@ 0x24
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	302c      	adds	r0, #44	@ 0x2c
 800590e:	687c      	ldr	r4, [r7, #4]
 8005910:	3434      	adds	r4, #52	@ 0x34
 8005912:	687d      	ldr	r5, [r7, #4]
 8005914:	3540      	adds	r5, #64	@ 0x40
 8005916:	2618      	movs	r6, #24
 8005918:	46b1      	mov	r9, r6
 800591a:	44b9      	add	r9, r7
 800591c:	4e2a      	ldr	r6, [pc, #168]	@ (80059c8 <minmea_parse_rmc+0xe0>)
 800591e:	46b0      	mov	r8, r6
 8005920:	683e      	ldr	r6, [r7, #0]
 8005922:	46b4      	mov	ip, r6
 8005924:	2608      	movs	r6, #8
 8005926:	19be      	adds	r6, r7, r6
 8005928:	9609      	str	r6, [sp, #36]	@ 0x24
 800592a:	9508      	str	r5, [sp, #32]
 800592c:	9407      	str	r4, [sp, #28]
 800592e:	9006      	str	r0, [sp, #24]
 8005930:	9105      	str	r1, [sp, #20]
 8005932:	210c      	movs	r1, #12
 8005934:	1879      	adds	r1, r7, r1
 8005936:	9104      	str	r1, [sp, #16]
 8005938:	9203      	str	r2, [sp, #12]
 800593a:	2210      	movs	r2, #16
 800593c:	18ba      	adds	r2, r7, r2
 800593e:	9202      	str	r2, [sp, #8]
 8005940:	9301      	str	r3, [sp, #4]
 8005942:	2317      	movs	r3, #23
 8005944:	18fb      	adds	r3, r7, r3
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	4653      	mov	r3, sl
 800594a:	464a      	mov	r2, r9
 800594c:	4641      	mov	r1, r8
 800594e:	4660      	mov	r0, ip
 8005950:	f7ff fc3a 	bl	80051c8 <minmea_scan>
 8005954:	0003      	movs	r3, r0
 8005956:	001a      	movs	r2, r3
 8005958:	2301      	movs	r3, #1
 800595a:	4053      	eors	r3, r2
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <minmea_parse_rmc+0x7e>
            &frame->longitude, &longitude_direction,
            &frame->speed,
            &frame->course,
            &frame->date,
            &frame->variation, &variation_direction))
        return false;
 8005962:	2300      	movs	r3, #0
 8005964:	e027      	b.n	80059b6 <minmea_parse_rmc+0xce>
    if (strcmp(type+2, "RMC"))
 8005966:	2318      	movs	r3, #24
 8005968:	18fb      	adds	r3, r7, r3
 800596a:	3302      	adds	r3, #2
 800596c:	4a17      	ldr	r2, [pc, #92]	@ (80059cc <minmea_parse_rmc+0xe4>)
 800596e:	0011      	movs	r1, r2
 8005970:	0018      	movs	r0, r3
 8005972:	f7fa fbc7 	bl	8000104 <strcmp>
 8005976:	1e03      	subs	r3, r0, #0
 8005978:	d001      	beq.n	800597e <minmea_parse_rmc+0x96>
        return false;
 800597a:	2300      	movs	r3, #0
 800597c:	e01b      	b.n	80059b6 <minmea_parse_rmc+0xce>

    frame->valid = (validity == 'A');
 800597e:	2317      	movs	r3, #23
 8005980:	18fb      	adds	r3, r7, r3
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	3b41      	subs	r3, #65	@ 0x41
 8005986:	425a      	negs	r2, r3
 8005988:	4153      	adcs	r3, r2
 800598a:	b2da      	uxtb	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	741a      	strb	r2, [r3, #16]
    frame->latitude.value *= latitude_direction;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	435a      	muls	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	615a      	str	r2, [r3, #20]
    frame->longitude.value *= longitude_direction;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	435a      	muls	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	61da      	str	r2, [r3, #28]
    frame->variation.value *= variation_direction;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	435a      	muls	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	641a      	str	r2, [r3, #64]	@ 0x40

    return true;
 80059b4:	2301      	movs	r3, #1
}
 80059b6:	0018      	movs	r0, r3
 80059b8:	46bd      	mov	sp, r7
 80059ba:	b008      	add	sp, #32
 80059bc:	bce0      	pop	{r5, r6, r7}
 80059be:	46ba      	mov	sl, r7
 80059c0:	46b1      	mov	r9, r6
 80059c2:	46a8      	mov	r8, r5
 80059c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059c6:	46c0      	nop			@ (mov r8, r8)
 80059c8:	0800c234 	.word	0x0800c234
 80059cc:	0800c220 	.word	0x0800c220

080059d0 <minmea_parse_gga>:

bool minmea_parse_gga(struct minmea_sentence_gga *frame, const char *sentence)
{
 80059d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059d2:	46de      	mov	lr, fp
 80059d4:	4657      	mov	r7, sl
 80059d6:	464e      	mov	r6, r9
 80059d8:	4645      	mov	r5, r8
 80059da:	b5e0      	push	{r5, r6, r7, lr}
 80059dc:	b097      	sub	sp, #92	@ 0x5c
 80059de:	af0c      	add	r7, sp, #48	@ 0x30
 80059e0:	6178      	str	r0, [r7, #20]
 80059e2:	6139      	str	r1, [r7, #16]
    // $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47
    char type[6];
    int latitude_direction;
    int longitude_direction;

    if (!minmea_scan(sentence, "tTfdfdiiffcfci_",
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	60fb      	str	r3, [r7, #12]
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	001a      	movs	r2, r3
 80059ec:	3210      	adds	r2, #16
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	0019      	movs	r1, r3
 80059f2:	3118      	adds	r1, #24
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	001c      	movs	r4, r3
 80059f8:	3420      	adds	r4, #32
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	001d      	movs	r5, r3
 80059fe:	3524      	adds	r5, #36	@ 0x24
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	001e      	movs	r6, r3
 8005a04:	3628      	adds	r6, #40	@ 0x28
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2030      	movs	r0, #48	@ 0x30
 8005a0a:	4684      	mov	ip, r0
 8005a0c:	449c      	add	ip, r3
 8005a0e:	4663      	mov	r3, ip
 8005a10:	607b      	str	r3, [r7, #4]
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	2038      	movs	r0, #56	@ 0x38
 8005a16:	4680      	mov	r8, r0
 8005a18:	4498      	add	r8, r3
 8005a1a:	4643      	mov	r3, r8
 8005a1c:	603b      	str	r3, [r7, #0]
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	203c      	movs	r0, #60	@ 0x3c
 8005a22:	4681      	mov	r9, r0
 8005a24:	4499      	add	r9, r3
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	2044      	movs	r0, #68	@ 0x44
 8005a2a:	4682      	mov	sl, r0
 8005a2c:	449a      	add	sl, r3
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	3348      	adds	r3, #72	@ 0x48
 8005a32:	2010      	movs	r0, #16
 8005a34:	4683      	mov	fp, r0
 8005a36:	2008      	movs	r0, #8
 8005a38:	4684      	mov	ip, r0
 8005a3a:	2008      	movs	r0, #8
 8005a3c:	4680      	mov	r8, r0
 8005a3e:	44b8      	add	r8, r7
 8005a40:	44c4      	add	ip, r8
 8005a42:	44e3      	add	fp, ip
 8005a44:	4658      	mov	r0, fp
 8005a46:	60b8      	str	r0, [r7, #8]
 8005a48:	482a      	ldr	r0, [pc, #168]	@ (8005af4 <minmea_parse_gga+0x124>)
 8005a4a:	4683      	mov	fp, r0
 8005a4c:	6938      	ldr	r0, [r7, #16]
 8005a4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a50:	4653      	mov	r3, sl
 8005a52:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a54:	464b      	mov	r3, r9
 8005a56:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	9308      	str	r3, [sp, #32]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	9307      	str	r3, [sp, #28]
 8005a60:	9606      	str	r6, [sp, #24]
 8005a62:	9505      	str	r5, [sp, #20]
 8005a64:	9404      	str	r4, [sp, #16]
 8005a66:	2408      	movs	r4, #8
 8005a68:	2508      	movs	r5, #8
 8005a6a:	1963      	adds	r3, r4, r5
 8005a6c:	2408      	movs	r4, #8
 8005a6e:	46a4      	mov	ip, r4
 8005a70:	44bc      	add	ip, r7
 8005a72:	4463      	add	r3, ip
 8005a74:	9303      	str	r3, [sp, #12]
 8005a76:	9102      	str	r1, [sp, #8]
 8005a78:	210c      	movs	r1, #12
 8005a7a:	194b      	adds	r3, r1, r5
 8005a7c:	2108      	movs	r1, #8
 8005a7e:	468c      	mov	ip, r1
 8005a80:	44bc      	add	ip, r7
 8005a82:	4463      	add	r3, ip
 8005a84:	9301      	str	r3, [sp, #4]
 8005a86:	9200      	str	r2, [sp, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	4659      	mov	r1, fp
 8005a8e:	f7ff fb9b 	bl	80051c8 <minmea_scan>
 8005a92:	0003      	movs	r3, r0
 8005a94:	001a      	movs	r2, r3
 8005a96:	2301      	movs	r3, #1
 8005a98:	4053      	eors	r3, r2
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <minmea_parse_gga+0xd4>
            &frame->satellites_tracked,
            &frame->hdop,
            &frame->altitude, &frame->altitude_units,
            &frame->height, &frame->height_units,
            &frame->dgps_age))
        return false;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	e01d      	b.n	8005ae0 <minmea_parse_gga+0x110>
    if (strcmp(type+2, "GGA"))
 8005aa4:	2310      	movs	r3, #16
 8005aa6:	2208      	movs	r2, #8
 8005aa8:	189b      	adds	r3, r3, r2
 8005aaa:	2208      	movs	r2, #8
 8005aac:	4694      	mov	ip, r2
 8005aae:	44bc      	add	ip, r7
 8005ab0:	4463      	add	r3, ip
 8005ab2:	3302      	adds	r3, #2
 8005ab4:	4a10      	ldr	r2, [pc, #64]	@ (8005af8 <minmea_parse_gga+0x128>)
 8005ab6:	0011      	movs	r1, r2
 8005ab8:	0018      	movs	r0, r3
 8005aba:	f7fa fb23 	bl	8000104 <strcmp>
 8005abe:	1e03      	subs	r3, r0, #0
 8005ac0:	d001      	beq.n	8005ac6 <minmea_parse_gga+0xf6>
        return false;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	e00c      	b.n	8005ae0 <minmea_parse_gga+0x110>

    frame->latitude.value *= latitude_direction;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	69fa      	ldr	r2, [r7, #28]
 8005acc:	435a      	muls	r2, r3
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	611a      	str	r2, [r3, #16]
    frame->longitude.value *= longitude_direction;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	435a      	muls	r2, r3
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	619a      	str	r2, [r3, #24]

    return true;
 8005ade:	2301      	movs	r3, #1
}
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	b00b      	add	sp, #44	@ 0x2c
 8005ae6:	bcf0      	pop	{r4, r5, r6, r7}
 8005ae8:	46bb      	mov	fp, r7
 8005aea:	46b2      	mov	sl, r6
 8005aec:	46a9      	mov	r9, r5
 8005aee:	46a0      	mov	r8, r4
 8005af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005af2:	46c0      	nop			@ (mov r8, r8)
 8005af4:	0800c244 	.word	0x0800c244
 8005af8:	0800c224 	.word	0x0800c224

08005afc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b02:	4b11      	ldr	r3, [pc, #68]	@ (8005b48 <HAL_MspInit+0x4c>)
 8005b04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b06:	4b10      	ldr	r3, [pc, #64]	@ (8005b48 <HAL_MspInit+0x4c>)
 8005b08:	2101      	movs	r1, #1
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8005b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b48 <HAL_MspInit+0x4c>)
 8005b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b12:	2201      	movs	r2, #1
 8005b14:	4013      	ands	r3, r2
 8005b16:	607b      	str	r3, [r7, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b48 <HAL_MspInit+0x4c>)
 8005b1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8005b48 <HAL_MspInit+0x4c>)
 8005b20:	2180      	movs	r1, #128	@ 0x80
 8005b22:	0549      	lsls	r1, r1, #21
 8005b24:	430a      	orrs	r2, r1
 8005b26:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005b28:	4b07      	ldr	r3, [pc, #28]	@ (8005b48 <HAL_MspInit+0x4c>)
 8005b2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b2c:	2380      	movs	r3, #128	@ 0x80
 8005b2e:	055b      	lsls	r3, r3, #21
 8005b30:	4013      	ands	r3, r2
 8005b32:	603b      	str	r3, [r7, #0]
 8005b34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8005b36:	23c0      	movs	r3, #192	@ 0xc0
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	f000 fb5c 	bl	80061f8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b40:	46c0      	nop			@ (mov r8, r8)
 8005b42:	46bd      	mov	sp, r7
 8005b44:	b002      	add	sp, #8
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	40021000 	.word	0x40021000

08005b4c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005b4c:	b590      	push	{r4, r7, lr}
 8005b4e:	b09d      	sub	sp, #116	@ 0x74
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b54:	235c      	movs	r3, #92	@ 0x5c
 8005b56:	18fb      	adds	r3, r7, r3
 8005b58:	0018      	movs	r0, r3
 8005b5a:	2314      	movs	r3, #20
 8005b5c:	001a      	movs	r2, r3
 8005b5e:	2100      	movs	r1, #0
 8005b60:	f005 fd08 	bl	800b574 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005b64:	2410      	movs	r4, #16
 8005b66:	193b      	adds	r3, r7, r4
 8005b68:	0018      	movs	r0, r3
 8005b6a:	234c      	movs	r3, #76	@ 0x4c
 8005b6c:	001a      	movs	r2, r3
 8005b6e:	2100      	movs	r1, #0
 8005b70:	f005 fd00 	bl	800b574 <memset>
  if(hi2c->Instance==I2C1)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a23      	ldr	r2, [pc, #140]	@ (8005c08 <HAL_I2C_MspInit+0xbc>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d13f      	bne.n	8005bfe <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005b7e:	193b      	adds	r3, r7, r4
 8005b80:	2220      	movs	r2, #32
 8005b82:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005b84:	193b      	adds	r3, r7, r4
 8005b86:	2200      	movs	r2, #0
 8005b88:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005b8a:	193b      	adds	r3, r7, r4
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f002 f967 	bl	8007e60 <HAL_RCCEx_PeriphCLKConfig>
 8005b92:	1e03      	subs	r3, r0, #0
 8005b94:	d001      	beq.n	8005b9a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005b96:	f7ff faeb 	bl	8005170 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8005c0c <HAL_I2C_MspInit+0xc0>)
 8005b9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8005c0c <HAL_I2C_MspInit+0xc0>)
 8005ba0:	2101      	movs	r1, #1
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	635a      	str	r2, [r3, #52]	@ 0x34
 8005ba6:	4b19      	ldr	r3, [pc, #100]	@ (8005c0c <HAL_I2C_MspInit+0xc0>)
 8005ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005baa:	2201      	movs	r2, #1
 8005bac:	4013      	ands	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005bb2:	215c      	movs	r1, #92	@ 0x5c
 8005bb4:	187b      	adds	r3, r7, r1
 8005bb6:	22c0      	movs	r2, #192	@ 0xc0
 8005bb8:	00d2      	lsls	r2, r2, #3
 8005bba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005bbc:	187b      	adds	r3, r7, r1
 8005bbe:	2212      	movs	r2, #18
 8005bc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bc2:	187b      	adds	r3, r7, r1
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bc8:	187b      	adds	r3, r7, r1
 8005bca:	2200      	movs	r2, #0
 8005bcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8005bce:	187b      	adds	r3, r7, r1
 8005bd0:	2206      	movs	r2, #6
 8005bd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bd4:	187a      	adds	r2, r7, r1
 8005bd6:	23a0      	movs	r3, #160	@ 0xa0
 8005bd8:	05db      	lsls	r3, r3, #23
 8005bda:	0011      	movs	r1, r2
 8005bdc:	0018      	movs	r0, r3
 8005bde:	f000 fbff 	bl	80063e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005be2:	4b0a      	ldr	r3, [pc, #40]	@ (8005c0c <HAL_I2C_MspInit+0xc0>)
 8005be4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005be6:	4b09      	ldr	r3, [pc, #36]	@ (8005c0c <HAL_I2C_MspInit+0xc0>)
 8005be8:	2180      	movs	r1, #128	@ 0x80
 8005bea:	0389      	lsls	r1, r1, #14
 8005bec:	430a      	orrs	r2, r1
 8005bee:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005bf0:	4b06      	ldr	r3, [pc, #24]	@ (8005c0c <HAL_I2C_MspInit+0xc0>)
 8005bf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bf4:	2380      	movs	r3, #128	@ 0x80
 8005bf6:	039b      	lsls	r3, r3, #14
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	60bb      	str	r3, [r7, #8]
 8005bfc:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8005bfe:	46c0      	nop			@ (mov r8, r8)
 8005c00:	46bd      	mov	sp, r7
 8005c02:	b01d      	add	sp, #116	@ 0x74
 8005c04:	bd90      	pop	{r4, r7, pc}
 8005c06:	46c0      	nop			@ (mov r8, r8)
 8005c08:	40005400 	.word	0x40005400
 8005c0c:	40021000 	.word	0x40021000

08005c10 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005c10:	b590      	push	{r4, r7, lr}
 8005c12:	b097      	sub	sp, #92	@ 0x5c
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005c18:	240c      	movs	r4, #12
 8005c1a:	193b      	adds	r3, r7, r4
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	234c      	movs	r3, #76	@ 0x4c
 8005c20:	001a      	movs	r2, r3
 8005c22:	2100      	movs	r1, #0
 8005c24:	f005 fca6 	bl	800b574 <memset>
  if(hrtc->Instance==RTC)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a19      	ldr	r2, [pc, #100]	@ (8005c94 <HAL_RTC_MspInit+0x84>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d12c      	bne.n	8005c8c <HAL_RTC_MspInit+0x7c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005c32:	193b      	adds	r3, r7, r4
 8005c34:	2280      	movs	r2, #128	@ 0x80
 8005c36:	0292      	lsls	r2, r2, #10
 8005c38:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005c3a:	193b      	adds	r3, r7, r4
 8005c3c:	2280      	movs	r2, #128	@ 0x80
 8005c3e:	0092      	lsls	r2, r2, #2
 8005c40:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005c42:	193b      	adds	r3, r7, r4
 8005c44:	0018      	movs	r0, r3
 8005c46:	f002 f90b 	bl	8007e60 <HAL_RCCEx_PeriphCLKConfig>
 8005c4a:	1e03      	subs	r3, r0, #0
 8005c4c:	d001      	beq.n	8005c52 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8005c4e:	f7ff fa8f 	bl	8005170 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005c52:	4b11      	ldr	r3, [pc, #68]	@ (8005c98 <HAL_RTC_MspInit+0x88>)
 8005c54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c56:	4b10      	ldr	r3, [pc, #64]	@ (8005c98 <HAL_RTC_MspInit+0x88>)
 8005c58:	2180      	movs	r1, #128	@ 0x80
 8005c5a:	0209      	lsls	r1, r1, #8
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8005c60:	4b0d      	ldr	r3, [pc, #52]	@ (8005c98 <HAL_RTC_MspInit+0x88>)
 8005c62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c64:	4b0c      	ldr	r3, [pc, #48]	@ (8005c98 <HAL_RTC_MspInit+0x88>)
 8005c66:	2180      	movs	r1, #128	@ 0x80
 8005c68:	00c9      	lsls	r1, r1, #3
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c98 <HAL_RTC_MspInit+0x88>)
 8005c70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c72:	2380      	movs	r3, #128	@ 0x80
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	4013      	ands	r3, r2
 8005c78:	60bb      	str	r3, [r7, #8]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	2100      	movs	r1, #0
 8005c80:	2002      	movs	r0, #2
 8005c82:	f000 fb7b 	bl	800637c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 8005c86:	2002      	movs	r0, #2
 8005c88:	f000 fb8d 	bl	80063a6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8005c8c:	46c0      	nop			@ (mov r8, r8)
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	b017      	add	sp, #92	@ 0x5c
 8005c92:	bd90      	pop	{r4, r7, pc}
 8005c94:	40002800 	.word	0x40002800
 8005c98:	40021000 	.word	0x40021000

08005c9c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005c9c:	b590      	push	{r4, r7, lr}
 8005c9e:	b08b      	sub	sp, #44	@ 0x2c
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ca4:	2414      	movs	r4, #20
 8005ca6:	193b      	adds	r3, r7, r4
 8005ca8:	0018      	movs	r0, r3
 8005caa:	2314      	movs	r3, #20
 8005cac:	001a      	movs	r2, r3
 8005cae:	2100      	movs	r1, #0
 8005cb0:	f005 fc60 	bl	800b574 <memset>
  if(hspi->Instance==SPI1)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a2c      	ldr	r2, [pc, #176]	@ (8005d6c <HAL_SPI_MspInit+0xd0>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d151      	bne.n	8005d62 <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005cbe:	4b2c      	ldr	r3, [pc, #176]	@ (8005d70 <HAL_SPI_MspInit+0xd4>)
 8005cc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cc2:	4b2b      	ldr	r3, [pc, #172]	@ (8005d70 <HAL_SPI_MspInit+0xd4>)
 8005cc4:	2180      	movs	r1, #128	@ 0x80
 8005cc6:	0149      	lsls	r1, r1, #5
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	641a      	str	r2, [r3, #64]	@ 0x40
 8005ccc:	4b28      	ldr	r3, [pc, #160]	@ (8005d70 <HAL_SPI_MspInit+0xd4>)
 8005cce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cd0:	2380      	movs	r3, #128	@ 0x80
 8005cd2:	015b      	lsls	r3, r3, #5
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	613b      	str	r3, [r7, #16]
 8005cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cda:	4b25      	ldr	r3, [pc, #148]	@ (8005d70 <HAL_SPI_MspInit+0xd4>)
 8005cdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cde:	4b24      	ldr	r3, [pc, #144]	@ (8005d70 <HAL_SPI_MspInit+0xd4>)
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	430a      	orrs	r2, r1
 8005ce4:	635a      	str	r2, [r3, #52]	@ 0x34
 8005ce6:	4b22      	ldr	r3, [pc, #136]	@ (8005d70 <HAL_SPI_MspInit+0xd4>)
 8005ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cea:	2201      	movs	r2, #1
 8005cec:	4013      	ands	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8005d70 <HAL_SPI_MspInit+0xd4>)
 8005cf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8005d70 <HAL_SPI_MspInit+0xd4>)
 8005cf8:	2108      	movs	r1, #8
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	635a      	str	r2, [r3, #52]	@ 0x34
 8005cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8005d70 <HAL_SPI_MspInit+0xd4>)
 8005d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d02:	2208      	movs	r2, #8
 8005d04:	4013      	ands	r3, r2
 8005d06:	60bb      	str	r3, [r7, #8]
 8005d08:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PD5     ------> SPI1_MISO
    PD6     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005d0a:	193b      	adds	r3, r7, r4
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d10:	193b      	adds	r3, r7, r4
 8005d12:	2202      	movs	r2, #2
 8005d14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d16:	193b      	adds	r3, r7, r4
 8005d18:	2200      	movs	r2, #0
 8005d1a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d1c:	193b      	adds	r3, r7, r4
 8005d1e:	2200      	movs	r2, #0
 8005d20:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8005d22:	193b      	adds	r3, r7, r4
 8005d24:	2200      	movs	r2, #0
 8005d26:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d28:	193a      	adds	r2, r7, r4
 8005d2a:	23a0      	movs	r3, #160	@ 0xa0
 8005d2c:	05db      	lsls	r3, r3, #23
 8005d2e:	0011      	movs	r1, r2
 8005d30:	0018      	movs	r0, r3
 8005d32:	f000 fb55 	bl	80063e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005d36:	0021      	movs	r1, r4
 8005d38:	187b      	adds	r3, r7, r1
 8005d3a:	2260      	movs	r2, #96	@ 0x60
 8005d3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d3e:	187b      	adds	r3, r7, r1
 8005d40:	2202      	movs	r2, #2
 8005d42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d44:	187b      	adds	r3, r7, r1
 8005d46:	2200      	movs	r2, #0
 8005d48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d4a:	187b      	adds	r3, r7, r1
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8005d50:	187b      	adds	r3, r7, r1
 8005d52:	2201      	movs	r2, #1
 8005d54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005d56:	187b      	adds	r3, r7, r1
 8005d58:	4a06      	ldr	r2, [pc, #24]	@ (8005d74 <HAL_SPI_MspInit+0xd8>)
 8005d5a:	0019      	movs	r1, r3
 8005d5c:	0010      	movs	r0, r2
 8005d5e:	f000 fb3f 	bl	80063e0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8005d62:	46c0      	nop			@ (mov r8, r8)
 8005d64:	46bd      	mov	sp, r7
 8005d66:	b00b      	add	sp, #44	@ 0x2c
 8005d68:	bd90      	pop	{r4, r7, pc}
 8005d6a:	46c0      	nop			@ (mov r8, r8)
 8005d6c:	40013000 	.word	0x40013000
 8005d70:	40021000 	.word	0x40021000
 8005d74:	50000c00 	.word	0x50000c00

08005d78 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a0a      	ldr	r2, [pc, #40]	@ (8005db0 <HAL_TIM_Base_MspInit+0x38>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d10d      	bne.n	8005da6 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8005db4 <HAL_TIM_Base_MspInit+0x3c>)
 8005d8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d8e:	4b09      	ldr	r3, [pc, #36]	@ (8005db4 <HAL_TIM_Base_MspInit+0x3c>)
 8005d90:	2180      	movs	r1, #128	@ 0x80
 8005d92:	02c9      	lsls	r1, r1, #11
 8005d94:	430a      	orrs	r2, r1
 8005d96:	641a      	str	r2, [r3, #64]	@ 0x40
 8005d98:	4b06      	ldr	r3, [pc, #24]	@ (8005db4 <HAL_TIM_Base_MspInit+0x3c>)
 8005d9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d9c:	2380      	movs	r3, #128	@ 0x80
 8005d9e:	02db      	lsls	r3, r3, #11
 8005da0:	4013      	ands	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8005da6:	46c0      	nop			@ (mov r8, r8)
 8005da8:	46bd      	mov	sp, r7
 8005daa:	b004      	add	sp, #16
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	46c0      	nop			@ (mov r8, r8)
 8005db0:	40014800 	.word	0x40014800
 8005db4:	40021000 	.word	0x40021000

08005db8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005db8:	b590      	push	{r4, r7, lr}
 8005dba:	b089      	sub	sp, #36	@ 0x24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dc0:	240c      	movs	r4, #12
 8005dc2:	193b      	adds	r3, r7, r4
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	2314      	movs	r3, #20
 8005dc8:	001a      	movs	r2, r3
 8005dca:	2100      	movs	r1, #0
 8005dcc:	f005 fbd2 	bl	800b574 <memset>
  if(htim->Instance==TIM17)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a14      	ldr	r2, [pc, #80]	@ (8005e28 <HAL_TIM_MspPostInit+0x70>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d122      	bne.n	8005e20 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dda:	4b14      	ldr	r3, [pc, #80]	@ (8005e2c <HAL_TIM_MspPostInit+0x74>)
 8005ddc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dde:	4b13      	ldr	r3, [pc, #76]	@ (8005e2c <HAL_TIM_MspPostInit+0x74>)
 8005de0:	2101      	movs	r1, #1
 8005de2:	430a      	orrs	r2, r1
 8005de4:	635a      	str	r2, [r3, #52]	@ 0x34
 8005de6:	4b11      	ldr	r3, [pc, #68]	@ (8005e2c <HAL_TIM_MspPostInit+0x74>)
 8005de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dea:	2201      	movs	r2, #1
 8005dec:	4013      	ands	r3, r2
 8005dee:	60bb      	str	r3, [r7, #8]
 8005df0:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005df2:	0021      	movs	r1, r4
 8005df4:	187b      	adds	r3, r7, r1
 8005df6:	2280      	movs	r2, #128	@ 0x80
 8005df8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dfa:	187b      	adds	r3, r7, r1
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e00:	187b      	adds	r3, r7, r1
 8005e02:	2200      	movs	r2, #0
 8005e04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e06:	187b      	adds	r3, r7, r1
 8005e08:	2200      	movs	r2, #0
 8005e0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8005e0c:	187b      	adds	r3, r7, r1
 8005e0e:	2205      	movs	r2, #5
 8005e10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e12:	187a      	adds	r2, r7, r1
 8005e14:	23a0      	movs	r3, #160	@ 0xa0
 8005e16:	05db      	lsls	r3, r3, #23
 8005e18:	0011      	movs	r1, r2
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	f000 fae0 	bl	80063e0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8005e20:	46c0      	nop			@ (mov r8, r8)
 8005e22:	46bd      	mov	sp, r7
 8005e24:	b009      	add	sp, #36	@ 0x24
 8005e26:	bd90      	pop	{r4, r7, pc}
 8005e28:	40014800 	.word	0x40014800
 8005e2c:	40021000 	.word	0x40021000

08005e30 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005e30:	b590      	push	{r4, r7, lr}
 8005e32:	b09f      	sub	sp, #124	@ 0x7c
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e38:	2364      	movs	r3, #100	@ 0x64
 8005e3a:	18fb      	adds	r3, r7, r3
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	2314      	movs	r3, #20
 8005e40:	001a      	movs	r2, r3
 8005e42:	2100      	movs	r1, #0
 8005e44:	f005 fb96 	bl	800b574 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005e48:	2418      	movs	r4, #24
 8005e4a:	193b      	adds	r3, r7, r4
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	234c      	movs	r3, #76	@ 0x4c
 8005e50:	001a      	movs	r2, r3
 8005e52:	2100      	movs	r1, #0
 8005e54:	f005 fb8e 	bl	800b574 <memset>
  if(huart->Instance==USART1)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a45      	ldr	r2, [pc, #276]	@ (8005f74 <HAL_UART_MspInit+0x144>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d13e      	bne.n	8005ee0 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005e62:	193b      	adds	r3, r7, r4
 8005e64:	2201      	movs	r2, #1
 8005e66:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8005e68:	193b      	adds	r3, r7, r4
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e6e:	193b      	adds	r3, r7, r4
 8005e70:	0018      	movs	r0, r3
 8005e72:	f001 fff5 	bl	8007e60 <HAL_RCCEx_PeriphCLKConfig>
 8005e76:	1e03      	subs	r3, r0, #0
 8005e78:	d001      	beq.n	8005e7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005e7a:	f7ff f979 	bl	8005170 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005e7e:	4b3e      	ldr	r3, [pc, #248]	@ (8005f78 <HAL_UART_MspInit+0x148>)
 8005e80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e82:	4b3d      	ldr	r3, [pc, #244]	@ (8005f78 <HAL_UART_MspInit+0x148>)
 8005e84:	2180      	movs	r1, #128	@ 0x80
 8005e86:	01c9      	lsls	r1, r1, #7
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	641a      	str	r2, [r3, #64]	@ 0x40
 8005e8c:	4b3a      	ldr	r3, [pc, #232]	@ (8005f78 <HAL_UART_MspInit+0x148>)
 8005e8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e90:	2380      	movs	r3, #128	@ 0x80
 8005e92:	01db      	lsls	r3, r3, #7
 8005e94:	4013      	ands	r3, r2
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e9a:	4b37      	ldr	r3, [pc, #220]	@ (8005f78 <HAL_UART_MspInit+0x148>)
 8005e9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e9e:	4b36      	ldr	r3, [pc, #216]	@ (8005f78 <HAL_UART_MspInit+0x148>)
 8005ea0:	2104      	movs	r1, #4
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	635a      	str	r2, [r3, #52]	@ 0x34
 8005ea6:	4b34      	ldr	r3, [pc, #208]	@ (8005f78 <HAL_UART_MspInit+0x148>)
 8005ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eaa:	2204      	movs	r2, #4
 8005eac:	4013      	ands	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]
 8005eb0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005eb2:	2164      	movs	r1, #100	@ 0x64
 8005eb4:	187b      	adds	r3, r7, r1
 8005eb6:	2230      	movs	r2, #48	@ 0x30
 8005eb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eba:	187b      	adds	r3, r7, r1
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ec0:	187b      	adds	r3, r7, r1
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ec6:	187b      	adds	r3, r7, r1
 8005ec8:	2200      	movs	r2, #0
 8005eca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8005ecc:	187b      	adds	r3, r7, r1
 8005ece:	2201      	movs	r2, #1
 8005ed0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ed2:	187b      	adds	r3, r7, r1
 8005ed4:	4a29      	ldr	r2, [pc, #164]	@ (8005f7c <HAL_UART_MspInit+0x14c>)
 8005ed6:	0019      	movs	r1, r3
 8005ed8:	0010      	movs	r0, r2
 8005eda:	f000 fa81 	bl	80063e0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8005ede:	e044      	b.n	8005f6a <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a26      	ldr	r2, [pc, #152]	@ (8005f80 <HAL_UART_MspInit+0x150>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d13f      	bne.n	8005f6a <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005eea:	2118      	movs	r1, #24
 8005eec:	187b      	adds	r3, r7, r1
 8005eee:	2202      	movs	r2, #2
 8005ef0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005ef2:	187b      	adds	r3, r7, r1
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005ef8:	187b      	adds	r3, r7, r1
 8005efa:	0018      	movs	r0, r3
 8005efc:	f001 ffb0 	bl	8007e60 <HAL_RCCEx_PeriphCLKConfig>
 8005f00:	1e03      	subs	r3, r0, #0
 8005f02:	d001      	beq.n	8005f08 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8005f04:	f7ff f934 	bl	8005170 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005f08:	4b1b      	ldr	r3, [pc, #108]	@ (8005f78 <HAL_UART_MspInit+0x148>)
 8005f0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8005f78 <HAL_UART_MspInit+0x148>)
 8005f0e:	2180      	movs	r1, #128	@ 0x80
 8005f10:	0289      	lsls	r1, r1, #10
 8005f12:	430a      	orrs	r2, r1
 8005f14:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005f16:	4b18      	ldr	r3, [pc, #96]	@ (8005f78 <HAL_UART_MspInit+0x148>)
 8005f18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f1a:	2380      	movs	r3, #128	@ 0x80
 8005f1c:	029b      	lsls	r3, r3, #10
 8005f1e:	4013      	ands	r3, r2
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f24:	4b14      	ldr	r3, [pc, #80]	@ (8005f78 <HAL_UART_MspInit+0x148>)
 8005f26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f28:	4b13      	ldr	r3, [pc, #76]	@ (8005f78 <HAL_UART_MspInit+0x148>)
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	635a      	str	r2, [r3, #52]	@ 0x34
 8005f30:	4b11      	ldr	r3, [pc, #68]	@ (8005f78 <HAL_UART_MspInit+0x148>)
 8005f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f34:	2201      	movs	r2, #1
 8005f36:	4013      	ands	r3, r2
 8005f38:	60bb      	str	r3, [r7, #8]
 8005f3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005f3c:	2164      	movs	r1, #100	@ 0x64
 8005f3e:	187b      	adds	r3, r7, r1
 8005f40:	220c      	movs	r2, #12
 8005f42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f44:	187b      	adds	r3, r7, r1
 8005f46:	2202      	movs	r2, #2
 8005f48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f4a:	187b      	adds	r3, r7, r1
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f50:	187b      	adds	r3, r7, r1
 8005f52:	2200      	movs	r2, #0
 8005f54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8005f56:	187b      	adds	r3, r7, r1
 8005f58:	2201      	movs	r2, #1
 8005f5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f5c:	187a      	adds	r2, r7, r1
 8005f5e:	23a0      	movs	r3, #160	@ 0xa0
 8005f60:	05db      	lsls	r3, r3, #23
 8005f62:	0011      	movs	r1, r2
 8005f64:	0018      	movs	r0, r3
 8005f66:	f000 fa3b 	bl	80063e0 <HAL_GPIO_Init>
}
 8005f6a:	46c0      	nop			@ (mov r8, r8)
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	b01f      	add	sp, #124	@ 0x7c
 8005f70:	bd90      	pop	{r4, r7, pc}
 8005f72:	46c0      	nop			@ (mov r8, r8)
 8005f74:	40013800 	.word	0x40013800
 8005f78:	40021000 	.word	0x40021000
 8005f7c:	50000800 	.word	0x50000800
 8005f80:	40004400 	.word	0x40004400

08005f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005f88:	46c0      	nop			@ (mov r8, r8)
 8005f8a:	e7fd      	b.n	8005f88 <NMI_Handler+0x4>

08005f8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	//drawString(0, 150, "ERROR", WHITE, BLACK, 10, 10);
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005f90:	46c0      	nop			@ (mov r8, r8)
 8005f92:	e7fd      	b.n	8005f90 <HardFault_Handler+0x4>

08005f94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005f98:	46c0      	nop			@ (mov r8, r8)
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005fa2:	46c0      	nop			@ (mov r8, r8)
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005fac:	f000 f8e4 	bl	8006178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005fb0:	46c0      	nop			@ (mov r8, r8)
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
	...

08005fb8 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8005fbc:	4b05      	ldr	r3, [pc, #20]	@ (8005fd4 <RTC_TAMP_IRQHandler+0x1c>)
 8005fbe:	0018      	movs	r0, r3
 8005fc0:	f002 fd6c 	bl	8008a9c <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8005fc4:	4b03      	ldr	r3, [pc, #12]	@ (8005fd4 <RTC_TAMP_IRQHandler+0x1c>)
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	f002 ff32 	bl	8008e30 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8005fcc:	46c0      	nop			@ (mov r8, r8)
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	46c0      	nop			@ (mov r8, r8)
 8005fd4:	20001280 	.word	0x20001280

08005fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005fe0:	4a14      	ldr	r2, [pc, #80]	@ (8006034 <_sbrk+0x5c>)
 8005fe2:	4b15      	ldr	r3, [pc, #84]	@ (8006038 <_sbrk+0x60>)
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005fec:	4b13      	ldr	r3, [pc, #76]	@ (800603c <_sbrk+0x64>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d102      	bne.n	8005ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ff4:	4b11      	ldr	r3, [pc, #68]	@ (800603c <_sbrk+0x64>)
 8005ff6:	4a12      	ldr	r2, [pc, #72]	@ (8006040 <_sbrk+0x68>)
 8005ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ffa:	4b10      	ldr	r3, [pc, #64]	@ (800603c <_sbrk+0x64>)
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	18d3      	adds	r3, r2, r3
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	429a      	cmp	r2, r3
 8006006:	d207      	bcs.n	8006018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006008:	f005 fabc 	bl	800b584 <__errno>
 800600c:	0003      	movs	r3, r0
 800600e:	220c      	movs	r2, #12
 8006010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006012:	2301      	movs	r3, #1
 8006014:	425b      	negs	r3, r3
 8006016:	e009      	b.n	800602c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006018:	4b08      	ldr	r3, [pc, #32]	@ (800603c <_sbrk+0x64>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800601e:	4b07      	ldr	r3, [pc, #28]	@ (800603c <_sbrk+0x64>)
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	18d2      	adds	r2, r2, r3
 8006026:	4b05      	ldr	r3, [pc, #20]	@ (800603c <_sbrk+0x64>)
 8006028:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800602a:	68fb      	ldr	r3, [r7, #12]
}
 800602c:	0018      	movs	r0, r3
 800602e:	46bd      	mov	sp, r7
 8006030:	b006      	add	sp, #24
 8006032:	bd80      	pop	{r7, pc}
 8006034:	20024000 	.word	0x20024000
 8006038:	00000400 	.word	0x00000400
 800603c:	20001484 	.word	0x20001484
 8006040:	200015d8 	.word	0x200015d8

08006044 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006048:	46c0      	nop			@ (mov r8, r8)
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
	...

08006050 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006050:	480d      	ldr	r0, [pc, #52]	@ (8006088 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006052:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006054:	f7ff fff6 	bl	8006044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006058:	480c      	ldr	r0, [pc, #48]	@ (800608c <LoopForever+0x6>)
  ldr r1, =_edata
 800605a:	490d      	ldr	r1, [pc, #52]	@ (8006090 <LoopForever+0xa>)
  ldr r2, =_sidata
 800605c:	4a0d      	ldr	r2, [pc, #52]	@ (8006094 <LoopForever+0xe>)
  movs r3, #0
 800605e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006060:	e002      	b.n	8006068 <LoopCopyDataInit>

08006062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006066:	3304      	adds	r3, #4

08006068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800606a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800606c:	d3f9      	bcc.n	8006062 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800606e:	4a0a      	ldr	r2, [pc, #40]	@ (8006098 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006070:	4c0a      	ldr	r4, [pc, #40]	@ (800609c <LoopForever+0x16>)
  movs r3, #0
 8006072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006074:	e001      	b.n	800607a <LoopFillZerobss>

08006076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006078:	3204      	adds	r2, #4

0800607a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800607a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800607c:	d3fb      	bcc.n	8006076 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800607e:	f005 fa87 	bl	800b590 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8006082:	f7fd ff3f 	bl	8003f04 <main>

08006086 <LoopForever>:

LoopForever:
  b LoopForever
 8006086:	e7fe      	b.n	8006086 <LoopForever>
  ldr   r0, =_estack
 8006088:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800608c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006090:	20000ef0 	.word	0x20000ef0
  ldr r2, =_sidata
 8006094:	0800cb9c 	.word	0x0800cb9c
  ldr r2, =_sbss
 8006098:	20000ef0 	.word	0x20000ef0
  ldr r4, =_ebss
 800609c:	200015d4 	.word	0x200015d4

080060a0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80060a0:	e7fe      	b.n	80060a0 <ADC1_COMP_IRQHandler>
	...

080060a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80060aa:	1dfb      	adds	r3, r7, #7
 80060ac:	2200      	movs	r2, #0
 80060ae:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80060b0:	4b0b      	ldr	r3, [pc, #44]	@ (80060e0 <HAL_Init+0x3c>)
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	4b0a      	ldr	r3, [pc, #40]	@ (80060e0 <HAL_Init+0x3c>)
 80060b6:	2180      	movs	r1, #128	@ 0x80
 80060b8:	0049      	lsls	r1, r1, #1
 80060ba:	430a      	orrs	r2, r1
 80060bc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80060be:	2003      	movs	r0, #3
 80060c0:	f000 f810 	bl	80060e4 <HAL_InitTick>
 80060c4:	1e03      	subs	r3, r0, #0
 80060c6:	d003      	beq.n	80060d0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80060c8:	1dfb      	adds	r3, r7, #7
 80060ca:	2201      	movs	r2, #1
 80060cc:	701a      	strb	r2, [r3, #0]
 80060ce:	e001      	b.n	80060d4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80060d0:	f7ff fd14 	bl	8005afc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80060d4:	1dfb      	adds	r3, r7, #7
 80060d6:	781b      	ldrb	r3, [r3, #0]
}
 80060d8:	0018      	movs	r0, r3
 80060da:	46bd      	mov	sp, r7
 80060dc:	b002      	add	sp, #8
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	40022000 	.word	0x40022000

080060e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80060e4:	b590      	push	{r4, r7, lr}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80060ec:	230f      	movs	r3, #15
 80060ee:	18fb      	adds	r3, r7, r3
 80060f0:	2200      	movs	r2, #0
 80060f2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80060f4:	4b1d      	ldr	r3, [pc, #116]	@ (800616c <HAL_InitTick+0x88>)
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d02b      	beq.n	8006154 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80060fc:	4b1c      	ldr	r3, [pc, #112]	@ (8006170 <HAL_InitTick+0x8c>)
 80060fe:	681c      	ldr	r4, [r3, #0]
 8006100:	4b1a      	ldr	r3, [pc, #104]	@ (800616c <HAL_InitTick+0x88>)
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	0019      	movs	r1, r3
 8006106:	23fa      	movs	r3, #250	@ 0xfa
 8006108:	0098      	lsls	r0, r3, #2
 800610a:	f7fa f80f 	bl	800012c <__udivsi3>
 800610e:	0003      	movs	r3, r0
 8006110:	0019      	movs	r1, r3
 8006112:	0020      	movs	r0, r4
 8006114:	f7fa f80a 	bl	800012c <__udivsi3>
 8006118:	0003      	movs	r3, r0
 800611a:	0018      	movs	r0, r3
 800611c:	f000 f953 	bl	80063c6 <HAL_SYSTICK_Config>
 8006120:	1e03      	subs	r3, r0, #0
 8006122:	d112      	bne.n	800614a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b03      	cmp	r3, #3
 8006128:	d80a      	bhi.n	8006140 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800612a:	6879      	ldr	r1, [r7, #4]
 800612c:	2301      	movs	r3, #1
 800612e:	425b      	negs	r3, r3
 8006130:	2200      	movs	r2, #0
 8006132:	0018      	movs	r0, r3
 8006134:	f000 f922 	bl	800637c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006138:	4b0e      	ldr	r3, [pc, #56]	@ (8006174 <HAL_InitTick+0x90>)
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	e00d      	b.n	800615c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8006140:	230f      	movs	r3, #15
 8006142:	18fb      	adds	r3, r7, r3
 8006144:	2201      	movs	r2, #1
 8006146:	701a      	strb	r2, [r3, #0]
 8006148:	e008      	b.n	800615c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800614a:	230f      	movs	r3, #15
 800614c:	18fb      	adds	r3, r7, r3
 800614e:	2201      	movs	r2, #1
 8006150:	701a      	strb	r2, [r3, #0]
 8006152:	e003      	b.n	800615c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006154:	230f      	movs	r3, #15
 8006156:	18fb      	adds	r3, r7, r3
 8006158:	2201      	movs	r2, #1
 800615a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800615c:	230f      	movs	r3, #15
 800615e:	18fb      	adds	r3, r7, r3
 8006160:	781b      	ldrb	r3, [r3, #0]
}
 8006162:	0018      	movs	r0, r3
 8006164:	46bd      	mov	sp, r7
 8006166:	b005      	add	sp, #20
 8006168:	bd90      	pop	{r4, r7, pc}
 800616a:	46c0      	nop			@ (mov r8, r8)
 800616c:	20000e8c 	.word	0x20000e8c
 8006170:	20000e84 	.word	0x20000e84
 8006174:	20000e88 	.word	0x20000e88

08006178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800617c:	4b05      	ldr	r3, [pc, #20]	@ (8006194 <HAL_IncTick+0x1c>)
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	001a      	movs	r2, r3
 8006182:	4b05      	ldr	r3, [pc, #20]	@ (8006198 <HAL_IncTick+0x20>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	18d2      	adds	r2, r2, r3
 8006188:	4b03      	ldr	r3, [pc, #12]	@ (8006198 <HAL_IncTick+0x20>)
 800618a:	601a      	str	r2, [r3, #0]
}
 800618c:	46c0      	nop			@ (mov r8, r8)
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	46c0      	nop			@ (mov r8, r8)
 8006194:	20000e8c 	.word	0x20000e8c
 8006198:	20001488 	.word	0x20001488

0800619c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	af00      	add	r7, sp, #0
  return uwTick;
 80061a0:	4b02      	ldr	r3, [pc, #8]	@ (80061ac <HAL_GetTick+0x10>)
 80061a2:	681b      	ldr	r3, [r3, #0]
}
 80061a4:	0018      	movs	r0, r3
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	46c0      	nop			@ (mov r8, r8)
 80061ac:	20001488 	.word	0x20001488

080061b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80061b8:	f7ff fff0 	bl	800619c <HAL_GetTick>
 80061bc:	0003      	movs	r3, r0
 80061be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3301      	adds	r3, #1
 80061c8:	d005      	beq.n	80061d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80061ca:	4b0a      	ldr	r3, [pc, #40]	@ (80061f4 <HAL_Delay+0x44>)
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	001a      	movs	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	189b      	adds	r3, r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80061d6:	46c0      	nop			@ (mov r8, r8)
 80061d8:	f7ff ffe0 	bl	800619c <HAL_GetTick>
 80061dc:	0002      	movs	r2, r0
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d8f7      	bhi.n	80061d8 <HAL_Delay+0x28>
  {
  }
}
 80061e8:	46c0      	nop			@ (mov r8, r8)
 80061ea:	46c0      	nop			@ (mov r8, r8)
 80061ec:	46bd      	mov	sp, r7
 80061ee:	b004      	add	sp, #16
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	46c0      	nop			@ (mov r8, r8)
 80061f4:	20000e8c 	.word	0x20000e8c

080061f8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8006200:	4b06      	ldr	r3, [pc, #24]	@ (800621c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a06      	ldr	r2, [pc, #24]	@ (8006220 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8006206:	4013      	ands	r3, r2
 8006208:	0019      	movs	r1, r3
 800620a:	4b04      	ldr	r3, [pc, #16]	@ (800621c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	430a      	orrs	r2, r1
 8006210:	601a      	str	r2, [r3, #0]
}
 8006212:	46c0      	nop			@ (mov r8, r8)
 8006214:	46bd      	mov	sp, r7
 8006216:	b002      	add	sp, #8
 8006218:	bd80      	pop	{r7, pc}
 800621a:	46c0      	nop			@ (mov r8, r8)
 800621c:	40010000 	.word	0x40010000
 8006220:	fffff9ff 	.word	0xfffff9ff

08006224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	0002      	movs	r2, r0
 800622c:	1dfb      	adds	r3, r7, #7
 800622e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006230:	1dfb      	adds	r3, r7, #7
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b7f      	cmp	r3, #127	@ 0x7f
 8006236:	d809      	bhi.n	800624c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006238:	1dfb      	adds	r3, r7, #7
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	001a      	movs	r2, r3
 800623e:	231f      	movs	r3, #31
 8006240:	401a      	ands	r2, r3
 8006242:	4b04      	ldr	r3, [pc, #16]	@ (8006254 <__NVIC_EnableIRQ+0x30>)
 8006244:	2101      	movs	r1, #1
 8006246:	4091      	lsls	r1, r2
 8006248:	000a      	movs	r2, r1
 800624a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800624c:	46c0      	nop			@ (mov r8, r8)
 800624e:	46bd      	mov	sp, r7
 8006250:	b002      	add	sp, #8
 8006252:	bd80      	pop	{r7, pc}
 8006254:	e000e100 	.word	0xe000e100

08006258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006258:	b590      	push	{r4, r7, lr}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	0002      	movs	r2, r0
 8006260:	6039      	str	r1, [r7, #0]
 8006262:	1dfb      	adds	r3, r7, #7
 8006264:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006266:	1dfb      	adds	r3, r7, #7
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	2b7f      	cmp	r3, #127	@ 0x7f
 800626c:	d828      	bhi.n	80062c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800626e:	4a2f      	ldr	r2, [pc, #188]	@ (800632c <__NVIC_SetPriority+0xd4>)
 8006270:	1dfb      	adds	r3, r7, #7
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	b25b      	sxtb	r3, r3
 8006276:	089b      	lsrs	r3, r3, #2
 8006278:	33c0      	adds	r3, #192	@ 0xc0
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	589b      	ldr	r3, [r3, r2]
 800627e:	1dfa      	adds	r2, r7, #7
 8006280:	7812      	ldrb	r2, [r2, #0]
 8006282:	0011      	movs	r1, r2
 8006284:	2203      	movs	r2, #3
 8006286:	400a      	ands	r2, r1
 8006288:	00d2      	lsls	r2, r2, #3
 800628a:	21ff      	movs	r1, #255	@ 0xff
 800628c:	4091      	lsls	r1, r2
 800628e:	000a      	movs	r2, r1
 8006290:	43d2      	mvns	r2, r2
 8006292:	401a      	ands	r2, r3
 8006294:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	019b      	lsls	r3, r3, #6
 800629a:	22ff      	movs	r2, #255	@ 0xff
 800629c:	401a      	ands	r2, r3
 800629e:	1dfb      	adds	r3, r7, #7
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	0018      	movs	r0, r3
 80062a4:	2303      	movs	r3, #3
 80062a6:	4003      	ands	r3, r0
 80062a8:	00db      	lsls	r3, r3, #3
 80062aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80062ac:	481f      	ldr	r0, [pc, #124]	@ (800632c <__NVIC_SetPriority+0xd4>)
 80062ae:	1dfb      	adds	r3, r7, #7
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	b25b      	sxtb	r3, r3
 80062b4:	089b      	lsrs	r3, r3, #2
 80062b6:	430a      	orrs	r2, r1
 80062b8:	33c0      	adds	r3, #192	@ 0xc0
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80062be:	e031      	b.n	8006324 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80062c0:	4a1b      	ldr	r2, [pc, #108]	@ (8006330 <__NVIC_SetPriority+0xd8>)
 80062c2:	1dfb      	adds	r3, r7, #7
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	0019      	movs	r1, r3
 80062c8:	230f      	movs	r3, #15
 80062ca:	400b      	ands	r3, r1
 80062cc:	3b08      	subs	r3, #8
 80062ce:	089b      	lsrs	r3, r3, #2
 80062d0:	3306      	adds	r3, #6
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	18d3      	adds	r3, r2, r3
 80062d6:	3304      	adds	r3, #4
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	1dfa      	adds	r2, r7, #7
 80062dc:	7812      	ldrb	r2, [r2, #0]
 80062de:	0011      	movs	r1, r2
 80062e0:	2203      	movs	r2, #3
 80062e2:	400a      	ands	r2, r1
 80062e4:	00d2      	lsls	r2, r2, #3
 80062e6:	21ff      	movs	r1, #255	@ 0xff
 80062e8:	4091      	lsls	r1, r2
 80062ea:	000a      	movs	r2, r1
 80062ec:	43d2      	mvns	r2, r2
 80062ee:	401a      	ands	r2, r3
 80062f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	019b      	lsls	r3, r3, #6
 80062f6:	22ff      	movs	r2, #255	@ 0xff
 80062f8:	401a      	ands	r2, r3
 80062fa:	1dfb      	adds	r3, r7, #7
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	0018      	movs	r0, r3
 8006300:	2303      	movs	r3, #3
 8006302:	4003      	ands	r3, r0
 8006304:	00db      	lsls	r3, r3, #3
 8006306:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006308:	4809      	ldr	r0, [pc, #36]	@ (8006330 <__NVIC_SetPriority+0xd8>)
 800630a:	1dfb      	adds	r3, r7, #7
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	001c      	movs	r4, r3
 8006310:	230f      	movs	r3, #15
 8006312:	4023      	ands	r3, r4
 8006314:	3b08      	subs	r3, #8
 8006316:	089b      	lsrs	r3, r3, #2
 8006318:	430a      	orrs	r2, r1
 800631a:	3306      	adds	r3, #6
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	18c3      	adds	r3, r0, r3
 8006320:	3304      	adds	r3, #4
 8006322:	601a      	str	r2, [r3, #0]
}
 8006324:	46c0      	nop			@ (mov r8, r8)
 8006326:	46bd      	mov	sp, r7
 8006328:	b003      	add	sp, #12
 800632a:	bd90      	pop	{r4, r7, pc}
 800632c:	e000e100 	.word	0xe000e100
 8006330:	e000ed00 	.word	0xe000ed00

08006334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	1e5a      	subs	r2, r3, #1
 8006340:	2380      	movs	r3, #128	@ 0x80
 8006342:	045b      	lsls	r3, r3, #17
 8006344:	429a      	cmp	r2, r3
 8006346:	d301      	bcc.n	800634c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006348:	2301      	movs	r3, #1
 800634a:	e010      	b.n	800636e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800634c:	4b0a      	ldr	r3, [pc, #40]	@ (8006378 <SysTick_Config+0x44>)
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	3a01      	subs	r2, #1
 8006352:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006354:	2301      	movs	r3, #1
 8006356:	425b      	negs	r3, r3
 8006358:	2103      	movs	r1, #3
 800635a:	0018      	movs	r0, r3
 800635c:	f7ff ff7c 	bl	8006258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006360:	4b05      	ldr	r3, [pc, #20]	@ (8006378 <SysTick_Config+0x44>)
 8006362:	2200      	movs	r2, #0
 8006364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006366:	4b04      	ldr	r3, [pc, #16]	@ (8006378 <SysTick_Config+0x44>)
 8006368:	2207      	movs	r2, #7
 800636a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800636c:	2300      	movs	r3, #0
}
 800636e:	0018      	movs	r0, r3
 8006370:	46bd      	mov	sp, r7
 8006372:	b002      	add	sp, #8
 8006374:	bd80      	pop	{r7, pc}
 8006376:	46c0      	nop			@ (mov r8, r8)
 8006378:	e000e010 	.word	0xe000e010

0800637c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	60b9      	str	r1, [r7, #8]
 8006384:	607a      	str	r2, [r7, #4]
 8006386:	210f      	movs	r1, #15
 8006388:	187b      	adds	r3, r7, r1
 800638a:	1c02      	adds	r2, r0, #0
 800638c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	187b      	adds	r3, r7, r1
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	b25b      	sxtb	r3, r3
 8006396:	0011      	movs	r1, r2
 8006398:	0018      	movs	r0, r3
 800639a:	f7ff ff5d 	bl	8006258 <__NVIC_SetPriority>
}
 800639e:	46c0      	nop			@ (mov r8, r8)
 80063a0:	46bd      	mov	sp, r7
 80063a2:	b004      	add	sp, #16
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b082      	sub	sp, #8
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	0002      	movs	r2, r0
 80063ae:	1dfb      	adds	r3, r7, #7
 80063b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063b2:	1dfb      	adds	r3, r7, #7
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	b25b      	sxtb	r3, r3
 80063b8:	0018      	movs	r0, r3
 80063ba:	f7ff ff33 	bl	8006224 <__NVIC_EnableIRQ>
}
 80063be:	46c0      	nop			@ (mov r8, r8)
 80063c0:	46bd      	mov	sp, r7
 80063c2:	b002      	add	sp, #8
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b082      	sub	sp, #8
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	0018      	movs	r0, r3
 80063d2:	f7ff ffaf 	bl	8006334 <SysTick_Config>
 80063d6:	0003      	movs	r3, r0
}
 80063d8:	0018      	movs	r0, r3
 80063da:	46bd      	mov	sp, r7
 80063dc:	b002      	add	sp, #8
 80063de:	bd80      	pop	{r7, pc}

080063e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80063ea:	2300      	movs	r3, #0
 80063ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063ee:	e14d      	b.n	800668c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2101      	movs	r1, #1
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	4091      	lsls	r1, r2
 80063fa:	000a      	movs	r2, r1
 80063fc:	4013      	ands	r3, r2
 80063fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d100      	bne.n	8006408 <HAL_GPIO_Init+0x28>
 8006406:	e13e      	b.n	8006686 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	2203      	movs	r2, #3
 800640e:	4013      	ands	r3, r2
 8006410:	2b01      	cmp	r3, #1
 8006412:	d005      	beq.n	8006420 <HAL_GPIO_Init+0x40>
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	2203      	movs	r2, #3
 800641a:	4013      	ands	r3, r2
 800641c:	2b02      	cmp	r3, #2
 800641e:	d130      	bne.n	8006482 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	2203      	movs	r2, #3
 800642c:	409a      	lsls	r2, r3
 800642e:	0013      	movs	r3, r2
 8006430:	43da      	mvns	r2, r3
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	4013      	ands	r3, r2
 8006436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	68da      	ldr	r2, [r3, #12]
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	005b      	lsls	r3, r3, #1
 8006440:	409a      	lsls	r2, r3
 8006442:	0013      	movs	r3, r2
 8006444:	693a      	ldr	r2, [r7, #16]
 8006446:	4313      	orrs	r3, r2
 8006448:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006456:	2201      	movs	r2, #1
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	409a      	lsls	r2, r3
 800645c:	0013      	movs	r3, r2
 800645e:	43da      	mvns	r2, r3
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	4013      	ands	r3, r2
 8006464:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	091b      	lsrs	r3, r3, #4
 800646c:	2201      	movs	r2, #1
 800646e:	401a      	ands	r2, r3
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	409a      	lsls	r2, r3
 8006474:	0013      	movs	r3, r2
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	4313      	orrs	r3, r2
 800647a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	2203      	movs	r2, #3
 8006488:	4013      	ands	r3, r2
 800648a:	2b03      	cmp	r3, #3
 800648c:	d017      	beq.n	80064be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	005b      	lsls	r3, r3, #1
 8006498:	2203      	movs	r2, #3
 800649a:	409a      	lsls	r2, r3
 800649c:	0013      	movs	r3, r2
 800649e:	43da      	mvns	r2, r3
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	4013      	ands	r3, r2
 80064a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	689a      	ldr	r2, [r3, #8]
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	409a      	lsls	r2, r3
 80064b0:	0013      	movs	r3, r2
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	2203      	movs	r2, #3
 80064c4:	4013      	ands	r3, r2
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d123      	bne.n	8006512 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	08da      	lsrs	r2, r3, #3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	3208      	adds	r2, #8
 80064d2:	0092      	lsls	r2, r2, #2
 80064d4:	58d3      	ldr	r3, [r2, r3]
 80064d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	2207      	movs	r2, #7
 80064dc:	4013      	ands	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	220f      	movs	r2, #15
 80064e2:	409a      	lsls	r2, r3
 80064e4:	0013      	movs	r3, r2
 80064e6:	43da      	mvns	r2, r3
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	4013      	ands	r3, r2
 80064ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	691a      	ldr	r2, [r3, #16]
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2107      	movs	r1, #7
 80064f6:	400b      	ands	r3, r1
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	409a      	lsls	r2, r3
 80064fc:	0013      	movs	r3, r2
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	4313      	orrs	r3, r2
 8006502:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	08da      	lsrs	r2, r3, #3
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	3208      	adds	r2, #8
 800650c:	0092      	lsls	r2, r2, #2
 800650e:	6939      	ldr	r1, [r7, #16]
 8006510:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	005b      	lsls	r3, r3, #1
 800651c:	2203      	movs	r2, #3
 800651e:	409a      	lsls	r2, r3
 8006520:	0013      	movs	r3, r2
 8006522:	43da      	mvns	r2, r3
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	4013      	ands	r3, r2
 8006528:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	2203      	movs	r2, #3
 8006530:	401a      	ands	r2, r3
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	409a      	lsls	r2, r3
 8006538:	0013      	movs	r3, r2
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	4313      	orrs	r3, r2
 800653e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	23c0      	movs	r3, #192	@ 0xc0
 800654c:	029b      	lsls	r3, r3, #10
 800654e:	4013      	ands	r3, r2
 8006550:	d100      	bne.n	8006554 <HAL_GPIO_Init+0x174>
 8006552:	e098      	b.n	8006686 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006554:	4a53      	ldr	r2, [pc, #332]	@ (80066a4 <HAL_GPIO_Init+0x2c4>)
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	089b      	lsrs	r3, r3, #2
 800655a:	3318      	adds	r3, #24
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	589b      	ldr	r3, [r3, r2]
 8006560:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2203      	movs	r2, #3
 8006566:	4013      	ands	r3, r2
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	220f      	movs	r2, #15
 800656c:	409a      	lsls	r2, r3
 800656e:	0013      	movs	r3, r2
 8006570:	43da      	mvns	r2, r3
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	4013      	ands	r3, r2
 8006576:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	23a0      	movs	r3, #160	@ 0xa0
 800657c:	05db      	lsls	r3, r3, #23
 800657e:	429a      	cmp	r2, r3
 8006580:	d019      	beq.n	80065b6 <HAL_GPIO_Init+0x1d6>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a48      	ldr	r2, [pc, #288]	@ (80066a8 <HAL_GPIO_Init+0x2c8>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d013      	beq.n	80065b2 <HAL_GPIO_Init+0x1d2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a47      	ldr	r2, [pc, #284]	@ (80066ac <HAL_GPIO_Init+0x2cc>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00d      	beq.n	80065ae <HAL_GPIO_Init+0x1ce>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a46      	ldr	r2, [pc, #280]	@ (80066b0 <HAL_GPIO_Init+0x2d0>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d007      	beq.n	80065aa <HAL_GPIO_Init+0x1ca>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a45      	ldr	r2, [pc, #276]	@ (80066b4 <HAL_GPIO_Init+0x2d4>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d101      	bne.n	80065a6 <HAL_GPIO_Init+0x1c6>
 80065a2:	2304      	movs	r3, #4
 80065a4:	e008      	b.n	80065b8 <HAL_GPIO_Init+0x1d8>
 80065a6:	2305      	movs	r3, #5
 80065a8:	e006      	b.n	80065b8 <HAL_GPIO_Init+0x1d8>
 80065aa:	2303      	movs	r3, #3
 80065ac:	e004      	b.n	80065b8 <HAL_GPIO_Init+0x1d8>
 80065ae:	2302      	movs	r3, #2
 80065b0:	e002      	b.n	80065b8 <HAL_GPIO_Init+0x1d8>
 80065b2:	2301      	movs	r3, #1
 80065b4:	e000      	b.n	80065b8 <HAL_GPIO_Init+0x1d8>
 80065b6:	2300      	movs	r3, #0
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	2103      	movs	r1, #3
 80065bc:	400a      	ands	r2, r1
 80065be:	00d2      	lsls	r2, r2, #3
 80065c0:	4093      	lsls	r3, r2
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80065c8:	4936      	ldr	r1, [pc, #216]	@ (80066a4 <HAL_GPIO_Init+0x2c4>)
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	089b      	lsrs	r3, r3, #2
 80065ce:	3318      	adds	r3, #24
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80065d6:	4b33      	ldr	r3, [pc, #204]	@ (80066a4 <HAL_GPIO_Init+0x2c4>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	43da      	mvns	r2, r3
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	4013      	ands	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	2380      	movs	r3, #128	@ 0x80
 80065ec:	035b      	lsls	r3, r3, #13
 80065ee:	4013      	ands	r3, r2
 80065f0:	d003      	beq.n	80065fa <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80065fa:	4b2a      	ldr	r3, [pc, #168]	@ (80066a4 <HAL_GPIO_Init+0x2c4>)
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006600:	4b28      	ldr	r3, [pc, #160]	@ (80066a4 <HAL_GPIO_Init+0x2c4>)
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	43da      	mvns	r2, r3
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	4013      	ands	r3, r2
 800660e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	2380      	movs	r3, #128	@ 0x80
 8006616:	039b      	lsls	r3, r3, #14
 8006618:	4013      	ands	r3, r2
 800661a:	d003      	beq.n	8006624 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4313      	orrs	r3, r2
 8006622:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006624:	4b1f      	ldr	r3, [pc, #124]	@ (80066a4 <HAL_GPIO_Init+0x2c4>)
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800662a:	4a1e      	ldr	r2, [pc, #120]	@ (80066a4 <HAL_GPIO_Init+0x2c4>)
 800662c:	2384      	movs	r3, #132	@ 0x84
 800662e:	58d3      	ldr	r3, [r2, r3]
 8006630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	43da      	mvns	r2, r3
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	4013      	ands	r3, r2
 800663a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	2380      	movs	r3, #128	@ 0x80
 8006642:	029b      	lsls	r3, r3, #10
 8006644:	4013      	ands	r3, r2
 8006646:	d003      	beq.n	8006650 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	4313      	orrs	r3, r2
 800664e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006650:	4914      	ldr	r1, [pc, #80]	@ (80066a4 <HAL_GPIO_Init+0x2c4>)
 8006652:	2284      	movs	r2, #132	@ 0x84
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006658:	4a12      	ldr	r2, [pc, #72]	@ (80066a4 <HAL_GPIO_Init+0x2c4>)
 800665a:	2380      	movs	r3, #128	@ 0x80
 800665c:	58d3      	ldr	r3, [r2, r3]
 800665e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	43da      	mvns	r2, r3
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	4013      	ands	r3, r2
 8006668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	2380      	movs	r3, #128	@ 0x80
 8006670:	025b      	lsls	r3, r3, #9
 8006672:	4013      	ands	r3, r2
 8006674:	d003      	beq.n	800667e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4313      	orrs	r3, r2
 800667c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800667e:	4909      	ldr	r1, [pc, #36]	@ (80066a4 <HAL_GPIO_Init+0x2c4>)
 8006680:	2280      	movs	r2, #128	@ 0x80
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	3301      	adds	r3, #1
 800668a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	40da      	lsrs	r2, r3
 8006694:	1e13      	subs	r3, r2, #0
 8006696:	d000      	beq.n	800669a <HAL_GPIO_Init+0x2ba>
 8006698:	e6aa      	b.n	80063f0 <HAL_GPIO_Init+0x10>
  }
}
 800669a:	46c0      	nop			@ (mov r8, r8)
 800669c:	46c0      	nop			@ (mov r8, r8)
 800669e:	46bd      	mov	sp, r7
 80066a0:	b006      	add	sp, #24
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	40021800 	.word	0x40021800
 80066a8:	50000400 	.word	0x50000400
 80066ac:	50000800 	.word	0x50000800
 80066b0:	50000c00 	.word	0x50000c00
 80066b4:	50001000 	.word	0x50001000

080066b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	000a      	movs	r2, r1
 80066c2:	1cbb      	adds	r3, r7, #2
 80066c4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	1cba      	adds	r2, r7, #2
 80066cc:	8812      	ldrh	r2, [r2, #0]
 80066ce:	4013      	ands	r3, r2
 80066d0:	d004      	beq.n	80066dc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80066d2:	230f      	movs	r3, #15
 80066d4:	18fb      	adds	r3, r7, r3
 80066d6:	2201      	movs	r2, #1
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	e003      	b.n	80066e4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80066dc:	230f      	movs	r3, #15
 80066de:	18fb      	adds	r3, r7, r3
 80066e0:	2200      	movs	r2, #0
 80066e2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80066e4:	230f      	movs	r3, #15
 80066e6:	18fb      	adds	r3, r7, r3
 80066e8:	781b      	ldrb	r3, [r3, #0]
}
 80066ea:	0018      	movs	r0, r3
 80066ec:	46bd      	mov	sp, r7
 80066ee:	b004      	add	sp, #16
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b082      	sub	sp, #8
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	0008      	movs	r0, r1
 80066fc:	0011      	movs	r1, r2
 80066fe:	1cbb      	adds	r3, r7, #2
 8006700:	1c02      	adds	r2, r0, #0
 8006702:	801a      	strh	r2, [r3, #0]
 8006704:	1c7b      	adds	r3, r7, #1
 8006706:	1c0a      	adds	r2, r1, #0
 8006708:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800670a:	1c7b      	adds	r3, r7, #1
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d004      	beq.n	800671c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006712:	1cbb      	adds	r3, r7, #2
 8006714:	881a      	ldrh	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800671a:	e003      	b.n	8006724 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800671c:	1cbb      	adds	r3, r7, #2
 800671e:	881a      	ldrh	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006724:	46c0      	nop			@ (mov r8, r8)
 8006726:	46bd      	mov	sp, r7
 8006728:	b002      	add	sp, #8
 800672a:	bd80      	pop	{r7, pc}

0800672c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e08f      	b.n	800685e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2241      	movs	r2, #65	@ 0x41
 8006742:	5c9b      	ldrb	r3, [r3, r2]
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d107      	bne.n	800675a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2240      	movs	r2, #64	@ 0x40
 800674e:	2100      	movs	r1, #0
 8006750:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	0018      	movs	r0, r3
 8006756:	f7ff f9f9 	bl	8005b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2241      	movs	r2, #65	@ 0x41
 800675e:	2124      	movs	r1, #36	@ 0x24
 8006760:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2101      	movs	r1, #1
 800676e:	438a      	bics	r2, r1
 8006770:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	493b      	ldr	r1, [pc, #236]	@ (8006868 <HAL_I2C_Init+0x13c>)
 800677c:	400a      	ands	r2, r1
 800677e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689a      	ldr	r2, [r3, #8]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4938      	ldr	r1, [pc, #224]	@ (800686c <HAL_I2C_Init+0x140>)
 800678c:	400a      	ands	r2, r1
 800678e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d108      	bne.n	80067aa <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2180      	movs	r1, #128	@ 0x80
 80067a2:	0209      	lsls	r1, r1, #8
 80067a4:	430a      	orrs	r2, r1
 80067a6:	609a      	str	r2, [r3, #8]
 80067a8:	e007      	b.n	80067ba <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	689a      	ldr	r2, [r3, #8]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2184      	movs	r1, #132	@ 0x84
 80067b4:	0209      	lsls	r1, r1, #8
 80067b6:	430a      	orrs	r2, r1
 80067b8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d109      	bne.n	80067d6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685a      	ldr	r2, [r3, #4]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2180      	movs	r1, #128	@ 0x80
 80067ce:	0109      	lsls	r1, r1, #4
 80067d0:	430a      	orrs	r2, r1
 80067d2:	605a      	str	r2, [r3, #4]
 80067d4:	e007      	b.n	80067e6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4923      	ldr	r1, [pc, #140]	@ (8006870 <HAL_I2C_Init+0x144>)
 80067e2:	400a      	ands	r2, r1
 80067e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4920      	ldr	r1, [pc, #128]	@ (8006874 <HAL_I2C_Init+0x148>)
 80067f2:	430a      	orrs	r2, r1
 80067f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68da      	ldr	r2, [r3, #12]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	491a      	ldr	r1, [pc, #104]	@ (800686c <HAL_I2C_Init+0x140>)
 8006802:	400a      	ands	r2, r1
 8006804:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	691a      	ldr	r2, [r3, #16]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	431a      	orrs	r2, r3
 8006810:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	430a      	orrs	r2, r1
 800681e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	69d9      	ldr	r1, [r3, #28]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a1a      	ldr	r2, [r3, #32]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	430a      	orrs	r2, r1
 800682e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2101      	movs	r1, #1
 800683c:	430a      	orrs	r2, r1
 800683e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2241      	movs	r2, #65	@ 0x41
 800684a:	2120      	movs	r1, #32
 800684c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2242      	movs	r2, #66	@ 0x42
 8006858:	2100      	movs	r1, #0
 800685a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	0018      	movs	r0, r3
 8006860:	46bd      	mov	sp, r7
 8006862:	b002      	add	sp, #8
 8006864:	bd80      	pop	{r7, pc}
 8006866:	46c0      	nop			@ (mov r8, r8)
 8006868:	f0ffffff 	.word	0xf0ffffff
 800686c:	ffff7fff 	.word	0xffff7fff
 8006870:	fffff7ff 	.word	0xfffff7ff
 8006874:	02008000 	.word	0x02008000

08006878 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006878:	b590      	push	{r4, r7, lr}
 800687a:	b089      	sub	sp, #36	@ 0x24
 800687c:	af02      	add	r7, sp, #8
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	0008      	movs	r0, r1
 8006882:	607a      	str	r2, [r7, #4]
 8006884:	0019      	movs	r1, r3
 8006886:	230a      	movs	r3, #10
 8006888:	18fb      	adds	r3, r7, r3
 800688a:	1c02      	adds	r2, r0, #0
 800688c:	801a      	strh	r2, [r3, #0]
 800688e:	2308      	movs	r3, #8
 8006890:	18fb      	adds	r3, r7, r3
 8006892:	1c0a      	adds	r2, r1, #0
 8006894:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2241      	movs	r2, #65	@ 0x41
 800689a:	5c9b      	ldrb	r3, [r3, r2]
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b20      	cmp	r3, #32
 80068a0:	d000      	beq.n	80068a4 <HAL_I2C_Master_Transmit+0x2c>
 80068a2:	e10a      	b.n	8006aba <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2240      	movs	r2, #64	@ 0x40
 80068a8:	5c9b      	ldrb	r3, [r3, r2]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d101      	bne.n	80068b2 <HAL_I2C_Master_Transmit+0x3a>
 80068ae:	2302      	movs	r3, #2
 80068b0:	e104      	b.n	8006abc <HAL_I2C_Master_Transmit+0x244>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2240      	movs	r2, #64	@ 0x40
 80068b6:	2101      	movs	r1, #1
 80068b8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80068ba:	f7ff fc6f 	bl	800619c <HAL_GetTick>
 80068be:	0003      	movs	r3, r0
 80068c0:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80068c2:	2380      	movs	r3, #128	@ 0x80
 80068c4:	0219      	lsls	r1, r3, #8
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	2319      	movs	r3, #25
 80068ce:	2201      	movs	r2, #1
 80068d0:	f000 fa26 	bl	8006d20 <I2C_WaitOnFlagUntilTimeout>
 80068d4:	1e03      	subs	r3, r0, #0
 80068d6:	d001      	beq.n	80068dc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e0ef      	b.n	8006abc <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2241      	movs	r2, #65	@ 0x41
 80068e0:	2121      	movs	r1, #33	@ 0x21
 80068e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2242      	movs	r2, #66	@ 0x42
 80068e8:	2110      	movs	r1, #16
 80068ea:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2208      	movs	r2, #8
 80068fc:	18ba      	adds	r2, r7, r2
 80068fe:	8812      	ldrh	r2, [r2, #0]
 8006900:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800690c:	b29b      	uxth	r3, r3
 800690e:	2bff      	cmp	r3, #255	@ 0xff
 8006910:	d906      	bls.n	8006920 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	22ff      	movs	r2, #255	@ 0xff
 8006916:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006918:	2380      	movs	r3, #128	@ 0x80
 800691a:	045b      	lsls	r3, r3, #17
 800691c:	617b      	str	r3, [r7, #20]
 800691e:	e007      	b.n	8006930 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006924:	b29a      	uxth	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800692a:	2380      	movs	r3, #128	@ 0x80
 800692c:	049b      	lsls	r3, r3, #18
 800692e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006934:	2b00      	cmp	r3, #0
 8006936:	d027      	beq.n	8006988 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693c:	781a      	ldrb	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006948:	1c5a      	adds	r2, r3, #1
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006952:	b29b      	uxth	r3, r3
 8006954:	3b01      	subs	r3, #1
 8006956:	b29a      	uxth	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006960:	3b01      	subs	r3, #1
 8006962:	b29a      	uxth	r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800696c:	b2db      	uxtb	r3, r3
 800696e:	3301      	adds	r3, #1
 8006970:	b2da      	uxtb	r2, r3
 8006972:	697c      	ldr	r4, [r7, #20]
 8006974:	230a      	movs	r3, #10
 8006976:	18fb      	adds	r3, r7, r3
 8006978:	8819      	ldrh	r1, [r3, #0]
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	4b51      	ldr	r3, [pc, #324]	@ (8006ac4 <HAL_I2C_Master_Transmit+0x24c>)
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	0023      	movs	r3, r4
 8006982:	f000 fc45 	bl	8007210 <I2C_TransferConfig>
 8006986:	e06f      	b.n	8006a68 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800698c:	b2da      	uxtb	r2, r3
 800698e:	697c      	ldr	r4, [r7, #20]
 8006990:	230a      	movs	r3, #10
 8006992:	18fb      	adds	r3, r7, r3
 8006994:	8819      	ldrh	r1, [r3, #0]
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	4b4a      	ldr	r3, [pc, #296]	@ (8006ac4 <HAL_I2C_Master_Transmit+0x24c>)
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	0023      	movs	r3, r4
 800699e:	f000 fc37 	bl	8007210 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80069a2:	e061      	b.n	8006a68 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	0018      	movs	r0, r3
 80069ac:	f000 fa10 	bl	8006dd0 <I2C_WaitOnTXISFlagUntilTimeout>
 80069b0:	1e03      	subs	r3, r0, #0
 80069b2:	d001      	beq.n	80069b8 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e081      	b.n	8006abc <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069bc:	781a      	ldrb	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	3b01      	subs	r3, #1
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069e0:	3b01      	subs	r3, #1
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d03a      	beq.n	8006a68 <HAL_I2C_Master_Transmit+0x1f0>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d136      	bne.n	8006a68 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80069fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	0013      	movs	r3, r2
 8006a04:	2200      	movs	r2, #0
 8006a06:	2180      	movs	r1, #128	@ 0x80
 8006a08:	f000 f98a 	bl	8006d20 <I2C_WaitOnFlagUntilTimeout>
 8006a0c:	1e03      	subs	r3, r0, #0
 8006a0e:	d001      	beq.n	8006a14 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e053      	b.n	8006abc <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	2bff      	cmp	r3, #255	@ 0xff
 8006a1c:	d911      	bls.n	8006a42 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	22ff      	movs	r2, #255	@ 0xff
 8006a22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	2380      	movs	r3, #128	@ 0x80
 8006a2c:	045c      	lsls	r4, r3, #17
 8006a2e:	230a      	movs	r3, #10
 8006a30:	18fb      	adds	r3, r7, r3
 8006a32:	8819      	ldrh	r1, [r3, #0]
 8006a34:	68f8      	ldr	r0, [r7, #12]
 8006a36:	2300      	movs	r3, #0
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	0023      	movs	r3, r4
 8006a3c:	f000 fbe8 	bl	8007210 <I2C_TransferConfig>
 8006a40:	e012      	b.n	8006a68 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a50:	b2da      	uxtb	r2, r3
 8006a52:	2380      	movs	r3, #128	@ 0x80
 8006a54:	049c      	lsls	r4, r3, #18
 8006a56:	230a      	movs	r3, #10
 8006a58:	18fb      	adds	r3, r7, r3
 8006a5a:	8819      	ldrh	r1, [r3, #0]
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	0023      	movs	r3, r4
 8006a64:	f000 fbd4 	bl	8007210 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d198      	bne.n	80069a4 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	0018      	movs	r0, r3
 8006a7a:	f000 f9ef 	bl	8006e5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a7e:	1e03      	subs	r3, r0, #0
 8006a80:	d001      	beq.n	8006a86 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e01a      	b.n	8006abc <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	490b      	ldr	r1, [pc, #44]	@ (8006ac8 <HAL_I2C_Master_Transmit+0x250>)
 8006a9a:	400a      	ands	r2, r1
 8006a9c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2241      	movs	r2, #65	@ 0x41
 8006aa2:	2120      	movs	r1, #32
 8006aa4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2242      	movs	r2, #66	@ 0x42
 8006aaa:	2100      	movs	r1, #0
 8006aac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2240      	movs	r2, #64	@ 0x40
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	e000      	b.n	8006abc <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8006aba:	2302      	movs	r3, #2
  }
}
 8006abc:	0018      	movs	r0, r3
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	b007      	add	sp, #28
 8006ac2:	bd90      	pop	{r4, r7, pc}
 8006ac4:	80002000 	.word	0x80002000
 8006ac8:	fe00e800 	.word	0xfe00e800

08006acc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006acc:	b590      	push	{r4, r7, lr}
 8006ace:	b089      	sub	sp, #36	@ 0x24
 8006ad0:	af02      	add	r7, sp, #8
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	0008      	movs	r0, r1
 8006ad6:	607a      	str	r2, [r7, #4]
 8006ad8:	0019      	movs	r1, r3
 8006ada:	230a      	movs	r3, #10
 8006adc:	18fb      	adds	r3, r7, r3
 8006ade:	1c02      	adds	r2, r0, #0
 8006ae0:	801a      	strh	r2, [r3, #0]
 8006ae2:	2308      	movs	r3, #8
 8006ae4:	18fb      	adds	r3, r7, r3
 8006ae6:	1c0a      	adds	r2, r1, #0
 8006ae8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2241      	movs	r2, #65	@ 0x41
 8006aee:	5c9b      	ldrb	r3, [r3, r2]
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b20      	cmp	r3, #32
 8006af4:	d000      	beq.n	8006af8 <HAL_I2C_Master_Receive+0x2c>
 8006af6:	e0e8      	b.n	8006cca <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2240      	movs	r2, #64	@ 0x40
 8006afc:	5c9b      	ldrb	r3, [r3, r2]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d101      	bne.n	8006b06 <HAL_I2C_Master_Receive+0x3a>
 8006b02:	2302      	movs	r3, #2
 8006b04:	e0e2      	b.n	8006ccc <HAL_I2C_Master_Receive+0x200>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2240      	movs	r2, #64	@ 0x40
 8006b0a:	2101      	movs	r1, #1
 8006b0c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b0e:	f7ff fb45 	bl	800619c <HAL_GetTick>
 8006b12:	0003      	movs	r3, r0
 8006b14:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b16:	2380      	movs	r3, #128	@ 0x80
 8006b18:	0219      	lsls	r1, r3, #8
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	2319      	movs	r3, #25
 8006b22:	2201      	movs	r2, #1
 8006b24:	f000 f8fc 	bl	8006d20 <I2C_WaitOnFlagUntilTimeout>
 8006b28:	1e03      	subs	r3, r0, #0
 8006b2a:	d001      	beq.n	8006b30 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e0cd      	b.n	8006ccc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2241      	movs	r2, #65	@ 0x41
 8006b34:	2122      	movs	r1, #34	@ 0x22
 8006b36:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2242      	movs	r2, #66	@ 0x42
 8006b3c:	2110      	movs	r1, #16
 8006b3e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2208      	movs	r2, #8
 8006b50:	18ba      	adds	r2, r7, r2
 8006b52:	8812      	ldrh	r2, [r2, #0]
 8006b54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	2bff      	cmp	r3, #255	@ 0xff
 8006b64:	d911      	bls.n	8006b8a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	22ff      	movs	r2, #255	@ 0xff
 8006b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	2380      	movs	r3, #128	@ 0x80
 8006b74:	045c      	lsls	r4, r3, #17
 8006b76:	230a      	movs	r3, #10
 8006b78:	18fb      	adds	r3, r7, r3
 8006b7a:	8819      	ldrh	r1, [r3, #0]
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	4b55      	ldr	r3, [pc, #340]	@ (8006cd4 <HAL_I2C_Master_Receive+0x208>)
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	0023      	movs	r3, r4
 8006b84:	f000 fb44 	bl	8007210 <I2C_TransferConfig>
 8006b88:	e076      	b.n	8006c78 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	2380      	movs	r3, #128	@ 0x80
 8006b9c:	049c      	lsls	r4, r3, #18
 8006b9e:	230a      	movs	r3, #10
 8006ba0:	18fb      	adds	r3, r7, r3
 8006ba2:	8819      	ldrh	r1, [r3, #0]
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	4b4b      	ldr	r3, [pc, #300]	@ (8006cd4 <HAL_I2C_Master_Receive+0x208>)
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	0023      	movs	r3, r4
 8006bac:	f000 fb30 	bl	8007210 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006bb0:	e062      	b.n	8006c78 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	0018      	movs	r0, r3
 8006bba:	f000 f993 	bl	8006ee4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006bbe:	1e03      	subs	r3, r0, #0
 8006bc0:	d001      	beq.n	8006bc6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e082      	b.n	8006ccc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd0:	b2d2      	uxtb	r2, r2
 8006bd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006be2:	3b01      	subs	r3, #1
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d03a      	beq.n	8006c78 <HAL_I2C_Master_Receive+0x1ac>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d136      	bne.n	8006c78 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	9300      	str	r3, [sp, #0]
 8006c12:	0013      	movs	r3, r2
 8006c14:	2200      	movs	r2, #0
 8006c16:	2180      	movs	r1, #128	@ 0x80
 8006c18:	f000 f882 	bl	8006d20 <I2C_WaitOnFlagUntilTimeout>
 8006c1c:	1e03      	subs	r3, r0, #0
 8006c1e:	d001      	beq.n	8006c24 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e053      	b.n	8006ccc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	2bff      	cmp	r3, #255	@ 0xff
 8006c2c:	d911      	bls.n	8006c52 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	22ff      	movs	r2, #255	@ 0xff
 8006c32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	2380      	movs	r3, #128	@ 0x80
 8006c3c:	045c      	lsls	r4, r3, #17
 8006c3e:	230a      	movs	r3, #10
 8006c40:	18fb      	adds	r3, r7, r3
 8006c42:	8819      	ldrh	r1, [r3, #0]
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	2300      	movs	r3, #0
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	0023      	movs	r3, r4
 8006c4c:	f000 fae0 	bl	8007210 <I2C_TransferConfig>
 8006c50:	e012      	b.n	8006c78 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	2380      	movs	r3, #128	@ 0x80
 8006c64:	049c      	lsls	r4, r3, #18
 8006c66:	230a      	movs	r3, #10
 8006c68:	18fb      	adds	r3, r7, r3
 8006c6a:	8819      	ldrh	r1, [r3, #0]
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	2300      	movs	r3, #0
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	0023      	movs	r3, r4
 8006c74:	f000 facc 	bl	8007210 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d197      	bne.n	8006bb2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	0018      	movs	r0, r3
 8006c8a:	f000 f8e7 	bl	8006e5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c8e:	1e03      	subs	r3, r0, #0
 8006c90:	d001      	beq.n	8006c96 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e01a      	b.n	8006ccc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	490b      	ldr	r1, [pc, #44]	@ (8006cd8 <HAL_I2C_Master_Receive+0x20c>)
 8006caa:	400a      	ands	r2, r1
 8006cac:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2241      	movs	r2, #65	@ 0x41
 8006cb2:	2120      	movs	r1, #32
 8006cb4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2242      	movs	r2, #66	@ 0x42
 8006cba:	2100      	movs	r1, #0
 8006cbc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2240      	movs	r2, #64	@ 0x40
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	e000      	b.n	8006ccc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8006cca:	2302      	movs	r3, #2
  }
}
 8006ccc:	0018      	movs	r0, r3
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	b007      	add	sp, #28
 8006cd2:	bd90      	pop	{r4, r7, pc}
 8006cd4:	80002400 	.word	0x80002400
 8006cd8:	fe00e800 	.word	0xfe00e800

08006cdc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	2202      	movs	r2, #2
 8006cec:	4013      	ands	r3, r2
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d103      	bne.n	8006cfa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	699b      	ldr	r3, [r3, #24]
 8006d00:	2201      	movs	r2, #1
 8006d02:	4013      	ands	r3, r2
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d007      	beq.n	8006d18 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	699a      	ldr	r2, [r3, #24]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2101      	movs	r1, #1
 8006d14:	430a      	orrs	r2, r1
 8006d16:	619a      	str	r2, [r3, #24]
  }
}
 8006d18:	46c0      	nop			@ (mov r8, r8)
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	b002      	add	sp, #8
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	603b      	str	r3, [r7, #0]
 8006d2c:	1dfb      	adds	r3, r7, #7
 8006d2e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d30:	e03a      	b.n	8006da8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d32:	69ba      	ldr	r2, [r7, #24]
 8006d34:	6839      	ldr	r1, [r7, #0]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	0018      	movs	r0, r3
 8006d3a:	f000 f971 	bl	8007020 <I2C_IsErrorOccurred>
 8006d3e:	1e03      	subs	r3, r0, #0
 8006d40:	d001      	beq.n	8006d46 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e040      	b.n	8006dc8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	d02d      	beq.n	8006da8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d4c:	f7ff fa26 	bl	800619c <HAL_GetTick>
 8006d50:	0002      	movs	r2, r0
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d302      	bcc.n	8006d62 <I2C_WaitOnFlagUntilTimeout+0x42>
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d122      	bne.n	8006da8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	425a      	negs	r2, r3
 8006d72:	4153      	adcs	r3, r2
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	001a      	movs	r2, r3
 8006d78:	1dfb      	adds	r3, r7, #7
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d113      	bne.n	8006da8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d84:	2220      	movs	r2, #32
 8006d86:	431a      	orrs	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2241      	movs	r2, #65	@ 0x41
 8006d90:	2120      	movs	r1, #32
 8006d92:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2242      	movs	r2, #66	@ 0x42
 8006d98:	2100      	movs	r1, #0
 8006d9a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2240      	movs	r2, #64	@ 0x40
 8006da0:	2100      	movs	r1, #0
 8006da2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e00f      	b.n	8006dc8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	4013      	ands	r3, r2
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	425a      	negs	r2, r3
 8006db8:	4153      	adcs	r3, r2
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	001a      	movs	r2, r3
 8006dbe:	1dfb      	adds	r3, r7, #7
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d0b5      	beq.n	8006d32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	0018      	movs	r0, r3
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	b004      	add	sp, #16
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ddc:	e032      	b.n	8006e44 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	68b9      	ldr	r1, [r7, #8]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	0018      	movs	r0, r3
 8006de6:	f000 f91b 	bl	8007020 <I2C_IsErrorOccurred>
 8006dea:	1e03      	subs	r3, r0, #0
 8006dec:	d001      	beq.n	8006df2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e030      	b.n	8006e54 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	3301      	adds	r3, #1
 8006df6:	d025      	beq.n	8006e44 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006df8:	f7ff f9d0 	bl	800619c <HAL_GetTick>
 8006dfc:	0002      	movs	r2, r0
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d302      	bcc.n	8006e0e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d11a      	bne.n	8006e44 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	2202      	movs	r2, #2
 8006e16:	4013      	ands	r3, r2
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d013      	beq.n	8006e44 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e20:	2220      	movs	r2, #32
 8006e22:	431a      	orrs	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2241      	movs	r2, #65	@ 0x41
 8006e2c:	2120      	movs	r1, #32
 8006e2e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2242      	movs	r2, #66	@ 0x42
 8006e34:	2100      	movs	r1, #0
 8006e36:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2240      	movs	r2, #64	@ 0x40
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e007      	b.n	8006e54 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d1c5      	bne.n	8006dde <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	0018      	movs	r0, r3
 8006e56:	46bd      	mov	sp, r7
 8006e58:	b004      	add	sp, #16
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e68:	e02f      	b.n	8006eca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	68b9      	ldr	r1, [r7, #8]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	0018      	movs	r0, r3
 8006e72:	f000 f8d5 	bl	8007020 <I2C_IsErrorOccurred>
 8006e76:	1e03      	subs	r3, r0, #0
 8006e78:	d001      	beq.n	8006e7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e02d      	b.n	8006eda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e7e:	f7ff f98d 	bl	800619c <HAL_GetTick>
 8006e82:	0002      	movs	r2, r0
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d302      	bcc.n	8006e94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d11a      	bne.n	8006eca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	2b20      	cmp	r3, #32
 8006ea0:	d013      	beq.n	8006eca <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	431a      	orrs	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2241      	movs	r2, #65	@ 0x41
 8006eb2:	2120      	movs	r1, #32
 8006eb4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2242      	movs	r2, #66	@ 0x42
 8006eba:	2100      	movs	r1, #0
 8006ebc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2240      	movs	r2, #64	@ 0x40
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e007      	b.n	8006eda <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	2220      	movs	r2, #32
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	2b20      	cmp	r3, #32
 8006ed6:	d1c8      	bne.n	8006e6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	0018      	movs	r0, r3
 8006edc:	46bd      	mov	sp, r7
 8006ede:	b004      	add	sp, #16
 8006ee0:	bd80      	pop	{r7, pc}
	...

08006ee4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ef0:	2317      	movs	r3, #23
 8006ef2:	18fb      	adds	r3, r7, r3
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006ef8:	e07b      	b.n	8006ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	68b9      	ldr	r1, [r7, #8]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	0018      	movs	r0, r3
 8006f02:	f000 f88d 	bl	8007020 <I2C_IsErrorOccurred>
 8006f06:	1e03      	subs	r3, r0, #0
 8006f08:	d003      	beq.n	8006f12 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8006f0a:	2317      	movs	r3, #23
 8006f0c:	18fb      	adds	r3, r7, r3
 8006f0e:	2201      	movs	r2, #1
 8006f10:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	2220      	movs	r2, #32
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	2b20      	cmp	r3, #32
 8006f1e:	d140      	bne.n	8006fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8006f20:	2117      	movs	r1, #23
 8006f22:	187b      	adds	r3, r7, r1
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d13b      	bne.n	8006fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	2204      	movs	r2, #4
 8006f32:	4013      	ands	r3, r2
 8006f34:	2b04      	cmp	r3, #4
 8006f36:	d106      	bne.n	8006f46 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8006f40:	187b      	adds	r3, r7, r1
 8006f42:	2200      	movs	r2, #0
 8006f44:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	2210      	movs	r2, #16
 8006f4e:	4013      	ands	r3, r2
 8006f50:	2b10      	cmp	r3, #16
 8006f52:	d123      	bne.n	8006f9c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2210      	movs	r2, #16
 8006f5a:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2204      	movs	r2, #4
 8006f60:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2220      	movs	r2, #32
 8006f68:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4929      	ldr	r1, [pc, #164]	@ (800701c <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8006f76:	400a      	ands	r2, r1
 8006f78:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2241      	movs	r2, #65	@ 0x41
 8006f7e:	2120      	movs	r1, #32
 8006f80:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2242      	movs	r2, #66	@ 0x42
 8006f86:	2100      	movs	r1, #0
 8006f88:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2240      	movs	r2, #64	@ 0x40
 8006f8e:	2100      	movs	r1, #0
 8006f90:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8006f92:	2317      	movs	r3, #23
 8006f94:	18fb      	adds	r3, r7, r3
 8006f96:	2201      	movs	r2, #1
 8006f98:	701a      	strb	r2, [r3, #0]
 8006f9a:	e002      	b.n	8006fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8006fa2:	f7ff f8fb 	bl	800619c <HAL_GetTick>
 8006fa6:	0002      	movs	r2, r0
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d302      	bcc.n	8006fb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d11c      	bne.n	8006ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8006fb8:	2017      	movs	r0, #23
 8006fba:	183b      	adds	r3, r7, r0
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d117      	bne.n	8006ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	2204      	movs	r2, #4
 8006fca:	4013      	ands	r3, r2
 8006fcc:	2b04      	cmp	r3, #4
 8006fce:	d010      	beq.n	8006ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2241      	movs	r2, #65	@ 0x41
 8006fe0:	2120      	movs	r1, #32
 8006fe2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2240      	movs	r2, #64	@ 0x40
 8006fe8:	2100      	movs	r1, #0
 8006fea:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8006fec:	183b      	adds	r3, r7, r0
 8006fee:	2201      	movs	r2, #1
 8006ff0:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	2204      	movs	r2, #4
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	2b04      	cmp	r3, #4
 8006ffe:	d005      	beq.n	800700c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8007000:	2317      	movs	r3, #23
 8007002:	18fb      	adds	r3, r7, r3
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d100      	bne.n	800700c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800700a:	e776      	b.n	8006efa <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 800700c:	2317      	movs	r3, #23
 800700e:	18fb      	adds	r3, r7, r3
 8007010:	781b      	ldrb	r3, [r3, #0]
}
 8007012:	0018      	movs	r0, r3
 8007014:	46bd      	mov	sp, r7
 8007016:	b006      	add	sp, #24
 8007018:	bd80      	pop	{r7, pc}
 800701a:	46c0      	nop			@ (mov r8, r8)
 800701c:	fe00e800 	.word	0xfe00e800

08007020 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b08a      	sub	sp, #40	@ 0x28
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800702c:	2327      	movs	r3, #39	@ 0x27
 800702e:	18fb      	adds	r3, r7, r3
 8007030:	2200      	movs	r2, #0
 8007032:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800703c:	2300      	movs	r3, #0
 800703e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	2210      	movs	r2, #16
 8007048:	4013      	ands	r3, r2
 800704a:	d100      	bne.n	800704e <I2C_IsErrorOccurred+0x2e>
 800704c:	e079      	b.n	8007142 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2210      	movs	r2, #16
 8007054:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007056:	e057      	b.n	8007108 <I2C_IsErrorOccurred+0xe8>
 8007058:	2227      	movs	r2, #39	@ 0x27
 800705a:	18bb      	adds	r3, r7, r2
 800705c:	18ba      	adds	r2, r7, r2
 800705e:	7812      	ldrb	r2, [r2, #0]
 8007060:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	3301      	adds	r3, #1
 8007066:	d04f      	beq.n	8007108 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007068:	f7ff f898 	bl	800619c <HAL_GetTick>
 800706c:	0002      	movs	r2, r0
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	429a      	cmp	r2, r3
 8007076:	d302      	bcc.n	800707e <I2C_IsErrorOccurred+0x5e>
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d144      	bne.n	8007108 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	2380      	movs	r3, #128	@ 0x80
 8007086:	01db      	lsls	r3, r3, #7
 8007088:	4013      	ands	r3, r2
 800708a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800708c:	2013      	movs	r0, #19
 800708e:	183b      	adds	r3, r7, r0
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	2142      	movs	r1, #66	@ 0x42
 8007094:	5c52      	ldrb	r2, [r2, r1]
 8007096:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	699a      	ldr	r2, [r3, #24]
 800709e:	2380      	movs	r3, #128	@ 0x80
 80070a0:	021b      	lsls	r3, r3, #8
 80070a2:	401a      	ands	r2, r3
 80070a4:	2380      	movs	r3, #128	@ 0x80
 80070a6:	021b      	lsls	r3, r3, #8
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d126      	bne.n	80070fa <I2C_IsErrorOccurred+0xda>
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	2380      	movs	r3, #128	@ 0x80
 80070b0:	01db      	lsls	r3, r3, #7
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d021      	beq.n	80070fa <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80070b6:	183b      	adds	r3, r7, r0
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	2b20      	cmp	r3, #32
 80070bc:	d01d      	beq.n	80070fa <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2180      	movs	r1, #128	@ 0x80
 80070ca:	01c9      	lsls	r1, r1, #7
 80070cc:	430a      	orrs	r2, r1
 80070ce:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80070d0:	f7ff f864 	bl	800619c <HAL_GetTick>
 80070d4:	0003      	movs	r3, r0
 80070d6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070d8:	e00f      	b.n	80070fa <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80070da:	f7ff f85f 	bl	800619c <HAL_GetTick>
 80070de:	0002      	movs	r2, r0
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	2b19      	cmp	r3, #25
 80070e6:	d908      	bls.n	80070fa <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	2220      	movs	r2, #32
 80070ec:	4313      	orrs	r3, r2
 80070ee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80070f0:	2327      	movs	r3, #39	@ 0x27
 80070f2:	18fb      	adds	r3, r7, r3
 80070f4:	2201      	movs	r2, #1
 80070f6:	701a      	strb	r2, [r3, #0]

              break;
 80070f8:	e006      	b.n	8007108 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	2220      	movs	r2, #32
 8007102:	4013      	ands	r3, r2
 8007104:	2b20      	cmp	r3, #32
 8007106:	d1e8      	bne.n	80070da <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	2220      	movs	r2, #32
 8007110:	4013      	ands	r3, r2
 8007112:	2b20      	cmp	r3, #32
 8007114:	d004      	beq.n	8007120 <I2C_IsErrorOccurred+0x100>
 8007116:	2327      	movs	r3, #39	@ 0x27
 8007118:	18fb      	adds	r3, r7, r3
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d09b      	beq.n	8007058 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007120:	2327      	movs	r3, #39	@ 0x27
 8007122:	18fb      	adds	r3, r7, r3
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d103      	bne.n	8007132 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2220      	movs	r2, #32
 8007130:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007132:	6a3b      	ldr	r3, [r7, #32]
 8007134:	2204      	movs	r2, #4
 8007136:	4313      	orrs	r3, r2
 8007138:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800713a:	2327      	movs	r3, #39	@ 0x27
 800713c:	18fb      	adds	r3, r7, r3
 800713e:	2201      	movs	r2, #1
 8007140:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800714a:	69ba      	ldr	r2, [r7, #24]
 800714c:	2380      	movs	r3, #128	@ 0x80
 800714e:	005b      	lsls	r3, r3, #1
 8007150:	4013      	ands	r3, r2
 8007152:	d00c      	beq.n	800716e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	2201      	movs	r2, #1
 8007158:	4313      	orrs	r3, r2
 800715a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2280      	movs	r2, #128	@ 0x80
 8007162:	0052      	lsls	r2, r2, #1
 8007164:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007166:	2327      	movs	r3, #39	@ 0x27
 8007168:	18fb      	adds	r3, r7, r3
 800716a:	2201      	movs	r2, #1
 800716c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800716e:	69ba      	ldr	r2, [r7, #24]
 8007170:	2380      	movs	r3, #128	@ 0x80
 8007172:	00db      	lsls	r3, r3, #3
 8007174:	4013      	ands	r3, r2
 8007176:	d00c      	beq.n	8007192 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	2208      	movs	r2, #8
 800717c:	4313      	orrs	r3, r2
 800717e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2280      	movs	r2, #128	@ 0x80
 8007186:	00d2      	lsls	r2, r2, #3
 8007188:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800718a:	2327      	movs	r3, #39	@ 0x27
 800718c:	18fb      	adds	r3, r7, r3
 800718e:	2201      	movs	r2, #1
 8007190:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007192:	69ba      	ldr	r2, [r7, #24]
 8007194:	2380      	movs	r3, #128	@ 0x80
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4013      	ands	r3, r2
 800719a:	d00c      	beq.n	80071b6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	2202      	movs	r2, #2
 80071a0:	4313      	orrs	r3, r2
 80071a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2280      	movs	r2, #128	@ 0x80
 80071aa:	0092      	lsls	r2, r2, #2
 80071ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80071ae:	2327      	movs	r3, #39	@ 0x27
 80071b0:	18fb      	adds	r3, r7, r3
 80071b2:	2201      	movs	r2, #1
 80071b4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80071b6:	2327      	movs	r3, #39	@ 0x27
 80071b8:	18fb      	adds	r3, r7, r3
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d01d      	beq.n	80071fc <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	0018      	movs	r0, r3
 80071c4:	f7ff fd8a 	bl	8006cdc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	490e      	ldr	r1, [pc, #56]	@ (800720c <I2C_IsErrorOccurred+0x1ec>)
 80071d4:	400a      	ands	r2, r1
 80071d6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	431a      	orrs	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2241      	movs	r2, #65	@ 0x41
 80071e8:	2120      	movs	r1, #32
 80071ea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2242      	movs	r2, #66	@ 0x42
 80071f0:	2100      	movs	r1, #0
 80071f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2240      	movs	r2, #64	@ 0x40
 80071f8:	2100      	movs	r1, #0
 80071fa:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80071fc:	2327      	movs	r3, #39	@ 0x27
 80071fe:	18fb      	adds	r3, r7, r3
 8007200:	781b      	ldrb	r3, [r3, #0]
}
 8007202:	0018      	movs	r0, r3
 8007204:	46bd      	mov	sp, r7
 8007206:	b00a      	add	sp, #40	@ 0x28
 8007208:	bd80      	pop	{r7, pc}
 800720a:	46c0      	nop			@ (mov r8, r8)
 800720c:	fe00e800 	.word	0xfe00e800

08007210 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007210:	b590      	push	{r4, r7, lr}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	0008      	movs	r0, r1
 800721a:	0011      	movs	r1, r2
 800721c:	607b      	str	r3, [r7, #4]
 800721e:	240a      	movs	r4, #10
 8007220:	193b      	adds	r3, r7, r4
 8007222:	1c02      	adds	r2, r0, #0
 8007224:	801a      	strh	r2, [r3, #0]
 8007226:	2009      	movs	r0, #9
 8007228:	183b      	adds	r3, r7, r0
 800722a:	1c0a      	adds	r2, r1, #0
 800722c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800722e:	193b      	adds	r3, r7, r4
 8007230:	881b      	ldrh	r3, [r3, #0]
 8007232:	059b      	lsls	r3, r3, #22
 8007234:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007236:	183b      	adds	r3, r7, r0
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	0419      	lsls	r1, r3, #16
 800723c:	23ff      	movs	r3, #255	@ 0xff
 800723e:	041b      	lsls	r3, r3, #16
 8007240:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007242:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724a:	4313      	orrs	r3, r2
 800724c:	005b      	lsls	r3, r3, #1
 800724e:	085b      	lsrs	r3, r3, #1
 8007250:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800725a:	0d51      	lsrs	r1, r2, #21
 800725c:	2280      	movs	r2, #128	@ 0x80
 800725e:	00d2      	lsls	r2, r2, #3
 8007260:	400a      	ands	r2, r1
 8007262:	4907      	ldr	r1, [pc, #28]	@ (8007280 <I2C_TransferConfig+0x70>)
 8007264:	430a      	orrs	r2, r1
 8007266:	43d2      	mvns	r2, r2
 8007268:	401a      	ands	r2, r3
 800726a:	0011      	movs	r1, r2
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	430a      	orrs	r2, r1
 8007274:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007276:	46c0      	nop			@ (mov r8, r8)
 8007278:	46bd      	mov	sp, r7
 800727a:	b007      	add	sp, #28
 800727c:	bd90      	pop	{r4, r7, pc}
 800727e:	46c0      	nop			@ (mov r8, r8)
 8007280:	03ff63ff 	.word	0x03ff63ff

08007284 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2241      	movs	r2, #65	@ 0x41
 8007292:	5c9b      	ldrb	r3, [r3, r2]
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b20      	cmp	r3, #32
 8007298:	d138      	bne.n	800730c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2240      	movs	r2, #64	@ 0x40
 800729e:	5c9b      	ldrb	r3, [r3, r2]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d101      	bne.n	80072a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80072a4:	2302      	movs	r3, #2
 80072a6:	e032      	b.n	800730e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2240      	movs	r2, #64	@ 0x40
 80072ac:	2101      	movs	r1, #1
 80072ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2241      	movs	r2, #65	@ 0x41
 80072b4:	2124      	movs	r1, #36	@ 0x24
 80072b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2101      	movs	r1, #1
 80072c4:	438a      	bics	r2, r1
 80072c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4911      	ldr	r1, [pc, #68]	@ (8007318 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80072d4:	400a      	ands	r2, r1
 80072d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6819      	ldr	r1, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	430a      	orrs	r2, r1
 80072e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2101      	movs	r1, #1
 80072f4:	430a      	orrs	r2, r1
 80072f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2241      	movs	r2, #65	@ 0x41
 80072fc:	2120      	movs	r1, #32
 80072fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2240      	movs	r2, #64	@ 0x40
 8007304:	2100      	movs	r1, #0
 8007306:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	e000      	b.n	800730e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800730c:	2302      	movs	r3, #2
  }
}
 800730e:	0018      	movs	r0, r3
 8007310:	46bd      	mov	sp, r7
 8007312:	b002      	add	sp, #8
 8007314:	bd80      	pop	{r7, pc}
 8007316:	46c0      	nop			@ (mov r8, r8)
 8007318:	ffffefff 	.word	0xffffefff

0800731c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2241      	movs	r2, #65	@ 0x41
 800732a:	5c9b      	ldrb	r3, [r3, r2]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b20      	cmp	r3, #32
 8007330:	d139      	bne.n	80073a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2240      	movs	r2, #64	@ 0x40
 8007336:	5c9b      	ldrb	r3, [r3, r2]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d101      	bne.n	8007340 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800733c:	2302      	movs	r3, #2
 800733e:	e033      	b.n	80073a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2240      	movs	r2, #64	@ 0x40
 8007344:	2101      	movs	r1, #1
 8007346:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2241      	movs	r2, #65	@ 0x41
 800734c:	2124      	movs	r1, #36	@ 0x24
 800734e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2101      	movs	r1, #1
 800735c:	438a      	bics	r2, r1
 800735e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4a11      	ldr	r2, [pc, #68]	@ (80073b0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800736c:	4013      	ands	r3, r2
 800736e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	021b      	lsls	r3, r3, #8
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	4313      	orrs	r3, r2
 8007378:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2101      	movs	r1, #1
 800738e:	430a      	orrs	r2, r1
 8007390:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2241      	movs	r2, #65	@ 0x41
 8007396:	2120      	movs	r1, #32
 8007398:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2240      	movs	r2, #64	@ 0x40
 800739e:	2100      	movs	r1, #0
 80073a0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80073a2:	2300      	movs	r3, #0
 80073a4:	e000      	b.n	80073a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80073a6:	2302      	movs	r3, #2
  }
}
 80073a8:	0018      	movs	r0, r3
 80073aa:	46bd      	mov	sp, r7
 80073ac:	b004      	add	sp, #16
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	fffff0ff 	.word	0xfffff0ff

080073b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80073bc:	4b19      	ldr	r3, [pc, #100]	@ (8007424 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a19      	ldr	r2, [pc, #100]	@ (8007428 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80073c2:	4013      	ands	r3, r2
 80073c4:	0019      	movs	r1, r3
 80073c6:	4b17      	ldr	r3, [pc, #92]	@ (8007424 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	2380      	movs	r3, #128	@ 0x80
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d11f      	bne.n	8007418 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80073d8:	4b14      	ldr	r3, [pc, #80]	@ (800742c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	0013      	movs	r3, r2
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	189b      	adds	r3, r3, r2
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	4912      	ldr	r1, [pc, #72]	@ (8007430 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80073e6:	0018      	movs	r0, r3
 80073e8:	f7f8 fea0 	bl	800012c <__udivsi3>
 80073ec:	0003      	movs	r3, r0
 80073ee:	3301      	adds	r3, #1
 80073f0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80073f2:	e008      	b.n	8007406 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	3b01      	subs	r3, #1
 80073fe:	60fb      	str	r3, [r7, #12]
 8007400:	e001      	b.n	8007406 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e009      	b.n	800741a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007406:	4b07      	ldr	r3, [pc, #28]	@ (8007424 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007408:	695a      	ldr	r2, [r3, #20]
 800740a:	2380      	movs	r3, #128	@ 0x80
 800740c:	00db      	lsls	r3, r3, #3
 800740e:	401a      	ands	r2, r3
 8007410:	2380      	movs	r3, #128	@ 0x80
 8007412:	00db      	lsls	r3, r3, #3
 8007414:	429a      	cmp	r2, r3
 8007416:	d0ed      	beq.n	80073f4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	0018      	movs	r0, r3
 800741c:	46bd      	mov	sp, r7
 800741e:	b004      	add	sp, #16
 8007420:	bd80      	pop	{r7, pc}
 8007422:	46c0      	nop			@ (mov r8, r8)
 8007424:	40007000 	.word	0x40007000
 8007428:	fffff9ff 	.word	0xfffff9ff
 800742c:	20000e84 	.word	0x20000e84
 8007430:	000f4240 	.word	0x000f4240

08007434 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007438:	4b03      	ldr	r3, [pc, #12]	@ (8007448 <LL_RCC_GetAPB1Prescaler+0x14>)
 800743a:	689a      	ldr	r2, [r3, #8]
 800743c:	23e0      	movs	r3, #224	@ 0xe0
 800743e:	01db      	lsls	r3, r3, #7
 8007440:	4013      	ands	r3, r2
}
 8007442:	0018      	movs	r0, r3
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	40021000 	.word	0x40021000

0800744c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b088      	sub	sp, #32
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d102      	bne.n	8007460 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	f000 fb50 	bl	8007b00 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2201      	movs	r2, #1
 8007466:	4013      	ands	r3, r2
 8007468:	d100      	bne.n	800746c <HAL_RCC_OscConfig+0x20>
 800746a:	e07c      	b.n	8007566 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800746c:	4bc3      	ldr	r3, [pc, #780]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	2238      	movs	r2, #56	@ 0x38
 8007472:	4013      	ands	r3, r2
 8007474:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007476:	4bc1      	ldr	r3, [pc, #772]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	2203      	movs	r2, #3
 800747c:	4013      	ands	r3, r2
 800747e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	2b10      	cmp	r3, #16
 8007484:	d102      	bne.n	800748c <HAL_RCC_OscConfig+0x40>
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	2b03      	cmp	r3, #3
 800748a:	d002      	beq.n	8007492 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	2b08      	cmp	r3, #8
 8007490:	d10b      	bne.n	80074aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007492:	4bba      	ldr	r3, [pc, #744]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	2380      	movs	r3, #128	@ 0x80
 8007498:	029b      	lsls	r3, r3, #10
 800749a:	4013      	ands	r3, r2
 800749c:	d062      	beq.n	8007564 <HAL_RCC_OscConfig+0x118>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d15e      	bne.n	8007564 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e32a      	b.n	8007b00 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	2380      	movs	r3, #128	@ 0x80
 80074b0:	025b      	lsls	r3, r3, #9
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d107      	bne.n	80074c6 <HAL_RCC_OscConfig+0x7a>
 80074b6:	4bb1      	ldr	r3, [pc, #708]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	4bb0      	ldr	r3, [pc, #704]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 80074bc:	2180      	movs	r1, #128	@ 0x80
 80074be:	0249      	lsls	r1, r1, #9
 80074c0:	430a      	orrs	r2, r1
 80074c2:	601a      	str	r2, [r3, #0]
 80074c4:	e020      	b.n	8007508 <HAL_RCC_OscConfig+0xbc>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	23a0      	movs	r3, #160	@ 0xa0
 80074cc:	02db      	lsls	r3, r3, #11
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d10e      	bne.n	80074f0 <HAL_RCC_OscConfig+0xa4>
 80074d2:	4baa      	ldr	r3, [pc, #680]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	4ba9      	ldr	r3, [pc, #676]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 80074d8:	2180      	movs	r1, #128	@ 0x80
 80074da:	02c9      	lsls	r1, r1, #11
 80074dc:	430a      	orrs	r2, r1
 80074de:	601a      	str	r2, [r3, #0]
 80074e0:	4ba6      	ldr	r3, [pc, #664]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	4ba5      	ldr	r3, [pc, #660]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 80074e6:	2180      	movs	r1, #128	@ 0x80
 80074e8:	0249      	lsls	r1, r1, #9
 80074ea:	430a      	orrs	r2, r1
 80074ec:	601a      	str	r2, [r3, #0]
 80074ee:	e00b      	b.n	8007508 <HAL_RCC_OscConfig+0xbc>
 80074f0:	4ba2      	ldr	r3, [pc, #648]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	4ba1      	ldr	r3, [pc, #644]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 80074f6:	49a2      	ldr	r1, [pc, #648]	@ (8007780 <HAL_RCC_OscConfig+0x334>)
 80074f8:	400a      	ands	r2, r1
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	4b9f      	ldr	r3, [pc, #636]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	4b9e      	ldr	r3, [pc, #632]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 8007502:	49a0      	ldr	r1, [pc, #640]	@ (8007784 <HAL_RCC_OscConfig+0x338>)
 8007504:	400a      	ands	r2, r1
 8007506:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d014      	beq.n	800753a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007510:	f7fe fe44 	bl	800619c <HAL_GetTick>
 8007514:	0003      	movs	r3, r0
 8007516:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007518:	e008      	b.n	800752c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800751a:	f7fe fe3f 	bl	800619c <HAL_GetTick>
 800751e:	0002      	movs	r2, r0
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	2b64      	cmp	r3, #100	@ 0x64
 8007526:	d901      	bls.n	800752c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e2e9      	b.n	8007b00 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800752c:	4b93      	ldr	r3, [pc, #588]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	2380      	movs	r3, #128	@ 0x80
 8007532:	029b      	lsls	r3, r3, #10
 8007534:	4013      	ands	r3, r2
 8007536:	d0f0      	beq.n	800751a <HAL_RCC_OscConfig+0xce>
 8007538:	e015      	b.n	8007566 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800753a:	f7fe fe2f 	bl	800619c <HAL_GetTick>
 800753e:	0003      	movs	r3, r0
 8007540:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007542:	e008      	b.n	8007556 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007544:	f7fe fe2a 	bl	800619c <HAL_GetTick>
 8007548:	0002      	movs	r2, r0
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	2b64      	cmp	r3, #100	@ 0x64
 8007550:	d901      	bls.n	8007556 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e2d4      	b.n	8007b00 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007556:	4b89      	ldr	r3, [pc, #548]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	2380      	movs	r3, #128	@ 0x80
 800755c:	029b      	lsls	r3, r3, #10
 800755e:	4013      	ands	r3, r2
 8007560:	d1f0      	bne.n	8007544 <HAL_RCC_OscConfig+0xf8>
 8007562:	e000      	b.n	8007566 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007564:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2202      	movs	r2, #2
 800756c:	4013      	ands	r3, r2
 800756e:	d100      	bne.n	8007572 <HAL_RCC_OscConfig+0x126>
 8007570:	e099      	b.n	80076a6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007572:	4b82      	ldr	r3, [pc, #520]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	2238      	movs	r2, #56	@ 0x38
 8007578:	4013      	ands	r3, r2
 800757a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800757c:	4b7f      	ldr	r3, [pc, #508]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	2203      	movs	r2, #3
 8007582:	4013      	ands	r3, r2
 8007584:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	2b10      	cmp	r3, #16
 800758a:	d102      	bne.n	8007592 <HAL_RCC_OscConfig+0x146>
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	2b02      	cmp	r3, #2
 8007590:	d002      	beq.n	8007598 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d135      	bne.n	8007604 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007598:	4b78      	ldr	r3, [pc, #480]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	2380      	movs	r3, #128	@ 0x80
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	4013      	ands	r3, r2
 80075a2:	d005      	beq.n	80075b0 <HAL_RCC_OscConfig+0x164>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d101      	bne.n	80075b0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e2a7      	b.n	8007b00 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075b0:	4b72      	ldr	r3, [pc, #456]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	4a74      	ldr	r2, [pc, #464]	@ (8007788 <HAL_RCC_OscConfig+0x33c>)
 80075b6:	4013      	ands	r3, r2
 80075b8:	0019      	movs	r1, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	021a      	lsls	r2, r3, #8
 80075c0:	4b6e      	ldr	r3, [pc, #440]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 80075c2:	430a      	orrs	r2, r1
 80075c4:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d112      	bne.n	80075f2 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80075cc:	4b6b      	ldr	r3, [pc, #428]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a6e      	ldr	r2, [pc, #440]	@ (800778c <HAL_RCC_OscConfig+0x340>)
 80075d2:	4013      	ands	r3, r2
 80075d4:	0019      	movs	r1, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	691a      	ldr	r2, [r3, #16]
 80075da:	4b68      	ldr	r3, [pc, #416]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 80075dc:	430a      	orrs	r2, r1
 80075de:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80075e0:	4b66      	ldr	r3, [pc, #408]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	0adb      	lsrs	r3, r3, #11
 80075e6:	2207      	movs	r2, #7
 80075e8:	4013      	ands	r3, r2
 80075ea:	4a69      	ldr	r2, [pc, #420]	@ (8007790 <HAL_RCC_OscConfig+0x344>)
 80075ec:	40da      	lsrs	r2, r3
 80075ee:	4b69      	ldr	r3, [pc, #420]	@ (8007794 <HAL_RCC_OscConfig+0x348>)
 80075f0:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80075f2:	4b69      	ldr	r3, [pc, #420]	@ (8007798 <HAL_RCC_OscConfig+0x34c>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	0018      	movs	r0, r3
 80075f8:	f7fe fd74 	bl	80060e4 <HAL_InitTick>
 80075fc:	1e03      	subs	r3, r0, #0
 80075fe:	d051      	beq.n	80076a4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e27d      	b.n	8007b00 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d030      	beq.n	800766e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800760c:	4b5b      	ldr	r3, [pc, #364]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a5e      	ldr	r2, [pc, #376]	@ (800778c <HAL_RCC_OscConfig+0x340>)
 8007612:	4013      	ands	r3, r2
 8007614:	0019      	movs	r1, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	691a      	ldr	r2, [r3, #16]
 800761a:	4b58      	ldr	r3, [pc, #352]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 800761c:	430a      	orrs	r2, r1
 800761e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8007620:	4b56      	ldr	r3, [pc, #344]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	4b55      	ldr	r3, [pc, #340]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 8007626:	2180      	movs	r1, #128	@ 0x80
 8007628:	0049      	lsls	r1, r1, #1
 800762a:	430a      	orrs	r2, r1
 800762c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800762e:	f7fe fdb5 	bl	800619c <HAL_GetTick>
 8007632:	0003      	movs	r3, r0
 8007634:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007636:	e008      	b.n	800764a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007638:	f7fe fdb0 	bl	800619c <HAL_GetTick>
 800763c:	0002      	movs	r2, r0
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	2b02      	cmp	r3, #2
 8007644:	d901      	bls.n	800764a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e25a      	b.n	8007b00 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800764a:	4b4c      	ldr	r3, [pc, #304]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	2380      	movs	r3, #128	@ 0x80
 8007650:	00db      	lsls	r3, r3, #3
 8007652:	4013      	ands	r3, r2
 8007654:	d0f0      	beq.n	8007638 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007656:	4b49      	ldr	r3, [pc, #292]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	4a4b      	ldr	r2, [pc, #300]	@ (8007788 <HAL_RCC_OscConfig+0x33c>)
 800765c:	4013      	ands	r3, r2
 800765e:	0019      	movs	r1, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	695b      	ldr	r3, [r3, #20]
 8007664:	021a      	lsls	r2, r3, #8
 8007666:	4b45      	ldr	r3, [pc, #276]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 8007668:	430a      	orrs	r2, r1
 800766a:	605a      	str	r2, [r3, #4]
 800766c:	e01b      	b.n	80076a6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800766e:	4b43      	ldr	r3, [pc, #268]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	4b42      	ldr	r3, [pc, #264]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 8007674:	4949      	ldr	r1, [pc, #292]	@ (800779c <HAL_RCC_OscConfig+0x350>)
 8007676:	400a      	ands	r2, r1
 8007678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800767a:	f7fe fd8f 	bl	800619c <HAL_GetTick>
 800767e:	0003      	movs	r3, r0
 8007680:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007682:	e008      	b.n	8007696 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007684:	f7fe fd8a 	bl	800619c <HAL_GetTick>
 8007688:	0002      	movs	r2, r0
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	2b02      	cmp	r3, #2
 8007690:	d901      	bls.n	8007696 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e234      	b.n	8007b00 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007696:	4b39      	ldr	r3, [pc, #228]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	2380      	movs	r3, #128	@ 0x80
 800769c:	00db      	lsls	r3, r3, #3
 800769e:	4013      	ands	r3, r2
 80076a0:	d1f0      	bne.n	8007684 <HAL_RCC_OscConfig+0x238>
 80076a2:	e000      	b.n	80076a6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80076a4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2208      	movs	r2, #8
 80076ac:	4013      	ands	r3, r2
 80076ae:	d047      	beq.n	8007740 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80076b0:	4b32      	ldr	r3, [pc, #200]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	2238      	movs	r2, #56	@ 0x38
 80076b6:	4013      	ands	r3, r2
 80076b8:	2b18      	cmp	r3, #24
 80076ba:	d10a      	bne.n	80076d2 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80076bc:	4b2f      	ldr	r3, [pc, #188]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 80076be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076c0:	2202      	movs	r2, #2
 80076c2:	4013      	ands	r3, r2
 80076c4:	d03c      	beq.n	8007740 <HAL_RCC_OscConfig+0x2f4>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d138      	bne.n	8007740 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e216      	b.n	8007b00 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d019      	beq.n	800770e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80076da:	4b28      	ldr	r3, [pc, #160]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 80076dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80076de:	4b27      	ldr	r3, [pc, #156]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 80076e0:	2101      	movs	r1, #1
 80076e2:	430a      	orrs	r2, r1
 80076e4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e6:	f7fe fd59 	bl	800619c <HAL_GetTick>
 80076ea:	0003      	movs	r3, r0
 80076ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80076ee:	e008      	b.n	8007702 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076f0:	f7fe fd54 	bl	800619c <HAL_GetTick>
 80076f4:	0002      	movs	r2, r0
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d901      	bls.n	8007702 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e1fe      	b.n	8007b00 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007702:	4b1e      	ldr	r3, [pc, #120]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 8007704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007706:	2202      	movs	r2, #2
 8007708:	4013      	ands	r3, r2
 800770a:	d0f1      	beq.n	80076f0 <HAL_RCC_OscConfig+0x2a4>
 800770c:	e018      	b.n	8007740 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800770e:	4b1b      	ldr	r3, [pc, #108]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 8007710:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007712:	4b1a      	ldr	r3, [pc, #104]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 8007714:	2101      	movs	r1, #1
 8007716:	438a      	bics	r2, r1
 8007718:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800771a:	f7fe fd3f 	bl	800619c <HAL_GetTick>
 800771e:	0003      	movs	r3, r0
 8007720:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007722:	e008      	b.n	8007736 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007724:	f7fe fd3a 	bl	800619c <HAL_GetTick>
 8007728:	0002      	movs	r2, r0
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	2b02      	cmp	r3, #2
 8007730:	d901      	bls.n	8007736 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e1e4      	b.n	8007b00 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007736:	4b11      	ldr	r3, [pc, #68]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 8007738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800773a:	2202      	movs	r2, #2
 800773c:	4013      	ands	r3, r2
 800773e:	d1f1      	bne.n	8007724 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2204      	movs	r2, #4
 8007746:	4013      	ands	r3, r2
 8007748:	d100      	bne.n	800774c <HAL_RCC_OscConfig+0x300>
 800774a:	e0c7      	b.n	80078dc <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800774c:	231f      	movs	r3, #31
 800774e:	18fb      	adds	r3, r7, r3
 8007750:	2200      	movs	r2, #0
 8007752:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007754:	4b09      	ldr	r3, [pc, #36]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	2238      	movs	r2, #56	@ 0x38
 800775a:	4013      	ands	r3, r2
 800775c:	2b20      	cmp	r3, #32
 800775e:	d11f      	bne.n	80077a0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8007760:	4b06      	ldr	r3, [pc, #24]	@ (800777c <HAL_RCC_OscConfig+0x330>)
 8007762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007764:	2202      	movs	r2, #2
 8007766:	4013      	ands	r3, r2
 8007768:	d100      	bne.n	800776c <HAL_RCC_OscConfig+0x320>
 800776a:	e0b7      	b.n	80078dc <HAL_RCC_OscConfig+0x490>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d000      	beq.n	8007776 <HAL_RCC_OscConfig+0x32a>
 8007774:	e0b2      	b.n	80078dc <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e1c2      	b.n	8007b00 <HAL_RCC_OscConfig+0x6b4>
 800777a:	46c0      	nop			@ (mov r8, r8)
 800777c:	40021000 	.word	0x40021000
 8007780:	fffeffff 	.word	0xfffeffff
 8007784:	fffbffff 	.word	0xfffbffff
 8007788:	ffff80ff 	.word	0xffff80ff
 800778c:	ffffc7ff 	.word	0xffffc7ff
 8007790:	00f42400 	.word	0x00f42400
 8007794:	20000e84 	.word	0x20000e84
 8007798:	20000e88 	.word	0x20000e88
 800779c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80077a0:	4bb5      	ldr	r3, [pc, #724]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 80077a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077a4:	2380      	movs	r3, #128	@ 0x80
 80077a6:	055b      	lsls	r3, r3, #21
 80077a8:	4013      	ands	r3, r2
 80077aa:	d101      	bne.n	80077b0 <HAL_RCC_OscConfig+0x364>
 80077ac:	2301      	movs	r3, #1
 80077ae:	e000      	b.n	80077b2 <HAL_RCC_OscConfig+0x366>
 80077b0:	2300      	movs	r3, #0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d011      	beq.n	80077da <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80077b6:	4bb0      	ldr	r3, [pc, #704]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 80077b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077ba:	4baf      	ldr	r3, [pc, #700]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 80077bc:	2180      	movs	r1, #128	@ 0x80
 80077be:	0549      	lsls	r1, r1, #21
 80077c0:	430a      	orrs	r2, r1
 80077c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80077c4:	4bac      	ldr	r3, [pc, #688]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 80077c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077c8:	2380      	movs	r3, #128	@ 0x80
 80077ca:	055b      	lsls	r3, r3, #21
 80077cc:	4013      	ands	r3, r2
 80077ce:	60fb      	str	r3, [r7, #12]
 80077d0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80077d2:	231f      	movs	r3, #31
 80077d4:	18fb      	adds	r3, r7, r3
 80077d6:	2201      	movs	r2, #1
 80077d8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077da:	4ba8      	ldr	r3, [pc, #672]	@ (8007a7c <HAL_RCC_OscConfig+0x630>)
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	2380      	movs	r3, #128	@ 0x80
 80077e0:	005b      	lsls	r3, r3, #1
 80077e2:	4013      	ands	r3, r2
 80077e4:	d11a      	bne.n	800781c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077e6:	4ba5      	ldr	r3, [pc, #660]	@ (8007a7c <HAL_RCC_OscConfig+0x630>)
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	4ba4      	ldr	r3, [pc, #656]	@ (8007a7c <HAL_RCC_OscConfig+0x630>)
 80077ec:	2180      	movs	r1, #128	@ 0x80
 80077ee:	0049      	lsls	r1, r1, #1
 80077f0:	430a      	orrs	r2, r1
 80077f2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80077f4:	f7fe fcd2 	bl	800619c <HAL_GetTick>
 80077f8:	0003      	movs	r3, r0
 80077fa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077fc:	e008      	b.n	8007810 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077fe:	f7fe fccd 	bl	800619c <HAL_GetTick>
 8007802:	0002      	movs	r2, r0
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	2b02      	cmp	r3, #2
 800780a:	d901      	bls.n	8007810 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	e177      	b.n	8007b00 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007810:	4b9a      	ldr	r3, [pc, #616]	@ (8007a7c <HAL_RCC_OscConfig+0x630>)
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	2380      	movs	r3, #128	@ 0x80
 8007816:	005b      	lsls	r3, r3, #1
 8007818:	4013      	ands	r3, r2
 800781a:	d0f0      	beq.n	80077fe <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	2b01      	cmp	r3, #1
 8007822:	d106      	bne.n	8007832 <HAL_RCC_OscConfig+0x3e6>
 8007824:	4b94      	ldr	r3, [pc, #592]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 8007826:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007828:	4b93      	ldr	r3, [pc, #588]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 800782a:	2101      	movs	r1, #1
 800782c:	430a      	orrs	r2, r1
 800782e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007830:	e01c      	b.n	800786c <HAL_RCC_OscConfig+0x420>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	2b05      	cmp	r3, #5
 8007838:	d10c      	bne.n	8007854 <HAL_RCC_OscConfig+0x408>
 800783a:	4b8f      	ldr	r3, [pc, #572]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 800783c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800783e:	4b8e      	ldr	r3, [pc, #568]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 8007840:	2104      	movs	r1, #4
 8007842:	430a      	orrs	r2, r1
 8007844:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007846:	4b8c      	ldr	r3, [pc, #560]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 8007848:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800784a:	4b8b      	ldr	r3, [pc, #556]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 800784c:	2101      	movs	r1, #1
 800784e:	430a      	orrs	r2, r1
 8007850:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007852:	e00b      	b.n	800786c <HAL_RCC_OscConfig+0x420>
 8007854:	4b88      	ldr	r3, [pc, #544]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 8007856:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007858:	4b87      	ldr	r3, [pc, #540]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 800785a:	2101      	movs	r1, #1
 800785c:	438a      	bics	r2, r1
 800785e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007860:	4b85      	ldr	r3, [pc, #532]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 8007862:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007864:	4b84      	ldr	r3, [pc, #528]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 8007866:	2104      	movs	r1, #4
 8007868:	438a      	bics	r2, r1
 800786a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d014      	beq.n	800789e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007874:	f7fe fc92 	bl	800619c <HAL_GetTick>
 8007878:	0003      	movs	r3, r0
 800787a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800787c:	e009      	b.n	8007892 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800787e:	f7fe fc8d 	bl	800619c <HAL_GetTick>
 8007882:	0002      	movs	r2, r0
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	4a7d      	ldr	r2, [pc, #500]	@ (8007a80 <HAL_RCC_OscConfig+0x634>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d901      	bls.n	8007892 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e136      	b.n	8007b00 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007892:	4b79      	ldr	r3, [pc, #484]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 8007894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007896:	2202      	movs	r2, #2
 8007898:	4013      	ands	r3, r2
 800789a:	d0f0      	beq.n	800787e <HAL_RCC_OscConfig+0x432>
 800789c:	e013      	b.n	80078c6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800789e:	f7fe fc7d 	bl	800619c <HAL_GetTick>
 80078a2:	0003      	movs	r3, r0
 80078a4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80078a6:	e009      	b.n	80078bc <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078a8:	f7fe fc78 	bl	800619c <HAL_GetTick>
 80078ac:	0002      	movs	r2, r0
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	1ad3      	subs	r3, r2, r3
 80078b2:	4a73      	ldr	r2, [pc, #460]	@ (8007a80 <HAL_RCC_OscConfig+0x634>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d901      	bls.n	80078bc <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e121      	b.n	8007b00 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80078bc:	4b6e      	ldr	r3, [pc, #440]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 80078be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078c0:	2202      	movs	r2, #2
 80078c2:	4013      	ands	r3, r2
 80078c4:	d1f0      	bne.n	80078a8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80078c6:	231f      	movs	r3, #31
 80078c8:	18fb      	adds	r3, r7, r3
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d105      	bne.n	80078dc <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80078d0:	4b69      	ldr	r3, [pc, #420]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 80078d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078d4:	4b68      	ldr	r3, [pc, #416]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 80078d6:	496b      	ldr	r1, [pc, #428]	@ (8007a84 <HAL_RCC_OscConfig+0x638>)
 80078d8:	400a      	ands	r2, r1
 80078da:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2220      	movs	r2, #32
 80078e2:	4013      	ands	r3, r2
 80078e4:	d039      	beq.n	800795a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	69db      	ldr	r3, [r3, #28]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d01b      	beq.n	8007926 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80078ee:	4b62      	ldr	r3, [pc, #392]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	4b61      	ldr	r3, [pc, #388]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 80078f4:	2180      	movs	r1, #128	@ 0x80
 80078f6:	03c9      	lsls	r1, r1, #15
 80078f8:	430a      	orrs	r2, r1
 80078fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078fc:	f7fe fc4e 	bl	800619c <HAL_GetTick>
 8007900:	0003      	movs	r3, r0
 8007902:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007904:	e008      	b.n	8007918 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007906:	f7fe fc49 	bl	800619c <HAL_GetTick>
 800790a:	0002      	movs	r2, r0
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	2b02      	cmp	r3, #2
 8007912:	d901      	bls.n	8007918 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8007914:	2303      	movs	r3, #3
 8007916:	e0f3      	b.n	8007b00 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007918:	4b57      	ldr	r3, [pc, #348]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	2380      	movs	r3, #128	@ 0x80
 800791e:	041b      	lsls	r3, r3, #16
 8007920:	4013      	ands	r3, r2
 8007922:	d0f0      	beq.n	8007906 <HAL_RCC_OscConfig+0x4ba>
 8007924:	e019      	b.n	800795a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007926:	4b54      	ldr	r3, [pc, #336]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	4b53      	ldr	r3, [pc, #332]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 800792c:	4956      	ldr	r1, [pc, #344]	@ (8007a88 <HAL_RCC_OscConfig+0x63c>)
 800792e:	400a      	ands	r2, r1
 8007930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007932:	f7fe fc33 	bl	800619c <HAL_GetTick>
 8007936:	0003      	movs	r3, r0
 8007938:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800793a:	e008      	b.n	800794e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800793c:	f7fe fc2e 	bl	800619c <HAL_GetTick>
 8007940:	0002      	movs	r2, r0
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	2b02      	cmp	r3, #2
 8007948:	d901      	bls.n	800794e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e0d8      	b.n	8007b00 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800794e:	4b4a      	ldr	r3, [pc, #296]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	2380      	movs	r3, #128	@ 0x80
 8007954:	041b      	lsls	r3, r3, #16
 8007956:	4013      	ands	r3, r2
 8007958:	d1f0      	bne.n	800793c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d100      	bne.n	8007964 <HAL_RCC_OscConfig+0x518>
 8007962:	e0cc      	b.n	8007afe <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007964:	4b44      	ldr	r3, [pc, #272]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	2238      	movs	r2, #56	@ 0x38
 800796a:	4013      	ands	r3, r2
 800796c:	2b10      	cmp	r3, #16
 800796e:	d100      	bne.n	8007972 <HAL_RCC_OscConfig+0x526>
 8007970:	e07b      	b.n	8007a6a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	2b02      	cmp	r3, #2
 8007978:	d156      	bne.n	8007a28 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800797a:	4b3f      	ldr	r3, [pc, #252]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	4b3e      	ldr	r3, [pc, #248]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 8007980:	4942      	ldr	r1, [pc, #264]	@ (8007a8c <HAL_RCC_OscConfig+0x640>)
 8007982:	400a      	ands	r2, r1
 8007984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007986:	f7fe fc09 	bl	800619c <HAL_GetTick>
 800798a:	0003      	movs	r3, r0
 800798c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800798e:	e008      	b.n	80079a2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007990:	f7fe fc04 	bl	800619c <HAL_GetTick>
 8007994:	0002      	movs	r2, r0
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	2b02      	cmp	r3, #2
 800799c:	d901      	bls.n	80079a2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e0ae      	b.n	8007b00 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079a2:	4b35      	ldr	r3, [pc, #212]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	2380      	movs	r3, #128	@ 0x80
 80079a8:	049b      	lsls	r3, r3, #18
 80079aa:	4013      	ands	r3, r2
 80079ac:	d1f0      	bne.n	8007990 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80079ae:	4b32      	ldr	r3, [pc, #200]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	4a37      	ldr	r2, [pc, #220]	@ (8007a90 <HAL_RCC_OscConfig+0x644>)
 80079b4:	4013      	ands	r3, r2
 80079b6:	0019      	movs	r1, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c0:	431a      	orrs	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c6:	021b      	lsls	r3, r3, #8
 80079c8:	431a      	orrs	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ce:	431a      	orrs	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079d4:	431a      	orrs	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079da:	431a      	orrs	r2, r3
 80079dc:	4b26      	ldr	r3, [pc, #152]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 80079de:	430a      	orrs	r2, r1
 80079e0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079e2:	4b25      	ldr	r3, [pc, #148]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	4b24      	ldr	r3, [pc, #144]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 80079e8:	2180      	movs	r1, #128	@ 0x80
 80079ea:	0449      	lsls	r1, r1, #17
 80079ec:	430a      	orrs	r2, r1
 80079ee:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80079f0:	4b21      	ldr	r3, [pc, #132]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 80079f2:	68da      	ldr	r2, [r3, #12]
 80079f4:	4b20      	ldr	r3, [pc, #128]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 80079f6:	2180      	movs	r1, #128	@ 0x80
 80079f8:	0549      	lsls	r1, r1, #21
 80079fa:	430a      	orrs	r2, r1
 80079fc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079fe:	f7fe fbcd 	bl	800619c <HAL_GetTick>
 8007a02:	0003      	movs	r3, r0
 8007a04:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a06:	e008      	b.n	8007a1a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a08:	f7fe fbc8 	bl	800619c <HAL_GetTick>
 8007a0c:	0002      	movs	r2, r0
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d901      	bls.n	8007a1a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e072      	b.n	8007b00 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a1a:	4b17      	ldr	r3, [pc, #92]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	2380      	movs	r3, #128	@ 0x80
 8007a20:	049b      	lsls	r3, r3, #18
 8007a22:	4013      	ands	r3, r2
 8007a24:	d0f0      	beq.n	8007a08 <HAL_RCC_OscConfig+0x5bc>
 8007a26:	e06a      	b.n	8007afe <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a28:	4b13      	ldr	r3, [pc, #76]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	4b12      	ldr	r3, [pc, #72]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 8007a2e:	4917      	ldr	r1, [pc, #92]	@ (8007a8c <HAL_RCC_OscConfig+0x640>)
 8007a30:	400a      	ands	r2, r1
 8007a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a34:	f7fe fbb2 	bl	800619c <HAL_GetTick>
 8007a38:	0003      	movs	r3, r0
 8007a3a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a3c:	e008      	b.n	8007a50 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a3e:	f7fe fbad 	bl	800619c <HAL_GetTick>
 8007a42:	0002      	movs	r2, r0
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d901      	bls.n	8007a50 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	e057      	b.n	8007b00 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a50:	4b09      	ldr	r3, [pc, #36]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	2380      	movs	r3, #128	@ 0x80
 8007a56:	049b      	lsls	r3, r3, #18
 8007a58:	4013      	ands	r3, r2
 8007a5a:	d1f0      	bne.n	8007a3e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8007a5c:	4b06      	ldr	r3, [pc, #24]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 8007a5e:	68da      	ldr	r2, [r3, #12]
 8007a60:	4b05      	ldr	r3, [pc, #20]	@ (8007a78 <HAL_RCC_OscConfig+0x62c>)
 8007a62:	490c      	ldr	r1, [pc, #48]	@ (8007a94 <HAL_RCC_OscConfig+0x648>)
 8007a64:	400a      	ands	r2, r1
 8007a66:	60da      	str	r2, [r3, #12]
 8007a68:	e049      	b.n	8007afe <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d112      	bne.n	8007a98 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e044      	b.n	8007b00 <HAL_RCC_OscConfig+0x6b4>
 8007a76:	46c0      	nop			@ (mov r8, r8)
 8007a78:	40021000 	.word	0x40021000
 8007a7c:	40007000 	.word	0x40007000
 8007a80:	00001388 	.word	0x00001388
 8007a84:	efffffff 	.word	0xefffffff
 8007a88:	ffbfffff 	.word	0xffbfffff
 8007a8c:	feffffff 	.word	0xfeffffff
 8007a90:	11c1808c 	.word	0x11c1808c
 8007a94:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8007a98:	4b1b      	ldr	r3, [pc, #108]	@ (8007b08 <HAL_RCC_OscConfig+0x6bc>)
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2203      	movs	r2, #3
 8007aa2:	401a      	ands	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d126      	bne.n	8007afa <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	2270      	movs	r2, #112	@ 0x70
 8007ab0:	401a      	ands	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d11f      	bne.n	8007afa <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	23fe      	movs	r3, #254	@ 0xfe
 8007abe:	01db      	lsls	r3, r3, #7
 8007ac0:	401a      	ands	r2, r3
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d116      	bne.n	8007afa <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007acc:	697a      	ldr	r2, [r7, #20]
 8007ace:	23f8      	movs	r3, #248	@ 0xf8
 8007ad0:	039b      	lsls	r3, r3, #14
 8007ad2:	401a      	ands	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d10e      	bne.n	8007afa <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	23e0      	movs	r3, #224	@ 0xe0
 8007ae0:	051b      	lsls	r3, r3, #20
 8007ae2:	401a      	ands	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d106      	bne.n	8007afa <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	0f5b      	lsrs	r3, r3, #29
 8007af0:	075a      	lsls	r2, r3, #29
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d001      	beq.n	8007afe <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e000      	b.n	8007b00 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	0018      	movs	r0, r3
 8007b02:	46bd      	mov	sp, r7
 8007b04:	b008      	add	sp, #32
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	40021000 	.word	0x40021000

08007b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e0e9      	b.n	8007cf4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b20:	4b76      	ldr	r3, [pc, #472]	@ (8007cfc <HAL_RCC_ClockConfig+0x1f0>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2207      	movs	r2, #7
 8007b26:	4013      	ands	r3, r2
 8007b28:	683a      	ldr	r2, [r7, #0]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d91e      	bls.n	8007b6c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b2e:	4b73      	ldr	r3, [pc, #460]	@ (8007cfc <HAL_RCC_ClockConfig+0x1f0>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2207      	movs	r2, #7
 8007b34:	4393      	bics	r3, r2
 8007b36:	0019      	movs	r1, r3
 8007b38:	4b70      	ldr	r3, [pc, #448]	@ (8007cfc <HAL_RCC_ClockConfig+0x1f0>)
 8007b3a:	683a      	ldr	r2, [r7, #0]
 8007b3c:	430a      	orrs	r2, r1
 8007b3e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007b40:	f7fe fb2c 	bl	800619c <HAL_GetTick>
 8007b44:	0003      	movs	r3, r0
 8007b46:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007b48:	e009      	b.n	8007b5e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b4a:	f7fe fb27 	bl	800619c <HAL_GetTick>
 8007b4e:	0002      	movs	r2, r0
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	4a6a      	ldr	r2, [pc, #424]	@ (8007d00 <HAL_RCC_ClockConfig+0x1f4>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d901      	bls.n	8007b5e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e0ca      	b.n	8007cf4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007b5e:	4b67      	ldr	r3, [pc, #412]	@ (8007cfc <HAL_RCC_ClockConfig+0x1f0>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2207      	movs	r2, #7
 8007b64:	4013      	ands	r3, r2
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d1ee      	bne.n	8007b4a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2202      	movs	r2, #2
 8007b72:	4013      	ands	r3, r2
 8007b74:	d015      	beq.n	8007ba2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2204      	movs	r2, #4
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	d006      	beq.n	8007b8e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007b80:	4b60      	ldr	r3, [pc, #384]	@ (8007d04 <HAL_RCC_ClockConfig+0x1f8>)
 8007b82:	689a      	ldr	r2, [r3, #8]
 8007b84:	4b5f      	ldr	r3, [pc, #380]	@ (8007d04 <HAL_RCC_ClockConfig+0x1f8>)
 8007b86:	21e0      	movs	r1, #224	@ 0xe0
 8007b88:	01c9      	lsls	r1, r1, #7
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b8e:	4b5d      	ldr	r3, [pc, #372]	@ (8007d04 <HAL_RCC_ClockConfig+0x1f8>)
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	4a5d      	ldr	r2, [pc, #372]	@ (8007d08 <HAL_RCC_ClockConfig+0x1fc>)
 8007b94:	4013      	ands	r3, r2
 8007b96:	0019      	movs	r1, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	689a      	ldr	r2, [r3, #8]
 8007b9c:	4b59      	ldr	r3, [pc, #356]	@ (8007d04 <HAL_RCC_ClockConfig+0x1f8>)
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	4013      	ands	r3, r2
 8007baa:	d057      	beq.n	8007c5c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d107      	bne.n	8007bc4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007bb4:	4b53      	ldr	r3, [pc, #332]	@ (8007d04 <HAL_RCC_ClockConfig+0x1f8>)
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	2380      	movs	r3, #128	@ 0x80
 8007bba:	029b      	lsls	r3, r3, #10
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	d12b      	bne.n	8007c18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e097      	b.n	8007cf4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d107      	bne.n	8007bdc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bcc:	4b4d      	ldr	r3, [pc, #308]	@ (8007d04 <HAL_RCC_ClockConfig+0x1f8>)
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	2380      	movs	r3, #128	@ 0x80
 8007bd2:	049b      	lsls	r3, r3, #18
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	d11f      	bne.n	8007c18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e08b      	b.n	8007cf4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d107      	bne.n	8007bf4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007be4:	4b47      	ldr	r3, [pc, #284]	@ (8007d04 <HAL_RCC_ClockConfig+0x1f8>)
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	2380      	movs	r3, #128	@ 0x80
 8007bea:	00db      	lsls	r3, r3, #3
 8007bec:	4013      	ands	r3, r2
 8007bee:	d113      	bne.n	8007c18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e07f      	b.n	8007cf4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	2b03      	cmp	r3, #3
 8007bfa:	d106      	bne.n	8007c0a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007bfc:	4b41      	ldr	r3, [pc, #260]	@ (8007d04 <HAL_RCC_ClockConfig+0x1f8>)
 8007bfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c00:	2202      	movs	r2, #2
 8007c02:	4013      	ands	r3, r2
 8007c04:	d108      	bne.n	8007c18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e074      	b.n	8007cf4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8007d04 <HAL_RCC_ClockConfig+0x1f8>)
 8007c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c0e:	2202      	movs	r2, #2
 8007c10:	4013      	ands	r3, r2
 8007c12:	d101      	bne.n	8007c18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e06d      	b.n	8007cf4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c18:	4b3a      	ldr	r3, [pc, #232]	@ (8007d04 <HAL_RCC_ClockConfig+0x1f8>)
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	2207      	movs	r2, #7
 8007c1e:	4393      	bics	r3, r2
 8007c20:	0019      	movs	r1, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	4b37      	ldr	r3, [pc, #220]	@ (8007d04 <HAL_RCC_ClockConfig+0x1f8>)
 8007c28:	430a      	orrs	r2, r1
 8007c2a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c2c:	f7fe fab6 	bl	800619c <HAL_GetTick>
 8007c30:	0003      	movs	r3, r0
 8007c32:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c34:	e009      	b.n	8007c4a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c36:	f7fe fab1 	bl	800619c <HAL_GetTick>
 8007c3a:	0002      	movs	r2, r0
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	4a2f      	ldr	r2, [pc, #188]	@ (8007d00 <HAL_RCC_ClockConfig+0x1f4>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d901      	bls.n	8007c4a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e054      	b.n	8007cf4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c4a:	4b2e      	ldr	r3, [pc, #184]	@ (8007d04 <HAL_RCC_ClockConfig+0x1f8>)
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	2238      	movs	r2, #56	@ 0x38
 8007c50:	401a      	ands	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	00db      	lsls	r3, r3, #3
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d1ec      	bne.n	8007c36 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c5c:	4b27      	ldr	r3, [pc, #156]	@ (8007cfc <HAL_RCC_ClockConfig+0x1f0>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2207      	movs	r2, #7
 8007c62:	4013      	ands	r3, r2
 8007c64:	683a      	ldr	r2, [r7, #0]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d21e      	bcs.n	8007ca8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c6a:	4b24      	ldr	r3, [pc, #144]	@ (8007cfc <HAL_RCC_ClockConfig+0x1f0>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2207      	movs	r2, #7
 8007c70:	4393      	bics	r3, r2
 8007c72:	0019      	movs	r1, r3
 8007c74:	4b21      	ldr	r3, [pc, #132]	@ (8007cfc <HAL_RCC_ClockConfig+0x1f0>)
 8007c76:	683a      	ldr	r2, [r7, #0]
 8007c78:	430a      	orrs	r2, r1
 8007c7a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007c7c:	f7fe fa8e 	bl	800619c <HAL_GetTick>
 8007c80:	0003      	movs	r3, r0
 8007c82:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007c84:	e009      	b.n	8007c9a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c86:	f7fe fa89 	bl	800619c <HAL_GetTick>
 8007c8a:	0002      	movs	r2, r0
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	4a1b      	ldr	r2, [pc, #108]	@ (8007d00 <HAL_RCC_ClockConfig+0x1f4>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d901      	bls.n	8007c9a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e02c      	b.n	8007cf4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007c9a:	4b18      	ldr	r3, [pc, #96]	@ (8007cfc <HAL_RCC_ClockConfig+0x1f0>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2207      	movs	r2, #7
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	683a      	ldr	r2, [r7, #0]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d1ee      	bne.n	8007c86 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2204      	movs	r2, #4
 8007cae:	4013      	ands	r3, r2
 8007cb0:	d009      	beq.n	8007cc6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8007cb2:	4b14      	ldr	r3, [pc, #80]	@ (8007d04 <HAL_RCC_ClockConfig+0x1f8>)
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	4a15      	ldr	r2, [pc, #84]	@ (8007d0c <HAL_RCC_ClockConfig+0x200>)
 8007cb8:	4013      	ands	r3, r2
 8007cba:	0019      	movs	r1, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	68da      	ldr	r2, [r3, #12]
 8007cc0:	4b10      	ldr	r3, [pc, #64]	@ (8007d04 <HAL_RCC_ClockConfig+0x1f8>)
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8007cc6:	f000 f829 	bl	8007d1c <HAL_RCC_GetSysClockFreq>
 8007cca:	0001      	movs	r1, r0
 8007ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8007d04 <HAL_RCC_ClockConfig+0x1f8>)
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	0a1b      	lsrs	r3, r3, #8
 8007cd2:	220f      	movs	r2, #15
 8007cd4:	401a      	ands	r2, r3
 8007cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8007d10 <HAL_RCC_ClockConfig+0x204>)
 8007cd8:	0092      	lsls	r2, r2, #2
 8007cda:	58d3      	ldr	r3, [r2, r3]
 8007cdc:	221f      	movs	r2, #31
 8007cde:	4013      	ands	r3, r2
 8007ce0:	000a      	movs	r2, r1
 8007ce2:	40da      	lsrs	r2, r3
 8007ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8007d14 <HAL_RCC_ClockConfig+0x208>)
 8007ce6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8007d18 <HAL_RCC_ClockConfig+0x20c>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	0018      	movs	r0, r3
 8007cee:	f7fe f9f9 	bl	80060e4 <HAL_InitTick>
 8007cf2:	0003      	movs	r3, r0
}
 8007cf4:	0018      	movs	r0, r3
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	b004      	add	sp, #16
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	40022000 	.word	0x40022000
 8007d00:	00001388 	.word	0x00001388
 8007d04:	40021000 	.word	0x40021000
 8007d08:	fffff0ff 	.word	0xfffff0ff
 8007d0c:	ffff8fff 	.word	0xffff8fff
 8007d10:	0800c97c 	.word	0x0800c97c
 8007d14:	20000e84 	.word	0x20000e84
 8007d18:	20000e88 	.word	0x20000e88

08007d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007d22:	4b3c      	ldr	r3, [pc, #240]	@ (8007e14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	2238      	movs	r2, #56	@ 0x38
 8007d28:	4013      	ands	r3, r2
 8007d2a:	d10f      	bne.n	8007d4c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8007d2c:	4b39      	ldr	r3, [pc, #228]	@ (8007e14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	0adb      	lsrs	r3, r3, #11
 8007d32:	2207      	movs	r2, #7
 8007d34:	4013      	ands	r3, r2
 8007d36:	2201      	movs	r2, #1
 8007d38:	409a      	lsls	r2, r3
 8007d3a:	0013      	movs	r3, r2
 8007d3c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	4835      	ldr	r0, [pc, #212]	@ (8007e18 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007d42:	f7f8 f9f3 	bl	800012c <__udivsi3>
 8007d46:	0003      	movs	r3, r0
 8007d48:	613b      	str	r3, [r7, #16]
 8007d4a:	e05d      	b.n	8007e08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007d4c:	4b31      	ldr	r3, [pc, #196]	@ (8007e14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	2238      	movs	r2, #56	@ 0x38
 8007d52:	4013      	ands	r3, r2
 8007d54:	2b08      	cmp	r3, #8
 8007d56:	d102      	bne.n	8007d5e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007d58:	4b30      	ldr	r3, [pc, #192]	@ (8007e1c <HAL_RCC_GetSysClockFreq+0x100>)
 8007d5a:	613b      	str	r3, [r7, #16]
 8007d5c:	e054      	b.n	8007e08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8007e14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	2238      	movs	r2, #56	@ 0x38
 8007d64:	4013      	ands	r3, r2
 8007d66:	2b10      	cmp	r3, #16
 8007d68:	d138      	bne.n	8007ddc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8007d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8007e14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	2203      	movs	r2, #3
 8007d70:	4013      	ands	r3, r2
 8007d72:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d74:	4b27      	ldr	r3, [pc, #156]	@ (8007e14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	091b      	lsrs	r3, r3, #4
 8007d7a:	2207      	movs	r2, #7
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	3301      	adds	r3, #1
 8007d80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2b03      	cmp	r3, #3
 8007d86:	d10d      	bne.n	8007da4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d88:	68b9      	ldr	r1, [r7, #8]
 8007d8a:	4824      	ldr	r0, [pc, #144]	@ (8007e1c <HAL_RCC_GetSysClockFreq+0x100>)
 8007d8c:	f7f8 f9ce 	bl	800012c <__udivsi3>
 8007d90:	0003      	movs	r3, r0
 8007d92:	0019      	movs	r1, r3
 8007d94:	4b1f      	ldr	r3, [pc, #124]	@ (8007e14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	0a1b      	lsrs	r3, r3, #8
 8007d9a:	227f      	movs	r2, #127	@ 0x7f
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	434b      	muls	r3, r1
 8007da0:	617b      	str	r3, [r7, #20]
        break;
 8007da2:	e00d      	b.n	8007dc0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8007da4:	68b9      	ldr	r1, [r7, #8]
 8007da6:	481c      	ldr	r0, [pc, #112]	@ (8007e18 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007da8:	f7f8 f9c0 	bl	800012c <__udivsi3>
 8007dac:	0003      	movs	r3, r0
 8007dae:	0019      	movs	r1, r3
 8007db0:	4b18      	ldr	r3, [pc, #96]	@ (8007e14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	0a1b      	lsrs	r3, r3, #8
 8007db6:	227f      	movs	r2, #127	@ 0x7f
 8007db8:	4013      	ands	r3, r2
 8007dba:	434b      	muls	r3, r1
 8007dbc:	617b      	str	r3, [r7, #20]
        break;
 8007dbe:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8007dc0:	4b14      	ldr	r3, [pc, #80]	@ (8007e14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	0f5b      	lsrs	r3, r3, #29
 8007dc6:	2207      	movs	r2, #7
 8007dc8:	4013      	ands	r3, r2
 8007dca:	3301      	adds	r3, #1
 8007dcc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8007dce:	6879      	ldr	r1, [r7, #4]
 8007dd0:	6978      	ldr	r0, [r7, #20]
 8007dd2:	f7f8 f9ab 	bl	800012c <__udivsi3>
 8007dd6:	0003      	movs	r3, r0
 8007dd8:	613b      	str	r3, [r7, #16]
 8007dda:	e015      	b.n	8007e08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8007e14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	2238      	movs	r2, #56	@ 0x38
 8007de2:	4013      	ands	r3, r2
 8007de4:	2b20      	cmp	r3, #32
 8007de6:	d103      	bne.n	8007df0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007de8:	2380      	movs	r3, #128	@ 0x80
 8007dea:	021b      	lsls	r3, r3, #8
 8007dec:	613b      	str	r3, [r7, #16]
 8007dee:	e00b      	b.n	8007e08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007df0:	4b08      	ldr	r3, [pc, #32]	@ (8007e14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	2238      	movs	r2, #56	@ 0x38
 8007df6:	4013      	ands	r3, r2
 8007df8:	2b18      	cmp	r3, #24
 8007dfa:	d103      	bne.n	8007e04 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007dfc:	23fa      	movs	r3, #250	@ 0xfa
 8007dfe:	01db      	lsls	r3, r3, #7
 8007e00:	613b      	str	r3, [r7, #16]
 8007e02:	e001      	b.n	8007e08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007e04:	2300      	movs	r3, #0
 8007e06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007e08:	693b      	ldr	r3, [r7, #16]
}
 8007e0a:	0018      	movs	r0, r3
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	b006      	add	sp, #24
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	46c0      	nop			@ (mov r8, r8)
 8007e14:	40021000 	.word	0x40021000
 8007e18:	00f42400 	.word	0x00f42400
 8007e1c:	007a1200 	.word	0x007a1200

08007e20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e24:	4b02      	ldr	r3, [pc, #8]	@ (8007e30 <HAL_RCC_GetHCLKFreq+0x10>)
 8007e26:	681b      	ldr	r3, [r3, #0]
}
 8007e28:	0018      	movs	r0, r3
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	46c0      	nop			@ (mov r8, r8)
 8007e30:	20000e84 	.word	0x20000e84

08007e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e34:	b5b0      	push	{r4, r5, r7, lr}
 8007e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007e38:	f7ff fff2 	bl	8007e20 <HAL_RCC_GetHCLKFreq>
 8007e3c:	0004      	movs	r4, r0
 8007e3e:	f7ff faf9 	bl	8007434 <LL_RCC_GetAPB1Prescaler>
 8007e42:	0003      	movs	r3, r0
 8007e44:	0b1a      	lsrs	r2, r3, #12
 8007e46:	4b05      	ldr	r3, [pc, #20]	@ (8007e5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e48:	0092      	lsls	r2, r2, #2
 8007e4a:	58d3      	ldr	r3, [r2, r3]
 8007e4c:	221f      	movs	r2, #31
 8007e4e:	4013      	ands	r3, r2
 8007e50:	40dc      	lsrs	r4, r3
 8007e52:	0023      	movs	r3, r4
}
 8007e54:	0018      	movs	r0, r3
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bdb0      	pop	{r4, r5, r7, pc}
 8007e5a:	46c0      	nop			@ (mov r8, r8)
 8007e5c:	0800c9bc 	.word	0x0800c9bc

08007e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007e68:	2313      	movs	r3, #19
 8007e6a:	18fb      	adds	r3, r7, r3
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e70:	2312      	movs	r3, #18
 8007e72:	18fb      	adds	r3, r7, r3
 8007e74:	2200      	movs	r2, #0
 8007e76:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	2380      	movs	r3, #128	@ 0x80
 8007e7e:	029b      	lsls	r3, r3, #10
 8007e80:	4013      	ands	r3, r2
 8007e82:	d100      	bne.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007e84:	e0ad      	b.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e86:	2011      	movs	r0, #17
 8007e88:	183b      	adds	r3, r7, r0
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e8e:	4b47      	ldr	r3, [pc, #284]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007e90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e92:	2380      	movs	r3, #128	@ 0x80
 8007e94:	055b      	lsls	r3, r3, #21
 8007e96:	4013      	ands	r3, r2
 8007e98:	d110      	bne.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e9a:	4b44      	ldr	r3, [pc, #272]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007e9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e9e:	4b43      	ldr	r3, [pc, #268]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007ea0:	2180      	movs	r1, #128	@ 0x80
 8007ea2:	0549      	lsls	r1, r1, #21
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007ea8:	4b40      	ldr	r3, [pc, #256]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007eaa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007eac:	2380      	movs	r3, #128	@ 0x80
 8007eae:	055b      	lsls	r3, r3, #21
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	60bb      	str	r3, [r7, #8]
 8007eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007eb6:	183b      	adds	r3, r7, r0
 8007eb8:	2201      	movs	r2, #1
 8007eba:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ebc:	4b3c      	ldr	r3, [pc, #240]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	4b3b      	ldr	r3, [pc, #236]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8007ec2:	2180      	movs	r1, #128	@ 0x80
 8007ec4:	0049      	lsls	r1, r1, #1
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007eca:	f7fe f967 	bl	800619c <HAL_GetTick>
 8007ece:	0003      	movs	r3, r0
 8007ed0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ed2:	e00b      	b.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ed4:	f7fe f962 	bl	800619c <HAL_GetTick>
 8007ed8:	0002      	movs	r2, r0
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d904      	bls.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007ee2:	2313      	movs	r3, #19
 8007ee4:	18fb      	adds	r3, r7, r3
 8007ee6:	2203      	movs	r2, #3
 8007ee8:	701a      	strb	r2, [r3, #0]
        break;
 8007eea:	e005      	b.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007eec:	4b30      	ldr	r3, [pc, #192]	@ (8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	2380      	movs	r3, #128	@ 0x80
 8007ef2:	005b      	lsls	r3, r3, #1
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	d0ed      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007ef8:	2313      	movs	r3, #19
 8007efa:	18fb      	adds	r3, r7, r3
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d15e      	bne.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007f02:	4b2a      	ldr	r3, [pc, #168]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007f04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007f06:	23c0      	movs	r3, #192	@ 0xc0
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d019      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d014      	beq.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007f1e:	4b23      	ldr	r3, [pc, #140]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007f20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f22:	4a24      	ldr	r2, [pc, #144]	@ (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8007f24:	4013      	ands	r3, r2
 8007f26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f28:	4b20      	ldr	r3, [pc, #128]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007f2a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007f2e:	2180      	movs	r1, #128	@ 0x80
 8007f30:	0249      	lsls	r1, r1, #9
 8007f32:	430a      	orrs	r2, r1
 8007f34:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f36:	4b1d      	ldr	r3, [pc, #116]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007f38:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007f3c:	491e      	ldr	r1, [pc, #120]	@ (8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8007f3e:	400a      	ands	r2, r1
 8007f40:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007f42:	4b1a      	ldr	r3, [pc, #104]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	d016      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f50:	f7fe f924 	bl	800619c <HAL_GetTick>
 8007f54:	0003      	movs	r3, r0
 8007f56:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f58:	e00c      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f5a:	f7fe f91f 	bl	800619c <HAL_GetTick>
 8007f5e:	0002      	movs	r2, r0
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	4a15      	ldr	r2, [pc, #84]	@ (8007fbc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d904      	bls.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8007f6a:	2313      	movs	r3, #19
 8007f6c:	18fb      	adds	r3, r7, r3
 8007f6e:	2203      	movs	r2, #3
 8007f70:	701a      	strb	r2, [r3, #0]
            break;
 8007f72:	e004      	b.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f74:	4b0d      	ldr	r3, [pc, #52]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f78:	2202      	movs	r2, #2
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	d0ed      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8007f7e:	2313      	movs	r3, #19
 8007f80:	18fb      	adds	r3, r7, r3
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10a      	bne.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f88:	4b08      	ldr	r3, [pc, #32]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007f8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f8c:	4a09      	ldr	r2, [pc, #36]	@ (8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8007f8e:	4013      	ands	r3, r2
 8007f90:	0019      	movs	r1, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f96:	4b05      	ldr	r3, [pc, #20]	@ (8007fac <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8007f98:	430a      	orrs	r2, r1
 8007f9a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007f9c:	e016      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f9e:	2312      	movs	r3, #18
 8007fa0:	18fb      	adds	r3, r7, r3
 8007fa2:	2213      	movs	r2, #19
 8007fa4:	18ba      	adds	r2, r7, r2
 8007fa6:	7812      	ldrb	r2, [r2, #0]
 8007fa8:	701a      	strb	r2, [r3, #0]
 8007faa:	e00f      	b.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007fac:	40021000 	.word	0x40021000
 8007fb0:	40007000 	.word	0x40007000
 8007fb4:	fffffcff 	.word	0xfffffcff
 8007fb8:	fffeffff 	.word	0xfffeffff
 8007fbc:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fc0:	2312      	movs	r3, #18
 8007fc2:	18fb      	adds	r3, r7, r3
 8007fc4:	2213      	movs	r2, #19
 8007fc6:	18ba      	adds	r2, r7, r2
 8007fc8:	7812      	ldrb	r2, [r2, #0]
 8007fca:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007fcc:	2311      	movs	r3, #17
 8007fce:	18fb      	adds	r3, r7, r3
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d105      	bne.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fd6:	4bb6      	ldr	r3, [pc, #728]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007fd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fda:	4bb5      	ldr	r3, [pc, #724]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007fdc:	49b5      	ldr	r1, [pc, #724]	@ (80082b4 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8007fde:	400a      	ands	r2, r1
 8007fe0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	4013      	ands	r3, r2
 8007fea:	d009      	beq.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007fec:	4bb0      	ldr	r3, [pc, #704]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ff0:	2203      	movs	r2, #3
 8007ff2:	4393      	bics	r3, r2
 8007ff4:	0019      	movs	r1, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	685a      	ldr	r2, [r3, #4]
 8007ffa:	4bad      	ldr	r3, [pc, #692]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007ffc:	430a      	orrs	r2, r1
 8007ffe:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2202      	movs	r2, #2
 8008006:	4013      	ands	r3, r2
 8008008:	d009      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800800a:	4ba9      	ldr	r3, [pc, #676]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800800c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800800e:	220c      	movs	r2, #12
 8008010:	4393      	bics	r3, r2
 8008012:	0019      	movs	r1, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	689a      	ldr	r2, [r3, #8]
 8008018:	4ba5      	ldr	r3, [pc, #660]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800801a:	430a      	orrs	r2, r1
 800801c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2204      	movs	r2, #4
 8008024:	4013      	ands	r3, r2
 8008026:	d009      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008028:	4ba1      	ldr	r3, [pc, #644]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800802a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800802c:	2230      	movs	r2, #48	@ 0x30
 800802e:	4393      	bics	r3, r2
 8008030:	0019      	movs	r1, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	68da      	ldr	r2, [r3, #12]
 8008036:	4b9e      	ldr	r3, [pc, #632]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008038:	430a      	orrs	r2, r1
 800803a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2210      	movs	r2, #16
 8008042:	4013      	ands	r3, r2
 8008044:	d009      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008046:	4b9a      	ldr	r3, [pc, #616]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800804a:	4a9b      	ldr	r2, [pc, #620]	@ (80082b8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800804c:	4013      	ands	r3, r2
 800804e:	0019      	movs	r1, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	691a      	ldr	r2, [r3, #16]
 8008054:	4b96      	ldr	r3, [pc, #600]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008056:	430a      	orrs	r2, r1
 8008058:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	2380      	movs	r3, #128	@ 0x80
 8008060:	015b      	lsls	r3, r3, #5
 8008062:	4013      	ands	r3, r2
 8008064:	d009      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8008066:	4b92      	ldr	r3, [pc, #584]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800806a:	4a94      	ldr	r2, [pc, #592]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800806c:	4013      	ands	r3, r2
 800806e:	0019      	movs	r1, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	695a      	ldr	r2, [r3, #20]
 8008074:	4b8e      	ldr	r3, [pc, #568]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008076:	430a      	orrs	r2, r1
 8008078:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	2380      	movs	r3, #128	@ 0x80
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4013      	ands	r3, r2
 8008084:	d009      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008086:	4b8a      	ldr	r3, [pc, #552]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800808a:	4a8d      	ldr	r2, [pc, #564]	@ (80082c0 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800808c:	4013      	ands	r3, r2
 800808e:	0019      	movs	r1, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008094:	4b86      	ldr	r3, [pc, #536]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008096:	430a      	orrs	r2, r1
 8008098:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	2380      	movs	r3, #128	@ 0x80
 80080a0:	00db      	lsls	r3, r3, #3
 80080a2:	4013      	ands	r3, r2
 80080a4:	d009      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80080a6:	4b82      	ldr	r3, [pc, #520]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80080a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080aa:	4a86      	ldr	r2, [pc, #536]	@ (80082c4 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80080ac:	4013      	ands	r3, r2
 80080ae:	0019      	movs	r1, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080b4:	4b7e      	ldr	r3, [pc, #504]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80080b6:	430a      	orrs	r2, r1
 80080b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2220      	movs	r2, #32
 80080c0:	4013      	ands	r3, r2
 80080c2:	d009      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80080c4:	4b7a      	ldr	r3, [pc, #488]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80080c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080c8:	4a7f      	ldr	r2, [pc, #508]	@ (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80080ca:	4013      	ands	r3, r2
 80080cc:	0019      	movs	r1, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	699a      	ldr	r2, [r3, #24]
 80080d2:	4b77      	ldr	r3, [pc, #476]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80080d4:	430a      	orrs	r2, r1
 80080d6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2240      	movs	r2, #64	@ 0x40
 80080de:	4013      	ands	r3, r2
 80080e0:	d009      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80080e2:	4b73      	ldr	r3, [pc, #460]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80080e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080e6:	4a79      	ldr	r2, [pc, #484]	@ (80082cc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80080e8:	4013      	ands	r3, r2
 80080ea:	0019      	movs	r1, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	69da      	ldr	r2, [r3, #28]
 80080f0:	4b6f      	ldr	r3, [pc, #444]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80080f2:	430a      	orrs	r2, r1
 80080f4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	2380      	movs	r3, #128	@ 0x80
 80080fc:	01db      	lsls	r3, r3, #7
 80080fe:	4013      	ands	r3, r2
 8008100:	d015      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008102:	4b6b      	ldr	r3, [pc, #428]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	0899      	lsrs	r1, r3, #2
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800810e:	4b68      	ldr	r3, [pc, #416]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008110:	430a      	orrs	r2, r1
 8008112:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008118:	2380      	movs	r3, #128	@ 0x80
 800811a:	05db      	lsls	r3, r3, #23
 800811c:	429a      	cmp	r2, r3
 800811e:	d106      	bne.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008120:	4b63      	ldr	r3, [pc, #396]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008122:	68da      	ldr	r2, [r3, #12]
 8008124:	4b62      	ldr	r3, [pc, #392]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008126:	2180      	movs	r1, #128	@ 0x80
 8008128:	0249      	lsls	r1, r1, #9
 800812a:	430a      	orrs	r2, r1
 800812c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	2380      	movs	r3, #128	@ 0x80
 8008134:	031b      	lsls	r3, r3, #12
 8008136:	4013      	ands	r3, r2
 8008138:	d009      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800813a:	4b5d      	ldr	r3, [pc, #372]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800813c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800813e:	2240      	movs	r2, #64	@ 0x40
 8008140:	4393      	bics	r3, r2
 8008142:	0019      	movs	r1, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008148:	4b59      	ldr	r3, [pc, #356]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800814a:	430a      	orrs	r2, r1
 800814c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	2380      	movs	r3, #128	@ 0x80
 8008154:	039b      	lsls	r3, r3, #14
 8008156:	4013      	ands	r3, r2
 8008158:	d016      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800815a:	4b55      	ldr	r3, [pc, #340]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800815c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800815e:	4a5c      	ldr	r2, [pc, #368]	@ (80082d0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008160:	4013      	ands	r3, r2
 8008162:	0019      	movs	r1, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008168:	4b51      	ldr	r3, [pc, #324]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800816a:	430a      	orrs	r2, r1
 800816c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008172:	2380      	movs	r3, #128	@ 0x80
 8008174:	03db      	lsls	r3, r3, #15
 8008176:	429a      	cmp	r2, r3
 8008178:	d106      	bne.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800817a:	4b4d      	ldr	r3, [pc, #308]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800817c:	68da      	ldr	r2, [r3, #12]
 800817e:	4b4c      	ldr	r3, [pc, #304]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008180:	2180      	movs	r1, #128	@ 0x80
 8008182:	0449      	lsls	r1, r1, #17
 8008184:	430a      	orrs	r2, r1
 8008186:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	2380      	movs	r3, #128	@ 0x80
 800818e:	03db      	lsls	r3, r3, #15
 8008190:	4013      	ands	r3, r2
 8008192:	d016      	beq.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008194:	4b46      	ldr	r3, [pc, #280]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008198:	4a4e      	ldr	r2, [pc, #312]	@ (80082d4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800819a:	4013      	ands	r3, r2
 800819c:	0019      	movs	r1, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081a2:	4b43      	ldr	r3, [pc, #268]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80081a4:	430a      	orrs	r2, r1
 80081a6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081ac:	2380      	movs	r3, #128	@ 0x80
 80081ae:	045b      	lsls	r3, r3, #17
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d106      	bne.n	80081c2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80081b4:	4b3e      	ldr	r3, [pc, #248]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80081b6:	68da      	ldr	r2, [r3, #12]
 80081b8:	4b3d      	ldr	r3, [pc, #244]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80081ba:	2180      	movs	r1, #128	@ 0x80
 80081bc:	0449      	lsls	r1, r1, #17
 80081be:	430a      	orrs	r2, r1
 80081c0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	2380      	movs	r3, #128	@ 0x80
 80081c8:	011b      	lsls	r3, r3, #4
 80081ca:	4013      	ands	r3, r2
 80081cc:	d014      	beq.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80081ce:	4b38      	ldr	r3, [pc, #224]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80081d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081d2:	2203      	movs	r2, #3
 80081d4:	4393      	bics	r3, r2
 80081d6:	0019      	movs	r1, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a1a      	ldr	r2, [r3, #32]
 80081dc:	4b34      	ldr	r3, [pc, #208]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80081de:	430a      	orrs	r2, r1
 80081e0:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a1b      	ldr	r3, [r3, #32]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d106      	bne.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80081ea:	4b31      	ldr	r3, [pc, #196]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80081ec:	68da      	ldr	r2, [r3, #12]
 80081ee:	4b30      	ldr	r3, [pc, #192]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80081f0:	2180      	movs	r1, #128	@ 0x80
 80081f2:	0249      	lsls	r1, r1, #9
 80081f4:	430a      	orrs	r2, r1
 80081f6:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	2380      	movs	r3, #128	@ 0x80
 80081fe:	019b      	lsls	r3, r3, #6
 8008200:	4013      	ands	r3, r2
 8008202:	d014      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8008204:	4b2a      	ldr	r3, [pc, #168]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008208:	220c      	movs	r2, #12
 800820a:	4393      	bics	r3, r2
 800820c:	0019      	movs	r1, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008212:	4b27      	ldr	r3, [pc, #156]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008214:	430a      	orrs	r2, r1
 8008216:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800821c:	2b04      	cmp	r3, #4
 800821e:	d106      	bne.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008220:	4b23      	ldr	r3, [pc, #140]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008222:	68da      	ldr	r2, [r3, #12]
 8008224:	4b22      	ldr	r3, [pc, #136]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008226:	2180      	movs	r1, #128	@ 0x80
 8008228:	0249      	lsls	r1, r1, #9
 800822a:	430a      	orrs	r2, r1
 800822c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	2380      	movs	r3, #128	@ 0x80
 8008234:	045b      	lsls	r3, r3, #17
 8008236:	4013      	ands	r3, r2
 8008238:	d016      	beq.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800823a:	4b1d      	ldr	r3, [pc, #116]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800823c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800823e:	4a22      	ldr	r2, [pc, #136]	@ (80082c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008240:	4013      	ands	r3, r2
 8008242:	0019      	movs	r1, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008248:	4b19      	ldr	r3, [pc, #100]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800824a:	430a      	orrs	r2, r1
 800824c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008252:	2380      	movs	r3, #128	@ 0x80
 8008254:	019b      	lsls	r3, r3, #6
 8008256:	429a      	cmp	r2, r3
 8008258:	d106      	bne.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800825a:	4b15      	ldr	r3, [pc, #84]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800825c:	68da      	ldr	r2, [r3, #12]
 800825e:	4b14      	ldr	r3, [pc, #80]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008260:	2180      	movs	r1, #128	@ 0x80
 8008262:	0449      	lsls	r1, r1, #17
 8008264:	430a      	orrs	r2, r1
 8008266:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	2380      	movs	r3, #128	@ 0x80
 800826e:	049b      	lsls	r3, r3, #18
 8008270:	4013      	ands	r3, r2
 8008272:	d016      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008274:	4b0e      	ldr	r3, [pc, #56]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008278:	4a10      	ldr	r2, [pc, #64]	@ (80082bc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800827a:	4013      	ands	r3, r2
 800827c:	0019      	movs	r1, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008282:	4b0b      	ldr	r3, [pc, #44]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008284:	430a      	orrs	r2, r1
 8008286:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800828c:	2380      	movs	r3, #128	@ 0x80
 800828e:	005b      	lsls	r3, r3, #1
 8008290:	429a      	cmp	r2, r3
 8008292:	d106      	bne.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008294:	4b06      	ldr	r3, [pc, #24]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008296:	68da      	ldr	r2, [r3, #12]
 8008298:	4b05      	ldr	r3, [pc, #20]	@ (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800829a:	2180      	movs	r1, #128	@ 0x80
 800829c:	0449      	lsls	r1, r1, #17
 800829e:	430a      	orrs	r2, r1
 80082a0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80082a2:	2312      	movs	r3, #18
 80082a4:	18fb      	adds	r3, r7, r3
 80082a6:	781b      	ldrb	r3, [r3, #0]
}
 80082a8:	0018      	movs	r0, r3
 80082aa:	46bd      	mov	sp, r7
 80082ac:	b006      	add	sp, #24
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	40021000 	.word	0x40021000
 80082b4:	efffffff 	.word	0xefffffff
 80082b8:	fffff3ff 	.word	0xfffff3ff
 80082bc:	fffffcff 	.word	0xfffffcff
 80082c0:	fff3ffff 	.word	0xfff3ffff
 80082c4:	ffcfffff 	.word	0xffcfffff
 80082c8:	ffffcfff 	.word	0xffffcfff
 80082cc:	ffff3fff 	.word	0xffff3fff
 80082d0:	ffbfffff 	.word	0xffbfffff
 80082d4:	feffffff 	.word	0xfeffffff

080082d8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80082d8:	b5b0      	push	{r4, r5, r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80082e0:	230f      	movs	r3, #15
 80082e2:	18fb      	adds	r3, r7, r3
 80082e4:	2201      	movs	r2, #1
 80082e6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d100      	bne.n	80082f0 <HAL_RTC_Init+0x18>
 80082ee:	e08c      	b.n	800840a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2229      	movs	r2, #41	@ 0x29
 80082f4:	5c9b      	ldrb	r3, [r3, r2]
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10b      	bne.n	8008314 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2228      	movs	r2, #40	@ 0x28
 8008300:	2100      	movs	r1, #0
 8008302:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2288      	movs	r2, #136	@ 0x88
 8008308:	0212      	lsls	r2, r2, #8
 800830a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	0018      	movs	r0, r3
 8008310:	f7fd fc7e 	bl	8005c10 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2229      	movs	r2, #41	@ 0x29
 8008318:	2102      	movs	r1, #2
 800831a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	2210      	movs	r2, #16
 8008324:	4013      	ands	r3, r2
 8008326:	2b10      	cmp	r3, #16
 8008328:	d062      	beq.n	80083f0 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	22ca      	movs	r2, #202	@ 0xca
 8008330:	625a      	str	r2, [r3, #36]	@ 0x24
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2253      	movs	r2, #83	@ 0x53
 8008338:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800833a:	250f      	movs	r5, #15
 800833c:	197c      	adds	r4, r7, r5
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	0018      	movs	r0, r3
 8008342:	f000 fc0f 	bl	8008b64 <RTC_EnterInitMode>
 8008346:	0003      	movs	r3, r0
 8008348:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800834a:	0028      	movs	r0, r5
 800834c:	183b      	adds	r3, r7, r0
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d12c      	bne.n	80083ae <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	699a      	ldr	r2, [r3, #24]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	492e      	ldr	r1, [pc, #184]	@ (8008418 <HAL_RTC_Init+0x140>)
 8008360:	400a      	ands	r2, r1
 8008362:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6999      	ldr	r1, [r3, #24]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	689a      	ldr	r2, [r3, #8]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	695b      	ldr	r3, [r3, #20]
 8008372:	431a      	orrs	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	69db      	ldr	r3, [r3, #28]
 8008378:	431a      	orrs	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	430a      	orrs	r2, r1
 8008380:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	6912      	ldr	r2, [r2, #16]
 800838a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6919      	ldr	r1, [r3, #16]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	041a      	lsls	r2, r3, #16
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	430a      	orrs	r2, r1
 800839e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80083a0:	183c      	adds	r4, r7, r0
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	0018      	movs	r0, r3
 80083a6:	f000 fc1f 	bl	8008be8 <RTC_ExitInitMode>
 80083aa:	0003      	movs	r3, r0
 80083ac:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80083ae:	230f      	movs	r3, #15
 80083b0:	18fb      	adds	r3, r7, r3
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d116      	bne.n	80083e6 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	699a      	ldr	r2, [r3, #24]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	00d2      	lsls	r2, r2, #3
 80083c4:	08d2      	lsrs	r2, r2, #3
 80083c6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6999      	ldr	r1, [r3, #24]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	431a      	orrs	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	699b      	ldr	r3, [r3, #24]
 80083dc:	431a      	orrs	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	430a      	orrs	r2, r1
 80083e4:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	22ff      	movs	r2, #255	@ 0xff
 80083ec:	625a      	str	r2, [r3, #36]	@ 0x24
 80083ee:	e003      	b.n	80083f8 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80083f0:	230f      	movs	r3, #15
 80083f2:	18fb      	adds	r3, r7, r3
 80083f4:	2200      	movs	r2, #0
 80083f6:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80083f8:	230f      	movs	r3, #15
 80083fa:	18fb      	adds	r3, r7, r3
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d103      	bne.n	800840a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2229      	movs	r2, #41	@ 0x29
 8008406:	2101      	movs	r1, #1
 8008408:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800840a:	230f      	movs	r3, #15
 800840c:	18fb      	adds	r3, r7, r3
 800840e:	781b      	ldrb	r3, [r3, #0]
}
 8008410:	0018      	movs	r0, r3
 8008412:	46bd      	mov	sp, r7
 8008414:	b004      	add	sp, #16
 8008416:	bdb0      	pop	{r4, r5, r7, pc}
 8008418:	fb8fffbf 	.word	0xfb8fffbf

0800841c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800841c:	b5b0      	push	{r4, r5, r7, lr}
 800841e:	b086      	sub	sp, #24
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2228      	movs	r2, #40	@ 0x28
 800842c:	5c9b      	ldrb	r3, [r3, r2]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d101      	bne.n	8008436 <HAL_RTC_SetTime+0x1a>
 8008432:	2302      	movs	r3, #2
 8008434:	e092      	b.n	800855c <HAL_RTC_SetTime+0x140>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2228      	movs	r2, #40	@ 0x28
 800843a:	2101      	movs	r1, #1
 800843c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2229      	movs	r2, #41	@ 0x29
 8008442:	2102      	movs	r1, #2
 8008444:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	22ca      	movs	r2, #202	@ 0xca
 800844c:	625a      	str	r2, [r3, #36]	@ 0x24
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2253      	movs	r2, #83	@ 0x53
 8008454:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008456:	2513      	movs	r5, #19
 8008458:	197c      	adds	r4, r7, r5
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	0018      	movs	r0, r3
 800845e:	f000 fb81 	bl	8008b64 <RTC_EnterInitMode>
 8008462:	0003      	movs	r3, r0
 8008464:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8008466:	197b      	adds	r3, r7, r5
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d162      	bne.n	8008534 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d125      	bne.n	80084c0 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	2240      	movs	r2, #64	@ 0x40
 800847c:	4013      	ands	r3, r2
 800847e:	d102      	bne.n	8008486 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	2200      	movs	r2, #0
 8008484:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	0018      	movs	r0, r3
 800848c:	f000 fbf0 	bl	8008c70 <RTC_ByteToBcd2>
 8008490:	0003      	movs	r3, r0
 8008492:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	785b      	ldrb	r3, [r3, #1]
 8008498:	0018      	movs	r0, r3
 800849a:	f000 fbe9 	bl	8008c70 <RTC_ByteToBcd2>
 800849e:	0003      	movs	r3, r0
 80084a0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80084a2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	789b      	ldrb	r3, [r3, #2]
 80084a8:	0018      	movs	r0, r3
 80084aa:	f000 fbe1 	bl	8008c70 <RTC_ByteToBcd2>
 80084ae:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80084b0:	0022      	movs	r2, r4
 80084b2:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	78db      	ldrb	r3, [r3, #3]
 80084b8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80084ba:	4313      	orrs	r3, r2
 80084bc:	617b      	str	r3, [r7, #20]
 80084be:	e017      	b.n	80084f0 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	2240      	movs	r2, #64	@ 0x40
 80084c8:	4013      	ands	r3, r2
 80084ca:	d102      	bne.n	80084d2 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	2200      	movs	r2, #0
 80084d0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	785b      	ldrb	r3, [r3, #1]
 80084dc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80084de:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80084e0:	68ba      	ldr	r2, [r7, #8]
 80084e2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80084e4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	78db      	ldrb	r3, [r3, #3]
 80084ea:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80084ec:	4313      	orrs	r3, r2
 80084ee:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	697a      	ldr	r2, [r7, #20]
 80084f6:	491b      	ldr	r1, [pc, #108]	@ (8008564 <HAL_RTC_SetTime+0x148>)
 80084f8:	400a      	ands	r2, r1
 80084fa:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	699a      	ldr	r2, [r3, #24]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4918      	ldr	r1, [pc, #96]	@ (8008568 <HAL_RTC_SetTime+0x14c>)
 8008508:	400a      	ands	r2, r1
 800850a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6999      	ldr	r1, [r3, #24]
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	68da      	ldr	r2, [r3, #12]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	431a      	orrs	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	430a      	orrs	r2, r1
 8008522:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008524:	2313      	movs	r3, #19
 8008526:	18fc      	adds	r4, r7, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	0018      	movs	r0, r3
 800852c:	f000 fb5c 	bl	8008be8 <RTC_ExitInitMode>
 8008530:	0003      	movs	r3, r0
 8008532:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	22ff      	movs	r2, #255	@ 0xff
 800853a:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 800853c:	2313      	movs	r3, #19
 800853e:	18fb      	adds	r3, r7, r3
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d103      	bne.n	800854e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2229      	movs	r2, #41	@ 0x29
 800854a:	2101      	movs	r1, #1
 800854c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2228      	movs	r2, #40	@ 0x28
 8008552:	2100      	movs	r1, #0
 8008554:	5499      	strb	r1, [r3, r2]

  return status;
 8008556:	2313      	movs	r3, #19
 8008558:	18fb      	adds	r3, r7, r3
 800855a:	781b      	ldrb	r3, [r3, #0]
}
 800855c:	0018      	movs	r0, r3
 800855e:	46bd      	mov	sp, r7
 8008560:	b006      	add	sp, #24
 8008562:	bdb0      	pop	{r4, r5, r7, pc}
 8008564:	007f7f7f 	.word	0x007f7f7f
 8008568:	fffbffff 	.word	0xfffbffff

0800856c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800856c:	b5b0      	push	{r4, r5, r7, lr}
 800856e:	b086      	sub	sp, #24
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2228      	movs	r2, #40	@ 0x28
 800857c:	5c9b      	ldrb	r3, [r3, r2]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d101      	bne.n	8008586 <HAL_RTC_SetDate+0x1a>
 8008582:	2302      	movs	r3, #2
 8008584:	e07e      	b.n	8008684 <HAL_RTC_SetDate+0x118>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2228      	movs	r2, #40	@ 0x28
 800858a:	2101      	movs	r1, #1
 800858c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2229      	movs	r2, #41	@ 0x29
 8008592:	2102      	movs	r1, #2
 8008594:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10e      	bne.n	80085ba <HAL_RTC_SetDate+0x4e>
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	785b      	ldrb	r3, [r3, #1]
 80085a0:	001a      	movs	r2, r3
 80085a2:	2310      	movs	r3, #16
 80085a4:	4013      	ands	r3, r2
 80085a6:	d008      	beq.n	80085ba <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	785b      	ldrb	r3, [r3, #1]
 80085ac:	2210      	movs	r2, #16
 80085ae:	4393      	bics	r3, r2
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	330a      	adds	r3, #10
 80085b4:	b2da      	uxtb	r2, r3
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d11c      	bne.n	80085fa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	78db      	ldrb	r3, [r3, #3]
 80085c4:	0018      	movs	r0, r3
 80085c6:	f000 fb53 	bl	8008c70 <RTC_ByteToBcd2>
 80085ca:	0003      	movs	r3, r0
 80085cc:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	785b      	ldrb	r3, [r3, #1]
 80085d2:	0018      	movs	r0, r3
 80085d4:	f000 fb4c 	bl	8008c70 <RTC_ByteToBcd2>
 80085d8:	0003      	movs	r3, r0
 80085da:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80085dc:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	789b      	ldrb	r3, [r3, #2]
 80085e2:	0018      	movs	r0, r3
 80085e4:	f000 fb44 	bl	8008c70 <RTC_ByteToBcd2>
 80085e8:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80085ea:	0022      	movs	r2, r4
 80085ec:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80085f4:	4313      	orrs	r3, r2
 80085f6:	617b      	str	r3, [r7, #20]
 80085f8:	e00e      	b.n	8008618 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	78db      	ldrb	r3, [r3, #3]
 80085fe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	785b      	ldrb	r3, [r3, #1]
 8008604:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008606:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800860c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008614:	4313      	orrs	r3, r2
 8008616:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	22ca      	movs	r2, #202	@ 0xca
 800861e:	625a      	str	r2, [r3, #36]	@ 0x24
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2253      	movs	r2, #83	@ 0x53
 8008626:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008628:	2513      	movs	r5, #19
 800862a:	197c      	adds	r4, r7, r5
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	0018      	movs	r0, r3
 8008630:	f000 fa98 	bl	8008b64 <RTC_EnterInitMode>
 8008634:	0003      	movs	r3, r0
 8008636:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8008638:	0028      	movs	r0, r5
 800863a:	183b      	adds	r3, r7, r0
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d10c      	bne.n	800865c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	4910      	ldr	r1, [pc, #64]	@ (800868c <HAL_RTC_SetDate+0x120>)
 800864a:	400a      	ands	r2, r1
 800864c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800864e:	183c      	adds	r4, r7, r0
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	0018      	movs	r0, r3
 8008654:	f000 fac8 	bl	8008be8 <RTC_ExitInitMode>
 8008658:	0003      	movs	r3, r0
 800865a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	22ff      	movs	r2, #255	@ 0xff
 8008662:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8008664:	2313      	movs	r3, #19
 8008666:	18fb      	adds	r3, r7, r3
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d103      	bne.n	8008676 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2229      	movs	r2, #41	@ 0x29
 8008672:	2101      	movs	r1, #1
 8008674:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2228      	movs	r2, #40	@ 0x28
 800867a:	2100      	movs	r1, #0
 800867c:	5499      	strb	r1, [r3, r2]

  return status;
 800867e:	2313      	movs	r3, #19
 8008680:	18fb      	adds	r3, r7, r3
 8008682:	781b      	ldrb	r3, [r3, #0]
}
 8008684:	0018      	movs	r0, r3
 8008686:	46bd      	mov	sp, r7
 8008688:	b006      	add	sp, #24
 800868a:	bdb0      	pop	{r4, r5, r7, pc}
 800868c:	00ffff3f 	.word	0x00ffff3f

08008690 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008690:	b590      	push	{r4, r7, lr}
 8008692:	b089      	sub	sp, #36	@ 0x24
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2228      	movs	r2, #40	@ 0x28
 80086a0:	5c9b      	ldrb	r3, [r3, r2]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d101      	bne.n	80086aa <HAL_RTC_SetAlarm_IT+0x1a>
 80086a6:	2302      	movs	r3, #2
 80086a8:	e127      	b.n	80088fa <HAL_RTC_SetAlarm_IT+0x26a>
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2228      	movs	r2, #40	@ 0x28
 80086ae:	2101      	movs	r1, #1
 80086b0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2229      	movs	r2, #41	@ 0x29
 80086b6:	2102      	movs	r1, #2
 80086b8:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d136      	bne.n	800872e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	2240      	movs	r2, #64	@ 0x40
 80086c8:	4013      	ands	r3, r2
 80086ca:	d102      	bne.n	80086d2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	2200      	movs	r2, #0
 80086d0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	0018      	movs	r0, r3
 80086d8:	f000 faca 	bl	8008c70 <RTC_ByteToBcd2>
 80086dc:	0003      	movs	r3, r0
 80086de:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	785b      	ldrb	r3, [r3, #1]
 80086e4:	0018      	movs	r0, r3
 80086e6:	f000 fac3 	bl	8008c70 <RTC_ByteToBcd2>
 80086ea:	0003      	movs	r3, r0
 80086ec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80086ee:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	789b      	ldrb	r3, [r3, #2]
 80086f4:	0018      	movs	r0, r3
 80086f6:	f000 fabb 	bl	8008c70 <RTC_ByteToBcd2>
 80086fa:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80086fc:	0022      	movs	r2, r4
 80086fe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	78db      	ldrb	r3, [r3, #3]
 8008704:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008706:	431a      	orrs	r2, r3
 8008708:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	2220      	movs	r2, #32
 800870e:	5c9b      	ldrb	r3, [r3, r2]
 8008710:	0018      	movs	r0, r3
 8008712:	f000 faad 	bl	8008c70 <RTC_ByteToBcd2>
 8008716:	0003      	movs	r3, r0
 8008718:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800871a:	0022      	movs	r2, r4
 800871c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008722:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008728:	4313      	orrs	r3, r2
 800872a:	61fb      	str	r3, [r7, #28]
 800872c:	e022      	b.n	8008774 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	2240      	movs	r2, #64	@ 0x40
 8008736:	4013      	ands	r3, r2
 8008738:	d102      	bne.n	8008740 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2200      	movs	r2, #0
 800873e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	785b      	ldrb	r3, [r3, #1]
 800874a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800874c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008752:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	78db      	ldrb	r3, [r3, #3]
 8008758:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800875a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	2120      	movs	r1, #32
 8008760:	5c5b      	ldrb	r3, [r3, r1]
 8008762:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008764:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800876a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008770:	4313      	orrs	r3, r2
 8008772:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	685a      	ldr	r2, [r3, #4]
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	4313      	orrs	r3, r2
 800877e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	22ca      	movs	r2, #202	@ 0xca
 8008786:	625a      	str	r2, [r3, #36]	@ 0x24
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	2253      	movs	r2, #83	@ 0x53
 800878e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008794:	2380      	movs	r3, #128	@ 0x80
 8008796:	005b      	lsls	r3, r3, #1
 8008798:	429a      	cmp	r2, r3
 800879a:	d14c      	bne.n	8008836 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	699a      	ldr	r2, [r3, #24]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4957      	ldr	r1, [pc, #348]	@ (8008904 <HAL_RTC_SetAlarm_IT+0x274>)
 80087a8:	400a      	ands	r2, r1
 80087aa:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2101      	movs	r1, #1
 80087b8:	430a      	orrs	r2, r1
 80087ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 80087bc:	f7fd fcee 	bl	800619c <HAL_GetTick>
 80087c0:	0003      	movs	r3, r0
 80087c2:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80087c4:	e016      	b.n	80087f4 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80087c6:	f7fd fce9 	bl	800619c <HAL_GetTick>
 80087ca:	0002      	movs	r2, r0
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	1ad2      	subs	r2, r2, r3
 80087d0:	23fa      	movs	r3, #250	@ 0xfa
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d90d      	bls.n	80087f4 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	22ff      	movs	r2, #255	@ 0xff
 80087de:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2229      	movs	r2, #41	@ 0x29
 80087e4:	2103      	movs	r1, #3
 80087e6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2228      	movs	r2, #40	@ 0x28
 80087ec:	2100      	movs	r1, #0
 80087ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80087f0:	2303      	movs	r3, #3
 80087f2:	e082      	b.n	80088fa <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	2201      	movs	r2, #1
 80087fc:	4013      	ands	r3, r2
 80087fe:	d0e2      	beq.n	80087c6 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	69fa      	ldr	r2, [r7, #28]
 8008806:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	69ba      	ldr	r2, [r7, #24]
 800880e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	699a      	ldr	r2, [r3, #24]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2180      	movs	r1, #128	@ 0x80
 800881c:	0049      	lsls	r1, r1, #1
 800881e:	430a      	orrs	r2, r1
 8008820:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	699a      	ldr	r2, [r3, #24]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2180      	movs	r1, #128	@ 0x80
 800882e:	0149      	lsls	r1, r1, #5
 8008830:	430a      	orrs	r2, r1
 8008832:	619a      	str	r2, [r3, #24]
 8008834:	e04b      	b.n	80088ce <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	699a      	ldr	r2, [r3, #24]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4931      	ldr	r1, [pc, #196]	@ (8008908 <HAL_RTC_SetAlarm_IT+0x278>)
 8008842:	400a      	ands	r2, r1
 8008844:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2102      	movs	r1, #2
 8008852:	430a      	orrs	r2, r1
 8008854:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8008856:	f7fd fca1 	bl	800619c <HAL_GetTick>
 800885a:	0003      	movs	r3, r0
 800885c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800885e:	e016      	b.n	800888e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008860:	f7fd fc9c 	bl	800619c <HAL_GetTick>
 8008864:	0002      	movs	r2, r0
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	1ad2      	subs	r2, r2, r3
 800886a:	23fa      	movs	r3, #250	@ 0xfa
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	429a      	cmp	r2, r3
 8008870:	d90d      	bls.n	800888e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	22ff      	movs	r2, #255	@ 0xff
 8008878:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2229      	movs	r2, #41	@ 0x29
 800887e:	2103      	movs	r1, #3
 8008880:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2228      	movs	r2, #40	@ 0x28
 8008886:	2100      	movs	r1, #0
 8008888:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	e035      	b.n	80088fa <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	2202      	movs	r2, #2
 8008896:	4013      	ands	r3, r2
 8008898:	d0e2      	beq.n	8008860 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	69fa      	ldr	r2, [r7, #28]
 80088a0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	69ba      	ldr	r2, [r7, #24]
 80088a8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	699a      	ldr	r2, [r3, #24]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2180      	movs	r1, #128	@ 0x80
 80088b6:	0089      	lsls	r1, r1, #2
 80088b8:	430a      	orrs	r2, r1
 80088ba:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	699a      	ldr	r2, [r3, #24]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2180      	movs	r1, #128	@ 0x80
 80088c8:	0189      	lsls	r1, r1, #6
 80088ca:	430a      	orrs	r2, r1
 80088cc:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80088ce:	4a0f      	ldr	r2, [pc, #60]	@ (800890c <HAL_RTC_SetAlarm_IT+0x27c>)
 80088d0:	2380      	movs	r3, #128	@ 0x80
 80088d2:	58d3      	ldr	r3, [r2, r3]
 80088d4:	490d      	ldr	r1, [pc, #52]	@ (800890c <HAL_RTC_SetAlarm_IT+0x27c>)
 80088d6:	2280      	movs	r2, #128	@ 0x80
 80088d8:	0312      	lsls	r2, r2, #12
 80088da:	4313      	orrs	r3, r2
 80088dc:	2280      	movs	r2, #128	@ 0x80
 80088de:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	22ff      	movs	r2, #255	@ 0xff
 80088e6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2229      	movs	r2, #41	@ 0x29
 80088ec:	2101      	movs	r1, #1
 80088ee:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2228      	movs	r2, #40	@ 0x28
 80088f4:	2100      	movs	r1, #0
 80088f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	0018      	movs	r0, r3
 80088fc:	46bd      	mov	sp, r7
 80088fe:	b009      	add	sp, #36	@ 0x24
 8008900:	bd90      	pop	{r4, r7, pc}
 8008902:	46c0      	nop			@ (mov r8, r8)
 8008904:	fffffeff 	.word	0xfffffeff
 8008908:	fffffdff 	.word	0xfffffdff
 800890c:	40021800 	.word	0x40021800

08008910 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
 800891c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	2380      	movs	r3, #128	@ 0x80
 8008922:	005b      	lsls	r3, r3, #1
 8008924:	429a      	cmp	r2, r3
 8008926:	d144      	bne.n	80089b2 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	2280      	movs	r2, #128	@ 0x80
 800892c:	0052      	lsls	r2, r2, #1
 800892e:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008936:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800893e:	045b      	lsls	r3, r3, #17
 8008940:	0c5b      	lsrs	r3, r3, #17
 8008942:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	0c1b      	lsrs	r3, r3, #16
 8008948:	b2db      	uxtb	r3, r3
 800894a:	223f      	movs	r2, #63	@ 0x3f
 800894c:	4013      	ands	r3, r2
 800894e:	b2da      	uxtb	r2, r3
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	0a1b      	lsrs	r3, r3, #8
 8008958:	b2db      	uxtb	r3, r3
 800895a:	227f      	movs	r2, #127	@ 0x7f
 800895c:	4013      	ands	r3, r2
 800895e:	b2da      	uxtb	r2, r3
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	b2db      	uxtb	r3, r3
 8008968:	227f      	movs	r2, #127	@ 0x7f
 800896a:	4013      	ands	r3, r2
 800896c:	b2da      	uxtb	r2, r3
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	0d9b      	lsrs	r3, r3, #22
 8008976:	b2db      	uxtb	r3, r3
 8008978:	2201      	movs	r2, #1
 800897a:	4013      	ands	r3, r2
 800897c:	b2da      	uxtb	r2, r3
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	693a      	ldr	r2, [r7, #16]
 8008986:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	0e1b      	lsrs	r3, r3, #24
 800898c:	b2db      	uxtb	r3, r3
 800898e:	223f      	movs	r2, #63	@ 0x3f
 8008990:	4013      	ands	r3, r2
 8008992:	b2d9      	uxtb	r1, r3
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	2220      	movs	r2, #32
 8008998:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	2380      	movs	r3, #128	@ 0x80
 800899e:	05db      	lsls	r3, r3, #23
 80089a0:	401a      	ands	r2, r3
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	4a3b      	ldr	r2, [pc, #236]	@ (8008a98 <HAL_RTC_GetAlarm+0x188>)
 80089aa:	401a      	ands	r2, r3
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	615a      	str	r2, [r3, #20]
 80089b0:	e043      	b.n	8008a3a <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	2280      	movs	r2, #128	@ 0x80
 80089b6:	0092      	lsls	r2, r2, #2
 80089b8:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089c0:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089c8:	045b      	lsls	r3, r3, #17
 80089ca:	0c5b      	lsrs	r3, r3, #17
 80089cc:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	0c1b      	lsrs	r3, r3, #16
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	223f      	movs	r2, #63	@ 0x3f
 80089d6:	4013      	ands	r3, r2
 80089d8:	b2da      	uxtb	r2, r3
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	0a1b      	lsrs	r3, r3, #8
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	227f      	movs	r2, #127	@ 0x7f
 80089e6:	4013      	ands	r3, r2
 80089e8:	b2da      	uxtb	r2, r3
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	227f      	movs	r2, #127	@ 0x7f
 80089f4:	4013      	ands	r3, r2
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	0d9b      	lsrs	r3, r3, #22
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2201      	movs	r2, #1
 8008a04:	4013      	ands	r3, r2
 8008a06:	b2da      	uxtb	r2, r3
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	693a      	ldr	r2, [r7, #16]
 8008a10:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	0e1b      	lsrs	r3, r3, #24
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	223f      	movs	r2, #63	@ 0x3f
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	b2d9      	uxtb	r1, r3
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	2220      	movs	r2, #32
 8008a22:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	2380      	movs	r3, #128	@ 0x80
 8008a28:	05db      	lsls	r3, r3, #23
 8008a2a:	401a      	ands	r2, r3
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	4a19      	ldr	r2, [pc, #100]	@ (8008a98 <HAL_RTC_GetAlarm+0x188>)
 8008a34:	401a      	ands	r2, r3
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d125      	bne.n	8008a8c <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	0018      	movs	r0, r3
 8008a46:	f000 f93b 	bl	8008cc0 <RTC_Bcd2ToByte>
 8008a4a:	0003      	movs	r3, r0
 8008a4c:	001a      	movs	r2, r3
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	785b      	ldrb	r3, [r3, #1]
 8008a56:	0018      	movs	r0, r3
 8008a58:	f000 f932 	bl	8008cc0 <RTC_Bcd2ToByte>
 8008a5c:	0003      	movs	r3, r0
 8008a5e:	001a      	movs	r2, r3
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	789b      	ldrb	r3, [r3, #2]
 8008a68:	0018      	movs	r0, r3
 8008a6a:	f000 f929 	bl	8008cc0 <RTC_Bcd2ToByte>
 8008a6e:	0003      	movs	r3, r0
 8008a70:	001a      	movs	r2, r3
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	2220      	movs	r2, #32
 8008a7a:	5c9b      	ldrb	r3, [r3, r2]
 8008a7c:	0018      	movs	r0, r3
 8008a7e:	f000 f91f 	bl	8008cc0 <RTC_Bcd2ToByte>
 8008a82:	0003      	movs	r3, r0
 8008a84:	0019      	movs	r1, r3
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	2220      	movs	r2, #32
 8008a8a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	0018      	movs	r0, r3
 8008a90:	46bd      	mov	sp, r7
 8008a92:	b006      	add	sp, #24
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	46c0      	nop			@ (mov r8, r8)
 8008a98:	80808080 	.word	0x80808080

08008a9c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	699a      	ldr	r2, [r3, #24]
 8008aaa:	2380      	movs	r3, #128	@ 0x80
 8008aac:	015b      	lsls	r3, r3, #5
 8008aae:	4013      	ands	r3, r2
 8008ab0:	d011      	beq.n	8008ad6 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ab8:	2201      	movs	r2, #1
 8008aba:	4013      	ands	r3, r2
 8008abc:	d00b      	beq.n	8008ad6 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2101      	movs	r1, #1
 8008aca:	430a      	orrs	r2, r1
 8008acc:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	0018      	movs	r0, r3
 8008ad2:	f7fc fb13 	bl	80050fc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	699a      	ldr	r2, [r3, #24]
 8008adc:	2380      	movs	r3, #128	@ 0x80
 8008ade:	019b      	lsls	r3, r3, #6
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	d011      	beq.n	8008b08 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aea:	2202      	movs	r2, #2
 8008aec:	4013      	ands	r3, r2
 8008aee:	d00b      	beq.n	8008b08 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2102      	movs	r1, #2
 8008afc:	430a      	orrs	r2, r1
 8008afe:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	0018      	movs	r0, r3
 8008b04:	f000 f9ba 	bl	8008e7c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2229      	movs	r2, #41	@ 0x29
 8008b0c:	2101      	movs	r1, #1
 8008b0e:	5499      	strb	r1, [r3, r2]
}
 8008b10:	46c0      	nop			@ (mov r8, r8)
 8008b12:	46bd      	mov	sp, r7
 8008b14:	b002      	add	sp, #8
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a0e      	ldr	r2, [pc, #56]	@ (8008b60 <HAL_RTC_WaitForSynchro+0x48>)
 8008b26:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008b28:	f7fd fb38 	bl	800619c <HAL_GetTick>
 8008b2c:	0003      	movs	r3, r0
 8008b2e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8008b30:	e00a      	b.n	8008b48 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008b32:	f7fd fb33 	bl	800619c <HAL_GetTick>
 8008b36:	0002      	movs	r2, r0
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	1ad2      	subs	r2, r2, r3
 8008b3c:	23fa      	movs	r3, #250	@ 0xfa
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d901      	bls.n	8008b48 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e006      	b.n	8008b56 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	2220      	movs	r2, #32
 8008b50:	4013      	ands	r3, r2
 8008b52:	d0ee      	beq.n	8008b32 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	0018      	movs	r0, r3
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	b004      	add	sp, #16
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	46c0      	nop			@ (mov r8, r8)
 8008b60:	0001005f 	.word	0x0001005f

08008b64 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8008b6c:	230f      	movs	r3, #15
 8008b6e:	18fb      	adds	r3, r7, r3
 8008b70:	2200      	movs	r2, #0
 8008b72:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	2240      	movs	r2, #64	@ 0x40
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	d12c      	bne.n	8008bda <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68da      	ldr	r2, [r3, #12]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2180      	movs	r1, #128	@ 0x80
 8008b8c:	430a      	orrs	r2, r1
 8008b8e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008b90:	f7fd fb04 	bl	800619c <HAL_GetTick>
 8008b94:	0003      	movs	r3, r0
 8008b96:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008b98:	e014      	b.n	8008bc4 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8008b9a:	f7fd faff 	bl	800619c <HAL_GetTick>
 8008b9e:	0002      	movs	r2, r0
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	1ad2      	subs	r2, r2, r3
 8008ba4:	200f      	movs	r0, #15
 8008ba6:	183b      	adds	r3, r7, r0
 8008ba8:	1839      	adds	r1, r7, r0
 8008baa:	7809      	ldrb	r1, [r1, #0]
 8008bac:	7019      	strb	r1, [r3, #0]
 8008bae:	23fa      	movs	r3, #250	@ 0xfa
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d906      	bls.n	8008bc4 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8008bb6:	183b      	adds	r3, r7, r0
 8008bb8:	2203      	movs	r2, #3
 8008bba:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2229      	movs	r2, #41	@ 0x29
 8008bc0:	2103      	movs	r1, #3
 8008bc2:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	2240      	movs	r2, #64	@ 0x40
 8008bcc:	4013      	ands	r3, r2
 8008bce:	d104      	bne.n	8008bda <RTC_EnterInitMode+0x76>
 8008bd0:	230f      	movs	r3, #15
 8008bd2:	18fb      	adds	r3, r7, r3
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	2b03      	cmp	r3, #3
 8008bd8:	d1df      	bne.n	8008b9a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008bda:	230f      	movs	r3, #15
 8008bdc:	18fb      	adds	r3, r7, r3
 8008bde:	781b      	ldrb	r3, [r3, #0]
}
 8008be0:	0018      	movs	r0, r3
 8008be2:	46bd      	mov	sp, r7
 8008be4:	b004      	add	sp, #16
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008be8:	b590      	push	{r4, r7, lr}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bf0:	240f      	movs	r4, #15
 8008bf2:	193b      	adds	r3, r7, r4
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8008c6c <RTC_ExitInitMode+0x84>)
 8008bfa:	68da      	ldr	r2, [r3, #12]
 8008bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8008c6c <RTC_ExitInitMode+0x84>)
 8008bfe:	2180      	movs	r1, #128	@ 0x80
 8008c00:	438a      	bics	r2, r1
 8008c02:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008c04:	4b19      	ldr	r3, [pc, #100]	@ (8008c6c <RTC_ExitInitMode+0x84>)
 8008c06:	699b      	ldr	r3, [r3, #24]
 8008c08:	2220      	movs	r2, #32
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	d10d      	bne.n	8008c2a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	0018      	movs	r0, r3
 8008c12:	f7ff ff81 	bl	8008b18 <HAL_RTC_WaitForSynchro>
 8008c16:	1e03      	subs	r3, r0, #0
 8008c18:	d021      	beq.n	8008c5e <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2229      	movs	r2, #41	@ 0x29
 8008c1e:	2103      	movs	r1, #3
 8008c20:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8008c22:	193b      	adds	r3, r7, r4
 8008c24:	2203      	movs	r2, #3
 8008c26:	701a      	strb	r2, [r3, #0]
 8008c28:	e019      	b.n	8008c5e <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008c2a:	4b10      	ldr	r3, [pc, #64]	@ (8008c6c <RTC_ExitInitMode+0x84>)
 8008c2c:	699a      	ldr	r2, [r3, #24]
 8008c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8008c6c <RTC_ExitInitMode+0x84>)
 8008c30:	2120      	movs	r1, #32
 8008c32:	438a      	bics	r2, r1
 8008c34:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	0018      	movs	r0, r3
 8008c3a:	f7ff ff6d 	bl	8008b18 <HAL_RTC_WaitForSynchro>
 8008c3e:	1e03      	subs	r3, r0, #0
 8008c40:	d007      	beq.n	8008c52 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2229      	movs	r2, #41	@ 0x29
 8008c46:	2103      	movs	r1, #3
 8008c48:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8008c4a:	230f      	movs	r3, #15
 8008c4c:	18fb      	adds	r3, r7, r3
 8008c4e:	2203      	movs	r2, #3
 8008c50:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008c52:	4b06      	ldr	r3, [pc, #24]	@ (8008c6c <RTC_ExitInitMode+0x84>)
 8008c54:	699a      	ldr	r2, [r3, #24]
 8008c56:	4b05      	ldr	r3, [pc, #20]	@ (8008c6c <RTC_ExitInitMode+0x84>)
 8008c58:	2120      	movs	r1, #32
 8008c5a:	430a      	orrs	r2, r1
 8008c5c:	619a      	str	r2, [r3, #24]
  }

  return status;
 8008c5e:	230f      	movs	r3, #15
 8008c60:	18fb      	adds	r3, r7, r3
 8008c62:	781b      	ldrb	r3, [r3, #0]
}
 8008c64:	0018      	movs	r0, r3
 8008c66:	46bd      	mov	sp, r7
 8008c68:	b005      	add	sp, #20
 8008c6a:	bd90      	pop	{r4, r7, pc}
 8008c6c:	40002800 	.word	0x40002800

08008c70 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b084      	sub	sp, #16
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	0002      	movs	r2, r0
 8008c78:	1dfb      	adds	r3, r7, #7
 8008c7a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8008c80:	230b      	movs	r3, #11
 8008c82:	18fb      	adds	r3, r7, r3
 8008c84:	1dfa      	adds	r2, r7, #7
 8008c86:	7812      	ldrb	r2, [r2, #0]
 8008c88:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8008c8a:	e008      	b.n	8008c9e <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8008c92:	220b      	movs	r2, #11
 8008c94:	18bb      	adds	r3, r7, r2
 8008c96:	18ba      	adds	r2, r7, r2
 8008c98:	7812      	ldrb	r2, [r2, #0]
 8008c9a:	3a0a      	subs	r2, #10
 8008c9c:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8008c9e:	210b      	movs	r1, #11
 8008ca0:	187b      	adds	r3, r7, r1
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	2b09      	cmp	r3, #9
 8008ca6:	d8f1      	bhi.n	8008c8c <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	011b      	lsls	r3, r3, #4
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	187b      	adds	r3, r7, r1
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	b2db      	uxtb	r3, r3
}
 8008cb8:	0018      	movs	r0, r3
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	b004      	add	sp, #16
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	0002      	movs	r2, r0
 8008cc8:	1dfb      	adds	r3, r7, #7
 8008cca:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8008ccc:	1dfb      	adds	r3, r7, #7
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	091b      	lsrs	r3, r3, #4
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	001a      	movs	r2, r3
 8008cd6:	0013      	movs	r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	189b      	adds	r3, r3, r2
 8008cdc:	005b      	lsls	r3, r3, #1
 8008cde:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	b2da      	uxtb	r2, r3
 8008ce4:	1dfb      	adds	r3, r7, #7
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	210f      	movs	r1, #15
 8008cea:	400b      	ands	r3, r1
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	18d3      	adds	r3, r2, r3
 8008cf0:	b2db      	uxtb	r3, r3
}
 8008cf2:	0018      	movs	r0, r3
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	b004      	add	sp, #16
 8008cf8:	bd80      	pop	{r7, pc}
	...

08008cfc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b086      	sub	sp, #24
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2228      	movs	r2, #40	@ 0x28
 8008d0c:	5c9b      	ldrb	r3, [r3, r2]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d101      	bne.n	8008d16 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8008d12:	2302      	movs	r3, #2
 8008d14:	e082      	b.n	8008e1c <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2228      	movs	r2, #40	@ 0x28
 8008d1a:	2101      	movs	r1, #1
 8008d1c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2229      	movs	r2, #41	@ 0x29
 8008d22:	2102      	movs	r1, #2
 8008d24:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	22ca      	movs	r2, #202	@ 0xca
 8008d2c:	625a      	str	r2, [r3, #36]	@ 0x24
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2253      	movs	r2, #83	@ 0x53
 8008d34:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	699a      	ldr	r2, [r3, #24]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4938      	ldr	r1, [pc, #224]	@ (8008e24 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 8008d42:	400a      	ands	r2, r1
 8008d44:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2104      	movs	r1, #4
 8008d52:	430a      	orrs	r2, r1
 8008d54:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008d56:	4b34      	ldr	r3, [pc, #208]	@ (8008e28 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	2240      	movs	r2, #64	@ 0x40
 8008d5c:	4013      	ands	r3, r2
 8008d5e:	d121      	bne.n	8008da4 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 8008d60:	f7fd fa1c 	bl	800619c <HAL_GetTick>
 8008d64:	0003      	movs	r3, r0
 8008d66:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008d68:	e016      	b.n	8008d98 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008d6a:	f7fd fa17 	bl	800619c <HAL_GetTick>
 8008d6e:	0002      	movs	r2, r0
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	1ad2      	subs	r2, r2, r3
 8008d74:	23fa      	movs	r3, #250	@ 0xfa
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d90d      	bls.n	8008d98 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	22ff      	movs	r2, #255	@ 0xff
 8008d82:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2229      	movs	r2, #41	@ 0x29
 8008d88:	2103      	movs	r1, #3
 8008d8a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2228      	movs	r2, #40	@ 0x28
 8008d90:	2100      	movs	r1, #0
 8008d92:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008d94:	2303      	movs	r3, #3
 8008d96:	e041      	b.n	8008e1c <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	2204      	movs	r2, #4
 8008da0:	4013      	ands	r3, r2
 8008da2:	d0e2      	beq.n	8008d6a <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68ba      	ldr	r2, [r7, #8]
 8008daa:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	699a      	ldr	r2, [r3, #24]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2107      	movs	r1, #7
 8008db8:	438a      	bics	r2, r1
 8008dba:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6999      	ldr	r1, [r3, #24]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	430a      	orrs	r2, r1
 8008dca:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8008dcc:	4a17      	ldr	r2, [pc, #92]	@ (8008e2c <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8008dce:	2380      	movs	r3, #128	@ 0x80
 8008dd0:	58d3      	ldr	r3, [r2, r3]
 8008dd2:	4916      	ldr	r1, [pc, #88]	@ (8008e2c <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8008dd4:	2280      	movs	r2, #128	@ 0x80
 8008dd6:	0312      	lsls	r2, r2, #12
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	2280      	movs	r2, #128	@ 0x80
 8008ddc:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	699a      	ldr	r2, [r3, #24]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2180      	movs	r1, #128	@ 0x80
 8008dea:	01c9      	lsls	r1, r1, #7
 8008dec:	430a      	orrs	r2, r1
 8008dee:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	699a      	ldr	r2, [r3, #24]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2180      	movs	r1, #128	@ 0x80
 8008dfc:	00c9      	lsls	r1, r1, #3
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	22ff      	movs	r2, #255	@ 0xff
 8008e08:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2229      	movs	r2, #41	@ 0x29
 8008e0e:	2101      	movs	r1, #1
 8008e10:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2228      	movs	r2, #40	@ 0x28
 8008e16:	2100      	movs	r1, #0
 8008e18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	0018      	movs	r0, r3
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	b006      	add	sp, #24
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	fffffbff 	.word	0xfffffbff
 8008e28:	40002800 	.word	0x40002800
 8008e2c:	40021800 	.word	0x40021800

08008e30 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e3e:	2204      	movs	r2, #4
 8008e40:	4013      	ands	r3, r2
 8008e42:	d00b      	beq.n	8008e5c <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2104      	movs	r1, #4
 8008e50:	430a      	orrs	r2, r1
 8008e52:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	0018      	movs	r0, r3
 8008e58:	f000 f808 	bl	8008e6c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2229      	movs	r2, #41	@ 0x29
 8008e60:	2101      	movs	r1, #1
 8008e62:	5499      	strb	r1, [r3, r2]
}
 8008e64:	46c0      	nop			@ (mov r8, r8)
 8008e66:	46bd      	mov	sp, r7
 8008e68:	b002      	add	sp, #8
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8008e74:	46c0      	nop			@ (mov r8, r8)
 8008e76:	46bd      	mov	sp, r7
 8008e78:	b002      	add	sp, #8
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008e84:	46c0      	nop			@ (mov r8, r8)
 8008e86:	46bd      	mov	sp, r7
 8008e88:	b002      	add	sp, #8
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d101      	bne.n	8008e9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e0a8      	b.n	8008ff0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d109      	bne.n	8008eba <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	685a      	ldr	r2, [r3, #4]
 8008eaa:	2382      	movs	r3, #130	@ 0x82
 8008eac:	005b      	lsls	r3, r3, #1
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d009      	beq.n	8008ec6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	61da      	str	r2, [r3, #28]
 8008eb8:	e005      	b.n	8008ec6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	225d      	movs	r2, #93	@ 0x5d
 8008ed0:	5c9b      	ldrb	r3, [r3, r2]
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d107      	bne.n	8008ee8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	225c      	movs	r2, #92	@ 0x5c
 8008edc:	2100      	movs	r1, #0
 8008ede:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	0018      	movs	r0, r3
 8008ee4:	f7fc feda 	bl	8005c9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	225d      	movs	r2, #93	@ 0x5d
 8008eec:	2102      	movs	r1, #2
 8008eee:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2140      	movs	r1, #64	@ 0x40
 8008efc:	438a      	bics	r2, r1
 8008efe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	68da      	ldr	r2, [r3, #12]
 8008f04:	23e0      	movs	r3, #224	@ 0xe0
 8008f06:	00db      	lsls	r3, r3, #3
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d902      	bls.n	8008f12 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	60fb      	str	r3, [r7, #12]
 8008f10:	e002      	b.n	8008f18 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008f12:	2380      	movs	r3, #128	@ 0x80
 8008f14:	015b      	lsls	r3, r3, #5
 8008f16:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68da      	ldr	r2, [r3, #12]
 8008f1c:	23f0      	movs	r3, #240	@ 0xf0
 8008f1e:	011b      	lsls	r3, r3, #4
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d008      	beq.n	8008f36 <HAL_SPI_Init+0xaa>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	68da      	ldr	r2, [r3, #12]
 8008f28:	23e0      	movs	r3, #224	@ 0xe0
 8008f2a:	00db      	lsls	r3, r3, #3
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d002      	beq.n	8008f36 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	685a      	ldr	r2, [r3, #4]
 8008f3a:	2382      	movs	r3, #130	@ 0x82
 8008f3c:	005b      	lsls	r3, r3, #1
 8008f3e:	401a      	ands	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6899      	ldr	r1, [r3, #8]
 8008f44:	2384      	movs	r3, #132	@ 0x84
 8008f46:	021b      	lsls	r3, r3, #8
 8008f48:	400b      	ands	r3, r1
 8008f4a:	431a      	orrs	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	691b      	ldr	r3, [r3, #16]
 8008f50:	2102      	movs	r1, #2
 8008f52:	400b      	ands	r3, r1
 8008f54:	431a      	orrs	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	695b      	ldr	r3, [r3, #20]
 8008f5a:	2101      	movs	r1, #1
 8008f5c:	400b      	ands	r3, r1
 8008f5e:	431a      	orrs	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6999      	ldr	r1, [r3, #24]
 8008f64:	2380      	movs	r3, #128	@ 0x80
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	400b      	ands	r3, r1
 8008f6a:	431a      	orrs	r2, r3
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	69db      	ldr	r3, [r3, #28]
 8008f70:	2138      	movs	r1, #56	@ 0x38
 8008f72:	400b      	ands	r3, r1
 8008f74:	431a      	orrs	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	2180      	movs	r1, #128	@ 0x80
 8008f7c:	400b      	ands	r3, r1
 8008f7e:	431a      	orrs	r2, r3
 8008f80:	0011      	movs	r1, r2
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f86:	2380      	movs	r3, #128	@ 0x80
 8008f88:	019b      	lsls	r3, r3, #6
 8008f8a:	401a      	ands	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	430a      	orrs	r2, r1
 8008f92:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	0c1b      	lsrs	r3, r3, #16
 8008f9a:	2204      	movs	r2, #4
 8008f9c:	401a      	ands	r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa2:	2110      	movs	r1, #16
 8008fa4:	400b      	ands	r3, r1
 8008fa6:	431a      	orrs	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fac:	2108      	movs	r1, #8
 8008fae:	400b      	ands	r3, r1
 8008fb0:	431a      	orrs	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	68d9      	ldr	r1, [r3, #12]
 8008fb6:	23f0      	movs	r3, #240	@ 0xf0
 8008fb8:	011b      	lsls	r3, r3, #4
 8008fba:	400b      	ands	r3, r1
 8008fbc:	431a      	orrs	r2, r3
 8008fbe:	0011      	movs	r1, r2
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	2380      	movs	r3, #128	@ 0x80
 8008fc4:	015b      	lsls	r3, r3, #5
 8008fc6:	401a      	ands	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	430a      	orrs	r2, r1
 8008fce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	69da      	ldr	r2, [r3, #28]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4907      	ldr	r1, [pc, #28]	@ (8008ff8 <HAL_SPI_Init+0x16c>)
 8008fdc:	400a      	ands	r2, r1
 8008fde:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	225d      	movs	r2, #93	@ 0x5d
 8008fea:	2101      	movs	r1, #1
 8008fec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	0018      	movs	r0, r3
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	b004      	add	sp, #16
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	fffff7ff 	.word	0xfffff7ff

08008ffc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b088      	sub	sp, #32
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	603b      	str	r3, [r7, #0]
 8009008:	1dbb      	adds	r3, r7, #6
 800900a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800900c:	231f      	movs	r3, #31
 800900e:	18fb      	adds	r3, r7, r3
 8009010:	2200      	movs	r2, #0
 8009012:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	225c      	movs	r2, #92	@ 0x5c
 8009018:	5c9b      	ldrb	r3, [r3, r2]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d101      	bne.n	8009022 <HAL_SPI_Transmit+0x26>
 800901e:	2302      	movs	r3, #2
 8009020:	e147      	b.n	80092b2 <HAL_SPI_Transmit+0x2b6>
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	225c      	movs	r2, #92	@ 0x5c
 8009026:	2101      	movs	r1, #1
 8009028:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800902a:	f7fd f8b7 	bl	800619c <HAL_GetTick>
 800902e:	0003      	movs	r3, r0
 8009030:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009032:	2316      	movs	r3, #22
 8009034:	18fb      	adds	r3, r7, r3
 8009036:	1dba      	adds	r2, r7, #6
 8009038:	8812      	ldrh	r2, [r2, #0]
 800903a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	225d      	movs	r2, #93	@ 0x5d
 8009040:	5c9b      	ldrb	r3, [r3, r2]
 8009042:	b2db      	uxtb	r3, r3
 8009044:	2b01      	cmp	r3, #1
 8009046:	d004      	beq.n	8009052 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8009048:	231f      	movs	r3, #31
 800904a:	18fb      	adds	r3, r7, r3
 800904c:	2202      	movs	r2, #2
 800904e:	701a      	strb	r2, [r3, #0]
    goto error;
 8009050:	e128      	b.n	80092a4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d003      	beq.n	8009060 <HAL_SPI_Transmit+0x64>
 8009058:	1dbb      	adds	r3, r7, #6
 800905a:	881b      	ldrh	r3, [r3, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d104      	bne.n	800906a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8009060:	231f      	movs	r3, #31
 8009062:	18fb      	adds	r3, r7, r3
 8009064:	2201      	movs	r2, #1
 8009066:	701a      	strb	r2, [r3, #0]
    goto error;
 8009068:	e11c      	b.n	80092a4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	225d      	movs	r2, #93	@ 0x5d
 800906e:	2103      	movs	r1, #3
 8009070:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	1dba      	adds	r2, r7, #6
 8009082:	8812      	ldrh	r2, [r2, #0]
 8009084:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	1dba      	adds	r2, r7, #6
 800908a:	8812      	ldrh	r2, [r2, #0]
 800908c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2244      	movs	r2, #68	@ 0x44
 8009098:	2100      	movs	r1, #0
 800909a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2246      	movs	r2, #70	@ 0x46
 80090a0:	2100      	movs	r1, #0
 80090a2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	689a      	ldr	r2, [r3, #8]
 80090b4:	2380      	movs	r3, #128	@ 0x80
 80090b6:	021b      	lsls	r3, r3, #8
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d110      	bne.n	80090de <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2140      	movs	r1, #64	@ 0x40
 80090c8:	438a      	bics	r2, r1
 80090ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2180      	movs	r1, #128	@ 0x80
 80090d8:	01c9      	lsls	r1, r1, #7
 80090da:	430a      	orrs	r2, r1
 80090dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2240      	movs	r2, #64	@ 0x40
 80090e6:	4013      	ands	r3, r2
 80090e8:	2b40      	cmp	r3, #64	@ 0x40
 80090ea:	d007      	beq.n	80090fc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2140      	movs	r1, #64	@ 0x40
 80090f8:	430a      	orrs	r2, r1
 80090fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	68da      	ldr	r2, [r3, #12]
 8009100:	23e0      	movs	r3, #224	@ 0xe0
 8009102:	00db      	lsls	r3, r3, #3
 8009104:	429a      	cmp	r2, r3
 8009106:	d952      	bls.n	80091ae <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d004      	beq.n	800911a <HAL_SPI_Transmit+0x11e>
 8009110:	2316      	movs	r3, #22
 8009112:	18fb      	adds	r3, r7, r3
 8009114:	881b      	ldrh	r3, [r3, #0]
 8009116:	2b01      	cmp	r3, #1
 8009118:	d143      	bne.n	80091a2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800911e:	881a      	ldrh	r2, [r3, #0]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800912a:	1c9a      	adds	r2, r3, #2
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009134:	b29b      	uxth	r3, r3
 8009136:	3b01      	subs	r3, #1
 8009138:	b29a      	uxth	r2, r3
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800913e:	e030      	b.n	80091a2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	2202      	movs	r2, #2
 8009148:	4013      	ands	r3, r2
 800914a:	2b02      	cmp	r3, #2
 800914c:	d112      	bne.n	8009174 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009152:	881a      	ldrh	r2, [r3, #0]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800915e:	1c9a      	adds	r2, r3, #2
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009168:	b29b      	uxth	r3, r3
 800916a:	3b01      	subs	r3, #1
 800916c:	b29a      	uxth	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009172:	e016      	b.n	80091a2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009174:	f7fd f812 	bl	800619c <HAL_GetTick>
 8009178:	0002      	movs	r2, r0
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	1ad3      	subs	r3, r2, r3
 800917e:	683a      	ldr	r2, [r7, #0]
 8009180:	429a      	cmp	r2, r3
 8009182:	d802      	bhi.n	800918a <HAL_SPI_Transmit+0x18e>
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	3301      	adds	r3, #1
 8009188:	d102      	bne.n	8009190 <HAL_SPI_Transmit+0x194>
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d108      	bne.n	80091a2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8009190:	231f      	movs	r3, #31
 8009192:	18fb      	adds	r3, r7, r3
 8009194:	2203      	movs	r2, #3
 8009196:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	225d      	movs	r2, #93	@ 0x5d
 800919c:	2101      	movs	r1, #1
 800919e:	5499      	strb	r1, [r3, r2]
          goto error;
 80091a0:	e080      	b.n	80092a4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1c9      	bne.n	8009140 <HAL_SPI_Transmit+0x144>
 80091ac:	e053      	b.n	8009256 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d004      	beq.n	80091c0 <HAL_SPI_Transmit+0x1c4>
 80091b6:	2316      	movs	r3, #22
 80091b8:	18fb      	adds	r3, r7, r3
 80091ba:	881b      	ldrh	r3, [r3, #0]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d145      	bne.n	800924c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	330c      	adds	r3, #12
 80091ca:	7812      	ldrb	r2, [r2, #0]
 80091cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091d2:	1c5a      	adds	r2, r3, #1
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091dc:	b29b      	uxth	r3, r3
 80091de:	3b01      	subs	r3, #1
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80091e6:	e031      	b.n	800924c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	2202      	movs	r2, #2
 80091f0:	4013      	ands	r3, r2
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	d113      	bne.n	800921e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	330c      	adds	r3, #12
 8009200:	7812      	ldrb	r2, [r2, #0]
 8009202:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009208:	1c5a      	adds	r2, r3, #1
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009212:	b29b      	uxth	r3, r3
 8009214:	3b01      	subs	r3, #1
 8009216:	b29a      	uxth	r2, r3
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800921c:	e016      	b.n	800924c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800921e:	f7fc ffbd 	bl	800619c <HAL_GetTick>
 8009222:	0002      	movs	r2, r0
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	1ad3      	subs	r3, r2, r3
 8009228:	683a      	ldr	r2, [r7, #0]
 800922a:	429a      	cmp	r2, r3
 800922c:	d802      	bhi.n	8009234 <HAL_SPI_Transmit+0x238>
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	3301      	adds	r3, #1
 8009232:	d102      	bne.n	800923a <HAL_SPI_Transmit+0x23e>
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d108      	bne.n	800924c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800923a:	231f      	movs	r3, #31
 800923c:	18fb      	adds	r3, r7, r3
 800923e:	2203      	movs	r2, #3
 8009240:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	225d      	movs	r2, #93	@ 0x5d
 8009246:	2101      	movs	r1, #1
 8009248:	5499      	strb	r1, [r3, r2]
          goto error;
 800924a:	e02b      	b.n	80092a4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009250:	b29b      	uxth	r3, r3
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1c8      	bne.n	80091e8 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009256:	69ba      	ldr	r2, [r7, #24]
 8009258:	6839      	ldr	r1, [r7, #0]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	0018      	movs	r0, r3
 800925e:	f000 f95d 	bl	800951c <SPI_EndRxTxTransaction>
 8009262:	1e03      	subs	r3, r0, #0
 8009264:	d002      	beq.n	800926c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2220      	movs	r2, #32
 800926a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10a      	bne.n	800928a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009274:	2300      	movs	r3, #0
 8009276:	613b      	str	r3, [r7, #16]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	613b      	str	r3, [r7, #16]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	613b      	str	r3, [r7, #16]
 8009288:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800928e:	2b00      	cmp	r3, #0
 8009290:	d004      	beq.n	800929c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8009292:	231f      	movs	r3, #31
 8009294:	18fb      	adds	r3, r7, r3
 8009296:	2201      	movs	r2, #1
 8009298:	701a      	strb	r2, [r3, #0]
 800929a:	e003      	b.n	80092a4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	225d      	movs	r2, #93	@ 0x5d
 80092a0:	2101      	movs	r1, #1
 80092a2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	225c      	movs	r2, #92	@ 0x5c
 80092a8:	2100      	movs	r1, #0
 80092aa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80092ac:	231f      	movs	r3, #31
 80092ae:	18fb      	adds	r3, r7, r3
 80092b0:	781b      	ldrb	r3, [r3, #0]
}
 80092b2:	0018      	movs	r0, r3
 80092b4:	46bd      	mov	sp, r7
 80092b6:	b008      	add	sp, #32
 80092b8:	bd80      	pop	{r7, pc}
	...

080092bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b088      	sub	sp, #32
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	603b      	str	r3, [r7, #0]
 80092c8:	1dfb      	adds	r3, r7, #7
 80092ca:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80092cc:	f7fc ff66 	bl	800619c <HAL_GetTick>
 80092d0:	0002      	movs	r2, r0
 80092d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d4:	1a9b      	subs	r3, r3, r2
 80092d6:	683a      	ldr	r2, [r7, #0]
 80092d8:	18d3      	adds	r3, r2, r3
 80092da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80092dc:	f7fc ff5e 	bl	800619c <HAL_GetTick>
 80092e0:	0003      	movs	r3, r0
 80092e2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80092e4:	4b3a      	ldr	r3, [pc, #232]	@ (80093d0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	015b      	lsls	r3, r3, #5
 80092ea:	0d1b      	lsrs	r3, r3, #20
 80092ec:	69fa      	ldr	r2, [r7, #28]
 80092ee:	4353      	muls	r3, r2
 80092f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80092f2:	e058      	b.n	80093a6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	3301      	adds	r3, #1
 80092f8:	d055      	beq.n	80093a6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80092fa:	f7fc ff4f 	bl	800619c <HAL_GetTick>
 80092fe:	0002      	movs	r2, r0
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	69fa      	ldr	r2, [r7, #28]
 8009306:	429a      	cmp	r2, r3
 8009308:	d902      	bls.n	8009310 <SPI_WaitFlagStateUntilTimeout+0x54>
 800930a:	69fb      	ldr	r3, [r7, #28]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d142      	bne.n	8009396 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	685a      	ldr	r2, [r3, #4]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	21e0      	movs	r1, #224	@ 0xe0
 800931c:	438a      	bics	r2, r1
 800931e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	685a      	ldr	r2, [r3, #4]
 8009324:	2382      	movs	r3, #130	@ 0x82
 8009326:	005b      	lsls	r3, r3, #1
 8009328:	429a      	cmp	r2, r3
 800932a:	d113      	bne.n	8009354 <SPI_WaitFlagStateUntilTimeout+0x98>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	689a      	ldr	r2, [r3, #8]
 8009330:	2380      	movs	r3, #128	@ 0x80
 8009332:	021b      	lsls	r3, r3, #8
 8009334:	429a      	cmp	r2, r3
 8009336:	d005      	beq.n	8009344 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	689a      	ldr	r2, [r3, #8]
 800933c:	2380      	movs	r3, #128	@ 0x80
 800933e:	00db      	lsls	r3, r3, #3
 8009340:	429a      	cmp	r2, r3
 8009342:	d107      	bne.n	8009354 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2140      	movs	r1, #64	@ 0x40
 8009350:	438a      	bics	r2, r1
 8009352:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009358:	2380      	movs	r3, #128	@ 0x80
 800935a:	019b      	lsls	r3, r3, #6
 800935c:	429a      	cmp	r2, r3
 800935e:	d110      	bne.n	8009382 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	491a      	ldr	r1, [pc, #104]	@ (80093d4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800936c:	400a      	ands	r2, r1
 800936e:	601a      	str	r2, [r3, #0]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2180      	movs	r1, #128	@ 0x80
 800937c:	0189      	lsls	r1, r1, #6
 800937e:	430a      	orrs	r2, r1
 8009380:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	225d      	movs	r2, #93	@ 0x5d
 8009386:	2101      	movs	r1, #1
 8009388:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	225c      	movs	r2, #92	@ 0x5c
 800938e:	2100      	movs	r1, #0
 8009390:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009392:	2303      	movs	r3, #3
 8009394:	e017      	b.n	80093c6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d101      	bne.n	80093a0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800939c:	2300      	movs	r3, #0
 800939e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	3b01      	subs	r3, #1
 80093a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	4013      	ands	r3, r2
 80093b0:	68ba      	ldr	r2, [r7, #8]
 80093b2:	1ad3      	subs	r3, r2, r3
 80093b4:	425a      	negs	r2, r3
 80093b6:	4153      	adcs	r3, r2
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	001a      	movs	r2, r3
 80093bc:	1dfb      	adds	r3, r7, #7
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d197      	bne.n	80092f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	0018      	movs	r0, r3
 80093c8:	46bd      	mov	sp, r7
 80093ca:	b008      	add	sp, #32
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	46c0      	nop			@ (mov r8, r8)
 80093d0:	20000e84 	.word	0x20000e84
 80093d4:	ffffdfff 	.word	0xffffdfff

080093d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b08a      	sub	sp, #40	@ 0x28
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	607a      	str	r2, [r7, #4]
 80093e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80093e6:	2317      	movs	r3, #23
 80093e8:	18fb      	adds	r3, r7, r3
 80093ea:	2200      	movs	r2, #0
 80093ec:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80093ee:	f7fc fed5 	bl	800619c <HAL_GetTick>
 80093f2:	0002      	movs	r2, r0
 80093f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f6:	1a9b      	subs	r3, r3, r2
 80093f8:	683a      	ldr	r2, [r7, #0]
 80093fa:	18d3      	adds	r3, r2, r3
 80093fc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80093fe:	f7fc fecd 	bl	800619c <HAL_GetTick>
 8009402:	0003      	movs	r3, r0
 8009404:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	330c      	adds	r3, #12
 800940c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800940e:	4b41      	ldr	r3, [pc, #260]	@ (8009514 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	0013      	movs	r3, r2
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	189b      	adds	r3, r3, r2
 8009418:	00da      	lsls	r2, r3, #3
 800941a:	1ad3      	subs	r3, r2, r3
 800941c:	0d1b      	lsrs	r3, r3, #20
 800941e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009420:	4353      	muls	r3, r2
 8009422:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009424:	e068      	b.n	80094f8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	23c0      	movs	r3, #192	@ 0xc0
 800942a:	00db      	lsls	r3, r3, #3
 800942c:	429a      	cmp	r2, r3
 800942e:	d10a      	bne.n	8009446 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d107      	bne.n	8009446 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	b2da      	uxtb	r2, r3
 800943c:	2117      	movs	r1, #23
 800943e:	187b      	adds	r3, r7, r1
 8009440:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009442:	187b      	adds	r3, r7, r1
 8009444:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	3301      	adds	r3, #1
 800944a:	d055      	beq.n	80094f8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800944c:	f7fc fea6 	bl	800619c <HAL_GetTick>
 8009450:	0002      	movs	r2, r0
 8009452:	6a3b      	ldr	r3, [r7, #32]
 8009454:	1ad3      	subs	r3, r2, r3
 8009456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009458:	429a      	cmp	r2, r3
 800945a:	d902      	bls.n	8009462 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800945c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800945e:	2b00      	cmp	r3, #0
 8009460:	d142      	bne.n	80094e8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	685a      	ldr	r2, [r3, #4]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	21e0      	movs	r1, #224	@ 0xe0
 800946e:	438a      	bics	r2, r1
 8009470:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	685a      	ldr	r2, [r3, #4]
 8009476:	2382      	movs	r3, #130	@ 0x82
 8009478:	005b      	lsls	r3, r3, #1
 800947a:	429a      	cmp	r2, r3
 800947c:	d113      	bne.n	80094a6 <SPI_WaitFifoStateUntilTimeout+0xce>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	689a      	ldr	r2, [r3, #8]
 8009482:	2380      	movs	r3, #128	@ 0x80
 8009484:	021b      	lsls	r3, r3, #8
 8009486:	429a      	cmp	r2, r3
 8009488:	d005      	beq.n	8009496 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	689a      	ldr	r2, [r3, #8]
 800948e:	2380      	movs	r3, #128	@ 0x80
 8009490:	00db      	lsls	r3, r3, #3
 8009492:	429a      	cmp	r2, r3
 8009494:	d107      	bne.n	80094a6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2140      	movs	r1, #64	@ 0x40
 80094a2:	438a      	bics	r2, r1
 80094a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80094aa:	2380      	movs	r3, #128	@ 0x80
 80094ac:	019b      	lsls	r3, r3, #6
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d110      	bne.n	80094d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4916      	ldr	r1, [pc, #88]	@ (8009518 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80094be:	400a      	ands	r2, r1
 80094c0:	601a      	str	r2, [r3, #0]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2180      	movs	r1, #128	@ 0x80
 80094ce:	0189      	lsls	r1, r1, #6
 80094d0:	430a      	orrs	r2, r1
 80094d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	225d      	movs	r2, #93	@ 0x5d
 80094d8:	2101      	movs	r1, #1
 80094da:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	225c      	movs	r2, #92	@ 0x5c
 80094e0:	2100      	movs	r1, #0
 80094e2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80094e4:	2303      	movs	r3, #3
 80094e6:	e010      	b.n	800950a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d101      	bne.n	80094f2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80094ee:	2300      	movs	r3, #0
 80094f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	3b01      	subs	r3, #1
 80094f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	68ba      	ldr	r2, [r7, #8]
 8009500:	4013      	ands	r3, r2
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	429a      	cmp	r2, r3
 8009506:	d18e      	bne.n	8009426 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8009508:	2300      	movs	r3, #0
}
 800950a:	0018      	movs	r0, r3
 800950c:	46bd      	mov	sp, r7
 800950e:	b00a      	add	sp, #40	@ 0x28
 8009510:	bd80      	pop	{r7, pc}
 8009512:	46c0      	nop			@ (mov r8, r8)
 8009514:	20000e84 	.word	0x20000e84
 8009518:	ffffdfff 	.word	0xffffdfff

0800951c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af02      	add	r7, sp, #8
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	23c0      	movs	r3, #192	@ 0xc0
 800952c:	0159      	lsls	r1, r3, #5
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	9300      	str	r3, [sp, #0]
 8009534:	0013      	movs	r3, r2
 8009536:	2200      	movs	r2, #0
 8009538:	f7ff ff4e 	bl	80093d8 <SPI_WaitFifoStateUntilTimeout>
 800953c:	1e03      	subs	r3, r0, #0
 800953e:	d007      	beq.n	8009550 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009544:	2220      	movs	r2, #32
 8009546:	431a      	orrs	r2, r3
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800954c:	2303      	movs	r3, #3
 800954e:	e027      	b.n	80095a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009550:	68ba      	ldr	r2, [r7, #8]
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	0013      	movs	r3, r2
 800955a:	2200      	movs	r2, #0
 800955c:	2180      	movs	r1, #128	@ 0x80
 800955e:	f7ff fead 	bl	80092bc <SPI_WaitFlagStateUntilTimeout>
 8009562:	1e03      	subs	r3, r0, #0
 8009564:	d007      	beq.n	8009576 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800956a:	2220      	movs	r2, #32
 800956c:	431a      	orrs	r2, r3
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009572:	2303      	movs	r3, #3
 8009574:	e014      	b.n	80095a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009576:	68ba      	ldr	r2, [r7, #8]
 8009578:	23c0      	movs	r3, #192	@ 0xc0
 800957a:	00d9      	lsls	r1, r3, #3
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	0013      	movs	r3, r2
 8009584:	2200      	movs	r2, #0
 8009586:	f7ff ff27 	bl	80093d8 <SPI_WaitFifoStateUntilTimeout>
 800958a:	1e03      	subs	r3, r0, #0
 800958c:	d007      	beq.n	800959e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009592:	2220      	movs	r2, #32
 8009594:	431a      	orrs	r2, r3
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800959a:	2303      	movs	r3, #3
 800959c:	e000      	b.n	80095a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	0018      	movs	r0, r3
 80095a2:	46bd      	mov	sp, r7
 80095a4:	b004      	add	sp, #16
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d101      	bne.n	80095ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	e04a      	b.n	8009650 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	223d      	movs	r2, #61	@ 0x3d
 80095be:	5c9b      	ldrb	r3, [r3, r2]
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d107      	bne.n	80095d6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	223c      	movs	r2, #60	@ 0x3c
 80095ca:	2100      	movs	r1, #0
 80095cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	0018      	movs	r0, r3
 80095d2:	f7fc fbd1 	bl	8005d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	223d      	movs	r2, #61	@ 0x3d
 80095da:	2102      	movs	r1, #2
 80095dc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	3304      	adds	r3, #4
 80095e6:	0019      	movs	r1, r3
 80095e8:	0010      	movs	r0, r2
 80095ea:	f000 fb11 	bl	8009c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2248      	movs	r2, #72	@ 0x48
 80095f2:	2101      	movs	r1, #1
 80095f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	223e      	movs	r2, #62	@ 0x3e
 80095fa:	2101      	movs	r1, #1
 80095fc:	5499      	strb	r1, [r3, r2]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	223f      	movs	r2, #63	@ 0x3f
 8009602:	2101      	movs	r1, #1
 8009604:	5499      	strb	r1, [r3, r2]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2240      	movs	r2, #64	@ 0x40
 800960a:	2101      	movs	r1, #1
 800960c:	5499      	strb	r1, [r3, r2]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2241      	movs	r2, #65	@ 0x41
 8009612:	2101      	movs	r1, #1
 8009614:	5499      	strb	r1, [r3, r2]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2242      	movs	r2, #66	@ 0x42
 800961a:	2101      	movs	r1, #1
 800961c:	5499      	strb	r1, [r3, r2]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2243      	movs	r2, #67	@ 0x43
 8009622:	2101      	movs	r1, #1
 8009624:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2244      	movs	r2, #68	@ 0x44
 800962a:	2101      	movs	r1, #1
 800962c:	5499      	strb	r1, [r3, r2]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2245      	movs	r2, #69	@ 0x45
 8009632:	2101      	movs	r1, #1
 8009634:	5499      	strb	r1, [r3, r2]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2246      	movs	r2, #70	@ 0x46
 800963a:	2101      	movs	r1, #1
 800963c:	5499      	strb	r1, [r3, r2]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2247      	movs	r2, #71	@ 0x47
 8009642:	2101      	movs	r1, #1
 8009644:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	223d      	movs	r2, #61	@ 0x3d
 800964a:	2101      	movs	r1, #1
 800964c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	0018      	movs	r0, r3
 8009652:	46bd      	mov	sp, r7
 8009654:	b002      	add	sp, #8
 8009656:	bd80      	pop	{r7, pc}

08009658 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d101      	bne.n	800966a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	e04a      	b.n	8009700 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	223d      	movs	r2, #61	@ 0x3d
 800966e:	5c9b      	ldrb	r3, [r3, r2]
 8009670:	b2db      	uxtb	r3, r3
 8009672:	2b00      	cmp	r3, #0
 8009674:	d107      	bne.n	8009686 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	223c      	movs	r2, #60	@ 0x3c
 800967a:	2100      	movs	r1, #0
 800967c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	0018      	movs	r0, r3
 8009682:	f000 f841 	bl	8009708 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	223d      	movs	r2, #61	@ 0x3d
 800968a:	2102      	movs	r1, #2
 800968c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	3304      	adds	r3, #4
 8009696:	0019      	movs	r1, r3
 8009698:	0010      	movs	r0, r2
 800969a:	f000 fab9 	bl	8009c10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2248      	movs	r2, #72	@ 0x48
 80096a2:	2101      	movs	r1, #1
 80096a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	223e      	movs	r2, #62	@ 0x3e
 80096aa:	2101      	movs	r1, #1
 80096ac:	5499      	strb	r1, [r3, r2]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	223f      	movs	r2, #63	@ 0x3f
 80096b2:	2101      	movs	r1, #1
 80096b4:	5499      	strb	r1, [r3, r2]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2240      	movs	r2, #64	@ 0x40
 80096ba:	2101      	movs	r1, #1
 80096bc:	5499      	strb	r1, [r3, r2]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2241      	movs	r2, #65	@ 0x41
 80096c2:	2101      	movs	r1, #1
 80096c4:	5499      	strb	r1, [r3, r2]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2242      	movs	r2, #66	@ 0x42
 80096ca:	2101      	movs	r1, #1
 80096cc:	5499      	strb	r1, [r3, r2]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2243      	movs	r2, #67	@ 0x43
 80096d2:	2101      	movs	r1, #1
 80096d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2244      	movs	r2, #68	@ 0x44
 80096da:	2101      	movs	r1, #1
 80096dc:	5499      	strb	r1, [r3, r2]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2245      	movs	r2, #69	@ 0x45
 80096e2:	2101      	movs	r1, #1
 80096e4:	5499      	strb	r1, [r3, r2]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2246      	movs	r2, #70	@ 0x46
 80096ea:	2101      	movs	r1, #1
 80096ec:	5499      	strb	r1, [r3, r2]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2247      	movs	r2, #71	@ 0x47
 80096f2:	2101      	movs	r1, #1
 80096f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	223d      	movs	r2, #61	@ 0x3d
 80096fa:	2101      	movs	r1, #1
 80096fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	0018      	movs	r0, r3
 8009702:	46bd      	mov	sp, r7
 8009704:	b002      	add	sp, #8
 8009706:	bd80      	pop	{r7, pc}

08009708 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009710:	46c0      	nop			@ (mov r8, r8)
 8009712:	46bd      	mov	sp, r7
 8009714:	b002      	add	sp, #8
 8009716:	bd80      	pop	{r7, pc}

08009718 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d108      	bne.n	800973a <HAL_TIM_PWM_Start+0x22>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	223e      	movs	r2, #62	@ 0x3e
 800972c:	5c9b      	ldrb	r3, [r3, r2]
 800972e:	b2db      	uxtb	r3, r3
 8009730:	3b01      	subs	r3, #1
 8009732:	1e5a      	subs	r2, r3, #1
 8009734:	4193      	sbcs	r3, r2
 8009736:	b2db      	uxtb	r3, r3
 8009738:	e037      	b.n	80097aa <HAL_TIM_PWM_Start+0x92>
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	2b04      	cmp	r3, #4
 800973e:	d108      	bne.n	8009752 <HAL_TIM_PWM_Start+0x3a>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	223f      	movs	r2, #63	@ 0x3f
 8009744:	5c9b      	ldrb	r3, [r3, r2]
 8009746:	b2db      	uxtb	r3, r3
 8009748:	3b01      	subs	r3, #1
 800974a:	1e5a      	subs	r2, r3, #1
 800974c:	4193      	sbcs	r3, r2
 800974e:	b2db      	uxtb	r3, r3
 8009750:	e02b      	b.n	80097aa <HAL_TIM_PWM_Start+0x92>
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	2b08      	cmp	r3, #8
 8009756:	d108      	bne.n	800976a <HAL_TIM_PWM_Start+0x52>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2240      	movs	r2, #64	@ 0x40
 800975c:	5c9b      	ldrb	r3, [r3, r2]
 800975e:	b2db      	uxtb	r3, r3
 8009760:	3b01      	subs	r3, #1
 8009762:	1e5a      	subs	r2, r3, #1
 8009764:	4193      	sbcs	r3, r2
 8009766:	b2db      	uxtb	r3, r3
 8009768:	e01f      	b.n	80097aa <HAL_TIM_PWM_Start+0x92>
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	2b0c      	cmp	r3, #12
 800976e:	d108      	bne.n	8009782 <HAL_TIM_PWM_Start+0x6a>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2241      	movs	r2, #65	@ 0x41
 8009774:	5c9b      	ldrb	r3, [r3, r2]
 8009776:	b2db      	uxtb	r3, r3
 8009778:	3b01      	subs	r3, #1
 800977a:	1e5a      	subs	r2, r3, #1
 800977c:	4193      	sbcs	r3, r2
 800977e:	b2db      	uxtb	r3, r3
 8009780:	e013      	b.n	80097aa <HAL_TIM_PWM_Start+0x92>
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	2b10      	cmp	r3, #16
 8009786:	d108      	bne.n	800979a <HAL_TIM_PWM_Start+0x82>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2242      	movs	r2, #66	@ 0x42
 800978c:	5c9b      	ldrb	r3, [r3, r2]
 800978e:	b2db      	uxtb	r3, r3
 8009790:	3b01      	subs	r3, #1
 8009792:	1e5a      	subs	r2, r3, #1
 8009794:	4193      	sbcs	r3, r2
 8009796:	b2db      	uxtb	r3, r3
 8009798:	e007      	b.n	80097aa <HAL_TIM_PWM_Start+0x92>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2243      	movs	r2, #67	@ 0x43
 800979e:	5c9b      	ldrb	r3, [r3, r2]
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	3b01      	subs	r3, #1
 80097a4:	1e5a      	subs	r2, r3, #1
 80097a6:	4193      	sbcs	r3, r2
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d001      	beq.n	80097b2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	e090      	b.n	80098d4 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d104      	bne.n	80097c2 <HAL_TIM_PWM_Start+0xaa>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	223e      	movs	r2, #62	@ 0x3e
 80097bc:	2102      	movs	r1, #2
 80097be:	5499      	strb	r1, [r3, r2]
 80097c0:	e023      	b.n	800980a <HAL_TIM_PWM_Start+0xf2>
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	2b04      	cmp	r3, #4
 80097c6:	d104      	bne.n	80097d2 <HAL_TIM_PWM_Start+0xba>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	223f      	movs	r2, #63	@ 0x3f
 80097cc:	2102      	movs	r1, #2
 80097ce:	5499      	strb	r1, [r3, r2]
 80097d0:	e01b      	b.n	800980a <HAL_TIM_PWM_Start+0xf2>
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	2b08      	cmp	r3, #8
 80097d6:	d104      	bne.n	80097e2 <HAL_TIM_PWM_Start+0xca>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2240      	movs	r2, #64	@ 0x40
 80097dc:	2102      	movs	r1, #2
 80097de:	5499      	strb	r1, [r3, r2]
 80097e0:	e013      	b.n	800980a <HAL_TIM_PWM_Start+0xf2>
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	2b0c      	cmp	r3, #12
 80097e6:	d104      	bne.n	80097f2 <HAL_TIM_PWM_Start+0xda>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2241      	movs	r2, #65	@ 0x41
 80097ec:	2102      	movs	r1, #2
 80097ee:	5499      	strb	r1, [r3, r2]
 80097f0:	e00b      	b.n	800980a <HAL_TIM_PWM_Start+0xf2>
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	2b10      	cmp	r3, #16
 80097f6:	d104      	bne.n	8009802 <HAL_TIM_PWM_Start+0xea>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2242      	movs	r2, #66	@ 0x42
 80097fc:	2102      	movs	r1, #2
 80097fe:	5499      	strb	r1, [r3, r2]
 8009800:	e003      	b.n	800980a <HAL_TIM_PWM_Start+0xf2>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2243      	movs	r2, #67	@ 0x43
 8009806:	2102      	movs	r1, #2
 8009808:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	6839      	ldr	r1, [r7, #0]
 8009810:	2201      	movs	r2, #1
 8009812:	0018      	movs	r0, r3
 8009814:	f000 fd58 	bl	800a2c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a2f      	ldr	r2, [pc, #188]	@ (80098dc <HAL_TIM_PWM_Start+0x1c4>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d00e      	beq.n	8009840 <HAL_TIM_PWM_Start+0x128>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a2e      	ldr	r2, [pc, #184]	@ (80098e0 <HAL_TIM_PWM_Start+0x1c8>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d009      	beq.n	8009840 <HAL_TIM_PWM_Start+0x128>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a2c      	ldr	r2, [pc, #176]	@ (80098e4 <HAL_TIM_PWM_Start+0x1cc>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d004      	beq.n	8009840 <HAL_TIM_PWM_Start+0x128>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a2b      	ldr	r2, [pc, #172]	@ (80098e8 <HAL_TIM_PWM_Start+0x1d0>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d101      	bne.n	8009844 <HAL_TIM_PWM_Start+0x12c>
 8009840:	2301      	movs	r3, #1
 8009842:	e000      	b.n	8009846 <HAL_TIM_PWM_Start+0x12e>
 8009844:	2300      	movs	r3, #0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d008      	beq.n	800985c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2180      	movs	r1, #128	@ 0x80
 8009856:	0209      	lsls	r1, r1, #8
 8009858:	430a      	orrs	r2, r1
 800985a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a1e      	ldr	r2, [pc, #120]	@ (80098dc <HAL_TIM_PWM_Start+0x1c4>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d014      	beq.n	8009890 <HAL_TIM_PWM_Start+0x178>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	2380      	movs	r3, #128	@ 0x80
 800986c:	05db      	lsls	r3, r3, #23
 800986e:	429a      	cmp	r2, r3
 8009870:	d00e      	beq.n	8009890 <HAL_TIM_PWM_Start+0x178>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a1d      	ldr	r2, [pc, #116]	@ (80098ec <HAL_TIM_PWM_Start+0x1d4>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d009      	beq.n	8009890 <HAL_TIM_PWM_Start+0x178>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a1b      	ldr	r2, [pc, #108]	@ (80098f0 <HAL_TIM_PWM_Start+0x1d8>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d004      	beq.n	8009890 <HAL_TIM_PWM_Start+0x178>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a15      	ldr	r2, [pc, #84]	@ (80098e0 <HAL_TIM_PWM_Start+0x1c8>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d116      	bne.n	80098be <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	4a17      	ldr	r2, [pc, #92]	@ (80098f4 <HAL_TIM_PWM_Start+0x1dc>)
 8009898:	4013      	ands	r3, r2
 800989a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2b06      	cmp	r3, #6
 80098a0:	d016      	beq.n	80098d0 <HAL_TIM_PWM_Start+0x1b8>
 80098a2:	68fa      	ldr	r2, [r7, #12]
 80098a4:	2380      	movs	r3, #128	@ 0x80
 80098a6:	025b      	lsls	r3, r3, #9
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d011      	beq.n	80098d0 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2101      	movs	r1, #1
 80098b8:	430a      	orrs	r2, r1
 80098ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098bc:	e008      	b.n	80098d0 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2101      	movs	r1, #1
 80098ca:	430a      	orrs	r2, r1
 80098cc:	601a      	str	r2, [r3, #0]
 80098ce:	e000      	b.n	80098d2 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098d0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	0018      	movs	r0, r3
 80098d6:	46bd      	mov	sp, r7
 80098d8:	b004      	add	sp, #16
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	40012c00 	.word	0x40012c00
 80098e0:	40014000 	.word	0x40014000
 80098e4:	40014400 	.word	0x40014400
 80098e8:	40014800 	.word	0x40014800
 80098ec:	40000400 	.word	0x40000400
 80098f0:	40000800 	.word	0x40000800
 80098f4:	00010007 	.word	0x00010007

080098f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	6839      	ldr	r1, [r7, #0]
 8009908:	2200      	movs	r2, #0
 800990a:	0018      	movs	r0, r3
 800990c:	f000 fcdc 	bl	800a2c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a37      	ldr	r2, [pc, #220]	@ (80099f4 <HAL_TIM_PWM_Stop+0xfc>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d00e      	beq.n	8009938 <HAL_TIM_PWM_Stop+0x40>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a36      	ldr	r2, [pc, #216]	@ (80099f8 <HAL_TIM_PWM_Stop+0x100>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d009      	beq.n	8009938 <HAL_TIM_PWM_Stop+0x40>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a34      	ldr	r2, [pc, #208]	@ (80099fc <HAL_TIM_PWM_Stop+0x104>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d004      	beq.n	8009938 <HAL_TIM_PWM_Stop+0x40>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a33      	ldr	r2, [pc, #204]	@ (8009a00 <HAL_TIM_PWM_Stop+0x108>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d101      	bne.n	800993c <HAL_TIM_PWM_Stop+0x44>
 8009938:	2301      	movs	r3, #1
 800993a:	e000      	b.n	800993e <HAL_TIM_PWM_Stop+0x46>
 800993c:	2300      	movs	r3, #0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d013      	beq.n	800996a <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	6a1b      	ldr	r3, [r3, #32]
 8009948:	4a2e      	ldr	r2, [pc, #184]	@ (8009a04 <HAL_TIM_PWM_Stop+0x10c>)
 800994a:	4013      	ands	r3, r2
 800994c:	d10d      	bne.n	800996a <HAL_TIM_PWM_Stop+0x72>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	6a1b      	ldr	r3, [r3, #32]
 8009954:	4a2c      	ldr	r2, [pc, #176]	@ (8009a08 <HAL_TIM_PWM_Stop+0x110>)
 8009956:	4013      	ands	r3, r2
 8009958:	d107      	bne.n	800996a <HAL_TIM_PWM_Stop+0x72>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4929      	ldr	r1, [pc, #164]	@ (8009a0c <HAL_TIM_PWM_Stop+0x114>)
 8009966:	400a      	ands	r2, r1
 8009968:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	6a1b      	ldr	r3, [r3, #32]
 8009970:	4a24      	ldr	r2, [pc, #144]	@ (8009a04 <HAL_TIM_PWM_Stop+0x10c>)
 8009972:	4013      	ands	r3, r2
 8009974:	d10d      	bne.n	8009992 <HAL_TIM_PWM_Stop+0x9a>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	6a1b      	ldr	r3, [r3, #32]
 800997c:	4a22      	ldr	r2, [pc, #136]	@ (8009a08 <HAL_TIM_PWM_Stop+0x110>)
 800997e:	4013      	ands	r3, r2
 8009980:	d107      	bne.n	8009992 <HAL_TIM_PWM_Stop+0x9a>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2101      	movs	r1, #1
 800998e:	438a      	bics	r2, r1
 8009990:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d104      	bne.n	80099a2 <HAL_TIM_PWM_Stop+0xaa>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	223e      	movs	r2, #62	@ 0x3e
 800999c:	2101      	movs	r1, #1
 800999e:	5499      	strb	r1, [r3, r2]
 80099a0:	e023      	b.n	80099ea <HAL_TIM_PWM_Stop+0xf2>
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	2b04      	cmp	r3, #4
 80099a6:	d104      	bne.n	80099b2 <HAL_TIM_PWM_Stop+0xba>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	223f      	movs	r2, #63	@ 0x3f
 80099ac:	2101      	movs	r1, #1
 80099ae:	5499      	strb	r1, [r3, r2]
 80099b0:	e01b      	b.n	80099ea <HAL_TIM_PWM_Stop+0xf2>
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	2b08      	cmp	r3, #8
 80099b6:	d104      	bne.n	80099c2 <HAL_TIM_PWM_Stop+0xca>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2240      	movs	r2, #64	@ 0x40
 80099bc:	2101      	movs	r1, #1
 80099be:	5499      	strb	r1, [r3, r2]
 80099c0:	e013      	b.n	80099ea <HAL_TIM_PWM_Stop+0xf2>
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	2b0c      	cmp	r3, #12
 80099c6:	d104      	bne.n	80099d2 <HAL_TIM_PWM_Stop+0xda>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2241      	movs	r2, #65	@ 0x41
 80099cc:	2101      	movs	r1, #1
 80099ce:	5499      	strb	r1, [r3, r2]
 80099d0:	e00b      	b.n	80099ea <HAL_TIM_PWM_Stop+0xf2>
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	2b10      	cmp	r3, #16
 80099d6:	d104      	bne.n	80099e2 <HAL_TIM_PWM_Stop+0xea>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2242      	movs	r2, #66	@ 0x42
 80099dc:	2101      	movs	r1, #1
 80099de:	5499      	strb	r1, [r3, r2]
 80099e0:	e003      	b.n	80099ea <HAL_TIM_PWM_Stop+0xf2>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2243      	movs	r2, #67	@ 0x43
 80099e6:	2101      	movs	r1, #1
 80099e8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	0018      	movs	r0, r3
 80099ee:	46bd      	mov	sp, r7
 80099f0:	b002      	add	sp, #8
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	40012c00 	.word	0x40012c00
 80099f8:	40014000 	.word	0x40014000
 80099fc:	40014400 	.word	0x40014400
 8009a00:	40014800 	.word	0x40014800
 8009a04:	00001111 	.word	0x00001111
 8009a08:	00000444 	.word	0x00000444
 8009a0c:	ffff7fff 	.word	0xffff7fff

08009a10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a1c:	2317      	movs	r3, #23
 8009a1e:	18fb      	adds	r3, r7, r3
 8009a20:	2200      	movs	r2, #0
 8009a22:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	223c      	movs	r2, #60	@ 0x3c
 8009a28:	5c9b      	ldrb	r3, [r3, r2]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d101      	bne.n	8009a32 <HAL_TIM_PWM_ConfigChannel+0x22>
 8009a2e:	2302      	movs	r3, #2
 8009a30:	e0e5      	b.n	8009bfe <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	223c      	movs	r2, #60	@ 0x3c
 8009a36:	2101      	movs	r1, #1
 8009a38:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2b14      	cmp	r3, #20
 8009a3e:	d900      	bls.n	8009a42 <HAL_TIM_PWM_ConfigChannel+0x32>
 8009a40:	e0d1      	b.n	8009be6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	009a      	lsls	r2, r3, #2
 8009a46:	4b70      	ldr	r3, [pc, #448]	@ (8009c08 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8009a48:	18d3      	adds	r3, r2, r3
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68ba      	ldr	r2, [r7, #8]
 8009a54:	0011      	movs	r1, r2
 8009a56:	0018      	movs	r0, r3
 8009a58:	f000 f972 	bl	8009d40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	699a      	ldr	r2, [r3, #24]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2108      	movs	r1, #8
 8009a68:	430a      	orrs	r2, r1
 8009a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	699a      	ldr	r2, [r3, #24]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2104      	movs	r1, #4
 8009a78:	438a      	bics	r2, r1
 8009a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	6999      	ldr	r1, [r3, #24]
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	691a      	ldr	r2, [r3, #16]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	619a      	str	r2, [r3, #24]
      break;
 8009a8e:	e0af      	b.n	8009bf0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	0011      	movs	r1, r2
 8009a98:	0018      	movs	r0, r3
 8009a9a:	f000 f9db 	bl	8009e54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	699a      	ldr	r2, [r3, #24]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2180      	movs	r1, #128	@ 0x80
 8009aaa:	0109      	lsls	r1, r1, #4
 8009aac:	430a      	orrs	r2, r1
 8009aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	699a      	ldr	r2, [r3, #24]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4954      	ldr	r1, [pc, #336]	@ (8009c0c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8009abc:	400a      	ands	r2, r1
 8009abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	6999      	ldr	r1, [r3, #24]
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	021a      	lsls	r2, r3, #8
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	430a      	orrs	r2, r1
 8009ad2:	619a      	str	r2, [r3, #24]
      break;
 8009ad4:	e08c      	b.n	8009bf0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	68ba      	ldr	r2, [r7, #8]
 8009adc:	0011      	movs	r1, r2
 8009ade:	0018      	movs	r0, r3
 8009ae0:	f000 fa3c 	bl	8009f5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	69da      	ldr	r2, [r3, #28]
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2108      	movs	r1, #8
 8009af0:	430a      	orrs	r2, r1
 8009af2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	69da      	ldr	r2, [r3, #28]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2104      	movs	r1, #4
 8009b00:	438a      	bics	r2, r1
 8009b02:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	69d9      	ldr	r1, [r3, #28]
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	691a      	ldr	r2, [r3, #16]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	430a      	orrs	r2, r1
 8009b14:	61da      	str	r2, [r3, #28]
      break;
 8009b16:	e06b      	b.n	8009bf0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	68ba      	ldr	r2, [r7, #8]
 8009b1e:	0011      	movs	r1, r2
 8009b20:	0018      	movs	r0, r3
 8009b22:	f000 faa3 	bl	800a06c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	69da      	ldr	r2, [r3, #28]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2180      	movs	r1, #128	@ 0x80
 8009b32:	0109      	lsls	r1, r1, #4
 8009b34:	430a      	orrs	r2, r1
 8009b36:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	69da      	ldr	r2, [r3, #28]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4932      	ldr	r1, [pc, #200]	@ (8009c0c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8009b44:	400a      	ands	r2, r1
 8009b46:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	69d9      	ldr	r1, [r3, #28]
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	021a      	lsls	r2, r3, #8
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	430a      	orrs	r2, r1
 8009b5a:	61da      	str	r2, [r3, #28]
      break;
 8009b5c:	e048      	b.n	8009bf0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	68ba      	ldr	r2, [r7, #8]
 8009b64:	0011      	movs	r1, r2
 8009b66:	0018      	movs	r0, r3
 8009b68:	f000 faea 	bl	800a140 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2108      	movs	r1, #8
 8009b78:	430a      	orrs	r2, r1
 8009b7a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2104      	movs	r1, #4
 8009b88:	438a      	bics	r2, r1
 8009b8a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	691a      	ldr	r2, [r3, #16]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	430a      	orrs	r2, r1
 8009b9c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009b9e:	e027      	b.n	8009bf0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	68ba      	ldr	r2, [r7, #8]
 8009ba6:	0011      	movs	r1, r2
 8009ba8:	0018      	movs	r0, r3
 8009baa:	f000 fb29 	bl	800a200 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2180      	movs	r1, #128	@ 0x80
 8009bba:	0109      	lsls	r1, r1, #4
 8009bbc:	430a      	orrs	r2, r1
 8009bbe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4910      	ldr	r1, [pc, #64]	@ (8009c0c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8009bcc:	400a      	ands	r2, r1
 8009bce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	021a      	lsls	r2, r3, #8
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	430a      	orrs	r2, r1
 8009be2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009be4:	e004      	b.n	8009bf0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8009be6:	2317      	movs	r3, #23
 8009be8:	18fb      	adds	r3, r7, r3
 8009bea:	2201      	movs	r2, #1
 8009bec:	701a      	strb	r2, [r3, #0]
      break;
 8009bee:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	223c      	movs	r2, #60	@ 0x3c
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	5499      	strb	r1, [r3, r2]

  return status;
 8009bf8:	2317      	movs	r3, #23
 8009bfa:	18fb      	adds	r3, r7, r3
 8009bfc:	781b      	ldrb	r3, [r3, #0]
}
 8009bfe:	0018      	movs	r0, r3
 8009c00:	46bd      	mov	sp, r7
 8009c02:	b006      	add	sp, #24
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	46c0      	nop			@ (mov r8, r8)
 8009c08:	0800c9dc 	.word	0x0800c9dc
 8009c0c:	fffffbff 	.word	0xfffffbff

08009c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a3f      	ldr	r2, [pc, #252]	@ (8009d20 <TIM_Base_SetConfig+0x110>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d00c      	beq.n	8009c42 <TIM_Base_SetConfig+0x32>
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	2380      	movs	r3, #128	@ 0x80
 8009c2c:	05db      	lsls	r3, r3, #23
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d007      	beq.n	8009c42 <TIM_Base_SetConfig+0x32>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4a3b      	ldr	r2, [pc, #236]	@ (8009d24 <TIM_Base_SetConfig+0x114>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d003      	beq.n	8009c42 <TIM_Base_SetConfig+0x32>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4a3a      	ldr	r2, [pc, #232]	@ (8009d28 <TIM_Base_SetConfig+0x118>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d108      	bne.n	8009c54 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2270      	movs	r2, #112	@ 0x70
 8009c46:	4393      	bics	r3, r2
 8009c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	4313      	orrs	r3, r2
 8009c52:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4a32      	ldr	r2, [pc, #200]	@ (8009d20 <TIM_Base_SetConfig+0x110>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d01c      	beq.n	8009c96 <TIM_Base_SetConfig+0x86>
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	2380      	movs	r3, #128	@ 0x80
 8009c60:	05db      	lsls	r3, r3, #23
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d017      	beq.n	8009c96 <TIM_Base_SetConfig+0x86>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a2e      	ldr	r2, [pc, #184]	@ (8009d24 <TIM_Base_SetConfig+0x114>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d013      	beq.n	8009c96 <TIM_Base_SetConfig+0x86>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a2d      	ldr	r2, [pc, #180]	@ (8009d28 <TIM_Base_SetConfig+0x118>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d00f      	beq.n	8009c96 <TIM_Base_SetConfig+0x86>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a2c      	ldr	r2, [pc, #176]	@ (8009d2c <TIM_Base_SetConfig+0x11c>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d00b      	beq.n	8009c96 <TIM_Base_SetConfig+0x86>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	4a2b      	ldr	r2, [pc, #172]	@ (8009d30 <TIM_Base_SetConfig+0x120>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d007      	beq.n	8009c96 <TIM_Base_SetConfig+0x86>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a2a      	ldr	r2, [pc, #168]	@ (8009d34 <TIM_Base_SetConfig+0x124>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d003      	beq.n	8009c96 <TIM_Base_SetConfig+0x86>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a29      	ldr	r2, [pc, #164]	@ (8009d38 <TIM_Base_SetConfig+0x128>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d108      	bne.n	8009ca8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	4a28      	ldr	r2, [pc, #160]	@ (8009d3c <TIM_Base_SetConfig+0x12c>)
 8009c9a:	4013      	ands	r3, r2
 8009c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2280      	movs	r2, #128	@ 0x80
 8009cac:	4393      	bics	r3, r2
 8009cae:	001a      	movs	r2, r3
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	695b      	ldr	r3, [r3, #20]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	689a      	ldr	r2, [r3, #8]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a13      	ldr	r2, [pc, #76]	@ (8009d20 <TIM_Base_SetConfig+0x110>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d00b      	beq.n	8009cee <TIM_Base_SetConfig+0xde>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a15      	ldr	r2, [pc, #84]	@ (8009d30 <TIM_Base_SetConfig+0x120>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d007      	beq.n	8009cee <TIM_Base_SetConfig+0xde>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4a14      	ldr	r2, [pc, #80]	@ (8009d34 <TIM_Base_SetConfig+0x124>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d003      	beq.n	8009cee <TIM_Base_SetConfig+0xde>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a13      	ldr	r2, [pc, #76]	@ (8009d38 <TIM_Base_SetConfig+0x128>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d103      	bne.n	8009cf6 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	691a      	ldr	r2, [r3, #16]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	2201      	movs	r2, #1
 8009d02:	4013      	ands	r3, r2
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d106      	bne.n	8009d16 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	691b      	ldr	r3, [r3, #16]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	4393      	bics	r3, r2
 8009d10:	001a      	movs	r2, r3
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	611a      	str	r2, [r3, #16]
  }
}
 8009d16:	46c0      	nop			@ (mov r8, r8)
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	b004      	add	sp, #16
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	46c0      	nop			@ (mov r8, r8)
 8009d20:	40012c00 	.word	0x40012c00
 8009d24:	40000400 	.word	0x40000400
 8009d28:	40000800 	.word	0x40000800
 8009d2c:	40002000 	.word	0x40002000
 8009d30:	40014000 	.word	0x40014000
 8009d34:	40014400 	.word	0x40014400
 8009d38:	40014800 	.word	0x40014800
 8009d3c:	fffffcff 	.word	0xfffffcff

08009d40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b086      	sub	sp, #24
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a1b      	ldr	r3, [r3, #32]
 8009d4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6a1b      	ldr	r3, [r3, #32]
 8009d54:	2201      	movs	r2, #1
 8009d56:	4393      	bics	r3, r2
 8009d58:	001a      	movs	r2, r3
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	699b      	ldr	r3, [r3, #24]
 8009d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	4a32      	ldr	r2, [pc, #200]	@ (8009e38 <TIM_OC1_SetConfig+0xf8>)
 8009d6e:	4013      	ands	r3, r2
 8009d70:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2203      	movs	r2, #3
 8009d76:	4393      	bics	r3, r2
 8009d78:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	4313      	orrs	r3, r2
 8009d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	2202      	movs	r2, #2
 8009d88:	4393      	bics	r3, r2
 8009d8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	697a      	ldr	r2, [r7, #20]
 8009d92:	4313      	orrs	r3, r2
 8009d94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a28      	ldr	r2, [pc, #160]	@ (8009e3c <TIM_OC1_SetConfig+0xfc>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d00b      	beq.n	8009db6 <TIM_OC1_SetConfig+0x76>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4a27      	ldr	r2, [pc, #156]	@ (8009e40 <TIM_OC1_SetConfig+0x100>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d007      	beq.n	8009db6 <TIM_OC1_SetConfig+0x76>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	4a26      	ldr	r2, [pc, #152]	@ (8009e44 <TIM_OC1_SetConfig+0x104>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d003      	beq.n	8009db6 <TIM_OC1_SetConfig+0x76>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4a25      	ldr	r2, [pc, #148]	@ (8009e48 <TIM_OC1_SetConfig+0x108>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d10c      	bne.n	8009dd0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	2208      	movs	r2, #8
 8009dba:	4393      	bics	r3, r2
 8009dbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	697a      	ldr	r2, [r7, #20]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	2204      	movs	r2, #4
 8009dcc:	4393      	bics	r3, r2
 8009dce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a1a      	ldr	r2, [pc, #104]	@ (8009e3c <TIM_OC1_SetConfig+0xfc>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d00b      	beq.n	8009df0 <TIM_OC1_SetConfig+0xb0>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a19      	ldr	r2, [pc, #100]	@ (8009e40 <TIM_OC1_SetConfig+0x100>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d007      	beq.n	8009df0 <TIM_OC1_SetConfig+0xb0>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4a18      	ldr	r2, [pc, #96]	@ (8009e44 <TIM_OC1_SetConfig+0x104>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d003      	beq.n	8009df0 <TIM_OC1_SetConfig+0xb0>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a17      	ldr	r2, [pc, #92]	@ (8009e48 <TIM_OC1_SetConfig+0x108>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d111      	bne.n	8009e14 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	4a16      	ldr	r2, [pc, #88]	@ (8009e4c <TIM_OC1_SetConfig+0x10c>)
 8009df4:	4013      	ands	r3, r2
 8009df6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	4a15      	ldr	r2, [pc, #84]	@ (8009e50 <TIM_OC1_SetConfig+0x110>)
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	695b      	ldr	r3, [r3, #20]
 8009e04:	693a      	ldr	r2, [r7, #16]
 8009e06:	4313      	orrs	r3, r2
 8009e08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	699b      	ldr	r3, [r3, #24]
 8009e0e:	693a      	ldr	r2, [r7, #16]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	693a      	ldr	r2, [r7, #16]
 8009e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	685a      	ldr	r2, [r3, #4]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	697a      	ldr	r2, [r7, #20]
 8009e2c:	621a      	str	r2, [r3, #32]
}
 8009e2e:	46c0      	nop			@ (mov r8, r8)
 8009e30:	46bd      	mov	sp, r7
 8009e32:	b006      	add	sp, #24
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	46c0      	nop			@ (mov r8, r8)
 8009e38:	fffeff8f 	.word	0xfffeff8f
 8009e3c:	40012c00 	.word	0x40012c00
 8009e40:	40014000 	.word	0x40014000
 8009e44:	40014400 	.word	0x40014400
 8009e48:	40014800 	.word	0x40014800
 8009e4c:	fffffeff 	.word	0xfffffeff
 8009e50:	fffffdff 	.word	0xfffffdff

08009e54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a1b      	ldr	r3, [r3, #32]
 8009e62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6a1b      	ldr	r3, [r3, #32]
 8009e68:	2210      	movs	r2, #16
 8009e6a:	4393      	bics	r3, r2
 8009e6c:	001a      	movs	r2, r3
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	699b      	ldr	r3, [r3, #24]
 8009e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	4a2e      	ldr	r2, [pc, #184]	@ (8009f3c <TIM_OC2_SetConfig+0xe8>)
 8009e82:	4013      	ands	r3, r2
 8009e84:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	4a2d      	ldr	r2, [pc, #180]	@ (8009f40 <TIM_OC2_SetConfig+0xec>)
 8009e8a:	4013      	ands	r3, r2
 8009e8c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	021b      	lsls	r3, r3, #8
 8009e94:	68fa      	ldr	r2, [r7, #12]
 8009e96:	4313      	orrs	r3, r2
 8009e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	2220      	movs	r2, #32
 8009e9e:	4393      	bics	r3, r2
 8009ea0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	011b      	lsls	r3, r3, #4
 8009ea8:	697a      	ldr	r2, [r7, #20]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4a24      	ldr	r2, [pc, #144]	@ (8009f44 <TIM_OC2_SetConfig+0xf0>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d10d      	bne.n	8009ed2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	2280      	movs	r2, #128	@ 0x80
 8009eba:	4393      	bics	r3, r2
 8009ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	011b      	lsls	r3, r3, #4
 8009ec4:	697a      	ldr	r2, [r7, #20]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	2240      	movs	r2, #64	@ 0x40
 8009ece:	4393      	bics	r3, r2
 8009ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8009f44 <TIM_OC2_SetConfig+0xf0>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d00b      	beq.n	8009ef2 <TIM_OC2_SetConfig+0x9e>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	4a1a      	ldr	r2, [pc, #104]	@ (8009f48 <TIM_OC2_SetConfig+0xf4>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d007      	beq.n	8009ef2 <TIM_OC2_SetConfig+0x9e>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	4a19      	ldr	r2, [pc, #100]	@ (8009f4c <TIM_OC2_SetConfig+0xf8>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d003      	beq.n	8009ef2 <TIM_OC2_SetConfig+0x9e>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	4a18      	ldr	r2, [pc, #96]	@ (8009f50 <TIM_OC2_SetConfig+0xfc>)
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d113      	bne.n	8009f1a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	4a17      	ldr	r2, [pc, #92]	@ (8009f54 <TIM_OC2_SetConfig+0x100>)
 8009ef6:	4013      	ands	r3, r2
 8009ef8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	4a16      	ldr	r2, [pc, #88]	@ (8009f58 <TIM_OC2_SetConfig+0x104>)
 8009efe:	4013      	ands	r3, r2
 8009f00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	695b      	ldr	r3, [r3, #20]
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	693a      	ldr	r2, [r7, #16]
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	699b      	ldr	r3, [r3, #24]
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	693a      	ldr	r2, [r7, #16]
 8009f16:	4313      	orrs	r3, r2
 8009f18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	693a      	ldr	r2, [r7, #16]
 8009f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	685a      	ldr	r2, [r3, #4]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	621a      	str	r2, [r3, #32]
}
 8009f34:	46c0      	nop			@ (mov r8, r8)
 8009f36:	46bd      	mov	sp, r7
 8009f38:	b006      	add	sp, #24
 8009f3a:	bd80      	pop	{r7, pc}
 8009f3c:	feff8fff 	.word	0xfeff8fff
 8009f40:	fffffcff 	.word	0xfffffcff
 8009f44:	40012c00 	.word	0x40012c00
 8009f48:	40014000 	.word	0x40014000
 8009f4c:	40014400 	.word	0x40014400
 8009f50:	40014800 	.word	0x40014800
 8009f54:	fffffbff 	.word	0xfffffbff
 8009f58:	fffff7ff 	.word	0xfffff7ff

08009f5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a1b      	ldr	r3, [r3, #32]
 8009f6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6a1b      	ldr	r3, [r3, #32]
 8009f70:	4a33      	ldr	r2, [pc, #204]	@ (800a040 <TIM_OC3_SetConfig+0xe4>)
 8009f72:	401a      	ands	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	69db      	ldr	r3, [r3, #28]
 8009f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	4a2f      	ldr	r2, [pc, #188]	@ (800a044 <TIM_OC3_SetConfig+0xe8>)
 8009f88:	4013      	ands	r3, r2
 8009f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2203      	movs	r2, #3
 8009f90:	4393      	bics	r3, r2
 8009f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	4a29      	ldr	r2, [pc, #164]	@ (800a048 <TIM_OC3_SetConfig+0xec>)
 8009fa2:	4013      	ands	r3, r2
 8009fa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	021b      	lsls	r3, r3, #8
 8009fac:	697a      	ldr	r2, [r7, #20]
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	4a25      	ldr	r2, [pc, #148]	@ (800a04c <TIM_OC3_SetConfig+0xf0>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d10d      	bne.n	8009fd6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	4a24      	ldr	r2, [pc, #144]	@ (800a050 <TIM_OC3_SetConfig+0xf4>)
 8009fbe:	4013      	ands	r3, r2
 8009fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	021b      	lsls	r3, r3, #8
 8009fc8:	697a      	ldr	r2, [r7, #20]
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	4a20      	ldr	r2, [pc, #128]	@ (800a054 <TIM_OC3_SetConfig+0xf8>)
 8009fd2:	4013      	ands	r3, r2
 8009fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800a04c <TIM_OC3_SetConfig+0xf0>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d00b      	beq.n	8009ff6 <TIM_OC3_SetConfig+0x9a>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	4a1d      	ldr	r2, [pc, #116]	@ (800a058 <TIM_OC3_SetConfig+0xfc>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d007      	beq.n	8009ff6 <TIM_OC3_SetConfig+0x9a>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4a1c      	ldr	r2, [pc, #112]	@ (800a05c <TIM_OC3_SetConfig+0x100>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d003      	beq.n	8009ff6 <TIM_OC3_SetConfig+0x9a>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4a1b      	ldr	r2, [pc, #108]	@ (800a060 <TIM_OC3_SetConfig+0x104>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d113      	bne.n	800a01e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	4a1a      	ldr	r2, [pc, #104]	@ (800a064 <TIM_OC3_SetConfig+0x108>)
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	4a19      	ldr	r2, [pc, #100]	@ (800a068 <TIM_OC3_SetConfig+0x10c>)
 800a002:	4013      	ands	r3, r2
 800a004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	695b      	ldr	r3, [r3, #20]
 800a00a:	011b      	lsls	r3, r3, #4
 800a00c:	693a      	ldr	r2, [r7, #16]
 800a00e:	4313      	orrs	r3, r2
 800a010:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	699b      	ldr	r3, [r3, #24]
 800a016:	011b      	lsls	r3, r3, #4
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	685a      	ldr	r2, [r3, #4]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	697a      	ldr	r2, [r7, #20]
 800a036:	621a      	str	r2, [r3, #32]
}
 800a038:	46c0      	nop			@ (mov r8, r8)
 800a03a:	46bd      	mov	sp, r7
 800a03c:	b006      	add	sp, #24
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	fffffeff 	.word	0xfffffeff
 800a044:	fffeff8f 	.word	0xfffeff8f
 800a048:	fffffdff 	.word	0xfffffdff
 800a04c:	40012c00 	.word	0x40012c00
 800a050:	fffff7ff 	.word	0xfffff7ff
 800a054:	fffffbff 	.word	0xfffffbff
 800a058:	40014000 	.word	0x40014000
 800a05c:	40014400 	.word	0x40014400
 800a060:	40014800 	.word	0x40014800
 800a064:	ffffefff 	.word	0xffffefff
 800a068:	ffffdfff 	.word	0xffffdfff

0800a06c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b086      	sub	sp, #24
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6a1b      	ldr	r3, [r3, #32]
 800a07a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6a1b      	ldr	r3, [r3, #32]
 800a080:	4a26      	ldr	r2, [pc, #152]	@ (800a11c <TIM_OC4_SetConfig+0xb0>)
 800a082:	401a      	ands	r2, r3
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	69db      	ldr	r3, [r3, #28]
 800a092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	4a22      	ldr	r2, [pc, #136]	@ (800a120 <TIM_OC4_SetConfig+0xb4>)
 800a098:	4013      	ands	r3, r2
 800a09a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	4a21      	ldr	r2, [pc, #132]	@ (800a124 <TIM_OC4_SetConfig+0xb8>)
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	021b      	lsls	r3, r3, #8
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	4a1d      	ldr	r2, [pc, #116]	@ (800a128 <TIM_OC4_SetConfig+0xbc>)
 800a0b4:	4013      	ands	r3, r2
 800a0b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	031b      	lsls	r3, r3, #12
 800a0be:	693a      	ldr	r2, [r7, #16]
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	4a19      	ldr	r2, [pc, #100]	@ (800a12c <TIM_OC4_SetConfig+0xc0>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d00b      	beq.n	800a0e4 <TIM_OC4_SetConfig+0x78>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a18      	ldr	r2, [pc, #96]	@ (800a130 <TIM_OC4_SetConfig+0xc4>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d007      	beq.n	800a0e4 <TIM_OC4_SetConfig+0x78>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a17      	ldr	r2, [pc, #92]	@ (800a134 <TIM_OC4_SetConfig+0xc8>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d003      	beq.n	800a0e4 <TIM_OC4_SetConfig+0x78>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a16      	ldr	r2, [pc, #88]	@ (800a138 <TIM_OC4_SetConfig+0xcc>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d109      	bne.n	800a0f8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	4a15      	ldr	r2, [pc, #84]	@ (800a13c <TIM_OC4_SetConfig+0xd0>)
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	695b      	ldr	r3, [r3, #20]
 800a0f0:	019b      	lsls	r3, r3, #6
 800a0f2:	697a      	ldr	r2, [r7, #20]
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	697a      	ldr	r2, [r7, #20]
 800a0fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	685a      	ldr	r2, [r3, #4]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	693a      	ldr	r2, [r7, #16]
 800a110:	621a      	str	r2, [r3, #32]
}
 800a112:	46c0      	nop			@ (mov r8, r8)
 800a114:	46bd      	mov	sp, r7
 800a116:	b006      	add	sp, #24
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	46c0      	nop			@ (mov r8, r8)
 800a11c:	ffffefff 	.word	0xffffefff
 800a120:	feff8fff 	.word	0xfeff8fff
 800a124:	fffffcff 	.word	0xfffffcff
 800a128:	ffffdfff 	.word	0xffffdfff
 800a12c:	40012c00 	.word	0x40012c00
 800a130:	40014000 	.word	0x40014000
 800a134:	40014400 	.word	0x40014400
 800a138:	40014800 	.word	0x40014800
 800a13c:	ffffbfff 	.word	0xffffbfff

0800a140 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b086      	sub	sp, #24
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a1b      	ldr	r3, [r3, #32]
 800a14e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a1b      	ldr	r3, [r3, #32]
 800a154:	4a23      	ldr	r2, [pc, #140]	@ (800a1e4 <TIM_OC5_SetConfig+0xa4>)
 800a156:	401a      	ands	r2, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	4a1f      	ldr	r2, [pc, #124]	@ (800a1e8 <TIM_OC5_SetConfig+0xa8>)
 800a16c:	4013      	ands	r3, r2
 800a16e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	4313      	orrs	r3, r2
 800a178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	4a1b      	ldr	r2, [pc, #108]	@ (800a1ec <TIM_OC5_SetConfig+0xac>)
 800a17e:	4013      	ands	r3, r2
 800a180:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	041b      	lsls	r3, r3, #16
 800a188:	693a      	ldr	r2, [r7, #16]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4a17      	ldr	r2, [pc, #92]	@ (800a1f0 <TIM_OC5_SetConfig+0xb0>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d00b      	beq.n	800a1ae <TIM_OC5_SetConfig+0x6e>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a16      	ldr	r2, [pc, #88]	@ (800a1f4 <TIM_OC5_SetConfig+0xb4>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d007      	beq.n	800a1ae <TIM_OC5_SetConfig+0x6e>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a15      	ldr	r2, [pc, #84]	@ (800a1f8 <TIM_OC5_SetConfig+0xb8>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d003      	beq.n	800a1ae <TIM_OC5_SetConfig+0x6e>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4a14      	ldr	r2, [pc, #80]	@ (800a1fc <TIM_OC5_SetConfig+0xbc>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d109      	bne.n	800a1c2 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	4a0c      	ldr	r2, [pc, #48]	@ (800a1e4 <TIM_OC5_SetConfig+0xa4>)
 800a1b2:	4013      	ands	r3, r2
 800a1b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	695b      	ldr	r3, [r3, #20]
 800a1ba:	021b      	lsls	r3, r3, #8
 800a1bc:	697a      	ldr	r2, [r7, #20]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	697a      	ldr	r2, [r7, #20]
 800a1c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	68fa      	ldr	r2, [r7, #12]
 800a1cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	685a      	ldr	r2, [r3, #4]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	693a      	ldr	r2, [r7, #16]
 800a1da:	621a      	str	r2, [r3, #32]
}
 800a1dc:	46c0      	nop			@ (mov r8, r8)
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	b006      	add	sp, #24
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	fffeffff 	.word	0xfffeffff
 800a1e8:	fffeff8f 	.word	0xfffeff8f
 800a1ec:	fffdffff 	.word	0xfffdffff
 800a1f0:	40012c00 	.word	0x40012c00
 800a1f4:	40014000 	.word	0x40014000
 800a1f8:	40014400 	.word	0x40014400
 800a1fc:	40014800 	.word	0x40014800

0800a200 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b086      	sub	sp, #24
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6a1b      	ldr	r3, [r3, #32]
 800a214:	4a24      	ldr	r2, [pc, #144]	@ (800a2a8 <TIM_OC6_SetConfig+0xa8>)
 800a216:	401a      	ands	r2, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	4a20      	ldr	r2, [pc, #128]	@ (800a2ac <TIM_OC6_SetConfig+0xac>)
 800a22c:	4013      	ands	r3, r2
 800a22e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	021b      	lsls	r3, r3, #8
 800a236:	68fa      	ldr	r2, [r7, #12]
 800a238:	4313      	orrs	r3, r2
 800a23a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	4a1c      	ldr	r2, [pc, #112]	@ (800a2b0 <TIM_OC6_SetConfig+0xb0>)
 800a240:	4013      	ands	r3, r2
 800a242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	051b      	lsls	r3, r3, #20
 800a24a:	693a      	ldr	r2, [r7, #16]
 800a24c:	4313      	orrs	r3, r2
 800a24e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	4a18      	ldr	r2, [pc, #96]	@ (800a2b4 <TIM_OC6_SetConfig+0xb4>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d00b      	beq.n	800a270 <TIM_OC6_SetConfig+0x70>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	4a17      	ldr	r2, [pc, #92]	@ (800a2b8 <TIM_OC6_SetConfig+0xb8>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d007      	beq.n	800a270 <TIM_OC6_SetConfig+0x70>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	4a16      	ldr	r2, [pc, #88]	@ (800a2bc <TIM_OC6_SetConfig+0xbc>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d003      	beq.n	800a270 <TIM_OC6_SetConfig+0x70>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4a15      	ldr	r2, [pc, #84]	@ (800a2c0 <TIM_OC6_SetConfig+0xc0>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d109      	bne.n	800a284 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	4a14      	ldr	r2, [pc, #80]	@ (800a2c4 <TIM_OC6_SetConfig+0xc4>)
 800a274:	4013      	ands	r3, r2
 800a276:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	695b      	ldr	r3, [r3, #20]
 800a27c:	029b      	lsls	r3, r3, #10
 800a27e:	697a      	ldr	r2, [r7, #20]
 800a280:	4313      	orrs	r3, r2
 800a282:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	697a      	ldr	r2, [r7, #20]
 800a288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	685a      	ldr	r2, [r3, #4]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	693a      	ldr	r2, [r7, #16]
 800a29c:	621a      	str	r2, [r3, #32]
}
 800a29e:	46c0      	nop			@ (mov r8, r8)
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	b006      	add	sp, #24
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	46c0      	nop			@ (mov r8, r8)
 800a2a8:	ffefffff 	.word	0xffefffff
 800a2ac:	feff8fff 	.word	0xfeff8fff
 800a2b0:	ffdfffff 	.word	0xffdfffff
 800a2b4:	40012c00 	.word	0x40012c00
 800a2b8:	40014000 	.word	0x40014000
 800a2bc:	40014400 	.word	0x40014400
 800a2c0:	40014800 	.word	0x40014800
 800a2c4:	fffbffff 	.word	0xfffbffff

0800a2c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	221f      	movs	r2, #31
 800a2d8:	4013      	ands	r3, r2
 800a2da:	2201      	movs	r2, #1
 800a2dc:	409a      	lsls	r2, r3
 800a2de:	0013      	movs	r3, r2
 800a2e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	6a1b      	ldr	r3, [r3, #32]
 800a2e6:	697a      	ldr	r2, [r7, #20]
 800a2e8:	43d2      	mvns	r2, r2
 800a2ea:	401a      	ands	r2, r3
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6a1a      	ldr	r2, [r3, #32]
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	211f      	movs	r1, #31
 800a2f8:	400b      	ands	r3, r1
 800a2fa:	6879      	ldr	r1, [r7, #4]
 800a2fc:	4099      	lsls	r1, r3
 800a2fe:	000b      	movs	r3, r1
 800a300:	431a      	orrs	r2, r3
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	621a      	str	r2, [r3, #32]
}
 800a306:	46c0      	nop			@ (mov r8, r8)
 800a308:	46bd      	mov	sp, r7
 800a30a:	b006      	add	sp, #24
 800a30c:	bd80      	pop	{r7, pc}
	...

0800a310 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a31a:	2300      	movs	r3, #0
 800a31c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	223c      	movs	r2, #60	@ 0x3c
 800a322:	5c9b      	ldrb	r3, [r3, r2]
 800a324:	2b01      	cmp	r3, #1
 800a326:	d101      	bne.n	800a32c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a328:	2302      	movs	r3, #2
 800a32a:	e06f      	b.n	800a40c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	223c      	movs	r2, #60	@ 0x3c
 800a330:	2101      	movs	r1, #1
 800a332:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	22ff      	movs	r2, #255	@ 0xff
 800a338:	4393      	bics	r3, r2
 800a33a:	001a      	movs	r2, r3
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	4313      	orrs	r3, r2
 800a342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	4a33      	ldr	r2, [pc, #204]	@ (800a414 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800a348:	401a      	ands	r2, r3
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	4313      	orrs	r3, r2
 800a350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	4a30      	ldr	r2, [pc, #192]	@ (800a418 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800a356:	401a      	ands	r2, r3
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	4313      	orrs	r3, r2
 800a35e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	4a2e      	ldr	r2, [pc, #184]	@ (800a41c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800a364:	401a      	ands	r2, r3
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4313      	orrs	r3, r2
 800a36c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	4a2b      	ldr	r2, [pc, #172]	@ (800a420 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800a372:	401a      	ands	r2, r3
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	691b      	ldr	r3, [r3, #16]
 800a378:	4313      	orrs	r3, r2
 800a37a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	4a29      	ldr	r2, [pc, #164]	@ (800a424 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800a380:	401a      	ands	r2, r3
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	695b      	ldr	r3, [r3, #20]
 800a386:	4313      	orrs	r3, r2
 800a388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	4a26      	ldr	r2, [pc, #152]	@ (800a428 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800a38e:	401a      	ands	r2, r3
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a394:	4313      	orrs	r3, r2
 800a396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	4a24      	ldr	r2, [pc, #144]	@ (800a42c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a39c:	401a      	ands	r2, r3
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	699b      	ldr	r3, [r3, #24]
 800a3a2:	041b      	lsls	r3, r3, #16
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	4a21      	ldr	r2, [pc, #132]	@ (800a430 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a3ac:	401a      	ands	r2, r3
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	69db      	ldr	r3, [r3, #28]
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a1e      	ldr	r2, [pc, #120]	@ (800a434 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d11c      	bne.n	800a3fa <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	4a1d      	ldr	r2, [pc, #116]	@ (800a438 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800a3c4:	401a      	ands	r2, r3
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ca:	051b      	lsls	r3, r3, #20
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	4a1a      	ldr	r2, [pc, #104]	@ (800a43c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800a3d4:	401a      	ands	r2, r3
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	6a1b      	ldr	r3, [r3, #32]
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	4a17      	ldr	r2, [pc, #92]	@ (800a440 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800a3e2:	401a      	ands	r2, r3
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	4a15      	ldr	r2, [pc, #84]	@ (800a444 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800a3f0:	401a      	ands	r2, r3
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	223c      	movs	r2, #60	@ 0x3c
 800a406:	2100      	movs	r1, #0
 800a408:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a40a:	2300      	movs	r3, #0
}
 800a40c:	0018      	movs	r0, r3
 800a40e:	46bd      	mov	sp, r7
 800a410:	b004      	add	sp, #16
 800a412:	bd80      	pop	{r7, pc}
 800a414:	fffffcff 	.word	0xfffffcff
 800a418:	fffffbff 	.word	0xfffffbff
 800a41c:	fffff7ff 	.word	0xfffff7ff
 800a420:	ffffefff 	.word	0xffffefff
 800a424:	ffffdfff 	.word	0xffffdfff
 800a428:	ffffbfff 	.word	0xffffbfff
 800a42c:	fff0ffff 	.word	0xfff0ffff
 800a430:	efffffff 	.word	0xefffffff
 800a434:	40012c00 	.word	0x40012c00
 800a438:	ff0fffff 	.word	0xff0fffff
 800a43c:	feffffff 	.word	0xfeffffff
 800a440:	fdffffff 	.word	0xfdffffff
 800a444:	dfffffff 	.word	0xdfffffff

0800a448 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d101      	bne.n	800a45a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a456:	2301      	movs	r3, #1
 800a458:	e046      	b.n	800a4e8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2288      	movs	r2, #136	@ 0x88
 800a45e:	589b      	ldr	r3, [r3, r2]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d107      	bne.n	800a474 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2284      	movs	r2, #132	@ 0x84
 800a468:	2100      	movs	r1, #0
 800a46a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	0018      	movs	r0, r3
 800a470:	f7fb fcde 	bl	8005e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2288      	movs	r2, #136	@ 0x88
 800a478:	2124      	movs	r1, #36	@ 0x24
 800a47a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	2101      	movs	r1, #1
 800a488:	438a      	bics	r2, r1
 800a48a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a490:	2b00      	cmp	r3, #0
 800a492:	d003      	beq.n	800a49c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	0018      	movs	r0, r3
 800a498:	f000 fc68 	bl	800ad6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	0018      	movs	r0, r3
 800a4a0:	f000 f90e 	bl	800a6c0 <UART_SetConfig>
 800a4a4:	0003      	movs	r3, r0
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d101      	bne.n	800a4ae <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e01c      	b.n	800a4e8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	685a      	ldr	r2, [r3, #4]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	490d      	ldr	r1, [pc, #52]	@ (800a4f0 <HAL_UART_Init+0xa8>)
 800a4ba:	400a      	ands	r2, r1
 800a4bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	689a      	ldr	r2, [r3, #8]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	212a      	movs	r1, #42	@ 0x2a
 800a4ca:	438a      	bics	r2, r1
 800a4cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	2101      	movs	r1, #1
 800a4da:	430a      	orrs	r2, r1
 800a4dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	0018      	movs	r0, r3
 800a4e2:	f000 fcf7 	bl	800aed4 <UART_CheckIdleState>
 800a4e6:	0003      	movs	r3, r0
}
 800a4e8:	0018      	movs	r0, r3
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	b002      	add	sp, #8
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	ffffb7ff 	.word	0xffffb7ff

0800a4f4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b08a      	sub	sp, #40	@ 0x28
 800a4f8:	af02      	add	r7, sp, #8
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	603b      	str	r3, [r7, #0]
 800a500:	1dbb      	adds	r3, r7, #6
 800a502:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	228c      	movs	r2, #140	@ 0x8c
 800a508:	589b      	ldr	r3, [r3, r2]
 800a50a:	2b20      	cmp	r3, #32
 800a50c:	d000      	beq.n	800a510 <HAL_UART_Receive+0x1c>
 800a50e:	e0d0      	b.n	800a6b2 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d003      	beq.n	800a51e <HAL_UART_Receive+0x2a>
 800a516:	1dbb      	adds	r3, r7, #6
 800a518:	881b      	ldrh	r3, [r3, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d101      	bne.n	800a522 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	e0c8      	b.n	800a6b4 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	689a      	ldr	r2, [r3, #8]
 800a526:	2380      	movs	r3, #128	@ 0x80
 800a528:	015b      	lsls	r3, r3, #5
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d109      	bne.n	800a542 <HAL_UART_Receive+0x4e>
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	691b      	ldr	r3, [r3, #16]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d105      	bne.n	800a542 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	2201      	movs	r2, #1
 800a53a:	4013      	ands	r3, r2
 800a53c:	d001      	beq.n	800a542 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	e0b8      	b.n	800a6b4 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2290      	movs	r2, #144	@ 0x90
 800a546:	2100      	movs	r1, #0
 800a548:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	228c      	movs	r2, #140	@ 0x8c
 800a54e:	2122      	movs	r1, #34	@ 0x22
 800a550:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2200      	movs	r2, #0
 800a556:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a558:	f7fb fe20 	bl	800619c <HAL_GetTick>
 800a55c:	0003      	movs	r3, r0
 800a55e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	1dba      	adds	r2, r7, #6
 800a564:	215c      	movs	r1, #92	@ 0x5c
 800a566:	8812      	ldrh	r2, [r2, #0]
 800a568:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	1dba      	adds	r2, r7, #6
 800a56e:	215e      	movs	r1, #94	@ 0x5e
 800a570:	8812      	ldrh	r2, [r2, #0]
 800a572:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	689a      	ldr	r2, [r3, #8]
 800a578:	2380      	movs	r3, #128	@ 0x80
 800a57a:	015b      	lsls	r3, r3, #5
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d10d      	bne.n	800a59c <HAL_UART_Receive+0xa8>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	691b      	ldr	r3, [r3, #16]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d104      	bne.n	800a592 <HAL_UART_Receive+0x9e>
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2260      	movs	r2, #96	@ 0x60
 800a58c:	494b      	ldr	r1, [pc, #300]	@ (800a6bc <HAL_UART_Receive+0x1c8>)
 800a58e:	5299      	strh	r1, [r3, r2]
 800a590:	e02e      	b.n	800a5f0 <HAL_UART_Receive+0xfc>
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2260      	movs	r2, #96	@ 0x60
 800a596:	21ff      	movs	r1, #255	@ 0xff
 800a598:	5299      	strh	r1, [r3, r2]
 800a59a:	e029      	b.n	800a5f0 <HAL_UART_Receive+0xfc>
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d10d      	bne.n	800a5c0 <HAL_UART_Receive+0xcc>
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d104      	bne.n	800a5b6 <HAL_UART_Receive+0xc2>
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2260      	movs	r2, #96	@ 0x60
 800a5b0:	21ff      	movs	r1, #255	@ 0xff
 800a5b2:	5299      	strh	r1, [r3, r2]
 800a5b4:	e01c      	b.n	800a5f0 <HAL_UART_Receive+0xfc>
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2260      	movs	r2, #96	@ 0x60
 800a5ba:	217f      	movs	r1, #127	@ 0x7f
 800a5bc:	5299      	strh	r1, [r3, r2]
 800a5be:	e017      	b.n	800a5f0 <HAL_UART_Receive+0xfc>
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	689a      	ldr	r2, [r3, #8]
 800a5c4:	2380      	movs	r3, #128	@ 0x80
 800a5c6:	055b      	lsls	r3, r3, #21
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d10d      	bne.n	800a5e8 <HAL_UART_Receive+0xf4>
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	691b      	ldr	r3, [r3, #16]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d104      	bne.n	800a5de <HAL_UART_Receive+0xea>
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2260      	movs	r2, #96	@ 0x60
 800a5d8:	217f      	movs	r1, #127	@ 0x7f
 800a5da:	5299      	strh	r1, [r3, r2]
 800a5dc:	e008      	b.n	800a5f0 <HAL_UART_Receive+0xfc>
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2260      	movs	r2, #96	@ 0x60
 800a5e2:	213f      	movs	r1, #63	@ 0x3f
 800a5e4:	5299      	strh	r1, [r3, r2]
 800a5e6:	e003      	b.n	800a5f0 <HAL_UART_Receive+0xfc>
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2260      	movs	r2, #96	@ 0x60
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800a5f0:	2312      	movs	r3, #18
 800a5f2:	18fb      	adds	r3, r7, r3
 800a5f4:	68fa      	ldr	r2, [r7, #12]
 800a5f6:	2160      	movs	r1, #96	@ 0x60
 800a5f8:	5a52      	ldrh	r2, [r2, r1]
 800a5fa:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	689a      	ldr	r2, [r3, #8]
 800a600:	2380      	movs	r3, #128	@ 0x80
 800a602:	015b      	lsls	r3, r3, #5
 800a604:	429a      	cmp	r2, r3
 800a606:	d108      	bne.n	800a61a <HAL_UART_Receive+0x126>
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	691b      	ldr	r3, [r3, #16]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d104      	bne.n	800a61a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800a610:	2300      	movs	r3, #0
 800a612:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	61bb      	str	r3, [r7, #24]
 800a618:	e003      	b.n	800a622 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a61e:	2300      	movs	r3, #0
 800a620:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a622:	e03a      	b.n	800a69a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a624:	697a      	ldr	r2, [r7, #20]
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	9300      	str	r3, [sp, #0]
 800a62c:	0013      	movs	r3, r2
 800a62e:	2200      	movs	r2, #0
 800a630:	2120      	movs	r1, #32
 800a632:	f000 fcf9 	bl	800b028 <UART_WaitOnFlagUntilTimeout>
 800a636:	1e03      	subs	r3, r0, #0
 800a638:	d005      	beq.n	800a646 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	228c      	movs	r2, #140	@ 0x8c
 800a63e:	2120      	movs	r1, #32
 800a640:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a642:	2303      	movs	r3, #3
 800a644:	e036      	b.n	800a6b4 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800a646:	69fb      	ldr	r3, [r7, #28]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d10e      	bne.n	800a66a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a652:	b29b      	uxth	r3, r3
 800a654:	2212      	movs	r2, #18
 800a656:	18ba      	adds	r2, r7, r2
 800a658:	8812      	ldrh	r2, [r2, #0]
 800a65a:	4013      	ands	r3, r2
 800a65c:	b29a      	uxth	r2, r3
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	3302      	adds	r3, #2
 800a666:	61bb      	str	r3, [r7, #24]
 800a668:	e00e      	b.n	800a688 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a670:	b2db      	uxtb	r3, r3
 800a672:	2212      	movs	r2, #18
 800a674:	18ba      	adds	r2, r7, r2
 800a676:	8812      	ldrh	r2, [r2, #0]
 800a678:	b2d2      	uxtb	r2, r2
 800a67a:	4013      	ands	r3, r2
 800a67c:	b2da      	uxtb	r2, r3
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	3301      	adds	r3, #1
 800a686:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	225e      	movs	r2, #94	@ 0x5e
 800a68c:	5a9b      	ldrh	r3, [r3, r2]
 800a68e:	b29b      	uxth	r3, r3
 800a690:	3b01      	subs	r3, #1
 800a692:	b299      	uxth	r1, r3
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	225e      	movs	r2, #94	@ 0x5e
 800a698:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	225e      	movs	r2, #94	@ 0x5e
 800a69e:	5a9b      	ldrh	r3, [r3, r2]
 800a6a0:	b29b      	uxth	r3, r3
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1be      	bne.n	800a624 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	228c      	movs	r2, #140	@ 0x8c
 800a6aa:	2120      	movs	r1, #32
 800a6ac:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	e000      	b.n	800a6b4 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800a6b2:	2302      	movs	r3, #2
  }
}
 800a6b4:	0018      	movs	r0, r3
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	b008      	add	sp, #32
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	000001ff 	.word	0x000001ff

0800a6c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a6c0:	b5b0      	push	{r4, r5, r7, lr}
 800a6c2:	b090      	sub	sp, #64	@ 0x40
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a6c8:	231a      	movs	r3, #26
 800a6ca:	2220      	movs	r2, #32
 800a6cc:	189b      	adds	r3, r3, r2
 800a6ce:	19db      	adds	r3, r3, r7
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d6:	689a      	ldr	r2, [r3, #8]
 800a6d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	431a      	orrs	r2, r3
 800a6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e0:	695b      	ldr	r3, [r3, #20]
 800a6e2:	431a      	orrs	r2, r3
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e6:	69db      	ldr	r3, [r3, #28]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4ac1      	ldr	r2, [pc, #772]	@ (800a9f8 <UART_SetConfig+0x338>)
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	0019      	movs	r1, r3
 800a6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6fe:	430b      	orrs	r3, r1
 800a700:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	4abc      	ldr	r2, [pc, #752]	@ (800a9fc <UART_SetConfig+0x33c>)
 800a70a:	4013      	ands	r3, r2
 800a70c:	0018      	movs	r0, r3
 800a70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a710:	68d9      	ldr	r1, [r3, #12]
 800a712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	0003      	movs	r3, r0
 800a718:	430b      	orrs	r3, r1
 800a71a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a71e:	699b      	ldr	r3, [r3, #24]
 800a720:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4ab6      	ldr	r2, [pc, #728]	@ (800aa00 <UART_SetConfig+0x340>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d009      	beq.n	800a740 <UART_SetConfig+0x80>
 800a72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4ab4      	ldr	r2, [pc, #720]	@ (800aa04 <UART_SetConfig+0x344>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d004      	beq.n	800a740 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a738:	6a1b      	ldr	r3, [r3, #32]
 800a73a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a73c:	4313      	orrs	r3, r2
 800a73e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	4ab0      	ldr	r2, [pc, #704]	@ (800aa08 <UART_SetConfig+0x348>)
 800a748:	4013      	ands	r3, r2
 800a74a:	0019      	movs	r1, r3
 800a74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a752:	430b      	orrs	r3, r1
 800a754:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a75c:	220f      	movs	r2, #15
 800a75e:	4393      	bics	r3, r2
 800a760:	0018      	movs	r0, r3
 800a762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a764:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	0003      	movs	r3, r0
 800a76c:	430b      	orrs	r3, r1
 800a76e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4aa5      	ldr	r2, [pc, #660]	@ (800aa0c <UART_SetConfig+0x34c>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d131      	bne.n	800a7de <UART_SetConfig+0x11e>
 800a77a:	4ba5      	ldr	r3, [pc, #660]	@ (800aa10 <UART_SetConfig+0x350>)
 800a77c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a77e:	2203      	movs	r2, #3
 800a780:	4013      	ands	r3, r2
 800a782:	2b03      	cmp	r3, #3
 800a784:	d01d      	beq.n	800a7c2 <UART_SetConfig+0x102>
 800a786:	d823      	bhi.n	800a7d0 <UART_SetConfig+0x110>
 800a788:	2b02      	cmp	r3, #2
 800a78a:	d00c      	beq.n	800a7a6 <UART_SetConfig+0xe6>
 800a78c:	d820      	bhi.n	800a7d0 <UART_SetConfig+0x110>
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d002      	beq.n	800a798 <UART_SetConfig+0xd8>
 800a792:	2b01      	cmp	r3, #1
 800a794:	d00e      	beq.n	800a7b4 <UART_SetConfig+0xf4>
 800a796:	e01b      	b.n	800a7d0 <UART_SetConfig+0x110>
 800a798:	231b      	movs	r3, #27
 800a79a:	2220      	movs	r2, #32
 800a79c:	189b      	adds	r3, r3, r2
 800a79e:	19db      	adds	r3, r3, r7
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	701a      	strb	r2, [r3, #0]
 800a7a4:	e154      	b.n	800aa50 <UART_SetConfig+0x390>
 800a7a6:	231b      	movs	r3, #27
 800a7a8:	2220      	movs	r2, #32
 800a7aa:	189b      	adds	r3, r3, r2
 800a7ac:	19db      	adds	r3, r3, r7
 800a7ae:	2202      	movs	r2, #2
 800a7b0:	701a      	strb	r2, [r3, #0]
 800a7b2:	e14d      	b.n	800aa50 <UART_SetConfig+0x390>
 800a7b4:	231b      	movs	r3, #27
 800a7b6:	2220      	movs	r2, #32
 800a7b8:	189b      	adds	r3, r3, r2
 800a7ba:	19db      	adds	r3, r3, r7
 800a7bc:	2204      	movs	r2, #4
 800a7be:	701a      	strb	r2, [r3, #0]
 800a7c0:	e146      	b.n	800aa50 <UART_SetConfig+0x390>
 800a7c2:	231b      	movs	r3, #27
 800a7c4:	2220      	movs	r2, #32
 800a7c6:	189b      	adds	r3, r3, r2
 800a7c8:	19db      	adds	r3, r3, r7
 800a7ca:	2208      	movs	r2, #8
 800a7cc:	701a      	strb	r2, [r3, #0]
 800a7ce:	e13f      	b.n	800aa50 <UART_SetConfig+0x390>
 800a7d0:	231b      	movs	r3, #27
 800a7d2:	2220      	movs	r2, #32
 800a7d4:	189b      	adds	r3, r3, r2
 800a7d6:	19db      	adds	r3, r3, r7
 800a7d8:	2210      	movs	r2, #16
 800a7da:	701a      	strb	r2, [r3, #0]
 800a7dc:	e138      	b.n	800aa50 <UART_SetConfig+0x390>
 800a7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a8c      	ldr	r2, [pc, #560]	@ (800aa14 <UART_SetConfig+0x354>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d131      	bne.n	800a84c <UART_SetConfig+0x18c>
 800a7e8:	4b89      	ldr	r3, [pc, #548]	@ (800aa10 <UART_SetConfig+0x350>)
 800a7ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7ec:	220c      	movs	r2, #12
 800a7ee:	4013      	ands	r3, r2
 800a7f0:	2b0c      	cmp	r3, #12
 800a7f2:	d01d      	beq.n	800a830 <UART_SetConfig+0x170>
 800a7f4:	d823      	bhi.n	800a83e <UART_SetConfig+0x17e>
 800a7f6:	2b08      	cmp	r3, #8
 800a7f8:	d00c      	beq.n	800a814 <UART_SetConfig+0x154>
 800a7fa:	d820      	bhi.n	800a83e <UART_SetConfig+0x17e>
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d002      	beq.n	800a806 <UART_SetConfig+0x146>
 800a800:	2b04      	cmp	r3, #4
 800a802:	d00e      	beq.n	800a822 <UART_SetConfig+0x162>
 800a804:	e01b      	b.n	800a83e <UART_SetConfig+0x17e>
 800a806:	231b      	movs	r3, #27
 800a808:	2220      	movs	r2, #32
 800a80a:	189b      	adds	r3, r3, r2
 800a80c:	19db      	adds	r3, r3, r7
 800a80e:	2200      	movs	r2, #0
 800a810:	701a      	strb	r2, [r3, #0]
 800a812:	e11d      	b.n	800aa50 <UART_SetConfig+0x390>
 800a814:	231b      	movs	r3, #27
 800a816:	2220      	movs	r2, #32
 800a818:	189b      	adds	r3, r3, r2
 800a81a:	19db      	adds	r3, r3, r7
 800a81c:	2202      	movs	r2, #2
 800a81e:	701a      	strb	r2, [r3, #0]
 800a820:	e116      	b.n	800aa50 <UART_SetConfig+0x390>
 800a822:	231b      	movs	r3, #27
 800a824:	2220      	movs	r2, #32
 800a826:	189b      	adds	r3, r3, r2
 800a828:	19db      	adds	r3, r3, r7
 800a82a:	2204      	movs	r2, #4
 800a82c:	701a      	strb	r2, [r3, #0]
 800a82e:	e10f      	b.n	800aa50 <UART_SetConfig+0x390>
 800a830:	231b      	movs	r3, #27
 800a832:	2220      	movs	r2, #32
 800a834:	189b      	adds	r3, r3, r2
 800a836:	19db      	adds	r3, r3, r7
 800a838:	2208      	movs	r2, #8
 800a83a:	701a      	strb	r2, [r3, #0]
 800a83c:	e108      	b.n	800aa50 <UART_SetConfig+0x390>
 800a83e:	231b      	movs	r3, #27
 800a840:	2220      	movs	r2, #32
 800a842:	189b      	adds	r3, r3, r2
 800a844:	19db      	adds	r3, r3, r7
 800a846:	2210      	movs	r2, #16
 800a848:	701a      	strb	r2, [r3, #0]
 800a84a:	e101      	b.n	800aa50 <UART_SetConfig+0x390>
 800a84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a71      	ldr	r2, [pc, #452]	@ (800aa18 <UART_SetConfig+0x358>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d131      	bne.n	800a8ba <UART_SetConfig+0x1fa>
 800a856:	4b6e      	ldr	r3, [pc, #440]	@ (800aa10 <UART_SetConfig+0x350>)
 800a858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a85a:	2230      	movs	r2, #48	@ 0x30
 800a85c:	4013      	ands	r3, r2
 800a85e:	2b30      	cmp	r3, #48	@ 0x30
 800a860:	d01d      	beq.n	800a89e <UART_SetConfig+0x1de>
 800a862:	d823      	bhi.n	800a8ac <UART_SetConfig+0x1ec>
 800a864:	2b20      	cmp	r3, #32
 800a866:	d00c      	beq.n	800a882 <UART_SetConfig+0x1c2>
 800a868:	d820      	bhi.n	800a8ac <UART_SetConfig+0x1ec>
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d002      	beq.n	800a874 <UART_SetConfig+0x1b4>
 800a86e:	2b10      	cmp	r3, #16
 800a870:	d00e      	beq.n	800a890 <UART_SetConfig+0x1d0>
 800a872:	e01b      	b.n	800a8ac <UART_SetConfig+0x1ec>
 800a874:	231b      	movs	r3, #27
 800a876:	2220      	movs	r2, #32
 800a878:	189b      	adds	r3, r3, r2
 800a87a:	19db      	adds	r3, r3, r7
 800a87c:	2200      	movs	r2, #0
 800a87e:	701a      	strb	r2, [r3, #0]
 800a880:	e0e6      	b.n	800aa50 <UART_SetConfig+0x390>
 800a882:	231b      	movs	r3, #27
 800a884:	2220      	movs	r2, #32
 800a886:	189b      	adds	r3, r3, r2
 800a888:	19db      	adds	r3, r3, r7
 800a88a:	2202      	movs	r2, #2
 800a88c:	701a      	strb	r2, [r3, #0]
 800a88e:	e0df      	b.n	800aa50 <UART_SetConfig+0x390>
 800a890:	231b      	movs	r3, #27
 800a892:	2220      	movs	r2, #32
 800a894:	189b      	adds	r3, r3, r2
 800a896:	19db      	adds	r3, r3, r7
 800a898:	2204      	movs	r2, #4
 800a89a:	701a      	strb	r2, [r3, #0]
 800a89c:	e0d8      	b.n	800aa50 <UART_SetConfig+0x390>
 800a89e:	231b      	movs	r3, #27
 800a8a0:	2220      	movs	r2, #32
 800a8a2:	189b      	adds	r3, r3, r2
 800a8a4:	19db      	adds	r3, r3, r7
 800a8a6:	2208      	movs	r2, #8
 800a8a8:	701a      	strb	r2, [r3, #0]
 800a8aa:	e0d1      	b.n	800aa50 <UART_SetConfig+0x390>
 800a8ac:	231b      	movs	r3, #27
 800a8ae:	2220      	movs	r2, #32
 800a8b0:	189b      	adds	r3, r3, r2
 800a8b2:	19db      	adds	r3, r3, r7
 800a8b4:	2210      	movs	r2, #16
 800a8b6:	701a      	strb	r2, [r3, #0]
 800a8b8:	e0ca      	b.n	800aa50 <UART_SetConfig+0x390>
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a57      	ldr	r2, [pc, #348]	@ (800aa1c <UART_SetConfig+0x35c>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d106      	bne.n	800a8d2 <UART_SetConfig+0x212>
 800a8c4:	231b      	movs	r3, #27
 800a8c6:	2220      	movs	r2, #32
 800a8c8:	189b      	adds	r3, r3, r2
 800a8ca:	19db      	adds	r3, r3, r7
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	701a      	strb	r2, [r3, #0]
 800a8d0:	e0be      	b.n	800aa50 <UART_SetConfig+0x390>
 800a8d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a52      	ldr	r2, [pc, #328]	@ (800aa20 <UART_SetConfig+0x360>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d106      	bne.n	800a8ea <UART_SetConfig+0x22a>
 800a8dc:	231b      	movs	r3, #27
 800a8de:	2220      	movs	r2, #32
 800a8e0:	189b      	adds	r3, r3, r2
 800a8e2:	19db      	adds	r3, r3, r7
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	701a      	strb	r2, [r3, #0]
 800a8e8:	e0b2      	b.n	800aa50 <UART_SetConfig+0x390>
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a4d      	ldr	r2, [pc, #308]	@ (800aa24 <UART_SetConfig+0x364>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d106      	bne.n	800a902 <UART_SetConfig+0x242>
 800a8f4:	231b      	movs	r3, #27
 800a8f6:	2220      	movs	r2, #32
 800a8f8:	189b      	adds	r3, r3, r2
 800a8fa:	19db      	adds	r3, r3, r7
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	701a      	strb	r2, [r3, #0]
 800a900:	e0a6      	b.n	800aa50 <UART_SetConfig+0x390>
 800a902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a3e      	ldr	r2, [pc, #248]	@ (800aa00 <UART_SetConfig+0x340>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d13e      	bne.n	800a98a <UART_SetConfig+0x2ca>
 800a90c:	4b40      	ldr	r3, [pc, #256]	@ (800aa10 <UART_SetConfig+0x350>)
 800a90e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a910:	23c0      	movs	r3, #192	@ 0xc0
 800a912:	011b      	lsls	r3, r3, #4
 800a914:	4013      	ands	r3, r2
 800a916:	22c0      	movs	r2, #192	@ 0xc0
 800a918:	0112      	lsls	r2, r2, #4
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d027      	beq.n	800a96e <UART_SetConfig+0x2ae>
 800a91e:	22c0      	movs	r2, #192	@ 0xc0
 800a920:	0112      	lsls	r2, r2, #4
 800a922:	4293      	cmp	r3, r2
 800a924:	d82a      	bhi.n	800a97c <UART_SetConfig+0x2bc>
 800a926:	2280      	movs	r2, #128	@ 0x80
 800a928:	0112      	lsls	r2, r2, #4
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d011      	beq.n	800a952 <UART_SetConfig+0x292>
 800a92e:	2280      	movs	r2, #128	@ 0x80
 800a930:	0112      	lsls	r2, r2, #4
 800a932:	4293      	cmp	r3, r2
 800a934:	d822      	bhi.n	800a97c <UART_SetConfig+0x2bc>
 800a936:	2b00      	cmp	r3, #0
 800a938:	d004      	beq.n	800a944 <UART_SetConfig+0x284>
 800a93a:	2280      	movs	r2, #128	@ 0x80
 800a93c:	00d2      	lsls	r2, r2, #3
 800a93e:	4293      	cmp	r3, r2
 800a940:	d00e      	beq.n	800a960 <UART_SetConfig+0x2a0>
 800a942:	e01b      	b.n	800a97c <UART_SetConfig+0x2bc>
 800a944:	231b      	movs	r3, #27
 800a946:	2220      	movs	r2, #32
 800a948:	189b      	adds	r3, r3, r2
 800a94a:	19db      	adds	r3, r3, r7
 800a94c:	2200      	movs	r2, #0
 800a94e:	701a      	strb	r2, [r3, #0]
 800a950:	e07e      	b.n	800aa50 <UART_SetConfig+0x390>
 800a952:	231b      	movs	r3, #27
 800a954:	2220      	movs	r2, #32
 800a956:	189b      	adds	r3, r3, r2
 800a958:	19db      	adds	r3, r3, r7
 800a95a:	2202      	movs	r2, #2
 800a95c:	701a      	strb	r2, [r3, #0]
 800a95e:	e077      	b.n	800aa50 <UART_SetConfig+0x390>
 800a960:	231b      	movs	r3, #27
 800a962:	2220      	movs	r2, #32
 800a964:	189b      	adds	r3, r3, r2
 800a966:	19db      	adds	r3, r3, r7
 800a968:	2204      	movs	r2, #4
 800a96a:	701a      	strb	r2, [r3, #0]
 800a96c:	e070      	b.n	800aa50 <UART_SetConfig+0x390>
 800a96e:	231b      	movs	r3, #27
 800a970:	2220      	movs	r2, #32
 800a972:	189b      	adds	r3, r3, r2
 800a974:	19db      	adds	r3, r3, r7
 800a976:	2208      	movs	r2, #8
 800a978:	701a      	strb	r2, [r3, #0]
 800a97a:	e069      	b.n	800aa50 <UART_SetConfig+0x390>
 800a97c:	231b      	movs	r3, #27
 800a97e:	2220      	movs	r2, #32
 800a980:	189b      	adds	r3, r3, r2
 800a982:	19db      	adds	r3, r3, r7
 800a984:	2210      	movs	r2, #16
 800a986:	701a      	strb	r2, [r3, #0]
 800a988:	e062      	b.n	800aa50 <UART_SetConfig+0x390>
 800a98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a1d      	ldr	r2, [pc, #116]	@ (800aa04 <UART_SetConfig+0x344>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d157      	bne.n	800aa44 <UART_SetConfig+0x384>
 800a994:	4b1e      	ldr	r3, [pc, #120]	@ (800aa10 <UART_SetConfig+0x350>)
 800a996:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a998:	23c0      	movs	r3, #192	@ 0xc0
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	4013      	ands	r3, r2
 800a99e:	22c0      	movs	r2, #192	@ 0xc0
 800a9a0:	0092      	lsls	r2, r2, #2
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d040      	beq.n	800aa28 <UART_SetConfig+0x368>
 800a9a6:	22c0      	movs	r2, #192	@ 0xc0
 800a9a8:	0092      	lsls	r2, r2, #2
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d843      	bhi.n	800aa36 <UART_SetConfig+0x376>
 800a9ae:	2280      	movs	r2, #128	@ 0x80
 800a9b0:	0092      	lsls	r2, r2, #2
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d011      	beq.n	800a9da <UART_SetConfig+0x31a>
 800a9b6:	2280      	movs	r2, #128	@ 0x80
 800a9b8:	0092      	lsls	r2, r2, #2
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d83b      	bhi.n	800aa36 <UART_SetConfig+0x376>
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d004      	beq.n	800a9cc <UART_SetConfig+0x30c>
 800a9c2:	2280      	movs	r2, #128	@ 0x80
 800a9c4:	0052      	lsls	r2, r2, #1
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d00e      	beq.n	800a9e8 <UART_SetConfig+0x328>
 800a9ca:	e034      	b.n	800aa36 <UART_SetConfig+0x376>
 800a9cc:	231b      	movs	r3, #27
 800a9ce:	2220      	movs	r2, #32
 800a9d0:	189b      	adds	r3, r3, r2
 800a9d2:	19db      	adds	r3, r3, r7
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	701a      	strb	r2, [r3, #0]
 800a9d8:	e03a      	b.n	800aa50 <UART_SetConfig+0x390>
 800a9da:	231b      	movs	r3, #27
 800a9dc:	2220      	movs	r2, #32
 800a9de:	189b      	adds	r3, r3, r2
 800a9e0:	19db      	adds	r3, r3, r7
 800a9e2:	2202      	movs	r2, #2
 800a9e4:	701a      	strb	r2, [r3, #0]
 800a9e6:	e033      	b.n	800aa50 <UART_SetConfig+0x390>
 800a9e8:	231b      	movs	r3, #27
 800a9ea:	2220      	movs	r2, #32
 800a9ec:	189b      	adds	r3, r3, r2
 800a9ee:	19db      	adds	r3, r3, r7
 800a9f0:	2204      	movs	r2, #4
 800a9f2:	701a      	strb	r2, [r3, #0]
 800a9f4:	e02c      	b.n	800aa50 <UART_SetConfig+0x390>
 800a9f6:	46c0      	nop			@ (mov r8, r8)
 800a9f8:	cfff69f3 	.word	0xcfff69f3
 800a9fc:	ffffcfff 	.word	0xffffcfff
 800aa00:	40008000 	.word	0x40008000
 800aa04:	40008400 	.word	0x40008400
 800aa08:	11fff4ff 	.word	0x11fff4ff
 800aa0c:	40013800 	.word	0x40013800
 800aa10:	40021000 	.word	0x40021000
 800aa14:	40004400 	.word	0x40004400
 800aa18:	40004800 	.word	0x40004800
 800aa1c:	40004c00 	.word	0x40004c00
 800aa20:	40005000 	.word	0x40005000
 800aa24:	40013c00 	.word	0x40013c00
 800aa28:	231b      	movs	r3, #27
 800aa2a:	2220      	movs	r2, #32
 800aa2c:	189b      	adds	r3, r3, r2
 800aa2e:	19db      	adds	r3, r3, r7
 800aa30:	2208      	movs	r2, #8
 800aa32:	701a      	strb	r2, [r3, #0]
 800aa34:	e00c      	b.n	800aa50 <UART_SetConfig+0x390>
 800aa36:	231b      	movs	r3, #27
 800aa38:	2220      	movs	r2, #32
 800aa3a:	189b      	adds	r3, r3, r2
 800aa3c:	19db      	adds	r3, r3, r7
 800aa3e:	2210      	movs	r2, #16
 800aa40:	701a      	strb	r2, [r3, #0]
 800aa42:	e005      	b.n	800aa50 <UART_SetConfig+0x390>
 800aa44:	231b      	movs	r3, #27
 800aa46:	2220      	movs	r2, #32
 800aa48:	189b      	adds	r3, r3, r2
 800aa4a:	19db      	adds	r3, r3, r7
 800aa4c:	2210      	movs	r2, #16
 800aa4e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aa50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4ac1      	ldr	r2, [pc, #772]	@ (800ad5c <UART_SetConfig+0x69c>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d005      	beq.n	800aa66 <UART_SetConfig+0x3a6>
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4ac0      	ldr	r2, [pc, #768]	@ (800ad60 <UART_SetConfig+0x6a0>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d000      	beq.n	800aa66 <UART_SetConfig+0x3a6>
 800aa64:	e093      	b.n	800ab8e <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800aa66:	231b      	movs	r3, #27
 800aa68:	2220      	movs	r2, #32
 800aa6a:	189b      	adds	r3, r3, r2
 800aa6c:	19db      	adds	r3, r3, r7
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	2b08      	cmp	r3, #8
 800aa72:	d015      	beq.n	800aaa0 <UART_SetConfig+0x3e0>
 800aa74:	dc18      	bgt.n	800aaa8 <UART_SetConfig+0x3e8>
 800aa76:	2b04      	cmp	r3, #4
 800aa78:	d00d      	beq.n	800aa96 <UART_SetConfig+0x3d6>
 800aa7a:	dc15      	bgt.n	800aaa8 <UART_SetConfig+0x3e8>
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d002      	beq.n	800aa86 <UART_SetConfig+0x3c6>
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	d005      	beq.n	800aa90 <UART_SetConfig+0x3d0>
 800aa84:	e010      	b.n	800aaa8 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa86:	f7fd f9d5 	bl	8007e34 <HAL_RCC_GetPCLK1Freq>
 800aa8a:	0003      	movs	r3, r0
 800aa8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa8e:	e014      	b.n	800aaba <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa90:	4bb4      	ldr	r3, [pc, #720]	@ (800ad64 <UART_SetConfig+0x6a4>)
 800aa92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa94:	e011      	b.n	800aaba <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa96:	f7fd f941 	bl	8007d1c <HAL_RCC_GetSysClockFreq>
 800aa9a:	0003      	movs	r3, r0
 800aa9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa9e:	e00c      	b.n	800aaba <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaa0:	2380      	movs	r3, #128	@ 0x80
 800aaa2:	021b      	lsls	r3, r3, #8
 800aaa4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aaa6:	e008      	b.n	800aaba <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800aaac:	231a      	movs	r3, #26
 800aaae:	2220      	movs	r2, #32
 800aab0:	189b      	adds	r3, r3, r2
 800aab2:	19db      	adds	r3, r3, r7
 800aab4:	2201      	movs	r2, #1
 800aab6:	701a      	strb	r2, [r3, #0]
        break;
 800aab8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aaba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d100      	bne.n	800aac2 <UART_SetConfig+0x402>
 800aac0:	e135      	b.n	800ad2e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aac6:	4ba8      	ldr	r3, [pc, #672]	@ (800ad68 <UART_SetConfig+0x6a8>)
 800aac8:	0052      	lsls	r2, r2, #1
 800aaca:	5ad3      	ldrh	r3, [r2, r3]
 800aacc:	0019      	movs	r1, r3
 800aace:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800aad0:	f7f5 fb2c 	bl	800012c <__udivsi3>
 800aad4:	0003      	movs	r3, r0
 800aad6:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aada:	685a      	ldr	r2, [r3, #4]
 800aadc:	0013      	movs	r3, r2
 800aade:	005b      	lsls	r3, r3, #1
 800aae0:	189b      	adds	r3, r3, r2
 800aae2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d305      	bcc.n	800aaf4 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaea:	685b      	ldr	r3, [r3, #4]
 800aaec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aaee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d906      	bls.n	800ab02 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800aaf4:	231a      	movs	r3, #26
 800aaf6:	2220      	movs	r2, #32
 800aaf8:	189b      	adds	r3, r3, r2
 800aafa:	19db      	adds	r3, r3, r7
 800aafc:	2201      	movs	r2, #1
 800aafe:	701a      	strb	r2, [r3, #0]
 800ab00:	e044      	b.n	800ab8c <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab04:	61bb      	str	r3, [r7, #24]
 800ab06:	2300      	movs	r3, #0
 800ab08:	61fb      	str	r3, [r7, #28]
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab0e:	4b96      	ldr	r3, [pc, #600]	@ (800ad68 <UART_SetConfig+0x6a8>)
 800ab10:	0052      	lsls	r2, r2, #1
 800ab12:	5ad3      	ldrh	r3, [r2, r3]
 800ab14:	613b      	str	r3, [r7, #16]
 800ab16:	2300      	movs	r3, #0
 800ab18:	617b      	str	r3, [r7, #20]
 800ab1a:	693a      	ldr	r2, [r7, #16]
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	69b8      	ldr	r0, [r7, #24]
 800ab20:	69f9      	ldr	r1, [r7, #28]
 800ab22:	f7f5 fcf1 	bl	8000508 <__aeabi_uldivmod>
 800ab26:	0002      	movs	r2, r0
 800ab28:	000b      	movs	r3, r1
 800ab2a:	0e11      	lsrs	r1, r2, #24
 800ab2c:	021d      	lsls	r5, r3, #8
 800ab2e:	430d      	orrs	r5, r1
 800ab30:	0214      	lsls	r4, r2, #8
 800ab32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	085b      	lsrs	r3, r3, #1
 800ab38:	60bb      	str	r3, [r7, #8]
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	60fb      	str	r3, [r7, #12]
 800ab3e:	68b8      	ldr	r0, [r7, #8]
 800ab40:	68f9      	ldr	r1, [r7, #12]
 800ab42:	1900      	adds	r0, r0, r4
 800ab44:	4169      	adcs	r1, r5
 800ab46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	603b      	str	r3, [r7, #0]
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	607b      	str	r3, [r7, #4]
 800ab50:	683a      	ldr	r2, [r7, #0]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f7f5 fcd8 	bl	8000508 <__aeabi_uldivmod>
 800ab58:	0002      	movs	r2, r0
 800ab5a:	000b      	movs	r3, r1
 800ab5c:	0013      	movs	r3, r2
 800ab5e:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ab60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab62:	23c0      	movs	r3, #192	@ 0xc0
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d309      	bcc.n	800ab7e <UART_SetConfig+0x4be>
 800ab6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab6c:	2380      	movs	r3, #128	@ 0x80
 800ab6e:	035b      	lsls	r3, r3, #13
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d204      	bcs.n	800ab7e <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800ab74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab7a:	60da      	str	r2, [r3, #12]
 800ab7c:	e006      	b.n	800ab8c <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800ab7e:	231a      	movs	r3, #26
 800ab80:	2220      	movs	r2, #32
 800ab82:	189b      	adds	r3, r3, r2
 800ab84:	19db      	adds	r3, r3, r7
 800ab86:	2201      	movs	r2, #1
 800ab88:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800ab8a:	e0d0      	b.n	800ad2e <UART_SetConfig+0x66e>
 800ab8c:	e0cf      	b.n	800ad2e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab90:	69da      	ldr	r2, [r3, #28]
 800ab92:	2380      	movs	r3, #128	@ 0x80
 800ab94:	021b      	lsls	r3, r3, #8
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d000      	beq.n	800ab9c <UART_SetConfig+0x4dc>
 800ab9a:	e070      	b.n	800ac7e <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800ab9c:	231b      	movs	r3, #27
 800ab9e:	2220      	movs	r2, #32
 800aba0:	189b      	adds	r3, r3, r2
 800aba2:	19db      	adds	r3, r3, r7
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	2b08      	cmp	r3, #8
 800aba8:	d015      	beq.n	800abd6 <UART_SetConfig+0x516>
 800abaa:	dc18      	bgt.n	800abde <UART_SetConfig+0x51e>
 800abac:	2b04      	cmp	r3, #4
 800abae:	d00d      	beq.n	800abcc <UART_SetConfig+0x50c>
 800abb0:	dc15      	bgt.n	800abde <UART_SetConfig+0x51e>
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d002      	beq.n	800abbc <UART_SetConfig+0x4fc>
 800abb6:	2b02      	cmp	r3, #2
 800abb8:	d005      	beq.n	800abc6 <UART_SetConfig+0x506>
 800abba:	e010      	b.n	800abde <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abbc:	f7fd f93a 	bl	8007e34 <HAL_RCC_GetPCLK1Freq>
 800abc0:	0003      	movs	r3, r0
 800abc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800abc4:	e014      	b.n	800abf0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800abc6:	4b67      	ldr	r3, [pc, #412]	@ (800ad64 <UART_SetConfig+0x6a4>)
 800abc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800abca:	e011      	b.n	800abf0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abcc:	f7fd f8a6 	bl	8007d1c <HAL_RCC_GetSysClockFreq>
 800abd0:	0003      	movs	r3, r0
 800abd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800abd4:	e00c      	b.n	800abf0 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abd6:	2380      	movs	r3, #128	@ 0x80
 800abd8:	021b      	lsls	r3, r3, #8
 800abda:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800abdc:	e008      	b.n	800abf0 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800abde:	2300      	movs	r3, #0
 800abe0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800abe2:	231a      	movs	r3, #26
 800abe4:	2220      	movs	r2, #32
 800abe6:	189b      	adds	r3, r3, r2
 800abe8:	19db      	adds	r3, r3, r7
 800abea:	2201      	movs	r2, #1
 800abec:	701a      	strb	r2, [r3, #0]
        break;
 800abee:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800abf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d100      	bne.n	800abf8 <UART_SetConfig+0x538>
 800abf6:	e09a      	b.n	800ad2e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800abfc:	4b5a      	ldr	r3, [pc, #360]	@ (800ad68 <UART_SetConfig+0x6a8>)
 800abfe:	0052      	lsls	r2, r2, #1
 800ac00:	5ad3      	ldrh	r3, [r2, r3]
 800ac02:	0019      	movs	r1, r3
 800ac04:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ac06:	f7f5 fa91 	bl	800012c <__udivsi3>
 800ac0a:	0003      	movs	r3, r0
 800ac0c:	005a      	lsls	r2, r3, #1
 800ac0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	085b      	lsrs	r3, r3, #1
 800ac14:	18d2      	adds	r2, r2, r3
 800ac16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	0019      	movs	r1, r3
 800ac1c:	0010      	movs	r0, r2
 800ac1e:	f7f5 fa85 	bl	800012c <__udivsi3>
 800ac22:	0003      	movs	r3, r0
 800ac24:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac28:	2b0f      	cmp	r3, #15
 800ac2a:	d921      	bls.n	800ac70 <UART_SetConfig+0x5b0>
 800ac2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac2e:	2380      	movs	r3, #128	@ 0x80
 800ac30:	025b      	lsls	r3, r3, #9
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d21c      	bcs.n	800ac70 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac38:	b29a      	uxth	r2, r3
 800ac3a:	200e      	movs	r0, #14
 800ac3c:	2420      	movs	r4, #32
 800ac3e:	1903      	adds	r3, r0, r4
 800ac40:	19db      	adds	r3, r3, r7
 800ac42:	210f      	movs	r1, #15
 800ac44:	438a      	bics	r2, r1
 800ac46:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac4a:	085b      	lsrs	r3, r3, #1
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	2207      	movs	r2, #7
 800ac50:	4013      	ands	r3, r2
 800ac52:	b299      	uxth	r1, r3
 800ac54:	1903      	adds	r3, r0, r4
 800ac56:	19db      	adds	r3, r3, r7
 800ac58:	1902      	adds	r2, r0, r4
 800ac5a:	19d2      	adds	r2, r2, r7
 800ac5c:	8812      	ldrh	r2, [r2, #0]
 800ac5e:	430a      	orrs	r2, r1
 800ac60:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800ac62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	1902      	adds	r2, r0, r4
 800ac68:	19d2      	adds	r2, r2, r7
 800ac6a:	8812      	ldrh	r2, [r2, #0]
 800ac6c:	60da      	str	r2, [r3, #12]
 800ac6e:	e05e      	b.n	800ad2e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800ac70:	231a      	movs	r3, #26
 800ac72:	2220      	movs	r2, #32
 800ac74:	189b      	adds	r3, r3, r2
 800ac76:	19db      	adds	r3, r3, r7
 800ac78:	2201      	movs	r2, #1
 800ac7a:	701a      	strb	r2, [r3, #0]
 800ac7c:	e057      	b.n	800ad2e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ac7e:	231b      	movs	r3, #27
 800ac80:	2220      	movs	r2, #32
 800ac82:	189b      	adds	r3, r3, r2
 800ac84:	19db      	adds	r3, r3, r7
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	2b08      	cmp	r3, #8
 800ac8a:	d015      	beq.n	800acb8 <UART_SetConfig+0x5f8>
 800ac8c:	dc18      	bgt.n	800acc0 <UART_SetConfig+0x600>
 800ac8e:	2b04      	cmp	r3, #4
 800ac90:	d00d      	beq.n	800acae <UART_SetConfig+0x5ee>
 800ac92:	dc15      	bgt.n	800acc0 <UART_SetConfig+0x600>
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d002      	beq.n	800ac9e <UART_SetConfig+0x5de>
 800ac98:	2b02      	cmp	r3, #2
 800ac9a:	d005      	beq.n	800aca8 <UART_SetConfig+0x5e8>
 800ac9c:	e010      	b.n	800acc0 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac9e:	f7fd f8c9 	bl	8007e34 <HAL_RCC_GetPCLK1Freq>
 800aca2:	0003      	movs	r3, r0
 800aca4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aca6:	e014      	b.n	800acd2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aca8:	4b2e      	ldr	r3, [pc, #184]	@ (800ad64 <UART_SetConfig+0x6a4>)
 800acaa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800acac:	e011      	b.n	800acd2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acae:	f7fd f835 	bl	8007d1c <HAL_RCC_GetSysClockFreq>
 800acb2:	0003      	movs	r3, r0
 800acb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800acb6:	e00c      	b.n	800acd2 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acb8:	2380      	movs	r3, #128	@ 0x80
 800acba:	021b      	lsls	r3, r3, #8
 800acbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800acbe:	e008      	b.n	800acd2 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800acc0:	2300      	movs	r3, #0
 800acc2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800acc4:	231a      	movs	r3, #26
 800acc6:	2220      	movs	r2, #32
 800acc8:	189b      	adds	r3, r3, r2
 800acca:	19db      	adds	r3, r3, r7
 800accc:	2201      	movs	r2, #1
 800acce:	701a      	strb	r2, [r3, #0]
        break;
 800acd0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800acd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d02a      	beq.n	800ad2e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800acdc:	4b22      	ldr	r3, [pc, #136]	@ (800ad68 <UART_SetConfig+0x6a8>)
 800acde:	0052      	lsls	r2, r2, #1
 800ace0:	5ad3      	ldrh	r3, [r2, r3]
 800ace2:	0019      	movs	r1, r3
 800ace4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ace6:	f7f5 fa21 	bl	800012c <__udivsi3>
 800acea:	0003      	movs	r3, r0
 800acec:	001a      	movs	r2, r3
 800acee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	085b      	lsrs	r3, r3, #1
 800acf4:	18d2      	adds	r2, r2, r3
 800acf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	0019      	movs	r1, r3
 800acfc:	0010      	movs	r0, r2
 800acfe:	f7f5 fa15 	bl	800012c <__udivsi3>
 800ad02:	0003      	movs	r3, r0
 800ad04:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad08:	2b0f      	cmp	r3, #15
 800ad0a:	d90a      	bls.n	800ad22 <UART_SetConfig+0x662>
 800ad0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad0e:	2380      	movs	r3, #128	@ 0x80
 800ad10:	025b      	lsls	r3, r3, #9
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d205      	bcs.n	800ad22 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ad16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad18:	b29a      	uxth	r2, r3
 800ad1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	60da      	str	r2, [r3, #12]
 800ad20:	e005      	b.n	800ad2e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800ad22:	231a      	movs	r3, #26
 800ad24:	2220      	movs	r2, #32
 800ad26:	189b      	adds	r3, r3, r2
 800ad28:	19db      	adds	r3, r3, r7
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ad2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad30:	226a      	movs	r2, #106	@ 0x6a
 800ad32:	2101      	movs	r1, #1
 800ad34:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800ad36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad38:	2268      	movs	r2, #104	@ 0x68
 800ad3a:	2101      	movs	r1, #1
 800ad3c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad40:	2200      	movs	r2, #0
 800ad42:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ad44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad46:	2200      	movs	r2, #0
 800ad48:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ad4a:	231a      	movs	r3, #26
 800ad4c:	2220      	movs	r2, #32
 800ad4e:	189b      	adds	r3, r3, r2
 800ad50:	19db      	adds	r3, r3, r7
 800ad52:	781b      	ldrb	r3, [r3, #0]
}
 800ad54:	0018      	movs	r0, r3
 800ad56:	46bd      	mov	sp, r7
 800ad58:	b010      	add	sp, #64	@ 0x40
 800ad5a:	bdb0      	pop	{r4, r5, r7, pc}
 800ad5c:	40008000 	.word	0x40008000
 800ad60:	40008400 	.word	0x40008400
 800ad64:	00f42400 	.word	0x00f42400
 800ad68:	0800ca30 	.word	0x0800ca30

0800ad6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad78:	2208      	movs	r2, #8
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	d00b      	beq.n	800ad96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	4a4a      	ldr	r2, [pc, #296]	@ (800aeb0 <UART_AdvFeatureConfig+0x144>)
 800ad86:	4013      	ands	r3, r2
 800ad88:	0019      	movs	r1, r3
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	430a      	orrs	r2, r1
 800ad94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	4013      	ands	r3, r2
 800ad9e:	d00b      	beq.n	800adb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	4a43      	ldr	r2, [pc, #268]	@ (800aeb4 <UART_AdvFeatureConfig+0x148>)
 800ada8:	4013      	ands	r3, r2
 800adaa:	0019      	movs	r1, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	430a      	orrs	r2, r1
 800adb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adbc:	2202      	movs	r2, #2
 800adbe:	4013      	ands	r3, r2
 800adc0:	d00b      	beq.n	800adda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	4a3b      	ldr	r2, [pc, #236]	@ (800aeb8 <UART_AdvFeatureConfig+0x14c>)
 800adca:	4013      	ands	r3, r2
 800adcc:	0019      	movs	r1, r3
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	430a      	orrs	r2, r1
 800add8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adde:	2204      	movs	r2, #4
 800ade0:	4013      	ands	r3, r2
 800ade2:	d00b      	beq.n	800adfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	4a34      	ldr	r2, [pc, #208]	@ (800aebc <UART_AdvFeatureConfig+0x150>)
 800adec:	4013      	ands	r3, r2
 800adee:	0019      	movs	r1, r3
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	430a      	orrs	r2, r1
 800adfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae00:	2210      	movs	r2, #16
 800ae02:	4013      	ands	r3, r2
 800ae04:	d00b      	beq.n	800ae1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	4a2c      	ldr	r2, [pc, #176]	@ (800aec0 <UART_AdvFeatureConfig+0x154>)
 800ae0e:	4013      	ands	r3, r2
 800ae10:	0019      	movs	r1, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	430a      	orrs	r2, r1
 800ae1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae22:	2220      	movs	r2, #32
 800ae24:	4013      	ands	r3, r2
 800ae26:	d00b      	beq.n	800ae40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	4a25      	ldr	r2, [pc, #148]	@ (800aec4 <UART_AdvFeatureConfig+0x158>)
 800ae30:	4013      	ands	r3, r2
 800ae32:	0019      	movs	r1, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	430a      	orrs	r2, r1
 800ae3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae44:	2240      	movs	r2, #64	@ 0x40
 800ae46:	4013      	ands	r3, r2
 800ae48:	d01d      	beq.n	800ae86 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	4a1d      	ldr	r2, [pc, #116]	@ (800aec8 <UART_AdvFeatureConfig+0x15c>)
 800ae52:	4013      	ands	r3, r2
 800ae54:	0019      	movs	r1, r3
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	430a      	orrs	r2, r1
 800ae60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae66:	2380      	movs	r3, #128	@ 0x80
 800ae68:	035b      	lsls	r3, r3, #13
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d10b      	bne.n	800ae86 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	4a15      	ldr	r2, [pc, #84]	@ (800aecc <UART_AdvFeatureConfig+0x160>)
 800ae76:	4013      	ands	r3, r2
 800ae78:	0019      	movs	r1, r3
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	430a      	orrs	r2, r1
 800ae84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae8a:	2280      	movs	r2, #128	@ 0x80
 800ae8c:	4013      	ands	r3, r2
 800ae8e:	d00b      	beq.n	800aea8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	4a0e      	ldr	r2, [pc, #56]	@ (800aed0 <UART_AdvFeatureConfig+0x164>)
 800ae98:	4013      	ands	r3, r2
 800ae9a:	0019      	movs	r1, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	430a      	orrs	r2, r1
 800aea6:	605a      	str	r2, [r3, #4]
  }
}
 800aea8:	46c0      	nop			@ (mov r8, r8)
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	b002      	add	sp, #8
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	ffff7fff 	.word	0xffff7fff
 800aeb4:	fffdffff 	.word	0xfffdffff
 800aeb8:	fffeffff 	.word	0xfffeffff
 800aebc:	fffbffff 	.word	0xfffbffff
 800aec0:	ffffefff 	.word	0xffffefff
 800aec4:	ffffdfff 	.word	0xffffdfff
 800aec8:	ffefffff 	.word	0xffefffff
 800aecc:	ff9fffff 	.word	0xff9fffff
 800aed0:	fff7ffff 	.word	0xfff7ffff

0800aed4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b092      	sub	sp, #72	@ 0x48
 800aed8:	af02      	add	r7, sp, #8
 800aeda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2290      	movs	r2, #144	@ 0x90
 800aee0:	2100      	movs	r1, #0
 800aee2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aee4:	f7fb f95a 	bl	800619c <HAL_GetTick>
 800aee8:	0003      	movs	r3, r0
 800aeea:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	2208      	movs	r2, #8
 800aef4:	4013      	ands	r3, r2
 800aef6:	2b08      	cmp	r3, #8
 800aef8:	d12d      	bne.n	800af56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aefa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aefc:	2280      	movs	r2, #128	@ 0x80
 800aefe:	0391      	lsls	r1, r2, #14
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	4a47      	ldr	r2, [pc, #284]	@ (800b020 <UART_CheckIdleState+0x14c>)
 800af04:	9200      	str	r2, [sp, #0]
 800af06:	2200      	movs	r2, #0
 800af08:	f000 f88e 	bl	800b028 <UART_WaitOnFlagUntilTimeout>
 800af0c:	1e03      	subs	r3, r0, #0
 800af0e:	d022      	beq.n	800af56 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af10:	f3ef 8310 	mrs	r3, PRIMASK
 800af14:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800af16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800af18:	63bb      	str	r3, [r7, #56]	@ 0x38
 800af1a:	2301      	movs	r3, #1
 800af1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af20:	f383 8810 	msr	PRIMASK, r3
}
 800af24:	46c0      	nop			@ (mov r8, r8)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	681a      	ldr	r2, [r3, #0]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	2180      	movs	r1, #128	@ 0x80
 800af32:	438a      	bics	r2, r1
 800af34:	601a      	str	r2, [r3, #0]
 800af36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af3c:	f383 8810 	msr	PRIMASK, r3
}
 800af40:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2288      	movs	r2, #136	@ 0x88
 800af46:	2120      	movs	r1, #32
 800af48:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2284      	movs	r2, #132	@ 0x84
 800af4e:	2100      	movs	r1, #0
 800af50:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af52:	2303      	movs	r3, #3
 800af54:	e060      	b.n	800b018 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	2204      	movs	r2, #4
 800af5e:	4013      	ands	r3, r2
 800af60:	2b04      	cmp	r3, #4
 800af62:	d146      	bne.n	800aff2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af66:	2280      	movs	r2, #128	@ 0x80
 800af68:	03d1      	lsls	r1, r2, #15
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	4a2c      	ldr	r2, [pc, #176]	@ (800b020 <UART_CheckIdleState+0x14c>)
 800af6e:	9200      	str	r2, [sp, #0]
 800af70:	2200      	movs	r2, #0
 800af72:	f000 f859 	bl	800b028 <UART_WaitOnFlagUntilTimeout>
 800af76:	1e03      	subs	r3, r0, #0
 800af78:	d03b      	beq.n	800aff2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af7a:	f3ef 8310 	mrs	r3, PRIMASK
 800af7e:	60fb      	str	r3, [r7, #12]
  return(result);
 800af80:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af82:	637b      	str	r3, [r7, #52]	@ 0x34
 800af84:	2301      	movs	r3, #1
 800af86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	f383 8810 	msr	PRIMASK, r3
}
 800af8e:	46c0      	nop			@ (mov r8, r8)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4922      	ldr	r1, [pc, #136]	@ (800b024 <UART_CheckIdleState+0x150>)
 800af9c:	400a      	ands	r2, r1
 800af9e:	601a      	str	r2, [r3, #0]
 800afa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afa2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	f383 8810 	msr	PRIMASK, r3
}
 800afaa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afac:	f3ef 8310 	mrs	r3, PRIMASK
 800afb0:	61bb      	str	r3, [r7, #24]
  return(result);
 800afb2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afb4:	633b      	str	r3, [r7, #48]	@ 0x30
 800afb6:	2301      	movs	r3, #1
 800afb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	f383 8810 	msr	PRIMASK, r3
}
 800afc0:	46c0      	nop			@ (mov r8, r8)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	689a      	ldr	r2, [r3, #8]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2101      	movs	r1, #1
 800afce:	438a      	bics	r2, r1
 800afd0:	609a      	str	r2, [r3, #8]
 800afd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afd6:	6a3b      	ldr	r3, [r7, #32]
 800afd8:	f383 8810 	msr	PRIMASK, r3
}
 800afdc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	228c      	movs	r2, #140	@ 0x8c
 800afe2:	2120      	movs	r1, #32
 800afe4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2284      	movs	r2, #132	@ 0x84
 800afea:	2100      	movs	r1, #0
 800afec:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afee:	2303      	movs	r3, #3
 800aff0:	e012      	b.n	800b018 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2288      	movs	r2, #136	@ 0x88
 800aff6:	2120      	movs	r1, #32
 800aff8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	228c      	movs	r2, #140	@ 0x8c
 800affe:	2120      	movs	r1, #32
 800b000:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2200      	movs	r2, #0
 800b00c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2284      	movs	r2, #132	@ 0x84
 800b012:	2100      	movs	r1, #0
 800b014:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b016:	2300      	movs	r3, #0
}
 800b018:	0018      	movs	r0, r3
 800b01a:	46bd      	mov	sp, r7
 800b01c:	b010      	add	sp, #64	@ 0x40
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	01ffffff 	.word	0x01ffffff
 800b024:	fffffedf 	.word	0xfffffedf

0800b028 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	60b9      	str	r1, [r7, #8]
 800b032:	603b      	str	r3, [r7, #0]
 800b034:	1dfb      	adds	r3, r7, #7
 800b036:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b038:	e051      	b.n	800b0de <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	3301      	adds	r3, #1
 800b03e:	d04e      	beq.n	800b0de <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b040:	f7fb f8ac 	bl	800619c <HAL_GetTick>
 800b044:	0002      	movs	r2, r0
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	1ad3      	subs	r3, r2, r3
 800b04a:	69ba      	ldr	r2, [r7, #24]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d302      	bcc.n	800b056 <UART_WaitOnFlagUntilTimeout+0x2e>
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d101      	bne.n	800b05a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800b056:	2303      	movs	r3, #3
 800b058:	e051      	b.n	800b0fe <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2204      	movs	r2, #4
 800b062:	4013      	ands	r3, r2
 800b064:	d03b      	beq.n	800b0de <UART_WaitOnFlagUntilTimeout+0xb6>
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	2b80      	cmp	r3, #128	@ 0x80
 800b06a:	d038      	beq.n	800b0de <UART_WaitOnFlagUntilTimeout+0xb6>
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	2b40      	cmp	r3, #64	@ 0x40
 800b070:	d035      	beq.n	800b0de <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	69db      	ldr	r3, [r3, #28]
 800b078:	2208      	movs	r2, #8
 800b07a:	4013      	ands	r3, r2
 800b07c:	2b08      	cmp	r3, #8
 800b07e:	d111      	bne.n	800b0a4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	2208      	movs	r2, #8
 800b086:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	0018      	movs	r0, r3
 800b08c:	f000 f83c 	bl	800b108 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2290      	movs	r2, #144	@ 0x90
 800b094:	2108      	movs	r1, #8
 800b096:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2284      	movs	r2, #132	@ 0x84
 800b09c:	2100      	movs	r1, #0
 800b09e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	e02c      	b.n	800b0fe <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	69da      	ldr	r2, [r3, #28]
 800b0aa:	2380      	movs	r3, #128	@ 0x80
 800b0ac:	011b      	lsls	r3, r3, #4
 800b0ae:	401a      	ands	r2, r3
 800b0b0:	2380      	movs	r3, #128	@ 0x80
 800b0b2:	011b      	lsls	r3, r3, #4
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d112      	bne.n	800b0de <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2280      	movs	r2, #128	@ 0x80
 800b0be:	0112      	lsls	r2, r2, #4
 800b0c0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	0018      	movs	r0, r3
 800b0c6:	f000 f81f 	bl	800b108 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2290      	movs	r2, #144	@ 0x90
 800b0ce:	2120      	movs	r1, #32
 800b0d0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2284      	movs	r2, #132	@ 0x84
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800b0da:	2303      	movs	r3, #3
 800b0dc:	e00f      	b.n	800b0fe <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	69db      	ldr	r3, [r3, #28]
 800b0e4:	68ba      	ldr	r2, [r7, #8]
 800b0e6:	4013      	ands	r3, r2
 800b0e8:	68ba      	ldr	r2, [r7, #8]
 800b0ea:	1ad3      	subs	r3, r2, r3
 800b0ec:	425a      	negs	r2, r3
 800b0ee:	4153      	adcs	r3, r2
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	001a      	movs	r2, r3
 800b0f4:	1dfb      	adds	r3, r7, #7
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d09e      	beq.n	800b03a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b0fc:	2300      	movs	r3, #0
}
 800b0fe:	0018      	movs	r0, r3
 800b100:	46bd      	mov	sp, r7
 800b102:	b004      	add	sp, #16
 800b104:	bd80      	pop	{r7, pc}
	...

0800b108 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b08e      	sub	sp, #56	@ 0x38
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b110:	f3ef 8310 	mrs	r3, PRIMASK
 800b114:	617b      	str	r3, [r7, #20]
  return(result);
 800b116:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b118:	637b      	str	r3, [r7, #52]	@ 0x34
 800b11a:	2301      	movs	r3, #1
 800b11c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	f383 8810 	msr	PRIMASK, r3
}
 800b124:	46c0      	nop			@ (mov r8, r8)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4926      	ldr	r1, [pc, #152]	@ (800b1cc <UART_EndRxTransfer+0xc4>)
 800b132:	400a      	ands	r2, r1
 800b134:	601a      	str	r2, [r3, #0]
 800b136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b138:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	f383 8810 	msr	PRIMASK, r3
}
 800b140:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b142:	f3ef 8310 	mrs	r3, PRIMASK
 800b146:	623b      	str	r3, [r7, #32]
  return(result);
 800b148:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b14a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b14c:	2301      	movs	r3, #1
 800b14e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b152:	f383 8810 	msr	PRIMASK, r3
}
 800b156:	46c0      	nop			@ (mov r8, r8)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	689a      	ldr	r2, [r3, #8]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	491b      	ldr	r1, [pc, #108]	@ (800b1d0 <UART_EndRxTransfer+0xc8>)
 800b164:	400a      	ands	r2, r1
 800b166:	609a      	str	r2, [r3, #8]
 800b168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b16a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b16e:	f383 8810 	msr	PRIMASK, r3
}
 800b172:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d118      	bne.n	800b1ae <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b17c:	f3ef 8310 	mrs	r3, PRIMASK
 800b180:	60bb      	str	r3, [r7, #8]
  return(result);
 800b182:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b184:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b186:	2301      	movs	r3, #1
 800b188:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f383 8810 	msr	PRIMASK, r3
}
 800b190:	46c0      	nop			@ (mov r8, r8)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2110      	movs	r1, #16
 800b19e:	438a      	bics	r2, r1
 800b1a0:	601a      	str	r2, [r3, #0]
 800b1a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	f383 8810 	msr	PRIMASK, r3
}
 800b1ac:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	228c      	movs	r2, #140	@ 0x8c
 800b1b2:	2120      	movs	r1, #32
 800b1b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b1c2:	46c0      	nop			@ (mov r8, r8)
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	b00e      	add	sp, #56	@ 0x38
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	46c0      	nop			@ (mov r8, r8)
 800b1cc:	fffffedf 	.word	0xfffffedf
 800b1d0:	effffffe 	.word	0xeffffffe

0800b1d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2284      	movs	r2, #132	@ 0x84
 800b1e0:	5c9b      	ldrb	r3, [r3, r2]
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d101      	bne.n	800b1ea <HAL_UARTEx_DisableFifoMode+0x16>
 800b1e6:	2302      	movs	r3, #2
 800b1e8:	e027      	b.n	800b23a <HAL_UARTEx_DisableFifoMode+0x66>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2284      	movs	r2, #132	@ 0x84
 800b1ee:	2101      	movs	r1, #1
 800b1f0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2288      	movs	r2, #136	@ 0x88
 800b1f6:	2124      	movs	r1, #36	@ 0x24
 800b1f8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2101      	movs	r1, #1
 800b20e:	438a      	bics	r2, r1
 800b210:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	4a0b      	ldr	r2, [pc, #44]	@ (800b244 <HAL_UARTEx_DisableFifoMode+0x70>)
 800b216:	4013      	ands	r3, r2
 800b218:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2200      	movs	r2, #0
 800b21e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2288      	movs	r2, #136	@ 0x88
 800b22c:	2120      	movs	r1, #32
 800b22e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2284      	movs	r2, #132	@ 0x84
 800b234:	2100      	movs	r1, #0
 800b236:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b238:	2300      	movs	r3, #0
}
 800b23a:	0018      	movs	r0, r3
 800b23c:	46bd      	mov	sp, r7
 800b23e:	b004      	add	sp, #16
 800b240:	bd80      	pop	{r7, pc}
 800b242:	46c0      	nop			@ (mov r8, r8)
 800b244:	dfffffff 	.word	0xdfffffff

0800b248 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2284      	movs	r2, #132	@ 0x84
 800b256:	5c9b      	ldrb	r3, [r3, r2]
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d101      	bne.n	800b260 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b25c:	2302      	movs	r3, #2
 800b25e:	e02e      	b.n	800b2be <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2284      	movs	r2, #132	@ 0x84
 800b264:	2101      	movs	r1, #1
 800b266:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2288      	movs	r2, #136	@ 0x88
 800b26c:	2124      	movs	r1, #36	@ 0x24
 800b26e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	2101      	movs	r1, #1
 800b284:	438a      	bics	r2, r1
 800b286:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	00db      	lsls	r3, r3, #3
 800b290:	08d9      	lsrs	r1, r3, #3
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	683a      	ldr	r2, [r7, #0]
 800b298:	430a      	orrs	r2, r1
 800b29a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	0018      	movs	r0, r3
 800b2a0:	f000 f854 	bl	800b34c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	68fa      	ldr	r2, [r7, #12]
 800b2aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2288      	movs	r2, #136	@ 0x88
 800b2b0:	2120      	movs	r1, #32
 800b2b2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2284      	movs	r2, #132	@ 0x84
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b2bc:	2300      	movs	r3, #0
}
 800b2be:	0018      	movs	r0, r3
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	b004      	add	sp, #16
 800b2c4:	bd80      	pop	{r7, pc}
	...

0800b2c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2284      	movs	r2, #132	@ 0x84
 800b2d6:	5c9b      	ldrb	r3, [r3, r2]
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d101      	bne.n	800b2e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b2dc:	2302      	movs	r3, #2
 800b2de:	e02f      	b.n	800b340 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2284      	movs	r2, #132	@ 0x84
 800b2e4:	2101      	movs	r1, #1
 800b2e6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2288      	movs	r2, #136	@ 0x88
 800b2ec:	2124      	movs	r1, #36	@ 0x24
 800b2ee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	2101      	movs	r1, #1
 800b304:	438a      	bics	r2, r1
 800b306:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	4a0e      	ldr	r2, [pc, #56]	@ (800b348 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800b310:	4013      	ands	r3, r2
 800b312:	0019      	movs	r1, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	683a      	ldr	r2, [r7, #0]
 800b31a:	430a      	orrs	r2, r1
 800b31c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	0018      	movs	r0, r3
 800b322:	f000 f813 	bl	800b34c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	68fa      	ldr	r2, [r7, #12]
 800b32c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2288      	movs	r2, #136	@ 0x88
 800b332:	2120      	movs	r1, #32
 800b334:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2284      	movs	r2, #132	@ 0x84
 800b33a:	2100      	movs	r1, #0
 800b33c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b33e:	2300      	movs	r3, #0
}
 800b340:	0018      	movs	r0, r3
 800b342:	46bd      	mov	sp, r7
 800b344:	b004      	add	sp, #16
 800b346:	bd80      	pop	{r7, pc}
 800b348:	f1ffffff 	.word	0xf1ffffff

0800b34c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b34c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b34e:	b085      	sub	sp, #20
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d108      	bne.n	800b36e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	226a      	movs	r2, #106	@ 0x6a
 800b360:	2101      	movs	r1, #1
 800b362:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2268      	movs	r2, #104	@ 0x68
 800b368:	2101      	movs	r1, #1
 800b36a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b36c:	e043      	b.n	800b3f6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b36e:	260f      	movs	r6, #15
 800b370:	19bb      	adds	r3, r7, r6
 800b372:	2208      	movs	r2, #8
 800b374:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b376:	200e      	movs	r0, #14
 800b378:	183b      	adds	r3, r7, r0
 800b37a:	2208      	movs	r2, #8
 800b37c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	0e5b      	lsrs	r3, r3, #25
 800b386:	b2da      	uxtb	r2, r3
 800b388:	240d      	movs	r4, #13
 800b38a:	193b      	adds	r3, r7, r4
 800b38c:	2107      	movs	r1, #7
 800b38e:	400a      	ands	r2, r1
 800b390:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	0f5b      	lsrs	r3, r3, #29
 800b39a:	b2da      	uxtb	r2, r3
 800b39c:	250c      	movs	r5, #12
 800b39e:	197b      	adds	r3, r7, r5
 800b3a0:	2107      	movs	r1, #7
 800b3a2:	400a      	ands	r2, r1
 800b3a4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3a6:	183b      	adds	r3, r7, r0
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	197a      	adds	r2, r7, r5
 800b3ac:	7812      	ldrb	r2, [r2, #0]
 800b3ae:	4914      	ldr	r1, [pc, #80]	@ (800b400 <UARTEx_SetNbDataToProcess+0xb4>)
 800b3b0:	5c8a      	ldrb	r2, [r1, r2]
 800b3b2:	435a      	muls	r2, r3
 800b3b4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800b3b6:	197b      	adds	r3, r7, r5
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	4a12      	ldr	r2, [pc, #72]	@ (800b404 <UARTEx_SetNbDataToProcess+0xb8>)
 800b3bc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3be:	0019      	movs	r1, r3
 800b3c0:	f7f4 ff3e 	bl	8000240 <__divsi3>
 800b3c4:	0003      	movs	r3, r0
 800b3c6:	b299      	uxth	r1, r3
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	226a      	movs	r2, #106	@ 0x6a
 800b3cc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3ce:	19bb      	adds	r3, r7, r6
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	193a      	adds	r2, r7, r4
 800b3d4:	7812      	ldrb	r2, [r2, #0]
 800b3d6:	490a      	ldr	r1, [pc, #40]	@ (800b400 <UARTEx_SetNbDataToProcess+0xb4>)
 800b3d8:	5c8a      	ldrb	r2, [r1, r2]
 800b3da:	435a      	muls	r2, r3
 800b3dc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800b3de:	193b      	adds	r3, r7, r4
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	4a08      	ldr	r2, [pc, #32]	@ (800b404 <UARTEx_SetNbDataToProcess+0xb8>)
 800b3e4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b3e6:	0019      	movs	r1, r3
 800b3e8:	f7f4 ff2a 	bl	8000240 <__divsi3>
 800b3ec:	0003      	movs	r3, r0
 800b3ee:	b299      	uxth	r1, r3
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2268      	movs	r2, #104	@ 0x68
 800b3f4:	5299      	strh	r1, [r3, r2]
}
 800b3f6:	46c0      	nop			@ (mov r8, r8)
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	b005      	add	sp, #20
 800b3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3fe:	46c0      	nop			@ (mov r8, r8)
 800b400:	0800ca48 	.word	0x0800ca48
 800b404:	0800ca50 	.word	0x0800ca50

0800b408 <_strtol_l.constprop.0>:
 800b408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b40a:	b085      	sub	sp, #20
 800b40c:	0017      	movs	r7, r2
 800b40e:	001e      	movs	r6, r3
 800b410:	9003      	str	r0, [sp, #12]
 800b412:	9101      	str	r1, [sp, #4]
 800b414:	2b24      	cmp	r3, #36	@ 0x24
 800b416:	d844      	bhi.n	800b4a2 <_strtol_l.constprop.0+0x9a>
 800b418:	000c      	movs	r4, r1
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d041      	beq.n	800b4a2 <_strtol_l.constprop.0+0x9a>
 800b41e:	4b3d      	ldr	r3, [pc, #244]	@ (800b514 <_strtol_l.constprop.0+0x10c>)
 800b420:	2208      	movs	r2, #8
 800b422:	469c      	mov	ip, r3
 800b424:	0023      	movs	r3, r4
 800b426:	4661      	mov	r1, ip
 800b428:	781d      	ldrb	r5, [r3, #0]
 800b42a:	3401      	adds	r4, #1
 800b42c:	5d48      	ldrb	r0, [r1, r5]
 800b42e:	0001      	movs	r1, r0
 800b430:	4011      	ands	r1, r2
 800b432:	4210      	tst	r0, r2
 800b434:	d1f6      	bne.n	800b424 <_strtol_l.constprop.0+0x1c>
 800b436:	2d2d      	cmp	r5, #45	@ 0x2d
 800b438:	d13a      	bne.n	800b4b0 <_strtol_l.constprop.0+0xa8>
 800b43a:	7825      	ldrb	r5, [r4, #0]
 800b43c:	1c9c      	adds	r4, r3, #2
 800b43e:	2301      	movs	r3, #1
 800b440:	9300      	str	r3, [sp, #0]
 800b442:	2210      	movs	r2, #16
 800b444:	0033      	movs	r3, r6
 800b446:	4393      	bics	r3, r2
 800b448:	d109      	bne.n	800b45e <_strtol_l.constprop.0+0x56>
 800b44a:	2d30      	cmp	r5, #48	@ 0x30
 800b44c:	d136      	bne.n	800b4bc <_strtol_l.constprop.0+0xb4>
 800b44e:	2120      	movs	r1, #32
 800b450:	7823      	ldrb	r3, [r4, #0]
 800b452:	438b      	bics	r3, r1
 800b454:	2b58      	cmp	r3, #88	@ 0x58
 800b456:	d131      	bne.n	800b4bc <_strtol_l.constprop.0+0xb4>
 800b458:	0016      	movs	r6, r2
 800b45a:	7865      	ldrb	r5, [r4, #1]
 800b45c:	3402      	adds	r4, #2
 800b45e:	4a2e      	ldr	r2, [pc, #184]	@ (800b518 <_strtol_l.constprop.0+0x110>)
 800b460:	9b00      	ldr	r3, [sp, #0]
 800b462:	4694      	mov	ip, r2
 800b464:	4463      	add	r3, ip
 800b466:	0031      	movs	r1, r6
 800b468:	0018      	movs	r0, r3
 800b46a:	9302      	str	r3, [sp, #8]
 800b46c:	f7f4 fee4 	bl	8000238 <__aeabi_uidivmod>
 800b470:	2200      	movs	r2, #0
 800b472:	4684      	mov	ip, r0
 800b474:	0010      	movs	r0, r2
 800b476:	002b      	movs	r3, r5
 800b478:	3b30      	subs	r3, #48	@ 0x30
 800b47a:	2b09      	cmp	r3, #9
 800b47c:	d825      	bhi.n	800b4ca <_strtol_l.constprop.0+0xc2>
 800b47e:	001d      	movs	r5, r3
 800b480:	42ae      	cmp	r6, r5
 800b482:	dd31      	ble.n	800b4e8 <_strtol_l.constprop.0+0xe0>
 800b484:	1c53      	adds	r3, r2, #1
 800b486:	d009      	beq.n	800b49c <_strtol_l.constprop.0+0x94>
 800b488:	2201      	movs	r2, #1
 800b48a:	4252      	negs	r2, r2
 800b48c:	4584      	cmp	ip, r0
 800b48e:	d305      	bcc.n	800b49c <_strtol_l.constprop.0+0x94>
 800b490:	d101      	bne.n	800b496 <_strtol_l.constprop.0+0x8e>
 800b492:	42a9      	cmp	r1, r5
 800b494:	db25      	blt.n	800b4e2 <_strtol_l.constprop.0+0xda>
 800b496:	2201      	movs	r2, #1
 800b498:	4370      	muls	r0, r6
 800b49a:	1828      	adds	r0, r5, r0
 800b49c:	7825      	ldrb	r5, [r4, #0]
 800b49e:	3401      	adds	r4, #1
 800b4a0:	e7e9      	b.n	800b476 <_strtol_l.constprop.0+0x6e>
 800b4a2:	f000 f86f 	bl	800b584 <__errno>
 800b4a6:	2316      	movs	r3, #22
 800b4a8:	6003      	str	r3, [r0, #0]
 800b4aa:	2000      	movs	r0, #0
 800b4ac:	b005      	add	sp, #20
 800b4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4b0:	9100      	str	r1, [sp, #0]
 800b4b2:	2d2b      	cmp	r5, #43	@ 0x2b
 800b4b4:	d1c5      	bne.n	800b442 <_strtol_l.constprop.0+0x3a>
 800b4b6:	7825      	ldrb	r5, [r4, #0]
 800b4b8:	1c9c      	adds	r4, r3, #2
 800b4ba:	e7c2      	b.n	800b442 <_strtol_l.constprop.0+0x3a>
 800b4bc:	2e00      	cmp	r6, #0
 800b4be:	d1ce      	bne.n	800b45e <_strtol_l.constprop.0+0x56>
 800b4c0:	3608      	adds	r6, #8
 800b4c2:	2d30      	cmp	r5, #48	@ 0x30
 800b4c4:	d0cb      	beq.n	800b45e <_strtol_l.constprop.0+0x56>
 800b4c6:	3602      	adds	r6, #2
 800b4c8:	e7c9      	b.n	800b45e <_strtol_l.constprop.0+0x56>
 800b4ca:	002b      	movs	r3, r5
 800b4cc:	3b41      	subs	r3, #65	@ 0x41
 800b4ce:	2b19      	cmp	r3, #25
 800b4d0:	d801      	bhi.n	800b4d6 <_strtol_l.constprop.0+0xce>
 800b4d2:	3d37      	subs	r5, #55	@ 0x37
 800b4d4:	e7d4      	b.n	800b480 <_strtol_l.constprop.0+0x78>
 800b4d6:	002b      	movs	r3, r5
 800b4d8:	3b61      	subs	r3, #97	@ 0x61
 800b4da:	2b19      	cmp	r3, #25
 800b4dc:	d804      	bhi.n	800b4e8 <_strtol_l.constprop.0+0xe0>
 800b4de:	3d57      	subs	r5, #87	@ 0x57
 800b4e0:	e7ce      	b.n	800b480 <_strtol_l.constprop.0+0x78>
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	4252      	negs	r2, r2
 800b4e6:	e7d9      	b.n	800b49c <_strtol_l.constprop.0+0x94>
 800b4e8:	1c53      	adds	r3, r2, #1
 800b4ea:	d108      	bne.n	800b4fe <_strtol_l.constprop.0+0xf6>
 800b4ec:	2322      	movs	r3, #34	@ 0x22
 800b4ee:	9a03      	ldr	r2, [sp, #12]
 800b4f0:	9802      	ldr	r0, [sp, #8]
 800b4f2:	6013      	str	r3, [r2, #0]
 800b4f4:	2f00      	cmp	r7, #0
 800b4f6:	d0d9      	beq.n	800b4ac <_strtol_l.constprop.0+0xa4>
 800b4f8:	1e63      	subs	r3, r4, #1
 800b4fa:	9301      	str	r3, [sp, #4]
 800b4fc:	e007      	b.n	800b50e <_strtol_l.constprop.0+0x106>
 800b4fe:	9b00      	ldr	r3, [sp, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d000      	beq.n	800b506 <_strtol_l.constprop.0+0xfe>
 800b504:	4240      	negs	r0, r0
 800b506:	2f00      	cmp	r7, #0
 800b508:	d0d0      	beq.n	800b4ac <_strtol_l.constprop.0+0xa4>
 800b50a:	2a00      	cmp	r2, #0
 800b50c:	d1f4      	bne.n	800b4f8 <_strtol_l.constprop.0+0xf0>
 800b50e:	9b01      	ldr	r3, [sp, #4]
 800b510:	603b      	str	r3, [r7, #0]
 800b512:	e7cb      	b.n	800b4ac <_strtol_l.constprop.0+0xa4>
 800b514:	0800ca59 	.word	0x0800ca59
 800b518:	7fffffff 	.word	0x7fffffff

0800b51c <strtol>:
 800b51c:	b510      	push	{r4, lr}
 800b51e:	4c04      	ldr	r4, [pc, #16]	@ (800b530 <strtol+0x14>)
 800b520:	0013      	movs	r3, r2
 800b522:	000a      	movs	r2, r1
 800b524:	0001      	movs	r1, r0
 800b526:	6820      	ldr	r0, [r4, #0]
 800b528:	f7ff ff6e 	bl	800b408 <_strtol_l.constprop.0>
 800b52c:	bd10      	pop	{r4, pc}
 800b52e:	46c0      	nop			@ (mov r8, r8)
 800b530:	20000e90 	.word	0x20000e90

0800b534 <siprintf>:
 800b534:	b40e      	push	{r1, r2, r3}
 800b536:	b500      	push	{lr}
 800b538:	490b      	ldr	r1, [pc, #44]	@ (800b568 <siprintf+0x34>)
 800b53a:	b09c      	sub	sp, #112	@ 0x70
 800b53c:	ab1d      	add	r3, sp, #116	@ 0x74
 800b53e:	9002      	str	r0, [sp, #8]
 800b540:	9006      	str	r0, [sp, #24]
 800b542:	9107      	str	r1, [sp, #28]
 800b544:	9104      	str	r1, [sp, #16]
 800b546:	4809      	ldr	r0, [pc, #36]	@ (800b56c <siprintf+0x38>)
 800b548:	4909      	ldr	r1, [pc, #36]	@ (800b570 <siprintf+0x3c>)
 800b54a:	cb04      	ldmia	r3!, {r2}
 800b54c:	9105      	str	r1, [sp, #20]
 800b54e:	6800      	ldr	r0, [r0, #0]
 800b550:	a902      	add	r1, sp, #8
 800b552:	9301      	str	r3, [sp, #4]
 800b554:	f000 f9a8 	bl	800b8a8 <_svfiprintf_r>
 800b558:	2200      	movs	r2, #0
 800b55a:	9b02      	ldr	r3, [sp, #8]
 800b55c:	701a      	strb	r2, [r3, #0]
 800b55e:	b01c      	add	sp, #112	@ 0x70
 800b560:	bc08      	pop	{r3}
 800b562:	b003      	add	sp, #12
 800b564:	4718      	bx	r3
 800b566:	46c0      	nop			@ (mov r8, r8)
 800b568:	7fffffff 	.word	0x7fffffff
 800b56c:	20000e90 	.word	0x20000e90
 800b570:	ffff0208 	.word	0xffff0208

0800b574 <memset>:
 800b574:	0003      	movs	r3, r0
 800b576:	1882      	adds	r2, r0, r2
 800b578:	4293      	cmp	r3, r2
 800b57a:	d100      	bne.n	800b57e <memset+0xa>
 800b57c:	4770      	bx	lr
 800b57e:	7019      	strb	r1, [r3, #0]
 800b580:	3301      	adds	r3, #1
 800b582:	e7f9      	b.n	800b578 <memset+0x4>

0800b584 <__errno>:
 800b584:	4b01      	ldr	r3, [pc, #4]	@ (800b58c <__errno+0x8>)
 800b586:	6818      	ldr	r0, [r3, #0]
 800b588:	4770      	bx	lr
 800b58a:	46c0      	nop			@ (mov r8, r8)
 800b58c:	20000e90 	.word	0x20000e90

0800b590 <__libc_init_array>:
 800b590:	b570      	push	{r4, r5, r6, lr}
 800b592:	2600      	movs	r6, #0
 800b594:	4c0c      	ldr	r4, [pc, #48]	@ (800b5c8 <__libc_init_array+0x38>)
 800b596:	4d0d      	ldr	r5, [pc, #52]	@ (800b5cc <__libc_init_array+0x3c>)
 800b598:	1b64      	subs	r4, r4, r5
 800b59a:	10a4      	asrs	r4, r4, #2
 800b59c:	42a6      	cmp	r6, r4
 800b59e:	d109      	bne.n	800b5b4 <__libc_init_array+0x24>
 800b5a0:	2600      	movs	r6, #0
 800b5a2:	f000 fd73 	bl	800c08c <_init>
 800b5a6:	4c0a      	ldr	r4, [pc, #40]	@ (800b5d0 <__libc_init_array+0x40>)
 800b5a8:	4d0a      	ldr	r5, [pc, #40]	@ (800b5d4 <__libc_init_array+0x44>)
 800b5aa:	1b64      	subs	r4, r4, r5
 800b5ac:	10a4      	asrs	r4, r4, #2
 800b5ae:	42a6      	cmp	r6, r4
 800b5b0:	d105      	bne.n	800b5be <__libc_init_array+0x2e>
 800b5b2:	bd70      	pop	{r4, r5, r6, pc}
 800b5b4:	00b3      	lsls	r3, r6, #2
 800b5b6:	58eb      	ldr	r3, [r5, r3]
 800b5b8:	4798      	blx	r3
 800b5ba:	3601      	adds	r6, #1
 800b5bc:	e7ee      	b.n	800b59c <__libc_init_array+0xc>
 800b5be:	00b3      	lsls	r3, r6, #2
 800b5c0:	58eb      	ldr	r3, [r5, r3]
 800b5c2:	4798      	blx	r3
 800b5c4:	3601      	adds	r6, #1
 800b5c6:	e7f2      	b.n	800b5ae <__libc_init_array+0x1e>
 800b5c8:	0800cb94 	.word	0x0800cb94
 800b5cc:	0800cb94 	.word	0x0800cb94
 800b5d0:	0800cb98 	.word	0x0800cb98
 800b5d4:	0800cb94 	.word	0x0800cb94

0800b5d8 <__retarget_lock_acquire_recursive>:
 800b5d8:	4770      	bx	lr

0800b5da <__retarget_lock_release_recursive>:
 800b5da:	4770      	bx	lr

0800b5dc <memcpy>:
 800b5dc:	2300      	movs	r3, #0
 800b5de:	b510      	push	{r4, lr}
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d100      	bne.n	800b5e6 <memcpy+0xa>
 800b5e4:	bd10      	pop	{r4, pc}
 800b5e6:	5ccc      	ldrb	r4, [r1, r3]
 800b5e8:	54c4      	strb	r4, [r0, r3]
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	e7f8      	b.n	800b5e0 <memcpy+0x4>
	...

0800b5f0 <_free_r>:
 800b5f0:	b570      	push	{r4, r5, r6, lr}
 800b5f2:	0005      	movs	r5, r0
 800b5f4:	1e0c      	subs	r4, r1, #0
 800b5f6:	d010      	beq.n	800b61a <_free_r+0x2a>
 800b5f8:	3c04      	subs	r4, #4
 800b5fa:	6823      	ldr	r3, [r4, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	da00      	bge.n	800b602 <_free_r+0x12>
 800b600:	18e4      	adds	r4, r4, r3
 800b602:	0028      	movs	r0, r5
 800b604:	f000 f8e0 	bl	800b7c8 <__malloc_lock>
 800b608:	4a1d      	ldr	r2, [pc, #116]	@ (800b680 <_free_r+0x90>)
 800b60a:	6813      	ldr	r3, [r2, #0]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d105      	bne.n	800b61c <_free_r+0x2c>
 800b610:	6063      	str	r3, [r4, #4]
 800b612:	6014      	str	r4, [r2, #0]
 800b614:	0028      	movs	r0, r5
 800b616:	f000 f8df 	bl	800b7d8 <__malloc_unlock>
 800b61a:	bd70      	pop	{r4, r5, r6, pc}
 800b61c:	42a3      	cmp	r3, r4
 800b61e:	d908      	bls.n	800b632 <_free_r+0x42>
 800b620:	6820      	ldr	r0, [r4, #0]
 800b622:	1821      	adds	r1, r4, r0
 800b624:	428b      	cmp	r3, r1
 800b626:	d1f3      	bne.n	800b610 <_free_r+0x20>
 800b628:	6819      	ldr	r1, [r3, #0]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	1809      	adds	r1, r1, r0
 800b62e:	6021      	str	r1, [r4, #0]
 800b630:	e7ee      	b.n	800b610 <_free_r+0x20>
 800b632:	001a      	movs	r2, r3
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d001      	beq.n	800b63e <_free_r+0x4e>
 800b63a:	42a3      	cmp	r3, r4
 800b63c:	d9f9      	bls.n	800b632 <_free_r+0x42>
 800b63e:	6811      	ldr	r1, [r2, #0]
 800b640:	1850      	adds	r0, r2, r1
 800b642:	42a0      	cmp	r0, r4
 800b644:	d10b      	bne.n	800b65e <_free_r+0x6e>
 800b646:	6820      	ldr	r0, [r4, #0]
 800b648:	1809      	adds	r1, r1, r0
 800b64a:	1850      	adds	r0, r2, r1
 800b64c:	6011      	str	r1, [r2, #0]
 800b64e:	4283      	cmp	r3, r0
 800b650:	d1e0      	bne.n	800b614 <_free_r+0x24>
 800b652:	6818      	ldr	r0, [r3, #0]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	1841      	adds	r1, r0, r1
 800b658:	6011      	str	r1, [r2, #0]
 800b65a:	6053      	str	r3, [r2, #4]
 800b65c:	e7da      	b.n	800b614 <_free_r+0x24>
 800b65e:	42a0      	cmp	r0, r4
 800b660:	d902      	bls.n	800b668 <_free_r+0x78>
 800b662:	230c      	movs	r3, #12
 800b664:	602b      	str	r3, [r5, #0]
 800b666:	e7d5      	b.n	800b614 <_free_r+0x24>
 800b668:	6820      	ldr	r0, [r4, #0]
 800b66a:	1821      	adds	r1, r4, r0
 800b66c:	428b      	cmp	r3, r1
 800b66e:	d103      	bne.n	800b678 <_free_r+0x88>
 800b670:	6819      	ldr	r1, [r3, #0]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	1809      	adds	r1, r1, r0
 800b676:	6021      	str	r1, [r4, #0]
 800b678:	6063      	str	r3, [r4, #4]
 800b67a:	6054      	str	r4, [r2, #4]
 800b67c:	e7ca      	b.n	800b614 <_free_r+0x24>
 800b67e:	46c0      	nop			@ (mov r8, r8)
 800b680:	200015d0 	.word	0x200015d0

0800b684 <sbrk_aligned>:
 800b684:	b570      	push	{r4, r5, r6, lr}
 800b686:	4e0f      	ldr	r6, [pc, #60]	@ (800b6c4 <sbrk_aligned+0x40>)
 800b688:	000d      	movs	r5, r1
 800b68a:	6831      	ldr	r1, [r6, #0]
 800b68c:	0004      	movs	r4, r0
 800b68e:	2900      	cmp	r1, #0
 800b690:	d102      	bne.n	800b698 <sbrk_aligned+0x14>
 800b692:	f000 fb99 	bl	800bdc8 <_sbrk_r>
 800b696:	6030      	str	r0, [r6, #0]
 800b698:	0029      	movs	r1, r5
 800b69a:	0020      	movs	r0, r4
 800b69c:	f000 fb94 	bl	800bdc8 <_sbrk_r>
 800b6a0:	1c43      	adds	r3, r0, #1
 800b6a2:	d103      	bne.n	800b6ac <sbrk_aligned+0x28>
 800b6a4:	2501      	movs	r5, #1
 800b6a6:	426d      	negs	r5, r5
 800b6a8:	0028      	movs	r0, r5
 800b6aa:	bd70      	pop	{r4, r5, r6, pc}
 800b6ac:	2303      	movs	r3, #3
 800b6ae:	1cc5      	adds	r5, r0, #3
 800b6b0:	439d      	bics	r5, r3
 800b6b2:	42a8      	cmp	r0, r5
 800b6b4:	d0f8      	beq.n	800b6a8 <sbrk_aligned+0x24>
 800b6b6:	1a29      	subs	r1, r5, r0
 800b6b8:	0020      	movs	r0, r4
 800b6ba:	f000 fb85 	bl	800bdc8 <_sbrk_r>
 800b6be:	3001      	adds	r0, #1
 800b6c0:	d1f2      	bne.n	800b6a8 <sbrk_aligned+0x24>
 800b6c2:	e7ef      	b.n	800b6a4 <sbrk_aligned+0x20>
 800b6c4:	200015cc 	.word	0x200015cc

0800b6c8 <_malloc_r>:
 800b6c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6ca:	2203      	movs	r2, #3
 800b6cc:	1ccb      	adds	r3, r1, #3
 800b6ce:	4393      	bics	r3, r2
 800b6d0:	3308      	adds	r3, #8
 800b6d2:	0005      	movs	r5, r0
 800b6d4:	001f      	movs	r7, r3
 800b6d6:	2b0c      	cmp	r3, #12
 800b6d8:	d234      	bcs.n	800b744 <_malloc_r+0x7c>
 800b6da:	270c      	movs	r7, #12
 800b6dc:	42b9      	cmp	r1, r7
 800b6de:	d833      	bhi.n	800b748 <_malloc_r+0x80>
 800b6e0:	0028      	movs	r0, r5
 800b6e2:	f000 f871 	bl	800b7c8 <__malloc_lock>
 800b6e6:	4e37      	ldr	r6, [pc, #220]	@ (800b7c4 <_malloc_r+0xfc>)
 800b6e8:	6833      	ldr	r3, [r6, #0]
 800b6ea:	001c      	movs	r4, r3
 800b6ec:	2c00      	cmp	r4, #0
 800b6ee:	d12f      	bne.n	800b750 <_malloc_r+0x88>
 800b6f0:	0039      	movs	r1, r7
 800b6f2:	0028      	movs	r0, r5
 800b6f4:	f7ff ffc6 	bl	800b684 <sbrk_aligned>
 800b6f8:	0004      	movs	r4, r0
 800b6fa:	1c43      	adds	r3, r0, #1
 800b6fc:	d15f      	bne.n	800b7be <_malloc_r+0xf6>
 800b6fe:	6834      	ldr	r4, [r6, #0]
 800b700:	9400      	str	r4, [sp, #0]
 800b702:	9b00      	ldr	r3, [sp, #0]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d14a      	bne.n	800b79e <_malloc_r+0xd6>
 800b708:	2c00      	cmp	r4, #0
 800b70a:	d052      	beq.n	800b7b2 <_malloc_r+0xea>
 800b70c:	6823      	ldr	r3, [r4, #0]
 800b70e:	0028      	movs	r0, r5
 800b710:	18e3      	adds	r3, r4, r3
 800b712:	9900      	ldr	r1, [sp, #0]
 800b714:	9301      	str	r3, [sp, #4]
 800b716:	f000 fb57 	bl	800bdc8 <_sbrk_r>
 800b71a:	9b01      	ldr	r3, [sp, #4]
 800b71c:	4283      	cmp	r3, r0
 800b71e:	d148      	bne.n	800b7b2 <_malloc_r+0xea>
 800b720:	6823      	ldr	r3, [r4, #0]
 800b722:	0028      	movs	r0, r5
 800b724:	1aff      	subs	r7, r7, r3
 800b726:	0039      	movs	r1, r7
 800b728:	f7ff ffac 	bl	800b684 <sbrk_aligned>
 800b72c:	3001      	adds	r0, #1
 800b72e:	d040      	beq.n	800b7b2 <_malloc_r+0xea>
 800b730:	6823      	ldr	r3, [r4, #0]
 800b732:	19db      	adds	r3, r3, r7
 800b734:	6023      	str	r3, [r4, #0]
 800b736:	6833      	ldr	r3, [r6, #0]
 800b738:	685a      	ldr	r2, [r3, #4]
 800b73a:	2a00      	cmp	r2, #0
 800b73c:	d133      	bne.n	800b7a6 <_malloc_r+0xde>
 800b73e:	9b00      	ldr	r3, [sp, #0]
 800b740:	6033      	str	r3, [r6, #0]
 800b742:	e019      	b.n	800b778 <_malloc_r+0xb0>
 800b744:	2b00      	cmp	r3, #0
 800b746:	dac9      	bge.n	800b6dc <_malloc_r+0x14>
 800b748:	230c      	movs	r3, #12
 800b74a:	602b      	str	r3, [r5, #0]
 800b74c:	2000      	movs	r0, #0
 800b74e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b750:	6821      	ldr	r1, [r4, #0]
 800b752:	1bc9      	subs	r1, r1, r7
 800b754:	d420      	bmi.n	800b798 <_malloc_r+0xd0>
 800b756:	290b      	cmp	r1, #11
 800b758:	d90a      	bls.n	800b770 <_malloc_r+0xa8>
 800b75a:	19e2      	adds	r2, r4, r7
 800b75c:	6027      	str	r7, [r4, #0]
 800b75e:	42a3      	cmp	r3, r4
 800b760:	d104      	bne.n	800b76c <_malloc_r+0xa4>
 800b762:	6032      	str	r2, [r6, #0]
 800b764:	6863      	ldr	r3, [r4, #4]
 800b766:	6011      	str	r1, [r2, #0]
 800b768:	6053      	str	r3, [r2, #4]
 800b76a:	e005      	b.n	800b778 <_malloc_r+0xb0>
 800b76c:	605a      	str	r2, [r3, #4]
 800b76e:	e7f9      	b.n	800b764 <_malloc_r+0x9c>
 800b770:	6862      	ldr	r2, [r4, #4]
 800b772:	42a3      	cmp	r3, r4
 800b774:	d10e      	bne.n	800b794 <_malloc_r+0xcc>
 800b776:	6032      	str	r2, [r6, #0]
 800b778:	0028      	movs	r0, r5
 800b77a:	f000 f82d 	bl	800b7d8 <__malloc_unlock>
 800b77e:	0020      	movs	r0, r4
 800b780:	2207      	movs	r2, #7
 800b782:	300b      	adds	r0, #11
 800b784:	1d23      	adds	r3, r4, #4
 800b786:	4390      	bics	r0, r2
 800b788:	1ac2      	subs	r2, r0, r3
 800b78a:	4298      	cmp	r0, r3
 800b78c:	d0df      	beq.n	800b74e <_malloc_r+0x86>
 800b78e:	1a1b      	subs	r3, r3, r0
 800b790:	50a3      	str	r3, [r4, r2]
 800b792:	e7dc      	b.n	800b74e <_malloc_r+0x86>
 800b794:	605a      	str	r2, [r3, #4]
 800b796:	e7ef      	b.n	800b778 <_malloc_r+0xb0>
 800b798:	0023      	movs	r3, r4
 800b79a:	6864      	ldr	r4, [r4, #4]
 800b79c:	e7a6      	b.n	800b6ec <_malloc_r+0x24>
 800b79e:	9c00      	ldr	r4, [sp, #0]
 800b7a0:	6863      	ldr	r3, [r4, #4]
 800b7a2:	9300      	str	r3, [sp, #0]
 800b7a4:	e7ad      	b.n	800b702 <_malloc_r+0x3a>
 800b7a6:	001a      	movs	r2, r3
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	42a3      	cmp	r3, r4
 800b7ac:	d1fb      	bne.n	800b7a6 <_malloc_r+0xde>
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	e7da      	b.n	800b768 <_malloc_r+0xa0>
 800b7b2:	230c      	movs	r3, #12
 800b7b4:	0028      	movs	r0, r5
 800b7b6:	602b      	str	r3, [r5, #0]
 800b7b8:	f000 f80e 	bl	800b7d8 <__malloc_unlock>
 800b7bc:	e7c6      	b.n	800b74c <_malloc_r+0x84>
 800b7be:	6007      	str	r7, [r0, #0]
 800b7c0:	e7da      	b.n	800b778 <_malloc_r+0xb0>
 800b7c2:	46c0      	nop			@ (mov r8, r8)
 800b7c4:	200015d0 	.word	0x200015d0

0800b7c8 <__malloc_lock>:
 800b7c8:	b510      	push	{r4, lr}
 800b7ca:	4802      	ldr	r0, [pc, #8]	@ (800b7d4 <__malloc_lock+0xc>)
 800b7cc:	f7ff ff04 	bl	800b5d8 <__retarget_lock_acquire_recursive>
 800b7d0:	bd10      	pop	{r4, pc}
 800b7d2:	46c0      	nop			@ (mov r8, r8)
 800b7d4:	200015c8 	.word	0x200015c8

0800b7d8 <__malloc_unlock>:
 800b7d8:	b510      	push	{r4, lr}
 800b7da:	4802      	ldr	r0, [pc, #8]	@ (800b7e4 <__malloc_unlock+0xc>)
 800b7dc:	f7ff fefd 	bl	800b5da <__retarget_lock_release_recursive>
 800b7e0:	bd10      	pop	{r4, pc}
 800b7e2:	46c0      	nop			@ (mov r8, r8)
 800b7e4:	200015c8 	.word	0x200015c8

0800b7e8 <__ssputs_r>:
 800b7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7ea:	688e      	ldr	r6, [r1, #8]
 800b7ec:	b085      	sub	sp, #20
 800b7ee:	001f      	movs	r7, r3
 800b7f0:	000c      	movs	r4, r1
 800b7f2:	680b      	ldr	r3, [r1, #0]
 800b7f4:	9002      	str	r0, [sp, #8]
 800b7f6:	9203      	str	r2, [sp, #12]
 800b7f8:	42be      	cmp	r6, r7
 800b7fa:	d830      	bhi.n	800b85e <__ssputs_r+0x76>
 800b7fc:	210c      	movs	r1, #12
 800b7fe:	5e62      	ldrsh	r2, [r4, r1]
 800b800:	2190      	movs	r1, #144	@ 0x90
 800b802:	00c9      	lsls	r1, r1, #3
 800b804:	420a      	tst	r2, r1
 800b806:	d028      	beq.n	800b85a <__ssputs_r+0x72>
 800b808:	2003      	movs	r0, #3
 800b80a:	6921      	ldr	r1, [r4, #16]
 800b80c:	1a5b      	subs	r3, r3, r1
 800b80e:	9301      	str	r3, [sp, #4]
 800b810:	6963      	ldr	r3, [r4, #20]
 800b812:	4343      	muls	r3, r0
 800b814:	9801      	ldr	r0, [sp, #4]
 800b816:	0fdd      	lsrs	r5, r3, #31
 800b818:	18ed      	adds	r5, r5, r3
 800b81a:	1c7b      	adds	r3, r7, #1
 800b81c:	181b      	adds	r3, r3, r0
 800b81e:	106d      	asrs	r5, r5, #1
 800b820:	42ab      	cmp	r3, r5
 800b822:	d900      	bls.n	800b826 <__ssputs_r+0x3e>
 800b824:	001d      	movs	r5, r3
 800b826:	0552      	lsls	r2, r2, #21
 800b828:	d528      	bpl.n	800b87c <__ssputs_r+0x94>
 800b82a:	0029      	movs	r1, r5
 800b82c:	9802      	ldr	r0, [sp, #8]
 800b82e:	f7ff ff4b 	bl	800b6c8 <_malloc_r>
 800b832:	1e06      	subs	r6, r0, #0
 800b834:	d02c      	beq.n	800b890 <__ssputs_r+0xa8>
 800b836:	9a01      	ldr	r2, [sp, #4]
 800b838:	6921      	ldr	r1, [r4, #16]
 800b83a:	f7ff fecf 	bl	800b5dc <memcpy>
 800b83e:	89a2      	ldrh	r2, [r4, #12]
 800b840:	4b18      	ldr	r3, [pc, #96]	@ (800b8a4 <__ssputs_r+0xbc>)
 800b842:	401a      	ands	r2, r3
 800b844:	2380      	movs	r3, #128	@ 0x80
 800b846:	4313      	orrs	r3, r2
 800b848:	81a3      	strh	r3, [r4, #12]
 800b84a:	9b01      	ldr	r3, [sp, #4]
 800b84c:	6126      	str	r6, [r4, #16]
 800b84e:	18f6      	adds	r6, r6, r3
 800b850:	6026      	str	r6, [r4, #0]
 800b852:	003e      	movs	r6, r7
 800b854:	6165      	str	r5, [r4, #20]
 800b856:	1aed      	subs	r5, r5, r3
 800b858:	60a5      	str	r5, [r4, #8]
 800b85a:	42be      	cmp	r6, r7
 800b85c:	d900      	bls.n	800b860 <__ssputs_r+0x78>
 800b85e:	003e      	movs	r6, r7
 800b860:	0032      	movs	r2, r6
 800b862:	9903      	ldr	r1, [sp, #12]
 800b864:	6820      	ldr	r0, [r4, #0]
 800b866:	f000 fa9b 	bl	800bda0 <memmove>
 800b86a:	2000      	movs	r0, #0
 800b86c:	68a3      	ldr	r3, [r4, #8]
 800b86e:	1b9b      	subs	r3, r3, r6
 800b870:	60a3      	str	r3, [r4, #8]
 800b872:	6823      	ldr	r3, [r4, #0]
 800b874:	199b      	adds	r3, r3, r6
 800b876:	6023      	str	r3, [r4, #0]
 800b878:	b005      	add	sp, #20
 800b87a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b87c:	002a      	movs	r2, r5
 800b87e:	9802      	ldr	r0, [sp, #8]
 800b880:	f000 fabf 	bl	800be02 <_realloc_r>
 800b884:	1e06      	subs	r6, r0, #0
 800b886:	d1e0      	bne.n	800b84a <__ssputs_r+0x62>
 800b888:	6921      	ldr	r1, [r4, #16]
 800b88a:	9802      	ldr	r0, [sp, #8]
 800b88c:	f7ff feb0 	bl	800b5f0 <_free_r>
 800b890:	230c      	movs	r3, #12
 800b892:	2001      	movs	r0, #1
 800b894:	9a02      	ldr	r2, [sp, #8]
 800b896:	4240      	negs	r0, r0
 800b898:	6013      	str	r3, [r2, #0]
 800b89a:	89a2      	ldrh	r2, [r4, #12]
 800b89c:	3334      	adds	r3, #52	@ 0x34
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	81a3      	strh	r3, [r4, #12]
 800b8a2:	e7e9      	b.n	800b878 <__ssputs_r+0x90>
 800b8a4:	fffffb7f 	.word	0xfffffb7f

0800b8a8 <_svfiprintf_r>:
 800b8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8aa:	b0a1      	sub	sp, #132	@ 0x84
 800b8ac:	9003      	str	r0, [sp, #12]
 800b8ae:	001d      	movs	r5, r3
 800b8b0:	898b      	ldrh	r3, [r1, #12]
 800b8b2:	000f      	movs	r7, r1
 800b8b4:	0016      	movs	r6, r2
 800b8b6:	061b      	lsls	r3, r3, #24
 800b8b8:	d511      	bpl.n	800b8de <_svfiprintf_r+0x36>
 800b8ba:	690b      	ldr	r3, [r1, #16]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d10e      	bne.n	800b8de <_svfiprintf_r+0x36>
 800b8c0:	2140      	movs	r1, #64	@ 0x40
 800b8c2:	f7ff ff01 	bl	800b6c8 <_malloc_r>
 800b8c6:	6038      	str	r0, [r7, #0]
 800b8c8:	6138      	str	r0, [r7, #16]
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	d105      	bne.n	800b8da <_svfiprintf_r+0x32>
 800b8ce:	230c      	movs	r3, #12
 800b8d0:	9a03      	ldr	r2, [sp, #12]
 800b8d2:	6013      	str	r3, [r2, #0]
 800b8d4:	2001      	movs	r0, #1
 800b8d6:	4240      	negs	r0, r0
 800b8d8:	e0cf      	b.n	800ba7a <_svfiprintf_r+0x1d2>
 800b8da:	2340      	movs	r3, #64	@ 0x40
 800b8dc:	617b      	str	r3, [r7, #20]
 800b8de:	2300      	movs	r3, #0
 800b8e0:	ac08      	add	r4, sp, #32
 800b8e2:	6163      	str	r3, [r4, #20]
 800b8e4:	3320      	adds	r3, #32
 800b8e6:	7663      	strb	r3, [r4, #25]
 800b8e8:	3310      	adds	r3, #16
 800b8ea:	76a3      	strb	r3, [r4, #26]
 800b8ec:	9507      	str	r5, [sp, #28]
 800b8ee:	0035      	movs	r5, r6
 800b8f0:	782b      	ldrb	r3, [r5, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d001      	beq.n	800b8fa <_svfiprintf_r+0x52>
 800b8f6:	2b25      	cmp	r3, #37	@ 0x25
 800b8f8:	d148      	bne.n	800b98c <_svfiprintf_r+0xe4>
 800b8fa:	1bab      	subs	r3, r5, r6
 800b8fc:	9305      	str	r3, [sp, #20]
 800b8fe:	42b5      	cmp	r5, r6
 800b900:	d00b      	beq.n	800b91a <_svfiprintf_r+0x72>
 800b902:	0032      	movs	r2, r6
 800b904:	0039      	movs	r1, r7
 800b906:	9803      	ldr	r0, [sp, #12]
 800b908:	f7ff ff6e 	bl	800b7e8 <__ssputs_r>
 800b90c:	3001      	adds	r0, #1
 800b90e:	d100      	bne.n	800b912 <_svfiprintf_r+0x6a>
 800b910:	e0ae      	b.n	800ba70 <_svfiprintf_r+0x1c8>
 800b912:	6963      	ldr	r3, [r4, #20]
 800b914:	9a05      	ldr	r2, [sp, #20]
 800b916:	189b      	adds	r3, r3, r2
 800b918:	6163      	str	r3, [r4, #20]
 800b91a:	782b      	ldrb	r3, [r5, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d100      	bne.n	800b922 <_svfiprintf_r+0x7a>
 800b920:	e0a6      	b.n	800ba70 <_svfiprintf_r+0x1c8>
 800b922:	2201      	movs	r2, #1
 800b924:	2300      	movs	r3, #0
 800b926:	4252      	negs	r2, r2
 800b928:	6062      	str	r2, [r4, #4]
 800b92a:	a904      	add	r1, sp, #16
 800b92c:	3254      	adds	r2, #84	@ 0x54
 800b92e:	1852      	adds	r2, r2, r1
 800b930:	1c6e      	adds	r6, r5, #1
 800b932:	6023      	str	r3, [r4, #0]
 800b934:	60e3      	str	r3, [r4, #12]
 800b936:	60a3      	str	r3, [r4, #8]
 800b938:	7013      	strb	r3, [r2, #0]
 800b93a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800b93c:	4b54      	ldr	r3, [pc, #336]	@ (800ba90 <_svfiprintf_r+0x1e8>)
 800b93e:	2205      	movs	r2, #5
 800b940:	0018      	movs	r0, r3
 800b942:	7831      	ldrb	r1, [r6, #0]
 800b944:	9305      	str	r3, [sp, #20]
 800b946:	f000 fa51 	bl	800bdec <memchr>
 800b94a:	1c75      	adds	r5, r6, #1
 800b94c:	2800      	cmp	r0, #0
 800b94e:	d11f      	bne.n	800b990 <_svfiprintf_r+0xe8>
 800b950:	6822      	ldr	r2, [r4, #0]
 800b952:	06d3      	lsls	r3, r2, #27
 800b954:	d504      	bpl.n	800b960 <_svfiprintf_r+0xb8>
 800b956:	2353      	movs	r3, #83	@ 0x53
 800b958:	a904      	add	r1, sp, #16
 800b95a:	185b      	adds	r3, r3, r1
 800b95c:	2120      	movs	r1, #32
 800b95e:	7019      	strb	r1, [r3, #0]
 800b960:	0713      	lsls	r3, r2, #28
 800b962:	d504      	bpl.n	800b96e <_svfiprintf_r+0xc6>
 800b964:	2353      	movs	r3, #83	@ 0x53
 800b966:	a904      	add	r1, sp, #16
 800b968:	185b      	adds	r3, r3, r1
 800b96a:	212b      	movs	r1, #43	@ 0x2b
 800b96c:	7019      	strb	r1, [r3, #0]
 800b96e:	7833      	ldrb	r3, [r6, #0]
 800b970:	2b2a      	cmp	r3, #42	@ 0x2a
 800b972:	d016      	beq.n	800b9a2 <_svfiprintf_r+0xfa>
 800b974:	0035      	movs	r5, r6
 800b976:	2100      	movs	r1, #0
 800b978:	200a      	movs	r0, #10
 800b97a:	68e3      	ldr	r3, [r4, #12]
 800b97c:	782a      	ldrb	r2, [r5, #0]
 800b97e:	1c6e      	adds	r6, r5, #1
 800b980:	3a30      	subs	r2, #48	@ 0x30
 800b982:	2a09      	cmp	r2, #9
 800b984:	d950      	bls.n	800ba28 <_svfiprintf_r+0x180>
 800b986:	2900      	cmp	r1, #0
 800b988:	d111      	bne.n	800b9ae <_svfiprintf_r+0x106>
 800b98a:	e017      	b.n	800b9bc <_svfiprintf_r+0x114>
 800b98c:	3501      	adds	r5, #1
 800b98e:	e7af      	b.n	800b8f0 <_svfiprintf_r+0x48>
 800b990:	9b05      	ldr	r3, [sp, #20]
 800b992:	6822      	ldr	r2, [r4, #0]
 800b994:	1ac0      	subs	r0, r0, r3
 800b996:	2301      	movs	r3, #1
 800b998:	4083      	lsls	r3, r0
 800b99a:	4313      	orrs	r3, r2
 800b99c:	002e      	movs	r6, r5
 800b99e:	6023      	str	r3, [r4, #0]
 800b9a0:	e7cc      	b.n	800b93c <_svfiprintf_r+0x94>
 800b9a2:	9b07      	ldr	r3, [sp, #28]
 800b9a4:	1d19      	adds	r1, r3, #4
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	9107      	str	r1, [sp, #28]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	db01      	blt.n	800b9b2 <_svfiprintf_r+0x10a>
 800b9ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9b0:	e004      	b.n	800b9bc <_svfiprintf_r+0x114>
 800b9b2:	425b      	negs	r3, r3
 800b9b4:	60e3      	str	r3, [r4, #12]
 800b9b6:	2302      	movs	r3, #2
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	6023      	str	r3, [r4, #0]
 800b9bc:	782b      	ldrb	r3, [r5, #0]
 800b9be:	2b2e      	cmp	r3, #46	@ 0x2e
 800b9c0:	d10c      	bne.n	800b9dc <_svfiprintf_r+0x134>
 800b9c2:	786b      	ldrb	r3, [r5, #1]
 800b9c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9c6:	d134      	bne.n	800ba32 <_svfiprintf_r+0x18a>
 800b9c8:	9b07      	ldr	r3, [sp, #28]
 800b9ca:	3502      	adds	r5, #2
 800b9cc:	1d1a      	adds	r2, r3, #4
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	9207      	str	r2, [sp, #28]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	da01      	bge.n	800b9da <_svfiprintf_r+0x132>
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	425b      	negs	r3, r3
 800b9da:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9dc:	4e2d      	ldr	r6, [pc, #180]	@ (800ba94 <_svfiprintf_r+0x1ec>)
 800b9de:	2203      	movs	r2, #3
 800b9e0:	0030      	movs	r0, r6
 800b9e2:	7829      	ldrb	r1, [r5, #0]
 800b9e4:	f000 fa02 	bl	800bdec <memchr>
 800b9e8:	2800      	cmp	r0, #0
 800b9ea:	d006      	beq.n	800b9fa <_svfiprintf_r+0x152>
 800b9ec:	2340      	movs	r3, #64	@ 0x40
 800b9ee:	1b80      	subs	r0, r0, r6
 800b9f0:	4083      	lsls	r3, r0
 800b9f2:	6822      	ldr	r2, [r4, #0]
 800b9f4:	3501      	adds	r5, #1
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	6023      	str	r3, [r4, #0]
 800b9fa:	7829      	ldrb	r1, [r5, #0]
 800b9fc:	2206      	movs	r2, #6
 800b9fe:	4826      	ldr	r0, [pc, #152]	@ (800ba98 <_svfiprintf_r+0x1f0>)
 800ba00:	1c6e      	adds	r6, r5, #1
 800ba02:	7621      	strb	r1, [r4, #24]
 800ba04:	f000 f9f2 	bl	800bdec <memchr>
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	d038      	beq.n	800ba7e <_svfiprintf_r+0x1d6>
 800ba0c:	4b23      	ldr	r3, [pc, #140]	@ (800ba9c <_svfiprintf_r+0x1f4>)
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d122      	bne.n	800ba58 <_svfiprintf_r+0x1b0>
 800ba12:	2207      	movs	r2, #7
 800ba14:	9b07      	ldr	r3, [sp, #28]
 800ba16:	3307      	adds	r3, #7
 800ba18:	4393      	bics	r3, r2
 800ba1a:	3308      	adds	r3, #8
 800ba1c:	9307      	str	r3, [sp, #28]
 800ba1e:	6963      	ldr	r3, [r4, #20]
 800ba20:	9a04      	ldr	r2, [sp, #16]
 800ba22:	189b      	adds	r3, r3, r2
 800ba24:	6163      	str	r3, [r4, #20]
 800ba26:	e762      	b.n	800b8ee <_svfiprintf_r+0x46>
 800ba28:	4343      	muls	r3, r0
 800ba2a:	0035      	movs	r5, r6
 800ba2c:	2101      	movs	r1, #1
 800ba2e:	189b      	adds	r3, r3, r2
 800ba30:	e7a4      	b.n	800b97c <_svfiprintf_r+0xd4>
 800ba32:	2300      	movs	r3, #0
 800ba34:	200a      	movs	r0, #10
 800ba36:	0019      	movs	r1, r3
 800ba38:	3501      	adds	r5, #1
 800ba3a:	6063      	str	r3, [r4, #4]
 800ba3c:	782a      	ldrb	r2, [r5, #0]
 800ba3e:	1c6e      	adds	r6, r5, #1
 800ba40:	3a30      	subs	r2, #48	@ 0x30
 800ba42:	2a09      	cmp	r2, #9
 800ba44:	d903      	bls.n	800ba4e <_svfiprintf_r+0x1a6>
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d0c8      	beq.n	800b9dc <_svfiprintf_r+0x134>
 800ba4a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ba4c:	e7c6      	b.n	800b9dc <_svfiprintf_r+0x134>
 800ba4e:	4341      	muls	r1, r0
 800ba50:	0035      	movs	r5, r6
 800ba52:	2301      	movs	r3, #1
 800ba54:	1889      	adds	r1, r1, r2
 800ba56:	e7f1      	b.n	800ba3c <_svfiprintf_r+0x194>
 800ba58:	aa07      	add	r2, sp, #28
 800ba5a:	9200      	str	r2, [sp, #0]
 800ba5c:	0021      	movs	r1, r4
 800ba5e:	003a      	movs	r2, r7
 800ba60:	4b0f      	ldr	r3, [pc, #60]	@ (800baa0 <_svfiprintf_r+0x1f8>)
 800ba62:	9803      	ldr	r0, [sp, #12]
 800ba64:	e000      	b.n	800ba68 <_svfiprintf_r+0x1c0>
 800ba66:	bf00      	nop
 800ba68:	9004      	str	r0, [sp, #16]
 800ba6a:	9b04      	ldr	r3, [sp, #16]
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	d1d6      	bne.n	800ba1e <_svfiprintf_r+0x176>
 800ba70:	89bb      	ldrh	r3, [r7, #12]
 800ba72:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800ba74:	065b      	lsls	r3, r3, #25
 800ba76:	d500      	bpl.n	800ba7a <_svfiprintf_r+0x1d2>
 800ba78:	e72c      	b.n	800b8d4 <_svfiprintf_r+0x2c>
 800ba7a:	b021      	add	sp, #132	@ 0x84
 800ba7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba7e:	aa07      	add	r2, sp, #28
 800ba80:	9200      	str	r2, [sp, #0]
 800ba82:	0021      	movs	r1, r4
 800ba84:	003a      	movs	r2, r7
 800ba86:	4b06      	ldr	r3, [pc, #24]	@ (800baa0 <_svfiprintf_r+0x1f8>)
 800ba88:	9803      	ldr	r0, [sp, #12]
 800ba8a:	f000 f87b 	bl	800bb84 <_printf_i>
 800ba8e:	e7eb      	b.n	800ba68 <_svfiprintf_r+0x1c0>
 800ba90:	0800cb59 	.word	0x0800cb59
 800ba94:	0800cb5f 	.word	0x0800cb5f
 800ba98:	0800cb63 	.word	0x0800cb63
 800ba9c:	00000000 	.word	0x00000000
 800baa0:	0800b7e9 	.word	0x0800b7e9

0800baa4 <_printf_common>:
 800baa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800baa6:	0016      	movs	r6, r2
 800baa8:	9301      	str	r3, [sp, #4]
 800baaa:	688a      	ldr	r2, [r1, #8]
 800baac:	690b      	ldr	r3, [r1, #16]
 800baae:	000c      	movs	r4, r1
 800bab0:	9000      	str	r0, [sp, #0]
 800bab2:	4293      	cmp	r3, r2
 800bab4:	da00      	bge.n	800bab8 <_printf_common+0x14>
 800bab6:	0013      	movs	r3, r2
 800bab8:	0022      	movs	r2, r4
 800baba:	6033      	str	r3, [r6, #0]
 800babc:	3243      	adds	r2, #67	@ 0x43
 800babe:	7812      	ldrb	r2, [r2, #0]
 800bac0:	2a00      	cmp	r2, #0
 800bac2:	d001      	beq.n	800bac8 <_printf_common+0x24>
 800bac4:	3301      	adds	r3, #1
 800bac6:	6033      	str	r3, [r6, #0]
 800bac8:	6823      	ldr	r3, [r4, #0]
 800baca:	069b      	lsls	r3, r3, #26
 800bacc:	d502      	bpl.n	800bad4 <_printf_common+0x30>
 800bace:	6833      	ldr	r3, [r6, #0]
 800bad0:	3302      	adds	r3, #2
 800bad2:	6033      	str	r3, [r6, #0]
 800bad4:	6822      	ldr	r2, [r4, #0]
 800bad6:	2306      	movs	r3, #6
 800bad8:	0015      	movs	r5, r2
 800bada:	401d      	ands	r5, r3
 800badc:	421a      	tst	r2, r3
 800bade:	d027      	beq.n	800bb30 <_printf_common+0x8c>
 800bae0:	0023      	movs	r3, r4
 800bae2:	3343      	adds	r3, #67	@ 0x43
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	1e5a      	subs	r2, r3, #1
 800bae8:	4193      	sbcs	r3, r2
 800baea:	6822      	ldr	r2, [r4, #0]
 800baec:	0692      	lsls	r2, r2, #26
 800baee:	d430      	bmi.n	800bb52 <_printf_common+0xae>
 800baf0:	0022      	movs	r2, r4
 800baf2:	9901      	ldr	r1, [sp, #4]
 800baf4:	9800      	ldr	r0, [sp, #0]
 800baf6:	9d08      	ldr	r5, [sp, #32]
 800baf8:	3243      	adds	r2, #67	@ 0x43
 800bafa:	47a8      	blx	r5
 800bafc:	3001      	adds	r0, #1
 800bafe:	d025      	beq.n	800bb4c <_printf_common+0xa8>
 800bb00:	2206      	movs	r2, #6
 800bb02:	6823      	ldr	r3, [r4, #0]
 800bb04:	2500      	movs	r5, #0
 800bb06:	4013      	ands	r3, r2
 800bb08:	2b04      	cmp	r3, #4
 800bb0a:	d105      	bne.n	800bb18 <_printf_common+0x74>
 800bb0c:	6833      	ldr	r3, [r6, #0]
 800bb0e:	68e5      	ldr	r5, [r4, #12]
 800bb10:	1aed      	subs	r5, r5, r3
 800bb12:	43eb      	mvns	r3, r5
 800bb14:	17db      	asrs	r3, r3, #31
 800bb16:	401d      	ands	r5, r3
 800bb18:	68a3      	ldr	r3, [r4, #8]
 800bb1a:	6922      	ldr	r2, [r4, #16]
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	dd01      	ble.n	800bb24 <_printf_common+0x80>
 800bb20:	1a9b      	subs	r3, r3, r2
 800bb22:	18ed      	adds	r5, r5, r3
 800bb24:	2600      	movs	r6, #0
 800bb26:	42b5      	cmp	r5, r6
 800bb28:	d120      	bne.n	800bb6c <_printf_common+0xc8>
 800bb2a:	2000      	movs	r0, #0
 800bb2c:	e010      	b.n	800bb50 <_printf_common+0xac>
 800bb2e:	3501      	adds	r5, #1
 800bb30:	68e3      	ldr	r3, [r4, #12]
 800bb32:	6832      	ldr	r2, [r6, #0]
 800bb34:	1a9b      	subs	r3, r3, r2
 800bb36:	42ab      	cmp	r3, r5
 800bb38:	ddd2      	ble.n	800bae0 <_printf_common+0x3c>
 800bb3a:	0022      	movs	r2, r4
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	9901      	ldr	r1, [sp, #4]
 800bb40:	9800      	ldr	r0, [sp, #0]
 800bb42:	9f08      	ldr	r7, [sp, #32]
 800bb44:	3219      	adds	r2, #25
 800bb46:	47b8      	blx	r7
 800bb48:	3001      	adds	r0, #1
 800bb4a:	d1f0      	bne.n	800bb2e <_printf_common+0x8a>
 800bb4c:	2001      	movs	r0, #1
 800bb4e:	4240      	negs	r0, r0
 800bb50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bb52:	2030      	movs	r0, #48	@ 0x30
 800bb54:	18e1      	adds	r1, r4, r3
 800bb56:	3143      	adds	r1, #67	@ 0x43
 800bb58:	7008      	strb	r0, [r1, #0]
 800bb5a:	0021      	movs	r1, r4
 800bb5c:	1c5a      	adds	r2, r3, #1
 800bb5e:	3145      	adds	r1, #69	@ 0x45
 800bb60:	7809      	ldrb	r1, [r1, #0]
 800bb62:	18a2      	adds	r2, r4, r2
 800bb64:	3243      	adds	r2, #67	@ 0x43
 800bb66:	3302      	adds	r3, #2
 800bb68:	7011      	strb	r1, [r2, #0]
 800bb6a:	e7c1      	b.n	800baf0 <_printf_common+0x4c>
 800bb6c:	0022      	movs	r2, r4
 800bb6e:	2301      	movs	r3, #1
 800bb70:	9901      	ldr	r1, [sp, #4]
 800bb72:	9800      	ldr	r0, [sp, #0]
 800bb74:	9f08      	ldr	r7, [sp, #32]
 800bb76:	321a      	adds	r2, #26
 800bb78:	47b8      	blx	r7
 800bb7a:	3001      	adds	r0, #1
 800bb7c:	d0e6      	beq.n	800bb4c <_printf_common+0xa8>
 800bb7e:	3601      	adds	r6, #1
 800bb80:	e7d1      	b.n	800bb26 <_printf_common+0x82>
	...

0800bb84 <_printf_i>:
 800bb84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb86:	b08b      	sub	sp, #44	@ 0x2c
 800bb88:	9206      	str	r2, [sp, #24]
 800bb8a:	000a      	movs	r2, r1
 800bb8c:	3243      	adds	r2, #67	@ 0x43
 800bb8e:	9307      	str	r3, [sp, #28]
 800bb90:	9005      	str	r0, [sp, #20]
 800bb92:	9203      	str	r2, [sp, #12]
 800bb94:	7e0a      	ldrb	r2, [r1, #24]
 800bb96:	000c      	movs	r4, r1
 800bb98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bb9a:	2a78      	cmp	r2, #120	@ 0x78
 800bb9c:	d809      	bhi.n	800bbb2 <_printf_i+0x2e>
 800bb9e:	2a62      	cmp	r2, #98	@ 0x62
 800bba0:	d80b      	bhi.n	800bbba <_printf_i+0x36>
 800bba2:	2a00      	cmp	r2, #0
 800bba4:	d100      	bne.n	800bba8 <_printf_i+0x24>
 800bba6:	e0bc      	b.n	800bd22 <_printf_i+0x19e>
 800bba8:	497b      	ldr	r1, [pc, #492]	@ (800bd98 <_printf_i+0x214>)
 800bbaa:	9104      	str	r1, [sp, #16]
 800bbac:	2a58      	cmp	r2, #88	@ 0x58
 800bbae:	d100      	bne.n	800bbb2 <_printf_i+0x2e>
 800bbb0:	e090      	b.n	800bcd4 <_printf_i+0x150>
 800bbb2:	0025      	movs	r5, r4
 800bbb4:	3542      	adds	r5, #66	@ 0x42
 800bbb6:	702a      	strb	r2, [r5, #0]
 800bbb8:	e022      	b.n	800bc00 <_printf_i+0x7c>
 800bbba:	0010      	movs	r0, r2
 800bbbc:	3863      	subs	r0, #99	@ 0x63
 800bbbe:	2815      	cmp	r0, #21
 800bbc0:	d8f7      	bhi.n	800bbb2 <_printf_i+0x2e>
 800bbc2:	f7f4 faa9 	bl	8000118 <__gnu_thumb1_case_shi>
 800bbc6:	0016      	.short	0x0016
 800bbc8:	fff6001f 	.word	0xfff6001f
 800bbcc:	fff6fff6 	.word	0xfff6fff6
 800bbd0:	001ffff6 	.word	0x001ffff6
 800bbd4:	fff6fff6 	.word	0xfff6fff6
 800bbd8:	fff6fff6 	.word	0xfff6fff6
 800bbdc:	003600a1 	.word	0x003600a1
 800bbe0:	fff60080 	.word	0xfff60080
 800bbe4:	00b2fff6 	.word	0x00b2fff6
 800bbe8:	0036fff6 	.word	0x0036fff6
 800bbec:	fff6fff6 	.word	0xfff6fff6
 800bbf0:	0084      	.short	0x0084
 800bbf2:	0025      	movs	r5, r4
 800bbf4:	681a      	ldr	r2, [r3, #0]
 800bbf6:	3542      	adds	r5, #66	@ 0x42
 800bbf8:	1d11      	adds	r1, r2, #4
 800bbfa:	6019      	str	r1, [r3, #0]
 800bbfc:	6813      	ldr	r3, [r2, #0]
 800bbfe:	702b      	strb	r3, [r5, #0]
 800bc00:	2301      	movs	r3, #1
 800bc02:	e0a0      	b.n	800bd46 <_printf_i+0x1c2>
 800bc04:	6818      	ldr	r0, [r3, #0]
 800bc06:	6809      	ldr	r1, [r1, #0]
 800bc08:	1d02      	adds	r2, r0, #4
 800bc0a:	060d      	lsls	r5, r1, #24
 800bc0c:	d50b      	bpl.n	800bc26 <_printf_i+0xa2>
 800bc0e:	6806      	ldr	r6, [r0, #0]
 800bc10:	601a      	str	r2, [r3, #0]
 800bc12:	2e00      	cmp	r6, #0
 800bc14:	da03      	bge.n	800bc1e <_printf_i+0x9a>
 800bc16:	232d      	movs	r3, #45	@ 0x2d
 800bc18:	9a03      	ldr	r2, [sp, #12]
 800bc1a:	4276      	negs	r6, r6
 800bc1c:	7013      	strb	r3, [r2, #0]
 800bc1e:	4b5e      	ldr	r3, [pc, #376]	@ (800bd98 <_printf_i+0x214>)
 800bc20:	270a      	movs	r7, #10
 800bc22:	9304      	str	r3, [sp, #16]
 800bc24:	e018      	b.n	800bc58 <_printf_i+0xd4>
 800bc26:	6806      	ldr	r6, [r0, #0]
 800bc28:	601a      	str	r2, [r3, #0]
 800bc2a:	0649      	lsls	r1, r1, #25
 800bc2c:	d5f1      	bpl.n	800bc12 <_printf_i+0x8e>
 800bc2e:	b236      	sxth	r6, r6
 800bc30:	e7ef      	b.n	800bc12 <_printf_i+0x8e>
 800bc32:	6808      	ldr	r0, [r1, #0]
 800bc34:	6819      	ldr	r1, [r3, #0]
 800bc36:	c940      	ldmia	r1!, {r6}
 800bc38:	0605      	lsls	r5, r0, #24
 800bc3a:	d402      	bmi.n	800bc42 <_printf_i+0xbe>
 800bc3c:	0640      	lsls	r0, r0, #25
 800bc3e:	d500      	bpl.n	800bc42 <_printf_i+0xbe>
 800bc40:	b2b6      	uxth	r6, r6
 800bc42:	6019      	str	r1, [r3, #0]
 800bc44:	4b54      	ldr	r3, [pc, #336]	@ (800bd98 <_printf_i+0x214>)
 800bc46:	270a      	movs	r7, #10
 800bc48:	9304      	str	r3, [sp, #16]
 800bc4a:	2a6f      	cmp	r2, #111	@ 0x6f
 800bc4c:	d100      	bne.n	800bc50 <_printf_i+0xcc>
 800bc4e:	3f02      	subs	r7, #2
 800bc50:	0023      	movs	r3, r4
 800bc52:	2200      	movs	r2, #0
 800bc54:	3343      	adds	r3, #67	@ 0x43
 800bc56:	701a      	strb	r2, [r3, #0]
 800bc58:	6863      	ldr	r3, [r4, #4]
 800bc5a:	60a3      	str	r3, [r4, #8]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	db03      	blt.n	800bc68 <_printf_i+0xe4>
 800bc60:	2104      	movs	r1, #4
 800bc62:	6822      	ldr	r2, [r4, #0]
 800bc64:	438a      	bics	r2, r1
 800bc66:	6022      	str	r2, [r4, #0]
 800bc68:	2e00      	cmp	r6, #0
 800bc6a:	d102      	bne.n	800bc72 <_printf_i+0xee>
 800bc6c:	9d03      	ldr	r5, [sp, #12]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d00c      	beq.n	800bc8c <_printf_i+0x108>
 800bc72:	9d03      	ldr	r5, [sp, #12]
 800bc74:	0030      	movs	r0, r6
 800bc76:	0039      	movs	r1, r7
 800bc78:	f7f4 fade 	bl	8000238 <__aeabi_uidivmod>
 800bc7c:	9b04      	ldr	r3, [sp, #16]
 800bc7e:	3d01      	subs	r5, #1
 800bc80:	5c5b      	ldrb	r3, [r3, r1]
 800bc82:	702b      	strb	r3, [r5, #0]
 800bc84:	0033      	movs	r3, r6
 800bc86:	0006      	movs	r6, r0
 800bc88:	429f      	cmp	r7, r3
 800bc8a:	d9f3      	bls.n	800bc74 <_printf_i+0xf0>
 800bc8c:	2f08      	cmp	r7, #8
 800bc8e:	d109      	bne.n	800bca4 <_printf_i+0x120>
 800bc90:	6823      	ldr	r3, [r4, #0]
 800bc92:	07db      	lsls	r3, r3, #31
 800bc94:	d506      	bpl.n	800bca4 <_printf_i+0x120>
 800bc96:	6862      	ldr	r2, [r4, #4]
 800bc98:	6923      	ldr	r3, [r4, #16]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	dc02      	bgt.n	800bca4 <_printf_i+0x120>
 800bc9e:	2330      	movs	r3, #48	@ 0x30
 800bca0:	3d01      	subs	r5, #1
 800bca2:	702b      	strb	r3, [r5, #0]
 800bca4:	9b03      	ldr	r3, [sp, #12]
 800bca6:	1b5b      	subs	r3, r3, r5
 800bca8:	6123      	str	r3, [r4, #16]
 800bcaa:	9b07      	ldr	r3, [sp, #28]
 800bcac:	0021      	movs	r1, r4
 800bcae:	9300      	str	r3, [sp, #0]
 800bcb0:	9805      	ldr	r0, [sp, #20]
 800bcb2:	9b06      	ldr	r3, [sp, #24]
 800bcb4:	aa09      	add	r2, sp, #36	@ 0x24
 800bcb6:	f7ff fef5 	bl	800baa4 <_printf_common>
 800bcba:	3001      	adds	r0, #1
 800bcbc:	d148      	bne.n	800bd50 <_printf_i+0x1cc>
 800bcbe:	2001      	movs	r0, #1
 800bcc0:	4240      	negs	r0, r0
 800bcc2:	b00b      	add	sp, #44	@ 0x2c
 800bcc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcc6:	2220      	movs	r2, #32
 800bcc8:	6809      	ldr	r1, [r1, #0]
 800bcca:	430a      	orrs	r2, r1
 800bccc:	6022      	str	r2, [r4, #0]
 800bcce:	2278      	movs	r2, #120	@ 0x78
 800bcd0:	4932      	ldr	r1, [pc, #200]	@ (800bd9c <_printf_i+0x218>)
 800bcd2:	9104      	str	r1, [sp, #16]
 800bcd4:	0021      	movs	r1, r4
 800bcd6:	3145      	adds	r1, #69	@ 0x45
 800bcd8:	700a      	strb	r2, [r1, #0]
 800bcda:	6819      	ldr	r1, [r3, #0]
 800bcdc:	6822      	ldr	r2, [r4, #0]
 800bcde:	c940      	ldmia	r1!, {r6}
 800bce0:	0610      	lsls	r0, r2, #24
 800bce2:	d402      	bmi.n	800bcea <_printf_i+0x166>
 800bce4:	0650      	lsls	r0, r2, #25
 800bce6:	d500      	bpl.n	800bcea <_printf_i+0x166>
 800bce8:	b2b6      	uxth	r6, r6
 800bcea:	6019      	str	r1, [r3, #0]
 800bcec:	07d3      	lsls	r3, r2, #31
 800bcee:	d502      	bpl.n	800bcf6 <_printf_i+0x172>
 800bcf0:	2320      	movs	r3, #32
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	6023      	str	r3, [r4, #0]
 800bcf6:	2e00      	cmp	r6, #0
 800bcf8:	d001      	beq.n	800bcfe <_printf_i+0x17a>
 800bcfa:	2710      	movs	r7, #16
 800bcfc:	e7a8      	b.n	800bc50 <_printf_i+0xcc>
 800bcfe:	2220      	movs	r2, #32
 800bd00:	6823      	ldr	r3, [r4, #0]
 800bd02:	4393      	bics	r3, r2
 800bd04:	6023      	str	r3, [r4, #0]
 800bd06:	e7f8      	b.n	800bcfa <_printf_i+0x176>
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	680d      	ldr	r5, [r1, #0]
 800bd0c:	1d10      	adds	r0, r2, #4
 800bd0e:	6949      	ldr	r1, [r1, #20]
 800bd10:	6018      	str	r0, [r3, #0]
 800bd12:	6813      	ldr	r3, [r2, #0]
 800bd14:	062e      	lsls	r6, r5, #24
 800bd16:	d501      	bpl.n	800bd1c <_printf_i+0x198>
 800bd18:	6019      	str	r1, [r3, #0]
 800bd1a:	e002      	b.n	800bd22 <_printf_i+0x19e>
 800bd1c:	066d      	lsls	r5, r5, #25
 800bd1e:	d5fb      	bpl.n	800bd18 <_printf_i+0x194>
 800bd20:	8019      	strh	r1, [r3, #0]
 800bd22:	2300      	movs	r3, #0
 800bd24:	9d03      	ldr	r5, [sp, #12]
 800bd26:	6123      	str	r3, [r4, #16]
 800bd28:	e7bf      	b.n	800bcaa <_printf_i+0x126>
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	1d11      	adds	r1, r2, #4
 800bd2e:	6019      	str	r1, [r3, #0]
 800bd30:	6815      	ldr	r5, [r2, #0]
 800bd32:	2100      	movs	r1, #0
 800bd34:	0028      	movs	r0, r5
 800bd36:	6862      	ldr	r2, [r4, #4]
 800bd38:	f000 f858 	bl	800bdec <memchr>
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	d001      	beq.n	800bd44 <_printf_i+0x1c0>
 800bd40:	1b40      	subs	r0, r0, r5
 800bd42:	6060      	str	r0, [r4, #4]
 800bd44:	6863      	ldr	r3, [r4, #4]
 800bd46:	6123      	str	r3, [r4, #16]
 800bd48:	2300      	movs	r3, #0
 800bd4a:	9a03      	ldr	r2, [sp, #12]
 800bd4c:	7013      	strb	r3, [r2, #0]
 800bd4e:	e7ac      	b.n	800bcaa <_printf_i+0x126>
 800bd50:	002a      	movs	r2, r5
 800bd52:	6923      	ldr	r3, [r4, #16]
 800bd54:	9906      	ldr	r1, [sp, #24]
 800bd56:	9805      	ldr	r0, [sp, #20]
 800bd58:	9d07      	ldr	r5, [sp, #28]
 800bd5a:	47a8      	blx	r5
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	d0ae      	beq.n	800bcbe <_printf_i+0x13a>
 800bd60:	6823      	ldr	r3, [r4, #0]
 800bd62:	079b      	lsls	r3, r3, #30
 800bd64:	d415      	bmi.n	800bd92 <_printf_i+0x20e>
 800bd66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd68:	68e0      	ldr	r0, [r4, #12]
 800bd6a:	4298      	cmp	r0, r3
 800bd6c:	daa9      	bge.n	800bcc2 <_printf_i+0x13e>
 800bd6e:	0018      	movs	r0, r3
 800bd70:	e7a7      	b.n	800bcc2 <_printf_i+0x13e>
 800bd72:	0022      	movs	r2, r4
 800bd74:	2301      	movs	r3, #1
 800bd76:	9906      	ldr	r1, [sp, #24]
 800bd78:	9805      	ldr	r0, [sp, #20]
 800bd7a:	9e07      	ldr	r6, [sp, #28]
 800bd7c:	3219      	adds	r2, #25
 800bd7e:	47b0      	blx	r6
 800bd80:	3001      	adds	r0, #1
 800bd82:	d09c      	beq.n	800bcbe <_printf_i+0x13a>
 800bd84:	3501      	adds	r5, #1
 800bd86:	68e3      	ldr	r3, [r4, #12]
 800bd88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd8a:	1a9b      	subs	r3, r3, r2
 800bd8c:	42ab      	cmp	r3, r5
 800bd8e:	dcf0      	bgt.n	800bd72 <_printf_i+0x1ee>
 800bd90:	e7e9      	b.n	800bd66 <_printf_i+0x1e2>
 800bd92:	2500      	movs	r5, #0
 800bd94:	e7f7      	b.n	800bd86 <_printf_i+0x202>
 800bd96:	46c0      	nop			@ (mov r8, r8)
 800bd98:	0800cb6a 	.word	0x0800cb6a
 800bd9c:	0800cb7b 	.word	0x0800cb7b

0800bda0 <memmove>:
 800bda0:	b510      	push	{r4, lr}
 800bda2:	4288      	cmp	r0, r1
 800bda4:	d806      	bhi.n	800bdb4 <memmove+0x14>
 800bda6:	2300      	movs	r3, #0
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d008      	beq.n	800bdbe <memmove+0x1e>
 800bdac:	5ccc      	ldrb	r4, [r1, r3]
 800bdae:	54c4      	strb	r4, [r0, r3]
 800bdb0:	3301      	adds	r3, #1
 800bdb2:	e7f9      	b.n	800bda8 <memmove+0x8>
 800bdb4:	188b      	adds	r3, r1, r2
 800bdb6:	4298      	cmp	r0, r3
 800bdb8:	d2f5      	bcs.n	800bda6 <memmove+0x6>
 800bdba:	3a01      	subs	r2, #1
 800bdbc:	d200      	bcs.n	800bdc0 <memmove+0x20>
 800bdbe:	bd10      	pop	{r4, pc}
 800bdc0:	5c8b      	ldrb	r3, [r1, r2]
 800bdc2:	5483      	strb	r3, [r0, r2]
 800bdc4:	e7f9      	b.n	800bdba <memmove+0x1a>
	...

0800bdc8 <_sbrk_r>:
 800bdc8:	2300      	movs	r3, #0
 800bdca:	b570      	push	{r4, r5, r6, lr}
 800bdcc:	4d06      	ldr	r5, [pc, #24]	@ (800bde8 <_sbrk_r+0x20>)
 800bdce:	0004      	movs	r4, r0
 800bdd0:	0008      	movs	r0, r1
 800bdd2:	602b      	str	r3, [r5, #0]
 800bdd4:	f7fa f900 	bl	8005fd8 <_sbrk>
 800bdd8:	1c43      	adds	r3, r0, #1
 800bdda:	d103      	bne.n	800bde4 <_sbrk_r+0x1c>
 800bddc:	682b      	ldr	r3, [r5, #0]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d000      	beq.n	800bde4 <_sbrk_r+0x1c>
 800bde2:	6023      	str	r3, [r4, #0]
 800bde4:	bd70      	pop	{r4, r5, r6, pc}
 800bde6:	46c0      	nop			@ (mov r8, r8)
 800bde8:	200015c4 	.word	0x200015c4

0800bdec <memchr>:
 800bdec:	b2c9      	uxtb	r1, r1
 800bdee:	1882      	adds	r2, r0, r2
 800bdf0:	4290      	cmp	r0, r2
 800bdf2:	d101      	bne.n	800bdf8 <memchr+0xc>
 800bdf4:	2000      	movs	r0, #0
 800bdf6:	4770      	bx	lr
 800bdf8:	7803      	ldrb	r3, [r0, #0]
 800bdfa:	428b      	cmp	r3, r1
 800bdfc:	d0fb      	beq.n	800bdf6 <memchr+0xa>
 800bdfe:	3001      	adds	r0, #1
 800be00:	e7f6      	b.n	800bdf0 <memchr+0x4>

0800be02 <_realloc_r>:
 800be02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be04:	0006      	movs	r6, r0
 800be06:	000c      	movs	r4, r1
 800be08:	0015      	movs	r5, r2
 800be0a:	2900      	cmp	r1, #0
 800be0c:	d105      	bne.n	800be1a <_realloc_r+0x18>
 800be0e:	0011      	movs	r1, r2
 800be10:	f7ff fc5a 	bl	800b6c8 <_malloc_r>
 800be14:	0004      	movs	r4, r0
 800be16:	0020      	movs	r0, r4
 800be18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be1a:	2a00      	cmp	r2, #0
 800be1c:	d103      	bne.n	800be26 <_realloc_r+0x24>
 800be1e:	f7ff fbe7 	bl	800b5f0 <_free_r>
 800be22:	2400      	movs	r4, #0
 800be24:	e7f7      	b.n	800be16 <_realloc_r+0x14>
 800be26:	f000 f81b 	bl	800be60 <_malloc_usable_size_r>
 800be2a:	0007      	movs	r7, r0
 800be2c:	4285      	cmp	r5, r0
 800be2e:	d802      	bhi.n	800be36 <_realloc_r+0x34>
 800be30:	0843      	lsrs	r3, r0, #1
 800be32:	42ab      	cmp	r3, r5
 800be34:	d3ef      	bcc.n	800be16 <_realloc_r+0x14>
 800be36:	0029      	movs	r1, r5
 800be38:	0030      	movs	r0, r6
 800be3a:	f7ff fc45 	bl	800b6c8 <_malloc_r>
 800be3e:	9001      	str	r0, [sp, #4]
 800be40:	2800      	cmp	r0, #0
 800be42:	d0ee      	beq.n	800be22 <_realloc_r+0x20>
 800be44:	002a      	movs	r2, r5
 800be46:	42bd      	cmp	r5, r7
 800be48:	d900      	bls.n	800be4c <_realloc_r+0x4a>
 800be4a:	003a      	movs	r2, r7
 800be4c:	0021      	movs	r1, r4
 800be4e:	9801      	ldr	r0, [sp, #4]
 800be50:	f7ff fbc4 	bl	800b5dc <memcpy>
 800be54:	0021      	movs	r1, r4
 800be56:	0030      	movs	r0, r6
 800be58:	f7ff fbca 	bl	800b5f0 <_free_r>
 800be5c:	9c01      	ldr	r4, [sp, #4]
 800be5e:	e7da      	b.n	800be16 <_realloc_r+0x14>

0800be60 <_malloc_usable_size_r>:
 800be60:	1f0b      	subs	r3, r1, #4
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	1f18      	subs	r0, r3, #4
 800be66:	2b00      	cmp	r3, #0
 800be68:	da01      	bge.n	800be6e <_malloc_usable_size_r+0xe>
 800be6a:	580b      	ldr	r3, [r1, r0]
 800be6c:	18c0      	adds	r0, r0, r3
 800be6e:	4770      	bx	lr

0800be70 <sqrt>:
 800be70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be72:	0004      	movs	r4, r0
 800be74:	000d      	movs	r5, r1
 800be76:	f000 f821 	bl	800bebc <__ieee754_sqrt>
 800be7a:	0022      	movs	r2, r4
 800be7c:	0006      	movs	r6, r0
 800be7e:	000f      	movs	r7, r1
 800be80:	002b      	movs	r3, r5
 800be82:	0020      	movs	r0, r4
 800be84:	0029      	movs	r1, r5
 800be86:	f7f7 f90d 	bl	80030a4 <__aeabi_dcmpun>
 800be8a:	2800      	cmp	r0, #0
 800be8c:	d113      	bne.n	800beb6 <sqrt+0x46>
 800be8e:	2200      	movs	r2, #0
 800be90:	2300      	movs	r3, #0
 800be92:	0020      	movs	r0, r4
 800be94:	0029      	movs	r1, r5
 800be96:	f7f4 fad5 	bl	8000444 <__aeabi_dcmplt>
 800be9a:	2800      	cmp	r0, #0
 800be9c:	d00b      	beq.n	800beb6 <sqrt+0x46>
 800be9e:	f7ff fb71 	bl	800b584 <__errno>
 800bea2:	2321      	movs	r3, #33	@ 0x21
 800bea4:	2200      	movs	r2, #0
 800bea6:	6003      	str	r3, [r0, #0]
 800bea8:	2300      	movs	r3, #0
 800beaa:	0010      	movs	r0, r2
 800beac:	0019      	movs	r1, r3
 800beae:	f7f5 fe51 	bl	8001b54 <__aeabi_ddiv>
 800beb2:	0006      	movs	r6, r0
 800beb4:	000f      	movs	r7, r1
 800beb6:	0030      	movs	r0, r6
 800beb8:	0039      	movs	r1, r7
 800beba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bebc <__ieee754_sqrt>:
 800bebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bebe:	000a      	movs	r2, r1
 800bec0:	000d      	movs	r5, r1
 800bec2:	496d      	ldr	r1, [pc, #436]	@ (800c078 <__ieee754_sqrt+0x1bc>)
 800bec4:	0004      	movs	r4, r0
 800bec6:	0003      	movs	r3, r0
 800bec8:	0008      	movs	r0, r1
 800beca:	b087      	sub	sp, #28
 800becc:	4028      	ands	r0, r5
 800bece:	4288      	cmp	r0, r1
 800bed0:	d111      	bne.n	800bef6 <__ieee754_sqrt+0x3a>
 800bed2:	0022      	movs	r2, r4
 800bed4:	002b      	movs	r3, r5
 800bed6:	0020      	movs	r0, r4
 800bed8:	0029      	movs	r1, r5
 800beda:	f7f6 fa7f 	bl	80023dc <__aeabi_dmul>
 800bede:	0002      	movs	r2, r0
 800bee0:	000b      	movs	r3, r1
 800bee2:	0020      	movs	r0, r4
 800bee4:	0029      	movs	r1, r5
 800bee6:	f7f5 fad1 	bl	800148c <__aeabi_dadd>
 800beea:	0004      	movs	r4, r0
 800beec:	000d      	movs	r5, r1
 800beee:	0020      	movs	r0, r4
 800bef0:	0029      	movs	r1, r5
 800bef2:	b007      	add	sp, #28
 800bef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bef6:	2d00      	cmp	r5, #0
 800bef8:	dc11      	bgt.n	800bf1e <__ieee754_sqrt+0x62>
 800befa:	0069      	lsls	r1, r5, #1
 800befc:	0849      	lsrs	r1, r1, #1
 800befe:	4321      	orrs	r1, r4
 800bf00:	d0f5      	beq.n	800beee <__ieee754_sqrt+0x32>
 800bf02:	2000      	movs	r0, #0
 800bf04:	4285      	cmp	r5, r0
 800bf06:	d010      	beq.n	800bf2a <__ieee754_sqrt+0x6e>
 800bf08:	0022      	movs	r2, r4
 800bf0a:	002b      	movs	r3, r5
 800bf0c:	0020      	movs	r0, r4
 800bf0e:	0029      	movs	r1, r5
 800bf10:	f7f6 fd2c 	bl	800296c <__aeabi_dsub>
 800bf14:	0002      	movs	r2, r0
 800bf16:	000b      	movs	r3, r1
 800bf18:	f7f5 fe1c 	bl	8001b54 <__aeabi_ddiv>
 800bf1c:	e7e5      	b.n	800beea <__ieee754_sqrt+0x2e>
 800bf1e:	1528      	asrs	r0, r5, #20
 800bf20:	d115      	bne.n	800bf4e <__ieee754_sqrt+0x92>
 800bf22:	2480      	movs	r4, #128	@ 0x80
 800bf24:	2100      	movs	r1, #0
 800bf26:	0364      	lsls	r4, r4, #13
 800bf28:	e007      	b.n	800bf3a <__ieee754_sqrt+0x7e>
 800bf2a:	0ada      	lsrs	r2, r3, #11
 800bf2c:	3815      	subs	r0, #21
 800bf2e:	055b      	lsls	r3, r3, #21
 800bf30:	2a00      	cmp	r2, #0
 800bf32:	d0fa      	beq.n	800bf2a <__ieee754_sqrt+0x6e>
 800bf34:	e7f5      	b.n	800bf22 <__ieee754_sqrt+0x66>
 800bf36:	0052      	lsls	r2, r2, #1
 800bf38:	3101      	adds	r1, #1
 800bf3a:	4222      	tst	r2, r4
 800bf3c:	d0fb      	beq.n	800bf36 <__ieee754_sqrt+0x7a>
 800bf3e:	1e4c      	subs	r4, r1, #1
 800bf40:	1b00      	subs	r0, r0, r4
 800bf42:	2420      	movs	r4, #32
 800bf44:	001d      	movs	r5, r3
 800bf46:	1a64      	subs	r4, r4, r1
 800bf48:	40e5      	lsrs	r5, r4
 800bf4a:	408b      	lsls	r3, r1
 800bf4c:	432a      	orrs	r2, r5
 800bf4e:	494b      	ldr	r1, [pc, #300]	@ (800c07c <__ieee754_sqrt+0x1c0>)
 800bf50:	0312      	lsls	r2, r2, #12
 800bf52:	1844      	adds	r4, r0, r1
 800bf54:	2180      	movs	r1, #128	@ 0x80
 800bf56:	0b12      	lsrs	r2, r2, #12
 800bf58:	0349      	lsls	r1, r1, #13
 800bf5a:	4311      	orrs	r1, r2
 800bf5c:	07c0      	lsls	r0, r0, #31
 800bf5e:	d403      	bmi.n	800bf68 <__ieee754_sqrt+0xac>
 800bf60:	0fda      	lsrs	r2, r3, #31
 800bf62:	0049      	lsls	r1, r1, #1
 800bf64:	1851      	adds	r1, r2, r1
 800bf66:	005b      	lsls	r3, r3, #1
 800bf68:	2500      	movs	r5, #0
 800bf6a:	1062      	asrs	r2, r4, #1
 800bf6c:	0049      	lsls	r1, r1, #1
 800bf6e:	2480      	movs	r4, #128	@ 0x80
 800bf70:	9205      	str	r2, [sp, #20]
 800bf72:	0fda      	lsrs	r2, r3, #31
 800bf74:	1852      	adds	r2, r2, r1
 800bf76:	2016      	movs	r0, #22
 800bf78:	0029      	movs	r1, r5
 800bf7a:	005b      	lsls	r3, r3, #1
 800bf7c:	03a4      	lsls	r4, r4, #14
 800bf7e:	190e      	adds	r6, r1, r4
 800bf80:	4296      	cmp	r6, r2
 800bf82:	dc02      	bgt.n	800bf8a <__ieee754_sqrt+0xce>
 800bf84:	1931      	adds	r1, r6, r4
 800bf86:	1b92      	subs	r2, r2, r6
 800bf88:	192d      	adds	r5, r5, r4
 800bf8a:	0fde      	lsrs	r6, r3, #31
 800bf8c:	0052      	lsls	r2, r2, #1
 800bf8e:	3801      	subs	r0, #1
 800bf90:	1992      	adds	r2, r2, r6
 800bf92:	005b      	lsls	r3, r3, #1
 800bf94:	0864      	lsrs	r4, r4, #1
 800bf96:	2800      	cmp	r0, #0
 800bf98:	d1f1      	bne.n	800bf7e <__ieee754_sqrt+0xc2>
 800bf9a:	2620      	movs	r6, #32
 800bf9c:	2780      	movs	r7, #128	@ 0x80
 800bf9e:	0004      	movs	r4, r0
 800bfa0:	9604      	str	r6, [sp, #16]
 800bfa2:	063f      	lsls	r7, r7, #24
 800bfa4:	19c6      	adds	r6, r0, r7
 800bfa6:	46b4      	mov	ip, r6
 800bfa8:	4291      	cmp	r1, r2
 800bfaa:	db02      	blt.n	800bfb2 <__ieee754_sqrt+0xf6>
 800bfac:	d114      	bne.n	800bfd8 <__ieee754_sqrt+0x11c>
 800bfae:	429e      	cmp	r6, r3
 800bfb0:	d812      	bhi.n	800bfd8 <__ieee754_sqrt+0x11c>
 800bfb2:	4660      	mov	r0, ip
 800bfb4:	4666      	mov	r6, ip
 800bfb6:	19c0      	adds	r0, r0, r7
 800bfb8:	9100      	str	r1, [sp, #0]
 800bfba:	2e00      	cmp	r6, #0
 800bfbc:	da03      	bge.n	800bfc6 <__ieee754_sqrt+0x10a>
 800bfbe:	43c6      	mvns	r6, r0
 800bfc0:	0ff6      	lsrs	r6, r6, #31
 800bfc2:	198e      	adds	r6, r1, r6
 800bfc4:	9600      	str	r6, [sp, #0]
 800bfc6:	1a52      	subs	r2, r2, r1
 800bfc8:	4563      	cmp	r3, ip
 800bfca:	4189      	sbcs	r1, r1
 800bfcc:	4249      	negs	r1, r1
 800bfce:	1a52      	subs	r2, r2, r1
 800bfd0:	4661      	mov	r1, ip
 800bfd2:	1a5b      	subs	r3, r3, r1
 800bfd4:	9900      	ldr	r1, [sp, #0]
 800bfd6:	19e4      	adds	r4, r4, r7
 800bfd8:	0fde      	lsrs	r6, r3, #31
 800bfda:	0052      	lsls	r2, r2, #1
 800bfdc:	1992      	adds	r2, r2, r6
 800bfde:	9e04      	ldr	r6, [sp, #16]
 800bfe0:	005b      	lsls	r3, r3, #1
 800bfe2:	3e01      	subs	r6, #1
 800bfe4:	087f      	lsrs	r7, r7, #1
 800bfe6:	9604      	str	r6, [sp, #16]
 800bfe8:	2e00      	cmp	r6, #0
 800bfea:	d1db      	bne.n	800bfa4 <__ieee754_sqrt+0xe8>
 800bfec:	431a      	orrs	r2, r3
 800bfee:	d01f      	beq.n	800c030 <__ieee754_sqrt+0x174>
 800bff0:	4e23      	ldr	r6, [pc, #140]	@ (800c080 <__ieee754_sqrt+0x1c4>)
 800bff2:	4f24      	ldr	r7, [pc, #144]	@ (800c084 <__ieee754_sqrt+0x1c8>)
 800bff4:	6830      	ldr	r0, [r6, #0]
 800bff6:	6871      	ldr	r1, [r6, #4]
 800bff8:	683a      	ldr	r2, [r7, #0]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	9200      	str	r2, [sp, #0]
 800bffe:	9301      	str	r3, [sp, #4]
 800c000:	6832      	ldr	r2, [r6, #0]
 800c002:	6873      	ldr	r3, [r6, #4]
 800c004:	9202      	str	r2, [sp, #8]
 800c006:	9303      	str	r3, [sp, #12]
 800c008:	9a00      	ldr	r2, [sp, #0]
 800c00a:	9b01      	ldr	r3, [sp, #4]
 800c00c:	f7f6 fcae 	bl	800296c <__aeabi_dsub>
 800c010:	0002      	movs	r2, r0
 800c012:	000b      	movs	r3, r1
 800c014:	9802      	ldr	r0, [sp, #8]
 800c016:	9903      	ldr	r1, [sp, #12]
 800c018:	f7f4 fa1e 	bl	8000458 <__aeabi_dcmple>
 800c01c:	2800      	cmp	r0, #0
 800c01e:	d007      	beq.n	800c030 <__ieee754_sqrt+0x174>
 800c020:	6830      	ldr	r0, [r6, #0]
 800c022:	6871      	ldr	r1, [r6, #4]
 800c024:	683a      	ldr	r2, [r7, #0]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	1c67      	adds	r7, r4, #1
 800c02a:	d10f      	bne.n	800c04c <__ieee754_sqrt+0x190>
 800c02c:	9c04      	ldr	r4, [sp, #16]
 800c02e:	3501      	adds	r5, #1
 800c030:	4b15      	ldr	r3, [pc, #84]	@ (800c088 <__ieee754_sqrt+0x1cc>)
 800c032:	106a      	asrs	r2, r5, #1
 800c034:	18d2      	adds	r2, r2, r3
 800c036:	0863      	lsrs	r3, r4, #1
 800c038:	07ed      	lsls	r5, r5, #31
 800c03a:	d502      	bpl.n	800c042 <__ieee754_sqrt+0x186>
 800c03c:	2180      	movs	r1, #128	@ 0x80
 800c03e:	0609      	lsls	r1, r1, #24
 800c040:	430b      	orrs	r3, r1
 800c042:	9905      	ldr	r1, [sp, #20]
 800c044:	001c      	movs	r4, r3
 800c046:	0509      	lsls	r1, r1, #20
 800c048:	188d      	adds	r5, r1, r2
 800c04a:	e750      	b.n	800beee <__ieee754_sqrt+0x32>
 800c04c:	f7f5 fa1e 	bl	800148c <__aeabi_dadd>
 800c050:	6877      	ldr	r7, [r6, #4]
 800c052:	6836      	ldr	r6, [r6, #0]
 800c054:	0002      	movs	r2, r0
 800c056:	000b      	movs	r3, r1
 800c058:	0030      	movs	r0, r6
 800c05a:	0039      	movs	r1, r7
 800c05c:	f7f4 f9f2 	bl	8000444 <__aeabi_dcmplt>
 800c060:	2800      	cmp	r0, #0
 800c062:	d004      	beq.n	800c06e <__ieee754_sqrt+0x1b2>
 800c064:	3402      	adds	r4, #2
 800c066:	4263      	negs	r3, r4
 800c068:	4163      	adcs	r3, r4
 800c06a:	18ed      	adds	r5, r5, r3
 800c06c:	e7e0      	b.n	800c030 <__ieee754_sqrt+0x174>
 800c06e:	2301      	movs	r3, #1
 800c070:	3401      	adds	r4, #1
 800c072:	439c      	bics	r4, r3
 800c074:	e7dc      	b.n	800c030 <__ieee754_sqrt+0x174>
 800c076:	46c0      	nop			@ (mov r8, r8)
 800c078:	7ff00000 	.word	0x7ff00000
 800c07c:	fffffc01 	.word	0xfffffc01
 800c080:	20000ee8 	.word	0x20000ee8
 800c084:	20000ee0 	.word	0x20000ee0
 800c088:	3fe00000 	.word	0x3fe00000

0800c08c <_init>:
 800c08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c08e:	46c0      	nop			@ (mov r8, r8)
 800c090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c092:	bc08      	pop	{r3}
 800c094:	469e      	mov	lr, r3
 800c096:	4770      	bx	lr

0800c098 <_fini>:
 800c098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c09a:	46c0      	nop			@ (mov r8, r8)
 800c09c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c09e:	bc08      	pop	{r3}
 800c0a0:	469e      	mov	lr, r3
 800c0a2:	4770      	bx	lr
