
ynotag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095c4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000860  08009680  08009680  0000a680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ee0  08009ee0  0000bee0  2**0
                  CONTENTS
  4 .ARM          00000008  08009ee0  08009ee0  0000aee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ee8  08009ee8  0000bee0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ee8  08009ee8  0000aee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009eec  08009eec  0000aeec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000ee0  20000000  08009ef0  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d4  20000ee0  0800add0  0000bee0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200016b4  0800add0  0000c6b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000bee0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a69f  00000000  00000000  0000bf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000327e  00000000  00000000  000265a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c8  00000000  00000000  00029828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012dd  00000000  00000000  0002aff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f3b4  00000000  00000000  0002c2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dc18  00000000  00000000  0004b681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9fa7  00000000  00000000  00069299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133240  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060cc  00000000  00000000  00133284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00139350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000ee0 	.word	0x20000ee0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009668 	.word	0x08009668

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000ee4 	.word	0x20000ee4
 8000100:	08009668 	.word	0x08009668

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_cdrcmple>:
 8000414:	4684      	mov	ip, r0
 8000416:	0010      	movs	r0, r2
 8000418:	4662      	mov	r2, ip
 800041a:	468c      	mov	ip, r1
 800041c:	0019      	movs	r1, r3
 800041e:	4663      	mov	r3, ip
 8000420:	e000      	b.n	8000424 <__aeabi_cdcmpeq>
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdcmpeq>:
 8000424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000426:	f000 ffed 	bl	8001404 <__ledf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	d401      	bmi.n	8000432 <__aeabi_cdcmpeq+0xe>
 800042e:	2100      	movs	r1, #0
 8000430:	42c8      	cmn	r0, r1
 8000432:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000434 <__aeabi_dcmpeq>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 ff2d 	bl	8001294 <__eqdf2>
 800043a:	4240      	negs	r0, r0
 800043c:	3001      	adds	r0, #1
 800043e:	bd10      	pop	{r4, pc}

08000440 <__aeabi_dcmplt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 ffdf 	bl	8001404 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	db01      	blt.n	800044e <__aeabi_dcmplt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_dcmple>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 ffd5 	bl	8001404 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dd01      	ble.n	8000462 <__aeabi_dcmple+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmpgt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 ff57 	bl	800131c <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dc01      	bgt.n	8000476 <__aeabi_dcmpgt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmpge>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ff4d 	bl	800131c <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	da01      	bge.n	800048a <__aeabi_dcmpge+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_uldivmod>:
 8000490:	2b00      	cmp	r3, #0
 8000492:	d111      	bne.n	80004b8 <__aeabi_uldivmod+0x28>
 8000494:	2a00      	cmp	r2, #0
 8000496:	d10f      	bne.n	80004b8 <__aeabi_uldivmod+0x28>
 8000498:	2900      	cmp	r1, #0
 800049a:	d100      	bne.n	800049e <__aeabi_uldivmod+0xe>
 800049c:	2800      	cmp	r0, #0
 800049e:	d002      	beq.n	80004a6 <__aeabi_uldivmod+0x16>
 80004a0:	2100      	movs	r1, #0
 80004a2:	43c9      	mvns	r1, r1
 80004a4:	0008      	movs	r0, r1
 80004a6:	b407      	push	{r0, r1, r2}
 80004a8:	4802      	ldr	r0, [pc, #8]	@ (80004b4 <__aeabi_uldivmod+0x24>)
 80004aa:	a102      	add	r1, pc, #8	@ (adr r1, 80004b4 <__aeabi_uldivmod+0x24>)
 80004ac:	1840      	adds	r0, r0, r1
 80004ae:	9002      	str	r0, [sp, #8]
 80004b0:	bd03      	pop	{r0, r1, pc}
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	ffffff5d 	.word	0xffffff5d
 80004b8:	b403      	push	{r0, r1}
 80004ba:	4668      	mov	r0, sp
 80004bc:	b501      	push	{r0, lr}
 80004be:	9802      	ldr	r0, [sp, #8]
 80004c0:	f000 f81e 	bl	8000500 <__udivmoddi4>
 80004c4:	9b01      	ldr	r3, [sp, #4]
 80004c6:	469e      	mov	lr, r3
 80004c8:	b002      	add	sp, #8
 80004ca:	bc0c      	pop	{r2, r3}
 80004cc:	4770      	bx	lr
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_f2uiz>:
 80004d0:	219e      	movs	r1, #158	@ 0x9e
 80004d2:	b510      	push	{r4, lr}
 80004d4:	05c9      	lsls	r1, r1, #23
 80004d6:	1c04      	adds	r4, r0, #0
 80004d8:	f001 fc28 	bl	8001d2c <__aeabi_fcmpge>
 80004dc:	2800      	cmp	r0, #0
 80004de:	d103      	bne.n	80004e8 <__aeabi_f2uiz+0x18>
 80004e0:	1c20      	adds	r0, r4, #0
 80004e2:	f000 fb9d 	bl	8000c20 <__aeabi_f2iz>
 80004e6:	bd10      	pop	{r4, pc}
 80004e8:	219e      	movs	r1, #158	@ 0x9e
 80004ea:	1c20      	adds	r0, r4, #0
 80004ec:	05c9      	lsls	r1, r1, #23
 80004ee:	f000 f9f3 	bl	80008d8 <__aeabi_fsub>
 80004f2:	f000 fb95 	bl	8000c20 <__aeabi_f2iz>
 80004f6:	2380      	movs	r3, #128	@ 0x80
 80004f8:	061b      	lsls	r3, r3, #24
 80004fa:	469c      	mov	ip, r3
 80004fc:	4460      	add	r0, ip
 80004fe:	e7f2      	b.n	80004e6 <__aeabi_f2uiz+0x16>

08000500 <__udivmoddi4>:
 8000500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000502:	4657      	mov	r7, sl
 8000504:	464e      	mov	r6, r9
 8000506:	4645      	mov	r5, r8
 8000508:	46de      	mov	lr, fp
 800050a:	b5e0      	push	{r5, r6, r7, lr}
 800050c:	0004      	movs	r4, r0
 800050e:	000d      	movs	r5, r1
 8000510:	4692      	mov	sl, r2
 8000512:	4699      	mov	r9, r3
 8000514:	b083      	sub	sp, #12
 8000516:	428b      	cmp	r3, r1
 8000518:	d830      	bhi.n	800057c <__udivmoddi4+0x7c>
 800051a:	d02d      	beq.n	8000578 <__udivmoddi4+0x78>
 800051c:	4649      	mov	r1, r9
 800051e:	4650      	mov	r0, sl
 8000520:	f001 fc2c 	bl	8001d7c <__clzdi2>
 8000524:	0029      	movs	r1, r5
 8000526:	0006      	movs	r6, r0
 8000528:	0020      	movs	r0, r4
 800052a:	f001 fc27 	bl	8001d7c <__clzdi2>
 800052e:	1a33      	subs	r3, r6, r0
 8000530:	4698      	mov	r8, r3
 8000532:	3b20      	subs	r3, #32
 8000534:	d434      	bmi.n	80005a0 <__udivmoddi4+0xa0>
 8000536:	469b      	mov	fp, r3
 8000538:	4653      	mov	r3, sl
 800053a:	465a      	mov	r2, fp
 800053c:	4093      	lsls	r3, r2
 800053e:	4642      	mov	r2, r8
 8000540:	001f      	movs	r7, r3
 8000542:	4653      	mov	r3, sl
 8000544:	4093      	lsls	r3, r2
 8000546:	001e      	movs	r6, r3
 8000548:	42af      	cmp	r7, r5
 800054a:	d83b      	bhi.n	80005c4 <__udivmoddi4+0xc4>
 800054c:	42af      	cmp	r7, r5
 800054e:	d100      	bne.n	8000552 <__udivmoddi4+0x52>
 8000550:	e079      	b.n	8000646 <__udivmoddi4+0x146>
 8000552:	465b      	mov	r3, fp
 8000554:	1ba4      	subs	r4, r4, r6
 8000556:	41bd      	sbcs	r5, r7
 8000558:	2b00      	cmp	r3, #0
 800055a:	da00      	bge.n	800055e <__udivmoddi4+0x5e>
 800055c:	e076      	b.n	800064c <__udivmoddi4+0x14c>
 800055e:	2200      	movs	r2, #0
 8000560:	2300      	movs	r3, #0
 8000562:	9200      	str	r2, [sp, #0]
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	2301      	movs	r3, #1
 8000568:	465a      	mov	r2, fp
 800056a:	4093      	lsls	r3, r2
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	2301      	movs	r3, #1
 8000570:	4642      	mov	r2, r8
 8000572:	4093      	lsls	r3, r2
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	e029      	b.n	80005cc <__udivmoddi4+0xcc>
 8000578:	4282      	cmp	r2, r0
 800057a:	d9cf      	bls.n	800051c <__udivmoddi4+0x1c>
 800057c:	2200      	movs	r2, #0
 800057e:	2300      	movs	r3, #0
 8000580:	9200      	str	r2, [sp, #0]
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <__udivmoddi4+0x8e>
 800058a:	601c      	str	r4, [r3, #0]
 800058c:	605d      	str	r5, [r3, #4]
 800058e:	9800      	ldr	r0, [sp, #0]
 8000590:	9901      	ldr	r1, [sp, #4]
 8000592:	b003      	add	sp, #12
 8000594:	bcf0      	pop	{r4, r5, r6, r7}
 8000596:	46bb      	mov	fp, r7
 8000598:	46b2      	mov	sl, r6
 800059a:	46a9      	mov	r9, r5
 800059c:	46a0      	mov	r8, r4
 800059e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a0:	4642      	mov	r2, r8
 80005a2:	469b      	mov	fp, r3
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	4652      	mov	r2, sl
 80005aa:	40da      	lsrs	r2, r3
 80005ac:	4641      	mov	r1, r8
 80005ae:	0013      	movs	r3, r2
 80005b0:	464a      	mov	r2, r9
 80005b2:	408a      	lsls	r2, r1
 80005b4:	0017      	movs	r7, r2
 80005b6:	4642      	mov	r2, r8
 80005b8:	431f      	orrs	r7, r3
 80005ba:	4653      	mov	r3, sl
 80005bc:	4093      	lsls	r3, r2
 80005be:	001e      	movs	r6, r3
 80005c0:	42af      	cmp	r7, r5
 80005c2:	d9c3      	bls.n	800054c <__udivmoddi4+0x4c>
 80005c4:	2200      	movs	r2, #0
 80005c6:	2300      	movs	r3, #0
 80005c8:	9200      	str	r2, [sp, #0]
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	4643      	mov	r3, r8
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d0d8      	beq.n	8000584 <__udivmoddi4+0x84>
 80005d2:	07fb      	lsls	r3, r7, #31
 80005d4:	0872      	lsrs	r2, r6, #1
 80005d6:	431a      	orrs	r2, r3
 80005d8:	4646      	mov	r6, r8
 80005da:	087b      	lsrs	r3, r7, #1
 80005dc:	e00e      	b.n	80005fc <__udivmoddi4+0xfc>
 80005de:	42ab      	cmp	r3, r5
 80005e0:	d101      	bne.n	80005e6 <__udivmoddi4+0xe6>
 80005e2:	42a2      	cmp	r2, r4
 80005e4:	d80c      	bhi.n	8000600 <__udivmoddi4+0x100>
 80005e6:	1aa4      	subs	r4, r4, r2
 80005e8:	419d      	sbcs	r5, r3
 80005ea:	2001      	movs	r0, #1
 80005ec:	1924      	adds	r4, r4, r4
 80005ee:	416d      	adcs	r5, r5
 80005f0:	2100      	movs	r1, #0
 80005f2:	3e01      	subs	r6, #1
 80005f4:	1824      	adds	r4, r4, r0
 80005f6:	414d      	adcs	r5, r1
 80005f8:	2e00      	cmp	r6, #0
 80005fa:	d006      	beq.n	800060a <__udivmoddi4+0x10a>
 80005fc:	42ab      	cmp	r3, r5
 80005fe:	d9ee      	bls.n	80005de <__udivmoddi4+0xde>
 8000600:	3e01      	subs	r6, #1
 8000602:	1924      	adds	r4, r4, r4
 8000604:	416d      	adcs	r5, r5
 8000606:	2e00      	cmp	r6, #0
 8000608:	d1f8      	bne.n	80005fc <__udivmoddi4+0xfc>
 800060a:	9800      	ldr	r0, [sp, #0]
 800060c:	9901      	ldr	r1, [sp, #4]
 800060e:	465b      	mov	r3, fp
 8000610:	1900      	adds	r0, r0, r4
 8000612:	4169      	adcs	r1, r5
 8000614:	2b00      	cmp	r3, #0
 8000616:	db24      	blt.n	8000662 <__udivmoddi4+0x162>
 8000618:	002b      	movs	r3, r5
 800061a:	465a      	mov	r2, fp
 800061c:	4644      	mov	r4, r8
 800061e:	40d3      	lsrs	r3, r2
 8000620:	002a      	movs	r2, r5
 8000622:	40e2      	lsrs	r2, r4
 8000624:	001c      	movs	r4, r3
 8000626:	465b      	mov	r3, fp
 8000628:	0015      	movs	r5, r2
 800062a:	2b00      	cmp	r3, #0
 800062c:	db2a      	blt.n	8000684 <__udivmoddi4+0x184>
 800062e:	0026      	movs	r6, r4
 8000630:	409e      	lsls	r6, r3
 8000632:	0033      	movs	r3, r6
 8000634:	0026      	movs	r6, r4
 8000636:	4647      	mov	r7, r8
 8000638:	40be      	lsls	r6, r7
 800063a:	0032      	movs	r2, r6
 800063c:	1a80      	subs	r0, r0, r2
 800063e:	4199      	sbcs	r1, r3
 8000640:	9000      	str	r0, [sp, #0]
 8000642:	9101      	str	r1, [sp, #4]
 8000644:	e79e      	b.n	8000584 <__udivmoddi4+0x84>
 8000646:	42a3      	cmp	r3, r4
 8000648:	d8bc      	bhi.n	80005c4 <__udivmoddi4+0xc4>
 800064a:	e782      	b.n	8000552 <__udivmoddi4+0x52>
 800064c:	4642      	mov	r2, r8
 800064e:	2320      	movs	r3, #32
 8000650:	2100      	movs	r1, #0
 8000652:	1a9b      	subs	r3, r3, r2
 8000654:	2200      	movs	r2, #0
 8000656:	9100      	str	r1, [sp, #0]
 8000658:	9201      	str	r2, [sp, #4]
 800065a:	2201      	movs	r2, #1
 800065c:	40da      	lsrs	r2, r3
 800065e:	9201      	str	r2, [sp, #4]
 8000660:	e785      	b.n	800056e <__udivmoddi4+0x6e>
 8000662:	4642      	mov	r2, r8
 8000664:	2320      	movs	r3, #32
 8000666:	1a9b      	subs	r3, r3, r2
 8000668:	002a      	movs	r2, r5
 800066a:	4646      	mov	r6, r8
 800066c:	409a      	lsls	r2, r3
 800066e:	0023      	movs	r3, r4
 8000670:	40f3      	lsrs	r3, r6
 8000672:	4644      	mov	r4, r8
 8000674:	4313      	orrs	r3, r2
 8000676:	002a      	movs	r2, r5
 8000678:	40e2      	lsrs	r2, r4
 800067a:	001c      	movs	r4, r3
 800067c:	465b      	mov	r3, fp
 800067e:	0015      	movs	r5, r2
 8000680:	2b00      	cmp	r3, #0
 8000682:	dad4      	bge.n	800062e <__udivmoddi4+0x12e>
 8000684:	4642      	mov	r2, r8
 8000686:	002f      	movs	r7, r5
 8000688:	2320      	movs	r3, #32
 800068a:	0026      	movs	r6, r4
 800068c:	4097      	lsls	r7, r2
 800068e:	1a9b      	subs	r3, r3, r2
 8000690:	40de      	lsrs	r6, r3
 8000692:	003b      	movs	r3, r7
 8000694:	4333      	orrs	r3, r6
 8000696:	e7cd      	b.n	8000634 <__udivmoddi4+0x134>

08000698 <__aeabi_fdiv>:
 8000698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069a:	464f      	mov	r7, r9
 800069c:	4646      	mov	r6, r8
 800069e:	46d6      	mov	lr, sl
 80006a0:	0244      	lsls	r4, r0, #9
 80006a2:	b5c0      	push	{r6, r7, lr}
 80006a4:	0047      	lsls	r7, r0, #1
 80006a6:	1c0e      	adds	r6, r1, #0
 80006a8:	0a64      	lsrs	r4, r4, #9
 80006aa:	0e3f      	lsrs	r7, r7, #24
 80006ac:	0fc5      	lsrs	r5, r0, #31
 80006ae:	2f00      	cmp	r7, #0
 80006b0:	d03c      	beq.n	800072c <__aeabi_fdiv+0x94>
 80006b2:	2fff      	cmp	r7, #255	@ 0xff
 80006b4:	d042      	beq.n	800073c <__aeabi_fdiv+0xa4>
 80006b6:	2300      	movs	r3, #0
 80006b8:	2280      	movs	r2, #128	@ 0x80
 80006ba:	4699      	mov	r9, r3
 80006bc:	469a      	mov	sl, r3
 80006be:	00e4      	lsls	r4, r4, #3
 80006c0:	04d2      	lsls	r2, r2, #19
 80006c2:	4314      	orrs	r4, r2
 80006c4:	3f7f      	subs	r7, #127	@ 0x7f
 80006c6:	0273      	lsls	r3, r6, #9
 80006c8:	0a5b      	lsrs	r3, r3, #9
 80006ca:	4698      	mov	r8, r3
 80006cc:	0073      	lsls	r3, r6, #1
 80006ce:	0e1b      	lsrs	r3, r3, #24
 80006d0:	0ff6      	lsrs	r6, r6, #31
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d01b      	beq.n	800070e <__aeabi_fdiv+0x76>
 80006d6:	2bff      	cmp	r3, #255	@ 0xff
 80006d8:	d013      	beq.n	8000702 <__aeabi_fdiv+0x6a>
 80006da:	4642      	mov	r2, r8
 80006dc:	2180      	movs	r1, #128	@ 0x80
 80006de:	00d2      	lsls	r2, r2, #3
 80006e0:	04c9      	lsls	r1, r1, #19
 80006e2:	4311      	orrs	r1, r2
 80006e4:	4688      	mov	r8, r1
 80006e6:	2000      	movs	r0, #0
 80006e8:	3b7f      	subs	r3, #127	@ 0x7f
 80006ea:	0029      	movs	r1, r5
 80006ec:	1aff      	subs	r7, r7, r3
 80006ee:	464b      	mov	r3, r9
 80006f0:	4071      	eors	r1, r6
 80006f2:	b2c9      	uxtb	r1, r1
 80006f4:	2b0f      	cmp	r3, #15
 80006f6:	d900      	bls.n	80006fa <__aeabi_fdiv+0x62>
 80006f8:	e0b5      	b.n	8000866 <__aeabi_fdiv+0x1ce>
 80006fa:	4a74      	ldr	r2, [pc, #464]	@ (80008cc <__aeabi_fdiv+0x234>)
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	58d3      	ldr	r3, [r2, r3]
 8000700:	469f      	mov	pc, r3
 8000702:	4643      	mov	r3, r8
 8000704:	2b00      	cmp	r3, #0
 8000706:	d13f      	bne.n	8000788 <__aeabi_fdiv+0xf0>
 8000708:	3fff      	subs	r7, #255	@ 0xff
 800070a:	3302      	adds	r3, #2
 800070c:	e003      	b.n	8000716 <__aeabi_fdiv+0x7e>
 800070e:	4643      	mov	r3, r8
 8000710:	2b00      	cmp	r3, #0
 8000712:	d12d      	bne.n	8000770 <__aeabi_fdiv+0xd8>
 8000714:	2301      	movs	r3, #1
 8000716:	0029      	movs	r1, r5
 8000718:	464a      	mov	r2, r9
 800071a:	4071      	eors	r1, r6
 800071c:	b2c9      	uxtb	r1, r1
 800071e:	431a      	orrs	r2, r3
 8000720:	2a0e      	cmp	r2, #14
 8000722:	d838      	bhi.n	8000796 <__aeabi_fdiv+0xfe>
 8000724:	486a      	ldr	r0, [pc, #424]	@ (80008d0 <__aeabi_fdiv+0x238>)
 8000726:	0092      	lsls	r2, r2, #2
 8000728:	5882      	ldr	r2, [r0, r2]
 800072a:	4697      	mov	pc, r2
 800072c:	2c00      	cmp	r4, #0
 800072e:	d113      	bne.n	8000758 <__aeabi_fdiv+0xc0>
 8000730:	2304      	movs	r3, #4
 8000732:	4699      	mov	r9, r3
 8000734:	3b03      	subs	r3, #3
 8000736:	2700      	movs	r7, #0
 8000738:	469a      	mov	sl, r3
 800073a:	e7c4      	b.n	80006c6 <__aeabi_fdiv+0x2e>
 800073c:	2c00      	cmp	r4, #0
 800073e:	d105      	bne.n	800074c <__aeabi_fdiv+0xb4>
 8000740:	2308      	movs	r3, #8
 8000742:	4699      	mov	r9, r3
 8000744:	3b06      	subs	r3, #6
 8000746:	27ff      	movs	r7, #255	@ 0xff
 8000748:	469a      	mov	sl, r3
 800074a:	e7bc      	b.n	80006c6 <__aeabi_fdiv+0x2e>
 800074c:	230c      	movs	r3, #12
 800074e:	4699      	mov	r9, r3
 8000750:	3b09      	subs	r3, #9
 8000752:	27ff      	movs	r7, #255	@ 0xff
 8000754:	469a      	mov	sl, r3
 8000756:	e7b6      	b.n	80006c6 <__aeabi_fdiv+0x2e>
 8000758:	0020      	movs	r0, r4
 800075a:	f001 faf1 	bl	8001d40 <__clzsi2>
 800075e:	2776      	movs	r7, #118	@ 0x76
 8000760:	1f43      	subs	r3, r0, #5
 8000762:	409c      	lsls	r4, r3
 8000764:	2300      	movs	r3, #0
 8000766:	427f      	negs	r7, r7
 8000768:	4699      	mov	r9, r3
 800076a:	469a      	mov	sl, r3
 800076c:	1a3f      	subs	r7, r7, r0
 800076e:	e7aa      	b.n	80006c6 <__aeabi_fdiv+0x2e>
 8000770:	4640      	mov	r0, r8
 8000772:	f001 fae5 	bl	8001d40 <__clzsi2>
 8000776:	4642      	mov	r2, r8
 8000778:	1f43      	subs	r3, r0, #5
 800077a:	409a      	lsls	r2, r3
 800077c:	2376      	movs	r3, #118	@ 0x76
 800077e:	425b      	negs	r3, r3
 8000780:	1a1b      	subs	r3, r3, r0
 8000782:	4690      	mov	r8, r2
 8000784:	2000      	movs	r0, #0
 8000786:	e7b0      	b.n	80006ea <__aeabi_fdiv+0x52>
 8000788:	2303      	movs	r3, #3
 800078a:	464a      	mov	r2, r9
 800078c:	431a      	orrs	r2, r3
 800078e:	4691      	mov	r9, r2
 8000790:	2003      	movs	r0, #3
 8000792:	33fc      	adds	r3, #252	@ 0xfc
 8000794:	e7a9      	b.n	80006ea <__aeabi_fdiv+0x52>
 8000796:	000d      	movs	r5, r1
 8000798:	20ff      	movs	r0, #255	@ 0xff
 800079a:	2200      	movs	r2, #0
 800079c:	05c0      	lsls	r0, r0, #23
 800079e:	07ed      	lsls	r5, r5, #31
 80007a0:	4310      	orrs	r0, r2
 80007a2:	4328      	orrs	r0, r5
 80007a4:	bce0      	pop	{r5, r6, r7}
 80007a6:	46ba      	mov	sl, r7
 80007a8:	46b1      	mov	r9, r6
 80007aa:	46a8      	mov	r8, r5
 80007ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ae:	000d      	movs	r5, r1
 80007b0:	2000      	movs	r0, #0
 80007b2:	2200      	movs	r2, #0
 80007b4:	e7f2      	b.n	800079c <__aeabi_fdiv+0x104>
 80007b6:	4653      	mov	r3, sl
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d0ed      	beq.n	8000798 <__aeabi_fdiv+0x100>
 80007bc:	2b03      	cmp	r3, #3
 80007be:	d033      	beq.n	8000828 <__aeabi_fdiv+0x190>
 80007c0:	46a0      	mov	r8, r4
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d105      	bne.n	80007d2 <__aeabi_fdiv+0x13a>
 80007c6:	2000      	movs	r0, #0
 80007c8:	2200      	movs	r2, #0
 80007ca:	e7e7      	b.n	800079c <__aeabi_fdiv+0x104>
 80007cc:	0035      	movs	r5, r6
 80007ce:	2803      	cmp	r0, #3
 80007d0:	d07a      	beq.n	80008c8 <__aeabi_fdiv+0x230>
 80007d2:	003b      	movs	r3, r7
 80007d4:	337f      	adds	r3, #127	@ 0x7f
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	dd2d      	ble.n	8000836 <__aeabi_fdiv+0x19e>
 80007da:	4642      	mov	r2, r8
 80007dc:	0752      	lsls	r2, r2, #29
 80007de:	d007      	beq.n	80007f0 <__aeabi_fdiv+0x158>
 80007e0:	220f      	movs	r2, #15
 80007e2:	4641      	mov	r1, r8
 80007e4:	400a      	ands	r2, r1
 80007e6:	2a04      	cmp	r2, #4
 80007e8:	d002      	beq.n	80007f0 <__aeabi_fdiv+0x158>
 80007ea:	2204      	movs	r2, #4
 80007ec:	4694      	mov	ip, r2
 80007ee:	44e0      	add	r8, ip
 80007f0:	4642      	mov	r2, r8
 80007f2:	0112      	lsls	r2, r2, #4
 80007f4:	d505      	bpl.n	8000802 <__aeabi_fdiv+0x16a>
 80007f6:	4642      	mov	r2, r8
 80007f8:	4b36      	ldr	r3, [pc, #216]	@ (80008d4 <__aeabi_fdiv+0x23c>)
 80007fa:	401a      	ands	r2, r3
 80007fc:	003b      	movs	r3, r7
 80007fe:	4690      	mov	r8, r2
 8000800:	3380      	adds	r3, #128	@ 0x80
 8000802:	2bfe      	cmp	r3, #254	@ 0xfe
 8000804:	dcc8      	bgt.n	8000798 <__aeabi_fdiv+0x100>
 8000806:	4642      	mov	r2, r8
 8000808:	0192      	lsls	r2, r2, #6
 800080a:	0a52      	lsrs	r2, r2, #9
 800080c:	b2d8      	uxtb	r0, r3
 800080e:	e7c5      	b.n	800079c <__aeabi_fdiv+0x104>
 8000810:	2280      	movs	r2, #128	@ 0x80
 8000812:	2500      	movs	r5, #0
 8000814:	20ff      	movs	r0, #255	@ 0xff
 8000816:	03d2      	lsls	r2, r2, #15
 8000818:	e7c0      	b.n	800079c <__aeabi_fdiv+0x104>
 800081a:	2280      	movs	r2, #128	@ 0x80
 800081c:	03d2      	lsls	r2, r2, #15
 800081e:	4214      	tst	r4, r2
 8000820:	d002      	beq.n	8000828 <__aeabi_fdiv+0x190>
 8000822:	4643      	mov	r3, r8
 8000824:	4213      	tst	r3, r2
 8000826:	d049      	beq.n	80008bc <__aeabi_fdiv+0x224>
 8000828:	2280      	movs	r2, #128	@ 0x80
 800082a:	03d2      	lsls	r2, r2, #15
 800082c:	4322      	orrs	r2, r4
 800082e:	0252      	lsls	r2, r2, #9
 8000830:	20ff      	movs	r0, #255	@ 0xff
 8000832:	0a52      	lsrs	r2, r2, #9
 8000834:	e7b2      	b.n	800079c <__aeabi_fdiv+0x104>
 8000836:	2201      	movs	r2, #1
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	2b1b      	cmp	r3, #27
 800083c:	dcc3      	bgt.n	80007c6 <__aeabi_fdiv+0x12e>
 800083e:	4642      	mov	r2, r8
 8000840:	40da      	lsrs	r2, r3
 8000842:	4643      	mov	r3, r8
 8000844:	379e      	adds	r7, #158	@ 0x9e
 8000846:	40bb      	lsls	r3, r7
 8000848:	1e59      	subs	r1, r3, #1
 800084a:	418b      	sbcs	r3, r1
 800084c:	431a      	orrs	r2, r3
 800084e:	0753      	lsls	r3, r2, #29
 8000850:	d004      	beq.n	800085c <__aeabi_fdiv+0x1c4>
 8000852:	230f      	movs	r3, #15
 8000854:	4013      	ands	r3, r2
 8000856:	2b04      	cmp	r3, #4
 8000858:	d000      	beq.n	800085c <__aeabi_fdiv+0x1c4>
 800085a:	3204      	adds	r2, #4
 800085c:	0153      	lsls	r3, r2, #5
 800085e:	d529      	bpl.n	80008b4 <__aeabi_fdiv+0x21c>
 8000860:	2001      	movs	r0, #1
 8000862:	2200      	movs	r2, #0
 8000864:	e79a      	b.n	800079c <__aeabi_fdiv+0x104>
 8000866:	4642      	mov	r2, r8
 8000868:	0163      	lsls	r3, r4, #5
 800086a:	0155      	lsls	r5, r2, #5
 800086c:	42ab      	cmp	r3, r5
 800086e:	d215      	bcs.n	800089c <__aeabi_fdiv+0x204>
 8000870:	201b      	movs	r0, #27
 8000872:	2200      	movs	r2, #0
 8000874:	3f01      	subs	r7, #1
 8000876:	2601      	movs	r6, #1
 8000878:	001c      	movs	r4, r3
 800087a:	0052      	lsls	r2, r2, #1
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	2c00      	cmp	r4, #0
 8000880:	db01      	blt.n	8000886 <__aeabi_fdiv+0x1ee>
 8000882:	429d      	cmp	r5, r3
 8000884:	d801      	bhi.n	800088a <__aeabi_fdiv+0x1f2>
 8000886:	1b5b      	subs	r3, r3, r5
 8000888:	4332      	orrs	r2, r6
 800088a:	3801      	subs	r0, #1
 800088c:	2800      	cmp	r0, #0
 800088e:	d1f3      	bne.n	8000878 <__aeabi_fdiv+0x1e0>
 8000890:	1e58      	subs	r0, r3, #1
 8000892:	4183      	sbcs	r3, r0
 8000894:	4313      	orrs	r3, r2
 8000896:	4698      	mov	r8, r3
 8000898:	000d      	movs	r5, r1
 800089a:	e79a      	b.n	80007d2 <__aeabi_fdiv+0x13a>
 800089c:	201a      	movs	r0, #26
 800089e:	2201      	movs	r2, #1
 80008a0:	1b5b      	subs	r3, r3, r5
 80008a2:	e7e8      	b.n	8000876 <__aeabi_fdiv+0x1de>
 80008a4:	3b02      	subs	r3, #2
 80008a6:	425a      	negs	r2, r3
 80008a8:	4153      	adcs	r3, r2
 80008aa:	425b      	negs	r3, r3
 80008ac:	0035      	movs	r5, r6
 80008ae:	2200      	movs	r2, #0
 80008b0:	b2d8      	uxtb	r0, r3
 80008b2:	e773      	b.n	800079c <__aeabi_fdiv+0x104>
 80008b4:	0192      	lsls	r2, r2, #6
 80008b6:	2000      	movs	r0, #0
 80008b8:	0a52      	lsrs	r2, r2, #9
 80008ba:	e76f      	b.n	800079c <__aeabi_fdiv+0x104>
 80008bc:	431a      	orrs	r2, r3
 80008be:	0252      	lsls	r2, r2, #9
 80008c0:	0035      	movs	r5, r6
 80008c2:	20ff      	movs	r0, #255	@ 0xff
 80008c4:	0a52      	lsrs	r2, r2, #9
 80008c6:	e769      	b.n	800079c <__aeabi_fdiv+0x104>
 80008c8:	4644      	mov	r4, r8
 80008ca:	e7ad      	b.n	8000828 <__aeabi_fdiv+0x190>
 80008cc:	08009790 	.word	0x08009790
 80008d0:	080097d0 	.word	0x080097d0
 80008d4:	f7ffffff 	.word	0xf7ffffff

080008d8 <__aeabi_fsub>:
 80008d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008da:	4647      	mov	r7, r8
 80008dc:	46ce      	mov	lr, r9
 80008de:	024e      	lsls	r6, r1, #9
 80008e0:	0243      	lsls	r3, r0, #9
 80008e2:	0045      	lsls	r5, r0, #1
 80008e4:	0a72      	lsrs	r2, r6, #9
 80008e6:	0fc4      	lsrs	r4, r0, #31
 80008e8:	0048      	lsls	r0, r1, #1
 80008ea:	b580      	push	{r7, lr}
 80008ec:	4694      	mov	ip, r2
 80008ee:	0a5f      	lsrs	r7, r3, #9
 80008f0:	0e2d      	lsrs	r5, r5, #24
 80008f2:	099b      	lsrs	r3, r3, #6
 80008f4:	0e00      	lsrs	r0, r0, #24
 80008f6:	0fc9      	lsrs	r1, r1, #31
 80008f8:	09b6      	lsrs	r6, r6, #6
 80008fa:	28ff      	cmp	r0, #255	@ 0xff
 80008fc:	d024      	beq.n	8000948 <__aeabi_fsub+0x70>
 80008fe:	2201      	movs	r2, #1
 8000900:	4051      	eors	r1, r2
 8000902:	1a2a      	subs	r2, r5, r0
 8000904:	428c      	cmp	r4, r1
 8000906:	d00f      	beq.n	8000928 <__aeabi_fsub+0x50>
 8000908:	2a00      	cmp	r2, #0
 800090a:	dc00      	bgt.n	800090e <__aeabi_fsub+0x36>
 800090c:	e16a      	b.n	8000be4 <__aeabi_fsub+0x30c>
 800090e:	2800      	cmp	r0, #0
 8000910:	d135      	bne.n	800097e <__aeabi_fsub+0xa6>
 8000912:	2e00      	cmp	r6, #0
 8000914:	d100      	bne.n	8000918 <__aeabi_fsub+0x40>
 8000916:	e0a2      	b.n	8000a5e <__aeabi_fsub+0x186>
 8000918:	1e51      	subs	r1, r2, #1
 800091a:	2a01      	cmp	r2, #1
 800091c:	d100      	bne.n	8000920 <__aeabi_fsub+0x48>
 800091e:	e124      	b.n	8000b6a <__aeabi_fsub+0x292>
 8000920:	2aff      	cmp	r2, #255	@ 0xff
 8000922:	d021      	beq.n	8000968 <__aeabi_fsub+0x90>
 8000924:	000a      	movs	r2, r1
 8000926:	e02f      	b.n	8000988 <__aeabi_fsub+0xb0>
 8000928:	2a00      	cmp	r2, #0
 800092a:	dc00      	bgt.n	800092e <__aeabi_fsub+0x56>
 800092c:	e167      	b.n	8000bfe <__aeabi_fsub+0x326>
 800092e:	2800      	cmp	r0, #0
 8000930:	d05e      	beq.n	80009f0 <__aeabi_fsub+0x118>
 8000932:	2dff      	cmp	r5, #255	@ 0xff
 8000934:	d018      	beq.n	8000968 <__aeabi_fsub+0x90>
 8000936:	2180      	movs	r1, #128	@ 0x80
 8000938:	04c9      	lsls	r1, r1, #19
 800093a:	430e      	orrs	r6, r1
 800093c:	2a1b      	cmp	r2, #27
 800093e:	dc00      	bgt.n	8000942 <__aeabi_fsub+0x6a>
 8000940:	e076      	b.n	8000a30 <__aeabi_fsub+0x158>
 8000942:	002a      	movs	r2, r5
 8000944:	3301      	adds	r3, #1
 8000946:	e032      	b.n	80009ae <__aeabi_fsub+0xd6>
 8000948:	002a      	movs	r2, r5
 800094a:	3aff      	subs	r2, #255	@ 0xff
 800094c:	4691      	mov	r9, r2
 800094e:	2e00      	cmp	r6, #0
 8000950:	d042      	beq.n	80009d8 <__aeabi_fsub+0x100>
 8000952:	428c      	cmp	r4, r1
 8000954:	d055      	beq.n	8000a02 <__aeabi_fsub+0x12a>
 8000956:	464a      	mov	r2, r9
 8000958:	2a00      	cmp	r2, #0
 800095a:	d100      	bne.n	800095e <__aeabi_fsub+0x86>
 800095c:	e09c      	b.n	8000a98 <__aeabi_fsub+0x1c0>
 800095e:	2d00      	cmp	r5, #0
 8000960:	d100      	bne.n	8000964 <__aeabi_fsub+0x8c>
 8000962:	e077      	b.n	8000a54 <__aeabi_fsub+0x17c>
 8000964:	000c      	movs	r4, r1
 8000966:	0033      	movs	r3, r6
 8000968:	08db      	lsrs	r3, r3, #3
 800096a:	2b00      	cmp	r3, #0
 800096c:	d100      	bne.n	8000970 <__aeabi_fsub+0x98>
 800096e:	e06e      	b.n	8000a4e <__aeabi_fsub+0x176>
 8000970:	2280      	movs	r2, #128	@ 0x80
 8000972:	03d2      	lsls	r2, r2, #15
 8000974:	4313      	orrs	r3, r2
 8000976:	025b      	lsls	r3, r3, #9
 8000978:	20ff      	movs	r0, #255	@ 0xff
 800097a:	0a5b      	lsrs	r3, r3, #9
 800097c:	e024      	b.n	80009c8 <__aeabi_fsub+0xf0>
 800097e:	2dff      	cmp	r5, #255	@ 0xff
 8000980:	d0f2      	beq.n	8000968 <__aeabi_fsub+0x90>
 8000982:	2180      	movs	r1, #128	@ 0x80
 8000984:	04c9      	lsls	r1, r1, #19
 8000986:	430e      	orrs	r6, r1
 8000988:	2101      	movs	r1, #1
 800098a:	2a1b      	cmp	r2, #27
 800098c:	dc08      	bgt.n	80009a0 <__aeabi_fsub+0xc8>
 800098e:	0031      	movs	r1, r6
 8000990:	2020      	movs	r0, #32
 8000992:	40d1      	lsrs	r1, r2
 8000994:	1a82      	subs	r2, r0, r2
 8000996:	4096      	lsls	r6, r2
 8000998:	0032      	movs	r2, r6
 800099a:	1e50      	subs	r0, r2, #1
 800099c:	4182      	sbcs	r2, r0
 800099e:	4311      	orrs	r1, r2
 80009a0:	1a5b      	subs	r3, r3, r1
 80009a2:	015a      	lsls	r2, r3, #5
 80009a4:	d460      	bmi.n	8000a68 <__aeabi_fsub+0x190>
 80009a6:	2107      	movs	r1, #7
 80009a8:	002a      	movs	r2, r5
 80009aa:	4019      	ands	r1, r3
 80009ac:	d057      	beq.n	8000a5e <__aeabi_fsub+0x186>
 80009ae:	210f      	movs	r1, #15
 80009b0:	4019      	ands	r1, r3
 80009b2:	2904      	cmp	r1, #4
 80009b4:	d000      	beq.n	80009b8 <__aeabi_fsub+0xe0>
 80009b6:	3304      	adds	r3, #4
 80009b8:	0159      	lsls	r1, r3, #5
 80009ba:	d550      	bpl.n	8000a5e <__aeabi_fsub+0x186>
 80009bc:	1c50      	adds	r0, r2, #1
 80009be:	2afe      	cmp	r2, #254	@ 0xfe
 80009c0:	d045      	beq.n	8000a4e <__aeabi_fsub+0x176>
 80009c2:	019b      	lsls	r3, r3, #6
 80009c4:	b2c0      	uxtb	r0, r0
 80009c6:	0a5b      	lsrs	r3, r3, #9
 80009c8:	05c0      	lsls	r0, r0, #23
 80009ca:	4318      	orrs	r0, r3
 80009cc:	07e4      	lsls	r4, r4, #31
 80009ce:	4320      	orrs	r0, r4
 80009d0:	bcc0      	pop	{r6, r7}
 80009d2:	46b9      	mov	r9, r7
 80009d4:	46b0      	mov	r8, r6
 80009d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009d8:	2201      	movs	r2, #1
 80009da:	4051      	eors	r1, r2
 80009dc:	428c      	cmp	r4, r1
 80009de:	d1ba      	bne.n	8000956 <__aeabi_fsub+0x7e>
 80009e0:	464a      	mov	r2, r9
 80009e2:	2a00      	cmp	r2, #0
 80009e4:	d010      	beq.n	8000a08 <__aeabi_fsub+0x130>
 80009e6:	2d00      	cmp	r5, #0
 80009e8:	d100      	bne.n	80009ec <__aeabi_fsub+0x114>
 80009ea:	e098      	b.n	8000b1e <__aeabi_fsub+0x246>
 80009ec:	2300      	movs	r3, #0
 80009ee:	e7bb      	b.n	8000968 <__aeabi_fsub+0x90>
 80009f0:	2e00      	cmp	r6, #0
 80009f2:	d034      	beq.n	8000a5e <__aeabi_fsub+0x186>
 80009f4:	1e51      	subs	r1, r2, #1
 80009f6:	2a01      	cmp	r2, #1
 80009f8:	d06e      	beq.n	8000ad8 <__aeabi_fsub+0x200>
 80009fa:	2aff      	cmp	r2, #255	@ 0xff
 80009fc:	d0b4      	beq.n	8000968 <__aeabi_fsub+0x90>
 80009fe:	000a      	movs	r2, r1
 8000a00:	e79c      	b.n	800093c <__aeabi_fsub+0x64>
 8000a02:	2a00      	cmp	r2, #0
 8000a04:	d000      	beq.n	8000a08 <__aeabi_fsub+0x130>
 8000a06:	e088      	b.n	8000b1a <__aeabi_fsub+0x242>
 8000a08:	20fe      	movs	r0, #254	@ 0xfe
 8000a0a:	1c6a      	adds	r2, r5, #1
 8000a0c:	4210      	tst	r0, r2
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_fsub+0x13a>
 8000a10:	e092      	b.n	8000b38 <__aeabi_fsub+0x260>
 8000a12:	2d00      	cmp	r5, #0
 8000a14:	d000      	beq.n	8000a18 <__aeabi_fsub+0x140>
 8000a16:	e0a4      	b.n	8000b62 <__aeabi_fsub+0x28a>
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_fsub+0x146>
 8000a1c:	e0cb      	b.n	8000bb6 <__aeabi_fsub+0x2de>
 8000a1e:	2e00      	cmp	r6, #0
 8000a20:	d000      	beq.n	8000a24 <__aeabi_fsub+0x14c>
 8000a22:	e0ca      	b.n	8000bba <__aeabi_fsub+0x2e2>
 8000a24:	2200      	movs	r2, #0
 8000a26:	08db      	lsrs	r3, r3, #3
 8000a28:	025b      	lsls	r3, r3, #9
 8000a2a:	0a5b      	lsrs	r3, r3, #9
 8000a2c:	b2d0      	uxtb	r0, r2
 8000a2e:	e7cb      	b.n	80009c8 <__aeabi_fsub+0xf0>
 8000a30:	0031      	movs	r1, r6
 8000a32:	2020      	movs	r0, #32
 8000a34:	40d1      	lsrs	r1, r2
 8000a36:	1a82      	subs	r2, r0, r2
 8000a38:	4096      	lsls	r6, r2
 8000a3a:	0032      	movs	r2, r6
 8000a3c:	1e50      	subs	r0, r2, #1
 8000a3e:	4182      	sbcs	r2, r0
 8000a40:	430a      	orrs	r2, r1
 8000a42:	189b      	adds	r3, r3, r2
 8000a44:	015a      	lsls	r2, r3, #5
 8000a46:	d5ae      	bpl.n	80009a6 <__aeabi_fsub+0xce>
 8000a48:	1c6a      	adds	r2, r5, #1
 8000a4a:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a4c:	d14a      	bne.n	8000ae4 <__aeabi_fsub+0x20c>
 8000a4e:	20ff      	movs	r0, #255	@ 0xff
 8000a50:	2300      	movs	r3, #0
 8000a52:	e7b9      	b.n	80009c8 <__aeabi_fsub+0xf0>
 8000a54:	22ff      	movs	r2, #255	@ 0xff
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d14b      	bne.n	8000af2 <__aeabi_fsub+0x21a>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	2aff      	cmp	r2, #255	@ 0xff
 8000a62:	d100      	bne.n	8000a66 <__aeabi_fsub+0x18e>
 8000a64:	e781      	b.n	800096a <__aeabi_fsub+0x92>
 8000a66:	e7df      	b.n	8000a28 <__aeabi_fsub+0x150>
 8000a68:	019f      	lsls	r7, r3, #6
 8000a6a:	09bf      	lsrs	r7, r7, #6
 8000a6c:	0038      	movs	r0, r7
 8000a6e:	f001 f967 	bl	8001d40 <__clzsi2>
 8000a72:	3805      	subs	r0, #5
 8000a74:	4087      	lsls	r7, r0
 8000a76:	4285      	cmp	r5, r0
 8000a78:	dc21      	bgt.n	8000abe <__aeabi_fsub+0x1e6>
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	2120      	movs	r1, #32
 8000a7e:	1b42      	subs	r2, r0, r5
 8000a80:	3201      	adds	r2, #1
 8000a82:	40d3      	lsrs	r3, r2
 8000a84:	1a8a      	subs	r2, r1, r2
 8000a86:	4097      	lsls	r7, r2
 8000a88:	1e7a      	subs	r2, r7, #1
 8000a8a:	4197      	sbcs	r7, r2
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	433b      	orrs	r3, r7
 8000a90:	0759      	lsls	r1, r3, #29
 8000a92:	d000      	beq.n	8000a96 <__aeabi_fsub+0x1be>
 8000a94:	e78b      	b.n	80009ae <__aeabi_fsub+0xd6>
 8000a96:	e78f      	b.n	80009b8 <__aeabi_fsub+0xe0>
 8000a98:	20fe      	movs	r0, #254	@ 0xfe
 8000a9a:	1c6a      	adds	r2, r5, #1
 8000a9c:	4210      	tst	r0, r2
 8000a9e:	d112      	bne.n	8000ac6 <__aeabi_fsub+0x1ee>
 8000aa0:	2d00      	cmp	r5, #0
 8000aa2:	d152      	bne.n	8000b4a <__aeabi_fsub+0x272>
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d07c      	beq.n	8000ba2 <__aeabi_fsub+0x2ca>
 8000aa8:	2e00      	cmp	r6, #0
 8000aaa:	d0bb      	beq.n	8000a24 <__aeabi_fsub+0x14c>
 8000aac:	1b9a      	subs	r2, r3, r6
 8000aae:	0150      	lsls	r0, r2, #5
 8000ab0:	d400      	bmi.n	8000ab4 <__aeabi_fsub+0x1dc>
 8000ab2:	e08b      	b.n	8000bcc <__aeabi_fsub+0x2f4>
 8000ab4:	2401      	movs	r4, #1
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	1af3      	subs	r3, r6, r3
 8000aba:	400c      	ands	r4, r1
 8000abc:	e7e8      	b.n	8000a90 <__aeabi_fsub+0x1b8>
 8000abe:	4b56      	ldr	r3, [pc, #344]	@ (8000c18 <__aeabi_fsub+0x340>)
 8000ac0:	1a2a      	subs	r2, r5, r0
 8000ac2:	403b      	ands	r3, r7
 8000ac4:	e7e4      	b.n	8000a90 <__aeabi_fsub+0x1b8>
 8000ac6:	1b9f      	subs	r7, r3, r6
 8000ac8:	017a      	lsls	r2, r7, #5
 8000aca:	d446      	bmi.n	8000b5a <__aeabi_fsub+0x282>
 8000acc:	2f00      	cmp	r7, #0
 8000ace:	d1cd      	bne.n	8000a6c <__aeabi_fsub+0x194>
 8000ad0:	2400      	movs	r4, #0
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	e777      	b.n	80009c8 <__aeabi_fsub+0xf0>
 8000ad8:	199b      	adds	r3, r3, r6
 8000ada:	2501      	movs	r5, #1
 8000adc:	3201      	adds	r2, #1
 8000ade:	0159      	lsls	r1, r3, #5
 8000ae0:	d400      	bmi.n	8000ae4 <__aeabi_fsub+0x20c>
 8000ae2:	e760      	b.n	80009a6 <__aeabi_fsub+0xce>
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	484d      	ldr	r0, [pc, #308]	@ (8000c1c <__aeabi_fsub+0x344>)
 8000ae8:	4019      	ands	r1, r3
 8000aea:	085b      	lsrs	r3, r3, #1
 8000aec:	4003      	ands	r3, r0
 8000aee:	430b      	orrs	r3, r1
 8000af0:	e7ce      	b.n	8000a90 <__aeabi_fsub+0x1b8>
 8000af2:	1e57      	subs	r7, r2, #1
 8000af4:	2a01      	cmp	r2, #1
 8000af6:	d05a      	beq.n	8000bae <__aeabi_fsub+0x2d6>
 8000af8:	000c      	movs	r4, r1
 8000afa:	2aff      	cmp	r2, #255	@ 0xff
 8000afc:	d033      	beq.n	8000b66 <__aeabi_fsub+0x28e>
 8000afe:	2201      	movs	r2, #1
 8000b00:	2f1b      	cmp	r7, #27
 8000b02:	dc07      	bgt.n	8000b14 <__aeabi_fsub+0x23c>
 8000b04:	2120      	movs	r1, #32
 8000b06:	1bc9      	subs	r1, r1, r7
 8000b08:	001a      	movs	r2, r3
 8000b0a:	408b      	lsls	r3, r1
 8000b0c:	40fa      	lsrs	r2, r7
 8000b0e:	1e59      	subs	r1, r3, #1
 8000b10:	418b      	sbcs	r3, r1
 8000b12:	431a      	orrs	r2, r3
 8000b14:	0005      	movs	r5, r0
 8000b16:	1ab3      	subs	r3, r6, r2
 8000b18:	e743      	b.n	80009a2 <__aeabi_fsub+0xca>
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d123      	bne.n	8000b66 <__aeabi_fsub+0x28e>
 8000b1e:	22ff      	movs	r2, #255	@ 0xff
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d09b      	beq.n	8000a5c <__aeabi_fsub+0x184>
 8000b24:	1e51      	subs	r1, r2, #1
 8000b26:	2a01      	cmp	r2, #1
 8000b28:	d0d6      	beq.n	8000ad8 <__aeabi_fsub+0x200>
 8000b2a:	2aff      	cmp	r2, #255	@ 0xff
 8000b2c:	d01b      	beq.n	8000b66 <__aeabi_fsub+0x28e>
 8000b2e:	291b      	cmp	r1, #27
 8000b30:	dd2c      	ble.n	8000b8c <__aeabi_fsub+0x2b4>
 8000b32:	0002      	movs	r2, r0
 8000b34:	1c73      	adds	r3, r6, #1
 8000b36:	e73a      	b.n	80009ae <__aeabi_fsub+0xd6>
 8000b38:	2aff      	cmp	r2, #255	@ 0xff
 8000b3a:	d088      	beq.n	8000a4e <__aeabi_fsub+0x176>
 8000b3c:	199b      	adds	r3, r3, r6
 8000b3e:	085b      	lsrs	r3, r3, #1
 8000b40:	0759      	lsls	r1, r3, #29
 8000b42:	d000      	beq.n	8000b46 <__aeabi_fsub+0x26e>
 8000b44:	e733      	b.n	80009ae <__aeabi_fsub+0xd6>
 8000b46:	08db      	lsrs	r3, r3, #3
 8000b48:	e76e      	b.n	8000a28 <__aeabi_fsub+0x150>
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d110      	bne.n	8000b70 <__aeabi_fsub+0x298>
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d043      	beq.n	8000bda <__aeabi_fsub+0x302>
 8000b52:	2401      	movs	r4, #1
 8000b54:	0033      	movs	r3, r6
 8000b56:	400c      	ands	r4, r1
 8000b58:	e706      	b.n	8000968 <__aeabi_fsub+0x90>
 8000b5a:	2401      	movs	r4, #1
 8000b5c:	1af7      	subs	r7, r6, r3
 8000b5e:	400c      	ands	r4, r1
 8000b60:	e784      	b.n	8000a6c <__aeabi_fsub+0x194>
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d104      	bne.n	8000b70 <__aeabi_fsub+0x298>
 8000b66:	0033      	movs	r3, r6
 8000b68:	e6fe      	b.n	8000968 <__aeabi_fsub+0x90>
 8000b6a:	2501      	movs	r5, #1
 8000b6c:	1b9b      	subs	r3, r3, r6
 8000b6e:	e718      	b.n	80009a2 <__aeabi_fsub+0xca>
 8000b70:	2e00      	cmp	r6, #0
 8000b72:	d100      	bne.n	8000b76 <__aeabi_fsub+0x29e>
 8000b74:	e6f8      	b.n	8000968 <__aeabi_fsub+0x90>
 8000b76:	2280      	movs	r2, #128	@ 0x80
 8000b78:	03d2      	lsls	r2, r2, #15
 8000b7a:	4297      	cmp	r7, r2
 8000b7c:	d304      	bcc.n	8000b88 <__aeabi_fsub+0x2b0>
 8000b7e:	4594      	cmp	ip, r2
 8000b80:	d202      	bcs.n	8000b88 <__aeabi_fsub+0x2b0>
 8000b82:	2401      	movs	r4, #1
 8000b84:	0033      	movs	r3, r6
 8000b86:	400c      	ands	r4, r1
 8000b88:	08db      	lsrs	r3, r3, #3
 8000b8a:	e6f1      	b.n	8000970 <__aeabi_fsub+0x98>
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	2520      	movs	r5, #32
 8000b90:	40ca      	lsrs	r2, r1
 8000b92:	1a69      	subs	r1, r5, r1
 8000b94:	408b      	lsls	r3, r1
 8000b96:	1e59      	subs	r1, r3, #1
 8000b98:	418b      	sbcs	r3, r1
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	0005      	movs	r5, r0
 8000b9e:	199b      	adds	r3, r3, r6
 8000ba0:	e750      	b.n	8000a44 <__aeabi_fsub+0x16c>
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d094      	beq.n	8000ad0 <__aeabi_fsub+0x1f8>
 8000ba6:	2401      	movs	r4, #1
 8000ba8:	0033      	movs	r3, r6
 8000baa:	400c      	ands	r4, r1
 8000bac:	e73a      	b.n	8000a24 <__aeabi_fsub+0x14c>
 8000bae:	000c      	movs	r4, r1
 8000bb0:	2501      	movs	r5, #1
 8000bb2:	1af3      	subs	r3, r6, r3
 8000bb4:	e6f5      	b.n	80009a2 <__aeabi_fsub+0xca>
 8000bb6:	0033      	movs	r3, r6
 8000bb8:	e734      	b.n	8000a24 <__aeabi_fsub+0x14c>
 8000bba:	199b      	adds	r3, r3, r6
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	0159      	lsls	r1, r3, #5
 8000bc0:	d5c1      	bpl.n	8000b46 <__aeabi_fsub+0x26e>
 8000bc2:	4a15      	ldr	r2, [pc, #84]	@ (8000c18 <__aeabi_fsub+0x340>)
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	2201      	movs	r2, #1
 8000bca:	e72d      	b.n	8000a28 <__aeabi_fsub+0x150>
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	d100      	bne.n	8000bd2 <__aeabi_fsub+0x2fa>
 8000bd0:	e77e      	b.n	8000ad0 <__aeabi_fsub+0x1f8>
 8000bd2:	0013      	movs	r3, r2
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	08db      	lsrs	r3, r3, #3
 8000bd8:	e726      	b.n	8000a28 <__aeabi_fsub+0x150>
 8000bda:	2380      	movs	r3, #128	@ 0x80
 8000bdc:	2400      	movs	r4, #0
 8000bde:	20ff      	movs	r0, #255	@ 0xff
 8000be0:	03db      	lsls	r3, r3, #15
 8000be2:	e6f1      	b.n	80009c8 <__aeabi_fsub+0xf0>
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	d100      	bne.n	8000bea <__aeabi_fsub+0x312>
 8000be8:	e756      	b.n	8000a98 <__aeabi_fsub+0x1c0>
 8000bea:	1b47      	subs	r7, r0, r5
 8000bec:	003a      	movs	r2, r7
 8000bee:	2d00      	cmp	r5, #0
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_fsub+0x31c>
 8000bf2:	e730      	b.n	8000a56 <__aeabi_fsub+0x17e>
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	04d2      	lsls	r2, r2, #19
 8000bf8:	000c      	movs	r4, r1
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	e77f      	b.n	8000afe <__aeabi_fsub+0x226>
 8000bfe:	2a00      	cmp	r2, #0
 8000c00:	d100      	bne.n	8000c04 <__aeabi_fsub+0x32c>
 8000c02:	e701      	b.n	8000a08 <__aeabi_fsub+0x130>
 8000c04:	1b41      	subs	r1, r0, r5
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	d101      	bne.n	8000c0e <__aeabi_fsub+0x336>
 8000c0a:	000a      	movs	r2, r1
 8000c0c:	e788      	b.n	8000b20 <__aeabi_fsub+0x248>
 8000c0e:	2280      	movs	r2, #128	@ 0x80
 8000c10:	04d2      	lsls	r2, r2, #19
 8000c12:	4313      	orrs	r3, r2
 8000c14:	e78b      	b.n	8000b2e <__aeabi_fsub+0x256>
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	fbffffff 	.word	0xfbffffff
 8000c1c:	7dffffff 	.word	0x7dffffff

08000c20 <__aeabi_f2iz>:
 8000c20:	0241      	lsls	r1, r0, #9
 8000c22:	0042      	lsls	r2, r0, #1
 8000c24:	0fc3      	lsrs	r3, r0, #31
 8000c26:	0a49      	lsrs	r1, r1, #9
 8000c28:	2000      	movs	r0, #0
 8000c2a:	0e12      	lsrs	r2, r2, #24
 8000c2c:	2a7e      	cmp	r2, #126	@ 0x7e
 8000c2e:	dd03      	ble.n	8000c38 <__aeabi_f2iz+0x18>
 8000c30:	2a9d      	cmp	r2, #157	@ 0x9d
 8000c32:	dd02      	ble.n	8000c3a <__aeabi_f2iz+0x1a>
 8000c34:	4a09      	ldr	r2, [pc, #36]	@ (8000c5c <__aeabi_f2iz+0x3c>)
 8000c36:	1898      	adds	r0, r3, r2
 8000c38:	4770      	bx	lr
 8000c3a:	2080      	movs	r0, #128	@ 0x80
 8000c3c:	0400      	lsls	r0, r0, #16
 8000c3e:	4301      	orrs	r1, r0
 8000c40:	2a95      	cmp	r2, #149	@ 0x95
 8000c42:	dc07      	bgt.n	8000c54 <__aeabi_f2iz+0x34>
 8000c44:	2096      	movs	r0, #150	@ 0x96
 8000c46:	1a82      	subs	r2, r0, r2
 8000c48:	40d1      	lsrs	r1, r2
 8000c4a:	4248      	negs	r0, r1
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d1f3      	bne.n	8000c38 <__aeabi_f2iz+0x18>
 8000c50:	0008      	movs	r0, r1
 8000c52:	e7f1      	b.n	8000c38 <__aeabi_f2iz+0x18>
 8000c54:	3a96      	subs	r2, #150	@ 0x96
 8000c56:	4091      	lsls	r1, r2
 8000c58:	e7f7      	b.n	8000c4a <__aeabi_f2iz+0x2a>
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	7fffffff 	.word	0x7fffffff

08000c60 <__aeabi_ddiv>:
 8000c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c62:	46de      	mov	lr, fp
 8000c64:	4645      	mov	r5, r8
 8000c66:	4657      	mov	r7, sl
 8000c68:	464e      	mov	r6, r9
 8000c6a:	b5e0      	push	{r5, r6, r7, lr}
 8000c6c:	b087      	sub	sp, #28
 8000c6e:	9200      	str	r2, [sp, #0]
 8000c70:	9301      	str	r3, [sp, #4]
 8000c72:	030b      	lsls	r3, r1, #12
 8000c74:	0b1b      	lsrs	r3, r3, #12
 8000c76:	469b      	mov	fp, r3
 8000c78:	0fca      	lsrs	r2, r1, #31
 8000c7a:	004b      	lsls	r3, r1, #1
 8000c7c:	0004      	movs	r4, r0
 8000c7e:	4680      	mov	r8, r0
 8000c80:	0d5b      	lsrs	r3, r3, #21
 8000c82:	9202      	str	r2, [sp, #8]
 8000c84:	d100      	bne.n	8000c88 <__aeabi_ddiv+0x28>
 8000c86:	e16a      	b.n	8000f5e <__aeabi_ddiv+0x2fe>
 8000c88:	4ad4      	ldr	r2, [pc, #848]	@ (8000fdc <__aeabi_ddiv+0x37c>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_ddiv+0x30>
 8000c8e:	e18c      	b.n	8000faa <__aeabi_ddiv+0x34a>
 8000c90:	4659      	mov	r1, fp
 8000c92:	0f42      	lsrs	r2, r0, #29
 8000c94:	00c9      	lsls	r1, r1, #3
 8000c96:	430a      	orrs	r2, r1
 8000c98:	2180      	movs	r1, #128	@ 0x80
 8000c9a:	0409      	lsls	r1, r1, #16
 8000c9c:	4311      	orrs	r1, r2
 8000c9e:	00c2      	lsls	r2, r0, #3
 8000ca0:	4690      	mov	r8, r2
 8000ca2:	4acf      	ldr	r2, [pc, #828]	@ (8000fe0 <__aeabi_ddiv+0x380>)
 8000ca4:	4689      	mov	r9, r1
 8000ca6:	4692      	mov	sl, r2
 8000ca8:	449a      	add	sl, r3
 8000caa:	2300      	movs	r3, #0
 8000cac:	2400      	movs	r4, #0
 8000cae:	9303      	str	r3, [sp, #12]
 8000cb0:	9e00      	ldr	r6, [sp, #0]
 8000cb2:	9f01      	ldr	r7, [sp, #4]
 8000cb4:	033b      	lsls	r3, r7, #12
 8000cb6:	0b1b      	lsrs	r3, r3, #12
 8000cb8:	469b      	mov	fp, r3
 8000cba:	007b      	lsls	r3, r7, #1
 8000cbc:	0030      	movs	r0, r6
 8000cbe:	0d5b      	lsrs	r3, r3, #21
 8000cc0:	0ffd      	lsrs	r5, r7, #31
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d100      	bne.n	8000cc8 <__aeabi_ddiv+0x68>
 8000cc6:	e128      	b.n	8000f1a <__aeabi_ddiv+0x2ba>
 8000cc8:	4ac4      	ldr	r2, [pc, #784]	@ (8000fdc <__aeabi_ddiv+0x37c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d100      	bne.n	8000cd0 <__aeabi_ddiv+0x70>
 8000cce:	e177      	b.n	8000fc0 <__aeabi_ddiv+0x360>
 8000cd0:	4659      	mov	r1, fp
 8000cd2:	0f72      	lsrs	r2, r6, #29
 8000cd4:	00c9      	lsls	r1, r1, #3
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	2180      	movs	r1, #128	@ 0x80
 8000cda:	0409      	lsls	r1, r1, #16
 8000cdc:	4311      	orrs	r1, r2
 8000cde:	468b      	mov	fp, r1
 8000ce0:	49bf      	ldr	r1, [pc, #764]	@ (8000fe0 <__aeabi_ddiv+0x380>)
 8000ce2:	00f2      	lsls	r2, r6, #3
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	4651      	mov	r1, sl
 8000ce8:	4463      	add	r3, ip
 8000cea:	1acb      	subs	r3, r1, r3
 8000cec:	469a      	mov	sl, r3
 8000cee:	2300      	movs	r3, #0
 8000cf0:	9e02      	ldr	r6, [sp, #8]
 8000cf2:	406e      	eors	r6, r5
 8000cf4:	2c0f      	cmp	r4, #15
 8000cf6:	d827      	bhi.n	8000d48 <__aeabi_ddiv+0xe8>
 8000cf8:	49ba      	ldr	r1, [pc, #744]	@ (8000fe4 <__aeabi_ddiv+0x384>)
 8000cfa:	00a4      	lsls	r4, r4, #2
 8000cfc:	5909      	ldr	r1, [r1, r4]
 8000cfe:	468f      	mov	pc, r1
 8000d00:	46cb      	mov	fp, r9
 8000d02:	4642      	mov	r2, r8
 8000d04:	9e02      	ldr	r6, [sp, #8]
 8000d06:	9b03      	ldr	r3, [sp, #12]
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d016      	beq.n	8000d3a <__aeabi_ddiv+0xda>
 8000d0c:	2b03      	cmp	r3, #3
 8000d0e:	d100      	bne.n	8000d12 <__aeabi_ddiv+0xb2>
 8000d10:	e2a6      	b.n	8001260 <__aeabi_ddiv+0x600>
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d000      	beq.n	8000d18 <__aeabi_ddiv+0xb8>
 8000d16:	e0df      	b.n	8000ed8 <__aeabi_ddiv+0x278>
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	2400      	movs	r4, #0
 8000d1e:	4690      	mov	r8, r2
 8000d20:	051b      	lsls	r3, r3, #20
 8000d22:	4323      	orrs	r3, r4
 8000d24:	07f6      	lsls	r6, r6, #31
 8000d26:	4333      	orrs	r3, r6
 8000d28:	4640      	mov	r0, r8
 8000d2a:	0019      	movs	r1, r3
 8000d2c:	b007      	add	sp, #28
 8000d2e:	bcf0      	pop	{r4, r5, r6, r7}
 8000d30:	46bb      	mov	fp, r7
 8000d32:	46b2      	mov	sl, r6
 8000d34:	46a9      	mov	r9, r5
 8000d36:	46a0      	mov	r8, r4
 8000d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2400      	movs	r4, #0
 8000d3e:	4690      	mov	r8, r2
 8000d40:	4ba6      	ldr	r3, [pc, #664]	@ (8000fdc <__aeabi_ddiv+0x37c>)
 8000d42:	e7ed      	b.n	8000d20 <__aeabi_ddiv+0xc0>
 8000d44:	002e      	movs	r6, r5
 8000d46:	e7df      	b.n	8000d08 <__aeabi_ddiv+0xa8>
 8000d48:	45cb      	cmp	fp, r9
 8000d4a:	d200      	bcs.n	8000d4e <__aeabi_ddiv+0xee>
 8000d4c:	e1d4      	b.n	80010f8 <__aeabi_ddiv+0x498>
 8000d4e:	d100      	bne.n	8000d52 <__aeabi_ddiv+0xf2>
 8000d50:	e1cf      	b.n	80010f2 <__aeabi_ddiv+0x492>
 8000d52:	2301      	movs	r3, #1
 8000d54:	425b      	negs	r3, r3
 8000d56:	469c      	mov	ip, r3
 8000d58:	4644      	mov	r4, r8
 8000d5a:	4648      	mov	r0, r9
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	44e2      	add	sl, ip
 8000d60:	465b      	mov	r3, fp
 8000d62:	0e15      	lsrs	r5, r2, #24
 8000d64:	021b      	lsls	r3, r3, #8
 8000d66:	431d      	orrs	r5, r3
 8000d68:	0c19      	lsrs	r1, r3, #16
 8000d6a:	042b      	lsls	r3, r5, #16
 8000d6c:	0212      	lsls	r2, r2, #8
 8000d6e:	9500      	str	r5, [sp, #0]
 8000d70:	0c1d      	lsrs	r5, r3, #16
 8000d72:	4691      	mov	r9, r2
 8000d74:	9102      	str	r1, [sp, #8]
 8000d76:	9503      	str	r5, [sp, #12]
 8000d78:	f7ff fa5c 	bl	8000234 <__aeabi_uidivmod>
 8000d7c:	0002      	movs	r2, r0
 8000d7e:	436a      	muls	r2, r5
 8000d80:	040b      	lsls	r3, r1, #16
 8000d82:	0c21      	lsrs	r1, r4, #16
 8000d84:	4680      	mov	r8, r0
 8000d86:	4319      	orrs	r1, r3
 8000d88:	428a      	cmp	r2, r1
 8000d8a:	d909      	bls.n	8000da0 <__aeabi_ddiv+0x140>
 8000d8c:	9d00      	ldr	r5, [sp, #0]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	46ac      	mov	ip, r5
 8000d92:	425b      	negs	r3, r3
 8000d94:	4461      	add	r1, ip
 8000d96:	469c      	mov	ip, r3
 8000d98:	44e0      	add	r8, ip
 8000d9a:	428d      	cmp	r5, r1
 8000d9c:	d800      	bhi.n	8000da0 <__aeabi_ddiv+0x140>
 8000d9e:	e1fb      	b.n	8001198 <__aeabi_ddiv+0x538>
 8000da0:	1a88      	subs	r0, r1, r2
 8000da2:	9902      	ldr	r1, [sp, #8]
 8000da4:	f7ff fa46 	bl	8000234 <__aeabi_uidivmod>
 8000da8:	9a03      	ldr	r2, [sp, #12]
 8000daa:	0424      	lsls	r4, r4, #16
 8000dac:	4342      	muls	r2, r0
 8000dae:	0409      	lsls	r1, r1, #16
 8000db0:	0c24      	lsrs	r4, r4, #16
 8000db2:	0003      	movs	r3, r0
 8000db4:	430c      	orrs	r4, r1
 8000db6:	42a2      	cmp	r2, r4
 8000db8:	d906      	bls.n	8000dc8 <__aeabi_ddiv+0x168>
 8000dba:	9900      	ldr	r1, [sp, #0]
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	468c      	mov	ip, r1
 8000dc0:	4464      	add	r4, ip
 8000dc2:	42a1      	cmp	r1, r4
 8000dc4:	d800      	bhi.n	8000dc8 <__aeabi_ddiv+0x168>
 8000dc6:	e1e1      	b.n	800118c <__aeabi_ddiv+0x52c>
 8000dc8:	1aa0      	subs	r0, r4, r2
 8000dca:	4642      	mov	r2, r8
 8000dcc:	0412      	lsls	r2, r2, #16
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	4693      	mov	fp, r2
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	4659      	mov	r1, fp
 8000dd6:	0c1b      	lsrs	r3, r3, #16
 8000dd8:	001d      	movs	r5, r3
 8000dda:	9304      	str	r3, [sp, #16]
 8000ddc:	040b      	lsls	r3, r1, #16
 8000dde:	4649      	mov	r1, r9
 8000de0:	0409      	lsls	r1, r1, #16
 8000de2:	0c09      	lsrs	r1, r1, #16
 8000de4:	000c      	movs	r4, r1
 8000de6:	0c1b      	lsrs	r3, r3, #16
 8000de8:	435c      	muls	r4, r3
 8000dea:	0c12      	lsrs	r2, r2, #16
 8000dec:	436b      	muls	r3, r5
 8000dee:	4688      	mov	r8, r1
 8000df0:	4351      	muls	r1, r2
 8000df2:	436a      	muls	r2, r5
 8000df4:	0c25      	lsrs	r5, r4, #16
 8000df6:	46ac      	mov	ip, r5
 8000df8:	185b      	adds	r3, r3, r1
 8000dfa:	4463      	add	r3, ip
 8000dfc:	4299      	cmp	r1, r3
 8000dfe:	d903      	bls.n	8000e08 <__aeabi_ddiv+0x1a8>
 8000e00:	2180      	movs	r1, #128	@ 0x80
 8000e02:	0249      	lsls	r1, r1, #9
 8000e04:	468c      	mov	ip, r1
 8000e06:	4462      	add	r2, ip
 8000e08:	0c19      	lsrs	r1, r3, #16
 8000e0a:	0424      	lsls	r4, r4, #16
 8000e0c:	041b      	lsls	r3, r3, #16
 8000e0e:	0c24      	lsrs	r4, r4, #16
 8000e10:	188a      	adds	r2, r1, r2
 8000e12:	191c      	adds	r4, r3, r4
 8000e14:	4290      	cmp	r0, r2
 8000e16:	d302      	bcc.n	8000e1e <__aeabi_ddiv+0x1be>
 8000e18:	d116      	bne.n	8000e48 <__aeabi_ddiv+0x1e8>
 8000e1a:	42a7      	cmp	r7, r4
 8000e1c:	d214      	bcs.n	8000e48 <__aeabi_ddiv+0x1e8>
 8000e1e:	465b      	mov	r3, fp
 8000e20:	9d00      	ldr	r5, [sp, #0]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	444f      	add	r7, r9
 8000e26:	9305      	str	r3, [sp, #20]
 8000e28:	454f      	cmp	r7, r9
 8000e2a:	419b      	sbcs	r3, r3
 8000e2c:	46ac      	mov	ip, r5
 8000e2e:	425b      	negs	r3, r3
 8000e30:	4463      	add	r3, ip
 8000e32:	18c0      	adds	r0, r0, r3
 8000e34:	4285      	cmp	r5, r0
 8000e36:	d300      	bcc.n	8000e3a <__aeabi_ddiv+0x1da>
 8000e38:	e1a1      	b.n	800117e <__aeabi_ddiv+0x51e>
 8000e3a:	4282      	cmp	r2, r0
 8000e3c:	d900      	bls.n	8000e40 <__aeabi_ddiv+0x1e0>
 8000e3e:	e1f6      	b.n	800122e <__aeabi_ddiv+0x5ce>
 8000e40:	d100      	bne.n	8000e44 <__aeabi_ddiv+0x1e4>
 8000e42:	e1f1      	b.n	8001228 <__aeabi_ddiv+0x5c8>
 8000e44:	9b05      	ldr	r3, [sp, #20]
 8000e46:	469b      	mov	fp, r3
 8000e48:	1b3c      	subs	r4, r7, r4
 8000e4a:	42a7      	cmp	r7, r4
 8000e4c:	41bf      	sbcs	r7, r7
 8000e4e:	9d00      	ldr	r5, [sp, #0]
 8000e50:	1a80      	subs	r0, r0, r2
 8000e52:	427f      	negs	r7, r7
 8000e54:	1bc0      	subs	r0, r0, r7
 8000e56:	4285      	cmp	r5, r0
 8000e58:	d100      	bne.n	8000e5c <__aeabi_ddiv+0x1fc>
 8000e5a:	e1d0      	b.n	80011fe <__aeabi_ddiv+0x59e>
 8000e5c:	9902      	ldr	r1, [sp, #8]
 8000e5e:	f7ff f9e9 	bl	8000234 <__aeabi_uidivmod>
 8000e62:	9a03      	ldr	r2, [sp, #12]
 8000e64:	040b      	lsls	r3, r1, #16
 8000e66:	4342      	muls	r2, r0
 8000e68:	0c21      	lsrs	r1, r4, #16
 8000e6a:	0007      	movs	r7, r0
 8000e6c:	4319      	orrs	r1, r3
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	d900      	bls.n	8000e74 <__aeabi_ddiv+0x214>
 8000e72:	e178      	b.n	8001166 <__aeabi_ddiv+0x506>
 8000e74:	1a88      	subs	r0, r1, r2
 8000e76:	9902      	ldr	r1, [sp, #8]
 8000e78:	f7ff f9dc 	bl	8000234 <__aeabi_uidivmod>
 8000e7c:	9a03      	ldr	r2, [sp, #12]
 8000e7e:	0424      	lsls	r4, r4, #16
 8000e80:	4342      	muls	r2, r0
 8000e82:	0409      	lsls	r1, r1, #16
 8000e84:	0c24      	lsrs	r4, r4, #16
 8000e86:	0003      	movs	r3, r0
 8000e88:	430c      	orrs	r4, r1
 8000e8a:	42a2      	cmp	r2, r4
 8000e8c:	d900      	bls.n	8000e90 <__aeabi_ddiv+0x230>
 8000e8e:	e15d      	b.n	800114c <__aeabi_ddiv+0x4ec>
 8000e90:	4641      	mov	r1, r8
 8000e92:	1aa4      	subs	r4, r4, r2
 8000e94:	043a      	lsls	r2, r7, #16
 8000e96:	431a      	orrs	r2, r3
 8000e98:	9d04      	ldr	r5, [sp, #16]
 8000e9a:	0413      	lsls	r3, r2, #16
 8000e9c:	0c1b      	lsrs	r3, r3, #16
 8000e9e:	4359      	muls	r1, r3
 8000ea0:	4647      	mov	r7, r8
 8000ea2:	436b      	muls	r3, r5
 8000ea4:	469c      	mov	ip, r3
 8000ea6:	0c10      	lsrs	r0, r2, #16
 8000ea8:	4347      	muls	r7, r0
 8000eaa:	0c0b      	lsrs	r3, r1, #16
 8000eac:	44bc      	add	ip, r7
 8000eae:	4463      	add	r3, ip
 8000eb0:	4368      	muls	r0, r5
 8000eb2:	429f      	cmp	r7, r3
 8000eb4:	d903      	bls.n	8000ebe <__aeabi_ddiv+0x25e>
 8000eb6:	2580      	movs	r5, #128	@ 0x80
 8000eb8:	026d      	lsls	r5, r5, #9
 8000eba:	46ac      	mov	ip, r5
 8000ebc:	4460      	add	r0, ip
 8000ebe:	0c1f      	lsrs	r7, r3, #16
 8000ec0:	0409      	lsls	r1, r1, #16
 8000ec2:	041b      	lsls	r3, r3, #16
 8000ec4:	0c09      	lsrs	r1, r1, #16
 8000ec6:	183f      	adds	r7, r7, r0
 8000ec8:	185b      	adds	r3, r3, r1
 8000eca:	42bc      	cmp	r4, r7
 8000ecc:	d200      	bcs.n	8000ed0 <__aeabi_ddiv+0x270>
 8000ece:	e102      	b.n	80010d6 <__aeabi_ddiv+0x476>
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x274>
 8000ed2:	e0fd      	b.n	80010d0 <__aeabi_ddiv+0x470>
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	4b43      	ldr	r3, [pc, #268]	@ (8000fe8 <__aeabi_ddiv+0x388>)
 8000eda:	4453      	add	r3, sl
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	dc00      	bgt.n	8000ee2 <__aeabi_ddiv+0x282>
 8000ee0:	e0ae      	b.n	8001040 <__aeabi_ddiv+0x3e0>
 8000ee2:	0751      	lsls	r1, r2, #29
 8000ee4:	d000      	beq.n	8000ee8 <__aeabi_ddiv+0x288>
 8000ee6:	e198      	b.n	800121a <__aeabi_ddiv+0x5ba>
 8000ee8:	4659      	mov	r1, fp
 8000eea:	01c9      	lsls	r1, r1, #7
 8000eec:	d506      	bpl.n	8000efc <__aeabi_ddiv+0x29c>
 8000eee:	4659      	mov	r1, fp
 8000ef0:	4b3e      	ldr	r3, [pc, #248]	@ (8000fec <__aeabi_ddiv+0x38c>)
 8000ef2:	4019      	ands	r1, r3
 8000ef4:	2380      	movs	r3, #128	@ 0x80
 8000ef6:	468b      	mov	fp, r1
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	4453      	add	r3, sl
 8000efc:	493c      	ldr	r1, [pc, #240]	@ (8000ff0 <__aeabi_ddiv+0x390>)
 8000efe:	428b      	cmp	r3, r1
 8000f00:	dd00      	ble.n	8000f04 <__aeabi_ddiv+0x2a4>
 8000f02:	e71a      	b.n	8000d3a <__aeabi_ddiv+0xda>
 8000f04:	4659      	mov	r1, fp
 8000f06:	08d2      	lsrs	r2, r2, #3
 8000f08:	0749      	lsls	r1, r1, #29
 8000f0a:	4311      	orrs	r1, r2
 8000f0c:	465a      	mov	r2, fp
 8000f0e:	055b      	lsls	r3, r3, #21
 8000f10:	0254      	lsls	r4, r2, #9
 8000f12:	4688      	mov	r8, r1
 8000f14:	0b24      	lsrs	r4, r4, #12
 8000f16:	0d5b      	lsrs	r3, r3, #21
 8000f18:	e702      	b.n	8000d20 <__aeabi_ddiv+0xc0>
 8000f1a:	465a      	mov	r2, fp
 8000f1c:	9b00      	ldr	r3, [sp, #0]
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	d100      	bne.n	8000f24 <__aeabi_ddiv+0x2c4>
 8000f22:	e07e      	b.n	8001022 <__aeabi_ddiv+0x3c2>
 8000f24:	465b      	mov	r3, fp
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d100      	bne.n	8000f2c <__aeabi_ddiv+0x2cc>
 8000f2a:	e100      	b.n	800112e <__aeabi_ddiv+0x4ce>
 8000f2c:	4658      	mov	r0, fp
 8000f2e:	f000 ff07 	bl	8001d40 <__clzsi2>
 8000f32:	0002      	movs	r2, r0
 8000f34:	0003      	movs	r3, r0
 8000f36:	3a0b      	subs	r2, #11
 8000f38:	271d      	movs	r7, #29
 8000f3a:	9e00      	ldr	r6, [sp, #0]
 8000f3c:	1aba      	subs	r2, r7, r2
 8000f3e:	0019      	movs	r1, r3
 8000f40:	4658      	mov	r0, fp
 8000f42:	40d6      	lsrs	r6, r2
 8000f44:	3908      	subs	r1, #8
 8000f46:	4088      	lsls	r0, r1
 8000f48:	0032      	movs	r2, r6
 8000f4a:	4302      	orrs	r2, r0
 8000f4c:	4693      	mov	fp, r2
 8000f4e:	9a00      	ldr	r2, [sp, #0]
 8000f50:	408a      	lsls	r2, r1
 8000f52:	4928      	ldr	r1, [pc, #160]	@ (8000ff4 <__aeabi_ddiv+0x394>)
 8000f54:	4453      	add	r3, sl
 8000f56:	468a      	mov	sl, r1
 8000f58:	449a      	add	sl, r3
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e6c8      	b.n	8000cf0 <__aeabi_ddiv+0x90>
 8000f5e:	465b      	mov	r3, fp
 8000f60:	4303      	orrs	r3, r0
 8000f62:	4699      	mov	r9, r3
 8000f64:	d056      	beq.n	8001014 <__aeabi_ddiv+0x3b4>
 8000f66:	465b      	mov	r3, fp
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_ddiv+0x30e>
 8000f6c:	e0cd      	b.n	800110a <__aeabi_ddiv+0x4aa>
 8000f6e:	4658      	mov	r0, fp
 8000f70:	f000 fee6 	bl	8001d40 <__clzsi2>
 8000f74:	230b      	movs	r3, #11
 8000f76:	425b      	negs	r3, r3
 8000f78:	469c      	mov	ip, r3
 8000f7a:	0002      	movs	r2, r0
 8000f7c:	4484      	add	ip, r0
 8000f7e:	4666      	mov	r6, ip
 8000f80:	231d      	movs	r3, #29
 8000f82:	1b9b      	subs	r3, r3, r6
 8000f84:	0026      	movs	r6, r4
 8000f86:	0011      	movs	r1, r2
 8000f88:	4658      	mov	r0, fp
 8000f8a:	40de      	lsrs	r6, r3
 8000f8c:	3908      	subs	r1, #8
 8000f8e:	4088      	lsls	r0, r1
 8000f90:	0033      	movs	r3, r6
 8000f92:	4303      	orrs	r3, r0
 8000f94:	4699      	mov	r9, r3
 8000f96:	0023      	movs	r3, r4
 8000f98:	408b      	lsls	r3, r1
 8000f9a:	4698      	mov	r8, r3
 8000f9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <__aeabi_ddiv+0x398>)
 8000f9e:	2400      	movs	r4, #0
 8000fa0:	1a9b      	subs	r3, r3, r2
 8000fa2:	469a      	mov	sl, r3
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	9303      	str	r3, [sp, #12]
 8000fa8:	e682      	b.n	8000cb0 <__aeabi_ddiv+0x50>
 8000faa:	465a      	mov	r2, fp
 8000fac:	4302      	orrs	r2, r0
 8000fae:	4691      	mov	r9, r2
 8000fb0:	d12a      	bne.n	8001008 <__aeabi_ddiv+0x3a8>
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	469a      	mov	sl, r3
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	4690      	mov	r8, r2
 8000fba:	2408      	movs	r4, #8
 8000fbc:	9303      	str	r3, [sp, #12]
 8000fbe:	e677      	b.n	8000cb0 <__aeabi_ddiv+0x50>
 8000fc0:	465a      	mov	r2, fp
 8000fc2:	9b00      	ldr	r3, [sp, #0]
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000ffc <__aeabi_ddiv+0x39c>)
 8000fc8:	469c      	mov	ip, r3
 8000fca:	44e2      	add	sl, ip
 8000fcc:	2a00      	cmp	r2, #0
 8000fce:	d117      	bne.n	8001000 <__aeabi_ddiv+0x3a0>
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	431c      	orrs	r4, r3
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	469b      	mov	fp, r3
 8000fd8:	3302      	adds	r3, #2
 8000fda:	e689      	b.n	8000cf0 <__aeabi_ddiv+0x90>
 8000fdc:	000007ff 	.word	0x000007ff
 8000fe0:	fffffc01 	.word	0xfffffc01
 8000fe4:	0800980c 	.word	0x0800980c
 8000fe8:	000003ff 	.word	0x000003ff
 8000fec:	feffffff 	.word	0xfeffffff
 8000ff0:	000007fe 	.word	0x000007fe
 8000ff4:	000003f3 	.word	0x000003f3
 8000ff8:	fffffc0d 	.word	0xfffffc0d
 8000ffc:	fffff801 	.word	0xfffff801
 8001000:	2303      	movs	r3, #3
 8001002:	0032      	movs	r2, r6
 8001004:	431c      	orrs	r4, r3
 8001006:	e673      	b.n	8000cf0 <__aeabi_ddiv+0x90>
 8001008:	469a      	mov	sl, r3
 800100a:	2303      	movs	r3, #3
 800100c:	46d9      	mov	r9, fp
 800100e:	240c      	movs	r4, #12
 8001010:	9303      	str	r3, [sp, #12]
 8001012:	e64d      	b.n	8000cb0 <__aeabi_ddiv+0x50>
 8001014:	2300      	movs	r3, #0
 8001016:	4698      	mov	r8, r3
 8001018:	469a      	mov	sl, r3
 800101a:	3301      	adds	r3, #1
 800101c:	2404      	movs	r4, #4
 800101e:	9303      	str	r3, [sp, #12]
 8001020:	e646      	b.n	8000cb0 <__aeabi_ddiv+0x50>
 8001022:	2301      	movs	r3, #1
 8001024:	431c      	orrs	r4, r3
 8001026:	2300      	movs	r3, #0
 8001028:	469b      	mov	fp, r3
 800102a:	3301      	adds	r3, #1
 800102c:	e660      	b.n	8000cf0 <__aeabi_ddiv+0x90>
 800102e:	2300      	movs	r3, #0
 8001030:	2480      	movs	r4, #128	@ 0x80
 8001032:	4698      	mov	r8, r3
 8001034:	2600      	movs	r6, #0
 8001036:	4b92      	ldr	r3, [pc, #584]	@ (8001280 <__aeabi_ddiv+0x620>)
 8001038:	0324      	lsls	r4, r4, #12
 800103a:	e671      	b.n	8000d20 <__aeabi_ddiv+0xc0>
 800103c:	2201      	movs	r2, #1
 800103e:	4252      	negs	r2, r2
 8001040:	2101      	movs	r1, #1
 8001042:	1ac9      	subs	r1, r1, r3
 8001044:	2938      	cmp	r1, #56	@ 0x38
 8001046:	dd00      	ble.n	800104a <__aeabi_ddiv+0x3ea>
 8001048:	e666      	b.n	8000d18 <__aeabi_ddiv+0xb8>
 800104a:	291f      	cmp	r1, #31
 800104c:	dc00      	bgt.n	8001050 <__aeabi_ddiv+0x3f0>
 800104e:	e0ab      	b.n	80011a8 <__aeabi_ddiv+0x548>
 8001050:	201f      	movs	r0, #31
 8001052:	4240      	negs	r0, r0
 8001054:	1ac3      	subs	r3, r0, r3
 8001056:	4658      	mov	r0, fp
 8001058:	40d8      	lsrs	r0, r3
 800105a:	0003      	movs	r3, r0
 800105c:	2920      	cmp	r1, #32
 800105e:	d004      	beq.n	800106a <__aeabi_ddiv+0x40a>
 8001060:	4658      	mov	r0, fp
 8001062:	4988      	ldr	r1, [pc, #544]	@ (8001284 <__aeabi_ddiv+0x624>)
 8001064:	4451      	add	r1, sl
 8001066:	4088      	lsls	r0, r1
 8001068:	4302      	orrs	r2, r0
 800106a:	1e51      	subs	r1, r2, #1
 800106c:	418a      	sbcs	r2, r1
 800106e:	431a      	orrs	r2, r3
 8001070:	2307      	movs	r3, #7
 8001072:	0019      	movs	r1, r3
 8001074:	2400      	movs	r4, #0
 8001076:	4011      	ands	r1, r2
 8001078:	4213      	tst	r3, r2
 800107a:	d00c      	beq.n	8001096 <__aeabi_ddiv+0x436>
 800107c:	230f      	movs	r3, #15
 800107e:	4013      	ands	r3, r2
 8001080:	2b04      	cmp	r3, #4
 8001082:	d100      	bne.n	8001086 <__aeabi_ddiv+0x426>
 8001084:	e0f9      	b.n	800127a <__aeabi_ddiv+0x61a>
 8001086:	1d11      	adds	r1, r2, #4
 8001088:	4291      	cmp	r1, r2
 800108a:	419b      	sbcs	r3, r3
 800108c:	000a      	movs	r2, r1
 800108e:	425b      	negs	r3, r3
 8001090:	0759      	lsls	r1, r3, #29
 8001092:	025b      	lsls	r3, r3, #9
 8001094:	0b1c      	lsrs	r4, r3, #12
 8001096:	08d2      	lsrs	r2, r2, #3
 8001098:	430a      	orrs	r2, r1
 800109a:	4690      	mov	r8, r2
 800109c:	2300      	movs	r3, #0
 800109e:	e63f      	b.n	8000d20 <__aeabi_ddiv+0xc0>
 80010a0:	2480      	movs	r4, #128	@ 0x80
 80010a2:	464b      	mov	r3, r9
 80010a4:	0324      	lsls	r4, r4, #12
 80010a6:	4223      	tst	r3, r4
 80010a8:	d009      	beq.n	80010be <__aeabi_ddiv+0x45e>
 80010aa:	465b      	mov	r3, fp
 80010ac:	4223      	tst	r3, r4
 80010ae:	d106      	bne.n	80010be <__aeabi_ddiv+0x45e>
 80010b0:	431c      	orrs	r4, r3
 80010b2:	0324      	lsls	r4, r4, #12
 80010b4:	002e      	movs	r6, r5
 80010b6:	4690      	mov	r8, r2
 80010b8:	4b71      	ldr	r3, [pc, #452]	@ (8001280 <__aeabi_ddiv+0x620>)
 80010ba:	0b24      	lsrs	r4, r4, #12
 80010bc:	e630      	b.n	8000d20 <__aeabi_ddiv+0xc0>
 80010be:	2480      	movs	r4, #128	@ 0x80
 80010c0:	464b      	mov	r3, r9
 80010c2:	0324      	lsls	r4, r4, #12
 80010c4:	431c      	orrs	r4, r3
 80010c6:	0324      	lsls	r4, r4, #12
 80010c8:	9e02      	ldr	r6, [sp, #8]
 80010ca:	4b6d      	ldr	r3, [pc, #436]	@ (8001280 <__aeabi_ddiv+0x620>)
 80010cc:	0b24      	lsrs	r4, r4, #12
 80010ce:	e627      	b.n	8000d20 <__aeabi_ddiv+0xc0>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d100      	bne.n	80010d6 <__aeabi_ddiv+0x476>
 80010d4:	e700      	b.n	8000ed8 <__aeabi_ddiv+0x278>
 80010d6:	9800      	ldr	r0, [sp, #0]
 80010d8:	1e51      	subs	r1, r2, #1
 80010da:	4684      	mov	ip, r0
 80010dc:	4464      	add	r4, ip
 80010de:	4284      	cmp	r4, r0
 80010e0:	d200      	bcs.n	80010e4 <__aeabi_ddiv+0x484>
 80010e2:	e084      	b.n	80011ee <__aeabi_ddiv+0x58e>
 80010e4:	42bc      	cmp	r4, r7
 80010e6:	d200      	bcs.n	80010ea <__aeabi_ddiv+0x48a>
 80010e8:	e0ae      	b.n	8001248 <__aeabi_ddiv+0x5e8>
 80010ea:	d100      	bne.n	80010ee <__aeabi_ddiv+0x48e>
 80010ec:	e0c1      	b.n	8001272 <__aeabi_ddiv+0x612>
 80010ee:	000a      	movs	r2, r1
 80010f0:	e6f0      	b.n	8000ed4 <__aeabi_ddiv+0x274>
 80010f2:	4542      	cmp	r2, r8
 80010f4:	d900      	bls.n	80010f8 <__aeabi_ddiv+0x498>
 80010f6:	e62c      	b.n	8000d52 <__aeabi_ddiv+0xf2>
 80010f8:	464b      	mov	r3, r9
 80010fa:	07dc      	lsls	r4, r3, #31
 80010fc:	0858      	lsrs	r0, r3, #1
 80010fe:	4643      	mov	r3, r8
 8001100:	085b      	lsrs	r3, r3, #1
 8001102:	431c      	orrs	r4, r3
 8001104:	4643      	mov	r3, r8
 8001106:	07df      	lsls	r7, r3, #31
 8001108:	e62a      	b.n	8000d60 <__aeabi_ddiv+0x100>
 800110a:	f000 fe19 	bl	8001d40 <__clzsi2>
 800110e:	2315      	movs	r3, #21
 8001110:	469c      	mov	ip, r3
 8001112:	4484      	add	ip, r0
 8001114:	0002      	movs	r2, r0
 8001116:	4663      	mov	r3, ip
 8001118:	3220      	adds	r2, #32
 800111a:	2b1c      	cmp	r3, #28
 800111c:	dc00      	bgt.n	8001120 <__aeabi_ddiv+0x4c0>
 800111e:	e72e      	b.n	8000f7e <__aeabi_ddiv+0x31e>
 8001120:	0023      	movs	r3, r4
 8001122:	3808      	subs	r0, #8
 8001124:	4083      	lsls	r3, r0
 8001126:	4699      	mov	r9, r3
 8001128:	2300      	movs	r3, #0
 800112a:	4698      	mov	r8, r3
 800112c:	e736      	b.n	8000f9c <__aeabi_ddiv+0x33c>
 800112e:	f000 fe07 	bl	8001d40 <__clzsi2>
 8001132:	0002      	movs	r2, r0
 8001134:	0003      	movs	r3, r0
 8001136:	3215      	adds	r2, #21
 8001138:	3320      	adds	r3, #32
 800113a:	2a1c      	cmp	r2, #28
 800113c:	dc00      	bgt.n	8001140 <__aeabi_ddiv+0x4e0>
 800113e:	e6fb      	b.n	8000f38 <__aeabi_ddiv+0x2d8>
 8001140:	9900      	ldr	r1, [sp, #0]
 8001142:	3808      	subs	r0, #8
 8001144:	4081      	lsls	r1, r0
 8001146:	2200      	movs	r2, #0
 8001148:	468b      	mov	fp, r1
 800114a:	e702      	b.n	8000f52 <__aeabi_ddiv+0x2f2>
 800114c:	9900      	ldr	r1, [sp, #0]
 800114e:	3b01      	subs	r3, #1
 8001150:	468c      	mov	ip, r1
 8001152:	4464      	add	r4, ip
 8001154:	42a1      	cmp	r1, r4
 8001156:	d900      	bls.n	800115a <__aeabi_ddiv+0x4fa>
 8001158:	e69a      	b.n	8000e90 <__aeabi_ddiv+0x230>
 800115a:	42a2      	cmp	r2, r4
 800115c:	d800      	bhi.n	8001160 <__aeabi_ddiv+0x500>
 800115e:	e697      	b.n	8000e90 <__aeabi_ddiv+0x230>
 8001160:	1e83      	subs	r3, r0, #2
 8001162:	4464      	add	r4, ip
 8001164:	e694      	b.n	8000e90 <__aeabi_ddiv+0x230>
 8001166:	46ac      	mov	ip, r5
 8001168:	4461      	add	r1, ip
 800116a:	3f01      	subs	r7, #1
 800116c:	428d      	cmp	r5, r1
 800116e:	d900      	bls.n	8001172 <__aeabi_ddiv+0x512>
 8001170:	e680      	b.n	8000e74 <__aeabi_ddiv+0x214>
 8001172:	428a      	cmp	r2, r1
 8001174:	d800      	bhi.n	8001178 <__aeabi_ddiv+0x518>
 8001176:	e67d      	b.n	8000e74 <__aeabi_ddiv+0x214>
 8001178:	1e87      	subs	r7, r0, #2
 800117a:	4461      	add	r1, ip
 800117c:	e67a      	b.n	8000e74 <__aeabi_ddiv+0x214>
 800117e:	4285      	cmp	r5, r0
 8001180:	d000      	beq.n	8001184 <__aeabi_ddiv+0x524>
 8001182:	e65f      	b.n	8000e44 <__aeabi_ddiv+0x1e4>
 8001184:	45b9      	cmp	r9, r7
 8001186:	d900      	bls.n	800118a <__aeabi_ddiv+0x52a>
 8001188:	e65c      	b.n	8000e44 <__aeabi_ddiv+0x1e4>
 800118a:	e656      	b.n	8000e3a <__aeabi_ddiv+0x1da>
 800118c:	42a2      	cmp	r2, r4
 800118e:	d800      	bhi.n	8001192 <__aeabi_ddiv+0x532>
 8001190:	e61a      	b.n	8000dc8 <__aeabi_ddiv+0x168>
 8001192:	1e83      	subs	r3, r0, #2
 8001194:	4464      	add	r4, ip
 8001196:	e617      	b.n	8000dc8 <__aeabi_ddiv+0x168>
 8001198:	428a      	cmp	r2, r1
 800119a:	d800      	bhi.n	800119e <__aeabi_ddiv+0x53e>
 800119c:	e600      	b.n	8000da0 <__aeabi_ddiv+0x140>
 800119e:	46ac      	mov	ip, r5
 80011a0:	1e83      	subs	r3, r0, #2
 80011a2:	4698      	mov	r8, r3
 80011a4:	4461      	add	r1, ip
 80011a6:	e5fb      	b.n	8000da0 <__aeabi_ddiv+0x140>
 80011a8:	4837      	ldr	r0, [pc, #220]	@ (8001288 <__aeabi_ddiv+0x628>)
 80011aa:	0014      	movs	r4, r2
 80011ac:	4450      	add	r0, sl
 80011ae:	4082      	lsls	r2, r0
 80011b0:	465b      	mov	r3, fp
 80011b2:	0017      	movs	r7, r2
 80011b4:	4083      	lsls	r3, r0
 80011b6:	40cc      	lsrs	r4, r1
 80011b8:	1e7a      	subs	r2, r7, #1
 80011ba:	4197      	sbcs	r7, r2
 80011bc:	4323      	orrs	r3, r4
 80011be:	433b      	orrs	r3, r7
 80011c0:	001a      	movs	r2, r3
 80011c2:	465b      	mov	r3, fp
 80011c4:	40cb      	lsrs	r3, r1
 80011c6:	0751      	lsls	r1, r2, #29
 80011c8:	d009      	beq.n	80011de <__aeabi_ddiv+0x57e>
 80011ca:	210f      	movs	r1, #15
 80011cc:	4011      	ands	r1, r2
 80011ce:	2904      	cmp	r1, #4
 80011d0:	d005      	beq.n	80011de <__aeabi_ddiv+0x57e>
 80011d2:	1d11      	adds	r1, r2, #4
 80011d4:	4291      	cmp	r1, r2
 80011d6:	4192      	sbcs	r2, r2
 80011d8:	4252      	negs	r2, r2
 80011da:	189b      	adds	r3, r3, r2
 80011dc:	000a      	movs	r2, r1
 80011de:	0219      	lsls	r1, r3, #8
 80011e0:	d400      	bmi.n	80011e4 <__aeabi_ddiv+0x584>
 80011e2:	e755      	b.n	8001090 <__aeabi_ddiv+0x430>
 80011e4:	2200      	movs	r2, #0
 80011e6:	2301      	movs	r3, #1
 80011e8:	2400      	movs	r4, #0
 80011ea:	4690      	mov	r8, r2
 80011ec:	e598      	b.n	8000d20 <__aeabi_ddiv+0xc0>
 80011ee:	000a      	movs	r2, r1
 80011f0:	42bc      	cmp	r4, r7
 80011f2:	d000      	beq.n	80011f6 <__aeabi_ddiv+0x596>
 80011f4:	e66e      	b.n	8000ed4 <__aeabi_ddiv+0x274>
 80011f6:	454b      	cmp	r3, r9
 80011f8:	d000      	beq.n	80011fc <__aeabi_ddiv+0x59c>
 80011fa:	e66b      	b.n	8000ed4 <__aeabi_ddiv+0x274>
 80011fc:	e66c      	b.n	8000ed8 <__aeabi_ddiv+0x278>
 80011fe:	4b23      	ldr	r3, [pc, #140]	@ (800128c <__aeabi_ddiv+0x62c>)
 8001200:	4a23      	ldr	r2, [pc, #140]	@ (8001290 <__aeabi_ddiv+0x630>)
 8001202:	4453      	add	r3, sl
 8001204:	4592      	cmp	sl, r2
 8001206:	da00      	bge.n	800120a <__aeabi_ddiv+0x5aa>
 8001208:	e718      	b.n	800103c <__aeabi_ddiv+0x3dc>
 800120a:	2101      	movs	r1, #1
 800120c:	4249      	negs	r1, r1
 800120e:	1d0a      	adds	r2, r1, #4
 8001210:	428a      	cmp	r2, r1
 8001212:	4189      	sbcs	r1, r1
 8001214:	4249      	negs	r1, r1
 8001216:	448b      	add	fp, r1
 8001218:	e666      	b.n	8000ee8 <__aeabi_ddiv+0x288>
 800121a:	210f      	movs	r1, #15
 800121c:	4011      	ands	r1, r2
 800121e:	2904      	cmp	r1, #4
 8001220:	d100      	bne.n	8001224 <__aeabi_ddiv+0x5c4>
 8001222:	e661      	b.n	8000ee8 <__aeabi_ddiv+0x288>
 8001224:	0011      	movs	r1, r2
 8001226:	e7f2      	b.n	800120e <__aeabi_ddiv+0x5ae>
 8001228:	42bc      	cmp	r4, r7
 800122a:	d800      	bhi.n	800122e <__aeabi_ddiv+0x5ce>
 800122c:	e60a      	b.n	8000e44 <__aeabi_ddiv+0x1e4>
 800122e:	2302      	movs	r3, #2
 8001230:	425b      	negs	r3, r3
 8001232:	469c      	mov	ip, r3
 8001234:	9900      	ldr	r1, [sp, #0]
 8001236:	444f      	add	r7, r9
 8001238:	454f      	cmp	r7, r9
 800123a:	419b      	sbcs	r3, r3
 800123c:	44e3      	add	fp, ip
 800123e:	468c      	mov	ip, r1
 8001240:	425b      	negs	r3, r3
 8001242:	4463      	add	r3, ip
 8001244:	18c0      	adds	r0, r0, r3
 8001246:	e5ff      	b.n	8000e48 <__aeabi_ddiv+0x1e8>
 8001248:	4649      	mov	r1, r9
 800124a:	9d00      	ldr	r5, [sp, #0]
 800124c:	0048      	lsls	r0, r1, #1
 800124e:	4548      	cmp	r0, r9
 8001250:	4189      	sbcs	r1, r1
 8001252:	46ac      	mov	ip, r5
 8001254:	4249      	negs	r1, r1
 8001256:	4461      	add	r1, ip
 8001258:	4681      	mov	r9, r0
 800125a:	3a02      	subs	r2, #2
 800125c:	1864      	adds	r4, r4, r1
 800125e:	e7c7      	b.n	80011f0 <__aeabi_ddiv+0x590>
 8001260:	2480      	movs	r4, #128	@ 0x80
 8001262:	465b      	mov	r3, fp
 8001264:	0324      	lsls	r4, r4, #12
 8001266:	431c      	orrs	r4, r3
 8001268:	0324      	lsls	r4, r4, #12
 800126a:	4690      	mov	r8, r2
 800126c:	4b04      	ldr	r3, [pc, #16]	@ (8001280 <__aeabi_ddiv+0x620>)
 800126e:	0b24      	lsrs	r4, r4, #12
 8001270:	e556      	b.n	8000d20 <__aeabi_ddiv+0xc0>
 8001272:	4599      	cmp	r9, r3
 8001274:	d3e8      	bcc.n	8001248 <__aeabi_ddiv+0x5e8>
 8001276:	000a      	movs	r2, r1
 8001278:	e7bd      	b.n	80011f6 <__aeabi_ddiv+0x596>
 800127a:	2300      	movs	r3, #0
 800127c:	e708      	b.n	8001090 <__aeabi_ddiv+0x430>
 800127e:	46c0      	nop			@ (mov r8, r8)
 8001280:	000007ff 	.word	0x000007ff
 8001284:	0000043e 	.word	0x0000043e
 8001288:	0000041e 	.word	0x0000041e
 800128c:	000003ff 	.word	0x000003ff
 8001290:	fffffc02 	.word	0xfffffc02

08001294 <__eqdf2>:
 8001294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001296:	4657      	mov	r7, sl
 8001298:	46de      	mov	lr, fp
 800129a:	464e      	mov	r6, r9
 800129c:	4645      	mov	r5, r8
 800129e:	b5e0      	push	{r5, r6, r7, lr}
 80012a0:	000d      	movs	r5, r1
 80012a2:	0004      	movs	r4, r0
 80012a4:	0fe8      	lsrs	r0, r5, #31
 80012a6:	4683      	mov	fp, r0
 80012a8:	0309      	lsls	r1, r1, #12
 80012aa:	0fd8      	lsrs	r0, r3, #31
 80012ac:	0b09      	lsrs	r1, r1, #12
 80012ae:	4682      	mov	sl, r0
 80012b0:	4819      	ldr	r0, [pc, #100]	@ (8001318 <__eqdf2+0x84>)
 80012b2:	468c      	mov	ip, r1
 80012b4:	031f      	lsls	r7, r3, #12
 80012b6:	0069      	lsls	r1, r5, #1
 80012b8:	005e      	lsls	r6, r3, #1
 80012ba:	0d49      	lsrs	r1, r1, #21
 80012bc:	0b3f      	lsrs	r7, r7, #12
 80012be:	0d76      	lsrs	r6, r6, #21
 80012c0:	4281      	cmp	r1, r0
 80012c2:	d018      	beq.n	80012f6 <__eqdf2+0x62>
 80012c4:	4286      	cmp	r6, r0
 80012c6:	d00f      	beq.n	80012e8 <__eqdf2+0x54>
 80012c8:	2001      	movs	r0, #1
 80012ca:	42b1      	cmp	r1, r6
 80012cc:	d10d      	bne.n	80012ea <__eqdf2+0x56>
 80012ce:	45bc      	cmp	ip, r7
 80012d0:	d10b      	bne.n	80012ea <__eqdf2+0x56>
 80012d2:	4294      	cmp	r4, r2
 80012d4:	d109      	bne.n	80012ea <__eqdf2+0x56>
 80012d6:	45d3      	cmp	fp, sl
 80012d8:	d01c      	beq.n	8001314 <__eqdf2+0x80>
 80012da:	2900      	cmp	r1, #0
 80012dc:	d105      	bne.n	80012ea <__eqdf2+0x56>
 80012de:	4660      	mov	r0, ip
 80012e0:	4320      	orrs	r0, r4
 80012e2:	1e43      	subs	r3, r0, #1
 80012e4:	4198      	sbcs	r0, r3
 80012e6:	e000      	b.n	80012ea <__eqdf2+0x56>
 80012e8:	2001      	movs	r0, #1
 80012ea:	bcf0      	pop	{r4, r5, r6, r7}
 80012ec:	46bb      	mov	fp, r7
 80012ee:	46b2      	mov	sl, r6
 80012f0:	46a9      	mov	r9, r5
 80012f2:	46a0      	mov	r8, r4
 80012f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012f6:	2001      	movs	r0, #1
 80012f8:	428e      	cmp	r6, r1
 80012fa:	d1f6      	bne.n	80012ea <__eqdf2+0x56>
 80012fc:	4661      	mov	r1, ip
 80012fe:	4339      	orrs	r1, r7
 8001300:	000f      	movs	r7, r1
 8001302:	4317      	orrs	r7, r2
 8001304:	4327      	orrs	r7, r4
 8001306:	d1f0      	bne.n	80012ea <__eqdf2+0x56>
 8001308:	465b      	mov	r3, fp
 800130a:	4652      	mov	r2, sl
 800130c:	1a98      	subs	r0, r3, r2
 800130e:	1e43      	subs	r3, r0, #1
 8001310:	4198      	sbcs	r0, r3
 8001312:	e7ea      	b.n	80012ea <__eqdf2+0x56>
 8001314:	2000      	movs	r0, #0
 8001316:	e7e8      	b.n	80012ea <__eqdf2+0x56>
 8001318:	000007ff 	.word	0x000007ff

0800131c <__gedf2>:
 800131c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131e:	4657      	mov	r7, sl
 8001320:	464e      	mov	r6, r9
 8001322:	4645      	mov	r5, r8
 8001324:	46de      	mov	lr, fp
 8001326:	b5e0      	push	{r5, r6, r7, lr}
 8001328:	000d      	movs	r5, r1
 800132a:	030f      	lsls	r7, r1, #12
 800132c:	0b39      	lsrs	r1, r7, #12
 800132e:	b083      	sub	sp, #12
 8001330:	0004      	movs	r4, r0
 8001332:	4680      	mov	r8, r0
 8001334:	9101      	str	r1, [sp, #4]
 8001336:	0058      	lsls	r0, r3, #1
 8001338:	0fe9      	lsrs	r1, r5, #31
 800133a:	4f31      	ldr	r7, [pc, #196]	@ (8001400 <__gedf2+0xe4>)
 800133c:	0d40      	lsrs	r0, r0, #21
 800133e:	468c      	mov	ip, r1
 8001340:	006e      	lsls	r6, r5, #1
 8001342:	0319      	lsls	r1, r3, #12
 8001344:	4682      	mov	sl, r0
 8001346:	4691      	mov	r9, r2
 8001348:	0d76      	lsrs	r6, r6, #21
 800134a:	0b09      	lsrs	r1, r1, #12
 800134c:	0fd8      	lsrs	r0, r3, #31
 800134e:	42be      	cmp	r6, r7
 8001350:	d01f      	beq.n	8001392 <__gedf2+0x76>
 8001352:	45ba      	cmp	sl, r7
 8001354:	d00f      	beq.n	8001376 <__gedf2+0x5a>
 8001356:	2e00      	cmp	r6, #0
 8001358:	d12f      	bne.n	80013ba <__gedf2+0x9e>
 800135a:	4655      	mov	r5, sl
 800135c:	9e01      	ldr	r6, [sp, #4]
 800135e:	4334      	orrs	r4, r6
 8001360:	2d00      	cmp	r5, #0
 8001362:	d127      	bne.n	80013b4 <__gedf2+0x98>
 8001364:	430a      	orrs	r2, r1
 8001366:	d03a      	beq.n	80013de <__gedf2+0xc2>
 8001368:	2c00      	cmp	r4, #0
 800136a:	d145      	bne.n	80013f8 <__gedf2+0xdc>
 800136c:	2800      	cmp	r0, #0
 800136e:	d11a      	bne.n	80013a6 <__gedf2+0x8a>
 8001370:	2001      	movs	r0, #1
 8001372:	4240      	negs	r0, r0
 8001374:	e017      	b.n	80013a6 <__gedf2+0x8a>
 8001376:	4311      	orrs	r1, r2
 8001378:	d13b      	bne.n	80013f2 <__gedf2+0xd6>
 800137a:	2e00      	cmp	r6, #0
 800137c:	d102      	bne.n	8001384 <__gedf2+0x68>
 800137e:	9f01      	ldr	r7, [sp, #4]
 8001380:	4327      	orrs	r7, r4
 8001382:	d0f3      	beq.n	800136c <__gedf2+0x50>
 8001384:	4584      	cmp	ip, r0
 8001386:	d109      	bne.n	800139c <__gedf2+0x80>
 8001388:	4663      	mov	r3, ip
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <__gedf2+0x54>
 800138e:	4660      	mov	r0, ip
 8001390:	e009      	b.n	80013a6 <__gedf2+0x8a>
 8001392:	9f01      	ldr	r7, [sp, #4]
 8001394:	4327      	orrs	r7, r4
 8001396:	d12c      	bne.n	80013f2 <__gedf2+0xd6>
 8001398:	45b2      	cmp	sl, r6
 800139a:	d024      	beq.n	80013e6 <__gedf2+0xca>
 800139c:	4663      	mov	r3, ip
 800139e:	2002      	movs	r0, #2
 80013a0:	3b01      	subs	r3, #1
 80013a2:	4018      	ands	r0, r3
 80013a4:	3801      	subs	r0, #1
 80013a6:	b003      	add	sp, #12
 80013a8:	bcf0      	pop	{r4, r5, r6, r7}
 80013aa:	46bb      	mov	fp, r7
 80013ac:	46b2      	mov	sl, r6
 80013ae:	46a9      	mov	r9, r5
 80013b0:	46a0      	mov	r8, r4
 80013b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b4:	2c00      	cmp	r4, #0
 80013b6:	d0d9      	beq.n	800136c <__gedf2+0x50>
 80013b8:	e7e4      	b.n	8001384 <__gedf2+0x68>
 80013ba:	4654      	mov	r4, sl
 80013bc:	2c00      	cmp	r4, #0
 80013be:	d0ed      	beq.n	800139c <__gedf2+0x80>
 80013c0:	4584      	cmp	ip, r0
 80013c2:	d1eb      	bne.n	800139c <__gedf2+0x80>
 80013c4:	4556      	cmp	r6, sl
 80013c6:	dce9      	bgt.n	800139c <__gedf2+0x80>
 80013c8:	dbde      	blt.n	8001388 <__gedf2+0x6c>
 80013ca:	9b01      	ldr	r3, [sp, #4]
 80013cc:	428b      	cmp	r3, r1
 80013ce:	d8e5      	bhi.n	800139c <__gedf2+0x80>
 80013d0:	d1da      	bne.n	8001388 <__gedf2+0x6c>
 80013d2:	45c8      	cmp	r8, r9
 80013d4:	d8e2      	bhi.n	800139c <__gedf2+0x80>
 80013d6:	2000      	movs	r0, #0
 80013d8:	45c8      	cmp	r8, r9
 80013da:	d2e4      	bcs.n	80013a6 <__gedf2+0x8a>
 80013dc:	e7d4      	b.n	8001388 <__gedf2+0x6c>
 80013de:	2000      	movs	r0, #0
 80013e0:	2c00      	cmp	r4, #0
 80013e2:	d0e0      	beq.n	80013a6 <__gedf2+0x8a>
 80013e4:	e7da      	b.n	800139c <__gedf2+0x80>
 80013e6:	4311      	orrs	r1, r2
 80013e8:	d103      	bne.n	80013f2 <__gedf2+0xd6>
 80013ea:	4584      	cmp	ip, r0
 80013ec:	d1d6      	bne.n	800139c <__gedf2+0x80>
 80013ee:	2000      	movs	r0, #0
 80013f0:	e7d9      	b.n	80013a6 <__gedf2+0x8a>
 80013f2:	2002      	movs	r0, #2
 80013f4:	4240      	negs	r0, r0
 80013f6:	e7d6      	b.n	80013a6 <__gedf2+0x8a>
 80013f8:	4584      	cmp	ip, r0
 80013fa:	d0e6      	beq.n	80013ca <__gedf2+0xae>
 80013fc:	e7ce      	b.n	800139c <__gedf2+0x80>
 80013fe:	46c0      	nop			@ (mov r8, r8)
 8001400:	000007ff 	.word	0x000007ff

08001404 <__ledf2>:
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	4657      	mov	r7, sl
 8001408:	464e      	mov	r6, r9
 800140a:	4645      	mov	r5, r8
 800140c:	46de      	mov	lr, fp
 800140e:	b5e0      	push	{r5, r6, r7, lr}
 8001410:	000d      	movs	r5, r1
 8001412:	030f      	lsls	r7, r1, #12
 8001414:	0004      	movs	r4, r0
 8001416:	4680      	mov	r8, r0
 8001418:	0fe8      	lsrs	r0, r5, #31
 800141a:	0b39      	lsrs	r1, r7, #12
 800141c:	4684      	mov	ip, r0
 800141e:	b083      	sub	sp, #12
 8001420:	0058      	lsls	r0, r3, #1
 8001422:	4f30      	ldr	r7, [pc, #192]	@ (80014e4 <__ledf2+0xe0>)
 8001424:	0d40      	lsrs	r0, r0, #21
 8001426:	9101      	str	r1, [sp, #4]
 8001428:	031e      	lsls	r6, r3, #12
 800142a:	0069      	lsls	r1, r5, #1
 800142c:	4682      	mov	sl, r0
 800142e:	4691      	mov	r9, r2
 8001430:	0d49      	lsrs	r1, r1, #21
 8001432:	0b36      	lsrs	r6, r6, #12
 8001434:	0fd8      	lsrs	r0, r3, #31
 8001436:	42b9      	cmp	r1, r7
 8001438:	d020      	beq.n	800147c <__ledf2+0x78>
 800143a:	45ba      	cmp	sl, r7
 800143c:	d00f      	beq.n	800145e <__ledf2+0x5a>
 800143e:	2900      	cmp	r1, #0
 8001440:	d12b      	bne.n	800149a <__ledf2+0x96>
 8001442:	9901      	ldr	r1, [sp, #4]
 8001444:	430c      	orrs	r4, r1
 8001446:	4651      	mov	r1, sl
 8001448:	2900      	cmp	r1, #0
 800144a:	d137      	bne.n	80014bc <__ledf2+0xb8>
 800144c:	4332      	orrs	r2, r6
 800144e:	d038      	beq.n	80014c2 <__ledf2+0xbe>
 8001450:	2c00      	cmp	r4, #0
 8001452:	d144      	bne.n	80014de <__ledf2+0xda>
 8001454:	2800      	cmp	r0, #0
 8001456:	d119      	bne.n	800148c <__ledf2+0x88>
 8001458:	2001      	movs	r0, #1
 800145a:	4240      	negs	r0, r0
 800145c:	e016      	b.n	800148c <__ledf2+0x88>
 800145e:	4316      	orrs	r6, r2
 8001460:	d113      	bne.n	800148a <__ledf2+0x86>
 8001462:	2900      	cmp	r1, #0
 8001464:	d102      	bne.n	800146c <__ledf2+0x68>
 8001466:	9f01      	ldr	r7, [sp, #4]
 8001468:	4327      	orrs	r7, r4
 800146a:	d0f3      	beq.n	8001454 <__ledf2+0x50>
 800146c:	4584      	cmp	ip, r0
 800146e:	d020      	beq.n	80014b2 <__ledf2+0xae>
 8001470:	4663      	mov	r3, ip
 8001472:	2002      	movs	r0, #2
 8001474:	3b01      	subs	r3, #1
 8001476:	4018      	ands	r0, r3
 8001478:	3801      	subs	r0, #1
 800147a:	e007      	b.n	800148c <__ledf2+0x88>
 800147c:	9f01      	ldr	r7, [sp, #4]
 800147e:	4327      	orrs	r7, r4
 8001480:	d103      	bne.n	800148a <__ledf2+0x86>
 8001482:	458a      	cmp	sl, r1
 8001484:	d1f4      	bne.n	8001470 <__ledf2+0x6c>
 8001486:	4316      	orrs	r6, r2
 8001488:	d01f      	beq.n	80014ca <__ledf2+0xc6>
 800148a:	2002      	movs	r0, #2
 800148c:	b003      	add	sp, #12
 800148e:	bcf0      	pop	{r4, r5, r6, r7}
 8001490:	46bb      	mov	fp, r7
 8001492:	46b2      	mov	sl, r6
 8001494:	46a9      	mov	r9, r5
 8001496:	46a0      	mov	r8, r4
 8001498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800149a:	4654      	mov	r4, sl
 800149c:	2c00      	cmp	r4, #0
 800149e:	d0e7      	beq.n	8001470 <__ledf2+0x6c>
 80014a0:	4584      	cmp	ip, r0
 80014a2:	d1e5      	bne.n	8001470 <__ledf2+0x6c>
 80014a4:	4551      	cmp	r1, sl
 80014a6:	dce3      	bgt.n	8001470 <__ledf2+0x6c>
 80014a8:	db03      	blt.n	80014b2 <__ledf2+0xae>
 80014aa:	9b01      	ldr	r3, [sp, #4]
 80014ac:	42b3      	cmp	r3, r6
 80014ae:	d8df      	bhi.n	8001470 <__ledf2+0x6c>
 80014b0:	d00f      	beq.n	80014d2 <__ledf2+0xce>
 80014b2:	4663      	mov	r3, ip
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0cf      	beq.n	8001458 <__ledf2+0x54>
 80014b8:	4660      	mov	r0, ip
 80014ba:	e7e7      	b.n	800148c <__ledf2+0x88>
 80014bc:	2c00      	cmp	r4, #0
 80014be:	d0c9      	beq.n	8001454 <__ledf2+0x50>
 80014c0:	e7d4      	b.n	800146c <__ledf2+0x68>
 80014c2:	2000      	movs	r0, #0
 80014c4:	2c00      	cmp	r4, #0
 80014c6:	d0e1      	beq.n	800148c <__ledf2+0x88>
 80014c8:	e7d2      	b.n	8001470 <__ledf2+0x6c>
 80014ca:	4584      	cmp	ip, r0
 80014cc:	d1d0      	bne.n	8001470 <__ledf2+0x6c>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7dc      	b.n	800148c <__ledf2+0x88>
 80014d2:	45c8      	cmp	r8, r9
 80014d4:	d8cc      	bhi.n	8001470 <__ledf2+0x6c>
 80014d6:	2000      	movs	r0, #0
 80014d8:	45c8      	cmp	r8, r9
 80014da:	d2d7      	bcs.n	800148c <__ledf2+0x88>
 80014dc:	e7e9      	b.n	80014b2 <__ledf2+0xae>
 80014de:	4584      	cmp	ip, r0
 80014e0:	d0e3      	beq.n	80014aa <__ledf2+0xa6>
 80014e2:	e7c5      	b.n	8001470 <__ledf2+0x6c>
 80014e4:	000007ff 	.word	0x000007ff

080014e8 <__aeabi_dmul>:
 80014e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ea:	4657      	mov	r7, sl
 80014ec:	46de      	mov	lr, fp
 80014ee:	464e      	mov	r6, r9
 80014f0:	4645      	mov	r5, r8
 80014f2:	b5e0      	push	{r5, r6, r7, lr}
 80014f4:	001f      	movs	r7, r3
 80014f6:	030b      	lsls	r3, r1, #12
 80014f8:	0b1b      	lsrs	r3, r3, #12
 80014fa:	0016      	movs	r6, r2
 80014fc:	469a      	mov	sl, r3
 80014fe:	0fca      	lsrs	r2, r1, #31
 8001500:	004b      	lsls	r3, r1, #1
 8001502:	0004      	movs	r4, r0
 8001504:	4693      	mov	fp, r2
 8001506:	b087      	sub	sp, #28
 8001508:	0d5b      	lsrs	r3, r3, #21
 800150a:	d100      	bne.n	800150e <__aeabi_dmul+0x26>
 800150c:	e0d5      	b.n	80016ba <__aeabi_dmul+0x1d2>
 800150e:	4abb      	ldr	r2, [pc, #748]	@ (80017fc <__aeabi_dmul+0x314>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d100      	bne.n	8001516 <__aeabi_dmul+0x2e>
 8001514:	e0f8      	b.n	8001708 <__aeabi_dmul+0x220>
 8001516:	4651      	mov	r1, sl
 8001518:	0f42      	lsrs	r2, r0, #29
 800151a:	00c9      	lsls	r1, r1, #3
 800151c:	430a      	orrs	r2, r1
 800151e:	2180      	movs	r1, #128	@ 0x80
 8001520:	0409      	lsls	r1, r1, #16
 8001522:	4311      	orrs	r1, r2
 8001524:	00c2      	lsls	r2, r0, #3
 8001526:	4691      	mov	r9, r2
 8001528:	4ab5      	ldr	r2, [pc, #724]	@ (8001800 <__aeabi_dmul+0x318>)
 800152a:	468a      	mov	sl, r1
 800152c:	189d      	adds	r5, r3, r2
 800152e:	2300      	movs	r3, #0
 8001530:	4698      	mov	r8, r3
 8001532:	9302      	str	r3, [sp, #8]
 8001534:	033c      	lsls	r4, r7, #12
 8001536:	007b      	lsls	r3, r7, #1
 8001538:	0ffa      	lsrs	r2, r7, #31
 800153a:	0030      	movs	r0, r6
 800153c:	0b24      	lsrs	r4, r4, #12
 800153e:	0d5b      	lsrs	r3, r3, #21
 8001540:	9200      	str	r2, [sp, #0]
 8001542:	d100      	bne.n	8001546 <__aeabi_dmul+0x5e>
 8001544:	e096      	b.n	8001674 <__aeabi_dmul+0x18c>
 8001546:	4aad      	ldr	r2, [pc, #692]	@ (80017fc <__aeabi_dmul+0x314>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d031      	beq.n	80015b0 <__aeabi_dmul+0xc8>
 800154c:	0f72      	lsrs	r2, r6, #29
 800154e:	00e4      	lsls	r4, r4, #3
 8001550:	4322      	orrs	r2, r4
 8001552:	2480      	movs	r4, #128	@ 0x80
 8001554:	0424      	lsls	r4, r4, #16
 8001556:	4314      	orrs	r4, r2
 8001558:	4aa9      	ldr	r2, [pc, #676]	@ (8001800 <__aeabi_dmul+0x318>)
 800155a:	00f0      	lsls	r0, r6, #3
 800155c:	4694      	mov	ip, r2
 800155e:	4463      	add	r3, ip
 8001560:	195b      	adds	r3, r3, r5
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	9201      	str	r2, [sp, #4]
 8001566:	4642      	mov	r2, r8
 8001568:	2600      	movs	r6, #0
 800156a:	2a0a      	cmp	r2, #10
 800156c:	dc42      	bgt.n	80015f4 <__aeabi_dmul+0x10c>
 800156e:	465a      	mov	r2, fp
 8001570:	9900      	ldr	r1, [sp, #0]
 8001572:	404a      	eors	r2, r1
 8001574:	4693      	mov	fp, r2
 8001576:	4642      	mov	r2, r8
 8001578:	2a02      	cmp	r2, #2
 800157a:	dc32      	bgt.n	80015e2 <__aeabi_dmul+0xfa>
 800157c:	3a01      	subs	r2, #1
 800157e:	2a01      	cmp	r2, #1
 8001580:	d900      	bls.n	8001584 <__aeabi_dmul+0x9c>
 8001582:	e149      	b.n	8001818 <__aeabi_dmul+0x330>
 8001584:	2e02      	cmp	r6, #2
 8001586:	d100      	bne.n	800158a <__aeabi_dmul+0xa2>
 8001588:	e0ca      	b.n	8001720 <__aeabi_dmul+0x238>
 800158a:	2e01      	cmp	r6, #1
 800158c:	d13d      	bne.n	800160a <__aeabi_dmul+0x122>
 800158e:	2300      	movs	r3, #0
 8001590:	2400      	movs	r4, #0
 8001592:	2200      	movs	r2, #0
 8001594:	0010      	movs	r0, r2
 8001596:	465a      	mov	r2, fp
 8001598:	051b      	lsls	r3, r3, #20
 800159a:	4323      	orrs	r3, r4
 800159c:	07d2      	lsls	r2, r2, #31
 800159e:	4313      	orrs	r3, r2
 80015a0:	0019      	movs	r1, r3
 80015a2:	b007      	add	sp, #28
 80015a4:	bcf0      	pop	{r4, r5, r6, r7}
 80015a6:	46bb      	mov	fp, r7
 80015a8:	46b2      	mov	sl, r6
 80015aa:	46a9      	mov	r9, r5
 80015ac:	46a0      	mov	r8, r4
 80015ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015b0:	4b92      	ldr	r3, [pc, #584]	@ (80017fc <__aeabi_dmul+0x314>)
 80015b2:	4326      	orrs	r6, r4
 80015b4:	18eb      	adds	r3, r5, r3
 80015b6:	2e00      	cmp	r6, #0
 80015b8:	d100      	bne.n	80015bc <__aeabi_dmul+0xd4>
 80015ba:	e0bb      	b.n	8001734 <__aeabi_dmul+0x24c>
 80015bc:	2203      	movs	r2, #3
 80015be:	4641      	mov	r1, r8
 80015c0:	4311      	orrs	r1, r2
 80015c2:	465a      	mov	r2, fp
 80015c4:	4688      	mov	r8, r1
 80015c6:	9900      	ldr	r1, [sp, #0]
 80015c8:	404a      	eors	r2, r1
 80015ca:	2180      	movs	r1, #128	@ 0x80
 80015cc:	0109      	lsls	r1, r1, #4
 80015ce:	468c      	mov	ip, r1
 80015d0:	0029      	movs	r1, r5
 80015d2:	4461      	add	r1, ip
 80015d4:	9101      	str	r1, [sp, #4]
 80015d6:	4641      	mov	r1, r8
 80015d8:	290a      	cmp	r1, #10
 80015da:	dd00      	ble.n	80015de <__aeabi_dmul+0xf6>
 80015dc:	e233      	b.n	8001a46 <__aeabi_dmul+0x55e>
 80015de:	4693      	mov	fp, r2
 80015e0:	2603      	movs	r6, #3
 80015e2:	4642      	mov	r2, r8
 80015e4:	2701      	movs	r7, #1
 80015e6:	4097      	lsls	r7, r2
 80015e8:	21a6      	movs	r1, #166	@ 0xa6
 80015ea:	003a      	movs	r2, r7
 80015ec:	00c9      	lsls	r1, r1, #3
 80015ee:	400a      	ands	r2, r1
 80015f0:	420f      	tst	r7, r1
 80015f2:	d031      	beq.n	8001658 <__aeabi_dmul+0x170>
 80015f4:	9e02      	ldr	r6, [sp, #8]
 80015f6:	2e02      	cmp	r6, #2
 80015f8:	d100      	bne.n	80015fc <__aeabi_dmul+0x114>
 80015fa:	e235      	b.n	8001a68 <__aeabi_dmul+0x580>
 80015fc:	2e03      	cmp	r6, #3
 80015fe:	d100      	bne.n	8001602 <__aeabi_dmul+0x11a>
 8001600:	e1d2      	b.n	80019a8 <__aeabi_dmul+0x4c0>
 8001602:	4654      	mov	r4, sl
 8001604:	4648      	mov	r0, r9
 8001606:	2e01      	cmp	r6, #1
 8001608:	d0c1      	beq.n	800158e <__aeabi_dmul+0xa6>
 800160a:	9a01      	ldr	r2, [sp, #4]
 800160c:	4b7d      	ldr	r3, [pc, #500]	@ (8001804 <__aeabi_dmul+0x31c>)
 800160e:	4694      	mov	ip, r2
 8001610:	4463      	add	r3, ip
 8001612:	2b00      	cmp	r3, #0
 8001614:	dc00      	bgt.n	8001618 <__aeabi_dmul+0x130>
 8001616:	e0c0      	b.n	800179a <__aeabi_dmul+0x2b2>
 8001618:	0742      	lsls	r2, r0, #29
 800161a:	d009      	beq.n	8001630 <__aeabi_dmul+0x148>
 800161c:	220f      	movs	r2, #15
 800161e:	4002      	ands	r2, r0
 8001620:	2a04      	cmp	r2, #4
 8001622:	d005      	beq.n	8001630 <__aeabi_dmul+0x148>
 8001624:	1d02      	adds	r2, r0, #4
 8001626:	4282      	cmp	r2, r0
 8001628:	4180      	sbcs	r0, r0
 800162a:	4240      	negs	r0, r0
 800162c:	1824      	adds	r4, r4, r0
 800162e:	0010      	movs	r0, r2
 8001630:	01e2      	lsls	r2, r4, #7
 8001632:	d506      	bpl.n	8001642 <__aeabi_dmul+0x15a>
 8001634:	4b74      	ldr	r3, [pc, #464]	@ (8001808 <__aeabi_dmul+0x320>)
 8001636:	9a01      	ldr	r2, [sp, #4]
 8001638:	401c      	ands	r4, r3
 800163a:	2380      	movs	r3, #128	@ 0x80
 800163c:	4694      	mov	ip, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	4463      	add	r3, ip
 8001642:	4a72      	ldr	r2, [pc, #456]	@ (800180c <__aeabi_dmul+0x324>)
 8001644:	4293      	cmp	r3, r2
 8001646:	dc6b      	bgt.n	8001720 <__aeabi_dmul+0x238>
 8001648:	0762      	lsls	r2, r4, #29
 800164a:	08c0      	lsrs	r0, r0, #3
 800164c:	0264      	lsls	r4, r4, #9
 800164e:	055b      	lsls	r3, r3, #21
 8001650:	4302      	orrs	r2, r0
 8001652:	0b24      	lsrs	r4, r4, #12
 8001654:	0d5b      	lsrs	r3, r3, #21
 8001656:	e79d      	b.n	8001594 <__aeabi_dmul+0xac>
 8001658:	2190      	movs	r1, #144	@ 0x90
 800165a:	0089      	lsls	r1, r1, #2
 800165c:	420f      	tst	r7, r1
 800165e:	d163      	bne.n	8001728 <__aeabi_dmul+0x240>
 8001660:	2288      	movs	r2, #136	@ 0x88
 8001662:	423a      	tst	r2, r7
 8001664:	d100      	bne.n	8001668 <__aeabi_dmul+0x180>
 8001666:	e0d7      	b.n	8001818 <__aeabi_dmul+0x330>
 8001668:	9b00      	ldr	r3, [sp, #0]
 800166a:	46a2      	mov	sl, r4
 800166c:	469b      	mov	fp, r3
 800166e:	4681      	mov	r9, r0
 8001670:	9602      	str	r6, [sp, #8]
 8001672:	e7bf      	b.n	80015f4 <__aeabi_dmul+0x10c>
 8001674:	0023      	movs	r3, r4
 8001676:	4333      	orrs	r3, r6
 8001678:	d100      	bne.n	800167c <__aeabi_dmul+0x194>
 800167a:	e07f      	b.n	800177c <__aeabi_dmul+0x294>
 800167c:	2c00      	cmp	r4, #0
 800167e:	d100      	bne.n	8001682 <__aeabi_dmul+0x19a>
 8001680:	e1ad      	b.n	80019de <__aeabi_dmul+0x4f6>
 8001682:	0020      	movs	r0, r4
 8001684:	f000 fb5c 	bl	8001d40 <__clzsi2>
 8001688:	0002      	movs	r2, r0
 800168a:	0003      	movs	r3, r0
 800168c:	3a0b      	subs	r2, #11
 800168e:	201d      	movs	r0, #29
 8001690:	0019      	movs	r1, r3
 8001692:	1a82      	subs	r2, r0, r2
 8001694:	0030      	movs	r0, r6
 8001696:	3908      	subs	r1, #8
 8001698:	40d0      	lsrs	r0, r2
 800169a:	408c      	lsls	r4, r1
 800169c:	4304      	orrs	r4, r0
 800169e:	0030      	movs	r0, r6
 80016a0:	4088      	lsls	r0, r1
 80016a2:	4a5b      	ldr	r2, [pc, #364]	@ (8001810 <__aeabi_dmul+0x328>)
 80016a4:	1aeb      	subs	r3, r5, r3
 80016a6:	4694      	mov	ip, r2
 80016a8:	4463      	add	r3, ip
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	9201      	str	r2, [sp, #4]
 80016ae:	4642      	mov	r2, r8
 80016b0:	2600      	movs	r6, #0
 80016b2:	2a0a      	cmp	r2, #10
 80016b4:	dc00      	bgt.n	80016b8 <__aeabi_dmul+0x1d0>
 80016b6:	e75a      	b.n	800156e <__aeabi_dmul+0x86>
 80016b8:	e79c      	b.n	80015f4 <__aeabi_dmul+0x10c>
 80016ba:	4653      	mov	r3, sl
 80016bc:	4303      	orrs	r3, r0
 80016be:	4699      	mov	r9, r3
 80016c0:	d054      	beq.n	800176c <__aeabi_dmul+0x284>
 80016c2:	4653      	mov	r3, sl
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d100      	bne.n	80016ca <__aeabi_dmul+0x1e2>
 80016c8:	e177      	b.n	80019ba <__aeabi_dmul+0x4d2>
 80016ca:	4650      	mov	r0, sl
 80016cc:	f000 fb38 	bl	8001d40 <__clzsi2>
 80016d0:	230b      	movs	r3, #11
 80016d2:	425b      	negs	r3, r3
 80016d4:	469c      	mov	ip, r3
 80016d6:	0002      	movs	r2, r0
 80016d8:	4484      	add	ip, r0
 80016da:	0011      	movs	r1, r2
 80016dc:	4650      	mov	r0, sl
 80016de:	3908      	subs	r1, #8
 80016e0:	4088      	lsls	r0, r1
 80016e2:	231d      	movs	r3, #29
 80016e4:	4680      	mov	r8, r0
 80016e6:	4660      	mov	r0, ip
 80016e8:	1a1b      	subs	r3, r3, r0
 80016ea:	0020      	movs	r0, r4
 80016ec:	40d8      	lsrs	r0, r3
 80016ee:	0003      	movs	r3, r0
 80016f0:	4640      	mov	r0, r8
 80016f2:	4303      	orrs	r3, r0
 80016f4:	469a      	mov	sl, r3
 80016f6:	0023      	movs	r3, r4
 80016f8:	408b      	lsls	r3, r1
 80016fa:	4699      	mov	r9, r3
 80016fc:	2300      	movs	r3, #0
 80016fe:	4d44      	ldr	r5, [pc, #272]	@ (8001810 <__aeabi_dmul+0x328>)
 8001700:	4698      	mov	r8, r3
 8001702:	1aad      	subs	r5, r5, r2
 8001704:	9302      	str	r3, [sp, #8]
 8001706:	e715      	b.n	8001534 <__aeabi_dmul+0x4c>
 8001708:	4652      	mov	r2, sl
 800170a:	4302      	orrs	r2, r0
 800170c:	4691      	mov	r9, r2
 800170e:	d126      	bne.n	800175e <__aeabi_dmul+0x276>
 8001710:	2200      	movs	r2, #0
 8001712:	001d      	movs	r5, r3
 8001714:	2302      	movs	r3, #2
 8001716:	4692      	mov	sl, r2
 8001718:	3208      	adds	r2, #8
 800171a:	4690      	mov	r8, r2
 800171c:	9302      	str	r3, [sp, #8]
 800171e:	e709      	b.n	8001534 <__aeabi_dmul+0x4c>
 8001720:	2400      	movs	r4, #0
 8001722:	2200      	movs	r2, #0
 8001724:	4b35      	ldr	r3, [pc, #212]	@ (80017fc <__aeabi_dmul+0x314>)
 8001726:	e735      	b.n	8001594 <__aeabi_dmul+0xac>
 8001728:	2300      	movs	r3, #0
 800172a:	2480      	movs	r4, #128	@ 0x80
 800172c:	469b      	mov	fp, r3
 800172e:	0324      	lsls	r4, r4, #12
 8001730:	4b32      	ldr	r3, [pc, #200]	@ (80017fc <__aeabi_dmul+0x314>)
 8001732:	e72f      	b.n	8001594 <__aeabi_dmul+0xac>
 8001734:	2202      	movs	r2, #2
 8001736:	4641      	mov	r1, r8
 8001738:	4311      	orrs	r1, r2
 800173a:	2280      	movs	r2, #128	@ 0x80
 800173c:	0112      	lsls	r2, r2, #4
 800173e:	4694      	mov	ip, r2
 8001740:	002a      	movs	r2, r5
 8001742:	4462      	add	r2, ip
 8001744:	4688      	mov	r8, r1
 8001746:	9201      	str	r2, [sp, #4]
 8001748:	290a      	cmp	r1, #10
 800174a:	dd00      	ble.n	800174e <__aeabi_dmul+0x266>
 800174c:	e752      	b.n	80015f4 <__aeabi_dmul+0x10c>
 800174e:	465a      	mov	r2, fp
 8001750:	2000      	movs	r0, #0
 8001752:	9900      	ldr	r1, [sp, #0]
 8001754:	0004      	movs	r4, r0
 8001756:	404a      	eors	r2, r1
 8001758:	4693      	mov	fp, r2
 800175a:	2602      	movs	r6, #2
 800175c:	e70b      	b.n	8001576 <__aeabi_dmul+0x8e>
 800175e:	220c      	movs	r2, #12
 8001760:	001d      	movs	r5, r3
 8001762:	2303      	movs	r3, #3
 8001764:	4681      	mov	r9, r0
 8001766:	4690      	mov	r8, r2
 8001768:	9302      	str	r3, [sp, #8]
 800176a:	e6e3      	b.n	8001534 <__aeabi_dmul+0x4c>
 800176c:	2300      	movs	r3, #0
 800176e:	469a      	mov	sl, r3
 8001770:	3304      	adds	r3, #4
 8001772:	4698      	mov	r8, r3
 8001774:	3b03      	subs	r3, #3
 8001776:	2500      	movs	r5, #0
 8001778:	9302      	str	r3, [sp, #8]
 800177a:	e6db      	b.n	8001534 <__aeabi_dmul+0x4c>
 800177c:	4642      	mov	r2, r8
 800177e:	3301      	adds	r3, #1
 8001780:	431a      	orrs	r2, r3
 8001782:	002b      	movs	r3, r5
 8001784:	4690      	mov	r8, r2
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	9201      	str	r2, [sp, #4]
 800178a:	4642      	mov	r2, r8
 800178c:	2400      	movs	r4, #0
 800178e:	2000      	movs	r0, #0
 8001790:	2601      	movs	r6, #1
 8001792:	2a0a      	cmp	r2, #10
 8001794:	dc00      	bgt.n	8001798 <__aeabi_dmul+0x2b0>
 8001796:	e6ea      	b.n	800156e <__aeabi_dmul+0x86>
 8001798:	e72c      	b.n	80015f4 <__aeabi_dmul+0x10c>
 800179a:	2201      	movs	r2, #1
 800179c:	1ad2      	subs	r2, r2, r3
 800179e:	2a38      	cmp	r2, #56	@ 0x38
 80017a0:	dd00      	ble.n	80017a4 <__aeabi_dmul+0x2bc>
 80017a2:	e6f4      	b.n	800158e <__aeabi_dmul+0xa6>
 80017a4:	2a1f      	cmp	r2, #31
 80017a6:	dc00      	bgt.n	80017aa <__aeabi_dmul+0x2c2>
 80017a8:	e12a      	b.n	8001a00 <__aeabi_dmul+0x518>
 80017aa:	211f      	movs	r1, #31
 80017ac:	4249      	negs	r1, r1
 80017ae:	1acb      	subs	r3, r1, r3
 80017b0:	0021      	movs	r1, r4
 80017b2:	40d9      	lsrs	r1, r3
 80017b4:	000b      	movs	r3, r1
 80017b6:	2a20      	cmp	r2, #32
 80017b8:	d005      	beq.n	80017c6 <__aeabi_dmul+0x2de>
 80017ba:	4a16      	ldr	r2, [pc, #88]	@ (8001814 <__aeabi_dmul+0x32c>)
 80017bc:	9d01      	ldr	r5, [sp, #4]
 80017be:	4694      	mov	ip, r2
 80017c0:	4465      	add	r5, ip
 80017c2:	40ac      	lsls	r4, r5
 80017c4:	4320      	orrs	r0, r4
 80017c6:	1e42      	subs	r2, r0, #1
 80017c8:	4190      	sbcs	r0, r2
 80017ca:	4318      	orrs	r0, r3
 80017cc:	2307      	movs	r3, #7
 80017ce:	0019      	movs	r1, r3
 80017d0:	2400      	movs	r4, #0
 80017d2:	4001      	ands	r1, r0
 80017d4:	4203      	tst	r3, r0
 80017d6:	d00c      	beq.n	80017f2 <__aeabi_dmul+0x30a>
 80017d8:	230f      	movs	r3, #15
 80017da:	4003      	ands	r3, r0
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d100      	bne.n	80017e2 <__aeabi_dmul+0x2fa>
 80017e0:	e140      	b.n	8001a64 <__aeabi_dmul+0x57c>
 80017e2:	1d03      	adds	r3, r0, #4
 80017e4:	4283      	cmp	r3, r0
 80017e6:	41a4      	sbcs	r4, r4
 80017e8:	0018      	movs	r0, r3
 80017ea:	4264      	negs	r4, r4
 80017ec:	0761      	lsls	r1, r4, #29
 80017ee:	0264      	lsls	r4, r4, #9
 80017f0:	0b24      	lsrs	r4, r4, #12
 80017f2:	08c2      	lsrs	r2, r0, #3
 80017f4:	2300      	movs	r3, #0
 80017f6:	430a      	orrs	r2, r1
 80017f8:	e6cc      	b.n	8001594 <__aeabi_dmul+0xac>
 80017fa:	46c0      	nop			@ (mov r8, r8)
 80017fc:	000007ff 	.word	0x000007ff
 8001800:	fffffc01 	.word	0xfffffc01
 8001804:	000003ff 	.word	0x000003ff
 8001808:	feffffff 	.word	0xfeffffff
 800180c:	000007fe 	.word	0x000007fe
 8001810:	fffffc0d 	.word	0xfffffc0d
 8001814:	0000043e 	.word	0x0000043e
 8001818:	4649      	mov	r1, r9
 800181a:	464a      	mov	r2, r9
 800181c:	0409      	lsls	r1, r1, #16
 800181e:	0c09      	lsrs	r1, r1, #16
 8001820:	000d      	movs	r5, r1
 8001822:	0c16      	lsrs	r6, r2, #16
 8001824:	0c02      	lsrs	r2, r0, #16
 8001826:	0400      	lsls	r0, r0, #16
 8001828:	0c00      	lsrs	r0, r0, #16
 800182a:	4345      	muls	r5, r0
 800182c:	46ac      	mov	ip, r5
 800182e:	0005      	movs	r5, r0
 8001830:	4375      	muls	r5, r6
 8001832:	46a8      	mov	r8, r5
 8001834:	0015      	movs	r5, r2
 8001836:	000f      	movs	r7, r1
 8001838:	4375      	muls	r5, r6
 800183a:	9200      	str	r2, [sp, #0]
 800183c:	9502      	str	r5, [sp, #8]
 800183e:	002a      	movs	r2, r5
 8001840:	9d00      	ldr	r5, [sp, #0]
 8001842:	436f      	muls	r7, r5
 8001844:	4665      	mov	r5, ip
 8001846:	0c2d      	lsrs	r5, r5, #16
 8001848:	46a9      	mov	r9, r5
 800184a:	4447      	add	r7, r8
 800184c:	444f      	add	r7, r9
 800184e:	45b8      	cmp	r8, r7
 8001850:	d905      	bls.n	800185e <__aeabi_dmul+0x376>
 8001852:	0015      	movs	r5, r2
 8001854:	2280      	movs	r2, #128	@ 0x80
 8001856:	0252      	lsls	r2, r2, #9
 8001858:	4690      	mov	r8, r2
 800185a:	4445      	add	r5, r8
 800185c:	9502      	str	r5, [sp, #8]
 800185e:	0c3d      	lsrs	r5, r7, #16
 8001860:	9503      	str	r5, [sp, #12]
 8001862:	4665      	mov	r5, ip
 8001864:	042d      	lsls	r5, r5, #16
 8001866:	043f      	lsls	r7, r7, #16
 8001868:	0c2d      	lsrs	r5, r5, #16
 800186a:	46ac      	mov	ip, r5
 800186c:	003d      	movs	r5, r7
 800186e:	4465      	add	r5, ip
 8001870:	9504      	str	r5, [sp, #16]
 8001872:	0c25      	lsrs	r5, r4, #16
 8001874:	0424      	lsls	r4, r4, #16
 8001876:	0c24      	lsrs	r4, r4, #16
 8001878:	46ac      	mov	ip, r5
 800187a:	0025      	movs	r5, r4
 800187c:	4375      	muls	r5, r6
 800187e:	46a8      	mov	r8, r5
 8001880:	4665      	mov	r5, ip
 8001882:	000f      	movs	r7, r1
 8001884:	4369      	muls	r1, r5
 8001886:	4441      	add	r1, r8
 8001888:	4689      	mov	r9, r1
 800188a:	4367      	muls	r7, r4
 800188c:	0c39      	lsrs	r1, r7, #16
 800188e:	4449      	add	r1, r9
 8001890:	436e      	muls	r6, r5
 8001892:	4588      	cmp	r8, r1
 8001894:	d903      	bls.n	800189e <__aeabi_dmul+0x3b6>
 8001896:	2280      	movs	r2, #128	@ 0x80
 8001898:	0252      	lsls	r2, r2, #9
 800189a:	4690      	mov	r8, r2
 800189c:	4446      	add	r6, r8
 800189e:	0c0d      	lsrs	r5, r1, #16
 80018a0:	46a8      	mov	r8, r5
 80018a2:	0035      	movs	r5, r6
 80018a4:	4445      	add	r5, r8
 80018a6:	9505      	str	r5, [sp, #20]
 80018a8:	9d03      	ldr	r5, [sp, #12]
 80018aa:	043f      	lsls	r7, r7, #16
 80018ac:	46a8      	mov	r8, r5
 80018ae:	0c3f      	lsrs	r7, r7, #16
 80018b0:	0409      	lsls	r1, r1, #16
 80018b2:	19c9      	adds	r1, r1, r7
 80018b4:	4488      	add	r8, r1
 80018b6:	4645      	mov	r5, r8
 80018b8:	9503      	str	r5, [sp, #12]
 80018ba:	4655      	mov	r5, sl
 80018bc:	042e      	lsls	r6, r5, #16
 80018be:	0c36      	lsrs	r6, r6, #16
 80018c0:	0c2f      	lsrs	r7, r5, #16
 80018c2:	0035      	movs	r5, r6
 80018c4:	4345      	muls	r5, r0
 80018c6:	4378      	muls	r0, r7
 80018c8:	4681      	mov	r9, r0
 80018ca:	0038      	movs	r0, r7
 80018cc:	46a8      	mov	r8, r5
 80018ce:	0c2d      	lsrs	r5, r5, #16
 80018d0:	46aa      	mov	sl, r5
 80018d2:	9a00      	ldr	r2, [sp, #0]
 80018d4:	4350      	muls	r0, r2
 80018d6:	4372      	muls	r2, r6
 80018d8:	444a      	add	r2, r9
 80018da:	4452      	add	r2, sl
 80018dc:	4591      	cmp	r9, r2
 80018de:	d903      	bls.n	80018e8 <__aeabi_dmul+0x400>
 80018e0:	2580      	movs	r5, #128	@ 0x80
 80018e2:	026d      	lsls	r5, r5, #9
 80018e4:	46a9      	mov	r9, r5
 80018e6:	4448      	add	r0, r9
 80018e8:	0c15      	lsrs	r5, r2, #16
 80018ea:	46a9      	mov	r9, r5
 80018ec:	4645      	mov	r5, r8
 80018ee:	042d      	lsls	r5, r5, #16
 80018f0:	0c2d      	lsrs	r5, r5, #16
 80018f2:	46a8      	mov	r8, r5
 80018f4:	4665      	mov	r5, ip
 80018f6:	437d      	muls	r5, r7
 80018f8:	0412      	lsls	r2, r2, #16
 80018fa:	4448      	add	r0, r9
 80018fc:	4490      	add	r8, r2
 80018fe:	46a9      	mov	r9, r5
 8001900:	0032      	movs	r2, r6
 8001902:	4665      	mov	r5, ip
 8001904:	4362      	muls	r2, r4
 8001906:	436e      	muls	r6, r5
 8001908:	437c      	muls	r4, r7
 800190a:	0c17      	lsrs	r7, r2, #16
 800190c:	1936      	adds	r6, r6, r4
 800190e:	19bf      	adds	r7, r7, r6
 8001910:	42bc      	cmp	r4, r7
 8001912:	d903      	bls.n	800191c <__aeabi_dmul+0x434>
 8001914:	2480      	movs	r4, #128	@ 0x80
 8001916:	0264      	lsls	r4, r4, #9
 8001918:	46a4      	mov	ip, r4
 800191a:	44e1      	add	r9, ip
 800191c:	9c02      	ldr	r4, [sp, #8]
 800191e:	9e03      	ldr	r6, [sp, #12]
 8001920:	46a4      	mov	ip, r4
 8001922:	9d05      	ldr	r5, [sp, #20]
 8001924:	4466      	add	r6, ip
 8001926:	428e      	cmp	r6, r1
 8001928:	4189      	sbcs	r1, r1
 800192a:	46ac      	mov	ip, r5
 800192c:	0412      	lsls	r2, r2, #16
 800192e:	043c      	lsls	r4, r7, #16
 8001930:	0c12      	lsrs	r2, r2, #16
 8001932:	18a2      	adds	r2, r4, r2
 8001934:	4462      	add	r2, ip
 8001936:	4249      	negs	r1, r1
 8001938:	1854      	adds	r4, r2, r1
 800193a:	4446      	add	r6, r8
 800193c:	46a4      	mov	ip, r4
 800193e:	4546      	cmp	r6, r8
 8001940:	41a4      	sbcs	r4, r4
 8001942:	4682      	mov	sl, r0
 8001944:	4264      	negs	r4, r4
 8001946:	46a0      	mov	r8, r4
 8001948:	42aa      	cmp	r2, r5
 800194a:	4192      	sbcs	r2, r2
 800194c:	458c      	cmp	ip, r1
 800194e:	4189      	sbcs	r1, r1
 8001950:	44e2      	add	sl, ip
 8001952:	44d0      	add	r8, sl
 8001954:	4249      	negs	r1, r1
 8001956:	4252      	negs	r2, r2
 8001958:	430a      	orrs	r2, r1
 800195a:	45a0      	cmp	r8, r4
 800195c:	41a4      	sbcs	r4, r4
 800195e:	4582      	cmp	sl, r0
 8001960:	4189      	sbcs	r1, r1
 8001962:	4264      	negs	r4, r4
 8001964:	4249      	negs	r1, r1
 8001966:	430c      	orrs	r4, r1
 8001968:	4641      	mov	r1, r8
 800196a:	0c3f      	lsrs	r7, r7, #16
 800196c:	19d2      	adds	r2, r2, r7
 800196e:	1912      	adds	r2, r2, r4
 8001970:	0dcc      	lsrs	r4, r1, #23
 8001972:	9904      	ldr	r1, [sp, #16]
 8001974:	0270      	lsls	r0, r6, #9
 8001976:	4308      	orrs	r0, r1
 8001978:	1e41      	subs	r1, r0, #1
 800197a:	4188      	sbcs	r0, r1
 800197c:	4641      	mov	r1, r8
 800197e:	444a      	add	r2, r9
 8001980:	0df6      	lsrs	r6, r6, #23
 8001982:	0252      	lsls	r2, r2, #9
 8001984:	4330      	orrs	r0, r6
 8001986:	0249      	lsls	r1, r1, #9
 8001988:	4314      	orrs	r4, r2
 800198a:	4308      	orrs	r0, r1
 800198c:	01d2      	lsls	r2, r2, #7
 800198e:	d535      	bpl.n	80019fc <__aeabi_dmul+0x514>
 8001990:	2201      	movs	r2, #1
 8001992:	0843      	lsrs	r3, r0, #1
 8001994:	4002      	ands	r2, r0
 8001996:	4313      	orrs	r3, r2
 8001998:	07e0      	lsls	r0, r4, #31
 800199a:	4318      	orrs	r0, r3
 800199c:	0864      	lsrs	r4, r4, #1
 800199e:	e634      	b.n	800160a <__aeabi_dmul+0x122>
 80019a0:	9b00      	ldr	r3, [sp, #0]
 80019a2:	46a2      	mov	sl, r4
 80019a4:	469b      	mov	fp, r3
 80019a6:	4681      	mov	r9, r0
 80019a8:	2480      	movs	r4, #128	@ 0x80
 80019aa:	4653      	mov	r3, sl
 80019ac:	0324      	lsls	r4, r4, #12
 80019ae:	431c      	orrs	r4, r3
 80019b0:	0324      	lsls	r4, r4, #12
 80019b2:	464a      	mov	r2, r9
 80019b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001a70 <__aeabi_dmul+0x588>)
 80019b6:	0b24      	lsrs	r4, r4, #12
 80019b8:	e5ec      	b.n	8001594 <__aeabi_dmul+0xac>
 80019ba:	f000 f9c1 	bl	8001d40 <__clzsi2>
 80019be:	2315      	movs	r3, #21
 80019c0:	469c      	mov	ip, r3
 80019c2:	4484      	add	ip, r0
 80019c4:	0002      	movs	r2, r0
 80019c6:	4663      	mov	r3, ip
 80019c8:	3220      	adds	r2, #32
 80019ca:	2b1c      	cmp	r3, #28
 80019cc:	dc00      	bgt.n	80019d0 <__aeabi_dmul+0x4e8>
 80019ce:	e684      	b.n	80016da <__aeabi_dmul+0x1f2>
 80019d0:	2300      	movs	r3, #0
 80019d2:	4699      	mov	r9, r3
 80019d4:	0023      	movs	r3, r4
 80019d6:	3808      	subs	r0, #8
 80019d8:	4083      	lsls	r3, r0
 80019da:	469a      	mov	sl, r3
 80019dc:	e68e      	b.n	80016fc <__aeabi_dmul+0x214>
 80019de:	f000 f9af 	bl	8001d40 <__clzsi2>
 80019e2:	0002      	movs	r2, r0
 80019e4:	0003      	movs	r3, r0
 80019e6:	3215      	adds	r2, #21
 80019e8:	3320      	adds	r3, #32
 80019ea:	2a1c      	cmp	r2, #28
 80019ec:	dc00      	bgt.n	80019f0 <__aeabi_dmul+0x508>
 80019ee:	e64e      	b.n	800168e <__aeabi_dmul+0x1a6>
 80019f0:	0002      	movs	r2, r0
 80019f2:	0034      	movs	r4, r6
 80019f4:	3a08      	subs	r2, #8
 80019f6:	2000      	movs	r0, #0
 80019f8:	4094      	lsls	r4, r2
 80019fa:	e652      	b.n	80016a2 <__aeabi_dmul+0x1ba>
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	e604      	b.n	800160a <__aeabi_dmul+0x122>
 8001a00:	4b1c      	ldr	r3, [pc, #112]	@ (8001a74 <__aeabi_dmul+0x58c>)
 8001a02:	0021      	movs	r1, r4
 8001a04:	469c      	mov	ip, r3
 8001a06:	0003      	movs	r3, r0
 8001a08:	9d01      	ldr	r5, [sp, #4]
 8001a0a:	40d3      	lsrs	r3, r2
 8001a0c:	4465      	add	r5, ip
 8001a0e:	40a9      	lsls	r1, r5
 8001a10:	4319      	orrs	r1, r3
 8001a12:	0003      	movs	r3, r0
 8001a14:	40ab      	lsls	r3, r5
 8001a16:	1e58      	subs	r0, r3, #1
 8001a18:	4183      	sbcs	r3, r0
 8001a1a:	4319      	orrs	r1, r3
 8001a1c:	0008      	movs	r0, r1
 8001a1e:	40d4      	lsrs	r4, r2
 8001a20:	074b      	lsls	r3, r1, #29
 8001a22:	d009      	beq.n	8001a38 <__aeabi_dmul+0x550>
 8001a24:	230f      	movs	r3, #15
 8001a26:	400b      	ands	r3, r1
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d005      	beq.n	8001a38 <__aeabi_dmul+0x550>
 8001a2c:	1d0b      	adds	r3, r1, #4
 8001a2e:	428b      	cmp	r3, r1
 8001a30:	4180      	sbcs	r0, r0
 8001a32:	4240      	negs	r0, r0
 8001a34:	1824      	adds	r4, r4, r0
 8001a36:	0018      	movs	r0, r3
 8001a38:	0223      	lsls	r3, r4, #8
 8001a3a:	d400      	bmi.n	8001a3e <__aeabi_dmul+0x556>
 8001a3c:	e6d6      	b.n	80017ec <__aeabi_dmul+0x304>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	2400      	movs	r4, #0
 8001a42:	2200      	movs	r2, #0
 8001a44:	e5a6      	b.n	8001594 <__aeabi_dmul+0xac>
 8001a46:	290f      	cmp	r1, #15
 8001a48:	d1aa      	bne.n	80019a0 <__aeabi_dmul+0x4b8>
 8001a4a:	2380      	movs	r3, #128	@ 0x80
 8001a4c:	4652      	mov	r2, sl
 8001a4e:	031b      	lsls	r3, r3, #12
 8001a50:	421a      	tst	r2, r3
 8001a52:	d0a9      	beq.n	80019a8 <__aeabi_dmul+0x4c0>
 8001a54:	421c      	tst	r4, r3
 8001a56:	d1a7      	bne.n	80019a8 <__aeabi_dmul+0x4c0>
 8001a58:	431c      	orrs	r4, r3
 8001a5a:	9b00      	ldr	r3, [sp, #0]
 8001a5c:	0002      	movs	r2, r0
 8001a5e:	469b      	mov	fp, r3
 8001a60:	4b03      	ldr	r3, [pc, #12]	@ (8001a70 <__aeabi_dmul+0x588>)
 8001a62:	e597      	b.n	8001594 <__aeabi_dmul+0xac>
 8001a64:	2400      	movs	r4, #0
 8001a66:	e6c1      	b.n	80017ec <__aeabi_dmul+0x304>
 8001a68:	2400      	movs	r4, #0
 8001a6a:	4b01      	ldr	r3, [pc, #4]	@ (8001a70 <__aeabi_dmul+0x588>)
 8001a6c:	0022      	movs	r2, r4
 8001a6e:	e591      	b.n	8001594 <__aeabi_dmul+0xac>
 8001a70:	000007ff 	.word	0x000007ff
 8001a74:	0000041e 	.word	0x0000041e

08001a78 <__aeabi_dcmpun>:
 8001a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a7a:	46c6      	mov	lr, r8
 8001a7c:	031e      	lsls	r6, r3, #12
 8001a7e:	0b36      	lsrs	r6, r6, #12
 8001a80:	46b0      	mov	r8, r6
 8001a82:	4e0d      	ldr	r6, [pc, #52]	@ (8001ab8 <__aeabi_dcmpun+0x40>)
 8001a84:	030c      	lsls	r4, r1, #12
 8001a86:	004d      	lsls	r5, r1, #1
 8001a88:	005f      	lsls	r7, r3, #1
 8001a8a:	b500      	push	{lr}
 8001a8c:	0b24      	lsrs	r4, r4, #12
 8001a8e:	0d6d      	lsrs	r5, r5, #21
 8001a90:	0d7f      	lsrs	r7, r7, #21
 8001a92:	42b5      	cmp	r5, r6
 8001a94:	d00b      	beq.n	8001aae <__aeabi_dcmpun+0x36>
 8001a96:	4908      	ldr	r1, [pc, #32]	@ (8001ab8 <__aeabi_dcmpun+0x40>)
 8001a98:	2000      	movs	r0, #0
 8001a9a:	428f      	cmp	r7, r1
 8001a9c:	d104      	bne.n	8001aa8 <__aeabi_dcmpun+0x30>
 8001a9e:	4646      	mov	r6, r8
 8001aa0:	4316      	orrs	r6, r2
 8001aa2:	0030      	movs	r0, r6
 8001aa4:	1e43      	subs	r3, r0, #1
 8001aa6:	4198      	sbcs	r0, r3
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	46b8      	mov	r8, r7
 8001aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aae:	4304      	orrs	r4, r0
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	2c00      	cmp	r4, #0
 8001ab4:	d1f8      	bne.n	8001aa8 <__aeabi_dcmpun+0x30>
 8001ab6:	e7ee      	b.n	8001a96 <__aeabi_dcmpun+0x1e>
 8001ab8:	000007ff 	.word	0x000007ff

08001abc <__aeabi_d2iz>:
 8001abc:	000b      	movs	r3, r1
 8001abe:	0002      	movs	r2, r0
 8001ac0:	b570      	push	{r4, r5, r6, lr}
 8001ac2:	4d16      	ldr	r5, [pc, #88]	@ (8001b1c <__aeabi_d2iz+0x60>)
 8001ac4:	030c      	lsls	r4, r1, #12
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	0049      	lsls	r1, r1, #1
 8001aca:	2000      	movs	r0, #0
 8001acc:	9200      	str	r2, [sp, #0]
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	0b24      	lsrs	r4, r4, #12
 8001ad2:	0d49      	lsrs	r1, r1, #21
 8001ad4:	0fde      	lsrs	r6, r3, #31
 8001ad6:	42a9      	cmp	r1, r5
 8001ad8:	dd04      	ble.n	8001ae4 <__aeabi_d2iz+0x28>
 8001ada:	4811      	ldr	r0, [pc, #68]	@ (8001b20 <__aeabi_d2iz+0x64>)
 8001adc:	4281      	cmp	r1, r0
 8001ade:	dd03      	ble.n	8001ae8 <__aeabi_d2iz+0x2c>
 8001ae0:	4b10      	ldr	r3, [pc, #64]	@ (8001b24 <__aeabi_d2iz+0x68>)
 8001ae2:	18f0      	adds	r0, r6, r3
 8001ae4:	b002      	add	sp, #8
 8001ae6:	bd70      	pop	{r4, r5, r6, pc}
 8001ae8:	2080      	movs	r0, #128	@ 0x80
 8001aea:	0340      	lsls	r0, r0, #13
 8001aec:	4320      	orrs	r0, r4
 8001aee:	4c0e      	ldr	r4, [pc, #56]	@ (8001b28 <__aeabi_d2iz+0x6c>)
 8001af0:	1a64      	subs	r4, r4, r1
 8001af2:	2c1f      	cmp	r4, #31
 8001af4:	dd08      	ble.n	8001b08 <__aeabi_d2iz+0x4c>
 8001af6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <__aeabi_d2iz+0x70>)
 8001af8:	1a5b      	subs	r3, r3, r1
 8001afa:	40d8      	lsrs	r0, r3
 8001afc:	0003      	movs	r3, r0
 8001afe:	4258      	negs	r0, r3
 8001b00:	2e00      	cmp	r6, #0
 8001b02:	d1ef      	bne.n	8001ae4 <__aeabi_d2iz+0x28>
 8001b04:	0018      	movs	r0, r3
 8001b06:	e7ed      	b.n	8001ae4 <__aeabi_d2iz+0x28>
 8001b08:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <__aeabi_d2iz+0x74>)
 8001b0a:	9a00      	ldr	r2, [sp, #0]
 8001b0c:	469c      	mov	ip, r3
 8001b0e:	0003      	movs	r3, r0
 8001b10:	4461      	add	r1, ip
 8001b12:	408b      	lsls	r3, r1
 8001b14:	40e2      	lsrs	r2, r4
 8001b16:	4313      	orrs	r3, r2
 8001b18:	e7f1      	b.n	8001afe <__aeabi_d2iz+0x42>
 8001b1a:	46c0      	nop			@ (mov r8, r8)
 8001b1c:	000003fe 	.word	0x000003fe
 8001b20:	0000041d 	.word	0x0000041d
 8001b24:	7fffffff 	.word	0x7fffffff
 8001b28:	00000433 	.word	0x00000433
 8001b2c:	00000413 	.word	0x00000413
 8001b30:	fffffbed 	.word	0xfffffbed

08001b34 <__aeabi_f2d>:
 8001b34:	b570      	push	{r4, r5, r6, lr}
 8001b36:	0242      	lsls	r2, r0, #9
 8001b38:	0043      	lsls	r3, r0, #1
 8001b3a:	0fc4      	lsrs	r4, r0, #31
 8001b3c:	20fe      	movs	r0, #254	@ 0xfe
 8001b3e:	0e1b      	lsrs	r3, r3, #24
 8001b40:	1c59      	adds	r1, r3, #1
 8001b42:	0a55      	lsrs	r5, r2, #9
 8001b44:	4208      	tst	r0, r1
 8001b46:	d00c      	beq.n	8001b62 <__aeabi_f2d+0x2e>
 8001b48:	21e0      	movs	r1, #224	@ 0xe0
 8001b4a:	0089      	lsls	r1, r1, #2
 8001b4c:	468c      	mov	ip, r1
 8001b4e:	076d      	lsls	r5, r5, #29
 8001b50:	0b12      	lsrs	r2, r2, #12
 8001b52:	4463      	add	r3, ip
 8001b54:	051b      	lsls	r3, r3, #20
 8001b56:	4313      	orrs	r3, r2
 8001b58:	07e4      	lsls	r4, r4, #31
 8001b5a:	4323      	orrs	r3, r4
 8001b5c:	0028      	movs	r0, r5
 8001b5e:	0019      	movs	r1, r3
 8001b60:	bd70      	pop	{r4, r5, r6, pc}
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d114      	bne.n	8001b90 <__aeabi_f2d+0x5c>
 8001b66:	2d00      	cmp	r5, #0
 8001b68:	d01b      	beq.n	8001ba2 <__aeabi_f2d+0x6e>
 8001b6a:	0028      	movs	r0, r5
 8001b6c:	f000 f8e8 	bl	8001d40 <__clzsi2>
 8001b70:	280a      	cmp	r0, #10
 8001b72:	dc1c      	bgt.n	8001bae <__aeabi_f2d+0x7a>
 8001b74:	230b      	movs	r3, #11
 8001b76:	002a      	movs	r2, r5
 8001b78:	1a1b      	subs	r3, r3, r0
 8001b7a:	40da      	lsrs	r2, r3
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	3315      	adds	r3, #21
 8001b80:	409d      	lsls	r5, r3
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <__aeabi_f2d+0x88>)
 8001b84:	0312      	lsls	r2, r2, #12
 8001b86:	1a1b      	subs	r3, r3, r0
 8001b88:	055b      	lsls	r3, r3, #21
 8001b8a:	0b12      	lsrs	r2, r2, #12
 8001b8c:	0d5b      	lsrs	r3, r3, #21
 8001b8e:	e7e1      	b.n	8001b54 <__aeabi_f2d+0x20>
 8001b90:	2d00      	cmp	r5, #0
 8001b92:	d009      	beq.n	8001ba8 <__aeabi_f2d+0x74>
 8001b94:	0b13      	lsrs	r3, r2, #12
 8001b96:	2280      	movs	r2, #128	@ 0x80
 8001b98:	0312      	lsls	r2, r2, #12
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	076d      	lsls	r5, r5, #29
 8001b9e:	4b08      	ldr	r3, [pc, #32]	@ (8001bc0 <__aeabi_f2d+0x8c>)
 8001ba0:	e7d8      	b.n	8001b54 <__aeabi_f2d+0x20>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	e7d5      	b.n	8001b54 <__aeabi_f2d+0x20>
 8001ba8:	2200      	movs	r2, #0
 8001baa:	4b05      	ldr	r3, [pc, #20]	@ (8001bc0 <__aeabi_f2d+0x8c>)
 8001bac:	e7d2      	b.n	8001b54 <__aeabi_f2d+0x20>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	002a      	movs	r2, r5
 8001bb2:	3b0b      	subs	r3, #11
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	2500      	movs	r5, #0
 8001bb8:	e7e3      	b.n	8001b82 <__aeabi_f2d+0x4e>
 8001bba:	46c0      	nop			@ (mov r8, r8)
 8001bbc:	00000389 	.word	0x00000389
 8001bc0:	000007ff 	.word	0x000007ff

08001bc4 <__aeabi_d2f>:
 8001bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc6:	004b      	lsls	r3, r1, #1
 8001bc8:	030f      	lsls	r7, r1, #12
 8001bca:	0d5b      	lsrs	r3, r3, #21
 8001bcc:	4c3b      	ldr	r4, [pc, #236]	@ (8001cbc <__aeabi_d2f+0xf8>)
 8001bce:	0f45      	lsrs	r5, r0, #29
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	0a7f      	lsrs	r7, r7, #9
 8001bd4:	1c5e      	adds	r6, r3, #1
 8001bd6:	432f      	orrs	r7, r5
 8001bd8:	9000      	str	r0, [sp, #0]
 8001bda:	9101      	str	r1, [sp, #4]
 8001bdc:	0fca      	lsrs	r2, r1, #31
 8001bde:	00c5      	lsls	r5, r0, #3
 8001be0:	4226      	tst	r6, r4
 8001be2:	d00b      	beq.n	8001bfc <__aeabi_d2f+0x38>
 8001be4:	4936      	ldr	r1, [pc, #216]	@ (8001cc0 <__aeabi_d2f+0xfc>)
 8001be6:	185c      	adds	r4, r3, r1
 8001be8:	2cfe      	cmp	r4, #254	@ 0xfe
 8001bea:	dd13      	ble.n	8001c14 <__aeabi_d2f+0x50>
 8001bec:	20ff      	movs	r0, #255	@ 0xff
 8001bee:	2300      	movs	r3, #0
 8001bf0:	05c0      	lsls	r0, r0, #23
 8001bf2:	4318      	orrs	r0, r3
 8001bf4:	07d2      	lsls	r2, r2, #31
 8001bf6:	4310      	orrs	r0, r2
 8001bf8:	b003      	add	sp, #12
 8001bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d102      	bne.n	8001c06 <__aeabi_d2f+0x42>
 8001c00:	2000      	movs	r0, #0
 8001c02:	2300      	movs	r3, #0
 8001c04:	e7f4      	b.n	8001bf0 <__aeabi_d2f+0x2c>
 8001c06:	433d      	orrs	r5, r7
 8001c08:	d0f0      	beq.n	8001bec <__aeabi_d2f+0x28>
 8001c0a:	2380      	movs	r3, #128	@ 0x80
 8001c0c:	03db      	lsls	r3, r3, #15
 8001c0e:	20ff      	movs	r0, #255	@ 0xff
 8001c10:	433b      	orrs	r3, r7
 8001c12:	e7ed      	b.n	8001bf0 <__aeabi_d2f+0x2c>
 8001c14:	2c00      	cmp	r4, #0
 8001c16:	dd14      	ble.n	8001c42 <__aeabi_d2f+0x7e>
 8001c18:	9b00      	ldr	r3, [sp, #0]
 8001c1a:	00ff      	lsls	r7, r7, #3
 8001c1c:	019b      	lsls	r3, r3, #6
 8001c1e:	1e58      	subs	r0, r3, #1
 8001c20:	4183      	sbcs	r3, r0
 8001c22:	0f69      	lsrs	r1, r5, #29
 8001c24:	433b      	orrs	r3, r7
 8001c26:	430b      	orrs	r3, r1
 8001c28:	0759      	lsls	r1, r3, #29
 8001c2a:	d041      	beq.n	8001cb0 <__aeabi_d2f+0xec>
 8001c2c:	210f      	movs	r1, #15
 8001c2e:	4019      	ands	r1, r3
 8001c30:	2904      	cmp	r1, #4
 8001c32:	d028      	beq.n	8001c86 <__aeabi_d2f+0xc2>
 8001c34:	3304      	adds	r3, #4
 8001c36:	0159      	lsls	r1, r3, #5
 8001c38:	d525      	bpl.n	8001c86 <__aeabi_d2f+0xc2>
 8001c3a:	3401      	adds	r4, #1
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	b2e0      	uxtb	r0, r4
 8001c40:	e7d6      	b.n	8001bf0 <__aeabi_d2f+0x2c>
 8001c42:	0021      	movs	r1, r4
 8001c44:	3117      	adds	r1, #23
 8001c46:	dbdb      	blt.n	8001c00 <__aeabi_d2f+0x3c>
 8001c48:	2180      	movs	r1, #128	@ 0x80
 8001c4a:	201e      	movs	r0, #30
 8001c4c:	0409      	lsls	r1, r1, #16
 8001c4e:	4339      	orrs	r1, r7
 8001c50:	1b00      	subs	r0, r0, r4
 8001c52:	281f      	cmp	r0, #31
 8001c54:	dd1b      	ble.n	8001c8e <__aeabi_d2f+0xca>
 8001c56:	2602      	movs	r6, #2
 8001c58:	4276      	negs	r6, r6
 8001c5a:	1b34      	subs	r4, r6, r4
 8001c5c:	000e      	movs	r6, r1
 8001c5e:	40e6      	lsrs	r6, r4
 8001c60:	0034      	movs	r4, r6
 8001c62:	2820      	cmp	r0, #32
 8001c64:	d004      	beq.n	8001c70 <__aeabi_d2f+0xac>
 8001c66:	4817      	ldr	r0, [pc, #92]	@ (8001cc4 <__aeabi_d2f+0x100>)
 8001c68:	4684      	mov	ip, r0
 8001c6a:	4463      	add	r3, ip
 8001c6c:	4099      	lsls	r1, r3
 8001c6e:	430d      	orrs	r5, r1
 8001c70:	002b      	movs	r3, r5
 8001c72:	1e59      	subs	r1, r3, #1
 8001c74:	418b      	sbcs	r3, r1
 8001c76:	4323      	orrs	r3, r4
 8001c78:	0759      	lsls	r1, r3, #29
 8001c7a:	d015      	beq.n	8001ca8 <__aeabi_d2f+0xe4>
 8001c7c:	210f      	movs	r1, #15
 8001c7e:	2400      	movs	r4, #0
 8001c80:	4019      	ands	r1, r3
 8001c82:	2904      	cmp	r1, #4
 8001c84:	d117      	bne.n	8001cb6 <__aeabi_d2f+0xf2>
 8001c86:	019b      	lsls	r3, r3, #6
 8001c88:	0a5b      	lsrs	r3, r3, #9
 8001c8a:	b2e0      	uxtb	r0, r4
 8001c8c:	e7b0      	b.n	8001bf0 <__aeabi_d2f+0x2c>
 8001c8e:	4c0e      	ldr	r4, [pc, #56]	@ (8001cc8 <__aeabi_d2f+0x104>)
 8001c90:	191c      	adds	r4, r3, r4
 8001c92:	002b      	movs	r3, r5
 8001c94:	40a5      	lsls	r5, r4
 8001c96:	40c3      	lsrs	r3, r0
 8001c98:	40a1      	lsls	r1, r4
 8001c9a:	1e68      	subs	r0, r5, #1
 8001c9c:	4185      	sbcs	r5, r0
 8001c9e:	4329      	orrs	r1, r5
 8001ca0:	430b      	orrs	r3, r1
 8001ca2:	2400      	movs	r4, #0
 8001ca4:	0759      	lsls	r1, r3, #29
 8001ca6:	d1c1      	bne.n	8001c2c <__aeabi_d2f+0x68>
 8001ca8:	019b      	lsls	r3, r3, #6
 8001caa:	2000      	movs	r0, #0
 8001cac:	0a5b      	lsrs	r3, r3, #9
 8001cae:	e79f      	b.n	8001bf0 <__aeabi_d2f+0x2c>
 8001cb0:	08db      	lsrs	r3, r3, #3
 8001cb2:	b2e0      	uxtb	r0, r4
 8001cb4:	e79c      	b.n	8001bf0 <__aeabi_d2f+0x2c>
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	e7e5      	b.n	8001c86 <__aeabi_d2f+0xc2>
 8001cba:	46c0      	nop			@ (mov r8, r8)
 8001cbc:	000007fe 	.word	0x000007fe
 8001cc0:	fffffc80 	.word	0xfffffc80
 8001cc4:	fffffca2 	.word	0xfffffca2
 8001cc8:	fffffc82 	.word	0xfffffc82

08001ccc <__aeabi_cfrcmple>:
 8001ccc:	4684      	mov	ip, r0
 8001cce:	0008      	movs	r0, r1
 8001cd0:	4661      	mov	r1, ip
 8001cd2:	e7ff      	b.n	8001cd4 <__aeabi_cfcmpeq>

08001cd4 <__aeabi_cfcmpeq>:
 8001cd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001cd6:	f000 f8d5 	bl	8001e84 <__lesf2>
 8001cda:	2800      	cmp	r0, #0
 8001cdc:	d401      	bmi.n	8001ce2 <__aeabi_cfcmpeq+0xe>
 8001cde:	2100      	movs	r1, #0
 8001ce0:	42c8      	cmn	r0, r1
 8001ce2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001ce4 <__aeabi_fcmpeq>:
 8001ce4:	b510      	push	{r4, lr}
 8001ce6:	f000 f855 	bl	8001d94 <__eqsf2>
 8001cea:	4240      	negs	r0, r0
 8001cec:	3001      	adds	r0, #1
 8001cee:	bd10      	pop	{r4, pc}

08001cf0 <__aeabi_fcmplt>:
 8001cf0:	b510      	push	{r4, lr}
 8001cf2:	f000 f8c7 	bl	8001e84 <__lesf2>
 8001cf6:	2800      	cmp	r0, #0
 8001cf8:	db01      	blt.n	8001cfe <__aeabi_fcmplt+0xe>
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	bd10      	pop	{r4, pc}
 8001cfe:	2001      	movs	r0, #1
 8001d00:	bd10      	pop	{r4, pc}
 8001d02:	46c0      	nop			@ (mov r8, r8)

08001d04 <__aeabi_fcmple>:
 8001d04:	b510      	push	{r4, lr}
 8001d06:	f000 f8bd 	bl	8001e84 <__lesf2>
 8001d0a:	2800      	cmp	r0, #0
 8001d0c:	dd01      	ble.n	8001d12 <__aeabi_fcmple+0xe>
 8001d0e:	2000      	movs	r0, #0
 8001d10:	bd10      	pop	{r4, pc}
 8001d12:	2001      	movs	r0, #1
 8001d14:	bd10      	pop	{r4, pc}
 8001d16:	46c0      	nop			@ (mov r8, r8)

08001d18 <__aeabi_fcmpgt>:
 8001d18:	b510      	push	{r4, lr}
 8001d1a:	f000 f863 	bl	8001de4 <__gesf2>
 8001d1e:	2800      	cmp	r0, #0
 8001d20:	dc01      	bgt.n	8001d26 <__aeabi_fcmpgt+0xe>
 8001d22:	2000      	movs	r0, #0
 8001d24:	bd10      	pop	{r4, pc}
 8001d26:	2001      	movs	r0, #1
 8001d28:	bd10      	pop	{r4, pc}
 8001d2a:	46c0      	nop			@ (mov r8, r8)

08001d2c <__aeabi_fcmpge>:
 8001d2c:	b510      	push	{r4, lr}
 8001d2e:	f000 f859 	bl	8001de4 <__gesf2>
 8001d32:	2800      	cmp	r0, #0
 8001d34:	da01      	bge.n	8001d3a <__aeabi_fcmpge+0xe>
 8001d36:	2000      	movs	r0, #0
 8001d38:	bd10      	pop	{r4, pc}
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	bd10      	pop	{r4, pc}
 8001d3e:	46c0      	nop			@ (mov r8, r8)

08001d40 <__clzsi2>:
 8001d40:	211c      	movs	r1, #28
 8001d42:	2301      	movs	r3, #1
 8001d44:	041b      	lsls	r3, r3, #16
 8001d46:	4298      	cmp	r0, r3
 8001d48:	d301      	bcc.n	8001d4e <__clzsi2+0xe>
 8001d4a:	0c00      	lsrs	r0, r0, #16
 8001d4c:	3910      	subs	r1, #16
 8001d4e:	0a1b      	lsrs	r3, r3, #8
 8001d50:	4298      	cmp	r0, r3
 8001d52:	d301      	bcc.n	8001d58 <__clzsi2+0x18>
 8001d54:	0a00      	lsrs	r0, r0, #8
 8001d56:	3908      	subs	r1, #8
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	4298      	cmp	r0, r3
 8001d5c:	d301      	bcc.n	8001d62 <__clzsi2+0x22>
 8001d5e:	0900      	lsrs	r0, r0, #4
 8001d60:	3904      	subs	r1, #4
 8001d62:	a202      	add	r2, pc, #8	@ (adr r2, 8001d6c <__clzsi2+0x2c>)
 8001d64:	5c10      	ldrb	r0, [r2, r0]
 8001d66:	1840      	adds	r0, r0, r1
 8001d68:	4770      	bx	lr
 8001d6a:	46c0      	nop			@ (mov r8, r8)
 8001d6c:	02020304 	.word	0x02020304
 8001d70:	01010101 	.word	0x01010101
	...

08001d7c <__clzdi2>:
 8001d7c:	b510      	push	{r4, lr}
 8001d7e:	2900      	cmp	r1, #0
 8001d80:	d103      	bne.n	8001d8a <__clzdi2+0xe>
 8001d82:	f7ff ffdd 	bl	8001d40 <__clzsi2>
 8001d86:	3020      	adds	r0, #32
 8001d88:	e002      	b.n	8001d90 <__clzdi2+0x14>
 8001d8a:	0008      	movs	r0, r1
 8001d8c:	f7ff ffd8 	bl	8001d40 <__clzsi2>
 8001d90:	bd10      	pop	{r4, pc}
 8001d92:	46c0      	nop			@ (mov r8, r8)

08001d94 <__eqsf2>:
 8001d94:	b570      	push	{r4, r5, r6, lr}
 8001d96:	0042      	lsls	r2, r0, #1
 8001d98:	024e      	lsls	r6, r1, #9
 8001d9a:	004c      	lsls	r4, r1, #1
 8001d9c:	0245      	lsls	r5, r0, #9
 8001d9e:	0a6d      	lsrs	r5, r5, #9
 8001da0:	0e12      	lsrs	r2, r2, #24
 8001da2:	0fc3      	lsrs	r3, r0, #31
 8001da4:	0a76      	lsrs	r6, r6, #9
 8001da6:	0e24      	lsrs	r4, r4, #24
 8001da8:	0fc9      	lsrs	r1, r1, #31
 8001daa:	2aff      	cmp	r2, #255	@ 0xff
 8001dac:	d010      	beq.n	8001dd0 <__eqsf2+0x3c>
 8001dae:	2cff      	cmp	r4, #255	@ 0xff
 8001db0:	d00c      	beq.n	8001dcc <__eqsf2+0x38>
 8001db2:	2001      	movs	r0, #1
 8001db4:	42a2      	cmp	r2, r4
 8001db6:	d10a      	bne.n	8001dce <__eqsf2+0x3a>
 8001db8:	42b5      	cmp	r5, r6
 8001dba:	d108      	bne.n	8001dce <__eqsf2+0x3a>
 8001dbc:	428b      	cmp	r3, r1
 8001dbe:	d00f      	beq.n	8001de0 <__eqsf2+0x4c>
 8001dc0:	2a00      	cmp	r2, #0
 8001dc2:	d104      	bne.n	8001dce <__eqsf2+0x3a>
 8001dc4:	0028      	movs	r0, r5
 8001dc6:	1e43      	subs	r3, r0, #1
 8001dc8:	4198      	sbcs	r0, r3
 8001dca:	e000      	b.n	8001dce <__eqsf2+0x3a>
 8001dcc:	2001      	movs	r0, #1
 8001dce:	bd70      	pop	{r4, r5, r6, pc}
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	2cff      	cmp	r4, #255	@ 0xff
 8001dd4:	d1fb      	bne.n	8001dce <__eqsf2+0x3a>
 8001dd6:	4335      	orrs	r5, r6
 8001dd8:	d1f9      	bne.n	8001dce <__eqsf2+0x3a>
 8001dda:	404b      	eors	r3, r1
 8001ddc:	0018      	movs	r0, r3
 8001dde:	e7f6      	b.n	8001dce <__eqsf2+0x3a>
 8001de0:	2000      	movs	r0, #0
 8001de2:	e7f4      	b.n	8001dce <__eqsf2+0x3a>

08001de4 <__gesf2>:
 8001de4:	b530      	push	{r4, r5, lr}
 8001de6:	0042      	lsls	r2, r0, #1
 8001de8:	0244      	lsls	r4, r0, #9
 8001dea:	024d      	lsls	r5, r1, #9
 8001dec:	0fc3      	lsrs	r3, r0, #31
 8001dee:	0048      	lsls	r0, r1, #1
 8001df0:	0a64      	lsrs	r4, r4, #9
 8001df2:	0e12      	lsrs	r2, r2, #24
 8001df4:	0a6d      	lsrs	r5, r5, #9
 8001df6:	0e00      	lsrs	r0, r0, #24
 8001df8:	0fc9      	lsrs	r1, r1, #31
 8001dfa:	2aff      	cmp	r2, #255	@ 0xff
 8001dfc:	d019      	beq.n	8001e32 <__gesf2+0x4e>
 8001dfe:	28ff      	cmp	r0, #255	@ 0xff
 8001e00:	d00b      	beq.n	8001e1a <__gesf2+0x36>
 8001e02:	2a00      	cmp	r2, #0
 8001e04:	d11e      	bne.n	8001e44 <__gesf2+0x60>
 8001e06:	2800      	cmp	r0, #0
 8001e08:	d10b      	bne.n	8001e22 <__gesf2+0x3e>
 8001e0a:	2d00      	cmp	r5, #0
 8001e0c:	d027      	beq.n	8001e5e <__gesf2+0x7a>
 8001e0e:	2c00      	cmp	r4, #0
 8001e10:	d134      	bne.n	8001e7c <__gesf2+0x98>
 8001e12:	2900      	cmp	r1, #0
 8001e14:	d02f      	beq.n	8001e76 <__gesf2+0x92>
 8001e16:	0008      	movs	r0, r1
 8001e18:	bd30      	pop	{r4, r5, pc}
 8001e1a:	2d00      	cmp	r5, #0
 8001e1c:	d128      	bne.n	8001e70 <__gesf2+0x8c>
 8001e1e:	2a00      	cmp	r2, #0
 8001e20:	d101      	bne.n	8001e26 <__gesf2+0x42>
 8001e22:	2c00      	cmp	r4, #0
 8001e24:	d0f5      	beq.n	8001e12 <__gesf2+0x2e>
 8001e26:	428b      	cmp	r3, r1
 8001e28:	d107      	bne.n	8001e3a <__gesf2+0x56>
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d023      	beq.n	8001e76 <__gesf2+0x92>
 8001e2e:	0018      	movs	r0, r3
 8001e30:	e7f2      	b.n	8001e18 <__gesf2+0x34>
 8001e32:	2c00      	cmp	r4, #0
 8001e34:	d11c      	bne.n	8001e70 <__gesf2+0x8c>
 8001e36:	28ff      	cmp	r0, #255	@ 0xff
 8001e38:	d014      	beq.n	8001e64 <__gesf2+0x80>
 8001e3a:	1e58      	subs	r0, r3, #1
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	4018      	ands	r0, r3
 8001e40:	3801      	subs	r0, #1
 8001e42:	e7e9      	b.n	8001e18 <__gesf2+0x34>
 8001e44:	2800      	cmp	r0, #0
 8001e46:	d0f8      	beq.n	8001e3a <__gesf2+0x56>
 8001e48:	428b      	cmp	r3, r1
 8001e4a:	d1f6      	bne.n	8001e3a <__gesf2+0x56>
 8001e4c:	4282      	cmp	r2, r0
 8001e4e:	dcf4      	bgt.n	8001e3a <__gesf2+0x56>
 8001e50:	dbeb      	blt.n	8001e2a <__gesf2+0x46>
 8001e52:	42ac      	cmp	r4, r5
 8001e54:	d8f1      	bhi.n	8001e3a <__gesf2+0x56>
 8001e56:	2000      	movs	r0, #0
 8001e58:	42ac      	cmp	r4, r5
 8001e5a:	d2dd      	bcs.n	8001e18 <__gesf2+0x34>
 8001e5c:	e7e5      	b.n	8001e2a <__gesf2+0x46>
 8001e5e:	2c00      	cmp	r4, #0
 8001e60:	d0da      	beq.n	8001e18 <__gesf2+0x34>
 8001e62:	e7ea      	b.n	8001e3a <__gesf2+0x56>
 8001e64:	2d00      	cmp	r5, #0
 8001e66:	d103      	bne.n	8001e70 <__gesf2+0x8c>
 8001e68:	428b      	cmp	r3, r1
 8001e6a:	d1e6      	bne.n	8001e3a <__gesf2+0x56>
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	e7d3      	b.n	8001e18 <__gesf2+0x34>
 8001e70:	2002      	movs	r0, #2
 8001e72:	4240      	negs	r0, r0
 8001e74:	e7d0      	b.n	8001e18 <__gesf2+0x34>
 8001e76:	2001      	movs	r0, #1
 8001e78:	4240      	negs	r0, r0
 8001e7a:	e7cd      	b.n	8001e18 <__gesf2+0x34>
 8001e7c:	428b      	cmp	r3, r1
 8001e7e:	d0e8      	beq.n	8001e52 <__gesf2+0x6e>
 8001e80:	e7db      	b.n	8001e3a <__gesf2+0x56>
 8001e82:	46c0      	nop			@ (mov r8, r8)

08001e84 <__lesf2>:
 8001e84:	b530      	push	{r4, r5, lr}
 8001e86:	0042      	lsls	r2, r0, #1
 8001e88:	0244      	lsls	r4, r0, #9
 8001e8a:	024d      	lsls	r5, r1, #9
 8001e8c:	0fc3      	lsrs	r3, r0, #31
 8001e8e:	0048      	lsls	r0, r1, #1
 8001e90:	0a64      	lsrs	r4, r4, #9
 8001e92:	0e12      	lsrs	r2, r2, #24
 8001e94:	0a6d      	lsrs	r5, r5, #9
 8001e96:	0e00      	lsrs	r0, r0, #24
 8001e98:	0fc9      	lsrs	r1, r1, #31
 8001e9a:	2aff      	cmp	r2, #255	@ 0xff
 8001e9c:	d01a      	beq.n	8001ed4 <__lesf2+0x50>
 8001e9e:	28ff      	cmp	r0, #255	@ 0xff
 8001ea0:	d00e      	beq.n	8001ec0 <__lesf2+0x3c>
 8001ea2:	2a00      	cmp	r2, #0
 8001ea4:	d11e      	bne.n	8001ee4 <__lesf2+0x60>
 8001ea6:	2800      	cmp	r0, #0
 8001ea8:	d10e      	bne.n	8001ec8 <__lesf2+0x44>
 8001eaa:	2d00      	cmp	r5, #0
 8001eac:	d02a      	beq.n	8001f04 <__lesf2+0x80>
 8001eae:	2c00      	cmp	r4, #0
 8001eb0:	d00c      	beq.n	8001ecc <__lesf2+0x48>
 8001eb2:	428b      	cmp	r3, r1
 8001eb4:	d01d      	beq.n	8001ef2 <__lesf2+0x6e>
 8001eb6:	1e58      	subs	r0, r3, #1
 8001eb8:	2302      	movs	r3, #2
 8001eba:	4018      	ands	r0, r3
 8001ebc:	3801      	subs	r0, #1
 8001ebe:	e010      	b.n	8001ee2 <__lesf2+0x5e>
 8001ec0:	2d00      	cmp	r5, #0
 8001ec2:	d10d      	bne.n	8001ee0 <__lesf2+0x5c>
 8001ec4:	2a00      	cmp	r2, #0
 8001ec6:	d120      	bne.n	8001f0a <__lesf2+0x86>
 8001ec8:	2c00      	cmp	r4, #0
 8001eca:	d11e      	bne.n	8001f0a <__lesf2+0x86>
 8001ecc:	2900      	cmp	r1, #0
 8001ece:	d023      	beq.n	8001f18 <__lesf2+0x94>
 8001ed0:	0008      	movs	r0, r1
 8001ed2:	e006      	b.n	8001ee2 <__lesf2+0x5e>
 8001ed4:	2c00      	cmp	r4, #0
 8001ed6:	d103      	bne.n	8001ee0 <__lesf2+0x5c>
 8001ed8:	28ff      	cmp	r0, #255	@ 0xff
 8001eda:	d1ec      	bne.n	8001eb6 <__lesf2+0x32>
 8001edc:	2d00      	cmp	r5, #0
 8001ede:	d017      	beq.n	8001f10 <__lesf2+0x8c>
 8001ee0:	2002      	movs	r0, #2
 8001ee2:	bd30      	pop	{r4, r5, pc}
 8001ee4:	2800      	cmp	r0, #0
 8001ee6:	d0e6      	beq.n	8001eb6 <__lesf2+0x32>
 8001ee8:	428b      	cmp	r3, r1
 8001eea:	d1e4      	bne.n	8001eb6 <__lesf2+0x32>
 8001eec:	4282      	cmp	r2, r0
 8001eee:	dce2      	bgt.n	8001eb6 <__lesf2+0x32>
 8001ef0:	db04      	blt.n	8001efc <__lesf2+0x78>
 8001ef2:	42ac      	cmp	r4, r5
 8001ef4:	d8df      	bhi.n	8001eb6 <__lesf2+0x32>
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	42ac      	cmp	r4, r5
 8001efa:	d2f2      	bcs.n	8001ee2 <__lesf2+0x5e>
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00b      	beq.n	8001f18 <__lesf2+0x94>
 8001f00:	0018      	movs	r0, r3
 8001f02:	e7ee      	b.n	8001ee2 <__lesf2+0x5e>
 8001f04:	2c00      	cmp	r4, #0
 8001f06:	d0ec      	beq.n	8001ee2 <__lesf2+0x5e>
 8001f08:	e7d5      	b.n	8001eb6 <__lesf2+0x32>
 8001f0a:	428b      	cmp	r3, r1
 8001f0c:	d1d3      	bne.n	8001eb6 <__lesf2+0x32>
 8001f0e:	e7f5      	b.n	8001efc <__lesf2+0x78>
 8001f10:	2000      	movs	r0, #0
 8001f12:	428b      	cmp	r3, r1
 8001f14:	d0e5      	beq.n	8001ee2 <__lesf2+0x5e>
 8001f16:	e7ce      	b.n	8001eb6 <__lesf2+0x32>
 8001f18:	2001      	movs	r0, #1
 8001f1a:	4240      	negs	r0, r0
 8001f1c:	e7e1      	b.n	8001ee2 <__lesf2+0x5e>
 8001f1e:	46c0      	nop			@ (mov r8, r8)

08001f20 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	0004      	movs	r4, r0
 8001f28:	0008      	movs	r0, r1
 8001f2a:	0011      	movs	r1, r2
 8001f2c:	1dbb      	adds	r3, r7, #6
 8001f2e:	1c22      	adds	r2, r4, #0
 8001f30:	801a      	strh	r2, [r3, #0]
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	1c02      	adds	r2, r0, #0
 8001f36:	801a      	strh	r2, [r3, #0]
 8001f38:	1cbb      	adds	r3, r7, #2
 8001f3a:	1c0a      	adds	r2, r1, #0
 8001f3c:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(y,x, color);
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	8818      	ldrh	r0, [r3, #0]
 8001f42:	1dbb      	adds	r3, r7, #6
 8001f44:	8819      	ldrh	r1, [r3, #0]
 8001f46:	1cbb      	adds	r3, r7, #2
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	001a      	movs	r2, r3
 8001f4c:	f000 fd00 	bl	8002950 <ST7735_DrawPixel>
}
 8001f50:	46c0      	nop			@ (mov r8, r8)
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b003      	add	sp, #12
 8001f56:	bd90      	pop	{r4, r7, pc}

08001f58 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8001f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f5a:	46c6      	mov	lr, r8
 8001f5c:	b500      	push	{lr}
 8001f5e:	b090      	sub	sp, #64	@ 0x40
 8001f60:	af04      	add	r7, sp, #16
 8001f62:	468c      	mov	ip, r1
 8001f64:	0016      	movs	r6, r2
 8001f66:	0019      	movs	r1, r3
 8001f68:	221e      	movs	r2, #30
 8001f6a:	18ba      	adds	r2, r7, r2
 8001f6c:	1c03      	adds	r3, r0, #0
 8001f6e:	8013      	strh	r3, [r2, #0]
 8001f70:	231c      	movs	r3, #28
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	4662      	mov	r2, ip
 8001f76:	801a      	strh	r2, [r3, #0]
 8001f78:	201a      	movs	r0, #26
 8001f7a:	183b      	adds	r3, r7, r0
 8001f7c:	1c32      	adds	r2, r6, #0
 8001f7e:	801a      	strh	r2, [r3, #0]
 8001f80:	2018      	movs	r0, #24
 8001f82:	183b      	adds	r3, r7, r0
 8001f84:	1c0a      	adds	r2, r1, #0
 8001f86:	801a      	strh	r2, [r3, #0]
 8001f88:	466b      	mov	r3, sp
 8001f8a:	4698      	mov	r8, r3
	uint16_t pallette[] = {color};
 8001f8c:	230c      	movs	r3, #12
 8001f8e:	0001      	movs	r1, r0
 8001f90:	185e      	adds	r6, r3, r1
 8001f92:	19f2      	adds	r2, r6, r7
 8001f94:	2030      	movs	r0, #48	@ 0x30
 8001f96:	1846      	adds	r6, r0, r1
 8001f98:	19f3      	adds	r3, r6, r7
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	8013      	strh	r3, [r2, #0]
	    uint16_t pixels[w*h][2];
 8001f9e:	201a      	movs	r0, #26
 8001fa0:	183b      	adds	r3, r7, r0
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	5e9b      	ldrsh	r3, [r3, r2]
 8001fa6:	187a      	adds	r2, r7, r1
 8001fa8:	2000      	movs	r0, #0
 8001faa:	5e12      	ldrsh	r2, [r2, r0]
 8001fac:	4353      	muls	r3, r2
 8001fae:	1e5a      	subs	r2, r3, #1
 8001fb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001fb2:	001a      	movs	r2, r3
 8001fb4:	60ba      	str	r2, [r7, #8]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60fa      	str	r2, [r7, #12]
 8001fba:	68b8      	ldr	r0, [r7, #8]
 8001fbc:	68f9      	ldr	r1, [r7, #12]
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	0ed2      	lsrs	r2, r2, #27
 8001fc2:	000e      	movs	r6, r1
 8001fc4:	0176      	lsls	r6, r6, #5
 8001fc6:	617e      	str	r6, [r7, #20]
 8001fc8:	697e      	ldr	r6, [r7, #20]
 8001fca:	4316      	orrs	r6, r2
 8001fcc:	617e      	str	r6, [r7, #20]
 8001fce:	0002      	movs	r2, r0
 8001fd0:	0152      	lsls	r2, r2, #5
 8001fd2:	613a      	str	r2, [r7, #16]
 8001fd4:	001a      	movs	r2, r3
 8001fd6:	603a      	str	r2, [r7, #0]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	607a      	str	r2, [r7, #4]
 8001fdc:	6838      	ldr	r0, [r7, #0]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	0002      	movs	r2, r0
 8001fe2:	0ed2      	lsrs	r2, r2, #27
 8001fe4:	000e      	movs	r6, r1
 8001fe6:	0175      	lsls	r5, r6, #5
 8001fe8:	4315      	orrs	r5, r2
 8001fea:	0002      	movs	r2, r0
 8001fec:	0154      	lsls	r4, r2, #5
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	3307      	adds	r3, #7
 8001ff2:	08db      	lsrs	r3, r3, #3
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	466a      	mov	r2, sp
 8001ff8:	1ad2      	subs	r2, r2, r3
 8001ffa:	4695      	mov	sp, r2
 8001ffc:	ab04      	add	r3, sp, #16
 8001ffe:	3301      	adds	r3, #1
 8002000:	085b      	lsrs	r3, r3, #1
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	62bb      	str	r3, [r7, #40]	@ 0x28

	    pixels[0][0] = 0;
 8002006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002008:	2200      	movs	r2, #0
 800200a:	801a      	strh	r2, [r3, #0]
	    pixels[0][1] = w*h;
 800200c:	201a      	movs	r0, #26
 800200e:	183b      	adds	r3, r7, r0
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	2118      	movs	r1, #24
 8002014:	187a      	adds	r2, r7, r1
 8002016:	8812      	ldrh	r2, [r2, #0]
 8002018:	4353      	muls	r3, r2
 800201a:	b29a      	uxth	r2, r3
 800201c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800201e:	805a      	strh	r2, [r3, #2]
	    drawImage(pixels, pallette, x, y, w, h, 1);
 8002020:	221e      	movs	r2, #30
 8002022:	18bb      	adds	r3, r7, r2
 8002024:	881c      	ldrh	r4, [r3, #0]
 8002026:	231c      	movs	r3, #28
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	881d      	ldrh	r5, [r3, #0]
 800202c:	183b      	adds	r3, r7, r0
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	0008      	movs	r0, r1
 8002032:	187a      	adds	r2, r7, r1
 8002034:	8812      	ldrh	r2, [r2, #0]
 8002036:	210c      	movs	r1, #12
 8002038:	1809      	adds	r1, r1, r0
 800203a:	19c9      	adds	r1, r1, r7
 800203c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800203e:	2601      	movs	r6, #1
 8002040:	46b4      	mov	ip, r6
 8002042:	4666      	mov	r6, ip
 8002044:	9602      	str	r6, [sp, #8]
 8002046:	9201      	str	r2, [sp, #4]
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	002b      	movs	r3, r5
 800204c:	0022      	movs	r2, r4
 800204e:	f000 f9dd 	bl	800240c <drawImage>
 8002052:	46c5      	mov	sp, r8

	//ST7735_FillRectangle(x, y, w, h, color);
}
 8002054:	46c0      	nop			@ (mov r8, r8)
 8002056:	46bd      	mov	sp, r7
 8002058:	b00c      	add	sp, #48	@ 0x30
 800205a:	bc80      	pop	{r7}
 800205c:	46b8      	mov	r8, r7
 800205e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002060 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	0004      	movs	r4, r0
 8002068:	0008      	movs	r0, r1
 800206a:	0011      	movs	r1, r2
 800206c:	1dbb      	adds	r3, r7, #6
 800206e:	1c22      	adds	r2, r4, #0
 8002070:	801a      	strh	r2, [r3, #0]
 8002072:	1d3b      	adds	r3, r7, #4
 8002074:	1c02      	adds	r2, r0, #0
 8002076:	801a      	strh	r2, [r3, #0]
 8002078:	1cbb      	adds	r3, r7, #2
 800207a:	1c0a      	adds	r2, r1, #0
 800207c:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 800207e:	1cbb      	adds	r3, r7, #2
 8002080:	881a      	ldrh	r2, [r3, #0]
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2100      	movs	r1, #0
 8002086:	5e59      	ldrsh	r1, [r3, r1]
 8002088:	1dbb      	adds	r3, r7, #6
 800208a:	2000      	movs	r0, #0
 800208c:	5e1b      	ldrsh	r3, [r3, r0]
 800208e:	0018      	movs	r0, r3
 8002090:	f7ff ff46 	bl	8001f20 <drawPixel>
}
 8002094:	46c0      	nop			@ (mov r8, r8)
 8002096:	46bd      	mov	sp, r7
 8002098:	b003      	add	sp, #12
 800209a:	bd90      	pop	{r4, r7, pc}

0800209c <drawString>:
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
void drawString(int16_t x, int16_t y, char* c, int16_t textColor, int16_t bgColor, uint8_t size, uint8_t spacing)
{
 800209c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209e:	b089      	sub	sp, #36	@ 0x24
 80020a0:	af02      	add	r7, sp, #8
 80020a2:	0004      	movs	r4, r0
 80020a4:	0008      	movs	r0, r1
 80020a6:	60ba      	str	r2, [r7, #8]
 80020a8:	0019      	movs	r1, r3
 80020aa:	230e      	movs	r3, #14
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	1c22      	adds	r2, r4, #0
 80020b0:	801a      	strh	r2, [r3, #0]
 80020b2:	230c      	movs	r3, #12
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	1c02      	adds	r2, r0, #0
 80020b8:	801a      	strh	r2, [r3, #0]
 80020ba:	1dbb      	adds	r3, r7, #6
 80020bc:	1c0a      	adds	r2, r1, #0
 80020be:	801a      	strh	r2, [r3, #0]
	uint16_t i =0;
 80020c0:	2316      	movs	r3, #22
 80020c2:	18fb      	adds	r3, r7, r3
 80020c4:	2200      	movs	r2, #0
 80020c6:	801a      	strh	r2, [r3, #0]

	while(c[i])
 80020c8:	e03f      	b.n	800214a <drawString+0xae>
	{
		drawChar(x, y, c[i], textColor, bgColor, size);
 80020ca:	2516      	movs	r5, #22
 80020cc:	197b      	adds	r3, r7, r5
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	18d3      	adds	r3, r2, r3
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	469c      	mov	ip, r3
 80020d8:	1dbb      	adds	r3, r7, #6
 80020da:	2400      	movs	r4, #0
 80020dc:	5f1c      	ldrsh	r4, [r3, r4]
 80020de:	230c      	movs	r3, #12
 80020e0:	18fb      	adds	r3, r7, r3
 80020e2:	2100      	movs	r1, #0
 80020e4:	5e59      	ldrsh	r1, [r3, r1]
 80020e6:	260e      	movs	r6, #14
 80020e8:	19bb      	adds	r3, r7, r6
 80020ea:	2000      	movs	r0, #0
 80020ec:	5e18      	ldrsh	r0, [r3, r0]
 80020ee:	232c      	movs	r3, #44	@ 0x2c
 80020f0:	2208      	movs	r2, #8
 80020f2:	189b      	adds	r3, r3, r2
 80020f4:	19db      	adds	r3, r3, r7
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	9301      	str	r3, [sp, #4]
 80020fa:	2328      	movs	r3, #40	@ 0x28
 80020fc:	189b      	adds	r3, r3, r2
 80020fe:	19db      	adds	r3, r3, r7
 8002100:	2200      	movs	r2, #0
 8002102:	5e9b      	ldrsh	r3, [r3, r2]
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	0023      	movs	r3, r4
 8002108:	4662      	mov	r2, ip
 800210a:	f000 f82b 	bl	8002164 <drawChar>
		x+=(size*6)+spacing;
 800210e:	232c      	movs	r3, #44	@ 0x2c
 8002110:	2108      	movs	r1, #8
 8002112:	185b      	adds	r3, r3, r1
 8002114:	19db      	adds	r3, r3, r7
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	b29b      	uxth	r3, r3
 800211a:	1c1a      	adds	r2, r3, #0
 800211c:	1c13      	adds	r3, r2, #0
 800211e:	18db      	adds	r3, r3, r3
 8002120:	189b      	adds	r3, r3, r2
 8002122:	18db      	adds	r3, r3, r3
 8002124:	b29a      	uxth	r2, r3
 8002126:	2330      	movs	r3, #48	@ 0x30
 8002128:	185b      	adds	r3, r3, r1
 800212a:	19db      	adds	r3, r3, r7
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	18d3      	adds	r3, r2, r3
 8002132:	b29a      	uxth	r2, r3
 8002134:	19bb      	adds	r3, r7, r6
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	18d3      	adds	r3, r2, r3
 800213a:	b29a      	uxth	r2, r3
 800213c:	19bb      	adds	r3, r7, r6
 800213e:	801a      	strh	r2, [r3, #0]
		i++;
 8002140:	197b      	adds	r3, r7, r5
 8002142:	881a      	ldrh	r2, [r3, #0]
 8002144:	197b      	adds	r3, r7, r5
 8002146:	3201      	adds	r2, #1
 8002148:	801a      	strh	r2, [r3, #0]
	while(c[i])
 800214a:	2316      	movs	r3, #22
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	18d3      	adds	r3, r2, r3
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1b7      	bne.n	80020ca <drawString+0x2e>
	}
}
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	46c0      	nop			@ (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	b007      	add	sp, #28
 8002162:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002164 <drawChar>:
void drawChar(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 8002164:	b5b0      	push	{r4, r5, r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af02      	add	r7, sp, #8
 800216a:	0005      	movs	r5, r0
 800216c:	000c      	movs	r4, r1
 800216e:	0010      	movs	r0, r2
 8002170:	0019      	movs	r1, r3
 8002172:	1dbb      	adds	r3, r7, #6
 8002174:	1c2a      	adds	r2, r5, #0
 8002176:	801a      	strh	r2, [r3, #0]
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	1c22      	adds	r2, r4, #0
 800217c:	801a      	strh	r2, [r3, #0]
 800217e:	1cfb      	adds	r3, r7, #3
 8002180:	1c02      	adds	r2, r0, #0
 8002182:	701a      	strb	r2, [r3, #0]
 8002184:	003b      	movs	r3, r7
 8002186:	1c0a      	adds	r2, r1, #0
 8002188:	801a      	strh	r2, [r3, #0]
     //(y >= _height))           //||
     //((x + 5 * size - 1) < 0) ||
     //((y + 8 * size - 1) < 0))
   // return;

  for (i=0; i<6; i++ ) {
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	e0bd      	b.n	800230c <drawChar+0x1a8>
    if ((i) == 5)
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	2b05      	cmp	r3, #5
 8002194:	d104      	bne.n	80021a0 <drawChar+0x3c>
      line = 0x0;
 8002196:	2317      	movs	r3, #23
 8002198:	18fb      	adds	r3, r7, r3
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
 800219e:	e00b      	b.n	80021b8 <drawChar+0x54>
    else
      line = Font[(c*5)+(i)];
 80021a0:	1cfb      	adds	r3, r7, #3
 80021a2:	781a      	ldrb	r2, [r3, #0]
 80021a4:	0013      	movs	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	189a      	adds	r2, r3, r2
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	18d2      	adds	r2, r2, r3
 80021ae:	2317      	movs	r3, #23
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	495b      	ldr	r1, [pc, #364]	@ (8002320 <drawChar+0x1bc>)
 80021b4:	5c8a      	ldrb	r2, [r1, r2]
 80021b6:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	e09f      	b.n	80022fe <drawChar+0x19a>
      if (line & 0x1) {
 80021be:	2317      	movs	r3, #23
 80021c0:	18fb      	adds	r3, r7, r3
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2201      	movs	r2, #1
 80021c6:	4013      	ands	r3, r2
 80021c8:	d043      	beq.n	8002252 <drawChar+0xee>
        if (size == 1)
 80021ca:	232c      	movs	r3, #44	@ 0x2c
 80021cc:	18fb      	adds	r3, r7, r3
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d115      	bne.n	8002200 <drawChar+0x9c>
          writePixel(x+(i), y+(7-j), textColor);
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	1dbb      	adds	r3, r7, #6
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	18d3      	adds	r3, r2, r3
 80021de:	b29b      	uxth	r3, r3
 80021e0:	b218      	sxth	r0, r3
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	881a      	ldrh	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	3307      	adds	r3, #7
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	b219      	sxth	r1, r3
 80021f4:	003b      	movs	r3, r7
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	001a      	movs	r2, r3
 80021fa:	f7ff ff31 	bl	8002060 <writePixel>
 80021fe:	e075      	b.n	80022ec <drawChar+0x188>
        else {
          fillRect(x+((i)*size), y+((7-j)*size), size, size, textColor);
 8002200:	212c      	movs	r1, #44	@ 0x2c
 8002202:	187b      	adds	r3, r7, r1
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	b29b      	uxth	r3, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	b292      	uxth	r2, r2
 800220c:	4353      	muls	r3, r2
 800220e:	b29a      	uxth	r2, r3
 8002210:	1dbb      	adds	r3, r7, #6
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	18d3      	adds	r3, r2, r3
 8002216:	b29b      	uxth	r3, r3
 8002218:	b218      	sxth	r0, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2207      	movs	r2, #7
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	b29b      	uxth	r3, r3
 8002222:	000c      	movs	r4, r1
 8002224:	187a      	adds	r2, r7, r1
 8002226:	7812      	ldrb	r2, [r2, #0]
 8002228:	b292      	uxth	r2, r2
 800222a:	4353      	muls	r3, r2
 800222c:	b29a      	uxth	r2, r3
 800222e:	1d3b      	adds	r3, r7, #4
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	18d3      	adds	r3, r2, r3
 8002234:	b29b      	uxth	r3, r3
 8002236:	b219      	sxth	r1, r3
 8002238:	193b      	adds	r3, r7, r4
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	b21a      	sxth	r2, r3
 800223e:	193b      	adds	r3, r7, r4
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b21c      	sxth	r4, r3
 8002244:	003b      	movs	r3, r7
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	0023      	movs	r3, r4
 800224c:	f7ff fe84 	bl	8001f58 <fillRect>
 8002250:	e04c      	b.n	80022ec <drawChar+0x188>
        }
      } else if (bgColor != textColor) {
 8002252:	2428      	movs	r4, #40	@ 0x28
 8002254:	193b      	adds	r3, r7, r4
 8002256:	0039      	movs	r1, r7
 8002258:	2200      	movs	r2, #0
 800225a:	5e9a      	ldrsh	r2, [r3, r2]
 800225c:	2300      	movs	r3, #0
 800225e:	5ecb      	ldrsh	r3, [r1, r3]
 8002260:	429a      	cmp	r2, r3
 8002262:	d043      	beq.n	80022ec <drawChar+0x188>
        if (size == 1) // default size
 8002264:	232c      	movs	r3, #44	@ 0x2c
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d115      	bne.n	800229a <drawChar+0x136>
          writePixel(x+(i), y+(7-j), bgColor);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	b29a      	uxth	r2, r3
 8002272:	1dbb      	adds	r3, r7, #6
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	18d3      	adds	r3, r2, r3
 8002278:	b29b      	uxth	r3, r3
 800227a:	b218      	sxth	r0, r3
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	881a      	ldrh	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	b29b      	uxth	r3, r3
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	b29b      	uxth	r3, r3
 8002288:	3307      	adds	r3, #7
 800228a:	b29b      	uxth	r3, r3
 800228c:	b219      	sxth	r1, r3
 800228e:	193b      	adds	r3, r7, r4
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	001a      	movs	r2, r3
 8002294:	f7ff fee4 	bl	8002060 <writePixel>
 8002298:	e028      	b.n	80022ec <drawChar+0x188>
        else {  // big size
          fillRect(x+(i)*size, y+(7-j)*size, size, size, bgColor);
 800229a:	212c      	movs	r1, #44	@ 0x2c
 800229c:	187b      	adds	r3, r7, r1
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	b292      	uxth	r2, r2
 80022a6:	4353      	muls	r3, r2
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	1dbb      	adds	r3, r7, #6
 80022ac:	881b      	ldrh	r3, [r3, #0]
 80022ae:	18d3      	adds	r3, r2, r3
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	b218      	sxth	r0, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2207      	movs	r2, #7
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	000c      	movs	r4, r1
 80022be:	187a      	adds	r2, r7, r1
 80022c0:	7812      	ldrb	r2, [r2, #0]
 80022c2:	b292      	uxth	r2, r2
 80022c4:	4353      	muls	r3, r2
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	1d3b      	adds	r3, r7, #4
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	18d3      	adds	r3, r2, r3
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	b219      	sxth	r1, r3
 80022d2:	193b      	adds	r3, r7, r4
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	b21a      	sxth	r2, r3
 80022d8:	193b      	adds	r3, r7, r4
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	b21c      	sxth	r4, r3
 80022de:	2328      	movs	r3, #40	@ 0x28
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	0023      	movs	r3, r4
 80022e8:	f7ff fe36 	bl	8001f58 <fillRect>
        }
      }
      line >>= 1;
 80022ec:	2217      	movs	r2, #23
 80022ee:	18bb      	adds	r3, r7, r2
 80022f0:	18ba      	adds	r2, r7, r2
 80022f2:	7812      	ldrb	r2, [r2, #0]
 80022f4:	0852      	lsrs	r2, r2, #1
 80022f6:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	3301      	adds	r3, #1
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2b07      	cmp	r3, #7
 8002302:	dc00      	bgt.n	8002306 <drawChar+0x1a2>
 8002304:	e75b      	b.n	80021be <drawChar+0x5a>
  for (i=0; i<6; i++ ) {
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	3301      	adds	r3, #1
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	2b05      	cmp	r3, #5
 8002310:	dc00      	bgt.n	8002314 <drawChar+0x1b0>
 8002312:	e73d      	b.n	8002190 <drawChar+0x2c>
    }
  }
}
 8002314:	46c0      	nop			@ (mov r8, r8)
 8002316:	46c0      	nop			@ (mov r8, r8)
 8002318:	46bd      	mov	sp, r7
 800231a:	b006      	add	sp, #24
 800231c:	bdb0      	pop	{r4, r5, r7, pc}
 800231e:	46c0      	nop			@ (mov r8, r8)
 8002320:	0800984c 	.word	0x0800984c

08002324 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8002324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002326:	b091      	sub	sp, #68	@ 0x44
 8002328:	af04      	add	r7, sp, #16
 800232a:	231e      	movs	r3, #30
 800232c:	18f9      	adds	r1, r7, r3
 800232e:	8008      	strh	r0, [r1, #0]
 8002330:	4669      	mov	r1, sp
 8002332:	000e      	movs	r6, r1
    uint16_t pallette[] = {color};
 8002334:	210c      	movs	r1, #12
 8002336:	2318      	movs	r3, #24
 8002338:	18cb      	adds	r3, r1, r3
 800233a:	19d9      	adds	r1, r3, r7
 800233c:	231e      	movs	r3, #30
 800233e:	18f8      	adds	r0, r7, r3
 8002340:	8800      	ldrh	r0, [r0, #0]
 8002342:	8008      	strh	r0, [r1, #0]
    uint16_t pixels[_width*_height][2];
 8002344:	492f      	ldr	r1, [pc, #188]	@ (8002404 <fillScreen+0xe0>)
 8002346:	2300      	movs	r3, #0
 8002348:	5ec9      	ldrsh	r1, [r1, r3]
 800234a:	0008      	movs	r0, r1
 800234c:	492e      	ldr	r1, [pc, #184]	@ (8002408 <fillScreen+0xe4>)
 800234e:	2300      	movs	r3, #0
 8002350:	5ec9      	ldrsh	r1, [r1, r3]
 8002352:	4341      	muls	r1, r0
 8002354:	1e48      	subs	r0, r1, #1
 8002356:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002358:	0008      	movs	r0, r1
 800235a:	6138      	str	r0, [r7, #16]
 800235c:	2000      	movs	r0, #0
 800235e:	6178      	str	r0, [r7, #20]
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	0010      	movs	r0, r2
 8002366:	0ec0      	lsrs	r0, r0, #27
 8002368:	613a      	str	r2, [r7, #16]
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	015d      	lsls	r5, r3, #5
 800236e:	4305      	orrs	r5, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	015c      	lsls	r4, r3, #5
 8002374:	0008      	movs	r0, r1
 8002376:	6038      	str	r0, [r7, #0]
 8002378:	2000      	movs	r0, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	683c      	ldr	r4, [r7, #0]
 800237e:	687d      	ldr	r5, [r7, #4]
 8002380:	0023      	movs	r3, r4
 8002382:	0ed8      	lsrs	r0, r3, #27
 8002384:	002b      	movs	r3, r5
 8002386:	015b      	lsls	r3, r3, #5
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4303      	orrs	r3, r0
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	0023      	movs	r3, r4
 8002392:	015b      	lsls	r3, r3, #5
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	000b      	movs	r3, r1
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	3307      	adds	r3, #7
 800239c:	08db      	lsrs	r3, r3, #3
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	466a      	mov	r2, sp
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	469d      	mov	sp, r3
 80023a6:	ab04      	add	r3, sp, #16
 80023a8:	3301      	adds	r3, #1
 80023aa:	085b      	lsrs	r3, r3, #1
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	62bb      	str	r3, [r7, #40]	@ 0x28

    pixels[0][0] = 0;
 80023b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b2:	2200      	movs	r2, #0
 80023b4:	801a      	strh	r2, [r3, #0]
    pixels[0][1] = _width*_height;
 80023b6:	4b13      	ldr	r3, [pc, #76]	@ (8002404 <fillScreen+0xe0>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	5e9b      	ldrsh	r3, [r3, r2]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	4a12      	ldr	r2, [pc, #72]	@ (8002408 <fillScreen+0xe4>)
 80023c0:	2000      	movs	r0, #0
 80023c2:	5e12      	ldrsh	r2, [r2, r0]
 80023c4:	b292      	uxth	r2, r2
 80023c6:	4353      	muls	r3, r2
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023cc:	805a      	strh	r2, [r3, #2]
    drawImage(pixels, pallette, 0, 0, _width, _height, 1);
 80023ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002404 <fillScreen+0xe0>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	5e9b      	ldrsh	r3, [r3, r2]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002408 <fillScreen+0xe4>)
 80023d8:	2000      	movs	r0, #0
 80023da:	5e12      	ldrsh	r2, [r2, r0]
 80023dc:	b292      	uxth	r2, r2
 80023de:	210c      	movs	r1, #12
 80023e0:	2018      	movs	r0, #24
 80023e2:	1809      	adds	r1, r1, r0
 80023e4:	19c9      	adds	r1, r1, r7
 80023e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80023e8:	2401      	movs	r4, #1
 80023ea:	9402      	str	r4, [sp, #8]
 80023ec:	9201      	str	r2, [sp, #4]
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2300      	movs	r3, #0
 80023f2:	2200      	movs	r2, #0
 80023f4:	f000 f80a 	bl	800240c <drawImage>
 80023f8:	46b5      	mov	sp, r6
	//fillRect(0, 0, _width, _height, color);
}
 80023fa:	46c0      	nop			@ (mov r8, r8)
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b00d      	add	sp, #52	@ 0x34
 8002400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002402:	46c0      	nop			@ (mov r8, r8)
 8002404:	20000efc 	.word	0x20000efc
 8002408:	20000efe 	.word	0x20000efe

0800240c <drawImage>:

void drawImage(uint16_t image[][2], uint16_t palette[], uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
{
 800240c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800240e:	46c6      	mov	lr, r8
 8002410:	b500      	push	{lr}
 8002412:	b092      	sub	sp, #72	@ 0x48
 8002414:	af02      	add	r7, sp, #8
 8002416:	6278      	str	r0, [r7, #36]	@ 0x24
 8002418:	6239      	str	r1, [r7, #32]
 800241a:	0019      	movs	r1, r3
 800241c:	231e      	movs	r3, #30
 800241e:	18fb      	adds	r3, r7, r3
 8002420:	801a      	strh	r2, [r3, #0]
 8002422:	231c      	movs	r3, #28
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	1c0a      	adds	r2, r1, #0
 8002428:	801a      	strh	r2, [r3, #0]
 800242a:	466b      	mov	r3, sp
 800242c:	4698      	mov	r8, r3
	uint16_t i;
	uint16_t j;
	uint16_t totalInd =0;
 800242e:	2322      	movs	r3, #34	@ 0x22
 8002430:	2118      	movs	r1, #24
 8002432:	185b      	adds	r3, r3, r1
 8002434:	19db      	adds	r3, r3, r7
 8002436:	2200      	movs	r2, #0
 8002438:	801a      	strh	r2, [r3, #0]
	uint16_t ind;
	uint16_t count;
	uint16_t bufffer[w*h];
 800243a:	2340      	movs	r3, #64	@ 0x40
 800243c:	185b      	adds	r3, r3, r1
 800243e:	19db      	adds	r3, r3, r7
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	2244      	movs	r2, #68	@ 0x44
 8002444:	1852      	adds	r2, r2, r1
 8002446:	19d2      	adds	r2, r2, r7
 8002448:	8812      	ldrh	r2, [r2, #0]
 800244a:	4353      	muls	r3, r2
 800244c:	1e5a      	subs	r2, r3, #1
 800244e:	637a      	str	r2, [r7, #52]	@ 0x34
 8002450:	001a      	movs	r2, r3
 8002452:	60ba      	str	r2, [r7, #8]
 8002454:	2200      	movs	r2, #0
 8002456:	60fa      	str	r2, [r7, #12]
 8002458:	68b8      	ldr	r0, [r7, #8]
 800245a:	68f9      	ldr	r1, [r7, #12]
 800245c:	0002      	movs	r2, r0
 800245e:	0f12      	lsrs	r2, r2, #28
 8002460:	000e      	movs	r6, r1
 8002462:	0136      	lsls	r6, r6, #4
 8002464:	617e      	str	r6, [r7, #20]
 8002466:	697e      	ldr	r6, [r7, #20]
 8002468:	4316      	orrs	r6, r2
 800246a:	617e      	str	r6, [r7, #20]
 800246c:	0002      	movs	r2, r0
 800246e:	0112      	lsls	r2, r2, #4
 8002470:	613a      	str	r2, [r7, #16]
 8002472:	001a      	movs	r2, r3
 8002474:	603a      	str	r2, [r7, #0]
 8002476:	2200      	movs	r2, #0
 8002478:	607a      	str	r2, [r7, #4]
 800247a:	6838      	ldr	r0, [r7, #0]
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	0002      	movs	r2, r0
 8002480:	0f12      	lsrs	r2, r2, #28
 8002482:	000e      	movs	r6, r1
 8002484:	0135      	lsls	r5, r6, #4
 8002486:	4315      	orrs	r5, r2
 8002488:	0002      	movs	r2, r0
 800248a:	0114      	lsls	r4, r2, #4
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	3307      	adds	r3, #7
 8002490:	08db      	lsrs	r3, r3, #3
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	466a      	mov	r2, sp
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	469d      	mov	sp, r3
 800249a:	ab02      	add	r3, sp, #8
 800249c:	3301      	adds	r3, #1
 800249e:	085b      	lsrs	r3, r3, #1
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	633b      	str	r3, [r7, #48]	@ 0x30
for(i=0; i<c; i++)
 80024a4:	2326      	movs	r3, #38	@ 0x26
 80024a6:	2118      	movs	r1, #24
 80024a8:	185b      	adds	r3, r3, r1
 80024aa:	19db      	adds	r3, r3, r7
 80024ac:	2200      	movs	r2, #0
 80024ae:	801a      	strh	r2, [r3, #0]
 80024b0:	e04d      	b.n	800254e <drawImage+0x142>
{
	ind = image[i][0];
 80024b2:	2126      	movs	r1, #38	@ 0x26
 80024b4:	2018      	movs	r0, #24
 80024b6:	180b      	adds	r3, r1, r0
 80024b8:	19db      	adds	r3, r3, r7
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c0:	18d2      	adds	r2, r2, r3
 80024c2:	2316      	movs	r3, #22
 80024c4:	181b      	adds	r3, r3, r0
 80024c6:	19db      	adds	r3, r3, r7
 80024c8:	8812      	ldrh	r2, [r2, #0]
 80024ca:	801a      	strh	r2, [r3, #0]
	count = image[i][1];
 80024cc:	180b      	adds	r3, r1, r0
 80024ce:	19db      	adds	r3, r3, r7
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024d6:	18d2      	adds	r2, r2, r3
 80024d8:	2314      	movs	r3, #20
 80024da:	181b      	adds	r3, r3, r0
 80024dc:	19db      	adds	r3, r3, r7
 80024de:	8852      	ldrh	r2, [r2, #2]
 80024e0:	801a      	strh	r2, [r3, #0]
	for(j=0; j<count; j++)
 80024e2:	2324      	movs	r3, #36	@ 0x24
 80024e4:	181b      	adds	r3, r3, r0
 80024e6:	19db      	adds	r3, r3, r7
 80024e8:	2200      	movs	r2, #0
 80024ea:	801a      	strh	r2, [r3, #0]
 80024ec:	e01c      	b.n	8002528 <drawImage+0x11c>
	{
		bufffer[totalInd++] = palette[ind];
 80024ee:	2316      	movs	r3, #22
 80024f0:	2418      	movs	r4, #24
 80024f2:	191b      	adds	r3, r3, r4
 80024f4:	19db      	adds	r3, r3, r7
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	6a3a      	ldr	r2, [r7, #32]
 80024fc:	18d2      	adds	r2, r2, r3
 80024fe:	2122      	movs	r1, #34	@ 0x22
 8002500:	190b      	adds	r3, r1, r4
 8002502:	19db      	adds	r3, r3, r7
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	1909      	adds	r1, r1, r4
 8002508:	19c9      	adds	r1, r1, r7
 800250a:	1c58      	adds	r0, r3, #1
 800250c:	8008      	strh	r0, [r1, #0]
 800250e:	0018      	movs	r0, r3
 8002510:	8811      	ldrh	r1, [r2, #0]
 8002512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002514:	0042      	lsls	r2, r0, #1
 8002516:	52d1      	strh	r1, [r2, r3]
	for(j=0; j<count; j++)
 8002518:	2124      	movs	r1, #36	@ 0x24
 800251a:	190b      	adds	r3, r1, r4
 800251c:	19db      	adds	r3, r3, r7
 800251e:	881a      	ldrh	r2, [r3, #0]
 8002520:	190b      	adds	r3, r1, r4
 8002522:	19db      	adds	r3, r3, r7
 8002524:	3201      	adds	r2, #1
 8002526:	801a      	strh	r2, [r3, #0]
 8002528:	2324      	movs	r3, #36	@ 0x24
 800252a:	2018      	movs	r0, #24
 800252c:	181b      	adds	r3, r3, r0
 800252e:	19da      	adds	r2, r3, r7
 8002530:	2314      	movs	r3, #20
 8002532:	181b      	adds	r3, r3, r0
 8002534:	19db      	adds	r3, r3, r7
 8002536:	8812      	ldrh	r2, [r2, #0]
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d3d7      	bcc.n	80024ee <drawImage+0xe2>
for(i=0; i<c; i++)
 800253e:	2126      	movs	r1, #38	@ 0x26
 8002540:	180b      	adds	r3, r1, r0
 8002542:	19db      	adds	r3, r3, r7
 8002544:	881a      	ldrh	r2, [r3, #0]
 8002546:	180b      	adds	r3, r1, r0
 8002548:	19db      	adds	r3, r3, r7
 800254a:	3201      	adds	r2, #1
 800254c:	801a      	strh	r2, [r3, #0]
 800254e:	2326      	movs	r3, #38	@ 0x26
 8002550:	2118      	movs	r1, #24
 8002552:	185b      	adds	r3, r3, r1
 8002554:	19da      	adds	r2, r3, r7
 8002556:	2348      	movs	r3, #72	@ 0x48
 8002558:	185b      	adds	r3, r3, r1
 800255a:	19db      	adds	r3, r3, r7
 800255c:	8812      	ldrh	r2, [r2, #0]
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d3a6      	bcc.n	80024b2 <drawImage+0xa6>
	}
}
ST7735_DrawImage(y, x, w, h, bufffer);
 8002564:	2344      	movs	r3, #68	@ 0x44
 8002566:	185b      	adds	r3, r3, r1
 8002568:	19db      	adds	r3, r3, r7
 800256a:	881c      	ldrh	r4, [r3, #0]
 800256c:	2340      	movs	r3, #64	@ 0x40
 800256e:	185b      	adds	r3, r3, r1
 8002570:	19db      	adds	r3, r3, r7
 8002572:	881a      	ldrh	r2, [r3, #0]
 8002574:	231e      	movs	r3, #30
 8002576:	18fb      	adds	r3, r7, r3
 8002578:	8819      	ldrh	r1, [r3, #0]
 800257a:	231c      	movs	r3, #28
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	8818      	ldrh	r0, [r3, #0]
 8002580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	0023      	movs	r3, r4
 8002586:	f000 fa31 	bl	80029ec <ST7735_DrawImage>
 800258a:	46c5      	mov	sp, r8
}
 800258c:	46c0      	nop			@ (mov r8, r8)
 800258e:	46bd      	mov	sp, r7
 8002590:	b010      	add	sp, #64	@ 0x40
 8002592:	bc80      	pop	{r7}
 8002594:	46b8      	mov	r8, r7
 8002596:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002598 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800259c:	23a0      	movs	r3, #160	@ 0xa0
 800259e:	05db      	lsls	r3, r3, #23
 80025a0:	2200      	movs	r2, #0
 80025a2:	2120      	movs	r1, #32
 80025a4:	0018      	movs	r0, r3
 80025a6:	f001 ff5a 	bl	800445e <HAL_GPIO_WritePin>
}
 80025aa:	46c0      	nop			@ (mov r8, r8)
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <ST7735_Unselect>:

void ST7735_Unselect()
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80025b4:	23a0      	movs	r3, #160	@ 0xa0
 80025b6:	05db      	lsls	r3, r3, #23
 80025b8:	2201      	movs	r2, #1
 80025ba:	2120      	movs	r1, #32
 80025bc:	0018      	movs	r0, r3
 80025be:	f001 ff4e 	bl	800445e <HAL_GPIO_WritePin>
}
 80025c2:	46c0      	nop			@ (mov r8, r8)
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <ST7735_Reset>:

void ST7735_Reset()
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80025cc:	2380      	movs	r3, #128	@ 0x80
 80025ce:	0219      	lsls	r1, r3, #8
 80025d0:	23a0      	movs	r3, #160	@ 0xa0
 80025d2:	05db      	lsls	r3, r3, #23
 80025d4:	2200      	movs	r2, #0
 80025d6:	0018      	movs	r0, r3
 80025d8:	f001 ff41 	bl	800445e <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80025dc:	2005      	movs	r0, #5
 80025de:	f001 fcc7 	bl	8003f70 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80025e2:	2380      	movs	r3, #128	@ 0x80
 80025e4:	0219      	lsls	r1, r3, #8
 80025e6:	23a0      	movs	r3, #160	@ 0xa0
 80025e8:	05db      	lsls	r3, r3, #23
 80025ea:	2201      	movs	r2, #1
 80025ec:	0018      	movs	r0, r3
 80025ee:	f001 ff36 	bl	800445e <HAL_GPIO_WritePin>
}
 80025f2:	46c0      	nop			@ (mov r8, r8)
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	0002      	movs	r2, r0
 8002600:	1dfb      	adds	r3, r7, #7
 8002602:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8002604:	23a0      	movs	r3, #160	@ 0xa0
 8002606:	05db      	lsls	r3, r3, #23
 8002608:	2200      	movs	r2, #0
 800260a:	2110      	movs	r1, #16
 800260c:	0018      	movs	r0, r3
 800260e:	f001 ff26 	bl	800445e <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002612:	2301      	movs	r3, #1
 8002614:	425b      	negs	r3, r3
 8002616:	1df9      	adds	r1, r7, #7
 8002618:	4803      	ldr	r0, [pc, #12]	@ (8002628 <ST7735_WriteCommand+0x30>)
 800261a:	2201      	movs	r2, #1
 800261c:	f004 f882 	bl	8006724 <HAL_SPI_Transmit>
}
 8002620:	46c0      	nop			@ (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b002      	add	sp, #8
 8002626:	bd80      	pop	{r7, pc}
 8002628:	2000138c 	.word	0x2000138c

0800262c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8002636:	23a0      	movs	r3, #160	@ 0xa0
 8002638:	05db      	lsls	r3, r3, #23
 800263a:	2201      	movs	r2, #1
 800263c:	2110      	movs	r1, #16
 800263e:	0018      	movs	r0, r3
 8002640:	f001 ff0d 	bl	800445e <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	b29a      	uxth	r2, r3
 8002648:	2301      	movs	r3, #1
 800264a:	425b      	negs	r3, r3
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	4803      	ldr	r0, [pc, #12]	@ (800265c <ST7735_WriteData+0x30>)
 8002650:	f004 f868 	bl	8006724 <HAL_SPI_Transmit>
}
 8002654:	46c0      	nop			@ (mov r8, r8)
 8002656:	46bd      	mov	sp, r7
 8002658:	b002      	add	sp, #8
 800265a:	bd80      	pop	{r7, pc}
 800265c:	2000138c 	.word	0x2000138c

08002660 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8002660:	b590      	push	{r4, r7, lr}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	1c5a      	adds	r2, r3, #1
 800266c:	607a      	str	r2, [r7, #4]
 800266e:	220f      	movs	r2, #15
 8002670:	18ba      	adds	r2, r7, r2
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 8002676:	e04a      	b.n	800270e <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	210b      	movs	r1, #11
 8002680:	187a      	adds	r2, r7, r1
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 8002686:	187b      	adds	r3, r7, r1
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	0018      	movs	r0, r3
 800268c:	f7ff ffb4 	bl	80025f8 <ST7735_WriteCommand>

        numArgs = *addr++;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	200a      	movs	r0, #10
 8002698:	183a      	adds	r2, r7, r0
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800269e:	183b      	adds	r3, r7, r0
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	230c      	movs	r3, #12
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	2180      	movs	r1, #128	@ 0x80
 80026aa:	400a      	ands	r2, r1
 80026ac:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 80026ae:	183b      	adds	r3, r7, r0
 80026b0:	183a      	adds	r2, r7, r0
 80026b2:	7812      	ldrb	r2, [r2, #0]
 80026b4:	217f      	movs	r1, #127	@ 0x7f
 80026b6:	400a      	ands	r2, r1
 80026b8:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 80026ba:	183b      	adds	r3, r7, r0
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00c      	beq.n	80026dc <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80026c2:	0004      	movs	r4, r0
 80026c4:	183b      	adds	r3, r7, r0
 80026c6:	781a      	ldrb	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	0011      	movs	r1, r2
 80026cc:	0018      	movs	r0, r3
 80026ce:	f7ff ffad 	bl	800262c <ST7735_WriteData>
            addr += numArgs;
 80026d2:	193b      	adds	r3, r7, r4
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	18d3      	adds	r3, r2, r3
 80026da:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80026dc:	210c      	movs	r1, #12
 80026de:	187b      	adds	r3, r7, r1
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d013      	beq.n	800270e <DisplayInit+0xae>
            ms = *addr++;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	781a      	ldrb	r2, [r3, #0]
 80026ee:	187b      	adds	r3, r7, r1
 80026f0:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 80026f2:	187b      	adds	r3, r7, r1
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	2bff      	cmp	r3, #255	@ 0xff
 80026f8:	d103      	bne.n	8002702 <DisplayInit+0xa2>
 80026fa:	187b      	adds	r3, r7, r1
 80026fc:	22fa      	movs	r2, #250	@ 0xfa
 80026fe:	0052      	lsls	r2, r2, #1
 8002700:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 8002702:	230c      	movs	r3, #12
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	0018      	movs	r0, r3
 800270a:	f001 fc31 	bl	8003f70 <HAL_Delay>
    while(numCommands--) {
 800270e:	220f      	movs	r2, #15
 8002710:	18bb      	adds	r3, r7, r2
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	18ba      	adds	r2, r7, r2
 8002716:	1e59      	subs	r1, r3, #1
 8002718:	7011      	strb	r1, [r2, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1ac      	bne.n	8002678 <DisplayInit+0x18>
        }
    }
}
 800271e:	46c0      	nop			@ (mov r8, r8)
 8002720:	46c0      	nop			@ (mov r8, r8)
 8002722:	46bd      	mov	sp, r7
 8002724:	b005      	add	sp, #20
 8002726:	bd90      	pop	{r4, r7, pc}

08002728 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8002728:	b5b0      	push	{r4, r5, r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	0005      	movs	r5, r0
 8002730:	000c      	movs	r4, r1
 8002732:	0010      	movs	r0, r2
 8002734:	0019      	movs	r1, r3
 8002736:	1dfb      	adds	r3, r7, #7
 8002738:	1c2a      	adds	r2, r5, #0
 800273a:	701a      	strb	r2, [r3, #0]
 800273c:	1dbb      	adds	r3, r7, #6
 800273e:	1c22      	adds	r2, r4, #0
 8002740:	701a      	strb	r2, [r3, #0]
 8002742:	1d7b      	adds	r3, r7, #5
 8002744:	1c02      	adds	r2, r0, #0
 8002746:	701a      	strb	r2, [r3, #0]
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	1c0a      	adds	r2, r1, #0
 800274c:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800274e:	202a      	movs	r0, #42	@ 0x2a
 8002750:	f7ff ff52 	bl	80025f8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8002754:	210c      	movs	r1, #12
 8002756:	187b      	adds	r3, r7, r1
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
 800275c:	4b1c      	ldr	r3, [pc, #112]	@ (80027d0 <ST7735_SetAddressWindow+0xa8>)
 800275e:	781a      	ldrb	r2, [r3, #0]
 8002760:	1dfb      	adds	r3, r7, #7
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	18d3      	adds	r3, r2, r3
 8002766:	b2da      	uxtb	r2, r3
 8002768:	187b      	adds	r3, r7, r1
 800276a:	705a      	strb	r2, [r3, #1]
 800276c:	187b      	adds	r3, r7, r1
 800276e:	2200      	movs	r2, #0
 8002770:	709a      	strb	r2, [r3, #2]
 8002772:	4b17      	ldr	r3, [pc, #92]	@ (80027d0 <ST7735_SetAddressWindow+0xa8>)
 8002774:	781a      	ldrb	r2, [r3, #0]
 8002776:	1d7b      	adds	r3, r7, #5
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	18d3      	adds	r3, r2, r3
 800277c:	b2da      	uxtb	r2, r3
 800277e:	187b      	adds	r3, r7, r1
 8002780:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8002782:	000c      	movs	r4, r1
 8002784:	187b      	adds	r3, r7, r1
 8002786:	2104      	movs	r1, #4
 8002788:	0018      	movs	r0, r3
 800278a:	f7ff ff4f 	bl	800262c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800278e:	202b      	movs	r0, #43	@ 0x2b
 8002790:	f7ff ff32 	bl	80025f8 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8002794:	4b0f      	ldr	r3, [pc, #60]	@ (80027d4 <ST7735_SetAddressWindow+0xac>)
 8002796:	781a      	ldrb	r2, [r3, #0]
 8002798:	1dbb      	adds	r3, r7, #6
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	18d3      	adds	r3, r2, r3
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	0021      	movs	r1, r4
 80027a2:	187b      	adds	r3, r7, r1
 80027a4:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 80027a6:	4b0b      	ldr	r3, [pc, #44]	@ (80027d4 <ST7735_SetAddressWindow+0xac>)
 80027a8:	781a      	ldrb	r2, [r3, #0]
 80027aa:	1d3b      	adds	r3, r7, #4
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	18d3      	adds	r3, r2, r3
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	187b      	adds	r3, r7, r1
 80027b4:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 80027b6:	187b      	adds	r3, r7, r1
 80027b8:	2104      	movs	r1, #4
 80027ba:	0018      	movs	r0, r3
 80027bc:	f7ff ff36 	bl	800262c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80027c0:	202c      	movs	r0, #44	@ 0x2c
 80027c2:	f7ff ff19 	bl	80025f8 <ST7735_WriteCommand>
}
 80027c6:	46c0      	nop			@ (mov r8, r8)
 80027c8:	46bd      	mov	sp, r7
 80027ca:	b004      	add	sp, #16
 80027cc:	bdb0      	pop	{r4, r5, r7, pc}
 80027ce:	46c0      	nop			@ (mov r8, r8)
 80027d0:	20000f03 	.word	0x20000f03
 80027d4:	20000f04 	.word	0x20000f04

080027d8 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	0002      	movs	r2, r0
 80027e0:	1dfb      	adds	r3, r7, #7
 80027e2:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 80027e4:	f7ff fed8 	bl	8002598 <ST7735_Select>
    ST7735_Reset();
 80027e8:	f7ff feee 	bl	80025c8 <ST7735_Reset>
    DisplayInit(init_cmds1);
 80027ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002828 <ST7735_Init+0x50>)
 80027ee:	0018      	movs	r0, r3
 80027f0:	f7ff ff36 	bl	8002660 <DisplayInit>
    DisplayInit(init_cmds2);
 80027f4:	4b0d      	ldr	r3, [pc, #52]	@ (800282c <ST7735_Init+0x54>)
 80027f6:	0018      	movs	r0, r3
 80027f8:	f7ff ff32 	bl	8002660 <DisplayInit>
    DisplayInit(init_cmds3);
 80027fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002830 <ST7735_Init+0x58>)
 80027fe:	0018      	movs	r0, r3
 8002800:	f7ff ff2e 	bl	8002660 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8002804:	4b0b      	ldr	r3, [pc, #44]	@ (8002834 <ST7735_Init+0x5c>)
 8002806:	2200      	movs	r2, #0
 8002808:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800280a:	4b0b      	ldr	r3, [pc, #44]	@ (8002838 <ST7735_Init+0x60>)
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8002810:	1dfb      	adds	r3, r7, #7
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	0018      	movs	r0, r3
 8002816:	f000 f811 	bl	800283c <ST7735_SetRotation>
    ST7735_Unselect();
 800281a:	f7ff fec9 	bl	80025b0 <ST7735_Unselect>

}
 800281e:	46c0      	nop			@ (mov r8, r8)
 8002820:	46bd      	mov	sp, r7
 8002822:	b002      	add	sp, #8
 8002824:	bd80      	pop	{r7, pc}
 8002826:	46c0      	nop			@ (mov r8, r8)
 8002828:	08009d48 	.word	0x08009d48
 800282c:	08009d80 	.word	0x08009d80
 8002830:	08009d90 	.word	0x08009d90
 8002834:	20000f01 	.word	0x20000f01
 8002838:	20000f02 	.word	0x20000f02

0800283c <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	0002      	movs	r2, r0
 8002844:	1dfb      	adds	r3, r7, #7
 8002846:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8002848:	230f      	movs	r3, #15
 800284a:	18fb      	adds	r3, r7, r3
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8002850:	1dfb      	adds	r3, r7, #7
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2203      	movs	r2, #3
 8002856:	4013      	ands	r3, r2
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4b36      	ldr	r3, [pc, #216]	@ (8002934 <ST7735_SetRotation+0xf8>)
 800285c:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800285e:	4b35      	ldr	r3, [pc, #212]	@ (8002934 <ST7735_SetRotation+0xf8>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b03      	cmp	r3, #3
 8002864:	d041      	beq.n	80028ea <ST7735_SetRotation+0xae>
 8002866:	dc53      	bgt.n	8002910 <ST7735_SetRotation+0xd4>
 8002868:	2b02      	cmp	r3, #2
 800286a:	d02b      	beq.n	80028c4 <ST7735_SetRotation+0x88>
 800286c:	dc50      	bgt.n	8002910 <ST7735_SetRotation+0xd4>
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <ST7735_SetRotation+0x3c>
 8002872:	2b01      	cmp	r3, #1
 8002874:	d013      	beq.n	800289e <ST7735_SetRotation+0x62>
 8002876:	e04b      	b.n	8002910 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8002878:	230f      	movs	r3, #15
 800287a:	18fb      	adds	r3, r7, r3
 800287c:	22c0      	movs	r2, #192	@ 0xc0
 800287e:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8002880:	4b2d      	ldr	r3, [pc, #180]	@ (8002938 <ST7735_SetRotation+0xfc>)
 8002882:	22a0      	movs	r2, #160	@ 0xa0
 8002884:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8002886:	4b2d      	ldr	r3, [pc, #180]	@ (800293c <ST7735_SetRotation+0x100>)
 8002888:	2280      	movs	r2, #128	@ 0x80
 800288a:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 800288c:	4b2c      	ldr	r3, [pc, #176]	@ (8002940 <ST7735_SetRotation+0x104>)
 800288e:	781a      	ldrb	r2, [r3, #0]
 8002890:	4b2c      	ldr	r3, [pc, #176]	@ (8002944 <ST7735_SetRotation+0x108>)
 8002892:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8002894:	4b2c      	ldr	r3, [pc, #176]	@ (8002948 <ST7735_SetRotation+0x10c>)
 8002896:	781a      	ldrb	r2, [r3, #0]
 8002898:	4b2c      	ldr	r3, [pc, #176]	@ (800294c <ST7735_SetRotation+0x110>)
 800289a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800289c:	e038      	b.n	8002910 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800289e:	230f      	movs	r3, #15
 80028a0:	18fb      	adds	r3, r7, r3
 80028a2:	22a0      	movs	r2, #160	@ 0xa0
 80028a4:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 80028a6:	4b25      	ldr	r3, [pc, #148]	@ (800293c <ST7735_SetRotation+0x100>)
 80028a8:	22a0      	movs	r2, #160	@ 0xa0
 80028aa:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80028ac:	4b22      	ldr	r3, [pc, #136]	@ (8002938 <ST7735_SetRotation+0xfc>)
 80028ae:	2280      	movs	r2, #128	@ 0x80
 80028b0:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80028b2:	4b23      	ldr	r3, [pc, #140]	@ (8002940 <ST7735_SetRotation+0x104>)
 80028b4:	781a      	ldrb	r2, [r3, #0]
 80028b6:	4b25      	ldr	r3, [pc, #148]	@ (800294c <ST7735_SetRotation+0x110>)
 80028b8:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80028ba:	4b23      	ldr	r3, [pc, #140]	@ (8002948 <ST7735_SetRotation+0x10c>)
 80028bc:	781a      	ldrb	r2, [r3, #0]
 80028be:	4b21      	ldr	r3, [pc, #132]	@ (8002944 <ST7735_SetRotation+0x108>)
 80028c0:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80028c2:	e025      	b.n	8002910 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 80028c4:	230f      	movs	r3, #15
 80028c6:	18fb      	adds	r3, r7, r3
 80028c8:	2200      	movs	r2, #0
 80028ca:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 80028cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002938 <ST7735_SetRotation+0xfc>)
 80028ce:	22a0      	movs	r2, #160	@ 0xa0
 80028d0:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80028d2:	4b1a      	ldr	r3, [pc, #104]	@ (800293c <ST7735_SetRotation+0x100>)
 80028d4:	2280      	movs	r2, #128	@ 0x80
 80028d6:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80028d8:	4b19      	ldr	r3, [pc, #100]	@ (8002940 <ST7735_SetRotation+0x104>)
 80028da:	781a      	ldrb	r2, [r3, #0]
 80028dc:	4b19      	ldr	r3, [pc, #100]	@ (8002944 <ST7735_SetRotation+0x108>)
 80028de:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80028e0:	4b19      	ldr	r3, [pc, #100]	@ (8002948 <ST7735_SetRotation+0x10c>)
 80028e2:	781a      	ldrb	r2, [r3, #0]
 80028e4:	4b19      	ldr	r3, [pc, #100]	@ (800294c <ST7735_SetRotation+0x110>)
 80028e6:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80028e8:	e012      	b.n	8002910 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80028ea:	230f      	movs	r3, #15
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	2260      	movs	r2, #96	@ 0x60
 80028f0:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 80028f2:	4b12      	ldr	r3, [pc, #72]	@ (800293c <ST7735_SetRotation+0x100>)
 80028f4:	22a0      	movs	r2, #160	@ 0xa0
 80028f6:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80028f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002938 <ST7735_SetRotation+0xfc>)
 80028fa:	2280      	movs	r2, #128	@ 0x80
 80028fc:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80028fe:	4b10      	ldr	r3, [pc, #64]	@ (8002940 <ST7735_SetRotation+0x104>)
 8002900:	781a      	ldrb	r2, [r3, #0]
 8002902:	4b12      	ldr	r3, [pc, #72]	@ (800294c <ST7735_SetRotation+0x110>)
 8002904:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8002906:	4b10      	ldr	r3, [pc, #64]	@ (8002948 <ST7735_SetRotation+0x10c>)
 8002908:	781a      	ldrb	r2, [r3, #0]
 800290a:	4b0e      	ldr	r3, [pc, #56]	@ (8002944 <ST7735_SetRotation+0x108>)
 800290c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800290e:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 8002910:	f7ff fe42 	bl	8002598 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8002914:	2036      	movs	r0, #54	@ 0x36
 8002916:	f7ff fe6f 	bl	80025f8 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 800291a:	230f      	movs	r3, #15
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	2101      	movs	r1, #1
 8002920:	0018      	movs	r0, r3
 8002922:	f7ff fe83 	bl	800262c <ST7735_WriteData>
  ST7735_Unselect();
 8002926:	f7ff fe43 	bl	80025b0 <ST7735_Unselect>
}
 800292a:	46c0      	nop			@ (mov r8, r8)
 800292c:	46bd      	mov	sp, r7
 800292e:	b004      	add	sp, #16
 8002930:	bd80      	pop	{r7, pc}
 8002932:	46c0      	nop			@ (mov r8, r8)
 8002934:	20000f00 	.word	0x20000f00
 8002938:	20000efe 	.word	0x20000efe
 800293c:	20000efc 	.word	0x20000efc
 8002940:	20000f01 	.word	0x20000f01
 8002944:	20000f03 	.word	0x20000f03
 8002948:	20000f02 	.word	0x20000f02
 800294c:	20000f04 	.word	0x20000f04

08002950 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8002950:	b590      	push	{r4, r7, lr}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	0004      	movs	r4, r0
 8002958:	0008      	movs	r0, r1
 800295a:	0011      	movs	r1, r2
 800295c:	1dbb      	adds	r3, r7, #6
 800295e:	1c22      	adds	r2, r4, #0
 8002960:	801a      	strh	r2, [r3, #0]
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	1c02      	adds	r2, r0, #0
 8002966:	801a      	strh	r2, [r3, #0]
 8002968:	1cbb      	adds	r3, r7, #2
 800296a:	1c0a      	adds	r2, r1, #0
 800296c:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 800296e:	1dbb      	adds	r3, r7, #6
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	4a1c      	ldr	r2, [pc, #112]	@ (80029e4 <ST7735_DrawPixel+0x94>)
 8002974:	2100      	movs	r1, #0
 8002976:	5e52      	ldrsh	r2, [r2, r1]
 8002978:	4293      	cmp	r3, r2
 800297a:	da2f      	bge.n	80029dc <ST7735_DrawPixel+0x8c>
 800297c:	1d3b      	adds	r3, r7, #4
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	4a19      	ldr	r2, [pc, #100]	@ (80029e8 <ST7735_DrawPixel+0x98>)
 8002982:	2100      	movs	r1, #0
 8002984:	5e52      	ldrsh	r2, [r2, r1]
 8002986:	4293      	cmp	r3, r2
 8002988:	da28      	bge.n	80029dc <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 800298a:	f7ff fe05 	bl	8002598 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800298e:	1dbb      	adds	r3, r7, #6
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	b2d8      	uxtb	r0, r3
 8002994:	1d3b      	adds	r3, r7, #4
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	b2d9      	uxtb	r1, r3
 800299a:	1dbb      	adds	r3, r7, #6
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	3301      	adds	r3, #1
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	1d3b      	adds	r3, r7, #4
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	3301      	adds	r3, #1
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	f7ff febb 	bl	8002728 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80029b2:	1cbb      	adds	r3, r7, #2
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	210c      	movs	r1, #12
 80029be:	187b      	adds	r3, r7, r1
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	1cbb      	adds	r3, r7, #2
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	187b      	adds	r3, r7, r1
 80029ca:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 80029cc:	187b      	adds	r3, r7, r1
 80029ce:	2102      	movs	r1, #2
 80029d0:	0018      	movs	r0, r3
 80029d2:	f7ff fe2b 	bl	800262c <ST7735_WriteData>

    ST7735_Unselect();
 80029d6:	f7ff fdeb 	bl	80025b0 <ST7735_Unselect>
 80029da:	e000      	b.n	80029de <ST7735_DrawPixel+0x8e>
        return;
 80029dc:	46c0      	nop			@ (mov r8, r8)
}
 80029de:	46bd      	mov	sp, r7
 80029e0:	b005      	add	sp, #20
 80029e2:	bd90      	pop	{r4, r7, pc}
 80029e4:	20000efc 	.word	0x20000efc
 80029e8:	20000efe 	.word	0x20000efe

080029ec <ST7735_DrawImage>:
    }

    ST7735_Unselect();
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 80029ec:	b5b0      	push	{r4, r5, r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	0005      	movs	r5, r0
 80029f4:	000c      	movs	r4, r1
 80029f6:	0010      	movs	r0, r2
 80029f8:	0019      	movs	r1, r3
 80029fa:	1dbb      	adds	r3, r7, #6
 80029fc:	1c2a      	adds	r2, r5, #0
 80029fe:	801a      	strh	r2, [r3, #0]
 8002a00:	1d3b      	adds	r3, r7, #4
 8002a02:	1c22      	adds	r2, r4, #0
 8002a04:	801a      	strh	r2, [r3, #0]
 8002a06:	1cbb      	adds	r3, r7, #2
 8002a08:	1c02      	adds	r2, r0, #0
 8002a0a:	801a      	strh	r2, [r3, #0]
 8002a0c:	003b      	movs	r3, r7
 8002a0e:	1c0a      	adds	r2, r1, #0
 8002a10:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8002a12:	1dbb      	adds	r3, r7, #6
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	4a2a      	ldr	r2, [pc, #168]	@ (8002ac0 <ST7735_DrawImage+0xd4>)
 8002a18:	2100      	movs	r1, #0
 8002a1a:	5e52      	ldrsh	r2, [r2, r1]
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	da47      	bge.n	8002ab0 <ST7735_DrawImage+0xc4>
 8002a20:	1d3b      	adds	r3, r7, #4
 8002a22:	881b      	ldrh	r3, [r3, #0]
 8002a24:	4a27      	ldr	r2, [pc, #156]	@ (8002ac4 <ST7735_DrawImage+0xd8>)
 8002a26:	2100      	movs	r1, #0
 8002a28:	5e52      	ldrsh	r2, [r2, r1]
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	da40      	bge.n	8002ab0 <ST7735_DrawImage+0xc4>
    if((x + w - 1) >= _width) return;
 8002a2e:	1dbb      	adds	r3, r7, #6
 8002a30:	881a      	ldrh	r2, [r3, #0]
 8002a32:	1cbb      	adds	r3, r7, #2
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	18d3      	adds	r3, r2, r3
 8002a38:	4a21      	ldr	r2, [pc, #132]	@ (8002ac0 <ST7735_DrawImage+0xd4>)
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	5e52      	ldrsh	r2, [r2, r1]
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	dc38      	bgt.n	8002ab4 <ST7735_DrawImage+0xc8>
    if((y + h - 1) >= _height) return;
 8002a42:	1d3b      	adds	r3, r7, #4
 8002a44:	881a      	ldrh	r2, [r3, #0]
 8002a46:	003b      	movs	r3, r7
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	18d3      	adds	r3, r2, r3
 8002a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ac4 <ST7735_DrawImage+0xd8>)
 8002a4e:	2100      	movs	r1, #0
 8002a50:	5e52      	ldrsh	r2, [r2, r1]
 8002a52:	4293      	cmp	r3, r2
 8002a54:	dc30      	bgt.n	8002ab8 <ST7735_DrawImage+0xcc>

    ST7735_Select();
 8002a56:	f7ff fd9f 	bl	8002598 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002a5a:	1dbb      	adds	r3, r7, #6
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	b2d8      	uxtb	r0, r3
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	b2d9      	uxtb	r1, r3
 8002a66:	1dbb      	adds	r3, r7, #6
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	1cbb      	adds	r3, r7, #2
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	18d3      	adds	r3, r2, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b2dc      	uxtb	r4, r3
 8002a7a:	1d3b      	adds	r3, r7, #4
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	003b      	movs	r3, r7
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	18d3      	adds	r3, r2, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	0022      	movs	r2, r4
 8002a90:	f7ff fe4a 	bl	8002728 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8002a94:	1cbb      	adds	r3, r7, #2
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	003a      	movs	r2, r7
 8002a9a:	8812      	ldrh	r2, [r2, #0]
 8002a9c:	4353      	muls	r3, r2
 8002a9e:	005a      	lsls	r2, r3, #1
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	0011      	movs	r1, r2
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f7ff fdc1 	bl	800262c <ST7735_WriteData>
    ST7735_Unselect();
 8002aaa:	f7ff fd81 	bl	80025b0 <ST7735_Unselect>
 8002aae:	e004      	b.n	8002aba <ST7735_DrawImage+0xce>
    if((x >= _width) || (y >= _height)) return;
 8002ab0:	46c0      	nop			@ (mov r8, r8)
 8002ab2:	e002      	b.n	8002aba <ST7735_DrawImage+0xce>
    if((x + w - 1) >= _width) return;
 8002ab4:	46c0      	nop			@ (mov r8, r8)
 8002ab6:	e000      	b.n	8002aba <ST7735_DrawImage+0xce>
    if((y + h - 1) >= _height) return;
 8002ab8:	46c0      	nop			@ (mov r8, r8)
}
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b002      	add	sp, #8
 8002abe:	bdb0      	pop	{r4, r5, r7, pc}
 8002ac0:	20000efc 	.word	0x20000efc
 8002ac4:	20000efe 	.word	0x20000efe

08002ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ac8:	b590      	push	{r4, r7, lr}
 8002aca:	b087      	sub	sp, #28
 8002acc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ace:	f001 f9c9 	bl	8003e64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ad2:	f000 fb2d 	bl	8003130 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  steps=0;
 8002ad6:	4be0      	ldr	r3, [pc, #896]	@ (8002e58 <main+0x390>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
  sitting0.Body = *imgSitting0;
 8002adc:	4bdf      	ldr	r3, [pc, #892]	@ (8002e5c <main+0x394>)
 8002ade:	4ae0      	ldr	r2, [pc, #896]	@ (8002e60 <main+0x398>)
 8002ae0:	601a      	str	r2, [r3, #0]
  sitting0.Size = 307;
 8002ae2:	4bde      	ldr	r3, [pc, #888]	@ (8002e5c <main+0x394>)
 8002ae4:	2234      	movs	r2, #52	@ 0x34
 8002ae6:	32ff      	adds	r2, #255	@ 0xff
 8002ae8:	605a      	str	r2, [r3, #4]
  sitting1.Body = *imgSitting1;
 8002aea:	4bde      	ldr	r3, [pc, #888]	@ (8002e64 <main+0x39c>)
 8002aec:	4ade      	ldr	r2, [pc, #888]	@ (8002e68 <main+0x3a0>)
 8002aee:	601a      	str	r2, [r3, #0]
  sitting1.Size = 305;
 8002af0:	4bdc      	ldr	r3, [pc, #880]	@ (8002e64 <main+0x39c>)
 8002af2:	2232      	movs	r2, #50	@ 0x32
 8002af4:	32ff      	adds	r2, #255	@ 0xff
 8002af6:	605a      	str	r2, [r3, #4]
  animSitting[0] = sitting0;
 8002af8:	4bdc      	ldr	r3, [pc, #880]	@ (8002e6c <main+0x3a4>)
 8002afa:	4ad8      	ldr	r2, [pc, #864]	@ (8002e5c <main+0x394>)
 8002afc:	ca03      	ldmia	r2!, {r0, r1}
 8002afe:	c303      	stmia	r3!, {r0, r1}
  animSitting[1] = sitting1;
 8002b00:	4bda      	ldr	r3, [pc, #872]	@ (8002e6c <main+0x3a4>)
 8002b02:	4ad8      	ldr	r2, [pc, #864]	@ (8002e64 <main+0x39c>)
 8002b04:	3308      	adds	r3, #8
 8002b06:	ca03      	ldmia	r2!, {r0, r1}
 8002b08:	c303      	stmia	r3!, {r0, r1}
  game.evo=0;
 8002b0a:	4bd9      	ldr	r3, [pc, #868]	@ (8002e70 <main+0x3a8>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	741a      	strb	r2, [r3, #16]
  game.uid[0]='h';
 8002b10:	4ad7      	ldr	r2, [pc, #860]	@ (8002e70 <main+0x3a8>)
 8002b12:	2394      	movs	r3, #148	@ 0x94
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	2168      	movs	r1, #104	@ 0x68
 8002b18:	54d1      	strb	r1, [r2, r3]
  game.uid[1]='i';
 8002b1a:	4ad5      	ldr	r2, [pc, #852]	@ (8002e70 <main+0x3a8>)
 8002b1c:	232a      	movs	r3, #42	@ 0x2a
 8002b1e:	33ff      	adds	r3, #255	@ 0xff
 8002b20:	2169      	movs	r1, #105	@ 0x69
 8002b22:	54d1      	strb	r1, [r2, r3]
  game.allSteps=0;
 8002b24:	4ad2      	ldr	r2, [pc, #840]	@ (8002e70 <main+0x3a8>)
 8002b26:	238c      	movs	r3, #140	@ 0x8c
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	50d1      	str	r1, [r2, r3]
  game.mood=100;
 8002b2e:	4bd0      	ldr	r3, [pc, #832]	@ (8002e70 <main+0x3a8>)
 8002b30:	2264      	movs	r2, #100	@ 0x64
 8002b32:	745a      	strb	r2, [r3, #17]
  game.numLocations=3;
 8002b34:	4bce      	ldr	r3, [pc, #824]	@ (8002e70 <main+0x3a8>)
 8002b36:	2203      	movs	r2, #3
 8002b38:	615a      	str	r2, [r3, #20]
  game.stepsToday=0;
 8002b3a:	4acd      	ldr	r2, [pc, #820]	@ (8002e70 <main+0x3a8>)
 8002b3c:	2390      	movs	r3, #144	@ 0x90
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	2100      	movs	r1, #0
 8002b42:	50d1      	str	r1, [r2, r3]
  game.weeklySteps=0;
 8002b44:	4aca      	ldr	r2, [pc, #808]	@ (8002e70 <main+0x3a8>)
 8002b46:	238e      	movs	r3, #142	@ 0x8e
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	50d1      	str	r1, [r2, r3]
  game.challengeGoal=20000;
 8002b4e:	4ac8      	ldr	r2, [pc, #800]	@ (8002e70 <main+0x3a8>)
 8002b50:	2392      	movs	r3, #146	@ 0x92
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	49c7      	ldr	r1, [pc, #796]	@ (8002e74 <main+0x3ac>)
 8002b56:	50d1      	str	r1, [r2, r3]
  dummy.lat=12.34567;
 8002b58:	4bc7      	ldr	r3, [pc, #796]	@ (8002e78 <main+0x3b0>)
 8002b5a:	4ac8      	ldr	r2, [pc, #800]	@ (8002e7c <main+0x3b4>)
 8002b5c:	601a      	str	r2, [r3, #0]
  dummy.lon=-89.10111;
 8002b5e:	4bc6      	ldr	r3, [pc, #792]	@ (8002e78 <main+0x3b0>)
 8002b60:	4ac7      	ldr	r2, [pc, #796]	@ (8002e80 <main+0x3b8>)
 8002b62:	605a      	str	r2, [r3, #4]
  game.positions[0]=dummy;
 8002b64:	4bc2      	ldr	r3, [pc, #776]	@ (8002e70 <main+0x3a8>)
 8002b66:	4ac4      	ldr	r2, [pc, #784]	@ (8002e78 <main+0x3b0>)
 8002b68:	3318      	adds	r3, #24
 8002b6a:	ca03      	ldmia	r2!, {r0, r1}
 8002b6c:	c303      	stmia	r3!, {r0, r1}
  game.positions[1]=dummy;
 8002b6e:	4bc0      	ldr	r3, [pc, #768]	@ (8002e70 <main+0x3a8>)
 8002b70:	4ac1      	ldr	r2, [pc, #772]	@ (8002e78 <main+0x3b0>)
 8002b72:	3320      	adds	r3, #32
 8002b74:	ca03      	ldmia	r2!, {r0, r1}
 8002b76:	c303      	stmia	r3!, {r0, r1}
  game.positions[2]=dummy;
 8002b78:	4bbd      	ldr	r3, [pc, #756]	@ (8002e70 <main+0x3a8>)
 8002b7a:	4abf      	ldr	r2, [pc, #764]	@ (8002e78 <main+0x3b0>)
 8002b7c:	3328      	adds	r3, #40	@ 0x28
 8002b7e:	ca03      	ldmia	r2!, {r0, r1}
 8002b80:	c303      	stmia	r3!, {r0, r1}
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b82:	f000 fcdb 	bl	800353c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002b86:	f000 fb35 	bl	80031f4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002b8a:	f000 fb73 	bl	8003274 <MX_SPI1_Init>
  MX_TIM17_Init();
 8002b8e:	f000 fbb1 	bl	80032f4 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8002b92:	f000 fc37 	bl	8003404 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002b96:	f000 fc83 	bl	80034a0 <MX_USART2_UART_Init>
  //MX_RTC_Init();
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
  ST7735_Unselect();
 8002b9a:	f7ff fd09 	bl	80025b0 <ST7735_Unselect>
  ST7735_Init(1);
 8002b9e:	2001      	movs	r0, #1
 8002ba0:	f7ff fe1a 	bl	80027d8 <ST7735_Init>
  //testAll();
  buffer[0] = 'A';
 8002ba4:	4bb7      	ldr	r3, [pc, #732]	@ (8002e84 <main+0x3bc>)
 8002ba6:	2241      	movs	r2, #65	@ 0x41
 8002ba8:	701a      	strb	r2, [r3, #0]
  buffer[1] = 'B';
 8002baa:	4bb6      	ldr	r3, [pc, #728]	@ (8002e84 <main+0x3bc>)
 8002bac:	2242      	movs	r2, #66	@ 0x42
 8002bae:	705a      	strb	r2, [r3, #1]
  TIM17->CCR1 = 5;
 8002bb0:	4bb5      	ldr	r3, [pc, #724]	@ (8002e88 <main+0x3c0>)
 8002bb2:	2205      	movs	r2, #5
 8002bb4:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM17->PSC=64;
 8002bb6:	4bb4      	ldr	r3, [pc, #720]	@ (8002e88 <main+0x3c0>)
 8002bb8:	2240      	movs	r2, #64	@ 0x40
 8002bba:	629a      	str	r2, [r3, #40]	@ 0x28
  uint8_t ret=0;
 8002bbc:	1dfb      	adds	r3, r7, #7
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]
    //_ADXL343_Init();

      //Pedometer Setup
      _ADXL343_WriteReg8(0x19, 0x02);
 8002bc2:	2102      	movs	r1, #2
 8002bc4:	2019      	movs	r0, #25
 8002bc6:	f000 fd91 	bl	80036ec <_ADXL343_WriteReg8>
      ////wait

      _ADXL343_WriteReg8(0x7C, 0x01);
 8002bca:	2101      	movs	r1, #1
 8002bcc:	207c      	movs	r0, #124	@ 0x7c
 8002bce:	f000 fd8d 	bl	80036ec <_ADXL343_WriteReg8>
       _ADXL343_WriteReg8(0x1A, 0x38);
 8002bd2:	2138      	movs	r1, #56	@ 0x38
 8002bd4:	201a      	movs	r0, #26
 8002bd6:	f000 fd89 	bl	80036ec <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1B, 0x04);
 8002bda:	2104      	movs	r1, #4
 8002bdc:	201b      	movs	r0, #27
 8002bde:	f000 fd85 	bl	80036ec <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1F, 0x80);
 8002be2:	2180      	movs	r1, #128	@ 0x80
 8002be4:	201f      	movs	r0, #31
 8002be6:	f000 fd81 	bl	80036ec <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x21, 0x80);
 8002bea:	2180      	movs	r1, #128	@ 0x80
 8002bec:	2021      	movs	r0, #33	@ 0x21
 8002bee:	f000 fd7d 	bl	80036ec <_ADXL343_WriteReg8>



      //  //Step Counter
      _ADXL343_WriteReg8(0x18, 0x01); // enable walking mode
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	2018      	movs	r0, #24
 8002bf6:	f000 fd79 	bl	80036ec <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x20, 0x01); // enable step interrupt
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	2020      	movs	r0, #32
 8002bfe:	f000 fd75 	bl	80036ec <_ADXL343_WriteReg8>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
      //Before entering the while, fill the screen to clear it once
      fillScreen(BLACK);
 8002c02:	2000      	movs	r0, #0
 8002c04:	f7ff fb8e 	bl	8002324 <fillScreen>
  while (1)
  {
	  SendData();
 8002c08:	f000 fd96 	bl	8003738 <SendData>
	  if((game.time.hours%dayLength)==0) game.stepsToday=0;
 8002c0c:	4b98      	ldr	r3, [pc, #608]	@ (8002e70 <main+0x3a8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2218      	movs	r2, #24
 8002c12:	0011      	movs	r1, r2
 8002c14:	0018      	movs	r0, r3
 8002c16:	f7fd fbf7 	bl	8000408 <__aeabi_idivmod>
 8002c1a:	1e0b      	subs	r3, r1, #0
 8002c1c:	d104      	bne.n	8002c28 <main+0x160>
 8002c1e:	4a94      	ldr	r2, [pc, #592]	@ (8002e70 <main+0x3a8>)
 8002c20:	2390      	movs	r3, #144	@ 0x90
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	2100      	movs	r1, #0
 8002c26:	50d1      	str	r1, [r2, r3]
	  if((game.time.hours%weekLength)==0) game.weeklySteps=0;
 8002c28:	4b91      	ldr	r3, [pc, #580]	@ (8002e70 <main+0x3a8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	22a8      	movs	r2, #168	@ 0xa8
 8002c2e:	0011      	movs	r1, r2
 8002c30:	0018      	movs	r0, r3
 8002c32:	f7fd fbe9 	bl	8000408 <__aeabi_idivmod>
 8002c36:	1e0b      	subs	r3, r1, #0
 8002c38:	d104      	bne.n	8002c44 <main+0x17c>
 8002c3a:	4a8d      	ldr	r2, [pc, #564]	@ (8002e70 <main+0x3a8>)
 8002c3c:	238e      	movs	r3, #142	@ 0x8e
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	2100      	movs	r1, #0
 8002c42:	50d1      	str	r1, [r2, r3]
	  game.stepsToday +=steps-game.allSteps;
 8002c44:	4a8a      	ldr	r2, [pc, #552]	@ (8002e70 <main+0x3a8>)
 8002c46:	2390      	movs	r3, #144	@ 0x90
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	58d2      	ldr	r2, [r2, r3]
 8002c4c:	4b82      	ldr	r3, [pc, #520]	@ (8002e58 <main+0x390>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	0018      	movs	r0, r3
 8002c52:	4987      	ldr	r1, [pc, #540]	@ (8002e70 <main+0x3a8>)
 8002c54:	238c      	movs	r3, #140	@ 0x8c
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	58cb      	ldr	r3, [r1, r3]
 8002c5a:	1ac3      	subs	r3, r0, r3
 8002c5c:	18d1      	adds	r1, r2, r3
 8002c5e:	4a84      	ldr	r2, [pc, #528]	@ (8002e70 <main+0x3a8>)
 8002c60:	2390      	movs	r3, #144	@ 0x90
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	50d1      	str	r1, [r2, r3]
	  game.weeklySteps+=steps-game.allSteps;
 8002c66:	4a82      	ldr	r2, [pc, #520]	@ (8002e70 <main+0x3a8>)
 8002c68:	238e      	movs	r3, #142	@ 0x8e
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	58d2      	ldr	r2, [r2, r3]
 8002c6e:	4b7a      	ldr	r3, [pc, #488]	@ (8002e58 <main+0x390>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	0018      	movs	r0, r3
 8002c74:	497e      	ldr	r1, [pc, #504]	@ (8002e70 <main+0x3a8>)
 8002c76:	238c      	movs	r3, #140	@ 0x8c
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	58cb      	ldr	r3, [r1, r3]
 8002c7c:	1ac3      	subs	r3, r0, r3
 8002c7e:	18d1      	adds	r1, r2, r3
 8002c80:	4a7b      	ldr	r2, [pc, #492]	@ (8002e70 <main+0x3a8>)
 8002c82:	238e      	movs	r3, #142	@ 0x8e
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	50d1      	str	r1, [r2, r3]
	  game.allSteps=steps;
 8002c88:	4b73      	ldr	r3, [pc, #460]	@ (8002e58 <main+0x390>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	0019      	movs	r1, r3
 8002c8e:	4a78      	ldr	r2, [pc, #480]	@ (8002e70 <main+0x3a8>)
 8002c90:	238c      	movs	r3, #140	@ 0x8c
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	50d1      	str	r1, [r2, r3]
	  //SendData();
	  //HAL_UART_Transmit(&huart2, "hello", 5, 100);
	  switch(currentMenu){
 8002c96:	4b7d      	ldr	r3, [pc, #500]	@ (8002e8c <main+0x3c4>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d100      	bne.n	8002ca0 <main+0x1d8>
 8002c9e:	e14c      	b.n	8002f3a <main+0x472>
 8002ca0:	dcb2      	bgt.n	8002c08 <main+0x140>
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d100      	bne.n	8002ca8 <main+0x1e0>
 8002ca6:	e105      	b.n	8002eb4 <main+0x3ec>
 8002ca8:	dcae      	bgt.n	8002c08 <main+0x140>
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d060      	beq.n	8002d70 <main+0x2a8>
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d1aa      	bne.n	8002c08 <main+0x140>
	  case Main:


		  if((++updateScreen)>=5)
 8002cb2:	4b77      	ldr	r3, [pc, #476]	@ (8002e90 <main+0x3c8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	4b75      	ldr	r3, [pc, #468]	@ (8002e90 <main+0x3c8>)
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	4b74      	ldr	r3, [pc, #464]	@ (8002e90 <main+0x3c8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d922      	bls.n	8002d0a <main+0x242>
		  {
			  //Animate character
			  Animate(animSitting,1);
 8002cc4:	4b69      	ldr	r3, [pc, #420]	@ (8002e6c <main+0x3a4>)
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f000 fcab 	bl	8003624 <Animate>
			  updateScreen = 0;
 8002cce:	4b70      	ldr	r3, [pc, #448]	@ (8002e90 <main+0x3c8>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
			  //Update steps
			  _ADXL343_ReadReg8(0x15, &steps, 1);
 8002cd4:	4b60      	ldr	r3, [pc, #384]	@ (8002e58 <main+0x390>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	0019      	movs	r1, r3
 8002cda:	2015      	movs	r0, #21
 8002cdc:	f000 fcd4 	bl	8003688 <_ADXL343_ReadReg8>
			  sprintf(buffer2, "Steps today: %d ", steps);
 8002ce0:	4b5d      	ldr	r3, [pc, #372]	@ (8002e58 <main+0x390>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	001a      	movs	r2, r3
 8002ce6:	496b      	ldr	r1, [pc, #428]	@ (8002e94 <main+0x3cc>)
 8002ce8:	4b6b      	ldr	r3, [pc, #428]	@ (8002e98 <main+0x3d0>)
 8002cea:	0018      	movs	r0, r3
 8002cec:	f005 fede 	bl	8008aac <siprintf>
			  drawString(0, 20, buffer2, WHITE, BLACK, 1, 1);
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	425b      	negs	r3, r3
 8002cf4:	4a68      	ldr	r2, [pc, #416]	@ (8002e98 <main+0x3d0>)
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	9102      	str	r1, [sp, #8]
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	9101      	str	r1, [sp, #4]
 8002cfe:	2100      	movs	r1, #0
 8002d00:	9100      	str	r1, [sp, #0]
 8002d02:	2114      	movs	r1, #20
 8002d04:	2000      	movs	r0, #0
 8002d06:	f7ff f9c9 	bl	800209c <drawString>
		  }


		  //Change current Menu
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET ) {
 8002d0a:	2380      	movs	r3, #128	@ 0x80
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	23a0      	movs	r3, #160	@ 0xa0
 8002d10:	05db      	lsls	r3, r3, #23
 8002d12:	0011      	movs	r1, r2
 8002d14:	0018      	movs	r0, r3
 8002d16:	f001 fb85 	bl	8004424 <HAL_GPIO_ReadPin>
 8002d1a:	0003      	movs	r3, r0
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d10e      	bne.n	8002d3e <main+0x276>
			  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8002d20:	4b5e      	ldr	r3, [pc, #376]	@ (8002e9c <main+0x3d4>)
 8002d22:	2100      	movs	r1, #0
 8002d24:	0018      	movs	r0, r3
 8002d26:	f004 f88b 	bl	8006e40 <HAL_TIM_PWM_Start>
			  currentMenu = MusicTest;
 8002d2a:	4b58      	ldr	r3, [pc, #352]	@ (8002e8c <main+0x3c4>)
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8002d30:	4b5b      	ldr	r3, [pc, #364]	@ (8002ea0 <main+0x3d8>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 8002d36:	2000      	movs	r0, #0
 8002d38:	f7ff faf4 	bl	8002324 <fillScreen>
		  }
		  else
			  canChange = 1;


		  break;
 8002d3c:	e1c8      	b.n	80030d0 <main+0x608>
		  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET ) {
 8002d3e:	2380      	movs	r3, #128	@ 0x80
 8002d40:	011a      	lsls	r2, r3, #4
 8002d42:	23a0      	movs	r3, #160	@ 0xa0
 8002d44:	05db      	lsls	r3, r3, #23
 8002d46:	0011      	movs	r1, r2
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f001 fb6b 	bl	8004424 <HAL_GPIO_ReadPin>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d109      	bne.n	8002d68 <main+0x2a0>
			  currentMenu = StatsDisplay;
 8002d54:	4b4d      	ldr	r3, [pc, #308]	@ (8002e8c <main+0x3c4>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8002d5a:	4b51      	ldr	r3, [pc, #324]	@ (8002ea0 <main+0x3d8>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 8002d60:	2000      	movs	r0, #0
 8002d62:	f7ff fadf 	bl	8002324 <fillScreen>
		  break;
 8002d66:	e1b3      	b.n	80030d0 <main+0x608>
			  canChange = 1;
 8002d68:	4b4d      	ldr	r3, [pc, #308]	@ (8002ea0 <main+0x3d8>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	701a      	strb	r2, [r3, #0]
		  break;
 8002d6e:	e1af      	b.n	80030d0 <main+0x608>
	  case StatsDisplay:

		  if((++updateScreen)>=5)
 8002d70:	4b47      	ldr	r3, [pc, #284]	@ (8002e90 <main+0x3c8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	4b46      	ldr	r3, [pc, #280]	@ (8002e90 <main+0x3c8>)
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	4b45      	ldr	r3, [pc, #276]	@ (8002e90 <main+0x3c8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d951      	bls.n	8002e26 <main+0x35e>
		  {
			  //fillScreen(BLACK);

			  drawString(0, 150, "STEPS", WHITE, BLACK, 1, 1);
 8002d82:	2301      	movs	r3, #1
 8002d84:	425b      	negs	r3, r3
 8002d86:	4a47      	ldr	r2, [pc, #284]	@ (8002ea4 <main+0x3dc>)
 8002d88:	2101      	movs	r1, #1
 8002d8a:	9102      	str	r1, [sp, #8]
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	9101      	str	r1, [sp, #4]
 8002d90:	2100      	movs	r1, #0
 8002d92:	9100      	str	r1, [sp, #0]
 8002d94:	2196      	movs	r1, #150	@ 0x96
 8002d96:	2000      	movs	r0, #0
 8002d98:	f7ff f980 	bl	800209c <drawString>
			  sprintf(buffer2, "Today: %d ", game.stepsToday);
 8002d9c:	4a34      	ldr	r2, [pc, #208]	@ (8002e70 <main+0x3a8>)
 8002d9e:	2390      	movs	r3, #144	@ 0x90
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	58d2      	ldr	r2, [r2, r3]
 8002da4:	4940      	ldr	r1, [pc, #256]	@ (8002ea8 <main+0x3e0>)
 8002da6:	4b3c      	ldr	r3, [pc, #240]	@ (8002e98 <main+0x3d0>)
 8002da8:	0018      	movs	r0, r3
 8002daa:	f005 fe7f 	bl	8008aac <siprintf>
			  drawString(0, 140, buffer2, WHITE, BLACK, 1, 1);
 8002dae:	2301      	movs	r3, #1
 8002db0:	425b      	negs	r3, r3
 8002db2:	4a39      	ldr	r2, [pc, #228]	@ (8002e98 <main+0x3d0>)
 8002db4:	2101      	movs	r1, #1
 8002db6:	9102      	str	r1, [sp, #8]
 8002db8:	2101      	movs	r1, #1
 8002dba:	9101      	str	r1, [sp, #4]
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	9100      	str	r1, [sp, #0]
 8002dc0:	218c      	movs	r1, #140	@ 0x8c
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f7ff f96a 	bl	800209c <drawString>
			  sprintf(buffer2, "This week: %d ", game.weeklySteps);
 8002dc8:	4a29      	ldr	r2, [pc, #164]	@ (8002e70 <main+0x3a8>)
 8002dca:	238e      	movs	r3, #142	@ 0x8e
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	58d2      	ldr	r2, [r2, r3]
 8002dd0:	4936      	ldr	r1, [pc, #216]	@ (8002eac <main+0x3e4>)
 8002dd2:	4b31      	ldr	r3, [pc, #196]	@ (8002e98 <main+0x3d0>)
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f005 fe69 	bl	8008aac <siprintf>
			  drawString(0, 130, buffer2, WHITE, BLACK, 1, 1);
 8002dda:	2301      	movs	r3, #1
 8002ddc:	425b      	negs	r3, r3
 8002dde:	4a2e      	ldr	r2, [pc, #184]	@ (8002e98 <main+0x3d0>)
 8002de0:	2101      	movs	r1, #1
 8002de2:	9102      	str	r1, [sp, #8]
 8002de4:	2101      	movs	r1, #1
 8002de6:	9101      	str	r1, [sp, #4]
 8002de8:	2100      	movs	r1, #0
 8002dea:	9100      	str	r1, [sp, #0]
 8002dec:	2182      	movs	r1, #130	@ 0x82
 8002dee:	2000      	movs	r0, #0
 8002df0:	f7ff f954 	bl	800209c <drawString>
			  sprintf(buffer2, "All time: %d ", game.allSteps);
 8002df4:	4a1e      	ldr	r2, [pc, #120]	@ (8002e70 <main+0x3a8>)
 8002df6:	238c      	movs	r3, #140	@ 0x8c
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	58d2      	ldr	r2, [r2, r3]
 8002dfc:	492c      	ldr	r1, [pc, #176]	@ (8002eb0 <main+0x3e8>)
 8002dfe:	4b26      	ldr	r3, [pc, #152]	@ (8002e98 <main+0x3d0>)
 8002e00:	0018      	movs	r0, r3
 8002e02:	f005 fe53 	bl	8008aac <siprintf>
			  drawString(0, 120, buffer2, WHITE, BLACK, 1, 1);
 8002e06:	2301      	movs	r3, #1
 8002e08:	425b      	negs	r3, r3
 8002e0a:	4a23      	ldr	r2, [pc, #140]	@ (8002e98 <main+0x3d0>)
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	9102      	str	r1, [sp, #8]
 8002e10:	2101      	movs	r1, #1
 8002e12:	9101      	str	r1, [sp, #4]
 8002e14:	2100      	movs	r1, #0
 8002e16:	9100      	str	r1, [sp, #0]
 8002e18:	2178      	movs	r1, #120	@ 0x78
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f7ff f93e 	bl	800209c <drawString>

			  //drawString(0, 70, "PET", WHITE, BLACK, 1, 1);
			  updateScreen = 0;
 8002e20:	4b1b      	ldr	r3, [pc, #108]	@ (8002e90 <main+0x3c8>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]
		  }
	  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET ){
 8002e26:	2380      	movs	r3, #128	@ 0x80
 8002e28:	015a      	lsls	r2, r3, #5
 8002e2a:	23a0      	movs	r3, #160	@ 0xa0
 8002e2c:	05db      	lsls	r3, r3, #23
 8002e2e:	0011      	movs	r1, r2
 8002e30:	0018      	movs	r0, r3
 8002e32:	f001 faf7 	bl	8004424 <HAL_GPIO_ReadPin>
 8002e36:	0003      	movs	r3, r0
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d109      	bne.n	8002e50 <main+0x388>
	  		currentMenu = Main;
 8002e3c:	4b13      	ldr	r3, [pc, #76]	@ (8002e8c <main+0x3c4>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	701a      	strb	r2, [r3, #0]
	  		canChange = 0;
 8002e42:	4b17      	ldr	r3, [pc, #92]	@ (8002ea0 <main+0x3d8>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
	  		fillScreen(BLACK);
 8002e48:	2000      	movs	r0, #0
 8002e4a:	f7ff fa6b 	bl	8002324 <fillScreen>
	  	  }
	  	  else
	  	      canChange = 1;

	  	  break;
 8002e4e:	e13f      	b.n	80030d0 <main+0x608>
	  	      canChange = 1;
 8002e50:	4b13      	ldr	r3, [pc, #76]	@ (8002ea0 <main+0x3d8>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	701a      	strb	r2, [r3, #0]
	  	  break;
 8002e56:	e13b      	b.n	80030d0 <main+0x608>
 8002e58:	2000130b 	.word	0x2000130b
 8002e5c:	20001270 	.word	0x20001270
 8002e60:	200004a0 	.word	0x200004a0
 8002e64:	20001278 	.word	0x20001278
 8002e68:	2000096c 	.word	0x2000096c
 8002e6c:	20001280 	.word	0x20001280
 8002e70:	20000f08 	.word	0x20000f08
 8002e74:	00004e20 	.word	0x00004e20
 8002e78:	20001050 	.word	0x20001050
 8002e7c:	414587dd 	.word	0x414587dd
 8002e80:	c2b233c5 	.word	0xc2b233c5
 8002e84:	2000105c 	.word	0x2000105c
 8002e88:	40014800 	.word	0x40014800
 8002e8c:	20000e80 	.word	0x20000e80
 8002e90:	2000126c 	.word	0x2000126c
 8002e94:	08009680 	.word	0x08009680
 8002e98:	200012a4 	.word	0x200012a4
 8002e9c:	200013f0 	.word	0x200013f0
 8002ea0:	20000e81 	.word	0x20000e81
 8002ea4:	08009694 	.word	0x08009694
 8002ea8:	0800969c 	.word	0x0800969c
 8002eac:	080096a8 	.word	0x080096a8
 8002eb0:	080096b8 	.word	0x080096b8
	  case MusicTest:
		  //fillScreen(BLUE);

		  freq = freqs[(toneIndex++)%8];
 8002eb4:	4b87      	ldr	r3, [pc, #540]	@ (80030d4 <main+0x60c>)
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	b291      	uxth	r1, r2
 8002ebe:	4a85      	ldr	r2, [pc, #532]	@ (80030d4 <main+0x60c>)
 8002ec0:	8011      	strh	r1, [r2, #0]
 8002ec2:	001a      	movs	r2, r3
 8002ec4:	2307      	movs	r3, #7
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	4a83      	ldr	r2, [pc, #524]	@ (80030d8 <main+0x610>)
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	18d3      	adds	r3, r2, r3
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4982      	ldr	r1, [pc, #520]	@ (80030dc <main+0x614>)
 8002ed4:	600a      	str	r2, [r1, #0]
 8002ed6:	604b      	str	r3, [r1, #4]
		  TIM17->ARR=(uint32_t)(987*(float)1000/(float)freq);
 8002ed8:	4b80      	ldr	r3, [pc, #512]	@ (80030dc <main+0x614>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	0010      	movs	r0, r2
 8002ee0:	0019      	movs	r1, r3
 8002ee2:	f7fe fe6f 	bl	8001bc4 <__aeabi_d2f>
 8002ee6:	1c03      	adds	r3, r0, #0
 8002ee8:	1c19      	adds	r1, r3, #0
 8002eea:	487d      	ldr	r0, [pc, #500]	@ (80030e0 <main+0x618>)
 8002eec:	f7fd fbd4 	bl	8000698 <__aeabi_fdiv>
 8002ef0:	1c03      	adds	r3, r0, #0
 8002ef2:	4c7c      	ldr	r4, [pc, #496]	@ (80030e4 <main+0x61c>)
 8002ef4:	1c18      	adds	r0, r3, #0
 8002ef6:	f7fd faeb 	bl	80004d0 <__aeabi_f2uiz>
 8002efa:	0003      	movs	r3, r0
 8002efc:	62e3      	str	r3, [r4, #44]	@ 0x2c

		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET) {
 8002efe:	2380      	movs	r3, #128	@ 0x80
 8002f00:	011a      	lsls	r2, r3, #4
 8002f02:	23a0      	movs	r3, #160	@ 0xa0
 8002f04:	05db      	lsls	r3, r3, #23
 8002f06:	0011      	movs	r1, r2
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f001 fa8b 	bl	8004424 <HAL_GPIO_ReadPin>
 8002f0e:	0003      	movs	r3, r0
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d10e      	bne.n	8002f32 <main+0x46a>
			  currentMenu = Main;
 8002f14:	4b74      	ldr	r3, [pc, #464]	@ (80030e8 <main+0x620>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8002f1a:	4b74      	ldr	r3, [pc, #464]	@ (80030ec <main+0x624>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8002f20:	4b73      	ldr	r3, [pc, #460]	@ (80030f0 <main+0x628>)
 8002f22:	2100      	movs	r1, #0
 8002f24:	0018      	movs	r0, r3
 8002f26:	f004 f87b 	bl	8007020 <HAL_TIM_PWM_Stop>
			  fillScreen(BLACK);
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	f7ff f9fa 	bl	8002324 <fillScreen>
		  }
		  else
			  canChange = 1;

		  break;
 8002f30:	e0ce      	b.n	80030d0 <main+0x608>
			  canChange = 1;
 8002f32:	4b6e      	ldr	r3, [pc, #440]	@ (80030ec <main+0x624>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	701a      	strb	r2, [r3, #0]
		  break;
 8002f38:	e0ca      	b.n	80030d0 <main+0x608>
	  case ConnorDemo:
		  	  steps=0;
 8002f3a:	4b6e      	ldr	r3, [pc, #440]	@ (80030f4 <main+0x62c>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	701a      	strb	r2, [r3, #0]

		  	  if((whileI++)%3==0)
 8002f40:	4b6d      	ldr	r3, [pc, #436]	@ (80030f8 <main+0x630>)
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	b291      	uxth	r1, r2
 8002f4a:	4a6b      	ldr	r2, [pc, #428]	@ (80030f8 <main+0x630>)
 8002f4c:	8011      	strh	r1, [r2, #0]
 8002f4e:	2103      	movs	r1, #3
 8002f50:	0018      	movs	r0, r3
 8002f52:	f7fd f96f 	bl	8000234 <__aeabi_uidivmod>
 8002f56:	000b      	movs	r3, r1
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10f      	bne.n	8002f7e <main+0x4b6>
		  		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET)
 8002f5e:	4b67      	ldr	r3, [pc, #412]	@ (80030fc <main+0x634>)
 8002f60:	2102      	movs	r1, #2
 8002f62:	0018      	movs	r0, r3
 8002f64:	f001 fa5e 	bl	8004424 <HAL_GPIO_ReadPin>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d104      	bne.n	8002f78 <main+0x4b0>
		  		  		  fillScreen(WHITE);
 8002f6e:	4b64      	ldr	r3, [pc, #400]	@ (8003100 <main+0x638>)
 8002f70:	0018      	movs	r0, r3
 8002f72:	f7ff f9d7 	bl	8002324 <fillScreen>
 8002f76:	e002      	b.n	8002f7e <main+0x4b6>
		  		  	  else
		  		  		  fillScreen(BLACK);
 8002f78:	2000      	movs	r0, #0
 8002f7a:	f7ff f9d3 	bl	8002324 <fillScreen>
		  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET)
 8002f7e:	2380      	movs	r3, #128	@ 0x80
 8002f80:	011a      	lsls	r2, r3, #4
 8002f82:	23a0      	movs	r3, #160	@ 0xa0
 8002f84:	05db      	lsls	r3, r3, #23
 8002f86:	0011      	movs	r1, r2
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f001 fa4b 	bl	8004424 <HAL_GPIO_ReadPin>
 8002f8e:	0003      	movs	r3, r0
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d106      	bne.n	8002fa2 <main+0x4da>
		  		  petXPos-=5;
 8002f94:	4b5b      	ldr	r3, [pc, #364]	@ (8003104 <main+0x63c>)
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b05      	subs	r3, #5
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	4b59      	ldr	r3, [pc, #356]	@ (8003104 <main+0x63c>)
 8002fa0:	801a      	strh	r2, [r3, #0]
		  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET)
 8002fa2:	2380      	movs	r3, #128	@ 0x80
 8002fa4:	015a      	lsls	r2, r3, #5
 8002fa6:	23a0      	movs	r3, #160	@ 0xa0
 8002fa8:	05db      	lsls	r3, r3, #23
 8002faa:	0011      	movs	r1, r2
 8002fac:	0018      	movs	r0, r3
 8002fae:	f001 fa39 	bl	8004424 <HAL_GPIO_ReadPin>
 8002fb2:	0003      	movs	r3, r0
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d106      	bne.n	8002fc6 <main+0x4fe>
		  		  petXPos+=5;
 8002fb8:	4b52      	ldr	r3, [pc, #328]	@ (8003104 <main+0x63c>)
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3305      	adds	r3, #5
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	4b50      	ldr	r3, [pc, #320]	@ (8003104 <main+0x63c>)
 8002fc4:	801a      	strh	r2, [r3, #0]
		  	  if(petXPos<3)petXPos=0;
 8002fc6:	4b4f      	ldr	r3, [pc, #316]	@ (8003104 <main+0x63c>)
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d802      	bhi.n	8002fd6 <main+0x50e>
 8002fd0:	4b4c      	ldr	r3, [pc, #304]	@ (8003104 <main+0x63c>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	801a      	strh	r2, [r3, #0]
		  	  if(petXPos>60) petXPos=60;
 8002fd6:	4b4b      	ldr	r3, [pc, #300]	@ (8003104 <main+0x63c>)
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b3c      	cmp	r3, #60	@ 0x3c
 8002fde:	d902      	bls.n	8002fe6 <main+0x51e>
 8002fe0:	4b48      	ldr	r3, [pc, #288]	@ (8003104 <main+0x63c>)
 8002fe2:	223c      	movs	r2, #60	@ 0x3c
 8002fe4:	801a      	strh	r2, [r3, #0]
		  	  freq = freqs[(toneIndex++)%8];
 8002fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80030d4 <main+0x60c>)
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	b291      	uxth	r1, r2
 8002ff0:	4a38      	ldr	r2, [pc, #224]	@ (80030d4 <main+0x60c>)
 8002ff2:	8011      	strh	r1, [r2, #0]
 8002ff4:	001a      	movs	r2, r3
 8002ff6:	2307      	movs	r3, #7
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	4a37      	ldr	r2, [pc, #220]	@ (80030d8 <main+0x610>)
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	18d3      	adds	r3, r2, r3
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	4935      	ldr	r1, [pc, #212]	@ (80030dc <main+0x614>)
 8003006:	600a      	str	r2, [r1, #0]
 8003008:	604b      	str	r3, [r1, #4]
		  	  TIM17->ARR=(uint32_t)(987*(float)1000/(float)freq);
 800300a:	4b34      	ldr	r3, [pc, #208]	@ (80030dc <main+0x614>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	0010      	movs	r0, r2
 8003012:	0019      	movs	r1, r3
 8003014:	f7fe fdd6 	bl	8001bc4 <__aeabi_d2f>
 8003018:	1c03      	adds	r3, r0, #0
 800301a:	1c19      	adds	r1, r3, #0
 800301c:	4830      	ldr	r0, [pc, #192]	@ (80030e0 <main+0x618>)
 800301e:	f7fd fb3b 	bl	8000698 <__aeabi_fdiv>
 8003022:	1c03      	adds	r3, r0, #0
 8003024:	4c2f      	ldr	r4, [pc, #188]	@ (80030e4 <main+0x61c>)
 8003026:	1c18      	adds	r0, r3, #0
 8003028:	f7fd fa52 	bl	80004d0 <__aeabi_f2uiz>
 800302c:	0003      	movs	r3, r0
 800302e:	62e3      	str	r3, [r4, #44]	@ 0x2c
		  	  //fillScreen(WHITE);
		  	  drawImage(testImage, palette, petXPos, 40, 64, 64, 296);
 8003030:	4b34      	ldr	r3, [pc, #208]	@ (8003104 <main+0x63c>)
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	b29a      	uxth	r2, r3
 8003036:	4934      	ldr	r1, [pc, #208]	@ (8003108 <main+0x640>)
 8003038:	4834      	ldr	r0, [pc, #208]	@ (800310c <main+0x644>)
 800303a:	2394      	movs	r3, #148	@ 0x94
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	9302      	str	r3, [sp, #8]
 8003040:	2340      	movs	r3, #64	@ 0x40
 8003042:	9301      	str	r3, [sp, #4]
 8003044:	2340      	movs	r3, #64	@ 0x40
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	2328      	movs	r3, #40	@ 0x28
 800304a:	f7ff f9df 	bl	800240c <drawImage>
//		  	  _ADXL343_ReadReg8(0x06, &accelZ, 1);
//		  	  _ADXL343_ReadReg8(0x07, &accelX, 1);
//		  	  _ADXL343_ReadReg8(0x08, &accelY, 1);
//		  	  _ADXL343_ReadReg8(0x09, &accelZ, 1);

		  	  sprintf(buffer2, "X:%d - Y:%d - Z:%d ", accelX, accelY, accelZ);
 800304e:	4b30      	ldr	r3, [pc, #192]	@ (8003110 <main+0x648>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	001a      	movs	r2, r3
 8003054:	4b2f      	ldr	r3, [pc, #188]	@ (8003114 <main+0x64c>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	001c      	movs	r4, r3
 800305a:	4b2f      	ldr	r3, [pc, #188]	@ (8003118 <main+0x650>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	492f      	ldr	r1, [pc, #188]	@ (800311c <main+0x654>)
 8003060:	482f      	ldr	r0, [pc, #188]	@ (8003120 <main+0x658>)
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	0023      	movs	r3, r4
 8003066:	f005 fd21 	bl	8008aac <siprintf>
		  	  drawString(0, 10, buffer2, BLACK, GREEN, 1, 1);
 800306a:	4a2d      	ldr	r2, [pc, #180]	@ (8003120 <main+0x658>)
 800306c:	2301      	movs	r3, #1
 800306e:	9302      	str	r3, [sp, #8]
 8003070:	2301      	movs	r3, #1
 8003072:	9301      	str	r3, [sp, #4]
 8003074:	4b2b      	ldr	r3, [pc, #172]	@ (8003124 <main+0x65c>)
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	2300      	movs	r3, #0
 800307a:	210a      	movs	r1, #10
 800307c:	2000      	movs	r0, #0
 800307e:	f7ff f80d 	bl	800209c <drawString>

		  	  _ADXL343_ReadReg8(0x15, &steps, 1);
 8003082:	4b1c      	ldr	r3, [pc, #112]	@ (80030f4 <main+0x62c>)
 8003084:	2201      	movs	r2, #1
 8003086:	0019      	movs	r1, r3
 8003088:	2015      	movs	r0, #21
 800308a:	f000 fafd 	bl	8003688 <_ADXL343_ReadReg8>
		  	  sprintf(buffer2, "Steps: %d ", steps);
 800308e:	4b19      	ldr	r3, [pc, #100]	@ (80030f4 <main+0x62c>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	001a      	movs	r2, r3
 8003094:	4924      	ldr	r1, [pc, #144]	@ (8003128 <main+0x660>)
 8003096:	4b22      	ldr	r3, [pc, #136]	@ (8003120 <main+0x658>)
 8003098:	0018      	movs	r0, r3
 800309a:	f005 fd07 	bl	8008aac <siprintf>
		  	  drawString(0, 20, buffer2, BLACK, GREEN, 1, 1);
 800309e:	4a20      	ldr	r2, [pc, #128]	@ (8003120 <main+0x658>)
 80030a0:	2301      	movs	r3, #1
 80030a2:	9302      	str	r3, [sp, #8]
 80030a4:	2301      	movs	r3, #1
 80030a6:	9301      	str	r3, [sp, #4]
 80030a8:	4b1e      	ldr	r3, [pc, #120]	@ (8003124 <main+0x65c>)
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	2300      	movs	r3, #0
 80030ae:	2114      	movs	r1, #20
 80030b0:	2000      	movs	r0, #0
 80030b2:	f7fe fff3 	bl	800209c <drawString>

		  	  	  //only run this code every few seconds

		  	  drawString(70, 70, buffer, BLACK, GREEN, 1, 1);
 80030b6:	4a1d      	ldr	r2, [pc, #116]	@ (800312c <main+0x664>)
 80030b8:	2301      	movs	r3, #1
 80030ba:	9302      	str	r3, [sp, #8]
 80030bc:	2301      	movs	r3, #1
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	4b18      	ldr	r3, [pc, #96]	@ (8003124 <main+0x65c>)
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	2300      	movs	r3, #0
 80030c6:	2146      	movs	r1, #70	@ 0x46
 80030c8:	2046      	movs	r0, #70	@ 0x46
 80030ca:	f7fe ffe7 	bl	800209c <drawString>

		  break;
 80030ce:	46c0      	nop			@ (mov r8, r8)
	  SendData();
 80030d0:	e59a      	b.n	8002c08 <main+0x140>
 80030d2:	46c0      	nop			@ (mov r8, r8)
 80030d4:	200012a0 	.word	0x200012a0
 80030d8:	20000e40 	.word	0x20000e40
 80030dc:	20001298 	.word	0x20001298
 80030e0:	4970f780 	.word	0x4970f780
 80030e4:	40014800 	.word	0x40014800
 80030e8:	20000e80 	.word	0x20000e80
 80030ec:	20000e81 	.word	0x20000e81
 80030f0:	200013f0 	.word	0x200013f0
 80030f4:	2000130b 	.word	0x2000130b
 80030f8:	20001058 	.word	0x20001058
 80030fc:	50000800 	.word	0x50000800
 8003100:	0000ffff 	.word	0x0000ffff
 8003104:	2000105a 	.word	0x2000105a
 8003108:	20000e30 	.word	0x20000e30
 800310c:	20000000 	.word	0x20000000
 8003110:	20001308 	.word	0x20001308
 8003114:	20001309 	.word	0x20001309
 8003118:	2000130a 	.word	0x2000130a
 800311c:	080096c8 	.word	0x080096c8
 8003120:	200012a4 	.word	0x200012a4
 8003124:	ffffe007 	.word	0xffffe007
 8003128:	080096dc 	.word	0x080096dc
 800312c:	2000105c 	.word	0x2000105c

08003130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003130:	b590      	push	{r4, r7, lr}
 8003132:	b095      	sub	sp, #84	@ 0x54
 8003134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003136:	2414      	movs	r4, #20
 8003138:	193b      	adds	r3, r7, r4
 800313a:	0018      	movs	r0, r3
 800313c:	233c      	movs	r3, #60	@ 0x3c
 800313e:	001a      	movs	r2, r3
 8003140:	2100      	movs	r1, #0
 8003142:	f005 fcd3 	bl	8008aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003146:	1d3b      	adds	r3, r7, #4
 8003148:	0018      	movs	r0, r3
 800314a:	2310      	movs	r3, #16
 800314c:	001a      	movs	r2, r3
 800314e:	2100      	movs	r1, #0
 8003150:	f005 fccc 	bl	8008aec <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003154:	2380      	movs	r3, #128	@ 0x80
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	0018      	movs	r0, r3
 800315a:	f001 ffe1 	bl	8005120 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800315e:	193b      	adds	r3, r7, r4
 8003160:	220a      	movs	r2, #10
 8003162:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003164:	193b      	adds	r3, r7, r4
 8003166:	2280      	movs	r2, #128	@ 0x80
 8003168:	0052      	lsls	r2, r2, #1
 800316a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800316c:	0021      	movs	r1, r4
 800316e:	187b      	adds	r3, r7, r1
 8003170:	2200      	movs	r2, #0
 8003172:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003174:	187b      	adds	r3, r7, r1
 8003176:	2240      	movs	r2, #64	@ 0x40
 8003178:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800317a:	187b      	adds	r3, r7, r1
 800317c:	2201      	movs	r2, #1
 800317e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003180:	187b      	adds	r3, r7, r1
 8003182:	2202      	movs	r2, #2
 8003184:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003186:	187b      	adds	r3, r7, r1
 8003188:	2202      	movs	r2, #2
 800318a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800318c:	187b      	adds	r3, r7, r1
 800318e:	2200      	movs	r2, #0
 8003190:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003192:	187b      	adds	r3, r7, r1
 8003194:	2208      	movs	r2, #8
 8003196:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003198:	187b      	adds	r3, r7, r1
 800319a:	2280      	movs	r2, #128	@ 0x80
 800319c:	0292      	lsls	r2, r2, #10
 800319e:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80031a0:	187b      	adds	r3, r7, r1
 80031a2:	2280      	movs	r2, #128	@ 0x80
 80031a4:	0492      	lsls	r2, r2, #18
 80031a6:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80031a8:	187b      	adds	r3, r7, r1
 80031aa:	2280      	movs	r2, #128	@ 0x80
 80031ac:	0592      	lsls	r2, r2, #22
 80031ae:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031b0:	187b      	adds	r3, r7, r1
 80031b2:	0018      	movs	r0, r3
 80031b4:	f002 f800 	bl	80051b8 <HAL_RCC_OscConfig>
 80031b8:	1e03      	subs	r3, r0, #0
 80031ba:	d001      	beq.n	80031c0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80031bc:	f000 fbbe 	bl	800393c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031c0:	1d3b      	adds	r3, r7, #4
 80031c2:	2207      	movs	r2, #7
 80031c4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031c6:	1d3b      	adds	r3, r7, #4
 80031c8:	2202      	movs	r2, #2
 80031ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031cc:	1d3b      	adds	r3, r7, #4
 80031ce:	2200      	movs	r2, #0
 80031d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031d2:	1d3b      	adds	r3, r7, #4
 80031d4:	2200      	movs	r2, #0
 80031d6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80031d8:	1d3b      	adds	r3, r7, #4
 80031da:	2102      	movs	r1, #2
 80031dc:	0018      	movs	r0, r3
 80031de:	f002 fb4b 	bl	8005878 <HAL_RCC_ClockConfig>
 80031e2:	1e03      	subs	r3, r0, #0
 80031e4:	d001      	beq.n	80031ea <SystemClock_Config+0xba>
  {
    Error_Handler();
 80031e6:	f000 fba9 	bl	800393c <Error_Handler>
  }
}
 80031ea:	46c0      	nop			@ (mov r8, r8)
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b015      	add	sp, #84	@ 0x54
 80031f0:	bd90      	pop	{r4, r7, pc}
	...

080031f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80031f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003268 <MX_I2C1_Init+0x74>)
 80031fa:	4a1c      	ldr	r2, [pc, #112]	@ (800326c <MX_I2C1_Init+0x78>)
 80031fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 80031fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003268 <MX_I2C1_Init+0x74>)
 8003200:	4a1b      	ldr	r2, [pc, #108]	@ (8003270 <MX_I2C1_Init+0x7c>)
 8003202:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003204:	4b18      	ldr	r3, [pc, #96]	@ (8003268 <MX_I2C1_Init+0x74>)
 8003206:	2200      	movs	r2, #0
 8003208:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800320a:	4b17      	ldr	r3, [pc, #92]	@ (8003268 <MX_I2C1_Init+0x74>)
 800320c:	2201      	movs	r2, #1
 800320e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003210:	4b15      	ldr	r3, [pc, #84]	@ (8003268 <MX_I2C1_Init+0x74>)
 8003212:	2200      	movs	r2, #0
 8003214:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003216:	4b14      	ldr	r3, [pc, #80]	@ (8003268 <MX_I2C1_Init+0x74>)
 8003218:	2200      	movs	r2, #0
 800321a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800321c:	4b12      	ldr	r3, [pc, #72]	@ (8003268 <MX_I2C1_Init+0x74>)
 800321e:	2200      	movs	r2, #0
 8003220:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003222:	4b11      	ldr	r3, [pc, #68]	@ (8003268 <MX_I2C1_Init+0x74>)
 8003224:	2200      	movs	r2, #0
 8003226:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003228:	4b0f      	ldr	r3, [pc, #60]	@ (8003268 <MX_I2C1_Init+0x74>)
 800322a:	2200      	movs	r2, #0
 800322c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800322e:	4b0e      	ldr	r3, [pc, #56]	@ (8003268 <MX_I2C1_Init+0x74>)
 8003230:	0018      	movs	r0, r3
 8003232:	f001 f931 	bl	8004498 <HAL_I2C_Init>
 8003236:	1e03      	subs	r3, r0, #0
 8003238:	d001      	beq.n	800323e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800323a:	f000 fb7f 	bl	800393c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800323e:	4b0a      	ldr	r3, [pc, #40]	@ (8003268 <MX_I2C1_Init+0x74>)
 8003240:	2100      	movs	r1, #0
 8003242:	0018      	movs	r0, r3
 8003244:	f001 fed4 	bl	8004ff0 <HAL_I2CEx_ConfigAnalogFilter>
 8003248:	1e03      	subs	r3, r0, #0
 800324a:	d001      	beq.n	8003250 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800324c:	f000 fb76 	bl	800393c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003250:	4b05      	ldr	r3, [pc, #20]	@ (8003268 <MX_I2C1_Init+0x74>)
 8003252:	2100      	movs	r1, #0
 8003254:	0018      	movs	r0, r3
 8003256:	f001 ff17 	bl	8005088 <HAL_I2CEx_ConfigDigitalFilter>
 800325a:	1e03      	subs	r3, r0, #0
 800325c:	d001      	beq.n	8003262 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800325e:	f000 fb6d 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003262:	46c0      	nop			@ (mov r8, r8)
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	2000130c 	.word	0x2000130c
 800326c:	40005400 	.word	0x40005400
 8003270:	10b17db5 	.word	0x10b17db5

08003274 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003278:	4b1c      	ldr	r3, [pc, #112]	@ (80032ec <MX_SPI1_Init+0x78>)
 800327a:	4a1d      	ldr	r2, [pc, #116]	@ (80032f0 <MX_SPI1_Init+0x7c>)
 800327c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800327e:	4b1b      	ldr	r3, [pc, #108]	@ (80032ec <MX_SPI1_Init+0x78>)
 8003280:	2282      	movs	r2, #130	@ 0x82
 8003282:	0052      	lsls	r2, r2, #1
 8003284:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8003286:	4b19      	ldr	r3, [pc, #100]	@ (80032ec <MX_SPI1_Init+0x78>)
 8003288:	2280      	movs	r2, #128	@ 0x80
 800328a:	0212      	lsls	r2, r2, #8
 800328c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800328e:	4b17      	ldr	r3, [pc, #92]	@ (80032ec <MX_SPI1_Init+0x78>)
 8003290:	22e0      	movs	r2, #224	@ 0xe0
 8003292:	00d2      	lsls	r2, r2, #3
 8003294:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003296:	4b15      	ldr	r3, [pc, #84]	@ (80032ec <MX_SPI1_Init+0x78>)
 8003298:	2200      	movs	r2, #0
 800329a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800329c:	4b13      	ldr	r3, [pc, #76]	@ (80032ec <MX_SPI1_Init+0x78>)
 800329e:	2200      	movs	r2, #0
 80032a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80032a2:	4b12      	ldr	r3, [pc, #72]	@ (80032ec <MX_SPI1_Init+0x78>)
 80032a4:	2280      	movs	r2, #128	@ 0x80
 80032a6:	0092      	lsls	r2, r2, #2
 80032a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80032aa:	4b10      	ldr	r3, [pc, #64]	@ (80032ec <MX_SPI1_Init+0x78>)
 80032ac:	2220      	movs	r2, #32
 80032ae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032b0:	4b0e      	ldr	r3, [pc, #56]	@ (80032ec <MX_SPI1_Init+0x78>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80032b6:	4b0d      	ldr	r3, [pc, #52]	@ (80032ec <MX_SPI1_Init+0x78>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032bc:	4b0b      	ldr	r3, [pc, #44]	@ (80032ec <MX_SPI1_Init+0x78>)
 80032be:	2200      	movs	r2, #0
 80032c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80032c2:	4b0a      	ldr	r3, [pc, #40]	@ (80032ec <MX_SPI1_Init+0x78>)
 80032c4:	2207      	movs	r2, #7
 80032c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80032c8:	4b08      	ldr	r3, [pc, #32]	@ (80032ec <MX_SPI1_Init+0x78>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80032ce:	4b07      	ldr	r3, [pc, #28]	@ (80032ec <MX_SPI1_Init+0x78>)
 80032d0:	2208      	movs	r2, #8
 80032d2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80032d4:	4b05      	ldr	r3, [pc, #20]	@ (80032ec <MX_SPI1_Init+0x78>)
 80032d6:	0018      	movs	r0, r3
 80032d8:	f003 f96c 	bl	80065b4 <HAL_SPI_Init>
 80032dc:	1e03      	subs	r3, r0, #0
 80032de:	d001      	beq.n	80032e4 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80032e0:	f000 fb2c 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80032e4:	46c0      	nop			@ (mov r8, r8)
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	46c0      	nop			@ (mov r8, r8)
 80032ec:	2000138c 	.word	0x2000138c
 80032f0:	40013000 	.word	0x40013000

080032f4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b094      	sub	sp, #80	@ 0x50
 80032f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80032fa:	2334      	movs	r3, #52	@ 0x34
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	0018      	movs	r0, r3
 8003300:	231c      	movs	r3, #28
 8003302:	001a      	movs	r2, r3
 8003304:	2100      	movs	r1, #0
 8003306:	f005 fbf1 	bl	8008aec <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800330a:	003b      	movs	r3, r7
 800330c:	0018      	movs	r0, r3
 800330e:	2334      	movs	r3, #52	@ 0x34
 8003310:	001a      	movs	r2, r3
 8003312:	2100      	movs	r1, #0
 8003314:	f005 fbea 	bl	8008aec <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003318:	4b37      	ldr	r3, [pc, #220]	@ (80033f8 <MX_TIM17_Init+0x104>)
 800331a:	4a38      	ldr	r2, [pc, #224]	@ (80033fc <MX_TIM17_Init+0x108>)
 800331c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800331e:	4b36      	ldr	r3, [pc, #216]	@ (80033f8 <MX_TIM17_Init+0x104>)
 8003320:	2200      	movs	r2, #0
 8003322:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003324:	4b34      	ldr	r3, [pc, #208]	@ (80033f8 <MX_TIM17_Init+0x104>)
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800332a:	4b33      	ldr	r3, [pc, #204]	@ (80033f8 <MX_TIM17_Init+0x104>)
 800332c:	4a34      	ldr	r2, [pc, #208]	@ (8003400 <MX_TIM17_Init+0x10c>)
 800332e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003330:	4b31      	ldr	r3, [pc, #196]	@ (80033f8 <MX_TIM17_Init+0x104>)
 8003332:	2200      	movs	r2, #0
 8003334:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003336:	4b30      	ldr	r3, [pc, #192]	@ (80033f8 <MX_TIM17_Init+0x104>)
 8003338:	2200      	movs	r2, #0
 800333a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800333c:	4b2e      	ldr	r3, [pc, #184]	@ (80033f8 <MX_TIM17_Init+0x104>)
 800333e:	2200      	movs	r2, #0
 8003340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003342:	4b2d      	ldr	r3, [pc, #180]	@ (80033f8 <MX_TIM17_Init+0x104>)
 8003344:	0018      	movs	r0, r3
 8003346:	f003 fcc3 	bl	8006cd0 <HAL_TIM_Base_Init>
 800334a:	1e03      	subs	r3, r0, #0
 800334c:	d001      	beq.n	8003352 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800334e:	f000 faf5 	bl	800393c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8003352:	4b29      	ldr	r3, [pc, #164]	@ (80033f8 <MX_TIM17_Init+0x104>)
 8003354:	0018      	movs	r0, r3
 8003356:	f003 fd13 	bl	8006d80 <HAL_TIM_PWM_Init>
 800335a:	1e03      	subs	r3, r0, #0
 800335c:	d001      	beq.n	8003362 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 800335e:	f000 faed 	bl	800393c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003362:	2134      	movs	r1, #52	@ 0x34
 8003364:	187b      	adds	r3, r7, r1
 8003366:	2260      	movs	r2, #96	@ 0x60
 8003368:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800336a:	187b      	adds	r3, r7, r1
 800336c:	2200      	movs	r2, #0
 800336e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003370:	187b      	adds	r3, r7, r1
 8003372:	2200      	movs	r2, #0
 8003374:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003376:	187b      	adds	r3, r7, r1
 8003378:	2200      	movs	r2, #0
 800337a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800337c:	187b      	adds	r3, r7, r1
 800337e:	2200      	movs	r2, #0
 8003380:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003382:	187b      	adds	r3, r7, r1
 8003384:	2200      	movs	r2, #0
 8003386:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003388:	187b      	adds	r3, r7, r1
 800338a:	2200      	movs	r2, #0
 800338c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800338e:	1879      	adds	r1, r7, r1
 8003390:	4b19      	ldr	r3, [pc, #100]	@ (80033f8 <MX_TIM17_Init+0x104>)
 8003392:	2200      	movs	r2, #0
 8003394:	0018      	movs	r0, r3
 8003396:	f003 fecf 	bl	8007138 <HAL_TIM_PWM_ConfigChannel>
 800339a:	1e03      	subs	r3, r0, #0
 800339c:	d001      	beq.n	80033a2 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 800339e:	f000 facd 	bl	800393c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80033a2:	003b      	movs	r3, r7
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80033a8:	003b      	movs	r3, r7
 80033aa:	2200      	movs	r2, #0
 80033ac:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80033ae:	003b      	movs	r3, r7
 80033b0:	2200      	movs	r2, #0
 80033b2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80033b4:	003b      	movs	r3, r7
 80033b6:	2200      	movs	r2, #0
 80033b8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80033ba:	003b      	movs	r3, r7
 80033bc:	2200      	movs	r2, #0
 80033be:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80033c0:	003b      	movs	r3, r7
 80033c2:	2280      	movs	r2, #128	@ 0x80
 80033c4:	0192      	lsls	r2, r2, #6
 80033c6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80033c8:	003b      	movs	r3, r7
 80033ca:	2200      	movs	r2, #0
 80033cc:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80033ce:	003b      	movs	r3, r7
 80033d0:	2200      	movs	r2, #0
 80033d2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80033d4:	003a      	movs	r2, r7
 80033d6:	4b08      	ldr	r3, [pc, #32]	@ (80033f8 <MX_TIM17_Init+0x104>)
 80033d8:	0011      	movs	r1, r2
 80033da:	0018      	movs	r0, r3
 80033dc:	f004 fb2c 	bl	8007a38 <HAL_TIMEx_ConfigBreakDeadTime>
 80033e0:	1e03      	subs	r3, r0, #0
 80033e2:	d001      	beq.n	80033e8 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 80033e4:	f000 faaa 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80033e8:	4b03      	ldr	r3, [pc, #12]	@ (80033f8 <MX_TIM17_Init+0x104>)
 80033ea:	0018      	movs	r0, r3
 80033ec:	f000 fbc4 	bl	8003b78 <HAL_TIM_MspPostInit>

}
 80033f0:	46c0      	nop			@ (mov r8, r8)
 80033f2:	46bd      	mov	sp, r7
 80033f4:	b014      	add	sp, #80	@ 0x50
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	200013f0 	.word	0x200013f0
 80033fc:	40014800 	.word	0x40014800
 8003400:	0000ffff 	.word	0x0000ffff

08003404 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003408:	4b23      	ldr	r3, [pc, #140]	@ (8003498 <MX_USART1_UART_Init+0x94>)
 800340a:	4a24      	ldr	r2, [pc, #144]	@ (800349c <MX_USART1_UART_Init+0x98>)
 800340c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800340e:	4b22      	ldr	r3, [pc, #136]	@ (8003498 <MX_USART1_UART_Init+0x94>)
 8003410:	2296      	movs	r2, #150	@ 0x96
 8003412:	0192      	lsls	r2, r2, #6
 8003414:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003416:	4b20      	ldr	r3, [pc, #128]	@ (8003498 <MX_USART1_UART_Init+0x94>)
 8003418:	2200      	movs	r2, #0
 800341a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800341c:	4b1e      	ldr	r3, [pc, #120]	@ (8003498 <MX_USART1_UART_Init+0x94>)
 800341e:	2200      	movs	r2, #0
 8003420:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003422:	4b1d      	ldr	r3, [pc, #116]	@ (8003498 <MX_USART1_UART_Init+0x94>)
 8003424:	2200      	movs	r2, #0
 8003426:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003428:	4b1b      	ldr	r3, [pc, #108]	@ (8003498 <MX_USART1_UART_Init+0x94>)
 800342a:	220c      	movs	r2, #12
 800342c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800342e:	4b1a      	ldr	r3, [pc, #104]	@ (8003498 <MX_USART1_UART_Init+0x94>)
 8003430:	2200      	movs	r2, #0
 8003432:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003434:	4b18      	ldr	r3, [pc, #96]	@ (8003498 <MX_USART1_UART_Init+0x94>)
 8003436:	2200      	movs	r2, #0
 8003438:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800343a:	4b17      	ldr	r3, [pc, #92]	@ (8003498 <MX_USART1_UART_Init+0x94>)
 800343c:	2200      	movs	r2, #0
 800343e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003440:	4b15      	ldr	r3, [pc, #84]	@ (8003498 <MX_USART1_UART_Init+0x94>)
 8003442:	2200      	movs	r2, #0
 8003444:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003446:	4b14      	ldr	r3, [pc, #80]	@ (8003498 <MX_USART1_UART_Init+0x94>)
 8003448:	2200      	movs	r2, #0
 800344a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800344c:	4b12      	ldr	r3, [pc, #72]	@ (8003498 <MX_USART1_UART_Init+0x94>)
 800344e:	0018      	movs	r0, r3
 8003450:	f004 fb8e 	bl	8007b70 <HAL_UART_Init>
 8003454:	1e03      	subs	r3, r0, #0
 8003456:	d001      	beq.n	800345c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003458:	f000 fa70 	bl	800393c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800345c:	4b0e      	ldr	r3, [pc, #56]	@ (8003498 <MX_USART1_UART_Init+0x94>)
 800345e:	2100      	movs	r1, #0
 8003460:	0018      	movs	r0, r3
 8003462:	f005 fa43 	bl	80088ec <HAL_UARTEx_SetTxFifoThreshold>
 8003466:	1e03      	subs	r3, r0, #0
 8003468:	d001      	beq.n	800346e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800346a:	f000 fa67 	bl	800393c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800346e:	4b0a      	ldr	r3, [pc, #40]	@ (8003498 <MX_USART1_UART_Init+0x94>)
 8003470:	2100      	movs	r1, #0
 8003472:	0018      	movs	r0, r3
 8003474:	f005 fa7a 	bl	800896c <HAL_UARTEx_SetRxFifoThreshold>
 8003478:	1e03      	subs	r3, r0, #0
 800347a:	d001      	beq.n	8003480 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800347c:	f000 fa5e 	bl	800393c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003480:	4b05      	ldr	r3, [pc, #20]	@ (8003498 <MX_USART1_UART_Init+0x94>)
 8003482:	0018      	movs	r0, r3
 8003484:	f005 f9f8 	bl	8008878 <HAL_UARTEx_DisableFifoMode>
 8003488:	1e03      	subs	r3, r0, #0
 800348a:	d001      	beq.n	8003490 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800348c:	f000 fa56 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003490:	46c0      	nop			@ (mov r8, r8)
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	46c0      	nop			@ (mov r8, r8)
 8003498:	2000143c 	.word	0x2000143c
 800349c:	40013800 	.word	0x40013800

080034a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80034a4:	4b23      	ldr	r3, [pc, #140]	@ (8003534 <MX_USART2_UART_Init+0x94>)
 80034a6:	4a24      	ldr	r2, [pc, #144]	@ (8003538 <MX_USART2_UART_Init+0x98>)
 80034a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80034aa:	4b22      	ldr	r3, [pc, #136]	@ (8003534 <MX_USART2_UART_Init+0x94>)
 80034ac:	22e1      	movs	r2, #225	@ 0xe1
 80034ae:	0252      	lsls	r2, r2, #9
 80034b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034b2:	4b20      	ldr	r3, [pc, #128]	@ (8003534 <MX_USART2_UART_Init+0x94>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003534 <MX_USART2_UART_Init+0x94>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80034be:	4b1d      	ldr	r3, [pc, #116]	@ (8003534 <MX_USART2_UART_Init+0x94>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003534 <MX_USART2_UART_Init+0x94>)
 80034c6:	220c      	movs	r2, #12
 80034c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003534 <MX_USART2_UART_Init+0x94>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80034d0:	4b18      	ldr	r3, [pc, #96]	@ (8003534 <MX_USART2_UART_Init+0x94>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034d6:	4b17      	ldr	r3, [pc, #92]	@ (8003534 <MX_USART2_UART_Init+0x94>)
 80034d8:	2200      	movs	r2, #0
 80034da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80034dc:	4b15      	ldr	r3, [pc, #84]	@ (8003534 <MX_USART2_UART_Init+0x94>)
 80034de:	2200      	movs	r2, #0
 80034e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034e2:	4b14      	ldr	r3, [pc, #80]	@ (8003534 <MX_USART2_UART_Init+0x94>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80034e8:	4b12      	ldr	r3, [pc, #72]	@ (8003534 <MX_USART2_UART_Init+0x94>)
 80034ea:	0018      	movs	r0, r3
 80034ec:	f004 fb40 	bl	8007b70 <HAL_UART_Init>
 80034f0:	1e03      	subs	r3, r0, #0
 80034f2:	d001      	beq.n	80034f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80034f4:	f000 fa22 	bl	800393c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003534 <MX_USART2_UART_Init+0x94>)
 80034fa:	2100      	movs	r1, #0
 80034fc:	0018      	movs	r0, r3
 80034fe:	f005 f9f5 	bl	80088ec <HAL_UARTEx_SetTxFifoThreshold>
 8003502:	1e03      	subs	r3, r0, #0
 8003504:	d001      	beq.n	800350a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003506:	f000 fa19 	bl	800393c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800350a:	4b0a      	ldr	r3, [pc, #40]	@ (8003534 <MX_USART2_UART_Init+0x94>)
 800350c:	2100      	movs	r1, #0
 800350e:	0018      	movs	r0, r3
 8003510:	f005 fa2c 	bl	800896c <HAL_UARTEx_SetRxFifoThreshold>
 8003514:	1e03      	subs	r3, r0, #0
 8003516:	d001      	beq.n	800351c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003518:	f000 fa10 	bl	800393c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800351c:	4b05      	ldr	r3, [pc, #20]	@ (8003534 <MX_USART2_UART_Init+0x94>)
 800351e:	0018      	movs	r0, r3
 8003520:	f005 f9aa 	bl	8008878 <HAL_UARTEx_DisableFifoMode>
 8003524:	1e03      	subs	r3, r0, #0
 8003526:	d001      	beq.n	800352c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003528:	f000 fa08 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800352c:	46c0      	nop			@ (mov r8, r8)
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	46c0      	nop			@ (mov r8, r8)
 8003534:	200014d0 	.word	0x200014d0
 8003538:	40004400 	.word	0x40004400

0800353c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800353c:	b590      	push	{r4, r7, lr}
 800353e:	b089      	sub	sp, #36	@ 0x24
 8003540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003542:	240c      	movs	r4, #12
 8003544:	193b      	adds	r3, r7, r4
 8003546:	0018      	movs	r0, r3
 8003548:	2314      	movs	r3, #20
 800354a:	001a      	movs	r2, r3
 800354c:	2100      	movs	r1, #0
 800354e:	f005 facd 	bl	8008aec <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003552:	4b31      	ldr	r3, [pc, #196]	@ (8003618 <MX_GPIO_Init+0xdc>)
 8003554:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003556:	4b30      	ldr	r3, [pc, #192]	@ (8003618 <MX_GPIO_Init+0xdc>)
 8003558:	2104      	movs	r1, #4
 800355a:	430a      	orrs	r2, r1
 800355c:	635a      	str	r2, [r3, #52]	@ 0x34
 800355e:	4b2e      	ldr	r3, [pc, #184]	@ (8003618 <MX_GPIO_Init+0xdc>)
 8003560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003562:	2204      	movs	r2, #4
 8003564:	4013      	ands	r3, r2
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800356a:	4b2b      	ldr	r3, [pc, #172]	@ (8003618 <MX_GPIO_Init+0xdc>)
 800356c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800356e:	4b2a      	ldr	r3, [pc, #168]	@ (8003618 <MX_GPIO_Init+0xdc>)
 8003570:	2101      	movs	r1, #1
 8003572:	430a      	orrs	r2, r1
 8003574:	635a      	str	r2, [r3, #52]	@ 0x34
 8003576:	4b28      	ldr	r3, [pc, #160]	@ (8003618 <MX_GPIO_Init+0xdc>)
 8003578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800357a:	2201      	movs	r2, #1
 800357c:	4013      	ands	r3, r2
 800357e:	607b      	str	r3, [r7, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003582:	4b25      	ldr	r3, [pc, #148]	@ (8003618 <MX_GPIO_Init+0xdc>)
 8003584:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003586:	4b24      	ldr	r3, [pc, #144]	@ (8003618 <MX_GPIO_Init+0xdc>)
 8003588:	2108      	movs	r1, #8
 800358a:	430a      	orrs	r2, r1
 800358c:	635a      	str	r2, [r3, #52]	@ 0x34
 800358e:	4b22      	ldr	r3, [pc, #136]	@ (8003618 <MX_GPIO_Init+0xdc>)
 8003590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003592:	2208      	movs	r2, #8
 8003594:	4013      	ands	r3, r2
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 800359a:	4920      	ldr	r1, [pc, #128]	@ (800361c <MX_GPIO_Init+0xe0>)
 800359c:	23a0      	movs	r3, #160	@ 0xa0
 800359e:	05db      	lsls	r3, r3, #23
 80035a0:	2200      	movs	r2, #0
 80035a2:	0018      	movs	r0, r3
 80035a4:	f000 ff5b 	bl	800445e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80035a8:	193b      	adds	r3, r7, r4
 80035aa:	2202      	movs	r2, #2
 80035ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035ae:	193b      	adds	r3, r7, r4
 80035b0:	2200      	movs	r2, #0
 80035b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b4:	193b      	adds	r3, r7, r4
 80035b6:	2200      	movs	r2, #0
 80035b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ba:	193b      	adds	r3, r7, r4
 80035bc:	4a18      	ldr	r2, [pc, #96]	@ (8003620 <MX_GPIO_Init+0xe4>)
 80035be:	0019      	movs	r1, r3
 80035c0:	0010      	movs	r0, r2
 80035c2:	f000 fdc3 	bl	800414c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
 80035c6:	193b      	adds	r3, r7, r4
 80035c8:	4a14      	ldr	r2, [pc, #80]	@ (800361c <MX_GPIO_Init+0xe0>)
 80035ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035cc:	193b      	adds	r3, r7, r4
 80035ce:	2201      	movs	r2, #1
 80035d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	193b      	adds	r3, r7, r4
 80035d4:	2200      	movs	r2, #0
 80035d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d8:	193b      	adds	r3, r7, r4
 80035da:	2200      	movs	r2, #0
 80035dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035de:	193a      	adds	r2, r7, r4
 80035e0:	23a0      	movs	r3, #160	@ 0xa0
 80035e2:	05db      	lsls	r3, r3, #23
 80035e4:	0011      	movs	r1, r2
 80035e6:	0018      	movs	r0, r3
 80035e8:	f000 fdb0 	bl	800414c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80035ec:	0021      	movs	r1, r4
 80035ee:	187b      	adds	r3, r7, r1
 80035f0:	22c0      	movs	r2, #192	@ 0xc0
 80035f2:	0152      	lsls	r2, r2, #5
 80035f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035f6:	187b      	adds	r3, r7, r1
 80035f8:	2200      	movs	r2, #0
 80035fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	187b      	adds	r3, r7, r1
 80035fe:	2200      	movs	r2, #0
 8003600:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003602:	187a      	adds	r2, r7, r1
 8003604:	23a0      	movs	r3, #160	@ 0xa0
 8003606:	05db      	lsls	r3, r3, #23
 8003608:	0011      	movs	r1, r2
 800360a:	0018      	movs	r0, r3
 800360c:	f000 fd9e 	bl	800414c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003610:	46c0      	nop			@ (mov r8, r8)
 8003612:	46bd      	mov	sp, r7
 8003614:	b009      	add	sp, #36	@ 0x24
 8003616:	bd90      	pop	{r4, r7, pc}
 8003618:	40021000 	.word	0x40021000
 800361c:	00008030 	.word	0x00008030
 8003620:	50000800 	.word	0x50000800

08003624 <Animate>:

/* USER CODE BEGIN 4 */
//AURORA: Put custom functions here!
void Animate (struct Img* animation, unsigned int size)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af04      	add	r7, sp, #16
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
	++currentFrame;
 800362e:	4b14      	ldr	r3, [pc, #80]	@ (8003680 <Animate+0x5c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	4b12      	ldr	r3, [pc, #72]	@ (8003680 <Animate+0x5c>)
 8003636:	601a      	str	r2, [r3, #0]
	if(currentFrame > size)
 8003638:	4b11      	ldr	r3, [pc, #68]	@ (8003680 <Animate+0x5c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d202      	bcs.n	8003648 <Animate+0x24>
	{
		currentFrame = 0;
 8003642:	4b0f      	ldr	r3, [pc, #60]	@ (8003680 <Animate+0x5c>)
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
	}
	drawImage(animation[currentFrame].Body, palette, 40, 40, 64, 64, animation[currentFrame].Size);
 8003648:	4b0d      	ldr	r3, [pc, #52]	@ (8003680 <Animate+0x5c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	18d3      	adds	r3, r2, r3
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	4b0a      	ldr	r3, [pc, #40]	@ (8003680 <Animate+0x5c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	18d3      	adds	r3, r2, r3
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	b29b      	uxth	r3, r3
 8003662:	4908      	ldr	r1, [pc, #32]	@ (8003684 <Animate+0x60>)
 8003664:	9302      	str	r3, [sp, #8]
 8003666:	2340      	movs	r3, #64	@ 0x40
 8003668:	9301      	str	r3, [sp, #4]
 800366a:	2340      	movs	r3, #64	@ 0x40
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	2328      	movs	r3, #40	@ 0x28
 8003670:	2228      	movs	r2, #40	@ 0x28
 8003672:	f7fe fecb 	bl	800240c <drawImage>
	return;
 8003676:	46c0      	nop			@ (mov r8, r8)
}
 8003678:	46bd      	mov	sp, r7
 800367a:	b002      	add	sp, #8
 800367c:	bd80      	pop	{r7, pc}
 800367e:	46c0      	nop			@ (mov r8, r8)
 8003680:	20001290 	.word	0x20001290
 8003684:	20000e30 	.word	0x20000e30

08003688 <_ADXL343_ReadReg8>:
int _ADXL343_ReadReg8 (unsigned char TargetRegister, unsigned char * TargetValue, uint8_t size)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af02      	add	r7, sp, #8
 800368e:	6039      	str	r1, [r7, #0]
 8003690:	0011      	movs	r1, r2
 8003692:	1dfb      	adds	r3, r7, #7
 8003694:	1c02      	adds	r2, r0, #0
 8003696:	701a      	strb	r2, [r3, #0]
 8003698:	1dbb      	adds	r3, r7, #6
 800369a:	1c0a      	adds	r2, r1, #0
 800369c:	701a      	strb	r2, [r3, #0]
  if (!HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, &TargetRegister, 1, 1000)==HAL_OK)
 800369e:	1dfa      	adds	r2, r7, #7
 80036a0:	4811      	ldr	r0, [pc, #68]	@ (80036e8 <_ADXL343_ReadReg8+0x60>)
 80036a2:	23fa      	movs	r3, #250	@ 0xfa
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	2301      	movs	r3, #1
 80036aa:	2128      	movs	r1, #40	@ 0x28
 80036ac:	f000 ff9a 	bl	80045e4 <HAL_I2C_Master_Transmit>
 80036b0:	1e03      	subs	r3, r0, #0
 80036b2:	d002      	beq.n	80036ba <_ADXL343_ReadReg8+0x32>
      return -1;
 80036b4:	2301      	movs	r3, #1
 80036b6:	425b      	negs	r3, r3
 80036b8:	e011      	b.n	80036de <_ADXL343_ReadReg8+0x56>

  if (!HAL_I2C_Master_Receive(&hi2c1, 0x14<<1, TargetValue, size, 1000)==HAL_OK)
 80036ba:	1dbb      	adds	r3, r7, #6
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	b299      	uxth	r1, r3
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	4809      	ldr	r0, [pc, #36]	@ (80036e8 <_ADXL343_ReadReg8+0x60>)
 80036c4:	23fa      	movs	r3, #250	@ 0xfa
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	000b      	movs	r3, r1
 80036cc:	2128      	movs	r1, #40	@ 0x28
 80036ce:	f001 f8b3 	bl	8004838 <HAL_I2C_Master_Receive>
 80036d2:	1e03      	subs	r3, r0, #0
 80036d4:	d002      	beq.n	80036dc <_ADXL343_ReadReg8+0x54>
    return -2;
 80036d6:	2302      	movs	r3, #2
 80036d8:	425b      	negs	r3, r3
 80036da:	e000      	b.n	80036de <_ADXL343_ReadReg8+0x56>

  return 0;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	0018      	movs	r0, r3
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b002      	add	sp, #8
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	46c0      	nop			@ (mov r8, r8)
 80036e8:	2000130c 	.word	0x2000130c

080036ec <_ADXL343_WriteReg8>:

int _ADXL343_WriteReg8 (unsigned char TargetRegister, unsigned char TargetValue)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	0002      	movs	r2, r0
 80036f4:	1dfb      	adds	r3, r7, #7
 80036f6:	701a      	strb	r2, [r3, #0]
 80036f8:	1dbb      	adds	r3, r7, #6
 80036fa:	1c0a      	adds	r2, r1, #0
 80036fc:	701a      	strb	r2, [r3, #0]
  unsigned char buff [2];
  buff[0] = TargetRegister;
 80036fe:	210c      	movs	r1, #12
 8003700:	187b      	adds	r3, r7, r1
 8003702:	1dfa      	adds	r2, r7, #7
 8003704:	7812      	ldrb	r2, [r2, #0]
 8003706:	701a      	strb	r2, [r3, #0]
  buff[1] = TargetValue;
 8003708:	187b      	adds	r3, r7, r1
 800370a:	1dba      	adds	r2, r7, #6
 800370c:	7812      	ldrb	r2, [r2, #0]
 800370e:	705a      	strb	r2, [r3, #1]

  if (HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, buff, 2, 100))
 8003710:	187a      	adds	r2, r7, r1
 8003712:	4808      	ldr	r0, [pc, #32]	@ (8003734 <_ADXL343_WriteReg8+0x48>)
 8003714:	2364      	movs	r3, #100	@ 0x64
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	2302      	movs	r3, #2
 800371a:	2128      	movs	r1, #40	@ 0x28
 800371c:	f000 ff62 	bl	80045e4 <HAL_I2C_Master_Transmit>
 8003720:	1e03      	subs	r3, r0, #0
 8003722:	d002      	beq.n	800372a <_ADXL343_WriteReg8+0x3e>
      return -1;
 8003724:	2301      	movs	r3, #1
 8003726:	425b      	negs	r3, r3
 8003728:	e000      	b.n	800372c <_ADXL343_WriteReg8+0x40>

  return 0;
 800372a:	2300      	movs	r3, #0
}
 800372c:	0018      	movs	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	b004      	add	sp, #16
 8003732:	bd80      	pop	{r7, pc}
 8003734:	2000130c 	.word	0x2000130c

08003738 <SendData>:
void SendData()
{
 8003738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800373a:	46c6      	mov	lr, r8
 800373c:	b500      	push	{lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af06      	add	r7, sp, #24
	unsigned int posIndex;
	unsigned int clrIndex;
	sprintf(sendBuffer, "(lifeSteps:%d),(weeklySteps:%d),(dailySteps:%d),(uid:%s),(friendship:%d),(password:password)(difficulty:%d),(evolution:%d) \n\r", game.allSteps,game.weeklySteps,game.stepsToday, game.uid, game.mood, game.challengeGoal, game.evo);
 8003742:	4a59      	ldr	r2, [pc, #356]	@ (80038a8 <SendData+0x170>)
 8003744:	238c      	movs	r3, #140	@ 0x8c
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	58d4      	ldr	r4, [r2, r3]
 800374a:	4a57      	ldr	r2, [pc, #348]	@ (80038a8 <SendData+0x170>)
 800374c:	238e      	movs	r3, #142	@ 0x8e
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	58d5      	ldr	r5, [r2, r3]
 8003752:	4a55      	ldr	r2, [pc, #340]	@ (80038a8 <SendData+0x170>)
 8003754:	2390      	movs	r3, #144	@ 0x90
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	58d3      	ldr	r3, [r2, r3]
 800375a:	4698      	mov	r8, r3
 800375c:	4a52      	ldr	r2, [pc, #328]	@ (80038a8 <SendData+0x170>)
 800375e:	7c52      	ldrb	r2, [r2, #17]
 8003760:	0016      	movs	r6, r2
 8003762:	4951      	ldr	r1, [pc, #324]	@ (80038a8 <SendData+0x170>)
 8003764:	2292      	movs	r2, #146	@ 0x92
 8003766:	0052      	lsls	r2, r2, #1
 8003768:	588a      	ldr	r2, [r1, r2]
 800376a:	494f      	ldr	r1, [pc, #316]	@ (80038a8 <SendData+0x170>)
 800376c:	7c09      	ldrb	r1, [r1, #16]
 800376e:	468c      	mov	ip, r1
 8003770:	494e      	ldr	r1, [pc, #312]	@ (80038ac <SendData+0x174>)
 8003772:	484f      	ldr	r0, [pc, #316]	@ (80038b0 <SendData+0x178>)
 8003774:	4663      	mov	r3, ip
 8003776:	9304      	str	r3, [sp, #16]
 8003778:	9203      	str	r2, [sp, #12]
 800377a:	9602      	str	r6, [sp, #8]
 800377c:	4a4d      	ldr	r2, [pc, #308]	@ (80038b4 <SendData+0x17c>)
 800377e:	9201      	str	r2, [sp, #4]
 8003780:	4643      	mov	r3, r8
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	002b      	movs	r3, r5
 8003786:	0022      	movs	r2, r4
 8003788:	f005 f990 	bl	8008aac <siprintf>
	HAL_UART_Transmit(&huart2, sendBuffer, strlen(sendBuffer), 200);
 800378c:	4b48      	ldr	r3, [pc, #288]	@ (80038b0 <SendData+0x178>)
 800378e:	0018      	movs	r0, r3
 8003790:	f7fc fcb8 	bl	8000104 <strlen>
 8003794:	0003      	movs	r3, r0
 8003796:	b29a      	uxth	r2, r3
 8003798:	4945      	ldr	r1, [pc, #276]	@ (80038b0 <SendData+0x178>)
 800379a:	4847      	ldr	r0, [pc, #284]	@ (80038b8 <SendData+0x180>)
 800379c:	23c8      	movs	r3, #200	@ 0xc8
 800379e:	f004 fa3d 	bl	8007c1c <HAL_UART_Transmit>
	for(posIndex=0; posIndex<game.numLocations; posIndex++)
 80037a2:	2300      	movs	r3, #0
 80037a4:	607b      	str	r3, [r7, #4]
 80037a6:	e072      	b.n	800388e <SendData+0x156>
	{       HAL_Delay(5);
 80037a8:	2005      	movs	r0, #5
 80037aa:	f000 fbe1 	bl	8003f70 <HAL_Delay>
		for(clrIndex=0;clrIndex<400;clrIndex++) sendBuffer[clrIndex]=0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	603b      	str	r3, [r7, #0]
 80037b2:	e007      	b.n	80037c4 <SendData+0x8c>
 80037b4:	4a3e      	ldr	r2, [pc, #248]	@ (80038b0 <SendData+0x178>)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	18d3      	adds	r3, r2, r3
 80037ba:	2200      	movs	r2, #0
 80037bc:	701a      	strb	r2, [r3, #0]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	3301      	adds	r3, #1
 80037c2:	603b      	str	r3, [r7, #0]
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	23c8      	movs	r3, #200	@ 0xc8
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d3f2      	bcc.n	80037b4 <SendData+0x7c>
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),", ((int)game.positions[posIndex].lat), abs((int)((fmod((double)game.positions[posIndex].lat, (double)1))*10000)),((int)game.positions[posIndex].lon), abs((int)((fmod((double)game.positions[posIndex].lon, (double)1))*10000)));
 80037ce:	4b36      	ldr	r3, [pc, #216]	@ (80038a8 <SendData+0x170>)
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	3203      	adds	r2, #3
 80037d4:	00d2      	lsls	r2, r2, #3
 80037d6:	58d3      	ldr	r3, [r2, r3]
 80037d8:	1c18      	adds	r0, r3, #0
 80037da:	f7fd fa21 	bl	8000c20 <__aeabi_f2iz>
 80037de:	0006      	movs	r6, r0
 80037e0:	4b31      	ldr	r3, [pc, #196]	@ (80038a8 <SendData+0x170>)
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	3203      	adds	r2, #3
 80037e6:	00d2      	lsls	r2, r2, #3
 80037e8:	58d3      	ldr	r3, [r2, r3]
 80037ea:	1c18      	adds	r0, r3, #0
 80037ec:	f7fe f9a2 	bl	8001b34 <__aeabi_f2d>
 80037f0:	2200      	movs	r2, #0
 80037f2:	4b32      	ldr	r3, [pc, #200]	@ (80038bc <SendData+0x184>)
 80037f4:	f005 fdf8 	bl	80093e8 <fmod>
 80037f8:	2200      	movs	r2, #0
 80037fa:	4b31      	ldr	r3, [pc, #196]	@ (80038c0 <SendData+0x188>)
 80037fc:	f7fd fe74 	bl	80014e8 <__aeabi_dmul>
 8003800:	0002      	movs	r2, r0
 8003802:	000b      	movs	r3, r1
 8003804:	0010      	movs	r0, r2
 8003806:	0019      	movs	r1, r3
 8003808:	f7fe f958 	bl	8001abc <__aeabi_d2iz>
 800380c:	0003      	movs	r3, r0
 800380e:	17da      	asrs	r2, r3, #31
 8003810:	189c      	adds	r4, r3, r2
 8003812:	4054      	eors	r4, r2
 8003814:	4a24      	ldr	r2, [pc, #144]	@ (80038a8 <SendData+0x170>)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3303      	adds	r3, #3
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	18d3      	adds	r3, r2, r3
 800381e:	3304      	adds	r3, #4
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	1c18      	adds	r0, r3, #0
 8003824:	f7fd f9fc 	bl	8000c20 <__aeabi_f2iz>
 8003828:	0005      	movs	r5, r0
 800382a:	4a1f      	ldr	r2, [pc, #124]	@ (80038a8 <SendData+0x170>)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3303      	adds	r3, #3
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	18d3      	adds	r3, r2, r3
 8003834:	3304      	adds	r3, #4
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	1c18      	adds	r0, r3, #0
 800383a:	f7fe f97b 	bl	8001b34 <__aeabi_f2d>
 800383e:	2200      	movs	r2, #0
 8003840:	4b1e      	ldr	r3, [pc, #120]	@ (80038bc <SendData+0x184>)
 8003842:	f005 fdd1 	bl	80093e8 <fmod>
 8003846:	2200      	movs	r2, #0
 8003848:	4b1d      	ldr	r3, [pc, #116]	@ (80038c0 <SendData+0x188>)
 800384a:	f7fd fe4d 	bl	80014e8 <__aeabi_dmul>
 800384e:	0002      	movs	r2, r0
 8003850:	000b      	movs	r3, r1
 8003852:	0010      	movs	r0, r2
 8003854:	0019      	movs	r1, r3
 8003856:	f7fe f931 	bl	8001abc <__aeabi_d2iz>
 800385a:	0003      	movs	r3, r0
 800385c:	17da      	asrs	r2, r3, #31
 800385e:	189b      	adds	r3, r3, r2
 8003860:	4053      	eors	r3, r2
 8003862:	4918      	ldr	r1, [pc, #96]	@ (80038c4 <SendData+0x18c>)
 8003864:	4812      	ldr	r0, [pc, #72]	@ (80038b0 <SendData+0x178>)
 8003866:	9301      	str	r3, [sp, #4]
 8003868:	9500      	str	r5, [sp, #0]
 800386a:	0023      	movs	r3, r4
 800386c:	0032      	movs	r2, r6
 800386e:	f005 f91d 	bl	8008aac <siprintf>
		HAL_UART_Transmit(&huart2, sendBuffer, strlen(sendBuffer), 200);
 8003872:	4b0f      	ldr	r3, [pc, #60]	@ (80038b0 <SendData+0x178>)
 8003874:	0018      	movs	r0, r3
 8003876:	f7fc fc45 	bl	8000104 <strlen>
 800387a:	0003      	movs	r3, r0
 800387c:	b29a      	uxth	r2, r3
 800387e:	490c      	ldr	r1, [pc, #48]	@ (80038b0 <SendData+0x178>)
 8003880:	480d      	ldr	r0, [pc, #52]	@ (80038b8 <SendData+0x180>)
 8003882:	23c8      	movs	r3, #200	@ 0xc8
 8003884:	f004 f9ca 	bl	8007c1c <HAL_UART_Transmit>
	for(posIndex=0; posIndex<game.numLocations; posIndex++)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3301      	adds	r3, #1
 800388c:	607b      	str	r3, [r7, #4]
 800388e:	4b06      	ldr	r3, [pc, #24]	@ (80038a8 <SendData+0x170>)
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	429a      	cmp	r2, r3
 8003896:	d387      	bcc.n	80037a8 <SendData+0x70>

	}
}
 8003898:	46c0      	nop			@ (mov r8, r8)
 800389a:	46c0      	nop			@ (mov r8, r8)
 800389c:	46bd      	mov	sp, r7
 800389e:	b002      	add	sp, #8
 80038a0:	bc80      	pop	{r7}
 80038a2:	46b8      	mov	r8, r7
 80038a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038a6:	46c0      	nop			@ (mov r8, r8)
 80038a8:	20000f08 	.word	0x20000f08
 80038ac:	080096e8 	.word	0x080096e8
 80038b0:	200010dc 	.word	0x200010dc
 80038b4:	20001030 	.word	0x20001030
 80038b8:	200014d0 	.word	0x200014d0
 80038bc:	3ff00000 	.word	0x3ff00000
 80038c0:	40c38800 	.word	0x40c38800
 80038c4:	08009768 	.word	0x08009768

080038c8 <HAL_RTC_AlarmAEventCallback>:
			  		  	}

	game.positions[game.numLocations] = pos;
	game.numLocations++;
}
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80038c8:	b590      	push	{r4, r7, lr}
 80038ca:	b091      	sub	sp, #68	@ 0x44
 80038cc:	af04      	add	r7, sp, #16
 80038ce:	6078      	str	r0, [r7, #4]
  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 80038d0:	2380      	movs	r3, #128	@ 0x80
 80038d2:	005a      	lsls	r2, r3, #1
 80038d4:	2408      	movs	r4, #8
 80038d6:	1939      	adds	r1, r7, r4
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	2300      	movs	r3, #0
 80038dc:	f002 fcf2 	bl	80062c4 <HAL_RTC_GetAlarm>
  if(sAlarm.AlarmTime.Seconds>58) {
 80038e0:	0022      	movs	r2, r4
 80038e2:	18bb      	adds	r3, r7, r2
 80038e4:	789b      	ldrb	r3, [r3, #2]
 80038e6:	2b3a      	cmp	r3, #58	@ 0x3a
 80038e8:	d903      	bls.n	80038f2 <HAL_RTC_AlarmAEventCallback+0x2a>
    sAlarm.AlarmTime.Seconds=0;
 80038ea:	18bb      	adds	r3, r7, r2
 80038ec:	2200      	movs	r2, #0
 80038ee:	709a      	strb	r2, [r3, #2]
 80038f0:	e006      	b.n	8003900 <HAL_RTC_AlarmAEventCallback+0x38>
  }else{
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 80038f2:	2108      	movs	r1, #8
 80038f4:	187b      	adds	r3, r7, r1
 80038f6:	789b      	ldrb	r3, [r3, #2]
 80038f8:	3301      	adds	r3, #1
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	187b      	adds	r3, r7, r1
 80038fe:	709a      	strb	r2, [r3, #2]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8003900:	46c0      	nop			@ (mov r8, r8)
 8003902:	2308      	movs	r3, #8
 8003904:	18f9      	adds	r1, r7, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	0018      	movs	r0, r3
 800390c:	f002 fb9a 	bl	8006044 <HAL_RTC_SetAlarm_IT>
 8003910:	1e03      	subs	r3, r0, #0
 8003912:	d1f6      	bne.n	8003902 <HAL_RTC_AlarmAEventCallback+0x3a>
  	  drawString(30, 30, "testTime", BLACK, GREEN, 1, 1);
 8003914:	4a07      	ldr	r2, [pc, #28]	@ (8003934 <HAL_RTC_AlarmAEventCallback+0x6c>)
 8003916:	2301      	movs	r3, #1
 8003918:	9302      	str	r3, [sp, #8]
 800391a:	2301      	movs	r3, #1
 800391c:	9301      	str	r3, [sp, #4]
 800391e:	4b06      	ldr	r3, [pc, #24]	@ (8003938 <HAL_RTC_AlarmAEventCallback+0x70>)
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	2300      	movs	r3, #0
 8003924:	211e      	movs	r1, #30
 8003926:	201e      	movs	r0, #30
 8003928:	f7fe fbb8 	bl	800209c <drawString>
}
 800392c:	46c0      	nop			@ (mov r8, r8)
 800392e:	46bd      	mov	sp, r7
 8003930:	b00d      	add	sp, #52	@ 0x34
 8003932:	bd90      	pop	{r4, r7, pc}
 8003934:	08009784 	.word	0x08009784
 8003938:	ffffe007 	.word	0xffffe007

0800393c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003940:	b672      	cpsid	i
}
 8003942:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003944:	46c0      	nop			@ (mov r8, r8)
 8003946:	e7fd      	b.n	8003944 <Error_Handler+0x8>

08003948 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800394e:	4b11      	ldr	r3, [pc, #68]	@ (8003994 <HAL_MspInit+0x4c>)
 8003950:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003952:	4b10      	ldr	r3, [pc, #64]	@ (8003994 <HAL_MspInit+0x4c>)
 8003954:	2101      	movs	r1, #1
 8003956:	430a      	orrs	r2, r1
 8003958:	641a      	str	r2, [r3, #64]	@ 0x40
 800395a:	4b0e      	ldr	r3, [pc, #56]	@ (8003994 <HAL_MspInit+0x4c>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395e:	2201      	movs	r2, #1
 8003960:	4013      	ands	r3, r2
 8003962:	607b      	str	r3, [r7, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003966:	4b0b      	ldr	r3, [pc, #44]	@ (8003994 <HAL_MspInit+0x4c>)
 8003968:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800396a:	4b0a      	ldr	r3, [pc, #40]	@ (8003994 <HAL_MspInit+0x4c>)
 800396c:	2180      	movs	r1, #128	@ 0x80
 800396e:	0549      	lsls	r1, r1, #21
 8003970:	430a      	orrs	r2, r1
 8003972:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003974:	4b07      	ldr	r3, [pc, #28]	@ (8003994 <HAL_MspInit+0x4c>)
 8003976:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003978:	2380      	movs	r3, #128	@ 0x80
 800397a:	055b      	lsls	r3, r3, #21
 800397c:	4013      	ands	r3, r2
 800397e:	603b      	str	r3, [r7, #0]
 8003980:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003982:	23c0      	movs	r3, #192	@ 0xc0
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	0018      	movs	r0, r3
 8003988:	f000 fb16 	bl	8003fb8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800398c:	46c0      	nop			@ (mov r8, r8)
 800398e:	46bd      	mov	sp, r7
 8003990:	b002      	add	sp, #8
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40021000 	.word	0x40021000

08003998 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b09d      	sub	sp, #116	@ 0x74
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a0:	235c      	movs	r3, #92	@ 0x5c
 80039a2:	18fb      	adds	r3, r7, r3
 80039a4:	0018      	movs	r0, r3
 80039a6:	2314      	movs	r3, #20
 80039a8:	001a      	movs	r2, r3
 80039aa:	2100      	movs	r1, #0
 80039ac:	f005 f89e 	bl	8008aec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039b0:	2410      	movs	r4, #16
 80039b2:	193b      	adds	r3, r7, r4
 80039b4:	0018      	movs	r0, r3
 80039b6:	234c      	movs	r3, #76	@ 0x4c
 80039b8:	001a      	movs	r2, r3
 80039ba:	2100      	movs	r1, #0
 80039bc:	f005 f896 	bl	8008aec <memset>
  if(hi2c->Instance==I2C1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a23      	ldr	r2, [pc, #140]	@ (8003a54 <HAL_I2C_MspInit+0xbc>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d13f      	bne.n	8003a4a <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80039ca:	193b      	adds	r3, r7, r4
 80039cc:	2220      	movs	r2, #32
 80039ce:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80039d0:	193b      	adds	r3, r7, r4
 80039d2:	2200      	movs	r2, #0
 80039d4:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039d6:	193b      	adds	r3, r7, r4
 80039d8:	0018      	movs	r0, r3
 80039da:	f002 f8f7 	bl	8005bcc <HAL_RCCEx_PeriphCLKConfig>
 80039de:	1e03      	subs	r3, r0, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80039e2:	f7ff ffab 	bl	800393c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003a58 <HAL_I2C_MspInit+0xc0>)
 80039e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003a58 <HAL_I2C_MspInit+0xc0>)
 80039ec:	2101      	movs	r1, #1
 80039ee:	430a      	orrs	r2, r1
 80039f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80039f2:	4b19      	ldr	r3, [pc, #100]	@ (8003a58 <HAL_I2C_MspInit+0xc0>)
 80039f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f6:	2201      	movs	r2, #1
 80039f8:	4013      	ands	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80039fe:	215c      	movs	r1, #92	@ 0x5c
 8003a00:	187b      	adds	r3, r7, r1
 8003a02:	22c0      	movs	r2, #192	@ 0xc0
 8003a04:	00d2      	lsls	r2, r2, #3
 8003a06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a08:	187b      	adds	r3, r7, r1
 8003a0a:	2212      	movs	r2, #18
 8003a0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0e:	187b      	adds	r3, r7, r1
 8003a10:	2200      	movs	r2, #0
 8003a12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a14:	187b      	adds	r3, r7, r1
 8003a16:	2200      	movs	r2, #0
 8003a18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003a1a:	187b      	adds	r3, r7, r1
 8003a1c:	2206      	movs	r2, #6
 8003a1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a20:	187a      	adds	r2, r7, r1
 8003a22:	23a0      	movs	r3, #160	@ 0xa0
 8003a24:	05db      	lsls	r3, r3, #23
 8003a26:	0011      	movs	r1, r2
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f000 fb8f 	bl	800414c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a58 <HAL_I2C_MspInit+0xc0>)
 8003a30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a32:	4b09      	ldr	r3, [pc, #36]	@ (8003a58 <HAL_I2C_MspInit+0xc0>)
 8003a34:	2180      	movs	r1, #128	@ 0x80
 8003a36:	0389      	lsls	r1, r1, #14
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003a3c:	4b06      	ldr	r3, [pc, #24]	@ (8003a58 <HAL_I2C_MspInit+0xc0>)
 8003a3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a40:	2380      	movs	r3, #128	@ 0x80
 8003a42:	039b      	lsls	r3, r3, #14
 8003a44:	4013      	ands	r3, r2
 8003a46:	60bb      	str	r3, [r7, #8]
 8003a48:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003a4a:	46c0      	nop			@ (mov r8, r8)
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	b01d      	add	sp, #116	@ 0x74
 8003a50:	bd90      	pop	{r4, r7, pc}
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	40005400 	.word	0x40005400
 8003a58:	40021000 	.word	0x40021000

08003a5c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a5c:	b590      	push	{r4, r7, lr}
 8003a5e:	b08b      	sub	sp, #44	@ 0x2c
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a64:	2414      	movs	r4, #20
 8003a66:	193b      	adds	r3, r7, r4
 8003a68:	0018      	movs	r0, r3
 8003a6a:	2314      	movs	r3, #20
 8003a6c:	001a      	movs	r2, r3
 8003a6e:	2100      	movs	r1, #0
 8003a70:	f005 f83c 	bl	8008aec <memset>
  if(hspi->Instance==SPI1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a2c      	ldr	r2, [pc, #176]	@ (8003b2c <HAL_SPI_MspInit+0xd0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d151      	bne.n	8003b22 <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a7e:	4b2c      	ldr	r3, [pc, #176]	@ (8003b30 <HAL_SPI_MspInit+0xd4>)
 8003a80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a82:	4b2b      	ldr	r3, [pc, #172]	@ (8003b30 <HAL_SPI_MspInit+0xd4>)
 8003a84:	2180      	movs	r1, #128	@ 0x80
 8003a86:	0149      	lsls	r1, r1, #5
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a8c:	4b28      	ldr	r3, [pc, #160]	@ (8003b30 <HAL_SPI_MspInit+0xd4>)
 8003a8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a90:	2380      	movs	r3, #128	@ 0x80
 8003a92:	015b      	lsls	r3, r3, #5
 8003a94:	4013      	ands	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
 8003a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a9a:	4b25      	ldr	r3, [pc, #148]	@ (8003b30 <HAL_SPI_MspInit+0xd4>)
 8003a9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a9e:	4b24      	ldr	r3, [pc, #144]	@ (8003b30 <HAL_SPI_MspInit+0xd4>)
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003aa6:	4b22      	ldr	r3, [pc, #136]	@ (8003b30 <HAL_SPI_MspInit+0xd4>)
 8003aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aaa:	2201      	movs	r2, #1
 8003aac:	4013      	ands	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8003b30 <HAL_SPI_MspInit+0xd4>)
 8003ab4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8003b30 <HAL_SPI_MspInit+0xd4>)
 8003ab8:	2108      	movs	r1, #8
 8003aba:	430a      	orrs	r2, r1
 8003abc:	635a      	str	r2, [r3, #52]	@ 0x34
 8003abe:	4b1c      	ldr	r3, [pc, #112]	@ (8003b30 <HAL_SPI_MspInit+0xd4>)
 8003ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac2:	2208      	movs	r2, #8
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	60bb      	str	r3, [r7, #8]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PD5     ------> SPI1_MISO
    PD6     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003aca:	193b      	adds	r3, r7, r4
 8003acc:	2202      	movs	r2, #2
 8003ace:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad0:	193b      	adds	r3, r7, r4
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad6:	193b      	adds	r3, r7, r4
 8003ad8:	2200      	movs	r2, #0
 8003ada:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003adc:	193b      	adds	r3, r7, r4
 8003ade:	2200      	movs	r2, #0
 8003ae0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003ae2:	193b      	adds	r3, r7, r4
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae8:	193a      	adds	r2, r7, r4
 8003aea:	23a0      	movs	r3, #160	@ 0xa0
 8003aec:	05db      	lsls	r3, r3, #23
 8003aee:	0011      	movs	r1, r2
 8003af0:	0018      	movs	r0, r3
 8003af2:	f000 fb2b 	bl	800414c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003af6:	0021      	movs	r1, r4
 8003af8:	187b      	adds	r3, r7, r1
 8003afa:	2260      	movs	r2, #96	@ 0x60
 8003afc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afe:	187b      	adds	r3, r7, r1
 8003b00:	2202      	movs	r2, #2
 8003b02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b04:	187b      	adds	r3, r7, r1
 8003b06:	2200      	movs	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b0a:	187b      	adds	r3, r7, r1
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8003b10:	187b      	adds	r3, r7, r1
 8003b12:	2201      	movs	r2, #1
 8003b14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b16:	187b      	adds	r3, r7, r1
 8003b18:	4a06      	ldr	r2, [pc, #24]	@ (8003b34 <HAL_SPI_MspInit+0xd8>)
 8003b1a:	0019      	movs	r1, r3
 8003b1c:	0010      	movs	r0, r2
 8003b1e:	f000 fb15 	bl	800414c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003b22:	46c0      	nop			@ (mov r8, r8)
 8003b24:	46bd      	mov	sp, r7
 8003b26:	b00b      	add	sp, #44	@ 0x2c
 8003b28:	bd90      	pop	{r4, r7, pc}
 8003b2a:	46c0      	nop			@ (mov r8, r8)
 8003b2c:	40013000 	.word	0x40013000
 8003b30:	40021000 	.word	0x40021000
 8003b34:	50000c00 	.word	0x50000c00

08003b38 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a0a      	ldr	r2, [pc, #40]	@ (8003b70 <HAL_TIM_Base_MspInit+0x38>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d10d      	bne.n	8003b66 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b74 <HAL_TIM_Base_MspInit+0x3c>)
 8003b4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b4e:	4b09      	ldr	r3, [pc, #36]	@ (8003b74 <HAL_TIM_Base_MspInit+0x3c>)
 8003b50:	2180      	movs	r1, #128	@ 0x80
 8003b52:	02c9      	lsls	r1, r1, #11
 8003b54:	430a      	orrs	r2, r1
 8003b56:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b58:	4b06      	ldr	r3, [pc, #24]	@ (8003b74 <HAL_TIM_Base_MspInit+0x3c>)
 8003b5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b5c:	2380      	movs	r3, #128	@ 0x80
 8003b5e:	02db      	lsls	r3, r3, #11
 8003b60:	4013      	ands	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b004      	add	sp, #16
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	40014800 	.word	0x40014800
 8003b74:	40021000 	.word	0x40021000

08003b78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b78:	b590      	push	{r4, r7, lr}
 8003b7a:	b089      	sub	sp, #36	@ 0x24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b80:	240c      	movs	r4, #12
 8003b82:	193b      	adds	r3, r7, r4
 8003b84:	0018      	movs	r0, r3
 8003b86:	2314      	movs	r3, #20
 8003b88:	001a      	movs	r2, r3
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	f004 ffae 	bl	8008aec <memset>
  if(htim->Instance==TIM17)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a14      	ldr	r2, [pc, #80]	@ (8003be8 <HAL_TIM_MspPostInit+0x70>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d122      	bne.n	8003be0 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b9a:	4b14      	ldr	r3, [pc, #80]	@ (8003bec <HAL_TIM_MspPostInit+0x74>)
 8003b9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b9e:	4b13      	ldr	r3, [pc, #76]	@ (8003bec <HAL_TIM_MspPostInit+0x74>)
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ba6:	4b11      	ldr	r3, [pc, #68]	@ (8003bec <HAL_TIM_MspPostInit+0x74>)
 8003ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003baa:	2201      	movs	r2, #1
 8003bac:	4013      	ands	r3, r2
 8003bae:	60bb      	str	r3, [r7, #8]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003bb2:	0021      	movs	r1, r4
 8003bb4:	187b      	adds	r3, r7, r1
 8003bb6:	2280      	movs	r2, #128	@ 0x80
 8003bb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bba:	187b      	adds	r3, r7, r1
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc0:	187b      	adds	r3, r7, r1
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc6:	187b      	adds	r3, r7, r1
 8003bc8:	2200      	movs	r2, #0
 8003bca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8003bcc:	187b      	adds	r3, r7, r1
 8003bce:	2205      	movs	r2, #5
 8003bd0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd2:	187a      	adds	r2, r7, r1
 8003bd4:	23a0      	movs	r3, #160	@ 0xa0
 8003bd6:	05db      	lsls	r3, r3, #23
 8003bd8:	0011      	movs	r1, r2
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f000 fab6 	bl	800414c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003be0:	46c0      	nop			@ (mov r8, r8)
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b009      	add	sp, #36	@ 0x24
 8003be6:	bd90      	pop	{r4, r7, pc}
 8003be8:	40014800 	.word	0x40014800
 8003bec:	40021000 	.word	0x40021000

08003bf0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bf0:	b590      	push	{r4, r7, lr}
 8003bf2:	b09f      	sub	sp, #124	@ 0x7c
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf8:	2364      	movs	r3, #100	@ 0x64
 8003bfa:	18fb      	adds	r3, r7, r3
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	2314      	movs	r3, #20
 8003c00:	001a      	movs	r2, r3
 8003c02:	2100      	movs	r1, #0
 8003c04:	f004 ff72 	bl	8008aec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c08:	2418      	movs	r4, #24
 8003c0a:	193b      	adds	r3, r7, r4
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	234c      	movs	r3, #76	@ 0x4c
 8003c10:	001a      	movs	r2, r3
 8003c12:	2100      	movs	r1, #0
 8003c14:	f004 ff6a 	bl	8008aec <memset>
  if(huart->Instance==USART1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a45      	ldr	r2, [pc, #276]	@ (8003d34 <HAL_UART_MspInit+0x144>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d13e      	bne.n	8003ca0 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003c22:	193b      	adds	r3, r7, r4
 8003c24:	2201      	movs	r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003c28:	193b      	adds	r3, r7, r4
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c2e:	193b      	adds	r3, r7, r4
 8003c30:	0018      	movs	r0, r3
 8003c32:	f001 ffcb 	bl	8005bcc <HAL_RCCEx_PeriphCLKConfig>
 8003c36:	1e03      	subs	r3, r0, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003c3a:	f7ff fe7f 	bl	800393c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c3e:	4b3e      	ldr	r3, [pc, #248]	@ (8003d38 <HAL_UART_MspInit+0x148>)
 8003c40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c42:	4b3d      	ldr	r3, [pc, #244]	@ (8003d38 <HAL_UART_MspInit+0x148>)
 8003c44:	2180      	movs	r1, #128	@ 0x80
 8003c46:	01c9      	lsls	r1, r1, #7
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c4c:	4b3a      	ldr	r3, [pc, #232]	@ (8003d38 <HAL_UART_MspInit+0x148>)
 8003c4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c50:	2380      	movs	r3, #128	@ 0x80
 8003c52:	01db      	lsls	r3, r3, #7
 8003c54:	4013      	ands	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c5a:	4b37      	ldr	r3, [pc, #220]	@ (8003d38 <HAL_UART_MspInit+0x148>)
 8003c5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c5e:	4b36      	ldr	r3, [pc, #216]	@ (8003d38 <HAL_UART_MspInit+0x148>)
 8003c60:	2104      	movs	r1, #4
 8003c62:	430a      	orrs	r2, r1
 8003c64:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c66:	4b34      	ldr	r3, [pc, #208]	@ (8003d38 <HAL_UART_MspInit+0x148>)
 8003c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c6a:	2204      	movs	r2, #4
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
 8003c70:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003c72:	2164      	movs	r1, #100	@ 0x64
 8003c74:	187b      	adds	r3, r7, r1
 8003c76:	2230      	movs	r2, #48	@ 0x30
 8003c78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7a:	187b      	adds	r3, r7, r1
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c80:	187b      	adds	r3, r7, r1
 8003c82:	2200      	movs	r2, #0
 8003c84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c86:	187b      	adds	r3, r7, r1
 8003c88:	2200      	movs	r2, #0
 8003c8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003c8c:	187b      	adds	r3, r7, r1
 8003c8e:	2201      	movs	r2, #1
 8003c90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c92:	187b      	adds	r3, r7, r1
 8003c94:	4a29      	ldr	r2, [pc, #164]	@ (8003d3c <HAL_UART_MspInit+0x14c>)
 8003c96:	0019      	movs	r1, r3
 8003c98:	0010      	movs	r0, r2
 8003c9a:	f000 fa57 	bl	800414c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c9e:	e044      	b.n	8003d2a <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a26      	ldr	r2, [pc, #152]	@ (8003d40 <HAL_UART_MspInit+0x150>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d13f      	bne.n	8003d2a <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003caa:	2118      	movs	r1, #24
 8003cac:	187b      	adds	r3, r7, r1
 8003cae:	2202      	movs	r2, #2
 8003cb0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003cb2:	187b      	adds	r3, r7, r1
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cb8:	187b      	adds	r3, r7, r1
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f001 ff86 	bl	8005bcc <HAL_RCCEx_PeriphCLKConfig>
 8003cc0:	1e03      	subs	r3, r0, #0
 8003cc2:	d001      	beq.n	8003cc8 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8003cc4:	f7ff fe3a 	bl	800393c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d38 <HAL_UART_MspInit+0x148>)
 8003cca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8003d38 <HAL_UART_MspInit+0x148>)
 8003cce:	2180      	movs	r1, #128	@ 0x80
 8003cd0:	0289      	lsls	r1, r1, #10
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003cd6:	4b18      	ldr	r3, [pc, #96]	@ (8003d38 <HAL_UART_MspInit+0x148>)
 8003cd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cda:	2380      	movs	r3, #128	@ 0x80
 8003cdc:	029b      	lsls	r3, r3, #10
 8003cde:	4013      	ands	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ce4:	4b14      	ldr	r3, [pc, #80]	@ (8003d38 <HAL_UART_MspInit+0x148>)
 8003ce6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ce8:	4b13      	ldr	r3, [pc, #76]	@ (8003d38 <HAL_UART_MspInit+0x148>)
 8003cea:	2101      	movs	r1, #1
 8003cec:	430a      	orrs	r2, r1
 8003cee:	635a      	str	r2, [r3, #52]	@ 0x34
 8003cf0:	4b11      	ldr	r3, [pc, #68]	@ (8003d38 <HAL_UART_MspInit+0x148>)
 8003cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003cfc:	2164      	movs	r1, #100	@ 0x64
 8003cfe:	187b      	adds	r3, r7, r1
 8003d00:	220c      	movs	r2, #12
 8003d02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d04:	187b      	adds	r3, r7, r1
 8003d06:	2202      	movs	r2, #2
 8003d08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0a:	187b      	adds	r3, r7, r1
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d10:	187b      	adds	r3, r7, r1
 8003d12:	2200      	movs	r2, #0
 8003d14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003d16:	187b      	adds	r3, r7, r1
 8003d18:	2201      	movs	r2, #1
 8003d1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d1c:	187a      	adds	r2, r7, r1
 8003d1e:	23a0      	movs	r3, #160	@ 0xa0
 8003d20:	05db      	lsls	r3, r3, #23
 8003d22:	0011      	movs	r1, r2
 8003d24:	0018      	movs	r0, r3
 8003d26:	f000 fa11 	bl	800414c <HAL_GPIO_Init>
}
 8003d2a:	46c0      	nop			@ (mov r8, r8)
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b01f      	add	sp, #124	@ 0x7c
 8003d30:	bd90      	pop	{r4, r7, pc}
 8003d32:	46c0      	nop			@ (mov r8, r8)
 8003d34:	40013800 	.word	0x40013800
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	50000800 	.word	0x50000800
 8003d40:	40004400 	.word	0x40004400

08003d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d48:	46c0      	nop			@ (mov r8, r8)
 8003d4a:	e7fd      	b.n	8003d48 <NMI_Handler+0x4>

08003d4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d50:	46c0      	nop			@ (mov r8, r8)
 8003d52:	e7fd      	b.n	8003d50 <HardFault_Handler+0x4>

08003d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003d58:	46c0      	nop			@ (mov r8, r8)
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d62:	46c0      	nop			@ (mov r8, r8)
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d6c:	f000 f8e4 	bl	8003f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d70:	46c0      	nop			@ (mov r8, r8)
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003d7c:	4b05      	ldr	r3, [pc, #20]	@ (8003d94 <RTC_TAMP_IRQHandler+0x1c>)
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f002 fb66 	bl	8006450 <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003d84:	4b03      	ldr	r3, [pc, #12]	@ (8003d94 <RTC_TAMP_IRQHandler+0x1c>)
 8003d86:	0018      	movs	r0, r3
 8003d88:	f002 fbe5 	bl	8006556 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8003d8c:	46c0      	nop			@ (mov r8, r8)
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	46c0      	nop			@ (mov r8, r8)
 8003d94:	20001360 	.word	0x20001360

08003d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003da0:	4a14      	ldr	r2, [pc, #80]	@ (8003df4 <_sbrk+0x5c>)
 8003da2:	4b15      	ldr	r3, [pc, #84]	@ (8003df8 <_sbrk+0x60>)
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003dac:	4b13      	ldr	r3, [pc, #76]	@ (8003dfc <_sbrk+0x64>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d102      	bne.n	8003dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003db4:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <_sbrk+0x64>)
 8003db6:	4a12      	ldr	r2, [pc, #72]	@ (8003e00 <_sbrk+0x68>)
 8003db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dba:	4b10      	ldr	r3, [pc, #64]	@ (8003dfc <_sbrk+0x64>)
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	18d3      	adds	r3, r2, r3
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d207      	bcs.n	8003dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003dc8:	f004 fe98 	bl	8008afc <__errno>
 8003dcc:	0003      	movs	r3, r0
 8003dce:	220c      	movs	r2, #12
 8003dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	425b      	negs	r3, r3
 8003dd6:	e009      	b.n	8003dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003dd8:	4b08      	ldr	r3, [pc, #32]	@ (8003dfc <_sbrk+0x64>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dde:	4b07      	ldr	r3, [pc, #28]	@ (8003dfc <_sbrk+0x64>)
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	18d2      	adds	r2, r2, r3
 8003de6:	4b05      	ldr	r3, [pc, #20]	@ (8003dfc <_sbrk+0x64>)
 8003de8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003dea:	68fb      	ldr	r3, [r7, #12]
}
 8003dec:	0018      	movs	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	b006      	add	sp, #24
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20024000 	.word	0x20024000
 8003df8:	00000400 	.word	0x00000400
 8003dfc:	20001564 	.word	0x20001564
 8003e00:	200016b8 	.word	0x200016b8

08003e04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e08:	46c0      	nop			@ (mov r8, r8)
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e10:	480d      	ldr	r0, [pc, #52]	@ (8003e48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e12:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003e14:	f7ff fff6 	bl	8003e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e18:	480c      	ldr	r0, [pc, #48]	@ (8003e4c <LoopForever+0x6>)
  ldr r1, =_edata
 8003e1a:	490d      	ldr	r1, [pc, #52]	@ (8003e50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8003e54 <LoopForever+0xe>)
  movs r3, #0
 8003e1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e20:	e002      	b.n	8003e28 <LoopCopyDataInit>

08003e22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e26:	3304      	adds	r3, #4

08003e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e2c:	d3f9      	bcc.n	8003e22 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003e30:	4c0a      	ldr	r4, [pc, #40]	@ (8003e5c <LoopForever+0x16>)
  movs r3, #0
 8003e32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e34:	e001      	b.n	8003e3a <LoopFillZerobss>

08003e36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e38:	3204      	adds	r2, #4

08003e3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e3c:	d3fb      	bcc.n	8003e36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003e3e:	f004 fe63 	bl	8008b08 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003e42:	f7fe fe41 	bl	8002ac8 <main>

08003e46 <LoopForever>:

LoopForever:
  b LoopForever
 8003e46:	e7fe      	b.n	8003e46 <LoopForever>
  ldr   r0, =_estack
 8003e48:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003e4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e50:	20000ee0 	.word	0x20000ee0
  ldr r2, =_sidata
 8003e54:	08009ef0 	.word	0x08009ef0
  ldr r2, =_sbss
 8003e58:	20000ee0 	.word	0x20000ee0
  ldr r4, =_ebss
 8003e5c:	200016b4 	.word	0x200016b4

08003e60 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e60:	e7fe      	b.n	8003e60 <ADC1_COMP_IRQHandler>
	...

08003e64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e6a:	1dfb      	adds	r3, r7, #7
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea0 <HAL_Init+0x3c>)
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea0 <HAL_Init+0x3c>)
 8003e76:	2180      	movs	r1, #128	@ 0x80
 8003e78:	0049      	lsls	r1, r1, #1
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e7e:	2003      	movs	r0, #3
 8003e80:	f000 f810 	bl	8003ea4 <HAL_InitTick>
 8003e84:	1e03      	subs	r3, r0, #0
 8003e86:	d003      	beq.n	8003e90 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003e88:	1dfb      	adds	r3, r7, #7
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	701a      	strb	r2, [r3, #0]
 8003e8e:	e001      	b.n	8003e94 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003e90:	f7ff fd5a 	bl	8003948 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e94:	1dfb      	adds	r3, r7, #7
 8003e96:	781b      	ldrb	r3, [r3, #0]
}
 8003e98:	0018      	movs	r0, r3
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b002      	add	sp, #8
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40022000 	.word	0x40022000

08003ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ea4:	b590      	push	{r4, r7, lr}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003eac:	230f      	movs	r3, #15
 8003eae:	18fb      	adds	r3, r7, r3
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f2c <HAL_InitTick+0x88>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d02b      	beq.n	8003f14 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003ebc:	4b1c      	ldr	r3, [pc, #112]	@ (8003f30 <HAL_InitTick+0x8c>)
 8003ebe:	681c      	ldr	r4, [r3, #0]
 8003ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8003f2c <HAL_InitTick+0x88>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	0019      	movs	r1, r3
 8003ec6:	23fa      	movs	r3, #250	@ 0xfa
 8003ec8:	0098      	lsls	r0, r3, #2
 8003eca:	f7fc f92d 	bl	8000128 <__udivsi3>
 8003ece:	0003      	movs	r3, r0
 8003ed0:	0019      	movs	r1, r3
 8003ed2:	0020      	movs	r0, r4
 8003ed4:	f7fc f928 	bl	8000128 <__udivsi3>
 8003ed8:	0003      	movs	r3, r0
 8003eda:	0018      	movs	r0, r3
 8003edc:	f000 f929 	bl	8004132 <HAL_SYSTICK_Config>
 8003ee0:	1e03      	subs	r3, r0, #0
 8003ee2:	d112      	bne.n	8003f0a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d80a      	bhi.n	8003f00 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	2301      	movs	r3, #1
 8003eee:	425b      	negs	r3, r3
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f000 f908 	bl	8004108 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8003f34 <HAL_InitTick+0x90>)
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	e00d      	b.n	8003f1c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003f00:	230f      	movs	r3, #15
 8003f02:	18fb      	adds	r3, r7, r3
 8003f04:	2201      	movs	r2, #1
 8003f06:	701a      	strb	r2, [r3, #0]
 8003f08:	e008      	b.n	8003f1c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f0a:	230f      	movs	r3, #15
 8003f0c:	18fb      	adds	r3, r7, r3
 8003f0e:	2201      	movs	r2, #1
 8003f10:	701a      	strb	r2, [r3, #0]
 8003f12:	e003      	b.n	8003f1c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f14:	230f      	movs	r3, #15
 8003f16:	18fb      	adds	r3, r7, r3
 8003f18:	2201      	movs	r2, #1
 8003f1a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003f1c:	230f      	movs	r3, #15
 8003f1e:	18fb      	adds	r3, r7, r3
 8003f20:	781b      	ldrb	r3, [r3, #0]
}
 8003f22:	0018      	movs	r0, r3
 8003f24:	46bd      	mov	sp, r7
 8003f26:	b005      	add	sp, #20
 8003f28:	bd90      	pop	{r4, r7, pc}
 8003f2a:	46c0      	nop			@ (mov r8, r8)
 8003f2c:	20000e8c 	.word	0x20000e8c
 8003f30:	20000e84 	.word	0x20000e84
 8003f34:	20000e88 	.word	0x20000e88

08003f38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f3c:	4b05      	ldr	r3, [pc, #20]	@ (8003f54 <HAL_IncTick+0x1c>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	001a      	movs	r2, r3
 8003f42:	4b05      	ldr	r3, [pc, #20]	@ (8003f58 <HAL_IncTick+0x20>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	18d2      	adds	r2, r2, r3
 8003f48:	4b03      	ldr	r3, [pc, #12]	@ (8003f58 <HAL_IncTick+0x20>)
 8003f4a:	601a      	str	r2, [r3, #0]
}
 8003f4c:	46c0      	nop			@ (mov r8, r8)
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			@ (mov r8, r8)
 8003f54:	20000e8c 	.word	0x20000e8c
 8003f58:	20001568 	.word	0x20001568

08003f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8003f60:	4b02      	ldr	r3, [pc, #8]	@ (8003f6c <HAL_GetTick+0x10>)
 8003f62:	681b      	ldr	r3, [r3, #0]
}
 8003f64:	0018      	movs	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	46c0      	nop			@ (mov r8, r8)
 8003f6c:	20001568 	.word	0x20001568

08003f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f78:	f7ff fff0 	bl	8003f5c <HAL_GetTick>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	3301      	adds	r3, #1
 8003f88:	d005      	beq.n	8003f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb4 <HAL_Delay+0x44>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	001a      	movs	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	189b      	adds	r3, r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f96:	46c0      	nop			@ (mov r8, r8)
 8003f98:	f7ff ffe0 	bl	8003f5c <HAL_GetTick>
 8003f9c:	0002      	movs	r2, r0
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d8f7      	bhi.n	8003f98 <HAL_Delay+0x28>
  {
  }
}
 8003fa8:	46c0      	nop			@ (mov r8, r8)
 8003faa:	46c0      	nop			@ (mov r8, r8)
 8003fac:	46bd      	mov	sp, r7
 8003fae:	b004      	add	sp, #16
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	46c0      	nop			@ (mov r8, r8)
 8003fb4:	20000e8c 	.word	0x20000e8c

08003fb8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003fc0:	4b06      	ldr	r3, [pc, #24]	@ (8003fdc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a06      	ldr	r2, [pc, #24]	@ (8003fe0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	0019      	movs	r1, r3
 8003fca:	4b04      	ldr	r3, [pc, #16]	@ (8003fdc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	601a      	str	r2, [r3, #0]
}
 8003fd2:	46c0      	nop			@ (mov r8, r8)
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	b002      	add	sp, #8
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	46c0      	nop			@ (mov r8, r8)
 8003fdc:	40010000 	.word	0x40010000
 8003fe0:	fffff9ff 	.word	0xfffff9ff

08003fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fe4:	b590      	push	{r4, r7, lr}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	0002      	movs	r2, r0
 8003fec:	6039      	str	r1, [r7, #0]
 8003fee:	1dfb      	adds	r3, r7, #7
 8003ff0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003ff2:	1dfb      	adds	r3, r7, #7
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ff8:	d828      	bhi.n	800404c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ffa:	4a2f      	ldr	r2, [pc, #188]	@ (80040b8 <__NVIC_SetPriority+0xd4>)
 8003ffc:	1dfb      	adds	r3, r7, #7
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	b25b      	sxtb	r3, r3
 8004002:	089b      	lsrs	r3, r3, #2
 8004004:	33c0      	adds	r3, #192	@ 0xc0
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	589b      	ldr	r3, [r3, r2]
 800400a:	1dfa      	adds	r2, r7, #7
 800400c:	7812      	ldrb	r2, [r2, #0]
 800400e:	0011      	movs	r1, r2
 8004010:	2203      	movs	r2, #3
 8004012:	400a      	ands	r2, r1
 8004014:	00d2      	lsls	r2, r2, #3
 8004016:	21ff      	movs	r1, #255	@ 0xff
 8004018:	4091      	lsls	r1, r2
 800401a:	000a      	movs	r2, r1
 800401c:	43d2      	mvns	r2, r2
 800401e:	401a      	ands	r2, r3
 8004020:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	019b      	lsls	r3, r3, #6
 8004026:	22ff      	movs	r2, #255	@ 0xff
 8004028:	401a      	ands	r2, r3
 800402a:	1dfb      	adds	r3, r7, #7
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	0018      	movs	r0, r3
 8004030:	2303      	movs	r3, #3
 8004032:	4003      	ands	r3, r0
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004038:	481f      	ldr	r0, [pc, #124]	@ (80040b8 <__NVIC_SetPriority+0xd4>)
 800403a:	1dfb      	adds	r3, r7, #7
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	b25b      	sxtb	r3, r3
 8004040:	089b      	lsrs	r3, r3, #2
 8004042:	430a      	orrs	r2, r1
 8004044:	33c0      	adds	r3, #192	@ 0xc0
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800404a:	e031      	b.n	80040b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800404c:	4a1b      	ldr	r2, [pc, #108]	@ (80040bc <__NVIC_SetPriority+0xd8>)
 800404e:	1dfb      	adds	r3, r7, #7
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	0019      	movs	r1, r3
 8004054:	230f      	movs	r3, #15
 8004056:	400b      	ands	r3, r1
 8004058:	3b08      	subs	r3, #8
 800405a:	089b      	lsrs	r3, r3, #2
 800405c:	3306      	adds	r3, #6
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	18d3      	adds	r3, r2, r3
 8004062:	3304      	adds	r3, #4
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	1dfa      	adds	r2, r7, #7
 8004068:	7812      	ldrb	r2, [r2, #0]
 800406a:	0011      	movs	r1, r2
 800406c:	2203      	movs	r2, #3
 800406e:	400a      	ands	r2, r1
 8004070:	00d2      	lsls	r2, r2, #3
 8004072:	21ff      	movs	r1, #255	@ 0xff
 8004074:	4091      	lsls	r1, r2
 8004076:	000a      	movs	r2, r1
 8004078:	43d2      	mvns	r2, r2
 800407a:	401a      	ands	r2, r3
 800407c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	019b      	lsls	r3, r3, #6
 8004082:	22ff      	movs	r2, #255	@ 0xff
 8004084:	401a      	ands	r2, r3
 8004086:	1dfb      	adds	r3, r7, #7
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	0018      	movs	r0, r3
 800408c:	2303      	movs	r3, #3
 800408e:	4003      	ands	r3, r0
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004094:	4809      	ldr	r0, [pc, #36]	@ (80040bc <__NVIC_SetPriority+0xd8>)
 8004096:	1dfb      	adds	r3, r7, #7
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	001c      	movs	r4, r3
 800409c:	230f      	movs	r3, #15
 800409e:	4023      	ands	r3, r4
 80040a0:	3b08      	subs	r3, #8
 80040a2:	089b      	lsrs	r3, r3, #2
 80040a4:	430a      	orrs	r2, r1
 80040a6:	3306      	adds	r3, #6
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	18c3      	adds	r3, r0, r3
 80040ac:	3304      	adds	r3, #4
 80040ae:	601a      	str	r2, [r3, #0]
}
 80040b0:	46c0      	nop			@ (mov r8, r8)
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b003      	add	sp, #12
 80040b6:	bd90      	pop	{r4, r7, pc}
 80040b8:	e000e100 	.word	0xe000e100
 80040bc:	e000ed00 	.word	0xe000ed00

080040c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	1e5a      	subs	r2, r3, #1
 80040cc:	2380      	movs	r3, #128	@ 0x80
 80040ce:	045b      	lsls	r3, r3, #17
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d301      	bcc.n	80040d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040d4:	2301      	movs	r3, #1
 80040d6:	e010      	b.n	80040fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004104 <SysTick_Config+0x44>)
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	3a01      	subs	r2, #1
 80040de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040e0:	2301      	movs	r3, #1
 80040e2:	425b      	negs	r3, r3
 80040e4:	2103      	movs	r1, #3
 80040e6:	0018      	movs	r0, r3
 80040e8:	f7ff ff7c 	bl	8003fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040ec:	4b05      	ldr	r3, [pc, #20]	@ (8004104 <SysTick_Config+0x44>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040f2:	4b04      	ldr	r3, [pc, #16]	@ (8004104 <SysTick_Config+0x44>)
 80040f4:	2207      	movs	r2, #7
 80040f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	0018      	movs	r0, r3
 80040fc:	46bd      	mov	sp, r7
 80040fe:	b002      	add	sp, #8
 8004100:	bd80      	pop	{r7, pc}
 8004102:	46c0      	nop			@ (mov r8, r8)
 8004104:	e000e010 	.word	0xe000e010

08004108 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	607a      	str	r2, [r7, #4]
 8004112:	210f      	movs	r1, #15
 8004114:	187b      	adds	r3, r7, r1
 8004116:	1c02      	adds	r2, r0, #0
 8004118:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	187b      	adds	r3, r7, r1
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	b25b      	sxtb	r3, r3
 8004122:	0011      	movs	r1, r2
 8004124:	0018      	movs	r0, r3
 8004126:	f7ff ff5d 	bl	8003fe4 <__NVIC_SetPriority>
}
 800412a:	46c0      	nop			@ (mov r8, r8)
 800412c:	46bd      	mov	sp, r7
 800412e:	b004      	add	sp, #16
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b082      	sub	sp, #8
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	0018      	movs	r0, r3
 800413e:	f7ff ffbf 	bl	80040c0 <SysTick_Config>
 8004142:	0003      	movs	r3, r0
}
 8004144:	0018      	movs	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	b002      	add	sp, #8
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800415a:	e14d      	b.n	80043f8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2101      	movs	r1, #1
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	4091      	lsls	r1, r2
 8004166:	000a      	movs	r2, r1
 8004168:	4013      	ands	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d100      	bne.n	8004174 <HAL_GPIO_Init+0x28>
 8004172:	e13e      	b.n	80043f2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2203      	movs	r2, #3
 800417a:	4013      	ands	r3, r2
 800417c:	2b01      	cmp	r3, #1
 800417e:	d005      	beq.n	800418c <HAL_GPIO_Init+0x40>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2203      	movs	r2, #3
 8004186:	4013      	ands	r3, r2
 8004188:	2b02      	cmp	r3, #2
 800418a:	d130      	bne.n	80041ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	2203      	movs	r2, #3
 8004198:	409a      	lsls	r2, r3
 800419a:	0013      	movs	r3, r2
 800419c:	43da      	mvns	r2, r3
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4013      	ands	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	409a      	lsls	r2, r3
 80041ae:	0013      	movs	r3, r2
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041c2:	2201      	movs	r2, #1
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	409a      	lsls	r2, r3
 80041c8:	0013      	movs	r3, r2
 80041ca:	43da      	mvns	r2, r3
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	4013      	ands	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	091b      	lsrs	r3, r3, #4
 80041d8:	2201      	movs	r2, #1
 80041da:	401a      	ands	r2, r3
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	409a      	lsls	r2, r3
 80041e0:	0013      	movs	r3, r2
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2203      	movs	r2, #3
 80041f4:	4013      	ands	r3, r2
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	d017      	beq.n	800422a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	2203      	movs	r2, #3
 8004206:	409a      	lsls	r2, r3
 8004208:	0013      	movs	r3, r2
 800420a:	43da      	mvns	r2, r3
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4013      	ands	r3, r2
 8004210:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	409a      	lsls	r2, r3
 800421c:	0013      	movs	r3, r2
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2203      	movs	r2, #3
 8004230:	4013      	ands	r3, r2
 8004232:	2b02      	cmp	r3, #2
 8004234:	d123      	bne.n	800427e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	08da      	lsrs	r2, r3, #3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	3208      	adds	r2, #8
 800423e:	0092      	lsls	r2, r2, #2
 8004240:	58d3      	ldr	r3, [r2, r3]
 8004242:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2207      	movs	r2, #7
 8004248:	4013      	ands	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	220f      	movs	r2, #15
 800424e:	409a      	lsls	r2, r3
 8004250:	0013      	movs	r3, r2
 8004252:	43da      	mvns	r2, r3
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	4013      	ands	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	691a      	ldr	r2, [r3, #16]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2107      	movs	r1, #7
 8004262:	400b      	ands	r3, r1
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	409a      	lsls	r2, r3
 8004268:	0013      	movs	r3, r2
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	4313      	orrs	r3, r2
 800426e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	08da      	lsrs	r2, r3, #3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3208      	adds	r2, #8
 8004278:	0092      	lsls	r2, r2, #2
 800427a:	6939      	ldr	r1, [r7, #16]
 800427c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	2203      	movs	r2, #3
 800428a:	409a      	lsls	r2, r3
 800428c:	0013      	movs	r3, r2
 800428e:	43da      	mvns	r2, r3
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	4013      	ands	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2203      	movs	r2, #3
 800429c:	401a      	ands	r2, r3
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	409a      	lsls	r2, r3
 80042a4:	0013      	movs	r3, r2
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	23c0      	movs	r3, #192	@ 0xc0
 80042b8:	029b      	lsls	r3, r3, #10
 80042ba:	4013      	ands	r3, r2
 80042bc:	d100      	bne.n	80042c0 <HAL_GPIO_Init+0x174>
 80042be:	e098      	b.n	80043f2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80042c0:	4a53      	ldr	r2, [pc, #332]	@ (8004410 <HAL_GPIO_Init+0x2c4>)
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	089b      	lsrs	r3, r3, #2
 80042c6:	3318      	adds	r3, #24
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	589b      	ldr	r3, [r3, r2]
 80042cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2203      	movs	r2, #3
 80042d2:	4013      	ands	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	220f      	movs	r2, #15
 80042d8:	409a      	lsls	r2, r3
 80042da:	0013      	movs	r3, r2
 80042dc:	43da      	mvns	r2, r3
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	4013      	ands	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	23a0      	movs	r3, #160	@ 0xa0
 80042e8:	05db      	lsls	r3, r3, #23
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d019      	beq.n	8004322 <HAL_GPIO_Init+0x1d6>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a48      	ldr	r2, [pc, #288]	@ (8004414 <HAL_GPIO_Init+0x2c8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d013      	beq.n	800431e <HAL_GPIO_Init+0x1d2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a47      	ldr	r2, [pc, #284]	@ (8004418 <HAL_GPIO_Init+0x2cc>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00d      	beq.n	800431a <HAL_GPIO_Init+0x1ce>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a46      	ldr	r2, [pc, #280]	@ (800441c <HAL_GPIO_Init+0x2d0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d007      	beq.n	8004316 <HAL_GPIO_Init+0x1ca>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a45      	ldr	r2, [pc, #276]	@ (8004420 <HAL_GPIO_Init+0x2d4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d101      	bne.n	8004312 <HAL_GPIO_Init+0x1c6>
 800430e:	2304      	movs	r3, #4
 8004310:	e008      	b.n	8004324 <HAL_GPIO_Init+0x1d8>
 8004312:	2305      	movs	r3, #5
 8004314:	e006      	b.n	8004324 <HAL_GPIO_Init+0x1d8>
 8004316:	2303      	movs	r3, #3
 8004318:	e004      	b.n	8004324 <HAL_GPIO_Init+0x1d8>
 800431a:	2302      	movs	r3, #2
 800431c:	e002      	b.n	8004324 <HAL_GPIO_Init+0x1d8>
 800431e:	2301      	movs	r3, #1
 8004320:	e000      	b.n	8004324 <HAL_GPIO_Init+0x1d8>
 8004322:	2300      	movs	r3, #0
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	2103      	movs	r1, #3
 8004328:	400a      	ands	r2, r1
 800432a:	00d2      	lsls	r2, r2, #3
 800432c:	4093      	lsls	r3, r2
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	4313      	orrs	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004334:	4936      	ldr	r1, [pc, #216]	@ (8004410 <HAL_GPIO_Init+0x2c4>)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	089b      	lsrs	r3, r3, #2
 800433a:	3318      	adds	r3, #24
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004342:	4b33      	ldr	r3, [pc, #204]	@ (8004410 <HAL_GPIO_Init+0x2c4>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	43da      	mvns	r2, r3
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	4013      	ands	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	2380      	movs	r3, #128	@ 0x80
 8004358:	035b      	lsls	r3, r3, #13
 800435a:	4013      	ands	r3, r2
 800435c:	d003      	beq.n	8004366 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004366:	4b2a      	ldr	r3, [pc, #168]	@ (8004410 <HAL_GPIO_Init+0x2c4>)
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800436c:	4b28      	ldr	r3, [pc, #160]	@ (8004410 <HAL_GPIO_Init+0x2c4>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	43da      	mvns	r2, r3
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	4013      	ands	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	2380      	movs	r3, #128	@ 0x80
 8004382:	039b      	lsls	r3, r3, #14
 8004384:	4013      	ands	r3, r2
 8004386:	d003      	beq.n	8004390 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004390:	4b1f      	ldr	r3, [pc, #124]	@ (8004410 <HAL_GPIO_Init+0x2c4>)
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004396:	4a1e      	ldr	r2, [pc, #120]	@ (8004410 <HAL_GPIO_Init+0x2c4>)
 8004398:	2384      	movs	r3, #132	@ 0x84
 800439a:	58d3      	ldr	r3, [r2, r3]
 800439c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	43da      	mvns	r2, r3
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	4013      	ands	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	2380      	movs	r3, #128	@ 0x80
 80043ae:	029b      	lsls	r3, r3, #10
 80043b0:	4013      	ands	r3, r2
 80043b2:	d003      	beq.n	80043bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043bc:	4914      	ldr	r1, [pc, #80]	@ (8004410 <HAL_GPIO_Init+0x2c4>)
 80043be:	2284      	movs	r2, #132	@ 0x84
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80043c4:	4a12      	ldr	r2, [pc, #72]	@ (8004410 <HAL_GPIO_Init+0x2c4>)
 80043c6:	2380      	movs	r3, #128	@ 0x80
 80043c8:	58d3      	ldr	r3, [r2, r3]
 80043ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	43da      	mvns	r2, r3
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	4013      	ands	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	2380      	movs	r3, #128	@ 0x80
 80043dc:	025b      	lsls	r3, r3, #9
 80043de:	4013      	ands	r3, r2
 80043e0:	d003      	beq.n	80043ea <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043ea:	4909      	ldr	r1, [pc, #36]	@ (8004410 <HAL_GPIO_Init+0x2c4>)
 80043ec:	2280      	movs	r2, #128	@ 0x80
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	3301      	adds	r3, #1
 80043f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	40da      	lsrs	r2, r3
 8004400:	1e13      	subs	r3, r2, #0
 8004402:	d000      	beq.n	8004406 <HAL_GPIO_Init+0x2ba>
 8004404:	e6aa      	b.n	800415c <HAL_GPIO_Init+0x10>
  }
}
 8004406:	46c0      	nop			@ (mov r8, r8)
 8004408:	46c0      	nop			@ (mov r8, r8)
 800440a:	46bd      	mov	sp, r7
 800440c:	b006      	add	sp, #24
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40021800 	.word	0x40021800
 8004414:	50000400 	.word	0x50000400
 8004418:	50000800 	.word	0x50000800
 800441c:	50000c00 	.word	0x50000c00
 8004420:	50001000 	.word	0x50001000

08004424 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	000a      	movs	r2, r1
 800442e:	1cbb      	adds	r3, r7, #2
 8004430:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	1cba      	adds	r2, r7, #2
 8004438:	8812      	ldrh	r2, [r2, #0]
 800443a:	4013      	ands	r3, r2
 800443c:	d004      	beq.n	8004448 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800443e:	230f      	movs	r3, #15
 8004440:	18fb      	adds	r3, r7, r3
 8004442:	2201      	movs	r2, #1
 8004444:	701a      	strb	r2, [r3, #0]
 8004446:	e003      	b.n	8004450 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004448:	230f      	movs	r3, #15
 800444a:	18fb      	adds	r3, r7, r3
 800444c:	2200      	movs	r2, #0
 800444e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004450:	230f      	movs	r3, #15
 8004452:	18fb      	adds	r3, r7, r3
 8004454:	781b      	ldrb	r3, [r3, #0]
}
 8004456:	0018      	movs	r0, r3
 8004458:	46bd      	mov	sp, r7
 800445a:	b004      	add	sp, #16
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b082      	sub	sp, #8
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	0008      	movs	r0, r1
 8004468:	0011      	movs	r1, r2
 800446a:	1cbb      	adds	r3, r7, #2
 800446c:	1c02      	adds	r2, r0, #0
 800446e:	801a      	strh	r2, [r3, #0]
 8004470:	1c7b      	adds	r3, r7, #1
 8004472:	1c0a      	adds	r2, r1, #0
 8004474:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004476:	1c7b      	adds	r3, r7, #1
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d004      	beq.n	8004488 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800447e:	1cbb      	adds	r3, r7, #2
 8004480:	881a      	ldrh	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004486:	e003      	b.n	8004490 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004488:	1cbb      	adds	r3, r7, #2
 800448a:	881a      	ldrh	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004490:	46c0      	nop			@ (mov r8, r8)
 8004492:	46bd      	mov	sp, r7
 8004494:	b002      	add	sp, #8
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e08f      	b.n	80045ca <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2241      	movs	r2, #65	@ 0x41
 80044ae:	5c9b      	ldrb	r3, [r3, r2]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d107      	bne.n	80044c6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2240      	movs	r2, #64	@ 0x40
 80044ba:	2100      	movs	r1, #0
 80044bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	0018      	movs	r0, r3
 80044c2:	f7ff fa69 	bl	8003998 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2241      	movs	r2, #65	@ 0x41
 80044ca:	2124      	movs	r1, #36	@ 0x24
 80044cc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2101      	movs	r1, #1
 80044da:	438a      	bics	r2, r1
 80044dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	493b      	ldr	r1, [pc, #236]	@ (80045d4 <HAL_I2C_Init+0x13c>)
 80044e8:	400a      	ands	r2, r1
 80044ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689a      	ldr	r2, [r3, #8]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4938      	ldr	r1, [pc, #224]	@ (80045d8 <HAL_I2C_Init+0x140>)
 80044f8:	400a      	ands	r2, r1
 80044fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d108      	bne.n	8004516 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2180      	movs	r1, #128	@ 0x80
 800450e:	0209      	lsls	r1, r1, #8
 8004510:	430a      	orrs	r2, r1
 8004512:	609a      	str	r2, [r3, #8]
 8004514:	e007      	b.n	8004526 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2184      	movs	r1, #132	@ 0x84
 8004520:	0209      	lsls	r1, r1, #8
 8004522:	430a      	orrs	r2, r1
 8004524:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	2b02      	cmp	r3, #2
 800452c:	d109      	bne.n	8004542 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2180      	movs	r1, #128	@ 0x80
 800453a:	0109      	lsls	r1, r1, #4
 800453c:	430a      	orrs	r2, r1
 800453e:	605a      	str	r2, [r3, #4]
 8004540:	e007      	b.n	8004552 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4923      	ldr	r1, [pc, #140]	@ (80045dc <HAL_I2C_Init+0x144>)
 800454e:	400a      	ands	r2, r1
 8004550:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4920      	ldr	r1, [pc, #128]	@ (80045e0 <HAL_I2C_Init+0x148>)
 800455e:	430a      	orrs	r2, r1
 8004560:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	491a      	ldr	r1, [pc, #104]	@ (80045d8 <HAL_I2C_Init+0x140>)
 800456e:	400a      	ands	r2, r1
 8004570:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	431a      	orrs	r2, r3
 800457c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	69d9      	ldr	r1, [r3, #28]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a1a      	ldr	r2, [r3, #32]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2101      	movs	r1, #1
 80045a8:	430a      	orrs	r2, r1
 80045aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2241      	movs	r2, #65	@ 0x41
 80045b6:	2120      	movs	r1, #32
 80045b8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2242      	movs	r2, #66	@ 0x42
 80045c4:	2100      	movs	r1, #0
 80045c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	0018      	movs	r0, r3
 80045cc:	46bd      	mov	sp, r7
 80045ce:	b002      	add	sp, #8
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	46c0      	nop			@ (mov r8, r8)
 80045d4:	f0ffffff 	.word	0xf0ffffff
 80045d8:	ffff7fff 	.word	0xffff7fff
 80045dc:	fffff7ff 	.word	0xfffff7ff
 80045e0:	02008000 	.word	0x02008000

080045e4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80045e4:	b590      	push	{r4, r7, lr}
 80045e6:	b089      	sub	sp, #36	@ 0x24
 80045e8:	af02      	add	r7, sp, #8
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	0008      	movs	r0, r1
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	0019      	movs	r1, r3
 80045f2:	230a      	movs	r3, #10
 80045f4:	18fb      	adds	r3, r7, r3
 80045f6:	1c02      	adds	r2, r0, #0
 80045f8:	801a      	strh	r2, [r3, #0]
 80045fa:	2308      	movs	r3, #8
 80045fc:	18fb      	adds	r3, r7, r3
 80045fe:	1c0a      	adds	r2, r1, #0
 8004600:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2241      	movs	r2, #65	@ 0x41
 8004606:	5c9b      	ldrb	r3, [r3, r2]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b20      	cmp	r3, #32
 800460c:	d000      	beq.n	8004610 <HAL_I2C_Master_Transmit+0x2c>
 800460e:	e10a      	b.n	8004826 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2240      	movs	r2, #64	@ 0x40
 8004614:	5c9b      	ldrb	r3, [r3, r2]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_I2C_Master_Transmit+0x3a>
 800461a:	2302      	movs	r3, #2
 800461c:	e104      	b.n	8004828 <HAL_I2C_Master_Transmit+0x244>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2240      	movs	r2, #64	@ 0x40
 8004622:	2101      	movs	r1, #1
 8004624:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004626:	f7ff fc99 	bl	8003f5c <HAL_GetTick>
 800462a:	0003      	movs	r3, r0
 800462c:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800462e:	2380      	movs	r3, #128	@ 0x80
 8004630:	0219      	lsls	r1, r3, #8
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	2319      	movs	r3, #25
 800463a:	2201      	movs	r2, #1
 800463c:	f000 fa26 	bl	8004a8c <I2C_WaitOnFlagUntilTimeout>
 8004640:	1e03      	subs	r3, r0, #0
 8004642:	d001      	beq.n	8004648 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e0ef      	b.n	8004828 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2241      	movs	r2, #65	@ 0x41
 800464c:	2121      	movs	r1, #33	@ 0x21
 800464e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2242      	movs	r2, #66	@ 0x42
 8004654:	2110      	movs	r1, #16
 8004656:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2208      	movs	r2, #8
 8004668:	18ba      	adds	r2, r7, r2
 800466a:	8812      	ldrh	r2, [r2, #0]
 800466c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004678:	b29b      	uxth	r3, r3
 800467a:	2bff      	cmp	r3, #255	@ 0xff
 800467c:	d906      	bls.n	800468c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	22ff      	movs	r2, #255	@ 0xff
 8004682:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004684:	2380      	movs	r3, #128	@ 0x80
 8004686:	045b      	lsls	r3, r3, #17
 8004688:	617b      	str	r3, [r7, #20]
 800468a:	e007      	b.n	800469c <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004696:	2380      	movs	r3, #128	@ 0x80
 8004698:	049b      	lsls	r3, r3, #18
 800469a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d027      	beq.n	80046f4 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a8:	781a      	ldrb	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046be:	b29b      	uxth	r3, r3
 80046c0:	3b01      	subs	r3, #1
 80046c2:	b29a      	uxth	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	3301      	adds	r3, #1
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	697c      	ldr	r4, [r7, #20]
 80046e0:	230a      	movs	r3, #10
 80046e2:	18fb      	adds	r3, r7, r3
 80046e4:	8819      	ldrh	r1, [r3, #0]
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	4b51      	ldr	r3, [pc, #324]	@ (8004830 <HAL_I2C_Master_Transmit+0x24c>)
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	0023      	movs	r3, r4
 80046ee:	f000 fc45 	bl	8004f7c <I2C_TransferConfig>
 80046f2:	e06f      	b.n	80047d4 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	697c      	ldr	r4, [r7, #20]
 80046fc:	230a      	movs	r3, #10
 80046fe:	18fb      	adds	r3, r7, r3
 8004700:	8819      	ldrh	r1, [r3, #0]
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	4b4a      	ldr	r3, [pc, #296]	@ (8004830 <HAL_I2C_Master_Transmit+0x24c>)
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	0023      	movs	r3, r4
 800470a:	f000 fc37 	bl	8004f7c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800470e:	e061      	b.n	80047d4 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	0018      	movs	r0, r3
 8004718:	f000 fa10 	bl	8004b3c <I2C_WaitOnTXISFlagUntilTimeout>
 800471c:	1e03      	subs	r3, r0, #0
 800471e:	d001      	beq.n	8004724 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e081      	b.n	8004828 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004728:	781a      	ldrb	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800473e:	b29b      	uxth	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d03a      	beq.n	80047d4 <HAL_I2C_Master_Transmit+0x1f0>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004762:	2b00      	cmp	r3, #0
 8004764:	d136      	bne.n	80047d4 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004766:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	0013      	movs	r3, r2
 8004770:	2200      	movs	r2, #0
 8004772:	2180      	movs	r1, #128	@ 0x80
 8004774:	f000 f98a 	bl	8004a8c <I2C_WaitOnFlagUntilTimeout>
 8004778:	1e03      	subs	r3, r0, #0
 800477a:	d001      	beq.n	8004780 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e053      	b.n	8004828 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004784:	b29b      	uxth	r3, r3
 8004786:	2bff      	cmp	r3, #255	@ 0xff
 8004788:	d911      	bls.n	80047ae <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	22ff      	movs	r2, #255	@ 0xff
 800478e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004794:	b2da      	uxtb	r2, r3
 8004796:	2380      	movs	r3, #128	@ 0x80
 8004798:	045c      	lsls	r4, r3, #17
 800479a:	230a      	movs	r3, #10
 800479c:	18fb      	adds	r3, r7, r3
 800479e:	8819      	ldrh	r1, [r3, #0]
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	2300      	movs	r3, #0
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	0023      	movs	r3, r4
 80047a8:	f000 fbe8 	bl	8004f7c <I2C_TransferConfig>
 80047ac:	e012      	b.n	80047d4 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	2380      	movs	r3, #128	@ 0x80
 80047c0:	049c      	lsls	r4, r3, #18
 80047c2:	230a      	movs	r3, #10
 80047c4:	18fb      	adds	r3, r7, r3
 80047c6:	8819      	ldrh	r1, [r3, #0]
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	2300      	movs	r3, #0
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	0023      	movs	r3, r4
 80047d0:	f000 fbd4 	bl	8004f7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d198      	bne.n	8004710 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	0018      	movs	r0, r3
 80047e6:	f000 f9ef 	bl	8004bc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80047ea:	1e03      	subs	r3, r0, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e01a      	b.n	8004828 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2220      	movs	r2, #32
 80047f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	490b      	ldr	r1, [pc, #44]	@ (8004834 <HAL_I2C_Master_Transmit+0x250>)
 8004806:	400a      	ands	r2, r1
 8004808:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2241      	movs	r2, #65	@ 0x41
 800480e:	2120      	movs	r1, #32
 8004810:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2242      	movs	r2, #66	@ 0x42
 8004816:	2100      	movs	r1, #0
 8004818:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2240      	movs	r2, #64	@ 0x40
 800481e:	2100      	movs	r1, #0
 8004820:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	e000      	b.n	8004828 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8004826:	2302      	movs	r3, #2
  }
}
 8004828:	0018      	movs	r0, r3
 800482a:	46bd      	mov	sp, r7
 800482c:	b007      	add	sp, #28
 800482e:	bd90      	pop	{r4, r7, pc}
 8004830:	80002000 	.word	0x80002000
 8004834:	fe00e800 	.word	0xfe00e800

08004838 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004838:	b590      	push	{r4, r7, lr}
 800483a:	b089      	sub	sp, #36	@ 0x24
 800483c:	af02      	add	r7, sp, #8
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	0008      	movs	r0, r1
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	0019      	movs	r1, r3
 8004846:	230a      	movs	r3, #10
 8004848:	18fb      	adds	r3, r7, r3
 800484a:	1c02      	adds	r2, r0, #0
 800484c:	801a      	strh	r2, [r3, #0]
 800484e:	2308      	movs	r3, #8
 8004850:	18fb      	adds	r3, r7, r3
 8004852:	1c0a      	adds	r2, r1, #0
 8004854:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2241      	movs	r2, #65	@ 0x41
 800485a:	5c9b      	ldrb	r3, [r3, r2]
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b20      	cmp	r3, #32
 8004860:	d000      	beq.n	8004864 <HAL_I2C_Master_Receive+0x2c>
 8004862:	e0e8      	b.n	8004a36 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2240      	movs	r2, #64	@ 0x40
 8004868:	5c9b      	ldrb	r3, [r3, r2]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d101      	bne.n	8004872 <HAL_I2C_Master_Receive+0x3a>
 800486e:	2302      	movs	r3, #2
 8004870:	e0e2      	b.n	8004a38 <HAL_I2C_Master_Receive+0x200>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2240      	movs	r2, #64	@ 0x40
 8004876:	2101      	movs	r1, #1
 8004878:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800487a:	f7ff fb6f 	bl	8003f5c <HAL_GetTick>
 800487e:	0003      	movs	r3, r0
 8004880:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004882:	2380      	movs	r3, #128	@ 0x80
 8004884:	0219      	lsls	r1, r3, #8
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	2319      	movs	r3, #25
 800488e:	2201      	movs	r2, #1
 8004890:	f000 f8fc 	bl	8004a8c <I2C_WaitOnFlagUntilTimeout>
 8004894:	1e03      	subs	r3, r0, #0
 8004896:	d001      	beq.n	800489c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e0cd      	b.n	8004a38 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2241      	movs	r2, #65	@ 0x41
 80048a0:	2122      	movs	r1, #34	@ 0x22
 80048a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2242      	movs	r2, #66	@ 0x42
 80048a8:	2110      	movs	r1, #16
 80048aa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2208      	movs	r2, #8
 80048bc:	18ba      	adds	r2, r7, r2
 80048be:	8812      	ldrh	r2, [r2, #0]
 80048c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2bff      	cmp	r3, #255	@ 0xff
 80048d0:	d911      	bls.n	80048f6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	22ff      	movs	r2, #255	@ 0xff
 80048d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	2380      	movs	r3, #128	@ 0x80
 80048e0:	045c      	lsls	r4, r3, #17
 80048e2:	230a      	movs	r3, #10
 80048e4:	18fb      	adds	r3, r7, r3
 80048e6:	8819      	ldrh	r1, [r3, #0]
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	4b55      	ldr	r3, [pc, #340]	@ (8004a40 <HAL_I2C_Master_Receive+0x208>)
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	0023      	movs	r3, r4
 80048f0:	f000 fb44 	bl	8004f7c <I2C_TransferConfig>
 80048f4:	e076      	b.n	80049e4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004904:	b2da      	uxtb	r2, r3
 8004906:	2380      	movs	r3, #128	@ 0x80
 8004908:	049c      	lsls	r4, r3, #18
 800490a:	230a      	movs	r3, #10
 800490c:	18fb      	adds	r3, r7, r3
 800490e:	8819      	ldrh	r1, [r3, #0]
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	4b4b      	ldr	r3, [pc, #300]	@ (8004a40 <HAL_I2C_Master_Receive+0x208>)
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	0023      	movs	r3, r4
 8004918:	f000 fb30 	bl	8004f7c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800491c:	e062      	b.n	80049e4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	0018      	movs	r0, r3
 8004926:	f000 f993 	bl	8004c50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800492a:	1e03      	subs	r3, r0, #0
 800492c:	d001      	beq.n	8004932 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e082      	b.n	8004a38 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493c:	b2d2      	uxtb	r2, r2
 800493e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800494e:	3b01      	subs	r3, #1
 8004950:	b29a      	uxth	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800495a:	b29b      	uxth	r3, r3
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004968:	b29b      	uxth	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d03a      	beq.n	80049e4 <HAL_I2C_Master_Receive+0x1ac>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004972:	2b00      	cmp	r3, #0
 8004974:	d136      	bne.n	80049e4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004976:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	0013      	movs	r3, r2
 8004980:	2200      	movs	r2, #0
 8004982:	2180      	movs	r1, #128	@ 0x80
 8004984:	f000 f882 	bl	8004a8c <I2C_WaitOnFlagUntilTimeout>
 8004988:	1e03      	subs	r3, r0, #0
 800498a:	d001      	beq.n	8004990 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e053      	b.n	8004a38 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004994:	b29b      	uxth	r3, r3
 8004996:	2bff      	cmp	r3, #255	@ 0xff
 8004998:	d911      	bls.n	80049be <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	22ff      	movs	r2, #255	@ 0xff
 800499e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	2380      	movs	r3, #128	@ 0x80
 80049a8:	045c      	lsls	r4, r3, #17
 80049aa:	230a      	movs	r3, #10
 80049ac:	18fb      	adds	r3, r7, r3
 80049ae:	8819      	ldrh	r1, [r3, #0]
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	2300      	movs	r3, #0
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	0023      	movs	r3, r4
 80049b8:	f000 fae0 	bl	8004f7c <I2C_TransferConfig>
 80049bc:	e012      	b.n	80049e4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	2380      	movs	r3, #128	@ 0x80
 80049d0:	049c      	lsls	r4, r3, #18
 80049d2:	230a      	movs	r3, #10
 80049d4:	18fb      	adds	r3, r7, r3
 80049d6:	8819      	ldrh	r1, [r3, #0]
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	2300      	movs	r3, #0
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	0023      	movs	r3, r4
 80049e0:	f000 facc 	bl	8004f7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d197      	bne.n	800491e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	0018      	movs	r0, r3
 80049f6:	f000 f8e7 	bl	8004bc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049fa:	1e03      	subs	r3, r0, #0
 80049fc:	d001      	beq.n	8004a02 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e01a      	b.n	8004a38 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2220      	movs	r2, #32
 8004a08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	490b      	ldr	r1, [pc, #44]	@ (8004a44 <HAL_I2C_Master_Receive+0x20c>)
 8004a16:	400a      	ands	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2241      	movs	r2, #65	@ 0x41
 8004a1e:	2120      	movs	r1, #32
 8004a20:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2242      	movs	r2, #66	@ 0x42
 8004a26:	2100      	movs	r1, #0
 8004a28:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2240      	movs	r2, #64	@ 0x40
 8004a2e:	2100      	movs	r1, #0
 8004a30:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a32:	2300      	movs	r3, #0
 8004a34:	e000      	b.n	8004a38 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004a36:	2302      	movs	r3, #2
  }
}
 8004a38:	0018      	movs	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	b007      	add	sp, #28
 8004a3e:	bd90      	pop	{r4, r7, pc}
 8004a40:	80002400 	.word	0x80002400
 8004a44:	fe00e800 	.word	0xfe00e800

08004a48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	2202      	movs	r2, #2
 8004a58:	4013      	ands	r3, r2
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d103      	bne.n	8004a66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2200      	movs	r2, #0
 8004a64:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	4013      	ands	r3, r2
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d007      	beq.n	8004a84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699a      	ldr	r2, [r3, #24]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2101      	movs	r1, #1
 8004a80:	430a      	orrs	r2, r1
 8004a82:	619a      	str	r2, [r3, #24]
  }
}
 8004a84:	46c0      	nop			@ (mov r8, r8)
 8004a86:	46bd      	mov	sp, r7
 8004a88:	b002      	add	sp, #8
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	603b      	str	r3, [r7, #0]
 8004a98:	1dfb      	adds	r3, r7, #7
 8004a9a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a9c:	e03a      	b.n	8004b14 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a9e:	69ba      	ldr	r2, [r7, #24]
 8004aa0:	6839      	ldr	r1, [r7, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f000 f971 	bl	8004d8c <I2C_IsErrorOccurred>
 8004aaa:	1e03      	subs	r3, r0, #0
 8004aac:	d001      	beq.n	8004ab2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e040      	b.n	8004b34 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	d02d      	beq.n	8004b14 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab8:	f7ff fa50 	bl	8003f5c <HAL_GetTick>
 8004abc:	0002      	movs	r2, r0
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d302      	bcc.n	8004ace <I2C_WaitOnFlagUntilTimeout+0x42>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d122      	bne.n	8004b14 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	425a      	negs	r2, r3
 8004ade:	4153      	adcs	r3, r2
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	001a      	movs	r2, r3
 8004ae4:	1dfb      	adds	r3, r7, #7
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d113      	bne.n	8004b14 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af0:	2220      	movs	r2, #32
 8004af2:	431a      	orrs	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2241      	movs	r2, #65	@ 0x41
 8004afc:	2120      	movs	r1, #32
 8004afe:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2242      	movs	r2, #66	@ 0x42
 8004b04:	2100      	movs	r1, #0
 8004b06:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2240      	movs	r2, #64	@ 0x40
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e00f      	b.n	8004b34 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	425a      	negs	r2, r3
 8004b24:	4153      	adcs	r3, r2
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	001a      	movs	r2, r3
 8004b2a:	1dfb      	adds	r3, r7, #7
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d0b5      	beq.n	8004a9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	0018      	movs	r0, r3
 8004b36:	46bd      	mov	sp, r7
 8004b38:	b004      	add	sp, #16
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b48:	e032      	b.n	8004bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	0018      	movs	r0, r3
 8004b52:	f000 f91b 	bl	8004d8c <I2C_IsErrorOccurred>
 8004b56:	1e03      	subs	r3, r0, #0
 8004b58:	d001      	beq.n	8004b5e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e030      	b.n	8004bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	3301      	adds	r3, #1
 8004b62:	d025      	beq.n	8004bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b64:	f7ff f9fa 	bl	8003f5c <HAL_GetTick>
 8004b68:	0002      	movs	r2, r0
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d302      	bcc.n	8004b7a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d11a      	bne.n	8004bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	2202      	movs	r2, #2
 8004b82:	4013      	ands	r3, r2
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d013      	beq.n	8004bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2241      	movs	r2, #65	@ 0x41
 8004b98:	2120      	movs	r1, #32
 8004b9a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2242      	movs	r2, #66	@ 0x42
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2240      	movs	r2, #64	@ 0x40
 8004ba8:	2100      	movs	r1, #0
 8004baa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e007      	b.n	8004bc0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	4013      	ands	r3, r2
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d1c5      	bne.n	8004b4a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	b004      	add	sp, #16
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bd4:	e02f      	b.n	8004c36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f000 f8d5 	bl	8004d8c <I2C_IsErrorOccurred>
 8004be2:	1e03      	subs	r3, r0, #0
 8004be4:	d001      	beq.n	8004bea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e02d      	b.n	8004c46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bea:	f7ff f9b7 	bl	8003f5c <HAL_GetTick>
 8004bee:	0002      	movs	r2, r0
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d302      	bcc.n	8004c00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d11a      	bne.n	8004c36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	2220      	movs	r2, #32
 8004c08:	4013      	ands	r3, r2
 8004c0a:	2b20      	cmp	r3, #32
 8004c0c:	d013      	beq.n	8004c36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c12:	2220      	movs	r2, #32
 8004c14:	431a      	orrs	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2241      	movs	r2, #65	@ 0x41
 8004c1e:	2120      	movs	r1, #32
 8004c20:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2242      	movs	r2, #66	@ 0x42
 8004c26:	2100      	movs	r1, #0
 8004c28:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2240      	movs	r2, #64	@ 0x40
 8004c2e:	2100      	movs	r1, #0
 8004c30:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e007      	b.n	8004c46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	4013      	ands	r3, r2
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d1c8      	bne.n	8004bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	0018      	movs	r0, r3
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	b004      	add	sp, #16
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c5c:	2317      	movs	r3, #23
 8004c5e:	18fb      	adds	r3, r7, r3
 8004c60:	2200      	movs	r2, #0
 8004c62:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004c64:	e07b      	b.n	8004d5e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	f000 f88d 	bl	8004d8c <I2C_IsErrorOccurred>
 8004c72:	1e03      	subs	r3, r0, #0
 8004c74:	d003      	beq.n	8004c7e <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8004c76:	2317      	movs	r3, #23
 8004c78:	18fb      	adds	r3, r7, r3
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	2220      	movs	r2, #32
 8004c86:	4013      	ands	r3, r2
 8004c88:	2b20      	cmp	r3, #32
 8004c8a:	d140      	bne.n	8004d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8004c8c:	2117      	movs	r1, #23
 8004c8e:	187b      	adds	r3, r7, r1
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d13b      	bne.n	8004d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	2204      	movs	r2, #4
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d106      	bne.n	8004cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004cac:	187b      	adds	r3, r7, r1
 8004cae:	2200      	movs	r2, #0
 8004cb0:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	2210      	movs	r2, #16
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b10      	cmp	r3, #16
 8004cbe:	d123      	bne.n	8004d08 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2210      	movs	r2, #16
 8004cc6:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2204      	movs	r2, #4
 8004ccc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4929      	ldr	r1, [pc, #164]	@ (8004d88 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8004ce2:	400a      	ands	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2241      	movs	r2, #65	@ 0x41
 8004cea:	2120      	movs	r1, #32
 8004cec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2242      	movs	r2, #66	@ 0x42
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2240      	movs	r2, #64	@ 0x40
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004cfe:	2317      	movs	r3, #23
 8004d00:	18fb      	adds	r3, r7, r3
 8004d02:	2201      	movs	r2, #1
 8004d04:	701a      	strb	r2, [r3, #0]
 8004d06:	e002      	b.n	8004d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004d0e:	f7ff f925 	bl	8003f5c <HAL_GetTick>
 8004d12:	0002      	movs	r2, r0
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d302      	bcc.n	8004d24 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d11c      	bne.n	8004d5e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8004d24:	2017      	movs	r0, #23
 8004d26:	183b      	adds	r3, r7, r0
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d117      	bne.n	8004d5e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	2204      	movs	r2, #4
 8004d36:	4013      	ands	r3, r2
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	d010      	beq.n	8004d5e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d40:	2220      	movs	r2, #32
 8004d42:	431a      	orrs	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2241      	movs	r2, #65	@ 0x41
 8004d4c:	2120      	movs	r1, #32
 8004d4e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2240      	movs	r2, #64	@ 0x40
 8004d54:	2100      	movs	r1, #0
 8004d56:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004d58:	183b      	adds	r3, r7, r0
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	2204      	movs	r2, #4
 8004d66:	4013      	ands	r3, r2
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d005      	beq.n	8004d78 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004d6c:	2317      	movs	r3, #23
 8004d6e:	18fb      	adds	r3, r7, r3
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d100      	bne.n	8004d78 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004d76:	e776      	b.n	8004c66 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8004d78:	2317      	movs	r3, #23
 8004d7a:	18fb      	adds	r3, r7, r3
 8004d7c:	781b      	ldrb	r3, [r3, #0]
}
 8004d7e:	0018      	movs	r0, r3
 8004d80:	46bd      	mov	sp, r7
 8004d82:	b006      	add	sp, #24
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	46c0      	nop			@ (mov r8, r8)
 8004d88:	fe00e800 	.word	0xfe00e800

08004d8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08a      	sub	sp, #40	@ 0x28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d98:	2327      	movs	r3, #39	@ 0x27
 8004d9a:	18fb      	adds	r3, r7, r3
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	2210      	movs	r2, #16
 8004db4:	4013      	ands	r3, r2
 8004db6:	d100      	bne.n	8004dba <I2C_IsErrorOccurred+0x2e>
 8004db8:	e079      	b.n	8004eae <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2210      	movs	r2, #16
 8004dc0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004dc2:	e057      	b.n	8004e74 <I2C_IsErrorOccurred+0xe8>
 8004dc4:	2227      	movs	r2, #39	@ 0x27
 8004dc6:	18bb      	adds	r3, r7, r2
 8004dc8:	18ba      	adds	r2, r7, r2
 8004dca:	7812      	ldrb	r2, [r2, #0]
 8004dcc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	d04f      	beq.n	8004e74 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004dd4:	f7ff f8c2 	bl	8003f5c <HAL_GetTick>
 8004dd8:	0002      	movs	r2, r0
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d302      	bcc.n	8004dea <I2C_IsErrorOccurred+0x5e>
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d144      	bne.n	8004e74 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	685a      	ldr	r2, [r3, #4]
 8004df0:	2380      	movs	r3, #128	@ 0x80
 8004df2:	01db      	lsls	r3, r3, #7
 8004df4:	4013      	ands	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004df8:	2013      	movs	r0, #19
 8004dfa:	183b      	adds	r3, r7, r0
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	2142      	movs	r1, #66	@ 0x42
 8004e00:	5c52      	ldrb	r2, [r2, r1]
 8004e02:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	2380      	movs	r3, #128	@ 0x80
 8004e0c:	021b      	lsls	r3, r3, #8
 8004e0e:	401a      	ands	r2, r3
 8004e10:	2380      	movs	r3, #128	@ 0x80
 8004e12:	021b      	lsls	r3, r3, #8
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d126      	bne.n	8004e66 <I2C_IsErrorOccurred+0xda>
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	2380      	movs	r3, #128	@ 0x80
 8004e1c:	01db      	lsls	r3, r3, #7
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d021      	beq.n	8004e66 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004e22:	183b      	adds	r3, r7, r0
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b20      	cmp	r3, #32
 8004e28:	d01d      	beq.n	8004e66 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2180      	movs	r1, #128	@ 0x80
 8004e36:	01c9      	lsls	r1, r1, #7
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004e3c:	f7ff f88e 	bl	8003f5c <HAL_GetTick>
 8004e40:	0003      	movs	r3, r0
 8004e42:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e44:	e00f      	b.n	8004e66 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004e46:	f7ff f889 	bl	8003f5c <HAL_GetTick>
 8004e4a:	0002      	movs	r2, r0
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b19      	cmp	r3, #25
 8004e52:	d908      	bls.n	8004e66 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	2220      	movs	r2, #32
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004e5c:	2327      	movs	r3, #39	@ 0x27
 8004e5e:	18fb      	adds	r3, r7, r3
 8004e60:	2201      	movs	r2, #1
 8004e62:	701a      	strb	r2, [r3, #0]

              break;
 8004e64:	e006      	b.n	8004e74 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	4013      	ands	r3, r2
 8004e70:	2b20      	cmp	r3, #32
 8004e72:	d1e8      	bne.n	8004e46 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	2b20      	cmp	r3, #32
 8004e80:	d004      	beq.n	8004e8c <I2C_IsErrorOccurred+0x100>
 8004e82:	2327      	movs	r3, #39	@ 0x27
 8004e84:	18fb      	adds	r3, r7, r3
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d09b      	beq.n	8004dc4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004e8c:	2327      	movs	r3, #39	@ 0x27
 8004e8e:	18fb      	adds	r3, r7, r3
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d103      	bne.n	8004e9e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	2204      	movs	r2, #4
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004ea6:	2327      	movs	r3, #39	@ 0x27
 8004ea8:	18fb      	adds	r3, r7, r3
 8004eaa:	2201      	movs	r2, #1
 8004eac:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	2380      	movs	r3, #128	@ 0x80
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d00c      	beq.n	8004eda <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2280      	movs	r2, #128	@ 0x80
 8004ece:	0052      	lsls	r2, r2, #1
 8004ed0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ed2:	2327      	movs	r3, #39	@ 0x27
 8004ed4:	18fb      	adds	r3, r7, r3
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	2380      	movs	r3, #128	@ 0x80
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	d00c      	beq.n	8004efe <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	2208      	movs	r2, #8
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2280      	movs	r2, #128	@ 0x80
 8004ef2:	00d2      	lsls	r2, r2, #3
 8004ef4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ef6:	2327      	movs	r3, #39	@ 0x27
 8004ef8:	18fb      	adds	r3, r7, r3
 8004efa:	2201      	movs	r2, #1
 8004efc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	2380      	movs	r3, #128	@ 0x80
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4013      	ands	r3, r2
 8004f06:	d00c      	beq.n	8004f22 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2280      	movs	r2, #128	@ 0x80
 8004f16:	0092      	lsls	r2, r2, #2
 8004f18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f1a:	2327      	movs	r3, #39	@ 0x27
 8004f1c:	18fb      	adds	r3, r7, r3
 8004f1e:	2201      	movs	r2, #1
 8004f20:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004f22:	2327      	movs	r3, #39	@ 0x27
 8004f24:	18fb      	adds	r3, r7, r3
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01d      	beq.n	8004f68 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	0018      	movs	r0, r3
 8004f30:	f7ff fd8a 	bl	8004a48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	490e      	ldr	r1, [pc, #56]	@ (8004f78 <I2C_IsErrorOccurred+0x1ec>)
 8004f40:	400a      	ands	r2, r1
 8004f42:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2241      	movs	r2, #65	@ 0x41
 8004f54:	2120      	movs	r1, #32
 8004f56:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2242      	movs	r2, #66	@ 0x42
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2240      	movs	r2, #64	@ 0x40
 8004f64:	2100      	movs	r1, #0
 8004f66:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004f68:	2327      	movs	r3, #39	@ 0x27
 8004f6a:	18fb      	adds	r3, r7, r3
 8004f6c:	781b      	ldrb	r3, [r3, #0]
}
 8004f6e:	0018      	movs	r0, r3
 8004f70:	46bd      	mov	sp, r7
 8004f72:	b00a      	add	sp, #40	@ 0x28
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	46c0      	nop			@ (mov r8, r8)
 8004f78:	fe00e800 	.word	0xfe00e800

08004f7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f7c:	b590      	push	{r4, r7, lr}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	0008      	movs	r0, r1
 8004f86:	0011      	movs	r1, r2
 8004f88:	607b      	str	r3, [r7, #4]
 8004f8a:	240a      	movs	r4, #10
 8004f8c:	193b      	adds	r3, r7, r4
 8004f8e:	1c02      	adds	r2, r0, #0
 8004f90:	801a      	strh	r2, [r3, #0]
 8004f92:	2009      	movs	r0, #9
 8004f94:	183b      	adds	r3, r7, r0
 8004f96:	1c0a      	adds	r2, r1, #0
 8004f98:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f9a:	193b      	adds	r3, r7, r4
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	059b      	lsls	r3, r3, #22
 8004fa0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004fa2:	183b      	adds	r3, r7, r0
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	0419      	lsls	r1, r3, #16
 8004fa8:	23ff      	movs	r3, #255	@ 0xff
 8004faa:	041b      	lsls	r3, r3, #16
 8004fac:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fae:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	085b      	lsrs	r3, r3, #1
 8004fbc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fc6:	0d51      	lsrs	r1, r2, #21
 8004fc8:	2280      	movs	r2, #128	@ 0x80
 8004fca:	00d2      	lsls	r2, r2, #3
 8004fcc:	400a      	ands	r2, r1
 8004fce:	4907      	ldr	r1, [pc, #28]	@ (8004fec <I2C_TransferConfig+0x70>)
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	43d2      	mvns	r2, r2
 8004fd4:	401a      	ands	r2, r3
 8004fd6:	0011      	movs	r1, r2
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004fe2:	46c0      	nop			@ (mov r8, r8)
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	b007      	add	sp, #28
 8004fe8:	bd90      	pop	{r4, r7, pc}
 8004fea:	46c0      	nop			@ (mov r8, r8)
 8004fec:	03ff63ff 	.word	0x03ff63ff

08004ff0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2241      	movs	r2, #65	@ 0x41
 8004ffe:	5c9b      	ldrb	r3, [r3, r2]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b20      	cmp	r3, #32
 8005004:	d138      	bne.n	8005078 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2240      	movs	r2, #64	@ 0x40
 800500a:	5c9b      	ldrb	r3, [r3, r2]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005010:	2302      	movs	r3, #2
 8005012:	e032      	b.n	800507a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2240      	movs	r2, #64	@ 0x40
 8005018:	2101      	movs	r1, #1
 800501a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2241      	movs	r2, #65	@ 0x41
 8005020:	2124      	movs	r1, #36	@ 0x24
 8005022:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2101      	movs	r1, #1
 8005030:	438a      	bics	r2, r1
 8005032:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4911      	ldr	r1, [pc, #68]	@ (8005084 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005040:	400a      	ands	r2, r1
 8005042:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6819      	ldr	r1, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2101      	movs	r1, #1
 8005060:	430a      	orrs	r2, r1
 8005062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2241      	movs	r2, #65	@ 0x41
 8005068:	2120      	movs	r1, #32
 800506a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2240      	movs	r2, #64	@ 0x40
 8005070:	2100      	movs	r1, #0
 8005072:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005074:	2300      	movs	r3, #0
 8005076:	e000      	b.n	800507a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005078:	2302      	movs	r3, #2
  }
}
 800507a:	0018      	movs	r0, r3
 800507c:	46bd      	mov	sp, r7
 800507e:	b002      	add	sp, #8
 8005080:	bd80      	pop	{r7, pc}
 8005082:	46c0      	nop			@ (mov r8, r8)
 8005084:	ffffefff 	.word	0xffffefff

08005088 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2241      	movs	r2, #65	@ 0x41
 8005096:	5c9b      	ldrb	r3, [r3, r2]
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b20      	cmp	r3, #32
 800509c:	d139      	bne.n	8005112 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2240      	movs	r2, #64	@ 0x40
 80050a2:	5c9b      	ldrb	r3, [r3, r2]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d101      	bne.n	80050ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80050a8:	2302      	movs	r3, #2
 80050aa:	e033      	b.n	8005114 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2240      	movs	r2, #64	@ 0x40
 80050b0:	2101      	movs	r1, #1
 80050b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2241      	movs	r2, #65	@ 0x41
 80050b8:	2124      	movs	r1, #36	@ 0x24
 80050ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2101      	movs	r1, #1
 80050c8:	438a      	bics	r2, r1
 80050ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	4a11      	ldr	r2, [pc, #68]	@ (800511c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80050d8:	4013      	ands	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	021b      	lsls	r3, r3, #8
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2101      	movs	r1, #1
 80050fa:	430a      	orrs	r2, r1
 80050fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2241      	movs	r2, #65	@ 0x41
 8005102:	2120      	movs	r1, #32
 8005104:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2240      	movs	r2, #64	@ 0x40
 800510a:	2100      	movs	r1, #0
 800510c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	e000      	b.n	8005114 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005112:	2302      	movs	r3, #2
  }
}
 8005114:	0018      	movs	r0, r3
 8005116:	46bd      	mov	sp, r7
 8005118:	b004      	add	sp, #16
 800511a:	bd80      	pop	{r7, pc}
 800511c:	fffff0ff 	.word	0xfffff0ff

08005120 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005128:	4b19      	ldr	r3, [pc, #100]	@ (8005190 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a19      	ldr	r2, [pc, #100]	@ (8005194 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800512e:	4013      	ands	r3, r2
 8005130:	0019      	movs	r1, r3
 8005132:	4b17      	ldr	r3, [pc, #92]	@ (8005190 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	430a      	orrs	r2, r1
 8005138:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	2380      	movs	r3, #128	@ 0x80
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	429a      	cmp	r2, r3
 8005142:	d11f      	bne.n	8005184 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005144:	4b14      	ldr	r3, [pc, #80]	@ (8005198 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	0013      	movs	r3, r2
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	189b      	adds	r3, r3, r2
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	4912      	ldr	r1, [pc, #72]	@ (800519c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005152:	0018      	movs	r0, r3
 8005154:	f7fa ffe8 	bl	8000128 <__udivsi3>
 8005158:	0003      	movs	r3, r0
 800515a:	3301      	adds	r3, #1
 800515c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800515e:	e008      	b.n	8005172 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3b01      	subs	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	e001      	b.n	8005172 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e009      	b.n	8005186 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005172:	4b07      	ldr	r3, [pc, #28]	@ (8005190 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005174:	695a      	ldr	r2, [r3, #20]
 8005176:	2380      	movs	r3, #128	@ 0x80
 8005178:	00db      	lsls	r3, r3, #3
 800517a:	401a      	ands	r2, r3
 800517c:	2380      	movs	r3, #128	@ 0x80
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	429a      	cmp	r2, r3
 8005182:	d0ed      	beq.n	8005160 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	0018      	movs	r0, r3
 8005188:	46bd      	mov	sp, r7
 800518a:	b004      	add	sp, #16
 800518c:	bd80      	pop	{r7, pc}
 800518e:	46c0      	nop			@ (mov r8, r8)
 8005190:	40007000 	.word	0x40007000
 8005194:	fffff9ff 	.word	0xfffff9ff
 8005198:	20000e84 	.word	0x20000e84
 800519c:	000f4240 	.word	0x000f4240

080051a0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80051a4:	4b03      	ldr	r3, [pc, #12]	@ (80051b4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	23e0      	movs	r3, #224	@ 0xe0
 80051aa:	01db      	lsls	r3, r3, #7
 80051ac:	4013      	ands	r3, r2
}
 80051ae:	0018      	movs	r0, r3
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40021000 	.word	0x40021000

080051b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d102      	bne.n	80051cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	f000 fb50 	bl	800586c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2201      	movs	r2, #1
 80051d2:	4013      	ands	r3, r2
 80051d4:	d100      	bne.n	80051d8 <HAL_RCC_OscConfig+0x20>
 80051d6:	e07c      	b.n	80052d2 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051d8:	4bc3      	ldr	r3, [pc, #780]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	2238      	movs	r2, #56	@ 0x38
 80051de:	4013      	ands	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051e2:	4bc1      	ldr	r3, [pc, #772]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	2203      	movs	r2, #3
 80051e8:	4013      	ands	r3, r2
 80051ea:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	2b10      	cmp	r3, #16
 80051f0:	d102      	bne.n	80051f8 <HAL_RCC_OscConfig+0x40>
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b03      	cmp	r3, #3
 80051f6:	d002      	beq.n	80051fe <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	2b08      	cmp	r3, #8
 80051fc:	d10b      	bne.n	8005216 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051fe:	4bba      	ldr	r3, [pc, #744]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	2380      	movs	r3, #128	@ 0x80
 8005204:	029b      	lsls	r3, r3, #10
 8005206:	4013      	ands	r3, r2
 8005208:	d062      	beq.n	80052d0 <HAL_RCC_OscConfig+0x118>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d15e      	bne.n	80052d0 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e32a      	b.n	800586c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	2380      	movs	r3, #128	@ 0x80
 800521c:	025b      	lsls	r3, r3, #9
 800521e:	429a      	cmp	r2, r3
 8005220:	d107      	bne.n	8005232 <HAL_RCC_OscConfig+0x7a>
 8005222:	4bb1      	ldr	r3, [pc, #708]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	4bb0      	ldr	r3, [pc, #704]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 8005228:	2180      	movs	r1, #128	@ 0x80
 800522a:	0249      	lsls	r1, r1, #9
 800522c:	430a      	orrs	r2, r1
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	e020      	b.n	8005274 <HAL_RCC_OscConfig+0xbc>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	23a0      	movs	r3, #160	@ 0xa0
 8005238:	02db      	lsls	r3, r3, #11
 800523a:	429a      	cmp	r2, r3
 800523c:	d10e      	bne.n	800525c <HAL_RCC_OscConfig+0xa4>
 800523e:	4baa      	ldr	r3, [pc, #680]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	4ba9      	ldr	r3, [pc, #676]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 8005244:	2180      	movs	r1, #128	@ 0x80
 8005246:	02c9      	lsls	r1, r1, #11
 8005248:	430a      	orrs	r2, r1
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	4ba6      	ldr	r3, [pc, #664]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	4ba5      	ldr	r3, [pc, #660]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 8005252:	2180      	movs	r1, #128	@ 0x80
 8005254:	0249      	lsls	r1, r1, #9
 8005256:	430a      	orrs	r2, r1
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	e00b      	b.n	8005274 <HAL_RCC_OscConfig+0xbc>
 800525c:	4ba2      	ldr	r3, [pc, #648]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	4ba1      	ldr	r3, [pc, #644]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 8005262:	49a2      	ldr	r1, [pc, #648]	@ (80054ec <HAL_RCC_OscConfig+0x334>)
 8005264:	400a      	ands	r2, r1
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	4b9f      	ldr	r3, [pc, #636]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	4b9e      	ldr	r3, [pc, #632]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 800526e:	49a0      	ldr	r1, [pc, #640]	@ (80054f0 <HAL_RCC_OscConfig+0x338>)
 8005270:	400a      	ands	r2, r1
 8005272:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d014      	beq.n	80052a6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527c:	f7fe fe6e 	bl	8003f5c <HAL_GetTick>
 8005280:	0003      	movs	r3, r0
 8005282:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005284:	e008      	b.n	8005298 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005286:	f7fe fe69 	bl	8003f5c <HAL_GetTick>
 800528a:	0002      	movs	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b64      	cmp	r3, #100	@ 0x64
 8005292:	d901      	bls.n	8005298 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e2e9      	b.n	800586c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005298:	4b93      	ldr	r3, [pc, #588]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	2380      	movs	r3, #128	@ 0x80
 800529e:	029b      	lsls	r3, r3, #10
 80052a0:	4013      	ands	r3, r2
 80052a2:	d0f0      	beq.n	8005286 <HAL_RCC_OscConfig+0xce>
 80052a4:	e015      	b.n	80052d2 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a6:	f7fe fe59 	bl	8003f5c <HAL_GetTick>
 80052aa:	0003      	movs	r3, r0
 80052ac:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052b0:	f7fe fe54 	bl	8003f5c <HAL_GetTick>
 80052b4:	0002      	movs	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b64      	cmp	r3, #100	@ 0x64
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e2d4      	b.n	800586c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052c2:	4b89      	ldr	r3, [pc, #548]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	2380      	movs	r3, #128	@ 0x80
 80052c8:	029b      	lsls	r3, r3, #10
 80052ca:	4013      	ands	r3, r2
 80052cc:	d1f0      	bne.n	80052b0 <HAL_RCC_OscConfig+0xf8>
 80052ce:	e000      	b.n	80052d2 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2202      	movs	r2, #2
 80052d8:	4013      	ands	r3, r2
 80052da:	d100      	bne.n	80052de <HAL_RCC_OscConfig+0x126>
 80052dc:	e099      	b.n	8005412 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052de:	4b82      	ldr	r3, [pc, #520]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	2238      	movs	r2, #56	@ 0x38
 80052e4:	4013      	ands	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052e8:	4b7f      	ldr	r3, [pc, #508]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	2203      	movs	r2, #3
 80052ee:	4013      	ands	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	2b10      	cmp	r3, #16
 80052f6:	d102      	bne.n	80052fe <HAL_RCC_OscConfig+0x146>
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d002      	beq.n	8005304 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d135      	bne.n	8005370 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005304:	4b78      	ldr	r3, [pc, #480]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	2380      	movs	r3, #128	@ 0x80
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	4013      	ands	r3, r2
 800530e:	d005      	beq.n	800531c <HAL_RCC_OscConfig+0x164>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e2a7      	b.n	800586c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800531c:	4b72      	ldr	r3, [pc, #456]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	4a74      	ldr	r2, [pc, #464]	@ (80054f4 <HAL_RCC_OscConfig+0x33c>)
 8005322:	4013      	ands	r3, r2
 8005324:	0019      	movs	r1, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	021a      	lsls	r2, r3, #8
 800532c:	4b6e      	ldr	r3, [pc, #440]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 800532e:	430a      	orrs	r2, r1
 8005330:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d112      	bne.n	800535e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005338:	4b6b      	ldr	r3, [pc, #428]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a6e      	ldr	r2, [pc, #440]	@ (80054f8 <HAL_RCC_OscConfig+0x340>)
 800533e:	4013      	ands	r3, r2
 8005340:	0019      	movs	r1, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691a      	ldr	r2, [r3, #16]
 8005346:	4b68      	ldr	r3, [pc, #416]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 8005348:	430a      	orrs	r2, r1
 800534a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800534c:	4b66      	ldr	r3, [pc, #408]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	0adb      	lsrs	r3, r3, #11
 8005352:	2207      	movs	r2, #7
 8005354:	4013      	ands	r3, r2
 8005356:	4a69      	ldr	r2, [pc, #420]	@ (80054fc <HAL_RCC_OscConfig+0x344>)
 8005358:	40da      	lsrs	r2, r3
 800535a:	4b69      	ldr	r3, [pc, #420]	@ (8005500 <HAL_RCC_OscConfig+0x348>)
 800535c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800535e:	4b69      	ldr	r3, [pc, #420]	@ (8005504 <HAL_RCC_OscConfig+0x34c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	0018      	movs	r0, r3
 8005364:	f7fe fd9e 	bl	8003ea4 <HAL_InitTick>
 8005368:	1e03      	subs	r3, r0, #0
 800536a:	d051      	beq.n	8005410 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e27d      	b.n	800586c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d030      	beq.n	80053da <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005378:	4b5b      	ldr	r3, [pc, #364]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a5e      	ldr	r2, [pc, #376]	@ (80054f8 <HAL_RCC_OscConfig+0x340>)
 800537e:	4013      	ands	r3, r2
 8005380:	0019      	movs	r1, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	691a      	ldr	r2, [r3, #16]
 8005386:	4b58      	ldr	r3, [pc, #352]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 8005388:	430a      	orrs	r2, r1
 800538a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800538c:	4b56      	ldr	r3, [pc, #344]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	4b55      	ldr	r3, [pc, #340]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 8005392:	2180      	movs	r1, #128	@ 0x80
 8005394:	0049      	lsls	r1, r1, #1
 8005396:	430a      	orrs	r2, r1
 8005398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539a:	f7fe fddf 	bl	8003f5c <HAL_GetTick>
 800539e:	0003      	movs	r3, r0
 80053a0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053a4:	f7fe fdda 	bl	8003f5c <HAL_GetTick>
 80053a8:	0002      	movs	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e25a      	b.n	800586c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053b6:	4b4c      	ldr	r3, [pc, #304]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	2380      	movs	r3, #128	@ 0x80
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	4013      	ands	r3, r2
 80053c0:	d0f0      	beq.n	80053a4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053c2:	4b49      	ldr	r3, [pc, #292]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	4a4b      	ldr	r2, [pc, #300]	@ (80054f4 <HAL_RCC_OscConfig+0x33c>)
 80053c8:	4013      	ands	r3, r2
 80053ca:	0019      	movs	r1, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	021a      	lsls	r2, r3, #8
 80053d2:	4b45      	ldr	r3, [pc, #276]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 80053d4:	430a      	orrs	r2, r1
 80053d6:	605a      	str	r2, [r3, #4]
 80053d8:	e01b      	b.n	8005412 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80053da:	4b43      	ldr	r3, [pc, #268]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	4b42      	ldr	r3, [pc, #264]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 80053e0:	4949      	ldr	r1, [pc, #292]	@ (8005508 <HAL_RCC_OscConfig+0x350>)
 80053e2:	400a      	ands	r2, r1
 80053e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e6:	f7fe fdb9 	bl	8003f5c <HAL_GetTick>
 80053ea:	0003      	movs	r3, r0
 80053ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053f0:	f7fe fdb4 	bl	8003f5c <HAL_GetTick>
 80053f4:	0002      	movs	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e234      	b.n	800586c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005402:	4b39      	ldr	r3, [pc, #228]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	2380      	movs	r3, #128	@ 0x80
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	4013      	ands	r3, r2
 800540c:	d1f0      	bne.n	80053f0 <HAL_RCC_OscConfig+0x238>
 800540e:	e000      	b.n	8005412 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005410:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2208      	movs	r2, #8
 8005418:	4013      	ands	r3, r2
 800541a:	d047      	beq.n	80054ac <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800541c:	4b32      	ldr	r3, [pc, #200]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	2238      	movs	r2, #56	@ 0x38
 8005422:	4013      	ands	r3, r2
 8005424:	2b18      	cmp	r3, #24
 8005426:	d10a      	bne.n	800543e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005428:	4b2f      	ldr	r3, [pc, #188]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 800542a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800542c:	2202      	movs	r2, #2
 800542e:	4013      	ands	r3, r2
 8005430:	d03c      	beq.n	80054ac <HAL_RCC_OscConfig+0x2f4>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d138      	bne.n	80054ac <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e216      	b.n	800586c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d019      	beq.n	800547a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005446:	4b28      	ldr	r3, [pc, #160]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 8005448:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800544a:	4b27      	ldr	r3, [pc, #156]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 800544c:	2101      	movs	r1, #1
 800544e:	430a      	orrs	r2, r1
 8005450:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005452:	f7fe fd83 	bl	8003f5c <HAL_GetTick>
 8005456:	0003      	movs	r3, r0
 8005458:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800545c:	f7fe fd7e 	bl	8003f5c <HAL_GetTick>
 8005460:	0002      	movs	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e1fe      	b.n	800586c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800546e:	4b1e      	ldr	r3, [pc, #120]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 8005470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005472:	2202      	movs	r2, #2
 8005474:	4013      	ands	r3, r2
 8005476:	d0f1      	beq.n	800545c <HAL_RCC_OscConfig+0x2a4>
 8005478:	e018      	b.n	80054ac <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800547a:	4b1b      	ldr	r3, [pc, #108]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 800547c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800547e:	4b1a      	ldr	r3, [pc, #104]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 8005480:	2101      	movs	r1, #1
 8005482:	438a      	bics	r2, r1
 8005484:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005486:	f7fe fd69 	bl	8003f5c <HAL_GetTick>
 800548a:	0003      	movs	r3, r0
 800548c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005490:	f7fe fd64 	bl	8003f5c <HAL_GetTick>
 8005494:	0002      	movs	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e1e4      	b.n	800586c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054a2:	4b11      	ldr	r3, [pc, #68]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 80054a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054a6:	2202      	movs	r2, #2
 80054a8:	4013      	ands	r3, r2
 80054aa:	d1f1      	bne.n	8005490 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2204      	movs	r2, #4
 80054b2:	4013      	ands	r3, r2
 80054b4:	d100      	bne.n	80054b8 <HAL_RCC_OscConfig+0x300>
 80054b6:	e0c7      	b.n	8005648 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054b8:	231f      	movs	r3, #31
 80054ba:	18fb      	adds	r3, r7, r3
 80054bc:	2200      	movs	r2, #0
 80054be:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80054c0:	4b09      	ldr	r3, [pc, #36]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2238      	movs	r2, #56	@ 0x38
 80054c6:	4013      	ands	r3, r2
 80054c8:	2b20      	cmp	r3, #32
 80054ca:	d11f      	bne.n	800550c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80054cc:	4b06      	ldr	r3, [pc, #24]	@ (80054e8 <HAL_RCC_OscConfig+0x330>)
 80054ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d0:	2202      	movs	r2, #2
 80054d2:	4013      	ands	r3, r2
 80054d4:	d100      	bne.n	80054d8 <HAL_RCC_OscConfig+0x320>
 80054d6:	e0b7      	b.n	8005648 <HAL_RCC_OscConfig+0x490>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d000      	beq.n	80054e2 <HAL_RCC_OscConfig+0x32a>
 80054e0:	e0b2      	b.n	8005648 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e1c2      	b.n	800586c <HAL_RCC_OscConfig+0x6b4>
 80054e6:	46c0      	nop			@ (mov r8, r8)
 80054e8:	40021000 	.word	0x40021000
 80054ec:	fffeffff 	.word	0xfffeffff
 80054f0:	fffbffff 	.word	0xfffbffff
 80054f4:	ffff80ff 	.word	0xffff80ff
 80054f8:	ffffc7ff 	.word	0xffffc7ff
 80054fc:	00f42400 	.word	0x00f42400
 8005500:	20000e84 	.word	0x20000e84
 8005504:	20000e88 	.word	0x20000e88
 8005508:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800550c:	4bb5      	ldr	r3, [pc, #724]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 800550e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005510:	2380      	movs	r3, #128	@ 0x80
 8005512:	055b      	lsls	r3, r3, #21
 8005514:	4013      	ands	r3, r2
 8005516:	d101      	bne.n	800551c <HAL_RCC_OscConfig+0x364>
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <HAL_RCC_OscConfig+0x366>
 800551c:	2300      	movs	r3, #0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d011      	beq.n	8005546 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005522:	4bb0      	ldr	r3, [pc, #704]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 8005524:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005526:	4baf      	ldr	r3, [pc, #700]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 8005528:	2180      	movs	r1, #128	@ 0x80
 800552a:	0549      	lsls	r1, r1, #21
 800552c:	430a      	orrs	r2, r1
 800552e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005530:	4bac      	ldr	r3, [pc, #688]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 8005532:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005534:	2380      	movs	r3, #128	@ 0x80
 8005536:	055b      	lsls	r3, r3, #21
 8005538:	4013      	ands	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800553e:	231f      	movs	r3, #31
 8005540:	18fb      	adds	r3, r7, r3
 8005542:	2201      	movs	r2, #1
 8005544:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005546:	4ba8      	ldr	r3, [pc, #672]	@ (80057e8 <HAL_RCC_OscConfig+0x630>)
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	2380      	movs	r3, #128	@ 0x80
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	4013      	ands	r3, r2
 8005550:	d11a      	bne.n	8005588 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005552:	4ba5      	ldr	r3, [pc, #660]	@ (80057e8 <HAL_RCC_OscConfig+0x630>)
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	4ba4      	ldr	r3, [pc, #656]	@ (80057e8 <HAL_RCC_OscConfig+0x630>)
 8005558:	2180      	movs	r1, #128	@ 0x80
 800555a:	0049      	lsls	r1, r1, #1
 800555c:	430a      	orrs	r2, r1
 800555e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005560:	f7fe fcfc 	bl	8003f5c <HAL_GetTick>
 8005564:	0003      	movs	r3, r0
 8005566:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005568:	e008      	b.n	800557c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800556a:	f7fe fcf7 	bl	8003f5c <HAL_GetTick>
 800556e:	0002      	movs	r2, r0
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d901      	bls.n	800557c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e177      	b.n	800586c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800557c:	4b9a      	ldr	r3, [pc, #616]	@ (80057e8 <HAL_RCC_OscConfig+0x630>)
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	2380      	movs	r3, #128	@ 0x80
 8005582:	005b      	lsls	r3, r3, #1
 8005584:	4013      	ands	r3, r2
 8005586:	d0f0      	beq.n	800556a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d106      	bne.n	800559e <HAL_RCC_OscConfig+0x3e6>
 8005590:	4b94      	ldr	r3, [pc, #592]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 8005592:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005594:	4b93      	ldr	r3, [pc, #588]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 8005596:	2101      	movs	r1, #1
 8005598:	430a      	orrs	r2, r1
 800559a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800559c:	e01c      	b.n	80055d8 <HAL_RCC_OscConfig+0x420>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	2b05      	cmp	r3, #5
 80055a4:	d10c      	bne.n	80055c0 <HAL_RCC_OscConfig+0x408>
 80055a6:	4b8f      	ldr	r3, [pc, #572]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 80055a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80055aa:	4b8e      	ldr	r3, [pc, #568]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 80055ac:	2104      	movs	r1, #4
 80055ae:	430a      	orrs	r2, r1
 80055b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80055b2:	4b8c      	ldr	r3, [pc, #560]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 80055b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80055b6:	4b8b      	ldr	r3, [pc, #556]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 80055b8:	2101      	movs	r1, #1
 80055ba:	430a      	orrs	r2, r1
 80055bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80055be:	e00b      	b.n	80055d8 <HAL_RCC_OscConfig+0x420>
 80055c0:	4b88      	ldr	r3, [pc, #544]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 80055c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80055c4:	4b87      	ldr	r3, [pc, #540]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 80055c6:	2101      	movs	r1, #1
 80055c8:	438a      	bics	r2, r1
 80055ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80055cc:	4b85      	ldr	r3, [pc, #532]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 80055ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80055d0:	4b84      	ldr	r3, [pc, #528]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 80055d2:	2104      	movs	r1, #4
 80055d4:	438a      	bics	r2, r1
 80055d6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d014      	beq.n	800560a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e0:	f7fe fcbc 	bl	8003f5c <HAL_GetTick>
 80055e4:	0003      	movs	r3, r0
 80055e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055e8:	e009      	b.n	80055fe <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ea:	f7fe fcb7 	bl	8003f5c <HAL_GetTick>
 80055ee:	0002      	movs	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	4a7d      	ldr	r2, [pc, #500]	@ (80057ec <HAL_RCC_OscConfig+0x634>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e136      	b.n	800586c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055fe:	4b79      	ldr	r3, [pc, #484]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 8005600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005602:	2202      	movs	r2, #2
 8005604:	4013      	ands	r3, r2
 8005606:	d0f0      	beq.n	80055ea <HAL_RCC_OscConfig+0x432>
 8005608:	e013      	b.n	8005632 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560a:	f7fe fca7 	bl	8003f5c <HAL_GetTick>
 800560e:	0003      	movs	r3, r0
 8005610:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005612:	e009      	b.n	8005628 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005614:	f7fe fca2 	bl	8003f5c <HAL_GetTick>
 8005618:	0002      	movs	r2, r0
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	4a73      	ldr	r2, [pc, #460]	@ (80057ec <HAL_RCC_OscConfig+0x634>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d901      	bls.n	8005628 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e121      	b.n	800586c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005628:	4b6e      	ldr	r3, [pc, #440]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 800562a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800562c:	2202      	movs	r2, #2
 800562e:	4013      	ands	r3, r2
 8005630:	d1f0      	bne.n	8005614 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005632:	231f      	movs	r3, #31
 8005634:	18fb      	adds	r3, r7, r3
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d105      	bne.n	8005648 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800563c:	4b69      	ldr	r3, [pc, #420]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 800563e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005640:	4b68      	ldr	r3, [pc, #416]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 8005642:	496b      	ldr	r1, [pc, #428]	@ (80057f0 <HAL_RCC_OscConfig+0x638>)
 8005644:	400a      	ands	r2, r1
 8005646:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2220      	movs	r2, #32
 800564e:	4013      	ands	r3, r2
 8005650:	d039      	beq.n	80056c6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d01b      	beq.n	8005692 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800565a:	4b62      	ldr	r3, [pc, #392]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	4b61      	ldr	r3, [pc, #388]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 8005660:	2180      	movs	r1, #128	@ 0x80
 8005662:	03c9      	lsls	r1, r1, #15
 8005664:	430a      	orrs	r2, r1
 8005666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005668:	f7fe fc78 	bl	8003f5c <HAL_GetTick>
 800566c:	0003      	movs	r3, r0
 800566e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005672:	f7fe fc73 	bl	8003f5c <HAL_GetTick>
 8005676:	0002      	movs	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e0f3      	b.n	800586c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005684:	4b57      	ldr	r3, [pc, #348]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	2380      	movs	r3, #128	@ 0x80
 800568a:	041b      	lsls	r3, r3, #16
 800568c:	4013      	ands	r3, r2
 800568e:	d0f0      	beq.n	8005672 <HAL_RCC_OscConfig+0x4ba>
 8005690:	e019      	b.n	80056c6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005692:	4b54      	ldr	r3, [pc, #336]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	4b53      	ldr	r3, [pc, #332]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 8005698:	4956      	ldr	r1, [pc, #344]	@ (80057f4 <HAL_RCC_OscConfig+0x63c>)
 800569a:	400a      	ands	r2, r1
 800569c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569e:	f7fe fc5d 	bl	8003f5c <HAL_GetTick>
 80056a2:	0003      	movs	r3, r0
 80056a4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80056a6:	e008      	b.n	80056ba <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056a8:	f7fe fc58 	bl	8003f5c <HAL_GetTick>
 80056ac:	0002      	movs	r2, r0
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e0d8      	b.n	800586c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80056ba:	4b4a      	ldr	r3, [pc, #296]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	2380      	movs	r3, #128	@ 0x80
 80056c0:	041b      	lsls	r3, r3, #16
 80056c2:	4013      	ands	r3, r2
 80056c4:	d1f0      	bne.n	80056a8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d100      	bne.n	80056d0 <HAL_RCC_OscConfig+0x518>
 80056ce:	e0cc      	b.n	800586a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056d0:	4b44      	ldr	r3, [pc, #272]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	2238      	movs	r2, #56	@ 0x38
 80056d6:	4013      	ands	r3, r2
 80056d8:	2b10      	cmp	r3, #16
 80056da:	d100      	bne.n	80056de <HAL_RCC_OscConfig+0x526>
 80056dc:	e07b      	b.n	80057d6 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d156      	bne.n	8005794 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056e6:	4b3f      	ldr	r3, [pc, #252]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	4b3e      	ldr	r3, [pc, #248]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 80056ec:	4942      	ldr	r1, [pc, #264]	@ (80057f8 <HAL_RCC_OscConfig+0x640>)
 80056ee:	400a      	ands	r2, r1
 80056f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f2:	f7fe fc33 	bl	8003f5c <HAL_GetTick>
 80056f6:	0003      	movs	r3, r0
 80056f8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056fc:	f7fe fc2e 	bl	8003f5c <HAL_GetTick>
 8005700:	0002      	movs	r2, r0
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e0ae      	b.n	800586c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800570e:	4b35      	ldr	r3, [pc, #212]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	2380      	movs	r3, #128	@ 0x80
 8005714:	049b      	lsls	r3, r3, #18
 8005716:	4013      	ands	r3, r2
 8005718:	d1f0      	bne.n	80056fc <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800571a:	4b32      	ldr	r3, [pc, #200]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	4a37      	ldr	r2, [pc, #220]	@ (80057fc <HAL_RCC_OscConfig+0x644>)
 8005720:	4013      	ands	r3, r2
 8005722:	0019      	movs	r1, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005732:	021b      	lsls	r3, r3, #8
 8005734:	431a      	orrs	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005740:	431a      	orrs	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005746:	431a      	orrs	r2, r3
 8005748:	4b26      	ldr	r3, [pc, #152]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 800574a:	430a      	orrs	r2, r1
 800574c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800574e:	4b25      	ldr	r3, [pc, #148]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	4b24      	ldr	r3, [pc, #144]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 8005754:	2180      	movs	r1, #128	@ 0x80
 8005756:	0449      	lsls	r1, r1, #17
 8005758:	430a      	orrs	r2, r1
 800575a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800575c:	4b21      	ldr	r3, [pc, #132]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	4b20      	ldr	r3, [pc, #128]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 8005762:	2180      	movs	r1, #128	@ 0x80
 8005764:	0549      	lsls	r1, r1, #21
 8005766:	430a      	orrs	r2, r1
 8005768:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576a:	f7fe fbf7 	bl	8003f5c <HAL_GetTick>
 800576e:	0003      	movs	r3, r0
 8005770:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005774:	f7fe fbf2 	bl	8003f5c <HAL_GetTick>
 8005778:	0002      	movs	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e072      	b.n	800586c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005786:	4b17      	ldr	r3, [pc, #92]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	2380      	movs	r3, #128	@ 0x80
 800578c:	049b      	lsls	r3, r3, #18
 800578e:	4013      	ands	r3, r2
 8005790:	d0f0      	beq.n	8005774 <HAL_RCC_OscConfig+0x5bc>
 8005792:	e06a      	b.n	800586a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005794:	4b13      	ldr	r3, [pc, #76]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	4b12      	ldr	r3, [pc, #72]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 800579a:	4917      	ldr	r1, [pc, #92]	@ (80057f8 <HAL_RCC_OscConfig+0x640>)
 800579c:	400a      	ands	r2, r1
 800579e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a0:	f7fe fbdc 	bl	8003f5c <HAL_GetTick>
 80057a4:	0003      	movs	r3, r0
 80057a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057aa:	f7fe fbd7 	bl	8003f5c <HAL_GetTick>
 80057ae:	0002      	movs	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e057      	b.n	800586c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057bc:	4b09      	ldr	r3, [pc, #36]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	2380      	movs	r3, #128	@ 0x80
 80057c2:	049b      	lsls	r3, r3, #18
 80057c4:	4013      	ands	r3, r2
 80057c6:	d1f0      	bne.n	80057aa <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80057c8:	4b06      	ldr	r3, [pc, #24]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	4b05      	ldr	r3, [pc, #20]	@ (80057e4 <HAL_RCC_OscConfig+0x62c>)
 80057ce:	490c      	ldr	r1, [pc, #48]	@ (8005800 <HAL_RCC_OscConfig+0x648>)
 80057d0:	400a      	ands	r2, r1
 80057d2:	60da      	str	r2, [r3, #12]
 80057d4:	e049      	b.n	800586a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d112      	bne.n	8005804 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e044      	b.n	800586c <HAL_RCC_OscConfig+0x6b4>
 80057e2:	46c0      	nop			@ (mov r8, r8)
 80057e4:	40021000 	.word	0x40021000
 80057e8:	40007000 	.word	0x40007000
 80057ec:	00001388 	.word	0x00001388
 80057f0:	efffffff 	.word	0xefffffff
 80057f4:	ffbfffff 	.word	0xffbfffff
 80057f8:	feffffff 	.word	0xfeffffff
 80057fc:	11c1808c 	.word	0x11c1808c
 8005800:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005804:	4b1b      	ldr	r3, [pc, #108]	@ (8005874 <HAL_RCC_OscConfig+0x6bc>)
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2203      	movs	r2, #3
 800580e:	401a      	ands	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005814:	429a      	cmp	r2, r3
 8005816:	d126      	bne.n	8005866 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	2270      	movs	r2, #112	@ 0x70
 800581c:	401a      	ands	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005822:	429a      	cmp	r2, r3
 8005824:	d11f      	bne.n	8005866 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	23fe      	movs	r3, #254	@ 0xfe
 800582a:	01db      	lsls	r3, r3, #7
 800582c:	401a      	ands	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005832:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005834:	429a      	cmp	r2, r3
 8005836:	d116      	bne.n	8005866 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	23f8      	movs	r3, #248	@ 0xf8
 800583c:	039b      	lsls	r3, r3, #14
 800583e:	401a      	ands	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005844:	429a      	cmp	r2, r3
 8005846:	d10e      	bne.n	8005866 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	23e0      	movs	r3, #224	@ 0xe0
 800584c:	051b      	lsls	r3, r3, #20
 800584e:	401a      	ands	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005854:	429a      	cmp	r2, r3
 8005856:	d106      	bne.n	8005866 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	0f5b      	lsrs	r3, r3, #29
 800585c:	075a      	lsls	r2, r3, #29
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005862:	429a      	cmp	r2, r3
 8005864:	d001      	beq.n	800586a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e000      	b.n	800586c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	0018      	movs	r0, r3
 800586e:	46bd      	mov	sp, r7
 8005870:	b008      	add	sp, #32
 8005872:	bd80      	pop	{r7, pc}
 8005874:	40021000 	.word	0x40021000

08005878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e0e9      	b.n	8005a60 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800588c:	4b76      	ldr	r3, [pc, #472]	@ (8005a68 <HAL_RCC_ClockConfig+0x1f0>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2207      	movs	r2, #7
 8005892:	4013      	ands	r3, r2
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	429a      	cmp	r2, r3
 8005898:	d91e      	bls.n	80058d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800589a:	4b73      	ldr	r3, [pc, #460]	@ (8005a68 <HAL_RCC_ClockConfig+0x1f0>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2207      	movs	r2, #7
 80058a0:	4393      	bics	r3, r2
 80058a2:	0019      	movs	r1, r3
 80058a4:	4b70      	ldr	r3, [pc, #448]	@ (8005a68 <HAL_RCC_ClockConfig+0x1f0>)
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80058ac:	f7fe fb56 	bl	8003f5c <HAL_GetTick>
 80058b0:	0003      	movs	r3, r0
 80058b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80058b4:	e009      	b.n	80058ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058b6:	f7fe fb51 	bl	8003f5c <HAL_GetTick>
 80058ba:	0002      	movs	r2, r0
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	4a6a      	ldr	r2, [pc, #424]	@ (8005a6c <HAL_RCC_ClockConfig+0x1f4>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e0ca      	b.n	8005a60 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80058ca:	4b67      	ldr	r3, [pc, #412]	@ (8005a68 <HAL_RCC_ClockConfig+0x1f0>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2207      	movs	r2, #7
 80058d0:	4013      	ands	r3, r2
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d1ee      	bne.n	80058b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2202      	movs	r2, #2
 80058de:	4013      	ands	r3, r2
 80058e0:	d015      	beq.n	800590e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2204      	movs	r2, #4
 80058e8:	4013      	ands	r3, r2
 80058ea:	d006      	beq.n	80058fa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80058ec:	4b60      	ldr	r3, [pc, #384]	@ (8005a70 <HAL_RCC_ClockConfig+0x1f8>)
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	4b5f      	ldr	r3, [pc, #380]	@ (8005a70 <HAL_RCC_ClockConfig+0x1f8>)
 80058f2:	21e0      	movs	r1, #224	@ 0xe0
 80058f4:	01c9      	lsls	r1, r1, #7
 80058f6:	430a      	orrs	r2, r1
 80058f8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058fa:	4b5d      	ldr	r3, [pc, #372]	@ (8005a70 <HAL_RCC_ClockConfig+0x1f8>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	4a5d      	ldr	r2, [pc, #372]	@ (8005a74 <HAL_RCC_ClockConfig+0x1fc>)
 8005900:	4013      	ands	r3, r2
 8005902:	0019      	movs	r1, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	4b59      	ldr	r3, [pc, #356]	@ (8005a70 <HAL_RCC_ClockConfig+0x1f8>)
 800590a:	430a      	orrs	r2, r1
 800590c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2201      	movs	r2, #1
 8005914:	4013      	ands	r3, r2
 8005916:	d057      	beq.n	80059c8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d107      	bne.n	8005930 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005920:	4b53      	ldr	r3, [pc, #332]	@ (8005a70 <HAL_RCC_ClockConfig+0x1f8>)
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	2380      	movs	r3, #128	@ 0x80
 8005926:	029b      	lsls	r3, r3, #10
 8005928:	4013      	ands	r3, r2
 800592a:	d12b      	bne.n	8005984 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e097      	b.n	8005a60 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2b02      	cmp	r3, #2
 8005936:	d107      	bne.n	8005948 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005938:	4b4d      	ldr	r3, [pc, #308]	@ (8005a70 <HAL_RCC_ClockConfig+0x1f8>)
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	2380      	movs	r3, #128	@ 0x80
 800593e:	049b      	lsls	r3, r3, #18
 8005940:	4013      	ands	r3, r2
 8005942:	d11f      	bne.n	8005984 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e08b      	b.n	8005a60 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d107      	bne.n	8005960 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005950:	4b47      	ldr	r3, [pc, #284]	@ (8005a70 <HAL_RCC_ClockConfig+0x1f8>)
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	2380      	movs	r3, #128	@ 0x80
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	4013      	ands	r3, r2
 800595a:	d113      	bne.n	8005984 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e07f      	b.n	8005a60 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2b03      	cmp	r3, #3
 8005966:	d106      	bne.n	8005976 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005968:	4b41      	ldr	r3, [pc, #260]	@ (8005a70 <HAL_RCC_ClockConfig+0x1f8>)
 800596a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800596c:	2202      	movs	r2, #2
 800596e:	4013      	ands	r3, r2
 8005970:	d108      	bne.n	8005984 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e074      	b.n	8005a60 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005976:	4b3e      	ldr	r3, [pc, #248]	@ (8005a70 <HAL_RCC_ClockConfig+0x1f8>)
 8005978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800597a:	2202      	movs	r2, #2
 800597c:	4013      	ands	r3, r2
 800597e:	d101      	bne.n	8005984 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e06d      	b.n	8005a60 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005984:	4b3a      	ldr	r3, [pc, #232]	@ (8005a70 <HAL_RCC_ClockConfig+0x1f8>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	2207      	movs	r2, #7
 800598a:	4393      	bics	r3, r2
 800598c:	0019      	movs	r1, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	4b37      	ldr	r3, [pc, #220]	@ (8005a70 <HAL_RCC_ClockConfig+0x1f8>)
 8005994:	430a      	orrs	r2, r1
 8005996:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005998:	f7fe fae0 	bl	8003f5c <HAL_GetTick>
 800599c:	0003      	movs	r3, r0
 800599e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059a0:	e009      	b.n	80059b6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059a2:	f7fe fadb 	bl	8003f5c <HAL_GetTick>
 80059a6:	0002      	movs	r2, r0
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	4a2f      	ldr	r2, [pc, #188]	@ (8005a6c <HAL_RCC_ClockConfig+0x1f4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e054      	b.n	8005a60 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059b6:	4b2e      	ldr	r3, [pc, #184]	@ (8005a70 <HAL_RCC_ClockConfig+0x1f8>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	2238      	movs	r2, #56	@ 0x38
 80059bc:	401a      	ands	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d1ec      	bne.n	80059a2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059c8:	4b27      	ldr	r3, [pc, #156]	@ (8005a68 <HAL_RCC_ClockConfig+0x1f0>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2207      	movs	r2, #7
 80059ce:	4013      	ands	r3, r2
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d21e      	bcs.n	8005a14 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059d6:	4b24      	ldr	r3, [pc, #144]	@ (8005a68 <HAL_RCC_ClockConfig+0x1f0>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2207      	movs	r2, #7
 80059dc:	4393      	bics	r3, r2
 80059de:	0019      	movs	r1, r3
 80059e0:	4b21      	ldr	r3, [pc, #132]	@ (8005a68 <HAL_RCC_ClockConfig+0x1f0>)
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80059e8:	f7fe fab8 	bl	8003f5c <HAL_GetTick>
 80059ec:	0003      	movs	r3, r0
 80059ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80059f0:	e009      	b.n	8005a06 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059f2:	f7fe fab3 	bl	8003f5c <HAL_GetTick>
 80059f6:	0002      	movs	r2, r0
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	4a1b      	ldr	r2, [pc, #108]	@ (8005a6c <HAL_RCC_ClockConfig+0x1f4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e02c      	b.n	8005a60 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a06:	4b18      	ldr	r3, [pc, #96]	@ (8005a68 <HAL_RCC_ClockConfig+0x1f0>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2207      	movs	r2, #7
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d1ee      	bne.n	80059f2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2204      	movs	r2, #4
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	d009      	beq.n	8005a32 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005a1e:	4b14      	ldr	r3, [pc, #80]	@ (8005a70 <HAL_RCC_ClockConfig+0x1f8>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	4a15      	ldr	r2, [pc, #84]	@ (8005a78 <HAL_RCC_ClockConfig+0x200>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	0019      	movs	r1, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	4b10      	ldr	r3, [pc, #64]	@ (8005a70 <HAL_RCC_ClockConfig+0x1f8>)
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005a32:	f000 f829 	bl	8005a88 <HAL_RCC_GetSysClockFreq>
 8005a36:	0001      	movs	r1, r0
 8005a38:	4b0d      	ldr	r3, [pc, #52]	@ (8005a70 <HAL_RCC_ClockConfig+0x1f8>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	0a1b      	lsrs	r3, r3, #8
 8005a3e:	220f      	movs	r2, #15
 8005a40:	401a      	ands	r2, r3
 8005a42:	4b0e      	ldr	r3, [pc, #56]	@ (8005a7c <HAL_RCC_ClockConfig+0x204>)
 8005a44:	0092      	lsls	r2, r2, #2
 8005a46:	58d3      	ldr	r3, [r2, r3]
 8005a48:	221f      	movs	r2, #31
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	000a      	movs	r2, r1
 8005a4e:	40da      	lsrs	r2, r3
 8005a50:	4b0b      	ldr	r3, [pc, #44]	@ (8005a80 <HAL_RCC_ClockConfig+0x208>)
 8005a52:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005a54:	4b0b      	ldr	r3, [pc, #44]	@ (8005a84 <HAL_RCC_ClockConfig+0x20c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	0018      	movs	r0, r3
 8005a5a:	f7fe fa23 	bl	8003ea4 <HAL_InitTick>
 8005a5e:	0003      	movs	r3, r0
}
 8005a60:	0018      	movs	r0, r3
 8005a62:	46bd      	mov	sp, r7
 8005a64:	b004      	add	sp, #16
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	40022000 	.word	0x40022000
 8005a6c:	00001388 	.word	0x00001388
 8005a70:	40021000 	.word	0x40021000
 8005a74:	fffff0ff 	.word	0xfffff0ff
 8005a78:	ffff8fff 	.word	0xffff8fff
 8005a7c:	08009dbc 	.word	0x08009dbc
 8005a80:	20000e84 	.word	0x20000e84
 8005a84:	20000e88 	.word	0x20000e88

08005a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a8e:	4b3c      	ldr	r3, [pc, #240]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	2238      	movs	r2, #56	@ 0x38
 8005a94:	4013      	ands	r3, r2
 8005a96:	d10f      	bne.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005a98:	4b39      	ldr	r3, [pc, #228]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	0adb      	lsrs	r3, r3, #11
 8005a9e:	2207      	movs	r2, #7
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	409a      	lsls	r2, r3
 8005aa6:	0013      	movs	r3, r2
 8005aa8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005aaa:	6839      	ldr	r1, [r7, #0]
 8005aac:	4835      	ldr	r0, [pc, #212]	@ (8005b84 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005aae:	f7fa fb3b 	bl	8000128 <__udivsi3>
 8005ab2:	0003      	movs	r3, r0
 8005ab4:	613b      	str	r3, [r7, #16]
 8005ab6:	e05d      	b.n	8005b74 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ab8:	4b31      	ldr	r3, [pc, #196]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	2238      	movs	r2, #56	@ 0x38
 8005abe:	4013      	ands	r3, r2
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	d102      	bne.n	8005aca <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ac4:	4b30      	ldr	r3, [pc, #192]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x100>)
 8005ac6:	613b      	str	r3, [r7, #16]
 8005ac8:	e054      	b.n	8005b74 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005aca:	4b2d      	ldr	r3, [pc, #180]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	2238      	movs	r2, #56	@ 0x38
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	2b10      	cmp	r3, #16
 8005ad4:	d138      	bne.n	8005b48 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	2203      	movs	r2, #3
 8005adc:	4013      	ands	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ae0:	4b27      	ldr	r3, [pc, #156]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	091b      	lsrs	r3, r3, #4
 8005ae6:	2207      	movs	r2, #7
 8005ae8:	4013      	ands	r3, r2
 8005aea:	3301      	adds	r3, #1
 8005aec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d10d      	bne.n	8005b10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	4824      	ldr	r0, [pc, #144]	@ (8005b88 <HAL_RCC_GetSysClockFreq+0x100>)
 8005af8:	f7fa fb16 	bl	8000128 <__udivsi3>
 8005afc:	0003      	movs	r3, r0
 8005afe:	0019      	movs	r1, r3
 8005b00:	4b1f      	ldr	r3, [pc, #124]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	0a1b      	lsrs	r3, r3, #8
 8005b06:	227f      	movs	r2, #127	@ 0x7f
 8005b08:	4013      	ands	r3, r2
 8005b0a:	434b      	muls	r3, r1
 8005b0c:	617b      	str	r3, [r7, #20]
        break;
 8005b0e:	e00d      	b.n	8005b2c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005b10:	68b9      	ldr	r1, [r7, #8]
 8005b12:	481c      	ldr	r0, [pc, #112]	@ (8005b84 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005b14:	f7fa fb08 	bl	8000128 <__udivsi3>
 8005b18:	0003      	movs	r3, r0
 8005b1a:	0019      	movs	r1, r3
 8005b1c:	4b18      	ldr	r3, [pc, #96]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	0a1b      	lsrs	r3, r3, #8
 8005b22:	227f      	movs	r2, #127	@ 0x7f
 8005b24:	4013      	ands	r3, r2
 8005b26:	434b      	muls	r3, r1
 8005b28:	617b      	str	r3, [r7, #20]
        break;
 8005b2a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005b2c:	4b14      	ldr	r3, [pc, #80]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	0f5b      	lsrs	r3, r3, #29
 8005b32:	2207      	movs	r2, #7
 8005b34:	4013      	ands	r3, r2
 8005b36:	3301      	adds	r3, #1
 8005b38:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005b3a:	6879      	ldr	r1, [r7, #4]
 8005b3c:	6978      	ldr	r0, [r7, #20]
 8005b3e:	f7fa faf3 	bl	8000128 <__udivsi3>
 8005b42:	0003      	movs	r3, r0
 8005b44:	613b      	str	r3, [r7, #16]
 8005b46:	e015      	b.n	8005b74 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005b48:	4b0d      	ldr	r3, [pc, #52]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	2238      	movs	r2, #56	@ 0x38
 8005b4e:	4013      	ands	r3, r2
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d103      	bne.n	8005b5c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005b54:	2380      	movs	r3, #128	@ 0x80
 8005b56:	021b      	lsls	r3, r3, #8
 8005b58:	613b      	str	r3, [r7, #16]
 8005b5a:	e00b      	b.n	8005b74 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005b5c:	4b08      	ldr	r3, [pc, #32]	@ (8005b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	2238      	movs	r2, #56	@ 0x38
 8005b62:	4013      	ands	r3, r2
 8005b64:	2b18      	cmp	r3, #24
 8005b66:	d103      	bne.n	8005b70 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005b68:	23fa      	movs	r3, #250	@ 0xfa
 8005b6a:	01db      	lsls	r3, r3, #7
 8005b6c:	613b      	str	r3, [r7, #16]
 8005b6e:	e001      	b.n	8005b74 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005b74:	693b      	ldr	r3, [r7, #16]
}
 8005b76:	0018      	movs	r0, r3
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	b006      	add	sp, #24
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	46c0      	nop			@ (mov r8, r8)
 8005b80:	40021000 	.word	0x40021000
 8005b84:	00f42400 	.word	0x00f42400
 8005b88:	007a1200 	.word	0x007a1200

08005b8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b90:	4b02      	ldr	r3, [pc, #8]	@ (8005b9c <HAL_RCC_GetHCLKFreq+0x10>)
 8005b92:	681b      	ldr	r3, [r3, #0]
}
 8005b94:	0018      	movs	r0, r3
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	46c0      	nop			@ (mov r8, r8)
 8005b9c:	20000e84 	.word	0x20000e84

08005ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ba0:	b5b0      	push	{r4, r5, r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005ba4:	f7ff fff2 	bl	8005b8c <HAL_RCC_GetHCLKFreq>
 8005ba8:	0004      	movs	r4, r0
 8005baa:	f7ff faf9 	bl	80051a0 <LL_RCC_GetAPB1Prescaler>
 8005bae:	0003      	movs	r3, r0
 8005bb0:	0b1a      	lsrs	r2, r3, #12
 8005bb2:	4b05      	ldr	r3, [pc, #20]	@ (8005bc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bb4:	0092      	lsls	r2, r2, #2
 8005bb6:	58d3      	ldr	r3, [r2, r3]
 8005bb8:	221f      	movs	r2, #31
 8005bba:	4013      	ands	r3, r2
 8005bbc:	40dc      	lsrs	r4, r3
 8005bbe:	0023      	movs	r3, r4
}
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bdb0      	pop	{r4, r5, r7, pc}
 8005bc6:	46c0      	nop			@ (mov r8, r8)
 8005bc8:	08009dfc 	.word	0x08009dfc

08005bcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005bd4:	2313      	movs	r3, #19
 8005bd6:	18fb      	adds	r3, r7, r3
 8005bd8:	2200      	movs	r2, #0
 8005bda:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bdc:	2312      	movs	r3, #18
 8005bde:	18fb      	adds	r3, r7, r3
 8005be0:	2200      	movs	r2, #0
 8005be2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	2380      	movs	r3, #128	@ 0x80
 8005bea:	029b      	lsls	r3, r3, #10
 8005bec:	4013      	ands	r3, r2
 8005bee:	d100      	bne.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005bf0:	e0ad      	b.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bf2:	2011      	movs	r0, #17
 8005bf4:	183b      	adds	r3, r7, r0
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bfa:	4b47      	ldr	r3, [pc, #284]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005bfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bfe:	2380      	movs	r3, #128	@ 0x80
 8005c00:	055b      	lsls	r3, r3, #21
 8005c02:	4013      	ands	r3, r2
 8005c04:	d110      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c06:	4b44      	ldr	r3, [pc, #272]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005c08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c0a:	4b43      	ldr	r3, [pc, #268]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005c0c:	2180      	movs	r1, #128	@ 0x80
 8005c0e:	0549      	lsls	r1, r1, #21
 8005c10:	430a      	orrs	r2, r1
 8005c12:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005c14:	4b40      	ldr	r3, [pc, #256]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005c16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c18:	2380      	movs	r3, #128	@ 0x80
 8005c1a:	055b      	lsls	r3, r3, #21
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	60bb      	str	r3, [r7, #8]
 8005c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c22:	183b      	adds	r3, r7, r0
 8005c24:	2201      	movs	r2, #1
 8005c26:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c28:	4b3c      	ldr	r3, [pc, #240]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	4b3b      	ldr	r3, [pc, #236]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005c2e:	2180      	movs	r1, #128	@ 0x80
 8005c30:	0049      	lsls	r1, r1, #1
 8005c32:	430a      	orrs	r2, r1
 8005c34:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c36:	f7fe f991 	bl	8003f5c <HAL_GetTick>
 8005c3a:	0003      	movs	r3, r0
 8005c3c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c3e:	e00b      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c40:	f7fe f98c 	bl	8003f5c <HAL_GetTick>
 8005c44:	0002      	movs	r2, r0
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d904      	bls.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005c4e:	2313      	movs	r3, #19
 8005c50:	18fb      	adds	r3, r7, r3
 8005c52:	2203      	movs	r2, #3
 8005c54:	701a      	strb	r2, [r3, #0]
        break;
 8005c56:	e005      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c58:	4b30      	ldr	r3, [pc, #192]	@ (8005d1c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	2380      	movs	r3, #128	@ 0x80
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	4013      	ands	r3, r2
 8005c62:	d0ed      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005c64:	2313      	movs	r3, #19
 8005c66:	18fb      	adds	r3, r7, r3
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d15e      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005c70:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c72:	23c0      	movs	r3, #192	@ 0xc0
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4013      	ands	r3, r2
 8005c78:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d019      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d014      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c8a:	4b23      	ldr	r3, [pc, #140]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c8e:	4a24      	ldr	r2, [pc, #144]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005c90:	4013      	ands	r3, r2
 8005c92:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c94:	4b20      	ldr	r3, [pc, #128]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005c96:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c98:	4b1f      	ldr	r3, [pc, #124]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005c9a:	2180      	movs	r1, #128	@ 0x80
 8005c9c:	0249      	lsls	r1, r1, #9
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005ca4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005ca8:	491e      	ldr	r1, [pc, #120]	@ (8005d24 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8005caa:	400a      	ands	r2, r1
 8005cac:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005cae:	4b1a      	ldr	r3, [pc, #104]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005cb0:	697a      	ldr	r2, [r7, #20]
 8005cb2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	4013      	ands	r3, r2
 8005cba:	d016      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cbc:	f7fe f94e 	bl	8003f5c <HAL_GetTick>
 8005cc0:	0003      	movs	r3, r0
 8005cc2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cc4:	e00c      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cc6:	f7fe f949 	bl	8003f5c <HAL_GetTick>
 8005cca:	0002      	movs	r2, r0
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	4a15      	ldr	r2, [pc, #84]	@ (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d904      	bls.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005cd6:	2313      	movs	r3, #19
 8005cd8:	18fb      	adds	r3, r7, r3
 8005cda:	2203      	movs	r2, #3
 8005cdc:	701a      	strb	r2, [r3, #0]
            break;
 8005cde:	e004      	b.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	d0ed      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005cea:	2313      	movs	r3, #19
 8005cec:	18fb      	adds	r3, r7, r3
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10a      	bne.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cf4:	4b08      	ldr	r3, [pc, #32]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cf8:	4a09      	ldr	r2, [pc, #36]	@ (8005d20 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	0019      	movs	r1, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d02:	4b05      	ldr	r3, [pc, #20]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005d04:	430a      	orrs	r2, r1
 8005d06:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005d08:	e016      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d0a:	2312      	movs	r3, #18
 8005d0c:	18fb      	adds	r3, r7, r3
 8005d0e:	2213      	movs	r2, #19
 8005d10:	18ba      	adds	r2, r7, r2
 8005d12:	7812      	ldrb	r2, [r2, #0]
 8005d14:	701a      	strb	r2, [r3, #0]
 8005d16:	e00f      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	40007000 	.word	0x40007000
 8005d20:	fffffcff 	.word	0xfffffcff
 8005d24:	fffeffff 	.word	0xfffeffff
 8005d28:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d2c:	2312      	movs	r3, #18
 8005d2e:	18fb      	adds	r3, r7, r3
 8005d30:	2213      	movs	r2, #19
 8005d32:	18ba      	adds	r2, r7, r2
 8005d34:	7812      	ldrb	r2, [r2, #0]
 8005d36:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d38:	2311      	movs	r3, #17
 8005d3a:	18fb      	adds	r3, r7, r3
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d105      	bne.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d42:	4bb6      	ldr	r3, [pc, #728]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d46:	4bb5      	ldr	r3, [pc, #724]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d48:	49b5      	ldr	r1, [pc, #724]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8005d4a:	400a      	ands	r2, r1
 8005d4c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2201      	movs	r2, #1
 8005d54:	4013      	ands	r3, r2
 8005d56:	d009      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d58:	4bb0      	ldr	r3, [pc, #704]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d5c:	2203      	movs	r2, #3
 8005d5e:	4393      	bics	r3, r2
 8005d60:	0019      	movs	r1, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	4bad      	ldr	r3, [pc, #692]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2202      	movs	r2, #2
 8005d72:	4013      	ands	r3, r2
 8005d74:	d009      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d76:	4ba9      	ldr	r3, [pc, #676]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d7a:	220c      	movs	r2, #12
 8005d7c:	4393      	bics	r3, r2
 8005d7e:	0019      	movs	r1, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	4ba5      	ldr	r3, [pc, #660]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d86:	430a      	orrs	r2, r1
 8005d88:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2204      	movs	r2, #4
 8005d90:	4013      	ands	r3, r2
 8005d92:	d009      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d94:	4ba1      	ldr	r3, [pc, #644]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d98:	2230      	movs	r2, #48	@ 0x30
 8005d9a:	4393      	bics	r3, r2
 8005d9c:	0019      	movs	r1, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	4b9e      	ldr	r3, [pc, #632]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005da4:	430a      	orrs	r2, r1
 8005da6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2210      	movs	r2, #16
 8005dae:	4013      	ands	r3, r2
 8005db0:	d009      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005db2:	4b9a      	ldr	r3, [pc, #616]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db6:	4a9b      	ldr	r2, [pc, #620]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	0019      	movs	r1, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	691a      	ldr	r2, [r3, #16]
 8005dc0:	4b96      	ldr	r3, [pc, #600]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	2380      	movs	r3, #128	@ 0x80
 8005dcc:	015b      	lsls	r3, r3, #5
 8005dce:	4013      	ands	r3, r2
 8005dd0:	d009      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8005dd2:	4b92      	ldr	r3, [pc, #584]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd6:	4a94      	ldr	r2, [pc, #592]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005dd8:	4013      	ands	r3, r2
 8005dda:	0019      	movs	r1, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	695a      	ldr	r2, [r3, #20]
 8005de0:	4b8e      	ldr	r3, [pc, #568]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005de2:	430a      	orrs	r2, r1
 8005de4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	2380      	movs	r3, #128	@ 0x80
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4013      	ands	r3, r2
 8005df0:	d009      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005df2:	4b8a      	ldr	r3, [pc, #552]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005df6:	4a8d      	ldr	r2, [pc, #564]	@ (800602c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005df8:	4013      	ands	r3, r2
 8005dfa:	0019      	movs	r1, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005e00:	4b86      	ldr	r3, [pc, #536]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e02:	430a      	orrs	r2, r1
 8005e04:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	2380      	movs	r3, #128	@ 0x80
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	4013      	ands	r3, r2
 8005e10:	d009      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e12:	4b82      	ldr	r3, [pc, #520]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e16:	4a86      	ldr	r2, [pc, #536]	@ (8006030 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8005e18:	4013      	ands	r3, r2
 8005e1a:	0019      	movs	r1, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e20:	4b7e      	ldr	r3, [pc, #504]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e22:	430a      	orrs	r2, r1
 8005e24:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	d009      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e30:	4b7a      	ldr	r3, [pc, #488]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e34:	4a7f      	ldr	r2, [pc, #508]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005e36:	4013      	ands	r3, r2
 8005e38:	0019      	movs	r1, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699a      	ldr	r2, [r3, #24]
 8005e3e:	4b77      	ldr	r3, [pc, #476]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e40:	430a      	orrs	r2, r1
 8005e42:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2240      	movs	r2, #64	@ 0x40
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	d009      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e4e:	4b73      	ldr	r3, [pc, #460]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e52:	4a79      	ldr	r2, [pc, #484]	@ (8006038 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005e54:	4013      	ands	r3, r2
 8005e56:	0019      	movs	r1, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	69da      	ldr	r2, [r3, #28]
 8005e5c:	4b6f      	ldr	r3, [pc, #444]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	2380      	movs	r3, #128	@ 0x80
 8005e68:	01db      	lsls	r3, r3, #7
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	d015      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e6e:	4b6b      	ldr	r3, [pc, #428]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	0899      	lsrs	r1, r3, #2
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e7a:	4b68      	ldr	r3, [pc, #416]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e84:	2380      	movs	r3, #128	@ 0x80
 8005e86:	05db      	lsls	r3, r3, #23
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d106      	bne.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005e8c:	4b63      	ldr	r3, [pc, #396]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e8e:	68da      	ldr	r2, [r3, #12]
 8005e90:	4b62      	ldr	r3, [pc, #392]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e92:	2180      	movs	r1, #128	@ 0x80
 8005e94:	0249      	lsls	r1, r1, #9
 8005e96:	430a      	orrs	r2, r1
 8005e98:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	2380      	movs	r3, #128	@ 0x80
 8005ea0:	031b      	lsls	r3, r3, #12
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	d009      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ea6:	4b5d      	ldr	r3, [pc, #372]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eaa:	2240      	movs	r2, #64	@ 0x40
 8005eac:	4393      	bics	r3, r2
 8005eae:	0019      	movs	r1, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005eb4:	4b59      	ldr	r3, [pc, #356]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	2380      	movs	r3, #128	@ 0x80
 8005ec0:	039b      	lsls	r3, r3, #14
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	d016      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005ec6:	4b55      	ldr	r3, [pc, #340]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eca:	4a5c      	ldr	r2, [pc, #368]	@ (800603c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	0019      	movs	r1, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ed4:	4b51      	ldr	r3, [pc, #324]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ede:	2380      	movs	r3, #128	@ 0x80
 8005ee0:	03db      	lsls	r3, r3, #15
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d106      	bne.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005ee6:	4b4d      	ldr	r3, [pc, #308]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	4b4c      	ldr	r3, [pc, #304]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005eec:	2180      	movs	r1, #128	@ 0x80
 8005eee:	0449      	lsls	r1, r1, #17
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	2380      	movs	r3, #128	@ 0x80
 8005efa:	03db      	lsls	r3, r3, #15
 8005efc:	4013      	ands	r3, r2
 8005efe:	d016      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005f00:	4b46      	ldr	r3, [pc, #280]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f04:	4a4e      	ldr	r2, [pc, #312]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005f06:	4013      	ands	r3, r2
 8005f08:	0019      	movs	r1, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f0e:	4b43      	ldr	r3, [pc, #268]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f10:	430a      	orrs	r2, r1
 8005f12:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f18:	2380      	movs	r3, #128	@ 0x80
 8005f1a:	045b      	lsls	r3, r3, #17
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d106      	bne.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005f20:	4b3e      	ldr	r3, [pc, #248]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f22:	68da      	ldr	r2, [r3, #12]
 8005f24:	4b3d      	ldr	r3, [pc, #244]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f26:	2180      	movs	r1, #128	@ 0x80
 8005f28:	0449      	lsls	r1, r1, #17
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	2380      	movs	r3, #128	@ 0x80
 8005f34:	011b      	lsls	r3, r3, #4
 8005f36:	4013      	ands	r3, r2
 8005f38:	d014      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005f3a:	4b38      	ldr	r3, [pc, #224]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f3e:	2203      	movs	r2, #3
 8005f40:	4393      	bics	r3, r2
 8005f42:	0019      	movs	r1, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a1a      	ldr	r2, [r3, #32]
 8005f48:	4b34      	ldr	r3, [pc, #208]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d106      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005f56:	4b31      	ldr	r3, [pc, #196]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	4b30      	ldr	r3, [pc, #192]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f5c:	2180      	movs	r1, #128	@ 0x80
 8005f5e:	0249      	lsls	r1, r1, #9
 8005f60:	430a      	orrs	r2, r1
 8005f62:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	2380      	movs	r3, #128	@ 0x80
 8005f6a:	019b      	lsls	r3, r3, #6
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	d014      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005f70:	4b2a      	ldr	r3, [pc, #168]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f74:	220c      	movs	r2, #12
 8005f76:	4393      	bics	r3, r2
 8005f78:	0019      	movs	r1, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f7e:	4b27      	ldr	r3, [pc, #156]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f80:	430a      	orrs	r2, r1
 8005f82:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d106      	bne.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005f8c:	4b23      	ldr	r3, [pc, #140]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f8e:	68da      	ldr	r2, [r3, #12]
 8005f90:	4b22      	ldr	r3, [pc, #136]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f92:	2180      	movs	r1, #128	@ 0x80
 8005f94:	0249      	lsls	r1, r1, #9
 8005f96:	430a      	orrs	r2, r1
 8005f98:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	2380      	movs	r3, #128	@ 0x80
 8005fa0:	045b      	lsls	r3, r3, #17
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	d016      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005faa:	4a22      	ldr	r2, [pc, #136]	@ (8006034 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005fac:	4013      	ands	r3, r2
 8005fae:	0019      	movs	r1, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fb4:	4b19      	ldr	r3, [pc, #100]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fbe:	2380      	movs	r3, #128	@ 0x80
 8005fc0:	019b      	lsls	r3, r3, #6
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d106      	bne.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005fc6:	4b15      	ldr	r3, [pc, #84]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	4b14      	ldr	r3, [pc, #80]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005fcc:	2180      	movs	r1, #128	@ 0x80
 8005fce:	0449      	lsls	r1, r1, #17
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	2380      	movs	r3, #128	@ 0x80
 8005fda:	049b      	lsls	r3, r3, #18
 8005fdc:	4013      	ands	r3, r2
 8005fde:	d016      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fe4:	4a10      	ldr	r2, [pc, #64]	@ (8006028 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	0019      	movs	r1, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005fee:	4b0b      	ldr	r3, [pc, #44]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ff0:	430a      	orrs	r2, r1
 8005ff2:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ff8:	2380      	movs	r3, #128	@ 0x80
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d106      	bne.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006000:	4b06      	ldr	r3, [pc, #24]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006002:	68da      	ldr	r2, [r3, #12]
 8006004:	4b05      	ldr	r3, [pc, #20]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006006:	2180      	movs	r1, #128	@ 0x80
 8006008:	0449      	lsls	r1, r1, #17
 800600a:	430a      	orrs	r2, r1
 800600c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800600e:	2312      	movs	r3, #18
 8006010:	18fb      	adds	r3, r7, r3
 8006012:	781b      	ldrb	r3, [r3, #0]
}
 8006014:	0018      	movs	r0, r3
 8006016:	46bd      	mov	sp, r7
 8006018:	b006      	add	sp, #24
 800601a:	bd80      	pop	{r7, pc}
 800601c:	40021000 	.word	0x40021000
 8006020:	efffffff 	.word	0xefffffff
 8006024:	fffff3ff 	.word	0xfffff3ff
 8006028:	fffffcff 	.word	0xfffffcff
 800602c:	fff3ffff 	.word	0xfff3ffff
 8006030:	ffcfffff 	.word	0xffcfffff
 8006034:	ffffcfff 	.word	0xffffcfff
 8006038:	ffff3fff 	.word	0xffff3fff
 800603c:	ffbfffff 	.word	0xffbfffff
 8006040:	feffffff 	.word	0xfeffffff

08006044 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006044:	b590      	push	{r4, r7, lr}
 8006046:	b089      	sub	sp, #36	@ 0x24
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2228      	movs	r2, #40	@ 0x28
 8006054:	5c9b      	ldrb	r3, [r3, r2]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d101      	bne.n	800605e <HAL_RTC_SetAlarm_IT+0x1a>
 800605a:	2302      	movs	r3, #2
 800605c:	e127      	b.n	80062ae <HAL_RTC_SetAlarm_IT+0x26a>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2228      	movs	r2, #40	@ 0x28
 8006062:	2101      	movs	r1, #1
 8006064:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2229      	movs	r2, #41	@ 0x29
 800606a:	2102      	movs	r1, #2
 800606c:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d136      	bne.n	80060e2 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	2240      	movs	r2, #64	@ 0x40
 800607c:	4013      	ands	r3, r2
 800607e:	d102      	bne.n	8006086 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2200      	movs	r2, #0
 8006084:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	0018      	movs	r0, r3
 800608c:	f000 fa1e 	bl	80064cc <RTC_ByteToBcd2>
 8006090:	0003      	movs	r3, r0
 8006092:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	785b      	ldrb	r3, [r3, #1]
 8006098:	0018      	movs	r0, r3
 800609a:	f000 fa17 	bl	80064cc <RTC_ByteToBcd2>
 800609e:	0003      	movs	r3, r0
 80060a0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80060a2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	789b      	ldrb	r3, [r3, #2]
 80060a8:	0018      	movs	r0, r3
 80060aa:	f000 fa0f 	bl	80064cc <RTC_ByteToBcd2>
 80060ae:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80060b0:	0022      	movs	r2, r4
 80060b2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	78db      	ldrb	r3, [r3, #3]
 80060b8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80060ba:	431a      	orrs	r2, r3
 80060bc:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2220      	movs	r2, #32
 80060c2:	5c9b      	ldrb	r3, [r3, r2]
 80060c4:	0018      	movs	r0, r3
 80060c6:	f000 fa01 	bl	80064cc <RTC_ByteToBcd2>
 80060ca:	0003      	movs	r3, r0
 80060cc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80060ce:	0022      	movs	r2, r4
 80060d0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80060d6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80060dc:	4313      	orrs	r3, r2
 80060de:	61fb      	str	r3, [r7, #28]
 80060e0:	e022      	b.n	8006128 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	2240      	movs	r2, #64	@ 0x40
 80060ea:	4013      	ands	r3, r2
 80060ec:	d102      	bne.n	80060f4 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2200      	movs	r2, #0
 80060f2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	785b      	ldrb	r3, [r3, #1]
 80060fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006100:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006106:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	78db      	ldrb	r3, [r3, #3]
 800610c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800610e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2120      	movs	r1, #32
 8006114:	5c5b      	ldrb	r3, [r3, r1]
 8006116:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006118:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800611e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006124:	4313      	orrs	r3, r2
 8006126:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	4313      	orrs	r3, r2
 8006132:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	22ca      	movs	r2, #202	@ 0xca
 800613a:	625a      	str	r2, [r3, #36]	@ 0x24
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2253      	movs	r2, #83	@ 0x53
 8006142:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006148:	2380      	movs	r3, #128	@ 0x80
 800614a:	005b      	lsls	r3, r3, #1
 800614c:	429a      	cmp	r2, r3
 800614e:	d14c      	bne.n	80061ea <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	699a      	ldr	r2, [r3, #24]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4957      	ldr	r1, [pc, #348]	@ (80062b8 <HAL_RTC_SetAlarm_IT+0x274>)
 800615c:	400a      	ands	r2, r1
 800615e:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2101      	movs	r1, #1
 800616c:	430a      	orrs	r2, r1
 800616e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8006170:	f7fd fef4 	bl	8003f5c <HAL_GetTick>
 8006174:	0003      	movs	r3, r0
 8006176:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006178:	e016      	b.n	80061a8 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800617a:	f7fd feef 	bl	8003f5c <HAL_GetTick>
 800617e:	0002      	movs	r2, r0
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	1ad2      	subs	r2, r2, r3
 8006184:	23fa      	movs	r3, #250	@ 0xfa
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	429a      	cmp	r2, r3
 800618a:	d90d      	bls.n	80061a8 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	22ff      	movs	r2, #255	@ 0xff
 8006192:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2229      	movs	r2, #41	@ 0x29
 8006198:	2103      	movs	r1, #3
 800619a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2228      	movs	r2, #40	@ 0x28
 80061a0:	2100      	movs	r1, #0
 80061a2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e082      	b.n	80062ae <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	2201      	movs	r2, #1
 80061b0:	4013      	ands	r3, r2
 80061b2:	d0e2      	beq.n	800617a <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	69fa      	ldr	r2, [r7, #28]
 80061ba:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	699a      	ldr	r2, [r3, #24]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2180      	movs	r1, #128	@ 0x80
 80061d0:	0049      	lsls	r1, r1, #1
 80061d2:	430a      	orrs	r2, r1
 80061d4:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	699a      	ldr	r2, [r3, #24]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2180      	movs	r1, #128	@ 0x80
 80061e2:	0149      	lsls	r1, r1, #5
 80061e4:	430a      	orrs	r2, r1
 80061e6:	619a      	str	r2, [r3, #24]
 80061e8:	e04b      	b.n	8006282 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	699a      	ldr	r2, [r3, #24]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4931      	ldr	r1, [pc, #196]	@ (80062bc <HAL_RTC_SetAlarm_IT+0x278>)
 80061f6:	400a      	ands	r2, r1
 80061f8:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2102      	movs	r1, #2
 8006206:	430a      	orrs	r2, r1
 8006208:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 800620a:	f7fd fea7 	bl	8003f5c <HAL_GetTick>
 800620e:	0003      	movs	r3, r0
 8006210:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006212:	e016      	b.n	8006242 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006214:	f7fd fea2 	bl	8003f5c <HAL_GetTick>
 8006218:	0002      	movs	r2, r0
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	1ad2      	subs	r2, r2, r3
 800621e:	23fa      	movs	r3, #250	@ 0xfa
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	429a      	cmp	r2, r3
 8006224:	d90d      	bls.n	8006242 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	22ff      	movs	r2, #255	@ 0xff
 800622c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2229      	movs	r2, #41	@ 0x29
 8006232:	2103      	movs	r1, #3
 8006234:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2228      	movs	r2, #40	@ 0x28
 800623a:	2100      	movs	r1, #0
 800623c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e035      	b.n	80062ae <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	2202      	movs	r2, #2
 800624a:	4013      	ands	r3, r2
 800624c:	d0e2      	beq.n	8006214 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	69fa      	ldr	r2, [r7, #28]
 8006254:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	699a      	ldr	r2, [r3, #24]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2180      	movs	r1, #128	@ 0x80
 800626a:	0089      	lsls	r1, r1, #2
 800626c:	430a      	orrs	r2, r1
 800626e:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	699a      	ldr	r2, [r3, #24]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2180      	movs	r1, #128	@ 0x80
 800627c:	0189      	lsls	r1, r1, #6
 800627e:	430a      	orrs	r2, r1
 8006280:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006282:	4a0f      	ldr	r2, [pc, #60]	@ (80062c0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8006284:	2380      	movs	r3, #128	@ 0x80
 8006286:	58d3      	ldr	r3, [r2, r3]
 8006288:	490d      	ldr	r1, [pc, #52]	@ (80062c0 <HAL_RTC_SetAlarm_IT+0x27c>)
 800628a:	2280      	movs	r2, #128	@ 0x80
 800628c:	0312      	lsls	r2, r2, #12
 800628e:	4313      	orrs	r3, r2
 8006290:	2280      	movs	r2, #128	@ 0x80
 8006292:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	22ff      	movs	r2, #255	@ 0xff
 800629a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2229      	movs	r2, #41	@ 0x29
 80062a0:	2101      	movs	r1, #1
 80062a2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2228      	movs	r2, #40	@ 0x28
 80062a8:	2100      	movs	r1, #0
 80062aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	0018      	movs	r0, r3
 80062b0:	46bd      	mov	sp, r7
 80062b2:	b009      	add	sp, #36	@ 0x24
 80062b4:	bd90      	pop	{r4, r7, pc}
 80062b6:	46c0      	nop			@ (mov r8, r8)
 80062b8:	fffffeff 	.word	0xfffffeff
 80062bc:	fffffdff 	.word	0xfffffdff
 80062c0:	40021800 	.word	0x40021800

080062c4 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
 80062d0:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	2380      	movs	r3, #128	@ 0x80
 80062d6:	005b      	lsls	r3, r3, #1
 80062d8:	429a      	cmp	r2, r3
 80062da:	d144      	bne.n	8006366 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2280      	movs	r2, #128	@ 0x80
 80062e0:	0052      	lsls	r2, r2, #1
 80062e2:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ea:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f2:	045b      	lsls	r3, r3, #17
 80062f4:	0c5b      	lsrs	r3, r3, #17
 80062f6:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	0c1b      	lsrs	r3, r3, #16
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	223f      	movs	r2, #63	@ 0x3f
 8006300:	4013      	ands	r3, r2
 8006302:	b2da      	uxtb	r2, r3
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	0a1b      	lsrs	r3, r3, #8
 800630c:	b2db      	uxtb	r3, r3
 800630e:	227f      	movs	r2, #127	@ 0x7f
 8006310:	4013      	ands	r3, r2
 8006312:	b2da      	uxtb	r2, r3
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	b2db      	uxtb	r3, r3
 800631c:	227f      	movs	r2, #127	@ 0x7f
 800631e:	4013      	ands	r3, r2
 8006320:	b2da      	uxtb	r2, r3
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	0d9b      	lsrs	r3, r3, #22
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2201      	movs	r2, #1
 800632e:	4013      	ands	r3, r2
 8006330:	b2da      	uxtb	r2, r3
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	0e1b      	lsrs	r3, r3, #24
 8006340:	b2db      	uxtb	r3, r3
 8006342:	223f      	movs	r2, #63	@ 0x3f
 8006344:	4013      	ands	r3, r2
 8006346:	b2d9      	uxtb	r1, r3
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	2220      	movs	r2, #32
 800634c:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	2380      	movs	r3, #128	@ 0x80
 8006352:	05db      	lsls	r3, r3, #23
 8006354:	401a      	ands	r2, r3
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	4a3b      	ldr	r2, [pc, #236]	@ (800644c <HAL_RTC_GetAlarm+0x188>)
 800635e:	401a      	ands	r2, r3
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	615a      	str	r2, [r3, #20]
 8006364:	e043      	b.n	80063ee <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2280      	movs	r2, #128	@ 0x80
 800636a:	0092      	lsls	r2, r2, #2
 800636c:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006374:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800637c:	045b      	lsls	r3, r3, #17
 800637e:	0c5b      	lsrs	r3, r3, #17
 8006380:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	0c1b      	lsrs	r3, r3, #16
 8006386:	b2db      	uxtb	r3, r3
 8006388:	223f      	movs	r2, #63	@ 0x3f
 800638a:	4013      	ands	r3, r2
 800638c:	b2da      	uxtb	r2, r3
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	0a1b      	lsrs	r3, r3, #8
 8006396:	b2db      	uxtb	r3, r3
 8006398:	227f      	movs	r2, #127	@ 0x7f
 800639a:	4013      	ands	r3, r2
 800639c:	b2da      	uxtb	r2, r3
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	227f      	movs	r2, #127	@ 0x7f
 80063a8:	4013      	ands	r3, r2
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	0d9b      	lsrs	r3, r3, #22
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2201      	movs	r2, #1
 80063b8:	4013      	ands	r3, r2
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	0e1b      	lsrs	r3, r3, #24
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	223f      	movs	r2, #63	@ 0x3f
 80063ce:	4013      	ands	r3, r2
 80063d0:	b2d9      	uxtb	r1, r3
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2220      	movs	r2, #32
 80063d6:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	2380      	movs	r3, #128	@ 0x80
 80063dc:	05db      	lsls	r3, r3, #23
 80063de:	401a      	ands	r2, r3
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	4a19      	ldr	r2, [pc, #100]	@ (800644c <HAL_RTC_GetAlarm+0x188>)
 80063e8:	401a      	ands	r2, r3
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d125      	bne.n	8006440 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	0018      	movs	r0, r3
 80063fa:	f000 f88f 	bl	800651c <RTC_Bcd2ToByte>
 80063fe:	0003      	movs	r3, r0
 8006400:	001a      	movs	r2, r3
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	785b      	ldrb	r3, [r3, #1]
 800640a:	0018      	movs	r0, r3
 800640c:	f000 f886 	bl	800651c <RTC_Bcd2ToByte>
 8006410:	0003      	movs	r3, r0
 8006412:	001a      	movs	r2, r3
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	789b      	ldrb	r3, [r3, #2]
 800641c:	0018      	movs	r0, r3
 800641e:	f000 f87d 	bl	800651c <RTC_Bcd2ToByte>
 8006422:	0003      	movs	r3, r0
 8006424:	001a      	movs	r2, r3
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2220      	movs	r2, #32
 800642e:	5c9b      	ldrb	r3, [r3, r2]
 8006430:	0018      	movs	r0, r3
 8006432:	f000 f873 	bl	800651c <RTC_Bcd2ToByte>
 8006436:	0003      	movs	r3, r0
 8006438:	0019      	movs	r1, r3
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2220      	movs	r2, #32
 800643e:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	0018      	movs	r0, r3
 8006444:	46bd      	mov	sp, r7
 8006446:	b006      	add	sp, #24
 8006448:	bd80      	pop	{r7, pc}
 800644a:	46c0      	nop			@ (mov r8, r8)
 800644c:	80808080 	.word	0x80808080

08006450 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699a      	ldr	r2, [r3, #24]
 800645e:	2380      	movs	r3, #128	@ 0x80
 8006460:	015b      	lsls	r3, r3, #5
 8006462:	4013      	ands	r3, r2
 8006464:	d011      	beq.n	800648a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800646c:	2201      	movs	r2, #1
 800646e:	4013      	ands	r3, r2
 8006470:	d00b      	beq.n	800648a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2101      	movs	r1, #1
 800647e:	430a      	orrs	r2, r1
 8006480:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	0018      	movs	r0, r3
 8006486:	f7fd fa1f 	bl	80038c8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	699a      	ldr	r2, [r3, #24]
 8006490:	2380      	movs	r3, #128	@ 0x80
 8006492:	019b      	lsls	r3, r3, #6
 8006494:	4013      	ands	r3, r2
 8006496:	d011      	beq.n	80064bc <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800649e:	2202      	movs	r2, #2
 80064a0:	4013      	ands	r3, r2
 80064a2:	d00b      	beq.n	80064bc <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2102      	movs	r1, #2
 80064b0:	430a      	orrs	r2, r1
 80064b2:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	0018      	movs	r0, r3
 80064b8:	f000 f873 	bl	80065a2 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2229      	movs	r2, #41	@ 0x29
 80064c0:	2101      	movs	r1, #1
 80064c2:	5499      	strb	r1, [r3, r2]
}
 80064c4:	46c0      	nop			@ (mov r8, r8)
 80064c6:	46bd      	mov	sp, r7
 80064c8:	b002      	add	sp, #8
 80064ca:	bd80      	pop	{r7, pc}

080064cc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	0002      	movs	r2, r0
 80064d4:	1dfb      	adds	r3, r7, #7
 80064d6:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80064dc:	230b      	movs	r3, #11
 80064de:	18fb      	adds	r3, r7, r3
 80064e0:	1dfa      	adds	r2, r7, #7
 80064e2:	7812      	ldrb	r2, [r2, #0]
 80064e4:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80064e6:	e008      	b.n	80064fa <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	3301      	adds	r3, #1
 80064ec:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80064ee:	220b      	movs	r2, #11
 80064f0:	18bb      	adds	r3, r7, r2
 80064f2:	18ba      	adds	r2, r7, r2
 80064f4:	7812      	ldrb	r2, [r2, #0]
 80064f6:	3a0a      	subs	r2, #10
 80064f8:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80064fa:	210b      	movs	r1, #11
 80064fc:	187b      	adds	r3, r7, r1
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	2b09      	cmp	r3, #9
 8006502:	d8f1      	bhi.n	80064e8 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	b2db      	uxtb	r3, r3
 8006508:	011b      	lsls	r3, r3, #4
 800650a:	b2da      	uxtb	r2, r3
 800650c:	187b      	adds	r3, r7, r1
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	4313      	orrs	r3, r2
 8006512:	b2db      	uxtb	r3, r3
}
 8006514:	0018      	movs	r0, r3
 8006516:	46bd      	mov	sp, r7
 8006518:	b004      	add	sp, #16
 800651a:	bd80      	pop	{r7, pc}

0800651c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	0002      	movs	r2, r0
 8006524:	1dfb      	adds	r3, r7, #7
 8006526:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006528:	1dfb      	adds	r3, r7, #7
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	091b      	lsrs	r3, r3, #4
 800652e:	b2db      	uxtb	r3, r3
 8006530:	001a      	movs	r2, r3
 8006532:	0013      	movs	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	189b      	adds	r3, r3, r2
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	b2da      	uxtb	r2, r3
 8006540:	1dfb      	adds	r3, r7, #7
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	210f      	movs	r1, #15
 8006546:	400b      	ands	r3, r1
 8006548:	b2db      	uxtb	r3, r3
 800654a:	18d3      	adds	r3, r2, r3
 800654c:	b2db      	uxtb	r3, r3
}
 800654e:	0018      	movs	r0, r3
 8006550:	46bd      	mov	sp, r7
 8006552:	b004      	add	sp, #16
 8006554:	bd80      	pop	{r7, pc}

08006556 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b082      	sub	sp, #8
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006564:	2204      	movs	r2, #4
 8006566:	4013      	ands	r3, r2
 8006568:	d00b      	beq.n	8006582 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2104      	movs	r1, #4
 8006576:	430a      	orrs	r2, r1
 8006578:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	0018      	movs	r0, r3
 800657e:	f000 f808 	bl	8006592 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2229      	movs	r2, #41	@ 0x29
 8006586:	2101      	movs	r1, #1
 8006588:	5499      	strb	r1, [r3, r2]
}
 800658a:	46c0      	nop			@ (mov r8, r8)
 800658c:	46bd      	mov	sp, r7
 800658e:	b002      	add	sp, #8
 8006590:	bd80      	pop	{r7, pc}

08006592 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b082      	sub	sp, #8
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800659a:	46c0      	nop			@ (mov r8, r8)
 800659c:	46bd      	mov	sp, r7
 800659e:	b002      	add	sp, #8
 80065a0:	bd80      	pop	{r7, pc}

080065a2 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b082      	sub	sp, #8
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80065aa:	46c0      	nop			@ (mov r8, r8)
 80065ac:	46bd      	mov	sp, r7
 80065ae:	b002      	add	sp, #8
 80065b0:	bd80      	pop	{r7, pc}
	...

080065b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e0a8      	b.n	8006718 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d109      	bne.n	80065e2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	2382      	movs	r3, #130	@ 0x82
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d009      	beq.n	80065ee <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	61da      	str	r2, [r3, #28]
 80065e0:	e005      	b.n	80065ee <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	225d      	movs	r2, #93	@ 0x5d
 80065f8:	5c9b      	ldrb	r3, [r3, r2]
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d107      	bne.n	8006610 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	225c      	movs	r2, #92	@ 0x5c
 8006604:	2100      	movs	r1, #0
 8006606:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	0018      	movs	r0, r3
 800660c:	f7fd fa26 	bl	8003a5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	225d      	movs	r2, #93	@ 0x5d
 8006614:	2102      	movs	r1, #2
 8006616:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2140      	movs	r1, #64	@ 0x40
 8006624:	438a      	bics	r2, r1
 8006626:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68da      	ldr	r2, [r3, #12]
 800662c:	23e0      	movs	r3, #224	@ 0xe0
 800662e:	00db      	lsls	r3, r3, #3
 8006630:	429a      	cmp	r2, r3
 8006632:	d902      	bls.n	800663a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006634:	2300      	movs	r3, #0
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	e002      	b.n	8006640 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800663a:	2380      	movs	r3, #128	@ 0x80
 800663c:	015b      	lsls	r3, r3, #5
 800663e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68da      	ldr	r2, [r3, #12]
 8006644:	23f0      	movs	r3, #240	@ 0xf0
 8006646:	011b      	lsls	r3, r3, #4
 8006648:	429a      	cmp	r2, r3
 800664a:	d008      	beq.n	800665e <HAL_SPI_Init+0xaa>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68da      	ldr	r2, [r3, #12]
 8006650:	23e0      	movs	r3, #224	@ 0xe0
 8006652:	00db      	lsls	r3, r3, #3
 8006654:	429a      	cmp	r2, r3
 8006656:	d002      	beq.n	800665e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	2382      	movs	r3, #130	@ 0x82
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	401a      	ands	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6899      	ldr	r1, [r3, #8]
 800666c:	2384      	movs	r3, #132	@ 0x84
 800666e:	021b      	lsls	r3, r3, #8
 8006670:	400b      	ands	r3, r1
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	2102      	movs	r1, #2
 800667a:	400b      	ands	r3, r1
 800667c:	431a      	orrs	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	2101      	movs	r1, #1
 8006684:	400b      	ands	r3, r1
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6999      	ldr	r1, [r3, #24]
 800668c:	2380      	movs	r3, #128	@ 0x80
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	400b      	ands	r3, r1
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	69db      	ldr	r3, [r3, #28]
 8006698:	2138      	movs	r1, #56	@ 0x38
 800669a:	400b      	ands	r3, r1
 800669c:	431a      	orrs	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	2180      	movs	r1, #128	@ 0x80
 80066a4:	400b      	ands	r3, r1
 80066a6:	431a      	orrs	r2, r3
 80066a8:	0011      	movs	r1, r2
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066ae:	2380      	movs	r3, #128	@ 0x80
 80066b0:	019b      	lsls	r3, r3, #6
 80066b2:	401a      	ands	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	0c1b      	lsrs	r3, r3, #16
 80066c2:	2204      	movs	r2, #4
 80066c4:	401a      	ands	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ca:	2110      	movs	r1, #16
 80066cc:	400b      	ands	r3, r1
 80066ce:	431a      	orrs	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066d4:	2108      	movs	r1, #8
 80066d6:	400b      	ands	r3, r1
 80066d8:	431a      	orrs	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68d9      	ldr	r1, [r3, #12]
 80066de:	23f0      	movs	r3, #240	@ 0xf0
 80066e0:	011b      	lsls	r3, r3, #4
 80066e2:	400b      	ands	r3, r1
 80066e4:	431a      	orrs	r2, r3
 80066e6:	0011      	movs	r1, r2
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	2380      	movs	r3, #128	@ 0x80
 80066ec:	015b      	lsls	r3, r3, #5
 80066ee:	401a      	ands	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	69da      	ldr	r2, [r3, #28]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4907      	ldr	r1, [pc, #28]	@ (8006720 <HAL_SPI_Init+0x16c>)
 8006704:	400a      	ands	r2, r1
 8006706:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	225d      	movs	r2, #93	@ 0x5d
 8006712:	2101      	movs	r1, #1
 8006714:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	0018      	movs	r0, r3
 800671a:	46bd      	mov	sp, r7
 800671c:	b004      	add	sp, #16
 800671e:	bd80      	pop	{r7, pc}
 8006720:	fffff7ff 	.word	0xfffff7ff

08006724 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b088      	sub	sp, #32
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	1dbb      	adds	r3, r7, #6
 8006732:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006734:	231f      	movs	r3, #31
 8006736:	18fb      	adds	r3, r7, r3
 8006738:	2200      	movs	r2, #0
 800673a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	225c      	movs	r2, #92	@ 0x5c
 8006740:	5c9b      	ldrb	r3, [r3, r2]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d101      	bne.n	800674a <HAL_SPI_Transmit+0x26>
 8006746:	2302      	movs	r3, #2
 8006748:	e147      	b.n	80069da <HAL_SPI_Transmit+0x2b6>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	225c      	movs	r2, #92	@ 0x5c
 800674e:	2101      	movs	r1, #1
 8006750:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006752:	f7fd fc03 	bl	8003f5c <HAL_GetTick>
 8006756:	0003      	movs	r3, r0
 8006758:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800675a:	2316      	movs	r3, #22
 800675c:	18fb      	adds	r3, r7, r3
 800675e:	1dba      	adds	r2, r7, #6
 8006760:	8812      	ldrh	r2, [r2, #0]
 8006762:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	225d      	movs	r2, #93	@ 0x5d
 8006768:	5c9b      	ldrb	r3, [r3, r2]
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b01      	cmp	r3, #1
 800676e:	d004      	beq.n	800677a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006770:	231f      	movs	r3, #31
 8006772:	18fb      	adds	r3, r7, r3
 8006774:	2202      	movs	r2, #2
 8006776:	701a      	strb	r2, [r3, #0]
    goto error;
 8006778:	e128      	b.n	80069cc <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <HAL_SPI_Transmit+0x64>
 8006780:	1dbb      	adds	r3, r7, #6
 8006782:	881b      	ldrh	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d104      	bne.n	8006792 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006788:	231f      	movs	r3, #31
 800678a:	18fb      	adds	r3, r7, r3
 800678c:	2201      	movs	r2, #1
 800678e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006790:	e11c      	b.n	80069cc <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	225d      	movs	r2, #93	@ 0x5d
 8006796:	2103      	movs	r1, #3
 8006798:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	1dba      	adds	r2, r7, #6
 80067aa:	8812      	ldrh	r2, [r2, #0]
 80067ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	1dba      	adds	r2, r7, #6
 80067b2:	8812      	ldrh	r2, [r2, #0]
 80067b4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2244      	movs	r2, #68	@ 0x44
 80067c0:	2100      	movs	r1, #0
 80067c2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2246      	movs	r2, #70	@ 0x46
 80067c8:	2100      	movs	r1, #0
 80067ca:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	689a      	ldr	r2, [r3, #8]
 80067dc:	2380      	movs	r3, #128	@ 0x80
 80067de:	021b      	lsls	r3, r3, #8
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d110      	bne.n	8006806 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2140      	movs	r1, #64	@ 0x40
 80067f0:	438a      	bics	r2, r1
 80067f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2180      	movs	r1, #128	@ 0x80
 8006800:	01c9      	lsls	r1, r1, #7
 8006802:	430a      	orrs	r2, r1
 8006804:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2240      	movs	r2, #64	@ 0x40
 800680e:	4013      	ands	r3, r2
 8006810:	2b40      	cmp	r3, #64	@ 0x40
 8006812:	d007      	beq.n	8006824 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2140      	movs	r1, #64	@ 0x40
 8006820:	430a      	orrs	r2, r1
 8006822:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	68da      	ldr	r2, [r3, #12]
 8006828:	23e0      	movs	r3, #224	@ 0xe0
 800682a:	00db      	lsls	r3, r3, #3
 800682c:	429a      	cmp	r2, r3
 800682e:	d952      	bls.n	80068d6 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d004      	beq.n	8006842 <HAL_SPI_Transmit+0x11e>
 8006838:	2316      	movs	r3, #22
 800683a:	18fb      	adds	r3, r7, r3
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d143      	bne.n	80068ca <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006846:	881a      	ldrh	r2, [r3, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006852:	1c9a      	adds	r2, r3, #2
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800685c:	b29b      	uxth	r3, r3
 800685e:	3b01      	subs	r3, #1
 8006860:	b29a      	uxth	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006866:	e030      	b.n	80068ca <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	2202      	movs	r2, #2
 8006870:	4013      	ands	r3, r2
 8006872:	2b02      	cmp	r3, #2
 8006874:	d112      	bne.n	800689c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800687a:	881a      	ldrh	r2, [r3, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006886:	1c9a      	adds	r2, r3, #2
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006890:	b29b      	uxth	r3, r3
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800689a:	e016      	b.n	80068ca <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800689c:	f7fd fb5e 	bl	8003f5c <HAL_GetTick>
 80068a0:	0002      	movs	r2, r0
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d802      	bhi.n	80068b2 <HAL_SPI_Transmit+0x18e>
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	3301      	adds	r3, #1
 80068b0:	d102      	bne.n	80068b8 <HAL_SPI_Transmit+0x194>
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d108      	bne.n	80068ca <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80068b8:	231f      	movs	r3, #31
 80068ba:	18fb      	adds	r3, r7, r3
 80068bc:	2203      	movs	r2, #3
 80068be:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	225d      	movs	r2, #93	@ 0x5d
 80068c4:	2101      	movs	r1, #1
 80068c6:	5499      	strb	r1, [r3, r2]
          goto error;
 80068c8:	e080      	b.n	80069cc <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1c9      	bne.n	8006868 <HAL_SPI_Transmit+0x144>
 80068d4:	e053      	b.n	800697e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d004      	beq.n	80068e8 <HAL_SPI_Transmit+0x1c4>
 80068de:	2316      	movs	r3, #22
 80068e0:	18fb      	adds	r3, r7, r3
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d145      	bne.n	8006974 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	330c      	adds	r3, #12
 80068f2:	7812      	ldrb	r2, [r2, #0]
 80068f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068fa:	1c5a      	adds	r2, r3, #1
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006904:	b29b      	uxth	r3, r3
 8006906:	3b01      	subs	r3, #1
 8006908:	b29a      	uxth	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800690e:	e031      	b.n	8006974 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	2202      	movs	r2, #2
 8006918:	4013      	ands	r3, r2
 800691a:	2b02      	cmp	r3, #2
 800691c:	d113      	bne.n	8006946 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	330c      	adds	r3, #12
 8006928:	7812      	ldrb	r2, [r2, #0]
 800692a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800693a:	b29b      	uxth	r3, r3
 800693c:	3b01      	subs	r3, #1
 800693e:	b29a      	uxth	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006944:	e016      	b.n	8006974 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006946:	f7fd fb09 	bl	8003f5c <HAL_GetTick>
 800694a:	0002      	movs	r2, r0
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	429a      	cmp	r2, r3
 8006954:	d802      	bhi.n	800695c <HAL_SPI_Transmit+0x238>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	3301      	adds	r3, #1
 800695a:	d102      	bne.n	8006962 <HAL_SPI_Transmit+0x23e>
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d108      	bne.n	8006974 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8006962:	231f      	movs	r3, #31
 8006964:	18fb      	adds	r3, r7, r3
 8006966:	2203      	movs	r2, #3
 8006968:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	225d      	movs	r2, #93	@ 0x5d
 800696e:	2101      	movs	r1, #1
 8006970:	5499      	strb	r1, [r3, r2]
          goto error;
 8006972:	e02b      	b.n	80069cc <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006978:	b29b      	uxth	r3, r3
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1c8      	bne.n	8006910 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800697e:	69ba      	ldr	r2, [r7, #24]
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	0018      	movs	r0, r3
 8006986:	f000 f95d 	bl	8006c44 <SPI_EndRxTxTransaction>
 800698a:	1e03      	subs	r3, r0, #0
 800698c:	d002      	beq.n	8006994 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2220      	movs	r2, #32
 8006992:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10a      	bne.n	80069b2 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800699c:	2300      	movs	r3, #0
 800699e:	613b      	str	r3, [r7, #16]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	613b      	str	r3, [r7, #16]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	613b      	str	r3, [r7, #16]
 80069b0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d004      	beq.n	80069c4 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80069ba:	231f      	movs	r3, #31
 80069bc:	18fb      	adds	r3, r7, r3
 80069be:	2201      	movs	r2, #1
 80069c0:	701a      	strb	r2, [r3, #0]
 80069c2:	e003      	b.n	80069cc <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	225d      	movs	r2, #93	@ 0x5d
 80069c8:	2101      	movs	r1, #1
 80069ca:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	225c      	movs	r2, #92	@ 0x5c
 80069d0:	2100      	movs	r1, #0
 80069d2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80069d4:	231f      	movs	r3, #31
 80069d6:	18fb      	adds	r3, r7, r3
 80069d8:	781b      	ldrb	r3, [r3, #0]
}
 80069da:	0018      	movs	r0, r3
 80069dc:	46bd      	mov	sp, r7
 80069de:	b008      	add	sp, #32
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b088      	sub	sp, #32
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	603b      	str	r3, [r7, #0]
 80069f0:	1dfb      	adds	r3, r7, #7
 80069f2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069f4:	f7fd fab2 	bl	8003f5c <HAL_GetTick>
 80069f8:	0002      	movs	r2, r0
 80069fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069fc:	1a9b      	subs	r3, r3, r2
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	18d3      	adds	r3, r2, r3
 8006a02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a04:	f7fd faaa 	bl	8003f5c <HAL_GetTick>
 8006a08:	0003      	movs	r3, r0
 8006a0a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8006af8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	015b      	lsls	r3, r3, #5
 8006a12:	0d1b      	lsrs	r3, r3, #20
 8006a14:	69fa      	ldr	r2, [r7, #28]
 8006a16:	4353      	muls	r3, r2
 8006a18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a1a:	e058      	b.n	8006ace <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	d055      	beq.n	8006ace <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a22:	f7fd fa9b 	bl	8003f5c <HAL_GetTick>
 8006a26:	0002      	movs	r2, r0
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	69fa      	ldr	r2, [r7, #28]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d902      	bls.n	8006a38 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d142      	bne.n	8006abe <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	21e0      	movs	r1, #224	@ 0xe0
 8006a44:	438a      	bics	r2, r1
 8006a46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	2382      	movs	r3, #130	@ 0x82
 8006a4e:	005b      	lsls	r3, r3, #1
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d113      	bne.n	8006a7c <SPI_WaitFlagStateUntilTimeout+0x98>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	689a      	ldr	r2, [r3, #8]
 8006a58:	2380      	movs	r3, #128	@ 0x80
 8006a5a:	021b      	lsls	r3, r3, #8
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d005      	beq.n	8006a6c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	689a      	ldr	r2, [r3, #8]
 8006a64:	2380      	movs	r3, #128	@ 0x80
 8006a66:	00db      	lsls	r3, r3, #3
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d107      	bne.n	8006a7c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2140      	movs	r1, #64	@ 0x40
 8006a78:	438a      	bics	r2, r1
 8006a7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a80:	2380      	movs	r3, #128	@ 0x80
 8006a82:	019b      	lsls	r3, r3, #6
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d110      	bne.n	8006aaa <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	491a      	ldr	r1, [pc, #104]	@ (8006afc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006a94:	400a      	ands	r2, r1
 8006a96:	601a      	str	r2, [r3, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2180      	movs	r1, #128	@ 0x80
 8006aa4:	0189      	lsls	r1, r1, #6
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	225d      	movs	r2, #93	@ 0x5d
 8006aae:	2101      	movs	r1, #1
 8006ab0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	225c      	movs	r2, #92	@ 0x5c
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e017      	b.n	8006aee <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	425a      	negs	r2, r3
 8006ade:	4153      	adcs	r3, r2
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	001a      	movs	r2, r3
 8006ae4:	1dfb      	adds	r3, r7, #7
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d197      	bne.n	8006a1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	0018      	movs	r0, r3
 8006af0:	46bd      	mov	sp, r7
 8006af2:	b008      	add	sp, #32
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	46c0      	nop			@ (mov r8, r8)
 8006af8:	20000e84 	.word	0x20000e84
 8006afc:	ffffdfff 	.word	0xffffdfff

08006b00 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08a      	sub	sp, #40	@ 0x28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
 8006b0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006b0e:	2317      	movs	r3, #23
 8006b10:	18fb      	adds	r3, r7, r3
 8006b12:	2200      	movs	r2, #0
 8006b14:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006b16:	f7fd fa21 	bl	8003f5c <HAL_GetTick>
 8006b1a:	0002      	movs	r2, r0
 8006b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1e:	1a9b      	subs	r3, r3, r2
 8006b20:	683a      	ldr	r2, [r7, #0]
 8006b22:	18d3      	adds	r3, r2, r3
 8006b24:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006b26:	f7fd fa19 	bl	8003f5c <HAL_GetTick>
 8006b2a:	0003      	movs	r3, r0
 8006b2c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	330c      	adds	r3, #12
 8006b34:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006b36:	4b41      	ldr	r3, [pc, #260]	@ (8006c3c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	0013      	movs	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	189b      	adds	r3, r3, r2
 8006b40:	00da      	lsls	r2, r3, #3
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	0d1b      	lsrs	r3, r3, #20
 8006b46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b48:	4353      	muls	r3, r2
 8006b4a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006b4c:	e068      	b.n	8006c20 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	23c0      	movs	r3, #192	@ 0xc0
 8006b52:	00db      	lsls	r3, r3, #3
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d10a      	bne.n	8006b6e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d107      	bne.n	8006b6e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	b2da      	uxtb	r2, r3
 8006b64:	2117      	movs	r1, #23
 8006b66:	187b      	adds	r3, r7, r1
 8006b68:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006b6a:	187b      	adds	r3, r7, r1
 8006b6c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	3301      	adds	r3, #1
 8006b72:	d055      	beq.n	8006c20 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b74:	f7fd f9f2 	bl	8003f5c <HAL_GetTick>
 8006b78:	0002      	movs	r2, r0
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d902      	bls.n	8006b8a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d142      	bne.n	8006c10 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	21e0      	movs	r1, #224	@ 0xe0
 8006b96:	438a      	bics	r2, r1
 8006b98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	2382      	movs	r3, #130	@ 0x82
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d113      	bne.n	8006bce <SPI_WaitFifoStateUntilTimeout+0xce>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	689a      	ldr	r2, [r3, #8]
 8006baa:	2380      	movs	r3, #128	@ 0x80
 8006bac:	021b      	lsls	r3, r3, #8
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d005      	beq.n	8006bbe <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	2380      	movs	r3, #128	@ 0x80
 8006bb8:	00db      	lsls	r3, r3, #3
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d107      	bne.n	8006bce <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2140      	movs	r1, #64	@ 0x40
 8006bca:	438a      	bics	r2, r1
 8006bcc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006bd2:	2380      	movs	r3, #128	@ 0x80
 8006bd4:	019b      	lsls	r3, r3, #6
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d110      	bne.n	8006bfc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4916      	ldr	r1, [pc, #88]	@ (8006c40 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006be6:	400a      	ands	r2, r1
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2180      	movs	r1, #128	@ 0x80
 8006bf6:	0189      	lsls	r1, r1, #6
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	225d      	movs	r2, #93	@ 0x5d
 8006c00:	2101      	movs	r1, #1
 8006c02:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	225c      	movs	r2, #92	@ 0x5c
 8006c08:	2100      	movs	r1, #0
 8006c0a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e010      	b.n	8006c32 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	4013      	ands	r3, r2
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d18e      	bne.n	8006b4e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	0018      	movs	r0, r3
 8006c34:	46bd      	mov	sp, r7
 8006c36:	b00a      	add	sp, #40	@ 0x28
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	46c0      	nop			@ (mov r8, r8)
 8006c3c:	20000e84 	.word	0x20000e84
 8006c40:	ffffdfff 	.word	0xffffdfff

08006c44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af02      	add	r7, sp, #8
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	23c0      	movs	r3, #192	@ 0xc0
 8006c54:	0159      	lsls	r1, r3, #5
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	0013      	movs	r3, r2
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f7ff ff4e 	bl	8006b00 <SPI_WaitFifoStateUntilTimeout>
 8006c64:	1e03      	subs	r3, r0, #0
 8006c66:	d007      	beq.n	8006c78 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	431a      	orrs	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e027      	b.n	8006cc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	0013      	movs	r3, r2
 8006c82:	2200      	movs	r2, #0
 8006c84:	2180      	movs	r1, #128	@ 0x80
 8006c86:	f7ff fead 	bl	80069e4 <SPI_WaitFlagStateUntilTimeout>
 8006c8a:	1e03      	subs	r3, r0, #0
 8006c8c:	d007      	beq.n	8006c9e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c92:	2220      	movs	r2, #32
 8006c94:	431a      	orrs	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e014      	b.n	8006cc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	23c0      	movs	r3, #192	@ 0xc0
 8006ca2:	00d9      	lsls	r1, r3, #3
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	0013      	movs	r3, r2
 8006cac:	2200      	movs	r2, #0
 8006cae:	f7ff ff27 	bl	8006b00 <SPI_WaitFifoStateUntilTimeout>
 8006cb2:	1e03      	subs	r3, r0, #0
 8006cb4:	d007      	beq.n	8006cc6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cba:	2220      	movs	r2, #32
 8006cbc:	431a      	orrs	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e000      	b.n	8006cc8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	0018      	movs	r0, r3
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	b004      	add	sp, #16
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e04a      	b.n	8006d78 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	223d      	movs	r2, #61	@ 0x3d
 8006ce6:	5c9b      	ldrb	r3, [r3, r2]
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d107      	bne.n	8006cfe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	223c      	movs	r2, #60	@ 0x3c
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	0018      	movs	r0, r3
 8006cfa:	f7fc ff1d 	bl	8003b38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	223d      	movs	r2, #61	@ 0x3d
 8006d02:	2102      	movs	r1, #2
 8006d04:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	0019      	movs	r1, r3
 8006d10:	0010      	movs	r0, r2
 8006d12:	f000 fb11 	bl	8007338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2248      	movs	r2, #72	@ 0x48
 8006d1a:	2101      	movs	r1, #1
 8006d1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	223e      	movs	r2, #62	@ 0x3e
 8006d22:	2101      	movs	r1, #1
 8006d24:	5499      	strb	r1, [r3, r2]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	223f      	movs	r2, #63	@ 0x3f
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	5499      	strb	r1, [r3, r2]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2240      	movs	r2, #64	@ 0x40
 8006d32:	2101      	movs	r1, #1
 8006d34:	5499      	strb	r1, [r3, r2]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2241      	movs	r2, #65	@ 0x41
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	5499      	strb	r1, [r3, r2]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2242      	movs	r2, #66	@ 0x42
 8006d42:	2101      	movs	r1, #1
 8006d44:	5499      	strb	r1, [r3, r2]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2243      	movs	r2, #67	@ 0x43
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2244      	movs	r2, #68	@ 0x44
 8006d52:	2101      	movs	r1, #1
 8006d54:	5499      	strb	r1, [r3, r2]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2245      	movs	r2, #69	@ 0x45
 8006d5a:	2101      	movs	r1, #1
 8006d5c:	5499      	strb	r1, [r3, r2]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2246      	movs	r2, #70	@ 0x46
 8006d62:	2101      	movs	r1, #1
 8006d64:	5499      	strb	r1, [r3, r2]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2247      	movs	r2, #71	@ 0x47
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	223d      	movs	r2, #61	@ 0x3d
 8006d72:	2101      	movs	r1, #1
 8006d74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	0018      	movs	r0, r3
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	b002      	add	sp, #8
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e04a      	b.n	8006e28 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	223d      	movs	r2, #61	@ 0x3d
 8006d96:	5c9b      	ldrb	r3, [r3, r2]
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d107      	bne.n	8006dae <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	223c      	movs	r2, #60	@ 0x3c
 8006da2:	2100      	movs	r1, #0
 8006da4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	0018      	movs	r0, r3
 8006daa:	f000 f841 	bl	8006e30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	223d      	movs	r2, #61	@ 0x3d
 8006db2:	2102      	movs	r1, #2
 8006db4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	0019      	movs	r1, r3
 8006dc0:	0010      	movs	r0, r2
 8006dc2:	f000 fab9 	bl	8007338 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2248      	movs	r2, #72	@ 0x48
 8006dca:	2101      	movs	r1, #1
 8006dcc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	223e      	movs	r2, #62	@ 0x3e
 8006dd2:	2101      	movs	r1, #1
 8006dd4:	5499      	strb	r1, [r3, r2]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	223f      	movs	r2, #63	@ 0x3f
 8006dda:	2101      	movs	r1, #1
 8006ddc:	5499      	strb	r1, [r3, r2]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2240      	movs	r2, #64	@ 0x40
 8006de2:	2101      	movs	r1, #1
 8006de4:	5499      	strb	r1, [r3, r2]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2241      	movs	r2, #65	@ 0x41
 8006dea:	2101      	movs	r1, #1
 8006dec:	5499      	strb	r1, [r3, r2]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2242      	movs	r2, #66	@ 0x42
 8006df2:	2101      	movs	r1, #1
 8006df4:	5499      	strb	r1, [r3, r2]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2243      	movs	r2, #67	@ 0x43
 8006dfa:	2101      	movs	r1, #1
 8006dfc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2244      	movs	r2, #68	@ 0x44
 8006e02:	2101      	movs	r1, #1
 8006e04:	5499      	strb	r1, [r3, r2]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2245      	movs	r2, #69	@ 0x45
 8006e0a:	2101      	movs	r1, #1
 8006e0c:	5499      	strb	r1, [r3, r2]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2246      	movs	r2, #70	@ 0x46
 8006e12:	2101      	movs	r1, #1
 8006e14:	5499      	strb	r1, [r3, r2]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2247      	movs	r2, #71	@ 0x47
 8006e1a:	2101      	movs	r1, #1
 8006e1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	223d      	movs	r2, #61	@ 0x3d
 8006e22:	2101      	movs	r1, #1
 8006e24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	0018      	movs	r0, r3
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	b002      	add	sp, #8
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e38:	46c0      	nop			@ (mov r8, r8)
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	b002      	add	sp, #8
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d108      	bne.n	8006e62 <HAL_TIM_PWM_Start+0x22>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	223e      	movs	r2, #62	@ 0x3e
 8006e54:	5c9b      	ldrb	r3, [r3, r2]
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	1e5a      	subs	r2, r3, #1
 8006e5c:	4193      	sbcs	r3, r2
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	e037      	b.n	8006ed2 <HAL_TIM_PWM_Start+0x92>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	d108      	bne.n	8006e7a <HAL_TIM_PWM_Start+0x3a>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	223f      	movs	r2, #63	@ 0x3f
 8006e6c:	5c9b      	ldrb	r3, [r3, r2]
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	3b01      	subs	r3, #1
 8006e72:	1e5a      	subs	r2, r3, #1
 8006e74:	4193      	sbcs	r3, r2
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	e02b      	b.n	8006ed2 <HAL_TIM_PWM_Start+0x92>
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b08      	cmp	r3, #8
 8006e7e:	d108      	bne.n	8006e92 <HAL_TIM_PWM_Start+0x52>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2240      	movs	r2, #64	@ 0x40
 8006e84:	5c9b      	ldrb	r3, [r3, r2]
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	1e5a      	subs	r2, r3, #1
 8006e8c:	4193      	sbcs	r3, r2
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	e01f      	b.n	8006ed2 <HAL_TIM_PWM_Start+0x92>
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	2b0c      	cmp	r3, #12
 8006e96:	d108      	bne.n	8006eaa <HAL_TIM_PWM_Start+0x6a>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2241      	movs	r2, #65	@ 0x41
 8006e9c:	5c9b      	ldrb	r3, [r3, r2]
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	1e5a      	subs	r2, r3, #1
 8006ea4:	4193      	sbcs	r3, r2
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	e013      	b.n	8006ed2 <HAL_TIM_PWM_Start+0x92>
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b10      	cmp	r3, #16
 8006eae:	d108      	bne.n	8006ec2 <HAL_TIM_PWM_Start+0x82>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2242      	movs	r2, #66	@ 0x42
 8006eb4:	5c9b      	ldrb	r3, [r3, r2]
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	1e5a      	subs	r2, r3, #1
 8006ebc:	4193      	sbcs	r3, r2
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	e007      	b.n	8006ed2 <HAL_TIM_PWM_Start+0x92>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2243      	movs	r2, #67	@ 0x43
 8006ec6:	5c9b      	ldrb	r3, [r3, r2]
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	1e5a      	subs	r2, r3, #1
 8006ece:	4193      	sbcs	r3, r2
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d001      	beq.n	8006eda <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e090      	b.n	8006ffc <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d104      	bne.n	8006eea <HAL_TIM_PWM_Start+0xaa>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	223e      	movs	r2, #62	@ 0x3e
 8006ee4:	2102      	movs	r1, #2
 8006ee6:	5499      	strb	r1, [r3, r2]
 8006ee8:	e023      	b.n	8006f32 <HAL_TIM_PWM_Start+0xf2>
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b04      	cmp	r3, #4
 8006eee:	d104      	bne.n	8006efa <HAL_TIM_PWM_Start+0xba>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	223f      	movs	r2, #63	@ 0x3f
 8006ef4:	2102      	movs	r1, #2
 8006ef6:	5499      	strb	r1, [r3, r2]
 8006ef8:	e01b      	b.n	8006f32 <HAL_TIM_PWM_Start+0xf2>
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b08      	cmp	r3, #8
 8006efe:	d104      	bne.n	8006f0a <HAL_TIM_PWM_Start+0xca>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2240      	movs	r2, #64	@ 0x40
 8006f04:	2102      	movs	r1, #2
 8006f06:	5499      	strb	r1, [r3, r2]
 8006f08:	e013      	b.n	8006f32 <HAL_TIM_PWM_Start+0xf2>
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	2b0c      	cmp	r3, #12
 8006f0e:	d104      	bne.n	8006f1a <HAL_TIM_PWM_Start+0xda>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2241      	movs	r2, #65	@ 0x41
 8006f14:	2102      	movs	r1, #2
 8006f16:	5499      	strb	r1, [r3, r2]
 8006f18:	e00b      	b.n	8006f32 <HAL_TIM_PWM_Start+0xf2>
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b10      	cmp	r3, #16
 8006f1e:	d104      	bne.n	8006f2a <HAL_TIM_PWM_Start+0xea>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2242      	movs	r2, #66	@ 0x42
 8006f24:	2102      	movs	r1, #2
 8006f26:	5499      	strb	r1, [r3, r2]
 8006f28:	e003      	b.n	8006f32 <HAL_TIM_PWM_Start+0xf2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2243      	movs	r2, #67	@ 0x43
 8006f2e:	2102      	movs	r1, #2
 8006f30:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6839      	ldr	r1, [r7, #0]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	0018      	movs	r0, r3
 8006f3c:	f000 fd58 	bl	80079f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a2f      	ldr	r2, [pc, #188]	@ (8007004 <HAL_TIM_PWM_Start+0x1c4>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d00e      	beq.n	8006f68 <HAL_TIM_PWM_Start+0x128>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a2e      	ldr	r2, [pc, #184]	@ (8007008 <HAL_TIM_PWM_Start+0x1c8>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d009      	beq.n	8006f68 <HAL_TIM_PWM_Start+0x128>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a2c      	ldr	r2, [pc, #176]	@ (800700c <HAL_TIM_PWM_Start+0x1cc>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d004      	beq.n	8006f68 <HAL_TIM_PWM_Start+0x128>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a2b      	ldr	r2, [pc, #172]	@ (8007010 <HAL_TIM_PWM_Start+0x1d0>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d101      	bne.n	8006f6c <HAL_TIM_PWM_Start+0x12c>
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e000      	b.n	8006f6e <HAL_TIM_PWM_Start+0x12e>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d008      	beq.n	8006f84 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2180      	movs	r1, #128	@ 0x80
 8006f7e:	0209      	lsls	r1, r1, #8
 8006f80:	430a      	orrs	r2, r1
 8006f82:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a1e      	ldr	r2, [pc, #120]	@ (8007004 <HAL_TIM_PWM_Start+0x1c4>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d014      	beq.n	8006fb8 <HAL_TIM_PWM_Start+0x178>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	2380      	movs	r3, #128	@ 0x80
 8006f94:	05db      	lsls	r3, r3, #23
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d00e      	beq.n	8006fb8 <HAL_TIM_PWM_Start+0x178>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a1d      	ldr	r2, [pc, #116]	@ (8007014 <HAL_TIM_PWM_Start+0x1d4>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d009      	beq.n	8006fb8 <HAL_TIM_PWM_Start+0x178>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8007018 <HAL_TIM_PWM_Start+0x1d8>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d004      	beq.n	8006fb8 <HAL_TIM_PWM_Start+0x178>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a15      	ldr	r2, [pc, #84]	@ (8007008 <HAL_TIM_PWM_Start+0x1c8>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d116      	bne.n	8006fe6 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	4a17      	ldr	r2, [pc, #92]	@ (800701c <HAL_TIM_PWM_Start+0x1dc>)
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2b06      	cmp	r3, #6
 8006fc8:	d016      	beq.n	8006ff8 <HAL_TIM_PWM_Start+0x1b8>
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	2380      	movs	r3, #128	@ 0x80
 8006fce:	025b      	lsls	r3, r3, #9
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d011      	beq.n	8006ff8 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2101      	movs	r1, #1
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe4:	e008      	b.n	8006ff8 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2101      	movs	r1, #1
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	e000      	b.n	8006ffa <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ff8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	0018      	movs	r0, r3
 8006ffe:	46bd      	mov	sp, r7
 8007000:	b004      	add	sp, #16
 8007002:	bd80      	pop	{r7, pc}
 8007004:	40012c00 	.word	0x40012c00
 8007008:	40014000 	.word	0x40014000
 800700c:	40014400 	.word	0x40014400
 8007010:	40014800 	.word	0x40014800
 8007014:	40000400 	.word	0x40000400
 8007018:	40000800 	.word	0x40000800
 800701c:	00010007 	.word	0x00010007

08007020 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	2200      	movs	r2, #0
 8007032:	0018      	movs	r0, r3
 8007034:	f000 fcdc 	bl	80079f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a37      	ldr	r2, [pc, #220]	@ (800711c <HAL_TIM_PWM_Stop+0xfc>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d00e      	beq.n	8007060 <HAL_TIM_PWM_Stop+0x40>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a36      	ldr	r2, [pc, #216]	@ (8007120 <HAL_TIM_PWM_Stop+0x100>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d009      	beq.n	8007060 <HAL_TIM_PWM_Stop+0x40>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a34      	ldr	r2, [pc, #208]	@ (8007124 <HAL_TIM_PWM_Stop+0x104>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d004      	beq.n	8007060 <HAL_TIM_PWM_Stop+0x40>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a33      	ldr	r2, [pc, #204]	@ (8007128 <HAL_TIM_PWM_Stop+0x108>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d101      	bne.n	8007064 <HAL_TIM_PWM_Stop+0x44>
 8007060:	2301      	movs	r3, #1
 8007062:	e000      	b.n	8007066 <HAL_TIM_PWM_Stop+0x46>
 8007064:	2300      	movs	r3, #0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d013      	beq.n	8007092 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	4a2e      	ldr	r2, [pc, #184]	@ (800712c <HAL_TIM_PWM_Stop+0x10c>)
 8007072:	4013      	ands	r3, r2
 8007074:	d10d      	bne.n	8007092 <HAL_TIM_PWM_Stop+0x72>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	4a2c      	ldr	r2, [pc, #176]	@ (8007130 <HAL_TIM_PWM_Stop+0x110>)
 800707e:	4013      	ands	r3, r2
 8007080:	d107      	bne.n	8007092 <HAL_TIM_PWM_Stop+0x72>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4929      	ldr	r1, [pc, #164]	@ (8007134 <HAL_TIM_PWM_Stop+0x114>)
 800708e:	400a      	ands	r2, r1
 8007090:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6a1b      	ldr	r3, [r3, #32]
 8007098:	4a24      	ldr	r2, [pc, #144]	@ (800712c <HAL_TIM_PWM_Stop+0x10c>)
 800709a:	4013      	ands	r3, r2
 800709c:	d10d      	bne.n	80070ba <HAL_TIM_PWM_Stop+0x9a>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	6a1b      	ldr	r3, [r3, #32]
 80070a4:	4a22      	ldr	r2, [pc, #136]	@ (8007130 <HAL_TIM_PWM_Stop+0x110>)
 80070a6:	4013      	ands	r3, r2
 80070a8:	d107      	bne.n	80070ba <HAL_TIM_PWM_Stop+0x9a>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2101      	movs	r1, #1
 80070b6:	438a      	bics	r2, r1
 80070b8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d104      	bne.n	80070ca <HAL_TIM_PWM_Stop+0xaa>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	223e      	movs	r2, #62	@ 0x3e
 80070c4:	2101      	movs	r1, #1
 80070c6:	5499      	strb	r1, [r3, r2]
 80070c8:	e023      	b.n	8007112 <HAL_TIM_PWM_Stop+0xf2>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b04      	cmp	r3, #4
 80070ce:	d104      	bne.n	80070da <HAL_TIM_PWM_Stop+0xba>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	223f      	movs	r2, #63	@ 0x3f
 80070d4:	2101      	movs	r1, #1
 80070d6:	5499      	strb	r1, [r3, r2]
 80070d8:	e01b      	b.n	8007112 <HAL_TIM_PWM_Stop+0xf2>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b08      	cmp	r3, #8
 80070de:	d104      	bne.n	80070ea <HAL_TIM_PWM_Stop+0xca>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2240      	movs	r2, #64	@ 0x40
 80070e4:	2101      	movs	r1, #1
 80070e6:	5499      	strb	r1, [r3, r2]
 80070e8:	e013      	b.n	8007112 <HAL_TIM_PWM_Stop+0xf2>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b0c      	cmp	r3, #12
 80070ee:	d104      	bne.n	80070fa <HAL_TIM_PWM_Stop+0xda>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2241      	movs	r2, #65	@ 0x41
 80070f4:	2101      	movs	r1, #1
 80070f6:	5499      	strb	r1, [r3, r2]
 80070f8:	e00b      	b.n	8007112 <HAL_TIM_PWM_Stop+0xf2>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2b10      	cmp	r3, #16
 80070fe:	d104      	bne.n	800710a <HAL_TIM_PWM_Stop+0xea>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2242      	movs	r2, #66	@ 0x42
 8007104:	2101      	movs	r1, #1
 8007106:	5499      	strb	r1, [r3, r2]
 8007108:	e003      	b.n	8007112 <HAL_TIM_PWM_Stop+0xf2>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2243      	movs	r2, #67	@ 0x43
 800710e:	2101      	movs	r1, #1
 8007110:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	0018      	movs	r0, r3
 8007116:	46bd      	mov	sp, r7
 8007118:	b002      	add	sp, #8
 800711a:	bd80      	pop	{r7, pc}
 800711c:	40012c00 	.word	0x40012c00
 8007120:	40014000 	.word	0x40014000
 8007124:	40014400 	.word	0x40014400
 8007128:	40014800 	.word	0x40014800
 800712c:	00001111 	.word	0x00001111
 8007130:	00000444 	.word	0x00000444
 8007134:	ffff7fff 	.word	0xffff7fff

08007138 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007144:	2317      	movs	r3, #23
 8007146:	18fb      	adds	r3, r7, r3
 8007148:	2200      	movs	r2, #0
 800714a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	223c      	movs	r2, #60	@ 0x3c
 8007150:	5c9b      	ldrb	r3, [r3, r2]
 8007152:	2b01      	cmp	r3, #1
 8007154:	d101      	bne.n	800715a <HAL_TIM_PWM_ConfigChannel+0x22>
 8007156:	2302      	movs	r3, #2
 8007158:	e0e5      	b.n	8007326 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	223c      	movs	r2, #60	@ 0x3c
 800715e:	2101      	movs	r1, #1
 8007160:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b14      	cmp	r3, #20
 8007166:	d900      	bls.n	800716a <HAL_TIM_PWM_ConfigChannel+0x32>
 8007168:	e0d1      	b.n	800730e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	009a      	lsls	r2, r3, #2
 800716e:	4b70      	ldr	r3, [pc, #448]	@ (8007330 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8007170:	18d3      	adds	r3, r2, r3
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	0011      	movs	r1, r2
 800717e:	0018      	movs	r0, r3
 8007180:	f000 f972 	bl	8007468 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	699a      	ldr	r2, [r3, #24]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2108      	movs	r1, #8
 8007190:	430a      	orrs	r2, r1
 8007192:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	699a      	ldr	r2, [r3, #24]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2104      	movs	r1, #4
 80071a0:	438a      	bics	r2, r1
 80071a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6999      	ldr	r1, [r3, #24]
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	691a      	ldr	r2, [r3, #16]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	430a      	orrs	r2, r1
 80071b4:	619a      	str	r2, [r3, #24]
      break;
 80071b6:	e0af      	b.n	8007318 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	0011      	movs	r1, r2
 80071c0:	0018      	movs	r0, r3
 80071c2:	f000 f9db 	bl	800757c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	699a      	ldr	r2, [r3, #24]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2180      	movs	r1, #128	@ 0x80
 80071d2:	0109      	lsls	r1, r1, #4
 80071d4:	430a      	orrs	r2, r1
 80071d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	699a      	ldr	r2, [r3, #24]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4954      	ldr	r1, [pc, #336]	@ (8007334 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80071e4:	400a      	ands	r2, r1
 80071e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6999      	ldr	r1, [r3, #24]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	021a      	lsls	r2, r3, #8
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	430a      	orrs	r2, r1
 80071fa:	619a      	str	r2, [r3, #24]
      break;
 80071fc:	e08c      	b.n	8007318 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68ba      	ldr	r2, [r7, #8]
 8007204:	0011      	movs	r1, r2
 8007206:	0018      	movs	r0, r3
 8007208:	f000 fa3c 	bl	8007684 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	69da      	ldr	r2, [r3, #28]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2108      	movs	r1, #8
 8007218:	430a      	orrs	r2, r1
 800721a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	69da      	ldr	r2, [r3, #28]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2104      	movs	r1, #4
 8007228:	438a      	bics	r2, r1
 800722a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	69d9      	ldr	r1, [r3, #28]
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	691a      	ldr	r2, [r3, #16]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	430a      	orrs	r2, r1
 800723c:	61da      	str	r2, [r3, #28]
      break;
 800723e:	e06b      	b.n	8007318 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	0011      	movs	r1, r2
 8007248:	0018      	movs	r0, r3
 800724a:	f000 faa3 	bl	8007794 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	69da      	ldr	r2, [r3, #28]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2180      	movs	r1, #128	@ 0x80
 800725a:	0109      	lsls	r1, r1, #4
 800725c:	430a      	orrs	r2, r1
 800725e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	69da      	ldr	r2, [r3, #28]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4932      	ldr	r1, [pc, #200]	@ (8007334 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800726c:	400a      	ands	r2, r1
 800726e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	69d9      	ldr	r1, [r3, #28]
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	021a      	lsls	r2, r3, #8
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	430a      	orrs	r2, r1
 8007282:	61da      	str	r2, [r3, #28]
      break;
 8007284:	e048      	b.n	8007318 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	0011      	movs	r1, r2
 800728e:	0018      	movs	r0, r3
 8007290:	f000 faea 	bl	8007868 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2108      	movs	r1, #8
 80072a0:	430a      	orrs	r2, r1
 80072a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2104      	movs	r1, #4
 80072b0:	438a      	bics	r2, r1
 80072b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	691a      	ldr	r2, [r3, #16]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	430a      	orrs	r2, r1
 80072c4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80072c6:	e027      	b.n	8007318 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	0011      	movs	r1, r2
 80072d0:	0018      	movs	r0, r3
 80072d2:	f000 fb29 	bl	8007928 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2180      	movs	r1, #128	@ 0x80
 80072e2:	0109      	lsls	r1, r1, #4
 80072e4:	430a      	orrs	r2, r1
 80072e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4910      	ldr	r1, [pc, #64]	@ (8007334 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80072f4:	400a      	ands	r2, r1
 80072f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	021a      	lsls	r2, r3, #8
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800730c:	e004      	b.n	8007318 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800730e:	2317      	movs	r3, #23
 8007310:	18fb      	adds	r3, r7, r3
 8007312:	2201      	movs	r2, #1
 8007314:	701a      	strb	r2, [r3, #0]
      break;
 8007316:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	223c      	movs	r2, #60	@ 0x3c
 800731c:	2100      	movs	r1, #0
 800731e:	5499      	strb	r1, [r3, r2]

  return status;
 8007320:	2317      	movs	r3, #23
 8007322:	18fb      	adds	r3, r7, r3
 8007324:	781b      	ldrb	r3, [r3, #0]
}
 8007326:	0018      	movs	r0, r3
 8007328:	46bd      	mov	sp, r7
 800732a:	b006      	add	sp, #24
 800732c:	bd80      	pop	{r7, pc}
 800732e:	46c0      	nop			@ (mov r8, r8)
 8007330:	08009e1c 	.word	0x08009e1c
 8007334:	fffffbff 	.word	0xfffffbff

08007338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a3f      	ldr	r2, [pc, #252]	@ (8007448 <TIM_Base_SetConfig+0x110>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d00c      	beq.n	800736a <TIM_Base_SetConfig+0x32>
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	2380      	movs	r3, #128	@ 0x80
 8007354:	05db      	lsls	r3, r3, #23
 8007356:	429a      	cmp	r2, r3
 8007358:	d007      	beq.n	800736a <TIM_Base_SetConfig+0x32>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a3b      	ldr	r2, [pc, #236]	@ (800744c <TIM_Base_SetConfig+0x114>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d003      	beq.n	800736a <TIM_Base_SetConfig+0x32>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a3a      	ldr	r2, [pc, #232]	@ (8007450 <TIM_Base_SetConfig+0x118>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d108      	bne.n	800737c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2270      	movs	r2, #112	@ 0x70
 800736e:	4393      	bics	r3, r2
 8007370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	4313      	orrs	r3, r2
 800737a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a32      	ldr	r2, [pc, #200]	@ (8007448 <TIM_Base_SetConfig+0x110>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d01c      	beq.n	80073be <TIM_Base_SetConfig+0x86>
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	2380      	movs	r3, #128	@ 0x80
 8007388:	05db      	lsls	r3, r3, #23
 800738a:	429a      	cmp	r2, r3
 800738c:	d017      	beq.n	80073be <TIM_Base_SetConfig+0x86>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a2e      	ldr	r2, [pc, #184]	@ (800744c <TIM_Base_SetConfig+0x114>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d013      	beq.n	80073be <TIM_Base_SetConfig+0x86>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a2d      	ldr	r2, [pc, #180]	@ (8007450 <TIM_Base_SetConfig+0x118>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d00f      	beq.n	80073be <TIM_Base_SetConfig+0x86>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a2c      	ldr	r2, [pc, #176]	@ (8007454 <TIM_Base_SetConfig+0x11c>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d00b      	beq.n	80073be <TIM_Base_SetConfig+0x86>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a2b      	ldr	r2, [pc, #172]	@ (8007458 <TIM_Base_SetConfig+0x120>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d007      	beq.n	80073be <TIM_Base_SetConfig+0x86>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a2a      	ldr	r2, [pc, #168]	@ (800745c <TIM_Base_SetConfig+0x124>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d003      	beq.n	80073be <TIM_Base_SetConfig+0x86>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a29      	ldr	r2, [pc, #164]	@ (8007460 <TIM_Base_SetConfig+0x128>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d108      	bne.n	80073d0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	4a28      	ldr	r2, [pc, #160]	@ (8007464 <TIM_Base_SetConfig+0x12c>)
 80073c2:	4013      	ands	r3, r2
 80073c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2280      	movs	r2, #128	@ 0x80
 80073d4:	4393      	bics	r3, r2
 80073d6:	001a      	movs	r2, r3
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	695b      	ldr	r3, [r3, #20]
 80073dc:	4313      	orrs	r3, r2
 80073de:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	689a      	ldr	r2, [r3, #8]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a13      	ldr	r2, [pc, #76]	@ (8007448 <TIM_Base_SetConfig+0x110>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d00b      	beq.n	8007416 <TIM_Base_SetConfig+0xde>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a15      	ldr	r2, [pc, #84]	@ (8007458 <TIM_Base_SetConfig+0x120>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d007      	beq.n	8007416 <TIM_Base_SetConfig+0xde>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a14      	ldr	r2, [pc, #80]	@ (800745c <TIM_Base_SetConfig+0x124>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d003      	beq.n	8007416 <TIM_Base_SetConfig+0xde>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a13      	ldr	r2, [pc, #76]	@ (8007460 <TIM_Base_SetConfig+0x128>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d103      	bne.n	800741e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	691a      	ldr	r2, [r3, #16]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	2201      	movs	r2, #1
 800742a:	4013      	ands	r3, r2
 800742c:	2b01      	cmp	r3, #1
 800742e:	d106      	bne.n	800743e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	2201      	movs	r2, #1
 8007436:	4393      	bics	r3, r2
 8007438:	001a      	movs	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	611a      	str	r2, [r3, #16]
  }
}
 800743e:	46c0      	nop			@ (mov r8, r8)
 8007440:	46bd      	mov	sp, r7
 8007442:	b004      	add	sp, #16
 8007444:	bd80      	pop	{r7, pc}
 8007446:	46c0      	nop			@ (mov r8, r8)
 8007448:	40012c00 	.word	0x40012c00
 800744c:	40000400 	.word	0x40000400
 8007450:	40000800 	.word	0x40000800
 8007454:	40002000 	.word	0x40002000
 8007458:	40014000 	.word	0x40014000
 800745c:	40014400 	.word	0x40014400
 8007460:	40014800 	.word	0x40014800
 8007464:	fffffcff 	.word	0xfffffcff

08007468 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a1b      	ldr	r3, [r3, #32]
 800747c:	2201      	movs	r2, #1
 800747e:	4393      	bics	r3, r2
 8007480:	001a      	movs	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	4a32      	ldr	r2, [pc, #200]	@ (8007560 <TIM_OC1_SetConfig+0xf8>)
 8007496:	4013      	ands	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2203      	movs	r2, #3
 800749e:	4393      	bics	r3, r2
 80074a0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	2202      	movs	r2, #2
 80074b0:	4393      	bics	r3, r2
 80074b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	697a      	ldr	r2, [r7, #20]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a28      	ldr	r2, [pc, #160]	@ (8007564 <TIM_OC1_SetConfig+0xfc>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d00b      	beq.n	80074de <TIM_OC1_SetConfig+0x76>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a27      	ldr	r2, [pc, #156]	@ (8007568 <TIM_OC1_SetConfig+0x100>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d007      	beq.n	80074de <TIM_OC1_SetConfig+0x76>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a26      	ldr	r2, [pc, #152]	@ (800756c <TIM_OC1_SetConfig+0x104>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d003      	beq.n	80074de <TIM_OC1_SetConfig+0x76>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a25      	ldr	r2, [pc, #148]	@ (8007570 <TIM_OC1_SetConfig+0x108>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d10c      	bne.n	80074f8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	2208      	movs	r2, #8
 80074e2:	4393      	bics	r3, r2
 80074e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	2204      	movs	r2, #4
 80074f4:	4393      	bics	r3, r2
 80074f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a1a      	ldr	r2, [pc, #104]	@ (8007564 <TIM_OC1_SetConfig+0xfc>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d00b      	beq.n	8007518 <TIM_OC1_SetConfig+0xb0>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a19      	ldr	r2, [pc, #100]	@ (8007568 <TIM_OC1_SetConfig+0x100>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d007      	beq.n	8007518 <TIM_OC1_SetConfig+0xb0>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a18      	ldr	r2, [pc, #96]	@ (800756c <TIM_OC1_SetConfig+0x104>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d003      	beq.n	8007518 <TIM_OC1_SetConfig+0xb0>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a17      	ldr	r2, [pc, #92]	@ (8007570 <TIM_OC1_SetConfig+0x108>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d111      	bne.n	800753c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	4a16      	ldr	r2, [pc, #88]	@ (8007574 <TIM_OC1_SetConfig+0x10c>)
 800751c:	4013      	ands	r3, r2
 800751e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	4a15      	ldr	r2, [pc, #84]	@ (8007578 <TIM_OC1_SetConfig+0x110>)
 8007524:	4013      	ands	r3, r2
 8007526:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	4313      	orrs	r3, r2
 8007530:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	4313      	orrs	r3, r2
 800753a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	685a      	ldr	r2, [r3, #4]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	621a      	str	r2, [r3, #32]
}
 8007556:	46c0      	nop			@ (mov r8, r8)
 8007558:	46bd      	mov	sp, r7
 800755a:	b006      	add	sp, #24
 800755c:	bd80      	pop	{r7, pc}
 800755e:	46c0      	nop			@ (mov r8, r8)
 8007560:	fffeff8f 	.word	0xfffeff8f
 8007564:	40012c00 	.word	0x40012c00
 8007568:	40014000 	.word	0x40014000
 800756c:	40014400 	.word	0x40014400
 8007570:	40014800 	.word	0x40014800
 8007574:	fffffeff 	.word	0xfffffeff
 8007578:	fffffdff 	.word	0xfffffdff

0800757c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a1b      	ldr	r3, [r3, #32]
 8007590:	2210      	movs	r2, #16
 8007592:	4393      	bics	r3, r2
 8007594:	001a      	movs	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	4a2e      	ldr	r2, [pc, #184]	@ (8007664 <TIM_OC2_SetConfig+0xe8>)
 80075aa:	4013      	ands	r3, r2
 80075ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	4a2d      	ldr	r2, [pc, #180]	@ (8007668 <TIM_OC2_SetConfig+0xec>)
 80075b2:	4013      	ands	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	021b      	lsls	r3, r3, #8
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	4313      	orrs	r3, r2
 80075c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	2220      	movs	r2, #32
 80075c6:	4393      	bics	r3, r2
 80075c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	011b      	lsls	r3, r3, #4
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a24      	ldr	r2, [pc, #144]	@ (800766c <TIM_OC2_SetConfig+0xf0>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d10d      	bne.n	80075fa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2280      	movs	r2, #128	@ 0x80
 80075e2:	4393      	bics	r3, r2
 80075e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	011b      	lsls	r3, r3, #4
 80075ec:	697a      	ldr	r2, [r7, #20]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2240      	movs	r2, #64	@ 0x40
 80075f6:	4393      	bics	r3, r2
 80075f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a1b      	ldr	r2, [pc, #108]	@ (800766c <TIM_OC2_SetConfig+0xf0>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d00b      	beq.n	800761a <TIM_OC2_SetConfig+0x9e>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a1a      	ldr	r2, [pc, #104]	@ (8007670 <TIM_OC2_SetConfig+0xf4>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d007      	beq.n	800761a <TIM_OC2_SetConfig+0x9e>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a19      	ldr	r2, [pc, #100]	@ (8007674 <TIM_OC2_SetConfig+0xf8>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d003      	beq.n	800761a <TIM_OC2_SetConfig+0x9e>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a18      	ldr	r2, [pc, #96]	@ (8007678 <TIM_OC2_SetConfig+0xfc>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d113      	bne.n	8007642 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	4a17      	ldr	r2, [pc, #92]	@ (800767c <TIM_OC2_SetConfig+0x100>)
 800761e:	4013      	ands	r3, r2
 8007620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	4a16      	ldr	r2, [pc, #88]	@ (8007680 <TIM_OC2_SetConfig+0x104>)
 8007626:	4013      	ands	r3, r2
 8007628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	4313      	orrs	r3, r2
 8007634:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	4313      	orrs	r3, r2
 8007640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	685a      	ldr	r2, [r3, #4]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	621a      	str	r2, [r3, #32]
}
 800765c:	46c0      	nop			@ (mov r8, r8)
 800765e:	46bd      	mov	sp, r7
 8007660:	b006      	add	sp, #24
 8007662:	bd80      	pop	{r7, pc}
 8007664:	feff8fff 	.word	0xfeff8fff
 8007668:	fffffcff 	.word	0xfffffcff
 800766c:	40012c00 	.word	0x40012c00
 8007670:	40014000 	.word	0x40014000
 8007674:	40014400 	.word	0x40014400
 8007678:	40014800 	.word	0x40014800
 800767c:	fffffbff 	.word	0xfffffbff
 8007680:	fffff7ff 	.word	0xfffff7ff

08007684 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a1b      	ldr	r3, [r3, #32]
 8007698:	4a33      	ldr	r2, [pc, #204]	@ (8007768 <TIM_OC3_SetConfig+0xe4>)
 800769a:	401a      	ands	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4a2f      	ldr	r2, [pc, #188]	@ (800776c <TIM_OC3_SetConfig+0xe8>)
 80076b0:	4013      	ands	r3, r2
 80076b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2203      	movs	r2, #3
 80076b8:	4393      	bics	r3, r2
 80076ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	4a29      	ldr	r2, [pc, #164]	@ (8007770 <TIM_OC3_SetConfig+0xec>)
 80076ca:	4013      	ands	r3, r2
 80076cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	021b      	lsls	r3, r3, #8
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a25      	ldr	r2, [pc, #148]	@ (8007774 <TIM_OC3_SetConfig+0xf0>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d10d      	bne.n	80076fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	4a24      	ldr	r2, [pc, #144]	@ (8007778 <TIM_OC3_SetConfig+0xf4>)
 80076e6:	4013      	ands	r3, r2
 80076e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	021b      	lsls	r3, r3, #8
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	4a20      	ldr	r2, [pc, #128]	@ (800777c <TIM_OC3_SetConfig+0xf8>)
 80076fa:	4013      	ands	r3, r2
 80076fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a1c      	ldr	r2, [pc, #112]	@ (8007774 <TIM_OC3_SetConfig+0xf0>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d00b      	beq.n	800771e <TIM_OC3_SetConfig+0x9a>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a1d      	ldr	r2, [pc, #116]	@ (8007780 <TIM_OC3_SetConfig+0xfc>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d007      	beq.n	800771e <TIM_OC3_SetConfig+0x9a>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a1c      	ldr	r2, [pc, #112]	@ (8007784 <TIM_OC3_SetConfig+0x100>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d003      	beq.n	800771e <TIM_OC3_SetConfig+0x9a>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a1b      	ldr	r2, [pc, #108]	@ (8007788 <TIM_OC3_SetConfig+0x104>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d113      	bne.n	8007746 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	4a1a      	ldr	r2, [pc, #104]	@ (800778c <TIM_OC3_SetConfig+0x108>)
 8007722:	4013      	ands	r3, r2
 8007724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	4a19      	ldr	r2, [pc, #100]	@ (8007790 <TIM_OC3_SetConfig+0x10c>)
 800772a:	4013      	ands	r3, r2
 800772c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	011b      	lsls	r3, r3, #4
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	4313      	orrs	r3, r2
 8007738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	011b      	lsls	r3, r3, #4
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	4313      	orrs	r3, r2
 8007744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	621a      	str	r2, [r3, #32]
}
 8007760:	46c0      	nop			@ (mov r8, r8)
 8007762:	46bd      	mov	sp, r7
 8007764:	b006      	add	sp, #24
 8007766:	bd80      	pop	{r7, pc}
 8007768:	fffffeff 	.word	0xfffffeff
 800776c:	fffeff8f 	.word	0xfffeff8f
 8007770:	fffffdff 	.word	0xfffffdff
 8007774:	40012c00 	.word	0x40012c00
 8007778:	fffff7ff 	.word	0xfffff7ff
 800777c:	fffffbff 	.word	0xfffffbff
 8007780:	40014000 	.word	0x40014000
 8007784:	40014400 	.word	0x40014400
 8007788:	40014800 	.word	0x40014800
 800778c:	ffffefff 	.word	0xffffefff
 8007790:	ffffdfff 	.word	0xffffdfff

08007794 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a1b      	ldr	r3, [r3, #32]
 80077a8:	4a26      	ldr	r2, [pc, #152]	@ (8007844 <TIM_OC4_SetConfig+0xb0>)
 80077aa:	401a      	ands	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	69db      	ldr	r3, [r3, #28]
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	4a22      	ldr	r2, [pc, #136]	@ (8007848 <TIM_OC4_SetConfig+0xb4>)
 80077c0:	4013      	ands	r3, r2
 80077c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	4a21      	ldr	r2, [pc, #132]	@ (800784c <TIM_OC4_SetConfig+0xb8>)
 80077c8:	4013      	ands	r3, r2
 80077ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	021b      	lsls	r3, r3, #8
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	4a1d      	ldr	r2, [pc, #116]	@ (8007850 <TIM_OC4_SetConfig+0xbc>)
 80077dc:	4013      	ands	r3, r2
 80077de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	031b      	lsls	r3, r3, #12
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a19      	ldr	r2, [pc, #100]	@ (8007854 <TIM_OC4_SetConfig+0xc0>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d00b      	beq.n	800780c <TIM_OC4_SetConfig+0x78>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a18      	ldr	r2, [pc, #96]	@ (8007858 <TIM_OC4_SetConfig+0xc4>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d007      	beq.n	800780c <TIM_OC4_SetConfig+0x78>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a17      	ldr	r2, [pc, #92]	@ (800785c <TIM_OC4_SetConfig+0xc8>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d003      	beq.n	800780c <TIM_OC4_SetConfig+0x78>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a16      	ldr	r2, [pc, #88]	@ (8007860 <TIM_OC4_SetConfig+0xcc>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d109      	bne.n	8007820 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	4a15      	ldr	r2, [pc, #84]	@ (8007864 <TIM_OC4_SetConfig+0xd0>)
 8007810:	4013      	ands	r3, r2
 8007812:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	695b      	ldr	r3, [r3, #20]
 8007818:	019b      	lsls	r3, r3, #6
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	4313      	orrs	r3, r2
 800781e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	693a      	ldr	r2, [r7, #16]
 8007838:	621a      	str	r2, [r3, #32]
}
 800783a:	46c0      	nop			@ (mov r8, r8)
 800783c:	46bd      	mov	sp, r7
 800783e:	b006      	add	sp, #24
 8007840:	bd80      	pop	{r7, pc}
 8007842:	46c0      	nop			@ (mov r8, r8)
 8007844:	ffffefff 	.word	0xffffefff
 8007848:	feff8fff 	.word	0xfeff8fff
 800784c:	fffffcff 	.word	0xfffffcff
 8007850:	ffffdfff 	.word	0xffffdfff
 8007854:	40012c00 	.word	0x40012c00
 8007858:	40014000 	.word	0x40014000
 800785c:	40014400 	.word	0x40014400
 8007860:	40014800 	.word	0x40014800
 8007864:	ffffbfff 	.word	0xffffbfff

08007868 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a1b      	ldr	r3, [r3, #32]
 800787c:	4a23      	ldr	r2, [pc, #140]	@ (800790c <TIM_OC5_SetConfig+0xa4>)
 800787e:	401a      	ands	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800788e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4a1f      	ldr	r2, [pc, #124]	@ (8007910 <TIM_OC5_SetConfig+0xa8>)
 8007894:	4013      	ands	r3, r2
 8007896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	4313      	orrs	r3, r2
 80078a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007914 <TIM_OC5_SetConfig+0xac>)
 80078a6:	4013      	ands	r3, r2
 80078a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	041b      	lsls	r3, r3, #16
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a17      	ldr	r2, [pc, #92]	@ (8007918 <TIM_OC5_SetConfig+0xb0>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d00b      	beq.n	80078d6 <TIM_OC5_SetConfig+0x6e>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a16      	ldr	r2, [pc, #88]	@ (800791c <TIM_OC5_SetConfig+0xb4>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d007      	beq.n	80078d6 <TIM_OC5_SetConfig+0x6e>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a15      	ldr	r2, [pc, #84]	@ (8007920 <TIM_OC5_SetConfig+0xb8>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d003      	beq.n	80078d6 <TIM_OC5_SetConfig+0x6e>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a14      	ldr	r2, [pc, #80]	@ (8007924 <TIM_OC5_SetConfig+0xbc>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d109      	bne.n	80078ea <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	4a0c      	ldr	r2, [pc, #48]	@ (800790c <TIM_OC5_SetConfig+0xa4>)
 80078da:	4013      	ands	r3, r2
 80078dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	021b      	lsls	r3, r3, #8
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	697a      	ldr	r2, [r7, #20]
 80078ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	685a      	ldr	r2, [r3, #4]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	621a      	str	r2, [r3, #32]
}
 8007904:	46c0      	nop			@ (mov r8, r8)
 8007906:	46bd      	mov	sp, r7
 8007908:	b006      	add	sp, #24
 800790a:	bd80      	pop	{r7, pc}
 800790c:	fffeffff 	.word	0xfffeffff
 8007910:	fffeff8f 	.word	0xfffeff8f
 8007914:	fffdffff 	.word	0xfffdffff
 8007918:	40012c00 	.word	0x40012c00
 800791c:	40014000 	.word	0x40014000
 8007920:	40014400 	.word	0x40014400
 8007924:	40014800 	.word	0x40014800

08007928 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a1b      	ldr	r3, [r3, #32]
 800793c:	4a24      	ldr	r2, [pc, #144]	@ (80079d0 <TIM_OC6_SetConfig+0xa8>)
 800793e:	401a      	ands	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800794e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4a20      	ldr	r2, [pc, #128]	@ (80079d4 <TIM_OC6_SetConfig+0xac>)
 8007954:	4013      	ands	r3, r2
 8007956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	021b      	lsls	r3, r3, #8
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	4313      	orrs	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	4a1c      	ldr	r2, [pc, #112]	@ (80079d8 <TIM_OC6_SetConfig+0xb0>)
 8007968:	4013      	ands	r3, r2
 800796a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	051b      	lsls	r3, r3, #20
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	4313      	orrs	r3, r2
 8007976:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a18      	ldr	r2, [pc, #96]	@ (80079dc <TIM_OC6_SetConfig+0xb4>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d00b      	beq.n	8007998 <TIM_OC6_SetConfig+0x70>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a17      	ldr	r2, [pc, #92]	@ (80079e0 <TIM_OC6_SetConfig+0xb8>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d007      	beq.n	8007998 <TIM_OC6_SetConfig+0x70>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a16      	ldr	r2, [pc, #88]	@ (80079e4 <TIM_OC6_SetConfig+0xbc>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d003      	beq.n	8007998 <TIM_OC6_SetConfig+0x70>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a15      	ldr	r2, [pc, #84]	@ (80079e8 <TIM_OC6_SetConfig+0xc0>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d109      	bne.n	80079ac <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	4a14      	ldr	r2, [pc, #80]	@ (80079ec <TIM_OC6_SetConfig+0xc4>)
 800799c:	4013      	ands	r3, r2
 800799e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	029b      	lsls	r3, r3, #10
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	685a      	ldr	r2, [r3, #4]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	621a      	str	r2, [r3, #32]
}
 80079c6:	46c0      	nop			@ (mov r8, r8)
 80079c8:	46bd      	mov	sp, r7
 80079ca:	b006      	add	sp, #24
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	46c0      	nop			@ (mov r8, r8)
 80079d0:	ffefffff 	.word	0xffefffff
 80079d4:	feff8fff 	.word	0xfeff8fff
 80079d8:	ffdfffff 	.word	0xffdfffff
 80079dc:	40012c00 	.word	0x40012c00
 80079e0:	40014000 	.word	0x40014000
 80079e4:	40014400 	.word	0x40014400
 80079e8:	40014800 	.word	0x40014800
 80079ec:	fffbffff 	.word	0xfffbffff

080079f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	221f      	movs	r2, #31
 8007a00:	4013      	ands	r3, r2
 8007a02:	2201      	movs	r2, #1
 8007a04:	409a      	lsls	r2, r3
 8007a06:	0013      	movs	r3, r2
 8007a08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	43d2      	mvns	r2, r2
 8007a12:	401a      	ands	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6a1a      	ldr	r2, [r3, #32]
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	211f      	movs	r1, #31
 8007a20:	400b      	ands	r3, r1
 8007a22:	6879      	ldr	r1, [r7, #4]
 8007a24:	4099      	lsls	r1, r3
 8007a26:	000b      	movs	r3, r1
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	621a      	str	r2, [r3, #32]
}
 8007a2e:	46c0      	nop			@ (mov r8, r8)
 8007a30:	46bd      	mov	sp, r7
 8007a32:	b006      	add	sp, #24
 8007a34:	bd80      	pop	{r7, pc}
	...

08007a38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	223c      	movs	r2, #60	@ 0x3c
 8007a4a:	5c9b      	ldrb	r3, [r3, r2]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d101      	bne.n	8007a54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a50:	2302      	movs	r3, #2
 8007a52:	e06f      	b.n	8007b34 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	223c      	movs	r2, #60	@ 0x3c
 8007a58:	2101      	movs	r1, #1
 8007a5a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	22ff      	movs	r2, #255	@ 0xff
 8007a60:	4393      	bics	r3, r2
 8007a62:	001a      	movs	r2, r3
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4a33      	ldr	r2, [pc, #204]	@ (8007b3c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8007a70:	401a      	ands	r2, r3
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	4a30      	ldr	r2, [pc, #192]	@ (8007b40 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8007a7e:	401a      	ands	r2, r3
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	4a2e      	ldr	r2, [pc, #184]	@ (8007b44 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8007a8c:	401a      	ands	r2, r3
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	4a2b      	ldr	r2, [pc, #172]	@ (8007b48 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007a9a:	401a      	ands	r2, r3
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	4a29      	ldr	r2, [pc, #164]	@ (8007b4c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007aa8:	401a      	ands	r2, r3
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	4a26      	ldr	r2, [pc, #152]	@ (8007b50 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8007ab6:	401a      	ands	r2, r3
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007abc:	4313      	orrs	r3, r2
 8007abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4a24      	ldr	r2, [pc, #144]	@ (8007b54 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007ac4:	401a      	ands	r2, r3
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	041b      	lsls	r3, r3, #16
 8007acc:	4313      	orrs	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	4a21      	ldr	r2, [pc, #132]	@ (8007b58 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007ad4:	401a      	ands	r2, r3
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	69db      	ldr	r3, [r3, #28]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8007b5c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d11c      	bne.n	8007b22 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	4a1d      	ldr	r2, [pc, #116]	@ (8007b60 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8007aec:	401a      	ands	r2, r3
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af2:	051b      	lsls	r3, r3, #20
 8007af4:	4313      	orrs	r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	4a1a      	ldr	r2, [pc, #104]	@ (8007b64 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8007afc:	401a      	ands	r2, r3
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	4a17      	ldr	r2, [pc, #92]	@ (8007b68 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8007b0a:	401a      	ands	r2, r3
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b10:	4313      	orrs	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4a15      	ldr	r2, [pc, #84]	@ (8007b6c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8007b18:	401a      	ands	r2, r3
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	223c      	movs	r2, #60	@ 0x3c
 8007b2e:	2100      	movs	r1, #0
 8007b30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	0018      	movs	r0, r3
 8007b36:	46bd      	mov	sp, r7
 8007b38:	b004      	add	sp, #16
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	fffffcff 	.word	0xfffffcff
 8007b40:	fffffbff 	.word	0xfffffbff
 8007b44:	fffff7ff 	.word	0xfffff7ff
 8007b48:	ffffefff 	.word	0xffffefff
 8007b4c:	ffffdfff 	.word	0xffffdfff
 8007b50:	ffffbfff 	.word	0xffffbfff
 8007b54:	fff0ffff 	.word	0xfff0ffff
 8007b58:	efffffff 	.word	0xefffffff
 8007b5c:	40012c00 	.word	0x40012c00
 8007b60:	ff0fffff 	.word	0xff0fffff
 8007b64:	feffffff 	.word	0xfeffffff
 8007b68:	fdffffff 	.word	0xfdffffff
 8007b6c:	dfffffff 	.word	0xdfffffff

08007b70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e046      	b.n	8007c10 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2288      	movs	r2, #136	@ 0x88
 8007b86:	589b      	ldr	r3, [r3, r2]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d107      	bne.n	8007b9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2284      	movs	r2, #132	@ 0x84
 8007b90:	2100      	movs	r1, #0
 8007b92:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	0018      	movs	r0, r3
 8007b98:	f7fc f82a 	bl	8003bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2288      	movs	r2, #136	@ 0x88
 8007ba0:	2124      	movs	r1, #36	@ 0x24
 8007ba2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2101      	movs	r1, #1
 8007bb0:	438a      	bics	r2, r1
 8007bb2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d003      	beq.n	8007bc4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	0018      	movs	r0, r3
 8007bc0:	f000 fc26 	bl	8008410 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	0018      	movs	r0, r3
 8007bc8:	f000 f8cc 	bl	8007d64 <UART_SetConfig>
 8007bcc:	0003      	movs	r3, r0
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d101      	bne.n	8007bd6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e01c      	b.n	8007c10 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	490d      	ldr	r1, [pc, #52]	@ (8007c18 <HAL_UART_Init+0xa8>)
 8007be2:	400a      	ands	r2, r1
 8007be4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	212a      	movs	r1, #42	@ 0x2a
 8007bf2:	438a      	bics	r2, r1
 8007bf4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2101      	movs	r1, #1
 8007c02:	430a      	orrs	r2, r1
 8007c04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	0018      	movs	r0, r3
 8007c0a:	f000 fcb5 	bl	8008578 <UART_CheckIdleState>
 8007c0e:	0003      	movs	r3, r0
}
 8007c10:	0018      	movs	r0, r3
 8007c12:	46bd      	mov	sp, r7
 8007c14:	b002      	add	sp, #8
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	ffffb7ff 	.word	0xffffb7ff

08007c1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b08a      	sub	sp, #40	@ 0x28
 8007c20:	af02      	add	r7, sp, #8
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	603b      	str	r3, [r7, #0]
 8007c28:	1dbb      	adds	r3, r7, #6
 8007c2a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2288      	movs	r2, #136	@ 0x88
 8007c30:	589b      	ldr	r3, [r3, r2]
 8007c32:	2b20      	cmp	r3, #32
 8007c34:	d000      	beq.n	8007c38 <HAL_UART_Transmit+0x1c>
 8007c36:	e090      	b.n	8007d5a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d003      	beq.n	8007c46 <HAL_UART_Transmit+0x2a>
 8007c3e:	1dbb      	adds	r3, r7, #6
 8007c40:	881b      	ldrh	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d101      	bne.n	8007c4a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e088      	b.n	8007d5c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	689a      	ldr	r2, [r3, #8]
 8007c4e:	2380      	movs	r3, #128	@ 0x80
 8007c50:	015b      	lsls	r3, r3, #5
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d109      	bne.n	8007c6a <HAL_UART_Transmit+0x4e>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d105      	bne.n	8007c6a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2201      	movs	r2, #1
 8007c62:	4013      	ands	r3, r2
 8007c64:	d001      	beq.n	8007c6a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e078      	b.n	8007d5c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2290      	movs	r2, #144	@ 0x90
 8007c6e:	2100      	movs	r1, #0
 8007c70:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2288      	movs	r2, #136	@ 0x88
 8007c76:	2121      	movs	r1, #33	@ 0x21
 8007c78:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c7a:	f7fc f96f 	bl	8003f5c <HAL_GetTick>
 8007c7e:	0003      	movs	r3, r0
 8007c80:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	1dba      	adds	r2, r7, #6
 8007c86:	2154      	movs	r1, #84	@ 0x54
 8007c88:	8812      	ldrh	r2, [r2, #0]
 8007c8a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	1dba      	adds	r2, r7, #6
 8007c90:	2156      	movs	r1, #86	@ 0x56
 8007c92:	8812      	ldrh	r2, [r2, #0]
 8007c94:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	689a      	ldr	r2, [r3, #8]
 8007c9a:	2380      	movs	r3, #128	@ 0x80
 8007c9c:	015b      	lsls	r3, r3, #5
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d108      	bne.n	8007cb4 <HAL_UART_Transmit+0x98>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d104      	bne.n	8007cb4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8007caa:	2300      	movs	r3, #0
 8007cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	61bb      	str	r3, [r7, #24]
 8007cb2:	e003      	b.n	8007cbc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007cbc:	e030      	b.n	8007d20 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cbe:	697a      	ldr	r2, [r7, #20]
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	0013      	movs	r3, r2
 8007cc8:	2200      	movs	r2, #0
 8007cca:	2180      	movs	r1, #128	@ 0x80
 8007ccc:	f000 fcfe 	bl	80086cc <UART_WaitOnFlagUntilTimeout>
 8007cd0:	1e03      	subs	r3, r0, #0
 8007cd2:	d005      	beq.n	8007ce0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2288      	movs	r2, #136	@ 0x88
 8007cd8:	2120      	movs	r1, #32
 8007cda:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e03d      	b.n	8007d5c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10b      	bne.n	8007cfe <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	881b      	ldrh	r3, [r3, #0]
 8007cea:	001a      	movs	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	05d2      	lsls	r2, r2, #23
 8007cf2:	0dd2      	lsrs	r2, r2, #23
 8007cf4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	3302      	adds	r3, #2
 8007cfa:	61bb      	str	r3, [r7, #24]
 8007cfc:	e007      	b.n	8007d0e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	781a      	ldrb	r2, [r3, #0]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2256      	movs	r2, #86	@ 0x56
 8007d12:	5a9b      	ldrh	r3, [r3, r2]
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	3b01      	subs	r3, #1
 8007d18:	b299      	uxth	r1, r3
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2256      	movs	r2, #86	@ 0x56
 8007d1e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2256      	movs	r2, #86	@ 0x56
 8007d24:	5a9b      	ldrh	r3, [r3, r2]
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1c8      	bne.n	8007cbe <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	0013      	movs	r3, r2
 8007d36:	2200      	movs	r2, #0
 8007d38:	2140      	movs	r1, #64	@ 0x40
 8007d3a:	f000 fcc7 	bl	80086cc <UART_WaitOnFlagUntilTimeout>
 8007d3e:	1e03      	subs	r3, r0, #0
 8007d40:	d005      	beq.n	8007d4e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2288      	movs	r2, #136	@ 0x88
 8007d46:	2120      	movs	r1, #32
 8007d48:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8007d4a:	2303      	movs	r3, #3
 8007d4c:	e006      	b.n	8007d5c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2288      	movs	r2, #136	@ 0x88
 8007d52:	2120      	movs	r1, #32
 8007d54:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	e000      	b.n	8007d5c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8007d5a:	2302      	movs	r3, #2
  }
}
 8007d5c:	0018      	movs	r0, r3
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	b008      	add	sp, #32
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d64:	b5b0      	push	{r4, r5, r7, lr}
 8007d66:	b090      	sub	sp, #64	@ 0x40
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d6c:	231a      	movs	r3, #26
 8007d6e:	2220      	movs	r2, #32
 8007d70:	189b      	adds	r3, r3, r2
 8007d72:	19db      	adds	r3, r3, r7
 8007d74:	2200      	movs	r2, #0
 8007d76:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	431a      	orrs	r2, r3
 8007d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	431a      	orrs	r2, r3
 8007d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8a:	69db      	ldr	r3, [r3, #28]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4ac1      	ldr	r2, [pc, #772]	@ (800809c <UART_SetConfig+0x338>)
 8007d98:	4013      	ands	r3, r2
 8007d9a:	0019      	movs	r1, r3
 8007d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007da2:	430b      	orrs	r3, r1
 8007da4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	4abc      	ldr	r2, [pc, #752]	@ (80080a0 <UART_SetConfig+0x33c>)
 8007dae:	4013      	ands	r3, r2
 8007db0:	0018      	movs	r0, r3
 8007db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db4:	68d9      	ldr	r1, [r3, #12]
 8007db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	0003      	movs	r3, r0
 8007dbc:	430b      	orrs	r3, r1
 8007dbe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4ab6      	ldr	r2, [pc, #728]	@ (80080a4 <UART_SetConfig+0x340>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d009      	beq.n	8007de4 <UART_SetConfig+0x80>
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4ab4      	ldr	r2, [pc, #720]	@ (80080a8 <UART_SetConfig+0x344>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d004      	beq.n	8007de4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007de0:	4313      	orrs	r3, r2
 8007de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	4ab0      	ldr	r2, [pc, #704]	@ (80080ac <UART_SetConfig+0x348>)
 8007dec:	4013      	ands	r3, r2
 8007dee:	0019      	movs	r1, r3
 8007df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007df6:	430b      	orrs	r3, r1
 8007df8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e00:	220f      	movs	r2, #15
 8007e02:	4393      	bics	r3, r2
 8007e04:	0018      	movs	r0, r3
 8007e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e08:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	0003      	movs	r3, r0
 8007e10:	430b      	orrs	r3, r1
 8007e12:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4aa5      	ldr	r2, [pc, #660]	@ (80080b0 <UART_SetConfig+0x34c>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d131      	bne.n	8007e82 <UART_SetConfig+0x11e>
 8007e1e:	4ba5      	ldr	r3, [pc, #660]	@ (80080b4 <UART_SetConfig+0x350>)
 8007e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e22:	2203      	movs	r2, #3
 8007e24:	4013      	ands	r3, r2
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	d01d      	beq.n	8007e66 <UART_SetConfig+0x102>
 8007e2a:	d823      	bhi.n	8007e74 <UART_SetConfig+0x110>
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d00c      	beq.n	8007e4a <UART_SetConfig+0xe6>
 8007e30:	d820      	bhi.n	8007e74 <UART_SetConfig+0x110>
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d002      	beq.n	8007e3c <UART_SetConfig+0xd8>
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d00e      	beq.n	8007e58 <UART_SetConfig+0xf4>
 8007e3a:	e01b      	b.n	8007e74 <UART_SetConfig+0x110>
 8007e3c:	231b      	movs	r3, #27
 8007e3e:	2220      	movs	r2, #32
 8007e40:	189b      	adds	r3, r3, r2
 8007e42:	19db      	adds	r3, r3, r7
 8007e44:	2200      	movs	r2, #0
 8007e46:	701a      	strb	r2, [r3, #0]
 8007e48:	e154      	b.n	80080f4 <UART_SetConfig+0x390>
 8007e4a:	231b      	movs	r3, #27
 8007e4c:	2220      	movs	r2, #32
 8007e4e:	189b      	adds	r3, r3, r2
 8007e50:	19db      	adds	r3, r3, r7
 8007e52:	2202      	movs	r2, #2
 8007e54:	701a      	strb	r2, [r3, #0]
 8007e56:	e14d      	b.n	80080f4 <UART_SetConfig+0x390>
 8007e58:	231b      	movs	r3, #27
 8007e5a:	2220      	movs	r2, #32
 8007e5c:	189b      	adds	r3, r3, r2
 8007e5e:	19db      	adds	r3, r3, r7
 8007e60:	2204      	movs	r2, #4
 8007e62:	701a      	strb	r2, [r3, #0]
 8007e64:	e146      	b.n	80080f4 <UART_SetConfig+0x390>
 8007e66:	231b      	movs	r3, #27
 8007e68:	2220      	movs	r2, #32
 8007e6a:	189b      	adds	r3, r3, r2
 8007e6c:	19db      	adds	r3, r3, r7
 8007e6e:	2208      	movs	r2, #8
 8007e70:	701a      	strb	r2, [r3, #0]
 8007e72:	e13f      	b.n	80080f4 <UART_SetConfig+0x390>
 8007e74:	231b      	movs	r3, #27
 8007e76:	2220      	movs	r2, #32
 8007e78:	189b      	adds	r3, r3, r2
 8007e7a:	19db      	adds	r3, r3, r7
 8007e7c:	2210      	movs	r2, #16
 8007e7e:	701a      	strb	r2, [r3, #0]
 8007e80:	e138      	b.n	80080f4 <UART_SetConfig+0x390>
 8007e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a8c      	ldr	r2, [pc, #560]	@ (80080b8 <UART_SetConfig+0x354>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d131      	bne.n	8007ef0 <UART_SetConfig+0x18c>
 8007e8c:	4b89      	ldr	r3, [pc, #548]	@ (80080b4 <UART_SetConfig+0x350>)
 8007e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e90:	220c      	movs	r2, #12
 8007e92:	4013      	ands	r3, r2
 8007e94:	2b0c      	cmp	r3, #12
 8007e96:	d01d      	beq.n	8007ed4 <UART_SetConfig+0x170>
 8007e98:	d823      	bhi.n	8007ee2 <UART_SetConfig+0x17e>
 8007e9a:	2b08      	cmp	r3, #8
 8007e9c:	d00c      	beq.n	8007eb8 <UART_SetConfig+0x154>
 8007e9e:	d820      	bhi.n	8007ee2 <UART_SetConfig+0x17e>
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <UART_SetConfig+0x146>
 8007ea4:	2b04      	cmp	r3, #4
 8007ea6:	d00e      	beq.n	8007ec6 <UART_SetConfig+0x162>
 8007ea8:	e01b      	b.n	8007ee2 <UART_SetConfig+0x17e>
 8007eaa:	231b      	movs	r3, #27
 8007eac:	2220      	movs	r2, #32
 8007eae:	189b      	adds	r3, r3, r2
 8007eb0:	19db      	adds	r3, r3, r7
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	701a      	strb	r2, [r3, #0]
 8007eb6:	e11d      	b.n	80080f4 <UART_SetConfig+0x390>
 8007eb8:	231b      	movs	r3, #27
 8007eba:	2220      	movs	r2, #32
 8007ebc:	189b      	adds	r3, r3, r2
 8007ebe:	19db      	adds	r3, r3, r7
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	701a      	strb	r2, [r3, #0]
 8007ec4:	e116      	b.n	80080f4 <UART_SetConfig+0x390>
 8007ec6:	231b      	movs	r3, #27
 8007ec8:	2220      	movs	r2, #32
 8007eca:	189b      	adds	r3, r3, r2
 8007ecc:	19db      	adds	r3, r3, r7
 8007ece:	2204      	movs	r2, #4
 8007ed0:	701a      	strb	r2, [r3, #0]
 8007ed2:	e10f      	b.n	80080f4 <UART_SetConfig+0x390>
 8007ed4:	231b      	movs	r3, #27
 8007ed6:	2220      	movs	r2, #32
 8007ed8:	189b      	adds	r3, r3, r2
 8007eda:	19db      	adds	r3, r3, r7
 8007edc:	2208      	movs	r2, #8
 8007ede:	701a      	strb	r2, [r3, #0]
 8007ee0:	e108      	b.n	80080f4 <UART_SetConfig+0x390>
 8007ee2:	231b      	movs	r3, #27
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	189b      	adds	r3, r3, r2
 8007ee8:	19db      	adds	r3, r3, r7
 8007eea:	2210      	movs	r2, #16
 8007eec:	701a      	strb	r2, [r3, #0]
 8007eee:	e101      	b.n	80080f4 <UART_SetConfig+0x390>
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a71      	ldr	r2, [pc, #452]	@ (80080bc <UART_SetConfig+0x358>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d131      	bne.n	8007f5e <UART_SetConfig+0x1fa>
 8007efa:	4b6e      	ldr	r3, [pc, #440]	@ (80080b4 <UART_SetConfig+0x350>)
 8007efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007efe:	2230      	movs	r2, #48	@ 0x30
 8007f00:	4013      	ands	r3, r2
 8007f02:	2b30      	cmp	r3, #48	@ 0x30
 8007f04:	d01d      	beq.n	8007f42 <UART_SetConfig+0x1de>
 8007f06:	d823      	bhi.n	8007f50 <UART_SetConfig+0x1ec>
 8007f08:	2b20      	cmp	r3, #32
 8007f0a:	d00c      	beq.n	8007f26 <UART_SetConfig+0x1c2>
 8007f0c:	d820      	bhi.n	8007f50 <UART_SetConfig+0x1ec>
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d002      	beq.n	8007f18 <UART_SetConfig+0x1b4>
 8007f12:	2b10      	cmp	r3, #16
 8007f14:	d00e      	beq.n	8007f34 <UART_SetConfig+0x1d0>
 8007f16:	e01b      	b.n	8007f50 <UART_SetConfig+0x1ec>
 8007f18:	231b      	movs	r3, #27
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	189b      	adds	r3, r3, r2
 8007f1e:	19db      	adds	r3, r3, r7
 8007f20:	2200      	movs	r2, #0
 8007f22:	701a      	strb	r2, [r3, #0]
 8007f24:	e0e6      	b.n	80080f4 <UART_SetConfig+0x390>
 8007f26:	231b      	movs	r3, #27
 8007f28:	2220      	movs	r2, #32
 8007f2a:	189b      	adds	r3, r3, r2
 8007f2c:	19db      	adds	r3, r3, r7
 8007f2e:	2202      	movs	r2, #2
 8007f30:	701a      	strb	r2, [r3, #0]
 8007f32:	e0df      	b.n	80080f4 <UART_SetConfig+0x390>
 8007f34:	231b      	movs	r3, #27
 8007f36:	2220      	movs	r2, #32
 8007f38:	189b      	adds	r3, r3, r2
 8007f3a:	19db      	adds	r3, r3, r7
 8007f3c:	2204      	movs	r2, #4
 8007f3e:	701a      	strb	r2, [r3, #0]
 8007f40:	e0d8      	b.n	80080f4 <UART_SetConfig+0x390>
 8007f42:	231b      	movs	r3, #27
 8007f44:	2220      	movs	r2, #32
 8007f46:	189b      	adds	r3, r3, r2
 8007f48:	19db      	adds	r3, r3, r7
 8007f4a:	2208      	movs	r2, #8
 8007f4c:	701a      	strb	r2, [r3, #0]
 8007f4e:	e0d1      	b.n	80080f4 <UART_SetConfig+0x390>
 8007f50:	231b      	movs	r3, #27
 8007f52:	2220      	movs	r2, #32
 8007f54:	189b      	adds	r3, r3, r2
 8007f56:	19db      	adds	r3, r3, r7
 8007f58:	2210      	movs	r2, #16
 8007f5a:	701a      	strb	r2, [r3, #0]
 8007f5c:	e0ca      	b.n	80080f4 <UART_SetConfig+0x390>
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a57      	ldr	r2, [pc, #348]	@ (80080c0 <UART_SetConfig+0x35c>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d106      	bne.n	8007f76 <UART_SetConfig+0x212>
 8007f68:	231b      	movs	r3, #27
 8007f6a:	2220      	movs	r2, #32
 8007f6c:	189b      	adds	r3, r3, r2
 8007f6e:	19db      	adds	r3, r3, r7
 8007f70:	2200      	movs	r2, #0
 8007f72:	701a      	strb	r2, [r3, #0]
 8007f74:	e0be      	b.n	80080f4 <UART_SetConfig+0x390>
 8007f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a52      	ldr	r2, [pc, #328]	@ (80080c4 <UART_SetConfig+0x360>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d106      	bne.n	8007f8e <UART_SetConfig+0x22a>
 8007f80:	231b      	movs	r3, #27
 8007f82:	2220      	movs	r2, #32
 8007f84:	189b      	adds	r3, r3, r2
 8007f86:	19db      	adds	r3, r3, r7
 8007f88:	2200      	movs	r2, #0
 8007f8a:	701a      	strb	r2, [r3, #0]
 8007f8c:	e0b2      	b.n	80080f4 <UART_SetConfig+0x390>
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a4d      	ldr	r2, [pc, #308]	@ (80080c8 <UART_SetConfig+0x364>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d106      	bne.n	8007fa6 <UART_SetConfig+0x242>
 8007f98:	231b      	movs	r3, #27
 8007f9a:	2220      	movs	r2, #32
 8007f9c:	189b      	adds	r3, r3, r2
 8007f9e:	19db      	adds	r3, r3, r7
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	701a      	strb	r2, [r3, #0]
 8007fa4:	e0a6      	b.n	80080f4 <UART_SetConfig+0x390>
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a3e      	ldr	r2, [pc, #248]	@ (80080a4 <UART_SetConfig+0x340>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d13e      	bne.n	800802e <UART_SetConfig+0x2ca>
 8007fb0:	4b40      	ldr	r3, [pc, #256]	@ (80080b4 <UART_SetConfig+0x350>)
 8007fb2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007fb4:	23c0      	movs	r3, #192	@ 0xc0
 8007fb6:	011b      	lsls	r3, r3, #4
 8007fb8:	4013      	ands	r3, r2
 8007fba:	22c0      	movs	r2, #192	@ 0xc0
 8007fbc:	0112      	lsls	r2, r2, #4
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d027      	beq.n	8008012 <UART_SetConfig+0x2ae>
 8007fc2:	22c0      	movs	r2, #192	@ 0xc0
 8007fc4:	0112      	lsls	r2, r2, #4
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d82a      	bhi.n	8008020 <UART_SetConfig+0x2bc>
 8007fca:	2280      	movs	r2, #128	@ 0x80
 8007fcc:	0112      	lsls	r2, r2, #4
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d011      	beq.n	8007ff6 <UART_SetConfig+0x292>
 8007fd2:	2280      	movs	r2, #128	@ 0x80
 8007fd4:	0112      	lsls	r2, r2, #4
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d822      	bhi.n	8008020 <UART_SetConfig+0x2bc>
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d004      	beq.n	8007fe8 <UART_SetConfig+0x284>
 8007fde:	2280      	movs	r2, #128	@ 0x80
 8007fe0:	00d2      	lsls	r2, r2, #3
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d00e      	beq.n	8008004 <UART_SetConfig+0x2a0>
 8007fe6:	e01b      	b.n	8008020 <UART_SetConfig+0x2bc>
 8007fe8:	231b      	movs	r3, #27
 8007fea:	2220      	movs	r2, #32
 8007fec:	189b      	adds	r3, r3, r2
 8007fee:	19db      	adds	r3, r3, r7
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	701a      	strb	r2, [r3, #0]
 8007ff4:	e07e      	b.n	80080f4 <UART_SetConfig+0x390>
 8007ff6:	231b      	movs	r3, #27
 8007ff8:	2220      	movs	r2, #32
 8007ffa:	189b      	adds	r3, r3, r2
 8007ffc:	19db      	adds	r3, r3, r7
 8007ffe:	2202      	movs	r2, #2
 8008000:	701a      	strb	r2, [r3, #0]
 8008002:	e077      	b.n	80080f4 <UART_SetConfig+0x390>
 8008004:	231b      	movs	r3, #27
 8008006:	2220      	movs	r2, #32
 8008008:	189b      	adds	r3, r3, r2
 800800a:	19db      	adds	r3, r3, r7
 800800c:	2204      	movs	r2, #4
 800800e:	701a      	strb	r2, [r3, #0]
 8008010:	e070      	b.n	80080f4 <UART_SetConfig+0x390>
 8008012:	231b      	movs	r3, #27
 8008014:	2220      	movs	r2, #32
 8008016:	189b      	adds	r3, r3, r2
 8008018:	19db      	adds	r3, r3, r7
 800801a:	2208      	movs	r2, #8
 800801c:	701a      	strb	r2, [r3, #0]
 800801e:	e069      	b.n	80080f4 <UART_SetConfig+0x390>
 8008020:	231b      	movs	r3, #27
 8008022:	2220      	movs	r2, #32
 8008024:	189b      	adds	r3, r3, r2
 8008026:	19db      	adds	r3, r3, r7
 8008028:	2210      	movs	r2, #16
 800802a:	701a      	strb	r2, [r3, #0]
 800802c:	e062      	b.n	80080f4 <UART_SetConfig+0x390>
 800802e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a1d      	ldr	r2, [pc, #116]	@ (80080a8 <UART_SetConfig+0x344>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d157      	bne.n	80080e8 <UART_SetConfig+0x384>
 8008038:	4b1e      	ldr	r3, [pc, #120]	@ (80080b4 <UART_SetConfig+0x350>)
 800803a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800803c:	23c0      	movs	r3, #192	@ 0xc0
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4013      	ands	r3, r2
 8008042:	22c0      	movs	r2, #192	@ 0xc0
 8008044:	0092      	lsls	r2, r2, #2
 8008046:	4293      	cmp	r3, r2
 8008048:	d040      	beq.n	80080cc <UART_SetConfig+0x368>
 800804a:	22c0      	movs	r2, #192	@ 0xc0
 800804c:	0092      	lsls	r2, r2, #2
 800804e:	4293      	cmp	r3, r2
 8008050:	d843      	bhi.n	80080da <UART_SetConfig+0x376>
 8008052:	2280      	movs	r2, #128	@ 0x80
 8008054:	0092      	lsls	r2, r2, #2
 8008056:	4293      	cmp	r3, r2
 8008058:	d011      	beq.n	800807e <UART_SetConfig+0x31a>
 800805a:	2280      	movs	r2, #128	@ 0x80
 800805c:	0092      	lsls	r2, r2, #2
 800805e:	4293      	cmp	r3, r2
 8008060:	d83b      	bhi.n	80080da <UART_SetConfig+0x376>
 8008062:	2b00      	cmp	r3, #0
 8008064:	d004      	beq.n	8008070 <UART_SetConfig+0x30c>
 8008066:	2280      	movs	r2, #128	@ 0x80
 8008068:	0052      	lsls	r2, r2, #1
 800806a:	4293      	cmp	r3, r2
 800806c:	d00e      	beq.n	800808c <UART_SetConfig+0x328>
 800806e:	e034      	b.n	80080da <UART_SetConfig+0x376>
 8008070:	231b      	movs	r3, #27
 8008072:	2220      	movs	r2, #32
 8008074:	189b      	adds	r3, r3, r2
 8008076:	19db      	adds	r3, r3, r7
 8008078:	2200      	movs	r2, #0
 800807a:	701a      	strb	r2, [r3, #0]
 800807c:	e03a      	b.n	80080f4 <UART_SetConfig+0x390>
 800807e:	231b      	movs	r3, #27
 8008080:	2220      	movs	r2, #32
 8008082:	189b      	adds	r3, r3, r2
 8008084:	19db      	adds	r3, r3, r7
 8008086:	2202      	movs	r2, #2
 8008088:	701a      	strb	r2, [r3, #0]
 800808a:	e033      	b.n	80080f4 <UART_SetConfig+0x390>
 800808c:	231b      	movs	r3, #27
 800808e:	2220      	movs	r2, #32
 8008090:	189b      	adds	r3, r3, r2
 8008092:	19db      	adds	r3, r3, r7
 8008094:	2204      	movs	r2, #4
 8008096:	701a      	strb	r2, [r3, #0]
 8008098:	e02c      	b.n	80080f4 <UART_SetConfig+0x390>
 800809a:	46c0      	nop			@ (mov r8, r8)
 800809c:	cfff69f3 	.word	0xcfff69f3
 80080a0:	ffffcfff 	.word	0xffffcfff
 80080a4:	40008000 	.word	0x40008000
 80080a8:	40008400 	.word	0x40008400
 80080ac:	11fff4ff 	.word	0x11fff4ff
 80080b0:	40013800 	.word	0x40013800
 80080b4:	40021000 	.word	0x40021000
 80080b8:	40004400 	.word	0x40004400
 80080bc:	40004800 	.word	0x40004800
 80080c0:	40004c00 	.word	0x40004c00
 80080c4:	40005000 	.word	0x40005000
 80080c8:	40013c00 	.word	0x40013c00
 80080cc:	231b      	movs	r3, #27
 80080ce:	2220      	movs	r2, #32
 80080d0:	189b      	adds	r3, r3, r2
 80080d2:	19db      	adds	r3, r3, r7
 80080d4:	2208      	movs	r2, #8
 80080d6:	701a      	strb	r2, [r3, #0]
 80080d8:	e00c      	b.n	80080f4 <UART_SetConfig+0x390>
 80080da:	231b      	movs	r3, #27
 80080dc:	2220      	movs	r2, #32
 80080de:	189b      	adds	r3, r3, r2
 80080e0:	19db      	adds	r3, r3, r7
 80080e2:	2210      	movs	r2, #16
 80080e4:	701a      	strb	r2, [r3, #0]
 80080e6:	e005      	b.n	80080f4 <UART_SetConfig+0x390>
 80080e8:	231b      	movs	r3, #27
 80080ea:	2220      	movs	r2, #32
 80080ec:	189b      	adds	r3, r3, r2
 80080ee:	19db      	adds	r3, r3, r7
 80080f0:	2210      	movs	r2, #16
 80080f2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80080f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4ac1      	ldr	r2, [pc, #772]	@ (8008400 <UART_SetConfig+0x69c>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d005      	beq.n	800810a <UART_SetConfig+0x3a6>
 80080fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4ac0      	ldr	r2, [pc, #768]	@ (8008404 <UART_SetConfig+0x6a0>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d000      	beq.n	800810a <UART_SetConfig+0x3a6>
 8008108:	e093      	b.n	8008232 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800810a:	231b      	movs	r3, #27
 800810c:	2220      	movs	r2, #32
 800810e:	189b      	adds	r3, r3, r2
 8008110:	19db      	adds	r3, r3, r7
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	2b08      	cmp	r3, #8
 8008116:	d015      	beq.n	8008144 <UART_SetConfig+0x3e0>
 8008118:	dc18      	bgt.n	800814c <UART_SetConfig+0x3e8>
 800811a:	2b04      	cmp	r3, #4
 800811c:	d00d      	beq.n	800813a <UART_SetConfig+0x3d6>
 800811e:	dc15      	bgt.n	800814c <UART_SetConfig+0x3e8>
 8008120:	2b00      	cmp	r3, #0
 8008122:	d002      	beq.n	800812a <UART_SetConfig+0x3c6>
 8008124:	2b02      	cmp	r3, #2
 8008126:	d005      	beq.n	8008134 <UART_SetConfig+0x3d0>
 8008128:	e010      	b.n	800814c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800812a:	f7fd fd39 	bl	8005ba0 <HAL_RCC_GetPCLK1Freq>
 800812e:	0003      	movs	r3, r0
 8008130:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008132:	e014      	b.n	800815e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008134:	4bb4      	ldr	r3, [pc, #720]	@ (8008408 <UART_SetConfig+0x6a4>)
 8008136:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008138:	e011      	b.n	800815e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800813a:	f7fd fca5 	bl	8005a88 <HAL_RCC_GetSysClockFreq>
 800813e:	0003      	movs	r3, r0
 8008140:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008142:	e00c      	b.n	800815e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008144:	2380      	movs	r3, #128	@ 0x80
 8008146:	021b      	lsls	r3, r3, #8
 8008148:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800814a:	e008      	b.n	800815e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800814c:	2300      	movs	r3, #0
 800814e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8008150:	231a      	movs	r3, #26
 8008152:	2220      	movs	r2, #32
 8008154:	189b      	adds	r3, r3, r2
 8008156:	19db      	adds	r3, r3, r7
 8008158:	2201      	movs	r2, #1
 800815a:	701a      	strb	r2, [r3, #0]
        break;
 800815c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800815e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008160:	2b00      	cmp	r3, #0
 8008162:	d100      	bne.n	8008166 <UART_SetConfig+0x402>
 8008164:	e135      	b.n	80083d2 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008168:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800816a:	4ba8      	ldr	r3, [pc, #672]	@ (800840c <UART_SetConfig+0x6a8>)
 800816c:	0052      	lsls	r2, r2, #1
 800816e:	5ad3      	ldrh	r3, [r2, r3]
 8008170:	0019      	movs	r1, r3
 8008172:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008174:	f7f7 ffd8 	bl	8000128 <__udivsi3>
 8008178:	0003      	movs	r3, r0
 800817a:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800817c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	0013      	movs	r3, r2
 8008182:	005b      	lsls	r3, r3, #1
 8008184:	189b      	adds	r3, r3, r2
 8008186:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008188:	429a      	cmp	r2, r3
 800818a:	d305      	bcc.n	8008198 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800818c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008192:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008194:	429a      	cmp	r2, r3
 8008196:	d906      	bls.n	80081a6 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8008198:	231a      	movs	r3, #26
 800819a:	2220      	movs	r2, #32
 800819c:	189b      	adds	r3, r3, r2
 800819e:	19db      	adds	r3, r3, r7
 80081a0:	2201      	movs	r2, #1
 80081a2:	701a      	strb	r2, [r3, #0]
 80081a4:	e044      	b.n	8008230 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081a8:	61bb      	str	r3, [r7, #24]
 80081aa:	2300      	movs	r3, #0
 80081ac:	61fb      	str	r3, [r7, #28]
 80081ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081b2:	4b96      	ldr	r3, [pc, #600]	@ (800840c <UART_SetConfig+0x6a8>)
 80081b4:	0052      	lsls	r2, r2, #1
 80081b6:	5ad3      	ldrh	r3, [r2, r3]
 80081b8:	613b      	str	r3, [r7, #16]
 80081ba:	2300      	movs	r3, #0
 80081bc:	617b      	str	r3, [r7, #20]
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	69b8      	ldr	r0, [r7, #24]
 80081c4:	69f9      	ldr	r1, [r7, #28]
 80081c6:	f7f8 f963 	bl	8000490 <__aeabi_uldivmod>
 80081ca:	0002      	movs	r2, r0
 80081cc:	000b      	movs	r3, r1
 80081ce:	0e11      	lsrs	r1, r2, #24
 80081d0:	021d      	lsls	r5, r3, #8
 80081d2:	430d      	orrs	r5, r1
 80081d4:	0214      	lsls	r4, r2, #8
 80081d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	085b      	lsrs	r3, r3, #1
 80081dc:	60bb      	str	r3, [r7, #8]
 80081de:	2300      	movs	r3, #0
 80081e0:	60fb      	str	r3, [r7, #12]
 80081e2:	68b8      	ldr	r0, [r7, #8]
 80081e4:	68f9      	ldr	r1, [r7, #12]
 80081e6:	1900      	adds	r0, r0, r4
 80081e8:	4169      	adcs	r1, r5
 80081ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	603b      	str	r3, [r7, #0]
 80081f0:	2300      	movs	r3, #0
 80081f2:	607b      	str	r3, [r7, #4]
 80081f4:	683a      	ldr	r2, [r7, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f7f8 f94a 	bl	8000490 <__aeabi_uldivmod>
 80081fc:	0002      	movs	r2, r0
 80081fe:	000b      	movs	r3, r1
 8008200:	0013      	movs	r3, r2
 8008202:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008204:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008206:	23c0      	movs	r3, #192	@ 0xc0
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	429a      	cmp	r2, r3
 800820c:	d309      	bcc.n	8008222 <UART_SetConfig+0x4be>
 800820e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008210:	2380      	movs	r3, #128	@ 0x80
 8008212:	035b      	lsls	r3, r3, #13
 8008214:	429a      	cmp	r2, r3
 8008216:	d204      	bcs.n	8008222 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8008218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800821e:	60da      	str	r2, [r3, #12]
 8008220:	e006      	b.n	8008230 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8008222:	231a      	movs	r3, #26
 8008224:	2220      	movs	r2, #32
 8008226:	189b      	adds	r3, r3, r2
 8008228:	19db      	adds	r3, r3, r7
 800822a:	2201      	movs	r2, #1
 800822c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800822e:	e0d0      	b.n	80083d2 <UART_SetConfig+0x66e>
 8008230:	e0cf      	b.n	80083d2 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008234:	69da      	ldr	r2, [r3, #28]
 8008236:	2380      	movs	r3, #128	@ 0x80
 8008238:	021b      	lsls	r3, r3, #8
 800823a:	429a      	cmp	r2, r3
 800823c:	d000      	beq.n	8008240 <UART_SetConfig+0x4dc>
 800823e:	e070      	b.n	8008322 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8008240:	231b      	movs	r3, #27
 8008242:	2220      	movs	r2, #32
 8008244:	189b      	adds	r3, r3, r2
 8008246:	19db      	adds	r3, r3, r7
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	2b08      	cmp	r3, #8
 800824c:	d015      	beq.n	800827a <UART_SetConfig+0x516>
 800824e:	dc18      	bgt.n	8008282 <UART_SetConfig+0x51e>
 8008250:	2b04      	cmp	r3, #4
 8008252:	d00d      	beq.n	8008270 <UART_SetConfig+0x50c>
 8008254:	dc15      	bgt.n	8008282 <UART_SetConfig+0x51e>
 8008256:	2b00      	cmp	r3, #0
 8008258:	d002      	beq.n	8008260 <UART_SetConfig+0x4fc>
 800825a:	2b02      	cmp	r3, #2
 800825c:	d005      	beq.n	800826a <UART_SetConfig+0x506>
 800825e:	e010      	b.n	8008282 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008260:	f7fd fc9e 	bl	8005ba0 <HAL_RCC_GetPCLK1Freq>
 8008264:	0003      	movs	r3, r0
 8008266:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008268:	e014      	b.n	8008294 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800826a:	4b67      	ldr	r3, [pc, #412]	@ (8008408 <UART_SetConfig+0x6a4>)
 800826c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800826e:	e011      	b.n	8008294 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008270:	f7fd fc0a 	bl	8005a88 <HAL_RCC_GetSysClockFreq>
 8008274:	0003      	movs	r3, r0
 8008276:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008278:	e00c      	b.n	8008294 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800827a:	2380      	movs	r3, #128	@ 0x80
 800827c:	021b      	lsls	r3, r3, #8
 800827e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008280:	e008      	b.n	8008294 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8008282:	2300      	movs	r3, #0
 8008284:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8008286:	231a      	movs	r3, #26
 8008288:	2220      	movs	r2, #32
 800828a:	189b      	adds	r3, r3, r2
 800828c:	19db      	adds	r3, r3, r7
 800828e:	2201      	movs	r2, #1
 8008290:	701a      	strb	r2, [r3, #0]
        break;
 8008292:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008296:	2b00      	cmp	r3, #0
 8008298:	d100      	bne.n	800829c <UART_SetConfig+0x538>
 800829a:	e09a      	b.n	80083d2 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800829c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800829e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082a0:	4b5a      	ldr	r3, [pc, #360]	@ (800840c <UART_SetConfig+0x6a8>)
 80082a2:	0052      	lsls	r2, r2, #1
 80082a4:	5ad3      	ldrh	r3, [r2, r3]
 80082a6:	0019      	movs	r1, r3
 80082a8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80082aa:	f7f7 ff3d 	bl	8000128 <__udivsi3>
 80082ae:	0003      	movs	r3, r0
 80082b0:	005a      	lsls	r2, r3, #1
 80082b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	085b      	lsrs	r3, r3, #1
 80082b8:	18d2      	adds	r2, r2, r3
 80082ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	0019      	movs	r1, r3
 80082c0:	0010      	movs	r0, r2
 80082c2:	f7f7 ff31 	bl	8000128 <__udivsi3>
 80082c6:	0003      	movs	r3, r0
 80082c8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082cc:	2b0f      	cmp	r3, #15
 80082ce:	d921      	bls.n	8008314 <UART_SetConfig+0x5b0>
 80082d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082d2:	2380      	movs	r3, #128	@ 0x80
 80082d4:	025b      	lsls	r3, r3, #9
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d21c      	bcs.n	8008314 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082dc:	b29a      	uxth	r2, r3
 80082de:	200e      	movs	r0, #14
 80082e0:	2420      	movs	r4, #32
 80082e2:	1903      	adds	r3, r0, r4
 80082e4:	19db      	adds	r3, r3, r7
 80082e6:	210f      	movs	r1, #15
 80082e8:	438a      	bics	r2, r1
 80082ea:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ee:	085b      	lsrs	r3, r3, #1
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	2207      	movs	r2, #7
 80082f4:	4013      	ands	r3, r2
 80082f6:	b299      	uxth	r1, r3
 80082f8:	1903      	adds	r3, r0, r4
 80082fa:	19db      	adds	r3, r3, r7
 80082fc:	1902      	adds	r2, r0, r4
 80082fe:	19d2      	adds	r2, r2, r7
 8008300:	8812      	ldrh	r2, [r2, #0]
 8008302:	430a      	orrs	r2, r1
 8008304:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	1902      	adds	r2, r0, r4
 800830c:	19d2      	adds	r2, r2, r7
 800830e:	8812      	ldrh	r2, [r2, #0]
 8008310:	60da      	str	r2, [r3, #12]
 8008312:	e05e      	b.n	80083d2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8008314:	231a      	movs	r3, #26
 8008316:	2220      	movs	r2, #32
 8008318:	189b      	adds	r3, r3, r2
 800831a:	19db      	adds	r3, r3, r7
 800831c:	2201      	movs	r2, #1
 800831e:	701a      	strb	r2, [r3, #0]
 8008320:	e057      	b.n	80083d2 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008322:	231b      	movs	r3, #27
 8008324:	2220      	movs	r2, #32
 8008326:	189b      	adds	r3, r3, r2
 8008328:	19db      	adds	r3, r3, r7
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	2b08      	cmp	r3, #8
 800832e:	d015      	beq.n	800835c <UART_SetConfig+0x5f8>
 8008330:	dc18      	bgt.n	8008364 <UART_SetConfig+0x600>
 8008332:	2b04      	cmp	r3, #4
 8008334:	d00d      	beq.n	8008352 <UART_SetConfig+0x5ee>
 8008336:	dc15      	bgt.n	8008364 <UART_SetConfig+0x600>
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <UART_SetConfig+0x5de>
 800833c:	2b02      	cmp	r3, #2
 800833e:	d005      	beq.n	800834c <UART_SetConfig+0x5e8>
 8008340:	e010      	b.n	8008364 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008342:	f7fd fc2d 	bl	8005ba0 <HAL_RCC_GetPCLK1Freq>
 8008346:	0003      	movs	r3, r0
 8008348:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800834a:	e014      	b.n	8008376 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800834c:	4b2e      	ldr	r3, [pc, #184]	@ (8008408 <UART_SetConfig+0x6a4>)
 800834e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008350:	e011      	b.n	8008376 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008352:	f7fd fb99 	bl	8005a88 <HAL_RCC_GetSysClockFreq>
 8008356:	0003      	movs	r3, r0
 8008358:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800835a:	e00c      	b.n	8008376 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800835c:	2380      	movs	r3, #128	@ 0x80
 800835e:	021b      	lsls	r3, r3, #8
 8008360:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008362:	e008      	b.n	8008376 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8008364:	2300      	movs	r3, #0
 8008366:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8008368:	231a      	movs	r3, #26
 800836a:	2220      	movs	r2, #32
 800836c:	189b      	adds	r3, r3, r2
 800836e:	19db      	adds	r3, r3, r7
 8008370:	2201      	movs	r2, #1
 8008372:	701a      	strb	r2, [r3, #0]
        break;
 8008374:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8008376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008378:	2b00      	cmp	r3, #0
 800837a:	d02a      	beq.n	80083d2 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800837c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008380:	4b22      	ldr	r3, [pc, #136]	@ (800840c <UART_SetConfig+0x6a8>)
 8008382:	0052      	lsls	r2, r2, #1
 8008384:	5ad3      	ldrh	r3, [r2, r3]
 8008386:	0019      	movs	r1, r3
 8008388:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800838a:	f7f7 fecd 	bl	8000128 <__udivsi3>
 800838e:	0003      	movs	r3, r0
 8008390:	001a      	movs	r2, r3
 8008392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	085b      	lsrs	r3, r3, #1
 8008398:	18d2      	adds	r2, r2, r3
 800839a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	0019      	movs	r1, r3
 80083a0:	0010      	movs	r0, r2
 80083a2:	f7f7 fec1 	bl	8000128 <__udivsi3>
 80083a6:	0003      	movs	r3, r0
 80083a8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ac:	2b0f      	cmp	r3, #15
 80083ae:	d90a      	bls.n	80083c6 <UART_SetConfig+0x662>
 80083b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083b2:	2380      	movs	r3, #128	@ 0x80
 80083b4:	025b      	lsls	r3, r3, #9
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d205      	bcs.n	80083c6 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083bc:	b29a      	uxth	r2, r3
 80083be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	60da      	str	r2, [r3, #12]
 80083c4:	e005      	b.n	80083d2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80083c6:	231a      	movs	r3, #26
 80083c8:	2220      	movs	r2, #32
 80083ca:	189b      	adds	r3, r3, r2
 80083cc:	19db      	adds	r3, r3, r7
 80083ce:	2201      	movs	r2, #1
 80083d0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80083d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d4:	226a      	movs	r2, #106	@ 0x6a
 80083d6:	2101      	movs	r1, #1
 80083d8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80083da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083dc:	2268      	movs	r2, #104	@ 0x68
 80083de:	2101      	movs	r1, #1
 80083e0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e4:	2200      	movs	r2, #0
 80083e6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80083e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ea:	2200      	movs	r2, #0
 80083ec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80083ee:	231a      	movs	r3, #26
 80083f0:	2220      	movs	r2, #32
 80083f2:	189b      	adds	r3, r3, r2
 80083f4:	19db      	adds	r3, r3, r7
 80083f6:	781b      	ldrb	r3, [r3, #0]
}
 80083f8:	0018      	movs	r0, r3
 80083fa:	46bd      	mov	sp, r7
 80083fc:	b010      	add	sp, #64	@ 0x40
 80083fe:	bdb0      	pop	{r4, r5, r7, pc}
 8008400:	40008000 	.word	0x40008000
 8008404:	40008400 	.word	0x40008400
 8008408:	00f42400 	.word	0x00f42400
 800840c:	08009e70 	.word	0x08009e70

08008410 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800841c:	2208      	movs	r2, #8
 800841e:	4013      	ands	r3, r2
 8008420:	d00b      	beq.n	800843a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	4a4a      	ldr	r2, [pc, #296]	@ (8008554 <UART_AdvFeatureConfig+0x144>)
 800842a:	4013      	ands	r3, r2
 800842c:	0019      	movs	r1, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	430a      	orrs	r2, r1
 8008438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800843e:	2201      	movs	r2, #1
 8008440:	4013      	ands	r3, r2
 8008442:	d00b      	beq.n	800845c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	4a43      	ldr	r2, [pc, #268]	@ (8008558 <UART_AdvFeatureConfig+0x148>)
 800844c:	4013      	ands	r3, r2
 800844e:	0019      	movs	r1, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	430a      	orrs	r2, r1
 800845a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008460:	2202      	movs	r2, #2
 8008462:	4013      	ands	r3, r2
 8008464:	d00b      	beq.n	800847e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	4a3b      	ldr	r2, [pc, #236]	@ (800855c <UART_AdvFeatureConfig+0x14c>)
 800846e:	4013      	ands	r3, r2
 8008470:	0019      	movs	r1, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	430a      	orrs	r2, r1
 800847c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008482:	2204      	movs	r2, #4
 8008484:	4013      	ands	r3, r2
 8008486:	d00b      	beq.n	80084a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	4a34      	ldr	r2, [pc, #208]	@ (8008560 <UART_AdvFeatureConfig+0x150>)
 8008490:	4013      	ands	r3, r2
 8008492:	0019      	movs	r1, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	430a      	orrs	r2, r1
 800849e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a4:	2210      	movs	r2, #16
 80084a6:	4013      	ands	r3, r2
 80084a8:	d00b      	beq.n	80084c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	4a2c      	ldr	r2, [pc, #176]	@ (8008564 <UART_AdvFeatureConfig+0x154>)
 80084b2:	4013      	ands	r3, r2
 80084b4:	0019      	movs	r1, r3
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	430a      	orrs	r2, r1
 80084c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c6:	2220      	movs	r2, #32
 80084c8:	4013      	ands	r3, r2
 80084ca:	d00b      	beq.n	80084e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	4a25      	ldr	r2, [pc, #148]	@ (8008568 <UART_AdvFeatureConfig+0x158>)
 80084d4:	4013      	ands	r3, r2
 80084d6:	0019      	movs	r1, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	430a      	orrs	r2, r1
 80084e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e8:	2240      	movs	r2, #64	@ 0x40
 80084ea:	4013      	ands	r3, r2
 80084ec:	d01d      	beq.n	800852a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	4a1d      	ldr	r2, [pc, #116]	@ (800856c <UART_AdvFeatureConfig+0x15c>)
 80084f6:	4013      	ands	r3, r2
 80084f8:	0019      	movs	r1, r3
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	430a      	orrs	r2, r1
 8008504:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800850a:	2380      	movs	r3, #128	@ 0x80
 800850c:	035b      	lsls	r3, r3, #13
 800850e:	429a      	cmp	r2, r3
 8008510:	d10b      	bne.n	800852a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	4a15      	ldr	r2, [pc, #84]	@ (8008570 <UART_AdvFeatureConfig+0x160>)
 800851a:	4013      	ands	r3, r2
 800851c:	0019      	movs	r1, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	430a      	orrs	r2, r1
 8008528:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800852e:	2280      	movs	r2, #128	@ 0x80
 8008530:	4013      	ands	r3, r2
 8008532:	d00b      	beq.n	800854c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	4a0e      	ldr	r2, [pc, #56]	@ (8008574 <UART_AdvFeatureConfig+0x164>)
 800853c:	4013      	ands	r3, r2
 800853e:	0019      	movs	r1, r3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	430a      	orrs	r2, r1
 800854a:	605a      	str	r2, [r3, #4]
  }
}
 800854c:	46c0      	nop			@ (mov r8, r8)
 800854e:	46bd      	mov	sp, r7
 8008550:	b002      	add	sp, #8
 8008552:	bd80      	pop	{r7, pc}
 8008554:	ffff7fff 	.word	0xffff7fff
 8008558:	fffdffff 	.word	0xfffdffff
 800855c:	fffeffff 	.word	0xfffeffff
 8008560:	fffbffff 	.word	0xfffbffff
 8008564:	ffffefff 	.word	0xffffefff
 8008568:	ffffdfff 	.word	0xffffdfff
 800856c:	ffefffff 	.word	0xffefffff
 8008570:	ff9fffff 	.word	0xff9fffff
 8008574:	fff7ffff 	.word	0xfff7ffff

08008578 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b092      	sub	sp, #72	@ 0x48
 800857c:	af02      	add	r7, sp, #8
 800857e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2290      	movs	r2, #144	@ 0x90
 8008584:	2100      	movs	r1, #0
 8008586:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008588:	f7fb fce8 	bl	8003f5c <HAL_GetTick>
 800858c:	0003      	movs	r3, r0
 800858e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2208      	movs	r2, #8
 8008598:	4013      	ands	r3, r2
 800859a:	2b08      	cmp	r3, #8
 800859c:	d12d      	bne.n	80085fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800859e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085a0:	2280      	movs	r2, #128	@ 0x80
 80085a2:	0391      	lsls	r1, r2, #14
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	4a47      	ldr	r2, [pc, #284]	@ (80086c4 <UART_CheckIdleState+0x14c>)
 80085a8:	9200      	str	r2, [sp, #0]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f000 f88e 	bl	80086cc <UART_WaitOnFlagUntilTimeout>
 80085b0:	1e03      	subs	r3, r0, #0
 80085b2:	d022      	beq.n	80085fa <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085b4:	f3ef 8310 	mrs	r3, PRIMASK
 80085b8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80085ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80085bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085be:	2301      	movs	r3, #1
 80085c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c4:	f383 8810 	msr	PRIMASK, r3
}
 80085c8:	46c0      	nop			@ (mov r8, r8)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2180      	movs	r1, #128	@ 0x80
 80085d6:	438a      	bics	r2, r1
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085e0:	f383 8810 	msr	PRIMASK, r3
}
 80085e4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2288      	movs	r2, #136	@ 0x88
 80085ea:	2120      	movs	r1, #32
 80085ec:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2284      	movs	r2, #132	@ 0x84
 80085f2:	2100      	movs	r1, #0
 80085f4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e060      	b.n	80086bc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2204      	movs	r2, #4
 8008602:	4013      	ands	r3, r2
 8008604:	2b04      	cmp	r3, #4
 8008606:	d146      	bne.n	8008696 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800860a:	2280      	movs	r2, #128	@ 0x80
 800860c:	03d1      	lsls	r1, r2, #15
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	4a2c      	ldr	r2, [pc, #176]	@ (80086c4 <UART_CheckIdleState+0x14c>)
 8008612:	9200      	str	r2, [sp, #0]
 8008614:	2200      	movs	r2, #0
 8008616:	f000 f859 	bl	80086cc <UART_WaitOnFlagUntilTimeout>
 800861a:	1e03      	subs	r3, r0, #0
 800861c:	d03b      	beq.n	8008696 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800861e:	f3ef 8310 	mrs	r3, PRIMASK
 8008622:	60fb      	str	r3, [r7, #12]
  return(result);
 8008624:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008626:	637b      	str	r3, [r7, #52]	@ 0x34
 8008628:	2301      	movs	r3, #1
 800862a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	f383 8810 	msr	PRIMASK, r3
}
 8008632:	46c0      	nop			@ (mov r8, r8)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4922      	ldr	r1, [pc, #136]	@ (80086c8 <UART_CheckIdleState+0x150>)
 8008640:	400a      	ands	r2, r1
 8008642:	601a      	str	r2, [r3, #0]
 8008644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008646:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	f383 8810 	msr	PRIMASK, r3
}
 800864e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008650:	f3ef 8310 	mrs	r3, PRIMASK
 8008654:	61bb      	str	r3, [r7, #24]
  return(result);
 8008656:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008658:	633b      	str	r3, [r7, #48]	@ 0x30
 800865a:	2301      	movs	r3, #1
 800865c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	f383 8810 	msr	PRIMASK, r3
}
 8008664:	46c0      	nop			@ (mov r8, r8)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	689a      	ldr	r2, [r3, #8]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2101      	movs	r1, #1
 8008672:	438a      	bics	r2, r1
 8008674:	609a      	str	r2, [r3, #8]
 8008676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008678:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800867a:	6a3b      	ldr	r3, [r7, #32]
 800867c:	f383 8810 	msr	PRIMASK, r3
}
 8008680:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	228c      	movs	r2, #140	@ 0x8c
 8008686:	2120      	movs	r1, #32
 8008688:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2284      	movs	r2, #132	@ 0x84
 800868e:	2100      	movs	r1, #0
 8008690:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e012      	b.n	80086bc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2288      	movs	r2, #136	@ 0x88
 800869a:	2120      	movs	r1, #32
 800869c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	228c      	movs	r2, #140	@ 0x8c
 80086a2:	2120      	movs	r1, #32
 80086a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2284      	movs	r2, #132	@ 0x84
 80086b6:	2100      	movs	r1, #0
 80086b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	0018      	movs	r0, r3
 80086be:	46bd      	mov	sp, r7
 80086c0:	b010      	add	sp, #64	@ 0x40
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	01ffffff 	.word	0x01ffffff
 80086c8:	fffffedf 	.word	0xfffffedf

080086cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	603b      	str	r3, [r7, #0]
 80086d8:	1dfb      	adds	r3, r7, #7
 80086da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086dc:	e051      	b.n	8008782 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	3301      	adds	r3, #1
 80086e2:	d04e      	beq.n	8008782 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086e4:	f7fb fc3a 	bl	8003f5c <HAL_GetTick>
 80086e8:	0002      	movs	r2, r0
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d302      	bcc.n	80086fa <UART_WaitOnFlagUntilTimeout+0x2e>
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80086fa:	2303      	movs	r3, #3
 80086fc:	e051      	b.n	80087a2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2204      	movs	r2, #4
 8008706:	4013      	ands	r3, r2
 8008708:	d03b      	beq.n	8008782 <UART_WaitOnFlagUntilTimeout+0xb6>
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	2b80      	cmp	r3, #128	@ 0x80
 800870e:	d038      	beq.n	8008782 <UART_WaitOnFlagUntilTimeout+0xb6>
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	2b40      	cmp	r3, #64	@ 0x40
 8008714:	d035      	beq.n	8008782 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	69db      	ldr	r3, [r3, #28]
 800871c:	2208      	movs	r2, #8
 800871e:	4013      	ands	r3, r2
 8008720:	2b08      	cmp	r3, #8
 8008722:	d111      	bne.n	8008748 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2208      	movs	r2, #8
 800872a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	0018      	movs	r0, r3
 8008730:	f000 f83c 	bl	80087ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2290      	movs	r2, #144	@ 0x90
 8008738:	2108      	movs	r1, #8
 800873a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2284      	movs	r2, #132	@ 0x84
 8008740:	2100      	movs	r1, #0
 8008742:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	e02c      	b.n	80087a2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	69da      	ldr	r2, [r3, #28]
 800874e:	2380      	movs	r3, #128	@ 0x80
 8008750:	011b      	lsls	r3, r3, #4
 8008752:	401a      	ands	r2, r3
 8008754:	2380      	movs	r3, #128	@ 0x80
 8008756:	011b      	lsls	r3, r3, #4
 8008758:	429a      	cmp	r2, r3
 800875a:	d112      	bne.n	8008782 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2280      	movs	r2, #128	@ 0x80
 8008762:	0112      	lsls	r2, r2, #4
 8008764:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	0018      	movs	r0, r3
 800876a:	f000 f81f 	bl	80087ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2290      	movs	r2, #144	@ 0x90
 8008772:	2120      	movs	r1, #32
 8008774:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2284      	movs	r2, #132	@ 0x84
 800877a:	2100      	movs	r1, #0
 800877c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800877e:	2303      	movs	r3, #3
 8008780:	e00f      	b.n	80087a2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	69db      	ldr	r3, [r3, #28]
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	4013      	ands	r3, r2
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	425a      	negs	r2, r3
 8008792:	4153      	adcs	r3, r2
 8008794:	b2db      	uxtb	r3, r3
 8008796:	001a      	movs	r2, r3
 8008798:	1dfb      	adds	r3, r7, #7
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	429a      	cmp	r2, r3
 800879e:	d09e      	beq.n	80086de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	0018      	movs	r0, r3
 80087a4:	46bd      	mov	sp, r7
 80087a6:	b004      	add	sp, #16
 80087a8:	bd80      	pop	{r7, pc}
	...

080087ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b08e      	sub	sp, #56	@ 0x38
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087b4:	f3ef 8310 	mrs	r3, PRIMASK
 80087b8:	617b      	str	r3, [r7, #20]
  return(result);
 80087ba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80087be:	2301      	movs	r3, #1
 80087c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	f383 8810 	msr	PRIMASK, r3
}
 80087c8:	46c0      	nop			@ (mov r8, r8)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4926      	ldr	r1, [pc, #152]	@ (8008870 <UART_EndRxTransfer+0xc4>)
 80087d6:	400a      	ands	r2, r1
 80087d8:	601a      	str	r2, [r3, #0]
 80087da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	f383 8810 	msr	PRIMASK, r3
}
 80087e4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087e6:	f3ef 8310 	mrs	r3, PRIMASK
 80087ea:	623b      	str	r3, [r7, #32]
  return(result);
 80087ec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80087f0:	2301      	movs	r3, #1
 80087f2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f6:	f383 8810 	msr	PRIMASK, r3
}
 80087fa:	46c0      	nop			@ (mov r8, r8)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	689a      	ldr	r2, [r3, #8]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	491b      	ldr	r1, [pc, #108]	@ (8008874 <UART_EndRxTransfer+0xc8>)
 8008808:	400a      	ands	r2, r1
 800880a:	609a      	str	r2, [r3, #8]
 800880c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008812:	f383 8810 	msr	PRIMASK, r3
}
 8008816:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800881c:	2b01      	cmp	r3, #1
 800881e:	d118      	bne.n	8008852 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008820:	f3ef 8310 	mrs	r3, PRIMASK
 8008824:	60bb      	str	r3, [r7, #8]
  return(result);
 8008826:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008828:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800882a:	2301      	movs	r3, #1
 800882c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f383 8810 	msr	PRIMASK, r3
}
 8008834:	46c0      	nop			@ (mov r8, r8)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2110      	movs	r1, #16
 8008842:	438a      	bics	r2, r1
 8008844:	601a      	str	r2, [r3, #0]
 8008846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008848:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	f383 8810 	msr	PRIMASK, r3
}
 8008850:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	228c      	movs	r2, #140	@ 0x8c
 8008856:	2120      	movs	r1, #32
 8008858:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008866:	46c0      	nop			@ (mov r8, r8)
 8008868:	46bd      	mov	sp, r7
 800886a:	b00e      	add	sp, #56	@ 0x38
 800886c:	bd80      	pop	{r7, pc}
 800886e:	46c0      	nop			@ (mov r8, r8)
 8008870:	fffffedf 	.word	0xfffffedf
 8008874:	effffffe 	.word	0xeffffffe

08008878 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2284      	movs	r2, #132	@ 0x84
 8008884:	5c9b      	ldrb	r3, [r3, r2]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d101      	bne.n	800888e <HAL_UARTEx_DisableFifoMode+0x16>
 800888a:	2302      	movs	r3, #2
 800888c:	e027      	b.n	80088de <HAL_UARTEx_DisableFifoMode+0x66>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2284      	movs	r2, #132	@ 0x84
 8008892:	2101      	movs	r1, #1
 8008894:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2288      	movs	r2, #136	@ 0x88
 800889a:	2124      	movs	r1, #36	@ 0x24
 800889c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2101      	movs	r1, #1
 80088b2:	438a      	bics	r2, r1
 80088b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	4a0b      	ldr	r2, [pc, #44]	@ (80088e8 <HAL_UARTEx_DisableFifoMode+0x70>)
 80088ba:	4013      	ands	r3, r2
 80088bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2288      	movs	r2, #136	@ 0x88
 80088d0:	2120      	movs	r1, #32
 80088d2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2284      	movs	r2, #132	@ 0x84
 80088d8:	2100      	movs	r1, #0
 80088da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	0018      	movs	r0, r3
 80088e0:	46bd      	mov	sp, r7
 80088e2:	b004      	add	sp, #16
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	46c0      	nop			@ (mov r8, r8)
 80088e8:	dfffffff 	.word	0xdfffffff

080088ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2284      	movs	r2, #132	@ 0x84
 80088fa:	5c9b      	ldrb	r3, [r3, r2]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d101      	bne.n	8008904 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008900:	2302      	movs	r3, #2
 8008902:	e02e      	b.n	8008962 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2284      	movs	r2, #132	@ 0x84
 8008908:	2101      	movs	r1, #1
 800890a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2288      	movs	r2, #136	@ 0x88
 8008910:	2124      	movs	r1, #36	@ 0x24
 8008912:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2101      	movs	r1, #1
 8008928:	438a      	bics	r2, r1
 800892a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	00db      	lsls	r3, r3, #3
 8008934:	08d9      	lsrs	r1, r3, #3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	683a      	ldr	r2, [r7, #0]
 800893c:	430a      	orrs	r2, r1
 800893e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	0018      	movs	r0, r3
 8008944:	f000 f854 	bl	80089f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2288      	movs	r2, #136	@ 0x88
 8008954:	2120      	movs	r1, #32
 8008956:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2284      	movs	r2, #132	@ 0x84
 800895c:	2100      	movs	r1, #0
 800895e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	0018      	movs	r0, r3
 8008964:	46bd      	mov	sp, r7
 8008966:	b004      	add	sp, #16
 8008968:	bd80      	pop	{r7, pc}
	...

0800896c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2284      	movs	r2, #132	@ 0x84
 800897a:	5c9b      	ldrb	r3, [r3, r2]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d101      	bne.n	8008984 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008980:	2302      	movs	r3, #2
 8008982:	e02f      	b.n	80089e4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2284      	movs	r2, #132	@ 0x84
 8008988:	2101      	movs	r1, #1
 800898a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2288      	movs	r2, #136	@ 0x88
 8008990:	2124      	movs	r1, #36	@ 0x24
 8008992:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2101      	movs	r1, #1
 80089a8:	438a      	bics	r2, r1
 80089aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	4a0e      	ldr	r2, [pc, #56]	@ (80089ec <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80089b4:	4013      	ands	r3, r2
 80089b6:	0019      	movs	r1, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	683a      	ldr	r2, [r7, #0]
 80089be:	430a      	orrs	r2, r1
 80089c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	0018      	movs	r0, r3
 80089c6:	f000 f813 	bl	80089f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2288      	movs	r2, #136	@ 0x88
 80089d6:	2120      	movs	r1, #32
 80089d8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2284      	movs	r2, #132	@ 0x84
 80089de:	2100      	movs	r1, #0
 80089e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	0018      	movs	r0, r3
 80089e6:	46bd      	mov	sp, r7
 80089e8:	b004      	add	sp, #16
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	f1ffffff 	.word	0xf1ffffff

080089f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80089f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d108      	bne.n	8008a12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	226a      	movs	r2, #106	@ 0x6a
 8008a04:	2101      	movs	r1, #1
 8008a06:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2268      	movs	r2, #104	@ 0x68
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008a10:	e043      	b.n	8008a9a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008a12:	260f      	movs	r6, #15
 8008a14:	19bb      	adds	r3, r7, r6
 8008a16:	2208      	movs	r2, #8
 8008a18:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008a1a:	200e      	movs	r0, #14
 8008a1c:	183b      	adds	r3, r7, r0
 8008a1e:	2208      	movs	r2, #8
 8008a20:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	0e5b      	lsrs	r3, r3, #25
 8008a2a:	b2da      	uxtb	r2, r3
 8008a2c:	240d      	movs	r4, #13
 8008a2e:	193b      	adds	r3, r7, r4
 8008a30:	2107      	movs	r1, #7
 8008a32:	400a      	ands	r2, r1
 8008a34:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	0f5b      	lsrs	r3, r3, #29
 8008a3e:	b2da      	uxtb	r2, r3
 8008a40:	250c      	movs	r5, #12
 8008a42:	197b      	adds	r3, r7, r5
 8008a44:	2107      	movs	r1, #7
 8008a46:	400a      	ands	r2, r1
 8008a48:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a4a:	183b      	adds	r3, r7, r0
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	197a      	adds	r2, r7, r5
 8008a50:	7812      	ldrb	r2, [r2, #0]
 8008a52:	4914      	ldr	r1, [pc, #80]	@ (8008aa4 <UARTEx_SetNbDataToProcess+0xb4>)
 8008a54:	5c8a      	ldrb	r2, [r1, r2]
 8008a56:	435a      	muls	r2, r3
 8008a58:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008a5a:	197b      	adds	r3, r7, r5
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	4a12      	ldr	r2, [pc, #72]	@ (8008aa8 <UARTEx_SetNbDataToProcess+0xb8>)
 8008a60:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a62:	0019      	movs	r1, r3
 8008a64:	f7f7 fbea 	bl	800023c <__divsi3>
 8008a68:	0003      	movs	r3, r0
 8008a6a:	b299      	uxth	r1, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	226a      	movs	r2, #106	@ 0x6a
 8008a70:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a72:	19bb      	adds	r3, r7, r6
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	193a      	adds	r2, r7, r4
 8008a78:	7812      	ldrb	r2, [r2, #0]
 8008a7a:	490a      	ldr	r1, [pc, #40]	@ (8008aa4 <UARTEx_SetNbDataToProcess+0xb4>)
 8008a7c:	5c8a      	ldrb	r2, [r1, r2]
 8008a7e:	435a      	muls	r2, r3
 8008a80:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a82:	193b      	adds	r3, r7, r4
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	4a08      	ldr	r2, [pc, #32]	@ (8008aa8 <UARTEx_SetNbDataToProcess+0xb8>)
 8008a88:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a8a:	0019      	movs	r1, r3
 8008a8c:	f7f7 fbd6 	bl	800023c <__divsi3>
 8008a90:	0003      	movs	r3, r0
 8008a92:	b299      	uxth	r1, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2268      	movs	r2, #104	@ 0x68
 8008a98:	5299      	strh	r1, [r3, r2]
}
 8008a9a:	46c0      	nop			@ (mov r8, r8)
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	b005      	add	sp, #20
 8008aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aa2:	46c0      	nop			@ (mov r8, r8)
 8008aa4:	08009e88 	.word	0x08009e88
 8008aa8:	08009e90 	.word	0x08009e90

08008aac <siprintf>:
 8008aac:	b40e      	push	{r1, r2, r3}
 8008aae:	b500      	push	{lr}
 8008ab0:	490b      	ldr	r1, [pc, #44]	@ (8008ae0 <siprintf+0x34>)
 8008ab2:	b09c      	sub	sp, #112	@ 0x70
 8008ab4:	ab1d      	add	r3, sp, #116	@ 0x74
 8008ab6:	9002      	str	r0, [sp, #8]
 8008ab8:	9006      	str	r0, [sp, #24]
 8008aba:	9107      	str	r1, [sp, #28]
 8008abc:	9104      	str	r1, [sp, #16]
 8008abe:	4809      	ldr	r0, [pc, #36]	@ (8008ae4 <siprintf+0x38>)
 8008ac0:	4909      	ldr	r1, [pc, #36]	@ (8008ae8 <siprintf+0x3c>)
 8008ac2:	cb04      	ldmia	r3!, {r2}
 8008ac4:	9105      	str	r1, [sp, #20]
 8008ac6:	6800      	ldr	r0, [r0, #0]
 8008ac8:	a902      	add	r1, sp, #8
 8008aca:	9301      	str	r3, [sp, #4]
 8008acc:	f000 f9a8 	bl	8008e20 <_svfiprintf_r>
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	9b02      	ldr	r3, [sp, #8]
 8008ad4:	701a      	strb	r2, [r3, #0]
 8008ad6:	b01c      	add	sp, #112	@ 0x70
 8008ad8:	bc08      	pop	{r3}
 8008ada:	b003      	add	sp, #12
 8008adc:	4718      	bx	r3
 8008ade:	46c0      	nop			@ (mov r8, r8)
 8008ae0:	7fffffff 	.word	0x7fffffff
 8008ae4:	20000e90 	.word	0x20000e90
 8008ae8:	ffff0208 	.word	0xffff0208

08008aec <memset>:
 8008aec:	0003      	movs	r3, r0
 8008aee:	1882      	adds	r2, r0, r2
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d100      	bne.n	8008af6 <memset+0xa>
 8008af4:	4770      	bx	lr
 8008af6:	7019      	strb	r1, [r3, #0]
 8008af8:	3301      	adds	r3, #1
 8008afa:	e7f9      	b.n	8008af0 <memset+0x4>

08008afc <__errno>:
 8008afc:	4b01      	ldr	r3, [pc, #4]	@ (8008b04 <__errno+0x8>)
 8008afe:	6818      	ldr	r0, [r3, #0]
 8008b00:	4770      	bx	lr
 8008b02:	46c0      	nop			@ (mov r8, r8)
 8008b04:	20000e90 	.word	0x20000e90

08008b08 <__libc_init_array>:
 8008b08:	b570      	push	{r4, r5, r6, lr}
 8008b0a:	2600      	movs	r6, #0
 8008b0c:	4c0c      	ldr	r4, [pc, #48]	@ (8008b40 <__libc_init_array+0x38>)
 8008b0e:	4d0d      	ldr	r5, [pc, #52]	@ (8008b44 <__libc_init_array+0x3c>)
 8008b10:	1b64      	subs	r4, r4, r5
 8008b12:	10a4      	asrs	r4, r4, #2
 8008b14:	42a6      	cmp	r6, r4
 8008b16:	d109      	bne.n	8008b2c <__libc_init_array+0x24>
 8008b18:	2600      	movs	r6, #0
 8008b1a:	f000 fda5 	bl	8009668 <_init>
 8008b1e:	4c0a      	ldr	r4, [pc, #40]	@ (8008b48 <__libc_init_array+0x40>)
 8008b20:	4d0a      	ldr	r5, [pc, #40]	@ (8008b4c <__libc_init_array+0x44>)
 8008b22:	1b64      	subs	r4, r4, r5
 8008b24:	10a4      	asrs	r4, r4, #2
 8008b26:	42a6      	cmp	r6, r4
 8008b28:	d105      	bne.n	8008b36 <__libc_init_array+0x2e>
 8008b2a:	bd70      	pop	{r4, r5, r6, pc}
 8008b2c:	00b3      	lsls	r3, r6, #2
 8008b2e:	58eb      	ldr	r3, [r5, r3]
 8008b30:	4798      	blx	r3
 8008b32:	3601      	adds	r6, #1
 8008b34:	e7ee      	b.n	8008b14 <__libc_init_array+0xc>
 8008b36:	00b3      	lsls	r3, r6, #2
 8008b38:	58eb      	ldr	r3, [r5, r3]
 8008b3a:	4798      	blx	r3
 8008b3c:	3601      	adds	r6, #1
 8008b3e:	e7f2      	b.n	8008b26 <__libc_init_array+0x1e>
 8008b40:	08009ee8 	.word	0x08009ee8
 8008b44:	08009ee8 	.word	0x08009ee8
 8008b48:	08009eec 	.word	0x08009eec
 8008b4c:	08009ee8 	.word	0x08009ee8

08008b50 <__retarget_lock_acquire_recursive>:
 8008b50:	4770      	bx	lr

08008b52 <__retarget_lock_release_recursive>:
 8008b52:	4770      	bx	lr

08008b54 <memcpy>:
 8008b54:	2300      	movs	r3, #0
 8008b56:	b510      	push	{r4, lr}
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d100      	bne.n	8008b5e <memcpy+0xa>
 8008b5c:	bd10      	pop	{r4, pc}
 8008b5e:	5ccc      	ldrb	r4, [r1, r3]
 8008b60:	54c4      	strb	r4, [r0, r3]
 8008b62:	3301      	adds	r3, #1
 8008b64:	e7f8      	b.n	8008b58 <memcpy+0x4>
	...

08008b68 <_free_r>:
 8008b68:	b570      	push	{r4, r5, r6, lr}
 8008b6a:	0005      	movs	r5, r0
 8008b6c:	1e0c      	subs	r4, r1, #0
 8008b6e:	d010      	beq.n	8008b92 <_free_r+0x2a>
 8008b70:	3c04      	subs	r4, #4
 8008b72:	6823      	ldr	r3, [r4, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	da00      	bge.n	8008b7a <_free_r+0x12>
 8008b78:	18e4      	adds	r4, r4, r3
 8008b7a:	0028      	movs	r0, r5
 8008b7c:	f000 f8e0 	bl	8008d40 <__malloc_lock>
 8008b80:	4a1d      	ldr	r2, [pc, #116]	@ (8008bf8 <_free_r+0x90>)
 8008b82:	6813      	ldr	r3, [r2, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d105      	bne.n	8008b94 <_free_r+0x2c>
 8008b88:	6063      	str	r3, [r4, #4]
 8008b8a:	6014      	str	r4, [r2, #0]
 8008b8c:	0028      	movs	r0, r5
 8008b8e:	f000 f8df 	bl	8008d50 <__malloc_unlock>
 8008b92:	bd70      	pop	{r4, r5, r6, pc}
 8008b94:	42a3      	cmp	r3, r4
 8008b96:	d908      	bls.n	8008baa <_free_r+0x42>
 8008b98:	6820      	ldr	r0, [r4, #0]
 8008b9a:	1821      	adds	r1, r4, r0
 8008b9c:	428b      	cmp	r3, r1
 8008b9e:	d1f3      	bne.n	8008b88 <_free_r+0x20>
 8008ba0:	6819      	ldr	r1, [r3, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	1809      	adds	r1, r1, r0
 8008ba6:	6021      	str	r1, [r4, #0]
 8008ba8:	e7ee      	b.n	8008b88 <_free_r+0x20>
 8008baa:	001a      	movs	r2, r3
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d001      	beq.n	8008bb6 <_free_r+0x4e>
 8008bb2:	42a3      	cmp	r3, r4
 8008bb4:	d9f9      	bls.n	8008baa <_free_r+0x42>
 8008bb6:	6811      	ldr	r1, [r2, #0]
 8008bb8:	1850      	adds	r0, r2, r1
 8008bba:	42a0      	cmp	r0, r4
 8008bbc:	d10b      	bne.n	8008bd6 <_free_r+0x6e>
 8008bbe:	6820      	ldr	r0, [r4, #0]
 8008bc0:	1809      	adds	r1, r1, r0
 8008bc2:	1850      	adds	r0, r2, r1
 8008bc4:	6011      	str	r1, [r2, #0]
 8008bc6:	4283      	cmp	r3, r0
 8008bc8:	d1e0      	bne.n	8008b8c <_free_r+0x24>
 8008bca:	6818      	ldr	r0, [r3, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	1841      	adds	r1, r0, r1
 8008bd0:	6011      	str	r1, [r2, #0]
 8008bd2:	6053      	str	r3, [r2, #4]
 8008bd4:	e7da      	b.n	8008b8c <_free_r+0x24>
 8008bd6:	42a0      	cmp	r0, r4
 8008bd8:	d902      	bls.n	8008be0 <_free_r+0x78>
 8008bda:	230c      	movs	r3, #12
 8008bdc:	602b      	str	r3, [r5, #0]
 8008bde:	e7d5      	b.n	8008b8c <_free_r+0x24>
 8008be0:	6820      	ldr	r0, [r4, #0]
 8008be2:	1821      	adds	r1, r4, r0
 8008be4:	428b      	cmp	r3, r1
 8008be6:	d103      	bne.n	8008bf0 <_free_r+0x88>
 8008be8:	6819      	ldr	r1, [r3, #0]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	1809      	adds	r1, r1, r0
 8008bee:	6021      	str	r1, [r4, #0]
 8008bf0:	6063      	str	r3, [r4, #4]
 8008bf2:	6054      	str	r4, [r2, #4]
 8008bf4:	e7ca      	b.n	8008b8c <_free_r+0x24>
 8008bf6:	46c0      	nop			@ (mov r8, r8)
 8008bf8:	200016b0 	.word	0x200016b0

08008bfc <sbrk_aligned>:
 8008bfc:	b570      	push	{r4, r5, r6, lr}
 8008bfe:	4e0f      	ldr	r6, [pc, #60]	@ (8008c3c <sbrk_aligned+0x40>)
 8008c00:	000d      	movs	r5, r1
 8008c02:	6831      	ldr	r1, [r6, #0]
 8008c04:	0004      	movs	r4, r0
 8008c06:	2900      	cmp	r1, #0
 8008c08:	d102      	bne.n	8008c10 <sbrk_aligned+0x14>
 8008c0a:	f000 fb99 	bl	8009340 <_sbrk_r>
 8008c0e:	6030      	str	r0, [r6, #0]
 8008c10:	0029      	movs	r1, r5
 8008c12:	0020      	movs	r0, r4
 8008c14:	f000 fb94 	bl	8009340 <_sbrk_r>
 8008c18:	1c43      	adds	r3, r0, #1
 8008c1a:	d103      	bne.n	8008c24 <sbrk_aligned+0x28>
 8008c1c:	2501      	movs	r5, #1
 8008c1e:	426d      	negs	r5, r5
 8008c20:	0028      	movs	r0, r5
 8008c22:	bd70      	pop	{r4, r5, r6, pc}
 8008c24:	2303      	movs	r3, #3
 8008c26:	1cc5      	adds	r5, r0, #3
 8008c28:	439d      	bics	r5, r3
 8008c2a:	42a8      	cmp	r0, r5
 8008c2c:	d0f8      	beq.n	8008c20 <sbrk_aligned+0x24>
 8008c2e:	1a29      	subs	r1, r5, r0
 8008c30:	0020      	movs	r0, r4
 8008c32:	f000 fb85 	bl	8009340 <_sbrk_r>
 8008c36:	3001      	adds	r0, #1
 8008c38:	d1f2      	bne.n	8008c20 <sbrk_aligned+0x24>
 8008c3a:	e7ef      	b.n	8008c1c <sbrk_aligned+0x20>
 8008c3c:	200016ac 	.word	0x200016ac

08008c40 <_malloc_r>:
 8008c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c42:	2203      	movs	r2, #3
 8008c44:	1ccb      	adds	r3, r1, #3
 8008c46:	4393      	bics	r3, r2
 8008c48:	3308      	adds	r3, #8
 8008c4a:	0005      	movs	r5, r0
 8008c4c:	001f      	movs	r7, r3
 8008c4e:	2b0c      	cmp	r3, #12
 8008c50:	d234      	bcs.n	8008cbc <_malloc_r+0x7c>
 8008c52:	270c      	movs	r7, #12
 8008c54:	42b9      	cmp	r1, r7
 8008c56:	d833      	bhi.n	8008cc0 <_malloc_r+0x80>
 8008c58:	0028      	movs	r0, r5
 8008c5a:	f000 f871 	bl	8008d40 <__malloc_lock>
 8008c5e:	4e37      	ldr	r6, [pc, #220]	@ (8008d3c <_malloc_r+0xfc>)
 8008c60:	6833      	ldr	r3, [r6, #0]
 8008c62:	001c      	movs	r4, r3
 8008c64:	2c00      	cmp	r4, #0
 8008c66:	d12f      	bne.n	8008cc8 <_malloc_r+0x88>
 8008c68:	0039      	movs	r1, r7
 8008c6a:	0028      	movs	r0, r5
 8008c6c:	f7ff ffc6 	bl	8008bfc <sbrk_aligned>
 8008c70:	0004      	movs	r4, r0
 8008c72:	1c43      	adds	r3, r0, #1
 8008c74:	d15f      	bne.n	8008d36 <_malloc_r+0xf6>
 8008c76:	6834      	ldr	r4, [r6, #0]
 8008c78:	9400      	str	r4, [sp, #0]
 8008c7a:	9b00      	ldr	r3, [sp, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d14a      	bne.n	8008d16 <_malloc_r+0xd6>
 8008c80:	2c00      	cmp	r4, #0
 8008c82:	d052      	beq.n	8008d2a <_malloc_r+0xea>
 8008c84:	6823      	ldr	r3, [r4, #0]
 8008c86:	0028      	movs	r0, r5
 8008c88:	18e3      	adds	r3, r4, r3
 8008c8a:	9900      	ldr	r1, [sp, #0]
 8008c8c:	9301      	str	r3, [sp, #4]
 8008c8e:	f000 fb57 	bl	8009340 <_sbrk_r>
 8008c92:	9b01      	ldr	r3, [sp, #4]
 8008c94:	4283      	cmp	r3, r0
 8008c96:	d148      	bne.n	8008d2a <_malloc_r+0xea>
 8008c98:	6823      	ldr	r3, [r4, #0]
 8008c9a:	0028      	movs	r0, r5
 8008c9c:	1aff      	subs	r7, r7, r3
 8008c9e:	0039      	movs	r1, r7
 8008ca0:	f7ff ffac 	bl	8008bfc <sbrk_aligned>
 8008ca4:	3001      	adds	r0, #1
 8008ca6:	d040      	beq.n	8008d2a <_malloc_r+0xea>
 8008ca8:	6823      	ldr	r3, [r4, #0]
 8008caa:	19db      	adds	r3, r3, r7
 8008cac:	6023      	str	r3, [r4, #0]
 8008cae:	6833      	ldr	r3, [r6, #0]
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	2a00      	cmp	r2, #0
 8008cb4:	d133      	bne.n	8008d1e <_malloc_r+0xde>
 8008cb6:	9b00      	ldr	r3, [sp, #0]
 8008cb8:	6033      	str	r3, [r6, #0]
 8008cba:	e019      	b.n	8008cf0 <_malloc_r+0xb0>
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	dac9      	bge.n	8008c54 <_malloc_r+0x14>
 8008cc0:	230c      	movs	r3, #12
 8008cc2:	602b      	str	r3, [r5, #0]
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008cc8:	6821      	ldr	r1, [r4, #0]
 8008cca:	1bc9      	subs	r1, r1, r7
 8008ccc:	d420      	bmi.n	8008d10 <_malloc_r+0xd0>
 8008cce:	290b      	cmp	r1, #11
 8008cd0:	d90a      	bls.n	8008ce8 <_malloc_r+0xa8>
 8008cd2:	19e2      	adds	r2, r4, r7
 8008cd4:	6027      	str	r7, [r4, #0]
 8008cd6:	42a3      	cmp	r3, r4
 8008cd8:	d104      	bne.n	8008ce4 <_malloc_r+0xa4>
 8008cda:	6032      	str	r2, [r6, #0]
 8008cdc:	6863      	ldr	r3, [r4, #4]
 8008cde:	6011      	str	r1, [r2, #0]
 8008ce0:	6053      	str	r3, [r2, #4]
 8008ce2:	e005      	b.n	8008cf0 <_malloc_r+0xb0>
 8008ce4:	605a      	str	r2, [r3, #4]
 8008ce6:	e7f9      	b.n	8008cdc <_malloc_r+0x9c>
 8008ce8:	6862      	ldr	r2, [r4, #4]
 8008cea:	42a3      	cmp	r3, r4
 8008cec:	d10e      	bne.n	8008d0c <_malloc_r+0xcc>
 8008cee:	6032      	str	r2, [r6, #0]
 8008cf0:	0028      	movs	r0, r5
 8008cf2:	f000 f82d 	bl	8008d50 <__malloc_unlock>
 8008cf6:	0020      	movs	r0, r4
 8008cf8:	2207      	movs	r2, #7
 8008cfa:	300b      	adds	r0, #11
 8008cfc:	1d23      	adds	r3, r4, #4
 8008cfe:	4390      	bics	r0, r2
 8008d00:	1ac2      	subs	r2, r0, r3
 8008d02:	4298      	cmp	r0, r3
 8008d04:	d0df      	beq.n	8008cc6 <_malloc_r+0x86>
 8008d06:	1a1b      	subs	r3, r3, r0
 8008d08:	50a3      	str	r3, [r4, r2]
 8008d0a:	e7dc      	b.n	8008cc6 <_malloc_r+0x86>
 8008d0c:	605a      	str	r2, [r3, #4]
 8008d0e:	e7ef      	b.n	8008cf0 <_malloc_r+0xb0>
 8008d10:	0023      	movs	r3, r4
 8008d12:	6864      	ldr	r4, [r4, #4]
 8008d14:	e7a6      	b.n	8008c64 <_malloc_r+0x24>
 8008d16:	9c00      	ldr	r4, [sp, #0]
 8008d18:	6863      	ldr	r3, [r4, #4]
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	e7ad      	b.n	8008c7a <_malloc_r+0x3a>
 8008d1e:	001a      	movs	r2, r3
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	42a3      	cmp	r3, r4
 8008d24:	d1fb      	bne.n	8008d1e <_malloc_r+0xde>
 8008d26:	2300      	movs	r3, #0
 8008d28:	e7da      	b.n	8008ce0 <_malloc_r+0xa0>
 8008d2a:	230c      	movs	r3, #12
 8008d2c:	0028      	movs	r0, r5
 8008d2e:	602b      	str	r3, [r5, #0]
 8008d30:	f000 f80e 	bl	8008d50 <__malloc_unlock>
 8008d34:	e7c6      	b.n	8008cc4 <_malloc_r+0x84>
 8008d36:	6007      	str	r7, [r0, #0]
 8008d38:	e7da      	b.n	8008cf0 <_malloc_r+0xb0>
 8008d3a:	46c0      	nop			@ (mov r8, r8)
 8008d3c:	200016b0 	.word	0x200016b0

08008d40 <__malloc_lock>:
 8008d40:	b510      	push	{r4, lr}
 8008d42:	4802      	ldr	r0, [pc, #8]	@ (8008d4c <__malloc_lock+0xc>)
 8008d44:	f7ff ff04 	bl	8008b50 <__retarget_lock_acquire_recursive>
 8008d48:	bd10      	pop	{r4, pc}
 8008d4a:	46c0      	nop			@ (mov r8, r8)
 8008d4c:	200016a8 	.word	0x200016a8

08008d50 <__malloc_unlock>:
 8008d50:	b510      	push	{r4, lr}
 8008d52:	4802      	ldr	r0, [pc, #8]	@ (8008d5c <__malloc_unlock+0xc>)
 8008d54:	f7ff fefd 	bl	8008b52 <__retarget_lock_release_recursive>
 8008d58:	bd10      	pop	{r4, pc}
 8008d5a:	46c0      	nop			@ (mov r8, r8)
 8008d5c:	200016a8 	.word	0x200016a8

08008d60 <__ssputs_r>:
 8008d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d62:	688e      	ldr	r6, [r1, #8]
 8008d64:	b085      	sub	sp, #20
 8008d66:	001f      	movs	r7, r3
 8008d68:	000c      	movs	r4, r1
 8008d6a:	680b      	ldr	r3, [r1, #0]
 8008d6c:	9002      	str	r0, [sp, #8]
 8008d6e:	9203      	str	r2, [sp, #12]
 8008d70:	42be      	cmp	r6, r7
 8008d72:	d830      	bhi.n	8008dd6 <__ssputs_r+0x76>
 8008d74:	210c      	movs	r1, #12
 8008d76:	5e62      	ldrsh	r2, [r4, r1]
 8008d78:	2190      	movs	r1, #144	@ 0x90
 8008d7a:	00c9      	lsls	r1, r1, #3
 8008d7c:	420a      	tst	r2, r1
 8008d7e:	d028      	beq.n	8008dd2 <__ssputs_r+0x72>
 8008d80:	2003      	movs	r0, #3
 8008d82:	6921      	ldr	r1, [r4, #16]
 8008d84:	1a5b      	subs	r3, r3, r1
 8008d86:	9301      	str	r3, [sp, #4]
 8008d88:	6963      	ldr	r3, [r4, #20]
 8008d8a:	4343      	muls	r3, r0
 8008d8c:	9801      	ldr	r0, [sp, #4]
 8008d8e:	0fdd      	lsrs	r5, r3, #31
 8008d90:	18ed      	adds	r5, r5, r3
 8008d92:	1c7b      	adds	r3, r7, #1
 8008d94:	181b      	adds	r3, r3, r0
 8008d96:	106d      	asrs	r5, r5, #1
 8008d98:	42ab      	cmp	r3, r5
 8008d9a:	d900      	bls.n	8008d9e <__ssputs_r+0x3e>
 8008d9c:	001d      	movs	r5, r3
 8008d9e:	0552      	lsls	r2, r2, #21
 8008da0:	d528      	bpl.n	8008df4 <__ssputs_r+0x94>
 8008da2:	0029      	movs	r1, r5
 8008da4:	9802      	ldr	r0, [sp, #8]
 8008da6:	f7ff ff4b 	bl	8008c40 <_malloc_r>
 8008daa:	1e06      	subs	r6, r0, #0
 8008dac:	d02c      	beq.n	8008e08 <__ssputs_r+0xa8>
 8008dae:	9a01      	ldr	r2, [sp, #4]
 8008db0:	6921      	ldr	r1, [r4, #16]
 8008db2:	f7ff fecf 	bl	8008b54 <memcpy>
 8008db6:	89a2      	ldrh	r2, [r4, #12]
 8008db8:	4b18      	ldr	r3, [pc, #96]	@ (8008e1c <__ssputs_r+0xbc>)
 8008dba:	401a      	ands	r2, r3
 8008dbc:	2380      	movs	r3, #128	@ 0x80
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	81a3      	strh	r3, [r4, #12]
 8008dc2:	9b01      	ldr	r3, [sp, #4]
 8008dc4:	6126      	str	r6, [r4, #16]
 8008dc6:	18f6      	adds	r6, r6, r3
 8008dc8:	6026      	str	r6, [r4, #0]
 8008dca:	003e      	movs	r6, r7
 8008dcc:	6165      	str	r5, [r4, #20]
 8008dce:	1aed      	subs	r5, r5, r3
 8008dd0:	60a5      	str	r5, [r4, #8]
 8008dd2:	42be      	cmp	r6, r7
 8008dd4:	d900      	bls.n	8008dd8 <__ssputs_r+0x78>
 8008dd6:	003e      	movs	r6, r7
 8008dd8:	0032      	movs	r2, r6
 8008dda:	9903      	ldr	r1, [sp, #12]
 8008ddc:	6820      	ldr	r0, [r4, #0]
 8008dde:	f000 fa9b 	bl	8009318 <memmove>
 8008de2:	2000      	movs	r0, #0
 8008de4:	68a3      	ldr	r3, [r4, #8]
 8008de6:	1b9b      	subs	r3, r3, r6
 8008de8:	60a3      	str	r3, [r4, #8]
 8008dea:	6823      	ldr	r3, [r4, #0]
 8008dec:	199b      	adds	r3, r3, r6
 8008dee:	6023      	str	r3, [r4, #0]
 8008df0:	b005      	add	sp, #20
 8008df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008df4:	002a      	movs	r2, r5
 8008df6:	9802      	ldr	r0, [sp, #8]
 8008df8:	f000 fabf 	bl	800937a <_realloc_r>
 8008dfc:	1e06      	subs	r6, r0, #0
 8008dfe:	d1e0      	bne.n	8008dc2 <__ssputs_r+0x62>
 8008e00:	6921      	ldr	r1, [r4, #16]
 8008e02:	9802      	ldr	r0, [sp, #8]
 8008e04:	f7ff feb0 	bl	8008b68 <_free_r>
 8008e08:	230c      	movs	r3, #12
 8008e0a:	2001      	movs	r0, #1
 8008e0c:	9a02      	ldr	r2, [sp, #8]
 8008e0e:	4240      	negs	r0, r0
 8008e10:	6013      	str	r3, [r2, #0]
 8008e12:	89a2      	ldrh	r2, [r4, #12]
 8008e14:	3334      	adds	r3, #52	@ 0x34
 8008e16:	4313      	orrs	r3, r2
 8008e18:	81a3      	strh	r3, [r4, #12]
 8008e1a:	e7e9      	b.n	8008df0 <__ssputs_r+0x90>
 8008e1c:	fffffb7f 	.word	0xfffffb7f

08008e20 <_svfiprintf_r>:
 8008e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e22:	b0a1      	sub	sp, #132	@ 0x84
 8008e24:	9003      	str	r0, [sp, #12]
 8008e26:	001d      	movs	r5, r3
 8008e28:	898b      	ldrh	r3, [r1, #12]
 8008e2a:	000f      	movs	r7, r1
 8008e2c:	0016      	movs	r6, r2
 8008e2e:	061b      	lsls	r3, r3, #24
 8008e30:	d511      	bpl.n	8008e56 <_svfiprintf_r+0x36>
 8008e32:	690b      	ldr	r3, [r1, #16]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d10e      	bne.n	8008e56 <_svfiprintf_r+0x36>
 8008e38:	2140      	movs	r1, #64	@ 0x40
 8008e3a:	f7ff ff01 	bl	8008c40 <_malloc_r>
 8008e3e:	6038      	str	r0, [r7, #0]
 8008e40:	6138      	str	r0, [r7, #16]
 8008e42:	2800      	cmp	r0, #0
 8008e44:	d105      	bne.n	8008e52 <_svfiprintf_r+0x32>
 8008e46:	230c      	movs	r3, #12
 8008e48:	9a03      	ldr	r2, [sp, #12]
 8008e4a:	6013      	str	r3, [r2, #0]
 8008e4c:	2001      	movs	r0, #1
 8008e4e:	4240      	negs	r0, r0
 8008e50:	e0cf      	b.n	8008ff2 <_svfiprintf_r+0x1d2>
 8008e52:	2340      	movs	r3, #64	@ 0x40
 8008e54:	617b      	str	r3, [r7, #20]
 8008e56:	2300      	movs	r3, #0
 8008e58:	ac08      	add	r4, sp, #32
 8008e5a:	6163      	str	r3, [r4, #20]
 8008e5c:	3320      	adds	r3, #32
 8008e5e:	7663      	strb	r3, [r4, #25]
 8008e60:	3310      	adds	r3, #16
 8008e62:	76a3      	strb	r3, [r4, #26]
 8008e64:	9507      	str	r5, [sp, #28]
 8008e66:	0035      	movs	r5, r6
 8008e68:	782b      	ldrb	r3, [r5, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d001      	beq.n	8008e72 <_svfiprintf_r+0x52>
 8008e6e:	2b25      	cmp	r3, #37	@ 0x25
 8008e70:	d148      	bne.n	8008f04 <_svfiprintf_r+0xe4>
 8008e72:	1bab      	subs	r3, r5, r6
 8008e74:	9305      	str	r3, [sp, #20]
 8008e76:	42b5      	cmp	r5, r6
 8008e78:	d00b      	beq.n	8008e92 <_svfiprintf_r+0x72>
 8008e7a:	0032      	movs	r2, r6
 8008e7c:	0039      	movs	r1, r7
 8008e7e:	9803      	ldr	r0, [sp, #12]
 8008e80:	f7ff ff6e 	bl	8008d60 <__ssputs_r>
 8008e84:	3001      	adds	r0, #1
 8008e86:	d100      	bne.n	8008e8a <_svfiprintf_r+0x6a>
 8008e88:	e0ae      	b.n	8008fe8 <_svfiprintf_r+0x1c8>
 8008e8a:	6963      	ldr	r3, [r4, #20]
 8008e8c:	9a05      	ldr	r2, [sp, #20]
 8008e8e:	189b      	adds	r3, r3, r2
 8008e90:	6163      	str	r3, [r4, #20]
 8008e92:	782b      	ldrb	r3, [r5, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d100      	bne.n	8008e9a <_svfiprintf_r+0x7a>
 8008e98:	e0a6      	b.n	8008fe8 <_svfiprintf_r+0x1c8>
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	4252      	negs	r2, r2
 8008ea0:	6062      	str	r2, [r4, #4]
 8008ea2:	a904      	add	r1, sp, #16
 8008ea4:	3254      	adds	r2, #84	@ 0x54
 8008ea6:	1852      	adds	r2, r2, r1
 8008ea8:	1c6e      	adds	r6, r5, #1
 8008eaa:	6023      	str	r3, [r4, #0]
 8008eac:	60e3      	str	r3, [r4, #12]
 8008eae:	60a3      	str	r3, [r4, #8]
 8008eb0:	7013      	strb	r3, [r2, #0]
 8008eb2:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008eb4:	4b54      	ldr	r3, [pc, #336]	@ (8009008 <_svfiprintf_r+0x1e8>)
 8008eb6:	2205      	movs	r2, #5
 8008eb8:	0018      	movs	r0, r3
 8008eba:	7831      	ldrb	r1, [r6, #0]
 8008ebc:	9305      	str	r3, [sp, #20]
 8008ebe:	f000 fa51 	bl	8009364 <memchr>
 8008ec2:	1c75      	adds	r5, r6, #1
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	d11f      	bne.n	8008f08 <_svfiprintf_r+0xe8>
 8008ec8:	6822      	ldr	r2, [r4, #0]
 8008eca:	06d3      	lsls	r3, r2, #27
 8008ecc:	d504      	bpl.n	8008ed8 <_svfiprintf_r+0xb8>
 8008ece:	2353      	movs	r3, #83	@ 0x53
 8008ed0:	a904      	add	r1, sp, #16
 8008ed2:	185b      	adds	r3, r3, r1
 8008ed4:	2120      	movs	r1, #32
 8008ed6:	7019      	strb	r1, [r3, #0]
 8008ed8:	0713      	lsls	r3, r2, #28
 8008eda:	d504      	bpl.n	8008ee6 <_svfiprintf_r+0xc6>
 8008edc:	2353      	movs	r3, #83	@ 0x53
 8008ede:	a904      	add	r1, sp, #16
 8008ee0:	185b      	adds	r3, r3, r1
 8008ee2:	212b      	movs	r1, #43	@ 0x2b
 8008ee4:	7019      	strb	r1, [r3, #0]
 8008ee6:	7833      	ldrb	r3, [r6, #0]
 8008ee8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008eea:	d016      	beq.n	8008f1a <_svfiprintf_r+0xfa>
 8008eec:	0035      	movs	r5, r6
 8008eee:	2100      	movs	r1, #0
 8008ef0:	200a      	movs	r0, #10
 8008ef2:	68e3      	ldr	r3, [r4, #12]
 8008ef4:	782a      	ldrb	r2, [r5, #0]
 8008ef6:	1c6e      	adds	r6, r5, #1
 8008ef8:	3a30      	subs	r2, #48	@ 0x30
 8008efa:	2a09      	cmp	r2, #9
 8008efc:	d950      	bls.n	8008fa0 <_svfiprintf_r+0x180>
 8008efe:	2900      	cmp	r1, #0
 8008f00:	d111      	bne.n	8008f26 <_svfiprintf_r+0x106>
 8008f02:	e017      	b.n	8008f34 <_svfiprintf_r+0x114>
 8008f04:	3501      	adds	r5, #1
 8008f06:	e7af      	b.n	8008e68 <_svfiprintf_r+0x48>
 8008f08:	9b05      	ldr	r3, [sp, #20]
 8008f0a:	6822      	ldr	r2, [r4, #0]
 8008f0c:	1ac0      	subs	r0, r0, r3
 8008f0e:	2301      	movs	r3, #1
 8008f10:	4083      	lsls	r3, r0
 8008f12:	4313      	orrs	r3, r2
 8008f14:	002e      	movs	r6, r5
 8008f16:	6023      	str	r3, [r4, #0]
 8008f18:	e7cc      	b.n	8008eb4 <_svfiprintf_r+0x94>
 8008f1a:	9b07      	ldr	r3, [sp, #28]
 8008f1c:	1d19      	adds	r1, r3, #4
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	9107      	str	r1, [sp, #28]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	db01      	blt.n	8008f2a <_svfiprintf_r+0x10a>
 8008f26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f28:	e004      	b.n	8008f34 <_svfiprintf_r+0x114>
 8008f2a:	425b      	negs	r3, r3
 8008f2c:	60e3      	str	r3, [r4, #12]
 8008f2e:	2302      	movs	r3, #2
 8008f30:	4313      	orrs	r3, r2
 8008f32:	6023      	str	r3, [r4, #0]
 8008f34:	782b      	ldrb	r3, [r5, #0]
 8008f36:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f38:	d10c      	bne.n	8008f54 <_svfiprintf_r+0x134>
 8008f3a:	786b      	ldrb	r3, [r5, #1]
 8008f3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f3e:	d134      	bne.n	8008faa <_svfiprintf_r+0x18a>
 8008f40:	9b07      	ldr	r3, [sp, #28]
 8008f42:	3502      	adds	r5, #2
 8008f44:	1d1a      	adds	r2, r3, #4
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	9207      	str	r2, [sp, #28]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	da01      	bge.n	8008f52 <_svfiprintf_r+0x132>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	425b      	negs	r3, r3
 8008f52:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f54:	4e2d      	ldr	r6, [pc, #180]	@ (800900c <_svfiprintf_r+0x1ec>)
 8008f56:	2203      	movs	r2, #3
 8008f58:	0030      	movs	r0, r6
 8008f5a:	7829      	ldrb	r1, [r5, #0]
 8008f5c:	f000 fa02 	bl	8009364 <memchr>
 8008f60:	2800      	cmp	r0, #0
 8008f62:	d006      	beq.n	8008f72 <_svfiprintf_r+0x152>
 8008f64:	2340      	movs	r3, #64	@ 0x40
 8008f66:	1b80      	subs	r0, r0, r6
 8008f68:	4083      	lsls	r3, r0
 8008f6a:	6822      	ldr	r2, [r4, #0]
 8008f6c:	3501      	adds	r5, #1
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	6023      	str	r3, [r4, #0]
 8008f72:	7829      	ldrb	r1, [r5, #0]
 8008f74:	2206      	movs	r2, #6
 8008f76:	4826      	ldr	r0, [pc, #152]	@ (8009010 <_svfiprintf_r+0x1f0>)
 8008f78:	1c6e      	adds	r6, r5, #1
 8008f7a:	7621      	strb	r1, [r4, #24]
 8008f7c:	f000 f9f2 	bl	8009364 <memchr>
 8008f80:	2800      	cmp	r0, #0
 8008f82:	d038      	beq.n	8008ff6 <_svfiprintf_r+0x1d6>
 8008f84:	4b23      	ldr	r3, [pc, #140]	@ (8009014 <_svfiprintf_r+0x1f4>)
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d122      	bne.n	8008fd0 <_svfiprintf_r+0x1b0>
 8008f8a:	2207      	movs	r2, #7
 8008f8c:	9b07      	ldr	r3, [sp, #28]
 8008f8e:	3307      	adds	r3, #7
 8008f90:	4393      	bics	r3, r2
 8008f92:	3308      	adds	r3, #8
 8008f94:	9307      	str	r3, [sp, #28]
 8008f96:	6963      	ldr	r3, [r4, #20]
 8008f98:	9a04      	ldr	r2, [sp, #16]
 8008f9a:	189b      	adds	r3, r3, r2
 8008f9c:	6163      	str	r3, [r4, #20]
 8008f9e:	e762      	b.n	8008e66 <_svfiprintf_r+0x46>
 8008fa0:	4343      	muls	r3, r0
 8008fa2:	0035      	movs	r5, r6
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	189b      	adds	r3, r3, r2
 8008fa8:	e7a4      	b.n	8008ef4 <_svfiprintf_r+0xd4>
 8008faa:	2300      	movs	r3, #0
 8008fac:	200a      	movs	r0, #10
 8008fae:	0019      	movs	r1, r3
 8008fb0:	3501      	adds	r5, #1
 8008fb2:	6063      	str	r3, [r4, #4]
 8008fb4:	782a      	ldrb	r2, [r5, #0]
 8008fb6:	1c6e      	adds	r6, r5, #1
 8008fb8:	3a30      	subs	r2, #48	@ 0x30
 8008fba:	2a09      	cmp	r2, #9
 8008fbc:	d903      	bls.n	8008fc6 <_svfiprintf_r+0x1a6>
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d0c8      	beq.n	8008f54 <_svfiprintf_r+0x134>
 8008fc2:	9109      	str	r1, [sp, #36]	@ 0x24
 8008fc4:	e7c6      	b.n	8008f54 <_svfiprintf_r+0x134>
 8008fc6:	4341      	muls	r1, r0
 8008fc8:	0035      	movs	r5, r6
 8008fca:	2301      	movs	r3, #1
 8008fcc:	1889      	adds	r1, r1, r2
 8008fce:	e7f1      	b.n	8008fb4 <_svfiprintf_r+0x194>
 8008fd0:	aa07      	add	r2, sp, #28
 8008fd2:	9200      	str	r2, [sp, #0]
 8008fd4:	0021      	movs	r1, r4
 8008fd6:	003a      	movs	r2, r7
 8008fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8009018 <_svfiprintf_r+0x1f8>)
 8008fda:	9803      	ldr	r0, [sp, #12]
 8008fdc:	e000      	b.n	8008fe0 <_svfiprintf_r+0x1c0>
 8008fde:	bf00      	nop
 8008fe0:	9004      	str	r0, [sp, #16]
 8008fe2:	9b04      	ldr	r3, [sp, #16]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	d1d6      	bne.n	8008f96 <_svfiprintf_r+0x176>
 8008fe8:	89bb      	ldrh	r3, [r7, #12]
 8008fea:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008fec:	065b      	lsls	r3, r3, #25
 8008fee:	d500      	bpl.n	8008ff2 <_svfiprintf_r+0x1d2>
 8008ff0:	e72c      	b.n	8008e4c <_svfiprintf_r+0x2c>
 8008ff2:	b021      	add	sp, #132	@ 0x84
 8008ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ff6:	aa07      	add	r2, sp, #28
 8008ff8:	9200      	str	r2, [sp, #0]
 8008ffa:	0021      	movs	r1, r4
 8008ffc:	003a      	movs	r2, r7
 8008ffe:	4b06      	ldr	r3, [pc, #24]	@ (8009018 <_svfiprintf_r+0x1f8>)
 8009000:	9803      	ldr	r0, [sp, #12]
 8009002:	f000 f87b 	bl	80090fc <_printf_i>
 8009006:	e7eb      	b.n	8008fe0 <_svfiprintf_r+0x1c0>
 8009008:	08009e98 	.word	0x08009e98
 800900c:	08009e9e 	.word	0x08009e9e
 8009010:	08009ea2 	.word	0x08009ea2
 8009014:	00000000 	.word	0x00000000
 8009018:	08008d61 	.word	0x08008d61

0800901c <_printf_common>:
 800901c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800901e:	0016      	movs	r6, r2
 8009020:	9301      	str	r3, [sp, #4]
 8009022:	688a      	ldr	r2, [r1, #8]
 8009024:	690b      	ldr	r3, [r1, #16]
 8009026:	000c      	movs	r4, r1
 8009028:	9000      	str	r0, [sp, #0]
 800902a:	4293      	cmp	r3, r2
 800902c:	da00      	bge.n	8009030 <_printf_common+0x14>
 800902e:	0013      	movs	r3, r2
 8009030:	0022      	movs	r2, r4
 8009032:	6033      	str	r3, [r6, #0]
 8009034:	3243      	adds	r2, #67	@ 0x43
 8009036:	7812      	ldrb	r2, [r2, #0]
 8009038:	2a00      	cmp	r2, #0
 800903a:	d001      	beq.n	8009040 <_printf_common+0x24>
 800903c:	3301      	adds	r3, #1
 800903e:	6033      	str	r3, [r6, #0]
 8009040:	6823      	ldr	r3, [r4, #0]
 8009042:	069b      	lsls	r3, r3, #26
 8009044:	d502      	bpl.n	800904c <_printf_common+0x30>
 8009046:	6833      	ldr	r3, [r6, #0]
 8009048:	3302      	adds	r3, #2
 800904a:	6033      	str	r3, [r6, #0]
 800904c:	6822      	ldr	r2, [r4, #0]
 800904e:	2306      	movs	r3, #6
 8009050:	0015      	movs	r5, r2
 8009052:	401d      	ands	r5, r3
 8009054:	421a      	tst	r2, r3
 8009056:	d027      	beq.n	80090a8 <_printf_common+0x8c>
 8009058:	0023      	movs	r3, r4
 800905a:	3343      	adds	r3, #67	@ 0x43
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	1e5a      	subs	r2, r3, #1
 8009060:	4193      	sbcs	r3, r2
 8009062:	6822      	ldr	r2, [r4, #0]
 8009064:	0692      	lsls	r2, r2, #26
 8009066:	d430      	bmi.n	80090ca <_printf_common+0xae>
 8009068:	0022      	movs	r2, r4
 800906a:	9901      	ldr	r1, [sp, #4]
 800906c:	9800      	ldr	r0, [sp, #0]
 800906e:	9d08      	ldr	r5, [sp, #32]
 8009070:	3243      	adds	r2, #67	@ 0x43
 8009072:	47a8      	blx	r5
 8009074:	3001      	adds	r0, #1
 8009076:	d025      	beq.n	80090c4 <_printf_common+0xa8>
 8009078:	2206      	movs	r2, #6
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	2500      	movs	r5, #0
 800907e:	4013      	ands	r3, r2
 8009080:	2b04      	cmp	r3, #4
 8009082:	d105      	bne.n	8009090 <_printf_common+0x74>
 8009084:	6833      	ldr	r3, [r6, #0]
 8009086:	68e5      	ldr	r5, [r4, #12]
 8009088:	1aed      	subs	r5, r5, r3
 800908a:	43eb      	mvns	r3, r5
 800908c:	17db      	asrs	r3, r3, #31
 800908e:	401d      	ands	r5, r3
 8009090:	68a3      	ldr	r3, [r4, #8]
 8009092:	6922      	ldr	r2, [r4, #16]
 8009094:	4293      	cmp	r3, r2
 8009096:	dd01      	ble.n	800909c <_printf_common+0x80>
 8009098:	1a9b      	subs	r3, r3, r2
 800909a:	18ed      	adds	r5, r5, r3
 800909c:	2600      	movs	r6, #0
 800909e:	42b5      	cmp	r5, r6
 80090a0:	d120      	bne.n	80090e4 <_printf_common+0xc8>
 80090a2:	2000      	movs	r0, #0
 80090a4:	e010      	b.n	80090c8 <_printf_common+0xac>
 80090a6:	3501      	adds	r5, #1
 80090a8:	68e3      	ldr	r3, [r4, #12]
 80090aa:	6832      	ldr	r2, [r6, #0]
 80090ac:	1a9b      	subs	r3, r3, r2
 80090ae:	42ab      	cmp	r3, r5
 80090b0:	ddd2      	ble.n	8009058 <_printf_common+0x3c>
 80090b2:	0022      	movs	r2, r4
 80090b4:	2301      	movs	r3, #1
 80090b6:	9901      	ldr	r1, [sp, #4]
 80090b8:	9800      	ldr	r0, [sp, #0]
 80090ba:	9f08      	ldr	r7, [sp, #32]
 80090bc:	3219      	adds	r2, #25
 80090be:	47b8      	blx	r7
 80090c0:	3001      	adds	r0, #1
 80090c2:	d1f0      	bne.n	80090a6 <_printf_common+0x8a>
 80090c4:	2001      	movs	r0, #1
 80090c6:	4240      	negs	r0, r0
 80090c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090ca:	2030      	movs	r0, #48	@ 0x30
 80090cc:	18e1      	adds	r1, r4, r3
 80090ce:	3143      	adds	r1, #67	@ 0x43
 80090d0:	7008      	strb	r0, [r1, #0]
 80090d2:	0021      	movs	r1, r4
 80090d4:	1c5a      	adds	r2, r3, #1
 80090d6:	3145      	adds	r1, #69	@ 0x45
 80090d8:	7809      	ldrb	r1, [r1, #0]
 80090da:	18a2      	adds	r2, r4, r2
 80090dc:	3243      	adds	r2, #67	@ 0x43
 80090de:	3302      	adds	r3, #2
 80090e0:	7011      	strb	r1, [r2, #0]
 80090e2:	e7c1      	b.n	8009068 <_printf_common+0x4c>
 80090e4:	0022      	movs	r2, r4
 80090e6:	2301      	movs	r3, #1
 80090e8:	9901      	ldr	r1, [sp, #4]
 80090ea:	9800      	ldr	r0, [sp, #0]
 80090ec:	9f08      	ldr	r7, [sp, #32]
 80090ee:	321a      	adds	r2, #26
 80090f0:	47b8      	blx	r7
 80090f2:	3001      	adds	r0, #1
 80090f4:	d0e6      	beq.n	80090c4 <_printf_common+0xa8>
 80090f6:	3601      	adds	r6, #1
 80090f8:	e7d1      	b.n	800909e <_printf_common+0x82>
	...

080090fc <_printf_i>:
 80090fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090fe:	b08b      	sub	sp, #44	@ 0x2c
 8009100:	9206      	str	r2, [sp, #24]
 8009102:	000a      	movs	r2, r1
 8009104:	3243      	adds	r2, #67	@ 0x43
 8009106:	9307      	str	r3, [sp, #28]
 8009108:	9005      	str	r0, [sp, #20]
 800910a:	9203      	str	r2, [sp, #12]
 800910c:	7e0a      	ldrb	r2, [r1, #24]
 800910e:	000c      	movs	r4, r1
 8009110:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009112:	2a78      	cmp	r2, #120	@ 0x78
 8009114:	d809      	bhi.n	800912a <_printf_i+0x2e>
 8009116:	2a62      	cmp	r2, #98	@ 0x62
 8009118:	d80b      	bhi.n	8009132 <_printf_i+0x36>
 800911a:	2a00      	cmp	r2, #0
 800911c:	d100      	bne.n	8009120 <_printf_i+0x24>
 800911e:	e0bc      	b.n	800929a <_printf_i+0x19e>
 8009120:	497b      	ldr	r1, [pc, #492]	@ (8009310 <_printf_i+0x214>)
 8009122:	9104      	str	r1, [sp, #16]
 8009124:	2a58      	cmp	r2, #88	@ 0x58
 8009126:	d100      	bne.n	800912a <_printf_i+0x2e>
 8009128:	e090      	b.n	800924c <_printf_i+0x150>
 800912a:	0025      	movs	r5, r4
 800912c:	3542      	adds	r5, #66	@ 0x42
 800912e:	702a      	strb	r2, [r5, #0]
 8009130:	e022      	b.n	8009178 <_printf_i+0x7c>
 8009132:	0010      	movs	r0, r2
 8009134:	3863      	subs	r0, #99	@ 0x63
 8009136:	2815      	cmp	r0, #21
 8009138:	d8f7      	bhi.n	800912a <_printf_i+0x2e>
 800913a:	f7f6 ffeb 	bl	8000114 <__gnu_thumb1_case_shi>
 800913e:	0016      	.short	0x0016
 8009140:	fff6001f 	.word	0xfff6001f
 8009144:	fff6fff6 	.word	0xfff6fff6
 8009148:	001ffff6 	.word	0x001ffff6
 800914c:	fff6fff6 	.word	0xfff6fff6
 8009150:	fff6fff6 	.word	0xfff6fff6
 8009154:	003600a1 	.word	0x003600a1
 8009158:	fff60080 	.word	0xfff60080
 800915c:	00b2fff6 	.word	0x00b2fff6
 8009160:	0036fff6 	.word	0x0036fff6
 8009164:	fff6fff6 	.word	0xfff6fff6
 8009168:	0084      	.short	0x0084
 800916a:	0025      	movs	r5, r4
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	3542      	adds	r5, #66	@ 0x42
 8009170:	1d11      	adds	r1, r2, #4
 8009172:	6019      	str	r1, [r3, #0]
 8009174:	6813      	ldr	r3, [r2, #0]
 8009176:	702b      	strb	r3, [r5, #0]
 8009178:	2301      	movs	r3, #1
 800917a:	e0a0      	b.n	80092be <_printf_i+0x1c2>
 800917c:	6818      	ldr	r0, [r3, #0]
 800917e:	6809      	ldr	r1, [r1, #0]
 8009180:	1d02      	adds	r2, r0, #4
 8009182:	060d      	lsls	r5, r1, #24
 8009184:	d50b      	bpl.n	800919e <_printf_i+0xa2>
 8009186:	6806      	ldr	r6, [r0, #0]
 8009188:	601a      	str	r2, [r3, #0]
 800918a:	2e00      	cmp	r6, #0
 800918c:	da03      	bge.n	8009196 <_printf_i+0x9a>
 800918e:	232d      	movs	r3, #45	@ 0x2d
 8009190:	9a03      	ldr	r2, [sp, #12]
 8009192:	4276      	negs	r6, r6
 8009194:	7013      	strb	r3, [r2, #0]
 8009196:	4b5e      	ldr	r3, [pc, #376]	@ (8009310 <_printf_i+0x214>)
 8009198:	270a      	movs	r7, #10
 800919a:	9304      	str	r3, [sp, #16]
 800919c:	e018      	b.n	80091d0 <_printf_i+0xd4>
 800919e:	6806      	ldr	r6, [r0, #0]
 80091a0:	601a      	str	r2, [r3, #0]
 80091a2:	0649      	lsls	r1, r1, #25
 80091a4:	d5f1      	bpl.n	800918a <_printf_i+0x8e>
 80091a6:	b236      	sxth	r6, r6
 80091a8:	e7ef      	b.n	800918a <_printf_i+0x8e>
 80091aa:	6808      	ldr	r0, [r1, #0]
 80091ac:	6819      	ldr	r1, [r3, #0]
 80091ae:	c940      	ldmia	r1!, {r6}
 80091b0:	0605      	lsls	r5, r0, #24
 80091b2:	d402      	bmi.n	80091ba <_printf_i+0xbe>
 80091b4:	0640      	lsls	r0, r0, #25
 80091b6:	d500      	bpl.n	80091ba <_printf_i+0xbe>
 80091b8:	b2b6      	uxth	r6, r6
 80091ba:	6019      	str	r1, [r3, #0]
 80091bc:	4b54      	ldr	r3, [pc, #336]	@ (8009310 <_printf_i+0x214>)
 80091be:	270a      	movs	r7, #10
 80091c0:	9304      	str	r3, [sp, #16]
 80091c2:	2a6f      	cmp	r2, #111	@ 0x6f
 80091c4:	d100      	bne.n	80091c8 <_printf_i+0xcc>
 80091c6:	3f02      	subs	r7, #2
 80091c8:	0023      	movs	r3, r4
 80091ca:	2200      	movs	r2, #0
 80091cc:	3343      	adds	r3, #67	@ 0x43
 80091ce:	701a      	strb	r2, [r3, #0]
 80091d0:	6863      	ldr	r3, [r4, #4]
 80091d2:	60a3      	str	r3, [r4, #8]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	db03      	blt.n	80091e0 <_printf_i+0xe4>
 80091d8:	2104      	movs	r1, #4
 80091da:	6822      	ldr	r2, [r4, #0]
 80091dc:	438a      	bics	r2, r1
 80091de:	6022      	str	r2, [r4, #0]
 80091e0:	2e00      	cmp	r6, #0
 80091e2:	d102      	bne.n	80091ea <_printf_i+0xee>
 80091e4:	9d03      	ldr	r5, [sp, #12]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00c      	beq.n	8009204 <_printf_i+0x108>
 80091ea:	9d03      	ldr	r5, [sp, #12]
 80091ec:	0030      	movs	r0, r6
 80091ee:	0039      	movs	r1, r7
 80091f0:	f7f7 f820 	bl	8000234 <__aeabi_uidivmod>
 80091f4:	9b04      	ldr	r3, [sp, #16]
 80091f6:	3d01      	subs	r5, #1
 80091f8:	5c5b      	ldrb	r3, [r3, r1]
 80091fa:	702b      	strb	r3, [r5, #0]
 80091fc:	0033      	movs	r3, r6
 80091fe:	0006      	movs	r6, r0
 8009200:	429f      	cmp	r7, r3
 8009202:	d9f3      	bls.n	80091ec <_printf_i+0xf0>
 8009204:	2f08      	cmp	r7, #8
 8009206:	d109      	bne.n	800921c <_printf_i+0x120>
 8009208:	6823      	ldr	r3, [r4, #0]
 800920a:	07db      	lsls	r3, r3, #31
 800920c:	d506      	bpl.n	800921c <_printf_i+0x120>
 800920e:	6862      	ldr	r2, [r4, #4]
 8009210:	6923      	ldr	r3, [r4, #16]
 8009212:	429a      	cmp	r2, r3
 8009214:	dc02      	bgt.n	800921c <_printf_i+0x120>
 8009216:	2330      	movs	r3, #48	@ 0x30
 8009218:	3d01      	subs	r5, #1
 800921a:	702b      	strb	r3, [r5, #0]
 800921c:	9b03      	ldr	r3, [sp, #12]
 800921e:	1b5b      	subs	r3, r3, r5
 8009220:	6123      	str	r3, [r4, #16]
 8009222:	9b07      	ldr	r3, [sp, #28]
 8009224:	0021      	movs	r1, r4
 8009226:	9300      	str	r3, [sp, #0]
 8009228:	9805      	ldr	r0, [sp, #20]
 800922a:	9b06      	ldr	r3, [sp, #24]
 800922c:	aa09      	add	r2, sp, #36	@ 0x24
 800922e:	f7ff fef5 	bl	800901c <_printf_common>
 8009232:	3001      	adds	r0, #1
 8009234:	d148      	bne.n	80092c8 <_printf_i+0x1cc>
 8009236:	2001      	movs	r0, #1
 8009238:	4240      	negs	r0, r0
 800923a:	b00b      	add	sp, #44	@ 0x2c
 800923c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800923e:	2220      	movs	r2, #32
 8009240:	6809      	ldr	r1, [r1, #0]
 8009242:	430a      	orrs	r2, r1
 8009244:	6022      	str	r2, [r4, #0]
 8009246:	2278      	movs	r2, #120	@ 0x78
 8009248:	4932      	ldr	r1, [pc, #200]	@ (8009314 <_printf_i+0x218>)
 800924a:	9104      	str	r1, [sp, #16]
 800924c:	0021      	movs	r1, r4
 800924e:	3145      	adds	r1, #69	@ 0x45
 8009250:	700a      	strb	r2, [r1, #0]
 8009252:	6819      	ldr	r1, [r3, #0]
 8009254:	6822      	ldr	r2, [r4, #0]
 8009256:	c940      	ldmia	r1!, {r6}
 8009258:	0610      	lsls	r0, r2, #24
 800925a:	d402      	bmi.n	8009262 <_printf_i+0x166>
 800925c:	0650      	lsls	r0, r2, #25
 800925e:	d500      	bpl.n	8009262 <_printf_i+0x166>
 8009260:	b2b6      	uxth	r6, r6
 8009262:	6019      	str	r1, [r3, #0]
 8009264:	07d3      	lsls	r3, r2, #31
 8009266:	d502      	bpl.n	800926e <_printf_i+0x172>
 8009268:	2320      	movs	r3, #32
 800926a:	4313      	orrs	r3, r2
 800926c:	6023      	str	r3, [r4, #0]
 800926e:	2e00      	cmp	r6, #0
 8009270:	d001      	beq.n	8009276 <_printf_i+0x17a>
 8009272:	2710      	movs	r7, #16
 8009274:	e7a8      	b.n	80091c8 <_printf_i+0xcc>
 8009276:	2220      	movs	r2, #32
 8009278:	6823      	ldr	r3, [r4, #0]
 800927a:	4393      	bics	r3, r2
 800927c:	6023      	str	r3, [r4, #0]
 800927e:	e7f8      	b.n	8009272 <_printf_i+0x176>
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	680d      	ldr	r5, [r1, #0]
 8009284:	1d10      	adds	r0, r2, #4
 8009286:	6949      	ldr	r1, [r1, #20]
 8009288:	6018      	str	r0, [r3, #0]
 800928a:	6813      	ldr	r3, [r2, #0]
 800928c:	062e      	lsls	r6, r5, #24
 800928e:	d501      	bpl.n	8009294 <_printf_i+0x198>
 8009290:	6019      	str	r1, [r3, #0]
 8009292:	e002      	b.n	800929a <_printf_i+0x19e>
 8009294:	066d      	lsls	r5, r5, #25
 8009296:	d5fb      	bpl.n	8009290 <_printf_i+0x194>
 8009298:	8019      	strh	r1, [r3, #0]
 800929a:	2300      	movs	r3, #0
 800929c:	9d03      	ldr	r5, [sp, #12]
 800929e:	6123      	str	r3, [r4, #16]
 80092a0:	e7bf      	b.n	8009222 <_printf_i+0x126>
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	1d11      	adds	r1, r2, #4
 80092a6:	6019      	str	r1, [r3, #0]
 80092a8:	6815      	ldr	r5, [r2, #0]
 80092aa:	2100      	movs	r1, #0
 80092ac:	0028      	movs	r0, r5
 80092ae:	6862      	ldr	r2, [r4, #4]
 80092b0:	f000 f858 	bl	8009364 <memchr>
 80092b4:	2800      	cmp	r0, #0
 80092b6:	d001      	beq.n	80092bc <_printf_i+0x1c0>
 80092b8:	1b40      	subs	r0, r0, r5
 80092ba:	6060      	str	r0, [r4, #4]
 80092bc:	6863      	ldr	r3, [r4, #4]
 80092be:	6123      	str	r3, [r4, #16]
 80092c0:	2300      	movs	r3, #0
 80092c2:	9a03      	ldr	r2, [sp, #12]
 80092c4:	7013      	strb	r3, [r2, #0]
 80092c6:	e7ac      	b.n	8009222 <_printf_i+0x126>
 80092c8:	002a      	movs	r2, r5
 80092ca:	6923      	ldr	r3, [r4, #16]
 80092cc:	9906      	ldr	r1, [sp, #24]
 80092ce:	9805      	ldr	r0, [sp, #20]
 80092d0:	9d07      	ldr	r5, [sp, #28]
 80092d2:	47a8      	blx	r5
 80092d4:	3001      	adds	r0, #1
 80092d6:	d0ae      	beq.n	8009236 <_printf_i+0x13a>
 80092d8:	6823      	ldr	r3, [r4, #0]
 80092da:	079b      	lsls	r3, r3, #30
 80092dc:	d415      	bmi.n	800930a <_printf_i+0x20e>
 80092de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092e0:	68e0      	ldr	r0, [r4, #12]
 80092e2:	4298      	cmp	r0, r3
 80092e4:	daa9      	bge.n	800923a <_printf_i+0x13e>
 80092e6:	0018      	movs	r0, r3
 80092e8:	e7a7      	b.n	800923a <_printf_i+0x13e>
 80092ea:	0022      	movs	r2, r4
 80092ec:	2301      	movs	r3, #1
 80092ee:	9906      	ldr	r1, [sp, #24]
 80092f0:	9805      	ldr	r0, [sp, #20]
 80092f2:	9e07      	ldr	r6, [sp, #28]
 80092f4:	3219      	adds	r2, #25
 80092f6:	47b0      	blx	r6
 80092f8:	3001      	adds	r0, #1
 80092fa:	d09c      	beq.n	8009236 <_printf_i+0x13a>
 80092fc:	3501      	adds	r5, #1
 80092fe:	68e3      	ldr	r3, [r4, #12]
 8009300:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009302:	1a9b      	subs	r3, r3, r2
 8009304:	42ab      	cmp	r3, r5
 8009306:	dcf0      	bgt.n	80092ea <_printf_i+0x1ee>
 8009308:	e7e9      	b.n	80092de <_printf_i+0x1e2>
 800930a:	2500      	movs	r5, #0
 800930c:	e7f7      	b.n	80092fe <_printf_i+0x202>
 800930e:	46c0      	nop			@ (mov r8, r8)
 8009310:	08009ea9 	.word	0x08009ea9
 8009314:	08009eba 	.word	0x08009eba

08009318 <memmove>:
 8009318:	b510      	push	{r4, lr}
 800931a:	4288      	cmp	r0, r1
 800931c:	d806      	bhi.n	800932c <memmove+0x14>
 800931e:	2300      	movs	r3, #0
 8009320:	429a      	cmp	r2, r3
 8009322:	d008      	beq.n	8009336 <memmove+0x1e>
 8009324:	5ccc      	ldrb	r4, [r1, r3]
 8009326:	54c4      	strb	r4, [r0, r3]
 8009328:	3301      	adds	r3, #1
 800932a:	e7f9      	b.n	8009320 <memmove+0x8>
 800932c:	188b      	adds	r3, r1, r2
 800932e:	4298      	cmp	r0, r3
 8009330:	d2f5      	bcs.n	800931e <memmove+0x6>
 8009332:	3a01      	subs	r2, #1
 8009334:	d200      	bcs.n	8009338 <memmove+0x20>
 8009336:	bd10      	pop	{r4, pc}
 8009338:	5c8b      	ldrb	r3, [r1, r2]
 800933a:	5483      	strb	r3, [r0, r2]
 800933c:	e7f9      	b.n	8009332 <memmove+0x1a>
	...

08009340 <_sbrk_r>:
 8009340:	2300      	movs	r3, #0
 8009342:	b570      	push	{r4, r5, r6, lr}
 8009344:	4d06      	ldr	r5, [pc, #24]	@ (8009360 <_sbrk_r+0x20>)
 8009346:	0004      	movs	r4, r0
 8009348:	0008      	movs	r0, r1
 800934a:	602b      	str	r3, [r5, #0]
 800934c:	f7fa fd24 	bl	8003d98 <_sbrk>
 8009350:	1c43      	adds	r3, r0, #1
 8009352:	d103      	bne.n	800935c <_sbrk_r+0x1c>
 8009354:	682b      	ldr	r3, [r5, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d000      	beq.n	800935c <_sbrk_r+0x1c>
 800935a:	6023      	str	r3, [r4, #0]
 800935c:	bd70      	pop	{r4, r5, r6, pc}
 800935e:	46c0      	nop			@ (mov r8, r8)
 8009360:	200016a4 	.word	0x200016a4

08009364 <memchr>:
 8009364:	b2c9      	uxtb	r1, r1
 8009366:	1882      	adds	r2, r0, r2
 8009368:	4290      	cmp	r0, r2
 800936a:	d101      	bne.n	8009370 <memchr+0xc>
 800936c:	2000      	movs	r0, #0
 800936e:	4770      	bx	lr
 8009370:	7803      	ldrb	r3, [r0, #0]
 8009372:	428b      	cmp	r3, r1
 8009374:	d0fb      	beq.n	800936e <memchr+0xa>
 8009376:	3001      	adds	r0, #1
 8009378:	e7f6      	b.n	8009368 <memchr+0x4>

0800937a <_realloc_r>:
 800937a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800937c:	0006      	movs	r6, r0
 800937e:	000c      	movs	r4, r1
 8009380:	0015      	movs	r5, r2
 8009382:	2900      	cmp	r1, #0
 8009384:	d105      	bne.n	8009392 <_realloc_r+0x18>
 8009386:	0011      	movs	r1, r2
 8009388:	f7ff fc5a 	bl	8008c40 <_malloc_r>
 800938c:	0004      	movs	r4, r0
 800938e:	0020      	movs	r0, r4
 8009390:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009392:	2a00      	cmp	r2, #0
 8009394:	d103      	bne.n	800939e <_realloc_r+0x24>
 8009396:	f7ff fbe7 	bl	8008b68 <_free_r>
 800939a:	2400      	movs	r4, #0
 800939c:	e7f7      	b.n	800938e <_realloc_r+0x14>
 800939e:	f000 f81b 	bl	80093d8 <_malloc_usable_size_r>
 80093a2:	0007      	movs	r7, r0
 80093a4:	4285      	cmp	r5, r0
 80093a6:	d802      	bhi.n	80093ae <_realloc_r+0x34>
 80093a8:	0843      	lsrs	r3, r0, #1
 80093aa:	42ab      	cmp	r3, r5
 80093ac:	d3ef      	bcc.n	800938e <_realloc_r+0x14>
 80093ae:	0029      	movs	r1, r5
 80093b0:	0030      	movs	r0, r6
 80093b2:	f7ff fc45 	bl	8008c40 <_malloc_r>
 80093b6:	9001      	str	r0, [sp, #4]
 80093b8:	2800      	cmp	r0, #0
 80093ba:	d0ee      	beq.n	800939a <_realloc_r+0x20>
 80093bc:	002a      	movs	r2, r5
 80093be:	42bd      	cmp	r5, r7
 80093c0:	d900      	bls.n	80093c4 <_realloc_r+0x4a>
 80093c2:	003a      	movs	r2, r7
 80093c4:	0021      	movs	r1, r4
 80093c6:	9801      	ldr	r0, [sp, #4]
 80093c8:	f7ff fbc4 	bl	8008b54 <memcpy>
 80093cc:	0021      	movs	r1, r4
 80093ce:	0030      	movs	r0, r6
 80093d0:	f7ff fbca 	bl	8008b68 <_free_r>
 80093d4:	9c01      	ldr	r4, [sp, #4]
 80093d6:	e7da      	b.n	800938e <_realloc_r+0x14>

080093d8 <_malloc_usable_size_r>:
 80093d8:	1f0b      	subs	r3, r1, #4
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	1f18      	subs	r0, r3, #4
 80093de:	2b00      	cmp	r3, #0
 80093e0:	da01      	bge.n	80093e6 <_malloc_usable_size_r+0xe>
 80093e2:	580b      	ldr	r3, [r1, r0]
 80093e4:	18c0      	adds	r0, r0, r3
 80093e6:	4770      	bx	lr

080093e8 <fmod>:
 80093e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093ea:	0014      	movs	r4, r2
 80093ec:	001d      	movs	r5, r3
 80093ee:	9000      	str	r0, [sp, #0]
 80093f0:	9101      	str	r1, [sp, #4]
 80093f2:	f000 f823 	bl	800943c <__ieee754_fmod>
 80093f6:	0022      	movs	r2, r4
 80093f8:	0006      	movs	r6, r0
 80093fa:	000f      	movs	r7, r1
 80093fc:	9800      	ldr	r0, [sp, #0]
 80093fe:	9901      	ldr	r1, [sp, #4]
 8009400:	002b      	movs	r3, r5
 8009402:	f7f8 fb39 	bl	8001a78 <__aeabi_dcmpun>
 8009406:	2800      	cmp	r0, #0
 8009408:	d113      	bne.n	8009432 <fmod+0x4a>
 800940a:	2200      	movs	r2, #0
 800940c:	2300      	movs	r3, #0
 800940e:	0020      	movs	r0, r4
 8009410:	0029      	movs	r1, r5
 8009412:	f7f7 f80f 	bl	8000434 <__aeabi_dcmpeq>
 8009416:	2800      	cmp	r0, #0
 8009418:	d00b      	beq.n	8009432 <fmod+0x4a>
 800941a:	f7ff fb6f 	bl	8008afc <__errno>
 800941e:	2321      	movs	r3, #33	@ 0x21
 8009420:	2200      	movs	r2, #0
 8009422:	6003      	str	r3, [r0, #0]
 8009424:	2300      	movs	r3, #0
 8009426:	0010      	movs	r0, r2
 8009428:	0019      	movs	r1, r3
 800942a:	f7f7 fc19 	bl	8000c60 <__aeabi_ddiv>
 800942e:	0006      	movs	r6, r0
 8009430:	000f      	movs	r7, r1
 8009432:	0030      	movs	r0, r6
 8009434:	0039      	movs	r1, r7
 8009436:	b003      	add	sp, #12
 8009438:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800943c <__ieee754_fmod>:
 800943c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800943e:	b085      	sub	sp, #20
 8009440:	9200      	str	r2, [sp, #0]
 8009442:	9301      	str	r3, [sp, #4]
 8009444:	9b01      	ldr	r3, [sp, #4]
 8009446:	9e00      	ldr	r6, [sp, #0]
 8009448:	005b      	lsls	r3, r3, #1
 800944a:	085b      	lsrs	r3, r3, #1
 800944c:	469c      	mov	ip, r3
 800944e:	9603      	str	r6, [sp, #12]
 8009450:	4333      	orrs	r3, r6
 8009452:	d00d      	beq.n	8009470 <__ieee754_fmod+0x34>
 8009454:	4b7a      	ldr	r3, [pc, #488]	@ (8009640 <__ieee754_fmod+0x204>)
 8009456:	004a      	lsls	r2, r1, #1
 8009458:	000d      	movs	r5, r1
 800945a:	0852      	lsrs	r2, r2, #1
 800945c:	429a      	cmp	r2, r3
 800945e:	d807      	bhi.n	8009470 <__ieee754_fmod+0x34>
 8009460:	4664      	mov	r4, ip
 8009462:	4273      	negs	r3, r6
 8009464:	4333      	orrs	r3, r6
 8009466:	0fdb      	lsrs	r3, r3, #31
 8009468:	4323      	orrs	r3, r4
 800946a:	4c76      	ldr	r4, [pc, #472]	@ (8009644 <__ieee754_fmod+0x208>)
 800946c:	42a3      	cmp	r3, r4
 800946e:	d909      	bls.n	8009484 <__ieee754_fmod+0x48>
 8009470:	9a00      	ldr	r2, [sp, #0]
 8009472:	9b01      	ldr	r3, [sp, #4]
 8009474:	f7f8 f838 	bl	80014e8 <__aeabi_dmul>
 8009478:	0002      	movs	r2, r0
 800947a:	000b      	movs	r3, r1
 800947c:	f7f7 fbf0 	bl	8000c60 <__aeabi_ddiv>
 8009480:	b005      	add	sp, #20
 8009482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009484:	0fcc      	lsrs	r4, r1, #31
 8009486:	07e4      	lsls	r4, r4, #31
 8009488:	0007      	movs	r7, r0
 800948a:	0003      	movs	r3, r0
 800948c:	9402      	str	r4, [sp, #8]
 800948e:	4562      	cmp	r2, ip
 8009490:	dc0a      	bgt.n	80094a8 <__ieee754_fmod+0x6c>
 8009492:	dbf5      	blt.n	8009480 <__ieee754_fmod+0x44>
 8009494:	4286      	cmp	r6, r0
 8009496:	d8f3      	bhi.n	8009480 <__ieee754_fmod+0x44>
 8009498:	d106      	bne.n	80094a8 <__ieee754_fmod+0x6c>
 800949a:	0022      	movs	r2, r4
 800949c:	4b6a      	ldr	r3, [pc, #424]	@ (8009648 <__ieee754_fmod+0x20c>)
 800949e:	0f12      	lsrs	r2, r2, #28
 80094a0:	189b      	adds	r3, r3, r2
 80094a2:	6818      	ldr	r0, [r3, #0]
 80094a4:	6859      	ldr	r1, [r3, #4]
 80094a6:	e7eb      	b.n	8009480 <__ieee754_fmod+0x44>
 80094a8:	4866      	ldr	r0, [pc, #408]	@ (8009644 <__ieee754_fmod+0x208>)
 80094aa:	4205      	tst	r5, r0
 80094ac:	d14c      	bne.n	8009548 <__ieee754_fmod+0x10c>
 80094ae:	2a00      	cmp	r2, #0
 80094b0:	d143      	bne.n	800953a <__ieee754_fmod+0xfe>
 80094b2:	0038      	movs	r0, r7
 80094b4:	4965      	ldr	r1, [pc, #404]	@ (800964c <__ieee754_fmod+0x210>)
 80094b6:	2800      	cmp	r0, #0
 80094b8:	dc3c      	bgt.n	8009534 <__ieee754_fmod+0xf8>
 80094ba:	4862      	ldr	r0, [pc, #392]	@ (8009644 <__ieee754_fmod+0x208>)
 80094bc:	9c01      	ldr	r4, [sp, #4]
 80094be:	4220      	tst	r0, r4
 80094c0:	d150      	bne.n	8009564 <__ieee754_fmod+0x128>
 80094c2:	4660      	mov	r0, ip
 80094c4:	2800      	cmp	r0, #0
 80094c6:	d146      	bne.n	8009556 <__ieee754_fmod+0x11a>
 80094c8:	4860      	ldr	r0, [pc, #384]	@ (800964c <__ieee754_fmod+0x210>)
 80094ca:	2e00      	cmp	r6, #0
 80094cc:	dc40      	bgt.n	8009550 <__ieee754_fmod+0x114>
 80094ce:	4c60      	ldr	r4, [pc, #384]	@ (8009650 <__ieee754_fmod+0x214>)
 80094d0:	42a1      	cmp	r1, r4
 80094d2:	db4c      	blt.n	800956e <__ieee754_fmod+0x132>
 80094d4:	2280      	movs	r2, #128	@ 0x80
 80094d6:	032f      	lsls	r7, r5, #12
 80094d8:	0b3f      	lsrs	r7, r7, #12
 80094da:	0352      	lsls	r2, r2, #13
 80094dc:	433a      	orrs	r2, r7
 80094de:	4c5c      	ldr	r4, [pc, #368]	@ (8009650 <__ieee754_fmod+0x214>)
 80094e0:	42a0      	cmp	r0, r4
 80094e2:	db59      	blt.n	8009598 <__ieee754_fmod+0x15c>
 80094e4:	2580      	movs	r5, #128	@ 0x80
 80094e6:	9c01      	ldr	r4, [sp, #4]
 80094e8:	036d      	lsls	r5, r5, #13
 80094ea:	0324      	lsls	r4, r4, #12
 80094ec:	0b24      	lsrs	r4, r4, #12
 80094ee:	4325      	orrs	r5, r4
 80094f0:	1a09      	subs	r1, r1, r0
 80094f2:	9e03      	ldr	r6, [sp, #12]
 80094f4:	1b54      	subs	r4, r2, r5
 80094f6:	1b9f      	subs	r7, r3, r6
 80094f8:	2900      	cmp	r1, #0
 80094fa:	d165      	bne.n	80095c8 <__ieee754_fmod+0x18c>
 80094fc:	42b3      	cmp	r3, r6
 80094fe:	4189      	sbcs	r1, r1
 8009500:	4249      	negs	r1, r1
 8009502:	1a64      	subs	r4, r4, r1
 8009504:	d401      	bmi.n	800950a <__ieee754_fmod+0xce>
 8009506:	003b      	movs	r3, r7
 8009508:	0022      	movs	r2, r4
 800950a:	0011      	movs	r1, r2
 800950c:	4319      	orrs	r1, r3
 800950e:	d06a      	beq.n	80095e6 <__ieee754_fmod+0x1aa>
 8009510:	2180      	movs	r1, #128	@ 0x80
 8009512:	0349      	lsls	r1, r1, #13
 8009514:	428a      	cmp	r2, r1
 8009516:	db6e      	blt.n	80095f6 <__ieee754_fmod+0x1ba>
 8009518:	494d      	ldr	r1, [pc, #308]	@ (8009650 <__ieee754_fmod+0x214>)
 800951a:	4288      	cmp	r0, r1
 800951c:	db71      	blt.n	8009602 <__ieee754_fmod+0x1c6>
 800951e:	494d      	ldr	r1, [pc, #308]	@ (8009654 <__ieee754_fmod+0x218>)
 8009520:	1852      	adds	r2, r2, r1
 8009522:	9902      	ldr	r1, [sp, #8]
 8009524:	430a      	orrs	r2, r1
 8009526:	494c      	ldr	r1, [pc, #304]	@ (8009658 <__ieee754_fmod+0x21c>)
 8009528:	1840      	adds	r0, r0, r1
 800952a:	0504      	lsls	r4, r0, #20
 800952c:	4322      	orrs	r2, r4
 800952e:	0011      	movs	r1, r2
 8009530:	0018      	movs	r0, r3
 8009532:	e7a5      	b.n	8009480 <__ieee754_fmod+0x44>
 8009534:	3901      	subs	r1, #1
 8009536:	0040      	lsls	r0, r0, #1
 8009538:	e7bd      	b.n	80094b6 <__ieee754_fmod+0x7a>
 800953a:	4945      	ldr	r1, [pc, #276]	@ (8009650 <__ieee754_fmod+0x214>)
 800953c:	02d0      	lsls	r0, r2, #11
 800953e:	2800      	cmp	r0, #0
 8009540:	ddbb      	ble.n	80094ba <__ieee754_fmod+0x7e>
 8009542:	3901      	subs	r1, #1
 8009544:	0040      	lsls	r0, r0, #1
 8009546:	e7fa      	b.n	800953e <__ieee754_fmod+0x102>
 8009548:	4844      	ldr	r0, [pc, #272]	@ (800965c <__ieee754_fmod+0x220>)
 800954a:	1511      	asrs	r1, r2, #20
 800954c:	1809      	adds	r1, r1, r0
 800954e:	e7b4      	b.n	80094ba <__ieee754_fmod+0x7e>
 8009550:	3801      	subs	r0, #1
 8009552:	0076      	lsls	r6, r6, #1
 8009554:	e7b9      	b.n	80094ca <__ieee754_fmod+0x8e>
 8009556:	02c6      	lsls	r6, r0, #11
 8009558:	483d      	ldr	r0, [pc, #244]	@ (8009650 <__ieee754_fmod+0x214>)
 800955a:	2e00      	cmp	r6, #0
 800955c:	ddb7      	ble.n	80094ce <__ieee754_fmod+0x92>
 800955e:	3801      	subs	r0, #1
 8009560:	0076      	lsls	r6, r6, #1
 8009562:	e7fa      	b.n	800955a <__ieee754_fmod+0x11e>
 8009564:	4660      	mov	r0, ip
 8009566:	4c3d      	ldr	r4, [pc, #244]	@ (800965c <__ieee754_fmod+0x220>)
 8009568:	1500      	asrs	r0, r0, #20
 800956a:	1900      	adds	r0, r0, r4
 800956c:	e7af      	b.n	80094ce <__ieee754_fmod+0x92>
 800956e:	4b38      	ldr	r3, [pc, #224]	@ (8009650 <__ieee754_fmod+0x214>)
 8009570:	1a5b      	subs	r3, r3, r1
 8009572:	2b1f      	cmp	r3, #31
 8009574:	dc0a      	bgt.n	800958c <__ieee754_fmod+0x150>
 8009576:	409a      	lsls	r2, r3
 8009578:	003c      	movs	r4, r7
 800957a:	0015      	movs	r5, r2
 800957c:	4a38      	ldr	r2, [pc, #224]	@ (8009660 <__ieee754_fmod+0x224>)
 800957e:	409f      	lsls	r7, r3
 8009580:	188a      	adds	r2, r1, r2
 8009582:	40d4      	lsrs	r4, r2
 8009584:	0022      	movs	r2, r4
 8009586:	003b      	movs	r3, r7
 8009588:	432a      	orrs	r2, r5
 800958a:	e7a8      	b.n	80094de <__ieee754_fmod+0xa2>
 800958c:	003a      	movs	r2, r7
 800958e:	4b35      	ldr	r3, [pc, #212]	@ (8009664 <__ieee754_fmod+0x228>)
 8009590:	1a5b      	subs	r3, r3, r1
 8009592:	409a      	lsls	r2, r3
 8009594:	2300      	movs	r3, #0
 8009596:	e7a2      	b.n	80094de <__ieee754_fmod+0xa2>
 8009598:	4c2d      	ldr	r4, [pc, #180]	@ (8009650 <__ieee754_fmod+0x214>)
 800959a:	1a27      	subs	r7, r4, r0
 800959c:	2f1f      	cmp	r7, #31
 800959e:	dc0c      	bgt.n	80095ba <__ieee754_fmod+0x17e>
 80095a0:	4c2f      	ldr	r4, [pc, #188]	@ (8009660 <__ieee754_fmod+0x224>)
 80095a2:	4665      	mov	r5, ip
 80095a4:	46a4      	mov	ip, r4
 80095a6:	4484      	add	ip, r0
 80095a8:	4666      	mov	r6, ip
 80095aa:	9c00      	ldr	r4, [sp, #0]
 80095ac:	40bd      	lsls	r5, r7
 80095ae:	40f4      	lsrs	r4, r6
 80095b0:	4325      	orrs	r5, r4
 80095b2:	9c00      	ldr	r4, [sp, #0]
 80095b4:	40bc      	lsls	r4, r7
 80095b6:	9403      	str	r4, [sp, #12]
 80095b8:	e79a      	b.n	80094f0 <__ieee754_fmod+0xb4>
 80095ba:	4d2a      	ldr	r5, [pc, #168]	@ (8009664 <__ieee754_fmod+0x228>)
 80095bc:	9c00      	ldr	r4, [sp, #0]
 80095be:	1a2d      	subs	r5, r5, r0
 80095c0:	40ac      	lsls	r4, r5
 80095c2:	0025      	movs	r5, r4
 80095c4:	2400      	movs	r4, #0
 80095c6:	e7f6      	b.n	80095b6 <__ieee754_fmod+0x17a>
 80095c8:	9e03      	ldr	r6, [sp, #12]
 80095ca:	42b3      	cmp	r3, r6
 80095cc:	41b6      	sbcs	r6, r6
 80095ce:	4276      	negs	r6, r6
 80095d0:	1ba4      	subs	r4, r4, r6
 80095d2:	d505      	bpl.n	80095e0 <__ieee754_fmod+0x1a4>
 80095d4:	0fdc      	lsrs	r4, r3, #31
 80095d6:	0052      	lsls	r2, r2, #1
 80095d8:	1912      	adds	r2, r2, r4
 80095da:	005b      	lsls	r3, r3, #1
 80095dc:	3901      	subs	r1, #1
 80095de:	e788      	b.n	80094f2 <__ieee754_fmod+0xb6>
 80095e0:	0023      	movs	r3, r4
 80095e2:	433b      	orrs	r3, r7
 80095e4:	d102      	bne.n	80095ec <__ieee754_fmod+0x1b0>
 80095e6:	4b18      	ldr	r3, [pc, #96]	@ (8009648 <__ieee754_fmod+0x20c>)
 80095e8:	9a02      	ldr	r2, [sp, #8]
 80095ea:	e758      	b.n	800949e <__ieee754_fmod+0x62>
 80095ec:	0064      	lsls	r4, r4, #1
 80095ee:	0ffa      	lsrs	r2, r7, #31
 80095f0:	18a2      	adds	r2, r4, r2
 80095f2:	007b      	lsls	r3, r7, #1
 80095f4:	e7f2      	b.n	80095dc <__ieee754_fmod+0x1a0>
 80095f6:	0fdc      	lsrs	r4, r3, #31
 80095f8:	0052      	lsls	r2, r2, #1
 80095fa:	1912      	adds	r2, r2, r4
 80095fc:	005b      	lsls	r3, r3, #1
 80095fe:	3801      	subs	r0, #1
 8009600:	e788      	b.n	8009514 <__ieee754_fmod+0xd8>
 8009602:	4913      	ldr	r1, [pc, #76]	@ (8009650 <__ieee754_fmod+0x214>)
 8009604:	1a0e      	subs	r6, r1, r0
 8009606:	2e14      	cmp	r6, #20
 8009608:	dc0b      	bgt.n	8009622 <__ieee754_fmod+0x1e6>
 800960a:	40f3      	lsrs	r3, r6
 800960c:	0019      	movs	r1, r3
 800960e:	4b14      	ldr	r3, [pc, #80]	@ (8009660 <__ieee754_fmod+0x224>)
 8009610:	18c0      	adds	r0, r0, r3
 8009612:	0013      	movs	r3, r2
 8009614:	4083      	lsls	r3, r0
 8009616:	4132      	asrs	r2, r6
 8009618:	430b      	orrs	r3, r1
 800961a:	9c02      	ldr	r4, [sp, #8]
 800961c:	4314      	orrs	r4, r2
 800961e:	0021      	movs	r1, r4
 8009620:	e786      	b.n	8009530 <__ieee754_fmod+0xf4>
 8009622:	2e1f      	cmp	r6, #31
 8009624:	dc06      	bgt.n	8009634 <__ieee754_fmod+0x1f8>
 8009626:	490e      	ldr	r1, [pc, #56]	@ (8009660 <__ieee754_fmod+0x224>)
 8009628:	40f3      	lsrs	r3, r6
 800962a:	1840      	adds	r0, r0, r1
 800962c:	4082      	lsls	r2, r0
 800962e:	4313      	orrs	r3, r2
 8009630:	9a02      	ldr	r2, [sp, #8]
 8009632:	e7f2      	b.n	800961a <__ieee754_fmod+0x1de>
 8009634:	4b0b      	ldr	r3, [pc, #44]	@ (8009664 <__ieee754_fmod+0x228>)
 8009636:	1a1b      	subs	r3, r3, r0
 8009638:	411a      	asrs	r2, r3
 800963a:	0013      	movs	r3, r2
 800963c:	e7f8      	b.n	8009630 <__ieee754_fmod+0x1f4>
 800963e:	46c0      	nop			@ (mov r8, r8)
 8009640:	7fefffff 	.word	0x7fefffff
 8009644:	7ff00000 	.word	0x7ff00000
 8009648:	08009ed0 	.word	0x08009ed0
 800964c:	fffffbed 	.word	0xfffffbed
 8009650:	fffffc02 	.word	0xfffffc02
 8009654:	fff00000 	.word	0xfff00000
 8009658:	000003ff 	.word	0x000003ff
 800965c:	fffffc01 	.word	0xfffffc01
 8009660:	0000041e 	.word	0x0000041e
 8009664:	fffffbe2 	.word	0xfffffbe2

08009668 <_init>:
 8009668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966a:	46c0      	nop			@ (mov r8, r8)
 800966c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800966e:	bc08      	pop	{r3}
 8009670:	469e      	mov	lr, r3
 8009672:	4770      	bx	lr

08009674 <_fini>:
 8009674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009676:	46c0      	nop			@ (mov r8, r8)
 8009678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800967a:	bc08      	pop	{r3}
 800967c:	469e      	mov	lr, r3
 800967e:	4770      	bx	lr
