
ynotag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009790  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000860  08009850  08009850  0000a850  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0b0  0800a0b0  0000cee0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a0b0  0800a0b0  0000b0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0b8  0800a0b8  0000cee0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0b8  0800a0b8  0000b0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a0bc  0800a0bc  0000b0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000ee0  20000000  0800a0c0  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d4  20000ee0  0800afa0  0000cee0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200016b4  0800afa0  0000d6b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000cee0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a69f  00000000  00000000  0000cf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000327e  00000000  00000000  000275a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c8  00000000  00000000  0002a828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012dd  00000000  00000000  0002bff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f415  00000000  00000000  0002d2cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d69e  00000000  00000000  0004c6e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca0db  00000000  00000000  00069d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133e5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060d4  00000000  00000000  00133ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  00139f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000ee0 	.word	0x20000ee0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009834 	.word	0x08009834

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000ee4 	.word	0x20000ee4
 8000100:	08009834 	.word	0x08009834

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_cdrcmple>:
 8000414:	4684      	mov	ip, r0
 8000416:	0010      	movs	r0, r2
 8000418:	4662      	mov	r2, ip
 800041a:	468c      	mov	ip, r1
 800041c:	0019      	movs	r1, r3
 800041e:	4663      	mov	r3, ip
 8000420:	e000      	b.n	8000424 <__aeabi_cdcmpeq>
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdcmpeq>:
 8000424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000426:	f001 f89d 	bl	8001564 <__ledf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	d401      	bmi.n	8000432 <__aeabi_cdcmpeq+0xe>
 800042e:	2100      	movs	r1, #0
 8000430:	42c8      	cmn	r0, r1
 8000432:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000434 <__aeabi_dcmpeq>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 ffe1 	bl	80013fc <__eqdf2>
 800043a:	4240      	negs	r0, r0
 800043c:	3001      	adds	r0, #1
 800043e:	bd10      	pop	{r4, pc}

08000440 <__aeabi_dcmplt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f001 f88f 	bl	8001564 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	db01      	blt.n	800044e <__aeabi_dcmplt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_dcmple>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f885 	bl	8001564 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dd01      	ble.n	8000462 <__aeabi_dcmple+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmpgt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f80b 	bl	8001484 <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dc01      	bgt.n	8000476 <__aeabi_dcmpgt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmpge>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f801 	bl	8001484 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	da01      	bge.n	800048a <__aeabi_dcmpge+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_uldivmod>:
 8000490:	2b00      	cmp	r3, #0
 8000492:	d111      	bne.n	80004b8 <__aeabi_uldivmod+0x28>
 8000494:	2a00      	cmp	r2, #0
 8000496:	d10f      	bne.n	80004b8 <__aeabi_uldivmod+0x28>
 8000498:	2900      	cmp	r1, #0
 800049a:	d100      	bne.n	800049e <__aeabi_uldivmod+0xe>
 800049c:	2800      	cmp	r0, #0
 800049e:	d002      	beq.n	80004a6 <__aeabi_uldivmod+0x16>
 80004a0:	2100      	movs	r1, #0
 80004a2:	43c9      	mvns	r1, r1
 80004a4:	0008      	movs	r0, r1
 80004a6:	b407      	push	{r0, r1, r2}
 80004a8:	4802      	ldr	r0, [pc, #8]	@ (80004b4 <__aeabi_uldivmod+0x24>)
 80004aa:	a102      	add	r1, pc, #8	@ (adr r1, 80004b4 <__aeabi_uldivmod+0x24>)
 80004ac:	1840      	adds	r0, r0, r1
 80004ae:	9002      	str	r0, [sp, #8]
 80004b0:	bd03      	pop	{r0, r1, pc}
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	ffffff5d 	.word	0xffffff5d
 80004b8:	b403      	push	{r0, r1}
 80004ba:	4668      	mov	r0, sp
 80004bc:	b501      	push	{r0, lr}
 80004be:	9802      	ldr	r0, [sp, #8]
 80004c0:	f000 f81e 	bl	8000500 <__udivmoddi4>
 80004c4:	9b01      	ldr	r3, [sp, #4]
 80004c6:	469e      	mov	lr, r3
 80004c8:	b002      	add	sp, #8
 80004ca:	bc0c      	pop	{r2, r3}
 80004cc:	4770      	bx	lr
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_f2uiz>:
 80004d0:	219e      	movs	r1, #158	@ 0x9e
 80004d2:	b510      	push	{r4, lr}
 80004d4:	05c9      	lsls	r1, r1, #23
 80004d6:	1c04      	adds	r4, r0, #0
 80004d8:	f001 fcf0 	bl	8001ebc <__aeabi_fcmpge>
 80004dc:	2800      	cmp	r0, #0
 80004de:	d103      	bne.n	80004e8 <__aeabi_f2uiz+0x18>
 80004e0:	1c20      	adds	r0, r4, #0
 80004e2:	f000 fc53 	bl	8000d8c <__aeabi_f2iz>
 80004e6:	bd10      	pop	{r4, pc}
 80004e8:	219e      	movs	r1, #158	@ 0x9e
 80004ea:	1c20      	adds	r0, r4, #0
 80004ec:	05c9      	lsls	r1, r1, #23
 80004ee:	f000 f9e9 	bl	80008c4 <__aeabi_fsub>
 80004f2:	f000 fc4b 	bl	8000d8c <__aeabi_f2iz>
 80004f6:	2380      	movs	r3, #128	@ 0x80
 80004f8:	061b      	lsls	r3, r3, #24
 80004fa:	469c      	mov	ip, r3
 80004fc:	4460      	add	r0, ip
 80004fe:	e7f2      	b.n	80004e6 <__aeabi_f2uiz+0x16>

08000500 <__udivmoddi4>:
 8000500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000502:	4657      	mov	r7, sl
 8000504:	464e      	mov	r6, r9
 8000506:	4645      	mov	r5, r8
 8000508:	46de      	mov	lr, fp
 800050a:	b5e0      	push	{r5, r6, r7, lr}
 800050c:	0004      	movs	r4, r0
 800050e:	000d      	movs	r5, r1
 8000510:	4692      	mov	sl, r2
 8000512:	4699      	mov	r9, r3
 8000514:	b083      	sub	sp, #12
 8000516:	428b      	cmp	r3, r1
 8000518:	d830      	bhi.n	800057c <__udivmoddi4+0x7c>
 800051a:	d02d      	beq.n	8000578 <__udivmoddi4+0x78>
 800051c:	4649      	mov	r1, r9
 800051e:	4650      	mov	r0, sl
 8000520:	f001 fcf4 	bl	8001f0c <__clzdi2>
 8000524:	0029      	movs	r1, r5
 8000526:	0006      	movs	r6, r0
 8000528:	0020      	movs	r0, r4
 800052a:	f001 fcef 	bl	8001f0c <__clzdi2>
 800052e:	1a33      	subs	r3, r6, r0
 8000530:	4698      	mov	r8, r3
 8000532:	3b20      	subs	r3, #32
 8000534:	d434      	bmi.n	80005a0 <__udivmoddi4+0xa0>
 8000536:	469b      	mov	fp, r3
 8000538:	4653      	mov	r3, sl
 800053a:	465a      	mov	r2, fp
 800053c:	4093      	lsls	r3, r2
 800053e:	4642      	mov	r2, r8
 8000540:	001f      	movs	r7, r3
 8000542:	4653      	mov	r3, sl
 8000544:	4093      	lsls	r3, r2
 8000546:	001e      	movs	r6, r3
 8000548:	42af      	cmp	r7, r5
 800054a:	d83b      	bhi.n	80005c4 <__udivmoddi4+0xc4>
 800054c:	42af      	cmp	r7, r5
 800054e:	d100      	bne.n	8000552 <__udivmoddi4+0x52>
 8000550:	e079      	b.n	8000646 <__udivmoddi4+0x146>
 8000552:	465b      	mov	r3, fp
 8000554:	1ba4      	subs	r4, r4, r6
 8000556:	41bd      	sbcs	r5, r7
 8000558:	2b00      	cmp	r3, #0
 800055a:	da00      	bge.n	800055e <__udivmoddi4+0x5e>
 800055c:	e076      	b.n	800064c <__udivmoddi4+0x14c>
 800055e:	2200      	movs	r2, #0
 8000560:	2300      	movs	r3, #0
 8000562:	9200      	str	r2, [sp, #0]
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	2301      	movs	r3, #1
 8000568:	465a      	mov	r2, fp
 800056a:	4093      	lsls	r3, r2
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	2301      	movs	r3, #1
 8000570:	4642      	mov	r2, r8
 8000572:	4093      	lsls	r3, r2
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	e029      	b.n	80005cc <__udivmoddi4+0xcc>
 8000578:	4282      	cmp	r2, r0
 800057a:	d9cf      	bls.n	800051c <__udivmoddi4+0x1c>
 800057c:	2200      	movs	r2, #0
 800057e:	2300      	movs	r3, #0
 8000580:	9200      	str	r2, [sp, #0]
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <__udivmoddi4+0x8e>
 800058a:	601c      	str	r4, [r3, #0]
 800058c:	605d      	str	r5, [r3, #4]
 800058e:	9800      	ldr	r0, [sp, #0]
 8000590:	9901      	ldr	r1, [sp, #4]
 8000592:	b003      	add	sp, #12
 8000594:	bcf0      	pop	{r4, r5, r6, r7}
 8000596:	46bb      	mov	fp, r7
 8000598:	46b2      	mov	sl, r6
 800059a:	46a9      	mov	r9, r5
 800059c:	46a0      	mov	r8, r4
 800059e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a0:	4642      	mov	r2, r8
 80005a2:	469b      	mov	fp, r3
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	4652      	mov	r2, sl
 80005aa:	40da      	lsrs	r2, r3
 80005ac:	4641      	mov	r1, r8
 80005ae:	0013      	movs	r3, r2
 80005b0:	464a      	mov	r2, r9
 80005b2:	408a      	lsls	r2, r1
 80005b4:	0017      	movs	r7, r2
 80005b6:	4642      	mov	r2, r8
 80005b8:	431f      	orrs	r7, r3
 80005ba:	4653      	mov	r3, sl
 80005bc:	4093      	lsls	r3, r2
 80005be:	001e      	movs	r6, r3
 80005c0:	42af      	cmp	r7, r5
 80005c2:	d9c3      	bls.n	800054c <__udivmoddi4+0x4c>
 80005c4:	2200      	movs	r2, #0
 80005c6:	2300      	movs	r3, #0
 80005c8:	9200      	str	r2, [sp, #0]
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	4643      	mov	r3, r8
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d0d8      	beq.n	8000584 <__udivmoddi4+0x84>
 80005d2:	07fb      	lsls	r3, r7, #31
 80005d4:	0872      	lsrs	r2, r6, #1
 80005d6:	431a      	orrs	r2, r3
 80005d8:	4646      	mov	r6, r8
 80005da:	087b      	lsrs	r3, r7, #1
 80005dc:	e00e      	b.n	80005fc <__udivmoddi4+0xfc>
 80005de:	42ab      	cmp	r3, r5
 80005e0:	d101      	bne.n	80005e6 <__udivmoddi4+0xe6>
 80005e2:	42a2      	cmp	r2, r4
 80005e4:	d80c      	bhi.n	8000600 <__udivmoddi4+0x100>
 80005e6:	1aa4      	subs	r4, r4, r2
 80005e8:	419d      	sbcs	r5, r3
 80005ea:	2001      	movs	r0, #1
 80005ec:	1924      	adds	r4, r4, r4
 80005ee:	416d      	adcs	r5, r5
 80005f0:	2100      	movs	r1, #0
 80005f2:	3e01      	subs	r6, #1
 80005f4:	1824      	adds	r4, r4, r0
 80005f6:	414d      	adcs	r5, r1
 80005f8:	2e00      	cmp	r6, #0
 80005fa:	d006      	beq.n	800060a <__udivmoddi4+0x10a>
 80005fc:	42ab      	cmp	r3, r5
 80005fe:	d9ee      	bls.n	80005de <__udivmoddi4+0xde>
 8000600:	3e01      	subs	r6, #1
 8000602:	1924      	adds	r4, r4, r4
 8000604:	416d      	adcs	r5, r5
 8000606:	2e00      	cmp	r6, #0
 8000608:	d1f8      	bne.n	80005fc <__udivmoddi4+0xfc>
 800060a:	9800      	ldr	r0, [sp, #0]
 800060c:	9901      	ldr	r1, [sp, #4]
 800060e:	465b      	mov	r3, fp
 8000610:	1900      	adds	r0, r0, r4
 8000612:	4169      	adcs	r1, r5
 8000614:	2b00      	cmp	r3, #0
 8000616:	db24      	blt.n	8000662 <__udivmoddi4+0x162>
 8000618:	002b      	movs	r3, r5
 800061a:	465a      	mov	r2, fp
 800061c:	4644      	mov	r4, r8
 800061e:	40d3      	lsrs	r3, r2
 8000620:	002a      	movs	r2, r5
 8000622:	40e2      	lsrs	r2, r4
 8000624:	001c      	movs	r4, r3
 8000626:	465b      	mov	r3, fp
 8000628:	0015      	movs	r5, r2
 800062a:	2b00      	cmp	r3, #0
 800062c:	db2a      	blt.n	8000684 <__udivmoddi4+0x184>
 800062e:	0026      	movs	r6, r4
 8000630:	409e      	lsls	r6, r3
 8000632:	0033      	movs	r3, r6
 8000634:	0026      	movs	r6, r4
 8000636:	4647      	mov	r7, r8
 8000638:	40be      	lsls	r6, r7
 800063a:	0032      	movs	r2, r6
 800063c:	1a80      	subs	r0, r0, r2
 800063e:	4199      	sbcs	r1, r3
 8000640:	9000      	str	r0, [sp, #0]
 8000642:	9101      	str	r1, [sp, #4]
 8000644:	e79e      	b.n	8000584 <__udivmoddi4+0x84>
 8000646:	42a3      	cmp	r3, r4
 8000648:	d8bc      	bhi.n	80005c4 <__udivmoddi4+0xc4>
 800064a:	e782      	b.n	8000552 <__udivmoddi4+0x52>
 800064c:	4642      	mov	r2, r8
 800064e:	2320      	movs	r3, #32
 8000650:	2100      	movs	r1, #0
 8000652:	1a9b      	subs	r3, r3, r2
 8000654:	2200      	movs	r2, #0
 8000656:	9100      	str	r1, [sp, #0]
 8000658:	9201      	str	r2, [sp, #4]
 800065a:	2201      	movs	r2, #1
 800065c:	40da      	lsrs	r2, r3
 800065e:	9201      	str	r2, [sp, #4]
 8000660:	e785      	b.n	800056e <__udivmoddi4+0x6e>
 8000662:	4642      	mov	r2, r8
 8000664:	2320      	movs	r3, #32
 8000666:	1a9b      	subs	r3, r3, r2
 8000668:	002a      	movs	r2, r5
 800066a:	4646      	mov	r6, r8
 800066c:	409a      	lsls	r2, r3
 800066e:	0023      	movs	r3, r4
 8000670:	40f3      	lsrs	r3, r6
 8000672:	4644      	mov	r4, r8
 8000674:	4313      	orrs	r3, r2
 8000676:	002a      	movs	r2, r5
 8000678:	40e2      	lsrs	r2, r4
 800067a:	001c      	movs	r4, r3
 800067c:	465b      	mov	r3, fp
 800067e:	0015      	movs	r5, r2
 8000680:	2b00      	cmp	r3, #0
 8000682:	dad4      	bge.n	800062e <__udivmoddi4+0x12e>
 8000684:	4642      	mov	r2, r8
 8000686:	002f      	movs	r7, r5
 8000688:	2320      	movs	r3, #32
 800068a:	0026      	movs	r6, r4
 800068c:	4097      	lsls	r7, r2
 800068e:	1a9b      	subs	r3, r3, r2
 8000690:	40de      	lsrs	r6, r3
 8000692:	003b      	movs	r3, r7
 8000694:	4333      	orrs	r3, r6
 8000696:	e7cd      	b.n	8000634 <__udivmoddi4+0x134>

08000698 <__aeabi_fdiv>:
 8000698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069a:	4646      	mov	r6, r8
 800069c:	464f      	mov	r7, r9
 800069e:	46d6      	mov	lr, sl
 80006a0:	0245      	lsls	r5, r0, #9
 80006a2:	b5c0      	push	{r6, r7, lr}
 80006a4:	0fc3      	lsrs	r3, r0, #31
 80006a6:	0047      	lsls	r7, r0, #1
 80006a8:	4698      	mov	r8, r3
 80006aa:	1c0e      	adds	r6, r1, #0
 80006ac:	0a6d      	lsrs	r5, r5, #9
 80006ae:	0e3f      	lsrs	r7, r7, #24
 80006b0:	d05b      	beq.n	800076a <__aeabi_fdiv+0xd2>
 80006b2:	2fff      	cmp	r7, #255	@ 0xff
 80006b4:	d021      	beq.n	80006fa <__aeabi_fdiv+0x62>
 80006b6:	2380      	movs	r3, #128	@ 0x80
 80006b8:	00ed      	lsls	r5, r5, #3
 80006ba:	04db      	lsls	r3, r3, #19
 80006bc:	431d      	orrs	r5, r3
 80006be:	2300      	movs	r3, #0
 80006c0:	4699      	mov	r9, r3
 80006c2:	469a      	mov	sl, r3
 80006c4:	3f7f      	subs	r7, #127	@ 0x7f
 80006c6:	0274      	lsls	r4, r6, #9
 80006c8:	0073      	lsls	r3, r6, #1
 80006ca:	0a64      	lsrs	r4, r4, #9
 80006cc:	0e1b      	lsrs	r3, r3, #24
 80006ce:	0ff6      	lsrs	r6, r6, #31
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d020      	beq.n	8000716 <__aeabi_fdiv+0x7e>
 80006d4:	2bff      	cmp	r3, #255	@ 0xff
 80006d6:	d043      	beq.n	8000760 <__aeabi_fdiv+0xc8>
 80006d8:	2280      	movs	r2, #128	@ 0x80
 80006da:	2000      	movs	r0, #0
 80006dc:	00e4      	lsls	r4, r4, #3
 80006de:	04d2      	lsls	r2, r2, #19
 80006e0:	4314      	orrs	r4, r2
 80006e2:	3b7f      	subs	r3, #127	@ 0x7f
 80006e4:	4642      	mov	r2, r8
 80006e6:	1aff      	subs	r7, r7, r3
 80006e8:	464b      	mov	r3, r9
 80006ea:	4072      	eors	r2, r6
 80006ec:	2b0f      	cmp	r3, #15
 80006ee:	d900      	bls.n	80006f2 <__aeabi_fdiv+0x5a>
 80006f0:	e09d      	b.n	800082e <__aeabi_fdiv+0x196>
 80006f2:	4971      	ldr	r1, [pc, #452]	@ (80008b8 <__aeabi_fdiv+0x220>)
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	58cb      	ldr	r3, [r1, r3]
 80006f8:	469f      	mov	pc, r3
 80006fa:	2d00      	cmp	r5, #0
 80006fc:	d15a      	bne.n	80007b4 <__aeabi_fdiv+0x11c>
 80006fe:	2308      	movs	r3, #8
 8000700:	4699      	mov	r9, r3
 8000702:	3b06      	subs	r3, #6
 8000704:	0274      	lsls	r4, r6, #9
 8000706:	469a      	mov	sl, r3
 8000708:	0073      	lsls	r3, r6, #1
 800070a:	27ff      	movs	r7, #255	@ 0xff
 800070c:	0a64      	lsrs	r4, r4, #9
 800070e:	0e1b      	lsrs	r3, r3, #24
 8000710:	0ff6      	lsrs	r6, r6, #31
 8000712:	2b00      	cmp	r3, #0
 8000714:	d1de      	bne.n	80006d4 <__aeabi_fdiv+0x3c>
 8000716:	2c00      	cmp	r4, #0
 8000718:	d13b      	bne.n	8000792 <__aeabi_fdiv+0xfa>
 800071a:	2301      	movs	r3, #1
 800071c:	4642      	mov	r2, r8
 800071e:	4649      	mov	r1, r9
 8000720:	4072      	eors	r2, r6
 8000722:	4319      	orrs	r1, r3
 8000724:	290e      	cmp	r1, #14
 8000726:	d818      	bhi.n	800075a <__aeabi_fdiv+0xc2>
 8000728:	4864      	ldr	r0, [pc, #400]	@ (80008bc <__aeabi_fdiv+0x224>)
 800072a:	0089      	lsls	r1, r1, #2
 800072c:	5841      	ldr	r1, [r0, r1]
 800072e:	468f      	mov	pc, r1
 8000730:	4653      	mov	r3, sl
 8000732:	2b02      	cmp	r3, #2
 8000734:	d100      	bne.n	8000738 <__aeabi_fdiv+0xa0>
 8000736:	e0b8      	b.n	80008aa <__aeabi_fdiv+0x212>
 8000738:	2b03      	cmp	r3, #3
 800073a:	d06e      	beq.n	800081a <__aeabi_fdiv+0x182>
 800073c:	4642      	mov	r2, r8
 800073e:	002c      	movs	r4, r5
 8000740:	2b01      	cmp	r3, #1
 8000742:	d140      	bne.n	80007c6 <__aeabi_fdiv+0x12e>
 8000744:	2000      	movs	r0, #0
 8000746:	2400      	movs	r4, #0
 8000748:	05c0      	lsls	r0, r0, #23
 800074a:	4320      	orrs	r0, r4
 800074c:	07d2      	lsls	r2, r2, #31
 800074e:	4310      	orrs	r0, r2
 8000750:	bce0      	pop	{r5, r6, r7}
 8000752:	46ba      	mov	sl, r7
 8000754:	46b1      	mov	r9, r6
 8000756:	46a8      	mov	r8, r5
 8000758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800075a:	20ff      	movs	r0, #255	@ 0xff
 800075c:	2400      	movs	r4, #0
 800075e:	e7f3      	b.n	8000748 <__aeabi_fdiv+0xb0>
 8000760:	2c00      	cmp	r4, #0
 8000762:	d120      	bne.n	80007a6 <__aeabi_fdiv+0x10e>
 8000764:	2302      	movs	r3, #2
 8000766:	3fff      	subs	r7, #255	@ 0xff
 8000768:	e7d8      	b.n	800071c <__aeabi_fdiv+0x84>
 800076a:	2d00      	cmp	r5, #0
 800076c:	d105      	bne.n	800077a <__aeabi_fdiv+0xe2>
 800076e:	2304      	movs	r3, #4
 8000770:	4699      	mov	r9, r3
 8000772:	3b03      	subs	r3, #3
 8000774:	2700      	movs	r7, #0
 8000776:	469a      	mov	sl, r3
 8000778:	e7a5      	b.n	80006c6 <__aeabi_fdiv+0x2e>
 800077a:	0028      	movs	r0, r5
 800077c:	f001 fba8 	bl	8001ed0 <__clzsi2>
 8000780:	2776      	movs	r7, #118	@ 0x76
 8000782:	1f43      	subs	r3, r0, #5
 8000784:	409d      	lsls	r5, r3
 8000786:	2300      	movs	r3, #0
 8000788:	427f      	negs	r7, r7
 800078a:	4699      	mov	r9, r3
 800078c:	469a      	mov	sl, r3
 800078e:	1a3f      	subs	r7, r7, r0
 8000790:	e799      	b.n	80006c6 <__aeabi_fdiv+0x2e>
 8000792:	0020      	movs	r0, r4
 8000794:	f001 fb9c 	bl	8001ed0 <__clzsi2>
 8000798:	1f43      	subs	r3, r0, #5
 800079a:	409c      	lsls	r4, r3
 800079c:	2376      	movs	r3, #118	@ 0x76
 800079e:	425b      	negs	r3, r3
 80007a0:	1a1b      	subs	r3, r3, r0
 80007a2:	2000      	movs	r0, #0
 80007a4:	e79e      	b.n	80006e4 <__aeabi_fdiv+0x4c>
 80007a6:	2303      	movs	r3, #3
 80007a8:	464a      	mov	r2, r9
 80007aa:	431a      	orrs	r2, r3
 80007ac:	4691      	mov	r9, r2
 80007ae:	2003      	movs	r0, #3
 80007b0:	33fc      	adds	r3, #252	@ 0xfc
 80007b2:	e797      	b.n	80006e4 <__aeabi_fdiv+0x4c>
 80007b4:	230c      	movs	r3, #12
 80007b6:	4699      	mov	r9, r3
 80007b8:	3b09      	subs	r3, #9
 80007ba:	27ff      	movs	r7, #255	@ 0xff
 80007bc:	469a      	mov	sl, r3
 80007be:	e782      	b.n	80006c6 <__aeabi_fdiv+0x2e>
 80007c0:	2803      	cmp	r0, #3
 80007c2:	d02c      	beq.n	800081e <__aeabi_fdiv+0x186>
 80007c4:	0032      	movs	r2, r6
 80007c6:	0038      	movs	r0, r7
 80007c8:	307f      	adds	r0, #127	@ 0x7f
 80007ca:	2800      	cmp	r0, #0
 80007cc:	dd47      	ble.n	800085e <__aeabi_fdiv+0x1c6>
 80007ce:	0763      	lsls	r3, r4, #29
 80007d0:	d004      	beq.n	80007dc <__aeabi_fdiv+0x144>
 80007d2:	230f      	movs	r3, #15
 80007d4:	4023      	ands	r3, r4
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	d000      	beq.n	80007dc <__aeabi_fdiv+0x144>
 80007da:	3404      	adds	r4, #4
 80007dc:	0123      	lsls	r3, r4, #4
 80007de:	d503      	bpl.n	80007e8 <__aeabi_fdiv+0x150>
 80007e0:	0038      	movs	r0, r7
 80007e2:	4b37      	ldr	r3, [pc, #220]	@ (80008c0 <__aeabi_fdiv+0x228>)
 80007e4:	3080      	adds	r0, #128	@ 0x80
 80007e6:	401c      	ands	r4, r3
 80007e8:	28fe      	cmp	r0, #254	@ 0xfe
 80007ea:	dcb6      	bgt.n	800075a <__aeabi_fdiv+0xc2>
 80007ec:	01a4      	lsls	r4, r4, #6
 80007ee:	0a64      	lsrs	r4, r4, #9
 80007f0:	b2c0      	uxtb	r0, r0
 80007f2:	e7a9      	b.n	8000748 <__aeabi_fdiv+0xb0>
 80007f4:	2480      	movs	r4, #128	@ 0x80
 80007f6:	2200      	movs	r2, #0
 80007f8:	20ff      	movs	r0, #255	@ 0xff
 80007fa:	03e4      	lsls	r4, r4, #15
 80007fc:	e7a4      	b.n	8000748 <__aeabi_fdiv+0xb0>
 80007fe:	2380      	movs	r3, #128	@ 0x80
 8000800:	03db      	lsls	r3, r3, #15
 8000802:	421d      	tst	r5, r3
 8000804:	d001      	beq.n	800080a <__aeabi_fdiv+0x172>
 8000806:	421c      	tst	r4, r3
 8000808:	d00b      	beq.n	8000822 <__aeabi_fdiv+0x18a>
 800080a:	2480      	movs	r4, #128	@ 0x80
 800080c:	03e4      	lsls	r4, r4, #15
 800080e:	432c      	orrs	r4, r5
 8000810:	0264      	lsls	r4, r4, #9
 8000812:	4642      	mov	r2, r8
 8000814:	20ff      	movs	r0, #255	@ 0xff
 8000816:	0a64      	lsrs	r4, r4, #9
 8000818:	e796      	b.n	8000748 <__aeabi_fdiv+0xb0>
 800081a:	4646      	mov	r6, r8
 800081c:	002c      	movs	r4, r5
 800081e:	2380      	movs	r3, #128	@ 0x80
 8000820:	03db      	lsls	r3, r3, #15
 8000822:	431c      	orrs	r4, r3
 8000824:	0264      	lsls	r4, r4, #9
 8000826:	0032      	movs	r2, r6
 8000828:	20ff      	movs	r0, #255	@ 0xff
 800082a:	0a64      	lsrs	r4, r4, #9
 800082c:	e78c      	b.n	8000748 <__aeabi_fdiv+0xb0>
 800082e:	016d      	lsls	r5, r5, #5
 8000830:	0160      	lsls	r0, r4, #5
 8000832:	4285      	cmp	r5, r0
 8000834:	d22d      	bcs.n	8000892 <__aeabi_fdiv+0x1fa>
 8000836:	231b      	movs	r3, #27
 8000838:	2400      	movs	r4, #0
 800083a:	3f01      	subs	r7, #1
 800083c:	2601      	movs	r6, #1
 800083e:	0029      	movs	r1, r5
 8000840:	0064      	lsls	r4, r4, #1
 8000842:	006d      	lsls	r5, r5, #1
 8000844:	2900      	cmp	r1, #0
 8000846:	db01      	blt.n	800084c <__aeabi_fdiv+0x1b4>
 8000848:	4285      	cmp	r5, r0
 800084a:	d301      	bcc.n	8000850 <__aeabi_fdiv+0x1b8>
 800084c:	1a2d      	subs	r5, r5, r0
 800084e:	4334      	orrs	r4, r6
 8000850:	3b01      	subs	r3, #1
 8000852:	2b00      	cmp	r3, #0
 8000854:	d1f3      	bne.n	800083e <__aeabi_fdiv+0x1a6>
 8000856:	1e6b      	subs	r3, r5, #1
 8000858:	419d      	sbcs	r5, r3
 800085a:	432c      	orrs	r4, r5
 800085c:	e7b3      	b.n	80007c6 <__aeabi_fdiv+0x12e>
 800085e:	2301      	movs	r3, #1
 8000860:	1a1b      	subs	r3, r3, r0
 8000862:	2b1b      	cmp	r3, #27
 8000864:	dd00      	ble.n	8000868 <__aeabi_fdiv+0x1d0>
 8000866:	e76d      	b.n	8000744 <__aeabi_fdiv+0xac>
 8000868:	0021      	movs	r1, r4
 800086a:	379e      	adds	r7, #158	@ 0x9e
 800086c:	40d9      	lsrs	r1, r3
 800086e:	40bc      	lsls	r4, r7
 8000870:	000b      	movs	r3, r1
 8000872:	1e61      	subs	r1, r4, #1
 8000874:	418c      	sbcs	r4, r1
 8000876:	4323      	orrs	r3, r4
 8000878:	0759      	lsls	r1, r3, #29
 800087a:	d004      	beq.n	8000886 <__aeabi_fdiv+0x1ee>
 800087c:	210f      	movs	r1, #15
 800087e:	4019      	ands	r1, r3
 8000880:	2904      	cmp	r1, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fdiv+0x1ee>
 8000884:	3304      	adds	r3, #4
 8000886:	0159      	lsls	r1, r3, #5
 8000888:	d413      	bmi.n	80008b2 <__aeabi_fdiv+0x21a>
 800088a:	019b      	lsls	r3, r3, #6
 800088c:	2000      	movs	r0, #0
 800088e:	0a5c      	lsrs	r4, r3, #9
 8000890:	e75a      	b.n	8000748 <__aeabi_fdiv+0xb0>
 8000892:	231a      	movs	r3, #26
 8000894:	2401      	movs	r4, #1
 8000896:	1a2d      	subs	r5, r5, r0
 8000898:	e7d0      	b.n	800083c <__aeabi_fdiv+0x1a4>
 800089a:	1e98      	subs	r0, r3, #2
 800089c:	4243      	negs	r3, r0
 800089e:	4158      	adcs	r0, r3
 80008a0:	4240      	negs	r0, r0
 80008a2:	0032      	movs	r2, r6
 80008a4:	2400      	movs	r4, #0
 80008a6:	b2c0      	uxtb	r0, r0
 80008a8:	e74e      	b.n	8000748 <__aeabi_fdiv+0xb0>
 80008aa:	4642      	mov	r2, r8
 80008ac:	20ff      	movs	r0, #255	@ 0xff
 80008ae:	2400      	movs	r4, #0
 80008b0:	e74a      	b.n	8000748 <__aeabi_fdiv+0xb0>
 80008b2:	2001      	movs	r0, #1
 80008b4:	2400      	movs	r4, #0
 80008b6:	e747      	b.n	8000748 <__aeabi_fdiv+0xb0>
 80008b8:	08009960 	.word	0x08009960
 80008bc:	080099a0 	.word	0x080099a0
 80008c0:	f7ffffff 	.word	0xf7ffffff

080008c4 <__aeabi_fsub>:
 80008c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c6:	4647      	mov	r7, r8
 80008c8:	46ce      	mov	lr, r9
 80008ca:	0243      	lsls	r3, r0, #9
 80008cc:	b580      	push	{r7, lr}
 80008ce:	0a5f      	lsrs	r7, r3, #9
 80008d0:	099b      	lsrs	r3, r3, #6
 80008d2:	0045      	lsls	r5, r0, #1
 80008d4:	004a      	lsls	r2, r1, #1
 80008d6:	469c      	mov	ip, r3
 80008d8:	024b      	lsls	r3, r1, #9
 80008da:	0fc4      	lsrs	r4, r0, #31
 80008dc:	0fce      	lsrs	r6, r1, #31
 80008de:	0e2d      	lsrs	r5, r5, #24
 80008e0:	0a58      	lsrs	r0, r3, #9
 80008e2:	0e12      	lsrs	r2, r2, #24
 80008e4:	0999      	lsrs	r1, r3, #6
 80008e6:	2aff      	cmp	r2, #255	@ 0xff
 80008e8:	d06b      	beq.n	80009c2 <__aeabi_fsub+0xfe>
 80008ea:	2301      	movs	r3, #1
 80008ec:	405e      	eors	r6, r3
 80008ee:	1aab      	subs	r3, r5, r2
 80008f0:	42b4      	cmp	r4, r6
 80008f2:	d04b      	beq.n	800098c <__aeabi_fsub+0xc8>
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	dc00      	bgt.n	80008fa <__aeabi_fsub+0x36>
 80008f8:	e0ff      	b.n	8000afa <__aeabi_fsub+0x236>
 80008fa:	2a00      	cmp	r2, #0
 80008fc:	d100      	bne.n	8000900 <__aeabi_fsub+0x3c>
 80008fe:	e088      	b.n	8000a12 <__aeabi_fsub+0x14e>
 8000900:	2dff      	cmp	r5, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fsub+0x42>
 8000904:	e0ef      	b.n	8000ae6 <__aeabi_fsub+0x222>
 8000906:	2280      	movs	r2, #128	@ 0x80
 8000908:	04d2      	lsls	r2, r2, #19
 800090a:	4311      	orrs	r1, r2
 800090c:	2001      	movs	r0, #1
 800090e:	2b1b      	cmp	r3, #27
 8000910:	dc08      	bgt.n	8000924 <__aeabi_fsub+0x60>
 8000912:	0008      	movs	r0, r1
 8000914:	2220      	movs	r2, #32
 8000916:	40d8      	lsrs	r0, r3
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	4099      	lsls	r1, r3
 800091c:	000b      	movs	r3, r1
 800091e:	1e5a      	subs	r2, r3, #1
 8000920:	4193      	sbcs	r3, r2
 8000922:	4318      	orrs	r0, r3
 8000924:	4663      	mov	r3, ip
 8000926:	1a1b      	subs	r3, r3, r0
 8000928:	469c      	mov	ip, r3
 800092a:	4663      	mov	r3, ip
 800092c:	015b      	lsls	r3, r3, #5
 800092e:	d400      	bmi.n	8000932 <__aeabi_fsub+0x6e>
 8000930:	e0cd      	b.n	8000ace <__aeabi_fsub+0x20a>
 8000932:	4663      	mov	r3, ip
 8000934:	019f      	lsls	r7, r3, #6
 8000936:	09bf      	lsrs	r7, r7, #6
 8000938:	0038      	movs	r0, r7
 800093a:	f001 fac9 	bl	8001ed0 <__clzsi2>
 800093e:	003b      	movs	r3, r7
 8000940:	3805      	subs	r0, #5
 8000942:	4083      	lsls	r3, r0
 8000944:	4285      	cmp	r5, r0
 8000946:	dc00      	bgt.n	800094a <__aeabi_fsub+0x86>
 8000948:	e0a2      	b.n	8000a90 <__aeabi_fsub+0x1cc>
 800094a:	4ab7      	ldr	r2, [pc, #732]	@ (8000c28 <__aeabi_fsub+0x364>)
 800094c:	1a2d      	subs	r5, r5, r0
 800094e:	401a      	ands	r2, r3
 8000950:	4694      	mov	ip, r2
 8000952:	075a      	lsls	r2, r3, #29
 8000954:	d100      	bne.n	8000958 <__aeabi_fsub+0x94>
 8000956:	e0c3      	b.n	8000ae0 <__aeabi_fsub+0x21c>
 8000958:	220f      	movs	r2, #15
 800095a:	4013      	ands	r3, r2
 800095c:	2b04      	cmp	r3, #4
 800095e:	d100      	bne.n	8000962 <__aeabi_fsub+0x9e>
 8000960:	e0be      	b.n	8000ae0 <__aeabi_fsub+0x21c>
 8000962:	2304      	movs	r3, #4
 8000964:	4698      	mov	r8, r3
 8000966:	44c4      	add	ip, r8
 8000968:	4663      	mov	r3, ip
 800096a:	015b      	lsls	r3, r3, #5
 800096c:	d400      	bmi.n	8000970 <__aeabi_fsub+0xac>
 800096e:	e0b7      	b.n	8000ae0 <__aeabi_fsub+0x21c>
 8000970:	1c68      	adds	r0, r5, #1
 8000972:	2dfe      	cmp	r5, #254	@ 0xfe
 8000974:	d000      	beq.n	8000978 <__aeabi_fsub+0xb4>
 8000976:	e0a5      	b.n	8000ac4 <__aeabi_fsub+0x200>
 8000978:	20ff      	movs	r0, #255	@ 0xff
 800097a:	2200      	movs	r2, #0
 800097c:	05c0      	lsls	r0, r0, #23
 800097e:	4310      	orrs	r0, r2
 8000980:	07e4      	lsls	r4, r4, #31
 8000982:	4320      	orrs	r0, r4
 8000984:	bcc0      	pop	{r6, r7}
 8000986:	46b9      	mov	r9, r7
 8000988:	46b0      	mov	r8, r6
 800098a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800098c:	2b00      	cmp	r3, #0
 800098e:	dc00      	bgt.n	8000992 <__aeabi_fsub+0xce>
 8000990:	e1eb      	b.n	8000d6a <__aeabi_fsub+0x4a6>
 8000992:	2a00      	cmp	r2, #0
 8000994:	d046      	beq.n	8000a24 <__aeabi_fsub+0x160>
 8000996:	2dff      	cmp	r5, #255	@ 0xff
 8000998:	d100      	bne.n	800099c <__aeabi_fsub+0xd8>
 800099a:	e0a4      	b.n	8000ae6 <__aeabi_fsub+0x222>
 800099c:	2280      	movs	r2, #128	@ 0x80
 800099e:	04d2      	lsls	r2, r2, #19
 80009a0:	4311      	orrs	r1, r2
 80009a2:	2b1b      	cmp	r3, #27
 80009a4:	dc00      	bgt.n	80009a8 <__aeabi_fsub+0xe4>
 80009a6:	e0fb      	b.n	8000ba0 <__aeabi_fsub+0x2dc>
 80009a8:	2305      	movs	r3, #5
 80009aa:	4698      	mov	r8, r3
 80009ac:	002b      	movs	r3, r5
 80009ae:	44c4      	add	ip, r8
 80009b0:	4662      	mov	r2, ip
 80009b2:	08d7      	lsrs	r7, r2, #3
 80009b4:	2bff      	cmp	r3, #255	@ 0xff
 80009b6:	d100      	bne.n	80009ba <__aeabi_fsub+0xf6>
 80009b8:	e095      	b.n	8000ae6 <__aeabi_fsub+0x222>
 80009ba:	027a      	lsls	r2, r7, #9
 80009bc:	0a52      	lsrs	r2, r2, #9
 80009be:	b2d8      	uxtb	r0, r3
 80009c0:	e7dc      	b.n	800097c <__aeabi_fsub+0xb8>
 80009c2:	002b      	movs	r3, r5
 80009c4:	3bff      	subs	r3, #255	@ 0xff
 80009c6:	4699      	mov	r9, r3
 80009c8:	2900      	cmp	r1, #0
 80009ca:	d118      	bne.n	80009fe <__aeabi_fsub+0x13a>
 80009cc:	2301      	movs	r3, #1
 80009ce:	405e      	eors	r6, r3
 80009d0:	42b4      	cmp	r4, r6
 80009d2:	d100      	bne.n	80009d6 <__aeabi_fsub+0x112>
 80009d4:	e0ca      	b.n	8000b6c <__aeabi_fsub+0x2a8>
 80009d6:	464b      	mov	r3, r9
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d02d      	beq.n	8000a38 <__aeabi_fsub+0x174>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d000      	beq.n	80009e2 <__aeabi_fsub+0x11e>
 80009e0:	e13c      	b.n	8000c5c <__aeabi_fsub+0x398>
 80009e2:	23ff      	movs	r3, #255	@ 0xff
 80009e4:	4664      	mov	r4, ip
 80009e6:	2c00      	cmp	r4, #0
 80009e8:	d100      	bne.n	80009ec <__aeabi_fsub+0x128>
 80009ea:	e15f      	b.n	8000cac <__aeabi_fsub+0x3e8>
 80009ec:	1e5d      	subs	r5, r3, #1
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d100      	bne.n	80009f4 <__aeabi_fsub+0x130>
 80009f2:	e174      	b.n	8000cde <__aeabi_fsub+0x41a>
 80009f4:	0034      	movs	r4, r6
 80009f6:	2bff      	cmp	r3, #255	@ 0xff
 80009f8:	d074      	beq.n	8000ae4 <__aeabi_fsub+0x220>
 80009fa:	002b      	movs	r3, r5
 80009fc:	e103      	b.n	8000c06 <__aeabi_fsub+0x342>
 80009fe:	42b4      	cmp	r4, r6
 8000a00:	d100      	bne.n	8000a04 <__aeabi_fsub+0x140>
 8000a02:	e09c      	b.n	8000b3e <__aeabi_fsub+0x27a>
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d017      	beq.n	8000a38 <__aeabi_fsub+0x174>
 8000a08:	2d00      	cmp	r5, #0
 8000a0a:	d0ea      	beq.n	80009e2 <__aeabi_fsub+0x11e>
 8000a0c:	0007      	movs	r7, r0
 8000a0e:	0034      	movs	r4, r6
 8000a10:	e06c      	b.n	8000aec <__aeabi_fsub+0x228>
 8000a12:	2900      	cmp	r1, #0
 8000a14:	d0cc      	beq.n	80009b0 <__aeabi_fsub+0xec>
 8000a16:	1e5a      	subs	r2, r3, #1
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d02b      	beq.n	8000a74 <__aeabi_fsub+0x1b0>
 8000a1c:	2bff      	cmp	r3, #255	@ 0xff
 8000a1e:	d062      	beq.n	8000ae6 <__aeabi_fsub+0x222>
 8000a20:	0013      	movs	r3, r2
 8000a22:	e773      	b.n	800090c <__aeabi_fsub+0x48>
 8000a24:	2900      	cmp	r1, #0
 8000a26:	d0c3      	beq.n	80009b0 <__aeabi_fsub+0xec>
 8000a28:	1e5a      	subs	r2, r3, #1
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_fsub+0x16c>
 8000a2e:	e11e      	b.n	8000c6e <__aeabi_fsub+0x3aa>
 8000a30:	2bff      	cmp	r3, #255	@ 0xff
 8000a32:	d058      	beq.n	8000ae6 <__aeabi_fsub+0x222>
 8000a34:	0013      	movs	r3, r2
 8000a36:	e7b4      	b.n	80009a2 <__aeabi_fsub+0xde>
 8000a38:	22fe      	movs	r2, #254	@ 0xfe
 8000a3a:	1c6b      	adds	r3, r5, #1
 8000a3c:	421a      	tst	r2, r3
 8000a3e:	d10d      	bne.n	8000a5c <__aeabi_fsub+0x198>
 8000a40:	2d00      	cmp	r5, #0
 8000a42:	d060      	beq.n	8000b06 <__aeabi_fsub+0x242>
 8000a44:	4663      	mov	r3, ip
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d000      	beq.n	8000a4c <__aeabi_fsub+0x188>
 8000a4a:	e120      	b.n	8000c8e <__aeabi_fsub+0x3ca>
 8000a4c:	2900      	cmp	r1, #0
 8000a4e:	d000      	beq.n	8000a52 <__aeabi_fsub+0x18e>
 8000a50:	e128      	b.n	8000ca4 <__aeabi_fsub+0x3e0>
 8000a52:	2280      	movs	r2, #128	@ 0x80
 8000a54:	2400      	movs	r4, #0
 8000a56:	20ff      	movs	r0, #255	@ 0xff
 8000a58:	03d2      	lsls	r2, r2, #15
 8000a5a:	e78f      	b.n	800097c <__aeabi_fsub+0xb8>
 8000a5c:	4663      	mov	r3, ip
 8000a5e:	1a5f      	subs	r7, r3, r1
 8000a60:	017b      	lsls	r3, r7, #5
 8000a62:	d500      	bpl.n	8000a66 <__aeabi_fsub+0x1a2>
 8000a64:	e0fe      	b.n	8000c64 <__aeabi_fsub+0x3a0>
 8000a66:	2f00      	cmp	r7, #0
 8000a68:	d000      	beq.n	8000a6c <__aeabi_fsub+0x1a8>
 8000a6a:	e765      	b.n	8000938 <__aeabi_fsub+0x74>
 8000a6c:	2400      	movs	r4, #0
 8000a6e:	2000      	movs	r0, #0
 8000a70:	2200      	movs	r2, #0
 8000a72:	e783      	b.n	800097c <__aeabi_fsub+0xb8>
 8000a74:	4663      	mov	r3, ip
 8000a76:	1a59      	subs	r1, r3, r1
 8000a78:	014b      	lsls	r3, r1, #5
 8000a7a:	d400      	bmi.n	8000a7e <__aeabi_fsub+0x1ba>
 8000a7c:	e119      	b.n	8000cb2 <__aeabi_fsub+0x3ee>
 8000a7e:	018f      	lsls	r7, r1, #6
 8000a80:	09bf      	lsrs	r7, r7, #6
 8000a82:	0038      	movs	r0, r7
 8000a84:	f001 fa24 	bl	8001ed0 <__clzsi2>
 8000a88:	003b      	movs	r3, r7
 8000a8a:	3805      	subs	r0, #5
 8000a8c:	4083      	lsls	r3, r0
 8000a8e:	2501      	movs	r5, #1
 8000a90:	2220      	movs	r2, #32
 8000a92:	1b40      	subs	r0, r0, r5
 8000a94:	3001      	adds	r0, #1
 8000a96:	1a12      	subs	r2, r2, r0
 8000a98:	0019      	movs	r1, r3
 8000a9a:	4093      	lsls	r3, r2
 8000a9c:	40c1      	lsrs	r1, r0
 8000a9e:	1e5a      	subs	r2, r3, #1
 8000aa0:	4193      	sbcs	r3, r2
 8000aa2:	4319      	orrs	r1, r3
 8000aa4:	468c      	mov	ip, r1
 8000aa6:	1e0b      	subs	r3, r1, #0
 8000aa8:	d0e1      	beq.n	8000a6e <__aeabi_fsub+0x1aa>
 8000aaa:	075b      	lsls	r3, r3, #29
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_fsub+0x1ec>
 8000aae:	e152      	b.n	8000d56 <__aeabi_fsub+0x492>
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	2500      	movs	r5, #0
 8000ab4:	400b      	ands	r3, r1
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	d000      	beq.n	8000abc <__aeabi_fsub+0x1f8>
 8000aba:	e752      	b.n	8000962 <__aeabi_fsub+0x9e>
 8000abc:	2001      	movs	r0, #1
 8000abe:	014a      	lsls	r2, r1, #5
 8000ac0:	d400      	bmi.n	8000ac4 <__aeabi_fsub+0x200>
 8000ac2:	e092      	b.n	8000bea <__aeabi_fsub+0x326>
 8000ac4:	b2c0      	uxtb	r0, r0
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	019a      	lsls	r2, r3, #6
 8000aca:	0a52      	lsrs	r2, r2, #9
 8000acc:	e756      	b.n	800097c <__aeabi_fsub+0xb8>
 8000ace:	4663      	mov	r3, ip
 8000ad0:	075b      	lsls	r3, r3, #29
 8000ad2:	d005      	beq.n	8000ae0 <__aeabi_fsub+0x21c>
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	4662      	mov	r2, ip
 8000ad8:	4013      	ands	r3, r2
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	d000      	beq.n	8000ae0 <__aeabi_fsub+0x21c>
 8000ade:	e740      	b.n	8000962 <__aeabi_fsub+0x9e>
 8000ae0:	002b      	movs	r3, r5
 8000ae2:	e765      	b.n	80009b0 <__aeabi_fsub+0xec>
 8000ae4:	0007      	movs	r7, r0
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d100      	bne.n	8000aec <__aeabi_fsub+0x228>
 8000aea:	e745      	b.n	8000978 <__aeabi_fsub+0xb4>
 8000aec:	2280      	movs	r2, #128	@ 0x80
 8000aee:	03d2      	lsls	r2, r2, #15
 8000af0:	433a      	orrs	r2, r7
 8000af2:	0252      	lsls	r2, r2, #9
 8000af4:	20ff      	movs	r0, #255	@ 0xff
 8000af6:	0a52      	lsrs	r2, r2, #9
 8000af8:	e740      	b.n	800097c <__aeabi_fsub+0xb8>
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d179      	bne.n	8000bf2 <__aeabi_fsub+0x32e>
 8000afe:	22fe      	movs	r2, #254	@ 0xfe
 8000b00:	1c6b      	adds	r3, r5, #1
 8000b02:	421a      	tst	r2, r3
 8000b04:	d1aa      	bne.n	8000a5c <__aeabi_fsub+0x198>
 8000b06:	4663      	mov	r3, ip
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_fsub+0x24a>
 8000b0c:	e0f5      	b.n	8000cfa <__aeabi_fsub+0x436>
 8000b0e:	2900      	cmp	r1, #0
 8000b10:	d100      	bne.n	8000b14 <__aeabi_fsub+0x250>
 8000b12:	e0d1      	b.n	8000cb8 <__aeabi_fsub+0x3f4>
 8000b14:	1a5f      	subs	r7, r3, r1
 8000b16:	2380      	movs	r3, #128	@ 0x80
 8000b18:	04db      	lsls	r3, r3, #19
 8000b1a:	421f      	tst	r7, r3
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_fsub+0x25c>
 8000b1e:	e10e      	b.n	8000d3e <__aeabi_fsub+0x47a>
 8000b20:	4662      	mov	r2, ip
 8000b22:	2401      	movs	r4, #1
 8000b24:	1a8a      	subs	r2, r1, r2
 8000b26:	4694      	mov	ip, r2
 8000b28:	2000      	movs	r0, #0
 8000b2a:	4034      	ands	r4, r6
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_fsub+0x26e>
 8000b30:	e724      	b.n	800097c <__aeabi_fsub+0xb8>
 8000b32:	2001      	movs	r0, #1
 8000b34:	421a      	tst	r2, r3
 8000b36:	d1c6      	bne.n	8000ac6 <__aeabi_fsub+0x202>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	08d7      	lsrs	r7, r2, #3
 8000b3c:	e73d      	b.n	80009ba <__aeabi_fsub+0xf6>
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d017      	beq.n	8000b72 <__aeabi_fsub+0x2ae>
 8000b42:	2d00      	cmp	r5, #0
 8000b44:	d000      	beq.n	8000b48 <__aeabi_fsub+0x284>
 8000b46:	e0af      	b.n	8000ca8 <__aeabi_fsub+0x3e4>
 8000b48:	23ff      	movs	r3, #255	@ 0xff
 8000b4a:	4665      	mov	r5, ip
 8000b4c:	2d00      	cmp	r5, #0
 8000b4e:	d100      	bne.n	8000b52 <__aeabi_fsub+0x28e>
 8000b50:	e0ad      	b.n	8000cae <__aeabi_fsub+0x3ea>
 8000b52:	1e5e      	subs	r6, r3, #1
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d100      	bne.n	8000b5a <__aeabi_fsub+0x296>
 8000b58:	e089      	b.n	8000c6e <__aeabi_fsub+0x3aa>
 8000b5a:	2bff      	cmp	r3, #255	@ 0xff
 8000b5c:	d0c2      	beq.n	8000ae4 <__aeabi_fsub+0x220>
 8000b5e:	2e1b      	cmp	r6, #27
 8000b60:	dc00      	bgt.n	8000b64 <__aeabi_fsub+0x2a0>
 8000b62:	e0ab      	b.n	8000cbc <__aeabi_fsub+0x3f8>
 8000b64:	1d4b      	adds	r3, r1, #5
 8000b66:	469c      	mov	ip, r3
 8000b68:	0013      	movs	r3, r2
 8000b6a:	e721      	b.n	80009b0 <__aeabi_fsub+0xec>
 8000b6c:	464b      	mov	r3, r9
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d170      	bne.n	8000c54 <__aeabi_fsub+0x390>
 8000b72:	22fe      	movs	r2, #254	@ 0xfe
 8000b74:	1c6b      	adds	r3, r5, #1
 8000b76:	421a      	tst	r2, r3
 8000b78:	d15e      	bne.n	8000c38 <__aeabi_fsub+0x374>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d000      	beq.n	8000b80 <__aeabi_fsub+0x2bc>
 8000b7e:	e0c3      	b.n	8000d08 <__aeabi_fsub+0x444>
 8000b80:	4663      	mov	r3, ip
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d100      	bne.n	8000b88 <__aeabi_fsub+0x2c4>
 8000b86:	e0d0      	b.n	8000d2a <__aeabi_fsub+0x466>
 8000b88:	2900      	cmp	r1, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fsub+0x2ca>
 8000b8c:	e094      	b.n	8000cb8 <__aeabi_fsub+0x3f4>
 8000b8e:	000a      	movs	r2, r1
 8000b90:	4462      	add	r2, ip
 8000b92:	0153      	lsls	r3, r2, #5
 8000b94:	d400      	bmi.n	8000b98 <__aeabi_fsub+0x2d4>
 8000b96:	e0d8      	b.n	8000d4a <__aeabi_fsub+0x486>
 8000b98:	0192      	lsls	r2, r2, #6
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	0a52      	lsrs	r2, r2, #9
 8000b9e:	e6ed      	b.n	800097c <__aeabi_fsub+0xb8>
 8000ba0:	0008      	movs	r0, r1
 8000ba2:	2220      	movs	r2, #32
 8000ba4:	40d8      	lsrs	r0, r3
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	4099      	lsls	r1, r3
 8000baa:	000b      	movs	r3, r1
 8000bac:	1e5a      	subs	r2, r3, #1
 8000bae:	4193      	sbcs	r3, r2
 8000bb0:	4303      	orrs	r3, r0
 8000bb2:	449c      	add	ip, r3
 8000bb4:	4663      	mov	r3, ip
 8000bb6:	015b      	lsls	r3, r3, #5
 8000bb8:	d589      	bpl.n	8000ace <__aeabi_fsub+0x20a>
 8000bba:	3501      	adds	r5, #1
 8000bbc:	2dff      	cmp	r5, #255	@ 0xff
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_fsub+0x2fe>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fsub+0xb4>
 8000bc2:	4662      	mov	r2, ip
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	4919      	ldr	r1, [pc, #100]	@ (8000c2c <__aeabi_fsub+0x368>)
 8000bc8:	4013      	ands	r3, r2
 8000bca:	0852      	lsrs	r2, r2, #1
 8000bcc:	400a      	ands	r2, r1
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	0013      	movs	r3, r2
 8000bd2:	4694      	mov	ip, r2
 8000bd4:	075b      	lsls	r3, r3, #29
 8000bd6:	d004      	beq.n	8000be2 <__aeabi_fsub+0x31e>
 8000bd8:	230f      	movs	r3, #15
 8000bda:	4013      	ands	r3, r2
 8000bdc:	2b04      	cmp	r3, #4
 8000bde:	d000      	beq.n	8000be2 <__aeabi_fsub+0x31e>
 8000be0:	e6bf      	b.n	8000962 <__aeabi_fsub+0x9e>
 8000be2:	4663      	mov	r3, ip
 8000be4:	015b      	lsls	r3, r3, #5
 8000be6:	d500      	bpl.n	8000bea <__aeabi_fsub+0x326>
 8000be8:	e6c2      	b.n	8000970 <__aeabi_fsub+0xac>
 8000bea:	4663      	mov	r3, ip
 8000bec:	08df      	lsrs	r7, r3, #3
 8000bee:	002b      	movs	r3, r5
 8000bf0:	e6e3      	b.n	80009ba <__aeabi_fsub+0xf6>
 8000bf2:	1b53      	subs	r3, r2, r5
 8000bf4:	2d00      	cmp	r5, #0
 8000bf6:	d100      	bne.n	8000bfa <__aeabi_fsub+0x336>
 8000bf8:	e6f4      	b.n	80009e4 <__aeabi_fsub+0x120>
 8000bfa:	2080      	movs	r0, #128	@ 0x80
 8000bfc:	4664      	mov	r4, ip
 8000bfe:	04c0      	lsls	r0, r0, #19
 8000c00:	4304      	orrs	r4, r0
 8000c02:	46a4      	mov	ip, r4
 8000c04:	0034      	movs	r4, r6
 8000c06:	2001      	movs	r0, #1
 8000c08:	2b1b      	cmp	r3, #27
 8000c0a:	dc09      	bgt.n	8000c20 <__aeabi_fsub+0x35c>
 8000c0c:	2520      	movs	r5, #32
 8000c0e:	4660      	mov	r0, ip
 8000c10:	40d8      	lsrs	r0, r3
 8000c12:	1aeb      	subs	r3, r5, r3
 8000c14:	4665      	mov	r5, ip
 8000c16:	409d      	lsls	r5, r3
 8000c18:	002b      	movs	r3, r5
 8000c1a:	1e5d      	subs	r5, r3, #1
 8000c1c:	41ab      	sbcs	r3, r5
 8000c1e:	4318      	orrs	r0, r3
 8000c20:	1a0b      	subs	r3, r1, r0
 8000c22:	469c      	mov	ip, r3
 8000c24:	0015      	movs	r5, r2
 8000c26:	e680      	b.n	800092a <__aeabi_fsub+0x66>
 8000c28:	fbffffff 	.word	0xfbffffff
 8000c2c:	7dffffff 	.word	0x7dffffff
 8000c30:	22fe      	movs	r2, #254	@ 0xfe
 8000c32:	1c6b      	adds	r3, r5, #1
 8000c34:	4213      	tst	r3, r2
 8000c36:	d0a3      	beq.n	8000b80 <__aeabi_fsub+0x2bc>
 8000c38:	2bff      	cmp	r3, #255	@ 0xff
 8000c3a:	d100      	bne.n	8000c3e <__aeabi_fsub+0x37a>
 8000c3c:	e69c      	b.n	8000978 <__aeabi_fsub+0xb4>
 8000c3e:	4461      	add	r1, ip
 8000c40:	0849      	lsrs	r1, r1, #1
 8000c42:	074a      	lsls	r2, r1, #29
 8000c44:	d049      	beq.n	8000cda <__aeabi_fsub+0x416>
 8000c46:	220f      	movs	r2, #15
 8000c48:	400a      	ands	r2, r1
 8000c4a:	2a04      	cmp	r2, #4
 8000c4c:	d045      	beq.n	8000cda <__aeabi_fsub+0x416>
 8000c4e:	1d0a      	adds	r2, r1, #4
 8000c50:	4694      	mov	ip, r2
 8000c52:	e6ad      	b.n	80009b0 <__aeabi_fsub+0xec>
 8000c54:	2d00      	cmp	r5, #0
 8000c56:	d100      	bne.n	8000c5a <__aeabi_fsub+0x396>
 8000c58:	e776      	b.n	8000b48 <__aeabi_fsub+0x284>
 8000c5a:	e68d      	b.n	8000978 <__aeabi_fsub+0xb4>
 8000c5c:	0034      	movs	r4, r6
 8000c5e:	20ff      	movs	r0, #255	@ 0xff
 8000c60:	2200      	movs	r2, #0
 8000c62:	e68b      	b.n	800097c <__aeabi_fsub+0xb8>
 8000c64:	4663      	mov	r3, ip
 8000c66:	2401      	movs	r4, #1
 8000c68:	1acf      	subs	r7, r1, r3
 8000c6a:	4034      	ands	r4, r6
 8000c6c:	e664      	b.n	8000938 <__aeabi_fsub+0x74>
 8000c6e:	4461      	add	r1, ip
 8000c70:	014b      	lsls	r3, r1, #5
 8000c72:	d56d      	bpl.n	8000d50 <__aeabi_fsub+0x48c>
 8000c74:	0848      	lsrs	r0, r1, #1
 8000c76:	4944      	ldr	r1, [pc, #272]	@ (8000d88 <__aeabi_fsub+0x4c4>)
 8000c78:	4001      	ands	r1, r0
 8000c7a:	0743      	lsls	r3, r0, #29
 8000c7c:	d02c      	beq.n	8000cd8 <__aeabi_fsub+0x414>
 8000c7e:	230f      	movs	r3, #15
 8000c80:	4003      	ands	r3, r0
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	d028      	beq.n	8000cd8 <__aeabi_fsub+0x414>
 8000c86:	1d0b      	adds	r3, r1, #4
 8000c88:	469c      	mov	ip, r3
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	e690      	b.n	80009b0 <__aeabi_fsub+0xec>
 8000c8e:	2900      	cmp	r1, #0
 8000c90:	d100      	bne.n	8000c94 <__aeabi_fsub+0x3d0>
 8000c92:	e72b      	b.n	8000aec <__aeabi_fsub+0x228>
 8000c94:	2380      	movs	r3, #128	@ 0x80
 8000c96:	03db      	lsls	r3, r3, #15
 8000c98:	429f      	cmp	r7, r3
 8000c9a:	d200      	bcs.n	8000c9e <__aeabi_fsub+0x3da>
 8000c9c:	e726      	b.n	8000aec <__aeabi_fsub+0x228>
 8000c9e:	4298      	cmp	r0, r3
 8000ca0:	d300      	bcc.n	8000ca4 <__aeabi_fsub+0x3e0>
 8000ca2:	e723      	b.n	8000aec <__aeabi_fsub+0x228>
 8000ca4:	2401      	movs	r4, #1
 8000ca6:	4034      	ands	r4, r6
 8000ca8:	0007      	movs	r7, r0
 8000caa:	e71f      	b.n	8000aec <__aeabi_fsub+0x228>
 8000cac:	0034      	movs	r4, r6
 8000cae:	468c      	mov	ip, r1
 8000cb0:	e67e      	b.n	80009b0 <__aeabi_fsub+0xec>
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	08cf      	lsrs	r7, r1, #3
 8000cb6:	e680      	b.n	80009ba <__aeabi_fsub+0xf6>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	e67e      	b.n	80009ba <__aeabi_fsub+0xf6>
 8000cbc:	2020      	movs	r0, #32
 8000cbe:	4665      	mov	r5, ip
 8000cc0:	1b80      	subs	r0, r0, r6
 8000cc2:	4085      	lsls	r5, r0
 8000cc4:	4663      	mov	r3, ip
 8000cc6:	0028      	movs	r0, r5
 8000cc8:	40f3      	lsrs	r3, r6
 8000cca:	1e45      	subs	r5, r0, #1
 8000ccc:	41a8      	sbcs	r0, r5
 8000cce:	4303      	orrs	r3, r0
 8000cd0:	469c      	mov	ip, r3
 8000cd2:	0015      	movs	r5, r2
 8000cd4:	448c      	add	ip, r1
 8000cd6:	e76d      	b.n	8000bb4 <__aeabi_fsub+0x2f0>
 8000cd8:	2302      	movs	r3, #2
 8000cda:	08cf      	lsrs	r7, r1, #3
 8000cdc:	e66d      	b.n	80009ba <__aeabi_fsub+0xf6>
 8000cde:	1b0f      	subs	r7, r1, r4
 8000ce0:	017b      	lsls	r3, r7, #5
 8000ce2:	d528      	bpl.n	8000d36 <__aeabi_fsub+0x472>
 8000ce4:	01bf      	lsls	r7, r7, #6
 8000ce6:	09bf      	lsrs	r7, r7, #6
 8000ce8:	0038      	movs	r0, r7
 8000cea:	f001 f8f1 	bl	8001ed0 <__clzsi2>
 8000cee:	003b      	movs	r3, r7
 8000cf0:	3805      	subs	r0, #5
 8000cf2:	4083      	lsls	r3, r0
 8000cf4:	0034      	movs	r4, r6
 8000cf6:	2501      	movs	r5, #1
 8000cf8:	e6ca      	b.n	8000a90 <__aeabi_fsub+0x1cc>
 8000cfa:	2900      	cmp	r1, #0
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_fsub+0x43c>
 8000cfe:	e6b5      	b.n	8000a6c <__aeabi_fsub+0x1a8>
 8000d00:	2401      	movs	r4, #1
 8000d02:	0007      	movs	r7, r0
 8000d04:	4034      	ands	r4, r6
 8000d06:	e658      	b.n	80009ba <__aeabi_fsub+0xf6>
 8000d08:	4663      	mov	r3, ip
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_fsub+0x44c>
 8000d0e:	e6e9      	b.n	8000ae4 <__aeabi_fsub+0x220>
 8000d10:	2900      	cmp	r1, #0
 8000d12:	d100      	bne.n	8000d16 <__aeabi_fsub+0x452>
 8000d14:	e6ea      	b.n	8000aec <__aeabi_fsub+0x228>
 8000d16:	2380      	movs	r3, #128	@ 0x80
 8000d18:	03db      	lsls	r3, r3, #15
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d200      	bcs.n	8000d20 <__aeabi_fsub+0x45c>
 8000d1e:	e6e5      	b.n	8000aec <__aeabi_fsub+0x228>
 8000d20:	4298      	cmp	r0, r3
 8000d22:	d300      	bcc.n	8000d26 <__aeabi_fsub+0x462>
 8000d24:	e6e2      	b.n	8000aec <__aeabi_fsub+0x228>
 8000d26:	0007      	movs	r7, r0
 8000d28:	e6e0      	b.n	8000aec <__aeabi_fsub+0x228>
 8000d2a:	2900      	cmp	r1, #0
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_fsub+0x46c>
 8000d2e:	e69e      	b.n	8000a6e <__aeabi_fsub+0x1aa>
 8000d30:	2300      	movs	r3, #0
 8000d32:	08cf      	lsrs	r7, r1, #3
 8000d34:	e641      	b.n	80009ba <__aeabi_fsub+0xf6>
 8000d36:	0034      	movs	r4, r6
 8000d38:	2301      	movs	r3, #1
 8000d3a:	08ff      	lsrs	r7, r7, #3
 8000d3c:	e63d      	b.n	80009ba <__aeabi_fsub+0xf6>
 8000d3e:	2f00      	cmp	r7, #0
 8000d40:	d100      	bne.n	8000d44 <__aeabi_fsub+0x480>
 8000d42:	e693      	b.n	8000a6c <__aeabi_fsub+0x1a8>
 8000d44:	2300      	movs	r3, #0
 8000d46:	08ff      	lsrs	r7, r7, #3
 8000d48:	e637      	b.n	80009ba <__aeabi_fsub+0xf6>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	08d7      	lsrs	r7, r2, #3
 8000d4e:	e634      	b.n	80009ba <__aeabi_fsub+0xf6>
 8000d50:	2301      	movs	r3, #1
 8000d52:	08cf      	lsrs	r7, r1, #3
 8000d54:	e631      	b.n	80009ba <__aeabi_fsub+0xf6>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	000b      	movs	r3, r1
 8000d5a:	04d2      	lsls	r2, r2, #19
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4013      	ands	r3, r2
 8000d60:	4211      	tst	r1, r2
 8000d62:	d000      	beq.n	8000d66 <__aeabi_fsub+0x4a2>
 8000d64:	e6ae      	b.n	8000ac4 <__aeabi_fsub+0x200>
 8000d66:	08cf      	lsrs	r7, r1, #3
 8000d68:	e627      	b.n	80009ba <__aeabi_fsub+0xf6>
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_fsub+0x4ac>
 8000d6e:	e75f      	b.n	8000c30 <__aeabi_fsub+0x36c>
 8000d70:	1b56      	subs	r6, r2, r5
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d101      	bne.n	8000d7a <__aeabi_fsub+0x4b6>
 8000d76:	0033      	movs	r3, r6
 8000d78:	e6e7      	b.n	8000b4a <__aeabi_fsub+0x286>
 8000d7a:	2380      	movs	r3, #128	@ 0x80
 8000d7c:	4660      	mov	r0, ip
 8000d7e:	04db      	lsls	r3, r3, #19
 8000d80:	4318      	orrs	r0, r3
 8000d82:	4684      	mov	ip, r0
 8000d84:	e6eb      	b.n	8000b5e <__aeabi_fsub+0x29a>
 8000d86:	46c0      	nop			@ (mov r8, r8)
 8000d88:	7dffffff 	.word	0x7dffffff

08000d8c <__aeabi_f2iz>:
 8000d8c:	0241      	lsls	r1, r0, #9
 8000d8e:	0042      	lsls	r2, r0, #1
 8000d90:	0fc3      	lsrs	r3, r0, #31
 8000d92:	0a49      	lsrs	r1, r1, #9
 8000d94:	2000      	movs	r0, #0
 8000d96:	0e12      	lsrs	r2, r2, #24
 8000d98:	2a7e      	cmp	r2, #126	@ 0x7e
 8000d9a:	dd03      	ble.n	8000da4 <__aeabi_f2iz+0x18>
 8000d9c:	2a9d      	cmp	r2, #157	@ 0x9d
 8000d9e:	dd02      	ble.n	8000da6 <__aeabi_f2iz+0x1a>
 8000da0:	4a09      	ldr	r2, [pc, #36]	@ (8000dc8 <__aeabi_f2iz+0x3c>)
 8000da2:	1898      	adds	r0, r3, r2
 8000da4:	4770      	bx	lr
 8000da6:	2080      	movs	r0, #128	@ 0x80
 8000da8:	0400      	lsls	r0, r0, #16
 8000daa:	4301      	orrs	r1, r0
 8000dac:	2a95      	cmp	r2, #149	@ 0x95
 8000dae:	dc07      	bgt.n	8000dc0 <__aeabi_f2iz+0x34>
 8000db0:	2096      	movs	r0, #150	@ 0x96
 8000db2:	1a82      	subs	r2, r0, r2
 8000db4:	40d1      	lsrs	r1, r2
 8000db6:	4248      	negs	r0, r1
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1f3      	bne.n	8000da4 <__aeabi_f2iz+0x18>
 8000dbc:	0008      	movs	r0, r1
 8000dbe:	e7f1      	b.n	8000da4 <__aeabi_f2iz+0x18>
 8000dc0:	3a96      	subs	r2, #150	@ 0x96
 8000dc2:	4091      	lsls	r1, r2
 8000dc4:	e7f7      	b.n	8000db6 <__aeabi_f2iz+0x2a>
 8000dc6:	46c0      	nop			@ (mov r8, r8)
 8000dc8:	7fffffff 	.word	0x7fffffff

08000dcc <__aeabi_ddiv>:
 8000dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dce:	46de      	mov	lr, fp
 8000dd0:	4645      	mov	r5, r8
 8000dd2:	4657      	mov	r7, sl
 8000dd4:	464e      	mov	r6, r9
 8000dd6:	b5e0      	push	{r5, r6, r7, lr}
 8000dd8:	b087      	sub	sp, #28
 8000dda:	9200      	str	r2, [sp, #0]
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	030b      	lsls	r3, r1, #12
 8000de0:	0b1b      	lsrs	r3, r3, #12
 8000de2:	469b      	mov	fp, r3
 8000de4:	0fca      	lsrs	r2, r1, #31
 8000de6:	004b      	lsls	r3, r1, #1
 8000de8:	0004      	movs	r4, r0
 8000dea:	4680      	mov	r8, r0
 8000dec:	0d5b      	lsrs	r3, r3, #21
 8000dee:	9202      	str	r2, [sp, #8]
 8000df0:	d100      	bne.n	8000df4 <__aeabi_ddiv+0x28>
 8000df2:	e098      	b.n	8000f26 <__aeabi_ddiv+0x15a>
 8000df4:	4a7c      	ldr	r2, [pc, #496]	@ (8000fe8 <__aeabi_ddiv+0x21c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d037      	beq.n	8000e6a <__aeabi_ddiv+0x9e>
 8000dfa:	4659      	mov	r1, fp
 8000dfc:	0f42      	lsrs	r2, r0, #29
 8000dfe:	00c9      	lsls	r1, r1, #3
 8000e00:	430a      	orrs	r2, r1
 8000e02:	2180      	movs	r1, #128	@ 0x80
 8000e04:	0409      	lsls	r1, r1, #16
 8000e06:	4311      	orrs	r1, r2
 8000e08:	00c2      	lsls	r2, r0, #3
 8000e0a:	4690      	mov	r8, r2
 8000e0c:	4a77      	ldr	r2, [pc, #476]	@ (8000fec <__aeabi_ddiv+0x220>)
 8000e0e:	4689      	mov	r9, r1
 8000e10:	4692      	mov	sl, r2
 8000e12:	449a      	add	sl, r3
 8000e14:	2300      	movs	r3, #0
 8000e16:	2400      	movs	r4, #0
 8000e18:	9303      	str	r3, [sp, #12]
 8000e1a:	9e00      	ldr	r6, [sp, #0]
 8000e1c:	9f01      	ldr	r7, [sp, #4]
 8000e1e:	033b      	lsls	r3, r7, #12
 8000e20:	0b1b      	lsrs	r3, r3, #12
 8000e22:	469b      	mov	fp, r3
 8000e24:	007b      	lsls	r3, r7, #1
 8000e26:	0030      	movs	r0, r6
 8000e28:	0d5b      	lsrs	r3, r3, #21
 8000e2a:	0ffd      	lsrs	r5, r7, #31
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d059      	beq.n	8000ee4 <__aeabi_ddiv+0x118>
 8000e30:	4a6d      	ldr	r2, [pc, #436]	@ (8000fe8 <__aeabi_ddiv+0x21c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d048      	beq.n	8000ec8 <__aeabi_ddiv+0xfc>
 8000e36:	4659      	mov	r1, fp
 8000e38:	0f72      	lsrs	r2, r6, #29
 8000e3a:	00c9      	lsls	r1, r1, #3
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	2180      	movs	r1, #128	@ 0x80
 8000e40:	0409      	lsls	r1, r1, #16
 8000e42:	4311      	orrs	r1, r2
 8000e44:	468b      	mov	fp, r1
 8000e46:	4969      	ldr	r1, [pc, #420]	@ (8000fec <__aeabi_ddiv+0x220>)
 8000e48:	00f2      	lsls	r2, r6, #3
 8000e4a:	468c      	mov	ip, r1
 8000e4c:	4651      	mov	r1, sl
 8000e4e:	4463      	add	r3, ip
 8000e50:	1acb      	subs	r3, r1, r3
 8000e52:	469a      	mov	sl, r3
 8000e54:	2100      	movs	r1, #0
 8000e56:	9e02      	ldr	r6, [sp, #8]
 8000e58:	406e      	eors	r6, r5
 8000e5a:	b2f6      	uxtb	r6, r6
 8000e5c:	2c0f      	cmp	r4, #15
 8000e5e:	d900      	bls.n	8000e62 <__aeabi_ddiv+0x96>
 8000e60:	e0ce      	b.n	8001000 <__aeabi_ddiv+0x234>
 8000e62:	4b63      	ldr	r3, [pc, #396]	@ (8000ff0 <__aeabi_ddiv+0x224>)
 8000e64:	00a4      	lsls	r4, r4, #2
 8000e66:	591b      	ldr	r3, [r3, r4]
 8000e68:	469f      	mov	pc, r3
 8000e6a:	465a      	mov	r2, fp
 8000e6c:	4302      	orrs	r2, r0
 8000e6e:	4691      	mov	r9, r2
 8000e70:	d000      	beq.n	8000e74 <__aeabi_ddiv+0xa8>
 8000e72:	e090      	b.n	8000f96 <__aeabi_ddiv+0x1ca>
 8000e74:	469a      	mov	sl, r3
 8000e76:	2302      	movs	r3, #2
 8000e78:	4690      	mov	r8, r2
 8000e7a:	2408      	movs	r4, #8
 8000e7c:	9303      	str	r3, [sp, #12]
 8000e7e:	e7cc      	b.n	8000e1a <__aeabi_ddiv+0x4e>
 8000e80:	46cb      	mov	fp, r9
 8000e82:	4642      	mov	r2, r8
 8000e84:	9d02      	ldr	r5, [sp, #8]
 8000e86:	9903      	ldr	r1, [sp, #12]
 8000e88:	2902      	cmp	r1, #2
 8000e8a:	d100      	bne.n	8000e8e <__aeabi_ddiv+0xc2>
 8000e8c:	e1de      	b.n	800124c <__aeabi_ddiv+0x480>
 8000e8e:	2903      	cmp	r1, #3
 8000e90:	d100      	bne.n	8000e94 <__aeabi_ddiv+0xc8>
 8000e92:	e08d      	b.n	8000fb0 <__aeabi_ddiv+0x1e4>
 8000e94:	2901      	cmp	r1, #1
 8000e96:	d000      	beq.n	8000e9a <__aeabi_ddiv+0xce>
 8000e98:	e179      	b.n	800118e <__aeabi_ddiv+0x3c2>
 8000e9a:	002e      	movs	r6, r5
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	2400      	movs	r4, #0
 8000ea2:	4690      	mov	r8, r2
 8000ea4:	051b      	lsls	r3, r3, #20
 8000ea6:	4323      	orrs	r3, r4
 8000ea8:	07f6      	lsls	r6, r6, #31
 8000eaa:	4333      	orrs	r3, r6
 8000eac:	4640      	mov	r0, r8
 8000eae:	0019      	movs	r1, r3
 8000eb0:	b007      	add	sp, #28
 8000eb2:	bcf0      	pop	{r4, r5, r6, r7}
 8000eb4:	46bb      	mov	fp, r7
 8000eb6:	46b2      	mov	sl, r6
 8000eb8:	46a9      	mov	r9, r5
 8000eba:	46a0      	mov	r8, r4
 8000ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	4690      	mov	r8, r2
 8000ec4:	4b48      	ldr	r3, [pc, #288]	@ (8000fe8 <__aeabi_ddiv+0x21c>)
 8000ec6:	e7ed      	b.n	8000ea4 <__aeabi_ddiv+0xd8>
 8000ec8:	465a      	mov	r2, fp
 8000eca:	9b00      	ldr	r3, [sp, #0]
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	4b49      	ldr	r3, [pc, #292]	@ (8000ff4 <__aeabi_ddiv+0x228>)
 8000ed0:	469c      	mov	ip, r3
 8000ed2:	44e2      	add	sl, ip
 8000ed4:	2a00      	cmp	r2, #0
 8000ed6:	d159      	bne.n	8000f8c <__aeabi_ddiv+0x1c0>
 8000ed8:	2302      	movs	r3, #2
 8000eda:	431c      	orrs	r4, r3
 8000edc:	2300      	movs	r3, #0
 8000ede:	2102      	movs	r1, #2
 8000ee0:	469b      	mov	fp, r3
 8000ee2:	e7b8      	b.n	8000e56 <__aeabi_ddiv+0x8a>
 8000ee4:	465a      	mov	r2, fp
 8000ee6:	9b00      	ldr	r3, [sp, #0]
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	d049      	beq.n	8000f80 <__aeabi_ddiv+0x1b4>
 8000eec:	465b      	mov	r3, fp
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_ddiv+0x128>
 8000ef2:	e19c      	b.n	800122e <__aeabi_ddiv+0x462>
 8000ef4:	4658      	mov	r0, fp
 8000ef6:	f000 ffeb 	bl	8001ed0 <__clzsi2>
 8000efa:	0002      	movs	r2, r0
 8000efc:	0003      	movs	r3, r0
 8000efe:	3a0b      	subs	r2, #11
 8000f00:	271d      	movs	r7, #29
 8000f02:	9e00      	ldr	r6, [sp, #0]
 8000f04:	1aba      	subs	r2, r7, r2
 8000f06:	0019      	movs	r1, r3
 8000f08:	4658      	mov	r0, fp
 8000f0a:	40d6      	lsrs	r6, r2
 8000f0c:	3908      	subs	r1, #8
 8000f0e:	4088      	lsls	r0, r1
 8000f10:	0032      	movs	r2, r6
 8000f12:	4302      	orrs	r2, r0
 8000f14:	4693      	mov	fp, r2
 8000f16:	9a00      	ldr	r2, [sp, #0]
 8000f18:	408a      	lsls	r2, r1
 8000f1a:	4937      	ldr	r1, [pc, #220]	@ (8000ff8 <__aeabi_ddiv+0x22c>)
 8000f1c:	4453      	add	r3, sl
 8000f1e:	468a      	mov	sl, r1
 8000f20:	2100      	movs	r1, #0
 8000f22:	449a      	add	sl, r3
 8000f24:	e797      	b.n	8000e56 <__aeabi_ddiv+0x8a>
 8000f26:	465b      	mov	r3, fp
 8000f28:	4303      	orrs	r3, r0
 8000f2a:	4699      	mov	r9, r3
 8000f2c:	d021      	beq.n	8000f72 <__aeabi_ddiv+0x1a6>
 8000f2e:	465b      	mov	r3, fp
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d100      	bne.n	8000f36 <__aeabi_ddiv+0x16a>
 8000f34:	e169      	b.n	800120a <__aeabi_ddiv+0x43e>
 8000f36:	4658      	mov	r0, fp
 8000f38:	f000 ffca 	bl	8001ed0 <__clzsi2>
 8000f3c:	230b      	movs	r3, #11
 8000f3e:	425b      	negs	r3, r3
 8000f40:	469c      	mov	ip, r3
 8000f42:	0002      	movs	r2, r0
 8000f44:	4484      	add	ip, r0
 8000f46:	4666      	mov	r6, ip
 8000f48:	231d      	movs	r3, #29
 8000f4a:	1b9b      	subs	r3, r3, r6
 8000f4c:	0026      	movs	r6, r4
 8000f4e:	0011      	movs	r1, r2
 8000f50:	4658      	mov	r0, fp
 8000f52:	40de      	lsrs	r6, r3
 8000f54:	3908      	subs	r1, #8
 8000f56:	4088      	lsls	r0, r1
 8000f58:	0033      	movs	r3, r6
 8000f5a:	4303      	orrs	r3, r0
 8000f5c:	4699      	mov	r9, r3
 8000f5e:	0023      	movs	r3, r4
 8000f60:	408b      	lsls	r3, r1
 8000f62:	4698      	mov	r8, r3
 8000f64:	4b25      	ldr	r3, [pc, #148]	@ (8000ffc <__aeabi_ddiv+0x230>)
 8000f66:	2400      	movs	r4, #0
 8000f68:	1a9b      	subs	r3, r3, r2
 8000f6a:	469a      	mov	sl, r3
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	9303      	str	r3, [sp, #12]
 8000f70:	e753      	b.n	8000e1a <__aeabi_ddiv+0x4e>
 8000f72:	2300      	movs	r3, #0
 8000f74:	4698      	mov	r8, r3
 8000f76:	469a      	mov	sl, r3
 8000f78:	3301      	adds	r3, #1
 8000f7a:	2404      	movs	r4, #4
 8000f7c:	9303      	str	r3, [sp, #12]
 8000f7e:	e74c      	b.n	8000e1a <__aeabi_ddiv+0x4e>
 8000f80:	2301      	movs	r3, #1
 8000f82:	431c      	orrs	r4, r3
 8000f84:	2300      	movs	r3, #0
 8000f86:	2101      	movs	r1, #1
 8000f88:	469b      	mov	fp, r3
 8000f8a:	e764      	b.n	8000e56 <__aeabi_ddiv+0x8a>
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	0032      	movs	r2, r6
 8000f90:	2103      	movs	r1, #3
 8000f92:	431c      	orrs	r4, r3
 8000f94:	e75f      	b.n	8000e56 <__aeabi_ddiv+0x8a>
 8000f96:	469a      	mov	sl, r3
 8000f98:	2303      	movs	r3, #3
 8000f9a:	46d9      	mov	r9, fp
 8000f9c:	240c      	movs	r4, #12
 8000f9e:	9303      	str	r3, [sp, #12]
 8000fa0:	e73b      	b.n	8000e1a <__aeabi_ddiv+0x4e>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	2480      	movs	r4, #128	@ 0x80
 8000fa6:	4698      	mov	r8, r3
 8000fa8:	2600      	movs	r6, #0
 8000faa:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <__aeabi_ddiv+0x21c>)
 8000fac:	0324      	lsls	r4, r4, #12
 8000fae:	e779      	b.n	8000ea4 <__aeabi_ddiv+0xd8>
 8000fb0:	2480      	movs	r4, #128	@ 0x80
 8000fb2:	465b      	mov	r3, fp
 8000fb4:	0324      	lsls	r4, r4, #12
 8000fb6:	431c      	orrs	r4, r3
 8000fb8:	0324      	lsls	r4, r4, #12
 8000fba:	002e      	movs	r6, r5
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <__aeabi_ddiv+0x21c>)
 8000fc0:	0b24      	lsrs	r4, r4, #12
 8000fc2:	e76f      	b.n	8000ea4 <__aeabi_ddiv+0xd8>
 8000fc4:	2480      	movs	r4, #128	@ 0x80
 8000fc6:	464b      	mov	r3, r9
 8000fc8:	0324      	lsls	r4, r4, #12
 8000fca:	4223      	tst	r3, r4
 8000fcc:	d002      	beq.n	8000fd4 <__aeabi_ddiv+0x208>
 8000fce:	465b      	mov	r3, fp
 8000fd0:	4223      	tst	r3, r4
 8000fd2:	d0f0      	beq.n	8000fb6 <__aeabi_ddiv+0x1ea>
 8000fd4:	2480      	movs	r4, #128	@ 0x80
 8000fd6:	464b      	mov	r3, r9
 8000fd8:	0324      	lsls	r4, r4, #12
 8000fda:	431c      	orrs	r4, r3
 8000fdc:	0324      	lsls	r4, r4, #12
 8000fde:	9e02      	ldr	r6, [sp, #8]
 8000fe0:	4b01      	ldr	r3, [pc, #4]	@ (8000fe8 <__aeabi_ddiv+0x21c>)
 8000fe2:	0b24      	lsrs	r4, r4, #12
 8000fe4:	e75e      	b.n	8000ea4 <__aeabi_ddiv+0xd8>
 8000fe6:	46c0      	nop			@ (mov r8, r8)
 8000fe8:	000007ff 	.word	0x000007ff
 8000fec:	fffffc01 	.word	0xfffffc01
 8000ff0:	080099dc 	.word	0x080099dc
 8000ff4:	fffff801 	.word	0xfffff801
 8000ff8:	000003f3 	.word	0x000003f3
 8000ffc:	fffffc0d 	.word	0xfffffc0d
 8001000:	45cb      	cmp	fp, r9
 8001002:	d200      	bcs.n	8001006 <__aeabi_ddiv+0x23a>
 8001004:	e0f8      	b.n	80011f8 <__aeabi_ddiv+0x42c>
 8001006:	d100      	bne.n	800100a <__aeabi_ddiv+0x23e>
 8001008:	e0f3      	b.n	80011f2 <__aeabi_ddiv+0x426>
 800100a:	2301      	movs	r3, #1
 800100c:	425b      	negs	r3, r3
 800100e:	469c      	mov	ip, r3
 8001010:	4644      	mov	r4, r8
 8001012:	4648      	mov	r0, r9
 8001014:	2500      	movs	r5, #0
 8001016:	44e2      	add	sl, ip
 8001018:	465b      	mov	r3, fp
 800101a:	0e17      	lsrs	r7, r2, #24
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	431f      	orrs	r7, r3
 8001020:	0c19      	lsrs	r1, r3, #16
 8001022:	043b      	lsls	r3, r7, #16
 8001024:	0212      	lsls	r2, r2, #8
 8001026:	9700      	str	r7, [sp, #0]
 8001028:	0c1f      	lsrs	r7, r3, #16
 800102a:	4691      	mov	r9, r2
 800102c:	9102      	str	r1, [sp, #8]
 800102e:	9703      	str	r7, [sp, #12]
 8001030:	f7ff f900 	bl	8000234 <__aeabi_uidivmod>
 8001034:	0002      	movs	r2, r0
 8001036:	437a      	muls	r2, r7
 8001038:	040b      	lsls	r3, r1, #16
 800103a:	0c21      	lsrs	r1, r4, #16
 800103c:	4680      	mov	r8, r0
 800103e:	4319      	orrs	r1, r3
 8001040:	428a      	cmp	r2, r1
 8001042:	d909      	bls.n	8001058 <__aeabi_ddiv+0x28c>
 8001044:	9f00      	ldr	r7, [sp, #0]
 8001046:	2301      	movs	r3, #1
 8001048:	46bc      	mov	ip, r7
 800104a:	425b      	negs	r3, r3
 800104c:	4461      	add	r1, ip
 800104e:	469c      	mov	ip, r3
 8001050:	44e0      	add	r8, ip
 8001052:	428f      	cmp	r7, r1
 8001054:	d800      	bhi.n	8001058 <__aeabi_ddiv+0x28c>
 8001056:	e15c      	b.n	8001312 <__aeabi_ddiv+0x546>
 8001058:	1a88      	subs	r0, r1, r2
 800105a:	9902      	ldr	r1, [sp, #8]
 800105c:	f7ff f8ea 	bl	8000234 <__aeabi_uidivmod>
 8001060:	9a03      	ldr	r2, [sp, #12]
 8001062:	0424      	lsls	r4, r4, #16
 8001064:	4342      	muls	r2, r0
 8001066:	0409      	lsls	r1, r1, #16
 8001068:	0c24      	lsrs	r4, r4, #16
 800106a:	0003      	movs	r3, r0
 800106c:	430c      	orrs	r4, r1
 800106e:	42a2      	cmp	r2, r4
 8001070:	d906      	bls.n	8001080 <__aeabi_ddiv+0x2b4>
 8001072:	9900      	ldr	r1, [sp, #0]
 8001074:	3b01      	subs	r3, #1
 8001076:	468c      	mov	ip, r1
 8001078:	4464      	add	r4, ip
 800107a:	42a1      	cmp	r1, r4
 800107c:	d800      	bhi.n	8001080 <__aeabi_ddiv+0x2b4>
 800107e:	e142      	b.n	8001306 <__aeabi_ddiv+0x53a>
 8001080:	1aa0      	subs	r0, r4, r2
 8001082:	4642      	mov	r2, r8
 8001084:	0412      	lsls	r2, r2, #16
 8001086:	431a      	orrs	r2, r3
 8001088:	4693      	mov	fp, r2
 800108a:	464b      	mov	r3, r9
 800108c:	4659      	mov	r1, fp
 800108e:	0c1b      	lsrs	r3, r3, #16
 8001090:	001f      	movs	r7, r3
 8001092:	9304      	str	r3, [sp, #16]
 8001094:	040b      	lsls	r3, r1, #16
 8001096:	4649      	mov	r1, r9
 8001098:	0409      	lsls	r1, r1, #16
 800109a:	0c09      	lsrs	r1, r1, #16
 800109c:	000c      	movs	r4, r1
 800109e:	0c1b      	lsrs	r3, r3, #16
 80010a0:	435c      	muls	r4, r3
 80010a2:	0c12      	lsrs	r2, r2, #16
 80010a4:	437b      	muls	r3, r7
 80010a6:	4688      	mov	r8, r1
 80010a8:	4351      	muls	r1, r2
 80010aa:	437a      	muls	r2, r7
 80010ac:	0c27      	lsrs	r7, r4, #16
 80010ae:	46bc      	mov	ip, r7
 80010b0:	185b      	adds	r3, r3, r1
 80010b2:	4463      	add	r3, ip
 80010b4:	4299      	cmp	r1, r3
 80010b6:	d903      	bls.n	80010c0 <__aeabi_ddiv+0x2f4>
 80010b8:	2180      	movs	r1, #128	@ 0x80
 80010ba:	0249      	lsls	r1, r1, #9
 80010bc:	468c      	mov	ip, r1
 80010be:	4462      	add	r2, ip
 80010c0:	0c19      	lsrs	r1, r3, #16
 80010c2:	0424      	lsls	r4, r4, #16
 80010c4:	041b      	lsls	r3, r3, #16
 80010c6:	0c24      	lsrs	r4, r4, #16
 80010c8:	188a      	adds	r2, r1, r2
 80010ca:	191c      	adds	r4, r3, r4
 80010cc:	4290      	cmp	r0, r2
 80010ce:	d302      	bcc.n	80010d6 <__aeabi_ddiv+0x30a>
 80010d0:	d116      	bne.n	8001100 <__aeabi_ddiv+0x334>
 80010d2:	42a5      	cmp	r5, r4
 80010d4:	d214      	bcs.n	8001100 <__aeabi_ddiv+0x334>
 80010d6:	465b      	mov	r3, fp
 80010d8:	9f00      	ldr	r7, [sp, #0]
 80010da:	3b01      	subs	r3, #1
 80010dc:	444d      	add	r5, r9
 80010de:	9305      	str	r3, [sp, #20]
 80010e0:	454d      	cmp	r5, r9
 80010e2:	419b      	sbcs	r3, r3
 80010e4:	46bc      	mov	ip, r7
 80010e6:	425b      	negs	r3, r3
 80010e8:	4463      	add	r3, ip
 80010ea:	18c0      	adds	r0, r0, r3
 80010ec:	4287      	cmp	r7, r0
 80010ee:	d300      	bcc.n	80010f2 <__aeabi_ddiv+0x326>
 80010f0:	e102      	b.n	80012f8 <__aeabi_ddiv+0x52c>
 80010f2:	4282      	cmp	r2, r0
 80010f4:	d900      	bls.n	80010f8 <__aeabi_ddiv+0x32c>
 80010f6:	e129      	b.n	800134c <__aeabi_ddiv+0x580>
 80010f8:	d100      	bne.n	80010fc <__aeabi_ddiv+0x330>
 80010fa:	e124      	b.n	8001346 <__aeabi_ddiv+0x57a>
 80010fc:	9b05      	ldr	r3, [sp, #20]
 80010fe:	469b      	mov	fp, r3
 8001100:	1b2c      	subs	r4, r5, r4
 8001102:	42a5      	cmp	r5, r4
 8001104:	41ad      	sbcs	r5, r5
 8001106:	9b00      	ldr	r3, [sp, #0]
 8001108:	1a80      	subs	r0, r0, r2
 800110a:	426d      	negs	r5, r5
 800110c:	1b40      	subs	r0, r0, r5
 800110e:	4283      	cmp	r3, r0
 8001110:	d100      	bne.n	8001114 <__aeabi_ddiv+0x348>
 8001112:	e10f      	b.n	8001334 <__aeabi_ddiv+0x568>
 8001114:	9902      	ldr	r1, [sp, #8]
 8001116:	f7ff f88d 	bl	8000234 <__aeabi_uidivmod>
 800111a:	9a03      	ldr	r2, [sp, #12]
 800111c:	040b      	lsls	r3, r1, #16
 800111e:	4342      	muls	r2, r0
 8001120:	0c21      	lsrs	r1, r4, #16
 8001122:	0005      	movs	r5, r0
 8001124:	4319      	orrs	r1, r3
 8001126:	428a      	cmp	r2, r1
 8001128:	d900      	bls.n	800112c <__aeabi_ddiv+0x360>
 800112a:	e0cb      	b.n	80012c4 <__aeabi_ddiv+0x4f8>
 800112c:	1a88      	subs	r0, r1, r2
 800112e:	9902      	ldr	r1, [sp, #8]
 8001130:	f7ff f880 	bl	8000234 <__aeabi_uidivmod>
 8001134:	9a03      	ldr	r2, [sp, #12]
 8001136:	0424      	lsls	r4, r4, #16
 8001138:	4342      	muls	r2, r0
 800113a:	0409      	lsls	r1, r1, #16
 800113c:	0c24      	lsrs	r4, r4, #16
 800113e:	0003      	movs	r3, r0
 8001140:	430c      	orrs	r4, r1
 8001142:	42a2      	cmp	r2, r4
 8001144:	d900      	bls.n	8001148 <__aeabi_ddiv+0x37c>
 8001146:	e0ca      	b.n	80012de <__aeabi_ddiv+0x512>
 8001148:	4641      	mov	r1, r8
 800114a:	1aa4      	subs	r4, r4, r2
 800114c:	042a      	lsls	r2, r5, #16
 800114e:	431a      	orrs	r2, r3
 8001150:	9f04      	ldr	r7, [sp, #16]
 8001152:	0413      	lsls	r3, r2, #16
 8001154:	0c1b      	lsrs	r3, r3, #16
 8001156:	4359      	muls	r1, r3
 8001158:	4640      	mov	r0, r8
 800115a:	437b      	muls	r3, r7
 800115c:	469c      	mov	ip, r3
 800115e:	0c15      	lsrs	r5, r2, #16
 8001160:	4368      	muls	r0, r5
 8001162:	0c0b      	lsrs	r3, r1, #16
 8001164:	4484      	add	ip, r0
 8001166:	4463      	add	r3, ip
 8001168:	437d      	muls	r5, r7
 800116a:	4298      	cmp	r0, r3
 800116c:	d903      	bls.n	8001176 <__aeabi_ddiv+0x3aa>
 800116e:	2080      	movs	r0, #128	@ 0x80
 8001170:	0240      	lsls	r0, r0, #9
 8001172:	4684      	mov	ip, r0
 8001174:	4465      	add	r5, ip
 8001176:	0c18      	lsrs	r0, r3, #16
 8001178:	0409      	lsls	r1, r1, #16
 800117a:	041b      	lsls	r3, r3, #16
 800117c:	0c09      	lsrs	r1, r1, #16
 800117e:	1940      	adds	r0, r0, r5
 8001180:	185b      	adds	r3, r3, r1
 8001182:	4284      	cmp	r4, r0
 8001184:	d327      	bcc.n	80011d6 <__aeabi_ddiv+0x40a>
 8001186:	d023      	beq.n	80011d0 <__aeabi_ddiv+0x404>
 8001188:	2301      	movs	r3, #1
 800118a:	0035      	movs	r5, r6
 800118c:	431a      	orrs	r2, r3
 800118e:	4b94      	ldr	r3, [pc, #592]	@ (80013e0 <__aeabi_ddiv+0x614>)
 8001190:	4453      	add	r3, sl
 8001192:	2b00      	cmp	r3, #0
 8001194:	dd60      	ble.n	8001258 <__aeabi_ddiv+0x48c>
 8001196:	0751      	lsls	r1, r2, #29
 8001198:	d000      	beq.n	800119c <__aeabi_ddiv+0x3d0>
 800119a:	e086      	b.n	80012aa <__aeabi_ddiv+0x4de>
 800119c:	002e      	movs	r6, r5
 800119e:	08d1      	lsrs	r1, r2, #3
 80011a0:	465a      	mov	r2, fp
 80011a2:	01d2      	lsls	r2, r2, #7
 80011a4:	d506      	bpl.n	80011b4 <__aeabi_ddiv+0x3e8>
 80011a6:	465a      	mov	r2, fp
 80011a8:	4b8e      	ldr	r3, [pc, #568]	@ (80013e4 <__aeabi_ddiv+0x618>)
 80011aa:	401a      	ands	r2, r3
 80011ac:	2380      	movs	r3, #128	@ 0x80
 80011ae:	4693      	mov	fp, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	4453      	add	r3, sl
 80011b4:	4a8c      	ldr	r2, [pc, #560]	@ (80013e8 <__aeabi_ddiv+0x61c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	dd00      	ble.n	80011bc <__aeabi_ddiv+0x3f0>
 80011ba:	e680      	b.n	8000ebe <__aeabi_ddiv+0xf2>
 80011bc:	465a      	mov	r2, fp
 80011be:	0752      	lsls	r2, r2, #29
 80011c0:	430a      	orrs	r2, r1
 80011c2:	4690      	mov	r8, r2
 80011c4:	465a      	mov	r2, fp
 80011c6:	055b      	lsls	r3, r3, #21
 80011c8:	0254      	lsls	r4, r2, #9
 80011ca:	0b24      	lsrs	r4, r4, #12
 80011cc:	0d5b      	lsrs	r3, r3, #21
 80011ce:	e669      	b.n	8000ea4 <__aeabi_ddiv+0xd8>
 80011d0:	0035      	movs	r5, r6
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0db      	beq.n	800118e <__aeabi_ddiv+0x3c2>
 80011d6:	9d00      	ldr	r5, [sp, #0]
 80011d8:	1e51      	subs	r1, r2, #1
 80011da:	46ac      	mov	ip, r5
 80011dc:	4464      	add	r4, ip
 80011de:	42ac      	cmp	r4, r5
 80011e0:	d200      	bcs.n	80011e4 <__aeabi_ddiv+0x418>
 80011e2:	e09e      	b.n	8001322 <__aeabi_ddiv+0x556>
 80011e4:	4284      	cmp	r4, r0
 80011e6:	d200      	bcs.n	80011ea <__aeabi_ddiv+0x41e>
 80011e8:	e0e1      	b.n	80013ae <__aeabi_ddiv+0x5e2>
 80011ea:	d100      	bne.n	80011ee <__aeabi_ddiv+0x422>
 80011ec:	e0ee      	b.n	80013cc <__aeabi_ddiv+0x600>
 80011ee:	000a      	movs	r2, r1
 80011f0:	e7ca      	b.n	8001188 <__aeabi_ddiv+0x3bc>
 80011f2:	4542      	cmp	r2, r8
 80011f4:	d900      	bls.n	80011f8 <__aeabi_ddiv+0x42c>
 80011f6:	e708      	b.n	800100a <__aeabi_ddiv+0x23e>
 80011f8:	464b      	mov	r3, r9
 80011fa:	07dc      	lsls	r4, r3, #31
 80011fc:	0858      	lsrs	r0, r3, #1
 80011fe:	4643      	mov	r3, r8
 8001200:	085b      	lsrs	r3, r3, #1
 8001202:	431c      	orrs	r4, r3
 8001204:	4643      	mov	r3, r8
 8001206:	07dd      	lsls	r5, r3, #31
 8001208:	e706      	b.n	8001018 <__aeabi_ddiv+0x24c>
 800120a:	f000 fe61 	bl	8001ed0 <__clzsi2>
 800120e:	2315      	movs	r3, #21
 8001210:	469c      	mov	ip, r3
 8001212:	4484      	add	ip, r0
 8001214:	0002      	movs	r2, r0
 8001216:	4663      	mov	r3, ip
 8001218:	3220      	adds	r2, #32
 800121a:	2b1c      	cmp	r3, #28
 800121c:	dc00      	bgt.n	8001220 <__aeabi_ddiv+0x454>
 800121e:	e692      	b.n	8000f46 <__aeabi_ddiv+0x17a>
 8001220:	0023      	movs	r3, r4
 8001222:	3808      	subs	r0, #8
 8001224:	4083      	lsls	r3, r0
 8001226:	4699      	mov	r9, r3
 8001228:	2300      	movs	r3, #0
 800122a:	4698      	mov	r8, r3
 800122c:	e69a      	b.n	8000f64 <__aeabi_ddiv+0x198>
 800122e:	f000 fe4f 	bl	8001ed0 <__clzsi2>
 8001232:	0002      	movs	r2, r0
 8001234:	0003      	movs	r3, r0
 8001236:	3215      	adds	r2, #21
 8001238:	3320      	adds	r3, #32
 800123a:	2a1c      	cmp	r2, #28
 800123c:	dc00      	bgt.n	8001240 <__aeabi_ddiv+0x474>
 800123e:	e65f      	b.n	8000f00 <__aeabi_ddiv+0x134>
 8001240:	9900      	ldr	r1, [sp, #0]
 8001242:	3808      	subs	r0, #8
 8001244:	4081      	lsls	r1, r0
 8001246:	2200      	movs	r2, #0
 8001248:	468b      	mov	fp, r1
 800124a:	e666      	b.n	8000f1a <__aeabi_ddiv+0x14e>
 800124c:	2200      	movs	r2, #0
 800124e:	002e      	movs	r6, r5
 8001250:	2400      	movs	r4, #0
 8001252:	4690      	mov	r8, r2
 8001254:	4b65      	ldr	r3, [pc, #404]	@ (80013ec <__aeabi_ddiv+0x620>)
 8001256:	e625      	b.n	8000ea4 <__aeabi_ddiv+0xd8>
 8001258:	002e      	movs	r6, r5
 800125a:	2101      	movs	r1, #1
 800125c:	1ac9      	subs	r1, r1, r3
 800125e:	2938      	cmp	r1, #56	@ 0x38
 8001260:	dd00      	ble.n	8001264 <__aeabi_ddiv+0x498>
 8001262:	e61b      	b.n	8000e9c <__aeabi_ddiv+0xd0>
 8001264:	291f      	cmp	r1, #31
 8001266:	dc7e      	bgt.n	8001366 <__aeabi_ddiv+0x59a>
 8001268:	4861      	ldr	r0, [pc, #388]	@ (80013f0 <__aeabi_ddiv+0x624>)
 800126a:	0014      	movs	r4, r2
 800126c:	4450      	add	r0, sl
 800126e:	465b      	mov	r3, fp
 8001270:	4082      	lsls	r2, r0
 8001272:	4083      	lsls	r3, r0
 8001274:	40cc      	lsrs	r4, r1
 8001276:	1e50      	subs	r0, r2, #1
 8001278:	4182      	sbcs	r2, r0
 800127a:	4323      	orrs	r3, r4
 800127c:	431a      	orrs	r2, r3
 800127e:	465b      	mov	r3, fp
 8001280:	40cb      	lsrs	r3, r1
 8001282:	0751      	lsls	r1, r2, #29
 8001284:	d009      	beq.n	800129a <__aeabi_ddiv+0x4ce>
 8001286:	210f      	movs	r1, #15
 8001288:	4011      	ands	r1, r2
 800128a:	2904      	cmp	r1, #4
 800128c:	d005      	beq.n	800129a <__aeabi_ddiv+0x4ce>
 800128e:	1d11      	adds	r1, r2, #4
 8001290:	4291      	cmp	r1, r2
 8001292:	4192      	sbcs	r2, r2
 8001294:	4252      	negs	r2, r2
 8001296:	189b      	adds	r3, r3, r2
 8001298:	000a      	movs	r2, r1
 800129a:	0219      	lsls	r1, r3, #8
 800129c:	d400      	bmi.n	80012a0 <__aeabi_ddiv+0x4d4>
 800129e:	e09b      	b.n	80013d8 <__aeabi_ddiv+0x60c>
 80012a0:	2200      	movs	r2, #0
 80012a2:	2301      	movs	r3, #1
 80012a4:	2400      	movs	r4, #0
 80012a6:	4690      	mov	r8, r2
 80012a8:	e5fc      	b.n	8000ea4 <__aeabi_ddiv+0xd8>
 80012aa:	210f      	movs	r1, #15
 80012ac:	4011      	ands	r1, r2
 80012ae:	2904      	cmp	r1, #4
 80012b0:	d100      	bne.n	80012b4 <__aeabi_ddiv+0x4e8>
 80012b2:	e773      	b.n	800119c <__aeabi_ddiv+0x3d0>
 80012b4:	1d11      	adds	r1, r2, #4
 80012b6:	4291      	cmp	r1, r2
 80012b8:	4192      	sbcs	r2, r2
 80012ba:	4252      	negs	r2, r2
 80012bc:	002e      	movs	r6, r5
 80012be:	08c9      	lsrs	r1, r1, #3
 80012c0:	4493      	add	fp, r2
 80012c2:	e76d      	b.n	80011a0 <__aeabi_ddiv+0x3d4>
 80012c4:	9b00      	ldr	r3, [sp, #0]
 80012c6:	3d01      	subs	r5, #1
 80012c8:	469c      	mov	ip, r3
 80012ca:	4461      	add	r1, ip
 80012cc:	428b      	cmp	r3, r1
 80012ce:	d900      	bls.n	80012d2 <__aeabi_ddiv+0x506>
 80012d0:	e72c      	b.n	800112c <__aeabi_ddiv+0x360>
 80012d2:	428a      	cmp	r2, r1
 80012d4:	d800      	bhi.n	80012d8 <__aeabi_ddiv+0x50c>
 80012d6:	e729      	b.n	800112c <__aeabi_ddiv+0x360>
 80012d8:	1e85      	subs	r5, r0, #2
 80012da:	4461      	add	r1, ip
 80012dc:	e726      	b.n	800112c <__aeabi_ddiv+0x360>
 80012de:	9900      	ldr	r1, [sp, #0]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	468c      	mov	ip, r1
 80012e4:	4464      	add	r4, ip
 80012e6:	42a1      	cmp	r1, r4
 80012e8:	d900      	bls.n	80012ec <__aeabi_ddiv+0x520>
 80012ea:	e72d      	b.n	8001148 <__aeabi_ddiv+0x37c>
 80012ec:	42a2      	cmp	r2, r4
 80012ee:	d800      	bhi.n	80012f2 <__aeabi_ddiv+0x526>
 80012f0:	e72a      	b.n	8001148 <__aeabi_ddiv+0x37c>
 80012f2:	1e83      	subs	r3, r0, #2
 80012f4:	4464      	add	r4, ip
 80012f6:	e727      	b.n	8001148 <__aeabi_ddiv+0x37c>
 80012f8:	4287      	cmp	r7, r0
 80012fa:	d000      	beq.n	80012fe <__aeabi_ddiv+0x532>
 80012fc:	e6fe      	b.n	80010fc <__aeabi_ddiv+0x330>
 80012fe:	45a9      	cmp	r9, r5
 8001300:	d900      	bls.n	8001304 <__aeabi_ddiv+0x538>
 8001302:	e6fb      	b.n	80010fc <__aeabi_ddiv+0x330>
 8001304:	e6f5      	b.n	80010f2 <__aeabi_ddiv+0x326>
 8001306:	42a2      	cmp	r2, r4
 8001308:	d800      	bhi.n	800130c <__aeabi_ddiv+0x540>
 800130a:	e6b9      	b.n	8001080 <__aeabi_ddiv+0x2b4>
 800130c:	1e83      	subs	r3, r0, #2
 800130e:	4464      	add	r4, ip
 8001310:	e6b6      	b.n	8001080 <__aeabi_ddiv+0x2b4>
 8001312:	428a      	cmp	r2, r1
 8001314:	d800      	bhi.n	8001318 <__aeabi_ddiv+0x54c>
 8001316:	e69f      	b.n	8001058 <__aeabi_ddiv+0x28c>
 8001318:	46bc      	mov	ip, r7
 800131a:	1e83      	subs	r3, r0, #2
 800131c:	4698      	mov	r8, r3
 800131e:	4461      	add	r1, ip
 8001320:	e69a      	b.n	8001058 <__aeabi_ddiv+0x28c>
 8001322:	000a      	movs	r2, r1
 8001324:	4284      	cmp	r4, r0
 8001326:	d000      	beq.n	800132a <__aeabi_ddiv+0x55e>
 8001328:	e72e      	b.n	8001188 <__aeabi_ddiv+0x3bc>
 800132a:	454b      	cmp	r3, r9
 800132c:	d000      	beq.n	8001330 <__aeabi_ddiv+0x564>
 800132e:	e72b      	b.n	8001188 <__aeabi_ddiv+0x3bc>
 8001330:	0035      	movs	r5, r6
 8001332:	e72c      	b.n	800118e <__aeabi_ddiv+0x3c2>
 8001334:	4b2a      	ldr	r3, [pc, #168]	@ (80013e0 <__aeabi_ddiv+0x614>)
 8001336:	4a2f      	ldr	r2, [pc, #188]	@ (80013f4 <__aeabi_ddiv+0x628>)
 8001338:	4453      	add	r3, sl
 800133a:	4592      	cmp	sl, r2
 800133c:	db43      	blt.n	80013c6 <__aeabi_ddiv+0x5fa>
 800133e:	2201      	movs	r2, #1
 8001340:	2100      	movs	r1, #0
 8001342:	4493      	add	fp, r2
 8001344:	e72c      	b.n	80011a0 <__aeabi_ddiv+0x3d4>
 8001346:	42ac      	cmp	r4, r5
 8001348:	d800      	bhi.n	800134c <__aeabi_ddiv+0x580>
 800134a:	e6d7      	b.n	80010fc <__aeabi_ddiv+0x330>
 800134c:	2302      	movs	r3, #2
 800134e:	425b      	negs	r3, r3
 8001350:	469c      	mov	ip, r3
 8001352:	9900      	ldr	r1, [sp, #0]
 8001354:	444d      	add	r5, r9
 8001356:	454d      	cmp	r5, r9
 8001358:	419b      	sbcs	r3, r3
 800135a:	44e3      	add	fp, ip
 800135c:	468c      	mov	ip, r1
 800135e:	425b      	negs	r3, r3
 8001360:	4463      	add	r3, ip
 8001362:	18c0      	adds	r0, r0, r3
 8001364:	e6cc      	b.n	8001100 <__aeabi_ddiv+0x334>
 8001366:	201f      	movs	r0, #31
 8001368:	4240      	negs	r0, r0
 800136a:	1ac3      	subs	r3, r0, r3
 800136c:	4658      	mov	r0, fp
 800136e:	40d8      	lsrs	r0, r3
 8001370:	2920      	cmp	r1, #32
 8001372:	d004      	beq.n	800137e <__aeabi_ddiv+0x5b2>
 8001374:	4659      	mov	r1, fp
 8001376:	4b20      	ldr	r3, [pc, #128]	@ (80013f8 <__aeabi_ddiv+0x62c>)
 8001378:	4453      	add	r3, sl
 800137a:	4099      	lsls	r1, r3
 800137c:	430a      	orrs	r2, r1
 800137e:	1e53      	subs	r3, r2, #1
 8001380:	419a      	sbcs	r2, r3
 8001382:	2307      	movs	r3, #7
 8001384:	0019      	movs	r1, r3
 8001386:	4302      	orrs	r2, r0
 8001388:	2400      	movs	r4, #0
 800138a:	4011      	ands	r1, r2
 800138c:	4213      	tst	r3, r2
 800138e:	d009      	beq.n	80013a4 <__aeabi_ddiv+0x5d8>
 8001390:	3308      	adds	r3, #8
 8001392:	4013      	ands	r3, r2
 8001394:	2b04      	cmp	r3, #4
 8001396:	d01d      	beq.n	80013d4 <__aeabi_ddiv+0x608>
 8001398:	1d13      	adds	r3, r2, #4
 800139a:	4293      	cmp	r3, r2
 800139c:	4189      	sbcs	r1, r1
 800139e:	001a      	movs	r2, r3
 80013a0:	4249      	negs	r1, r1
 80013a2:	0749      	lsls	r1, r1, #29
 80013a4:	08d2      	lsrs	r2, r2, #3
 80013a6:	430a      	orrs	r2, r1
 80013a8:	4690      	mov	r8, r2
 80013aa:	2300      	movs	r3, #0
 80013ac:	e57a      	b.n	8000ea4 <__aeabi_ddiv+0xd8>
 80013ae:	4649      	mov	r1, r9
 80013b0:	9f00      	ldr	r7, [sp, #0]
 80013b2:	004d      	lsls	r5, r1, #1
 80013b4:	454d      	cmp	r5, r9
 80013b6:	4189      	sbcs	r1, r1
 80013b8:	46bc      	mov	ip, r7
 80013ba:	4249      	negs	r1, r1
 80013bc:	4461      	add	r1, ip
 80013be:	46a9      	mov	r9, r5
 80013c0:	3a02      	subs	r2, #2
 80013c2:	1864      	adds	r4, r4, r1
 80013c4:	e7ae      	b.n	8001324 <__aeabi_ddiv+0x558>
 80013c6:	2201      	movs	r2, #1
 80013c8:	4252      	negs	r2, r2
 80013ca:	e746      	b.n	800125a <__aeabi_ddiv+0x48e>
 80013cc:	4599      	cmp	r9, r3
 80013ce:	d3ee      	bcc.n	80013ae <__aeabi_ddiv+0x5e2>
 80013d0:	000a      	movs	r2, r1
 80013d2:	e7aa      	b.n	800132a <__aeabi_ddiv+0x55e>
 80013d4:	2100      	movs	r1, #0
 80013d6:	e7e5      	b.n	80013a4 <__aeabi_ddiv+0x5d8>
 80013d8:	0759      	lsls	r1, r3, #29
 80013da:	025b      	lsls	r3, r3, #9
 80013dc:	0b1c      	lsrs	r4, r3, #12
 80013de:	e7e1      	b.n	80013a4 <__aeabi_ddiv+0x5d8>
 80013e0:	000003ff 	.word	0x000003ff
 80013e4:	feffffff 	.word	0xfeffffff
 80013e8:	000007fe 	.word	0x000007fe
 80013ec:	000007ff 	.word	0x000007ff
 80013f0:	0000041e 	.word	0x0000041e
 80013f4:	fffffc02 	.word	0xfffffc02
 80013f8:	0000043e 	.word	0x0000043e

080013fc <__eqdf2>:
 80013fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fe:	4657      	mov	r7, sl
 8001400:	46de      	mov	lr, fp
 8001402:	464e      	mov	r6, r9
 8001404:	4645      	mov	r5, r8
 8001406:	b5e0      	push	{r5, r6, r7, lr}
 8001408:	000d      	movs	r5, r1
 800140a:	0004      	movs	r4, r0
 800140c:	0fe8      	lsrs	r0, r5, #31
 800140e:	4683      	mov	fp, r0
 8001410:	0309      	lsls	r1, r1, #12
 8001412:	0fd8      	lsrs	r0, r3, #31
 8001414:	0b09      	lsrs	r1, r1, #12
 8001416:	4682      	mov	sl, r0
 8001418:	4819      	ldr	r0, [pc, #100]	@ (8001480 <__eqdf2+0x84>)
 800141a:	468c      	mov	ip, r1
 800141c:	031f      	lsls	r7, r3, #12
 800141e:	0069      	lsls	r1, r5, #1
 8001420:	005e      	lsls	r6, r3, #1
 8001422:	0d49      	lsrs	r1, r1, #21
 8001424:	0b3f      	lsrs	r7, r7, #12
 8001426:	0d76      	lsrs	r6, r6, #21
 8001428:	4281      	cmp	r1, r0
 800142a:	d018      	beq.n	800145e <__eqdf2+0x62>
 800142c:	4286      	cmp	r6, r0
 800142e:	d00f      	beq.n	8001450 <__eqdf2+0x54>
 8001430:	2001      	movs	r0, #1
 8001432:	42b1      	cmp	r1, r6
 8001434:	d10d      	bne.n	8001452 <__eqdf2+0x56>
 8001436:	45bc      	cmp	ip, r7
 8001438:	d10b      	bne.n	8001452 <__eqdf2+0x56>
 800143a:	4294      	cmp	r4, r2
 800143c:	d109      	bne.n	8001452 <__eqdf2+0x56>
 800143e:	45d3      	cmp	fp, sl
 8001440:	d01c      	beq.n	800147c <__eqdf2+0x80>
 8001442:	2900      	cmp	r1, #0
 8001444:	d105      	bne.n	8001452 <__eqdf2+0x56>
 8001446:	4660      	mov	r0, ip
 8001448:	4320      	orrs	r0, r4
 800144a:	1e43      	subs	r3, r0, #1
 800144c:	4198      	sbcs	r0, r3
 800144e:	e000      	b.n	8001452 <__eqdf2+0x56>
 8001450:	2001      	movs	r0, #1
 8001452:	bcf0      	pop	{r4, r5, r6, r7}
 8001454:	46bb      	mov	fp, r7
 8001456:	46b2      	mov	sl, r6
 8001458:	46a9      	mov	r9, r5
 800145a:	46a0      	mov	r8, r4
 800145c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145e:	2001      	movs	r0, #1
 8001460:	428e      	cmp	r6, r1
 8001462:	d1f6      	bne.n	8001452 <__eqdf2+0x56>
 8001464:	4661      	mov	r1, ip
 8001466:	4339      	orrs	r1, r7
 8001468:	000f      	movs	r7, r1
 800146a:	4317      	orrs	r7, r2
 800146c:	4327      	orrs	r7, r4
 800146e:	d1f0      	bne.n	8001452 <__eqdf2+0x56>
 8001470:	465b      	mov	r3, fp
 8001472:	4652      	mov	r2, sl
 8001474:	1a98      	subs	r0, r3, r2
 8001476:	1e43      	subs	r3, r0, #1
 8001478:	4198      	sbcs	r0, r3
 800147a:	e7ea      	b.n	8001452 <__eqdf2+0x56>
 800147c:	2000      	movs	r0, #0
 800147e:	e7e8      	b.n	8001452 <__eqdf2+0x56>
 8001480:	000007ff 	.word	0x000007ff

08001484 <__gedf2>:
 8001484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001486:	4657      	mov	r7, sl
 8001488:	464e      	mov	r6, r9
 800148a:	4645      	mov	r5, r8
 800148c:	46de      	mov	lr, fp
 800148e:	b5e0      	push	{r5, r6, r7, lr}
 8001490:	000d      	movs	r5, r1
 8001492:	030e      	lsls	r6, r1, #12
 8001494:	0049      	lsls	r1, r1, #1
 8001496:	0d49      	lsrs	r1, r1, #21
 8001498:	468a      	mov	sl, r1
 800149a:	0fdf      	lsrs	r7, r3, #31
 800149c:	0fe9      	lsrs	r1, r5, #31
 800149e:	46bc      	mov	ip, r7
 80014a0:	b083      	sub	sp, #12
 80014a2:	4f2f      	ldr	r7, [pc, #188]	@ (8001560 <__gedf2+0xdc>)
 80014a4:	0004      	movs	r4, r0
 80014a6:	4680      	mov	r8, r0
 80014a8:	9101      	str	r1, [sp, #4]
 80014aa:	0058      	lsls	r0, r3, #1
 80014ac:	0319      	lsls	r1, r3, #12
 80014ae:	4691      	mov	r9, r2
 80014b0:	0b36      	lsrs	r6, r6, #12
 80014b2:	0b09      	lsrs	r1, r1, #12
 80014b4:	0d40      	lsrs	r0, r0, #21
 80014b6:	45ba      	cmp	sl, r7
 80014b8:	d01d      	beq.n	80014f6 <__gedf2+0x72>
 80014ba:	42b8      	cmp	r0, r7
 80014bc:	d00d      	beq.n	80014da <__gedf2+0x56>
 80014be:	4657      	mov	r7, sl
 80014c0:	2f00      	cmp	r7, #0
 80014c2:	d12a      	bne.n	800151a <__gedf2+0x96>
 80014c4:	4334      	orrs	r4, r6
 80014c6:	2800      	cmp	r0, #0
 80014c8:	d124      	bne.n	8001514 <__gedf2+0x90>
 80014ca:	430a      	orrs	r2, r1
 80014cc:	d036      	beq.n	800153c <__gedf2+0xb8>
 80014ce:	2c00      	cmp	r4, #0
 80014d0:	d141      	bne.n	8001556 <__gedf2+0xd2>
 80014d2:	4663      	mov	r3, ip
 80014d4:	0058      	lsls	r0, r3, #1
 80014d6:	3801      	subs	r0, #1
 80014d8:	e015      	b.n	8001506 <__gedf2+0x82>
 80014da:	4311      	orrs	r1, r2
 80014dc:	d138      	bne.n	8001550 <__gedf2+0xcc>
 80014de:	4653      	mov	r3, sl
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <__gedf2+0x64>
 80014e4:	4326      	orrs	r6, r4
 80014e6:	d0f4      	beq.n	80014d2 <__gedf2+0x4e>
 80014e8:	9b01      	ldr	r3, [sp, #4]
 80014ea:	4563      	cmp	r3, ip
 80014ec:	d107      	bne.n	80014fe <__gedf2+0x7a>
 80014ee:	9b01      	ldr	r3, [sp, #4]
 80014f0:	0058      	lsls	r0, r3, #1
 80014f2:	3801      	subs	r0, #1
 80014f4:	e007      	b.n	8001506 <__gedf2+0x82>
 80014f6:	4326      	orrs	r6, r4
 80014f8:	d12a      	bne.n	8001550 <__gedf2+0xcc>
 80014fa:	4550      	cmp	r0, sl
 80014fc:	d021      	beq.n	8001542 <__gedf2+0xbe>
 80014fe:	2001      	movs	r0, #1
 8001500:	9b01      	ldr	r3, [sp, #4]
 8001502:	425f      	negs	r7, r3
 8001504:	4338      	orrs	r0, r7
 8001506:	b003      	add	sp, #12
 8001508:	bcf0      	pop	{r4, r5, r6, r7}
 800150a:	46bb      	mov	fp, r7
 800150c:	46b2      	mov	sl, r6
 800150e:	46a9      	mov	r9, r5
 8001510:	46a0      	mov	r8, r4
 8001512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001514:	2c00      	cmp	r4, #0
 8001516:	d0dc      	beq.n	80014d2 <__gedf2+0x4e>
 8001518:	e7e6      	b.n	80014e8 <__gedf2+0x64>
 800151a:	2800      	cmp	r0, #0
 800151c:	d0ef      	beq.n	80014fe <__gedf2+0x7a>
 800151e:	9b01      	ldr	r3, [sp, #4]
 8001520:	4563      	cmp	r3, ip
 8001522:	d1ec      	bne.n	80014fe <__gedf2+0x7a>
 8001524:	4582      	cmp	sl, r0
 8001526:	dcea      	bgt.n	80014fe <__gedf2+0x7a>
 8001528:	dbe1      	blt.n	80014ee <__gedf2+0x6a>
 800152a:	428e      	cmp	r6, r1
 800152c:	d8e7      	bhi.n	80014fe <__gedf2+0x7a>
 800152e:	d1de      	bne.n	80014ee <__gedf2+0x6a>
 8001530:	45c8      	cmp	r8, r9
 8001532:	d8e4      	bhi.n	80014fe <__gedf2+0x7a>
 8001534:	2000      	movs	r0, #0
 8001536:	45c8      	cmp	r8, r9
 8001538:	d2e5      	bcs.n	8001506 <__gedf2+0x82>
 800153a:	e7d8      	b.n	80014ee <__gedf2+0x6a>
 800153c:	2c00      	cmp	r4, #0
 800153e:	d0e2      	beq.n	8001506 <__gedf2+0x82>
 8001540:	e7dd      	b.n	80014fe <__gedf2+0x7a>
 8001542:	4311      	orrs	r1, r2
 8001544:	d104      	bne.n	8001550 <__gedf2+0xcc>
 8001546:	9b01      	ldr	r3, [sp, #4]
 8001548:	4563      	cmp	r3, ip
 800154a:	d1d8      	bne.n	80014fe <__gedf2+0x7a>
 800154c:	2000      	movs	r0, #0
 800154e:	e7da      	b.n	8001506 <__gedf2+0x82>
 8001550:	2002      	movs	r0, #2
 8001552:	4240      	negs	r0, r0
 8001554:	e7d7      	b.n	8001506 <__gedf2+0x82>
 8001556:	9b01      	ldr	r3, [sp, #4]
 8001558:	4563      	cmp	r3, ip
 800155a:	d0e6      	beq.n	800152a <__gedf2+0xa6>
 800155c:	e7cf      	b.n	80014fe <__gedf2+0x7a>
 800155e:	46c0      	nop			@ (mov r8, r8)
 8001560:	000007ff 	.word	0x000007ff

08001564 <__ledf2>:
 8001564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001566:	4657      	mov	r7, sl
 8001568:	464e      	mov	r6, r9
 800156a:	4645      	mov	r5, r8
 800156c:	46de      	mov	lr, fp
 800156e:	b5e0      	push	{r5, r6, r7, lr}
 8001570:	000d      	movs	r5, r1
 8001572:	030e      	lsls	r6, r1, #12
 8001574:	0049      	lsls	r1, r1, #1
 8001576:	0d49      	lsrs	r1, r1, #21
 8001578:	468a      	mov	sl, r1
 800157a:	0fdf      	lsrs	r7, r3, #31
 800157c:	0fe9      	lsrs	r1, r5, #31
 800157e:	46bc      	mov	ip, r7
 8001580:	b083      	sub	sp, #12
 8001582:	4f2e      	ldr	r7, [pc, #184]	@ (800163c <__ledf2+0xd8>)
 8001584:	0004      	movs	r4, r0
 8001586:	4680      	mov	r8, r0
 8001588:	9101      	str	r1, [sp, #4]
 800158a:	0058      	lsls	r0, r3, #1
 800158c:	0319      	lsls	r1, r3, #12
 800158e:	4691      	mov	r9, r2
 8001590:	0b36      	lsrs	r6, r6, #12
 8001592:	0b09      	lsrs	r1, r1, #12
 8001594:	0d40      	lsrs	r0, r0, #21
 8001596:	45ba      	cmp	sl, r7
 8001598:	d01e      	beq.n	80015d8 <__ledf2+0x74>
 800159a:	42b8      	cmp	r0, r7
 800159c:	d00d      	beq.n	80015ba <__ledf2+0x56>
 800159e:	4657      	mov	r7, sl
 80015a0:	2f00      	cmp	r7, #0
 80015a2:	d127      	bne.n	80015f4 <__ledf2+0x90>
 80015a4:	4334      	orrs	r4, r6
 80015a6:	2800      	cmp	r0, #0
 80015a8:	d133      	bne.n	8001612 <__ledf2+0xae>
 80015aa:	430a      	orrs	r2, r1
 80015ac:	d034      	beq.n	8001618 <__ledf2+0xb4>
 80015ae:	2c00      	cmp	r4, #0
 80015b0:	d140      	bne.n	8001634 <__ledf2+0xd0>
 80015b2:	4663      	mov	r3, ip
 80015b4:	0058      	lsls	r0, r3, #1
 80015b6:	3801      	subs	r0, #1
 80015b8:	e015      	b.n	80015e6 <__ledf2+0x82>
 80015ba:	4311      	orrs	r1, r2
 80015bc:	d112      	bne.n	80015e4 <__ledf2+0x80>
 80015be:	4653      	mov	r3, sl
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <__ledf2+0x64>
 80015c4:	4326      	orrs	r6, r4
 80015c6:	d0f4      	beq.n	80015b2 <__ledf2+0x4e>
 80015c8:	9b01      	ldr	r3, [sp, #4]
 80015ca:	4563      	cmp	r3, ip
 80015cc:	d01d      	beq.n	800160a <__ledf2+0xa6>
 80015ce:	2001      	movs	r0, #1
 80015d0:	9b01      	ldr	r3, [sp, #4]
 80015d2:	425f      	negs	r7, r3
 80015d4:	4338      	orrs	r0, r7
 80015d6:	e006      	b.n	80015e6 <__ledf2+0x82>
 80015d8:	4326      	orrs	r6, r4
 80015da:	d103      	bne.n	80015e4 <__ledf2+0x80>
 80015dc:	4550      	cmp	r0, sl
 80015de:	d1f6      	bne.n	80015ce <__ledf2+0x6a>
 80015e0:	4311      	orrs	r1, r2
 80015e2:	d01c      	beq.n	800161e <__ledf2+0xba>
 80015e4:	2002      	movs	r0, #2
 80015e6:	b003      	add	sp, #12
 80015e8:	bcf0      	pop	{r4, r5, r6, r7}
 80015ea:	46bb      	mov	fp, r7
 80015ec:	46b2      	mov	sl, r6
 80015ee:	46a9      	mov	r9, r5
 80015f0:	46a0      	mov	r8, r4
 80015f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015f4:	2800      	cmp	r0, #0
 80015f6:	d0ea      	beq.n	80015ce <__ledf2+0x6a>
 80015f8:	9b01      	ldr	r3, [sp, #4]
 80015fa:	4563      	cmp	r3, ip
 80015fc:	d1e7      	bne.n	80015ce <__ledf2+0x6a>
 80015fe:	4582      	cmp	sl, r0
 8001600:	dce5      	bgt.n	80015ce <__ledf2+0x6a>
 8001602:	db02      	blt.n	800160a <__ledf2+0xa6>
 8001604:	428e      	cmp	r6, r1
 8001606:	d8e2      	bhi.n	80015ce <__ledf2+0x6a>
 8001608:	d00e      	beq.n	8001628 <__ledf2+0xc4>
 800160a:	9b01      	ldr	r3, [sp, #4]
 800160c:	0058      	lsls	r0, r3, #1
 800160e:	3801      	subs	r0, #1
 8001610:	e7e9      	b.n	80015e6 <__ledf2+0x82>
 8001612:	2c00      	cmp	r4, #0
 8001614:	d0cd      	beq.n	80015b2 <__ledf2+0x4e>
 8001616:	e7d7      	b.n	80015c8 <__ledf2+0x64>
 8001618:	2c00      	cmp	r4, #0
 800161a:	d0e4      	beq.n	80015e6 <__ledf2+0x82>
 800161c:	e7d7      	b.n	80015ce <__ledf2+0x6a>
 800161e:	9b01      	ldr	r3, [sp, #4]
 8001620:	2000      	movs	r0, #0
 8001622:	4563      	cmp	r3, ip
 8001624:	d0df      	beq.n	80015e6 <__ledf2+0x82>
 8001626:	e7d2      	b.n	80015ce <__ledf2+0x6a>
 8001628:	45c8      	cmp	r8, r9
 800162a:	d8d0      	bhi.n	80015ce <__ledf2+0x6a>
 800162c:	2000      	movs	r0, #0
 800162e:	45c8      	cmp	r8, r9
 8001630:	d2d9      	bcs.n	80015e6 <__ledf2+0x82>
 8001632:	e7ea      	b.n	800160a <__ledf2+0xa6>
 8001634:	9b01      	ldr	r3, [sp, #4]
 8001636:	4563      	cmp	r3, ip
 8001638:	d0e4      	beq.n	8001604 <__ledf2+0xa0>
 800163a:	e7c8      	b.n	80015ce <__ledf2+0x6a>
 800163c:	000007ff 	.word	0x000007ff

08001640 <__aeabi_dmul>:
 8001640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001642:	4657      	mov	r7, sl
 8001644:	464e      	mov	r6, r9
 8001646:	46de      	mov	lr, fp
 8001648:	4645      	mov	r5, r8
 800164a:	b5e0      	push	{r5, r6, r7, lr}
 800164c:	001f      	movs	r7, r3
 800164e:	030b      	lsls	r3, r1, #12
 8001650:	0b1b      	lsrs	r3, r3, #12
 8001652:	0016      	movs	r6, r2
 8001654:	469a      	mov	sl, r3
 8001656:	0fca      	lsrs	r2, r1, #31
 8001658:	004b      	lsls	r3, r1, #1
 800165a:	0004      	movs	r4, r0
 800165c:	4691      	mov	r9, r2
 800165e:	b085      	sub	sp, #20
 8001660:	0d5b      	lsrs	r3, r3, #21
 8001662:	d100      	bne.n	8001666 <__aeabi_dmul+0x26>
 8001664:	e1cf      	b.n	8001a06 <__aeabi_dmul+0x3c6>
 8001666:	4acd      	ldr	r2, [pc, #820]	@ (800199c <__aeabi_dmul+0x35c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d055      	beq.n	8001718 <__aeabi_dmul+0xd8>
 800166c:	4651      	mov	r1, sl
 800166e:	0f42      	lsrs	r2, r0, #29
 8001670:	00c9      	lsls	r1, r1, #3
 8001672:	430a      	orrs	r2, r1
 8001674:	2180      	movs	r1, #128	@ 0x80
 8001676:	0409      	lsls	r1, r1, #16
 8001678:	4311      	orrs	r1, r2
 800167a:	00c2      	lsls	r2, r0, #3
 800167c:	4690      	mov	r8, r2
 800167e:	4ac8      	ldr	r2, [pc, #800]	@ (80019a0 <__aeabi_dmul+0x360>)
 8001680:	468a      	mov	sl, r1
 8001682:	4693      	mov	fp, r2
 8001684:	449b      	add	fp, r3
 8001686:	2300      	movs	r3, #0
 8001688:	2500      	movs	r5, #0
 800168a:	9302      	str	r3, [sp, #8]
 800168c:	033c      	lsls	r4, r7, #12
 800168e:	007b      	lsls	r3, r7, #1
 8001690:	0ffa      	lsrs	r2, r7, #31
 8001692:	9601      	str	r6, [sp, #4]
 8001694:	0b24      	lsrs	r4, r4, #12
 8001696:	0d5b      	lsrs	r3, r3, #21
 8001698:	9200      	str	r2, [sp, #0]
 800169a:	d100      	bne.n	800169e <__aeabi_dmul+0x5e>
 800169c:	e188      	b.n	80019b0 <__aeabi_dmul+0x370>
 800169e:	4abf      	ldr	r2, [pc, #764]	@ (800199c <__aeabi_dmul+0x35c>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d100      	bne.n	80016a6 <__aeabi_dmul+0x66>
 80016a4:	e092      	b.n	80017cc <__aeabi_dmul+0x18c>
 80016a6:	4abe      	ldr	r2, [pc, #760]	@ (80019a0 <__aeabi_dmul+0x360>)
 80016a8:	4694      	mov	ip, r2
 80016aa:	4463      	add	r3, ip
 80016ac:	449b      	add	fp, r3
 80016ae:	2d0a      	cmp	r5, #10
 80016b0:	dc42      	bgt.n	8001738 <__aeabi_dmul+0xf8>
 80016b2:	00e4      	lsls	r4, r4, #3
 80016b4:	0f73      	lsrs	r3, r6, #29
 80016b6:	4323      	orrs	r3, r4
 80016b8:	2480      	movs	r4, #128	@ 0x80
 80016ba:	4649      	mov	r1, r9
 80016bc:	0424      	lsls	r4, r4, #16
 80016be:	431c      	orrs	r4, r3
 80016c0:	00f3      	lsls	r3, r6, #3
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	9b00      	ldr	r3, [sp, #0]
 80016c6:	2000      	movs	r0, #0
 80016c8:	4059      	eors	r1, r3
 80016ca:	b2cb      	uxtb	r3, r1
 80016cc:	9303      	str	r3, [sp, #12]
 80016ce:	2d02      	cmp	r5, #2
 80016d0:	dc00      	bgt.n	80016d4 <__aeabi_dmul+0x94>
 80016d2:	e094      	b.n	80017fe <__aeabi_dmul+0x1be>
 80016d4:	2301      	movs	r3, #1
 80016d6:	40ab      	lsls	r3, r5
 80016d8:	001d      	movs	r5, r3
 80016da:	23a6      	movs	r3, #166	@ 0xa6
 80016dc:	002a      	movs	r2, r5
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	401a      	ands	r2, r3
 80016e2:	421d      	tst	r5, r3
 80016e4:	d000      	beq.n	80016e8 <__aeabi_dmul+0xa8>
 80016e6:	e229      	b.n	8001b3c <__aeabi_dmul+0x4fc>
 80016e8:	2390      	movs	r3, #144	@ 0x90
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	421d      	tst	r5, r3
 80016ee:	d100      	bne.n	80016f2 <__aeabi_dmul+0xb2>
 80016f0:	e24d      	b.n	8001b8e <__aeabi_dmul+0x54e>
 80016f2:	2300      	movs	r3, #0
 80016f4:	2480      	movs	r4, #128	@ 0x80
 80016f6:	4699      	mov	r9, r3
 80016f8:	0324      	lsls	r4, r4, #12
 80016fa:	4ba8      	ldr	r3, [pc, #672]	@ (800199c <__aeabi_dmul+0x35c>)
 80016fc:	0010      	movs	r0, r2
 80016fe:	464a      	mov	r2, r9
 8001700:	051b      	lsls	r3, r3, #20
 8001702:	4323      	orrs	r3, r4
 8001704:	07d2      	lsls	r2, r2, #31
 8001706:	4313      	orrs	r3, r2
 8001708:	0019      	movs	r1, r3
 800170a:	b005      	add	sp, #20
 800170c:	bcf0      	pop	{r4, r5, r6, r7}
 800170e:	46bb      	mov	fp, r7
 8001710:	46b2      	mov	sl, r6
 8001712:	46a9      	mov	r9, r5
 8001714:	46a0      	mov	r8, r4
 8001716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001718:	4652      	mov	r2, sl
 800171a:	4302      	orrs	r2, r0
 800171c:	4690      	mov	r8, r2
 800171e:	d000      	beq.n	8001722 <__aeabi_dmul+0xe2>
 8001720:	e1ac      	b.n	8001a7c <__aeabi_dmul+0x43c>
 8001722:	469b      	mov	fp, r3
 8001724:	2302      	movs	r3, #2
 8001726:	4692      	mov	sl, r2
 8001728:	2508      	movs	r5, #8
 800172a:	9302      	str	r3, [sp, #8]
 800172c:	e7ae      	b.n	800168c <__aeabi_dmul+0x4c>
 800172e:	9b00      	ldr	r3, [sp, #0]
 8001730:	46a2      	mov	sl, r4
 8001732:	4699      	mov	r9, r3
 8001734:	9b01      	ldr	r3, [sp, #4]
 8001736:	4698      	mov	r8, r3
 8001738:	9b02      	ldr	r3, [sp, #8]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d100      	bne.n	8001740 <__aeabi_dmul+0x100>
 800173e:	e1ca      	b.n	8001ad6 <__aeabi_dmul+0x496>
 8001740:	2b03      	cmp	r3, #3
 8001742:	d100      	bne.n	8001746 <__aeabi_dmul+0x106>
 8001744:	e192      	b.n	8001a6c <__aeabi_dmul+0x42c>
 8001746:	2b01      	cmp	r3, #1
 8001748:	d110      	bne.n	800176c <__aeabi_dmul+0x12c>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2200      	movs	r2, #0
 8001750:	e7d4      	b.n	80016fc <__aeabi_dmul+0xbc>
 8001752:	2201      	movs	r2, #1
 8001754:	087b      	lsrs	r3, r7, #1
 8001756:	403a      	ands	r2, r7
 8001758:	4313      	orrs	r3, r2
 800175a:	4652      	mov	r2, sl
 800175c:	07d2      	lsls	r2, r2, #31
 800175e:	4313      	orrs	r3, r2
 8001760:	4698      	mov	r8, r3
 8001762:	4653      	mov	r3, sl
 8001764:	085b      	lsrs	r3, r3, #1
 8001766:	469a      	mov	sl, r3
 8001768:	9b03      	ldr	r3, [sp, #12]
 800176a:	4699      	mov	r9, r3
 800176c:	465b      	mov	r3, fp
 800176e:	1c58      	adds	r0, r3, #1
 8001770:	2380      	movs	r3, #128	@ 0x80
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	445b      	add	r3, fp
 8001776:	2b00      	cmp	r3, #0
 8001778:	dc00      	bgt.n	800177c <__aeabi_dmul+0x13c>
 800177a:	e1b1      	b.n	8001ae0 <__aeabi_dmul+0x4a0>
 800177c:	4642      	mov	r2, r8
 800177e:	0752      	lsls	r2, r2, #29
 8001780:	d00b      	beq.n	800179a <__aeabi_dmul+0x15a>
 8001782:	220f      	movs	r2, #15
 8001784:	4641      	mov	r1, r8
 8001786:	400a      	ands	r2, r1
 8001788:	2a04      	cmp	r2, #4
 800178a:	d006      	beq.n	800179a <__aeabi_dmul+0x15a>
 800178c:	4642      	mov	r2, r8
 800178e:	1d11      	adds	r1, r2, #4
 8001790:	4541      	cmp	r1, r8
 8001792:	4192      	sbcs	r2, r2
 8001794:	4688      	mov	r8, r1
 8001796:	4252      	negs	r2, r2
 8001798:	4492      	add	sl, r2
 800179a:	4652      	mov	r2, sl
 800179c:	01d2      	lsls	r2, r2, #7
 800179e:	d506      	bpl.n	80017ae <__aeabi_dmul+0x16e>
 80017a0:	4652      	mov	r2, sl
 80017a2:	4b80      	ldr	r3, [pc, #512]	@ (80019a4 <__aeabi_dmul+0x364>)
 80017a4:	401a      	ands	r2, r3
 80017a6:	2380      	movs	r3, #128	@ 0x80
 80017a8:	4692      	mov	sl, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	18c3      	adds	r3, r0, r3
 80017ae:	4a7e      	ldr	r2, [pc, #504]	@ (80019a8 <__aeabi_dmul+0x368>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	dd00      	ble.n	80017b6 <__aeabi_dmul+0x176>
 80017b4:	e18f      	b.n	8001ad6 <__aeabi_dmul+0x496>
 80017b6:	4642      	mov	r2, r8
 80017b8:	08d1      	lsrs	r1, r2, #3
 80017ba:	4652      	mov	r2, sl
 80017bc:	0752      	lsls	r2, r2, #29
 80017be:	430a      	orrs	r2, r1
 80017c0:	4651      	mov	r1, sl
 80017c2:	055b      	lsls	r3, r3, #21
 80017c4:	024c      	lsls	r4, r1, #9
 80017c6:	0b24      	lsrs	r4, r4, #12
 80017c8:	0d5b      	lsrs	r3, r3, #21
 80017ca:	e797      	b.n	80016fc <__aeabi_dmul+0xbc>
 80017cc:	4b73      	ldr	r3, [pc, #460]	@ (800199c <__aeabi_dmul+0x35c>)
 80017ce:	4326      	orrs	r6, r4
 80017d0:	469c      	mov	ip, r3
 80017d2:	44e3      	add	fp, ip
 80017d4:	2e00      	cmp	r6, #0
 80017d6:	d100      	bne.n	80017da <__aeabi_dmul+0x19a>
 80017d8:	e16f      	b.n	8001aba <__aeabi_dmul+0x47a>
 80017da:	2303      	movs	r3, #3
 80017dc:	4649      	mov	r1, r9
 80017de:	431d      	orrs	r5, r3
 80017e0:	9b00      	ldr	r3, [sp, #0]
 80017e2:	4059      	eors	r1, r3
 80017e4:	b2cb      	uxtb	r3, r1
 80017e6:	9303      	str	r3, [sp, #12]
 80017e8:	2d0a      	cmp	r5, #10
 80017ea:	dd00      	ble.n	80017ee <__aeabi_dmul+0x1ae>
 80017ec:	e133      	b.n	8001a56 <__aeabi_dmul+0x416>
 80017ee:	2301      	movs	r3, #1
 80017f0:	40ab      	lsls	r3, r5
 80017f2:	001d      	movs	r5, r3
 80017f4:	2303      	movs	r3, #3
 80017f6:	9302      	str	r3, [sp, #8]
 80017f8:	2288      	movs	r2, #136	@ 0x88
 80017fa:	422a      	tst	r2, r5
 80017fc:	d197      	bne.n	800172e <__aeabi_dmul+0xee>
 80017fe:	4642      	mov	r2, r8
 8001800:	4643      	mov	r3, r8
 8001802:	0412      	lsls	r2, r2, #16
 8001804:	0c12      	lsrs	r2, r2, #16
 8001806:	0016      	movs	r6, r2
 8001808:	9801      	ldr	r0, [sp, #4]
 800180a:	0c1d      	lsrs	r5, r3, #16
 800180c:	0c03      	lsrs	r3, r0, #16
 800180e:	0400      	lsls	r0, r0, #16
 8001810:	0c00      	lsrs	r0, r0, #16
 8001812:	4346      	muls	r6, r0
 8001814:	46b4      	mov	ip, r6
 8001816:	001e      	movs	r6, r3
 8001818:	436e      	muls	r6, r5
 800181a:	9600      	str	r6, [sp, #0]
 800181c:	0016      	movs	r6, r2
 800181e:	0007      	movs	r7, r0
 8001820:	435e      	muls	r6, r3
 8001822:	4661      	mov	r1, ip
 8001824:	46b0      	mov	r8, r6
 8001826:	436f      	muls	r7, r5
 8001828:	0c0e      	lsrs	r6, r1, #16
 800182a:	44b8      	add	r8, r7
 800182c:	4446      	add	r6, r8
 800182e:	42b7      	cmp	r7, r6
 8001830:	d905      	bls.n	800183e <__aeabi_dmul+0x1fe>
 8001832:	2180      	movs	r1, #128	@ 0x80
 8001834:	0249      	lsls	r1, r1, #9
 8001836:	4688      	mov	r8, r1
 8001838:	9f00      	ldr	r7, [sp, #0]
 800183a:	4447      	add	r7, r8
 800183c:	9700      	str	r7, [sp, #0]
 800183e:	4661      	mov	r1, ip
 8001840:	0409      	lsls	r1, r1, #16
 8001842:	0c09      	lsrs	r1, r1, #16
 8001844:	0c37      	lsrs	r7, r6, #16
 8001846:	0436      	lsls	r6, r6, #16
 8001848:	468c      	mov	ip, r1
 800184a:	0031      	movs	r1, r6
 800184c:	4461      	add	r1, ip
 800184e:	9101      	str	r1, [sp, #4]
 8001850:	0011      	movs	r1, r2
 8001852:	0c26      	lsrs	r6, r4, #16
 8001854:	0424      	lsls	r4, r4, #16
 8001856:	0c24      	lsrs	r4, r4, #16
 8001858:	4361      	muls	r1, r4
 800185a:	468c      	mov	ip, r1
 800185c:	0021      	movs	r1, r4
 800185e:	4369      	muls	r1, r5
 8001860:	4689      	mov	r9, r1
 8001862:	4661      	mov	r1, ip
 8001864:	0c09      	lsrs	r1, r1, #16
 8001866:	4688      	mov	r8, r1
 8001868:	4372      	muls	r2, r6
 800186a:	444a      	add	r2, r9
 800186c:	4442      	add	r2, r8
 800186e:	4375      	muls	r5, r6
 8001870:	4591      	cmp	r9, r2
 8001872:	d903      	bls.n	800187c <__aeabi_dmul+0x23c>
 8001874:	2180      	movs	r1, #128	@ 0x80
 8001876:	0249      	lsls	r1, r1, #9
 8001878:	4688      	mov	r8, r1
 800187a:	4445      	add	r5, r8
 800187c:	0c11      	lsrs	r1, r2, #16
 800187e:	4688      	mov	r8, r1
 8001880:	4661      	mov	r1, ip
 8001882:	0409      	lsls	r1, r1, #16
 8001884:	0c09      	lsrs	r1, r1, #16
 8001886:	468c      	mov	ip, r1
 8001888:	0412      	lsls	r2, r2, #16
 800188a:	4462      	add	r2, ip
 800188c:	18b9      	adds	r1, r7, r2
 800188e:	9102      	str	r1, [sp, #8]
 8001890:	4651      	mov	r1, sl
 8001892:	0c09      	lsrs	r1, r1, #16
 8001894:	468c      	mov	ip, r1
 8001896:	4651      	mov	r1, sl
 8001898:	040f      	lsls	r7, r1, #16
 800189a:	0c3f      	lsrs	r7, r7, #16
 800189c:	0039      	movs	r1, r7
 800189e:	4341      	muls	r1, r0
 80018a0:	4445      	add	r5, r8
 80018a2:	4688      	mov	r8, r1
 80018a4:	4661      	mov	r1, ip
 80018a6:	4341      	muls	r1, r0
 80018a8:	468a      	mov	sl, r1
 80018aa:	4641      	mov	r1, r8
 80018ac:	4660      	mov	r0, ip
 80018ae:	0c09      	lsrs	r1, r1, #16
 80018b0:	4689      	mov	r9, r1
 80018b2:	4358      	muls	r0, r3
 80018b4:	437b      	muls	r3, r7
 80018b6:	4453      	add	r3, sl
 80018b8:	444b      	add	r3, r9
 80018ba:	459a      	cmp	sl, r3
 80018bc:	d903      	bls.n	80018c6 <__aeabi_dmul+0x286>
 80018be:	2180      	movs	r1, #128	@ 0x80
 80018c0:	0249      	lsls	r1, r1, #9
 80018c2:	4689      	mov	r9, r1
 80018c4:	4448      	add	r0, r9
 80018c6:	0c19      	lsrs	r1, r3, #16
 80018c8:	4689      	mov	r9, r1
 80018ca:	4641      	mov	r1, r8
 80018cc:	0409      	lsls	r1, r1, #16
 80018ce:	0c09      	lsrs	r1, r1, #16
 80018d0:	4688      	mov	r8, r1
 80018d2:	0039      	movs	r1, r7
 80018d4:	4361      	muls	r1, r4
 80018d6:	041b      	lsls	r3, r3, #16
 80018d8:	4443      	add	r3, r8
 80018da:	4688      	mov	r8, r1
 80018dc:	4661      	mov	r1, ip
 80018de:	434c      	muls	r4, r1
 80018e0:	4371      	muls	r1, r6
 80018e2:	468c      	mov	ip, r1
 80018e4:	4641      	mov	r1, r8
 80018e6:	4377      	muls	r7, r6
 80018e8:	0c0e      	lsrs	r6, r1, #16
 80018ea:	193f      	adds	r7, r7, r4
 80018ec:	19f6      	adds	r6, r6, r7
 80018ee:	4448      	add	r0, r9
 80018f0:	42b4      	cmp	r4, r6
 80018f2:	d903      	bls.n	80018fc <__aeabi_dmul+0x2bc>
 80018f4:	2180      	movs	r1, #128	@ 0x80
 80018f6:	0249      	lsls	r1, r1, #9
 80018f8:	4689      	mov	r9, r1
 80018fa:	44cc      	add	ip, r9
 80018fc:	9902      	ldr	r1, [sp, #8]
 80018fe:	9f00      	ldr	r7, [sp, #0]
 8001900:	4689      	mov	r9, r1
 8001902:	0431      	lsls	r1, r6, #16
 8001904:	444f      	add	r7, r9
 8001906:	4689      	mov	r9, r1
 8001908:	4641      	mov	r1, r8
 800190a:	4297      	cmp	r7, r2
 800190c:	4192      	sbcs	r2, r2
 800190e:	040c      	lsls	r4, r1, #16
 8001910:	0c24      	lsrs	r4, r4, #16
 8001912:	444c      	add	r4, r9
 8001914:	18ff      	adds	r7, r7, r3
 8001916:	4252      	negs	r2, r2
 8001918:	1964      	adds	r4, r4, r5
 800191a:	18a1      	adds	r1, r4, r2
 800191c:	429f      	cmp	r7, r3
 800191e:	419b      	sbcs	r3, r3
 8001920:	4688      	mov	r8, r1
 8001922:	4682      	mov	sl, r0
 8001924:	425b      	negs	r3, r3
 8001926:	4699      	mov	r9, r3
 8001928:	4590      	cmp	r8, r2
 800192a:	4192      	sbcs	r2, r2
 800192c:	42ac      	cmp	r4, r5
 800192e:	41a4      	sbcs	r4, r4
 8001930:	44c2      	add	sl, r8
 8001932:	44d1      	add	r9, sl
 8001934:	4252      	negs	r2, r2
 8001936:	4264      	negs	r4, r4
 8001938:	4314      	orrs	r4, r2
 800193a:	4599      	cmp	r9, r3
 800193c:	419b      	sbcs	r3, r3
 800193e:	4582      	cmp	sl, r0
 8001940:	4192      	sbcs	r2, r2
 8001942:	425b      	negs	r3, r3
 8001944:	4252      	negs	r2, r2
 8001946:	4313      	orrs	r3, r2
 8001948:	464a      	mov	r2, r9
 800194a:	0c36      	lsrs	r6, r6, #16
 800194c:	19a4      	adds	r4, r4, r6
 800194e:	18e3      	adds	r3, r4, r3
 8001950:	4463      	add	r3, ip
 8001952:	025b      	lsls	r3, r3, #9
 8001954:	0dd2      	lsrs	r2, r2, #23
 8001956:	431a      	orrs	r2, r3
 8001958:	9901      	ldr	r1, [sp, #4]
 800195a:	4692      	mov	sl, r2
 800195c:	027a      	lsls	r2, r7, #9
 800195e:	430a      	orrs	r2, r1
 8001960:	1e50      	subs	r0, r2, #1
 8001962:	4182      	sbcs	r2, r0
 8001964:	0dff      	lsrs	r7, r7, #23
 8001966:	4317      	orrs	r7, r2
 8001968:	464a      	mov	r2, r9
 800196a:	0252      	lsls	r2, r2, #9
 800196c:	4317      	orrs	r7, r2
 800196e:	46b8      	mov	r8, r7
 8001970:	01db      	lsls	r3, r3, #7
 8001972:	d500      	bpl.n	8001976 <__aeabi_dmul+0x336>
 8001974:	e6ed      	b.n	8001752 <__aeabi_dmul+0x112>
 8001976:	4b0d      	ldr	r3, [pc, #52]	@ (80019ac <__aeabi_dmul+0x36c>)
 8001978:	9a03      	ldr	r2, [sp, #12]
 800197a:	445b      	add	r3, fp
 800197c:	4691      	mov	r9, r2
 800197e:	2b00      	cmp	r3, #0
 8001980:	dc00      	bgt.n	8001984 <__aeabi_dmul+0x344>
 8001982:	e0ac      	b.n	8001ade <__aeabi_dmul+0x49e>
 8001984:	003a      	movs	r2, r7
 8001986:	0752      	lsls	r2, r2, #29
 8001988:	d100      	bne.n	800198c <__aeabi_dmul+0x34c>
 800198a:	e710      	b.n	80017ae <__aeabi_dmul+0x16e>
 800198c:	220f      	movs	r2, #15
 800198e:	4658      	mov	r0, fp
 8001990:	403a      	ands	r2, r7
 8001992:	2a04      	cmp	r2, #4
 8001994:	d000      	beq.n	8001998 <__aeabi_dmul+0x358>
 8001996:	e6f9      	b.n	800178c <__aeabi_dmul+0x14c>
 8001998:	e709      	b.n	80017ae <__aeabi_dmul+0x16e>
 800199a:	46c0      	nop			@ (mov r8, r8)
 800199c:	000007ff 	.word	0x000007ff
 80019a0:	fffffc01 	.word	0xfffffc01
 80019a4:	feffffff 	.word	0xfeffffff
 80019a8:	000007fe 	.word	0x000007fe
 80019ac:	000003ff 	.word	0x000003ff
 80019b0:	0022      	movs	r2, r4
 80019b2:	4332      	orrs	r2, r6
 80019b4:	d06f      	beq.n	8001a96 <__aeabi_dmul+0x456>
 80019b6:	2c00      	cmp	r4, #0
 80019b8:	d100      	bne.n	80019bc <__aeabi_dmul+0x37c>
 80019ba:	e0c2      	b.n	8001b42 <__aeabi_dmul+0x502>
 80019bc:	0020      	movs	r0, r4
 80019be:	f000 fa87 	bl	8001ed0 <__clzsi2>
 80019c2:	0002      	movs	r2, r0
 80019c4:	0003      	movs	r3, r0
 80019c6:	3a0b      	subs	r2, #11
 80019c8:	201d      	movs	r0, #29
 80019ca:	1a82      	subs	r2, r0, r2
 80019cc:	0030      	movs	r0, r6
 80019ce:	0019      	movs	r1, r3
 80019d0:	40d0      	lsrs	r0, r2
 80019d2:	3908      	subs	r1, #8
 80019d4:	408c      	lsls	r4, r1
 80019d6:	0002      	movs	r2, r0
 80019d8:	4322      	orrs	r2, r4
 80019da:	0034      	movs	r4, r6
 80019dc:	408c      	lsls	r4, r1
 80019de:	4659      	mov	r1, fp
 80019e0:	1acb      	subs	r3, r1, r3
 80019e2:	4986      	ldr	r1, [pc, #536]	@ (8001bfc <__aeabi_dmul+0x5bc>)
 80019e4:	468b      	mov	fp, r1
 80019e6:	449b      	add	fp, r3
 80019e8:	2d0a      	cmp	r5, #10
 80019ea:	dd00      	ble.n	80019ee <__aeabi_dmul+0x3ae>
 80019ec:	e6a4      	b.n	8001738 <__aeabi_dmul+0xf8>
 80019ee:	4649      	mov	r1, r9
 80019f0:	9b00      	ldr	r3, [sp, #0]
 80019f2:	9401      	str	r4, [sp, #4]
 80019f4:	4059      	eors	r1, r3
 80019f6:	b2cb      	uxtb	r3, r1
 80019f8:	0014      	movs	r4, r2
 80019fa:	2000      	movs	r0, #0
 80019fc:	9303      	str	r3, [sp, #12]
 80019fe:	2d02      	cmp	r5, #2
 8001a00:	dd00      	ble.n	8001a04 <__aeabi_dmul+0x3c4>
 8001a02:	e667      	b.n	80016d4 <__aeabi_dmul+0x94>
 8001a04:	e6fb      	b.n	80017fe <__aeabi_dmul+0x1be>
 8001a06:	4653      	mov	r3, sl
 8001a08:	4303      	orrs	r3, r0
 8001a0a:	4698      	mov	r8, r3
 8001a0c:	d03c      	beq.n	8001a88 <__aeabi_dmul+0x448>
 8001a0e:	4653      	mov	r3, sl
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d100      	bne.n	8001a16 <__aeabi_dmul+0x3d6>
 8001a14:	e0a3      	b.n	8001b5e <__aeabi_dmul+0x51e>
 8001a16:	4650      	mov	r0, sl
 8001a18:	f000 fa5a 	bl	8001ed0 <__clzsi2>
 8001a1c:	230b      	movs	r3, #11
 8001a1e:	425b      	negs	r3, r3
 8001a20:	469c      	mov	ip, r3
 8001a22:	0002      	movs	r2, r0
 8001a24:	4484      	add	ip, r0
 8001a26:	0011      	movs	r1, r2
 8001a28:	4650      	mov	r0, sl
 8001a2a:	3908      	subs	r1, #8
 8001a2c:	4088      	lsls	r0, r1
 8001a2e:	231d      	movs	r3, #29
 8001a30:	4680      	mov	r8, r0
 8001a32:	4660      	mov	r0, ip
 8001a34:	1a1b      	subs	r3, r3, r0
 8001a36:	0020      	movs	r0, r4
 8001a38:	40d8      	lsrs	r0, r3
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	4640      	mov	r0, r8
 8001a3e:	4303      	orrs	r3, r0
 8001a40:	469a      	mov	sl, r3
 8001a42:	0023      	movs	r3, r4
 8001a44:	408b      	lsls	r3, r1
 8001a46:	4698      	mov	r8, r3
 8001a48:	4b6c      	ldr	r3, [pc, #432]	@ (8001bfc <__aeabi_dmul+0x5bc>)
 8001a4a:	2500      	movs	r5, #0
 8001a4c:	1a9b      	subs	r3, r3, r2
 8001a4e:	469b      	mov	fp, r3
 8001a50:	2300      	movs	r3, #0
 8001a52:	9302      	str	r3, [sp, #8]
 8001a54:	e61a      	b.n	800168c <__aeabi_dmul+0x4c>
 8001a56:	2d0f      	cmp	r5, #15
 8001a58:	d000      	beq.n	8001a5c <__aeabi_dmul+0x41c>
 8001a5a:	e0c9      	b.n	8001bf0 <__aeabi_dmul+0x5b0>
 8001a5c:	2380      	movs	r3, #128	@ 0x80
 8001a5e:	4652      	mov	r2, sl
 8001a60:	031b      	lsls	r3, r3, #12
 8001a62:	421a      	tst	r2, r3
 8001a64:	d002      	beq.n	8001a6c <__aeabi_dmul+0x42c>
 8001a66:	421c      	tst	r4, r3
 8001a68:	d100      	bne.n	8001a6c <__aeabi_dmul+0x42c>
 8001a6a:	e092      	b.n	8001b92 <__aeabi_dmul+0x552>
 8001a6c:	2480      	movs	r4, #128	@ 0x80
 8001a6e:	4653      	mov	r3, sl
 8001a70:	0324      	lsls	r4, r4, #12
 8001a72:	431c      	orrs	r4, r3
 8001a74:	0324      	lsls	r4, r4, #12
 8001a76:	4642      	mov	r2, r8
 8001a78:	0b24      	lsrs	r4, r4, #12
 8001a7a:	e63e      	b.n	80016fa <__aeabi_dmul+0xba>
 8001a7c:	469b      	mov	fp, r3
 8001a7e:	2303      	movs	r3, #3
 8001a80:	4680      	mov	r8, r0
 8001a82:	250c      	movs	r5, #12
 8001a84:	9302      	str	r3, [sp, #8]
 8001a86:	e601      	b.n	800168c <__aeabi_dmul+0x4c>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	469a      	mov	sl, r3
 8001a8c:	469b      	mov	fp, r3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	2504      	movs	r5, #4
 8001a92:	9302      	str	r3, [sp, #8]
 8001a94:	e5fa      	b.n	800168c <__aeabi_dmul+0x4c>
 8001a96:	2101      	movs	r1, #1
 8001a98:	430d      	orrs	r5, r1
 8001a9a:	2d0a      	cmp	r5, #10
 8001a9c:	dd00      	ble.n	8001aa0 <__aeabi_dmul+0x460>
 8001a9e:	e64b      	b.n	8001738 <__aeabi_dmul+0xf8>
 8001aa0:	4649      	mov	r1, r9
 8001aa2:	9800      	ldr	r0, [sp, #0]
 8001aa4:	4041      	eors	r1, r0
 8001aa6:	b2c9      	uxtb	r1, r1
 8001aa8:	9103      	str	r1, [sp, #12]
 8001aaa:	2d02      	cmp	r5, #2
 8001aac:	dc00      	bgt.n	8001ab0 <__aeabi_dmul+0x470>
 8001aae:	e096      	b.n	8001bde <__aeabi_dmul+0x59e>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	2400      	movs	r4, #0
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	9301      	str	r3, [sp, #4]
 8001ab8:	e60c      	b.n	80016d4 <__aeabi_dmul+0x94>
 8001aba:	4649      	mov	r1, r9
 8001abc:	2302      	movs	r3, #2
 8001abe:	9a00      	ldr	r2, [sp, #0]
 8001ac0:	432b      	orrs	r3, r5
 8001ac2:	4051      	eors	r1, r2
 8001ac4:	b2ca      	uxtb	r2, r1
 8001ac6:	9203      	str	r2, [sp, #12]
 8001ac8:	2b0a      	cmp	r3, #10
 8001aca:	dd00      	ble.n	8001ace <__aeabi_dmul+0x48e>
 8001acc:	e634      	b.n	8001738 <__aeabi_dmul+0xf8>
 8001ace:	2d00      	cmp	r5, #0
 8001ad0:	d157      	bne.n	8001b82 <__aeabi_dmul+0x542>
 8001ad2:	9b03      	ldr	r3, [sp, #12]
 8001ad4:	4699      	mov	r9, r3
 8001ad6:	2400      	movs	r4, #0
 8001ad8:	2200      	movs	r2, #0
 8001ada:	4b49      	ldr	r3, [pc, #292]	@ (8001c00 <__aeabi_dmul+0x5c0>)
 8001adc:	e60e      	b.n	80016fc <__aeabi_dmul+0xbc>
 8001ade:	4658      	mov	r0, fp
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	1ac9      	subs	r1, r1, r3
 8001ae4:	2938      	cmp	r1, #56	@ 0x38
 8001ae6:	dd00      	ble.n	8001aea <__aeabi_dmul+0x4aa>
 8001ae8:	e62f      	b.n	800174a <__aeabi_dmul+0x10a>
 8001aea:	291f      	cmp	r1, #31
 8001aec:	dd56      	ble.n	8001b9c <__aeabi_dmul+0x55c>
 8001aee:	221f      	movs	r2, #31
 8001af0:	4654      	mov	r4, sl
 8001af2:	4252      	negs	r2, r2
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	40dc      	lsrs	r4, r3
 8001af8:	2920      	cmp	r1, #32
 8001afa:	d007      	beq.n	8001b0c <__aeabi_dmul+0x4cc>
 8001afc:	4b41      	ldr	r3, [pc, #260]	@ (8001c04 <__aeabi_dmul+0x5c4>)
 8001afe:	4642      	mov	r2, r8
 8001b00:	469c      	mov	ip, r3
 8001b02:	4653      	mov	r3, sl
 8001b04:	4460      	add	r0, ip
 8001b06:	4083      	lsls	r3, r0
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	4690      	mov	r8, r2
 8001b0c:	4642      	mov	r2, r8
 8001b0e:	2107      	movs	r1, #7
 8001b10:	1e53      	subs	r3, r2, #1
 8001b12:	419a      	sbcs	r2, r3
 8001b14:	000b      	movs	r3, r1
 8001b16:	4322      	orrs	r2, r4
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2400      	movs	r4, #0
 8001b1c:	4211      	tst	r1, r2
 8001b1e:	d009      	beq.n	8001b34 <__aeabi_dmul+0x4f4>
 8001b20:	230f      	movs	r3, #15
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d05d      	beq.n	8001be4 <__aeabi_dmul+0x5a4>
 8001b28:	1d11      	adds	r1, r2, #4
 8001b2a:	4291      	cmp	r1, r2
 8001b2c:	419b      	sbcs	r3, r3
 8001b2e:	000a      	movs	r2, r1
 8001b30:	425b      	negs	r3, r3
 8001b32:	075b      	lsls	r3, r3, #29
 8001b34:	08d2      	lsrs	r2, r2, #3
 8001b36:	431a      	orrs	r2, r3
 8001b38:	2300      	movs	r3, #0
 8001b3a:	e5df      	b.n	80016fc <__aeabi_dmul+0xbc>
 8001b3c:	9b03      	ldr	r3, [sp, #12]
 8001b3e:	4699      	mov	r9, r3
 8001b40:	e5fa      	b.n	8001738 <__aeabi_dmul+0xf8>
 8001b42:	9801      	ldr	r0, [sp, #4]
 8001b44:	f000 f9c4 	bl	8001ed0 <__clzsi2>
 8001b48:	0002      	movs	r2, r0
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	3215      	adds	r2, #21
 8001b4e:	3320      	adds	r3, #32
 8001b50:	2a1c      	cmp	r2, #28
 8001b52:	dc00      	bgt.n	8001b56 <__aeabi_dmul+0x516>
 8001b54:	e738      	b.n	80019c8 <__aeabi_dmul+0x388>
 8001b56:	9a01      	ldr	r2, [sp, #4]
 8001b58:	3808      	subs	r0, #8
 8001b5a:	4082      	lsls	r2, r0
 8001b5c:	e73f      	b.n	80019de <__aeabi_dmul+0x39e>
 8001b5e:	f000 f9b7 	bl	8001ed0 <__clzsi2>
 8001b62:	2315      	movs	r3, #21
 8001b64:	469c      	mov	ip, r3
 8001b66:	4484      	add	ip, r0
 8001b68:	0002      	movs	r2, r0
 8001b6a:	4663      	mov	r3, ip
 8001b6c:	3220      	adds	r2, #32
 8001b6e:	2b1c      	cmp	r3, #28
 8001b70:	dc00      	bgt.n	8001b74 <__aeabi_dmul+0x534>
 8001b72:	e758      	b.n	8001a26 <__aeabi_dmul+0x3e6>
 8001b74:	2300      	movs	r3, #0
 8001b76:	4698      	mov	r8, r3
 8001b78:	0023      	movs	r3, r4
 8001b7a:	3808      	subs	r0, #8
 8001b7c:	4083      	lsls	r3, r0
 8001b7e:	469a      	mov	sl, r3
 8001b80:	e762      	b.n	8001a48 <__aeabi_dmul+0x408>
 8001b82:	001d      	movs	r5, r3
 8001b84:	2300      	movs	r3, #0
 8001b86:	2400      	movs	r4, #0
 8001b88:	2002      	movs	r0, #2
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	e5a2      	b.n	80016d4 <__aeabi_dmul+0x94>
 8001b8e:	9002      	str	r0, [sp, #8]
 8001b90:	e632      	b.n	80017f8 <__aeabi_dmul+0x1b8>
 8001b92:	431c      	orrs	r4, r3
 8001b94:	9b00      	ldr	r3, [sp, #0]
 8001b96:	9a01      	ldr	r2, [sp, #4]
 8001b98:	4699      	mov	r9, r3
 8001b9a:	e5ae      	b.n	80016fa <__aeabi_dmul+0xba>
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c08 <__aeabi_dmul+0x5c8>)
 8001b9e:	4652      	mov	r2, sl
 8001ba0:	18c3      	adds	r3, r0, r3
 8001ba2:	4640      	mov	r0, r8
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	40c8      	lsrs	r0, r1
 8001ba8:	4302      	orrs	r2, r0
 8001baa:	4640      	mov	r0, r8
 8001bac:	4098      	lsls	r0, r3
 8001bae:	0003      	movs	r3, r0
 8001bb0:	1e58      	subs	r0, r3, #1
 8001bb2:	4183      	sbcs	r3, r0
 8001bb4:	4654      	mov	r4, sl
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	40cc      	lsrs	r4, r1
 8001bba:	0753      	lsls	r3, r2, #29
 8001bbc:	d009      	beq.n	8001bd2 <__aeabi_dmul+0x592>
 8001bbe:	230f      	movs	r3, #15
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d005      	beq.n	8001bd2 <__aeabi_dmul+0x592>
 8001bc6:	1d13      	adds	r3, r2, #4
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	4192      	sbcs	r2, r2
 8001bcc:	4252      	negs	r2, r2
 8001bce:	18a4      	adds	r4, r4, r2
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	0223      	lsls	r3, r4, #8
 8001bd4:	d508      	bpl.n	8001be8 <__aeabi_dmul+0x5a8>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	2400      	movs	r4, #0
 8001bda:	2200      	movs	r2, #0
 8001bdc:	e58e      	b.n	80016fc <__aeabi_dmul+0xbc>
 8001bde:	4689      	mov	r9, r1
 8001be0:	2400      	movs	r4, #0
 8001be2:	e58b      	b.n	80016fc <__aeabi_dmul+0xbc>
 8001be4:	2300      	movs	r3, #0
 8001be6:	e7a5      	b.n	8001b34 <__aeabi_dmul+0x4f4>
 8001be8:	0763      	lsls	r3, r4, #29
 8001bea:	0264      	lsls	r4, r4, #9
 8001bec:	0b24      	lsrs	r4, r4, #12
 8001bee:	e7a1      	b.n	8001b34 <__aeabi_dmul+0x4f4>
 8001bf0:	9b00      	ldr	r3, [sp, #0]
 8001bf2:	46a2      	mov	sl, r4
 8001bf4:	4699      	mov	r9, r3
 8001bf6:	9b01      	ldr	r3, [sp, #4]
 8001bf8:	4698      	mov	r8, r3
 8001bfa:	e737      	b.n	8001a6c <__aeabi_dmul+0x42c>
 8001bfc:	fffffc0d 	.word	0xfffffc0d
 8001c00:	000007ff 	.word	0x000007ff
 8001c04:	0000043e 	.word	0x0000043e
 8001c08:	0000041e 	.word	0x0000041e

08001c0c <__aeabi_dcmpun>:
 8001c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0e:	46c6      	mov	lr, r8
 8001c10:	031e      	lsls	r6, r3, #12
 8001c12:	0b36      	lsrs	r6, r6, #12
 8001c14:	46b0      	mov	r8, r6
 8001c16:	4e0d      	ldr	r6, [pc, #52]	@ (8001c4c <__aeabi_dcmpun+0x40>)
 8001c18:	030c      	lsls	r4, r1, #12
 8001c1a:	004d      	lsls	r5, r1, #1
 8001c1c:	005f      	lsls	r7, r3, #1
 8001c1e:	b500      	push	{lr}
 8001c20:	0b24      	lsrs	r4, r4, #12
 8001c22:	0d6d      	lsrs	r5, r5, #21
 8001c24:	0d7f      	lsrs	r7, r7, #21
 8001c26:	42b5      	cmp	r5, r6
 8001c28:	d00b      	beq.n	8001c42 <__aeabi_dcmpun+0x36>
 8001c2a:	4908      	ldr	r1, [pc, #32]	@ (8001c4c <__aeabi_dcmpun+0x40>)
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	428f      	cmp	r7, r1
 8001c30:	d104      	bne.n	8001c3c <__aeabi_dcmpun+0x30>
 8001c32:	4646      	mov	r6, r8
 8001c34:	4316      	orrs	r6, r2
 8001c36:	0030      	movs	r0, r6
 8001c38:	1e43      	subs	r3, r0, #1
 8001c3a:	4198      	sbcs	r0, r3
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	46b8      	mov	r8, r7
 8001c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c42:	4304      	orrs	r4, r0
 8001c44:	2001      	movs	r0, #1
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	d1f8      	bne.n	8001c3c <__aeabi_dcmpun+0x30>
 8001c4a:	e7ee      	b.n	8001c2a <__aeabi_dcmpun+0x1e>
 8001c4c:	000007ff 	.word	0x000007ff

08001c50 <__aeabi_d2iz>:
 8001c50:	000b      	movs	r3, r1
 8001c52:	0002      	movs	r2, r0
 8001c54:	b570      	push	{r4, r5, r6, lr}
 8001c56:	4d16      	ldr	r5, [pc, #88]	@ (8001cb0 <__aeabi_d2iz+0x60>)
 8001c58:	030c      	lsls	r4, r1, #12
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	0049      	lsls	r1, r1, #1
 8001c5e:	2000      	movs	r0, #0
 8001c60:	9200      	str	r2, [sp, #0]
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	0b24      	lsrs	r4, r4, #12
 8001c66:	0d49      	lsrs	r1, r1, #21
 8001c68:	0fde      	lsrs	r6, r3, #31
 8001c6a:	42a9      	cmp	r1, r5
 8001c6c:	dd04      	ble.n	8001c78 <__aeabi_d2iz+0x28>
 8001c6e:	4811      	ldr	r0, [pc, #68]	@ (8001cb4 <__aeabi_d2iz+0x64>)
 8001c70:	4281      	cmp	r1, r0
 8001c72:	dd03      	ble.n	8001c7c <__aeabi_d2iz+0x2c>
 8001c74:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <__aeabi_d2iz+0x68>)
 8001c76:	18f0      	adds	r0, r6, r3
 8001c78:	b002      	add	sp, #8
 8001c7a:	bd70      	pop	{r4, r5, r6, pc}
 8001c7c:	2080      	movs	r0, #128	@ 0x80
 8001c7e:	0340      	lsls	r0, r0, #13
 8001c80:	4320      	orrs	r0, r4
 8001c82:	4c0e      	ldr	r4, [pc, #56]	@ (8001cbc <__aeabi_d2iz+0x6c>)
 8001c84:	1a64      	subs	r4, r4, r1
 8001c86:	2c1f      	cmp	r4, #31
 8001c88:	dd08      	ble.n	8001c9c <__aeabi_d2iz+0x4c>
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc0 <__aeabi_d2iz+0x70>)
 8001c8c:	1a5b      	subs	r3, r3, r1
 8001c8e:	40d8      	lsrs	r0, r3
 8001c90:	0003      	movs	r3, r0
 8001c92:	4258      	negs	r0, r3
 8001c94:	2e00      	cmp	r6, #0
 8001c96:	d1ef      	bne.n	8001c78 <__aeabi_d2iz+0x28>
 8001c98:	0018      	movs	r0, r3
 8001c9a:	e7ed      	b.n	8001c78 <__aeabi_d2iz+0x28>
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <__aeabi_d2iz+0x74>)
 8001c9e:	9a00      	ldr	r2, [sp, #0]
 8001ca0:	469c      	mov	ip, r3
 8001ca2:	0003      	movs	r3, r0
 8001ca4:	4461      	add	r1, ip
 8001ca6:	408b      	lsls	r3, r1
 8001ca8:	40e2      	lsrs	r2, r4
 8001caa:	4313      	orrs	r3, r2
 8001cac:	e7f1      	b.n	8001c92 <__aeabi_d2iz+0x42>
 8001cae:	46c0      	nop			@ (mov r8, r8)
 8001cb0:	000003fe 	.word	0x000003fe
 8001cb4:	0000041d 	.word	0x0000041d
 8001cb8:	7fffffff 	.word	0x7fffffff
 8001cbc:	00000433 	.word	0x00000433
 8001cc0:	00000413 	.word	0x00000413
 8001cc4:	fffffbed 	.word	0xfffffbed

08001cc8 <__aeabi_f2d>:
 8001cc8:	b570      	push	{r4, r5, r6, lr}
 8001cca:	0242      	lsls	r2, r0, #9
 8001ccc:	0043      	lsls	r3, r0, #1
 8001cce:	0fc4      	lsrs	r4, r0, #31
 8001cd0:	20fe      	movs	r0, #254	@ 0xfe
 8001cd2:	0e1b      	lsrs	r3, r3, #24
 8001cd4:	1c59      	adds	r1, r3, #1
 8001cd6:	0a55      	lsrs	r5, r2, #9
 8001cd8:	4208      	tst	r0, r1
 8001cda:	d00c      	beq.n	8001cf6 <__aeabi_f2d+0x2e>
 8001cdc:	21e0      	movs	r1, #224	@ 0xe0
 8001cde:	0089      	lsls	r1, r1, #2
 8001ce0:	468c      	mov	ip, r1
 8001ce2:	076d      	lsls	r5, r5, #29
 8001ce4:	0b12      	lsrs	r2, r2, #12
 8001ce6:	4463      	add	r3, ip
 8001ce8:	051b      	lsls	r3, r3, #20
 8001cea:	4313      	orrs	r3, r2
 8001cec:	07e4      	lsls	r4, r4, #31
 8001cee:	4323      	orrs	r3, r4
 8001cf0:	0028      	movs	r0, r5
 8001cf2:	0019      	movs	r1, r3
 8001cf4:	bd70      	pop	{r4, r5, r6, pc}
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d114      	bne.n	8001d24 <__aeabi_f2d+0x5c>
 8001cfa:	2d00      	cmp	r5, #0
 8001cfc:	d01b      	beq.n	8001d36 <__aeabi_f2d+0x6e>
 8001cfe:	0028      	movs	r0, r5
 8001d00:	f000 f8e6 	bl	8001ed0 <__clzsi2>
 8001d04:	280a      	cmp	r0, #10
 8001d06:	dc1c      	bgt.n	8001d42 <__aeabi_f2d+0x7a>
 8001d08:	230b      	movs	r3, #11
 8001d0a:	002a      	movs	r2, r5
 8001d0c:	1a1b      	subs	r3, r3, r0
 8001d0e:	40da      	lsrs	r2, r3
 8001d10:	0003      	movs	r3, r0
 8001d12:	3315      	adds	r3, #21
 8001d14:	409d      	lsls	r5, r3
 8001d16:	4b0e      	ldr	r3, [pc, #56]	@ (8001d50 <__aeabi_f2d+0x88>)
 8001d18:	0312      	lsls	r2, r2, #12
 8001d1a:	1a1b      	subs	r3, r3, r0
 8001d1c:	055b      	lsls	r3, r3, #21
 8001d1e:	0b12      	lsrs	r2, r2, #12
 8001d20:	0d5b      	lsrs	r3, r3, #21
 8001d22:	e7e1      	b.n	8001ce8 <__aeabi_f2d+0x20>
 8001d24:	2d00      	cmp	r5, #0
 8001d26:	d009      	beq.n	8001d3c <__aeabi_f2d+0x74>
 8001d28:	0b13      	lsrs	r3, r2, #12
 8001d2a:	2280      	movs	r2, #128	@ 0x80
 8001d2c:	0312      	lsls	r2, r2, #12
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	076d      	lsls	r5, r5, #29
 8001d32:	4b08      	ldr	r3, [pc, #32]	@ (8001d54 <__aeabi_f2d+0x8c>)
 8001d34:	e7d8      	b.n	8001ce8 <__aeabi_f2d+0x20>
 8001d36:	2300      	movs	r3, #0
 8001d38:	2200      	movs	r2, #0
 8001d3a:	e7d5      	b.n	8001ce8 <__aeabi_f2d+0x20>
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	4b05      	ldr	r3, [pc, #20]	@ (8001d54 <__aeabi_f2d+0x8c>)
 8001d40:	e7d2      	b.n	8001ce8 <__aeabi_f2d+0x20>
 8001d42:	0003      	movs	r3, r0
 8001d44:	002a      	movs	r2, r5
 8001d46:	3b0b      	subs	r3, #11
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	2500      	movs	r5, #0
 8001d4c:	e7e3      	b.n	8001d16 <__aeabi_f2d+0x4e>
 8001d4e:	46c0      	nop			@ (mov r8, r8)
 8001d50:	00000389 	.word	0x00000389
 8001d54:	000007ff 	.word	0x000007ff

08001d58 <__aeabi_d2f>:
 8001d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d5a:	004b      	lsls	r3, r1, #1
 8001d5c:	030f      	lsls	r7, r1, #12
 8001d5e:	0d5b      	lsrs	r3, r3, #21
 8001d60:	4c3a      	ldr	r4, [pc, #232]	@ (8001e4c <__aeabi_d2f+0xf4>)
 8001d62:	0f45      	lsrs	r5, r0, #29
 8001d64:	b083      	sub	sp, #12
 8001d66:	0a7f      	lsrs	r7, r7, #9
 8001d68:	1c5e      	adds	r6, r3, #1
 8001d6a:	432f      	orrs	r7, r5
 8001d6c:	9000      	str	r0, [sp, #0]
 8001d6e:	9101      	str	r1, [sp, #4]
 8001d70:	0fca      	lsrs	r2, r1, #31
 8001d72:	00c5      	lsls	r5, r0, #3
 8001d74:	4226      	tst	r6, r4
 8001d76:	d00b      	beq.n	8001d90 <__aeabi_d2f+0x38>
 8001d78:	4935      	ldr	r1, [pc, #212]	@ (8001e50 <__aeabi_d2f+0xf8>)
 8001d7a:	185c      	adds	r4, r3, r1
 8001d7c:	2cfe      	cmp	r4, #254	@ 0xfe
 8001d7e:	dd13      	ble.n	8001da8 <__aeabi_d2f+0x50>
 8001d80:	20ff      	movs	r0, #255	@ 0xff
 8001d82:	2300      	movs	r3, #0
 8001d84:	05c0      	lsls	r0, r0, #23
 8001d86:	4318      	orrs	r0, r3
 8001d88:	07d2      	lsls	r2, r2, #31
 8001d8a:	4310      	orrs	r0, r2
 8001d8c:	b003      	add	sp, #12
 8001d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d90:	433d      	orrs	r5, r7
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <__aeabi_d2f+0x42>
 8001d96:	2000      	movs	r0, #0
 8001d98:	e7f4      	b.n	8001d84 <__aeabi_d2f+0x2c>
 8001d9a:	2d00      	cmp	r5, #0
 8001d9c:	d0f0      	beq.n	8001d80 <__aeabi_d2f+0x28>
 8001d9e:	2380      	movs	r3, #128	@ 0x80
 8001da0:	03db      	lsls	r3, r3, #15
 8001da2:	20ff      	movs	r0, #255	@ 0xff
 8001da4:	433b      	orrs	r3, r7
 8001da6:	e7ed      	b.n	8001d84 <__aeabi_d2f+0x2c>
 8001da8:	2c00      	cmp	r4, #0
 8001daa:	dd0c      	ble.n	8001dc6 <__aeabi_d2f+0x6e>
 8001dac:	9b00      	ldr	r3, [sp, #0]
 8001dae:	00ff      	lsls	r7, r7, #3
 8001db0:	019b      	lsls	r3, r3, #6
 8001db2:	1e58      	subs	r0, r3, #1
 8001db4:	4183      	sbcs	r3, r0
 8001db6:	0f69      	lsrs	r1, r5, #29
 8001db8:	433b      	orrs	r3, r7
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	0759      	lsls	r1, r3, #29
 8001dbe:	d127      	bne.n	8001e10 <__aeabi_d2f+0xb8>
 8001dc0:	08db      	lsrs	r3, r3, #3
 8001dc2:	b2e0      	uxtb	r0, r4
 8001dc4:	e7de      	b.n	8001d84 <__aeabi_d2f+0x2c>
 8001dc6:	0021      	movs	r1, r4
 8001dc8:	3117      	adds	r1, #23
 8001dca:	db31      	blt.n	8001e30 <__aeabi_d2f+0xd8>
 8001dcc:	2180      	movs	r1, #128	@ 0x80
 8001dce:	201e      	movs	r0, #30
 8001dd0:	0409      	lsls	r1, r1, #16
 8001dd2:	4339      	orrs	r1, r7
 8001dd4:	1b00      	subs	r0, r0, r4
 8001dd6:	281f      	cmp	r0, #31
 8001dd8:	dd2d      	ble.n	8001e36 <__aeabi_d2f+0xde>
 8001dda:	2602      	movs	r6, #2
 8001ddc:	4276      	negs	r6, r6
 8001dde:	1b34      	subs	r4, r6, r4
 8001de0:	000e      	movs	r6, r1
 8001de2:	40e6      	lsrs	r6, r4
 8001de4:	0034      	movs	r4, r6
 8001de6:	2820      	cmp	r0, #32
 8001de8:	d004      	beq.n	8001df4 <__aeabi_d2f+0x9c>
 8001dea:	481a      	ldr	r0, [pc, #104]	@ (8001e54 <__aeabi_d2f+0xfc>)
 8001dec:	4684      	mov	ip, r0
 8001dee:	4463      	add	r3, ip
 8001df0:	4099      	lsls	r1, r3
 8001df2:	430d      	orrs	r5, r1
 8001df4:	002b      	movs	r3, r5
 8001df6:	1e59      	subs	r1, r3, #1
 8001df8:	418b      	sbcs	r3, r1
 8001dfa:	4323      	orrs	r3, r4
 8001dfc:	0759      	lsls	r1, r3, #29
 8001dfe:	d003      	beq.n	8001e08 <__aeabi_d2f+0xb0>
 8001e00:	210f      	movs	r1, #15
 8001e02:	4019      	ands	r1, r3
 8001e04:	2904      	cmp	r1, #4
 8001e06:	d10b      	bne.n	8001e20 <__aeabi_d2f+0xc8>
 8001e08:	019b      	lsls	r3, r3, #6
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	0a5b      	lsrs	r3, r3, #9
 8001e0e:	e7b9      	b.n	8001d84 <__aeabi_d2f+0x2c>
 8001e10:	210f      	movs	r1, #15
 8001e12:	4019      	ands	r1, r3
 8001e14:	2904      	cmp	r1, #4
 8001e16:	d104      	bne.n	8001e22 <__aeabi_d2f+0xca>
 8001e18:	019b      	lsls	r3, r3, #6
 8001e1a:	0a5b      	lsrs	r3, r3, #9
 8001e1c:	b2e0      	uxtb	r0, r4
 8001e1e:	e7b1      	b.n	8001d84 <__aeabi_d2f+0x2c>
 8001e20:	2400      	movs	r4, #0
 8001e22:	3304      	adds	r3, #4
 8001e24:	0159      	lsls	r1, r3, #5
 8001e26:	d5f7      	bpl.n	8001e18 <__aeabi_d2f+0xc0>
 8001e28:	3401      	adds	r4, #1
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	b2e0      	uxtb	r0, r4
 8001e2e:	e7a9      	b.n	8001d84 <__aeabi_d2f+0x2c>
 8001e30:	2000      	movs	r0, #0
 8001e32:	2300      	movs	r3, #0
 8001e34:	e7a6      	b.n	8001d84 <__aeabi_d2f+0x2c>
 8001e36:	4c08      	ldr	r4, [pc, #32]	@ (8001e58 <__aeabi_d2f+0x100>)
 8001e38:	191c      	adds	r4, r3, r4
 8001e3a:	002b      	movs	r3, r5
 8001e3c:	40a5      	lsls	r5, r4
 8001e3e:	40c3      	lsrs	r3, r0
 8001e40:	40a1      	lsls	r1, r4
 8001e42:	1e68      	subs	r0, r5, #1
 8001e44:	4185      	sbcs	r5, r0
 8001e46:	4329      	orrs	r1, r5
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	e7d7      	b.n	8001dfc <__aeabi_d2f+0xa4>
 8001e4c:	000007fe 	.word	0x000007fe
 8001e50:	fffffc80 	.word	0xfffffc80
 8001e54:	fffffca2 	.word	0xfffffca2
 8001e58:	fffffc82 	.word	0xfffffc82

08001e5c <__aeabi_cfrcmple>:
 8001e5c:	4684      	mov	ip, r0
 8001e5e:	0008      	movs	r0, r1
 8001e60:	4661      	mov	r1, ip
 8001e62:	e7ff      	b.n	8001e64 <__aeabi_cfcmpeq>

08001e64 <__aeabi_cfcmpeq>:
 8001e64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001e66:	f000 f8cd 	bl	8002004 <__lesf2>
 8001e6a:	2800      	cmp	r0, #0
 8001e6c:	d401      	bmi.n	8001e72 <__aeabi_cfcmpeq+0xe>
 8001e6e:	2100      	movs	r1, #0
 8001e70:	42c8      	cmn	r0, r1
 8001e72:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001e74 <__aeabi_fcmpeq>:
 8001e74:	b510      	push	{r4, lr}
 8001e76:	f000 f855 	bl	8001f24 <__eqsf2>
 8001e7a:	4240      	negs	r0, r0
 8001e7c:	3001      	adds	r0, #1
 8001e7e:	bd10      	pop	{r4, pc}

08001e80 <__aeabi_fcmplt>:
 8001e80:	b510      	push	{r4, lr}
 8001e82:	f000 f8bf 	bl	8002004 <__lesf2>
 8001e86:	2800      	cmp	r0, #0
 8001e88:	db01      	blt.n	8001e8e <__aeabi_fcmplt+0xe>
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	bd10      	pop	{r4, pc}
 8001e8e:	2001      	movs	r0, #1
 8001e90:	bd10      	pop	{r4, pc}
 8001e92:	46c0      	nop			@ (mov r8, r8)

08001e94 <__aeabi_fcmple>:
 8001e94:	b510      	push	{r4, lr}
 8001e96:	f000 f8b5 	bl	8002004 <__lesf2>
 8001e9a:	2800      	cmp	r0, #0
 8001e9c:	dd01      	ble.n	8001ea2 <__aeabi_fcmple+0xe>
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	bd10      	pop	{r4, pc}
 8001ea2:	2001      	movs	r0, #1
 8001ea4:	bd10      	pop	{r4, pc}
 8001ea6:	46c0      	nop			@ (mov r8, r8)

08001ea8 <__aeabi_fcmpgt>:
 8001ea8:	b510      	push	{r4, lr}
 8001eaa:	f000 f863 	bl	8001f74 <__gesf2>
 8001eae:	2800      	cmp	r0, #0
 8001eb0:	dc01      	bgt.n	8001eb6 <__aeabi_fcmpgt+0xe>
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	bd10      	pop	{r4, pc}
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	bd10      	pop	{r4, pc}
 8001eba:	46c0      	nop			@ (mov r8, r8)

08001ebc <__aeabi_fcmpge>:
 8001ebc:	b510      	push	{r4, lr}
 8001ebe:	f000 f859 	bl	8001f74 <__gesf2>
 8001ec2:	2800      	cmp	r0, #0
 8001ec4:	da01      	bge.n	8001eca <__aeabi_fcmpge+0xe>
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	bd10      	pop	{r4, pc}
 8001eca:	2001      	movs	r0, #1
 8001ecc:	bd10      	pop	{r4, pc}
 8001ece:	46c0      	nop			@ (mov r8, r8)

08001ed0 <__clzsi2>:
 8001ed0:	211c      	movs	r1, #28
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	041b      	lsls	r3, r3, #16
 8001ed6:	4298      	cmp	r0, r3
 8001ed8:	d301      	bcc.n	8001ede <__clzsi2+0xe>
 8001eda:	0c00      	lsrs	r0, r0, #16
 8001edc:	3910      	subs	r1, #16
 8001ede:	0a1b      	lsrs	r3, r3, #8
 8001ee0:	4298      	cmp	r0, r3
 8001ee2:	d301      	bcc.n	8001ee8 <__clzsi2+0x18>
 8001ee4:	0a00      	lsrs	r0, r0, #8
 8001ee6:	3908      	subs	r1, #8
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	4298      	cmp	r0, r3
 8001eec:	d301      	bcc.n	8001ef2 <__clzsi2+0x22>
 8001eee:	0900      	lsrs	r0, r0, #4
 8001ef0:	3904      	subs	r1, #4
 8001ef2:	a202      	add	r2, pc, #8	@ (adr r2, 8001efc <__clzsi2+0x2c>)
 8001ef4:	5c10      	ldrb	r0, [r2, r0]
 8001ef6:	1840      	adds	r0, r0, r1
 8001ef8:	4770      	bx	lr
 8001efa:	46c0      	nop			@ (mov r8, r8)
 8001efc:	02020304 	.word	0x02020304
 8001f00:	01010101 	.word	0x01010101
	...

08001f0c <__clzdi2>:
 8001f0c:	b510      	push	{r4, lr}
 8001f0e:	2900      	cmp	r1, #0
 8001f10:	d103      	bne.n	8001f1a <__clzdi2+0xe>
 8001f12:	f7ff ffdd 	bl	8001ed0 <__clzsi2>
 8001f16:	3020      	adds	r0, #32
 8001f18:	e002      	b.n	8001f20 <__clzdi2+0x14>
 8001f1a:	0008      	movs	r0, r1
 8001f1c:	f7ff ffd8 	bl	8001ed0 <__clzsi2>
 8001f20:	bd10      	pop	{r4, pc}
 8001f22:	46c0      	nop			@ (mov r8, r8)

08001f24 <__eqsf2>:
 8001f24:	b570      	push	{r4, r5, r6, lr}
 8001f26:	0042      	lsls	r2, r0, #1
 8001f28:	024e      	lsls	r6, r1, #9
 8001f2a:	004c      	lsls	r4, r1, #1
 8001f2c:	0245      	lsls	r5, r0, #9
 8001f2e:	0a6d      	lsrs	r5, r5, #9
 8001f30:	0e12      	lsrs	r2, r2, #24
 8001f32:	0fc3      	lsrs	r3, r0, #31
 8001f34:	0a76      	lsrs	r6, r6, #9
 8001f36:	0e24      	lsrs	r4, r4, #24
 8001f38:	0fc9      	lsrs	r1, r1, #31
 8001f3a:	2aff      	cmp	r2, #255	@ 0xff
 8001f3c:	d010      	beq.n	8001f60 <__eqsf2+0x3c>
 8001f3e:	2cff      	cmp	r4, #255	@ 0xff
 8001f40:	d00c      	beq.n	8001f5c <__eqsf2+0x38>
 8001f42:	2001      	movs	r0, #1
 8001f44:	42a2      	cmp	r2, r4
 8001f46:	d10a      	bne.n	8001f5e <__eqsf2+0x3a>
 8001f48:	42b5      	cmp	r5, r6
 8001f4a:	d108      	bne.n	8001f5e <__eqsf2+0x3a>
 8001f4c:	428b      	cmp	r3, r1
 8001f4e:	d00f      	beq.n	8001f70 <__eqsf2+0x4c>
 8001f50:	2a00      	cmp	r2, #0
 8001f52:	d104      	bne.n	8001f5e <__eqsf2+0x3a>
 8001f54:	0028      	movs	r0, r5
 8001f56:	1e43      	subs	r3, r0, #1
 8001f58:	4198      	sbcs	r0, r3
 8001f5a:	e000      	b.n	8001f5e <__eqsf2+0x3a>
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	bd70      	pop	{r4, r5, r6, pc}
 8001f60:	2001      	movs	r0, #1
 8001f62:	2cff      	cmp	r4, #255	@ 0xff
 8001f64:	d1fb      	bne.n	8001f5e <__eqsf2+0x3a>
 8001f66:	4335      	orrs	r5, r6
 8001f68:	d1f9      	bne.n	8001f5e <__eqsf2+0x3a>
 8001f6a:	404b      	eors	r3, r1
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	e7f6      	b.n	8001f5e <__eqsf2+0x3a>
 8001f70:	2000      	movs	r0, #0
 8001f72:	e7f4      	b.n	8001f5e <__eqsf2+0x3a>

08001f74 <__gesf2>:
 8001f74:	b530      	push	{r4, r5, lr}
 8001f76:	0042      	lsls	r2, r0, #1
 8001f78:	0244      	lsls	r4, r0, #9
 8001f7a:	024d      	lsls	r5, r1, #9
 8001f7c:	0fc3      	lsrs	r3, r0, #31
 8001f7e:	0048      	lsls	r0, r1, #1
 8001f80:	0a64      	lsrs	r4, r4, #9
 8001f82:	0e12      	lsrs	r2, r2, #24
 8001f84:	0a6d      	lsrs	r5, r5, #9
 8001f86:	0e00      	lsrs	r0, r0, #24
 8001f88:	0fc9      	lsrs	r1, r1, #31
 8001f8a:	2aff      	cmp	r2, #255	@ 0xff
 8001f8c:	d018      	beq.n	8001fc0 <__gesf2+0x4c>
 8001f8e:	28ff      	cmp	r0, #255	@ 0xff
 8001f90:	d00a      	beq.n	8001fa8 <__gesf2+0x34>
 8001f92:	2a00      	cmp	r2, #0
 8001f94:	d11e      	bne.n	8001fd4 <__gesf2+0x60>
 8001f96:	2800      	cmp	r0, #0
 8001f98:	d10a      	bne.n	8001fb0 <__gesf2+0x3c>
 8001f9a:	2d00      	cmp	r5, #0
 8001f9c:	d029      	beq.n	8001ff2 <__gesf2+0x7e>
 8001f9e:	2c00      	cmp	r4, #0
 8001fa0:	d12d      	bne.n	8001ffe <__gesf2+0x8a>
 8001fa2:	0048      	lsls	r0, r1, #1
 8001fa4:	3801      	subs	r0, #1
 8001fa6:	bd30      	pop	{r4, r5, pc}
 8001fa8:	2d00      	cmp	r5, #0
 8001faa:	d125      	bne.n	8001ff8 <__gesf2+0x84>
 8001fac:	2a00      	cmp	r2, #0
 8001fae:	d101      	bne.n	8001fb4 <__gesf2+0x40>
 8001fb0:	2c00      	cmp	r4, #0
 8001fb2:	d0f6      	beq.n	8001fa2 <__gesf2+0x2e>
 8001fb4:	428b      	cmp	r3, r1
 8001fb6:	d019      	beq.n	8001fec <__gesf2+0x78>
 8001fb8:	2001      	movs	r0, #1
 8001fba:	425b      	negs	r3, r3
 8001fbc:	4318      	orrs	r0, r3
 8001fbe:	e7f2      	b.n	8001fa6 <__gesf2+0x32>
 8001fc0:	2c00      	cmp	r4, #0
 8001fc2:	d119      	bne.n	8001ff8 <__gesf2+0x84>
 8001fc4:	28ff      	cmp	r0, #255	@ 0xff
 8001fc6:	d1f7      	bne.n	8001fb8 <__gesf2+0x44>
 8001fc8:	2d00      	cmp	r5, #0
 8001fca:	d115      	bne.n	8001ff8 <__gesf2+0x84>
 8001fcc:	2000      	movs	r0, #0
 8001fce:	428b      	cmp	r3, r1
 8001fd0:	d1f2      	bne.n	8001fb8 <__gesf2+0x44>
 8001fd2:	e7e8      	b.n	8001fa6 <__gesf2+0x32>
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	d0ef      	beq.n	8001fb8 <__gesf2+0x44>
 8001fd8:	428b      	cmp	r3, r1
 8001fda:	d1ed      	bne.n	8001fb8 <__gesf2+0x44>
 8001fdc:	4282      	cmp	r2, r0
 8001fde:	dceb      	bgt.n	8001fb8 <__gesf2+0x44>
 8001fe0:	db04      	blt.n	8001fec <__gesf2+0x78>
 8001fe2:	42ac      	cmp	r4, r5
 8001fe4:	d8e8      	bhi.n	8001fb8 <__gesf2+0x44>
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	42ac      	cmp	r4, r5
 8001fea:	d2dc      	bcs.n	8001fa6 <__gesf2+0x32>
 8001fec:	0058      	lsls	r0, r3, #1
 8001fee:	3801      	subs	r0, #1
 8001ff0:	e7d9      	b.n	8001fa6 <__gesf2+0x32>
 8001ff2:	2c00      	cmp	r4, #0
 8001ff4:	d0d7      	beq.n	8001fa6 <__gesf2+0x32>
 8001ff6:	e7df      	b.n	8001fb8 <__gesf2+0x44>
 8001ff8:	2002      	movs	r0, #2
 8001ffa:	4240      	negs	r0, r0
 8001ffc:	e7d3      	b.n	8001fa6 <__gesf2+0x32>
 8001ffe:	428b      	cmp	r3, r1
 8002000:	d1da      	bne.n	8001fb8 <__gesf2+0x44>
 8002002:	e7ee      	b.n	8001fe2 <__gesf2+0x6e>

08002004 <__lesf2>:
 8002004:	b530      	push	{r4, r5, lr}
 8002006:	0042      	lsls	r2, r0, #1
 8002008:	0244      	lsls	r4, r0, #9
 800200a:	024d      	lsls	r5, r1, #9
 800200c:	0fc3      	lsrs	r3, r0, #31
 800200e:	0048      	lsls	r0, r1, #1
 8002010:	0a64      	lsrs	r4, r4, #9
 8002012:	0e12      	lsrs	r2, r2, #24
 8002014:	0a6d      	lsrs	r5, r5, #9
 8002016:	0e00      	lsrs	r0, r0, #24
 8002018:	0fc9      	lsrs	r1, r1, #31
 800201a:	2aff      	cmp	r2, #255	@ 0xff
 800201c:	d017      	beq.n	800204e <__lesf2+0x4a>
 800201e:	28ff      	cmp	r0, #255	@ 0xff
 8002020:	d00a      	beq.n	8002038 <__lesf2+0x34>
 8002022:	2a00      	cmp	r2, #0
 8002024:	d11b      	bne.n	800205e <__lesf2+0x5a>
 8002026:	2800      	cmp	r0, #0
 8002028:	d10a      	bne.n	8002040 <__lesf2+0x3c>
 800202a:	2d00      	cmp	r5, #0
 800202c:	d01d      	beq.n	800206a <__lesf2+0x66>
 800202e:	2c00      	cmp	r4, #0
 8002030:	d12d      	bne.n	800208e <__lesf2+0x8a>
 8002032:	0048      	lsls	r0, r1, #1
 8002034:	3801      	subs	r0, #1
 8002036:	e011      	b.n	800205c <__lesf2+0x58>
 8002038:	2d00      	cmp	r5, #0
 800203a:	d10e      	bne.n	800205a <__lesf2+0x56>
 800203c:	2a00      	cmp	r2, #0
 800203e:	d101      	bne.n	8002044 <__lesf2+0x40>
 8002040:	2c00      	cmp	r4, #0
 8002042:	d0f6      	beq.n	8002032 <__lesf2+0x2e>
 8002044:	428b      	cmp	r3, r1
 8002046:	d10c      	bne.n	8002062 <__lesf2+0x5e>
 8002048:	0058      	lsls	r0, r3, #1
 800204a:	3801      	subs	r0, #1
 800204c:	e006      	b.n	800205c <__lesf2+0x58>
 800204e:	2c00      	cmp	r4, #0
 8002050:	d103      	bne.n	800205a <__lesf2+0x56>
 8002052:	28ff      	cmp	r0, #255	@ 0xff
 8002054:	d105      	bne.n	8002062 <__lesf2+0x5e>
 8002056:	2d00      	cmp	r5, #0
 8002058:	d015      	beq.n	8002086 <__lesf2+0x82>
 800205a:	2002      	movs	r0, #2
 800205c:	bd30      	pop	{r4, r5, pc}
 800205e:	2800      	cmp	r0, #0
 8002060:	d106      	bne.n	8002070 <__lesf2+0x6c>
 8002062:	2001      	movs	r0, #1
 8002064:	425b      	negs	r3, r3
 8002066:	4318      	orrs	r0, r3
 8002068:	e7f8      	b.n	800205c <__lesf2+0x58>
 800206a:	2c00      	cmp	r4, #0
 800206c:	d0f6      	beq.n	800205c <__lesf2+0x58>
 800206e:	e7f8      	b.n	8002062 <__lesf2+0x5e>
 8002070:	428b      	cmp	r3, r1
 8002072:	d1f6      	bne.n	8002062 <__lesf2+0x5e>
 8002074:	4282      	cmp	r2, r0
 8002076:	dcf4      	bgt.n	8002062 <__lesf2+0x5e>
 8002078:	dbe6      	blt.n	8002048 <__lesf2+0x44>
 800207a:	42ac      	cmp	r4, r5
 800207c:	d8f1      	bhi.n	8002062 <__lesf2+0x5e>
 800207e:	2000      	movs	r0, #0
 8002080:	42ac      	cmp	r4, r5
 8002082:	d2eb      	bcs.n	800205c <__lesf2+0x58>
 8002084:	e7e0      	b.n	8002048 <__lesf2+0x44>
 8002086:	2000      	movs	r0, #0
 8002088:	428b      	cmp	r3, r1
 800208a:	d1ea      	bne.n	8002062 <__lesf2+0x5e>
 800208c:	e7e6      	b.n	800205c <__lesf2+0x58>
 800208e:	428b      	cmp	r3, r1
 8002090:	d1e7      	bne.n	8002062 <__lesf2+0x5e>
 8002092:	e7f2      	b.n	800207a <__lesf2+0x76>

08002094 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	0004      	movs	r4, r0
 800209c:	0008      	movs	r0, r1
 800209e:	0011      	movs	r1, r2
 80020a0:	1dbb      	adds	r3, r7, #6
 80020a2:	1c22      	adds	r2, r4, #0
 80020a4:	801a      	strh	r2, [r3, #0]
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	1c02      	adds	r2, r0, #0
 80020aa:	801a      	strh	r2, [r3, #0]
 80020ac:	1cbb      	adds	r3, r7, #2
 80020ae:	1c0a      	adds	r2, r1, #0
 80020b0:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(y,x, color);
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	8818      	ldrh	r0, [r3, #0]
 80020b6:	1dbb      	adds	r3, r7, #6
 80020b8:	8819      	ldrh	r1, [r3, #0]
 80020ba:	1cbb      	adds	r3, r7, #2
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	001a      	movs	r2, r3
 80020c0:	f000 fd2c 	bl	8002b1c <ST7735_DrawPixel>
}
 80020c4:	46c0      	nop			@ (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b003      	add	sp, #12
 80020ca:	bd90      	pop	{r4, r7, pc}

080020cc <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80020cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ce:	46c6      	mov	lr, r8
 80020d0:	b500      	push	{lr}
 80020d2:	b090      	sub	sp, #64	@ 0x40
 80020d4:	af04      	add	r7, sp, #16
 80020d6:	468c      	mov	ip, r1
 80020d8:	0016      	movs	r6, r2
 80020da:	0019      	movs	r1, r3
 80020dc:	221e      	movs	r2, #30
 80020de:	18ba      	adds	r2, r7, r2
 80020e0:	1c03      	adds	r3, r0, #0
 80020e2:	8013      	strh	r3, [r2, #0]
 80020e4:	231c      	movs	r3, #28
 80020e6:	18fb      	adds	r3, r7, r3
 80020e8:	4662      	mov	r2, ip
 80020ea:	801a      	strh	r2, [r3, #0]
 80020ec:	201a      	movs	r0, #26
 80020ee:	183b      	adds	r3, r7, r0
 80020f0:	1c32      	adds	r2, r6, #0
 80020f2:	801a      	strh	r2, [r3, #0]
 80020f4:	2018      	movs	r0, #24
 80020f6:	183b      	adds	r3, r7, r0
 80020f8:	1c0a      	adds	r2, r1, #0
 80020fa:	801a      	strh	r2, [r3, #0]
 80020fc:	466b      	mov	r3, sp
 80020fe:	4698      	mov	r8, r3
	uint16_t pallette[] = {color};
 8002100:	230c      	movs	r3, #12
 8002102:	0001      	movs	r1, r0
 8002104:	185e      	adds	r6, r3, r1
 8002106:	19f2      	adds	r2, r6, r7
 8002108:	2030      	movs	r0, #48	@ 0x30
 800210a:	1846      	adds	r6, r0, r1
 800210c:	19f3      	adds	r3, r6, r7
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	8013      	strh	r3, [r2, #0]
	    uint16_t pixels[w*h][2];
 8002112:	201a      	movs	r0, #26
 8002114:	183b      	adds	r3, r7, r0
 8002116:	2200      	movs	r2, #0
 8002118:	5e9b      	ldrsh	r3, [r3, r2]
 800211a:	187a      	adds	r2, r7, r1
 800211c:	2000      	movs	r0, #0
 800211e:	5e12      	ldrsh	r2, [r2, r0]
 8002120:	4353      	muls	r3, r2
 8002122:	1e5a      	subs	r2, r3, #1
 8002124:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002126:	001a      	movs	r2, r3
 8002128:	60ba      	str	r2, [r7, #8]
 800212a:	2200      	movs	r2, #0
 800212c:	60fa      	str	r2, [r7, #12]
 800212e:	68b8      	ldr	r0, [r7, #8]
 8002130:	68f9      	ldr	r1, [r7, #12]
 8002132:	0002      	movs	r2, r0
 8002134:	0ed2      	lsrs	r2, r2, #27
 8002136:	000e      	movs	r6, r1
 8002138:	0176      	lsls	r6, r6, #5
 800213a:	617e      	str	r6, [r7, #20]
 800213c:	697e      	ldr	r6, [r7, #20]
 800213e:	4316      	orrs	r6, r2
 8002140:	617e      	str	r6, [r7, #20]
 8002142:	0002      	movs	r2, r0
 8002144:	0152      	lsls	r2, r2, #5
 8002146:	613a      	str	r2, [r7, #16]
 8002148:	001a      	movs	r2, r3
 800214a:	603a      	str	r2, [r7, #0]
 800214c:	2200      	movs	r2, #0
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	6838      	ldr	r0, [r7, #0]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	0002      	movs	r2, r0
 8002156:	0ed2      	lsrs	r2, r2, #27
 8002158:	000e      	movs	r6, r1
 800215a:	0175      	lsls	r5, r6, #5
 800215c:	4315      	orrs	r5, r2
 800215e:	0002      	movs	r2, r0
 8002160:	0154      	lsls	r4, r2, #5
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	3307      	adds	r3, #7
 8002166:	08db      	lsrs	r3, r3, #3
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	466a      	mov	r2, sp
 800216c:	1ad2      	subs	r2, r2, r3
 800216e:	4695      	mov	sp, r2
 8002170:	ab04      	add	r3, sp, #16
 8002172:	3301      	adds	r3, #1
 8002174:	085b      	lsrs	r3, r3, #1
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	62bb      	str	r3, [r7, #40]	@ 0x28

	    pixels[0][0] = 0;
 800217a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800217c:	2200      	movs	r2, #0
 800217e:	801a      	strh	r2, [r3, #0]
	    pixels[0][1] = w*h;
 8002180:	201a      	movs	r0, #26
 8002182:	183b      	adds	r3, r7, r0
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	2118      	movs	r1, #24
 8002188:	187a      	adds	r2, r7, r1
 800218a:	8812      	ldrh	r2, [r2, #0]
 800218c:	4353      	muls	r3, r2
 800218e:	b29a      	uxth	r2, r3
 8002190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002192:	805a      	strh	r2, [r3, #2]
	    drawImage(pixels, pallette, x, y, w, h, 1);
 8002194:	221e      	movs	r2, #30
 8002196:	18bb      	adds	r3, r7, r2
 8002198:	881c      	ldrh	r4, [r3, #0]
 800219a:	231c      	movs	r3, #28
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	881d      	ldrh	r5, [r3, #0]
 80021a0:	183b      	adds	r3, r7, r0
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	0008      	movs	r0, r1
 80021a6:	187a      	adds	r2, r7, r1
 80021a8:	8812      	ldrh	r2, [r2, #0]
 80021aa:	210c      	movs	r1, #12
 80021ac:	1809      	adds	r1, r1, r0
 80021ae:	19c9      	adds	r1, r1, r7
 80021b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021b2:	2601      	movs	r6, #1
 80021b4:	46b4      	mov	ip, r6
 80021b6:	4666      	mov	r6, ip
 80021b8:	9602      	str	r6, [sp, #8]
 80021ba:	9201      	str	r2, [sp, #4]
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	002b      	movs	r3, r5
 80021c0:	0022      	movs	r2, r4
 80021c2:	f000 fa09 	bl	80025d8 <drawImage>
 80021c6:	46c5      	mov	sp, r8

	//ST7735_FillRectangle(x, y, w, h, color);
}
 80021c8:	46c0      	nop			@ (mov r8, r8)
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b00c      	add	sp, #48	@ 0x30
 80021ce:	bc80      	pop	{r7}
 80021d0:	46b8      	mov	r8, r7
 80021d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021d4 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 80021d4:	b590      	push	{r4, r7, lr}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	0004      	movs	r4, r0
 80021dc:	0008      	movs	r0, r1
 80021de:	0011      	movs	r1, r2
 80021e0:	1dbb      	adds	r3, r7, #6
 80021e2:	1c22      	adds	r2, r4, #0
 80021e4:	801a      	strh	r2, [r3, #0]
 80021e6:	1d3b      	adds	r3, r7, #4
 80021e8:	1c02      	adds	r2, r0, #0
 80021ea:	801a      	strh	r2, [r3, #0]
 80021ec:	1cbb      	adds	r3, r7, #2
 80021ee:	1c0a      	adds	r2, r1, #0
 80021f0:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 80021f2:	1cbb      	adds	r3, r7, #2
 80021f4:	881a      	ldrh	r2, [r3, #0]
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	2100      	movs	r1, #0
 80021fa:	5e59      	ldrsh	r1, [r3, r1]
 80021fc:	1dbb      	adds	r3, r7, #6
 80021fe:	2000      	movs	r0, #0
 8002200:	5e1b      	ldrsh	r3, [r3, r0]
 8002202:	0018      	movs	r0, r3
 8002204:	f7ff ff46 	bl	8002094 <drawPixel>
}
 8002208:	46c0      	nop			@ (mov r8, r8)
 800220a:	46bd      	mov	sp, r7
 800220c:	b003      	add	sp, #12
 800220e:	bd90      	pop	{r4, r7, pc}

08002210 <drawString>:
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
void drawString(int16_t x, int16_t y, char* c, int16_t textColor, int16_t bgColor, uint8_t size, uint8_t spacing)
{
 8002210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002212:	b089      	sub	sp, #36	@ 0x24
 8002214:	af02      	add	r7, sp, #8
 8002216:	0004      	movs	r4, r0
 8002218:	0008      	movs	r0, r1
 800221a:	60ba      	str	r2, [r7, #8]
 800221c:	0019      	movs	r1, r3
 800221e:	230e      	movs	r3, #14
 8002220:	18fb      	adds	r3, r7, r3
 8002222:	1c22      	adds	r2, r4, #0
 8002224:	801a      	strh	r2, [r3, #0]
 8002226:	230c      	movs	r3, #12
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	1c02      	adds	r2, r0, #0
 800222c:	801a      	strh	r2, [r3, #0]
 800222e:	1dbb      	adds	r3, r7, #6
 8002230:	1c0a      	adds	r2, r1, #0
 8002232:	801a      	strh	r2, [r3, #0]
	uint16_t i =0;
 8002234:	2316      	movs	r3, #22
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	2200      	movs	r2, #0
 800223a:	801a      	strh	r2, [r3, #0]

	while(c[i])
 800223c:	e03f      	b.n	80022be <drawString+0xae>
	{
		drawChar(x, y, c[i], textColor, bgColor, size);
 800223e:	2516      	movs	r5, #22
 8002240:	197b      	adds	r3, r7, r5
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	18d3      	adds	r3, r2, r3
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	469c      	mov	ip, r3
 800224c:	1dbb      	adds	r3, r7, #6
 800224e:	2400      	movs	r4, #0
 8002250:	5f1c      	ldrsh	r4, [r3, r4]
 8002252:	230c      	movs	r3, #12
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	2100      	movs	r1, #0
 8002258:	5e59      	ldrsh	r1, [r3, r1]
 800225a:	260e      	movs	r6, #14
 800225c:	19bb      	adds	r3, r7, r6
 800225e:	2000      	movs	r0, #0
 8002260:	5e18      	ldrsh	r0, [r3, r0]
 8002262:	232c      	movs	r3, #44	@ 0x2c
 8002264:	2208      	movs	r2, #8
 8002266:	189b      	adds	r3, r3, r2
 8002268:	19db      	adds	r3, r3, r7
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	2328      	movs	r3, #40	@ 0x28
 8002270:	189b      	adds	r3, r3, r2
 8002272:	19db      	adds	r3, r3, r7
 8002274:	2200      	movs	r2, #0
 8002276:	5e9b      	ldrsh	r3, [r3, r2]
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	0023      	movs	r3, r4
 800227c:	4662      	mov	r2, ip
 800227e:	f000 f82b 	bl	80022d8 <drawChar>
		x+=(size*6)+spacing;
 8002282:	232c      	movs	r3, #44	@ 0x2c
 8002284:	2108      	movs	r1, #8
 8002286:	185b      	adds	r3, r3, r1
 8002288:	19db      	adds	r3, r3, r7
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	b29b      	uxth	r3, r3
 800228e:	1c1a      	adds	r2, r3, #0
 8002290:	1c13      	adds	r3, r2, #0
 8002292:	18db      	adds	r3, r3, r3
 8002294:	189b      	adds	r3, r3, r2
 8002296:	18db      	adds	r3, r3, r3
 8002298:	b29a      	uxth	r2, r3
 800229a:	2330      	movs	r3, #48	@ 0x30
 800229c:	185b      	adds	r3, r3, r1
 800229e:	19db      	adds	r3, r3, r7
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	18d3      	adds	r3, r2, r3
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	19bb      	adds	r3, r7, r6
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	18d3      	adds	r3, r2, r3
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	19bb      	adds	r3, r7, r6
 80022b2:	801a      	strh	r2, [r3, #0]
		i++;
 80022b4:	197b      	adds	r3, r7, r5
 80022b6:	881a      	ldrh	r2, [r3, #0]
 80022b8:	197b      	adds	r3, r7, r5
 80022ba:	3201      	adds	r2, #1
 80022bc:	801a      	strh	r2, [r3, #0]
	while(c[i])
 80022be:	2316      	movs	r3, #22
 80022c0:	18fb      	adds	r3, r7, r3
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	18d3      	adds	r3, r2, r3
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1b7      	bne.n	800223e <drawString+0x2e>
	}
}
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	46c0      	nop			@ (mov r8, r8)
 80022d2:	46bd      	mov	sp, r7
 80022d4:	b007      	add	sp, #28
 80022d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022d8 <drawChar>:
void drawChar(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 80022d8:	b5b0      	push	{r4, r5, r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af02      	add	r7, sp, #8
 80022de:	0005      	movs	r5, r0
 80022e0:	000c      	movs	r4, r1
 80022e2:	0010      	movs	r0, r2
 80022e4:	0019      	movs	r1, r3
 80022e6:	1dbb      	adds	r3, r7, #6
 80022e8:	1c2a      	adds	r2, r5, #0
 80022ea:	801a      	strh	r2, [r3, #0]
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	1c22      	adds	r2, r4, #0
 80022f0:	801a      	strh	r2, [r3, #0]
 80022f2:	1cfb      	adds	r3, r7, #3
 80022f4:	1c02      	adds	r2, r0, #0
 80022f6:	701a      	strb	r2, [r3, #0]
 80022f8:	003b      	movs	r3, r7
 80022fa:	1c0a      	adds	r2, r1, #0
 80022fc:	801a      	strh	r2, [r3, #0]
  uint8_t line;
  int32_t i, j;
  if((x >= _width)            ||
 80022fe:	4b79      	ldr	r3, [pc, #484]	@ (80024e4 <drawChar+0x20c>)
 8002300:	2200      	movs	r2, #0
 8002302:	5e9b      	ldrsh	r3, [r3, r2]
 8002304:	1dba      	adds	r2, r7, #6
 8002306:	2100      	movs	r1, #0
 8002308:	5e52      	ldrsh	r2, [r2, r1]
 800230a:	429a      	cmp	r2, r3
 800230c:	db00      	blt.n	8002310 <drawChar+0x38>
 800230e:	e0e5      	b.n	80024dc <drawChar+0x204>
     (y >= _height)           ||
 8002310:	4b75      	ldr	r3, [pc, #468]	@ (80024e8 <drawChar+0x210>)
 8002312:	2200      	movs	r2, #0
 8002314:	5e9b      	ldrsh	r3, [r3, r2]
  if((x >= _width)            ||
 8002316:	1d3a      	adds	r2, r7, #4
 8002318:	2100      	movs	r1, #0
 800231a:	5e52      	ldrsh	r2, [r2, r1]
 800231c:	429a      	cmp	r2, r3
 800231e:	db00      	blt.n	8002322 <drawChar+0x4a>
 8002320:	e0dc      	b.n	80024dc <drawChar+0x204>
     ((x + 5 * size - 1) < 0) ||
 8002322:	1dbb      	adds	r3, r7, #6
 8002324:	2100      	movs	r1, #0
 8002326:	5e59      	ldrsh	r1, [r3, r1]
 8002328:	202c      	movs	r0, #44	@ 0x2c
 800232a:	183b      	adds	r3, r7, r0
 800232c:	781a      	ldrb	r2, [r3, #0]
 800232e:	0013      	movs	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	189b      	adds	r3, r3, r2
 8002334:	18cb      	adds	r3, r1, r3
     (y >= _height)           ||
 8002336:	2b00      	cmp	r3, #0
 8002338:	dc00      	bgt.n	800233c <drawChar+0x64>
 800233a:	e0cf      	b.n	80024dc <drawChar+0x204>
     ((y + 8 * size - 1) < 0))
 800233c:	1d3b      	adds	r3, r7, #4
 800233e:	2200      	movs	r2, #0
 8002340:	5e9a      	ldrsh	r2, [r3, r2]
 8002342:	183b      	adds	r3, r7, r0
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	18d3      	adds	r3, r2, r3
     ((x + 5 * size - 1) < 0) ||
 800234a:	2b00      	cmp	r3, #0
 800234c:	dc00      	bgt.n	8002350 <drawChar+0x78>
 800234e:	e0c5      	b.n	80024dc <drawChar+0x204>
    return;

  for (i=0; i<6; i++ ) {
 8002350:	2300      	movs	r3, #0
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	e0bd      	b.n	80024d2 <drawChar+0x1fa>
    if ((i) == 5)
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	2b05      	cmp	r3, #5
 800235a:	d104      	bne.n	8002366 <drawChar+0x8e>
      line = 0x0;
 800235c:	2317      	movs	r3, #23
 800235e:	18fb      	adds	r3, r7, r3
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
 8002364:	e00b      	b.n	800237e <drawChar+0xa6>
    else
      line = Font[(c*5)+(i)];
 8002366:	1cfb      	adds	r3, r7, #3
 8002368:	781a      	ldrb	r2, [r3, #0]
 800236a:	0013      	movs	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	189a      	adds	r2, r3, r2
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	18d2      	adds	r2, r2, r3
 8002374:	2317      	movs	r3, #23
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	495c      	ldr	r1, [pc, #368]	@ (80024ec <drawChar+0x214>)
 800237a:	5c8a      	ldrb	r2, [r1, r2]
 800237c:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	e09f      	b.n	80024c4 <drawChar+0x1ec>
      if (line & 0x1) {
 8002384:	2317      	movs	r3, #23
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2201      	movs	r2, #1
 800238c:	4013      	ands	r3, r2
 800238e:	d043      	beq.n	8002418 <drawChar+0x140>
        if (size == 1)
 8002390:	232c      	movs	r3, #44	@ 0x2c
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d115      	bne.n	80023c6 <drawChar+0xee>
          writePixel(x+(i), y+(7-j), textColor);
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	b29a      	uxth	r2, r3
 800239e:	1dbb      	adds	r3, r7, #6
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	18d3      	adds	r3, r2, r3
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	b218      	sxth	r0, r3
 80023a8:	1d3b      	adds	r3, r7, #4
 80023aa:	881a      	ldrh	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	3307      	adds	r3, #7
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	b219      	sxth	r1, r3
 80023ba:	003b      	movs	r3, r7
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	001a      	movs	r2, r3
 80023c0:	f7ff ff08 	bl	80021d4 <writePixel>
 80023c4:	e075      	b.n	80024b2 <drawChar+0x1da>
        else {
          fillRect(x+((i)*size), y+((7-j)*size), size, size, textColor);
 80023c6:	212c      	movs	r1, #44	@ 0x2c
 80023c8:	187b      	adds	r3, r7, r1
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	b292      	uxth	r2, r2
 80023d2:	4353      	muls	r3, r2
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	1dbb      	adds	r3, r7, #6
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	18d3      	adds	r3, r2, r3
 80023dc:	b29b      	uxth	r3, r3
 80023de:	b218      	sxth	r0, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2207      	movs	r2, #7
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	000c      	movs	r4, r1
 80023ea:	187a      	adds	r2, r7, r1
 80023ec:	7812      	ldrb	r2, [r2, #0]
 80023ee:	b292      	uxth	r2, r2
 80023f0:	4353      	muls	r3, r2
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	18d3      	adds	r3, r2, r3
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	b219      	sxth	r1, r3
 80023fe:	193b      	adds	r3, r7, r4
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	b21a      	sxth	r2, r3
 8002404:	193b      	adds	r3, r7, r4
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	b21c      	sxth	r4, r3
 800240a:	003b      	movs	r3, r7
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	0023      	movs	r3, r4
 8002412:	f7ff fe5b 	bl	80020cc <fillRect>
 8002416:	e04c      	b.n	80024b2 <drawChar+0x1da>
        }
      } else if (bgColor != textColor) {
 8002418:	2428      	movs	r4, #40	@ 0x28
 800241a:	193b      	adds	r3, r7, r4
 800241c:	0039      	movs	r1, r7
 800241e:	2200      	movs	r2, #0
 8002420:	5e9a      	ldrsh	r2, [r3, r2]
 8002422:	2300      	movs	r3, #0
 8002424:	5ecb      	ldrsh	r3, [r1, r3]
 8002426:	429a      	cmp	r2, r3
 8002428:	d043      	beq.n	80024b2 <drawChar+0x1da>
        if (size == 1) // default size
 800242a:	232c      	movs	r3, #44	@ 0x2c
 800242c:	18fb      	adds	r3, r7, r3
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d115      	bne.n	8002460 <drawChar+0x188>
          writePixel(x+(i), y+(7-j), bgColor);
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	b29a      	uxth	r2, r3
 8002438:	1dbb      	adds	r3, r7, #6
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	18d3      	adds	r3, r2, r3
 800243e:	b29b      	uxth	r3, r3
 8002440:	b218      	sxth	r0, r3
 8002442:	1d3b      	adds	r3, r7, #4
 8002444:	881a      	ldrh	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	b29b      	uxth	r3, r3
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	b29b      	uxth	r3, r3
 800244e:	3307      	adds	r3, #7
 8002450:	b29b      	uxth	r3, r3
 8002452:	b219      	sxth	r1, r3
 8002454:	193b      	adds	r3, r7, r4
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	001a      	movs	r2, r3
 800245a:	f7ff febb 	bl	80021d4 <writePixel>
 800245e:	e028      	b.n	80024b2 <drawChar+0x1da>
        else {  // big size
          fillRect(x+(i)*size, y+(7-j)*size, size, size, bgColor);
 8002460:	212c      	movs	r1, #44	@ 0x2c
 8002462:	187b      	adds	r3, r7, r1
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	b29b      	uxth	r3, r3
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	b292      	uxth	r2, r2
 800246c:	4353      	muls	r3, r2
 800246e:	b29a      	uxth	r2, r3
 8002470:	1dbb      	adds	r3, r7, #6
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	18d3      	adds	r3, r2, r3
 8002476:	b29b      	uxth	r3, r3
 8002478:	b218      	sxth	r0, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2207      	movs	r2, #7
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	b29b      	uxth	r3, r3
 8002482:	000c      	movs	r4, r1
 8002484:	187a      	adds	r2, r7, r1
 8002486:	7812      	ldrb	r2, [r2, #0]
 8002488:	b292      	uxth	r2, r2
 800248a:	4353      	muls	r3, r2
 800248c:	b29a      	uxth	r2, r3
 800248e:	1d3b      	adds	r3, r7, #4
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	18d3      	adds	r3, r2, r3
 8002494:	b29b      	uxth	r3, r3
 8002496:	b219      	sxth	r1, r3
 8002498:	193b      	adds	r3, r7, r4
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	b21a      	sxth	r2, r3
 800249e:	193b      	adds	r3, r7, r4
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	b21c      	sxth	r4, r3
 80024a4:	2328      	movs	r3, #40	@ 0x28
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	0023      	movs	r3, r4
 80024ae:	f7ff fe0d 	bl	80020cc <fillRect>
        }
      }
      line >>= 1;
 80024b2:	2217      	movs	r2, #23
 80024b4:	18bb      	adds	r3, r7, r2
 80024b6:	18ba      	adds	r2, r7, r2
 80024b8:	7812      	ldrb	r2, [r2, #0]
 80024ba:	0852      	lsrs	r2, r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	3301      	adds	r3, #1
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2b07      	cmp	r3, #7
 80024c8:	dc00      	bgt.n	80024cc <drawChar+0x1f4>
 80024ca:	e75b      	b.n	8002384 <drawChar+0xac>
  for (i=0; i<6; i++ ) {
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	3301      	adds	r3, #1
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	2b05      	cmp	r3, #5
 80024d6:	dc00      	bgt.n	80024da <drawChar+0x202>
 80024d8:	e73d      	b.n	8002356 <drawChar+0x7e>
 80024da:	e000      	b.n	80024de <drawChar+0x206>
    return;
 80024dc:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80024de:	46bd      	mov	sp, r7
 80024e0:	b006      	add	sp, #24
 80024e2:	bdb0      	pop	{r4, r5, r7, pc}
 80024e4:	20000efc 	.word	0x20000efc
 80024e8:	20000efe 	.word	0x20000efe
 80024ec:	08009a1c 	.word	0x08009a1c

080024f0 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80024f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024f2:	b091      	sub	sp, #68	@ 0x44
 80024f4:	af04      	add	r7, sp, #16
 80024f6:	231e      	movs	r3, #30
 80024f8:	18f9      	adds	r1, r7, r3
 80024fa:	8008      	strh	r0, [r1, #0]
 80024fc:	4669      	mov	r1, sp
 80024fe:	000e      	movs	r6, r1
    uint16_t pallette[] = {color};
 8002500:	210c      	movs	r1, #12
 8002502:	2318      	movs	r3, #24
 8002504:	18cb      	adds	r3, r1, r3
 8002506:	19d9      	adds	r1, r3, r7
 8002508:	231e      	movs	r3, #30
 800250a:	18f8      	adds	r0, r7, r3
 800250c:	8800      	ldrh	r0, [r0, #0]
 800250e:	8008      	strh	r0, [r1, #0]
    uint16_t pixels[_width*_height][2];
 8002510:	492f      	ldr	r1, [pc, #188]	@ (80025d0 <fillScreen+0xe0>)
 8002512:	2300      	movs	r3, #0
 8002514:	5ec9      	ldrsh	r1, [r1, r3]
 8002516:	0008      	movs	r0, r1
 8002518:	492e      	ldr	r1, [pc, #184]	@ (80025d4 <fillScreen+0xe4>)
 800251a:	2300      	movs	r3, #0
 800251c:	5ec9      	ldrsh	r1, [r1, r3]
 800251e:	4341      	muls	r1, r0
 8002520:	1e48      	subs	r0, r1, #1
 8002522:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002524:	0008      	movs	r0, r1
 8002526:	6138      	str	r0, [r7, #16]
 8002528:	2000      	movs	r0, #0
 800252a:	6178      	str	r0, [r7, #20]
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	0010      	movs	r0, r2
 8002532:	0ec0      	lsrs	r0, r0, #27
 8002534:	613a      	str	r2, [r7, #16]
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	015d      	lsls	r5, r3, #5
 800253a:	4305      	orrs	r5, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	015c      	lsls	r4, r3, #5
 8002540:	0008      	movs	r0, r1
 8002542:	6038      	str	r0, [r7, #0]
 8002544:	2000      	movs	r0, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	683c      	ldr	r4, [r7, #0]
 800254a:	687d      	ldr	r5, [r7, #4]
 800254c:	0023      	movs	r3, r4
 800254e:	0ed8      	lsrs	r0, r3, #27
 8002550:	002b      	movs	r3, r5
 8002552:	015b      	lsls	r3, r3, #5
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4303      	orrs	r3, r0
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	0023      	movs	r3, r4
 800255e:	015b      	lsls	r3, r3, #5
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	000b      	movs	r3, r1
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	3307      	adds	r3, #7
 8002568:	08db      	lsrs	r3, r3, #3
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	466a      	mov	r2, sp
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	469d      	mov	sp, r3
 8002572:	ab04      	add	r3, sp, #16
 8002574:	3301      	adds	r3, #1
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	62bb      	str	r3, [r7, #40]	@ 0x28

    pixels[0][0] = 0;
 800257c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257e:	2200      	movs	r2, #0
 8002580:	801a      	strh	r2, [r3, #0]
    pixels[0][1] = _width*_height;
 8002582:	4b13      	ldr	r3, [pc, #76]	@ (80025d0 <fillScreen+0xe0>)
 8002584:	2200      	movs	r2, #0
 8002586:	5e9b      	ldrsh	r3, [r3, r2]
 8002588:	b29b      	uxth	r3, r3
 800258a:	4a12      	ldr	r2, [pc, #72]	@ (80025d4 <fillScreen+0xe4>)
 800258c:	2000      	movs	r0, #0
 800258e:	5e12      	ldrsh	r2, [r2, r0]
 8002590:	b292      	uxth	r2, r2
 8002592:	4353      	muls	r3, r2
 8002594:	b29a      	uxth	r2, r3
 8002596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002598:	805a      	strh	r2, [r3, #2]
    drawImage(pixels, pallette, 0, 0, _width, _height, 1);
 800259a:	4b0d      	ldr	r3, [pc, #52]	@ (80025d0 <fillScreen+0xe0>)
 800259c:	2200      	movs	r2, #0
 800259e:	5e9b      	ldrsh	r3, [r3, r2]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	4a0c      	ldr	r2, [pc, #48]	@ (80025d4 <fillScreen+0xe4>)
 80025a4:	2000      	movs	r0, #0
 80025a6:	5e12      	ldrsh	r2, [r2, r0]
 80025a8:	b292      	uxth	r2, r2
 80025aa:	210c      	movs	r1, #12
 80025ac:	2018      	movs	r0, #24
 80025ae:	1809      	adds	r1, r1, r0
 80025b0:	19c9      	adds	r1, r1, r7
 80025b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025b4:	2401      	movs	r4, #1
 80025b6:	9402      	str	r4, [sp, #8]
 80025b8:	9201      	str	r2, [sp, #4]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	2300      	movs	r3, #0
 80025be:	2200      	movs	r2, #0
 80025c0:	f000 f80a 	bl	80025d8 <drawImage>
 80025c4:	46b5      	mov	sp, r6
	//fillRect(0, 0, _width, _height, color);
}
 80025c6:	46c0      	nop			@ (mov r8, r8)
 80025c8:	46bd      	mov	sp, r7
 80025ca:	b00d      	add	sp, #52	@ 0x34
 80025cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ce:	46c0      	nop			@ (mov r8, r8)
 80025d0:	20000efc 	.word	0x20000efc
 80025d4:	20000efe 	.word	0x20000efe

080025d8 <drawImage>:

void drawImage(uint16_t image[][2], uint16_t palette[], uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
{
 80025d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025da:	46c6      	mov	lr, r8
 80025dc:	b500      	push	{lr}
 80025de:	b092      	sub	sp, #72	@ 0x48
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	6278      	str	r0, [r7, #36]	@ 0x24
 80025e4:	6239      	str	r1, [r7, #32]
 80025e6:	0019      	movs	r1, r3
 80025e8:	231e      	movs	r3, #30
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	801a      	strh	r2, [r3, #0]
 80025ee:	231c      	movs	r3, #28
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	1c0a      	adds	r2, r1, #0
 80025f4:	801a      	strh	r2, [r3, #0]
 80025f6:	466b      	mov	r3, sp
 80025f8:	4698      	mov	r8, r3
	uint16_t i;
	uint16_t j;
	uint16_t totalInd =0;
 80025fa:	2322      	movs	r3, #34	@ 0x22
 80025fc:	2118      	movs	r1, #24
 80025fe:	185b      	adds	r3, r3, r1
 8002600:	19db      	adds	r3, r3, r7
 8002602:	2200      	movs	r2, #0
 8002604:	801a      	strh	r2, [r3, #0]
	uint16_t ind;
	uint16_t count;
	uint16_t bufffer[w*h];
 8002606:	2340      	movs	r3, #64	@ 0x40
 8002608:	185b      	adds	r3, r3, r1
 800260a:	19db      	adds	r3, r3, r7
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	2244      	movs	r2, #68	@ 0x44
 8002610:	1852      	adds	r2, r2, r1
 8002612:	19d2      	adds	r2, r2, r7
 8002614:	8812      	ldrh	r2, [r2, #0]
 8002616:	4353      	muls	r3, r2
 8002618:	1e5a      	subs	r2, r3, #1
 800261a:	637a      	str	r2, [r7, #52]	@ 0x34
 800261c:	001a      	movs	r2, r3
 800261e:	60ba      	str	r2, [r7, #8]
 8002620:	2200      	movs	r2, #0
 8002622:	60fa      	str	r2, [r7, #12]
 8002624:	68b8      	ldr	r0, [r7, #8]
 8002626:	68f9      	ldr	r1, [r7, #12]
 8002628:	0002      	movs	r2, r0
 800262a:	0f12      	lsrs	r2, r2, #28
 800262c:	000e      	movs	r6, r1
 800262e:	0136      	lsls	r6, r6, #4
 8002630:	617e      	str	r6, [r7, #20]
 8002632:	697e      	ldr	r6, [r7, #20]
 8002634:	4316      	orrs	r6, r2
 8002636:	617e      	str	r6, [r7, #20]
 8002638:	0002      	movs	r2, r0
 800263a:	0112      	lsls	r2, r2, #4
 800263c:	613a      	str	r2, [r7, #16]
 800263e:	001a      	movs	r2, r3
 8002640:	603a      	str	r2, [r7, #0]
 8002642:	2200      	movs	r2, #0
 8002644:	607a      	str	r2, [r7, #4]
 8002646:	6838      	ldr	r0, [r7, #0]
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	0002      	movs	r2, r0
 800264c:	0f12      	lsrs	r2, r2, #28
 800264e:	000e      	movs	r6, r1
 8002650:	0135      	lsls	r5, r6, #4
 8002652:	4315      	orrs	r5, r2
 8002654:	0002      	movs	r2, r0
 8002656:	0114      	lsls	r4, r2, #4
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	3307      	adds	r3, #7
 800265c:	08db      	lsrs	r3, r3, #3
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	466a      	mov	r2, sp
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	469d      	mov	sp, r3
 8002666:	ab02      	add	r3, sp, #8
 8002668:	3301      	adds	r3, #1
 800266a:	085b      	lsrs	r3, r3, #1
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	633b      	str	r3, [r7, #48]	@ 0x30
for(i=0; i<c; i++)
 8002670:	2326      	movs	r3, #38	@ 0x26
 8002672:	2118      	movs	r1, #24
 8002674:	185b      	adds	r3, r3, r1
 8002676:	19db      	adds	r3, r3, r7
 8002678:	2200      	movs	r2, #0
 800267a:	801a      	strh	r2, [r3, #0]
 800267c:	e04d      	b.n	800271a <drawImage+0x142>
{
	ind = image[i][0];
 800267e:	2126      	movs	r1, #38	@ 0x26
 8002680:	2018      	movs	r0, #24
 8002682:	180b      	adds	r3, r1, r0
 8002684:	19db      	adds	r3, r3, r7
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800268c:	18d2      	adds	r2, r2, r3
 800268e:	2316      	movs	r3, #22
 8002690:	181b      	adds	r3, r3, r0
 8002692:	19db      	adds	r3, r3, r7
 8002694:	8812      	ldrh	r2, [r2, #0]
 8002696:	801a      	strh	r2, [r3, #0]
	count = image[i][1];
 8002698:	180b      	adds	r3, r1, r0
 800269a:	19db      	adds	r3, r3, r7
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026a2:	18d2      	adds	r2, r2, r3
 80026a4:	2314      	movs	r3, #20
 80026a6:	181b      	adds	r3, r3, r0
 80026a8:	19db      	adds	r3, r3, r7
 80026aa:	8852      	ldrh	r2, [r2, #2]
 80026ac:	801a      	strh	r2, [r3, #0]
	for(j=0; j<count; j++)
 80026ae:	2324      	movs	r3, #36	@ 0x24
 80026b0:	181b      	adds	r3, r3, r0
 80026b2:	19db      	adds	r3, r3, r7
 80026b4:	2200      	movs	r2, #0
 80026b6:	801a      	strh	r2, [r3, #0]
 80026b8:	e01c      	b.n	80026f4 <drawImage+0x11c>
	{
		bufffer[totalInd++] = palette[ind];
 80026ba:	2316      	movs	r3, #22
 80026bc:	2418      	movs	r4, #24
 80026be:	191b      	adds	r3, r3, r4
 80026c0:	19db      	adds	r3, r3, r7
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	6a3a      	ldr	r2, [r7, #32]
 80026c8:	18d2      	adds	r2, r2, r3
 80026ca:	2122      	movs	r1, #34	@ 0x22
 80026cc:	190b      	adds	r3, r1, r4
 80026ce:	19db      	adds	r3, r3, r7
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	1909      	adds	r1, r1, r4
 80026d4:	19c9      	adds	r1, r1, r7
 80026d6:	1c58      	adds	r0, r3, #1
 80026d8:	8008      	strh	r0, [r1, #0]
 80026da:	0018      	movs	r0, r3
 80026dc:	8811      	ldrh	r1, [r2, #0]
 80026de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e0:	0042      	lsls	r2, r0, #1
 80026e2:	52d1      	strh	r1, [r2, r3]
	for(j=0; j<count; j++)
 80026e4:	2124      	movs	r1, #36	@ 0x24
 80026e6:	190b      	adds	r3, r1, r4
 80026e8:	19db      	adds	r3, r3, r7
 80026ea:	881a      	ldrh	r2, [r3, #0]
 80026ec:	190b      	adds	r3, r1, r4
 80026ee:	19db      	adds	r3, r3, r7
 80026f0:	3201      	adds	r2, #1
 80026f2:	801a      	strh	r2, [r3, #0]
 80026f4:	2324      	movs	r3, #36	@ 0x24
 80026f6:	2018      	movs	r0, #24
 80026f8:	181b      	adds	r3, r3, r0
 80026fa:	19da      	adds	r2, r3, r7
 80026fc:	2314      	movs	r3, #20
 80026fe:	181b      	adds	r3, r3, r0
 8002700:	19db      	adds	r3, r3, r7
 8002702:	8812      	ldrh	r2, [r2, #0]
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d3d7      	bcc.n	80026ba <drawImage+0xe2>
for(i=0; i<c; i++)
 800270a:	2126      	movs	r1, #38	@ 0x26
 800270c:	180b      	adds	r3, r1, r0
 800270e:	19db      	adds	r3, r3, r7
 8002710:	881a      	ldrh	r2, [r3, #0]
 8002712:	180b      	adds	r3, r1, r0
 8002714:	19db      	adds	r3, r3, r7
 8002716:	3201      	adds	r2, #1
 8002718:	801a      	strh	r2, [r3, #0]
 800271a:	2326      	movs	r3, #38	@ 0x26
 800271c:	2118      	movs	r1, #24
 800271e:	185b      	adds	r3, r3, r1
 8002720:	19da      	adds	r2, r3, r7
 8002722:	2348      	movs	r3, #72	@ 0x48
 8002724:	185b      	adds	r3, r3, r1
 8002726:	19db      	adds	r3, r3, r7
 8002728:	8812      	ldrh	r2, [r2, #0]
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d3a6      	bcc.n	800267e <drawImage+0xa6>
	}
}
ST7735_DrawImage(y, x, w, h, bufffer);
 8002730:	2344      	movs	r3, #68	@ 0x44
 8002732:	185b      	adds	r3, r3, r1
 8002734:	19db      	adds	r3, r3, r7
 8002736:	881c      	ldrh	r4, [r3, #0]
 8002738:	2340      	movs	r3, #64	@ 0x40
 800273a:	185b      	adds	r3, r3, r1
 800273c:	19db      	adds	r3, r3, r7
 800273e:	881a      	ldrh	r2, [r3, #0]
 8002740:	231e      	movs	r3, #30
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	8819      	ldrh	r1, [r3, #0]
 8002746:	231c      	movs	r3, #28
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	8818      	ldrh	r0, [r3, #0]
 800274c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	0023      	movs	r3, r4
 8002752:	f000 fa31 	bl	8002bb8 <ST7735_DrawImage>
 8002756:	46c5      	mov	sp, r8
}
 8002758:	46c0      	nop			@ (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	b010      	add	sp, #64	@ 0x40
 800275e:	bc80      	pop	{r7}
 8002760:	46b8      	mov	r8, r7
 8002762:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002764 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8002768:	23a0      	movs	r3, #160	@ 0xa0
 800276a:	05db      	lsls	r3, r3, #23
 800276c:	2200      	movs	r2, #0
 800276e:	2120      	movs	r1, #32
 8002770:	0018      	movs	r0, r3
 8002772:	f001 ff5a 	bl	800462a <HAL_GPIO_WritePin>
}
 8002776:	46c0      	nop			@ (mov r8, r8)
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <ST7735_Unselect>:

void ST7735_Unselect()
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8002780:	23a0      	movs	r3, #160	@ 0xa0
 8002782:	05db      	lsls	r3, r3, #23
 8002784:	2201      	movs	r2, #1
 8002786:	2120      	movs	r1, #32
 8002788:	0018      	movs	r0, r3
 800278a:	f001 ff4e 	bl	800462a <HAL_GPIO_WritePin>
}
 800278e:	46c0      	nop			@ (mov r8, r8)
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <ST7735_Reset>:

void ST7735_Reset()
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8002798:	2380      	movs	r3, #128	@ 0x80
 800279a:	0219      	lsls	r1, r3, #8
 800279c:	23a0      	movs	r3, #160	@ 0xa0
 800279e:	05db      	lsls	r3, r3, #23
 80027a0:	2200      	movs	r2, #0
 80027a2:	0018      	movs	r0, r3
 80027a4:	f001 ff41 	bl	800462a <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80027a8:	2005      	movs	r0, #5
 80027aa:	f001 fcc7 	bl	800413c <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80027ae:	2380      	movs	r3, #128	@ 0x80
 80027b0:	0219      	lsls	r1, r3, #8
 80027b2:	23a0      	movs	r3, #160	@ 0xa0
 80027b4:	05db      	lsls	r3, r3, #23
 80027b6:	2201      	movs	r2, #1
 80027b8:	0018      	movs	r0, r3
 80027ba:	f001 ff36 	bl	800462a <HAL_GPIO_WritePin>
}
 80027be:	46c0      	nop			@ (mov r8, r8)
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	0002      	movs	r2, r0
 80027cc:	1dfb      	adds	r3, r7, #7
 80027ce:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80027d0:	23a0      	movs	r3, #160	@ 0xa0
 80027d2:	05db      	lsls	r3, r3, #23
 80027d4:	2200      	movs	r2, #0
 80027d6:	2110      	movs	r1, #16
 80027d8:	0018      	movs	r0, r3
 80027da:	f001 ff26 	bl	800462a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80027de:	2301      	movs	r3, #1
 80027e0:	425b      	negs	r3, r3
 80027e2:	1df9      	adds	r1, r7, #7
 80027e4:	4803      	ldr	r0, [pc, #12]	@ (80027f4 <ST7735_WriteCommand+0x30>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	f004 f882 	bl	80068f0 <HAL_SPI_Transmit>
}
 80027ec:	46c0      	nop			@ (mov r8, r8)
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b002      	add	sp, #8
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	2000138c 	.word	0x2000138c

080027f8 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8002802:	23a0      	movs	r3, #160	@ 0xa0
 8002804:	05db      	lsls	r3, r3, #23
 8002806:	2201      	movs	r2, #1
 8002808:	2110      	movs	r1, #16
 800280a:	0018      	movs	r0, r3
 800280c:	f001 ff0d 	bl	800462a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	b29a      	uxth	r2, r3
 8002814:	2301      	movs	r3, #1
 8002816:	425b      	negs	r3, r3
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4803      	ldr	r0, [pc, #12]	@ (8002828 <ST7735_WriteData+0x30>)
 800281c:	f004 f868 	bl	80068f0 <HAL_SPI_Transmit>
}
 8002820:	46c0      	nop			@ (mov r8, r8)
 8002822:	46bd      	mov	sp, r7
 8002824:	b002      	add	sp, #8
 8002826:	bd80      	pop	{r7, pc}
 8002828:	2000138c 	.word	0x2000138c

0800282c <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 800282c:	b590      	push	{r4, r7, lr}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	607a      	str	r2, [r7, #4]
 800283a:	220f      	movs	r2, #15
 800283c:	18ba      	adds	r2, r7, r2
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 8002842:	e04a      	b.n	80028da <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	210b      	movs	r1, #11
 800284c:	187a      	adds	r2, r7, r1
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 8002852:	187b      	adds	r3, r7, r1
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	0018      	movs	r0, r3
 8002858:	f7ff ffb4 	bl	80027c4 <ST7735_WriteCommand>

        numArgs = *addr++;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	1c5a      	adds	r2, r3, #1
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	200a      	movs	r0, #10
 8002864:	183a      	adds	r2, r7, r0
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 800286a:	183b      	adds	r3, r7, r0
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	b29a      	uxth	r2, r3
 8002870:	230c      	movs	r3, #12
 8002872:	18fb      	adds	r3, r7, r3
 8002874:	2180      	movs	r1, #128	@ 0x80
 8002876:	400a      	ands	r2, r1
 8002878:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 800287a:	183b      	adds	r3, r7, r0
 800287c:	183a      	adds	r2, r7, r0
 800287e:	7812      	ldrb	r2, [r2, #0]
 8002880:	217f      	movs	r1, #127	@ 0x7f
 8002882:	400a      	ands	r2, r1
 8002884:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 8002886:	183b      	adds	r3, r7, r0
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00c      	beq.n	80028a8 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800288e:	0004      	movs	r4, r0
 8002890:	183b      	adds	r3, r7, r0
 8002892:	781a      	ldrb	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	0011      	movs	r1, r2
 8002898:	0018      	movs	r0, r3
 800289a:	f7ff ffad 	bl	80027f8 <ST7735_WriteData>
            addr += numArgs;
 800289e:	193b      	adds	r3, r7, r4
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	18d3      	adds	r3, r2, r3
 80028a6:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80028a8:	210c      	movs	r1, #12
 80028aa:	187b      	adds	r3, r7, r1
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d013      	beq.n	80028da <DisplayInit+0xae>
            ms = *addr++;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	781a      	ldrb	r2, [r3, #0]
 80028ba:	187b      	adds	r3, r7, r1
 80028bc:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 80028be:	187b      	adds	r3, r7, r1
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	2bff      	cmp	r3, #255	@ 0xff
 80028c4:	d103      	bne.n	80028ce <DisplayInit+0xa2>
 80028c6:	187b      	adds	r3, r7, r1
 80028c8:	22fa      	movs	r2, #250	@ 0xfa
 80028ca:	0052      	lsls	r2, r2, #1
 80028cc:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 80028ce:	230c      	movs	r3, #12
 80028d0:	18fb      	adds	r3, r7, r3
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	0018      	movs	r0, r3
 80028d6:	f001 fc31 	bl	800413c <HAL_Delay>
    while(numCommands--) {
 80028da:	220f      	movs	r2, #15
 80028dc:	18bb      	adds	r3, r7, r2
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	18ba      	adds	r2, r7, r2
 80028e2:	1e59      	subs	r1, r3, #1
 80028e4:	7011      	strb	r1, [r2, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1ac      	bne.n	8002844 <DisplayInit+0x18>
        }
    }
}
 80028ea:	46c0      	nop			@ (mov r8, r8)
 80028ec:	46c0      	nop			@ (mov r8, r8)
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b005      	add	sp, #20
 80028f2:	bd90      	pop	{r4, r7, pc}

080028f4 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80028f4:	b5b0      	push	{r4, r5, r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	0005      	movs	r5, r0
 80028fc:	000c      	movs	r4, r1
 80028fe:	0010      	movs	r0, r2
 8002900:	0019      	movs	r1, r3
 8002902:	1dfb      	adds	r3, r7, #7
 8002904:	1c2a      	adds	r2, r5, #0
 8002906:	701a      	strb	r2, [r3, #0]
 8002908:	1dbb      	adds	r3, r7, #6
 800290a:	1c22      	adds	r2, r4, #0
 800290c:	701a      	strb	r2, [r3, #0]
 800290e:	1d7b      	adds	r3, r7, #5
 8002910:	1c02      	adds	r2, r0, #0
 8002912:	701a      	strb	r2, [r3, #0]
 8002914:	1d3b      	adds	r3, r7, #4
 8002916:	1c0a      	adds	r2, r1, #0
 8002918:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800291a:	202a      	movs	r0, #42	@ 0x2a
 800291c:	f7ff ff52 	bl	80027c4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8002920:	210c      	movs	r1, #12
 8002922:	187b      	adds	r3, r7, r1
 8002924:	2200      	movs	r2, #0
 8002926:	701a      	strb	r2, [r3, #0]
 8002928:	4b1c      	ldr	r3, [pc, #112]	@ (800299c <ST7735_SetAddressWindow+0xa8>)
 800292a:	781a      	ldrb	r2, [r3, #0]
 800292c:	1dfb      	adds	r3, r7, #7
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	18d3      	adds	r3, r2, r3
 8002932:	b2da      	uxtb	r2, r3
 8002934:	187b      	adds	r3, r7, r1
 8002936:	705a      	strb	r2, [r3, #1]
 8002938:	187b      	adds	r3, r7, r1
 800293a:	2200      	movs	r2, #0
 800293c:	709a      	strb	r2, [r3, #2]
 800293e:	4b17      	ldr	r3, [pc, #92]	@ (800299c <ST7735_SetAddressWindow+0xa8>)
 8002940:	781a      	ldrb	r2, [r3, #0]
 8002942:	1d7b      	adds	r3, r7, #5
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	18d3      	adds	r3, r2, r3
 8002948:	b2da      	uxtb	r2, r3
 800294a:	187b      	adds	r3, r7, r1
 800294c:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 800294e:	000c      	movs	r4, r1
 8002950:	187b      	adds	r3, r7, r1
 8002952:	2104      	movs	r1, #4
 8002954:	0018      	movs	r0, r3
 8002956:	f7ff ff4f 	bl	80027f8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800295a:	202b      	movs	r0, #43	@ 0x2b
 800295c:	f7ff ff32 	bl	80027c4 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8002960:	4b0f      	ldr	r3, [pc, #60]	@ (80029a0 <ST7735_SetAddressWindow+0xac>)
 8002962:	781a      	ldrb	r2, [r3, #0]
 8002964:	1dbb      	adds	r3, r7, #6
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	18d3      	adds	r3, r2, r3
 800296a:	b2da      	uxtb	r2, r3
 800296c:	0021      	movs	r1, r4
 800296e:	187b      	adds	r3, r7, r1
 8002970:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 8002972:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <ST7735_SetAddressWindow+0xac>)
 8002974:	781a      	ldrb	r2, [r3, #0]
 8002976:	1d3b      	adds	r3, r7, #4
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	18d3      	adds	r3, r2, r3
 800297c:	b2da      	uxtb	r2, r3
 800297e:	187b      	adds	r3, r7, r1
 8002980:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8002982:	187b      	adds	r3, r7, r1
 8002984:	2104      	movs	r1, #4
 8002986:	0018      	movs	r0, r3
 8002988:	f7ff ff36 	bl	80027f8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800298c:	202c      	movs	r0, #44	@ 0x2c
 800298e:	f7ff ff19 	bl	80027c4 <ST7735_WriteCommand>
}
 8002992:	46c0      	nop			@ (mov r8, r8)
 8002994:	46bd      	mov	sp, r7
 8002996:	b004      	add	sp, #16
 8002998:	bdb0      	pop	{r4, r5, r7, pc}
 800299a:	46c0      	nop			@ (mov r8, r8)
 800299c:	20000f03 	.word	0x20000f03
 80029a0:	20000f04 	.word	0x20000f04

080029a4 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	0002      	movs	r2, r0
 80029ac:	1dfb      	adds	r3, r7, #7
 80029ae:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 80029b0:	f7ff fed8 	bl	8002764 <ST7735_Select>
    ST7735_Reset();
 80029b4:	f7ff feee 	bl	8002794 <ST7735_Reset>
    DisplayInit(init_cmds1);
 80029b8:	4b0e      	ldr	r3, [pc, #56]	@ (80029f4 <ST7735_Init+0x50>)
 80029ba:	0018      	movs	r0, r3
 80029bc:	f7ff ff36 	bl	800282c <DisplayInit>
    DisplayInit(init_cmds2);
 80029c0:	4b0d      	ldr	r3, [pc, #52]	@ (80029f8 <ST7735_Init+0x54>)
 80029c2:	0018      	movs	r0, r3
 80029c4:	f7ff ff32 	bl	800282c <DisplayInit>
    DisplayInit(init_cmds3);
 80029c8:	4b0c      	ldr	r3, [pc, #48]	@ (80029fc <ST7735_Init+0x58>)
 80029ca:	0018      	movs	r0, r3
 80029cc:	f7ff ff2e 	bl	800282c <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 80029d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a00 <ST7735_Init+0x5c>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 80029d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002a04 <ST7735_Init+0x60>)
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 80029dc:	1dfb      	adds	r3, r7, #7
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	0018      	movs	r0, r3
 80029e2:	f000 f811 	bl	8002a08 <ST7735_SetRotation>
    ST7735_Unselect();
 80029e6:	f7ff fec9 	bl	800277c <ST7735_Unselect>

}
 80029ea:	46c0      	nop			@ (mov r8, r8)
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b002      	add	sp, #8
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	46c0      	nop			@ (mov r8, r8)
 80029f4:	08009f18 	.word	0x08009f18
 80029f8:	08009f50 	.word	0x08009f50
 80029fc:	08009f60 	.word	0x08009f60
 8002a00:	20000f01 	.word	0x20000f01
 8002a04:	20000f02 	.word	0x20000f02

08002a08 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	0002      	movs	r2, r0
 8002a10:	1dfb      	adds	r3, r7, #7
 8002a12:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8002a14:	230f      	movs	r3, #15
 8002a16:	18fb      	adds	r3, r7, r3
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8002a1c:	1dfb      	adds	r3, r7, #7
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2203      	movs	r2, #3
 8002a22:	4013      	ands	r3, r2
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	4b36      	ldr	r3, [pc, #216]	@ (8002b00 <ST7735_SetRotation+0xf8>)
 8002a28:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8002a2a:	4b35      	ldr	r3, [pc, #212]	@ (8002b00 <ST7735_SetRotation+0xf8>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d041      	beq.n	8002ab6 <ST7735_SetRotation+0xae>
 8002a32:	dc53      	bgt.n	8002adc <ST7735_SetRotation+0xd4>
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d02b      	beq.n	8002a90 <ST7735_SetRotation+0x88>
 8002a38:	dc50      	bgt.n	8002adc <ST7735_SetRotation+0xd4>
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <ST7735_SetRotation+0x3c>
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d013      	beq.n	8002a6a <ST7735_SetRotation+0x62>
 8002a42:	e04b      	b.n	8002adc <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8002a44:	230f      	movs	r3, #15
 8002a46:	18fb      	adds	r3, r7, r3
 8002a48:	22c0      	movs	r2, #192	@ 0xc0
 8002a4a:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8002a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b04 <ST7735_SetRotation+0xfc>)
 8002a4e:	22a0      	movs	r2, #160	@ 0xa0
 8002a50:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8002a52:	4b2d      	ldr	r3, [pc, #180]	@ (8002b08 <ST7735_SetRotation+0x100>)
 8002a54:	2280      	movs	r2, #128	@ 0x80
 8002a56:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8002a58:	4b2c      	ldr	r3, [pc, #176]	@ (8002b0c <ST7735_SetRotation+0x104>)
 8002a5a:	781a      	ldrb	r2, [r3, #0]
 8002a5c:	4b2c      	ldr	r3, [pc, #176]	@ (8002b10 <ST7735_SetRotation+0x108>)
 8002a5e:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8002a60:	4b2c      	ldr	r3, [pc, #176]	@ (8002b14 <ST7735_SetRotation+0x10c>)
 8002a62:	781a      	ldrb	r2, [r3, #0]
 8002a64:	4b2c      	ldr	r3, [pc, #176]	@ (8002b18 <ST7735_SetRotation+0x110>)
 8002a66:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8002a68:	e038      	b.n	8002adc <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8002a6a:	230f      	movs	r3, #15
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	22a0      	movs	r2, #160	@ 0xa0
 8002a70:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8002a72:	4b25      	ldr	r3, [pc, #148]	@ (8002b08 <ST7735_SetRotation+0x100>)
 8002a74:	22a0      	movs	r2, #160	@ 0xa0
 8002a76:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8002a78:	4b22      	ldr	r3, [pc, #136]	@ (8002b04 <ST7735_SetRotation+0xfc>)
 8002a7a:	2280      	movs	r2, #128	@ 0x80
 8002a7c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8002a7e:	4b23      	ldr	r3, [pc, #140]	@ (8002b0c <ST7735_SetRotation+0x104>)
 8002a80:	781a      	ldrb	r2, [r3, #0]
 8002a82:	4b25      	ldr	r3, [pc, #148]	@ (8002b18 <ST7735_SetRotation+0x110>)
 8002a84:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8002a86:	4b23      	ldr	r3, [pc, #140]	@ (8002b14 <ST7735_SetRotation+0x10c>)
 8002a88:	781a      	ldrb	r2, [r3, #0]
 8002a8a:	4b21      	ldr	r3, [pc, #132]	@ (8002b10 <ST7735_SetRotation+0x108>)
 8002a8c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8002a8e:	e025      	b.n	8002adc <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8002a90:	230f      	movs	r3, #15
 8002a92:	18fb      	adds	r3, r7, r3
 8002a94:	2200      	movs	r2, #0
 8002a96:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8002a98:	4b1a      	ldr	r3, [pc, #104]	@ (8002b04 <ST7735_SetRotation+0xfc>)
 8002a9a:	22a0      	movs	r2, #160	@ 0xa0
 8002a9c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8002a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b08 <ST7735_SetRotation+0x100>)
 8002aa0:	2280      	movs	r2, #128	@ 0x80
 8002aa2:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8002aa4:	4b19      	ldr	r3, [pc, #100]	@ (8002b0c <ST7735_SetRotation+0x104>)
 8002aa6:	781a      	ldrb	r2, [r3, #0]
 8002aa8:	4b19      	ldr	r3, [pc, #100]	@ (8002b10 <ST7735_SetRotation+0x108>)
 8002aaa:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8002aac:	4b19      	ldr	r3, [pc, #100]	@ (8002b14 <ST7735_SetRotation+0x10c>)
 8002aae:	781a      	ldrb	r2, [r3, #0]
 8002ab0:	4b19      	ldr	r3, [pc, #100]	@ (8002b18 <ST7735_SetRotation+0x110>)
 8002ab2:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8002ab4:	e012      	b.n	8002adc <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8002ab6:	230f      	movs	r3, #15
 8002ab8:	18fb      	adds	r3, r7, r3
 8002aba:	2260      	movs	r2, #96	@ 0x60
 8002abc:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8002abe:	4b12      	ldr	r3, [pc, #72]	@ (8002b08 <ST7735_SetRotation+0x100>)
 8002ac0:	22a0      	movs	r2, #160	@ 0xa0
 8002ac2:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8002ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b04 <ST7735_SetRotation+0xfc>)
 8002ac6:	2280      	movs	r2, #128	@ 0x80
 8002ac8:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8002aca:	4b10      	ldr	r3, [pc, #64]	@ (8002b0c <ST7735_SetRotation+0x104>)
 8002acc:	781a      	ldrb	r2, [r3, #0]
 8002ace:	4b12      	ldr	r3, [pc, #72]	@ (8002b18 <ST7735_SetRotation+0x110>)
 8002ad0:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8002ad2:	4b10      	ldr	r3, [pc, #64]	@ (8002b14 <ST7735_SetRotation+0x10c>)
 8002ad4:	781a      	ldrb	r2, [r3, #0]
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b10 <ST7735_SetRotation+0x108>)
 8002ad8:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8002ada:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 8002adc:	f7ff fe42 	bl	8002764 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8002ae0:	2036      	movs	r0, #54	@ 0x36
 8002ae2:	f7ff fe6f 	bl	80027c4 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8002ae6:	230f      	movs	r3, #15
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	2101      	movs	r1, #1
 8002aec:	0018      	movs	r0, r3
 8002aee:	f7ff fe83 	bl	80027f8 <ST7735_WriteData>
  ST7735_Unselect();
 8002af2:	f7ff fe43 	bl	800277c <ST7735_Unselect>
}
 8002af6:	46c0      	nop			@ (mov r8, r8)
 8002af8:	46bd      	mov	sp, r7
 8002afa:	b004      	add	sp, #16
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	46c0      	nop			@ (mov r8, r8)
 8002b00:	20000f00 	.word	0x20000f00
 8002b04:	20000efe 	.word	0x20000efe
 8002b08:	20000efc 	.word	0x20000efc
 8002b0c:	20000f01 	.word	0x20000f01
 8002b10:	20000f03 	.word	0x20000f03
 8002b14:	20000f02 	.word	0x20000f02
 8002b18:	20000f04 	.word	0x20000f04

08002b1c <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8002b1c:	b590      	push	{r4, r7, lr}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	0004      	movs	r4, r0
 8002b24:	0008      	movs	r0, r1
 8002b26:	0011      	movs	r1, r2
 8002b28:	1dbb      	adds	r3, r7, #6
 8002b2a:	1c22      	adds	r2, r4, #0
 8002b2c:	801a      	strh	r2, [r3, #0]
 8002b2e:	1d3b      	adds	r3, r7, #4
 8002b30:	1c02      	adds	r2, r0, #0
 8002b32:	801a      	strh	r2, [r3, #0]
 8002b34:	1cbb      	adds	r3, r7, #2
 8002b36:	1c0a      	adds	r2, r1, #0
 8002b38:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 8002b3a:	1dbb      	adds	r3, r7, #6
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	4a1c      	ldr	r2, [pc, #112]	@ (8002bb0 <ST7735_DrawPixel+0x94>)
 8002b40:	2100      	movs	r1, #0
 8002b42:	5e52      	ldrsh	r2, [r2, r1]
 8002b44:	4293      	cmp	r3, r2
 8002b46:	da2f      	bge.n	8002ba8 <ST7735_DrawPixel+0x8c>
 8002b48:	1d3b      	adds	r3, r7, #4
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	4a19      	ldr	r2, [pc, #100]	@ (8002bb4 <ST7735_DrawPixel+0x98>)
 8002b4e:	2100      	movs	r1, #0
 8002b50:	5e52      	ldrsh	r2, [r2, r1]
 8002b52:	4293      	cmp	r3, r2
 8002b54:	da28      	bge.n	8002ba8 <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 8002b56:	f7ff fe05 	bl	8002764 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8002b5a:	1dbb      	adds	r3, r7, #6
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	b2d8      	uxtb	r0, r3
 8002b60:	1d3b      	adds	r3, r7, #4
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	b2d9      	uxtb	r1, r3
 8002b66:	1dbb      	adds	r3, r7, #6
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	1d3b      	adds	r3, r7, #4
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	3301      	adds	r3, #1
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	f7ff febb 	bl	80028f4 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8002b7e:	1cbb      	adds	r3, r7, #2
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	0a1b      	lsrs	r3, r3, #8
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	210c      	movs	r1, #12
 8002b8a:	187b      	adds	r3, r7, r1
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	1cbb      	adds	r3, r7, #2
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	187b      	adds	r3, r7, r1
 8002b96:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 8002b98:	187b      	adds	r3, r7, r1
 8002b9a:	2102      	movs	r1, #2
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f7ff fe2b 	bl	80027f8 <ST7735_WriteData>

    ST7735_Unselect();
 8002ba2:	f7ff fdeb 	bl	800277c <ST7735_Unselect>
 8002ba6:	e000      	b.n	8002baa <ST7735_DrawPixel+0x8e>
        return;
 8002ba8:	46c0      	nop			@ (mov r8, r8)
}
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b005      	add	sp, #20
 8002bae:	bd90      	pop	{r4, r7, pc}
 8002bb0:	20000efc 	.word	0x20000efc
 8002bb4:	20000efe 	.word	0x20000efe

08002bb8 <ST7735_DrawImage>:
    }

    ST7735_Unselect();
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8002bb8:	b5b0      	push	{r4, r5, r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	0005      	movs	r5, r0
 8002bc0:	000c      	movs	r4, r1
 8002bc2:	0010      	movs	r0, r2
 8002bc4:	0019      	movs	r1, r3
 8002bc6:	1dbb      	adds	r3, r7, #6
 8002bc8:	1c2a      	adds	r2, r5, #0
 8002bca:	801a      	strh	r2, [r3, #0]
 8002bcc:	1d3b      	adds	r3, r7, #4
 8002bce:	1c22      	adds	r2, r4, #0
 8002bd0:	801a      	strh	r2, [r3, #0]
 8002bd2:	1cbb      	adds	r3, r7, #2
 8002bd4:	1c02      	adds	r2, r0, #0
 8002bd6:	801a      	strh	r2, [r3, #0]
 8002bd8:	003b      	movs	r3, r7
 8002bda:	1c0a      	adds	r2, r1, #0
 8002bdc:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8002bde:	1dbb      	adds	r3, r7, #6
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	4a2a      	ldr	r2, [pc, #168]	@ (8002c8c <ST7735_DrawImage+0xd4>)
 8002be4:	2100      	movs	r1, #0
 8002be6:	5e52      	ldrsh	r2, [r2, r1]
 8002be8:	4293      	cmp	r3, r2
 8002bea:	da47      	bge.n	8002c7c <ST7735_DrawImage+0xc4>
 8002bec:	1d3b      	adds	r3, r7, #4
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	4a27      	ldr	r2, [pc, #156]	@ (8002c90 <ST7735_DrawImage+0xd8>)
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	5e52      	ldrsh	r2, [r2, r1]
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	da40      	bge.n	8002c7c <ST7735_DrawImage+0xc4>
    if((x + w - 1) >= _width) return;
 8002bfa:	1dbb      	adds	r3, r7, #6
 8002bfc:	881a      	ldrh	r2, [r3, #0]
 8002bfe:	1cbb      	adds	r3, r7, #2
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	18d3      	adds	r3, r2, r3
 8002c04:	4a21      	ldr	r2, [pc, #132]	@ (8002c8c <ST7735_DrawImage+0xd4>)
 8002c06:	2100      	movs	r1, #0
 8002c08:	5e52      	ldrsh	r2, [r2, r1]
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	dc38      	bgt.n	8002c80 <ST7735_DrawImage+0xc8>
    if((y + h - 1) >= _height) return;
 8002c0e:	1d3b      	adds	r3, r7, #4
 8002c10:	881a      	ldrh	r2, [r3, #0]
 8002c12:	003b      	movs	r3, r7
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	18d3      	adds	r3, r2, r3
 8002c18:	4a1d      	ldr	r2, [pc, #116]	@ (8002c90 <ST7735_DrawImage+0xd8>)
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	5e52      	ldrsh	r2, [r2, r1]
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	dc30      	bgt.n	8002c84 <ST7735_DrawImage+0xcc>

    ST7735_Select();
 8002c22:	f7ff fd9f 	bl	8002764 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002c26:	1dbb      	adds	r3, r7, #6
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	b2d8      	uxtb	r0, r3
 8002c2c:	1d3b      	adds	r3, r7, #4
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	b2d9      	uxtb	r1, r3
 8002c32:	1dbb      	adds	r3, r7, #6
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	1cbb      	adds	r3, r7, #2
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	18d3      	adds	r3, r2, r3
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b2dc      	uxtb	r4, r3
 8002c46:	1d3b      	adds	r3, r7, #4
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	003b      	movs	r3, r7
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	18d3      	adds	r3, r2, r3
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	0022      	movs	r2, r4
 8002c5c:	f7ff fe4a 	bl	80028f4 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8002c60:	1cbb      	adds	r3, r7, #2
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	003a      	movs	r2, r7
 8002c66:	8812      	ldrh	r2, [r2, #0]
 8002c68:	4353      	muls	r3, r2
 8002c6a:	005a      	lsls	r2, r3, #1
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	0011      	movs	r1, r2
 8002c70:	0018      	movs	r0, r3
 8002c72:	f7ff fdc1 	bl	80027f8 <ST7735_WriteData>
    ST7735_Unselect();
 8002c76:	f7ff fd81 	bl	800277c <ST7735_Unselect>
 8002c7a:	e004      	b.n	8002c86 <ST7735_DrawImage+0xce>
    if((x >= _width) || (y >= _height)) return;
 8002c7c:	46c0      	nop			@ (mov r8, r8)
 8002c7e:	e002      	b.n	8002c86 <ST7735_DrawImage+0xce>
    if((x + w - 1) >= _width) return;
 8002c80:	46c0      	nop			@ (mov r8, r8)
 8002c82:	e000      	b.n	8002c86 <ST7735_DrawImage+0xce>
    if((y + h - 1) >= _height) return;
 8002c84:	46c0      	nop			@ (mov r8, r8)
}
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b002      	add	sp, #8
 8002c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c8c:	20000efc 	.word	0x20000efc
 8002c90:	20000efe 	.word	0x20000efe

08002c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c94:	b590      	push	{r4, r7, lr}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c9a:	f001 f9c9 	bl	8004030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c9e:	f000 fb2d 	bl	80032fc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  steps=0;
 8002ca2:	4be0      	ldr	r3, [pc, #896]	@ (8003024 <main+0x390>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
  sitting0.Body = *imgSitting0;
 8002ca8:	4bdf      	ldr	r3, [pc, #892]	@ (8003028 <main+0x394>)
 8002caa:	4ae0      	ldr	r2, [pc, #896]	@ (800302c <main+0x398>)
 8002cac:	601a      	str	r2, [r3, #0]
  sitting0.Size = 307;
 8002cae:	4bde      	ldr	r3, [pc, #888]	@ (8003028 <main+0x394>)
 8002cb0:	2234      	movs	r2, #52	@ 0x34
 8002cb2:	32ff      	adds	r2, #255	@ 0xff
 8002cb4:	605a      	str	r2, [r3, #4]
  sitting1.Body = *imgSitting1;
 8002cb6:	4bde      	ldr	r3, [pc, #888]	@ (8003030 <main+0x39c>)
 8002cb8:	4ade      	ldr	r2, [pc, #888]	@ (8003034 <main+0x3a0>)
 8002cba:	601a      	str	r2, [r3, #0]
  sitting1.Size = 305;
 8002cbc:	4bdc      	ldr	r3, [pc, #880]	@ (8003030 <main+0x39c>)
 8002cbe:	2232      	movs	r2, #50	@ 0x32
 8002cc0:	32ff      	adds	r2, #255	@ 0xff
 8002cc2:	605a      	str	r2, [r3, #4]
  animSitting[0] = sitting0;
 8002cc4:	4bdc      	ldr	r3, [pc, #880]	@ (8003038 <main+0x3a4>)
 8002cc6:	4ad8      	ldr	r2, [pc, #864]	@ (8003028 <main+0x394>)
 8002cc8:	ca03      	ldmia	r2!, {r0, r1}
 8002cca:	c303      	stmia	r3!, {r0, r1}
  animSitting[1] = sitting1;
 8002ccc:	4bda      	ldr	r3, [pc, #872]	@ (8003038 <main+0x3a4>)
 8002cce:	4ad8      	ldr	r2, [pc, #864]	@ (8003030 <main+0x39c>)
 8002cd0:	3308      	adds	r3, #8
 8002cd2:	ca03      	ldmia	r2!, {r0, r1}
 8002cd4:	c303      	stmia	r3!, {r0, r1}
  game.evo=0;
 8002cd6:	4bd9      	ldr	r3, [pc, #868]	@ (800303c <main+0x3a8>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	741a      	strb	r2, [r3, #16]
  game.uid[0]='h';
 8002cdc:	4ad7      	ldr	r2, [pc, #860]	@ (800303c <main+0x3a8>)
 8002cde:	2394      	movs	r3, #148	@ 0x94
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	2168      	movs	r1, #104	@ 0x68
 8002ce4:	54d1      	strb	r1, [r2, r3]
  game.uid[1]='i';
 8002ce6:	4ad5      	ldr	r2, [pc, #852]	@ (800303c <main+0x3a8>)
 8002ce8:	232a      	movs	r3, #42	@ 0x2a
 8002cea:	33ff      	adds	r3, #255	@ 0xff
 8002cec:	2169      	movs	r1, #105	@ 0x69
 8002cee:	54d1      	strb	r1, [r2, r3]
  game.allSteps=0;
 8002cf0:	4ad2      	ldr	r2, [pc, #840]	@ (800303c <main+0x3a8>)
 8002cf2:	238c      	movs	r3, #140	@ 0x8c
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	50d1      	str	r1, [r2, r3]
  game.mood=100;
 8002cfa:	4bd0      	ldr	r3, [pc, #832]	@ (800303c <main+0x3a8>)
 8002cfc:	2264      	movs	r2, #100	@ 0x64
 8002cfe:	745a      	strb	r2, [r3, #17]
  game.numLocations=3;
 8002d00:	4bce      	ldr	r3, [pc, #824]	@ (800303c <main+0x3a8>)
 8002d02:	2203      	movs	r2, #3
 8002d04:	615a      	str	r2, [r3, #20]
  game.stepsToday=0;
 8002d06:	4acd      	ldr	r2, [pc, #820]	@ (800303c <main+0x3a8>)
 8002d08:	2390      	movs	r3, #144	@ 0x90
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	50d1      	str	r1, [r2, r3]
  game.weeklySteps=0;
 8002d10:	4aca      	ldr	r2, [pc, #808]	@ (800303c <main+0x3a8>)
 8002d12:	238e      	movs	r3, #142	@ 0x8e
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	2100      	movs	r1, #0
 8002d18:	50d1      	str	r1, [r2, r3]
  game.challengeGoal=20000;
 8002d1a:	4ac8      	ldr	r2, [pc, #800]	@ (800303c <main+0x3a8>)
 8002d1c:	2392      	movs	r3, #146	@ 0x92
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	49c7      	ldr	r1, [pc, #796]	@ (8003040 <main+0x3ac>)
 8002d22:	50d1      	str	r1, [r2, r3]
  dummy.lat=12.34567;
 8002d24:	4bc7      	ldr	r3, [pc, #796]	@ (8003044 <main+0x3b0>)
 8002d26:	4ac8      	ldr	r2, [pc, #800]	@ (8003048 <main+0x3b4>)
 8002d28:	601a      	str	r2, [r3, #0]
  dummy.lon=-89.10111;
 8002d2a:	4bc6      	ldr	r3, [pc, #792]	@ (8003044 <main+0x3b0>)
 8002d2c:	4ac7      	ldr	r2, [pc, #796]	@ (800304c <main+0x3b8>)
 8002d2e:	605a      	str	r2, [r3, #4]
  game.positions[0]=dummy;
 8002d30:	4bc2      	ldr	r3, [pc, #776]	@ (800303c <main+0x3a8>)
 8002d32:	4ac4      	ldr	r2, [pc, #784]	@ (8003044 <main+0x3b0>)
 8002d34:	3318      	adds	r3, #24
 8002d36:	ca03      	ldmia	r2!, {r0, r1}
 8002d38:	c303      	stmia	r3!, {r0, r1}
  game.positions[1]=dummy;
 8002d3a:	4bc0      	ldr	r3, [pc, #768]	@ (800303c <main+0x3a8>)
 8002d3c:	4ac1      	ldr	r2, [pc, #772]	@ (8003044 <main+0x3b0>)
 8002d3e:	3320      	adds	r3, #32
 8002d40:	ca03      	ldmia	r2!, {r0, r1}
 8002d42:	c303      	stmia	r3!, {r0, r1}
  game.positions[2]=dummy;
 8002d44:	4bbd      	ldr	r3, [pc, #756]	@ (800303c <main+0x3a8>)
 8002d46:	4abf      	ldr	r2, [pc, #764]	@ (8003044 <main+0x3b0>)
 8002d48:	3328      	adds	r3, #40	@ 0x28
 8002d4a:	ca03      	ldmia	r2!, {r0, r1}
 8002d4c:	c303      	stmia	r3!, {r0, r1}
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d4e:	f000 fcdb 	bl	8003708 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002d52:	f000 fb35 	bl	80033c0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002d56:	f000 fb73 	bl	8003440 <MX_SPI1_Init>
  MX_TIM17_Init();
 8002d5a:	f000 fbb1 	bl	80034c0 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8002d5e:	f000 fc37 	bl	80035d0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002d62:	f000 fc83 	bl	800366c <MX_USART2_UART_Init>
  //MX_RTC_Init();
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
  ST7735_Unselect();
 8002d66:	f7ff fd09 	bl	800277c <ST7735_Unselect>
  ST7735_Init(1);
 8002d6a:	2001      	movs	r0, #1
 8002d6c:	f7ff fe1a 	bl	80029a4 <ST7735_Init>
  //testAll();
  buffer[0] = 'A';
 8002d70:	4bb7      	ldr	r3, [pc, #732]	@ (8003050 <main+0x3bc>)
 8002d72:	2241      	movs	r2, #65	@ 0x41
 8002d74:	701a      	strb	r2, [r3, #0]
  buffer[1] = 'B';
 8002d76:	4bb6      	ldr	r3, [pc, #728]	@ (8003050 <main+0x3bc>)
 8002d78:	2242      	movs	r2, #66	@ 0x42
 8002d7a:	705a      	strb	r2, [r3, #1]
  TIM17->CCR1 = 5;
 8002d7c:	4bb5      	ldr	r3, [pc, #724]	@ (8003054 <main+0x3c0>)
 8002d7e:	2205      	movs	r2, #5
 8002d80:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM17->PSC=64;
 8002d82:	4bb4      	ldr	r3, [pc, #720]	@ (8003054 <main+0x3c0>)
 8002d84:	2240      	movs	r2, #64	@ 0x40
 8002d86:	629a      	str	r2, [r3, #40]	@ 0x28
  uint8_t ret=0;
 8002d88:	1dfb      	adds	r3, r7, #7
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	701a      	strb	r2, [r3, #0]
    //_ADXL343_Init();

      //Pedometer Setup
      _ADXL343_WriteReg8(0x19, 0x02);
 8002d8e:	2102      	movs	r1, #2
 8002d90:	2019      	movs	r0, #25
 8002d92:	f000 fd91 	bl	80038b8 <_ADXL343_WriteReg8>
      ////wait

      _ADXL343_WriteReg8(0x7C, 0x01);
 8002d96:	2101      	movs	r1, #1
 8002d98:	207c      	movs	r0, #124	@ 0x7c
 8002d9a:	f000 fd8d 	bl	80038b8 <_ADXL343_WriteReg8>
       _ADXL343_WriteReg8(0x1A, 0x38);
 8002d9e:	2138      	movs	r1, #56	@ 0x38
 8002da0:	201a      	movs	r0, #26
 8002da2:	f000 fd89 	bl	80038b8 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1B, 0x04);
 8002da6:	2104      	movs	r1, #4
 8002da8:	201b      	movs	r0, #27
 8002daa:	f000 fd85 	bl	80038b8 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1F, 0x80);
 8002dae:	2180      	movs	r1, #128	@ 0x80
 8002db0:	201f      	movs	r0, #31
 8002db2:	f000 fd81 	bl	80038b8 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x21, 0x80);
 8002db6:	2180      	movs	r1, #128	@ 0x80
 8002db8:	2021      	movs	r0, #33	@ 0x21
 8002dba:	f000 fd7d 	bl	80038b8 <_ADXL343_WriteReg8>



      //  //Step Counter
      _ADXL343_WriteReg8(0x18, 0x01); // enable walking mode
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	2018      	movs	r0, #24
 8002dc2:	f000 fd79 	bl	80038b8 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x20, 0x01); // enable step interrupt
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	2020      	movs	r0, #32
 8002dca:	f000 fd75 	bl	80038b8 <_ADXL343_WriteReg8>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
      //Before entering the while, fill the screen to clear it once
      fillScreen(BLACK);
 8002dce:	2000      	movs	r0, #0
 8002dd0:	f7ff fb8e 	bl	80024f0 <fillScreen>
  while (1)
  {
	  SendData();
 8002dd4:	f000 fd96 	bl	8003904 <SendData>
	  if((game.time.hours%dayLength)==0) game.stepsToday=0;
 8002dd8:	4b98      	ldr	r3, [pc, #608]	@ (800303c <main+0x3a8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2218      	movs	r2, #24
 8002dde:	0011      	movs	r1, r2
 8002de0:	0018      	movs	r0, r3
 8002de2:	f7fd fb11 	bl	8000408 <__aeabi_idivmod>
 8002de6:	1e0b      	subs	r3, r1, #0
 8002de8:	d104      	bne.n	8002df4 <main+0x160>
 8002dea:	4a94      	ldr	r2, [pc, #592]	@ (800303c <main+0x3a8>)
 8002dec:	2390      	movs	r3, #144	@ 0x90
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	2100      	movs	r1, #0
 8002df2:	50d1      	str	r1, [r2, r3]
	  if((game.time.hours%weekLength)==0) game.weeklySteps=0;
 8002df4:	4b91      	ldr	r3, [pc, #580]	@ (800303c <main+0x3a8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	22a8      	movs	r2, #168	@ 0xa8
 8002dfa:	0011      	movs	r1, r2
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f7fd fb03 	bl	8000408 <__aeabi_idivmod>
 8002e02:	1e0b      	subs	r3, r1, #0
 8002e04:	d104      	bne.n	8002e10 <main+0x17c>
 8002e06:	4a8d      	ldr	r2, [pc, #564]	@ (800303c <main+0x3a8>)
 8002e08:	238e      	movs	r3, #142	@ 0x8e
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	50d1      	str	r1, [r2, r3]
	  game.stepsToday +=steps-game.allSteps;
 8002e10:	4a8a      	ldr	r2, [pc, #552]	@ (800303c <main+0x3a8>)
 8002e12:	2390      	movs	r3, #144	@ 0x90
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	58d2      	ldr	r2, [r2, r3]
 8002e18:	4b82      	ldr	r3, [pc, #520]	@ (8003024 <main+0x390>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	4987      	ldr	r1, [pc, #540]	@ (800303c <main+0x3a8>)
 8002e20:	238c      	movs	r3, #140	@ 0x8c
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	58cb      	ldr	r3, [r1, r3]
 8002e26:	1ac3      	subs	r3, r0, r3
 8002e28:	18d1      	adds	r1, r2, r3
 8002e2a:	4a84      	ldr	r2, [pc, #528]	@ (800303c <main+0x3a8>)
 8002e2c:	2390      	movs	r3, #144	@ 0x90
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	50d1      	str	r1, [r2, r3]
	  game.weeklySteps+=steps-game.allSteps;
 8002e32:	4a82      	ldr	r2, [pc, #520]	@ (800303c <main+0x3a8>)
 8002e34:	238e      	movs	r3, #142	@ 0x8e
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	58d2      	ldr	r2, [r2, r3]
 8002e3a:	4b7a      	ldr	r3, [pc, #488]	@ (8003024 <main+0x390>)
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	0018      	movs	r0, r3
 8002e40:	497e      	ldr	r1, [pc, #504]	@ (800303c <main+0x3a8>)
 8002e42:	238c      	movs	r3, #140	@ 0x8c
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	58cb      	ldr	r3, [r1, r3]
 8002e48:	1ac3      	subs	r3, r0, r3
 8002e4a:	18d1      	adds	r1, r2, r3
 8002e4c:	4a7b      	ldr	r2, [pc, #492]	@ (800303c <main+0x3a8>)
 8002e4e:	238e      	movs	r3, #142	@ 0x8e
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	50d1      	str	r1, [r2, r3]
	  game.allSteps=steps;
 8002e54:	4b73      	ldr	r3, [pc, #460]	@ (8003024 <main+0x390>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	0019      	movs	r1, r3
 8002e5a:	4a78      	ldr	r2, [pc, #480]	@ (800303c <main+0x3a8>)
 8002e5c:	238c      	movs	r3, #140	@ 0x8c
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	50d1      	str	r1, [r2, r3]
	  //SendData();
	  //HAL_UART_Transmit(&huart2, "hello", 5, 100);
	  switch(currentMenu){
 8002e62:	4b7d      	ldr	r3, [pc, #500]	@ (8003058 <main+0x3c4>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d100      	bne.n	8002e6c <main+0x1d8>
 8002e6a:	e14c      	b.n	8003106 <main+0x472>
 8002e6c:	dcb2      	bgt.n	8002dd4 <main+0x140>
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d100      	bne.n	8002e74 <main+0x1e0>
 8002e72:	e105      	b.n	8003080 <main+0x3ec>
 8002e74:	dcae      	bgt.n	8002dd4 <main+0x140>
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d060      	beq.n	8002f3c <main+0x2a8>
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d1aa      	bne.n	8002dd4 <main+0x140>
	  case Main:


		  if((++updateScreen)>=5)
 8002e7e:	4b77      	ldr	r3, [pc, #476]	@ (800305c <main+0x3c8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	4b75      	ldr	r3, [pc, #468]	@ (800305c <main+0x3c8>)
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	4b74      	ldr	r3, [pc, #464]	@ (800305c <main+0x3c8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d922      	bls.n	8002ed6 <main+0x242>
		  {
			  //Animate character
			  Animate(animSitting,1);
 8002e90:	4b69      	ldr	r3, [pc, #420]	@ (8003038 <main+0x3a4>)
 8002e92:	2101      	movs	r1, #1
 8002e94:	0018      	movs	r0, r3
 8002e96:	f000 fcab 	bl	80037f0 <Animate>
			  updateScreen = 0;
 8002e9a:	4b70      	ldr	r3, [pc, #448]	@ (800305c <main+0x3c8>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
			  //Update steps
			  _ADXL343_ReadReg8(0x15, &steps, 1);
 8002ea0:	4b60      	ldr	r3, [pc, #384]	@ (8003024 <main+0x390>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	2015      	movs	r0, #21
 8002ea8:	f000 fcd4 	bl	8003854 <_ADXL343_ReadReg8>
			  sprintf(buffer2, "Steps today: %d ", steps);
 8002eac:	4b5d      	ldr	r3, [pc, #372]	@ (8003024 <main+0x390>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	001a      	movs	r2, r3
 8002eb2:	496b      	ldr	r1, [pc, #428]	@ (8003060 <main+0x3cc>)
 8002eb4:	4b6b      	ldr	r3, [pc, #428]	@ (8003064 <main+0x3d0>)
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f005 fede 	bl	8008c78 <siprintf>
			  drawString(0, 20, buffer2, WHITE, BLACK, 1, 1);
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	425b      	negs	r3, r3
 8002ec0:	4a68      	ldr	r2, [pc, #416]	@ (8003064 <main+0x3d0>)
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	9102      	str	r1, [sp, #8]
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	9101      	str	r1, [sp, #4]
 8002eca:	2100      	movs	r1, #0
 8002ecc:	9100      	str	r1, [sp, #0]
 8002ece:	2114      	movs	r1, #20
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f7ff f99d 	bl	8002210 <drawString>
		  }


		  //Change current Menu
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET ) {
 8002ed6:	2380      	movs	r3, #128	@ 0x80
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	23a0      	movs	r3, #160	@ 0xa0
 8002edc:	05db      	lsls	r3, r3, #23
 8002ede:	0011      	movs	r1, r2
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f001 fb85 	bl	80045f0 <HAL_GPIO_ReadPin>
 8002ee6:	0003      	movs	r3, r0
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d10e      	bne.n	8002f0a <main+0x276>
			  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8002eec:	4b5e      	ldr	r3, [pc, #376]	@ (8003068 <main+0x3d4>)
 8002eee:	2100      	movs	r1, #0
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f004 f88b 	bl	800700c <HAL_TIM_PWM_Start>
			  currentMenu = MusicTest;
 8002ef6:	4b58      	ldr	r3, [pc, #352]	@ (8003058 <main+0x3c4>)
 8002ef8:	2202      	movs	r2, #2
 8002efa:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8002efc:	4b5b      	ldr	r3, [pc, #364]	@ (800306c <main+0x3d8>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 8002f02:	2000      	movs	r0, #0
 8002f04:	f7ff faf4 	bl	80024f0 <fillScreen>
		  }
		  else
			  canChange = 1;


		  break;
 8002f08:	e1c8      	b.n	800329c <main+0x608>
		  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET ) {
 8002f0a:	2380      	movs	r3, #128	@ 0x80
 8002f0c:	011a      	lsls	r2, r3, #4
 8002f0e:	23a0      	movs	r3, #160	@ 0xa0
 8002f10:	05db      	lsls	r3, r3, #23
 8002f12:	0011      	movs	r1, r2
 8002f14:	0018      	movs	r0, r3
 8002f16:	f001 fb6b 	bl	80045f0 <HAL_GPIO_ReadPin>
 8002f1a:	0003      	movs	r3, r0
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d109      	bne.n	8002f34 <main+0x2a0>
			  currentMenu = StatsDisplay;
 8002f20:	4b4d      	ldr	r3, [pc, #308]	@ (8003058 <main+0x3c4>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8002f26:	4b51      	ldr	r3, [pc, #324]	@ (800306c <main+0x3d8>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f7ff fadf 	bl	80024f0 <fillScreen>
		  break;
 8002f32:	e1b3      	b.n	800329c <main+0x608>
			  canChange = 1;
 8002f34:	4b4d      	ldr	r3, [pc, #308]	@ (800306c <main+0x3d8>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]
		  break;
 8002f3a:	e1af      	b.n	800329c <main+0x608>
	  case StatsDisplay:

		  if((++updateScreen)>=5)
 8002f3c:	4b47      	ldr	r3, [pc, #284]	@ (800305c <main+0x3c8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	4b46      	ldr	r3, [pc, #280]	@ (800305c <main+0x3c8>)
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	4b45      	ldr	r3, [pc, #276]	@ (800305c <main+0x3c8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d951      	bls.n	8002ff2 <main+0x35e>
		  {
			  //fillScreen(BLACK);

			  drawString(0, 120, "STEPS", WHITE, BLACK, 1, 1);
 8002f4e:	2301      	movs	r3, #1
 8002f50:	425b      	negs	r3, r3
 8002f52:	4a47      	ldr	r2, [pc, #284]	@ (8003070 <main+0x3dc>)
 8002f54:	2101      	movs	r1, #1
 8002f56:	9102      	str	r1, [sp, #8]
 8002f58:	2101      	movs	r1, #1
 8002f5a:	9101      	str	r1, [sp, #4]
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	9100      	str	r1, [sp, #0]
 8002f60:	2178      	movs	r1, #120	@ 0x78
 8002f62:	2000      	movs	r0, #0
 8002f64:	f7ff f954 	bl	8002210 <drawString>
			  sprintf(buffer2, "Today: %d ", game.stepsToday);
 8002f68:	4a34      	ldr	r2, [pc, #208]	@ (800303c <main+0x3a8>)
 8002f6a:	2390      	movs	r3, #144	@ 0x90
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	58d2      	ldr	r2, [r2, r3]
 8002f70:	4940      	ldr	r1, [pc, #256]	@ (8003074 <main+0x3e0>)
 8002f72:	4b3c      	ldr	r3, [pc, #240]	@ (8003064 <main+0x3d0>)
 8002f74:	0018      	movs	r0, r3
 8002f76:	f005 fe7f 	bl	8008c78 <siprintf>
			  drawString(0, 110, buffer2, WHITE, BLACK, 1, 1);
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	425b      	negs	r3, r3
 8002f7e:	4a39      	ldr	r2, [pc, #228]	@ (8003064 <main+0x3d0>)
 8002f80:	2101      	movs	r1, #1
 8002f82:	9102      	str	r1, [sp, #8]
 8002f84:	2101      	movs	r1, #1
 8002f86:	9101      	str	r1, [sp, #4]
 8002f88:	2100      	movs	r1, #0
 8002f8a:	9100      	str	r1, [sp, #0]
 8002f8c:	216e      	movs	r1, #110	@ 0x6e
 8002f8e:	2000      	movs	r0, #0
 8002f90:	f7ff f93e 	bl	8002210 <drawString>
			  sprintf(buffer2, "This week: %d ", game.weeklySteps);
 8002f94:	4a29      	ldr	r2, [pc, #164]	@ (800303c <main+0x3a8>)
 8002f96:	238e      	movs	r3, #142	@ 0x8e
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	58d2      	ldr	r2, [r2, r3]
 8002f9c:	4936      	ldr	r1, [pc, #216]	@ (8003078 <main+0x3e4>)
 8002f9e:	4b31      	ldr	r3, [pc, #196]	@ (8003064 <main+0x3d0>)
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f005 fe69 	bl	8008c78 <siprintf>
			  drawString(0, 100, buffer2, WHITE, BLACK, 1, 1);
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	425b      	negs	r3, r3
 8002faa:	4a2e      	ldr	r2, [pc, #184]	@ (8003064 <main+0x3d0>)
 8002fac:	2101      	movs	r1, #1
 8002fae:	9102      	str	r1, [sp, #8]
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	9101      	str	r1, [sp, #4]
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	9100      	str	r1, [sp, #0]
 8002fb8:	2164      	movs	r1, #100	@ 0x64
 8002fba:	2000      	movs	r0, #0
 8002fbc:	f7ff f928 	bl	8002210 <drawString>
			  sprintf(buffer2, "All time: %d ", game.allSteps);
 8002fc0:	4a1e      	ldr	r2, [pc, #120]	@ (800303c <main+0x3a8>)
 8002fc2:	238c      	movs	r3, #140	@ 0x8c
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	58d2      	ldr	r2, [r2, r3]
 8002fc8:	492c      	ldr	r1, [pc, #176]	@ (800307c <main+0x3e8>)
 8002fca:	4b26      	ldr	r3, [pc, #152]	@ (8003064 <main+0x3d0>)
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f005 fe53 	bl	8008c78 <siprintf>
			  drawString(0, 90, buffer2, WHITE, BLACK, 1, 1);
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	425b      	negs	r3, r3
 8002fd6:	4a23      	ldr	r2, [pc, #140]	@ (8003064 <main+0x3d0>)
 8002fd8:	2101      	movs	r1, #1
 8002fda:	9102      	str	r1, [sp, #8]
 8002fdc:	2101      	movs	r1, #1
 8002fde:	9101      	str	r1, [sp, #4]
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	9100      	str	r1, [sp, #0]
 8002fe4:	215a      	movs	r1, #90	@ 0x5a
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f7ff f912 	bl	8002210 <drawString>

			  //drawString(0, 70, "PET", WHITE, BLACK, 1, 1);
			  updateScreen = 0;
 8002fec:	4b1b      	ldr	r3, [pc, #108]	@ (800305c <main+0x3c8>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]
		  }
	  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET ){
 8002ff2:	2380      	movs	r3, #128	@ 0x80
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	23a0      	movs	r3, #160	@ 0xa0
 8002ff8:	05db      	lsls	r3, r3, #23
 8002ffa:	0011      	movs	r1, r2
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	f001 faf7 	bl	80045f0 <HAL_GPIO_ReadPin>
 8003002:	0003      	movs	r3, r0
 8003004:	2b01      	cmp	r3, #1
 8003006:	d109      	bne.n	800301c <main+0x388>
	  		currentMenu = Main;
 8003008:	4b13      	ldr	r3, [pc, #76]	@ (8003058 <main+0x3c4>)
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]
	  		canChange = 0;
 800300e:	4b17      	ldr	r3, [pc, #92]	@ (800306c <main+0x3d8>)
 8003010:	2200      	movs	r2, #0
 8003012:	701a      	strb	r2, [r3, #0]
	  		fillScreen(BLACK);
 8003014:	2000      	movs	r0, #0
 8003016:	f7ff fa6b 	bl	80024f0 <fillScreen>
	  	  }
	  	  else
	  	      canChange = 1;

	  	  break;
 800301a:	e13f      	b.n	800329c <main+0x608>
	  	      canChange = 1;
 800301c:	4b13      	ldr	r3, [pc, #76]	@ (800306c <main+0x3d8>)
 800301e:	2201      	movs	r2, #1
 8003020:	701a      	strb	r2, [r3, #0]
	  	  break;
 8003022:	e13b      	b.n	800329c <main+0x608>
 8003024:	2000130b 	.word	0x2000130b
 8003028:	20001270 	.word	0x20001270
 800302c:	200004a0 	.word	0x200004a0
 8003030:	20001278 	.word	0x20001278
 8003034:	2000096c 	.word	0x2000096c
 8003038:	20001280 	.word	0x20001280
 800303c:	20000f08 	.word	0x20000f08
 8003040:	00004e20 	.word	0x00004e20
 8003044:	20001050 	.word	0x20001050
 8003048:	414587dd 	.word	0x414587dd
 800304c:	c2b233c5 	.word	0xc2b233c5
 8003050:	2000105c 	.word	0x2000105c
 8003054:	40014800 	.word	0x40014800
 8003058:	20000e80 	.word	0x20000e80
 800305c:	2000126c 	.word	0x2000126c
 8003060:	08009850 	.word	0x08009850
 8003064:	200012a4 	.word	0x200012a4
 8003068:	200013f0 	.word	0x200013f0
 800306c:	20000e81 	.word	0x20000e81
 8003070:	08009864 	.word	0x08009864
 8003074:	0800986c 	.word	0x0800986c
 8003078:	08009878 	.word	0x08009878
 800307c:	08009888 	.word	0x08009888
	  case MusicTest:
		  //fillScreen(BLUE);

		  freq = freqs[(toneIndex++)%8];
 8003080:	4b87      	ldr	r3, [pc, #540]	@ (80032a0 <main+0x60c>)
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	b29b      	uxth	r3, r3
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	b291      	uxth	r1, r2
 800308a:	4a85      	ldr	r2, [pc, #532]	@ (80032a0 <main+0x60c>)
 800308c:	8011      	strh	r1, [r2, #0]
 800308e:	001a      	movs	r2, r3
 8003090:	2307      	movs	r3, #7
 8003092:	4013      	ands	r3, r2
 8003094:	4a83      	ldr	r2, [pc, #524]	@ (80032a4 <main+0x610>)
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	18d3      	adds	r3, r2, r3
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4982      	ldr	r1, [pc, #520]	@ (80032a8 <main+0x614>)
 80030a0:	600a      	str	r2, [r1, #0]
 80030a2:	604b      	str	r3, [r1, #4]
		  TIM17->ARR=(uint32_t)(987*(float)1000/(float)freq);
 80030a4:	4b80      	ldr	r3, [pc, #512]	@ (80032a8 <main+0x614>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	0010      	movs	r0, r2
 80030ac:	0019      	movs	r1, r3
 80030ae:	f7fe fe53 	bl	8001d58 <__aeabi_d2f>
 80030b2:	1c03      	adds	r3, r0, #0
 80030b4:	1c19      	adds	r1, r3, #0
 80030b6:	487d      	ldr	r0, [pc, #500]	@ (80032ac <main+0x618>)
 80030b8:	f7fd faee 	bl	8000698 <__aeabi_fdiv>
 80030bc:	1c03      	adds	r3, r0, #0
 80030be:	4c7c      	ldr	r4, [pc, #496]	@ (80032b0 <main+0x61c>)
 80030c0:	1c18      	adds	r0, r3, #0
 80030c2:	f7fd fa05 	bl	80004d0 <__aeabi_f2uiz>
 80030c6:	0003      	movs	r3, r0
 80030c8:	62e3      	str	r3, [r4, #44]	@ 0x2c

		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET) {
 80030ca:	2380      	movs	r3, #128	@ 0x80
 80030cc:	011a      	lsls	r2, r3, #4
 80030ce:	23a0      	movs	r3, #160	@ 0xa0
 80030d0:	05db      	lsls	r3, r3, #23
 80030d2:	0011      	movs	r1, r2
 80030d4:	0018      	movs	r0, r3
 80030d6:	f001 fa8b 	bl	80045f0 <HAL_GPIO_ReadPin>
 80030da:	0003      	movs	r3, r0
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d10e      	bne.n	80030fe <main+0x46a>
			  currentMenu = Main;
 80030e0:	4b74      	ldr	r3, [pc, #464]	@ (80032b4 <main+0x620>)
 80030e2:	2201      	movs	r2, #1
 80030e4:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 80030e6:	4b74      	ldr	r3, [pc, #464]	@ (80032b8 <main+0x624>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 80030ec:	4b73      	ldr	r3, [pc, #460]	@ (80032bc <main+0x628>)
 80030ee:	2100      	movs	r1, #0
 80030f0:	0018      	movs	r0, r3
 80030f2:	f004 f87b 	bl	80071ec <HAL_TIM_PWM_Stop>
			  fillScreen(BLACK);
 80030f6:	2000      	movs	r0, #0
 80030f8:	f7ff f9fa 	bl	80024f0 <fillScreen>
		  }
		  else
			  canChange = 1;

		  break;
 80030fc:	e0ce      	b.n	800329c <main+0x608>
			  canChange = 1;
 80030fe:	4b6e      	ldr	r3, [pc, #440]	@ (80032b8 <main+0x624>)
 8003100:	2201      	movs	r2, #1
 8003102:	701a      	strb	r2, [r3, #0]
		  break;
 8003104:	e0ca      	b.n	800329c <main+0x608>
	  case ConnorDemo:
		  	  steps=0;
 8003106:	4b6e      	ldr	r3, [pc, #440]	@ (80032c0 <main+0x62c>)
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]

		  	  if((whileI++)%3==0)
 800310c:	4b6d      	ldr	r3, [pc, #436]	@ (80032c4 <main+0x630>)
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	b29b      	uxth	r3, r3
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	b291      	uxth	r1, r2
 8003116:	4a6b      	ldr	r2, [pc, #428]	@ (80032c4 <main+0x630>)
 8003118:	8011      	strh	r1, [r2, #0]
 800311a:	2103      	movs	r1, #3
 800311c:	0018      	movs	r0, r3
 800311e:	f7fd f889 	bl	8000234 <__aeabi_uidivmod>
 8003122:	000b      	movs	r3, r1
 8003124:	b29b      	uxth	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10f      	bne.n	800314a <main+0x4b6>
		  		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET)
 800312a:	4b67      	ldr	r3, [pc, #412]	@ (80032c8 <main+0x634>)
 800312c:	2102      	movs	r1, #2
 800312e:	0018      	movs	r0, r3
 8003130:	f001 fa5e 	bl	80045f0 <HAL_GPIO_ReadPin>
 8003134:	0003      	movs	r3, r0
 8003136:	2b01      	cmp	r3, #1
 8003138:	d104      	bne.n	8003144 <main+0x4b0>
		  		  		  fillScreen(WHITE);
 800313a:	4b64      	ldr	r3, [pc, #400]	@ (80032cc <main+0x638>)
 800313c:	0018      	movs	r0, r3
 800313e:	f7ff f9d7 	bl	80024f0 <fillScreen>
 8003142:	e002      	b.n	800314a <main+0x4b6>
		  		  	  else
		  		  		  fillScreen(BLACK);
 8003144:	2000      	movs	r0, #0
 8003146:	f7ff f9d3 	bl	80024f0 <fillScreen>
		  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET)
 800314a:	2380      	movs	r3, #128	@ 0x80
 800314c:	011a      	lsls	r2, r3, #4
 800314e:	23a0      	movs	r3, #160	@ 0xa0
 8003150:	05db      	lsls	r3, r3, #23
 8003152:	0011      	movs	r1, r2
 8003154:	0018      	movs	r0, r3
 8003156:	f001 fa4b 	bl	80045f0 <HAL_GPIO_ReadPin>
 800315a:	0003      	movs	r3, r0
 800315c:	2b01      	cmp	r3, #1
 800315e:	d106      	bne.n	800316e <main+0x4da>
		  		  petXPos-=5;
 8003160:	4b5b      	ldr	r3, [pc, #364]	@ (80032d0 <main+0x63c>)
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b05      	subs	r3, #5
 8003168:	b29a      	uxth	r2, r3
 800316a:	4b59      	ldr	r3, [pc, #356]	@ (80032d0 <main+0x63c>)
 800316c:	801a      	strh	r2, [r3, #0]
		  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET)
 800316e:	2380      	movs	r3, #128	@ 0x80
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	23a0      	movs	r3, #160	@ 0xa0
 8003174:	05db      	lsls	r3, r3, #23
 8003176:	0011      	movs	r1, r2
 8003178:	0018      	movs	r0, r3
 800317a:	f001 fa39 	bl	80045f0 <HAL_GPIO_ReadPin>
 800317e:	0003      	movs	r3, r0
 8003180:	2b01      	cmp	r3, #1
 8003182:	d106      	bne.n	8003192 <main+0x4fe>
		  		  petXPos+=5;
 8003184:	4b52      	ldr	r3, [pc, #328]	@ (80032d0 <main+0x63c>)
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	b29b      	uxth	r3, r3
 800318a:	3305      	adds	r3, #5
 800318c:	b29a      	uxth	r2, r3
 800318e:	4b50      	ldr	r3, [pc, #320]	@ (80032d0 <main+0x63c>)
 8003190:	801a      	strh	r2, [r3, #0]
		  	  if(petXPos<3)petXPos=0;
 8003192:	4b4f      	ldr	r3, [pc, #316]	@ (80032d0 <main+0x63c>)
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	b29b      	uxth	r3, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d802      	bhi.n	80031a2 <main+0x50e>
 800319c:	4b4c      	ldr	r3, [pc, #304]	@ (80032d0 <main+0x63c>)
 800319e:	2200      	movs	r2, #0
 80031a0:	801a      	strh	r2, [r3, #0]
		  	  if(petXPos>60) petXPos=60;
 80031a2:	4b4b      	ldr	r3, [pc, #300]	@ (80032d0 <main+0x63c>)
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b3c      	cmp	r3, #60	@ 0x3c
 80031aa:	d902      	bls.n	80031b2 <main+0x51e>
 80031ac:	4b48      	ldr	r3, [pc, #288]	@ (80032d0 <main+0x63c>)
 80031ae:	223c      	movs	r2, #60	@ 0x3c
 80031b0:	801a      	strh	r2, [r3, #0]
		  	  freq = freqs[(toneIndex++)%8];
 80031b2:	4b3b      	ldr	r3, [pc, #236]	@ (80032a0 <main+0x60c>)
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	1c5a      	adds	r2, r3, #1
 80031ba:	b291      	uxth	r1, r2
 80031bc:	4a38      	ldr	r2, [pc, #224]	@ (80032a0 <main+0x60c>)
 80031be:	8011      	strh	r1, [r2, #0]
 80031c0:	001a      	movs	r2, r3
 80031c2:	2307      	movs	r3, #7
 80031c4:	4013      	ands	r3, r2
 80031c6:	4a37      	ldr	r2, [pc, #220]	@ (80032a4 <main+0x610>)
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	18d3      	adds	r3, r2, r3
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	4935      	ldr	r1, [pc, #212]	@ (80032a8 <main+0x614>)
 80031d2:	600a      	str	r2, [r1, #0]
 80031d4:	604b      	str	r3, [r1, #4]
		  	  TIM17->ARR=(uint32_t)(987*(float)1000/(float)freq);
 80031d6:	4b34      	ldr	r3, [pc, #208]	@ (80032a8 <main+0x614>)
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	0010      	movs	r0, r2
 80031de:	0019      	movs	r1, r3
 80031e0:	f7fe fdba 	bl	8001d58 <__aeabi_d2f>
 80031e4:	1c03      	adds	r3, r0, #0
 80031e6:	1c19      	adds	r1, r3, #0
 80031e8:	4830      	ldr	r0, [pc, #192]	@ (80032ac <main+0x618>)
 80031ea:	f7fd fa55 	bl	8000698 <__aeabi_fdiv>
 80031ee:	1c03      	adds	r3, r0, #0
 80031f0:	4c2f      	ldr	r4, [pc, #188]	@ (80032b0 <main+0x61c>)
 80031f2:	1c18      	adds	r0, r3, #0
 80031f4:	f7fd f96c 	bl	80004d0 <__aeabi_f2uiz>
 80031f8:	0003      	movs	r3, r0
 80031fa:	62e3      	str	r3, [r4, #44]	@ 0x2c
		  	  //fillScreen(WHITE);
		  	  drawImage(testImage, palette, petXPos, 40, 64, 64, 296);
 80031fc:	4b34      	ldr	r3, [pc, #208]	@ (80032d0 <main+0x63c>)
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	b29a      	uxth	r2, r3
 8003202:	4934      	ldr	r1, [pc, #208]	@ (80032d4 <main+0x640>)
 8003204:	4834      	ldr	r0, [pc, #208]	@ (80032d8 <main+0x644>)
 8003206:	2394      	movs	r3, #148	@ 0x94
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	9302      	str	r3, [sp, #8]
 800320c:	2340      	movs	r3, #64	@ 0x40
 800320e:	9301      	str	r3, [sp, #4]
 8003210:	2340      	movs	r3, #64	@ 0x40
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	2328      	movs	r3, #40	@ 0x28
 8003216:	f7ff f9df 	bl	80025d8 <drawImage>
//		  	  _ADXL343_ReadReg8(0x06, &accelZ, 1);
//		  	  _ADXL343_ReadReg8(0x07, &accelX, 1);
//		  	  _ADXL343_ReadReg8(0x08, &accelY, 1);
//		  	  _ADXL343_ReadReg8(0x09, &accelZ, 1);

		  	  sprintf(buffer2, "X:%d - Y:%d - Z:%d ", accelX, accelY, accelZ);
 800321a:	4b30      	ldr	r3, [pc, #192]	@ (80032dc <main+0x648>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	001a      	movs	r2, r3
 8003220:	4b2f      	ldr	r3, [pc, #188]	@ (80032e0 <main+0x64c>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	001c      	movs	r4, r3
 8003226:	4b2f      	ldr	r3, [pc, #188]	@ (80032e4 <main+0x650>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	492f      	ldr	r1, [pc, #188]	@ (80032e8 <main+0x654>)
 800322c:	482f      	ldr	r0, [pc, #188]	@ (80032ec <main+0x658>)
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	0023      	movs	r3, r4
 8003232:	f005 fd21 	bl	8008c78 <siprintf>
		  	  drawString(0, 10, buffer2, BLACK, GREEN, 1, 1);
 8003236:	4a2d      	ldr	r2, [pc, #180]	@ (80032ec <main+0x658>)
 8003238:	2301      	movs	r3, #1
 800323a:	9302      	str	r3, [sp, #8]
 800323c:	2301      	movs	r3, #1
 800323e:	9301      	str	r3, [sp, #4]
 8003240:	4b2b      	ldr	r3, [pc, #172]	@ (80032f0 <main+0x65c>)
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	2300      	movs	r3, #0
 8003246:	210a      	movs	r1, #10
 8003248:	2000      	movs	r0, #0
 800324a:	f7fe ffe1 	bl	8002210 <drawString>

		  	  _ADXL343_ReadReg8(0x15, &steps, 1);
 800324e:	4b1c      	ldr	r3, [pc, #112]	@ (80032c0 <main+0x62c>)
 8003250:	2201      	movs	r2, #1
 8003252:	0019      	movs	r1, r3
 8003254:	2015      	movs	r0, #21
 8003256:	f000 fafd 	bl	8003854 <_ADXL343_ReadReg8>
		  	  sprintf(buffer2, "Steps: %d ", steps);
 800325a:	4b19      	ldr	r3, [pc, #100]	@ (80032c0 <main+0x62c>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	001a      	movs	r2, r3
 8003260:	4924      	ldr	r1, [pc, #144]	@ (80032f4 <main+0x660>)
 8003262:	4b22      	ldr	r3, [pc, #136]	@ (80032ec <main+0x658>)
 8003264:	0018      	movs	r0, r3
 8003266:	f005 fd07 	bl	8008c78 <siprintf>
		  	  drawString(0, 20, buffer2, BLACK, GREEN, 1, 1);
 800326a:	4a20      	ldr	r2, [pc, #128]	@ (80032ec <main+0x658>)
 800326c:	2301      	movs	r3, #1
 800326e:	9302      	str	r3, [sp, #8]
 8003270:	2301      	movs	r3, #1
 8003272:	9301      	str	r3, [sp, #4]
 8003274:	4b1e      	ldr	r3, [pc, #120]	@ (80032f0 <main+0x65c>)
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	2300      	movs	r3, #0
 800327a:	2114      	movs	r1, #20
 800327c:	2000      	movs	r0, #0
 800327e:	f7fe ffc7 	bl	8002210 <drawString>

		  	  	  //only run this code every few seconds

		  	  drawString(70, 70, buffer, BLACK, GREEN, 1, 1);
 8003282:	4a1d      	ldr	r2, [pc, #116]	@ (80032f8 <main+0x664>)
 8003284:	2301      	movs	r3, #1
 8003286:	9302      	str	r3, [sp, #8]
 8003288:	2301      	movs	r3, #1
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	4b18      	ldr	r3, [pc, #96]	@ (80032f0 <main+0x65c>)
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	2300      	movs	r3, #0
 8003292:	2146      	movs	r1, #70	@ 0x46
 8003294:	2046      	movs	r0, #70	@ 0x46
 8003296:	f7fe ffbb 	bl	8002210 <drawString>

		  break;
 800329a:	46c0      	nop			@ (mov r8, r8)
	  SendData();
 800329c:	e59a      	b.n	8002dd4 <main+0x140>
 800329e:	46c0      	nop			@ (mov r8, r8)
 80032a0:	200012a0 	.word	0x200012a0
 80032a4:	20000e40 	.word	0x20000e40
 80032a8:	20001298 	.word	0x20001298
 80032ac:	4970f780 	.word	0x4970f780
 80032b0:	40014800 	.word	0x40014800
 80032b4:	20000e80 	.word	0x20000e80
 80032b8:	20000e81 	.word	0x20000e81
 80032bc:	200013f0 	.word	0x200013f0
 80032c0:	2000130b 	.word	0x2000130b
 80032c4:	20001058 	.word	0x20001058
 80032c8:	50000800 	.word	0x50000800
 80032cc:	0000ffff 	.word	0x0000ffff
 80032d0:	2000105a 	.word	0x2000105a
 80032d4:	20000e30 	.word	0x20000e30
 80032d8:	20000000 	.word	0x20000000
 80032dc:	20001308 	.word	0x20001308
 80032e0:	20001309 	.word	0x20001309
 80032e4:	2000130a 	.word	0x2000130a
 80032e8:	08009898 	.word	0x08009898
 80032ec:	200012a4 	.word	0x200012a4
 80032f0:	ffffe007 	.word	0xffffe007
 80032f4:	080098ac 	.word	0x080098ac
 80032f8:	2000105c 	.word	0x2000105c

080032fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032fc:	b590      	push	{r4, r7, lr}
 80032fe:	b095      	sub	sp, #84	@ 0x54
 8003300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003302:	2414      	movs	r4, #20
 8003304:	193b      	adds	r3, r7, r4
 8003306:	0018      	movs	r0, r3
 8003308:	233c      	movs	r3, #60	@ 0x3c
 800330a:	001a      	movs	r2, r3
 800330c:	2100      	movs	r1, #0
 800330e:	f005 fcd5 	bl	8008cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003312:	1d3b      	adds	r3, r7, #4
 8003314:	0018      	movs	r0, r3
 8003316:	2310      	movs	r3, #16
 8003318:	001a      	movs	r2, r3
 800331a:	2100      	movs	r1, #0
 800331c:	f005 fcce 	bl	8008cbc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003320:	2380      	movs	r3, #128	@ 0x80
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	0018      	movs	r0, r3
 8003326:	f001 ffe1 	bl	80052ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800332a:	193b      	adds	r3, r7, r4
 800332c:	220a      	movs	r2, #10
 800332e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003330:	193b      	adds	r3, r7, r4
 8003332:	2280      	movs	r2, #128	@ 0x80
 8003334:	0052      	lsls	r2, r2, #1
 8003336:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003338:	0021      	movs	r1, r4
 800333a:	187b      	adds	r3, r7, r1
 800333c:	2200      	movs	r2, #0
 800333e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003340:	187b      	adds	r3, r7, r1
 8003342:	2240      	movs	r2, #64	@ 0x40
 8003344:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003346:	187b      	adds	r3, r7, r1
 8003348:	2201      	movs	r2, #1
 800334a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800334c:	187b      	adds	r3, r7, r1
 800334e:	2202      	movs	r2, #2
 8003350:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003352:	187b      	adds	r3, r7, r1
 8003354:	2202      	movs	r2, #2
 8003356:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003358:	187b      	adds	r3, r7, r1
 800335a:	2200      	movs	r2, #0
 800335c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 800335e:	187b      	adds	r3, r7, r1
 8003360:	2208      	movs	r2, #8
 8003362:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003364:	187b      	adds	r3, r7, r1
 8003366:	2280      	movs	r2, #128	@ 0x80
 8003368:	0292      	lsls	r2, r2, #10
 800336a:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800336c:	187b      	adds	r3, r7, r1
 800336e:	2280      	movs	r2, #128	@ 0x80
 8003370:	0492      	lsls	r2, r2, #18
 8003372:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003374:	187b      	adds	r3, r7, r1
 8003376:	2280      	movs	r2, #128	@ 0x80
 8003378:	0592      	lsls	r2, r2, #22
 800337a:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800337c:	187b      	adds	r3, r7, r1
 800337e:	0018      	movs	r0, r3
 8003380:	f002 f800 	bl	8005384 <HAL_RCC_OscConfig>
 8003384:	1e03      	subs	r3, r0, #0
 8003386:	d001      	beq.n	800338c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8003388:	f000 fbbe 	bl	8003b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800338c:	1d3b      	adds	r3, r7, #4
 800338e:	2207      	movs	r2, #7
 8003390:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003392:	1d3b      	adds	r3, r7, #4
 8003394:	2202      	movs	r2, #2
 8003396:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003398:	1d3b      	adds	r3, r7, #4
 800339a:	2200      	movs	r2, #0
 800339c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800339e:	1d3b      	adds	r3, r7, #4
 80033a0:	2200      	movs	r2, #0
 80033a2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	2102      	movs	r1, #2
 80033a8:	0018      	movs	r0, r3
 80033aa:	f002 fb4b 	bl	8005a44 <HAL_RCC_ClockConfig>
 80033ae:	1e03      	subs	r3, r0, #0
 80033b0:	d001      	beq.n	80033b6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80033b2:	f000 fba9 	bl	8003b08 <Error_Handler>
  }
}
 80033b6:	46c0      	nop			@ (mov r8, r8)
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b015      	add	sp, #84	@ 0x54
 80033bc:	bd90      	pop	{r4, r7, pc}
	...

080033c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80033c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003434 <MX_I2C1_Init+0x74>)
 80033c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003438 <MX_I2C1_Init+0x78>)
 80033c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 80033ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003434 <MX_I2C1_Init+0x74>)
 80033cc:	4a1b      	ldr	r2, [pc, #108]	@ (800343c <MX_I2C1_Init+0x7c>)
 80033ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80033d0:	4b18      	ldr	r3, [pc, #96]	@ (8003434 <MX_I2C1_Init+0x74>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033d6:	4b17      	ldr	r3, [pc, #92]	@ (8003434 <MX_I2C1_Init+0x74>)
 80033d8:	2201      	movs	r2, #1
 80033da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033dc:	4b15      	ldr	r3, [pc, #84]	@ (8003434 <MX_I2C1_Init+0x74>)
 80033de:	2200      	movs	r2, #0
 80033e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80033e2:	4b14      	ldr	r3, [pc, #80]	@ (8003434 <MX_I2C1_Init+0x74>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033e8:	4b12      	ldr	r3, [pc, #72]	@ (8003434 <MX_I2C1_Init+0x74>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033ee:	4b11      	ldr	r3, [pc, #68]	@ (8003434 <MX_I2C1_Init+0x74>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003434 <MX_I2C1_Init+0x74>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80033fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003434 <MX_I2C1_Init+0x74>)
 80033fc:	0018      	movs	r0, r3
 80033fe:	f001 f931 	bl	8004664 <HAL_I2C_Init>
 8003402:	1e03      	subs	r3, r0, #0
 8003404:	d001      	beq.n	800340a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003406:	f000 fb7f 	bl	8003b08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800340a:	4b0a      	ldr	r3, [pc, #40]	@ (8003434 <MX_I2C1_Init+0x74>)
 800340c:	2100      	movs	r1, #0
 800340e:	0018      	movs	r0, r3
 8003410:	f001 fed4 	bl	80051bc <HAL_I2CEx_ConfigAnalogFilter>
 8003414:	1e03      	subs	r3, r0, #0
 8003416:	d001      	beq.n	800341c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003418:	f000 fb76 	bl	8003b08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800341c:	4b05      	ldr	r3, [pc, #20]	@ (8003434 <MX_I2C1_Init+0x74>)
 800341e:	2100      	movs	r1, #0
 8003420:	0018      	movs	r0, r3
 8003422:	f001 ff17 	bl	8005254 <HAL_I2CEx_ConfigDigitalFilter>
 8003426:	1e03      	subs	r3, r0, #0
 8003428:	d001      	beq.n	800342e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800342a:	f000 fb6d 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800342e:	46c0      	nop			@ (mov r8, r8)
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	2000130c 	.word	0x2000130c
 8003438:	40005400 	.word	0x40005400
 800343c:	10b17db5 	.word	0x10b17db5

08003440 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003444:	4b1c      	ldr	r3, [pc, #112]	@ (80034b8 <MX_SPI1_Init+0x78>)
 8003446:	4a1d      	ldr	r2, [pc, #116]	@ (80034bc <MX_SPI1_Init+0x7c>)
 8003448:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800344a:	4b1b      	ldr	r3, [pc, #108]	@ (80034b8 <MX_SPI1_Init+0x78>)
 800344c:	2282      	movs	r2, #130	@ 0x82
 800344e:	0052      	lsls	r2, r2, #1
 8003450:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8003452:	4b19      	ldr	r3, [pc, #100]	@ (80034b8 <MX_SPI1_Init+0x78>)
 8003454:	2280      	movs	r2, #128	@ 0x80
 8003456:	0212      	lsls	r2, r2, #8
 8003458:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800345a:	4b17      	ldr	r3, [pc, #92]	@ (80034b8 <MX_SPI1_Init+0x78>)
 800345c:	22e0      	movs	r2, #224	@ 0xe0
 800345e:	00d2      	lsls	r2, r2, #3
 8003460:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003462:	4b15      	ldr	r3, [pc, #84]	@ (80034b8 <MX_SPI1_Init+0x78>)
 8003464:	2200      	movs	r2, #0
 8003466:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003468:	4b13      	ldr	r3, [pc, #76]	@ (80034b8 <MX_SPI1_Init+0x78>)
 800346a:	2200      	movs	r2, #0
 800346c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800346e:	4b12      	ldr	r3, [pc, #72]	@ (80034b8 <MX_SPI1_Init+0x78>)
 8003470:	2280      	movs	r2, #128	@ 0x80
 8003472:	0092      	lsls	r2, r2, #2
 8003474:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003476:	4b10      	ldr	r3, [pc, #64]	@ (80034b8 <MX_SPI1_Init+0x78>)
 8003478:	2220      	movs	r2, #32
 800347a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800347c:	4b0e      	ldr	r3, [pc, #56]	@ (80034b8 <MX_SPI1_Init+0x78>)
 800347e:	2200      	movs	r2, #0
 8003480:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003482:	4b0d      	ldr	r3, [pc, #52]	@ (80034b8 <MX_SPI1_Init+0x78>)
 8003484:	2200      	movs	r2, #0
 8003486:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003488:	4b0b      	ldr	r3, [pc, #44]	@ (80034b8 <MX_SPI1_Init+0x78>)
 800348a:	2200      	movs	r2, #0
 800348c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800348e:	4b0a      	ldr	r3, [pc, #40]	@ (80034b8 <MX_SPI1_Init+0x78>)
 8003490:	2207      	movs	r2, #7
 8003492:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003494:	4b08      	ldr	r3, [pc, #32]	@ (80034b8 <MX_SPI1_Init+0x78>)
 8003496:	2200      	movs	r2, #0
 8003498:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800349a:	4b07      	ldr	r3, [pc, #28]	@ (80034b8 <MX_SPI1_Init+0x78>)
 800349c:	2208      	movs	r2, #8
 800349e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80034a0:	4b05      	ldr	r3, [pc, #20]	@ (80034b8 <MX_SPI1_Init+0x78>)
 80034a2:	0018      	movs	r0, r3
 80034a4:	f003 f96c 	bl	8006780 <HAL_SPI_Init>
 80034a8:	1e03      	subs	r3, r0, #0
 80034aa:	d001      	beq.n	80034b0 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80034ac:	f000 fb2c 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80034b0:	46c0      	nop			@ (mov r8, r8)
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	46c0      	nop			@ (mov r8, r8)
 80034b8:	2000138c 	.word	0x2000138c
 80034bc:	40013000 	.word	0x40013000

080034c0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b094      	sub	sp, #80	@ 0x50
 80034c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80034c6:	2334      	movs	r3, #52	@ 0x34
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	0018      	movs	r0, r3
 80034cc:	231c      	movs	r3, #28
 80034ce:	001a      	movs	r2, r3
 80034d0:	2100      	movs	r1, #0
 80034d2:	f005 fbf3 	bl	8008cbc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80034d6:	003b      	movs	r3, r7
 80034d8:	0018      	movs	r0, r3
 80034da:	2334      	movs	r3, #52	@ 0x34
 80034dc:	001a      	movs	r2, r3
 80034de:	2100      	movs	r1, #0
 80034e0:	f005 fbec 	bl	8008cbc <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80034e4:	4b37      	ldr	r3, [pc, #220]	@ (80035c4 <MX_TIM17_Init+0x104>)
 80034e6:	4a38      	ldr	r2, [pc, #224]	@ (80035c8 <MX_TIM17_Init+0x108>)
 80034e8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80034ea:	4b36      	ldr	r3, [pc, #216]	@ (80035c4 <MX_TIM17_Init+0x104>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034f0:	4b34      	ldr	r3, [pc, #208]	@ (80035c4 <MX_TIM17_Init+0x104>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80034f6:	4b33      	ldr	r3, [pc, #204]	@ (80035c4 <MX_TIM17_Init+0x104>)
 80034f8:	4a34      	ldr	r2, [pc, #208]	@ (80035cc <MX_TIM17_Init+0x10c>)
 80034fa:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034fc:	4b31      	ldr	r3, [pc, #196]	@ (80035c4 <MX_TIM17_Init+0x104>)
 80034fe:	2200      	movs	r2, #0
 8003500:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003502:	4b30      	ldr	r3, [pc, #192]	@ (80035c4 <MX_TIM17_Init+0x104>)
 8003504:	2200      	movs	r2, #0
 8003506:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003508:	4b2e      	ldr	r3, [pc, #184]	@ (80035c4 <MX_TIM17_Init+0x104>)
 800350a:	2200      	movs	r2, #0
 800350c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800350e:	4b2d      	ldr	r3, [pc, #180]	@ (80035c4 <MX_TIM17_Init+0x104>)
 8003510:	0018      	movs	r0, r3
 8003512:	f003 fcc3 	bl	8006e9c <HAL_TIM_Base_Init>
 8003516:	1e03      	subs	r3, r0, #0
 8003518:	d001      	beq.n	800351e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800351a:	f000 faf5 	bl	8003b08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800351e:	4b29      	ldr	r3, [pc, #164]	@ (80035c4 <MX_TIM17_Init+0x104>)
 8003520:	0018      	movs	r0, r3
 8003522:	f003 fd13 	bl	8006f4c <HAL_TIM_PWM_Init>
 8003526:	1e03      	subs	r3, r0, #0
 8003528:	d001      	beq.n	800352e <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 800352a:	f000 faed 	bl	8003b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800352e:	2134      	movs	r1, #52	@ 0x34
 8003530:	187b      	adds	r3, r7, r1
 8003532:	2260      	movs	r2, #96	@ 0x60
 8003534:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003536:	187b      	adds	r3, r7, r1
 8003538:	2200      	movs	r2, #0
 800353a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800353c:	187b      	adds	r3, r7, r1
 800353e:	2200      	movs	r2, #0
 8003540:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003542:	187b      	adds	r3, r7, r1
 8003544:	2200      	movs	r2, #0
 8003546:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003548:	187b      	adds	r3, r7, r1
 800354a:	2200      	movs	r2, #0
 800354c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800354e:	187b      	adds	r3, r7, r1
 8003550:	2200      	movs	r2, #0
 8003552:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003554:	187b      	adds	r3, r7, r1
 8003556:	2200      	movs	r2, #0
 8003558:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800355a:	1879      	adds	r1, r7, r1
 800355c:	4b19      	ldr	r3, [pc, #100]	@ (80035c4 <MX_TIM17_Init+0x104>)
 800355e:	2200      	movs	r2, #0
 8003560:	0018      	movs	r0, r3
 8003562:	f003 fecf 	bl	8007304 <HAL_TIM_PWM_ConfigChannel>
 8003566:	1e03      	subs	r3, r0, #0
 8003568:	d001      	beq.n	800356e <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 800356a:	f000 facd 	bl	8003b08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800356e:	003b      	movs	r3, r7
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003574:	003b      	movs	r3, r7
 8003576:	2200      	movs	r2, #0
 8003578:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800357a:	003b      	movs	r3, r7
 800357c:	2200      	movs	r2, #0
 800357e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003580:	003b      	movs	r3, r7
 8003582:	2200      	movs	r2, #0
 8003584:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003586:	003b      	movs	r3, r7
 8003588:	2200      	movs	r2, #0
 800358a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800358c:	003b      	movs	r3, r7
 800358e:	2280      	movs	r2, #128	@ 0x80
 8003590:	0192      	lsls	r2, r2, #6
 8003592:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003594:	003b      	movs	r3, r7
 8003596:	2200      	movs	r2, #0
 8003598:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800359a:	003b      	movs	r3, r7
 800359c:	2200      	movs	r2, #0
 800359e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80035a0:	003a      	movs	r2, r7
 80035a2:	4b08      	ldr	r3, [pc, #32]	@ (80035c4 <MX_TIM17_Init+0x104>)
 80035a4:	0011      	movs	r1, r2
 80035a6:	0018      	movs	r0, r3
 80035a8:	f004 fb2c 	bl	8007c04 <HAL_TIMEx_ConfigBreakDeadTime>
 80035ac:	1e03      	subs	r3, r0, #0
 80035ae:	d001      	beq.n	80035b4 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 80035b0:	f000 faaa 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80035b4:	4b03      	ldr	r3, [pc, #12]	@ (80035c4 <MX_TIM17_Init+0x104>)
 80035b6:	0018      	movs	r0, r3
 80035b8:	f000 fbc4 	bl	8003d44 <HAL_TIM_MspPostInit>

}
 80035bc:	46c0      	nop			@ (mov r8, r8)
 80035be:	46bd      	mov	sp, r7
 80035c0:	b014      	add	sp, #80	@ 0x50
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	200013f0 	.word	0x200013f0
 80035c8:	40014800 	.word	0x40014800
 80035cc:	0000ffff 	.word	0x0000ffff

080035d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80035d4:	4b23      	ldr	r3, [pc, #140]	@ (8003664 <MX_USART1_UART_Init+0x94>)
 80035d6:	4a24      	ldr	r2, [pc, #144]	@ (8003668 <MX_USART1_UART_Init+0x98>)
 80035d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80035da:	4b22      	ldr	r3, [pc, #136]	@ (8003664 <MX_USART1_UART_Init+0x94>)
 80035dc:	2296      	movs	r2, #150	@ 0x96
 80035de:	0192      	lsls	r2, r2, #6
 80035e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80035e2:	4b20      	ldr	r3, [pc, #128]	@ (8003664 <MX_USART1_UART_Init+0x94>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80035e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003664 <MX_USART1_UART_Init+0x94>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80035ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003664 <MX_USART1_UART_Init+0x94>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80035f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003664 <MX_USART1_UART_Init+0x94>)
 80035f6:	220c      	movs	r2, #12
 80035f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003664 <MX_USART1_UART_Init+0x94>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003600:	4b18      	ldr	r3, [pc, #96]	@ (8003664 <MX_USART1_UART_Init+0x94>)
 8003602:	2200      	movs	r2, #0
 8003604:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003606:	4b17      	ldr	r3, [pc, #92]	@ (8003664 <MX_USART1_UART_Init+0x94>)
 8003608:	2200      	movs	r2, #0
 800360a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800360c:	4b15      	ldr	r3, [pc, #84]	@ (8003664 <MX_USART1_UART_Init+0x94>)
 800360e:	2200      	movs	r2, #0
 8003610:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003612:	4b14      	ldr	r3, [pc, #80]	@ (8003664 <MX_USART1_UART_Init+0x94>)
 8003614:	2200      	movs	r2, #0
 8003616:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003618:	4b12      	ldr	r3, [pc, #72]	@ (8003664 <MX_USART1_UART_Init+0x94>)
 800361a:	0018      	movs	r0, r3
 800361c:	f004 fb8e 	bl	8007d3c <HAL_UART_Init>
 8003620:	1e03      	subs	r3, r0, #0
 8003622:	d001      	beq.n	8003628 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003624:	f000 fa70 	bl	8003b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003628:	4b0e      	ldr	r3, [pc, #56]	@ (8003664 <MX_USART1_UART_Init+0x94>)
 800362a:	2100      	movs	r1, #0
 800362c:	0018      	movs	r0, r3
 800362e:	f005 fa43 	bl	8008ab8 <HAL_UARTEx_SetTxFifoThreshold>
 8003632:	1e03      	subs	r3, r0, #0
 8003634:	d001      	beq.n	800363a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003636:	f000 fa67 	bl	8003b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800363a:	4b0a      	ldr	r3, [pc, #40]	@ (8003664 <MX_USART1_UART_Init+0x94>)
 800363c:	2100      	movs	r1, #0
 800363e:	0018      	movs	r0, r3
 8003640:	f005 fa7a 	bl	8008b38 <HAL_UARTEx_SetRxFifoThreshold>
 8003644:	1e03      	subs	r3, r0, #0
 8003646:	d001      	beq.n	800364c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003648:	f000 fa5e 	bl	8003b08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800364c:	4b05      	ldr	r3, [pc, #20]	@ (8003664 <MX_USART1_UART_Init+0x94>)
 800364e:	0018      	movs	r0, r3
 8003650:	f005 f9f8 	bl	8008a44 <HAL_UARTEx_DisableFifoMode>
 8003654:	1e03      	subs	r3, r0, #0
 8003656:	d001      	beq.n	800365c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003658:	f000 fa56 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800365c:	46c0      	nop			@ (mov r8, r8)
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	46c0      	nop			@ (mov r8, r8)
 8003664:	2000143c 	.word	0x2000143c
 8003668:	40013800 	.word	0x40013800

0800366c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003670:	4b23      	ldr	r3, [pc, #140]	@ (8003700 <MX_USART2_UART_Init+0x94>)
 8003672:	4a24      	ldr	r2, [pc, #144]	@ (8003704 <MX_USART2_UART_Init+0x98>)
 8003674:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003676:	4b22      	ldr	r3, [pc, #136]	@ (8003700 <MX_USART2_UART_Init+0x94>)
 8003678:	22e1      	movs	r2, #225	@ 0xe1
 800367a:	0252      	lsls	r2, r2, #9
 800367c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800367e:	4b20      	ldr	r3, [pc, #128]	@ (8003700 <MX_USART2_UART_Init+0x94>)
 8003680:	2200      	movs	r2, #0
 8003682:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003684:	4b1e      	ldr	r3, [pc, #120]	@ (8003700 <MX_USART2_UART_Init+0x94>)
 8003686:	2200      	movs	r2, #0
 8003688:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800368a:	4b1d      	ldr	r3, [pc, #116]	@ (8003700 <MX_USART2_UART_Init+0x94>)
 800368c:	2200      	movs	r2, #0
 800368e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003690:	4b1b      	ldr	r3, [pc, #108]	@ (8003700 <MX_USART2_UART_Init+0x94>)
 8003692:	220c      	movs	r2, #12
 8003694:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003696:	4b1a      	ldr	r3, [pc, #104]	@ (8003700 <MX_USART2_UART_Init+0x94>)
 8003698:	2200      	movs	r2, #0
 800369a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800369c:	4b18      	ldr	r3, [pc, #96]	@ (8003700 <MX_USART2_UART_Init+0x94>)
 800369e:	2200      	movs	r2, #0
 80036a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036a2:	4b17      	ldr	r3, [pc, #92]	@ (8003700 <MX_USART2_UART_Init+0x94>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80036a8:	4b15      	ldr	r3, [pc, #84]	@ (8003700 <MX_USART2_UART_Init+0x94>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036ae:	4b14      	ldr	r3, [pc, #80]	@ (8003700 <MX_USART2_UART_Init+0x94>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036b4:	4b12      	ldr	r3, [pc, #72]	@ (8003700 <MX_USART2_UART_Init+0x94>)
 80036b6:	0018      	movs	r0, r3
 80036b8:	f004 fb40 	bl	8007d3c <HAL_UART_Init>
 80036bc:	1e03      	subs	r3, r0, #0
 80036be:	d001      	beq.n	80036c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80036c0:	f000 fa22 	bl	8003b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003700 <MX_USART2_UART_Init+0x94>)
 80036c6:	2100      	movs	r1, #0
 80036c8:	0018      	movs	r0, r3
 80036ca:	f005 f9f5 	bl	8008ab8 <HAL_UARTEx_SetTxFifoThreshold>
 80036ce:	1e03      	subs	r3, r0, #0
 80036d0:	d001      	beq.n	80036d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80036d2:	f000 fa19 	bl	8003b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003700 <MX_USART2_UART_Init+0x94>)
 80036d8:	2100      	movs	r1, #0
 80036da:	0018      	movs	r0, r3
 80036dc:	f005 fa2c 	bl	8008b38 <HAL_UARTEx_SetRxFifoThreshold>
 80036e0:	1e03      	subs	r3, r0, #0
 80036e2:	d001      	beq.n	80036e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80036e4:	f000 fa10 	bl	8003b08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80036e8:	4b05      	ldr	r3, [pc, #20]	@ (8003700 <MX_USART2_UART_Init+0x94>)
 80036ea:	0018      	movs	r0, r3
 80036ec:	f005 f9aa 	bl	8008a44 <HAL_UARTEx_DisableFifoMode>
 80036f0:	1e03      	subs	r3, r0, #0
 80036f2:	d001      	beq.n	80036f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80036f4:	f000 fa08 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80036f8:	46c0      	nop			@ (mov r8, r8)
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	46c0      	nop			@ (mov r8, r8)
 8003700:	200014d0 	.word	0x200014d0
 8003704:	40004400 	.word	0x40004400

08003708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003708:	b590      	push	{r4, r7, lr}
 800370a:	b089      	sub	sp, #36	@ 0x24
 800370c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800370e:	240c      	movs	r4, #12
 8003710:	193b      	adds	r3, r7, r4
 8003712:	0018      	movs	r0, r3
 8003714:	2314      	movs	r3, #20
 8003716:	001a      	movs	r2, r3
 8003718:	2100      	movs	r1, #0
 800371a:	f005 facf 	bl	8008cbc <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800371e:	4b31      	ldr	r3, [pc, #196]	@ (80037e4 <MX_GPIO_Init+0xdc>)
 8003720:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003722:	4b30      	ldr	r3, [pc, #192]	@ (80037e4 <MX_GPIO_Init+0xdc>)
 8003724:	2104      	movs	r1, #4
 8003726:	430a      	orrs	r2, r1
 8003728:	635a      	str	r2, [r3, #52]	@ 0x34
 800372a:	4b2e      	ldr	r3, [pc, #184]	@ (80037e4 <MX_GPIO_Init+0xdc>)
 800372c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800372e:	2204      	movs	r2, #4
 8003730:	4013      	ands	r3, r2
 8003732:	60bb      	str	r3, [r7, #8]
 8003734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003736:	4b2b      	ldr	r3, [pc, #172]	@ (80037e4 <MX_GPIO_Init+0xdc>)
 8003738:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800373a:	4b2a      	ldr	r3, [pc, #168]	@ (80037e4 <MX_GPIO_Init+0xdc>)
 800373c:	2101      	movs	r1, #1
 800373e:	430a      	orrs	r2, r1
 8003740:	635a      	str	r2, [r3, #52]	@ 0x34
 8003742:	4b28      	ldr	r3, [pc, #160]	@ (80037e4 <MX_GPIO_Init+0xdc>)
 8003744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003746:	2201      	movs	r2, #1
 8003748:	4013      	ands	r3, r2
 800374a:	607b      	str	r3, [r7, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800374e:	4b25      	ldr	r3, [pc, #148]	@ (80037e4 <MX_GPIO_Init+0xdc>)
 8003750:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003752:	4b24      	ldr	r3, [pc, #144]	@ (80037e4 <MX_GPIO_Init+0xdc>)
 8003754:	2108      	movs	r1, #8
 8003756:	430a      	orrs	r2, r1
 8003758:	635a      	str	r2, [r3, #52]	@ 0x34
 800375a:	4b22      	ldr	r3, [pc, #136]	@ (80037e4 <MX_GPIO_Init+0xdc>)
 800375c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800375e:	2208      	movs	r2, #8
 8003760:	4013      	ands	r3, r2
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 8003766:	4920      	ldr	r1, [pc, #128]	@ (80037e8 <MX_GPIO_Init+0xe0>)
 8003768:	23a0      	movs	r3, #160	@ 0xa0
 800376a:	05db      	lsls	r3, r3, #23
 800376c:	2200      	movs	r2, #0
 800376e:	0018      	movs	r0, r3
 8003770:	f000 ff5b 	bl	800462a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003774:	193b      	adds	r3, r7, r4
 8003776:	2202      	movs	r2, #2
 8003778:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800377a:	193b      	adds	r3, r7, r4
 800377c:	2200      	movs	r2, #0
 800377e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003780:	193b      	adds	r3, r7, r4
 8003782:	2200      	movs	r2, #0
 8003784:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003786:	193b      	adds	r3, r7, r4
 8003788:	4a18      	ldr	r2, [pc, #96]	@ (80037ec <MX_GPIO_Init+0xe4>)
 800378a:	0019      	movs	r1, r3
 800378c:	0010      	movs	r0, r2
 800378e:	f000 fdc3 	bl	8004318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
 8003792:	193b      	adds	r3, r7, r4
 8003794:	4a14      	ldr	r2, [pc, #80]	@ (80037e8 <MX_GPIO_Init+0xe0>)
 8003796:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003798:	193b      	adds	r3, r7, r4
 800379a:	2201      	movs	r2, #1
 800379c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379e:	193b      	adds	r3, r7, r4
 80037a0:	2200      	movs	r2, #0
 80037a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a4:	193b      	adds	r3, r7, r4
 80037a6:	2200      	movs	r2, #0
 80037a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037aa:	193a      	adds	r2, r7, r4
 80037ac:	23a0      	movs	r3, #160	@ 0xa0
 80037ae:	05db      	lsls	r3, r3, #23
 80037b0:	0011      	movs	r1, r2
 80037b2:	0018      	movs	r0, r3
 80037b4:	f000 fdb0 	bl	8004318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80037b8:	0021      	movs	r1, r4
 80037ba:	187b      	adds	r3, r7, r1
 80037bc:	22c0      	movs	r2, #192	@ 0xc0
 80037be:	0152      	lsls	r2, r2, #5
 80037c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037c2:	187b      	adds	r3, r7, r1
 80037c4:	2200      	movs	r2, #0
 80037c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c8:	187b      	adds	r3, r7, r1
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ce:	187a      	adds	r2, r7, r1
 80037d0:	23a0      	movs	r3, #160	@ 0xa0
 80037d2:	05db      	lsls	r3, r3, #23
 80037d4:	0011      	movs	r1, r2
 80037d6:	0018      	movs	r0, r3
 80037d8:	f000 fd9e 	bl	8004318 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80037dc:	46c0      	nop			@ (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	b009      	add	sp, #36	@ 0x24
 80037e2:	bd90      	pop	{r4, r7, pc}
 80037e4:	40021000 	.word	0x40021000
 80037e8:	00008030 	.word	0x00008030
 80037ec:	50000800 	.word	0x50000800

080037f0 <Animate>:

/* USER CODE BEGIN 4 */
//AURORA: Put custom functions here!
void Animate (struct Img* animation, unsigned int size)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af04      	add	r7, sp, #16
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
	++currentFrame;
 80037fa:	4b14      	ldr	r3, [pc, #80]	@ (800384c <Animate+0x5c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	4b12      	ldr	r3, [pc, #72]	@ (800384c <Animate+0x5c>)
 8003802:	601a      	str	r2, [r3, #0]
	if(currentFrame > size)
 8003804:	4b11      	ldr	r3, [pc, #68]	@ (800384c <Animate+0x5c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d202      	bcs.n	8003814 <Animate+0x24>
	{
		currentFrame = 0;
 800380e:	4b0f      	ldr	r3, [pc, #60]	@ (800384c <Animate+0x5c>)
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
	}
	drawImage(animation[currentFrame].Body, palette, 40, 40, 64, 64, animation[currentFrame].Size);
 8003814:	4b0d      	ldr	r3, [pc, #52]	@ (800384c <Animate+0x5c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	18d3      	adds	r3, r2, r3
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	4b0a      	ldr	r3, [pc, #40]	@ (800384c <Animate+0x5c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	18d3      	adds	r3, r2, r3
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	b29b      	uxth	r3, r3
 800382e:	4908      	ldr	r1, [pc, #32]	@ (8003850 <Animate+0x60>)
 8003830:	9302      	str	r3, [sp, #8]
 8003832:	2340      	movs	r3, #64	@ 0x40
 8003834:	9301      	str	r3, [sp, #4]
 8003836:	2340      	movs	r3, #64	@ 0x40
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	2328      	movs	r3, #40	@ 0x28
 800383c:	2228      	movs	r2, #40	@ 0x28
 800383e:	f7fe fecb 	bl	80025d8 <drawImage>
	return;
 8003842:	46c0      	nop			@ (mov r8, r8)
}
 8003844:	46bd      	mov	sp, r7
 8003846:	b002      	add	sp, #8
 8003848:	bd80      	pop	{r7, pc}
 800384a:	46c0      	nop			@ (mov r8, r8)
 800384c:	20001290 	.word	0x20001290
 8003850:	20000e30 	.word	0x20000e30

08003854 <_ADXL343_ReadReg8>:
int _ADXL343_ReadReg8 (unsigned char TargetRegister, unsigned char * TargetValue, uint8_t size)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af02      	add	r7, sp, #8
 800385a:	6039      	str	r1, [r7, #0]
 800385c:	0011      	movs	r1, r2
 800385e:	1dfb      	adds	r3, r7, #7
 8003860:	1c02      	adds	r2, r0, #0
 8003862:	701a      	strb	r2, [r3, #0]
 8003864:	1dbb      	adds	r3, r7, #6
 8003866:	1c0a      	adds	r2, r1, #0
 8003868:	701a      	strb	r2, [r3, #0]
  if (!HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, &TargetRegister, 1, 1000)==HAL_OK)
 800386a:	1dfa      	adds	r2, r7, #7
 800386c:	4811      	ldr	r0, [pc, #68]	@ (80038b4 <_ADXL343_ReadReg8+0x60>)
 800386e:	23fa      	movs	r3, #250	@ 0xfa
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	2301      	movs	r3, #1
 8003876:	2128      	movs	r1, #40	@ 0x28
 8003878:	f000 ff9a 	bl	80047b0 <HAL_I2C_Master_Transmit>
 800387c:	1e03      	subs	r3, r0, #0
 800387e:	d002      	beq.n	8003886 <_ADXL343_ReadReg8+0x32>
      return -1;
 8003880:	2301      	movs	r3, #1
 8003882:	425b      	negs	r3, r3
 8003884:	e011      	b.n	80038aa <_ADXL343_ReadReg8+0x56>

  if (!HAL_I2C_Master_Receive(&hi2c1, 0x14<<1, TargetValue, size, 1000)==HAL_OK)
 8003886:	1dbb      	adds	r3, r7, #6
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	b299      	uxth	r1, r3
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	4809      	ldr	r0, [pc, #36]	@ (80038b4 <_ADXL343_ReadReg8+0x60>)
 8003890:	23fa      	movs	r3, #250	@ 0xfa
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	000b      	movs	r3, r1
 8003898:	2128      	movs	r1, #40	@ 0x28
 800389a:	f001 f8b3 	bl	8004a04 <HAL_I2C_Master_Receive>
 800389e:	1e03      	subs	r3, r0, #0
 80038a0:	d002      	beq.n	80038a8 <_ADXL343_ReadReg8+0x54>
    return -2;
 80038a2:	2302      	movs	r3, #2
 80038a4:	425b      	negs	r3, r3
 80038a6:	e000      	b.n	80038aa <_ADXL343_ReadReg8+0x56>

  return 0;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	0018      	movs	r0, r3
 80038ac:	46bd      	mov	sp, r7
 80038ae:	b002      	add	sp, #8
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	46c0      	nop			@ (mov r8, r8)
 80038b4:	2000130c 	.word	0x2000130c

080038b8 <_ADXL343_WriteReg8>:

int _ADXL343_WriteReg8 (unsigned char TargetRegister, unsigned char TargetValue)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af02      	add	r7, sp, #8
 80038be:	0002      	movs	r2, r0
 80038c0:	1dfb      	adds	r3, r7, #7
 80038c2:	701a      	strb	r2, [r3, #0]
 80038c4:	1dbb      	adds	r3, r7, #6
 80038c6:	1c0a      	adds	r2, r1, #0
 80038c8:	701a      	strb	r2, [r3, #0]
  unsigned char buff [2];
  buff[0] = TargetRegister;
 80038ca:	210c      	movs	r1, #12
 80038cc:	187b      	adds	r3, r7, r1
 80038ce:	1dfa      	adds	r2, r7, #7
 80038d0:	7812      	ldrb	r2, [r2, #0]
 80038d2:	701a      	strb	r2, [r3, #0]
  buff[1] = TargetValue;
 80038d4:	187b      	adds	r3, r7, r1
 80038d6:	1dba      	adds	r2, r7, #6
 80038d8:	7812      	ldrb	r2, [r2, #0]
 80038da:	705a      	strb	r2, [r3, #1]

  if (HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, buff, 2, 100))
 80038dc:	187a      	adds	r2, r7, r1
 80038de:	4808      	ldr	r0, [pc, #32]	@ (8003900 <_ADXL343_WriteReg8+0x48>)
 80038e0:	2364      	movs	r3, #100	@ 0x64
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	2302      	movs	r3, #2
 80038e6:	2128      	movs	r1, #40	@ 0x28
 80038e8:	f000 ff62 	bl	80047b0 <HAL_I2C_Master_Transmit>
 80038ec:	1e03      	subs	r3, r0, #0
 80038ee:	d002      	beq.n	80038f6 <_ADXL343_WriteReg8+0x3e>
      return -1;
 80038f0:	2301      	movs	r3, #1
 80038f2:	425b      	negs	r3, r3
 80038f4:	e000      	b.n	80038f8 <_ADXL343_WriteReg8+0x40>

  return 0;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	0018      	movs	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b004      	add	sp, #16
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	2000130c 	.word	0x2000130c

08003904 <SendData>:
void SendData()
{
 8003904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003906:	46c6      	mov	lr, r8
 8003908:	b500      	push	{lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af06      	add	r7, sp, #24
	unsigned int posIndex;
	unsigned int clrIndex;
	sprintf(sendBuffer, "(lifeSteps:%d),(weeklySteps:%d),(dailySteps:%d),(uid:%s),(friendship:%d),(password:password)(difficulty:%d),(evolution:%d) \n\r", game.allSteps,game.weeklySteps,game.stepsToday, game.uid, game.mood, game.challengeGoal, game.evo);
 800390e:	4a59      	ldr	r2, [pc, #356]	@ (8003a74 <SendData+0x170>)
 8003910:	238c      	movs	r3, #140	@ 0x8c
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	58d4      	ldr	r4, [r2, r3]
 8003916:	4a57      	ldr	r2, [pc, #348]	@ (8003a74 <SendData+0x170>)
 8003918:	238e      	movs	r3, #142	@ 0x8e
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	58d5      	ldr	r5, [r2, r3]
 800391e:	4a55      	ldr	r2, [pc, #340]	@ (8003a74 <SendData+0x170>)
 8003920:	2390      	movs	r3, #144	@ 0x90
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	58d3      	ldr	r3, [r2, r3]
 8003926:	4698      	mov	r8, r3
 8003928:	4a52      	ldr	r2, [pc, #328]	@ (8003a74 <SendData+0x170>)
 800392a:	7c52      	ldrb	r2, [r2, #17]
 800392c:	0016      	movs	r6, r2
 800392e:	4951      	ldr	r1, [pc, #324]	@ (8003a74 <SendData+0x170>)
 8003930:	2292      	movs	r2, #146	@ 0x92
 8003932:	0052      	lsls	r2, r2, #1
 8003934:	588a      	ldr	r2, [r1, r2]
 8003936:	494f      	ldr	r1, [pc, #316]	@ (8003a74 <SendData+0x170>)
 8003938:	7c09      	ldrb	r1, [r1, #16]
 800393a:	468c      	mov	ip, r1
 800393c:	494e      	ldr	r1, [pc, #312]	@ (8003a78 <SendData+0x174>)
 800393e:	484f      	ldr	r0, [pc, #316]	@ (8003a7c <SendData+0x178>)
 8003940:	4663      	mov	r3, ip
 8003942:	9304      	str	r3, [sp, #16]
 8003944:	9203      	str	r2, [sp, #12]
 8003946:	9602      	str	r6, [sp, #8]
 8003948:	4a4d      	ldr	r2, [pc, #308]	@ (8003a80 <SendData+0x17c>)
 800394a:	9201      	str	r2, [sp, #4]
 800394c:	4643      	mov	r3, r8
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	002b      	movs	r3, r5
 8003952:	0022      	movs	r2, r4
 8003954:	f005 f990 	bl	8008c78 <siprintf>
	HAL_UART_Transmit(&huart2, sendBuffer, strlen(sendBuffer), 200);
 8003958:	4b48      	ldr	r3, [pc, #288]	@ (8003a7c <SendData+0x178>)
 800395a:	0018      	movs	r0, r3
 800395c:	f7fc fbd2 	bl	8000104 <strlen>
 8003960:	0003      	movs	r3, r0
 8003962:	b29a      	uxth	r2, r3
 8003964:	4945      	ldr	r1, [pc, #276]	@ (8003a7c <SendData+0x178>)
 8003966:	4847      	ldr	r0, [pc, #284]	@ (8003a84 <SendData+0x180>)
 8003968:	23c8      	movs	r3, #200	@ 0xc8
 800396a:	f004 fa3d 	bl	8007de8 <HAL_UART_Transmit>
	for(posIndex=0; posIndex<game.numLocations; posIndex++)
 800396e:	2300      	movs	r3, #0
 8003970:	607b      	str	r3, [r7, #4]
 8003972:	e072      	b.n	8003a5a <SendData+0x156>
	{       HAL_Delay(5);
 8003974:	2005      	movs	r0, #5
 8003976:	f000 fbe1 	bl	800413c <HAL_Delay>
		for(clrIndex=0;clrIndex<400;clrIndex++) sendBuffer[clrIndex]=0;
 800397a:	2300      	movs	r3, #0
 800397c:	603b      	str	r3, [r7, #0]
 800397e:	e007      	b.n	8003990 <SendData+0x8c>
 8003980:	4a3e      	ldr	r2, [pc, #248]	@ (8003a7c <SendData+0x178>)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	18d3      	adds	r3, r2, r3
 8003986:	2200      	movs	r2, #0
 8003988:	701a      	strb	r2, [r3, #0]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	3301      	adds	r3, #1
 800398e:	603b      	str	r3, [r7, #0]
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	23c8      	movs	r3, #200	@ 0xc8
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	429a      	cmp	r2, r3
 8003998:	d3f2      	bcc.n	8003980 <SendData+0x7c>
		sprintf(sendBuffer, "[(lat:%d.%d), (lon:%d.%d)],", ((int)game.positions[posIndex].lat), abs((int)((fmod((double)game.positions[posIndex].lat, (double)1))*10000)),((int)game.positions[posIndex].lon), abs((int)((fmod((double)game.positions[posIndex].lon, (double)1))*10000)));
 800399a:	4b36      	ldr	r3, [pc, #216]	@ (8003a74 <SendData+0x170>)
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	3203      	adds	r2, #3
 80039a0:	00d2      	lsls	r2, r2, #3
 80039a2:	58d3      	ldr	r3, [r2, r3]
 80039a4:	1c18      	adds	r0, r3, #0
 80039a6:	f7fd f9f1 	bl	8000d8c <__aeabi_f2iz>
 80039aa:	0006      	movs	r6, r0
 80039ac:	4b31      	ldr	r3, [pc, #196]	@ (8003a74 <SendData+0x170>)
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	3203      	adds	r2, #3
 80039b2:	00d2      	lsls	r2, r2, #3
 80039b4:	58d3      	ldr	r3, [r2, r3]
 80039b6:	1c18      	adds	r0, r3, #0
 80039b8:	f7fe f986 	bl	8001cc8 <__aeabi_f2d>
 80039bc:	2200      	movs	r2, #0
 80039be:	4b32      	ldr	r3, [pc, #200]	@ (8003a88 <SendData+0x184>)
 80039c0:	f005 fdf7 	bl	80095b2 <fmod>
 80039c4:	2200      	movs	r2, #0
 80039c6:	4b31      	ldr	r3, [pc, #196]	@ (8003a8c <SendData+0x188>)
 80039c8:	f7fd fe3a 	bl	8001640 <__aeabi_dmul>
 80039cc:	0002      	movs	r2, r0
 80039ce:	000b      	movs	r3, r1
 80039d0:	0010      	movs	r0, r2
 80039d2:	0019      	movs	r1, r3
 80039d4:	f7fe f93c 	bl	8001c50 <__aeabi_d2iz>
 80039d8:	0003      	movs	r3, r0
 80039da:	17da      	asrs	r2, r3, #31
 80039dc:	189c      	adds	r4, r3, r2
 80039de:	4054      	eors	r4, r2
 80039e0:	4a24      	ldr	r2, [pc, #144]	@ (8003a74 <SendData+0x170>)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3303      	adds	r3, #3
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	18d3      	adds	r3, r2, r3
 80039ea:	3304      	adds	r3, #4
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	1c18      	adds	r0, r3, #0
 80039f0:	f7fd f9cc 	bl	8000d8c <__aeabi_f2iz>
 80039f4:	0005      	movs	r5, r0
 80039f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003a74 <SendData+0x170>)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3303      	adds	r3, #3
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	18d3      	adds	r3, r2, r3
 8003a00:	3304      	adds	r3, #4
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	1c18      	adds	r0, r3, #0
 8003a06:	f7fe f95f 	bl	8001cc8 <__aeabi_f2d>
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	4b1e      	ldr	r3, [pc, #120]	@ (8003a88 <SendData+0x184>)
 8003a0e:	f005 fdd0 	bl	80095b2 <fmod>
 8003a12:	2200      	movs	r2, #0
 8003a14:	4b1d      	ldr	r3, [pc, #116]	@ (8003a8c <SendData+0x188>)
 8003a16:	f7fd fe13 	bl	8001640 <__aeabi_dmul>
 8003a1a:	0002      	movs	r2, r0
 8003a1c:	000b      	movs	r3, r1
 8003a1e:	0010      	movs	r0, r2
 8003a20:	0019      	movs	r1, r3
 8003a22:	f7fe f915 	bl	8001c50 <__aeabi_d2iz>
 8003a26:	0003      	movs	r3, r0
 8003a28:	17da      	asrs	r2, r3, #31
 8003a2a:	189b      	adds	r3, r3, r2
 8003a2c:	4053      	eors	r3, r2
 8003a2e:	4918      	ldr	r1, [pc, #96]	@ (8003a90 <SendData+0x18c>)
 8003a30:	4812      	ldr	r0, [pc, #72]	@ (8003a7c <SendData+0x178>)
 8003a32:	9301      	str	r3, [sp, #4]
 8003a34:	9500      	str	r5, [sp, #0]
 8003a36:	0023      	movs	r3, r4
 8003a38:	0032      	movs	r2, r6
 8003a3a:	f005 f91d 	bl	8008c78 <siprintf>
		HAL_UART_Transmit(&huart2, sendBuffer, strlen(sendBuffer), 200);
 8003a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8003a7c <SendData+0x178>)
 8003a40:	0018      	movs	r0, r3
 8003a42:	f7fc fb5f 	bl	8000104 <strlen>
 8003a46:	0003      	movs	r3, r0
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	490c      	ldr	r1, [pc, #48]	@ (8003a7c <SendData+0x178>)
 8003a4c:	480d      	ldr	r0, [pc, #52]	@ (8003a84 <SendData+0x180>)
 8003a4e:	23c8      	movs	r3, #200	@ 0xc8
 8003a50:	f004 f9ca 	bl	8007de8 <HAL_UART_Transmit>
	for(posIndex=0; posIndex<game.numLocations; posIndex++)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3301      	adds	r3, #1
 8003a58:	607b      	str	r3, [r7, #4]
 8003a5a:	4b06      	ldr	r3, [pc, #24]	@ (8003a74 <SendData+0x170>)
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d387      	bcc.n	8003974 <SendData+0x70>

	}
}
 8003a64:	46c0      	nop			@ (mov r8, r8)
 8003a66:	46c0      	nop			@ (mov r8, r8)
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	b002      	add	sp, #8
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	46b8      	mov	r8, r7
 8003a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a72:	46c0      	nop			@ (mov r8, r8)
 8003a74:	20000f08 	.word	0x20000f08
 8003a78:	080098b8 	.word	0x080098b8
 8003a7c:	200010dc 	.word	0x200010dc
 8003a80:	20001030 	.word	0x20001030
 8003a84:	200014d0 	.word	0x200014d0
 8003a88:	3ff00000 	.word	0x3ff00000
 8003a8c:	40c38800 	.word	0x40c38800
 8003a90:	08009938 	.word	0x08009938

08003a94 <HAL_RTC_AlarmAEventCallback>:
			  		  	}

	game.positions[game.numLocations] = pos;
	game.numLocations++;
}
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8003a94:	b590      	push	{r4, r7, lr}
 8003a96:	b091      	sub	sp, #68	@ 0x44
 8003a98:	af04      	add	r7, sp, #16
 8003a9a:	6078      	str	r0, [r7, #4]
  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 8003a9c:	2380      	movs	r3, #128	@ 0x80
 8003a9e:	005a      	lsls	r2, r3, #1
 8003aa0:	2408      	movs	r4, #8
 8003aa2:	1939      	adds	r1, r7, r4
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	f002 fcf2 	bl	8006490 <HAL_RTC_GetAlarm>
  if(sAlarm.AlarmTime.Seconds>58) {
 8003aac:	0022      	movs	r2, r4
 8003aae:	18bb      	adds	r3, r7, r2
 8003ab0:	789b      	ldrb	r3, [r3, #2]
 8003ab2:	2b3a      	cmp	r3, #58	@ 0x3a
 8003ab4:	d903      	bls.n	8003abe <HAL_RTC_AlarmAEventCallback+0x2a>
    sAlarm.AlarmTime.Seconds=0;
 8003ab6:	18bb      	adds	r3, r7, r2
 8003ab8:	2200      	movs	r2, #0
 8003aba:	709a      	strb	r2, [r3, #2]
 8003abc:	e006      	b.n	8003acc <HAL_RTC_AlarmAEventCallback+0x38>
  }else{
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 8003abe:	2108      	movs	r1, #8
 8003ac0:	187b      	adds	r3, r7, r1
 8003ac2:	789b      	ldrb	r3, [r3, #2]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	187b      	adds	r3, r7, r1
 8003aca:	709a      	strb	r2, [r3, #2]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8003acc:	46c0      	nop			@ (mov r8, r8)
 8003ace:	2308      	movs	r3, #8
 8003ad0:	18f9      	adds	r1, r7, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	f002 fb9a 	bl	8006210 <HAL_RTC_SetAlarm_IT>
 8003adc:	1e03      	subs	r3, r0, #0
 8003ade:	d1f6      	bne.n	8003ace <HAL_RTC_AlarmAEventCallback+0x3a>
  	  drawString(30, 30, "testTime", BLACK, GREEN, 1, 1);
 8003ae0:	4a07      	ldr	r2, [pc, #28]	@ (8003b00 <HAL_RTC_AlarmAEventCallback+0x6c>)
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	9302      	str	r3, [sp, #8]
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	9301      	str	r3, [sp, #4]
 8003aea:	4b06      	ldr	r3, [pc, #24]	@ (8003b04 <HAL_RTC_AlarmAEventCallback+0x70>)
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	2300      	movs	r3, #0
 8003af0:	211e      	movs	r1, #30
 8003af2:	201e      	movs	r0, #30
 8003af4:	f7fe fb8c 	bl	8002210 <drawString>
}
 8003af8:	46c0      	nop			@ (mov r8, r8)
 8003afa:	46bd      	mov	sp, r7
 8003afc:	b00d      	add	sp, #52	@ 0x34
 8003afe:	bd90      	pop	{r4, r7, pc}
 8003b00:	08009954 	.word	0x08009954
 8003b04:	ffffe007 	.word	0xffffe007

08003b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b0c:	b672      	cpsid	i
}
 8003b0e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b10:	46c0      	nop			@ (mov r8, r8)
 8003b12:	e7fd      	b.n	8003b10 <Error_Handler+0x8>

08003b14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b1a:	4b11      	ldr	r3, [pc, #68]	@ (8003b60 <HAL_MspInit+0x4c>)
 8003b1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b1e:	4b10      	ldr	r3, [pc, #64]	@ (8003b60 <HAL_MspInit+0x4c>)
 8003b20:	2101      	movs	r1, #1
 8003b22:	430a      	orrs	r2, r1
 8003b24:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b26:	4b0e      	ldr	r3, [pc, #56]	@ (8003b60 <HAL_MspInit+0x4c>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b32:	4b0b      	ldr	r3, [pc, #44]	@ (8003b60 <HAL_MspInit+0x4c>)
 8003b34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b36:	4b0a      	ldr	r3, [pc, #40]	@ (8003b60 <HAL_MspInit+0x4c>)
 8003b38:	2180      	movs	r1, #128	@ 0x80
 8003b3a:	0549      	lsls	r1, r1, #21
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003b40:	4b07      	ldr	r3, [pc, #28]	@ (8003b60 <HAL_MspInit+0x4c>)
 8003b42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b44:	2380      	movs	r3, #128	@ 0x80
 8003b46:	055b      	lsls	r3, r3, #21
 8003b48:	4013      	ands	r3, r2
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003b4e:	23c0      	movs	r3, #192	@ 0xc0
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	0018      	movs	r0, r3
 8003b54:	f000 fb16 	bl	8004184 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b58:	46c0      	nop			@ (mov r8, r8)
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b002      	add	sp, #8
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40021000 	.word	0x40021000

08003b64 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b64:	b590      	push	{r4, r7, lr}
 8003b66:	b09d      	sub	sp, #116	@ 0x74
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b6c:	235c      	movs	r3, #92	@ 0x5c
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	0018      	movs	r0, r3
 8003b72:	2314      	movs	r3, #20
 8003b74:	001a      	movs	r2, r3
 8003b76:	2100      	movs	r1, #0
 8003b78:	f005 f8a0 	bl	8008cbc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b7c:	2410      	movs	r4, #16
 8003b7e:	193b      	adds	r3, r7, r4
 8003b80:	0018      	movs	r0, r3
 8003b82:	234c      	movs	r3, #76	@ 0x4c
 8003b84:	001a      	movs	r2, r3
 8003b86:	2100      	movs	r1, #0
 8003b88:	f005 f898 	bl	8008cbc <memset>
  if(hi2c->Instance==I2C1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a23      	ldr	r2, [pc, #140]	@ (8003c20 <HAL_I2C_MspInit+0xbc>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d13f      	bne.n	8003c16 <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003b96:	193b      	adds	r3, r7, r4
 8003b98:	2220      	movs	r2, #32
 8003b9a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003b9c:	193b      	adds	r3, r7, r4
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ba2:	193b      	adds	r3, r7, r4
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f002 f8f7 	bl	8005d98 <HAL_RCCEx_PeriphCLKConfig>
 8003baa:	1e03      	subs	r3, r0, #0
 8003bac:	d001      	beq.n	8003bb2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003bae:	f7ff ffab 	bl	8003b08 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8003c24 <HAL_I2C_MspInit+0xc0>)
 8003bb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8003c24 <HAL_I2C_MspInit+0xc0>)
 8003bb8:	2101      	movs	r1, #1
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	635a      	str	r2, [r3, #52]	@ 0x34
 8003bbe:	4b19      	ldr	r3, [pc, #100]	@ (8003c24 <HAL_I2C_MspInit+0xc0>)
 8003bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003bca:	215c      	movs	r1, #92	@ 0x5c
 8003bcc:	187b      	adds	r3, r7, r1
 8003bce:	22c0      	movs	r2, #192	@ 0xc0
 8003bd0:	00d2      	lsls	r2, r2, #3
 8003bd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bd4:	187b      	adds	r3, r7, r1
 8003bd6:	2212      	movs	r2, #18
 8003bd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bda:	187b      	adds	r3, r7, r1
 8003bdc:	2200      	movs	r2, #0
 8003bde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be0:	187b      	adds	r3, r7, r1
 8003be2:	2200      	movs	r2, #0
 8003be4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003be6:	187b      	adds	r3, r7, r1
 8003be8:	2206      	movs	r2, #6
 8003bea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bec:	187a      	adds	r2, r7, r1
 8003bee:	23a0      	movs	r3, #160	@ 0xa0
 8003bf0:	05db      	lsls	r3, r3, #23
 8003bf2:	0011      	movs	r1, r2
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f000 fb8f 	bl	8004318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8003c24 <HAL_I2C_MspInit+0xc0>)
 8003bfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bfe:	4b09      	ldr	r3, [pc, #36]	@ (8003c24 <HAL_I2C_MspInit+0xc0>)
 8003c00:	2180      	movs	r1, #128	@ 0x80
 8003c02:	0389      	lsls	r1, r1, #14
 8003c04:	430a      	orrs	r2, r1
 8003c06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003c08:	4b06      	ldr	r3, [pc, #24]	@ (8003c24 <HAL_I2C_MspInit+0xc0>)
 8003c0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c0c:	2380      	movs	r3, #128	@ 0x80
 8003c0e:	039b      	lsls	r3, r3, #14
 8003c10:	4013      	ands	r3, r2
 8003c12:	60bb      	str	r3, [r7, #8]
 8003c14:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003c16:	46c0      	nop			@ (mov r8, r8)
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	b01d      	add	sp, #116	@ 0x74
 8003c1c:	bd90      	pop	{r4, r7, pc}
 8003c1e:	46c0      	nop			@ (mov r8, r8)
 8003c20:	40005400 	.word	0x40005400
 8003c24:	40021000 	.word	0x40021000

08003c28 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c28:	b590      	push	{r4, r7, lr}
 8003c2a:	b08b      	sub	sp, #44	@ 0x2c
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c30:	2414      	movs	r4, #20
 8003c32:	193b      	adds	r3, r7, r4
 8003c34:	0018      	movs	r0, r3
 8003c36:	2314      	movs	r3, #20
 8003c38:	001a      	movs	r2, r3
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	f005 f83e 	bl	8008cbc <memset>
  if(hspi->Instance==SPI1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a2c      	ldr	r2, [pc, #176]	@ (8003cf8 <HAL_SPI_MspInit+0xd0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d151      	bne.n	8003cee <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8003cfc <HAL_SPI_MspInit+0xd4>)
 8003c4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c4e:	4b2b      	ldr	r3, [pc, #172]	@ (8003cfc <HAL_SPI_MspInit+0xd4>)
 8003c50:	2180      	movs	r1, #128	@ 0x80
 8003c52:	0149      	lsls	r1, r1, #5
 8003c54:	430a      	orrs	r2, r1
 8003c56:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c58:	4b28      	ldr	r3, [pc, #160]	@ (8003cfc <HAL_SPI_MspInit+0xd4>)
 8003c5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c5c:	2380      	movs	r3, #128	@ 0x80
 8003c5e:	015b      	lsls	r3, r3, #5
 8003c60:	4013      	ands	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
 8003c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c66:	4b25      	ldr	r3, [pc, #148]	@ (8003cfc <HAL_SPI_MspInit+0xd4>)
 8003c68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c6a:	4b24      	ldr	r3, [pc, #144]	@ (8003cfc <HAL_SPI_MspInit+0xd4>)
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c72:	4b22      	ldr	r3, [pc, #136]	@ (8003cfc <HAL_SPI_MspInit+0xd4>)
 8003c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c76:	2201      	movs	r2, #1
 8003c78:	4013      	ands	r3, r2
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8003cfc <HAL_SPI_MspInit+0xd4>)
 8003c80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c82:	4b1e      	ldr	r3, [pc, #120]	@ (8003cfc <HAL_SPI_MspInit+0xd4>)
 8003c84:	2108      	movs	r1, #8
 8003c86:	430a      	orrs	r2, r1
 8003c88:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8003cfc <HAL_SPI_MspInit+0xd4>)
 8003c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c8e:	2208      	movs	r2, #8
 8003c90:	4013      	ands	r3, r2
 8003c92:	60bb      	str	r3, [r7, #8]
 8003c94:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PD5     ------> SPI1_MISO
    PD6     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003c96:	193b      	adds	r3, r7, r4
 8003c98:	2202      	movs	r2, #2
 8003c9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c9c:	193b      	adds	r3, r7, r4
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca2:	193b      	adds	r3, r7, r4
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ca8:	193b      	adds	r3, r7, r4
 8003caa:	2200      	movs	r2, #0
 8003cac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003cae:	193b      	adds	r3, r7, r4
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb4:	193a      	adds	r2, r7, r4
 8003cb6:	23a0      	movs	r3, #160	@ 0xa0
 8003cb8:	05db      	lsls	r3, r3, #23
 8003cba:	0011      	movs	r1, r2
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f000 fb2b 	bl	8004318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003cc2:	0021      	movs	r1, r4
 8003cc4:	187b      	adds	r3, r7, r1
 8003cc6:	2260      	movs	r2, #96	@ 0x60
 8003cc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cca:	187b      	adds	r3, r7, r1
 8003ccc:	2202      	movs	r2, #2
 8003cce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd0:	187b      	adds	r3, r7, r1
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd6:	187b      	adds	r3, r7, r1
 8003cd8:	2200      	movs	r2, #0
 8003cda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8003cdc:	187b      	adds	r3, r7, r1
 8003cde:	2201      	movs	r2, #1
 8003ce0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ce2:	187b      	adds	r3, r7, r1
 8003ce4:	4a06      	ldr	r2, [pc, #24]	@ (8003d00 <HAL_SPI_MspInit+0xd8>)
 8003ce6:	0019      	movs	r1, r3
 8003ce8:	0010      	movs	r0, r2
 8003cea:	f000 fb15 	bl	8004318 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003cee:	46c0      	nop			@ (mov r8, r8)
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	b00b      	add	sp, #44	@ 0x2c
 8003cf4:	bd90      	pop	{r4, r7, pc}
 8003cf6:	46c0      	nop			@ (mov r8, r8)
 8003cf8:	40013000 	.word	0x40013000
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	50000c00 	.word	0x50000c00

08003d04 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a0a      	ldr	r2, [pc, #40]	@ (8003d3c <HAL_TIM_Base_MspInit+0x38>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d10d      	bne.n	8003d32 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003d16:	4b0a      	ldr	r3, [pc, #40]	@ (8003d40 <HAL_TIM_Base_MspInit+0x3c>)
 8003d18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d1a:	4b09      	ldr	r3, [pc, #36]	@ (8003d40 <HAL_TIM_Base_MspInit+0x3c>)
 8003d1c:	2180      	movs	r1, #128	@ 0x80
 8003d1e:	02c9      	lsls	r1, r1, #11
 8003d20:	430a      	orrs	r2, r1
 8003d22:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d24:	4b06      	ldr	r3, [pc, #24]	@ (8003d40 <HAL_TIM_Base_MspInit+0x3c>)
 8003d26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d28:	2380      	movs	r3, #128	@ 0x80
 8003d2a:	02db      	lsls	r3, r3, #11
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8003d32:	46c0      	nop			@ (mov r8, r8)
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b004      	add	sp, #16
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	46c0      	nop			@ (mov r8, r8)
 8003d3c:	40014800 	.word	0x40014800
 8003d40:	40021000 	.word	0x40021000

08003d44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d44:	b590      	push	{r4, r7, lr}
 8003d46:	b089      	sub	sp, #36	@ 0x24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d4c:	240c      	movs	r4, #12
 8003d4e:	193b      	adds	r3, r7, r4
 8003d50:	0018      	movs	r0, r3
 8003d52:	2314      	movs	r3, #20
 8003d54:	001a      	movs	r2, r3
 8003d56:	2100      	movs	r1, #0
 8003d58:	f004 ffb0 	bl	8008cbc <memset>
  if(htim->Instance==TIM17)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a14      	ldr	r2, [pc, #80]	@ (8003db4 <HAL_TIM_MspPostInit+0x70>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d122      	bne.n	8003dac <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d66:	4b14      	ldr	r3, [pc, #80]	@ (8003db8 <HAL_TIM_MspPostInit+0x74>)
 8003d68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d6a:	4b13      	ldr	r3, [pc, #76]	@ (8003db8 <HAL_TIM_MspPostInit+0x74>)
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	635a      	str	r2, [r3, #52]	@ 0x34
 8003d72:	4b11      	ldr	r3, [pc, #68]	@ (8003db8 <HAL_TIM_MspPostInit+0x74>)
 8003d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d76:	2201      	movs	r2, #1
 8003d78:	4013      	ands	r3, r2
 8003d7a:	60bb      	str	r3, [r7, #8]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003d7e:	0021      	movs	r1, r4
 8003d80:	187b      	adds	r3, r7, r1
 8003d82:	2280      	movs	r2, #128	@ 0x80
 8003d84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d86:	187b      	adds	r3, r7, r1
 8003d88:	2202      	movs	r2, #2
 8003d8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8c:	187b      	adds	r3, r7, r1
 8003d8e:	2200      	movs	r2, #0
 8003d90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d92:	187b      	adds	r3, r7, r1
 8003d94:	2200      	movs	r2, #0
 8003d96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8003d98:	187b      	adds	r3, r7, r1
 8003d9a:	2205      	movs	r2, #5
 8003d9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d9e:	187a      	adds	r2, r7, r1
 8003da0:	23a0      	movs	r3, #160	@ 0xa0
 8003da2:	05db      	lsls	r3, r3, #23
 8003da4:	0011      	movs	r1, r2
 8003da6:	0018      	movs	r0, r3
 8003da8:	f000 fab6 	bl	8004318 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003dac:	46c0      	nop			@ (mov r8, r8)
 8003dae:	46bd      	mov	sp, r7
 8003db0:	b009      	add	sp, #36	@ 0x24
 8003db2:	bd90      	pop	{r4, r7, pc}
 8003db4:	40014800 	.word	0x40014800
 8003db8:	40021000 	.word	0x40021000

08003dbc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003dbc:	b590      	push	{r4, r7, lr}
 8003dbe:	b09f      	sub	sp, #124	@ 0x7c
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc4:	2364      	movs	r3, #100	@ 0x64
 8003dc6:	18fb      	adds	r3, r7, r3
 8003dc8:	0018      	movs	r0, r3
 8003dca:	2314      	movs	r3, #20
 8003dcc:	001a      	movs	r2, r3
 8003dce:	2100      	movs	r1, #0
 8003dd0:	f004 ff74 	bl	8008cbc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003dd4:	2418      	movs	r4, #24
 8003dd6:	193b      	adds	r3, r7, r4
 8003dd8:	0018      	movs	r0, r3
 8003dda:	234c      	movs	r3, #76	@ 0x4c
 8003ddc:	001a      	movs	r2, r3
 8003dde:	2100      	movs	r1, #0
 8003de0:	f004 ff6c 	bl	8008cbc <memset>
  if(huart->Instance==USART1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a45      	ldr	r2, [pc, #276]	@ (8003f00 <HAL_UART_MspInit+0x144>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d13e      	bne.n	8003e6c <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003dee:	193b      	adds	r3, r7, r4
 8003df0:	2201      	movs	r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003df4:	193b      	adds	r3, r7, r4
 8003df6:	2200      	movs	r2, #0
 8003df8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003dfa:	193b      	adds	r3, r7, r4
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	f001 ffcb 	bl	8005d98 <HAL_RCCEx_PeriphCLKConfig>
 8003e02:	1e03      	subs	r3, r0, #0
 8003e04:	d001      	beq.n	8003e0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003e06:	f7ff fe7f 	bl	8003b08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e0a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f04 <HAL_UART_MspInit+0x148>)
 8003e0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e0e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f04 <HAL_UART_MspInit+0x148>)
 8003e10:	2180      	movs	r1, #128	@ 0x80
 8003e12:	01c9      	lsls	r1, r1, #7
 8003e14:	430a      	orrs	r2, r1
 8003e16:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e18:	4b3a      	ldr	r3, [pc, #232]	@ (8003f04 <HAL_UART_MspInit+0x148>)
 8003e1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e1c:	2380      	movs	r3, #128	@ 0x80
 8003e1e:	01db      	lsls	r3, r3, #7
 8003e20:	4013      	ands	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e26:	4b37      	ldr	r3, [pc, #220]	@ (8003f04 <HAL_UART_MspInit+0x148>)
 8003e28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e2a:	4b36      	ldr	r3, [pc, #216]	@ (8003f04 <HAL_UART_MspInit+0x148>)
 8003e2c:	2104      	movs	r1, #4
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e32:	4b34      	ldr	r3, [pc, #208]	@ (8003f04 <HAL_UART_MspInit+0x148>)
 8003e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e36:	2204      	movs	r2, #4
 8003e38:	4013      	ands	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003e3e:	2164      	movs	r1, #100	@ 0x64
 8003e40:	187b      	adds	r3, r7, r1
 8003e42:	2230      	movs	r2, #48	@ 0x30
 8003e44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e46:	187b      	adds	r3, r7, r1
 8003e48:	2202      	movs	r2, #2
 8003e4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4c:	187b      	adds	r3, r7, r1
 8003e4e:	2200      	movs	r2, #0
 8003e50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e52:	187b      	adds	r3, r7, r1
 8003e54:	2200      	movs	r2, #0
 8003e56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003e58:	187b      	adds	r3, r7, r1
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e5e:	187b      	adds	r3, r7, r1
 8003e60:	4a29      	ldr	r2, [pc, #164]	@ (8003f08 <HAL_UART_MspInit+0x14c>)
 8003e62:	0019      	movs	r1, r3
 8003e64:	0010      	movs	r0, r2
 8003e66:	f000 fa57 	bl	8004318 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8003e6a:	e044      	b.n	8003ef6 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a26      	ldr	r2, [pc, #152]	@ (8003f0c <HAL_UART_MspInit+0x150>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d13f      	bne.n	8003ef6 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003e76:	2118      	movs	r1, #24
 8003e78:	187b      	adds	r3, r7, r1
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003e7e:	187b      	adds	r3, r7, r1
 8003e80:	2200      	movs	r2, #0
 8003e82:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e84:	187b      	adds	r3, r7, r1
 8003e86:	0018      	movs	r0, r3
 8003e88:	f001 ff86 	bl	8005d98 <HAL_RCCEx_PeriphCLKConfig>
 8003e8c:	1e03      	subs	r3, r0, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8003e90:	f7ff fe3a 	bl	8003b08 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e94:	4b1b      	ldr	r3, [pc, #108]	@ (8003f04 <HAL_UART_MspInit+0x148>)
 8003e96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e98:	4b1a      	ldr	r3, [pc, #104]	@ (8003f04 <HAL_UART_MspInit+0x148>)
 8003e9a:	2180      	movs	r1, #128	@ 0x80
 8003e9c:	0289      	lsls	r1, r1, #10
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ea2:	4b18      	ldr	r3, [pc, #96]	@ (8003f04 <HAL_UART_MspInit+0x148>)
 8003ea4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ea6:	2380      	movs	r3, #128	@ 0x80
 8003ea8:	029b      	lsls	r3, r3, #10
 8003eaa:	4013      	ands	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eb0:	4b14      	ldr	r3, [pc, #80]	@ (8003f04 <HAL_UART_MspInit+0x148>)
 8003eb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003eb4:	4b13      	ldr	r3, [pc, #76]	@ (8003f04 <HAL_UART_MspInit+0x148>)
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ebc:	4b11      	ldr	r3, [pc, #68]	@ (8003f04 <HAL_UART_MspInit+0x148>)
 8003ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	60bb      	str	r3, [r7, #8]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003ec8:	2164      	movs	r1, #100	@ 0x64
 8003eca:	187b      	adds	r3, r7, r1
 8003ecc:	220c      	movs	r2, #12
 8003ece:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed0:	187b      	adds	r3, r7, r1
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed6:	187b      	adds	r3, r7, r1
 8003ed8:	2200      	movs	r2, #0
 8003eda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003edc:	187b      	adds	r3, r7, r1
 8003ede:	2200      	movs	r2, #0
 8003ee0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003ee2:	187b      	adds	r3, r7, r1
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ee8:	187a      	adds	r2, r7, r1
 8003eea:	23a0      	movs	r3, #160	@ 0xa0
 8003eec:	05db      	lsls	r3, r3, #23
 8003eee:	0011      	movs	r1, r2
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f000 fa11 	bl	8004318 <HAL_GPIO_Init>
}
 8003ef6:	46c0      	nop			@ (mov r8, r8)
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	b01f      	add	sp, #124	@ 0x7c
 8003efc:	bd90      	pop	{r4, r7, pc}
 8003efe:	46c0      	nop			@ (mov r8, r8)
 8003f00:	40013800 	.word	0x40013800
 8003f04:	40021000 	.word	0x40021000
 8003f08:	50000800 	.word	0x50000800
 8003f0c:	40004400 	.word	0x40004400

08003f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003f14:	46c0      	nop			@ (mov r8, r8)
 8003f16:	e7fd      	b.n	8003f14 <NMI_Handler+0x4>

08003f18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f1c:	46c0      	nop			@ (mov r8, r8)
 8003f1e:	e7fd      	b.n	8003f1c <HardFault_Handler+0x4>

08003f20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003f24:	46c0      	nop			@ (mov r8, r8)
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f2e:	46c0      	nop			@ (mov r8, r8)
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f38:	f000 f8e4 	bl	8004104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f3c:	46c0      	nop			@ (mov r8, r8)
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003f48:	4b05      	ldr	r3, [pc, #20]	@ (8003f60 <RTC_TAMP_IRQHandler+0x1c>)
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f002 fb66 	bl	800661c <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003f50:	4b03      	ldr	r3, [pc, #12]	@ (8003f60 <RTC_TAMP_IRQHandler+0x1c>)
 8003f52:	0018      	movs	r0, r3
 8003f54:	f002 fbe5 	bl	8006722 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8003f58:	46c0      	nop			@ (mov r8, r8)
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	46c0      	nop			@ (mov r8, r8)
 8003f60:	20001360 	.word	0x20001360

08003f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f6c:	4a14      	ldr	r2, [pc, #80]	@ (8003fc0 <_sbrk+0x5c>)
 8003f6e:	4b15      	ldr	r3, [pc, #84]	@ (8003fc4 <_sbrk+0x60>)
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f78:	4b13      	ldr	r3, [pc, #76]	@ (8003fc8 <_sbrk+0x64>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d102      	bne.n	8003f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f80:	4b11      	ldr	r3, [pc, #68]	@ (8003fc8 <_sbrk+0x64>)
 8003f82:	4a12      	ldr	r2, [pc, #72]	@ (8003fcc <_sbrk+0x68>)
 8003f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f86:	4b10      	ldr	r3, [pc, #64]	@ (8003fc8 <_sbrk+0x64>)
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	18d3      	adds	r3, r2, r3
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d207      	bcs.n	8003fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f94:	f004 fe9a 	bl	8008ccc <__errno>
 8003f98:	0003      	movs	r3, r0
 8003f9a:	220c      	movs	r2, #12
 8003f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	425b      	negs	r3, r3
 8003fa2:	e009      	b.n	8003fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fa4:	4b08      	ldr	r3, [pc, #32]	@ (8003fc8 <_sbrk+0x64>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003faa:	4b07      	ldr	r3, [pc, #28]	@ (8003fc8 <_sbrk+0x64>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	18d2      	adds	r2, r2, r3
 8003fb2:	4b05      	ldr	r3, [pc, #20]	@ (8003fc8 <_sbrk+0x64>)
 8003fb4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
}
 8003fb8:	0018      	movs	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b006      	add	sp, #24
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20024000 	.word	0x20024000
 8003fc4:	00000400 	.word	0x00000400
 8003fc8:	20001564 	.word	0x20001564
 8003fcc:	200016b8 	.word	0x200016b8

08003fd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003fd4:	46c0      	nop			@ (mov r8, r8)
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003fdc:	480d      	ldr	r0, [pc, #52]	@ (8004014 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003fde:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003fe0:	f7ff fff6 	bl	8003fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fe4:	480c      	ldr	r0, [pc, #48]	@ (8004018 <LoopForever+0x6>)
  ldr r1, =_edata
 8003fe6:	490d      	ldr	r1, [pc, #52]	@ (800401c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8004020 <LoopForever+0xe>)
  movs r3, #0
 8003fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fec:	e002      	b.n	8003ff4 <LoopCopyDataInit>

08003fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ff2:	3304      	adds	r3, #4

08003ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ff8:	d3f9      	bcc.n	8003fee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8004024 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ffc:	4c0a      	ldr	r4, [pc, #40]	@ (8004028 <LoopForever+0x16>)
  movs r3, #0
 8003ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004000:	e001      	b.n	8004006 <LoopFillZerobss>

08004002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004004:	3204      	adds	r2, #4

08004006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004008:	d3fb      	bcc.n	8004002 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800400a:	f004 fe65 	bl	8008cd8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800400e:	f7fe fe41 	bl	8002c94 <main>

08004012 <LoopForever>:

LoopForever:
  b LoopForever
 8004012:	e7fe      	b.n	8004012 <LoopForever>
  ldr   r0, =_estack
 8004014:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8004018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800401c:	20000ee0 	.word	0x20000ee0
  ldr r2, =_sidata
 8004020:	0800a0c0 	.word	0x0800a0c0
  ldr r2, =_sbss
 8004024:	20000ee0 	.word	0x20000ee0
  ldr r4, =_ebss
 8004028:	200016b4 	.word	0x200016b4

0800402c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800402c:	e7fe      	b.n	800402c <ADC1_COMP_IRQHandler>
	...

08004030 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004036:	1dfb      	adds	r3, r7, #7
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800403c:	4b0b      	ldr	r3, [pc, #44]	@ (800406c <HAL_Init+0x3c>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b0a      	ldr	r3, [pc, #40]	@ (800406c <HAL_Init+0x3c>)
 8004042:	2180      	movs	r1, #128	@ 0x80
 8004044:	0049      	lsls	r1, r1, #1
 8004046:	430a      	orrs	r2, r1
 8004048:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800404a:	2003      	movs	r0, #3
 800404c:	f000 f810 	bl	8004070 <HAL_InitTick>
 8004050:	1e03      	subs	r3, r0, #0
 8004052:	d003      	beq.n	800405c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004054:	1dfb      	adds	r3, r7, #7
 8004056:	2201      	movs	r2, #1
 8004058:	701a      	strb	r2, [r3, #0]
 800405a:	e001      	b.n	8004060 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800405c:	f7ff fd5a 	bl	8003b14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004060:	1dfb      	adds	r3, r7, #7
 8004062:	781b      	ldrb	r3, [r3, #0]
}
 8004064:	0018      	movs	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	b002      	add	sp, #8
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40022000 	.word	0x40022000

08004070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004070:	b590      	push	{r4, r7, lr}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004078:	230f      	movs	r3, #15
 800407a:	18fb      	adds	r3, r7, r3
 800407c:	2200      	movs	r2, #0
 800407e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004080:	4b1d      	ldr	r3, [pc, #116]	@ (80040f8 <HAL_InitTick+0x88>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d02b      	beq.n	80040e0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004088:	4b1c      	ldr	r3, [pc, #112]	@ (80040fc <HAL_InitTick+0x8c>)
 800408a:	681c      	ldr	r4, [r3, #0]
 800408c:	4b1a      	ldr	r3, [pc, #104]	@ (80040f8 <HAL_InitTick+0x88>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	0019      	movs	r1, r3
 8004092:	23fa      	movs	r3, #250	@ 0xfa
 8004094:	0098      	lsls	r0, r3, #2
 8004096:	f7fc f847 	bl	8000128 <__udivsi3>
 800409a:	0003      	movs	r3, r0
 800409c:	0019      	movs	r1, r3
 800409e:	0020      	movs	r0, r4
 80040a0:	f7fc f842 	bl	8000128 <__udivsi3>
 80040a4:	0003      	movs	r3, r0
 80040a6:	0018      	movs	r0, r3
 80040a8:	f000 f929 	bl	80042fe <HAL_SYSTICK_Config>
 80040ac:	1e03      	subs	r3, r0, #0
 80040ae:	d112      	bne.n	80040d6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	d80a      	bhi.n	80040cc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	2301      	movs	r3, #1
 80040ba:	425b      	negs	r3, r3
 80040bc:	2200      	movs	r2, #0
 80040be:	0018      	movs	r0, r3
 80040c0:	f000 f908 	bl	80042d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80040c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004100 <HAL_InitTick+0x90>)
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	e00d      	b.n	80040e8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80040cc:	230f      	movs	r3, #15
 80040ce:	18fb      	adds	r3, r7, r3
 80040d0:	2201      	movs	r2, #1
 80040d2:	701a      	strb	r2, [r3, #0]
 80040d4:	e008      	b.n	80040e8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80040d6:	230f      	movs	r3, #15
 80040d8:	18fb      	adds	r3, r7, r3
 80040da:	2201      	movs	r2, #1
 80040dc:	701a      	strb	r2, [r3, #0]
 80040de:	e003      	b.n	80040e8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80040e0:	230f      	movs	r3, #15
 80040e2:	18fb      	adds	r3, r7, r3
 80040e4:	2201      	movs	r2, #1
 80040e6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80040e8:	230f      	movs	r3, #15
 80040ea:	18fb      	adds	r3, r7, r3
 80040ec:	781b      	ldrb	r3, [r3, #0]
}
 80040ee:	0018      	movs	r0, r3
 80040f0:	46bd      	mov	sp, r7
 80040f2:	b005      	add	sp, #20
 80040f4:	bd90      	pop	{r4, r7, pc}
 80040f6:	46c0      	nop			@ (mov r8, r8)
 80040f8:	20000e8c 	.word	0x20000e8c
 80040fc:	20000e84 	.word	0x20000e84
 8004100:	20000e88 	.word	0x20000e88

08004104 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004108:	4b05      	ldr	r3, [pc, #20]	@ (8004120 <HAL_IncTick+0x1c>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	001a      	movs	r2, r3
 800410e:	4b05      	ldr	r3, [pc, #20]	@ (8004124 <HAL_IncTick+0x20>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	18d2      	adds	r2, r2, r3
 8004114:	4b03      	ldr	r3, [pc, #12]	@ (8004124 <HAL_IncTick+0x20>)
 8004116:	601a      	str	r2, [r3, #0]
}
 8004118:	46c0      	nop			@ (mov r8, r8)
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	46c0      	nop			@ (mov r8, r8)
 8004120:	20000e8c 	.word	0x20000e8c
 8004124:	20001568 	.word	0x20001568

08004128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  return uwTick;
 800412c:	4b02      	ldr	r3, [pc, #8]	@ (8004138 <HAL_GetTick+0x10>)
 800412e:	681b      	ldr	r3, [r3, #0]
}
 8004130:	0018      	movs	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	46c0      	nop			@ (mov r8, r8)
 8004138:	20001568 	.word	0x20001568

0800413c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004144:	f7ff fff0 	bl	8004128 <HAL_GetTick>
 8004148:	0003      	movs	r3, r0
 800414a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	3301      	adds	r3, #1
 8004154:	d005      	beq.n	8004162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004156:	4b0a      	ldr	r3, [pc, #40]	@ (8004180 <HAL_Delay+0x44>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	001a      	movs	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	189b      	adds	r3, r3, r2
 8004160:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004162:	46c0      	nop			@ (mov r8, r8)
 8004164:	f7ff ffe0 	bl	8004128 <HAL_GetTick>
 8004168:	0002      	movs	r2, r0
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	429a      	cmp	r2, r3
 8004172:	d8f7      	bhi.n	8004164 <HAL_Delay+0x28>
  {
  }
}
 8004174:	46c0      	nop			@ (mov r8, r8)
 8004176:	46c0      	nop			@ (mov r8, r8)
 8004178:	46bd      	mov	sp, r7
 800417a:	b004      	add	sp, #16
 800417c:	bd80      	pop	{r7, pc}
 800417e:	46c0      	nop			@ (mov r8, r8)
 8004180:	20000e8c 	.word	0x20000e8c

08004184 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800418c:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a06      	ldr	r2, [pc, #24]	@ (80041ac <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8004192:	4013      	ands	r3, r2
 8004194:	0019      	movs	r1, r3
 8004196:	4b04      	ldr	r3, [pc, #16]	@ (80041a8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	430a      	orrs	r2, r1
 800419c:	601a      	str	r2, [r3, #0]
}
 800419e:	46c0      	nop			@ (mov r8, r8)
 80041a0:	46bd      	mov	sp, r7
 80041a2:	b002      	add	sp, #8
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	46c0      	nop			@ (mov r8, r8)
 80041a8:	40010000 	.word	0x40010000
 80041ac:	fffff9ff 	.word	0xfffff9ff

080041b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041b0:	b590      	push	{r4, r7, lr}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	0002      	movs	r2, r0
 80041b8:	6039      	str	r1, [r7, #0]
 80041ba:	1dfb      	adds	r3, r7, #7
 80041bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80041be:	1dfb      	adds	r3, r7, #7
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80041c4:	d828      	bhi.n	8004218 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041c6:	4a2f      	ldr	r2, [pc, #188]	@ (8004284 <__NVIC_SetPriority+0xd4>)
 80041c8:	1dfb      	adds	r3, r7, #7
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	b25b      	sxtb	r3, r3
 80041ce:	089b      	lsrs	r3, r3, #2
 80041d0:	33c0      	adds	r3, #192	@ 0xc0
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	589b      	ldr	r3, [r3, r2]
 80041d6:	1dfa      	adds	r2, r7, #7
 80041d8:	7812      	ldrb	r2, [r2, #0]
 80041da:	0011      	movs	r1, r2
 80041dc:	2203      	movs	r2, #3
 80041de:	400a      	ands	r2, r1
 80041e0:	00d2      	lsls	r2, r2, #3
 80041e2:	21ff      	movs	r1, #255	@ 0xff
 80041e4:	4091      	lsls	r1, r2
 80041e6:	000a      	movs	r2, r1
 80041e8:	43d2      	mvns	r2, r2
 80041ea:	401a      	ands	r2, r3
 80041ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	019b      	lsls	r3, r3, #6
 80041f2:	22ff      	movs	r2, #255	@ 0xff
 80041f4:	401a      	ands	r2, r3
 80041f6:	1dfb      	adds	r3, r7, #7
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	0018      	movs	r0, r3
 80041fc:	2303      	movs	r3, #3
 80041fe:	4003      	ands	r3, r0
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004204:	481f      	ldr	r0, [pc, #124]	@ (8004284 <__NVIC_SetPriority+0xd4>)
 8004206:	1dfb      	adds	r3, r7, #7
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	b25b      	sxtb	r3, r3
 800420c:	089b      	lsrs	r3, r3, #2
 800420e:	430a      	orrs	r2, r1
 8004210:	33c0      	adds	r3, #192	@ 0xc0
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004216:	e031      	b.n	800427c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004218:	4a1b      	ldr	r2, [pc, #108]	@ (8004288 <__NVIC_SetPriority+0xd8>)
 800421a:	1dfb      	adds	r3, r7, #7
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	0019      	movs	r1, r3
 8004220:	230f      	movs	r3, #15
 8004222:	400b      	ands	r3, r1
 8004224:	3b08      	subs	r3, #8
 8004226:	089b      	lsrs	r3, r3, #2
 8004228:	3306      	adds	r3, #6
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	18d3      	adds	r3, r2, r3
 800422e:	3304      	adds	r3, #4
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	1dfa      	adds	r2, r7, #7
 8004234:	7812      	ldrb	r2, [r2, #0]
 8004236:	0011      	movs	r1, r2
 8004238:	2203      	movs	r2, #3
 800423a:	400a      	ands	r2, r1
 800423c:	00d2      	lsls	r2, r2, #3
 800423e:	21ff      	movs	r1, #255	@ 0xff
 8004240:	4091      	lsls	r1, r2
 8004242:	000a      	movs	r2, r1
 8004244:	43d2      	mvns	r2, r2
 8004246:	401a      	ands	r2, r3
 8004248:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	019b      	lsls	r3, r3, #6
 800424e:	22ff      	movs	r2, #255	@ 0xff
 8004250:	401a      	ands	r2, r3
 8004252:	1dfb      	adds	r3, r7, #7
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	0018      	movs	r0, r3
 8004258:	2303      	movs	r3, #3
 800425a:	4003      	ands	r3, r0
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004260:	4809      	ldr	r0, [pc, #36]	@ (8004288 <__NVIC_SetPriority+0xd8>)
 8004262:	1dfb      	adds	r3, r7, #7
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	001c      	movs	r4, r3
 8004268:	230f      	movs	r3, #15
 800426a:	4023      	ands	r3, r4
 800426c:	3b08      	subs	r3, #8
 800426e:	089b      	lsrs	r3, r3, #2
 8004270:	430a      	orrs	r2, r1
 8004272:	3306      	adds	r3, #6
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	18c3      	adds	r3, r0, r3
 8004278:	3304      	adds	r3, #4
 800427a:	601a      	str	r2, [r3, #0]
}
 800427c:	46c0      	nop			@ (mov r8, r8)
 800427e:	46bd      	mov	sp, r7
 8004280:	b003      	add	sp, #12
 8004282:	bd90      	pop	{r4, r7, pc}
 8004284:	e000e100 	.word	0xe000e100
 8004288:	e000ed00 	.word	0xe000ed00

0800428c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	1e5a      	subs	r2, r3, #1
 8004298:	2380      	movs	r3, #128	@ 0x80
 800429a:	045b      	lsls	r3, r3, #17
 800429c:	429a      	cmp	r2, r3
 800429e:	d301      	bcc.n	80042a4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042a0:	2301      	movs	r3, #1
 80042a2:	e010      	b.n	80042c6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042a4:	4b0a      	ldr	r3, [pc, #40]	@ (80042d0 <SysTick_Config+0x44>)
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	3a01      	subs	r2, #1
 80042aa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042ac:	2301      	movs	r3, #1
 80042ae:	425b      	negs	r3, r3
 80042b0:	2103      	movs	r1, #3
 80042b2:	0018      	movs	r0, r3
 80042b4:	f7ff ff7c 	bl	80041b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042b8:	4b05      	ldr	r3, [pc, #20]	@ (80042d0 <SysTick_Config+0x44>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042be:	4b04      	ldr	r3, [pc, #16]	@ (80042d0 <SysTick_Config+0x44>)
 80042c0:	2207      	movs	r2, #7
 80042c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	0018      	movs	r0, r3
 80042c8:	46bd      	mov	sp, r7
 80042ca:	b002      	add	sp, #8
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	46c0      	nop			@ (mov r8, r8)
 80042d0:	e000e010 	.word	0xe000e010

080042d4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
 80042de:	210f      	movs	r1, #15
 80042e0:	187b      	adds	r3, r7, r1
 80042e2:	1c02      	adds	r2, r0, #0
 80042e4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	187b      	adds	r3, r7, r1
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	b25b      	sxtb	r3, r3
 80042ee:	0011      	movs	r1, r2
 80042f0:	0018      	movs	r0, r3
 80042f2:	f7ff ff5d 	bl	80041b0 <__NVIC_SetPriority>
}
 80042f6:	46c0      	nop			@ (mov r8, r8)
 80042f8:	46bd      	mov	sp, r7
 80042fa:	b004      	add	sp, #16
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	0018      	movs	r0, r3
 800430a:	f7ff ffbf 	bl	800428c <SysTick_Config>
 800430e:	0003      	movs	r3, r0
}
 8004310:	0018      	movs	r0, r3
 8004312:	46bd      	mov	sp, r7
 8004314:	b002      	add	sp, #8
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004326:	e14d      	b.n	80045c4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2101      	movs	r1, #1
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4091      	lsls	r1, r2
 8004332:	000a      	movs	r2, r1
 8004334:	4013      	ands	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d100      	bne.n	8004340 <HAL_GPIO_Init+0x28>
 800433e:	e13e      	b.n	80045be <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	2203      	movs	r2, #3
 8004346:	4013      	ands	r3, r2
 8004348:	2b01      	cmp	r3, #1
 800434a:	d005      	beq.n	8004358 <HAL_GPIO_Init+0x40>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2203      	movs	r2, #3
 8004352:	4013      	ands	r3, r2
 8004354:	2b02      	cmp	r3, #2
 8004356:	d130      	bne.n	80043ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	2203      	movs	r2, #3
 8004364:	409a      	lsls	r2, r3
 8004366:	0013      	movs	r3, r2
 8004368:	43da      	mvns	r2, r3
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	4013      	ands	r3, r2
 800436e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	409a      	lsls	r2, r3
 800437a:	0013      	movs	r3, r2
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800438e:	2201      	movs	r2, #1
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	409a      	lsls	r2, r3
 8004394:	0013      	movs	r3, r2
 8004396:	43da      	mvns	r2, r3
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	4013      	ands	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	091b      	lsrs	r3, r3, #4
 80043a4:	2201      	movs	r2, #1
 80043a6:	401a      	ands	r2, r3
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	409a      	lsls	r2, r3
 80043ac:	0013      	movs	r3, r2
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2203      	movs	r2, #3
 80043c0:	4013      	ands	r3, r2
 80043c2:	2b03      	cmp	r3, #3
 80043c4:	d017      	beq.n	80043f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	2203      	movs	r2, #3
 80043d2:	409a      	lsls	r2, r3
 80043d4:	0013      	movs	r3, r2
 80043d6:	43da      	mvns	r2, r3
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4013      	ands	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	409a      	lsls	r2, r3
 80043e8:	0013      	movs	r3, r2
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2203      	movs	r2, #3
 80043fc:	4013      	ands	r3, r2
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d123      	bne.n	800444a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	08da      	lsrs	r2, r3, #3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3208      	adds	r2, #8
 800440a:	0092      	lsls	r2, r2, #2
 800440c:	58d3      	ldr	r3, [r2, r3]
 800440e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	2207      	movs	r2, #7
 8004414:	4013      	ands	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	220f      	movs	r2, #15
 800441a:	409a      	lsls	r2, r3
 800441c:	0013      	movs	r3, r2
 800441e:	43da      	mvns	r2, r3
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	4013      	ands	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2107      	movs	r1, #7
 800442e:	400b      	ands	r3, r1
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	409a      	lsls	r2, r3
 8004434:	0013      	movs	r3, r2
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	4313      	orrs	r3, r2
 800443a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	08da      	lsrs	r2, r3, #3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3208      	adds	r2, #8
 8004444:	0092      	lsls	r2, r2, #2
 8004446:	6939      	ldr	r1, [r7, #16]
 8004448:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	2203      	movs	r2, #3
 8004456:	409a      	lsls	r2, r3
 8004458:	0013      	movs	r3, r2
 800445a:	43da      	mvns	r2, r3
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	4013      	ands	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2203      	movs	r2, #3
 8004468:	401a      	ands	r2, r3
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	409a      	lsls	r2, r3
 8004470:	0013      	movs	r3, r2
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	23c0      	movs	r3, #192	@ 0xc0
 8004484:	029b      	lsls	r3, r3, #10
 8004486:	4013      	ands	r3, r2
 8004488:	d100      	bne.n	800448c <HAL_GPIO_Init+0x174>
 800448a:	e098      	b.n	80045be <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800448c:	4a53      	ldr	r2, [pc, #332]	@ (80045dc <HAL_GPIO_Init+0x2c4>)
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	089b      	lsrs	r3, r3, #2
 8004492:	3318      	adds	r3, #24
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	589b      	ldr	r3, [r3, r2]
 8004498:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2203      	movs	r2, #3
 800449e:	4013      	ands	r3, r2
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	220f      	movs	r2, #15
 80044a4:	409a      	lsls	r2, r3
 80044a6:	0013      	movs	r3, r2
 80044a8:	43da      	mvns	r2, r3
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	4013      	ands	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	23a0      	movs	r3, #160	@ 0xa0
 80044b4:	05db      	lsls	r3, r3, #23
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d019      	beq.n	80044ee <HAL_GPIO_Init+0x1d6>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a48      	ldr	r2, [pc, #288]	@ (80045e0 <HAL_GPIO_Init+0x2c8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d013      	beq.n	80044ea <HAL_GPIO_Init+0x1d2>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a47      	ldr	r2, [pc, #284]	@ (80045e4 <HAL_GPIO_Init+0x2cc>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00d      	beq.n	80044e6 <HAL_GPIO_Init+0x1ce>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a46      	ldr	r2, [pc, #280]	@ (80045e8 <HAL_GPIO_Init+0x2d0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d007      	beq.n	80044e2 <HAL_GPIO_Init+0x1ca>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a45      	ldr	r2, [pc, #276]	@ (80045ec <HAL_GPIO_Init+0x2d4>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d101      	bne.n	80044de <HAL_GPIO_Init+0x1c6>
 80044da:	2304      	movs	r3, #4
 80044dc:	e008      	b.n	80044f0 <HAL_GPIO_Init+0x1d8>
 80044de:	2305      	movs	r3, #5
 80044e0:	e006      	b.n	80044f0 <HAL_GPIO_Init+0x1d8>
 80044e2:	2303      	movs	r3, #3
 80044e4:	e004      	b.n	80044f0 <HAL_GPIO_Init+0x1d8>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e002      	b.n	80044f0 <HAL_GPIO_Init+0x1d8>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <HAL_GPIO_Init+0x1d8>
 80044ee:	2300      	movs	r3, #0
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	2103      	movs	r1, #3
 80044f4:	400a      	ands	r2, r1
 80044f6:	00d2      	lsls	r2, r2, #3
 80044f8:	4093      	lsls	r3, r2
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004500:	4936      	ldr	r1, [pc, #216]	@ (80045dc <HAL_GPIO_Init+0x2c4>)
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	089b      	lsrs	r3, r3, #2
 8004506:	3318      	adds	r3, #24
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800450e:	4b33      	ldr	r3, [pc, #204]	@ (80045dc <HAL_GPIO_Init+0x2c4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	43da      	mvns	r2, r3
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	4013      	ands	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	2380      	movs	r3, #128	@ 0x80
 8004524:	035b      	lsls	r3, r3, #13
 8004526:	4013      	ands	r3, r2
 8004528:	d003      	beq.n	8004532 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4313      	orrs	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004532:	4b2a      	ldr	r3, [pc, #168]	@ (80045dc <HAL_GPIO_Init+0x2c4>)
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004538:	4b28      	ldr	r3, [pc, #160]	@ (80045dc <HAL_GPIO_Init+0x2c4>)
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	43da      	mvns	r2, r3
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	4013      	ands	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	2380      	movs	r3, #128	@ 0x80
 800454e:	039b      	lsls	r3, r3, #14
 8004550:	4013      	ands	r3, r2
 8004552:	d003      	beq.n	800455c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800455c:	4b1f      	ldr	r3, [pc, #124]	@ (80045dc <HAL_GPIO_Init+0x2c4>)
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004562:	4a1e      	ldr	r2, [pc, #120]	@ (80045dc <HAL_GPIO_Init+0x2c4>)
 8004564:	2384      	movs	r3, #132	@ 0x84
 8004566:	58d3      	ldr	r3, [r2, r3]
 8004568:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	43da      	mvns	r2, r3
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	4013      	ands	r3, r2
 8004572:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	2380      	movs	r3, #128	@ 0x80
 800457a:	029b      	lsls	r3, r3, #10
 800457c:	4013      	ands	r3, r2
 800457e:	d003      	beq.n	8004588 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	4313      	orrs	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004588:	4914      	ldr	r1, [pc, #80]	@ (80045dc <HAL_GPIO_Init+0x2c4>)
 800458a:	2284      	movs	r2, #132	@ 0x84
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004590:	4a12      	ldr	r2, [pc, #72]	@ (80045dc <HAL_GPIO_Init+0x2c4>)
 8004592:	2380      	movs	r3, #128	@ 0x80
 8004594:	58d3      	ldr	r3, [r2, r3]
 8004596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	43da      	mvns	r2, r3
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	4013      	ands	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	2380      	movs	r3, #128	@ 0x80
 80045a8:	025b      	lsls	r3, r3, #9
 80045aa:	4013      	ands	r3, r2
 80045ac:	d003      	beq.n	80045b6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045b6:	4909      	ldr	r1, [pc, #36]	@ (80045dc <HAL_GPIO_Init+0x2c4>)
 80045b8:	2280      	movs	r2, #128	@ 0x80
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	3301      	adds	r3, #1
 80045c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	40da      	lsrs	r2, r3
 80045cc:	1e13      	subs	r3, r2, #0
 80045ce:	d000      	beq.n	80045d2 <HAL_GPIO_Init+0x2ba>
 80045d0:	e6aa      	b.n	8004328 <HAL_GPIO_Init+0x10>
  }
}
 80045d2:	46c0      	nop			@ (mov r8, r8)
 80045d4:	46c0      	nop			@ (mov r8, r8)
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b006      	add	sp, #24
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40021800 	.word	0x40021800
 80045e0:	50000400 	.word	0x50000400
 80045e4:	50000800 	.word	0x50000800
 80045e8:	50000c00 	.word	0x50000c00
 80045ec:	50001000 	.word	0x50001000

080045f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	000a      	movs	r2, r1
 80045fa:	1cbb      	adds	r3, r7, #2
 80045fc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	1cba      	adds	r2, r7, #2
 8004604:	8812      	ldrh	r2, [r2, #0]
 8004606:	4013      	ands	r3, r2
 8004608:	d004      	beq.n	8004614 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800460a:	230f      	movs	r3, #15
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	2201      	movs	r2, #1
 8004610:	701a      	strb	r2, [r3, #0]
 8004612:	e003      	b.n	800461c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004614:	230f      	movs	r3, #15
 8004616:	18fb      	adds	r3, r7, r3
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800461c:	230f      	movs	r3, #15
 800461e:	18fb      	adds	r3, r7, r3
 8004620:	781b      	ldrb	r3, [r3, #0]
}
 8004622:	0018      	movs	r0, r3
 8004624:	46bd      	mov	sp, r7
 8004626:	b004      	add	sp, #16
 8004628:	bd80      	pop	{r7, pc}

0800462a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b082      	sub	sp, #8
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	0008      	movs	r0, r1
 8004634:	0011      	movs	r1, r2
 8004636:	1cbb      	adds	r3, r7, #2
 8004638:	1c02      	adds	r2, r0, #0
 800463a:	801a      	strh	r2, [r3, #0]
 800463c:	1c7b      	adds	r3, r7, #1
 800463e:	1c0a      	adds	r2, r1, #0
 8004640:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004642:	1c7b      	adds	r3, r7, #1
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d004      	beq.n	8004654 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800464a:	1cbb      	adds	r3, r7, #2
 800464c:	881a      	ldrh	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004652:	e003      	b.n	800465c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004654:	1cbb      	adds	r3, r7, #2
 8004656:	881a      	ldrh	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800465c:	46c0      	nop			@ (mov r8, r8)
 800465e:	46bd      	mov	sp, r7
 8004660:	b002      	add	sp, #8
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e08f      	b.n	8004796 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2241      	movs	r2, #65	@ 0x41
 800467a:	5c9b      	ldrb	r3, [r3, r2]
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d107      	bne.n	8004692 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2240      	movs	r2, #64	@ 0x40
 8004686:	2100      	movs	r1, #0
 8004688:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	0018      	movs	r0, r3
 800468e:	f7ff fa69 	bl	8003b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2241      	movs	r2, #65	@ 0x41
 8004696:	2124      	movs	r1, #36	@ 0x24
 8004698:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2101      	movs	r1, #1
 80046a6:	438a      	bics	r2, r1
 80046a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	493b      	ldr	r1, [pc, #236]	@ (80047a0 <HAL_I2C_Init+0x13c>)
 80046b4:	400a      	ands	r2, r1
 80046b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4938      	ldr	r1, [pc, #224]	@ (80047a4 <HAL_I2C_Init+0x140>)
 80046c4:	400a      	ands	r2, r1
 80046c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d108      	bne.n	80046e2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689a      	ldr	r2, [r3, #8]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2180      	movs	r1, #128	@ 0x80
 80046da:	0209      	lsls	r1, r1, #8
 80046dc:	430a      	orrs	r2, r1
 80046de:	609a      	str	r2, [r3, #8]
 80046e0:	e007      	b.n	80046f2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2184      	movs	r1, #132	@ 0x84
 80046ec:	0209      	lsls	r1, r1, #8
 80046ee:	430a      	orrs	r2, r1
 80046f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d109      	bne.n	800470e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2180      	movs	r1, #128	@ 0x80
 8004706:	0109      	lsls	r1, r1, #4
 8004708:	430a      	orrs	r2, r1
 800470a:	605a      	str	r2, [r3, #4]
 800470c:	e007      	b.n	800471e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4923      	ldr	r1, [pc, #140]	@ (80047a8 <HAL_I2C_Init+0x144>)
 800471a:	400a      	ands	r2, r1
 800471c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4920      	ldr	r1, [pc, #128]	@ (80047ac <HAL_I2C_Init+0x148>)
 800472a:	430a      	orrs	r2, r1
 800472c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	491a      	ldr	r1, [pc, #104]	@ (80047a4 <HAL_I2C_Init+0x140>)
 800473a:	400a      	ands	r2, r1
 800473c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691a      	ldr	r2, [r3, #16]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	431a      	orrs	r2, r3
 8004748:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	69d9      	ldr	r1, [r3, #28]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1a      	ldr	r2, [r3, #32]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2101      	movs	r1, #1
 8004774:	430a      	orrs	r2, r1
 8004776:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2241      	movs	r2, #65	@ 0x41
 8004782:	2120      	movs	r1, #32
 8004784:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2242      	movs	r2, #66	@ 0x42
 8004790:	2100      	movs	r1, #0
 8004792:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	0018      	movs	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	b002      	add	sp, #8
 800479c:	bd80      	pop	{r7, pc}
 800479e:	46c0      	nop			@ (mov r8, r8)
 80047a0:	f0ffffff 	.word	0xf0ffffff
 80047a4:	ffff7fff 	.word	0xffff7fff
 80047a8:	fffff7ff 	.word	0xfffff7ff
 80047ac:	02008000 	.word	0x02008000

080047b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80047b0:	b590      	push	{r4, r7, lr}
 80047b2:	b089      	sub	sp, #36	@ 0x24
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	0008      	movs	r0, r1
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	0019      	movs	r1, r3
 80047be:	230a      	movs	r3, #10
 80047c0:	18fb      	adds	r3, r7, r3
 80047c2:	1c02      	adds	r2, r0, #0
 80047c4:	801a      	strh	r2, [r3, #0]
 80047c6:	2308      	movs	r3, #8
 80047c8:	18fb      	adds	r3, r7, r3
 80047ca:	1c0a      	adds	r2, r1, #0
 80047cc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2241      	movs	r2, #65	@ 0x41
 80047d2:	5c9b      	ldrb	r3, [r3, r2]
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	d000      	beq.n	80047dc <HAL_I2C_Master_Transmit+0x2c>
 80047da:	e10a      	b.n	80049f2 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2240      	movs	r2, #64	@ 0x40
 80047e0:	5c9b      	ldrb	r3, [r3, r2]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_I2C_Master_Transmit+0x3a>
 80047e6:	2302      	movs	r3, #2
 80047e8:	e104      	b.n	80049f4 <HAL_I2C_Master_Transmit+0x244>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2240      	movs	r2, #64	@ 0x40
 80047ee:	2101      	movs	r1, #1
 80047f0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047f2:	f7ff fc99 	bl	8004128 <HAL_GetTick>
 80047f6:	0003      	movs	r3, r0
 80047f8:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047fa:	2380      	movs	r3, #128	@ 0x80
 80047fc:	0219      	lsls	r1, r3, #8
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	2319      	movs	r3, #25
 8004806:	2201      	movs	r2, #1
 8004808:	f000 fa26 	bl	8004c58 <I2C_WaitOnFlagUntilTimeout>
 800480c:	1e03      	subs	r3, r0, #0
 800480e:	d001      	beq.n	8004814 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e0ef      	b.n	80049f4 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2241      	movs	r2, #65	@ 0x41
 8004818:	2121      	movs	r1, #33	@ 0x21
 800481a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2242      	movs	r2, #66	@ 0x42
 8004820:	2110      	movs	r1, #16
 8004822:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2208      	movs	r2, #8
 8004834:	18ba      	adds	r2, r7, r2
 8004836:	8812      	ldrh	r2, [r2, #0]
 8004838:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004844:	b29b      	uxth	r3, r3
 8004846:	2bff      	cmp	r3, #255	@ 0xff
 8004848:	d906      	bls.n	8004858 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	22ff      	movs	r2, #255	@ 0xff
 800484e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004850:	2380      	movs	r3, #128	@ 0x80
 8004852:	045b      	lsls	r3, r3, #17
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	e007      	b.n	8004868 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800485c:	b29a      	uxth	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004862:	2380      	movs	r3, #128	@ 0x80
 8004864:	049b      	lsls	r3, r3, #18
 8004866:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800486c:	2b00      	cmp	r3, #0
 800486e:	d027      	beq.n	80048c0 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004874:	781a      	ldrb	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800488a:	b29b      	uxth	r3, r3
 800488c:	3b01      	subs	r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004898:	3b01      	subs	r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	3301      	adds	r3, #1
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	697c      	ldr	r4, [r7, #20]
 80048ac:	230a      	movs	r3, #10
 80048ae:	18fb      	adds	r3, r7, r3
 80048b0:	8819      	ldrh	r1, [r3, #0]
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	4b51      	ldr	r3, [pc, #324]	@ (80049fc <HAL_I2C_Master_Transmit+0x24c>)
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	0023      	movs	r3, r4
 80048ba:	f000 fc45 	bl	8005148 <I2C_TransferConfig>
 80048be:	e06f      	b.n	80049a0 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	697c      	ldr	r4, [r7, #20]
 80048c8:	230a      	movs	r3, #10
 80048ca:	18fb      	adds	r3, r7, r3
 80048cc:	8819      	ldrh	r1, [r3, #0]
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	4b4a      	ldr	r3, [pc, #296]	@ (80049fc <HAL_I2C_Master_Transmit+0x24c>)
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	0023      	movs	r3, r4
 80048d6:	f000 fc37 	bl	8005148 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80048da:	e061      	b.n	80049a0 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	0018      	movs	r0, r3
 80048e4:	f000 fa10 	bl	8004d08 <I2C_WaitOnTXISFlagUntilTimeout>
 80048e8:	1e03      	subs	r3, r0, #0
 80048ea:	d001      	beq.n	80048f0 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e081      	b.n	80049f4 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f4:	781a      	ldrb	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004918:	3b01      	subs	r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d03a      	beq.n	80049a0 <HAL_I2C_Master_Transmit+0x1f0>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800492e:	2b00      	cmp	r3, #0
 8004930:	d136      	bne.n	80049a0 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004932:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	0013      	movs	r3, r2
 800493c:	2200      	movs	r2, #0
 800493e:	2180      	movs	r1, #128	@ 0x80
 8004940:	f000 f98a 	bl	8004c58 <I2C_WaitOnFlagUntilTimeout>
 8004944:	1e03      	subs	r3, r0, #0
 8004946:	d001      	beq.n	800494c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e053      	b.n	80049f4 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004950:	b29b      	uxth	r3, r3
 8004952:	2bff      	cmp	r3, #255	@ 0xff
 8004954:	d911      	bls.n	800497a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	22ff      	movs	r2, #255	@ 0xff
 800495a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004960:	b2da      	uxtb	r2, r3
 8004962:	2380      	movs	r3, #128	@ 0x80
 8004964:	045c      	lsls	r4, r3, #17
 8004966:	230a      	movs	r3, #10
 8004968:	18fb      	adds	r3, r7, r3
 800496a:	8819      	ldrh	r1, [r3, #0]
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	2300      	movs	r3, #0
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	0023      	movs	r3, r4
 8004974:	f000 fbe8 	bl	8005148 <I2C_TransferConfig>
 8004978:	e012      	b.n	80049a0 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004988:	b2da      	uxtb	r2, r3
 800498a:	2380      	movs	r3, #128	@ 0x80
 800498c:	049c      	lsls	r4, r3, #18
 800498e:	230a      	movs	r3, #10
 8004990:	18fb      	adds	r3, r7, r3
 8004992:	8819      	ldrh	r1, [r3, #0]
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	2300      	movs	r3, #0
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	0023      	movs	r3, r4
 800499c:	f000 fbd4 	bl	8005148 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d198      	bne.n	80048dc <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	0018      	movs	r0, r3
 80049b2:	f000 f9ef 	bl	8004d94 <I2C_WaitOnSTOPFlagUntilTimeout>
 80049b6:	1e03      	subs	r3, r0, #0
 80049b8:	d001      	beq.n	80049be <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e01a      	b.n	80049f4 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2220      	movs	r2, #32
 80049c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	490b      	ldr	r1, [pc, #44]	@ (8004a00 <HAL_I2C_Master_Transmit+0x250>)
 80049d2:	400a      	ands	r2, r1
 80049d4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2241      	movs	r2, #65	@ 0x41
 80049da:	2120      	movs	r1, #32
 80049dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2242      	movs	r2, #66	@ 0x42
 80049e2:	2100      	movs	r1, #0
 80049e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2240      	movs	r2, #64	@ 0x40
 80049ea:	2100      	movs	r1, #0
 80049ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	e000      	b.n	80049f4 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80049f2:	2302      	movs	r3, #2
  }
}
 80049f4:	0018      	movs	r0, r3
 80049f6:	46bd      	mov	sp, r7
 80049f8:	b007      	add	sp, #28
 80049fa:	bd90      	pop	{r4, r7, pc}
 80049fc:	80002000 	.word	0x80002000
 8004a00:	fe00e800 	.word	0xfe00e800

08004a04 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004a04:	b590      	push	{r4, r7, lr}
 8004a06:	b089      	sub	sp, #36	@ 0x24
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	0008      	movs	r0, r1
 8004a0e:	607a      	str	r2, [r7, #4]
 8004a10:	0019      	movs	r1, r3
 8004a12:	230a      	movs	r3, #10
 8004a14:	18fb      	adds	r3, r7, r3
 8004a16:	1c02      	adds	r2, r0, #0
 8004a18:	801a      	strh	r2, [r3, #0]
 8004a1a:	2308      	movs	r3, #8
 8004a1c:	18fb      	adds	r3, r7, r3
 8004a1e:	1c0a      	adds	r2, r1, #0
 8004a20:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2241      	movs	r2, #65	@ 0x41
 8004a26:	5c9b      	ldrb	r3, [r3, r2]
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b20      	cmp	r3, #32
 8004a2c:	d000      	beq.n	8004a30 <HAL_I2C_Master_Receive+0x2c>
 8004a2e:	e0e8      	b.n	8004c02 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2240      	movs	r2, #64	@ 0x40
 8004a34:	5c9b      	ldrb	r3, [r3, r2]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_I2C_Master_Receive+0x3a>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e0e2      	b.n	8004c04 <HAL_I2C_Master_Receive+0x200>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2240      	movs	r2, #64	@ 0x40
 8004a42:	2101      	movs	r1, #1
 8004a44:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a46:	f7ff fb6f 	bl	8004128 <HAL_GetTick>
 8004a4a:	0003      	movs	r3, r0
 8004a4c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a4e:	2380      	movs	r3, #128	@ 0x80
 8004a50:	0219      	lsls	r1, r3, #8
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	2319      	movs	r3, #25
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f000 f8fc 	bl	8004c58 <I2C_WaitOnFlagUntilTimeout>
 8004a60:	1e03      	subs	r3, r0, #0
 8004a62:	d001      	beq.n	8004a68 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0cd      	b.n	8004c04 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2241      	movs	r2, #65	@ 0x41
 8004a6c:	2122      	movs	r1, #34	@ 0x22
 8004a6e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2242      	movs	r2, #66	@ 0x42
 8004a74:	2110      	movs	r1, #16
 8004a76:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2208      	movs	r2, #8
 8004a88:	18ba      	adds	r2, r7, r2
 8004a8a:	8812      	ldrh	r2, [r2, #0]
 8004a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2bff      	cmp	r3, #255	@ 0xff
 8004a9c:	d911      	bls.n	8004ac2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	22ff      	movs	r2, #255	@ 0xff
 8004aa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	2380      	movs	r3, #128	@ 0x80
 8004aac:	045c      	lsls	r4, r3, #17
 8004aae:	230a      	movs	r3, #10
 8004ab0:	18fb      	adds	r3, r7, r3
 8004ab2:	8819      	ldrh	r1, [r3, #0]
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	4b55      	ldr	r3, [pc, #340]	@ (8004c0c <HAL_I2C_Master_Receive+0x208>)
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	0023      	movs	r3, r4
 8004abc:	f000 fb44 	bl	8005148 <I2C_TransferConfig>
 8004ac0:	e076      	b.n	8004bb0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	2380      	movs	r3, #128	@ 0x80
 8004ad4:	049c      	lsls	r4, r3, #18
 8004ad6:	230a      	movs	r3, #10
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	8819      	ldrh	r1, [r3, #0]
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	4b4b      	ldr	r3, [pc, #300]	@ (8004c0c <HAL_I2C_Master_Receive+0x208>)
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	0023      	movs	r3, r4
 8004ae4:	f000 fb30 	bl	8005148 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004ae8:	e062      	b.n	8004bb0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	0018      	movs	r0, r3
 8004af2:	f000 f993 	bl	8004e1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004af6:	1e03      	subs	r3, r0, #0
 8004af8:	d001      	beq.n	8004afe <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e082      	b.n	8004c04 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d03a      	beq.n	8004bb0 <HAL_I2C_Master_Receive+0x1ac>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d136      	bne.n	8004bb0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	0013      	movs	r3, r2
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	2180      	movs	r1, #128	@ 0x80
 8004b50:	f000 f882 	bl	8004c58 <I2C_WaitOnFlagUntilTimeout>
 8004b54:	1e03      	subs	r3, r0, #0
 8004b56:	d001      	beq.n	8004b5c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e053      	b.n	8004c04 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2bff      	cmp	r3, #255	@ 0xff
 8004b64:	d911      	bls.n	8004b8a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	22ff      	movs	r2, #255	@ 0xff
 8004b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	2380      	movs	r3, #128	@ 0x80
 8004b74:	045c      	lsls	r4, r3, #17
 8004b76:	230a      	movs	r3, #10
 8004b78:	18fb      	adds	r3, r7, r3
 8004b7a:	8819      	ldrh	r1, [r3, #0]
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	2300      	movs	r3, #0
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	0023      	movs	r3, r4
 8004b84:	f000 fae0 	bl	8005148 <I2C_TransferConfig>
 8004b88:	e012      	b.n	8004bb0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	2380      	movs	r3, #128	@ 0x80
 8004b9c:	049c      	lsls	r4, r3, #18
 8004b9e:	230a      	movs	r3, #10
 8004ba0:	18fb      	adds	r3, r7, r3
 8004ba2:	8819      	ldrh	r1, [r3, #0]
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	0023      	movs	r3, r4
 8004bac:	f000 facc 	bl	8005148 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d197      	bne.n	8004aea <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	f000 f8e7 	bl	8004d94 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004bc6:	1e03      	subs	r3, r0, #0
 8004bc8:	d001      	beq.n	8004bce <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e01a      	b.n	8004c04 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	490b      	ldr	r1, [pc, #44]	@ (8004c10 <HAL_I2C_Master_Receive+0x20c>)
 8004be2:	400a      	ands	r2, r1
 8004be4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2241      	movs	r2, #65	@ 0x41
 8004bea:	2120      	movs	r1, #32
 8004bec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2242      	movs	r2, #66	@ 0x42
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2240      	movs	r2, #64	@ 0x40
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	e000      	b.n	8004c04 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004c02:	2302      	movs	r3, #2
  }
}
 8004c04:	0018      	movs	r0, r3
 8004c06:	46bd      	mov	sp, r7
 8004c08:	b007      	add	sp, #28
 8004c0a:	bd90      	pop	{r4, r7, pc}
 8004c0c:	80002400 	.word	0x80002400
 8004c10:	fe00e800 	.word	0xfe00e800

08004c14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	2202      	movs	r2, #2
 8004c24:	4013      	ands	r3, r2
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d103      	bne.n	8004c32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d007      	beq.n	8004c50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	699a      	ldr	r2, [r3, #24]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	619a      	str	r2, [r3, #24]
  }
}
 8004c50:	46c0      	nop			@ (mov r8, r8)
 8004c52:	46bd      	mov	sp, r7
 8004c54:	b002      	add	sp, #8
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	603b      	str	r3, [r7, #0]
 8004c64:	1dfb      	adds	r3, r7, #7
 8004c66:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c68:	e03a      	b.n	8004ce0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c6a:	69ba      	ldr	r2, [r7, #24]
 8004c6c:	6839      	ldr	r1, [r7, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	0018      	movs	r0, r3
 8004c72:	f000 f971 	bl	8004f58 <I2C_IsErrorOccurred>
 8004c76:	1e03      	subs	r3, r0, #0
 8004c78:	d001      	beq.n	8004c7e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e040      	b.n	8004d00 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	3301      	adds	r3, #1
 8004c82:	d02d      	beq.n	8004ce0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c84:	f7ff fa50 	bl	8004128 <HAL_GetTick>
 8004c88:	0002      	movs	r2, r0
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d302      	bcc.n	8004c9a <I2C_WaitOnFlagUntilTimeout+0x42>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d122      	bne.n	8004ce0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	425a      	negs	r2, r3
 8004caa:	4153      	adcs	r3, r2
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	001a      	movs	r2, r3
 8004cb0:	1dfb      	adds	r3, r7, #7
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d113      	bne.n	8004ce0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2241      	movs	r2, #65	@ 0x41
 8004cc8:	2120      	movs	r1, #32
 8004cca:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2242      	movs	r2, #66	@ 0x42
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2240      	movs	r2, #64	@ 0x40
 8004cd8:	2100      	movs	r1, #0
 8004cda:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e00f      	b.n	8004d00 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	425a      	negs	r2, r3
 8004cf0:	4153      	adcs	r3, r2
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	001a      	movs	r2, r3
 8004cf6:	1dfb      	adds	r3, r7, #7
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d0b5      	beq.n	8004c6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	0018      	movs	r0, r3
 8004d02:	46bd      	mov	sp, r7
 8004d04:	b004      	add	sp, #16
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d14:	e032      	b.n	8004d7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	68b9      	ldr	r1, [r7, #8]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	f000 f91b 	bl	8004f58 <I2C_IsErrorOccurred>
 8004d22:	1e03      	subs	r3, r0, #0
 8004d24:	d001      	beq.n	8004d2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e030      	b.n	8004d8c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	d025      	beq.n	8004d7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d30:	f7ff f9fa 	bl	8004128 <HAL_GetTick>
 8004d34:	0002      	movs	r2, r0
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d302      	bcc.n	8004d46 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d11a      	bne.n	8004d7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d013      	beq.n	8004d7c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d58:	2220      	movs	r2, #32
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2241      	movs	r2, #65	@ 0x41
 8004d64:	2120      	movs	r1, #32
 8004d66:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2242      	movs	r2, #66	@ 0x42
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2240      	movs	r2, #64	@ 0x40
 8004d74:	2100      	movs	r1, #0
 8004d76:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e007      	b.n	8004d8c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	2202      	movs	r2, #2
 8004d84:	4013      	ands	r3, r2
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d1c5      	bne.n	8004d16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	b004      	add	sp, #16
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004da0:	e02f      	b.n	8004e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	0018      	movs	r0, r3
 8004daa:	f000 f8d5 	bl	8004f58 <I2C_IsErrorOccurred>
 8004dae:	1e03      	subs	r3, r0, #0
 8004db0:	d001      	beq.n	8004db6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e02d      	b.n	8004e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db6:	f7ff f9b7 	bl	8004128 <HAL_GetTick>
 8004dba:	0002      	movs	r2, r0
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d302      	bcc.n	8004dcc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d11a      	bne.n	8004e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	2b20      	cmp	r3, #32
 8004dd8:	d013      	beq.n	8004e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dde:	2220      	movs	r2, #32
 8004de0:	431a      	orrs	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2241      	movs	r2, #65	@ 0x41
 8004dea:	2120      	movs	r1, #32
 8004dec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2242      	movs	r2, #66	@ 0x42
 8004df2:	2100      	movs	r1, #0
 8004df4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2240      	movs	r2, #64	@ 0x40
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e007      	b.n	8004e12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	d1c8      	bne.n	8004da2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	0018      	movs	r0, r3
 8004e14:	46bd      	mov	sp, r7
 8004e16:	b004      	add	sp, #16
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e28:	2317      	movs	r3, #23
 8004e2a:	18fb      	adds	r3, r7, r3
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004e30:	e07b      	b.n	8004f2a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f000 f88d 	bl	8004f58 <I2C_IsErrorOccurred>
 8004e3e:	1e03      	subs	r3, r0, #0
 8004e40:	d003      	beq.n	8004e4a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8004e42:	2317      	movs	r3, #23
 8004e44:	18fb      	adds	r3, r7, r3
 8004e46:	2201      	movs	r2, #1
 8004e48:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	2220      	movs	r2, #32
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b20      	cmp	r3, #32
 8004e56:	d140      	bne.n	8004eda <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8004e58:	2117      	movs	r1, #23
 8004e5a:	187b      	adds	r3, r7, r1
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d13b      	bne.n	8004eda <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	2204      	movs	r2, #4
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d106      	bne.n	8004e7e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004e78:	187b      	adds	r3, r7, r1
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	2210      	movs	r2, #16
 8004e86:	4013      	ands	r3, r2
 8004e88:	2b10      	cmp	r3, #16
 8004e8a:	d123      	bne.n	8004ed4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2210      	movs	r2, #16
 8004e92:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2204      	movs	r2, #4
 8004e98:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4929      	ldr	r1, [pc, #164]	@ (8004f54 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8004eae:	400a      	ands	r2, r1
 8004eb0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2241      	movs	r2, #65	@ 0x41
 8004eb6:	2120      	movs	r1, #32
 8004eb8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2242      	movs	r2, #66	@ 0x42
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2240      	movs	r2, #64	@ 0x40
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004eca:	2317      	movs	r3, #23
 8004ecc:	18fb      	adds	r3, r7, r3
 8004ece:	2201      	movs	r2, #1
 8004ed0:	701a      	strb	r2, [r3, #0]
 8004ed2:	e002      	b.n	8004eda <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004eda:	f7ff f925 	bl	8004128 <HAL_GetTick>
 8004ede:	0002      	movs	r2, r0
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d302      	bcc.n	8004ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d11c      	bne.n	8004f2a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8004ef0:	2017      	movs	r0, #23
 8004ef2:	183b      	adds	r3, r7, r0
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d117      	bne.n	8004f2a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	2204      	movs	r2, #4
 8004f02:	4013      	ands	r3, r2
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d010      	beq.n	8004f2a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	431a      	orrs	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2241      	movs	r2, #65	@ 0x41
 8004f18:	2120      	movs	r1, #32
 8004f1a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2240      	movs	r2, #64	@ 0x40
 8004f20:	2100      	movs	r1, #0
 8004f22:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004f24:	183b      	adds	r3, r7, r0
 8004f26:	2201      	movs	r2, #1
 8004f28:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	2204      	movs	r2, #4
 8004f32:	4013      	ands	r3, r2
 8004f34:	2b04      	cmp	r3, #4
 8004f36:	d005      	beq.n	8004f44 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004f38:	2317      	movs	r3, #23
 8004f3a:	18fb      	adds	r3, r7, r3
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d100      	bne.n	8004f44 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004f42:	e776      	b.n	8004e32 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8004f44:	2317      	movs	r3, #23
 8004f46:	18fb      	adds	r3, r7, r3
 8004f48:	781b      	ldrb	r3, [r3, #0]
}
 8004f4a:	0018      	movs	r0, r3
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	b006      	add	sp, #24
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	46c0      	nop			@ (mov r8, r8)
 8004f54:	fe00e800 	.word	0xfe00e800

08004f58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08a      	sub	sp, #40	@ 0x28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f64:	2327      	movs	r3, #39	@ 0x27
 8004f66:	18fb      	adds	r3, r7, r3
 8004f68:	2200      	movs	r2, #0
 8004f6a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004f74:	2300      	movs	r3, #0
 8004f76:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	2210      	movs	r2, #16
 8004f80:	4013      	ands	r3, r2
 8004f82:	d100      	bne.n	8004f86 <I2C_IsErrorOccurred+0x2e>
 8004f84:	e079      	b.n	800507a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2210      	movs	r2, #16
 8004f8c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f8e:	e057      	b.n	8005040 <I2C_IsErrorOccurred+0xe8>
 8004f90:	2227      	movs	r2, #39	@ 0x27
 8004f92:	18bb      	adds	r3, r7, r2
 8004f94:	18ba      	adds	r2, r7, r2
 8004f96:	7812      	ldrb	r2, [r2, #0]
 8004f98:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	d04f      	beq.n	8005040 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004fa0:	f7ff f8c2 	bl	8004128 <HAL_GetTick>
 8004fa4:	0002      	movs	r2, r0
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d302      	bcc.n	8004fb6 <I2C_IsErrorOccurred+0x5e>
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d144      	bne.n	8005040 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	2380      	movs	r3, #128	@ 0x80
 8004fbe:	01db      	lsls	r3, r3, #7
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004fc4:	2013      	movs	r0, #19
 8004fc6:	183b      	adds	r3, r7, r0
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	2142      	movs	r1, #66	@ 0x42
 8004fcc:	5c52      	ldrb	r2, [r2, r1]
 8004fce:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699a      	ldr	r2, [r3, #24]
 8004fd6:	2380      	movs	r3, #128	@ 0x80
 8004fd8:	021b      	lsls	r3, r3, #8
 8004fda:	401a      	ands	r2, r3
 8004fdc:	2380      	movs	r3, #128	@ 0x80
 8004fde:	021b      	lsls	r3, r3, #8
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d126      	bne.n	8005032 <I2C_IsErrorOccurred+0xda>
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	2380      	movs	r3, #128	@ 0x80
 8004fe8:	01db      	lsls	r3, r3, #7
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d021      	beq.n	8005032 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004fee:	183b      	adds	r3, r7, r0
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b20      	cmp	r3, #32
 8004ff4:	d01d      	beq.n	8005032 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2180      	movs	r1, #128	@ 0x80
 8005002:	01c9      	lsls	r1, r1, #7
 8005004:	430a      	orrs	r2, r1
 8005006:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005008:	f7ff f88e 	bl	8004128 <HAL_GetTick>
 800500c:	0003      	movs	r3, r0
 800500e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005010:	e00f      	b.n	8005032 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005012:	f7ff f889 	bl	8004128 <HAL_GetTick>
 8005016:	0002      	movs	r2, r0
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b19      	cmp	r3, #25
 800501e:	d908      	bls.n	8005032 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	2220      	movs	r2, #32
 8005024:	4313      	orrs	r3, r2
 8005026:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005028:	2327      	movs	r3, #39	@ 0x27
 800502a:	18fb      	adds	r3, r7, r3
 800502c:	2201      	movs	r2, #1
 800502e:	701a      	strb	r2, [r3, #0]

              break;
 8005030:	e006      	b.n	8005040 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	2220      	movs	r2, #32
 800503a:	4013      	ands	r3, r2
 800503c:	2b20      	cmp	r3, #32
 800503e:	d1e8      	bne.n	8005012 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	2220      	movs	r2, #32
 8005048:	4013      	ands	r3, r2
 800504a:	2b20      	cmp	r3, #32
 800504c:	d004      	beq.n	8005058 <I2C_IsErrorOccurred+0x100>
 800504e:	2327      	movs	r3, #39	@ 0x27
 8005050:	18fb      	adds	r3, r7, r3
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d09b      	beq.n	8004f90 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005058:	2327      	movs	r3, #39	@ 0x27
 800505a:	18fb      	adds	r3, r7, r3
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d103      	bne.n	800506a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2220      	movs	r2, #32
 8005068:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	2204      	movs	r2, #4
 800506e:	4313      	orrs	r3, r2
 8005070:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005072:	2327      	movs	r3, #39	@ 0x27
 8005074:	18fb      	adds	r3, r7, r3
 8005076:	2201      	movs	r2, #1
 8005078:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	2380      	movs	r3, #128	@ 0x80
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	4013      	ands	r3, r2
 800508a:	d00c      	beq.n	80050a6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	2201      	movs	r2, #1
 8005090:	4313      	orrs	r3, r2
 8005092:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2280      	movs	r2, #128	@ 0x80
 800509a:	0052      	lsls	r2, r2, #1
 800509c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800509e:	2327      	movs	r3, #39	@ 0x27
 80050a0:	18fb      	adds	r3, r7, r3
 80050a2:	2201      	movs	r2, #1
 80050a4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	2380      	movs	r3, #128	@ 0x80
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	4013      	ands	r3, r2
 80050ae:	d00c      	beq.n	80050ca <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	2208      	movs	r2, #8
 80050b4:	4313      	orrs	r3, r2
 80050b6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2280      	movs	r2, #128	@ 0x80
 80050be:	00d2      	lsls	r2, r2, #3
 80050c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050c2:	2327      	movs	r3, #39	@ 0x27
 80050c4:	18fb      	adds	r3, r7, r3
 80050c6:	2201      	movs	r2, #1
 80050c8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	2380      	movs	r3, #128	@ 0x80
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4013      	ands	r3, r2
 80050d2:	d00c      	beq.n	80050ee <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	2202      	movs	r2, #2
 80050d8:	4313      	orrs	r3, r2
 80050da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2280      	movs	r2, #128	@ 0x80
 80050e2:	0092      	lsls	r2, r2, #2
 80050e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050e6:	2327      	movs	r3, #39	@ 0x27
 80050e8:	18fb      	adds	r3, r7, r3
 80050ea:	2201      	movs	r2, #1
 80050ec:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80050ee:	2327      	movs	r3, #39	@ 0x27
 80050f0:	18fb      	adds	r3, r7, r3
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d01d      	beq.n	8005134 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	0018      	movs	r0, r3
 80050fc:	f7ff fd8a 	bl	8004c14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	490e      	ldr	r1, [pc, #56]	@ (8005144 <I2C_IsErrorOccurred+0x1ec>)
 800510c:	400a      	ands	r2, r1
 800510e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	431a      	orrs	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2241      	movs	r2, #65	@ 0x41
 8005120:	2120      	movs	r1, #32
 8005122:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2242      	movs	r2, #66	@ 0x42
 8005128:	2100      	movs	r1, #0
 800512a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2240      	movs	r2, #64	@ 0x40
 8005130:	2100      	movs	r1, #0
 8005132:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005134:	2327      	movs	r3, #39	@ 0x27
 8005136:	18fb      	adds	r3, r7, r3
 8005138:	781b      	ldrb	r3, [r3, #0]
}
 800513a:	0018      	movs	r0, r3
 800513c:	46bd      	mov	sp, r7
 800513e:	b00a      	add	sp, #40	@ 0x28
 8005140:	bd80      	pop	{r7, pc}
 8005142:	46c0      	nop			@ (mov r8, r8)
 8005144:	fe00e800 	.word	0xfe00e800

08005148 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005148:	b590      	push	{r4, r7, lr}
 800514a:	b087      	sub	sp, #28
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	0008      	movs	r0, r1
 8005152:	0011      	movs	r1, r2
 8005154:	607b      	str	r3, [r7, #4]
 8005156:	240a      	movs	r4, #10
 8005158:	193b      	adds	r3, r7, r4
 800515a:	1c02      	adds	r2, r0, #0
 800515c:	801a      	strh	r2, [r3, #0]
 800515e:	2009      	movs	r0, #9
 8005160:	183b      	adds	r3, r7, r0
 8005162:	1c0a      	adds	r2, r1, #0
 8005164:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005166:	193b      	adds	r3, r7, r4
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	059b      	lsls	r3, r3, #22
 800516c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800516e:	183b      	adds	r3, r7, r0
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	0419      	lsls	r1, r3, #16
 8005174:	23ff      	movs	r3, #255	@ 0xff
 8005176:	041b      	lsls	r3, r3, #16
 8005178:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800517a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005182:	4313      	orrs	r3, r2
 8005184:	005b      	lsls	r3, r3, #1
 8005186:	085b      	lsrs	r3, r3, #1
 8005188:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005192:	0d51      	lsrs	r1, r2, #21
 8005194:	2280      	movs	r2, #128	@ 0x80
 8005196:	00d2      	lsls	r2, r2, #3
 8005198:	400a      	ands	r2, r1
 800519a:	4907      	ldr	r1, [pc, #28]	@ (80051b8 <I2C_TransferConfig+0x70>)
 800519c:	430a      	orrs	r2, r1
 800519e:	43d2      	mvns	r2, r2
 80051a0:	401a      	ands	r2, r3
 80051a2:	0011      	movs	r1, r2
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80051ae:	46c0      	nop			@ (mov r8, r8)
 80051b0:	46bd      	mov	sp, r7
 80051b2:	b007      	add	sp, #28
 80051b4:	bd90      	pop	{r4, r7, pc}
 80051b6:	46c0      	nop			@ (mov r8, r8)
 80051b8:	03ff63ff 	.word	0x03ff63ff

080051bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2241      	movs	r2, #65	@ 0x41
 80051ca:	5c9b      	ldrb	r3, [r3, r2]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b20      	cmp	r3, #32
 80051d0:	d138      	bne.n	8005244 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2240      	movs	r2, #64	@ 0x40
 80051d6:	5c9b      	ldrb	r3, [r3, r2]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051dc:	2302      	movs	r3, #2
 80051de:	e032      	b.n	8005246 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2240      	movs	r2, #64	@ 0x40
 80051e4:	2101      	movs	r1, #1
 80051e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2241      	movs	r2, #65	@ 0x41
 80051ec:	2124      	movs	r1, #36	@ 0x24
 80051ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2101      	movs	r1, #1
 80051fc:	438a      	bics	r2, r1
 80051fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4911      	ldr	r1, [pc, #68]	@ (8005250 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800520c:	400a      	ands	r2, r1
 800520e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6819      	ldr	r1, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2101      	movs	r1, #1
 800522c:	430a      	orrs	r2, r1
 800522e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2241      	movs	r2, #65	@ 0x41
 8005234:	2120      	movs	r1, #32
 8005236:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2240      	movs	r2, #64	@ 0x40
 800523c:	2100      	movs	r1, #0
 800523e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	e000      	b.n	8005246 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005244:	2302      	movs	r3, #2
  }
}
 8005246:	0018      	movs	r0, r3
 8005248:	46bd      	mov	sp, r7
 800524a:	b002      	add	sp, #8
 800524c:	bd80      	pop	{r7, pc}
 800524e:	46c0      	nop			@ (mov r8, r8)
 8005250:	ffffefff 	.word	0xffffefff

08005254 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2241      	movs	r2, #65	@ 0x41
 8005262:	5c9b      	ldrb	r3, [r3, r2]
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b20      	cmp	r3, #32
 8005268:	d139      	bne.n	80052de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2240      	movs	r2, #64	@ 0x40
 800526e:	5c9b      	ldrb	r3, [r3, r2]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d101      	bne.n	8005278 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005274:	2302      	movs	r3, #2
 8005276:	e033      	b.n	80052e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2240      	movs	r2, #64	@ 0x40
 800527c:	2101      	movs	r1, #1
 800527e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2241      	movs	r2, #65	@ 0x41
 8005284:	2124      	movs	r1, #36	@ 0x24
 8005286:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2101      	movs	r1, #1
 8005294:	438a      	bics	r2, r1
 8005296:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4a11      	ldr	r2, [pc, #68]	@ (80052e8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80052a4:	4013      	ands	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	021b      	lsls	r3, r3, #8
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2101      	movs	r1, #1
 80052c6:	430a      	orrs	r2, r1
 80052c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2241      	movs	r2, #65	@ 0x41
 80052ce:	2120      	movs	r1, #32
 80052d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2240      	movs	r2, #64	@ 0x40
 80052d6:	2100      	movs	r1, #0
 80052d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80052da:	2300      	movs	r3, #0
 80052dc:	e000      	b.n	80052e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052de:	2302      	movs	r3, #2
  }
}
 80052e0:	0018      	movs	r0, r3
 80052e2:	46bd      	mov	sp, r7
 80052e4:	b004      	add	sp, #16
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	fffff0ff 	.word	0xfffff0ff

080052ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80052f4:	4b19      	ldr	r3, [pc, #100]	@ (800535c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a19      	ldr	r2, [pc, #100]	@ (8005360 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80052fa:	4013      	ands	r3, r2
 80052fc:	0019      	movs	r1, r3
 80052fe:	4b17      	ldr	r3, [pc, #92]	@ (800535c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	430a      	orrs	r2, r1
 8005304:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	2380      	movs	r3, #128	@ 0x80
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	429a      	cmp	r2, r3
 800530e:	d11f      	bne.n	8005350 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005310:	4b14      	ldr	r3, [pc, #80]	@ (8005364 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	0013      	movs	r3, r2
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	189b      	adds	r3, r3, r2
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	4912      	ldr	r1, [pc, #72]	@ (8005368 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800531e:	0018      	movs	r0, r3
 8005320:	f7fa ff02 	bl	8000128 <__udivsi3>
 8005324:	0003      	movs	r3, r0
 8005326:	3301      	adds	r3, #1
 8005328:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800532a:	e008      	b.n	800533e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	3b01      	subs	r3, #1
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	e001      	b.n	800533e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e009      	b.n	8005352 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800533e:	4b07      	ldr	r3, [pc, #28]	@ (800535c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005340:	695a      	ldr	r2, [r3, #20]
 8005342:	2380      	movs	r3, #128	@ 0x80
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	401a      	ands	r2, r3
 8005348:	2380      	movs	r3, #128	@ 0x80
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	429a      	cmp	r2, r3
 800534e:	d0ed      	beq.n	800532c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	0018      	movs	r0, r3
 8005354:	46bd      	mov	sp, r7
 8005356:	b004      	add	sp, #16
 8005358:	bd80      	pop	{r7, pc}
 800535a:	46c0      	nop			@ (mov r8, r8)
 800535c:	40007000 	.word	0x40007000
 8005360:	fffff9ff 	.word	0xfffff9ff
 8005364:	20000e84 	.word	0x20000e84
 8005368:	000f4240 	.word	0x000f4240

0800536c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005370:	4b03      	ldr	r3, [pc, #12]	@ (8005380 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	23e0      	movs	r3, #224	@ 0xe0
 8005376:	01db      	lsls	r3, r3, #7
 8005378:	4013      	ands	r3, r2
}
 800537a:	0018      	movs	r0, r3
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40021000 	.word	0x40021000

08005384 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b088      	sub	sp, #32
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d102      	bne.n	8005398 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	f000 fb50 	bl	8005a38 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2201      	movs	r2, #1
 800539e:	4013      	ands	r3, r2
 80053a0:	d100      	bne.n	80053a4 <HAL_RCC_OscConfig+0x20>
 80053a2:	e07c      	b.n	800549e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053a4:	4bc3      	ldr	r3, [pc, #780]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	2238      	movs	r2, #56	@ 0x38
 80053aa:	4013      	ands	r3, r2
 80053ac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053ae:	4bc1      	ldr	r3, [pc, #772]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	2203      	movs	r2, #3
 80053b4:	4013      	ands	r3, r2
 80053b6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	2b10      	cmp	r3, #16
 80053bc:	d102      	bne.n	80053c4 <HAL_RCC_OscConfig+0x40>
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	d002      	beq.n	80053ca <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	2b08      	cmp	r3, #8
 80053c8:	d10b      	bne.n	80053e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ca:	4bba      	ldr	r3, [pc, #744]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	2380      	movs	r3, #128	@ 0x80
 80053d0:	029b      	lsls	r3, r3, #10
 80053d2:	4013      	ands	r3, r2
 80053d4:	d062      	beq.n	800549c <HAL_RCC_OscConfig+0x118>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d15e      	bne.n	800549c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e32a      	b.n	8005a38 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	2380      	movs	r3, #128	@ 0x80
 80053e8:	025b      	lsls	r3, r3, #9
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d107      	bne.n	80053fe <HAL_RCC_OscConfig+0x7a>
 80053ee:	4bb1      	ldr	r3, [pc, #708]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	4bb0      	ldr	r3, [pc, #704]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 80053f4:	2180      	movs	r1, #128	@ 0x80
 80053f6:	0249      	lsls	r1, r1, #9
 80053f8:	430a      	orrs	r2, r1
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	e020      	b.n	8005440 <HAL_RCC_OscConfig+0xbc>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	23a0      	movs	r3, #160	@ 0xa0
 8005404:	02db      	lsls	r3, r3, #11
 8005406:	429a      	cmp	r2, r3
 8005408:	d10e      	bne.n	8005428 <HAL_RCC_OscConfig+0xa4>
 800540a:	4baa      	ldr	r3, [pc, #680]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	4ba9      	ldr	r3, [pc, #676]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 8005410:	2180      	movs	r1, #128	@ 0x80
 8005412:	02c9      	lsls	r1, r1, #11
 8005414:	430a      	orrs	r2, r1
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	4ba6      	ldr	r3, [pc, #664]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	4ba5      	ldr	r3, [pc, #660]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 800541e:	2180      	movs	r1, #128	@ 0x80
 8005420:	0249      	lsls	r1, r1, #9
 8005422:	430a      	orrs	r2, r1
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	e00b      	b.n	8005440 <HAL_RCC_OscConfig+0xbc>
 8005428:	4ba2      	ldr	r3, [pc, #648]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	4ba1      	ldr	r3, [pc, #644]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 800542e:	49a2      	ldr	r1, [pc, #648]	@ (80056b8 <HAL_RCC_OscConfig+0x334>)
 8005430:	400a      	ands	r2, r1
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	4b9f      	ldr	r3, [pc, #636]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	4b9e      	ldr	r3, [pc, #632]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 800543a:	49a0      	ldr	r1, [pc, #640]	@ (80056bc <HAL_RCC_OscConfig+0x338>)
 800543c:	400a      	ands	r2, r1
 800543e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d014      	beq.n	8005472 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005448:	f7fe fe6e 	bl	8004128 <HAL_GetTick>
 800544c:	0003      	movs	r3, r0
 800544e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005450:	e008      	b.n	8005464 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005452:	f7fe fe69 	bl	8004128 <HAL_GetTick>
 8005456:	0002      	movs	r2, r0
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	2b64      	cmp	r3, #100	@ 0x64
 800545e:	d901      	bls.n	8005464 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e2e9      	b.n	8005a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005464:	4b93      	ldr	r3, [pc, #588]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	2380      	movs	r3, #128	@ 0x80
 800546a:	029b      	lsls	r3, r3, #10
 800546c:	4013      	ands	r3, r2
 800546e:	d0f0      	beq.n	8005452 <HAL_RCC_OscConfig+0xce>
 8005470:	e015      	b.n	800549e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005472:	f7fe fe59 	bl	8004128 <HAL_GetTick>
 8005476:	0003      	movs	r3, r0
 8005478:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800547c:	f7fe fe54 	bl	8004128 <HAL_GetTick>
 8005480:	0002      	movs	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b64      	cmp	r3, #100	@ 0x64
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e2d4      	b.n	8005a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800548e:	4b89      	ldr	r3, [pc, #548]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	2380      	movs	r3, #128	@ 0x80
 8005494:	029b      	lsls	r3, r3, #10
 8005496:	4013      	ands	r3, r2
 8005498:	d1f0      	bne.n	800547c <HAL_RCC_OscConfig+0xf8>
 800549a:	e000      	b.n	800549e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800549c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2202      	movs	r2, #2
 80054a4:	4013      	ands	r3, r2
 80054a6:	d100      	bne.n	80054aa <HAL_RCC_OscConfig+0x126>
 80054a8:	e099      	b.n	80055de <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054aa:	4b82      	ldr	r3, [pc, #520]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	2238      	movs	r2, #56	@ 0x38
 80054b0:	4013      	ands	r3, r2
 80054b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054b4:	4b7f      	ldr	r3, [pc, #508]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	2203      	movs	r2, #3
 80054ba:	4013      	ands	r3, r2
 80054bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	2b10      	cmp	r3, #16
 80054c2:	d102      	bne.n	80054ca <HAL_RCC_OscConfig+0x146>
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d002      	beq.n	80054d0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d135      	bne.n	800553c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054d0:	4b78      	ldr	r3, [pc, #480]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	2380      	movs	r3, #128	@ 0x80
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4013      	ands	r3, r2
 80054da:	d005      	beq.n	80054e8 <HAL_RCC_OscConfig+0x164>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e2a7      	b.n	8005a38 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e8:	4b72      	ldr	r3, [pc, #456]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	4a74      	ldr	r2, [pc, #464]	@ (80056c0 <HAL_RCC_OscConfig+0x33c>)
 80054ee:	4013      	ands	r3, r2
 80054f0:	0019      	movs	r1, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	021a      	lsls	r2, r3, #8
 80054f8:	4b6e      	ldr	r3, [pc, #440]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 80054fa:	430a      	orrs	r2, r1
 80054fc:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d112      	bne.n	800552a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005504:	4b6b      	ldr	r3, [pc, #428]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a6e      	ldr	r2, [pc, #440]	@ (80056c4 <HAL_RCC_OscConfig+0x340>)
 800550a:	4013      	ands	r3, r2
 800550c:	0019      	movs	r1, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691a      	ldr	r2, [r3, #16]
 8005512:	4b68      	ldr	r3, [pc, #416]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 8005514:	430a      	orrs	r2, r1
 8005516:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005518:	4b66      	ldr	r3, [pc, #408]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	0adb      	lsrs	r3, r3, #11
 800551e:	2207      	movs	r2, #7
 8005520:	4013      	ands	r3, r2
 8005522:	4a69      	ldr	r2, [pc, #420]	@ (80056c8 <HAL_RCC_OscConfig+0x344>)
 8005524:	40da      	lsrs	r2, r3
 8005526:	4b69      	ldr	r3, [pc, #420]	@ (80056cc <HAL_RCC_OscConfig+0x348>)
 8005528:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800552a:	4b69      	ldr	r3, [pc, #420]	@ (80056d0 <HAL_RCC_OscConfig+0x34c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	0018      	movs	r0, r3
 8005530:	f7fe fd9e 	bl	8004070 <HAL_InitTick>
 8005534:	1e03      	subs	r3, r0, #0
 8005536:	d051      	beq.n	80055dc <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e27d      	b.n	8005a38 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d030      	beq.n	80055a6 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005544:	4b5b      	ldr	r3, [pc, #364]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a5e      	ldr	r2, [pc, #376]	@ (80056c4 <HAL_RCC_OscConfig+0x340>)
 800554a:	4013      	ands	r3, r2
 800554c:	0019      	movs	r1, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691a      	ldr	r2, [r3, #16]
 8005552:	4b58      	ldr	r3, [pc, #352]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 8005554:	430a      	orrs	r2, r1
 8005556:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005558:	4b56      	ldr	r3, [pc, #344]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	4b55      	ldr	r3, [pc, #340]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 800555e:	2180      	movs	r1, #128	@ 0x80
 8005560:	0049      	lsls	r1, r1, #1
 8005562:	430a      	orrs	r2, r1
 8005564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005566:	f7fe fddf 	bl	8004128 <HAL_GetTick>
 800556a:	0003      	movs	r3, r0
 800556c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005570:	f7fe fdda 	bl	8004128 <HAL_GetTick>
 8005574:	0002      	movs	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e25a      	b.n	8005a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005582:	4b4c      	ldr	r3, [pc, #304]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	2380      	movs	r3, #128	@ 0x80
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	4013      	ands	r3, r2
 800558c:	d0f0      	beq.n	8005570 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800558e:	4b49      	ldr	r3, [pc, #292]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	4a4b      	ldr	r2, [pc, #300]	@ (80056c0 <HAL_RCC_OscConfig+0x33c>)
 8005594:	4013      	ands	r3, r2
 8005596:	0019      	movs	r1, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	021a      	lsls	r2, r3, #8
 800559e:	4b45      	ldr	r3, [pc, #276]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 80055a0:	430a      	orrs	r2, r1
 80055a2:	605a      	str	r2, [r3, #4]
 80055a4:	e01b      	b.n	80055de <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80055a6:	4b43      	ldr	r3, [pc, #268]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	4b42      	ldr	r3, [pc, #264]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 80055ac:	4949      	ldr	r1, [pc, #292]	@ (80056d4 <HAL_RCC_OscConfig+0x350>)
 80055ae:	400a      	ands	r2, r1
 80055b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b2:	f7fe fdb9 	bl	8004128 <HAL_GetTick>
 80055b6:	0003      	movs	r3, r0
 80055b8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055bc:	f7fe fdb4 	bl	8004128 <HAL_GetTick>
 80055c0:	0002      	movs	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e234      	b.n	8005a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055ce:	4b39      	ldr	r3, [pc, #228]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	2380      	movs	r3, #128	@ 0x80
 80055d4:	00db      	lsls	r3, r3, #3
 80055d6:	4013      	ands	r3, r2
 80055d8:	d1f0      	bne.n	80055bc <HAL_RCC_OscConfig+0x238>
 80055da:	e000      	b.n	80055de <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055dc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2208      	movs	r2, #8
 80055e4:	4013      	ands	r3, r2
 80055e6:	d047      	beq.n	8005678 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80055e8:	4b32      	ldr	r3, [pc, #200]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	2238      	movs	r2, #56	@ 0x38
 80055ee:	4013      	ands	r3, r2
 80055f0:	2b18      	cmp	r3, #24
 80055f2:	d10a      	bne.n	800560a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80055f4:	4b2f      	ldr	r3, [pc, #188]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 80055f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055f8:	2202      	movs	r2, #2
 80055fa:	4013      	ands	r3, r2
 80055fc:	d03c      	beq.n	8005678 <HAL_RCC_OscConfig+0x2f4>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d138      	bne.n	8005678 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e216      	b.n	8005a38 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d019      	beq.n	8005646 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005612:	4b28      	ldr	r3, [pc, #160]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 8005614:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005616:	4b27      	ldr	r3, [pc, #156]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 8005618:	2101      	movs	r1, #1
 800561a:	430a      	orrs	r2, r1
 800561c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800561e:	f7fe fd83 	bl	8004128 <HAL_GetTick>
 8005622:	0003      	movs	r3, r0
 8005624:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005626:	e008      	b.n	800563a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005628:	f7fe fd7e 	bl	8004128 <HAL_GetTick>
 800562c:	0002      	movs	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e1fe      	b.n	8005a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800563a:	4b1e      	ldr	r3, [pc, #120]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 800563c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800563e:	2202      	movs	r2, #2
 8005640:	4013      	ands	r3, r2
 8005642:	d0f1      	beq.n	8005628 <HAL_RCC_OscConfig+0x2a4>
 8005644:	e018      	b.n	8005678 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005646:	4b1b      	ldr	r3, [pc, #108]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 8005648:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800564a:	4b1a      	ldr	r3, [pc, #104]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 800564c:	2101      	movs	r1, #1
 800564e:	438a      	bics	r2, r1
 8005650:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005652:	f7fe fd69 	bl	8004128 <HAL_GetTick>
 8005656:	0003      	movs	r3, r0
 8005658:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800565c:	f7fe fd64 	bl	8004128 <HAL_GetTick>
 8005660:	0002      	movs	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e1e4      	b.n	8005a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800566e:	4b11      	ldr	r3, [pc, #68]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 8005670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005672:	2202      	movs	r2, #2
 8005674:	4013      	ands	r3, r2
 8005676:	d1f1      	bne.n	800565c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2204      	movs	r2, #4
 800567e:	4013      	ands	r3, r2
 8005680:	d100      	bne.n	8005684 <HAL_RCC_OscConfig+0x300>
 8005682:	e0c7      	b.n	8005814 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005684:	231f      	movs	r3, #31
 8005686:	18fb      	adds	r3, r7, r3
 8005688:	2200      	movs	r2, #0
 800568a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800568c:	4b09      	ldr	r3, [pc, #36]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	2238      	movs	r2, #56	@ 0x38
 8005692:	4013      	ands	r3, r2
 8005694:	2b20      	cmp	r3, #32
 8005696:	d11f      	bne.n	80056d8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005698:	4b06      	ldr	r3, [pc, #24]	@ (80056b4 <HAL_RCC_OscConfig+0x330>)
 800569a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800569c:	2202      	movs	r2, #2
 800569e:	4013      	ands	r3, r2
 80056a0:	d100      	bne.n	80056a4 <HAL_RCC_OscConfig+0x320>
 80056a2:	e0b7      	b.n	8005814 <HAL_RCC_OscConfig+0x490>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d000      	beq.n	80056ae <HAL_RCC_OscConfig+0x32a>
 80056ac:	e0b2      	b.n	8005814 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e1c2      	b.n	8005a38 <HAL_RCC_OscConfig+0x6b4>
 80056b2:	46c0      	nop			@ (mov r8, r8)
 80056b4:	40021000 	.word	0x40021000
 80056b8:	fffeffff 	.word	0xfffeffff
 80056bc:	fffbffff 	.word	0xfffbffff
 80056c0:	ffff80ff 	.word	0xffff80ff
 80056c4:	ffffc7ff 	.word	0xffffc7ff
 80056c8:	00f42400 	.word	0x00f42400
 80056cc:	20000e84 	.word	0x20000e84
 80056d0:	20000e88 	.word	0x20000e88
 80056d4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056d8:	4bb5      	ldr	r3, [pc, #724]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 80056da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056dc:	2380      	movs	r3, #128	@ 0x80
 80056de:	055b      	lsls	r3, r3, #21
 80056e0:	4013      	ands	r3, r2
 80056e2:	d101      	bne.n	80056e8 <HAL_RCC_OscConfig+0x364>
 80056e4:	2301      	movs	r3, #1
 80056e6:	e000      	b.n	80056ea <HAL_RCC_OscConfig+0x366>
 80056e8:	2300      	movs	r3, #0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d011      	beq.n	8005712 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80056ee:	4bb0      	ldr	r3, [pc, #704]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 80056f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056f2:	4baf      	ldr	r3, [pc, #700]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 80056f4:	2180      	movs	r1, #128	@ 0x80
 80056f6:	0549      	lsls	r1, r1, #21
 80056f8:	430a      	orrs	r2, r1
 80056fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80056fc:	4bac      	ldr	r3, [pc, #688]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 80056fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005700:	2380      	movs	r3, #128	@ 0x80
 8005702:	055b      	lsls	r3, r3, #21
 8005704:	4013      	ands	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800570a:	231f      	movs	r3, #31
 800570c:	18fb      	adds	r3, r7, r3
 800570e:	2201      	movs	r2, #1
 8005710:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005712:	4ba8      	ldr	r3, [pc, #672]	@ (80059b4 <HAL_RCC_OscConfig+0x630>)
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	2380      	movs	r3, #128	@ 0x80
 8005718:	005b      	lsls	r3, r3, #1
 800571a:	4013      	ands	r3, r2
 800571c:	d11a      	bne.n	8005754 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800571e:	4ba5      	ldr	r3, [pc, #660]	@ (80059b4 <HAL_RCC_OscConfig+0x630>)
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	4ba4      	ldr	r3, [pc, #656]	@ (80059b4 <HAL_RCC_OscConfig+0x630>)
 8005724:	2180      	movs	r1, #128	@ 0x80
 8005726:	0049      	lsls	r1, r1, #1
 8005728:	430a      	orrs	r2, r1
 800572a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800572c:	f7fe fcfc 	bl	8004128 <HAL_GetTick>
 8005730:	0003      	movs	r3, r0
 8005732:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005734:	e008      	b.n	8005748 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005736:	f7fe fcf7 	bl	8004128 <HAL_GetTick>
 800573a:	0002      	movs	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e177      	b.n	8005a38 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005748:	4b9a      	ldr	r3, [pc, #616]	@ (80059b4 <HAL_RCC_OscConfig+0x630>)
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	2380      	movs	r3, #128	@ 0x80
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	4013      	ands	r3, r2
 8005752:	d0f0      	beq.n	8005736 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d106      	bne.n	800576a <HAL_RCC_OscConfig+0x3e6>
 800575c:	4b94      	ldr	r3, [pc, #592]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 800575e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005760:	4b93      	ldr	r3, [pc, #588]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 8005762:	2101      	movs	r1, #1
 8005764:	430a      	orrs	r2, r1
 8005766:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005768:	e01c      	b.n	80057a4 <HAL_RCC_OscConfig+0x420>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	2b05      	cmp	r3, #5
 8005770:	d10c      	bne.n	800578c <HAL_RCC_OscConfig+0x408>
 8005772:	4b8f      	ldr	r3, [pc, #572]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 8005774:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005776:	4b8e      	ldr	r3, [pc, #568]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 8005778:	2104      	movs	r1, #4
 800577a:	430a      	orrs	r2, r1
 800577c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800577e:	4b8c      	ldr	r3, [pc, #560]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 8005780:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005782:	4b8b      	ldr	r3, [pc, #556]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 8005784:	2101      	movs	r1, #1
 8005786:	430a      	orrs	r2, r1
 8005788:	65da      	str	r2, [r3, #92]	@ 0x5c
 800578a:	e00b      	b.n	80057a4 <HAL_RCC_OscConfig+0x420>
 800578c:	4b88      	ldr	r3, [pc, #544]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 800578e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005790:	4b87      	ldr	r3, [pc, #540]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 8005792:	2101      	movs	r1, #1
 8005794:	438a      	bics	r2, r1
 8005796:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005798:	4b85      	ldr	r3, [pc, #532]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 800579a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800579c:	4b84      	ldr	r3, [pc, #528]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 800579e:	2104      	movs	r1, #4
 80057a0:	438a      	bics	r2, r1
 80057a2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d014      	beq.n	80057d6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ac:	f7fe fcbc 	bl	8004128 <HAL_GetTick>
 80057b0:	0003      	movs	r3, r0
 80057b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057b4:	e009      	b.n	80057ca <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057b6:	f7fe fcb7 	bl	8004128 <HAL_GetTick>
 80057ba:	0002      	movs	r2, r0
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	4a7d      	ldr	r2, [pc, #500]	@ (80059b8 <HAL_RCC_OscConfig+0x634>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e136      	b.n	8005a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057ca:	4b79      	ldr	r3, [pc, #484]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 80057cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ce:	2202      	movs	r2, #2
 80057d0:	4013      	ands	r3, r2
 80057d2:	d0f0      	beq.n	80057b6 <HAL_RCC_OscConfig+0x432>
 80057d4:	e013      	b.n	80057fe <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d6:	f7fe fca7 	bl	8004128 <HAL_GetTick>
 80057da:	0003      	movs	r3, r0
 80057dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057de:	e009      	b.n	80057f4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057e0:	f7fe fca2 	bl	8004128 <HAL_GetTick>
 80057e4:	0002      	movs	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	4a73      	ldr	r2, [pc, #460]	@ (80059b8 <HAL_RCC_OscConfig+0x634>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e121      	b.n	8005a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057f4:	4b6e      	ldr	r3, [pc, #440]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 80057f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057f8:	2202      	movs	r2, #2
 80057fa:	4013      	ands	r3, r2
 80057fc:	d1f0      	bne.n	80057e0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80057fe:	231f      	movs	r3, #31
 8005800:	18fb      	adds	r3, r7, r3
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d105      	bne.n	8005814 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005808:	4b69      	ldr	r3, [pc, #420]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 800580a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800580c:	4b68      	ldr	r3, [pc, #416]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 800580e:	496b      	ldr	r1, [pc, #428]	@ (80059bc <HAL_RCC_OscConfig+0x638>)
 8005810:	400a      	ands	r2, r1
 8005812:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2220      	movs	r2, #32
 800581a:	4013      	ands	r3, r2
 800581c:	d039      	beq.n	8005892 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d01b      	beq.n	800585e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005826:	4b62      	ldr	r3, [pc, #392]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	4b61      	ldr	r3, [pc, #388]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 800582c:	2180      	movs	r1, #128	@ 0x80
 800582e:	03c9      	lsls	r1, r1, #15
 8005830:	430a      	orrs	r2, r1
 8005832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005834:	f7fe fc78 	bl	8004128 <HAL_GetTick>
 8005838:	0003      	movs	r3, r0
 800583a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800583c:	e008      	b.n	8005850 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800583e:	f7fe fc73 	bl	8004128 <HAL_GetTick>
 8005842:	0002      	movs	r2, r0
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d901      	bls.n	8005850 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e0f3      	b.n	8005a38 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005850:	4b57      	ldr	r3, [pc, #348]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	2380      	movs	r3, #128	@ 0x80
 8005856:	041b      	lsls	r3, r3, #16
 8005858:	4013      	ands	r3, r2
 800585a:	d0f0      	beq.n	800583e <HAL_RCC_OscConfig+0x4ba>
 800585c:	e019      	b.n	8005892 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800585e:	4b54      	ldr	r3, [pc, #336]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	4b53      	ldr	r3, [pc, #332]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 8005864:	4956      	ldr	r1, [pc, #344]	@ (80059c0 <HAL_RCC_OscConfig+0x63c>)
 8005866:	400a      	ands	r2, r1
 8005868:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800586a:	f7fe fc5d 	bl	8004128 <HAL_GetTick>
 800586e:	0003      	movs	r3, r0
 8005870:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005872:	e008      	b.n	8005886 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005874:	f7fe fc58 	bl	8004128 <HAL_GetTick>
 8005878:	0002      	movs	r2, r0
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b02      	cmp	r3, #2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e0d8      	b.n	8005a38 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005886:	4b4a      	ldr	r3, [pc, #296]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	2380      	movs	r3, #128	@ 0x80
 800588c:	041b      	lsls	r3, r3, #16
 800588e:	4013      	ands	r3, r2
 8005890:	d1f0      	bne.n	8005874 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d100      	bne.n	800589c <HAL_RCC_OscConfig+0x518>
 800589a:	e0cc      	b.n	8005a36 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800589c:	4b44      	ldr	r3, [pc, #272]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	2238      	movs	r2, #56	@ 0x38
 80058a2:	4013      	ands	r3, r2
 80058a4:	2b10      	cmp	r3, #16
 80058a6:	d100      	bne.n	80058aa <HAL_RCC_OscConfig+0x526>
 80058a8:	e07b      	b.n	80059a2 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d156      	bne.n	8005960 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058b2:	4b3f      	ldr	r3, [pc, #252]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	4b3e      	ldr	r3, [pc, #248]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 80058b8:	4942      	ldr	r1, [pc, #264]	@ (80059c4 <HAL_RCC_OscConfig+0x640>)
 80058ba:	400a      	ands	r2, r1
 80058bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058be:	f7fe fc33 	bl	8004128 <HAL_GetTick>
 80058c2:	0003      	movs	r3, r0
 80058c4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058c8:	f7fe fc2e 	bl	8004128 <HAL_GetTick>
 80058cc:	0002      	movs	r2, r0
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e0ae      	b.n	8005a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058da:	4b35      	ldr	r3, [pc, #212]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	2380      	movs	r3, #128	@ 0x80
 80058e0:	049b      	lsls	r3, r3, #18
 80058e2:	4013      	ands	r3, r2
 80058e4:	d1f0      	bne.n	80058c8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058e6:	4b32      	ldr	r3, [pc, #200]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	4a37      	ldr	r2, [pc, #220]	@ (80059c8 <HAL_RCC_OscConfig+0x644>)
 80058ec:	4013      	ands	r3, r2
 80058ee:	0019      	movs	r1, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f8:	431a      	orrs	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058fe:	021b      	lsls	r3, r3, #8
 8005900:	431a      	orrs	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005906:	431a      	orrs	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800590c:	431a      	orrs	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005912:	431a      	orrs	r2, r3
 8005914:	4b26      	ldr	r3, [pc, #152]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 8005916:	430a      	orrs	r2, r1
 8005918:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800591a:	4b25      	ldr	r3, [pc, #148]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	4b24      	ldr	r3, [pc, #144]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 8005920:	2180      	movs	r1, #128	@ 0x80
 8005922:	0449      	lsls	r1, r1, #17
 8005924:	430a      	orrs	r2, r1
 8005926:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005928:	4b21      	ldr	r3, [pc, #132]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	4b20      	ldr	r3, [pc, #128]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 800592e:	2180      	movs	r1, #128	@ 0x80
 8005930:	0549      	lsls	r1, r1, #21
 8005932:	430a      	orrs	r2, r1
 8005934:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005936:	f7fe fbf7 	bl	8004128 <HAL_GetTick>
 800593a:	0003      	movs	r3, r0
 800593c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800593e:	e008      	b.n	8005952 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005940:	f7fe fbf2 	bl	8004128 <HAL_GetTick>
 8005944:	0002      	movs	r2, r0
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e072      	b.n	8005a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005952:	4b17      	ldr	r3, [pc, #92]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	2380      	movs	r3, #128	@ 0x80
 8005958:	049b      	lsls	r3, r3, #18
 800595a:	4013      	ands	r3, r2
 800595c:	d0f0      	beq.n	8005940 <HAL_RCC_OscConfig+0x5bc>
 800595e:	e06a      	b.n	8005a36 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005960:	4b13      	ldr	r3, [pc, #76]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	4b12      	ldr	r3, [pc, #72]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 8005966:	4917      	ldr	r1, [pc, #92]	@ (80059c4 <HAL_RCC_OscConfig+0x640>)
 8005968:	400a      	ands	r2, r1
 800596a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800596c:	f7fe fbdc 	bl	8004128 <HAL_GetTick>
 8005970:	0003      	movs	r3, r0
 8005972:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005974:	e008      	b.n	8005988 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005976:	f7fe fbd7 	bl	8004128 <HAL_GetTick>
 800597a:	0002      	movs	r2, r0
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	2b02      	cmp	r3, #2
 8005982:	d901      	bls.n	8005988 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e057      	b.n	8005a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005988:	4b09      	ldr	r3, [pc, #36]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	2380      	movs	r3, #128	@ 0x80
 800598e:	049b      	lsls	r3, r3, #18
 8005990:	4013      	ands	r3, r2
 8005992:	d1f0      	bne.n	8005976 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005994:	4b06      	ldr	r3, [pc, #24]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	4b05      	ldr	r3, [pc, #20]	@ (80059b0 <HAL_RCC_OscConfig+0x62c>)
 800599a:	490c      	ldr	r1, [pc, #48]	@ (80059cc <HAL_RCC_OscConfig+0x648>)
 800599c:	400a      	ands	r2, r1
 800599e:	60da      	str	r2, [r3, #12]
 80059a0:	e049      	b.n	8005a36 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d112      	bne.n	80059d0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e044      	b.n	8005a38 <HAL_RCC_OscConfig+0x6b4>
 80059ae:	46c0      	nop			@ (mov r8, r8)
 80059b0:	40021000 	.word	0x40021000
 80059b4:	40007000 	.word	0x40007000
 80059b8:	00001388 	.word	0x00001388
 80059bc:	efffffff 	.word	0xefffffff
 80059c0:	ffbfffff 	.word	0xffbfffff
 80059c4:	feffffff 	.word	0xfeffffff
 80059c8:	11c1808c 	.word	0x11c1808c
 80059cc:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80059d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005a40 <HAL_RCC_OscConfig+0x6bc>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2203      	movs	r2, #3
 80059da:	401a      	ands	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d126      	bne.n	8005a32 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	2270      	movs	r2, #112	@ 0x70
 80059e8:	401a      	ands	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d11f      	bne.n	8005a32 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	23fe      	movs	r3, #254	@ 0xfe
 80059f6:	01db      	lsls	r3, r3, #7
 80059f8:	401a      	ands	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fe:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d116      	bne.n	8005a32 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	23f8      	movs	r3, #248	@ 0xf8
 8005a08:	039b      	lsls	r3, r3, #14
 8005a0a:	401a      	ands	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d10e      	bne.n	8005a32 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	23e0      	movs	r3, #224	@ 0xe0
 8005a18:	051b      	lsls	r3, r3, #20
 8005a1a:	401a      	ands	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d106      	bne.n	8005a32 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	0f5b      	lsrs	r3, r3, #29
 8005a28:	075a      	lsls	r2, r3, #29
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d001      	beq.n	8005a36 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e000      	b.n	8005a38 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	0018      	movs	r0, r3
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	b008      	add	sp, #32
 8005a3e:	bd80      	pop	{r7, pc}
 8005a40:	40021000 	.word	0x40021000

08005a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e0e9      	b.n	8005c2c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a58:	4b76      	ldr	r3, [pc, #472]	@ (8005c34 <HAL_RCC_ClockConfig+0x1f0>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2207      	movs	r2, #7
 8005a5e:	4013      	ands	r3, r2
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d91e      	bls.n	8005aa4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a66:	4b73      	ldr	r3, [pc, #460]	@ (8005c34 <HAL_RCC_ClockConfig+0x1f0>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2207      	movs	r2, #7
 8005a6c:	4393      	bics	r3, r2
 8005a6e:	0019      	movs	r1, r3
 8005a70:	4b70      	ldr	r3, [pc, #448]	@ (8005c34 <HAL_RCC_ClockConfig+0x1f0>)
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a78:	f7fe fb56 	bl	8004128 <HAL_GetTick>
 8005a7c:	0003      	movs	r3, r0
 8005a7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a80:	e009      	b.n	8005a96 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a82:	f7fe fb51 	bl	8004128 <HAL_GetTick>
 8005a86:	0002      	movs	r2, r0
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	4a6a      	ldr	r2, [pc, #424]	@ (8005c38 <HAL_RCC_ClockConfig+0x1f4>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e0ca      	b.n	8005c2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005a96:	4b67      	ldr	r3, [pc, #412]	@ (8005c34 <HAL_RCC_ClockConfig+0x1f0>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2207      	movs	r2, #7
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d1ee      	bne.n	8005a82 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	4013      	ands	r3, r2
 8005aac:	d015      	beq.n	8005ada <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2204      	movs	r2, #4
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	d006      	beq.n	8005ac6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005ab8:	4b60      	ldr	r3, [pc, #384]	@ (8005c3c <HAL_RCC_ClockConfig+0x1f8>)
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	4b5f      	ldr	r3, [pc, #380]	@ (8005c3c <HAL_RCC_ClockConfig+0x1f8>)
 8005abe:	21e0      	movs	r1, #224	@ 0xe0
 8005ac0:	01c9      	lsls	r1, r1, #7
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ac6:	4b5d      	ldr	r3, [pc, #372]	@ (8005c3c <HAL_RCC_ClockConfig+0x1f8>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	4a5d      	ldr	r2, [pc, #372]	@ (8005c40 <HAL_RCC_ClockConfig+0x1fc>)
 8005acc:	4013      	ands	r3, r2
 8005ace:	0019      	movs	r1, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	4b59      	ldr	r3, [pc, #356]	@ (8005c3c <HAL_RCC_ClockConfig+0x1f8>)
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	d057      	beq.n	8005b94 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d107      	bne.n	8005afc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005aec:	4b53      	ldr	r3, [pc, #332]	@ (8005c3c <HAL_RCC_ClockConfig+0x1f8>)
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	2380      	movs	r3, #128	@ 0x80
 8005af2:	029b      	lsls	r3, r3, #10
 8005af4:	4013      	ands	r3, r2
 8005af6:	d12b      	bne.n	8005b50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e097      	b.n	8005c2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d107      	bne.n	8005b14 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b04:	4b4d      	ldr	r3, [pc, #308]	@ (8005c3c <HAL_RCC_ClockConfig+0x1f8>)
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	2380      	movs	r3, #128	@ 0x80
 8005b0a:	049b      	lsls	r3, r3, #18
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	d11f      	bne.n	8005b50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e08b      	b.n	8005c2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d107      	bne.n	8005b2c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b1c:	4b47      	ldr	r3, [pc, #284]	@ (8005c3c <HAL_RCC_ClockConfig+0x1f8>)
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	2380      	movs	r3, #128	@ 0x80
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	4013      	ands	r3, r2
 8005b26:	d113      	bne.n	8005b50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e07f      	b.n	8005c2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	2b03      	cmp	r3, #3
 8005b32:	d106      	bne.n	8005b42 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b34:	4b41      	ldr	r3, [pc, #260]	@ (8005c3c <HAL_RCC_ClockConfig+0x1f8>)
 8005b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b38:	2202      	movs	r2, #2
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	d108      	bne.n	8005b50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e074      	b.n	8005c2c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b42:	4b3e      	ldr	r3, [pc, #248]	@ (8005c3c <HAL_RCC_ClockConfig+0x1f8>)
 8005b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b46:	2202      	movs	r2, #2
 8005b48:	4013      	ands	r3, r2
 8005b4a:	d101      	bne.n	8005b50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e06d      	b.n	8005c2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b50:	4b3a      	ldr	r3, [pc, #232]	@ (8005c3c <HAL_RCC_ClockConfig+0x1f8>)
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	2207      	movs	r2, #7
 8005b56:	4393      	bics	r3, r2
 8005b58:	0019      	movs	r1, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	4b37      	ldr	r3, [pc, #220]	@ (8005c3c <HAL_RCC_ClockConfig+0x1f8>)
 8005b60:	430a      	orrs	r2, r1
 8005b62:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b64:	f7fe fae0 	bl	8004128 <HAL_GetTick>
 8005b68:	0003      	movs	r3, r0
 8005b6a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b6c:	e009      	b.n	8005b82 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b6e:	f7fe fadb 	bl	8004128 <HAL_GetTick>
 8005b72:	0002      	movs	r2, r0
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	4a2f      	ldr	r2, [pc, #188]	@ (8005c38 <HAL_RCC_ClockConfig+0x1f4>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e054      	b.n	8005c2c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b82:	4b2e      	ldr	r3, [pc, #184]	@ (8005c3c <HAL_RCC_ClockConfig+0x1f8>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	2238      	movs	r2, #56	@ 0x38
 8005b88:	401a      	ands	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d1ec      	bne.n	8005b6e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b94:	4b27      	ldr	r3, [pc, #156]	@ (8005c34 <HAL_RCC_ClockConfig+0x1f0>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2207      	movs	r2, #7
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d21e      	bcs.n	8005be0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ba2:	4b24      	ldr	r3, [pc, #144]	@ (8005c34 <HAL_RCC_ClockConfig+0x1f0>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2207      	movs	r2, #7
 8005ba8:	4393      	bics	r3, r2
 8005baa:	0019      	movs	r1, r3
 8005bac:	4b21      	ldr	r3, [pc, #132]	@ (8005c34 <HAL_RCC_ClockConfig+0x1f0>)
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005bb4:	f7fe fab8 	bl	8004128 <HAL_GetTick>
 8005bb8:	0003      	movs	r3, r0
 8005bba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005bbc:	e009      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bbe:	f7fe fab3 	bl	8004128 <HAL_GetTick>
 8005bc2:	0002      	movs	r2, r0
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c38 <HAL_RCC_ClockConfig+0x1f4>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e02c      	b.n	8005c2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005bd2:	4b18      	ldr	r3, [pc, #96]	@ (8005c34 <HAL_RCC_ClockConfig+0x1f0>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2207      	movs	r2, #7
 8005bd8:	4013      	ands	r3, r2
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d1ee      	bne.n	8005bbe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2204      	movs	r2, #4
 8005be6:	4013      	ands	r3, r2
 8005be8:	d009      	beq.n	8005bfe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005bea:	4b14      	ldr	r3, [pc, #80]	@ (8005c3c <HAL_RCC_ClockConfig+0x1f8>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	4a15      	ldr	r2, [pc, #84]	@ (8005c44 <HAL_RCC_ClockConfig+0x200>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	0019      	movs	r1, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	4b10      	ldr	r3, [pc, #64]	@ (8005c3c <HAL_RCC_ClockConfig+0x1f8>)
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005bfe:	f000 f829 	bl	8005c54 <HAL_RCC_GetSysClockFreq>
 8005c02:	0001      	movs	r1, r0
 8005c04:	4b0d      	ldr	r3, [pc, #52]	@ (8005c3c <HAL_RCC_ClockConfig+0x1f8>)
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	0a1b      	lsrs	r3, r3, #8
 8005c0a:	220f      	movs	r2, #15
 8005c0c:	401a      	ands	r2, r3
 8005c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c48 <HAL_RCC_ClockConfig+0x204>)
 8005c10:	0092      	lsls	r2, r2, #2
 8005c12:	58d3      	ldr	r3, [r2, r3]
 8005c14:	221f      	movs	r2, #31
 8005c16:	4013      	ands	r3, r2
 8005c18:	000a      	movs	r2, r1
 8005c1a:	40da      	lsrs	r2, r3
 8005c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c4c <HAL_RCC_ClockConfig+0x208>)
 8005c1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005c20:	4b0b      	ldr	r3, [pc, #44]	@ (8005c50 <HAL_RCC_ClockConfig+0x20c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	0018      	movs	r0, r3
 8005c26:	f7fe fa23 	bl	8004070 <HAL_InitTick>
 8005c2a:	0003      	movs	r3, r0
}
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	b004      	add	sp, #16
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	40022000 	.word	0x40022000
 8005c38:	00001388 	.word	0x00001388
 8005c3c:	40021000 	.word	0x40021000
 8005c40:	fffff0ff 	.word	0xfffff0ff
 8005c44:	ffff8fff 	.word	0xffff8fff
 8005c48:	08009f8c 	.word	0x08009f8c
 8005c4c:	20000e84 	.word	0x20000e84
 8005c50:	20000e88 	.word	0x20000e88

08005c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c5a:	4b3c      	ldr	r3, [pc, #240]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	2238      	movs	r2, #56	@ 0x38
 8005c60:	4013      	ands	r3, r2
 8005c62:	d10f      	bne.n	8005c84 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005c64:	4b39      	ldr	r3, [pc, #228]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	0adb      	lsrs	r3, r3, #11
 8005c6a:	2207      	movs	r2, #7
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	2201      	movs	r2, #1
 8005c70:	409a      	lsls	r2, r3
 8005c72:	0013      	movs	r3, r2
 8005c74:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005c76:	6839      	ldr	r1, [r7, #0]
 8005c78:	4835      	ldr	r0, [pc, #212]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005c7a:	f7fa fa55 	bl	8000128 <__udivsi3>
 8005c7e:	0003      	movs	r3, r0
 8005c80:	613b      	str	r3, [r7, #16]
 8005c82:	e05d      	b.n	8005d40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c84:	4b31      	ldr	r3, [pc, #196]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	2238      	movs	r2, #56	@ 0x38
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d102      	bne.n	8005c96 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c90:	4b30      	ldr	r3, [pc, #192]	@ (8005d54 <HAL_RCC_GetSysClockFreq+0x100>)
 8005c92:	613b      	str	r3, [r7, #16]
 8005c94:	e054      	b.n	8005d40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c96:	4b2d      	ldr	r3, [pc, #180]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	2238      	movs	r2, #56	@ 0x38
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	2b10      	cmp	r3, #16
 8005ca0:	d138      	bne.n	8005d14 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	2203      	movs	r2, #3
 8005ca8:	4013      	ands	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005cac:	4b27      	ldr	r3, [pc, #156]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	091b      	lsrs	r3, r3, #4
 8005cb2:	2207      	movs	r2, #7
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2b03      	cmp	r3, #3
 8005cbe:	d10d      	bne.n	8005cdc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cc0:	68b9      	ldr	r1, [r7, #8]
 8005cc2:	4824      	ldr	r0, [pc, #144]	@ (8005d54 <HAL_RCC_GetSysClockFreq+0x100>)
 8005cc4:	f7fa fa30 	bl	8000128 <__udivsi3>
 8005cc8:	0003      	movs	r3, r0
 8005cca:	0019      	movs	r1, r3
 8005ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	0a1b      	lsrs	r3, r3, #8
 8005cd2:	227f      	movs	r2, #127	@ 0x7f
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	434b      	muls	r3, r1
 8005cd8:	617b      	str	r3, [r7, #20]
        break;
 8005cda:	e00d      	b.n	8005cf8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005cdc:	68b9      	ldr	r1, [r7, #8]
 8005cde:	481c      	ldr	r0, [pc, #112]	@ (8005d50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005ce0:	f7fa fa22 	bl	8000128 <__udivsi3>
 8005ce4:	0003      	movs	r3, r0
 8005ce6:	0019      	movs	r1, r3
 8005ce8:	4b18      	ldr	r3, [pc, #96]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	0a1b      	lsrs	r3, r3, #8
 8005cee:	227f      	movs	r2, #127	@ 0x7f
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	434b      	muls	r3, r1
 8005cf4:	617b      	str	r3, [r7, #20]
        break;
 8005cf6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005cf8:	4b14      	ldr	r3, [pc, #80]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	0f5b      	lsrs	r3, r3, #29
 8005cfe:	2207      	movs	r2, #7
 8005d00:	4013      	ands	r3, r2
 8005d02:	3301      	adds	r3, #1
 8005d04:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005d06:	6879      	ldr	r1, [r7, #4]
 8005d08:	6978      	ldr	r0, [r7, #20]
 8005d0a:	f7fa fa0d 	bl	8000128 <__udivsi3>
 8005d0e:	0003      	movs	r3, r0
 8005d10:	613b      	str	r3, [r7, #16]
 8005d12:	e015      	b.n	8005d40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005d14:	4b0d      	ldr	r3, [pc, #52]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	2238      	movs	r2, #56	@ 0x38
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	2b20      	cmp	r3, #32
 8005d1e:	d103      	bne.n	8005d28 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005d20:	2380      	movs	r3, #128	@ 0x80
 8005d22:	021b      	lsls	r3, r3, #8
 8005d24:	613b      	str	r3, [r7, #16]
 8005d26:	e00b      	b.n	8005d40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005d28:	4b08      	ldr	r3, [pc, #32]	@ (8005d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	2238      	movs	r2, #56	@ 0x38
 8005d2e:	4013      	ands	r3, r2
 8005d30:	2b18      	cmp	r3, #24
 8005d32:	d103      	bne.n	8005d3c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005d34:	23fa      	movs	r3, #250	@ 0xfa
 8005d36:	01db      	lsls	r3, r3, #7
 8005d38:	613b      	str	r3, [r7, #16]
 8005d3a:	e001      	b.n	8005d40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005d40:	693b      	ldr	r3, [r7, #16]
}
 8005d42:	0018      	movs	r0, r3
 8005d44:	46bd      	mov	sp, r7
 8005d46:	b006      	add	sp, #24
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	46c0      	nop			@ (mov r8, r8)
 8005d4c:	40021000 	.word	0x40021000
 8005d50:	00f42400 	.word	0x00f42400
 8005d54:	007a1200 	.word	0x007a1200

08005d58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d5c:	4b02      	ldr	r3, [pc, #8]	@ (8005d68 <HAL_RCC_GetHCLKFreq+0x10>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
}
 8005d60:	0018      	movs	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	46c0      	nop			@ (mov r8, r8)
 8005d68:	20000e84 	.word	0x20000e84

08005d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d6c:	b5b0      	push	{r4, r5, r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005d70:	f7ff fff2 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8005d74:	0004      	movs	r4, r0
 8005d76:	f7ff faf9 	bl	800536c <LL_RCC_GetAPB1Prescaler>
 8005d7a:	0003      	movs	r3, r0
 8005d7c:	0b1a      	lsrs	r2, r3, #12
 8005d7e:	4b05      	ldr	r3, [pc, #20]	@ (8005d94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d80:	0092      	lsls	r2, r2, #2
 8005d82:	58d3      	ldr	r3, [r2, r3]
 8005d84:	221f      	movs	r2, #31
 8005d86:	4013      	ands	r3, r2
 8005d88:	40dc      	lsrs	r4, r3
 8005d8a:	0023      	movs	r3, r4
}
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bdb0      	pop	{r4, r5, r7, pc}
 8005d92:	46c0      	nop			@ (mov r8, r8)
 8005d94:	08009fcc 	.word	0x08009fcc

08005d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005da0:	2313      	movs	r3, #19
 8005da2:	18fb      	adds	r3, r7, r3
 8005da4:	2200      	movs	r2, #0
 8005da6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005da8:	2312      	movs	r3, #18
 8005daa:	18fb      	adds	r3, r7, r3
 8005dac:	2200      	movs	r2, #0
 8005dae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	2380      	movs	r3, #128	@ 0x80
 8005db6:	029b      	lsls	r3, r3, #10
 8005db8:	4013      	ands	r3, r2
 8005dba:	d100      	bne.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005dbc:	e0ad      	b.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dbe:	2011      	movs	r0, #17
 8005dc0:	183b      	adds	r3, r7, r0
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dc6:	4b47      	ldr	r3, [pc, #284]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005dc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005dca:	2380      	movs	r3, #128	@ 0x80
 8005dcc:	055b      	lsls	r3, r3, #21
 8005dce:	4013      	ands	r3, r2
 8005dd0:	d110      	bne.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dd2:	4b44      	ldr	r3, [pc, #272]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005dd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005dd6:	4b43      	ldr	r3, [pc, #268]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005dd8:	2180      	movs	r1, #128	@ 0x80
 8005dda:	0549      	lsls	r1, r1, #21
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005de0:	4b40      	ldr	r3, [pc, #256]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005de2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005de4:	2380      	movs	r3, #128	@ 0x80
 8005de6:	055b      	lsls	r3, r3, #21
 8005de8:	4013      	ands	r3, r2
 8005dea:	60bb      	str	r3, [r7, #8]
 8005dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dee:	183b      	adds	r3, r7, r0
 8005df0:	2201      	movs	r2, #1
 8005df2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005df4:	4b3c      	ldr	r3, [pc, #240]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005dfa:	2180      	movs	r1, #128	@ 0x80
 8005dfc:	0049      	lsls	r1, r1, #1
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e02:	f7fe f991 	bl	8004128 <HAL_GetTick>
 8005e06:	0003      	movs	r3, r0
 8005e08:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e0a:	e00b      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e0c:	f7fe f98c 	bl	8004128 <HAL_GetTick>
 8005e10:	0002      	movs	r2, r0
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d904      	bls.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005e1a:	2313      	movs	r3, #19
 8005e1c:	18fb      	adds	r3, r7, r3
 8005e1e:	2203      	movs	r2, #3
 8005e20:	701a      	strb	r2, [r3, #0]
        break;
 8005e22:	e005      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e24:	4b30      	ldr	r3, [pc, #192]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	2380      	movs	r3, #128	@ 0x80
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	d0ed      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005e30:	2313      	movs	r3, #19
 8005e32:	18fb      	adds	r3, r7, r3
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d15e      	bne.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005e3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005e3e:	23c0      	movs	r3, #192	@ 0xc0
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4013      	ands	r3, r2
 8005e44:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d019      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d014      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e56:	4b23      	ldr	r3, [pc, #140]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e5a:	4a24      	ldr	r2, [pc, #144]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e60:	4b20      	ldr	r3, [pc, #128]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005e62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005e64:	4b1f      	ldr	r3, [pc, #124]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005e66:	2180      	movs	r1, #128	@ 0x80
 8005e68:	0249      	lsls	r1, r1, #9
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005e70:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005e72:	4b1c      	ldr	r3, [pc, #112]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005e74:	491e      	ldr	r1, [pc, #120]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8005e76:	400a      	ands	r2, r1
 8005e78:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	2201      	movs	r2, #1
 8005e84:	4013      	ands	r3, r2
 8005e86:	d016      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e88:	f7fe f94e 	bl	8004128 <HAL_GetTick>
 8005e8c:	0003      	movs	r3, r0
 8005e8e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e90:	e00c      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e92:	f7fe f949 	bl	8004128 <HAL_GetTick>
 8005e96:	0002      	movs	r2, r0
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	4a15      	ldr	r2, [pc, #84]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d904      	bls.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005ea2:	2313      	movs	r3, #19
 8005ea4:	18fb      	adds	r3, r7, r3
 8005ea6:	2203      	movs	r2, #3
 8005ea8:	701a      	strb	r2, [r3, #0]
            break;
 8005eaa:	e004      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005eac:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eb0:	2202      	movs	r2, #2
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	d0ed      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005eb6:	2313      	movs	r3, #19
 8005eb8:	18fb      	adds	r3, r7, r3
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10a      	bne.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ec0:	4b08      	ldr	r3, [pc, #32]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ec4:	4a09      	ldr	r2, [pc, #36]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	0019      	movs	r1, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ece:	4b05      	ldr	r3, [pc, #20]	@ (8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ed4:	e016      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ed6:	2312      	movs	r3, #18
 8005ed8:	18fb      	adds	r3, r7, r3
 8005eda:	2213      	movs	r2, #19
 8005edc:	18ba      	adds	r2, r7, r2
 8005ede:	7812      	ldrb	r2, [r2, #0]
 8005ee0:	701a      	strb	r2, [r3, #0]
 8005ee2:	e00f      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005ee4:	40021000 	.word	0x40021000
 8005ee8:	40007000 	.word	0x40007000
 8005eec:	fffffcff 	.word	0xfffffcff
 8005ef0:	fffeffff 	.word	0xfffeffff
 8005ef4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef8:	2312      	movs	r3, #18
 8005efa:	18fb      	adds	r3, r7, r3
 8005efc:	2213      	movs	r2, #19
 8005efe:	18ba      	adds	r2, r7, r2
 8005f00:	7812      	ldrb	r2, [r2, #0]
 8005f02:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f04:	2311      	movs	r3, #17
 8005f06:	18fb      	adds	r3, r7, r3
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d105      	bne.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f0e:	4bb6      	ldr	r3, [pc, #728]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f12:	4bb5      	ldr	r3, [pc, #724]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f14:	49b5      	ldr	r1, [pc, #724]	@ (80061ec <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8005f16:	400a      	ands	r2, r1
 8005f18:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	4013      	ands	r3, r2
 8005f22:	d009      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f24:	4bb0      	ldr	r3, [pc, #704]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f28:	2203      	movs	r2, #3
 8005f2a:	4393      	bics	r3, r2
 8005f2c:	0019      	movs	r1, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	4bad      	ldr	r3, [pc, #692]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f34:	430a      	orrs	r2, r1
 8005f36:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	4013      	ands	r3, r2
 8005f40:	d009      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f42:	4ba9      	ldr	r3, [pc, #676]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f46:	220c      	movs	r2, #12
 8005f48:	4393      	bics	r3, r2
 8005f4a:	0019      	movs	r1, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	4ba5      	ldr	r3, [pc, #660]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f52:	430a      	orrs	r2, r1
 8005f54:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2204      	movs	r2, #4
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	d009      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f60:	4ba1      	ldr	r3, [pc, #644]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f64:	2230      	movs	r2, #48	@ 0x30
 8005f66:	4393      	bics	r3, r2
 8005f68:	0019      	movs	r1, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68da      	ldr	r2, [r3, #12]
 8005f6e:	4b9e      	ldr	r3, [pc, #632]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f70:	430a      	orrs	r2, r1
 8005f72:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2210      	movs	r2, #16
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	d009      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f7e:	4b9a      	ldr	r3, [pc, #616]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f82:	4a9b      	ldr	r2, [pc, #620]	@ (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005f84:	4013      	ands	r3, r2
 8005f86:	0019      	movs	r1, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	691a      	ldr	r2, [r3, #16]
 8005f8c:	4b96      	ldr	r3, [pc, #600]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	2380      	movs	r3, #128	@ 0x80
 8005f98:	015b      	lsls	r3, r3, #5
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	d009      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8005f9e:	4b92      	ldr	r3, [pc, #584]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa2:	4a94      	ldr	r2, [pc, #592]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	0019      	movs	r1, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	695a      	ldr	r2, [r3, #20]
 8005fac:	4b8e      	ldr	r3, [pc, #568]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	2380      	movs	r3, #128	@ 0x80
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4013      	ands	r3, r2
 8005fbc:	d009      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fbe:	4b8a      	ldr	r3, [pc, #552]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fc2:	4a8d      	ldr	r2, [pc, #564]	@ (80061f8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	0019      	movs	r1, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005fcc:	4b86      	ldr	r3, [pc, #536]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	2380      	movs	r3, #128	@ 0x80
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	4013      	ands	r3, r2
 8005fdc:	d009      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005fde:	4b82      	ldr	r3, [pc, #520]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fe2:	4a86      	ldr	r2, [pc, #536]	@ (80061fc <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	0019      	movs	r1, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fec:	4b7e      	ldr	r3, [pc, #504]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	d009      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ffc:	4b7a      	ldr	r3, [pc, #488]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006000:	4a7f      	ldr	r2, [pc, #508]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006002:	4013      	ands	r3, r2
 8006004:	0019      	movs	r1, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	699a      	ldr	r2, [r3, #24]
 800600a:	4b77      	ldr	r3, [pc, #476]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800600c:	430a      	orrs	r2, r1
 800600e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2240      	movs	r2, #64	@ 0x40
 8006016:	4013      	ands	r3, r2
 8006018:	d009      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800601a:	4b73      	ldr	r3, [pc, #460]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800601c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800601e:	4a79      	ldr	r2, [pc, #484]	@ (8006204 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8006020:	4013      	ands	r3, r2
 8006022:	0019      	movs	r1, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	69da      	ldr	r2, [r3, #28]
 8006028:	4b6f      	ldr	r3, [pc, #444]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800602a:	430a      	orrs	r2, r1
 800602c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	2380      	movs	r3, #128	@ 0x80
 8006034:	01db      	lsls	r3, r3, #7
 8006036:	4013      	ands	r3, r2
 8006038:	d015      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800603a:	4b6b      	ldr	r3, [pc, #428]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800603c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	0899      	lsrs	r1, r3, #2
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006046:	4b68      	ldr	r3, [pc, #416]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006048:	430a      	orrs	r2, r1
 800604a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006050:	2380      	movs	r3, #128	@ 0x80
 8006052:	05db      	lsls	r3, r3, #23
 8006054:	429a      	cmp	r2, r3
 8006056:	d106      	bne.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006058:	4b63      	ldr	r3, [pc, #396]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800605a:	68da      	ldr	r2, [r3, #12]
 800605c:	4b62      	ldr	r3, [pc, #392]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800605e:	2180      	movs	r1, #128	@ 0x80
 8006060:	0249      	lsls	r1, r1, #9
 8006062:	430a      	orrs	r2, r1
 8006064:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	2380      	movs	r3, #128	@ 0x80
 800606c:	031b      	lsls	r3, r3, #12
 800606e:	4013      	ands	r3, r2
 8006070:	d009      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006072:	4b5d      	ldr	r3, [pc, #372]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006076:	2240      	movs	r2, #64	@ 0x40
 8006078:	4393      	bics	r3, r2
 800607a:	0019      	movs	r1, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006080:	4b59      	ldr	r3, [pc, #356]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006082:	430a      	orrs	r2, r1
 8006084:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	2380      	movs	r3, #128	@ 0x80
 800608c:	039b      	lsls	r3, r3, #14
 800608e:	4013      	ands	r3, r2
 8006090:	d016      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006092:	4b55      	ldr	r3, [pc, #340]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006096:	4a5c      	ldr	r2, [pc, #368]	@ (8006208 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006098:	4013      	ands	r3, r2
 800609a:	0019      	movs	r1, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060a0:	4b51      	ldr	r3, [pc, #324]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80060a2:	430a      	orrs	r2, r1
 80060a4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060aa:	2380      	movs	r3, #128	@ 0x80
 80060ac:	03db      	lsls	r3, r3, #15
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d106      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80060b2:	4b4d      	ldr	r3, [pc, #308]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	4b4c      	ldr	r3, [pc, #304]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80060b8:	2180      	movs	r1, #128	@ 0x80
 80060ba:	0449      	lsls	r1, r1, #17
 80060bc:	430a      	orrs	r2, r1
 80060be:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	2380      	movs	r3, #128	@ 0x80
 80060c6:	03db      	lsls	r3, r3, #15
 80060c8:	4013      	ands	r3, r2
 80060ca:	d016      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80060cc:	4b46      	ldr	r3, [pc, #280]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80060ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060d0:	4a4e      	ldr	r2, [pc, #312]	@ (800620c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80060d2:	4013      	ands	r3, r2
 80060d4:	0019      	movs	r1, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060da:	4b43      	ldr	r3, [pc, #268]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80060dc:	430a      	orrs	r2, r1
 80060de:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060e4:	2380      	movs	r3, #128	@ 0x80
 80060e6:	045b      	lsls	r3, r3, #17
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d106      	bne.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80060ec:	4b3e      	ldr	r3, [pc, #248]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80060ee:	68da      	ldr	r2, [r3, #12]
 80060f0:	4b3d      	ldr	r3, [pc, #244]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80060f2:	2180      	movs	r1, #128	@ 0x80
 80060f4:	0449      	lsls	r1, r1, #17
 80060f6:	430a      	orrs	r2, r1
 80060f8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	2380      	movs	r3, #128	@ 0x80
 8006100:	011b      	lsls	r3, r3, #4
 8006102:	4013      	ands	r3, r2
 8006104:	d014      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006106:	4b38      	ldr	r3, [pc, #224]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800610a:	2203      	movs	r2, #3
 800610c:	4393      	bics	r3, r2
 800610e:	0019      	movs	r1, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a1a      	ldr	r2, [r3, #32]
 8006114:	4b34      	ldr	r3, [pc, #208]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006116:	430a      	orrs	r2, r1
 8006118:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d106      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006122:	4b31      	ldr	r3, [pc, #196]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006124:	68da      	ldr	r2, [r3, #12]
 8006126:	4b30      	ldr	r3, [pc, #192]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006128:	2180      	movs	r1, #128	@ 0x80
 800612a:	0249      	lsls	r1, r1, #9
 800612c:	430a      	orrs	r2, r1
 800612e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	2380      	movs	r3, #128	@ 0x80
 8006136:	019b      	lsls	r3, r3, #6
 8006138:	4013      	ands	r3, r2
 800613a:	d014      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800613c:	4b2a      	ldr	r3, [pc, #168]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800613e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006140:	220c      	movs	r2, #12
 8006142:	4393      	bics	r3, r2
 8006144:	0019      	movs	r1, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800614a:	4b27      	ldr	r3, [pc, #156]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800614c:	430a      	orrs	r2, r1
 800614e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006154:	2b04      	cmp	r3, #4
 8006156:	d106      	bne.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006158:	4b23      	ldr	r3, [pc, #140]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800615a:	68da      	ldr	r2, [r3, #12]
 800615c:	4b22      	ldr	r3, [pc, #136]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800615e:	2180      	movs	r1, #128	@ 0x80
 8006160:	0249      	lsls	r1, r1, #9
 8006162:	430a      	orrs	r2, r1
 8006164:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	2380      	movs	r3, #128	@ 0x80
 800616c:	045b      	lsls	r3, r3, #17
 800616e:	4013      	ands	r3, r2
 8006170:	d016      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006172:	4b1d      	ldr	r3, [pc, #116]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006176:	4a22      	ldr	r2, [pc, #136]	@ (8006200 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006178:	4013      	ands	r3, r2
 800617a:	0019      	movs	r1, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006180:	4b19      	ldr	r3, [pc, #100]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006182:	430a      	orrs	r2, r1
 8006184:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800618a:	2380      	movs	r3, #128	@ 0x80
 800618c:	019b      	lsls	r3, r3, #6
 800618e:	429a      	cmp	r2, r3
 8006190:	d106      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006192:	4b15      	ldr	r3, [pc, #84]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006194:	68da      	ldr	r2, [r3, #12]
 8006196:	4b14      	ldr	r3, [pc, #80]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006198:	2180      	movs	r1, #128	@ 0x80
 800619a:	0449      	lsls	r1, r1, #17
 800619c:	430a      	orrs	r2, r1
 800619e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	2380      	movs	r3, #128	@ 0x80
 80061a6:	049b      	lsls	r3, r3, #18
 80061a8:	4013      	ands	r3, r2
 80061aa:	d016      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80061ac:	4b0e      	ldr	r3, [pc, #56]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80061ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061b0:	4a10      	ldr	r2, [pc, #64]	@ (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80061b2:	4013      	ands	r3, r2
 80061b4:	0019      	movs	r1, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80061ba:	4b0b      	ldr	r3, [pc, #44]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80061bc:	430a      	orrs	r2, r1
 80061be:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80061c4:	2380      	movs	r3, #128	@ 0x80
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d106      	bne.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80061cc:	4b06      	ldr	r3, [pc, #24]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80061ce:	68da      	ldr	r2, [r3, #12]
 80061d0:	4b05      	ldr	r3, [pc, #20]	@ (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80061d2:	2180      	movs	r1, #128	@ 0x80
 80061d4:	0449      	lsls	r1, r1, #17
 80061d6:	430a      	orrs	r2, r1
 80061d8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80061da:	2312      	movs	r3, #18
 80061dc:	18fb      	adds	r3, r7, r3
 80061de:	781b      	ldrb	r3, [r3, #0]
}
 80061e0:	0018      	movs	r0, r3
 80061e2:	46bd      	mov	sp, r7
 80061e4:	b006      	add	sp, #24
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	40021000 	.word	0x40021000
 80061ec:	efffffff 	.word	0xefffffff
 80061f0:	fffff3ff 	.word	0xfffff3ff
 80061f4:	fffffcff 	.word	0xfffffcff
 80061f8:	fff3ffff 	.word	0xfff3ffff
 80061fc:	ffcfffff 	.word	0xffcfffff
 8006200:	ffffcfff 	.word	0xffffcfff
 8006204:	ffff3fff 	.word	0xffff3fff
 8006208:	ffbfffff 	.word	0xffbfffff
 800620c:	feffffff 	.word	0xfeffffff

08006210 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006210:	b590      	push	{r4, r7, lr}
 8006212:	b089      	sub	sp, #36	@ 0x24
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2228      	movs	r2, #40	@ 0x28
 8006220:	5c9b      	ldrb	r3, [r3, r2]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d101      	bne.n	800622a <HAL_RTC_SetAlarm_IT+0x1a>
 8006226:	2302      	movs	r3, #2
 8006228:	e127      	b.n	800647a <HAL_RTC_SetAlarm_IT+0x26a>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2228      	movs	r2, #40	@ 0x28
 800622e:	2101      	movs	r1, #1
 8006230:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2229      	movs	r2, #41	@ 0x29
 8006236:	2102      	movs	r1, #2
 8006238:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d136      	bne.n	80062ae <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	2240      	movs	r2, #64	@ 0x40
 8006248:	4013      	ands	r3, r2
 800624a:	d102      	bne.n	8006252 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2200      	movs	r2, #0
 8006250:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	0018      	movs	r0, r3
 8006258:	f000 fa1e 	bl	8006698 <RTC_ByteToBcd2>
 800625c:	0003      	movs	r3, r0
 800625e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	785b      	ldrb	r3, [r3, #1]
 8006264:	0018      	movs	r0, r3
 8006266:	f000 fa17 	bl	8006698 <RTC_ByteToBcd2>
 800626a:	0003      	movs	r3, r0
 800626c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800626e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	789b      	ldrb	r3, [r3, #2]
 8006274:	0018      	movs	r0, r3
 8006276:	f000 fa0f 	bl	8006698 <RTC_ByteToBcd2>
 800627a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800627c:	0022      	movs	r2, r4
 800627e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	78db      	ldrb	r3, [r3, #3]
 8006284:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006286:	431a      	orrs	r2, r3
 8006288:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	2220      	movs	r2, #32
 800628e:	5c9b      	ldrb	r3, [r3, r2]
 8006290:	0018      	movs	r0, r3
 8006292:	f000 fa01 	bl	8006698 <RTC_ByteToBcd2>
 8006296:	0003      	movs	r3, r0
 8006298:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800629a:	0022      	movs	r2, r4
 800629c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80062a2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80062a8:	4313      	orrs	r3, r2
 80062aa:	61fb      	str	r3, [r7, #28]
 80062ac:	e022      	b.n	80062f4 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	2240      	movs	r2, #64	@ 0x40
 80062b6:	4013      	ands	r3, r2
 80062b8:	d102      	bne.n	80062c0 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2200      	movs	r2, #0
 80062be:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	785b      	ldrb	r3, [r3, #1]
 80062ca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80062cc:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80062d2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	78db      	ldrb	r3, [r3, #3]
 80062d8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80062da:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2120      	movs	r1, #32
 80062e0:	5c5b      	ldrb	r3, [r3, r1]
 80062e2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80062e4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80062ea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80062f0:	4313      	orrs	r3, r2
 80062f2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	22ca      	movs	r2, #202	@ 0xca
 8006306:	625a      	str	r2, [r3, #36]	@ 0x24
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2253      	movs	r2, #83	@ 0x53
 800630e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006314:	2380      	movs	r3, #128	@ 0x80
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	429a      	cmp	r2, r3
 800631a:	d14c      	bne.n	80063b6 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	699a      	ldr	r2, [r3, #24]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4957      	ldr	r1, [pc, #348]	@ (8006484 <HAL_RTC_SetAlarm_IT+0x274>)
 8006328:	400a      	ands	r2, r1
 800632a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2101      	movs	r1, #1
 8006338:	430a      	orrs	r2, r1
 800633a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 800633c:	f7fd fef4 	bl	8004128 <HAL_GetTick>
 8006340:	0003      	movs	r3, r0
 8006342:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006344:	e016      	b.n	8006374 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006346:	f7fd feef 	bl	8004128 <HAL_GetTick>
 800634a:	0002      	movs	r2, r0
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	1ad2      	subs	r2, r2, r3
 8006350:	23fa      	movs	r3, #250	@ 0xfa
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	429a      	cmp	r2, r3
 8006356:	d90d      	bls.n	8006374 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	22ff      	movs	r2, #255	@ 0xff
 800635e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2229      	movs	r2, #41	@ 0x29
 8006364:	2103      	movs	r1, #3
 8006366:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2228      	movs	r2, #40	@ 0x28
 800636c:	2100      	movs	r1, #0
 800636e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e082      	b.n	800647a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	2201      	movs	r2, #1
 800637c:	4013      	ands	r3, r2
 800637e:	d0e2      	beq.n	8006346 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	69fa      	ldr	r2, [r7, #28]
 8006386:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699a      	ldr	r2, [r3, #24]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2180      	movs	r1, #128	@ 0x80
 800639c:	0049      	lsls	r1, r1, #1
 800639e:	430a      	orrs	r2, r1
 80063a0:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	699a      	ldr	r2, [r3, #24]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2180      	movs	r1, #128	@ 0x80
 80063ae:	0149      	lsls	r1, r1, #5
 80063b0:	430a      	orrs	r2, r1
 80063b2:	619a      	str	r2, [r3, #24]
 80063b4:	e04b      	b.n	800644e <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	699a      	ldr	r2, [r3, #24]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4931      	ldr	r1, [pc, #196]	@ (8006488 <HAL_RTC_SetAlarm_IT+0x278>)
 80063c2:	400a      	ands	r2, r1
 80063c4:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2102      	movs	r1, #2
 80063d2:	430a      	orrs	r2, r1
 80063d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 80063d6:	f7fd fea7 	bl	8004128 <HAL_GetTick>
 80063da:	0003      	movs	r3, r0
 80063dc:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80063de:	e016      	b.n	800640e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80063e0:	f7fd fea2 	bl	8004128 <HAL_GetTick>
 80063e4:	0002      	movs	r2, r0
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	1ad2      	subs	r2, r2, r3
 80063ea:	23fa      	movs	r3, #250	@ 0xfa
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d90d      	bls.n	800640e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	22ff      	movs	r2, #255	@ 0xff
 80063f8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2229      	movs	r2, #41	@ 0x29
 80063fe:	2103      	movs	r1, #3
 8006400:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2228      	movs	r2, #40	@ 0x28
 8006406:	2100      	movs	r1, #0
 8006408:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e035      	b.n	800647a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	2202      	movs	r2, #2
 8006416:	4013      	ands	r3, r2
 8006418:	d0e2      	beq.n	80063e0 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	69ba      	ldr	r2, [r7, #24]
 8006428:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	699a      	ldr	r2, [r3, #24]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2180      	movs	r1, #128	@ 0x80
 8006436:	0089      	lsls	r1, r1, #2
 8006438:	430a      	orrs	r2, r1
 800643a:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	699a      	ldr	r2, [r3, #24]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2180      	movs	r1, #128	@ 0x80
 8006448:	0189      	lsls	r1, r1, #6
 800644a:	430a      	orrs	r2, r1
 800644c:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800644e:	4a0f      	ldr	r2, [pc, #60]	@ (800648c <HAL_RTC_SetAlarm_IT+0x27c>)
 8006450:	2380      	movs	r3, #128	@ 0x80
 8006452:	58d3      	ldr	r3, [r2, r3]
 8006454:	490d      	ldr	r1, [pc, #52]	@ (800648c <HAL_RTC_SetAlarm_IT+0x27c>)
 8006456:	2280      	movs	r2, #128	@ 0x80
 8006458:	0312      	lsls	r2, r2, #12
 800645a:	4313      	orrs	r3, r2
 800645c:	2280      	movs	r2, #128	@ 0x80
 800645e:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	22ff      	movs	r2, #255	@ 0xff
 8006466:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2229      	movs	r2, #41	@ 0x29
 800646c:	2101      	movs	r1, #1
 800646e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2228      	movs	r2, #40	@ 0x28
 8006474:	2100      	movs	r1, #0
 8006476:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	0018      	movs	r0, r3
 800647c:	46bd      	mov	sp, r7
 800647e:	b009      	add	sp, #36	@ 0x24
 8006480:	bd90      	pop	{r4, r7, pc}
 8006482:	46c0      	nop			@ (mov r8, r8)
 8006484:	fffffeff 	.word	0xfffffeff
 8006488:	fffffdff 	.word	0xfffffdff
 800648c:	40021800 	.word	0x40021800

08006490 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
 800649c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	2380      	movs	r3, #128	@ 0x80
 80064a2:	005b      	lsls	r3, r3, #1
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d144      	bne.n	8006532 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2280      	movs	r2, #128	@ 0x80
 80064ac:	0052      	lsls	r2, r2, #1
 80064ae:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b6:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064be:	045b      	lsls	r3, r3, #17
 80064c0:	0c5b      	lsrs	r3, r3, #17
 80064c2:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	0c1b      	lsrs	r3, r3, #16
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	223f      	movs	r2, #63	@ 0x3f
 80064cc:	4013      	ands	r3, r2
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	0a1b      	lsrs	r3, r3, #8
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	227f      	movs	r2, #127	@ 0x7f
 80064dc:	4013      	ands	r3, r2
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	227f      	movs	r2, #127	@ 0x7f
 80064ea:	4013      	ands	r3, r2
 80064ec:	b2da      	uxtb	r2, r3
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	0d9b      	lsrs	r3, r3, #22
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2201      	movs	r2, #1
 80064fa:	4013      	ands	r3, r2
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	0e1b      	lsrs	r3, r3, #24
 800650c:	b2db      	uxtb	r3, r3
 800650e:	223f      	movs	r2, #63	@ 0x3f
 8006510:	4013      	ands	r3, r2
 8006512:	b2d9      	uxtb	r1, r3
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2220      	movs	r2, #32
 8006518:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	2380      	movs	r3, #128	@ 0x80
 800651e:	05db      	lsls	r3, r3, #23
 8006520:	401a      	ands	r2, r3
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	4a3b      	ldr	r2, [pc, #236]	@ (8006618 <HAL_RTC_GetAlarm+0x188>)
 800652a:	401a      	ands	r2, r3
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	615a      	str	r2, [r3, #20]
 8006530:	e043      	b.n	80065ba <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2280      	movs	r2, #128	@ 0x80
 8006536:	0092      	lsls	r2, r2, #2
 8006538:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006540:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006548:	045b      	lsls	r3, r3, #17
 800654a:	0c5b      	lsrs	r3, r3, #17
 800654c:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	0c1b      	lsrs	r3, r3, #16
 8006552:	b2db      	uxtb	r3, r3
 8006554:	223f      	movs	r2, #63	@ 0x3f
 8006556:	4013      	ands	r3, r2
 8006558:	b2da      	uxtb	r2, r3
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	0a1b      	lsrs	r3, r3, #8
 8006562:	b2db      	uxtb	r3, r3
 8006564:	227f      	movs	r2, #127	@ 0x7f
 8006566:	4013      	ands	r3, r2
 8006568:	b2da      	uxtb	r2, r3
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	b2db      	uxtb	r3, r3
 8006572:	227f      	movs	r2, #127	@ 0x7f
 8006574:	4013      	ands	r3, r2
 8006576:	b2da      	uxtb	r2, r3
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	0d9b      	lsrs	r3, r3, #22
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2201      	movs	r2, #1
 8006584:	4013      	ands	r3, r2
 8006586:	b2da      	uxtb	r2, r3
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	0e1b      	lsrs	r3, r3, #24
 8006596:	b2db      	uxtb	r3, r3
 8006598:	223f      	movs	r2, #63	@ 0x3f
 800659a:	4013      	ands	r3, r2
 800659c:	b2d9      	uxtb	r1, r3
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2220      	movs	r2, #32
 80065a2:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	2380      	movs	r3, #128	@ 0x80
 80065a8:	05db      	lsls	r3, r3, #23
 80065aa:	401a      	ands	r2, r3
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	4a19      	ldr	r2, [pc, #100]	@ (8006618 <HAL_RTC_GetAlarm+0x188>)
 80065b4:	401a      	ands	r2, r3
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d125      	bne.n	800660c <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	0018      	movs	r0, r3
 80065c6:	f000 f88f 	bl	80066e8 <RTC_Bcd2ToByte>
 80065ca:	0003      	movs	r3, r0
 80065cc:	001a      	movs	r2, r3
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	785b      	ldrb	r3, [r3, #1]
 80065d6:	0018      	movs	r0, r3
 80065d8:	f000 f886 	bl	80066e8 <RTC_Bcd2ToByte>
 80065dc:	0003      	movs	r3, r0
 80065de:	001a      	movs	r2, r3
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	789b      	ldrb	r3, [r3, #2]
 80065e8:	0018      	movs	r0, r3
 80065ea:	f000 f87d 	bl	80066e8 <RTC_Bcd2ToByte>
 80065ee:	0003      	movs	r3, r0
 80065f0:	001a      	movs	r2, r3
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2220      	movs	r2, #32
 80065fa:	5c9b      	ldrb	r3, [r3, r2]
 80065fc:	0018      	movs	r0, r3
 80065fe:	f000 f873 	bl	80066e8 <RTC_Bcd2ToByte>
 8006602:	0003      	movs	r3, r0
 8006604:	0019      	movs	r1, r3
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2220      	movs	r2, #32
 800660a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	0018      	movs	r0, r3
 8006610:	46bd      	mov	sp, r7
 8006612:	b006      	add	sp, #24
 8006614:	bd80      	pop	{r7, pc}
 8006616:	46c0      	nop			@ (mov r8, r8)
 8006618:	80808080 	.word	0x80808080

0800661c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	699a      	ldr	r2, [r3, #24]
 800662a:	2380      	movs	r3, #128	@ 0x80
 800662c:	015b      	lsls	r3, r3, #5
 800662e:	4013      	ands	r3, r2
 8006630:	d011      	beq.n	8006656 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006638:	2201      	movs	r2, #1
 800663a:	4013      	ands	r3, r2
 800663c:	d00b      	beq.n	8006656 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2101      	movs	r1, #1
 800664a:	430a      	orrs	r2, r1
 800664c:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	0018      	movs	r0, r3
 8006652:	f7fd fa1f 	bl	8003a94 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	699a      	ldr	r2, [r3, #24]
 800665c:	2380      	movs	r3, #128	@ 0x80
 800665e:	019b      	lsls	r3, r3, #6
 8006660:	4013      	ands	r3, r2
 8006662:	d011      	beq.n	8006688 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800666a:	2202      	movs	r2, #2
 800666c:	4013      	ands	r3, r2
 800666e:	d00b      	beq.n	8006688 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2102      	movs	r1, #2
 800667c:	430a      	orrs	r2, r1
 800667e:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	0018      	movs	r0, r3
 8006684:	f000 f873 	bl	800676e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2229      	movs	r2, #41	@ 0x29
 800668c:	2101      	movs	r1, #1
 800668e:	5499      	strb	r1, [r3, r2]
}
 8006690:	46c0      	nop			@ (mov r8, r8)
 8006692:	46bd      	mov	sp, r7
 8006694:	b002      	add	sp, #8
 8006696:	bd80      	pop	{r7, pc}

08006698 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	0002      	movs	r2, r0
 80066a0:	1dfb      	adds	r3, r7, #7
 80066a2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80066a8:	230b      	movs	r3, #11
 80066aa:	18fb      	adds	r3, r7, r3
 80066ac:	1dfa      	adds	r2, r7, #7
 80066ae:	7812      	ldrb	r2, [r2, #0]
 80066b0:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80066b2:	e008      	b.n	80066c6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	3301      	adds	r3, #1
 80066b8:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80066ba:	220b      	movs	r2, #11
 80066bc:	18bb      	adds	r3, r7, r2
 80066be:	18ba      	adds	r2, r7, r2
 80066c0:	7812      	ldrb	r2, [r2, #0]
 80066c2:	3a0a      	subs	r2, #10
 80066c4:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80066c6:	210b      	movs	r1, #11
 80066c8:	187b      	adds	r3, r7, r1
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	2b09      	cmp	r3, #9
 80066ce:	d8f1      	bhi.n	80066b4 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	011b      	lsls	r3, r3, #4
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	187b      	adds	r3, r7, r1
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	4313      	orrs	r3, r2
 80066de:	b2db      	uxtb	r3, r3
}
 80066e0:	0018      	movs	r0, r3
 80066e2:	46bd      	mov	sp, r7
 80066e4:	b004      	add	sp, #16
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	0002      	movs	r2, r0
 80066f0:	1dfb      	adds	r3, r7, #7
 80066f2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80066f4:	1dfb      	adds	r3, r7, #7
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	091b      	lsrs	r3, r3, #4
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	001a      	movs	r2, r3
 80066fe:	0013      	movs	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	189b      	adds	r3, r3, r2
 8006704:	005b      	lsls	r3, r3, #1
 8006706:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	b2da      	uxtb	r2, r3
 800670c:	1dfb      	adds	r3, r7, #7
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	210f      	movs	r1, #15
 8006712:	400b      	ands	r3, r1
 8006714:	b2db      	uxtb	r3, r3
 8006716:	18d3      	adds	r3, r2, r3
 8006718:	b2db      	uxtb	r3, r3
}
 800671a:	0018      	movs	r0, r3
 800671c:	46bd      	mov	sp, r7
 800671e:	b004      	add	sp, #16
 8006720:	bd80      	pop	{r7, pc}

08006722 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b082      	sub	sp, #8
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006730:	2204      	movs	r2, #4
 8006732:	4013      	ands	r3, r2
 8006734:	d00b      	beq.n	800674e <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2104      	movs	r1, #4
 8006742:	430a      	orrs	r2, r1
 8006744:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	0018      	movs	r0, r3
 800674a:	f000 f808 	bl	800675e <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2229      	movs	r2, #41	@ 0x29
 8006752:	2101      	movs	r1, #1
 8006754:	5499      	strb	r1, [r3, r2]
}
 8006756:	46c0      	nop			@ (mov r8, r8)
 8006758:	46bd      	mov	sp, r7
 800675a:	b002      	add	sp, #8
 800675c:	bd80      	pop	{r7, pc}

0800675e <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b082      	sub	sp, #8
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8006766:	46c0      	nop			@ (mov r8, r8)
 8006768:	46bd      	mov	sp, r7
 800676a:	b002      	add	sp, #8
 800676c:	bd80      	pop	{r7, pc}

0800676e <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b082      	sub	sp, #8
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006776:	46c0      	nop			@ (mov r8, r8)
 8006778:	46bd      	mov	sp, r7
 800677a:	b002      	add	sp, #8
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e0a8      	b.n	80068e4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006796:	2b00      	cmp	r3, #0
 8006798:	d109      	bne.n	80067ae <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	2382      	movs	r3, #130	@ 0x82
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d009      	beq.n	80067ba <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	61da      	str	r2, [r3, #28]
 80067ac:	e005      	b.n	80067ba <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	225d      	movs	r2, #93	@ 0x5d
 80067c4:	5c9b      	ldrb	r3, [r3, r2]
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d107      	bne.n	80067dc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	225c      	movs	r2, #92	@ 0x5c
 80067d0:	2100      	movs	r1, #0
 80067d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	0018      	movs	r0, r3
 80067d8:	f7fd fa26 	bl	8003c28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	225d      	movs	r2, #93	@ 0x5d
 80067e0:	2102      	movs	r1, #2
 80067e2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2140      	movs	r1, #64	@ 0x40
 80067f0:	438a      	bics	r2, r1
 80067f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68da      	ldr	r2, [r3, #12]
 80067f8:	23e0      	movs	r3, #224	@ 0xe0
 80067fa:	00db      	lsls	r3, r3, #3
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d902      	bls.n	8006806 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006800:	2300      	movs	r3, #0
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	e002      	b.n	800680c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006806:	2380      	movs	r3, #128	@ 0x80
 8006808:	015b      	lsls	r3, r3, #5
 800680a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68da      	ldr	r2, [r3, #12]
 8006810:	23f0      	movs	r3, #240	@ 0xf0
 8006812:	011b      	lsls	r3, r3, #4
 8006814:	429a      	cmp	r2, r3
 8006816:	d008      	beq.n	800682a <HAL_SPI_Init+0xaa>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68da      	ldr	r2, [r3, #12]
 800681c:	23e0      	movs	r3, #224	@ 0xe0
 800681e:	00db      	lsls	r3, r3, #3
 8006820:	429a      	cmp	r2, r3
 8006822:	d002      	beq.n	800682a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	2382      	movs	r3, #130	@ 0x82
 8006830:	005b      	lsls	r3, r3, #1
 8006832:	401a      	ands	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6899      	ldr	r1, [r3, #8]
 8006838:	2384      	movs	r3, #132	@ 0x84
 800683a:	021b      	lsls	r3, r3, #8
 800683c:	400b      	ands	r3, r1
 800683e:	431a      	orrs	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	2102      	movs	r1, #2
 8006846:	400b      	ands	r3, r1
 8006848:	431a      	orrs	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	2101      	movs	r1, #1
 8006850:	400b      	ands	r3, r1
 8006852:	431a      	orrs	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6999      	ldr	r1, [r3, #24]
 8006858:	2380      	movs	r3, #128	@ 0x80
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	400b      	ands	r3, r1
 800685e:	431a      	orrs	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	2138      	movs	r1, #56	@ 0x38
 8006866:	400b      	ands	r3, r1
 8006868:	431a      	orrs	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	2180      	movs	r1, #128	@ 0x80
 8006870:	400b      	ands	r3, r1
 8006872:	431a      	orrs	r2, r3
 8006874:	0011      	movs	r1, r2
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800687a:	2380      	movs	r3, #128	@ 0x80
 800687c:	019b      	lsls	r3, r3, #6
 800687e:	401a      	ands	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	430a      	orrs	r2, r1
 8006886:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	0c1b      	lsrs	r3, r3, #16
 800688e:	2204      	movs	r2, #4
 8006890:	401a      	ands	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006896:	2110      	movs	r1, #16
 8006898:	400b      	ands	r3, r1
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068a0:	2108      	movs	r1, #8
 80068a2:	400b      	ands	r3, r1
 80068a4:	431a      	orrs	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68d9      	ldr	r1, [r3, #12]
 80068aa:	23f0      	movs	r3, #240	@ 0xf0
 80068ac:	011b      	lsls	r3, r3, #4
 80068ae:	400b      	ands	r3, r1
 80068b0:	431a      	orrs	r2, r3
 80068b2:	0011      	movs	r1, r2
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	2380      	movs	r3, #128	@ 0x80
 80068b8:	015b      	lsls	r3, r3, #5
 80068ba:	401a      	ands	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	430a      	orrs	r2, r1
 80068c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	69da      	ldr	r2, [r3, #28]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4907      	ldr	r1, [pc, #28]	@ (80068ec <HAL_SPI_Init+0x16c>)
 80068d0:	400a      	ands	r2, r1
 80068d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	225d      	movs	r2, #93	@ 0x5d
 80068de:	2101      	movs	r1, #1
 80068e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	0018      	movs	r0, r3
 80068e6:	46bd      	mov	sp, r7
 80068e8:	b004      	add	sp, #16
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	fffff7ff 	.word	0xfffff7ff

080068f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b088      	sub	sp, #32
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	603b      	str	r3, [r7, #0]
 80068fc:	1dbb      	adds	r3, r7, #6
 80068fe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006900:	231f      	movs	r3, #31
 8006902:	18fb      	adds	r3, r7, r3
 8006904:	2200      	movs	r2, #0
 8006906:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	225c      	movs	r2, #92	@ 0x5c
 800690c:	5c9b      	ldrb	r3, [r3, r2]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d101      	bne.n	8006916 <HAL_SPI_Transmit+0x26>
 8006912:	2302      	movs	r3, #2
 8006914:	e147      	b.n	8006ba6 <HAL_SPI_Transmit+0x2b6>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	225c      	movs	r2, #92	@ 0x5c
 800691a:	2101      	movs	r1, #1
 800691c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800691e:	f7fd fc03 	bl	8004128 <HAL_GetTick>
 8006922:	0003      	movs	r3, r0
 8006924:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006926:	2316      	movs	r3, #22
 8006928:	18fb      	adds	r3, r7, r3
 800692a:	1dba      	adds	r2, r7, #6
 800692c:	8812      	ldrh	r2, [r2, #0]
 800692e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	225d      	movs	r2, #93	@ 0x5d
 8006934:	5c9b      	ldrb	r3, [r3, r2]
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b01      	cmp	r3, #1
 800693a:	d004      	beq.n	8006946 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800693c:	231f      	movs	r3, #31
 800693e:	18fb      	adds	r3, r7, r3
 8006940:	2202      	movs	r2, #2
 8006942:	701a      	strb	r2, [r3, #0]
    goto error;
 8006944:	e128      	b.n	8006b98 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d003      	beq.n	8006954 <HAL_SPI_Transmit+0x64>
 800694c:	1dbb      	adds	r3, r7, #6
 800694e:	881b      	ldrh	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d104      	bne.n	800695e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006954:	231f      	movs	r3, #31
 8006956:	18fb      	adds	r3, r7, r3
 8006958:	2201      	movs	r2, #1
 800695a:	701a      	strb	r2, [r3, #0]
    goto error;
 800695c:	e11c      	b.n	8006b98 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	225d      	movs	r2, #93	@ 0x5d
 8006962:	2103      	movs	r1, #3
 8006964:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	1dba      	adds	r2, r7, #6
 8006976:	8812      	ldrh	r2, [r2, #0]
 8006978:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	1dba      	adds	r2, r7, #6
 800697e:	8812      	ldrh	r2, [r2, #0]
 8006980:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2244      	movs	r2, #68	@ 0x44
 800698c:	2100      	movs	r1, #0
 800698e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2246      	movs	r2, #70	@ 0x46
 8006994:	2100      	movs	r1, #0
 8006996:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	689a      	ldr	r2, [r3, #8]
 80069a8:	2380      	movs	r3, #128	@ 0x80
 80069aa:	021b      	lsls	r3, r3, #8
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d110      	bne.n	80069d2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2140      	movs	r1, #64	@ 0x40
 80069bc:	438a      	bics	r2, r1
 80069be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2180      	movs	r1, #128	@ 0x80
 80069cc:	01c9      	lsls	r1, r1, #7
 80069ce:	430a      	orrs	r2, r1
 80069d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2240      	movs	r2, #64	@ 0x40
 80069da:	4013      	ands	r3, r2
 80069dc:	2b40      	cmp	r3, #64	@ 0x40
 80069de:	d007      	beq.n	80069f0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2140      	movs	r1, #64	@ 0x40
 80069ec:	430a      	orrs	r2, r1
 80069ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	68da      	ldr	r2, [r3, #12]
 80069f4:	23e0      	movs	r3, #224	@ 0xe0
 80069f6:	00db      	lsls	r3, r3, #3
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d952      	bls.n	8006aa2 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d004      	beq.n	8006a0e <HAL_SPI_Transmit+0x11e>
 8006a04:	2316      	movs	r3, #22
 8006a06:	18fb      	adds	r3, r7, r3
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d143      	bne.n	8006a96 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a12:	881a      	ldrh	r2, [r3, #0]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a1e:	1c9a      	adds	r2, r3, #2
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a32:	e030      	b.n	8006a96 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d112      	bne.n	8006a68 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a46:	881a      	ldrh	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a52:	1c9a      	adds	r2, r3, #2
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006a66:	e016      	b.n	8006a96 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a68:	f7fd fb5e 	bl	8004128 <HAL_GetTick>
 8006a6c:	0002      	movs	r2, r0
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d802      	bhi.n	8006a7e <HAL_SPI_Transmit+0x18e>
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	d102      	bne.n	8006a84 <HAL_SPI_Transmit+0x194>
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d108      	bne.n	8006a96 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8006a84:	231f      	movs	r3, #31
 8006a86:	18fb      	adds	r3, r7, r3
 8006a88:	2203      	movs	r2, #3
 8006a8a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	225d      	movs	r2, #93	@ 0x5d
 8006a90:	2101      	movs	r1, #1
 8006a92:	5499      	strb	r1, [r3, r2]
          goto error;
 8006a94:	e080      	b.n	8006b98 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1c9      	bne.n	8006a34 <HAL_SPI_Transmit+0x144>
 8006aa0:	e053      	b.n	8006b4a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d004      	beq.n	8006ab4 <HAL_SPI_Transmit+0x1c4>
 8006aaa:	2316      	movs	r3, #22
 8006aac:	18fb      	adds	r3, r7, r3
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d145      	bne.n	8006b40 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	330c      	adds	r3, #12
 8006abe:	7812      	ldrb	r2, [r2, #0]
 8006ac0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac6:	1c5a      	adds	r2, r3, #1
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006ada:	e031      	b.n	8006b40 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	2202      	movs	r2, #2
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d113      	bne.n	8006b12 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	330c      	adds	r3, #12
 8006af4:	7812      	ldrb	r2, [r2, #0]
 8006af6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006afc:	1c5a      	adds	r2, r3, #1
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b10:	e016      	b.n	8006b40 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b12:	f7fd fb09 	bl	8004128 <HAL_GetTick>
 8006b16:	0002      	movs	r2, r0
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d802      	bhi.n	8006b28 <HAL_SPI_Transmit+0x238>
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	3301      	adds	r3, #1
 8006b26:	d102      	bne.n	8006b2e <HAL_SPI_Transmit+0x23e>
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d108      	bne.n	8006b40 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8006b2e:	231f      	movs	r3, #31
 8006b30:	18fb      	adds	r3, r7, r3
 8006b32:	2203      	movs	r2, #3
 8006b34:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	225d      	movs	r2, #93	@ 0x5d
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	5499      	strb	r1, [r3, r2]
          goto error;
 8006b3e:	e02b      	b.n	8006b98 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1c8      	bne.n	8006adc <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b4a:	69ba      	ldr	r2, [r7, #24]
 8006b4c:	6839      	ldr	r1, [r7, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	0018      	movs	r0, r3
 8006b52:	f000 f95d 	bl	8006e10 <SPI_EndRxTxTransaction>
 8006b56:	1e03      	subs	r3, r0, #0
 8006b58:	d002      	beq.n	8006b60 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10a      	bne.n	8006b7e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b68:	2300      	movs	r3, #0
 8006b6a:	613b      	str	r3, [r7, #16]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	613b      	str	r3, [r7, #16]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	613b      	str	r3, [r7, #16]
 8006b7c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d004      	beq.n	8006b90 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8006b86:	231f      	movs	r3, #31
 8006b88:	18fb      	adds	r3, r7, r3
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	701a      	strb	r2, [r3, #0]
 8006b8e:	e003      	b.n	8006b98 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	225d      	movs	r2, #93	@ 0x5d
 8006b94:	2101      	movs	r1, #1
 8006b96:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	225c      	movs	r2, #92	@ 0x5c
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006ba0:	231f      	movs	r3, #31
 8006ba2:	18fb      	adds	r3, r7, r3
 8006ba4:	781b      	ldrb	r3, [r3, #0]
}
 8006ba6:	0018      	movs	r0, r3
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	b008      	add	sp, #32
 8006bac:	bd80      	pop	{r7, pc}
	...

08006bb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b088      	sub	sp, #32
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	603b      	str	r3, [r7, #0]
 8006bbc:	1dfb      	adds	r3, r7, #7
 8006bbe:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006bc0:	f7fd fab2 	bl	8004128 <HAL_GetTick>
 8006bc4:	0002      	movs	r2, r0
 8006bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc8:	1a9b      	subs	r3, r3, r2
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	18d3      	adds	r3, r2, r3
 8006bce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006bd0:	f7fd faaa 	bl	8004128 <HAL_GetTick>
 8006bd4:	0003      	movs	r3, r0
 8006bd6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006bd8:	4b3a      	ldr	r3, [pc, #232]	@ (8006cc4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	015b      	lsls	r3, r3, #5
 8006bde:	0d1b      	lsrs	r3, r3, #20
 8006be0:	69fa      	ldr	r2, [r7, #28]
 8006be2:	4353      	muls	r3, r2
 8006be4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006be6:	e058      	b.n	8006c9a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	3301      	adds	r3, #1
 8006bec:	d055      	beq.n	8006c9a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bee:	f7fd fa9b 	bl	8004128 <HAL_GetTick>
 8006bf2:	0002      	movs	r2, r0
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	69fa      	ldr	r2, [r7, #28]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d902      	bls.n	8006c04 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d142      	bne.n	8006c8a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685a      	ldr	r2, [r3, #4]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	21e0      	movs	r1, #224	@ 0xe0
 8006c10:	438a      	bics	r2, r1
 8006c12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	2382      	movs	r3, #130	@ 0x82
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d113      	bne.n	8006c48 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	689a      	ldr	r2, [r3, #8]
 8006c24:	2380      	movs	r3, #128	@ 0x80
 8006c26:	021b      	lsls	r3, r3, #8
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d005      	beq.n	8006c38 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	689a      	ldr	r2, [r3, #8]
 8006c30:	2380      	movs	r3, #128	@ 0x80
 8006c32:	00db      	lsls	r3, r3, #3
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d107      	bne.n	8006c48 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2140      	movs	r1, #64	@ 0x40
 8006c44:	438a      	bics	r2, r1
 8006c46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c4c:	2380      	movs	r3, #128	@ 0x80
 8006c4e:	019b      	lsls	r3, r3, #6
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d110      	bne.n	8006c76 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	491a      	ldr	r1, [pc, #104]	@ (8006cc8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006c60:	400a      	ands	r2, r1
 8006c62:	601a      	str	r2, [r3, #0]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2180      	movs	r1, #128	@ 0x80
 8006c70:	0189      	lsls	r1, r1, #6
 8006c72:	430a      	orrs	r2, r1
 8006c74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	225d      	movs	r2, #93	@ 0x5d
 8006c7a:	2101      	movs	r1, #1
 8006c7c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	225c      	movs	r2, #92	@ 0x5c
 8006c82:	2100      	movs	r1, #0
 8006c84:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e017      	b.n	8006cba <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006c90:	2300      	movs	r3, #0
 8006c92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	3b01      	subs	r3, #1
 8006c98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	425a      	negs	r2, r3
 8006caa:	4153      	adcs	r3, r2
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	001a      	movs	r2, r3
 8006cb0:	1dfb      	adds	r3, r7, #7
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d197      	bne.n	8006be8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	0018      	movs	r0, r3
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	b008      	add	sp, #32
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	46c0      	nop			@ (mov r8, r8)
 8006cc4:	20000e84 	.word	0x20000e84
 8006cc8:	ffffdfff 	.word	0xffffdfff

08006ccc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b08a      	sub	sp, #40	@ 0x28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
 8006cd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006cda:	2317      	movs	r3, #23
 8006cdc:	18fb      	adds	r3, r7, r3
 8006cde:	2200      	movs	r2, #0
 8006ce0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006ce2:	f7fd fa21 	bl	8004128 <HAL_GetTick>
 8006ce6:	0002      	movs	r2, r0
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cea:	1a9b      	subs	r3, r3, r2
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	18d3      	adds	r3, r2, r3
 8006cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006cf2:	f7fd fa19 	bl	8004128 <HAL_GetTick>
 8006cf6:	0003      	movs	r3, r0
 8006cf8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	330c      	adds	r3, #12
 8006d00:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006d02:	4b41      	ldr	r3, [pc, #260]	@ (8006e08 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	0013      	movs	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	189b      	adds	r3, r3, r2
 8006d0c:	00da      	lsls	r2, r3, #3
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	0d1b      	lsrs	r3, r3, #20
 8006d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d14:	4353      	muls	r3, r2
 8006d16:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006d18:	e068      	b.n	8006dec <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	23c0      	movs	r3, #192	@ 0xc0
 8006d1e:	00db      	lsls	r3, r3, #3
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d10a      	bne.n	8006d3a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d107      	bne.n	8006d3a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	b2da      	uxtb	r2, r3
 8006d30:	2117      	movs	r1, #23
 8006d32:	187b      	adds	r3, r7, r1
 8006d34:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006d36:	187b      	adds	r3, r7, r1
 8006d38:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	d055      	beq.n	8006dec <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d40:	f7fd f9f2 	bl	8004128 <HAL_GetTick>
 8006d44:	0002      	movs	r2, r0
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d902      	bls.n	8006d56 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d142      	bne.n	8006ddc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	21e0      	movs	r1, #224	@ 0xe0
 8006d62:	438a      	bics	r2, r1
 8006d64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	685a      	ldr	r2, [r3, #4]
 8006d6a:	2382      	movs	r3, #130	@ 0x82
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d113      	bne.n	8006d9a <SPI_WaitFifoStateUntilTimeout+0xce>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	689a      	ldr	r2, [r3, #8]
 8006d76:	2380      	movs	r3, #128	@ 0x80
 8006d78:	021b      	lsls	r3, r3, #8
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d005      	beq.n	8006d8a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	689a      	ldr	r2, [r3, #8]
 8006d82:	2380      	movs	r3, #128	@ 0x80
 8006d84:	00db      	lsls	r3, r3, #3
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d107      	bne.n	8006d9a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2140      	movs	r1, #64	@ 0x40
 8006d96:	438a      	bics	r2, r1
 8006d98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d9e:	2380      	movs	r3, #128	@ 0x80
 8006da0:	019b      	lsls	r3, r3, #6
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d110      	bne.n	8006dc8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4916      	ldr	r1, [pc, #88]	@ (8006e0c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006db2:	400a      	ands	r2, r1
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2180      	movs	r1, #128	@ 0x80
 8006dc2:	0189      	lsls	r1, r1, #6
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	225d      	movs	r2, #93	@ 0x5d
 8006dcc:	2101      	movs	r1, #1
 8006dce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	225c      	movs	r2, #92	@ 0x5c
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e010      	b.n	8006dfe <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d101      	bne.n	8006de6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	3b01      	subs	r3, #1
 8006dea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	4013      	ands	r3, r2
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d18e      	bne.n	8006d1a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	0018      	movs	r0, r3
 8006e00:	46bd      	mov	sp, r7
 8006e02:	b00a      	add	sp, #40	@ 0x28
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	46c0      	nop			@ (mov r8, r8)
 8006e08:	20000e84 	.word	0x20000e84
 8006e0c:	ffffdfff 	.word	0xffffdfff

08006e10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af02      	add	r7, sp, #8
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	23c0      	movs	r3, #192	@ 0xc0
 8006e20:	0159      	lsls	r1, r3, #5
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	0013      	movs	r3, r2
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f7ff ff4e 	bl	8006ccc <SPI_WaitFifoStateUntilTimeout>
 8006e30:	1e03      	subs	r3, r0, #0
 8006e32:	d007      	beq.n	8006e44 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e38:	2220      	movs	r2, #32
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e027      	b.n	8006e94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	0013      	movs	r3, r2
 8006e4e:	2200      	movs	r2, #0
 8006e50:	2180      	movs	r1, #128	@ 0x80
 8006e52:	f7ff fead 	bl	8006bb0 <SPI_WaitFlagStateUntilTimeout>
 8006e56:	1e03      	subs	r3, r0, #0
 8006e58:	d007      	beq.n	8006e6a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e5e:	2220      	movs	r2, #32
 8006e60:	431a      	orrs	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e014      	b.n	8006e94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	23c0      	movs	r3, #192	@ 0xc0
 8006e6e:	00d9      	lsls	r1, r3, #3
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	0013      	movs	r3, r2
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f7ff ff27 	bl	8006ccc <SPI_WaitFifoStateUntilTimeout>
 8006e7e:	1e03      	subs	r3, r0, #0
 8006e80:	d007      	beq.n	8006e92 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e86:	2220      	movs	r2, #32
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e000      	b.n	8006e94 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	0018      	movs	r0, r3
 8006e96:	46bd      	mov	sp, r7
 8006e98:	b004      	add	sp, #16
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e04a      	b.n	8006f44 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	223d      	movs	r2, #61	@ 0x3d
 8006eb2:	5c9b      	ldrb	r3, [r3, r2]
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d107      	bne.n	8006eca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	223c      	movs	r2, #60	@ 0x3c
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	0018      	movs	r0, r3
 8006ec6:	f7fc ff1d 	bl	8003d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	223d      	movs	r2, #61	@ 0x3d
 8006ece:	2102      	movs	r1, #2
 8006ed0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	3304      	adds	r3, #4
 8006eda:	0019      	movs	r1, r3
 8006edc:	0010      	movs	r0, r2
 8006ede:	f000 fb11 	bl	8007504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2248      	movs	r2, #72	@ 0x48
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	223e      	movs	r2, #62	@ 0x3e
 8006eee:	2101      	movs	r1, #1
 8006ef0:	5499      	strb	r1, [r3, r2]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	223f      	movs	r2, #63	@ 0x3f
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	5499      	strb	r1, [r3, r2]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2240      	movs	r2, #64	@ 0x40
 8006efe:	2101      	movs	r1, #1
 8006f00:	5499      	strb	r1, [r3, r2]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2241      	movs	r2, #65	@ 0x41
 8006f06:	2101      	movs	r1, #1
 8006f08:	5499      	strb	r1, [r3, r2]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2242      	movs	r2, #66	@ 0x42
 8006f0e:	2101      	movs	r1, #1
 8006f10:	5499      	strb	r1, [r3, r2]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2243      	movs	r2, #67	@ 0x43
 8006f16:	2101      	movs	r1, #1
 8006f18:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2244      	movs	r2, #68	@ 0x44
 8006f1e:	2101      	movs	r1, #1
 8006f20:	5499      	strb	r1, [r3, r2]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2245      	movs	r2, #69	@ 0x45
 8006f26:	2101      	movs	r1, #1
 8006f28:	5499      	strb	r1, [r3, r2]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2246      	movs	r2, #70	@ 0x46
 8006f2e:	2101      	movs	r1, #1
 8006f30:	5499      	strb	r1, [r3, r2]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2247      	movs	r2, #71	@ 0x47
 8006f36:	2101      	movs	r1, #1
 8006f38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	223d      	movs	r2, #61	@ 0x3d
 8006f3e:	2101      	movs	r1, #1
 8006f40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	0018      	movs	r0, r3
 8006f46:	46bd      	mov	sp, r7
 8006f48:	b002      	add	sp, #8
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d101      	bne.n	8006f5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e04a      	b.n	8006ff4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	223d      	movs	r2, #61	@ 0x3d
 8006f62:	5c9b      	ldrb	r3, [r3, r2]
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d107      	bne.n	8006f7a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	223c      	movs	r2, #60	@ 0x3c
 8006f6e:	2100      	movs	r1, #0
 8006f70:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	0018      	movs	r0, r3
 8006f76:	f000 f841 	bl	8006ffc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	223d      	movs	r2, #61	@ 0x3d
 8006f7e:	2102      	movs	r1, #2
 8006f80:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	3304      	adds	r3, #4
 8006f8a:	0019      	movs	r1, r3
 8006f8c:	0010      	movs	r0, r2
 8006f8e:	f000 fab9 	bl	8007504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2248      	movs	r2, #72	@ 0x48
 8006f96:	2101      	movs	r1, #1
 8006f98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	223e      	movs	r2, #62	@ 0x3e
 8006f9e:	2101      	movs	r1, #1
 8006fa0:	5499      	strb	r1, [r3, r2]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	223f      	movs	r2, #63	@ 0x3f
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	5499      	strb	r1, [r3, r2]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2240      	movs	r2, #64	@ 0x40
 8006fae:	2101      	movs	r1, #1
 8006fb0:	5499      	strb	r1, [r3, r2]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2241      	movs	r2, #65	@ 0x41
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	5499      	strb	r1, [r3, r2]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2242      	movs	r2, #66	@ 0x42
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	5499      	strb	r1, [r3, r2]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2243      	movs	r2, #67	@ 0x43
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2244      	movs	r2, #68	@ 0x44
 8006fce:	2101      	movs	r1, #1
 8006fd0:	5499      	strb	r1, [r3, r2]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2245      	movs	r2, #69	@ 0x45
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	5499      	strb	r1, [r3, r2]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2246      	movs	r2, #70	@ 0x46
 8006fde:	2101      	movs	r1, #1
 8006fe0:	5499      	strb	r1, [r3, r2]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2247      	movs	r2, #71	@ 0x47
 8006fe6:	2101      	movs	r1, #1
 8006fe8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	223d      	movs	r2, #61	@ 0x3d
 8006fee:	2101      	movs	r1, #1
 8006ff0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	0018      	movs	r0, r3
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	b002      	add	sp, #8
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007004:	46c0      	nop			@ (mov r8, r8)
 8007006:	46bd      	mov	sp, r7
 8007008:	b002      	add	sp, #8
 800700a:	bd80      	pop	{r7, pc}

0800700c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d108      	bne.n	800702e <HAL_TIM_PWM_Start+0x22>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	223e      	movs	r2, #62	@ 0x3e
 8007020:	5c9b      	ldrb	r3, [r3, r2]
 8007022:	b2db      	uxtb	r3, r3
 8007024:	3b01      	subs	r3, #1
 8007026:	1e5a      	subs	r2, r3, #1
 8007028:	4193      	sbcs	r3, r2
 800702a:	b2db      	uxtb	r3, r3
 800702c:	e037      	b.n	800709e <HAL_TIM_PWM_Start+0x92>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b04      	cmp	r3, #4
 8007032:	d108      	bne.n	8007046 <HAL_TIM_PWM_Start+0x3a>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	223f      	movs	r2, #63	@ 0x3f
 8007038:	5c9b      	ldrb	r3, [r3, r2]
 800703a:	b2db      	uxtb	r3, r3
 800703c:	3b01      	subs	r3, #1
 800703e:	1e5a      	subs	r2, r3, #1
 8007040:	4193      	sbcs	r3, r2
 8007042:	b2db      	uxtb	r3, r3
 8007044:	e02b      	b.n	800709e <HAL_TIM_PWM_Start+0x92>
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b08      	cmp	r3, #8
 800704a:	d108      	bne.n	800705e <HAL_TIM_PWM_Start+0x52>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2240      	movs	r2, #64	@ 0x40
 8007050:	5c9b      	ldrb	r3, [r3, r2]
 8007052:	b2db      	uxtb	r3, r3
 8007054:	3b01      	subs	r3, #1
 8007056:	1e5a      	subs	r2, r3, #1
 8007058:	4193      	sbcs	r3, r2
 800705a:	b2db      	uxtb	r3, r3
 800705c:	e01f      	b.n	800709e <HAL_TIM_PWM_Start+0x92>
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	2b0c      	cmp	r3, #12
 8007062:	d108      	bne.n	8007076 <HAL_TIM_PWM_Start+0x6a>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2241      	movs	r2, #65	@ 0x41
 8007068:	5c9b      	ldrb	r3, [r3, r2]
 800706a:	b2db      	uxtb	r3, r3
 800706c:	3b01      	subs	r3, #1
 800706e:	1e5a      	subs	r2, r3, #1
 8007070:	4193      	sbcs	r3, r2
 8007072:	b2db      	uxtb	r3, r3
 8007074:	e013      	b.n	800709e <HAL_TIM_PWM_Start+0x92>
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b10      	cmp	r3, #16
 800707a:	d108      	bne.n	800708e <HAL_TIM_PWM_Start+0x82>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2242      	movs	r2, #66	@ 0x42
 8007080:	5c9b      	ldrb	r3, [r3, r2]
 8007082:	b2db      	uxtb	r3, r3
 8007084:	3b01      	subs	r3, #1
 8007086:	1e5a      	subs	r2, r3, #1
 8007088:	4193      	sbcs	r3, r2
 800708a:	b2db      	uxtb	r3, r3
 800708c:	e007      	b.n	800709e <HAL_TIM_PWM_Start+0x92>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2243      	movs	r2, #67	@ 0x43
 8007092:	5c9b      	ldrb	r3, [r3, r2]
 8007094:	b2db      	uxtb	r3, r3
 8007096:	3b01      	subs	r3, #1
 8007098:	1e5a      	subs	r2, r3, #1
 800709a:	4193      	sbcs	r3, r2
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e090      	b.n	80071c8 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d104      	bne.n	80070b6 <HAL_TIM_PWM_Start+0xaa>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	223e      	movs	r2, #62	@ 0x3e
 80070b0:	2102      	movs	r1, #2
 80070b2:	5499      	strb	r1, [r3, r2]
 80070b4:	e023      	b.n	80070fe <HAL_TIM_PWM_Start+0xf2>
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b04      	cmp	r3, #4
 80070ba:	d104      	bne.n	80070c6 <HAL_TIM_PWM_Start+0xba>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	223f      	movs	r2, #63	@ 0x3f
 80070c0:	2102      	movs	r1, #2
 80070c2:	5499      	strb	r1, [r3, r2]
 80070c4:	e01b      	b.n	80070fe <HAL_TIM_PWM_Start+0xf2>
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	2b08      	cmp	r3, #8
 80070ca:	d104      	bne.n	80070d6 <HAL_TIM_PWM_Start+0xca>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2240      	movs	r2, #64	@ 0x40
 80070d0:	2102      	movs	r1, #2
 80070d2:	5499      	strb	r1, [r3, r2]
 80070d4:	e013      	b.n	80070fe <HAL_TIM_PWM_Start+0xf2>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b0c      	cmp	r3, #12
 80070da:	d104      	bne.n	80070e6 <HAL_TIM_PWM_Start+0xda>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2241      	movs	r2, #65	@ 0x41
 80070e0:	2102      	movs	r1, #2
 80070e2:	5499      	strb	r1, [r3, r2]
 80070e4:	e00b      	b.n	80070fe <HAL_TIM_PWM_Start+0xf2>
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	2b10      	cmp	r3, #16
 80070ea:	d104      	bne.n	80070f6 <HAL_TIM_PWM_Start+0xea>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2242      	movs	r2, #66	@ 0x42
 80070f0:	2102      	movs	r1, #2
 80070f2:	5499      	strb	r1, [r3, r2]
 80070f4:	e003      	b.n	80070fe <HAL_TIM_PWM_Start+0xf2>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2243      	movs	r2, #67	@ 0x43
 80070fa:	2102      	movs	r1, #2
 80070fc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	2201      	movs	r2, #1
 8007106:	0018      	movs	r0, r3
 8007108:	f000 fd58 	bl	8007bbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a2f      	ldr	r2, [pc, #188]	@ (80071d0 <HAL_TIM_PWM_Start+0x1c4>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d00e      	beq.n	8007134 <HAL_TIM_PWM_Start+0x128>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a2e      	ldr	r2, [pc, #184]	@ (80071d4 <HAL_TIM_PWM_Start+0x1c8>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d009      	beq.n	8007134 <HAL_TIM_PWM_Start+0x128>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a2c      	ldr	r2, [pc, #176]	@ (80071d8 <HAL_TIM_PWM_Start+0x1cc>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d004      	beq.n	8007134 <HAL_TIM_PWM_Start+0x128>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a2b      	ldr	r2, [pc, #172]	@ (80071dc <HAL_TIM_PWM_Start+0x1d0>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d101      	bne.n	8007138 <HAL_TIM_PWM_Start+0x12c>
 8007134:	2301      	movs	r3, #1
 8007136:	e000      	b.n	800713a <HAL_TIM_PWM_Start+0x12e>
 8007138:	2300      	movs	r3, #0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d008      	beq.n	8007150 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2180      	movs	r1, #128	@ 0x80
 800714a:	0209      	lsls	r1, r1, #8
 800714c:	430a      	orrs	r2, r1
 800714e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a1e      	ldr	r2, [pc, #120]	@ (80071d0 <HAL_TIM_PWM_Start+0x1c4>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d014      	beq.n	8007184 <HAL_TIM_PWM_Start+0x178>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	2380      	movs	r3, #128	@ 0x80
 8007160:	05db      	lsls	r3, r3, #23
 8007162:	429a      	cmp	r2, r3
 8007164:	d00e      	beq.n	8007184 <HAL_TIM_PWM_Start+0x178>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a1d      	ldr	r2, [pc, #116]	@ (80071e0 <HAL_TIM_PWM_Start+0x1d4>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d009      	beq.n	8007184 <HAL_TIM_PWM_Start+0x178>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a1b      	ldr	r2, [pc, #108]	@ (80071e4 <HAL_TIM_PWM_Start+0x1d8>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d004      	beq.n	8007184 <HAL_TIM_PWM_Start+0x178>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a15      	ldr	r2, [pc, #84]	@ (80071d4 <HAL_TIM_PWM_Start+0x1c8>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d116      	bne.n	80071b2 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	4a17      	ldr	r2, [pc, #92]	@ (80071e8 <HAL_TIM_PWM_Start+0x1dc>)
 800718c:	4013      	ands	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2b06      	cmp	r3, #6
 8007194:	d016      	beq.n	80071c4 <HAL_TIM_PWM_Start+0x1b8>
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	2380      	movs	r3, #128	@ 0x80
 800719a:	025b      	lsls	r3, r3, #9
 800719c:	429a      	cmp	r2, r3
 800719e:	d011      	beq.n	80071c4 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2101      	movs	r1, #1
 80071ac:	430a      	orrs	r2, r1
 80071ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071b0:	e008      	b.n	80071c4 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2101      	movs	r1, #1
 80071be:	430a      	orrs	r2, r1
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	e000      	b.n	80071c6 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071c4:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	0018      	movs	r0, r3
 80071ca:	46bd      	mov	sp, r7
 80071cc:	b004      	add	sp, #16
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	40012c00 	.word	0x40012c00
 80071d4:	40014000 	.word	0x40014000
 80071d8:	40014400 	.word	0x40014400
 80071dc:	40014800 	.word	0x40014800
 80071e0:	40000400 	.word	0x40000400
 80071e4:	40000800 	.word	0x40000800
 80071e8:	00010007 	.word	0x00010007

080071ec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	2200      	movs	r2, #0
 80071fe:	0018      	movs	r0, r3
 8007200:	f000 fcdc 	bl	8007bbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a37      	ldr	r2, [pc, #220]	@ (80072e8 <HAL_TIM_PWM_Stop+0xfc>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d00e      	beq.n	800722c <HAL_TIM_PWM_Stop+0x40>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a36      	ldr	r2, [pc, #216]	@ (80072ec <HAL_TIM_PWM_Stop+0x100>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d009      	beq.n	800722c <HAL_TIM_PWM_Stop+0x40>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a34      	ldr	r2, [pc, #208]	@ (80072f0 <HAL_TIM_PWM_Stop+0x104>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d004      	beq.n	800722c <HAL_TIM_PWM_Stop+0x40>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a33      	ldr	r2, [pc, #204]	@ (80072f4 <HAL_TIM_PWM_Stop+0x108>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d101      	bne.n	8007230 <HAL_TIM_PWM_Stop+0x44>
 800722c:	2301      	movs	r3, #1
 800722e:	e000      	b.n	8007232 <HAL_TIM_PWM_Stop+0x46>
 8007230:	2300      	movs	r3, #0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d013      	beq.n	800725e <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	4a2e      	ldr	r2, [pc, #184]	@ (80072f8 <HAL_TIM_PWM_Stop+0x10c>)
 800723e:	4013      	ands	r3, r2
 8007240:	d10d      	bne.n	800725e <HAL_TIM_PWM_Stop+0x72>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	6a1b      	ldr	r3, [r3, #32]
 8007248:	4a2c      	ldr	r2, [pc, #176]	@ (80072fc <HAL_TIM_PWM_Stop+0x110>)
 800724a:	4013      	ands	r3, r2
 800724c:	d107      	bne.n	800725e <HAL_TIM_PWM_Stop+0x72>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4929      	ldr	r1, [pc, #164]	@ (8007300 <HAL_TIM_PWM_Stop+0x114>)
 800725a:	400a      	ands	r2, r1
 800725c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	4a24      	ldr	r2, [pc, #144]	@ (80072f8 <HAL_TIM_PWM_Stop+0x10c>)
 8007266:	4013      	ands	r3, r2
 8007268:	d10d      	bne.n	8007286 <HAL_TIM_PWM_Stop+0x9a>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	4a22      	ldr	r2, [pc, #136]	@ (80072fc <HAL_TIM_PWM_Stop+0x110>)
 8007272:	4013      	ands	r3, r2
 8007274:	d107      	bne.n	8007286 <HAL_TIM_PWM_Stop+0x9a>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2101      	movs	r1, #1
 8007282:	438a      	bics	r2, r1
 8007284:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d104      	bne.n	8007296 <HAL_TIM_PWM_Stop+0xaa>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	223e      	movs	r2, #62	@ 0x3e
 8007290:	2101      	movs	r1, #1
 8007292:	5499      	strb	r1, [r3, r2]
 8007294:	e023      	b.n	80072de <HAL_TIM_PWM_Stop+0xf2>
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b04      	cmp	r3, #4
 800729a:	d104      	bne.n	80072a6 <HAL_TIM_PWM_Stop+0xba>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	223f      	movs	r2, #63	@ 0x3f
 80072a0:	2101      	movs	r1, #1
 80072a2:	5499      	strb	r1, [r3, r2]
 80072a4:	e01b      	b.n	80072de <HAL_TIM_PWM_Stop+0xf2>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	d104      	bne.n	80072b6 <HAL_TIM_PWM_Stop+0xca>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2240      	movs	r2, #64	@ 0x40
 80072b0:	2101      	movs	r1, #1
 80072b2:	5499      	strb	r1, [r3, r2]
 80072b4:	e013      	b.n	80072de <HAL_TIM_PWM_Stop+0xf2>
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b0c      	cmp	r3, #12
 80072ba:	d104      	bne.n	80072c6 <HAL_TIM_PWM_Stop+0xda>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2241      	movs	r2, #65	@ 0x41
 80072c0:	2101      	movs	r1, #1
 80072c2:	5499      	strb	r1, [r3, r2]
 80072c4:	e00b      	b.n	80072de <HAL_TIM_PWM_Stop+0xf2>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b10      	cmp	r3, #16
 80072ca:	d104      	bne.n	80072d6 <HAL_TIM_PWM_Stop+0xea>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2242      	movs	r2, #66	@ 0x42
 80072d0:	2101      	movs	r1, #1
 80072d2:	5499      	strb	r1, [r3, r2]
 80072d4:	e003      	b.n	80072de <HAL_TIM_PWM_Stop+0xf2>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2243      	movs	r2, #67	@ 0x43
 80072da:	2101      	movs	r1, #1
 80072dc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	0018      	movs	r0, r3
 80072e2:	46bd      	mov	sp, r7
 80072e4:	b002      	add	sp, #8
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	40012c00 	.word	0x40012c00
 80072ec:	40014000 	.word	0x40014000
 80072f0:	40014400 	.word	0x40014400
 80072f4:	40014800 	.word	0x40014800
 80072f8:	00001111 	.word	0x00001111
 80072fc:	00000444 	.word	0x00000444
 8007300:	ffff7fff 	.word	0xffff7fff

08007304 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007310:	2317      	movs	r3, #23
 8007312:	18fb      	adds	r3, r7, r3
 8007314:	2200      	movs	r2, #0
 8007316:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	223c      	movs	r2, #60	@ 0x3c
 800731c:	5c9b      	ldrb	r3, [r3, r2]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d101      	bne.n	8007326 <HAL_TIM_PWM_ConfigChannel+0x22>
 8007322:	2302      	movs	r3, #2
 8007324:	e0e5      	b.n	80074f2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	223c      	movs	r2, #60	@ 0x3c
 800732a:	2101      	movs	r1, #1
 800732c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2b14      	cmp	r3, #20
 8007332:	d900      	bls.n	8007336 <HAL_TIM_PWM_ConfigChannel+0x32>
 8007334:	e0d1      	b.n	80074da <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	009a      	lsls	r2, r3, #2
 800733a:	4b70      	ldr	r3, [pc, #448]	@ (80074fc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800733c:	18d3      	adds	r3, r2, r3
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	0011      	movs	r1, r2
 800734a:	0018      	movs	r0, r3
 800734c:	f000 f972 	bl	8007634 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	699a      	ldr	r2, [r3, #24]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2108      	movs	r1, #8
 800735c:	430a      	orrs	r2, r1
 800735e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	699a      	ldr	r2, [r3, #24]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2104      	movs	r1, #4
 800736c:	438a      	bics	r2, r1
 800736e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6999      	ldr	r1, [r3, #24]
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	691a      	ldr	r2, [r3, #16]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	430a      	orrs	r2, r1
 8007380:	619a      	str	r2, [r3, #24]
      break;
 8007382:	e0af      	b.n	80074e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	0011      	movs	r1, r2
 800738c:	0018      	movs	r0, r3
 800738e:	f000 f9db 	bl	8007748 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	699a      	ldr	r2, [r3, #24]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2180      	movs	r1, #128	@ 0x80
 800739e:	0109      	lsls	r1, r1, #4
 80073a0:	430a      	orrs	r2, r1
 80073a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	699a      	ldr	r2, [r3, #24]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4954      	ldr	r1, [pc, #336]	@ (8007500 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80073b0:	400a      	ands	r2, r1
 80073b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6999      	ldr	r1, [r3, #24]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	021a      	lsls	r2, r3, #8
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	619a      	str	r2, [r3, #24]
      break;
 80073c8:	e08c      	b.n	80074e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	0011      	movs	r1, r2
 80073d2:	0018      	movs	r0, r3
 80073d4:	f000 fa3c 	bl	8007850 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	69da      	ldr	r2, [r3, #28]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2108      	movs	r1, #8
 80073e4:	430a      	orrs	r2, r1
 80073e6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	69da      	ldr	r2, [r3, #28]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2104      	movs	r1, #4
 80073f4:	438a      	bics	r2, r1
 80073f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	69d9      	ldr	r1, [r3, #28]
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	691a      	ldr	r2, [r3, #16]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	430a      	orrs	r2, r1
 8007408:	61da      	str	r2, [r3, #28]
      break;
 800740a:	e06b      	b.n	80074e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	0011      	movs	r1, r2
 8007414:	0018      	movs	r0, r3
 8007416:	f000 faa3 	bl	8007960 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	69da      	ldr	r2, [r3, #28]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2180      	movs	r1, #128	@ 0x80
 8007426:	0109      	lsls	r1, r1, #4
 8007428:	430a      	orrs	r2, r1
 800742a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	69da      	ldr	r2, [r3, #28]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4932      	ldr	r1, [pc, #200]	@ (8007500 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007438:	400a      	ands	r2, r1
 800743a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	69d9      	ldr	r1, [r3, #28]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	021a      	lsls	r2, r3, #8
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	430a      	orrs	r2, r1
 800744e:	61da      	str	r2, [r3, #28]
      break;
 8007450:	e048      	b.n	80074e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	0011      	movs	r1, r2
 800745a:	0018      	movs	r0, r3
 800745c:	f000 faea 	bl	8007a34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2108      	movs	r1, #8
 800746c:	430a      	orrs	r2, r1
 800746e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2104      	movs	r1, #4
 800747c:	438a      	bics	r2, r1
 800747e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	691a      	ldr	r2, [r3, #16]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	430a      	orrs	r2, r1
 8007490:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007492:	e027      	b.n	80074e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	0011      	movs	r1, r2
 800749c:	0018      	movs	r0, r3
 800749e:	f000 fb29 	bl	8007af4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2180      	movs	r1, #128	@ 0x80
 80074ae:	0109      	lsls	r1, r1, #4
 80074b0:	430a      	orrs	r2, r1
 80074b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4910      	ldr	r1, [pc, #64]	@ (8007500 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80074c0:	400a      	ands	r2, r1
 80074c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	021a      	lsls	r2, r3, #8
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	430a      	orrs	r2, r1
 80074d6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80074d8:	e004      	b.n	80074e4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80074da:	2317      	movs	r3, #23
 80074dc:	18fb      	adds	r3, r7, r3
 80074de:	2201      	movs	r2, #1
 80074e0:	701a      	strb	r2, [r3, #0]
      break;
 80074e2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	223c      	movs	r2, #60	@ 0x3c
 80074e8:	2100      	movs	r1, #0
 80074ea:	5499      	strb	r1, [r3, r2]

  return status;
 80074ec:	2317      	movs	r3, #23
 80074ee:	18fb      	adds	r3, r7, r3
 80074f0:	781b      	ldrb	r3, [r3, #0]
}
 80074f2:	0018      	movs	r0, r3
 80074f4:	46bd      	mov	sp, r7
 80074f6:	b006      	add	sp, #24
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	46c0      	nop			@ (mov r8, r8)
 80074fc:	08009fec 	.word	0x08009fec
 8007500:	fffffbff 	.word	0xfffffbff

08007504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a3f      	ldr	r2, [pc, #252]	@ (8007614 <TIM_Base_SetConfig+0x110>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d00c      	beq.n	8007536 <TIM_Base_SetConfig+0x32>
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	2380      	movs	r3, #128	@ 0x80
 8007520:	05db      	lsls	r3, r3, #23
 8007522:	429a      	cmp	r2, r3
 8007524:	d007      	beq.n	8007536 <TIM_Base_SetConfig+0x32>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a3b      	ldr	r2, [pc, #236]	@ (8007618 <TIM_Base_SetConfig+0x114>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d003      	beq.n	8007536 <TIM_Base_SetConfig+0x32>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a3a      	ldr	r2, [pc, #232]	@ (800761c <TIM_Base_SetConfig+0x118>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d108      	bne.n	8007548 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2270      	movs	r2, #112	@ 0x70
 800753a:	4393      	bics	r3, r2
 800753c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	4313      	orrs	r3, r2
 8007546:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a32      	ldr	r2, [pc, #200]	@ (8007614 <TIM_Base_SetConfig+0x110>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d01c      	beq.n	800758a <TIM_Base_SetConfig+0x86>
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	2380      	movs	r3, #128	@ 0x80
 8007554:	05db      	lsls	r3, r3, #23
 8007556:	429a      	cmp	r2, r3
 8007558:	d017      	beq.n	800758a <TIM_Base_SetConfig+0x86>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a2e      	ldr	r2, [pc, #184]	@ (8007618 <TIM_Base_SetConfig+0x114>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d013      	beq.n	800758a <TIM_Base_SetConfig+0x86>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a2d      	ldr	r2, [pc, #180]	@ (800761c <TIM_Base_SetConfig+0x118>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d00f      	beq.n	800758a <TIM_Base_SetConfig+0x86>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a2c      	ldr	r2, [pc, #176]	@ (8007620 <TIM_Base_SetConfig+0x11c>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d00b      	beq.n	800758a <TIM_Base_SetConfig+0x86>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a2b      	ldr	r2, [pc, #172]	@ (8007624 <TIM_Base_SetConfig+0x120>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d007      	beq.n	800758a <TIM_Base_SetConfig+0x86>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a2a      	ldr	r2, [pc, #168]	@ (8007628 <TIM_Base_SetConfig+0x124>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d003      	beq.n	800758a <TIM_Base_SetConfig+0x86>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a29      	ldr	r2, [pc, #164]	@ (800762c <TIM_Base_SetConfig+0x128>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d108      	bne.n	800759c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	4a28      	ldr	r2, [pc, #160]	@ (8007630 <TIM_Base_SetConfig+0x12c>)
 800758e:	4013      	ands	r3, r2
 8007590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	4313      	orrs	r3, r2
 800759a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2280      	movs	r2, #128	@ 0x80
 80075a0:	4393      	bics	r3, r2
 80075a2:	001a      	movs	r2, r3
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	689a      	ldr	r2, [r3, #8]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a13      	ldr	r2, [pc, #76]	@ (8007614 <TIM_Base_SetConfig+0x110>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d00b      	beq.n	80075e2 <TIM_Base_SetConfig+0xde>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a15      	ldr	r2, [pc, #84]	@ (8007624 <TIM_Base_SetConfig+0x120>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d007      	beq.n	80075e2 <TIM_Base_SetConfig+0xde>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a14      	ldr	r2, [pc, #80]	@ (8007628 <TIM_Base_SetConfig+0x124>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d003      	beq.n	80075e2 <TIM_Base_SetConfig+0xde>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a13      	ldr	r2, [pc, #76]	@ (800762c <TIM_Base_SetConfig+0x128>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d103      	bne.n	80075ea <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	691a      	ldr	r2, [r3, #16]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2201      	movs	r2, #1
 80075ee:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	2201      	movs	r2, #1
 80075f6:	4013      	ands	r3, r2
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d106      	bne.n	800760a <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	2201      	movs	r2, #1
 8007602:	4393      	bics	r3, r2
 8007604:	001a      	movs	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	611a      	str	r2, [r3, #16]
  }
}
 800760a:	46c0      	nop			@ (mov r8, r8)
 800760c:	46bd      	mov	sp, r7
 800760e:	b004      	add	sp, #16
 8007610:	bd80      	pop	{r7, pc}
 8007612:	46c0      	nop			@ (mov r8, r8)
 8007614:	40012c00 	.word	0x40012c00
 8007618:	40000400 	.word	0x40000400
 800761c:	40000800 	.word	0x40000800
 8007620:	40002000 	.word	0x40002000
 8007624:	40014000 	.word	0x40014000
 8007628:	40014400 	.word	0x40014400
 800762c:	40014800 	.word	0x40014800
 8007630:	fffffcff 	.word	0xfffffcff

08007634 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b086      	sub	sp, #24
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a1b      	ldr	r3, [r3, #32]
 8007648:	2201      	movs	r2, #1
 800764a:	4393      	bics	r3, r2
 800764c:	001a      	movs	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	4a32      	ldr	r2, [pc, #200]	@ (800772c <TIM_OC1_SetConfig+0xf8>)
 8007662:	4013      	ands	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2203      	movs	r2, #3
 800766a:	4393      	bics	r3, r2
 800766c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	4313      	orrs	r3, r2
 8007676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	2202      	movs	r2, #2
 800767c:	4393      	bics	r3, r2
 800767e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	4313      	orrs	r3, r2
 8007688:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a28      	ldr	r2, [pc, #160]	@ (8007730 <TIM_OC1_SetConfig+0xfc>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d00b      	beq.n	80076aa <TIM_OC1_SetConfig+0x76>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a27      	ldr	r2, [pc, #156]	@ (8007734 <TIM_OC1_SetConfig+0x100>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d007      	beq.n	80076aa <TIM_OC1_SetConfig+0x76>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a26      	ldr	r2, [pc, #152]	@ (8007738 <TIM_OC1_SetConfig+0x104>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d003      	beq.n	80076aa <TIM_OC1_SetConfig+0x76>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a25      	ldr	r2, [pc, #148]	@ (800773c <TIM_OC1_SetConfig+0x108>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d10c      	bne.n	80076c4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2208      	movs	r2, #8
 80076ae:	4393      	bics	r3, r2
 80076b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	2204      	movs	r2, #4
 80076c0:	4393      	bics	r3, r2
 80076c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a1a      	ldr	r2, [pc, #104]	@ (8007730 <TIM_OC1_SetConfig+0xfc>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d00b      	beq.n	80076e4 <TIM_OC1_SetConfig+0xb0>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a19      	ldr	r2, [pc, #100]	@ (8007734 <TIM_OC1_SetConfig+0x100>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d007      	beq.n	80076e4 <TIM_OC1_SetConfig+0xb0>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a18      	ldr	r2, [pc, #96]	@ (8007738 <TIM_OC1_SetConfig+0x104>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d003      	beq.n	80076e4 <TIM_OC1_SetConfig+0xb0>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a17      	ldr	r2, [pc, #92]	@ (800773c <TIM_OC1_SetConfig+0x108>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d111      	bne.n	8007708 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	4a16      	ldr	r2, [pc, #88]	@ (8007740 <TIM_OC1_SetConfig+0x10c>)
 80076e8:	4013      	ands	r3, r2
 80076ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	4a15      	ldr	r2, [pc, #84]	@ (8007744 <TIM_OC1_SetConfig+0x110>)
 80076f0:	4013      	ands	r3, r2
 80076f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	695b      	ldr	r3, [r3, #20]
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	4313      	orrs	r3, r2
 8007706:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	621a      	str	r2, [r3, #32]
}
 8007722:	46c0      	nop			@ (mov r8, r8)
 8007724:	46bd      	mov	sp, r7
 8007726:	b006      	add	sp, #24
 8007728:	bd80      	pop	{r7, pc}
 800772a:	46c0      	nop			@ (mov r8, r8)
 800772c:	fffeff8f 	.word	0xfffeff8f
 8007730:	40012c00 	.word	0x40012c00
 8007734:	40014000 	.word	0x40014000
 8007738:	40014400 	.word	0x40014400
 800773c:	40014800 	.word	0x40014800
 8007740:	fffffeff 	.word	0xfffffeff
 8007744:	fffffdff 	.word	0xfffffdff

08007748 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a1b      	ldr	r3, [r3, #32]
 800775c:	2210      	movs	r2, #16
 800775e:	4393      	bics	r3, r2
 8007760:	001a      	movs	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	4a2e      	ldr	r2, [pc, #184]	@ (8007830 <TIM_OC2_SetConfig+0xe8>)
 8007776:	4013      	ands	r3, r2
 8007778:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	4a2d      	ldr	r2, [pc, #180]	@ (8007834 <TIM_OC2_SetConfig+0xec>)
 800777e:	4013      	ands	r3, r2
 8007780:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	021b      	lsls	r3, r3, #8
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	4313      	orrs	r3, r2
 800778c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2220      	movs	r2, #32
 8007792:	4393      	bics	r3, r2
 8007794:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	011b      	lsls	r3, r3, #4
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	4313      	orrs	r3, r2
 80077a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a24      	ldr	r2, [pc, #144]	@ (8007838 <TIM_OC2_SetConfig+0xf0>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d10d      	bne.n	80077c6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	2280      	movs	r2, #128	@ 0x80
 80077ae:	4393      	bics	r3, r2
 80077b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	011b      	lsls	r3, r3, #4
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	2240      	movs	r2, #64	@ 0x40
 80077c2:	4393      	bics	r3, r2
 80077c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a1b      	ldr	r2, [pc, #108]	@ (8007838 <TIM_OC2_SetConfig+0xf0>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d00b      	beq.n	80077e6 <TIM_OC2_SetConfig+0x9e>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a1a      	ldr	r2, [pc, #104]	@ (800783c <TIM_OC2_SetConfig+0xf4>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d007      	beq.n	80077e6 <TIM_OC2_SetConfig+0x9e>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a19      	ldr	r2, [pc, #100]	@ (8007840 <TIM_OC2_SetConfig+0xf8>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d003      	beq.n	80077e6 <TIM_OC2_SetConfig+0x9e>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a18      	ldr	r2, [pc, #96]	@ (8007844 <TIM_OC2_SetConfig+0xfc>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d113      	bne.n	800780e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	4a17      	ldr	r2, [pc, #92]	@ (8007848 <TIM_OC2_SetConfig+0x100>)
 80077ea:	4013      	ands	r3, r2
 80077ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	4a16      	ldr	r2, [pc, #88]	@ (800784c <TIM_OC2_SetConfig+0x104>)
 80077f2:	4013      	ands	r3, r2
 80077f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	4313      	orrs	r3, r2
 8007800:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	4313      	orrs	r3, r2
 800780c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	685a      	ldr	r2, [r3, #4]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	621a      	str	r2, [r3, #32]
}
 8007828:	46c0      	nop			@ (mov r8, r8)
 800782a:	46bd      	mov	sp, r7
 800782c:	b006      	add	sp, #24
 800782e:	bd80      	pop	{r7, pc}
 8007830:	feff8fff 	.word	0xfeff8fff
 8007834:	fffffcff 	.word	0xfffffcff
 8007838:	40012c00 	.word	0x40012c00
 800783c:	40014000 	.word	0x40014000
 8007840:	40014400 	.word	0x40014400
 8007844:	40014800 	.word	0x40014800
 8007848:	fffffbff 	.word	0xfffffbff
 800784c:	fffff7ff 	.word	0xfffff7ff

08007850 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a1b      	ldr	r3, [r3, #32]
 8007864:	4a33      	ldr	r2, [pc, #204]	@ (8007934 <TIM_OC3_SetConfig+0xe4>)
 8007866:	401a      	ands	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4a2f      	ldr	r2, [pc, #188]	@ (8007938 <TIM_OC3_SetConfig+0xe8>)
 800787c:	4013      	ands	r3, r2
 800787e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2203      	movs	r2, #3
 8007884:	4393      	bics	r3, r2
 8007886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	4313      	orrs	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	4a29      	ldr	r2, [pc, #164]	@ (800793c <TIM_OC3_SetConfig+0xec>)
 8007896:	4013      	ands	r3, r2
 8007898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	021b      	lsls	r3, r3, #8
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a25      	ldr	r2, [pc, #148]	@ (8007940 <TIM_OC3_SetConfig+0xf0>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d10d      	bne.n	80078ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	4a24      	ldr	r2, [pc, #144]	@ (8007944 <TIM_OC3_SetConfig+0xf4>)
 80078b2:	4013      	ands	r3, r2
 80078b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	021b      	lsls	r3, r3, #8
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	4313      	orrs	r3, r2
 80078c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	4a20      	ldr	r2, [pc, #128]	@ (8007948 <TIM_OC3_SetConfig+0xf8>)
 80078c6:	4013      	ands	r3, r2
 80078c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a1c      	ldr	r2, [pc, #112]	@ (8007940 <TIM_OC3_SetConfig+0xf0>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d00b      	beq.n	80078ea <TIM_OC3_SetConfig+0x9a>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a1d      	ldr	r2, [pc, #116]	@ (800794c <TIM_OC3_SetConfig+0xfc>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d007      	beq.n	80078ea <TIM_OC3_SetConfig+0x9a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a1c      	ldr	r2, [pc, #112]	@ (8007950 <TIM_OC3_SetConfig+0x100>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d003      	beq.n	80078ea <TIM_OC3_SetConfig+0x9a>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a1b      	ldr	r2, [pc, #108]	@ (8007954 <TIM_OC3_SetConfig+0x104>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d113      	bne.n	8007912 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	4a1a      	ldr	r2, [pc, #104]	@ (8007958 <TIM_OC3_SetConfig+0x108>)
 80078ee:	4013      	ands	r3, r2
 80078f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	4a19      	ldr	r2, [pc, #100]	@ (800795c <TIM_OC3_SetConfig+0x10c>)
 80078f6:	4013      	ands	r3, r2
 80078f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	011b      	lsls	r3, r3, #4
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	4313      	orrs	r3, r2
 8007904:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	011b      	lsls	r3, r3, #4
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	4313      	orrs	r3, r2
 8007910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	685a      	ldr	r2, [r3, #4]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	697a      	ldr	r2, [r7, #20]
 800792a:	621a      	str	r2, [r3, #32]
}
 800792c:	46c0      	nop			@ (mov r8, r8)
 800792e:	46bd      	mov	sp, r7
 8007930:	b006      	add	sp, #24
 8007932:	bd80      	pop	{r7, pc}
 8007934:	fffffeff 	.word	0xfffffeff
 8007938:	fffeff8f 	.word	0xfffeff8f
 800793c:	fffffdff 	.word	0xfffffdff
 8007940:	40012c00 	.word	0x40012c00
 8007944:	fffff7ff 	.word	0xfffff7ff
 8007948:	fffffbff 	.word	0xfffffbff
 800794c:	40014000 	.word	0x40014000
 8007950:	40014400 	.word	0x40014400
 8007954:	40014800 	.word	0x40014800
 8007958:	ffffefff 	.word	0xffffefff
 800795c:	ffffdfff 	.word	0xffffdfff

08007960 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a1b      	ldr	r3, [r3, #32]
 8007974:	4a26      	ldr	r2, [pc, #152]	@ (8007a10 <TIM_OC4_SetConfig+0xb0>)
 8007976:	401a      	ands	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4a22      	ldr	r2, [pc, #136]	@ (8007a14 <TIM_OC4_SetConfig+0xb4>)
 800798c:	4013      	ands	r3, r2
 800798e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	4a21      	ldr	r2, [pc, #132]	@ (8007a18 <TIM_OC4_SetConfig+0xb8>)
 8007994:	4013      	ands	r3, r2
 8007996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	021b      	lsls	r3, r3, #8
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	4a1d      	ldr	r2, [pc, #116]	@ (8007a1c <TIM_OC4_SetConfig+0xbc>)
 80079a8:	4013      	ands	r3, r2
 80079aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	031b      	lsls	r3, r3, #12
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a19      	ldr	r2, [pc, #100]	@ (8007a20 <TIM_OC4_SetConfig+0xc0>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d00b      	beq.n	80079d8 <TIM_OC4_SetConfig+0x78>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	4a18      	ldr	r2, [pc, #96]	@ (8007a24 <TIM_OC4_SetConfig+0xc4>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d007      	beq.n	80079d8 <TIM_OC4_SetConfig+0x78>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a17      	ldr	r2, [pc, #92]	@ (8007a28 <TIM_OC4_SetConfig+0xc8>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d003      	beq.n	80079d8 <TIM_OC4_SetConfig+0x78>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a16      	ldr	r2, [pc, #88]	@ (8007a2c <TIM_OC4_SetConfig+0xcc>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d109      	bne.n	80079ec <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	4a15      	ldr	r2, [pc, #84]	@ (8007a30 <TIM_OC4_SetConfig+0xd0>)
 80079dc:	4013      	ands	r3, r2
 80079de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	019b      	lsls	r3, r3, #6
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	621a      	str	r2, [r3, #32]
}
 8007a06:	46c0      	nop			@ (mov r8, r8)
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	b006      	add	sp, #24
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	46c0      	nop			@ (mov r8, r8)
 8007a10:	ffffefff 	.word	0xffffefff
 8007a14:	feff8fff 	.word	0xfeff8fff
 8007a18:	fffffcff 	.word	0xfffffcff
 8007a1c:	ffffdfff 	.word	0xffffdfff
 8007a20:	40012c00 	.word	0x40012c00
 8007a24:	40014000 	.word	0x40014000
 8007a28:	40014400 	.word	0x40014400
 8007a2c:	40014800 	.word	0x40014800
 8007a30:	ffffbfff 	.word	0xffffbfff

08007a34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a1b      	ldr	r3, [r3, #32]
 8007a48:	4a23      	ldr	r2, [pc, #140]	@ (8007ad8 <TIM_OC5_SetConfig+0xa4>)
 8007a4a:	401a      	ands	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	4a1f      	ldr	r2, [pc, #124]	@ (8007adc <TIM_OC5_SetConfig+0xa8>)
 8007a60:	4013      	ands	r3, r2
 8007a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	4a1b      	ldr	r2, [pc, #108]	@ (8007ae0 <TIM_OC5_SetConfig+0xac>)
 8007a72:	4013      	ands	r3, r2
 8007a74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	041b      	lsls	r3, r3, #16
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a17      	ldr	r2, [pc, #92]	@ (8007ae4 <TIM_OC5_SetConfig+0xb0>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d00b      	beq.n	8007aa2 <TIM_OC5_SetConfig+0x6e>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a16      	ldr	r2, [pc, #88]	@ (8007ae8 <TIM_OC5_SetConfig+0xb4>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d007      	beq.n	8007aa2 <TIM_OC5_SetConfig+0x6e>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a15      	ldr	r2, [pc, #84]	@ (8007aec <TIM_OC5_SetConfig+0xb8>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d003      	beq.n	8007aa2 <TIM_OC5_SetConfig+0x6e>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a14      	ldr	r2, [pc, #80]	@ (8007af0 <TIM_OC5_SetConfig+0xbc>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d109      	bne.n	8007ab6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8007ad8 <TIM_OC5_SetConfig+0xa4>)
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	021b      	lsls	r3, r3, #8
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	685a      	ldr	r2, [r3, #4]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	621a      	str	r2, [r3, #32]
}
 8007ad0:	46c0      	nop			@ (mov r8, r8)
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	b006      	add	sp, #24
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	fffeffff 	.word	0xfffeffff
 8007adc:	fffeff8f 	.word	0xfffeff8f
 8007ae0:	fffdffff 	.word	0xfffdffff
 8007ae4:	40012c00 	.word	0x40012c00
 8007ae8:	40014000 	.word	0x40014000
 8007aec:	40014400 	.word	0x40014400
 8007af0:	40014800 	.word	0x40014800

08007af4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a1b      	ldr	r3, [r3, #32]
 8007b08:	4a24      	ldr	r2, [pc, #144]	@ (8007b9c <TIM_OC6_SetConfig+0xa8>)
 8007b0a:	401a      	ands	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	4a20      	ldr	r2, [pc, #128]	@ (8007ba0 <TIM_OC6_SetConfig+0xac>)
 8007b20:	4013      	ands	r3, r2
 8007b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	021b      	lsls	r3, r3, #8
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	4a1c      	ldr	r2, [pc, #112]	@ (8007ba4 <TIM_OC6_SetConfig+0xb0>)
 8007b34:	4013      	ands	r3, r2
 8007b36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	051b      	lsls	r3, r3, #20
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a18      	ldr	r2, [pc, #96]	@ (8007ba8 <TIM_OC6_SetConfig+0xb4>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d00b      	beq.n	8007b64 <TIM_OC6_SetConfig+0x70>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a17      	ldr	r2, [pc, #92]	@ (8007bac <TIM_OC6_SetConfig+0xb8>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d007      	beq.n	8007b64 <TIM_OC6_SetConfig+0x70>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a16      	ldr	r2, [pc, #88]	@ (8007bb0 <TIM_OC6_SetConfig+0xbc>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d003      	beq.n	8007b64 <TIM_OC6_SetConfig+0x70>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a15      	ldr	r2, [pc, #84]	@ (8007bb4 <TIM_OC6_SetConfig+0xc0>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d109      	bne.n	8007b78 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	4a14      	ldr	r2, [pc, #80]	@ (8007bb8 <TIM_OC6_SetConfig+0xc4>)
 8007b68:	4013      	ands	r3, r2
 8007b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	695b      	ldr	r3, [r3, #20]
 8007b70:	029b      	lsls	r3, r3, #10
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	68fa      	ldr	r2, [r7, #12]
 8007b82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	621a      	str	r2, [r3, #32]
}
 8007b92:	46c0      	nop			@ (mov r8, r8)
 8007b94:	46bd      	mov	sp, r7
 8007b96:	b006      	add	sp, #24
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	46c0      	nop			@ (mov r8, r8)
 8007b9c:	ffefffff 	.word	0xffefffff
 8007ba0:	feff8fff 	.word	0xfeff8fff
 8007ba4:	ffdfffff 	.word	0xffdfffff
 8007ba8:	40012c00 	.word	0x40012c00
 8007bac:	40014000 	.word	0x40014000
 8007bb0:	40014400 	.word	0x40014400
 8007bb4:	40014800 	.word	0x40014800
 8007bb8:	fffbffff 	.word	0xfffbffff

08007bbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	221f      	movs	r2, #31
 8007bcc:	4013      	ands	r3, r2
 8007bce:	2201      	movs	r2, #1
 8007bd0:	409a      	lsls	r2, r3
 8007bd2:	0013      	movs	r3, r2
 8007bd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	43d2      	mvns	r2, r2
 8007bde:	401a      	ands	r2, r3
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6a1a      	ldr	r2, [r3, #32]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	211f      	movs	r1, #31
 8007bec:	400b      	ands	r3, r1
 8007bee:	6879      	ldr	r1, [r7, #4]
 8007bf0:	4099      	lsls	r1, r3
 8007bf2:	000b      	movs	r3, r1
 8007bf4:	431a      	orrs	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	621a      	str	r2, [r3, #32]
}
 8007bfa:	46c0      	nop			@ (mov r8, r8)
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	b006      	add	sp, #24
 8007c00:	bd80      	pop	{r7, pc}
	...

08007c04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	223c      	movs	r2, #60	@ 0x3c
 8007c16:	5c9b      	ldrb	r3, [r3, r2]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d101      	bne.n	8007c20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	e06f      	b.n	8007d00 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	223c      	movs	r2, #60	@ 0x3c
 8007c24:	2101      	movs	r1, #1
 8007c26:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	22ff      	movs	r2, #255	@ 0xff
 8007c2c:	4393      	bics	r3, r2
 8007c2e:	001a      	movs	r2, r3
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	4a33      	ldr	r2, [pc, #204]	@ (8007d08 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8007c3c:	401a      	ands	r2, r3
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	4a30      	ldr	r2, [pc, #192]	@ (8007d0c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8007c4a:	401a      	ands	r2, r3
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	4a2e      	ldr	r2, [pc, #184]	@ (8007d10 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8007c58:	401a      	ands	r2, r3
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	4a2b      	ldr	r2, [pc, #172]	@ (8007d14 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007c66:	401a      	ands	r2, r3
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4a29      	ldr	r2, [pc, #164]	@ (8007d18 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007c74:	401a      	ands	r2, r3
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	4a26      	ldr	r2, [pc, #152]	@ (8007d1c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8007c82:	401a      	ands	r2, r3
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	4a24      	ldr	r2, [pc, #144]	@ (8007d20 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007c90:	401a      	ands	r2, r3
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	041b      	lsls	r3, r3, #16
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4a21      	ldr	r2, [pc, #132]	@ (8007d24 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007ca0:	401a      	ands	r2, r3
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	69db      	ldr	r3, [r3, #28]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a1e      	ldr	r2, [pc, #120]	@ (8007d28 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d11c      	bne.n	8007cee <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	4a1d      	ldr	r2, [pc, #116]	@ (8007d2c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8007cb8:	401a      	ands	r2, r3
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cbe:	051b      	lsls	r3, r3, #20
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4a1a      	ldr	r2, [pc, #104]	@ (8007d30 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8007cc8:	401a      	ands	r2, r3
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	4a17      	ldr	r2, [pc, #92]	@ (8007d34 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8007cd6:	401a      	ands	r2, r3
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	4a15      	ldr	r2, [pc, #84]	@ (8007d38 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8007ce4:	401a      	ands	r2, r3
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cea:	4313      	orrs	r3, r2
 8007cec:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	223c      	movs	r2, #60	@ 0x3c
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	0018      	movs	r0, r3
 8007d02:	46bd      	mov	sp, r7
 8007d04:	b004      	add	sp, #16
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	fffffcff 	.word	0xfffffcff
 8007d0c:	fffffbff 	.word	0xfffffbff
 8007d10:	fffff7ff 	.word	0xfffff7ff
 8007d14:	ffffefff 	.word	0xffffefff
 8007d18:	ffffdfff 	.word	0xffffdfff
 8007d1c:	ffffbfff 	.word	0xffffbfff
 8007d20:	fff0ffff 	.word	0xfff0ffff
 8007d24:	efffffff 	.word	0xefffffff
 8007d28:	40012c00 	.word	0x40012c00
 8007d2c:	ff0fffff 	.word	0xff0fffff
 8007d30:	feffffff 	.word	0xfeffffff
 8007d34:	fdffffff 	.word	0xfdffffff
 8007d38:	dfffffff 	.word	0xdfffffff

08007d3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d101      	bne.n	8007d4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e046      	b.n	8007ddc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2288      	movs	r2, #136	@ 0x88
 8007d52:	589b      	ldr	r3, [r3, r2]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d107      	bne.n	8007d68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2284      	movs	r2, #132	@ 0x84
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	0018      	movs	r0, r3
 8007d64:	f7fc f82a 	bl	8003dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2288      	movs	r2, #136	@ 0x88
 8007d6c:	2124      	movs	r1, #36	@ 0x24
 8007d6e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2101      	movs	r1, #1
 8007d7c:	438a      	bics	r2, r1
 8007d7e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d003      	beq.n	8007d90 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	0018      	movs	r0, r3
 8007d8c:	f000 fc26 	bl	80085dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	0018      	movs	r0, r3
 8007d94:	f000 f8cc 	bl	8007f30 <UART_SetConfig>
 8007d98:	0003      	movs	r3, r0
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d101      	bne.n	8007da2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e01c      	b.n	8007ddc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	685a      	ldr	r2, [r3, #4]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	490d      	ldr	r1, [pc, #52]	@ (8007de4 <HAL_UART_Init+0xa8>)
 8007dae:	400a      	ands	r2, r1
 8007db0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	689a      	ldr	r2, [r3, #8]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	212a      	movs	r1, #42	@ 0x2a
 8007dbe:	438a      	bics	r2, r1
 8007dc0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2101      	movs	r1, #1
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	0018      	movs	r0, r3
 8007dd6:	f000 fcb5 	bl	8008744 <UART_CheckIdleState>
 8007dda:	0003      	movs	r3, r0
}
 8007ddc:	0018      	movs	r0, r3
 8007dde:	46bd      	mov	sp, r7
 8007de0:	b002      	add	sp, #8
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	ffffb7ff 	.word	0xffffb7ff

08007de8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b08a      	sub	sp, #40	@ 0x28
 8007dec:	af02      	add	r7, sp, #8
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	603b      	str	r3, [r7, #0]
 8007df4:	1dbb      	adds	r3, r7, #6
 8007df6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2288      	movs	r2, #136	@ 0x88
 8007dfc:	589b      	ldr	r3, [r3, r2]
 8007dfe:	2b20      	cmp	r3, #32
 8007e00:	d000      	beq.n	8007e04 <HAL_UART_Transmit+0x1c>
 8007e02:	e090      	b.n	8007f26 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d003      	beq.n	8007e12 <HAL_UART_Transmit+0x2a>
 8007e0a:	1dbb      	adds	r3, r7, #6
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d101      	bne.n	8007e16 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e088      	b.n	8007f28 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	689a      	ldr	r2, [r3, #8]
 8007e1a:	2380      	movs	r3, #128	@ 0x80
 8007e1c:	015b      	lsls	r3, r3, #5
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d109      	bne.n	8007e36 <HAL_UART_Transmit+0x4e>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d105      	bne.n	8007e36 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	4013      	ands	r3, r2
 8007e30:	d001      	beq.n	8007e36 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e078      	b.n	8007f28 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2290      	movs	r2, #144	@ 0x90
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2288      	movs	r2, #136	@ 0x88
 8007e42:	2121      	movs	r1, #33	@ 0x21
 8007e44:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e46:	f7fc f96f 	bl	8004128 <HAL_GetTick>
 8007e4a:	0003      	movs	r3, r0
 8007e4c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	1dba      	adds	r2, r7, #6
 8007e52:	2154      	movs	r1, #84	@ 0x54
 8007e54:	8812      	ldrh	r2, [r2, #0]
 8007e56:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	1dba      	adds	r2, r7, #6
 8007e5c:	2156      	movs	r1, #86	@ 0x56
 8007e5e:	8812      	ldrh	r2, [r2, #0]
 8007e60:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	689a      	ldr	r2, [r3, #8]
 8007e66:	2380      	movs	r3, #128	@ 0x80
 8007e68:	015b      	lsls	r3, r3, #5
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d108      	bne.n	8007e80 <HAL_UART_Transmit+0x98>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d104      	bne.n	8007e80 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8007e76:	2300      	movs	r3, #0
 8007e78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	61bb      	str	r3, [r7, #24]
 8007e7e:	e003      	b.n	8007e88 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e84:	2300      	movs	r3, #0
 8007e86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e88:	e030      	b.n	8007eec <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	0013      	movs	r3, r2
 8007e94:	2200      	movs	r2, #0
 8007e96:	2180      	movs	r1, #128	@ 0x80
 8007e98:	f000 fcfe 	bl	8008898 <UART_WaitOnFlagUntilTimeout>
 8007e9c:	1e03      	subs	r3, r0, #0
 8007e9e:	d005      	beq.n	8007eac <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2288      	movs	r2, #136	@ 0x88
 8007ea4:	2120      	movs	r1, #32
 8007ea6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e03d      	b.n	8007f28 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10b      	bne.n	8007eca <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	881b      	ldrh	r3, [r3, #0]
 8007eb6:	001a      	movs	r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	05d2      	lsls	r2, r2, #23
 8007ebe:	0dd2      	lsrs	r2, r2, #23
 8007ec0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	3302      	adds	r3, #2
 8007ec6:	61bb      	str	r3, [r7, #24]
 8007ec8:	e007      	b.n	8007eda <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	781a      	ldrb	r2, [r3, #0]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2256      	movs	r2, #86	@ 0x56
 8007ede:	5a9b      	ldrh	r3, [r3, r2]
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	b299      	uxth	r1, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2256      	movs	r2, #86	@ 0x56
 8007eea:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2256      	movs	r2, #86	@ 0x56
 8007ef0:	5a9b      	ldrh	r3, [r3, r2]
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1c8      	bne.n	8007e8a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	0013      	movs	r3, r2
 8007f02:	2200      	movs	r2, #0
 8007f04:	2140      	movs	r1, #64	@ 0x40
 8007f06:	f000 fcc7 	bl	8008898 <UART_WaitOnFlagUntilTimeout>
 8007f0a:	1e03      	subs	r3, r0, #0
 8007f0c:	d005      	beq.n	8007f1a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2288      	movs	r2, #136	@ 0x88
 8007f12:	2120      	movs	r1, #32
 8007f14:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e006      	b.n	8007f28 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2288      	movs	r2, #136	@ 0x88
 8007f1e:	2120      	movs	r1, #32
 8007f20:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	e000      	b.n	8007f28 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8007f26:	2302      	movs	r3, #2
  }
}
 8007f28:	0018      	movs	r0, r3
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	b008      	add	sp, #32
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f30:	b5b0      	push	{r4, r5, r7, lr}
 8007f32:	b090      	sub	sp, #64	@ 0x40
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f38:	231a      	movs	r3, #26
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	189b      	adds	r3, r3, r2
 8007f3e:	19db      	adds	r3, r3, r7
 8007f40:	2200      	movs	r2, #0
 8007f42:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f46:	689a      	ldr	r2, [r3, #8]
 8007f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	431a      	orrs	r2, r3
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f50:	695b      	ldr	r3, [r3, #20]
 8007f52:	431a      	orrs	r2, r3
 8007f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4ac1      	ldr	r2, [pc, #772]	@ (8008268 <UART_SetConfig+0x338>)
 8007f64:	4013      	ands	r3, r2
 8007f66:	0019      	movs	r1, r3
 8007f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f6e:	430b      	orrs	r3, r1
 8007f70:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	4abc      	ldr	r2, [pc, #752]	@ (800826c <UART_SetConfig+0x33c>)
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	0018      	movs	r0, r3
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f80:	68d9      	ldr	r1, [r3, #12]
 8007f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	0003      	movs	r3, r0
 8007f88:	430b      	orrs	r3, r1
 8007f8a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4ab6      	ldr	r2, [pc, #728]	@ (8008270 <UART_SetConfig+0x340>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d009      	beq.n	8007fb0 <UART_SetConfig+0x80>
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4ab4      	ldr	r2, [pc, #720]	@ (8008274 <UART_SetConfig+0x344>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d004      	beq.n	8007fb0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007fac:	4313      	orrs	r3, r2
 8007fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	4ab0      	ldr	r2, [pc, #704]	@ (8008278 <UART_SetConfig+0x348>)
 8007fb8:	4013      	ands	r3, r2
 8007fba:	0019      	movs	r1, r3
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fc2:	430b      	orrs	r3, r1
 8007fc4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fcc:	220f      	movs	r2, #15
 8007fce:	4393      	bics	r3, r2
 8007fd0:	0018      	movs	r0, r3
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	0003      	movs	r3, r0
 8007fdc:	430b      	orrs	r3, r1
 8007fde:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4aa5      	ldr	r2, [pc, #660]	@ (800827c <UART_SetConfig+0x34c>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d131      	bne.n	800804e <UART_SetConfig+0x11e>
 8007fea:	4ba5      	ldr	r3, [pc, #660]	@ (8008280 <UART_SetConfig+0x350>)
 8007fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fee:	2203      	movs	r2, #3
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	d01d      	beq.n	8008032 <UART_SetConfig+0x102>
 8007ff6:	d823      	bhi.n	8008040 <UART_SetConfig+0x110>
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d00c      	beq.n	8008016 <UART_SetConfig+0xe6>
 8007ffc:	d820      	bhi.n	8008040 <UART_SetConfig+0x110>
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d002      	beq.n	8008008 <UART_SetConfig+0xd8>
 8008002:	2b01      	cmp	r3, #1
 8008004:	d00e      	beq.n	8008024 <UART_SetConfig+0xf4>
 8008006:	e01b      	b.n	8008040 <UART_SetConfig+0x110>
 8008008:	231b      	movs	r3, #27
 800800a:	2220      	movs	r2, #32
 800800c:	189b      	adds	r3, r3, r2
 800800e:	19db      	adds	r3, r3, r7
 8008010:	2200      	movs	r2, #0
 8008012:	701a      	strb	r2, [r3, #0]
 8008014:	e154      	b.n	80082c0 <UART_SetConfig+0x390>
 8008016:	231b      	movs	r3, #27
 8008018:	2220      	movs	r2, #32
 800801a:	189b      	adds	r3, r3, r2
 800801c:	19db      	adds	r3, r3, r7
 800801e:	2202      	movs	r2, #2
 8008020:	701a      	strb	r2, [r3, #0]
 8008022:	e14d      	b.n	80082c0 <UART_SetConfig+0x390>
 8008024:	231b      	movs	r3, #27
 8008026:	2220      	movs	r2, #32
 8008028:	189b      	adds	r3, r3, r2
 800802a:	19db      	adds	r3, r3, r7
 800802c:	2204      	movs	r2, #4
 800802e:	701a      	strb	r2, [r3, #0]
 8008030:	e146      	b.n	80082c0 <UART_SetConfig+0x390>
 8008032:	231b      	movs	r3, #27
 8008034:	2220      	movs	r2, #32
 8008036:	189b      	adds	r3, r3, r2
 8008038:	19db      	adds	r3, r3, r7
 800803a:	2208      	movs	r2, #8
 800803c:	701a      	strb	r2, [r3, #0]
 800803e:	e13f      	b.n	80082c0 <UART_SetConfig+0x390>
 8008040:	231b      	movs	r3, #27
 8008042:	2220      	movs	r2, #32
 8008044:	189b      	adds	r3, r3, r2
 8008046:	19db      	adds	r3, r3, r7
 8008048:	2210      	movs	r2, #16
 800804a:	701a      	strb	r2, [r3, #0]
 800804c:	e138      	b.n	80082c0 <UART_SetConfig+0x390>
 800804e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a8c      	ldr	r2, [pc, #560]	@ (8008284 <UART_SetConfig+0x354>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d131      	bne.n	80080bc <UART_SetConfig+0x18c>
 8008058:	4b89      	ldr	r3, [pc, #548]	@ (8008280 <UART_SetConfig+0x350>)
 800805a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800805c:	220c      	movs	r2, #12
 800805e:	4013      	ands	r3, r2
 8008060:	2b0c      	cmp	r3, #12
 8008062:	d01d      	beq.n	80080a0 <UART_SetConfig+0x170>
 8008064:	d823      	bhi.n	80080ae <UART_SetConfig+0x17e>
 8008066:	2b08      	cmp	r3, #8
 8008068:	d00c      	beq.n	8008084 <UART_SetConfig+0x154>
 800806a:	d820      	bhi.n	80080ae <UART_SetConfig+0x17e>
 800806c:	2b00      	cmp	r3, #0
 800806e:	d002      	beq.n	8008076 <UART_SetConfig+0x146>
 8008070:	2b04      	cmp	r3, #4
 8008072:	d00e      	beq.n	8008092 <UART_SetConfig+0x162>
 8008074:	e01b      	b.n	80080ae <UART_SetConfig+0x17e>
 8008076:	231b      	movs	r3, #27
 8008078:	2220      	movs	r2, #32
 800807a:	189b      	adds	r3, r3, r2
 800807c:	19db      	adds	r3, r3, r7
 800807e:	2200      	movs	r2, #0
 8008080:	701a      	strb	r2, [r3, #0]
 8008082:	e11d      	b.n	80082c0 <UART_SetConfig+0x390>
 8008084:	231b      	movs	r3, #27
 8008086:	2220      	movs	r2, #32
 8008088:	189b      	adds	r3, r3, r2
 800808a:	19db      	adds	r3, r3, r7
 800808c:	2202      	movs	r2, #2
 800808e:	701a      	strb	r2, [r3, #0]
 8008090:	e116      	b.n	80082c0 <UART_SetConfig+0x390>
 8008092:	231b      	movs	r3, #27
 8008094:	2220      	movs	r2, #32
 8008096:	189b      	adds	r3, r3, r2
 8008098:	19db      	adds	r3, r3, r7
 800809a:	2204      	movs	r2, #4
 800809c:	701a      	strb	r2, [r3, #0]
 800809e:	e10f      	b.n	80082c0 <UART_SetConfig+0x390>
 80080a0:	231b      	movs	r3, #27
 80080a2:	2220      	movs	r2, #32
 80080a4:	189b      	adds	r3, r3, r2
 80080a6:	19db      	adds	r3, r3, r7
 80080a8:	2208      	movs	r2, #8
 80080aa:	701a      	strb	r2, [r3, #0]
 80080ac:	e108      	b.n	80082c0 <UART_SetConfig+0x390>
 80080ae:	231b      	movs	r3, #27
 80080b0:	2220      	movs	r2, #32
 80080b2:	189b      	adds	r3, r3, r2
 80080b4:	19db      	adds	r3, r3, r7
 80080b6:	2210      	movs	r2, #16
 80080b8:	701a      	strb	r2, [r3, #0]
 80080ba:	e101      	b.n	80082c0 <UART_SetConfig+0x390>
 80080bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a71      	ldr	r2, [pc, #452]	@ (8008288 <UART_SetConfig+0x358>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d131      	bne.n	800812a <UART_SetConfig+0x1fa>
 80080c6:	4b6e      	ldr	r3, [pc, #440]	@ (8008280 <UART_SetConfig+0x350>)
 80080c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ca:	2230      	movs	r2, #48	@ 0x30
 80080cc:	4013      	ands	r3, r2
 80080ce:	2b30      	cmp	r3, #48	@ 0x30
 80080d0:	d01d      	beq.n	800810e <UART_SetConfig+0x1de>
 80080d2:	d823      	bhi.n	800811c <UART_SetConfig+0x1ec>
 80080d4:	2b20      	cmp	r3, #32
 80080d6:	d00c      	beq.n	80080f2 <UART_SetConfig+0x1c2>
 80080d8:	d820      	bhi.n	800811c <UART_SetConfig+0x1ec>
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d002      	beq.n	80080e4 <UART_SetConfig+0x1b4>
 80080de:	2b10      	cmp	r3, #16
 80080e0:	d00e      	beq.n	8008100 <UART_SetConfig+0x1d0>
 80080e2:	e01b      	b.n	800811c <UART_SetConfig+0x1ec>
 80080e4:	231b      	movs	r3, #27
 80080e6:	2220      	movs	r2, #32
 80080e8:	189b      	adds	r3, r3, r2
 80080ea:	19db      	adds	r3, r3, r7
 80080ec:	2200      	movs	r2, #0
 80080ee:	701a      	strb	r2, [r3, #0]
 80080f0:	e0e6      	b.n	80082c0 <UART_SetConfig+0x390>
 80080f2:	231b      	movs	r3, #27
 80080f4:	2220      	movs	r2, #32
 80080f6:	189b      	adds	r3, r3, r2
 80080f8:	19db      	adds	r3, r3, r7
 80080fa:	2202      	movs	r2, #2
 80080fc:	701a      	strb	r2, [r3, #0]
 80080fe:	e0df      	b.n	80082c0 <UART_SetConfig+0x390>
 8008100:	231b      	movs	r3, #27
 8008102:	2220      	movs	r2, #32
 8008104:	189b      	adds	r3, r3, r2
 8008106:	19db      	adds	r3, r3, r7
 8008108:	2204      	movs	r2, #4
 800810a:	701a      	strb	r2, [r3, #0]
 800810c:	e0d8      	b.n	80082c0 <UART_SetConfig+0x390>
 800810e:	231b      	movs	r3, #27
 8008110:	2220      	movs	r2, #32
 8008112:	189b      	adds	r3, r3, r2
 8008114:	19db      	adds	r3, r3, r7
 8008116:	2208      	movs	r2, #8
 8008118:	701a      	strb	r2, [r3, #0]
 800811a:	e0d1      	b.n	80082c0 <UART_SetConfig+0x390>
 800811c:	231b      	movs	r3, #27
 800811e:	2220      	movs	r2, #32
 8008120:	189b      	adds	r3, r3, r2
 8008122:	19db      	adds	r3, r3, r7
 8008124:	2210      	movs	r2, #16
 8008126:	701a      	strb	r2, [r3, #0]
 8008128:	e0ca      	b.n	80082c0 <UART_SetConfig+0x390>
 800812a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a57      	ldr	r2, [pc, #348]	@ (800828c <UART_SetConfig+0x35c>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d106      	bne.n	8008142 <UART_SetConfig+0x212>
 8008134:	231b      	movs	r3, #27
 8008136:	2220      	movs	r2, #32
 8008138:	189b      	adds	r3, r3, r2
 800813a:	19db      	adds	r3, r3, r7
 800813c:	2200      	movs	r2, #0
 800813e:	701a      	strb	r2, [r3, #0]
 8008140:	e0be      	b.n	80082c0 <UART_SetConfig+0x390>
 8008142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a52      	ldr	r2, [pc, #328]	@ (8008290 <UART_SetConfig+0x360>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d106      	bne.n	800815a <UART_SetConfig+0x22a>
 800814c:	231b      	movs	r3, #27
 800814e:	2220      	movs	r2, #32
 8008150:	189b      	adds	r3, r3, r2
 8008152:	19db      	adds	r3, r3, r7
 8008154:	2200      	movs	r2, #0
 8008156:	701a      	strb	r2, [r3, #0]
 8008158:	e0b2      	b.n	80082c0 <UART_SetConfig+0x390>
 800815a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a4d      	ldr	r2, [pc, #308]	@ (8008294 <UART_SetConfig+0x364>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d106      	bne.n	8008172 <UART_SetConfig+0x242>
 8008164:	231b      	movs	r3, #27
 8008166:	2220      	movs	r2, #32
 8008168:	189b      	adds	r3, r3, r2
 800816a:	19db      	adds	r3, r3, r7
 800816c:	2200      	movs	r2, #0
 800816e:	701a      	strb	r2, [r3, #0]
 8008170:	e0a6      	b.n	80082c0 <UART_SetConfig+0x390>
 8008172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a3e      	ldr	r2, [pc, #248]	@ (8008270 <UART_SetConfig+0x340>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d13e      	bne.n	80081fa <UART_SetConfig+0x2ca>
 800817c:	4b40      	ldr	r3, [pc, #256]	@ (8008280 <UART_SetConfig+0x350>)
 800817e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008180:	23c0      	movs	r3, #192	@ 0xc0
 8008182:	011b      	lsls	r3, r3, #4
 8008184:	4013      	ands	r3, r2
 8008186:	22c0      	movs	r2, #192	@ 0xc0
 8008188:	0112      	lsls	r2, r2, #4
 800818a:	4293      	cmp	r3, r2
 800818c:	d027      	beq.n	80081de <UART_SetConfig+0x2ae>
 800818e:	22c0      	movs	r2, #192	@ 0xc0
 8008190:	0112      	lsls	r2, r2, #4
 8008192:	4293      	cmp	r3, r2
 8008194:	d82a      	bhi.n	80081ec <UART_SetConfig+0x2bc>
 8008196:	2280      	movs	r2, #128	@ 0x80
 8008198:	0112      	lsls	r2, r2, #4
 800819a:	4293      	cmp	r3, r2
 800819c:	d011      	beq.n	80081c2 <UART_SetConfig+0x292>
 800819e:	2280      	movs	r2, #128	@ 0x80
 80081a0:	0112      	lsls	r2, r2, #4
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d822      	bhi.n	80081ec <UART_SetConfig+0x2bc>
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d004      	beq.n	80081b4 <UART_SetConfig+0x284>
 80081aa:	2280      	movs	r2, #128	@ 0x80
 80081ac:	00d2      	lsls	r2, r2, #3
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d00e      	beq.n	80081d0 <UART_SetConfig+0x2a0>
 80081b2:	e01b      	b.n	80081ec <UART_SetConfig+0x2bc>
 80081b4:	231b      	movs	r3, #27
 80081b6:	2220      	movs	r2, #32
 80081b8:	189b      	adds	r3, r3, r2
 80081ba:	19db      	adds	r3, r3, r7
 80081bc:	2200      	movs	r2, #0
 80081be:	701a      	strb	r2, [r3, #0]
 80081c0:	e07e      	b.n	80082c0 <UART_SetConfig+0x390>
 80081c2:	231b      	movs	r3, #27
 80081c4:	2220      	movs	r2, #32
 80081c6:	189b      	adds	r3, r3, r2
 80081c8:	19db      	adds	r3, r3, r7
 80081ca:	2202      	movs	r2, #2
 80081cc:	701a      	strb	r2, [r3, #0]
 80081ce:	e077      	b.n	80082c0 <UART_SetConfig+0x390>
 80081d0:	231b      	movs	r3, #27
 80081d2:	2220      	movs	r2, #32
 80081d4:	189b      	adds	r3, r3, r2
 80081d6:	19db      	adds	r3, r3, r7
 80081d8:	2204      	movs	r2, #4
 80081da:	701a      	strb	r2, [r3, #0]
 80081dc:	e070      	b.n	80082c0 <UART_SetConfig+0x390>
 80081de:	231b      	movs	r3, #27
 80081e0:	2220      	movs	r2, #32
 80081e2:	189b      	adds	r3, r3, r2
 80081e4:	19db      	adds	r3, r3, r7
 80081e6:	2208      	movs	r2, #8
 80081e8:	701a      	strb	r2, [r3, #0]
 80081ea:	e069      	b.n	80082c0 <UART_SetConfig+0x390>
 80081ec:	231b      	movs	r3, #27
 80081ee:	2220      	movs	r2, #32
 80081f0:	189b      	adds	r3, r3, r2
 80081f2:	19db      	adds	r3, r3, r7
 80081f4:	2210      	movs	r2, #16
 80081f6:	701a      	strb	r2, [r3, #0]
 80081f8:	e062      	b.n	80082c0 <UART_SetConfig+0x390>
 80081fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a1d      	ldr	r2, [pc, #116]	@ (8008274 <UART_SetConfig+0x344>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d157      	bne.n	80082b4 <UART_SetConfig+0x384>
 8008204:	4b1e      	ldr	r3, [pc, #120]	@ (8008280 <UART_SetConfig+0x350>)
 8008206:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008208:	23c0      	movs	r3, #192	@ 0xc0
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4013      	ands	r3, r2
 800820e:	22c0      	movs	r2, #192	@ 0xc0
 8008210:	0092      	lsls	r2, r2, #2
 8008212:	4293      	cmp	r3, r2
 8008214:	d040      	beq.n	8008298 <UART_SetConfig+0x368>
 8008216:	22c0      	movs	r2, #192	@ 0xc0
 8008218:	0092      	lsls	r2, r2, #2
 800821a:	4293      	cmp	r3, r2
 800821c:	d843      	bhi.n	80082a6 <UART_SetConfig+0x376>
 800821e:	2280      	movs	r2, #128	@ 0x80
 8008220:	0092      	lsls	r2, r2, #2
 8008222:	4293      	cmp	r3, r2
 8008224:	d011      	beq.n	800824a <UART_SetConfig+0x31a>
 8008226:	2280      	movs	r2, #128	@ 0x80
 8008228:	0092      	lsls	r2, r2, #2
 800822a:	4293      	cmp	r3, r2
 800822c:	d83b      	bhi.n	80082a6 <UART_SetConfig+0x376>
 800822e:	2b00      	cmp	r3, #0
 8008230:	d004      	beq.n	800823c <UART_SetConfig+0x30c>
 8008232:	2280      	movs	r2, #128	@ 0x80
 8008234:	0052      	lsls	r2, r2, #1
 8008236:	4293      	cmp	r3, r2
 8008238:	d00e      	beq.n	8008258 <UART_SetConfig+0x328>
 800823a:	e034      	b.n	80082a6 <UART_SetConfig+0x376>
 800823c:	231b      	movs	r3, #27
 800823e:	2220      	movs	r2, #32
 8008240:	189b      	adds	r3, r3, r2
 8008242:	19db      	adds	r3, r3, r7
 8008244:	2200      	movs	r2, #0
 8008246:	701a      	strb	r2, [r3, #0]
 8008248:	e03a      	b.n	80082c0 <UART_SetConfig+0x390>
 800824a:	231b      	movs	r3, #27
 800824c:	2220      	movs	r2, #32
 800824e:	189b      	adds	r3, r3, r2
 8008250:	19db      	adds	r3, r3, r7
 8008252:	2202      	movs	r2, #2
 8008254:	701a      	strb	r2, [r3, #0]
 8008256:	e033      	b.n	80082c0 <UART_SetConfig+0x390>
 8008258:	231b      	movs	r3, #27
 800825a:	2220      	movs	r2, #32
 800825c:	189b      	adds	r3, r3, r2
 800825e:	19db      	adds	r3, r3, r7
 8008260:	2204      	movs	r2, #4
 8008262:	701a      	strb	r2, [r3, #0]
 8008264:	e02c      	b.n	80082c0 <UART_SetConfig+0x390>
 8008266:	46c0      	nop			@ (mov r8, r8)
 8008268:	cfff69f3 	.word	0xcfff69f3
 800826c:	ffffcfff 	.word	0xffffcfff
 8008270:	40008000 	.word	0x40008000
 8008274:	40008400 	.word	0x40008400
 8008278:	11fff4ff 	.word	0x11fff4ff
 800827c:	40013800 	.word	0x40013800
 8008280:	40021000 	.word	0x40021000
 8008284:	40004400 	.word	0x40004400
 8008288:	40004800 	.word	0x40004800
 800828c:	40004c00 	.word	0x40004c00
 8008290:	40005000 	.word	0x40005000
 8008294:	40013c00 	.word	0x40013c00
 8008298:	231b      	movs	r3, #27
 800829a:	2220      	movs	r2, #32
 800829c:	189b      	adds	r3, r3, r2
 800829e:	19db      	adds	r3, r3, r7
 80082a0:	2208      	movs	r2, #8
 80082a2:	701a      	strb	r2, [r3, #0]
 80082a4:	e00c      	b.n	80082c0 <UART_SetConfig+0x390>
 80082a6:	231b      	movs	r3, #27
 80082a8:	2220      	movs	r2, #32
 80082aa:	189b      	adds	r3, r3, r2
 80082ac:	19db      	adds	r3, r3, r7
 80082ae:	2210      	movs	r2, #16
 80082b0:	701a      	strb	r2, [r3, #0]
 80082b2:	e005      	b.n	80082c0 <UART_SetConfig+0x390>
 80082b4:	231b      	movs	r3, #27
 80082b6:	2220      	movs	r2, #32
 80082b8:	189b      	adds	r3, r3, r2
 80082ba:	19db      	adds	r3, r3, r7
 80082bc:	2210      	movs	r2, #16
 80082be:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80082c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4ac1      	ldr	r2, [pc, #772]	@ (80085cc <UART_SetConfig+0x69c>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d005      	beq.n	80082d6 <UART_SetConfig+0x3a6>
 80082ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4ac0      	ldr	r2, [pc, #768]	@ (80085d0 <UART_SetConfig+0x6a0>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d000      	beq.n	80082d6 <UART_SetConfig+0x3a6>
 80082d4:	e093      	b.n	80083fe <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80082d6:	231b      	movs	r3, #27
 80082d8:	2220      	movs	r2, #32
 80082da:	189b      	adds	r3, r3, r2
 80082dc:	19db      	adds	r3, r3, r7
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	2b08      	cmp	r3, #8
 80082e2:	d015      	beq.n	8008310 <UART_SetConfig+0x3e0>
 80082e4:	dc18      	bgt.n	8008318 <UART_SetConfig+0x3e8>
 80082e6:	2b04      	cmp	r3, #4
 80082e8:	d00d      	beq.n	8008306 <UART_SetConfig+0x3d6>
 80082ea:	dc15      	bgt.n	8008318 <UART_SetConfig+0x3e8>
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d002      	beq.n	80082f6 <UART_SetConfig+0x3c6>
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d005      	beq.n	8008300 <UART_SetConfig+0x3d0>
 80082f4:	e010      	b.n	8008318 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082f6:	f7fd fd39 	bl	8005d6c <HAL_RCC_GetPCLK1Freq>
 80082fa:	0003      	movs	r3, r0
 80082fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80082fe:	e014      	b.n	800832a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008300:	4bb4      	ldr	r3, [pc, #720]	@ (80085d4 <UART_SetConfig+0x6a4>)
 8008302:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008304:	e011      	b.n	800832a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008306:	f7fd fca5 	bl	8005c54 <HAL_RCC_GetSysClockFreq>
 800830a:	0003      	movs	r3, r0
 800830c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800830e:	e00c      	b.n	800832a <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008310:	2380      	movs	r3, #128	@ 0x80
 8008312:	021b      	lsls	r3, r3, #8
 8008314:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008316:	e008      	b.n	800832a <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8008318:	2300      	movs	r3, #0
 800831a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800831c:	231a      	movs	r3, #26
 800831e:	2220      	movs	r2, #32
 8008320:	189b      	adds	r3, r3, r2
 8008322:	19db      	adds	r3, r3, r7
 8008324:	2201      	movs	r2, #1
 8008326:	701a      	strb	r2, [r3, #0]
        break;
 8008328:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800832a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800832c:	2b00      	cmp	r3, #0
 800832e:	d100      	bne.n	8008332 <UART_SetConfig+0x402>
 8008330:	e135      	b.n	800859e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008334:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008336:	4ba8      	ldr	r3, [pc, #672]	@ (80085d8 <UART_SetConfig+0x6a8>)
 8008338:	0052      	lsls	r2, r2, #1
 800833a:	5ad3      	ldrh	r3, [r2, r3]
 800833c:	0019      	movs	r1, r3
 800833e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008340:	f7f7 fef2 	bl	8000128 <__udivsi3>
 8008344:	0003      	movs	r3, r0
 8008346:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834a:	685a      	ldr	r2, [r3, #4]
 800834c:	0013      	movs	r3, r2
 800834e:	005b      	lsls	r3, r3, #1
 8008350:	189b      	adds	r3, r3, r2
 8008352:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008354:	429a      	cmp	r2, r3
 8008356:	d305      	bcc.n	8008364 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800835e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008360:	429a      	cmp	r2, r3
 8008362:	d906      	bls.n	8008372 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8008364:	231a      	movs	r3, #26
 8008366:	2220      	movs	r2, #32
 8008368:	189b      	adds	r3, r3, r2
 800836a:	19db      	adds	r3, r3, r7
 800836c:	2201      	movs	r2, #1
 800836e:	701a      	strb	r2, [r3, #0]
 8008370:	e044      	b.n	80083fc <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008374:	61bb      	str	r3, [r7, #24]
 8008376:	2300      	movs	r3, #0
 8008378:	61fb      	str	r3, [r7, #28]
 800837a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800837e:	4b96      	ldr	r3, [pc, #600]	@ (80085d8 <UART_SetConfig+0x6a8>)
 8008380:	0052      	lsls	r2, r2, #1
 8008382:	5ad3      	ldrh	r3, [r2, r3]
 8008384:	613b      	str	r3, [r7, #16]
 8008386:	2300      	movs	r3, #0
 8008388:	617b      	str	r3, [r7, #20]
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	69b8      	ldr	r0, [r7, #24]
 8008390:	69f9      	ldr	r1, [r7, #28]
 8008392:	f7f8 f87d 	bl	8000490 <__aeabi_uldivmod>
 8008396:	0002      	movs	r2, r0
 8008398:	000b      	movs	r3, r1
 800839a:	0e11      	lsrs	r1, r2, #24
 800839c:	021d      	lsls	r5, r3, #8
 800839e:	430d      	orrs	r5, r1
 80083a0:	0214      	lsls	r4, r2, #8
 80083a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	085b      	lsrs	r3, r3, #1
 80083a8:	60bb      	str	r3, [r7, #8]
 80083aa:	2300      	movs	r3, #0
 80083ac:	60fb      	str	r3, [r7, #12]
 80083ae:	68b8      	ldr	r0, [r7, #8]
 80083b0:	68f9      	ldr	r1, [r7, #12]
 80083b2:	1900      	adds	r0, r0, r4
 80083b4:	4169      	adcs	r1, r5
 80083b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	603b      	str	r3, [r7, #0]
 80083bc:	2300      	movs	r3, #0
 80083be:	607b      	str	r3, [r7, #4]
 80083c0:	683a      	ldr	r2, [r7, #0]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f7f8 f864 	bl	8000490 <__aeabi_uldivmod>
 80083c8:	0002      	movs	r2, r0
 80083ca:	000b      	movs	r3, r1
 80083cc:	0013      	movs	r3, r2
 80083ce:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80083d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083d2:	23c0      	movs	r3, #192	@ 0xc0
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d309      	bcc.n	80083ee <UART_SetConfig+0x4be>
 80083da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083dc:	2380      	movs	r3, #128	@ 0x80
 80083de:	035b      	lsls	r3, r3, #13
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d204      	bcs.n	80083ee <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80083e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083ea:	60da      	str	r2, [r3, #12]
 80083ec:	e006      	b.n	80083fc <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80083ee:	231a      	movs	r3, #26
 80083f0:	2220      	movs	r2, #32
 80083f2:	189b      	adds	r3, r3, r2
 80083f4:	19db      	adds	r3, r3, r7
 80083f6:	2201      	movs	r2, #1
 80083f8:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80083fa:	e0d0      	b.n	800859e <UART_SetConfig+0x66e>
 80083fc:	e0cf      	b.n	800859e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008400:	69da      	ldr	r2, [r3, #28]
 8008402:	2380      	movs	r3, #128	@ 0x80
 8008404:	021b      	lsls	r3, r3, #8
 8008406:	429a      	cmp	r2, r3
 8008408:	d000      	beq.n	800840c <UART_SetConfig+0x4dc>
 800840a:	e070      	b.n	80084ee <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 800840c:	231b      	movs	r3, #27
 800840e:	2220      	movs	r2, #32
 8008410:	189b      	adds	r3, r3, r2
 8008412:	19db      	adds	r3, r3, r7
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	2b08      	cmp	r3, #8
 8008418:	d015      	beq.n	8008446 <UART_SetConfig+0x516>
 800841a:	dc18      	bgt.n	800844e <UART_SetConfig+0x51e>
 800841c:	2b04      	cmp	r3, #4
 800841e:	d00d      	beq.n	800843c <UART_SetConfig+0x50c>
 8008420:	dc15      	bgt.n	800844e <UART_SetConfig+0x51e>
 8008422:	2b00      	cmp	r3, #0
 8008424:	d002      	beq.n	800842c <UART_SetConfig+0x4fc>
 8008426:	2b02      	cmp	r3, #2
 8008428:	d005      	beq.n	8008436 <UART_SetConfig+0x506>
 800842a:	e010      	b.n	800844e <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800842c:	f7fd fc9e 	bl	8005d6c <HAL_RCC_GetPCLK1Freq>
 8008430:	0003      	movs	r3, r0
 8008432:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008434:	e014      	b.n	8008460 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008436:	4b67      	ldr	r3, [pc, #412]	@ (80085d4 <UART_SetConfig+0x6a4>)
 8008438:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800843a:	e011      	b.n	8008460 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800843c:	f7fd fc0a 	bl	8005c54 <HAL_RCC_GetSysClockFreq>
 8008440:	0003      	movs	r3, r0
 8008442:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008444:	e00c      	b.n	8008460 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008446:	2380      	movs	r3, #128	@ 0x80
 8008448:	021b      	lsls	r3, r3, #8
 800844a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800844c:	e008      	b.n	8008460 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800844e:	2300      	movs	r3, #0
 8008450:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8008452:	231a      	movs	r3, #26
 8008454:	2220      	movs	r2, #32
 8008456:	189b      	adds	r3, r3, r2
 8008458:	19db      	adds	r3, r3, r7
 800845a:	2201      	movs	r2, #1
 800845c:	701a      	strb	r2, [r3, #0]
        break;
 800845e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008462:	2b00      	cmp	r3, #0
 8008464:	d100      	bne.n	8008468 <UART_SetConfig+0x538>
 8008466:	e09a      	b.n	800859e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800846a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800846c:	4b5a      	ldr	r3, [pc, #360]	@ (80085d8 <UART_SetConfig+0x6a8>)
 800846e:	0052      	lsls	r2, r2, #1
 8008470:	5ad3      	ldrh	r3, [r2, r3]
 8008472:	0019      	movs	r1, r3
 8008474:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008476:	f7f7 fe57 	bl	8000128 <__udivsi3>
 800847a:	0003      	movs	r3, r0
 800847c:	005a      	lsls	r2, r3, #1
 800847e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	085b      	lsrs	r3, r3, #1
 8008484:	18d2      	adds	r2, r2, r3
 8008486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	0019      	movs	r1, r3
 800848c:	0010      	movs	r0, r2
 800848e:	f7f7 fe4b 	bl	8000128 <__udivsi3>
 8008492:	0003      	movs	r3, r0
 8008494:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008498:	2b0f      	cmp	r3, #15
 800849a:	d921      	bls.n	80084e0 <UART_SetConfig+0x5b0>
 800849c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800849e:	2380      	movs	r3, #128	@ 0x80
 80084a0:	025b      	lsls	r3, r3, #9
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d21c      	bcs.n	80084e0 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	200e      	movs	r0, #14
 80084ac:	2420      	movs	r4, #32
 80084ae:	1903      	adds	r3, r0, r4
 80084b0:	19db      	adds	r3, r3, r7
 80084b2:	210f      	movs	r1, #15
 80084b4:	438a      	bics	r2, r1
 80084b6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ba:	085b      	lsrs	r3, r3, #1
 80084bc:	b29b      	uxth	r3, r3
 80084be:	2207      	movs	r2, #7
 80084c0:	4013      	ands	r3, r2
 80084c2:	b299      	uxth	r1, r3
 80084c4:	1903      	adds	r3, r0, r4
 80084c6:	19db      	adds	r3, r3, r7
 80084c8:	1902      	adds	r2, r0, r4
 80084ca:	19d2      	adds	r2, r2, r7
 80084cc:	8812      	ldrh	r2, [r2, #0]
 80084ce:	430a      	orrs	r2, r1
 80084d0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80084d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	1902      	adds	r2, r0, r4
 80084d8:	19d2      	adds	r2, r2, r7
 80084da:	8812      	ldrh	r2, [r2, #0]
 80084dc:	60da      	str	r2, [r3, #12]
 80084de:	e05e      	b.n	800859e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80084e0:	231a      	movs	r3, #26
 80084e2:	2220      	movs	r2, #32
 80084e4:	189b      	adds	r3, r3, r2
 80084e6:	19db      	adds	r3, r3, r7
 80084e8:	2201      	movs	r2, #1
 80084ea:	701a      	strb	r2, [r3, #0]
 80084ec:	e057      	b.n	800859e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084ee:	231b      	movs	r3, #27
 80084f0:	2220      	movs	r2, #32
 80084f2:	189b      	adds	r3, r3, r2
 80084f4:	19db      	adds	r3, r3, r7
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	2b08      	cmp	r3, #8
 80084fa:	d015      	beq.n	8008528 <UART_SetConfig+0x5f8>
 80084fc:	dc18      	bgt.n	8008530 <UART_SetConfig+0x600>
 80084fe:	2b04      	cmp	r3, #4
 8008500:	d00d      	beq.n	800851e <UART_SetConfig+0x5ee>
 8008502:	dc15      	bgt.n	8008530 <UART_SetConfig+0x600>
 8008504:	2b00      	cmp	r3, #0
 8008506:	d002      	beq.n	800850e <UART_SetConfig+0x5de>
 8008508:	2b02      	cmp	r3, #2
 800850a:	d005      	beq.n	8008518 <UART_SetConfig+0x5e8>
 800850c:	e010      	b.n	8008530 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800850e:	f7fd fc2d 	bl	8005d6c <HAL_RCC_GetPCLK1Freq>
 8008512:	0003      	movs	r3, r0
 8008514:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008516:	e014      	b.n	8008542 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008518:	4b2e      	ldr	r3, [pc, #184]	@ (80085d4 <UART_SetConfig+0x6a4>)
 800851a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800851c:	e011      	b.n	8008542 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800851e:	f7fd fb99 	bl	8005c54 <HAL_RCC_GetSysClockFreq>
 8008522:	0003      	movs	r3, r0
 8008524:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008526:	e00c      	b.n	8008542 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008528:	2380      	movs	r3, #128	@ 0x80
 800852a:	021b      	lsls	r3, r3, #8
 800852c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800852e:	e008      	b.n	8008542 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8008530:	2300      	movs	r3, #0
 8008532:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8008534:	231a      	movs	r3, #26
 8008536:	2220      	movs	r2, #32
 8008538:	189b      	adds	r3, r3, r2
 800853a:	19db      	adds	r3, r3, r7
 800853c:	2201      	movs	r2, #1
 800853e:	701a      	strb	r2, [r3, #0]
        break;
 8008540:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8008542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008544:	2b00      	cmp	r3, #0
 8008546:	d02a      	beq.n	800859e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800854a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800854c:	4b22      	ldr	r3, [pc, #136]	@ (80085d8 <UART_SetConfig+0x6a8>)
 800854e:	0052      	lsls	r2, r2, #1
 8008550:	5ad3      	ldrh	r3, [r2, r3]
 8008552:	0019      	movs	r1, r3
 8008554:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008556:	f7f7 fde7 	bl	8000128 <__udivsi3>
 800855a:	0003      	movs	r3, r0
 800855c:	001a      	movs	r2, r3
 800855e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	085b      	lsrs	r3, r3, #1
 8008564:	18d2      	adds	r2, r2, r3
 8008566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	0019      	movs	r1, r3
 800856c:	0010      	movs	r0, r2
 800856e:	f7f7 fddb 	bl	8000128 <__udivsi3>
 8008572:	0003      	movs	r3, r0
 8008574:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008578:	2b0f      	cmp	r3, #15
 800857a:	d90a      	bls.n	8008592 <UART_SetConfig+0x662>
 800857c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800857e:	2380      	movs	r3, #128	@ 0x80
 8008580:	025b      	lsls	r3, r3, #9
 8008582:	429a      	cmp	r2, r3
 8008584:	d205      	bcs.n	8008592 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008588:	b29a      	uxth	r2, r3
 800858a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	60da      	str	r2, [r3, #12]
 8008590:	e005      	b.n	800859e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8008592:	231a      	movs	r3, #26
 8008594:	2220      	movs	r2, #32
 8008596:	189b      	adds	r3, r3, r2
 8008598:	19db      	adds	r3, r3, r7
 800859a:	2201      	movs	r2, #1
 800859c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800859e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a0:	226a      	movs	r2, #106	@ 0x6a
 80085a2:	2101      	movs	r1, #1
 80085a4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80085a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a8:	2268      	movs	r2, #104	@ 0x68
 80085aa:	2101      	movs	r1, #1
 80085ac:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b0:	2200      	movs	r2, #0
 80085b2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80085b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b6:	2200      	movs	r2, #0
 80085b8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80085ba:	231a      	movs	r3, #26
 80085bc:	2220      	movs	r2, #32
 80085be:	189b      	adds	r3, r3, r2
 80085c0:	19db      	adds	r3, r3, r7
 80085c2:	781b      	ldrb	r3, [r3, #0]
}
 80085c4:	0018      	movs	r0, r3
 80085c6:	46bd      	mov	sp, r7
 80085c8:	b010      	add	sp, #64	@ 0x40
 80085ca:	bdb0      	pop	{r4, r5, r7, pc}
 80085cc:	40008000 	.word	0x40008000
 80085d0:	40008400 	.word	0x40008400
 80085d4:	00f42400 	.word	0x00f42400
 80085d8:	0800a040 	.word	0x0800a040

080085dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085e8:	2208      	movs	r2, #8
 80085ea:	4013      	ands	r3, r2
 80085ec:	d00b      	beq.n	8008606 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	4a4a      	ldr	r2, [pc, #296]	@ (8008720 <UART_AdvFeatureConfig+0x144>)
 80085f6:	4013      	ands	r3, r2
 80085f8:	0019      	movs	r1, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	430a      	orrs	r2, r1
 8008604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800860a:	2201      	movs	r2, #1
 800860c:	4013      	ands	r3, r2
 800860e:	d00b      	beq.n	8008628 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	4a43      	ldr	r2, [pc, #268]	@ (8008724 <UART_AdvFeatureConfig+0x148>)
 8008618:	4013      	ands	r3, r2
 800861a:	0019      	movs	r1, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	430a      	orrs	r2, r1
 8008626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800862c:	2202      	movs	r2, #2
 800862e:	4013      	ands	r3, r2
 8008630:	d00b      	beq.n	800864a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	4a3b      	ldr	r2, [pc, #236]	@ (8008728 <UART_AdvFeatureConfig+0x14c>)
 800863a:	4013      	ands	r3, r2
 800863c:	0019      	movs	r1, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	430a      	orrs	r2, r1
 8008648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800864e:	2204      	movs	r2, #4
 8008650:	4013      	ands	r3, r2
 8008652:	d00b      	beq.n	800866c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	4a34      	ldr	r2, [pc, #208]	@ (800872c <UART_AdvFeatureConfig+0x150>)
 800865c:	4013      	ands	r3, r2
 800865e:	0019      	movs	r1, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	430a      	orrs	r2, r1
 800866a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008670:	2210      	movs	r2, #16
 8008672:	4013      	ands	r3, r2
 8008674:	d00b      	beq.n	800868e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	4a2c      	ldr	r2, [pc, #176]	@ (8008730 <UART_AdvFeatureConfig+0x154>)
 800867e:	4013      	ands	r3, r2
 8008680:	0019      	movs	r1, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	430a      	orrs	r2, r1
 800868c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008692:	2220      	movs	r2, #32
 8008694:	4013      	ands	r3, r2
 8008696:	d00b      	beq.n	80086b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	4a25      	ldr	r2, [pc, #148]	@ (8008734 <UART_AdvFeatureConfig+0x158>)
 80086a0:	4013      	ands	r3, r2
 80086a2:	0019      	movs	r1, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	430a      	orrs	r2, r1
 80086ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086b4:	2240      	movs	r2, #64	@ 0x40
 80086b6:	4013      	ands	r3, r2
 80086b8:	d01d      	beq.n	80086f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	4a1d      	ldr	r2, [pc, #116]	@ (8008738 <UART_AdvFeatureConfig+0x15c>)
 80086c2:	4013      	ands	r3, r2
 80086c4:	0019      	movs	r1, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	430a      	orrs	r2, r1
 80086d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086d6:	2380      	movs	r3, #128	@ 0x80
 80086d8:	035b      	lsls	r3, r3, #13
 80086da:	429a      	cmp	r2, r3
 80086dc:	d10b      	bne.n	80086f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	4a15      	ldr	r2, [pc, #84]	@ (800873c <UART_AdvFeatureConfig+0x160>)
 80086e6:	4013      	ands	r3, r2
 80086e8:	0019      	movs	r1, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	430a      	orrs	r2, r1
 80086f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086fa:	2280      	movs	r2, #128	@ 0x80
 80086fc:	4013      	ands	r3, r2
 80086fe:	d00b      	beq.n	8008718 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	4a0e      	ldr	r2, [pc, #56]	@ (8008740 <UART_AdvFeatureConfig+0x164>)
 8008708:	4013      	ands	r3, r2
 800870a:	0019      	movs	r1, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	430a      	orrs	r2, r1
 8008716:	605a      	str	r2, [r3, #4]
  }
}
 8008718:	46c0      	nop			@ (mov r8, r8)
 800871a:	46bd      	mov	sp, r7
 800871c:	b002      	add	sp, #8
 800871e:	bd80      	pop	{r7, pc}
 8008720:	ffff7fff 	.word	0xffff7fff
 8008724:	fffdffff 	.word	0xfffdffff
 8008728:	fffeffff 	.word	0xfffeffff
 800872c:	fffbffff 	.word	0xfffbffff
 8008730:	ffffefff 	.word	0xffffefff
 8008734:	ffffdfff 	.word	0xffffdfff
 8008738:	ffefffff 	.word	0xffefffff
 800873c:	ff9fffff 	.word	0xff9fffff
 8008740:	fff7ffff 	.word	0xfff7ffff

08008744 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b092      	sub	sp, #72	@ 0x48
 8008748:	af02      	add	r7, sp, #8
 800874a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2290      	movs	r2, #144	@ 0x90
 8008750:	2100      	movs	r1, #0
 8008752:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008754:	f7fb fce8 	bl	8004128 <HAL_GetTick>
 8008758:	0003      	movs	r3, r0
 800875a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2208      	movs	r2, #8
 8008764:	4013      	ands	r3, r2
 8008766:	2b08      	cmp	r3, #8
 8008768:	d12d      	bne.n	80087c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800876a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800876c:	2280      	movs	r2, #128	@ 0x80
 800876e:	0391      	lsls	r1, r2, #14
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	4a47      	ldr	r2, [pc, #284]	@ (8008890 <UART_CheckIdleState+0x14c>)
 8008774:	9200      	str	r2, [sp, #0]
 8008776:	2200      	movs	r2, #0
 8008778:	f000 f88e 	bl	8008898 <UART_WaitOnFlagUntilTimeout>
 800877c:	1e03      	subs	r3, r0, #0
 800877e:	d022      	beq.n	80087c6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008780:	f3ef 8310 	mrs	r3, PRIMASK
 8008784:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008788:	63bb      	str	r3, [r7, #56]	@ 0x38
 800878a:	2301      	movs	r3, #1
 800878c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800878e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008790:	f383 8810 	msr	PRIMASK, r3
}
 8008794:	46c0      	nop			@ (mov r8, r8)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2180      	movs	r1, #128	@ 0x80
 80087a2:	438a      	bics	r2, r1
 80087a4:	601a      	str	r2, [r3, #0]
 80087a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ac:	f383 8810 	msr	PRIMASK, r3
}
 80087b0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2288      	movs	r2, #136	@ 0x88
 80087b6:	2120      	movs	r1, #32
 80087b8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2284      	movs	r2, #132	@ 0x84
 80087be:	2100      	movs	r1, #0
 80087c0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e060      	b.n	8008888 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2204      	movs	r2, #4
 80087ce:	4013      	ands	r3, r2
 80087d0:	2b04      	cmp	r3, #4
 80087d2:	d146      	bne.n	8008862 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087d6:	2280      	movs	r2, #128	@ 0x80
 80087d8:	03d1      	lsls	r1, r2, #15
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	4a2c      	ldr	r2, [pc, #176]	@ (8008890 <UART_CheckIdleState+0x14c>)
 80087de:	9200      	str	r2, [sp, #0]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f000 f859 	bl	8008898 <UART_WaitOnFlagUntilTimeout>
 80087e6:	1e03      	subs	r3, r0, #0
 80087e8:	d03b      	beq.n	8008862 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087ea:	f3ef 8310 	mrs	r3, PRIMASK
 80087ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80087f0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80087f4:	2301      	movs	r3, #1
 80087f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	f383 8810 	msr	PRIMASK, r3
}
 80087fe:	46c0      	nop			@ (mov r8, r8)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4922      	ldr	r1, [pc, #136]	@ (8008894 <UART_CheckIdleState+0x150>)
 800880c:	400a      	ands	r2, r1
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008812:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	f383 8810 	msr	PRIMASK, r3
}
 800881a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800881c:	f3ef 8310 	mrs	r3, PRIMASK
 8008820:	61bb      	str	r3, [r7, #24]
  return(result);
 8008822:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008824:	633b      	str	r3, [r7, #48]	@ 0x30
 8008826:	2301      	movs	r3, #1
 8008828:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	f383 8810 	msr	PRIMASK, r3
}
 8008830:	46c0      	nop			@ (mov r8, r8)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	689a      	ldr	r2, [r3, #8]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2101      	movs	r1, #1
 800883e:	438a      	bics	r2, r1
 8008840:	609a      	str	r2, [r3, #8]
 8008842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008844:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	f383 8810 	msr	PRIMASK, r3
}
 800884c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	228c      	movs	r2, #140	@ 0x8c
 8008852:	2120      	movs	r1, #32
 8008854:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2284      	movs	r2, #132	@ 0x84
 800885a:	2100      	movs	r1, #0
 800885c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800885e:	2303      	movs	r3, #3
 8008860:	e012      	b.n	8008888 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2288      	movs	r2, #136	@ 0x88
 8008866:	2120      	movs	r1, #32
 8008868:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	228c      	movs	r2, #140	@ 0x8c
 800886e:	2120      	movs	r1, #32
 8008870:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2284      	movs	r2, #132	@ 0x84
 8008882:	2100      	movs	r1, #0
 8008884:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008886:	2300      	movs	r3, #0
}
 8008888:	0018      	movs	r0, r3
 800888a:	46bd      	mov	sp, r7
 800888c:	b010      	add	sp, #64	@ 0x40
 800888e:	bd80      	pop	{r7, pc}
 8008890:	01ffffff 	.word	0x01ffffff
 8008894:	fffffedf 	.word	0xfffffedf

08008898 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	603b      	str	r3, [r7, #0]
 80088a4:	1dfb      	adds	r3, r7, #7
 80088a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088a8:	e051      	b.n	800894e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	3301      	adds	r3, #1
 80088ae:	d04e      	beq.n	800894e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088b0:	f7fb fc3a 	bl	8004128 <HAL_GetTick>
 80088b4:	0002      	movs	r2, r0
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	69ba      	ldr	r2, [r7, #24]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d302      	bcc.n	80088c6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d101      	bne.n	80088ca <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80088c6:	2303      	movs	r3, #3
 80088c8:	e051      	b.n	800896e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2204      	movs	r2, #4
 80088d2:	4013      	ands	r3, r2
 80088d4:	d03b      	beq.n	800894e <UART_WaitOnFlagUntilTimeout+0xb6>
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	2b80      	cmp	r3, #128	@ 0x80
 80088da:	d038      	beq.n	800894e <UART_WaitOnFlagUntilTimeout+0xb6>
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	2b40      	cmp	r3, #64	@ 0x40
 80088e0:	d035      	beq.n	800894e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	69db      	ldr	r3, [r3, #28]
 80088e8:	2208      	movs	r2, #8
 80088ea:	4013      	ands	r3, r2
 80088ec:	2b08      	cmp	r3, #8
 80088ee:	d111      	bne.n	8008914 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2208      	movs	r2, #8
 80088f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	0018      	movs	r0, r3
 80088fc:	f000 f83c 	bl	8008978 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2290      	movs	r2, #144	@ 0x90
 8008904:	2108      	movs	r1, #8
 8008906:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2284      	movs	r2, #132	@ 0x84
 800890c:	2100      	movs	r1, #0
 800890e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e02c      	b.n	800896e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	69da      	ldr	r2, [r3, #28]
 800891a:	2380      	movs	r3, #128	@ 0x80
 800891c:	011b      	lsls	r3, r3, #4
 800891e:	401a      	ands	r2, r3
 8008920:	2380      	movs	r3, #128	@ 0x80
 8008922:	011b      	lsls	r3, r3, #4
 8008924:	429a      	cmp	r2, r3
 8008926:	d112      	bne.n	800894e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2280      	movs	r2, #128	@ 0x80
 800892e:	0112      	lsls	r2, r2, #4
 8008930:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	0018      	movs	r0, r3
 8008936:	f000 f81f 	bl	8008978 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2290      	movs	r2, #144	@ 0x90
 800893e:	2120      	movs	r1, #32
 8008940:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2284      	movs	r2, #132	@ 0x84
 8008946:	2100      	movs	r1, #0
 8008948:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e00f      	b.n	800896e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	69db      	ldr	r3, [r3, #28]
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	4013      	ands	r3, r2
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	425a      	negs	r2, r3
 800895e:	4153      	adcs	r3, r2
 8008960:	b2db      	uxtb	r3, r3
 8008962:	001a      	movs	r2, r3
 8008964:	1dfb      	adds	r3, r7, #7
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	429a      	cmp	r2, r3
 800896a:	d09e      	beq.n	80088aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	0018      	movs	r0, r3
 8008970:	46bd      	mov	sp, r7
 8008972:	b004      	add	sp, #16
 8008974:	bd80      	pop	{r7, pc}
	...

08008978 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b08e      	sub	sp, #56	@ 0x38
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008980:	f3ef 8310 	mrs	r3, PRIMASK
 8008984:	617b      	str	r3, [r7, #20]
  return(result);
 8008986:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008988:	637b      	str	r3, [r7, #52]	@ 0x34
 800898a:	2301      	movs	r3, #1
 800898c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	f383 8810 	msr	PRIMASK, r3
}
 8008994:	46c0      	nop			@ (mov r8, r8)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4926      	ldr	r1, [pc, #152]	@ (8008a3c <UART_EndRxTransfer+0xc4>)
 80089a2:	400a      	ands	r2, r1
 80089a4:	601a      	str	r2, [r3, #0]
 80089a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	f383 8810 	msr	PRIMASK, r3
}
 80089b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089b2:	f3ef 8310 	mrs	r3, PRIMASK
 80089b6:	623b      	str	r3, [r7, #32]
  return(result);
 80089b8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80089bc:	2301      	movs	r3, #1
 80089be:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c2:	f383 8810 	msr	PRIMASK, r3
}
 80089c6:	46c0      	nop			@ (mov r8, r8)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	689a      	ldr	r2, [r3, #8]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	491b      	ldr	r1, [pc, #108]	@ (8008a40 <UART_EndRxTransfer+0xc8>)
 80089d4:	400a      	ands	r2, r1
 80089d6:	609a      	str	r2, [r3, #8]
 80089d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089da:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089de:	f383 8810 	msr	PRIMASK, r3
}
 80089e2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d118      	bne.n	8008a1e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089ec:	f3ef 8310 	mrs	r3, PRIMASK
 80089f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80089f2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089f6:	2301      	movs	r3, #1
 80089f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f383 8810 	msr	PRIMASK, r3
}
 8008a00:	46c0      	nop			@ (mov r8, r8)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2110      	movs	r1, #16
 8008a0e:	438a      	bics	r2, r1
 8008a10:	601a      	str	r2, [r3, #0]
 8008a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	f383 8810 	msr	PRIMASK, r3
}
 8008a1c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	228c      	movs	r2, #140	@ 0x8c
 8008a22:	2120      	movs	r1, #32
 8008a24:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008a32:	46c0      	nop			@ (mov r8, r8)
 8008a34:	46bd      	mov	sp, r7
 8008a36:	b00e      	add	sp, #56	@ 0x38
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	46c0      	nop			@ (mov r8, r8)
 8008a3c:	fffffedf 	.word	0xfffffedf
 8008a40:	effffffe 	.word	0xeffffffe

08008a44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2284      	movs	r2, #132	@ 0x84
 8008a50:	5c9b      	ldrb	r3, [r3, r2]
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d101      	bne.n	8008a5a <HAL_UARTEx_DisableFifoMode+0x16>
 8008a56:	2302      	movs	r3, #2
 8008a58:	e027      	b.n	8008aaa <HAL_UARTEx_DisableFifoMode+0x66>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2284      	movs	r2, #132	@ 0x84
 8008a5e:	2101      	movs	r1, #1
 8008a60:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2288      	movs	r2, #136	@ 0x88
 8008a66:	2124      	movs	r1, #36	@ 0x24
 8008a68:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2101      	movs	r1, #1
 8008a7e:	438a      	bics	r2, r1
 8008a80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	4a0b      	ldr	r2, [pc, #44]	@ (8008ab4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008a86:	4013      	ands	r3, r2
 8008a88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2288      	movs	r2, #136	@ 0x88
 8008a9c:	2120      	movs	r1, #32
 8008a9e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2284      	movs	r2, #132	@ 0x84
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	0018      	movs	r0, r3
 8008aac:	46bd      	mov	sp, r7
 8008aae:	b004      	add	sp, #16
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	46c0      	nop			@ (mov r8, r8)
 8008ab4:	dfffffff 	.word	0xdfffffff

08008ab8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2284      	movs	r2, #132	@ 0x84
 8008ac6:	5c9b      	ldrb	r3, [r3, r2]
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d101      	bne.n	8008ad0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008acc:	2302      	movs	r3, #2
 8008ace:	e02e      	b.n	8008b2e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2284      	movs	r2, #132	@ 0x84
 8008ad4:	2101      	movs	r1, #1
 8008ad6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2288      	movs	r2, #136	@ 0x88
 8008adc:	2124      	movs	r1, #36	@ 0x24
 8008ade:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2101      	movs	r1, #1
 8008af4:	438a      	bics	r2, r1
 8008af6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	00db      	lsls	r3, r3, #3
 8008b00:	08d9      	lsrs	r1, r3, #3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	430a      	orrs	r2, r1
 8008b0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	0018      	movs	r0, r3
 8008b10:	f000 f854 	bl	8008bbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2288      	movs	r2, #136	@ 0x88
 8008b20:	2120      	movs	r1, #32
 8008b22:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2284      	movs	r2, #132	@ 0x84
 8008b28:	2100      	movs	r1, #0
 8008b2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	0018      	movs	r0, r3
 8008b30:	46bd      	mov	sp, r7
 8008b32:	b004      	add	sp, #16
 8008b34:	bd80      	pop	{r7, pc}
	...

08008b38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2284      	movs	r2, #132	@ 0x84
 8008b46:	5c9b      	ldrb	r3, [r3, r2]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d101      	bne.n	8008b50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b4c:	2302      	movs	r3, #2
 8008b4e:	e02f      	b.n	8008bb0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2284      	movs	r2, #132	@ 0x84
 8008b54:	2101      	movs	r1, #1
 8008b56:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2288      	movs	r2, #136	@ 0x88
 8008b5c:	2124      	movs	r1, #36	@ 0x24
 8008b5e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2101      	movs	r1, #1
 8008b74:	438a      	bics	r2, r1
 8008b76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	4a0e      	ldr	r2, [pc, #56]	@ (8008bb8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008b80:	4013      	ands	r3, r2
 8008b82:	0019      	movs	r1, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	0018      	movs	r0, r3
 8008b92:	f000 f813 	bl	8008bbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2288      	movs	r2, #136	@ 0x88
 8008ba2:	2120      	movs	r1, #32
 8008ba4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2284      	movs	r2, #132	@ 0x84
 8008baa:	2100      	movs	r1, #0
 8008bac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	0018      	movs	r0, r3
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	b004      	add	sp, #16
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	f1ffffff 	.word	0xf1ffffff

08008bbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d108      	bne.n	8008bde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	226a      	movs	r2, #106	@ 0x6a
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2268      	movs	r2, #104	@ 0x68
 8008bd8:	2101      	movs	r1, #1
 8008bda:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008bdc:	e043      	b.n	8008c66 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008bde:	260f      	movs	r6, #15
 8008be0:	19bb      	adds	r3, r7, r6
 8008be2:	2208      	movs	r2, #8
 8008be4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008be6:	200e      	movs	r0, #14
 8008be8:	183b      	adds	r3, r7, r0
 8008bea:	2208      	movs	r2, #8
 8008bec:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	0e5b      	lsrs	r3, r3, #25
 8008bf6:	b2da      	uxtb	r2, r3
 8008bf8:	240d      	movs	r4, #13
 8008bfa:	193b      	adds	r3, r7, r4
 8008bfc:	2107      	movs	r1, #7
 8008bfe:	400a      	ands	r2, r1
 8008c00:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	0f5b      	lsrs	r3, r3, #29
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	250c      	movs	r5, #12
 8008c0e:	197b      	adds	r3, r7, r5
 8008c10:	2107      	movs	r1, #7
 8008c12:	400a      	ands	r2, r1
 8008c14:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c16:	183b      	adds	r3, r7, r0
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	197a      	adds	r2, r7, r5
 8008c1c:	7812      	ldrb	r2, [r2, #0]
 8008c1e:	4914      	ldr	r1, [pc, #80]	@ (8008c70 <UARTEx_SetNbDataToProcess+0xb4>)
 8008c20:	5c8a      	ldrb	r2, [r1, r2]
 8008c22:	435a      	muls	r2, r3
 8008c24:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c26:	197b      	adds	r3, r7, r5
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	4a12      	ldr	r2, [pc, #72]	@ (8008c74 <UARTEx_SetNbDataToProcess+0xb8>)
 8008c2c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c2e:	0019      	movs	r1, r3
 8008c30:	f7f7 fb04 	bl	800023c <__divsi3>
 8008c34:	0003      	movs	r3, r0
 8008c36:	b299      	uxth	r1, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	226a      	movs	r2, #106	@ 0x6a
 8008c3c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c3e:	19bb      	adds	r3, r7, r6
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	193a      	adds	r2, r7, r4
 8008c44:	7812      	ldrb	r2, [r2, #0]
 8008c46:	490a      	ldr	r1, [pc, #40]	@ (8008c70 <UARTEx_SetNbDataToProcess+0xb4>)
 8008c48:	5c8a      	ldrb	r2, [r1, r2]
 8008c4a:	435a      	muls	r2, r3
 8008c4c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c4e:	193b      	adds	r3, r7, r4
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	4a08      	ldr	r2, [pc, #32]	@ (8008c74 <UARTEx_SetNbDataToProcess+0xb8>)
 8008c54:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c56:	0019      	movs	r1, r3
 8008c58:	f7f7 faf0 	bl	800023c <__divsi3>
 8008c5c:	0003      	movs	r3, r0
 8008c5e:	b299      	uxth	r1, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2268      	movs	r2, #104	@ 0x68
 8008c64:	5299      	strh	r1, [r3, r2]
}
 8008c66:	46c0      	nop			@ (mov r8, r8)
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	b005      	add	sp, #20
 8008c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c6e:	46c0      	nop			@ (mov r8, r8)
 8008c70:	0800a058 	.word	0x0800a058
 8008c74:	0800a060 	.word	0x0800a060

08008c78 <siprintf>:
 8008c78:	b40e      	push	{r1, r2, r3}
 8008c7a:	b510      	push	{r4, lr}
 8008c7c:	2400      	movs	r4, #0
 8008c7e:	490c      	ldr	r1, [pc, #48]	@ (8008cb0 <siprintf+0x38>)
 8008c80:	b09d      	sub	sp, #116	@ 0x74
 8008c82:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008c84:	9002      	str	r0, [sp, #8]
 8008c86:	9006      	str	r0, [sp, #24]
 8008c88:	9107      	str	r1, [sp, #28]
 8008c8a:	9104      	str	r1, [sp, #16]
 8008c8c:	4809      	ldr	r0, [pc, #36]	@ (8008cb4 <siprintf+0x3c>)
 8008c8e:	490a      	ldr	r1, [pc, #40]	@ (8008cb8 <siprintf+0x40>)
 8008c90:	cb04      	ldmia	r3!, {r2}
 8008c92:	9105      	str	r1, [sp, #20]
 8008c94:	6800      	ldr	r0, [r0, #0]
 8008c96:	a902      	add	r1, sp, #8
 8008c98:	9301      	str	r3, [sp, #4]
 8008c9a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008c9c:	f000 f9a8 	bl	8008ff0 <_svfiprintf_r>
 8008ca0:	9b02      	ldr	r3, [sp, #8]
 8008ca2:	701c      	strb	r4, [r3, #0]
 8008ca4:	b01d      	add	sp, #116	@ 0x74
 8008ca6:	bc10      	pop	{r4}
 8008ca8:	bc08      	pop	{r3}
 8008caa:	b003      	add	sp, #12
 8008cac:	4718      	bx	r3
 8008cae:	46c0      	nop			@ (mov r8, r8)
 8008cb0:	7fffffff 	.word	0x7fffffff
 8008cb4:	20000e90 	.word	0x20000e90
 8008cb8:	ffff0208 	.word	0xffff0208

08008cbc <memset>:
 8008cbc:	0003      	movs	r3, r0
 8008cbe:	1882      	adds	r2, r0, r2
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d100      	bne.n	8008cc6 <memset+0xa>
 8008cc4:	4770      	bx	lr
 8008cc6:	7019      	strb	r1, [r3, #0]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	e7f9      	b.n	8008cc0 <memset+0x4>

08008ccc <__errno>:
 8008ccc:	4b01      	ldr	r3, [pc, #4]	@ (8008cd4 <__errno+0x8>)
 8008cce:	6818      	ldr	r0, [r3, #0]
 8008cd0:	4770      	bx	lr
 8008cd2:	46c0      	nop			@ (mov r8, r8)
 8008cd4:	20000e90 	.word	0x20000e90

08008cd8 <__libc_init_array>:
 8008cd8:	b570      	push	{r4, r5, r6, lr}
 8008cda:	2600      	movs	r6, #0
 8008cdc:	4c0c      	ldr	r4, [pc, #48]	@ (8008d10 <__libc_init_array+0x38>)
 8008cde:	4d0d      	ldr	r5, [pc, #52]	@ (8008d14 <__libc_init_array+0x3c>)
 8008ce0:	1b64      	subs	r4, r4, r5
 8008ce2:	10a4      	asrs	r4, r4, #2
 8008ce4:	42a6      	cmp	r6, r4
 8008ce6:	d109      	bne.n	8008cfc <__libc_init_array+0x24>
 8008ce8:	2600      	movs	r6, #0
 8008cea:	f000 fda3 	bl	8009834 <_init>
 8008cee:	4c0a      	ldr	r4, [pc, #40]	@ (8008d18 <__libc_init_array+0x40>)
 8008cf0:	4d0a      	ldr	r5, [pc, #40]	@ (8008d1c <__libc_init_array+0x44>)
 8008cf2:	1b64      	subs	r4, r4, r5
 8008cf4:	10a4      	asrs	r4, r4, #2
 8008cf6:	42a6      	cmp	r6, r4
 8008cf8:	d105      	bne.n	8008d06 <__libc_init_array+0x2e>
 8008cfa:	bd70      	pop	{r4, r5, r6, pc}
 8008cfc:	00b3      	lsls	r3, r6, #2
 8008cfe:	58eb      	ldr	r3, [r5, r3]
 8008d00:	4798      	blx	r3
 8008d02:	3601      	adds	r6, #1
 8008d04:	e7ee      	b.n	8008ce4 <__libc_init_array+0xc>
 8008d06:	00b3      	lsls	r3, r6, #2
 8008d08:	58eb      	ldr	r3, [r5, r3]
 8008d0a:	4798      	blx	r3
 8008d0c:	3601      	adds	r6, #1
 8008d0e:	e7f2      	b.n	8008cf6 <__libc_init_array+0x1e>
 8008d10:	0800a0b8 	.word	0x0800a0b8
 8008d14:	0800a0b8 	.word	0x0800a0b8
 8008d18:	0800a0bc 	.word	0x0800a0bc
 8008d1c:	0800a0b8 	.word	0x0800a0b8

08008d20 <__retarget_lock_acquire_recursive>:
 8008d20:	4770      	bx	lr

08008d22 <__retarget_lock_release_recursive>:
 8008d22:	4770      	bx	lr

08008d24 <memcpy>:
 8008d24:	2300      	movs	r3, #0
 8008d26:	b510      	push	{r4, lr}
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d100      	bne.n	8008d2e <memcpy+0xa>
 8008d2c:	bd10      	pop	{r4, pc}
 8008d2e:	5ccc      	ldrb	r4, [r1, r3]
 8008d30:	54c4      	strb	r4, [r0, r3]
 8008d32:	3301      	adds	r3, #1
 8008d34:	e7f8      	b.n	8008d28 <memcpy+0x4>
	...

08008d38 <_free_r>:
 8008d38:	b570      	push	{r4, r5, r6, lr}
 8008d3a:	0005      	movs	r5, r0
 8008d3c:	1e0c      	subs	r4, r1, #0
 8008d3e:	d010      	beq.n	8008d62 <_free_r+0x2a>
 8008d40:	3c04      	subs	r4, #4
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	da00      	bge.n	8008d4a <_free_r+0x12>
 8008d48:	18e4      	adds	r4, r4, r3
 8008d4a:	0028      	movs	r0, r5
 8008d4c:	f000 f8e0 	bl	8008f10 <__malloc_lock>
 8008d50:	4a1d      	ldr	r2, [pc, #116]	@ (8008dc8 <_free_r+0x90>)
 8008d52:	6813      	ldr	r3, [r2, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d105      	bne.n	8008d64 <_free_r+0x2c>
 8008d58:	6063      	str	r3, [r4, #4]
 8008d5a:	6014      	str	r4, [r2, #0]
 8008d5c:	0028      	movs	r0, r5
 8008d5e:	f000 f8df 	bl	8008f20 <__malloc_unlock>
 8008d62:	bd70      	pop	{r4, r5, r6, pc}
 8008d64:	42a3      	cmp	r3, r4
 8008d66:	d908      	bls.n	8008d7a <_free_r+0x42>
 8008d68:	6820      	ldr	r0, [r4, #0]
 8008d6a:	1821      	adds	r1, r4, r0
 8008d6c:	428b      	cmp	r3, r1
 8008d6e:	d1f3      	bne.n	8008d58 <_free_r+0x20>
 8008d70:	6819      	ldr	r1, [r3, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	1809      	adds	r1, r1, r0
 8008d76:	6021      	str	r1, [r4, #0]
 8008d78:	e7ee      	b.n	8008d58 <_free_r+0x20>
 8008d7a:	001a      	movs	r2, r3
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d001      	beq.n	8008d86 <_free_r+0x4e>
 8008d82:	42a3      	cmp	r3, r4
 8008d84:	d9f9      	bls.n	8008d7a <_free_r+0x42>
 8008d86:	6811      	ldr	r1, [r2, #0]
 8008d88:	1850      	adds	r0, r2, r1
 8008d8a:	42a0      	cmp	r0, r4
 8008d8c:	d10b      	bne.n	8008da6 <_free_r+0x6e>
 8008d8e:	6820      	ldr	r0, [r4, #0]
 8008d90:	1809      	adds	r1, r1, r0
 8008d92:	1850      	adds	r0, r2, r1
 8008d94:	6011      	str	r1, [r2, #0]
 8008d96:	4283      	cmp	r3, r0
 8008d98:	d1e0      	bne.n	8008d5c <_free_r+0x24>
 8008d9a:	6818      	ldr	r0, [r3, #0]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	1841      	adds	r1, r0, r1
 8008da0:	6011      	str	r1, [r2, #0]
 8008da2:	6053      	str	r3, [r2, #4]
 8008da4:	e7da      	b.n	8008d5c <_free_r+0x24>
 8008da6:	42a0      	cmp	r0, r4
 8008da8:	d902      	bls.n	8008db0 <_free_r+0x78>
 8008daa:	230c      	movs	r3, #12
 8008dac:	602b      	str	r3, [r5, #0]
 8008dae:	e7d5      	b.n	8008d5c <_free_r+0x24>
 8008db0:	6820      	ldr	r0, [r4, #0]
 8008db2:	1821      	adds	r1, r4, r0
 8008db4:	428b      	cmp	r3, r1
 8008db6:	d103      	bne.n	8008dc0 <_free_r+0x88>
 8008db8:	6819      	ldr	r1, [r3, #0]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	1809      	adds	r1, r1, r0
 8008dbe:	6021      	str	r1, [r4, #0]
 8008dc0:	6063      	str	r3, [r4, #4]
 8008dc2:	6054      	str	r4, [r2, #4]
 8008dc4:	e7ca      	b.n	8008d5c <_free_r+0x24>
 8008dc6:	46c0      	nop			@ (mov r8, r8)
 8008dc8:	200016b0 	.word	0x200016b0

08008dcc <sbrk_aligned>:
 8008dcc:	b570      	push	{r4, r5, r6, lr}
 8008dce:	4e0f      	ldr	r6, [pc, #60]	@ (8008e0c <sbrk_aligned+0x40>)
 8008dd0:	000d      	movs	r5, r1
 8008dd2:	6831      	ldr	r1, [r6, #0]
 8008dd4:	0004      	movs	r4, r0
 8008dd6:	2900      	cmp	r1, #0
 8008dd8:	d102      	bne.n	8008de0 <sbrk_aligned+0x14>
 8008dda:	f000 fb95 	bl	8009508 <_sbrk_r>
 8008dde:	6030      	str	r0, [r6, #0]
 8008de0:	0029      	movs	r1, r5
 8008de2:	0020      	movs	r0, r4
 8008de4:	f000 fb90 	bl	8009508 <_sbrk_r>
 8008de8:	1c43      	adds	r3, r0, #1
 8008dea:	d103      	bne.n	8008df4 <sbrk_aligned+0x28>
 8008dec:	2501      	movs	r5, #1
 8008dee:	426d      	negs	r5, r5
 8008df0:	0028      	movs	r0, r5
 8008df2:	bd70      	pop	{r4, r5, r6, pc}
 8008df4:	2303      	movs	r3, #3
 8008df6:	1cc5      	adds	r5, r0, #3
 8008df8:	439d      	bics	r5, r3
 8008dfa:	42a8      	cmp	r0, r5
 8008dfc:	d0f8      	beq.n	8008df0 <sbrk_aligned+0x24>
 8008dfe:	1a29      	subs	r1, r5, r0
 8008e00:	0020      	movs	r0, r4
 8008e02:	f000 fb81 	bl	8009508 <_sbrk_r>
 8008e06:	3001      	adds	r0, #1
 8008e08:	d1f2      	bne.n	8008df0 <sbrk_aligned+0x24>
 8008e0a:	e7ef      	b.n	8008dec <sbrk_aligned+0x20>
 8008e0c:	200016ac 	.word	0x200016ac

08008e10 <_malloc_r>:
 8008e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e12:	2203      	movs	r2, #3
 8008e14:	1ccb      	adds	r3, r1, #3
 8008e16:	4393      	bics	r3, r2
 8008e18:	3308      	adds	r3, #8
 8008e1a:	0005      	movs	r5, r0
 8008e1c:	001f      	movs	r7, r3
 8008e1e:	2b0c      	cmp	r3, #12
 8008e20:	d234      	bcs.n	8008e8c <_malloc_r+0x7c>
 8008e22:	270c      	movs	r7, #12
 8008e24:	42b9      	cmp	r1, r7
 8008e26:	d833      	bhi.n	8008e90 <_malloc_r+0x80>
 8008e28:	0028      	movs	r0, r5
 8008e2a:	f000 f871 	bl	8008f10 <__malloc_lock>
 8008e2e:	4e37      	ldr	r6, [pc, #220]	@ (8008f0c <_malloc_r+0xfc>)
 8008e30:	6833      	ldr	r3, [r6, #0]
 8008e32:	001c      	movs	r4, r3
 8008e34:	2c00      	cmp	r4, #0
 8008e36:	d12f      	bne.n	8008e98 <_malloc_r+0x88>
 8008e38:	0039      	movs	r1, r7
 8008e3a:	0028      	movs	r0, r5
 8008e3c:	f7ff ffc6 	bl	8008dcc <sbrk_aligned>
 8008e40:	0004      	movs	r4, r0
 8008e42:	1c43      	adds	r3, r0, #1
 8008e44:	d15f      	bne.n	8008f06 <_malloc_r+0xf6>
 8008e46:	6834      	ldr	r4, [r6, #0]
 8008e48:	9400      	str	r4, [sp, #0]
 8008e4a:	9b00      	ldr	r3, [sp, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d14a      	bne.n	8008ee6 <_malloc_r+0xd6>
 8008e50:	2c00      	cmp	r4, #0
 8008e52:	d052      	beq.n	8008efa <_malloc_r+0xea>
 8008e54:	6823      	ldr	r3, [r4, #0]
 8008e56:	0028      	movs	r0, r5
 8008e58:	18e3      	adds	r3, r4, r3
 8008e5a:	9900      	ldr	r1, [sp, #0]
 8008e5c:	9301      	str	r3, [sp, #4]
 8008e5e:	f000 fb53 	bl	8009508 <_sbrk_r>
 8008e62:	9b01      	ldr	r3, [sp, #4]
 8008e64:	4283      	cmp	r3, r0
 8008e66:	d148      	bne.n	8008efa <_malloc_r+0xea>
 8008e68:	6823      	ldr	r3, [r4, #0]
 8008e6a:	0028      	movs	r0, r5
 8008e6c:	1aff      	subs	r7, r7, r3
 8008e6e:	0039      	movs	r1, r7
 8008e70:	f7ff ffac 	bl	8008dcc <sbrk_aligned>
 8008e74:	3001      	adds	r0, #1
 8008e76:	d040      	beq.n	8008efa <_malloc_r+0xea>
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	19db      	adds	r3, r3, r7
 8008e7c:	6023      	str	r3, [r4, #0]
 8008e7e:	6833      	ldr	r3, [r6, #0]
 8008e80:	685a      	ldr	r2, [r3, #4]
 8008e82:	2a00      	cmp	r2, #0
 8008e84:	d133      	bne.n	8008eee <_malloc_r+0xde>
 8008e86:	9b00      	ldr	r3, [sp, #0]
 8008e88:	6033      	str	r3, [r6, #0]
 8008e8a:	e019      	b.n	8008ec0 <_malloc_r+0xb0>
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	dac9      	bge.n	8008e24 <_malloc_r+0x14>
 8008e90:	230c      	movs	r3, #12
 8008e92:	602b      	str	r3, [r5, #0]
 8008e94:	2000      	movs	r0, #0
 8008e96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e98:	6821      	ldr	r1, [r4, #0]
 8008e9a:	1bc9      	subs	r1, r1, r7
 8008e9c:	d420      	bmi.n	8008ee0 <_malloc_r+0xd0>
 8008e9e:	290b      	cmp	r1, #11
 8008ea0:	d90a      	bls.n	8008eb8 <_malloc_r+0xa8>
 8008ea2:	19e2      	adds	r2, r4, r7
 8008ea4:	6027      	str	r7, [r4, #0]
 8008ea6:	42a3      	cmp	r3, r4
 8008ea8:	d104      	bne.n	8008eb4 <_malloc_r+0xa4>
 8008eaa:	6032      	str	r2, [r6, #0]
 8008eac:	6863      	ldr	r3, [r4, #4]
 8008eae:	6011      	str	r1, [r2, #0]
 8008eb0:	6053      	str	r3, [r2, #4]
 8008eb2:	e005      	b.n	8008ec0 <_malloc_r+0xb0>
 8008eb4:	605a      	str	r2, [r3, #4]
 8008eb6:	e7f9      	b.n	8008eac <_malloc_r+0x9c>
 8008eb8:	6862      	ldr	r2, [r4, #4]
 8008eba:	42a3      	cmp	r3, r4
 8008ebc:	d10e      	bne.n	8008edc <_malloc_r+0xcc>
 8008ebe:	6032      	str	r2, [r6, #0]
 8008ec0:	0028      	movs	r0, r5
 8008ec2:	f000 f82d 	bl	8008f20 <__malloc_unlock>
 8008ec6:	0020      	movs	r0, r4
 8008ec8:	2207      	movs	r2, #7
 8008eca:	300b      	adds	r0, #11
 8008ecc:	1d23      	adds	r3, r4, #4
 8008ece:	4390      	bics	r0, r2
 8008ed0:	1ac2      	subs	r2, r0, r3
 8008ed2:	4298      	cmp	r0, r3
 8008ed4:	d0df      	beq.n	8008e96 <_malloc_r+0x86>
 8008ed6:	1a1b      	subs	r3, r3, r0
 8008ed8:	50a3      	str	r3, [r4, r2]
 8008eda:	e7dc      	b.n	8008e96 <_malloc_r+0x86>
 8008edc:	605a      	str	r2, [r3, #4]
 8008ede:	e7ef      	b.n	8008ec0 <_malloc_r+0xb0>
 8008ee0:	0023      	movs	r3, r4
 8008ee2:	6864      	ldr	r4, [r4, #4]
 8008ee4:	e7a6      	b.n	8008e34 <_malloc_r+0x24>
 8008ee6:	9c00      	ldr	r4, [sp, #0]
 8008ee8:	6863      	ldr	r3, [r4, #4]
 8008eea:	9300      	str	r3, [sp, #0]
 8008eec:	e7ad      	b.n	8008e4a <_malloc_r+0x3a>
 8008eee:	001a      	movs	r2, r3
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	42a3      	cmp	r3, r4
 8008ef4:	d1fb      	bne.n	8008eee <_malloc_r+0xde>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	e7da      	b.n	8008eb0 <_malloc_r+0xa0>
 8008efa:	230c      	movs	r3, #12
 8008efc:	0028      	movs	r0, r5
 8008efe:	602b      	str	r3, [r5, #0]
 8008f00:	f000 f80e 	bl	8008f20 <__malloc_unlock>
 8008f04:	e7c6      	b.n	8008e94 <_malloc_r+0x84>
 8008f06:	6007      	str	r7, [r0, #0]
 8008f08:	e7da      	b.n	8008ec0 <_malloc_r+0xb0>
 8008f0a:	46c0      	nop			@ (mov r8, r8)
 8008f0c:	200016b0 	.word	0x200016b0

08008f10 <__malloc_lock>:
 8008f10:	b510      	push	{r4, lr}
 8008f12:	4802      	ldr	r0, [pc, #8]	@ (8008f1c <__malloc_lock+0xc>)
 8008f14:	f7ff ff04 	bl	8008d20 <__retarget_lock_acquire_recursive>
 8008f18:	bd10      	pop	{r4, pc}
 8008f1a:	46c0      	nop			@ (mov r8, r8)
 8008f1c:	200016a8 	.word	0x200016a8

08008f20 <__malloc_unlock>:
 8008f20:	b510      	push	{r4, lr}
 8008f22:	4802      	ldr	r0, [pc, #8]	@ (8008f2c <__malloc_unlock+0xc>)
 8008f24:	f7ff fefd 	bl	8008d22 <__retarget_lock_release_recursive>
 8008f28:	bd10      	pop	{r4, pc}
 8008f2a:	46c0      	nop			@ (mov r8, r8)
 8008f2c:	200016a8 	.word	0x200016a8

08008f30 <__ssputs_r>:
 8008f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f32:	688e      	ldr	r6, [r1, #8]
 8008f34:	b085      	sub	sp, #20
 8008f36:	001f      	movs	r7, r3
 8008f38:	000c      	movs	r4, r1
 8008f3a:	680b      	ldr	r3, [r1, #0]
 8008f3c:	9002      	str	r0, [sp, #8]
 8008f3e:	9203      	str	r2, [sp, #12]
 8008f40:	42be      	cmp	r6, r7
 8008f42:	d830      	bhi.n	8008fa6 <__ssputs_r+0x76>
 8008f44:	210c      	movs	r1, #12
 8008f46:	5e62      	ldrsh	r2, [r4, r1]
 8008f48:	2190      	movs	r1, #144	@ 0x90
 8008f4a:	00c9      	lsls	r1, r1, #3
 8008f4c:	420a      	tst	r2, r1
 8008f4e:	d028      	beq.n	8008fa2 <__ssputs_r+0x72>
 8008f50:	2003      	movs	r0, #3
 8008f52:	6921      	ldr	r1, [r4, #16]
 8008f54:	1a5b      	subs	r3, r3, r1
 8008f56:	9301      	str	r3, [sp, #4]
 8008f58:	6963      	ldr	r3, [r4, #20]
 8008f5a:	4343      	muls	r3, r0
 8008f5c:	9801      	ldr	r0, [sp, #4]
 8008f5e:	0fdd      	lsrs	r5, r3, #31
 8008f60:	18ed      	adds	r5, r5, r3
 8008f62:	1c7b      	adds	r3, r7, #1
 8008f64:	181b      	adds	r3, r3, r0
 8008f66:	106d      	asrs	r5, r5, #1
 8008f68:	42ab      	cmp	r3, r5
 8008f6a:	d900      	bls.n	8008f6e <__ssputs_r+0x3e>
 8008f6c:	001d      	movs	r5, r3
 8008f6e:	0552      	lsls	r2, r2, #21
 8008f70:	d528      	bpl.n	8008fc4 <__ssputs_r+0x94>
 8008f72:	0029      	movs	r1, r5
 8008f74:	9802      	ldr	r0, [sp, #8]
 8008f76:	f7ff ff4b 	bl	8008e10 <_malloc_r>
 8008f7a:	1e06      	subs	r6, r0, #0
 8008f7c:	d02c      	beq.n	8008fd8 <__ssputs_r+0xa8>
 8008f7e:	9a01      	ldr	r2, [sp, #4]
 8008f80:	6921      	ldr	r1, [r4, #16]
 8008f82:	f7ff fecf 	bl	8008d24 <memcpy>
 8008f86:	89a2      	ldrh	r2, [r4, #12]
 8008f88:	4b18      	ldr	r3, [pc, #96]	@ (8008fec <__ssputs_r+0xbc>)
 8008f8a:	401a      	ands	r2, r3
 8008f8c:	2380      	movs	r3, #128	@ 0x80
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	81a3      	strh	r3, [r4, #12]
 8008f92:	9b01      	ldr	r3, [sp, #4]
 8008f94:	6126      	str	r6, [r4, #16]
 8008f96:	18f6      	adds	r6, r6, r3
 8008f98:	6026      	str	r6, [r4, #0]
 8008f9a:	003e      	movs	r6, r7
 8008f9c:	6165      	str	r5, [r4, #20]
 8008f9e:	1aed      	subs	r5, r5, r3
 8008fa0:	60a5      	str	r5, [r4, #8]
 8008fa2:	42be      	cmp	r6, r7
 8008fa4:	d900      	bls.n	8008fa8 <__ssputs_r+0x78>
 8008fa6:	003e      	movs	r6, r7
 8008fa8:	0032      	movs	r2, r6
 8008faa:	9903      	ldr	r1, [sp, #12]
 8008fac:	6820      	ldr	r0, [r4, #0]
 8008fae:	f000 fa99 	bl	80094e4 <memmove>
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	68a3      	ldr	r3, [r4, #8]
 8008fb6:	1b9b      	subs	r3, r3, r6
 8008fb8:	60a3      	str	r3, [r4, #8]
 8008fba:	6823      	ldr	r3, [r4, #0]
 8008fbc:	199b      	adds	r3, r3, r6
 8008fbe:	6023      	str	r3, [r4, #0]
 8008fc0:	b005      	add	sp, #20
 8008fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fc4:	002a      	movs	r2, r5
 8008fc6:	9802      	ldr	r0, [sp, #8]
 8008fc8:	f000 fabb 	bl	8009542 <_realloc_r>
 8008fcc:	1e06      	subs	r6, r0, #0
 8008fce:	d1e0      	bne.n	8008f92 <__ssputs_r+0x62>
 8008fd0:	6921      	ldr	r1, [r4, #16]
 8008fd2:	9802      	ldr	r0, [sp, #8]
 8008fd4:	f7ff feb0 	bl	8008d38 <_free_r>
 8008fd8:	230c      	movs	r3, #12
 8008fda:	2001      	movs	r0, #1
 8008fdc:	9a02      	ldr	r2, [sp, #8]
 8008fde:	4240      	negs	r0, r0
 8008fe0:	6013      	str	r3, [r2, #0]
 8008fe2:	89a2      	ldrh	r2, [r4, #12]
 8008fe4:	3334      	adds	r3, #52	@ 0x34
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	81a3      	strh	r3, [r4, #12]
 8008fea:	e7e9      	b.n	8008fc0 <__ssputs_r+0x90>
 8008fec:	fffffb7f 	.word	0xfffffb7f

08008ff0 <_svfiprintf_r>:
 8008ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ff2:	b0a1      	sub	sp, #132	@ 0x84
 8008ff4:	9003      	str	r0, [sp, #12]
 8008ff6:	001d      	movs	r5, r3
 8008ff8:	898b      	ldrh	r3, [r1, #12]
 8008ffa:	000f      	movs	r7, r1
 8008ffc:	0016      	movs	r6, r2
 8008ffe:	061b      	lsls	r3, r3, #24
 8009000:	d511      	bpl.n	8009026 <_svfiprintf_r+0x36>
 8009002:	690b      	ldr	r3, [r1, #16]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d10e      	bne.n	8009026 <_svfiprintf_r+0x36>
 8009008:	2140      	movs	r1, #64	@ 0x40
 800900a:	f7ff ff01 	bl	8008e10 <_malloc_r>
 800900e:	6038      	str	r0, [r7, #0]
 8009010:	6138      	str	r0, [r7, #16]
 8009012:	2800      	cmp	r0, #0
 8009014:	d105      	bne.n	8009022 <_svfiprintf_r+0x32>
 8009016:	230c      	movs	r3, #12
 8009018:	9a03      	ldr	r2, [sp, #12]
 800901a:	6013      	str	r3, [r2, #0]
 800901c:	2001      	movs	r0, #1
 800901e:	4240      	negs	r0, r0
 8009020:	e0cf      	b.n	80091c2 <_svfiprintf_r+0x1d2>
 8009022:	2340      	movs	r3, #64	@ 0x40
 8009024:	617b      	str	r3, [r7, #20]
 8009026:	2300      	movs	r3, #0
 8009028:	ac08      	add	r4, sp, #32
 800902a:	6163      	str	r3, [r4, #20]
 800902c:	3320      	adds	r3, #32
 800902e:	7663      	strb	r3, [r4, #25]
 8009030:	3310      	adds	r3, #16
 8009032:	76a3      	strb	r3, [r4, #26]
 8009034:	9507      	str	r5, [sp, #28]
 8009036:	0035      	movs	r5, r6
 8009038:	782b      	ldrb	r3, [r5, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d001      	beq.n	8009042 <_svfiprintf_r+0x52>
 800903e:	2b25      	cmp	r3, #37	@ 0x25
 8009040:	d148      	bne.n	80090d4 <_svfiprintf_r+0xe4>
 8009042:	1bab      	subs	r3, r5, r6
 8009044:	9305      	str	r3, [sp, #20]
 8009046:	42b5      	cmp	r5, r6
 8009048:	d00b      	beq.n	8009062 <_svfiprintf_r+0x72>
 800904a:	0032      	movs	r2, r6
 800904c:	0039      	movs	r1, r7
 800904e:	9803      	ldr	r0, [sp, #12]
 8009050:	f7ff ff6e 	bl	8008f30 <__ssputs_r>
 8009054:	3001      	adds	r0, #1
 8009056:	d100      	bne.n	800905a <_svfiprintf_r+0x6a>
 8009058:	e0ae      	b.n	80091b8 <_svfiprintf_r+0x1c8>
 800905a:	6963      	ldr	r3, [r4, #20]
 800905c:	9a05      	ldr	r2, [sp, #20]
 800905e:	189b      	adds	r3, r3, r2
 8009060:	6163      	str	r3, [r4, #20]
 8009062:	782b      	ldrb	r3, [r5, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d100      	bne.n	800906a <_svfiprintf_r+0x7a>
 8009068:	e0a6      	b.n	80091b8 <_svfiprintf_r+0x1c8>
 800906a:	2201      	movs	r2, #1
 800906c:	2300      	movs	r3, #0
 800906e:	4252      	negs	r2, r2
 8009070:	6062      	str	r2, [r4, #4]
 8009072:	a904      	add	r1, sp, #16
 8009074:	3254      	adds	r2, #84	@ 0x54
 8009076:	1852      	adds	r2, r2, r1
 8009078:	1c6e      	adds	r6, r5, #1
 800907a:	6023      	str	r3, [r4, #0]
 800907c:	60e3      	str	r3, [r4, #12]
 800907e:	60a3      	str	r3, [r4, #8]
 8009080:	7013      	strb	r3, [r2, #0]
 8009082:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009084:	4b54      	ldr	r3, [pc, #336]	@ (80091d8 <_svfiprintf_r+0x1e8>)
 8009086:	2205      	movs	r2, #5
 8009088:	0018      	movs	r0, r3
 800908a:	7831      	ldrb	r1, [r6, #0]
 800908c:	9305      	str	r3, [sp, #20]
 800908e:	f000 fa4d 	bl	800952c <memchr>
 8009092:	1c75      	adds	r5, r6, #1
 8009094:	2800      	cmp	r0, #0
 8009096:	d11f      	bne.n	80090d8 <_svfiprintf_r+0xe8>
 8009098:	6822      	ldr	r2, [r4, #0]
 800909a:	06d3      	lsls	r3, r2, #27
 800909c:	d504      	bpl.n	80090a8 <_svfiprintf_r+0xb8>
 800909e:	2353      	movs	r3, #83	@ 0x53
 80090a0:	a904      	add	r1, sp, #16
 80090a2:	185b      	adds	r3, r3, r1
 80090a4:	2120      	movs	r1, #32
 80090a6:	7019      	strb	r1, [r3, #0]
 80090a8:	0713      	lsls	r3, r2, #28
 80090aa:	d504      	bpl.n	80090b6 <_svfiprintf_r+0xc6>
 80090ac:	2353      	movs	r3, #83	@ 0x53
 80090ae:	a904      	add	r1, sp, #16
 80090b0:	185b      	adds	r3, r3, r1
 80090b2:	212b      	movs	r1, #43	@ 0x2b
 80090b4:	7019      	strb	r1, [r3, #0]
 80090b6:	7833      	ldrb	r3, [r6, #0]
 80090b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80090ba:	d016      	beq.n	80090ea <_svfiprintf_r+0xfa>
 80090bc:	0035      	movs	r5, r6
 80090be:	2100      	movs	r1, #0
 80090c0:	200a      	movs	r0, #10
 80090c2:	68e3      	ldr	r3, [r4, #12]
 80090c4:	782a      	ldrb	r2, [r5, #0]
 80090c6:	1c6e      	adds	r6, r5, #1
 80090c8:	3a30      	subs	r2, #48	@ 0x30
 80090ca:	2a09      	cmp	r2, #9
 80090cc:	d950      	bls.n	8009170 <_svfiprintf_r+0x180>
 80090ce:	2900      	cmp	r1, #0
 80090d0:	d111      	bne.n	80090f6 <_svfiprintf_r+0x106>
 80090d2:	e017      	b.n	8009104 <_svfiprintf_r+0x114>
 80090d4:	3501      	adds	r5, #1
 80090d6:	e7af      	b.n	8009038 <_svfiprintf_r+0x48>
 80090d8:	9b05      	ldr	r3, [sp, #20]
 80090da:	6822      	ldr	r2, [r4, #0]
 80090dc:	1ac0      	subs	r0, r0, r3
 80090de:	2301      	movs	r3, #1
 80090e0:	4083      	lsls	r3, r0
 80090e2:	4313      	orrs	r3, r2
 80090e4:	002e      	movs	r6, r5
 80090e6:	6023      	str	r3, [r4, #0]
 80090e8:	e7cc      	b.n	8009084 <_svfiprintf_r+0x94>
 80090ea:	9b07      	ldr	r3, [sp, #28]
 80090ec:	1d19      	adds	r1, r3, #4
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	9107      	str	r1, [sp, #28]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	db01      	blt.n	80090fa <_svfiprintf_r+0x10a>
 80090f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090f8:	e004      	b.n	8009104 <_svfiprintf_r+0x114>
 80090fa:	425b      	negs	r3, r3
 80090fc:	60e3      	str	r3, [r4, #12]
 80090fe:	2302      	movs	r3, #2
 8009100:	4313      	orrs	r3, r2
 8009102:	6023      	str	r3, [r4, #0]
 8009104:	782b      	ldrb	r3, [r5, #0]
 8009106:	2b2e      	cmp	r3, #46	@ 0x2e
 8009108:	d10c      	bne.n	8009124 <_svfiprintf_r+0x134>
 800910a:	786b      	ldrb	r3, [r5, #1]
 800910c:	2b2a      	cmp	r3, #42	@ 0x2a
 800910e:	d134      	bne.n	800917a <_svfiprintf_r+0x18a>
 8009110:	9b07      	ldr	r3, [sp, #28]
 8009112:	3502      	adds	r5, #2
 8009114:	1d1a      	adds	r2, r3, #4
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	9207      	str	r2, [sp, #28]
 800911a:	2b00      	cmp	r3, #0
 800911c:	da01      	bge.n	8009122 <_svfiprintf_r+0x132>
 800911e:	2301      	movs	r3, #1
 8009120:	425b      	negs	r3, r3
 8009122:	9309      	str	r3, [sp, #36]	@ 0x24
 8009124:	4e2d      	ldr	r6, [pc, #180]	@ (80091dc <_svfiprintf_r+0x1ec>)
 8009126:	2203      	movs	r2, #3
 8009128:	0030      	movs	r0, r6
 800912a:	7829      	ldrb	r1, [r5, #0]
 800912c:	f000 f9fe 	bl	800952c <memchr>
 8009130:	2800      	cmp	r0, #0
 8009132:	d006      	beq.n	8009142 <_svfiprintf_r+0x152>
 8009134:	2340      	movs	r3, #64	@ 0x40
 8009136:	1b80      	subs	r0, r0, r6
 8009138:	4083      	lsls	r3, r0
 800913a:	6822      	ldr	r2, [r4, #0]
 800913c:	3501      	adds	r5, #1
 800913e:	4313      	orrs	r3, r2
 8009140:	6023      	str	r3, [r4, #0]
 8009142:	7829      	ldrb	r1, [r5, #0]
 8009144:	2206      	movs	r2, #6
 8009146:	4826      	ldr	r0, [pc, #152]	@ (80091e0 <_svfiprintf_r+0x1f0>)
 8009148:	1c6e      	adds	r6, r5, #1
 800914a:	7621      	strb	r1, [r4, #24]
 800914c:	f000 f9ee 	bl	800952c <memchr>
 8009150:	2800      	cmp	r0, #0
 8009152:	d038      	beq.n	80091c6 <_svfiprintf_r+0x1d6>
 8009154:	4b23      	ldr	r3, [pc, #140]	@ (80091e4 <_svfiprintf_r+0x1f4>)
 8009156:	2b00      	cmp	r3, #0
 8009158:	d122      	bne.n	80091a0 <_svfiprintf_r+0x1b0>
 800915a:	2207      	movs	r2, #7
 800915c:	9b07      	ldr	r3, [sp, #28]
 800915e:	3307      	adds	r3, #7
 8009160:	4393      	bics	r3, r2
 8009162:	3308      	adds	r3, #8
 8009164:	9307      	str	r3, [sp, #28]
 8009166:	6963      	ldr	r3, [r4, #20]
 8009168:	9a04      	ldr	r2, [sp, #16]
 800916a:	189b      	adds	r3, r3, r2
 800916c:	6163      	str	r3, [r4, #20]
 800916e:	e762      	b.n	8009036 <_svfiprintf_r+0x46>
 8009170:	4343      	muls	r3, r0
 8009172:	0035      	movs	r5, r6
 8009174:	2101      	movs	r1, #1
 8009176:	189b      	adds	r3, r3, r2
 8009178:	e7a4      	b.n	80090c4 <_svfiprintf_r+0xd4>
 800917a:	2300      	movs	r3, #0
 800917c:	200a      	movs	r0, #10
 800917e:	0019      	movs	r1, r3
 8009180:	3501      	adds	r5, #1
 8009182:	6063      	str	r3, [r4, #4]
 8009184:	782a      	ldrb	r2, [r5, #0]
 8009186:	1c6e      	adds	r6, r5, #1
 8009188:	3a30      	subs	r2, #48	@ 0x30
 800918a:	2a09      	cmp	r2, #9
 800918c:	d903      	bls.n	8009196 <_svfiprintf_r+0x1a6>
 800918e:	2b00      	cmp	r3, #0
 8009190:	d0c8      	beq.n	8009124 <_svfiprintf_r+0x134>
 8009192:	9109      	str	r1, [sp, #36]	@ 0x24
 8009194:	e7c6      	b.n	8009124 <_svfiprintf_r+0x134>
 8009196:	4341      	muls	r1, r0
 8009198:	0035      	movs	r5, r6
 800919a:	2301      	movs	r3, #1
 800919c:	1889      	adds	r1, r1, r2
 800919e:	e7f1      	b.n	8009184 <_svfiprintf_r+0x194>
 80091a0:	aa07      	add	r2, sp, #28
 80091a2:	9200      	str	r2, [sp, #0]
 80091a4:	0021      	movs	r1, r4
 80091a6:	003a      	movs	r2, r7
 80091a8:	4b0f      	ldr	r3, [pc, #60]	@ (80091e8 <_svfiprintf_r+0x1f8>)
 80091aa:	9803      	ldr	r0, [sp, #12]
 80091ac:	e000      	b.n	80091b0 <_svfiprintf_r+0x1c0>
 80091ae:	bf00      	nop
 80091b0:	9004      	str	r0, [sp, #16]
 80091b2:	9b04      	ldr	r3, [sp, #16]
 80091b4:	3301      	adds	r3, #1
 80091b6:	d1d6      	bne.n	8009166 <_svfiprintf_r+0x176>
 80091b8:	89bb      	ldrh	r3, [r7, #12]
 80091ba:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80091bc:	065b      	lsls	r3, r3, #25
 80091be:	d500      	bpl.n	80091c2 <_svfiprintf_r+0x1d2>
 80091c0:	e72c      	b.n	800901c <_svfiprintf_r+0x2c>
 80091c2:	b021      	add	sp, #132	@ 0x84
 80091c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091c6:	aa07      	add	r2, sp, #28
 80091c8:	9200      	str	r2, [sp, #0]
 80091ca:	0021      	movs	r1, r4
 80091cc:	003a      	movs	r2, r7
 80091ce:	4b06      	ldr	r3, [pc, #24]	@ (80091e8 <_svfiprintf_r+0x1f8>)
 80091d0:	9803      	ldr	r0, [sp, #12]
 80091d2:	f000 f87b 	bl	80092cc <_printf_i>
 80091d6:	e7eb      	b.n	80091b0 <_svfiprintf_r+0x1c0>
 80091d8:	0800a068 	.word	0x0800a068
 80091dc:	0800a06e 	.word	0x0800a06e
 80091e0:	0800a072 	.word	0x0800a072
 80091e4:	00000000 	.word	0x00000000
 80091e8:	08008f31 	.word	0x08008f31

080091ec <_printf_common>:
 80091ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091ee:	0016      	movs	r6, r2
 80091f0:	9301      	str	r3, [sp, #4]
 80091f2:	688a      	ldr	r2, [r1, #8]
 80091f4:	690b      	ldr	r3, [r1, #16]
 80091f6:	000c      	movs	r4, r1
 80091f8:	9000      	str	r0, [sp, #0]
 80091fa:	4293      	cmp	r3, r2
 80091fc:	da00      	bge.n	8009200 <_printf_common+0x14>
 80091fe:	0013      	movs	r3, r2
 8009200:	0022      	movs	r2, r4
 8009202:	6033      	str	r3, [r6, #0]
 8009204:	3243      	adds	r2, #67	@ 0x43
 8009206:	7812      	ldrb	r2, [r2, #0]
 8009208:	2a00      	cmp	r2, #0
 800920a:	d001      	beq.n	8009210 <_printf_common+0x24>
 800920c:	3301      	adds	r3, #1
 800920e:	6033      	str	r3, [r6, #0]
 8009210:	6823      	ldr	r3, [r4, #0]
 8009212:	069b      	lsls	r3, r3, #26
 8009214:	d502      	bpl.n	800921c <_printf_common+0x30>
 8009216:	6833      	ldr	r3, [r6, #0]
 8009218:	3302      	adds	r3, #2
 800921a:	6033      	str	r3, [r6, #0]
 800921c:	6822      	ldr	r2, [r4, #0]
 800921e:	2306      	movs	r3, #6
 8009220:	0015      	movs	r5, r2
 8009222:	401d      	ands	r5, r3
 8009224:	421a      	tst	r2, r3
 8009226:	d027      	beq.n	8009278 <_printf_common+0x8c>
 8009228:	0023      	movs	r3, r4
 800922a:	3343      	adds	r3, #67	@ 0x43
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	1e5a      	subs	r2, r3, #1
 8009230:	4193      	sbcs	r3, r2
 8009232:	6822      	ldr	r2, [r4, #0]
 8009234:	0692      	lsls	r2, r2, #26
 8009236:	d430      	bmi.n	800929a <_printf_common+0xae>
 8009238:	0022      	movs	r2, r4
 800923a:	9901      	ldr	r1, [sp, #4]
 800923c:	9800      	ldr	r0, [sp, #0]
 800923e:	9d08      	ldr	r5, [sp, #32]
 8009240:	3243      	adds	r2, #67	@ 0x43
 8009242:	47a8      	blx	r5
 8009244:	3001      	adds	r0, #1
 8009246:	d025      	beq.n	8009294 <_printf_common+0xa8>
 8009248:	2206      	movs	r2, #6
 800924a:	6823      	ldr	r3, [r4, #0]
 800924c:	2500      	movs	r5, #0
 800924e:	4013      	ands	r3, r2
 8009250:	2b04      	cmp	r3, #4
 8009252:	d105      	bne.n	8009260 <_printf_common+0x74>
 8009254:	6833      	ldr	r3, [r6, #0]
 8009256:	68e5      	ldr	r5, [r4, #12]
 8009258:	1aed      	subs	r5, r5, r3
 800925a:	43eb      	mvns	r3, r5
 800925c:	17db      	asrs	r3, r3, #31
 800925e:	401d      	ands	r5, r3
 8009260:	68a3      	ldr	r3, [r4, #8]
 8009262:	6922      	ldr	r2, [r4, #16]
 8009264:	4293      	cmp	r3, r2
 8009266:	dd01      	ble.n	800926c <_printf_common+0x80>
 8009268:	1a9b      	subs	r3, r3, r2
 800926a:	18ed      	adds	r5, r5, r3
 800926c:	2600      	movs	r6, #0
 800926e:	42b5      	cmp	r5, r6
 8009270:	d120      	bne.n	80092b4 <_printf_common+0xc8>
 8009272:	2000      	movs	r0, #0
 8009274:	e010      	b.n	8009298 <_printf_common+0xac>
 8009276:	3501      	adds	r5, #1
 8009278:	68e3      	ldr	r3, [r4, #12]
 800927a:	6832      	ldr	r2, [r6, #0]
 800927c:	1a9b      	subs	r3, r3, r2
 800927e:	42ab      	cmp	r3, r5
 8009280:	ddd2      	ble.n	8009228 <_printf_common+0x3c>
 8009282:	0022      	movs	r2, r4
 8009284:	2301      	movs	r3, #1
 8009286:	9901      	ldr	r1, [sp, #4]
 8009288:	9800      	ldr	r0, [sp, #0]
 800928a:	9f08      	ldr	r7, [sp, #32]
 800928c:	3219      	adds	r2, #25
 800928e:	47b8      	blx	r7
 8009290:	3001      	adds	r0, #1
 8009292:	d1f0      	bne.n	8009276 <_printf_common+0x8a>
 8009294:	2001      	movs	r0, #1
 8009296:	4240      	negs	r0, r0
 8009298:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800929a:	2030      	movs	r0, #48	@ 0x30
 800929c:	18e1      	adds	r1, r4, r3
 800929e:	3143      	adds	r1, #67	@ 0x43
 80092a0:	7008      	strb	r0, [r1, #0]
 80092a2:	0021      	movs	r1, r4
 80092a4:	1c5a      	adds	r2, r3, #1
 80092a6:	3145      	adds	r1, #69	@ 0x45
 80092a8:	7809      	ldrb	r1, [r1, #0]
 80092aa:	18a2      	adds	r2, r4, r2
 80092ac:	3243      	adds	r2, #67	@ 0x43
 80092ae:	3302      	adds	r3, #2
 80092b0:	7011      	strb	r1, [r2, #0]
 80092b2:	e7c1      	b.n	8009238 <_printf_common+0x4c>
 80092b4:	0022      	movs	r2, r4
 80092b6:	2301      	movs	r3, #1
 80092b8:	9901      	ldr	r1, [sp, #4]
 80092ba:	9800      	ldr	r0, [sp, #0]
 80092bc:	9f08      	ldr	r7, [sp, #32]
 80092be:	321a      	adds	r2, #26
 80092c0:	47b8      	blx	r7
 80092c2:	3001      	adds	r0, #1
 80092c4:	d0e6      	beq.n	8009294 <_printf_common+0xa8>
 80092c6:	3601      	adds	r6, #1
 80092c8:	e7d1      	b.n	800926e <_printf_common+0x82>
	...

080092cc <_printf_i>:
 80092cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092ce:	b08b      	sub	sp, #44	@ 0x2c
 80092d0:	9206      	str	r2, [sp, #24]
 80092d2:	000a      	movs	r2, r1
 80092d4:	3243      	adds	r2, #67	@ 0x43
 80092d6:	9307      	str	r3, [sp, #28]
 80092d8:	9005      	str	r0, [sp, #20]
 80092da:	9203      	str	r2, [sp, #12]
 80092dc:	7e0a      	ldrb	r2, [r1, #24]
 80092de:	000c      	movs	r4, r1
 80092e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80092e2:	2a78      	cmp	r2, #120	@ 0x78
 80092e4:	d809      	bhi.n	80092fa <_printf_i+0x2e>
 80092e6:	2a62      	cmp	r2, #98	@ 0x62
 80092e8:	d80b      	bhi.n	8009302 <_printf_i+0x36>
 80092ea:	2a00      	cmp	r2, #0
 80092ec:	d100      	bne.n	80092f0 <_printf_i+0x24>
 80092ee:	e0ba      	b.n	8009466 <_printf_i+0x19a>
 80092f0:	497a      	ldr	r1, [pc, #488]	@ (80094dc <_printf_i+0x210>)
 80092f2:	9104      	str	r1, [sp, #16]
 80092f4:	2a58      	cmp	r2, #88	@ 0x58
 80092f6:	d100      	bne.n	80092fa <_printf_i+0x2e>
 80092f8:	e08e      	b.n	8009418 <_printf_i+0x14c>
 80092fa:	0025      	movs	r5, r4
 80092fc:	3542      	adds	r5, #66	@ 0x42
 80092fe:	702a      	strb	r2, [r5, #0]
 8009300:	e022      	b.n	8009348 <_printf_i+0x7c>
 8009302:	0010      	movs	r0, r2
 8009304:	3863      	subs	r0, #99	@ 0x63
 8009306:	2815      	cmp	r0, #21
 8009308:	d8f7      	bhi.n	80092fa <_printf_i+0x2e>
 800930a:	f7f6 ff03 	bl	8000114 <__gnu_thumb1_case_shi>
 800930e:	0016      	.short	0x0016
 8009310:	fff6001f 	.word	0xfff6001f
 8009314:	fff6fff6 	.word	0xfff6fff6
 8009318:	001ffff6 	.word	0x001ffff6
 800931c:	fff6fff6 	.word	0xfff6fff6
 8009320:	fff6fff6 	.word	0xfff6fff6
 8009324:	0036009f 	.word	0x0036009f
 8009328:	fff6007e 	.word	0xfff6007e
 800932c:	00b0fff6 	.word	0x00b0fff6
 8009330:	0036fff6 	.word	0x0036fff6
 8009334:	fff6fff6 	.word	0xfff6fff6
 8009338:	0082      	.short	0x0082
 800933a:	0025      	movs	r5, r4
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	3542      	adds	r5, #66	@ 0x42
 8009340:	1d11      	adds	r1, r2, #4
 8009342:	6019      	str	r1, [r3, #0]
 8009344:	6813      	ldr	r3, [r2, #0]
 8009346:	702b      	strb	r3, [r5, #0]
 8009348:	2301      	movs	r3, #1
 800934a:	e09e      	b.n	800948a <_printf_i+0x1be>
 800934c:	6818      	ldr	r0, [r3, #0]
 800934e:	6809      	ldr	r1, [r1, #0]
 8009350:	1d02      	adds	r2, r0, #4
 8009352:	060d      	lsls	r5, r1, #24
 8009354:	d50b      	bpl.n	800936e <_printf_i+0xa2>
 8009356:	6806      	ldr	r6, [r0, #0]
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	2e00      	cmp	r6, #0
 800935c:	da03      	bge.n	8009366 <_printf_i+0x9a>
 800935e:	232d      	movs	r3, #45	@ 0x2d
 8009360:	9a03      	ldr	r2, [sp, #12]
 8009362:	4276      	negs	r6, r6
 8009364:	7013      	strb	r3, [r2, #0]
 8009366:	4b5d      	ldr	r3, [pc, #372]	@ (80094dc <_printf_i+0x210>)
 8009368:	270a      	movs	r7, #10
 800936a:	9304      	str	r3, [sp, #16]
 800936c:	e018      	b.n	80093a0 <_printf_i+0xd4>
 800936e:	6806      	ldr	r6, [r0, #0]
 8009370:	601a      	str	r2, [r3, #0]
 8009372:	0649      	lsls	r1, r1, #25
 8009374:	d5f1      	bpl.n	800935a <_printf_i+0x8e>
 8009376:	b236      	sxth	r6, r6
 8009378:	e7ef      	b.n	800935a <_printf_i+0x8e>
 800937a:	6808      	ldr	r0, [r1, #0]
 800937c:	6819      	ldr	r1, [r3, #0]
 800937e:	c940      	ldmia	r1!, {r6}
 8009380:	0605      	lsls	r5, r0, #24
 8009382:	d402      	bmi.n	800938a <_printf_i+0xbe>
 8009384:	0640      	lsls	r0, r0, #25
 8009386:	d500      	bpl.n	800938a <_printf_i+0xbe>
 8009388:	b2b6      	uxth	r6, r6
 800938a:	6019      	str	r1, [r3, #0]
 800938c:	4b53      	ldr	r3, [pc, #332]	@ (80094dc <_printf_i+0x210>)
 800938e:	270a      	movs	r7, #10
 8009390:	9304      	str	r3, [sp, #16]
 8009392:	2a6f      	cmp	r2, #111	@ 0x6f
 8009394:	d100      	bne.n	8009398 <_printf_i+0xcc>
 8009396:	3f02      	subs	r7, #2
 8009398:	0023      	movs	r3, r4
 800939a:	2200      	movs	r2, #0
 800939c:	3343      	adds	r3, #67	@ 0x43
 800939e:	701a      	strb	r2, [r3, #0]
 80093a0:	6863      	ldr	r3, [r4, #4]
 80093a2:	60a3      	str	r3, [r4, #8]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	db06      	blt.n	80093b6 <_printf_i+0xea>
 80093a8:	2104      	movs	r1, #4
 80093aa:	6822      	ldr	r2, [r4, #0]
 80093ac:	9d03      	ldr	r5, [sp, #12]
 80093ae:	438a      	bics	r2, r1
 80093b0:	6022      	str	r2, [r4, #0]
 80093b2:	4333      	orrs	r3, r6
 80093b4:	d00c      	beq.n	80093d0 <_printf_i+0x104>
 80093b6:	9d03      	ldr	r5, [sp, #12]
 80093b8:	0030      	movs	r0, r6
 80093ba:	0039      	movs	r1, r7
 80093bc:	f7f6 ff3a 	bl	8000234 <__aeabi_uidivmod>
 80093c0:	9b04      	ldr	r3, [sp, #16]
 80093c2:	3d01      	subs	r5, #1
 80093c4:	5c5b      	ldrb	r3, [r3, r1]
 80093c6:	702b      	strb	r3, [r5, #0]
 80093c8:	0033      	movs	r3, r6
 80093ca:	0006      	movs	r6, r0
 80093cc:	429f      	cmp	r7, r3
 80093ce:	d9f3      	bls.n	80093b8 <_printf_i+0xec>
 80093d0:	2f08      	cmp	r7, #8
 80093d2:	d109      	bne.n	80093e8 <_printf_i+0x11c>
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	07db      	lsls	r3, r3, #31
 80093d8:	d506      	bpl.n	80093e8 <_printf_i+0x11c>
 80093da:	6862      	ldr	r2, [r4, #4]
 80093dc:	6923      	ldr	r3, [r4, #16]
 80093de:	429a      	cmp	r2, r3
 80093e0:	dc02      	bgt.n	80093e8 <_printf_i+0x11c>
 80093e2:	2330      	movs	r3, #48	@ 0x30
 80093e4:	3d01      	subs	r5, #1
 80093e6:	702b      	strb	r3, [r5, #0]
 80093e8:	9b03      	ldr	r3, [sp, #12]
 80093ea:	1b5b      	subs	r3, r3, r5
 80093ec:	6123      	str	r3, [r4, #16]
 80093ee:	9b07      	ldr	r3, [sp, #28]
 80093f0:	0021      	movs	r1, r4
 80093f2:	9300      	str	r3, [sp, #0]
 80093f4:	9805      	ldr	r0, [sp, #20]
 80093f6:	9b06      	ldr	r3, [sp, #24]
 80093f8:	aa09      	add	r2, sp, #36	@ 0x24
 80093fa:	f7ff fef7 	bl	80091ec <_printf_common>
 80093fe:	3001      	adds	r0, #1
 8009400:	d148      	bne.n	8009494 <_printf_i+0x1c8>
 8009402:	2001      	movs	r0, #1
 8009404:	4240      	negs	r0, r0
 8009406:	b00b      	add	sp, #44	@ 0x2c
 8009408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800940a:	2220      	movs	r2, #32
 800940c:	6809      	ldr	r1, [r1, #0]
 800940e:	430a      	orrs	r2, r1
 8009410:	6022      	str	r2, [r4, #0]
 8009412:	2278      	movs	r2, #120	@ 0x78
 8009414:	4932      	ldr	r1, [pc, #200]	@ (80094e0 <_printf_i+0x214>)
 8009416:	9104      	str	r1, [sp, #16]
 8009418:	0021      	movs	r1, r4
 800941a:	3145      	adds	r1, #69	@ 0x45
 800941c:	700a      	strb	r2, [r1, #0]
 800941e:	6819      	ldr	r1, [r3, #0]
 8009420:	6822      	ldr	r2, [r4, #0]
 8009422:	c940      	ldmia	r1!, {r6}
 8009424:	0610      	lsls	r0, r2, #24
 8009426:	d402      	bmi.n	800942e <_printf_i+0x162>
 8009428:	0650      	lsls	r0, r2, #25
 800942a:	d500      	bpl.n	800942e <_printf_i+0x162>
 800942c:	b2b6      	uxth	r6, r6
 800942e:	6019      	str	r1, [r3, #0]
 8009430:	07d3      	lsls	r3, r2, #31
 8009432:	d502      	bpl.n	800943a <_printf_i+0x16e>
 8009434:	2320      	movs	r3, #32
 8009436:	4313      	orrs	r3, r2
 8009438:	6023      	str	r3, [r4, #0]
 800943a:	2e00      	cmp	r6, #0
 800943c:	d001      	beq.n	8009442 <_printf_i+0x176>
 800943e:	2710      	movs	r7, #16
 8009440:	e7aa      	b.n	8009398 <_printf_i+0xcc>
 8009442:	2220      	movs	r2, #32
 8009444:	6823      	ldr	r3, [r4, #0]
 8009446:	4393      	bics	r3, r2
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	e7f8      	b.n	800943e <_printf_i+0x172>
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	680d      	ldr	r5, [r1, #0]
 8009450:	1d10      	adds	r0, r2, #4
 8009452:	6949      	ldr	r1, [r1, #20]
 8009454:	6018      	str	r0, [r3, #0]
 8009456:	6813      	ldr	r3, [r2, #0]
 8009458:	062e      	lsls	r6, r5, #24
 800945a:	d501      	bpl.n	8009460 <_printf_i+0x194>
 800945c:	6019      	str	r1, [r3, #0]
 800945e:	e002      	b.n	8009466 <_printf_i+0x19a>
 8009460:	066d      	lsls	r5, r5, #25
 8009462:	d5fb      	bpl.n	800945c <_printf_i+0x190>
 8009464:	8019      	strh	r1, [r3, #0]
 8009466:	2300      	movs	r3, #0
 8009468:	9d03      	ldr	r5, [sp, #12]
 800946a:	6123      	str	r3, [r4, #16]
 800946c:	e7bf      	b.n	80093ee <_printf_i+0x122>
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	1d11      	adds	r1, r2, #4
 8009472:	6019      	str	r1, [r3, #0]
 8009474:	6815      	ldr	r5, [r2, #0]
 8009476:	2100      	movs	r1, #0
 8009478:	0028      	movs	r0, r5
 800947a:	6862      	ldr	r2, [r4, #4]
 800947c:	f000 f856 	bl	800952c <memchr>
 8009480:	2800      	cmp	r0, #0
 8009482:	d001      	beq.n	8009488 <_printf_i+0x1bc>
 8009484:	1b40      	subs	r0, r0, r5
 8009486:	6060      	str	r0, [r4, #4]
 8009488:	6863      	ldr	r3, [r4, #4]
 800948a:	6123      	str	r3, [r4, #16]
 800948c:	2300      	movs	r3, #0
 800948e:	9a03      	ldr	r2, [sp, #12]
 8009490:	7013      	strb	r3, [r2, #0]
 8009492:	e7ac      	b.n	80093ee <_printf_i+0x122>
 8009494:	002a      	movs	r2, r5
 8009496:	6923      	ldr	r3, [r4, #16]
 8009498:	9906      	ldr	r1, [sp, #24]
 800949a:	9805      	ldr	r0, [sp, #20]
 800949c:	9d07      	ldr	r5, [sp, #28]
 800949e:	47a8      	blx	r5
 80094a0:	3001      	adds	r0, #1
 80094a2:	d0ae      	beq.n	8009402 <_printf_i+0x136>
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	079b      	lsls	r3, r3, #30
 80094a8:	d415      	bmi.n	80094d6 <_printf_i+0x20a>
 80094aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094ac:	68e0      	ldr	r0, [r4, #12]
 80094ae:	4298      	cmp	r0, r3
 80094b0:	daa9      	bge.n	8009406 <_printf_i+0x13a>
 80094b2:	0018      	movs	r0, r3
 80094b4:	e7a7      	b.n	8009406 <_printf_i+0x13a>
 80094b6:	0022      	movs	r2, r4
 80094b8:	2301      	movs	r3, #1
 80094ba:	9906      	ldr	r1, [sp, #24]
 80094bc:	9805      	ldr	r0, [sp, #20]
 80094be:	9e07      	ldr	r6, [sp, #28]
 80094c0:	3219      	adds	r2, #25
 80094c2:	47b0      	blx	r6
 80094c4:	3001      	adds	r0, #1
 80094c6:	d09c      	beq.n	8009402 <_printf_i+0x136>
 80094c8:	3501      	adds	r5, #1
 80094ca:	68e3      	ldr	r3, [r4, #12]
 80094cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094ce:	1a9b      	subs	r3, r3, r2
 80094d0:	42ab      	cmp	r3, r5
 80094d2:	dcf0      	bgt.n	80094b6 <_printf_i+0x1ea>
 80094d4:	e7e9      	b.n	80094aa <_printf_i+0x1de>
 80094d6:	2500      	movs	r5, #0
 80094d8:	e7f7      	b.n	80094ca <_printf_i+0x1fe>
 80094da:	46c0      	nop			@ (mov r8, r8)
 80094dc:	0800a079 	.word	0x0800a079
 80094e0:	0800a08a 	.word	0x0800a08a

080094e4 <memmove>:
 80094e4:	b510      	push	{r4, lr}
 80094e6:	4288      	cmp	r0, r1
 80094e8:	d902      	bls.n	80094f0 <memmove+0xc>
 80094ea:	188b      	adds	r3, r1, r2
 80094ec:	4298      	cmp	r0, r3
 80094ee:	d308      	bcc.n	8009502 <memmove+0x1e>
 80094f0:	2300      	movs	r3, #0
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d007      	beq.n	8009506 <memmove+0x22>
 80094f6:	5ccc      	ldrb	r4, [r1, r3]
 80094f8:	54c4      	strb	r4, [r0, r3]
 80094fa:	3301      	adds	r3, #1
 80094fc:	e7f9      	b.n	80094f2 <memmove+0xe>
 80094fe:	5c8b      	ldrb	r3, [r1, r2]
 8009500:	5483      	strb	r3, [r0, r2]
 8009502:	3a01      	subs	r2, #1
 8009504:	d2fb      	bcs.n	80094fe <memmove+0x1a>
 8009506:	bd10      	pop	{r4, pc}

08009508 <_sbrk_r>:
 8009508:	2300      	movs	r3, #0
 800950a:	b570      	push	{r4, r5, r6, lr}
 800950c:	4d06      	ldr	r5, [pc, #24]	@ (8009528 <_sbrk_r+0x20>)
 800950e:	0004      	movs	r4, r0
 8009510:	0008      	movs	r0, r1
 8009512:	602b      	str	r3, [r5, #0]
 8009514:	f7fa fd26 	bl	8003f64 <_sbrk>
 8009518:	1c43      	adds	r3, r0, #1
 800951a:	d103      	bne.n	8009524 <_sbrk_r+0x1c>
 800951c:	682b      	ldr	r3, [r5, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d000      	beq.n	8009524 <_sbrk_r+0x1c>
 8009522:	6023      	str	r3, [r4, #0]
 8009524:	bd70      	pop	{r4, r5, r6, pc}
 8009526:	46c0      	nop			@ (mov r8, r8)
 8009528:	200016a4 	.word	0x200016a4

0800952c <memchr>:
 800952c:	b2c9      	uxtb	r1, r1
 800952e:	1882      	adds	r2, r0, r2
 8009530:	4290      	cmp	r0, r2
 8009532:	d101      	bne.n	8009538 <memchr+0xc>
 8009534:	2000      	movs	r0, #0
 8009536:	4770      	bx	lr
 8009538:	7803      	ldrb	r3, [r0, #0]
 800953a:	428b      	cmp	r3, r1
 800953c:	d0fb      	beq.n	8009536 <memchr+0xa>
 800953e:	3001      	adds	r0, #1
 8009540:	e7f6      	b.n	8009530 <memchr+0x4>

08009542 <_realloc_r>:
 8009542:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009544:	0006      	movs	r6, r0
 8009546:	000c      	movs	r4, r1
 8009548:	0015      	movs	r5, r2
 800954a:	2900      	cmp	r1, #0
 800954c:	d105      	bne.n	800955a <_realloc_r+0x18>
 800954e:	0011      	movs	r1, r2
 8009550:	f7ff fc5e 	bl	8008e10 <_malloc_r>
 8009554:	0004      	movs	r4, r0
 8009556:	0020      	movs	r0, r4
 8009558:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800955a:	2a00      	cmp	r2, #0
 800955c:	d103      	bne.n	8009566 <_realloc_r+0x24>
 800955e:	f7ff fbeb 	bl	8008d38 <_free_r>
 8009562:	002c      	movs	r4, r5
 8009564:	e7f7      	b.n	8009556 <_realloc_r+0x14>
 8009566:	f000 f81c 	bl	80095a2 <_malloc_usable_size_r>
 800956a:	0007      	movs	r7, r0
 800956c:	4285      	cmp	r5, r0
 800956e:	d802      	bhi.n	8009576 <_realloc_r+0x34>
 8009570:	0843      	lsrs	r3, r0, #1
 8009572:	42ab      	cmp	r3, r5
 8009574:	d3ef      	bcc.n	8009556 <_realloc_r+0x14>
 8009576:	0029      	movs	r1, r5
 8009578:	0030      	movs	r0, r6
 800957a:	f7ff fc49 	bl	8008e10 <_malloc_r>
 800957e:	9001      	str	r0, [sp, #4]
 8009580:	2800      	cmp	r0, #0
 8009582:	d101      	bne.n	8009588 <_realloc_r+0x46>
 8009584:	9c01      	ldr	r4, [sp, #4]
 8009586:	e7e6      	b.n	8009556 <_realloc_r+0x14>
 8009588:	002a      	movs	r2, r5
 800958a:	42bd      	cmp	r5, r7
 800958c:	d900      	bls.n	8009590 <_realloc_r+0x4e>
 800958e:	003a      	movs	r2, r7
 8009590:	0021      	movs	r1, r4
 8009592:	9801      	ldr	r0, [sp, #4]
 8009594:	f7ff fbc6 	bl	8008d24 <memcpy>
 8009598:	0021      	movs	r1, r4
 800959a:	0030      	movs	r0, r6
 800959c:	f7ff fbcc 	bl	8008d38 <_free_r>
 80095a0:	e7f0      	b.n	8009584 <_realloc_r+0x42>

080095a2 <_malloc_usable_size_r>:
 80095a2:	1f0b      	subs	r3, r1, #4
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	1f18      	subs	r0, r3, #4
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	da01      	bge.n	80095b0 <_malloc_usable_size_r+0xe>
 80095ac:	580b      	ldr	r3, [r1, r0]
 80095ae:	18c0      	adds	r0, r0, r3
 80095b0:	4770      	bx	lr

080095b2 <fmod>:
 80095b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095b4:	0014      	movs	r4, r2
 80095b6:	001d      	movs	r5, r3
 80095b8:	9000      	str	r0, [sp, #0]
 80095ba:	9101      	str	r1, [sp, #4]
 80095bc:	f000 f822 	bl	8009604 <__ieee754_fmod>
 80095c0:	0022      	movs	r2, r4
 80095c2:	0006      	movs	r6, r0
 80095c4:	000f      	movs	r7, r1
 80095c6:	9800      	ldr	r0, [sp, #0]
 80095c8:	9901      	ldr	r1, [sp, #4]
 80095ca:	002b      	movs	r3, r5
 80095cc:	f7f8 fb1e 	bl	8001c0c <__aeabi_dcmpun>
 80095d0:	2800      	cmp	r0, #0
 80095d2:	d113      	bne.n	80095fc <fmod+0x4a>
 80095d4:	2200      	movs	r2, #0
 80095d6:	2300      	movs	r3, #0
 80095d8:	0020      	movs	r0, r4
 80095da:	0029      	movs	r1, r5
 80095dc:	f7f6 ff2a 	bl	8000434 <__aeabi_dcmpeq>
 80095e0:	2800      	cmp	r0, #0
 80095e2:	d00b      	beq.n	80095fc <fmod+0x4a>
 80095e4:	f7ff fb72 	bl	8008ccc <__errno>
 80095e8:	2321      	movs	r3, #33	@ 0x21
 80095ea:	2200      	movs	r2, #0
 80095ec:	6003      	str	r3, [r0, #0]
 80095ee:	2300      	movs	r3, #0
 80095f0:	0010      	movs	r0, r2
 80095f2:	0019      	movs	r1, r3
 80095f4:	f7f7 fbea 	bl	8000dcc <__aeabi_ddiv>
 80095f8:	0006      	movs	r6, r0
 80095fa:	000f      	movs	r7, r1
 80095fc:	0030      	movs	r0, r6
 80095fe:	0039      	movs	r1, r7
 8009600:	b003      	add	sp, #12
 8009602:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009604 <__ieee754_fmod>:
 8009604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009606:	b087      	sub	sp, #28
 8009608:	9200      	str	r2, [sp, #0]
 800960a:	9301      	str	r3, [sp, #4]
 800960c:	9b01      	ldr	r3, [sp, #4]
 800960e:	9e00      	ldr	r6, [sp, #0]
 8009610:	005c      	lsls	r4, r3, #1
 8009612:	0863      	lsrs	r3, r4, #1
 8009614:	001c      	movs	r4, r3
 8009616:	469c      	mov	ip, r3
 8009618:	9604      	str	r6, [sp, #16]
 800961a:	4334      	orrs	r4, r6
 800961c:	d00d      	beq.n	800963a <__ieee754_fmod+0x36>
 800961e:	4d7b      	ldr	r5, [pc, #492]	@ (800980c <__ieee754_fmod+0x208>)
 8009620:	004c      	lsls	r4, r1, #1
 8009622:	9105      	str	r1, [sp, #20]
 8009624:	0864      	lsrs	r4, r4, #1
 8009626:	42ac      	cmp	r4, r5
 8009628:	d807      	bhi.n	800963a <__ieee754_fmod+0x36>
 800962a:	4663      	mov	r3, ip
 800962c:	4275      	negs	r5, r6
 800962e:	4335      	orrs	r5, r6
 8009630:	0fed      	lsrs	r5, r5, #31
 8009632:	431d      	orrs	r5, r3
 8009634:	4b76      	ldr	r3, [pc, #472]	@ (8009810 <__ieee754_fmod+0x20c>)
 8009636:	429d      	cmp	r5, r3
 8009638:	d909      	bls.n	800964e <__ieee754_fmod+0x4a>
 800963a:	9a00      	ldr	r2, [sp, #0]
 800963c:	9b01      	ldr	r3, [sp, #4]
 800963e:	f7f7 ffff 	bl	8001640 <__aeabi_dmul>
 8009642:	0002      	movs	r2, r0
 8009644:	000b      	movs	r3, r1
 8009646:	f7f7 fbc1 	bl	8000dcc <__aeabi_ddiv>
 800964a:	b007      	add	sp, #28
 800964c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800964e:	9b05      	ldr	r3, [sp, #20]
 8009650:	0007      	movs	r7, r0
 8009652:	0fdb      	lsrs	r3, r3, #31
 8009654:	07db      	lsls	r3, r3, #31
 8009656:	0005      	movs	r5, r0
 8009658:	9303      	str	r3, [sp, #12]
 800965a:	4564      	cmp	r4, ip
 800965c:	dc0a      	bgt.n	8009674 <__ieee754_fmod+0x70>
 800965e:	dbf4      	blt.n	800964a <__ieee754_fmod+0x46>
 8009660:	4286      	cmp	r6, r0
 8009662:	d8f2      	bhi.n	800964a <__ieee754_fmod+0x46>
 8009664:	d106      	bne.n	8009674 <__ieee754_fmod+0x70>
 8009666:	9a03      	ldr	r2, [sp, #12]
 8009668:	4b6a      	ldr	r3, [pc, #424]	@ (8009814 <__ieee754_fmod+0x210>)
 800966a:	0f12      	lsrs	r2, r2, #28
 800966c:	189b      	adds	r3, r3, r2
 800966e:	6818      	ldr	r0, [r3, #0]
 8009670:	6859      	ldr	r1, [r3, #4]
 8009672:	e7ea      	b.n	800964a <__ieee754_fmod+0x46>
 8009674:	9b05      	ldr	r3, [sp, #20]
 8009676:	4a66      	ldr	r2, [pc, #408]	@ (8009810 <__ieee754_fmod+0x20c>)
 8009678:	4213      	tst	r3, r2
 800967a:	d14e      	bne.n	800971a <__ieee754_fmod+0x116>
 800967c:	2c00      	cmp	r4, #0
 800967e:	d145      	bne.n	800970c <__ieee754_fmod+0x108>
 8009680:	0039      	movs	r1, r7
 8009682:	4865      	ldr	r0, [pc, #404]	@ (8009818 <__ieee754_fmod+0x214>)
 8009684:	2900      	cmp	r1, #0
 8009686:	dc3e      	bgt.n	8009706 <__ieee754_fmod+0x102>
 8009688:	4b61      	ldr	r3, [pc, #388]	@ (8009810 <__ieee754_fmod+0x20c>)
 800968a:	9a01      	ldr	r2, [sp, #4]
 800968c:	4213      	tst	r3, r2
 800968e:	d152      	bne.n	8009736 <__ieee754_fmod+0x132>
 8009690:	4663      	mov	r3, ip
 8009692:	2b00      	cmp	r3, #0
 8009694:	d148      	bne.n	8009728 <__ieee754_fmod+0x124>
 8009696:	4960      	ldr	r1, [pc, #384]	@ (8009818 <__ieee754_fmod+0x214>)
 8009698:	2e00      	cmp	r6, #0
 800969a:	dc42      	bgt.n	8009722 <__ieee754_fmod+0x11e>
 800969c:	4e5f      	ldr	r6, [pc, #380]	@ (800981c <__ieee754_fmod+0x218>)
 800969e:	42b0      	cmp	r0, r6
 80096a0:	db4e      	blt.n	8009740 <__ieee754_fmod+0x13c>
 80096a2:	2480      	movs	r4, #128	@ 0x80
 80096a4:	9b05      	ldr	r3, [sp, #20]
 80096a6:	0364      	lsls	r4, r4, #13
 80096a8:	031f      	lsls	r7, r3, #12
 80096aa:	0b3f      	lsrs	r7, r7, #12
 80096ac:	433c      	orrs	r4, r7
 80096ae:	42b1      	cmp	r1, r6
 80096b0:	db5a      	blt.n	8009768 <__ieee754_fmod+0x164>
 80096b2:	2280      	movs	r2, #128	@ 0x80
 80096b4:	9b01      	ldr	r3, [sp, #4]
 80096b6:	0352      	lsls	r2, r2, #13
 80096b8:	031b      	lsls	r3, r3, #12
 80096ba:	0b1b      	lsrs	r3, r3, #12
 80096bc:	431a      	orrs	r2, r3
 80096be:	4694      	mov	ip, r2
 80096c0:	1a40      	subs	r0, r0, r1
 80096c2:	4663      	mov	r3, ip
 80096c4:	9a04      	ldr	r2, [sp, #16]
 80096c6:	1ae3      	subs	r3, r4, r3
 80096c8:	1aaa      	subs	r2, r5, r2
 80096ca:	2800      	cmp	r0, #0
 80096cc:	d166      	bne.n	800979c <__ieee754_fmod+0x198>
 80096ce:	9804      	ldr	r0, [sp, #16]
 80096d0:	4285      	cmp	r5, r0
 80096d2:	4180      	sbcs	r0, r0
 80096d4:	4240      	negs	r0, r0
 80096d6:	1a1b      	subs	r3, r3, r0
 80096d8:	d501      	bpl.n	80096de <__ieee754_fmod+0xda>
 80096da:	002a      	movs	r2, r5
 80096dc:	0023      	movs	r3, r4
 80096de:	0018      	movs	r0, r3
 80096e0:	4310      	orrs	r0, r2
 80096e2:	d0c0      	beq.n	8009666 <__ieee754_fmod+0x62>
 80096e4:	2080      	movs	r0, #128	@ 0x80
 80096e6:	0340      	lsls	r0, r0, #13
 80096e8:	4283      	cmp	r3, r0
 80096ea:	db6c      	blt.n	80097c6 <__ieee754_fmod+0x1c2>
 80096ec:	42b1      	cmp	r1, r6
 80096ee:	db70      	blt.n	80097d2 <__ieee754_fmod+0x1ce>
 80096f0:	484b      	ldr	r0, [pc, #300]	@ (8009820 <__ieee754_fmod+0x21c>)
 80096f2:	181b      	adds	r3, r3, r0
 80096f4:	9803      	ldr	r0, [sp, #12]
 80096f6:	4303      	orrs	r3, r0
 80096f8:	484a      	ldr	r0, [pc, #296]	@ (8009824 <__ieee754_fmod+0x220>)
 80096fa:	1809      	adds	r1, r1, r0
 80096fc:	050c      	lsls	r4, r1, #20
 80096fe:	4323      	orrs	r3, r4
 8009700:	0019      	movs	r1, r3
 8009702:	0010      	movs	r0, r2
 8009704:	e7a1      	b.n	800964a <__ieee754_fmod+0x46>
 8009706:	3801      	subs	r0, #1
 8009708:	0049      	lsls	r1, r1, #1
 800970a:	e7bb      	b.n	8009684 <__ieee754_fmod+0x80>
 800970c:	4843      	ldr	r0, [pc, #268]	@ (800981c <__ieee754_fmod+0x218>)
 800970e:	02e1      	lsls	r1, r4, #11
 8009710:	2900      	cmp	r1, #0
 8009712:	ddb9      	ble.n	8009688 <__ieee754_fmod+0x84>
 8009714:	3801      	subs	r0, #1
 8009716:	0049      	lsls	r1, r1, #1
 8009718:	e7fa      	b.n	8009710 <__ieee754_fmod+0x10c>
 800971a:	4b43      	ldr	r3, [pc, #268]	@ (8009828 <__ieee754_fmod+0x224>)
 800971c:	1520      	asrs	r0, r4, #20
 800971e:	18c0      	adds	r0, r0, r3
 8009720:	e7b2      	b.n	8009688 <__ieee754_fmod+0x84>
 8009722:	3901      	subs	r1, #1
 8009724:	0076      	lsls	r6, r6, #1
 8009726:	e7b7      	b.n	8009698 <__ieee754_fmod+0x94>
 8009728:	493c      	ldr	r1, [pc, #240]	@ (800981c <__ieee754_fmod+0x218>)
 800972a:	02de      	lsls	r6, r3, #11
 800972c:	2e00      	cmp	r6, #0
 800972e:	ddb5      	ble.n	800969c <__ieee754_fmod+0x98>
 8009730:	3901      	subs	r1, #1
 8009732:	0076      	lsls	r6, r6, #1
 8009734:	e7fa      	b.n	800972c <__ieee754_fmod+0x128>
 8009736:	4663      	mov	r3, ip
 8009738:	1519      	asrs	r1, r3, #20
 800973a:	4b3b      	ldr	r3, [pc, #236]	@ (8009828 <__ieee754_fmod+0x224>)
 800973c:	18c9      	adds	r1, r1, r3
 800973e:	e7ad      	b.n	800969c <__ieee754_fmod+0x98>
 8009740:	1a35      	subs	r5, r6, r0
 8009742:	2d1f      	cmp	r5, #31
 8009744:	dc0a      	bgt.n	800975c <__ieee754_fmod+0x158>
 8009746:	40ac      	lsls	r4, r5
 8009748:	4b38      	ldr	r3, [pc, #224]	@ (800982c <__ieee754_fmod+0x228>)
 800974a:	0022      	movs	r2, r4
 800974c:	18c4      	adds	r4, r0, r3
 800974e:	003b      	movs	r3, r7
 8009750:	40e3      	lsrs	r3, r4
 8009752:	40af      	lsls	r7, r5
 8009754:	001c      	movs	r4, r3
 8009756:	003d      	movs	r5, r7
 8009758:	4314      	orrs	r4, r2
 800975a:	e7a8      	b.n	80096ae <__ieee754_fmod+0xaa>
 800975c:	4c34      	ldr	r4, [pc, #208]	@ (8009830 <__ieee754_fmod+0x22c>)
 800975e:	2500      	movs	r5, #0
 8009760:	1a24      	subs	r4, r4, r0
 8009762:	40a7      	lsls	r7, r4
 8009764:	003c      	movs	r4, r7
 8009766:	e7a2      	b.n	80096ae <__ieee754_fmod+0xaa>
 8009768:	1a77      	subs	r7, r6, r1
 800976a:	2f1f      	cmp	r7, #31
 800976c:	dc0f      	bgt.n	800978e <__ieee754_fmod+0x18a>
 800976e:	4663      	mov	r3, ip
 8009770:	4a2e      	ldr	r2, [pc, #184]	@ (800982c <__ieee754_fmod+0x228>)
 8009772:	40bb      	lsls	r3, r7
 8009774:	4694      	mov	ip, r2
 8009776:	448c      	add	ip, r1
 8009778:	9304      	str	r3, [sp, #16]
 800977a:	4663      	mov	r3, ip
 800977c:	9a00      	ldr	r2, [sp, #0]
 800977e:	40da      	lsrs	r2, r3
 8009780:	9b04      	ldr	r3, [sp, #16]
 8009782:	431a      	orrs	r2, r3
 8009784:	9b00      	ldr	r3, [sp, #0]
 8009786:	4694      	mov	ip, r2
 8009788:	40bb      	lsls	r3, r7
 800978a:	9304      	str	r3, [sp, #16]
 800978c:	e798      	b.n	80096c0 <__ieee754_fmod+0xbc>
 800978e:	4b28      	ldr	r3, [pc, #160]	@ (8009830 <__ieee754_fmod+0x22c>)
 8009790:	9a00      	ldr	r2, [sp, #0]
 8009792:	1a5b      	subs	r3, r3, r1
 8009794:	409a      	lsls	r2, r3
 8009796:	2300      	movs	r3, #0
 8009798:	4694      	mov	ip, r2
 800979a:	e7f6      	b.n	800978a <__ieee754_fmod+0x186>
 800979c:	9f04      	ldr	r7, [sp, #16]
 800979e:	42bd      	cmp	r5, r7
 80097a0:	41bf      	sbcs	r7, r7
 80097a2:	427f      	negs	r7, r7
 80097a4:	1bdb      	subs	r3, r3, r7
 80097a6:	d505      	bpl.n	80097b4 <__ieee754_fmod+0x1b0>
 80097a8:	0feb      	lsrs	r3, r5, #31
 80097aa:	0064      	lsls	r4, r4, #1
 80097ac:	18e4      	adds	r4, r4, r3
 80097ae:	006d      	lsls	r5, r5, #1
 80097b0:	3801      	subs	r0, #1
 80097b2:	e786      	b.n	80096c2 <__ieee754_fmod+0xbe>
 80097b4:	001c      	movs	r4, r3
 80097b6:	4314      	orrs	r4, r2
 80097b8:	d100      	bne.n	80097bc <__ieee754_fmod+0x1b8>
 80097ba:	e754      	b.n	8009666 <__ieee754_fmod+0x62>
 80097bc:	005b      	lsls	r3, r3, #1
 80097be:	0fd4      	lsrs	r4, r2, #31
 80097c0:	191c      	adds	r4, r3, r4
 80097c2:	0055      	lsls	r5, r2, #1
 80097c4:	e7f4      	b.n	80097b0 <__ieee754_fmod+0x1ac>
 80097c6:	0fd4      	lsrs	r4, r2, #31
 80097c8:	005b      	lsls	r3, r3, #1
 80097ca:	191b      	adds	r3, r3, r4
 80097cc:	0052      	lsls	r2, r2, #1
 80097ce:	3901      	subs	r1, #1
 80097d0:	e78a      	b.n	80096e8 <__ieee754_fmod+0xe4>
 80097d2:	1a76      	subs	r6, r6, r1
 80097d4:	2e14      	cmp	r6, #20
 80097d6:	dc0b      	bgt.n	80097f0 <__ieee754_fmod+0x1ec>
 80097d8:	40f2      	lsrs	r2, r6
 80097da:	0010      	movs	r0, r2
 80097dc:	4a13      	ldr	r2, [pc, #76]	@ (800982c <__ieee754_fmod+0x228>)
 80097de:	1889      	adds	r1, r1, r2
 80097e0:	001a      	movs	r2, r3
 80097e2:	408a      	lsls	r2, r1
 80097e4:	4133      	asrs	r3, r6
 80097e6:	4302      	orrs	r2, r0
 80097e8:	9c03      	ldr	r4, [sp, #12]
 80097ea:	431c      	orrs	r4, r3
 80097ec:	0021      	movs	r1, r4
 80097ee:	e788      	b.n	8009702 <__ieee754_fmod+0xfe>
 80097f0:	2e1f      	cmp	r6, #31
 80097f2:	dc06      	bgt.n	8009802 <__ieee754_fmod+0x1fe>
 80097f4:	480d      	ldr	r0, [pc, #52]	@ (800982c <__ieee754_fmod+0x228>)
 80097f6:	40f2      	lsrs	r2, r6
 80097f8:	1809      	adds	r1, r1, r0
 80097fa:	408b      	lsls	r3, r1
 80097fc:	431a      	orrs	r2, r3
 80097fe:	9b03      	ldr	r3, [sp, #12]
 8009800:	e7f2      	b.n	80097e8 <__ieee754_fmod+0x1e4>
 8009802:	4a0b      	ldr	r2, [pc, #44]	@ (8009830 <__ieee754_fmod+0x22c>)
 8009804:	1a52      	subs	r2, r2, r1
 8009806:	4113      	asrs	r3, r2
 8009808:	001a      	movs	r2, r3
 800980a:	e7f8      	b.n	80097fe <__ieee754_fmod+0x1fa>
 800980c:	7fefffff 	.word	0x7fefffff
 8009810:	7ff00000 	.word	0x7ff00000
 8009814:	0800a0a0 	.word	0x0800a0a0
 8009818:	fffffbed 	.word	0xfffffbed
 800981c:	fffffc02 	.word	0xfffffc02
 8009820:	fff00000 	.word	0xfff00000
 8009824:	000003ff 	.word	0x000003ff
 8009828:	fffffc01 	.word	0xfffffc01
 800982c:	0000041e 	.word	0x0000041e
 8009830:	fffffbe2 	.word	0xfffffbe2

08009834 <_init>:
 8009834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009836:	46c0      	nop			@ (mov r8, r8)
 8009838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800983a:	bc08      	pop	{r3}
 800983c:	469e      	mov	lr, r3
 800983e:	4770      	bx	lr

08009840 <_fini>:
 8009840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009842:	46c0      	nop			@ (mov r8, r8)
 8009844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009846:	bc08      	pop	{r3}
 8009848:	469e      	mov	lr, r3
 800984a:	4770      	bx	lr
