
ynotag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b54  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000978  08009c10  08009c10  0000ac10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a588  0800a588  0000c550  2**0
                  CONTENTS
  4 .ARM          00000008  0800a588  0800a588  0000b588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a590  0800a590  0000c550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a590  0800a590  0000b590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a594  0800a594  0000b594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000550  20000000  0800a598  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  20000550  0800aae8  0000c550  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a6c  0800aae8  0000ca6c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c550  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad57  00000000  00000000  0000c578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003456  00000000  00000000  000272cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001820  00000000  00000000  0002a728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013b1  00000000  00000000  0002bf48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fa9a  00000000  00000000  0002d2f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e73f  00000000  00000000  0004cd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caba1  00000000  00000000  0006b4d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136073  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006140  00000000  00000000  001360b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0013c1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000550 	.word	0x20000550
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009bf8 	.word	0x08009bf8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000554 	.word	0x20000554
 8000100:	08009bf8 	.word	0x08009bf8

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	@ (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	@ (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f81e 	bl	8000488 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_f2uiz>:
 8000458:	219e      	movs	r1, #158	@ 0x9e
 800045a:	b510      	push	{r4, lr}
 800045c:	05c9      	lsls	r1, r1, #23
 800045e:	1c04      	adds	r4, r0, #0
 8000460:	f000 ff8a 	bl	8001378 <__aeabi_fcmpge>
 8000464:	2800      	cmp	r0, #0
 8000466:	d103      	bne.n	8000470 <__aeabi_f2uiz+0x18>
 8000468:	1c20      	adds	r0, r4, #0
 800046a:	f000 fe65 	bl	8001138 <__aeabi_f2iz>
 800046e:	bd10      	pop	{r4, pc}
 8000470:	219e      	movs	r1, #158	@ 0x9e
 8000472:	1c20      	adds	r0, r4, #0
 8000474:	05c9      	lsls	r1, r1, #23
 8000476:	f000 fcbb 	bl	8000df0 <__aeabi_fsub>
 800047a:	f000 fe5d 	bl	8001138 <__aeabi_f2iz>
 800047e:	2380      	movs	r3, #128	@ 0x80
 8000480:	061b      	lsls	r3, r3, #24
 8000482:	469c      	mov	ip, r3
 8000484:	4460      	add	r0, ip
 8000486:	e7f2      	b.n	800046e <__aeabi_f2uiz+0x16>

08000488 <__udivmoddi4>:
 8000488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800048a:	4657      	mov	r7, sl
 800048c:	464e      	mov	r6, r9
 800048e:	4645      	mov	r5, r8
 8000490:	46de      	mov	lr, fp
 8000492:	b5e0      	push	{r5, r6, r7, lr}
 8000494:	0004      	movs	r4, r0
 8000496:	000d      	movs	r5, r1
 8000498:	4692      	mov	sl, r2
 800049a:	4699      	mov	r9, r3
 800049c:	b083      	sub	sp, #12
 800049e:	428b      	cmp	r3, r1
 80004a0:	d830      	bhi.n	8000504 <__udivmoddi4+0x7c>
 80004a2:	d02d      	beq.n	8000500 <__udivmoddi4+0x78>
 80004a4:	4649      	mov	r1, r9
 80004a6:	4650      	mov	r0, sl
 80004a8:	f000 ff8e 	bl	80013c8 <__clzdi2>
 80004ac:	0029      	movs	r1, r5
 80004ae:	0006      	movs	r6, r0
 80004b0:	0020      	movs	r0, r4
 80004b2:	f000 ff89 	bl	80013c8 <__clzdi2>
 80004b6:	1a33      	subs	r3, r6, r0
 80004b8:	4698      	mov	r8, r3
 80004ba:	3b20      	subs	r3, #32
 80004bc:	d434      	bmi.n	8000528 <__udivmoddi4+0xa0>
 80004be:	469b      	mov	fp, r3
 80004c0:	4653      	mov	r3, sl
 80004c2:	465a      	mov	r2, fp
 80004c4:	4093      	lsls	r3, r2
 80004c6:	4642      	mov	r2, r8
 80004c8:	001f      	movs	r7, r3
 80004ca:	4653      	mov	r3, sl
 80004cc:	4093      	lsls	r3, r2
 80004ce:	001e      	movs	r6, r3
 80004d0:	42af      	cmp	r7, r5
 80004d2:	d83b      	bhi.n	800054c <__udivmoddi4+0xc4>
 80004d4:	42af      	cmp	r7, r5
 80004d6:	d100      	bne.n	80004da <__udivmoddi4+0x52>
 80004d8:	e079      	b.n	80005ce <__udivmoddi4+0x146>
 80004da:	465b      	mov	r3, fp
 80004dc:	1ba4      	subs	r4, r4, r6
 80004de:	41bd      	sbcs	r5, r7
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	da00      	bge.n	80004e6 <__udivmoddi4+0x5e>
 80004e4:	e076      	b.n	80005d4 <__udivmoddi4+0x14c>
 80004e6:	2200      	movs	r2, #0
 80004e8:	2300      	movs	r3, #0
 80004ea:	9200      	str	r2, [sp, #0]
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	2301      	movs	r3, #1
 80004f0:	465a      	mov	r2, fp
 80004f2:	4093      	lsls	r3, r2
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2301      	movs	r3, #1
 80004f8:	4642      	mov	r2, r8
 80004fa:	4093      	lsls	r3, r2
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	e029      	b.n	8000554 <__udivmoddi4+0xcc>
 8000500:	4282      	cmp	r2, r0
 8000502:	d9cf      	bls.n	80004a4 <__udivmoddi4+0x1c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <__udivmoddi4+0x8e>
 8000512:	601c      	str	r4, [r3, #0]
 8000514:	605d      	str	r5, [r3, #4]
 8000516:	9800      	ldr	r0, [sp, #0]
 8000518:	9901      	ldr	r1, [sp, #4]
 800051a:	b003      	add	sp, #12
 800051c:	bcf0      	pop	{r4, r5, r6, r7}
 800051e:	46bb      	mov	fp, r7
 8000520:	46b2      	mov	sl, r6
 8000522:	46a9      	mov	r9, r5
 8000524:	46a0      	mov	r8, r4
 8000526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000528:	4642      	mov	r2, r8
 800052a:	469b      	mov	fp, r3
 800052c:	2320      	movs	r3, #32
 800052e:	1a9b      	subs	r3, r3, r2
 8000530:	4652      	mov	r2, sl
 8000532:	40da      	lsrs	r2, r3
 8000534:	4641      	mov	r1, r8
 8000536:	0013      	movs	r3, r2
 8000538:	464a      	mov	r2, r9
 800053a:	408a      	lsls	r2, r1
 800053c:	0017      	movs	r7, r2
 800053e:	4642      	mov	r2, r8
 8000540:	431f      	orrs	r7, r3
 8000542:	4653      	mov	r3, sl
 8000544:	4093      	lsls	r3, r2
 8000546:	001e      	movs	r6, r3
 8000548:	42af      	cmp	r7, r5
 800054a:	d9c3      	bls.n	80004d4 <__udivmoddi4+0x4c>
 800054c:	2200      	movs	r2, #0
 800054e:	2300      	movs	r3, #0
 8000550:	9200      	str	r2, [sp, #0]
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	4643      	mov	r3, r8
 8000556:	2b00      	cmp	r3, #0
 8000558:	d0d8      	beq.n	800050c <__udivmoddi4+0x84>
 800055a:	07fb      	lsls	r3, r7, #31
 800055c:	0872      	lsrs	r2, r6, #1
 800055e:	431a      	orrs	r2, r3
 8000560:	4646      	mov	r6, r8
 8000562:	087b      	lsrs	r3, r7, #1
 8000564:	e00e      	b.n	8000584 <__udivmoddi4+0xfc>
 8000566:	42ab      	cmp	r3, r5
 8000568:	d101      	bne.n	800056e <__udivmoddi4+0xe6>
 800056a:	42a2      	cmp	r2, r4
 800056c:	d80c      	bhi.n	8000588 <__udivmoddi4+0x100>
 800056e:	1aa4      	subs	r4, r4, r2
 8000570:	419d      	sbcs	r5, r3
 8000572:	2001      	movs	r0, #1
 8000574:	1924      	adds	r4, r4, r4
 8000576:	416d      	adcs	r5, r5
 8000578:	2100      	movs	r1, #0
 800057a:	3e01      	subs	r6, #1
 800057c:	1824      	adds	r4, r4, r0
 800057e:	414d      	adcs	r5, r1
 8000580:	2e00      	cmp	r6, #0
 8000582:	d006      	beq.n	8000592 <__udivmoddi4+0x10a>
 8000584:	42ab      	cmp	r3, r5
 8000586:	d9ee      	bls.n	8000566 <__udivmoddi4+0xde>
 8000588:	3e01      	subs	r6, #1
 800058a:	1924      	adds	r4, r4, r4
 800058c:	416d      	adcs	r5, r5
 800058e:	2e00      	cmp	r6, #0
 8000590:	d1f8      	bne.n	8000584 <__udivmoddi4+0xfc>
 8000592:	9800      	ldr	r0, [sp, #0]
 8000594:	9901      	ldr	r1, [sp, #4]
 8000596:	465b      	mov	r3, fp
 8000598:	1900      	adds	r0, r0, r4
 800059a:	4169      	adcs	r1, r5
 800059c:	2b00      	cmp	r3, #0
 800059e:	db24      	blt.n	80005ea <__udivmoddi4+0x162>
 80005a0:	002b      	movs	r3, r5
 80005a2:	465a      	mov	r2, fp
 80005a4:	4644      	mov	r4, r8
 80005a6:	40d3      	lsrs	r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	40e2      	lsrs	r2, r4
 80005ac:	001c      	movs	r4, r3
 80005ae:	465b      	mov	r3, fp
 80005b0:	0015      	movs	r5, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	db2a      	blt.n	800060c <__udivmoddi4+0x184>
 80005b6:	0026      	movs	r6, r4
 80005b8:	409e      	lsls	r6, r3
 80005ba:	0033      	movs	r3, r6
 80005bc:	0026      	movs	r6, r4
 80005be:	4647      	mov	r7, r8
 80005c0:	40be      	lsls	r6, r7
 80005c2:	0032      	movs	r2, r6
 80005c4:	1a80      	subs	r0, r0, r2
 80005c6:	4199      	sbcs	r1, r3
 80005c8:	9000      	str	r0, [sp, #0]
 80005ca:	9101      	str	r1, [sp, #4]
 80005cc:	e79e      	b.n	800050c <__udivmoddi4+0x84>
 80005ce:	42a3      	cmp	r3, r4
 80005d0:	d8bc      	bhi.n	800054c <__udivmoddi4+0xc4>
 80005d2:	e782      	b.n	80004da <__udivmoddi4+0x52>
 80005d4:	4642      	mov	r2, r8
 80005d6:	2320      	movs	r3, #32
 80005d8:	2100      	movs	r1, #0
 80005da:	1a9b      	subs	r3, r3, r2
 80005dc:	2200      	movs	r2, #0
 80005de:	9100      	str	r1, [sp, #0]
 80005e0:	9201      	str	r2, [sp, #4]
 80005e2:	2201      	movs	r2, #1
 80005e4:	40da      	lsrs	r2, r3
 80005e6:	9201      	str	r2, [sp, #4]
 80005e8:	e785      	b.n	80004f6 <__udivmoddi4+0x6e>
 80005ea:	4642      	mov	r2, r8
 80005ec:	2320      	movs	r3, #32
 80005ee:	1a9b      	subs	r3, r3, r2
 80005f0:	002a      	movs	r2, r5
 80005f2:	4646      	mov	r6, r8
 80005f4:	409a      	lsls	r2, r3
 80005f6:	0023      	movs	r3, r4
 80005f8:	40f3      	lsrs	r3, r6
 80005fa:	4644      	mov	r4, r8
 80005fc:	4313      	orrs	r3, r2
 80005fe:	002a      	movs	r2, r5
 8000600:	40e2      	lsrs	r2, r4
 8000602:	001c      	movs	r4, r3
 8000604:	465b      	mov	r3, fp
 8000606:	0015      	movs	r5, r2
 8000608:	2b00      	cmp	r3, #0
 800060a:	dad4      	bge.n	80005b6 <__udivmoddi4+0x12e>
 800060c:	4642      	mov	r2, r8
 800060e:	002f      	movs	r7, r5
 8000610:	2320      	movs	r3, #32
 8000612:	0026      	movs	r6, r4
 8000614:	4097      	lsls	r7, r2
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	40de      	lsrs	r6, r3
 800061a:	003b      	movs	r3, r7
 800061c:	4333      	orrs	r3, r6
 800061e:	e7cd      	b.n	80005bc <__udivmoddi4+0x134>

08000620 <__aeabi_fadd>:
 8000620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000622:	46ce      	mov	lr, r9
 8000624:	4647      	mov	r7, r8
 8000626:	0243      	lsls	r3, r0, #9
 8000628:	0a5a      	lsrs	r2, r3, #9
 800062a:	024e      	lsls	r6, r1, #9
 800062c:	0045      	lsls	r5, r0, #1
 800062e:	0fc4      	lsrs	r4, r0, #31
 8000630:	0048      	lsls	r0, r1, #1
 8000632:	4691      	mov	r9, r2
 8000634:	0e2d      	lsrs	r5, r5, #24
 8000636:	0a72      	lsrs	r2, r6, #9
 8000638:	0e00      	lsrs	r0, r0, #24
 800063a:	4694      	mov	ip, r2
 800063c:	b580      	push	{r7, lr}
 800063e:	099b      	lsrs	r3, r3, #6
 8000640:	0fc9      	lsrs	r1, r1, #31
 8000642:	09b6      	lsrs	r6, r6, #6
 8000644:	1a2a      	subs	r2, r5, r0
 8000646:	428c      	cmp	r4, r1
 8000648:	d021      	beq.n	800068e <__aeabi_fadd+0x6e>
 800064a:	2a00      	cmp	r2, #0
 800064c:	dd0d      	ble.n	800066a <__aeabi_fadd+0x4a>
 800064e:	2800      	cmp	r0, #0
 8000650:	d12d      	bne.n	80006ae <__aeabi_fadd+0x8e>
 8000652:	2e00      	cmp	r6, #0
 8000654:	d100      	bne.n	8000658 <__aeabi_fadd+0x38>
 8000656:	e08d      	b.n	8000774 <__aeabi_fadd+0x154>
 8000658:	1e51      	subs	r1, r2, #1
 800065a:	2a01      	cmp	r2, #1
 800065c:	d100      	bne.n	8000660 <__aeabi_fadd+0x40>
 800065e:	e11d      	b.n	800089c <__aeabi_fadd+0x27c>
 8000660:	2aff      	cmp	r2, #255	@ 0xff
 8000662:	d100      	bne.n	8000666 <__aeabi_fadd+0x46>
 8000664:	e0ab      	b.n	80007be <__aeabi_fadd+0x19e>
 8000666:	000a      	movs	r2, r1
 8000668:	e027      	b.n	80006ba <__aeabi_fadd+0x9a>
 800066a:	2a00      	cmp	r2, #0
 800066c:	d04d      	beq.n	800070a <__aeabi_fadd+0xea>
 800066e:	1b42      	subs	r2, r0, r5
 8000670:	2d00      	cmp	r5, #0
 8000672:	d000      	beq.n	8000676 <__aeabi_fadd+0x56>
 8000674:	e0cc      	b.n	8000810 <__aeabi_fadd+0x1f0>
 8000676:	2b00      	cmp	r3, #0
 8000678:	d100      	bne.n	800067c <__aeabi_fadd+0x5c>
 800067a:	e079      	b.n	8000770 <__aeabi_fadd+0x150>
 800067c:	1e54      	subs	r4, r2, #1
 800067e:	2a01      	cmp	r2, #1
 8000680:	d100      	bne.n	8000684 <__aeabi_fadd+0x64>
 8000682:	e128      	b.n	80008d6 <__aeabi_fadd+0x2b6>
 8000684:	2aff      	cmp	r2, #255	@ 0xff
 8000686:	d100      	bne.n	800068a <__aeabi_fadd+0x6a>
 8000688:	e097      	b.n	80007ba <__aeabi_fadd+0x19a>
 800068a:	0022      	movs	r2, r4
 800068c:	e0c5      	b.n	800081a <__aeabi_fadd+0x1fa>
 800068e:	2a00      	cmp	r2, #0
 8000690:	dc00      	bgt.n	8000694 <__aeabi_fadd+0x74>
 8000692:	e096      	b.n	80007c2 <__aeabi_fadd+0x1a2>
 8000694:	2800      	cmp	r0, #0
 8000696:	d04f      	beq.n	8000738 <__aeabi_fadd+0x118>
 8000698:	2dff      	cmp	r5, #255	@ 0xff
 800069a:	d100      	bne.n	800069e <__aeabi_fadd+0x7e>
 800069c:	e08f      	b.n	80007be <__aeabi_fadd+0x19e>
 800069e:	2180      	movs	r1, #128	@ 0x80
 80006a0:	04c9      	lsls	r1, r1, #19
 80006a2:	430e      	orrs	r6, r1
 80006a4:	2a1b      	cmp	r2, #27
 80006a6:	dd51      	ble.n	800074c <__aeabi_fadd+0x12c>
 80006a8:	002a      	movs	r2, r5
 80006aa:	3301      	adds	r3, #1
 80006ac:	e018      	b.n	80006e0 <__aeabi_fadd+0xc0>
 80006ae:	2dff      	cmp	r5, #255	@ 0xff
 80006b0:	d100      	bne.n	80006b4 <__aeabi_fadd+0x94>
 80006b2:	e084      	b.n	80007be <__aeabi_fadd+0x19e>
 80006b4:	2180      	movs	r1, #128	@ 0x80
 80006b6:	04c9      	lsls	r1, r1, #19
 80006b8:	430e      	orrs	r6, r1
 80006ba:	2101      	movs	r1, #1
 80006bc:	2a1b      	cmp	r2, #27
 80006be:	dc08      	bgt.n	80006d2 <__aeabi_fadd+0xb2>
 80006c0:	0031      	movs	r1, r6
 80006c2:	2020      	movs	r0, #32
 80006c4:	40d1      	lsrs	r1, r2
 80006c6:	1a82      	subs	r2, r0, r2
 80006c8:	4096      	lsls	r6, r2
 80006ca:	0032      	movs	r2, r6
 80006cc:	1e50      	subs	r0, r2, #1
 80006ce:	4182      	sbcs	r2, r0
 80006d0:	4311      	orrs	r1, r2
 80006d2:	1a5b      	subs	r3, r3, r1
 80006d4:	015a      	lsls	r2, r3, #5
 80006d6:	d459      	bmi.n	800078c <__aeabi_fadd+0x16c>
 80006d8:	2107      	movs	r1, #7
 80006da:	002a      	movs	r2, r5
 80006dc:	4019      	ands	r1, r3
 80006de:	d049      	beq.n	8000774 <__aeabi_fadd+0x154>
 80006e0:	210f      	movs	r1, #15
 80006e2:	4019      	ands	r1, r3
 80006e4:	2904      	cmp	r1, #4
 80006e6:	d000      	beq.n	80006ea <__aeabi_fadd+0xca>
 80006e8:	3304      	adds	r3, #4
 80006ea:	0159      	lsls	r1, r3, #5
 80006ec:	d542      	bpl.n	8000774 <__aeabi_fadd+0x154>
 80006ee:	1c50      	adds	r0, r2, #1
 80006f0:	2afe      	cmp	r2, #254	@ 0xfe
 80006f2:	d03a      	beq.n	800076a <__aeabi_fadd+0x14a>
 80006f4:	019b      	lsls	r3, r3, #6
 80006f6:	b2c0      	uxtb	r0, r0
 80006f8:	0a5b      	lsrs	r3, r3, #9
 80006fa:	05c0      	lsls	r0, r0, #23
 80006fc:	4318      	orrs	r0, r3
 80006fe:	07e4      	lsls	r4, r4, #31
 8000700:	4320      	orrs	r0, r4
 8000702:	bcc0      	pop	{r6, r7}
 8000704:	46b9      	mov	r9, r7
 8000706:	46b0      	mov	r8, r6
 8000708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800070a:	20fe      	movs	r0, #254	@ 0xfe
 800070c:	4680      	mov	r8, r0
 800070e:	1c6f      	adds	r7, r5, #1
 8000710:	0038      	movs	r0, r7
 8000712:	4647      	mov	r7, r8
 8000714:	4207      	tst	r7, r0
 8000716:	d000      	beq.n	800071a <__aeabi_fadd+0xfa>
 8000718:	e08e      	b.n	8000838 <__aeabi_fadd+0x218>
 800071a:	2d00      	cmp	r5, #0
 800071c:	d000      	beq.n	8000720 <__aeabi_fadd+0x100>
 800071e:	e0b4      	b.n	800088a <__aeabi_fadd+0x26a>
 8000720:	2b00      	cmp	r3, #0
 8000722:	d100      	bne.n	8000726 <__aeabi_fadd+0x106>
 8000724:	e0db      	b.n	80008de <__aeabi_fadd+0x2be>
 8000726:	2e00      	cmp	r6, #0
 8000728:	d06c      	beq.n	8000804 <__aeabi_fadd+0x1e4>
 800072a:	1b98      	subs	r0, r3, r6
 800072c:	0145      	lsls	r5, r0, #5
 800072e:	d400      	bmi.n	8000732 <__aeabi_fadd+0x112>
 8000730:	e0f7      	b.n	8000922 <__aeabi_fadd+0x302>
 8000732:	000c      	movs	r4, r1
 8000734:	1af3      	subs	r3, r6, r3
 8000736:	e03d      	b.n	80007b4 <__aeabi_fadd+0x194>
 8000738:	2e00      	cmp	r6, #0
 800073a:	d01b      	beq.n	8000774 <__aeabi_fadd+0x154>
 800073c:	1e51      	subs	r1, r2, #1
 800073e:	2a01      	cmp	r2, #1
 8000740:	d100      	bne.n	8000744 <__aeabi_fadd+0x124>
 8000742:	e082      	b.n	800084a <__aeabi_fadd+0x22a>
 8000744:	2aff      	cmp	r2, #255	@ 0xff
 8000746:	d03a      	beq.n	80007be <__aeabi_fadd+0x19e>
 8000748:	000a      	movs	r2, r1
 800074a:	e7ab      	b.n	80006a4 <__aeabi_fadd+0x84>
 800074c:	0031      	movs	r1, r6
 800074e:	2020      	movs	r0, #32
 8000750:	40d1      	lsrs	r1, r2
 8000752:	1a82      	subs	r2, r0, r2
 8000754:	4096      	lsls	r6, r2
 8000756:	0032      	movs	r2, r6
 8000758:	1e50      	subs	r0, r2, #1
 800075a:	4182      	sbcs	r2, r0
 800075c:	430a      	orrs	r2, r1
 800075e:	189b      	adds	r3, r3, r2
 8000760:	015a      	lsls	r2, r3, #5
 8000762:	d5b9      	bpl.n	80006d8 <__aeabi_fadd+0xb8>
 8000764:	1c6a      	adds	r2, r5, #1
 8000766:	2dfe      	cmp	r5, #254	@ 0xfe
 8000768:	d175      	bne.n	8000856 <__aeabi_fadd+0x236>
 800076a:	20ff      	movs	r0, #255	@ 0xff
 800076c:	2300      	movs	r3, #0
 800076e:	e7c4      	b.n	80006fa <__aeabi_fadd+0xda>
 8000770:	000c      	movs	r4, r1
 8000772:	0033      	movs	r3, r6
 8000774:	08db      	lsrs	r3, r3, #3
 8000776:	2aff      	cmp	r2, #255	@ 0xff
 8000778:	d146      	bne.n	8000808 <__aeabi_fadd+0x1e8>
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f5      	beq.n	800076a <__aeabi_fadd+0x14a>
 800077e:	2280      	movs	r2, #128	@ 0x80
 8000780:	03d2      	lsls	r2, r2, #15
 8000782:	4313      	orrs	r3, r2
 8000784:	025b      	lsls	r3, r3, #9
 8000786:	20ff      	movs	r0, #255	@ 0xff
 8000788:	0a5b      	lsrs	r3, r3, #9
 800078a:	e7b6      	b.n	80006fa <__aeabi_fadd+0xda>
 800078c:	019f      	lsls	r7, r3, #6
 800078e:	09bf      	lsrs	r7, r7, #6
 8000790:	0038      	movs	r0, r7
 8000792:	f000 fdfb 	bl	800138c <__clzsi2>
 8000796:	3805      	subs	r0, #5
 8000798:	4087      	lsls	r7, r0
 800079a:	4285      	cmp	r5, r0
 800079c:	dc24      	bgt.n	80007e8 <__aeabi_fadd+0x1c8>
 800079e:	003b      	movs	r3, r7
 80007a0:	2120      	movs	r1, #32
 80007a2:	1b42      	subs	r2, r0, r5
 80007a4:	3201      	adds	r2, #1
 80007a6:	40d3      	lsrs	r3, r2
 80007a8:	1a8a      	subs	r2, r1, r2
 80007aa:	4097      	lsls	r7, r2
 80007ac:	1e7a      	subs	r2, r7, #1
 80007ae:	4197      	sbcs	r7, r2
 80007b0:	2200      	movs	r2, #0
 80007b2:	433b      	orrs	r3, r7
 80007b4:	0759      	lsls	r1, r3, #29
 80007b6:	d193      	bne.n	80006e0 <__aeabi_fadd+0xc0>
 80007b8:	e797      	b.n	80006ea <__aeabi_fadd+0xca>
 80007ba:	000c      	movs	r4, r1
 80007bc:	0033      	movs	r3, r6
 80007be:	08db      	lsrs	r3, r3, #3
 80007c0:	e7db      	b.n	800077a <__aeabi_fadd+0x15a>
 80007c2:	2a00      	cmp	r2, #0
 80007c4:	d014      	beq.n	80007f0 <__aeabi_fadd+0x1d0>
 80007c6:	1b42      	subs	r2, r0, r5
 80007c8:	2d00      	cmp	r5, #0
 80007ca:	d14b      	bne.n	8000864 <__aeabi_fadd+0x244>
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d0d0      	beq.n	8000772 <__aeabi_fadd+0x152>
 80007d0:	1e51      	subs	r1, r2, #1
 80007d2:	2a01      	cmp	r2, #1
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fadd+0x1b8>
 80007d6:	e09e      	b.n	8000916 <__aeabi_fadd+0x2f6>
 80007d8:	2aff      	cmp	r2, #255	@ 0xff
 80007da:	d0ef      	beq.n	80007bc <__aeabi_fadd+0x19c>
 80007dc:	000a      	movs	r2, r1
 80007de:	2a1b      	cmp	r2, #27
 80007e0:	dd5f      	ble.n	80008a2 <__aeabi_fadd+0x282>
 80007e2:	0002      	movs	r2, r0
 80007e4:	1c73      	adds	r3, r6, #1
 80007e6:	e77b      	b.n	80006e0 <__aeabi_fadd+0xc0>
 80007e8:	4b50      	ldr	r3, [pc, #320]	@ (800092c <__aeabi_fadd+0x30c>)
 80007ea:	1a2a      	subs	r2, r5, r0
 80007ec:	403b      	ands	r3, r7
 80007ee:	e7e1      	b.n	80007b4 <__aeabi_fadd+0x194>
 80007f0:	21fe      	movs	r1, #254	@ 0xfe
 80007f2:	1c6a      	adds	r2, r5, #1
 80007f4:	4211      	tst	r1, r2
 80007f6:	d13b      	bne.n	8000870 <__aeabi_fadd+0x250>
 80007f8:	2d00      	cmp	r5, #0
 80007fa:	d15d      	bne.n	80008b8 <__aeabi_fadd+0x298>
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d07f      	beq.n	8000900 <__aeabi_fadd+0x2e0>
 8000800:	2e00      	cmp	r6, #0
 8000802:	d17f      	bne.n	8000904 <__aeabi_fadd+0x2e4>
 8000804:	2200      	movs	r2, #0
 8000806:	08db      	lsrs	r3, r3, #3
 8000808:	025b      	lsls	r3, r3, #9
 800080a:	0a5b      	lsrs	r3, r3, #9
 800080c:	b2d0      	uxtb	r0, r2
 800080e:	e774      	b.n	80006fa <__aeabi_fadd+0xda>
 8000810:	28ff      	cmp	r0, #255	@ 0xff
 8000812:	d0d2      	beq.n	80007ba <__aeabi_fadd+0x19a>
 8000814:	2480      	movs	r4, #128	@ 0x80
 8000816:	04e4      	lsls	r4, r4, #19
 8000818:	4323      	orrs	r3, r4
 800081a:	2401      	movs	r4, #1
 800081c:	2a1b      	cmp	r2, #27
 800081e:	dc07      	bgt.n	8000830 <__aeabi_fadd+0x210>
 8000820:	001c      	movs	r4, r3
 8000822:	2520      	movs	r5, #32
 8000824:	40d4      	lsrs	r4, r2
 8000826:	1aaa      	subs	r2, r5, r2
 8000828:	4093      	lsls	r3, r2
 800082a:	1e5a      	subs	r2, r3, #1
 800082c:	4193      	sbcs	r3, r2
 800082e:	431c      	orrs	r4, r3
 8000830:	1b33      	subs	r3, r6, r4
 8000832:	0005      	movs	r5, r0
 8000834:	000c      	movs	r4, r1
 8000836:	e74d      	b.n	80006d4 <__aeabi_fadd+0xb4>
 8000838:	1b9f      	subs	r7, r3, r6
 800083a:	017a      	lsls	r2, r7, #5
 800083c:	d422      	bmi.n	8000884 <__aeabi_fadd+0x264>
 800083e:	2f00      	cmp	r7, #0
 8000840:	d1a6      	bne.n	8000790 <__aeabi_fadd+0x170>
 8000842:	2400      	movs	r4, #0
 8000844:	2000      	movs	r0, #0
 8000846:	2300      	movs	r3, #0
 8000848:	e757      	b.n	80006fa <__aeabi_fadd+0xda>
 800084a:	199b      	adds	r3, r3, r6
 800084c:	2501      	movs	r5, #1
 800084e:	3201      	adds	r2, #1
 8000850:	0159      	lsls	r1, r3, #5
 8000852:	d400      	bmi.n	8000856 <__aeabi_fadd+0x236>
 8000854:	e740      	b.n	80006d8 <__aeabi_fadd+0xb8>
 8000856:	2101      	movs	r1, #1
 8000858:	4835      	ldr	r0, [pc, #212]	@ (8000930 <__aeabi_fadd+0x310>)
 800085a:	4019      	ands	r1, r3
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	4003      	ands	r3, r0
 8000860:	430b      	orrs	r3, r1
 8000862:	e7a7      	b.n	80007b4 <__aeabi_fadd+0x194>
 8000864:	28ff      	cmp	r0, #255	@ 0xff
 8000866:	d0a9      	beq.n	80007bc <__aeabi_fadd+0x19c>
 8000868:	2180      	movs	r1, #128	@ 0x80
 800086a:	04c9      	lsls	r1, r1, #19
 800086c:	430b      	orrs	r3, r1
 800086e:	e7b6      	b.n	80007de <__aeabi_fadd+0x1be>
 8000870:	2aff      	cmp	r2, #255	@ 0xff
 8000872:	d100      	bne.n	8000876 <__aeabi_fadd+0x256>
 8000874:	e779      	b.n	800076a <__aeabi_fadd+0x14a>
 8000876:	199b      	adds	r3, r3, r6
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	0759      	lsls	r1, r3, #29
 800087c:	d000      	beq.n	8000880 <__aeabi_fadd+0x260>
 800087e:	e72f      	b.n	80006e0 <__aeabi_fadd+0xc0>
 8000880:	08db      	lsrs	r3, r3, #3
 8000882:	e7c1      	b.n	8000808 <__aeabi_fadd+0x1e8>
 8000884:	000c      	movs	r4, r1
 8000886:	1af7      	subs	r7, r6, r3
 8000888:	e782      	b.n	8000790 <__aeabi_fadd+0x170>
 800088a:	2b00      	cmp	r3, #0
 800088c:	d12c      	bne.n	80008e8 <__aeabi_fadd+0x2c8>
 800088e:	2e00      	cmp	r6, #0
 8000890:	d193      	bne.n	80007ba <__aeabi_fadd+0x19a>
 8000892:	2380      	movs	r3, #128	@ 0x80
 8000894:	2400      	movs	r4, #0
 8000896:	20ff      	movs	r0, #255	@ 0xff
 8000898:	03db      	lsls	r3, r3, #15
 800089a:	e72e      	b.n	80006fa <__aeabi_fadd+0xda>
 800089c:	2501      	movs	r5, #1
 800089e:	1b9b      	subs	r3, r3, r6
 80008a0:	e718      	b.n	80006d4 <__aeabi_fadd+0xb4>
 80008a2:	0019      	movs	r1, r3
 80008a4:	2520      	movs	r5, #32
 80008a6:	40d1      	lsrs	r1, r2
 80008a8:	1aaa      	subs	r2, r5, r2
 80008aa:	4093      	lsls	r3, r2
 80008ac:	1e5a      	subs	r2, r3, #1
 80008ae:	4193      	sbcs	r3, r2
 80008b0:	430b      	orrs	r3, r1
 80008b2:	0005      	movs	r5, r0
 80008b4:	199b      	adds	r3, r3, r6
 80008b6:	e753      	b.n	8000760 <__aeabi_fadd+0x140>
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d100      	bne.n	80008be <__aeabi_fadd+0x29e>
 80008bc:	e77e      	b.n	80007bc <__aeabi_fadd+0x19c>
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d100      	bne.n	80008c4 <__aeabi_fadd+0x2a4>
 80008c2:	e77c      	b.n	80007be <__aeabi_fadd+0x19e>
 80008c4:	2280      	movs	r2, #128	@ 0x80
 80008c6:	03d2      	lsls	r2, r2, #15
 80008c8:	4591      	cmp	r9, r2
 80008ca:	d302      	bcc.n	80008d2 <__aeabi_fadd+0x2b2>
 80008cc:	4594      	cmp	ip, r2
 80008ce:	d200      	bcs.n	80008d2 <__aeabi_fadd+0x2b2>
 80008d0:	0033      	movs	r3, r6
 80008d2:	08db      	lsrs	r3, r3, #3
 80008d4:	e753      	b.n	800077e <__aeabi_fadd+0x15e>
 80008d6:	000c      	movs	r4, r1
 80008d8:	1af3      	subs	r3, r6, r3
 80008da:	3501      	adds	r5, #1
 80008dc:	e6fa      	b.n	80006d4 <__aeabi_fadd+0xb4>
 80008de:	2e00      	cmp	r6, #0
 80008e0:	d0af      	beq.n	8000842 <__aeabi_fadd+0x222>
 80008e2:	000c      	movs	r4, r1
 80008e4:	0033      	movs	r3, r6
 80008e6:	e78d      	b.n	8000804 <__aeabi_fadd+0x1e4>
 80008e8:	2e00      	cmp	r6, #0
 80008ea:	d100      	bne.n	80008ee <__aeabi_fadd+0x2ce>
 80008ec:	e767      	b.n	80007be <__aeabi_fadd+0x19e>
 80008ee:	2280      	movs	r2, #128	@ 0x80
 80008f0:	03d2      	lsls	r2, r2, #15
 80008f2:	4591      	cmp	r9, r2
 80008f4:	d3ed      	bcc.n	80008d2 <__aeabi_fadd+0x2b2>
 80008f6:	4594      	cmp	ip, r2
 80008f8:	d2eb      	bcs.n	80008d2 <__aeabi_fadd+0x2b2>
 80008fa:	000c      	movs	r4, r1
 80008fc:	0033      	movs	r3, r6
 80008fe:	e7e8      	b.n	80008d2 <__aeabi_fadd+0x2b2>
 8000900:	0033      	movs	r3, r6
 8000902:	e77f      	b.n	8000804 <__aeabi_fadd+0x1e4>
 8000904:	199b      	adds	r3, r3, r6
 8000906:	2200      	movs	r2, #0
 8000908:	0159      	lsls	r1, r3, #5
 800090a:	d5b9      	bpl.n	8000880 <__aeabi_fadd+0x260>
 800090c:	4a07      	ldr	r2, [pc, #28]	@ (800092c <__aeabi_fadd+0x30c>)
 800090e:	4013      	ands	r3, r2
 8000910:	08db      	lsrs	r3, r3, #3
 8000912:	2201      	movs	r2, #1
 8000914:	e778      	b.n	8000808 <__aeabi_fadd+0x1e8>
 8000916:	199b      	adds	r3, r3, r6
 8000918:	3201      	adds	r2, #1
 800091a:	3501      	adds	r5, #1
 800091c:	0159      	lsls	r1, r3, #5
 800091e:	d49a      	bmi.n	8000856 <__aeabi_fadd+0x236>
 8000920:	e6da      	b.n	80006d8 <__aeabi_fadd+0xb8>
 8000922:	1e03      	subs	r3, r0, #0
 8000924:	d08d      	beq.n	8000842 <__aeabi_fadd+0x222>
 8000926:	08db      	lsrs	r3, r3, #3
 8000928:	e76e      	b.n	8000808 <__aeabi_fadd+0x1e8>
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	fbffffff 	.word	0xfbffffff
 8000930:	7dffffff 	.word	0x7dffffff

08000934 <__aeabi_fdiv>:
 8000934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000936:	464f      	mov	r7, r9
 8000938:	4646      	mov	r6, r8
 800093a:	46d6      	mov	lr, sl
 800093c:	0244      	lsls	r4, r0, #9
 800093e:	b5c0      	push	{r6, r7, lr}
 8000940:	0047      	lsls	r7, r0, #1
 8000942:	1c0e      	adds	r6, r1, #0
 8000944:	0a64      	lsrs	r4, r4, #9
 8000946:	0e3f      	lsrs	r7, r7, #24
 8000948:	0fc5      	lsrs	r5, r0, #31
 800094a:	2f00      	cmp	r7, #0
 800094c:	d03c      	beq.n	80009c8 <__aeabi_fdiv+0x94>
 800094e:	2fff      	cmp	r7, #255	@ 0xff
 8000950:	d042      	beq.n	80009d8 <__aeabi_fdiv+0xa4>
 8000952:	2300      	movs	r3, #0
 8000954:	2280      	movs	r2, #128	@ 0x80
 8000956:	4699      	mov	r9, r3
 8000958:	469a      	mov	sl, r3
 800095a:	00e4      	lsls	r4, r4, #3
 800095c:	04d2      	lsls	r2, r2, #19
 800095e:	4314      	orrs	r4, r2
 8000960:	3f7f      	subs	r7, #127	@ 0x7f
 8000962:	0273      	lsls	r3, r6, #9
 8000964:	0a5b      	lsrs	r3, r3, #9
 8000966:	4698      	mov	r8, r3
 8000968:	0073      	lsls	r3, r6, #1
 800096a:	0e1b      	lsrs	r3, r3, #24
 800096c:	0ff6      	lsrs	r6, r6, #31
 800096e:	2b00      	cmp	r3, #0
 8000970:	d01b      	beq.n	80009aa <__aeabi_fdiv+0x76>
 8000972:	2bff      	cmp	r3, #255	@ 0xff
 8000974:	d013      	beq.n	800099e <__aeabi_fdiv+0x6a>
 8000976:	4642      	mov	r2, r8
 8000978:	2180      	movs	r1, #128	@ 0x80
 800097a:	00d2      	lsls	r2, r2, #3
 800097c:	04c9      	lsls	r1, r1, #19
 800097e:	4311      	orrs	r1, r2
 8000980:	4688      	mov	r8, r1
 8000982:	2000      	movs	r0, #0
 8000984:	3b7f      	subs	r3, #127	@ 0x7f
 8000986:	0029      	movs	r1, r5
 8000988:	1aff      	subs	r7, r7, r3
 800098a:	464b      	mov	r3, r9
 800098c:	4071      	eors	r1, r6
 800098e:	b2c9      	uxtb	r1, r1
 8000990:	2b0f      	cmp	r3, #15
 8000992:	d900      	bls.n	8000996 <__aeabi_fdiv+0x62>
 8000994:	e0b5      	b.n	8000b02 <__aeabi_fdiv+0x1ce>
 8000996:	4a74      	ldr	r2, [pc, #464]	@ (8000b68 <__aeabi_fdiv+0x234>)
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	58d3      	ldr	r3, [r2, r3]
 800099c:	469f      	mov	pc, r3
 800099e:	4643      	mov	r3, r8
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d13f      	bne.n	8000a24 <__aeabi_fdiv+0xf0>
 80009a4:	3fff      	subs	r7, #255	@ 0xff
 80009a6:	3302      	adds	r3, #2
 80009a8:	e003      	b.n	80009b2 <__aeabi_fdiv+0x7e>
 80009aa:	4643      	mov	r3, r8
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d12d      	bne.n	8000a0c <__aeabi_fdiv+0xd8>
 80009b0:	2301      	movs	r3, #1
 80009b2:	0029      	movs	r1, r5
 80009b4:	464a      	mov	r2, r9
 80009b6:	4071      	eors	r1, r6
 80009b8:	b2c9      	uxtb	r1, r1
 80009ba:	431a      	orrs	r2, r3
 80009bc:	2a0e      	cmp	r2, #14
 80009be:	d838      	bhi.n	8000a32 <__aeabi_fdiv+0xfe>
 80009c0:	486a      	ldr	r0, [pc, #424]	@ (8000b6c <__aeabi_fdiv+0x238>)
 80009c2:	0092      	lsls	r2, r2, #2
 80009c4:	5882      	ldr	r2, [r0, r2]
 80009c6:	4697      	mov	pc, r2
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	d113      	bne.n	80009f4 <__aeabi_fdiv+0xc0>
 80009cc:	2304      	movs	r3, #4
 80009ce:	4699      	mov	r9, r3
 80009d0:	3b03      	subs	r3, #3
 80009d2:	2700      	movs	r7, #0
 80009d4:	469a      	mov	sl, r3
 80009d6:	e7c4      	b.n	8000962 <__aeabi_fdiv+0x2e>
 80009d8:	2c00      	cmp	r4, #0
 80009da:	d105      	bne.n	80009e8 <__aeabi_fdiv+0xb4>
 80009dc:	2308      	movs	r3, #8
 80009de:	4699      	mov	r9, r3
 80009e0:	3b06      	subs	r3, #6
 80009e2:	27ff      	movs	r7, #255	@ 0xff
 80009e4:	469a      	mov	sl, r3
 80009e6:	e7bc      	b.n	8000962 <__aeabi_fdiv+0x2e>
 80009e8:	230c      	movs	r3, #12
 80009ea:	4699      	mov	r9, r3
 80009ec:	3b09      	subs	r3, #9
 80009ee:	27ff      	movs	r7, #255	@ 0xff
 80009f0:	469a      	mov	sl, r3
 80009f2:	e7b6      	b.n	8000962 <__aeabi_fdiv+0x2e>
 80009f4:	0020      	movs	r0, r4
 80009f6:	f000 fcc9 	bl	800138c <__clzsi2>
 80009fa:	2776      	movs	r7, #118	@ 0x76
 80009fc:	1f43      	subs	r3, r0, #5
 80009fe:	409c      	lsls	r4, r3
 8000a00:	2300      	movs	r3, #0
 8000a02:	427f      	negs	r7, r7
 8000a04:	4699      	mov	r9, r3
 8000a06:	469a      	mov	sl, r3
 8000a08:	1a3f      	subs	r7, r7, r0
 8000a0a:	e7aa      	b.n	8000962 <__aeabi_fdiv+0x2e>
 8000a0c:	4640      	mov	r0, r8
 8000a0e:	f000 fcbd 	bl	800138c <__clzsi2>
 8000a12:	4642      	mov	r2, r8
 8000a14:	1f43      	subs	r3, r0, #5
 8000a16:	409a      	lsls	r2, r3
 8000a18:	2376      	movs	r3, #118	@ 0x76
 8000a1a:	425b      	negs	r3, r3
 8000a1c:	1a1b      	subs	r3, r3, r0
 8000a1e:	4690      	mov	r8, r2
 8000a20:	2000      	movs	r0, #0
 8000a22:	e7b0      	b.n	8000986 <__aeabi_fdiv+0x52>
 8000a24:	2303      	movs	r3, #3
 8000a26:	464a      	mov	r2, r9
 8000a28:	431a      	orrs	r2, r3
 8000a2a:	4691      	mov	r9, r2
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	33fc      	adds	r3, #252	@ 0xfc
 8000a30:	e7a9      	b.n	8000986 <__aeabi_fdiv+0x52>
 8000a32:	000d      	movs	r5, r1
 8000a34:	20ff      	movs	r0, #255	@ 0xff
 8000a36:	2200      	movs	r2, #0
 8000a38:	05c0      	lsls	r0, r0, #23
 8000a3a:	07ed      	lsls	r5, r5, #31
 8000a3c:	4310      	orrs	r0, r2
 8000a3e:	4328      	orrs	r0, r5
 8000a40:	bce0      	pop	{r5, r6, r7}
 8000a42:	46ba      	mov	sl, r7
 8000a44:	46b1      	mov	r9, r6
 8000a46:	46a8      	mov	r8, r5
 8000a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a4a:	000d      	movs	r5, r1
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	2200      	movs	r2, #0
 8000a50:	e7f2      	b.n	8000a38 <__aeabi_fdiv+0x104>
 8000a52:	4653      	mov	r3, sl
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	d0ed      	beq.n	8000a34 <__aeabi_fdiv+0x100>
 8000a58:	2b03      	cmp	r3, #3
 8000a5a:	d033      	beq.n	8000ac4 <__aeabi_fdiv+0x190>
 8000a5c:	46a0      	mov	r8, r4
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d105      	bne.n	8000a6e <__aeabi_fdiv+0x13a>
 8000a62:	2000      	movs	r0, #0
 8000a64:	2200      	movs	r2, #0
 8000a66:	e7e7      	b.n	8000a38 <__aeabi_fdiv+0x104>
 8000a68:	0035      	movs	r5, r6
 8000a6a:	2803      	cmp	r0, #3
 8000a6c:	d07a      	beq.n	8000b64 <__aeabi_fdiv+0x230>
 8000a6e:	003b      	movs	r3, r7
 8000a70:	337f      	adds	r3, #127	@ 0x7f
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	dd2d      	ble.n	8000ad2 <__aeabi_fdiv+0x19e>
 8000a76:	4642      	mov	r2, r8
 8000a78:	0752      	lsls	r2, r2, #29
 8000a7a:	d007      	beq.n	8000a8c <__aeabi_fdiv+0x158>
 8000a7c:	220f      	movs	r2, #15
 8000a7e:	4641      	mov	r1, r8
 8000a80:	400a      	ands	r2, r1
 8000a82:	2a04      	cmp	r2, #4
 8000a84:	d002      	beq.n	8000a8c <__aeabi_fdiv+0x158>
 8000a86:	2204      	movs	r2, #4
 8000a88:	4694      	mov	ip, r2
 8000a8a:	44e0      	add	r8, ip
 8000a8c:	4642      	mov	r2, r8
 8000a8e:	0112      	lsls	r2, r2, #4
 8000a90:	d505      	bpl.n	8000a9e <__aeabi_fdiv+0x16a>
 8000a92:	4642      	mov	r2, r8
 8000a94:	4b36      	ldr	r3, [pc, #216]	@ (8000b70 <__aeabi_fdiv+0x23c>)
 8000a96:	401a      	ands	r2, r3
 8000a98:	003b      	movs	r3, r7
 8000a9a:	4690      	mov	r8, r2
 8000a9c:	3380      	adds	r3, #128	@ 0x80
 8000a9e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000aa0:	dcc8      	bgt.n	8000a34 <__aeabi_fdiv+0x100>
 8000aa2:	4642      	mov	r2, r8
 8000aa4:	0192      	lsls	r2, r2, #6
 8000aa6:	0a52      	lsrs	r2, r2, #9
 8000aa8:	b2d8      	uxtb	r0, r3
 8000aaa:	e7c5      	b.n	8000a38 <__aeabi_fdiv+0x104>
 8000aac:	2280      	movs	r2, #128	@ 0x80
 8000aae:	2500      	movs	r5, #0
 8000ab0:	20ff      	movs	r0, #255	@ 0xff
 8000ab2:	03d2      	lsls	r2, r2, #15
 8000ab4:	e7c0      	b.n	8000a38 <__aeabi_fdiv+0x104>
 8000ab6:	2280      	movs	r2, #128	@ 0x80
 8000ab8:	03d2      	lsls	r2, r2, #15
 8000aba:	4214      	tst	r4, r2
 8000abc:	d002      	beq.n	8000ac4 <__aeabi_fdiv+0x190>
 8000abe:	4643      	mov	r3, r8
 8000ac0:	4213      	tst	r3, r2
 8000ac2:	d049      	beq.n	8000b58 <__aeabi_fdiv+0x224>
 8000ac4:	2280      	movs	r2, #128	@ 0x80
 8000ac6:	03d2      	lsls	r2, r2, #15
 8000ac8:	4322      	orrs	r2, r4
 8000aca:	0252      	lsls	r2, r2, #9
 8000acc:	20ff      	movs	r0, #255	@ 0xff
 8000ace:	0a52      	lsrs	r2, r2, #9
 8000ad0:	e7b2      	b.n	8000a38 <__aeabi_fdiv+0x104>
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	2b1b      	cmp	r3, #27
 8000ad8:	dcc3      	bgt.n	8000a62 <__aeabi_fdiv+0x12e>
 8000ada:	4642      	mov	r2, r8
 8000adc:	40da      	lsrs	r2, r3
 8000ade:	4643      	mov	r3, r8
 8000ae0:	379e      	adds	r7, #158	@ 0x9e
 8000ae2:	40bb      	lsls	r3, r7
 8000ae4:	1e59      	subs	r1, r3, #1
 8000ae6:	418b      	sbcs	r3, r1
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	0753      	lsls	r3, r2, #29
 8000aec:	d004      	beq.n	8000af8 <__aeabi_fdiv+0x1c4>
 8000aee:	230f      	movs	r3, #15
 8000af0:	4013      	ands	r3, r2
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	d000      	beq.n	8000af8 <__aeabi_fdiv+0x1c4>
 8000af6:	3204      	adds	r2, #4
 8000af8:	0153      	lsls	r3, r2, #5
 8000afa:	d529      	bpl.n	8000b50 <__aeabi_fdiv+0x21c>
 8000afc:	2001      	movs	r0, #1
 8000afe:	2200      	movs	r2, #0
 8000b00:	e79a      	b.n	8000a38 <__aeabi_fdiv+0x104>
 8000b02:	4642      	mov	r2, r8
 8000b04:	0163      	lsls	r3, r4, #5
 8000b06:	0155      	lsls	r5, r2, #5
 8000b08:	42ab      	cmp	r3, r5
 8000b0a:	d215      	bcs.n	8000b38 <__aeabi_fdiv+0x204>
 8000b0c:	201b      	movs	r0, #27
 8000b0e:	2200      	movs	r2, #0
 8000b10:	3f01      	subs	r7, #1
 8000b12:	2601      	movs	r6, #1
 8000b14:	001c      	movs	r4, r3
 8000b16:	0052      	lsls	r2, r2, #1
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	2c00      	cmp	r4, #0
 8000b1c:	db01      	blt.n	8000b22 <__aeabi_fdiv+0x1ee>
 8000b1e:	429d      	cmp	r5, r3
 8000b20:	d801      	bhi.n	8000b26 <__aeabi_fdiv+0x1f2>
 8000b22:	1b5b      	subs	r3, r3, r5
 8000b24:	4332      	orrs	r2, r6
 8000b26:	3801      	subs	r0, #1
 8000b28:	2800      	cmp	r0, #0
 8000b2a:	d1f3      	bne.n	8000b14 <__aeabi_fdiv+0x1e0>
 8000b2c:	1e58      	subs	r0, r3, #1
 8000b2e:	4183      	sbcs	r3, r0
 8000b30:	4313      	orrs	r3, r2
 8000b32:	4698      	mov	r8, r3
 8000b34:	000d      	movs	r5, r1
 8000b36:	e79a      	b.n	8000a6e <__aeabi_fdiv+0x13a>
 8000b38:	201a      	movs	r0, #26
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	1b5b      	subs	r3, r3, r5
 8000b3e:	e7e8      	b.n	8000b12 <__aeabi_fdiv+0x1de>
 8000b40:	3b02      	subs	r3, #2
 8000b42:	425a      	negs	r2, r3
 8000b44:	4153      	adcs	r3, r2
 8000b46:	425b      	negs	r3, r3
 8000b48:	0035      	movs	r5, r6
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	b2d8      	uxtb	r0, r3
 8000b4e:	e773      	b.n	8000a38 <__aeabi_fdiv+0x104>
 8000b50:	0192      	lsls	r2, r2, #6
 8000b52:	2000      	movs	r0, #0
 8000b54:	0a52      	lsrs	r2, r2, #9
 8000b56:	e76f      	b.n	8000a38 <__aeabi_fdiv+0x104>
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	0252      	lsls	r2, r2, #9
 8000b5c:	0035      	movs	r5, r6
 8000b5e:	20ff      	movs	r0, #255	@ 0xff
 8000b60:	0a52      	lsrs	r2, r2, #9
 8000b62:	e769      	b.n	8000a38 <__aeabi_fdiv+0x104>
 8000b64:	4644      	mov	r4, r8
 8000b66:	e7ad      	b.n	8000ac4 <__aeabi_fdiv+0x190>
 8000b68:	08009cc8 	.word	0x08009cc8
 8000b6c:	08009d08 	.word	0x08009d08
 8000b70:	f7ffffff 	.word	0xf7ffffff

08000b74 <__aeabi_fmul>:
 8000b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b76:	464f      	mov	r7, r9
 8000b78:	4646      	mov	r6, r8
 8000b7a:	46d6      	mov	lr, sl
 8000b7c:	0243      	lsls	r3, r0, #9
 8000b7e:	0a5b      	lsrs	r3, r3, #9
 8000b80:	0045      	lsls	r5, r0, #1
 8000b82:	b5c0      	push	{r6, r7, lr}
 8000b84:	4699      	mov	r9, r3
 8000b86:	1c0f      	adds	r7, r1, #0
 8000b88:	0e2d      	lsrs	r5, r5, #24
 8000b8a:	0fc6      	lsrs	r6, r0, #31
 8000b8c:	2d00      	cmp	r5, #0
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_fmul+0x1e>
 8000b90:	e088      	b.n	8000ca4 <__aeabi_fmul+0x130>
 8000b92:	2dff      	cmp	r5, #255	@ 0xff
 8000b94:	d100      	bne.n	8000b98 <__aeabi_fmul+0x24>
 8000b96:	e08d      	b.n	8000cb4 <__aeabi_fmul+0x140>
 8000b98:	2280      	movs	r2, #128	@ 0x80
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	04d2      	lsls	r2, r2, #19
 8000b9e:	431a      	orrs	r2, r3
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	4691      	mov	r9, r2
 8000ba4:	4698      	mov	r8, r3
 8000ba6:	469a      	mov	sl, r3
 8000ba8:	3d7f      	subs	r5, #127	@ 0x7f
 8000baa:	027c      	lsls	r4, r7, #9
 8000bac:	007b      	lsls	r3, r7, #1
 8000bae:	0a64      	lsrs	r4, r4, #9
 8000bb0:	0e1b      	lsrs	r3, r3, #24
 8000bb2:	0fff      	lsrs	r7, r7, #31
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d068      	beq.n	8000c8a <__aeabi_fmul+0x116>
 8000bb8:	2bff      	cmp	r3, #255	@ 0xff
 8000bba:	d021      	beq.n	8000c00 <__aeabi_fmul+0x8c>
 8000bbc:	2280      	movs	r2, #128	@ 0x80
 8000bbe:	00e4      	lsls	r4, r4, #3
 8000bc0:	04d2      	lsls	r2, r2, #19
 8000bc2:	4314      	orrs	r4, r2
 8000bc4:	4642      	mov	r2, r8
 8000bc6:	3b7f      	subs	r3, #127	@ 0x7f
 8000bc8:	195b      	adds	r3, r3, r5
 8000bca:	2100      	movs	r1, #0
 8000bcc:	1c5d      	adds	r5, r3, #1
 8000bce:	2a0a      	cmp	r2, #10
 8000bd0:	dc2e      	bgt.n	8000c30 <__aeabi_fmul+0xbc>
 8000bd2:	407e      	eors	r6, r7
 8000bd4:	4642      	mov	r2, r8
 8000bd6:	2a02      	cmp	r2, #2
 8000bd8:	dc23      	bgt.n	8000c22 <__aeabi_fmul+0xae>
 8000bda:	3a01      	subs	r2, #1
 8000bdc:	2a01      	cmp	r2, #1
 8000bde:	d900      	bls.n	8000be2 <__aeabi_fmul+0x6e>
 8000be0:	e0bd      	b.n	8000d5e <__aeabi_fmul+0x1ea>
 8000be2:	2902      	cmp	r1, #2
 8000be4:	d06e      	beq.n	8000cc4 <__aeabi_fmul+0x150>
 8000be6:	2901      	cmp	r1, #1
 8000be8:	d12c      	bne.n	8000c44 <__aeabi_fmul+0xd0>
 8000bea:	2000      	movs	r0, #0
 8000bec:	2200      	movs	r2, #0
 8000bee:	05c0      	lsls	r0, r0, #23
 8000bf0:	07f6      	lsls	r6, r6, #31
 8000bf2:	4310      	orrs	r0, r2
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	bce0      	pop	{r5, r6, r7}
 8000bf8:	46ba      	mov	sl, r7
 8000bfa:	46b1      	mov	r9, r6
 8000bfc:	46a8      	mov	r8, r5
 8000bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c00:	002b      	movs	r3, r5
 8000c02:	33ff      	adds	r3, #255	@ 0xff
 8000c04:	2c00      	cmp	r4, #0
 8000c06:	d065      	beq.n	8000cd4 <__aeabi_fmul+0x160>
 8000c08:	2203      	movs	r2, #3
 8000c0a:	4641      	mov	r1, r8
 8000c0c:	4311      	orrs	r1, r2
 8000c0e:	0032      	movs	r2, r6
 8000c10:	3501      	adds	r5, #1
 8000c12:	4688      	mov	r8, r1
 8000c14:	407a      	eors	r2, r7
 8000c16:	35ff      	adds	r5, #255	@ 0xff
 8000c18:	290a      	cmp	r1, #10
 8000c1a:	dd00      	ble.n	8000c1e <__aeabi_fmul+0xaa>
 8000c1c:	e0d8      	b.n	8000dd0 <__aeabi_fmul+0x25c>
 8000c1e:	0016      	movs	r6, r2
 8000c20:	2103      	movs	r1, #3
 8000c22:	4640      	mov	r0, r8
 8000c24:	2201      	movs	r2, #1
 8000c26:	4082      	lsls	r2, r0
 8000c28:	20a6      	movs	r0, #166	@ 0xa6
 8000c2a:	00c0      	lsls	r0, r0, #3
 8000c2c:	4202      	tst	r2, r0
 8000c2e:	d020      	beq.n	8000c72 <__aeabi_fmul+0xfe>
 8000c30:	4653      	mov	r3, sl
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d046      	beq.n	8000cc4 <__aeabi_fmul+0x150>
 8000c36:	2b03      	cmp	r3, #3
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fmul+0xc8>
 8000c3a:	e0bb      	b.n	8000db4 <__aeabi_fmul+0x240>
 8000c3c:	4651      	mov	r1, sl
 8000c3e:	464c      	mov	r4, r9
 8000c40:	2901      	cmp	r1, #1
 8000c42:	d0d2      	beq.n	8000bea <__aeabi_fmul+0x76>
 8000c44:	002b      	movs	r3, r5
 8000c46:	337f      	adds	r3, #127	@ 0x7f
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	dd70      	ble.n	8000d2e <__aeabi_fmul+0x1ba>
 8000c4c:	0762      	lsls	r2, r4, #29
 8000c4e:	d004      	beq.n	8000c5a <__aeabi_fmul+0xe6>
 8000c50:	220f      	movs	r2, #15
 8000c52:	4022      	ands	r2, r4
 8000c54:	2a04      	cmp	r2, #4
 8000c56:	d000      	beq.n	8000c5a <__aeabi_fmul+0xe6>
 8000c58:	3404      	adds	r4, #4
 8000c5a:	0122      	lsls	r2, r4, #4
 8000c5c:	d503      	bpl.n	8000c66 <__aeabi_fmul+0xf2>
 8000c5e:	4b63      	ldr	r3, [pc, #396]	@ (8000dec <__aeabi_fmul+0x278>)
 8000c60:	401c      	ands	r4, r3
 8000c62:	002b      	movs	r3, r5
 8000c64:	3380      	adds	r3, #128	@ 0x80
 8000c66:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c68:	dc2c      	bgt.n	8000cc4 <__aeabi_fmul+0x150>
 8000c6a:	01a2      	lsls	r2, r4, #6
 8000c6c:	0a52      	lsrs	r2, r2, #9
 8000c6e:	b2d8      	uxtb	r0, r3
 8000c70:	e7bd      	b.n	8000bee <__aeabi_fmul+0x7a>
 8000c72:	2090      	movs	r0, #144	@ 0x90
 8000c74:	0080      	lsls	r0, r0, #2
 8000c76:	4202      	tst	r2, r0
 8000c78:	d127      	bne.n	8000cca <__aeabi_fmul+0x156>
 8000c7a:	38b9      	subs	r0, #185	@ 0xb9
 8000c7c:	38ff      	subs	r0, #255	@ 0xff
 8000c7e:	4210      	tst	r0, r2
 8000c80:	d06d      	beq.n	8000d5e <__aeabi_fmul+0x1ea>
 8000c82:	003e      	movs	r6, r7
 8000c84:	46a1      	mov	r9, r4
 8000c86:	468a      	mov	sl, r1
 8000c88:	e7d2      	b.n	8000c30 <__aeabi_fmul+0xbc>
 8000c8a:	2c00      	cmp	r4, #0
 8000c8c:	d141      	bne.n	8000d12 <__aeabi_fmul+0x19e>
 8000c8e:	2301      	movs	r3, #1
 8000c90:	4642      	mov	r2, r8
 8000c92:	431a      	orrs	r2, r3
 8000c94:	4690      	mov	r8, r2
 8000c96:	002b      	movs	r3, r5
 8000c98:	4642      	mov	r2, r8
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	1c5d      	adds	r5, r3, #1
 8000c9e:	2a0a      	cmp	r2, #10
 8000ca0:	dd97      	ble.n	8000bd2 <__aeabi_fmul+0x5e>
 8000ca2:	e7c5      	b.n	8000c30 <__aeabi_fmul+0xbc>
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d126      	bne.n	8000cf6 <__aeabi_fmul+0x182>
 8000ca8:	2304      	movs	r3, #4
 8000caa:	4698      	mov	r8, r3
 8000cac:	3b03      	subs	r3, #3
 8000cae:	2500      	movs	r5, #0
 8000cb0:	469a      	mov	sl, r3
 8000cb2:	e77a      	b.n	8000baa <__aeabi_fmul+0x36>
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d118      	bne.n	8000cea <__aeabi_fmul+0x176>
 8000cb8:	2308      	movs	r3, #8
 8000cba:	4698      	mov	r8, r3
 8000cbc:	3b06      	subs	r3, #6
 8000cbe:	25ff      	movs	r5, #255	@ 0xff
 8000cc0:	469a      	mov	sl, r3
 8000cc2:	e772      	b.n	8000baa <__aeabi_fmul+0x36>
 8000cc4:	20ff      	movs	r0, #255	@ 0xff
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	e791      	b.n	8000bee <__aeabi_fmul+0x7a>
 8000cca:	2280      	movs	r2, #128	@ 0x80
 8000ccc:	2600      	movs	r6, #0
 8000cce:	20ff      	movs	r0, #255	@ 0xff
 8000cd0:	03d2      	lsls	r2, r2, #15
 8000cd2:	e78c      	b.n	8000bee <__aeabi_fmul+0x7a>
 8000cd4:	4641      	mov	r1, r8
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	3501      	adds	r5, #1
 8000cda:	4311      	orrs	r1, r2
 8000cdc:	4688      	mov	r8, r1
 8000cde:	35ff      	adds	r5, #255	@ 0xff
 8000ce0:	290a      	cmp	r1, #10
 8000ce2:	dca5      	bgt.n	8000c30 <__aeabi_fmul+0xbc>
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	407e      	eors	r6, r7
 8000ce8:	e774      	b.n	8000bd4 <__aeabi_fmul+0x60>
 8000cea:	230c      	movs	r3, #12
 8000cec:	4698      	mov	r8, r3
 8000cee:	3b09      	subs	r3, #9
 8000cf0:	25ff      	movs	r5, #255	@ 0xff
 8000cf2:	469a      	mov	sl, r3
 8000cf4:	e759      	b.n	8000baa <__aeabi_fmul+0x36>
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f000 fb48 	bl	800138c <__clzsi2>
 8000cfc:	464a      	mov	r2, r9
 8000cfe:	1f43      	subs	r3, r0, #5
 8000d00:	2576      	movs	r5, #118	@ 0x76
 8000d02:	409a      	lsls	r2, r3
 8000d04:	2300      	movs	r3, #0
 8000d06:	426d      	negs	r5, r5
 8000d08:	4691      	mov	r9, r2
 8000d0a:	4698      	mov	r8, r3
 8000d0c:	469a      	mov	sl, r3
 8000d0e:	1a2d      	subs	r5, r5, r0
 8000d10:	e74b      	b.n	8000baa <__aeabi_fmul+0x36>
 8000d12:	0020      	movs	r0, r4
 8000d14:	f000 fb3a 	bl	800138c <__clzsi2>
 8000d18:	4642      	mov	r2, r8
 8000d1a:	1f43      	subs	r3, r0, #5
 8000d1c:	409c      	lsls	r4, r3
 8000d1e:	1a2b      	subs	r3, r5, r0
 8000d20:	3b76      	subs	r3, #118	@ 0x76
 8000d22:	2100      	movs	r1, #0
 8000d24:	1c5d      	adds	r5, r3, #1
 8000d26:	2a0a      	cmp	r2, #10
 8000d28:	dc00      	bgt.n	8000d2c <__aeabi_fmul+0x1b8>
 8000d2a:	e752      	b.n	8000bd2 <__aeabi_fmul+0x5e>
 8000d2c:	e780      	b.n	8000c30 <__aeabi_fmul+0xbc>
 8000d2e:	2201      	movs	r2, #1
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	2b1b      	cmp	r3, #27
 8000d34:	dd00      	ble.n	8000d38 <__aeabi_fmul+0x1c4>
 8000d36:	e758      	b.n	8000bea <__aeabi_fmul+0x76>
 8000d38:	359e      	adds	r5, #158	@ 0x9e
 8000d3a:	0022      	movs	r2, r4
 8000d3c:	40ac      	lsls	r4, r5
 8000d3e:	40da      	lsrs	r2, r3
 8000d40:	1e63      	subs	r3, r4, #1
 8000d42:	419c      	sbcs	r4, r3
 8000d44:	4322      	orrs	r2, r4
 8000d46:	0753      	lsls	r3, r2, #29
 8000d48:	d004      	beq.n	8000d54 <__aeabi_fmul+0x1e0>
 8000d4a:	230f      	movs	r3, #15
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	d000      	beq.n	8000d54 <__aeabi_fmul+0x1e0>
 8000d52:	3204      	adds	r2, #4
 8000d54:	0153      	lsls	r3, r2, #5
 8000d56:	d537      	bpl.n	8000dc8 <__aeabi_fmul+0x254>
 8000d58:	2001      	movs	r0, #1
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	e747      	b.n	8000bee <__aeabi_fmul+0x7a>
 8000d5e:	0c21      	lsrs	r1, r4, #16
 8000d60:	464a      	mov	r2, r9
 8000d62:	0424      	lsls	r4, r4, #16
 8000d64:	0c24      	lsrs	r4, r4, #16
 8000d66:	0027      	movs	r7, r4
 8000d68:	0c10      	lsrs	r0, r2, #16
 8000d6a:	0412      	lsls	r2, r2, #16
 8000d6c:	0c12      	lsrs	r2, r2, #16
 8000d6e:	4344      	muls	r4, r0
 8000d70:	4357      	muls	r7, r2
 8000d72:	4348      	muls	r0, r1
 8000d74:	4351      	muls	r1, r2
 8000d76:	0c3a      	lsrs	r2, r7, #16
 8000d78:	1909      	adds	r1, r1, r4
 8000d7a:	1852      	adds	r2, r2, r1
 8000d7c:	4294      	cmp	r4, r2
 8000d7e:	d903      	bls.n	8000d88 <__aeabi_fmul+0x214>
 8000d80:	2180      	movs	r1, #128	@ 0x80
 8000d82:	0249      	lsls	r1, r1, #9
 8000d84:	468c      	mov	ip, r1
 8000d86:	4460      	add	r0, ip
 8000d88:	043f      	lsls	r7, r7, #16
 8000d8a:	0411      	lsls	r1, r2, #16
 8000d8c:	0c3f      	lsrs	r7, r7, #16
 8000d8e:	19c9      	adds	r1, r1, r7
 8000d90:	018c      	lsls	r4, r1, #6
 8000d92:	1e67      	subs	r7, r4, #1
 8000d94:	41bc      	sbcs	r4, r7
 8000d96:	0c12      	lsrs	r2, r2, #16
 8000d98:	0e89      	lsrs	r1, r1, #26
 8000d9a:	1812      	adds	r2, r2, r0
 8000d9c:	430c      	orrs	r4, r1
 8000d9e:	0192      	lsls	r2, r2, #6
 8000da0:	4314      	orrs	r4, r2
 8000da2:	0112      	lsls	r2, r2, #4
 8000da4:	d50e      	bpl.n	8000dc4 <__aeabi_fmul+0x250>
 8000da6:	2301      	movs	r3, #1
 8000da8:	0862      	lsrs	r2, r4, #1
 8000daa:	401c      	ands	r4, r3
 8000dac:	4314      	orrs	r4, r2
 8000dae:	e749      	b.n	8000c44 <__aeabi_fmul+0xd0>
 8000db0:	003e      	movs	r6, r7
 8000db2:	46a1      	mov	r9, r4
 8000db4:	2280      	movs	r2, #128	@ 0x80
 8000db6:	464b      	mov	r3, r9
 8000db8:	03d2      	lsls	r2, r2, #15
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	0252      	lsls	r2, r2, #9
 8000dbe:	20ff      	movs	r0, #255	@ 0xff
 8000dc0:	0a52      	lsrs	r2, r2, #9
 8000dc2:	e714      	b.n	8000bee <__aeabi_fmul+0x7a>
 8000dc4:	001d      	movs	r5, r3
 8000dc6:	e73d      	b.n	8000c44 <__aeabi_fmul+0xd0>
 8000dc8:	0192      	lsls	r2, r2, #6
 8000dca:	2000      	movs	r0, #0
 8000dcc:	0a52      	lsrs	r2, r2, #9
 8000dce:	e70e      	b.n	8000bee <__aeabi_fmul+0x7a>
 8000dd0:	290f      	cmp	r1, #15
 8000dd2:	d1ed      	bne.n	8000db0 <__aeabi_fmul+0x23c>
 8000dd4:	2280      	movs	r2, #128	@ 0x80
 8000dd6:	464b      	mov	r3, r9
 8000dd8:	03d2      	lsls	r2, r2, #15
 8000dda:	4213      	tst	r3, r2
 8000ddc:	d0ea      	beq.n	8000db4 <__aeabi_fmul+0x240>
 8000dde:	4214      	tst	r4, r2
 8000de0:	d1e8      	bne.n	8000db4 <__aeabi_fmul+0x240>
 8000de2:	003e      	movs	r6, r7
 8000de4:	20ff      	movs	r0, #255	@ 0xff
 8000de6:	4322      	orrs	r2, r4
 8000de8:	e701      	b.n	8000bee <__aeabi_fmul+0x7a>
 8000dea:	46c0      	nop			@ (mov r8, r8)
 8000dec:	f7ffffff 	.word	0xf7ffffff

08000df0 <__aeabi_fsub>:
 8000df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df2:	4647      	mov	r7, r8
 8000df4:	46ce      	mov	lr, r9
 8000df6:	024e      	lsls	r6, r1, #9
 8000df8:	0243      	lsls	r3, r0, #9
 8000dfa:	0045      	lsls	r5, r0, #1
 8000dfc:	0a72      	lsrs	r2, r6, #9
 8000dfe:	0fc4      	lsrs	r4, r0, #31
 8000e00:	0048      	lsls	r0, r1, #1
 8000e02:	b580      	push	{r7, lr}
 8000e04:	4694      	mov	ip, r2
 8000e06:	0a5f      	lsrs	r7, r3, #9
 8000e08:	0e2d      	lsrs	r5, r5, #24
 8000e0a:	099b      	lsrs	r3, r3, #6
 8000e0c:	0e00      	lsrs	r0, r0, #24
 8000e0e:	0fc9      	lsrs	r1, r1, #31
 8000e10:	09b6      	lsrs	r6, r6, #6
 8000e12:	28ff      	cmp	r0, #255	@ 0xff
 8000e14:	d024      	beq.n	8000e60 <__aeabi_fsub+0x70>
 8000e16:	2201      	movs	r2, #1
 8000e18:	4051      	eors	r1, r2
 8000e1a:	1a2a      	subs	r2, r5, r0
 8000e1c:	428c      	cmp	r4, r1
 8000e1e:	d00f      	beq.n	8000e40 <__aeabi_fsub+0x50>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	dc00      	bgt.n	8000e26 <__aeabi_fsub+0x36>
 8000e24:	e16a      	b.n	80010fc <__aeabi_fsub+0x30c>
 8000e26:	2800      	cmp	r0, #0
 8000e28:	d135      	bne.n	8000e96 <__aeabi_fsub+0xa6>
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_fsub+0x40>
 8000e2e:	e0a2      	b.n	8000f76 <__aeabi_fsub+0x186>
 8000e30:	1e51      	subs	r1, r2, #1
 8000e32:	2a01      	cmp	r2, #1
 8000e34:	d100      	bne.n	8000e38 <__aeabi_fsub+0x48>
 8000e36:	e124      	b.n	8001082 <__aeabi_fsub+0x292>
 8000e38:	2aff      	cmp	r2, #255	@ 0xff
 8000e3a:	d021      	beq.n	8000e80 <__aeabi_fsub+0x90>
 8000e3c:	000a      	movs	r2, r1
 8000e3e:	e02f      	b.n	8000ea0 <__aeabi_fsub+0xb0>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	dc00      	bgt.n	8000e46 <__aeabi_fsub+0x56>
 8000e44:	e167      	b.n	8001116 <__aeabi_fsub+0x326>
 8000e46:	2800      	cmp	r0, #0
 8000e48:	d05e      	beq.n	8000f08 <__aeabi_fsub+0x118>
 8000e4a:	2dff      	cmp	r5, #255	@ 0xff
 8000e4c:	d018      	beq.n	8000e80 <__aeabi_fsub+0x90>
 8000e4e:	2180      	movs	r1, #128	@ 0x80
 8000e50:	04c9      	lsls	r1, r1, #19
 8000e52:	430e      	orrs	r6, r1
 8000e54:	2a1b      	cmp	r2, #27
 8000e56:	dc00      	bgt.n	8000e5a <__aeabi_fsub+0x6a>
 8000e58:	e076      	b.n	8000f48 <__aeabi_fsub+0x158>
 8000e5a:	002a      	movs	r2, r5
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	e032      	b.n	8000ec6 <__aeabi_fsub+0xd6>
 8000e60:	002a      	movs	r2, r5
 8000e62:	3aff      	subs	r2, #255	@ 0xff
 8000e64:	4691      	mov	r9, r2
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d042      	beq.n	8000ef0 <__aeabi_fsub+0x100>
 8000e6a:	428c      	cmp	r4, r1
 8000e6c:	d055      	beq.n	8000f1a <__aeabi_fsub+0x12a>
 8000e6e:	464a      	mov	r2, r9
 8000e70:	2a00      	cmp	r2, #0
 8000e72:	d100      	bne.n	8000e76 <__aeabi_fsub+0x86>
 8000e74:	e09c      	b.n	8000fb0 <__aeabi_fsub+0x1c0>
 8000e76:	2d00      	cmp	r5, #0
 8000e78:	d100      	bne.n	8000e7c <__aeabi_fsub+0x8c>
 8000e7a:	e077      	b.n	8000f6c <__aeabi_fsub+0x17c>
 8000e7c:	000c      	movs	r4, r1
 8000e7e:	0033      	movs	r3, r6
 8000e80:	08db      	lsrs	r3, r3, #3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d100      	bne.n	8000e88 <__aeabi_fsub+0x98>
 8000e86:	e06e      	b.n	8000f66 <__aeabi_fsub+0x176>
 8000e88:	2280      	movs	r2, #128	@ 0x80
 8000e8a:	03d2      	lsls	r2, r2, #15
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	025b      	lsls	r3, r3, #9
 8000e90:	20ff      	movs	r0, #255	@ 0xff
 8000e92:	0a5b      	lsrs	r3, r3, #9
 8000e94:	e024      	b.n	8000ee0 <__aeabi_fsub+0xf0>
 8000e96:	2dff      	cmp	r5, #255	@ 0xff
 8000e98:	d0f2      	beq.n	8000e80 <__aeabi_fsub+0x90>
 8000e9a:	2180      	movs	r1, #128	@ 0x80
 8000e9c:	04c9      	lsls	r1, r1, #19
 8000e9e:	430e      	orrs	r6, r1
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	2a1b      	cmp	r2, #27
 8000ea4:	dc08      	bgt.n	8000eb8 <__aeabi_fsub+0xc8>
 8000ea6:	0031      	movs	r1, r6
 8000ea8:	2020      	movs	r0, #32
 8000eaa:	40d1      	lsrs	r1, r2
 8000eac:	1a82      	subs	r2, r0, r2
 8000eae:	4096      	lsls	r6, r2
 8000eb0:	0032      	movs	r2, r6
 8000eb2:	1e50      	subs	r0, r2, #1
 8000eb4:	4182      	sbcs	r2, r0
 8000eb6:	4311      	orrs	r1, r2
 8000eb8:	1a5b      	subs	r3, r3, r1
 8000eba:	015a      	lsls	r2, r3, #5
 8000ebc:	d460      	bmi.n	8000f80 <__aeabi_fsub+0x190>
 8000ebe:	2107      	movs	r1, #7
 8000ec0:	002a      	movs	r2, r5
 8000ec2:	4019      	ands	r1, r3
 8000ec4:	d057      	beq.n	8000f76 <__aeabi_fsub+0x186>
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	4019      	ands	r1, r3
 8000eca:	2904      	cmp	r1, #4
 8000ecc:	d000      	beq.n	8000ed0 <__aeabi_fsub+0xe0>
 8000ece:	3304      	adds	r3, #4
 8000ed0:	0159      	lsls	r1, r3, #5
 8000ed2:	d550      	bpl.n	8000f76 <__aeabi_fsub+0x186>
 8000ed4:	1c50      	adds	r0, r2, #1
 8000ed6:	2afe      	cmp	r2, #254	@ 0xfe
 8000ed8:	d045      	beq.n	8000f66 <__aeabi_fsub+0x176>
 8000eda:	019b      	lsls	r3, r3, #6
 8000edc:	b2c0      	uxtb	r0, r0
 8000ede:	0a5b      	lsrs	r3, r3, #9
 8000ee0:	05c0      	lsls	r0, r0, #23
 8000ee2:	4318      	orrs	r0, r3
 8000ee4:	07e4      	lsls	r4, r4, #31
 8000ee6:	4320      	orrs	r0, r4
 8000ee8:	bcc0      	pop	{r6, r7}
 8000eea:	46b9      	mov	r9, r7
 8000eec:	46b0      	mov	r8, r6
 8000eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	4051      	eors	r1, r2
 8000ef4:	428c      	cmp	r4, r1
 8000ef6:	d1ba      	bne.n	8000e6e <__aeabi_fsub+0x7e>
 8000ef8:	464a      	mov	r2, r9
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	d010      	beq.n	8000f20 <__aeabi_fsub+0x130>
 8000efe:	2d00      	cmp	r5, #0
 8000f00:	d100      	bne.n	8000f04 <__aeabi_fsub+0x114>
 8000f02:	e098      	b.n	8001036 <__aeabi_fsub+0x246>
 8000f04:	2300      	movs	r3, #0
 8000f06:	e7bb      	b.n	8000e80 <__aeabi_fsub+0x90>
 8000f08:	2e00      	cmp	r6, #0
 8000f0a:	d034      	beq.n	8000f76 <__aeabi_fsub+0x186>
 8000f0c:	1e51      	subs	r1, r2, #1
 8000f0e:	2a01      	cmp	r2, #1
 8000f10:	d06e      	beq.n	8000ff0 <__aeabi_fsub+0x200>
 8000f12:	2aff      	cmp	r2, #255	@ 0xff
 8000f14:	d0b4      	beq.n	8000e80 <__aeabi_fsub+0x90>
 8000f16:	000a      	movs	r2, r1
 8000f18:	e79c      	b.n	8000e54 <__aeabi_fsub+0x64>
 8000f1a:	2a00      	cmp	r2, #0
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_fsub+0x130>
 8000f1e:	e088      	b.n	8001032 <__aeabi_fsub+0x242>
 8000f20:	20fe      	movs	r0, #254	@ 0xfe
 8000f22:	1c6a      	adds	r2, r5, #1
 8000f24:	4210      	tst	r0, r2
 8000f26:	d000      	beq.n	8000f2a <__aeabi_fsub+0x13a>
 8000f28:	e092      	b.n	8001050 <__aeabi_fsub+0x260>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d000      	beq.n	8000f30 <__aeabi_fsub+0x140>
 8000f2e:	e0a4      	b.n	800107a <__aeabi_fsub+0x28a>
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d100      	bne.n	8000f36 <__aeabi_fsub+0x146>
 8000f34:	e0cb      	b.n	80010ce <__aeabi_fsub+0x2de>
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	d000      	beq.n	8000f3c <__aeabi_fsub+0x14c>
 8000f3a:	e0ca      	b.n	80010d2 <__aeabi_fsub+0x2e2>
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	08db      	lsrs	r3, r3, #3
 8000f40:	025b      	lsls	r3, r3, #9
 8000f42:	0a5b      	lsrs	r3, r3, #9
 8000f44:	b2d0      	uxtb	r0, r2
 8000f46:	e7cb      	b.n	8000ee0 <__aeabi_fsub+0xf0>
 8000f48:	0031      	movs	r1, r6
 8000f4a:	2020      	movs	r0, #32
 8000f4c:	40d1      	lsrs	r1, r2
 8000f4e:	1a82      	subs	r2, r0, r2
 8000f50:	4096      	lsls	r6, r2
 8000f52:	0032      	movs	r2, r6
 8000f54:	1e50      	subs	r0, r2, #1
 8000f56:	4182      	sbcs	r2, r0
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	189b      	adds	r3, r3, r2
 8000f5c:	015a      	lsls	r2, r3, #5
 8000f5e:	d5ae      	bpl.n	8000ebe <__aeabi_fsub+0xce>
 8000f60:	1c6a      	adds	r2, r5, #1
 8000f62:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f64:	d14a      	bne.n	8000ffc <__aeabi_fsub+0x20c>
 8000f66:	20ff      	movs	r0, #255	@ 0xff
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e7b9      	b.n	8000ee0 <__aeabi_fsub+0xf0>
 8000f6c:	22ff      	movs	r2, #255	@ 0xff
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d14b      	bne.n	800100a <__aeabi_fsub+0x21a>
 8000f72:	000c      	movs	r4, r1
 8000f74:	0033      	movs	r3, r6
 8000f76:	08db      	lsrs	r3, r3, #3
 8000f78:	2aff      	cmp	r2, #255	@ 0xff
 8000f7a:	d100      	bne.n	8000f7e <__aeabi_fsub+0x18e>
 8000f7c:	e781      	b.n	8000e82 <__aeabi_fsub+0x92>
 8000f7e:	e7df      	b.n	8000f40 <__aeabi_fsub+0x150>
 8000f80:	019f      	lsls	r7, r3, #6
 8000f82:	09bf      	lsrs	r7, r7, #6
 8000f84:	0038      	movs	r0, r7
 8000f86:	f000 fa01 	bl	800138c <__clzsi2>
 8000f8a:	3805      	subs	r0, #5
 8000f8c:	4087      	lsls	r7, r0
 8000f8e:	4285      	cmp	r5, r0
 8000f90:	dc21      	bgt.n	8000fd6 <__aeabi_fsub+0x1e6>
 8000f92:	003b      	movs	r3, r7
 8000f94:	2120      	movs	r1, #32
 8000f96:	1b42      	subs	r2, r0, r5
 8000f98:	3201      	adds	r2, #1
 8000f9a:	40d3      	lsrs	r3, r2
 8000f9c:	1a8a      	subs	r2, r1, r2
 8000f9e:	4097      	lsls	r7, r2
 8000fa0:	1e7a      	subs	r2, r7, #1
 8000fa2:	4197      	sbcs	r7, r2
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	433b      	orrs	r3, r7
 8000fa8:	0759      	lsls	r1, r3, #29
 8000faa:	d000      	beq.n	8000fae <__aeabi_fsub+0x1be>
 8000fac:	e78b      	b.n	8000ec6 <__aeabi_fsub+0xd6>
 8000fae:	e78f      	b.n	8000ed0 <__aeabi_fsub+0xe0>
 8000fb0:	20fe      	movs	r0, #254	@ 0xfe
 8000fb2:	1c6a      	adds	r2, r5, #1
 8000fb4:	4210      	tst	r0, r2
 8000fb6:	d112      	bne.n	8000fde <__aeabi_fsub+0x1ee>
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d152      	bne.n	8001062 <__aeabi_fsub+0x272>
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d07c      	beq.n	80010ba <__aeabi_fsub+0x2ca>
 8000fc0:	2e00      	cmp	r6, #0
 8000fc2:	d0bb      	beq.n	8000f3c <__aeabi_fsub+0x14c>
 8000fc4:	1b9a      	subs	r2, r3, r6
 8000fc6:	0150      	lsls	r0, r2, #5
 8000fc8:	d400      	bmi.n	8000fcc <__aeabi_fsub+0x1dc>
 8000fca:	e08b      	b.n	80010e4 <__aeabi_fsub+0x2f4>
 8000fcc:	2401      	movs	r4, #1
 8000fce:	2200      	movs	r2, #0
 8000fd0:	1af3      	subs	r3, r6, r3
 8000fd2:	400c      	ands	r4, r1
 8000fd4:	e7e8      	b.n	8000fa8 <__aeabi_fsub+0x1b8>
 8000fd6:	4b56      	ldr	r3, [pc, #344]	@ (8001130 <__aeabi_fsub+0x340>)
 8000fd8:	1a2a      	subs	r2, r5, r0
 8000fda:	403b      	ands	r3, r7
 8000fdc:	e7e4      	b.n	8000fa8 <__aeabi_fsub+0x1b8>
 8000fde:	1b9f      	subs	r7, r3, r6
 8000fe0:	017a      	lsls	r2, r7, #5
 8000fe2:	d446      	bmi.n	8001072 <__aeabi_fsub+0x282>
 8000fe4:	2f00      	cmp	r7, #0
 8000fe6:	d1cd      	bne.n	8000f84 <__aeabi_fsub+0x194>
 8000fe8:	2400      	movs	r4, #0
 8000fea:	2000      	movs	r0, #0
 8000fec:	2300      	movs	r3, #0
 8000fee:	e777      	b.n	8000ee0 <__aeabi_fsub+0xf0>
 8000ff0:	199b      	adds	r3, r3, r6
 8000ff2:	2501      	movs	r5, #1
 8000ff4:	3201      	adds	r2, #1
 8000ff6:	0159      	lsls	r1, r3, #5
 8000ff8:	d400      	bmi.n	8000ffc <__aeabi_fsub+0x20c>
 8000ffa:	e760      	b.n	8000ebe <__aeabi_fsub+0xce>
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	484d      	ldr	r0, [pc, #308]	@ (8001134 <__aeabi_fsub+0x344>)
 8001000:	4019      	ands	r1, r3
 8001002:	085b      	lsrs	r3, r3, #1
 8001004:	4003      	ands	r3, r0
 8001006:	430b      	orrs	r3, r1
 8001008:	e7ce      	b.n	8000fa8 <__aeabi_fsub+0x1b8>
 800100a:	1e57      	subs	r7, r2, #1
 800100c:	2a01      	cmp	r2, #1
 800100e:	d05a      	beq.n	80010c6 <__aeabi_fsub+0x2d6>
 8001010:	000c      	movs	r4, r1
 8001012:	2aff      	cmp	r2, #255	@ 0xff
 8001014:	d033      	beq.n	800107e <__aeabi_fsub+0x28e>
 8001016:	2201      	movs	r2, #1
 8001018:	2f1b      	cmp	r7, #27
 800101a:	dc07      	bgt.n	800102c <__aeabi_fsub+0x23c>
 800101c:	2120      	movs	r1, #32
 800101e:	1bc9      	subs	r1, r1, r7
 8001020:	001a      	movs	r2, r3
 8001022:	408b      	lsls	r3, r1
 8001024:	40fa      	lsrs	r2, r7
 8001026:	1e59      	subs	r1, r3, #1
 8001028:	418b      	sbcs	r3, r1
 800102a:	431a      	orrs	r2, r3
 800102c:	0005      	movs	r5, r0
 800102e:	1ab3      	subs	r3, r6, r2
 8001030:	e743      	b.n	8000eba <__aeabi_fsub+0xca>
 8001032:	2d00      	cmp	r5, #0
 8001034:	d123      	bne.n	800107e <__aeabi_fsub+0x28e>
 8001036:	22ff      	movs	r2, #255	@ 0xff
 8001038:	2b00      	cmp	r3, #0
 800103a:	d09b      	beq.n	8000f74 <__aeabi_fsub+0x184>
 800103c:	1e51      	subs	r1, r2, #1
 800103e:	2a01      	cmp	r2, #1
 8001040:	d0d6      	beq.n	8000ff0 <__aeabi_fsub+0x200>
 8001042:	2aff      	cmp	r2, #255	@ 0xff
 8001044:	d01b      	beq.n	800107e <__aeabi_fsub+0x28e>
 8001046:	291b      	cmp	r1, #27
 8001048:	dd2c      	ble.n	80010a4 <__aeabi_fsub+0x2b4>
 800104a:	0002      	movs	r2, r0
 800104c:	1c73      	adds	r3, r6, #1
 800104e:	e73a      	b.n	8000ec6 <__aeabi_fsub+0xd6>
 8001050:	2aff      	cmp	r2, #255	@ 0xff
 8001052:	d088      	beq.n	8000f66 <__aeabi_fsub+0x176>
 8001054:	199b      	adds	r3, r3, r6
 8001056:	085b      	lsrs	r3, r3, #1
 8001058:	0759      	lsls	r1, r3, #29
 800105a:	d000      	beq.n	800105e <__aeabi_fsub+0x26e>
 800105c:	e733      	b.n	8000ec6 <__aeabi_fsub+0xd6>
 800105e:	08db      	lsrs	r3, r3, #3
 8001060:	e76e      	b.n	8000f40 <__aeabi_fsub+0x150>
 8001062:	2b00      	cmp	r3, #0
 8001064:	d110      	bne.n	8001088 <__aeabi_fsub+0x298>
 8001066:	2e00      	cmp	r6, #0
 8001068:	d043      	beq.n	80010f2 <__aeabi_fsub+0x302>
 800106a:	2401      	movs	r4, #1
 800106c:	0033      	movs	r3, r6
 800106e:	400c      	ands	r4, r1
 8001070:	e706      	b.n	8000e80 <__aeabi_fsub+0x90>
 8001072:	2401      	movs	r4, #1
 8001074:	1af7      	subs	r7, r6, r3
 8001076:	400c      	ands	r4, r1
 8001078:	e784      	b.n	8000f84 <__aeabi_fsub+0x194>
 800107a:	2b00      	cmp	r3, #0
 800107c:	d104      	bne.n	8001088 <__aeabi_fsub+0x298>
 800107e:	0033      	movs	r3, r6
 8001080:	e6fe      	b.n	8000e80 <__aeabi_fsub+0x90>
 8001082:	2501      	movs	r5, #1
 8001084:	1b9b      	subs	r3, r3, r6
 8001086:	e718      	b.n	8000eba <__aeabi_fsub+0xca>
 8001088:	2e00      	cmp	r6, #0
 800108a:	d100      	bne.n	800108e <__aeabi_fsub+0x29e>
 800108c:	e6f8      	b.n	8000e80 <__aeabi_fsub+0x90>
 800108e:	2280      	movs	r2, #128	@ 0x80
 8001090:	03d2      	lsls	r2, r2, #15
 8001092:	4297      	cmp	r7, r2
 8001094:	d304      	bcc.n	80010a0 <__aeabi_fsub+0x2b0>
 8001096:	4594      	cmp	ip, r2
 8001098:	d202      	bcs.n	80010a0 <__aeabi_fsub+0x2b0>
 800109a:	2401      	movs	r4, #1
 800109c:	0033      	movs	r3, r6
 800109e:	400c      	ands	r4, r1
 80010a0:	08db      	lsrs	r3, r3, #3
 80010a2:	e6f1      	b.n	8000e88 <__aeabi_fsub+0x98>
 80010a4:	001a      	movs	r2, r3
 80010a6:	2520      	movs	r5, #32
 80010a8:	40ca      	lsrs	r2, r1
 80010aa:	1a69      	subs	r1, r5, r1
 80010ac:	408b      	lsls	r3, r1
 80010ae:	1e59      	subs	r1, r3, #1
 80010b0:	418b      	sbcs	r3, r1
 80010b2:	4313      	orrs	r3, r2
 80010b4:	0005      	movs	r5, r0
 80010b6:	199b      	adds	r3, r3, r6
 80010b8:	e750      	b.n	8000f5c <__aeabi_fsub+0x16c>
 80010ba:	2e00      	cmp	r6, #0
 80010bc:	d094      	beq.n	8000fe8 <__aeabi_fsub+0x1f8>
 80010be:	2401      	movs	r4, #1
 80010c0:	0033      	movs	r3, r6
 80010c2:	400c      	ands	r4, r1
 80010c4:	e73a      	b.n	8000f3c <__aeabi_fsub+0x14c>
 80010c6:	000c      	movs	r4, r1
 80010c8:	2501      	movs	r5, #1
 80010ca:	1af3      	subs	r3, r6, r3
 80010cc:	e6f5      	b.n	8000eba <__aeabi_fsub+0xca>
 80010ce:	0033      	movs	r3, r6
 80010d0:	e734      	b.n	8000f3c <__aeabi_fsub+0x14c>
 80010d2:	199b      	adds	r3, r3, r6
 80010d4:	2200      	movs	r2, #0
 80010d6:	0159      	lsls	r1, r3, #5
 80010d8:	d5c1      	bpl.n	800105e <__aeabi_fsub+0x26e>
 80010da:	4a15      	ldr	r2, [pc, #84]	@ (8001130 <__aeabi_fsub+0x340>)
 80010dc:	4013      	ands	r3, r2
 80010de:	08db      	lsrs	r3, r3, #3
 80010e0:	2201      	movs	r2, #1
 80010e2:	e72d      	b.n	8000f40 <__aeabi_fsub+0x150>
 80010e4:	2a00      	cmp	r2, #0
 80010e6:	d100      	bne.n	80010ea <__aeabi_fsub+0x2fa>
 80010e8:	e77e      	b.n	8000fe8 <__aeabi_fsub+0x1f8>
 80010ea:	0013      	movs	r3, r2
 80010ec:	2200      	movs	r2, #0
 80010ee:	08db      	lsrs	r3, r3, #3
 80010f0:	e726      	b.n	8000f40 <__aeabi_fsub+0x150>
 80010f2:	2380      	movs	r3, #128	@ 0x80
 80010f4:	2400      	movs	r4, #0
 80010f6:	20ff      	movs	r0, #255	@ 0xff
 80010f8:	03db      	lsls	r3, r3, #15
 80010fa:	e6f1      	b.n	8000ee0 <__aeabi_fsub+0xf0>
 80010fc:	2a00      	cmp	r2, #0
 80010fe:	d100      	bne.n	8001102 <__aeabi_fsub+0x312>
 8001100:	e756      	b.n	8000fb0 <__aeabi_fsub+0x1c0>
 8001102:	1b47      	subs	r7, r0, r5
 8001104:	003a      	movs	r2, r7
 8001106:	2d00      	cmp	r5, #0
 8001108:	d100      	bne.n	800110c <__aeabi_fsub+0x31c>
 800110a:	e730      	b.n	8000f6e <__aeabi_fsub+0x17e>
 800110c:	2280      	movs	r2, #128	@ 0x80
 800110e:	04d2      	lsls	r2, r2, #19
 8001110:	000c      	movs	r4, r1
 8001112:	4313      	orrs	r3, r2
 8001114:	e77f      	b.n	8001016 <__aeabi_fsub+0x226>
 8001116:	2a00      	cmp	r2, #0
 8001118:	d100      	bne.n	800111c <__aeabi_fsub+0x32c>
 800111a:	e701      	b.n	8000f20 <__aeabi_fsub+0x130>
 800111c:	1b41      	subs	r1, r0, r5
 800111e:	2d00      	cmp	r5, #0
 8001120:	d101      	bne.n	8001126 <__aeabi_fsub+0x336>
 8001122:	000a      	movs	r2, r1
 8001124:	e788      	b.n	8001038 <__aeabi_fsub+0x248>
 8001126:	2280      	movs	r2, #128	@ 0x80
 8001128:	04d2      	lsls	r2, r2, #19
 800112a:	4313      	orrs	r3, r2
 800112c:	e78b      	b.n	8001046 <__aeabi_fsub+0x256>
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	fbffffff 	.word	0xfbffffff
 8001134:	7dffffff 	.word	0x7dffffff

08001138 <__aeabi_f2iz>:
 8001138:	0241      	lsls	r1, r0, #9
 800113a:	0042      	lsls	r2, r0, #1
 800113c:	0fc3      	lsrs	r3, r0, #31
 800113e:	0a49      	lsrs	r1, r1, #9
 8001140:	2000      	movs	r0, #0
 8001142:	0e12      	lsrs	r2, r2, #24
 8001144:	2a7e      	cmp	r2, #126	@ 0x7e
 8001146:	dd03      	ble.n	8001150 <__aeabi_f2iz+0x18>
 8001148:	2a9d      	cmp	r2, #157	@ 0x9d
 800114a:	dd02      	ble.n	8001152 <__aeabi_f2iz+0x1a>
 800114c:	4a09      	ldr	r2, [pc, #36]	@ (8001174 <__aeabi_f2iz+0x3c>)
 800114e:	1898      	adds	r0, r3, r2
 8001150:	4770      	bx	lr
 8001152:	2080      	movs	r0, #128	@ 0x80
 8001154:	0400      	lsls	r0, r0, #16
 8001156:	4301      	orrs	r1, r0
 8001158:	2a95      	cmp	r2, #149	@ 0x95
 800115a:	dc07      	bgt.n	800116c <__aeabi_f2iz+0x34>
 800115c:	2096      	movs	r0, #150	@ 0x96
 800115e:	1a82      	subs	r2, r0, r2
 8001160:	40d1      	lsrs	r1, r2
 8001162:	4248      	negs	r0, r1
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1f3      	bne.n	8001150 <__aeabi_f2iz+0x18>
 8001168:	0008      	movs	r0, r1
 800116a:	e7f1      	b.n	8001150 <__aeabi_f2iz+0x18>
 800116c:	3a96      	subs	r2, #150	@ 0x96
 800116e:	4091      	lsls	r1, r2
 8001170:	e7f7      	b.n	8001162 <__aeabi_f2iz+0x2a>
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	7fffffff 	.word	0x7fffffff

08001178 <__aeabi_i2f>:
 8001178:	b570      	push	{r4, r5, r6, lr}
 800117a:	2800      	cmp	r0, #0
 800117c:	d013      	beq.n	80011a6 <__aeabi_i2f+0x2e>
 800117e:	17c3      	asrs	r3, r0, #31
 8001180:	18c5      	adds	r5, r0, r3
 8001182:	405d      	eors	r5, r3
 8001184:	0fc4      	lsrs	r4, r0, #31
 8001186:	0028      	movs	r0, r5
 8001188:	f000 f900 	bl	800138c <__clzsi2>
 800118c:	239e      	movs	r3, #158	@ 0x9e
 800118e:	0001      	movs	r1, r0
 8001190:	1a1b      	subs	r3, r3, r0
 8001192:	2b96      	cmp	r3, #150	@ 0x96
 8001194:	dc0f      	bgt.n	80011b6 <__aeabi_i2f+0x3e>
 8001196:	2808      	cmp	r0, #8
 8001198:	d034      	beq.n	8001204 <__aeabi_i2f+0x8c>
 800119a:	3908      	subs	r1, #8
 800119c:	408d      	lsls	r5, r1
 800119e:	026d      	lsls	r5, r5, #9
 80011a0:	0a6d      	lsrs	r5, r5, #9
 80011a2:	b2d8      	uxtb	r0, r3
 80011a4:	e002      	b.n	80011ac <__aeabi_i2f+0x34>
 80011a6:	2400      	movs	r4, #0
 80011a8:	2000      	movs	r0, #0
 80011aa:	2500      	movs	r5, #0
 80011ac:	05c0      	lsls	r0, r0, #23
 80011ae:	4328      	orrs	r0, r5
 80011b0:	07e4      	lsls	r4, r4, #31
 80011b2:	4320      	orrs	r0, r4
 80011b4:	bd70      	pop	{r4, r5, r6, pc}
 80011b6:	2b99      	cmp	r3, #153	@ 0x99
 80011b8:	dc16      	bgt.n	80011e8 <__aeabi_i2f+0x70>
 80011ba:	1f42      	subs	r2, r0, #5
 80011bc:	2805      	cmp	r0, #5
 80011be:	d000      	beq.n	80011c2 <__aeabi_i2f+0x4a>
 80011c0:	4095      	lsls	r5, r2
 80011c2:	002a      	movs	r2, r5
 80011c4:	4811      	ldr	r0, [pc, #68]	@ (800120c <__aeabi_i2f+0x94>)
 80011c6:	4002      	ands	r2, r0
 80011c8:	076e      	lsls	r6, r5, #29
 80011ca:	d009      	beq.n	80011e0 <__aeabi_i2f+0x68>
 80011cc:	260f      	movs	r6, #15
 80011ce:	4035      	ands	r5, r6
 80011d0:	2d04      	cmp	r5, #4
 80011d2:	d005      	beq.n	80011e0 <__aeabi_i2f+0x68>
 80011d4:	3204      	adds	r2, #4
 80011d6:	0155      	lsls	r5, r2, #5
 80011d8:	d502      	bpl.n	80011e0 <__aeabi_i2f+0x68>
 80011da:	239f      	movs	r3, #159	@ 0x9f
 80011dc:	4002      	ands	r2, r0
 80011de:	1a5b      	subs	r3, r3, r1
 80011e0:	0192      	lsls	r2, r2, #6
 80011e2:	0a55      	lsrs	r5, r2, #9
 80011e4:	b2d8      	uxtb	r0, r3
 80011e6:	e7e1      	b.n	80011ac <__aeabi_i2f+0x34>
 80011e8:	2205      	movs	r2, #5
 80011ea:	1a12      	subs	r2, r2, r0
 80011ec:	0028      	movs	r0, r5
 80011ee:	40d0      	lsrs	r0, r2
 80011f0:	0002      	movs	r2, r0
 80011f2:	0008      	movs	r0, r1
 80011f4:	301b      	adds	r0, #27
 80011f6:	4085      	lsls	r5, r0
 80011f8:	0028      	movs	r0, r5
 80011fa:	1e45      	subs	r5, r0, #1
 80011fc:	41a8      	sbcs	r0, r5
 80011fe:	4302      	orrs	r2, r0
 8001200:	0015      	movs	r5, r2
 8001202:	e7de      	b.n	80011c2 <__aeabi_i2f+0x4a>
 8001204:	026d      	lsls	r5, r5, #9
 8001206:	2096      	movs	r0, #150	@ 0x96
 8001208:	0a6d      	lsrs	r5, r5, #9
 800120a:	e7cf      	b.n	80011ac <__aeabi_i2f+0x34>
 800120c:	fbffffff 	.word	0xfbffffff

08001210 <__aeabi_d2f>:
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	004b      	lsls	r3, r1, #1
 8001214:	030f      	lsls	r7, r1, #12
 8001216:	0d5b      	lsrs	r3, r3, #21
 8001218:	4c3b      	ldr	r4, [pc, #236]	@ (8001308 <__aeabi_d2f+0xf8>)
 800121a:	0f45      	lsrs	r5, r0, #29
 800121c:	b083      	sub	sp, #12
 800121e:	0a7f      	lsrs	r7, r7, #9
 8001220:	1c5e      	adds	r6, r3, #1
 8001222:	432f      	orrs	r7, r5
 8001224:	9000      	str	r0, [sp, #0]
 8001226:	9101      	str	r1, [sp, #4]
 8001228:	0fca      	lsrs	r2, r1, #31
 800122a:	00c5      	lsls	r5, r0, #3
 800122c:	4226      	tst	r6, r4
 800122e:	d00b      	beq.n	8001248 <__aeabi_d2f+0x38>
 8001230:	4936      	ldr	r1, [pc, #216]	@ (800130c <__aeabi_d2f+0xfc>)
 8001232:	185c      	adds	r4, r3, r1
 8001234:	2cfe      	cmp	r4, #254	@ 0xfe
 8001236:	dd13      	ble.n	8001260 <__aeabi_d2f+0x50>
 8001238:	20ff      	movs	r0, #255	@ 0xff
 800123a:	2300      	movs	r3, #0
 800123c:	05c0      	lsls	r0, r0, #23
 800123e:	4318      	orrs	r0, r3
 8001240:	07d2      	lsls	r2, r2, #31
 8001242:	4310      	orrs	r0, r2
 8001244:	b003      	add	sp, #12
 8001246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001248:	2b00      	cmp	r3, #0
 800124a:	d102      	bne.n	8001252 <__aeabi_d2f+0x42>
 800124c:	2000      	movs	r0, #0
 800124e:	2300      	movs	r3, #0
 8001250:	e7f4      	b.n	800123c <__aeabi_d2f+0x2c>
 8001252:	433d      	orrs	r5, r7
 8001254:	d0f0      	beq.n	8001238 <__aeabi_d2f+0x28>
 8001256:	2380      	movs	r3, #128	@ 0x80
 8001258:	03db      	lsls	r3, r3, #15
 800125a:	20ff      	movs	r0, #255	@ 0xff
 800125c:	433b      	orrs	r3, r7
 800125e:	e7ed      	b.n	800123c <__aeabi_d2f+0x2c>
 8001260:	2c00      	cmp	r4, #0
 8001262:	dd14      	ble.n	800128e <__aeabi_d2f+0x7e>
 8001264:	9b00      	ldr	r3, [sp, #0]
 8001266:	00ff      	lsls	r7, r7, #3
 8001268:	019b      	lsls	r3, r3, #6
 800126a:	1e58      	subs	r0, r3, #1
 800126c:	4183      	sbcs	r3, r0
 800126e:	0f69      	lsrs	r1, r5, #29
 8001270:	433b      	orrs	r3, r7
 8001272:	430b      	orrs	r3, r1
 8001274:	0759      	lsls	r1, r3, #29
 8001276:	d041      	beq.n	80012fc <__aeabi_d2f+0xec>
 8001278:	210f      	movs	r1, #15
 800127a:	4019      	ands	r1, r3
 800127c:	2904      	cmp	r1, #4
 800127e:	d028      	beq.n	80012d2 <__aeabi_d2f+0xc2>
 8001280:	3304      	adds	r3, #4
 8001282:	0159      	lsls	r1, r3, #5
 8001284:	d525      	bpl.n	80012d2 <__aeabi_d2f+0xc2>
 8001286:	3401      	adds	r4, #1
 8001288:	2300      	movs	r3, #0
 800128a:	b2e0      	uxtb	r0, r4
 800128c:	e7d6      	b.n	800123c <__aeabi_d2f+0x2c>
 800128e:	0021      	movs	r1, r4
 8001290:	3117      	adds	r1, #23
 8001292:	dbdb      	blt.n	800124c <__aeabi_d2f+0x3c>
 8001294:	2180      	movs	r1, #128	@ 0x80
 8001296:	201e      	movs	r0, #30
 8001298:	0409      	lsls	r1, r1, #16
 800129a:	4339      	orrs	r1, r7
 800129c:	1b00      	subs	r0, r0, r4
 800129e:	281f      	cmp	r0, #31
 80012a0:	dd1b      	ble.n	80012da <__aeabi_d2f+0xca>
 80012a2:	2602      	movs	r6, #2
 80012a4:	4276      	negs	r6, r6
 80012a6:	1b34      	subs	r4, r6, r4
 80012a8:	000e      	movs	r6, r1
 80012aa:	40e6      	lsrs	r6, r4
 80012ac:	0034      	movs	r4, r6
 80012ae:	2820      	cmp	r0, #32
 80012b0:	d004      	beq.n	80012bc <__aeabi_d2f+0xac>
 80012b2:	4817      	ldr	r0, [pc, #92]	@ (8001310 <__aeabi_d2f+0x100>)
 80012b4:	4684      	mov	ip, r0
 80012b6:	4463      	add	r3, ip
 80012b8:	4099      	lsls	r1, r3
 80012ba:	430d      	orrs	r5, r1
 80012bc:	002b      	movs	r3, r5
 80012be:	1e59      	subs	r1, r3, #1
 80012c0:	418b      	sbcs	r3, r1
 80012c2:	4323      	orrs	r3, r4
 80012c4:	0759      	lsls	r1, r3, #29
 80012c6:	d015      	beq.n	80012f4 <__aeabi_d2f+0xe4>
 80012c8:	210f      	movs	r1, #15
 80012ca:	2400      	movs	r4, #0
 80012cc:	4019      	ands	r1, r3
 80012ce:	2904      	cmp	r1, #4
 80012d0:	d117      	bne.n	8001302 <__aeabi_d2f+0xf2>
 80012d2:	019b      	lsls	r3, r3, #6
 80012d4:	0a5b      	lsrs	r3, r3, #9
 80012d6:	b2e0      	uxtb	r0, r4
 80012d8:	e7b0      	b.n	800123c <__aeabi_d2f+0x2c>
 80012da:	4c0e      	ldr	r4, [pc, #56]	@ (8001314 <__aeabi_d2f+0x104>)
 80012dc:	191c      	adds	r4, r3, r4
 80012de:	002b      	movs	r3, r5
 80012e0:	40a5      	lsls	r5, r4
 80012e2:	40c3      	lsrs	r3, r0
 80012e4:	40a1      	lsls	r1, r4
 80012e6:	1e68      	subs	r0, r5, #1
 80012e8:	4185      	sbcs	r5, r0
 80012ea:	4329      	orrs	r1, r5
 80012ec:	430b      	orrs	r3, r1
 80012ee:	2400      	movs	r4, #0
 80012f0:	0759      	lsls	r1, r3, #29
 80012f2:	d1c1      	bne.n	8001278 <__aeabi_d2f+0x68>
 80012f4:	019b      	lsls	r3, r3, #6
 80012f6:	2000      	movs	r0, #0
 80012f8:	0a5b      	lsrs	r3, r3, #9
 80012fa:	e79f      	b.n	800123c <__aeabi_d2f+0x2c>
 80012fc:	08db      	lsrs	r3, r3, #3
 80012fe:	b2e0      	uxtb	r0, r4
 8001300:	e79c      	b.n	800123c <__aeabi_d2f+0x2c>
 8001302:	3304      	adds	r3, #4
 8001304:	e7e5      	b.n	80012d2 <__aeabi_d2f+0xc2>
 8001306:	46c0      	nop			@ (mov r8, r8)
 8001308:	000007fe 	.word	0x000007fe
 800130c:	fffffc80 	.word	0xfffffc80
 8001310:	fffffca2 	.word	0xfffffca2
 8001314:	fffffc82 	.word	0xfffffc82

08001318 <__aeabi_cfrcmple>:
 8001318:	4684      	mov	ip, r0
 800131a:	0008      	movs	r0, r1
 800131c:	4661      	mov	r1, ip
 800131e:	e7ff      	b.n	8001320 <__aeabi_cfcmpeq>

08001320 <__aeabi_cfcmpeq>:
 8001320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001322:	f000 f8d5 	bl	80014d0 <__lesf2>
 8001326:	2800      	cmp	r0, #0
 8001328:	d401      	bmi.n	800132e <__aeabi_cfcmpeq+0xe>
 800132a:	2100      	movs	r1, #0
 800132c:	42c8      	cmn	r0, r1
 800132e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001330 <__aeabi_fcmpeq>:
 8001330:	b510      	push	{r4, lr}
 8001332:	f000 f855 	bl	80013e0 <__eqsf2>
 8001336:	4240      	negs	r0, r0
 8001338:	3001      	adds	r0, #1
 800133a:	bd10      	pop	{r4, pc}

0800133c <__aeabi_fcmplt>:
 800133c:	b510      	push	{r4, lr}
 800133e:	f000 f8c7 	bl	80014d0 <__lesf2>
 8001342:	2800      	cmp	r0, #0
 8001344:	db01      	blt.n	800134a <__aeabi_fcmplt+0xe>
 8001346:	2000      	movs	r0, #0
 8001348:	bd10      	pop	{r4, pc}
 800134a:	2001      	movs	r0, #1
 800134c:	bd10      	pop	{r4, pc}
 800134e:	46c0      	nop			@ (mov r8, r8)

08001350 <__aeabi_fcmple>:
 8001350:	b510      	push	{r4, lr}
 8001352:	f000 f8bd 	bl	80014d0 <__lesf2>
 8001356:	2800      	cmp	r0, #0
 8001358:	dd01      	ble.n	800135e <__aeabi_fcmple+0xe>
 800135a:	2000      	movs	r0, #0
 800135c:	bd10      	pop	{r4, pc}
 800135e:	2001      	movs	r0, #1
 8001360:	bd10      	pop	{r4, pc}
 8001362:	46c0      	nop			@ (mov r8, r8)

08001364 <__aeabi_fcmpgt>:
 8001364:	b510      	push	{r4, lr}
 8001366:	f000 f863 	bl	8001430 <__gesf2>
 800136a:	2800      	cmp	r0, #0
 800136c:	dc01      	bgt.n	8001372 <__aeabi_fcmpgt+0xe>
 800136e:	2000      	movs	r0, #0
 8001370:	bd10      	pop	{r4, pc}
 8001372:	2001      	movs	r0, #1
 8001374:	bd10      	pop	{r4, pc}
 8001376:	46c0      	nop			@ (mov r8, r8)

08001378 <__aeabi_fcmpge>:
 8001378:	b510      	push	{r4, lr}
 800137a:	f000 f859 	bl	8001430 <__gesf2>
 800137e:	2800      	cmp	r0, #0
 8001380:	da01      	bge.n	8001386 <__aeabi_fcmpge+0xe>
 8001382:	2000      	movs	r0, #0
 8001384:	bd10      	pop	{r4, pc}
 8001386:	2001      	movs	r0, #1
 8001388:	bd10      	pop	{r4, pc}
 800138a:	46c0      	nop			@ (mov r8, r8)

0800138c <__clzsi2>:
 800138c:	211c      	movs	r1, #28
 800138e:	2301      	movs	r3, #1
 8001390:	041b      	lsls	r3, r3, #16
 8001392:	4298      	cmp	r0, r3
 8001394:	d301      	bcc.n	800139a <__clzsi2+0xe>
 8001396:	0c00      	lsrs	r0, r0, #16
 8001398:	3910      	subs	r1, #16
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	4298      	cmp	r0, r3
 800139e:	d301      	bcc.n	80013a4 <__clzsi2+0x18>
 80013a0:	0a00      	lsrs	r0, r0, #8
 80013a2:	3908      	subs	r1, #8
 80013a4:	091b      	lsrs	r3, r3, #4
 80013a6:	4298      	cmp	r0, r3
 80013a8:	d301      	bcc.n	80013ae <__clzsi2+0x22>
 80013aa:	0900      	lsrs	r0, r0, #4
 80013ac:	3904      	subs	r1, #4
 80013ae:	a202      	add	r2, pc, #8	@ (adr r2, 80013b8 <__clzsi2+0x2c>)
 80013b0:	5c10      	ldrb	r0, [r2, r0]
 80013b2:	1840      	adds	r0, r0, r1
 80013b4:	4770      	bx	lr
 80013b6:	46c0      	nop			@ (mov r8, r8)
 80013b8:	02020304 	.word	0x02020304
 80013bc:	01010101 	.word	0x01010101
	...

080013c8 <__clzdi2>:
 80013c8:	b510      	push	{r4, lr}
 80013ca:	2900      	cmp	r1, #0
 80013cc:	d103      	bne.n	80013d6 <__clzdi2+0xe>
 80013ce:	f7ff ffdd 	bl	800138c <__clzsi2>
 80013d2:	3020      	adds	r0, #32
 80013d4:	e002      	b.n	80013dc <__clzdi2+0x14>
 80013d6:	0008      	movs	r0, r1
 80013d8:	f7ff ffd8 	bl	800138c <__clzsi2>
 80013dc:	bd10      	pop	{r4, pc}
 80013de:	46c0      	nop			@ (mov r8, r8)

080013e0 <__eqsf2>:
 80013e0:	b570      	push	{r4, r5, r6, lr}
 80013e2:	0042      	lsls	r2, r0, #1
 80013e4:	024e      	lsls	r6, r1, #9
 80013e6:	004c      	lsls	r4, r1, #1
 80013e8:	0245      	lsls	r5, r0, #9
 80013ea:	0a6d      	lsrs	r5, r5, #9
 80013ec:	0e12      	lsrs	r2, r2, #24
 80013ee:	0fc3      	lsrs	r3, r0, #31
 80013f0:	0a76      	lsrs	r6, r6, #9
 80013f2:	0e24      	lsrs	r4, r4, #24
 80013f4:	0fc9      	lsrs	r1, r1, #31
 80013f6:	2aff      	cmp	r2, #255	@ 0xff
 80013f8:	d010      	beq.n	800141c <__eqsf2+0x3c>
 80013fa:	2cff      	cmp	r4, #255	@ 0xff
 80013fc:	d00c      	beq.n	8001418 <__eqsf2+0x38>
 80013fe:	2001      	movs	r0, #1
 8001400:	42a2      	cmp	r2, r4
 8001402:	d10a      	bne.n	800141a <__eqsf2+0x3a>
 8001404:	42b5      	cmp	r5, r6
 8001406:	d108      	bne.n	800141a <__eqsf2+0x3a>
 8001408:	428b      	cmp	r3, r1
 800140a:	d00f      	beq.n	800142c <__eqsf2+0x4c>
 800140c:	2a00      	cmp	r2, #0
 800140e:	d104      	bne.n	800141a <__eqsf2+0x3a>
 8001410:	0028      	movs	r0, r5
 8001412:	1e43      	subs	r3, r0, #1
 8001414:	4198      	sbcs	r0, r3
 8001416:	e000      	b.n	800141a <__eqsf2+0x3a>
 8001418:	2001      	movs	r0, #1
 800141a:	bd70      	pop	{r4, r5, r6, pc}
 800141c:	2001      	movs	r0, #1
 800141e:	2cff      	cmp	r4, #255	@ 0xff
 8001420:	d1fb      	bne.n	800141a <__eqsf2+0x3a>
 8001422:	4335      	orrs	r5, r6
 8001424:	d1f9      	bne.n	800141a <__eqsf2+0x3a>
 8001426:	404b      	eors	r3, r1
 8001428:	0018      	movs	r0, r3
 800142a:	e7f6      	b.n	800141a <__eqsf2+0x3a>
 800142c:	2000      	movs	r0, #0
 800142e:	e7f4      	b.n	800141a <__eqsf2+0x3a>

08001430 <__gesf2>:
 8001430:	b530      	push	{r4, r5, lr}
 8001432:	0042      	lsls	r2, r0, #1
 8001434:	0244      	lsls	r4, r0, #9
 8001436:	024d      	lsls	r5, r1, #9
 8001438:	0fc3      	lsrs	r3, r0, #31
 800143a:	0048      	lsls	r0, r1, #1
 800143c:	0a64      	lsrs	r4, r4, #9
 800143e:	0e12      	lsrs	r2, r2, #24
 8001440:	0a6d      	lsrs	r5, r5, #9
 8001442:	0e00      	lsrs	r0, r0, #24
 8001444:	0fc9      	lsrs	r1, r1, #31
 8001446:	2aff      	cmp	r2, #255	@ 0xff
 8001448:	d019      	beq.n	800147e <__gesf2+0x4e>
 800144a:	28ff      	cmp	r0, #255	@ 0xff
 800144c:	d00b      	beq.n	8001466 <__gesf2+0x36>
 800144e:	2a00      	cmp	r2, #0
 8001450:	d11e      	bne.n	8001490 <__gesf2+0x60>
 8001452:	2800      	cmp	r0, #0
 8001454:	d10b      	bne.n	800146e <__gesf2+0x3e>
 8001456:	2d00      	cmp	r5, #0
 8001458:	d027      	beq.n	80014aa <__gesf2+0x7a>
 800145a:	2c00      	cmp	r4, #0
 800145c:	d134      	bne.n	80014c8 <__gesf2+0x98>
 800145e:	2900      	cmp	r1, #0
 8001460:	d02f      	beq.n	80014c2 <__gesf2+0x92>
 8001462:	0008      	movs	r0, r1
 8001464:	bd30      	pop	{r4, r5, pc}
 8001466:	2d00      	cmp	r5, #0
 8001468:	d128      	bne.n	80014bc <__gesf2+0x8c>
 800146a:	2a00      	cmp	r2, #0
 800146c:	d101      	bne.n	8001472 <__gesf2+0x42>
 800146e:	2c00      	cmp	r4, #0
 8001470:	d0f5      	beq.n	800145e <__gesf2+0x2e>
 8001472:	428b      	cmp	r3, r1
 8001474:	d107      	bne.n	8001486 <__gesf2+0x56>
 8001476:	2b00      	cmp	r3, #0
 8001478:	d023      	beq.n	80014c2 <__gesf2+0x92>
 800147a:	0018      	movs	r0, r3
 800147c:	e7f2      	b.n	8001464 <__gesf2+0x34>
 800147e:	2c00      	cmp	r4, #0
 8001480:	d11c      	bne.n	80014bc <__gesf2+0x8c>
 8001482:	28ff      	cmp	r0, #255	@ 0xff
 8001484:	d014      	beq.n	80014b0 <__gesf2+0x80>
 8001486:	1e58      	subs	r0, r3, #1
 8001488:	2302      	movs	r3, #2
 800148a:	4018      	ands	r0, r3
 800148c:	3801      	subs	r0, #1
 800148e:	e7e9      	b.n	8001464 <__gesf2+0x34>
 8001490:	2800      	cmp	r0, #0
 8001492:	d0f8      	beq.n	8001486 <__gesf2+0x56>
 8001494:	428b      	cmp	r3, r1
 8001496:	d1f6      	bne.n	8001486 <__gesf2+0x56>
 8001498:	4282      	cmp	r2, r0
 800149a:	dcf4      	bgt.n	8001486 <__gesf2+0x56>
 800149c:	dbeb      	blt.n	8001476 <__gesf2+0x46>
 800149e:	42ac      	cmp	r4, r5
 80014a0:	d8f1      	bhi.n	8001486 <__gesf2+0x56>
 80014a2:	2000      	movs	r0, #0
 80014a4:	42ac      	cmp	r4, r5
 80014a6:	d2dd      	bcs.n	8001464 <__gesf2+0x34>
 80014a8:	e7e5      	b.n	8001476 <__gesf2+0x46>
 80014aa:	2c00      	cmp	r4, #0
 80014ac:	d0da      	beq.n	8001464 <__gesf2+0x34>
 80014ae:	e7ea      	b.n	8001486 <__gesf2+0x56>
 80014b0:	2d00      	cmp	r5, #0
 80014b2:	d103      	bne.n	80014bc <__gesf2+0x8c>
 80014b4:	428b      	cmp	r3, r1
 80014b6:	d1e6      	bne.n	8001486 <__gesf2+0x56>
 80014b8:	2000      	movs	r0, #0
 80014ba:	e7d3      	b.n	8001464 <__gesf2+0x34>
 80014bc:	2002      	movs	r0, #2
 80014be:	4240      	negs	r0, r0
 80014c0:	e7d0      	b.n	8001464 <__gesf2+0x34>
 80014c2:	2001      	movs	r0, #1
 80014c4:	4240      	negs	r0, r0
 80014c6:	e7cd      	b.n	8001464 <__gesf2+0x34>
 80014c8:	428b      	cmp	r3, r1
 80014ca:	d0e8      	beq.n	800149e <__gesf2+0x6e>
 80014cc:	e7db      	b.n	8001486 <__gesf2+0x56>
 80014ce:	46c0      	nop			@ (mov r8, r8)

080014d0 <__lesf2>:
 80014d0:	b530      	push	{r4, r5, lr}
 80014d2:	0042      	lsls	r2, r0, #1
 80014d4:	0244      	lsls	r4, r0, #9
 80014d6:	024d      	lsls	r5, r1, #9
 80014d8:	0fc3      	lsrs	r3, r0, #31
 80014da:	0048      	lsls	r0, r1, #1
 80014dc:	0a64      	lsrs	r4, r4, #9
 80014de:	0e12      	lsrs	r2, r2, #24
 80014e0:	0a6d      	lsrs	r5, r5, #9
 80014e2:	0e00      	lsrs	r0, r0, #24
 80014e4:	0fc9      	lsrs	r1, r1, #31
 80014e6:	2aff      	cmp	r2, #255	@ 0xff
 80014e8:	d01a      	beq.n	8001520 <__lesf2+0x50>
 80014ea:	28ff      	cmp	r0, #255	@ 0xff
 80014ec:	d00e      	beq.n	800150c <__lesf2+0x3c>
 80014ee:	2a00      	cmp	r2, #0
 80014f0:	d11e      	bne.n	8001530 <__lesf2+0x60>
 80014f2:	2800      	cmp	r0, #0
 80014f4:	d10e      	bne.n	8001514 <__lesf2+0x44>
 80014f6:	2d00      	cmp	r5, #0
 80014f8:	d02a      	beq.n	8001550 <__lesf2+0x80>
 80014fa:	2c00      	cmp	r4, #0
 80014fc:	d00c      	beq.n	8001518 <__lesf2+0x48>
 80014fe:	428b      	cmp	r3, r1
 8001500:	d01d      	beq.n	800153e <__lesf2+0x6e>
 8001502:	1e58      	subs	r0, r3, #1
 8001504:	2302      	movs	r3, #2
 8001506:	4018      	ands	r0, r3
 8001508:	3801      	subs	r0, #1
 800150a:	e010      	b.n	800152e <__lesf2+0x5e>
 800150c:	2d00      	cmp	r5, #0
 800150e:	d10d      	bne.n	800152c <__lesf2+0x5c>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d120      	bne.n	8001556 <__lesf2+0x86>
 8001514:	2c00      	cmp	r4, #0
 8001516:	d11e      	bne.n	8001556 <__lesf2+0x86>
 8001518:	2900      	cmp	r1, #0
 800151a:	d023      	beq.n	8001564 <__lesf2+0x94>
 800151c:	0008      	movs	r0, r1
 800151e:	e006      	b.n	800152e <__lesf2+0x5e>
 8001520:	2c00      	cmp	r4, #0
 8001522:	d103      	bne.n	800152c <__lesf2+0x5c>
 8001524:	28ff      	cmp	r0, #255	@ 0xff
 8001526:	d1ec      	bne.n	8001502 <__lesf2+0x32>
 8001528:	2d00      	cmp	r5, #0
 800152a:	d017      	beq.n	800155c <__lesf2+0x8c>
 800152c:	2002      	movs	r0, #2
 800152e:	bd30      	pop	{r4, r5, pc}
 8001530:	2800      	cmp	r0, #0
 8001532:	d0e6      	beq.n	8001502 <__lesf2+0x32>
 8001534:	428b      	cmp	r3, r1
 8001536:	d1e4      	bne.n	8001502 <__lesf2+0x32>
 8001538:	4282      	cmp	r2, r0
 800153a:	dce2      	bgt.n	8001502 <__lesf2+0x32>
 800153c:	db04      	blt.n	8001548 <__lesf2+0x78>
 800153e:	42ac      	cmp	r4, r5
 8001540:	d8df      	bhi.n	8001502 <__lesf2+0x32>
 8001542:	2000      	movs	r0, #0
 8001544:	42ac      	cmp	r4, r5
 8001546:	d2f2      	bcs.n	800152e <__lesf2+0x5e>
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00b      	beq.n	8001564 <__lesf2+0x94>
 800154c:	0018      	movs	r0, r3
 800154e:	e7ee      	b.n	800152e <__lesf2+0x5e>
 8001550:	2c00      	cmp	r4, #0
 8001552:	d0ec      	beq.n	800152e <__lesf2+0x5e>
 8001554:	e7d5      	b.n	8001502 <__lesf2+0x32>
 8001556:	428b      	cmp	r3, r1
 8001558:	d1d3      	bne.n	8001502 <__lesf2+0x32>
 800155a:	e7f5      	b.n	8001548 <__lesf2+0x78>
 800155c:	2000      	movs	r0, #0
 800155e:	428b      	cmp	r3, r1
 8001560:	d0e5      	beq.n	800152e <__lesf2+0x5e>
 8001562:	e7ce      	b.n	8001502 <__lesf2+0x32>
 8001564:	2001      	movs	r0, #1
 8001566:	4240      	negs	r0, r0
 8001568:	e7e1      	b.n	800152e <__lesf2+0x5e>
 800156a:	46c0      	nop			@ (mov r8, r8)

0800156c <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	0004      	movs	r4, r0
 8001574:	0008      	movs	r0, r1
 8001576:	0011      	movs	r1, r2
 8001578:	1dbb      	adds	r3, r7, #6
 800157a:	1c22      	adds	r2, r4, #0
 800157c:	801a      	strh	r2, [r3, #0]
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	1c02      	adds	r2, r0, #0
 8001582:	801a      	strh	r2, [r3, #0]
 8001584:	1cbb      	adds	r3, r7, #2
 8001586:	1c0a      	adds	r2, r1, #0
 8001588:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(y,x, color);
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	8818      	ldrh	r0, [r3, #0]
 800158e:	1dbb      	adds	r3, r7, #6
 8001590:	8819      	ldrh	r1, [r3, #0]
 8001592:	1cbb      	adds	r3, r7, #2
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	001a      	movs	r2, r3
 8001598:	f000 fd2c 	bl	8001ff4 <ST7735_DrawPixel>
}
 800159c:	46c0      	nop			@ (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	b003      	add	sp, #12
 80015a2:	bd90      	pop	{r4, r7, pc}

080015a4 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	46c6      	mov	lr, r8
 80015a8:	b500      	push	{lr}
 80015aa:	b090      	sub	sp, #64	@ 0x40
 80015ac:	af04      	add	r7, sp, #16
 80015ae:	468c      	mov	ip, r1
 80015b0:	0016      	movs	r6, r2
 80015b2:	0019      	movs	r1, r3
 80015b4:	221e      	movs	r2, #30
 80015b6:	18ba      	adds	r2, r7, r2
 80015b8:	1c03      	adds	r3, r0, #0
 80015ba:	8013      	strh	r3, [r2, #0]
 80015bc:	231c      	movs	r3, #28
 80015be:	18fb      	adds	r3, r7, r3
 80015c0:	4662      	mov	r2, ip
 80015c2:	801a      	strh	r2, [r3, #0]
 80015c4:	201a      	movs	r0, #26
 80015c6:	183b      	adds	r3, r7, r0
 80015c8:	1c32      	adds	r2, r6, #0
 80015ca:	801a      	strh	r2, [r3, #0]
 80015cc:	2018      	movs	r0, #24
 80015ce:	183b      	adds	r3, r7, r0
 80015d0:	1c0a      	adds	r2, r1, #0
 80015d2:	801a      	strh	r2, [r3, #0]
 80015d4:	466b      	mov	r3, sp
 80015d6:	4698      	mov	r8, r3
	uint16_t pallette[] = {color};
 80015d8:	230c      	movs	r3, #12
 80015da:	0001      	movs	r1, r0
 80015dc:	185e      	adds	r6, r3, r1
 80015de:	19f2      	adds	r2, r6, r7
 80015e0:	2030      	movs	r0, #48	@ 0x30
 80015e2:	1846      	adds	r6, r0, r1
 80015e4:	19f3      	adds	r3, r6, r7
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	8013      	strh	r3, [r2, #0]
	    uint16_t pixels[w*h][2];
 80015ea:	201a      	movs	r0, #26
 80015ec:	183b      	adds	r3, r7, r0
 80015ee:	2200      	movs	r2, #0
 80015f0:	5e9b      	ldrsh	r3, [r3, r2]
 80015f2:	187a      	adds	r2, r7, r1
 80015f4:	2000      	movs	r0, #0
 80015f6:	5e12      	ldrsh	r2, [r2, r0]
 80015f8:	4353      	muls	r3, r2
 80015fa:	1e5a      	subs	r2, r3, #1
 80015fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80015fe:	001a      	movs	r2, r3
 8001600:	60ba      	str	r2, [r7, #8]
 8001602:	2200      	movs	r2, #0
 8001604:	60fa      	str	r2, [r7, #12]
 8001606:	68b8      	ldr	r0, [r7, #8]
 8001608:	68f9      	ldr	r1, [r7, #12]
 800160a:	0002      	movs	r2, r0
 800160c:	0ed2      	lsrs	r2, r2, #27
 800160e:	000e      	movs	r6, r1
 8001610:	0176      	lsls	r6, r6, #5
 8001612:	617e      	str	r6, [r7, #20]
 8001614:	697e      	ldr	r6, [r7, #20]
 8001616:	4316      	orrs	r6, r2
 8001618:	617e      	str	r6, [r7, #20]
 800161a:	0002      	movs	r2, r0
 800161c:	0152      	lsls	r2, r2, #5
 800161e:	613a      	str	r2, [r7, #16]
 8001620:	001a      	movs	r2, r3
 8001622:	603a      	str	r2, [r7, #0]
 8001624:	2200      	movs	r2, #0
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	6838      	ldr	r0, [r7, #0]
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	0002      	movs	r2, r0
 800162e:	0ed2      	lsrs	r2, r2, #27
 8001630:	000e      	movs	r6, r1
 8001632:	0175      	lsls	r5, r6, #5
 8001634:	4315      	orrs	r5, r2
 8001636:	0002      	movs	r2, r0
 8001638:	0154      	lsls	r4, r2, #5
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	3307      	adds	r3, #7
 800163e:	08db      	lsrs	r3, r3, #3
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	466a      	mov	r2, sp
 8001644:	1ad2      	subs	r2, r2, r3
 8001646:	4695      	mov	sp, r2
 8001648:	ab04      	add	r3, sp, #16
 800164a:	3301      	adds	r3, #1
 800164c:	085b      	lsrs	r3, r3, #1
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	62bb      	str	r3, [r7, #40]	@ 0x28

	    pixels[0][0] = 0;
 8001652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001654:	2200      	movs	r2, #0
 8001656:	801a      	strh	r2, [r3, #0]
	    pixels[0][1] = w*h;
 8001658:	201a      	movs	r0, #26
 800165a:	183b      	adds	r3, r7, r0
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	2118      	movs	r1, #24
 8001660:	187a      	adds	r2, r7, r1
 8001662:	8812      	ldrh	r2, [r2, #0]
 8001664:	4353      	muls	r3, r2
 8001666:	b29a      	uxth	r2, r3
 8001668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800166a:	805a      	strh	r2, [r3, #2]
	    drawImage(pixels, pallette, x, y, w, h, 1);
 800166c:	221e      	movs	r2, #30
 800166e:	18bb      	adds	r3, r7, r2
 8001670:	881c      	ldrh	r4, [r3, #0]
 8001672:	231c      	movs	r3, #28
 8001674:	18fb      	adds	r3, r7, r3
 8001676:	881d      	ldrh	r5, [r3, #0]
 8001678:	183b      	adds	r3, r7, r0
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	0008      	movs	r0, r1
 800167e:	187a      	adds	r2, r7, r1
 8001680:	8812      	ldrh	r2, [r2, #0]
 8001682:	210c      	movs	r1, #12
 8001684:	1809      	adds	r1, r1, r0
 8001686:	19c9      	adds	r1, r1, r7
 8001688:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800168a:	2601      	movs	r6, #1
 800168c:	46b4      	mov	ip, r6
 800168e:	4666      	mov	r6, ip
 8001690:	9602      	str	r6, [sp, #8]
 8001692:	9201      	str	r2, [sp, #4]
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	002b      	movs	r3, r5
 8001698:	0022      	movs	r2, r4
 800169a:	f000 fa09 	bl	8001ab0 <drawImage>
 800169e:	46c5      	mov	sp, r8

	//ST7735_FillRectangle(x, y, w, h, color);
}
 80016a0:	46c0      	nop			@ (mov r8, r8)
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b00c      	add	sp, #48	@ 0x30
 80016a6:	bc80      	pop	{r7}
 80016a8:	46b8      	mov	r8, r7
 80016aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016ac <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	0004      	movs	r4, r0
 80016b4:	0008      	movs	r0, r1
 80016b6:	0011      	movs	r1, r2
 80016b8:	1dbb      	adds	r3, r7, #6
 80016ba:	1c22      	adds	r2, r4, #0
 80016bc:	801a      	strh	r2, [r3, #0]
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	1c02      	adds	r2, r0, #0
 80016c2:	801a      	strh	r2, [r3, #0]
 80016c4:	1cbb      	adds	r3, r7, #2
 80016c6:	1c0a      	adds	r2, r1, #0
 80016c8:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 80016ca:	1cbb      	adds	r3, r7, #2
 80016cc:	881a      	ldrh	r2, [r3, #0]
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	2100      	movs	r1, #0
 80016d2:	5e59      	ldrsh	r1, [r3, r1]
 80016d4:	1dbb      	adds	r3, r7, #6
 80016d6:	2000      	movs	r0, #0
 80016d8:	5e1b      	ldrsh	r3, [r3, r0]
 80016da:	0018      	movs	r0, r3
 80016dc:	f7ff ff46 	bl	800156c <drawPixel>
}
 80016e0:	46c0      	nop			@ (mov r8, r8)
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b003      	add	sp, #12
 80016e6:	bd90      	pop	{r4, r7, pc}

080016e8 <drawString>:
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
void drawString(int16_t x, int16_t y, char* c, int16_t textColor, int16_t bgColor, uint8_t size, uint8_t spacing)
{
 80016e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ea:	b089      	sub	sp, #36	@ 0x24
 80016ec:	af02      	add	r7, sp, #8
 80016ee:	0004      	movs	r4, r0
 80016f0:	0008      	movs	r0, r1
 80016f2:	60ba      	str	r2, [r7, #8]
 80016f4:	0019      	movs	r1, r3
 80016f6:	230e      	movs	r3, #14
 80016f8:	18fb      	adds	r3, r7, r3
 80016fa:	1c22      	adds	r2, r4, #0
 80016fc:	801a      	strh	r2, [r3, #0]
 80016fe:	230c      	movs	r3, #12
 8001700:	18fb      	adds	r3, r7, r3
 8001702:	1c02      	adds	r2, r0, #0
 8001704:	801a      	strh	r2, [r3, #0]
 8001706:	1dbb      	adds	r3, r7, #6
 8001708:	1c0a      	adds	r2, r1, #0
 800170a:	801a      	strh	r2, [r3, #0]
	uint16_t i =0;
 800170c:	2316      	movs	r3, #22
 800170e:	18fb      	adds	r3, r7, r3
 8001710:	2200      	movs	r2, #0
 8001712:	801a      	strh	r2, [r3, #0]

	while(c[i])
 8001714:	e03f      	b.n	8001796 <drawString+0xae>
	{
		drawChar(x, y, c[i], textColor, bgColor, size);
 8001716:	2516      	movs	r5, #22
 8001718:	197b      	adds	r3, r7, r5
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	68ba      	ldr	r2, [r7, #8]
 800171e:	18d3      	adds	r3, r2, r3
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	469c      	mov	ip, r3
 8001724:	1dbb      	adds	r3, r7, #6
 8001726:	2400      	movs	r4, #0
 8001728:	5f1c      	ldrsh	r4, [r3, r4]
 800172a:	230c      	movs	r3, #12
 800172c:	18fb      	adds	r3, r7, r3
 800172e:	2100      	movs	r1, #0
 8001730:	5e59      	ldrsh	r1, [r3, r1]
 8001732:	260e      	movs	r6, #14
 8001734:	19bb      	adds	r3, r7, r6
 8001736:	2000      	movs	r0, #0
 8001738:	5e18      	ldrsh	r0, [r3, r0]
 800173a:	232c      	movs	r3, #44	@ 0x2c
 800173c:	2208      	movs	r2, #8
 800173e:	189b      	adds	r3, r3, r2
 8001740:	19db      	adds	r3, r3, r7
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	2328      	movs	r3, #40	@ 0x28
 8001748:	189b      	adds	r3, r3, r2
 800174a:	19db      	adds	r3, r3, r7
 800174c:	2200      	movs	r2, #0
 800174e:	5e9b      	ldrsh	r3, [r3, r2]
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	0023      	movs	r3, r4
 8001754:	4662      	mov	r2, ip
 8001756:	f000 f82b 	bl	80017b0 <drawChar>
		x+=(size*6)+spacing;
 800175a:	232c      	movs	r3, #44	@ 0x2c
 800175c:	2108      	movs	r1, #8
 800175e:	185b      	adds	r3, r3, r1
 8001760:	19db      	adds	r3, r3, r7
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b29b      	uxth	r3, r3
 8001766:	1c1a      	adds	r2, r3, #0
 8001768:	1c13      	adds	r3, r2, #0
 800176a:	18db      	adds	r3, r3, r3
 800176c:	189b      	adds	r3, r3, r2
 800176e:	18db      	adds	r3, r3, r3
 8001770:	b29a      	uxth	r2, r3
 8001772:	2330      	movs	r3, #48	@ 0x30
 8001774:	185b      	adds	r3, r3, r1
 8001776:	19db      	adds	r3, r3, r7
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b29b      	uxth	r3, r3
 800177c:	18d3      	adds	r3, r2, r3
 800177e:	b29a      	uxth	r2, r3
 8001780:	19bb      	adds	r3, r7, r6
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	18d3      	adds	r3, r2, r3
 8001786:	b29a      	uxth	r2, r3
 8001788:	19bb      	adds	r3, r7, r6
 800178a:	801a      	strh	r2, [r3, #0]
		i++;
 800178c:	197b      	adds	r3, r7, r5
 800178e:	881a      	ldrh	r2, [r3, #0]
 8001790:	197b      	adds	r3, r7, r5
 8001792:	3201      	adds	r2, #1
 8001794:	801a      	strh	r2, [r3, #0]
	while(c[i])
 8001796:	2316      	movs	r3, #22
 8001798:	18fb      	adds	r3, r7, r3
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	18d3      	adds	r3, r2, r3
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1b7      	bne.n	8001716 <drawString+0x2e>
	}
}
 80017a6:	46c0      	nop			@ (mov r8, r8)
 80017a8:	46c0      	nop			@ (mov r8, r8)
 80017aa:	46bd      	mov	sp, r7
 80017ac:	b007      	add	sp, #28
 80017ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017b0 <drawChar>:
void drawChar(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 80017b0:	b5b0      	push	{r4, r5, r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af02      	add	r7, sp, #8
 80017b6:	0005      	movs	r5, r0
 80017b8:	000c      	movs	r4, r1
 80017ba:	0010      	movs	r0, r2
 80017bc:	0019      	movs	r1, r3
 80017be:	1dbb      	adds	r3, r7, #6
 80017c0:	1c2a      	adds	r2, r5, #0
 80017c2:	801a      	strh	r2, [r3, #0]
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	1c22      	adds	r2, r4, #0
 80017c8:	801a      	strh	r2, [r3, #0]
 80017ca:	1cfb      	adds	r3, r7, #3
 80017cc:	1c02      	adds	r2, r0, #0
 80017ce:	701a      	strb	r2, [r3, #0]
 80017d0:	003b      	movs	r3, r7
 80017d2:	1c0a      	adds	r2, r1, #0
 80017d4:	801a      	strh	r2, [r3, #0]
  uint8_t line;
  int32_t i, j;
  if((x >= _width)            ||
 80017d6:	4b79      	ldr	r3, [pc, #484]	@ (80019bc <drawChar+0x20c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	5e9b      	ldrsh	r3, [r3, r2]
 80017dc:	1dba      	adds	r2, r7, #6
 80017de:	2100      	movs	r1, #0
 80017e0:	5e52      	ldrsh	r2, [r2, r1]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	db00      	blt.n	80017e8 <drawChar+0x38>
 80017e6:	e0e5      	b.n	80019b4 <drawChar+0x204>
     (y >= _height)           ||
 80017e8:	4b75      	ldr	r3, [pc, #468]	@ (80019c0 <drawChar+0x210>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	5e9b      	ldrsh	r3, [r3, r2]
  if((x >= _width)            ||
 80017ee:	1d3a      	adds	r2, r7, #4
 80017f0:	2100      	movs	r1, #0
 80017f2:	5e52      	ldrsh	r2, [r2, r1]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	db00      	blt.n	80017fa <drawChar+0x4a>
 80017f8:	e0dc      	b.n	80019b4 <drawChar+0x204>
     ((x + 5 * size - 1) < 0) ||
 80017fa:	1dbb      	adds	r3, r7, #6
 80017fc:	2100      	movs	r1, #0
 80017fe:	5e59      	ldrsh	r1, [r3, r1]
 8001800:	202c      	movs	r0, #44	@ 0x2c
 8001802:	183b      	adds	r3, r7, r0
 8001804:	781a      	ldrb	r2, [r3, #0]
 8001806:	0013      	movs	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	189b      	adds	r3, r3, r2
 800180c:	18cb      	adds	r3, r1, r3
     (y >= _height)           ||
 800180e:	2b00      	cmp	r3, #0
 8001810:	dc00      	bgt.n	8001814 <drawChar+0x64>
 8001812:	e0cf      	b.n	80019b4 <drawChar+0x204>
     ((y + 8 * size - 1) < 0))
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	2200      	movs	r2, #0
 8001818:	5e9a      	ldrsh	r2, [r3, r2]
 800181a:	183b      	adds	r3, r7, r0
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	18d3      	adds	r3, r2, r3
     ((x + 5 * size - 1) < 0) ||
 8001822:	2b00      	cmp	r3, #0
 8001824:	dc00      	bgt.n	8001828 <drawChar+0x78>
 8001826:	e0c5      	b.n	80019b4 <drawChar+0x204>
    return;

  for (i=0; i<6; i++ ) {
 8001828:	2300      	movs	r3, #0
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	e0bd      	b.n	80019aa <drawChar+0x1fa>
    if ((i) == 5)
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	2b05      	cmp	r3, #5
 8001832:	d104      	bne.n	800183e <drawChar+0x8e>
      line = 0x0;
 8001834:	2317      	movs	r3, #23
 8001836:	18fb      	adds	r3, r7, r3
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]
 800183c:	e00b      	b.n	8001856 <drawChar+0xa6>
    else
      line = Font[(c*5)+(i)];
 800183e:	1cfb      	adds	r3, r7, #3
 8001840:	781a      	ldrb	r2, [r3, #0]
 8001842:	0013      	movs	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	189a      	adds	r2, r3, r2
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	18d2      	adds	r2, r2, r3
 800184c:	2317      	movs	r3, #23
 800184e:	18fb      	adds	r3, r7, r3
 8001850:	495c      	ldr	r1, [pc, #368]	@ (80019c4 <drawChar+0x214>)
 8001852:	5c8a      	ldrb	r2, [r1, r2]
 8001854:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	e09f      	b.n	800199c <drawChar+0x1ec>
      if (line & 0x1) {
 800185c:	2317      	movs	r3, #23
 800185e:	18fb      	adds	r3, r7, r3
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2201      	movs	r2, #1
 8001864:	4013      	ands	r3, r2
 8001866:	d043      	beq.n	80018f0 <drawChar+0x140>
        if (size == 1)
 8001868:	232c      	movs	r3, #44	@ 0x2c
 800186a:	18fb      	adds	r3, r7, r3
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d115      	bne.n	800189e <drawChar+0xee>
          writePixel(x+(i), y+(7-j), textColor);
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	b29a      	uxth	r2, r3
 8001876:	1dbb      	adds	r3, r7, #6
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	18d3      	adds	r3, r2, r3
 800187c:	b29b      	uxth	r3, r3
 800187e:	b218      	sxth	r0, r3
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	881a      	ldrh	r2, [r3, #0]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	b29b      	uxth	r3, r3
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	b29b      	uxth	r3, r3
 800188c:	3307      	adds	r3, #7
 800188e:	b29b      	uxth	r3, r3
 8001890:	b219      	sxth	r1, r3
 8001892:	003b      	movs	r3, r7
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	001a      	movs	r2, r3
 8001898:	f7ff ff08 	bl	80016ac <writePixel>
 800189c:	e075      	b.n	800198a <drawChar+0x1da>
        else {
          fillRect(x+((i)*size), y+((7-j)*size), size, size, textColor);
 800189e:	212c      	movs	r1, #44	@ 0x2c
 80018a0:	187b      	adds	r3, r7, r1
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	b292      	uxth	r2, r2
 80018aa:	4353      	muls	r3, r2
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	1dbb      	adds	r3, r7, #6
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	18d3      	adds	r3, r2, r3
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	b218      	sxth	r0, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2207      	movs	r2, #7
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	b29b      	uxth	r3, r3
 80018c0:	000c      	movs	r4, r1
 80018c2:	187a      	adds	r2, r7, r1
 80018c4:	7812      	ldrb	r2, [r2, #0]
 80018c6:	b292      	uxth	r2, r2
 80018c8:	4353      	muls	r3, r2
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	18d3      	adds	r3, r2, r3
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	b219      	sxth	r1, r3
 80018d6:	193b      	adds	r3, r7, r4
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	b21a      	sxth	r2, r3
 80018dc:	193b      	adds	r3, r7, r4
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	b21c      	sxth	r4, r3
 80018e2:	003b      	movs	r3, r7
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	0023      	movs	r3, r4
 80018ea:	f7ff fe5b 	bl	80015a4 <fillRect>
 80018ee:	e04c      	b.n	800198a <drawChar+0x1da>
        }
      } else if (bgColor != textColor) {
 80018f0:	2428      	movs	r4, #40	@ 0x28
 80018f2:	193b      	adds	r3, r7, r4
 80018f4:	0039      	movs	r1, r7
 80018f6:	2200      	movs	r2, #0
 80018f8:	5e9a      	ldrsh	r2, [r3, r2]
 80018fa:	2300      	movs	r3, #0
 80018fc:	5ecb      	ldrsh	r3, [r1, r3]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d043      	beq.n	800198a <drawChar+0x1da>
        if (size == 1) // default size
 8001902:	232c      	movs	r3, #44	@ 0x2c
 8001904:	18fb      	adds	r3, r7, r3
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d115      	bne.n	8001938 <drawChar+0x188>
          writePixel(x+(i), y+(7-j), bgColor);
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	b29a      	uxth	r2, r3
 8001910:	1dbb      	adds	r3, r7, #6
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	18d3      	adds	r3, r2, r3
 8001916:	b29b      	uxth	r3, r3
 8001918:	b218      	sxth	r0, r3
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	881a      	ldrh	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	b29b      	uxth	r3, r3
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	b29b      	uxth	r3, r3
 8001926:	3307      	adds	r3, #7
 8001928:	b29b      	uxth	r3, r3
 800192a:	b219      	sxth	r1, r3
 800192c:	193b      	adds	r3, r7, r4
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	001a      	movs	r2, r3
 8001932:	f7ff febb 	bl	80016ac <writePixel>
 8001936:	e028      	b.n	800198a <drawChar+0x1da>
        else {  // big size
          fillRect(x+(i)*size, y+(7-j)*size, size, size, bgColor);
 8001938:	212c      	movs	r1, #44	@ 0x2c
 800193a:	187b      	adds	r3, r7, r1
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	b292      	uxth	r2, r2
 8001944:	4353      	muls	r3, r2
 8001946:	b29a      	uxth	r2, r3
 8001948:	1dbb      	adds	r3, r7, #6
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	18d3      	adds	r3, r2, r3
 800194e:	b29b      	uxth	r3, r3
 8001950:	b218      	sxth	r0, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2207      	movs	r2, #7
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	b29b      	uxth	r3, r3
 800195a:	000c      	movs	r4, r1
 800195c:	187a      	adds	r2, r7, r1
 800195e:	7812      	ldrb	r2, [r2, #0]
 8001960:	b292      	uxth	r2, r2
 8001962:	4353      	muls	r3, r2
 8001964:	b29a      	uxth	r2, r3
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	18d3      	adds	r3, r2, r3
 800196c:	b29b      	uxth	r3, r3
 800196e:	b219      	sxth	r1, r3
 8001970:	193b      	adds	r3, r7, r4
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	b21a      	sxth	r2, r3
 8001976:	193b      	adds	r3, r7, r4
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	b21c      	sxth	r4, r3
 800197c:	2328      	movs	r3, #40	@ 0x28
 800197e:	18fb      	adds	r3, r7, r3
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	0023      	movs	r3, r4
 8001986:	f7ff fe0d 	bl	80015a4 <fillRect>
        }
      }
      line >>= 1;
 800198a:	2217      	movs	r2, #23
 800198c:	18bb      	adds	r3, r7, r2
 800198e:	18ba      	adds	r2, r7, r2
 8001990:	7812      	ldrb	r2, [r2, #0]
 8001992:	0852      	lsrs	r2, r2, #1
 8001994:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	3301      	adds	r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b07      	cmp	r3, #7
 80019a0:	dc00      	bgt.n	80019a4 <drawChar+0x1f4>
 80019a2:	e75b      	b.n	800185c <drawChar+0xac>
  for (i=0; i<6; i++ ) {
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	3301      	adds	r3, #1
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	2b05      	cmp	r3, #5
 80019ae:	dc00      	bgt.n	80019b2 <drawChar+0x202>
 80019b0:	e73d      	b.n	800182e <drawChar+0x7e>
 80019b2:	e000      	b.n	80019b6 <drawChar+0x206>
    return;
 80019b4:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b006      	add	sp, #24
 80019ba:	bdb0      	pop	{r4, r5, r7, pc}
 80019bc:	2000056c 	.word	0x2000056c
 80019c0:	2000056e 	.word	0x2000056e
 80019c4:	08009d44 	.word	0x08009d44

080019c8 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80019c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ca:	b091      	sub	sp, #68	@ 0x44
 80019cc:	af04      	add	r7, sp, #16
 80019ce:	231e      	movs	r3, #30
 80019d0:	18f9      	adds	r1, r7, r3
 80019d2:	8008      	strh	r0, [r1, #0]
 80019d4:	4669      	mov	r1, sp
 80019d6:	000e      	movs	r6, r1
    uint16_t pallette[] = {color};
 80019d8:	210c      	movs	r1, #12
 80019da:	2318      	movs	r3, #24
 80019dc:	18cb      	adds	r3, r1, r3
 80019de:	19d9      	adds	r1, r3, r7
 80019e0:	231e      	movs	r3, #30
 80019e2:	18f8      	adds	r0, r7, r3
 80019e4:	8800      	ldrh	r0, [r0, #0]
 80019e6:	8008      	strh	r0, [r1, #0]
    uint16_t pixels[_width*_height][2];
 80019e8:	492f      	ldr	r1, [pc, #188]	@ (8001aa8 <fillScreen+0xe0>)
 80019ea:	2300      	movs	r3, #0
 80019ec:	5ec9      	ldrsh	r1, [r1, r3]
 80019ee:	0008      	movs	r0, r1
 80019f0:	492e      	ldr	r1, [pc, #184]	@ (8001aac <fillScreen+0xe4>)
 80019f2:	2300      	movs	r3, #0
 80019f4:	5ec9      	ldrsh	r1, [r1, r3]
 80019f6:	4341      	muls	r1, r0
 80019f8:	1e48      	subs	r0, r1, #1
 80019fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80019fc:	0008      	movs	r0, r1
 80019fe:	6138      	str	r0, [r7, #16]
 8001a00:	2000      	movs	r0, #0
 8001a02:	6178      	str	r0, [r7, #20]
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	0010      	movs	r0, r2
 8001a0a:	0ec0      	lsrs	r0, r0, #27
 8001a0c:	613a      	str	r2, [r7, #16]
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	015d      	lsls	r5, r3, #5
 8001a12:	4305      	orrs	r5, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	015c      	lsls	r4, r3, #5
 8001a18:	0008      	movs	r0, r1
 8001a1a:	6038      	str	r0, [r7, #0]
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	683c      	ldr	r4, [r7, #0]
 8001a22:	687d      	ldr	r5, [r7, #4]
 8001a24:	0023      	movs	r3, r4
 8001a26:	0ed8      	lsrs	r0, r3, #27
 8001a28:	002b      	movs	r3, r5
 8001a2a:	015b      	lsls	r3, r3, #5
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	4303      	orrs	r3, r0
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	0023      	movs	r3, r4
 8001a36:	015b      	lsls	r3, r3, #5
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	000b      	movs	r3, r1
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	3307      	adds	r3, #7
 8001a40:	08db      	lsrs	r3, r3, #3
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	466a      	mov	r2, sp
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	469d      	mov	sp, r3
 8001a4a:	ab04      	add	r3, sp, #16
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	085b      	lsrs	r3, r3, #1
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	62bb      	str	r3, [r7, #40]	@ 0x28

    pixels[0][0] = 0;
 8001a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a56:	2200      	movs	r2, #0
 8001a58:	801a      	strh	r2, [r3, #0]
    pixels[0][1] = _width*_height;
 8001a5a:	4b13      	ldr	r3, [pc, #76]	@ (8001aa8 <fillScreen+0xe0>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	5e9b      	ldrsh	r3, [r3, r2]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	4a12      	ldr	r2, [pc, #72]	@ (8001aac <fillScreen+0xe4>)
 8001a64:	2000      	movs	r0, #0
 8001a66:	5e12      	ldrsh	r2, [r2, r0]
 8001a68:	b292      	uxth	r2, r2
 8001a6a:	4353      	muls	r3, r2
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a70:	805a      	strh	r2, [r3, #2]
    drawImage(pixels, pallette, 0, 0, _width, _height, 1);
 8001a72:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa8 <fillScreen+0xe0>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	5e9b      	ldrsh	r3, [r3, r2]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001aac <fillScreen+0xe4>)
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	5e12      	ldrsh	r2, [r2, r0]
 8001a80:	b292      	uxth	r2, r2
 8001a82:	210c      	movs	r1, #12
 8001a84:	2018      	movs	r0, #24
 8001a86:	1809      	adds	r1, r1, r0
 8001a88:	19c9      	adds	r1, r1, r7
 8001a8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001a8c:	2401      	movs	r4, #1
 8001a8e:	9402      	str	r4, [sp, #8]
 8001a90:	9201      	str	r2, [sp, #4]
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	2300      	movs	r3, #0
 8001a96:	2200      	movs	r2, #0
 8001a98:	f000 f80a 	bl	8001ab0 <drawImage>
 8001a9c:	46b5      	mov	sp, r6
	//fillRect(0, 0, _width, _height, color);
}
 8001a9e:	46c0      	nop			@ (mov r8, r8)
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b00d      	add	sp, #52	@ 0x34
 8001aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aa6:	46c0      	nop			@ (mov r8, r8)
 8001aa8:	2000056c 	.word	0x2000056c
 8001aac:	2000056e 	.word	0x2000056e

08001ab0 <drawImage>:

void drawImage(uint16_t image[][2], uint16_t palette[], uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
{
 8001ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab2:	46c6      	mov	lr, r8
 8001ab4:	b500      	push	{lr}
 8001ab6:	b092      	sub	sp, #72	@ 0x48
 8001ab8:	af02      	add	r7, sp, #8
 8001aba:	6278      	str	r0, [r7, #36]	@ 0x24
 8001abc:	6239      	str	r1, [r7, #32]
 8001abe:	0019      	movs	r1, r3
 8001ac0:	231e      	movs	r3, #30
 8001ac2:	18fb      	adds	r3, r7, r3
 8001ac4:	801a      	strh	r2, [r3, #0]
 8001ac6:	231c      	movs	r3, #28
 8001ac8:	18fb      	adds	r3, r7, r3
 8001aca:	1c0a      	adds	r2, r1, #0
 8001acc:	801a      	strh	r2, [r3, #0]
 8001ace:	466b      	mov	r3, sp
 8001ad0:	4698      	mov	r8, r3
	uint16_t i;
	uint16_t j;
	uint16_t totalInd =0;
 8001ad2:	2322      	movs	r3, #34	@ 0x22
 8001ad4:	2118      	movs	r1, #24
 8001ad6:	185b      	adds	r3, r3, r1
 8001ad8:	19db      	adds	r3, r3, r7
 8001ada:	2200      	movs	r2, #0
 8001adc:	801a      	strh	r2, [r3, #0]
	uint16_t ind;
	uint16_t count;
	uint16_t bufffer[w*h];
 8001ade:	2340      	movs	r3, #64	@ 0x40
 8001ae0:	185b      	adds	r3, r3, r1
 8001ae2:	19db      	adds	r3, r3, r7
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	2244      	movs	r2, #68	@ 0x44
 8001ae8:	1852      	adds	r2, r2, r1
 8001aea:	19d2      	adds	r2, r2, r7
 8001aec:	8812      	ldrh	r2, [r2, #0]
 8001aee:	4353      	muls	r3, r2
 8001af0:	1e5a      	subs	r2, r3, #1
 8001af2:	637a      	str	r2, [r7, #52]	@ 0x34
 8001af4:	001a      	movs	r2, r3
 8001af6:	60ba      	str	r2, [r7, #8]
 8001af8:	2200      	movs	r2, #0
 8001afa:	60fa      	str	r2, [r7, #12]
 8001afc:	68b8      	ldr	r0, [r7, #8]
 8001afe:	68f9      	ldr	r1, [r7, #12]
 8001b00:	0002      	movs	r2, r0
 8001b02:	0f12      	lsrs	r2, r2, #28
 8001b04:	000e      	movs	r6, r1
 8001b06:	0136      	lsls	r6, r6, #4
 8001b08:	617e      	str	r6, [r7, #20]
 8001b0a:	697e      	ldr	r6, [r7, #20]
 8001b0c:	4316      	orrs	r6, r2
 8001b0e:	617e      	str	r6, [r7, #20]
 8001b10:	0002      	movs	r2, r0
 8001b12:	0112      	lsls	r2, r2, #4
 8001b14:	613a      	str	r2, [r7, #16]
 8001b16:	001a      	movs	r2, r3
 8001b18:	603a      	str	r2, [r7, #0]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	6838      	ldr	r0, [r7, #0]
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	0002      	movs	r2, r0
 8001b24:	0f12      	lsrs	r2, r2, #28
 8001b26:	000e      	movs	r6, r1
 8001b28:	0135      	lsls	r5, r6, #4
 8001b2a:	4315      	orrs	r5, r2
 8001b2c:	0002      	movs	r2, r0
 8001b2e:	0114      	lsls	r4, r2, #4
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	3307      	adds	r3, #7
 8001b34:	08db      	lsrs	r3, r3, #3
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	466a      	mov	r2, sp
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	469d      	mov	sp, r3
 8001b3e:	ab02      	add	r3, sp, #8
 8001b40:	3301      	adds	r3, #1
 8001b42:	085b      	lsrs	r3, r3, #1
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	633b      	str	r3, [r7, #48]	@ 0x30
for(i=0; i<c; i++)
 8001b48:	2326      	movs	r3, #38	@ 0x26
 8001b4a:	2118      	movs	r1, #24
 8001b4c:	185b      	adds	r3, r3, r1
 8001b4e:	19db      	adds	r3, r3, r7
 8001b50:	2200      	movs	r2, #0
 8001b52:	801a      	strh	r2, [r3, #0]
 8001b54:	e04d      	b.n	8001bf2 <drawImage+0x142>
{
	ind = image[i][0];
 8001b56:	2126      	movs	r1, #38	@ 0x26
 8001b58:	2018      	movs	r0, #24
 8001b5a:	180b      	adds	r3, r1, r0
 8001b5c:	19db      	adds	r3, r3, r7
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b64:	18d2      	adds	r2, r2, r3
 8001b66:	2316      	movs	r3, #22
 8001b68:	181b      	adds	r3, r3, r0
 8001b6a:	19db      	adds	r3, r3, r7
 8001b6c:	8812      	ldrh	r2, [r2, #0]
 8001b6e:	801a      	strh	r2, [r3, #0]
	count = image[i][1];
 8001b70:	180b      	adds	r3, r1, r0
 8001b72:	19db      	adds	r3, r3, r7
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b7a:	18d2      	adds	r2, r2, r3
 8001b7c:	2314      	movs	r3, #20
 8001b7e:	181b      	adds	r3, r3, r0
 8001b80:	19db      	adds	r3, r3, r7
 8001b82:	8852      	ldrh	r2, [r2, #2]
 8001b84:	801a      	strh	r2, [r3, #0]
	for(j=0; j<count; j++)
 8001b86:	2324      	movs	r3, #36	@ 0x24
 8001b88:	181b      	adds	r3, r3, r0
 8001b8a:	19db      	adds	r3, r3, r7
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	801a      	strh	r2, [r3, #0]
 8001b90:	e01c      	b.n	8001bcc <drawImage+0x11c>
	{
		bufffer[totalInd++] = palette[ind];
 8001b92:	2316      	movs	r3, #22
 8001b94:	2418      	movs	r4, #24
 8001b96:	191b      	adds	r3, r3, r4
 8001b98:	19db      	adds	r3, r3, r7
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	6a3a      	ldr	r2, [r7, #32]
 8001ba0:	18d2      	adds	r2, r2, r3
 8001ba2:	2122      	movs	r1, #34	@ 0x22
 8001ba4:	190b      	adds	r3, r1, r4
 8001ba6:	19db      	adds	r3, r3, r7
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	1909      	adds	r1, r1, r4
 8001bac:	19c9      	adds	r1, r1, r7
 8001bae:	1c58      	adds	r0, r3, #1
 8001bb0:	8008      	strh	r0, [r1, #0]
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	8811      	ldrh	r1, [r2, #0]
 8001bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bb8:	0042      	lsls	r2, r0, #1
 8001bba:	52d1      	strh	r1, [r2, r3]
	for(j=0; j<count; j++)
 8001bbc:	2124      	movs	r1, #36	@ 0x24
 8001bbe:	190b      	adds	r3, r1, r4
 8001bc0:	19db      	adds	r3, r3, r7
 8001bc2:	881a      	ldrh	r2, [r3, #0]
 8001bc4:	190b      	adds	r3, r1, r4
 8001bc6:	19db      	adds	r3, r3, r7
 8001bc8:	3201      	adds	r2, #1
 8001bca:	801a      	strh	r2, [r3, #0]
 8001bcc:	2324      	movs	r3, #36	@ 0x24
 8001bce:	2018      	movs	r0, #24
 8001bd0:	181b      	adds	r3, r3, r0
 8001bd2:	19da      	adds	r2, r3, r7
 8001bd4:	2314      	movs	r3, #20
 8001bd6:	181b      	adds	r3, r3, r0
 8001bd8:	19db      	adds	r3, r3, r7
 8001bda:	8812      	ldrh	r2, [r2, #0]
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d3d7      	bcc.n	8001b92 <drawImage+0xe2>
for(i=0; i<c; i++)
 8001be2:	2126      	movs	r1, #38	@ 0x26
 8001be4:	180b      	adds	r3, r1, r0
 8001be6:	19db      	adds	r3, r3, r7
 8001be8:	881a      	ldrh	r2, [r3, #0]
 8001bea:	180b      	adds	r3, r1, r0
 8001bec:	19db      	adds	r3, r3, r7
 8001bee:	3201      	adds	r2, #1
 8001bf0:	801a      	strh	r2, [r3, #0]
 8001bf2:	2326      	movs	r3, #38	@ 0x26
 8001bf4:	2118      	movs	r1, #24
 8001bf6:	185b      	adds	r3, r3, r1
 8001bf8:	19da      	adds	r2, r3, r7
 8001bfa:	2348      	movs	r3, #72	@ 0x48
 8001bfc:	185b      	adds	r3, r3, r1
 8001bfe:	19db      	adds	r3, r3, r7
 8001c00:	8812      	ldrh	r2, [r2, #0]
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d3a6      	bcc.n	8001b56 <drawImage+0xa6>
	}
}
ST7735_DrawImage(y, x, w, h, bufffer);
 8001c08:	2344      	movs	r3, #68	@ 0x44
 8001c0a:	185b      	adds	r3, r3, r1
 8001c0c:	19db      	adds	r3, r3, r7
 8001c0e:	881c      	ldrh	r4, [r3, #0]
 8001c10:	2340      	movs	r3, #64	@ 0x40
 8001c12:	185b      	adds	r3, r3, r1
 8001c14:	19db      	adds	r3, r3, r7
 8001c16:	881a      	ldrh	r2, [r3, #0]
 8001c18:	231e      	movs	r3, #30
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	8819      	ldrh	r1, [r3, #0]
 8001c1e:	231c      	movs	r3, #28
 8001c20:	18fb      	adds	r3, r7, r3
 8001c22:	8818      	ldrh	r0, [r3, #0]
 8001c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	0023      	movs	r3, r4
 8001c2a:	f000 fa31 	bl	8002090 <ST7735_DrawImage>
 8001c2e:	46c5      	mov	sp, r8
}
 8001c30:	46c0      	nop			@ (mov r8, r8)
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b010      	add	sp, #64	@ 0x40
 8001c36:	bc80      	pop	{r7}
 8001c38:	46b8      	mov	r8, r7
 8001c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c3c <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8001c40:	23a0      	movs	r3, #160	@ 0xa0
 8001c42:	05db      	lsls	r3, r3, #23
 8001c44:	2200      	movs	r2, #0
 8001c46:	2120      	movs	r1, #32
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f002 fb72 	bl	8004332 <HAL_GPIO_WritePin>
}
 8001c4e:	46c0      	nop			@ (mov r8, r8)
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001c58:	23a0      	movs	r3, #160	@ 0xa0
 8001c5a:	05db      	lsls	r3, r3, #23
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	2120      	movs	r1, #32
 8001c60:	0018      	movs	r0, r3
 8001c62:	f002 fb66 	bl	8004332 <HAL_GPIO_WritePin>
}
 8001c66:	46c0      	nop			@ (mov r8, r8)
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <ST7735_Reset>:

void ST7735_Reset()
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8001c70:	2380      	movs	r3, #128	@ 0x80
 8001c72:	0219      	lsls	r1, r3, #8
 8001c74:	23a0      	movs	r3, #160	@ 0xa0
 8001c76:	05db      	lsls	r3, r3, #23
 8001c78:	2200      	movs	r2, #0
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f002 fb59 	bl	8004332 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001c80:	2005      	movs	r0, #5
 8001c82:	f002 f8b5 	bl	8003df0 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8001c86:	2380      	movs	r3, #128	@ 0x80
 8001c88:	0219      	lsls	r1, r3, #8
 8001c8a:	23a0      	movs	r3, #160	@ 0xa0
 8001c8c:	05db      	lsls	r3, r3, #23
 8001c8e:	2201      	movs	r2, #1
 8001c90:	0018      	movs	r0, r3
 8001c92:	f002 fb4e 	bl	8004332 <HAL_GPIO_WritePin>
}
 8001c96:	46c0      	nop			@ (mov r8, r8)
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	0002      	movs	r2, r0
 8001ca4:	1dfb      	adds	r3, r7, #7
 8001ca6:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8001ca8:	23a0      	movs	r3, #160	@ 0xa0
 8001caa:	05db      	lsls	r3, r3, #23
 8001cac:	2200      	movs	r2, #0
 8001cae:	2110      	movs	r1, #16
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f002 fb3e 	bl	8004332 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	425b      	negs	r3, r3
 8001cba:	1df9      	adds	r1, r7, #7
 8001cbc:	4803      	ldr	r0, [pc, #12]	@ (8001ccc <ST7735_WriteCommand+0x30>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f004 ffbc 	bl	8006c3c <HAL_SPI_Transmit>
}
 8001cc4:	46c0      	nop			@ (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b002      	add	sp, #8
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000744 	.word	0x20000744

08001cd0 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001cda:	23a0      	movs	r3, #160	@ 0xa0
 8001cdc:	05db      	lsls	r3, r3, #23
 8001cde:	2201      	movs	r2, #1
 8001ce0:	2110      	movs	r1, #16
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f002 fb25 	bl	8004332 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	2301      	movs	r3, #1
 8001cee:	425b      	negs	r3, r3
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4803      	ldr	r0, [pc, #12]	@ (8001d00 <ST7735_WriteData+0x30>)
 8001cf4:	f004 ffa2 	bl	8006c3c <HAL_SPI_Transmit>
}
 8001cf8:	46c0      	nop			@ (mov r8, r8)
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	b002      	add	sp, #8
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000744 	.word	0x20000744

08001d04 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	220f      	movs	r2, #15
 8001d14:	18ba      	adds	r2, r7, r2
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 8001d1a:	e04a      	b.n	8001db2 <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	1c5a      	adds	r2, r3, #1
 8001d20:	607a      	str	r2, [r7, #4]
 8001d22:	210b      	movs	r1, #11
 8001d24:	187a      	adds	r2, r7, r1
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 8001d2a:	187b      	adds	r3, r7, r1
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	0018      	movs	r0, r3
 8001d30:	f7ff ffb4 	bl	8001c9c <ST7735_WriteCommand>

        numArgs = *addr++;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	200a      	movs	r0, #10
 8001d3c:	183a      	adds	r2, r7, r0
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001d42:	183b      	adds	r3, r7, r0
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	230c      	movs	r3, #12
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	2180      	movs	r1, #128	@ 0x80
 8001d4e:	400a      	ands	r2, r1
 8001d50:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 8001d52:	183b      	adds	r3, r7, r0
 8001d54:	183a      	adds	r2, r7, r0
 8001d56:	7812      	ldrb	r2, [r2, #0]
 8001d58:	217f      	movs	r1, #127	@ 0x7f
 8001d5a:	400a      	ands	r2, r1
 8001d5c:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 8001d5e:	183b      	adds	r3, r7, r0
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00c      	beq.n	8001d80 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001d66:	0004      	movs	r4, r0
 8001d68:	183b      	adds	r3, r7, r0
 8001d6a:	781a      	ldrb	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	0011      	movs	r1, r2
 8001d70:	0018      	movs	r0, r3
 8001d72:	f7ff ffad 	bl	8001cd0 <ST7735_WriteData>
            addr += numArgs;
 8001d76:	193b      	adds	r3, r7, r4
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	18d3      	adds	r3, r2, r3
 8001d7e:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001d80:	210c      	movs	r1, #12
 8001d82:	187b      	adds	r3, r7, r1
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d013      	beq.n	8001db2 <DisplayInit+0xae>
            ms = *addr++;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	781a      	ldrb	r2, [r3, #0]
 8001d92:	187b      	adds	r3, r7, r1
 8001d94:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 8001d96:	187b      	adds	r3, r7, r1
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	2bff      	cmp	r3, #255	@ 0xff
 8001d9c:	d103      	bne.n	8001da6 <DisplayInit+0xa2>
 8001d9e:	187b      	adds	r3, r7, r1
 8001da0:	22fa      	movs	r2, #250	@ 0xfa
 8001da2:	0052      	lsls	r2, r2, #1
 8001da4:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 8001da6:	230c      	movs	r3, #12
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	0018      	movs	r0, r3
 8001dae:	f002 f81f 	bl	8003df0 <HAL_Delay>
    while(numCommands--) {
 8001db2:	220f      	movs	r2, #15
 8001db4:	18bb      	adds	r3, r7, r2
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	18ba      	adds	r2, r7, r2
 8001dba:	1e59      	subs	r1, r3, #1
 8001dbc:	7011      	strb	r1, [r2, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1ac      	bne.n	8001d1c <DisplayInit+0x18>
        }
    }
}
 8001dc2:	46c0      	nop			@ (mov r8, r8)
 8001dc4:	46c0      	nop			@ (mov r8, r8)
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b005      	add	sp, #20
 8001dca:	bd90      	pop	{r4, r7, pc}

08001dcc <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001dcc:	b5b0      	push	{r4, r5, r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	0005      	movs	r5, r0
 8001dd4:	000c      	movs	r4, r1
 8001dd6:	0010      	movs	r0, r2
 8001dd8:	0019      	movs	r1, r3
 8001dda:	1dfb      	adds	r3, r7, #7
 8001ddc:	1c2a      	adds	r2, r5, #0
 8001dde:	701a      	strb	r2, [r3, #0]
 8001de0:	1dbb      	adds	r3, r7, #6
 8001de2:	1c22      	adds	r2, r4, #0
 8001de4:	701a      	strb	r2, [r3, #0]
 8001de6:	1d7b      	adds	r3, r7, #5
 8001de8:	1c02      	adds	r2, r0, #0
 8001dea:	701a      	strb	r2, [r3, #0]
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	1c0a      	adds	r2, r1, #0
 8001df0:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001df2:	202a      	movs	r0, #42	@ 0x2a
 8001df4:	f7ff ff52 	bl	8001c9c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8001df8:	210c      	movs	r1, #12
 8001dfa:	187b      	adds	r3, r7, r1
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
 8001e00:	4b1c      	ldr	r3, [pc, #112]	@ (8001e74 <ST7735_SetAddressWindow+0xa8>)
 8001e02:	781a      	ldrb	r2, [r3, #0]
 8001e04:	1dfb      	adds	r3, r7, #7
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	18d3      	adds	r3, r2, r3
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	187b      	adds	r3, r7, r1
 8001e0e:	705a      	strb	r2, [r3, #1]
 8001e10:	187b      	adds	r3, r7, r1
 8001e12:	2200      	movs	r2, #0
 8001e14:	709a      	strb	r2, [r3, #2]
 8001e16:	4b17      	ldr	r3, [pc, #92]	@ (8001e74 <ST7735_SetAddressWindow+0xa8>)
 8001e18:	781a      	ldrb	r2, [r3, #0]
 8001e1a:	1d7b      	adds	r3, r7, #5
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	18d3      	adds	r3, r2, r3
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	187b      	adds	r3, r7, r1
 8001e24:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8001e26:	000c      	movs	r4, r1
 8001e28:	187b      	adds	r3, r7, r1
 8001e2a:	2104      	movs	r1, #4
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f7ff ff4f 	bl	8001cd0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001e32:	202b      	movs	r0, #43	@ 0x2b
 8001e34:	f7ff ff32 	bl	8001c9c <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8001e38:	4b0f      	ldr	r3, [pc, #60]	@ (8001e78 <ST7735_SetAddressWindow+0xac>)
 8001e3a:	781a      	ldrb	r2, [r3, #0]
 8001e3c:	1dbb      	adds	r3, r7, #6
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	18d3      	adds	r3, r2, r3
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	0021      	movs	r1, r4
 8001e46:	187b      	adds	r3, r7, r1
 8001e48:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <ST7735_SetAddressWindow+0xac>)
 8001e4c:	781a      	ldrb	r2, [r3, #0]
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	18d3      	adds	r3, r2, r3
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	187b      	adds	r3, r7, r1
 8001e58:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8001e5a:	187b      	adds	r3, r7, r1
 8001e5c:	2104      	movs	r1, #4
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f7ff ff36 	bl	8001cd0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001e64:	202c      	movs	r0, #44	@ 0x2c
 8001e66:	f7ff ff19 	bl	8001c9c <ST7735_WriteCommand>
}
 8001e6a:	46c0      	nop			@ (mov r8, r8)
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b004      	add	sp, #16
 8001e70:	bdb0      	pop	{r4, r5, r7, pc}
 8001e72:	46c0      	nop			@ (mov r8, r8)
 8001e74:	20000573 	.word	0x20000573
 8001e78:	20000574 	.word	0x20000574

08001e7c <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	0002      	movs	r2, r0
 8001e84:	1dfb      	adds	r3, r7, #7
 8001e86:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 8001e88:	f7ff fed8 	bl	8001c3c <ST7735_Select>
    ST7735_Reset();
 8001e8c:	f7ff feee 	bl	8001c6c <ST7735_Reset>
    DisplayInit(init_cmds1);
 8001e90:	4b0e      	ldr	r3, [pc, #56]	@ (8001ecc <ST7735_Init+0x50>)
 8001e92:	0018      	movs	r0, r3
 8001e94:	f7ff ff36 	bl	8001d04 <DisplayInit>
    DisplayInit(init_cmds2);
 8001e98:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed0 <ST7735_Init+0x54>)
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f7ff ff32 	bl	8001d04 <DisplayInit>
    DisplayInit(init_cmds3);
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <ST7735_Init+0x58>)
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f7ff ff2e 	bl	8001d04 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed8 <ST7735_Init+0x5c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8001eae:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <ST7735_Init+0x60>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8001eb4:	1dfb      	adds	r3, r7, #7
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f000 f811 	bl	8001ee0 <ST7735_SetRotation>
    ST7735_Unselect();
 8001ebe:	f7ff fec9 	bl	8001c54 <ST7735_Unselect>

}
 8001ec2:	46c0      	nop			@ (mov r8, r8)
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	b002      	add	sp, #8
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	46c0      	nop			@ (mov r8, r8)
 8001ecc:	0800a240 	.word	0x0800a240
 8001ed0:	0800a278 	.word	0x0800a278
 8001ed4:	0800a288 	.word	0x0800a288
 8001ed8:	20000571 	.word	0x20000571
 8001edc:	20000572 	.word	0x20000572

08001ee0 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	1dfb      	adds	r3, r7, #7
 8001eea:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8001eec:	230f      	movs	r3, #15
 8001eee:	18fb      	adds	r3, r7, r3
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8001ef4:	1dfb      	adds	r3, r7, #7
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2203      	movs	r2, #3
 8001efa:	4013      	ands	r3, r2
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4b36      	ldr	r3, [pc, #216]	@ (8001fd8 <ST7735_SetRotation+0xf8>)
 8001f00:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8001f02:	4b35      	ldr	r3, [pc, #212]	@ (8001fd8 <ST7735_SetRotation+0xf8>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d041      	beq.n	8001f8e <ST7735_SetRotation+0xae>
 8001f0a:	dc53      	bgt.n	8001fb4 <ST7735_SetRotation+0xd4>
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d02b      	beq.n	8001f68 <ST7735_SetRotation+0x88>
 8001f10:	dc50      	bgt.n	8001fb4 <ST7735_SetRotation+0xd4>
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d002      	beq.n	8001f1c <ST7735_SetRotation+0x3c>
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d013      	beq.n	8001f42 <ST7735_SetRotation+0x62>
 8001f1a:	e04b      	b.n	8001fb4 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8001f1c:	230f      	movs	r3, #15
 8001f1e:	18fb      	adds	r3, r7, r3
 8001f20:	22c0      	movs	r2, #192	@ 0xc0
 8001f22:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8001f24:	4b2d      	ldr	r3, [pc, #180]	@ (8001fdc <ST7735_SetRotation+0xfc>)
 8001f26:	22a0      	movs	r2, #160	@ 0xa0
 8001f28:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001f2a:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe0 <ST7735_SetRotation+0x100>)
 8001f2c:	2280      	movs	r2, #128	@ 0x80
 8001f2e:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8001f30:	4b2c      	ldr	r3, [pc, #176]	@ (8001fe4 <ST7735_SetRotation+0x104>)
 8001f32:	781a      	ldrb	r2, [r3, #0]
 8001f34:	4b2c      	ldr	r3, [pc, #176]	@ (8001fe8 <ST7735_SetRotation+0x108>)
 8001f36:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8001f38:	4b2c      	ldr	r3, [pc, #176]	@ (8001fec <ST7735_SetRotation+0x10c>)
 8001f3a:	781a      	ldrb	r2, [r3, #0]
 8001f3c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff0 <ST7735_SetRotation+0x110>)
 8001f3e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001f40:	e038      	b.n	8001fb4 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8001f42:	230f      	movs	r3, #15
 8001f44:	18fb      	adds	r3, r7, r3
 8001f46:	22a0      	movs	r2, #160	@ 0xa0
 8001f48:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8001f4a:	4b25      	ldr	r3, [pc, #148]	@ (8001fe0 <ST7735_SetRotation+0x100>)
 8001f4c:	22a0      	movs	r2, #160	@ 0xa0
 8001f4e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001f50:	4b22      	ldr	r3, [pc, #136]	@ (8001fdc <ST7735_SetRotation+0xfc>)
 8001f52:	2280      	movs	r2, #128	@ 0x80
 8001f54:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8001f56:	4b23      	ldr	r3, [pc, #140]	@ (8001fe4 <ST7735_SetRotation+0x104>)
 8001f58:	781a      	ldrb	r2, [r3, #0]
 8001f5a:	4b25      	ldr	r3, [pc, #148]	@ (8001ff0 <ST7735_SetRotation+0x110>)
 8001f5c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001f5e:	4b23      	ldr	r3, [pc, #140]	@ (8001fec <ST7735_SetRotation+0x10c>)
 8001f60:	781a      	ldrb	r2, [r3, #0]
 8001f62:	4b21      	ldr	r3, [pc, #132]	@ (8001fe8 <ST7735_SetRotation+0x108>)
 8001f64:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001f66:	e025      	b.n	8001fb4 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8001f68:	230f      	movs	r3, #15
 8001f6a:	18fb      	adds	r3, r7, r3
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8001f70:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <ST7735_SetRotation+0xfc>)
 8001f72:	22a0      	movs	r2, #160	@ 0xa0
 8001f74:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001f76:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe0 <ST7735_SetRotation+0x100>)
 8001f78:	2280      	movs	r2, #128	@ 0x80
 8001f7a:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8001f7c:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <ST7735_SetRotation+0x104>)
 8001f7e:	781a      	ldrb	r2, [r3, #0]
 8001f80:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <ST7735_SetRotation+0x108>)
 8001f82:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8001f84:	4b19      	ldr	r3, [pc, #100]	@ (8001fec <ST7735_SetRotation+0x10c>)
 8001f86:	781a      	ldrb	r2, [r3, #0]
 8001f88:	4b19      	ldr	r3, [pc, #100]	@ (8001ff0 <ST7735_SetRotation+0x110>)
 8001f8a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001f8c:	e012      	b.n	8001fb4 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8001f8e:	230f      	movs	r3, #15
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	2260      	movs	r2, #96	@ 0x60
 8001f94:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8001f96:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <ST7735_SetRotation+0x100>)
 8001f98:	22a0      	movs	r2, #160	@ 0xa0
 8001f9a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fdc <ST7735_SetRotation+0xfc>)
 8001f9e:	2280      	movs	r2, #128	@ 0x80
 8001fa0:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8001fa2:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <ST7735_SetRotation+0x104>)
 8001fa4:	781a      	ldrb	r2, [r3, #0]
 8001fa6:	4b12      	ldr	r3, [pc, #72]	@ (8001ff0 <ST7735_SetRotation+0x110>)
 8001fa8:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001faa:	4b10      	ldr	r3, [pc, #64]	@ (8001fec <ST7735_SetRotation+0x10c>)
 8001fac:	781a      	ldrb	r2, [r3, #0]
 8001fae:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe8 <ST7735_SetRotation+0x108>)
 8001fb0:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001fb2:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 8001fb4:	f7ff fe42 	bl	8001c3c <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8001fb8:	2036      	movs	r0, #54	@ 0x36
 8001fba:	f7ff fe6f 	bl	8001c9c <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8001fbe:	230f      	movs	r3, #15
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f7ff fe83 	bl	8001cd0 <ST7735_WriteData>
  ST7735_Unselect();
 8001fca:	f7ff fe43 	bl	8001c54 <ST7735_Unselect>
}
 8001fce:	46c0      	nop			@ (mov r8, r8)
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b004      	add	sp, #16
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			@ (mov r8, r8)
 8001fd8:	20000570 	.word	0x20000570
 8001fdc:	2000056e 	.word	0x2000056e
 8001fe0:	2000056c 	.word	0x2000056c
 8001fe4:	20000571 	.word	0x20000571
 8001fe8:	20000573 	.word	0x20000573
 8001fec:	20000572 	.word	0x20000572
 8001ff0:	20000574 	.word	0x20000574

08001ff4 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001ff4:	b590      	push	{r4, r7, lr}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	0004      	movs	r4, r0
 8001ffc:	0008      	movs	r0, r1
 8001ffe:	0011      	movs	r1, r2
 8002000:	1dbb      	adds	r3, r7, #6
 8002002:	1c22      	adds	r2, r4, #0
 8002004:	801a      	strh	r2, [r3, #0]
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	1c02      	adds	r2, r0, #0
 800200a:	801a      	strh	r2, [r3, #0]
 800200c:	1cbb      	adds	r3, r7, #2
 800200e:	1c0a      	adds	r2, r1, #0
 8002010:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 8002012:	1dbb      	adds	r3, r7, #6
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	4a1c      	ldr	r2, [pc, #112]	@ (8002088 <ST7735_DrawPixel+0x94>)
 8002018:	2100      	movs	r1, #0
 800201a:	5e52      	ldrsh	r2, [r2, r1]
 800201c:	4293      	cmp	r3, r2
 800201e:	da2f      	bge.n	8002080 <ST7735_DrawPixel+0x8c>
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	881b      	ldrh	r3, [r3, #0]
 8002024:	4a19      	ldr	r2, [pc, #100]	@ (800208c <ST7735_DrawPixel+0x98>)
 8002026:	2100      	movs	r1, #0
 8002028:	5e52      	ldrsh	r2, [r2, r1]
 800202a:	4293      	cmp	r3, r2
 800202c:	da28      	bge.n	8002080 <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 800202e:	f7ff fe05 	bl	8001c3c <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8002032:	1dbb      	adds	r3, r7, #6
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	b2d8      	uxtb	r0, r3
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	b2d9      	uxtb	r1, r3
 800203e:	1dbb      	adds	r3, r7, #6
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	3301      	adds	r3, #1
 8002046:	b2da      	uxtb	r2, r3
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	881b      	ldrh	r3, [r3, #0]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	3301      	adds	r3, #1
 8002050:	b2db      	uxtb	r3, r3
 8002052:	f7ff febb 	bl	8001dcc <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8002056:	1cbb      	adds	r3, r7, #2
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	0a1b      	lsrs	r3, r3, #8
 800205c:	b29b      	uxth	r3, r3
 800205e:	b2da      	uxtb	r2, r3
 8002060:	210c      	movs	r1, #12
 8002062:	187b      	adds	r3, r7, r1
 8002064:	701a      	strb	r2, [r3, #0]
 8002066:	1cbb      	adds	r3, r7, #2
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	b2da      	uxtb	r2, r3
 800206c:	187b      	adds	r3, r7, r1
 800206e:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 8002070:	187b      	adds	r3, r7, r1
 8002072:	2102      	movs	r1, #2
 8002074:	0018      	movs	r0, r3
 8002076:	f7ff fe2b 	bl	8001cd0 <ST7735_WriteData>

    ST7735_Unselect();
 800207a:	f7ff fdeb 	bl	8001c54 <ST7735_Unselect>
 800207e:	e000      	b.n	8002082 <ST7735_DrawPixel+0x8e>
        return;
 8002080:	46c0      	nop			@ (mov r8, r8)
}
 8002082:	46bd      	mov	sp, r7
 8002084:	b005      	add	sp, #20
 8002086:	bd90      	pop	{r4, r7, pc}
 8002088:	2000056c 	.word	0x2000056c
 800208c:	2000056e 	.word	0x2000056e

08002090 <ST7735_DrawImage>:
    }

    ST7735_Unselect();
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8002090:	b5b0      	push	{r4, r5, r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	0005      	movs	r5, r0
 8002098:	000c      	movs	r4, r1
 800209a:	0010      	movs	r0, r2
 800209c:	0019      	movs	r1, r3
 800209e:	1dbb      	adds	r3, r7, #6
 80020a0:	1c2a      	adds	r2, r5, #0
 80020a2:	801a      	strh	r2, [r3, #0]
 80020a4:	1d3b      	adds	r3, r7, #4
 80020a6:	1c22      	adds	r2, r4, #0
 80020a8:	801a      	strh	r2, [r3, #0]
 80020aa:	1cbb      	adds	r3, r7, #2
 80020ac:	1c02      	adds	r2, r0, #0
 80020ae:	801a      	strh	r2, [r3, #0]
 80020b0:	003b      	movs	r3, r7
 80020b2:	1c0a      	adds	r2, r1, #0
 80020b4:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 80020b6:	1dbb      	adds	r3, r7, #6
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	4a2a      	ldr	r2, [pc, #168]	@ (8002164 <ST7735_DrawImage+0xd4>)
 80020bc:	2100      	movs	r1, #0
 80020be:	5e52      	ldrsh	r2, [r2, r1]
 80020c0:	4293      	cmp	r3, r2
 80020c2:	da47      	bge.n	8002154 <ST7735_DrawImage+0xc4>
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	4a27      	ldr	r2, [pc, #156]	@ (8002168 <ST7735_DrawImage+0xd8>)
 80020ca:	2100      	movs	r1, #0
 80020cc:	5e52      	ldrsh	r2, [r2, r1]
 80020ce:	4293      	cmp	r3, r2
 80020d0:	da40      	bge.n	8002154 <ST7735_DrawImage+0xc4>
    if((x + w - 1) >= _width) return;
 80020d2:	1dbb      	adds	r3, r7, #6
 80020d4:	881a      	ldrh	r2, [r3, #0]
 80020d6:	1cbb      	adds	r3, r7, #2
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	18d3      	adds	r3, r2, r3
 80020dc:	4a21      	ldr	r2, [pc, #132]	@ (8002164 <ST7735_DrawImage+0xd4>)
 80020de:	2100      	movs	r1, #0
 80020e0:	5e52      	ldrsh	r2, [r2, r1]
 80020e2:	4293      	cmp	r3, r2
 80020e4:	dc38      	bgt.n	8002158 <ST7735_DrawImage+0xc8>
    if((y + h - 1) >= _height) return;
 80020e6:	1d3b      	adds	r3, r7, #4
 80020e8:	881a      	ldrh	r2, [r3, #0]
 80020ea:	003b      	movs	r3, r7
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	18d3      	adds	r3, r2, r3
 80020f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002168 <ST7735_DrawImage+0xd8>)
 80020f2:	2100      	movs	r1, #0
 80020f4:	5e52      	ldrsh	r2, [r2, r1]
 80020f6:	4293      	cmp	r3, r2
 80020f8:	dc30      	bgt.n	800215c <ST7735_DrawImage+0xcc>

    ST7735_Select();
 80020fa:	f7ff fd9f 	bl	8001c3c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80020fe:	1dbb      	adds	r3, r7, #6
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	b2d8      	uxtb	r0, r3
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	b2d9      	uxtb	r1, r3
 800210a:	1dbb      	adds	r3, r7, #6
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	b2da      	uxtb	r2, r3
 8002110:	1cbb      	adds	r3, r7, #2
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	18d3      	adds	r3, r2, r3
 8002118:	b2db      	uxtb	r3, r3
 800211a:	3b01      	subs	r3, #1
 800211c:	b2dc      	uxtb	r4, r3
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	003b      	movs	r3, r7
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	18d3      	adds	r3, r2, r3
 800212c:	b2db      	uxtb	r3, r3
 800212e:	3b01      	subs	r3, #1
 8002130:	b2db      	uxtb	r3, r3
 8002132:	0022      	movs	r2, r4
 8002134:	f7ff fe4a 	bl	8001dcc <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8002138:	1cbb      	adds	r3, r7, #2
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	003a      	movs	r2, r7
 800213e:	8812      	ldrh	r2, [r2, #0]
 8002140:	4353      	muls	r3, r2
 8002142:	005a      	lsls	r2, r3, #1
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	0011      	movs	r1, r2
 8002148:	0018      	movs	r0, r3
 800214a:	f7ff fdc1 	bl	8001cd0 <ST7735_WriteData>
    ST7735_Unselect();
 800214e:	f7ff fd81 	bl	8001c54 <ST7735_Unselect>
 8002152:	e004      	b.n	800215e <ST7735_DrawImage+0xce>
    if((x >= _width) || (y >= _height)) return;
 8002154:	46c0      	nop			@ (mov r8, r8)
 8002156:	e002      	b.n	800215e <ST7735_DrawImage+0xce>
    if((x + w - 1) >= _width) return;
 8002158:	46c0      	nop			@ (mov r8, r8)
 800215a:	e000      	b.n	800215e <ST7735_DrawImage+0xce>
    if((y + h - 1) >= _height) return;
 800215c:	46c0      	nop			@ (mov r8, r8)
}
 800215e:	46bd      	mov	sp, r7
 8002160:	b002      	add	sp, #8
 8002162:	bdb0      	pop	{r4, r5, r7, pc}
 8002164:	2000056c 	.word	0x2000056c
 8002168:	2000056e 	.word	0x2000056e

0800216c <minmea_tocoord>:
/**
 * Convert a raw coordinate to a floating point DD.DDD... value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tocoord(struct minmea_float *f)
{
 800216c:	b5b0      	push	{r4, r5, r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
    if (f->scale == 0)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <minmea_tocoord+0x14>
        return NAN;
 800217c:	4b1c      	ldr	r3, [pc, #112]	@ (80021f0 <minmea_tocoord+0x84>)
 800217e:	e033      	b.n	80021e8 <minmea_tocoord+0x7c>
    int_least32_t degrees = f->value / (f->scale * 100);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2164      	movs	r1, #100	@ 0x64
 800218a:	434b      	muls	r3, r1
 800218c:	0019      	movs	r1, r3
 800218e:	0010      	movs	r0, r2
 8002190:	f7fe f856 	bl	8000240 <__divsi3>
 8002194:	0003      	movs	r3, r0
 8002196:	60fb      	str	r3, [r7, #12]
    int_least32_t minutes = f->value % (f->scale * 100);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2164      	movs	r1, #100	@ 0x64
 80021a2:	434b      	muls	r3, r1
 80021a4:	0019      	movs	r1, r3
 80021a6:	0010      	movs	r0, r2
 80021a8:	f7fe f930 	bl	800040c <__aeabi_idivmod>
 80021ac:	000b      	movs	r3, r1
 80021ae:	60bb      	str	r3, [r7, #8]
    return (float) degrees + (float) minutes / (60 * f->scale);
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f7fe ffe1 	bl	8001178 <__aeabi_i2f>
 80021b6:	1c04      	adds	r4, r0, #0
 80021b8:	68b8      	ldr	r0, [r7, #8]
 80021ba:	f7fe ffdd 	bl	8001178 <__aeabi_i2f>
 80021be:	1c05      	adds	r5, r0, #0
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	0013      	movs	r3, r2
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	0018      	movs	r0, r3
 80021ce:	f7fe ffd3 	bl	8001178 <__aeabi_i2f>
 80021d2:	1c03      	adds	r3, r0, #0
 80021d4:	1c19      	adds	r1, r3, #0
 80021d6:	1c28      	adds	r0, r5, #0
 80021d8:	f7fe fbac 	bl	8000934 <__aeabi_fdiv>
 80021dc:	1c03      	adds	r3, r0, #0
 80021de:	1c19      	adds	r1, r3, #0
 80021e0:	1c20      	adds	r0, r4, #0
 80021e2:	f7fe fa1d 	bl	8000620 <__aeabi_fadd>
 80021e6:	1c03      	adds	r3, r0, #0
}
 80021e8:	1c18      	adds	r0, r3, #0
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b004      	add	sp, #16
 80021ee:	bdb0      	pop	{r4, r5, r7, pc}
 80021f0:	7fc00000 	.word	0x7fc00000

080021f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021f4:	b590      	push	{r4, r7, lr}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021fa:	f001 fd73 	bl	8003ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021fe:	f000 fab1 	bl	8002764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002202:	f000 fd65 	bl	8002cd0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002206:	f000 fb0f 	bl	8002828 <MX_I2C1_Init>
  MX_SPI1_Init();
 800220a:	f000 fbfd 	bl	8002a08 <MX_SPI1_Init>
  MX_TIM17_Init();
 800220e:	f000 fc3b 	bl	8002a88 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8002212:	f000 fcc1 	bl	8002b98 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002216:	f000 fd0d 	bl	8002c34 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800221a:	f000 fb45 	bl	80028a8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
  ST7735_Unselect();
 800221e:	f7ff fd19 	bl	8001c54 <ST7735_Unselect>
  ST7735_Init(1);
 8002222:	2001      	movs	r0, #1
 8002224:	f7ff fe2a 	bl	8001e7c <ST7735_Init>
  //testAll();
  buffer[0] = 'A';
 8002228:	4bde      	ldr	r3, [pc, #888]	@ (80025a4 <main+0x3b0>)
 800222a:	2241      	movs	r2, #65	@ 0x41
 800222c:	701a      	strb	r2, [r3, #0]
  buffer[1] = 'B';
 800222e:	4bdd      	ldr	r3, [pc, #884]	@ (80025a4 <main+0x3b0>)
 8002230:	2242      	movs	r2, #66	@ 0x42
 8002232:	705a      	strb	r2, [r3, #1]
  TIM17->CCR1 = 5;
 8002234:	4bdc      	ldr	r3, [pc, #880]	@ (80025a8 <main+0x3b4>)
 8002236:	2205      	movs	r2, #5
 8002238:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM17->PSC=64;
 800223a:	4bdb      	ldr	r3, [pc, #876]	@ (80025a8 <main+0x3b4>)
 800223c:	2240      	movs	r2, #64	@ 0x40
 800223e:	629a      	str	r2, [r3, #40]	@ 0x28
  uint8_t ret=0;
 8002240:	1dfb      	adds	r3, r7, #7
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
    //_ADXL343_Init();

      //Pedometer Setup
      _ADXL343_WriteReg8(0x19, 0x02);
 8002246:	2102      	movs	r1, #2
 8002248:	2019      	movs	r0, #25
 800224a:	f000 fde7 	bl	8002e1c <_ADXL343_WriteReg8>
      ////wait

      _ADXL343_WriteReg8(0x7C, 0x01);
 800224e:	2101      	movs	r1, #1
 8002250:	207c      	movs	r0, #124	@ 0x7c
 8002252:	f000 fde3 	bl	8002e1c <_ADXL343_WriteReg8>
       _ADXL343_WriteReg8(0x1A, 0x38);
 8002256:	2138      	movs	r1, #56	@ 0x38
 8002258:	201a      	movs	r0, #26
 800225a:	f000 fddf 	bl	8002e1c <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1B, 0x04);
 800225e:	2104      	movs	r1, #4
 8002260:	201b      	movs	r0, #27
 8002262:	f000 fddb 	bl	8002e1c <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1F, 0x80);
 8002266:	2180      	movs	r1, #128	@ 0x80
 8002268:	201f      	movs	r0, #31
 800226a:	f000 fdd7 	bl	8002e1c <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x21, 0x80);
 800226e:	2180      	movs	r1, #128	@ 0x80
 8002270:	2021      	movs	r0, #33	@ 0x21
 8002272:	f000 fdd3 	bl	8002e1c <_ADXL343_WriteReg8>



      //  //Step Counter
      _ADXL343_WriteReg8(0x18, 0x01); // enable walking mode
 8002276:	2101      	movs	r1, #1
 8002278:	2018      	movs	r0, #24
 800227a:	f000 fdcf 	bl	8002e1c <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x20, 0x01); // enable step interrupt
 800227e:	2101      	movs	r1, #1
 8002280:	2020      	movs	r0, #32
 8002282:	f000 fdcb 	bl	8002e1c <_ADXL343_WriteReg8>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart2, "hello", 5, 100);
 8002286:	49c9      	ldr	r1, [pc, #804]	@ (80025ac <main+0x3b8>)
 8002288:	48c9      	ldr	r0, [pc, #804]	@ (80025b0 <main+0x3bc>)
 800228a:	2364      	movs	r3, #100	@ 0x64
 800228c:	2205      	movs	r2, #5
 800228e:	f005 ff51 	bl	8008134 <HAL_UART_Transmit>
	  switch(currentMenu){
 8002292:	4bc8      	ldr	r3, [pc, #800]	@ (80025b4 <main+0x3c0>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b03      	cmp	r3, #3
 8002298:	d100      	bne.n	800229c <main+0xa8>
 800229a:	e0c3      	b.n	8002424 <main+0x230>
 800229c:	dcf3      	bgt.n	8002286 <main+0x92>
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d100      	bne.n	80022a4 <main+0xb0>
 80022a2:	e07a      	b.n	800239a <main+0x1a6>
 80022a4:	dcef      	bgt.n	8002286 <main+0x92>
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d05d      	beq.n	8002366 <main+0x172>
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d1eb      	bne.n	8002286 <main+0x92>
	  case Main:
		  //fillScreen(BLACK);

		  // Draw the Silly little guy centered
		  drawImage(testImage, palette, 40, 40, 64, 64, 296);
 80022ae:	49c2      	ldr	r1, [pc, #776]	@ (80025b8 <main+0x3c4>)
 80022b0:	48c2      	ldr	r0, [pc, #776]	@ (80025bc <main+0x3c8>)
 80022b2:	2394      	movs	r3, #148	@ 0x94
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	9302      	str	r3, [sp, #8]
 80022b8:	2340      	movs	r3, #64	@ 0x40
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	2340      	movs	r3, #64	@ 0x40
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	2328      	movs	r3, #40	@ 0x28
 80022c2:	2228      	movs	r2, #40	@ 0x28
 80022c4:	f7ff fbf4 	bl	8001ab0 <drawImage>
		  fillRect(40, 40, 64, 64, BLACK);
 80022c8:	2300      	movs	r3, #0
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	2340      	movs	r3, #64	@ 0x40
 80022ce:	2240      	movs	r2, #64	@ 0x40
 80022d0:	2128      	movs	r1, #40	@ 0x28
 80022d2:	2028      	movs	r0, #40	@ 0x28
 80022d4:	f7ff f966 	bl	80015a4 <fillRect>

		  //Display the current Steps
		  _ADXL343_ReadReg8(0x15, &steps, 1);
 80022d8:	4bb9      	ldr	r3, [pc, #740]	@ (80025c0 <main+0x3cc>)
 80022da:	2201      	movs	r2, #1
 80022dc:	0019      	movs	r1, r3
 80022de:	2015      	movs	r0, #21
 80022e0:	f000 fd6a 	bl	8002db8 <_ADXL343_ReadReg8>
		  sprintf(buffer2, "Steps: %d ", steps);
 80022e4:	4bb6      	ldr	r3, [pc, #728]	@ (80025c0 <main+0x3cc>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	001a      	movs	r2, r3
 80022ea:	49b6      	ldr	r1, [pc, #728]	@ (80025c4 <main+0x3d0>)
 80022ec:	4bb6      	ldr	r3, [pc, #728]	@ (80025c8 <main+0x3d4>)
 80022ee:	0018      	movs	r0, r3
 80022f0:	f006 ffe4 	bl	80092bc <siprintf>
		  drawString(0, 20, buffer2, BLACK, GREEN, 1, 1);
 80022f4:	4ab4      	ldr	r2, [pc, #720]	@ (80025c8 <main+0x3d4>)
 80022f6:	2301      	movs	r3, #1
 80022f8:	9302      	str	r3, [sp, #8]
 80022fa:	2301      	movs	r3, #1
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	4bb3      	ldr	r3, [pc, #716]	@ (80025cc <main+0x3d8>)
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	2300      	movs	r3, #0
 8002304:	2114      	movs	r1, #20
 8002306:	2000      	movs	r0, #0
 8002308:	f7ff f9ee 	bl	80016e8 <drawString>

		  //Change current Menu
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET ) {
 800230c:	2380      	movs	r3, #128	@ 0x80
 800230e:	015a      	lsls	r2, r3, #5
 8002310:	23a0      	movs	r3, #160	@ 0xa0
 8002312:	05db      	lsls	r3, r3, #23
 8002314:	0011      	movs	r1, r2
 8002316:	0018      	movs	r0, r3
 8002318:	f001 ffee 	bl	80042f8 <HAL_GPIO_ReadPin>
 800231c:	0003      	movs	r3, r0
 800231e:	2b01      	cmp	r3, #1
 8002320:	d10b      	bne.n	800233a <main+0x146>
			  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8002322:	4bab      	ldr	r3, [pc, #684]	@ (80025d0 <main+0x3dc>)
 8002324:	2100      	movs	r1, #0
 8002326:	0018      	movs	r0, r3
 8002328:	f005 f816 	bl	8007358 <HAL_TIM_PWM_Start>
			  currentMenu = MusicTest;
 800232c:	4ba1      	ldr	r3, [pc, #644]	@ (80025b4 <main+0x3c0>)
 800232e:	2202      	movs	r2, #2
 8002330:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8002332:	4ba8      	ldr	r3, [pc, #672]	@ (80025d4 <main+0x3e0>)
 8002334:	2200      	movs	r2, #0
 8002336:	701a      	strb	r2, [r3, #0]
		  }
		  else
			  canChange = 1;


		  break;
 8002338:	e1f7      	b.n	800272a <main+0x536>
		  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET ) {
 800233a:	2380      	movs	r3, #128	@ 0x80
 800233c:	011a      	lsls	r2, r3, #4
 800233e:	23a0      	movs	r3, #160	@ 0xa0
 8002340:	05db      	lsls	r3, r3, #23
 8002342:	0011      	movs	r1, r2
 8002344:	0018      	movs	r0, r3
 8002346:	f001 ffd7 	bl	80042f8 <HAL_GPIO_ReadPin>
 800234a:	0003      	movs	r3, r0
 800234c:	2b01      	cmp	r3, #1
 800234e:	d106      	bne.n	800235e <main+0x16a>
			  currentMenu = StatsDisplay;
 8002350:	4b98      	ldr	r3, [pc, #608]	@ (80025b4 <main+0x3c0>)
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8002356:	4b9f      	ldr	r3, [pc, #636]	@ (80025d4 <main+0x3e0>)
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
		  break;
 800235c:	e1e5      	b.n	800272a <main+0x536>
			  canChange = 1;
 800235e:	4b9d      	ldr	r3, [pc, #628]	@ (80025d4 <main+0x3e0>)
 8002360:	2201      	movs	r2, #1
 8002362:	701a      	strb	r2, [r3, #0]
		  break;
 8002364:	e1e1      	b.n	800272a <main+0x536>
	  case StatsDisplay:
		  fillScreen(WHITE);
 8002366:	4b9c      	ldr	r3, [pc, #624]	@ (80025d8 <main+0x3e4>)
 8002368:	0018      	movs	r0, r3
 800236a:	f7ff fb2d 	bl	80019c8 <fillScreen>

	  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET ){
 800236e:	2380      	movs	r3, #128	@ 0x80
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	23a0      	movs	r3, #160	@ 0xa0
 8002374:	05db      	lsls	r3, r3, #23
 8002376:	0011      	movs	r1, r2
 8002378:	0018      	movs	r0, r3
 800237a:	f001 ffbd 	bl	80042f8 <HAL_GPIO_ReadPin>
 800237e:	0003      	movs	r3, r0
 8002380:	2b01      	cmp	r3, #1
 8002382:	d106      	bne.n	8002392 <main+0x19e>
	  		currentMenu = Main;
 8002384:	4b8b      	ldr	r3, [pc, #556]	@ (80025b4 <main+0x3c0>)
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]
	  		canChange = 0;
 800238a:	4b92      	ldr	r3, [pc, #584]	@ (80025d4 <main+0x3e0>)
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
	  	  }
	  	  else
	  	      canChange = 1;

	  	  break;
 8002390:	e1cb      	b.n	800272a <main+0x536>
	  	      canChange = 1;
 8002392:	4b90      	ldr	r3, [pc, #576]	@ (80025d4 <main+0x3e0>)
 8002394:	2201      	movs	r2, #1
 8002396:	701a      	strb	r2, [r3, #0]
	  	  break;
 8002398:	e1c7      	b.n	800272a <main+0x536>
	  case MusicTest:
		  fillScreen(BLUE);
 800239a:	23f8      	movs	r3, #248	@ 0xf8
 800239c:	015b      	lsls	r3, r3, #5
 800239e:	0018      	movs	r0, r3
 80023a0:	f7ff fb12 	bl	80019c8 <fillScreen>

		  freq = freqs[(toneIndex++)%8];
 80023a4:	4b8d      	ldr	r3, [pc, #564]	@ (80025dc <main+0x3e8>)
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	b291      	uxth	r1, r2
 80023ae:	4a8b      	ldr	r2, [pc, #556]	@ (80025dc <main+0x3e8>)
 80023b0:	8011      	strh	r1, [r2, #0]
 80023b2:	001a      	movs	r2, r3
 80023b4:	2307      	movs	r3, #7
 80023b6:	4013      	ands	r3, r2
 80023b8:	4a89      	ldr	r2, [pc, #548]	@ (80025e0 <main+0x3ec>)
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	18d3      	adds	r3, r2, r3
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4988      	ldr	r1, [pc, #544]	@ (80025e4 <main+0x3f0>)
 80023c4:	600a      	str	r2, [r1, #0]
 80023c6:	604b      	str	r3, [r1, #4]
		  TIM17->ARR=(uint32_t)(987*(float)1000/(float)freq);
 80023c8:	4b86      	ldr	r3, [pc, #536]	@ (80025e4 <main+0x3f0>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	0010      	movs	r0, r2
 80023d0:	0019      	movs	r1, r3
 80023d2:	f7fe ff1d 	bl	8001210 <__aeabi_d2f>
 80023d6:	1c03      	adds	r3, r0, #0
 80023d8:	1c19      	adds	r1, r3, #0
 80023da:	4883      	ldr	r0, [pc, #524]	@ (80025e8 <main+0x3f4>)
 80023dc:	f7fe faaa 	bl	8000934 <__aeabi_fdiv>
 80023e0:	1c03      	adds	r3, r0, #0
 80023e2:	4c71      	ldr	r4, [pc, #452]	@ (80025a8 <main+0x3b4>)
 80023e4:	1c18      	adds	r0, r3, #0
 80023e6:	f7fe f837 	bl	8000458 <__aeabi_f2uiz>
 80023ea:	0003      	movs	r3, r0
 80023ec:	62e3      	str	r3, [r4, #44]	@ 0x2c

		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET) {
 80023ee:	2380      	movs	r3, #128	@ 0x80
 80023f0:	011a      	lsls	r2, r3, #4
 80023f2:	23a0      	movs	r3, #160	@ 0xa0
 80023f4:	05db      	lsls	r3, r3, #23
 80023f6:	0011      	movs	r1, r2
 80023f8:	0018      	movs	r0, r3
 80023fa:	f001 ff7d 	bl	80042f8 <HAL_GPIO_ReadPin>
 80023fe:	0003      	movs	r3, r0
 8002400:	2b01      	cmp	r3, #1
 8002402:	d10b      	bne.n	800241c <main+0x228>
			  currentMenu = Main;
 8002404:	4b6b      	ldr	r3, [pc, #428]	@ (80025b4 <main+0x3c0>)
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 800240a:	4b72      	ldr	r3, [pc, #456]	@ (80025d4 <main+0x3e0>)
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8002410:	4b6f      	ldr	r3, [pc, #444]	@ (80025d0 <main+0x3dc>)
 8002412:	2100      	movs	r1, #0
 8002414:	0018      	movs	r0, r3
 8002416:	f005 f88f 	bl	8007538 <HAL_TIM_PWM_Stop>
		  }
		  else
			  canChange = 1;

		  break;
 800241a:	e186      	b.n	800272a <main+0x536>
			  canChange = 1;
 800241c:	4b6d      	ldr	r3, [pc, #436]	@ (80025d4 <main+0x3e0>)
 800241e:	2201      	movs	r2, #1
 8002420:	701a      	strb	r2, [r3, #0]
		  break;
 8002422:	e182      	b.n	800272a <main+0x536>
	  case ConnorDemo:
		  	  steps=0;
 8002424:	4b66      	ldr	r3, [pc, #408]	@ (80025c0 <main+0x3cc>)
 8002426:	2200      	movs	r2, #0
 8002428:	701a      	strb	r2, [r3, #0]

		  	  if((whileI++)%3==0)
 800242a:	4b70      	ldr	r3, [pc, #448]	@ (80025ec <main+0x3f8>)
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	b29b      	uxth	r3, r3
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	b291      	uxth	r1, r2
 8002434:	4a6d      	ldr	r2, [pc, #436]	@ (80025ec <main+0x3f8>)
 8002436:	8011      	strh	r1, [r2, #0]
 8002438:	2103      	movs	r1, #3
 800243a:	0018      	movs	r0, r3
 800243c:	f7fd fefc 	bl	8000238 <__aeabi_uidivmod>
 8002440:	000b      	movs	r3, r1
 8002442:	b29b      	uxth	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10f      	bne.n	8002468 <main+0x274>
		  		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET)
 8002448:	4b69      	ldr	r3, [pc, #420]	@ (80025f0 <main+0x3fc>)
 800244a:	2102      	movs	r1, #2
 800244c:	0018      	movs	r0, r3
 800244e:	f001 ff53 	bl	80042f8 <HAL_GPIO_ReadPin>
 8002452:	0003      	movs	r3, r0
 8002454:	2b01      	cmp	r3, #1
 8002456:	d104      	bne.n	8002462 <main+0x26e>
		  		  		  fillScreen(WHITE);
 8002458:	4b5f      	ldr	r3, [pc, #380]	@ (80025d8 <main+0x3e4>)
 800245a:	0018      	movs	r0, r3
 800245c:	f7ff fab4 	bl	80019c8 <fillScreen>
 8002460:	e002      	b.n	8002468 <main+0x274>
		  		  	  else
		  		  		  fillScreen(BLACK);
 8002462:	2000      	movs	r0, #0
 8002464:	f7ff fab0 	bl	80019c8 <fillScreen>
		  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET)
 8002468:	2380      	movs	r3, #128	@ 0x80
 800246a:	011a      	lsls	r2, r3, #4
 800246c:	23a0      	movs	r3, #160	@ 0xa0
 800246e:	05db      	lsls	r3, r3, #23
 8002470:	0011      	movs	r1, r2
 8002472:	0018      	movs	r0, r3
 8002474:	f001 ff40 	bl	80042f8 <HAL_GPIO_ReadPin>
 8002478:	0003      	movs	r3, r0
 800247a:	2b01      	cmp	r3, #1
 800247c:	d106      	bne.n	800248c <main+0x298>
		  		  petXPos-=5;
 800247e:	4b5d      	ldr	r3, [pc, #372]	@ (80025f4 <main+0x400>)
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	b29b      	uxth	r3, r3
 8002484:	3b05      	subs	r3, #5
 8002486:	b29a      	uxth	r2, r3
 8002488:	4b5a      	ldr	r3, [pc, #360]	@ (80025f4 <main+0x400>)
 800248a:	801a      	strh	r2, [r3, #0]
		  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET)
 800248c:	2380      	movs	r3, #128	@ 0x80
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	23a0      	movs	r3, #160	@ 0xa0
 8002492:	05db      	lsls	r3, r3, #23
 8002494:	0011      	movs	r1, r2
 8002496:	0018      	movs	r0, r3
 8002498:	f001 ff2e 	bl	80042f8 <HAL_GPIO_ReadPin>
 800249c:	0003      	movs	r3, r0
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d106      	bne.n	80024b0 <main+0x2bc>
		  		  petXPos+=5;
 80024a2:	4b54      	ldr	r3, [pc, #336]	@ (80025f4 <main+0x400>)
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	3305      	adds	r3, #5
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	4b51      	ldr	r3, [pc, #324]	@ (80025f4 <main+0x400>)
 80024ae:	801a      	strh	r2, [r3, #0]
		  	  if(petXPos<3)petXPos=0;
 80024b0:	4b50      	ldr	r3, [pc, #320]	@ (80025f4 <main+0x400>)
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d802      	bhi.n	80024c0 <main+0x2cc>
 80024ba:	4b4e      	ldr	r3, [pc, #312]	@ (80025f4 <main+0x400>)
 80024bc:	2200      	movs	r2, #0
 80024be:	801a      	strh	r2, [r3, #0]
		  	  if(petXPos>60) petXPos=60;
 80024c0:	4b4c      	ldr	r3, [pc, #304]	@ (80025f4 <main+0x400>)
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	2b3c      	cmp	r3, #60	@ 0x3c
 80024c8:	d902      	bls.n	80024d0 <main+0x2dc>
 80024ca:	4b4a      	ldr	r3, [pc, #296]	@ (80025f4 <main+0x400>)
 80024cc:	223c      	movs	r2, #60	@ 0x3c
 80024ce:	801a      	strh	r2, [r3, #0]
		  	  freq = freqs[(toneIndex++)%8];
 80024d0:	4b42      	ldr	r3, [pc, #264]	@ (80025dc <main+0x3e8>)
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	b291      	uxth	r1, r2
 80024da:	4a40      	ldr	r2, [pc, #256]	@ (80025dc <main+0x3e8>)
 80024dc:	8011      	strh	r1, [r2, #0]
 80024de:	001a      	movs	r2, r3
 80024e0:	2307      	movs	r3, #7
 80024e2:	4013      	ands	r3, r2
 80024e4:	4a3e      	ldr	r2, [pc, #248]	@ (80025e0 <main+0x3ec>)
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	18d3      	adds	r3, r2, r3
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	493d      	ldr	r1, [pc, #244]	@ (80025e4 <main+0x3f0>)
 80024f0:	600a      	str	r2, [r1, #0]
 80024f2:	604b      	str	r3, [r1, #4]
		  	  TIM17->ARR=(uint32_t)(987*(float)1000/(float)freq);
 80024f4:	4b3b      	ldr	r3, [pc, #236]	@ (80025e4 <main+0x3f0>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	0010      	movs	r0, r2
 80024fc:	0019      	movs	r1, r3
 80024fe:	f7fe fe87 	bl	8001210 <__aeabi_d2f>
 8002502:	1c03      	adds	r3, r0, #0
 8002504:	1c19      	adds	r1, r3, #0
 8002506:	4838      	ldr	r0, [pc, #224]	@ (80025e8 <main+0x3f4>)
 8002508:	f7fe fa14 	bl	8000934 <__aeabi_fdiv>
 800250c:	1c03      	adds	r3, r0, #0
 800250e:	4c26      	ldr	r4, [pc, #152]	@ (80025a8 <main+0x3b4>)
 8002510:	1c18      	adds	r0, r3, #0
 8002512:	f7fd ffa1 	bl	8000458 <__aeabi_f2uiz>
 8002516:	0003      	movs	r3, r0
 8002518:	62e3      	str	r3, [r4, #44]	@ 0x2c
		  	  //fillScreen(WHITE);
		  	  drawImage(testImage, palette, petXPos, 40, 64, 64, 296);
 800251a:	4b36      	ldr	r3, [pc, #216]	@ (80025f4 <main+0x400>)
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	b29a      	uxth	r2, r3
 8002520:	4925      	ldr	r1, [pc, #148]	@ (80025b8 <main+0x3c4>)
 8002522:	4826      	ldr	r0, [pc, #152]	@ (80025bc <main+0x3c8>)
 8002524:	2394      	movs	r3, #148	@ 0x94
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	9302      	str	r3, [sp, #8]
 800252a:	2340      	movs	r3, #64	@ 0x40
 800252c:	9301      	str	r3, [sp, #4]
 800252e:	2340      	movs	r3, #64	@ 0x40
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	2328      	movs	r3, #40	@ 0x28
 8002534:	f7ff fabc 	bl	8001ab0 <drawImage>
//		  	  _ADXL343_ReadReg8(0x06, &accelZ, 1);
//		  	  _ADXL343_ReadReg8(0x07, &accelX, 1);
//		  	  _ADXL343_ReadReg8(0x08, &accelY, 1);
//		  	  _ADXL343_ReadReg8(0x09, &accelZ, 1);

		  	  sprintf(buffer2, "X:%d - Y:%d - Z:%d ", accelX, accelY, accelZ);
 8002538:	4b2f      	ldr	r3, [pc, #188]	@ (80025f8 <main+0x404>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	001a      	movs	r2, r3
 800253e:	4b2f      	ldr	r3, [pc, #188]	@ (80025fc <main+0x408>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	001c      	movs	r4, r3
 8002544:	4b2e      	ldr	r3, [pc, #184]	@ (8002600 <main+0x40c>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	492e      	ldr	r1, [pc, #184]	@ (8002604 <main+0x410>)
 800254a:	481f      	ldr	r0, [pc, #124]	@ (80025c8 <main+0x3d4>)
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	0023      	movs	r3, r4
 8002550:	f006 feb4 	bl	80092bc <siprintf>
		  	  drawString(0, 10, buffer2, BLACK, GREEN, 1, 1);
 8002554:	4a1c      	ldr	r2, [pc, #112]	@ (80025c8 <main+0x3d4>)
 8002556:	2301      	movs	r3, #1
 8002558:	9302      	str	r3, [sp, #8]
 800255a:	2301      	movs	r3, #1
 800255c:	9301      	str	r3, [sp, #4]
 800255e:	4b1b      	ldr	r3, [pc, #108]	@ (80025cc <main+0x3d8>)
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	2300      	movs	r3, #0
 8002564:	210a      	movs	r1, #10
 8002566:	2000      	movs	r0, #0
 8002568:	f7ff f8be 	bl	80016e8 <drawString>

		  	  _ADXL343_ReadReg8(0x15, &steps, 1);
 800256c:	4b14      	ldr	r3, [pc, #80]	@ (80025c0 <main+0x3cc>)
 800256e:	2201      	movs	r2, #1
 8002570:	0019      	movs	r1, r3
 8002572:	2015      	movs	r0, #21
 8002574:	f000 fc20 	bl	8002db8 <_ADXL343_ReadReg8>
		  	  sprintf(buffer2, "Steps: %d ", steps);
 8002578:	4b11      	ldr	r3, [pc, #68]	@ (80025c0 <main+0x3cc>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	001a      	movs	r2, r3
 800257e:	4911      	ldr	r1, [pc, #68]	@ (80025c4 <main+0x3d0>)
 8002580:	4b11      	ldr	r3, [pc, #68]	@ (80025c8 <main+0x3d4>)
 8002582:	0018      	movs	r0, r3
 8002584:	f006 fe9a 	bl	80092bc <siprintf>
		  	  drawString(0, 20, buffer2, BLACK, GREEN, 1, 1);
 8002588:	4a0f      	ldr	r2, [pc, #60]	@ (80025c8 <main+0x3d4>)
 800258a:	2301      	movs	r3, #1
 800258c:	9302      	str	r3, [sp, #8]
 800258e:	2301      	movs	r3, #1
 8002590:	9301      	str	r3, [sp, #4]
 8002592:	4b0e      	ldr	r3, [pc, #56]	@ (80025cc <main+0x3d8>)
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	2300      	movs	r3, #0
 8002598:	2114      	movs	r1, #20
 800259a:	2000      	movs	r0, #0
 800259c:	f7ff f8a4 	bl	80016e8 <drawString>

		  	  	  //only run this code every few seconds
		  		  while(HAL_UART_Receive(&huart1, &(buffer[i]), 1, 0xFFFF)==HAL_OK)
 80025a0:	e0a8      	b.n	80026f4 <main+0x500>
 80025a2:	46c0      	nop			@ (mov r8, r8)
 80025a4:	200005c8 	.word	0x200005c8
 80025a8:	40014800 	.word	0x40014800
 80025ac:	08009c10 	.word	0x08009c10
 80025b0:	20000888 	.word	0x20000888
 80025b4:	200004f0 	.word	0x200004f0
 80025b8:	200004a0 	.word	0x200004a0
 80025bc:	20000000 	.word	0x20000000
 80025c0:	200006c3 	.word	0x200006c3
 80025c4:	08009c18 	.word	0x08009c18
 80025c8:	2000065c 	.word	0x2000065c
 80025cc:	ffffe007 	.word	0xffffe007
 80025d0:	200007a8 	.word	0x200007a8
 80025d4:	200004f1 	.word	0x200004f1
 80025d8:	0000ffff 	.word	0x0000ffff
 80025dc:	20000658 	.word	0x20000658
 80025e0:	200004b0 	.word	0x200004b0
 80025e4:	20000650 	.word	0x20000650
 80025e8:	4970f780 	.word	0x4970f780
 80025ec:	2000057a 	.word	0x2000057a
 80025f0:	50000800 	.word	0x50000800
 80025f4:	2000057c 	.word	0x2000057c
 80025f8:	200006c0 	.word	0x200006c0
 80025fc:	200006c1 	.word	0x200006c1
 8002600:	200006c2 	.word	0x200006c2
 8002604:	08009c24 	.word	0x08009c24
		  		  	{
		  			  if(buffer[i]&&buffer[i]=='\n')
 8002608:	4b48      	ldr	r3, [pc, #288]	@ (800272c <main+0x538>)
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	b29b      	uxth	r3, r3
 800260e:	001a      	movs	r2, r3
 8002610:	4b47      	ldr	r3, [pc, #284]	@ (8002730 <main+0x53c>)
 8002612:	5c9b      	ldrb	r3, [r3, r2]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d066      	beq.n	80026e6 <main+0x4f2>
 8002618:	4b44      	ldr	r3, [pc, #272]	@ (800272c <main+0x538>)
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	b29b      	uxth	r3, r3
 800261e:	001a      	movs	r2, r3
 8002620:	4b43      	ldr	r3, [pc, #268]	@ (8002730 <main+0x53c>)
 8002622:	5c9b      	ldrb	r3, [r3, r2]
 8002624:	2b0a      	cmp	r3, #10
 8002626:	d15e      	bne.n	80026e6 <main+0x4f2>
		  				  {


		  				  if(minmea_parse_rmc(&rmcStruct, &(buffer[1]))){
 8002628:	4a42      	ldr	r2, [pc, #264]	@ (8002734 <main+0x540>)
 800262a:	4b43      	ldr	r3, [pc, #268]	@ (8002738 <main+0x544>)
 800262c:	0011      	movs	r1, r2
 800262e:	0018      	movs	r0, r3
 8002630:	f001 f810 	bl	8003654 <minmea_parse_rmc>
 8002634:	1e03      	subs	r3, r0, #0
 8002636:	d038      	beq.n	80026aa <main+0x4b6>
		  				      //printf("FIX?:");
		  				      lat = minmea_tocoord(&rmcStruct.latitude);
 8002638:	4b40      	ldr	r3, [pc, #256]	@ (800273c <main+0x548>)
 800263a:	0018      	movs	r0, r3
 800263c:	f7ff fd96 	bl	800216c <minmea_tocoord>
 8002640:	1c02      	adds	r2, r0, #0
 8002642:	4b3f      	ldr	r3, [pc, #252]	@ (8002740 <main+0x54c>)
 8002644:	601a      	str	r2, [r3, #0]
		  				      lon = minmea_tocoord(&rmcStruct.longitude);
 8002646:	4b3f      	ldr	r3, [pc, #252]	@ (8002744 <main+0x550>)
 8002648:	0018      	movs	r0, r3
 800264a:	f7ff fd8f 	bl	800216c <minmea_tocoord>
 800264e:	1c02      	adds	r2, r0, #0
 8002650:	4b3d      	ldr	r3, [pc, #244]	@ (8002748 <main+0x554>)
 8002652:	601a      	str	r2, [r3, #0]
		  				      sprintf(buffer, "lat:%d, %d", (int)(lat*100), (int)(lon*100));
 8002654:	4b3a      	ldr	r3, [pc, #232]	@ (8002740 <main+0x54c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	493c      	ldr	r1, [pc, #240]	@ (800274c <main+0x558>)
 800265a:	1c18      	adds	r0, r3, #0
 800265c:	f7fe fa8a 	bl	8000b74 <__aeabi_fmul>
 8002660:	1c03      	adds	r3, r0, #0
 8002662:	1c18      	adds	r0, r3, #0
 8002664:	f7fe fd68 	bl	8001138 <__aeabi_f2iz>
 8002668:	0004      	movs	r4, r0
 800266a:	4b37      	ldr	r3, [pc, #220]	@ (8002748 <main+0x554>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4937      	ldr	r1, [pc, #220]	@ (800274c <main+0x558>)
 8002670:	1c18      	adds	r0, r3, #0
 8002672:	f7fe fa7f 	bl	8000b74 <__aeabi_fmul>
 8002676:	1c03      	adds	r3, r0, #0
 8002678:	1c18      	adds	r0, r3, #0
 800267a:	f7fe fd5d 	bl	8001138 <__aeabi_f2iz>
 800267e:	0003      	movs	r3, r0
 8002680:	4933      	ldr	r1, [pc, #204]	@ (8002750 <main+0x55c>)
 8002682:	482b      	ldr	r0, [pc, #172]	@ (8002730 <main+0x53c>)
 8002684:	0022      	movs	r2, r4
 8002686:	f006 fe19 	bl	80092bc <siprintf>
		  				      if(rmcStruct.valid!=0)
 800268a:	4b2b      	ldr	r3, [pc, #172]	@ (8002738 <main+0x544>)
 800268c:	7c1b      	ldrb	r3, [r3, #16]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00b      	beq.n	80026aa <main+0x4b6>
		  				      {drawString(0, 30, buffer, BLACK, GREEN, 1, 1);
 8002692:	4a27      	ldr	r2, [pc, #156]	@ (8002730 <main+0x53c>)
 8002694:	2301      	movs	r3, #1
 8002696:	9302      	str	r3, [sp, #8]
 8002698:	2301      	movs	r3, #1
 800269a:	9301      	str	r3, [sp, #4]
 800269c:	4b2d      	ldr	r3, [pc, #180]	@ (8002754 <main+0x560>)
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	2300      	movs	r3, #0
 80026a2:	211e      	movs	r1, #30
 80026a4:	2000      	movs	r0, #0
 80026a6:	f7ff f81f 	bl	80016e8 <drawString>
		  				    }
		  				  }
		  				  //buffer[0]='_';
		  				  //drawString(70, 70, buffer, BLACK, GREEN, 1, 1);
		  				  for(ii=0;ii<=i;ii++) buffer[ii]=0;
 80026aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002758 <main+0x564>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	801a      	strh	r2, [r3, #0]
 80026b0:	e00d      	b.n	80026ce <main+0x4da>
 80026b2:	4b29      	ldr	r3, [pc, #164]	@ (8002758 <main+0x564>)
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	001a      	movs	r2, r3
 80026ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002730 <main+0x53c>)
 80026bc:	2100      	movs	r1, #0
 80026be:	5499      	strb	r1, [r3, r2]
 80026c0:	4b25      	ldr	r3, [pc, #148]	@ (8002758 <main+0x564>)
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	3301      	adds	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	4b23      	ldr	r3, [pc, #140]	@ (8002758 <main+0x564>)
 80026cc:	801a      	strh	r2, [r3, #0]
 80026ce:	4b22      	ldr	r3, [pc, #136]	@ (8002758 <main+0x564>)
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	4b15      	ldr	r3, [pc, #84]	@ (800272c <main+0x538>)
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	b29b      	uxth	r3, r3
 80026da:	429a      	cmp	r2, r3
 80026dc:	d9e9      	bls.n	80026b2 <main+0x4be>
		  				 i=0;
 80026de:	4b13      	ldr	r3, [pc, #76]	@ (800272c <main+0x538>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	801a      	strh	r2, [r3, #0]
		  				 break;
 80026e4:	e014      	b.n	8002710 <main+0x51c>
		  				  }
		  			  	        i++;
 80026e6:	4b11      	ldr	r3, [pc, #68]	@ (800272c <main+0x538>)
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3301      	adds	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	4b0e      	ldr	r3, [pc, #56]	@ (800272c <main+0x538>)
 80026f2:	801a      	strh	r2, [r3, #0]
		  		  while(HAL_UART_Receive(&huart1, &(buffer[i]), 1, 0xFFFF)==HAL_OK)
 80026f4:	4b0d      	ldr	r3, [pc, #52]	@ (800272c <main+0x538>)
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	001a      	movs	r2, r3
 80026fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002730 <main+0x53c>)
 80026fe:	18d1      	adds	r1, r2, r3
 8002700:	4b16      	ldr	r3, [pc, #88]	@ (800275c <main+0x568>)
 8002702:	4817      	ldr	r0, [pc, #92]	@ (8002760 <main+0x56c>)
 8002704:	2201      	movs	r2, #1
 8002706:	f005 fdb9 	bl	800827c <HAL_UART_Receive>
 800270a:	1e03      	subs	r3, r0, #0
 800270c:	d100      	bne.n	8002710 <main+0x51c>
 800270e:	e77b      	b.n	8002608 <main+0x414>

		  		  	}
		  	  drawString(70, 70, buffer, BLACK, GREEN, 1, 1);
 8002710:	4a07      	ldr	r2, [pc, #28]	@ (8002730 <main+0x53c>)
 8002712:	2301      	movs	r3, #1
 8002714:	9302      	str	r3, [sp, #8]
 8002716:	2301      	movs	r3, #1
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	4b0e      	ldr	r3, [pc, #56]	@ (8002754 <main+0x560>)
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	2300      	movs	r3, #0
 8002720:	2146      	movs	r1, #70	@ 0x46
 8002722:	2046      	movs	r0, #70	@ 0x46
 8002724:	f7fe ffe0 	bl	80016e8 <drawString>

		  break;
 8002728:	46c0      	nop			@ (mov r8, r8)
	  HAL_UART_Transmit(&huart2, "hello", 5, 100);
 800272a:	e5ac      	b.n	8002286 <main+0x92>
 800272c:	20000576 	.word	0x20000576
 8002730:	200005c8 	.word	0x200005c8
 8002734:	200005c9 	.word	0x200005c9
 8002738:	20000580 	.word	0x20000580
 800273c:	20000594 	.word	0x20000594
 8002740:	20000648 	.word	0x20000648
 8002744:	2000059c 	.word	0x2000059c
 8002748:	2000064c 	.word	0x2000064c
 800274c:	42c80000 	.word	0x42c80000
 8002750:	08009c38 	.word	0x08009c38
 8002754:	ffffe007 	.word	0xffffe007
 8002758:	20000578 	.word	0x20000578
 800275c:	0000ffff 	.word	0x0000ffff
 8002760:	200007f4 	.word	0x200007f4

08002764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002764:	b590      	push	{r4, r7, lr}
 8002766:	b095      	sub	sp, #84	@ 0x54
 8002768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800276a:	2414      	movs	r4, #20
 800276c:	193b      	adds	r3, r7, r4
 800276e:	0018      	movs	r0, r3
 8002770:	233c      	movs	r3, #60	@ 0x3c
 8002772:	001a      	movs	r2, r3
 8002774:	2100      	movs	r1, #0
 8002776:	f006 fdc1 	bl	80092fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800277a:	1d3b      	adds	r3, r7, #4
 800277c:	0018      	movs	r0, r3
 800277e:	2310      	movs	r3, #16
 8002780:	001a      	movs	r2, r3
 8002782:	2100      	movs	r1, #0
 8002784:	f006 fdba 	bl	80092fc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002788:	2380      	movs	r3, #128	@ 0x80
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	0018      	movs	r0, r3
 800278e:	f002 fc31 	bl	8004ff4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002792:	193b      	adds	r3, r7, r4
 8002794:	220a      	movs	r2, #10
 8002796:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002798:	193b      	adds	r3, r7, r4
 800279a:	2280      	movs	r2, #128	@ 0x80
 800279c:	0052      	lsls	r2, r2, #1
 800279e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80027a0:	0021      	movs	r1, r4
 80027a2:	187b      	adds	r3, r7, r1
 80027a4:	2200      	movs	r2, #0
 80027a6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027a8:	187b      	adds	r3, r7, r1
 80027aa:	2240      	movs	r2, #64	@ 0x40
 80027ac:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80027ae:	187b      	adds	r3, r7, r1
 80027b0:	2201      	movs	r2, #1
 80027b2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027b4:	187b      	adds	r3, r7, r1
 80027b6:	2202      	movs	r2, #2
 80027b8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80027ba:	187b      	adds	r3, r7, r1
 80027bc:	2202      	movs	r2, #2
 80027be:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80027c0:	187b      	adds	r3, r7, r1
 80027c2:	2200      	movs	r2, #0
 80027c4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80027c6:	187b      	adds	r3, r7, r1
 80027c8:	2208      	movs	r2, #8
 80027ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027cc:	187b      	adds	r3, r7, r1
 80027ce:	2280      	movs	r2, #128	@ 0x80
 80027d0:	0292      	lsls	r2, r2, #10
 80027d2:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80027d4:	187b      	adds	r3, r7, r1
 80027d6:	2280      	movs	r2, #128	@ 0x80
 80027d8:	0492      	lsls	r2, r2, #18
 80027da:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	2280      	movs	r2, #128	@ 0x80
 80027e0:	0592      	lsls	r2, r2, #22
 80027e2:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027e4:	187b      	adds	r3, r7, r1
 80027e6:	0018      	movs	r0, r3
 80027e8:	f002 fc50 	bl	800508c <HAL_RCC_OscConfig>
 80027ec:	1e03      	subs	r3, r0, #0
 80027ee:	d001      	beq.n	80027f4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80027f0:	f000 fb74 	bl	8002edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027f4:	1d3b      	adds	r3, r7, #4
 80027f6:	2207      	movs	r2, #7
 80027f8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	2202      	movs	r2, #2
 80027fe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002800:	1d3b      	adds	r3, r7, #4
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002806:	1d3b      	adds	r3, r7, #4
 8002808:	2200      	movs	r2, #0
 800280a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800280c:	1d3b      	adds	r3, r7, #4
 800280e:	2102      	movs	r1, #2
 8002810:	0018      	movs	r0, r3
 8002812:	f002 ff9b 	bl	800574c <HAL_RCC_ClockConfig>
 8002816:	1e03      	subs	r3, r0, #0
 8002818:	d001      	beq.n	800281e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800281a:	f000 fb5f 	bl	8002edc <Error_Handler>
  }
}
 800281e:	46c0      	nop			@ (mov r8, r8)
 8002820:	46bd      	mov	sp, r7
 8002822:	b015      	add	sp, #84	@ 0x54
 8002824:	bd90      	pop	{r4, r7, pc}
	...

08002828 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800282c:	4b1b      	ldr	r3, [pc, #108]	@ (800289c <MX_I2C1_Init+0x74>)
 800282e:	4a1c      	ldr	r2, [pc, #112]	@ (80028a0 <MX_I2C1_Init+0x78>)
 8002830:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8002832:	4b1a      	ldr	r3, [pc, #104]	@ (800289c <MX_I2C1_Init+0x74>)
 8002834:	4a1b      	ldr	r2, [pc, #108]	@ (80028a4 <MX_I2C1_Init+0x7c>)
 8002836:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002838:	4b18      	ldr	r3, [pc, #96]	@ (800289c <MX_I2C1_Init+0x74>)
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800283e:	4b17      	ldr	r3, [pc, #92]	@ (800289c <MX_I2C1_Init+0x74>)
 8002840:	2201      	movs	r2, #1
 8002842:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002844:	4b15      	ldr	r3, [pc, #84]	@ (800289c <MX_I2C1_Init+0x74>)
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800284a:	4b14      	ldr	r3, [pc, #80]	@ (800289c <MX_I2C1_Init+0x74>)
 800284c:	2200      	movs	r2, #0
 800284e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002850:	4b12      	ldr	r3, [pc, #72]	@ (800289c <MX_I2C1_Init+0x74>)
 8002852:	2200      	movs	r2, #0
 8002854:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002856:	4b11      	ldr	r3, [pc, #68]	@ (800289c <MX_I2C1_Init+0x74>)
 8002858:	2200      	movs	r2, #0
 800285a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800285c:	4b0f      	ldr	r3, [pc, #60]	@ (800289c <MX_I2C1_Init+0x74>)
 800285e:	2200      	movs	r2, #0
 8002860:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002862:	4b0e      	ldr	r3, [pc, #56]	@ (800289c <MX_I2C1_Init+0x74>)
 8002864:	0018      	movs	r0, r3
 8002866:	f001 fd81 	bl	800436c <HAL_I2C_Init>
 800286a:	1e03      	subs	r3, r0, #0
 800286c:	d001      	beq.n	8002872 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800286e:	f000 fb35 	bl	8002edc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002872:	4b0a      	ldr	r3, [pc, #40]	@ (800289c <MX_I2C1_Init+0x74>)
 8002874:	2100      	movs	r1, #0
 8002876:	0018      	movs	r0, r3
 8002878:	f002 fb24 	bl	8004ec4 <HAL_I2CEx_ConfigAnalogFilter>
 800287c:	1e03      	subs	r3, r0, #0
 800287e:	d001      	beq.n	8002884 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002880:	f000 fb2c 	bl	8002edc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002884:	4b05      	ldr	r3, [pc, #20]	@ (800289c <MX_I2C1_Init+0x74>)
 8002886:	2100      	movs	r1, #0
 8002888:	0018      	movs	r0, r3
 800288a:	f002 fb67 	bl	8004f5c <HAL_I2CEx_ConfigDigitalFilter>
 800288e:	1e03      	subs	r3, r0, #0
 8002890:	d001      	beq.n	8002896 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002892:	f000 fb23 	bl	8002edc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002896:	46c0      	nop			@ (mov r8, r8)
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	200006c4 	.word	0x200006c4
 80028a0:	40005400 	.word	0x40005400
 80028a4:	10b17db5 	.word	0x10b17db5

080028a8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b090      	sub	sp, #64	@ 0x40
 80028ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80028ae:	232c      	movs	r3, #44	@ 0x2c
 80028b0:	18fb      	adds	r3, r7, r3
 80028b2:	0018      	movs	r0, r3
 80028b4:	2314      	movs	r3, #20
 80028b6:	001a      	movs	r2, r3
 80028b8:	2100      	movs	r1, #0
 80028ba:	f006 fd1f 	bl	80092fc <memset>
  RTC_DateTypeDef sDate = {0};
 80028be:	2328      	movs	r3, #40	@ 0x28
 80028c0:	18fb      	adds	r3, r7, r3
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80028c6:	003b      	movs	r3, r7
 80028c8:	0018      	movs	r0, r3
 80028ca:	2328      	movs	r3, #40	@ 0x28
 80028cc:	001a      	movs	r2, r3
 80028ce:	2100      	movs	r1, #0
 80028d0:	f006 fd14 	bl	80092fc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028d4:	4b49      	ldr	r3, [pc, #292]	@ (80029fc <MX_RTC_Init+0x154>)
 80028d6:	4a4a      	ldr	r2, [pc, #296]	@ (8002a00 <MX_RTC_Init+0x158>)
 80028d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80028da:	4b48      	ldr	r3, [pc, #288]	@ (80029fc <MX_RTC_Init+0x154>)
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80028e0:	4b46      	ldr	r3, [pc, #280]	@ (80029fc <MX_RTC_Init+0x154>)
 80028e2:	227f      	movs	r2, #127	@ 0x7f
 80028e4:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80028e6:	4b45      	ldr	r3, [pc, #276]	@ (80029fc <MX_RTC_Init+0x154>)
 80028e8:	22ff      	movs	r2, #255	@ 0xff
 80028ea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028ec:	4b43      	ldr	r3, [pc, #268]	@ (80029fc <MX_RTC_Init+0x154>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80028f2:	4b42      	ldr	r3, [pc, #264]	@ (80029fc <MX_RTC_Init+0x154>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028f8:	4b40      	ldr	r3, [pc, #256]	@ (80029fc <MX_RTC_Init+0x154>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028fe:	4b3f      	ldr	r3, [pc, #252]	@ (80029fc <MX_RTC_Init+0x154>)
 8002900:	2280      	movs	r2, #128	@ 0x80
 8002902:	05d2      	lsls	r2, r2, #23
 8002904:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002906:	4b3d      	ldr	r3, [pc, #244]	@ (80029fc <MX_RTC_Init+0x154>)
 8002908:	2200      	movs	r2, #0
 800290a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800290c:	4b3b      	ldr	r3, [pc, #236]	@ (80029fc <MX_RTC_Init+0x154>)
 800290e:	0018      	movs	r0, r3
 8002910:	f003 fb02 	bl	8005f18 <HAL_RTC_Init>
 8002914:	1e03      	subs	r3, r0, #0
 8002916:	d001      	beq.n	800291c <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002918:	f000 fae0 	bl	8002edc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800291c:	212c      	movs	r1, #44	@ 0x2c
 800291e:	187b      	adds	r3, r7, r1
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002924:	187b      	adds	r3, r7, r1
 8002926:	2200      	movs	r2, #0
 8002928:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800292a:	187b      	adds	r3, r7, r1
 800292c:	2200      	movs	r2, #0
 800292e:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002930:	187b      	adds	r3, r7, r1
 8002932:	2200      	movs	r2, #0
 8002934:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002936:	187b      	adds	r3, r7, r1
 8002938:	2200      	movs	r2, #0
 800293a:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800293c:	187b      	adds	r3, r7, r1
 800293e:	2200      	movs	r2, #0
 8002940:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002942:	1879      	adds	r1, r7, r1
 8002944:	4b2d      	ldr	r3, [pc, #180]	@ (80029fc <MX_RTC_Init+0x154>)
 8002946:	2201      	movs	r2, #1
 8002948:	0018      	movs	r0, r3
 800294a:	f003 fb87 	bl	800605c <HAL_RTC_SetTime>
 800294e:	1e03      	subs	r3, r0, #0
 8002950:	d001      	beq.n	8002956 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002952:	f000 fac3 	bl	8002edc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002956:	2128      	movs	r1, #40	@ 0x28
 8002958:	187b      	adds	r3, r7, r1
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800295e:	187b      	adds	r3, r7, r1
 8002960:	2201      	movs	r2, #1
 8002962:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002964:	187b      	adds	r3, r7, r1
 8002966:	2201      	movs	r2, #1
 8002968:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800296a:	187b      	adds	r3, r7, r1
 800296c:	2200      	movs	r2, #0
 800296e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002970:	1879      	adds	r1, r7, r1
 8002972:	4b22      	ldr	r3, [pc, #136]	@ (80029fc <MX_RTC_Init+0x154>)
 8002974:	2201      	movs	r2, #1
 8002976:	0018      	movs	r0, r3
 8002978:	f003 fc18 	bl	80061ac <HAL_RTC_SetDate>
 800297c:	1e03      	subs	r3, r0, #0
 800297e:	d001      	beq.n	8002984 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8002980:	f000 faac 	bl	8002edc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002984:	003b      	movs	r3, r7
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800298a:	003b      	movs	r3, r7
 800298c:	2200      	movs	r2, #0
 800298e:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 8002990:	003b      	movs	r3, r7
 8002992:	2201      	movs	r2, #1
 8002994:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002996:	003b      	movs	r3, r7
 8002998:	2200      	movs	r2, #0
 800299a:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800299c:	003b      	movs	r3, r7
 800299e:	2200      	movs	r2, #0
 80029a0:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80029a2:	003b      	movs	r3, r7
 80029a4:	2200      	movs	r2, #0
 80029a6:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80029a8:	003b      	movs	r3, r7
 80029aa:	2200      	movs	r2, #0
 80029ac:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80029ae:	003b      	movs	r3, r7
 80029b0:	2200      	movs	r2, #0
 80029b2:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80029b4:	003b      	movs	r3, r7
 80029b6:	2200      	movs	r2, #0
 80029b8:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80029ba:	003b      	movs	r3, r7
 80029bc:	2220      	movs	r2, #32
 80029be:	2101      	movs	r1, #1
 80029c0:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80029c2:	003b      	movs	r3, r7
 80029c4:	2280      	movs	r2, #128	@ 0x80
 80029c6:	0052      	lsls	r2, r2, #1
 80029c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80029ca:	0039      	movs	r1, r7
 80029cc:	4b0b      	ldr	r3, [pc, #44]	@ (80029fc <MX_RTC_Init+0x154>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	0018      	movs	r0, r3
 80029d2:	f003 fc7d 	bl	80062d0 <HAL_RTC_SetAlarm_IT>
 80029d6:	1e03      	subs	r3, r0, #0
 80029d8:	d001      	beq.n	80029de <MX_RTC_Init+0x136>
  {
    Error_Handler();
 80029da:	f000 fa7f 	bl	8002edc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80029de:	4909      	ldr	r1, [pc, #36]	@ (8002a04 <MX_RTC_Init+0x15c>)
 80029e0:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <MX_RTC_Init+0x154>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	0018      	movs	r0, r3
 80029e6:	f003 ffa9 	bl	800693c <HAL_RTCEx_SetWakeUpTimer_IT>
 80029ea:	1e03      	subs	r3, r0, #0
 80029ec:	d001      	beq.n	80029f2 <MX_RTC_Init+0x14a>
  {
    Error_Handler();
 80029ee:	f000 fa75 	bl	8002edc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80029f2:	46c0      	nop			@ (mov r8, r8)
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b010      	add	sp, #64	@ 0x40
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	46c0      	nop			@ (mov r8, r8)
 80029fc:	20000718 	.word	0x20000718
 8002a00:	40002800 	.word	0x40002800
 8002a04:	0000500b 	.word	0x0000500b

08002a08 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a0c:	4b1c      	ldr	r3, [pc, #112]	@ (8002a80 <MX_SPI1_Init+0x78>)
 8002a0e:	4a1d      	ldr	r2, [pc, #116]	@ (8002a84 <MX_SPI1_Init+0x7c>)
 8002a10:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a12:	4b1b      	ldr	r3, [pc, #108]	@ (8002a80 <MX_SPI1_Init+0x78>)
 8002a14:	2282      	movs	r2, #130	@ 0x82
 8002a16:	0052      	lsls	r2, r2, #1
 8002a18:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002a1a:	4b19      	ldr	r3, [pc, #100]	@ (8002a80 <MX_SPI1_Init+0x78>)
 8002a1c:	2280      	movs	r2, #128	@ 0x80
 8002a1e:	0212      	lsls	r2, r2, #8
 8002a20:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a22:	4b17      	ldr	r3, [pc, #92]	@ (8002a80 <MX_SPI1_Init+0x78>)
 8002a24:	22e0      	movs	r2, #224	@ 0xe0
 8002a26:	00d2      	lsls	r2, r2, #3
 8002a28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a2a:	4b15      	ldr	r3, [pc, #84]	@ (8002a80 <MX_SPI1_Init+0x78>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a30:	4b13      	ldr	r3, [pc, #76]	@ (8002a80 <MX_SPI1_Init+0x78>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a36:	4b12      	ldr	r3, [pc, #72]	@ (8002a80 <MX_SPI1_Init+0x78>)
 8002a38:	2280      	movs	r2, #128	@ 0x80
 8002a3a:	0092      	lsls	r2, r2, #2
 8002a3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002a3e:	4b10      	ldr	r3, [pc, #64]	@ (8002a80 <MX_SPI1_Init+0x78>)
 8002a40:	2220      	movs	r2, #32
 8002a42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a44:	4b0e      	ldr	r3, [pc, #56]	@ (8002a80 <MX_SPI1_Init+0x78>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a80 <MX_SPI1_Init+0x78>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a50:	4b0b      	ldr	r3, [pc, #44]	@ (8002a80 <MX_SPI1_Init+0x78>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a56:	4b0a      	ldr	r3, [pc, #40]	@ (8002a80 <MX_SPI1_Init+0x78>)
 8002a58:	2207      	movs	r2, #7
 8002a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a5c:	4b08      	ldr	r3, [pc, #32]	@ (8002a80 <MX_SPI1_Init+0x78>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a62:	4b07      	ldr	r3, [pc, #28]	@ (8002a80 <MX_SPI1_Init+0x78>)
 8002a64:	2208      	movs	r2, #8
 8002a66:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a68:	4b05      	ldr	r3, [pc, #20]	@ (8002a80 <MX_SPI1_Init+0x78>)
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f004 f82e 	bl	8006acc <HAL_SPI_Init>
 8002a70:	1e03      	subs	r3, r0, #0
 8002a72:	d001      	beq.n	8002a78 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8002a74:	f000 fa32 	bl	8002edc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a78:	46c0      	nop			@ (mov r8, r8)
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	46c0      	nop			@ (mov r8, r8)
 8002a80:	20000744 	.word	0x20000744
 8002a84:	40013000 	.word	0x40013000

08002a88 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b094      	sub	sp, #80	@ 0x50
 8002a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a8e:	2334      	movs	r3, #52	@ 0x34
 8002a90:	18fb      	adds	r3, r7, r3
 8002a92:	0018      	movs	r0, r3
 8002a94:	231c      	movs	r3, #28
 8002a96:	001a      	movs	r2, r3
 8002a98:	2100      	movs	r1, #0
 8002a9a:	f006 fc2f 	bl	80092fc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a9e:	003b      	movs	r3, r7
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	2334      	movs	r3, #52	@ 0x34
 8002aa4:	001a      	movs	r2, r3
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	f006 fc28 	bl	80092fc <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002aac:	4b37      	ldr	r3, [pc, #220]	@ (8002b8c <MX_TIM17_Init+0x104>)
 8002aae:	4a38      	ldr	r2, [pc, #224]	@ (8002b90 <MX_TIM17_Init+0x108>)
 8002ab0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002ab2:	4b36      	ldr	r3, [pc, #216]	@ (8002b8c <MX_TIM17_Init+0x104>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab8:	4b34      	ldr	r3, [pc, #208]	@ (8002b8c <MX_TIM17_Init+0x104>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002abe:	4b33      	ldr	r3, [pc, #204]	@ (8002b8c <MX_TIM17_Init+0x104>)
 8002ac0:	4a34      	ldr	r2, [pc, #208]	@ (8002b94 <MX_TIM17_Init+0x10c>)
 8002ac2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac4:	4b31      	ldr	r3, [pc, #196]	@ (8002b8c <MX_TIM17_Init+0x104>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002aca:	4b30      	ldr	r3, [pc, #192]	@ (8002b8c <MX_TIM17_Init+0x104>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ad0:	4b2e      	ldr	r3, [pc, #184]	@ (8002b8c <MX_TIM17_Init+0x104>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002ad6:	4b2d      	ldr	r3, [pc, #180]	@ (8002b8c <MX_TIM17_Init+0x104>)
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f004 fb85 	bl	80071e8 <HAL_TIM_Base_Init>
 8002ade:	1e03      	subs	r3, r0, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8002ae2:	f000 f9fb 	bl	8002edc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002ae6:	4b29      	ldr	r3, [pc, #164]	@ (8002b8c <MX_TIM17_Init+0x104>)
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f004 fbd5 	bl	8007298 <HAL_TIM_PWM_Init>
 8002aee:	1e03      	subs	r3, r0, #0
 8002af0:	d001      	beq.n	8002af6 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8002af2:	f000 f9f3 	bl	8002edc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002af6:	2134      	movs	r1, #52	@ 0x34
 8002af8:	187b      	adds	r3, r7, r1
 8002afa:	2260      	movs	r2, #96	@ 0x60
 8002afc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002afe:	187b      	adds	r3, r7, r1
 8002b00:	2200      	movs	r2, #0
 8002b02:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b04:	187b      	adds	r3, r7, r1
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b0a:	187b      	adds	r3, r7, r1
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b10:	187b      	adds	r3, r7, r1
 8002b12:	2200      	movs	r2, #0
 8002b14:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b16:	187b      	adds	r3, r7, r1
 8002b18:	2200      	movs	r2, #0
 8002b1a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b1c:	187b      	adds	r3, r7, r1
 8002b1e:	2200      	movs	r2, #0
 8002b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b22:	1879      	adds	r1, r7, r1
 8002b24:	4b19      	ldr	r3, [pc, #100]	@ (8002b8c <MX_TIM17_Init+0x104>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f004 fd91 	bl	8007650 <HAL_TIM_PWM_ConfigChannel>
 8002b2e:	1e03      	subs	r3, r0, #0
 8002b30:	d001      	beq.n	8002b36 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8002b32:	f000 f9d3 	bl	8002edc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b36:	003b      	movs	r3, r7
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b3c:	003b      	movs	r3, r7
 8002b3e:	2200      	movs	r2, #0
 8002b40:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b42:	003b      	movs	r3, r7
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b48:	003b      	movs	r3, r7
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b4e:	003b      	movs	r3, r7
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b54:	003b      	movs	r3, r7
 8002b56:	2280      	movs	r2, #128	@ 0x80
 8002b58:	0192      	lsls	r2, r2, #6
 8002b5a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002b5c:	003b      	movs	r3, r7
 8002b5e:	2200      	movs	r2, #0
 8002b60:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b62:	003b      	movs	r3, r7
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002b68:	003a      	movs	r2, r7
 8002b6a:	4b08      	ldr	r3, [pc, #32]	@ (8002b8c <MX_TIM17_Init+0x104>)
 8002b6c:	0011      	movs	r1, r2
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f005 f9ee 	bl	8007f50 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b74:	1e03      	subs	r3, r0, #0
 8002b76:	d001      	beq.n	8002b7c <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8002b78:	f000 f9b0 	bl	8002edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002b7c:	4b03      	ldr	r3, [pc, #12]	@ (8002b8c <MX_TIM17_Init+0x104>)
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f000 ff3a 	bl	80039f8 <HAL_TIM_MspPostInit>

}
 8002b84:	46c0      	nop			@ (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b014      	add	sp, #80	@ 0x50
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	200007a8 	.word	0x200007a8
 8002b90:	40014800 	.word	0x40014800
 8002b94:	0000ffff 	.word	0x0000ffff

08002b98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b9c:	4b23      	ldr	r3, [pc, #140]	@ (8002c2c <MX_USART1_UART_Init+0x94>)
 8002b9e:	4a24      	ldr	r2, [pc, #144]	@ (8002c30 <MX_USART1_UART_Init+0x98>)
 8002ba0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002ba2:	4b22      	ldr	r3, [pc, #136]	@ (8002c2c <MX_USART1_UART_Init+0x94>)
 8002ba4:	2296      	movs	r2, #150	@ 0x96
 8002ba6:	0192      	lsls	r2, r2, #6
 8002ba8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002baa:	4b20      	ldr	r3, [pc, #128]	@ (8002c2c <MX_USART1_UART_Init+0x94>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8002c2c <MX_USART1_UART_Init+0x94>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c2c <MX_USART1_UART_Init+0x94>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c2c <MX_USART1_UART_Init+0x94>)
 8002bbe:	220c      	movs	r2, #12
 8002bc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c2c <MX_USART1_UART_Init+0x94>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bc8:	4b18      	ldr	r3, [pc, #96]	@ (8002c2c <MX_USART1_UART_Init+0x94>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bce:	4b17      	ldr	r3, [pc, #92]	@ (8002c2c <MX_USART1_UART_Init+0x94>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bd4:	4b15      	ldr	r3, [pc, #84]	@ (8002c2c <MX_USART1_UART_Init+0x94>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bda:	4b14      	ldr	r3, [pc, #80]	@ (8002c2c <MX_USART1_UART_Init+0x94>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002be0:	4b12      	ldr	r3, [pc, #72]	@ (8002c2c <MX_USART1_UART_Init+0x94>)
 8002be2:	0018      	movs	r0, r3
 8002be4:	f005 fa50 	bl	8008088 <HAL_UART_Init>
 8002be8:	1e03      	subs	r3, r0, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002bec:	f000 f976 	bl	8002edc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8002c2c <MX_USART1_UART_Init+0x94>)
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f006 f9eb 	bl	8008fd0 <HAL_UARTEx_SetTxFifoThreshold>
 8002bfa:	1e03      	subs	r3, r0, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002bfe:	f000 f96d 	bl	8002edc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c02:	4b0a      	ldr	r3, [pc, #40]	@ (8002c2c <MX_USART1_UART_Init+0x94>)
 8002c04:	2100      	movs	r1, #0
 8002c06:	0018      	movs	r0, r3
 8002c08:	f006 fa22 	bl	8009050 <HAL_UARTEx_SetRxFifoThreshold>
 8002c0c:	1e03      	subs	r3, r0, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002c10:	f000 f964 	bl	8002edc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002c14:	4b05      	ldr	r3, [pc, #20]	@ (8002c2c <MX_USART1_UART_Init+0x94>)
 8002c16:	0018      	movs	r0, r3
 8002c18:	f006 f9a0 	bl	8008f5c <HAL_UARTEx_DisableFifoMode>
 8002c1c:	1e03      	subs	r3, r0, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002c20:	f000 f95c 	bl	8002edc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c24:	46c0      	nop			@ (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	46c0      	nop			@ (mov r8, r8)
 8002c2c:	200007f4 	.word	0x200007f4
 8002c30:	40013800 	.word	0x40013800

08002c34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c38:	4b23      	ldr	r3, [pc, #140]	@ (8002cc8 <MX_USART2_UART_Init+0x94>)
 8002c3a:	4a24      	ldr	r2, [pc, #144]	@ (8002ccc <MX_USART2_UART_Init+0x98>)
 8002c3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c3e:	4b22      	ldr	r3, [pc, #136]	@ (8002cc8 <MX_USART2_UART_Init+0x94>)
 8002c40:	22e1      	movs	r2, #225	@ 0xe1
 8002c42:	0252      	lsls	r2, r2, #9
 8002c44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c46:	4b20      	ldr	r3, [pc, #128]	@ (8002cc8 <MX_USART2_UART_Init+0x94>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc8 <MX_USART2_UART_Init+0x94>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c52:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc8 <MX_USART2_UART_Init+0x94>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c58:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc8 <MX_USART2_UART_Init+0x94>)
 8002c5a:	220c      	movs	r2, #12
 8002c5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc8 <MX_USART2_UART_Init+0x94>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c64:	4b18      	ldr	r3, [pc, #96]	@ (8002cc8 <MX_USART2_UART_Init+0x94>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c6a:	4b17      	ldr	r3, [pc, #92]	@ (8002cc8 <MX_USART2_UART_Init+0x94>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c70:	4b15      	ldr	r3, [pc, #84]	@ (8002cc8 <MX_USART2_UART_Init+0x94>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c76:	4b14      	ldr	r3, [pc, #80]	@ (8002cc8 <MX_USART2_UART_Init+0x94>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c7c:	4b12      	ldr	r3, [pc, #72]	@ (8002cc8 <MX_USART2_UART_Init+0x94>)
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f005 fa02 	bl	8008088 <HAL_UART_Init>
 8002c84:	1e03      	subs	r3, r0, #0
 8002c86:	d001      	beq.n	8002c8c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002c88:	f000 f928 	bl	8002edc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc8 <MX_USART2_UART_Init+0x94>)
 8002c8e:	2100      	movs	r1, #0
 8002c90:	0018      	movs	r0, r3
 8002c92:	f006 f99d 	bl	8008fd0 <HAL_UARTEx_SetTxFifoThreshold>
 8002c96:	1e03      	subs	r3, r0, #0
 8002c98:	d001      	beq.n	8002c9e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002c9a:	f000 f91f 	bl	8002edc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc8 <MX_USART2_UART_Init+0x94>)
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f006 f9d4 	bl	8009050 <HAL_UARTEx_SetRxFifoThreshold>
 8002ca8:	1e03      	subs	r3, r0, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002cac:	f000 f916 	bl	8002edc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002cb0:	4b05      	ldr	r3, [pc, #20]	@ (8002cc8 <MX_USART2_UART_Init+0x94>)
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f006 f952 	bl	8008f5c <HAL_UARTEx_DisableFifoMode>
 8002cb8:	1e03      	subs	r3, r0, #0
 8002cba:	d001      	beq.n	8002cc0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002cbc:	f000 f90e 	bl	8002edc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cc0:	46c0      	nop			@ (mov r8, r8)
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	46c0      	nop			@ (mov r8, r8)
 8002cc8:	20000888 	.word	0x20000888
 8002ccc:	40004400 	.word	0x40004400

08002cd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cd0:	b590      	push	{r4, r7, lr}
 8002cd2:	b089      	sub	sp, #36	@ 0x24
 8002cd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd6:	240c      	movs	r4, #12
 8002cd8:	193b      	adds	r3, r7, r4
 8002cda:	0018      	movs	r0, r3
 8002cdc:	2314      	movs	r3, #20
 8002cde:	001a      	movs	r2, r3
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	f006 fb0b 	bl	80092fc <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ce6:	4b31      	ldr	r3, [pc, #196]	@ (8002dac <MX_GPIO_Init+0xdc>)
 8002ce8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cea:	4b30      	ldr	r3, [pc, #192]	@ (8002dac <MX_GPIO_Init+0xdc>)
 8002cec:	2104      	movs	r1, #4
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cf2:	4b2e      	ldr	r3, [pc, #184]	@ (8002dac <MX_GPIO_Init+0xdc>)
 8002cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60bb      	str	r3, [r7, #8]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfe:	4b2b      	ldr	r3, [pc, #172]	@ (8002dac <MX_GPIO_Init+0xdc>)
 8002d00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d02:	4b2a      	ldr	r3, [pc, #168]	@ (8002dac <MX_GPIO_Init+0xdc>)
 8002d04:	2101      	movs	r1, #1
 8002d06:	430a      	orrs	r2, r1
 8002d08:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d0a:	4b28      	ldr	r3, [pc, #160]	@ (8002dac <MX_GPIO_Init+0xdc>)
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d0e:	2201      	movs	r2, #1
 8002d10:	4013      	ands	r3, r2
 8002d12:	607b      	str	r3, [r7, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d16:	4b25      	ldr	r3, [pc, #148]	@ (8002dac <MX_GPIO_Init+0xdc>)
 8002d18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d1a:	4b24      	ldr	r3, [pc, #144]	@ (8002dac <MX_GPIO_Init+0xdc>)
 8002d1c:	2108      	movs	r1, #8
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d22:	4b22      	ldr	r3, [pc, #136]	@ (8002dac <MX_GPIO_Init+0xdc>)
 8002d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d26:	2208      	movs	r2, #8
 8002d28:	4013      	ands	r3, r2
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 8002d2e:	4920      	ldr	r1, [pc, #128]	@ (8002db0 <MX_GPIO_Init+0xe0>)
 8002d30:	23a0      	movs	r3, #160	@ 0xa0
 8002d32:	05db      	lsls	r3, r3, #23
 8002d34:	2200      	movs	r2, #0
 8002d36:	0018      	movs	r0, r3
 8002d38:	f001 fafb 	bl	8004332 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002d3c:	193b      	adds	r3, r7, r4
 8002d3e:	2202      	movs	r2, #2
 8002d40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d42:	193b      	adds	r3, r7, r4
 8002d44:	2200      	movs	r2, #0
 8002d46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	193b      	adds	r3, r7, r4
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d4e:	193b      	adds	r3, r7, r4
 8002d50:	4a18      	ldr	r2, [pc, #96]	@ (8002db4 <MX_GPIO_Init+0xe4>)
 8002d52:	0019      	movs	r1, r3
 8002d54:	0010      	movs	r0, r2
 8002d56:	f001 f963 	bl	8004020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
 8002d5a:	193b      	adds	r3, r7, r4
 8002d5c:	4a14      	ldr	r2, [pc, #80]	@ (8002db0 <MX_GPIO_Init+0xe0>)
 8002d5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d60:	193b      	adds	r3, r7, r4
 8002d62:	2201      	movs	r2, #1
 8002d64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	193b      	adds	r3, r7, r4
 8002d68:	2200      	movs	r2, #0
 8002d6a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6c:	193b      	adds	r3, r7, r4
 8002d6e:	2200      	movs	r2, #0
 8002d70:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d72:	193a      	adds	r2, r7, r4
 8002d74:	23a0      	movs	r3, #160	@ 0xa0
 8002d76:	05db      	lsls	r3, r3, #23
 8002d78:	0011      	movs	r1, r2
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f001 f950 	bl	8004020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002d80:	0021      	movs	r1, r4
 8002d82:	187b      	adds	r3, r7, r1
 8002d84:	22c0      	movs	r2, #192	@ 0xc0
 8002d86:	0152      	lsls	r2, r2, #5
 8002d88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d8a:	187b      	adds	r3, r7, r1
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	187b      	adds	r3, r7, r1
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d96:	187a      	adds	r2, r7, r1
 8002d98:	23a0      	movs	r3, #160	@ 0xa0
 8002d9a:	05db      	lsls	r3, r3, #23
 8002d9c:	0011      	movs	r1, r2
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f001 f93e 	bl	8004020 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002da4:	46c0      	nop			@ (mov r8, r8)
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b009      	add	sp, #36	@ 0x24
 8002daa:	bd90      	pop	{r4, r7, pc}
 8002dac:	40021000 	.word	0x40021000
 8002db0:	00008030 	.word	0x00008030
 8002db4:	50000800 	.word	0x50000800

08002db8 <_ADXL343_ReadReg8>:

/* USER CODE BEGIN 4 */
int _ADXL343_ReadReg8 (unsigned char TargetRegister, unsigned char * TargetValue, uint8_t size)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	6039      	str	r1, [r7, #0]
 8002dc0:	0011      	movs	r1, r2
 8002dc2:	1dfb      	adds	r3, r7, #7
 8002dc4:	1c02      	adds	r2, r0, #0
 8002dc6:	701a      	strb	r2, [r3, #0]
 8002dc8:	1dbb      	adds	r3, r7, #6
 8002dca:	1c0a      	adds	r2, r1, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
  if (!HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, &TargetRegister, 1, 1000)==HAL_OK)
 8002dce:	1dfa      	adds	r2, r7, #7
 8002dd0:	4811      	ldr	r0, [pc, #68]	@ (8002e18 <_ADXL343_ReadReg8+0x60>)
 8002dd2:	23fa      	movs	r3, #250	@ 0xfa
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	2301      	movs	r3, #1
 8002dda:	2128      	movs	r1, #40	@ 0x28
 8002ddc:	f001 fb6c 	bl	80044b8 <HAL_I2C_Master_Transmit>
 8002de0:	1e03      	subs	r3, r0, #0
 8002de2:	d002      	beq.n	8002dea <_ADXL343_ReadReg8+0x32>
      return -1;
 8002de4:	2301      	movs	r3, #1
 8002de6:	425b      	negs	r3, r3
 8002de8:	e011      	b.n	8002e0e <_ADXL343_ReadReg8+0x56>

  if (!HAL_I2C_Master_Receive(&hi2c1, 0x14<<1, TargetValue, size, 1000)==HAL_OK)
 8002dea:	1dbb      	adds	r3, r7, #6
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	b299      	uxth	r1, r3
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	4809      	ldr	r0, [pc, #36]	@ (8002e18 <_ADXL343_ReadReg8+0x60>)
 8002df4:	23fa      	movs	r3, #250	@ 0xfa
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	000b      	movs	r3, r1
 8002dfc:	2128      	movs	r1, #40	@ 0x28
 8002dfe:	f001 fc85 	bl	800470c <HAL_I2C_Master_Receive>
 8002e02:	1e03      	subs	r3, r0, #0
 8002e04:	d002      	beq.n	8002e0c <_ADXL343_ReadReg8+0x54>
    return -2;
 8002e06:	2302      	movs	r3, #2
 8002e08:	425b      	negs	r3, r3
 8002e0a:	e000      	b.n	8002e0e <_ADXL343_ReadReg8+0x56>

  return 0;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	0018      	movs	r0, r3
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b002      	add	sp, #8
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	46c0      	nop			@ (mov r8, r8)
 8002e18:	200006c4 	.word	0x200006c4

08002e1c <_ADXL343_WriteReg8>:

int _ADXL343_WriteReg8 (unsigned char TargetRegister, unsigned char TargetValue)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	0002      	movs	r2, r0
 8002e24:	1dfb      	adds	r3, r7, #7
 8002e26:	701a      	strb	r2, [r3, #0]
 8002e28:	1dbb      	adds	r3, r7, #6
 8002e2a:	1c0a      	adds	r2, r1, #0
 8002e2c:	701a      	strb	r2, [r3, #0]
  unsigned char buff [2];
  buff[0] = TargetRegister;
 8002e2e:	210c      	movs	r1, #12
 8002e30:	187b      	adds	r3, r7, r1
 8002e32:	1dfa      	adds	r2, r7, #7
 8002e34:	7812      	ldrb	r2, [r2, #0]
 8002e36:	701a      	strb	r2, [r3, #0]
  buff[1] = TargetValue;
 8002e38:	187b      	adds	r3, r7, r1
 8002e3a:	1dba      	adds	r2, r7, #6
 8002e3c:	7812      	ldrb	r2, [r2, #0]
 8002e3e:	705a      	strb	r2, [r3, #1]

  if (HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, buff, 2, 100))
 8002e40:	187a      	adds	r2, r7, r1
 8002e42:	4808      	ldr	r0, [pc, #32]	@ (8002e64 <_ADXL343_WriteReg8+0x48>)
 8002e44:	2364      	movs	r3, #100	@ 0x64
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	2302      	movs	r3, #2
 8002e4a:	2128      	movs	r1, #40	@ 0x28
 8002e4c:	f001 fb34 	bl	80044b8 <HAL_I2C_Master_Transmit>
 8002e50:	1e03      	subs	r3, r0, #0
 8002e52:	d002      	beq.n	8002e5a <_ADXL343_WriteReg8+0x3e>
      return -1;
 8002e54:	2301      	movs	r3, #1
 8002e56:	425b      	negs	r3, r3
 8002e58:	e000      	b.n	8002e5c <_ADXL343_WriteReg8+0x40>

  return 0;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b004      	add	sp, #16
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	200006c4 	.word	0x200006c4

08002e68 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8002e68:	b590      	push	{r4, r7, lr}
 8002e6a:	b091      	sub	sp, #68	@ 0x44
 8002e6c:	af04      	add	r7, sp, #16
 8002e6e:	6078      	str	r0, [r7, #4]
  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 8002e70:	2380      	movs	r3, #128	@ 0x80
 8002e72:	005a      	lsls	r2, r3, #1
 8002e74:	2408      	movs	r4, #8
 8002e76:	1939      	adds	r1, r7, r4
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f003 fb68 	bl	8006550 <HAL_RTC_GetAlarm>
  if(sAlarm.AlarmTime.Seconds>58) {
 8002e80:	0022      	movs	r2, r4
 8002e82:	18bb      	adds	r3, r7, r2
 8002e84:	789b      	ldrb	r3, [r3, #2]
 8002e86:	2b3a      	cmp	r3, #58	@ 0x3a
 8002e88:	d903      	bls.n	8002e92 <HAL_RTC_AlarmAEventCallback+0x2a>
    sAlarm.AlarmTime.Seconds=0;
 8002e8a:	18bb      	adds	r3, r7, r2
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	709a      	strb	r2, [r3, #2]
 8002e90:	e006      	b.n	8002ea0 <HAL_RTC_AlarmAEventCallback+0x38>
  }else{
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 8002e92:	2108      	movs	r1, #8
 8002e94:	187b      	adds	r3, r7, r1
 8002e96:	789b      	ldrb	r3, [r3, #2]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	187b      	adds	r3, r7, r1
 8002e9e:	709a      	strb	r2, [r3, #2]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8002ea0:	46c0      	nop			@ (mov r8, r8)
 8002ea2:	2308      	movs	r3, #8
 8002ea4:	18f9      	adds	r1, r7, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f003 fa10 	bl	80062d0 <HAL_RTC_SetAlarm_IT>
 8002eb0:	1e03      	subs	r3, r0, #0
 8002eb2:	d1f6      	bne.n	8002ea2 <HAL_RTC_AlarmAEventCallback+0x3a>
  	  drawString(30, 30, "testTime", BLACK, GREEN, 1, 1);
 8002eb4:	4a07      	ldr	r2, [pc, #28]	@ (8002ed4 <HAL_RTC_AlarmAEventCallback+0x6c>)
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	9302      	str	r3, [sp, #8]
 8002eba:	2301      	movs	r3, #1
 8002ebc:	9301      	str	r3, [sp, #4]
 8002ebe:	4b06      	ldr	r3, [pc, #24]	@ (8002ed8 <HAL_RTC_AlarmAEventCallback+0x70>)
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	211e      	movs	r1, #30
 8002ec6:	201e      	movs	r0, #30
 8002ec8:	f7fe fc0e 	bl	80016e8 <drawString>
}
 8002ecc:	46c0      	nop			@ (mov r8, r8)
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b00d      	add	sp, #52	@ 0x34
 8002ed2:	bd90      	pop	{r4, r7, pc}
 8002ed4:	08009c44 	.word	0x08009c44
 8002ed8:	ffffe007 	.word	0xffffe007

08002edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee0:	b672      	cpsid	i
}
 8002ee2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ee4:	46c0      	nop			@ (mov r8, r8)
 8002ee6:	e7fd      	b.n	8002ee4 <Error_Handler+0x8>

08002ee8 <minmea_isfield>:
        return false;

    return true;
}

static inline bool minmea_isfield(char c) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	0002      	movs	r2, r0
 8002ef0:	1dfb      	adds	r3, r7, #7
 8002ef2:	701a      	strb	r2, [r3, #0]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8002ef4:	1dfb      	adds	r3, r7, #7
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	4b0d      	ldr	r3, [pc, #52]	@ (8002f30 <minmea_isfield+0x48>)
 8002efc:	18d3      	adds	r3, r2, r3
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	001a      	movs	r2, r3
 8002f02:	2397      	movs	r3, #151	@ 0x97
 8002f04:	4013      	ands	r3, r2
 8002f06:	d009      	beq.n	8002f1c <minmea_isfield+0x34>
 8002f08:	1dfb      	adds	r3, r7, #7
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b2c      	cmp	r3, #44	@ 0x2c
 8002f0e:	d005      	beq.n	8002f1c <minmea_isfield+0x34>
 8002f10:	1dfb      	adds	r3, r7, #7
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f16:	d001      	beq.n	8002f1c <minmea_isfield+0x34>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <minmea_isfield+0x36>
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	1c1a      	adds	r2, r3, #0
 8002f20:	2301      	movs	r3, #1
 8002f22:	4013      	ands	r3, r2
 8002f24:	b2db      	uxtb	r3, r3
}
 8002f26:	0018      	movs	r0, r3
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	b002      	add	sp, #8
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	46c0      	nop			@ (mov r8, r8)
 8002f30:	0800a454 	.word	0x0800a454

08002f34 <minmea_scan>:

bool minmea_scan(const char *sentence, const char *format, ...)
{
 8002f34:	b40e      	push	{r1, r2, r3}
 8002f36:	b5b0      	push	{r4, r5, r7, lr}
 8002f38:	b0a7      	sub	sp, #156	@ 0x9c
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
    bool result = false;
 8002f3e:	2397      	movs	r3, #151	@ 0x97
 8002f40:	18fb      	adds	r3, r7, r3
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
    bool optional = false;
 8002f46:	2396      	movs	r3, #150	@ 0x96
 8002f48:	18fb      	adds	r3, r7, r3
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	701a      	strb	r2, [r3, #0]
    va_list ap;
    va_start(ap, format);
 8002f4e:	23a8      	movs	r3, #168	@ 0xa8
 8002f50:	2208      	movs	r2, #8
 8002f52:	189b      	adds	r3, r3, r2
 8002f54:	19db      	adds	r3, r3, r7
 8002f56:	62fb      	str	r3, [r7, #44]	@ 0x2c

    const char *field = sentence;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2290      	movs	r2, #144	@ 0x90
 8002f5c:	18ba      	adds	r2, r7, r2
 8002f5e:	6013      	str	r3, [r2, #0]
        } else { \
            field = NULL; \
        } \
    } while (0)

    while (*format) {
 8002f60:	e345      	b.n	80035ee <minmea_scan+0x6ba>
        char type = *format++;
 8002f62:	21a4      	movs	r1, #164	@ 0xa4
 8002f64:	2008      	movs	r0, #8
 8002f66:	180b      	adds	r3, r1, r0
 8002f68:	19db      	adds	r3, r3, r7
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	1809      	adds	r1, r1, r0
 8002f70:	19c9      	adds	r1, r1, r7
 8002f72:	600a      	str	r2, [r1, #0]
 8002f74:	2143      	movs	r1, #67	@ 0x43
 8002f76:	187a      	adds	r2, r7, r1
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	7013      	strb	r3, [r2, #0]

        if (type == ';') {
 8002f7c:	187b      	adds	r3, r7, r1
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b3b      	cmp	r3, #59	@ 0x3b
 8002f82:	d104      	bne.n	8002f8e <minmea_scan+0x5a>
            // All further fields are optional.
            optional = true;
 8002f84:	2396      	movs	r3, #150	@ 0x96
 8002f86:	18fb      	adds	r3, r7, r3
 8002f88:	2201      	movs	r2, #1
 8002f8a:	701a      	strb	r2, [r3, #0]
            continue;
 8002f8c:	e32f      	b.n	80035ee <minmea_scan+0x6ba>
        }

        if (!field && !optional) {
 8002f8e:	2390      	movs	r3, #144	@ 0x90
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d108      	bne.n	8002faa <minmea_scan+0x76>
 8002f98:	2396      	movs	r3, #150	@ 0x96
 8002f9a:	18fb      	adds	r3, r7, r3
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	4053      	eors	r3, r2
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d000      	beq.n	8002faa <minmea_scan+0x76>
 8002fa8:	e32f      	b.n	800360a <minmea_scan+0x6d6>
            // Field requested but we ran out if input. Bail out.
            goto parse_error;
        }

        switch (type) {
 8002faa:	2343      	movs	r3, #67	@ 0x43
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	3b44      	subs	r3, #68	@ 0x44
 8002fb2:	2b30      	cmp	r3, #48	@ 0x30
 8002fb4:	d900      	bls.n	8002fb8 <minmea_scan+0x84>
 8002fb6:	e32a      	b.n	800360e <minmea_scan+0x6da>
 8002fb8:	009a      	lsls	r2, r3, #2
 8002fba:	4bbd      	ldr	r3, [pc, #756]	@ (80032b0 <minmea_scan+0x37c>)
 8002fbc:	18d3      	adds	r3, r2, r3
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	469f      	mov	pc, r3
            case 'c': { // Single character field (char).
                char value = '\0';
 8002fc2:	258f      	movs	r5, #143	@ 0x8f
 8002fc4:	197b      	adds	r3, r7, r5
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	701a      	strb	r2, [r3, #0]

                if (field && minmea_isfield(*field))
 8002fca:	2490      	movs	r4, #144	@ 0x90
 8002fcc:	193b      	adds	r3, r7, r4
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00c      	beq.n	8002fee <minmea_scan+0xba>
 8002fd4:	193b      	adds	r3, r7, r4
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f7ff ff84 	bl	8002ee8 <minmea_isfield>
 8002fe0:	1e03      	subs	r3, r0, #0
 8002fe2:	d004      	beq.n	8002fee <minmea_scan+0xba>
                    value = *field;
 8002fe4:	197b      	adds	r3, r7, r5
 8002fe6:	193a      	adds	r2, r7, r4
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	7812      	ldrb	r2, [r2, #0]
 8002fec:	701a      	strb	r2, [r3, #0]

                *va_arg(ap, char *) = value;
 8002fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ff0:	1d1a      	adds	r2, r3, #4
 8002ff2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	228f      	movs	r2, #143	@ 0x8f
 8002ff8:	18ba      	adds	r2, r7, r2
 8002ffa:	7812      	ldrb	r2, [r2, #0]
 8002ffc:	701a      	strb	r2, [r3, #0]
            } break;
 8002ffe:	e2db      	b.n	80035b8 <minmea_scan+0x684>

            case 'd': { // Single character direction field (int).
                int value = 0;
 8003000:	2300      	movs	r3, #0
 8003002:	2288      	movs	r2, #136	@ 0x88
 8003004:	18ba      	adds	r2, r7, r2
 8003006:	6013      	str	r3, [r2, #0]

                if (field && minmea_isfield(*field)) {
 8003008:	2490      	movs	r4, #144	@ 0x90
 800300a:	193b      	adds	r3, r7, r4
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d022      	beq.n	8003058 <minmea_scan+0x124>
 8003012:	193b      	adds	r3, r7, r4
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	0018      	movs	r0, r3
 800301a:	f7ff ff65 	bl	8002ee8 <minmea_isfield>
 800301e:	1e03      	subs	r3, r0, #0
 8003020:	d01a      	beq.n	8003058 <minmea_scan+0x124>
                    switch (*field) {
 8003022:	193b      	adds	r3, r7, r4
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b57      	cmp	r3, #87	@ 0x57
 800302a:	d00f      	beq.n	800304c <minmea_scan+0x118>
 800302c:	dd00      	ble.n	8003030 <minmea_scan+0xfc>
 800302e:	e2f0      	b.n	8003612 <minmea_scan+0x6de>
 8003030:	2b53      	cmp	r3, #83	@ 0x53
 8003032:	d00b      	beq.n	800304c <minmea_scan+0x118>
 8003034:	dd00      	ble.n	8003038 <minmea_scan+0x104>
 8003036:	e2ec      	b.n	8003612 <minmea_scan+0x6de>
 8003038:	2b45      	cmp	r3, #69	@ 0x45
 800303a:	d002      	beq.n	8003042 <minmea_scan+0x10e>
 800303c:	2b4e      	cmp	r3, #78	@ 0x4e
 800303e:	d000      	beq.n	8003042 <minmea_scan+0x10e>
 8003040:	e2e7      	b.n	8003612 <minmea_scan+0x6de>
                        case 'N':
                        case 'E':
                            value = 1;
 8003042:	2301      	movs	r3, #1
 8003044:	2288      	movs	r2, #136	@ 0x88
 8003046:	18ba      	adds	r2, r7, r2
 8003048:	6013      	str	r3, [r2, #0]
                            break;
 800304a:	e005      	b.n	8003058 <minmea_scan+0x124>
                        case 'S':
                        case 'W':
                            value = -1;
 800304c:	2301      	movs	r3, #1
 800304e:	425b      	negs	r3, r3
 8003050:	2288      	movs	r2, #136	@ 0x88
 8003052:	18ba      	adds	r2, r7, r2
 8003054:	6013      	str	r3, [r2, #0]
                            break;
 8003056:	46c0      	nop			@ (mov r8, r8)
                        default:
                            goto parse_error;
                    }
                }

                *va_arg(ap, int *) = value;
 8003058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800305a:	1d1a      	adds	r2, r3, #4
 800305c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2288      	movs	r2, #136	@ 0x88
 8003062:	18ba      	adds	r2, r7, r2
 8003064:	6812      	ldr	r2, [r2, #0]
 8003066:	601a      	str	r2, [r3, #0]
            } break;
 8003068:	e2a6      	b.n	80035b8 <minmea_scan+0x684>

            case 'f': { // Fractional value with scale (struct minmea_float).
                int sign = 0;
 800306a:	2300      	movs	r3, #0
 800306c:	2284      	movs	r2, #132	@ 0x84
 800306e:	18ba      	adds	r2, r7, r2
 8003070:	6013      	str	r3, [r2, #0]
                int_least32_t value = -1;
 8003072:	2301      	movs	r3, #1
 8003074:	425b      	negs	r3, r3
 8003076:	2280      	movs	r2, #128	@ 0x80
 8003078:	18ba      	adds	r2, r7, r2
 800307a:	6013      	str	r3, [r2, #0]
                int_least32_t scale = 0;
 800307c:	2300      	movs	r3, #0
 800307e:	67fb      	str	r3, [r7, #124]	@ 0x7c

                if (field) {
 8003080:	2390      	movs	r3, #144	@ 0x90
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d100      	bne.n	800308c <minmea_scan+0x158>
 800308a:	e088      	b.n	800319e <minmea_scan+0x26a>
                    while (minmea_isfield(*field)) {
 800308c:	e07d      	b.n	800318a <minmea_scan+0x256>
                        if (*field == '+' && !sign && value == -1) {
 800308e:	2390      	movs	r3, #144	@ 0x90
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b2b      	cmp	r3, #43	@ 0x2b
 8003098:	d10d      	bne.n	80030b6 <minmea_scan+0x182>
 800309a:	2284      	movs	r2, #132	@ 0x84
 800309c:	18bb      	adds	r3, r7, r2
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d108      	bne.n	80030b6 <minmea_scan+0x182>
 80030a4:	2380      	movs	r3, #128	@ 0x80
 80030a6:	18fb      	adds	r3, r7, r3
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	3301      	adds	r3, #1
 80030ac:	d103      	bne.n	80030b6 <minmea_scan+0x182>
                            sign = 1;
 80030ae:	2301      	movs	r3, #1
 80030b0:	18ba      	adds	r2, r7, r2
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	e063      	b.n	800317e <minmea_scan+0x24a>
                        } else if (*field == '-' && !sign && value == -1) {
 80030b6:	2390      	movs	r3, #144	@ 0x90
 80030b8:	18fb      	adds	r3, r7, r3
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b2d      	cmp	r3, #45	@ 0x2d
 80030c0:	d10e      	bne.n	80030e0 <minmea_scan+0x1ac>
 80030c2:	2284      	movs	r2, #132	@ 0x84
 80030c4:	18bb      	adds	r3, r7, r2
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d109      	bne.n	80030e0 <minmea_scan+0x1ac>
 80030cc:	2380      	movs	r3, #128	@ 0x80
 80030ce:	18fb      	adds	r3, r7, r3
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3301      	adds	r3, #1
 80030d4:	d104      	bne.n	80030e0 <minmea_scan+0x1ac>
                            sign = -1;
 80030d6:	2301      	movs	r3, #1
 80030d8:	425b      	negs	r3, r3
 80030da:	18ba      	adds	r2, r7, r2
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e04e      	b.n	800317e <minmea_scan+0x24a>
                        } else if (isdigit((unsigned char) *field)) {
 80030e0:	2190      	movs	r1, #144	@ 0x90
 80030e2:	187b      	adds	r3, r7, r1
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	4b72      	ldr	r3, [pc, #456]	@ (80032b4 <minmea_scan+0x380>)
 80030ec:	18d3      	adds	r3, r2, r3
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	001a      	movs	r2, r3
 80030f2:	2304      	movs	r3, #4
 80030f4:	4013      	ands	r3, r2
 80030f6:	d035      	beq.n	8003164 <minmea_scan+0x230>
                            int digit = *field - '0';
 80030f8:	187b      	adds	r3, r7, r1
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	3b30      	subs	r3, #48	@ 0x30
 8003100:	63bb      	str	r3, [r7, #56]	@ 0x38
                            if (value == -1)
 8003102:	2280      	movs	r2, #128	@ 0x80
 8003104:	18bb      	adds	r3, r7, r2
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3301      	adds	r3, #1
 800310a:	d102      	bne.n	8003112 <minmea_scan+0x1de>
                                value = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	18ba      	adds	r2, r7, r2
 8003110:	6013      	str	r3, [r2, #0]
                            if (value > (INT_LEAST32_MAX-digit) / 10) {
 8003112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003114:	4a68      	ldr	r2, [pc, #416]	@ (80032b8 <minmea_scan+0x384>)
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	210a      	movs	r1, #10
 800311a:	0018      	movs	r0, r3
 800311c:	f7fd f890 	bl	8000240 <__divsi3>
 8003120:	0003      	movs	r3, r0
 8003122:	001a      	movs	r2, r3
 8003124:	2380      	movs	r3, #128	@ 0x80
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4293      	cmp	r3, r2
 800312c:	dd04      	ble.n	8003138 <minmea_scan+0x204>
                                /* we ran out of bits, what do we do? */
                                if (scale) {
 800312e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003130:	2b00      	cmp	r3, #0
 8003132:	d100      	bne.n	8003136 <minmea_scan+0x202>
 8003134:	e26f      	b.n	8003616 <minmea_scan+0x6e2>
                                    /* truncate extra precision */
                                    break;
 8003136:	e032      	b.n	800319e <minmea_scan+0x26a>
                                } else {
                                    /* integer overflow. bail out. */
                                    goto parse_error;
                                }
                            }
                            value = (10 * value) + digit;
 8003138:	2180      	movs	r1, #128	@ 0x80
 800313a:	187b      	adds	r3, r7, r1
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	0013      	movs	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	189b      	adds	r3, r3, r2
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	001a      	movs	r2, r3
 8003148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800314a:	189b      	adds	r3, r3, r2
 800314c:	187a      	adds	r2, r7, r1
 800314e:	6013      	str	r3, [r2, #0]
                            if (scale)
 8003150:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003152:	2b00      	cmp	r3, #0
 8003154:	d013      	beq.n	800317e <minmea_scan+0x24a>
                                scale *= 10;
 8003156:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003158:	0013      	movs	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	189b      	adds	r3, r3, r2
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003162:	e00c      	b.n	800317e <minmea_scan+0x24a>
                        } else if (*field == '.' && scale == 0) {
 8003164:	2390      	movs	r3, #144	@ 0x90
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b2e      	cmp	r3, #46	@ 0x2e
 800316e:	d000      	beq.n	8003172 <minmea_scan+0x23e>
 8003170:	e253      	b.n	800361a <minmea_scan+0x6e6>
 8003172:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003174:	2b00      	cmp	r3, #0
 8003176:	d000      	beq.n	800317a <minmea_scan+0x246>
 8003178:	e24f      	b.n	800361a <minmea_scan+0x6e6>
                            scale = 1;
 800317a:	2301      	movs	r3, #1
 800317c:	67fb      	str	r3, [r7, #124]	@ 0x7c
                        } else {
                            goto parse_error;
                        }
                        field++;
 800317e:	2290      	movs	r2, #144	@ 0x90
 8003180:	18bb      	adds	r3, r7, r2
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	3301      	adds	r3, #1
 8003186:	18ba      	adds	r2, r7, r2
 8003188:	6013      	str	r3, [r2, #0]
                    while (minmea_isfield(*field)) {
 800318a:	2390      	movs	r3, #144	@ 0x90
 800318c:	18fb      	adds	r3, r7, r3
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	0018      	movs	r0, r3
 8003194:	f7ff fea8 	bl	8002ee8 <minmea_isfield>
 8003198:	1e03      	subs	r3, r0, #0
 800319a:	d000      	beq.n	800319e <minmea_scan+0x26a>
 800319c:	e777      	b.n	800308e <minmea_scan+0x15a>
                    }
                }

                if ((sign || scale) && value == -1)
 800319e:	2384      	movs	r3, #132	@ 0x84
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d102      	bne.n	80031ae <minmea_scan+0x27a>
 80031a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d005      	beq.n	80031ba <minmea_scan+0x286>
 80031ae:	2380      	movs	r3, #128	@ 0x80
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	3301      	adds	r3, #1
 80031b6:	d100      	bne.n	80031ba <minmea_scan+0x286>
 80031b8:	e231      	b.n	800361e <minmea_scan+0x6ea>
                    goto parse_error;

                if (value == -1) {
 80031ba:	2280      	movs	r2, #128	@ 0x80
 80031bc:	18bb      	adds	r3, r7, r2
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3301      	adds	r3, #1
 80031c2:	d105      	bne.n	80031d0 <minmea_scan+0x29c>
                    /* No digits were scanned. */
                    value = 0;
 80031c4:	2300      	movs	r3, #0
 80031c6:	18ba      	adds	r2, r7, r2
 80031c8:	6013      	str	r3, [r2, #0]
                    scale = 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80031ce:	e004      	b.n	80031da <minmea_scan+0x2a6>
                } else if (scale == 0) {
 80031d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <minmea_scan+0x2a6>
                    /* No decimal point. */
                    scale = 1;
 80031d6:	2301      	movs	r3, #1
 80031d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
                }
                if (sign)
 80031da:	2284      	movs	r2, #132	@ 0x84
 80031dc:	18bb      	adds	r3, r7, r2
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d007      	beq.n	80031f4 <minmea_scan+0x2c0>
                    value *= sign;
 80031e4:	2180      	movs	r1, #128	@ 0x80
 80031e6:	187b      	adds	r3, r7, r1
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	18ba      	adds	r2, r7, r2
 80031ec:	6812      	ldr	r2, [r2, #0]
 80031ee:	4353      	muls	r3, r2
 80031f0:	187a      	adds	r2, r7, r1
 80031f2:	6013      	str	r3, [r2, #0]

                *va_arg(ap, struct minmea_float *) = (struct minmea_float) {value, scale};
 80031f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f6:	1d1a      	adds	r2, r3, #4
 80031f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2280      	movs	r2, #128	@ 0x80
 80031fe:	18ba      	adds	r2, r7, r2
 8003200:	6812      	ldr	r2, [r2, #0]
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003206:	605a      	str	r2, [r3, #4]
            } break;
 8003208:	e1d6      	b.n	80035b8 <minmea_scan+0x684>

            case 'i': { // Integer value, default 0 (int).
                int value = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	67bb      	str	r3, [r7, #120]	@ 0x78

                if (field) {
 800320e:	2290      	movs	r2, #144	@ 0x90
 8003210:	18bb      	adds	r3, r7, r2
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d011      	beq.n	800323c <minmea_scan+0x308>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 8003218:	2320      	movs	r3, #32
 800321a:	18f9      	adds	r1, r7, r3
 800321c:	18bb      	adds	r3, r7, r2
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	220a      	movs	r2, #10
 8003222:	0018      	movs	r0, r3
 8003224:	f006 f83e 	bl	80092a4 <strtol>
 8003228:	0003      	movs	r3, r0
 800322a:	67bb      	str	r3, [r7, #120]	@ 0x78
                    if (minmea_isfield(*endptr))
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	0018      	movs	r0, r3
 8003232:	f7ff fe59 	bl	8002ee8 <minmea_isfield>
 8003236:	1e03      	subs	r3, r0, #0
 8003238:	d000      	beq.n	800323c <minmea_scan+0x308>
 800323a:	e1f2      	b.n	8003622 <minmea_scan+0x6ee>
                        goto parse_error;
                }

                *va_arg(ap, int *) = value;
 800323c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800323e:	1d1a      	adds	r2, r3, #4
 8003240:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003246:	601a      	str	r2, [r3, #0]
            } break;
 8003248:	e1b6      	b.n	80035b8 <minmea_scan+0x684>

            case 's': { // String value (char *).
                char *buf = va_arg(ap, char *);
 800324a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324c:	1d1a      	adds	r2, r3, #4
 800324e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	677b      	str	r3, [r7, #116]	@ 0x74

                if (field) {
 8003254:	2390      	movs	r3, #144	@ 0x90
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d014      	beq.n	8003288 <minmea_scan+0x354>
                    while (minmea_isfield(*field))
 800325e:	e00a      	b.n	8003276 <minmea_scan+0x342>
                        *buf++ = *field++;
 8003260:	2190      	movs	r1, #144	@ 0x90
 8003262:	187b      	adds	r3, r7, r1
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	1c53      	adds	r3, r2, #1
 8003268:	1879      	adds	r1, r7, r1
 800326a:	600b      	str	r3, [r1, #0]
 800326c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800326e:	1c59      	adds	r1, r3, #1
 8003270:	6779      	str	r1, [r7, #116]	@ 0x74
 8003272:	7812      	ldrb	r2, [r2, #0]
 8003274:	701a      	strb	r2, [r3, #0]
                    while (minmea_isfield(*field))
 8003276:	2390      	movs	r3, #144	@ 0x90
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	0018      	movs	r0, r3
 8003280:	f7ff fe32 	bl	8002ee8 <minmea_isfield>
 8003284:	1e03      	subs	r3, r0, #0
 8003286:	d1eb      	bne.n	8003260 <minmea_scan+0x32c>
                }

                *buf = '\0';
 8003288:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800328a:	2200      	movs	r2, #0
 800328c:	701a      	strb	r2, [r3, #0]
            } break;
 800328e:	e193      	b.n	80035b8 <minmea_scan+0x684>

            case 't': { // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field)
 8003290:	2290      	movs	r2, #144	@ 0x90
 8003292:	18bb      	adds	r3, r7, r2
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d100      	bne.n	800329c <minmea_scan+0x368>
 800329a:	e1c4      	b.n	8003626 <minmea_scan+0x6f2>
                    goto parse_error;

                if (field[0] != '$')
 800329c:	18bb      	adds	r3, r7, r2
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b24      	cmp	r3, #36	@ 0x24
 80032a4:	d000      	beq.n	80032a8 <minmea_scan+0x374>
 80032a6:	e1c0      	b.n	800362a <minmea_scan+0x6f6>
                    goto parse_error;
                for (int i=0; i<5; i++)
 80032a8:	2300      	movs	r3, #0
 80032aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80032ac:	e01c      	b.n	80032e8 <minmea_scan+0x3b4>
 80032ae:	46c0      	nop			@ (mov r8, r8)
 80032b0:	0800a2b4 	.word	0x0800a2b4
 80032b4:	0800a454 	.word	0x0800a454
 80032b8:	7fffffff 	.word	0x7fffffff
                    if (!minmea_isfield(field[1+i]))
 80032bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032be:	3301      	adds	r3, #1
 80032c0:	001a      	movs	r2, r3
 80032c2:	2390      	movs	r3, #144	@ 0x90
 80032c4:	18fb      	adds	r3, r7, r3
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	189b      	adds	r3, r3, r2
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	0018      	movs	r0, r3
 80032ce:	f7ff fe0b 	bl	8002ee8 <minmea_isfield>
 80032d2:	0003      	movs	r3, r0
 80032d4:	001a      	movs	r2, r3
 80032d6:	2301      	movs	r3, #1
 80032d8:	4053      	eors	r3, r2
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d000      	beq.n	80032e2 <minmea_scan+0x3ae>
 80032e0:	e1a5      	b.n	800362e <minmea_scan+0x6fa>
                for (int i=0; i<5; i++)
 80032e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032e4:	3301      	adds	r3, #1
 80032e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80032e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	dde6      	ble.n	80032bc <minmea_scan+0x388>
                        goto parse_error;

                char *buf = va_arg(ap, char *);
 80032ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f0:	1d1a      	adds	r2, r3, #4
 80032f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
                memcpy(buf, field+1, 5);
 80032f8:	2390      	movs	r3, #144	@ 0x90
 80032fa:	18fb      	adds	r3, r7, r3
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	1c59      	adds	r1, r3, #1
 8003300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003302:	2205      	movs	r2, #5
 8003304:	0018      	movs	r0, r3
 8003306:	f006 f82d 	bl	8009364 <memcpy>
                buf[5] = '\0';
 800330a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800330c:	3305      	adds	r3, #5
 800330e:	2200      	movs	r2, #0
 8003310:	701a      	strb	r2, [r3, #0]
            } break;
 8003312:	e151      	b.n	80035b8 <minmea_scan+0x684>

            case 'D': { // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 8003314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003316:	1d1a      	adds	r2, r3, #4
 8003318:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	633b      	str	r3, [r7, #48]	@ 0x30

                int d = -1, m = -1, y = -1;
 800331e:	2301      	movs	r3, #1
 8003320:	425b      	negs	r3, r3
 8003322:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003324:	2301      	movs	r3, #1
 8003326:	425b      	negs	r3, r3
 8003328:	66bb      	str	r3, [r7, #104]	@ 0x68
 800332a:	2301      	movs	r3, #1
 800332c:	425b      	negs	r3, r3
 800332e:	667b      	str	r3, [r7, #100]	@ 0x64

                if (field && minmea_isfield(*field)) {
 8003330:	2290      	movs	r2, #144	@ 0x90
 8003332:	18bb      	adds	r3, r7, r2
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d067      	beq.n	800340a <minmea_scan+0x4d6>
 800333a:	18bb      	adds	r3, r7, r2
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	0018      	movs	r0, r3
 8003342:	f7ff fdd1 	bl	8002ee8 <minmea_isfield>
 8003346:	1e03      	subs	r3, r0, #0
 8003348:	d05f      	beq.n	800340a <minmea_scan+0x4d6>
                    // Always six digits.
                    for (int i=0; i<6; i++)
 800334a:	2300      	movs	r3, #0
 800334c:	663b      	str	r3, [r7, #96]	@ 0x60
 800334e:	e011      	b.n	8003374 <minmea_scan+0x440>
                        if (!isdigit((unsigned char) field[i]))
 8003350:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003352:	2290      	movs	r2, #144	@ 0x90
 8003354:	18ba      	adds	r2, r7, r2
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	18d3      	adds	r3, r2, r3
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	4bbb      	ldr	r3, [pc, #748]	@ (800364c <minmea_scan+0x718>)
 8003360:	18d3      	adds	r3, r2, r3
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	001a      	movs	r2, r3
 8003366:	2304      	movs	r3, #4
 8003368:	4013      	ands	r3, r2
 800336a:	d100      	bne.n	800336e <minmea_scan+0x43a>
 800336c:	e161      	b.n	8003632 <minmea_scan+0x6fe>
                    for (int i=0; i<6; i++)
 800336e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003370:	3301      	adds	r3, #1
 8003372:	663b      	str	r3, [r7, #96]	@ 0x60
 8003374:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003376:	2b05      	cmp	r3, #5
 8003378:	ddea      	ble.n	8003350 <minmea_scan+0x41c>
                            goto parse_error;

                    d = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 800337a:	2490      	movs	r4, #144	@ 0x90
 800337c:	193b      	adds	r3, r7, r4
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	781a      	ldrb	r2, [r3, #0]
 8003382:	211c      	movs	r1, #28
 8003384:	187b      	adds	r3, r7, r1
 8003386:	701a      	strb	r2, [r3, #0]
 8003388:	193b      	adds	r3, r7, r4
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	3301      	adds	r3, #1
 800338e:	781a      	ldrb	r2, [r3, #0]
 8003390:	187b      	adds	r3, r7, r1
 8003392:	705a      	strb	r2, [r3, #1]
 8003394:	187b      	adds	r3, r7, r1
 8003396:	2200      	movs	r2, #0
 8003398:	709a      	strb	r2, [r3, #2]
 800339a:	187b      	adds	r3, r7, r1
 800339c:	220a      	movs	r2, #10
 800339e:	2100      	movs	r1, #0
 80033a0:	0018      	movs	r0, r3
 80033a2:	f005 ff7f 	bl	80092a4 <strtol>
 80033a6:	0003      	movs	r3, r0
 80033a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    m = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 80033aa:	193b      	adds	r3, r7, r4
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	3302      	adds	r3, #2
 80033b0:	781a      	ldrb	r2, [r3, #0]
 80033b2:	2118      	movs	r1, #24
 80033b4:	187b      	adds	r3, r7, r1
 80033b6:	701a      	strb	r2, [r3, #0]
 80033b8:	193b      	adds	r3, r7, r4
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3303      	adds	r3, #3
 80033be:	781a      	ldrb	r2, [r3, #0]
 80033c0:	187b      	adds	r3, r7, r1
 80033c2:	705a      	strb	r2, [r3, #1]
 80033c4:	187b      	adds	r3, r7, r1
 80033c6:	2200      	movs	r2, #0
 80033c8:	709a      	strb	r2, [r3, #2]
 80033ca:	187b      	adds	r3, r7, r1
 80033cc:	220a      	movs	r2, #10
 80033ce:	2100      	movs	r1, #0
 80033d0:	0018      	movs	r0, r3
 80033d2:	f005 ff67 	bl	80092a4 <strtol>
 80033d6:	0003      	movs	r3, r0
 80033d8:	66bb      	str	r3, [r7, #104]	@ 0x68
                    y = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 80033da:	193b      	adds	r3, r7, r4
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	3304      	adds	r3, #4
 80033e0:	781a      	ldrb	r2, [r3, #0]
 80033e2:	2114      	movs	r1, #20
 80033e4:	187b      	adds	r3, r7, r1
 80033e6:	701a      	strb	r2, [r3, #0]
 80033e8:	193b      	adds	r3, r7, r4
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3305      	adds	r3, #5
 80033ee:	781a      	ldrb	r2, [r3, #0]
 80033f0:	187b      	adds	r3, r7, r1
 80033f2:	705a      	strb	r2, [r3, #1]
 80033f4:	187b      	adds	r3, r7, r1
 80033f6:	2200      	movs	r2, #0
 80033f8:	709a      	strb	r2, [r3, #2]
 80033fa:	187b      	adds	r3, r7, r1
 80033fc:	220a      	movs	r2, #10
 80033fe:	2100      	movs	r1, #0
 8003400:	0018      	movs	r0, r3
 8003402:	f005 ff4f 	bl	80092a4 <strtol>
 8003406:	0003      	movs	r3, r0
 8003408:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                date->day = d;
 800340a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800340c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800340e:	601a      	str	r2, [r3, #0]
                date->month = m;
 8003410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003412:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003414:	605a      	str	r2, [r3, #4]
                date->year = y;
 8003416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003418:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800341a:	609a      	str	r2, [r3, #8]
            } break;
 800341c:	e0cc      	b.n	80035b8 <minmea_scan+0x684>

            case 'T': { // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time = va_arg(ap, struct minmea_time *);
 800341e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003420:	1d1a      	adds	r2, r3, #4
 8003422:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	637b      	str	r3, [r7, #52]	@ 0x34

                int h = -1, i = -1, s = -1, u = -1;
 8003428:	2301      	movs	r3, #1
 800342a:	425b      	negs	r3, r3
 800342c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800342e:	2301      	movs	r3, #1
 8003430:	425b      	negs	r3, r3
 8003432:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003434:	2301      	movs	r3, #1
 8003436:	425b      	negs	r3, r3
 8003438:	657b      	str	r3, [r7, #84]	@ 0x54
 800343a:	2301      	movs	r3, #1
 800343c:	425b      	negs	r3, r3
 800343e:	653b      	str	r3, [r7, #80]	@ 0x50

                if (field && minmea_isfield(*field)) {
 8003440:	2290      	movs	r2, #144	@ 0x90
 8003442:	18bb      	adds	r3, r7, r2
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d100      	bne.n	800344c <minmea_scan+0x518>
 800344a:	e0a7      	b.n	800359c <minmea_scan+0x668>
 800344c:	18bb      	adds	r3, r7, r2
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	0018      	movs	r0, r3
 8003454:	f7ff fd48 	bl	8002ee8 <minmea_isfield>
 8003458:	1e03      	subs	r3, r0, #0
 800345a:	d100      	bne.n	800345e <minmea_scan+0x52a>
 800345c:	e09e      	b.n	800359c <minmea_scan+0x668>
                    // Minimum required: integer time.
                    for (int i=0; i<6; i++)
 800345e:	2300      	movs	r3, #0
 8003460:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003462:	e011      	b.n	8003488 <minmea_scan+0x554>
                        if (!isdigit((unsigned char) field[i]))
 8003464:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003466:	2290      	movs	r2, #144	@ 0x90
 8003468:	18ba      	adds	r2, r7, r2
 800346a:	6812      	ldr	r2, [r2, #0]
 800346c:	18d3      	adds	r3, r2, r3
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	4b76      	ldr	r3, [pc, #472]	@ (800364c <minmea_scan+0x718>)
 8003474:	18d3      	adds	r3, r2, r3
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	001a      	movs	r2, r3
 800347a:	2304      	movs	r3, #4
 800347c:	4013      	ands	r3, r2
 800347e:	d100      	bne.n	8003482 <minmea_scan+0x54e>
 8003480:	e0d9      	b.n	8003636 <minmea_scan+0x702>
                    for (int i=0; i<6; i++)
 8003482:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003484:	3301      	adds	r3, #1
 8003486:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003488:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800348a:	2b05      	cmp	r3, #5
 800348c:	ddea      	ble.n	8003464 <minmea_scan+0x530>
                            goto parse_error;

                    h = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 800348e:	2490      	movs	r4, #144	@ 0x90
 8003490:	193b      	adds	r3, r7, r4
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	781a      	ldrb	r2, [r3, #0]
 8003496:	2110      	movs	r1, #16
 8003498:	187b      	adds	r3, r7, r1
 800349a:	701a      	strb	r2, [r3, #0]
 800349c:	193b      	adds	r3, r7, r4
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3301      	adds	r3, #1
 80034a2:	781a      	ldrb	r2, [r3, #0]
 80034a4:	187b      	adds	r3, r7, r1
 80034a6:	705a      	strb	r2, [r3, #1]
 80034a8:	187b      	adds	r3, r7, r1
 80034aa:	2200      	movs	r2, #0
 80034ac:	709a      	strb	r2, [r3, #2]
 80034ae:	187b      	adds	r3, r7, r1
 80034b0:	220a      	movs	r2, #10
 80034b2:	2100      	movs	r1, #0
 80034b4:	0018      	movs	r0, r3
 80034b6:	f005 fef5 	bl	80092a4 <strtol>
 80034ba:	0003      	movs	r3, r0
 80034bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    i = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 80034be:	193b      	adds	r3, r7, r4
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3302      	adds	r3, #2
 80034c4:	781a      	ldrb	r2, [r3, #0]
 80034c6:	210c      	movs	r1, #12
 80034c8:	187b      	adds	r3, r7, r1
 80034ca:	701a      	strb	r2, [r3, #0]
 80034cc:	193b      	adds	r3, r7, r4
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3303      	adds	r3, #3
 80034d2:	781a      	ldrb	r2, [r3, #0]
 80034d4:	187b      	adds	r3, r7, r1
 80034d6:	705a      	strb	r2, [r3, #1]
 80034d8:	187b      	adds	r3, r7, r1
 80034da:	2200      	movs	r2, #0
 80034dc:	709a      	strb	r2, [r3, #2]
 80034de:	187b      	adds	r3, r7, r1
 80034e0:	220a      	movs	r2, #10
 80034e2:	2100      	movs	r1, #0
 80034e4:	0018      	movs	r0, r3
 80034e6:	f005 fedd 	bl	80092a4 <strtol>
 80034ea:	0003      	movs	r3, r0
 80034ec:	65bb      	str	r3, [r7, #88]	@ 0x58
                    s = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 80034ee:	193b      	adds	r3, r7, r4
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3304      	adds	r3, #4
 80034f4:	781a      	ldrb	r2, [r3, #0]
 80034f6:	2108      	movs	r1, #8
 80034f8:	187b      	adds	r3, r7, r1
 80034fa:	701a      	strb	r2, [r3, #0]
 80034fc:	193b      	adds	r3, r7, r4
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	3305      	adds	r3, #5
 8003502:	781a      	ldrb	r2, [r3, #0]
 8003504:	187b      	adds	r3, r7, r1
 8003506:	705a      	strb	r2, [r3, #1]
 8003508:	187b      	adds	r3, r7, r1
 800350a:	2200      	movs	r2, #0
 800350c:	709a      	strb	r2, [r3, #2]
 800350e:	187b      	adds	r3, r7, r1
 8003510:	220a      	movs	r2, #10
 8003512:	2100      	movs	r1, #0
 8003514:	0018      	movs	r0, r3
 8003516:	f005 fec5 	bl	80092a4 <strtol>
 800351a:	0003      	movs	r3, r0
 800351c:	657b      	str	r3, [r7, #84]	@ 0x54
                    field += 6;
 800351e:	193b      	adds	r3, r7, r4
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3306      	adds	r3, #6
 8003524:	193a      	adds	r2, r7, r4
 8003526:	6013      	str	r3, [r2, #0]

                    // Extra: fractional time. Saved as microseconds.
                    if (*field++ == '.') {
 8003528:	193b      	adds	r3, r7, r4
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	1939      	adds	r1, r7, r4
 8003530:	600a      	str	r2, [r1, #0]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b2e      	cmp	r3, #46	@ 0x2e
 8003536:	d12f      	bne.n	8003598 <minmea_scan+0x664>
                        int value = 0;
 8003538:	2300      	movs	r3, #0
 800353a:	64bb      	str	r3, [r7, #72]	@ 0x48
                        int scale = 1000000;
 800353c:	4b44      	ldr	r3, [pc, #272]	@ (8003650 <minmea_scan+0x71c>)
 800353e:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 8003540:	e016      	b.n	8003570 <minmea_scan+0x63c>
                            value = (value * 10) + (*field++ - '0');
 8003542:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003544:	0013      	movs	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	189b      	adds	r3, r3, r2
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	0019      	movs	r1, r3
 800354e:	2090      	movs	r0, #144	@ 0x90
 8003550:	183b      	adds	r3, r7, r0
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	1838      	adds	r0, r7, r0
 8003558:	6002      	str	r2, [r0, #0]
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	3b30      	subs	r3, #48	@ 0x30
 800355e:	18cb      	adds	r3, r1, r3
 8003560:	64bb      	str	r3, [r7, #72]	@ 0x48
                            scale /= 10;
 8003562:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003564:	210a      	movs	r1, #10
 8003566:	0018      	movs	r0, r3
 8003568:	f7fc fe6a 	bl	8000240 <__divsi3>
 800356c:	0003      	movs	r3, r0
 800356e:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 8003570:	2390      	movs	r3, #144	@ 0x90
 8003572:	18fb      	adds	r3, r7, r3
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	4b34      	ldr	r3, [pc, #208]	@ (800364c <minmea_scan+0x718>)
 800357c:	18d3      	adds	r3, r2, r3
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	001a      	movs	r2, r3
 8003582:	2304      	movs	r3, #4
 8003584:	4013      	ands	r3, r2
 8003586:	d002      	beq.n	800358e <minmea_scan+0x65a>
 8003588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800358a:	2b01      	cmp	r3, #1
 800358c:	dcd9      	bgt.n	8003542 <minmea_scan+0x60e>
                        }
                        u = value * scale;
 800358e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003590:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003592:	4353      	muls	r3, r2
 8003594:	653b      	str	r3, [r7, #80]	@ 0x50
 8003596:	e001      	b.n	800359c <minmea_scan+0x668>
                    } else {
                        u = 0;
 8003598:	2300      	movs	r3, #0
 800359a:	653b      	str	r3, [r7, #80]	@ 0x50
                    }
                }

                time->hours = h;
 800359c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800359e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80035a0:	601a      	str	r2, [r3, #0]
                time->minutes = i;
 80035a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035a6:	605a      	str	r2, [r3, #4]
                time->seconds = s;
 80035a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035aa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80035ac:	609a      	str	r2, [r3, #8]
                time->microseconds = u;
 80035ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80035b2:	60da      	str	r2, [r3, #12]
            } break;
 80035b4:	e000      	b.n	80035b8 <minmea_scan+0x684>

            case '_': { // Ignore the field.
            } break;
 80035b6:	46c0      	nop			@ (mov r8, r8)
            default: { // Unknown.
                goto parse_error;
            } break;
        }

        next_field();
 80035b8:	e002      	b.n	80035c0 <minmea_scan+0x68c>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3301      	adds	r3, #1
 80035be:	607b      	str	r3, [r7, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	0018      	movs	r0, r3
 80035c6:	f7ff fc8f 	bl	8002ee8 <minmea_isfield>
 80035ca:	1e03      	subs	r3, r0, #0
 80035cc:	d1f5      	bne.n	80035ba <minmea_scan+0x686>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b2c      	cmp	r3, #44	@ 0x2c
 80035d4:	d107      	bne.n	80035e6 <minmea_scan+0x6b2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3301      	adds	r3, #1
 80035da:	607b      	str	r3, [r7, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2290      	movs	r2, #144	@ 0x90
 80035e0:	18ba      	adds	r2, r7, r2
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	e003      	b.n	80035ee <minmea_scan+0x6ba>
 80035e6:	2300      	movs	r3, #0
 80035e8:	2290      	movs	r2, #144	@ 0x90
 80035ea:	18ba      	adds	r2, r7, r2
 80035ec:	6013      	str	r3, [r2, #0]
    while (*format) {
 80035ee:	23a4      	movs	r3, #164	@ 0xa4
 80035f0:	2208      	movs	r2, #8
 80035f2:	189b      	adds	r3, r3, r2
 80035f4:	19db      	adds	r3, r3, r7
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d000      	beq.n	8003600 <minmea_scan+0x6cc>
 80035fe:	e4b0      	b.n	8002f62 <minmea_scan+0x2e>
    }

    result = true;
 8003600:	2397      	movs	r3, #151	@ 0x97
 8003602:	18fb      	adds	r3, r7, r3
 8003604:	2201      	movs	r2, #1
 8003606:	701a      	strb	r2, [r3, #0]
 8003608:	e016      	b.n	8003638 <minmea_scan+0x704>
            goto parse_error;
 800360a:	46c0      	nop			@ (mov r8, r8)
 800360c:	e014      	b.n	8003638 <minmea_scan+0x704>
                goto parse_error;
 800360e:	46c0      	nop			@ (mov r8, r8)
 8003610:	e012      	b.n	8003638 <minmea_scan+0x704>
                            goto parse_error;
 8003612:	46c0      	nop			@ (mov r8, r8)
 8003614:	e010      	b.n	8003638 <minmea_scan+0x704>
                                    goto parse_error;
 8003616:	46c0      	nop			@ (mov r8, r8)
 8003618:	e00e      	b.n	8003638 <minmea_scan+0x704>
                            goto parse_error;
 800361a:	46c0      	nop			@ (mov r8, r8)
 800361c:	e00c      	b.n	8003638 <minmea_scan+0x704>
                    goto parse_error;
 800361e:	46c0      	nop			@ (mov r8, r8)
 8003620:	e00a      	b.n	8003638 <minmea_scan+0x704>
                        goto parse_error;
 8003622:	46c0      	nop			@ (mov r8, r8)
 8003624:	e008      	b.n	8003638 <minmea_scan+0x704>
                    goto parse_error;
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	e006      	b.n	8003638 <minmea_scan+0x704>
                    goto parse_error;
 800362a:	46c0      	nop			@ (mov r8, r8)
 800362c:	e004      	b.n	8003638 <minmea_scan+0x704>
                        goto parse_error;
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	e002      	b.n	8003638 <minmea_scan+0x704>
                            goto parse_error;
 8003632:	46c0      	nop			@ (mov r8, r8)
 8003634:	e000      	b.n	8003638 <minmea_scan+0x704>
                            goto parse_error;
 8003636:	46c0      	nop			@ (mov r8, r8)

parse_error:
    va_end(ap);
    return result;
 8003638:	2397      	movs	r3, #151	@ 0x97
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	781b      	ldrb	r3, [r3, #0]
}
 800363e:	0018      	movs	r0, r3
 8003640:	46bd      	mov	sp, r7
 8003642:	b027      	add	sp, #156	@ 0x9c
 8003644:	bcb0      	pop	{r4, r5, r7}
 8003646:	bc08      	pop	{r3}
 8003648:	b003      	add	sp, #12
 800364a:	4718      	bx	r3
 800364c:	0800a454 	.word	0x0800a454
 8003650:	000f4240 	.word	0x000f4240

08003654 <minmea_parse_rmc>:

    return MINMEA_UNKNOWN;
}

bool minmea_parse_rmc(struct minmea_sentence_rmc *frame, const char *sentence)
{
 8003654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003656:	46d6      	mov	lr, sl
 8003658:	464f      	mov	r7, r9
 800365a:	4646      	mov	r6, r8
 800365c:	b5c0      	push	{r6, r7, lr}
 800365e:	b092      	sub	sp, #72	@ 0x48
 8003660:	af0a      	add	r7, sp, #40	@ 0x28
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
    char type[6];
    char validity;
    int latitude_direction;
    int longitude_direction;
    int variation_direction;
    if (!minmea_scan(sentence, "tTcfdfdffDfd",
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	469a      	mov	sl, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3314      	adds	r3, #20
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	321c      	adds	r2, #28
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	3124      	adds	r1, #36	@ 0x24
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	302c      	adds	r0, #44	@ 0x2c
 800367a:	687c      	ldr	r4, [r7, #4]
 800367c:	3434      	adds	r4, #52	@ 0x34
 800367e:	687d      	ldr	r5, [r7, #4]
 8003680:	3540      	adds	r5, #64	@ 0x40
 8003682:	2618      	movs	r6, #24
 8003684:	46b1      	mov	r9, r6
 8003686:	44b9      	add	r9, r7
 8003688:	4e2a      	ldr	r6, [pc, #168]	@ (8003734 <minmea_parse_rmc+0xe0>)
 800368a:	46b0      	mov	r8, r6
 800368c:	683e      	ldr	r6, [r7, #0]
 800368e:	46b4      	mov	ip, r6
 8003690:	2608      	movs	r6, #8
 8003692:	19be      	adds	r6, r7, r6
 8003694:	9609      	str	r6, [sp, #36]	@ 0x24
 8003696:	9508      	str	r5, [sp, #32]
 8003698:	9407      	str	r4, [sp, #28]
 800369a:	9006      	str	r0, [sp, #24]
 800369c:	9105      	str	r1, [sp, #20]
 800369e:	210c      	movs	r1, #12
 80036a0:	1879      	adds	r1, r7, r1
 80036a2:	9104      	str	r1, [sp, #16]
 80036a4:	9203      	str	r2, [sp, #12]
 80036a6:	2210      	movs	r2, #16
 80036a8:	18ba      	adds	r2, r7, r2
 80036aa:	9202      	str	r2, [sp, #8]
 80036ac:	9301      	str	r3, [sp, #4]
 80036ae:	2317      	movs	r3, #23
 80036b0:	18fb      	adds	r3, r7, r3
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	4653      	mov	r3, sl
 80036b6:	464a      	mov	r2, r9
 80036b8:	4641      	mov	r1, r8
 80036ba:	4660      	mov	r0, ip
 80036bc:	f7ff fc3a 	bl	8002f34 <minmea_scan>
 80036c0:	0003      	movs	r3, r0
 80036c2:	001a      	movs	r2, r3
 80036c4:	2301      	movs	r3, #1
 80036c6:	4053      	eors	r3, r2
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <minmea_parse_rmc+0x7e>
            &frame->longitude, &longitude_direction,
            &frame->speed,
            &frame->course,
            &frame->date,
            &frame->variation, &variation_direction))
        return false;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e027      	b.n	8003722 <minmea_parse_rmc+0xce>
    if (strcmp(type+2, "RMC"))
 80036d2:	2318      	movs	r3, #24
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	3302      	adds	r3, #2
 80036d8:	4a17      	ldr	r2, [pc, #92]	@ (8003738 <minmea_parse_rmc+0xe4>)
 80036da:	0011      	movs	r1, r2
 80036dc:	0018      	movs	r0, r3
 80036de:	f7fc fd11 	bl	8000104 <strcmp>
 80036e2:	1e03      	subs	r3, r0, #0
 80036e4:	d001      	beq.n	80036ea <minmea_parse_rmc+0x96>
        return false;
 80036e6:	2300      	movs	r3, #0
 80036e8:	e01b      	b.n	8003722 <minmea_parse_rmc+0xce>

    frame->valid = (validity == 'A');
 80036ea:	2317      	movs	r3, #23
 80036ec:	18fb      	adds	r3, r7, r3
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	3b41      	subs	r3, #65	@ 0x41
 80036f2:	425a      	negs	r2, r3
 80036f4:	4153      	adcs	r3, r2
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	741a      	strb	r2, [r3, #16]
    frame->latitude.value *= latitude_direction;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	435a      	muls	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	615a      	str	r2, [r3, #20]
    frame->longitude.value *= longitude_direction;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	435a      	muls	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	61da      	str	r2, [r3, #28]
    frame->variation.value *= variation_direction;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	435a      	muls	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	641a      	str	r2, [r3, #64]	@ 0x40

    return true;
 8003720:	2301      	movs	r3, #1
}
 8003722:	0018      	movs	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	b008      	add	sp, #32
 8003728:	bce0      	pop	{r5, r6, r7}
 800372a:	46ba      	mov	sl, r7
 800372c:	46b1      	mov	r9, r6
 800372e:	46a8      	mov	r8, r5
 8003730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003732:	46c0      	nop			@ (mov r8, r8)
 8003734:	08009c70 	.word	0x08009c70
 8003738:	08009c5c 	.word	0x08009c5c

0800373c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003742:	4b11      	ldr	r3, [pc, #68]	@ (8003788 <HAL_MspInit+0x4c>)
 8003744:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003746:	4b10      	ldr	r3, [pc, #64]	@ (8003788 <HAL_MspInit+0x4c>)
 8003748:	2101      	movs	r1, #1
 800374a:	430a      	orrs	r2, r1
 800374c:	641a      	str	r2, [r3, #64]	@ 0x40
 800374e:	4b0e      	ldr	r3, [pc, #56]	@ (8003788 <HAL_MspInit+0x4c>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003752:	2201      	movs	r2, #1
 8003754:	4013      	ands	r3, r2
 8003756:	607b      	str	r3, [r7, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800375a:	4b0b      	ldr	r3, [pc, #44]	@ (8003788 <HAL_MspInit+0x4c>)
 800375c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800375e:	4b0a      	ldr	r3, [pc, #40]	@ (8003788 <HAL_MspInit+0x4c>)
 8003760:	2180      	movs	r1, #128	@ 0x80
 8003762:	0549      	lsls	r1, r1, #21
 8003764:	430a      	orrs	r2, r1
 8003766:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003768:	4b07      	ldr	r3, [pc, #28]	@ (8003788 <HAL_MspInit+0x4c>)
 800376a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800376c:	2380      	movs	r3, #128	@ 0x80
 800376e:	055b      	lsls	r3, r3, #21
 8003770:	4013      	ands	r3, r2
 8003772:	603b      	str	r3, [r7, #0]
 8003774:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003776:	23c0      	movs	r3, #192	@ 0xc0
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	0018      	movs	r0, r3
 800377c:	f000 fb5c 	bl	8003e38 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003780:	46c0      	nop			@ (mov r8, r8)
 8003782:	46bd      	mov	sp, r7
 8003784:	b002      	add	sp, #8
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40021000 	.word	0x40021000

0800378c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800378c:	b590      	push	{r4, r7, lr}
 800378e:	b09d      	sub	sp, #116	@ 0x74
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003794:	235c      	movs	r3, #92	@ 0x5c
 8003796:	18fb      	adds	r3, r7, r3
 8003798:	0018      	movs	r0, r3
 800379a:	2314      	movs	r3, #20
 800379c:	001a      	movs	r2, r3
 800379e:	2100      	movs	r1, #0
 80037a0:	f005 fdac 	bl	80092fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037a4:	2410      	movs	r4, #16
 80037a6:	193b      	adds	r3, r7, r4
 80037a8:	0018      	movs	r0, r3
 80037aa:	234c      	movs	r3, #76	@ 0x4c
 80037ac:	001a      	movs	r2, r3
 80037ae:	2100      	movs	r1, #0
 80037b0:	f005 fda4 	bl	80092fc <memset>
  if(hi2c->Instance==I2C1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a23      	ldr	r2, [pc, #140]	@ (8003848 <HAL_I2C_MspInit+0xbc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d13f      	bne.n	800383e <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80037be:	193b      	adds	r3, r7, r4
 80037c0:	2220      	movs	r2, #32
 80037c2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80037c4:	193b      	adds	r3, r7, r4
 80037c6:	2200      	movs	r2, #0
 80037c8:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037ca:	193b      	adds	r3, r7, r4
 80037cc:	0018      	movs	r0, r3
 80037ce:	f002 f967 	bl	8005aa0 <HAL_RCCEx_PeriphCLKConfig>
 80037d2:	1e03      	subs	r3, r0, #0
 80037d4:	d001      	beq.n	80037da <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80037d6:	f7ff fb81 	bl	8002edc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037da:	4b1c      	ldr	r3, [pc, #112]	@ (800384c <HAL_I2C_MspInit+0xc0>)
 80037dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037de:	4b1b      	ldr	r3, [pc, #108]	@ (800384c <HAL_I2C_MspInit+0xc0>)
 80037e0:	2101      	movs	r1, #1
 80037e2:	430a      	orrs	r2, r1
 80037e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80037e6:	4b19      	ldr	r3, [pc, #100]	@ (800384c <HAL_I2C_MspInit+0xc0>)
 80037e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ea:	2201      	movs	r2, #1
 80037ec:	4013      	ands	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80037f2:	215c      	movs	r1, #92	@ 0x5c
 80037f4:	187b      	adds	r3, r7, r1
 80037f6:	22c0      	movs	r2, #192	@ 0xc0
 80037f8:	00d2      	lsls	r2, r2, #3
 80037fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037fc:	187b      	adds	r3, r7, r1
 80037fe:	2212      	movs	r2, #18
 8003800:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003802:	187b      	adds	r3, r7, r1
 8003804:	2200      	movs	r2, #0
 8003806:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003808:	187b      	adds	r3, r7, r1
 800380a:	2200      	movs	r2, #0
 800380c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800380e:	187b      	adds	r3, r7, r1
 8003810:	2206      	movs	r2, #6
 8003812:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003814:	187a      	adds	r2, r7, r1
 8003816:	23a0      	movs	r3, #160	@ 0xa0
 8003818:	05db      	lsls	r3, r3, #23
 800381a:	0011      	movs	r1, r2
 800381c:	0018      	movs	r0, r3
 800381e:	f000 fbff 	bl	8004020 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003822:	4b0a      	ldr	r3, [pc, #40]	@ (800384c <HAL_I2C_MspInit+0xc0>)
 8003824:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003826:	4b09      	ldr	r3, [pc, #36]	@ (800384c <HAL_I2C_MspInit+0xc0>)
 8003828:	2180      	movs	r1, #128	@ 0x80
 800382a:	0389      	lsls	r1, r1, #14
 800382c:	430a      	orrs	r2, r1
 800382e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003830:	4b06      	ldr	r3, [pc, #24]	@ (800384c <HAL_I2C_MspInit+0xc0>)
 8003832:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003834:	2380      	movs	r3, #128	@ 0x80
 8003836:	039b      	lsls	r3, r3, #14
 8003838:	4013      	ands	r3, r2
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800383e:	46c0      	nop			@ (mov r8, r8)
 8003840:	46bd      	mov	sp, r7
 8003842:	b01d      	add	sp, #116	@ 0x74
 8003844:	bd90      	pop	{r4, r7, pc}
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	40005400 	.word	0x40005400
 800384c:	40021000 	.word	0x40021000

08003850 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003850:	b590      	push	{r4, r7, lr}
 8003852:	b097      	sub	sp, #92	@ 0x5c
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003858:	240c      	movs	r4, #12
 800385a:	193b      	adds	r3, r7, r4
 800385c:	0018      	movs	r0, r3
 800385e:	234c      	movs	r3, #76	@ 0x4c
 8003860:	001a      	movs	r2, r3
 8003862:	2100      	movs	r1, #0
 8003864:	f005 fd4a 	bl	80092fc <memset>
  if(hrtc->Instance==RTC)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a19      	ldr	r2, [pc, #100]	@ (80038d4 <HAL_RTC_MspInit+0x84>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d12c      	bne.n	80038cc <HAL_RTC_MspInit+0x7c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003872:	193b      	adds	r3, r7, r4
 8003874:	2280      	movs	r2, #128	@ 0x80
 8003876:	0292      	lsls	r2, r2, #10
 8003878:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800387a:	193b      	adds	r3, r7, r4
 800387c:	2280      	movs	r2, #128	@ 0x80
 800387e:	0092      	lsls	r2, r2, #2
 8003880:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003882:	193b      	adds	r3, r7, r4
 8003884:	0018      	movs	r0, r3
 8003886:	f002 f90b 	bl	8005aa0 <HAL_RCCEx_PeriphCLKConfig>
 800388a:	1e03      	subs	r3, r0, #0
 800388c:	d001      	beq.n	8003892 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800388e:	f7ff fb25 	bl	8002edc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003892:	4b11      	ldr	r3, [pc, #68]	@ (80038d8 <HAL_RTC_MspInit+0x88>)
 8003894:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003896:	4b10      	ldr	r3, [pc, #64]	@ (80038d8 <HAL_RTC_MspInit+0x88>)
 8003898:	2180      	movs	r1, #128	@ 0x80
 800389a:	0209      	lsls	r1, r1, #8
 800389c:	430a      	orrs	r2, r1
 800389e:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80038a0:	4b0d      	ldr	r3, [pc, #52]	@ (80038d8 <HAL_RTC_MspInit+0x88>)
 80038a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038a4:	4b0c      	ldr	r3, [pc, #48]	@ (80038d8 <HAL_RTC_MspInit+0x88>)
 80038a6:	2180      	movs	r1, #128	@ 0x80
 80038a8:	00c9      	lsls	r1, r1, #3
 80038aa:	430a      	orrs	r2, r1
 80038ac:	63da      	str	r2, [r3, #60]	@ 0x3c
 80038ae:	4b0a      	ldr	r3, [pc, #40]	@ (80038d8 <HAL_RTC_MspInit+0x88>)
 80038b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038b2:	2380      	movs	r3, #128	@ 0x80
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4013      	ands	r3, r2
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80038bc:	2200      	movs	r2, #0
 80038be:	2100      	movs	r1, #0
 80038c0:	2002      	movs	r0, #2
 80038c2:	f000 fb7b 	bl	8003fbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80038c6:	2002      	movs	r0, #2
 80038c8:	f000 fb8d 	bl	8003fe6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80038cc:	46c0      	nop			@ (mov r8, r8)
 80038ce:	46bd      	mov	sp, r7
 80038d0:	b017      	add	sp, #92	@ 0x5c
 80038d2:	bd90      	pop	{r4, r7, pc}
 80038d4:	40002800 	.word	0x40002800
 80038d8:	40021000 	.word	0x40021000

080038dc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038dc:	b590      	push	{r4, r7, lr}
 80038de:	b08b      	sub	sp, #44	@ 0x2c
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e4:	2414      	movs	r4, #20
 80038e6:	193b      	adds	r3, r7, r4
 80038e8:	0018      	movs	r0, r3
 80038ea:	2314      	movs	r3, #20
 80038ec:	001a      	movs	r2, r3
 80038ee:	2100      	movs	r1, #0
 80038f0:	f005 fd04 	bl	80092fc <memset>
  if(hspi->Instance==SPI1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a2c      	ldr	r2, [pc, #176]	@ (80039ac <HAL_SPI_MspInit+0xd0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d151      	bne.n	80039a2 <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038fe:	4b2c      	ldr	r3, [pc, #176]	@ (80039b0 <HAL_SPI_MspInit+0xd4>)
 8003900:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003902:	4b2b      	ldr	r3, [pc, #172]	@ (80039b0 <HAL_SPI_MspInit+0xd4>)
 8003904:	2180      	movs	r1, #128	@ 0x80
 8003906:	0149      	lsls	r1, r1, #5
 8003908:	430a      	orrs	r2, r1
 800390a:	641a      	str	r2, [r3, #64]	@ 0x40
 800390c:	4b28      	ldr	r3, [pc, #160]	@ (80039b0 <HAL_SPI_MspInit+0xd4>)
 800390e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003910:	2380      	movs	r3, #128	@ 0x80
 8003912:	015b      	lsls	r3, r3, #5
 8003914:	4013      	ands	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800391a:	4b25      	ldr	r3, [pc, #148]	@ (80039b0 <HAL_SPI_MspInit+0xd4>)
 800391c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800391e:	4b24      	ldr	r3, [pc, #144]	@ (80039b0 <HAL_SPI_MspInit+0xd4>)
 8003920:	2101      	movs	r1, #1
 8003922:	430a      	orrs	r2, r1
 8003924:	635a      	str	r2, [r3, #52]	@ 0x34
 8003926:	4b22      	ldr	r3, [pc, #136]	@ (80039b0 <HAL_SPI_MspInit+0xd4>)
 8003928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800392a:	2201      	movs	r2, #1
 800392c:	4013      	ands	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003932:	4b1f      	ldr	r3, [pc, #124]	@ (80039b0 <HAL_SPI_MspInit+0xd4>)
 8003934:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003936:	4b1e      	ldr	r3, [pc, #120]	@ (80039b0 <HAL_SPI_MspInit+0xd4>)
 8003938:	2108      	movs	r1, #8
 800393a:	430a      	orrs	r2, r1
 800393c:	635a      	str	r2, [r3, #52]	@ 0x34
 800393e:	4b1c      	ldr	r3, [pc, #112]	@ (80039b0 <HAL_SPI_MspInit+0xd4>)
 8003940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003942:	2208      	movs	r2, #8
 8003944:	4013      	ands	r3, r2
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PD5     ------> SPI1_MISO
    PD6     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800394a:	193b      	adds	r3, r7, r4
 800394c:	2202      	movs	r2, #2
 800394e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003950:	193b      	adds	r3, r7, r4
 8003952:	2202      	movs	r2, #2
 8003954:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003956:	193b      	adds	r3, r7, r4
 8003958:	2200      	movs	r2, #0
 800395a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800395c:	193b      	adds	r3, r7, r4
 800395e:	2200      	movs	r2, #0
 8003960:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003962:	193b      	adds	r3, r7, r4
 8003964:	2200      	movs	r2, #0
 8003966:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003968:	193a      	adds	r2, r7, r4
 800396a:	23a0      	movs	r3, #160	@ 0xa0
 800396c:	05db      	lsls	r3, r3, #23
 800396e:	0011      	movs	r1, r2
 8003970:	0018      	movs	r0, r3
 8003972:	f000 fb55 	bl	8004020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003976:	0021      	movs	r1, r4
 8003978:	187b      	adds	r3, r7, r1
 800397a:	2260      	movs	r2, #96	@ 0x60
 800397c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397e:	187b      	adds	r3, r7, r1
 8003980:	2202      	movs	r2, #2
 8003982:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003984:	187b      	adds	r3, r7, r1
 8003986:	2200      	movs	r2, #0
 8003988:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800398a:	187b      	adds	r3, r7, r1
 800398c:	2200      	movs	r2, #0
 800398e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8003990:	187b      	adds	r3, r7, r1
 8003992:	2201      	movs	r2, #1
 8003994:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003996:	187b      	adds	r3, r7, r1
 8003998:	4a06      	ldr	r2, [pc, #24]	@ (80039b4 <HAL_SPI_MspInit+0xd8>)
 800399a:	0019      	movs	r1, r3
 800399c:	0010      	movs	r0, r2
 800399e:	f000 fb3f 	bl	8004020 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b00b      	add	sp, #44	@ 0x2c
 80039a8:	bd90      	pop	{r4, r7, pc}
 80039aa:	46c0      	nop			@ (mov r8, r8)
 80039ac:	40013000 	.word	0x40013000
 80039b0:	40021000 	.word	0x40021000
 80039b4:	50000c00 	.word	0x50000c00

080039b8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a0a      	ldr	r2, [pc, #40]	@ (80039f0 <HAL_TIM_Base_MspInit+0x38>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d10d      	bne.n	80039e6 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80039ca:	4b0a      	ldr	r3, [pc, #40]	@ (80039f4 <HAL_TIM_Base_MspInit+0x3c>)
 80039cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039ce:	4b09      	ldr	r3, [pc, #36]	@ (80039f4 <HAL_TIM_Base_MspInit+0x3c>)
 80039d0:	2180      	movs	r1, #128	@ 0x80
 80039d2:	02c9      	lsls	r1, r1, #11
 80039d4:	430a      	orrs	r2, r1
 80039d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80039d8:	4b06      	ldr	r3, [pc, #24]	@ (80039f4 <HAL_TIM_Base_MspInit+0x3c>)
 80039da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039dc:	2380      	movs	r3, #128	@ 0x80
 80039de:	02db      	lsls	r3, r3, #11
 80039e0:	4013      	ands	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 80039e6:	46c0      	nop			@ (mov r8, r8)
 80039e8:	46bd      	mov	sp, r7
 80039ea:	b004      	add	sp, #16
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	46c0      	nop			@ (mov r8, r8)
 80039f0:	40014800 	.word	0x40014800
 80039f4:	40021000 	.word	0x40021000

080039f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80039f8:	b590      	push	{r4, r7, lr}
 80039fa:	b089      	sub	sp, #36	@ 0x24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a00:	240c      	movs	r4, #12
 8003a02:	193b      	adds	r3, r7, r4
 8003a04:	0018      	movs	r0, r3
 8003a06:	2314      	movs	r3, #20
 8003a08:	001a      	movs	r2, r3
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	f005 fc76 	bl	80092fc <memset>
  if(htim->Instance==TIM17)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a14      	ldr	r2, [pc, #80]	@ (8003a68 <HAL_TIM_MspPostInit+0x70>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d122      	bne.n	8003a60 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a1a:	4b14      	ldr	r3, [pc, #80]	@ (8003a6c <HAL_TIM_MspPostInit+0x74>)
 8003a1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a1e:	4b13      	ldr	r3, [pc, #76]	@ (8003a6c <HAL_TIM_MspPostInit+0x74>)
 8003a20:	2101      	movs	r1, #1
 8003a22:	430a      	orrs	r2, r1
 8003a24:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a26:	4b11      	ldr	r3, [pc, #68]	@ (8003a6c <HAL_TIM_MspPostInit+0x74>)
 8003a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	60bb      	str	r3, [r7, #8]
 8003a30:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003a32:	0021      	movs	r1, r4
 8003a34:	187b      	adds	r3, r7, r1
 8003a36:	2280      	movs	r2, #128	@ 0x80
 8003a38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a3a:	187b      	adds	r3, r7, r1
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a40:	187b      	adds	r3, r7, r1
 8003a42:	2200      	movs	r2, #0
 8003a44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a46:	187b      	adds	r3, r7, r1
 8003a48:	2200      	movs	r2, #0
 8003a4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8003a4c:	187b      	adds	r3, r7, r1
 8003a4e:	2205      	movs	r2, #5
 8003a50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a52:	187a      	adds	r2, r7, r1
 8003a54:	23a0      	movs	r3, #160	@ 0xa0
 8003a56:	05db      	lsls	r3, r3, #23
 8003a58:	0011      	movs	r1, r2
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f000 fae0 	bl	8004020 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003a60:	46c0      	nop			@ (mov r8, r8)
 8003a62:	46bd      	mov	sp, r7
 8003a64:	b009      	add	sp, #36	@ 0x24
 8003a66:	bd90      	pop	{r4, r7, pc}
 8003a68:	40014800 	.word	0x40014800
 8003a6c:	40021000 	.word	0x40021000

08003a70 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a70:	b590      	push	{r4, r7, lr}
 8003a72:	b09f      	sub	sp, #124	@ 0x7c
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a78:	2364      	movs	r3, #100	@ 0x64
 8003a7a:	18fb      	adds	r3, r7, r3
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	2314      	movs	r3, #20
 8003a80:	001a      	movs	r2, r3
 8003a82:	2100      	movs	r1, #0
 8003a84:	f005 fc3a 	bl	80092fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a88:	2418      	movs	r4, #24
 8003a8a:	193b      	adds	r3, r7, r4
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	234c      	movs	r3, #76	@ 0x4c
 8003a90:	001a      	movs	r2, r3
 8003a92:	2100      	movs	r1, #0
 8003a94:	f005 fc32 	bl	80092fc <memset>
  if(huart->Instance==USART1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a45      	ldr	r2, [pc, #276]	@ (8003bb4 <HAL_UART_MspInit+0x144>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d13e      	bne.n	8003b20 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003aa2:	193b      	adds	r3, r7, r4
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003aa8:	193b      	adds	r3, r7, r4
 8003aaa:	2200      	movs	r2, #0
 8003aac:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003aae:	193b      	adds	r3, r7, r4
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f001 fff5 	bl	8005aa0 <HAL_RCCEx_PeriphCLKConfig>
 8003ab6:	1e03      	subs	r3, r0, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003aba:	f7ff fa0f 	bl	8002edc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003abe:	4b3e      	ldr	r3, [pc, #248]	@ (8003bb8 <HAL_UART_MspInit+0x148>)
 8003ac0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ac2:	4b3d      	ldr	r3, [pc, #244]	@ (8003bb8 <HAL_UART_MspInit+0x148>)
 8003ac4:	2180      	movs	r1, #128	@ 0x80
 8003ac6:	01c9      	lsls	r1, r1, #7
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	641a      	str	r2, [r3, #64]	@ 0x40
 8003acc:	4b3a      	ldr	r3, [pc, #232]	@ (8003bb8 <HAL_UART_MspInit+0x148>)
 8003ace:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ad0:	2380      	movs	r3, #128	@ 0x80
 8003ad2:	01db      	lsls	r3, r3, #7
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]
 8003ad8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ada:	4b37      	ldr	r3, [pc, #220]	@ (8003bb8 <HAL_UART_MspInit+0x148>)
 8003adc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ade:	4b36      	ldr	r3, [pc, #216]	@ (8003bb8 <HAL_UART_MspInit+0x148>)
 8003ae0:	2104      	movs	r1, #4
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ae6:	4b34      	ldr	r3, [pc, #208]	@ (8003bb8 <HAL_UART_MspInit+0x148>)
 8003ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aea:	2204      	movs	r2, #4
 8003aec:	4013      	ands	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003af2:	2164      	movs	r1, #100	@ 0x64
 8003af4:	187b      	adds	r3, r7, r1
 8003af6:	2230      	movs	r2, #48	@ 0x30
 8003af8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afa:	187b      	adds	r3, r7, r1
 8003afc:	2202      	movs	r2, #2
 8003afe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b00:	187b      	adds	r3, r7, r1
 8003b02:	2200      	movs	r2, #0
 8003b04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b06:	187b      	adds	r3, r7, r1
 8003b08:	2200      	movs	r2, #0
 8003b0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003b0c:	187b      	adds	r3, r7, r1
 8003b0e:	2201      	movs	r2, #1
 8003b10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b12:	187b      	adds	r3, r7, r1
 8003b14:	4a29      	ldr	r2, [pc, #164]	@ (8003bbc <HAL_UART_MspInit+0x14c>)
 8003b16:	0019      	movs	r1, r3
 8003b18:	0010      	movs	r0, r2
 8003b1a:	f000 fa81 	bl	8004020 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8003b1e:	e044      	b.n	8003baa <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a26      	ldr	r2, [pc, #152]	@ (8003bc0 <HAL_UART_MspInit+0x150>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d13f      	bne.n	8003baa <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003b2a:	2118      	movs	r1, #24
 8003b2c:	187b      	adds	r3, r7, r1
 8003b2e:	2202      	movs	r2, #2
 8003b30:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003b32:	187b      	adds	r3, r7, r1
 8003b34:	2200      	movs	r2, #0
 8003b36:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b38:	187b      	adds	r3, r7, r1
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f001 ffb0 	bl	8005aa0 <HAL_RCCEx_PeriphCLKConfig>
 8003b40:	1e03      	subs	r3, r0, #0
 8003b42:	d001      	beq.n	8003b48 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8003b44:	f7ff f9ca 	bl	8002edc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b48:	4b1b      	ldr	r3, [pc, #108]	@ (8003bb8 <HAL_UART_MspInit+0x148>)
 8003b4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003bb8 <HAL_UART_MspInit+0x148>)
 8003b4e:	2180      	movs	r1, #128	@ 0x80
 8003b50:	0289      	lsls	r1, r1, #10
 8003b52:	430a      	orrs	r2, r1
 8003b54:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003b56:	4b18      	ldr	r3, [pc, #96]	@ (8003bb8 <HAL_UART_MspInit+0x148>)
 8003b58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b5a:	2380      	movs	r3, #128	@ 0x80
 8003b5c:	029b      	lsls	r3, r3, #10
 8003b5e:	4013      	ands	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b64:	4b14      	ldr	r3, [pc, #80]	@ (8003bb8 <HAL_UART_MspInit+0x148>)
 8003b66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b68:	4b13      	ldr	r3, [pc, #76]	@ (8003bb8 <HAL_UART_MspInit+0x148>)
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b70:	4b11      	ldr	r3, [pc, #68]	@ (8003bb8 <HAL_UART_MspInit+0x148>)
 8003b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b74:	2201      	movs	r2, #1
 8003b76:	4013      	ands	r3, r2
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003b7c:	2164      	movs	r1, #100	@ 0x64
 8003b7e:	187b      	adds	r3, r7, r1
 8003b80:	220c      	movs	r2, #12
 8003b82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b84:	187b      	adds	r3, r7, r1
 8003b86:	2202      	movs	r2, #2
 8003b88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8a:	187b      	adds	r3, r7, r1
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b90:	187b      	adds	r3, r7, r1
 8003b92:	2200      	movs	r2, #0
 8003b94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003b96:	187b      	adds	r3, r7, r1
 8003b98:	2201      	movs	r2, #1
 8003b9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b9c:	187a      	adds	r2, r7, r1
 8003b9e:	23a0      	movs	r3, #160	@ 0xa0
 8003ba0:	05db      	lsls	r3, r3, #23
 8003ba2:	0011      	movs	r1, r2
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f000 fa3b 	bl	8004020 <HAL_GPIO_Init>
}
 8003baa:	46c0      	nop			@ (mov r8, r8)
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b01f      	add	sp, #124	@ 0x7c
 8003bb0:	bd90      	pop	{r4, r7, pc}
 8003bb2:	46c0      	nop			@ (mov r8, r8)
 8003bb4:	40013800 	.word	0x40013800
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	50000800 	.word	0x50000800
 8003bc0:	40004400 	.word	0x40004400

08003bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003bc8:	46c0      	nop			@ (mov r8, r8)
 8003bca:	e7fd      	b.n	8003bc8 <NMI_Handler+0x4>

08003bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bd0:	46c0      	nop			@ (mov r8, r8)
 8003bd2:	e7fd      	b.n	8003bd0 <HardFault_Handler+0x4>

08003bd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003bd8:	46c0      	nop			@ (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003be2:	46c0      	nop			@ (mov r8, r8)
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bec:	f000 f8e4 	bl	8003db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bf0:	46c0      	nop			@ (mov r8, r8)
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003bfc:	4b05      	ldr	r3, [pc, #20]	@ (8003c14 <RTC_TAMP_IRQHandler+0x1c>)
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f002 fd6c 	bl	80066dc <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003c04:	4b03      	ldr	r3, [pc, #12]	@ (8003c14 <RTC_TAMP_IRQHandler+0x1c>)
 8003c06:	0018      	movs	r0, r3
 8003c08:	f002 ff32 	bl	8006a70 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8003c0c:	46c0      	nop			@ (mov r8, r8)
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	46c0      	nop			@ (mov r8, r8)
 8003c14:	20000718 	.word	0x20000718

08003c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c20:	4a14      	ldr	r2, [pc, #80]	@ (8003c74 <_sbrk+0x5c>)
 8003c22:	4b15      	ldr	r3, [pc, #84]	@ (8003c78 <_sbrk+0x60>)
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c2c:	4b13      	ldr	r3, [pc, #76]	@ (8003c7c <_sbrk+0x64>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d102      	bne.n	8003c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c34:	4b11      	ldr	r3, [pc, #68]	@ (8003c7c <_sbrk+0x64>)
 8003c36:	4a12      	ldr	r2, [pc, #72]	@ (8003c80 <_sbrk+0x68>)
 8003c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c3a:	4b10      	ldr	r3, [pc, #64]	@ (8003c7c <_sbrk+0x64>)
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	18d3      	adds	r3, r2, r3
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d207      	bcs.n	8003c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c48:	f005 fb60 	bl	800930c <__errno>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	220c      	movs	r2, #12
 8003c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c52:	2301      	movs	r3, #1
 8003c54:	425b      	negs	r3, r3
 8003c56:	e009      	b.n	8003c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c58:	4b08      	ldr	r3, [pc, #32]	@ (8003c7c <_sbrk+0x64>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c5e:	4b07      	ldr	r3, [pc, #28]	@ (8003c7c <_sbrk+0x64>)
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	18d2      	adds	r2, r2, r3
 8003c66:	4b05      	ldr	r3, [pc, #20]	@ (8003c7c <_sbrk+0x64>)
 8003c68:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
}
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	b006      	add	sp, #24
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	20024000 	.word	0x20024000
 8003c78:	00000400 	.word	0x00000400
 8003c7c:	2000091c 	.word	0x2000091c
 8003c80:	20000a70 	.word	0x20000a70

08003c84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c88:	46c0      	nop			@ (mov r8, r8)
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003c90:	480d      	ldr	r0, [pc, #52]	@ (8003cc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c92:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003c94:	f7ff fff6 	bl	8003c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c98:	480c      	ldr	r0, [pc, #48]	@ (8003ccc <LoopForever+0x6>)
  ldr r1, =_edata
 8003c9a:	490d      	ldr	r1, [pc, #52]	@ (8003cd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8003cd4 <LoopForever+0xe>)
  movs r3, #0
 8003c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ca0:	e002      	b.n	8003ca8 <LoopCopyDataInit>

08003ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ca6:	3304      	adds	r3, #4

08003ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cac:	d3f9      	bcc.n	8003ca2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cae:	4a0a      	ldr	r2, [pc, #40]	@ (8003cd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003cb0:	4c0a      	ldr	r4, [pc, #40]	@ (8003cdc <LoopForever+0x16>)
  movs r3, #0
 8003cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003cb4:	e001      	b.n	8003cba <LoopFillZerobss>

08003cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cb8:	3204      	adds	r2, #4

08003cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cbc:	d3fb      	bcc.n	8003cb6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003cbe:	f005 fb2b 	bl	8009318 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003cc2:	f7fe fa97 	bl	80021f4 <main>

08003cc6 <LoopForever>:

LoopForever:
  b LoopForever
 8003cc6:	e7fe      	b.n	8003cc6 <LoopForever>
  ldr   r0, =_estack
 8003cc8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cd0:	20000550 	.word	0x20000550
  ldr r2, =_sidata
 8003cd4:	0800a598 	.word	0x0800a598
  ldr r2, =_sbss
 8003cd8:	20000550 	.word	0x20000550
  ldr r4, =_ebss
 8003cdc:	20000a6c 	.word	0x20000a6c

08003ce0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ce0:	e7fe      	b.n	8003ce0 <ADC1_COMP_IRQHandler>
	...

08003ce4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003cea:	1dfb      	adds	r3, r7, #7
 8003cec:	2200      	movs	r2, #0
 8003cee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8003d20 <HAL_Init+0x3c>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8003d20 <HAL_Init+0x3c>)
 8003cf6:	2180      	movs	r1, #128	@ 0x80
 8003cf8:	0049      	lsls	r1, r1, #1
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cfe:	2003      	movs	r0, #3
 8003d00:	f000 f810 	bl	8003d24 <HAL_InitTick>
 8003d04:	1e03      	subs	r3, r0, #0
 8003d06:	d003      	beq.n	8003d10 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003d08:	1dfb      	adds	r3, r7, #7
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	e001      	b.n	8003d14 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003d10:	f7ff fd14 	bl	800373c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d14:	1dfb      	adds	r3, r7, #7
 8003d16:	781b      	ldrb	r3, [r3, #0]
}
 8003d18:	0018      	movs	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b002      	add	sp, #8
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40022000 	.word	0x40022000

08003d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d24:	b590      	push	{r4, r7, lr}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d2c:	230f      	movs	r3, #15
 8003d2e:	18fb      	adds	r3, r7, r3
 8003d30:	2200      	movs	r2, #0
 8003d32:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003d34:	4b1d      	ldr	r3, [pc, #116]	@ (8003dac <HAL_InitTick+0x88>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d02b      	beq.n	8003d94 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8003db0 <HAL_InitTick+0x8c>)
 8003d3e:	681c      	ldr	r4, [r3, #0]
 8003d40:	4b1a      	ldr	r3, [pc, #104]	@ (8003dac <HAL_InitTick+0x88>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	0019      	movs	r1, r3
 8003d46:	23fa      	movs	r3, #250	@ 0xfa
 8003d48:	0098      	lsls	r0, r3, #2
 8003d4a:	f7fc f9ef 	bl	800012c <__udivsi3>
 8003d4e:	0003      	movs	r3, r0
 8003d50:	0019      	movs	r1, r3
 8003d52:	0020      	movs	r0, r4
 8003d54:	f7fc f9ea 	bl	800012c <__udivsi3>
 8003d58:	0003      	movs	r3, r0
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f000 f953 	bl	8004006 <HAL_SYSTICK_Config>
 8003d60:	1e03      	subs	r3, r0, #0
 8003d62:	d112      	bne.n	8003d8a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b03      	cmp	r3, #3
 8003d68:	d80a      	bhi.n	8003d80 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	425b      	negs	r3, r3
 8003d70:	2200      	movs	r2, #0
 8003d72:	0018      	movs	r0, r3
 8003d74:	f000 f922 	bl	8003fbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d78:	4b0e      	ldr	r3, [pc, #56]	@ (8003db4 <HAL_InitTick+0x90>)
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	e00d      	b.n	8003d9c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003d80:	230f      	movs	r3, #15
 8003d82:	18fb      	adds	r3, r7, r3
 8003d84:	2201      	movs	r2, #1
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	e008      	b.n	8003d9c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003d8a:	230f      	movs	r3, #15
 8003d8c:	18fb      	adds	r3, r7, r3
 8003d8e:	2201      	movs	r2, #1
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	e003      	b.n	8003d9c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003d94:	230f      	movs	r3, #15
 8003d96:	18fb      	adds	r3, r7, r3
 8003d98:	2201      	movs	r2, #1
 8003d9a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003d9c:	230f      	movs	r3, #15
 8003d9e:	18fb      	adds	r3, r7, r3
 8003da0:	781b      	ldrb	r3, [r3, #0]
}
 8003da2:	0018      	movs	r0, r3
 8003da4:	46bd      	mov	sp, r7
 8003da6:	b005      	add	sp, #20
 8003da8:	bd90      	pop	{r4, r7, pc}
 8003daa:	46c0      	nop			@ (mov r8, r8)
 8003dac:	200004fc 	.word	0x200004fc
 8003db0:	200004f4 	.word	0x200004f4
 8003db4:	200004f8 	.word	0x200004f8

08003db8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003dbc:	4b05      	ldr	r3, [pc, #20]	@ (8003dd4 <HAL_IncTick+0x1c>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	001a      	movs	r2, r3
 8003dc2:	4b05      	ldr	r3, [pc, #20]	@ (8003dd8 <HAL_IncTick+0x20>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	18d2      	adds	r2, r2, r3
 8003dc8:	4b03      	ldr	r3, [pc, #12]	@ (8003dd8 <HAL_IncTick+0x20>)
 8003dca:	601a      	str	r2, [r3, #0]
}
 8003dcc:	46c0      	nop			@ (mov r8, r8)
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	46c0      	nop			@ (mov r8, r8)
 8003dd4:	200004fc 	.word	0x200004fc
 8003dd8:	20000920 	.word	0x20000920

08003ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  return uwTick;
 8003de0:	4b02      	ldr	r3, [pc, #8]	@ (8003dec <HAL_GetTick+0x10>)
 8003de2:	681b      	ldr	r3, [r3, #0]
}
 8003de4:	0018      	movs	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	46c0      	nop			@ (mov r8, r8)
 8003dec:	20000920 	.word	0x20000920

08003df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003df8:	f7ff fff0 	bl	8003ddc <HAL_GetTick>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	3301      	adds	r3, #1
 8003e08:	d005      	beq.n	8003e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e34 <HAL_Delay+0x44>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	001a      	movs	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	189b      	adds	r3, r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e16:	46c0      	nop			@ (mov r8, r8)
 8003e18:	f7ff ffe0 	bl	8003ddc <HAL_GetTick>
 8003e1c:	0002      	movs	r2, r0
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d8f7      	bhi.n	8003e18 <HAL_Delay+0x28>
  {
  }
}
 8003e28:	46c0      	nop			@ (mov r8, r8)
 8003e2a:	46c0      	nop			@ (mov r8, r8)
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b004      	add	sp, #16
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	46c0      	nop			@ (mov r8, r8)
 8003e34:	200004fc 	.word	0x200004fc

08003e38 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003e40:	4b06      	ldr	r3, [pc, #24]	@ (8003e5c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a06      	ldr	r2, [pc, #24]	@ (8003e60 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	0019      	movs	r1, r3
 8003e4a:	4b04      	ldr	r3, [pc, #16]	@ (8003e5c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	601a      	str	r2, [r3, #0]
}
 8003e52:	46c0      	nop			@ (mov r8, r8)
 8003e54:	46bd      	mov	sp, r7
 8003e56:	b002      	add	sp, #8
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	46c0      	nop			@ (mov r8, r8)
 8003e5c:	40010000 	.word	0x40010000
 8003e60:	fffff9ff 	.word	0xfffff9ff

08003e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	0002      	movs	r2, r0
 8003e6c:	1dfb      	adds	r3, r7, #7
 8003e6e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e70:	1dfb      	adds	r3, r7, #7
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e76:	d809      	bhi.n	8003e8c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e78:	1dfb      	adds	r3, r7, #7
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	001a      	movs	r2, r3
 8003e7e:	231f      	movs	r3, #31
 8003e80:	401a      	ands	r2, r3
 8003e82:	4b04      	ldr	r3, [pc, #16]	@ (8003e94 <__NVIC_EnableIRQ+0x30>)
 8003e84:	2101      	movs	r1, #1
 8003e86:	4091      	lsls	r1, r2
 8003e88:	000a      	movs	r2, r1
 8003e8a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003e8c:	46c0      	nop			@ (mov r8, r8)
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	b002      	add	sp, #8
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	e000e100 	.word	0xe000e100

08003e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e98:	b590      	push	{r4, r7, lr}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	0002      	movs	r2, r0
 8003ea0:	6039      	str	r1, [r7, #0]
 8003ea2:	1dfb      	adds	r3, r7, #7
 8003ea4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003ea6:	1dfb      	adds	r3, r7, #7
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	2b7f      	cmp	r3, #127	@ 0x7f
 8003eac:	d828      	bhi.n	8003f00 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003eae:	4a2f      	ldr	r2, [pc, #188]	@ (8003f6c <__NVIC_SetPriority+0xd4>)
 8003eb0:	1dfb      	adds	r3, r7, #7
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	b25b      	sxtb	r3, r3
 8003eb6:	089b      	lsrs	r3, r3, #2
 8003eb8:	33c0      	adds	r3, #192	@ 0xc0
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	589b      	ldr	r3, [r3, r2]
 8003ebe:	1dfa      	adds	r2, r7, #7
 8003ec0:	7812      	ldrb	r2, [r2, #0]
 8003ec2:	0011      	movs	r1, r2
 8003ec4:	2203      	movs	r2, #3
 8003ec6:	400a      	ands	r2, r1
 8003ec8:	00d2      	lsls	r2, r2, #3
 8003eca:	21ff      	movs	r1, #255	@ 0xff
 8003ecc:	4091      	lsls	r1, r2
 8003ece:	000a      	movs	r2, r1
 8003ed0:	43d2      	mvns	r2, r2
 8003ed2:	401a      	ands	r2, r3
 8003ed4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	019b      	lsls	r3, r3, #6
 8003eda:	22ff      	movs	r2, #255	@ 0xff
 8003edc:	401a      	ands	r2, r3
 8003ede:	1dfb      	adds	r3, r7, #7
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	4003      	ands	r3, r0
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003eec:	481f      	ldr	r0, [pc, #124]	@ (8003f6c <__NVIC_SetPriority+0xd4>)
 8003eee:	1dfb      	adds	r3, r7, #7
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	b25b      	sxtb	r3, r3
 8003ef4:	089b      	lsrs	r3, r3, #2
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	33c0      	adds	r3, #192	@ 0xc0
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003efe:	e031      	b.n	8003f64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f00:	4a1b      	ldr	r2, [pc, #108]	@ (8003f70 <__NVIC_SetPriority+0xd8>)
 8003f02:	1dfb      	adds	r3, r7, #7
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	0019      	movs	r1, r3
 8003f08:	230f      	movs	r3, #15
 8003f0a:	400b      	ands	r3, r1
 8003f0c:	3b08      	subs	r3, #8
 8003f0e:	089b      	lsrs	r3, r3, #2
 8003f10:	3306      	adds	r3, #6
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	18d3      	adds	r3, r2, r3
 8003f16:	3304      	adds	r3, #4
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	1dfa      	adds	r2, r7, #7
 8003f1c:	7812      	ldrb	r2, [r2, #0]
 8003f1e:	0011      	movs	r1, r2
 8003f20:	2203      	movs	r2, #3
 8003f22:	400a      	ands	r2, r1
 8003f24:	00d2      	lsls	r2, r2, #3
 8003f26:	21ff      	movs	r1, #255	@ 0xff
 8003f28:	4091      	lsls	r1, r2
 8003f2a:	000a      	movs	r2, r1
 8003f2c:	43d2      	mvns	r2, r2
 8003f2e:	401a      	ands	r2, r3
 8003f30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	019b      	lsls	r3, r3, #6
 8003f36:	22ff      	movs	r2, #255	@ 0xff
 8003f38:	401a      	ands	r2, r3
 8003f3a:	1dfb      	adds	r3, r7, #7
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	0018      	movs	r0, r3
 8003f40:	2303      	movs	r3, #3
 8003f42:	4003      	ands	r3, r0
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f48:	4809      	ldr	r0, [pc, #36]	@ (8003f70 <__NVIC_SetPriority+0xd8>)
 8003f4a:	1dfb      	adds	r3, r7, #7
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	001c      	movs	r4, r3
 8003f50:	230f      	movs	r3, #15
 8003f52:	4023      	ands	r3, r4
 8003f54:	3b08      	subs	r3, #8
 8003f56:	089b      	lsrs	r3, r3, #2
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	3306      	adds	r3, #6
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	18c3      	adds	r3, r0, r3
 8003f60:	3304      	adds	r3, #4
 8003f62:	601a      	str	r2, [r3, #0]
}
 8003f64:	46c0      	nop			@ (mov r8, r8)
 8003f66:	46bd      	mov	sp, r7
 8003f68:	b003      	add	sp, #12
 8003f6a:	bd90      	pop	{r4, r7, pc}
 8003f6c:	e000e100 	.word	0xe000e100
 8003f70:	e000ed00 	.word	0xe000ed00

08003f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	1e5a      	subs	r2, r3, #1
 8003f80:	2380      	movs	r3, #128	@ 0x80
 8003f82:	045b      	lsls	r3, r3, #17
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d301      	bcc.n	8003f8c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e010      	b.n	8003fae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb8 <SysTick_Config+0x44>)
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	3a01      	subs	r2, #1
 8003f92:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f94:	2301      	movs	r3, #1
 8003f96:	425b      	negs	r3, r3
 8003f98:	2103      	movs	r1, #3
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f7ff ff7c 	bl	8003e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fa0:	4b05      	ldr	r3, [pc, #20]	@ (8003fb8 <SysTick_Config+0x44>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fa6:	4b04      	ldr	r3, [pc, #16]	@ (8003fb8 <SysTick_Config+0x44>)
 8003fa8:	2207      	movs	r2, #7
 8003faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	0018      	movs	r0, r3
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	b002      	add	sp, #8
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	46c0      	nop			@ (mov r8, r8)
 8003fb8:	e000e010 	.word	0xe000e010

08003fbc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	607a      	str	r2, [r7, #4]
 8003fc6:	210f      	movs	r1, #15
 8003fc8:	187b      	adds	r3, r7, r1
 8003fca:	1c02      	adds	r2, r0, #0
 8003fcc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	187b      	adds	r3, r7, r1
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	b25b      	sxtb	r3, r3
 8003fd6:	0011      	movs	r1, r2
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f7ff ff5d 	bl	8003e98 <__NVIC_SetPriority>
}
 8003fde:	46c0      	nop			@ (mov r8, r8)
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	b004      	add	sp, #16
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b082      	sub	sp, #8
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	0002      	movs	r2, r0
 8003fee:	1dfb      	adds	r3, r7, #7
 8003ff0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ff2:	1dfb      	adds	r3, r7, #7
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	b25b      	sxtb	r3, r3
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f7ff ff33 	bl	8003e64 <__NVIC_EnableIRQ>
}
 8003ffe:	46c0      	nop			@ (mov r8, r8)
 8004000:	46bd      	mov	sp, r7
 8004002:	b002      	add	sp, #8
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b082      	sub	sp, #8
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	0018      	movs	r0, r3
 8004012:	f7ff ffaf 	bl	8003f74 <SysTick_Config>
 8004016:	0003      	movs	r3, r0
}
 8004018:	0018      	movs	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	b002      	add	sp, #8
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800402a:	2300      	movs	r3, #0
 800402c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800402e:	e14d      	b.n	80042cc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2101      	movs	r1, #1
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	4091      	lsls	r1, r2
 800403a:	000a      	movs	r2, r1
 800403c:	4013      	ands	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d100      	bne.n	8004048 <HAL_GPIO_Init+0x28>
 8004046:	e13e      	b.n	80042c6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2203      	movs	r2, #3
 800404e:	4013      	ands	r3, r2
 8004050:	2b01      	cmp	r3, #1
 8004052:	d005      	beq.n	8004060 <HAL_GPIO_Init+0x40>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2203      	movs	r2, #3
 800405a:	4013      	ands	r3, r2
 800405c:	2b02      	cmp	r3, #2
 800405e:	d130      	bne.n	80040c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	2203      	movs	r2, #3
 800406c:	409a      	lsls	r2, r3
 800406e:	0013      	movs	r3, r2
 8004070:	43da      	mvns	r2, r3
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	4013      	ands	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	409a      	lsls	r2, r3
 8004082:	0013      	movs	r3, r2
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004096:	2201      	movs	r2, #1
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	409a      	lsls	r2, r3
 800409c:	0013      	movs	r3, r2
 800409e:	43da      	mvns	r2, r3
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	4013      	ands	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	091b      	lsrs	r3, r3, #4
 80040ac:	2201      	movs	r2, #1
 80040ae:	401a      	ands	r2, r3
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	409a      	lsls	r2, r3
 80040b4:	0013      	movs	r3, r2
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2203      	movs	r2, #3
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d017      	beq.n	80040fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	2203      	movs	r2, #3
 80040da:	409a      	lsls	r2, r3
 80040dc:	0013      	movs	r3, r2
 80040de:	43da      	mvns	r2, r3
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4013      	ands	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	409a      	lsls	r2, r3
 80040f0:	0013      	movs	r3, r2
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2203      	movs	r2, #3
 8004104:	4013      	ands	r3, r2
 8004106:	2b02      	cmp	r3, #2
 8004108:	d123      	bne.n	8004152 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	08da      	lsrs	r2, r3, #3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3208      	adds	r2, #8
 8004112:	0092      	lsls	r2, r2, #2
 8004114:	58d3      	ldr	r3, [r2, r3]
 8004116:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	2207      	movs	r2, #7
 800411c:	4013      	ands	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	220f      	movs	r2, #15
 8004122:	409a      	lsls	r2, r3
 8004124:	0013      	movs	r3, r2
 8004126:	43da      	mvns	r2, r3
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	4013      	ands	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	691a      	ldr	r2, [r3, #16]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2107      	movs	r1, #7
 8004136:	400b      	ands	r3, r1
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	409a      	lsls	r2, r3
 800413c:	0013      	movs	r3, r2
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	08da      	lsrs	r2, r3, #3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3208      	adds	r2, #8
 800414c:	0092      	lsls	r2, r2, #2
 800414e:	6939      	ldr	r1, [r7, #16]
 8004150:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	2203      	movs	r2, #3
 800415e:	409a      	lsls	r2, r3
 8004160:	0013      	movs	r3, r2
 8004162:	43da      	mvns	r2, r3
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4013      	ands	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2203      	movs	r2, #3
 8004170:	401a      	ands	r2, r3
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	409a      	lsls	r2, r3
 8004178:	0013      	movs	r3, r2
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	23c0      	movs	r3, #192	@ 0xc0
 800418c:	029b      	lsls	r3, r3, #10
 800418e:	4013      	ands	r3, r2
 8004190:	d100      	bne.n	8004194 <HAL_GPIO_Init+0x174>
 8004192:	e098      	b.n	80042c6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004194:	4a53      	ldr	r2, [pc, #332]	@ (80042e4 <HAL_GPIO_Init+0x2c4>)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	089b      	lsrs	r3, r3, #2
 800419a:	3318      	adds	r3, #24
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	589b      	ldr	r3, [r3, r2]
 80041a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2203      	movs	r2, #3
 80041a6:	4013      	ands	r3, r2
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	220f      	movs	r2, #15
 80041ac:	409a      	lsls	r2, r3
 80041ae:	0013      	movs	r3, r2
 80041b0:	43da      	mvns	r2, r3
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	4013      	ands	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	23a0      	movs	r3, #160	@ 0xa0
 80041bc:	05db      	lsls	r3, r3, #23
 80041be:	429a      	cmp	r2, r3
 80041c0:	d019      	beq.n	80041f6 <HAL_GPIO_Init+0x1d6>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a48      	ldr	r2, [pc, #288]	@ (80042e8 <HAL_GPIO_Init+0x2c8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d013      	beq.n	80041f2 <HAL_GPIO_Init+0x1d2>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a47      	ldr	r2, [pc, #284]	@ (80042ec <HAL_GPIO_Init+0x2cc>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00d      	beq.n	80041ee <HAL_GPIO_Init+0x1ce>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a46      	ldr	r2, [pc, #280]	@ (80042f0 <HAL_GPIO_Init+0x2d0>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d007      	beq.n	80041ea <HAL_GPIO_Init+0x1ca>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a45      	ldr	r2, [pc, #276]	@ (80042f4 <HAL_GPIO_Init+0x2d4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d101      	bne.n	80041e6 <HAL_GPIO_Init+0x1c6>
 80041e2:	2304      	movs	r3, #4
 80041e4:	e008      	b.n	80041f8 <HAL_GPIO_Init+0x1d8>
 80041e6:	2305      	movs	r3, #5
 80041e8:	e006      	b.n	80041f8 <HAL_GPIO_Init+0x1d8>
 80041ea:	2303      	movs	r3, #3
 80041ec:	e004      	b.n	80041f8 <HAL_GPIO_Init+0x1d8>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e002      	b.n	80041f8 <HAL_GPIO_Init+0x1d8>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <HAL_GPIO_Init+0x1d8>
 80041f6:	2300      	movs	r3, #0
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	2103      	movs	r1, #3
 80041fc:	400a      	ands	r2, r1
 80041fe:	00d2      	lsls	r2, r2, #3
 8004200:	4093      	lsls	r3, r2
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004208:	4936      	ldr	r1, [pc, #216]	@ (80042e4 <HAL_GPIO_Init+0x2c4>)
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	089b      	lsrs	r3, r3, #2
 800420e:	3318      	adds	r3, #24
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004216:	4b33      	ldr	r3, [pc, #204]	@ (80042e4 <HAL_GPIO_Init+0x2c4>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	43da      	mvns	r2, r3
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4013      	ands	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	2380      	movs	r3, #128	@ 0x80
 800422c:	035b      	lsls	r3, r3, #13
 800422e:	4013      	ands	r3, r2
 8004230:	d003      	beq.n	800423a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4313      	orrs	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800423a:	4b2a      	ldr	r3, [pc, #168]	@ (80042e4 <HAL_GPIO_Init+0x2c4>)
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004240:	4b28      	ldr	r3, [pc, #160]	@ (80042e4 <HAL_GPIO_Init+0x2c4>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	43da      	mvns	r2, r3
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	4013      	ands	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	2380      	movs	r3, #128	@ 0x80
 8004256:	039b      	lsls	r3, r3, #14
 8004258:	4013      	ands	r3, r2
 800425a:	d003      	beq.n	8004264 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004264:	4b1f      	ldr	r3, [pc, #124]	@ (80042e4 <HAL_GPIO_Init+0x2c4>)
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800426a:	4a1e      	ldr	r2, [pc, #120]	@ (80042e4 <HAL_GPIO_Init+0x2c4>)
 800426c:	2384      	movs	r3, #132	@ 0x84
 800426e:	58d3      	ldr	r3, [r2, r3]
 8004270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	43da      	mvns	r2, r3
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	4013      	ands	r3, r2
 800427a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	2380      	movs	r3, #128	@ 0x80
 8004282:	029b      	lsls	r3, r3, #10
 8004284:	4013      	ands	r3, r2
 8004286:	d003      	beq.n	8004290 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004290:	4914      	ldr	r1, [pc, #80]	@ (80042e4 <HAL_GPIO_Init+0x2c4>)
 8004292:	2284      	movs	r2, #132	@ 0x84
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004298:	4a12      	ldr	r2, [pc, #72]	@ (80042e4 <HAL_GPIO_Init+0x2c4>)
 800429a:	2380      	movs	r3, #128	@ 0x80
 800429c:	58d3      	ldr	r3, [r2, r3]
 800429e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	43da      	mvns	r2, r3
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	4013      	ands	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	2380      	movs	r3, #128	@ 0x80
 80042b0:	025b      	lsls	r3, r3, #9
 80042b2:	4013      	ands	r3, r2
 80042b4:	d003      	beq.n	80042be <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80042be:	4909      	ldr	r1, [pc, #36]	@ (80042e4 <HAL_GPIO_Init+0x2c4>)
 80042c0:	2280      	movs	r2, #128	@ 0x80
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	3301      	adds	r3, #1
 80042ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	40da      	lsrs	r2, r3
 80042d4:	1e13      	subs	r3, r2, #0
 80042d6:	d000      	beq.n	80042da <HAL_GPIO_Init+0x2ba>
 80042d8:	e6aa      	b.n	8004030 <HAL_GPIO_Init+0x10>
  }
}
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	46c0      	nop			@ (mov r8, r8)
 80042de:	46bd      	mov	sp, r7
 80042e0:	b006      	add	sp, #24
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40021800 	.word	0x40021800
 80042e8:	50000400 	.word	0x50000400
 80042ec:	50000800 	.word	0x50000800
 80042f0:	50000c00 	.word	0x50000c00
 80042f4:	50001000 	.word	0x50001000

080042f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	000a      	movs	r2, r1
 8004302:	1cbb      	adds	r3, r7, #2
 8004304:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	1cba      	adds	r2, r7, #2
 800430c:	8812      	ldrh	r2, [r2, #0]
 800430e:	4013      	ands	r3, r2
 8004310:	d004      	beq.n	800431c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004312:	230f      	movs	r3, #15
 8004314:	18fb      	adds	r3, r7, r3
 8004316:	2201      	movs	r2, #1
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	e003      	b.n	8004324 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800431c:	230f      	movs	r3, #15
 800431e:	18fb      	adds	r3, r7, r3
 8004320:	2200      	movs	r2, #0
 8004322:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004324:	230f      	movs	r3, #15
 8004326:	18fb      	adds	r3, r7, r3
 8004328:	781b      	ldrb	r3, [r3, #0]
}
 800432a:	0018      	movs	r0, r3
 800432c:	46bd      	mov	sp, r7
 800432e:	b004      	add	sp, #16
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	0008      	movs	r0, r1
 800433c:	0011      	movs	r1, r2
 800433e:	1cbb      	adds	r3, r7, #2
 8004340:	1c02      	adds	r2, r0, #0
 8004342:	801a      	strh	r2, [r3, #0]
 8004344:	1c7b      	adds	r3, r7, #1
 8004346:	1c0a      	adds	r2, r1, #0
 8004348:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800434a:	1c7b      	adds	r3, r7, #1
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d004      	beq.n	800435c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004352:	1cbb      	adds	r3, r7, #2
 8004354:	881a      	ldrh	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800435a:	e003      	b.n	8004364 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800435c:	1cbb      	adds	r3, r7, #2
 800435e:	881a      	ldrh	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004364:	46c0      	nop			@ (mov r8, r8)
 8004366:	46bd      	mov	sp, r7
 8004368:	b002      	add	sp, #8
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e08f      	b.n	800449e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2241      	movs	r2, #65	@ 0x41
 8004382:	5c9b      	ldrb	r3, [r3, r2]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d107      	bne.n	800439a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2240      	movs	r2, #64	@ 0x40
 800438e:	2100      	movs	r1, #0
 8004390:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	0018      	movs	r0, r3
 8004396:	f7ff f9f9 	bl	800378c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2241      	movs	r2, #65	@ 0x41
 800439e:	2124      	movs	r1, #36	@ 0x24
 80043a0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2101      	movs	r1, #1
 80043ae:	438a      	bics	r2, r1
 80043b0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	493b      	ldr	r1, [pc, #236]	@ (80044a8 <HAL_I2C_Init+0x13c>)
 80043bc:	400a      	ands	r2, r1
 80043be:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4938      	ldr	r1, [pc, #224]	@ (80044ac <HAL_I2C_Init+0x140>)
 80043cc:	400a      	ands	r2, r1
 80043ce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d108      	bne.n	80043ea <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2180      	movs	r1, #128	@ 0x80
 80043e2:	0209      	lsls	r1, r1, #8
 80043e4:	430a      	orrs	r2, r1
 80043e6:	609a      	str	r2, [r3, #8]
 80043e8:	e007      	b.n	80043fa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2184      	movs	r1, #132	@ 0x84
 80043f4:	0209      	lsls	r1, r1, #8
 80043f6:	430a      	orrs	r2, r1
 80043f8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d109      	bne.n	8004416 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2180      	movs	r1, #128	@ 0x80
 800440e:	0109      	lsls	r1, r1, #4
 8004410:	430a      	orrs	r2, r1
 8004412:	605a      	str	r2, [r3, #4]
 8004414:	e007      	b.n	8004426 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4923      	ldr	r1, [pc, #140]	@ (80044b0 <HAL_I2C_Init+0x144>)
 8004422:	400a      	ands	r2, r1
 8004424:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4920      	ldr	r1, [pc, #128]	@ (80044b4 <HAL_I2C_Init+0x148>)
 8004432:	430a      	orrs	r2, r1
 8004434:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	491a      	ldr	r1, [pc, #104]	@ (80044ac <HAL_I2C_Init+0x140>)
 8004442:	400a      	ands	r2, r1
 8004444:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691a      	ldr	r2, [r3, #16]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	431a      	orrs	r2, r3
 8004450:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69d9      	ldr	r1, [r3, #28]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1a      	ldr	r2, [r3, #32]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2101      	movs	r1, #1
 800447c:	430a      	orrs	r2, r1
 800447e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2241      	movs	r2, #65	@ 0x41
 800448a:	2120      	movs	r1, #32
 800448c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2242      	movs	r2, #66	@ 0x42
 8004498:	2100      	movs	r1, #0
 800449a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	0018      	movs	r0, r3
 80044a0:	46bd      	mov	sp, r7
 80044a2:	b002      	add	sp, #8
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	46c0      	nop			@ (mov r8, r8)
 80044a8:	f0ffffff 	.word	0xf0ffffff
 80044ac:	ffff7fff 	.word	0xffff7fff
 80044b0:	fffff7ff 	.word	0xfffff7ff
 80044b4:	02008000 	.word	0x02008000

080044b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80044b8:	b590      	push	{r4, r7, lr}
 80044ba:	b089      	sub	sp, #36	@ 0x24
 80044bc:	af02      	add	r7, sp, #8
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	0008      	movs	r0, r1
 80044c2:	607a      	str	r2, [r7, #4]
 80044c4:	0019      	movs	r1, r3
 80044c6:	230a      	movs	r3, #10
 80044c8:	18fb      	adds	r3, r7, r3
 80044ca:	1c02      	adds	r2, r0, #0
 80044cc:	801a      	strh	r2, [r3, #0]
 80044ce:	2308      	movs	r3, #8
 80044d0:	18fb      	adds	r3, r7, r3
 80044d2:	1c0a      	adds	r2, r1, #0
 80044d4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2241      	movs	r2, #65	@ 0x41
 80044da:	5c9b      	ldrb	r3, [r3, r2]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b20      	cmp	r3, #32
 80044e0:	d000      	beq.n	80044e4 <HAL_I2C_Master_Transmit+0x2c>
 80044e2:	e10a      	b.n	80046fa <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2240      	movs	r2, #64	@ 0x40
 80044e8:	5c9b      	ldrb	r3, [r3, r2]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d101      	bne.n	80044f2 <HAL_I2C_Master_Transmit+0x3a>
 80044ee:	2302      	movs	r3, #2
 80044f0:	e104      	b.n	80046fc <HAL_I2C_Master_Transmit+0x244>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2240      	movs	r2, #64	@ 0x40
 80044f6:	2101      	movs	r1, #1
 80044f8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044fa:	f7ff fc6f 	bl	8003ddc <HAL_GetTick>
 80044fe:	0003      	movs	r3, r0
 8004500:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004502:	2380      	movs	r3, #128	@ 0x80
 8004504:	0219      	lsls	r1, r3, #8
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	2319      	movs	r3, #25
 800450e:	2201      	movs	r2, #1
 8004510:	f000 fa26 	bl	8004960 <I2C_WaitOnFlagUntilTimeout>
 8004514:	1e03      	subs	r3, r0, #0
 8004516:	d001      	beq.n	800451c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e0ef      	b.n	80046fc <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2241      	movs	r2, #65	@ 0x41
 8004520:	2121      	movs	r1, #33	@ 0x21
 8004522:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2242      	movs	r2, #66	@ 0x42
 8004528:	2110      	movs	r1, #16
 800452a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2208      	movs	r2, #8
 800453c:	18ba      	adds	r2, r7, r2
 800453e:	8812      	ldrh	r2, [r2, #0]
 8004540:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800454c:	b29b      	uxth	r3, r3
 800454e:	2bff      	cmp	r3, #255	@ 0xff
 8004550:	d906      	bls.n	8004560 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	22ff      	movs	r2, #255	@ 0xff
 8004556:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004558:	2380      	movs	r3, #128	@ 0x80
 800455a:	045b      	lsls	r3, r3, #17
 800455c:	617b      	str	r3, [r7, #20]
 800455e:	e007      	b.n	8004570 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004564:	b29a      	uxth	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800456a:	2380      	movs	r3, #128	@ 0x80
 800456c:	049b      	lsls	r3, r3, #18
 800456e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004574:	2b00      	cmp	r3, #0
 8004576:	d027      	beq.n	80045c8 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457c:	781a      	ldrb	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004592:	b29b      	uxth	r3, r3
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	3301      	adds	r3, #1
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	697c      	ldr	r4, [r7, #20]
 80045b4:	230a      	movs	r3, #10
 80045b6:	18fb      	adds	r3, r7, r3
 80045b8:	8819      	ldrh	r1, [r3, #0]
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	4b51      	ldr	r3, [pc, #324]	@ (8004704 <HAL_I2C_Master_Transmit+0x24c>)
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	0023      	movs	r3, r4
 80045c2:	f000 fc45 	bl	8004e50 <I2C_TransferConfig>
 80045c6:	e06f      	b.n	80046a8 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	697c      	ldr	r4, [r7, #20]
 80045d0:	230a      	movs	r3, #10
 80045d2:	18fb      	adds	r3, r7, r3
 80045d4:	8819      	ldrh	r1, [r3, #0]
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	4b4a      	ldr	r3, [pc, #296]	@ (8004704 <HAL_I2C_Master_Transmit+0x24c>)
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	0023      	movs	r3, r4
 80045de:	f000 fc37 	bl	8004e50 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80045e2:	e061      	b.n	80046a8 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	0018      	movs	r0, r3
 80045ec:	f000 fa10 	bl	8004a10 <I2C_WaitOnTXISFlagUntilTimeout>
 80045f0:	1e03      	subs	r3, r0, #0
 80045f2:	d001      	beq.n	80045f8 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e081      	b.n	80046fc <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fc:	781a      	ldrb	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004612:	b29b      	uxth	r3, r3
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004620:	3b01      	subs	r3, #1
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d03a      	beq.n	80046a8 <HAL_I2C_Master_Transmit+0x1f0>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004636:	2b00      	cmp	r3, #0
 8004638:	d136      	bne.n	80046a8 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800463a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	0013      	movs	r3, r2
 8004644:	2200      	movs	r2, #0
 8004646:	2180      	movs	r1, #128	@ 0x80
 8004648:	f000 f98a 	bl	8004960 <I2C_WaitOnFlagUntilTimeout>
 800464c:	1e03      	subs	r3, r0, #0
 800464e:	d001      	beq.n	8004654 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e053      	b.n	80046fc <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	2bff      	cmp	r3, #255	@ 0xff
 800465c:	d911      	bls.n	8004682 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	22ff      	movs	r2, #255	@ 0xff
 8004662:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004668:	b2da      	uxtb	r2, r3
 800466a:	2380      	movs	r3, #128	@ 0x80
 800466c:	045c      	lsls	r4, r3, #17
 800466e:	230a      	movs	r3, #10
 8004670:	18fb      	adds	r3, r7, r3
 8004672:	8819      	ldrh	r1, [r3, #0]
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	2300      	movs	r3, #0
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	0023      	movs	r3, r4
 800467c:	f000 fbe8 	bl	8004e50 <I2C_TransferConfig>
 8004680:	e012      	b.n	80046a8 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004690:	b2da      	uxtb	r2, r3
 8004692:	2380      	movs	r3, #128	@ 0x80
 8004694:	049c      	lsls	r4, r3, #18
 8004696:	230a      	movs	r3, #10
 8004698:	18fb      	adds	r3, r7, r3
 800469a:	8819      	ldrh	r1, [r3, #0]
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	2300      	movs	r3, #0
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	0023      	movs	r3, r4
 80046a4:	f000 fbd4 	bl	8004e50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d198      	bne.n	80045e4 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	0018      	movs	r0, r3
 80046ba:	f000 f9ef 	bl	8004a9c <I2C_WaitOnSTOPFlagUntilTimeout>
 80046be:	1e03      	subs	r3, r0, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e01a      	b.n	80046fc <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2220      	movs	r2, #32
 80046cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	490b      	ldr	r1, [pc, #44]	@ (8004708 <HAL_I2C_Master_Transmit+0x250>)
 80046da:	400a      	ands	r2, r1
 80046dc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2241      	movs	r2, #65	@ 0x41
 80046e2:	2120      	movs	r1, #32
 80046e4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2242      	movs	r2, #66	@ 0x42
 80046ea:	2100      	movs	r1, #0
 80046ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2240      	movs	r2, #64	@ 0x40
 80046f2:	2100      	movs	r1, #0
 80046f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	e000      	b.n	80046fc <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80046fa:	2302      	movs	r3, #2
  }
}
 80046fc:	0018      	movs	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	b007      	add	sp, #28
 8004702:	bd90      	pop	{r4, r7, pc}
 8004704:	80002000 	.word	0x80002000
 8004708:	fe00e800 	.word	0xfe00e800

0800470c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800470c:	b590      	push	{r4, r7, lr}
 800470e:	b089      	sub	sp, #36	@ 0x24
 8004710:	af02      	add	r7, sp, #8
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	0008      	movs	r0, r1
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	0019      	movs	r1, r3
 800471a:	230a      	movs	r3, #10
 800471c:	18fb      	adds	r3, r7, r3
 800471e:	1c02      	adds	r2, r0, #0
 8004720:	801a      	strh	r2, [r3, #0]
 8004722:	2308      	movs	r3, #8
 8004724:	18fb      	adds	r3, r7, r3
 8004726:	1c0a      	adds	r2, r1, #0
 8004728:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2241      	movs	r2, #65	@ 0x41
 800472e:	5c9b      	ldrb	r3, [r3, r2]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b20      	cmp	r3, #32
 8004734:	d000      	beq.n	8004738 <HAL_I2C_Master_Receive+0x2c>
 8004736:	e0e8      	b.n	800490a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2240      	movs	r2, #64	@ 0x40
 800473c:	5c9b      	ldrb	r3, [r3, r2]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <HAL_I2C_Master_Receive+0x3a>
 8004742:	2302      	movs	r3, #2
 8004744:	e0e2      	b.n	800490c <HAL_I2C_Master_Receive+0x200>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2240      	movs	r2, #64	@ 0x40
 800474a:	2101      	movs	r1, #1
 800474c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800474e:	f7ff fb45 	bl	8003ddc <HAL_GetTick>
 8004752:	0003      	movs	r3, r0
 8004754:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004756:	2380      	movs	r3, #128	@ 0x80
 8004758:	0219      	lsls	r1, r3, #8
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	2319      	movs	r3, #25
 8004762:	2201      	movs	r2, #1
 8004764:	f000 f8fc 	bl	8004960 <I2C_WaitOnFlagUntilTimeout>
 8004768:	1e03      	subs	r3, r0, #0
 800476a:	d001      	beq.n	8004770 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e0cd      	b.n	800490c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2241      	movs	r2, #65	@ 0x41
 8004774:	2122      	movs	r1, #34	@ 0x22
 8004776:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2242      	movs	r2, #66	@ 0x42
 800477c:	2110      	movs	r1, #16
 800477e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2208      	movs	r2, #8
 8004790:	18ba      	adds	r2, r7, r2
 8004792:	8812      	ldrh	r2, [r2, #0]
 8004794:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2bff      	cmp	r3, #255	@ 0xff
 80047a4:	d911      	bls.n	80047ca <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	22ff      	movs	r2, #255	@ 0xff
 80047aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	2380      	movs	r3, #128	@ 0x80
 80047b4:	045c      	lsls	r4, r3, #17
 80047b6:	230a      	movs	r3, #10
 80047b8:	18fb      	adds	r3, r7, r3
 80047ba:	8819      	ldrh	r1, [r3, #0]
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	4b55      	ldr	r3, [pc, #340]	@ (8004914 <HAL_I2C_Master_Receive+0x208>)
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	0023      	movs	r3, r4
 80047c4:	f000 fb44 	bl	8004e50 <I2C_TransferConfig>
 80047c8:	e076      	b.n	80048b8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	2380      	movs	r3, #128	@ 0x80
 80047dc:	049c      	lsls	r4, r3, #18
 80047de:	230a      	movs	r3, #10
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	8819      	ldrh	r1, [r3, #0]
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004914 <HAL_I2C_Master_Receive+0x208>)
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	0023      	movs	r3, r4
 80047ec:	f000 fb30 	bl	8004e50 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80047f0:	e062      	b.n	80048b8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	0018      	movs	r0, r3
 80047fa:	f000 f993 	bl	8004b24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047fe:	1e03      	subs	r3, r0, #0
 8004800:	d001      	beq.n	8004806 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e082      	b.n	800490c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004810:	b2d2      	uxtb	r2, r2
 8004812:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004822:	3b01      	subs	r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800483c:	b29b      	uxth	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d03a      	beq.n	80048b8 <HAL_I2C_Master_Receive+0x1ac>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004846:	2b00      	cmp	r3, #0
 8004848:	d136      	bne.n	80048b8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800484a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	0013      	movs	r3, r2
 8004854:	2200      	movs	r2, #0
 8004856:	2180      	movs	r1, #128	@ 0x80
 8004858:	f000 f882 	bl	8004960 <I2C_WaitOnFlagUntilTimeout>
 800485c:	1e03      	subs	r3, r0, #0
 800485e:	d001      	beq.n	8004864 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e053      	b.n	800490c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004868:	b29b      	uxth	r3, r3
 800486a:	2bff      	cmp	r3, #255	@ 0xff
 800486c:	d911      	bls.n	8004892 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	22ff      	movs	r2, #255	@ 0xff
 8004872:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004878:	b2da      	uxtb	r2, r3
 800487a:	2380      	movs	r3, #128	@ 0x80
 800487c:	045c      	lsls	r4, r3, #17
 800487e:	230a      	movs	r3, #10
 8004880:	18fb      	adds	r3, r7, r3
 8004882:	8819      	ldrh	r1, [r3, #0]
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	2300      	movs	r3, #0
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	0023      	movs	r3, r4
 800488c:	f000 fae0 	bl	8004e50 <I2C_TransferConfig>
 8004890:	e012      	b.n	80048b8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	2380      	movs	r3, #128	@ 0x80
 80048a4:	049c      	lsls	r4, r3, #18
 80048a6:	230a      	movs	r3, #10
 80048a8:	18fb      	adds	r3, r7, r3
 80048aa:	8819      	ldrh	r1, [r3, #0]
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	2300      	movs	r3, #0
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	0023      	movs	r3, r4
 80048b4:	f000 facc 	bl	8004e50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d197      	bne.n	80047f2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	0018      	movs	r0, r3
 80048ca:	f000 f8e7 	bl	8004a9c <I2C_WaitOnSTOPFlagUntilTimeout>
 80048ce:	1e03      	subs	r3, r0, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e01a      	b.n	800490c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2220      	movs	r2, #32
 80048dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	490b      	ldr	r1, [pc, #44]	@ (8004918 <HAL_I2C_Master_Receive+0x20c>)
 80048ea:	400a      	ands	r2, r1
 80048ec:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2241      	movs	r2, #65	@ 0x41
 80048f2:	2120      	movs	r1, #32
 80048f4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2242      	movs	r2, #66	@ 0x42
 80048fa:	2100      	movs	r1, #0
 80048fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2240      	movs	r2, #64	@ 0x40
 8004902:	2100      	movs	r1, #0
 8004904:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	e000      	b.n	800490c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800490a:	2302      	movs	r3, #2
  }
}
 800490c:	0018      	movs	r0, r3
 800490e:	46bd      	mov	sp, r7
 8004910:	b007      	add	sp, #28
 8004912:	bd90      	pop	{r4, r7, pc}
 8004914:	80002400 	.word	0x80002400
 8004918:	fe00e800 	.word	0xfe00e800

0800491c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	2202      	movs	r2, #2
 800492c:	4013      	ands	r3, r2
 800492e:	2b02      	cmp	r3, #2
 8004930:	d103      	bne.n	800493a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2200      	movs	r2, #0
 8004938:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	2201      	movs	r2, #1
 8004942:	4013      	ands	r3, r2
 8004944:	2b01      	cmp	r3, #1
 8004946:	d007      	beq.n	8004958 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699a      	ldr	r2, [r3, #24]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2101      	movs	r1, #1
 8004954:	430a      	orrs	r2, r1
 8004956:	619a      	str	r2, [r3, #24]
  }
}
 8004958:	46c0      	nop			@ (mov r8, r8)
 800495a:	46bd      	mov	sp, r7
 800495c:	b002      	add	sp, #8
 800495e:	bd80      	pop	{r7, pc}

08004960 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	603b      	str	r3, [r7, #0]
 800496c:	1dfb      	adds	r3, r7, #7
 800496e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004970:	e03a      	b.n	80049e8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	6839      	ldr	r1, [r7, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	0018      	movs	r0, r3
 800497a:	f000 f971 	bl	8004c60 <I2C_IsErrorOccurred>
 800497e:	1e03      	subs	r3, r0, #0
 8004980:	d001      	beq.n	8004986 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e040      	b.n	8004a08 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	3301      	adds	r3, #1
 800498a:	d02d      	beq.n	80049e8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800498c:	f7ff fa26 	bl	8003ddc <HAL_GetTick>
 8004990:	0002      	movs	r2, r0
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d302      	bcc.n	80049a2 <I2C_WaitOnFlagUntilTimeout+0x42>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d122      	bne.n	80049e8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	4013      	ands	r3, r2
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	425a      	negs	r2, r3
 80049b2:	4153      	adcs	r3, r2
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	001a      	movs	r2, r3
 80049b8:	1dfb      	adds	r3, r7, #7
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d113      	bne.n	80049e8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c4:	2220      	movs	r2, #32
 80049c6:	431a      	orrs	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2241      	movs	r2, #65	@ 0x41
 80049d0:	2120      	movs	r1, #32
 80049d2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2242      	movs	r2, #66	@ 0x42
 80049d8:	2100      	movs	r1, #0
 80049da:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2240      	movs	r2, #64	@ 0x40
 80049e0:	2100      	movs	r1, #0
 80049e2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e00f      	b.n	8004a08 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	4013      	ands	r3, r2
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	425a      	negs	r2, r3
 80049f8:	4153      	adcs	r3, r2
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	001a      	movs	r2, r3
 80049fe:	1dfb      	adds	r3, r7, #7
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d0b5      	beq.n	8004972 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	0018      	movs	r0, r3
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	b004      	add	sp, #16
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a1c:	e032      	b.n	8004a84 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	68b9      	ldr	r1, [r7, #8]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	0018      	movs	r0, r3
 8004a26:	f000 f91b 	bl	8004c60 <I2C_IsErrorOccurred>
 8004a2a:	1e03      	subs	r3, r0, #0
 8004a2c:	d001      	beq.n	8004a32 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e030      	b.n	8004a94 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	3301      	adds	r3, #1
 8004a36:	d025      	beq.n	8004a84 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a38:	f7ff f9d0 	bl	8003ddc <HAL_GetTick>
 8004a3c:	0002      	movs	r2, r0
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d302      	bcc.n	8004a4e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d11a      	bne.n	8004a84 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	2202      	movs	r2, #2
 8004a56:	4013      	ands	r3, r2
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d013      	beq.n	8004a84 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a60:	2220      	movs	r2, #32
 8004a62:	431a      	orrs	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2241      	movs	r2, #65	@ 0x41
 8004a6c:	2120      	movs	r1, #32
 8004a6e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2242      	movs	r2, #66	@ 0x42
 8004a74:	2100      	movs	r1, #0
 8004a76:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2240      	movs	r2, #64	@ 0x40
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e007      	b.n	8004a94 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d1c5      	bne.n	8004a1e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	0018      	movs	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b004      	add	sp, #16
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004aa8:	e02f      	b.n	8004b0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	68b9      	ldr	r1, [r7, #8]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f000 f8d5 	bl	8004c60 <I2C_IsErrorOccurred>
 8004ab6:	1e03      	subs	r3, r0, #0
 8004ab8:	d001      	beq.n	8004abe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e02d      	b.n	8004b1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004abe:	f7ff f98d 	bl	8003ddc <HAL_GetTick>
 8004ac2:	0002      	movs	r2, r0
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d302      	bcc.n	8004ad4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d11a      	bne.n	8004b0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	2220      	movs	r2, #32
 8004adc:	4013      	ands	r3, r2
 8004ade:	2b20      	cmp	r3, #32
 8004ae0:	d013      	beq.n	8004b0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2241      	movs	r2, #65	@ 0x41
 8004af2:	2120      	movs	r1, #32
 8004af4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2242      	movs	r2, #66	@ 0x42
 8004afa:	2100      	movs	r1, #0
 8004afc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2240      	movs	r2, #64	@ 0x40
 8004b02:	2100      	movs	r1, #0
 8004b04:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e007      	b.n	8004b1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	2220      	movs	r2, #32
 8004b12:	4013      	ands	r3, r2
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d1c8      	bne.n	8004aaa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	b004      	add	sp, #16
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b30:	2317      	movs	r3, #23
 8004b32:	18fb      	adds	r3, r7, r3
 8004b34:	2200      	movs	r2, #0
 8004b36:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004b38:	e07b      	b.n	8004c32 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	68b9      	ldr	r1, [r7, #8]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	0018      	movs	r0, r3
 8004b42:	f000 f88d 	bl	8004c60 <I2C_IsErrorOccurred>
 8004b46:	1e03      	subs	r3, r0, #0
 8004b48:	d003      	beq.n	8004b52 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8004b4a:	2317      	movs	r3, #23
 8004b4c:	18fb      	adds	r3, r7, r3
 8004b4e:	2201      	movs	r2, #1
 8004b50:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	2b20      	cmp	r3, #32
 8004b5e:	d140      	bne.n	8004be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8004b60:	2117      	movs	r1, #23
 8004b62:	187b      	adds	r3, r7, r1
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d13b      	bne.n	8004be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	2204      	movs	r2, #4
 8004b72:	4013      	ands	r3, r2
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d106      	bne.n	8004b86 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004b80:	187b      	adds	r3, r7, r1
 8004b82:	2200      	movs	r2, #0
 8004b84:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	2210      	movs	r2, #16
 8004b8e:	4013      	ands	r3, r2
 8004b90:	2b10      	cmp	r3, #16
 8004b92:	d123      	bne.n	8004bdc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2210      	movs	r2, #16
 8004b9a:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2204      	movs	r2, #4
 8004ba0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4929      	ldr	r1, [pc, #164]	@ (8004c5c <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8004bb6:	400a      	ands	r2, r1
 8004bb8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2241      	movs	r2, #65	@ 0x41
 8004bbe:	2120      	movs	r1, #32
 8004bc0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2242      	movs	r2, #66	@ 0x42
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2240      	movs	r2, #64	@ 0x40
 8004bce:	2100      	movs	r1, #0
 8004bd0:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004bd2:	2317      	movs	r3, #23
 8004bd4:	18fb      	adds	r3, r7, r3
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	701a      	strb	r2, [r3, #0]
 8004bda:	e002      	b.n	8004be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004be2:	f7ff f8fb 	bl	8003ddc <HAL_GetTick>
 8004be6:	0002      	movs	r2, r0
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d302      	bcc.n	8004bf8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d11c      	bne.n	8004c32 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8004bf8:	2017      	movs	r0, #23
 8004bfa:	183b      	adds	r3, r7, r0
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d117      	bne.n	8004c32 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	2204      	movs	r2, #4
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d010      	beq.n	8004c32 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c14:	2220      	movs	r2, #32
 8004c16:	431a      	orrs	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2241      	movs	r2, #65	@ 0x41
 8004c20:	2120      	movs	r1, #32
 8004c22:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2240      	movs	r2, #64	@ 0x40
 8004c28:	2100      	movs	r1, #0
 8004c2a:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004c2c:	183b      	adds	r3, r7, r0
 8004c2e:	2201      	movs	r2, #1
 8004c30:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	2204      	movs	r2, #4
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d005      	beq.n	8004c4c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004c40:	2317      	movs	r3, #23
 8004c42:	18fb      	adds	r3, r7, r3
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d100      	bne.n	8004c4c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004c4a:	e776      	b.n	8004b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8004c4c:	2317      	movs	r3, #23
 8004c4e:	18fb      	adds	r3, r7, r3
 8004c50:	781b      	ldrb	r3, [r3, #0]
}
 8004c52:	0018      	movs	r0, r3
 8004c54:	46bd      	mov	sp, r7
 8004c56:	b006      	add	sp, #24
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	46c0      	nop			@ (mov r8, r8)
 8004c5c:	fe00e800 	.word	0xfe00e800

08004c60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08a      	sub	sp, #40	@ 0x28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c6c:	2327      	movs	r3, #39	@ 0x27
 8004c6e:	18fb      	adds	r3, r7, r3
 8004c70:	2200      	movs	r2, #0
 8004c72:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	2210      	movs	r2, #16
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d100      	bne.n	8004c8e <I2C_IsErrorOccurred+0x2e>
 8004c8c:	e079      	b.n	8004d82 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2210      	movs	r2, #16
 8004c94:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c96:	e057      	b.n	8004d48 <I2C_IsErrorOccurred+0xe8>
 8004c98:	2227      	movs	r2, #39	@ 0x27
 8004c9a:	18bb      	adds	r3, r7, r2
 8004c9c:	18ba      	adds	r2, r7, r2
 8004c9e:	7812      	ldrb	r2, [r2, #0]
 8004ca0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	d04f      	beq.n	8004d48 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ca8:	f7ff f898 	bl	8003ddc <HAL_GetTick>
 8004cac:	0002      	movs	r2, r0
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d302      	bcc.n	8004cbe <I2C_IsErrorOccurred+0x5e>
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d144      	bne.n	8004d48 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	2380      	movs	r3, #128	@ 0x80
 8004cc6:	01db      	lsls	r3, r3, #7
 8004cc8:	4013      	ands	r3, r2
 8004cca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004ccc:	2013      	movs	r0, #19
 8004cce:	183b      	adds	r3, r7, r0
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	2142      	movs	r1, #66	@ 0x42
 8004cd4:	5c52      	ldrb	r2, [r2, r1]
 8004cd6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699a      	ldr	r2, [r3, #24]
 8004cde:	2380      	movs	r3, #128	@ 0x80
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	401a      	ands	r2, r3
 8004ce4:	2380      	movs	r3, #128	@ 0x80
 8004ce6:	021b      	lsls	r3, r3, #8
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d126      	bne.n	8004d3a <I2C_IsErrorOccurred+0xda>
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	2380      	movs	r3, #128	@ 0x80
 8004cf0:	01db      	lsls	r3, r3, #7
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d021      	beq.n	8004d3a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004cf6:	183b      	adds	r3, r7, r0
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	2b20      	cmp	r3, #32
 8004cfc:	d01d      	beq.n	8004d3a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2180      	movs	r1, #128	@ 0x80
 8004d0a:	01c9      	lsls	r1, r1, #7
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004d10:	f7ff f864 	bl	8003ddc <HAL_GetTick>
 8004d14:	0003      	movs	r3, r0
 8004d16:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d18:	e00f      	b.n	8004d3a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004d1a:	f7ff f85f 	bl	8003ddc <HAL_GetTick>
 8004d1e:	0002      	movs	r2, r0
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b19      	cmp	r3, #25
 8004d26:	d908      	bls.n	8004d3a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004d30:	2327      	movs	r3, #39	@ 0x27
 8004d32:	18fb      	adds	r3, r7, r3
 8004d34:	2201      	movs	r2, #1
 8004d36:	701a      	strb	r2, [r3, #0]

              break;
 8004d38:	e006      	b.n	8004d48 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	2220      	movs	r2, #32
 8004d42:	4013      	ands	r3, r2
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d1e8      	bne.n	8004d1a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	4013      	ands	r3, r2
 8004d52:	2b20      	cmp	r3, #32
 8004d54:	d004      	beq.n	8004d60 <I2C_IsErrorOccurred+0x100>
 8004d56:	2327      	movs	r3, #39	@ 0x27
 8004d58:	18fb      	adds	r3, r7, r3
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d09b      	beq.n	8004c98 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004d60:	2327      	movs	r3, #39	@ 0x27
 8004d62:	18fb      	adds	r3, r7, r3
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d103      	bne.n	8004d72 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004d72:	6a3b      	ldr	r3, [r7, #32]
 8004d74:	2204      	movs	r2, #4
 8004d76:	4313      	orrs	r3, r2
 8004d78:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004d7a:	2327      	movs	r3, #39	@ 0x27
 8004d7c:	18fb      	adds	r3, r7, r3
 8004d7e:	2201      	movs	r2, #1
 8004d80:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	2380      	movs	r3, #128	@ 0x80
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	4013      	ands	r3, r2
 8004d92:	d00c      	beq.n	8004dae <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	2201      	movs	r2, #1
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2280      	movs	r2, #128	@ 0x80
 8004da2:	0052      	lsls	r2, r2, #1
 8004da4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004da6:	2327      	movs	r3, #39	@ 0x27
 8004da8:	18fb      	adds	r3, r7, r3
 8004daa:	2201      	movs	r2, #1
 8004dac:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	2380      	movs	r3, #128	@ 0x80
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	4013      	ands	r3, r2
 8004db6:	d00c      	beq.n	8004dd2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	2208      	movs	r2, #8
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2280      	movs	r2, #128	@ 0x80
 8004dc6:	00d2      	lsls	r2, r2, #3
 8004dc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004dca:	2327      	movs	r3, #39	@ 0x27
 8004dcc:	18fb      	adds	r3, r7, r3
 8004dce:	2201      	movs	r2, #1
 8004dd0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	2380      	movs	r3, #128	@ 0x80
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d00c      	beq.n	8004df6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	2202      	movs	r2, #2
 8004de0:	4313      	orrs	r3, r2
 8004de2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2280      	movs	r2, #128	@ 0x80
 8004dea:	0092      	lsls	r2, r2, #2
 8004dec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004dee:	2327      	movs	r3, #39	@ 0x27
 8004df0:	18fb      	adds	r3, r7, r3
 8004df2:	2201      	movs	r2, #1
 8004df4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004df6:	2327      	movs	r3, #39	@ 0x27
 8004df8:	18fb      	adds	r3, r7, r3
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d01d      	beq.n	8004e3c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	0018      	movs	r0, r3
 8004e04:	f7ff fd8a 	bl	800491c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	490e      	ldr	r1, [pc, #56]	@ (8004e4c <I2C_IsErrorOccurred+0x1ec>)
 8004e14:	400a      	ands	r2, r1
 8004e16:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2241      	movs	r2, #65	@ 0x41
 8004e28:	2120      	movs	r1, #32
 8004e2a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2242      	movs	r2, #66	@ 0x42
 8004e30:	2100      	movs	r1, #0
 8004e32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2240      	movs	r2, #64	@ 0x40
 8004e38:	2100      	movs	r1, #0
 8004e3a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004e3c:	2327      	movs	r3, #39	@ 0x27
 8004e3e:	18fb      	adds	r3, r7, r3
 8004e40:	781b      	ldrb	r3, [r3, #0]
}
 8004e42:	0018      	movs	r0, r3
 8004e44:	46bd      	mov	sp, r7
 8004e46:	b00a      	add	sp, #40	@ 0x28
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	46c0      	nop			@ (mov r8, r8)
 8004e4c:	fe00e800 	.word	0xfe00e800

08004e50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004e50:	b590      	push	{r4, r7, lr}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	0008      	movs	r0, r1
 8004e5a:	0011      	movs	r1, r2
 8004e5c:	607b      	str	r3, [r7, #4]
 8004e5e:	240a      	movs	r4, #10
 8004e60:	193b      	adds	r3, r7, r4
 8004e62:	1c02      	adds	r2, r0, #0
 8004e64:	801a      	strh	r2, [r3, #0]
 8004e66:	2009      	movs	r0, #9
 8004e68:	183b      	adds	r3, r7, r0
 8004e6a:	1c0a      	adds	r2, r1, #0
 8004e6c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e6e:	193b      	adds	r3, r7, r4
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	059b      	lsls	r3, r3, #22
 8004e74:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e76:	183b      	adds	r3, r7, r0
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	0419      	lsls	r1, r3, #16
 8004e7c:	23ff      	movs	r3, #255	@ 0xff
 8004e7e:	041b      	lsls	r3, r3, #16
 8004e80:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e82:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	085b      	lsrs	r3, r3, #1
 8004e90:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e9a:	0d51      	lsrs	r1, r2, #21
 8004e9c:	2280      	movs	r2, #128	@ 0x80
 8004e9e:	00d2      	lsls	r2, r2, #3
 8004ea0:	400a      	ands	r2, r1
 8004ea2:	4907      	ldr	r1, [pc, #28]	@ (8004ec0 <I2C_TransferConfig+0x70>)
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	43d2      	mvns	r2, r2
 8004ea8:	401a      	ands	r2, r3
 8004eaa:	0011      	movs	r1, r2
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004eb6:	46c0      	nop			@ (mov r8, r8)
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	b007      	add	sp, #28
 8004ebc:	bd90      	pop	{r4, r7, pc}
 8004ebe:	46c0      	nop			@ (mov r8, r8)
 8004ec0:	03ff63ff 	.word	0x03ff63ff

08004ec4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2241      	movs	r2, #65	@ 0x41
 8004ed2:	5c9b      	ldrb	r3, [r3, r2]
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b20      	cmp	r3, #32
 8004ed8:	d138      	bne.n	8004f4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2240      	movs	r2, #64	@ 0x40
 8004ede:	5c9b      	ldrb	r3, [r3, r2]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e032      	b.n	8004f4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2240      	movs	r2, #64	@ 0x40
 8004eec:	2101      	movs	r1, #1
 8004eee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2241      	movs	r2, #65	@ 0x41
 8004ef4:	2124      	movs	r1, #36	@ 0x24
 8004ef6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2101      	movs	r1, #1
 8004f04:	438a      	bics	r2, r1
 8004f06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4911      	ldr	r1, [pc, #68]	@ (8004f58 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004f14:	400a      	ands	r2, r1
 8004f16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6819      	ldr	r1, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2101      	movs	r1, #1
 8004f34:	430a      	orrs	r2, r1
 8004f36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2241      	movs	r2, #65	@ 0x41
 8004f3c:	2120      	movs	r1, #32
 8004f3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2240      	movs	r2, #64	@ 0x40
 8004f44:	2100      	movs	r1, #0
 8004f46:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	e000      	b.n	8004f4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f4c:	2302      	movs	r3, #2
  }
}
 8004f4e:	0018      	movs	r0, r3
 8004f50:	46bd      	mov	sp, r7
 8004f52:	b002      	add	sp, #8
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	46c0      	nop			@ (mov r8, r8)
 8004f58:	ffffefff 	.word	0xffffefff

08004f5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2241      	movs	r2, #65	@ 0x41
 8004f6a:	5c9b      	ldrb	r3, [r3, r2]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b20      	cmp	r3, #32
 8004f70:	d139      	bne.n	8004fe6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2240      	movs	r2, #64	@ 0x40
 8004f76:	5c9b      	ldrb	r3, [r3, r2]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e033      	b.n	8004fe8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2240      	movs	r2, #64	@ 0x40
 8004f84:	2101      	movs	r1, #1
 8004f86:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2241      	movs	r2, #65	@ 0x41
 8004f8c:	2124      	movs	r1, #36	@ 0x24
 8004f8e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	438a      	bics	r2, r1
 8004f9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4a11      	ldr	r2, [pc, #68]	@ (8004ff0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	021b      	lsls	r3, r3, #8
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2101      	movs	r1, #1
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2241      	movs	r2, #65	@ 0x41
 8004fd6:	2120      	movs	r1, #32
 8004fd8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2240      	movs	r2, #64	@ 0x40
 8004fde:	2100      	movs	r1, #0
 8004fe0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e000      	b.n	8004fe8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004fe6:	2302      	movs	r3, #2
  }
}
 8004fe8:	0018      	movs	r0, r3
 8004fea:	46bd      	mov	sp, r7
 8004fec:	b004      	add	sp, #16
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	fffff0ff 	.word	0xfffff0ff

08004ff4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004ffc:	4b19      	ldr	r3, [pc, #100]	@ (8005064 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a19      	ldr	r2, [pc, #100]	@ (8005068 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005002:	4013      	ands	r3, r2
 8005004:	0019      	movs	r1, r3
 8005006:	4b17      	ldr	r3, [pc, #92]	@ (8005064 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	430a      	orrs	r2, r1
 800500c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	2380      	movs	r3, #128	@ 0x80
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	429a      	cmp	r2, r3
 8005016:	d11f      	bne.n	8005058 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005018:	4b14      	ldr	r3, [pc, #80]	@ (800506c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	0013      	movs	r3, r2
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	189b      	adds	r3, r3, r2
 8005022:	005b      	lsls	r3, r3, #1
 8005024:	4912      	ldr	r1, [pc, #72]	@ (8005070 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005026:	0018      	movs	r0, r3
 8005028:	f7fb f880 	bl	800012c <__udivsi3>
 800502c:	0003      	movs	r3, r0
 800502e:	3301      	adds	r3, #1
 8005030:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005032:	e008      	b.n	8005046 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3b01      	subs	r3, #1
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	e001      	b.n	8005046 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e009      	b.n	800505a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005046:	4b07      	ldr	r3, [pc, #28]	@ (8005064 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005048:	695a      	ldr	r2, [r3, #20]
 800504a:	2380      	movs	r3, #128	@ 0x80
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	401a      	ands	r2, r3
 8005050:	2380      	movs	r3, #128	@ 0x80
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	429a      	cmp	r2, r3
 8005056:	d0ed      	beq.n	8005034 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	0018      	movs	r0, r3
 800505c:	46bd      	mov	sp, r7
 800505e:	b004      	add	sp, #16
 8005060:	bd80      	pop	{r7, pc}
 8005062:	46c0      	nop			@ (mov r8, r8)
 8005064:	40007000 	.word	0x40007000
 8005068:	fffff9ff 	.word	0xfffff9ff
 800506c:	200004f4 	.word	0x200004f4
 8005070:	000f4240 	.word	0x000f4240

08005074 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005078:	4b03      	ldr	r3, [pc, #12]	@ (8005088 <LL_RCC_GetAPB1Prescaler+0x14>)
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	23e0      	movs	r3, #224	@ 0xe0
 800507e:	01db      	lsls	r3, r3, #7
 8005080:	4013      	ands	r3, r2
}
 8005082:	0018      	movs	r0, r3
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40021000 	.word	0x40021000

0800508c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b088      	sub	sp, #32
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d102      	bne.n	80050a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	f000 fb50 	bl	8005740 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2201      	movs	r2, #1
 80050a6:	4013      	ands	r3, r2
 80050a8:	d100      	bne.n	80050ac <HAL_RCC_OscConfig+0x20>
 80050aa:	e07c      	b.n	80051a6 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ac:	4bc3      	ldr	r3, [pc, #780]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	2238      	movs	r2, #56	@ 0x38
 80050b2:	4013      	ands	r3, r2
 80050b4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050b6:	4bc1      	ldr	r3, [pc, #772]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	2203      	movs	r2, #3
 80050bc:	4013      	ands	r3, r2
 80050be:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	2b10      	cmp	r3, #16
 80050c4:	d102      	bne.n	80050cc <HAL_RCC_OscConfig+0x40>
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d002      	beq.n	80050d2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	2b08      	cmp	r3, #8
 80050d0:	d10b      	bne.n	80050ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d2:	4bba      	ldr	r3, [pc, #744]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	2380      	movs	r3, #128	@ 0x80
 80050d8:	029b      	lsls	r3, r3, #10
 80050da:	4013      	ands	r3, r2
 80050dc:	d062      	beq.n	80051a4 <HAL_RCC_OscConfig+0x118>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d15e      	bne.n	80051a4 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e32a      	b.n	8005740 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	2380      	movs	r3, #128	@ 0x80
 80050f0:	025b      	lsls	r3, r3, #9
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d107      	bne.n	8005106 <HAL_RCC_OscConfig+0x7a>
 80050f6:	4bb1      	ldr	r3, [pc, #708]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4bb0      	ldr	r3, [pc, #704]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 80050fc:	2180      	movs	r1, #128	@ 0x80
 80050fe:	0249      	lsls	r1, r1, #9
 8005100:	430a      	orrs	r2, r1
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	e020      	b.n	8005148 <HAL_RCC_OscConfig+0xbc>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	23a0      	movs	r3, #160	@ 0xa0
 800510c:	02db      	lsls	r3, r3, #11
 800510e:	429a      	cmp	r2, r3
 8005110:	d10e      	bne.n	8005130 <HAL_RCC_OscConfig+0xa4>
 8005112:	4baa      	ldr	r3, [pc, #680]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	4ba9      	ldr	r3, [pc, #676]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 8005118:	2180      	movs	r1, #128	@ 0x80
 800511a:	02c9      	lsls	r1, r1, #11
 800511c:	430a      	orrs	r2, r1
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	4ba6      	ldr	r3, [pc, #664]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	4ba5      	ldr	r3, [pc, #660]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 8005126:	2180      	movs	r1, #128	@ 0x80
 8005128:	0249      	lsls	r1, r1, #9
 800512a:	430a      	orrs	r2, r1
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	e00b      	b.n	8005148 <HAL_RCC_OscConfig+0xbc>
 8005130:	4ba2      	ldr	r3, [pc, #648]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	4ba1      	ldr	r3, [pc, #644]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 8005136:	49a2      	ldr	r1, [pc, #648]	@ (80053c0 <HAL_RCC_OscConfig+0x334>)
 8005138:	400a      	ands	r2, r1
 800513a:	601a      	str	r2, [r3, #0]
 800513c:	4b9f      	ldr	r3, [pc, #636]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	4b9e      	ldr	r3, [pc, #632]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 8005142:	49a0      	ldr	r1, [pc, #640]	@ (80053c4 <HAL_RCC_OscConfig+0x338>)
 8005144:	400a      	ands	r2, r1
 8005146:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d014      	beq.n	800517a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005150:	f7fe fe44 	bl	8003ddc <HAL_GetTick>
 8005154:	0003      	movs	r3, r0
 8005156:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800515a:	f7fe fe3f 	bl	8003ddc <HAL_GetTick>
 800515e:	0002      	movs	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b64      	cmp	r3, #100	@ 0x64
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e2e9      	b.n	8005740 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800516c:	4b93      	ldr	r3, [pc, #588]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	2380      	movs	r3, #128	@ 0x80
 8005172:	029b      	lsls	r3, r3, #10
 8005174:	4013      	ands	r3, r2
 8005176:	d0f0      	beq.n	800515a <HAL_RCC_OscConfig+0xce>
 8005178:	e015      	b.n	80051a6 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800517a:	f7fe fe2f 	bl	8003ddc <HAL_GetTick>
 800517e:	0003      	movs	r3, r0
 8005180:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005184:	f7fe fe2a 	bl	8003ddc <HAL_GetTick>
 8005188:	0002      	movs	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b64      	cmp	r3, #100	@ 0x64
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e2d4      	b.n	8005740 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005196:	4b89      	ldr	r3, [pc, #548]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	2380      	movs	r3, #128	@ 0x80
 800519c:	029b      	lsls	r3, r3, #10
 800519e:	4013      	ands	r3, r2
 80051a0:	d1f0      	bne.n	8005184 <HAL_RCC_OscConfig+0xf8>
 80051a2:	e000      	b.n	80051a6 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051a4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2202      	movs	r2, #2
 80051ac:	4013      	ands	r3, r2
 80051ae:	d100      	bne.n	80051b2 <HAL_RCC_OscConfig+0x126>
 80051b0:	e099      	b.n	80052e6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051b2:	4b82      	ldr	r3, [pc, #520]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	2238      	movs	r2, #56	@ 0x38
 80051b8:	4013      	ands	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051bc:	4b7f      	ldr	r3, [pc, #508]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	2203      	movs	r2, #3
 80051c2:	4013      	ands	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	2b10      	cmp	r3, #16
 80051ca:	d102      	bne.n	80051d2 <HAL_RCC_OscConfig+0x146>
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d002      	beq.n	80051d8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d135      	bne.n	8005244 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051d8:	4b78      	ldr	r3, [pc, #480]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	2380      	movs	r3, #128	@ 0x80
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	4013      	ands	r3, r2
 80051e2:	d005      	beq.n	80051f0 <HAL_RCC_OscConfig+0x164>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e2a7      	b.n	8005740 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051f0:	4b72      	ldr	r3, [pc, #456]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	4a74      	ldr	r2, [pc, #464]	@ (80053c8 <HAL_RCC_OscConfig+0x33c>)
 80051f6:	4013      	ands	r3, r2
 80051f8:	0019      	movs	r1, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	021a      	lsls	r2, r3, #8
 8005200:	4b6e      	ldr	r3, [pc, #440]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 8005202:	430a      	orrs	r2, r1
 8005204:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d112      	bne.n	8005232 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800520c:	4b6b      	ldr	r3, [pc, #428]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a6e      	ldr	r2, [pc, #440]	@ (80053cc <HAL_RCC_OscConfig+0x340>)
 8005212:	4013      	ands	r3, r2
 8005214:	0019      	movs	r1, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691a      	ldr	r2, [r3, #16]
 800521a:	4b68      	ldr	r3, [pc, #416]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 800521c:	430a      	orrs	r2, r1
 800521e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005220:	4b66      	ldr	r3, [pc, #408]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	0adb      	lsrs	r3, r3, #11
 8005226:	2207      	movs	r2, #7
 8005228:	4013      	ands	r3, r2
 800522a:	4a69      	ldr	r2, [pc, #420]	@ (80053d0 <HAL_RCC_OscConfig+0x344>)
 800522c:	40da      	lsrs	r2, r3
 800522e:	4b69      	ldr	r3, [pc, #420]	@ (80053d4 <HAL_RCC_OscConfig+0x348>)
 8005230:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005232:	4b69      	ldr	r3, [pc, #420]	@ (80053d8 <HAL_RCC_OscConfig+0x34c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	0018      	movs	r0, r3
 8005238:	f7fe fd74 	bl	8003d24 <HAL_InitTick>
 800523c:	1e03      	subs	r3, r0, #0
 800523e:	d051      	beq.n	80052e4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e27d      	b.n	8005740 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d030      	beq.n	80052ae <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800524c:	4b5b      	ldr	r3, [pc, #364]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a5e      	ldr	r2, [pc, #376]	@ (80053cc <HAL_RCC_OscConfig+0x340>)
 8005252:	4013      	ands	r3, r2
 8005254:	0019      	movs	r1, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	691a      	ldr	r2, [r3, #16]
 800525a:	4b58      	ldr	r3, [pc, #352]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 800525c:	430a      	orrs	r2, r1
 800525e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005260:	4b56      	ldr	r3, [pc, #344]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	4b55      	ldr	r3, [pc, #340]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 8005266:	2180      	movs	r1, #128	@ 0x80
 8005268:	0049      	lsls	r1, r1, #1
 800526a:	430a      	orrs	r2, r1
 800526c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526e:	f7fe fdb5 	bl	8003ddc <HAL_GetTick>
 8005272:	0003      	movs	r3, r0
 8005274:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005278:	f7fe fdb0 	bl	8003ddc <HAL_GetTick>
 800527c:	0002      	movs	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e25a      	b.n	8005740 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800528a:	4b4c      	ldr	r3, [pc, #304]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	2380      	movs	r3, #128	@ 0x80
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	4013      	ands	r3, r2
 8005294:	d0f0      	beq.n	8005278 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005296:	4b49      	ldr	r3, [pc, #292]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	4a4b      	ldr	r2, [pc, #300]	@ (80053c8 <HAL_RCC_OscConfig+0x33c>)
 800529c:	4013      	ands	r3, r2
 800529e:	0019      	movs	r1, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	021a      	lsls	r2, r3, #8
 80052a6:	4b45      	ldr	r3, [pc, #276]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 80052a8:	430a      	orrs	r2, r1
 80052aa:	605a      	str	r2, [r3, #4]
 80052ac:	e01b      	b.n	80052e6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80052ae:	4b43      	ldr	r3, [pc, #268]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	4b42      	ldr	r3, [pc, #264]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 80052b4:	4949      	ldr	r1, [pc, #292]	@ (80053dc <HAL_RCC_OscConfig+0x350>)
 80052b6:	400a      	ands	r2, r1
 80052b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ba:	f7fe fd8f 	bl	8003ddc <HAL_GetTick>
 80052be:	0003      	movs	r3, r0
 80052c0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052c4:	f7fe fd8a 	bl	8003ddc <HAL_GetTick>
 80052c8:	0002      	movs	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e234      	b.n	8005740 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052d6:	4b39      	ldr	r3, [pc, #228]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	2380      	movs	r3, #128	@ 0x80
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	4013      	ands	r3, r2
 80052e0:	d1f0      	bne.n	80052c4 <HAL_RCC_OscConfig+0x238>
 80052e2:	e000      	b.n	80052e6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052e4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2208      	movs	r2, #8
 80052ec:	4013      	ands	r3, r2
 80052ee:	d047      	beq.n	8005380 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80052f0:	4b32      	ldr	r3, [pc, #200]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2238      	movs	r2, #56	@ 0x38
 80052f6:	4013      	ands	r3, r2
 80052f8:	2b18      	cmp	r3, #24
 80052fa:	d10a      	bne.n	8005312 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80052fc:	4b2f      	ldr	r3, [pc, #188]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 80052fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005300:	2202      	movs	r2, #2
 8005302:	4013      	ands	r3, r2
 8005304:	d03c      	beq.n	8005380 <HAL_RCC_OscConfig+0x2f4>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d138      	bne.n	8005380 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e216      	b.n	8005740 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d019      	beq.n	800534e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800531a:	4b28      	ldr	r3, [pc, #160]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 800531c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800531e:	4b27      	ldr	r3, [pc, #156]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 8005320:	2101      	movs	r1, #1
 8005322:	430a      	orrs	r2, r1
 8005324:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005326:	f7fe fd59 	bl	8003ddc <HAL_GetTick>
 800532a:	0003      	movs	r3, r0
 800532c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800532e:	e008      	b.n	8005342 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005330:	f7fe fd54 	bl	8003ddc <HAL_GetTick>
 8005334:	0002      	movs	r2, r0
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e1fe      	b.n	8005740 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005342:	4b1e      	ldr	r3, [pc, #120]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 8005344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005346:	2202      	movs	r2, #2
 8005348:	4013      	ands	r3, r2
 800534a:	d0f1      	beq.n	8005330 <HAL_RCC_OscConfig+0x2a4>
 800534c:	e018      	b.n	8005380 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800534e:	4b1b      	ldr	r3, [pc, #108]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 8005350:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005352:	4b1a      	ldr	r3, [pc, #104]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 8005354:	2101      	movs	r1, #1
 8005356:	438a      	bics	r2, r1
 8005358:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535a:	f7fe fd3f 	bl	8003ddc <HAL_GetTick>
 800535e:	0003      	movs	r3, r0
 8005360:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005364:	f7fe fd3a 	bl	8003ddc <HAL_GetTick>
 8005368:	0002      	movs	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e1e4      	b.n	8005740 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005376:	4b11      	ldr	r3, [pc, #68]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 8005378:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800537a:	2202      	movs	r2, #2
 800537c:	4013      	ands	r3, r2
 800537e:	d1f1      	bne.n	8005364 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2204      	movs	r2, #4
 8005386:	4013      	ands	r3, r2
 8005388:	d100      	bne.n	800538c <HAL_RCC_OscConfig+0x300>
 800538a:	e0c7      	b.n	800551c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800538c:	231f      	movs	r3, #31
 800538e:	18fb      	adds	r3, r7, r3
 8005390:	2200      	movs	r2, #0
 8005392:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005394:	4b09      	ldr	r3, [pc, #36]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	2238      	movs	r2, #56	@ 0x38
 800539a:	4013      	ands	r3, r2
 800539c:	2b20      	cmp	r3, #32
 800539e:	d11f      	bne.n	80053e0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80053a0:	4b06      	ldr	r3, [pc, #24]	@ (80053bc <HAL_RCC_OscConfig+0x330>)
 80053a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053a4:	2202      	movs	r2, #2
 80053a6:	4013      	ands	r3, r2
 80053a8:	d100      	bne.n	80053ac <HAL_RCC_OscConfig+0x320>
 80053aa:	e0b7      	b.n	800551c <HAL_RCC_OscConfig+0x490>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d000      	beq.n	80053b6 <HAL_RCC_OscConfig+0x32a>
 80053b4:	e0b2      	b.n	800551c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e1c2      	b.n	8005740 <HAL_RCC_OscConfig+0x6b4>
 80053ba:	46c0      	nop			@ (mov r8, r8)
 80053bc:	40021000 	.word	0x40021000
 80053c0:	fffeffff 	.word	0xfffeffff
 80053c4:	fffbffff 	.word	0xfffbffff
 80053c8:	ffff80ff 	.word	0xffff80ff
 80053cc:	ffffc7ff 	.word	0xffffc7ff
 80053d0:	00f42400 	.word	0x00f42400
 80053d4:	200004f4 	.word	0x200004f4
 80053d8:	200004f8 	.word	0x200004f8
 80053dc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053e0:	4bb5      	ldr	r3, [pc, #724]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 80053e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053e4:	2380      	movs	r3, #128	@ 0x80
 80053e6:	055b      	lsls	r3, r3, #21
 80053e8:	4013      	ands	r3, r2
 80053ea:	d101      	bne.n	80053f0 <HAL_RCC_OscConfig+0x364>
 80053ec:	2301      	movs	r3, #1
 80053ee:	e000      	b.n	80053f2 <HAL_RCC_OscConfig+0x366>
 80053f0:	2300      	movs	r3, #0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d011      	beq.n	800541a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80053f6:	4bb0      	ldr	r3, [pc, #704]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 80053f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053fa:	4baf      	ldr	r3, [pc, #700]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 80053fc:	2180      	movs	r1, #128	@ 0x80
 80053fe:	0549      	lsls	r1, r1, #21
 8005400:	430a      	orrs	r2, r1
 8005402:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005404:	4bac      	ldr	r3, [pc, #688]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 8005406:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005408:	2380      	movs	r3, #128	@ 0x80
 800540a:	055b      	lsls	r3, r3, #21
 800540c:	4013      	ands	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005412:	231f      	movs	r3, #31
 8005414:	18fb      	adds	r3, r7, r3
 8005416:	2201      	movs	r2, #1
 8005418:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800541a:	4ba8      	ldr	r3, [pc, #672]	@ (80056bc <HAL_RCC_OscConfig+0x630>)
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	2380      	movs	r3, #128	@ 0x80
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	4013      	ands	r3, r2
 8005424:	d11a      	bne.n	800545c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005426:	4ba5      	ldr	r3, [pc, #660]	@ (80056bc <HAL_RCC_OscConfig+0x630>)
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	4ba4      	ldr	r3, [pc, #656]	@ (80056bc <HAL_RCC_OscConfig+0x630>)
 800542c:	2180      	movs	r1, #128	@ 0x80
 800542e:	0049      	lsls	r1, r1, #1
 8005430:	430a      	orrs	r2, r1
 8005432:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005434:	f7fe fcd2 	bl	8003ddc <HAL_GetTick>
 8005438:	0003      	movs	r3, r0
 800543a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800543c:	e008      	b.n	8005450 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800543e:	f7fe fccd 	bl	8003ddc <HAL_GetTick>
 8005442:	0002      	movs	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d901      	bls.n	8005450 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e177      	b.n	8005740 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005450:	4b9a      	ldr	r3, [pc, #616]	@ (80056bc <HAL_RCC_OscConfig+0x630>)
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	2380      	movs	r3, #128	@ 0x80
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	4013      	ands	r3, r2
 800545a:	d0f0      	beq.n	800543e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d106      	bne.n	8005472 <HAL_RCC_OscConfig+0x3e6>
 8005464:	4b94      	ldr	r3, [pc, #592]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 8005466:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005468:	4b93      	ldr	r3, [pc, #588]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 800546a:	2101      	movs	r1, #1
 800546c:	430a      	orrs	r2, r1
 800546e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005470:	e01c      	b.n	80054ac <HAL_RCC_OscConfig+0x420>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2b05      	cmp	r3, #5
 8005478:	d10c      	bne.n	8005494 <HAL_RCC_OscConfig+0x408>
 800547a:	4b8f      	ldr	r3, [pc, #572]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 800547c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800547e:	4b8e      	ldr	r3, [pc, #568]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 8005480:	2104      	movs	r1, #4
 8005482:	430a      	orrs	r2, r1
 8005484:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005486:	4b8c      	ldr	r3, [pc, #560]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 8005488:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800548a:	4b8b      	ldr	r3, [pc, #556]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 800548c:	2101      	movs	r1, #1
 800548e:	430a      	orrs	r2, r1
 8005490:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005492:	e00b      	b.n	80054ac <HAL_RCC_OscConfig+0x420>
 8005494:	4b88      	ldr	r3, [pc, #544]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 8005496:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005498:	4b87      	ldr	r3, [pc, #540]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 800549a:	2101      	movs	r1, #1
 800549c:	438a      	bics	r2, r1
 800549e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80054a0:	4b85      	ldr	r3, [pc, #532]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 80054a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80054a4:	4b84      	ldr	r3, [pc, #528]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 80054a6:	2104      	movs	r1, #4
 80054a8:	438a      	bics	r2, r1
 80054aa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d014      	beq.n	80054de <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b4:	f7fe fc92 	bl	8003ddc <HAL_GetTick>
 80054b8:	0003      	movs	r3, r0
 80054ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054bc:	e009      	b.n	80054d2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054be:	f7fe fc8d 	bl	8003ddc <HAL_GetTick>
 80054c2:	0002      	movs	r2, r0
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	4a7d      	ldr	r2, [pc, #500]	@ (80056c0 <HAL_RCC_OscConfig+0x634>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e136      	b.n	8005740 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054d2:	4b79      	ldr	r3, [pc, #484]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 80054d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d6:	2202      	movs	r2, #2
 80054d8:	4013      	ands	r3, r2
 80054da:	d0f0      	beq.n	80054be <HAL_RCC_OscConfig+0x432>
 80054dc:	e013      	b.n	8005506 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054de:	f7fe fc7d 	bl	8003ddc <HAL_GetTick>
 80054e2:	0003      	movs	r3, r0
 80054e4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054e6:	e009      	b.n	80054fc <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e8:	f7fe fc78 	bl	8003ddc <HAL_GetTick>
 80054ec:	0002      	movs	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	4a73      	ldr	r2, [pc, #460]	@ (80056c0 <HAL_RCC_OscConfig+0x634>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d901      	bls.n	80054fc <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e121      	b.n	8005740 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054fc:	4b6e      	ldr	r3, [pc, #440]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 80054fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005500:	2202      	movs	r2, #2
 8005502:	4013      	ands	r3, r2
 8005504:	d1f0      	bne.n	80054e8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005506:	231f      	movs	r3, #31
 8005508:	18fb      	adds	r3, r7, r3
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d105      	bne.n	800551c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005510:	4b69      	ldr	r3, [pc, #420]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 8005512:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005514:	4b68      	ldr	r3, [pc, #416]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 8005516:	496b      	ldr	r1, [pc, #428]	@ (80056c4 <HAL_RCC_OscConfig+0x638>)
 8005518:	400a      	ands	r2, r1
 800551a:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2220      	movs	r2, #32
 8005522:	4013      	ands	r3, r2
 8005524:	d039      	beq.n	800559a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d01b      	beq.n	8005566 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800552e:	4b62      	ldr	r3, [pc, #392]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	4b61      	ldr	r3, [pc, #388]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 8005534:	2180      	movs	r1, #128	@ 0x80
 8005536:	03c9      	lsls	r1, r1, #15
 8005538:	430a      	orrs	r2, r1
 800553a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800553c:	f7fe fc4e 	bl	8003ddc <HAL_GetTick>
 8005540:	0003      	movs	r3, r0
 8005542:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005546:	f7fe fc49 	bl	8003ddc <HAL_GetTick>
 800554a:	0002      	movs	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e0f3      	b.n	8005740 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005558:	4b57      	ldr	r3, [pc, #348]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	2380      	movs	r3, #128	@ 0x80
 800555e:	041b      	lsls	r3, r3, #16
 8005560:	4013      	ands	r3, r2
 8005562:	d0f0      	beq.n	8005546 <HAL_RCC_OscConfig+0x4ba>
 8005564:	e019      	b.n	800559a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005566:	4b54      	ldr	r3, [pc, #336]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	4b53      	ldr	r3, [pc, #332]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 800556c:	4956      	ldr	r1, [pc, #344]	@ (80056c8 <HAL_RCC_OscConfig+0x63c>)
 800556e:	400a      	ands	r2, r1
 8005570:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005572:	f7fe fc33 	bl	8003ddc <HAL_GetTick>
 8005576:	0003      	movs	r3, r0
 8005578:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800557c:	f7fe fc2e 	bl	8003ddc <HAL_GetTick>
 8005580:	0002      	movs	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e0d8      	b.n	8005740 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800558e:	4b4a      	ldr	r3, [pc, #296]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	2380      	movs	r3, #128	@ 0x80
 8005594:	041b      	lsls	r3, r3, #16
 8005596:	4013      	ands	r3, r2
 8005598:	d1f0      	bne.n	800557c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d100      	bne.n	80055a4 <HAL_RCC_OscConfig+0x518>
 80055a2:	e0cc      	b.n	800573e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055a4:	4b44      	ldr	r3, [pc, #272]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	2238      	movs	r2, #56	@ 0x38
 80055aa:	4013      	ands	r3, r2
 80055ac:	2b10      	cmp	r3, #16
 80055ae:	d100      	bne.n	80055b2 <HAL_RCC_OscConfig+0x526>
 80055b0:	e07b      	b.n	80056aa <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d156      	bne.n	8005668 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ba:	4b3f      	ldr	r3, [pc, #252]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	4b3e      	ldr	r3, [pc, #248]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 80055c0:	4942      	ldr	r1, [pc, #264]	@ (80056cc <HAL_RCC_OscConfig+0x640>)
 80055c2:	400a      	ands	r2, r1
 80055c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c6:	f7fe fc09 	bl	8003ddc <HAL_GetTick>
 80055ca:	0003      	movs	r3, r0
 80055cc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d0:	f7fe fc04 	bl	8003ddc <HAL_GetTick>
 80055d4:	0002      	movs	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e0ae      	b.n	8005740 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055e2:	4b35      	ldr	r3, [pc, #212]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	2380      	movs	r3, #128	@ 0x80
 80055e8:	049b      	lsls	r3, r3, #18
 80055ea:	4013      	ands	r3, r2
 80055ec:	d1f0      	bne.n	80055d0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055ee:	4b32      	ldr	r3, [pc, #200]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	4a37      	ldr	r2, [pc, #220]	@ (80056d0 <HAL_RCC_OscConfig+0x644>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	0019      	movs	r1, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005606:	021b      	lsls	r3, r3, #8
 8005608:	431a      	orrs	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560e:	431a      	orrs	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005614:	431a      	orrs	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800561a:	431a      	orrs	r2, r3
 800561c:	4b26      	ldr	r3, [pc, #152]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 800561e:	430a      	orrs	r2, r1
 8005620:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005622:	4b25      	ldr	r3, [pc, #148]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	4b24      	ldr	r3, [pc, #144]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 8005628:	2180      	movs	r1, #128	@ 0x80
 800562a:	0449      	lsls	r1, r1, #17
 800562c:	430a      	orrs	r2, r1
 800562e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005630:	4b21      	ldr	r3, [pc, #132]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 8005632:	68da      	ldr	r2, [r3, #12]
 8005634:	4b20      	ldr	r3, [pc, #128]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 8005636:	2180      	movs	r1, #128	@ 0x80
 8005638:	0549      	lsls	r1, r1, #21
 800563a:	430a      	orrs	r2, r1
 800563c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563e:	f7fe fbcd 	bl	8003ddc <HAL_GetTick>
 8005642:	0003      	movs	r3, r0
 8005644:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005646:	e008      	b.n	800565a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005648:	f7fe fbc8 	bl	8003ddc <HAL_GetTick>
 800564c:	0002      	movs	r2, r0
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d901      	bls.n	800565a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e072      	b.n	8005740 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800565a:	4b17      	ldr	r3, [pc, #92]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	2380      	movs	r3, #128	@ 0x80
 8005660:	049b      	lsls	r3, r3, #18
 8005662:	4013      	ands	r3, r2
 8005664:	d0f0      	beq.n	8005648 <HAL_RCC_OscConfig+0x5bc>
 8005666:	e06a      	b.n	800573e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005668:	4b13      	ldr	r3, [pc, #76]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	4b12      	ldr	r3, [pc, #72]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 800566e:	4917      	ldr	r1, [pc, #92]	@ (80056cc <HAL_RCC_OscConfig+0x640>)
 8005670:	400a      	ands	r2, r1
 8005672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005674:	f7fe fbb2 	bl	8003ddc <HAL_GetTick>
 8005678:	0003      	movs	r3, r0
 800567a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800567c:	e008      	b.n	8005690 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800567e:	f7fe fbad 	bl	8003ddc <HAL_GetTick>
 8005682:	0002      	movs	r2, r0
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d901      	bls.n	8005690 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e057      	b.n	8005740 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005690:	4b09      	ldr	r3, [pc, #36]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	2380      	movs	r3, #128	@ 0x80
 8005696:	049b      	lsls	r3, r3, #18
 8005698:	4013      	ands	r3, r2
 800569a:	d1f0      	bne.n	800567e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800569c:	4b06      	ldr	r3, [pc, #24]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 800569e:	68da      	ldr	r2, [r3, #12]
 80056a0:	4b05      	ldr	r3, [pc, #20]	@ (80056b8 <HAL_RCC_OscConfig+0x62c>)
 80056a2:	490c      	ldr	r1, [pc, #48]	@ (80056d4 <HAL_RCC_OscConfig+0x648>)
 80056a4:	400a      	ands	r2, r1
 80056a6:	60da      	str	r2, [r3, #12]
 80056a8:	e049      	b.n	800573e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d112      	bne.n	80056d8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e044      	b.n	8005740 <HAL_RCC_OscConfig+0x6b4>
 80056b6:	46c0      	nop			@ (mov r8, r8)
 80056b8:	40021000 	.word	0x40021000
 80056bc:	40007000 	.word	0x40007000
 80056c0:	00001388 	.word	0x00001388
 80056c4:	efffffff 	.word	0xefffffff
 80056c8:	ffbfffff 	.word	0xffbfffff
 80056cc:	feffffff 	.word	0xfeffffff
 80056d0:	11c1808c 	.word	0x11c1808c
 80056d4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80056d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005748 <HAL_RCC_OscConfig+0x6bc>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2203      	movs	r2, #3
 80056e2:	401a      	ands	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d126      	bne.n	800573a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	2270      	movs	r2, #112	@ 0x70
 80056f0:	401a      	ands	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d11f      	bne.n	800573a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	23fe      	movs	r3, #254	@ 0xfe
 80056fe:	01db      	lsls	r3, r3, #7
 8005700:	401a      	ands	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005706:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005708:	429a      	cmp	r2, r3
 800570a:	d116      	bne.n	800573a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	23f8      	movs	r3, #248	@ 0xf8
 8005710:	039b      	lsls	r3, r3, #14
 8005712:	401a      	ands	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005718:	429a      	cmp	r2, r3
 800571a:	d10e      	bne.n	800573a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	23e0      	movs	r3, #224	@ 0xe0
 8005720:	051b      	lsls	r3, r3, #20
 8005722:	401a      	ands	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005728:	429a      	cmp	r2, r3
 800572a:	d106      	bne.n	800573a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	0f5b      	lsrs	r3, r3, #29
 8005730:	075a      	lsls	r2, r3, #29
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005736:	429a      	cmp	r2, r3
 8005738:	d001      	beq.n	800573e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e000      	b.n	8005740 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	0018      	movs	r0, r3
 8005742:	46bd      	mov	sp, r7
 8005744:	b008      	add	sp, #32
 8005746:	bd80      	pop	{r7, pc}
 8005748:	40021000 	.word	0x40021000

0800574c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e0e9      	b.n	8005934 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005760:	4b76      	ldr	r3, [pc, #472]	@ (800593c <HAL_RCC_ClockConfig+0x1f0>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2207      	movs	r2, #7
 8005766:	4013      	ands	r3, r2
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d91e      	bls.n	80057ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800576e:	4b73      	ldr	r3, [pc, #460]	@ (800593c <HAL_RCC_ClockConfig+0x1f0>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2207      	movs	r2, #7
 8005774:	4393      	bics	r3, r2
 8005776:	0019      	movs	r1, r3
 8005778:	4b70      	ldr	r3, [pc, #448]	@ (800593c <HAL_RCC_ClockConfig+0x1f0>)
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005780:	f7fe fb2c 	bl	8003ddc <HAL_GetTick>
 8005784:	0003      	movs	r3, r0
 8005786:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005788:	e009      	b.n	800579e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800578a:	f7fe fb27 	bl	8003ddc <HAL_GetTick>
 800578e:	0002      	movs	r2, r0
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	4a6a      	ldr	r2, [pc, #424]	@ (8005940 <HAL_RCC_ClockConfig+0x1f4>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d901      	bls.n	800579e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e0ca      	b.n	8005934 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800579e:	4b67      	ldr	r3, [pc, #412]	@ (800593c <HAL_RCC_ClockConfig+0x1f0>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2207      	movs	r2, #7
 80057a4:	4013      	ands	r3, r2
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d1ee      	bne.n	800578a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2202      	movs	r2, #2
 80057b2:	4013      	ands	r3, r2
 80057b4:	d015      	beq.n	80057e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2204      	movs	r2, #4
 80057bc:	4013      	ands	r3, r2
 80057be:	d006      	beq.n	80057ce <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80057c0:	4b60      	ldr	r3, [pc, #384]	@ (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	4b5f      	ldr	r3, [pc, #380]	@ (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 80057c6:	21e0      	movs	r1, #224	@ 0xe0
 80057c8:	01c9      	lsls	r1, r1, #7
 80057ca:	430a      	orrs	r2, r1
 80057cc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057ce:	4b5d      	ldr	r3, [pc, #372]	@ (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	4a5d      	ldr	r2, [pc, #372]	@ (8005948 <HAL_RCC_ClockConfig+0x1fc>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	0019      	movs	r1, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	4b59      	ldr	r3, [pc, #356]	@ (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 80057de:	430a      	orrs	r2, r1
 80057e0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2201      	movs	r2, #1
 80057e8:	4013      	ands	r3, r2
 80057ea:	d057      	beq.n	800589c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d107      	bne.n	8005804 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057f4:	4b53      	ldr	r3, [pc, #332]	@ (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	2380      	movs	r3, #128	@ 0x80
 80057fa:	029b      	lsls	r3, r3, #10
 80057fc:	4013      	ands	r3, r2
 80057fe:	d12b      	bne.n	8005858 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e097      	b.n	8005934 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	2b02      	cmp	r3, #2
 800580a:	d107      	bne.n	800581c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800580c:	4b4d      	ldr	r3, [pc, #308]	@ (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	2380      	movs	r3, #128	@ 0x80
 8005812:	049b      	lsls	r3, r3, #18
 8005814:	4013      	ands	r3, r2
 8005816:	d11f      	bne.n	8005858 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e08b      	b.n	8005934 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d107      	bne.n	8005834 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005824:	4b47      	ldr	r3, [pc, #284]	@ (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	2380      	movs	r3, #128	@ 0x80
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	4013      	ands	r3, r2
 800582e:	d113      	bne.n	8005858 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e07f      	b.n	8005934 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	2b03      	cmp	r3, #3
 800583a:	d106      	bne.n	800584a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800583c:	4b41      	ldr	r3, [pc, #260]	@ (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 800583e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005840:	2202      	movs	r2, #2
 8005842:	4013      	ands	r3, r2
 8005844:	d108      	bne.n	8005858 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e074      	b.n	8005934 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800584a:	4b3e      	ldr	r3, [pc, #248]	@ (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 800584c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800584e:	2202      	movs	r2, #2
 8005850:	4013      	ands	r3, r2
 8005852:	d101      	bne.n	8005858 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e06d      	b.n	8005934 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005858:	4b3a      	ldr	r3, [pc, #232]	@ (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	2207      	movs	r2, #7
 800585e:	4393      	bics	r3, r2
 8005860:	0019      	movs	r1, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	4b37      	ldr	r3, [pc, #220]	@ (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 8005868:	430a      	orrs	r2, r1
 800586a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800586c:	f7fe fab6 	bl	8003ddc <HAL_GetTick>
 8005870:	0003      	movs	r3, r0
 8005872:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005874:	e009      	b.n	800588a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005876:	f7fe fab1 	bl	8003ddc <HAL_GetTick>
 800587a:	0002      	movs	r2, r0
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	4a2f      	ldr	r2, [pc, #188]	@ (8005940 <HAL_RCC_ClockConfig+0x1f4>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d901      	bls.n	800588a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e054      	b.n	8005934 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800588a:	4b2e      	ldr	r3, [pc, #184]	@ (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	2238      	movs	r2, #56	@ 0x38
 8005890:	401a      	ands	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	429a      	cmp	r2, r3
 800589a:	d1ec      	bne.n	8005876 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800589c:	4b27      	ldr	r3, [pc, #156]	@ (800593c <HAL_RCC_ClockConfig+0x1f0>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2207      	movs	r2, #7
 80058a2:	4013      	ands	r3, r2
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d21e      	bcs.n	80058e8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058aa:	4b24      	ldr	r3, [pc, #144]	@ (800593c <HAL_RCC_ClockConfig+0x1f0>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2207      	movs	r2, #7
 80058b0:	4393      	bics	r3, r2
 80058b2:	0019      	movs	r1, r3
 80058b4:	4b21      	ldr	r3, [pc, #132]	@ (800593c <HAL_RCC_ClockConfig+0x1f0>)
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80058bc:	f7fe fa8e 	bl	8003ddc <HAL_GetTick>
 80058c0:	0003      	movs	r3, r0
 80058c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80058c4:	e009      	b.n	80058da <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058c6:	f7fe fa89 	bl	8003ddc <HAL_GetTick>
 80058ca:	0002      	movs	r2, r0
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005940 <HAL_RCC_ClockConfig+0x1f4>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e02c      	b.n	8005934 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80058da:	4b18      	ldr	r3, [pc, #96]	@ (800593c <HAL_RCC_ClockConfig+0x1f0>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2207      	movs	r2, #7
 80058e0:	4013      	ands	r3, r2
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d1ee      	bne.n	80058c6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2204      	movs	r2, #4
 80058ee:	4013      	ands	r3, r2
 80058f0:	d009      	beq.n	8005906 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80058f2:	4b14      	ldr	r3, [pc, #80]	@ (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	4a15      	ldr	r2, [pc, #84]	@ (800594c <HAL_RCC_ClockConfig+0x200>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	0019      	movs	r1, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68da      	ldr	r2, [r3, #12]
 8005900:	4b10      	ldr	r3, [pc, #64]	@ (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 8005902:	430a      	orrs	r2, r1
 8005904:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005906:	f000 f829 	bl	800595c <HAL_RCC_GetSysClockFreq>
 800590a:	0001      	movs	r1, r0
 800590c:	4b0d      	ldr	r3, [pc, #52]	@ (8005944 <HAL_RCC_ClockConfig+0x1f8>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	0a1b      	lsrs	r3, r3, #8
 8005912:	220f      	movs	r2, #15
 8005914:	401a      	ands	r2, r3
 8005916:	4b0e      	ldr	r3, [pc, #56]	@ (8005950 <HAL_RCC_ClockConfig+0x204>)
 8005918:	0092      	lsls	r2, r2, #2
 800591a:	58d3      	ldr	r3, [r2, r3]
 800591c:	221f      	movs	r2, #31
 800591e:	4013      	ands	r3, r2
 8005920:	000a      	movs	r2, r1
 8005922:	40da      	lsrs	r2, r3
 8005924:	4b0b      	ldr	r3, [pc, #44]	@ (8005954 <HAL_RCC_ClockConfig+0x208>)
 8005926:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005928:	4b0b      	ldr	r3, [pc, #44]	@ (8005958 <HAL_RCC_ClockConfig+0x20c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	0018      	movs	r0, r3
 800592e:	f7fe f9f9 	bl	8003d24 <HAL_InitTick>
 8005932:	0003      	movs	r3, r0
}
 8005934:	0018      	movs	r0, r3
 8005936:	46bd      	mov	sp, r7
 8005938:	b004      	add	sp, #16
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40022000 	.word	0x40022000
 8005940:	00001388 	.word	0x00001388
 8005944:	40021000 	.word	0x40021000
 8005948:	fffff0ff 	.word	0xfffff0ff
 800594c:	ffff8fff 	.word	0xffff8fff
 8005950:	0800a378 	.word	0x0800a378
 8005954:	200004f4 	.word	0x200004f4
 8005958:	200004f8 	.word	0x200004f8

0800595c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005962:	4b3c      	ldr	r3, [pc, #240]	@ (8005a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2238      	movs	r2, #56	@ 0x38
 8005968:	4013      	ands	r3, r2
 800596a:	d10f      	bne.n	800598c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800596c:	4b39      	ldr	r3, [pc, #228]	@ (8005a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	0adb      	lsrs	r3, r3, #11
 8005972:	2207      	movs	r2, #7
 8005974:	4013      	ands	r3, r2
 8005976:	2201      	movs	r2, #1
 8005978:	409a      	lsls	r2, r3
 800597a:	0013      	movs	r3, r2
 800597c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800597e:	6839      	ldr	r1, [r7, #0]
 8005980:	4835      	ldr	r0, [pc, #212]	@ (8005a58 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005982:	f7fa fbd3 	bl	800012c <__udivsi3>
 8005986:	0003      	movs	r3, r0
 8005988:	613b      	str	r3, [r7, #16]
 800598a:	e05d      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800598c:	4b31      	ldr	r3, [pc, #196]	@ (8005a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	2238      	movs	r2, #56	@ 0x38
 8005992:	4013      	ands	r3, r2
 8005994:	2b08      	cmp	r3, #8
 8005996:	d102      	bne.n	800599e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005998:	4b30      	ldr	r3, [pc, #192]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x100>)
 800599a:	613b      	str	r3, [r7, #16]
 800599c:	e054      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800599e:	4b2d      	ldr	r3, [pc, #180]	@ (8005a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	2238      	movs	r2, #56	@ 0x38
 80059a4:	4013      	ands	r3, r2
 80059a6:	2b10      	cmp	r3, #16
 80059a8:	d138      	bne.n	8005a1c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80059aa:	4b2a      	ldr	r3, [pc, #168]	@ (8005a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	2203      	movs	r2, #3
 80059b0:	4013      	ands	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059b4:	4b27      	ldr	r3, [pc, #156]	@ (8005a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	091b      	lsrs	r3, r3, #4
 80059ba:	2207      	movs	r2, #7
 80059bc:	4013      	ands	r3, r2
 80059be:	3301      	adds	r3, #1
 80059c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2b03      	cmp	r3, #3
 80059c6:	d10d      	bne.n	80059e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059c8:	68b9      	ldr	r1, [r7, #8]
 80059ca:	4824      	ldr	r0, [pc, #144]	@ (8005a5c <HAL_RCC_GetSysClockFreq+0x100>)
 80059cc:	f7fa fbae 	bl	800012c <__udivsi3>
 80059d0:	0003      	movs	r3, r0
 80059d2:	0019      	movs	r1, r3
 80059d4:	4b1f      	ldr	r3, [pc, #124]	@ (8005a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	0a1b      	lsrs	r3, r3, #8
 80059da:	227f      	movs	r2, #127	@ 0x7f
 80059dc:	4013      	ands	r3, r2
 80059de:	434b      	muls	r3, r1
 80059e0:	617b      	str	r3, [r7, #20]
        break;
 80059e2:	e00d      	b.n	8005a00 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80059e4:	68b9      	ldr	r1, [r7, #8]
 80059e6:	481c      	ldr	r0, [pc, #112]	@ (8005a58 <HAL_RCC_GetSysClockFreq+0xfc>)
 80059e8:	f7fa fba0 	bl	800012c <__udivsi3>
 80059ec:	0003      	movs	r3, r0
 80059ee:	0019      	movs	r1, r3
 80059f0:	4b18      	ldr	r3, [pc, #96]	@ (8005a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	0a1b      	lsrs	r3, r3, #8
 80059f6:	227f      	movs	r2, #127	@ 0x7f
 80059f8:	4013      	ands	r3, r2
 80059fa:	434b      	muls	r3, r1
 80059fc:	617b      	str	r3, [r7, #20]
        break;
 80059fe:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005a00:	4b14      	ldr	r3, [pc, #80]	@ (8005a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	0f5b      	lsrs	r3, r3, #29
 8005a06:	2207      	movs	r2, #7
 8005a08:	4013      	ands	r3, r2
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005a0e:	6879      	ldr	r1, [r7, #4]
 8005a10:	6978      	ldr	r0, [r7, #20]
 8005a12:	f7fa fb8b 	bl	800012c <__udivsi3>
 8005a16:	0003      	movs	r3, r0
 8005a18:	613b      	str	r3, [r7, #16]
 8005a1a:	e015      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8005a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	2238      	movs	r2, #56	@ 0x38
 8005a22:	4013      	ands	r3, r2
 8005a24:	2b20      	cmp	r3, #32
 8005a26:	d103      	bne.n	8005a30 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005a28:	2380      	movs	r3, #128	@ 0x80
 8005a2a:	021b      	lsls	r3, r3, #8
 8005a2c:	613b      	str	r3, [r7, #16]
 8005a2e:	e00b      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005a30:	4b08      	ldr	r3, [pc, #32]	@ (8005a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	2238      	movs	r2, #56	@ 0x38
 8005a36:	4013      	ands	r3, r2
 8005a38:	2b18      	cmp	r3, #24
 8005a3a:	d103      	bne.n	8005a44 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005a3c:	23fa      	movs	r3, #250	@ 0xfa
 8005a3e:	01db      	lsls	r3, r3, #7
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	e001      	b.n	8005a48 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a48:	693b      	ldr	r3, [r7, #16]
}
 8005a4a:	0018      	movs	r0, r3
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	b006      	add	sp, #24
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	46c0      	nop			@ (mov r8, r8)
 8005a54:	40021000 	.word	0x40021000
 8005a58:	00f42400 	.word	0x00f42400
 8005a5c:	007a1200 	.word	0x007a1200

08005a60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a64:	4b02      	ldr	r3, [pc, #8]	@ (8005a70 <HAL_RCC_GetHCLKFreq+0x10>)
 8005a66:	681b      	ldr	r3, [r3, #0]
}
 8005a68:	0018      	movs	r0, r3
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	46c0      	nop			@ (mov r8, r8)
 8005a70:	200004f4 	.word	0x200004f4

08005a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a74:	b5b0      	push	{r4, r5, r7, lr}
 8005a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005a78:	f7ff fff2 	bl	8005a60 <HAL_RCC_GetHCLKFreq>
 8005a7c:	0004      	movs	r4, r0
 8005a7e:	f7ff faf9 	bl	8005074 <LL_RCC_GetAPB1Prescaler>
 8005a82:	0003      	movs	r3, r0
 8005a84:	0b1a      	lsrs	r2, r3, #12
 8005a86:	4b05      	ldr	r3, [pc, #20]	@ (8005a9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a88:	0092      	lsls	r2, r2, #2
 8005a8a:	58d3      	ldr	r3, [r2, r3]
 8005a8c:	221f      	movs	r2, #31
 8005a8e:	4013      	ands	r3, r2
 8005a90:	40dc      	lsrs	r4, r3
 8005a92:	0023      	movs	r3, r4
}
 8005a94:	0018      	movs	r0, r3
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bdb0      	pop	{r4, r5, r7, pc}
 8005a9a:	46c0      	nop			@ (mov r8, r8)
 8005a9c:	0800a3b8 	.word	0x0800a3b8

08005aa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005aa8:	2313      	movs	r3, #19
 8005aaa:	18fb      	adds	r3, r7, r3
 8005aac:	2200      	movs	r2, #0
 8005aae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ab0:	2312      	movs	r3, #18
 8005ab2:	18fb      	adds	r3, r7, r3
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	2380      	movs	r3, #128	@ 0x80
 8005abe:	029b      	lsls	r3, r3, #10
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	d100      	bne.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005ac4:	e0ad      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ac6:	2011      	movs	r0, #17
 8005ac8:	183b      	adds	r3, r7, r0
 8005aca:	2200      	movs	r2, #0
 8005acc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ace:	4b47      	ldr	r3, [pc, #284]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005ad0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ad2:	2380      	movs	r3, #128	@ 0x80
 8005ad4:	055b      	lsls	r3, r3, #21
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	d110      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ada:	4b44      	ldr	r3, [pc, #272]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005adc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ade:	4b43      	ldr	r3, [pc, #268]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005ae0:	2180      	movs	r1, #128	@ 0x80
 8005ae2:	0549      	lsls	r1, r1, #21
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005ae8:	4b40      	ldr	r3, [pc, #256]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005aea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005aec:	2380      	movs	r3, #128	@ 0x80
 8005aee:	055b      	lsls	r3, r3, #21
 8005af0:	4013      	ands	r3, r2
 8005af2:	60bb      	str	r3, [r7, #8]
 8005af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005af6:	183b      	adds	r3, r7, r0
 8005af8:	2201      	movs	r2, #1
 8005afa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005afc:	4b3c      	ldr	r3, [pc, #240]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	4b3b      	ldr	r3, [pc, #236]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005b02:	2180      	movs	r1, #128	@ 0x80
 8005b04:	0049      	lsls	r1, r1, #1
 8005b06:	430a      	orrs	r2, r1
 8005b08:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b0a:	f7fe f967 	bl	8003ddc <HAL_GetTick>
 8005b0e:	0003      	movs	r3, r0
 8005b10:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b12:	e00b      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b14:	f7fe f962 	bl	8003ddc <HAL_GetTick>
 8005b18:	0002      	movs	r2, r0
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d904      	bls.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005b22:	2313      	movs	r3, #19
 8005b24:	18fb      	adds	r3, r7, r3
 8005b26:	2203      	movs	r2, #3
 8005b28:	701a      	strb	r2, [r3, #0]
        break;
 8005b2a:	e005      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b2c:	4b30      	ldr	r3, [pc, #192]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	2380      	movs	r3, #128	@ 0x80
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	4013      	ands	r3, r2
 8005b36:	d0ed      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005b38:	2313      	movs	r3, #19
 8005b3a:	18fb      	adds	r3, r7, r3
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d15e      	bne.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b42:	4b2a      	ldr	r3, [pc, #168]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005b44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b46:	23c0      	movs	r3, #192	@ 0xc0
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d019      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d014      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b5e:	4b23      	ldr	r3, [pc, #140]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b62:	4a24      	ldr	r2, [pc, #144]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005b64:	4013      	ands	r3, r2
 8005b66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b68:	4b20      	ldr	r3, [pc, #128]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005b6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005b6e:	2180      	movs	r1, #128	@ 0x80
 8005b70:	0249      	lsls	r1, r1, #9
 8005b72:	430a      	orrs	r2, r1
 8005b74:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b76:	4b1d      	ldr	r3, [pc, #116]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005b78:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005b7c:	491e      	ldr	r1, [pc, #120]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8005b7e:	400a      	ands	r2, r1
 8005b80:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b82:	4b1a      	ldr	r3, [pc, #104]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	d016      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b90:	f7fe f924 	bl	8003ddc <HAL_GetTick>
 8005b94:	0003      	movs	r3, r0
 8005b96:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b98:	e00c      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b9a:	f7fe f91f 	bl	8003ddc <HAL_GetTick>
 8005b9e:	0002      	movs	r2, r0
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	4a15      	ldr	r2, [pc, #84]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d904      	bls.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005baa:	2313      	movs	r3, #19
 8005bac:	18fb      	adds	r3, r7, r3
 8005bae:	2203      	movs	r2, #3
 8005bb0:	701a      	strb	r2, [r3, #0]
            break;
 8005bb2:	e004      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bb8:	2202      	movs	r2, #2
 8005bba:	4013      	ands	r3, r2
 8005bbc:	d0ed      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005bbe:	2313      	movs	r3, #19
 8005bc0:	18fb      	adds	r3, r7, r3
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10a      	bne.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bc8:	4b08      	ldr	r3, [pc, #32]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bcc:	4a09      	ldr	r2, [pc, #36]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005bce:	4013      	ands	r3, r2
 8005bd0:	0019      	movs	r1, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bd6:	4b05      	ldr	r3, [pc, #20]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005bdc:	e016      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bde:	2312      	movs	r3, #18
 8005be0:	18fb      	adds	r3, r7, r3
 8005be2:	2213      	movs	r2, #19
 8005be4:	18ba      	adds	r2, r7, r2
 8005be6:	7812      	ldrb	r2, [r2, #0]
 8005be8:	701a      	strb	r2, [r3, #0]
 8005bea:	e00f      	b.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005bec:	40021000 	.word	0x40021000
 8005bf0:	40007000 	.word	0x40007000
 8005bf4:	fffffcff 	.word	0xfffffcff
 8005bf8:	fffeffff 	.word	0xfffeffff
 8005bfc:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c00:	2312      	movs	r3, #18
 8005c02:	18fb      	adds	r3, r7, r3
 8005c04:	2213      	movs	r2, #19
 8005c06:	18ba      	adds	r2, r7, r2
 8005c08:	7812      	ldrb	r2, [r2, #0]
 8005c0a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c0c:	2311      	movs	r3, #17
 8005c0e:	18fb      	adds	r3, r7, r3
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d105      	bne.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c16:	4bb6      	ldr	r3, [pc, #728]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c1a:	4bb5      	ldr	r3, [pc, #724]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c1c:	49b5      	ldr	r1, [pc, #724]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8005c1e:	400a      	ands	r2, r1
 8005c20:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2201      	movs	r2, #1
 8005c28:	4013      	ands	r3, r2
 8005c2a:	d009      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c2c:	4bb0      	ldr	r3, [pc, #704]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c30:	2203      	movs	r2, #3
 8005c32:	4393      	bics	r3, r2
 8005c34:	0019      	movs	r1, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	4bad      	ldr	r3, [pc, #692]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2202      	movs	r2, #2
 8005c46:	4013      	ands	r3, r2
 8005c48:	d009      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c4a:	4ba9      	ldr	r3, [pc, #676]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c4e:	220c      	movs	r2, #12
 8005c50:	4393      	bics	r3, r2
 8005c52:	0019      	movs	r1, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	4ba5      	ldr	r3, [pc, #660]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2204      	movs	r2, #4
 8005c64:	4013      	ands	r3, r2
 8005c66:	d009      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c68:	4ba1      	ldr	r3, [pc, #644]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c6c:	2230      	movs	r2, #48	@ 0x30
 8005c6e:	4393      	bics	r3, r2
 8005c70:	0019      	movs	r1, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	4b9e      	ldr	r3, [pc, #632]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2210      	movs	r2, #16
 8005c82:	4013      	ands	r3, r2
 8005c84:	d009      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c86:	4b9a      	ldr	r3, [pc, #616]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c8a:	4a9b      	ldr	r2, [pc, #620]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	0019      	movs	r1, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691a      	ldr	r2, [r3, #16]
 8005c94:	4b96      	ldr	r3, [pc, #600]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c96:	430a      	orrs	r2, r1
 8005c98:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	2380      	movs	r3, #128	@ 0x80
 8005ca0:	015b      	lsls	r3, r3, #5
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	d009      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8005ca6:	4b92      	ldr	r3, [pc, #584]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005caa:	4a94      	ldr	r2, [pc, #592]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	0019      	movs	r1, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	695a      	ldr	r2, [r3, #20]
 8005cb4:	4b8e      	ldr	r3, [pc, #568]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	2380      	movs	r3, #128	@ 0x80
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	d009      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cc6:	4b8a      	ldr	r3, [pc, #552]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cca:	4a8d      	ldr	r2, [pc, #564]	@ (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005ccc:	4013      	ands	r3, r2
 8005cce:	0019      	movs	r1, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cd4:	4b86      	ldr	r3, [pc, #536]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	2380      	movs	r3, #128	@ 0x80
 8005ce0:	00db      	lsls	r3, r3, #3
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	d009      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ce6:	4b82      	ldr	r3, [pc, #520]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cea:	4a86      	ldr	r2, [pc, #536]	@ (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	0019      	movs	r1, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cf4:	4b7e      	ldr	r3, [pc, #504]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	4013      	ands	r3, r2
 8005d02:	d009      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d04:	4b7a      	ldr	r3, [pc, #488]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d08:	4a7f      	ldr	r2, [pc, #508]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	0019      	movs	r1, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	699a      	ldr	r2, [r3, #24]
 8005d12:	4b77      	ldr	r3, [pc, #476]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d14:	430a      	orrs	r2, r1
 8005d16:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2240      	movs	r2, #64	@ 0x40
 8005d1e:	4013      	ands	r3, r2
 8005d20:	d009      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d22:	4b73      	ldr	r3, [pc, #460]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d26:	4a79      	ldr	r2, [pc, #484]	@ (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005d28:	4013      	ands	r3, r2
 8005d2a:	0019      	movs	r1, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	69da      	ldr	r2, [r3, #28]
 8005d30:	4b6f      	ldr	r3, [pc, #444]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d32:	430a      	orrs	r2, r1
 8005d34:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	2380      	movs	r3, #128	@ 0x80
 8005d3c:	01db      	lsls	r3, r3, #7
 8005d3e:	4013      	ands	r3, r2
 8005d40:	d015      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d42:	4b6b      	ldr	r3, [pc, #428]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	0899      	lsrs	r1, r3, #2
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d4e:	4b68      	ldr	r3, [pc, #416]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d50:	430a      	orrs	r2, r1
 8005d52:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d58:	2380      	movs	r3, #128	@ 0x80
 8005d5a:	05db      	lsls	r3, r3, #23
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d106      	bne.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005d60:	4b63      	ldr	r3, [pc, #396]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	4b62      	ldr	r3, [pc, #392]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d66:	2180      	movs	r1, #128	@ 0x80
 8005d68:	0249      	lsls	r1, r1, #9
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	2380      	movs	r3, #128	@ 0x80
 8005d74:	031b      	lsls	r3, r3, #12
 8005d76:	4013      	ands	r3, r2
 8005d78:	d009      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d7a:	4b5d      	ldr	r3, [pc, #372]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d7e:	2240      	movs	r2, #64	@ 0x40
 8005d80:	4393      	bics	r3, r2
 8005d82:	0019      	movs	r1, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d88:	4b59      	ldr	r3, [pc, #356]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	2380      	movs	r3, #128	@ 0x80
 8005d94:	039b      	lsls	r3, r3, #14
 8005d96:	4013      	ands	r3, r2
 8005d98:	d016      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005d9a:	4b55      	ldr	r3, [pc, #340]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d9e:	4a5c      	ldr	r2, [pc, #368]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005da0:	4013      	ands	r3, r2
 8005da2:	0019      	movs	r1, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005da8:	4b51      	ldr	r3, [pc, #324]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005daa:	430a      	orrs	r2, r1
 8005dac:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005db2:	2380      	movs	r3, #128	@ 0x80
 8005db4:	03db      	lsls	r3, r3, #15
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d106      	bne.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005dba:	4b4d      	ldr	r3, [pc, #308]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	4b4c      	ldr	r3, [pc, #304]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005dc0:	2180      	movs	r1, #128	@ 0x80
 8005dc2:	0449      	lsls	r1, r1, #17
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	2380      	movs	r3, #128	@ 0x80
 8005dce:	03db      	lsls	r3, r3, #15
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	d016      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005dd4:	4b46      	ldr	r3, [pc, #280]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd8:	4a4e      	ldr	r2, [pc, #312]	@ (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005dda:	4013      	ands	r3, r2
 8005ddc:	0019      	movs	r1, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005de2:	4b43      	ldr	r3, [pc, #268]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005de4:	430a      	orrs	r2, r1
 8005de6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005dec:	2380      	movs	r3, #128	@ 0x80
 8005dee:	045b      	lsls	r3, r3, #17
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d106      	bne.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005df4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005df6:	68da      	ldr	r2, [r3, #12]
 8005df8:	4b3d      	ldr	r3, [pc, #244]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005dfa:	2180      	movs	r1, #128	@ 0x80
 8005dfc:	0449      	lsls	r1, r1, #17
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	2380      	movs	r3, #128	@ 0x80
 8005e08:	011b      	lsls	r3, r3, #4
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	d014      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005e0e:	4b38      	ldr	r3, [pc, #224]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e12:	2203      	movs	r2, #3
 8005e14:	4393      	bics	r3, r2
 8005e16:	0019      	movs	r1, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a1a      	ldr	r2, [r3, #32]
 8005e1c:	4b34      	ldr	r3, [pc, #208]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d106      	bne.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005e2a:	4b31      	ldr	r3, [pc, #196]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e2c:	68da      	ldr	r2, [r3, #12]
 8005e2e:	4b30      	ldr	r3, [pc, #192]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e30:	2180      	movs	r1, #128	@ 0x80
 8005e32:	0249      	lsls	r1, r1, #9
 8005e34:	430a      	orrs	r2, r1
 8005e36:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	2380      	movs	r3, #128	@ 0x80
 8005e3e:	019b      	lsls	r3, r3, #6
 8005e40:	4013      	ands	r3, r2
 8005e42:	d014      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005e44:	4b2a      	ldr	r3, [pc, #168]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e48:	220c      	movs	r2, #12
 8005e4a:	4393      	bics	r3, r2
 8005e4c:	0019      	movs	r1, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e52:	4b27      	ldr	r3, [pc, #156]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e54:	430a      	orrs	r2, r1
 8005e56:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5c:	2b04      	cmp	r3, #4
 8005e5e:	d106      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005e60:	4b23      	ldr	r3, [pc, #140]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	4b22      	ldr	r3, [pc, #136]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e66:	2180      	movs	r1, #128	@ 0x80
 8005e68:	0249      	lsls	r1, r1, #9
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	2380      	movs	r3, #128	@ 0x80
 8005e74:	045b      	lsls	r3, r3, #17
 8005e76:	4013      	ands	r3, r2
 8005e78:	d016      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e7e:	4a22      	ldr	r2, [pc, #136]	@ (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005e80:	4013      	ands	r3, r2
 8005e82:	0019      	movs	r1, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e88:	4b19      	ldr	r3, [pc, #100]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e92:	2380      	movs	r3, #128	@ 0x80
 8005e94:	019b      	lsls	r3, r3, #6
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d106      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005e9a:	4b15      	ldr	r3, [pc, #84]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	4b14      	ldr	r3, [pc, #80]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ea0:	2180      	movs	r1, #128	@ 0x80
 8005ea2:	0449      	lsls	r1, r1, #17
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	2380      	movs	r3, #128	@ 0x80
 8005eae:	049b      	lsls	r3, r3, #18
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	d016      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eb8:	4a10      	ldr	r2, [pc, #64]	@ (8005efc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005eba:	4013      	ands	r3, r2
 8005ebc:	0019      	movs	r1, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ecc:	2380      	movs	r3, #128	@ 0x80
 8005ece:	005b      	lsls	r3, r3, #1
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d106      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005ed4:	4b06      	ldr	r3, [pc, #24]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ed6:	68da      	ldr	r2, [r3, #12]
 8005ed8:	4b05      	ldr	r3, [pc, #20]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005eda:	2180      	movs	r1, #128	@ 0x80
 8005edc:	0449      	lsls	r1, r1, #17
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005ee2:	2312      	movs	r3, #18
 8005ee4:	18fb      	adds	r3, r7, r3
 8005ee6:	781b      	ldrb	r3, [r3, #0]
}
 8005ee8:	0018      	movs	r0, r3
 8005eea:	46bd      	mov	sp, r7
 8005eec:	b006      	add	sp, #24
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	40021000 	.word	0x40021000
 8005ef4:	efffffff 	.word	0xefffffff
 8005ef8:	fffff3ff 	.word	0xfffff3ff
 8005efc:	fffffcff 	.word	0xfffffcff
 8005f00:	fff3ffff 	.word	0xfff3ffff
 8005f04:	ffcfffff 	.word	0xffcfffff
 8005f08:	ffffcfff 	.word	0xffffcfff
 8005f0c:	ffff3fff 	.word	0xffff3fff
 8005f10:	ffbfffff 	.word	0xffbfffff
 8005f14:	feffffff 	.word	0xfeffffff

08005f18 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005f18:	b5b0      	push	{r4, r5, r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005f20:	230f      	movs	r3, #15
 8005f22:	18fb      	adds	r3, r7, r3
 8005f24:	2201      	movs	r2, #1
 8005f26:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d100      	bne.n	8005f30 <HAL_RTC_Init+0x18>
 8005f2e:	e08c      	b.n	800604a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2229      	movs	r2, #41	@ 0x29
 8005f34:	5c9b      	ldrb	r3, [r3, r2]
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10b      	bne.n	8005f54 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2228      	movs	r2, #40	@ 0x28
 8005f40:	2100      	movs	r1, #0
 8005f42:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2288      	movs	r2, #136	@ 0x88
 8005f48:	0212      	lsls	r2, r2, #8
 8005f4a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	0018      	movs	r0, r3
 8005f50:	f7fd fc7e 	bl	8003850 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2229      	movs	r2, #41	@ 0x29
 8005f58:	2102      	movs	r1, #2
 8005f5a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	2210      	movs	r2, #16
 8005f64:	4013      	ands	r3, r2
 8005f66:	2b10      	cmp	r3, #16
 8005f68:	d062      	beq.n	8006030 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	22ca      	movs	r2, #202	@ 0xca
 8005f70:	625a      	str	r2, [r3, #36]	@ 0x24
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2253      	movs	r2, #83	@ 0x53
 8005f78:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005f7a:	250f      	movs	r5, #15
 8005f7c:	197c      	adds	r4, r7, r5
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	0018      	movs	r0, r3
 8005f82:	f000 fc0f 	bl	80067a4 <RTC_EnterInitMode>
 8005f86:	0003      	movs	r3, r0
 8005f88:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8005f8a:	0028      	movs	r0, r5
 8005f8c:	183b      	adds	r3, r7, r0
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d12c      	bne.n	8005fee <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699a      	ldr	r2, [r3, #24]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	492e      	ldr	r1, [pc, #184]	@ (8006058 <HAL_RTC_Init+0x140>)
 8005fa0:	400a      	ands	r2, r1
 8005fa2:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6999      	ldr	r1, [r3, #24]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689a      	ldr	r2, [r3, #8]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	69db      	ldr	r3, [r3, #28]
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	6912      	ldr	r2, [r2, #16]
 8005fca:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6919      	ldr	r1, [r3, #16]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	041a      	lsls	r2, r3, #16
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005fe0:	183c      	adds	r4, r7, r0
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	f000 fc1f 	bl	8006828 <RTC_ExitInitMode>
 8005fea:	0003      	movs	r3, r0
 8005fec:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8005fee:	230f      	movs	r3, #15
 8005ff0:	18fb      	adds	r3, r7, r3
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d116      	bne.n	8006026 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	699a      	ldr	r2, [r3, #24]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	00d2      	lsls	r2, r2, #3
 8006004:	08d2      	lsrs	r2, r2, #3
 8006006:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6999      	ldr	r1, [r3, #24]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	431a      	orrs	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	431a      	orrs	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	22ff      	movs	r2, #255	@ 0xff
 800602c:	625a      	str	r2, [r3, #36]	@ 0x24
 800602e:	e003      	b.n	8006038 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006030:	230f      	movs	r3, #15
 8006032:	18fb      	adds	r3, r7, r3
 8006034:	2200      	movs	r2, #0
 8006036:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8006038:	230f      	movs	r3, #15
 800603a:	18fb      	adds	r3, r7, r3
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d103      	bne.n	800604a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2229      	movs	r2, #41	@ 0x29
 8006046:	2101      	movs	r1, #1
 8006048:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800604a:	230f      	movs	r3, #15
 800604c:	18fb      	adds	r3, r7, r3
 800604e:	781b      	ldrb	r3, [r3, #0]
}
 8006050:	0018      	movs	r0, r3
 8006052:	46bd      	mov	sp, r7
 8006054:	b004      	add	sp, #16
 8006056:	bdb0      	pop	{r4, r5, r7, pc}
 8006058:	fb8fffbf 	.word	0xfb8fffbf

0800605c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800605c:	b5b0      	push	{r4, r5, r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2228      	movs	r2, #40	@ 0x28
 800606c:	5c9b      	ldrb	r3, [r3, r2]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d101      	bne.n	8006076 <HAL_RTC_SetTime+0x1a>
 8006072:	2302      	movs	r3, #2
 8006074:	e092      	b.n	800619c <HAL_RTC_SetTime+0x140>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2228      	movs	r2, #40	@ 0x28
 800607a:	2101      	movs	r1, #1
 800607c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2229      	movs	r2, #41	@ 0x29
 8006082:	2102      	movs	r1, #2
 8006084:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	22ca      	movs	r2, #202	@ 0xca
 800608c:	625a      	str	r2, [r3, #36]	@ 0x24
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2253      	movs	r2, #83	@ 0x53
 8006094:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006096:	2513      	movs	r5, #19
 8006098:	197c      	adds	r4, r7, r5
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	0018      	movs	r0, r3
 800609e:	f000 fb81 	bl	80067a4 <RTC_EnterInitMode>
 80060a2:	0003      	movs	r3, r0
 80060a4:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80060a6:	197b      	adds	r3, r7, r5
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d162      	bne.n	8006174 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d125      	bne.n	8006100 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	2240      	movs	r2, #64	@ 0x40
 80060bc:	4013      	ands	r3, r2
 80060be:	d102      	bne.n	80060c6 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2200      	movs	r2, #0
 80060c4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	0018      	movs	r0, r3
 80060cc:	f000 fbf0 	bl	80068b0 <RTC_ByteToBcd2>
 80060d0:	0003      	movs	r3, r0
 80060d2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	785b      	ldrb	r3, [r3, #1]
 80060d8:	0018      	movs	r0, r3
 80060da:	f000 fbe9 	bl	80068b0 <RTC_ByteToBcd2>
 80060de:	0003      	movs	r3, r0
 80060e0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80060e2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	789b      	ldrb	r3, [r3, #2]
 80060e8:	0018      	movs	r0, r3
 80060ea:	f000 fbe1 	bl	80068b0 <RTC_ByteToBcd2>
 80060ee:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80060f0:	0022      	movs	r2, r4
 80060f2:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	78db      	ldrb	r3, [r3, #3]
 80060f8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80060fa:	4313      	orrs	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]
 80060fe:	e017      	b.n	8006130 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	2240      	movs	r2, #64	@ 0x40
 8006108:	4013      	ands	r3, r2
 800610a:	d102      	bne.n	8006112 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2200      	movs	r2, #0
 8006110:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	785b      	ldrb	r3, [r3, #1]
 800611c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800611e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006124:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	78db      	ldrb	r3, [r3, #3]
 800612a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800612c:	4313      	orrs	r3, r2
 800612e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	491b      	ldr	r1, [pc, #108]	@ (80061a4 <HAL_RTC_SetTime+0x148>)
 8006138:	400a      	ands	r2, r1
 800613a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699a      	ldr	r2, [r3, #24]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4918      	ldr	r1, [pc, #96]	@ (80061a8 <HAL_RTC_SetTime+0x14c>)
 8006148:	400a      	ands	r2, r1
 800614a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6999      	ldr	r1, [r3, #24]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	431a      	orrs	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006164:	2313      	movs	r3, #19
 8006166:	18fc      	adds	r4, r7, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	0018      	movs	r0, r3
 800616c:	f000 fb5c 	bl	8006828 <RTC_ExitInitMode>
 8006170:	0003      	movs	r3, r0
 8006172:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	22ff      	movs	r2, #255	@ 0xff
 800617a:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 800617c:	2313      	movs	r3, #19
 800617e:	18fb      	adds	r3, r7, r3
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d103      	bne.n	800618e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2229      	movs	r2, #41	@ 0x29
 800618a:	2101      	movs	r1, #1
 800618c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2228      	movs	r2, #40	@ 0x28
 8006192:	2100      	movs	r1, #0
 8006194:	5499      	strb	r1, [r3, r2]

  return status;
 8006196:	2313      	movs	r3, #19
 8006198:	18fb      	adds	r3, r7, r3
 800619a:	781b      	ldrb	r3, [r3, #0]
}
 800619c:	0018      	movs	r0, r3
 800619e:	46bd      	mov	sp, r7
 80061a0:	b006      	add	sp, #24
 80061a2:	bdb0      	pop	{r4, r5, r7, pc}
 80061a4:	007f7f7f 	.word	0x007f7f7f
 80061a8:	fffbffff 	.word	0xfffbffff

080061ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80061ac:	b5b0      	push	{r4, r5, r7, lr}
 80061ae:	b086      	sub	sp, #24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2228      	movs	r2, #40	@ 0x28
 80061bc:	5c9b      	ldrb	r3, [r3, r2]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d101      	bne.n	80061c6 <HAL_RTC_SetDate+0x1a>
 80061c2:	2302      	movs	r3, #2
 80061c4:	e07e      	b.n	80062c4 <HAL_RTC_SetDate+0x118>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2228      	movs	r2, #40	@ 0x28
 80061ca:	2101      	movs	r1, #1
 80061cc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2229      	movs	r2, #41	@ 0x29
 80061d2:	2102      	movs	r1, #2
 80061d4:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10e      	bne.n	80061fa <HAL_RTC_SetDate+0x4e>
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	785b      	ldrb	r3, [r3, #1]
 80061e0:	001a      	movs	r2, r3
 80061e2:	2310      	movs	r3, #16
 80061e4:	4013      	ands	r3, r2
 80061e6:	d008      	beq.n	80061fa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	785b      	ldrb	r3, [r3, #1]
 80061ec:	2210      	movs	r2, #16
 80061ee:	4393      	bics	r3, r2
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	330a      	adds	r3, #10
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d11c      	bne.n	800623a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	78db      	ldrb	r3, [r3, #3]
 8006204:	0018      	movs	r0, r3
 8006206:	f000 fb53 	bl	80068b0 <RTC_ByteToBcd2>
 800620a:	0003      	movs	r3, r0
 800620c:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	785b      	ldrb	r3, [r3, #1]
 8006212:	0018      	movs	r0, r3
 8006214:	f000 fb4c 	bl	80068b0 <RTC_ByteToBcd2>
 8006218:	0003      	movs	r3, r0
 800621a:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800621c:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	789b      	ldrb	r3, [r3, #2]
 8006222:	0018      	movs	r0, r3
 8006224:	f000 fb44 	bl	80068b0 <RTC_ByteToBcd2>
 8006228:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800622a:	0022      	movs	r2, r4
 800622c:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006234:	4313      	orrs	r3, r2
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	e00e      	b.n	8006258 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	78db      	ldrb	r3, [r3, #3]
 800623e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	785b      	ldrb	r3, [r3, #1]
 8006244:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006246:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800624c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006254:	4313      	orrs	r3, r2
 8006256:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	22ca      	movs	r2, #202	@ 0xca
 800625e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2253      	movs	r2, #83	@ 0x53
 8006266:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006268:	2513      	movs	r5, #19
 800626a:	197c      	adds	r4, r7, r5
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	0018      	movs	r0, r3
 8006270:	f000 fa98 	bl	80067a4 <RTC_EnterInitMode>
 8006274:	0003      	movs	r3, r0
 8006276:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8006278:	0028      	movs	r0, r5
 800627a:	183b      	adds	r3, r7, r0
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10c      	bne.n	800629c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	4910      	ldr	r1, [pc, #64]	@ (80062cc <HAL_RTC_SetDate+0x120>)
 800628a:	400a      	ands	r2, r1
 800628c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800628e:	183c      	adds	r4, r7, r0
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	0018      	movs	r0, r3
 8006294:	f000 fac8 	bl	8006828 <RTC_ExitInitMode>
 8006298:	0003      	movs	r3, r0
 800629a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	22ff      	movs	r2, #255	@ 0xff
 80062a2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80062a4:	2313      	movs	r3, #19
 80062a6:	18fb      	adds	r3, r7, r3
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d103      	bne.n	80062b6 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2229      	movs	r2, #41	@ 0x29
 80062b2:	2101      	movs	r1, #1
 80062b4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2228      	movs	r2, #40	@ 0x28
 80062ba:	2100      	movs	r1, #0
 80062bc:	5499      	strb	r1, [r3, r2]

  return status;
 80062be:	2313      	movs	r3, #19
 80062c0:	18fb      	adds	r3, r7, r3
 80062c2:	781b      	ldrb	r3, [r3, #0]
}
 80062c4:	0018      	movs	r0, r3
 80062c6:	46bd      	mov	sp, r7
 80062c8:	b006      	add	sp, #24
 80062ca:	bdb0      	pop	{r4, r5, r7, pc}
 80062cc:	00ffff3f 	.word	0x00ffff3f

080062d0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80062d0:	b590      	push	{r4, r7, lr}
 80062d2:	b089      	sub	sp, #36	@ 0x24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2228      	movs	r2, #40	@ 0x28
 80062e0:	5c9b      	ldrb	r3, [r3, r2]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d101      	bne.n	80062ea <HAL_RTC_SetAlarm_IT+0x1a>
 80062e6:	2302      	movs	r3, #2
 80062e8:	e127      	b.n	800653a <HAL_RTC_SetAlarm_IT+0x26a>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2228      	movs	r2, #40	@ 0x28
 80062ee:	2101      	movs	r1, #1
 80062f0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2229      	movs	r2, #41	@ 0x29
 80062f6:	2102      	movs	r1, #2
 80062f8:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d136      	bne.n	800636e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	2240      	movs	r2, #64	@ 0x40
 8006308:	4013      	ands	r3, r2
 800630a:	d102      	bne.n	8006312 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2200      	movs	r2, #0
 8006310:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	0018      	movs	r0, r3
 8006318:	f000 faca 	bl	80068b0 <RTC_ByteToBcd2>
 800631c:	0003      	movs	r3, r0
 800631e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	785b      	ldrb	r3, [r3, #1]
 8006324:	0018      	movs	r0, r3
 8006326:	f000 fac3 	bl	80068b0 <RTC_ByteToBcd2>
 800632a:	0003      	movs	r3, r0
 800632c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800632e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	789b      	ldrb	r3, [r3, #2]
 8006334:	0018      	movs	r0, r3
 8006336:	f000 fabb 	bl	80068b0 <RTC_ByteToBcd2>
 800633a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800633c:	0022      	movs	r2, r4
 800633e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	78db      	ldrb	r3, [r3, #3]
 8006344:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006346:	431a      	orrs	r2, r3
 8006348:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	2220      	movs	r2, #32
 800634e:	5c9b      	ldrb	r3, [r3, r2]
 8006350:	0018      	movs	r0, r3
 8006352:	f000 faad 	bl	80068b0 <RTC_ByteToBcd2>
 8006356:	0003      	movs	r3, r0
 8006358:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800635a:	0022      	movs	r2, r4
 800635c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006362:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006368:	4313      	orrs	r3, r2
 800636a:	61fb      	str	r3, [r7, #28]
 800636c:	e022      	b.n	80063b4 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	2240      	movs	r2, #64	@ 0x40
 8006376:	4013      	ands	r3, r2
 8006378:	d102      	bne.n	8006380 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2200      	movs	r2, #0
 800637e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	785b      	ldrb	r3, [r3, #1]
 800638a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800638c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006392:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	78db      	ldrb	r3, [r3, #3]
 8006398:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800639a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2120      	movs	r1, #32
 80063a0:	5c5b      	ldrb	r3, [r3, r1]
 80063a2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80063a4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80063aa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80063b0:	4313      	orrs	r3, r2
 80063b2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	4313      	orrs	r3, r2
 80063be:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	22ca      	movs	r2, #202	@ 0xca
 80063c6:	625a      	str	r2, [r3, #36]	@ 0x24
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2253      	movs	r2, #83	@ 0x53
 80063ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063d4:	2380      	movs	r3, #128	@ 0x80
 80063d6:	005b      	lsls	r3, r3, #1
 80063d8:	429a      	cmp	r2, r3
 80063da:	d14c      	bne.n	8006476 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4957      	ldr	r1, [pc, #348]	@ (8006544 <HAL_RTC_SetAlarm_IT+0x274>)
 80063e8:	400a      	ands	r2, r1
 80063ea:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2101      	movs	r1, #1
 80063f8:	430a      	orrs	r2, r1
 80063fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 80063fc:	f7fd fcee 	bl	8003ddc <HAL_GetTick>
 8006400:	0003      	movs	r3, r0
 8006402:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006404:	e016      	b.n	8006434 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006406:	f7fd fce9 	bl	8003ddc <HAL_GetTick>
 800640a:	0002      	movs	r2, r0
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	1ad2      	subs	r2, r2, r3
 8006410:	23fa      	movs	r3, #250	@ 0xfa
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	429a      	cmp	r2, r3
 8006416:	d90d      	bls.n	8006434 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	22ff      	movs	r2, #255	@ 0xff
 800641e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2229      	movs	r2, #41	@ 0x29
 8006424:	2103      	movs	r1, #3
 8006426:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2228      	movs	r2, #40	@ 0x28
 800642c:	2100      	movs	r1, #0
 800642e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e082      	b.n	800653a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	2201      	movs	r2, #1
 800643c:	4013      	ands	r3, r2
 800643e:	d0e2      	beq.n	8006406 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	69fa      	ldr	r2, [r7, #28]
 8006446:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699a      	ldr	r2, [r3, #24]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2180      	movs	r1, #128	@ 0x80
 800645c:	0049      	lsls	r1, r1, #1
 800645e:	430a      	orrs	r2, r1
 8006460:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	699a      	ldr	r2, [r3, #24]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2180      	movs	r1, #128	@ 0x80
 800646e:	0149      	lsls	r1, r1, #5
 8006470:	430a      	orrs	r2, r1
 8006472:	619a      	str	r2, [r3, #24]
 8006474:	e04b      	b.n	800650e <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	699a      	ldr	r2, [r3, #24]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4931      	ldr	r1, [pc, #196]	@ (8006548 <HAL_RTC_SetAlarm_IT+0x278>)
 8006482:	400a      	ands	r2, r1
 8006484:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2102      	movs	r1, #2
 8006492:	430a      	orrs	r2, r1
 8006494:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8006496:	f7fd fca1 	bl	8003ddc <HAL_GetTick>
 800649a:	0003      	movs	r3, r0
 800649c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800649e:	e016      	b.n	80064ce <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80064a0:	f7fd fc9c 	bl	8003ddc <HAL_GetTick>
 80064a4:	0002      	movs	r2, r0
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	1ad2      	subs	r2, r2, r3
 80064aa:	23fa      	movs	r3, #250	@ 0xfa
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d90d      	bls.n	80064ce <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	22ff      	movs	r2, #255	@ 0xff
 80064b8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2229      	movs	r2, #41	@ 0x29
 80064be:	2103      	movs	r1, #3
 80064c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2228      	movs	r2, #40	@ 0x28
 80064c6:	2100      	movs	r1, #0
 80064c8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e035      	b.n	800653a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	2202      	movs	r2, #2
 80064d6:	4013      	ands	r3, r2
 80064d8:	d0e2      	beq.n	80064a0 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	69fa      	ldr	r2, [r7, #28]
 80064e0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	699a      	ldr	r2, [r3, #24]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2180      	movs	r1, #128	@ 0x80
 80064f6:	0089      	lsls	r1, r1, #2
 80064f8:	430a      	orrs	r2, r1
 80064fa:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	699a      	ldr	r2, [r3, #24]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2180      	movs	r1, #128	@ 0x80
 8006508:	0189      	lsls	r1, r1, #6
 800650a:	430a      	orrs	r2, r1
 800650c:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800650e:	4a0f      	ldr	r2, [pc, #60]	@ (800654c <HAL_RTC_SetAlarm_IT+0x27c>)
 8006510:	2380      	movs	r3, #128	@ 0x80
 8006512:	58d3      	ldr	r3, [r2, r3]
 8006514:	490d      	ldr	r1, [pc, #52]	@ (800654c <HAL_RTC_SetAlarm_IT+0x27c>)
 8006516:	2280      	movs	r2, #128	@ 0x80
 8006518:	0312      	lsls	r2, r2, #12
 800651a:	4313      	orrs	r3, r2
 800651c:	2280      	movs	r2, #128	@ 0x80
 800651e:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	22ff      	movs	r2, #255	@ 0xff
 8006526:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2229      	movs	r2, #41	@ 0x29
 800652c:	2101      	movs	r1, #1
 800652e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2228      	movs	r2, #40	@ 0x28
 8006534:	2100      	movs	r1, #0
 8006536:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	0018      	movs	r0, r3
 800653c:	46bd      	mov	sp, r7
 800653e:	b009      	add	sp, #36	@ 0x24
 8006540:	bd90      	pop	{r4, r7, pc}
 8006542:	46c0      	nop			@ (mov r8, r8)
 8006544:	fffffeff 	.word	0xfffffeff
 8006548:	fffffdff 	.word	0xfffffdff
 800654c:	40021800 	.word	0x40021800

08006550 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
 800655c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	2380      	movs	r3, #128	@ 0x80
 8006562:	005b      	lsls	r3, r3, #1
 8006564:	429a      	cmp	r2, r3
 8006566:	d144      	bne.n	80065f2 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2280      	movs	r2, #128	@ 0x80
 800656c:	0052      	lsls	r2, r2, #1
 800656e:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006576:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800657e:	045b      	lsls	r3, r3, #17
 8006580:	0c5b      	lsrs	r3, r3, #17
 8006582:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	0c1b      	lsrs	r3, r3, #16
 8006588:	b2db      	uxtb	r3, r3
 800658a:	223f      	movs	r2, #63	@ 0x3f
 800658c:	4013      	ands	r3, r2
 800658e:	b2da      	uxtb	r2, r3
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	0a1b      	lsrs	r3, r3, #8
 8006598:	b2db      	uxtb	r3, r3
 800659a:	227f      	movs	r2, #127	@ 0x7f
 800659c:	4013      	ands	r3, r2
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	227f      	movs	r2, #127	@ 0x7f
 80065aa:	4013      	ands	r3, r2
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	0d9b      	lsrs	r3, r3, #22
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2201      	movs	r2, #1
 80065ba:	4013      	ands	r3, r2
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	0e1b      	lsrs	r3, r3, #24
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	223f      	movs	r2, #63	@ 0x3f
 80065d0:	4013      	ands	r3, r2
 80065d2:	b2d9      	uxtb	r1, r3
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2220      	movs	r2, #32
 80065d8:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	2380      	movs	r3, #128	@ 0x80
 80065de:	05db      	lsls	r3, r3, #23
 80065e0:	401a      	ands	r2, r3
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	4a3b      	ldr	r2, [pc, #236]	@ (80066d8 <HAL_RTC_GetAlarm+0x188>)
 80065ea:	401a      	ands	r2, r3
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	615a      	str	r2, [r3, #20]
 80065f0:	e043      	b.n	800667a <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2280      	movs	r2, #128	@ 0x80
 80065f6:	0092      	lsls	r2, r2, #2
 80065f8:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006600:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006608:	045b      	lsls	r3, r3, #17
 800660a:	0c5b      	lsrs	r3, r3, #17
 800660c:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	0c1b      	lsrs	r3, r3, #16
 8006612:	b2db      	uxtb	r3, r3
 8006614:	223f      	movs	r2, #63	@ 0x3f
 8006616:	4013      	ands	r3, r2
 8006618:	b2da      	uxtb	r2, r3
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	0a1b      	lsrs	r3, r3, #8
 8006622:	b2db      	uxtb	r3, r3
 8006624:	227f      	movs	r2, #127	@ 0x7f
 8006626:	4013      	ands	r3, r2
 8006628:	b2da      	uxtb	r2, r3
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	b2db      	uxtb	r3, r3
 8006632:	227f      	movs	r2, #127	@ 0x7f
 8006634:	4013      	ands	r3, r2
 8006636:	b2da      	uxtb	r2, r3
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	0d9b      	lsrs	r3, r3, #22
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2201      	movs	r2, #1
 8006644:	4013      	ands	r3, r2
 8006646:	b2da      	uxtb	r2, r3
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	0e1b      	lsrs	r3, r3, #24
 8006656:	b2db      	uxtb	r3, r3
 8006658:	223f      	movs	r2, #63	@ 0x3f
 800665a:	4013      	ands	r3, r2
 800665c:	b2d9      	uxtb	r1, r3
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2220      	movs	r2, #32
 8006662:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	2380      	movs	r3, #128	@ 0x80
 8006668:	05db      	lsls	r3, r3, #23
 800666a:	401a      	ands	r2, r3
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	4a19      	ldr	r2, [pc, #100]	@ (80066d8 <HAL_RTC_GetAlarm+0x188>)
 8006674:	401a      	ands	r2, r3
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d125      	bne.n	80066cc <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	0018      	movs	r0, r3
 8006686:	f000 f93b 	bl	8006900 <RTC_Bcd2ToByte>
 800668a:	0003      	movs	r3, r0
 800668c:	001a      	movs	r2, r3
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	785b      	ldrb	r3, [r3, #1]
 8006696:	0018      	movs	r0, r3
 8006698:	f000 f932 	bl	8006900 <RTC_Bcd2ToByte>
 800669c:	0003      	movs	r3, r0
 800669e:	001a      	movs	r2, r3
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	789b      	ldrb	r3, [r3, #2]
 80066a8:	0018      	movs	r0, r3
 80066aa:	f000 f929 	bl	8006900 <RTC_Bcd2ToByte>
 80066ae:	0003      	movs	r3, r0
 80066b0:	001a      	movs	r2, r3
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2220      	movs	r2, #32
 80066ba:	5c9b      	ldrb	r3, [r3, r2]
 80066bc:	0018      	movs	r0, r3
 80066be:	f000 f91f 	bl	8006900 <RTC_Bcd2ToByte>
 80066c2:	0003      	movs	r3, r0
 80066c4:	0019      	movs	r1, r3
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2220      	movs	r2, #32
 80066ca:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	0018      	movs	r0, r3
 80066d0:	46bd      	mov	sp, r7
 80066d2:	b006      	add	sp, #24
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	46c0      	nop			@ (mov r8, r8)
 80066d8:	80808080 	.word	0x80808080

080066dc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	2380      	movs	r3, #128	@ 0x80
 80066ec:	015b      	lsls	r3, r3, #5
 80066ee:	4013      	ands	r3, r2
 80066f0:	d011      	beq.n	8006716 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066f8:	2201      	movs	r2, #1
 80066fa:	4013      	ands	r3, r2
 80066fc:	d00b      	beq.n	8006716 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2101      	movs	r1, #1
 800670a:	430a      	orrs	r2, r1
 800670c:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	0018      	movs	r0, r3
 8006712:	f7fc fba9 	bl	8002e68 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	699a      	ldr	r2, [r3, #24]
 800671c:	2380      	movs	r3, #128	@ 0x80
 800671e:	019b      	lsls	r3, r3, #6
 8006720:	4013      	ands	r3, r2
 8006722:	d011      	beq.n	8006748 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800672a:	2202      	movs	r2, #2
 800672c:	4013      	ands	r3, r2
 800672e:	d00b      	beq.n	8006748 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2102      	movs	r1, #2
 800673c:	430a      	orrs	r2, r1
 800673e:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	0018      	movs	r0, r3
 8006744:	f000 f9ba 	bl	8006abc <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2229      	movs	r2, #41	@ 0x29
 800674c:	2101      	movs	r1, #1
 800674e:	5499      	strb	r1, [r3, r2]
}
 8006750:	46c0      	nop			@ (mov r8, r8)
 8006752:	46bd      	mov	sp, r7
 8006754:	b002      	add	sp, #8
 8006756:	bd80      	pop	{r7, pc}

08006758 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a0e      	ldr	r2, [pc, #56]	@ (80067a0 <HAL_RTC_WaitForSynchro+0x48>)
 8006766:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006768:	f7fd fb38 	bl	8003ddc <HAL_GetTick>
 800676c:	0003      	movs	r3, r0
 800676e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006770:	e00a      	b.n	8006788 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006772:	f7fd fb33 	bl	8003ddc <HAL_GetTick>
 8006776:	0002      	movs	r2, r0
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	1ad2      	subs	r2, r2, r3
 800677c:	23fa      	movs	r3, #250	@ 0xfa
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	429a      	cmp	r2, r3
 8006782:	d901      	bls.n	8006788 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e006      	b.n	8006796 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	2220      	movs	r2, #32
 8006790:	4013      	ands	r3, r2
 8006792:	d0ee      	beq.n	8006772 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	0018      	movs	r0, r3
 8006798:	46bd      	mov	sp, r7
 800679a:	b004      	add	sp, #16
 800679c:	bd80      	pop	{r7, pc}
 800679e:	46c0      	nop			@ (mov r8, r8)
 80067a0:	0001005f 	.word	0x0001005f

080067a4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80067ac:	230f      	movs	r3, #15
 80067ae:	18fb      	adds	r3, r7, r3
 80067b0:	2200      	movs	r2, #0
 80067b2:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	2240      	movs	r2, #64	@ 0x40
 80067bc:	4013      	ands	r3, r2
 80067be:	d12c      	bne.n	800681a <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2180      	movs	r1, #128	@ 0x80
 80067cc:	430a      	orrs	r2, r1
 80067ce:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80067d0:	f7fd fb04 	bl	8003ddc <HAL_GetTick>
 80067d4:	0003      	movs	r3, r0
 80067d6:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80067d8:	e014      	b.n	8006804 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80067da:	f7fd faff 	bl	8003ddc <HAL_GetTick>
 80067de:	0002      	movs	r2, r0
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	1ad2      	subs	r2, r2, r3
 80067e4:	200f      	movs	r0, #15
 80067e6:	183b      	adds	r3, r7, r0
 80067e8:	1839      	adds	r1, r7, r0
 80067ea:	7809      	ldrb	r1, [r1, #0]
 80067ec:	7019      	strb	r1, [r3, #0]
 80067ee:	23fa      	movs	r3, #250	@ 0xfa
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d906      	bls.n	8006804 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80067f6:	183b      	adds	r3, r7, r0
 80067f8:	2203      	movs	r2, #3
 80067fa:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2229      	movs	r2, #41	@ 0x29
 8006800:	2103      	movs	r1, #3
 8006802:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	2240      	movs	r2, #64	@ 0x40
 800680c:	4013      	ands	r3, r2
 800680e:	d104      	bne.n	800681a <RTC_EnterInitMode+0x76>
 8006810:	230f      	movs	r3, #15
 8006812:	18fb      	adds	r3, r7, r3
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	2b03      	cmp	r3, #3
 8006818:	d1df      	bne.n	80067da <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800681a:	230f      	movs	r3, #15
 800681c:	18fb      	adds	r3, r7, r3
 800681e:	781b      	ldrb	r3, [r3, #0]
}
 8006820:	0018      	movs	r0, r3
 8006822:	46bd      	mov	sp, r7
 8006824:	b004      	add	sp, #16
 8006826:	bd80      	pop	{r7, pc}

08006828 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006828:	b590      	push	{r4, r7, lr}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006830:	240f      	movs	r4, #15
 8006832:	193b      	adds	r3, r7, r4
 8006834:	2200      	movs	r2, #0
 8006836:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006838:	4b1c      	ldr	r3, [pc, #112]	@ (80068ac <RTC_ExitInitMode+0x84>)
 800683a:	68da      	ldr	r2, [r3, #12]
 800683c:	4b1b      	ldr	r3, [pc, #108]	@ (80068ac <RTC_ExitInitMode+0x84>)
 800683e:	2180      	movs	r1, #128	@ 0x80
 8006840:	438a      	bics	r2, r1
 8006842:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006844:	4b19      	ldr	r3, [pc, #100]	@ (80068ac <RTC_ExitInitMode+0x84>)
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	2220      	movs	r2, #32
 800684a:	4013      	ands	r3, r2
 800684c:	d10d      	bne.n	800686a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	0018      	movs	r0, r3
 8006852:	f7ff ff81 	bl	8006758 <HAL_RTC_WaitForSynchro>
 8006856:	1e03      	subs	r3, r0, #0
 8006858:	d021      	beq.n	800689e <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2229      	movs	r2, #41	@ 0x29
 800685e:	2103      	movs	r1, #3
 8006860:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006862:	193b      	adds	r3, r7, r4
 8006864:	2203      	movs	r2, #3
 8006866:	701a      	strb	r2, [r3, #0]
 8006868:	e019      	b.n	800689e <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800686a:	4b10      	ldr	r3, [pc, #64]	@ (80068ac <RTC_ExitInitMode+0x84>)
 800686c:	699a      	ldr	r2, [r3, #24]
 800686e:	4b0f      	ldr	r3, [pc, #60]	@ (80068ac <RTC_ExitInitMode+0x84>)
 8006870:	2120      	movs	r1, #32
 8006872:	438a      	bics	r2, r1
 8006874:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	0018      	movs	r0, r3
 800687a:	f7ff ff6d 	bl	8006758 <HAL_RTC_WaitForSynchro>
 800687e:	1e03      	subs	r3, r0, #0
 8006880:	d007      	beq.n	8006892 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2229      	movs	r2, #41	@ 0x29
 8006886:	2103      	movs	r1, #3
 8006888:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800688a:	230f      	movs	r3, #15
 800688c:	18fb      	adds	r3, r7, r3
 800688e:	2203      	movs	r2, #3
 8006890:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006892:	4b06      	ldr	r3, [pc, #24]	@ (80068ac <RTC_ExitInitMode+0x84>)
 8006894:	699a      	ldr	r2, [r3, #24]
 8006896:	4b05      	ldr	r3, [pc, #20]	@ (80068ac <RTC_ExitInitMode+0x84>)
 8006898:	2120      	movs	r1, #32
 800689a:	430a      	orrs	r2, r1
 800689c:	619a      	str	r2, [r3, #24]
  }

  return status;
 800689e:	230f      	movs	r3, #15
 80068a0:	18fb      	adds	r3, r7, r3
 80068a2:	781b      	ldrb	r3, [r3, #0]
}
 80068a4:	0018      	movs	r0, r3
 80068a6:	46bd      	mov	sp, r7
 80068a8:	b005      	add	sp, #20
 80068aa:	bd90      	pop	{r4, r7, pc}
 80068ac:	40002800 	.word	0x40002800

080068b0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	0002      	movs	r2, r0
 80068b8:	1dfb      	adds	r3, r7, #7
 80068ba:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80068bc:	2300      	movs	r3, #0
 80068be:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80068c0:	230b      	movs	r3, #11
 80068c2:	18fb      	adds	r3, r7, r3
 80068c4:	1dfa      	adds	r2, r7, #7
 80068c6:	7812      	ldrb	r2, [r2, #0]
 80068c8:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80068ca:	e008      	b.n	80068de <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	3301      	adds	r3, #1
 80068d0:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80068d2:	220b      	movs	r2, #11
 80068d4:	18bb      	adds	r3, r7, r2
 80068d6:	18ba      	adds	r2, r7, r2
 80068d8:	7812      	ldrb	r2, [r2, #0]
 80068da:	3a0a      	subs	r2, #10
 80068dc:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80068de:	210b      	movs	r1, #11
 80068e0:	187b      	adds	r3, r7, r1
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	2b09      	cmp	r3, #9
 80068e6:	d8f1      	bhi.n	80068cc <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	011b      	lsls	r3, r3, #4
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	187b      	adds	r3, r7, r1
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	b2db      	uxtb	r3, r3
}
 80068f8:	0018      	movs	r0, r3
 80068fa:	46bd      	mov	sp, r7
 80068fc:	b004      	add	sp, #16
 80068fe:	bd80      	pop	{r7, pc}

08006900 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	0002      	movs	r2, r0
 8006908:	1dfb      	adds	r3, r7, #7
 800690a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800690c:	1dfb      	adds	r3, r7, #7
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	091b      	lsrs	r3, r3, #4
 8006912:	b2db      	uxtb	r3, r3
 8006914:	001a      	movs	r2, r3
 8006916:	0013      	movs	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	189b      	adds	r3, r3, r2
 800691c:	005b      	lsls	r3, r3, #1
 800691e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	b2da      	uxtb	r2, r3
 8006924:	1dfb      	adds	r3, r7, #7
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	210f      	movs	r1, #15
 800692a:	400b      	ands	r3, r1
 800692c:	b2db      	uxtb	r3, r3
 800692e:	18d3      	adds	r3, r2, r3
 8006930:	b2db      	uxtb	r3, r3
}
 8006932:	0018      	movs	r0, r3
 8006934:	46bd      	mov	sp, r7
 8006936:	b004      	add	sp, #16
 8006938:	bd80      	pop	{r7, pc}
	...

0800693c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2228      	movs	r2, #40	@ 0x28
 800694c:	5c9b      	ldrb	r3, [r3, r2]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d101      	bne.n	8006956 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006952:	2302      	movs	r3, #2
 8006954:	e082      	b.n	8006a5c <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2228      	movs	r2, #40	@ 0x28
 800695a:	2101      	movs	r1, #1
 800695c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2229      	movs	r2, #41	@ 0x29
 8006962:	2102      	movs	r1, #2
 8006964:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	22ca      	movs	r2, #202	@ 0xca
 800696c:	625a      	str	r2, [r3, #36]	@ 0x24
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2253      	movs	r2, #83	@ 0x53
 8006974:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	699a      	ldr	r2, [r3, #24]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4938      	ldr	r1, [pc, #224]	@ (8006a64 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 8006982:	400a      	ands	r2, r1
 8006984:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2104      	movs	r1, #4
 8006992:	430a      	orrs	r2, r1
 8006994:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006996:	4b34      	ldr	r3, [pc, #208]	@ (8006a68 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	2240      	movs	r2, #64	@ 0x40
 800699c:	4013      	ands	r3, r2
 800699e:	d121      	bne.n	80069e4 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 80069a0:	f7fd fa1c 	bl	8003ddc <HAL_GetTick>
 80069a4:	0003      	movs	r3, r0
 80069a6:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80069a8:	e016      	b.n	80069d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80069aa:	f7fd fa17 	bl	8003ddc <HAL_GetTick>
 80069ae:	0002      	movs	r2, r0
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	1ad2      	subs	r2, r2, r3
 80069b4:	23fa      	movs	r3, #250	@ 0xfa
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d90d      	bls.n	80069d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	22ff      	movs	r2, #255	@ 0xff
 80069c2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2229      	movs	r2, #41	@ 0x29
 80069c8:	2103      	movs	r1, #3
 80069ca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2228      	movs	r2, #40	@ 0x28
 80069d0:	2100      	movs	r1, #0
 80069d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e041      	b.n	8006a5c <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	2204      	movs	r2, #4
 80069e0:	4013      	ands	r3, r2
 80069e2:	d0e2      	beq.n	80069aa <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	699a      	ldr	r2, [r3, #24]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2107      	movs	r1, #7
 80069f8:	438a      	bics	r2, r1
 80069fa:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6999      	ldr	r1, [r3, #24]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006a0c:	4a17      	ldr	r2, [pc, #92]	@ (8006a6c <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8006a0e:	2380      	movs	r3, #128	@ 0x80
 8006a10:	58d3      	ldr	r3, [r2, r3]
 8006a12:	4916      	ldr	r1, [pc, #88]	@ (8006a6c <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8006a14:	2280      	movs	r2, #128	@ 0x80
 8006a16:	0312      	lsls	r2, r2, #12
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	2280      	movs	r2, #128	@ 0x80
 8006a1c:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	699a      	ldr	r2, [r3, #24]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2180      	movs	r1, #128	@ 0x80
 8006a2a:	01c9      	lsls	r1, r1, #7
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	699a      	ldr	r2, [r3, #24]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2180      	movs	r1, #128	@ 0x80
 8006a3c:	00c9      	lsls	r1, r1, #3
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	22ff      	movs	r2, #255	@ 0xff
 8006a48:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2229      	movs	r2, #41	@ 0x29
 8006a4e:	2101      	movs	r1, #1
 8006a50:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2228      	movs	r2, #40	@ 0x28
 8006a56:	2100      	movs	r1, #0
 8006a58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	0018      	movs	r0, r3
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	b006      	add	sp, #24
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	fffffbff 	.word	0xfffffbff
 8006a68:	40002800 	.word	0x40002800
 8006a6c:	40021800 	.word	0x40021800

08006a70 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a7e:	2204      	movs	r2, #4
 8006a80:	4013      	ands	r3, r2
 8006a82:	d00b      	beq.n	8006a9c <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2104      	movs	r1, #4
 8006a90:	430a      	orrs	r2, r1
 8006a92:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	0018      	movs	r0, r3
 8006a98:	f000 f808 	bl	8006aac <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2229      	movs	r2, #41	@ 0x29
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	5499      	strb	r1, [r3, r2]
}
 8006aa4:	46c0      	nop			@ (mov r8, r8)
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	b002      	add	sp, #8
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8006ab4:	46c0      	nop			@ (mov r8, r8)
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	b002      	add	sp, #8
 8006aba:	bd80      	pop	{r7, pc}

08006abc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006ac4:	46c0      	nop			@ (mov r8, r8)
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	b002      	add	sp, #8
 8006aca:	bd80      	pop	{r7, pc}

08006acc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e0a8      	b.n	8006c30 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d109      	bne.n	8006afa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	2382      	movs	r3, #130	@ 0x82
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d009      	beq.n	8006b06 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	61da      	str	r2, [r3, #28]
 8006af8:	e005      	b.n	8006b06 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	225d      	movs	r2, #93	@ 0x5d
 8006b10:	5c9b      	ldrb	r3, [r3, r2]
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d107      	bne.n	8006b28 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	225c      	movs	r2, #92	@ 0x5c
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	0018      	movs	r0, r3
 8006b24:	f7fc feda 	bl	80038dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	225d      	movs	r2, #93	@ 0x5d
 8006b2c:	2102      	movs	r1, #2
 8006b2e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2140      	movs	r1, #64	@ 0x40
 8006b3c:	438a      	bics	r2, r1
 8006b3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68da      	ldr	r2, [r3, #12]
 8006b44:	23e0      	movs	r3, #224	@ 0xe0
 8006b46:	00db      	lsls	r3, r3, #3
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d902      	bls.n	8006b52 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	e002      	b.n	8006b58 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006b52:	2380      	movs	r3, #128	@ 0x80
 8006b54:	015b      	lsls	r3, r3, #5
 8006b56:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68da      	ldr	r2, [r3, #12]
 8006b5c:	23f0      	movs	r3, #240	@ 0xf0
 8006b5e:	011b      	lsls	r3, r3, #4
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d008      	beq.n	8006b76 <HAL_SPI_Init+0xaa>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	68da      	ldr	r2, [r3, #12]
 8006b68:	23e0      	movs	r3, #224	@ 0xe0
 8006b6a:	00db      	lsls	r3, r3, #3
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d002      	beq.n	8006b76 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	2382      	movs	r3, #130	@ 0x82
 8006b7c:	005b      	lsls	r3, r3, #1
 8006b7e:	401a      	ands	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6899      	ldr	r1, [r3, #8]
 8006b84:	2384      	movs	r3, #132	@ 0x84
 8006b86:	021b      	lsls	r3, r3, #8
 8006b88:	400b      	ands	r3, r1
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	2102      	movs	r1, #2
 8006b92:	400b      	ands	r3, r1
 8006b94:	431a      	orrs	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	695b      	ldr	r3, [r3, #20]
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	400b      	ands	r3, r1
 8006b9e:	431a      	orrs	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6999      	ldr	r1, [r3, #24]
 8006ba4:	2380      	movs	r3, #128	@ 0x80
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	400b      	ands	r3, r1
 8006baa:	431a      	orrs	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	2138      	movs	r1, #56	@ 0x38
 8006bb2:	400b      	ands	r3, r1
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	2180      	movs	r1, #128	@ 0x80
 8006bbc:	400b      	ands	r3, r1
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	0011      	movs	r1, r2
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006bc6:	2380      	movs	r3, #128	@ 0x80
 8006bc8:	019b      	lsls	r3, r3, #6
 8006bca:	401a      	ands	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	0c1b      	lsrs	r3, r3, #16
 8006bda:	2204      	movs	r2, #4
 8006bdc:	401a      	ands	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be2:	2110      	movs	r1, #16
 8006be4:	400b      	ands	r3, r1
 8006be6:	431a      	orrs	r2, r3
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bec:	2108      	movs	r1, #8
 8006bee:	400b      	ands	r3, r1
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68d9      	ldr	r1, [r3, #12]
 8006bf6:	23f0      	movs	r3, #240	@ 0xf0
 8006bf8:	011b      	lsls	r3, r3, #4
 8006bfa:	400b      	ands	r3, r1
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	0011      	movs	r1, r2
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	2380      	movs	r3, #128	@ 0x80
 8006c04:	015b      	lsls	r3, r3, #5
 8006c06:	401a      	ands	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	69da      	ldr	r2, [r3, #28]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4907      	ldr	r1, [pc, #28]	@ (8006c38 <HAL_SPI_Init+0x16c>)
 8006c1c:	400a      	ands	r2, r1
 8006c1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	225d      	movs	r2, #93	@ 0x5d
 8006c2a:	2101      	movs	r1, #1
 8006c2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	0018      	movs	r0, r3
 8006c32:	46bd      	mov	sp, r7
 8006c34:	b004      	add	sp, #16
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	fffff7ff 	.word	0xfffff7ff

08006c3c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b088      	sub	sp, #32
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	603b      	str	r3, [r7, #0]
 8006c48:	1dbb      	adds	r3, r7, #6
 8006c4a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c4c:	231f      	movs	r3, #31
 8006c4e:	18fb      	adds	r3, r7, r3
 8006c50:	2200      	movs	r2, #0
 8006c52:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	225c      	movs	r2, #92	@ 0x5c
 8006c58:	5c9b      	ldrb	r3, [r3, r2]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d101      	bne.n	8006c62 <HAL_SPI_Transmit+0x26>
 8006c5e:	2302      	movs	r3, #2
 8006c60:	e147      	b.n	8006ef2 <HAL_SPI_Transmit+0x2b6>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	225c      	movs	r2, #92	@ 0x5c
 8006c66:	2101      	movs	r1, #1
 8006c68:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c6a:	f7fd f8b7 	bl	8003ddc <HAL_GetTick>
 8006c6e:	0003      	movs	r3, r0
 8006c70:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006c72:	2316      	movs	r3, #22
 8006c74:	18fb      	adds	r3, r7, r3
 8006c76:	1dba      	adds	r2, r7, #6
 8006c78:	8812      	ldrh	r2, [r2, #0]
 8006c7a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	225d      	movs	r2, #93	@ 0x5d
 8006c80:	5c9b      	ldrb	r3, [r3, r2]
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d004      	beq.n	8006c92 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006c88:	231f      	movs	r3, #31
 8006c8a:	18fb      	adds	r3, r7, r3
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006c90:	e128      	b.n	8006ee4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d003      	beq.n	8006ca0 <HAL_SPI_Transmit+0x64>
 8006c98:	1dbb      	adds	r3, r7, #6
 8006c9a:	881b      	ldrh	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d104      	bne.n	8006caa <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006ca0:	231f      	movs	r3, #31
 8006ca2:	18fb      	adds	r3, r7, r3
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	701a      	strb	r2, [r3, #0]
    goto error;
 8006ca8:	e11c      	b.n	8006ee4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	225d      	movs	r2, #93	@ 0x5d
 8006cae:	2103      	movs	r1, #3
 8006cb0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	1dba      	adds	r2, r7, #6
 8006cc2:	8812      	ldrh	r2, [r2, #0]
 8006cc4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	1dba      	adds	r2, r7, #6
 8006cca:	8812      	ldrh	r2, [r2, #0]
 8006ccc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2244      	movs	r2, #68	@ 0x44
 8006cd8:	2100      	movs	r1, #0
 8006cda:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2246      	movs	r2, #70	@ 0x46
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	2380      	movs	r3, #128	@ 0x80
 8006cf6:	021b      	lsls	r3, r3, #8
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d110      	bne.n	8006d1e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2140      	movs	r1, #64	@ 0x40
 8006d08:	438a      	bics	r2, r1
 8006d0a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2180      	movs	r1, #128	@ 0x80
 8006d18:	01c9      	lsls	r1, r1, #7
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2240      	movs	r2, #64	@ 0x40
 8006d26:	4013      	ands	r3, r2
 8006d28:	2b40      	cmp	r3, #64	@ 0x40
 8006d2a:	d007      	beq.n	8006d3c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2140      	movs	r1, #64	@ 0x40
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	23e0      	movs	r3, #224	@ 0xe0
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d952      	bls.n	8006dee <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d004      	beq.n	8006d5a <HAL_SPI_Transmit+0x11e>
 8006d50:	2316      	movs	r3, #22
 8006d52:	18fb      	adds	r3, r7, r3
 8006d54:	881b      	ldrh	r3, [r3, #0]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d143      	bne.n	8006de2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d5e:	881a      	ldrh	r2, [r3, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6a:	1c9a      	adds	r2, r3, #2
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	3b01      	subs	r3, #1
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d7e:	e030      	b.n	8006de2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	2202      	movs	r2, #2
 8006d88:	4013      	ands	r3, r2
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d112      	bne.n	8006db4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d92:	881a      	ldrh	r2, [r3, #0]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d9e:	1c9a      	adds	r2, r3, #2
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	3b01      	subs	r3, #1
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006db2:	e016      	b.n	8006de2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006db4:	f7fd f812 	bl	8003ddc <HAL_GetTick>
 8006db8:	0002      	movs	r2, r0
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d802      	bhi.n	8006dca <HAL_SPI_Transmit+0x18e>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	d102      	bne.n	8006dd0 <HAL_SPI_Transmit+0x194>
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d108      	bne.n	8006de2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8006dd0:	231f      	movs	r3, #31
 8006dd2:	18fb      	adds	r3, r7, r3
 8006dd4:	2203      	movs	r2, #3
 8006dd6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	225d      	movs	r2, #93	@ 0x5d
 8006ddc:	2101      	movs	r1, #1
 8006dde:	5499      	strb	r1, [r3, r2]
          goto error;
 8006de0:	e080      	b.n	8006ee4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1c9      	bne.n	8006d80 <HAL_SPI_Transmit+0x144>
 8006dec:	e053      	b.n	8006e96 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d004      	beq.n	8006e00 <HAL_SPI_Transmit+0x1c4>
 8006df6:	2316      	movs	r3, #22
 8006df8:	18fb      	adds	r3, r7, r3
 8006dfa:	881b      	ldrh	r3, [r3, #0]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d145      	bne.n	8006e8c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	330c      	adds	r3, #12
 8006e0a:	7812      	ldrb	r2, [r2, #0]
 8006e0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e12:	1c5a      	adds	r2, r3, #1
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006e26:	e031      	b.n	8006e8c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	4013      	ands	r3, r2
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d113      	bne.n	8006e5e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	330c      	adds	r3, #12
 8006e40:	7812      	ldrb	r2, [r2, #0]
 8006e42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e48:	1c5a      	adds	r2, r3, #1
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	3b01      	subs	r3, #1
 8006e56:	b29a      	uxth	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006e5c:	e016      	b.n	8006e8c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e5e:	f7fc ffbd 	bl	8003ddc <HAL_GetTick>
 8006e62:	0002      	movs	r2, r0
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	683a      	ldr	r2, [r7, #0]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d802      	bhi.n	8006e74 <HAL_SPI_Transmit+0x238>
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	3301      	adds	r3, #1
 8006e72:	d102      	bne.n	8006e7a <HAL_SPI_Transmit+0x23e>
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d108      	bne.n	8006e8c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8006e7a:	231f      	movs	r3, #31
 8006e7c:	18fb      	adds	r3, r7, r3
 8006e7e:	2203      	movs	r2, #3
 8006e80:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	225d      	movs	r2, #93	@ 0x5d
 8006e86:	2101      	movs	r1, #1
 8006e88:	5499      	strb	r1, [r3, r2]
          goto error;
 8006e8a:	e02b      	b.n	8006ee4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1c8      	bne.n	8006e28 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	6839      	ldr	r1, [r7, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	f000 f95d 	bl	800715c <SPI_EndRxTxTransaction>
 8006ea2:	1e03      	subs	r3, r0, #0
 8006ea4:	d002      	beq.n	8006eac <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10a      	bne.n	8006eca <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	613b      	str	r3, [r7, #16]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	613b      	str	r3, [r7, #16]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	613b      	str	r3, [r7, #16]
 8006ec8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d004      	beq.n	8006edc <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8006ed2:	231f      	movs	r3, #31
 8006ed4:	18fb      	adds	r3, r7, r3
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	701a      	strb	r2, [r3, #0]
 8006eda:	e003      	b.n	8006ee4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	225d      	movs	r2, #93	@ 0x5d
 8006ee0:	2101      	movs	r1, #1
 8006ee2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	225c      	movs	r2, #92	@ 0x5c
 8006ee8:	2100      	movs	r1, #0
 8006eea:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006eec:	231f      	movs	r3, #31
 8006eee:	18fb      	adds	r3, r7, r3
 8006ef0:	781b      	ldrb	r3, [r3, #0]
}
 8006ef2:	0018      	movs	r0, r3
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	b008      	add	sp, #32
 8006ef8:	bd80      	pop	{r7, pc}
	...

08006efc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b088      	sub	sp, #32
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	603b      	str	r3, [r7, #0]
 8006f08:	1dfb      	adds	r3, r7, #7
 8006f0a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f0c:	f7fc ff66 	bl	8003ddc <HAL_GetTick>
 8006f10:	0002      	movs	r2, r0
 8006f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f14:	1a9b      	subs	r3, r3, r2
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	18d3      	adds	r3, r2, r3
 8006f1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f1c:	f7fc ff5e 	bl	8003ddc <HAL_GetTick>
 8006f20:	0003      	movs	r3, r0
 8006f22:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f24:	4b3a      	ldr	r3, [pc, #232]	@ (8007010 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	015b      	lsls	r3, r3, #5
 8006f2a:	0d1b      	lsrs	r3, r3, #20
 8006f2c:	69fa      	ldr	r2, [r7, #28]
 8006f2e:	4353      	muls	r3, r2
 8006f30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f32:	e058      	b.n	8006fe6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	3301      	adds	r3, #1
 8006f38:	d055      	beq.n	8006fe6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006f3a:	f7fc ff4f 	bl	8003ddc <HAL_GetTick>
 8006f3e:	0002      	movs	r2, r0
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	69fa      	ldr	r2, [r7, #28]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d902      	bls.n	8006f50 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d142      	bne.n	8006fd6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	21e0      	movs	r1, #224	@ 0xe0
 8006f5c:	438a      	bics	r2, r1
 8006f5e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	2382      	movs	r3, #130	@ 0x82
 8006f66:	005b      	lsls	r3, r3, #1
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d113      	bne.n	8006f94 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	689a      	ldr	r2, [r3, #8]
 8006f70:	2380      	movs	r3, #128	@ 0x80
 8006f72:	021b      	lsls	r3, r3, #8
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d005      	beq.n	8006f84 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	689a      	ldr	r2, [r3, #8]
 8006f7c:	2380      	movs	r3, #128	@ 0x80
 8006f7e:	00db      	lsls	r3, r3, #3
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d107      	bne.n	8006f94 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2140      	movs	r1, #64	@ 0x40
 8006f90:	438a      	bics	r2, r1
 8006f92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f98:	2380      	movs	r3, #128	@ 0x80
 8006f9a:	019b      	lsls	r3, r3, #6
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d110      	bne.n	8006fc2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	491a      	ldr	r1, [pc, #104]	@ (8007014 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006fac:	400a      	ands	r2, r1
 8006fae:	601a      	str	r2, [r3, #0]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2180      	movs	r1, #128	@ 0x80
 8006fbc:	0189      	lsls	r1, r1, #6
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	225d      	movs	r2, #93	@ 0x5d
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	225c      	movs	r2, #92	@ 0x5c
 8006fce:	2100      	movs	r1, #0
 8006fd0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e017      	b.n	8007006 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	4013      	ands	r3, r2
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	425a      	negs	r2, r3
 8006ff6:	4153      	adcs	r3, r2
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	001a      	movs	r2, r3
 8006ffc:	1dfb      	adds	r3, r7, #7
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	429a      	cmp	r2, r3
 8007002:	d197      	bne.n	8006f34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	0018      	movs	r0, r3
 8007008:	46bd      	mov	sp, r7
 800700a:	b008      	add	sp, #32
 800700c:	bd80      	pop	{r7, pc}
 800700e:	46c0      	nop			@ (mov r8, r8)
 8007010:	200004f4 	.word	0x200004f4
 8007014:	ffffdfff 	.word	0xffffdfff

08007018 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b08a      	sub	sp, #40	@ 0x28
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
 8007024:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007026:	2317      	movs	r3, #23
 8007028:	18fb      	adds	r3, r7, r3
 800702a:	2200      	movs	r2, #0
 800702c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800702e:	f7fc fed5 	bl	8003ddc <HAL_GetTick>
 8007032:	0002      	movs	r2, r0
 8007034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007036:	1a9b      	subs	r3, r3, r2
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	18d3      	adds	r3, r2, r3
 800703c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800703e:	f7fc fecd 	bl	8003ddc <HAL_GetTick>
 8007042:	0003      	movs	r3, r0
 8007044:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	330c      	adds	r3, #12
 800704c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800704e:	4b41      	ldr	r3, [pc, #260]	@ (8007154 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	0013      	movs	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	189b      	adds	r3, r3, r2
 8007058:	00da      	lsls	r2, r3, #3
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	0d1b      	lsrs	r3, r3, #20
 800705e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007060:	4353      	muls	r3, r2
 8007062:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007064:	e068      	b.n	8007138 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	23c0      	movs	r3, #192	@ 0xc0
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	429a      	cmp	r2, r3
 800706e:	d10a      	bne.n	8007086 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d107      	bne.n	8007086 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	b2da      	uxtb	r2, r3
 800707c:	2117      	movs	r1, #23
 800707e:	187b      	adds	r3, r7, r1
 8007080:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007082:	187b      	adds	r3, r7, r1
 8007084:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	3301      	adds	r3, #1
 800708a:	d055      	beq.n	8007138 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800708c:	f7fc fea6 	bl	8003ddc <HAL_GetTick>
 8007090:	0002      	movs	r2, r0
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007098:	429a      	cmp	r2, r3
 800709a:	d902      	bls.n	80070a2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800709c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d142      	bne.n	8007128 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	21e0      	movs	r1, #224	@ 0xe0
 80070ae:	438a      	bics	r2, r1
 80070b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	685a      	ldr	r2, [r3, #4]
 80070b6:	2382      	movs	r3, #130	@ 0x82
 80070b8:	005b      	lsls	r3, r3, #1
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d113      	bne.n	80070e6 <SPI_WaitFifoStateUntilTimeout+0xce>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	689a      	ldr	r2, [r3, #8]
 80070c2:	2380      	movs	r3, #128	@ 0x80
 80070c4:	021b      	lsls	r3, r3, #8
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d005      	beq.n	80070d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	689a      	ldr	r2, [r3, #8]
 80070ce:	2380      	movs	r3, #128	@ 0x80
 80070d0:	00db      	lsls	r3, r3, #3
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d107      	bne.n	80070e6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2140      	movs	r1, #64	@ 0x40
 80070e2:	438a      	bics	r2, r1
 80070e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80070ea:	2380      	movs	r3, #128	@ 0x80
 80070ec:	019b      	lsls	r3, r3, #6
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d110      	bne.n	8007114 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4916      	ldr	r1, [pc, #88]	@ (8007158 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80070fe:	400a      	ands	r2, r1
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2180      	movs	r1, #128	@ 0x80
 800710e:	0189      	lsls	r1, r1, #6
 8007110:	430a      	orrs	r2, r1
 8007112:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	225d      	movs	r2, #93	@ 0x5d
 8007118:	2101      	movs	r1, #1
 800711a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	225c      	movs	r2, #92	@ 0x5c
 8007120:	2100      	movs	r1, #0
 8007122:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e010      	b.n	800714a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d101      	bne.n	8007132 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800712e:	2300      	movs	r3, #0
 8007130:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	3b01      	subs	r3, #1
 8007136:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	4013      	ands	r3, r2
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	429a      	cmp	r2, r3
 8007146:	d18e      	bne.n	8007066 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	0018      	movs	r0, r3
 800714c:	46bd      	mov	sp, r7
 800714e:	b00a      	add	sp, #40	@ 0x28
 8007150:	bd80      	pop	{r7, pc}
 8007152:	46c0      	nop			@ (mov r8, r8)
 8007154:	200004f4 	.word	0x200004f4
 8007158:	ffffdfff 	.word	0xffffdfff

0800715c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af02      	add	r7, sp, #8
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	23c0      	movs	r3, #192	@ 0xc0
 800716c:	0159      	lsls	r1, r3, #5
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	0013      	movs	r3, r2
 8007176:	2200      	movs	r2, #0
 8007178:	f7ff ff4e 	bl	8007018 <SPI_WaitFifoStateUntilTimeout>
 800717c:	1e03      	subs	r3, r0, #0
 800717e:	d007      	beq.n	8007190 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007184:	2220      	movs	r2, #32
 8007186:	431a      	orrs	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e027      	b.n	80071e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	9300      	str	r3, [sp, #0]
 8007198:	0013      	movs	r3, r2
 800719a:	2200      	movs	r2, #0
 800719c:	2180      	movs	r1, #128	@ 0x80
 800719e:	f7ff fead 	bl	8006efc <SPI_WaitFlagStateUntilTimeout>
 80071a2:	1e03      	subs	r3, r0, #0
 80071a4:	d007      	beq.n	80071b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071aa:	2220      	movs	r2, #32
 80071ac:	431a      	orrs	r2, r3
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e014      	b.n	80071e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	23c0      	movs	r3, #192	@ 0xc0
 80071ba:	00d9      	lsls	r1, r3, #3
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	0013      	movs	r3, r2
 80071c4:	2200      	movs	r2, #0
 80071c6:	f7ff ff27 	bl	8007018 <SPI_WaitFifoStateUntilTimeout>
 80071ca:	1e03      	subs	r3, r0, #0
 80071cc:	d007      	beq.n	80071de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071d2:	2220      	movs	r2, #32
 80071d4:	431a      	orrs	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e000      	b.n	80071e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	0018      	movs	r0, r3
 80071e2:	46bd      	mov	sp, r7
 80071e4:	b004      	add	sp, #16
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d101      	bne.n	80071fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e04a      	b.n	8007290 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	223d      	movs	r2, #61	@ 0x3d
 80071fe:	5c9b      	ldrb	r3, [r3, r2]
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d107      	bne.n	8007216 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	223c      	movs	r2, #60	@ 0x3c
 800720a:	2100      	movs	r1, #0
 800720c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	0018      	movs	r0, r3
 8007212:	f7fc fbd1 	bl	80039b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	223d      	movs	r2, #61	@ 0x3d
 800721a:	2102      	movs	r1, #2
 800721c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3304      	adds	r3, #4
 8007226:	0019      	movs	r1, r3
 8007228:	0010      	movs	r0, r2
 800722a:	f000 fb11 	bl	8007850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2248      	movs	r2, #72	@ 0x48
 8007232:	2101      	movs	r1, #1
 8007234:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	223e      	movs	r2, #62	@ 0x3e
 800723a:	2101      	movs	r1, #1
 800723c:	5499      	strb	r1, [r3, r2]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	223f      	movs	r2, #63	@ 0x3f
 8007242:	2101      	movs	r1, #1
 8007244:	5499      	strb	r1, [r3, r2]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2240      	movs	r2, #64	@ 0x40
 800724a:	2101      	movs	r1, #1
 800724c:	5499      	strb	r1, [r3, r2]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2241      	movs	r2, #65	@ 0x41
 8007252:	2101      	movs	r1, #1
 8007254:	5499      	strb	r1, [r3, r2]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2242      	movs	r2, #66	@ 0x42
 800725a:	2101      	movs	r1, #1
 800725c:	5499      	strb	r1, [r3, r2]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2243      	movs	r2, #67	@ 0x43
 8007262:	2101      	movs	r1, #1
 8007264:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2244      	movs	r2, #68	@ 0x44
 800726a:	2101      	movs	r1, #1
 800726c:	5499      	strb	r1, [r3, r2]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2245      	movs	r2, #69	@ 0x45
 8007272:	2101      	movs	r1, #1
 8007274:	5499      	strb	r1, [r3, r2]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2246      	movs	r2, #70	@ 0x46
 800727a:	2101      	movs	r1, #1
 800727c:	5499      	strb	r1, [r3, r2]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2247      	movs	r2, #71	@ 0x47
 8007282:	2101      	movs	r1, #1
 8007284:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	223d      	movs	r2, #61	@ 0x3d
 800728a:	2101      	movs	r1, #1
 800728c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	0018      	movs	r0, r3
 8007292:	46bd      	mov	sp, r7
 8007294:	b002      	add	sp, #8
 8007296:	bd80      	pop	{r7, pc}

08007298 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e04a      	b.n	8007340 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	223d      	movs	r2, #61	@ 0x3d
 80072ae:	5c9b      	ldrb	r3, [r3, r2]
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d107      	bne.n	80072c6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	223c      	movs	r2, #60	@ 0x3c
 80072ba:	2100      	movs	r1, #0
 80072bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	0018      	movs	r0, r3
 80072c2:	f000 f841 	bl	8007348 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	223d      	movs	r2, #61	@ 0x3d
 80072ca:	2102      	movs	r1, #2
 80072cc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	3304      	adds	r3, #4
 80072d6:	0019      	movs	r1, r3
 80072d8:	0010      	movs	r0, r2
 80072da:	f000 fab9 	bl	8007850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2248      	movs	r2, #72	@ 0x48
 80072e2:	2101      	movs	r1, #1
 80072e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	223e      	movs	r2, #62	@ 0x3e
 80072ea:	2101      	movs	r1, #1
 80072ec:	5499      	strb	r1, [r3, r2]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	223f      	movs	r2, #63	@ 0x3f
 80072f2:	2101      	movs	r1, #1
 80072f4:	5499      	strb	r1, [r3, r2]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2240      	movs	r2, #64	@ 0x40
 80072fa:	2101      	movs	r1, #1
 80072fc:	5499      	strb	r1, [r3, r2]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2241      	movs	r2, #65	@ 0x41
 8007302:	2101      	movs	r1, #1
 8007304:	5499      	strb	r1, [r3, r2]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2242      	movs	r2, #66	@ 0x42
 800730a:	2101      	movs	r1, #1
 800730c:	5499      	strb	r1, [r3, r2]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2243      	movs	r2, #67	@ 0x43
 8007312:	2101      	movs	r1, #1
 8007314:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2244      	movs	r2, #68	@ 0x44
 800731a:	2101      	movs	r1, #1
 800731c:	5499      	strb	r1, [r3, r2]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2245      	movs	r2, #69	@ 0x45
 8007322:	2101      	movs	r1, #1
 8007324:	5499      	strb	r1, [r3, r2]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2246      	movs	r2, #70	@ 0x46
 800732a:	2101      	movs	r1, #1
 800732c:	5499      	strb	r1, [r3, r2]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2247      	movs	r2, #71	@ 0x47
 8007332:	2101      	movs	r1, #1
 8007334:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	223d      	movs	r2, #61	@ 0x3d
 800733a:	2101      	movs	r1, #1
 800733c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	0018      	movs	r0, r3
 8007342:	46bd      	mov	sp, r7
 8007344:	b002      	add	sp, #8
 8007346:	bd80      	pop	{r7, pc}

08007348 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007350:	46c0      	nop			@ (mov r8, r8)
 8007352:	46bd      	mov	sp, r7
 8007354:	b002      	add	sp, #8
 8007356:	bd80      	pop	{r7, pc}

08007358 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d108      	bne.n	800737a <HAL_TIM_PWM_Start+0x22>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	223e      	movs	r2, #62	@ 0x3e
 800736c:	5c9b      	ldrb	r3, [r3, r2]
 800736e:	b2db      	uxtb	r3, r3
 8007370:	3b01      	subs	r3, #1
 8007372:	1e5a      	subs	r2, r3, #1
 8007374:	4193      	sbcs	r3, r2
 8007376:	b2db      	uxtb	r3, r3
 8007378:	e037      	b.n	80073ea <HAL_TIM_PWM_Start+0x92>
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	2b04      	cmp	r3, #4
 800737e:	d108      	bne.n	8007392 <HAL_TIM_PWM_Start+0x3a>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	223f      	movs	r2, #63	@ 0x3f
 8007384:	5c9b      	ldrb	r3, [r3, r2]
 8007386:	b2db      	uxtb	r3, r3
 8007388:	3b01      	subs	r3, #1
 800738a:	1e5a      	subs	r2, r3, #1
 800738c:	4193      	sbcs	r3, r2
 800738e:	b2db      	uxtb	r3, r3
 8007390:	e02b      	b.n	80073ea <HAL_TIM_PWM_Start+0x92>
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2b08      	cmp	r3, #8
 8007396:	d108      	bne.n	80073aa <HAL_TIM_PWM_Start+0x52>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2240      	movs	r2, #64	@ 0x40
 800739c:	5c9b      	ldrb	r3, [r3, r2]
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	3b01      	subs	r3, #1
 80073a2:	1e5a      	subs	r2, r3, #1
 80073a4:	4193      	sbcs	r3, r2
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	e01f      	b.n	80073ea <HAL_TIM_PWM_Start+0x92>
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	2b0c      	cmp	r3, #12
 80073ae:	d108      	bne.n	80073c2 <HAL_TIM_PWM_Start+0x6a>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2241      	movs	r2, #65	@ 0x41
 80073b4:	5c9b      	ldrb	r3, [r3, r2]
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	3b01      	subs	r3, #1
 80073ba:	1e5a      	subs	r2, r3, #1
 80073bc:	4193      	sbcs	r3, r2
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	e013      	b.n	80073ea <HAL_TIM_PWM_Start+0x92>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b10      	cmp	r3, #16
 80073c6:	d108      	bne.n	80073da <HAL_TIM_PWM_Start+0x82>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2242      	movs	r2, #66	@ 0x42
 80073cc:	5c9b      	ldrb	r3, [r3, r2]
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	3b01      	subs	r3, #1
 80073d2:	1e5a      	subs	r2, r3, #1
 80073d4:	4193      	sbcs	r3, r2
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	e007      	b.n	80073ea <HAL_TIM_PWM_Start+0x92>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2243      	movs	r2, #67	@ 0x43
 80073de:	5c9b      	ldrb	r3, [r3, r2]
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	3b01      	subs	r3, #1
 80073e4:	1e5a      	subs	r2, r3, #1
 80073e6:	4193      	sbcs	r3, r2
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e090      	b.n	8007514 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d104      	bne.n	8007402 <HAL_TIM_PWM_Start+0xaa>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	223e      	movs	r2, #62	@ 0x3e
 80073fc:	2102      	movs	r1, #2
 80073fe:	5499      	strb	r1, [r3, r2]
 8007400:	e023      	b.n	800744a <HAL_TIM_PWM_Start+0xf2>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b04      	cmp	r3, #4
 8007406:	d104      	bne.n	8007412 <HAL_TIM_PWM_Start+0xba>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	223f      	movs	r2, #63	@ 0x3f
 800740c:	2102      	movs	r1, #2
 800740e:	5499      	strb	r1, [r3, r2]
 8007410:	e01b      	b.n	800744a <HAL_TIM_PWM_Start+0xf2>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b08      	cmp	r3, #8
 8007416:	d104      	bne.n	8007422 <HAL_TIM_PWM_Start+0xca>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2240      	movs	r2, #64	@ 0x40
 800741c:	2102      	movs	r1, #2
 800741e:	5499      	strb	r1, [r3, r2]
 8007420:	e013      	b.n	800744a <HAL_TIM_PWM_Start+0xf2>
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	2b0c      	cmp	r3, #12
 8007426:	d104      	bne.n	8007432 <HAL_TIM_PWM_Start+0xda>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2241      	movs	r2, #65	@ 0x41
 800742c:	2102      	movs	r1, #2
 800742e:	5499      	strb	r1, [r3, r2]
 8007430:	e00b      	b.n	800744a <HAL_TIM_PWM_Start+0xf2>
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2b10      	cmp	r3, #16
 8007436:	d104      	bne.n	8007442 <HAL_TIM_PWM_Start+0xea>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2242      	movs	r2, #66	@ 0x42
 800743c:	2102      	movs	r1, #2
 800743e:	5499      	strb	r1, [r3, r2]
 8007440:	e003      	b.n	800744a <HAL_TIM_PWM_Start+0xf2>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2243      	movs	r2, #67	@ 0x43
 8007446:	2102      	movs	r1, #2
 8007448:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	6839      	ldr	r1, [r7, #0]
 8007450:	2201      	movs	r2, #1
 8007452:	0018      	movs	r0, r3
 8007454:	f000 fd58 	bl	8007f08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a2f      	ldr	r2, [pc, #188]	@ (800751c <HAL_TIM_PWM_Start+0x1c4>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d00e      	beq.n	8007480 <HAL_TIM_PWM_Start+0x128>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a2e      	ldr	r2, [pc, #184]	@ (8007520 <HAL_TIM_PWM_Start+0x1c8>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d009      	beq.n	8007480 <HAL_TIM_PWM_Start+0x128>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a2c      	ldr	r2, [pc, #176]	@ (8007524 <HAL_TIM_PWM_Start+0x1cc>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d004      	beq.n	8007480 <HAL_TIM_PWM_Start+0x128>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a2b      	ldr	r2, [pc, #172]	@ (8007528 <HAL_TIM_PWM_Start+0x1d0>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d101      	bne.n	8007484 <HAL_TIM_PWM_Start+0x12c>
 8007480:	2301      	movs	r3, #1
 8007482:	e000      	b.n	8007486 <HAL_TIM_PWM_Start+0x12e>
 8007484:	2300      	movs	r3, #0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d008      	beq.n	800749c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2180      	movs	r1, #128	@ 0x80
 8007496:	0209      	lsls	r1, r1, #8
 8007498:	430a      	orrs	r2, r1
 800749a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a1e      	ldr	r2, [pc, #120]	@ (800751c <HAL_TIM_PWM_Start+0x1c4>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d014      	beq.n	80074d0 <HAL_TIM_PWM_Start+0x178>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	2380      	movs	r3, #128	@ 0x80
 80074ac:	05db      	lsls	r3, r3, #23
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d00e      	beq.n	80074d0 <HAL_TIM_PWM_Start+0x178>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a1d      	ldr	r2, [pc, #116]	@ (800752c <HAL_TIM_PWM_Start+0x1d4>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d009      	beq.n	80074d0 <HAL_TIM_PWM_Start+0x178>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a1b      	ldr	r2, [pc, #108]	@ (8007530 <HAL_TIM_PWM_Start+0x1d8>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d004      	beq.n	80074d0 <HAL_TIM_PWM_Start+0x178>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a15      	ldr	r2, [pc, #84]	@ (8007520 <HAL_TIM_PWM_Start+0x1c8>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d116      	bne.n	80074fe <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	4a17      	ldr	r2, [pc, #92]	@ (8007534 <HAL_TIM_PWM_Start+0x1dc>)
 80074d8:	4013      	ands	r3, r2
 80074da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b06      	cmp	r3, #6
 80074e0:	d016      	beq.n	8007510 <HAL_TIM_PWM_Start+0x1b8>
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	2380      	movs	r3, #128	@ 0x80
 80074e6:	025b      	lsls	r3, r3, #9
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d011      	beq.n	8007510 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2101      	movs	r1, #1
 80074f8:	430a      	orrs	r2, r1
 80074fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074fc:	e008      	b.n	8007510 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2101      	movs	r1, #1
 800750a:	430a      	orrs	r2, r1
 800750c:	601a      	str	r2, [r3, #0]
 800750e:	e000      	b.n	8007512 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007510:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	0018      	movs	r0, r3
 8007516:	46bd      	mov	sp, r7
 8007518:	b004      	add	sp, #16
 800751a:	bd80      	pop	{r7, pc}
 800751c:	40012c00 	.word	0x40012c00
 8007520:	40014000 	.word	0x40014000
 8007524:	40014400 	.word	0x40014400
 8007528:	40014800 	.word	0x40014800
 800752c:	40000400 	.word	0x40000400
 8007530:	40000800 	.word	0x40000800
 8007534:	00010007 	.word	0x00010007

08007538 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	2200      	movs	r2, #0
 800754a:	0018      	movs	r0, r3
 800754c:	f000 fcdc 	bl	8007f08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a37      	ldr	r2, [pc, #220]	@ (8007634 <HAL_TIM_PWM_Stop+0xfc>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d00e      	beq.n	8007578 <HAL_TIM_PWM_Stop+0x40>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a36      	ldr	r2, [pc, #216]	@ (8007638 <HAL_TIM_PWM_Stop+0x100>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d009      	beq.n	8007578 <HAL_TIM_PWM_Stop+0x40>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a34      	ldr	r2, [pc, #208]	@ (800763c <HAL_TIM_PWM_Stop+0x104>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d004      	beq.n	8007578 <HAL_TIM_PWM_Stop+0x40>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a33      	ldr	r2, [pc, #204]	@ (8007640 <HAL_TIM_PWM_Stop+0x108>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d101      	bne.n	800757c <HAL_TIM_PWM_Stop+0x44>
 8007578:	2301      	movs	r3, #1
 800757a:	e000      	b.n	800757e <HAL_TIM_PWM_Stop+0x46>
 800757c:	2300      	movs	r3, #0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d013      	beq.n	80075aa <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6a1b      	ldr	r3, [r3, #32]
 8007588:	4a2e      	ldr	r2, [pc, #184]	@ (8007644 <HAL_TIM_PWM_Stop+0x10c>)
 800758a:	4013      	ands	r3, r2
 800758c:	d10d      	bne.n	80075aa <HAL_TIM_PWM_Stop+0x72>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	4a2c      	ldr	r2, [pc, #176]	@ (8007648 <HAL_TIM_PWM_Stop+0x110>)
 8007596:	4013      	ands	r3, r2
 8007598:	d107      	bne.n	80075aa <HAL_TIM_PWM_Stop+0x72>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4929      	ldr	r1, [pc, #164]	@ (800764c <HAL_TIM_PWM_Stop+0x114>)
 80075a6:	400a      	ands	r2, r1
 80075a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6a1b      	ldr	r3, [r3, #32]
 80075b0:	4a24      	ldr	r2, [pc, #144]	@ (8007644 <HAL_TIM_PWM_Stop+0x10c>)
 80075b2:	4013      	ands	r3, r2
 80075b4:	d10d      	bne.n	80075d2 <HAL_TIM_PWM_Stop+0x9a>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	4a22      	ldr	r2, [pc, #136]	@ (8007648 <HAL_TIM_PWM_Stop+0x110>)
 80075be:	4013      	ands	r3, r2
 80075c0:	d107      	bne.n	80075d2 <HAL_TIM_PWM_Stop+0x9a>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2101      	movs	r1, #1
 80075ce:	438a      	bics	r2, r1
 80075d0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d104      	bne.n	80075e2 <HAL_TIM_PWM_Stop+0xaa>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	223e      	movs	r2, #62	@ 0x3e
 80075dc:	2101      	movs	r1, #1
 80075de:	5499      	strb	r1, [r3, r2]
 80075e0:	e023      	b.n	800762a <HAL_TIM_PWM_Stop+0xf2>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	2b04      	cmp	r3, #4
 80075e6:	d104      	bne.n	80075f2 <HAL_TIM_PWM_Stop+0xba>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	223f      	movs	r2, #63	@ 0x3f
 80075ec:	2101      	movs	r1, #1
 80075ee:	5499      	strb	r1, [r3, r2]
 80075f0:	e01b      	b.n	800762a <HAL_TIM_PWM_Stop+0xf2>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b08      	cmp	r3, #8
 80075f6:	d104      	bne.n	8007602 <HAL_TIM_PWM_Stop+0xca>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2240      	movs	r2, #64	@ 0x40
 80075fc:	2101      	movs	r1, #1
 80075fe:	5499      	strb	r1, [r3, r2]
 8007600:	e013      	b.n	800762a <HAL_TIM_PWM_Stop+0xf2>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	2b0c      	cmp	r3, #12
 8007606:	d104      	bne.n	8007612 <HAL_TIM_PWM_Stop+0xda>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2241      	movs	r2, #65	@ 0x41
 800760c:	2101      	movs	r1, #1
 800760e:	5499      	strb	r1, [r3, r2]
 8007610:	e00b      	b.n	800762a <HAL_TIM_PWM_Stop+0xf2>
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	2b10      	cmp	r3, #16
 8007616:	d104      	bne.n	8007622 <HAL_TIM_PWM_Stop+0xea>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2242      	movs	r2, #66	@ 0x42
 800761c:	2101      	movs	r1, #1
 800761e:	5499      	strb	r1, [r3, r2]
 8007620:	e003      	b.n	800762a <HAL_TIM_PWM_Stop+0xf2>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2243      	movs	r2, #67	@ 0x43
 8007626:	2101      	movs	r1, #1
 8007628:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	0018      	movs	r0, r3
 800762e:	46bd      	mov	sp, r7
 8007630:	b002      	add	sp, #8
 8007632:	bd80      	pop	{r7, pc}
 8007634:	40012c00 	.word	0x40012c00
 8007638:	40014000 	.word	0x40014000
 800763c:	40014400 	.word	0x40014400
 8007640:	40014800 	.word	0x40014800
 8007644:	00001111 	.word	0x00001111
 8007648:	00000444 	.word	0x00000444
 800764c:	ffff7fff 	.word	0xffff7fff

08007650 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800765c:	2317      	movs	r3, #23
 800765e:	18fb      	adds	r3, r7, r3
 8007660:	2200      	movs	r2, #0
 8007662:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	223c      	movs	r2, #60	@ 0x3c
 8007668:	5c9b      	ldrb	r3, [r3, r2]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d101      	bne.n	8007672 <HAL_TIM_PWM_ConfigChannel+0x22>
 800766e:	2302      	movs	r3, #2
 8007670:	e0e5      	b.n	800783e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	223c      	movs	r2, #60	@ 0x3c
 8007676:	2101      	movs	r1, #1
 8007678:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b14      	cmp	r3, #20
 800767e:	d900      	bls.n	8007682 <HAL_TIM_PWM_ConfigChannel+0x32>
 8007680:	e0d1      	b.n	8007826 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	009a      	lsls	r2, r3, #2
 8007686:	4b70      	ldr	r3, [pc, #448]	@ (8007848 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8007688:	18d3      	adds	r3, r2, r3
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	0011      	movs	r1, r2
 8007696:	0018      	movs	r0, r3
 8007698:	f000 f972 	bl	8007980 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	699a      	ldr	r2, [r3, #24]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2108      	movs	r1, #8
 80076a8:	430a      	orrs	r2, r1
 80076aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	699a      	ldr	r2, [r3, #24]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2104      	movs	r1, #4
 80076b8:	438a      	bics	r2, r1
 80076ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6999      	ldr	r1, [r3, #24]
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	691a      	ldr	r2, [r3, #16]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	430a      	orrs	r2, r1
 80076cc:	619a      	str	r2, [r3, #24]
      break;
 80076ce:	e0af      	b.n	8007830 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	0011      	movs	r1, r2
 80076d8:	0018      	movs	r0, r3
 80076da:	f000 f9db 	bl	8007a94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	699a      	ldr	r2, [r3, #24]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2180      	movs	r1, #128	@ 0x80
 80076ea:	0109      	lsls	r1, r1, #4
 80076ec:	430a      	orrs	r2, r1
 80076ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	699a      	ldr	r2, [r3, #24]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4954      	ldr	r1, [pc, #336]	@ (800784c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80076fc:	400a      	ands	r2, r1
 80076fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6999      	ldr	r1, [r3, #24]
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	021a      	lsls	r2, r3, #8
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	430a      	orrs	r2, r1
 8007712:	619a      	str	r2, [r3, #24]
      break;
 8007714:	e08c      	b.n	8007830 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68ba      	ldr	r2, [r7, #8]
 800771c:	0011      	movs	r1, r2
 800771e:	0018      	movs	r0, r3
 8007720:	f000 fa3c 	bl	8007b9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	69da      	ldr	r2, [r3, #28]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2108      	movs	r1, #8
 8007730:	430a      	orrs	r2, r1
 8007732:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	69da      	ldr	r2, [r3, #28]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2104      	movs	r1, #4
 8007740:	438a      	bics	r2, r1
 8007742:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	69d9      	ldr	r1, [r3, #28]
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	691a      	ldr	r2, [r3, #16]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	430a      	orrs	r2, r1
 8007754:	61da      	str	r2, [r3, #28]
      break;
 8007756:	e06b      	b.n	8007830 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	0011      	movs	r1, r2
 8007760:	0018      	movs	r0, r3
 8007762:	f000 faa3 	bl	8007cac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	69da      	ldr	r2, [r3, #28]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2180      	movs	r1, #128	@ 0x80
 8007772:	0109      	lsls	r1, r1, #4
 8007774:	430a      	orrs	r2, r1
 8007776:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	69da      	ldr	r2, [r3, #28]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4932      	ldr	r1, [pc, #200]	@ (800784c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007784:	400a      	ands	r2, r1
 8007786:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	69d9      	ldr	r1, [r3, #28]
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	021a      	lsls	r2, r3, #8
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	430a      	orrs	r2, r1
 800779a:	61da      	str	r2, [r3, #28]
      break;
 800779c:	e048      	b.n	8007830 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	0011      	movs	r1, r2
 80077a6:	0018      	movs	r0, r3
 80077a8:	f000 faea 	bl	8007d80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2108      	movs	r1, #8
 80077b8:	430a      	orrs	r2, r1
 80077ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2104      	movs	r1, #4
 80077c8:	438a      	bics	r2, r1
 80077ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	691a      	ldr	r2, [r3, #16]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	430a      	orrs	r2, r1
 80077dc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80077de:	e027      	b.n	8007830 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	0011      	movs	r1, r2
 80077e8:	0018      	movs	r0, r3
 80077ea:	f000 fb29 	bl	8007e40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2180      	movs	r1, #128	@ 0x80
 80077fa:	0109      	lsls	r1, r1, #4
 80077fc:	430a      	orrs	r2, r1
 80077fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4910      	ldr	r1, [pc, #64]	@ (800784c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800780c:	400a      	ands	r2, r1
 800780e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	021a      	lsls	r2, r3, #8
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	430a      	orrs	r2, r1
 8007822:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007824:	e004      	b.n	8007830 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8007826:	2317      	movs	r3, #23
 8007828:	18fb      	adds	r3, r7, r3
 800782a:	2201      	movs	r2, #1
 800782c:	701a      	strb	r2, [r3, #0]
      break;
 800782e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	223c      	movs	r2, #60	@ 0x3c
 8007834:	2100      	movs	r1, #0
 8007836:	5499      	strb	r1, [r3, r2]

  return status;
 8007838:	2317      	movs	r3, #23
 800783a:	18fb      	adds	r3, r7, r3
 800783c:	781b      	ldrb	r3, [r3, #0]
}
 800783e:	0018      	movs	r0, r3
 8007840:	46bd      	mov	sp, r7
 8007842:	b006      	add	sp, #24
 8007844:	bd80      	pop	{r7, pc}
 8007846:	46c0      	nop			@ (mov r8, r8)
 8007848:	0800a3d8 	.word	0x0800a3d8
 800784c:	fffffbff 	.word	0xfffffbff

08007850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a3f      	ldr	r2, [pc, #252]	@ (8007960 <TIM_Base_SetConfig+0x110>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d00c      	beq.n	8007882 <TIM_Base_SetConfig+0x32>
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	2380      	movs	r3, #128	@ 0x80
 800786c:	05db      	lsls	r3, r3, #23
 800786e:	429a      	cmp	r2, r3
 8007870:	d007      	beq.n	8007882 <TIM_Base_SetConfig+0x32>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4a3b      	ldr	r2, [pc, #236]	@ (8007964 <TIM_Base_SetConfig+0x114>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d003      	beq.n	8007882 <TIM_Base_SetConfig+0x32>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a3a      	ldr	r2, [pc, #232]	@ (8007968 <TIM_Base_SetConfig+0x118>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d108      	bne.n	8007894 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2270      	movs	r2, #112	@ 0x70
 8007886:	4393      	bics	r3, r2
 8007888:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	68fa      	ldr	r2, [r7, #12]
 8007890:	4313      	orrs	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a32      	ldr	r2, [pc, #200]	@ (8007960 <TIM_Base_SetConfig+0x110>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d01c      	beq.n	80078d6 <TIM_Base_SetConfig+0x86>
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	2380      	movs	r3, #128	@ 0x80
 80078a0:	05db      	lsls	r3, r3, #23
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d017      	beq.n	80078d6 <TIM_Base_SetConfig+0x86>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a2e      	ldr	r2, [pc, #184]	@ (8007964 <TIM_Base_SetConfig+0x114>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d013      	beq.n	80078d6 <TIM_Base_SetConfig+0x86>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a2d      	ldr	r2, [pc, #180]	@ (8007968 <TIM_Base_SetConfig+0x118>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d00f      	beq.n	80078d6 <TIM_Base_SetConfig+0x86>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a2c      	ldr	r2, [pc, #176]	@ (800796c <TIM_Base_SetConfig+0x11c>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d00b      	beq.n	80078d6 <TIM_Base_SetConfig+0x86>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a2b      	ldr	r2, [pc, #172]	@ (8007970 <TIM_Base_SetConfig+0x120>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d007      	beq.n	80078d6 <TIM_Base_SetConfig+0x86>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a2a      	ldr	r2, [pc, #168]	@ (8007974 <TIM_Base_SetConfig+0x124>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d003      	beq.n	80078d6 <TIM_Base_SetConfig+0x86>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a29      	ldr	r2, [pc, #164]	@ (8007978 <TIM_Base_SetConfig+0x128>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d108      	bne.n	80078e8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	4a28      	ldr	r2, [pc, #160]	@ (800797c <TIM_Base_SetConfig+0x12c>)
 80078da:	4013      	ands	r3, r2
 80078dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2280      	movs	r2, #128	@ 0x80
 80078ec:	4393      	bics	r3, r2
 80078ee:	001a      	movs	r2, r3
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	695b      	ldr	r3, [r3, #20]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	689a      	ldr	r2, [r3, #8]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a13      	ldr	r2, [pc, #76]	@ (8007960 <TIM_Base_SetConfig+0x110>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d00b      	beq.n	800792e <TIM_Base_SetConfig+0xde>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a15      	ldr	r2, [pc, #84]	@ (8007970 <TIM_Base_SetConfig+0x120>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d007      	beq.n	800792e <TIM_Base_SetConfig+0xde>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a14      	ldr	r2, [pc, #80]	@ (8007974 <TIM_Base_SetConfig+0x124>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d003      	beq.n	800792e <TIM_Base_SetConfig+0xde>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a13      	ldr	r2, [pc, #76]	@ (8007978 <TIM_Base_SetConfig+0x128>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d103      	bne.n	8007936 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	691a      	ldr	r2, [r3, #16]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	2201      	movs	r2, #1
 8007942:	4013      	ands	r3, r2
 8007944:	2b01      	cmp	r3, #1
 8007946:	d106      	bne.n	8007956 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	2201      	movs	r2, #1
 800794e:	4393      	bics	r3, r2
 8007950:	001a      	movs	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	611a      	str	r2, [r3, #16]
  }
}
 8007956:	46c0      	nop			@ (mov r8, r8)
 8007958:	46bd      	mov	sp, r7
 800795a:	b004      	add	sp, #16
 800795c:	bd80      	pop	{r7, pc}
 800795e:	46c0      	nop			@ (mov r8, r8)
 8007960:	40012c00 	.word	0x40012c00
 8007964:	40000400 	.word	0x40000400
 8007968:	40000800 	.word	0x40000800
 800796c:	40002000 	.word	0x40002000
 8007970:	40014000 	.word	0x40014000
 8007974:	40014400 	.word	0x40014400
 8007978:	40014800 	.word	0x40014800
 800797c:	fffffcff 	.word	0xfffffcff

08007980 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a1b      	ldr	r3, [r3, #32]
 8007994:	2201      	movs	r2, #1
 8007996:	4393      	bics	r3, r2
 8007998:	001a      	movs	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	699b      	ldr	r3, [r3, #24]
 80079a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	4a32      	ldr	r2, [pc, #200]	@ (8007a78 <TIM_OC1_SetConfig+0xf8>)
 80079ae:	4013      	ands	r3, r2
 80079b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2203      	movs	r2, #3
 80079b6:	4393      	bics	r3, r2
 80079b8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	2202      	movs	r2, #2
 80079c8:	4393      	bics	r3, r2
 80079ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a28      	ldr	r2, [pc, #160]	@ (8007a7c <TIM_OC1_SetConfig+0xfc>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d00b      	beq.n	80079f6 <TIM_OC1_SetConfig+0x76>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a27      	ldr	r2, [pc, #156]	@ (8007a80 <TIM_OC1_SetConfig+0x100>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d007      	beq.n	80079f6 <TIM_OC1_SetConfig+0x76>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a26      	ldr	r2, [pc, #152]	@ (8007a84 <TIM_OC1_SetConfig+0x104>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d003      	beq.n	80079f6 <TIM_OC1_SetConfig+0x76>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a25      	ldr	r2, [pc, #148]	@ (8007a88 <TIM_OC1_SetConfig+0x108>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d10c      	bne.n	8007a10 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	2208      	movs	r2, #8
 80079fa:	4393      	bics	r3, r2
 80079fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	2204      	movs	r2, #4
 8007a0c:	4393      	bics	r3, r2
 8007a0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a1a      	ldr	r2, [pc, #104]	@ (8007a7c <TIM_OC1_SetConfig+0xfc>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d00b      	beq.n	8007a30 <TIM_OC1_SetConfig+0xb0>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a19      	ldr	r2, [pc, #100]	@ (8007a80 <TIM_OC1_SetConfig+0x100>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d007      	beq.n	8007a30 <TIM_OC1_SetConfig+0xb0>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a18      	ldr	r2, [pc, #96]	@ (8007a84 <TIM_OC1_SetConfig+0x104>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d003      	beq.n	8007a30 <TIM_OC1_SetConfig+0xb0>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a17      	ldr	r2, [pc, #92]	@ (8007a88 <TIM_OC1_SetConfig+0x108>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d111      	bne.n	8007a54 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	4a16      	ldr	r2, [pc, #88]	@ (8007a8c <TIM_OC1_SetConfig+0x10c>)
 8007a34:	4013      	ands	r3, r2
 8007a36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	4a15      	ldr	r2, [pc, #84]	@ (8007a90 <TIM_OC1_SetConfig+0x110>)
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	693a      	ldr	r2, [r7, #16]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	685a      	ldr	r2, [r3, #4]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	697a      	ldr	r2, [r7, #20]
 8007a6c:	621a      	str	r2, [r3, #32]
}
 8007a6e:	46c0      	nop			@ (mov r8, r8)
 8007a70:	46bd      	mov	sp, r7
 8007a72:	b006      	add	sp, #24
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	46c0      	nop			@ (mov r8, r8)
 8007a78:	fffeff8f 	.word	0xfffeff8f
 8007a7c:	40012c00 	.word	0x40012c00
 8007a80:	40014000 	.word	0x40014000
 8007a84:	40014400 	.word	0x40014400
 8007a88:	40014800 	.word	0x40014800
 8007a8c:	fffffeff 	.word	0xfffffeff
 8007a90:	fffffdff 	.word	0xfffffdff

08007a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a1b      	ldr	r3, [r3, #32]
 8007aa8:	2210      	movs	r2, #16
 8007aaa:	4393      	bics	r3, r2
 8007aac:	001a      	movs	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	4a2e      	ldr	r2, [pc, #184]	@ (8007b7c <TIM_OC2_SetConfig+0xe8>)
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	4a2d      	ldr	r2, [pc, #180]	@ (8007b80 <TIM_OC2_SetConfig+0xec>)
 8007aca:	4013      	ands	r3, r2
 8007acc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	021b      	lsls	r3, r3, #8
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2220      	movs	r2, #32
 8007ade:	4393      	bics	r3, r2
 8007ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	011b      	lsls	r3, r3, #4
 8007ae8:	697a      	ldr	r2, [r7, #20]
 8007aea:	4313      	orrs	r3, r2
 8007aec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a24      	ldr	r2, [pc, #144]	@ (8007b84 <TIM_OC2_SetConfig+0xf0>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d10d      	bne.n	8007b12 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2280      	movs	r2, #128	@ 0x80
 8007afa:	4393      	bics	r3, r2
 8007afc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	011b      	lsls	r3, r3, #4
 8007b04:	697a      	ldr	r2, [r7, #20]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	2240      	movs	r2, #64	@ 0x40
 8007b0e:	4393      	bics	r3, r2
 8007b10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a1b      	ldr	r2, [pc, #108]	@ (8007b84 <TIM_OC2_SetConfig+0xf0>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d00b      	beq.n	8007b32 <TIM_OC2_SetConfig+0x9e>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a1a      	ldr	r2, [pc, #104]	@ (8007b88 <TIM_OC2_SetConfig+0xf4>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d007      	beq.n	8007b32 <TIM_OC2_SetConfig+0x9e>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a19      	ldr	r2, [pc, #100]	@ (8007b8c <TIM_OC2_SetConfig+0xf8>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d003      	beq.n	8007b32 <TIM_OC2_SetConfig+0x9e>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a18      	ldr	r2, [pc, #96]	@ (8007b90 <TIM_OC2_SetConfig+0xfc>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d113      	bne.n	8007b5a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	4a17      	ldr	r2, [pc, #92]	@ (8007b94 <TIM_OC2_SetConfig+0x100>)
 8007b36:	4013      	ands	r3, r2
 8007b38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	4a16      	ldr	r2, [pc, #88]	@ (8007b98 <TIM_OC2_SetConfig+0x104>)
 8007b3e:	4013      	ands	r3, r2
 8007b40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	685a      	ldr	r2, [r3, #4]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	621a      	str	r2, [r3, #32]
}
 8007b74:	46c0      	nop			@ (mov r8, r8)
 8007b76:	46bd      	mov	sp, r7
 8007b78:	b006      	add	sp, #24
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	feff8fff 	.word	0xfeff8fff
 8007b80:	fffffcff 	.word	0xfffffcff
 8007b84:	40012c00 	.word	0x40012c00
 8007b88:	40014000 	.word	0x40014000
 8007b8c:	40014400 	.word	0x40014400
 8007b90:	40014800 	.word	0x40014800
 8007b94:	fffffbff 	.word	0xfffffbff
 8007b98:	fffff7ff 	.word	0xfffff7ff

08007b9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a1b      	ldr	r3, [r3, #32]
 8007bb0:	4a33      	ldr	r2, [pc, #204]	@ (8007c80 <TIM_OC3_SetConfig+0xe4>)
 8007bb2:	401a      	ands	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4a2f      	ldr	r2, [pc, #188]	@ (8007c84 <TIM_OC3_SetConfig+0xe8>)
 8007bc8:	4013      	ands	r3, r2
 8007bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2203      	movs	r2, #3
 8007bd0:	4393      	bics	r3, r2
 8007bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	4a29      	ldr	r2, [pc, #164]	@ (8007c88 <TIM_OC3_SetConfig+0xec>)
 8007be2:	4013      	ands	r3, r2
 8007be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	021b      	lsls	r3, r3, #8
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a25      	ldr	r2, [pc, #148]	@ (8007c8c <TIM_OC3_SetConfig+0xf0>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d10d      	bne.n	8007c16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	4a24      	ldr	r2, [pc, #144]	@ (8007c90 <TIM_OC3_SetConfig+0xf4>)
 8007bfe:	4013      	ands	r3, r2
 8007c00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	021b      	lsls	r3, r3, #8
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	4a20      	ldr	r2, [pc, #128]	@ (8007c94 <TIM_OC3_SetConfig+0xf8>)
 8007c12:	4013      	ands	r3, r2
 8007c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a1c      	ldr	r2, [pc, #112]	@ (8007c8c <TIM_OC3_SetConfig+0xf0>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d00b      	beq.n	8007c36 <TIM_OC3_SetConfig+0x9a>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a1d      	ldr	r2, [pc, #116]	@ (8007c98 <TIM_OC3_SetConfig+0xfc>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d007      	beq.n	8007c36 <TIM_OC3_SetConfig+0x9a>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a1c      	ldr	r2, [pc, #112]	@ (8007c9c <TIM_OC3_SetConfig+0x100>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d003      	beq.n	8007c36 <TIM_OC3_SetConfig+0x9a>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a1b      	ldr	r2, [pc, #108]	@ (8007ca0 <TIM_OC3_SetConfig+0x104>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d113      	bne.n	8007c5e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	4a1a      	ldr	r2, [pc, #104]	@ (8007ca4 <TIM_OC3_SetConfig+0x108>)
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	4a19      	ldr	r2, [pc, #100]	@ (8007ca8 <TIM_OC3_SetConfig+0x10c>)
 8007c42:	4013      	ands	r3, r2
 8007c44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	011b      	lsls	r3, r3, #4
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	011b      	lsls	r3, r3, #4
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	621a      	str	r2, [r3, #32]
}
 8007c78:	46c0      	nop			@ (mov r8, r8)
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	b006      	add	sp, #24
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	fffffeff 	.word	0xfffffeff
 8007c84:	fffeff8f 	.word	0xfffeff8f
 8007c88:	fffffdff 	.word	0xfffffdff
 8007c8c:	40012c00 	.word	0x40012c00
 8007c90:	fffff7ff 	.word	0xfffff7ff
 8007c94:	fffffbff 	.word	0xfffffbff
 8007c98:	40014000 	.word	0x40014000
 8007c9c:	40014400 	.word	0x40014400
 8007ca0:	40014800 	.word	0x40014800
 8007ca4:	ffffefff 	.word	0xffffefff
 8007ca8:	ffffdfff 	.word	0xffffdfff

08007cac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a1b      	ldr	r3, [r3, #32]
 8007cc0:	4a26      	ldr	r2, [pc, #152]	@ (8007d5c <TIM_OC4_SetConfig+0xb0>)
 8007cc2:	401a      	ands	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	4a22      	ldr	r2, [pc, #136]	@ (8007d60 <TIM_OC4_SetConfig+0xb4>)
 8007cd8:	4013      	ands	r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	4a21      	ldr	r2, [pc, #132]	@ (8007d64 <TIM_OC4_SetConfig+0xb8>)
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	021b      	lsls	r3, r3, #8
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	4a1d      	ldr	r2, [pc, #116]	@ (8007d68 <TIM_OC4_SetConfig+0xbc>)
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	031b      	lsls	r3, r3, #12
 8007cfe:	693a      	ldr	r2, [r7, #16]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a19      	ldr	r2, [pc, #100]	@ (8007d6c <TIM_OC4_SetConfig+0xc0>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d00b      	beq.n	8007d24 <TIM_OC4_SetConfig+0x78>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a18      	ldr	r2, [pc, #96]	@ (8007d70 <TIM_OC4_SetConfig+0xc4>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d007      	beq.n	8007d24 <TIM_OC4_SetConfig+0x78>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4a17      	ldr	r2, [pc, #92]	@ (8007d74 <TIM_OC4_SetConfig+0xc8>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d003      	beq.n	8007d24 <TIM_OC4_SetConfig+0x78>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a16      	ldr	r2, [pc, #88]	@ (8007d78 <TIM_OC4_SetConfig+0xcc>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d109      	bne.n	8007d38 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	4a15      	ldr	r2, [pc, #84]	@ (8007d7c <TIM_OC4_SetConfig+0xd0>)
 8007d28:	4013      	ands	r3, r2
 8007d2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	695b      	ldr	r3, [r3, #20]
 8007d30:	019b      	lsls	r3, r3, #6
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	697a      	ldr	r2, [r7, #20]
 8007d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	685a      	ldr	r2, [r3, #4]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	621a      	str	r2, [r3, #32]
}
 8007d52:	46c0      	nop			@ (mov r8, r8)
 8007d54:	46bd      	mov	sp, r7
 8007d56:	b006      	add	sp, #24
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	46c0      	nop			@ (mov r8, r8)
 8007d5c:	ffffefff 	.word	0xffffefff
 8007d60:	feff8fff 	.word	0xfeff8fff
 8007d64:	fffffcff 	.word	0xfffffcff
 8007d68:	ffffdfff 	.word	0xffffdfff
 8007d6c:	40012c00 	.word	0x40012c00
 8007d70:	40014000 	.word	0x40014000
 8007d74:	40014400 	.word	0x40014400
 8007d78:	40014800 	.word	0x40014800
 8007d7c:	ffffbfff 	.word	0xffffbfff

08007d80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a1b      	ldr	r3, [r3, #32]
 8007d8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6a1b      	ldr	r3, [r3, #32]
 8007d94:	4a23      	ldr	r2, [pc, #140]	@ (8007e24 <TIM_OC5_SetConfig+0xa4>)
 8007d96:	401a      	ands	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	4a1f      	ldr	r2, [pc, #124]	@ (8007e28 <TIM_OC5_SetConfig+0xa8>)
 8007dac:	4013      	ands	r3, r2
 8007dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8007e2c <TIM_OC5_SetConfig+0xac>)
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	041b      	lsls	r3, r3, #16
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a17      	ldr	r2, [pc, #92]	@ (8007e30 <TIM_OC5_SetConfig+0xb0>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d00b      	beq.n	8007dee <TIM_OC5_SetConfig+0x6e>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a16      	ldr	r2, [pc, #88]	@ (8007e34 <TIM_OC5_SetConfig+0xb4>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d007      	beq.n	8007dee <TIM_OC5_SetConfig+0x6e>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a15      	ldr	r2, [pc, #84]	@ (8007e38 <TIM_OC5_SetConfig+0xb8>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d003      	beq.n	8007dee <TIM_OC5_SetConfig+0x6e>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a14      	ldr	r2, [pc, #80]	@ (8007e3c <TIM_OC5_SetConfig+0xbc>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d109      	bne.n	8007e02 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	4a0c      	ldr	r2, [pc, #48]	@ (8007e24 <TIM_OC5_SetConfig+0xa4>)
 8007df2:	4013      	ands	r3, r2
 8007df4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	021b      	lsls	r3, r3, #8
 8007dfc:	697a      	ldr	r2, [r7, #20]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	697a      	ldr	r2, [r7, #20]
 8007e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	685a      	ldr	r2, [r3, #4]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	621a      	str	r2, [r3, #32]
}
 8007e1c:	46c0      	nop			@ (mov r8, r8)
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	b006      	add	sp, #24
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	fffeffff 	.word	0xfffeffff
 8007e28:	fffeff8f 	.word	0xfffeff8f
 8007e2c:	fffdffff 	.word	0xfffdffff
 8007e30:	40012c00 	.word	0x40012c00
 8007e34:	40014000 	.word	0x40014000
 8007e38:	40014400 	.word	0x40014400
 8007e3c:	40014800 	.word	0x40014800

08007e40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a1b      	ldr	r3, [r3, #32]
 8007e4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a1b      	ldr	r3, [r3, #32]
 8007e54:	4a24      	ldr	r2, [pc, #144]	@ (8007ee8 <TIM_OC6_SetConfig+0xa8>)
 8007e56:	401a      	ands	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	4a20      	ldr	r2, [pc, #128]	@ (8007eec <TIM_OC6_SetConfig+0xac>)
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	021b      	lsls	r3, r3, #8
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8007ef0 <TIM_OC6_SetConfig+0xb0>)
 8007e80:	4013      	ands	r3, r2
 8007e82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	051b      	lsls	r3, r3, #20
 8007e8a:	693a      	ldr	r2, [r7, #16]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a18      	ldr	r2, [pc, #96]	@ (8007ef4 <TIM_OC6_SetConfig+0xb4>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d00b      	beq.n	8007eb0 <TIM_OC6_SetConfig+0x70>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a17      	ldr	r2, [pc, #92]	@ (8007ef8 <TIM_OC6_SetConfig+0xb8>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d007      	beq.n	8007eb0 <TIM_OC6_SetConfig+0x70>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a16      	ldr	r2, [pc, #88]	@ (8007efc <TIM_OC6_SetConfig+0xbc>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d003      	beq.n	8007eb0 <TIM_OC6_SetConfig+0x70>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a15      	ldr	r2, [pc, #84]	@ (8007f00 <TIM_OC6_SetConfig+0xc0>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d109      	bne.n	8007ec4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	4a14      	ldr	r2, [pc, #80]	@ (8007f04 <TIM_OC6_SetConfig+0xc4>)
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	695b      	ldr	r3, [r3, #20]
 8007ebc:	029b      	lsls	r3, r3, #10
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	697a      	ldr	r2, [r7, #20]
 8007ec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	685a      	ldr	r2, [r3, #4]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	621a      	str	r2, [r3, #32]
}
 8007ede:	46c0      	nop			@ (mov r8, r8)
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	b006      	add	sp, #24
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	46c0      	nop			@ (mov r8, r8)
 8007ee8:	ffefffff 	.word	0xffefffff
 8007eec:	feff8fff 	.word	0xfeff8fff
 8007ef0:	ffdfffff 	.word	0xffdfffff
 8007ef4:	40012c00 	.word	0x40012c00
 8007ef8:	40014000 	.word	0x40014000
 8007efc:	40014400 	.word	0x40014400
 8007f00:	40014800 	.word	0x40014800
 8007f04:	fffbffff 	.word	0xfffbffff

08007f08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	221f      	movs	r2, #31
 8007f18:	4013      	ands	r3, r2
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	409a      	lsls	r2, r3
 8007f1e:	0013      	movs	r3, r2
 8007f20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	43d2      	mvns	r2, r2
 8007f2a:	401a      	ands	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6a1a      	ldr	r2, [r3, #32]
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	211f      	movs	r1, #31
 8007f38:	400b      	ands	r3, r1
 8007f3a:	6879      	ldr	r1, [r7, #4]
 8007f3c:	4099      	lsls	r1, r3
 8007f3e:	000b      	movs	r3, r1
 8007f40:	431a      	orrs	r2, r3
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	621a      	str	r2, [r3, #32]
}
 8007f46:	46c0      	nop			@ (mov r8, r8)
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	b006      	add	sp, #24
 8007f4c:	bd80      	pop	{r7, pc}
	...

08007f50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	223c      	movs	r2, #60	@ 0x3c
 8007f62:	5c9b      	ldrb	r3, [r3, r2]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d101      	bne.n	8007f6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f68:	2302      	movs	r3, #2
 8007f6a:	e06f      	b.n	800804c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	223c      	movs	r2, #60	@ 0x3c
 8007f70:	2101      	movs	r1, #1
 8007f72:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	22ff      	movs	r2, #255	@ 0xff
 8007f78:	4393      	bics	r3, r2
 8007f7a:	001a      	movs	r2, r3
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4a33      	ldr	r2, [pc, #204]	@ (8008054 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8007f88:	401a      	ands	r2, r3
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	4a30      	ldr	r2, [pc, #192]	@ (8008058 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8007f96:	401a      	ands	r2, r3
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	4a2e      	ldr	r2, [pc, #184]	@ (800805c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8007fa4:	401a      	ands	r2, r3
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	4a2b      	ldr	r2, [pc, #172]	@ (8008060 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8007fb2:	401a      	ands	r2, r3
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4a29      	ldr	r2, [pc, #164]	@ (8008064 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007fc0:	401a      	ands	r2, r3
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	695b      	ldr	r3, [r3, #20]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	4a26      	ldr	r2, [pc, #152]	@ (8008068 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8007fce:	401a      	ands	r2, r3
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	4a24      	ldr	r2, [pc, #144]	@ (800806c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007fdc:	401a      	ands	r2, r3
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	041b      	lsls	r3, r3, #16
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	4a21      	ldr	r2, [pc, #132]	@ (8008070 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007fec:	401a      	ands	r2, r3
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	69db      	ldr	r3, [r3, #28]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8008074 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d11c      	bne.n	800803a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	4a1d      	ldr	r2, [pc, #116]	@ (8008078 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008004:	401a      	ands	r2, r3
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800800a:	051b      	lsls	r3, r3, #20
 800800c:	4313      	orrs	r3, r2
 800800e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	4a1a      	ldr	r2, [pc, #104]	@ (800807c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008014:	401a      	ands	r2, r3
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	4313      	orrs	r3, r2
 800801c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	4a17      	ldr	r2, [pc, #92]	@ (8008080 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008022:	401a      	ands	r2, r3
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008028:	4313      	orrs	r3, r2
 800802a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	4a15      	ldr	r2, [pc, #84]	@ (8008084 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008030:	401a      	ands	r2, r3
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008036:	4313      	orrs	r3, r2
 8008038:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	223c      	movs	r2, #60	@ 0x3c
 8008046:	2100      	movs	r1, #0
 8008048:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	0018      	movs	r0, r3
 800804e:	46bd      	mov	sp, r7
 8008050:	b004      	add	sp, #16
 8008052:	bd80      	pop	{r7, pc}
 8008054:	fffffcff 	.word	0xfffffcff
 8008058:	fffffbff 	.word	0xfffffbff
 800805c:	fffff7ff 	.word	0xfffff7ff
 8008060:	ffffefff 	.word	0xffffefff
 8008064:	ffffdfff 	.word	0xffffdfff
 8008068:	ffffbfff 	.word	0xffffbfff
 800806c:	fff0ffff 	.word	0xfff0ffff
 8008070:	efffffff 	.word	0xefffffff
 8008074:	40012c00 	.word	0x40012c00
 8008078:	ff0fffff 	.word	0xff0fffff
 800807c:	feffffff 	.word	0xfeffffff
 8008080:	fdffffff 	.word	0xfdffffff
 8008084:	dfffffff 	.word	0xdfffffff

08008088 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d101      	bne.n	800809a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e046      	b.n	8008128 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2288      	movs	r2, #136	@ 0x88
 800809e:	589b      	ldr	r3, [r3, r2]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d107      	bne.n	80080b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2284      	movs	r2, #132	@ 0x84
 80080a8:	2100      	movs	r1, #0
 80080aa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	0018      	movs	r0, r3
 80080b0:	f7fb fcde 	bl	8003a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2288      	movs	r2, #136	@ 0x88
 80080b8:	2124      	movs	r1, #36	@ 0x24
 80080ba:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2101      	movs	r1, #1
 80080c8:	438a      	bics	r2, r1
 80080ca:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d003      	beq.n	80080dc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	0018      	movs	r0, r3
 80080d8:	f000 fd0c 	bl	8008af4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	0018      	movs	r0, r3
 80080e0:	f000 f9b2 	bl	8008448 <UART_SetConfig>
 80080e4:	0003      	movs	r3, r0
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d101      	bne.n	80080ee <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e01c      	b.n	8008128 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	685a      	ldr	r2, [r3, #4]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	490d      	ldr	r1, [pc, #52]	@ (8008130 <HAL_UART_Init+0xa8>)
 80080fa:	400a      	ands	r2, r1
 80080fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	689a      	ldr	r2, [r3, #8]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	212a      	movs	r1, #42	@ 0x2a
 800810a:	438a      	bics	r2, r1
 800810c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2101      	movs	r1, #1
 800811a:	430a      	orrs	r2, r1
 800811c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	0018      	movs	r0, r3
 8008122:	f000 fd9b 	bl	8008c5c <UART_CheckIdleState>
 8008126:	0003      	movs	r3, r0
}
 8008128:	0018      	movs	r0, r3
 800812a:	46bd      	mov	sp, r7
 800812c:	b002      	add	sp, #8
 800812e:	bd80      	pop	{r7, pc}
 8008130:	ffffb7ff 	.word	0xffffb7ff

08008134 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b08a      	sub	sp, #40	@ 0x28
 8008138:	af02      	add	r7, sp, #8
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	603b      	str	r3, [r7, #0]
 8008140:	1dbb      	adds	r3, r7, #6
 8008142:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2288      	movs	r2, #136	@ 0x88
 8008148:	589b      	ldr	r3, [r3, r2]
 800814a:	2b20      	cmp	r3, #32
 800814c:	d000      	beq.n	8008150 <HAL_UART_Transmit+0x1c>
 800814e:	e090      	b.n	8008272 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d003      	beq.n	800815e <HAL_UART_Transmit+0x2a>
 8008156:	1dbb      	adds	r3, r7, #6
 8008158:	881b      	ldrh	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d101      	bne.n	8008162 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e088      	b.n	8008274 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	689a      	ldr	r2, [r3, #8]
 8008166:	2380      	movs	r3, #128	@ 0x80
 8008168:	015b      	lsls	r3, r3, #5
 800816a:	429a      	cmp	r2, r3
 800816c:	d109      	bne.n	8008182 <HAL_UART_Transmit+0x4e>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d105      	bne.n	8008182 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	2201      	movs	r2, #1
 800817a:	4013      	ands	r3, r2
 800817c:	d001      	beq.n	8008182 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e078      	b.n	8008274 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2290      	movs	r2, #144	@ 0x90
 8008186:	2100      	movs	r1, #0
 8008188:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2288      	movs	r2, #136	@ 0x88
 800818e:	2121      	movs	r1, #33	@ 0x21
 8008190:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008192:	f7fb fe23 	bl	8003ddc <HAL_GetTick>
 8008196:	0003      	movs	r3, r0
 8008198:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	1dba      	adds	r2, r7, #6
 800819e:	2154      	movs	r1, #84	@ 0x54
 80081a0:	8812      	ldrh	r2, [r2, #0]
 80081a2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	1dba      	adds	r2, r7, #6
 80081a8:	2156      	movs	r1, #86	@ 0x56
 80081aa:	8812      	ldrh	r2, [r2, #0]
 80081ac:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	689a      	ldr	r2, [r3, #8]
 80081b2:	2380      	movs	r3, #128	@ 0x80
 80081b4:	015b      	lsls	r3, r3, #5
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d108      	bne.n	80081cc <HAL_UART_Transmit+0x98>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d104      	bne.n	80081cc <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80081c2:	2300      	movs	r3, #0
 80081c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	61bb      	str	r3, [r7, #24]
 80081ca:	e003      	b.n	80081d4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081d0:	2300      	movs	r3, #0
 80081d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80081d4:	e030      	b.n	8008238 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	0013      	movs	r3, r2
 80081e0:	2200      	movs	r2, #0
 80081e2:	2180      	movs	r1, #128	@ 0x80
 80081e4:	f000 fde4 	bl	8008db0 <UART_WaitOnFlagUntilTimeout>
 80081e8:	1e03      	subs	r3, r0, #0
 80081ea:	d005      	beq.n	80081f8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2288      	movs	r2, #136	@ 0x88
 80081f0:	2120      	movs	r1, #32
 80081f2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e03d      	b.n	8008274 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d10b      	bne.n	8008216 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	881b      	ldrh	r3, [r3, #0]
 8008202:	001a      	movs	r2, r3
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	05d2      	lsls	r2, r2, #23
 800820a:	0dd2      	lsrs	r2, r2, #23
 800820c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	3302      	adds	r3, #2
 8008212:	61bb      	str	r3, [r7, #24]
 8008214:	e007      	b.n	8008226 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	781a      	ldrb	r2, [r3, #0]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	3301      	adds	r3, #1
 8008224:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2256      	movs	r2, #86	@ 0x56
 800822a:	5a9b      	ldrh	r3, [r3, r2]
 800822c:	b29b      	uxth	r3, r3
 800822e:	3b01      	subs	r3, #1
 8008230:	b299      	uxth	r1, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2256      	movs	r2, #86	@ 0x56
 8008236:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2256      	movs	r2, #86	@ 0x56
 800823c:	5a9b      	ldrh	r3, [r3, r2]
 800823e:	b29b      	uxth	r3, r3
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1c8      	bne.n	80081d6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008244:	697a      	ldr	r2, [r7, #20]
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	0013      	movs	r3, r2
 800824e:	2200      	movs	r2, #0
 8008250:	2140      	movs	r1, #64	@ 0x40
 8008252:	f000 fdad 	bl	8008db0 <UART_WaitOnFlagUntilTimeout>
 8008256:	1e03      	subs	r3, r0, #0
 8008258:	d005      	beq.n	8008266 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2288      	movs	r2, #136	@ 0x88
 800825e:	2120      	movs	r1, #32
 8008260:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8008262:	2303      	movs	r3, #3
 8008264:	e006      	b.n	8008274 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2288      	movs	r2, #136	@ 0x88
 800826a:	2120      	movs	r1, #32
 800826c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800826e:	2300      	movs	r3, #0
 8008270:	e000      	b.n	8008274 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8008272:	2302      	movs	r3, #2
  }
}
 8008274:	0018      	movs	r0, r3
 8008276:	46bd      	mov	sp, r7
 8008278:	b008      	add	sp, #32
 800827a:	bd80      	pop	{r7, pc}

0800827c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b08a      	sub	sp, #40	@ 0x28
 8008280:	af02      	add	r7, sp, #8
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	603b      	str	r3, [r7, #0]
 8008288:	1dbb      	adds	r3, r7, #6
 800828a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	228c      	movs	r2, #140	@ 0x8c
 8008290:	589b      	ldr	r3, [r3, r2]
 8008292:	2b20      	cmp	r3, #32
 8008294:	d000      	beq.n	8008298 <HAL_UART_Receive+0x1c>
 8008296:	e0d0      	b.n	800843a <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d003      	beq.n	80082a6 <HAL_UART_Receive+0x2a>
 800829e:	1dbb      	adds	r3, r7, #6
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d101      	bne.n	80082aa <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e0c8      	b.n	800843c <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	689a      	ldr	r2, [r3, #8]
 80082ae:	2380      	movs	r3, #128	@ 0x80
 80082b0:	015b      	lsls	r3, r3, #5
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d109      	bne.n	80082ca <HAL_UART_Receive+0x4e>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d105      	bne.n	80082ca <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	2201      	movs	r2, #1
 80082c2:	4013      	ands	r3, r2
 80082c4:	d001      	beq.n	80082ca <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e0b8      	b.n	800843c <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2290      	movs	r2, #144	@ 0x90
 80082ce:	2100      	movs	r1, #0
 80082d0:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	228c      	movs	r2, #140	@ 0x8c
 80082d6:	2122      	movs	r1, #34	@ 0x22
 80082d8:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082e0:	f7fb fd7c 	bl	8003ddc <HAL_GetTick>
 80082e4:	0003      	movs	r3, r0
 80082e6:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	1dba      	adds	r2, r7, #6
 80082ec:	215c      	movs	r1, #92	@ 0x5c
 80082ee:	8812      	ldrh	r2, [r2, #0]
 80082f0:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	1dba      	adds	r2, r7, #6
 80082f6:	215e      	movs	r1, #94	@ 0x5e
 80082f8:	8812      	ldrh	r2, [r2, #0]
 80082fa:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	689a      	ldr	r2, [r3, #8]
 8008300:	2380      	movs	r3, #128	@ 0x80
 8008302:	015b      	lsls	r3, r3, #5
 8008304:	429a      	cmp	r2, r3
 8008306:	d10d      	bne.n	8008324 <HAL_UART_Receive+0xa8>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d104      	bne.n	800831a <HAL_UART_Receive+0x9e>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2260      	movs	r2, #96	@ 0x60
 8008314:	494b      	ldr	r1, [pc, #300]	@ (8008444 <HAL_UART_Receive+0x1c8>)
 8008316:	5299      	strh	r1, [r3, r2]
 8008318:	e02e      	b.n	8008378 <HAL_UART_Receive+0xfc>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2260      	movs	r2, #96	@ 0x60
 800831e:	21ff      	movs	r1, #255	@ 0xff
 8008320:	5299      	strh	r1, [r3, r2]
 8008322:	e029      	b.n	8008378 <HAL_UART_Receive+0xfc>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10d      	bne.n	8008348 <HAL_UART_Receive+0xcc>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d104      	bne.n	800833e <HAL_UART_Receive+0xc2>
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2260      	movs	r2, #96	@ 0x60
 8008338:	21ff      	movs	r1, #255	@ 0xff
 800833a:	5299      	strh	r1, [r3, r2]
 800833c:	e01c      	b.n	8008378 <HAL_UART_Receive+0xfc>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2260      	movs	r2, #96	@ 0x60
 8008342:	217f      	movs	r1, #127	@ 0x7f
 8008344:	5299      	strh	r1, [r3, r2]
 8008346:	e017      	b.n	8008378 <HAL_UART_Receive+0xfc>
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	689a      	ldr	r2, [r3, #8]
 800834c:	2380      	movs	r3, #128	@ 0x80
 800834e:	055b      	lsls	r3, r3, #21
 8008350:	429a      	cmp	r2, r3
 8008352:	d10d      	bne.n	8008370 <HAL_UART_Receive+0xf4>
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d104      	bne.n	8008366 <HAL_UART_Receive+0xea>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2260      	movs	r2, #96	@ 0x60
 8008360:	217f      	movs	r1, #127	@ 0x7f
 8008362:	5299      	strh	r1, [r3, r2]
 8008364:	e008      	b.n	8008378 <HAL_UART_Receive+0xfc>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2260      	movs	r2, #96	@ 0x60
 800836a:	213f      	movs	r1, #63	@ 0x3f
 800836c:	5299      	strh	r1, [r3, r2]
 800836e:	e003      	b.n	8008378 <HAL_UART_Receive+0xfc>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2260      	movs	r2, #96	@ 0x60
 8008374:	2100      	movs	r1, #0
 8008376:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8008378:	2312      	movs	r3, #18
 800837a:	18fb      	adds	r3, r7, r3
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	2160      	movs	r1, #96	@ 0x60
 8008380:	5a52      	ldrh	r2, [r2, r1]
 8008382:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	689a      	ldr	r2, [r3, #8]
 8008388:	2380      	movs	r3, #128	@ 0x80
 800838a:	015b      	lsls	r3, r3, #5
 800838c:	429a      	cmp	r2, r3
 800838e:	d108      	bne.n	80083a2 <HAL_UART_Receive+0x126>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d104      	bne.n	80083a2 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8008398:	2300      	movs	r3, #0
 800839a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	61bb      	str	r3, [r7, #24]
 80083a0:	e003      	b.n	80083aa <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80083a6:	2300      	movs	r3, #0
 80083a8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80083aa:	e03a      	b.n	8008422 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80083ac:	697a      	ldr	r2, [r7, #20]
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	0013      	movs	r3, r2
 80083b6:	2200      	movs	r2, #0
 80083b8:	2120      	movs	r1, #32
 80083ba:	f000 fcf9 	bl	8008db0 <UART_WaitOnFlagUntilTimeout>
 80083be:	1e03      	subs	r3, r0, #0
 80083c0:	d005      	beq.n	80083ce <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	228c      	movs	r2, #140	@ 0x8c
 80083c6:	2120      	movs	r1, #32
 80083c8:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80083ca:	2303      	movs	r3, #3
 80083cc:	e036      	b.n	800843c <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10e      	bne.n	80083f2 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083da:	b29b      	uxth	r3, r3
 80083dc:	2212      	movs	r2, #18
 80083de:	18ba      	adds	r2, r7, r2
 80083e0:	8812      	ldrh	r2, [r2, #0]
 80083e2:	4013      	ands	r3, r2
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	3302      	adds	r3, #2
 80083ee:	61bb      	str	r3, [r7, #24]
 80083f0:	e00e      	b.n	8008410 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2212      	movs	r2, #18
 80083fc:	18ba      	adds	r2, r7, r2
 80083fe:	8812      	ldrh	r2, [r2, #0]
 8008400:	b2d2      	uxtb	r2, r2
 8008402:	4013      	ands	r3, r2
 8008404:	b2da      	uxtb	r2, r3
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	3301      	adds	r3, #1
 800840e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	225e      	movs	r2, #94	@ 0x5e
 8008414:	5a9b      	ldrh	r3, [r3, r2]
 8008416:	b29b      	uxth	r3, r3
 8008418:	3b01      	subs	r3, #1
 800841a:	b299      	uxth	r1, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	225e      	movs	r2, #94	@ 0x5e
 8008420:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	225e      	movs	r2, #94	@ 0x5e
 8008426:	5a9b      	ldrh	r3, [r3, r2]
 8008428:	b29b      	uxth	r3, r3
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1be      	bne.n	80083ac <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	228c      	movs	r2, #140	@ 0x8c
 8008432:	2120      	movs	r1, #32
 8008434:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	e000      	b.n	800843c <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800843a:	2302      	movs	r3, #2
  }
}
 800843c:	0018      	movs	r0, r3
 800843e:	46bd      	mov	sp, r7
 8008440:	b008      	add	sp, #32
 8008442:	bd80      	pop	{r7, pc}
 8008444:	000001ff 	.word	0x000001ff

08008448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008448:	b5b0      	push	{r4, r5, r7, lr}
 800844a:	b090      	sub	sp, #64	@ 0x40
 800844c:	af00      	add	r7, sp, #0
 800844e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008450:	231a      	movs	r3, #26
 8008452:	2220      	movs	r2, #32
 8008454:	189b      	adds	r3, r3, r2
 8008456:	19db      	adds	r3, r3, r7
 8008458:	2200      	movs	r2, #0
 800845a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800845c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845e:	689a      	ldr	r2, [r3, #8]
 8008460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	431a      	orrs	r2, r3
 8008466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	431a      	orrs	r2, r3
 800846c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800846e:	69db      	ldr	r3, [r3, #28]
 8008470:	4313      	orrs	r3, r2
 8008472:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4ac1      	ldr	r2, [pc, #772]	@ (8008780 <UART_SetConfig+0x338>)
 800847c:	4013      	ands	r3, r2
 800847e:	0019      	movs	r1, r3
 8008480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008486:	430b      	orrs	r3, r1
 8008488:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800848a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	4abc      	ldr	r2, [pc, #752]	@ (8008784 <UART_SetConfig+0x33c>)
 8008492:	4013      	ands	r3, r2
 8008494:	0018      	movs	r0, r3
 8008496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008498:	68d9      	ldr	r1, [r3, #12]
 800849a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	0003      	movs	r3, r0
 80084a0:	430b      	orrs	r3, r1
 80084a2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80084a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a6:	699b      	ldr	r3, [r3, #24]
 80084a8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80084aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4ab6      	ldr	r2, [pc, #728]	@ (8008788 <UART_SetConfig+0x340>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d009      	beq.n	80084c8 <UART_SetConfig+0x80>
 80084b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4ab4      	ldr	r2, [pc, #720]	@ (800878c <UART_SetConfig+0x344>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d004      	beq.n	80084c8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80084be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c0:	6a1b      	ldr	r3, [r3, #32]
 80084c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80084c4:	4313      	orrs	r3, r2
 80084c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	4ab0      	ldr	r2, [pc, #704]	@ (8008790 <UART_SetConfig+0x348>)
 80084d0:	4013      	ands	r3, r2
 80084d2:	0019      	movs	r1, r3
 80084d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084da:	430b      	orrs	r3, r1
 80084dc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80084de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e4:	220f      	movs	r2, #15
 80084e6:	4393      	bics	r3, r2
 80084e8:	0018      	movs	r0, r3
 80084ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ec:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80084ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	0003      	movs	r3, r0
 80084f4:	430b      	orrs	r3, r1
 80084f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4aa5      	ldr	r2, [pc, #660]	@ (8008794 <UART_SetConfig+0x34c>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d131      	bne.n	8008566 <UART_SetConfig+0x11e>
 8008502:	4ba5      	ldr	r3, [pc, #660]	@ (8008798 <UART_SetConfig+0x350>)
 8008504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008506:	2203      	movs	r2, #3
 8008508:	4013      	ands	r3, r2
 800850a:	2b03      	cmp	r3, #3
 800850c:	d01d      	beq.n	800854a <UART_SetConfig+0x102>
 800850e:	d823      	bhi.n	8008558 <UART_SetConfig+0x110>
 8008510:	2b02      	cmp	r3, #2
 8008512:	d00c      	beq.n	800852e <UART_SetConfig+0xe6>
 8008514:	d820      	bhi.n	8008558 <UART_SetConfig+0x110>
 8008516:	2b00      	cmp	r3, #0
 8008518:	d002      	beq.n	8008520 <UART_SetConfig+0xd8>
 800851a:	2b01      	cmp	r3, #1
 800851c:	d00e      	beq.n	800853c <UART_SetConfig+0xf4>
 800851e:	e01b      	b.n	8008558 <UART_SetConfig+0x110>
 8008520:	231b      	movs	r3, #27
 8008522:	2220      	movs	r2, #32
 8008524:	189b      	adds	r3, r3, r2
 8008526:	19db      	adds	r3, r3, r7
 8008528:	2200      	movs	r2, #0
 800852a:	701a      	strb	r2, [r3, #0]
 800852c:	e154      	b.n	80087d8 <UART_SetConfig+0x390>
 800852e:	231b      	movs	r3, #27
 8008530:	2220      	movs	r2, #32
 8008532:	189b      	adds	r3, r3, r2
 8008534:	19db      	adds	r3, r3, r7
 8008536:	2202      	movs	r2, #2
 8008538:	701a      	strb	r2, [r3, #0]
 800853a:	e14d      	b.n	80087d8 <UART_SetConfig+0x390>
 800853c:	231b      	movs	r3, #27
 800853e:	2220      	movs	r2, #32
 8008540:	189b      	adds	r3, r3, r2
 8008542:	19db      	adds	r3, r3, r7
 8008544:	2204      	movs	r2, #4
 8008546:	701a      	strb	r2, [r3, #0]
 8008548:	e146      	b.n	80087d8 <UART_SetConfig+0x390>
 800854a:	231b      	movs	r3, #27
 800854c:	2220      	movs	r2, #32
 800854e:	189b      	adds	r3, r3, r2
 8008550:	19db      	adds	r3, r3, r7
 8008552:	2208      	movs	r2, #8
 8008554:	701a      	strb	r2, [r3, #0]
 8008556:	e13f      	b.n	80087d8 <UART_SetConfig+0x390>
 8008558:	231b      	movs	r3, #27
 800855a:	2220      	movs	r2, #32
 800855c:	189b      	adds	r3, r3, r2
 800855e:	19db      	adds	r3, r3, r7
 8008560:	2210      	movs	r2, #16
 8008562:	701a      	strb	r2, [r3, #0]
 8008564:	e138      	b.n	80087d8 <UART_SetConfig+0x390>
 8008566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a8c      	ldr	r2, [pc, #560]	@ (800879c <UART_SetConfig+0x354>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d131      	bne.n	80085d4 <UART_SetConfig+0x18c>
 8008570:	4b89      	ldr	r3, [pc, #548]	@ (8008798 <UART_SetConfig+0x350>)
 8008572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008574:	220c      	movs	r2, #12
 8008576:	4013      	ands	r3, r2
 8008578:	2b0c      	cmp	r3, #12
 800857a:	d01d      	beq.n	80085b8 <UART_SetConfig+0x170>
 800857c:	d823      	bhi.n	80085c6 <UART_SetConfig+0x17e>
 800857e:	2b08      	cmp	r3, #8
 8008580:	d00c      	beq.n	800859c <UART_SetConfig+0x154>
 8008582:	d820      	bhi.n	80085c6 <UART_SetConfig+0x17e>
 8008584:	2b00      	cmp	r3, #0
 8008586:	d002      	beq.n	800858e <UART_SetConfig+0x146>
 8008588:	2b04      	cmp	r3, #4
 800858a:	d00e      	beq.n	80085aa <UART_SetConfig+0x162>
 800858c:	e01b      	b.n	80085c6 <UART_SetConfig+0x17e>
 800858e:	231b      	movs	r3, #27
 8008590:	2220      	movs	r2, #32
 8008592:	189b      	adds	r3, r3, r2
 8008594:	19db      	adds	r3, r3, r7
 8008596:	2200      	movs	r2, #0
 8008598:	701a      	strb	r2, [r3, #0]
 800859a:	e11d      	b.n	80087d8 <UART_SetConfig+0x390>
 800859c:	231b      	movs	r3, #27
 800859e:	2220      	movs	r2, #32
 80085a0:	189b      	adds	r3, r3, r2
 80085a2:	19db      	adds	r3, r3, r7
 80085a4:	2202      	movs	r2, #2
 80085a6:	701a      	strb	r2, [r3, #0]
 80085a8:	e116      	b.n	80087d8 <UART_SetConfig+0x390>
 80085aa:	231b      	movs	r3, #27
 80085ac:	2220      	movs	r2, #32
 80085ae:	189b      	adds	r3, r3, r2
 80085b0:	19db      	adds	r3, r3, r7
 80085b2:	2204      	movs	r2, #4
 80085b4:	701a      	strb	r2, [r3, #0]
 80085b6:	e10f      	b.n	80087d8 <UART_SetConfig+0x390>
 80085b8:	231b      	movs	r3, #27
 80085ba:	2220      	movs	r2, #32
 80085bc:	189b      	adds	r3, r3, r2
 80085be:	19db      	adds	r3, r3, r7
 80085c0:	2208      	movs	r2, #8
 80085c2:	701a      	strb	r2, [r3, #0]
 80085c4:	e108      	b.n	80087d8 <UART_SetConfig+0x390>
 80085c6:	231b      	movs	r3, #27
 80085c8:	2220      	movs	r2, #32
 80085ca:	189b      	adds	r3, r3, r2
 80085cc:	19db      	adds	r3, r3, r7
 80085ce:	2210      	movs	r2, #16
 80085d0:	701a      	strb	r2, [r3, #0]
 80085d2:	e101      	b.n	80087d8 <UART_SetConfig+0x390>
 80085d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a71      	ldr	r2, [pc, #452]	@ (80087a0 <UART_SetConfig+0x358>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d131      	bne.n	8008642 <UART_SetConfig+0x1fa>
 80085de:	4b6e      	ldr	r3, [pc, #440]	@ (8008798 <UART_SetConfig+0x350>)
 80085e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085e2:	2230      	movs	r2, #48	@ 0x30
 80085e4:	4013      	ands	r3, r2
 80085e6:	2b30      	cmp	r3, #48	@ 0x30
 80085e8:	d01d      	beq.n	8008626 <UART_SetConfig+0x1de>
 80085ea:	d823      	bhi.n	8008634 <UART_SetConfig+0x1ec>
 80085ec:	2b20      	cmp	r3, #32
 80085ee:	d00c      	beq.n	800860a <UART_SetConfig+0x1c2>
 80085f0:	d820      	bhi.n	8008634 <UART_SetConfig+0x1ec>
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d002      	beq.n	80085fc <UART_SetConfig+0x1b4>
 80085f6:	2b10      	cmp	r3, #16
 80085f8:	d00e      	beq.n	8008618 <UART_SetConfig+0x1d0>
 80085fa:	e01b      	b.n	8008634 <UART_SetConfig+0x1ec>
 80085fc:	231b      	movs	r3, #27
 80085fe:	2220      	movs	r2, #32
 8008600:	189b      	adds	r3, r3, r2
 8008602:	19db      	adds	r3, r3, r7
 8008604:	2200      	movs	r2, #0
 8008606:	701a      	strb	r2, [r3, #0]
 8008608:	e0e6      	b.n	80087d8 <UART_SetConfig+0x390>
 800860a:	231b      	movs	r3, #27
 800860c:	2220      	movs	r2, #32
 800860e:	189b      	adds	r3, r3, r2
 8008610:	19db      	adds	r3, r3, r7
 8008612:	2202      	movs	r2, #2
 8008614:	701a      	strb	r2, [r3, #0]
 8008616:	e0df      	b.n	80087d8 <UART_SetConfig+0x390>
 8008618:	231b      	movs	r3, #27
 800861a:	2220      	movs	r2, #32
 800861c:	189b      	adds	r3, r3, r2
 800861e:	19db      	adds	r3, r3, r7
 8008620:	2204      	movs	r2, #4
 8008622:	701a      	strb	r2, [r3, #0]
 8008624:	e0d8      	b.n	80087d8 <UART_SetConfig+0x390>
 8008626:	231b      	movs	r3, #27
 8008628:	2220      	movs	r2, #32
 800862a:	189b      	adds	r3, r3, r2
 800862c:	19db      	adds	r3, r3, r7
 800862e:	2208      	movs	r2, #8
 8008630:	701a      	strb	r2, [r3, #0]
 8008632:	e0d1      	b.n	80087d8 <UART_SetConfig+0x390>
 8008634:	231b      	movs	r3, #27
 8008636:	2220      	movs	r2, #32
 8008638:	189b      	adds	r3, r3, r2
 800863a:	19db      	adds	r3, r3, r7
 800863c:	2210      	movs	r2, #16
 800863e:	701a      	strb	r2, [r3, #0]
 8008640:	e0ca      	b.n	80087d8 <UART_SetConfig+0x390>
 8008642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a57      	ldr	r2, [pc, #348]	@ (80087a4 <UART_SetConfig+0x35c>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d106      	bne.n	800865a <UART_SetConfig+0x212>
 800864c:	231b      	movs	r3, #27
 800864e:	2220      	movs	r2, #32
 8008650:	189b      	adds	r3, r3, r2
 8008652:	19db      	adds	r3, r3, r7
 8008654:	2200      	movs	r2, #0
 8008656:	701a      	strb	r2, [r3, #0]
 8008658:	e0be      	b.n	80087d8 <UART_SetConfig+0x390>
 800865a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a52      	ldr	r2, [pc, #328]	@ (80087a8 <UART_SetConfig+0x360>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d106      	bne.n	8008672 <UART_SetConfig+0x22a>
 8008664:	231b      	movs	r3, #27
 8008666:	2220      	movs	r2, #32
 8008668:	189b      	adds	r3, r3, r2
 800866a:	19db      	adds	r3, r3, r7
 800866c:	2200      	movs	r2, #0
 800866e:	701a      	strb	r2, [r3, #0]
 8008670:	e0b2      	b.n	80087d8 <UART_SetConfig+0x390>
 8008672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a4d      	ldr	r2, [pc, #308]	@ (80087ac <UART_SetConfig+0x364>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d106      	bne.n	800868a <UART_SetConfig+0x242>
 800867c:	231b      	movs	r3, #27
 800867e:	2220      	movs	r2, #32
 8008680:	189b      	adds	r3, r3, r2
 8008682:	19db      	adds	r3, r3, r7
 8008684:	2200      	movs	r2, #0
 8008686:	701a      	strb	r2, [r3, #0]
 8008688:	e0a6      	b.n	80087d8 <UART_SetConfig+0x390>
 800868a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a3e      	ldr	r2, [pc, #248]	@ (8008788 <UART_SetConfig+0x340>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d13e      	bne.n	8008712 <UART_SetConfig+0x2ca>
 8008694:	4b40      	ldr	r3, [pc, #256]	@ (8008798 <UART_SetConfig+0x350>)
 8008696:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008698:	23c0      	movs	r3, #192	@ 0xc0
 800869a:	011b      	lsls	r3, r3, #4
 800869c:	4013      	ands	r3, r2
 800869e:	22c0      	movs	r2, #192	@ 0xc0
 80086a0:	0112      	lsls	r2, r2, #4
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d027      	beq.n	80086f6 <UART_SetConfig+0x2ae>
 80086a6:	22c0      	movs	r2, #192	@ 0xc0
 80086a8:	0112      	lsls	r2, r2, #4
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d82a      	bhi.n	8008704 <UART_SetConfig+0x2bc>
 80086ae:	2280      	movs	r2, #128	@ 0x80
 80086b0:	0112      	lsls	r2, r2, #4
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d011      	beq.n	80086da <UART_SetConfig+0x292>
 80086b6:	2280      	movs	r2, #128	@ 0x80
 80086b8:	0112      	lsls	r2, r2, #4
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d822      	bhi.n	8008704 <UART_SetConfig+0x2bc>
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d004      	beq.n	80086cc <UART_SetConfig+0x284>
 80086c2:	2280      	movs	r2, #128	@ 0x80
 80086c4:	00d2      	lsls	r2, r2, #3
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d00e      	beq.n	80086e8 <UART_SetConfig+0x2a0>
 80086ca:	e01b      	b.n	8008704 <UART_SetConfig+0x2bc>
 80086cc:	231b      	movs	r3, #27
 80086ce:	2220      	movs	r2, #32
 80086d0:	189b      	adds	r3, r3, r2
 80086d2:	19db      	adds	r3, r3, r7
 80086d4:	2200      	movs	r2, #0
 80086d6:	701a      	strb	r2, [r3, #0]
 80086d8:	e07e      	b.n	80087d8 <UART_SetConfig+0x390>
 80086da:	231b      	movs	r3, #27
 80086dc:	2220      	movs	r2, #32
 80086de:	189b      	adds	r3, r3, r2
 80086e0:	19db      	adds	r3, r3, r7
 80086e2:	2202      	movs	r2, #2
 80086e4:	701a      	strb	r2, [r3, #0]
 80086e6:	e077      	b.n	80087d8 <UART_SetConfig+0x390>
 80086e8:	231b      	movs	r3, #27
 80086ea:	2220      	movs	r2, #32
 80086ec:	189b      	adds	r3, r3, r2
 80086ee:	19db      	adds	r3, r3, r7
 80086f0:	2204      	movs	r2, #4
 80086f2:	701a      	strb	r2, [r3, #0]
 80086f4:	e070      	b.n	80087d8 <UART_SetConfig+0x390>
 80086f6:	231b      	movs	r3, #27
 80086f8:	2220      	movs	r2, #32
 80086fa:	189b      	adds	r3, r3, r2
 80086fc:	19db      	adds	r3, r3, r7
 80086fe:	2208      	movs	r2, #8
 8008700:	701a      	strb	r2, [r3, #0]
 8008702:	e069      	b.n	80087d8 <UART_SetConfig+0x390>
 8008704:	231b      	movs	r3, #27
 8008706:	2220      	movs	r2, #32
 8008708:	189b      	adds	r3, r3, r2
 800870a:	19db      	adds	r3, r3, r7
 800870c:	2210      	movs	r2, #16
 800870e:	701a      	strb	r2, [r3, #0]
 8008710:	e062      	b.n	80087d8 <UART_SetConfig+0x390>
 8008712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a1d      	ldr	r2, [pc, #116]	@ (800878c <UART_SetConfig+0x344>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d157      	bne.n	80087cc <UART_SetConfig+0x384>
 800871c:	4b1e      	ldr	r3, [pc, #120]	@ (8008798 <UART_SetConfig+0x350>)
 800871e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008720:	23c0      	movs	r3, #192	@ 0xc0
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4013      	ands	r3, r2
 8008726:	22c0      	movs	r2, #192	@ 0xc0
 8008728:	0092      	lsls	r2, r2, #2
 800872a:	4293      	cmp	r3, r2
 800872c:	d040      	beq.n	80087b0 <UART_SetConfig+0x368>
 800872e:	22c0      	movs	r2, #192	@ 0xc0
 8008730:	0092      	lsls	r2, r2, #2
 8008732:	4293      	cmp	r3, r2
 8008734:	d843      	bhi.n	80087be <UART_SetConfig+0x376>
 8008736:	2280      	movs	r2, #128	@ 0x80
 8008738:	0092      	lsls	r2, r2, #2
 800873a:	4293      	cmp	r3, r2
 800873c:	d011      	beq.n	8008762 <UART_SetConfig+0x31a>
 800873e:	2280      	movs	r2, #128	@ 0x80
 8008740:	0092      	lsls	r2, r2, #2
 8008742:	4293      	cmp	r3, r2
 8008744:	d83b      	bhi.n	80087be <UART_SetConfig+0x376>
 8008746:	2b00      	cmp	r3, #0
 8008748:	d004      	beq.n	8008754 <UART_SetConfig+0x30c>
 800874a:	2280      	movs	r2, #128	@ 0x80
 800874c:	0052      	lsls	r2, r2, #1
 800874e:	4293      	cmp	r3, r2
 8008750:	d00e      	beq.n	8008770 <UART_SetConfig+0x328>
 8008752:	e034      	b.n	80087be <UART_SetConfig+0x376>
 8008754:	231b      	movs	r3, #27
 8008756:	2220      	movs	r2, #32
 8008758:	189b      	adds	r3, r3, r2
 800875a:	19db      	adds	r3, r3, r7
 800875c:	2200      	movs	r2, #0
 800875e:	701a      	strb	r2, [r3, #0]
 8008760:	e03a      	b.n	80087d8 <UART_SetConfig+0x390>
 8008762:	231b      	movs	r3, #27
 8008764:	2220      	movs	r2, #32
 8008766:	189b      	adds	r3, r3, r2
 8008768:	19db      	adds	r3, r3, r7
 800876a:	2202      	movs	r2, #2
 800876c:	701a      	strb	r2, [r3, #0]
 800876e:	e033      	b.n	80087d8 <UART_SetConfig+0x390>
 8008770:	231b      	movs	r3, #27
 8008772:	2220      	movs	r2, #32
 8008774:	189b      	adds	r3, r3, r2
 8008776:	19db      	adds	r3, r3, r7
 8008778:	2204      	movs	r2, #4
 800877a:	701a      	strb	r2, [r3, #0]
 800877c:	e02c      	b.n	80087d8 <UART_SetConfig+0x390>
 800877e:	46c0      	nop			@ (mov r8, r8)
 8008780:	cfff69f3 	.word	0xcfff69f3
 8008784:	ffffcfff 	.word	0xffffcfff
 8008788:	40008000 	.word	0x40008000
 800878c:	40008400 	.word	0x40008400
 8008790:	11fff4ff 	.word	0x11fff4ff
 8008794:	40013800 	.word	0x40013800
 8008798:	40021000 	.word	0x40021000
 800879c:	40004400 	.word	0x40004400
 80087a0:	40004800 	.word	0x40004800
 80087a4:	40004c00 	.word	0x40004c00
 80087a8:	40005000 	.word	0x40005000
 80087ac:	40013c00 	.word	0x40013c00
 80087b0:	231b      	movs	r3, #27
 80087b2:	2220      	movs	r2, #32
 80087b4:	189b      	adds	r3, r3, r2
 80087b6:	19db      	adds	r3, r3, r7
 80087b8:	2208      	movs	r2, #8
 80087ba:	701a      	strb	r2, [r3, #0]
 80087bc:	e00c      	b.n	80087d8 <UART_SetConfig+0x390>
 80087be:	231b      	movs	r3, #27
 80087c0:	2220      	movs	r2, #32
 80087c2:	189b      	adds	r3, r3, r2
 80087c4:	19db      	adds	r3, r3, r7
 80087c6:	2210      	movs	r2, #16
 80087c8:	701a      	strb	r2, [r3, #0]
 80087ca:	e005      	b.n	80087d8 <UART_SetConfig+0x390>
 80087cc:	231b      	movs	r3, #27
 80087ce:	2220      	movs	r2, #32
 80087d0:	189b      	adds	r3, r3, r2
 80087d2:	19db      	adds	r3, r3, r7
 80087d4:	2210      	movs	r2, #16
 80087d6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80087d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4ac1      	ldr	r2, [pc, #772]	@ (8008ae4 <UART_SetConfig+0x69c>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d005      	beq.n	80087ee <UART_SetConfig+0x3a6>
 80087e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4ac0      	ldr	r2, [pc, #768]	@ (8008ae8 <UART_SetConfig+0x6a0>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d000      	beq.n	80087ee <UART_SetConfig+0x3a6>
 80087ec:	e093      	b.n	8008916 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80087ee:	231b      	movs	r3, #27
 80087f0:	2220      	movs	r2, #32
 80087f2:	189b      	adds	r3, r3, r2
 80087f4:	19db      	adds	r3, r3, r7
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	2b08      	cmp	r3, #8
 80087fa:	d015      	beq.n	8008828 <UART_SetConfig+0x3e0>
 80087fc:	dc18      	bgt.n	8008830 <UART_SetConfig+0x3e8>
 80087fe:	2b04      	cmp	r3, #4
 8008800:	d00d      	beq.n	800881e <UART_SetConfig+0x3d6>
 8008802:	dc15      	bgt.n	8008830 <UART_SetConfig+0x3e8>
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <UART_SetConfig+0x3c6>
 8008808:	2b02      	cmp	r3, #2
 800880a:	d005      	beq.n	8008818 <UART_SetConfig+0x3d0>
 800880c:	e010      	b.n	8008830 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800880e:	f7fd f931 	bl	8005a74 <HAL_RCC_GetPCLK1Freq>
 8008812:	0003      	movs	r3, r0
 8008814:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008816:	e014      	b.n	8008842 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008818:	4bb4      	ldr	r3, [pc, #720]	@ (8008aec <UART_SetConfig+0x6a4>)
 800881a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800881c:	e011      	b.n	8008842 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800881e:	f7fd f89d 	bl	800595c <HAL_RCC_GetSysClockFreq>
 8008822:	0003      	movs	r3, r0
 8008824:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008826:	e00c      	b.n	8008842 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008828:	2380      	movs	r3, #128	@ 0x80
 800882a:	021b      	lsls	r3, r3, #8
 800882c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800882e:	e008      	b.n	8008842 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8008830:	2300      	movs	r3, #0
 8008832:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8008834:	231a      	movs	r3, #26
 8008836:	2220      	movs	r2, #32
 8008838:	189b      	adds	r3, r3, r2
 800883a:	19db      	adds	r3, r3, r7
 800883c:	2201      	movs	r2, #1
 800883e:	701a      	strb	r2, [r3, #0]
        break;
 8008840:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008844:	2b00      	cmp	r3, #0
 8008846:	d100      	bne.n	800884a <UART_SetConfig+0x402>
 8008848:	e135      	b.n	8008ab6 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800884a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800884c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800884e:	4ba8      	ldr	r3, [pc, #672]	@ (8008af0 <UART_SetConfig+0x6a8>)
 8008850:	0052      	lsls	r2, r2, #1
 8008852:	5ad3      	ldrh	r3, [r2, r3]
 8008854:	0019      	movs	r1, r3
 8008856:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008858:	f7f7 fc68 	bl	800012c <__udivsi3>
 800885c:	0003      	movs	r3, r0
 800885e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008862:	685a      	ldr	r2, [r3, #4]
 8008864:	0013      	movs	r3, r2
 8008866:	005b      	lsls	r3, r3, #1
 8008868:	189b      	adds	r3, r3, r2
 800886a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800886c:	429a      	cmp	r2, r3
 800886e:	d305      	bcc.n	800887c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008876:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008878:	429a      	cmp	r2, r3
 800887a:	d906      	bls.n	800888a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800887c:	231a      	movs	r3, #26
 800887e:	2220      	movs	r2, #32
 8008880:	189b      	adds	r3, r3, r2
 8008882:	19db      	adds	r3, r3, r7
 8008884:	2201      	movs	r2, #1
 8008886:	701a      	strb	r2, [r3, #0]
 8008888:	e044      	b.n	8008914 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800888a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800888c:	61bb      	str	r3, [r7, #24]
 800888e:	2300      	movs	r3, #0
 8008890:	61fb      	str	r3, [r7, #28]
 8008892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008894:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008896:	4b96      	ldr	r3, [pc, #600]	@ (8008af0 <UART_SetConfig+0x6a8>)
 8008898:	0052      	lsls	r2, r2, #1
 800889a:	5ad3      	ldrh	r3, [r2, r3]
 800889c:	613b      	str	r3, [r7, #16]
 800889e:	2300      	movs	r3, #0
 80088a0:	617b      	str	r3, [r7, #20]
 80088a2:	693a      	ldr	r2, [r7, #16]
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	69b8      	ldr	r0, [r7, #24]
 80088a8:	69f9      	ldr	r1, [r7, #28]
 80088aa:	f7f7 fdb5 	bl	8000418 <__aeabi_uldivmod>
 80088ae:	0002      	movs	r2, r0
 80088b0:	000b      	movs	r3, r1
 80088b2:	0e11      	lsrs	r1, r2, #24
 80088b4:	021d      	lsls	r5, r3, #8
 80088b6:	430d      	orrs	r5, r1
 80088b8:	0214      	lsls	r4, r2, #8
 80088ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	085b      	lsrs	r3, r3, #1
 80088c0:	60bb      	str	r3, [r7, #8]
 80088c2:	2300      	movs	r3, #0
 80088c4:	60fb      	str	r3, [r7, #12]
 80088c6:	68b8      	ldr	r0, [r7, #8]
 80088c8:	68f9      	ldr	r1, [r7, #12]
 80088ca:	1900      	adds	r0, r0, r4
 80088cc:	4169      	adcs	r1, r5
 80088ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	603b      	str	r3, [r7, #0]
 80088d4:	2300      	movs	r3, #0
 80088d6:	607b      	str	r3, [r7, #4]
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f7f7 fd9c 	bl	8000418 <__aeabi_uldivmod>
 80088e0:	0002      	movs	r2, r0
 80088e2:	000b      	movs	r3, r1
 80088e4:	0013      	movs	r3, r2
 80088e6:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088ea:	23c0      	movs	r3, #192	@ 0xc0
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d309      	bcc.n	8008906 <UART_SetConfig+0x4be>
 80088f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088f4:	2380      	movs	r3, #128	@ 0x80
 80088f6:	035b      	lsls	r3, r3, #13
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d204      	bcs.n	8008906 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80088fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008902:	60da      	str	r2, [r3, #12]
 8008904:	e006      	b.n	8008914 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8008906:	231a      	movs	r3, #26
 8008908:	2220      	movs	r2, #32
 800890a:	189b      	adds	r3, r3, r2
 800890c:	19db      	adds	r3, r3, r7
 800890e:	2201      	movs	r2, #1
 8008910:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8008912:	e0d0      	b.n	8008ab6 <UART_SetConfig+0x66e>
 8008914:	e0cf      	b.n	8008ab6 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008918:	69da      	ldr	r2, [r3, #28]
 800891a:	2380      	movs	r3, #128	@ 0x80
 800891c:	021b      	lsls	r3, r3, #8
 800891e:	429a      	cmp	r2, r3
 8008920:	d000      	beq.n	8008924 <UART_SetConfig+0x4dc>
 8008922:	e070      	b.n	8008a06 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8008924:	231b      	movs	r3, #27
 8008926:	2220      	movs	r2, #32
 8008928:	189b      	adds	r3, r3, r2
 800892a:	19db      	adds	r3, r3, r7
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	2b08      	cmp	r3, #8
 8008930:	d015      	beq.n	800895e <UART_SetConfig+0x516>
 8008932:	dc18      	bgt.n	8008966 <UART_SetConfig+0x51e>
 8008934:	2b04      	cmp	r3, #4
 8008936:	d00d      	beq.n	8008954 <UART_SetConfig+0x50c>
 8008938:	dc15      	bgt.n	8008966 <UART_SetConfig+0x51e>
 800893a:	2b00      	cmp	r3, #0
 800893c:	d002      	beq.n	8008944 <UART_SetConfig+0x4fc>
 800893e:	2b02      	cmp	r3, #2
 8008940:	d005      	beq.n	800894e <UART_SetConfig+0x506>
 8008942:	e010      	b.n	8008966 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008944:	f7fd f896 	bl	8005a74 <HAL_RCC_GetPCLK1Freq>
 8008948:	0003      	movs	r3, r0
 800894a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800894c:	e014      	b.n	8008978 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800894e:	4b67      	ldr	r3, [pc, #412]	@ (8008aec <UART_SetConfig+0x6a4>)
 8008950:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008952:	e011      	b.n	8008978 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008954:	f7fd f802 	bl	800595c <HAL_RCC_GetSysClockFreq>
 8008958:	0003      	movs	r3, r0
 800895a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800895c:	e00c      	b.n	8008978 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800895e:	2380      	movs	r3, #128	@ 0x80
 8008960:	021b      	lsls	r3, r3, #8
 8008962:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008964:	e008      	b.n	8008978 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8008966:	2300      	movs	r3, #0
 8008968:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800896a:	231a      	movs	r3, #26
 800896c:	2220      	movs	r2, #32
 800896e:	189b      	adds	r3, r3, r2
 8008970:	19db      	adds	r3, r3, r7
 8008972:	2201      	movs	r2, #1
 8008974:	701a      	strb	r2, [r3, #0]
        break;
 8008976:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800897a:	2b00      	cmp	r3, #0
 800897c:	d100      	bne.n	8008980 <UART_SetConfig+0x538>
 800897e:	e09a      	b.n	8008ab6 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008982:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008984:	4b5a      	ldr	r3, [pc, #360]	@ (8008af0 <UART_SetConfig+0x6a8>)
 8008986:	0052      	lsls	r2, r2, #1
 8008988:	5ad3      	ldrh	r3, [r2, r3]
 800898a:	0019      	movs	r1, r3
 800898c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800898e:	f7f7 fbcd 	bl	800012c <__udivsi3>
 8008992:	0003      	movs	r3, r0
 8008994:	005a      	lsls	r2, r3, #1
 8008996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	085b      	lsrs	r3, r3, #1
 800899c:	18d2      	adds	r2, r2, r3
 800899e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	0019      	movs	r1, r3
 80089a4:	0010      	movs	r0, r2
 80089a6:	f7f7 fbc1 	bl	800012c <__udivsi3>
 80089aa:	0003      	movs	r3, r0
 80089ac:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b0:	2b0f      	cmp	r3, #15
 80089b2:	d921      	bls.n	80089f8 <UART_SetConfig+0x5b0>
 80089b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089b6:	2380      	movs	r3, #128	@ 0x80
 80089b8:	025b      	lsls	r3, r3, #9
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d21c      	bcs.n	80089f8 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	200e      	movs	r0, #14
 80089c4:	2420      	movs	r4, #32
 80089c6:	1903      	adds	r3, r0, r4
 80089c8:	19db      	adds	r3, r3, r7
 80089ca:	210f      	movs	r1, #15
 80089cc:	438a      	bics	r2, r1
 80089ce:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d2:	085b      	lsrs	r3, r3, #1
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	2207      	movs	r2, #7
 80089d8:	4013      	ands	r3, r2
 80089da:	b299      	uxth	r1, r3
 80089dc:	1903      	adds	r3, r0, r4
 80089de:	19db      	adds	r3, r3, r7
 80089e0:	1902      	adds	r2, r0, r4
 80089e2:	19d2      	adds	r2, r2, r7
 80089e4:	8812      	ldrh	r2, [r2, #0]
 80089e6:	430a      	orrs	r2, r1
 80089e8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80089ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	1902      	adds	r2, r0, r4
 80089f0:	19d2      	adds	r2, r2, r7
 80089f2:	8812      	ldrh	r2, [r2, #0]
 80089f4:	60da      	str	r2, [r3, #12]
 80089f6:	e05e      	b.n	8008ab6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80089f8:	231a      	movs	r3, #26
 80089fa:	2220      	movs	r2, #32
 80089fc:	189b      	adds	r3, r3, r2
 80089fe:	19db      	adds	r3, r3, r7
 8008a00:	2201      	movs	r2, #1
 8008a02:	701a      	strb	r2, [r3, #0]
 8008a04:	e057      	b.n	8008ab6 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a06:	231b      	movs	r3, #27
 8008a08:	2220      	movs	r2, #32
 8008a0a:	189b      	adds	r3, r3, r2
 8008a0c:	19db      	adds	r3, r3, r7
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	2b08      	cmp	r3, #8
 8008a12:	d015      	beq.n	8008a40 <UART_SetConfig+0x5f8>
 8008a14:	dc18      	bgt.n	8008a48 <UART_SetConfig+0x600>
 8008a16:	2b04      	cmp	r3, #4
 8008a18:	d00d      	beq.n	8008a36 <UART_SetConfig+0x5ee>
 8008a1a:	dc15      	bgt.n	8008a48 <UART_SetConfig+0x600>
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d002      	beq.n	8008a26 <UART_SetConfig+0x5de>
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d005      	beq.n	8008a30 <UART_SetConfig+0x5e8>
 8008a24:	e010      	b.n	8008a48 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a26:	f7fd f825 	bl	8005a74 <HAL_RCC_GetPCLK1Freq>
 8008a2a:	0003      	movs	r3, r0
 8008a2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a2e:	e014      	b.n	8008a5a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a30:	4b2e      	ldr	r3, [pc, #184]	@ (8008aec <UART_SetConfig+0x6a4>)
 8008a32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a34:	e011      	b.n	8008a5a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a36:	f7fc ff91 	bl	800595c <HAL_RCC_GetSysClockFreq>
 8008a3a:	0003      	movs	r3, r0
 8008a3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a3e:	e00c      	b.n	8008a5a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a40:	2380      	movs	r3, #128	@ 0x80
 8008a42:	021b      	lsls	r3, r3, #8
 8008a44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a46:	e008      	b.n	8008a5a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8008a4c:	231a      	movs	r3, #26
 8008a4e:	2220      	movs	r2, #32
 8008a50:	189b      	adds	r3, r3, r2
 8008a52:	19db      	adds	r3, r3, r7
 8008a54:	2201      	movs	r2, #1
 8008a56:	701a      	strb	r2, [r3, #0]
        break;
 8008a58:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8008a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d02a      	beq.n	8008ab6 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a64:	4b22      	ldr	r3, [pc, #136]	@ (8008af0 <UART_SetConfig+0x6a8>)
 8008a66:	0052      	lsls	r2, r2, #1
 8008a68:	5ad3      	ldrh	r3, [r2, r3]
 8008a6a:	0019      	movs	r1, r3
 8008a6c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008a6e:	f7f7 fb5d 	bl	800012c <__udivsi3>
 8008a72:	0003      	movs	r3, r0
 8008a74:	001a      	movs	r2, r3
 8008a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	085b      	lsrs	r3, r3, #1
 8008a7c:	18d2      	adds	r2, r2, r3
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	0019      	movs	r1, r3
 8008a84:	0010      	movs	r0, r2
 8008a86:	f7f7 fb51 	bl	800012c <__udivsi3>
 8008a8a:	0003      	movs	r3, r0
 8008a8c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a90:	2b0f      	cmp	r3, #15
 8008a92:	d90a      	bls.n	8008aaa <UART_SetConfig+0x662>
 8008a94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a96:	2380      	movs	r3, #128	@ 0x80
 8008a98:	025b      	lsls	r3, r3, #9
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d205      	bcs.n	8008aaa <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	60da      	str	r2, [r3, #12]
 8008aa8:	e005      	b.n	8008ab6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8008aaa:	231a      	movs	r3, #26
 8008aac:	2220      	movs	r2, #32
 8008aae:	189b      	adds	r3, r3, r2
 8008ab0:	19db      	adds	r3, r3, r7
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab8:	226a      	movs	r2, #106	@ 0x6a
 8008aba:	2101      	movs	r1, #1
 8008abc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8008abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac0:	2268      	movs	r2, #104	@ 0x68
 8008ac2:	2101      	movs	r1, #1
 8008ac4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac8:	2200      	movs	r2, #0
 8008aca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ace:	2200      	movs	r2, #0
 8008ad0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008ad2:	231a      	movs	r3, #26
 8008ad4:	2220      	movs	r2, #32
 8008ad6:	189b      	adds	r3, r3, r2
 8008ad8:	19db      	adds	r3, r3, r7
 8008ada:	781b      	ldrb	r3, [r3, #0]
}
 8008adc:	0018      	movs	r0, r3
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	b010      	add	sp, #64	@ 0x40
 8008ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8008ae4:	40008000 	.word	0x40008000
 8008ae8:	40008400 	.word	0x40008400
 8008aec:	00f42400 	.word	0x00f42400
 8008af0:	0800a42c 	.word	0x0800a42c

08008af4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b00:	2208      	movs	r2, #8
 8008b02:	4013      	ands	r3, r2
 8008b04:	d00b      	beq.n	8008b1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	4a4a      	ldr	r2, [pc, #296]	@ (8008c38 <UART_AdvFeatureConfig+0x144>)
 8008b0e:	4013      	ands	r3, r2
 8008b10:	0019      	movs	r1, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	430a      	orrs	r2, r1
 8008b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b22:	2201      	movs	r2, #1
 8008b24:	4013      	ands	r3, r2
 8008b26:	d00b      	beq.n	8008b40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	4a43      	ldr	r2, [pc, #268]	@ (8008c3c <UART_AdvFeatureConfig+0x148>)
 8008b30:	4013      	ands	r3, r2
 8008b32:	0019      	movs	r1, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	430a      	orrs	r2, r1
 8008b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b44:	2202      	movs	r2, #2
 8008b46:	4013      	ands	r3, r2
 8008b48:	d00b      	beq.n	8008b62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	4a3b      	ldr	r2, [pc, #236]	@ (8008c40 <UART_AdvFeatureConfig+0x14c>)
 8008b52:	4013      	ands	r3, r2
 8008b54:	0019      	movs	r1, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b66:	2204      	movs	r2, #4
 8008b68:	4013      	ands	r3, r2
 8008b6a:	d00b      	beq.n	8008b84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	4a34      	ldr	r2, [pc, #208]	@ (8008c44 <UART_AdvFeatureConfig+0x150>)
 8008b74:	4013      	ands	r3, r2
 8008b76:	0019      	movs	r1, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	430a      	orrs	r2, r1
 8008b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b88:	2210      	movs	r2, #16
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	d00b      	beq.n	8008ba6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	4a2c      	ldr	r2, [pc, #176]	@ (8008c48 <UART_AdvFeatureConfig+0x154>)
 8008b96:	4013      	ands	r3, r2
 8008b98:	0019      	movs	r1, r3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	430a      	orrs	r2, r1
 8008ba4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008baa:	2220      	movs	r2, #32
 8008bac:	4013      	ands	r3, r2
 8008bae:	d00b      	beq.n	8008bc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	4a25      	ldr	r2, [pc, #148]	@ (8008c4c <UART_AdvFeatureConfig+0x158>)
 8008bb8:	4013      	ands	r3, r2
 8008bba:	0019      	movs	r1, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	430a      	orrs	r2, r1
 8008bc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bcc:	2240      	movs	r2, #64	@ 0x40
 8008bce:	4013      	ands	r3, r2
 8008bd0:	d01d      	beq.n	8008c0e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8008c50 <UART_AdvFeatureConfig+0x15c>)
 8008bda:	4013      	ands	r3, r2
 8008bdc:	0019      	movs	r1, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	430a      	orrs	r2, r1
 8008be8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bee:	2380      	movs	r3, #128	@ 0x80
 8008bf0:	035b      	lsls	r3, r3, #13
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d10b      	bne.n	8008c0e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	4a15      	ldr	r2, [pc, #84]	@ (8008c54 <UART_AdvFeatureConfig+0x160>)
 8008bfe:	4013      	ands	r3, r2
 8008c00:	0019      	movs	r1, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c12:	2280      	movs	r2, #128	@ 0x80
 8008c14:	4013      	ands	r3, r2
 8008c16:	d00b      	beq.n	8008c30 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8008c58 <UART_AdvFeatureConfig+0x164>)
 8008c20:	4013      	ands	r3, r2
 8008c22:	0019      	movs	r1, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	430a      	orrs	r2, r1
 8008c2e:	605a      	str	r2, [r3, #4]
  }
}
 8008c30:	46c0      	nop			@ (mov r8, r8)
 8008c32:	46bd      	mov	sp, r7
 8008c34:	b002      	add	sp, #8
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	ffff7fff 	.word	0xffff7fff
 8008c3c:	fffdffff 	.word	0xfffdffff
 8008c40:	fffeffff 	.word	0xfffeffff
 8008c44:	fffbffff 	.word	0xfffbffff
 8008c48:	ffffefff 	.word	0xffffefff
 8008c4c:	ffffdfff 	.word	0xffffdfff
 8008c50:	ffefffff 	.word	0xffefffff
 8008c54:	ff9fffff 	.word	0xff9fffff
 8008c58:	fff7ffff 	.word	0xfff7ffff

08008c5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b092      	sub	sp, #72	@ 0x48
 8008c60:	af02      	add	r7, sp, #8
 8008c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2290      	movs	r2, #144	@ 0x90
 8008c68:	2100      	movs	r1, #0
 8008c6a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c6c:	f7fb f8b6 	bl	8003ddc <HAL_GetTick>
 8008c70:	0003      	movs	r3, r0
 8008c72:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2208      	movs	r2, #8
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	2b08      	cmp	r3, #8
 8008c80:	d12d      	bne.n	8008cde <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c84:	2280      	movs	r2, #128	@ 0x80
 8008c86:	0391      	lsls	r1, r2, #14
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	4a47      	ldr	r2, [pc, #284]	@ (8008da8 <UART_CheckIdleState+0x14c>)
 8008c8c:	9200      	str	r2, [sp, #0]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f000 f88e 	bl	8008db0 <UART_WaitOnFlagUntilTimeout>
 8008c94:	1e03      	subs	r3, r0, #0
 8008c96:	d022      	beq.n	8008cde <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c98:	f3ef 8310 	mrs	r3, PRIMASK
 8008c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ca8:	f383 8810 	msr	PRIMASK, r3
}
 8008cac:	46c0      	nop			@ (mov r8, r8)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2180      	movs	r1, #128	@ 0x80
 8008cba:	438a      	bics	r2, r1
 8008cbc:	601a      	str	r2, [r3, #0]
 8008cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc4:	f383 8810 	msr	PRIMASK, r3
}
 8008cc8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2288      	movs	r2, #136	@ 0x88
 8008cce:	2120      	movs	r1, #32
 8008cd0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2284      	movs	r2, #132	@ 0x84
 8008cd6:	2100      	movs	r1, #0
 8008cd8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e060      	b.n	8008da0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2204      	movs	r2, #4
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	2b04      	cmp	r3, #4
 8008cea:	d146      	bne.n	8008d7a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cee:	2280      	movs	r2, #128	@ 0x80
 8008cf0:	03d1      	lsls	r1, r2, #15
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	4a2c      	ldr	r2, [pc, #176]	@ (8008da8 <UART_CheckIdleState+0x14c>)
 8008cf6:	9200      	str	r2, [sp, #0]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f000 f859 	bl	8008db0 <UART_WaitOnFlagUntilTimeout>
 8008cfe:	1e03      	subs	r3, r0, #0
 8008d00:	d03b      	beq.n	8008d7a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d02:	f3ef 8310 	mrs	r3, PRIMASK
 8008d06:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d08:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	f383 8810 	msr	PRIMASK, r3
}
 8008d16:	46c0      	nop			@ (mov r8, r8)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4922      	ldr	r1, [pc, #136]	@ (8008dac <UART_CheckIdleState+0x150>)
 8008d24:	400a      	ands	r2, r1
 8008d26:	601a      	str	r2, [r3, #0]
 8008d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	f383 8810 	msr	PRIMASK, r3
}
 8008d32:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d34:	f3ef 8310 	mrs	r3, PRIMASK
 8008d38:	61bb      	str	r3, [r7, #24]
  return(result);
 8008d3a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d3e:	2301      	movs	r3, #1
 8008d40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	f383 8810 	msr	PRIMASK, r3
}
 8008d48:	46c0      	nop			@ (mov r8, r8)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	689a      	ldr	r2, [r3, #8]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2101      	movs	r1, #1
 8008d56:	438a      	bics	r2, r1
 8008d58:	609a      	str	r2, [r3, #8]
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d5e:	6a3b      	ldr	r3, [r7, #32]
 8008d60:	f383 8810 	msr	PRIMASK, r3
}
 8008d64:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	228c      	movs	r2, #140	@ 0x8c
 8008d6a:	2120      	movs	r1, #32
 8008d6c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2284      	movs	r2, #132	@ 0x84
 8008d72:	2100      	movs	r1, #0
 8008d74:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d76:	2303      	movs	r3, #3
 8008d78:	e012      	b.n	8008da0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2288      	movs	r2, #136	@ 0x88
 8008d7e:	2120      	movs	r1, #32
 8008d80:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	228c      	movs	r2, #140	@ 0x8c
 8008d86:	2120      	movs	r1, #32
 8008d88:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2284      	movs	r2, #132	@ 0x84
 8008d9a:	2100      	movs	r1, #0
 8008d9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	0018      	movs	r0, r3
 8008da2:	46bd      	mov	sp, r7
 8008da4:	b010      	add	sp, #64	@ 0x40
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	01ffffff 	.word	0x01ffffff
 8008dac:	fffffedf 	.word	0xfffffedf

08008db0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	603b      	str	r3, [r7, #0]
 8008dbc:	1dfb      	adds	r3, r7, #7
 8008dbe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dc0:	e051      	b.n	8008e66 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	d04e      	beq.n	8008e66 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dc8:	f7fb f808 	bl	8003ddc <HAL_GetTick>
 8008dcc:	0002      	movs	r2, r0
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	69ba      	ldr	r2, [r7, #24]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d302      	bcc.n	8008dde <UART_WaitOnFlagUntilTimeout+0x2e>
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d101      	bne.n	8008de2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008dde:	2303      	movs	r3, #3
 8008de0:	e051      	b.n	8008e86 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2204      	movs	r2, #4
 8008dea:	4013      	ands	r3, r2
 8008dec:	d03b      	beq.n	8008e66 <UART_WaitOnFlagUntilTimeout+0xb6>
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	2b80      	cmp	r3, #128	@ 0x80
 8008df2:	d038      	beq.n	8008e66 <UART_WaitOnFlagUntilTimeout+0xb6>
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	2b40      	cmp	r3, #64	@ 0x40
 8008df8:	d035      	beq.n	8008e66 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	69db      	ldr	r3, [r3, #28]
 8008e00:	2208      	movs	r2, #8
 8008e02:	4013      	ands	r3, r2
 8008e04:	2b08      	cmp	r3, #8
 8008e06:	d111      	bne.n	8008e2c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2208      	movs	r2, #8
 8008e0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	0018      	movs	r0, r3
 8008e14:	f000 f83c 	bl	8008e90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2290      	movs	r2, #144	@ 0x90
 8008e1c:	2108      	movs	r1, #8
 8008e1e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2284      	movs	r2, #132	@ 0x84
 8008e24:	2100      	movs	r1, #0
 8008e26:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e02c      	b.n	8008e86 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	69da      	ldr	r2, [r3, #28]
 8008e32:	2380      	movs	r3, #128	@ 0x80
 8008e34:	011b      	lsls	r3, r3, #4
 8008e36:	401a      	ands	r2, r3
 8008e38:	2380      	movs	r3, #128	@ 0x80
 8008e3a:	011b      	lsls	r3, r3, #4
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d112      	bne.n	8008e66 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2280      	movs	r2, #128	@ 0x80
 8008e46:	0112      	lsls	r2, r2, #4
 8008e48:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	0018      	movs	r0, r3
 8008e4e:	f000 f81f 	bl	8008e90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2290      	movs	r2, #144	@ 0x90
 8008e56:	2120      	movs	r1, #32
 8008e58:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2284      	movs	r2, #132	@ 0x84
 8008e5e:	2100      	movs	r1, #0
 8008e60:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008e62:	2303      	movs	r3, #3
 8008e64:	e00f      	b.n	8008e86 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	69db      	ldr	r3, [r3, #28]
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	4013      	ands	r3, r2
 8008e70:	68ba      	ldr	r2, [r7, #8]
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	425a      	negs	r2, r3
 8008e76:	4153      	adcs	r3, r2
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	001a      	movs	r2, r3
 8008e7c:	1dfb      	adds	r3, r7, #7
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d09e      	beq.n	8008dc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	0018      	movs	r0, r3
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	b004      	add	sp, #16
 8008e8c:	bd80      	pop	{r7, pc}
	...

08008e90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b08e      	sub	sp, #56	@ 0x38
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e98:	f3ef 8310 	mrs	r3, PRIMASK
 8008e9c:	617b      	str	r3, [r7, #20]
  return(result);
 8008e9e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ea0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	f383 8810 	msr	PRIMASK, r3
}
 8008eac:	46c0      	nop			@ (mov r8, r8)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4926      	ldr	r1, [pc, #152]	@ (8008f54 <UART_EndRxTransfer+0xc4>)
 8008eba:	400a      	ands	r2, r1
 8008ebc:	601a      	str	r2, [r3, #0]
 8008ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ec0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	f383 8810 	msr	PRIMASK, r3
}
 8008ec8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008eca:	f3ef 8310 	mrs	r3, PRIMASK
 8008ece:	623b      	str	r3, [r7, #32]
  return(result);
 8008ed0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ed2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eda:	f383 8810 	msr	PRIMASK, r3
}
 8008ede:	46c0      	nop			@ (mov r8, r8)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	689a      	ldr	r2, [r3, #8]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	491b      	ldr	r1, [pc, #108]	@ (8008f58 <UART_EndRxTransfer+0xc8>)
 8008eec:	400a      	ands	r2, r1
 8008eee:	609a      	str	r2, [r3, #8]
 8008ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ef6:	f383 8810 	msr	PRIMASK, r3
}
 8008efa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d118      	bne.n	8008f36 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f04:	f3ef 8310 	mrs	r3, PRIMASK
 8008f08:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f0a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f0e:	2301      	movs	r3, #1
 8008f10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f383 8810 	msr	PRIMASK, r3
}
 8008f18:	46c0      	nop			@ (mov r8, r8)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2110      	movs	r1, #16
 8008f26:	438a      	bics	r2, r1
 8008f28:	601a      	str	r2, [r3, #0]
 8008f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	f383 8810 	msr	PRIMASK, r3
}
 8008f34:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	228c      	movs	r2, #140	@ 0x8c
 8008f3a:	2120      	movs	r1, #32
 8008f3c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008f4a:	46c0      	nop			@ (mov r8, r8)
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	b00e      	add	sp, #56	@ 0x38
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	46c0      	nop			@ (mov r8, r8)
 8008f54:	fffffedf 	.word	0xfffffedf
 8008f58:	effffffe 	.word	0xeffffffe

08008f5c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2284      	movs	r2, #132	@ 0x84
 8008f68:	5c9b      	ldrb	r3, [r3, r2]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d101      	bne.n	8008f72 <HAL_UARTEx_DisableFifoMode+0x16>
 8008f6e:	2302      	movs	r3, #2
 8008f70:	e027      	b.n	8008fc2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2284      	movs	r2, #132	@ 0x84
 8008f76:	2101      	movs	r1, #1
 8008f78:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2288      	movs	r2, #136	@ 0x88
 8008f7e:	2124      	movs	r1, #36	@ 0x24
 8008f80:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2101      	movs	r1, #1
 8008f96:	438a      	bics	r2, r1
 8008f98:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8008fcc <HAL_UARTEx_DisableFifoMode+0x70>)
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2288      	movs	r2, #136	@ 0x88
 8008fb4:	2120      	movs	r1, #32
 8008fb6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2284      	movs	r2, #132	@ 0x84
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	0018      	movs	r0, r3
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	b004      	add	sp, #16
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	46c0      	nop			@ (mov r8, r8)
 8008fcc:	dfffffff 	.word	0xdfffffff

08008fd0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b084      	sub	sp, #16
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2284      	movs	r2, #132	@ 0x84
 8008fde:	5c9b      	ldrb	r3, [r3, r2]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d101      	bne.n	8008fe8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	e02e      	b.n	8009046 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2284      	movs	r2, #132	@ 0x84
 8008fec:	2101      	movs	r1, #1
 8008fee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2288      	movs	r2, #136	@ 0x88
 8008ff4:	2124      	movs	r1, #36	@ 0x24
 8008ff6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2101      	movs	r1, #1
 800900c:	438a      	bics	r2, r1
 800900e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	00db      	lsls	r3, r3, #3
 8009018:	08d9      	lsrs	r1, r3, #3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	430a      	orrs	r2, r1
 8009022:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	0018      	movs	r0, r3
 8009028:	f000 f854 	bl	80090d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2288      	movs	r2, #136	@ 0x88
 8009038:	2120      	movs	r1, #32
 800903a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2284      	movs	r2, #132	@ 0x84
 8009040:	2100      	movs	r1, #0
 8009042:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	0018      	movs	r0, r3
 8009048:	46bd      	mov	sp, r7
 800904a:	b004      	add	sp, #16
 800904c:	bd80      	pop	{r7, pc}
	...

08009050 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2284      	movs	r2, #132	@ 0x84
 800905e:	5c9b      	ldrb	r3, [r3, r2]
 8009060:	2b01      	cmp	r3, #1
 8009062:	d101      	bne.n	8009068 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009064:	2302      	movs	r3, #2
 8009066:	e02f      	b.n	80090c8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2284      	movs	r2, #132	@ 0x84
 800906c:	2101      	movs	r1, #1
 800906e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2288      	movs	r2, #136	@ 0x88
 8009074:	2124      	movs	r1, #36	@ 0x24
 8009076:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2101      	movs	r1, #1
 800908c:	438a      	bics	r2, r1
 800908e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	4a0e      	ldr	r2, [pc, #56]	@ (80090d0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009098:	4013      	ands	r3, r2
 800909a:	0019      	movs	r1, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	683a      	ldr	r2, [r7, #0]
 80090a2:	430a      	orrs	r2, r1
 80090a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	0018      	movs	r0, r3
 80090aa:	f000 f813 	bl	80090d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	68fa      	ldr	r2, [r7, #12]
 80090b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2288      	movs	r2, #136	@ 0x88
 80090ba:	2120      	movs	r1, #32
 80090bc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2284      	movs	r2, #132	@ 0x84
 80090c2:	2100      	movs	r1, #0
 80090c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	0018      	movs	r0, r3
 80090ca:	46bd      	mov	sp, r7
 80090cc:	b004      	add	sp, #16
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	f1ffffff 	.word	0xf1ffffff

080090d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80090d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d108      	bne.n	80090f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	226a      	movs	r2, #106	@ 0x6a
 80090e8:	2101      	movs	r1, #1
 80090ea:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2268      	movs	r2, #104	@ 0x68
 80090f0:	2101      	movs	r1, #1
 80090f2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80090f4:	e043      	b.n	800917e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80090f6:	260f      	movs	r6, #15
 80090f8:	19bb      	adds	r3, r7, r6
 80090fa:	2208      	movs	r2, #8
 80090fc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80090fe:	200e      	movs	r0, #14
 8009100:	183b      	adds	r3, r7, r0
 8009102:	2208      	movs	r2, #8
 8009104:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	0e5b      	lsrs	r3, r3, #25
 800910e:	b2da      	uxtb	r2, r3
 8009110:	240d      	movs	r4, #13
 8009112:	193b      	adds	r3, r7, r4
 8009114:	2107      	movs	r1, #7
 8009116:	400a      	ands	r2, r1
 8009118:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	0f5b      	lsrs	r3, r3, #29
 8009122:	b2da      	uxtb	r2, r3
 8009124:	250c      	movs	r5, #12
 8009126:	197b      	adds	r3, r7, r5
 8009128:	2107      	movs	r1, #7
 800912a:	400a      	ands	r2, r1
 800912c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800912e:	183b      	adds	r3, r7, r0
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	197a      	adds	r2, r7, r5
 8009134:	7812      	ldrb	r2, [r2, #0]
 8009136:	4914      	ldr	r1, [pc, #80]	@ (8009188 <UARTEx_SetNbDataToProcess+0xb4>)
 8009138:	5c8a      	ldrb	r2, [r1, r2]
 800913a:	435a      	muls	r2, r3
 800913c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800913e:	197b      	adds	r3, r7, r5
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	4a12      	ldr	r2, [pc, #72]	@ (800918c <UARTEx_SetNbDataToProcess+0xb8>)
 8009144:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009146:	0019      	movs	r1, r3
 8009148:	f7f7 f87a 	bl	8000240 <__divsi3>
 800914c:	0003      	movs	r3, r0
 800914e:	b299      	uxth	r1, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	226a      	movs	r2, #106	@ 0x6a
 8009154:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009156:	19bb      	adds	r3, r7, r6
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	193a      	adds	r2, r7, r4
 800915c:	7812      	ldrb	r2, [r2, #0]
 800915e:	490a      	ldr	r1, [pc, #40]	@ (8009188 <UARTEx_SetNbDataToProcess+0xb4>)
 8009160:	5c8a      	ldrb	r2, [r1, r2]
 8009162:	435a      	muls	r2, r3
 8009164:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8009166:	193b      	adds	r3, r7, r4
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	4a08      	ldr	r2, [pc, #32]	@ (800918c <UARTEx_SetNbDataToProcess+0xb8>)
 800916c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800916e:	0019      	movs	r1, r3
 8009170:	f7f7 f866 	bl	8000240 <__divsi3>
 8009174:	0003      	movs	r3, r0
 8009176:	b299      	uxth	r1, r3
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2268      	movs	r2, #104	@ 0x68
 800917c:	5299      	strh	r1, [r3, r2]
}
 800917e:	46c0      	nop			@ (mov r8, r8)
 8009180:	46bd      	mov	sp, r7
 8009182:	b005      	add	sp, #20
 8009184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009186:	46c0      	nop			@ (mov r8, r8)
 8009188:	0800a444 	.word	0x0800a444
 800918c:	0800a44c 	.word	0x0800a44c

08009190 <_strtol_l.constprop.0>:
 8009190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009192:	b085      	sub	sp, #20
 8009194:	0017      	movs	r7, r2
 8009196:	001e      	movs	r6, r3
 8009198:	9003      	str	r0, [sp, #12]
 800919a:	9101      	str	r1, [sp, #4]
 800919c:	2b24      	cmp	r3, #36	@ 0x24
 800919e:	d844      	bhi.n	800922a <_strtol_l.constprop.0+0x9a>
 80091a0:	000c      	movs	r4, r1
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d041      	beq.n	800922a <_strtol_l.constprop.0+0x9a>
 80091a6:	4b3d      	ldr	r3, [pc, #244]	@ (800929c <_strtol_l.constprop.0+0x10c>)
 80091a8:	2208      	movs	r2, #8
 80091aa:	469c      	mov	ip, r3
 80091ac:	0023      	movs	r3, r4
 80091ae:	4661      	mov	r1, ip
 80091b0:	781d      	ldrb	r5, [r3, #0]
 80091b2:	3401      	adds	r4, #1
 80091b4:	5d48      	ldrb	r0, [r1, r5]
 80091b6:	0001      	movs	r1, r0
 80091b8:	4011      	ands	r1, r2
 80091ba:	4210      	tst	r0, r2
 80091bc:	d1f6      	bne.n	80091ac <_strtol_l.constprop.0+0x1c>
 80091be:	2d2d      	cmp	r5, #45	@ 0x2d
 80091c0:	d13a      	bne.n	8009238 <_strtol_l.constprop.0+0xa8>
 80091c2:	7825      	ldrb	r5, [r4, #0]
 80091c4:	1c9c      	adds	r4, r3, #2
 80091c6:	2301      	movs	r3, #1
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	2210      	movs	r2, #16
 80091cc:	0033      	movs	r3, r6
 80091ce:	4393      	bics	r3, r2
 80091d0:	d109      	bne.n	80091e6 <_strtol_l.constprop.0+0x56>
 80091d2:	2d30      	cmp	r5, #48	@ 0x30
 80091d4:	d136      	bne.n	8009244 <_strtol_l.constprop.0+0xb4>
 80091d6:	2120      	movs	r1, #32
 80091d8:	7823      	ldrb	r3, [r4, #0]
 80091da:	438b      	bics	r3, r1
 80091dc:	2b58      	cmp	r3, #88	@ 0x58
 80091de:	d131      	bne.n	8009244 <_strtol_l.constprop.0+0xb4>
 80091e0:	0016      	movs	r6, r2
 80091e2:	7865      	ldrb	r5, [r4, #1]
 80091e4:	3402      	adds	r4, #2
 80091e6:	4a2e      	ldr	r2, [pc, #184]	@ (80092a0 <_strtol_l.constprop.0+0x110>)
 80091e8:	9b00      	ldr	r3, [sp, #0]
 80091ea:	4694      	mov	ip, r2
 80091ec:	4463      	add	r3, ip
 80091ee:	0031      	movs	r1, r6
 80091f0:	0018      	movs	r0, r3
 80091f2:	9302      	str	r3, [sp, #8]
 80091f4:	f7f7 f820 	bl	8000238 <__aeabi_uidivmod>
 80091f8:	2200      	movs	r2, #0
 80091fa:	4684      	mov	ip, r0
 80091fc:	0010      	movs	r0, r2
 80091fe:	002b      	movs	r3, r5
 8009200:	3b30      	subs	r3, #48	@ 0x30
 8009202:	2b09      	cmp	r3, #9
 8009204:	d825      	bhi.n	8009252 <_strtol_l.constprop.0+0xc2>
 8009206:	001d      	movs	r5, r3
 8009208:	42ae      	cmp	r6, r5
 800920a:	dd31      	ble.n	8009270 <_strtol_l.constprop.0+0xe0>
 800920c:	1c53      	adds	r3, r2, #1
 800920e:	d009      	beq.n	8009224 <_strtol_l.constprop.0+0x94>
 8009210:	2201      	movs	r2, #1
 8009212:	4252      	negs	r2, r2
 8009214:	4584      	cmp	ip, r0
 8009216:	d305      	bcc.n	8009224 <_strtol_l.constprop.0+0x94>
 8009218:	d101      	bne.n	800921e <_strtol_l.constprop.0+0x8e>
 800921a:	42a9      	cmp	r1, r5
 800921c:	db25      	blt.n	800926a <_strtol_l.constprop.0+0xda>
 800921e:	2201      	movs	r2, #1
 8009220:	4370      	muls	r0, r6
 8009222:	1828      	adds	r0, r5, r0
 8009224:	7825      	ldrb	r5, [r4, #0]
 8009226:	3401      	adds	r4, #1
 8009228:	e7e9      	b.n	80091fe <_strtol_l.constprop.0+0x6e>
 800922a:	f000 f86f 	bl	800930c <__errno>
 800922e:	2316      	movs	r3, #22
 8009230:	6003      	str	r3, [r0, #0]
 8009232:	2000      	movs	r0, #0
 8009234:	b005      	add	sp, #20
 8009236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009238:	9100      	str	r1, [sp, #0]
 800923a:	2d2b      	cmp	r5, #43	@ 0x2b
 800923c:	d1c5      	bne.n	80091ca <_strtol_l.constprop.0+0x3a>
 800923e:	7825      	ldrb	r5, [r4, #0]
 8009240:	1c9c      	adds	r4, r3, #2
 8009242:	e7c2      	b.n	80091ca <_strtol_l.constprop.0+0x3a>
 8009244:	2e00      	cmp	r6, #0
 8009246:	d1ce      	bne.n	80091e6 <_strtol_l.constprop.0+0x56>
 8009248:	3608      	adds	r6, #8
 800924a:	2d30      	cmp	r5, #48	@ 0x30
 800924c:	d0cb      	beq.n	80091e6 <_strtol_l.constprop.0+0x56>
 800924e:	3602      	adds	r6, #2
 8009250:	e7c9      	b.n	80091e6 <_strtol_l.constprop.0+0x56>
 8009252:	002b      	movs	r3, r5
 8009254:	3b41      	subs	r3, #65	@ 0x41
 8009256:	2b19      	cmp	r3, #25
 8009258:	d801      	bhi.n	800925e <_strtol_l.constprop.0+0xce>
 800925a:	3d37      	subs	r5, #55	@ 0x37
 800925c:	e7d4      	b.n	8009208 <_strtol_l.constprop.0+0x78>
 800925e:	002b      	movs	r3, r5
 8009260:	3b61      	subs	r3, #97	@ 0x61
 8009262:	2b19      	cmp	r3, #25
 8009264:	d804      	bhi.n	8009270 <_strtol_l.constprop.0+0xe0>
 8009266:	3d57      	subs	r5, #87	@ 0x57
 8009268:	e7ce      	b.n	8009208 <_strtol_l.constprop.0+0x78>
 800926a:	2201      	movs	r2, #1
 800926c:	4252      	negs	r2, r2
 800926e:	e7d9      	b.n	8009224 <_strtol_l.constprop.0+0x94>
 8009270:	1c53      	adds	r3, r2, #1
 8009272:	d108      	bne.n	8009286 <_strtol_l.constprop.0+0xf6>
 8009274:	2322      	movs	r3, #34	@ 0x22
 8009276:	9a03      	ldr	r2, [sp, #12]
 8009278:	9802      	ldr	r0, [sp, #8]
 800927a:	6013      	str	r3, [r2, #0]
 800927c:	2f00      	cmp	r7, #0
 800927e:	d0d9      	beq.n	8009234 <_strtol_l.constprop.0+0xa4>
 8009280:	1e63      	subs	r3, r4, #1
 8009282:	9301      	str	r3, [sp, #4]
 8009284:	e007      	b.n	8009296 <_strtol_l.constprop.0+0x106>
 8009286:	9b00      	ldr	r3, [sp, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d000      	beq.n	800928e <_strtol_l.constprop.0+0xfe>
 800928c:	4240      	negs	r0, r0
 800928e:	2f00      	cmp	r7, #0
 8009290:	d0d0      	beq.n	8009234 <_strtol_l.constprop.0+0xa4>
 8009292:	2a00      	cmp	r2, #0
 8009294:	d1f4      	bne.n	8009280 <_strtol_l.constprop.0+0xf0>
 8009296:	9b01      	ldr	r3, [sp, #4]
 8009298:	603b      	str	r3, [r7, #0]
 800929a:	e7cb      	b.n	8009234 <_strtol_l.constprop.0+0xa4>
 800929c:	0800a455 	.word	0x0800a455
 80092a0:	7fffffff 	.word	0x7fffffff

080092a4 <strtol>:
 80092a4:	b510      	push	{r4, lr}
 80092a6:	4c04      	ldr	r4, [pc, #16]	@ (80092b8 <strtol+0x14>)
 80092a8:	0013      	movs	r3, r2
 80092aa:	000a      	movs	r2, r1
 80092ac:	0001      	movs	r1, r0
 80092ae:	6820      	ldr	r0, [r4, #0]
 80092b0:	f7ff ff6e 	bl	8009190 <_strtol_l.constprop.0>
 80092b4:	bd10      	pop	{r4, pc}
 80092b6:	46c0      	nop			@ (mov r8, r8)
 80092b8:	20000500 	.word	0x20000500

080092bc <siprintf>:
 80092bc:	b40e      	push	{r1, r2, r3}
 80092be:	b500      	push	{lr}
 80092c0:	490b      	ldr	r1, [pc, #44]	@ (80092f0 <siprintf+0x34>)
 80092c2:	b09c      	sub	sp, #112	@ 0x70
 80092c4:	ab1d      	add	r3, sp, #116	@ 0x74
 80092c6:	9002      	str	r0, [sp, #8]
 80092c8:	9006      	str	r0, [sp, #24]
 80092ca:	9107      	str	r1, [sp, #28]
 80092cc:	9104      	str	r1, [sp, #16]
 80092ce:	4809      	ldr	r0, [pc, #36]	@ (80092f4 <siprintf+0x38>)
 80092d0:	4909      	ldr	r1, [pc, #36]	@ (80092f8 <siprintf+0x3c>)
 80092d2:	cb04      	ldmia	r3!, {r2}
 80092d4:	9105      	str	r1, [sp, #20]
 80092d6:	6800      	ldr	r0, [r0, #0]
 80092d8:	a902      	add	r1, sp, #8
 80092da:	9301      	str	r3, [sp, #4]
 80092dc:	f000 f9a8 	bl	8009630 <_svfiprintf_r>
 80092e0:	2200      	movs	r2, #0
 80092e2:	9b02      	ldr	r3, [sp, #8]
 80092e4:	701a      	strb	r2, [r3, #0]
 80092e6:	b01c      	add	sp, #112	@ 0x70
 80092e8:	bc08      	pop	{r3}
 80092ea:	b003      	add	sp, #12
 80092ec:	4718      	bx	r3
 80092ee:	46c0      	nop			@ (mov r8, r8)
 80092f0:	7fffffff 	.word	0x7fffffff
 80092f4:	20000500 	.word	0x20000500
 80092f8:	ffff0208 	.word	0xffff0208

080092fc <memset>:
 80092fc:	0003      	movs	r3, r0
 80092fe:	1882      	adds	r2, r0, r2
 8009300:	4293      	cmp	r3, r2
 8009302:	d100      	bne.n	8009306 <memset+0xa>
 8009304:	4770      	bx	lr
 8009306:	7019      	strb	r1, [r3, #0]
 8009308:	3301      	adds	r3, #1
 800930a:	e7f9      	b.n	8009300 <memset+0x4>

0800930c <__errno>:
 800930c:	4b01      	ldr	r3, [pc, #4]	@ (8009314 <__errno+0x8>)
 800930e:	6818      	ldr	r0, [r3, #0]
 8009310:	4770      	bx	lr
 8009312:	46c0      	nop			@ (mov r8, r8)
 8009314:	20000500 	.word	0x20000500

08009318 <__libc_init_array>:
 8009318:	b570      	push	{r4, r5, r6, lr}
 800931a:	2600      	movs	r6, #0
 800931c:	4c0c      	ldr	r4, [pc, #48]	@ (8009350 <__libc_init_array+0x38>)
 800931e:	4d0d      	ldr	r5, [pc, #52]	@ (8009354 <__libc_init_array+0x3c>)
 8009320:	1b64      	subs	r4, r4, r5
 8009322:	10a4      	asrs	r4, r4, #2
 8009324:	42a6      	cmp	r6, r4
 8009326:	d109      	bne.n	800933c <__libc_init_array+0x24>
 8009328:	2600      	movs	r6, #0
 800932a:	f000 fc65 	bl	8009bf8 <_init>
 800932e:	4c0a      	ldr	r4, [pc, #40]	@ (8009358 <__libc_init_array+0x40>)
 8009330:	4d0a      	ldr	r5, [pc, #40]	@ (800935c <__libc_init_array+0x44>)
 8009332:	1b64      	subs	r4, r4, r5
 8009334:	10a4      	asrs	r4, r4, #2
 8009336:	42a6      	cmp	r6, r4
 8009338:	d105      	bne.n	8009346 <__libc_init_array+0x2e>
 800933a:	bd70      	pop	{r4, r5, r6, pc}
 800933c:	00b3      	lsls	r3, r6, #2
 800933e:	58eb      	ldr	r3, [r5, r3]
 8009340:	4798      	blx	r3
 8009342:	3601      	adds	r6, #1
 8009344:	e7ee      	b.n	8009324 <__libc_init_array+0xc>
 8009346:	00b3      	lsls	r3, r6, #2
 8009348:	58eb      	ldr	r3, [r5, r3]
 800934a:	4798      	blx	r3
 800934c:	3601      	adds	r6, #1
 800934e:	e7f2      	b.n	8009336 <__libc_init_array+0x1e>
 8009350:	0800a590 	.word	0x0800a590
 8009354:	0800a590 	.word	0x0800a590
 8009358:	0800a594 	.word	0x0800a594
 800935c:	0800a590 	.word	0x0800a590

08009360 <__retarget_lock_acquire_recursive>:
 8009360:	4770      	bx	lr

08009362 <__retarget_lock_release_recursive>:
 8009362:	4770      	bx	lr

08009364 <memcpy>:
 8009364:	2300      	movs	r3, #0
 8009366:	b510      	push	{r4, lr}
 8009368:	429a      	cmp	r2, r3
 800936a:	d100      	bne.n	800936e <memcpy+0xa>
 800936c:	bd10      	pop	{r4, pc}
 800936e:	5ccc      	ldrb	r4, [r1, r3]
 8009370:	54c4      	strb	r4, [r0, r3]
 8009372:	3301      	adds	r3, #1
 8009374:	e7f8      	b.n	8009368 <memcpy+0x4>
	...

08009378 <_free_r>:
 8009378:	b570      	push	{r4, r5, r6, lr}
 800937a:	0005      	movs	r5, r0
 800937c:	1e0c      	subs	r4, r1, #0
 800937e:	d010      	beq.n	80093a2 <_free_r+0x2a>
 8009380:	3c04      	subs	r4, #4
 8009382:	6823      	ldr	r3, [r4, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	da00      	bge.n	800938a <_free_r+0x12>
 8009388:	18e4      	adds	r4, r4, r3
 800938a:	0028      	movs	r0, r5
 800938c:	f000 f8e0 	bl	8009550 <__malloc_lock>
 8009390:	4a1d      	ldr	r2, [pc, #116]	@ (8009408 <_free_r+0x90>)
 8009392:	6813      	ldr	r3, [r2, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d105      	bne.n	80093a4 <_free_r+0x2c>
 8009398:	6063      	str	r3, [r4, #4]
 800939a:	6014      	str	r4, [r2, #0]
 800939c:	0028      	movs	r0, r5
 800939e:	f000 f8df 	bl	8009560 <__malloc_unlock>
 80093a2:	bd70      	pop	{r4, r5, r6, pc}
 80093a4:	42a3      	cmp	r3, r4
 80093a6:	d908      	bls.n	80093ba <_free_r+0x42>
 80093a8:	6820      	ldr	r0, [r4, #0]
 80093aa:	1821      	adds	r1, r4, r0
 80093ac:	428b      	cmp	r3, r1
 80093ae:	d1f3      	bne.n	8009398 <_free_r+0x20>
 80093b0:	6819      	ldr	r1, [r3, #0]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	1809      	adds	r1, r1, r0
 80093b6:	6021      	str	r1, [r4, #0]
 80093b8:	e7ee      	b.n	8009398 <_free_r+0x20>
 80093ba:	001a      	movs	r2, r3
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d001      	beq.n	80093c6 <_free_r+0x4e>
 80093c2:	42a3      	cmp	r3, r4
 80093c4:	d9f9      	bls.n	80093ba <_free_r+0x42>
 80093c6:	6811      	ldr	r1, [r2, #0]
 80093c8:	1850      	adds	r0, r2, r1
 80093ca:	42a0      	cmp	r0, r4
 80093cc:	d10b      	bne.n	80093e6 <_free_r+0x6e>
 80093ce:	6820      	ldr	r0, [r4, #0]
 80093d0:	1809      	adds	r1, r1, r0
 80093d2:	1850      	adds	r0, r2, r1
 80093d4:	6011      	str	r1, [r2, #0]
 80093d6:	4283      	cmp	r3, r0
 80093d8:	d1e0      	bne.n	800939c <_free_r+0x24>
 80093da:	6818      	ldr	r0, [r3, #0]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	1841      	adds	r1, r0, r1
 80093e0:	6011      	str	r1, [r2, #0]
 80093e2:	6053      	str	r3, [r2, #4]
 80093e4:	e7da      	b.n	800939c <_free_r+0x24>
 80093e6:	42a0      	cmp	r0, r4
 80093e8:	d902      	bls.n	80093f0 <_free_r+0x78>
 80093ea:	230c      	movs	r3, #12
 80093ec:	602b      	str	r3, [r5, #0]
 80093ee:	e7d5      	b.n	800939c <_free_r+0x24>
 80093f0:	6820      	ldr	r0, [r4, #0]
 80093f2:	1821      	adds	r1, r4, r0
 80093f4:	428b      	cmp	r3, r1
 80093f6:	d103      	bne.n	8009400 <_free_r+0x88>
 80093f8:	6819      	ldr	r1, [r3, #0]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	1809      	adds	r1, r1, r0
 80093fe:	6021      	str	r1, [r4, #0]
 8009400:	6063      	str	r3, [r4, #4]
 8009402:	6054      	str	r4, [r2, #4]
 8009404:	e7ca      	b.n	800939c <_free_r+0x24>
 8009406:	46c0      	nop			@ (mov r8, r8)
 8009408:	20000a68 	.word	0x20000a68

0800940c <sbrk_aligned>:
 800940c:	b570      	push	{r4, r5, r6, lr}
 800940e:	4e0f      	ldr	r6, [pc, #60]	@ (800944c <sbrk_aligned+0x40>)
 8009410:	000d      	movs	r5, r1
 8009412:	6831      	ldr	r1, [r6, #0]
 8009414:	0004      	movs	r4, r0
 8009416:	2900      	cmp	r1, #0
 8009418:	d102      	bne.n	8009420 <sbrk_aligned+0x14>
 800941a:	f000 fb99 	bl	8009b50 <_sbrk_r>
 800941e:	6030      	str	r0, [r6, #0]
 8009420:	0029      	movs	r1, r5
 8009422:	0020      	movs	r0, r4
 8009424:	f000 fb94 	bl	8009b50 <_sbrk_r>
 8009428:	1c43      	adds	r3, r0, #1
 800942a:	d103      	bne.n	8009434 <sbrk_aligned+0x28>
 800942c:	2501      	movs	r5, #1
 800942e:	426d      	negs	r5, r5
 8009430:	0028      	movs	r0, r5
 8009432:	bd70      	pop	{r4, r5, r6, pc}
 8009434:	2303      	movs	r3, #3
 8009436:	1cc5      	adds	r5, r0, #3
 8009438:	439d      	bics	r5, r3
 800943a:	42a8      	cmp	r0, r5
 800943c:	d0f8      	beq.n	8009430 <sbrk_aligned+0x24>
 800943e:	1a29      	subs	r1, r5, r0
 8009440:	0020      	movs	r0, r4
 8009442:	f000 fb85 	bl	8009b50 <_sbrk_r>
 8009446:	3001      	adds	r0, #1
 8009448:	d1f2      	bne.n	8009430 <sbrk_aligned+0x24>
 800944a:	e7ef      	b.n	800942c <sbrk_aligned+0x20>
 800944c:	20000a64 	.word	0x20000a64

08009450 <_malloc_r>:
 8009450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009452:	2203      	movs	r2, #3
 8009454:	1ccb      	adds	r3, r1, #3
 8009456:	4393      	bics	r3, r2
 8009458:	3308      	adds	r3, #8
 800945a:	0005      	movs	r5, r0
 800945c:	001f      	movs	r7, r3
 800945e:	2b0c      	cmp	r3, #12
 8009460:	d234      	bcs.n	80094cc <_malloc_r+0x7c>
 8009462:	270c      	movs	r7, #12
 8009464:	42b9      	cmp	r1, r7
 8009466:	d833      	bhi.n	80094d0 <_malloc_r+0x80>
 8009468:	0028      	movs	r0, r5
 800946a:	f000 f871 	bl	8009550 <__malloc_lock>
 800946e:	4e37      	ldr	r6, [pc, #220]	@ (800954c <_malloc_r+0xfc>)
 8009470:	6833      	ldr	r3, [r6, #0]
 8009472:	001c      	movs	r4, r3
 8009474:	2c00      	cmp	r4, #0
 8009476:	d12f      	bne.n	80094d8 <_malloc_r+0x88>
 8009478:	0039      	movs	r1, r7
 800947a:	0028      	movs	r0, r5
 800947c:	f7ff ffc6 	bl	800940c <sbrk_aligned>
 8009480:	0004      	movs	r4, r0
 8009482:	1c43      	adds	r3, r0, #1
 8009484:	d15f      	bne.n	8009546 <_malloc_r+0xf6>
 8009486:	6834      	ldr	r4, [r6, #0]
 8009488:	9400      	str	r4, [sp, #0]
 800948a:	9b00      	ldr	r3, [sp, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d14a      	bne.n	8009526 <_malloc_r+0xd6>
 8009490:	2c00      	cmp	r4, #0
 8009492:	d052      	beq.n	800953a <_malloc_r+0xea>
 8009494:	6823      	ldr	r3, [r4, #0]
 8009496:	0028      	movs	r0, r5
 8009498:	18e3      	adds	r3, r4, r3
 800949a:	9900      	ldr	r1, [sp, #0]
 800949c:	9301      	str	r3, [sp, #4]
 800949e:	f000 fb57 	bl	8009b50 <_sbrk_r>
 80094a2:	9b01      	ldr	r3, [sp, #4]
 80094a4:	4283      	cmp	r3, r0
 80094a6:	d148      	bne.n	800953a <_malloc_r+0xea>
 80094a8:	6823      	ldr	r3, [r4, #0]
 80094aa:	0028      	movs	r0, r5
 80094ac:	1aff      	subs	r7, r7, r3
 80094ae:	0039      	movs	r1, r7
 80094b0:	f7ff ffac 	bl	800940c <sbrk_aligned>
 80094b4:	3001      	adds	r0, #1
 80094b6:	d040      	beq.n	800953a <_malloc_r+0xea>
 80094b8:	6823      	ldr	r3, [r4, #0]
 80094ba:	19db      	adds	r3, r3, r7
 80094bc:	6023      	str	r3, [r4, #0]
 80094be:	6833      	ldr	r3, [r6, #0]
 80094c0:	685a      	ldr	r2, [r3, #4]
 80094c2:	2a00      	cmp	r2, #0
 80094c4:	d133      	bne.n	800952e <_malloc_r+0xde>
 80094c6:	9b00      	ldr	r3, [sp, #0]
 80094c8:	6033      	str	r3, [r6, #0]
 80094ca:	e019      	b.n	8009500 <_malloc_r+0xb0>
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	dac9      	bge.n	8009464 <_malloc_r+0x14>
 80094d0:	230c      	movs	r3, #12
 80094d2:	602b      	str	r3, [r5, #0]
 80094d4:	2000      	movs	r0, #0
 80094d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80094d8:	6821      	ldr	r1, [r4, #0]
 80094da:	1bc9      	subs	r1, r1, r7
 80094dc:	d420      	bmi.n	8009520 <_malloc_r+0xd0>
 80094de:	290b      	cmp	r1, #11
 80094e0:	d90a      	bls.n	80094f8 <_malloc_r+0xa8>
 80094e2:	19e2      	adds	r2, r4, r7
 80094e4:	6027      	str	r7, [r4, #0]
 80094e6:	42a3      	cmp	r3, r4
 80094e8:	d104      	bne.n	80094f4 <_malloc_r+0xa4>
 80094ea:	6032      	str	r2, [r6, #0]
 80094ec:	6863      	ldr	r3, [r4, #4]
 80094ee:	6011      	str	r1, [r2, #0]
 80094f0:	6053      	str	r3, [r2, #4]
 80094f2:	e005      	b.n	8009500 <_malloc_r+0xb0>
 80094f4:	605a      	str	r2, [r3, #4]
 80094f6:	e7f9      	b.n	80094ec <_malloc_r+0x9c>
 80094f8:	6862      	ldr	r2, [r4, #4]
 80094fa:	42a3      	cmp	r3, r4
 80094fc:	d10e      	bne.n	800951c <_malloc_r+0xcc>
 80094fe:	6032      	str	r2, [r6, #0]
 8009500:	0028      	movs	r0, r5
 8009502:	f000 f82d 	bl	8009560 <__malloc_unlock>
 8009506:	0020      	movs	r0, r4
 8009508:	2207      	movs	r2, #7
 800950a:	300b      	adds	r0, #11
 800950c:	1d23      	adds	r3, r4, #4
 800950e:	4390      	bics	r0, r2
 8009510:	1ac2      	subs	r2, r0, r3
 8009512:	4298      	cmp	r0, r3
 8009514:	d0df      	beq.n	80094d6 <_malloc_r+0x86>
 8009516:	1a1b      	subs	r3, r3, r0
 8009518:	50a3      	str	r3, [r4, r2]
 800951a:	e7dc      	b.n	80094d6 <_malloc_r+0x86>
 800951c:	605a      	str	r2, [r3, #4]
 800951e:	e7ef      	b.n	8009500 <_malloc_r+0xb0>
 8009520:	0023      	movs	r3, r4
 8009522:	6864      	ldr	r4, [r4, #4]
 8009524:	e7a6      	b.n	8009474 <_malloc_r+0x24>
 8009526:	9c00      	ldr	r4, [sp, #0]
 8009528:	6863      	ldr	r3, [r4, #4]
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	e7ad      	b.n	800948a <_malloc_r+0x3a>
 800952e:	001a      	movs	r2, r3
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	42a3      	cmp	r3, r4
 8009534:	d1fb      	bne.n	800952e <_malloc_r+0xde>
 8009536:	2300      	movs	r3, #0
 8009538:	e7da      	b.n	80094f0 <_malloc_r+0xa0>
 800953a:	230c      	movs	r3, #12
 800953c:	0028      	movs	r0, r5
 800953e:	602b      	str	r3, [r5, #0]
 8009540:	f000 f80e 	bl	8009560 <__malloc_unlock>
 8009544:	e7c6      	b.n	80094d4 <_malloc_r+0x84>
 8009546:	6007      	str	r7, [r0, #0]
 8009548:	e7da      	b.n	8009500 <_malloc_r+0xb0>
 800954a:	46c0      	nop			@ (mov r8, r8)
 800954c:	20000a68 	.word	0x20000a68

08009550 <__malloc_lock>:
 8009550:	b510      	push	{r4, lr}
 8009552:	4802      	ldr	r0, [pc, #8]	@ (800955c <__malloc_lock+0xc>)
 8009554:	f7ff ff04 	bl	8009360 <__retarget_lock_acquire_recursive>
 8009558:	bd10      	pop	{r4, pc}
 800955a:	46c0      	nop			@ (mov r8, r8)
 800955c:	20000a60 	.word	0x20000a60

08009560 <__malloc_unlock>:
 8009560:	b510      	push	{r4, lr}
 8009562:	4802      	ldr	r0, [pc, #8]	@ (800956c <__malloc_unlock+0xc>)
 8009564:	f7ff fefd 	bl	8009362 <__retarget_lock_release_recursive>
 8009568:	bd10      	pop	{r4, pc}
 800956a:	46c0      	nop			@ (mov r8, r8)
 800956c:	20000a60 	.word	0x20000a60

08009570 <__ssputs_r>:
 8009570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009572:	688e      	ldr	r6, [r1, #8]
 8009574:	b085      	sub	sp, #20
 8009576:	001f      	movs	r7, r3
 8009578:	000c      	movs	r4, r1
 800957a:	680b      	ldr	r3, [r1, #0]
 800957c:	9002      	str	r0, [sp, #8]
 800957e:	9203      	str	r2, [sp, #12]
 8009580:	42be      	cmp	r6, r7
 8009582:	d830      	bhi.n	80095e6 <__ssputs_r+0x76>
 8009584:	210c      	movs	r1, #12
 8009586:	5e62      	ldrsh	r2, [r4, r1]
 8009588:	2190      	movs	r1, #144	@ 0x90
 800958a:	00c9      	lsls	r1, r1, #3
 800958c:	420a      	tst	r2, r1
 800958e:	d028      	beq.n	80095e2 <__ssputs_r+0x72>
 8009590:	2003      	movs	r0, #3
 8009592:	6921      	ldr	r1, [r4, #16]
 8009594:	1a5b      	subs	r3, r3, r1
 8009596:	9301      	str	r3, [sp, #4]
 8009598:	6963      	ldr	r3, [r4, #20]
 800959a:	4343      	muls	r3, r0
 800959c:	9801      	ldr	r0, [sp, #4]
 800959e:	0fdd      	lsrs	r5, r3, #31
 80095a0:	18ed      	adds	r5, r5, r3
 80095a2:	1c7b      	adds	r3, r7, #1
 80095a4:	181b      	adds	r3, r3, r0
 80095a6:	106d      	asrs	r5, r5, #1
 80095a8:	42ab      	cmp	r3, r5
 80095aa:	d900      	bls.n	80095ae <__ssputs_r+0x3e>
 80095ac:	001d      	movs	r5, r3
 80095ae:	0552      	lsls	r2, r2, #21
 80095b0:	d528      	bpl.n	8009604 <__ssputs_r+0x94>
 80095b2:	0029      	movs	r1, r5
 80095b4:	9802      	ldr	r0, [sp, #8]
 80095b6:	f7ff ff4b 	bl	8009450 <_malloc_r>
 80095ba:	1e06      	subs	r6, r0, #0
 80095bc:	d02c      	beq.n	8009618 <__ssputs_r+0xa8>
 80095be:	9a01      	ldr	r2, [sp, #4]
 80095c0:	6921      	ldr	r1, [r4, #16]
 80095c2:	f7ff fecf 	bl	8009364 <memcpy>
 80095c6:	89a2      	ldrh	r2, [r4, #12]
 80095c8:	4b18      	ldr	r3, [pc, #96]	@ (800962c <__ssputs_r+0xbc>)
 80095ca:	401a      	ands	r2, r3
 80095cc:	2380      	movs	r3, #128	@ 0x80
 80095ce:	4313      	orrs	r3, r2
 80095d0:	81a3      	strh	r3, [r4, #12]
 80095d2:	9b01      	ldr	r3, [sp, #4]
 80095d4:	6126      	str	r6, [r4, #16]
 80095d6:	18f6      	adds	r6, r6, r3
 80095d8:	6026      	str	r6, [r4, #0]
 80095da:	003e      	movs	r6, r7
 80095dc:	6165      	str	r5, [r4, #20]
 80095de:	1aed      	subs	r5, r5, r3
 80095e0:	60a5      	str	r5, [r4, #8]
 80095e2:	42be      	cmp	r6, r7
 80095e4:	d900      	bls.n	80095e8 <__ssputs_r+0x78>
 80095e6:	003e      	movs	r6, r7
 80095e8:	0032      	movs	r2, r6
 80095ea:	9903      	ldr	r1, [sp, #12]
 80095ec:	6820      	ldr	r0, [r4, #0]
 80095ee:	f000 fa9b 	bl	8009b28 <memmove>
 80095f2:	2000      	movs	r0, #0
 80095f4:	68a3      	ldr	r3, [r4, #8]
 80095f6:	1b9b      	subs	r3, r3, r6
 80095f8:	60a3      	str	r3, [r4, #8]
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	199b      	adds	r3, r3, r6
 80095fe:	6023      	str	r3, [r4, #0]
 8009600:	b005      	add	sp, #20
 8009602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009604:	002a      	movs	r2, r5
 8009606:	9802      	ldr	r0, [sp, #8]
 8009608:	f000 fabf 	bl	8009b8a <_realloc_r>
 800960c:	1e06      	subs	r6, r0, #0
 800960e:	d1e0      	bne.n	80095d2 <__ssputs_r+0x62>
 8009610:	6921      	ldr	r1, [r4, #16]
 8009612:	9802      	ldr	r0, [sp, #8]
 8009614:	f7ff feb0 	bl	8009378 <_free_r>
 8009618:	230c      	movs	r3, #12
 800961a:	2001      	movs	r0, #1
 800961c:	9a02      	ldr	r2, [sp, #8]
 800961e:	4240      	negs	r0, r0
 8009620:	6013      	str	r3, [r2, #0]
 8009622:	89a2      	ldrh	r2, [r4, #12]
 8009624:	3334      	adds	r3, #52	@ 0x34
 8009626:	4313      	orrs	r3, r2
 8009628:	81a3      	strh	r3, [r4, #12]
 800962a:	e7e9      	b.n	8009600 <__ssputs_r+0x90>
 800962c:	fffffb7f 	.word	0xfffffb7f

08009630 <_svfiprintf_r>:
 8009630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009632:	b0a1      	sub	sp, #132	@ 0x84
 8009634:	9003      	str	r0, [sp, #12]
 8009636:	001d      	movs	r5, r3
 8009638:	898b      	ldrh	r3, [r1, #12]
 800963a:	000f      	movs	r7, r1
 800963c:	0016      	movs	r6, r2
 800963e:	061b      	lsls	r3, r3, #24
 8009640:	d511      	bpl.n	8009666 <_svfiprintf_r+0x36>
 8009642:	690b      	ldr	r3, [r1, #16]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d10e      	bne.n	8009666 <_svfiprintf_r+0x36>
 8009648:	2140      	movs	r1, #64	@ 0x40
 800964a:	f7ff ff01 	bl	8009450 <_malloc_r>
 800964e:	6038      	str	r0, [r7, #0]
 8009650:	6138      	str	r0, [r7, #16]
 8009652:	2800      	cmp	r0, #0
 8009654:	d105      	bne.n	8009662 <_svfiprintf_r+0x32>
 8009656:	230c      	movs	r3, #12
 8009658:	9a03      	ldr	r2, [sp, #12]
 800965a:	6013      	str	r3, [r2, #0]
 800965c:	2001      	movs	r0, #1
 800965e:	4240      	negs	r0, r0
 8009660:	e0cf      	b.n	8009802 <_svfiprintf_r+0x1d2>
 8009662:	2340      	movs	r3, #64	@ 0x40
 8009664:	617b      	str	r3, [r7, #20]
 8009666:	2300      	movs	r3, #0
 8009668:	ac08      	add	r4, sp, #32
 800966a:	6163      	str	r3, [r4, #20]
 800966c:	3320      	adds	r3, #32
 800966e:	7663      	strb	r3, [r4, #25]
 8009670:	3310      	adds	r3, #16
 8009672:	76a3      	strb	r3, [r4, #26]
 8009674:	9507      	str	r5, [sp, #28]
 8009676:	0035      	movs	r5, r6
 8009678:	782b      	ldrb	r3, [r5, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d001      	beq.n	8009682 <_svfiprintf_r+0x52>
 800967e:	2b25      	cmp	r3, #37	@ 0x25
 8009680:	d148      	bne.n	8009714 <_svfiprintf_r+0xe4>
 8009682:	1bab      	subs	r3, r5, r6
 8009684:	9305      	str	r3, [sp, #20]
 8009686:	42b5      	cmp	r5, r6
 8009688:	d00b      	beq.n	80096a2 <_svfiprintf_r+0x72>
 800968a:	0032      	movs	r2, r6
 800968c:	0039      	movs	r1, r7
 800968e:	9803      	ldr	r0, [sp, #12]
 8009690:	f7ff ff6e 	bl	8009570 <__ssputs_r>
 8009694:	3001      	adds	r0, #1
 8009696:	d100      	bne.n	800969a <_svfiprintf_r+0x6a>
 8009698:	e0ae      	b.n	80097f8 <_svfiprintf_r+0x1c8>
 800969a:	6963      	ldr	r3, [r4, #20]
 800969c:	9a05      	ldr	r2, [sp, #20]
 800969e:	189b      	adds	r3, r3, r2
 80096a0:	6163      	str	r3, [r4, #20]
 80096a2:	782b      	ldrb	r3, [r5, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d100      	bne.n	80096aa <_svfiprintf_r+0x7a>
 80096a8:	e0a6      	b.n	80097f8 <_svfiprintf_r+0x1c8>
 80096aa:	2201      	movs	r2, #1
 80096ac:	2300      	movs	r3, #0
 80096ae:	4252      	negs	r2, r2
 80096b0:	6062      	str	r2, [r4, #4]
 80096b2:	a904      	add	r1, sp, #16
 80096b4:	3254      	adds	r2, #84	@ 0x54
 80096b6:	1852      	adds	r2, r2, r1
 80096b8:	1c6e      	adds	r6, r5, #1
 80096ba:	6023      	str	r3, [r4, #0]
 80096bc:	60e3      	str	r3, [r4, #12]
 80096be:	60a3      	str	r3, [r4, #8]
 80096c0:	7013      	strb	r3, [r2, #0]
 80096c2:	65a3      	str	r3, [r4, #88]	@ 0x58
 80096c4:	4b54      	ldr	r3, [pc, #336]	@ (8009818 <_svfiprintf_r+0x1e8>)
 80096c6:	2205      	movs	r2, #5
 80096c8:	0018      	movs	r0, r3
 80096ca:	7831      	ldrb	r1, [r6, #0]
 80096cc:	9305      	str	r3, [sp, #20]
 80096ce:	f000 fa51 	bl	8009b74 <memchr>
 80096d2:	1c75      	adds	r5, r6, #1
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d11f      	bne.n	8009718 <_svfiprintf_r+0xe8>
 80096d8:	6822      	ldr	r2, [r4, #0]
 80096da:	06d3      	lsls	r3, r2, #27
 80096dc:	d504      	bpl.n	80096e8 <_svfiprintf_r+0xb8>
 80096de:	2353      	movs	r3, #83	@ 0x53
 80096e0:	a904      	add	r1, sp, #16
 80096e2:	185b      	adds	r3, r3, r1
 80096e4:	2120      	movs	r1, #32
 80096e6:	7019      	strb	r1, [r3, #0]
 80096e8:	0713      	lsls	r3, r2, #28
 80096ea:	d504      	bpl.n	80096f6 <_svfiprintf_r+0xc6>
 80096ec:	2353      	movs	r3, #83	@ 0x53
 80096ee:	a904      	add	r1, sp, #16
 80096f0:	185b      	adds	r3, r3, r1
 80096f2:	212b      	movs	r1, #43	@ 0x2b
 80096f4:	7019      	strb	r1, [r3, #0]
 80096f6:	7833      	ldrb	r3, [r6, #0]
 80096f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80096fa:	d016      	beq.n	800972a <_svfiprintf_r+0xfa>
 80096fc:	0035      	movs	r5, r6
 80096fe:	2100      	movs	r1, #0
 8009700:	200a      	movs	r0, #10
 8009702:	68e3      	ldr	r3, [r4, #12]
 8009704:	782a      	ldrb	r2, [r5, #0]
 8009706:	1c6e      	adds	r6, r5, #1
 8009708:	3a30      	subs	r2, #48	@ 0x30
 800970a:	2a09      	cmp	r2, #9
 800970c:	d950      	bls.n	80097b0 <_svfiprintf_r+0x180>
 800970e:	2900      	cmp	r1, #0
 8009710:	d111      	bne.n	8009736 <_svfiprintf_r+0x106>
 8009712:	e017      	b.n	8009744 <_svfiprintf_r+0x114>
 8009714:	3501      	adds	r5, #1
 8009716:	e7af      	b.n	8009678 <_svfiprintf_r+0x48>
 8009718:	9b05      	ldr	r3, [sp, #20]
 800971a:	6822      	ldr	r2, [r4, #0]
 800971c:	1ac0      	subs	r0, r0, r3
 800971e:	2301      	movs	r3, #1
 8009720:	4083      	lsls	r3, r0
 8009722:	4313      	orrs	r3, r2
 8009724:	002e      	movs	r6, r5
 8009726:	6023      	str	r3, [r4, #0]
 8009728:	e7cc      	b.n	80096c4 <_svfiprintf_r+0x94>
 800972a:	9b07      	ldr	r3, [sp, #28]
 800972c:	1d19      	adds	r1, r3, #4
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	9107      	str	r1, [sp, #28]
 8009732:	2b00      	cmp	r3, #0
 8009734:	db01      	blt.n	800973a <_svfiprintf_r+0x10a>
 8009736:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009738:	e004      	b.n	8009744 <_svfiprintf_r+0x114>
 800973a:	425b      	negs	r3, r3
 800973c:	60e3      	str	r3, [r4, #12]
 800973e:	2302      	movs	r3, #2
 8009740:	4313      	orrs	r3, r2
 8009742:	6023      	str	r3, [r4, #0]
 8009744:	782b      	ldrb	r3, [r5, #0]
 8009746:	2b2e      	cmp	r3, #46	@ 0x2e
 8009748:	d10c      	bne.n	8009764 <_svfiprintf_r+0x134>
 800974a:	786b      	ldrb	r3, [r5, #1]
 800974c:	2b2a      	cmp	r3, #42	@ 0x2a
 800974e:	d134      	bne.n	80097ba <_svfiprintf_r+0x18a>
 8009750:	9b07      	ldr	r3, [sp, #28]
 8009752:	3502      	adds	r5, #2
 8009754:	1d1a      	adds	r2, r3, #4
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	9207      	str	r2, [sp, #28]
 800975a:	2b00      	cmp	r3, #0
 800975c:	da01      	bge.n	8009762 <_svfiprintf_r+0x132>
 800975e:	2301      	movs	r3, #1
 8009760:	425b      	negs	r3, r3
 8009762:	9309      	str	r3, [sp, #36]	@ 0x24
 8009764:	4e2d      	ldr	r6, [pc, #180]	@ (800981c <_svfiprintf_r+0x1ec>)
 8009766:	2203      	movs	r2, #3
 8009768:	0030      	movs	r0, r6
 800976a:	7829      	ldrb	r1, [r5, #0]
 800976c:	f000 fa02 	bl	8009b74 <memchr>
 8009770:	2800      	cmp	r0, #0
 8009772:	d006      	beq.n	8009782 <_svfiprintf_r+0x152>
 8009774:	2340      	movs	r3, #64	@ 0x40
 8009776:	1b80      	subs	r0, r0, r6
 8009778:	4083      	lsls	r3, r0
 800977a:	6822      	ldr	r2, [r4, #0]
 800977c:	3501      	adds	r5, #1
 800977e:	4313      	orrs	r3, r2
 8009780:	6023      	str	r3, [r4, #0]
 8009782:	7829      	ldrb	r1, [r5, #0]
 8009784:	2206      	movs	r2, #6
 8009786:	4826      	ldr	r0, [pc, #152]	@ (8009820 <_svfiprintf_r+0x1f0>)
 8009788:	1c6e      	adds	r6, r5, #1
 800978a:	7621      	strb	r1, [r4, #24]
 800978c:	f000 f9f2 	bl	8009b74 <memchr>
 8009790:	2800      	cmp	r0, #0
 8009792:	d038      	beq.n	8009806 <_svfiprintf_r+0x1d6>
 8009794:	4b23      	ldr	r3, [pc, #140]	@ (8009824 <_svfiprintf_r+0x1f4>)
 8009796:	2b00      	cmp	r3, #0
 8009798:	d122      	bne.n	80097e0 <_svfiprintf_r+0x1b0>
 800979a:	2207      	movs	r2, #7
 800979c:	9b07      	ldr	r3, [sp, #28]
 800979e:	3307      	adds	r3, #7
 80097a0:	4393      	bics	r3, r2
 80097a2:	3308      	adds	r3, #8
 80097a4:	9307      	str	r3, [sp, #28]
 80097a6:	6963      	ldr	r3, [r4, #20]
 80097a8:	9a04      	ldr	r2, [sp, #16]
 80097aa:	189b      	adds	r3, r3, r2
 80097ac:	6163      	str	r3, [r4, #20]
 80097ae:	e762      	b.n	8009676 <_svfiprintf_r+0x46>
 80097b0:	4343      	muls	r3, r0
 80097b2:	0035      	movs	r5, r6
 80097b4:	2101      	movs	r1, #1
 80097b6:	189b      	adds	r3, r3, r2
 80097b8:	e7a4      	b.n	8009704 <_svfiprintf_r+0xd4>
 80097ba:	2300      	movs	r3, #0
 80097bc:	200a      	movs	r0, #10
 80097be:	0019      	movs	r1, r3
 80097c0:	3501      	adds	r5, #1
 80097c2:	6063      	str	r3, [r4, #4]
 80097c4:	782a      	ldrb	r2, [r5, #0]
 80097c6:	1c6e      	adds	r6, r5, #1
 80097c8:	3a30      	subs	r2, #48	@ 0x30
 80097ca:	2a09      	cmp	r2, #9
 80097cc:	d903      	bls.n	80097d6 <_svfiprintf_r+0x1a6>
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d0c8      	beq.n	8009764 <_svfiprintf_r+0x134>
 80097d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80097d4:	e7c6      	b.n	8009764 <_svfiprintf_r+0x134>
 80097d6:	4341      	muls	r1, r0
 80097d8:	0035      	movs	r5, r6
 80097da:	2301      	movs	r3, #1
 80097dc:	1889      	adds	r1, r1, r2
 80097de:	e7f1      	b.n	80097c4 <_svfiprintf_r+0x194>
 80097e0:	aa07      	add	r2, sp, #28
 80097e2:	9200      	str	r2, [sp, #0]
 80097e4:	0021      	movs	r1, r4
 80097e6:	003a      	movs	r2, r7
 80097e8:	4b0f      	ldr	r3, [pc, #60]	@ (8009828 <_svfiprintf_r+0x1f8>)
 80097ea:	9803      	ldr	r0, [sp, #12]
 80097ec:	e000      	b.n	80097f0 <_svfiprintf_r+0x1c0>
 80097ee:	bf00      	nop
 80097f0:	9004      	str	r0, [sp, #16]
 80097f2:	9b04      	ldr	r3, [sp, #16]
 80097f4:	3301      	adds	r3, #1
 80097f6:	d1d6      	bne.n	80097a6 <_svfiprintf_r+0x176>
 80097f8:	89bb      	ldrh	r3, [r7, #12]
 80097fa:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80097fc:	065b      	lsls	r3, r3, #25
 80097fe:	d500      	bpl.n	8009802 <_svfiprintf_r+0x1d2>
 8009800:	e72c      	b.n	800965c <_svfiprintf_r+0x2c>
 8009802:	b021      	add	sp, #132	@ 0x84
 8009804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009806:	aa07      	add	r2, sp, #28
 8009808:	9200      	str	r2, [sp, #0]
 800980a:	0021      	movs	r1, r4
 800980c:	003a      	movs	r2, r7
 800980e:	4b06      	ldr	r3, [pc, #24]	@ (8009828 <_svfiprintf_r+0x1f8>)
 8009810:	9803      	ldr	r0, [sp, #12]
 8009812:	f000 f87b 	bl	800990c <_printf_i>
 8009816:	e7eb      	b.n	80097f0 <_svfiprintf_r+0x1c0>
 8009818:	0800a555 	.word	0x0800a555
 800981c:	0800a55b 	.word	0x0800a55b
 8009820:	0800a55f 	.word	0x0800a55f
 8009824:	00000000 	.word	0x00000000
 8009828:	08009571 	.word	0x08009571

0800982c <_printf_common>:
 800982c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800982e:	0016      	movs	r6, r2
 8009830:	9301      	str	r3, [sp, #4]
 8009832:	688a      	ldr	r2, [r1, #8]
 8009834:	690b      	ldr	r3, [r1, #16]
 8009836:	000c      	movs	r4, r1
 8009838:	9000      	str	r0, [sp, #0]
 800983a:	4293      	cmp	r3, r2
 800983c:	da00      	bge.n	8009840 <_printf_common+0x14>
 800983e:	0013      	movs	r3, r2
 8009840:	0022      	movs	r2, r4
 8009842:	6033      	str	r3, [r6, #0]
 8009844:	3243      	adds	r2, #67	@ 0x43
 8009846:	7812      	ldrb	r2, [r2, #0]
 8009848:	2a00      	cmp	r2, #0
 800984a:	d001      	beq.n	8009850 <_printf_common+0x24>
 800984c:	3301      	adds	r3, #1
 800984e:	6033      	str	r3, [r6, #0]
 8009850:	6823      	ldr	r3, [r4, #0]
 8009852:	069b      	lsls	r3, r3, #26
 8009854:	d502      	bpl.n	800985c <_printf_common+0x30>
 8009856:	6833      	ldr	r3, [r6, #0]
 8009858:	3302      	adds	r3, #2
 800985a:	6033      	str	r3, [r6, #0]
 800985c:	6822      	ldr	r2, [r4, #0]
 800985e:	2306      	movs	r3, #6
 8009860:	0015      	movs	r5, r2
 8009862:	401d      	ands	r5, r3
 8009864:	421a      	tst	r2, r3
 8009866:	d027      	beq.n	80098b8 <_printf_common+0x8c>
 8009868:	0023      	movs	r3, r4
 800986a:	3343      	adds	r3, #67	@ 0x43
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	1e5a      	subs	r2, r3, #1
 8009870:	4193      	sbcs	r3, r2
 8009872:	6822      	ldr	r2, [r4, #0]
 8009874:	0692      	lsls	r2, r2, #26
 8009876:	d430      	bmi.n	80098da <_printf_common+0xae>
 8009878:	0022      	movs	r2, r4
 800987a:	9901      	ldr	r1, [sp, #4]
 800987c:	9800      	ldr	r0, [sp, #0]
 800987e:	9d08      	ldr	r5, [sp, #32]
 8009880:	3243      	adds	r2, #67	@ 0x43
 8009882:	47a8      	blx	r5
 8009884:	3001      	adds	r0, #1
 8009886:	d025      	beq.n	80098d4 <_printf_common+0xa8>
 8009888:	2206      	movs	r2, #6
 800988a:	6823      	ldr	r3, [r4, #0]
 800988c:	2500      	movs	r5, #0
 800988e:	4013      	ands	r3, r2
 8009890:	2b04      	cmp	r3, #4
 8009892:	d105      	bne.n	80098a0 <_printf_common+0x74>
 8009894:	6833      	ldr	r3, [r6, #0]
 8009896:	68e5      	ldr	r5, [r4, #12]
 8009898:	1aed      	subs	r5, r5, r3
 800989a:	43eb      	mvns	r3, r5
 800989c:	17db      	asrs	r3, r3, #31
 800989e:	401d      	ands	r5, r3
 80098a0:	68a3      	ldr	r3, [r4, #8]
 80098a2:	6922      	ldr	r2, [r4, #16]
 80098a4:	4293      	cmp	r3, r2
 80098a6:	dd01      	ble.n	80098ac <_printf_common+0x80>
 80098a8:	1a9b      	subs	r3, r3, r2
 80098aa:	18ed      	adds	r5, r5, r3
 80098ac:	2600      	movs	r6, #0
 80098ae:	42b5      	cmp	r5, r6
 80098b0:	d120      	bne.n	80098f4 <_printf_common+0xc8>
 80098b2:	2000      	movs	r0, #0
 80098b4:	e010      	b.n	80098d8 <_printf_common+0xac>
 80098b6:	3501      	adds	r5, #1
 80098b8:	68e3      	ldr	r3, [r4, #12]
 80098ba:	6832      	ldr	r2, [r6, #0]
 80098bc:	1a9b      	subs	r3, r3, r2
 80098be:	42ab      	cmp	r3, r5
 80098c0:	ddd2      	ble.n	8009868 <_printf_common+0x3c>
 80098c2:	0022      	movs	r2, r4
 80098c4:	2301      	movs	r3, #1
 80098c6:	9901      	ldr	r1, [sp, #4]
 80098c8:	9800      	ldr	r0, [sp, #0]
 80098ca:	9f08      	ldr	r7, [sp, #32]
 80098cc:	3219      	adds	r2, #25
 80098ce:	47b8      	blx	r7
 80098d0:	3001      	adds	r0, #1
 80098d2:	d1f0      	bne.n	80098b6 <_printf_common+0x8a>
 80098d4:	2001      	movs	r0, #1
 80098d6:	4240      	negs	r0, r0
 80098d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098da:	2030      	movs	r0, #48	@ 0x30
 80098dc:	18e1      	adds	r1, r4, r3
 80098de:	3143      	adds	r1, #67	@ 0x43
 80098e0:	7008      	strb	r0, [r1, #0]
 80098e2:	0021      	movs	r1, r4
 80098e4:	1c5a      	adds	r2, r3, #1
 80098e6:	3145      	adds	r1, #69	@ 0x45
 80098e8:	7809      	ldrb	r1, [r1, #0]
 80098ea:	18a2      	adds	r2, r4, r2
 80098ec:	3243      	adds	r2, #67	@ 0x43
 80098ee:	3302      	adds	r3, #2
 80098f0:	7011      	strb	r1, [r2, #0]
 80098f2:	e7c1      	b.n	8009878 <_printf_common+0x4c>
 80098f4:	0022      	movs	r2, r4
 80098f6:	2301      	movs	r3, #1
 80098f8:	9901      	ldr	r1, [sp, #4]
 80098fa:	9800      	ldr	r0, [sp, #0]
 80098fc:	9f08      	ldr	r7, [sp, #32]
 80098fe:	321a      	adds	r2, #26
 8009900:	47b8      	blx	r7
 8009902:	3001      	adds	r0, #1
 8009904:	d0e6      	beq.n	80098d4 <_printf_common+0xa8>
 8009906:	3601      	adds	r6, #1
 8009908:	e7d1      	b.n	80098ae <_printf_common+0x82>
	...

0800990c <_printf_i>:
 800990c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800990e:	b08b      	sub	sp, #44	@ 0x2c
 8009910:	9206      	str	r2, [sp, #24]
 8009912:	000a      	movs	r2, r1
 8009914:	3243      	adds	r2, #67	@ 0x43
 8009916:	9307      	str	r3, [sp, #28]
 8009918:	9005      	str	r0, [sp, #20]
 800991a:	9203      	str	r2, [sp, #12]
 800991c:	7e0a      	ldrb	r2, [r1, #24]
 800991e:	000c      	movs	r4, r1
 8009920:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009922:	2a78      	cmp	r2, #120	@ 0x78
 8009924:	d809      	bhi.n	800993a <_printf_i+0x2e>
 8009926:	2a62      	cmp	r2, #98	@ 0x62
 8009928:	d80b      	bhi.n	8009942 <_printf_i+0x36>
 800992a:	2a00      	cmp	r2, #0
 800992c:	d100      	bne.n	8009930 <_printf_i+0x24>
 800992e:	e0bc      	b.n	8009aaa <_printf_i+0x19e>
 8009930:	497b      	ldr	r1, [pc, #492]	@ (8009b20 <_printf_i+0x214>)
 8009932:	9104      	str	r1, [sp, #16]
 8009934:	2a58      	cmp	r2, #88	@ 0x58
 8009936:	d100      	bne.n	800993a <_printf_i+0x2e>
 8009938:	e090      	b.n	8009a5c <_printf_i+0x150>
 800993a:	0025      	movs	r5, r4
 800993c:	3542      	adds	r5, #66	@ 0x42
 800993e:	702a      	strb	r2, [r5, #0]
 8009940:	e022      	b.n	8009988 <_printf_i+0x7c>
 8009942:	0010      	movs	r0, r2
 8009944:	3863      	subs	r0, #99	@ 0x63
 8009946:	2815      	cmp	r0, #21
 8009948:	d8f7      	bhi.n	800993a <_printf_i+0x2e>
 800994a:	f7f6 fbe5 	bl	8000118 <__gnu_thumb1_case_shi>
 800994e:	0016      	.short	0x0016
 8009950:	fff6001f 	.word	0xfff6001f
 8009954:	fff6fff6 	.word	0xfff6fff6
 8009958:	001ffff6 	.word	0x001ffff6
 800995c:	fff6fff6 	.word	0xfff6fff6
 8009960:	fff6fff6 	.word	0xfff6fff6
 8009964:	003600a1 	.word	0x003600a1
 8009968:	fff60080 	.word	0xfff60080
 800996c:	00b2fff6 	.word	0x00b2fff6
 8009970:	0036fff6 	.word	0x0036fff6
 8009974:	fff6fff6 	.word	0xfff6fff6
 8009978:	0084      	.short	0x0084
 800997a:	0025      	movs	r5, r4
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	3542      	adds	r5, #66	@ 0x42
 8009980:	1d11      	adds	r1, r2, #4
 8009982:	6019      	str	r1, [r3, #0]
 8009984:	6813      	ldr	r3, [r2, #0]
 8009986:	702b      	strb	r3, [r5, #0]
 8009988:	2301      	movs	r3, #1
 800998a:	e0a0      	b.n	8009ace <_printf_i+0x1c2>
 800998c:	6818      	ldr	r0, [r3, #0]
 800998e:	6809      	ldr	r1, [r1, #0]
 8009990:	1d02      	adds	r2, r0, #4
 8009992:	060d      	lsls	r5, r1, #24
 8009994:	d50b      	bpl.n	80099ae <_printf_i+0xa2>
 8009996:	6806      	ldr	r6, [r0, #0]
 8009998:	601a      	str	r2, [r3, #0]
 800999a:	2e00      	cmp	r6, #0
 800999c:	da03      	bge.n	80099a6 <_printf_i+0x9a>
 800999e:	232d      	movs	r3, #45	@ 0x2d
 80099a0:	9a03      	ldr	r2, [sp, #12]
 80099a2:	4276      	negs	r6, r6
 80099a4:	7013      	strb	r3, [r2, #0]
 80099a6:	4b5e      	ldr	r3, [pc, #376]	@ (8009b20 <_printf_i+0x214>)
 80099a8:	270a      	movs	r7, #10
 80099aa:	9304      	str	r3, [sp, #16]
 80099ac:	e018      	b.n	80099e0 <_printf_i+0xd4>
 80099ae:	6806      	ldr	r6, [r0, #0]
 80099b0:	601a      	str	r2, [r3, #0]
 80099b2:	0649      	lsls	r1, r1, #25
 80099b4:	d5f1      	bpl.n	800999a <_printf_i+0x8e>
 80099b6:	b236      	sxth	r6, r6
 80099b8:	e7ef      	b.n	800999a <_printf_i+0x8e>
 80099ba:	6808      	ldr	r0, [r1, #0]
 80099bc:	6819      	ldr	r1, [r3, #0]
 80099be:	c940      	ldmia	r1!, {r6}
 80099c0:	0605      	lsls	r5, r0, #24
 80099c2:	d402      	bmi.n	80099ca <_printf_i+0xbe>
 80099c4:	0640      	lsls	r0, r0, #25
 80099c6:	d500      	bpl.n	80099ca <_printf_i+0xbe>
 80099c8:	b2b6      	uxth	r6, r6
 80099ca:	6019      	str	r1, [r3, #0]
 80099cc:	4b54      	ldr	r3, [pc, #336]	@ (8009b20 <_printf_i+0x214>)
 80099ce:	270a      	movs	r7, #10
 80099d0:	9304      	str	r3, [sp, #16]
 80099d2:	2a6f      	cmp	r2, #111	@ 0x6f
 80099d4:	d100      	bne.n	80099d8 <_printf_i+0xcc>
 80099d6:	3f02      	subs	r7, #2
 80099d8:	0023      	movs	r3, r4
 80099da:	2200      	movs	r2, #0
 80099dc:	3343      	adds	r3, #67	@ 0x43
 80099de:	701a      	strb	r2, [r3, #0]
 80099e0:	6863      	ldr	r3, [r4, #4]
 80099e2:	60a3      	str	r3, [r4, #8]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	db03      	blt.n	80099f0 <_printf_i+0xe4>
 80099e8:	2104      	movs	r1, #4
 80099ea:	6822      	ldr	r2, [r4, #0]
 80099ec:	438a      	bics	r2, r1
 80099ee:	6022      	str	r2, [r4, #0]
 80099f0:	2e00      	cmp	r6, #0
 80099f2:	d102      	bne.n	80099fa <_printf_i+0xee>
 80099f4:	9d03      	ldr	r5, [sp, #12]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00c      	beq.n	8009a14 <_printf_i+0x108>
 80099fa:	9d03      	ldr	r5, [sp, #12]
 80099fc:	0030      	movs	r0, r6
 80099fe:	0039      	movs	r1, r7
 8009a00:	f7f6 fc1a 	bl	8000238 <__aeabi_uidivmod>
 8009a04:	9b04      	ldr	r3, [sp, #16]
 8009a06:	3d01      	subs	r5, #1
 8009a08:	5c5b      	ldrb	r3, [r3, r1]
 8009a0a:	702b      	strb	r3, [r5, #0]
 8009a0c:	0033      	movs	r3, r6
 8009a0e:	0006      	movs	r6, r0
 8009a10:	429f      	cmp	r7, r3
 8009a12:	d9f3      	bls.n	80099fc <_printf_i+0xf0>
 8009a14:	2f08      	cmp	r7, #8
 8009a16:	d109      	bne.n	8009a2c <_printf_i+0x120>
 8009a18:	6823      	ldr	r3, [r4, #0]
 8009a1a:	07db      	lsls	r3, r3, #31
 8009a1c:	d506      	bpl.n	8009a2c <_printf_i+0x120>
 8009a1e:	6862      	ldr	r2, [r4, #4]
 8009a20:	6923      	ldr	r3, [r4, #16]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	dc02      	bgt.n	8009a2c <_printf_i+0x120>
 8009a26:	2330      	movs	r3, #48	@ 0x30
 8009a28:	3d01      	subs	r5, #1
 8009a2a:	702b      	strb	r3, [r5, #0]
 8009a2c:	9b03      	ldr	r3, [sp, #12]
 8009a2e:	1b5b      	subs	r3, r3, r5
 8009a30:	6123      	str	r3, [r4, #16]
 8009a32:	9b07      	ldr	r3, [sp, #28]
 8009a34:	0021      	movs	r1, r4
 8009a36:	9300      	str	r3, [sp, #0]
 8009a38:	9805      	ldr	r0, [sp, #20]
 8009a3a:	9b06      	ldr	r3, [sp, #24]
 8009a3c:	aa09      	add	r2, sp, #36	@ 0x24
 8009a3e:	f7ff fef5 	bl	800982c <_printf_common>
 8009a42:	3001      	adds	r0, #1
 8009a44:	d148      	bne.n	8009ad8 <_printf_i+0x1cc>
 8009a46:	2001      	movs	r0, #1
 8009a48:	4240      	negs	r0, r0
 8009a4a:	b00b      	add	sp, #44	@ 0x2c
 8009a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a4e:	2220      	movs	r2, #32
 8009a50:	6809      	ldr	r1, [r1, #0]
 8009a52:	430a      	orrs	r2, r1
 8009a54:	6022      	str	r2, [r4, #0]
 8009a56:	2278      	movs	r2, #120	@ 0x78
 8009a58:	4932      	ldr	r1, [pc, #200]	@ (8009b24 <_printf_i+0x218>)
 8009a5a:	9104      	str	r1, [sp, #16]
 8009a5c:	0021      	movs	r1, r4
 8009a5e:	3145      	adds	r1, #69	@ 0x45
 8009a60:	700a      	strb	r2, [r1, #0]
 8009a62:	6819      	ldr	r1, [r3, #0]
 8009a64:	6822      	ldr	r2, [r4, #0]
 8009a66:	c940      	ldmia	r1!, {r6}
 8009a68:	0610      	lsls	r0, r2, #24
 8009a6a:	d402      	bmi.n	8009a72 <_printf_i+0x166>
 8009a6c:	0650      	lsls	r0, r2, #25
 8009a6e:	d500      	bpl.n	8009a72 <_printf_i+0x166>
 8009a70:	b2b6      	uxth	r6, r6
 8009a72:	6019      	str	r1, [r3, #0]
 8009a74:	07d3      	lsls	r3, r2, #31
 8009a76:	d502      	bpl.n	8009a7e <_printf_i+0x172>
 8009a78:	2320      	movs	r3, #32
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	6023      	str	r3, [r4, #0]
 8009a7e:	2e00      	cmp	r6, #0
 8009a80:	d001      	beq.n	8009a86 <_printf_i+0x17a>
 8009a82:	2710      	movs	r7, #16
 8009a84:	e7a8      	b.n	80099d8 <_printf_i+0xcc>
 8009a86:	2220      	movs	r2, #32
 8009a88:	6823      	ldr	r3, [r4, #0]
 8009a8a:	4393      	bics	r3, r2
 8009a8c:	6023      	str	r3, [r4, #0]
 8009a8e:	e7f8      	b.n	8009a82 <_printf_i+0x176>
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	680d      	ldr	r5, [r1, #0]
 8009a94:	1d10      	adds	r0, r2, #4
 8009a96:	6949      	ldr	r1, [r1, #20]
 8009a98:	6018      	str	r0, [r3, #0]
 8009a9a:	6813      	ldr	r3, [r2, #0]
 8009a9c:	062e      	lsls	r6, r5, #24
 8009a9e:	d501      	bpl.n	8009aa4 <_printf_i+0x198>
 8009aa0:	6019      	str	r1, [r3, #0]
 8009aa2:	e002      	b.n	8009aaa <_printf_i+0x19e>
 8009aa4:	066d      	lsls	r5, r5, #25
 8009aa6:	d5fb      	bpl.n	8009aa0 <_printf_i+0x194>
 8009aa8:	8019      	strh	r1, [r3, #0]
 8009aaa:	2300      	movs	r3, #0
 8009aac:	9d03      	ldr	r5, [sp, #12]
 8009aae:	6123      	str	r3, [r4, #16]
 8009ab0:	e7bf      	b.n	8009a32 <_printf_i+0x126>
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	1d11      	adds	r1, r2, #4
 8009ab6:	6019      	str	r1, [r3, #0]
 8009ab8:	6815      	ldr	r5, [r2, #0]
 8009aba:	2100      	movs	r1, #0
 8009abc:	0028      	movs	r0, r5
 8009abe:	6862      	ldr	r2, [r4, #4]
 8009ac0:	f000 f858 	bl	8009b74 <memchr>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	d001      	beq.n	8009acc <_printf_i+0x1c0>
 8009ac8:	1b40      	subs	r0, r0, r5
 8009aca:	6060      	str	r0, [r4, #4]
 8009acc:	6863      	ldr	r3, [r4, #4]
 8009ace:	6123      	str	r3, [r4, #16]
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	9a03      	ldr	r2, [sp, #12]
 8009ad4:	7013      	strb	r3, [r2, #0]
 8009ad6:	e7ac      	b.n	8009a32 <_printf_i+0x126>
 8009ad8:	002a      	movs	r2, r5
 8009ada:	6923      	ldr	r3, [r4, #16]
 8009adc:	9906      	ldr	r1, [sp, #24]
 8009ade:	9805      	ldr	r0, [sp, #20]
 8009ae0:	9d07      	ldr	r5, [sp, #28]
 8009ae2:	47a8      	blx	r5
 8009ae4:	3001      	adds	r0, #1
 8009ae6:	d0ae      	beq.n	8009a46 <_printf_i+0x13a>
 8009ae8:	6823      	ldr	r3, [r4, #0]
 8009aea:	079b      	lsls	r3, r3, #30
 8009aec:	d415      	bmi.n	8009b1a <_printf_i+0x20e>
 8009aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009af0:	68e0      	ldr	r0, [r4, #12]
 8009af2:	4298      	cmp	r0, r3
 8009af4:	daa9      	bge.n	8009a4a <_printf_i+0x13e>
 8009af6:	0018      	movs	r0, r3
 8009af8:	e7a7      	b.n	8009a4a <_printf_i+0x13e>
 8009afa:	0022      	movs	r2, r4
 8009afc:	2301      	movs	r3, #1
 8009afe:	9906      	ldr	r1, [sp, #24]
 8009b00:	9805      	ldr	r0, [sp, #20]
 8009b02:	9e07      	ldr	r6, [sp, #28]
 8009b04:	3219      	adds	r2, #25
 8009b06:	47b0      	blx	r6
 8009b08:	3001      	adds	r0, #1
 8009b0a:	d09c      	beq.n	8009a46 <_printf_i+0x13a>
 8009b0c:	3501      	adds	r5, #1
 8009b0e:	68e3      	ldr	r3, [r4, #12]
 8009b10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b12:	1a9b      	subs	r3, r3, r2
 8009b14:	42ab      	cmp	r3, r5
 8009b16:	dcf0      	bgt.n	8009afa <_printf_i+0x1ee>
 8009b18:	e7e9      	b.n	8009aee <_printf_i+0x1e2>
 8009b1a:	2500      	movs	r5, #0
 8009b1c:	e7f7      	b.n	8009b0e <_printf_i+0x202>
 8009b1e:	46c0      	nop			@ (mov r8, r8)
 8009b20:	0800a566 	.word	0x0800a566
 8009b24:	0800a577 	.word	0x0800a577

08009b28 <memmove>:
 8009b28:	b510      	push	{r4, lr}
 8009b2a:	4288      	cmp	r0, r1
 8009b2c:	d806      	bhi.n	8009b3c <memmove+0x14>
 8009b2e:	2300      	movs	r3, #0
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d008      	beq.n	8009b46 <memmove+0x1e>
 8009b34:	5ccc      	ldrb	r4, [r1, r3]
 8009b36:	54c4      	strb	r4, [r0, r3]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	e7f9      	b.n	8009b30 <memmove+0x8>
 8009b3c:	188b      	adds	r3, r1, r2
 8009b3e:	4298      	cmp	r0, r3
 8009b40:	d2f5      	bcs.n	8009b2e <memmove+0x6>
 8009b42:	3a01      	subs	r2, #1
 8009b44:	d200      	bcs.n	8009b48 <memmove+0x20>
 8009b46:	bd10      	pop	{r4, pc}
 8009b48:	5c8b      	ldrb	r3, [r1, r2]
 8009b4a:	5483      	strb	r3, [r0, r2]
 8009b4c:	e7f9      	b.n	8009b42 <memmove+0x1a>
	...

08009b50 <_sbrk_r>:
 8009b50:	2300      	movs	r3, #0
 8009b52:	b570      	push	{r4, r5, r6, lr}
 8009b54:	4d06      	ldr	r5, [pc, #24]	@ (8009b70 <_sbrk_r+0x20>)
 8009b56:	0004      	movs	r4, r0
 8009b58:	0008      	movs	r0, r1
 8009b5a:	602b      	str	r3, [r5, #0]
 8009b5c:	f7fa f85c 	bl	8003c18 <_sbrk>
 8009b60:	1c43      	adds	r3, r0, #1
 8009b62:	d103      	bne.n	8009b6c <_sbrk_r+0x1c>
 8009b64:	682b      	ldr	r3, [r5, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d000      	beq.n	8009b6c <_sbrk_r+0x1c>
 8009b6a:	6023      	str	r3, [r4, #0]
 8009b6c:	bd70      	pop	{r4, r5, r6, pc}
 8009b6e:	46c0      	nop			@ (mov r8, r8)
 8009b70:	20000a5c 	.word	0x20000a5c

08009b74 <memchr>:
 8009b74:	b2c9      	uxtb	r1, r1
 8009b76:	1882      	adds	r2, r0, r2
 8009b78:	4290      	cmp	r0, r2
 8009b7a:	d101      	bne.n	8009b80 <memchr+0xc>
 8009b7c:	2000      	movs	r0, #0
 8009b7e:	4770      	bx	lr
 8009b80:	7803      	ldrb	r3, [r0, #0]
 8009b82:	428b      	cmp	r3, r1
 8009b84:	d0fb      	beq.n	8009b7e <memchr+0xa>
 8009b86:	3001      	adds	r0, #1
 8009b88:	e7f6      	b.n	8009b78 <memchr+0x4>

08009b8a <_realloc_r>:
 8009b8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b8c:	0006      	movs	r6, r0
 8009b8e:	000c      	movs	r4, r1
 8009b90:	0015      	movs	r5, r2
 8009b92:	2900      	cmp	r1, #0
 8009b94:	d105      	bne.n	8009ba2 <_realloc_r+0x18>
 8009b96:	0011      	movs	r1, r2
 8009b98:	f7ff fc5a 	bl	8009450 <_malloc_r>
 8009b9c:	0004      	movs	r4, r0
 8009b9e:	0020      	movs	r0, r4
 8009ba0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009ba2:	2a00      	cmp	r2, #0
 8009ba4:	d103      	bne.n	8009bae <_realloc_r+0x24>
 8009ba6:	f7ff fbe7 	bl	8009378 <_free_r>
 8009baa:	2400      	movs	r4, #0
 8009bac:	e7f7      	b.n	8009b9e <_realloc_r+0x14>
 8009bae:	f000 f81b 	bl	8009be8 <_malloc_usable_size_r>
 8009bb2:	0007      	movs	r7, r0
 8009bb4:	4285      	cmp	r5, r0
 8009bb6:	d802      	bhi.n	8009bbe <_realloc_r+0x34>
 8009bb8:	0843      	lsrs	r3, r0, #1
 8009bba:	42ab      	cmp	r3, r5
 8009bbc:	d3ef      	bcc.n	8009b9e <_realloc_r+0x14>
 8009bbe:	0029      	movs	r1, r5
 8009bc0:	0030      	movs	r0, r6
 8009bc2:	f7ff fc45 	bl	8009450 <_malloc_r>
 8009bc6:	9001      	str	r0, [sp, #4]
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	d0ee      	beq.n	8009baa <_realloc_r+0x20>
 8009bcc:	002a      	movs	r2, r5
 8009bce:	42bd      	cmp	r5, r7
 8009bd0:	d900      	bls.n	8009bd4 <_realloc_r+0x4a>
 8009bd2:	003a      	movs	r2, r7
 8009bd4:	0021      	movs	r1, r4
 8009bd6:	9801      	ldr	r0, [sp, #4]
 8009bd8:	f7ff fbc4 	bl	8009364 <memcpy>
 8009bdc:	0021      	movs	r1, r4
 8009bde:	0030      	movs	r0, r6
 8009be0:	f7ff fbca 	bl	8009378 <_free_r>
 8009be4:	9c01      	ldr	r4, [sp, #4]
 8009be6:	e7da      	b.n	8009b9e <_realloc_r+0x14>

08009be8 <_malloc_usable_size_r>:
 8009be8:	1f0b      	subs	r3, r1, #4
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	1f18      	subs	r0, r3, #4
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	da01      	bge.n	8009bf6 <_malloc_usable_size_r+0xe>
 8009bf2:	580b      	ldr	r3, [r1, r0]
 8009bf4:	18c0      	adds	r0, r0, r3
 8009bf6:	4770      	bx	lr

08009bf8 <_init>:
 8009bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bfa:	46c0      	nop			@ (mov r8, r8)
 8009bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bfe:	bc08      	pop	{r3}
 8009c00:	469e      	mov	lr, r3
 8009c02:	4770      	bx	lr

08009c04 <_fini>:
 8009c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c06:	46c0      	nop			@ (mov r8, r8)
 8009c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c0a:	bc08      	pop	{r3}
 8009c0c:	469e      	mov	lr, r3
 8009c0e:	4770      	bx	lr
