
ynotag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094fc  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000820  080095b8  080095b8  0000a5b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dd8  08009dd8  0000bee0  2**0
                  CONTENTS
  4 .ARM          00000008  08009dd8  08009dd8  0000add8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009de0  08009de0  0000bee0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009de0  08009de0  0000ade0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009de4  08009de4  0000ade4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000ee0  20000000  08009de8  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007cc  20000ee0  0800acc8  0000bee0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200016ac  0800acc8  0000c6ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000bee0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a677  00000000  00000000  0000bf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000327f  00000000  00000000  0002657f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c0  00000000  00000000  00029800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012d7  00000000  00000000  0002afc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f3b4  00000000  00000000  0002c297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dbda  00000000  00000000  0004b64b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9f91  00000000  00000000  00069225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001331b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060ac  00000000  00000000  001331fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  001392a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000ee0 	.word	0x20000ee0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080095a0 	.word	0x080095a0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000ee4 	.word	0x20000ee4
 8000100:	080095a0 	.word	0x080095a0

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_cdrcmple>:
 8000414:	4684      	mov	ip, r0
 8000416:	0010      	movs	r0, r2
 8000418:	4662      	mov	r2, ip
 800041a:	468c      	mov	ip, r1
 800041c:	0019      	movs	r1, r3
 800041e:	4663      	mov	r3, ip
 8000420:	e000      	b.n	8000424 <__aeabi_cdcmpeq>
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdcmpeq>:
 8000424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000426:	f000 ffed 	bl	8001404 <__ledf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	d401      	bmi.n	8000432 <__aeabi_cdcmpeq+0xe>
 800042e:	2100      	movs	r1, #0
 8000430:	42c8      	cmn	r0, r1
 8000432:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000434 <__aeabi_dcmpeq>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 ff2d 	bl	8001294 <__eqdf2>
 800043a:	4240      	negs	r0, r0
 800043c:	3001      	adds	r0, #1
 800043e:	bd10      	pop	{r4, pc}

08000440 <__aeabi_dcmplt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 ffdf 	bl	8001404 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	db01      	blt.n	800044e <__aeabi_dcmplt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_dcmple>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 ffd5 	bl	8001404 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dd01      	ble.n	8000462 <__aeabi_dcmple+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmpgt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 ff57 	bl	800131c <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dc01      	bgt.n	8000476 <__aeabi_dcmpgt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmpge>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ff4d 	bl	800131c <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	da01      	bge.n	800048a <__aeabi_dcmpge+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_uldivmod>:
 8000490:	2b00      	cmp	r3, #0
 8000492:	d111      	bne.n	80004b8 <__aeabi_uldivmod+0x28>
 8000494:	2a00      	cmp	r2, #0
 8000496:	d10f      	bne.n	80004b8 <__aeabi_uldivmod+0x28>
 8000498:	2900      	cmp	r1, #0
 800049a:	d100      	bne.n	800049e <__aeabi_uldivmod+0xe>
 800049c:	2800      	cmp	r0, #0
 800049e:	d002      	beq.n	80004a6 <__aeabi_uldivmod+0x16>
 80004a0:	2100      	movs	r1, #0
 80004a2:	43c9      	mvns	r1, r1
 80004a4:	0008      	movs	r0, r1
 80004a6:	b407      	push	{r0, r1, r2}
 80004a8:	4802      	ldr	r0, [pc, #8]	@ (80004b4 <__aeabi_uldivmod+0x24>)
 80004aa:	a102      	add	r1, pc, #8	@ (adr r1, 80004b4 <__aeabi_uldivmod+0x24>)
 80004ac:	1840      	adds	r0, r0, r1
 80004ae:	9002      	str	r0, [sp, #8]
 80004b0:	bd03      	pop	{r0, r1, pc}
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	ffffff5d 	.word	0xffffff5d
 80004b8:	b403      	push	{r0, r1}
 80004ba:	4668      	mov	r0, sp
 80004bc:	b501      	push	{r0, lr}
 80004be:	9802      	ldr	r0, [sp, #8]
 80004c0:	f000 f81e 	bl	8000500 <__udivmoddi4>
 80004c4:	9b01      	ldr	r3, [sp, #4]
 80004c6:	469e      	mov	lr, r3
 80004c8:	b002      	add	sp, #8
 80004ca:	bc0c      	pop	{r2, r3}
 80004cc:	4770      	bx	lr
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_f2uiz>:
 80004d0:	219e      	movs	r1, #158	@ 0x9e
 80004d2:	b510      	push	{r4, lr}
 80004d4:	05c9      	lsls	r1, r1, #23
 80004d6:	1c04      	adds	r4, r0, #0
 80004d8:	f001 fc28 	bl	8001d2c <__aeabi_fcmpge>
 80004dc:	2800      	cmp	r0, #0
 80004de:	d103      	bne.n	80004e8 <__aeabi_f2uiz+0x18>
 80004e0:	1c20      	adds	r0, r4, #0
 80004e2:	f000 fb9d 	bl	8000c20 <__aeabi_f2iz>
 80004e6:	bd10      	pop	{r4, pc}
 80004e8:	219e      	movs	r1, #158	@ 0x9e
 80004ea:	1c20      	adds	r0, r4, #0
 80004ec:	05c9      	lsls	r1, r1, #23
 80004ee:	f000 f9f3 	bl	80008d8 <__aeabi_fsub>
 80004f2:	f000 fb95 	bl	8000c20 <__aeabi_f2iz>
 80004f6:	2380      	movs	r3, #128	@ 0x80
 80004f8:	061b      	lsls	r3, r3, #24
 80004fa:	469c      	mov	ip, r3
 80004fc:	4460      	add	r0, ip
 80004fe:	e7f2      	b.n	80004e6 <__aeabi_f2uiz+0x16>

08000500 <__udivmoddi4>:
 8000500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000502:	4657      	mov	r7, sl
 8000504:	464e      	mov	r6, r9
 8000506:	4645      	mov	r5, r8
 8000508:	46de      	mov	lr, fp
 800050a:	b5e0      	push	{r5, r6, r7, lr}
 800050c:	0004      	movs	r4, r0
 800050e:	000d      	movs	r5, r1
 8000510:	4692      	mov	sl, r2
 8000512:	4699      	mov	r9, r3
 8000514:	b083      	sub	sp, #12
 8000516:	428b      	cmp	r3, r1
 8000518:	d830      	bhi.n	800057c <__udivmoddi4+0x7c>
 800051a:	d02d      	beq.n	8000578 <__udivmoddi4+0x78>
 800051c:	4649      	mov	r1, r9
 800051e:	4650      	mov	r0, sl
 8000520:	f001 fc2c 	bl	8001d7c <__clzdi2>
 8000524:	0029      	movs	r1, r5
 8000526:	0006      	movs	r6, r0
 8000528:	0020      	movs	r0, r4
 800052a:	f001 fc27 	bl	8001d7c <__clzdi2>
 800052e:	1a33      	subs	r3, r6, r0
 8000530:	4698      	mov	r8, r3
 8000532:	3b20      	subs	r3, #32
 8000534:	d434      	bmi.n	80005a0 <__udivmoddi4+0xa0>
 8000536:	469b      	mov	fp, r3
 8000538:	4653      	mov	r3, sl
 800053a:	465a      	mov	r2, fp
 800053c:	4093      	lsls	r3, r2
 800053e:	4642      	mov	r2, r8
 8000540:	001f      	movs	r7, r3
 8000542:	4653      	mov	r3, sl
 8000544:	4093      	lsls	r3, r2
 8000546:	001e      	movs	r6, r3
 8000548:	42af      	cmp	r7, r5
 800054a:	d83b      	bhi.n	80005c4 <__udivmoddi4+0xc4>
 800054c:	42af      	cmp	r7, r5
 800054e:	d100      	bne.n	8000552 <__udivmoddi4+0x52>
 8000550:	e079      	b.n	8000646 <__udivmoddi4+0x146>
 8000552:	465b      	mov	r3, fp
 8000554:	1ba4      	subs	r4, r4, r6
 8000556:	41bd      	sbcs	r5, r7
 8000558:	2b00      	cmp	r3, #0
 800055a:	da00      	bge.n	800055e <__udivmoddi4+0x5e>
 800055c:	e076      	b.n	800064c <__udivmoddi4+0x14c>
 800055e:	2200      	movs	r2, #0
 8000560:	2300      	movs	r3, #0
 8000562:	9200      	str	r2, [sp, #0]
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	2301      	movs	r3, #1
 8000568:	465a      	mov	r2, fp
 800056a:	4093      	lsls	r3, r2
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	2301      	movs	r3, #1
 8000570:	4642      	mov	r2, r8
 8000572:	4093      	lsls	r3, r2
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	e029      	b.n	80005cc <__udivmoddi4+0xcc>
 8000578:	4282      	cmp	r2, r0
 800057a:	d9cf      	bls.n	800051c <__udivmoddi4+0x1c>
 800057c:	2200      	movs	r2, #0
 800057e:	2300      	movs	r3, #0
 8000580:	9200      	str	r2, [sp, #0]
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <__udivmoddi4+0x8e>
 800058a:	601c      	str	r4, [r3, #0]
 800058c:	605d      	str	r5, [r3, #4]
 800058e:	9800      	ldr	r0, [sp, #0]
 8000590:	9901      	ldr	r1, [sp, #4]
 8000592:	b003      	add	sp, #12
 8000594:	bcf0      	pop	{r4, r5, r6, r7}
 8000596:	46bb      	mov	fp, r7
 8000598:	46b2      	mov	sl, r6
 800059a:	46a9      	mov	r9, r5
 800059c:	46a0      	mov	r8, r4
 800059e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a0:	4642      	mov	r2, r8
 80005a2:	469b      	mov	fp, r3
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	4652      	mov	r2, sl
 80005aa:	40da      	lsrs	r2, r3
 80005ac:	4641      	mov	r1, r8
 80005ae:	0013      	movs	r3, r2
 80005b0:	464a      	mov	r2, r9
 80005b2:	408a      	lsls	r2, r1
 80005b4:	0017      	movs	r7, r2
 80005b6:	4642      	mov	r2, r8
 80005b8:	431f      	orrs	r7, r3
 80005ba:	4653      	mov	r3, sl
 80005bc:	4093      	lsls	r3, r2
 80005be:	001e      	movs	r6, r3
 80005c0:	42af      	cmp	r7, r5
 80005c2:	d9c3      	bls.n	800054c <__udivmoddi4+0x4c>
 80005c4:	2200      	movs	r2, #0
 80005c6:	2300      	movs	r3, #0
 80005c8:	9200      	str	r2, [sp, #0]
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	4643      	mov	r3, r8
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d0d8      	beq.n	8000584 <__udivmoddi4+0x84>
 80005d2:	07fb      	lsls	r3, r7, #31
 80005d4:	0872      	lsrs	r2, r6, #1
 80005d6:	431a      	orrs	r2, r3
 80005d8:	4646      	mov	r6, r8
 80005da:	087b      	lsrs	r3, r7, #1
 80005dc:	e00e      	b.n	80005fc <__udivmoddi4+0xfc>
 80005de:	42ab      	cmp	r3, r5
 80005e0:	d101      	bne.n	80005e6 <__udivmoddi4+0xe6>
 80005e2:	42a2      	cmp	r2, r4
 80005e4:	d80c      	bhi.n	8000600 <__udivmoddi4+0x100>
 80005e6:	1aa4      	subs	r4, r4, r2
 80005e8:	419d      	sbcs	r5, r3
 80005ea:	2001      	movs	r0, #1
 80005ec:	1924      	adds	r4, r4, r4
 80005ee:	416d      	adcs	r5, r5
 80005f0:	2100      	movs	r1, #0
 80005f2:	3e01      	subs	r6, #1
 80005f4:	1824      	adds	r4, r4, r0
 80005f6:	414d      	adcs	r5, r1
 80005f8:	2e00      	cmp	r6, #0
 80005fa:	d006      	beq.n	800060a <__udivmoddi4+0x10a>
 80005fc:	42ab      	cmp	r3, r5
 80005fe:	d9ee      	bls.n	80005de <__udivmoddi4+0xde>
 8000600:	3e01      	subs	r6, #1
 8000602:	1924      	adds	r4, r4, r4
 8000604:	416d      	adcs	r5, r5
 8000606:	2e00      	cmp	r6, #0
 8000608:	d1f8      	bne.n	80005fc <__udivmoddi4+0xfc>
 800060a:	9800      	ldr	r0, [sp, #0]
 800060c:	9901      	ldr	r1, [sp, #4]
 800060e:	465b      	mov	r3, fp
 8000610:	1900      	adds	r0, r0, r4
 8000612:	4169      	adcs	r1, r5
 8000614:	2b00      	cmp	r3, #0
 8000616:	db24      	blt.n	8000662 <__udivmoddi4+0x162>
 8000618:	002b      	movs	r3, r5
 800061a:	465a      	mov	r2, fp
 800061c:	4644      	mov	r4, r8
 800061e:	40d3      	lsrs	r3, r2
 8000620:	002a      	movs	r2, r5
 8000622:	40e2      	lsrs	r2, r4
 8000624:	001c      	movs	r4, r3
 8000626:	465b      	mov	r3, fp
 8000628:	0015      	movs	r5, r2
 800062a:	2b00      	cmp	r3, #0
 800062c:	db2a      	blt.n	8000684 <__udivmoddi4+0x184>
 800062e:	0026      	movs	r6, r4
 8000630:	409e      	lsls	r6, r3
 8000632:	0033      	movs	r3, r6
 8000634:	0026      	movs	r6, r4
 8000636:	4647      	mov	r7, r8
 8000638:	40be      	lsls	r6, r7
 800063a:	0032      	movs	r2, r6
 800063c:	1a80      	subs	r0, r0, r2
 800063e:	4199      	sbcs	r1, r3
 8000640:	9000      	str	r0, [sp, #0]
 8000642:	9101      	str	r1, [sp, #4]
 8000644:	e79e      	b.n	8000584 <__udivmoddi4+0x84>
 8000646:	42a3      	cmp	r3, r4
 8000648:	d8bc      	bhi.n	80005c4 <__udivmoddi4+0xc4>
 800064a:	e782      	b.n	8000552 <__udivmoddi4+0x52>
 800064c:	4642      	mov	r2, r8
 800064e:	2320      	movs	r3, #32
 8000650:	2100      	movs	r1, #0
 8000652:	1a9b      	subs	r3, r3, r2
 8000654:	2200      	movs	r2, #0
 8000656:	9100      	str	r1, [sp, #0]
 8000658:	9201      	str	r2, [sp, #4]
 800065a:	2201      	movs	r2, #1
 800065c:	40da      	lsrs	r2, r3
 800065e:	9201      	str	r2, [sp, #4]
 8000660:	e785      	b.n	800056e <__udivmoddi4+0x6e>
 8000662:	4642      	mov	r2, r8
 8000664:	2320      	movs	r3, #32
 8000666:	1a9b      	subs	r3, r3, r2
 8000668:	002a      	movs	r2, r5
 800066a:	4646      	mov	r6, r8
 800066c:	409a      	lsls	r2, r3
 800066e:	0023      	movs	r3, r4
 8000670:	40f3      	lsrs	r3, r6
 8000672:	4644      	mov	r4, r8
 8000674:	4313      	orrs	r3, r2
 8000676:	002a      	movs	r2, r5
 8000678:	40e2      	lsrs	r2, r4
 800067a:	001c      	movs	r4, r3
 800067c:	465b      	mov	r3, fp
 800067e:	0015      	movs	r5, r2
 8000680:	2b00      	cmp	r3, #0
 8000682:	dad4      	bge.n	800062e <__udivmoddi4+0x12e>
 8000684:	4642      	mov	r2, r8
 8000686:	002f      	movs	r7, r5
 8000688:	2320      	movs	r3, #32
 800068a:	0026      	movs	r6, r4
 800068c:	4097      	lsls	r7, r2
 800068e:	1a9b      	subs	r3, r3, r2
 8000690:	40de      	lsrs	r6, r3
 8000692:	003b      	movs	r3, r7
 8000694:	4333      	orrs	r3, r6
 8000696:	e7cd      	b.n	8000634 <__udivmoddi4+0x134>

08000698 <__aeabi_fdiv>:
 8000698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069a:	464f      	mov	r7, r9
 800069c:	4646      	mov	r6, r8
 800069e:	46d6      	mov	lr, sl
 80006a0:	0244      	lsls	r4, r0, #9
 80006a2:	b5c0      	push	{r6, r7, lr}
 80006a4:	0047      	lsls	r7, r0, #1
 80006a6:	1c0e      	adds	r6, r1, #0
 80006a8:	0a64      	lsrs	r4, r4, #9
 80006aa:	0e3f      	lsrs	r7, r7, #24
 80006ac:	0fc5      	lsrs	r5, r0, #31
 80006ae:	2f00      	cmp	r7, #0
 80006b0:	d03c      	beq.n	800072c <__aeabi_fdiv+0x94>
 80006b2:	2fff      	cmp	r7, #255	@ 0xff
 80006b4:	d042      	beq.n	800073c <__aeabi_fdiv+0xa4>
 80006b6:	2300      	movs	r3, #0
 80006b8:	2280      	movs	r2, #128	@ 0x80
 80006ba:	4699      	mov	r9, r3
 80006bc:	469a      	mov	sl, r3
 80006be:	00e4      	lsls	r4, r4, #3
 80006c0:	04d2      	lsls	r2, r2, #19
 80006c2:	4314      	orrs	r4, r2
 80006c4:	3f7f      	subs	r7, #127	@ 0x7f
 80006c6:	0273      	lsls	r3, r6, #9
 80006c8:	0a5b      	lsrs	r3, r3, #9
 80006ca:	4698      	mov	r8, r3
 80006cc:	0073      	lsls	r3, r6, #1
 80006ce:	0e1b      	lsrs	r3, r3, #24
 80006d0:	0ff6      	lsrs	r6, r6, #31
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d01b      	beq.n	800070e <__aeabi_fdiv+0x76>
 80006d6:	2bff      	cmp	r3, #255	@ 0xff
 80006d8:	d013      	beq.n	8000702 <__aeabi_fdiv+0x6a>
 80006da:	4642      	mov	r2, r8
 80006dc:	2180      	movs	r1, #128	@ 0x80
 80006de:	00d2      	lsls	r2, r2, #3
 80006e0:	04c9      	lsls	r1, r1, #19
 80006e2:	4311      	orrs	r1, r2
 80006e4:	4688      	mov	r8, r1
 80006e6:	2000      	movs	r0, #0
 80006e8:	3b7f      	subs	r3, #127	@ 0x7f
 80006ea:	0029      	movs	r1, r5
 80006ec:	1aff      	subs	r7, r7, r3
 80006ee:	464b      	mov	r3, r9
 80006f0:	4071      	eors	r1, r6
 80006f2:	b2c9      	uxtb	r1, r1
 80006f4:	2b0f      	cmp	r3, #15
 80006f6:	d900      	bls.n	80006fa <__aeabi_fdiv+0x62>
 80006f8:	e0b5      	b.n	8000866 <__aeabi_fdiv+0x1ce>
 80006fa:	4a74      	ldr	r2, [pc, #464]	@ (80008cc <__aeabi_fdiv+0x234>)
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	58d3      	ldr	r3, [r2, r3]
 8000700:	469f      	mov	pc, r3
 8000702:	4643      	mov	r3, r8
 8000704:	2b00      	cmp	r3, #0
 8000706:	d13f      	bne.n	8000788 <__aeabi_fdiv+0xf0>
 8000708:	3fff      	subs	r7, #255	@ 0xff
 800070a:	3302      	adds	r3, #2
 800070c:	e003      	b.n	8000716 <__aeabi_fdiv+0x7e>
 800070e:	4643      	mov	r3, r8
 8000710:	2b00      	cmp	r3, #0
 8000712:	d12d      	bne.n	8000770 <__aeabi_fdiv+0xd8>
 8000714:	2301      	movs	r3, #1
 8000716:	0029      	movs	r1, r5
 8000718:	464a      	mov	r2, r9
 800071a:	4071      	eors	r1, r6
 800071c:	b2c9      	uxtb	r1, r1
 800071e:	431a      	orrs	r2, r3
 8000720:	2a0e      	cmp	r2, #14
 8000722:	d838      	bhi.n	8000796 <__aeabi_fdiv+0xfe>
 8000724:	486a      	ldr	r0, [pc, #424]	@ (80008d0 <__aeabi_fdiv+0x238>)
 8000726:	0092      	lsls	r2, r2, #2
 8000728:	5882      	ldr	r2, [r0, r2]
 800072a:	4697      	mov	pc, r2
 800072c:	2c00      	cmp	r4, #0
 800072e:	d113      	bne.n	8000758 <__aeabi_fdiv+0xc0>
 8000730:	2304      	movs	r3, #4
 8000732:	4699      	mov	r9, r3
 8000734:	3b03      	subs	r3, #3
 8000736:	2700      	movs	r7, #0
 8000738:	469a      	mov	sl, r3
 800073a:	e7c4      	b.n	80006c6 <__aeabi_fdiv+0x2e>
 800073c:	2c00      	cmp	r4, #0
 800073e:	d105      	bne.n	800074c <__aeabi_fdiv+0xb4>
 8000740:	2308      	movs	r3, #8
 8000742:	4699      	mov	r9, r3
 8000744:	3b06      	subs	r3, #6
 8000746:	27ff      	movs	r7, #255	@ 0xff
 8000748:	469a      	mov	sl, r3
 800074a:	e7bc      	b.n	80006c6 <__aeabi_fdiv+0x2e>
 800074c:	230c      	movs	r3, #12
 800074e:	4699      	mov	r9, r3
 8000750:	3b09      	subs	r3, #9
 8000752:	27ff      	movs	r7, #255	@ 0xff
 8000754:	469a      	mov	sl, r3
 8000756:	e7b6      	b.n	80006c6 <__aeabi_fdiv+0x2e>
 8000758:	0020      	movs	r0, r4
 800075a:	f001 faf1 	bl	8001d40 <__clzsi2>
 800075e:	2776      	movs	r7, #118	@ 0x76
 8000760:	1f43      	subs	r3, r0, #5
 8000762:	409c      	lsls	r4, r3
 8000764:	2300      	movs	r3, #0
 8000766:	427f      	negs	r7, r7
 8000768:	4699      	mov	r9, r3
 800076a:	469a      	mov	sl, r3
 800076c:	1a3f      	subs	r7, r7, r0
 800076e:	e7aa      	b.n	80006c6 <__aeabi_fdiv+0x2e>
 8000770:	4640      	mov	r0, r8
 8000772:	f001 fae5 	bl	8001d40 <__clzsi2>
 8000776:	4642      	mov	r2, r8
 8000778:	1f43      	subs	r3, r0, #5
 800077a:	409a      	lsls	r2, r3
 800077c:	2376      	movs	r3, #118	@ 0x76
 800077e:	425b      	negs	r3, r3
 8000780:	1a1b      	subs	r3, r3, r0
 8000782:	4690      	mov	r8, r2
 8000784:	2000      	movs	r0, #0
 8000786:	e7b0      	b.n	80006ea <__aeabi_fdiv+0x52>
 8000788:	2303      	movs	r3, #3
 800078a:	464a      	mov	r2, r9
 800078c:	431a      	orrs	r2, r3
 800078e:	4691      	mov	r9, r2
 8000790:	2003      	movs	r0, #3
 8000792:	33fc      	adds	r3, #252	@ 0xfc
 8000794:	e7a9      	b.n	80006ea <__aeabi_fdiv+0x52>
 8000796:	000d      	movs	r5, r1
 8000798:	20ff      	movs	r0, #255	@ 0xff
 800079a:	2200      	movs	r2, #0
 800079c:	05c0      	lsls	r0, r0, #23
 800079e:	07ed      	lsls	r5, r5, #31
 80007a0:	4310      	orrs	r0, r2
 80007a2:	4328      	orrs	r0, r5
 80007a4:	bce0      	pop	{r5, r6, r7}
 80007a6:	46ba      	mov	sl, r7
 80007a8:	46b1      	mov	r9, r6
 80007aa:	46a8      	mov	r8, r5
 80007ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ae:	000d      	movs	r5, r1
 80007b0:	2000      	movs	r0, #0
 80007b2:	2200      	movs	r2, #0
 80007b4:	e7f2      	b.n	800079c <__aeabi_fdiv+0x104>
 80007b6:	4653      	mov	r3, sl
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d0ed      	beq.n	8000798 <__aeabi_fdiv+0x100>
 80007bc:	2b03      	cmp	r3, #3
 80007be:	d033      	beq.n	8000828 <__aeabi_fdiv+0x190>
 80007c0:	46a0      	mov	r8, r4
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d105      	bne.n	80007d2 <__aeabi_fdiv+0x13a>
 80007c6:	2000      	movs	r0, #0
 80007c8:	2200      	movs	r2, #0
 80007ca:	e7e7      	b.n	800079c <__aeabi_fdiv+0x104>
 80007cc:	0035      	movs	r5, r6
 80007ce:	2803      	cmp	r0, #3
 80007d0:	d07a      	beq.n	80008c8 <__aeabi_fdiv+0x230>
 80007d2:	003b      	movs	r3, r7
 80007d4:	337f      	adds	r3, #127	@ 0x7f
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	dd2d      	ble.n	8000836 <__aeabi_fdiv+0x19e>
 80007da:	4642      	mov	r2, r8
 80007dc:	0752      	lsls	r2, r2, #29
 80007de:	d007      	beq.n	80007f0 <__aeabi_fdiv+0x158>
 80007e0:	220f      	movs	r2, #15
 80007e2:	4641      	mov	r1, r8
 80007e4:	400a      	ands	r2, r1
 80007e6:	2a04      	cmp	r2, #4
 80007e8:	d002      	beq.n	80007f0 <__aeabi_fdiv+0x158>
 80007ea:	2204      	movs	r2, #4
 80007ec:	4694      	mov	ip, r2
 80007ee:	44e0      	add	r8, ip
 80007f0:	4642      	mov	r2, r8
 80007f2:	0112      	lsls	r2, r2, #4
 80007f4:	d505      	bpl.n	8000802 <__aeabi_fdiv+0x16a>
 80007f6:	4642      	mov	r2, r8
 80007f8:	4b36      	ldr	r3, [pc, #216]	@ (80008d4 <__aeabi_fdiv+0x23c>)
 80007fa:	401a      	ands	r2, r3
 80007fc:	003b      	movs	r3, r7
 80007fe:	4690      	mov	r8, r2
 8000800:	3380      	adds	r3, #128	@ 0x80
 8000802:	2bfe      	cmp	r3, #254	@ 0xfe
 8000804:	dcc8      	bgt.n	8000798 <__aeabi_fdiv+0x100>
 8000806:	4642      	mov	r2, r8
 8000808:	0192      	lsls	r2, r2, #6
 800080a:	0a52      	lsrs	r2, r2, #9
 800080c:	b2d8      	uxtb	r0, r3
 800080e:	e7c5      	b.n	800079c <__aeabi_fdiv+0x104>
 8000810:	2280      	movs	r2, #128	@ 0x80
 8000812:	2500      	movs	r5, #0
 8000814:	20ff      	movs	r0, #255	@ 0xff
 8000816:	03d2      	lsls	r2, r2, #15
 8000818:	e7c0      	b.n	800079c <__aeabi_fdiv+0x104>
 800081a:	2280      	movs	r2, #128	@ 0x80
 800081c:	03d2      	lsls	r2, r2, #15
 800081e:	4214      	tst	r4, r2
 8000820:	d002      	beq.n	8000828 <__aeabi_fdiv+0x190>
 8000822:	4643      	mov	r3, r8
 8000824:	4213      	tst	r3, r2
 8000826:	d049      	beq.n	80008bc <__aeabi_fdiv+0x224>
 8000828:	2280      	movs	r2, #128	@ 0x80
 800082a:	03d2      	lsls	r2, r2, #15
 800082c:	4322      	orrs	r2, r4
 800082e:	0252      	lsls	r2, r2, #9
 8000830:	20ff      	movs	r0, #255	@ 0xff
 8000832:	0a52      	lsrs	r2, r2, #9
 8000834:	e7b2      	b.n	800079c <__aeabi_fdiv+0x104>
 8000836:	2201      	movs	r2, #1
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	2b1b      	cmp	r3, #27
 800083c:	dcc3      	bgt.n	80007c6 <__aeabi_fdiv+0x12e>
 800083e:	4642      	mov	r2, r8
 8000840:	40da      	lsrs	r2, r3
 8000842:	4643      	mov	r3, r8
 8000844:	379e      	adds	r7, #158	@ 0x9e
 8000846:	40bb      	lsls	r3, r7
 8000848:	1e59      	subs	r1, r3, #1
 800084a:	418b      	sbcs	r3, r1
 800084c:	431a      	orrs	r2, r3
 800084e:	0753      	lsls	r3, r2, #29
 8000850:	d004      	beq.n	800085c <__aeabi_fdiv+0x1c4>
 8000852:	230f      	movs	r3, #15
 8000854:	4013      	ands	r3, r2
 8000856:	2b04      	cmp	r3, #4
 8000858:	d000      	beq.n	800085c <__aeabi_fdiv+0x1c4>
 800085a:	3204      	adds	r2, #4
 800085c:	0153      	lsls	r3, r2, #5
 800085e:	d529      	bpl.n	80008b4 <__aeabi_fdiv+0x21c>
 8000860:	2001      	movs	r0, #1
 8000862:	2200      	movs	r2, #0
 8000864:	e79a      	b.n	800079c <__aeabi_fdiv+0x104>
 8000866:	4642      	mov	r2, r8
 8000868:	0163      	lsls	r3, r4, #5
 800086a:	0155      	lsls	r5, r2, #5
 800086c:	42ab      	cmp	r3, r5
 800086e:	d215      	bcs.n	800089c <__aeabi_fdiv+0x204>
 8000870:	201b      	movs	r0, #27
 8000872:	2200      	movs	r2, #0
 8000874:	3f01      	subs	r7, #1
 8000876:	2601      	movs	r6, #1
 8000878:	001c      	movs	r4, r3
 800087a:	0052      	lsls	r2, r2, #1
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	2c00      	cmp	r4, #0
 8000880:	db01      	blt.n	8000886 <__aeabi_fdiv+0x1ee>
 8000882:	429d      	cmp	r5, r3
 8000884:	d801      	bhi.n	800088a <__aeabi_fdiv+0x1f2>
 8000886:	1b5b      	subs	r3, r3, r5
 8000888:	4332      	orrs	r2, r6
 800088a:	3801      	subs	r0, #1
 800088c:	2800      	cmp	r0, #0
 800088e:	d1f3      	bne.n	8000878 <__aeabi_fdiv+0x1e0>
 8000890:	1e58      	subs	r0, r3, #1
 8000892:	4183      	sbcs	r3, r0
 8000894:	4313      	orrs	r3, r2
 8000896:	4698      	mov	r8, r3
 8000898:	000d      	movs	r5, r1
 800089a:	e79a      	b.n	80007d2 <__aeabi_fdiv+0x13a>
 800089c:	201a      	movs	r0, #26
 800089e:	2201      	movs	r2, #1
 80008a0:	1b5b      	subs	r3, r3, r5
 80008a2:	e7e8      	b.n	8000876 <__aeabi_fdiv+0x1de>
 80008a4:	3b02      	subs	r3, #2
 80008a6:	425a      	negs	r2, r3
 80008a8:	4153      	adcs	r3, r2
 80008aa:	425b      	negs	r3, r3
 80008ac:	0035      	movs	r5, r6
 80008ae:	2200      	movs	r2, #0
 80008b0:	b2d8      	uxtb	r0, r3
 80008b2:	e773      	b.n	800079c <__aeabi_fdiv+0x104>
 80008b4:	0192      	lsls	r2, r2, #6
 80008b6:	2000      	movs	r0, #0
 80008b8:	0a52      	lsrs	r2, r2, #9
 80008ba:	e76f      	b.n	800079c <__aeabi_fdiv+0x104>
 80008bc:	431a      	orrs	r2, r3
 80008be:	0252      	lsls	r2, r2, #9
 80008c0:	0035      	movs	r5, r6
 80008c2:	20ff      	movs	r0, #255	@ 0xff
 80008c4:	0a52      	lsrs	r2, r2, #9
 80008c6:	e769      	b.n	800079c <__aeabi_fdiv+0x104>
 80008c8:	4644      	mov	r4, r8
 80008ca:	e7ad      	b.n	8000828 <__aeabi_fdiv+0x190>
 80008cc:	08009688 	.word	0x08009688
 80008d0:	080096c8 	.word	0x080096c8
 80008d4:	f7ffffff 	.word	0xf7ffffff

080008d8 <__aeabi_fsub>:
 80008d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008da:	4647      	mov	r7, r8
 80008dc:	46ce      	mov	lr, r9
 80008de:	024e      	lsls	r6, r1, #9
 80008e0:	0243      	lsls	r3, r0, #9
 80008e2:	0045      	lsls	r5, r0, #1
 80008e4:	0a72      	lsrs	r2, r6, #9
 80008e6:	0fc4      	lsrs	r4, r0, #31
 80008e8:	0048      	lsls	r0, r1, #1
 80008ea:	b580      	push	{r7, lr}
 80008ec:	4694      	mov	ip, r2
 80008ee:	0a5f      	lsrs	r7, r3, #9
 80008f0:	0e2d      	lsrs	r5, r5, #24
 80008f2:	099b      	lsrs	r3, r3, #6
 80008f4:	0e00      	lsrs	r0, r0, #24
 80008f6:	0fc9      	lsrs	r1, r1, #31
 80008f8:	09b6      	lsrs	r6, r6, #6
 80008fa:	28ff      	cmp	r0, #255	@ 0xff
 80008fc:	d024      	beq.n	8000948 <__aeabi_fsub+0x70>
 80008fe:	2201      	movs	r2, #1
 8000900:	4051      	eors	r1, r2
 8000902:	1a2a      	subs	r2, r5, r0
 8000904:	428c      	cmp	r4, r1
 8000906:	d00f      	beq.n	8000928 <__aeabi_fsub+0x50>
 8000908:	2a00      	cmp	r2, #0
 800090a:	dc00      	bgt.n	800090e <__aeabi_fsub+0x36>
 800090c:	e16a      	b.n	8000be4 <__aeabi_fsub+0x30c>
 800090e:	2800      	cmp	r0, #0
 8000910:	d135      	bne.n	800097e <__aeabi_fsub+0xa6>
 8000912:	2e00      	cmp	r6, #0
 8000914:	d100      	bne.n	8000918 <__aeabi_fsub+0x40>
 8000916:	e0a2      	b.n	8000a5e <__aeabi_fsub+0x186>
 8000918:	1e51      	subs	r1, r2, #1
 800091a:	2a01      	cmp	r2, #1
 800091c:	d100      	bne.n	8000920 <__aeabi_fsub+0x48>
 800091e:	e124      	b.n	8000b6a <__aeabi_fsub+0x292>
 8000920:	2aff      	cmp	r2, #255	@ 0xff
 8000922:	d021      	beq.n	8000968 <__aeabi_fsub+0x90>
 8000924:	000a      	movs	r2, r1
 8000926:	e02f      	b.n	8000988 <__aeabi_fsub+0xb0>
 8000928:	2a00      	cmp	r2, #0
 800092a:	dc00      	bgt.n	800092e <__aeabi_fsub+0x56>
 800092c:	e167      	b.n	8000bfe <__aeabi_fsub+0x326>
 800092e:	2800      	cmp	r0, #0
 8000930:	d05e      	beq.n	80009f0 <__aeabi_fsub+0x118>
 8000932:	2dff      	cmp	r5, #255	@ 0xff
 8000934:	d018      	beq.n	8000968 <__aeabi_fsub+0x90>
 8000936:	2180      	movs	r1, #128	@ 0x80
 8000938:	04c9      	lsls	r1, r1, #19
 800093a:	430e      	orrs	r6, r1
 800093c:	2a1b      	cmp	r2, #27
 800093e:	dc00      	bgt.n	8000942 <__aeabi_fsub+0x6a>
 8000940:	e076      	b.n	8000a30 <__aeabi_fsub+0x158>
 8000942:	002a      	movs	r2, r5
 8000944:	3301      	adds	r3, #1
 8000946:	e032      	b.n	80009ae <__aeabi_fsub+0xd6>
 8000948:	002a      	movs	r2, r5
 800094a:	3aff      	subs	r2, #255	@ 0xff
 800094c:	4691      	mov	r9, r2
 800094e:	2e00      	cmp	r6, #0
 8000950:	d042      	beq.n	80009d8 <__aeabi_fsub+0x100>
 8000952:	428c      	cmp	r4, r1
 8000954:	d055      	beq.n	8000a02 <__aeabi_fsub+0x12a>
 8000956:	464a      	mov	r2, r9
 8000958:	2a00      	cmp	r2, #0
 800095a:	d100      	bne.n	800095e <__aeabi_fsub+0x86>
 800095c:	e09c      	b.n	8000a98 <__aeabi_fsub+0x1c0>
 800095e:	2d00      	cmp	r5, #0
 8000960:	d100      	bne.n	8000964 <__aeabi_fsub+0x8c>
 8000962:	e077      	b.n	8000a54 <__aeabi_fsub+0x17c>
 8000964:	000c      	movs	r4, r1
 8000966:	0033      	movs	r3, r6
 8000968:	08db      	lsrs	r3, r3, #3
 800096a:	2b00      	cmp	r3, #0
 800096c:	d100      	bne.n	8000970 <__aeabi_fsub+0x98>
 800096e:	e06e      	b.n	8000a4e <__aeabi_fsub+0x176>
 8000970:	2280      	movs	r2, #128	@ 0x80
 8000972:	03d2      	lsls	r2, r2, #15
 8000974:	4313      	orrs	r3, r2
 8000976:	025b      	lsls	r3, r3, #9
 8000978:	20ff      	movs	r0, #255	@ 0xff
 800097a:	0a5b      	lsrs	r3, r3, #9
 800097c:	e024      	b.n	80009c8 <__aeabi_fsub+0xf0>
 800097e:	2dff      	cmp	r5, #255	@ 0xff
 8000980:	d0f2      	beq.n	8000968 <__aeabi_fsub+0x90>
 8000982:	2180      	movs	r1, #128	@ 0x80
 8000984:	04c9      	lsls	r1, r1, #19
 8000986:	430e      	orrs	r6, r1
 8000988:	2101      	movs	r1, #1
 800098a:	2a1b      	cmp	r2, #27
 800098c:	dc08      	bgt.n	80009a0 <__aeabi_fsub+0xc8>
 800098e:	0031      	movs	r1, r6
 8000990:	2020      	movs	r0, #32
 8000992:	40d1      	lsrs	r1, r2
 8000994:	1a82      	subs	r2, r0, r2
 8000996:	4096      	lsls	r6, r2
 8000998:	0032      	movs	r2, r6
 800099a:	1e50      	subs	r0, r2, #1
 800099c:	4182      	sbcs	r2, r0
 800099e:	4311      	orrs	r1, r2
 80009a0:	1a5b      	subs	r3, r3, r1
 80009a2:	015a      	lsls	r2, r3, #5
 80009a4:	d460      	bmi.n	8000a68 <__aeabi_fsub+0x190>
 80009a6:	2107      	movs	r1, #7
 80009a8:	002a      	movs	r2, r5
 80009aa:	4019      	ands	r1, r3
 80009ac:	d057      	beq.n	8000a5e <__aeabi_fsub+0x186>
 80009ae:	210f      	movs	r1, #15
 80009b0:	4019      	ands	r1, r3
 80009b2:	2904      	cmp	r1, #4
 80009b4:	d000      	beq.n	80009b8 <__aeabi_fsub+0xe0>
 80009b6:	3304      	adds	r3, #4
 80009b8:	0159      	lsls	r1, r3, #5
 80009ba:	d550      	bpl.n	8000a5e <__aeabi_fsub+0x186>
 80009bc:	1c50      	adds	r0, r2, #1
 80009be:	2afe      	cmp	r2, #254	@ 0xfe
 80009c0:	d045      	beq.n	8000a4e <__aeabi_fsub+0x176>
 80009c2:	019b      	lsls	r3, r3, #6
 80009c4:	b2c0      	uxtb	r0, r0
 80009c6:	0a5b      	lsrs	r3, r3, #9
 80009c8:	05c0      	lsls	r0, r0, #23
 80009ca:	4318      	orrs	r0, r3
 80009cc:	07e4      	lsls	r4, r4, #31
 80009ce:	4320      	orrs	r0, r4
 80009d0:	bcc0      	pop	{r6, r7}
 80009d2:	46b9      	mov	r9, r7
 80009d4:	46b0      	mov	r8, r6
 80009d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009d8:	2201      	movs	r2, #1
 80009da:	4051      	eors	r1, r2
 80009dc:	428c      	cmp	r4, r1
 80009de:	d1ba      	bne.n	8000956 <__aeabi_fsub+0x7e>
 80009e0:	464a      	mov	r2, r9
 80009e2:	2a00      	cmp	r2, #0
 80009e4:	d010      	beq.n	8000a08 <__aeabi_fsub+0x130>
 80009e6:	2d00      	cmp	r5, #0
 80009e8:	d100      	bne.n	80009ec <__aeabi_fsub+0x114>
 80009ea:	e098      	b.n	8000b1e <__aeabi_fsub+0x246>
 80009ec:	2300      	movs	r3, #0
 80009ee:	e7bb      	b.n	8000968 <__aeabi_fsub+0x90>
 80009f0:	2e00      	cmp	r6, #0
 80009f2:	d034      	beq.n	8000a5e <__aeabi_fsub+0x186>
 80009f4:	1e51      	subs	r1, r2, #1
 80009f6:	2a01      	cmp	r2, #1
 80009f8:	d06e      	beq.n	8000ad8 <__aeabi_fsub+0x200>
 80009fa:	2aff      	cmp	r2, #255	@ 0xff
 80009fc:	d0b4      	beq.n	8000968 <__aeabi_fsub+0x90>
 80009fe:	000a      	movs	r2, r1
 8000a00:	e79c      	b.n	800093c <__aeabi_fsub+0x64>
 8000a02:	2a00      	cmp	r2, #0
 8000a04:	d000      	beq.n	8000a08 <__aeabi_fsub+0x130>
 8000a06:	e088      	b.n	8000b1a <__aeabi_fsub+0x242>
 8000a08:	20fe      	movs	r0, #254	@ 0xfe
 8000a0a:	1c6a      	adds	r2, r5, #1
 8000a0c:	4210      	tst	r0, r2
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_fsub+0x13a>
 8000a10:	e092      	b.n	8000b38 <__aeabi_fsub+0x260>
 8000a12:	2d00      	cmp	r5, #0
 8000a14:	d000      	beq.n	8000a18 <__aeabi_fsub+0x140>
 8000a16:	e0a4      	b.n	8000b62 <__aeabi_fsub+0x28a>
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_fsub+0x146>
 8000a1c:	e0cb      	b.n	8000bb6 <__aeabi_fsub+0x2de>
 8000a1e:	2e00      	cmp	r6, #0
 8000a20:	d000      	beq.n	8000a24 <__aeabi_fsub+0x14c>
 8000a22:	e0ca      	b.n	8000bba <__aeabi_fsub+0x2e2>
 8000a24:	2200      	movs	r2, #0
 8000a26:	08db      	lsrs	r3, r3, #3
 8000a28:	025b      	lsls	r3, r3, #9
 8000a2a:	0a5b      	lsrs	r3, r3, #9
 8000a2c:	b2d0      	uxtb	r0, r2
 8000a2e:	e7cb      	b.n	80009c8 <__aeabi_fsub+0xf0>
 8000a30:	0031      	movs	r1, r6
 8000a32:	2020      	movs	r0, #32
 8000a34:	40d1      	lsrs	r1, r2
 8000a36:	1a82      	subs	r2, r0, r2
 8000a38:	4096      	lsls	r6, r2
 8000a3a:	0032      	movs	r2, r6
 8000a3c:	1e50      	subs	r0, r2, #1
 8000a3e:	4182      	sbcs	r2, r0
 8000a40:	430a      	orrs	r2, r1
 8000a42:	189b      	adds	r3, r3, r2
 8000a44:	015a      	lsls	r2, r3, #5
 8000a46:	d5ae      	bpl.n	80009a6 <__aeabi_fsub+0xce>
 8000a48:	1c6a      	adds	r2, r5, #1
 8000a4a:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a4c:	d14a      	bne.n	8000ae4 <__aeabi_fsub+0x20c>
 8000a4e:	20ff      	movs	r0, #255	@ 0xff
 8000a50:	2300      	movs	r3, #0
 8000a52:	e7b9      	b.n	80009c8 <__aeabi_fsub+0xf0>
 8000a54:	22ff      	movs	r2, #255	@ 0xff
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d14b      	bne.n	8000af2 <__aeabi_fsub+0x21a>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	2aff      	cmp	r2, #255	@ 0xff
 8000a62:	d100      	bne.n	8000a66 <__aeabi_fsub+0x18e>
 8000a64:	e781      	b.n	800096a <__aeabi_fsub+0x92>
 8000a66:	e7df      	b.n	8000a28 <__aeabi_fsub+0x150>
 8000a68:	019f      	lsls	r7, r3, #6
 8000a6a:	09bf      	lsrs	r7, r7, #6
 8000a6c:	0038      	movs	r0, r7
 8000a6e:	f001 f967 	bl	8001d40 <__clzsi2>
 8000a72:	3805      	subs	r0, #5
 8000a74:	4087      	lsls	r7, r0
 8000a76:	4285      	cmp	r5, r0
 8000a78:	dc21      	bgt.n	8000abe <__aeabi_fsub+0x1e6>
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	2120      	movs	r1, #32
 8000a7e:	1b42      	subs	r2, r0, r5
 8000a80:	3201      	adds	r2, #1
 8000a82:	40d3      	lsrs	r3, r2
 8000a84:	1a8a      	subs	r2, r1, r2
 8000a86:	4097      	lsls	r7, r2
 8000a88:	1e7a      	subs	r2, r7, #1
 8000a8a:	4197      	sbcs	r7, r2
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	433b      	orrs	r3, r7
 8000a90:	0759      	lsls	r1, r3, #29
 8000a92:	d000      	beq.n	8000a96 <__aeabi_fsub+0x1be>
 8000a94:	e78b      	b.n	80009ae <__aeabi_fsub+0xd6>
 8000a96:	e78f      	b.n	80009b8 <__aeabi_fsub+0xe0>
 8000a98:	20fe      	movs	r0, #254	@ 0xfe
 8000a9a:	1c6a      	adds	r2, r5, #1
 8000a9c:	4210      	tst	r0, r2
 8000a9e:	d112      	bne.n	8000ac6 <__aeabi_fsub+0x1ee>
 8000aa0:	2d00      	cmp	r5, #0
 8000aa2:	d152      	bne.n	8000b4a <__aeabi_fsub+0x272>
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d07c      	beq.n	8000ba2 <__aeabi_fsub+0x2ca>
 8000aa8:	2e00      	cmp	r6, #0
 8000aaa:	d0bb      	beq.n	8000a24 <__aeabi_fsub+0x14c>
 8000aac:	1b9a      	subs	r2, r3, r6
 8000aae:	0150      	lsls	r0, r2, #5
 8000ab0:	d400      	bmi.n	8000ab4 <__aeabi_fsub+0x1dc>
 8000ab2:	e08b      	b.n	8000bcc <__aeabi_fsub+0x2f4>
 8000ab4:	2401      	movs	r4, #1
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	1af3      	subs	r3, r6, r3
 8000aba:	400c      	ands	r4, r1
 8000abc:	e7e8      	b.n	8000a90 <__aeabi_fsub+0x1b8>
 8000abe:	4b56      	ldr	r3, [pc, #344]	@ (8000c18 <__aeabi_fsub+0x340>)
 8000ac0:	1a2a      	subs	r2, r5, r0
 8000ac2:	403b      	ands	r3, r7
 8000ac4:	e7e4      	b.n	8000a90 <__aeabi_fsub+0x1b8>
 8000ac6:	1b9f      	subs	r7, r3, r6
 8000ac8:	017a      	lsls	r2, r7, #5
 8000aca:	d446      	bmi.n	8000b5a <__aeabi_fsub+0x282>
 8000acc:	2f00      	cmp	r7, #0
 8000ace:	d1cd      	bne.n	8000a6c <__aeabi_fsub+0x194>
 8000ad0:	2400      	movs	r4, #0
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	e777      	b.n	80009c8 <__aeabi_fsub+0xf0>
 8000ad8:	199b      	adds	r3, r3, r6
 8000ada:	2501      	movs	r5, #1
 8000adc:	3201      	adds	r2, #1
 8000ade:	0159      	lsls	r1, r3, #5
 8000ae0:	d400      	bmi.n	8000ae4 <__aeabi_fsub+0x20c>
 8000ae2:	e760      	b.n	80009a6 <__aeabi_fsub+0xce>
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	484d      	ldr	r0, [pc, #308]	@ (8000c1c <__aeabi_fsub+0x344>)
 8000ae8:	4019      	ands	r1, r3
 8000aea:	085b      	lsrs	r3, r3, #1
 8000aec:	4003      	ands	r3, r0
 8000aee:	430b      	orrs	r3, r1
 8000af0:	e7ce      	b.n	8000a90 <__aeabi_fsub+0x1b8>
 8000af2:	1e57      	subs	r7, r2, #1
 8000af4:	2a01      	cmp	r2, #1
 8000af6:	d05a      	beq.n	8000bae <__aeabi_fsub+0x2d6>
 8000af8:	000c      	movs	r4, r1
 8000afa:	2aff      	cmp	r2, #255	@ 0xff
 8000afc:	d033      	beq.n	8000b66 <__aeabi_fsub+0x28e>
 8000afe:	2201      	movs	r2, #1
 8000b00:	2f1b      	cmp	r7, #27
 8000b02:	dc07      	bgt.n	8000b14 <__aeabi_fsub+0x23c>
 8000b04:	2120      	movs	r1, #32
 8000b06:	1bc9      	subs	r1, r1, r7
 8000b08:	001a      	movs	r2, r3
 8000b0a:	408b      	lsls	r3, r1
 8000b0c:	40fa      	lsrs	r2, r7
 8000b0e:	1e59      	subs	r1, r3, #1
 8000b10:	418b      	sbcs	r3, r1
 8000b12:	431a      	orrs	r2, r3
 8000b14:	0005      	movs	r5, r0
 8000b16:	1ab3      	subs	r3, r6, r2
 8000b18:	e743      	b.n	80009a2 <__aeabi_fsub+0xca>
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d123      	bne.n	8000b66 <__aeabi_fsub+0x28e>
 8000b1e:	22ff      	movs	r2, #255	@ 0xff
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d09b      	beq.n	8000a5c <__aeabi_fsub+0x184>
 8000b24:	1e51      	subs	r1, r2, #1
 8000b26:	2a01      	cmp	r2, #1
 8000b28:	d0d6      	beq.n	8000ad8 <__aeabi_fsub+0x200>
 8000b2a:	2aff      	cmp	r2, #255	@ 0xff
 8000b2c:	d01b      	beq.n	8000b66 <__aeabi_fsub+0x28e>
 8000b2e:	291b      	cmp	r1, #27
 8000b30:	dd2c      	ble.n	8000b8c <__aeabi_fsub+0x2b4>
 8000b32:	0002      	movs	r2, r0
 8000b34:	1c73      	adds	r3, r6, #1
 8000b36:	e73a      	b.n	80009ae <__aeabi_fsub+0xd6>
 8000b38:	2aff      	cmp	r2, #255	@ 0xff
 8000b3a:	d088      	beq.n	8000a4e <__aeabi_fsub+0x176>
 8000b3c:	199b      	adds	r3, r3, r6
 8000b3e:	085b      	lsrs	r3, r3, #1
 8000b40:	0759      	lsls	r1, r3, #29
 8000b42:	d000      	beq.n	8000b46 <__aeabi_fsub+0x26e>
 8000b44:	e733      	b.n	80009ae <__aeabi_fsub+0xd6>
 8000b46:	08db      	lsrs	r3, r3, #3
 8000b48:	e76e      	b.n	8000a28 <__aeabi_fsub+0x150>
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d110      	bne.n	8000b70 <__aeabi_fsub+0x298>
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d043      	beq.n	8000bda <__aeabi_fsub+0x302>
 8000b52:	2401      	movs	r4, #1
 8000b54:	0033      	movs	r3, r6
 8000b56:	400c      	ands	r4, r1
 8000b58:	e706      	b.n	8000968 <__aeabi_fsub+0x90>
 8000b5a:	2401      	movs	r4, #1
 8000b5c:	1af7      	subs	r7, r6, r3
 8000b5e:	400c      	ands	r4, r1
 8000b60:	e784      	b.n	8000a6c <__aeabi_fsub+0x194>
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d104      	bne.n	8000b70 <__aeabi_fsub+0x298>
 8000b66:	0033      	movs	r3, r6
 8000b68:	e6fe      	b.n	8000968 <__aeabi_fsub+0x90>
 8000b6a:	2501      	movs	r5, #1
 8000b6c:	1b9b      	subs	r3, r3, r6
 8000b6e:	e718      	b.n	80009a2 <__aeabi_fsub+0xca>
 8000b70:	2e00      	cmp	r6, #0
 8000b72:	d100      	bne.n	8000b76 <__aeabi_fsub+0x29e>
 8000b74:	e6f8      	b.n	8000968 <__aeabi_fsub+0x90>
 8000b76:	2280      	movs	r2, #128	@ 0x80
 8000b78:	03d2      	lsls	r2, r2, #15
 8000b7a:	4297      	cmp	r7, r2
 8000b7c:	d304      	bcc.n	8000b88 <__aeabi_fsub+0x2b0>
 8000b7e:	4594      	cmp	ip, r2
 8000b80:	d202      	bcs.n	8000b88 <__aeabi_fsub+0x2b0>
 8000b82:	2401      	movs	r4, #1
 8000b84:	0033      	movs	r3, r6
 8000b86:	400c      	ands	r4, r1
 8000b88:	08db      	lsrs	r3, r3, #3
 8000b8a:	e6f1      	b.n	8000970 <__aeabi_fsub+0x98>
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	2520      	movs	r5, #32
 8000b90:	40ca      	lsrs	r2, r1
 8000b92:	1a69      	subs	r1, r5, r1
 8000b94:	408b      	lsls	r3, r1
 8000b96:	1e59      	subs	r1, r3, #1
 8000b98:	418b      	sbcs	r3, r1
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	0005      	movs	r5, r0
 8000b9e:	199b      	adds	r3, r3, r6
 8000ba0:	e750      	b.n	8000a44 <__aeabi_fsub+0x16c>
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d094      	beq.n	8000ad0 <__aeabi_fsub+0x1f8>
 8000ba6:	2401      	movs	r4, #1
 8000ba8:	0033      	movs	r3, r6
 8000baa:	400c      	ands	r4, r1
 8000bac:	e73a      	b.n	8000a24 <__aeabi_fsub+0x14c>
 8000bae:	000c      	movs	r4, r1
 8000bb0:	2501      	movs	r5, #1
 8000bb2:	1af3      	subs	r3, r6, r3
 8000bb4:	e6f5      	b.n	80009a2 <__aeabi_fsub+0xca>
 8000bb6:	0033      	movs	r3, r6
 8000bb8:	e734      	b.n	8000a24 <__aeabi_fsub+0x14c>
 8000bba:	199b      	adds	r3, r3, r6
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	0159      	lsls	r1, r3, #5
 8000bc0:	d5c1      	bpl.n	8000b46 <__aeabi_fsub+0x26e>
 8000bc2:	4a15      	ldr	r2, [pc, #84]	@ (8000c18 <__aeabi_fsub+0x340>)
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	2201      	movs	r2, #1
 8000bca:	e72d      	b.n	8000a28 <__aeabi_fsub+0x150>
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	d100      	bne.n	8000bd2 <__aeabi_fsub+0x2fa>
 8000bd0:	e77e      	b.n	8000ad0 <__aeabi_fsub+0x1f8>
 8000bd2:	0013      	movs	r3, r2
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	08db      	lsrs	r3, r3, #3
 8000bd8:	e726      	b.n	8000a28 <__aeabi_fsub+0x150>
 8000bda:	2380      	movs	r3, #128	@ 0x80
 8000bdc:	2400      	movs	r4, #0
 8000bde:	20ff      	movs	r0, #255	@ 0xff
 8000be0:	03db      	lsls	r3, r3, #15
 8000be2:	e6f1      	b.n	80009c8 <__aeabi_fsub+0xf0>
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	d100      	bne.n	8000bea <__aeabi_fsub+0x312>
 8000be8:	e756      	b.n	8000a98 <__aeabi_fsub+0x1c0>
 8000bea:	1b47      	subs	r7, r0, r5
 8000bec:	003a      	movs	r2, r7
 8000bee:	2d00      	cmp	r5, #0
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_fsub+0x31c>
 8000bf2:	e730      	b.n	8000a56 <__aeabi_fsub+0x17e>
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	04d2      	lsls	r2, r2, #19
 8000bf8:	000c      	movs	r4, r1
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	e77f      	b.n	8000afe <__aeabi_fsub+0x226>
 8000bfe:	2a00      	cmp	r2, #0
 8000c00:	d100      	bne.n	8000c04 <__aeabi_fsub+0x32c>
 8000c02:	e701      	b.n	8000a08 <__aeabi_fsub+0x130>
 8000c04:	1b41      	subs	r1, r0, r5
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	d101      	bne.n	8000c0e <__aeabi_fsub+0x336>
 8000c0a:	000a      	movs	r2, r1
 8000c0c:	e788      	b.n	8000b20 <__aeabi_fsub+0x248>
 8000c0e:	2280      	movs	r2, #128	@ 0x80
 8000c10:	04d2      	lsls	r2, r2, #19
 8000c12:	4313      	orrs	r3, r2
 8000c14:	e78b      	b.n	8000b2e <__aeabi_fsub+0x256>
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	fbffffff 	.word	0xfbffffff
 8000c1c:	7dffffff 	.word	0x7dffffff

08000c20 <__aeabi_f2iz>:
 8000c20:	0241      	lsls	r1, r0, #9
 8000c22:	0042      	lsls	r2, r0, #1
 8000c24:	0fc3      	lsrs	r3, r0, #31
 8000c26:	0a49      	lsrs	r1, r1, #9
 8000c28:	2000      	movs	r0, #0
 8000c2a:	0e12      	lsrs	r2, r2, #24
 8000c2c:	2a7e      	cmp	r2, #126	@ 0x7e
 8000c2e:	dd03      	ble.n	8000c38 <__aeabi_f2iz+0x18>
 8000c30:	2a9d      	cmp	r2, #157	@ 0x9d
 8000c32:	dd02      	ble.n	8000c3a <__aeabi_f2iz+0x1a>
 8000c34:	4a09      	ldr	r2, [pc, #36]	@ (8000c5c <__aeabi_f2iz+0x3c>)
 8000c36:	1898      	adds	r0, r3, r2
 8000c38:	4770      	bx	lr
 8000c3a:	2080      	movs	r0, #128	@ 0x80
 8000c3c:	0400      	lsls	r0, r0, #16
 8000c3e:	4301      	orrs	r1, r0
 8000c40:	2a95      	cmp	r2, #149	@ 0x95
 8000c42:	dc07      	bgt.n	8000c54 <__aeabi_f2iz+0x34>
 8000c44:	2096      	movs	r0, #150	@ 0x96
 8000c46:	1a82      	subs	r2, r0, r2
 8000c48:	40d1      	lsrs	r1, r2
 8000c4a:	4248      	negs	r0, r1
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d1f3      	bne.n	8000c38 <__aeabi_f2iz+0x18>
 8000c50:	0008      	movs	r0, r1
 8000c52:	e7f1      	b.n	8000c38 <__aeabi_f2iz+0x18>
 8000c54:	3a96      	subs	r2, #150	@ 0x96
 8000c56:	4091      	lsls	r1, r2
 8000c58:	e7f7      	b.n	8000c4a <__aeabi_f2iz+0x2a>
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	7fffffff 	.word	0x7fffffff

08000c60 <__aeabi_ddiv>:
 8000c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c62:	46de      	mov	lr, fp
 8000c64:	4645      	mov	r5, r8
 8000c66:	4657      	mov	r7, sl
 8000c68:	464e      	mov	r6, r9
 8000c6a:	b5e0      	push	{r5, r6, r7, lr}
 8000c6c:	b087      	sub	sp, #28
 8000c6e:	9200      	str	r2, [sp, #0]
 8000c70:	9301      	str	r3, [sp, #4]
 8000c72:	030b      	lsls	r3, r1, #12
 8000c74:	0b1b      	lsrs	r3, r3, #12
 8000c76:	469b      	mov	fp, r3
 8000c78:	0fca      	lsrs	r2, r1, #31
 8000c7a:	004b      	lsls	r3, r1, #1
 8000c7c:	0004      	movs	r4, r0
 8000c7e:	4680      	mov	r8, r0
 8000c80:	0d5b      	lsrs	r3, r3, #21
 8000c82:	9202      	str	r2, [sp, #8]
 8000c84:	d100      	bne.n	8000c88 <__aeabi_ddiv+0x28>
 8000c86:	e16a      	b.n	8000f5e <__aeabi_ddiv+0x2fe>
 8000c88:	4ad4      	ldr	r2, [pc, #848]	@ (8000fdc <__aeabi_ddiv+0x37c>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_ddiv+0x30>
 8000c8e:	e18c      	b.n	8000faa <__aeabi_ddiv+0x34a>
 8000c90:	4659      	mov	r1, fp
 8000c92:	0f42      	lsrs	r2, r0, #29
 8000c94:	00c9      	lsls	r1, r1, #3
 8000c96:	430a      	orrs	r2, r1
 8000c98:	2180      	movs	r1, #128	@ 0x80
 8000c9a:	0409      	lsls	r1, r1, #16
 8000c9c:	4311      	orrs	r1, r2
 8000c9e:	00c2      	lsls	r2, r0, #3
 8000ca0:	4690      	mov	r8, r2
 8000ca2:	4acf      	ldr	r2, [pc, #828]	@ (8000fe0 <__aeabi_ddiv+0x380>)
 8000ca4:	4689      	mov	r9, r1
 8000ca6:	4692      	mov	sl, r2
 8000ca8:	449a      	add	sl, r3
 8000caa:	2300      	movs	r3, #0
 8000cac:	2400      	movs	r4, #0
 8000cae:	9303      	str	r3, [sp, #12]
 8000cb0:	9e00      	ldr	r6, [sp, #0]
 8000cb2:	9f01      	ldr	r7, [sp, #4]
 8000cb4:	033b      	lsls	r3, r7, #12
 8000cb6:	0b1b      	lsrs	r3, r3, #12
 8000cb8:	469b      	mov	fp, r3
 8000cba:	007b      	lsls	r3, r7, #1
 8000cbc:	0030      	movs	r0, r6
 8000cbe:	0d5b      	lsrs	r3, r3, #21
 8000cc0:	0ffd      	lsrs	r5, r7, #31
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d100      	bne.n	8000cc8 <__aeabi_ddiv+0x68>
 8000cc6:	e128      	b.n	8000f1a <__aeabi_ddiv+0x2ba>
 8000cc8:	4ac4      	ldr	r2, [pc, #784]	@ (8000fdc <__aeabi_ddiv+0x37c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d100      	bne.n	8000cd0 <__aeabi_ddiv+0x70>
 8000cce:	e177      	b.n	8000fc0 <__aeabi_ddiv+0x360>
 8000cd0:	4659      	mov	r1, fp
 8000cd2:	0f72      	lsrs	r2, r6, #29
 8000cd4:	00c9      	lsls	r1, r1, #3
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	2180      	movs	r1, #128	@ 0x80
 8000cda:	0409      	lsls	r1, r1, #16
 8000cdc:	4311      	orrs	r1, r2
 8000cde:	468b      	mov	fp, r1
 8000ce0:	49bf      	ldr	r1, [pc, #764]	@ (8000fe0 <__aeabi_ddiv+0x380>)
 8000ce2:	00f2      	lsls	r2, r6, #3
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	4651      	mov	r1, sl
 8000ce8:	4463      	add	r3, ip
 8000cea:	1acb      	subs	r3, r1, r3
 8000cec:	469a      	mov	sl, r3
 8000cee:	2300      	movs	r3, #0
 8000cf0:	9e02      	ldr	r6, [sp, #8]
 8000cf2:	406e      	eors	r6, r5
 8000cf4:	2c0f      	cmp	r4, #15
 8000cf6:	d827      	bhi.n	8000d48 <__aeabi_ddiv+0xe8>
 8000cf8:	49ba      	ldr	r1, [pc, #744]	@ (8000fe4 <__aeabi_ddiv+0x384>)
 8000cfa:	00a4      	lsls	r4, r4, #2
 8000cfc:	5909      	ldr	r1, [r1, r4]
 8000cfe:	468f      	mov	pc, r1
 8000d00:	46cb      	mov	fp, r9
 8000d02:	4642      	mov	r2, r8
 8000d04:	9e02      	ldr	r6, [sp, #8]
 8000d06:	9b03      	ldr	r3, [sp, #12]
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d016      	beq.n	8000d3a <__aeabi_ddiv+0xda>
 8000d0c:	2b03      	cmp	r3, #3
 8000d0e:	d100      	bne.n	8000d12 <__aeabi_ddiv+0xb2>
 8000d10:	e2a6      	b.n	8001260 <__aeabi_ddiv+0x600>
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d000      	beq.n	8000d18 <__aeabi_ddiv+0xb8>
 8000d16:	e0df      	b.n	8000ed8 <__aeabi_ddiv+0x278>
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	2400      	movs	r4, #0
 8000d1e:	4690      	mov	r8, r2
 8000d20:	051b      	lsls	r3, r3, #20
 8000d22:	4323      	orrs	r3, r4
 8000d24:	07f6      	lsls	r6, r6, #31
 8000d26:	4333      	orrs	r3, r6
 8000d28:	4640      	mov	r0, r8
 8000d2a:	0019      	movs	r1, r3
 8000d2c:	b007      	add	sp, #28
 8000d2e:	bcf0      	pop	{r4, r5, r6, r7}
 8000d30:	46bb      	mov	fp, r7
 8000d32:	46b2      	mov	sl, r6
 8000d34:	46a9      	mov	r9, r5
 8000d36:	46a0      	mov	r8, r4
 8000d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2400      	movs	r4, #0
 8000d3e:	4690      	mov	r8, r2
 8000d40:	4ba6      	ldr	r3, [pc, #664]	@ (8000fdc <__aeabi_ddiv+0x37c>)
 8000d42:	e7ed      	b.n	8000d20 <__aeabi_ddiv+0xc0>
 8000d44:	002e      	movs	r6, r5
 8000d46:	e7df      	b.n	8000d08 <__aeabi_ddiv+0xa8>
 8000d48:	45cb      	cmp	fp, r9
 8000d4a:	d200      	bcs.n	8000d4e <__aeabi_ddiv+0xee>
 8000d4c:	e1d4      	b.n	80010f8 <__aeabi_ddiv+0x498>
 8000d4e:	d100      	bne.n	8000d52 <__aeabi_ddiv+0xf2>
 8000d50:	e1cf      	b.n	80010f2 <__aeabi_ddiv+0x492>
 8000d52:	2301      	movs	r3, #1
 8000d54:	425b      	negs	r3, r3
 8000d56:	469c      	mov	ip, r3
 8000d58:	4644      	mov	r4, r8
 8000d5a:	4648      	mov	r0, r9
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	44e2      	add	sl, ip
 8000d60:	465b      	mov	r3, fp
 8000d62:	0e15      	lsrs	r5, r2, #24
 8000d64:	021b      	lsls	r3, r3, #8
 8000d66:	431d      	orrs	r5, r3
 8000d68:	0c19      	lsrs	r1, r3, #16
 8000d6a:	042b      	lsls	r3, r5, #16
 8000d6c:	0212      	lsls	r2, r2, #8
 8000d6e:	9500      	str	r5, [sp, #0]
 8000d70:	0c1d      	lsrs	r5, r3, #16
 8000d72:	4691      	mov	r9, r2
 8000d74:	9102      	str	r1, [sp, #8]
 8000d76:	9503      	str	r5, [sp, #12]
 8000d78:	f7ff fa5c 	bl	8000234 <__aeabi_uidivmod>
 8000d7c:	0002      	movs	r2, r0
 8000d7e:	436a      	muls	r2, r5
 8000d80:	040b      	lsls	r3, r1, #16
 8000d82:	0c21      	lsrs	r1, r4, #16
 8000d84:	4680      	mov	r8, r0
 8000d86:	4319      	orrs	r1, r3
 8000d88:	428a      	cmp	r2, r1
 8000d8a:	d909      	bls.n	8000da0 <__aeabi_ddiv+0x140>
 8000d8c:	9d00      	ldr	r5, [sp, #0]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	46ac      	mov	ip, r5
 8000d92:	425b      	negs	r3, r3
 8000d94:	4461      	add	r1, ip
 8000d96:	469c      	mov	ip, r3
 8000d98:	44e0      	add	r8, ip
 8000d9a:	428d      	cmp	r5, r1
 8000d9c:	d800      	bhi.n	8000da0 <__aeabi_ddiv+0x140>
 8000d9e:	e1fb      	b.n	8001198 <__aeabi_ddiv+0x538>
 8000da0:	1a88      	subs	r0, r1, r2
 8000da2:	9902      	ldr	r1, [sp, #8]
 8000da4:	f7ff fa46 	bl	8000234 <__aeabi_uidivmod>
 8000da8:	9a03      	ldr	r2, [sp, #12]
 8000daa:	0424      	lsls	r4, r4, #16
 8000dac:	4342      	muls	r2, r0
 8000dae:	0409      	lsls	r1, r1, #16
 8000db0:	0c24      	lsrs	r4, r4, #16
 8000db2:	0003      	movs	r3, r0
 8000db4:	430c      	orrs	r4, r1
 8000db6:	42a2      	cmp	r2, r4
 8000db8:	d906      	bls.n	8000dc8 <__aeabi_ddiv+0x168>
 8000dba:	9900      	ldr	r1, [sp, #0]
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	468c      	mov	ip, r1
 8000dc0:	4464      	add	r4, ip
 8000dc2:	42a1      	cmp	r1, r4
 8000dc4:	d800      	bhi.n	8000dc8 <__aeabi_ddiv+0x168>
 8000dc6:	e1e1      	b.n	800118c <__aeabi_ddiv+0x52c>
 8000dc8:	1aa0      	subs	r0, r4, r2
 8000dca:	4642      	mov	r2, r8
 8000dcc:	0412      	lsls	r2, r2, #16
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	4693      	mov	fp, r2
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	4659      	mov	r1, fp
 8000dd6:	0c1b      	lsrs	r3, r3, #16
 8000dd8:	001d      	movs	r5, r3
 8000dda:	9304      	str	r3, [sp, #16]
 8000ddc:	040b      	lsls	r3, r1, #16
 8000dde:	4649      	mov	r1, r9
 8000de0:	0409      	lsls	r1, r1, #16
 8000de2:	0c09      	lsrs	r1, r1, #16
 8000de4:	000c      	movs	r4, r1
 8000de6:	0c1b      	lsrs	r3, r3, #16
 8000de8:	435c      	muls	r4, r3
 8000dea:	0c12      	lsrs	r2, r2, #16
 8000dec:	436b      	muls	r3, r5
 8000dee:	4688      	mov	r8, r1
 8000df0:	4351      	muls	r1, r2
 8000df2:	436a      	muls	r2, r5
 8000df4:	0c25      	lsrs	r5, r4, #16
 8000df6:	46ac      	mov	ip, r5
 8000df8:	185b      	adds	r3, r3, r1
 8000dfa:	4463      	add	r3, ip
 8000dfc:	4299      	cmp	r1, r3
 8000dfe:	d903      	bls.n	8000e08 <__aeabi_ddiv+0x1a8>
 8000e00:	2180      	movs	r1, #128	@ 0x80
 8000e02:	0249      	lsls	r1, r1, #9
 8000e04:	468c      	mov	ip, r1
 8000e06:	4462      	add	r2, ip
 8000e08:	0c19      	lsrs	r1, r3, #16
 8000e0a:	0424      	lsls	r4, r4, #16
 8000e0c:	041b      	lsls	r3, r3, #16
 8000e0e:	0c24      	lsrs	r4, r4, #16
 8000e10:	188a      	adds	r2, r1, r2
 8000e12:	191c      	adds	r4, r3, r4
 8000e14:	4290      	cmp	r0, r2
 8000e16:	d302      	bcc.n	8000e1e <__aeabi_ddiv+0x1be>
 8000e18:	d116      	bne.n	8000e48 <__aeabi_ddiv+0x1e8>
 8000e1a:	42a7      	cmp	r7, r4
 8000e1c:	d214      	bcs.n	8000e48 <__aeabi_ddiv+0x1e8>
 8000e1e:	465b      	mov	r3, fp
 8000e20:	9d00      	ldr	r5, [sp, #0]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	444f      	add	r7, r9
 8000e26:	9305      	str	r3, [sp, #20]
 8000e28:	454f      	cmp	r7, r9
 8000e2a:	419b      	sbcs	r3, r3
 8000e2c:	46ac      	mov	ip, r5
 8000e2e:	425b      	negs	r3, r3
 8000e30:	4463      	add	r3, ip
 8000e32:	18c0      	adds	r0, r0, r3
 8000e34:	4285      	cmp	r5, r0
 8000e36:	d300      	bcc.n	8000e3a <__aeabi_ddiv+0x1da>
 8000e38:	e1a1      	b.n	800117e <__aeabi_ddiv+0x51e>
 8000e3a:	4282      	cmp	r2, r0
 8000e3c:	d900      	bls.n	8000e40 <__aeabi_ddiv+0x1e0>
 8000e3e:	e1f6      	b.n	800122e <__aeabi_ddiv+0x5ce>
 8000e40:	d100      	bne.n	8000e44 <__aeabi_ddiv+0x1e4>
 8000e42:	e1f1      	b.n	8001228 <__aeabi_ddiv+0x5c8>
 8000e44:	9b05      	ldr	r3, [sp, #20]
 8000e46:	469b      	mov	fp, r3
 8000e48:	1b3c      	subs	r4, r7, r4
 8000e4a:	42a7      	cmp	r7, r4
 8000e4c:	41bf      	sbcs	r7, r7
 8000e4e:	9d00      	ldr	r5, [sp, #0]
 8000e50:	1a80      	subs	r0, r0, r2
 8000e52:	427f      	negs	r7, r7
 8000e54:	1bc0      	subs	r0, r0, r7
 8000e56:	4285      	cmp	r5, r0
 8000e58:	d100      	bne.n	8000e5c <__aeabi_ddiv+0x1fc>
 8000e5a:	e1d0      	b.n	80011fe <__aeabi_ddiv+0x59e>
 8000e5c:	9902      	ldr	r1, [sp, #8]
 8000e5e:	f7ff f9e9 	bl	8000234 <__aeabi_uidivmod>
 8000e62:	9a03      	ldr	r2, [sp, #12]
 8000e64:	040b      	lsls	r3, r1, #16
 8000e66:	4342      	muls	r2, r0
 8000e68:	0c21      	lsrs	r1, r4, #16
 8000e6a:	0007      	movs	r7, r0
 8000e6c:	4319      	orrs	r1, r3
 8000e6e:	428a      	cmp	r2, r1
 8000e70:	d900      	bls.n	8000e74 <__aeabi_ddiv+0x214>
 8000e72:	e178      	b.n	8001166 <__aeabi_ddiv+0x506>
 8000e74:	1a88      	subs	r0, r1, r2
 8000e76:	9902      	ldr	r1, [sp, #8]
 8000e78:	f7ff f9dc 	bl	8000234 <__aeabi_uidivmod>
 8000e7c:	9a03      	ldr	r2, [sp, #12]
 8000e7e:	0424      	lsls	r4, r4, #16
 8000e80:	4342      	muls	r2, r0
 8000e82:	0409      	lsls	r1, r1, #16
 8000e84:	0c24      	lsrs	r4, r4, #16
 8000e86:	0003      	movs	r3, r0
 8000e88:	430c      	orrs	r4, r1
 8000e8a:	42a2      	cmp	r2, r4
 8000e8c:	d900      	bls.n	8000e90 <__aeabi_ddiv+0x230>
 8000e8e:	e15d      	b.n	800114c <__aeabi_ddiv+0x4ec>
 8000e90:	4641      	mov	r1, r8
 8000e92:	1aa4      	subs	r4, r4, r2
 8000e94:	043a      	lsls	r2, r7, #16
 8000e96:	431a      	orrs	r2, r3
 8000e98:	9d04      	ldr	r5, [sp, #16]
 8000e9a:	0413      	lsls	r3, r2, #16
 8000e9c:	0c1b      	lsrs	r3, r3, #16
 8000e9e:	4359      	muls	r1, r3
 8000ea0:	4647      	mov	r7, r8
 8000ea2:	436b      	muls	r3, r5
 8000ea4:	469c      	mov	ip, r3
 8000ea6:	0c10      	lsrs	r0, r2, #16
 8000ea8:	4347      	muls	r7, r0
 8000eaa:	0c0b      	lsrs	r3, r1, #16
 8000eac:	44bc      	add	ip, r7
 8000eae:	4463      	add	r3, ip
 8000eb0:	4368      	muls	r0, r5
 8000eb2:	429f      	cmp	r7, r3
 8000eb4:	d903      	bls.n	8000ebe <__aeabi_ddiv+0x25e>
 8000eb6:	2580      	movs	r5, #128	@ 0x80
 8000eb8:	026d      	lsls	r5, r5, #9
 8000eba:	46ac      	mov	ip, r5
 8000ebc:	4460      	add	r0, ip
 8000ebe:	0c1f      	lsrs	r7, r3, #16
 8000ec0:	0409      	lsls	r1, r1, #16
 8000ec2:	041b      	lsls	r3, r3, #16
 8000ec4:	0c09      	lsrs	r1, r1, #16
 8000ec6:	183f      	adds	r7, r7, r0
 8000ec8:	185b      	adds	r3, r3, r1
 8000eca:	42bc      	cmp	r4, r7
 8000ecc:	d200      	bcs.n	8000ed0 <__aeabi_ddiv+0x270>
 8000ece:	e102      	b.n	80010d6 <__aeabi_ddiv+0x476>
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x274>
 8000ed2:	e0fd      	b.n	80010d0 <__aeabi_ddiv+0x470>
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	431a      	orrs	r2, r3
 8000ed8:	4b43      	ldr	r3, [pc, #268]	@ (8000fe8 <__aeabi_ddiv+0x388>)
 8000eda:	4453      	add	r3, sl
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	dc00      	bgt.n	8000ee2 <__aeabi_ddiv+0x282>
 8000ee0:	e0ae      	b.n	8001040 <__aeabi_ddiv+0x3e0>
 8000ee2:	0751      	lsls	r1, r2, #29
 8000ee4:	d000      	beq.n	8000ee8 <__aeabi_ddiv+0x288>
 8000ee6:	e198      	b.n	800121a <__aeabi_ddiv+0x5ba>
 8000ee8:	4659      	mov	r1, fp
 8000eea:	01c9      	lsls	r1, r1, #7
 8000eec:	d506      	bpl.n	8000efc <__aeabi_ddiv+0x29c>
 8000eee:	4659      	mov	r1, fp
 8000ef0:	4b3e      	ldr	r3, [pc, #248]	@ (8000fec <__aeabi_ddiv+0x38c>)
 8000ef2:	4019      	ands	r1, r3
 8000ef4:	2380      	movs	r3, #128	@ 0x80
 8000ef6:	468b      	mov	fp, r1
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	4453      	add	r3, sl
 8000efc:	493c      	ldr	r1, [pc, #240]	@ (8000ff0 <__aeabi_ddiv+0x390>)
 8000efe:	428b      	cmp	r3, r1
 8000f00:	dd00      	ble.n	8000f04 <__aeabi_ddiv+0x2a4>
 8000f02:	e71a      	b.n	8000d3a <__aeabi_ddiv+0xda>
 8000f04:	4659      	mov	r1, fp
 8000f06:	08d2      	lsrs	r2, r2, #3
 8000f08:	0749      	lsls	r1, r1, #29
 8000f0a:	4311      	orrs	r1, r2
 8000f0c:	465a      	mov	r2, fp
 8000f0e:	055b      	lsls	r3, r3, #21
 8000f10:	0254      	lsls	r4, r2, #9
 8000f12:	4688      	mov	r8, r1
 8000f14:	0b24      	lsrs	r4, r4, #12
 8000f16:	0d5b      	lsrs	r3, r3, #21
 8000f18:	e702      	b.n	8000d20 <__aeabi_ddiv+0xc0>
 8000f1a:	465a      	mov	r2, fp
 8000f1c:	9b00      	ldr	r3, [sp, #0]
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	d100      	bne.n	8000f24 <__aeabi_ddiv+0x2c4>
 8000f22:	e07e      	b.n	8001022 <__aeabi_ddiv+0x3c2>
 8000f24:	465b      	mov	r3, fp
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d100      	bne.n	8000f2c <__aeabi_ddiv+0x2cc>
 8000f2a:	e100      	b.n	800112e <__aeabi_ddiv+0x4ce>
 8000f2c:	4658      	mov	r0, fp
 8000f2e:	f000 ff07 	bl	8001d40 <__clzsi2>
 8000f32:	0002      	movs	r2, r0
 8000f34:	0003      	movs	r3, r0
 8000f36:	3a0b      	subs	r2, #11
 8000f38:	271d      	movs	r7, #29
 8000f3a:	9e00      	ldr	r6, [sp, #0]
 8000f3c:	1aba      	subs	r2, r7, r2
 8000f3e:	0019      	movs	r1, r3
 8000f40:	4658      	mov	r0, fp
 8000f42:	40d6      	lsrs	r6, r2
 8000f44:	3908      	subs	r1, #8
 8000f46:	4088      	lsls	r0, r1
 8000f48:	0032      	movs	r2, r6
 8000f4a:	4302      	orrs	r2, r0
 8000f4c:	4693      	mov	fp, r2
 8000f4e:	9a00      	ldr	r2, [sp, #0]
 8000f50:	408a      	lsls	r2, r1
 8000f52:	4928      	ldr	r1, [pc, #160]	@ (8000ff4 <__aeabi_ddiv+0x394>)
 8000f54:	4453      	add	r3, sl
 8000f56:	468a      	mov	sl, r1
 8000f58:	449a      	add	sl, r3
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e6c8      	b.n	8000cf0 <__aeabi_ddiv+0x90>
 8000f5e:	465b      	mov	r3, fp
 8000f60:	4303      	orrs	r3, r0
 8000f62:	4699      	mov	r9, r3
 8000f64:	d056      	beq.n	8001014 <__aeabi_ddiv+0x3b4>
 8000f66:	465b      	mov	r3, fp
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_ddiv+0x30e>
 8000f6c:	e0cd      	b.n	800110a <__aeabi_ddiv+0x4aa>
 8000f6e:	4658      	mov	r0, fp
 8000f70:	f000 fee6 	bl	8001d40 <__clzsi2>
 8000f74:	230b      	movs	r3, #11
 8000f76:	425b      	negs	r3, r3
 8000f78:	469c      	mov	ip, r3
 8000f7a:	0002      	movs	r2, r0
 8000f7c:	4484      	add	ip, r0
 8000f7e:	4666      	mov	r6, ip
 8000f80:	231d      	movs	r3, #29
 8000f82:	1b9b      	subs	r3, r3, r6
 8000f84:	0026      	movs	r6, r4
 8000f86:	0011      	movs	r1, r2
 8000f88:	4658      	mov	r0, fp
 8000f8a:	40de      	lsrs	r6, r3
 8000f8c:	3908      	subs	r1, #8
 8000f8e:	4088      	lsls	r0, r1
 8000f90:	0033      	movs	r3, r6
 8000f92:	4303      	orrs	r3, r0
 8000f94:	4699      	mov	r9, r3
 8000f96:	0023      	movs	r3, r4
 8000f98:	408b      	lsls	r3, r1
 8000f9a:	4698      	mov	r8, r3
 8000f9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <__aeabi_ddiv+0x398>)
 8000f9e:	2400      	movs	r4, #0
 8000fa0:	1a9b      	subs	r3, r3, r2
 8000fa2:	469a      	mov	sl, r3
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	9303      	str	r3, [sp, #12]
 8000fa8:	e682      	b.n	8000cb0 <__aeabi_ddiv+0x50>
 8000faa:	465a      	mov	r2, fp
 8000fac:	4302      	orrs	r2, r0
 8000fae:	4691      	mov	r9, r2
 8000fb0:	d12a      	bne.n	8001008 <__aeabi_ddiv+0x3a8>
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	469a      	mov	sl, r3
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	4690      	mov	r8, r2
 8000fba:	2408      	movs	r4, #8
 8000fbc:	9303      	str	r3, [sp, #12]
 8000fbe:	e677      	b.n	8000cb0 <__aeabi_ddiv+0x50>
 8000fc0:	465a      	mov	r2, fp
 8000fc2:	9b00      	ldr	r3, [sp, #0]
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000ffc <__aeabi_ddiv+0x39c>)
 8000fc8:	469c      	mov	ip, r3
 8000fca:	44e2      	add	sl, ip
 8000fcc:	2a00      	cmp	r2, #0
 8000fce:	d117      	bne.n	8001000 <__aeabi_ddiv+0x3a0>
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	431c      	orrs	r4, r3
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	469b      	mov	fp, r3
 8000fd8:	3302      	adds	r3, #2
 8000fda:	e689      	b.n	8000cf0 <__aeabi_ddiv+0x90>
 8000fdc:	000007ff 	.word	0x000007ff
 8000fe0:	fffffc01 	.word	0xfffffc01
 8000fe4:	08009704 	.word	0x08009704
 8000fe8:	000003ff 	.word	0x000003ff
 8000fec:	feffffff 	.word	0xfeffffff
 8000ff0:	000007fe 	.word	0x000007fe
 8000ff4:	000003f3 	.word	0x000003f3
 8000ff8:	fffffc0d 	.word	0xfffffc0d
 8000ffc:	fffff801 	.word	0xfffff801
 8001000:	2303      	movs	r3, #3
 8001002:	0032      	movs	r2, r6
 8001004:	431c      	orrs	r4, r3
 8001006:	e673      	b.n	8000cf0 <__aeabi_ddiv+0x90>
 8001008:	469a      	mov	sl, r3
 800100a:	2303      	movs	r3, #3
 800100c:	46d9      	mov	r9, fp
 800100e:	240c      	movs	r4, #12
 8001010:	9303      	str	r3, [sp, #12]
 8001012:	e64d      	b.n	8000cb0 <__aeabi_ddiv+0x50>
 8001014:	2300      	movs	r3, #0
 8001016:	4698      	mov	r8, r3
 8001018:	469a      	mov	sl, r3
 800101a:	3301      	adds	r3, #1
 800101c:	2404      	movs	r4, #4
 800101e:	9303      	str	r3, [sp, #12]
 8001020:	e646      	b.n	8000cb0 <__aeabi_ddiv+0x50>
 8001022:	2301      	movs	r3, #1
 8001024:	431c      	orrs	r4, r3
 8001026:	2300      	movs	r3, #0
 8001028:	469b      	mov	fp, r3
 800102a:	3301      	adds	r3, #1
 800102c:	e660      	b.n	8000cf0 <__aeabi_ddiv+0x90>
 800102e:	2300      	movs	r3, #0
 8001030:	2480      	movs	r4, #128	@ 0x80
 8001032:	4698      	mov	r8, r3
 8001034:	2600      	movs	r6, #0
 8001036:	4b92      	ldr	r3, [pc, #584]	@ (8001280 <__aeabi_ddiv+0x620>)
 8001038:	0324      	lsls	r4, r4, #12
 800103a:	e671      	b.n	8000d20 <__aeabi_ddiv+0xc0>
 800103c:	2201      	movs	r2, #1
 800103e:	4252      	negs	r2, r2
 8001040:	2101      	movs	r1, #1
 8001042:	1ac9      	subs	r1, r1, r3
 8001044:	2938      	cmp	r1, #56	@ 0x38
 8001046:	dd00      	ble.n	800104a <__aeabi_ddiv+0x3ea>
 8001048:	e666      	b.n	8000d18 <__aeabi_ddiv+0xb8>
 800104a:	291f      	cmp	r1, #31
 800104c:	dc00      	bgt.n	8001050 <__aeabi_ddiv+0x3f0>
 800104e:	e0ab      	b.n	80011a8 <__aeabi_ddiv+0x548>
 8001050:	201f      	movs	r0, #31
 8001052:	4240      	negs	r0, r0
 8001054:	1ac3      	subs	r3, r0, r3
 8001056:	4658      	mov	r0, fp
 8001058:	40d8      	lsrs	r0, r3
 800105a:	0003      	movs	r3, r0
 800105c:	2920      	cmp	r1, #32
 800105e:	d004      	beq.n	800106a <__aeabi_ddiv+0x40a>
 8001060:	4658      	mov	r0, fp
 8001062:	4988      	ldr	r1, [pc, #544]	@ (8001284 <__aeabi_ddiv+0x624>)
 8001064:	4451      	add	r1, sl
 8001066:	4088      	lsls	r0, r1
 8001068:	4302      	orrs	r2, r0
 800106a:	1e51      	subs	r1, r2, #1
 800106c:	418a      	sbcs	r2, r1
 800106e:	431a      	orrs	r2, r3
 8001070:	2307      	movs	r3, #7
 8001072:	0019      	movs	r1, r3
 8001074:	2400      	movs	r4, #0
 8001076:	4011      	ands	r1, r2
 8001078:	4213      	tst	r3, r2
 800107a:	d00c      	beq.n	8001096 <__aeabi_ddiv+0x436>
 800107c:	230f      	movs	r3, #15
 800107e:	4013      	ands	r3, r2
 8001080:	2b04      	cmp	r3, #4
 8001082:	d100      	bne.n	8001086 <__aeabi_ddiv+0x426>
 8001084:	e0f9      	b.n	800127a <__aeabi_ddiv+0x61a>
 8001086:	1d11      	adds	r1, r2, #4
 8001088:	4291      	cmp	r1, r2
 800108a:	419b      	sbcs	r3, r3
 800108c:	000a      	movs	r2, r1
 800108e:	425b      	negs	r3, r3
 8001090:	0759      	lsls	r1, r3, #29
 8001092:	025b      	lsls	r3, r3, #9
 8001094:	0b1c      	lsrs	r4, r3, #12
 8001096:	08d2      	lsrs	r2, r2, #3
 8001098:	430a      	orrs	r2, r1
 800109a:	4690      	mov	r8, r2
 800109c:	2300      	movs	r3, #0
 800109e:	e63f      	b.n	8000d20 <__aeabi_ddiv+0xc0>
 80010a0:	2480      	movs	r4, #128	@ 0x80
 80010a2:	464b      	mov	r3, r9
 80010a4:	0324      	lsls	r4, r4, #12
 80010a6:	4223      	tst	r3, r4
 80010a8:	d009      	beq.n	80010be <__aeabi_ddiv+0x45e>
 80010aa:	465b      	mov	r3, fp
 80010ac:	4223      	tst	r3, r4
 80010ae:	d106      	bne.n	80010be <__aeabi_ddiv+0x45e>
 80010b0:	431c      	orrs	r4, r3
 80010b2:	0324      	lsls	r4, r4, #12
 80010b4:	002e      	movs	r6, r5
 80010b6:	4690      	mov	r8, r2
 80010b8:	4b71      	ldr	r3, [pc, #452]	@ (8001280 <__aeabi_ddiv+0x620>)
 80010ba:	0b24      	lsrs	r4, r4, #12
 80010bc:	e630      	b.n	8000d20 <__aeabi_ddiv+0xc0>
 80010be:	2480      	movs	r4, #128	@ 0x80
 80010c0:	464b      	mov	r3, r9
 80010c2:	0324      	lsls	r4, r4, #12
 80010c4:	431c      	orrs	r4, r3
 80010c6:	0324      	lsls	r4, r4, #12
 80010c8:	9e02      	ldr	r6, [sp, #8]
 80010ca:	4b6d      	ldr	r3, [pc, #436]	@ (8001280 <__aeabi_ddiv+0x620>)
 80010cc:	0b24      	lsrs	r4, r4, #12
 80010ce:	e627      	b.n	8000d20 <__aeabi_ddiv+0xc0>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d100      	bne.n	80010d6 <__aeabi_ddiv+0x476>
 80010d4:	e700      	b.n	8000ed8 <__aeabi_ddiv+0x278>
 80010d6:	9800      	ldr	r0, [sp, #0]
 80010d8:	1e51      	subs	r1, r2, #1
 80010da:	4684      	mov	ip, r0
 80010dc:	4464      	add	r4, ip
 80010de:	4284      	cmp	r4, r0
 80010e0:	d200      	bcs.n	80010e4 <__aeabi_ddiv+0x484>
 80010e2:	e084      	b.n	80011ee <__aeabi_ddiv+0x58e>
 80010e4:	42bc      	cmp	r4, r7
 80010e6:	d200      	bcs.n	80010ea <__aeabi_ddiv+0x48a>
 80010e8:	e0ae      	b.n	8001248 <__aeabi_ddiv+0x5e8>
 80010ea:	d100      	bne.n	80010ee <__aeabi_ddiv+0x48e>
 80010ec:	e0c1      	b.n	8001272 <__aeabi_ddiv+0x612>
 80010ee:	000a      	movs	r2, r1
 80010f0:	e6f0      	b.n	8000ed4 <__aeabi_ddiv+0x274>
 80010f2:	4542      	cmp	r2, r8
 80010f4:	d900      	bls.n	80010f8 <__aeabi_ddiv+0x498>
 80010f6:	e62c      	b.n	8000d52 <__aeabi_ddiv+0xf2>
 80010f8:	464b      	mov	r3, r9
 80010fa:	07dc      	lsls	r4, r3, #31
 80010fc:	0858      	lsrs	r0, r3, #1
 80010fe:	4643      	mov	r3, r8
 8001100:	085b      	lsrs	r3, r3, #1
 8001102:	431c      	orrs	r4, r3
 8001104:	4643      	mov	r3, r8
 8001106:	07df      	lsls	r7, r3, #31
 8001108:	e62a      	b.n	8000d60 <__aeabi_ddiv+0x100>
 800110a:	f000 fe19 	bl	8001d40 <__clzsi2>
 800110e:	2315      	movs	r3, #21
 8001110:	469c      	mov	ip, r3
 8001112:	4484      	add	ip, r0
 8001114:	0002      	movs	r2, r0
 8001116:	4663      	mov	r3, ip
 8001118:	3220      	adds	r2, #32
 800111a:	2b1c      	cmp	r3, #28
 800111c:	dc00      	bgt.n	8001120 <__aeabi_ddiv+0x4c0>
 800111e:	e72e      	b.n	8000f7e <__aeabi_ddiv+0x31e>
 8001120:	0023      	movs	r3, r4
 8001122:	3808      	subs	r0, #8
 8001124:	4083      	lsls	r3, r0
 8001126:	4699      	mov	r9, r3
 8001128:	2300      	movs	r3, #0
 800112a:	4698      	mov	r8, r3
 800112c:	e736      	b.n	8000f9c <__aeabi_ddiv+0x33c>
 800112e:	f000 fe07 	bl	8001d40 <__clzsi2>
 8001132:	0002      	movs	r2, r0
 8001134:	0003      	movs	r3, r0
 8001136:	3215      	adds	r2, #21
 8001138:	3320      	adds	r3, #32
 800113a:	2a1c      	cmp	r2, #28
 800113c:	dc00      	bgt.n	8001140 <__aeabi_ddiv+0x4e0>
 800113e:	e6fb      	b.n	8000f38 <__aeabi_ddiv+0x2d8>
 8001140:	9900      	ldr	r1, [sp, #0]
 8001142:	3808      	subs	r0, #8
 8001144:	4081      	lsls	r1, r0
 8001146:	2200      	movs	r2, #0
 8001148:	468b      	mov	fp, r1
 800114a:	e702      	b.n	8000f52 <__aeabi_ddiv+0x2f2>
 800114c:	9900      	ldr	r1, [sp, #0]
 800114e:	3b01      	subs	r3, #1
 8001150:	468c      	mov	ip, r1
 8001152:	4464      	add	r4, ip
 8001154:	42a1      	cmp	r1, r4
 8001156:	d900      	bls.n	800115a <__aeabi_ddiv+0x4fa>
 8001158:	e69a      	b.n	8000e90 <__aeabi_ddiv+0x230>
 800115a:	42a2      	cmp	r2, r4
 800115c:	d800      	bhi.n	8001160 <__aeabi_ddiv+0x500>
 800115e:	e697      	b.n	8000e90 <__aeabi_ddiv+0x230>
 8001160:	1e83      	subs	r3, r0, #2
 8001162:	4464      	add	r4, ip
 8001164:	e694      	b.n	8000e90 <__aeabi_ddiv+0x230>
 8001166:	46ac      	mov	ip, r5
 8001168:	4461      	add	r1, ip
 800116a:	3f01      	subs	r7, #1
 800116c:	428d      	cmp	r5, r1
 800116e:	d900      	bls.n	8001172 <__aeabi_ddiv+0x512>
 8001170:	e680      	b.n	8000e74 <__aeabi_ddiv+0x214>
 8001172:	428a      	cmp	r2, r1
 8001174:	d800      	bhi.n	8001178 <__aeabi_ddiv+0x518>
 8001176:	e67d      	b.n	8000e74 <__aeabi_ddiv+0x214>
 8001178:	1e87      	subs	r7, r0, #2
 800117a:	4461      	add	r1, ip
 800117c:	e67a      	b.n	8000e74 <__aeabi_ddiv+0x214>
 800117e:	4285      	cmp	r5, r0
 8001180:	d000      	beq.n	8001184 <__aeabi_ddiv+0x524>
 8001182:	e65f      	b.n	8000e44 <__aeabi_ddiv+0x1e4>
 8001184:	45b9      	cmp	r9, r7
 8001186:	d900      	bls.n	800118a <__aeabi_ddiv+0x52a>
 8001188:	e65c      	b.n	8000e44 <__aeabi_ddiv+0x1e4>
 800118a:	e656      	b.n	8000e3a <__aeabi_ddiv+0x1da>
 800118c:	42a2      	cmp	r2, r4
 800118e:	d800      	bhi.n	8001192 <__aeabi_ddiv+0x532>
 8001190:	e61a      	b.n	8000dc8 <__aeabi_ddiv+0x168>
 8001192:	1e83      	subs	r3, r0, #2
 8001194:	4464      	add	r4, ip
 8001196:	e617      	b.n	8000dc8 <__aeabi_ddiv+0x168>
 8001198:	428a      	cmp	r2, r1
 800119a:	d800      	bhi.n	800119e <__aeabi_ddiv+0x53e>
 800119c:	e600      	b.n	8000da0 <__aeabi_ddiv+0x140>
 800119e:	46ac      	mov	ip, r5
 80011a0:	1e83      	subs	r3, r0, #2
 80011a2:	4698      	mov	r8, r3
 80011a4:	4461      	add	r1, ip
 80011a6:	e5fb      	b.n	8000da0 <__aeabi_ddiv+0x140>
 80011a8:	4837      	ldr	r0, [pc, #220]	@ (8001288 <__aeabi_ddiv+0x628>)
 80011aa:	0014      	movs	r4, r2
 80011ac:	4450      	add	r0, sl
 80011ae:	4082      	lsls	r2, r0
 80011b0:	465b      	mov	r3, fp
 80011b2:	0017      	movs	r7, r2
 80011b4:	4083      	lsls	r3, r0
 80011b6:	40cc      	lsrs	r4, r1
 80011b8:	1e7a      	subs	r2, r7, #1
 80011ba:	4197      	sbcs	r7, r2
 80011bc:	4323      	orrs	r3, r4
 80011be:	433b      	orrs	r3, r7
 80011c0:	001a      	movs	r2, r3
 80011c2:	465b      	mov	r3, fp
 80011c4:	40cb      	lsrs	r3, r1
 80011c6:	0751      	lsls	r1, r2, #29
 80011c8:	d009      	beq.n	80011de <__aeabi_ddiv+0x57e>
 80011ca:	210f      	movs	r1, #15
 80011cc:	4011      	ands	r1, r2
 80011ce:	2904      	cmp	r1, #4
 80011d0:	d005      	beq.n	80011de <__aeabi_ddiv+0x57e>
 80011d2:	1d11      	adds	r1, r2, #4
 80011d4:	4291      	cmp	r1, r2
 80011d6:	4192      	sbcs	r2, r2
 80011d8:	4252      	negs	r2, r2
 80011da:	189b      	adds	r3, r3, r2
 80011dc:	000a      	movs	r2, r1
 80011de:	0219      	lsls	r1, r3, #8
 80011e0:	d400      	bmi.n	80011e4 <__aeabi_ddiv+0x584>
 80011e2:	e755      	b.n	8001090 <__aeabi_ddiv+0x430>
 80011e4:	2200      	movs	r2, #0
 80011e6:	2301      	movs	r3, #1
 80011e8:	2400      	movs	r4, #0
 80011ea:	4690      	mov	r8, r2
 80011ec:	e598      	b.n	8000d20 <__aeabi_ddiv+0xc0>
 80011ee:	000a      	movs	r2, r1
 80011f0:	42bc      	cmp	r4, r7
 80011f2:	d000      	beq.n	80011f6 <__aeabi_ddiv+0x596>
 80011f4:	e66e      	b.n	8000ed4 <__aeabi_ddiv+0x274>
 80011f6:	454b      	cmp	r3, r9
 80011f8:	d000      	beq.n	80011fc <__aeabi_ddiv+0x59c>
 80011fa:	e66b      	b.n	8000ed4 <__aeabi_ddiv+0x274>
 80011fc:	e66c      	b.n	8000ed8 <__aeabi_ddiv+0x278>
 80011fe:	4b23      	ldr	r3, [pc, #140]	@ (800128c <__aeabi_ddiv+0x62c>)
 8001200:	4a23      	ldr	r2, [pc, #140]	@ (8001290 <__aeabi_ddiv+0x630>)
 8001202:	4453      	add	r3, sl
 8001204:	4592      	cmp	sl, r2
 8001206:	da00      	bge.n	800120a <__aeabi_ddiv+0x5aa>
 8001208:	e718      	b.n	800103c <__aeabi_ddiv+0x3dc>
 800120a:	2101      	movs	r1, #1
 800120c:	4249      	negs	r1, r1
 800120e:	1d0a      	adds	r2, r1, #4
 8001210:	428a      	cmp	r2, r1
 8001212:	4189      	sbcs	r1, r1
 8001214:	4249      	negs	r1, r1
 8001216:	448b      	add	fp, r1
 8001218:	e666      	b.n	8000ee8 <__aeabi_ddiv+0x288>
 800121a:	210f      	movs	r1, #15
 800121c:	4011      	ands	r1, r2
 800121e:	2904      	cmp	r1, #4
 8001220:	d100      	bne.n	8001224 <__aeabi_ddiv+0x5c4>
 8001222:	e661      	b.n	8000ee8 <__aeabi_ddiv+0x288>
 8001224:	0011      	movs	r1, r2
 8001226:	e7f2      	b.n	800120e <__aeabi_ddiv+0x5ae>
 8001228:	42bc      	cmp	r4, r7
 800122a:	d800      	bhi.n	800122e <__aeabi_ddiv+0x5ce>
 800122c:	e60a      	b.n	8000e44 <__aeabi_ddiv+0x1e4>
 800122e:	2302      	movs	r3, #2
 8001230:	425b      	negs	r3, r3
 8001232:	469c      	mov	ip, r3
 8001234:	9900      	ldr	r1, [sp, #0]
 8001236:	444f      	add	r7, r9
 8001238:	454f      	cmp	r7, r9
 800123a:	419b      	sbcs	r3, r3
 800123c:	44e3      	add	fp, ip
 800123e:	468c      	mov	ip, r1
 8001240:	425b      	negs	r3, r3
 8001242:	4463      	add	r3, ip
 8001244:	18c0      	adds	r0, r0, r3
 8001246:	e5ff      	b.n	8000e48 <__aeabi_ddiv+0x1e8>
 8001248:	4649      	mov	r1, r9
 800124a:	9d00      	ldr	r5, [sp, #0]
 800124c:	0048      	lsls	r0, r1, #1
 800124e:	4548      	cmp	r0, r9
 8001250:	4189      	sbcs	r1, r1
 8001252:	46ac      	mov	ip, r5
 8001254:	4249      	negs	r1, r1
 8001256:	4461      	add	r1, ip
 8001258:	4681      	mov	r9, r0
 800125a:	3a02      	subs	r2, #2
 800125c:	1864      	adds	r4, r4, r1
 800125e:	e7c7      	b.n	80011f0 <__aeabi_ddiv+0x590>
 8001260:	2480      	movs	r4, #128	@ 0x80
 8001262:	465b      	mov	r3, fp
 8001264:	0324      	lsls	r4, r4, #12
 8001266:	431c      	orrs	r4, r3
 8001268:	0324      	lsls	r4, r4, #12
 800126a:	4690      	mov	r8, r2
 800126c:	4b04      	ldr	r3, [pc, #16]	@ (8001280 <__aeabi_ddiv+0x620>)
 800126e:	0b24      	lsrs	r4, r4, #12
 8001270:	e556      	b.n	8000d20 <__aeabi_ddiv+0xc0>
 8001272:	4599      	cmp	r9, r3
 8001274:	d3e8      	bcc.n	8001248 <__aeabi_ddiv+0x5e8>
 8001276:	000a      	movs	r2, r1
 8001278:	e7bd      	b.n	80011f6 <__aeabi_ddiv+0x596>
 800127a:	2300      	movs	r3, #0
 800127c:	e708      	b.n	8001090 <__aeabi_ddiv+0x430>
 800127e:	46c0      	nop			@ (mov r8, r8)
 8001280:	000007ff 	.word	0x000007ff
 8001284:	0000043e 	.word	0x0000043e
 8001288:	0000041e 	.word	0x0000041e
 800128c:	000003ff 	.word	0x000003ff
 8001290:	fffffc02 	.word	0xfffffc02

08001294 <__eqdf2>:
 8001294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001296:	4657      	mov	r7, sl
 8001298:	46de      	mov	lr, fp
 800129a:	464e      	mov	r6, r9
 800129c:	4645      	mov	r5, r8
 800129e:	b5e0      	push	{r5, r6, r7, lr}
 80012a0:	000d      	movs	r5, r1
 80012a2:	0004      	movs	r4, r0
 80012a4:	0fe8      	lsrs	r0, r5, #31
 80012a6:	4683      	mov	fp, r0
 80012a8:	0309      	lsls	r1, r1, #12
 80012aa:	0fd8      	lsrs	r0, r3, #31
 80012ac:	0b09      	lsrs	r1, r1, #12
 80012ae:	4682      	mov	sl, r0
 80012b0:	4819      	ldr	r0, [pc, #100]	@ (8001318 <__eqdf2+0x84>)
 80012b2:	468c      	mov	ip, r1
 80012b4:	031f      	lsls	r7, r3, #12
 80012b6:	0069      	lsls	r1, r5, #1
 80012b8:	005e      	lsls	r6, r3, #1
 80012ba:	0d49      	lsrs	r1, r1, #21
 80012bc:	0b3f      	lsrs	r7, r7, #12
 80012be:	0d76      	lsrs	r6, r6, #21
 80012c0:	4281      	cmp	r1, r0
 80012c2:	d018      	beq.n	80012f6 <__eqdf2+0x62>
 80012c4:	4286      	cmp	r6, r0
 80012c6:	d00f      	beq.n	80012e8 <__eqdf2+0x54>
 80012c8:	2001      	movs	r0, #1
 80012ca:	42b1      	cmp	r1, r6
 80012cc:	d10d      	bne.n	80012ea <__eqdf2+0x56>
 80012ce:	45bc      	cmp	ip, r7
 80012d0:	d10b      	bne.n	80012ea <__eqdf2+0x56>
 80012d2:	4294      	cmp	r4, r2
 80012d4:	d109      	bne.n	80012ea <__eqdf2+0x56>
 80012d6:	45d3      	cmp	fp, sl
 80012d8:	d01c      	beq.n	8001314 <__eqdf2+0x80>
 80012da:	2900      	cmp	r1, #0
 80012dc:	d105      	bne.n	80012ea <__eqdf2+0x56>
 80012de:	4660      	mov	r0, ip
 80012e0:	4320      	orrs	r0, r4
 80012e2:	1e43      	subs	r3, r0, #1
 80012e4:	4198      	sbcs	r0, r3
 80012e6:	e000      	b.n	80012ea <__eqdf2+0x56>
 80012e8:	2001      	movs	r0, #1
 80012ea:	bcf0      	pop	{r4, r5, r6, r7}
 80012ec:	46bb      	mov	fp, r7
 80012ee:	46b2      	mov	sl, r6
 80012f0:	46a9      	mov	r9, r5
 80012f2:	46a0      	mov	r8, r4
 80012f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012f6:	2001      	movs	r0, #1
 80012f8:	428e      	cmp	r6, r1
 80012fa:	d1f6      	bne.n	80012ea <__eqdf2+0x56>
 80012fc:	4661      	mov	r1, ip
 80012fe:	4339      	orrs	r1, r7
 8001300:	000f      	movs	r7, r1
 8001302:	4317      	orrs	r7, r2
 8001304:	4327      	orrs	r7, r4
 8001306:	d1f0      	bne.n	80012ea <__eqdf2+0x56>
 8001308:	465b      	mov	r3, fp
 800130a:	4652      	mov	r2, sl
 800130c:	1a98      	subs	r0, r3, r2
 800130e:	1e43      	subs	r3, r0, #1
 8001310:	4198      	sbcs	r0, r3
 8001312:	e7ea      	b.n	80012ea <__eqdf2+0x56>
 8001314:	2000      	movs	r0, #0
 8001316:	e7e8      	b.n	80012ea <__eqdf2+0x56>
 8001318:	000007ff 	.word	0x000007ff

0800131c <__gedf2>:
 800131c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131e:	4657      	mov	r7, sl
 8001320:	464e      	mov	r6, r9
 8001322:	4645      	mov	r5, r8
 8001324:	46de      	mov	lr, fp
 8001326:	b5e0      	push	{r5, r6, r7, lr}
 8001328:	000d      	movs	r5, r1
 800132a:	030f      	lsls	r7, r1, #12
 800132c:	0b39      	lsrs	r1, r7, #12
 800132e:	b083      	sub	sp, #12
 8001330:	0004      	movs	r4, r0
 8001332:	4680      	mov	r8, r0
 8001334:	9101      	str	r1, [sp, #4]
 8001336:	0058      	lsls	r0, r3, #1
 8001338:	0fe9      	lsrs	r1, r5, #31
 800133a:	4f31      	ldr	r7, [pc, #196]	@ (8001400 <__gedf2+0xe4>)
 800133c:	0d40      	lsrs	r0, r0, #21
 800133e:	468c      	mov	ip, r1
 8001340:	006e      	lsls	r6, r5, #1
 8001342:	0319      	lsls	r1, r3, #12
 8001344:	4682      	mov	sl, r0
 8001346:	4691      	mov	r9, r2
 8001348:	0d76      	lsrs	r6, r6, #21
 800134a:	0b09      	lsrs	r1, r1, #12
 800134c:	0fd8      	lsrs	r0, r3, #31
 800134e:	42be      	cmp	r6, r7
 8001350:	d01f      	beq.n	8001392 <__gedf2+0x76>
 8001352:	45ba      	cmp	sl, r7
 8001354:	d00f      	beq.n	8001376 <__gedf2+0x5a>
 8001356:	2e00      	cmp	r6, #0
 8001358:	d12f      	bne.n	80013ba <__gedf2+0x9e>
 800135a:	4655      	mov	r5, sl
 800135c:	9e01      	ldr	r6, [sp, #4]
 800135e:	4334      	orrs	r4, r6
 8001360:	2d00      	cmp	r5, #0
 8001362:	d127      	bne.n	80013b4 <__gedf2+0x98>
 8001364:	430a      	orrs	r2, r1
 8001366:	d03a      	beq.n	80013de <__gedf2+0xc2>
 8001368:	2c00      	cmp	r4, #0
 800136a:	d145      	bne.n	80013f8 <__gedf2+0xdc>
 800136c:	2800      	cmp	r0, #0
 800136e:	d11a      	bne.n	80013a6 <__gedf2+0x8a>
 8001370:	2001      	movs	r0, #1
 8001372:	4240      	negs	r0, r0
 8001374:	e017      	b.n	80013a6 <__gedf2+0x8a>
 8001376:	4311      	orrs	r1, r2
 8001378:	d13b      	bne.n	80013f2 <__gedf2+0xd6>
 800137a:	2e00      	cmp	r6, #0
 800137c:	d102      	bne.n	8001384 <__gedf2+0x68>
 800137e:	9f01      	ldr	r7, [sp, #4]
 8001380:	4327      	orrs	r7, r4
 8001382:	d0f3      	beq.n	800136c <__gedf2+0x50>
 8001384:	4584      	cmp	ip, r0
 8001386:	d109      	bne.n	800139c <__gedf2+0x80>
 8001388:	4663      	mov	r3, ip
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <__gedf2+0x54>
 800138e:	4660      	mov	r0, ip
 8001390:	e009      	b.n	80013a6 <__gedf2+0x8a>
 8001392:	9f01      	ldr	r7, [sp, #4]
 8001394:	4327      	orrs	r7, r4
 8001396:	d12c      	bne.n	80013f2 <__gedf2+0xd6>
 8001398:	45b2      	cmp	sl, r6
 800139a:	d024      	beq.n	80013e6 <__gedf2+0xca>
 800139c:	4663      	mov	r3, ip
 800139e:	2002      	movs	r0, #2
 80013a0:	3b01      	subs	r3, #1
 80013a2:	4018      	ands	r0, r3
 80013a4:	3801      	subs	r0, #1
 80013a6:	b003      	add	sp, #12
 80013a8:	bcf0      	pop	{r4, r5, r6, r7}
 80013aa:	46bb      	mov	fp, r7
 80013ac:	46b2      	mov	sl, r6
 80013ae:	46a9      	mov	r9, r5
 80013b0:	46a0      	mov	r8, r4
 80013b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b4:	2c00      	cmp	r4, #0
 80013b6:	d0d9      	beq.n	800136c <__gedf2+0x50>
 80013b8:	e7e4      	b.n	8001384 <__gedf2+0x68>
 80013ba:	4654      	mov	r4, sl
 80013bc:	2c00      	cmp	r4, #0
 80013be:	d0ed      	beq.n	800139c <__gedf2+0x80>
 80013c0:	4584      	cmp	ip, r0
 80013c2:	d1eb      	bne.n	800139c <__gedf2+0x80>
 80013c4:	4556      	cmp	r6, sl
 80013c6:	dce9      	bgt.n	800139c <__gedf2+0x80>
 80013c8:	dbde      	blt.n	8001388 <__gedf2+0x6c>
 80013ca:	9b01      	ldr	r3, [sp, #4]
 80013cc:	428b      	cmp	r3, r1
 80013ce:	d8e5      	bhi.n	800139c <__gedf2+0x80>
 80013d0:	d1da      	bne.n	8001388 <__gedf2+0x6c>
 80013d2:	45c8      	cmp	r8, r9
 80013d4:	d8e2      	bhi.n	800139c <__gedf2+0x80>
 80013d6:	2000      	movs	r0, #0
 80013d8:	45c8      	cmp	r8, r9
 80013da:	d2e4      	bcs.n	80013a6 <__gedf2+0x8a>
 80013dc:	e7d4      	b.n	8001388 <__gedf2+0x6c>
 80013de:	2000      	movs	r0, #0
 80013e0:	2c00      	cmp	r4, #0
 80013e2:	d0e0      	beq.n	80013a6 <__gedf2+0x8a>
 80013e4:	e7da      	b.n	800139c <__gedf2+0x80>
 80013e6:	4311      	orrs	r1, r2
 80013e8:	d103      	bne.n	80013f2 <__gedf2+0xd6>
 80013ea:	4584      	cmp	ip, r0
 80013ec:	d1d6      	bne.n	800139c <__gedf2+0x80>
 80013ee:	2000      	movs	r0, #0
 80013f0:	e7d9      	b.n	80013a6 <__gedf2+0x8a>
 80013f2:	2002      	movs	r0, #2
 80013f4:	4240      	negs	r0, r0
 80013f6:	e7d6      	b.n	80013a6 <__gedf2+0x8a>
 80013f8:	4584      	cmp	ip, r0
 80013fa:	d0e6      	beq.n	80013ca <__gedf2+0xae>
 80013fc:	e7ce      	b.n	800139c <__gedf2+0x80>
 80013fe:	46c0      	nop			@ (mov r8, r8)
 8001400:	000007ff 	.word	0x000007ff

08001404 <__ledf2>:
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	4657      	mov	r7, sl
 8001408:	464e      	mov	r6, r9
 800140a:	4645      	mov	r5, r8
 800140c:	46de      	mov	lr, fp
 800140e:	b5e0      	push	{r5, r6, r7, lr}
 8001410:	000d      	movs	r5, r1
 8001412:	030f      	lsls	r7, r1, #12
 8001414:	0004      	movs	r4, r0
 8001416:	4680      	mov	r8, r0
 8001418:	0fe8      	lsrs	r0, r5, #31
 800141a:	0b39      	lsrs	r1, r7, #12
 800141c:	4684      	mov	ip, r0
 800141e:	b083      	sub	sp, #12
 8001420:	0058      	lsls	r0, r3, #1
 8001422:	4f30      	ldr	r7, [pc, #192]	@ (80014e4 <__ledf2+0xe0>)
 8001424:	0d40      	lsrs	r0, r0, #21
 8001426:	9101      	str	r1, [sp, #4]
 8001428:	031e      	lsls	r6, r3, #12
 800142a:	0069      	lsls	r1, r5, #1
 800142c:	4682      	mov	sl, r0
 800142e:	4691      	mov	r9, r2
 8001430:	0d49      	lsrs	r1, r1, #21
 8001432:	0b36      	lsrs	r6, r6, #12
 8001434:	0fd8      	lsrs	r0, r3, #31
 8001436:	42b9      	cmp	r1, r7
 8001438:	d020      	beq.n	800147c <__ledf2+0x78>
 800143a:	45ba      	cmp	sl, r7
 800143c:	d00f      	beq.n	800145e <__ledf2+0x5a>
 800143e:	2900      	cmp	r1, #0
 8001440:	d12b      	bne.n	800149a <__ledf2+0x96>
 8001442:	9901      	ldr	r1, [sp, #4]
 8001444:	430c      	orrs	r4, r1
 8001446:	4651      	mov	r1, sl
 8001448:	2900      	cmp	r1, #0
 800144a:	d137      	bne.n	80014bc <__ledf2+0xb8>
 800144c:	4332      	orrs	r2, r6
 800144e:	d038      	beq.n	80014c2 <__ledf2+0xbe>
 8001450:	2c00      	cmp	r4, #0
 8001452:	d144      	bne.n	80014de <__ledf2+0xda>
 8001454:	2800      	cmp	r0, #0
 8001456:	d119      	bne.n	800148c <__ledf2+0x88>
 8001458:	2001      	movs	r0, #1
 800145a:	4240      	negs	r0, r0
 800145c:	e016      	b.n	800148c <__ledf2+0x88>
 800145e:	4316      	orrs	r6, r2
 8001460:	d113      	bne.n	800148a <__ledf2+0x86>
 8001462:	2900      	cmp	r1, #0
 8001464:	d102      	bne.n	800146c <__ledf2+0x68>
 8001466:	9f01      	ldr	r7, [sp, #4]
 8001468:	4327      	orrs	r7, r4
 800146a:	d0f3      	beq.n	8001454 <__ledf2+0x50>
 800146c:	4584      	cmp	ip, r0
 800146e:	d020      	beq.n	80014b2 <__ledf2+0xae>
 8001470:	4663      	mov	r3, ip
 8001472:	2002      	movs	r0, #2
 8001474:	3b01      	subs	r3, #1
 8001476:	4018      	ands	r0, r3
 8001478:	3801      	subs	r0, #1
 800147a:	e007      	b.n	800148c <__ledf2+0x88>
 800147c:	9f01      	ldr	r7, [sp, #4]
 800147e:	4327      	orrs	r7, r4
 8001480:	d103      	bne.n	800148a <__ledf2+0x86>
 8001482:	458a      	cmp	sl, r1
 8001484:	d1f4      	bne.n	8001470 <__ledf2+0x6c>
 8001486:	4316      	orrs	r6, r2
 8001488:	d01f      	beq.n	80014ca <__ledf2+0xc6>
 800148a:	2002      	movs	r0, #2
 800148c:	b003      	add	sp, #12
 800148e:	bcf0      	pop	{r4, r5, r6, r7}
 8001490:	46bb      	mov	fp, r7
 8001492:	46b2      	mov	sl, r6
 8001494:	46a9      	mov	r9, r5
 8001496:	46a0      	mov	r8, r4
 8001498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800149a:	4654      	mov	r4, sl
 800149c:	2c00      	cmp	r4, #0
 800149e:	d0e7      	beq.n	8001470 <__ledf2+0x6c>
 80014a0:	4584      	cmp	ip, r0
 80014a2:	d1e5      	bne.n	8001470 <__ledf2+0x6c>
 80014a4:	4551      	cmp	r1, sl
 80014a6:	dce3      	bgt.n	8001470 <__ledf2+0x6c>
 80014a8:	db03      	blt.n	80014b2 <__ledf2+0xae>
 80014aa:	9b01      	ldr	r3, [sp, #4]
 80014ac:	42b3      	cmp	r3, r6
 80014ae:	d8df      	bhi.n	8001470 <__ledf2+0x6c>
 80014b0:	d00f      	beq.n	80014d2 <__ledf2+0xce>
 80014b2:	4663      	mov	r3, ip
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0cf      	beq.n	8001458 <__ledf2+0x54>
 80014b8:	4660      	mov	r0, ip
 80014ba:	e7e7      	b.n	800148c <__ledf2+0x88>
 80014bc:	2c00      	cmp	r4, #0
 80014be:	d0c9      	beq.n	8001454 <__ledf2+0x50>
 80014c0:	e7d4      	b.n	800146c <__ledf2+0x68>
 80014c2:	2000      	movs	r0, #0
 80014c4:	2c00      	cmp	r4, #0
 80014c6:	d0e1      	beq.n	800148c <__ledf2+0x88>
 80014c8:	e7d2      	b.n	8001470 <__ledf2+0x6c>
 80014ca:	4584      	cmp	ip, r0
 80014cc:	d1d0      	bne.n	8001470 <__ledf2+0x6c>
 80014ce:	2000      	movs	r0, #0
 80014d0:	e7dc      	b.n	800148c <__ledf2+0x88>
 80014d2:	45c8      	cmp	r8, r9
 80014d4:	d8cc      	bhi.n	8001470 <__ledf2+0x6c>
 80014d6:	2000      	movs	r0, #0
 80014d8:	45c8      	cmp	r8, r9
 80014da:	d2d7      	bcs.n	800148c <__ledf2+0x88>
 80014dc:	e7e9      	b.n	80014b2 <__ledf2+0xae>
 80014de:	4584      	cmp	ip, r0
 80014e0:	d0e3      	beq.n	80014aa <__ledf2+0xa6>
 80014e2:	e7c5      	b.n	8001470 <__ledf2+0x6c>
 80014e4:	000007ff 	.word	0x000007ff

080014e8 <__aeabi_dmul>:
 80014e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ea:	4657      	mov	r7, sl
 80014ec:	46de      	mov	lr, fp
 80014ee:	464e      	mov	r6, r9
 80014f0:	4645      	mov	r5, r8
 80014f2:	b5e0      	push	{r5, r6, r7, lr}
 80014f4:	001f      	movs	r7, r3
 80014f6:	030b      	lsls	r3, r1, #12
 80014f8:	0b1b      	lsrs	r3, r3, #12
 80014fa:	0016      	movs	r6, r2
 80014fc:	469a      	mov	sl, r3
 80014fe:	0fca      	lsrs	r2, r1, #31
 8001500:	004b      	lsls	r3, r1, #1
 8001502:	0004      	movs	r4, r0
 8001504:	4693      	mov	fp, r2
 8001506:	b087      	sub	sp, #28
 8001508:	0d5b      	lsrs	r3, r3, #21
 800150a:	d100      	bne.n	800150e <__aeabi_dmul+0x26>
 800150c:	e0d5      	b.n	80016ba <__aeabi_dmul+0x1d2>
 800150e:	4abb      	ldr	r2, [pc, #748]	@ (80017fc <__aeabi_dmul+0x314>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d100      	bne.n	8001516 <__aeabi_dmul+0x2e>
 8001514:	e0f8      	b.n	8001708 <__aeabi_dmul+0x220>
 8001516:	4651      	mov	r1, sl
 8001518:	0f42      	lsrs	r2, r0, #29
 800151a:	00c9      	lsls	r1, r1, #3
 800151c:	430a      	orrs	r2, r1
 800151e:	2180      	movs	r1, #128	@ 0x80
 8001520:	0409      	lsls	r1, r1, #16
 8001522:	4311      	orrs	r1, r2
 8001524:	00c2      	lsls	r2, r0, #3
 8001526:	4691      	mov	r9, r2
 8001528:	4ab5      	ldr	r2, [pc, #724]	@ (8001800 <__aeabi_dmul+0x318>)
 800152a:	468a      	mov	sl, r1
 800152c:	189d      	adds	r5, r3, r2
 800152e:	2300      	movs	r3, #0
 8001530:	4698      	mov	r8, r3
 8001532:	9302      	str	r3, [sp, #8]
 8001534:	033c      	lsls	r4, r7, #12
 8001536:	007b      	lsls	r3, r7, #1
 8001538:	0ffa      	lsrs	r2, r7, #31
 800153a:	0030      	movs	r0, r6
 800153c:	0b24      	lsrs	r4, r4, #12
 800153e:	0d5b      	lsrs	r3, r3, #21
 8001540:	9200      	str	r2, [sp, #0]
 8001542:	d100      	bne.n	8001546 <__aeabi_dmul+0x5e>
 8001544:	e096      	b.n	8001674 <__aeabi_dmul+0x18c>
 8001546:	4aad      	ldr	r2, [pc, #692]	@ (80017fc <__aeabi_dmul+0x314>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d031      	beq.n	80015b0 <__aeabi_dmul+0xc8>
 800154c:	0f72      	lsrs	r2, r6, #29
 800154e:	00e4      	lsls	r4, r4, #3
 8001550:	4322      	orrs	r2, r4
 8001552:	2480      	movs	r4, #128	@ 0x80
 8001554:	0424      	lsls	r4, r4, #16
 8001556:	4314      	orrs	r4, r2
 8001558:	4aa9      	ldr	r2, [pc, #676]	@ (8001800 <__aeabi_dmul+0x318>)
 800155a:	00f0      	lsls	r0, r6, #3
 800155c:	4694      	mov	ip, r2
 800155e:	4463      	add	r3, ip
 8001560:	195b      	adds	r3, r3, r5
 8001562:	1c5a      	adds	r2, r3, #1
 8001564:	9201      	str	r2, [sp, #4]
 8001566:	4642      	mov	r2, r8
 8001568:	2600      	movs	r6, #0
 800156a:	2a0a      	cmp	r2, #10
 800156c:	dc42      	bgt.n	80015f4 <__aeabi_dmul+0x10c>
 800156e:	465a      	mov	r2, fp
 8001570:	9900      	ldr	r1, [sp, #0]
 8001572:	404a      	eors	r2, r1
 8001574:	4693      	mov	fp, r2
 8001576:	4642      	mov	r2, r8
 8001578:	2a02      	cmp	r2, #2
 800157a:	dc32      	bgt.n	80015e2 <__aeabi_dmul+0xfa>
 800157c:	3a01      	subs	r2, #1
 800157e:	2a01      	cmp	r2, #1
 8001580:	d900      	bls.n	8001584 <__aeabi_dmul+0x9c>
 8001582:	e149      	b.n	8001818 <__aeabi_dmul+0x330>
 8001584:	2e02      	cmp	r6, #2
 8001586:	d100      	bne.n	800158a <__aeabi_dmul+0xa2>
 8001588:	e0ca      	b.n	8001720 <__aeabi_dmul+0x238>
 800158a:	2e01      	cmp	r6, #1
 800158c:	d13d      	bne.n	800160a <__aeabi_dmul+0x122>
 800158e:	2300      	movs	r3, #0
 8001590:	2400      	movs	r4, #0
 8001592:	2200      	movs	r2, #0
 8001594:	0010      	movs	r0, r2
 8001596:	465a      	mov	r2, fp
 8001598:	051b      	lsls	r3, r3, #20
 800159a:	4323      	orrs	r3, r4
 800159c:	07d2      	lsls	r2, r2, #31
 800159e:	4313      	orrs	r3, r2
 80015a0:	0019      	movs	r1, r3
 80015a2:	b007      	add	sp, #28
 80015a4:	bcf0      	pop	{r4, r5, r6, r7}
 80015a6:	46bb      	mov	fp, r7
 80015a8:	46b2      	mov	sl, r6
 80015aa:	46a9      	mov	r9, r5
 80015ac:	46a0      	mov	r8, r4
 80015ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015b0:	4b92      	ldr	r3, [pc, #584]	@ (80017fc <__aeabi_dmul+0x314>)
 80015b2:	4326      	orrs	r6, r4
 80015b4:	18eb      	adds	r3, r5, r3
 80015b6:	2e00      	cmp	r6, #0
 80015b8:	d100      	bne.n	80015bc <__aeabi_dmul+0xd4>
 80015ba:	e0bb      	b.n	8001734 <__aeabi_dmul+0x24c>
 80015bc:	2203      	movs	r2, #3
 80015be:	4641      	mov	r1, r8
 80015c0:	4311      	orrs	r1, r2
 80015c2:	465a      	mov	r2, fp
 80015c4:	4688      	mov	r8, r1
 80015c6:	9900      	ldr	r1, [sp, #0]
 80015c8:	404a      	eors	r2, r1
 80015ca:	2180      	movs	r1, #128	@ 0x80
 80015cc:	0109      	lsls	r1, r1, #4
 80015ce:	468c      	mov	ip, r1
 80015d0:	0029      	movs	r1, r5
 80015d2:	4461      	add	r1, ip
 80015d4:	9101      	str	r1, [sp, #4]
 80015d6:	4641      	mov	r1, r8
 80015d8:	290a      	cmp	r1, #10
 80015da:	dd00      	ble.n	80015de <__aeabi_dmul+0xf6>
 80015dc:	e233      	b.n	8001a46 <__aeabi_dmul+0x55e>
 80015de:	4693      	mov	fp, r2
 80015e0:	2603      	movs	r6, #3
 80015e2:	4642      	mov	r2, r8
 80015e4:	2701      	movs	r7, #1
 80015e6:	4097      	lsls	r7, r2
 80015e8:	21a6      	movs	r1, #166	@ 0xa6
 80015ea:	003a      	movs	r2, r7
 80015ec:	00c9      	lsls	r1, r1, #3
 80015ee:	400a      	ands	r2, r1
 80015f0:	420f      	tst	r7, r1
 80015f2:	d031      	beq.n	8001658 <__aeabi_dmul+0x170>
 80015f4:	9e02      	ldr	r6, [sp, #8]
 80015f6:	2e02      	cmp	r6, #2
 80015f8:	d100      	bne.n	80015fc <__aeabi_dmul+0x114>
 80015fa:	e235      	b.n	8001a68 <__aeabi_dmul+0x580>
 80015fc:	2e03      	cmp	r6, #3
 80015fe:	d100      	bne.n	8001602 <__aeabi_dmul+0x11a>
 8001600:	e1d2      	b.n	80019a8 <__aeabi_dmul+0x4c0>
 8001602:	4654      	mov	r4, sl
 8001604:	4648      	mov	r0, r9
 8001606:	2e01      	cmp	r6, #1
 8001608:	d0c1      	beq.n	800158e <__aeabi_dmul+0xa6>
 800160a:	9a01      	ldr	r2, [sp, #4]
 800160c:	4b7d      	ldr	r3, [pc, #500]	@ (8001804 <__aeabi_dmul+0x31c>)
 800160e:	4694      	mov	ip, r2
 8001610:	4463      	add	r3, ip
 8001612:	2b00      	cmp	r3, #0
 8001614:	dc00      	bgt.n	8001618 <__aeabi_dmul+0x130>
 8001616:	e0c0      	b.n	800179a <__aeabi_dmul+0x2b2>
 8001618:	0742      	lsls	r2, r0, #29
 800161a:	d009      	beq.n	8001630 <__aeabi_dmul+0x148>
 800161c:	220f      	movs	r2, #15
 800161e:	4002      	ands	r2, r0
 8001620:	2a04      	cmp	r2, #4
 8001622:	d005      	beq.n	8001630 <__aeabi_dmul+0x148>
 8001624:	1d02      	adds	r2, r0, #4
 8001626:	4282      	cmp	r2, r0
 8001628:	4180      	sbcs	r0, r0
 800162a:	4240      	negs	r0, r0
 800162c:	1824      	adds	r4, r4, r0
 800162e:	0010      	movs	r0, r2
 8001630:	01e2      	lsls	r2, r4, #7
 8001632:	d506      	bpl.n	8001642 <__aeabi_dmul+0x15a>
 8001634:	4b74      	ldr	r3, [pc, #464]	@ (8001808 <__aeabi_dmul+0x320>)
 8001636:	9a01      	ldr	r2, [sp, #4]
 8001638:	401c      	ands	r4, r3
 800163a:	2380      	movs	r3, #128	@ 0x80
 800163c:	4694      	mov	ip, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	4463      	add	r3, ip
 8001642:	4a72      	ldr	r2, [pc, #456]	@ (800180c <__aeabi_dmul+0x324>)
 8001644:	4293      	cmp	r3, r2
 8001646:	dc6b      	bgt.n	8001720 <__aeabi_dmul+0x238>
 8001648:	0762      	lsls	r2, r4, #29
 800164a:	08c0      	lsrs	r0, r0, #3
 800164c:	0264      	lsls	r4, r4, #9
 800164e:	055b      	lsls	r3, r3, #21
 8001650:	4302      	orrs	r2, r0
 8001652:	0b24      	lsrs	r4, r4, #12
 8001654:	0d5b      	lsrs	r3, r3, #21
 8001656:	e79d      	b.n	8001594 <__aeabi_dmul+0xac>
 8001658:	2190      	movs	r1, #144	@ 0x90
 800165a:	0089      	lsls	r1, r1, #2
 800165c:	420f      	tst	r7, r1
 800165e:	d163      	bne.n	8001728 <__aeabi_dmul+0x240>
 8001660:	2288      	movs	r2, #136	@ 0x88
 8001662:	423a      	tst	r2, r7
 8001664:	d100      	bne.n	8001668 <__aeabi_dmul+0x180>
 8001666:	e0d7      	b.n	8001818 <__aeabi_dmul+0x330>
 8001668:	9b00      	ldr	r3, [sp, #0]
 800166a:	46a2      	mov	sl, r4
 800166c:	469b      	mov	fp, r3
 800166e:	4681      	mov	r9, r0
 8001670:	9602      	str	r6, [sp, #8]
 8001672:	e7bf      	b.n	80015f4 <__aeabi_dmul+0x10c>
 8001674:	0023      	movs	r3, r4
 8001676:	4333      	orrs	r3, r6
 8001678:	d100      	bne.n	800167c <__aeabi_dmul+0x194>
 800167a:	e07f      	b.n	800177c <__aeabi_dmul+0x294>
 800167c:	2c00      	cmp	r4, #0
 800167e:	d100      	bne.n	8001682 <__aeabi_dmul+0x19a>
 8001680:	e1ad      	b.n	80019de <__aeabi_dmul+0x4f6>
 8001682:	0020      	movs	r0, r4
 8001684:	f000 fb5c 	bl	8001d40 <__clzsi2>
 8001688:	0002      	movs	r2, r0
 800168a:	0003      	movs	r3, r0
 800168c:	3a0b      	subs	r2, #11
 800168e:	201d      	movs	r0, #29
 8001690:	0019      	movs	r1, r3
 8001692:	1a82      	subs	r2, r0, r2
 8001694:	0030      	movs	r0, r6
 8001696:	3908      	subs	r1, #8
 8001698:	40d0      	lsrs	r0, r2
 800169a:	408c      	lsls	r4, r1
 800169c:	4304      	orrs	r4, r0
 800169e:	0030      	movs	r0, r6
 80016a0:	4088      	lsls	r0, r1
 80016a2:	4a5b      	ldr	r2, [pc, #364]	@ (8001810 <__aeabi_dmul+0x328>)
 80016a4:	1aeb      	subs	r3, r5, r3
 80016a6:	4694      	mov	ip, r2
 80016a8:	4463      	add	r3, ip
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	9201      	str	r2, [sp, #4]
 80016ae:	4642      	mov	r2, r8
 80016b0:	2600      	movs	r6, #0
 80016b2:	2a0a      	cmp	r2, #10
 80016b4:	dc00      	bgt.n	80016b8 <__aeabi_dmul+0x1d0>
 80016b6:	e75a      	b.n	800156e <__aeabi_dmul+0x86>
 80016b8:	e79c      	b.n	80015f4 <__aeabi_dmul+0x10c>
 80016ba:	4653      	mov	r3, sl
 80016bc:	4303      	orrs	r3, r0
 80016be:	4699      	mov	r9, r3
 80016c0:	d054      	beq.n	800176c <__aeabi_dmul+0x284>
 80016c2:	4653      	mov	r3, sl
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d100      	bne.n	80016ca <__aeabi_dmul+0x1e2>
 80016c8:	e177      	b.n	80019ba <__aeabi_dmul+0x4d2>
 80016ca:	4650      	mov	r0, sl
 80016cc:	f000 fb38 	bl	8001d40 <__clzsi2>
 80016d0:	230b      	movs	r3, #11
 80016d2:	425b      	negs	r3, r3
 80016d4:	469c      	mov	ip, r3
 80016d6:	0002      	movs	r2, r0
 80016d8:	4484      	add	ip, r0
 80016da:	0011      	movs	r1, r2
 80016dc:	4650      	mov	r0, sl
 80016de:	3908      	subs	r1, #8
 80016e0:	4088      	lsls	r0, r1
 80016e2:	231d      	movs	r3, #29
 80016e4:	4680      	mov	r8, r0
 80016e6:	4660      	mov	r0, ip
 80016e8:	1a1b      	subs	r3, r3, r0
 80016ea:	0020      	movs	r0, r4
 80016ec:	40d8      	lsrs	r0, r3
 80016ee:	0003      	movs	r3, r0
 80016f0:	4640      	mov	r0, r8
 80016f2:	4303      	orrs	r3, r0
 80016f4:	469a      	mov	sl, r3
 80016f6:	0023      	movs	r3, r4
 80016f8:	408b      	lsls	r3, r1
 80016fa:	4699      	mov	r9, r3
 80016fc:	2300      	movs	r3, #0
 80016fe:	4d44      	ldr	r5, [pc, #272]	@ (8001810 <__aeabi_dmul+0x328>)
 8001700:	4698      	mov	r8, r3
 8001702:	1aad      	subs	r5, r5, r2
 8001704:	9302      	str	r3, [sp, #8]
 8001706:	e715      	b.n	8001534 <__aeabi_dmul+0x4c>
 8001708:	4652      	mov	r2, sl
 800170a:	4302      	orrs	r2, r0
 800170c:	4691      	mov	r9, r2
 800170e:	d126      	bne.n	800175e <__aeabi_dmul+0x276>
 8001710:	2200      	movs	r2, #0
 8001712:	001d      	movs	r5, r3
 8001714:	2302      	movs	r3, #2
 8001716:	4692      	mov	sl, r2
 8001718:	3208      	adds	r2, #8
 800171a:	4690      	mov	r8, r2
 800171c:	9302      	str	r3, [sp, #8]
 800171e:	e709      	b.n	8001534 <__aeabi_dmul+0x4c>
 8001720:	2400      	movs	r4, #0
 8001722:	2200      	movs	r2, #0
 8001724:	4b35      	ldr	r3, [pc, #212]	@ (80017fc <__aeabi_dmul+0x314>)
 8001726:	e735      	b.n	8001594 <__aeabi_dmul+0xac>
 8001728:	2300      	movs	r3, #0
 800172a:	2480      	movs	r4, #128	@ 0x80
 800172c:	469b      	mov	fp, r3
 800172e:	0324      	lsls	r4, r4, #12
 8001730:	4b32      	ldr	r3, [pc, #200]	@ (80017fc <__aeabi_dmul+0x314>)
 8001732:	e72f      	b.n	8001594 <__aeabi_dmul+0xac>
 8001734:	2202      	movs	r2, #2
 8001736:	4641      	mov	r1, r8
 8001738:	4311      	orrs	r1, r2
 800173a:	2280      	movs	r2, #128	@ 0x80
 800173c:	0112      	lsls	r2, r2, #4
 800173e:	4694      	mov	ip, r2
 8001740:	002a      	movs	r2, r5
 8001742:	4462      	add	r2, ip
 8001744:	4688      	mov	r8, r1
 8001746:	9201      	str	r2, [sp, #4]
 8001748:	290a      	cmp	r1, #10
 800174a:	dd00      	ble.n	800174e <__aeabi_dmul+0x266>
 800174c:	e752      	b.n	80015f4 <__aeabi_dmul+0x10c>
 800174e:	465a      	mov	r2, fp
 8001750:	2000      	movs	r0, #0
 8001752:	9900      	ldr	r1, [sp, #0]
 8001754:	0004      	movs	r4, r0
 8001756:	404a      	eors	r2, r1
 8001758:	4693      	mov	fp, r2
 800175a:	2602      	movs	r6, #2
 800175c:	e70b      	b.n	8001576 <__aeabi_dmul+0x8e>
 800175e:	220c      	movs	r2, #12
 8001760:	001d      	movs	r5, r3
 8001762:	2303      	movs	r3, #3
 8001764:	4681      	mov	r9, r0
 8001766:	4690      	mov	r8, r2
 8001768:	9302      	str	r3, [sp, #8]
 800176a:	e6e3      	b.n	8001534 <__aeabi_dmul+0x4c>
 800176c:	2300      	movs	r3, #0
 800176e:	469a      	mov	sl, r3
 8001770:	3304      	adds	r3, #4
 8001772:	4698      	mov	r8, r3
 8001774:	3b03      	subs	r3, #3
 8001776:	2500      	movs	r5, #0
 8001778:	9302      	str	r3, [sp, #8]
 800177a:	e6db      	b.n	8001534 <__aeabi_dmul+0x4c>
 800177c:	4642      	mov	r2, r8
 800177e:	3301      	adds	r3, #1
 8001780:	431a      	orrs	r2, r3
 8001782:	002b      	movs	r3, r5
 8001784:	4690      	mov	r8, r2
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	9201      	str	r2, [sp, #4]
 800178a:	4642      	mov	r2, r8
 800178c:	2400      	movs	r4, #0
 800178e:	2000      	movs	r0, #0
 8001790:	2601      	movs	r6, #1
 8001792:	2a0a      	cmp	r2, #10
 8001794:	dc00      	bgt.n	8001798 <__aeabi_dmul+0x2b0>
 8001796:	e6ea      	b.n	800156e <__aeabi_dmul+0x86>
 8001798:	e72c      	b.n	80015f4 <__aeabi_dmul+0x10c>
 800179a:	2201      	movs	r2, #1
 800179c:	1ad2      	subs	r2, r2, r3
 800179e:	2a38      	cmp	r2, #56	@ 0x38
 80017a0:	dd00      	ble.n	80017a4 <__aeabi_dmul+0x2bc>
 80017a2:	e6f4      	b.n	800158e <__aeabi_dmul+0xa6>
 80017a4:	2a1f      	cmp	r2, #31
 80017a6:	dc00      	bgt.n	80017aa <__aeabi_dmul+0x2c2>
 80017a8:	e12a      	b.n	8001a00 <__aeabi_dmul+0x518>
 80017aa:	211f      	movs	r1, #31
 80017ac:	4249      	negs	r1, r1
 80017ae:	1acb      	subs	r3, r1, r3
 80017b0:	0021      	movs	r1, r4
 80017b2:	40d9      	lsrs	r1, r3
 80017b4:	000b      	movs	r3, r1
 80017b6:	2a20      	cmp	r2, #32
 80017b8:	d005      	beq.n	80017c6 <__aeabi_dmul+0x2de>
 80017ba:	4a16      	ldr	r2, [pc, #88]	@ (8001814 <__aeabi_dmul+0x32c>)
 80017bc:	9d01      	ldr	r5, [sp, #4]
 80017be:	4694      	mov	ip, r2
 80017c0:	4465      	add	r5, ip
 80017c2:	40ac      	lsls	r4, r5
 80017c4:	4320      	orrs	r0, r4
 80017c6:	1e42      	subs	r2, r0, #1
 80017c8:	4190      	sbcs	r0, r2
 80017ca:	4318      	orrs	r0, r3
 80017cc:	2307      	movs	r3, #7
 80017ce:	0019      	movs	r1, r3
 80017d0:	2400      	movs	r4, #0
 80017d2:	4001      	ands	r1, r0
 80017d4:	4203      	tst	r3, r0
 80017d6:	d00c      	beq.n	80017f2 <__aeabi_dmul+0x30a>
 80017d8:	230f      	movs	r3, #15
 80017da:	4003      	ands	r3, r0
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d100      	bne.n	80017e2 <__aeabi_dmul+0x2fa>
 80017e0:	e140      	b.n	8001a64 <__aeabi_dmul+0x57c>
 80017e2:	1d03      	adds	r3, r0, #4
 80017e4:	4283      	cmp	r3, r0
 80017e6:	41a4      	sbcs	r4, r4
 80017e8:	0018      	movs	r0, r3
 80017ea:	4264      	negs	r4, r4
 80017ec:	0761      	lsls	r1, r4, #29
 80017ee:	0264      	lsls	r4, r4, #9
 80017f0:	0b24      	lsrs	r4, r4, #12
 80017f2:	08c2      	lsrs	r2, r0, #3
 80017f4:	2300      	movs	r3, #0
 80017f6:	430a      	orrs	r2, r1
 80017f8:	e6cc      	b.n	8001594 <__aeabi_dmul+0xac>
 80017fa:	46c0      	nop			@ (mov r8, r8)
 80017fc:	000007ff 	.word	0x000007ff
 8001800:	fffffc01 	.word	0xfffffc01
 8001804:	000003ff 	.word	0x000003ff
 8001808:	feffffff 	.word	0xfeffffff
 800180c:	000007fe 	.word	0x000007fe
 8001810:	fffffc0d 	.word	0xfffffc0d
 8001814:	0000043e 	.word	0x0000043e
 8001818:	4649      	mov	r1, r9
 800181a:	464a      	mov	r2, r9
 800181c:	0409      	lsls	r1, r1, #16
 800181e:	0c09      	lsrs	r1, r1, #16
 8001820:	000d      	movs	r5, r1
 8001822:	0c16      	lsrs	r6, r2, #16
 8001824:	0c02      	lsrs	r2, r0, #16
 8001826:	0400      	lsls	r0, r0, #16
 8001828:	0c00      	lsrs	r0, r0, #16
 800182a:	4345      	muls	r5, r0
 800182c:	46ac      	mov	ip, r5
 800182e:	0005      	movs	r5, r0
 8001830:	4375      	muls	r5, r6
 8001832:	46a8      	mov	r8, r5
 8001834:	0015      	movs	r5, r2
 8001836:	000f      	movs	r7, r1
 8001838:	4375      	muls	r5, r6
 800183a:	9200      	str	r2, [sp, #0]
 800183c:	9502      	str	r5, [sp, #8]
 800183e:	002a      	movs	r2, r5
 8001840:	9d00      	ldr	r5, [sp, #0]
 8001842:	436f      	muls	r7, r5
 8001844:	4665      	mov	r5, ip
 8001846:	0c2d      	lsrs	r5, r5, #16
 8001848:	46a9      	mov	r9, r5
 800184a:	4447      	add	r7, r8
 800184c:	444f      	add	r7, r9
 800184e:	45b8      	cmp	r8, r7
 8001850:	d905      	bls.n	800185e <__aeabi_dmul+0x376>
 8001852:	0015      	movs	r5, r2
 8001854:	2280      	movs	r2, #128	@ 0x80
 8001856:	0252      	lsls	r2, r2, #9
 8001858:	4690      	mov	r8, r2
 800185a:	4445      	add	r5, r8
 800185c:	9502      	str	r5, [sp, #8]
 800185e:	0c3d      	lsrs	r5, r7, #16
 8001860:	9503      	str	r5, [sp, #12]
 8001862:	4665      	mov	r5, ip
 8001864:	042d      	lsls	r5, r5, #16
 8001866:	043f      	lsls	r7, r7, #16
 8001868:	0c2d      	lsrs	r5, r5, #16
 800186a:	46ac      	mov	ip, r5
 800186c:	003d      	movs	r5, r7
 800186e:	4465      	add	r5, ip
 8001870:	9504      	str	r5, [sp, #16]
 8001872:	0c25      	lsrs	r5, r4, #16
 8001874:	0424      	lsls	r4, r4, #16
 8001876:	0c24      	lsrs	r4, r4, #16
 8001878:	46ac      	mov	ip, r5
 800187a:	0025      	movs	r5, r4
 800187c:	4375      	muls	r5, r6
 800187e:	46a8      	mov	r8, r5
 8001880:	4665      	mov	r5, ip
 8001882:	000f      	movs	r7, r1
 8001884:	4369      	muls	r1, r5
 8001886:	4441      	add	r1, r8
 8001888:	4689      	mov	r9, r1
 800188a:	4367      	muls	r7, r4
 800188c:	0c39      	lsrs	r1, r7, #16
 800188e:	4449      	add	r1, r9
 8001890:	436e      	muls	r6, r5
 8001892:	4588      	cmp	r8, r1
 8001894:	d903      	bls.n	800189e <__aeabi_dmul+0x3b6>
 8001896:	2280      	movs	r2, #128	@ 0x80
 8001898:	0252      	lsls	r2, r2, #9
 800189a:	4690      	mov	r8, r2
 800189c:	4446      	add	r6, r8
 800189e:	0c0d      	lsrs	r5, r1, #16
 80018a0:	46a8      	mov	r8, r5
 80018a2:	0035      	movs	r5, r6
 80018a4:	4445      	add	r5, r8
 80018a6:	9505      	str	r5, [sp, #20]
 80018a8:	9d03      	ldr	r5, [sp, #12]
 80018aa:	043f      	lsls	r7, r7, #16
 80018ac:	46a8      	mov	r8, r5
 80018ae:	0c3f      	lsrs	r7, r7, #16
 80018b0:	0409      	lsls	r1, r1, #16
 80018b2:	19c9      	adds	r1, r1, r7
 80018b4:	4488      	add	r8, r1
 80018b6:	4645      	mov	r5, r8
 80018b8:	9503      	str	r5, [sp, #12]
 80018ba:	4655      	mov	r5, sl
 80018bc:	042e      	lsls	r6, r5, #16
 80018be:	0c36      	lsrs	r6, r6, #16
 80018c0:	0c2f      	lsrs	r7, r5, #16
 80018c2:	0035      	movs	r5, r6
 80018c4:	4345      	muls	r5, r0
 80018c6:	4378      	muls	r0, r7
 80018c8:	4681      	mov	r9, r0
 80018ca:	0038      	movs	r0, r7
 80018cc:	46a8      	mov	r8, r5
 80018ce:	0c2d      	lsrs	r5, r5, #16
 80018d0:	46aa      	mov	sl, r5
 80018d2:	9a00      	ldr	r2, [sp, #0]
 80018d4:	4350      	muls	r0, r2
 80018d6:	4372      	muls	r2, r6
 80018d8:	444a      	add	r2, r9
 80018da:	4452      	add	r2, sl
 80018dc:	4591      	cmp	r9, r2
 80018de:	d903      	bls.n	80018e8 <__aeabi_dmul+0x400>
 80018e0:	2580      	movs	r5, #128	@ 0x80
 80018e2:	026d      	lsls	r5, r5, #9
 80018e4:	46a9      	mov	r9, r5
 80018e6:	4448      	add	r0, r9
 80018e8:	0c15      	lsrs	r5, r2, #16
 80018ea:	46a9      	mov	r9, r5
 80018ec:	4645      	mov	r5, r8
 80018ee:	042d      	lsls	r5, r5, #16
 80018f0:	0c2d      	lsrs	r5, r5, #16
 80018f2:	46a8      	mov	r8, r5
 80018f4:	4665      	mov	r5, ip
 80018f6:	437d      	muls	r5, r7
 80018f8:	0412      	lsls	r2, r2, #16
 80018fa:	4448      	add	r0, r9
 80018fc:	4490      	add	r8, r2
 80018fe:	46a9      	mov	r9, r5
 8001900:	0032      	movs	r2, r6
 8001902:	4665      	mov	r5, ip
 8001904:	4362      	muls	r2, r4
 8001906:	436e      	muls	r6, r5
 8001908:	437c      	muls	r4, r7
 800190a:	0c17      	lsrs	r7, r2, #16
 800190c:	1936      	adds	r6, r6, r4
 800190e:	19bf      	adds	r7, r7, r6
 8001910:	42bc      	cmp	r4, r7
 8001912:	d903      	bls.n	800191c <__aeabi_dmul+0x434>
 8001914:	2480      	movs	r4, #128	@ 0x80
 8001916:	0264      	lsls	r4, r4, #9
 8001918:	46a4      	mov	ip, r4
 800191a:	44e1      	add	r9, ip
 800191c:	9c02      	ldr	r4, [sp, #8]
 800191e:	9e03      	ldr	r6, [sp, #12]
 8001920:	46a4      	mov	ip, r4
 8001922:	9d05      	ldr	r5, [sp, #20]
 8001924:	4466      	add	r6, ip
 8001926:	428e      	cmp	r6, r1
 8001928:	4189      	sbcs	r1, r1
 800192a:	46ac      	mov	ip, r5
 800192c:	0412      	lsls	r2, r2, #16
 800192e:	043c      	lsls	r4, r7, #16
 8001930:	0c12      	lsrs	r2, r2, #16
 8001932:	18a2      	adds	r2, r4, r2
 8001934:	4462      	add	r2, ip
 8001936:	4249      	negs	r1, r1
 8001938:	1854      	adds	r4, r2, r1
 800193a:	4446      	add	r6, r8
 800193c:	46a4      	mov	ip, r4
 800193e:	4546      	cmp	r6, r8
 8001940:	41a4      	sbcs	r4, r4
 8001942:	4682      	mov	sl, r0
 8001944:	4264      	negs	r4, r4
 8001946:	46a0      	mov	r8, r4
 8001948:	42aa      	cmp	r2, r5
 800194a:	4192      	sbcs	r2, r2
 800194c:	458c      	cmp	ip, r1
 800194e:	4189      	sbcs	r1, r1
 8001950:	44e2      	add	sl, ip
 8001952:	44d0      	add	r8, sl
 8001954:	4249      	negs	r1, r1
 8001956:	4252      	negs	r2, r2
 8001958:	430a      	orrs	r2, r1
 800195a:	45a0      	cmp	r8, r4
 800195c:	41a4      	sbcs	r4, r4
 800195e:	4582      	cmp	sl, r0
 8001960:	4189      	sbcs	r1, r1
 8001962:	4264      	negs	r4, r4
 8001964:	4249      	negs	r1, r1
 8001966:	430c      	orrs	r4, r1
 8001968:	4641      	mov	r1, r8
 800196a:	0c3f      	lsrs	r7, r7, #16
 800196c:	19d2      	adds	r2, r2, r7
 800196e:	1912      	adds	r2, r2, r4
 8001970:	0dcc      	lsrs	r4, r1, #23
 8001972:	9904      	ldr	r1, [sp, #16]
 8001974:	0270      	lsls	r0, r6, #9
 8001976:	4308      	orrs	r0, r1
 8001978:	1e41      	subs	r1, r0, #1
 800197a:	4188      	sbcs	r0, r1
 800197c:	4641      	mov	r1, r8
 800197e:	444a      	add	r2, r9
 8001980:	0df6      	lsrs	r6, r6, #23
 8001982:	0252      	lsls	r2, r2, #9
 8001984:	4330      	orrs	r0, r6
 8001986:	0249      	lsls	r1, r1, #9
 8001988:	4314      	orrs	r4, r2
 800198a:	4308      	orrs	r0, r1
 800198c:	01d2      	lsls	r2, r2, #7
 800198e:	d535      	bpl.n	80019fc <__aeabi_dmul+0x514>
 8001990:	2201      	movs	r2, #1
 8001992:	0843      	lsrs	r3, r0, #1
 8001994:	4002      	ands	r2, r0
 8001996:	4313      	orrs	r3, r2
 8001998:	07e0      	lsls	r0, r4, #31
 800199a:	4318      	orrs	r0, r3
 800199c:	0864      	lsrs	r4, r4, #1
 800199e:	e634      	b.n	800160a <__aeabi_dmul+0x122>
 80019a0:	9b00      	ldr	r3, [sp, #0]
 80019a2:	46a2      	mov	sl, r4
 80019a4:	469b      	mov	fp, r3
 80019a6:	4681      	mov	r9, r0
 80019a8:	2480      	movs	r4, #128	@ 0x80
 80019aa:	4653      	mov	r3, sl
 80019ac:	0324      	lsls	r4, r4, #12
 80019ae:	431c      	orrs	r4, r3
 80019b0:	0324      	lsls	r4, r4, #12
 80019b2:	464a      	mov	r2, r9
 80019b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001a70 <__aeabi_dmul+0x588>)
 80019b6:	0b24      	lsrs	r4, r4, #12
 80019b8:	e5ec      	b.n	8001594 <__aeabi_dmul+0xac>
 80019ba:	f000 f9c1 	bl	8001d40 <__clzsi2>
 80019be:	2315      	movs	r3, #21
 80019c0:	469c      	mov	ip, r3
 80019c2:	4484      	add	ip, r0
 80019c4:	0002      	movs	r2, r0
 80019c6:	4663      	mov	r3, ip
 80019c8:	3220      	adds	r2, #32
 80019ca:	2b1c      	cmp	r3, #28
 80019cc:	dc00      	bgt.n	80019d0 <__aeabi_dmul+0x4e8>
 80019ce:	e684      	b.n	80016da <__aeabi_dmul+0x1f2>
 80019d0:	2300      	movs	r3, #0
 80019d2:	4699      	mov	r9, r3
 80019d4:	0023      	movs	r3, r4
 80019d6:	3808      	subs	r0, #8
 80019d8:	4083      	lsls	r3, r0
 80019da:	469a      	mov	sl, r3
 80019dc:	e68e      	b.n	80016fc <__aeabi_dmul+0x214>
 80019de:	f000 f9af 	bl	8001d40 <__clzsi2>
 80019e2:	0002      	movs	r2, r0
 80019e4:	0003      	movs	r3, r0
 80019e6:	3215      	adds	r2, #21
 80019e8:	3320      	adds	r3, #32
 80019ea:	2a1c      	cmp	r2, #28
 80019ec:	dc00      	bgt.n	80019f0 <__aeabi_dmul+0x508>
 80019ee:	e64e      	b.n	800168e <__aeabi_dmul+0x1a6>
 80019f0:	0002      	movs	r2, r0
 80019f2:	0034      	movs	r4, r6
 80019f4:	3a08      	subs	r2, #8
 80019f6:	2000      	movs	r0, #0
 80019f8:	4094      	lsls	r4, r2
 80019fa:	e652      	b.n	80016a2 <__aeabi_dmul+0x1ba>
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	e604      	b.n	800160a <__aeabi_dmul+0x122>
 8001a00:	4b1c      	ldr	r3, [pc, #112]	@ (8001a74 <__aeabi_dmul+0x58c>)
 8001a02:	0021      	movs	r1, r4
 8001a04:	469c      	mov	ip, r3
 8001a06:	0003      	movs	r3, r0
 8001a08:	9d01      	ldr	r5, [sp, #4]
 8001a0a:	40d3      	lsrs	r3, r2
 8001a0c:	4465      	add	r5, ip
 8001a0e:	40a9      	lsls	r1, r5
 8001a10:	4319      	orrs	r1, r3
 8001a12:	0003      	movs	r3, r0
 8001a14:	40ab      	lsls	r3, r5
 8001a16:	1e58      	subs	r0, r3, #1
 8001a18:	4183      	sbcs	r3, r0
 8001a1a:	4319      	orrs	r1, r3
 8001a1c:	0008      	movs	r0, r1
 8001a1e:	40d4      	lsrs	r4, r2
 8001a20:	074b      	lsls	r3, r1, #29
 8001a22:	d009      	beq.n	8001a38 <__aeabi_dmul+0x550>
 8001a24:	230f      	movs	r3, #15
 8001a26:	400b      	ands	r3, r1
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d005      	beq.n	8001a38 <__aeabi_dmul+0x550>
 8001a2c:	1d0b      	adds	r3, r1, #4
 8001a2e:	428b      	cmp	r3, r1
 8001a30:	4180      	sbcs	r0, r0
 8001a32:	4240      	negs	r0, r0
 8001a34:	1824      	adds	r4, r4, r0
 8001a36:	0018      	movs	r0, r3
 8001a38:	0223      	lsls	r3, r4, #8
 8001a3a:	d400      	bmi.n	8001a3e <__aeabi_dmul+0x556>
 8001a3c:	e6d6      	b.n	80017ec <__aeabi_dmul+0x304>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	2400      	movs	r4, #0
 8001a42:	2200      	movs	r2, #0
 8001a44:	e5a6      	b.n	8001594 <__aeabi_dmul+0xac>
 8001a46:	290f      	cmp	r1, #15
 8001a48:	d1aa      	bne.n	80019a0 <__aeabi_dmul+0x4b8>
 8001a4a:	2380      	movs	r3, #128	@ 0x80
 8001a4c:	4652      	mov	r2, sl
 8001a4e:	031b      	lsls	r3, r3, #12
 8001a50:	421a      	tst	r2, r3
 8001a52:	d0a9      	beq.n	80019a8 <__aeabi_dmul+0x4c0>
 8001a54:	421c      	tst	r4, r3
 8001a56:	d1a7      	bne.n	80019a8 <__aeabi_dmul+0x4c0>
 8001a58:	431c      	orrs	r4, r3
 8001a5a:	9b00      	ldr	r3, [sp, #0]
 8001a5c:	0002      	movs	r2, r0
 8001a5e:	469b      	mov	fp, r3
 8001a60:	4b03      	ldr	r3, [pc, #12]	@ (8001a70 <__aeabi_dmul+0x588>)
 8001a62:	e597      	b.n	8001594 <__aeabi_dmul+0xac>
 8001a64:	2400      	movs	r4, #0
 8001a66:	e6c1      	b.n	80017ec <__aeabi_dmul+0x304>
 8001a68:	2400      	movs	r4, #0
 8001a6a:	4b01      	ldr	r3, [pc, #4]	@ (8001a70 <__aeabi_dmul+0x588>)
 8001a6c:	0022      	movs	r2, r4
 8001a6e:	e591      	b.n	8001594 <__aeabi_dmul+0xac>
 8001a70:	000007ff 	.word	0x000007ff
 8001a74:	0000041e 	.word	0x0000041e

08001a78 <__aeabi_dcmpun>:
 8001a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a7a:	46c6      	mov	lr, r8
 8001a7c:	031e      	lsls	r6, r3, #12
 8001a7e:	0b36      	lsrs	r6, r6, #12
 8001a80:	46b0      	mov	r8, r6
 8001a82:	4e0d      	ldr	r6, [pc, #52]	@ (8001ab8 <__aeabi_dcmpun+0x40>)
 8001a84:	030c      	lsls	r4, r1, #12
 8001a86:	004d      	lsls	r5, r1, #1
 8001a88:	005f      	lsls	r7, r3, #1
 8001a8a:	b500      	push	{lr}
 8001a8c:	0b24      	lsrs	r4, r4, #12
 8001a8e:	0d6d      	lsrs	r5, r5, #21
 8001a90:	0d7f      	lsrs	r7, r7, #21
 8001a92:	42b5      	cmp	r5, r6
 8001a94:	d00b      	beq.n	8001aae <__aeabi_dcmpun+0x36>
 8001a96:	4908      	ldr	r1, [pc, #32]	@ (8001ab8 <__aeabi_dcmpun+0x40>)
 8001a98:	2000      	movs	r0, #0
 8001a9a:	428f      	cmp	r7, r1
 8001a9c:	d104      	bne.n	8001aa8 <__aeabi_dcmpun+0x30>
 8001a9e:	4646      	mov	r6, r8
 8001aa0:	4316      	orrs	r6, r2
 8001aa2:	0030      	movs	r0, r6
 8001aa4:	1e43      	subs	r3, r0, #1
 8001aa6:	4198      	sbcs	r0, r3
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	46b8      	mov	r8, r7
 8001aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aae:	4304      	orrs	r4, r0
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	2c00      	cmp	r4, #0
 8001ab4:	d1f8      	bne.n	8001aa8 <__aeabi_dcmpun+0x30>
 8001ab6:	e7ee      	b.n	8001a96 <__aeabi_dcmpun+0x1e>
 8001ab8:	000007ff 	.word	0x000007ff

08001abc <__aeabi_d2iz>:
 8001abc:	000b      	movs	r3, r1
 8001abe:	0002      	movs	r2, r0
 8001ac0:	b570      	push	{r4, r5, r6, lr}
 8001ac2:	4d16      	ldr	r5, [pc, #88]	@ (8001b1c <__aeabi_d2iz+0x60>)
 8001ac4:	030c      	lsls	r4, r1, #12
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	0049      	lsls	r1, r1, #1
 8001aca:	2000      	movs	r0, #0
 8001acc:	9200      	str	r2, [sp, #0]
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	0b24      	lsrs	r4, r4, #12
 8001ad2:	0d49      	lsrs	r1, r1, #21
 8001ad4:	0fde      	lsrs	r6, r3, #31
 8001ad6:	42a9      	cmp	r1, r5
 8001ad8:	dd04      	ble.n	8001ae4 <__aeabi_d2iz+0x28>
 8001ada:	4811      	ldr	r0, [pc, #68]	@ (8001b20 <__aeabi_d2iz+0x64>)
 8001adc:	4281      	cmp	r1, r0
 8001ade:	dd03      	ble.n	8001ae8 <__aeabi_d2iz+0x2c>
 8001ae0:	4b10      	ldr	r3, [pc, #64]	@ (8001b24 <__aeabi_d2iz+0x68>)
 8001ae2:	18f0      	adds	r0, r6, r3
 8001ae4:	b002      	add	sp, #8
 8001ae6:	bd70      	pop	{r4, r5, r6, pc}
 8001ae8:	2080      	movs	r0, #128	@ 0x80
 8001aea:	0340      	lsls	r0, r0, #13
 8001aec:	4320      	orrs	r0, r4
 8001aee:	4c0e      	ldr	r4, [pc, #56]	@ (8001b28 <__aeabi_d2iz+0x6c>)
 8001af0:	1a64      	subs	r4, r4, r1
 8001af2:	2c1f      	cmp	r4, #31
 8001af4:	dd08      	ble.n	8001b08 <__aeabi_d2iz+0x4c>
 8001af6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <__aeabi_d2iz+0x70>)
 8001af8:	1a5b      	subs	r3, r3, r1
 8001afa:	40d8      	lsrs	r0, r3
 8001afc:	0003      	movs	r3, r0
 8001afe:	4258      	negs	r0, r3
 8001b00:	2e00      	cmp	r6, #0
 8001b02:	d1ef      	bne.n	8001ae4 <__aeabi_d2iz+0x28>
 8001b04:	0018      	movs	r0, r3
 8001b06:	e7ed      	b.n	8001ae4 <__aeabi_d2iz+0x28>
 8001b08:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <__aeabi_d2iz+0x74>)
 8001b0a:	9a00      	ldr	r2, [sp, #0]
 8001b0c:	469c      	mov	ip, r3
 8001b0e:	0003      	movs	r3, r0
 8001b10:	4461      	add	r1, ip
 8001b12:	408b      	lsls	r3, r1
 8001b14:	40e2      	lsrs	r2, r4
 8001b16:	4313      	orrs	r3, r2
 8001b18:	e7f1      	b.n	8001afe <__aeabi_d2iz+0x42>
 8001b1a:	46c0      	nop			@ (mov r8, r8)
 8001b1c:	000003fe 	.word	0x000003fe
 8001b20:	0000041d 	.word	0x0000041d
 8001b24:	7fffffff 	.word	0x7fffffff
 8001b28:	00000433 	.word	0x00000433
 8001b2c:	00000413 	.word	0x00000413
 8001b30:	fffffbed 	.word	0xfffffbed

08001b34 <__aeabi_f2d>:
 8001b34:	b570      	push	{r4, r5, r6, lr}
 8001b36:	0242      	lsls	r2, r0, #9
 8001b38:	0043      	lsls	r3, r0, #1
 8001b3a:	0fc4      	lsrs	r4, r0, #31
 8001b3c:	20fe      	movs	r0, #254	@ 0xfe
 8001b3e:	0e1b      	lsrs	r3, r3, #24
 8001b40:	1c59      	adds	r1, r3, #1
 8001b42:	0a55      	lsrs	r5, r2, #9
 8001b44:	4208      	tst	r0, r1
 8001b46:	d00c      	beq.n	8001b62 <__aeabi_f2d+0x2e>
 8001b48:	21e0      	movs	r1, #224	@ 0xe0
 8001b4a:	0089      	lsls	r1, r1, #2
 8001b4c:	468c      	mov	ip, r1
 8001b4e:	076d      	lsls	r5, r5, #29
 8001b50:	0b12      	lsrs	r2, r2, #12
 8001b52:	4463      	add	r3, ip
 8001b54:	051b      	lsls	r3, r3, #20
 8001b56:	4313      	orrs	r3, r2
 8001b58:	07e4      	lsls	r4, r4, #31
 8001b5a:	4323      	orrs	r3, r4
 8001b5c:	0028      	movs	r0, r5
 8001b5e:	0019      	movs	r1, r3
 8001b60:	bd70      	pop	{r4, r5, r6, pc}
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d114      	bne.n	8001b90 <__aeabi_f2d+0x5c>
 8001b66:	2d00      	cmp	r5, #0
 8001b68:	d01b      	beq.n	8001ba2 <__aeabi_f2d+0x6e>
 8001b6a:	0028      	movs	r0, r5
 8001b6c:	f000 f8e8 	bl	8001d40 <__clzsi2>
 8001b70:	280a      	cmp	r0, #10
 8001b72:	dc1c      	bgt.n	8001bae <__aeabi_f2d+0x7a>
 8001b74:	230b      	movs	r3, #11
 8001b76:	002a      	movs	r2, r5
 8001b78:	1a1b      	subs	r3, r3, r0
 8001b7a:	40da      	lsrs	r2, r3
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	3315      	adds	r3, #21
 8001b80:	409d      	lsls	r5, r3
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <__aeabi_f2d+0x88>)
 8001b84:	0312      	lsls	r2, r2, #12
 8001b86:	1a1b      	subs	r3, r3, r0
 8001b88:	055b      	lsls	r3, r3, #21
 8001b8a:	0b12      	lsrs	r2, r2, #12
 8001b8c:	0d5b      	lsrs	r3, r3, #21
 8001b8e:	e7e1      	b.n	8001b54 <__aeabi_f2d+0x20>
 8001b90:	2d00      	cmp	r5, #0
 8001b92:	d009      	beq.n	8001ba8 <__aeabi_f2d+0x74>
 8001b94:	0b13      	lsrs	r3, r2, #12
 8001b96:	2280      	movs	r2, #128	@ 0x80
 8001b98:	0312      	lsls	r2, r2, #12
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	076d      	lsls	r5, r5, #29
 8001b9e:	4b08      	ldr	r3, [pc, #32]	@ (8001bc0 <__aeabi_f2d+0x8c>)
 8001ba0:	e7d8      	b.n	8001b54 <__aeabi_f2d+0x20>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	e7d5      	b.n	8001b54 <__aeabi_f2d+0x20>
 8001ba8:	2200      	movs	r2, #0
 8001baa:	4b05      	ldr	r3, [pc, #20]	@ (8001bc0 <__aeabi_f2d+0x8c>)
 8001bac:	e7d2      	b.n	8001b54 <__aeabi_f2d+0x20>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	002a      	movs	r2, r5
 8001bb2:	3b0b      	subs	r3, #11
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	2500      	movs	r5, #0
 8001bb8:	e7e3      	b.n	8001b82 <__aeabi_f2d+0x4e>
 8001bba:	46c0      	nop			@ (mov r8, r8)
 8001bbc:	00000389 	.word	0x00000389
 8001bc0:	000007ff 	.word	0x000007ff

08001bc4 <__aeabi_d2f>:
 8001bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc6:	004b      	lsls	r3, r1, #1
 8001bc8:	030f      	lsls	r7, r1, #12
 8001bca:	0d5b      	lsrs	r3, r3, #21
 8001bcc:	4c3b      	ldr	r4, [pc, #236]	@ (8001cbc <__aeabi_d2f+0xf8>)
 8001bce:	0f45      	lsrs	r5, r0, #29
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	0a7f      	lsrs	r7, r7, #9
 8001bd4:	1c5e      	adds	r6, r3, #1
 8001bd6:	432f      	orrs	r7, r5
 8001bd8:	9000      	str	r0, [sp, #0]
 8001bda:	9101      	str	r1, [sp, #4]
 8001bdc:	0fca      	lsrs	r2, r1, #31
 8001bde:	00c5      	lsls	r5, r0, #3
 8001be0:	4226      	tst	r6, r4
 8001be2:	d00b      	beq.n	8001bfc <__aeabi_d2f+0x38>
 8001be4:	4936      	ldr	r1, [pc, #216]	@ (8001cc0 <__aeabi_d2f+0xfc>)
 8001be6:	185c      	adds	r4, r3, r1
 8001be8:	2cfe      	cmp	r4, #254	@ 0xfe
 8001bea:	dd13      	ble.n	8001c14 <__aeabi_d2f+0x50>
 8001bec:	20ff      	movs	r0, #255	@ 0xff
 8001bee:	2300      	movs	r3, #0
 8001bf0:	05c0      	lsls	r0, r0, #23
 8001bf2:	4318      	orrs	r0, r3
 8001bf4:	07d2      	lsls	r2, r2, #31
 8001bf6:	4310      	orrs	r0, r2
 8001bf8:	b003      	add	sp, #12
 8001bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d102      	bne.n	8001c06 <__aeabi_d2f+0x42>
 8001c00:	2000      	movs	r0, #0
 8001c02:	2300      	movs	r3, #0
 8001c04:	e7f4      	b.n	8001bf0 <__aeabi_d2f+0x2c>
 8001c06:	433d      	orrs	r5, r7
 8001c08:	d0f0      	beq.n	8001bec <__aeabi_d2f+0x28>
 8001c0a:	2380      	movs	r3, #128	@ 0x80
 8001c0c:	03db      	lsls	r3, r3, #15
 8001c0e:	20ff      	movs	r0, #255	@ 0xff
 8001c10:	433b      	orrs	r3, r7
 8001c12:	e7ed      	b.n	8001bf0 <__aeabi_d2f+0x2c>
 8001c14:	2c00      	cmp	r4, #0
 8001c16:	dd14      	ble.n	8001c42 <__aeabi_d2f+0x7e>
 8001c18:	9b00      	ldr	r3, [sp, #0]
 8001c1a:	00ff      	lsls	r7, r7, #3
 8001c1c:	019b      	lsls	r3, r3, #6
 8001c1e:	1e58      	subs	r0, r3, #1
 8001c20:	4183      	sbcs	r3, r0
 8001c22:	0f69      	lsrs	r1, r5, #29
 8001c24:	433b      	orrs	r3, r7
 8001c26:	430b      	orrs	r3, r1
 8001c28:	0759      	lsls	r1, r3, #29
 8001c2a:	d041      	beq.n	8001cb0 <__aeabi_d2f+0xec>
 8001c2c:	210f      	movs	r1, #15
 8001c2e:	4019      	ands	r1, r3
 8001c30:	2904      	cmp	r1, #4
 8001c32:	d028      	beq.n	8001c86 <__aeabi_d2f+0xc2>
 8001c34:	3304      	adds	r3, #4
 8001c36:	0159      	lsls	r1, r3, #5
 8001c38:	d525      	bpl.n	8001c86 <__aeabi_d2f+0xc2>
 8001c3a:	3401      	adds	r4, #1
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	b2e0      	uxtb	r0, r4
 8001c40:	e7d6      	b.n	8001bf0 <__aeabi_d2f+0x2c>
 8001c42:	0021      	movs	r1, r4
 8001c44:	3117      	adds	r1, #23
 8001c46:	dbdb      	blt.n	8001c00 <__aeabi_d2f+0x3c>
 8001c48:	2180      	movs	r1, #128	@ 0x80
 8001c4a:	201e      	movs	r0, #30
 8001c4c:	0409      	lsls	r1, r1, #16
 8001c4e:	4339      	orrs	r1, r7
 8001c50:	1b00      	subs	r0, r0, r4
 8001c52:	281f      	cmp	r0, #31
 8001c54:	dd1b      	ble.n	8001c8e <__aeabi_d2f+0xca>
 8001c56:	2602      	movs	r6, #2
 8001c58:	4276      	negs	r6, r6
 8001c5a:	1b34      	subs	r4, r6, r4
 8001c5c:	000e      	movs	r6, r1
 8001c5e:	40e6      	lsrs	r6, r4
 8001c60:	0034      	movs	r4, r6
 8001c62:	2820      	cmp	r0, #32
 8001c64:	d004      	beq.n	8001c70 <__aeabi_d2f+0xac>
 8001c66:	4817      	ldr	r0, [pc, #92]	@ (8001cc4 <__aeabi_d2f+0x100>)
 8001c68:	4684      	mov	ip, r0
 8001c6a:	4463      	add	r3, ip
 8001c6c:	4099      	lsls	r1, r3
 8001c6e:	430d      	orrs	r5, r1
 8001c70:	002b      	movs	r3, r5
 8001c72:	1e59      	subs	r1, r3, #1
 8001c74:	418b      	sbcs	r3, r1
 8001c76:	4323      	orrs	r3, r4
 8001c78:	0759      	lsls	r1, r3, #29
 8001c7a:	d015      	beq.n	8001ca8 <__aeabi_d2f+0xe4>
 8001c7c:	210f      	movs	r1, #15
 8001c7e:	2400      	movs	r4, #0
 8001c80:	4019      	ands	r1, r3
 8001c82:	2904      	cmp	r1, #4
 8001c84:	d117      	bne.n	8001cb6 <__aeabi_d2f+0xf2>
 8001c86:	019b      	lsls	r3, r3, #6
 8001c88:	0a5b      	lsrs	r3, r3, #9
 8001c8a:	b2e0      	uxtb	r0, r4
 8001c8c:	e7b0      	b.n	8001bf0 <__aeabi_d2f+0x2c>
 8001c8e:	4c0e      	ldr	r4, [pc, #56]	@ (8001cc8 <__aeabi_d2f+0x104>)
 8001c90:	191c      	adds	r4, r3, r4
 8001c92:	002b      	movs	r3, r5
 8001c94:	40a5      	lsls	r5, r4
 8001c96:	40c3      	lsrs	r3, r0
 8001c98:	40a1      	lsls	r1, r4
 8001c9a:	1e68      	subs	r0, r5, #1
 8001c9c:	4185      	sbcs	r5, r0
 8001c9e:	4329      	orrs	r1, r5
 8001ca0:	430b      	orrs	r3, r1
 8001ca2:	2400      	movs	r4, #0
 8001ca4:	0759      	lsls	r1, r3, #29
 8001ca6:	d1c1      	bne.n	8001c2c <__aeabi_d2f+0x68>
 8001ca8:	019b      	lsls	r3, r3, #6
 8001caa:	2000      	movs	r0, #0
 8001cac:	0a5b      	lsrs	r3, r3, #9
 8001cae:	e79f      	b.n	8001bf0 <__aeabi_d2f+0x2c>
 8001cb0:	08db      	lsrs	r3, r3, #3
 8001cb2:	b2e0      	uxtb	r0, r4
 8001cb4:	e79c      	b.n	8001bf0 <__aeabi_d2f+0x2c>
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	e7e5      	b.n	8001c86 <__aeabi_d2f+0xc2>
 8001cba:	46c0      	nop			@ (mov r8, r8)
 8001cbc:	000007fe 	.word	0x000007fe
 8001cc0:	fffffc80 	.word	0xfffffc80
 8001cc4:	fffffca2 	.word	0xfffffca2
 8001cc8:	fffffc82 	.word	0xfffffc82

08001ccc <__aeabi_cfrcmple>:
 8001ccc:	4684      	mov	ip, r0
 8001cce:	0008      	movs	r0, r1
 8001cd0:	4661      	mov	r1, ip
 8001cd2:	e7ff      	b.n	8001cd4 <__aeabi_cfcmpeq>

08001cd4 <__aeabi_cfcmpeq>:
 8001cd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001cd6:	f000 f8d5 	bl	8001e84 <__lesf2>
 8001cda:	2800      	cmp	r0, #0
 8001cdc:	d401      	bmi.n	8001ce2 <__aeabi_cfcmpeq+0xe>
 8001cde:	2100      	movs	r1, #0
 8001ce0:	42c8      	cmn	r0, r1
 8001ce2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001ce4 <__aeabi_fcmpeq>:
 8001ce4:	b510      	push	{r4, lr}
 8001ce6:	f000 f855 	bl	8001d94 <__eqsf2>
 8001cea:	4240      	negs	r0, r0
 8001cec:	3001      	adds	r0, #1
 8001cee:	bd10      	pop	{r4, pc}

08001cf0 <__aeabi_fcmplt>:
 8001cf0:	b510      	push	{r4, lr}
 8001cf2:	f000 f8c7 	bl	8001e84 <__lesf2>
 8001cf6:	2800      	cmp	r0, #0
 8001cf8:	db01      	blt.n	8001cfe <__aeabi_fcmplt+0xe>
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	bd10      	pop	{r4, pc}
 8001cfe:	2001      	movs	r0, #1
 8001d00:	bd10      	pop	{r4, pc}
 8001d02:	46c0      	nop			@ (mov r8, r8)

08001d04 <__aeabi_fcmple>:
 8001d04:	b510      	push	{r4, lr}
 8001d06:	f000 f8bd 	bl	8001e84 <__lesf2>
 8001d0a:	2800      	cmp	r0, #0
 8001d0c:	dd01      	ble.n	8001d12 <__aeabi_fcmple+0xe>
 8001d0e:	2000      	movs	r0, #0
 8001d10:	bd10      	pop	{r4, pc}
 8001d12:	2001      	movs	r0, #1
 8001d14:	bd10      	pop	{r4, pc}
 8001d16:	46c0      	nop			@ (mov r8, r8)

08001d18 <__aeabi_fcmpgt>:
 8001d18:	b510      	push	{r4, lr}
 8001d1a:	f000 f863 	bl	8001de4 <__gesf2>
 8001d1e:	2800      	cmp	r0, #0
 8001d20:	dc01      	bgt.n	8001d26 <__aeabi_fcmpgt+0xe>
 8001d22:	2000      	movs	r0, #0
 8001d24:	bd10      	pop	{r4, pc}
 8001d26:	2001      	movs	r0, #1
 8001d28:	bd10      	pop	{r4, pc}
 8001d2a:	46c0      	nop			@ (mov r8, r8)

08001d2c <__aeabi_fcmpge>:
 8001d2c:	b510      	push	{r4, lr}
 8001d2e:	f000 f859 	bl	8001de4 <__gesf2>
 8001d32:	2800      	cmp	r0, #0
 8001d34:	da01      	bge.n	8001d3a <__aeabi_fcmpge+0xe>
 8001d36:	2000      	movs	r0, #0
 8001d38:	bd10      	pop	{r4, pc}
 8001d3a:	2001      	movs	r0, #1
 8001d3c:	bd10      	pop	{r4, pc}
 8001d3e:	46c0      	nop			@ (mov r8, r8)

08001d40 <__clzsi2>:
 8001d40:	211c      	movs	r1, #28
 8001d42:	2301      	movs	r3, #1
 8001d44:	041b      	lsls	r3, r3, #16
 8001d46:	4298      	cmp	r0, r3
 8001d48:	d301      	bcc.n	8001d4e <__clzsi2+0xe>
 8001d4a:	0c00      	lsrs	r0, r0, #16
 8001d4c:	3910      	subs	r1, #16
 8001d4e:	0a1b      	lsrs	r3, r3, #8
 8001d50:	4298      	cmp	r0, r3
 8001d52:	d301      	bcc.n	8001d58 <__clzsi2+0x18>
 8001d54:	0a00      	lsrs	r0, r0, #8
 8001d56:	3908      	subs	r1, #8
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	4298      	cmp	r0, r3
 8001d5c:	d301      	bcc.n	8001d62 <__clzsi2+0x22>
 8001d5e:	0900      	lsrs	r0, r0, #4
 8001d60:	3904      	subs	r1, #4
 8001d62:	a202      	add	r2, pc, #8	@ (adr r2, 8001d6c <__clzsi2+0x2c>)
 8001d64:	5c10      	ldrb	r0, [r2, r0]
 8001d66:	1840      	adds	r0, r0, r1
 8001d68:	4770      	bx	lr
 8001d6a:	46c0      	nop			@ (mov r8, r8)
 8001d6c:	02020304 	.word	0x02020304
 8001d70:	01010101 	.word	0x01010101
	...

08001d7c <__clzdi2>:
 8001d7c:	b510      	push	{r4, lr}
 8001d7e:	2900      	cmp	r1, #0
 8001d80:	d103      	bne.n	8001d8a <__clzdi2+0xe>
 8001d82:	f7ff ffdd 	bl	8001d40 <__clzsi2>
 8001d86:	3020      	adds	r0, #32
 8001d88:	e002      	b.n	8001d90 <__clzdi2+0x14>
 8001d8a:	0008      	movs	r0, r1
 8001d8c:	f7ff ffd8 	bl	8001d40 <__clzsi2>
 8001d90:	bd10      	pop	{r4, pc}
 8001d92:	46c0      	nop			@ (mov r8, r8)

08001d94 <__eqsf2>:
 8001d94:	b570      	push	{r4, r5, r6, lr}
 8001d96:	0042      	lsls	r2, r0, #1
 8001d98:	024e      	lsls	r6, r1, #9
 8001d9a:	004c      	lsls	r4, r1, #1
 8001d9c:	0245      	lsls	r5, r0, #9
 8001d9e:	0a6d      	lsrs	r5, r5, #9
 8001da0:	0e12      	lsrs	r2, r2, #24
 8001da2:	0fc3      	lsrs	r3, r0, #31
 8001da4:	0a76      	lsrs	r6, r6, #9
 8001da6:	0e24      	lsrs	r4, r4, #24
 8001da8:	0fc9      	lsrs	r1, r1, #31
 8001daa:	2aff      	cmp	r2, #255	@ 0xff
 8001dac:	d010      	beq.n	8001dd0 <__eqsf2+0x3c>
 8001dae:	2cff      	cmp	r4, #255	@ 0xff
 8001db0:	d00c      	beq.n	8001dcc <__eqsf2+0x38>
 8001db2:	2001      	movs	r0, #1
 8001db4:	42a2      	cmp	r2, r4
 8001db6:	d10a      	bne.n	8001dce <__eqsf2+0x3a>
 8001db8:	42b5      	cmp	r5, r6
 8001dba:	d108      	bne.n	8001dce <__eqsf2+0x3a>
 8001dbc:	428b      	cmp	r3, r1
 8001dbe:	d00f      	beq.n	8001de0 <__eqsf2+0x4c>
 8001dc0:	2a00      	cmp	r2, #0
 8001dc2:	d104      	bne.n	8001dce <__eqsf2+0x3a>
 8001dc4:	0028      	movs	r0, r5
 8001dc6:	1e43      	subs	r3, r0, #1
 8001dc8:	4198      	sbcs	r0, r3
 8001dca:	e000      	b.n	8001dce <__eqsf2+0x3a>
 8001dcc:	2001      	movs	r0, #1
 8001dce:	bd70      	pop	{r4, r5, r6, pc}
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	2cff      	cmp	r4, #255	@ 0xff
 8001dd4:	d1fb      	bne.n	8001dce <__eqsf2+0x3a>
 8001dd6:	4335      	orrs	r5, r6
 8001dd8:	d1f9      	bne.n	8001dce <__eqsf2+0x3a>
 8001dda:	404b      	eors	r3, r1
 8001ddc:	0018      	movs	r0, r3
 8001dde:	e7f6      	b.n	8001dce <__eqsf2+0x3a>
 8001de0:	2000      	movs	r0, #0
 8001de2:	e7f4      	b.n	8001dce <__eqsf2+0x3a>

08001de4 <__gesf2>:
 8001de4:	b530      	push	{r4, r5, lr}
 8001de6:	0042      	lsls	r2, r0, #1
 8001de8:	0244      	lsls	r4, r0, #9
 8001dea:	024d      	lsls	r5, r1, #9
 8001dec:	0fc3      	lsrs	r3, r0, #31
 8001dee:	0048      	lsls	r0, r1, #1
 8001df0:	0a64      	lsrs	r4, r4, #9
 8001df2:	0e12      	lsrs	r2, r2, #24
 8001df4:	0a6d      	lsrs	r5, r5, #9
 8001df6:	0e00      	lsrs	r0, r0, #24
 8001df8:	0fc9      	lsrs	r1, r1, #31
 8001dfa:	2aff      	cmp	r2, #255	@ 0xff
 8001dfc:	d019      	beq.n	8001e32 <__gesf2+0x4e>
 8001dfe:	28ff      	cmp	r0, #255	@ 0xff
 8001e00:	d00b      	beq.n	8001e1a <__gesf2+0x36>
 8001e02:	2a00      	cmp	r2, #0
 8001e04:	d11e      	bne.n	8001e44 <__gesf2+0x60>
 8001e06:	2800      	cmp	r0, #0
 8001e08:	d10b      	bne.n	8001e22 <__gesf2+0x3e>
 8001e0a:	2d00      	cmp	r5, #0
 8001e0c:	d027      	beq.n	8001e5e <__gesf2+0x7a>
 8001e0e:	2c00      	cmp	r4, #0
 8001e10:	d134      	bne.n	8001e7c <__gesf2+0x98>
 8001e12:	2900      	cmp	r1, #0
 8001e14:	d02f      	beq.n	8001e76 <__gesf2+0x92>
 8001e16:	0008      	movs	r0, r1
 8001e18:	bd30      	pop	{r4, r5, pc}
 8001e1a:	2d00      	cmp	r5, #0
 8001e1c:	d128      	bne.n	8001e70 <__gesf2+0x8c>
 8001e1e:	2a00      	cmp	r2, #0
 8001e20:	d101      	bne.n	8001e26 <__gesf2+0x42>
 8001e22:	2c00      	cmp	r4, #0
 8001e24:	d0f5      	beq.n	8001e12 <__gesf2+0x2e>
 8001e26:	428b      	cmp	r3, r1
 8001e28:	d107      	bne.n	8001e3a <__gesf2+0x56>
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d023      	beq.n	8001e76 <__gesf2+0x92>
 8001e2e:	0018      	movs	r0, r3
 8001e30:	e7f2      	b.n	8001e18 <__gesf2+0x34>
 8001e32:	2c00      	cmp	r4, #0
 8001e34:	d11c      	bne.n	8001e70 <__gesf2+0x8c>
 8001e36:	28ff      	cmp	r0, #255	@ 0xff
 8001e38:	d014      	beq.n	8001e64 <__gesf2+0x80>
 8001e3a:	1e58      	subs	r0, r3, #1
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	4018      	ands	r0, r3
 8001e40:	3801      	subs	r0, #1
 8001e42:	e7e9      	b.n	8001e18 <__gesf2+0x34>
 8001e44:	2800      	cmp	r0, #0
 8001e46:	d0f8      	beq.n	8001e3a <__gesf2+0x56>
 8001e48:	428b      	cmp	r3, r1
 8001e4a:	d1f6      	bne.n	8001e3a <__gesf2+0x56>
 8001e4c:	4282      	cmp	r2, r0
 8001e4e:	dcf4      	bgt.n	8001e3a <__gesf2+0x56>
 8001e50:	dbeb      	blt.n	8001e2a <__gesf2+0x46>
 8001e52:	42ac      	cmp	r4, r5
 8001e54:	d8f1      	bhi.n	8001e3a <__gesf2+0x56>
 8001e56:	2000      	movs	r0, #0
 8001e58:	42ac      	cmp	r4, r5
 8001e5a:	d2dd      	bcs.n	8001e18 <__gesf2+0x34>
 8001e5c:	e7e5      	b.n	8001e2a <__gesf2+0x46>
 8001e5e:	2c00      	cmp	r4, #0
 8001e60:	d0da      	beq.n	8001e18 <__gesf2+0x34>
 8001e62:	e7ea      	b.n	8001e3a <__gesf2+0x56>
 8001e64:	2d00      	cmp	r5, #0
 8001e66:	d103      	bne.n	8001e70 <__gesf2+0x8c>
 8001e68:	428b      	cmp	r3, r1
 8001e6a:	d1e6      	bne.n	8001e3a <__gesf2+0x56>
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	e7d3      	b.n	8001e18 <__gesf2+0x34>
 8001e70:	2002      	movs	r0, #2
 8001e72:	4240      	negs	r0, r0
 8001e74:	e7d0      	b.n	8001e18 <__gesf2+0x34>
 8001e76:	2001      	movs	r0, #1
 8001e78:	4240      	negs	r0, r0
 8001e7a:	e7cd      	b.n	8001e18 <__gesf2+0x34>
 8001e7c:	428b      	cmp	r3, r1
 8001e7e:	d0e8      	beq.n	8001e52 <__gesf2+0x6e>
 8001e80:	e7db      	b.n	8001e3a <__gesf2+0x56>
 8001e82:	46c0      	nop			@ (mov r8, r8)

08001e84 <__lesf2>:
 8001e84:	b530      	push	{r4, r5, lr}
 8001e86:	0042      	lsls	r2, r0, #1
 8001e88:	0244      	lsls	r4, r0, #9
 8001e8a:	024d      	lsls	r5, r1, #9
 8001e8c:	0fc3      	lsrs	r3, r0, #31
 8001e8e:	0048      	lsls	r0, r1, #1
 8001e90:	0a64      	lsrs	r4, r4, #9
 8001e92:	0e12      	lsrs	r2, r2, #24
 8001e94:	0a6d      	lsrs	r5, r5, #9
 8001e96:	0e00      	lsrs	r0, r0, #24
 8001e98:	0fc9      	lsrs	r1, r1, #31
 8001e9a:	2aff      	cmp	r2, #255	@ 0xff
 8001e9c:	d01a      	beq.n	8001ed4 <__lesf2+0x50>
 8001e9e:	28ff      	cmp	r0, #255	@ 0xff
 8001ea0:	d00e      	beq.n	8001ec0 <__lesf2+0x3c>
 8001ea2:	2a00      	cmp	r2, #0
 8001ea4:	d11e      	bne.n	8001ee4 <__lesf2+0x60>
 8001ea6:	2800      	cmp	r0, #0
 8001ea8:	d10e      	bne.n	8001ec8 <__lesf2+0x44>
 8001eaa:	2d00      	cmp	r5, #0
 8001eac:	d02a      	beq.n	8001f04 <__lesf2+0x80>
 8001eae:	2c00      	cmp	r4, #0
 8001eb0:	d00c      	beq.n	8001ecc <__lesf2+0x48>
 8001eb2:	428b      	cmp	r3, r1
 8001eb4:	d01d      	beq.n	8001ef2 <__lesf2+0x6e>
 8001eb6:	1e58      	subs	r0, r3, #1
 8001eb8:	2302      	movs	r3, #2
 8001eba:	4018      	ands	r0, r3
 8001ebc:	3801      	subs	r0, #1
 8001ebe:	e010      	b.n	8001ee2 <__lesf2+0x5e>
 8001ec0:	2d00      	cmp	r5, #0
 8001ec2:	d10d      	bne.n	8001ee0 <__lesf2+0x5c>
 8001ec4:	2a00      	cmp	r2, #0
 8001ec6:	d120      	bne.n	8001f0a <__lesf2+0x86>
 8001ec8:	2c00      	cmp	r4, #0
 8001eca:	d11e      	bne.n	8001f0a <__lesf2+0x86>
 8001ecc:	2900      	cmp	r1, #0
 8001ece:	d023      	beq.n	8001f18 <__lesf2+0x94>
 8001ed0:	0008      	movs	r0, r1
 8001ed2:	e006      	b.n	8001ee2 <__lesf2+0x5e>
 8001ed4:	2c00      	cmp	r4, #0
 8001ed6:	d103      	bne.n	8001ee0 <__lesf2+0x5c>
 8001ed8:	28ff      	cmp	r0, #255	@ 0xff
 8001eda:	d1ec      	bne.n	8001eb6 <__lesf2+0x32>
 8001edc:	2d00      	cmp	r5, #0
 8001ede:	d017      	beq.n	8001f10 <__lesf2+0x8c>
 8001ee0:	2002      	movs	r0, #2
 8001ee2:	bd30      	pop	{r4, r5, pc}
 8001ee4:	2800      	cmp	r0, #0
 8001ee6:	d0e6      	beq.n	8001eb6 <__lesf2+0x32>
 8001ee8:	428b      	cmp	r3, r1
 8001eea:	d1e4      	bne.n	8001eb6 <__lesf2+0x32>
 8001eec:	4282      	cmp	r2, r0
 8001eee:	dce2      	bgt.n	8001eb6 <__lesf2+0x32>
 8001ef0:	db04      	blt.n	8001efc <__lesf2+0x78>
 8001ef2:	42ac      	cmp	r4, r5
 8001ef4:	d8df      	bhi.n	8001eb6 <__lesf2+0x32>
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	42ac      	cmp	r4, r5
 8001efa:	d2f2      	bcs.n	8001ee2 <__lesf2+0x5e>
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00b      	beq.n	8001f18 <__lesf2+0x94>
 8001f00:	0018      	movs	r0, r3
 8001f02:	e7ee      	b.n	8001ee2 <__lesf2+0x5e>
 8001f04:	2c00      	cmp	r4, #0
 8001f06:	d0ec      	beq.n	8001ee2 <__lesf2+0x5e>
 8001f08:	e7d5      	b.n	8001eb6 <__lesf2+0x32>
 8001f0a:	428b      	cmp	r3, r1
 8001f0c:	d1d3      	bne.n	8001eb6 <__lesf2+0x32>
 8001f0e:	e7f5      	b.n	8001efc <__lesf2+0x78>
 8001f10:	2000      	movs	r0, #0
 8001f12:	428b      	cmp	r3, r1
 8001f14:	d0e5      	beq.n	8001ee2 <__lesf2+0x5e>
 8001f16:	e7ce      	b.n	8001eb6 <__lesf2+0x32>
 8001f18:	2001      	movs	r0, #1
 8001f1a:	4240      	negs	r0, r0
 8001f1c:	e7e1      	b.n	8001ee2 <__lesf2+0x5e>
 8001f1e:	46c0      	nop			@ (mov r8, r8)

08001f20 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	0004      	movs	r4, r0
 8001f28:	0008      	movs	r0, r1
 8001f2a:	0011      	movs	r1, r2
 8001f2c:	1dbb      	adds	r3, r7, #6
 8001f2e:	1c22      	adds	r2, r4, #0
 8001f30:	801a      	strh	r2, [r3, #0]
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	1c02      	adds	r2, r0, #0
 8001f36:	801a      	strh	r2, [r3, #0]
 8001f38:	1cbb      	adds	r3, r7, #2
 8001f3a:	1c0a      	adds	r2, r1, #0
 8001f3c:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(y,x, color);
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	8818      	ldrh	r0, [r3, #0]
 8001f42:	1dbb      	adds	r3, r7, #6
 8001f44:	8819      	ldrh	r1, [r3, #0]
 8001f46:	1cbb      	adds	r3, r7, #2
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	001a      	movs	r2, r3
 8001f4c:	f000 fd2c 	bl	80029a8 <ST7735_DrawPixel>
}
 8001f50:	46c0      	nop			@ (mov r8, r8)
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b003      	add	sp, #12
 8001f56:	bd90      	pop	{r4, r7, pc}

08001f58 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8001f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f5a:	46c6      	mov	lr, r8
 8001f5c:	b500      	push	{lr}
 8001f5e:	b090      	sub	sp, #64	@ 0x40
 8001f60:	af04      	add	r7, sp, #16
 8001f62:	468c      	mov	ip, r1
 8001f64:	0016      	movs	r6, r2
 8001f66:	0019      	movs	r1, r3
 8001f68:	221e      	movs	r2, #30
 8001f6a:	18ba      	adds	r2, r7, r2
 8001f6c:	1c03      	adds	r3, r0, #0
 8001f6e:	8013      	strh	r3, [r2, #0]
 8001f70:	231c      	movs	r3, #28
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	4662      	mov	r2, ip
 8001f76:	801a      	strh	r2, [r3, #0]
 8001f78:	201a      	movs	r0, #26
 8001f7a:	183b      	adds	r3, r7, r0
 8001f7c:	1c32      	adds	r2, r6, #0
 8001f7e:	801a      	strh	r2, [r3, #0]
 8001f80:	2018      	movs	r0, #24
 8001f82:	183b      	adds	r3, r7, r0
 8001f84:	1c0a      	adds	r2, r1, #0
 8001f86:	801a      	strh	r2, [r3, #0]
 8001f88:	466b      	mov	r3, sp
 8001f8a:	4698      	mov	r8, r3
	uint16_t pallette[] = {color};
 8001f8c:	230c      	movs	r3, #12
 8001f8e:	0001      	movs	r1, r0
 8001f90:	185e      	adds	r6, r3, r1
 8001f92:	19f2      	adds	r2, r6, r7
 8001f94:	2030      	movs	r0, #48	@ 0x30
 8001f96:	1846      	adds	r6, r0, r1
 8001f98:	19f3      	adds	r3, r6, r7
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	8013      	strh	r3, [r2, #0]
	    uint16_t pixels[w*h][2];
 8001f9e:	201a      	movs	r0, #26
 8001fa0:	183b      	adds	r3, r7, r0
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	5e9b      	ldrsh	r3, [r3, r2]
 8001fa6:	187a      	adds	r2, r7, r1
 8001fa8:	2000      	movs	r0, #0
 8001faa:	5e12      	ldrsh	r2, [r2, r0]
 8001fac:	4353      	muls	r3, r2
 8001fae:	1e5a      	subs	r2, r3, #1
 8001fb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001fb2:	001a      	movs	r2, r3
 8001fb4:	60ba      	str	r2, [r7, #8]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60fa      	str	r2, [r7, #12]
 8001fba:	68b8      	ldr	r0, [r7, #8]
 8001fbc:	68f9      	ldr	r1, [r7, #12]
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	0ed2      	lsrs	r2, r2, #27
 8001fc2:	000e      	movs	r6, r1
 8001fc4:	0176      	lsls	r6, r6, #5
 8001fc6:	617e      	str	r6, [r7, #20]
 8001fc8:	697e      	ldr	r6, [r7, #20]
 8001fca:	4316      	orrs	r6, r2
 8001fcc:	617e      	str	r6, [r7, #20]
 8001fce:	0002      	movs	r2, r0
 8001fd0:	0152      	lsls	r2, r2, #5
 8001fd2:	613a      	str	r2, [r7, #16]
 8001fd4:	001a      	movs	r2, r3
 8001fd6:	603a      	str	r2, [r7, #0]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	607a      	str	r2, [r7, #4]
 8001fdc:	6838      	ldr	r0, [r7, #0]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	0002      	movs	r2, r0
 8001fe2:	0ed2      	lsrs	r2, r2, #27
 8001fe4:	000e      	movs	r6, r1
 8001fe6:	0175      	lsls	r5, r6, #5
 8001fe8:	4315      	orrs	r5, r2
 8001fea:	0002      	movs	r2, r0
 8001fec:	0154      	lsls	r4, r2, #5
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	3307      	adds	r3, #7
 8001ff2:	08db      	lsrs	r3, r3, #3
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	466a      	mov	r2, sp
 8001ff8:	1ad2      	subs	r2, r2, r3
 8001ffa:	4695      	mov	sp, r2
 8001ffc:	ab04      	add	r3, sp, #16
 8001ffe:	3301      	adds	r3, #1
 8002000:	085b      	lsrs	r3, r3, #1
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	62bb      	str	r3, [r7, #40]	@ 0x28

	    pixels[0][0] = 0;
 8002006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002008:	2200      	movs	r2, #0
 800200a:	801a      	strh	r2, [r3, #0]
	    pixels[0][1] = w*h;
 800200c:	201a      	movs	r0, #26
 800200e:	183b      	adds	r3, r7, r0
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	2118      	movs	r1, #24
 8002014:	187a      	adds	r2, r7, r1
 8002016:	8812      	ldrh	r2, [r2, #0]
 8002018:	4353      	muls	r3, r2
 800201a:	b29a      	uxth	r2, r3
 800201c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800201e:	805a      	strh	r2, [r3, #2]
	    drawImage(pixels, pallette, x, y, w, h, 1);
 8002020:	221e      	movs	r2, #30
 8002022:	18bb      	adds	r3, r7, r2
 8002024:	881c      	ldrh	r4, [r3, #0]
 8002026:	231c      	movs	r3, #28
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	881d      	ldrh	r5, [r3, #0]
 800202c:	183b      	adds	r3, r7, r0
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	0008      	movs	r0, r1
 8002032:	187a      	adds	r2, r7, r1
 8002034:	8812      	ldrh	r2, [r2, #0]
 8002036:	210c      	movs	r1, #12
 8002038:	1809      	adds	r1, r1, r0
 800203a:	19c9      	adds	r1, r1, r7
 800203c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800203e:	2601      	movs	r6, #1
 8002040:	46b4      	mov	ip, r6
 8002042:	4666      	mov	r6, ip
 8002044:	9602      	str	r6, [sp, #8]
 8002046:	9201      	str	r2, [sp, #4]
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	002b      	movs	r3, r5
 800204c:	0022      	movs	r2, r4
 800204e:	f000 fa09 	bl	8002464 <drawImage>
 8002052:	46c5      	mov	sp, r8

	//ST7735_FillRectangle(x, y, w, h, color);
}
 8002054:	46c0      	nop			@ (mov r8, r8)
 8002056:	46bd      	mov	sp, r7
 8002058:	b00c      	add	sp, #48	@ 0x30
 800205a:	bc80      	pop	{r7}
 800205c:	46b8      	mov	r8, r7
 800205e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002060 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8002060:	b590      	push	{r4, r7, lr}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	0004      	movs	r4, r0
 8002068:	0008      	movs	r0, r1
 800206a:	0011      	movs	r1, r2
 800206c:	1dbb      	adds	r3, r7, #6
 800206e:	1c22      	adds	r2, r4, #0
 8002070:	801a      	strh	r2, [r3, #0]
 8002072:	1d3b      	adds	r3, r7, #4
 8002074:	1c02      	adds	r2, r0, #0
 8002076:	801a      	strh	r2, [r3, #0]
 8002078:	1cbb      	adds	r3, r7, #2
 800207a:	1c0a      	adds	r2, r1, #0
 800207c:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 800207e:	1cbb      	adds	r3, r7, #2
 8002080:	881a      	ldrh	r2, [r3, #0]
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2100      	movs	r1, #0
 8002086:	5e59      	ldrsh	r1, [r3, r1]
 8002088:	1dbb      	adds	r3, r7, #6
 800208a:	2000      	movs	r0, #0
 800208c:	5e1b      	ldrsh	r3, [r3, r0]
 800208e:	0018      	movs	r0, r3
 8002090:	f7ff ff46 	bl	8001f20 <drawPixel>
}
 8002094:	46c0      	nop			@ (mov r8, r8)
 8002096:	46bd      	mov	sp, r7
 8002098:	b003      	add	sp, #12
 800209a:	bd90      	pop	{r4, r7, pc}

0800209c <drawString>:
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
void drawString(int16_t x, int16_t y, char* c, int16_t textColor, int16_t bgColor, uint8_t size, uint8_t spacing)
{
 800209c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209e:	b089      	sub	sp, #36	@ 0x24
 80020a0:	af02      	add	r7, sp, #8
 80020a2:	0004      	movs	r4, r0
 80020a4:	0008      	movs	r0, r1
 80020a6:	60ba      	str	r2, [r7, #8]
 80020a8:	0019      	movs	r1, r3
 80020aa:	230e      	movs	r3, #14
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	1c22      	adds	r2, r4, #0
 80020b0:	801a      	strh	r2, [r3, #0]
 80020b2:	230c      	movs	r3, #12
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	1c02      	adds	r2, r0, #0
 80020b8:	801a      	strh	r2, [r3, #0]
 80020ba:	1dbb      	adds	r3, r7, #6
 80020bc:	1c0a      	adds	r2, r1, #0
 80020be:	801a      	strh	r2, [r3, #0]
	uint16_t i =0;
 80020c0:	2316      	movs	r3, #22
 80020c2:	18fb      	adds	r3, r7, r3
 80020c4:	2200      	movs	r2, #0
 80020c6:	801a      	strh	r2, [r3, #0]

	while(c[i])
 80020c8:	e03f      	b.n	800214a <drawString+0xae>
	{
		drawChar(x, y, c[i], textColor, bgColor, size);
 80020ca:	2516      	movs	r5, #22
 80020cc:	197b      	adds	r3, r7, r5
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	18d3      	adds	r3, r2, r3
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	469c      	mov	ip, r3
 80020d8:	1dbb      	adds	r3, r7, #6
 80020da:	2400      	movs	r4, #0
 80020dc:	5f1c      	ldrsh	r4, [r3, r4]
 80020de:	230c      	movs	r3, #12
 80020e0:	18fb      	adds	r3, r7, r3
 80020e2:	2100      	movs	r1, #0
 80020e4:	5e59      	ldrsh	r1, [r3, r1]
 80020e6:	260e      	movs	r6, #14
 80020e8:	19bb      	adds	r3, r7, r6
 80020ea:	2000      	movs	r0, #0
 80020ec:	5e18      	ldrsh	r0, [r3, r0]
 80020ee:	232c      	movs	r3, #44	@ 0x2c
 80020f0:	2208      	movs	r2, #8
 80020f2:	189b      	adds	r3, r3, r2
 80020f4:	19db      	adds	r3, r3, r7
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	9301      	str	r3, [sp, #4]
 80020fa:	2328      	movs	r3, #40	@ 0x28
 80020fc:	189b      	adds	r3, r3, r2
 80020fe:	19db      	adds	r3, r3, r7
 8002100:	2200      	movs	r2, #0
 8002102:	5e9b      	ldrsh	r3, [r3, r2]
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	0023      	movs	r3, r4
 8002108:	4662      	mov	r2, ip
 800210a:	f000 f82b 	bl	8002164 <drawChar>
		x+=(size*6)+spacing;
 800210e:	232c      	movs	r3, #44	@ 0x2c
 8002110:	2108      	movs	r1, #8
 8002112:	185b      	adds	r3, r3, r1
 8002114:	19db      	adds	r3, r3, r7
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	b29b      	uxth	r3, r3
 800211a:	1c1a      	adds	r2, r3, #0
 800211c:	1c13      	adds	r3, r2, #0
 800211e:	18db      	adds	r3, r3, r3
 8002120:	189b      	adds	r3, r3, r2
 8002122:	18db      	adds	r3, r3, r3
 8002124:	b29a      	uxth	r2, r3
 8002126:	2330      	movs	r3, #48	@ 0x30
 8002128:	185b      	adds	r3, r3, r1
 800212a:	19db      	adds	r3, r3, r7
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	18d3      	adds	r3, r2, r3
 8002132:	b29a      	uxth	r2, r3
 8002134:	19bb      	adds	r3, r7, r6
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	18d3      	adds	r3, r2, r3
 800213a:	b29a      	uxth	r2, r3
 800213c:	19bb      	adds	r3, r7, r6
 800213e:	801a      	strh	r2, [r3, #0]
		i++;
 8002140:	197b      	adds	r3, r7, r5
 8002142:	881a      	ldrh	r2, [r3, #0]
 8002144:	197b      	adds	r3, r7, r5
 8002146:	3201      	adds	r2, #1
 8002148:	801a      	strh	r2, [r3, #0]
	while(c[i])
 800214a:	2316      	movs	r3, #22
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	18d3      	adds	r3, r2, r3
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1b7      	bne.n	80020ca <drawString+0x2e>
	}
}
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	46c0      	nop			@ (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	b007      	add	sp, #28
 8002162:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002164 <drawChar>:
void drawChar(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 8002164:	b5b0      	push	{r4, r5, r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af02      	add	r7, sp, #8
 800216a:	0005      	movs	r5, r0
 800216c:	000c      	movs	r4, r1
 800216e:	0010      	movs	r0, r2
 8002170:	0019      	movs	r1, r3
 8002172:	1dbb      	adds	r3, r7, #6
 8002174:	1c2a      	adds	r2, r5, #0
 8002176:	801a      	strh	r2, [r3, #0]
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	1c22      	adds	r2, r4, #0
 800217c:	801a      	strh	r2, [r3, #0]
 800217e:	1cfb      	adds	r3, r7, #3
 8002180:	1c02      	adds	r2, r0, #0
 8002182:	701a      	strb	r2, [r3, #0]
 8002184:	003b      	movs	r3, r7
 8002186:	1c0a      	adds	r2, r1, #0
 8002188:	801a      	strh	r2, [r3, #0]
  uint8_t line;
  int32_t i, j;
  if((x >= _width)            ||
 800218a:	4b79      	ldr	r3, [pc, #484]	@ (8002370 <drawChar+0x20c>)
 800218c:	2200      	movs	r2, #0
 800218e:	5e9b      	ldrsh	r3, [r3, r2]
 8002190:	1dba      	adds	r2, r7, #6
 8002192:	2100      	movs	r1, #0
 8002194:	5e52      	ldrsh	r2, [r2, r1]
 8002196:	429a      	cmp	r2, r3
 8002198:	db00      	blt.n	800219c <drawChar+0x38>
 800219a:	e0e5      	b.n	8002368 <drawChar+0x204>
     (y >= _height)           ||
 800219c:	4b75      	ldr	r3, [pc, #468]	@ (8002374 <drawChar+0x210>)
 800219e:	2200      	movs	r2, #0
 80021a0:	5e9b      	ldrsh	r3, [r3, r2]
  if((x >= _width)            ||
 80021a2:	1d3a      	adds	r2, r7, #4
 80021a4:	2100      	movs	r1, #0
 80021a6:	5e52      	ldrsh	r2, [r2, r1]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	db00      	blt.n	80021ae <drawChar+0x4a>
 80021ac:	e0dc      	b.n	8002368 <drawChar+0x204>
     ((x + 5 * size - 1) < 0) ||
 80021ae:	1dbb      	adds	r3, r7, #6
 80021b0:	2100      	movs	r1, #0
 80021b2:	5e59      	ldrsh	r1, [r3, r1]
 80021b4:	202c      	movs	r0, #44	@ 0x2c
 80021b6:	183b      	adds	r3, r7, r0
 80021b8:	781a      	ldrb	r2, [r3, #0]
 80021ba:	0013      	movs	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	189b      	adds	r3, r3, r2
 80021c0:	18cb      	adds	r3, r1, r3
     (y >= _height)           ||
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	dc00      	bgt.n	80021c8 <drawChar+0x64>
 80021c6:	e0cf      	b.n	8002368 <drawChar+0x204>
     ((y + 8 * size - 1) < 0))
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	2200      	movs	r2, #0
 80021cc:	5e9a      	ldrsh	r2, [r3, r2]
 80021ce:	183b      	adds	r3, r7, r0
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	18d3      	adds	r3, r2, r3
     ((x + 5 * size - 1) < 0) ||
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	dc00      	bgt.n	80021dc <drawChar+0x78>
 80021da:	e0c5      	b.n	8002368 <drawChar+0x204>
    return;

  for (i=0; i<6; i++ ) {
 80021dc:	2300      	movs	r3, #0
 80021de:	613b      	str	r3, [r7, #16]
 80021e0:	e0bd      	b.n	800235e <drawChar+0x1fa>
    if ((i) == 5)
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	2b05      	cmp	r3, #5
 80021e6:	d104      	bne.n	80021f2 <drawChar+0x8e>
      line = 0x0;
 80021e8:	2317      	movs	r3, #23
 80021ea:	18fb      	adds	r3, r7, r3
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
 80021f0:	e00b      	b.n	800220a <drawChar+0xa6>
    else
      line = Font[(c*5)+(i)];
 80021f2:	1cfb      	adds	r3, r7, #3
 80021f4:	781a      	ldrb	r2, [r3, #0]
 80021f6:	0013      	movs	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	189a      	adds	r2, r3, r2
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	18d2      	adds	r2, r2, r3
 8002200:	2317      	movs	r3, #23
 8002202:	18fb      	adds	r3, r7, r3
 8002204:	495c      	ldr	r1, [pc, #368]	@ (8002378 <drawChar+0x214>)
 8002206:	5c8a      	ldrb	r2, [r1, r2]
 8002208:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	e09f      	b.n	8002350 <drawChar+0x1ec>
      if (line & 0x1) {
 8002210:	2317      	movs	r3, #23
 8002212:	18fb      	adds	r3, r7, r3
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2201      	movs	r2, #1
 8002218:	4013      	ands	r3, r2
 800221a:	d043      	beq.n	80022a4 <drawChar+0x140>
        if (size == 1)
 800221c:	232c      	movs	r3, #44	@ 0x2c
 800221e:	18fb      	adds	r3, r7, r3
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d115      	bne.n	8002252 <drawChar+0xee>
          writePixel(x+(i), y+(7-j), textColor);
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	b29a      	uxth	r2, r3
 800222a:	1dbb      	adds	r3, r7, #6
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	18d3      	adds	r3, r2, r3
 8002230:	b29b      	uxth	r3, r3
 8002232:	b218      	sxth	r0, r3
 8002234:	1d3b      	adds	r3, r7, #4
 8002236:	881a      	ldrh	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	b29b      	uxth	r3, r3
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	b29b      	uxth	r3, r3
 8002240:	3307      	adds	r3, #7
 8002242:	b29b      	uxth	r3, r3
 8002244:	b219      	sxth	r1, r3
 8002246:	003b      	movs	r3, r7
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	001a      	movs	r2, r3
 800224c:	f7ff ff08 	bl	8002060 <writePixel>
 8002250:	e075      	b.n	800233e <drawChar+0x1da>
        else {
          fillRect(x+((i)*size), y+((7-j)*size), size, size, textColor);
 8002252:	212c      	movs	r1, #44	@ 0x2c
 8002254:	187b      	adds	r3, r7, r1
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	b29b      	uxth	r3, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	b292      	uxth	r2, r2
 800225e:	4353      	muls	r3, r2
 8002260:	b29a      	uxth	r2, r3
 8002262:	1dbb      	adds	r3, r7, #6
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	18d3      	adds	r3, r2, r3
 8002268:	b29b      	uxth	r3, r3
 800226a:	b218      	sxth	r0, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2207      	movs	r2, #7
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	b29b      	uxth	r3, r3
 8002274:	000c      	movs	r4, r1
 8002276:	187a      	adds	r2, r7, r1
 8002278:	7812      	ldrb	r2, [r2, #0]
 800227a:	b292      	uxth	r2, r2
 800227c:	4353      	muls	r3, r2
 800227e:	b29a      	uxth	r2, r3
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	18d3      	adds	r3, r2, r3
 8002286:	b29b      	uxth	r3, r3
 8002288:	b219      	sxth	r1, r3
 800228a:	193b      	adds	r3, r7, r4
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	b21a      	sxth	r2, r3
 8002290:	193b      	adds	r3, r7, r4
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b21c      	sxth	r4, r3
 8002296:	003b      	movs	r3, r7
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	0023      	movs	r3, r4
 800229e:	f7ff fe5b 	bl	8001f58 <fillRect>
 80022a2:	e04c      	b.n	800233e <drawChar+0x1da>
        }
      } else if (bgColor != textColor) {
 80022a4:	2428      	movs	r4, #40	@ 0x28
 80022a6:	193b      	adds	r3, r7, r4
 80022a8:	0039      	movs	r1, r7
 80022aa:	2200      	movs	r2, #0
 80022ac:	5e9a      	ldrsh	r2, [r3, r2]
 80022ae:	2300      	movs	r3, #0
 80022b0:	5ecb      	ldrsh	r3, [r1, r3]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d043      	beq.n	800233e <drawChar+0x1da>
        if (size == 1) // default size
 80022b6:	232c      	movs	r3, #44	@ 0x2c
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d115      	bne.n	80022ec <drawChar+0x188>
          writePixel(x+(i), y+(7-j), bgColor);
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	1dbb      	adds	r3, r7, #6
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	18d3      	adds	r3, r2, r3
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	b218      	sxth	r0, r3
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	881a      	ldrh	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	b29b      	uxth	r3, r3
 80022da:	3307      	adds	r3, #7
 80022dc:	b29b      	uxth	r3, r3
 80022de:	b219      	sxth	r1, r3
 80022e0:	193b      	adds	r3, r7, r4
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	001a      	movs	r2, r3
 80022e6:	f7ff febb 	bl	8002060 <writePixel>
 80022ea:	e028      	b.n	800233e <drawChar+0x1da>
        else {  // big size
          fillRect(x+(i)*size, y+(7-j)*size, size, size, bgColor);
 80022ec:	212c      	movs	r1, #44	@ 0x2c
 80022ee:	187b      	adds	r3, r7, r1
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	b292      	uxth	r2, r2
 80022f8:	4353      	muls	r3, r2
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	1dbb      	adds	r3, r7, #6
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	18d3      	adds	r3, r2, r3
 8002302:	b29b      	uxth	r3, r3
 8002304:	b218      	sxth	r0, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2207      	movs	r2, #7
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	b29b      	uxth	r3, r3
 800230e:	000c      	movs	r4, r1
 8002310:	187a      	adds	r2, r7, r1
 8002312:	7812      	ldrb	r2, [r2, #0]
 8002314:	b292      	uxth	r2, r2
 8002316:	4353      	muls	r3, r2
 8002318:	b29a      	uxth	r2, r3
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	18d3      	adds	r3, r2, r3
 8002320:	b29b      	uxth	r3, r3
 8002322:	b219      	sxth	r1, r3
 8002324:	193b      	adds	r3, r7, r4
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	b21a      	sxth	r2, r3
 800232a:	193b      	adds	r3, r7, r4
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	b21c      	sxth	r4, r3
 8002330:	2328      	movs	r3, #40	@ 0x28
 8002332:	18fb      	adds	r3, r7, r3
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	0023      	movs	r3, r4
 800233a:	f7ff fe0d 	bl	8001f58 <fillRect>
        }
      }
      line >>= 1;
 800233e:	2217      	movs	r2, #23
 8002340:	18bb      	adds	r3, r7, r2
 8002342:	18ba      	adds	r2, r7, r2
 8002344:	7812      	ldrb	r2, [r2, #0]
 8002346:	0852      	lsrs	r2, r2, #1
 8002348:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	3301      	adds	r3, #1
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b07      	cmp	r3, #7
 8002354:	dc00      	bgt.n	8002358 <drawChar+0x1f4>
 8002356:	e75b      	b.n	8002210 <drawChar+0xac>
  for (i=0; i<6; i++ ) {
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	3301      	adds	r3, #1
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	2b05      	cmp	r3, #5
 8002362:	dc00      	bgt.n	8002366 <drawChar+0x202>
 8002364:	e73d      	b.n	80021e2 <drawChar+0x7e>
 8002366:	e000      	b.n	800236a <drawChar+0x206>
    return;
 8002368:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800236a:	46bd      	mov	sp, r7
 800236c:	b006      	add	sp, #24
 800236e:	bdb0      	pop	{r4, r5, r7, pc}
 8002370:	20000efc 	.word	0x20000efc
 8002374:	20000efe 	.word	0x20000efe
 8002378:	08009744 	.word	0x08009744

0800237c <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 800237c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800237e:	b091      	sub	sp, #68	@ 0x44
 8002380:	af04      	add	r7, sp, #16
 8002382:	231e      	movs	r3, #30
 8002384:	18f9      	adds	r1, r7, r3
 8002386:	8008      	strh	r0, [r1, #0]
 8002388:	4669      	mov	r1, sp
 800238a:	000e      	movs	r6, r1
    uint16_t pallette[] = {color};
 800238c:	210c      	movs	r1, #12
 800238e:	2318      	movs	r3, #24
 8002390:	18cb      	adds	r3, r1, r3
 8002392:	19d9      	adds	r1, r3, r7
 8002394:	231e      	movs	r3, #30
 8002396:	18f8      	adds	r0, r7, r3
 8002398:	8800      	ldrh	r0, [r0, #0]
 800239a:	8008      	strh	r0, [r1, #0]
    uint16_t pixels[_width*_height][2];
 800239c:	492f      	ldr	r1, [pc, #188]	@ (800245c <fillScreen+0xe0>)
 800239e:	2300      	movs	r3, #0
 80023a0:	5ec9      	ldrsh	r1, [r1, r3]
 80023a2:	0008      	movs	r0, r1
 80023a4:	492e      	ldr	r1, [pc, #184]	@ (8002460 <fillScreen+0xe4>)
 80023a6:	2300      	movs	r3, #0
 80023a8:	5ec9      	ldrsh	r1, [r1, r3]
 80023aa:	4341      	muls	r1, r0
 80023ac:	1e48      	subs	r0, r1, #1
 80023ae:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80023b0:	0008      	movs	r0, r1
 80023b2:	6138      	str	r0, [r7, #16]
 80023b4:	2000      	movs	r0, #0
 80023b6:	6178      	str	r0, [r7, #20]
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	0010      	movs	r0, r2
 80023be:	0ec0      	lsrs	r0, r0, #27
 80023c0:	613a      	str	r2, [r7, #16]
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	015d      	lsls	r5, r3, #5
 80023c6:	4305      	orrs	r5, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	015c      	lsls	r4, r3, #5
 80023cc:	0008      	movs	r0, r1
 80023ce:	6038      	str	r0, [r7, #0]
 80023d0:	2000      	movs	r0, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	683c      	ldr	r4, [r7, #0]
 80023d6:	687d      	ldr	r5, [r7, #4]
 80023d8:	0023      	movs	r3, r4
 80023da:	0ed8      	lsrs	r0, r3, #27
 80023dc:	002b      	movs	r3, r5
 80023de:	015b      	lsls	r3, r3, #5
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4303      	orrs	r3, r0
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	0023      	movs	r3, r4
 80023ea:	015b      	lsls	r3, r3, #5
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	000b      	movs	r3, r1
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	3307      	adds	r3, #7
 80023f4:	08db      	lsrs	r3, r3, #3
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	466a      	mov	r2, sp
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	469d      	mov	sp, r3
 80023fe:	ab04      	add	r3, sp, #16
 8002400:	3301      	adds	r3, #1
 8002402:	085b      	lsrs	r3, r3, #1
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	62bb      	str	r3, [r7, #40]	@ 0x28

    pixels[0][0] = 0;
 8002408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800240a:	2200      	movs	r2, #0
 800240c:	801a      	strh	r2, [r3, #0]
    pixels[0][1] = _width*_height;
 800240e:	4b13      	ldr	r3, [pc, #76]	@ (800245c <fillScreen+0xe0>)
 8002410:	2200      	movs	r2, #0
 8002412:	5e9b      	ldrsh	r3, [r3, r2]
 8002414:	b29b      	uxth	r3, r3
 8002416:	4a12      	ldr	r2, [pc, #72]	@ (8002460 <fillScreen+0xe4>)
 8002418:	2000      	movs	r0, #0
 800241a:	5e12      	ldrsh	r2, [r2, r0]
 800241c:	b292      	uxth	r2, r2
 800241e:	4353      	muls	r3, r2
 8002420:	b29a      	uxth	r2, r3
 8002422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002424:	805a      	strh	r2, [r3, #2]
    drawImage(pixels, pallette, 0, 0, _width, _height, 1);
 8002426:	4b0d      	ldr	r3, [pc, #52]	@ (800245c <fillScreen+0xe0>)
 8002428:	2200      	movs	r2, #0
 800242a:	5e9b      	ldrsh	r3, [r3, r2]
 800242c:	b29b      	uxth	r3, r3
 800242e:	4a0c      	ldr	r2, [pc, #48]	@ (8002460 <fillScreen+0xe4>)
 8002430:	2000      	movs	r0, #0
 8002432:	5e12      	ldrsh	r2, [r2, r0]
 8002434:	b292      	uxth	r2, r2
 8002436:	210c      	movs	r1, #12
 8002438:	2018      	movs	r0, #24
 800243a:	1809      	adds	r1, r1, r0
 800243c:	19c9      	adds	r1, r1, r7
 800243e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002440:	2401      	movs	r4, #1
 8002442:	9402      	str	r4, [sp, #8]
 8002444:	9201      	str	r2, [sp, #4]
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	2300      	movs	r3, #0
 800244a:	2200      	movs	r2, #0
 800244c:	f000 f80a 	bl	8002464 <drawImage>
 8002450:	46b5      	mov	sp, r6
	//fillRect(0, 0, _width, _height, color);
}
 8002452:	46c0      	nop			@ (mov r8, r8)
 8002454:	46bd      	mov	sp, r7
 8002456:	b00d      	add	sp, #52	@ 0x34
 8002458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800245a:	46c0      	nop			@ (mov r8, r8)
 800245c:	20000efc 	.word	0x20000efc
 8002460:	20000efe 	.word	0x20000efe

08002464 <drawImage>:

void drawImage(uint16_t image[][2], uint16_t palette[], uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
{
 8002464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002466:	46c6      	mov	lr, r8
 8002468:	b500      	push	{lr}
 800246a:	b092      	sub	sp, #72	@ 0x48
 800246c:	af02      	add	r7, sp, #8
 800246e:	6278      	str	r0, [r7, #36]	@ 0x24
 8002470:	6239      	str	r1, [r7, #32]
 8002472:	0019      	movs	r1, r3
 8002474:	231e      	movs	r3, #30
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	801a      	strh	r2, [r3, #0]
 800247a:	231c      	movs	r3, #28
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	1c0a      	adds	r2, r1, #0
 8002480:	801a      	strh	r2, [r3, #0]
 8002482:	466b      	mov	r3, sp
 8002484:	4698      	mov	r8, r3
	uint16_t i;
	uint16_t j;
	uint16_t totalInd =0;
 8002486:	2322      	movs	r3, #34	@ 0x22
 8002488:	2118      	movs	r1, #24
 800248a:	185b      	adds	r3, r3, r1
 800248c:	19db      	adds	r3, r3, r7
 800248e:	2200      	movs	r2, #0
 8002490:	801a      	strh	r2, [r3, #0]
	uint16_t ind;
	uint16_t count;
	uint16_t bufffer[w*h];
 8002492:	2340      	movs	r3, #64	@ 0x40
 8002494:	185b      	adds	r3, r3, r1
 8002496:	19db      	adds	r3, r3, r7
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	2244      	movs	r2, #68	@ 0x44
 800249c:	1852      	adds	r2, r2, r1
 800249e:	19d2      	adds	r2, r2, r7
 80024a0:	8812      	ldrh	r2, [r2, #0]
 80024a2:	4353      	muls	r3, r2
 80024a4:	1e5a      	subs	r2, r3, #1
 80024a6:	637a      	str	r2, [r7, #52]	@ 0x34
 80024a8:	001a      	movs	r2, r3
 80024aa:	60ba      	str	r2, [r7, #8]
 80024ac:	2200      	movs	r2, #0
 80024ae:	60fa      	str	r2, [r7, #12]
 80024b0:	68b8      	ldr	r0, [r7, #8]
 80024b2:	68f9      	ldr	r1, [r7, #12]
 80024b4:	0002      	movs	r2, r0
 80024b6:	0f12      	lsrs	r2, r2, #28
 80024b8:	000e      	movs	r6, r1
 80024ba:	0136      	lsls	r6, r6, #4
 80024bc:	617e      	str	r6, [r7, #20]
 80024be:	697e      	ldr	r6, [r7, #20]
 80024c0:	4316      	orrs	r6, r2
 80024c2:	617e      	str	r6, [r7, #20]
 80024c4:	0002      	movs	r2, r0
 80024c6:	0112      	lsls	r2, r2, #4
 80024c8:	613a      	str	r2, [r7, #16]
 80024ca:	001a      	movs	r2, r3
 80024cc:	603a      	str	r2, [r7, #0]
 80024ce:	2200      	movs	r2, #0
 80024d0:	607a      	str	r2, [r7, #4]
 80024d2:	6838      	ldr	r0, [r7, #0]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	0002      	movs	r2, r0
 80024d8:	0f12      	lsrs	r2, r2, #28
 80024da:	000e      	movs	r6, r1
 80024dc:	0135      	lsls	r5, r6, #4
 80024de:	4315      	orrs	r5, r2
 80024e0:	0002      	movs	r2, r0
 80024e2:	0114      	lsls	r4, r2, #4
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	3307      	adds	r3, #7
 80024e8:	08db      	lsrs	r3, r3, #3
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	466a      	mov	r2, sp
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	469d      	mov	sp, r3
 80024f2:	ab02      	add	r3, sp, #8
 80024f4:	3301      	adds	r3, #1
 80024f6:	085b      	lsrs	r3, r3, #1
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	633b      	str	r3, [r7, #48]	@ 0x30
for(i=0; i<c; i++)
 80024fc:	2326      	movs	r3, #38	@ 0x26
 80024fe:	2118      	movs	r1, #24
 8002500:	185b      	adds	r3, r3, r1
 8002502:	19db      	adds	r3, r3, r7
 8002504:	2200      	movs	r2, #0
 8002506:	801a      	strh	r2, [r3, #0]
 8002508:	e04d      	b.n	80025a6 <drawImage+0x142>
{
	ind = image[i][0];
 800250a:	2126      	movs	r1, #38	@ 0x26
 800250c:	2018      	movs	r0, #24
 800250e:	180b      	adds	r3, r1, r0
 8002510:	19db      	adds	r3, r3, r7
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002518:	18d2      	adds	r2, r2, r3
 800251a:	2316      	movs	r3, #22
 800251c:	181b      	adds	r3, r3, r0
 800251e:	19db      	adds	r3, r3, r7
 8002520:	8812      	ldrh	r2, [r2, #0]
 8002522:	801a      	strh	r2, [r3, #0]
	count = image[i][1];
 8002524:	180b      	adds	r3, r1, r0
 8002526:	19db      	adds	r3, r3, r7
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800252e:	18d2      	adds	r2, r2, r3
 8002530:	2314      	movs	r3, #20
 8002532:	181b      	adds	r3, r3, r0
 8002534:	19db      	adds	r3, r3, r7
 8002536:	8852      	ldrh	r2, [r2, #2]
 8002538:	801a      	strh	r2, [r3, #0]
	for(j=0; j<count; j++)
 800253a:	2324      	movs	r3, #36	@ 0x24
 800253c:	181b      	adds	r3, r3, r0
 800253e:	19db      	adds	r3, r3, r7
 8002540:	2200      	movs	r2, #0
 8002542:	801a      	strh	r2, [r3, #0]
 8002544:	e01c      	b.n	8002580 <drawImage+0x11c>
	{
		bufffer[totalInd++] = palette[ind];
 8002546:	2316      	movs	r3, #22
 8002548:	2418      	movs	r4, #24
 800254a:	191b      	adds	r3, r3, r4
 800254c:	19db      	adds	r3, r3, r7
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	6a3a      	ldr	r2, [r7, #32]
 8002554:	18d2      	adds	r2, r2, r3
 8002556:	2122      	movs	r1, #34	@ 0x22
 8002558:	190b      	adds	r3, r1, r4
 800255a:	19db      	adds	r3, r3, r7
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	1909      	adds	r1, r1, r4
 8002560:	19c9      	adds	r1, r1, r7
 8002562:	1c58      	adds	r0, r3, #1
 8002564:	8008      	strh	r0, [r1, #0]
 8002566:	0018      	movs	r0, r3
 8002568:	8811      	ldrh	r1, [r2, #0]
 800256a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800256c:	0042      	lsls	r2, r0, #1
 800256e:	52d1      	strh	r1, [r2, r3]
	for(j=0; j<count; j++)
 8002570:	2124      	movs	r1, #36	@ 0x24
 8002572:	190b      	adds	r3, r1, r4
 8002574:	19db      	adds	r3, r3, r7
 8002576:	881a      	ldrh	r2, [r3, #0]
 8002578:	190b      	adds	r3, r1, r4
 800257a:	19db      	adds	r3, r3, r7
 800257c:	3201      	adds	r2, #1
 800257e:	801a      	strh	r2, [r3, #0]
 8002580:	2324      	movs	r3, #36	@ 0x24
 8002582:	2018      	movs	r0, #24
 8002584:	181b      	adds	r3, r3, r0
 8002586:	19da      	adds	r2, r3, r7
 8002588:	2314      	movs	r3, #20
 800258a:	181b      	adds	r3, r3, r0
 800258c:	19db      	adds	r3, r3, r7
 800258e:	8812      	ldrh	r2, [r2, #0]
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d3d7      	bcc.n	8002546 <drawImage+0xe2>
for(i=0; i<c; i++)
 8002596:	2126      	movs	r1, #38	@ 0x26
 8002598:	180b      	adds	r3, r1, r0
 800259a:	19db      	adds	r3, r3, r7
 800259c:	881a      	ldrh	r2, [r3, #0]
 800259e:	180b      	adds	r3, r1, r0
 80025a0:	19db      	adds	r3, r3, r7
 80025a2:	3201      	adds	r2, #1
 80025a4:	801a      	strh	r2, [r3, #0]
 80025a6:	2326      	movs	r3, #38	@ 0x26
 80025a8:	2118      	movs	r1, #24
 80025aa:	185b      	adds	r3, r3, r1
 80025ac:	19da      	adds	r2, r3, r7
 80025ae:	2348      	movs	r3, #72	@ 0x48
 80025b0:	185b      	adds	r3, r3, r1
 80025b2:	19db      	adds	r3, r3, r7
 80025b4:	8812      	ldrh	r2, [r2, #0]
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d3a6      	bcc.n	800250a <drawImage+0xa6>
	}
}
ST7735_DrawImage(y, x, w, h, bufffer);
 80025bc:	2344      	movs	r3, #68	@ 0x44
 80025be:	185b      	adds	r3, r3, r1
 80025c0:	19db      	adds	r3, r3, r7
 80025c2:	881c      	ldrh	r4, [r3, #0]
 80025c4:	2340      	movs	r3, #64	@ 0x40
 80025c6:	185b      	adds	r3, r3, r1
 80025c8:	19db      	adds	r3, r3, r7
 80025ca:	881a      	ldrh	r2, [r3, #0]
 80025cc:	231e      	movs	r3, #30
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	8819      	ldrh	r1, [r3, #0]
 80025d2:	231c      	movs	r3, #28
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	8818      	ldrh	r0, [r3, #0]
 80025d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	0023      	movs	r3, r4
 80025de:	f000 fa31 	bl	8002a44 <ST7735_DrawImage>
 80025e2:	46c5      	mov	sp, r8
}
 80025e4:	46c0      	nop			@ (mov r8, r8)
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b010      	add	sp, #64	@ 0x40
 80025ea:	bc80      	pop	{r7}
 80025ec:	46b8      	mov	r8, r7
 80025ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025f0 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80025f4:	23a0      	movs	r3, #160	@ 0xa0
 80025f6:	05db      	lsls	r3, r3, #23
 80025f8:	2200      	movs	r2, #0
 80025fa:	2120      	movs	r1, #32
 80025fc:	0018      	movs	r0, r3
 80025fe:	f001 feca 	bl	8004396 <HAL_GPIO_WritePin>
}
 8002602:	46c0      	nop			@ (mov r8, r8)
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800260c:	23a0      	movs	r3, #160	@ 0xa0
 800260e:	05db      	lsls	r3, r3, #23
 8002610:	2201      	movs	r2, #1
 8002612:	2120      	movs	r1, #32
 8002614:	0018      	movs	r0, r3
 8002616:	f001 febe 	bl	8004396 <HAL_GPIO_WritePin>
}
 800261a:	46c0      	nop			@ (mov r8, r8)
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <ST7735_Reset>:

void ST7735_Reset()
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8002624:	2380      	movs	r3, #128	@ 0x80
 8002626:	0219      	lsls	r1, r3, #8
 8002628:	23a0      	movs	r3, #160	@ 0xa0
 800262a:	05db      	lsls	r3, r3, #23
 800262c:	2200      	movs	r2, #0
 800262e:	0018      	movs	r0, r3
 8002630:	f001 feb1 	bl	8004396 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8002634:	2005      	movs	r0, #5
 8002636:	f001 fc37 	bl	8003ea8 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 800263a:	2380      	movs	r3, #128	@ 0x80
 800263c:	0219      	lsls	r1, r3, #8
 800263e:	23a0      	movs	r3, #160	@ 0xa0
 8002640:	05db      	lsls	r3, r3, #23
 8002642:	2201      	movs	r2, #1
 8002644:	0018      	movs	r0, r3
 8002646:	f001 fea6 	bl	8004396 <HAL_GPIO_WritePin>
}
 800264a:	46c0      	nop			@ (mov r8, r8)
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	0002      	movs	r2, r0
 8002658:	1dfb      	adds	r3, r7, #7
 800265a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 800265c:	23a0      	movs	r3, #160	@ 0xa0
 800265e:	05db      	lsls	r3, r3, #23
 8002660:	2200      	movs	r2, #0
 8002662:	2110      	movs	r1, #16
 8002664:	0018      	movs	r0, r3
 8002666:	f001 fe96 	bl	8004396 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800266a:	2301      	movs	r3, #1
 800266c:	425b      	negs	r3, r3
 800266e:	1df9      	adds	r1, r7, #7
 8002670:	4803      	ldr	r0, [pc, #12]	@ (8002680 <ST7735_WriteCommand+0x30>)
 8002672:	2201      	movs	r2, #1
 8002674:	f003 fff2 	bl	800665c <HAL_SPI_Transmit>
}
 8002678:	46c0      	nop			@ (mov r8, r8)
 800267a:	46bd      	mov	sp, r7
 800267c:	b002      	add	sp, #8
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20001384 	.word	0x20001384

08002684 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800268e:	23a0      	movs	r3, #160	@ 0xa0
 8002690:	05db      	lsls	r3, r3, #23
 8002692:	2201      	movs	r2, #1
 8002694:	2110      	movs	r1, #16
 8002696:	0018      	movs	r0, r3
 8002698:	f001 fe7d 	bl	8004396 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	b29a      	uxth	r2, r3
 80026a0:	2301      	movs	r3, #1
 80026a2:	425b      	negs	r3, r3
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	4803      	ldr	r0, [pc, #12]	@ (80026b4 <ST7735_WriteData+0x30>)
 80026a8:	f003 ffd8 	bl	800665c <HAL_SPI_Transmit>
}
 80026ac:	46c0      	nop			@ (mov r8, r8)
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b002      	add	sp, #8
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20001384 	.word	0x20001384

080026b8 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	220f      	movs	r2, #15
 80026c8:	18ba      	adds	r2, r7, r2
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 80026ce:	e04a      	b.n	8002766 <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	210b      	movs	r1, #11
 80026d8:	187a      	adds	r2, r7, r1
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 80026de:	187b      	adds	r3, r7, r1
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	0018      	movs	r0, r3
 80026e4:	f7ff ffb4 	bl	8002650 <ST7735_WriteCommand>

        numArgs = *addr++;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	200a      	movs	r0, #10
 80026f0:	183a      	adds	r2, r7, r0
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80026f6:	183b      	adds	r3, r7, r0
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	230c      	movs	r3, #12
 80026fe:	18fb      	adds	r3, r7, r3
 8002700:	2180      	movs	r1, #128	@ 0x80
 8002702:	400a      	ands	r2, r1
 8002704:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 8002706:	183b      	adds	r3, r7, r0
 8002708:	183a      	adds	r2, r7, r0
 800270a:	7812      	ldrb	r2, [r2, #0]
 800270c:	217f      	movs	r1, #127	@ 0x7f
 800270e:	400a      	ands	r2, r1
 8002710:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 8002712:	183b      	adds	r3, r7, r0
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00c      	beq.n	8002734 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800271a:	0004      	movs	r4, r0
 800271c:	183b      	adds	r3, r7, r0
 800271e:	781a      	ldrb	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	0011      	movs	r1, r2
 8002724:	0018      	movs	r0, r3
 8002726:	f7ff ffad 	bl	8002684 <ST7735_WriteData>
            addr += numArgs;
 800272a:	193b      	adds	r3, r7, r4
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	18d3      	adds	r3, r2, r3
 8002732:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8002734:	210c      	movs	r1, #12
 8002736:	187b      	adds	r3, r7, r1
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d013      	beq.n	8002766 <DisplayInit+0xae>
            ms = *addr++;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	607a      	str	r2, [r7, #4]
 8002744:	781a      	ldrb	r2, [r3, #0]
 8002746:	187b      	adds	r3, r7, r1
 8002748:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 800274a:	187b      	adds	r3, r7, r1
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	2bff      	cmp	r3, #255	@ 0xff
 8002750:	d103      	bne.n	800275a <DisplayInit+0xa2>
 8002752:	187b      	adds	r3, r7, r1
 8002754:	22fa      	movs	r2, #250	@ 0xfa
 8002756:	0052      	lsls	r2, r2, #1
 8002758:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 800275a:	230c      	movs	r3, #12
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	0018      	movs	r0, r3
 8002762:	f001 fba1 	bl	8003ea8 <HAL_Delay>
    while(numCommands--) {
 8002766:	220f      	movs	r2, #15
 8002768:	18bb      	adds	r3, r7, r2
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	18ba      	adds	r2, r7, r2
 800276e:	1e59      	subs	r1, r3, #1
 8002770:	7011      	strb	r1, [r2, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1ac      	bne.n	80026d0 <DisplayInit+0x18>
        }
    }
}
 8002776:	46c0      	nop			@ (mov r8, r8)
 8002778:	46c0      	nop			@ (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b005      	add	sp, #20
 800277e:	bd90      	pop	{r4, r7, pc}

08002780 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8002780:	b5b0      	push	{r4, r5, r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	0005      	movs	r5, r0
 8002788:	000c      	movs	r4, r1
 800278a:	0010      	movs	r0, r2
 800278c:	0019      	movs	r1, r3
 800278e:	1dfb      	adds	r3, r7, #7
 8002790:	1c2a      	adds	r2, r5, #0
 8002792:	701a      	strb	r2, [r3, #0]
 8002794:	1dbb      	adds	r3, r7, #6
 8002796:	1c22      	adds	r2, r4, #0
 8002798:	701a      	strb	r2, [r3, #0]
 800279a:	1d7b      	adds	r3, r7, #5
 800279c:	1c02      	adds	r2, r0, #0
 800279e:	701a      	strb	r2, [r3, #0]
 80027a0:	1d3b      	adds	r3, r7, #4
 80027a2:	1c0a      	adds	r2, r1, #0
 80027a4:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80027a6:	202a      	movs	r0, #42	@ 0x2a
 80027a8:	f7ff ff52 	bl	8002650 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80027ac:	210c      	movs	r1, #12
 80027ae:	187b      	adds	r3, r7, r1
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002828 <ST7735_SetAddressWindow+0xa8>)
 80027b6:	781a      	ldrb	r2, [r3, #0]
 80027b8:	1dfb      	adds	r3, r7, #7
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	18d3      	adds	r3, r2, r3
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	187b      	adds	r3, r7, r1
 80027c2:	705a      	strb	r2, [r3, #1]
 80027c4:	187b      	adds	r3, r7, r1
 80027c6:	2200      	movs	r2, #0
 80027c8:	709a      	strb	r2, [r3, #2]
 80027ca:	4b17      	ldr	r3, [pc, #92]	@ (8002828 <ST7735_SetAddressWindow+0xa8>)
 80027cc:	781a      	ldrb	r2, [r3, #0]
 80027ce:	1d7b      	adds	r3, r7, #5
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	18d3      	adds	r3, r2, r3
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	187b      	adds	r3, r7, r1
 80027d8:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 80027da:	000c      	movs	r4, r1
 80027dc:	187b      	adds	r3, r7, r1
 80027de:	2104      	movs	r1, #4
 80027e0:	0018      	movs	r0, r3
 80027e2:	f7ff ff4f 	bl	8002684 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80027e6:	202b      	movs	r0, #43	@ 0x2b
 80027e8:	f7ff ff32 	bl	8002650 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80027ec:	4b0f      	ldr	r3, [pc, #60]	@ (800282c <ST7735_SetAddressWindow+0xac>)
 80027ee:	781a      	ldrb	r2, [r3, #0]
 80027f0:	1dbb      	adds	r3, r7, #6
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	18d3      	adds	r3, r2, r3
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	0021      	movs	r1, r4
 80027fa:	187b      	adds	r3, r7, r1
 80027fc:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 80027fe:	4b0b      	ldr	r3, [pc, #44]	@ (800282c <ST7735_SetAddressWindow+0xac>)
 8002800:	781a      	ldrb	r2, [r3, #0]
 8002802:	1d3b      	adds	r3, r7, #4
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	18d3      	adds	r3, r2, r3
 8002808:	b2da      	uxtb	r2, r3
 800280a:	187b      	adds	r3, r7, r1
 800280c:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 800280e:	187b      	adds	r3, r7, r1
 8002810:	2104      	movs	r1, #4
 8002812:	0018      	movs	r0, r3
 8002814:	f7ff ff36 	bl	8002684 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8002818:	202c      	movs	r0, #44	@ 0x2c
 800281a:	f7ff ff19 	bl	8002650 <ST7735_WriteCommand>
}
 800281e:	46c0      	nop			@ (mov r8, r8)
 8002820:	46bd      	mov	sp, r7
 8002822:	b004      	add	sp, #16
 8002824:	bdb0      	pop	{r4, r5, r7, pc}
 8002826:	46c0      	nop			@ (mov r8, r8)
 8002828:	20000f03 	.word	0x20000f03
 800282c:	20000f04 	.word	0x20000f04

08002830 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	0002      	movs	r2, r0
 8002838:	1dfb      	adds	r3, r7, #7
 800283a:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 800283c:	f7ff fed8 	bl	80025f0 <ST7735_Select>
    ST7735_Reset();
 8002840:	f7ff feee 	bl	8002620 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8002844:	4b0e      	ldr	r3, [pc, #56]	@ (8002880 <ST7735_Init+0x50>)
 8002846:	0018      	movs	r0, r3
 8002848:	f7ff ff36 	bl	80026b8 <DisplayInit>
    DisplayInit(init_cmds2);
 800284c:	4b0d      	ldr	r3, [pc, #52]	@ (8002884 <ST7735_Init+0x54>)
 800284e:	0018      	movs	r0, r3
 8002850:	f7ff ff32 	bl	80026b8 <DisplayInit>
    DisplayInit(init_cmds3);
 8002854:	4b0c      	ldr	r3, [pc, #48]	@ (8002888 <ST7735_Init+0x58>)
 8002856:	0018      	movs	r0, r3
 8002858:	f7ff ff2e 	bl	80026b8 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 800285c:	4b0b      	ldr	r3, [pc, #44]	@ (800288c <ST7735_Init+0x5c>)
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8002862:	4b0b      	ldr	r3, [pc, #44]	@ (8002890 <ST7735_Init+0x60>)
 8002864:	2200      	movs	r2, #0
 8002866:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8002868:	1dfb      	adds	r3, r7, #7
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	0018      	movs	r0, r3
 800286e:	f000 f811 	bl	8002894 <ST7735_SetRotation>
    ST7735_Unselect();
 8002872:	f7ff fec9 	bl	8002608 <ST7735_Unselect>

}
 8002876:	46c0      	nop			@ (mov r8, r8)
 8002878:	46bd      	mov	sp, r7
 800287a:	b002      	add	sp, #8
 800287c:	bd80      	pop	{r7, pc}
 800287e:	46c0      	nop			@ (mov r8, r8)
 8002880:	08009c40 	.word	0x08009c40
 8002884:	08009c78 	.word	0x08009c78
 8002888:	08009c88 	.word	0x08009c88
 800288c:	20000f01 	.word	0x20000f01
 8002890:	20000f02 	.word	0x20000f02

08002894 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	0002      	movs	r2, r0
 800289c:	1dfb      	adds	r3, r7, #7
 800289e:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 80028a0:	230f      	movs	r3, #15
 80028a2:	18fb      	adds	r3, r7, r3
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 80028a8:	1dfb      	adds	r3, r7, #7
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2203      	movs	r2, #3
 80028ae:	4013      	ands	r3, r2
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	4b36      	ldr	r3, [pc, #216]	@ (800298c <ST7735_SetRotation+0xf8>)
 80028b4:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80028b6:	4b35      	ldr	r3, [pc, #212]	@ (800298c <ST7735_SetRotation+0xf8>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d041      	beq.n	8002942 <ST7735_SetRotation+0xae>
 80028be:	dc53      	bgt.n	8002968 <ST7735_SetRotation+0xd4>
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d02b      	beq.n	800291c <ST7735_SetRotation+0x88>
 80028c4:	dc50      	bgt.n	8002968 <ST7735_SetRotation+0xd4>
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <ST7735_SetRotation+0x3c>
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d013      	beq.n	80028f6 <ST7735_SetRotation+0x62>
 80028ce:	e04b      	b.n	8002968 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80028d0:	230f      	movs	r3, #15
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	22c0      	movs	r2, #192	@ 0xc0
 80028d6:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 80028d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002990 <ST7735_SetRotation+0xfc>)
 80028da:	22a0      	movs	r2, #160	@ 0xa0
 80028dc:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80028de:	4b2d      	ldr	r3, [pc, #180]	@ (8002994 <ST7735_SetRotation+0x100>)
 80028e0:	2280      	movs	r2, #128	@ 0x80
 80028e2:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80028e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002998 <ST7735_SetRotation+0x104>)
 80028e6:	781a      	ldrb	r2, [r3, #0]
 80028e8:	4b2c      	ldr	r3, [pc, #176]	@ (800299c <ST7735_SetRotation+0x108>)
 80028ea:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80028ec:	4b2c      	ldr	r3, [pc, #176]	@ (80029a0 <ST7735_SetRotation+0x10c>)
 80028ee:	781a      	ldrb	r2, [r3, #0]
 80028f0:	4b2c      	ldr	r3, [pc, #176]	@ (80029a4 <ST7735_SetRotation+0x110>)
 80028f2:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80028f4:	e038      	b.n	8002968 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80028f6:	230f      	movs	r3, #15
 80028f8:	18fb      	adds	r3, r7, r3
 80028fa:	22a0      	movs	r2, #160	@ 0xa0
 80028fc:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 80028fe:	4b25      	ldr	r3, [pc, #148]	@ (8002994 <ST7735_SetRotation+0x100>)
 8002900:	22a0      	movs	r2, #160	@ 0xa0
 8002902:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8002904:	4b22      	ldr	r3, [pc, #136]	@ (8002990 <ST7735_SetRotation+0xfc>)
 8002906:	2280      	movs	r2, #128	@ 0x80
 8002908:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800290a:	4b23      	ldr	r3, [pc, #140]	@ (8002998 <ST7735_SetRotation+0x104>)
 800290c:	781a      	ldrb	r2, [r3, #0]
 800290e:	4b25      	ldr	r3, [pc, #148]	@ (80029a4 <ST7735_SetRotation+0x110>)
 8002910:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8002912:	4b23      	ldr	r3, [pc, #140]	@ (80029a0 <ST7735_SetRotation+0x10c>)
 8002914:	781a      	ldrb	r2, [r3, #0]
 8002916:	4b21      	ldr	r3, [pc, #132]	@ (800299c <ST7735_SetRotation+0x108>)
 8002918:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800291a:	e025      	b.n	8002968 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 800291c:	230f      	movs	r3, #15
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8002924:	4b1a      	ldr	r3, [pc, #104]	@ (8002990 <ST7735_SetRotation+0xfc>)
 8002926:	22a0      	movs	r2, #160	@ 0xa0
 8002928:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800292a:	4b1a      	ldr	r3, [pc, #104]	@ (8002994 <ST7735_SetRotation+0x100>)
 800292c:	2280      	movs	r2, #128	@ 0x80
 800292e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8002930:	4b19      	ldr	r3, [pc, #100]	@ (8002998 <ST7735_SetRotation+0x104>)
 8002932:	781a      	ldrb	r2, [r3, #0]
 8002934:	4b19      	ldr	r3, [pc, #100]	@ (800299c <ST7735_SetRotation+0x108>)
 8002936:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8002938:	4b19      	ldr	r3, [pc, #100]	@ (80029a0 <ST7735_SetRotation+0x10c>)
 800293a:	781a      	ldrb	r2, [r3, #0]
 800293c:	4b19      	ldr	r3, [pc, #100]	@ (80029a4 <ST7735_SetRotation+0x110>)
 800293e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8002940:	e012      	b.n	8002968 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8002942:	230f      	movs	r3, #15
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	2260      	movs	r2, #96	@ 0x60
 8002948:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 800294a:	4b12      	ldr	r3, [pc, #72]	@ (8002994 <ST7735_SetRotation+0x100>)
 800294c:	22a0      	movs	r2, #160	@ 0xa0
 800294e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8002950:	4b0f      	ldr	r3, [pc, #60]	@ (8002990 <ST7735_SetRotation+0xfc>)
 8002952:	2280      	movs	r2, #128	@ 0x80
 8002954:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8002956:	4b10      	ldr	r3, [pc, #64]	@ (8002998 <ST7735_SetRotation+0x104>)
 8002958:	781a      	ldrb	r2, [r3, #0]
 800295a:	4b12      	ldr	r3, [pc, #72]	@ (80029a4 <ST7735_SetRotation+0x110>)
 800295c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800295e:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <ST7735_SetRotation+0x10c>)
 8002960:	781a      	ldrb	r2, [r3, #0]
 8002962:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <ST7735_SetRotation+0x108>)
 8002964:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8002966:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 8002968:	f7ff fe42 	bl	80025f0 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 800296c:	2036      	movs	r0, #54	@ 0x36
 800296e:	f7ff fe6f 	bl	8002650 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8002972:	230f      	movs	r3, #15
 8002974:	18fb      	adds	r3, r7, r3
 8002976:	2101      	movs	r1, #1
 8002978:	0018      	movs	r0, r3
 800297a:	f7ff fe83 	bl	8002684 <ST7735_WriteData>
  ST7735_Unselect();
 800297e:	f7ff fe43 	bl	8002608 <ST7735_Unselect>
}
 8002982:	46c0      	nop			@ (mov r8, r8)
 8002984:	46bd      	mov	sp, r7
 8002986:	b004      	add	sp, #16
 8002988:	bd80      	pop	{r7, pc}
 800298a:	46c0      	nop			@ (mov r8, r8)
 800298c:	20000f00 	.word	0x20000f00
 8002990:	20000efe 	.word	0x20000efe
 8002994:	20000efc 	.word	0x20000efc
 8002998:	20000f01 	.word	0x20000f01
 800299c:	20000f03 	.word	0x20000f03
 80029a0:	20000f02 	.word	0x20000f02
 80029a4:	20000f04 	.word	0x20000f04

080029a8 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b085      	sub	sp, #20
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	0004      	movs	r4, r0
 80029b0:	0008      	movs	r0, r1
 80029b2:	0011      	movs	r1, r2
 80029b4:	1dbb      	adds	r3, r7, #6
 80029b6:	1c22      	adds	r2, r4, #0
 80029b8:	801a      	strh	r2, [r3, #0]
 80029ba:	1d3b      	adds	r3, r7, #4
 80029bc:	1c02      	adds	r2, r0, #0
 80029be:	801a      	strh	r2, [r3, #0]
 80029c0:	1cbb      	adds	r3, r7, #2
 80029c2:	1c0a      	adds	r2, r1, #0
 80029c4:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 80029c6:	1dbb      	adds	r3, r7, #6
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	4a1c      	ldr	r2, [pc, #112]	@ (8002a3c <ST7735_DrawPixel+0x94>)
 80029cc:	2100      	movs	r1, #0
 80029ce:	5e52      	ldrsh	r2, [r2, r1]
 80029d0:	4293      	cmp	r3, r2
 80029d2:	da2f      	bge.n	8002a34 <ST7735_DrawPixel+0x8c>
 80029d4:	1d3b      	adds	r3, r7, #4
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	4a19      	ldr	r2, [pc, #100]	@ (8002a40 <ST7735_DrawPixel+0x98>)
 80029da:	2100      	movs	r1, #0
 80029dc:	5e52      	ldrsh	r2, [r2, r1]
 80029de:	4293      	cmp	r3, r2
 80029e0:	da28      	bge.n	8002a34 <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 80029e2:	f7ff fe05 	bl	80025f0 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 80029e6:	1dbb      	adds	r3, r7, #6
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	b2d8      	uxtb	r0, r3
 80029ec:	1d3b      	adds	r3, r7, #4
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	b2d9      	uxtb	r1, r3
 80029f2:	1dbb      	adds	r3, r7, #6
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	3301      	adds	r3, #1
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	1d3b      	adds	r3, r7, #4
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	3301      	adds	r3, #1
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	f7ff febb 	bl	8002780 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8002a0a:	1cbb      	adds	r3, r7, #2
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	0a1b      	lsrs	r3, r3, #8
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	210c      	movs	r1, #12
 8002a16:	187b      	adds	r3, r7, r1
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	1cbb      	adds	r3, r7, #2
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	187b      	adds	r3, r7, r1
 8002a22:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 8002a24:	187b      	adds	r3, r7, r1
 8002a26:	2102      	movs	r1, #2
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f7ff fe2b 	bl	8002684 <ST7735_WriteData>

    ST7735_Unselect();
 8002a2e:	f7ff fdeb 	bl	8002608 <ST7735_Unselect>
 8002a32:	e000      	b.n	8002a36 <ST7735_DrawPixel+0x8e>
        return;
 8002a34:	46c0      	nop			@ (mov r8, r8)
}
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b005      	add	sp, #20
 8002a3a:	bd90      	pop	{r4, r7, pc}
 8002a3c:	20000efc 	.word	0x20000efc
 8002a40:	20000efe 	.word	0x20000efe

08002a44 <ST7735_DrawImage>:
    }

    ST7735_Unselect();
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8002a44:	b5b0      	push	{r4, r5, r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	0005      	movs	r5, r0
 8002a4c:	000c      	movs	r4, r1
 8002a4e:	0010      	movs	r0, r2
 8002a50:	0019      	movs	r1, r3
 8002a52:	1dbb      	adds	r3, r7, #6
 8002a54:	1c2a      	adds	r2, r5, #0
 8002a56:	801a      	strh	r2, [r3, #0]
 8002a58:	1d3b      	adds	r3, r7, #4
 8002a5a:	1c22      	adds	r2, r4, #0
 8002a5c:	801a      	strh	r2, [r3, #0]
 8002a5e:	1cbb      	adds	r3, r7, #2
 8002a60:	1c02      	adds	r2, r0, #0
 8002a62:	801a      	strh	r2, [r3, #0]
 8002a64:	003b      	movs	r3, r7
 8002a66:	1c0a      	adds	r2, r1, #0
 8002a68:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8002a6a:	1dbb      	adds	r3, r7, #6
 8002a6c:	881b      	ldrh	r3, [r3, #0]
 8002a6e:	4a2a      	ldr	r2, [pc, #168]	@ (8002b18 <ST7735_DrawImage+0xd4>)
 8002a70:	2100      	movs	r1, #0
 8002a72:	5e52      	ldrsh	r2, [r2, r1]
 8002a74:	4293      	cmp	r3, r2
 8002a76:	da47      	bge.n	8002b08 <ST7735_DrawImage+0xc4>
 8002a78:	1d3b      	adds	r3, r7, #4
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	4a27      	ldr	r2, [pc, #156]	@ (8002b1c <ST7735_DrawImage+0xd8>)
 8002a7e:	2100      	movs	r1, #0
 8002a80:	5e52      	ldrsh	r2, [r2, r1]
 8002a82:	4293      	cmp	r3, r2
 8002a84:	da40      	bge.n	8002b08 <ST7735_DrawImage+0xc4>
    if((x + w - 1) >= _width) return;
 8002a86:	1dbb      	adds	r3, r7, #6
 8002a88:	881a      	ldrh	r2, [r3, #0]
 8002a8a:	1cbb      	adds	r3, r7, #2
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	18d3      	adds	r3, r2, r3
 8002a90:	4a21      	ldr	r2, [pc, #132]	@ (8002b18 <ST7735_DrawImage+0xd4>)
 8002a92:	2100      	movs	r1, #0
 8002a94:	5e52      	ldrsh	r2, [r2, r1]
 8002a96:	4293      	cmp	r3, r2
 8002a98:	dc38      	bgt.n	8002b0c <ST7735_DrawImage+0xc8>
    if((y + h - 1) >= _height) return;
 8002a9a:	1d3b      	adds	r3, r7, #4
 8002a9c:	881a      	ldrh	r2, [r3, #0]
 8002a9e:	003b      	movs	r3, r7
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	18d3      	adds	r3, r2, r3
 8002aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b1c <ST7735_DrawImage+0xd8>)
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	5e52      	ldrsh	r2, [r2, r1]
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	dc30      	bgt.n	8002b10 <ST7735_DrawImage+0xcc>

    ST7735_Select();
 8002aae:	f7ff fd9f 	bl	80025f0 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002ab2:	1dbb      	adds	r3, r7, #6
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	b2d8      	uxtb	r0, r3
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	b2d9      	uxtb	r1, r3
 8002abe:	1dbb      	adds	r3, r7, #6
 8002ac0:	881b      	ldrh	r3, [r3, #0]
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	1cbb      	adds	r3, r7, #2
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	18d3      	adds	r3, r2, r3
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b2dc      	uxtb	r4, r3
 8002ad2:	1d3b      	adds	r3, r7, #4
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	003b      	movs	r3, r7
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	18d3      	adds	r3, r2, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	0022      	movs	r2, r4
 8002ae8:	f7ff fe4a 	bl	8002780 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8002aec:	1cbb      	adds	r3, r7, #2
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	003a      	movs	r2, r7
 8002af2:	8812      	ldrh	r2, [r2, #0]
 8002af4:	4353      	muls	r3, r2
 8002af6:	005a      	lsls	r2, r3, #1
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	0011      	movs	r1, r2
 8002afc:	0018      	movs	r0, r3
 8002afe:	f7ff fdc1 	bl	8002684 <ST7735_WriteData>
    ST7735_Unselect();
 8002b02:	f7ff fd81 	bl	8002608 <ST7735_Unselect>
 8002b06:	e004      	b.n	8002b12 <ST7735_DrawImage+0xce>
    if((x >= _width) || (y >= _height)) return;
 8002b08:	46c0      	nop			@ (mov r8, r8)
 8002b0a:	e002      	b.n	8002b12 <ST7735_DrawImage+0xce>
    if((x + w - 1) >= _width) return;
 8002b0c:	46c0      	nop			@ (mov r8, r8)
 8002b0e:	e000      	b.n	8002b12 <ST7735_DrawImage+0xce>
    if((y + h - 1) >= _height) return;
 8002b10:	46c0      	nop			@ (mov r8, r8)
}
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b002      	add	sp, #8
 8002b16:	bdb0      	pop	{r4, r5, r7, pc}
 8002b18:	20000efc 	.word	0x20000efc
 8002b1c:	20000efe 	.word	0x20000efe

08002b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b20:	b590      	push	{r4, r7, lr}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b26:	f001 f939 	bl	8003d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b2a:	f000 fac5 	bl	80030b8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  steps=0;
 8002b2e:	4bde      	ldr	r3, [pc, #888]	@ (8002ea8 <main+0x388>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	701a      	strb	r2, [r3, #0]
  sitting0.Body = *imgSitting0;
 8002b34:	4bdd      	ldr	r3, [pc, #884]	@ (8002eac <main+0x38c>)
 8002b36:	4ade      	ldr	r2, [pc, #888]	@ (8002eb0 <main+0x390>)
 8002b38:	601a      	str	r2, [r3, #0]
  sitting0.Size = 307;
 8002b3a:	4bdc      	ldr	r3, [pc, #880]	@ (8002eac <main+0x38c>)
 8002b3c:	2234      	movs	r2, #52	@ 0x34
 8002b3e:	32ff      	adds	r2, #255	@ 0xff
 8002b40:	605a      	str	r2, [r3, #4]
  sitting1.Body = *imgSitting1;
 8002b42:	4bdc      	ldr	r3, [pc, #880]	@ (8002eb4 <main+0x394>)
 8002b44:	4adc      	ldr	r2, [pc, #880]	@ (8002eb8 <main+0x398>)
 8002b46:	601a      	str	r2, [r3, #0]
  sitting1.Size = 305;
 8002b48:	4bda      	ldr	r3, [pc, #872]	@ (8002eb4 <main+0x394>)
 8002b4a:	2232      	movs	r2, #50	@ 0x32
 8002b4c:	32ff      	adds	r2, #255	@ 0xff
 8002b4e:	605a      	str	r2, [r3, #4]
  animSitting[0] = sitting0;
 8002b50:	4bda      	ldr	r3, [pc, #872]	@ (8002ebc <main+0x39c>)
 8002b52:	4ad6      	ldr	r2, [pc, #856]	@ (8002eac <main+0x38c>)
 8002b54:	ca03      	ldmia	r2!, {r0, r1}
 8002b56:	c303      	stmia	r3!, {r0, r1}
  animSitting[1] = sitting1;
 8002b58:	4bd8      	ldr	r3, [pc, #864]	@ (8002ebc <main+0x39c>)
 8002b5a:	4ad6      	ldr	r2, [pc, #856]	@ (8002eb4 <main+0x394>)
 8002b5c:	3308      	adds	r3, #8
 8002b5e:	ca03      	ldmia	r2!, {r0, r1}
 8002b60:	c303      	stmia	r3!, {r0, r1}
  game.evo=0;
 8002b62:	4bd7      	ldr	r3, [pc, #860]	@ (8002ec0 <main+0x3a0>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	741a      	strb	r2, [r3, #16]
  game.uid[0]='h';
 8002b68:	4ad5      	ldr	r2, [pc, #852]	@ (8002ec0 <main+0x3a0>)
 8002b6a:	2394      	movs	r3, #148	@ 0x94
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	2168      	movs	r1, #104	@ 0x68
 8002b70:	54d1      	strb	r1, [r2, r3]
  game.uid[1]='i';
 8002b72:	4ad3      	ldr	r2, [pc, #844]	@ (8002ec0 <main+0x3a0>)
 8002b74:	232a      	movs	r3, #42	@ 0x2a
 8002b76:	33ff      	adds	r3, #255	@ 0xff
 8002b78:	2169      	movs	r1, #105	@ 0x69
 8002b7a:	54d1      	strb	r1, [r2, r3]
  game.allSteps=0;
 8002b7c:	4bd0      	ldr	r3, [pc, #832]	@ (8002ec0 <main+0x3a0>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	615a      	str	r2, [r3, #20]
  game.mood=100;
 8002b82:	4bcf      	ldr	r3, [pc, #828]	@ (8002ec0 <main+0x3a0>)
 8002b84:	2264      	movs	r2, #100	@ 0x64
 8002b86:	745a      	strb	r2, [r3, #17]
  game.numLocations=3;
 8002b88:	4bcd      	ldr	r3, [pc, #820]	@ (8002ec0 <main+0x3a0>)
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	619a      	str	r2, [r3, #24]
  game.stepsToday=0;
 8002b8e:	4acc      	ldr	r2, [pc, #816]	@ (8002ec0 <main+0x3a0>)
 8002b90:	2390      	movs	r3, #144	@ 0x90
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	2100      	movs	r1, #0
 8002b96:	50d1      	str	r1, [r2, r3]
  game.weeklySteps=0;
 8002b98:	4ac9      	ldr	r2, [pc, #804]	@ (8002ec0 <main+0x3a0>)
 8002b9a:	238e      	movs	r3, #142	@ 0x8e
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	50d1      	str	r1, [r2, r3]
  game.challengeGoal=20000;
 8002ba2:	4ac7      	ldr	r2, [pc, #796]	@ (8002ec0 <main+0x3a0>)
 8002ba4:	2392      	movs	r3, #146	@ 0x92
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	49c6      	ldr	r1, [pc, #792]	@ (8002ec4 <main+0x3a4>)
 8002baa:	50d1      	str	r1, [r2, r3]
  dummy.lat=12.34567;
 8002bac:	4bc6      	ldr	r3, [pc, #792]	@ (8002ec8 <main+0x3a8>)
 8002bae:	4ac7      	ldr	r2, [pc, #796]	@ (8002ecc <main+0x3ac>)
 8002bb0:	601a      	str	r2, [r3, #0]
  dummy.lon=-89.10111;
 8002bb2:	4bc5      	ldr	r3, [pc, #788]	@ (8002ec8 <main+0x3a8>)
 8002bb4:	4ac6      	ldr	r2, [pc, #792]	@ (8002ed0 <main+0x3b0>)
 8002bb6:	605a      	str	r2, [r3, #4]
  game.positions[0]=dummy;
 8002bb8:	4bc1      	ldr	r3, [pc, #772]	@ (8002ec0 <main+0x3a0>)
 8002bba:	4ac3      	ldr	r2, [pc, #780]	@ (8002ec8 <main+0x3a8>)
 8002bbc:	331c      	adds	r3, #28
 8002bbe:	ca03      	ldmia	r2!, {r0, r1}
 8002bc0:	c303      	stmia	r3!, {r0, r1}
  game.positions[1]=dummy;
 8002bc2:	4bbf      	ldr	r3, [pc, #764]	@ (8002ec0 <main+0x3a0>)
 8002bc4:	4ac0      	ldr	r2, [pc, #768]	@ (8002ec8 <main+0x3a8>)
 8002bc6:	3324      	adds	r3, #36	@ 0x24
 8002bc8:	ca03      	ldmia	r2!, {r0, r1}
 8002bca:	c303      	stmia	r3!, {r0, r1}
  game.positions[2]=dummy;
 8002bcc:	4bbc      	ldr	r3, [pc, #752]	@ (8002ec0 <main+0x3a0>)
 8002bce:	4abe      	ldr	r2, [pc, #760]	@ (8002ec8 <main+0x3a8>)
 8002bd0:	332c      	adds	r3, #44	@ 0x2c
 8002bd2:	ca03      	ldmia	r2!, {r0, r1}
 8002bd4:	c303      	stmia	r3!, {r0, r1}
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bd6:	f000 fc75 	bl	80034c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002bda:	f000 facf 	bl	800317c <MX_I2C1_Init>
  MX_SPI1_Init();
 8002bde:	f000 fb0d 	bl	80031fc <MX_SPI1_Init>
  MX_TIM17_Init();
 8002be2:	f000 fb4b 	bl	800327c <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8002be6:	f000 fbd1 	bl	800338c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002bea:	f000 fc1d 	bl	8003428 <MX_USART2_UART_Init>
  //MX_RTC_Init();
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
  ST7735_Unselect();
 8002bee:	f7ff fd0b 	bl	8002608 <ST7735_Unselect>
  ST7735_Init(1);
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f7ff fe1c 	bl	8002830 <ST7735_Init>
  //testAll();
  buffer[0] = 'A';
 8002bf8:	4bb6      	ldr	r3, [pc, #728]	@ (8002ed4 <main+0x3b4>)
 8002bfa:	2241      	movs	r2, #65	@ 0x41
 8002bfc:	701a      	strb	r2, [r3, #0]
  buffer[1] = 'B';
 8002bfe:	4bb5      	ldr	r3, [pc, #724]	@ (8002ed4 <main+0x3b4>)
 8002c00:	2242      	movs	r2, #66	@ 0x42
 8002c02:	705a      	strb	r2, [r3, #1]
  TIM17->CCR1 = 5;
 8002c04:	4bb4      	ldr	r3, [pc, #720]	@ (8002ed8 <main+0x3b8>)
 8002c06:	2205      	movs	r2, #5
 8002c08:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM17->PSC=64;
 8002c0a:	4bb3      	ldr	r3, [pc, #716]	@ (8002ed8 <main+0x3b8>)
 8002c0c:	2240      	movs	r2, #64	@ 0x40
 8002c0e:	629a      	str	r2, [r3, #40]	@ 0x28
  uint8_t ret=0;
 8002c10:	1dfb      	adds	r3, r7, #7
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
    //_ADXL343_Init();

      //Pedometer Setup
      _ADXL343_WriteReg8(0x19, 0x02);
 8002c16:	2102      	movs	r1, #2
 8002c18:	2019      	movs	r0, #25
 8002c1a:	f000 fcf9 	bl	8003610 <_ADXL343_WriteReg8>
      ////wait

      _ADXL343_WriteReg8(0x7C, 0x01);
 8002c1e:	2101      	movs	r1, #1
 8002c20:	207c      	movs	r0, #124	@ 0x7c
 8002c22:	f000 fcf5 	bl	8003610 <_ADXL343_WriteReg8>
       _ADXL343_WriteReg8(0x1A, 0x38);
 8002c26:	2138      	movs	r1, #56	@ 0x38
 8002c28:	201a      	movs	r0, #26
 8002c2a:	f000 fcf1 	bl	8003610 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1B, 0x04);
 8002c2e:	2104      	movs	r1, #4
 8002c30:	201b      	movs	r0, #27
 8002c32:	f000 fced 	bl	8003610 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1F, 0x80);
 8002c36:	2180      	movs	r1, #128	@ 0x80
 8002c38:	201f      	movs	r0, #31
 8002c3a:	f000 fce9 	bl	8003610 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x21, 0x80);
 8002c3e:	2180      	movs	r1, #128	@ 0x80
 8002c40:	2021      	movs	r0, #33	@ 0x21
 8002c42:	f000 fce5 	bl	8003610 <_ADXL343_WriteReg8>



      //  //Step Counter
      _ADXL343_WriteReg8(0x18, 0x01); // enable walking mode
 8002c46:	2101      	movs	r1, #1
 8002c48:	2018      	movs	r0, #24
 8002c4a:	f000 fce1 	bl	8003610 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x20, 0x01); // enable step interrupt
 8002c4e:	2101      	movs	r1, #1
 8002c50:	2020      	movs	r0, #32
 8002c52:	f000 fcdd 	bl	8003610 <_ADXL343_WriteReg8>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SendData();
 8002c56:	f000 fd01 	bl	800365c <SendData>
	  if((game.time.hours%dayLength)==0) game.stepsToday=0;
 8002c5a:	4b99      	ldr	r3, [pc, #612]	@ (8002ec0 <main+0x3a0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2218      	movs	r2, #24
 8002c60:	0011      	movs	r1, r2
 8002c62:	0018      	movs	r0, r3
 8002c64:	f7fd fbd0 	bl	8000408 <__aeabi_idivmod>
 8002c68:	1e0b      	subs	r3, r1, #0
 8002c6a:	d104      	bne.n	8002c76 <main+0x156>
 8002c6c:	4a94      	ldr	r2, [pc, #592]	@ (8002ec0 <main+0x3a0>)
 8002c6e:	2390      	movs	r3, #144	@ 0x90
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	2100      	movs	r1, #0
 8002c74:	50d1      	str	r1, [r2, r3]
	  if((game.time.hours%weekLength)==0) game.weeklySteps=0;
 8002c76:	4b92      	ldr	r3, [pc, #584]	@ (8002ec0 <main+0x3a0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	22a8      	movs	r2, #168	@ 0xa8
 8002c7c:	0011      	movs	r1, r2
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f7fd fbc2 	bl	8000408 <__aeabi_idivmod>
 8002c84:	1e0b      	subs	r3, r1, #0
 8002c86:	d104      	bne.n	8002c92 <main+0x172>
 8002c88:	4a8d      	ldr	r2, [pc, #564]	@ (8002ec0 <main+0x3a0>)
 8002c8a:	238e      	movs	r3, #142	@ 0x8e
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	2100      	movs	r1, #0
 8002c90:	50d1      	str	r1, [r2, r3]
	  game.stepsToday +=steps-game.allSteps;
 8002c92:	4a8b      	ldr	r2, [pc, #556]	@ (8002ec0 <main+0x3a0>)
 8002c94:	2390      	movs	r3, #144	@ 0x90
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	58d2      	ldr	r2, [r2, r3]
 8002c9a:	4b83      	ldr	r3, [pc, #524]	@ (8002ea8 <main+0x388>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	0019      	movs	r1, r3
 8002ca0:	4b87      	ldr	r3, [pc, #540]	@ (8002ec0 <main+0x3a0>)
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	1acb      	subs	r3, r1, r3
 8002ca6:	18d1      	adds	r1, r2, r3
 8002ca8:	4a85      	ldr	r2, [pc, #532]	@ (8002ec0 <main+0x3a0>)
 8002caa:	2390      	movs	r3, #144	@ 0x90
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	50d1      	str	r1, [r2, r3]
	  game.weeklySteps+=steps-game.allSteps;
 8002cb0:	4a83      	ldr	r2, [pc, #524]	@ (8002ec0 <main+0x3a0>)
 8002cb2:	238e      	movs	r3, #142	@ 0x8e
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	58d2      	ldr	r2, [r2, r3]
 8002cb8:	4b7b      	ldr	r3, [pc, #492]	@ (8002ea8 <main+0x388>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	0019      	movs	r1, r3
 8002cbe:	4b80      	ldr	r3, [pc, #512]	@ (8002ec0 <main+0x3a0>)
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	1acb      	subs	r3, r1, r3
 8002cc4:	18d1      	adds	r1, r2, r3
 8002cc6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ec0 <main+0x3a0>)
 8002cc8:	238e      	movs	r3, #142	@ 0x8e
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	50d1      	str	r1, [r2, r3]
	  game.allSteps=steps;
 8002cce:	4b76      	ldr	r3, [pc, #472]	@ (8002ea8 <main+0x388>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	001a      	movs	r2, r3
 8002cd4:	4b7a      	ldr	r3, [pc, #488]	@ (8002ec0 <main+0x3a0>)
 8002cd6:	615a      	str	r2, [r3, #20]
	  //SendData();
	  //HAL_UART_Transmit(&huart2, "hello", 5, 100);
	  switch(currentMenu){
 8002cd8:	4b80      	ldr	r3, [pc, #512]	@ (8002edc <main+0x3bc>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d100      	bne.n	8002ce2 <main+0x1c2>
 8002ce0:	e0c3      	b.n	8002e6a <main+0x34a>
 8002ce2:	dcb8      	bgt.n	8002c56 <main+0x136>
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d100      	bne.n	8002cea <main+0x1ca>
 8002ce8:	e07a      	b.n	8002de0 <main+0x2c0>
 8002cea:	dcb4      	bgt.n	8002c56 <main+0x136>
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d05d      	beq.n	8002dac <main+0x28c>
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d1b0      	bne.n	8002c56 <main+0x136>
	  case Main:
		  //fillScreen(BLACK);

		  // Draw the Silly little guy centered
		  drawImage(testImage, palette, 40, 40, 64, 64, 296);
 8002cf4:	497a      	ldr	r1, [pc, #488]	@ (8002ee0 <main+0x3c0>)
 8002cf6:	487b      	ldr	r0, [pc, #492]	@ (8002ee4 <main+0x3c4>)
 8002cf8:	2394      	movs	r3, #148	@ 0x94
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	9302      	str	r3, [sp, #8]
 8002cfe:	2340      	movs	r3, #64	@ 0x40
 8002d00:	9301      	str	r3, [sp, #4]
 8002d02:	2340      	movs	r3, #64	@ 0x40
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	2328      	movs	r3, #40	@ 0x28
 8002d08:	2228      	movs	r2, #40	@ 0x28
 8002d0a:	f7ff fbab 	bl	8002464 <drawImage>
		  fillRect(40, 40, 64, 64, BLACK);
 8002d0e:	2300      	movs	r3, #0
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	2340      	movs	r3, #64	@ 0x40
 8002d14:	2240      	movs	r2, #64	@ 0x40
 8002d16:	2128      	movs	r1, #40	@ 0x28
 8002d18:	2028      	movs	r0, #40	@ 0x28
 8002d1a:	f7ff f91d 	bl	8001f58 <fillRect>

		  //Display the current Steps
		  _ADXL343_ReadReg8(0x15, &steps, 1);
 8002d1e:	4b62      	ldr	r3, [pc, #392]	@ (8002ea8 <main+0x388>)
 8002d20:	2201      	movs	r2, #1
 8002d22:	0019      	movs	r1, r3
 8002d24:	2015      	movs	r0, #21
 8002d26:	f000 fc41 	bl	80035ac <_ADXL343_ReadReg8>
		  sprintf(buffer2, "Steps: %d ", steps);
 8002d2a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ea8 <main+0x388>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	001a      	movs	r2, r3
 8002d30:	496d      	ldr	r1, [pc, #436]	@ (8002ee8 <main+0x3c8>)
 8002d32:	4b6e      	ldr	r3, [pc, #440]	@ (8002eec <main+0x3cc>)
 8002d34:	0018      	movs	r0, r3
 8002d36:	f005 fe55 	bl	80089e4 <siprintf>
		  drawString(0, 20, buffer2, BLACK, GREEN, 1, 1);
 8002d3a:	4a6c      	ldr	r2, [pc, #432]	@ (8002eec <main+0x3cc>)
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	9302      	str	r3, [sp, #8]
 8002d40:	2301      	movs	r3, #1
 8002d42:	9301      	str	r3, [sp, #4]
 8002d44:	4b6a      	ldr	r3, [pc, #424]	@ (8002ef0 <main+0x3d0>)
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	2300      	movs	r3, #0
 8002d4a:	2114      	movs	r1, #20
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	f7ff f9a5 	bl	800209c <drawString>

		  //Change current Menu
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET ) {
 8002d52:	2380      	movs	r3, #128	@ 0x80
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	23a0      	movs	r3, #160	@ 0xa0
 8002d58:	05db      	lsls	r3, r3, #23
 8002d5a:	0011      	movs	r1, r2
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f001 fafd 	bl	800435c <HAL_GPIO_ReadPin>
 8002d62:	0003      	movs	r3, r0
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d10b      	bne.n	8002d80 <main+0x260>
			  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8002d68:	4b62      	ldr	r3, [pc, #392]	@ (8002ef4 <main+0x3d4>)
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f004 f803 	bl	8006d78 <HAL_TIM_PWM_Start>
			  currentMenu = MusicTest;
 8002d72:	4b5a      	ldr	r3, [pc, #360]	@ (8002edc <main+0x3bc>)
 8002d74:	2202      	movs	r2, #2
 8002d76:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8002d78:	4b5f      	ldr	r3, [pc, #380]	@ (8002ef8 <main+0x3d8>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
		  }
		  else
			  canChange = 1;


		  break;
 8002d7e:	e177      	b.n	8003070 <main+0x550>
		  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET ) {
 8002d80:	2380      	movs	r3, #128	@ 0x80
 8002d82:	011a      	lsls	r2, r3, #4
 8002d84:	23a0      	movs	r3, #160	@ 0xa0
 8002d86:	05db      	lsls	r3, r3, #23
 8002d88:	0011      	movs	r1, r2
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f001 fae6 	bl	800435c <HAL_GPIO_ReadPin>
 8002d90:	0003      	movs	r3, r0
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d106      	bne.n	8002da4 <main+0x284>
			  currentMenu = StatsDisplay;
 8002d96:	4b51      	ldr	r3, [pc, #324]	@ (8002edc <main+0x3bc>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8002d9c:	4b56      	ldr	r3, [pc, #344]	@ (8002ef8 <main+0x3d8>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
		  break;
 8002da2:	e165      	b.n	8003070 <main+0x550>
			  canChange = 1;
 8002da4:	4b54      	ldr	r3, [pc, #336]	@ (8002ef8 <main+0x3d8>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	701a      	strb	r2, [r3, #0]
		  break;
 8002daa:	e161      	b.n	8003070 <main+0x550>
	  case StatsDisplay:
		  fillScreen(WHITE);
 8002dac:	4b53      	ldr	r3, [pc, #332]	@ (8002efc <main+0x3dc>)
 8002dae:	0018      	movs	r0, r3
 8002db0:	f7ff fae4 	bl	800237c <fillScreen>

	  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET ){
 8002db4:	2380      	movs	r3, #128	@ 0x80
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	23a0      	movs	r3, #160	@ 0xa0
 8002dba:	05db      	lsls	r3, r3, #23
 8002dbc:	0011      	movs	r1, r2
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f001 facc 	bl	800435c <HAL_GPIO_ReadPin>
 8002dc4:	0003      	movs	r3, r0
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d106      	bne.n	8002dd8 <main+0x2b8>
	  		currentMenu = Main;
 8002dca:	4b44      	ldr	r3, [pc, #272]	@ (8002edc <main+0x3bc>)
 8002dcc:	2201      	movs	r2, #1
 8002dce:	701a      	strb	r2, [r3, #0]
	  		canChange = 0;
 8002dd0:	4b49      	ldr	r3, [pc, #292]	@ (8002ef8 <main+0x3d8>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	701a      	strb	r2, [r3, #0]
	  	  }
	  	  else
	  	      canChange = 1;

	  	  break;
 8002dd6:	e14b      	b.n	8003070 <main+0x550>
	  	      canChange = 1;
 8002dd8:	4b47      	ldr	r3, [pc, #284]	@ (8002ef8 <main+0x3d8>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	701a      	strb	r2, [r3, #0]
	  	  break;
 8002dde:	e147      	b.n	8003070 <main+0x550>
	  case MusicTest:
		  fillScreen(BLUE);
 8002de0:	23f8      	movs	r3, #248	@ 0xf8
 8002de2:	015b      	lsls	r3, r3, #5
 8002de4:	0018      	movs	r0, r3
 8002de6:	f7ff fac9 	bl	800237c <fillScreen>

		  freq = freqs[(toneIndex++)%8];
 8002dea:	4b45      	ldr	r3, [pc, #276]	@ (8002f00 <main+0x3e0>)
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	b291      	uxth	r1, r2
 8002df4:	4a42      	ldr	r2, [pc, #264]	@ (8002f00 <main+0x3e0>)
 8002df6:	8011      	strh	r1, [r2, #0]
 8002df8:	001a      	movs	r2, r3
 8002dfa:	2307      	movs	r3, #7
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	4a41      	ldr	r2, [pc, #260]	@ (8002f04 <main+0x3e4>)
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	18d3      	adds	r3, r2, r3
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	493f      	ldr	r1, [pc, #252]	@ (8002f08 <main+0x3e8>)
 8002e0a:	600a      	str	r2, [r1, #0]
 8002e0c:	604b      	str	r3, [r1, #4]
		  TIM17->ARR=(uint32_t)(987*(float)1000/(float)freq);
 8002e0e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f08 <main+0x3e8>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	0010      	movs	r0, r2
 8002e16:	0019      	movs	r1, r3
 8002e18:	f7fe fed4 	bl	8001bc4 <__aeabi_d2f>
 8002e1c:	1c03      	adds	r3, r0, #0
 8002e1e:	1c19      	adds	r1, r3, #0
 8002e20:	483a      	ldr	r0, [pc, #232]	@ (8002f0c <main+0x3ec>)
 8002e22:	f7fd fc39 	bl	8000698 <__aeabi_fdiv>
 8002e26:	1c03      	adds	r3, r0, #0
 8002e28:	4c2b      	ldr	r4, [pc, #172]	@ (8002ed8 <main+0x3b8>)
 8002e2a:	1c18      	adds	r0, r3, #0
 8002e2c:	f7fd fb50 	bl	80004d0 <__aeabi_f2uiz>
 8002e30:	0003      	movs	r3, r0
 8002e32:	62e3      	str	r3, [r4, #44]	@ 0x2c

		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET) {
 8002e34:	2380      	movs	r3, #128	@ 0x80
 8002e36:	011a      	lsls	r2, r3, #4
 8002e38:	23a0      	movs	r3, #160	@ 0xa0
 8002e3a:	05db      	lsls	r3, r3, #23
 8002e3c:	0011      	movs	r1, r2
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f001 fa8c 	bl	800435c <HAL_GPIO_ReadPin>
 8002e44:	0003      	movs	r3, r0
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d10b      	bne.n	8002e62 <main+0x342>
			  currentMenu = Main;
 8002e4a:	4b24      	ldr	r3, [pc, #144]	@ (8002edc <main+0x3bc>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8002e50:	4b29      	ldr	r3, [pc, #164]	@ (8002ef8 <main+0x3d8>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8002e56:	4b27      	ldr	r3, [pc, #156]	@ (8002ef4 <main+0x3d4>)
 8002e58:	2100      	movs	r1, #0
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f004 f87c 	bl	8006f58 <HAL_TIM_PWM_Stop>
		  }
		  else
			  canChange = 1;

		  break;
 8002e60:	e106      	b.n	8003070 <main+0x550>
			  canChange = 1;
 8002e62:	4b25      	ldr	r3, [pc, #148]	@ (8002ef8 <main+0x3d8>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	701a      	strb	r2, [r3, #0]
		  break;
 8002e68:	e102      	b.n	8003070 <main+0x550>
	  case ConnorDemo:
		  	  steps=0;
 8002e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea8 <main+0x388>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]

		  	  if((whileI++)%3==0)
 8002e70:	4b27      	ldr	r3, [pc, #156]	@ (8002f10 <main+0x3f0>)
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	1c5a      	adds	r2, r3, #1
 8002e78:	b291      	uxth	r1, r2
 8002e7a:	4a25      	ldr	r2, [pc, #148]	@ (8002f10 <main+0x3f0>)
 8002e7c:	8011      	strh	r1, [r2, #0]
 8002e7e:	2103      	movs	r1, #3
 8002e80:	0018      	movs	r0, r3
 8002e82:	f7fd f9d7 	bl	8000234 <__aeabi_uidivmod>
 8002e86:	000b      	movs	r3, r1
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d147      	bne.n	8002f1e <main+0x3fe>
		  		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET)
 8002e8e:	4b21      	ldr	r3, [pc, #132]	@ (8002f14 <main+0x3f4>)
 8002e90:	2102      	movs	r1, #2
 8002e92:	0018      	movs	r0, r3
 8002e94:	f001 fa62 	bl	800435c <HAL_GPIO_ReadPin>
 8002e98:	0003      	movs	r3, r0
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d13c      	bne.n	8002f18 <main+0x3f8>
		  		  		  fillScreen(WHITE);
 8002e9e:	4b17      	ldr	r3, [pc, #92]	@ (8002efc <main+0x3dc>)
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f7ff fa6b 	bl	800237c <fillScreen>
 8002ea6:	e03a      	b.n	8002f1e <main+0x3fe>
 8002ea8:	20001303 	.word	0x20001303
 8002eac:	2000126c 	.word	0x2000126c
 8002eb0:	200004a0 	.word	0x200004a0
 8002eb4:	20001274 	.word	0x20001274
 8002eb8:	2000096c 	.word	0x2000096c
 8002ebc:	2000127c 	.word	0x2000127c
 8002ec0:	20000f08 	.word	0x20000f08
 8002ec4:	00004e20 	.word	0x00004e20
 8002ec8:	20001050 	.word	0x20001050
 8002ecc:	414587dd 	.word	0x414587dd
 8002ed0:	c2b233c5 	.word	0xc2b233c5
 8002ed4:	2000105c 	.word	0x2000105c
 8002ed8:	40014800 	.word	0x40014800
 8002edc:	20000e80 	.word	0x20000e80
 8002ee0:	20000e30 	.word	0x20000e30
 8002ee4:	20000000 	.word	0x20000000
 8002ee8:	080095b8 	.word	0x080095b8
 8002eec:	2000129c 	.word	0x2000129c
 8002ef0:	ffffe007 	.word	0xffffe007
 8002ef4:	200013e8 	.word	0x200013e8
 8002ef8:	20000e81 	.word	0x20000e81
 8002efc:	0000ffff 	.word	0x0000ffff
 8002f00:	20001298 	.word	0x20001298
 8002f04:	20000e40 	.word	0x20000e40
 8002f08:	20001290 	.word	0x20001290
 8002f0c:	4970f780 	.word	0x4970f780
 8002f10:	20001058 	.word	0x20001058
 8002f14:	50000800 	.word	0x50000800
		  		  	  else
		  		  		  fillScreen(BLACK);
 8002f18:	2000      	movs	r0, #0
 8002f1a:	f7ff fa2f 	bl	800237c <fillScreen>
		  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET)
 8002f1e:	2380      	movs	r3, #128	@ 0x80
 8002f20:	011a      	lsls	r2, r3, #4
 8002f22:	23a0      	movs	r3, #160	@ 0xa0
 8002f24:	05db      	lsls	r3, r3, #23
 8002f26:	0011      	movs	r1, r2
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f001 fa17 	bl	800435c <HAL_GPIO_ReadPin>
 8002f2e:	0003      	movs	r3, r0
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d106      	bne.n	8002f42 <main+0x422>
		  		  petXPos-=5;
 8002f34:	4b4f      	ldr	r3, [pc, #316]	@ (8003074 <main+0x554>)
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b05      	subs	r3, #5
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	4b4d      	ldr	r3, [pc, #308]	@ (8003074 <main+0x554>)
 8002f40:	801a      	strh	r2, [r3, #0]
		  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET)
 8002f42:	2380      	movs	r3, #128	@ 0x80
 8002f44:	015a      	lsls	r2, r3, #5
 8002f46:	23a0      	movs	r3, #160	@ 0xa0
 8002f48:	05db      	lsls	r3, r3, #23
 8002f4a:	0011      	movs	r1, r2
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f001 fa05 	bl	800435c <HAL_GPIO_ReadPin>
 8002f52:	0003      	movs	r3, r0
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d106      	bne.n	8002f66 <main+0x446>
		  		  petXPos+=5;
 8002f58:	4b46      	ldr	r3, [pc, #280]	@ (8003074 <main+0x554>)
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	3305      	adds	r3, #5
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	4b44      	ldr	r3, [pc, #272]	@ (8003074 <main+0x554>)
 8002f64:	801a      	strh	r2, [r3, #0]
		  	  if(petXPos<3)petXPos=0;
 8002f66:	4b43      	ldr	r3, [pc, #268]	@ (8003074 <main+0x554>)
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d802      	bhi.n	8002f76 <main+0x456>
 8002f70:	4b40      	ldr	r3, [pc, #256]	@ (8003074 <main+0x554>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	801a      	strh	r2, [r3, #0]
		  	  if(petXPos>60) petXPos=60;
 8002f76:	4b3f      	ldr	r3, [pc, #252]	@ (8003074 <main+0x554>)
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b3c      	cmp	r3, #60	@ 0x3c
 8002f7e:	d902      	bls.n	8002f86 <main+0x466>
 8002f80:	4b3c      	ldr	r3, [pc, #240]	@ (8003074 <main+0x554>)
 8002f82:	223c      	movs	r2, #60	@ 0x3c
 8002f84:	801a      	strh	r2, [r3, #0]
		  	  freq = freqs[(toneIndex++)%8];
 8002f86:	4b3c      	ldr	r3, [pc, #240]	@ (8003078 <main+0x558>)
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	b291      	uxth	r1, r2
 8002f90:	4a39      	ldr	r2, [pc, #228]	@ (8003078 <main+0x558>)
 8002f92:	8011      	strh	r1, [r2, #0]
 8002f94:	001a      	movs	r2, r3
 8002f96:	2307      	movs	r3, #7
 8002f98:	4013      	ands	r3, r2
 8002f9a:	4a38      	ldr	r2, [pc, #224]	@ (800307c <main+0x55c>)
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	18d3      	adds	r3, r2, r3
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	4936      	ldr	r1, [pc, #216]	@ (8003080 <main+0x560>)
 8002fa6:	600a      	str	r2, [r1, #0]
 8002fa8:	604b      	str	r3, [r1, #4]
		  	  TIM17->ARR=(uint32_t)(987*(float)1000/(float)freq);
 8002faa:	4b35      	ldr	r3, [pc, #212]	@ (8003080 <main+0x560>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	0010      	movs	r0, r2
 8002fb2:	0019      	movs	r1, r3
 8002fb4:	f7fe fe06 	bl	8001bc4 <__aeabi_d2f>
 8002fb8:	1c03      	adds	r3, r0, #0
 8002fba:	1c19      	adds	r1, r3, #0
 8002fbc:	4831      	ldr	r0, [pc, #196]	@ (8003084 <main+0x564>)
 8002fbe:	f7fd fb6b 	bl	8000698 <__aeabi_fdiv>
 8002fc2:	1c03      	adds	r3, r0, #0
 8002fc4:	4c30      	ldr	r4, [pc, #192]	@ (8003088 <main+0x568>)
 8002fc6:	1c18      	adds	r0, r3, #0
 8002fc8:	f7fd fa82 	bl	80004d0 <__aeabi_f2uiz>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	62e3      	str	r3, [r4, #44]	@ 0x2c
		  	  //fillScreen(WHITE);
		  	  drawImage(testImage, palette, petXPos, 40, 64, 64, 296);
 8002fd0:	4b28      	ldr	r3, [pc, #160]	@ (8003074 <main+0x554>)
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	492d      	ldr	r1, [pc, #180]	@ (800308c <main+0x56c>)
 8002fd8:	482d      	ldr	r0, [pc, #180]	@ (8003090 <main+0x570>)
 8002fda:	2394      	movs	r3, #148	@ 0x94
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	9302      	str	r3, [sp, #8]
 8002fe0:	2340      	movs	r3, #64	@ 0x40
 8002fe2:	9301      	str	r3, [sp, #4]
 8002fe4:	2340      	movs	r3, #64	@ 0x40
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	2328      	movs	r3, #40	@ 0x28
 8002fea:	f7ff fa3b 	bl	8002464 <drawImage>
//		  	  _ADXL343_ReadReg8(0x06, &accelZ, 1);
//		  	  _ADXL343_ReadReg8(0x07, &accelX, 1);
//		  	  _ADXL343_ReadReg8(0x08, &accelY, 1);
//		  	  _ADXL343_ReadReg8(0x09, &accelZ, 1);

		  	  sprintf(buffer2, "X:%d - Y:%d - Z:%d ", accelX, accelY, accelZ);
 8002fee:	4b29      	ldr	r3, [pc, #164]	@ (8003094 <main+0x574>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	001a      	movs	r2, r3
 8002ff4:	4b28      	ldr	r3, [pc, #160]	@ (8003098 <main+0x578>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	001c      	movs	r4, r3
 8002ffa:	4b28      	ldr	r3, [pc, #160]	@ (800309c <main+0x57c>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	4928      	ldr	r1, [pc, #160]	@ (80030a0 <main+0x580>)
 8003000:	4828      	ldr	r0, [pc, #160]	@ (80030a4 <main+0x584>)
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	0023      	movs	r3, r4
 8003006:	f005 fced 	bl	80089e4 <siprintf>
		  	  drawString(0, 10, buffer2, BLACK, GREEN, 1, 1);
 800300a:	4a26      	ldr	r2, [pc, #152]	@ (80030a4 <main+0x584>)
 800300c:	2301      	movs	r3, #1
 800300e:	9302      	str	r3, [sp, #8]
 8003010:	2301      	movs	r3, #1
 8003012:	9301      	str	r3, [sp, #4]
 8003014:	4b24      	ldr	r3, [pc, #144]	@ (80030a8 <main+0x588>)
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	2300      	movs	r3, #0
 800301a:	210a      	movs	r1, #10
 800301c:	2000      	movs	r0, #0
 800301e:	f7ff f83d 	bl	800209c <drawString>

		  	  _ADXL343_ReadReg8(0x15, &steps, 1);
 8003022:	4b22      	ldr	r3, [pc, #136]	@ (80030ac <main+0x58c>)
 8003024:	2201      	movs	r2, #1
 8003026:	0019      	movs	r1, r3
 8003028:	2015      	movs	r0, #21
 800302a:	f000 fabf 	bl	80035ac <_ADXL343_ReadReg8>
		  	  sprintf(buffer2, "Steps: %d ", steps);
 800302e:	4b1f      	ldr	r3, [pc, #124]	@ (80030ac <main+0x58c>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	001a      	movs	r2, r3
 8003034:	491e      	ldr	r1, [pc, #120]	@ (80030b0 <main+0x590>)
 8003036:	4b1b      	ldr	r3, [pc, #108]	@ (80030a4 <main+0x584>)
 8003038:	0018      	movs	r0, r3
 800303a:	f005 fcd3 	bl	80089e4 <siprintf>
		  	  drawString(0, 20, buffer2, BLACK, GREEN, 1, 1);
 800303e:	4a19      	ldr	r2, [pc, #100]	@ (80030a4 <main+0x584>)
 8003040:	2301      	movs	r3, #1
 8003042:	9302      	str	r3, [sp, #8]
 8003044:	2301      	movs	r3, #1
 8003046:	9301      	str	r3, [sp, #4]
 8003048:	4b17      	ldr	r3, [pc, #92]	@ (80030a8 <main+0x588>)
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2300      	movs	r3, #0
 800304e:	2114      	movs	r1, #20
 8003050:	2000      	movs	r0, #0
 8003052:	f7ff f823 	bl	800209c <drawString>

		  	  	  //only run this code every few seconds

		  	  drawString(70, 70, buffer, BLACK, GREEN, 1, 1);
 8003056:	4a17      	ldr	r2, [pc, #92]	@ (80030b4 <main+0x594>)
 8003058:	2301      	movs	r3, #1
 800305a:	9302      	str	r3, [sp, #8]
 800305c:	2301      	movs	r3, #1
 800305e:	9301      	str	r3, [sp, #4]
 8003060:	4b11      	ldr	r3, [pc, #68]	@ (80030a8 <main+0x588>)
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	2300      	movs	r3, #0
 8003066:	2146      	movs	r1, #70	@ 0x46
 8003068:	2046      	movs	r0, #70	@ 0x46
 800306a:	f7ff f817 	bl	800209c <drawString>

		  break;
 800306e:	46c0      	nop			@ (mov r8, r8)
	  SendData();
 8003070:	e5f1      	b.n	8002c56 <main+0x136>
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	2000105a 	.word	0x2000105a
 8003078:	20001298 	.word	0x20001298
 800307c:	20000e40 	.word	0x20000e40
 8003080:	20001290 	.word	0x20001290
 8003084:	4970f780 	.word	0x4970f780
 8003088:	40014800 	.word	0x40014800
 800308c:	20000e30 	.word	0x20000e30
 8003090:	20000000 	.word	0x20000000
 8003094:	20001300 	.word	0x20001300
 8003098:	20001301 	.word	0x20001301
 800309c:	20001302 	.word	0x20001302
 80030a0:	080095c4 	.word	0x080095c4
 80030a4:	2000129c 	.word	0x2000129c
 80030a8:	ffffe007 	.word	0xffffe007
 80030ac:	20001303 	.word	0x20001303
 80030b0:	080095b8 	.word	0x080095b8
 80030b4:	2000105c 	.word	0x2000105c

080030b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030b8:	b590      	push	{r4, r7, lr}
 80030ba:	b095      	sub	sp, #84	@ 0x54
 80030bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030be:	2414      	movs	r4, #20
 80030c0:	193b      	adds	r3, r7, r4
 80030c2:	0018      	movs	r0, r3
 80030c4:	233c      	movs	r3, #60	@ 0x3c
 80030c6:	001a      	movs	r2, r3
 80030c8:	2100      	movs	r1, #0
 80030ca:	f005 fcab 	bl	8008a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030ce:	1d3b      	adds	r3, r7, #4
 80030d0:	0018      	movs	r0, r3
 80030d2:	2310      	movs	r3, #16
 80030d4:	001a      	movs	r2, r3
 80030d6:	2100      	movs	r1, #0
 80030d8:	f005 fca4 	bl	8008a24 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030dc:	2380      	movs	r3, #128	@ 0x80
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	0018      	movs	r0, r3
 80030e2:	f001 ffb9 	bl	8005058 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80030e6:	193b      	adds	r3, r7, r4
 80030e8:	220a      	movs	r2, #10
 80030ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030ec:	193b      	adds	r3, r7, r4
 80030ee:	2280      	movs	r2, #128	@ 0x80
 80030f0:	0052      	lsls	r2, r2, #1
 80030f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80030f4:	0021      	movs	r1, r4
 80030f6:	187b      	adds	r3, r7, r1
 80030f8:	2200      	movs	r2, #0
 80030fa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030fc:	187b      	adds	r3, r7, r1
 80030fe:	2240      	movs	r2, #64	@ 0x40
 8003100:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003102:	187b      	adds	r3, r7, r1
 8003104:	2201      	movs	r2, #1
 8003106:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003108:	187b      	adds	r3, r7, r1
 800310a:	2202      	movs	r2, #2
 800310c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800310e:	187b      	adds	r3, r7, r1
 8003110:	2202      	movs	r2, #2
 8003112:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003114:	187b      	adds	r3, r7, r1
 8003116:	2200      	movs	r2, #0
 8003118:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 800311a:	187b      	adds	r3, r7, r1
 800311c:	2208      	movs	r2, #8
 800311e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003120:	187b      	adds	r3, r7, r1
 8003122:	2280      	movs	r2, #128	@ 0x80
 8003124:	0292      	lsls	r2, r2, #10
 8003126:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003128:	187b      	adds	r3, r7, r1
 800312a:	2280      	movs	r2, #128	@ 0x80
 800312c:	0492      	lsls	r2, r2, #18
 800312e:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003130:	187b      	adds	r3, r7, r1
 8003132:	2280      	movs	r2, #128	@ 0x80
 8003134:	0592      	lsls	r2, r2, #22
 8003136:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003138:	187b      	adds	r3, r7, r1
 800313a:	0018      	movs	r0, r3
 800313c:	f001 ffd8 	bl	80050f0 <HAL_RCC_OscConfig>
 8003140:	1e03      	subs	r3, r0, #0
 8003142:	d001      	beq.n	8003148 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8003144:	f000 fb96 	bl	8003874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003148:	1d3b      	adds	r3, r7, #4
 800314a:	2207      	movs	r2, #7
 800314c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800314e:	1d3b      	adds	r3, r7, #4
 8003150:	2202      	movs	r2, #2
 8003152:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003154:	1d3b      	adds	r3, r7, #4
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800315a:	1d3b      	adds	r3, r7, #4
 800315c:	2200      	movs	r2, #0
 800315e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003160:	1d3b      	adds	r3, r7, #4
 8003162:	2102      	movs	r1, #2
 8003164:	0018      	movs	r0, r3
 8003166:	f002 fb23 	bl	80057b0 <HAL_RCC_ClockConfig>
 800316a:	1e03      	subs	r3, r0, #0
 800316c:	d001      	beq.n	8003172 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800316e:	f000 fb81 	bl	8003874 <Error_Handler>
  }
}
 8003172:	46c0      	nop			@ (mov r8, r8)
 8003174:	46bd      	mov	sp, r7
 8003176:	b015      	add	sp, #84	@ 0x54
 8003178:	bd90      	pop	{r4, r7, pc}
	...

0800317c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003180:	4b1b      	ldr	r3, [pc, #108]	@ (80031f0 <MX_I2C1_Init+0x74>)
 8003182:	4a1c      	ldr	r2, [pc, #112]	@ (80031f4 <MX_I2C1_Init+0x78>)
 8003184:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8003186:	4b1a      	ldr	r3, [pc, #104]	@ (80031f0 <MX_I2C1_Init+0x74>)
 8003188:	4a1b      	ldr	r2, [pc, #108]	@ (80031f8 <MX_I2C1_Init+0x7c>)
 800318a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800318c:	4b18      	ldr	r3, [pc, #96]	@ (80031f0 <MX_I2C1_Init+0x74>)
 800318e:	2200      	movs	r2, #0
 8003190:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003192:	4b17      	ldr	r3, [pc, #92]	@ (80031f0 <MX_I2C1_Init+0x74>)
 8003194:	2201      	movs	r2, #1
 8003196:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003198:	4b15      	ldr	r3, [pc, #84]	@ (80031f0 <MX_I2C1_Init+0x74>)
 800319a:	2200      	movs	r2, #0
 800319c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800319e:	4b14      	ldr	r3, [pc, #80]	@ (80031f0 <MX_I2C1_Init+0x74>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80031a4:	4b12      	ldr	r3, [pc, #72]	@ (80031f0 <MX_I2C1_Init+0x74>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031aa:	4b11      	ldr	r3, [pc, #68]	@ (80031f0 <MX_I2C1_Init+0x74>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031b0:	4b0f      	ldr	r3, [pc, #60]	@ (80031f0 <MX_I2C1_Init+0x74>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80031b6:	4b0e      	ldr	r3, [pc, #56]	@ (80031f0 <MX_I2C1_Init+0x74>)
 80031b8:	0018      	movs	r0, r3
 80031ba:	f001 f909 	bl	80043d0 <HAL_I2C_Init>
 80031be:	1e03      	subs	r3, r0, #0
 80031c0:	d001      	beq.n	80031c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80031c2:	f000 fb57 	bl	8003874 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80031c6:	4b0a      	ldr	r3, [pc, #40]	@ (80031f0 <MX_I2C1_Init+0x74>)
 80031c8:	2100      	movs	r1, #0
 80031ca:	0018      	movs	r0, r3
 80031cc:	f001 feac 	bl	8004f28 <HAL_I2CEx_ConfigAnalogFilter>
 80031d0:	1e03      	subs	r3, r0, #0
 80031d2:	d001      	beq.n	80031d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80031d4:	f000 fb4e 	bl	8003874 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80031d8:	4b05      	ldr	r3, [pc, #20]	@ (80031f0 <MX_I2C1_Init+0x74>)
 80031da:	2100      	movs	r1, #0
 80031dc:	0018      	movs	r0, r3
 80031de:	f001 feef 	bl	8004fc0 <HAL_I2CEx_ConfigDigitalFilter>
 80031e2:	1e03      	subs	r3, r0, #0
 80031e4:	d001      	beq.n	80031ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80031e6:	f000 fb45 	bl	8003874 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80031ea:	46c0      	nop			@ (mov r8, r8)
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20001304 	.word	0x20001304
 80031f4:	40005400 	.word	0x40005400
 80031f8:	10b17db5 	.word	0x10b17db5

080031fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003200:	4b1c      	ldr	r3, [pc, #112]	@ (8003274 <MX_SPI1_Init+0x78>)
 8003202:	4a1d      	ldr	r2, [pc, #116]	@ (8003278 <MX_SPI1_Init+0x7c>)
 8003204:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003206:	4b1b      	ldr	r3, [pc, #108]	@ (8003274 <MX_SPI1_Init+0x78>)
 8003208:	2282      	movs	r2, #130	@ 0x82
 800320a:	0052      	lsls	r2, r2, #1
 800320c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800320e:	4b19      	ldr	r3, [pc, #100]	@ (8003274 <MX_SPI1_Init+0x78>)
 8003210:	2280      	movs	r2, #128	@ 0x80
 8003212:	0212      	lsls	r2, r2, #8
 8003214:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003216:	4b17      	ldr	r3, [pc, #92]	@ (8003274 <MX_SPI1_Init+0x78>)
 8003218:	22e0      	movs	r2, #224	@ 0xe0
 800321a:	00d2      	lsls	r2, r2, #3
 800321c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800321e:	4b15      	ldr	r3, [pc, #84]	@ (8003274 <MX_SPI1_Init+0x78>)
 8003220:	2200      	movs	r2, #0
 8003222:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003224:	4b13      	ldr	r3, [pc, #76]	@ (8003274 <MX_SPI1_Init+0x78>)
 8003226:	2200      	movs	r2, #0
 8003228:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800322a:	4b12      	ldr	r3, [pc, #72]	@ (8003274 <MX_SPI1_Init+0x78>)
 800322c:	2280      	movs	r2, #128	@ 0x80
 800322e:	0092      	lsls	r2, r2, #2
 8003230:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003232:	4b10      	ldr	r3, [pc, #64]	@ (8003274 <MX_SPI1_Init+0x78>)
 8003234:	2220      	movs	r2, #32
 8003236:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003238:	4b0e      	ldr	r3, [pc, #56]	@ (8003274 <MX_SPI1_Init+0x78>)
 800323a:	2200      	movs	r2, #0
 800323c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800323e:	4b0d      	ldr	r3, [pc, #52]	@ (8003274 <MX_SPI1_Init+0x78>)
 8003240:	2200      	movs	r2, #0
 8003242:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003244:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <MX_SPI1_Init+0x78>)
 8003246:	2200      	movs	r2, #0
 8003248:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800324a:	4b0a      	ldr	r3, [pc, #40]	@ (8003274 <MX_SPI1_Init+0x78>)
 800324c:	2207      	movs	r2, #7
 800324e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003250:	4b08      	ldr	r3, [pc, #32]	@ (8003274 <MX_SPI1_Init+0x78>)
 8003252:	2200      	movs	r2, #0
 8003254:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003256:	4b07      	ldr	r3, [pc, #28]	@ (8003274 <MX_SPI1_Init+0x78>)
 8003258:	2208      	movs	r2, #8
 800325a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800325c:	4b05      	ldr	r3, [pc, #20]	@ (8003274 <MX_SPI1_Init+0x78>)
 800325e:	0018      	movs	r0, r3
 8003260:	f003 f944 	bl	80064ec <HAL_SPI_Init>
 8003264:	1e03      	subs	r3, r0, #0
 8003266:	d001      	beq.n	800326c <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8003268:	f000 fb04 	bl	8003874 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800326c:	46c0      	nop			@ (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	46c0      	nop			@ (mov r8, r8)
 8003274:	20001384 	.word	0x20001384
 8003278:	40013000 	.word	0x40013000

0800327c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b094      	sub	sp, #80	@ 0x50
 8003280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003282:	2334      	movs	r3, #52	@ 0x34
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	0018      	movs	r0, r3
 8003288:	231c      	movs	r3, #28
 800328a:	001a      	movs	r2, r3
 800328c:	2100      	movs	r1, #0
 800328e:	f005 fbc9 	bl	8008a24 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003292:	003b      	movs	r3, r7
 8003294:	0018      	movs	r0, r3
 8003296:	2334      	movs	r3, #52	@ 0x34
 8003298:	001a      	movs	r2, r3
 800329a:	2100      	movs	r1, #0
 800329c:	f005 fbc2 	bl	8008a24 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80032a0:	4b37      	ldr	r3, [pc, #220]	@ (8003380 <MX_TIM17_Init+0x104>)
 80032a2:	4a38      	ldr	r2, [pc, #224]	@ (8003384 <MX_TIM17_Init+0x108>)
 80032a4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80032a6:	4b36      	ldr	r3, [pc, #216]	@ (8003380 <MX_TIM17_Init+0x104>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ac:	4b34      	ldr	r3, [pc, #208]	@ (8003380 <MX_TIM17_Init+0x104>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80032b2:	4b33      	ldr	r3, [pc, #204]	@ (8003380 <MX_TIM17_Init+0x104>)
 80032b4:	4a34      	ldr	r2, [pc, #208]	@ (8003388 <MX_TIM17_Init+0x10c>)
 80032b6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032b8:	4b31      	ldr	r3, [pc, #196]	@ (8003380 <MX_TIM17_Init+0x104>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80032be:	4b30      	ldr	r3, [pc, #192]	@ (8003380 <MX_TIM17_Init+0x104>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003380 <MX_TIM17_Init+0x104>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80032ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003380 <MX_TIM17_Init+0x104>)
 80032cc:	0018      	movs	r0, r3
 80032ce:	f003 fc9b 	bl	8006c08 <HAL_TIM_Base_Init>
 80032d2:	1e03      	subs	r3, r0, #0
 80032d4:	d001      	beq.n	80032da <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80032d6:	f000 facd 	bl	8003874 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80032da:	4b29      	ldr	r3, [pc, #164]	@ (8003380 <MX_TIM17_Init+0x104>)
 80032dc:	0018      	movs	r0, r3
 80032de:	f003 fceb 	bl	8006cb8 <HAL_TIM_PWM_Init>
 80032e2:	1e03      	subs	r3, r0, #0
 80032e4:	d001      	beq.n	80032ea <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 80032e6:	f000 fac5 	bl	8003874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032ea:	2134      	movs	r1, #52	@ 0x34
 80032ec:	187b      	adds	r3, r7, r1
 80032ee:	2260      	movs	r2, #96	@ 0x60
 80032f0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80032f2:	187b      	adds	r3, r7, r1
 80032f4:	2200      	movs	r2, #0
 80032f6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032f8:	187b      	adds	r3, r7, r1
 80032fa:	2200      	movs	r2, #0
 80032fc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80032fe:	187b      	adds	r3, r7, r1
 8003300:	2200      	movs	r2, #0
 8003302:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003304:	187b      	adds	r3, r7, r1
 8003306:	2200      	movs	r2, #0
 8003308:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800330a:	187b      	adds	r3, r7, r1
 800330c:	2200      	movs	r2, #0
 800330e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003310:	187b      	adds	r3, r7, r1
 8003312:	2200      	movs	r2, #0
 8003314:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003316:	1879      	adds	r1, r7, r1
 8003318:	4b19      	ldr	r3, [pc, #100]	@ (8003380 <MX_TIM17_Init+0x104>)
 800331a:	2200      	movs	r2, #0
 800331c:	0018      	movs	r0, r3
 800331e:	f003 fea7 	bl	8007070 <HAL_TIM_PWM_ConfigChannel>
 8003322:	1e03      	subs	r3, r0, #0
 8003324:	d001      	beq.n	800332a <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8003326:	f000 faa5 	bl	8003874 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800332a:	003b      	movs	r3, r7
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003330:	003b      	movs	r3, r7
 8003332:	2200      	movs	r2, #0
 8003334:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003336:	003b      	movs	r3, r7
 8003338:	2200      	movs	r2, #0
 800333a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800333c:	003b      	movs	r3, r7
 800333e:	2200      	movs	r2, #0
 8003340:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003342:	003b      	movs	r3, r7
 8003344:	2200      	movs	r2, #0
 8003346:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003348:	003b      	movs	r3, r7
 800334a:	2280      	movs	r2, #128	@ 0x80
 800334c:	0192      	lsls	r2, r2, #6
 800334e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003350:	003b      	movs	r3, r7
 8003352:	2200      	movs	r2, #0
 8003354:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003356:	003b      	movs	r3, r7
 8003358:	2200      	movs	r2, #0
 800335a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800335c:	003a      	movs	r2, r7
 800335e:	4b08      	ldr	r3, [pc, #32]	@ (8003380 <MX_TIM17_Init+0x104>)
 8003360:	0011      	movs	r1, r2
 8003362:	0018      	movs	r0, r3
 8003364:	f004 fb04 	bl	8007970 <HAL_TIMEx_ConfigBreakDeadTime>
 8003368:	1e03      	subs	r3, r0, #0
 800336a:	d001      	beq.n	8003370 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 800336c:	f000 fa82 	bl	8003874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8003370:	4b03      	ldr	r3, [pc, #12]	@ (8003380 <MX_TIM17_Init+0x104>)
 8003372:	0018      	movs	r0, r3
 8003374:	f000 fb9c 	bl	8003ab0 <HAL_TIM_MspPostInit>

}
 8003378:	46c0      	nop			@ (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	b014      	add	sp, #80	@ 0x50
 800337e:	bd80      	pop	{r7, pc}
 8003380:	200013e8 	.word	0x200013e8
 8003384:	40014800 	.word	0x40014800
 8003388:	0000ffff 	.word	0x0000ffff

0800338c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003390:	4b23      	ldr	r3, [pc, #140]	@ (8003420 <MX_USART1_UART_Init+0x94>)
 8003392:	4a24      	ldr	r2, [pc, #144]	@ (8003424 <MX_USART1_UART_Init+0x98>)
 8003394:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003396:	4b22      	ldr	r3, [pc, #136]	@ (8003420 <MX_USART1_UART_Init+0x94>)
 8003398:	2296      	movs	r2, #150	@ 0x96
 800339a:	0192      	lsls	r2, r2, #6
 800339c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800339e:	4b20      	ldr	r3, [pc, #128]	@ (8003420 <MX_USART1_UART_Init+0x94>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003420 <MX_USART1_UART_Init+0x94>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003420 <MX_USART1_UART_Init+0x94>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003420 <MX_USART1_UART_Init+0x94>)
 80033b2:	220c      	movs	r2, #12
 80033b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003420 <MX_USART1_UART_Init+0x94>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80033bc:	4b18      	ldr	r3, [pc, #96]	@ (8003420 <MX_USART1_UART_Init+0x94>)
 80033be:	2200      	movs	r2, #0
 80033c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033c2:	4b17      	ldr	r3, [pc, #92]	@ (8003420 <MX_USART1_UART_Init+0x94>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80033c8:	4b15      	ldr	r3, [pc, #84]	@ (8003420 <MX_USART1_UART_Init+0x94>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033ce:	4b14      	ldr	r3, [pc, #80]	@ (8003420 <MX_USART1_UART_Init+0x94>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80033d4:	4b12      	ldr	r3, [pc, #72]	@ (8003420 <MX_USART1_UART_Init+0x94>)
 80033d6:	0018      	movs	r0, r3
 80033d8:	f004 fb66 	bl	8007aa8 <HAL_UART_Init>
 80033dc:	1e03      	subs	r3, r0, #0
 80033de:	d001      	beq.n	80033e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80033e0:	f000 fa48 	bl	8003874 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003420 <MX_USART1_UART_Init+0x94>)
 80033e6:	2100      	movs	r1, #0
 80033e8:	0018      	movs	r0, r3
 80033ea:	f005 fa1b 	bl	8008824 <HAL_UARTEx_SetTxFifoThreshold>
 80033ee:	1e03      	subs	r3, r0, #0
 80033f0:	d001      	beq.n	80033f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80033f2:	f000 fa3f 	bl	8003874 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003420 <MX_USART1_UART_Init+0x94>)
 80033f8:	2100      	movs	r1, #0
 80033fa:	0018      	movs	r0, r3
 80033fc:	f005 fa52 	bl	80088a4 <HAL_UARTEx_SetRxFifoThreshold>
 8003400:	1e03      	subs	r3, r0, #0
 8003402:	d001      	beq.n	8003408 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003404:	f000 fa36 	bl	8003874 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003408:	4b05      	ldr	r3, [pc, #20]	@ (8003420 <MX_USART1_UART_Init+0x94>)
 800340a:	0018      	movs	r0, r3
 800340c:	f005 f9d0 	bl	80087b0 <HAL_UARTEx_DisableFifoMode>
 8003410:	1e03      	subs	r3, r0, #0
 8003412:	d001      	beq.n	8003418 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003414:	f000 fa2e 	bl	8003874 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003418:	46c0      	nop			@ (mov r8, r8)
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	46c0      	nop			@ (mov r8, r8)
 8003420:	20001434 	.word	0x20001434
 8003424:	40013800 	.word	0x40013800

08003428 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800342c:	4b23      	ldr	r3, [pc, #140]	@ (80034bc <MX_USART2_UART_Init+0x94>)
 800342e:	4a24      	ldr	r2, [pc, #144]	@ (80034c0 <MX_USART2_UART_Init+0x98>)
 8003430:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003432:	4b22      	ldr	r3, [pc, #136]	@ (80034bc <MX_USART2_UART_Init+0x94>)
 8003434:	22e1      	movs	r2, #225	@ 0xe1
 8003436:	0252      	lsls	r2, r2, #9
 8003438:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800343a:	4b20      	ldr	r3, [pc, #128]	@ (80034bc <MX_USART2_UART_Init+0x94>)
 800343c:	2200      	movs	r2, #0
 800343e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003440:	4b1e      	ldr	r3, [pc, #120]	@ (80034bc <MX_USART2_UART_Init+0x94>)
 8003442:	2200      	movs	r2, #0
 8003444:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003446:	4b1d      	ldr	r3, [pc, #116]	@ (80034bc <MX_USART2_UART_Init+0x94>)
 8003448:	2200      	movs	r2, #0
 800344a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800344c:	4b1b      	ldr	r3, [pc, #108]	@ (80034bc <MX_USART2_UART_Init+0x94>)
 800344e:	220c      	movs	r2, #12
 8003450:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003452:	4b1a      	ldr	r3, [pc, #104]	@ (80034bc <MX_USART2_UART_Init+0x94>)
 8003454:	2200      	movs	r2, #0
 8003456:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003458:	4b18      	ldr	r3, [pc, #96]	@ (80034bc <MX_USART2_UART_Init+0x94>)
 800345a:	2200      	movs	r2, #0
 800345c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800345e:	4b17      	ldr	r3, [pc, #92]	@ (80034bc <MX_USART2_UART_Init+0x94>)
 8003460:	2200      	movs	r2, #0
 8003462:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003464:	4b15      	ldr	r3, [pc, #84]	@ (80034bc <MX_USART2_UART_Init+0x94>)
 8003466:	2200      	movs	r2, #0
 8003468:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800346a:	4b14      	ldr	r3, [pc, #80]	@ (80034bc <MX_USART2_UART_Init+0x94>)
 800346c:	2200      	movs	r2, #0
 800346e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003470:	4b12      	ldr	r3, [pc, #72]	@ (80034bc <MX_USART2_UART_Init+0x94>)
 8003472:	0018      	movs	r0, r3
 8003474:	f004 fb18 	bl	8007aa8 <HAL_UART_Init>
 8003478:	1e03      	subs	r3, r0, #0
 800347a:	d001      	beq.n	8003480 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800347c:	f000 f9fa 	bl	8003874 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003480:	4b0e      	ldr	r3, [pc, #56]	@ (80034bc <MX_USART2_UART_Init+0x94>)
 8003482:	2100      	movs	r1, #0
 8003484:	0018      	movs	r0, r3
 8003486:	f005 f9cd 	bl	8008824 <HAL_UARTEx_SetTxFifoThreshold>
 800348a:	1e03      	subs	r3, r0, #0
 800348c:	d001      	beq.n	8003492 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800348e:	f000 f9f1 	bl	8003874 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003492:	4b0a      	ldr	r3, [pc, #40]	@ (80034bc <MX_USART2_UART_Init+0x94>)
 8003494:	2100      	movs	r1, #0
 8003496:	0018      	movs	r0, r3
 8003498:	f005 fa04 	bl	80088a4 <HAL_UARTEx_SetRxFifoThreshold>
 800349c:	1e03      	subs	r3, r0, #0
 800349e:	d001      	beq.n	80034a4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80034a0:	f000 f9e8 	bl	8003874 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80034a4:	4b05      	ldr	r3, [pc, #20]	@ (80034bc <MX_USART2_UART_Init+0x94>)
 80034a6:	0018      	movs	r0, r3
 80034a8:	f005 f982 	bl	80087b0 <HAL_UARTEx_DisableFifoMode>
 80034ac:	1e03      	subs	r3, r0, #0
 80034ae:	d001      	beq.n	80034b4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80034b0:	f000 f9e0 	bl	8003874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80034b4:	46c0      	nop			@ (mov r8, r8)
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	46c0      	nop			@ (mov r8, r8)
 80034bc:	200014c8 	.word	0x200014c8
 80034c0:	40004400 	.word	0x40004400

080034c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034c4:	b590      	push	{r4, r7, lr}
 80034c6:	b089      	sub	sp, #36	@ 0x24
 80034c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ca:	240c      	movs	r4, #12
 80034cc:	193b      	adds	r3, r7, r4
 80034ce:	0018      	movs	r0, r3
 80034d0:	2314      	movs	r3, #20
 80034d2:	001a      	movs	r2, r3
 80034d4:	2100      	movs	r1, #0
 80034d6:	f005 faa5 	bl	8008a24 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034da:	4b31      	ldr	r3, [pc, #196]	@ (80035a0 <MX_GPIO_Init+0xdc>)
 80034dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034de:	4b30      	ldr	r3, [pc, #192]	@ (80035a0 <MX_GPIO_Init+0xdc>)
 80034e0:	2104      	movs	r1, #4
 80034e2:	430a      	orrs	r2, r1
 80034e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80034e6:	4b2e      	ldr	r3, [pc, #184]	@ (80035a0 <MX_GPIO_Init+0xdc>)
 80034e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ea:	2204      	movs	r2, #4
 80034ec:	4013      	ands	r3, r2
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f2:	4b2b      	ldr	r3, [pc, #172]	@ (80035a0 <MX_GPIO_Init+0xdc>)
 80034f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034f6:	4b2a      	ldr	r3, [pc, #168]	@ (80035a0 <MX_GPIO_Init+0xdc>)
 80034f8:	2101      	movs	r1, #1
 80034fa:	430a      	orrs	r2, r1
 80034fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80034fe:	4b28      	ldr	r3, [pc, #160]	@ (80035a0 <MX_GPIO_Init+0xdc>)
 8003500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003502:	2201      	movs	r2, #1
 8003504:	4013      	ands	r3, r2
 8003506:	607b      	str	r3, [r7, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800350a:	4b25      	ldr	r3, [pc, #148]	@ (80035a0 <MX_GPIO_Init+0xdc>)
 800350c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800350e:	4b24      	ldr	r3, [pc, #144]	@ (80035a0 <MX_GPIO_Init+0xdc>)
 8003510:	2108      	movs	r1, #8
 8003512:	430a      	orrs	r2, r1
 8003514:	635a      	str	r2, [r3, #52]	@ 0x34
 8003516:	4b22      	ldr	r3, [pc, #136]	@ (80035a0 <MX_GPIO_Init+0xdc>)
 8003518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800351a:	2208      	movs	r2, #8
 800351c:	4013      	ands	r3, r2
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 8003522:	4920      	ldr	r1, [pc, #128]	@ (80035a4 <MX_GPIO_Init+0xe0>)
 8003524:	23a0      	movs	r3, #160	@ 0xa0
 8003526:	05db      	lsls	r3, r3, #23
 8003528:	2200      	movs	r2, #0
 800352a:	0018      	movs	r0, r3
 800352c:	f000 ff33 	bl	8004396 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003530:	193b      	adds	r3, r7, r4
 8003532:	2202      	movs	r2, #2
 8003534:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003536:	193b      	adds	r3, r7, r4
 8003538:	2200      	movs	r2, #0
 800353a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353c:	193b      	adds	r3, r7, r4
 800353e:	2200      	movs	r2, #0
 8003540:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003542:	193b      	adds	r3, r7, r4
 8003544:	4a18      	ldr	r2, [pc, #96]	@ (80035a8 <MX_GPIO_Init+0xe4>)
 8003546:	0019      	movs	r1, r3
 8003548:	0010      	movs	r0, r2
 800354a:	f000 fd9b 	bl	8004084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
 800354e:	193b      	adds	r3, r7, r4
 8003550:	4a14      	ldr	r2, [pc, #80]	@ (80035a4 <MX_GPIO_Init+0xe0>)
 8003552:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003554:	193b      	adds	r3, r7, r4
 8003556:	2201      	movs	r2, #1
 8003558:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355a:	193b      	adds	r3, r7, r4
 800355c:	2200      	movs	r2, #0
 800355e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003560:	193b      	adds	r3, r7, r4
 8003562:	2200      	movs	r2, #0
 8003564:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003566:	193a      	adds	r2, r7, r4
 8003568:	23a0      	movs	r3, #160	@ 0xa0
 800356a:	05db      	lsls	r3, r3, #23
 800356c:	0011      	movs	r1, r2
 800356e:	0018      	movs	r0, r3
 8003570:	f000 fd88 	bl	8004084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003574:	0021      	movs	r1, r4
 8003576:	187b      	adds	r3, r7, r1
 8003578:	22c0      	movs	r2, #192	@ 0xc0
 800357a:	0152      	lsls	r2, r2, #5
 800357c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800357e:	187b      	adds	r3, r7, r1
 8003580:	2200      	movs	r2, #0
 8003582:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003584:	187b      	adds	r3, r7, r1
 8003586:	2200      	movs	r2, #0
 8003588:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800358a:	187a      	adds	r2, r7, r1
 800358c:	23a0      	movs	r3, #160	@ 0xa0
 800358e:	05db      	lsls	r3, r3, #23
 8003590:	0011      	movs	r1, r2
 8003592:	0018      	movs	r0, r3
 8003594:	f000 fd76 	bl	8004084 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003598:	46c0      	nop			@ (mov r8, r8)
 800359a:	46bd      	mov	sp, r7
 800359c:	b009      	add	sp, #36	@ 0x24
 800359e:	bd90      	pop	{r4, r7, pc}
 80035a0:	40021000 	.word	0x40021000
 80035a4:	00008030 	.word	0x00008030
 80035a8:	50000800 	.word	0x50000800

080035ac <_ADXL343_ReadReg8>:

/* USER CODE BEGIN 4 */
int _ADXL343_ReadReg8 (unsigned char TargetRegister, unsigned char * TargetValue, uint8_t size)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af02      	add	r7, sp, #8
 80035b2:	6039      	str	r1, [r7, #0]
 80035b4:	0011      	movs	r1, r2
 80035b6:	1dfb      	adds	r3, r7, #7
 80035b8:	1c02      	adds	r2, r0, #0
 80035ba:	701a      	strb	r2, [r3, #0]
 80035bc:	1dbb      	adds	r3, r7, #6
 80035be:	1c0a      	adds	r2, r1, #0
 80035c0:	701a      	strb	r2, [r3, #0]
  if (!HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, &TargetRegister, 1, 1000)==HAL_OK)
 80035c2:	1dfa      	adds	r2, r7, #7
 80035c4:	4811      	ldr	r0, [pc, #68]	@ (800360c <_ADXL343_ReadReg8+0x60>)
 80035c6:	23fa      	movs	r3, #250	@ 0xfa
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	2301      	movs	r3, #1
 80035ce:	2128      	movs	r1, #40	@ 0x28
 80035d0:	f000 ffa4 	bl	800451c <HAL_I2C_Master_Transmit>
 80035d4:	1e03      	subs	r3, r0, #0
 80035d6:	d002      	beq.n	80035de <_ADXL343_ReadReg8+0x32>
      return -1;
 80035d8:	2301      	movs	r3, #1
 80035da:	425b      	negs	r3, r3
 80035dc:	e011      	b.n	8003602 <_ADXL343_ReadReg8+0x56>

  if (!HAL_I2C_Master_Receive(&hi2c1, 0x14<<1, TargetValue, size, 1000)==HAL_OK)
 80035de:	1dbb      	adds	r3, r7, #6
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	b299      	uxth	r1, r3
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	4809      	ldr	r0, [pc, #36]	@ (800360c <_ADXL343_ReadReg8+0x60>)
 80035e8:	23fa      	movs	r3, #250	@ 0xfa
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	000b      	movs	r3, r1
 80035f0:	2128      	movs	r1, #40	@ 0x28
 80035f2:	f001 f8bd 	bl	8004770 <HAL_I2C_Master_Receive>
 80035f6:	1e03      	subs	r3, r0, #0
 80035f8:	d002      	beq.n	8003600 <_ADXL343_ReadReg8+0x54>
    return -2;
 80035fa:	2302      	movs	r3, #2
 80035fc:	425b      	negs	r3, r3
 80035fe:	e000      	b.n	8003602 <_ADXL343_ReadReg8+0x56>

  return 0;
 8003600:	2300      	movs	r3, #0
}
 8003602:	0018      	movs	r0, r3
 8003604:	46bd      	mov	sp, r7
 8003606:	b002      	add	sp, #8
 8003608:	bd80      	pop	{r7, pc}
 800360a:	46c0      	nop			@ (mov r8, r8)
 800360c:	20001304 	.word	0x20001304

08003610 <_ADXL343_WriteReg8>:

int _ADXL343_WriteReg8 (unsigned char TargetRegister, unsigned char TargetValue)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af02      	add	r7, sp, #8
 8003616:	0002      	movs	r2, r0
 8003618:	1dfb      	adds	r3, r7, #7
 800361a:	701a      	strb	r2, [r3, #0]
 800361c:	1dbb      	adds	r3, r7, #6
 800361e:	1c0a      	adds	r2, r1, #0
 8003620:	701a      	strb	r2, [r3, #0]
  unsigned char buff [2];
  buff[0] = TargetRegister;
 8003622:	210c      	movs	r1, #12
 8003624:	187b      	adds	r3, r7, r1
 8003626:	1dfa      	adds	r2, r7, #7
 8003628:	7812      	ldrb	r2, [r2, #0]
 800362a:	701a      	strb	r2, [r3, #0]
  buff[1] = TargetValue;
 800362c:	187b      	adds	r3, r7, r1
 800362e:	1dba      	adds	r2, r7, #6
 8003630:	7812      	ldrb	r2, [r2, #0]
 8003632:	705a      	strb	r2, [r3, #1]

  if (HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, buff, 2, 100))
 8003634:	187a      	adds	r2, r7, r1
 8003636:	4808      	ldr	r0, [pc, #32]	@ (8003658 <_ADXL343_WriteReg8+0x48>)
 8003638:	2364      	movs	r3, #100	@ 0x64
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	2302      	movs	r3, #2
 800363e:	2128      	movs	r1, #40	@ 0x28
 8003640:	f000 ff6c 	bl	800451c <HAL_I2C_Master_Transmit>
 8003644:	1e03      	subs	r3, r0, #0
 8003646:	d002      	beq.n	800364e <_ADXL343_WriteReg8+0x3e>
      return -1;
 8003648:	2301      	movs	r3, #1
 800364a:	425b      	negs	r3, r3
 800364c:	e000      	b.n	8003650 <_ADXL343_WriteReg8+0x40>

  return 0;
 800364e:	2300      	movs	r3, #0
}
 8003650:	0018      	movs	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	b004      	add	sp, #16
 8003656:	bd80      	pop	{r7, pc}
 8003658:	20001304 	.word	0x20001304

0800365c <SendData>:
void SendData()
{
 800365c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800365e:	46c6      	mov	lr, r8
 8003660:	b500      	push	{lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af06      	add	r7, sp, #24
	unsigned int posIndex;
	unsigned int clrIndex;
	sprintf(sendBuffer, "(lifeSteps:%d),(weeklySteps:%d),(dailySteps:%d),(uid:%s),(friendship:%d),(password:password)(difficulty:%d),(evolution:%d) \n\r", game.allSteps,game.weeklySteps,game.stepsToday, game.uid, game.mood, game.challengeGoal, game.evo);
 8003666:	4b5c      	ldr	r3, [pc, #368]	@ (80037d8 <SendData+0x17c>)
 8003668:	695c      	ldr	r4, [r3, #20]
 800366a:	4a5b      	ldr	r2, [pc, #364]	@ (80037d8 <SendData+0x17c>)
 800366c:	238e      	movs	r3, #142	@ 0x8e
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	58d5      	ldr	r5, [r2, r3]
 8003672:	4a59      	ldr	r2, [pc, #356]	@ (80037d8 <SendData+0x17c>)
 8003674:	2390      	movs	r3, #144	@ 0x90
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	58d3      	ldr	r3, [r2, r3]
 800367a:	4698      	mov	r8, r3
 800367c:	4a56      	ldr	r2, [pc, #344]	@ (80037d8 <SendData+0x17c>)
 800367e:	7c52      	ldrb	r2, [r2, #17]
 8003680:	0016      	movs	r6, r2
 8003682:	4955      	ldr	r1, [pc, #340]	@ (80037d8 <SendData+0x17c>)
 8003684:	2292      	movs	r2, #146	@ 0x92
 8003686:	0052      	lsls	r2, r2, #1
 8003688:	588a      	ldr	r2, [r1, r2]
 800368a:	4953      	ldr	r1, [pc, #332]	@ (80037d8 <SendData+0x17c>)
 800368c:	7c09      	ldrb	r1, [r1, #16]
 800368e:	468c      	mov	ip, r1
 8003690:	4952      	ldr	r1, [pc, #328]	@ (80037dc <SendData+0x180>)
 8003692:	4853      	ldr	r0, [pc, #332]	@ (80037e0 <SendData+0x184>)
 8003694:	4663      	mov	r3, ip
 8003696:	9304      	str	r3, [sp, #16]
 8003698:	9203      	str	r2, [sp, #12]
 800369a:	9602      	str	r6, [sp, #8]
 800369c:	4a51      	ldr	r2, [pc, #324]	@ (80037e4 <SendData+0x188>)
 800369e:	9201      	str	r2, [sp, #4]
 80036a0:	4643      	mov	r3, r8
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	002b      	movs	r3, r5
 80036a6:	0022      	movs	r2, r4
 80036a8:	f005 f99c 	bl	80089e4 <siprintf>
	HAL_UART_Transmit(&huart2, sendBuffer, strlen(sendBuffer), 200);
 80036ac:	4b4c      	ldr	r3, [pc, #304]	@ (80037e0 <SendData+0x184>)
 80036ae:	0018      	movs	r0, r3
 80036b0:	f7fc fd28 	bl	8000104 <strlen>
 80036b4:	0003      	movs	r3, r0
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	4949      	ldr	r1, [pc, #292]	@ (80037e0 <SendData+0x184>)
 80036ba:	484b      	ldr	r0, [pc, #300]	@ (80037e8 <SendData+0x18c>)
 80036bc:	23c8      	movs	r3, #200	@ 0xc8
 80036be:	f004 fa49 	bl	8007b54 <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart2, "[", 1, 200);
 80036c2:	494a      	ldr	r1, [pc, #296]	@ (80037ec <SendData+0x190>)
 80036c4:	4848      	ldr	r0, [pc, #288]	@ (80037e8 <SendData+0x18c>)
 80036c6:	23c8      	movs	r3, #200	@ 0xc8
 80036c8:	2201      	movs	r2, #1
 80036ca:	f004 fa43 	bl	8007b54 <HAL_UART_Transmit>
	for(posIndex=0; posIndex<game.numLocations; posIndex++)
 80036ce:	2300      	movs	r3, #0
 80036d0:	607b      	str	r3, [r7, #4]
 80036d2:	e070      	b.n	80037b6 <SendData+0x15a>
	{       HAL_Delay(5);
 80036d4:	2005      	movs	r0, #5
 80036d6:	f000 fbe7 	bl	8003ea8 <HAL_Delay>
		for(clrIndex=0;clrIndex<400;clrIndex++) sendBuffer[clrIndex]=0;
 80036da:	2300      	movs	r3, #0
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	e007      	b.n	80036f0 <SendData+0x94>
 80036e0:	4a3f      	ldr	r2, [pc, #252]	@ (80037e0 <SendData+0x184>)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	18d3      	adds	r3, r2, r3
 80036e6:	2200      	movs	r2, #0
 80036e8:	701a      	strb	r2, [r3, #0]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	3301      	adds	r3, #1
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	23c8      	movs	r3, #200	@ 0xc8
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d3f2      	bcc.n	80036e0 <SendData+0x84>
		sprintf(sendBuffer, "(lat:%d.%d), (lon:%d.%d),", ((int)game.positions[posIndex].lat), ((int)((fmod((double)game.positions[posIndex].lat, (double)1))*10000)),((int)game.positions[posIndex].lon), ((int)((fmod((double)game.positions[posIndex].lon, (double)1))*10000)));
 80036fa:	4a37      	ldr	r2, [pc, #220]	@ (80037d8 <SendData+0x17c>)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3303      	adds	r3, #3
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	18d3      	adds	r3, r2, r3
 8003704:	3304      	adds	r3, #4
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	1c18      	adds	r0, r3, #0
 800370a:	f7fd fa89 	bl	8000c20 <__aeabi_f2iz>
 800370e:	0005      	movs	r5, r0
 8003710:	4a31      	ldr	r2, [pc, #196]	@ (80037d8 <SendData+0x17c>)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3303      	adds	r3, #3
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	3304      	adds	r3, #4
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	1c18      	adds	r0, r3, #0
 8003720:	f7fe fa08 	bl	8001b34 <__aeabi_f2d>
 8003724:	2200      	movs	r2, #0
 8003726:	4b32      	ldr	r3, [pc, #200]	@ (80037f0 <SendData+0x194>)
 8003728:	f005 fdfa 	bl	8009320 <fmod>
 800372c:	2200      	movs	r2, #0
 800372e:	4b31      	ldr	r3, [pc, #196]	@ (80037f4 <SendData+0x198>)
 8003730:	f7fd feda 	bl	80014e8 <__aeabi_dmul>
 8003734:	0002      	movs	r2, r0
 8003736:	000b      	movs	r3, r1
 8003738:	0010      	movs	r0, r2
 800373a:	0019      	movs	r1, r3
 800373c:	f7fe f9be 	bl	8001abc <__aeabi_d2iz>
 8003740:	0006      	movs	r6, r0
 8003742:	4a25      	ldr	r2, [pc, #148]	@ (80037d8 <SendData+0x17c>)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3303      	adds	r3, #3
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	18d3      	adds	r3, r2, r3
 800374c:	3308      	adds	r3, #8
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	1c18      	adds	r0, r3, #0
 8003752:	f7fd fa65 	bl	8000c20 <__aeabi_f2iz>
 8003756:	0004      	movs	r4, r0
 8003758:	4a1f      	ldr	r2, [pc, #124]	@ (80037d8 <SendData+0x17c>)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3303      	adds	r3, #3
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	18d3      	adds	r3, r2, r3
 8003762:	3308      	adds	r3, #8
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	1c18      	adds	r0, r3, #0
 8003768:	f7fe f9e4 	bl	8001b34 <__aeabi_f2d>
 800376c:	2200      	movs	r2, #0
 800376e:	4b20      	ldr	r3, [pc, #128]	@ (80037f0 <SendData+0x194>)
 8003770:	f005 fdd6 	bl	8009320 <fmod>
 8003774:	2200      	movs	r2, #0
 8003776:	4b1f      	ldr	r3, [pc, #124]	@ (80037f4 <SendData+0x198>)
 8003778:	f7fd feb6 	bl	80014e8 <__aeabi_dmul>
 800377c:	0002      	movs	r2, r0
 800377e:	000b      	movs	r3, r1
 8003780:	0010      	movs	r0, r2
 8003782:	0019      	movs	r1, r3
 8003784:	f7fe f99a 	bl	8001abc <__aeabi_d2iz>
 8003788:	0003      	movs	r3, r0
 800378a:	491b      	ldr	r1, [pc, #108]	@ (80037f8 <SendData+0x19c>)
 800378c:	4814      	ldr	r0, [pc, #80]	@ (80037e0 <SendData+0x184>)
 800378e:	9301      	str	r3, [sp, #4]
 8003790:	9400      	str	r4, [sp, #0]
 8003792:	0033      	movs	r3, r6
 8003794:	002a      	movs	r2, r5
 8003796:	f005 f925 	bl	80089e4 <siprintf>
		HAL_UART_Transmit(&huart2, sendBuffer, strlen(sendBuffer), 200);
 800379a:	4b11      	ldr	r3, [pc, #68]	@ (80037e0 <SendData+0x184>)
 800379c:	0018      	movs	r0, r3
 800379e:	f7fc fcb1 	bl	8000104 <strlen>
 80037a2:	0003      	movs	r3, r0
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	490e      	ldr	r1, [pc, #56]	@ (80037e0 <SendData+0x184>)
 80037a8:	480f      	ldr	r0, [pc, #60]	@ (80037e8 <SendData+0x18c>)
 80037aa:	23c8      	movs	r3, #200	@ 0xc8
 80037ac:	f004 f9d2 	bl	8007b54 <HAL_UART_Transmit>
	for(posIndex=0; posIndex<game.numLocations; posIndex++)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3301      	adds	r3, #1
 80037b4:	607b      	str	r3, [r7, #4]
 80037b6:	4b08      	ldr	r3, [pc, #32]	@ (80037d8 <SendData+0x17c>)
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d389      	bcc.n	80036d4 <SendData+0x78>

	}
	HAL_UART_Transmit(&huart2, "]", 1, 200);
 80037c0:	490e      	ldr	r1, [pc, #56]	@ (80037fc <SendData+0x1a0>)
 80037c2:	4809      	ldr	r0, [pc, #36]	@ (80037e8 <SendData+0x18c>)
 80037c4:	23c8      	movs	r3, #200	@ 0xc8
 80037c6:	2201      	movs	r2, #1
 80037c8:	f004 f9c4 	bl	8007b54 <HAL_UART_Transmit>
}
 80037cc:	46c0      	nop			@ (mov r8, r8)
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b002      	add	sp, #8
 80037d2:	bc80      	pop	{r7}
 80037d4:	46b8      	mov	r8, r7
 80037d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037d8:	20000f08 	.word	0x20000f08
 80037dc:	080095d8 	.word	0x080095d8
 80037e0:	200010dc 	.word	0x200010dc
 80037e4:	20001030 	.word	0x20001030
 80037e8:	200014c8 	.word	0x200014c8
 80037ec:	08009658 	.word	0x08009658
 80037f0:	3ff00000 	.word	0x3ff00000
 80037f4:	40c38800 	.word	0x40c38800
 80037f8:	0800965c 	.word	0x0800965c
 80037fc:	08009678 	.word	0x08009678

08003800 <HAL_RTC_AlarmAEventCallback>:
			  		  	}

	game.positions[game.numLocations] = pos;
	game.numLocations++;
}
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8003800:	b590      	push	{r4, r7, lr}
 8003802:	b091      	sub	sp, #68	@ 0x44
 8003804:	af04      	add	r7, sp, #16
 8003806:	6078      	str	r0, [r7, #4]
  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 8003808:	2380      	movs	r3, #128	@ 0x80
 800380a:	005a      	lsls	r2, r3, #1
 800380c:	2408      	movs	r4, #8
 800380e:	1939      	adds	r1, r7, r4
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	2300      	movs	r3, #0
 8003814:	f002 fcf2 	bl	80061fc <HAL_RTC_GetAlarm>
  if(sAlarm.AlarmTime.Seconds>58) {
 8003818:	0022      	movs	r2, r4
 800381a:	18bb      	adds	r3, r7, r2
 800381c:	789b      	ldrb	r3, [r3, #2]
 800381e:	2b3a      	cmp	r3, #58	@ 0x3a
 8003820:	d903      	bls.n	800382a <HAL_RTC_AlarmAEventCallback+0x2a>
    sAlarm.AlarmTime.Seconds=0;
 8003822:	18bb      	adds	r3, r7, r2
 8003824:	2200      	movs	r2, #0
 8003826:	709a      	strb	r2, [r3, #2]
 8003828:	e006      	b.n	8003838 <HAL_RTC_AlarmAEventCallback+0x38>
  }else{
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 800382a:	2108      	movs	r1, #8
 800382c:	187b      	adds	r3, r7, r1
 800382e:	789b      	ldrb	r3, [r3, #2]
 8003830:	3301      	adds	r3, #1
 8003832:	b2da      	uxtb	r2, r3
 8003834:	187b      	adds	r3, r7, r1
 8003836:	709a      	strb	r2, [r3, #2]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8003838:	46c0      	nop			@ (mov r8, r8)
 800383a:	2308      	movs	r3, #8
 800383c:	18f9      	adds	r1, r7, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	0018      	movs	r0, r3
 8003844:	f002 fb9a 	bl	8005f7c <HAL_RTC_SetAlarm_IT>
 8003848:	1e03      	subs	r3, r0, #0
 800384a:	d1f6      	bne.n	800383a <HAL_RTC_AlarmAEventCallback+0x3a>
  	  drawString(30, 30, "testTime", BLACK, GREEN, 1, 1);
 800384c:	4a07      	ldr	r2, [pc, #28]	@ (800386c <HAL_RTC_AlarmAEventCallback+0x6c>)
 800384e:	2301      	movs	r3, #1
 8003850:	9302      	str	r3, [sp, #8]
 8003852:	2301      	movs	r3, #1
 8003854:	9301      	str	r3, [sp, #4]
 8003856:	4b06      	ldr	r3, [pc, #24]	@ (8003870 <HAL_RTC_AlarmAEventCallback+0x70>)
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	2300      	movs	r3, #0
 800385c:	211e      	movs	r1, #30
 800385e:	201e      	movs	r0, #30
 8003860:	f7fe fc1c 	bl	800209c <drawString>
}
 8003864:	46c0      	nop			@ (mov r8, r8)
 8003866:	46bd      	mov	sp, r7
 8003868:	b00d      	add	sp, #52	@ 0x34
 800386a:	bd90      	pop	{r4, r7, pc}
 800386c:	0800967c 	.word	0x0800967c
 8003870:	ffffe007 	.word	0xffffe007

08003874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003878:	b672      	cpsid	i
}
 800387a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800387c:	46c0      	nop			@ (mov r8, r8)
 800387e:	e7fd      	b.n	800387c <Error_Handler+0x8>

08003880 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003886:	4b11      	ldr	r3, [pc, #68]	@ (80038cc <HAL_MspInit+0x4c>)
 8003888:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800388a:	4b10      	ldr	r3, [pc, #64]	@ (80038cc <HAL_MspInit+0x4c>)
 800388c:	2101      	movs	r1, #1
 800388e:	430a      	orrs	r2, r1
 8003890:	641a      	str	r2, [r3, #64]	@ 0x40
 8003892:	4b0e      	ldr	r3, [pc, #56]	@ (80038cc <HAL_MspInit+0x4c>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003896:	2201      	movs	r2, #1
 8003898:	4013      	ands	r3, r2
 800389a:	607b      	str	r3, [r7, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800389e:	4b0b      	ldr	r3, [pc, #44]	@ (80038cc <HAL_MspInit+0x4c>)
 80038a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038a2:	4b0a      	ldr	r3, [pc, #40]	@ (80038cc <HAL_MspInit+0x4c>)
 80038a4:	2180      	movs	r1, #128	@ 0x80
 80038a6:	0549      	lsls	r1, r1, #21
 80038a8:	430a      	orrs	r2, r1
 80038aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80038ac:	4b07      	ldr	r3, [pc, #28]	@ (80038cc <HAL_MspInit+0x4c>)
 80038ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038b0:	2380      	movs	r3, #128	@ 0x80
 80038b2:	055b      	lsls	r3, r3, #21
 80038b4:	4013      	ands	r3, r2
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80038ba:	23c0      	movs	r3, #192	@ 0xc0
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	0018      	movs	r0, r3
 80038c0:	f000 fb16 	bl	8003ef0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038c4:	46c0      	nop			@ (mov r8, r8)
 80038c6:	46bd      	mov	sp, r7
 80038c8:	b002      	add	sp, #8
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40021000 	.word	0x40021000

080038d0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038d0:	b590      	push	{r4, r7, lr}
 80038d2:	b09d      	sub	sp, #116	@ 0x74
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d8:	235c      	movs	r3, #92	@ 0x5c
 80038da:	18fb      	adds	r3, r7, r3
 80038dc:	0018      	movs	r0, r3
 80038de:	2314      	movs	r3, #20
 80038e0:	001a      	movs	r2, r3
 80038e2:	2100      	movs	r1, #0
 80038e4:	f005 f89e 	bl	8008a24 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038e8:	2410      	movs	r4, #16
 80038ea:	193b      	adds	r3, r7, r4
 80038ec:	0018      	movs	r0, r3
 80038ee:	234c      	movs	r3, #76	@ 0x4c
 80038f0:	001a      	movs	r2, r3
 80038f2:	2100      	movs	r1, #0
 80038f4:	f005 f896 	bl	8008a24 <memset>
  if(hi2c->Instance==I2C1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a23      	ldr	r2, [pc, #140]	@ (800398c <HAL_I2C_MspInit+0xbc>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d13f      	bne.n	8003982 <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003902:	193b      	adds	r3, r7, r4
 8003904:	2220      	movs	r2, #32
 8003906:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003908:	193b      	adds	r3, r7, r4
 800390a:	2200      	movs	r2, #0
 800390c:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800390e:	193b      	adds	r3, r7, r4
 8003910:	0018      	movs	r0, r3
 8003912:	f002 f8f7 	bl	8005b04 <HAL_RCCEx_PeriphCLKConfig>
 8003916:	1e03      	subs	r3, r0, #0
 8003918:	d001      	beq.n	800391e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800391a:	f7ff ffab 	bl	8003874 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800391e:	4b1c      	ldr	r3, [pc, #112]	@ (8003990 <HAL_I2C_MspInit+0xc0>)
 8003920:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003922:	4b1b      	ldr	r3, [pc, #108]	@ (8003990 <HAL_I2C_MspInit+0xc0>)
 8003924:	2101      	movs	r1, #1
 8003926:	430a      	orrs	r2, r1
 8003928:	635a      	str	r2, [r3, #52]	@ 0x34
 800392a:	4b19      	ldr	r3, [pc, #100]	@ (8003990 <HAL_I2C_MspInit+0xc0>)
 800392c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800392e:	2201      	movs	r2, #1
 8003930:	4013      	ands	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003936:	215c      	movs	r1, #92	@ 0x5c
 8003938:	187b      	adds	r3, r7, r1
 800393a:	22c0      	movs	r2, #192	@ 0xc0
 800393c:	00d2      	lsls	r2, r2, #3
 800393e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003940:	187b      	adds	r3, r7, r1
 8003942:	2212      	movs	r2, #18
 8003944:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003946:	187b      	adds	r3, r7, r1
 8003948:	2200      	movs	r2, #0
 800394a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394c:	187b      	adds	r3, r7, r1
 800394e:	2200      	movs	r2, #0
 8003950:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003952:	187b      	adds	r3, r7, r1
 8003954:	2206      	movs	r2, #6
 8003956:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003958:	187a      	adds	r2, r7, r1
 800395a:	23a0      	movs	r3, #160	@ 0xa0
 800395c:	05db      	lsls	r3, r3, #23
 800395e:	0011      	movs	r1, r2
 8003960:	0018      	movs	r0, r3
 8003962:	f000 fb8f 	bl	8004084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003966:	4b0a      	ldr	r3, [pc, #40]	@ (8003990 <HAL_I2C_MspInit+0xc0>)
 8003968:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800396a:	4b09      	ldr	r3, [pc, #36]	@ (8003990 <HAL_I2C_MspInit+0xc0>)
 800396c:	2180      	movs	r1, #128	@ 0x80
 800396e:	0389      	lsls	r1, r1, #14
 8003970:	430a      	orrs	r2, r1
 8003972:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003974:	4b06      	ldr	r3, [pc, #24]	@ (8003990 <HAL_I2C_MspInit+0xc0>)
 8003976:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003978:	2380      	movs	r3, #128	@ 0x80
 800397a:	039b      	lsls	r3, r3, #14
 800397c:	4013      	ands	r3, r2
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003982:	46c0      	nop			@ (mov r8, r8)
 8003984:	46bd      	mov	sp, r7
 8003986:	b01d      	add	sp, #116	@ 0x74
 8003988:	bd90      	pop	{r4, r7, pc}
 800398a:	46c0      	nop			@ (mov r8, r8)
 800398c:	40005400 	.word	0x40005400
 8003990:	40021000 	.word	0x40021000

08003994 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003994:	b590      	push	{r4, r7, lr}
 8003996:	b08b      	sub	sp, #44	@ 0x2c
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800399c:	2414      	movs	r4, #20
 800399e:	193b      	adds	r3, r7, r4
 80039a0:	0018      	movs	r0, r3
 80039a2:	2314      	movs	r3, #20
 80039a4:	001a      	movs	r2, r3
 80039a6:	2100      	movs	r1, #0
 80039a8:	f005 f83c 	bl	8008a24 <memset>
  if(hspi->Instance==SPI1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003a64 <HAL_SPI_MspInit+0xd0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d151      	bne.n	8003a5a <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039b6:	4b2c      	ldr	r3, [pc, #176]	@ (8003a68 <HAL_SPI_MspInit+0xd4>)
 80039b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003a68 <HAL_SPI_MspInit+0xd4>)
 80039bc:	2180      	movs	r1, #128	@ 0x80
 80039be:	0149      	lsls	r1, r1, #5
 80039c0:	430a      	orrs	r2, r1
 80039c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80039c4:	4b28      	ldr	r3, [pc, #160]	@ (8003a68 <HAL_SPI_MspInit+0xd4>)
 80039c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039c8:	2380      	movs	r3, #128	@ 0x80
 80039ca:	015b      	lsls	r3, r3, #5
 80039cc:	4013      	ands	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039d2:	4b25      	ldr	r3, [pc, #148]	@ (8003a68 <HAL_SPI_MspInit+0xd4>)
 80039d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039d6:	4b24      	ldr	r3, [pc, #144]	@ (8003a68 <HAL_SPI_MspInit+0xd4>)
 80039d8:	2101      	movs	r1, #1
 80039da:	430a      	orrs	r2, r1
 80039dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80039de:	4b22      	ldr	r3, [pc, #136]	@ (8003a68 <HAL_SPI_MspInit+0xd4>)
 80039e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e2:	2201      	movs	r2, #1
 80039e4:	4013      	ands	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039ea:	4b1f      	ldr	r3, [pc, #124]	@ (8003a68 <HAL_SPI_MspInit+0xd4>)
 80039ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003a68 <HAL_SPI_MspInit+0xd4>)
 80039f0:	2108      	movs	r1, #8
 80039f2:	430a      	orrs	r2, r1
 80039f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80039f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003a68 <HAL_SPI_MspInit+0xd4>)
 80039f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039fa:	2208      	movs	r2, #8
 80039fc:	4013      	ands	r3, r2
 80039fe:	60bb      	str	r3, [r7, #8]
 8003a00:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PD5     ------> SPI1_MISO
    PD6     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003a02:	193b      	adds	r3, r7, r4
 8003a04:	2202      	movs	r2, #2
 8003a06:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a08:	193b      	adds	r3, r7, r4
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0e:	193b      	adds	r3, r7, r4
 8003a10:	2200      	movs	r2, #0
 8003a12:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a14:	193b      	adds	r3, r7, r4
 8003a16:	2200      	movs	r2, #0
 8003a18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003a1a:	193b      	adds	r3, r7, r4
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a20:	193a      	adds	r2, r7, r4
 8003a22:	23a0      	movs	r3, #160	@ 0xa0
 8003a24:	05db      	lsls	r3, r3, #23
 8003a26:	0011      	movs	r1, r2
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f000 fb2b 	bl	8004084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003a2e:	0021      	movs	r1, r4
 8003a30:	187b      	adds	r3, r7, r1
 8003a32:	2260      	movs	r2, #96	@ 0x60
 8003a34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a36:	187b      	adds	r3, r7, r1
 8003a38:	2202      	movs	r2, #2
 8003a3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3c:	187b      	adds	r3, r7, r1
 8003a3e:	2200      	movs	r2, #0
 8003a40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a42:	187b      	adds	r3, r7, r1
 8003a44:	2200      	movs	r2, #0
 8003a46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 8003a48:	187b      	adds	r3, r7, r1
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a4e:	187b      	adds	r3, r7, r1
 8003a50:	4a06      	ldr	r2, [pc, #24]	@ (8003a6c <HAL_SPI_MspInit+0xd8>)
 8003a52:	0019      	movs	r1, r3
 8003a54:	0010      	movs	r0, r2
 8003a56:	f000 fb15 	bl	8004084 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003a5a:	46c0      	nop			@ (mov r8, r8)
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b00b      	add	sp, #44	@ 0x2c
 8003a60:	bd90      	pop	{r4, r7, pc}
 8003a62:	46c0      	nop			@ (mov r8, r8)
 8003a64:	40013000 	.word	0x40013000
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	50000c00 	.word	0x50000c00

08003a70 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8003aa8 <HAL_TIM_Base_MspInit+0x38>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d10d      	bne.n	8003a9e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003a82:	4b0a      	ldr	r3, [pc, #40]	@ (8003aac <HAL_TIM_Base_MspInit+0x3c>)
 8003a84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a86:	4b09      	ldr	r3, [pc, #36]	@ (8003aac <HAL_TIM_Base_MspInit+0x3c>)
 8003a88:	2180      	movs	r1, #128	@ 0x80
 8003a8a:	02c9      	lsls	r1, r1, #11
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a90:	4b06      	ldr	r3, [pc, #24]	@ (8003aac <HAL_TIM_Base_MspInit+0x3c>)
 8003a92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a94:	2380      	movs	r3, #128	@ 0x80
 8003a96:	02db      	lsls	r3, r3, #11
 8003a98:	4013      	ands	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8003a9e:	46c0      	nop			@ (mov r8, r8)
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b004      	add	sp, #16
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	46c0      	nop			@ (mov r8, r8)
 8003aa8:	40014800 	.word	0x40014800
 8003aac:	40021000 	.word	0x40021000

08003ab0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ab0:	b590      	push	{r4, r7, lr}
 8003ab2:	b089      	sub	sp, #36	@ 0x24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab8:	240c      	movs	r4, #12
 8003aba:	193b      	adds	r3, r7, r4
 8003abc:	0018      	movs	r0, r3
 8003abe:	2314      	movs	r3, #20
 8003ac0:	001a      	movs	r2, r3
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	f004 ffae 	bl	8008a24 <memset>
  if(htim->Instance==TIM17)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a14      	ldr	r2, [pc, #80]	@ (8003b20 <HAL_TIM_MspPostInit+0x70>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d122      	bne.n	8003b18 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad2:	4b14      	ldr	r3, [pc, #80]	@ (8003b24 <HAL_TIM_MspPostInit+0x74>)
 8003ad4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ad6:	4b13      	ldr	r3, [pc, #76]	@ (8003b24 <HAL_TIM_MspPostInit+0x74>)
 8003ad8:	2101      	movs	r1, #1
 8003ada:	430a      	orrs	r2, r1
 8003adc:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ade:	4b11      	ldr	r3, [pc, #68]	@ (8003b24 <HAL_TIM_MspPostInit+0x74>)
 8003ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	60bb      	str	r3, [r7, #8]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003aea:	0021      	movs	r1, r4
 8003aec:	187b      	adds	r3, r7, r1
 8003aee:	2280      	movs	r2, #128	@ 0x80
 8003af0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af2:	187b      	adds	r3, r7, r1
 8003af4:	2202      	movs	r2, #2
 8003af6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af8:	187b      	adds	r3, r7, r1
 8003afa:	2200      	movs	r2, #0
 8003afc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afe:	187b      	adds	r3, r7, r1
 8003b00:	2200      	movs	r2, #0
 8003b02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8003b04:	187b      	adds	r3, r7, r1
 8003b06:	2205      	movs	r2, #5
 8003b08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b0a:	187a      	adds	r2, r7, r1
 8003b0c:	23a0      	movs	r3, #160	@ 0xa0
 8003b0e:	05db      	lsls	r3, r3, #23
 8003b10:	0011      	movs	r1, r2
 8003b12:	0018      	movs	r0, r3
 8003b14:	f000 fab6 	bl	8004084 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003b18:	46c0      	nop			@ (mov r8, r8)
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b009      	add	sp, #36	@ 0x24
 8003b1e:	bd90      	pop	{r4, r7, pc}
 8003b20:	40014800 	.word	0x40014800
 8003b24:	40021000 	.word	0x40021000

08003b28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b28:	b590      	push	{r4, r7, lr}
 8003b2a:	b09f      	sub	sp, #124	@ 0x7c
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b30:	2364      	movs	r3, #100	@ 0x64
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	0018      	movs	r0, r3
 8003b36:	2314      	movs	r3, #20
 8003b38:	001a      	movs	r2, r3
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	f004 ff72 	bl	8008a24 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b40:	2418      	movs	r4, #24
 8003b42:	193b      	adds	r3, r7, r4
 8003b44:	0018      	movs	r0, r3
 8003b46:	234c      	movs	r3, #76	@ 0x4c
 8003b48:	001a      	movs	r2, r3
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	f004 ff6a 	bl	8008a24 <memset>
  if(huart->Instance==USART1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a45      	ldr	r2, [pc, #276]	@ (8003c6c <HAL_UART_MspInit+0x144>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d13e      	bne.n	8003bd8 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003b5a:	193b      	adds	r3, r7, r4
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003b60:	193b      	adds	r3, r7, r4
 8003b62:	2200      	movs	r2, #0
 8003b64:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b66:	193b      	adds	r3, r7, r4
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f001 ffcb 	bl	8005b04 <HAL_RCCEx_PeriphCLKConfig>
 8003b6e:	1e03      	subs	r3, r0, #0
 8003b70:	d001      	beq.n	8003b76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003b72:	f7ff fe7f 	bl	8003874 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b76:	4b3e      	ldr	r3, [pc, #248]	@ (8003c70 <HAL_UART_MspInit+0x148>)
 8003b78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b7a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c70 <HAL_UART_MspInit+0x148>)
 8003b7c:	2180      	movs	r1, #128	@ 0x80
 8003b7e:	01c9      	lsls	r1, r1, #7
 8003b80:	430a      	orrs	r2, r1
 8003b82:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b84:	4b3a      	ldr	r3, [pc, #232]	@ (8003c70 <HAL_UART_MspInit+0x148>)
 8003b86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b88:	2380      	movs	r3, #128	@ 0x80
 8003b8a:	01db      	lsls	r3, r3, #7
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b92:	4b37      	ldr	r3, [pc, #220]	@ (8003c70 <HAL_UART_MspInit+0x148>)
 8003b94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b96:	4b36      	ldr	r3, [pc, #216]	@ (8003c70 <HAL_UART_MspInit+0x148>)
 8003b98:	2104      	movs	r1, #4
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b9e:	4b34      	ldr	r3, [pc, #208]	@ (8003c70 <HAL_UART_MspInit+0x148>)
 8003ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ba2:	2204      	movs	r2, #4
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
 8003ba8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003baa:	2164      	movs	r1, #100	@ 0x64
 8003bac:	187b      	adds	r3, r7, r1
 8003bae:	2230      	movs	r2, #48	@ 0x30
 8003bb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb2:	187b      	adds	r3, r7, r1
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb8:	187b      	adds	r3, r7, r1
 8003bba:	2200      	movs	r2, #0
 8003bbc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bbe:	187b      	adds	r3, r7, r1
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003bc4:	187b      	adds	r3, r7, r1
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bca:	187b      	adds	r3, r7, r1
 8003bcc:	4a29      	ldr	r2, [pc, #164]	@ (8003c74 <HAL_UART_MspInit+0x14c>)
 8003bce:	0019      	movs	r1, r3
 8003bd0:	0010      	movs	r0, r2
 8003bd2:	f000 fa57 	bl	8004084 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8003bd6:	e044      	b.n	8003c62 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a26      	ldr	r2, [pc, #152]	@ (8003c78 <HAL_UART_MspInit+0x150>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d13f      	bne.n	8003c62 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003be2:	2118      	movs	r1, #24
 8003be4:	187b      	adds	r3, r7, r1
 8003be6:	2202      	movs	r2, #2
 8003be8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003bea:	187b      	adds	r3, r7, r1
 8003bec:	2200      	movs	r2, #0
 8003bee:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bf0:	187b      	adds	r3, r7, r1
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f001 ff86 	bl	8005b04 <HAL_RCCEx_PeriphCLKConfig>
 8003bf8:	1e03      	subs	r3, r0, #0
 8003bfa:	d001      	beq.n	8003c00 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8003bfc:	f7ff fe3a 	bl	8003874 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c00:	4b1b      	ldr	r3, [pc, #108]	@ (8003c70 <HAL_UART_MspInit+0x148>)
 8003c02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c04:	4b1a      	ldr	r3, [pc, #104]	@ (8003c70 <HAL_UART_MspInit+0x148>)
 8003c06:	2180      	movs	r1, #128	@ 0x80
 8003c08:	0289      	lsls	r1, r1, #10
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003c0e:	4b18      	ldr	r3, [pc, #96]	@ (8003c70 <HAL_UART_MspInit+0x148>)
 8003c10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c12:	2380      	movs	r3, #128	@ 0x80
 8003c14:	029b      	lsls	r3, r3, #10
 8003c16:	4013      	ands	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c1c:	4b14      	ldr	r3, [pc, #80]	@ (8003c70 <HAL_UART_MspInit+0x148>)
 8003c1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c20:	4b13      	ldr	r3, [pc, #76]	@ (8003c70 <HAL_UART_MspInit+0x148>)
 8003c22:	2101      	movs	r1, #1
 8003c24:	430a      	orrs	r2, r1
 8003c26:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c28:	4b11      	ldr	r3, [pc, #68]	@ (8003c70 <HAL_UART_MspInit+0x148>)
 8003c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	4013      	ands	r3, r2
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003c34:	2164      	movs	r1, #100	@ 0x64
 8003c36:	187b      	adds	r3, r7, r1
 8003c38:	220c      	movs	r2, #12
 8003c3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3c:	187b      	adds	r3, r7, r1
 8003c3e:	2202      	movs	r2, #2
 8003c40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c42:	187b      	adds	r3, r7, r1
 8003c44:	2200      	movs	r2, #0
 8003c46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c48:	187b      	adds	r3, r7, r1
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003c4e:	187b      	adds	r3, r7, r1
 8003c50:	2201      	movs	r2, #1
 8003c52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c54:	187a      	adds	r2, r7, r1
 8003c56:	23a0      	movs	r3, #160	@ 0xa0
 8003c58:	05db      	lsls	r3, r3, #23
 8003c5a:	0011      	movs	r1, r2
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f000 fa11 	bl	8004084 <HAL_GPIO_Init>
}
 8003c62:	46c0      	nop			@ (mov r8, r8)
 8003c64:	46bd      	mov	sp, r7
 8003c66:	b01f      	add	sp, #124	@ 0x7c
 8003c68:	bd90      	pop	{r4, r7, pc}
 8003c6a:	46c0      	nop			@ (mov r8, r8)
 8003c6c:	40013800 	.word	0x40013800
 8003c70:	40021000 	.word	0x40021000
 8003c74:	50000800 	.word	0x50000800
 8003c78:	40004400 	.word	0x40004400

08003c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003c80:	46c0      	nop			@ (mov r8, r8)
 8003c82:	e7fd      	b.n	8003c80 <NMI_Handler+0x4>

08003c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c88:	46c0      	nop			@ (mov r8, r8)
 8003c8a:	e7fd      	b.n	8003c88 <HardFault_Handler+0x4>

08003c8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003c90:	46c0      	nop			@ (mov r8, r8)
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c9a:	46c0      	nop			@ (mov r8, r8)
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ca4:	f000 f8e4 	bl	8003e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ca8:	46c0      	nop			@ (mov r8, r8)
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003cb4:	4b05      	ldr	r3, [pc, #20]	@ (8003ccc <RTC_TAMP_IRQHandler+0x1c>)
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f002 fb66 	bl	8006388 <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003cbc:	4b03      	ldr	r3, [pc, #12]	@ (8003ccc <RTC_TAMP_IRQHandler+0x1c>)
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f002 fbe5 	bl	800648e <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8003cc4:	46c0      	nop			@ (mov r8, r8)
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	46c0      	nop			@ (mov r8, r8)
 8003ccc:	20001358 	.word	0x20001358

08003cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cd8:	4a14      	ldr	r2, [pc, #80]	@ (8003d2c <_sbrk+0x5c>)
 8003cda:	4b15      	ldr	r3, [pc, #84]	@ (8003d30 <_sbrk+0x60>)
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ce4:	4b13      	ldr	r3, [pc, #76]	@ (8003d34 <_sbrk+0x64>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d102      	bne.n	8003cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cec:	4b11      	ldr	r3, [pc, #68]	@ (8003d34 <_sbrk+0x64>)
 8003cee:	4a12      	ldr	r2, [pc, #72]	@ (8003d38 <_sbrk+0x68>)
 8003cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cf2:	4b10      	ldr	r3, [pc, #64]	@ (8003d34 <_sbrk+0x64>)
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	18d3      	adds	r3, r2, r3
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d207      	bcs.n	8003d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d00:	f004 fe98 	bl	8008a34 <__errno>
 8003d04:	0003      	movs	r3, r0
 8003d06:	220c      	movs	r2, #12
 8003d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	425b      	negs	r3, r3
 8003d0e:	e009      	b.n	8003d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d10:	4b08      	ldr	r3, [pc, #32]	@ (8003d34 <_sbrk+0x64>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d16:	4b07      	ldr	r3, [pc, #28]	@ (8003d34 <_sbrk+0x64>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	18d2      	adds	r2, r2, r3
 8003d1e:	4b05      	ldr	r3, [pc, #20]	@ (8003d34 <_sbrk+0x64>)
 8003d20:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003d22:	68fb      	ldr	r3, [r7, #12]
}
 8003d24:	0018      	movs	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	b006      	add	sp, #24
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20024000 	.word	0x20024000
 8003d30:	00000400 	.word	0x00000400
 8003d34:	2000155c 	.word	0x2000155c
 8003d38:	200016b0 	.word	0x200016b0

08003d3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d40:	46c0      	nop			@ (mov r8, r8)
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003d48:	480d      	ldr	r0, [pc, #52]	@ (8003d80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003d4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003d4c:	f7ff fff6 	bl	8003d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d50:	480c      	ldr	r0, [pc, #48]	@ (8003d84 <LoopForever+0x6>)
  ldr r1, =_edata
 8003d52:	490d      	ldr	r1, [pc, #52]	@ (8003d88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d54:	4a0d      	ldr	r2, [pc, #52]	@ (8003d8c <LoopForever+0xe>)
  movs r3, #0
 8003d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d58:	e002      	b.n	8003d60 <LoopCopyDataInit>

08003d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d5e:	3304      	adds	r3, #4

08003d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d64:	d3f9      	bcc.n	8003d5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d66:	4a0a      	ldr	r2, [pc, #40]	@ (8003d90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d68:	4c0a      	ldr	r4, [pc, #40]	@ (8003d94 <LoopForever+0x16>)
  movs r3, #0
 8003d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d6c:	e001      	b.n	8003d72 <LoopFillZerobss>

08003d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d70:	3204      	adds	r2, #4

08003d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d74:	d3fb      	bcc.n	8003d6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003d76:	f004 fe63 	bl	8008a40 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003d7a:	f7fe fed1 	bl	8002b20 <main>

08003d7e <LoopForever>:

LoopForever:
  b LoopForever
 8003d7e:	e7fe      	b.n	8003d7e <LoopForever>
  ldr   r0, =_estack
 8003d80:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d88:	20000ee0 	.word	0x20000ee0
  ldr r2, =_sidata
 8003d8c:	08009de8 	.word	0x08009de8
  ldr r2, =_sbss
 8003d90:	20000ee0 	.word	0x20000ee0
  ldr r4, =_ebss
 8003d94:	200016ac 	.word	0x200016ac

08003d98 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003d98:	e7fe      	b.n	8003d98 <ADC1_COMP_IRQHandler>
	...

08003d9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003da2:	1dfb      	adds	r3, r7, #7
 8003da4:	2200      	movs	r2, #0
 8003da6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003da8:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd8 <HAL_Init+0x3c>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd8 <HAL_Init+0x3c>)
 8003dae:	2180      	movs	r1, #128	@ 0x80
 8003db0:	0049      	lsls	r1, r1, #1
 8003db2:	430a      	orrs	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003db6:	2003      	movs	r0, #3
 8003db8:	f000 f810 	bl	8003ddc <HAL_InitTick>
 8003dbc:	1e03      	subs	r3, r0, #0
 8003dbe:	d003      	beq.n	8003dc8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003dc0:	1dfb      	adds	r3, r7, #7
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	e001      	b.n	8003dcc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003dc8:	f7ff fd5a 	bl	8003880 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003dcc:	1dfb      	adds	r3, r7, #7
 8003dce:	781b      	ldrb	r3, [r3, #0]
}
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b002      	add	sp, #8
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40022000 	.word	0x40022000

08003ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ddc:	b590      	push	{r4, r7, lr}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003de4:	230f      	movs	r3, #15
 8003de6:	18fb      	adds	r3, r7, r3
 8003de8:	2200      	movs	r2, #0
 8003dea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003dec:	4b1d      	ldr	r3, [pc, #116]	@ (8003e64 <HAL_InitTick+0x88>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d02b      	beq.n	8003e4c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003df4:	4b1c      	ldr	r3, [pc, #112]	@ (8003e68 <HAL_InitTick+0x8c>)
 8003df6:	681c      	ldr	r4, [r3, #0]
 8003df8:	4b1a      	ldr	r3, [pc, #104]	@ (8003e64 <HAL_InitTick+0x88>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	0019      	movs	r1, r3
 8003dfe:	23fa      	movs	r3, #250	@ 0xfa
 8003e00:	0098      	lsls	r0, r3, #2
 8003e02:	f7fc f991 	bl	8000128 <__udivsi3>
 8003e06:	0003      	movs	r3, r0
 8003e08:	0019      	movs	r1, r3
 8003e0a:	0020      	movs	r0, r4
 8003e0c:	f7fc f98c 	bl	8000128 <__udivsi3>
 8003e10:	0003      	movs	r3, r0
 8003e12:	0018      	movs	r0, r3
 8003e14:	f000 f929 	bl	800406a <HAL_SYSTICK_Config>
 8003e18:	1e03      	subs	r3, r0, #0
 8003e1a:	d112      	bne.n	8003e42 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b03      	cmp	r3, #3
 8003e20:	d80a      	bhi.n	8003e38 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	2301      	movs	r3, #1
 8003e26:	425b      	negs	r3, r3
 8003e28:	2200      	movs	r2, #0
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f000 f908 	bl	8004040 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e30:	4b0e      	ldr	r3, [pc, #56]	@ (8003e6c <HAL_InitTick+0x90>)
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	e00d      	b.n	8003e54 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003e38:	230f      	movs	r3, #15
 8003e3a:	18fb      	adds	r3, r7, r3
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	701a      	strb	r2, [r3, #0]
 8003e40:	e008      	b.n	8003e54 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003e42:	230f      	movs	r3, #15
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	2201      	movs	r2, #1
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	e003      	b.n	8003e54 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003e4c:	230f      	movs	r3, #15
 8003e4e:	18fb      	adds	r3, r7, r3
 8003e50:	2201      	movs	r2, #1
 8003e52:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003e54:	230f      	movs	r3, #15
 8003e56:	18fb      	adds	r3, r7, r3
 8003e58:	781b      	ldrb	r3, [r3, #0]
}
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	b005      	add	sp, #20
 8003e60:	bd90      	pop	{r4, r7, pc}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	20000e8c 	.word	0x20000e8c
 8003e68:	20000e84 	.word	0x20000e84
 8003e6c:	20000e88 	.word	0x20000e88

08003e70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e74:	4b05      	ldr	r3, [pc, #20]	@ (8003e8c <HAL_IncTick+0x1c>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	001a      	movs	r2, r3
 8003e7a:	4b05      	ldr	r3, [pc, #20]	@ (8003e90 <HAL_IncTick+0x20>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	18d2      	adds	r2, r2, r3
 8003e80:	4b03      	ldr	r3, [pc, #12]	@ (8003e90 <HAL_IncTick+0x20>)
 8003e82:	601a      	str	r2, [r3, #0]
}
 8003e84:	46c0      	nop			@ (mov r8, r8)
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	46c0      	nop			@ (mov r8, r8)
 8003e8c:	20000e8c 	.word	0x20000e8c
 8003e90:	20001560 	.word	0x20001560

08003e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  return uwTick;
 8003e98:	4b02      	ldr	r3, [pc, #8]	@ (8003ea4 <HAL_GetTick+0x10>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
}
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	46c0      	nop			@ (mov r8, r8)
 8003ea4:	20001560 	.word	0x20001560

08003ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003eb0:	f7ff fff0 	bl	8003e94 <HAL_GetTick>
 8003eb4:	0003      	movs	r3, r0
 8003eb6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	d005      	beq.n	8003ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8003eec <HAL_Delay+0x44>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	001a      	movs	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	189b      	adds	r3, r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ece:	46c0      	nop			@ (mov r8, r8)
 8003ed0:	f7ff ffe0 	bl	8003e94 <HAL_GetTick>
 8003ed4:	0002      	movs	r2, r0
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d8f7      	bhi.n	8003ed0 <HAL_Delay+0x28>
  {
  }
}
 8003ee0:	46c0      	nop			@ (mov r8, r8)
 8003ee2:	46c0      	nop			@ (mov r8, r8)
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	b004      	add	sp, #16
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	46c0      	nop			@ (mov r8, r8)
 8003eec:	20000e8c 	.word	0x20000e8c

08003ef0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003ef8:	4b06      	ldr	r3, [pc, #24]	@ (8003f14 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a06      	ldr	r2, [pc, #24]	@ (8003f18 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003efe:	4013      	ands	r3, r2
 8003f00:	0019      	movs	r1, r3
 8003f02:	4b04      	ldr	r3, [pc, #16]	@ (8003f14 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	601a      	str	r2, [r3, #0]
}
 8003f0a:	46c0      	nop			@ (mov r8, r8)
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b002      	add	sp, #8
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	46c0      	nop			@ (mov r8, r8)
 8003f14:	40010000 	.word	0x40010000
 8003f18:	fffff9ff 	.word	0xfffff9ff

08003f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f1c:	b590      	push	{r4, r7, lr}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	0002      	movs	r2, r0
 8003f24:	6039      	str	r1, [r7, #0]
 8003f26:	1dfb      	adds	r3, r7, #7
 8003f28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f30:	d828      	bhi.n	8003f84 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f32:	4a2f      	ldr	r2, [pc, #188]	@ (8003ff0 <__NVIC_SetPriority+0xd4>)
 8003f34:	1dfb      	adds	r3, r7, #7
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	b25b      	sxtb	r3, r3
 8003f3a:	089b      	lsrs	r3, r3, #2
 8003f3c:	33c0      	adds	r3, #192	@ 0xc0
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	589b      	ldr	r3, [r3, r2]
 8003f42:	1dfa      	adds	r2, r7, #7
 8003f44:	7812      	ldrb	r2, [r2, #0]
 8003f46:	0011      	movs	r1, r2
 8003f48:	2203      	movs	r2, #3
 8003f4a:	400a      	ands	r2, r1
 8003f4c:	00d2      	lsls	r2, r2, #3
 8003f4e:	21ff      	movs	r1, #255	@ 0xff
 8003f50:	4091      	lsls	r1, r2
 8003f52:	000a      	movs	r2, r1
 8003f54:	43d2      	mvns	r2, r2
 8003f56:	401a      	ands	r2, r3
 8003f58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	019b      	lsls	r3, r3, #6
 8003f5e:	22ff      	movs	r2, #255	@ 0xff
 8003f60:	401a      	ands	r2, r3
 8003f62:	1dfb      	adds	r3, r7, #7
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	0018      	movs	r0, r3
 8003f68:	2303      	movs	r3, #3
 8003f6a:	4003      	ands	r3, r0
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f70:	481f      	ldr	r0, [pc, #124]	@ (8003ff0 <__NVIC_SetPriority+0xd4>)
 8003f72:	1dfb      	adds	r3, r7, #7
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	b25b      	sxtb	r3, r3
 8003f78:	089b      	lsrs	r3, r3, #2
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	33c0      	adds	r3, #192	@ 0xc0
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003f82:	e031      	b.n	8003fe8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f84:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff4 <__NVIC_SetPriority+0xd8>)
 8003f86:	1dfb      	adds	r3, r7, #7
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	0019      	movs	r1, r3
 8003f8c:	230f      	movs	r3, #15
 8003f8e:	400b      	ands	r3, r1
 8003f90:	3b08      	subs	r3, #8
 8003f92:	089b      	lsrs	r3, r3, #2
 8003f94:	3306      	adds	r3, #6
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	18d3      	adds	r3, r2, r3
 8003f9a:	3304      	adds	r3, #4
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	1dfa      	adds	r2, r7, #7
 8003fa0:	7812      	ldrb	r2, [r2, #0]
 8003fa2:	0011      	movs	r1, r2
 8003fa4:	2203      	movs	r2, #3
 8003fa6:	400a      	ands	r2, r1
 8003fa8:	00d2      	lsls	r2, r2, #3
 8003faa:	21ff      	movs	r1, #255	@ 0xff
 8003fac:	4091      	lsls	r1, r2
 8003fae:	000a      	movs	r2, r1
 8003fb0:	43d2      	mvns	r2, r2
 8003fb2:	401a      	ands	r2, r3
 8003fb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	019b      	lsls	r3, r3, #6
 8003fba:	22ff      	movs	r2, #255	@ 0xff
 8003fbc:	401a      	ands	r2, r3
 8003fbe:	1dfb      	adds	r3, r7, #7
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	4003      	ands	r3, r0
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fcc:	4809      	ldr	r0, [pc, #36]	@ (8003ff4 <__NVIC_SetPriority+0xd8>)
 8003fce:	1dfb      	adds	r3, r7, #7
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	001c      	movs	r4, r3
 8003fd4:	230f      	movs	r3, #15
 8003fd6:	4023      	ands	r3, r4
 8003fd8:	3b08      	subs	r3, #8
 8003fda:	089b      	lsrs	r3, r3, #2
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	3306      	adds	r3, #6
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	18c3      	adds	r3, r0, r3
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	601a      	str	r2, [r3, #0]
}
 8003fe8:	46c0      	nop			@ (mov r8, r8)
 8003fea:	46bd      	mov	sp, r7
 8003fec:	b003      	add	sp, #12
 8003fee:	bd90      	pop	{r4, r7, pc}
 8003ff0:	e000e100 	.word	0xe000e100
 8003ff4:	e000ed00 	.word	0xe000ed00

08003ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	1e5a      	subs	r2, r3, #1
 8004004:	2380      	movs	r3, #128	@ 0x80
 8004006:	045b      	lsls	r3, r3, #17
 8004008:	429a      	cmp	r2, r3
 800400a:	d301      	bcc.n	8004010 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800400c:	2301      	movs	r3, #1
 800400e:	e010      	b.n	8004032 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004010:	4b0a      	ldr	r3, [pc, #40]	@ (800403c <SysTick_Config+0x44>)
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	3a01      	subs	r2, #1
 8004016:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004018:	2301      	movs	r3, #1
 800401a:	425b      	negs	r3, r3
 800401c:	2103      	movs	r1, #3
 800401e:	0018      	movs	r0, r3
 8004020:	f7ff ff7c 	bl	8003f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004024:	4b05      	ldr	r3, [pc, #20]	@ (800403c <SysTick_Config+0x44>)
 8004026:	2200      	movs	r2, #0
 8004028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800402a:	4b04      	ldr	r3, [pc, #16]	@ (800403c <SysTick_Config+0x44>)
 800402c:	2207      	movs	r2, #7
 800402e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004030:	2300      	movs	r3, #0
}
 8004032:	0018      	movs	r0, r3
 8004034:	46bd      	mov	sp, r7
 8004036:	b002      	add	sp, #8
 8004038:	bd80      	pop	{r7, pc}
 800403a:	46c0      	nop			@ (mov r8, r8)
 800403c:	e000e010 	.word	0xe000e010

08004040 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	607a      	str	r2, [r7, #4]
 800404a:	210f      	movs	r1, #15
 800404c:	187b      	adds	r3, r7, r1
 800404e:	1c02      	adds	r2, r0, #0
 8004050:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	187b      	adds	r3, r7, r1
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	b25b      	sxtb	r3, r3
 800405a:	0011      	movs	r1, r2
 800405c:	0018      	movs	r0, r3
 800405e:	f7ff ff5d 	bl	8003f1c <__NVIC_SetPriority>
}
 8004062:	46c0      	nop			@ (mov r8, r8)
 8004064:	46bd      	mov	sp, r7
 8004066:	b004      	add	sp, #16
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b082      	sub	sp, #8
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	0018      	movs	r0, r3
 8004076:	f7ff ffbf 	bl	8003ff8 <SysTick_Config>
 800407a:	0003      	movs	r3, r0
}
 800407c:	0018      	movs	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	b002      	add	sp, #8
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800408e:	2300      	movs	r3, #0
 8004090:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004092:	e14d      	b.n	8004330 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2101      	movs	r1, #1
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4091      	lsls	r1, r2
 800409e:	000a      	movs	r2, r1
 80040a0:	4013      	ands	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d100      	bne.n	80040ac <HAL_GPIO_Init+0x28>
 80040aa:	e13e      	b.n	800432a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2203      	movs	r2, #3
 80040b2:	4013      	ands	r3, r2
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d005      	beq.n	80040c4 <HAL_GPIO_Init+0x40>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2203      	movs	r2, #3
 80040be:	4013      	ands	r3, r2
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d130      	bne.n	8004126 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	2203      	movs	r2, #3
 80040d0:	409a      	lsls	r2, r3
 80040d2:	0013      	movs	r3, r2
 80040d4:	43da      	mvns	r2, r3
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4013      	ands	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	409a      	lsls	r2, r3
 80040e6:	0013      	movs	r3, r2
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040fa:	2201      	movs	r2, #1
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	409a      	lsls	r2, r3
 8004100:	0013      	movs	r3, r2
 8004102:	43da      	mvns	r2, r3
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	4013      	ands	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	091b      	lsrs	r3, r3, #4
 8004110:	2201      	movs	r2, #1
 8004112:	401a      	ands	r2, r3
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	409a      	lsls	r2, r3
 8004118:	0013      	movs	r3, r2
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2203      	movs	r2, #3
 800412c:	4013      	ands	r3, r2
 800412e:	2b03      	cmp	r3, #3
 8004130:	d017      	beq.n	8004162 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	2203      	movs	r2, #3
 800413e:	409a      	lsls	r2, r3
 8004140:	0013      	movs	r3, r2
 8004142:	43da      	mvns	r2, r3
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	4013      	ands	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	409a      	lsls	r2, r3
 8004154:	0013      	movs	r3, r2
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2203      	movs	r2, #3
 8004168:	4013      	ands	r3, r2
 800416a:	2b02      	cmp	r3, #2
 800416c:	d123      	bne.n	80041b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	08da      	lsrs	r2, r3, #3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3208      	adds	r2, #8
 8004176:	0092      	lsls	r2, r2, #2
 8004178:	58d3      	ldr	r3, [r2, r3]
 800417a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2207      	movs	r2, #7
 8004180:	4013      	ands	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	220f      	movs	r2, #15
 8004186:	409a      	lsls	r2, r3
 8004188:	0013      	movs	r3, r2
 800418a:	43da      	mvns	r2, r3
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	4013      	ands	r3, r2
 8004190:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2107      	movs	r1, #7
 800419a:	400b      	ands	r3, r1
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	409a      	lsls	r2, r3
 80041a0:	0013      	movs	r3, r2
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	08da      	lsrs	r2, r3, #3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3208      	adds	r2, #8
 80041b0:	0092      	lsls	r2, r2, #2
 80041b2:	6939      	ldr	r1, [r7, #16]
 80041b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	2203      	movs	r2, #3
 80041c2:	409a      	lsls	r2, r3
 80041c4:	0013      	movs	r3, r2
 80041c6:	43da      	mvns	r2, r3
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	4013      	ands	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2203      	movs	r2, #3
 80041d4:	401a      	ands	r2, r3
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	409a      	lsls	r2, r3
 80041dc:	0013      	movs	r3, r2
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	23c0      	movs	r3, #192	@ 0xc0
 80041f0:	029b      	lsls	r3, r3, #10
 80041f2:	4013      	ands	r3, r2
 80041f4:	d100      	bne.n	80041f8 <HAL_GPIO_Init+0x174>
 80041f6:	e098      	b.n	800432a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80041f8:	4a53      	ldr	r2, [pc, #332]	@ (8004348 <HAL_GPIO_Init+0x2c4>)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	089b      	lsrs	r3, r3, #2
 80041fe:	3318      	adds	r3, #24
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	589b      	ldr	r3, [r3, r2]
 8004204:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2203      	movs	r2, #3
 800420a:	4013      	ands	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	220f      	movs	r2, #15
 8004210:	409a      	lsls	r2, r3
 8004212:	0013      	movs	r3, r2
 8004214:	43da      	mvns	r2, r3
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	4013      	ands	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	23a0      	movs	r3, #160	@ 0xa0
 8004220:	05db      	lsls	r3, r3, #23
 8004222:	429a      	cmp	r2, r3
 8004224:	d019      	beq.n	800425a <HAL_GPIO_Init+0x1d6>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a48      	ldr	r2, [pc, #288]	@ (800434c <HAL_GPIO_Init+0x2c8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d013      	beq.n	8004256 <HAL_GPIO_Init+0x1d2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a47      	ldr	r2, [pc, #284]	@ (8004350 <HAL_GPIO_Init+0x2cc>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00d      	beq.n	8004252 <HAL_GPIO_Init+0x1ce>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a46      	ldr	r2, [pc, #280]	@ (8004354 <HAL_GPIO_Init+0x2d0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d007      	beq.n	800424e <HAL_GPIO_Init+0x1ca>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a45      	ldr	r2, [pc, #276]	@ (8004358 <HAL_GPIO_Init+0x2d4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d101      	bne.n	800424a <HAL_GPIO_Init+0x1c6>
 8004246:	2304      	movs	r3, #4
 8004248:	e008      	b.n	800425c <HAL_GPIO_Init+0x1d8>
 800424a:	2305      	movs	r3, #5
 800424c:	e006      	b.n	800425c <HAL_GPIO_Init+0x1d8>
 800424e:	2303      	movs	r3, #3
 8004250:	e004      	b.n	800425c <HAL_GPIO_Init+0x1d8>
 8004252:	2302      	movs	r3, #2
 8004254:	e002      	b.n	800425c <HAL_GPIO_Init+0x1d8>
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <HAL_GPIO_Init+0x1d8>
 800425a:	2300      	movs	r3, #0
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	2103      	movs	r1, #3
 8004260:	400a      	ands	r2, r1
 8004262:	00d2      	lsls	r2, r2, #3
 8004264:	4093      	lsls	r3, r2
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800426c:	4936      	ldr	r1, [pc, #216]	@ (8004348 <HAL_GPIO_Init+0x2c4>)
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	089b      	lsrs	r3, r3, #2
 8004272:	3318      	adds	r3, #24
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800427a:	4b33      	ldr	r3, [pc, #204]	@ (8004348 <HAL_GPIO_Init+0x2c4>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	43da      	mvns	r2, r3
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	4013      	ands	r3, r2
 8004288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	2380      	movs	r3, #128	@ 0x80
 8004290:	035b      	lsls	r3, r3, #13
 8004292:	4013      	ands	r3, r2
 8004294:	d003      	beq.n	800429e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4313      	orrs	r3, r2
 800429c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800429e:	4b2a      	ldr	r3, [pc, #168]	@ (8004348 <HAL_GPIO_Init+0x2c4>)
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80042a4:	4b28      	ldr	r3, [pc, #160]	@ (8004348 <HAL_GPIO_Init+0x2c4>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	43da      	mvns	r2, r3
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	4013      	ands	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	2380      	movs	r3, #128	@ 0x80
 80042ba:	039b      	lsls	r3, r3, #14
 80042bc:	4013      	ands	r3, r2
 80042be:	d003      	beq.n	80042c8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042c8:	4b1f      	ldr	r3, [pc, #124]	@ (8004348 <HAL_GPIO_Init+0x2c4>)
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80042ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004348 <HAL_GPIO_Init+0x2c4>)
 80042d0:	2384      	movs	r3, #132	@ 0x84
 80042d2:	58d3      	ldr	r3, [r2, r3]
 80042d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	43da      	mvns	r2, r3
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	4013      	ands	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	2380      	movs	r3, #128	@ 0x80
 80042e6:	029b      	lsls	r3, r3, #10
 80042e8:	4013      	ands	r3, r2
 80042ea:	d003      	beq.n	80042f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042f4:	4914      	ldr	r1, [pc, #80]	@ (8004348 <HAL_GPIO_Init+0x2c4>)
 80042f6:	2284      	movs	r2, #132	@ 0x84
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80042fc:	4a12      	ldr	r2, [pc, #72]	@ (8004348 <HAL_GPIO_Init+0x2c4>)
 80042fe:	2380      	movs	r3, #128	@ 0x80
 8004300:	58d3      	ldr	r3, [r2, r3]
 8004302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	43da      	mvns	r2, r3
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	4013      	ands	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	2380      	movs	r3, #128	@ 0x80
 8004314:	025b      	lsls	r3, r3, #9
 8004316:	4013      	ands	r3, r2
 8004318:	d003      	beq.n	8004322 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004322:	4909      	ldr	r1, [pc, #36]	@ (8004348 <HAL_GPIO_Init+0x2c4>)
 8004324:	2280      	movs	r2, #128	@ 0x80
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	3301      	adds	r3, #1
 800432e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	40da      	lsrs	r2, r3
 8004338:	1e13      	subs	r3, r2, #0
 800433a:	d000      	beq.n	800433e <HAL_GPIO_Init+0x2ba>
 800433c:	e6aa      	b.n	8004094 <HAL_GPIO_Init+0x10>
  }
}
 800433e:	46c0      	nop			@ (mov r8, r8)
 8004340:	46c0      	nop			@ (mov r8, r8)
 8004342:	46bd      	mov	sp, r7
 8004344:	b006      	add	sp, #24
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40021800 	.word	0x40021800
 800434c:	50000400 	.word	0x50000400
 8004350:	50000800 	.word	0x50000800
 8004354:	50000c00 	.word	0x50000c00
 8004358:	50001000 	.word	0x50001000

0800435c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	000a      	movs	r2, r1
 8004366:	1cbb      	adds	r3, r7, #2
 8004368:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	1cba      	adds	r2, r7, #2
 8004370:	8812      	ldrh	r2, [r2, #0]
 8004372:	4013      	ands	r3, r2
 8004374:	d004      	beq.n	8004380 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004376:	230f      	movs	r3, #15
 8004378:	18fb      	adds	r3, r7, r3
 800437a:	2201      	movs	r2, #1
 800437c:	701a      	strb	r2, [r3, #0]
 800437e:	e003      	b.n	8004388 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004380:	230f      	movs	r3, #15
 8004382:	18fb      	adds	r3, r7, r3
 8004384:	2200      	movs	r2, #0
 8004386:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004388:	230f      	movs	r3, #15
 800438a:	18fb      	adds	r3, r7, r3
 800438c:	781b      	ldrb	r3, [r3, #0]
}
 800438e:	0018      	movs	r0, r3
 8004390:	46bd      	mov	sp, r7
 8004392:	b004      	add	sp, #16
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b082      	sub	sp, #8
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	0008      	movs	r0, r1
 80043a0:	0011      	movs	r1, r2
 80043a2:	1cbb      	adds	r3, r7, #2
 80043a4:	1c02      	adds	r2, r0, #0
 80043a6:	801a      	strh	r2, [r3, #0]
 80043a8:	1c7b      	adds	r3, r7, #1
 80043aa:	1c0a      	adds	r2, r1, #0
 80043ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043ae:	1c7b      	adds	r3, r7, #1
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d004      	beq.n	80043c0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043b6:	1cbb      	adds	r3, r7, #2
 80043b8:	881a      	ldrh	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043be:	e003      	b.n	80043c8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043c0:	1cbb      	adds	r3, r7, #2
 80043c2:	881a      	ldrh	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80043c8:	46c0      	nop			@ (mov r8, r8)
 80043ca:	46bd      	mov	sp, r7
 80043cc:	b002      	add	sp, #8
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e08f      	b.n	8004502 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2241      	movs	r2, #65	@ 0x41
 80043e6:	5c9b      	ldrb	r3, [r3, r2]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d107      	bne.n	80043fe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2240      	movs	r2, #64	@ 0x40
 80043f2:	2100      	movs	r1, #0
 80043f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	0018      	movs	r0, r3
 80043fa:	f7ff fa69 	bl	80038d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2241      	movs	r2, #65	@ 0x41
 8004402:	2124      	movs	r1, #36	@ 0x24
 8004404:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2101      	movs	r1, #1
 8004412:	438a      	bics	r2, r1
 8004414:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	493b      	ldr	r1, [pc, #236]	@ (800450c <HAL_I2C_Init+0x13c>)
 8004420:	400a      	ands	r2, r1
 8004422:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689a      	ldr	r2, [r3, #8]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4938      	ldr	r1, [pc, #224]	@ (8004510 <HAL_I2C_Init+0x140>)
 8004430:	400a      	ands	r2, r1
 8004432:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d108      	bne.n	800444e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2180      	movs	r1, #128	@ 0x80
 8004446:	0209      	lsls	r1, r1, #8
 8004448:	430a      	orrs	r2, r1
 800444a:	609a      	str	r2, [r3, #8]
 800444c:	e007      	b.n	800445e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2184      	movs	r1, #132	@ 0x84
 8004458:	0209      	lsls	r1, r1, #8
 800445a:	430a      	orrs	r2, r1
 800445c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d109      	bne.n	800447a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2180      	movs	r1, #128	@ 0x80
 8004472:	0109      	lsls	r1, r1, #4
 8004474:	430a      	orrs	r2, r1
 8004476:	605a      	str	r2, [r3, #4]
 8004478:	e007      	b.n	800448a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4923      	ldr	r1, [pc, #140]	@ (8004514 <HAL_I2C_Init+0x144>)
 8004486:	400a      	ands	r2, r1
 8004488:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4920      	ldr	r1, [pc, #128]	@ (8004518 <HAL_I2C_Init+0x148>)
 8004496:	430a      	orrs	r2, r1
 8004498:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	491a      	ldr	r1, [pc, #104]	@ (8004510 <HAL_I2C_Init+0x140>)
 80044a6:	400a      	ands	r2, r1
 80044a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691a      	ldr	r2, [r3, #16]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	431a      	orrs	r2, r3
 80044b4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	69d9      	ldr	r1, [r3, #28]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1a      	ldr	r2, [r3, #32]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2101      	movs	r1, #1
 80044e0:	430a      	orrs	r2, r1
 80044e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2241      	movs	r2, #65	@ 0x41
 80044ee:	2120      	movs	r1, #32
 80044f0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2242      	movs	r2, #66	@ 0x42
 80044fc:	2100      	movs	r1, #0
 80044fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	0018      	movs	r0, r3
 8004504:	46bd      	mov	sp, r7
 8004506:	b002      	add	sp, #8
 8004508:	bd80      	pop	{r7, pc}
 800450a:	46c0      	nop			@ (mov r8, r8)
 800450c:	f0ffffff 	.word	0xf0ffffff
 8004510:	ffff7fff 	.word	0xffff7fff
 8004514:	fffff7ff 	.word	0xfffff7ff
 8004518:	02008000 	.word	0x02008000

0800451c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800451c:	b590      	push	{r4, r7, lr}
 800451e:	b089      	sub	sp, #36	@ 0x24
 8004520:	af02      	add	r7, sp, #8
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	0008      	movs	r0, r1
 8004526:	607a      	str	r2, [r7, #4]
 8004528:	0019      	movs	r1, r3
 800452a:	230a      	movs	r3, #10
 800452c:	18fb      	adds	r3, r7, r3
 800452e:	1c02      	adds	r2, r0, #0
 8004530:	801a      	strh	r2, [r3, #0]
 8004532:	2308      	movs	r3, #8
 8004534:	18fb      	adds	r3, r7, r3
 8004536:	1c0a      	adds	r2, r1, #0
 8004538:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2241      	movs	r2, #65	@ 0x41
 800453e:	5c9b      	ldrb	r3, [r3, r2]
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b20      	cmp	r3, #32
 8004544:	d000      	beq.n	8004548 <HAL_I2C_Master_Transmit+0x2c>
 8004546:	e10a      	b.n	800475e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2240      	movs	r2, #64	@ 0x40
 800454c:	5c9b      	ldrb	r3, [r3, r2]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d101      	bne.n	8004556 <HAL_I2C_Master_Transmit+0x3a>
 8004552:	2302      	movs	r3, #2
 8004554:	e104      	b.n	8004760 <HAL_I2C_Master_Transmit+0x244>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2240      	movs	r2, #64	@ 0x40
 800455a:	2101      	movs	r1, #1
 800455c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800455e:	f7ff fc99 	bl	8003e94 <HAL_GetTick>
 8004562:	0003      	movs	r3, r0
 8004564:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004566:	2380      	movs	r3, #128	@ 0x80
 8004568:	0219      	lsls	r1, r3, #8
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	2319      	movs	r3, #25
 8004572:	2201      	movs	r2, #1
 8004574:	f000 fa26 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8004578:	1e03      	subs	r3, r0, #0
 800457a:	d001      	beq.n	8004580 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e0ef      	b.n	8004760 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2241      	movs	r2, #65	@ 0x41
 8004584:	2121      	movs	r1, #33	@ 0x21
 8004586:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2242      	movs	r2, #66	@ 0x42
 800458c:	2110      	movs	r1, #16
 800458e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2208      	movs	r2, #8
 80045a0:	18ba      	adds	r2, r7, r2
 80045a2:	8812      	ldrh	r2, [r2, #0]
 80045a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2bff      	cmp	r3, #255	@ 0xff
 80045b4:	d906      	bls.n	80045c4 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	22ff      	movs	r2, #255	@ 0xff
 80045ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80045bc:	2380      	movs	r3, #128	@ 0x80
 80045be:	045b      	lsls	r3, r3, #17
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	e007      	b.n	80045d4 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80045ce:	2380      	movs	r3, #128	@ 0x80
 80045d0:	049b      	lsls	r3, r3, #18
 80045d2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d027      	beq.n	800462c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e0:	781a      	ldrb	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004604:	3b01      	subs	r3, #1
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004610:	b2db      	uxtb	r3, r3
 8004612:	3301      	adds	r3, #1
 8004614:	b2da      	uxtb	r2, r3
 8004616:	697c      	ldr	r4, [r7, #20]
 8004618:	230a      	movs	r3, #10
 800461a:	18fb      	adds	r3, r7, r3
 800461c:	8819      	ldrh	r1, [r3, #0]
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	4b51      	ldr	r3, [pc, #324]	@ (8004768 <HAL_I2C_Master_Transmit+0x24c>)
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	0023      	movs	r3, r4
 8004626:	f000 fc45 	bl	8004eb4 <I2C_TransferConfig>
 800462a:	e06f      	b.n	800470c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004630:	b2da      	uxtb	r2, r3
 8004632:	697c      	ldr	r4, [r7, #20]
 8004634:	230a      	movs	r3, #10
 8004636:	18fb      	adds	r3, r7, r3
 8004638:	8819      	ldrh	r1, [r3, #0]
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	4b4a      	ldr	r3, [pc, #296]	@ (8004768 <HAL_I2C_Master_Transmit+0x24c>)
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	0023      	movs	r3, r4
 8004642:	f000 fc37 	bl	8004eb4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004646:	e061      	b.n	800470c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	0018      	movs	r0, r3
 8004650:	f000 fa10 	bl	8004a74 <I2C_WaitOnTXISFlagUntilTimeout>
 8004654:	1e03      	subs	r3, r0, #0
 8004656:	d001      	beq.n	800465c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e081      	b.n	8004760 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004660:	781a      	ldrb	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d03a      	beq.n	800470c <HAL_I2C_Master_Transmit+0x1f0>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800469a:	2b00      	cmp	r3, #0
 800469c:	d136      	bne.n	800470c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800469e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	0013      	movs	r3, r2
 80046a8:	2200      	movs	r2, #0
 80046aa:	2180      	movs	r1, #128	@ 0x80
 80046ac:	f000 f98a 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 80046b0:	1e03      	subs	r3, r0, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e053      	b.n	8004760 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2bff      	cmp	r3, #255	@ 0xff
 80046c0:	d911      	bls.n	80046e6 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	22ff      	movs	r2, #255	@ 0xff
 80046c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	2380      	movs	r3, #128	@ 0x80
 80046d0:	045c      	lsls	r4, r3, #17
 80046d2:	230a      	movs	r3, #10
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	8819      	ldrh	r1, [r3, #0]
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	2300      	movs	r3, #0
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	0023      	movs	r3, r4
 80046e0:	f000 fbe8 	bl	8004eb4 <I2C_TransferConfig>
 80046e4:	e012      	b.n	800470c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	2380      	movs	r3, #128	@ 0x80
 80046f8:	049c      	lsls	r4, r3, #18
 80046fa:	230a      	movs	r3, #10
 80046fc:	18fb      	adds	r3, r7, r3
 80046fe:	8819      	ldrh	r1, [r3, #0]
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	2300      	movs	r3, #0
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	0023      	movs	r3, r4
 8004708:	f000 fbd4 	bl	8004eb4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004710:	b29b      	uxth	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d198      	bne.n	8004648 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	0018      	movs	r0, r3
 800471e:	f000 f9ef 	bl	8004b00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004722:	1e03      	subs	r3, r0, #0
 8004724:	d001      	beq.n	800472a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e01a      	b.n	8004760 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2220      	movs	r2, #32
 8004730:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	490b      	ldr	r1, [pc, #44]	@ (800476c <HAL_I2C_Master_Transmit+0x250>)
 800473e:	400a      	ands	r2, r1
 8004740:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2241      	movs	r2, #65	@ 0x41
 8004746:	2120      	movs	r1, #32
 8004748:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2242      	movs	r2, #66	@ 0x42
 800474e:	2100      	movs	r1, #0
 8004750:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2240      	movs	r2, #64	@ 0x40
 8004756:	2100      	movs	r1, #0
 8004758:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	e000      	b.n	8004760 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800475e:	2302      	movs	r3, #2
  }
}
 8004760:	0018      	movs	r0, r3
 8004762:	46bd      	mov	sp, r7
 8004764:	b007      	add	sp, #28
 8004766:	bd90      	pop	{r4, r7, pc}
 8004768:	80002000 	.word	0x80002000
 800476c:	fe00e800 	.word	0xfe00e800

08004770 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004770:	b590      	push	{r4, r7, lr}
 8004772:	b089      	sub	sp, #36	@ 0x24
 8004774:	af02      	add	r7, sp, #8
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	0008      	movs	r0, r1
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	0019      	movs	r1, r3
 800477e:	230a      	movs	r3, #10
 8004780:	18fb      	adds	r3, r7, r3
 8004782:	1c02      	adds	r2, r0, #0
 8004784:	801a      	strh	r2, [r3, #0]
 8004786:	2308      	movs	r3, #8
 8004788:	18fb      	adds	r3, r7, r3
 800478a:	1c0a      	adds	r2, r1, #0
 800478c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2241      	movs	r2, #65	@ 0x41
 8004792:	5c9b      	ldrb	r3, [r3, r2]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b20      	cmp	r3, #32
 8004798:	d000      	beq.n	800479c <HAL_I2C_Master_Receive+0x2c>
 800479a:	e0e8      	b.n	800496e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2240      	movs	r2, #64	@ 0x40
 80047a0:	5c9b      	ldrb	r3, [r3, r2]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d101      	bne.n	80047aa <HAL_I2C_Master_Receive+0x3a>
 80047a6:	2302      	movs	r3, #2
 80047a8:	e0e2      	b.n	8004970 <HAL_I2C_Master_Receive+0x200>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2240      	movs	r2, #64	@ 0x40
 80047ae:	2101      	movs	r1, #1
 80047b0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047b2:	f7ff fb6f 	bl	8003e94 <HAL_GetTick>
 80047b6:	0003      	movs	r3, r0
 80047b8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047ba:	2380      	movs	r3, #128	@ 0x80
 80047bc:	0219      	lsls	r1, r3, #8
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	2319      	movs	r3, #25
 80047c6:	2201      	movs	r2, #1
 80047c8:	f000 f8fc 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 80047cc:	1e03      	subs	r3, r0, #0
 80047ce:	d001      	beq.n	80047d4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0cd      	b.n	8004970 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2241      	movs	r2, #65	@ 0x41
 80047d8:	2122      	movs	r1, #34	@ 0x22
 80047da:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2242      	movs	r2, #66	@ 0x42
 80047e0:	2110      	movs	r1, #16
 80047e2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2208      	movs	r2, #8
 80047f4:	18ba      	adds	r2, r7, r2
 80047f6:	8812      	ldrh	r2, [r2, #0]
 80047f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004804:	b29b      	uxth	r3, r3
 8004806:	2bff      	cmp	r3, #255	@ 0xff
 8004808:	d911      	bls.n	800482e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	22ff      	movs	r2, #255	@ 0xff
 800480e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004814:	b2da      	uxtb	r2, r3
 8004816:	2380      	movs	r3, #128	@ 0x80
 8004818:	045c      	lsls	r4, r3, #17
 800481a:	230a      	movs	r3, #10
 800481c:	18fb      	adds	r3, r7, r3
 800481e:	8819      	ldrh	r1, [r3, #0]
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	4b55      	ldr	r3, [pc, #340]	@ (8004978 <HAL_I2C_Master_Receive+0x208>)
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	0023      	movs	r3, r4
 8004828:	f000 fb44 	bl	8004eb4 <I2C_TransferConfig>
 800482c:	e076      	b.n	800491c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800483c:	b2da      	uxtb	r2, r3
 800483e:	2380      	movs	r3, #128	@ 0x80
 8004840:	049c      	lsls	r4, r3, #18
 8004842:	230a      	movs	r3, #10
 8004844:	18fb      	adds	r3, r7, r3
 8004846:	8819      	ldrh	r1, [r3, #0]
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	4b4b      	ldr	r3, [pc, #300]	@ (8004978 <HAL_I2C_Master_Receive+0x208>)
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	0023      	movs	r3, r4
 8004850:	f000 fb30 	bl	8004eb4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004854:	e062      	b.n	800491c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	0018      	movs	r0, r3
 800485e:	f000 f993 	bl	8004b88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004862:	1e03      	subs	r3, r0, #0
 8004864:	d001      	beq.n	800486a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e082      	b.n	8004970 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004874:	b2d2      	uxtb	r2, r2
 8004876:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487c:	1c5a      	adds	r2, r3, #1
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004886:	3b01      	subs	r3, #1
 8004888:	b29a      	uxth	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004892:	b29b      	uxth	r3, r3
 8004894:	3b01      	subs	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d03a      	beq.n	800491c <HAL_I2C_Master_Receive+0x1ac>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d136      	bne.n	800491c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	0013      	movs	r3, r2
 80048b8:	2200      	movs	r2, #0
 80048ba:	2180      	movs	r1, #128	@ 0x80
 80048bc:	f000 f882 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 80048c0:	1e03      	subs	r3, r0, #0
 80048c2:	d001      	beq.n	80048c8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e053      	b.n	8004970 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2bff      	cmp	r3, #255	@ 0xff
 80048d0:	d911      	bls.n	80048f6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	22ff      	movs	r2, #255	@ 0xff
 80048d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	2380      	movs	r3, #128	@ 0x80
 80048e0:	045c      	lsls	r4, r3, #17
 80048e2:	230a      	movs	r3, #10
 80048e4:	18fb      	adds	r3, r7, r3
 80048e6:	8819      	ldrh	r1, [r3, #0]
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	2300      	movs	r3, #0
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	0023      	movs	r3, r4
 80048f0:	f000 fae0 	bl	8004eb4 <I2C_TransferConfig>
 80048f4:	e012      	b.n	800491c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004904:	b2da      	uxtb	r2, r3
 8004906:	2380      	movs	r3, #128	@ 0x80
 8004908:	049c      	lsls	r4, r3, #18
 800490a:	230a      	movs	r3, #10
 800490c:	18fb      	adds	r3, r7, r3
 800490e:	8819      	ldrh	r1, [r3, #0]
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	2300      	movs	r3, #0
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	0023      	movs	r3, r4
 8004918:	f000 facc 	bl	8004eb4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004920:	b29b      	uxth	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d197      	bne.n	8004856 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	0018      	movs	r0, r3
 800492e:	f000 f8e7 	bl	8004b00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004932:	1e03      	subs	r3, r0, #0
 8004934:	d001      	beq.n	800493a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e01a      	b.n	8004970 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2220      	movs	r2, #32
 8004940:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	490b      	ldr	r1, [pc, #44]	@ (800497c <HAL_I2C_Master_Receive+0x20c>)
 800494e:	400a      	ands	r2, r1
 8004950:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2241      	movs	r2, #65	@ 0x41
 8004956:	2120      	movs	r1, #32
 8004958:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2242      	movs	r2, #66	@ 0x42
 800495e:	2100      	movs	r1, #0
 8004960:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2240      	movs	r2, #64	@ 0x40
 8004966:	2100      	movs	r1, #0
 8004968:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	e000      	b.n	8004970 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800496e:	2302      	movs	r3, #2
  }
}
 8004970:	0018      	movs	r0, r3
 8004972:	46bd      	mov	sp, r7
 8004974:	b007      	add	sp, #28
 8004976:	bd90      	pop	{r4, r7, pc}
 8004978:	80002400 	.word	0x80002400
 800497c:	fe00e800 	.word	0xfe00e800

08004980 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	2202      	movs	r2, #2
 8004990:	4013      	ands	r3, r2
 8004992:	2b02      	cmp	r3, #2
 8004994:	d103      	bne.n	800499e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2200      	movs	r2, #0
 800499c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	2201      	movs	r2, #1
 80049a6:	4013      	ands	r3, r2
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d007      	beq.n	80049bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699a      	ldr	r2, [r3, #24]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2101      	movs	r1, #1
 80049b8:	430a      	orrs	r2, r1
 80049ba:	619a      	str	r2, [r3, #24]
  }
}
 80049bc:	46c0      	nop			@ (mov r8, r8)
 80049be:	46bd      	mov	sp, r7
 80049c0:	b002      	add	sp, #8
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	603b      	str	r3, [r7, #0]
 80049d0:	1dfb      	adds	r3, r7, #7
 80049d2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049d4:	e03a      	b.n	8004a4c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	6839      	ldr	r1, [r7, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	0018      	movs	r0, r3
 80049de:	f000 f971 	bl	8004cc4 <I2C_IsErrorOccurred>
 80049e2:	1e03      	subs	r3, r0, #0
 80049e4:	d001      	beq.n	80049ea <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e040      	b.n	8004a6c <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	3301      	adds	r3, #1
 80049ee:	d02d      	beq.n	8004a4c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f0:	f7ff fa50 	bl	8003e94 <HAL_GetTick>
 80049f4:	0002      	movs	r2, r0
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d302      	bcc.n	8004a06 <I2C_WaitOnFlagUntilTimeout+0x42>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d122      	bne.n	8004a4c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	425a      	negs	r2, r3
 8004a16:	4153      	adcs	r3, r2
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	001a      	movs	r2, r3
 8004a1c:	1dfb      	adds	r3, r7, #7
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d113      	bne.n	8004a4c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a28:	2220      	movs	r2, #32
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2241      	movs	r2, #65	@ 0x41
 8004a34:	2120      	movs	r1, #32
 8004a36:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2242      	movs	r2, #66	@ 0x42
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2240      	movs	r2, #64	@ 0x40
 8004a44:	2100      	movs	r1, #0
 8004a46:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e00f      	b.n	8004a6c <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	4013      	ands	r3, r2
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	425a      	negs	r2, r3
 8004a5c:	4153      	adcs	r3, r2
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	001a      	movs	r2, r3
 8004a62:	1dfb      	adds	r3, r7, #7
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d0b5      	beq.n	80049d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	b004      	add	sp, #16
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a80:	e032      	b.n	8004ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	68b9      	ldr	r1, [r7, #8]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f000 f91b 	bl	8004cc4 <I2C_IsErrorOccurred>
 8004a8e:	1e03      	subs	r3, r0, #0
 8004a90:	d001      	beq.n	8004a96 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e030      	b.n	8004af8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	d025      	beq.n	8004ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a9c:	f7ff f9fa 	bl	8003e94 <HAL_GetTick>
 8004aa0:	0002      	movs	r2, r0
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d302      	bcc.n	8004ab2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d11a      	bne.n	8004ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	2202      	movs	r2, #2
 8004aba:	4013      	ands	r3, r2
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d013      	beq.n	8004ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2241      	movs	r2, #65	@ 0x41
 8004ad0:	2120      	movs	r1, #32
 8004ad2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2242      	movs	r2, #66	@ 0x42
 8004ad8:	2100      	movs	r1, #0
 8004ada:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2240      	movs	r2, #64	@ 0x40
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e007      	b.n	8004af8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	2202      	movs	r2, #2
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d1c5      	bne.n	8004a82 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	0018      	movs	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b004      	add	sp, #16
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b0c:	e02f      	b.n	8004b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	68b9      	ldr	r1, [r7, #8]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	0018      	movs	r0, r3
 8004b16:	f000 f8d5 	bl	8004cc4 <I2C_IsErrorOccurred>
 8004b1a:	1e03      	subs	r3, r0, #0
 8004b1c:	d001      	beq.n	8004b22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e02d      	b.n	8004b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b22:	f7ff f9b7 	bl	8003e94 <HAL_GetTick>
 8004b26:	0002      	movs	r2, r0
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d302      	bcc.n	8004b38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d11a      	bne.n	8004b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	4013      	ands	r3, r2
 8004b42:	2b20      	cmp	r3, #32
 8004b44:	d013      	beq.n	8004b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2241      	movs	r2, #65	@ 0x41
 8004b56:	2120      	movs	r1, #32
 8004b58:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2242      	movs	r2, #66	@ 0x42
 8004b5e:	2100      	movs	r1, #0
 8004b60:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2240      	movs	r2, #64	@ 0x40
 8004b66:	2100      	movs	r1, #0
 8004b68:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e007      	b.n	8004b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	2220      	movs	r2, #32
 8004b76:	4013      	ands	r3, r2
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	d1c8      	bne.n	8004b0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	0018      	movs	r0, r3
 8004b80:	46bd      	mov	sp, r7
 8004b82:	b004      	add	sp, #16
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b94:	2317      	movs	r3, #23
 8004b96:	18fb      	adds	r3, r7, r3
 8004b98:	2200      	movs	r2, #0
 8004b9a:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004b9c:	e07b      	b.n	8004c96 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	68b9      	ldr	r1, [r7, #8]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f000 f88d 	bl	8004cc4 <I2C_IsErrorOccurred>
 8004baa:	1e03      	subs	r3, r0, #0
 8004bac:	d003      	beq.n	8004bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8004bae:	2317      	movs	r3, #23
 8004bb0:	18fb      	adds	r3, r7, r3
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	d140      	bne.n	8004c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8004bc4:	2117      	movs	r1, #23
 8004bc6:	187b      	adds	r3, r7, r1
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d13b      	bne.n	8004c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	2204      	movs	r2, #4
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d106      	bne.n	8004bea <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004be4:	187b      	adds	r3, r7, r1
 8004be6:	2200      	movs	r2, #0
 8004be8:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	2210      	movs	r2, #16
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	2b10      	cmp	r3, #16
 8004bf6:	d123      	bne.n	8004c40 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2210      	movs	r2, #16
 8004bfe:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2204      	movs	r2, #4
 8004c04:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4929      	ldr	r1, [pc, #164]	@ (8004cc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8004c1a:	400a      	ands	r2, r1
 8004c1c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2241      	movs	r2, #65	@ 0x41
 8004c22:	2120      	movs	r1, #32
 8004c24:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2242      	movs	r2, #66	@ 0x42
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2240      	movs	r2, #64	@ 0x40
 8004c32:	2100      	movs	r1, #0
 8004c34:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004c36:	2317      	movs	r3, #23
 8004c38:	18fb      	adds	r3, r7, r3
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	701a      	strb	r2, [r3, #0]
 8004c3e:	e002      	b.n	8004c46 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004c46:	f7ff f925 	bl	8003e94 <HAL_GetTick>
 8004c4a:	0002      	movs	r2, r0
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d302      	bcc.n	8004c5c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d11c      	bne.n	8004c96 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8004c5c:	2017      	movs	r0, #23
 8004c5e:	183b      	adds	r3, r7, r0
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d117      	bne.n	8004c96 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	2204      	movs	r2, #4
 8004c6e:	4013      	ands	r3, r2
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	d010      	beq.n	8004c96 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c78:	2220      	movs	r2, #32
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2241      	movs	r2, #65	@ 0x41
 8004c84:	2120      	movs	r1, #32
 8004c86:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2240      	movs	r2, #64	@ 0x40
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004c90:	183b      	adds	r3, r7, r0
 8004c92:	2201      	movs	r2, #1
 8004c94:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	2204      	movs	r2, #4
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d005      	beq.n	8004cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004ca4:	2317      	movs	r3, #23
 8004ca6:	18fb      	adds	r3, r7, r3
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d100      	bne.n	8004cb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004cae:	e776      	b.n	8004b9e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8004cb0:	2317      	movs	r3, #23
 8004cb2:	18fb      	adds	r3, r7, r3
 8004cb4:	781b      	ldrb	r3, [r3, #0]
}
 8004cb6:	0018      	movs	r0, r3
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	b006      	add	sp, #24
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	46c0      	nop			@ (mov r8, r8)
 8004cc0:	fe00e800 	.word	0xfe00e800

08004cc4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08a      	sub	sp, #40	@ 0x28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd0:	2327      	movs	r3, #39	@ 0x27
 8004cd2:	18fb      	adds	r3, r7, r3
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	2210      	movs	r2, #16
 8004cec:	4013      	ands	r3, r2
 8004cee:	d100      	bne.n	8004cf2 <I2C_IsErrorOccurred+0x2e>
 8004cf0:	e079      	b.n	8004de6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2210      	movs	r2, #16
 8004cf8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004cfa:	e057      	b.n	8004dac <I2C_IsErrorOccurred+0xe8>
 8004cfc:	2227      	movs	r2, #39	@ 0x27
 8004cfe:	18bb      	adds	r3, r7, r2
 8004d00:	18ba      	adds	r2, r7, r2
 8004d02:	7812      	ldrb	r2, [r2, #0]
 8004d04:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	d04f      	beq.n	8004dac <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d0c:	f7ff f8c2 	bl	8003e94 <HAL_GetTick>
 8004d10:	0002      	movs	r2, r0
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d302      	bcc.n	8004d22 <I2C_IsErrorOccurred+0x5e>
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d144      	bne.n	8004dac <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	2380      	movs	r3, #128	@ 0x80
 8004d2a:	01db      	lsls	r3, r3, #7
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004d30:	2013      	movs	r0, #19
 8004d32:	183b      	adds	r3, r7, r0
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	2142      	movs	r1, #66	@ 0x42
 8004d38:	5c52      	ldrb	r2, [r2, r1]
 8004d3a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	2380      	movs	r3, #128	@ 0x80
 8004d44:	021b      	lsls	r3, r3, #8
 8004d46:	401a      	ands	r2, r3
 8004d48:	2380      	movs	r3, #128	@ 0x80
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d126      	bne.n	8004d9e <I2C_IsErrorOccurred+0xda>
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	2380      	movs	r3, #128	@ 0x80
 8004d54:	01db      	lsls	r3, r3, #7
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d021      	beq.n	8004d9e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004d5a:	183b      	adds	r3, r7, r0
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	2b20      	cmp	r3, #32
 8004d60:	d01d      	beq.n	8004d9e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2180      	movs	r1, #128	@ 0x80
 8004d6e:	01c9      	lsls	r1, r1, #7
 8004d70:	430a      	orrs	r2, r1
 8004d72:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004d74:	f7ff f88e 	bl	8003e94 <HAL_GetTick>
 8004d78:	0003      	movs	r3, r0
 8004d7a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d7c:	e00f      	b.n	8004d9e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004d7e:	f7ff f889 	bl	8003e94 <HAL_GetTick>
 8004d82:	0002      	movs	r2, r0
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b19      	cmp	r3, #25
 8004d8a:	d908      	bls.n	8004d9e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	4313      	orrs	r3, r2
 8004d92:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004d94:	2327      	movs	r3, #39	@ 0x27
 8004d96:	18fb      	adds	r3, r7, r3
 8004d98:	2201      	movs	r2, #1
 8004d9a:	701a      	strb	r2, [r3, #0]

              break;
 8004d9c:	e006      	b.n	8004dac <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	2220      	movs	r2, #32
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b20      	cmp	r3, #32
 8004daa:	d1e8      	bne.n	8004d7e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	2220      	movs	r2, #32
 8004db4:	4013      	ands	r3, r2
 8004db6:	2b20      	cmp	r3, #32
 8004db8:	d004      	beq.n	8004dc4 <I2C_IsErrorOccurred+0x100>
 8004dba:	2327      	movs	r3, #39	@ 0x27
 8004dbc:	18fb      	adds	r3, r7, r3
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d09b      	beq.n	8004cfc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004dc4:	2327      	movs	r3, #39	@ 0x27
 8004dc6:	18fb      	adds	r3, r7, r3
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d103      	bne.n	8004dd6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	2204      	movs	r2, #4
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004dde:	2327      	movs	r3, #39	@ 0x27
 8004de0:	18fb      	adds	r3, r7, r3
 8004de2:	2201      	movs	r2, #1
 8004de4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	2380      	movs	r3, #128	@ 0x80
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	4013      	ands	r3, r2
 8004df6:	d00c      	beq.n	8004e12 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2280      	movs	r2, #128	@ 0x80
 8004e06:	0052      	lsls	r2, r2, #1
 8004e08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e0a:	2327      	movs	r3, #39	@ 0x27
 8004e0c:	18fb      	adds	r3, r7, r3
 8004e0e:	2201      	movs	r2, #1
 8004e10:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	2380      	movs	r3, #128	@ 0x80
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	4013      	ands	r3, r2
 8004e1a:	d00c      	beq.n	8004e36 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	2208      	movs	r2, #8
 8004e20:	4313      	orrs	r3, r2
 8004e22:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2280      	movs	r2, #128	@ 0x80
 8004e2a:	00d2      	lsls	r2, r2, #3
 8004e2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e2e:	2327      	movs	r3, #39	@ 0x27
 8004e30:	18fb      	adds	r3, r7, r3
 8004e32:	2201      	movs	r2, #1
 8004e34:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	2380      	movs	r3, #128	@ 0x80
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d00c      	beq.n	8004e5a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	2202      	movs	r2, #2
 8004e44:	4313      	orrs	r3, r2
 8004e46:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2280      	movs	r2, #128	@ 0x80
 8004e4e:	0092      	lsls	r2, r2, #2
 8004e50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e52:	2327      	movs	r3, #39	@ 0x27
 8004e54:	18fb      	adds	r3, r7, r3
 8004e56:	2201      	movs	r2, #1
 8004e58:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004e5a:	2327      	movs	r3, #39	@ 0x27
 8004e5c:	18fb      	adds	r3, r7, r3
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d01d      	beq.n	8004ea0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	0018      	movs	r0, r3
 8004e68:	f7ff fd8a 	bl	8004980 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	490e      	ldr	r1, [pc, #56]	@ (8004eb0 <I2C_IsErrorOccurred+0x1ec>)
 8004e78:	400a      	ands	r2, r1
 8004e7a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	431a      	orrs	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2241      	movs	r2, #65	@ 0x41
 8004e8c:	2120      	movs	r1, #32
 8004e8e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2242      	movs	r2, #66	@ 0x42
 8004e94:	2100      	movs	r1, #0
 8004e96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2240      	movs	r2, #64	@ 0x40
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004ea0:	2327      	movs	r3, #39	@ 0x27
 8004ea2:	18fb      	adds	r3, r7, r3
 8004ea4:	781b      	ldrb	r3, [r3, #0]
}
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	b00a      	add	sp, #40	@ 0x28
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	46c0      	nop			@ (mov r8, r8)
 8004eb0:	fe00e800 	.word	0xfe00e800

08004eb4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004eb4:	b590      	push	{r4, r7, lr}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	0008      	movs	r0, r1
 8004ebe:	0011      	movs	r1, r2
 8004ec0:	607b      	str	r3, [r7, #4]
 8004ec2:	240a      	movs	r4, #10
 8004ec4:	193b      	adds	r3, r7, r4
 8004ec6:	1c02      	adds	r2, r0, #0
 8004ec8:	801a      	strh	r2, [r3, #0]
 8004eca:	2009      	movs	r0, #9
 8004ecc:	183b      	adds	r3, r7, r0
 8004ece:	1c0a      	adds	r2, r1, #0
 8004ed0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ed2:	193b      	adds	r3, r7, r4
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	059b      	lsls	r3, r3, #22
 8004ed8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004eda:	183b      	adds	r3, r7, r0
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	0419      	lsls	r1, r3, #16
 8004ee0:	23ff      	movs	r3, #255	@ 0xff
 8004ee2:	041b      	lsls	r3, r3, #16
 8004ee4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ee6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	085b      	lsrs	r3, r3, #1
 8004ef4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004efe:	0d51      	lsrs	r1, r2, #21
 8004f00:	2280      	movs	r2, #128	@ 0x80
 8004f02:	00d2      	lsls	r2, r2, #3
 8004f04:	400a      	ands	r2, r1
 8004f06:	4907      	ldr	r1, [pc, #28]	@ (8004f24 <I2C_TransferConfig+0x70>)
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	43d2      	mvns	r2, r2
 8004f0c:	401a      	ands	r2, r3
 8004f0e:	0011      	movs	r1, r2
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f1a:	46c0      	nop			@ (mov r8, r8)
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	b007      	add	sp, #28
 8004f20:	bd90      	pop	{r4, r7, pc}
 8004f22:	46c0      	nop			@ (mov r8, r8)
 8004f24:	03ff63ff 	.word	0x03ff63ff

08004f28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2241      	movs	r2, #65	@ 0x41
 8004f36:	5c9b      	ldrb	r3, [r3, r2]
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	d138      	bne.n	8004fb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2240      	movs	r2, #64	@ 0x40
 8004f42:	5c9b      	ldrb	r3, [r3, r2]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d101      	bne.n	8004f4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	e032      	b.n	8004fb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2240      	movs	r2, #64	@ 0x40
 8004f50:	2101      	movs	r1, #1
 8004f52:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2241      	movs	r2, #65	@ 0x41
 8004f58:	2124      	movs	r1, #36	@ 0x24
 8004f5a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2101      	movs	r1, #1
 8004f68:	438a      	bics	r2, r1
 8004f6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4911      	ldr	r1, [pc, #68]	@ (8004fbc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004f78:	400a      	ands	r2, r1
 8004f7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6819      	ldr	r1, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2101      	movs	r1, #1
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2241      	movs	r2, #65	@ 0x41
 8004fa0:	2120      	movs	r1, #32
 8004fa2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2240      	movs	r2, #64	@ 0x40
 8004fa8:	2100      	movs	r1, #0
 8004faa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	e000      	b.n	8004fb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004fb0:	2302      	movs	r3, #2
  }
}
 8004fb2:	0018      	movs	r0, r3
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	b002      	add	sp, #8
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	46c0      	nop			@ (mov r8, r8)
 8004fbc:	ffffefff 	.word	0xffffefff

08004fc0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2241      	movs	r2, #65	@ 0x41
 8004fce:	5c9b      	ldrb	r3, [r3, r2]
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b20      	cmp	r3, #32
 8004fd4:	d139      	bne.n	800504a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2240      	movs	r2, #64	@ 0x40
 8004fda:	5c9b      	ldrb	r3, [r3, r2]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d101      	bne.n	8004fe4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	e033      	b.n	800504c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2240      	movs	r2, #64	@ 0x40
 8004fe8:	2101      	movs	r1, #1
 8004fea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2241      	movs	r2, #65	@ 0x41
 8004ff0:	2124      	movs	r1, #36	@ 0x24
 8004ff2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2101      	movs	r1, #1
 8005000:	438a      	bics	r2, r1
 8005002:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4a11      	ldr	r2, [pc, #68]	@ (8005054 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005010:	4013      	ands	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	021b      	lsls	r3, r3, #8
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2101      	movs	r1, #1
 8005032:	430a      	orrs	r2, r1
 8005034:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2241      	movs	r2, #65	@ 0x41
 800503a:	2120      	movs	r1, #32
 800503c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2240      	movs	r2, #64	@ 0x40
 8005042:	2100      	movs	r1, #0
 8005044:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	e000      	b.n	800504c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800504a:	2302      	movs	r3, #2
  }
}
 800504c:	0018      	movs	r0, r3
 800504e:	46bd      	mov	sp, r7
 8005050:	b004      	add	sp, #16
 8005052:	bd80      	pop	{r7, pc}
 8005054:	fffff0ff 	.word	0xfffff0ff

08005058 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005060:	4b19      	ldr	r3, [pc, #100]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a19      	ldr	r2, [pc, #100]	@ (80050cc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005066:	4013      	ands	r3, r2
 8005068:	0019      	movs	r1, r3
 800506a:	4b17      	ldr	r3, [pc, #92]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	430a      	orrs	r2, r1
 8005070:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	2380      	movs	r3, #128	@ 0x80
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	429a      	cmp	r2, r3
 800507a:	d11f      	bne.n	80050bc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800507c:	4b14      	ldr	r3, [pc, #80]	@ (80050d0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	0013      	movs	r3, r2
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	189b      	adds	r3, r3, r2
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	4912      	ldr	r1, [pc, #72]	@ (80050d4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800508a:	0018      	movs	r0, r3
 800508c:	f7fb f84c 	bl	8000128 <__udivsi3>
 8005090:	0003      	movs	r3, r0
 8005092:	3301      	adds	r3, #1
 8005094:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005096:	e008      	b.n	80050aa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	3b01      	subs	r3, #1
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	e001      	b.n	80050aa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e009      	b.n	80050be <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050aa:	4b07      	ldr	r3, [pc, #28]	@ (80050c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80050ac:	695a      	ldr	r2, [r3, #20]
 80050ae:	2380      	movs	r3, #128	@ 0x80
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	401a      	ands	r2, r3
 80050b4:	2380      	movs	r3, #128	@ 0x80
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d0ed      	beq.n	8005098 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	0018      	movs	r0, r3
 80050c0:	46bd      	mov	sp, r7
 80050c2:	b004      	add	sp, #16
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	46c0      	nop			@ (mov r8, r8)
 80050c8:	40007000 	.word	0x40007000
 80050cc:	fffff9ff 	.word	0xfffff9ff
 80050d0:	20000e84 	.word	0x20000e84
 80050d4:	000f4240 	.word	0x000f4240

080050d8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80050dc:	4b03      	ldr	r3, [pc, #12]	@ (80050ec <LL_RCC_GetAPB1Prescaler+0x14>)
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	23e0      	movs	r3, #224	@ 0xe0
 80050e2:	01db      	lsls	r3, r3, #7
 80050e4:	4013      	ands	r3, r2
}
 80050e6:	0018      	movs	r0, r3
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40021000 	.word	0x40021000

080050f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b088      	sub	sp, #32
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d102      	bne.n	8005104 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	f000 fb50 	bl	80057a4 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2201      	movs	r2, #1
 800510a:	4013      	ands	r3, r2
 800510c:	d100      	bne.n	8005110 <HAL_RCC_OscConfig+0x20>
 800510e:	e07c      	b.n	800520a <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005110:	4bc3      	ldr	r3, [pc, #780]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	2238      	movs	r2, #56	@ 0x38
 8005116:	4013      	ands	r3, r2
 8005118:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800511a:	4bc1      	ldr	r3, [pc, #772]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	2203      	movs	r2, #3
 8005120:	4013      	ands	r3, r2
 8005122:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	2b10      	cmp	r3, #16
 8005128:	d102      	bne.n	8005130 <HAL_RCC_OscConfig+0x40>
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2b03      	cmp	r3, #3
 800512e:	d002      	beq.n	8005136 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	2b08      	cmp	r3, #8
 8005134:	d10b      	bne.n	800514e <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005136:	4bba      	ldr	r3, [pc, #744]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	2380      	movs	r3, #128	@ 0x80
 800513c:	029b      	lsls	r3, r3, #10
 800513e:	4013      	ands	r3, r2
 8005140:	d062      	beq.n	8005208 <HAL_RCC_OscConfig+0x118>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d15e      	bne.n	8005208 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e32a      	b.n	80057a4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	2380      	movs	r3, #128	@ 0x80
 8005154:	025b      	lsls	r3, r3, #9
 8005156:	429a      	cmp	r2, r3
 8005158:	d107      	bne.n	800516a <HAL_RCC_OscConfig+0x7a>
 800515a:	4bb1      	ldr	r3, [pc, #708]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	4bb0      	ldr	r3, [pc, #704]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 8005160:	2180      	movs	r1, #128	@ 0x80
 8005162:	0249      	lsls	r1, r1, #9
 8005164:	430a      	orrs	r2, r1
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	e020      	b.n	80051ac <HAL_RCC_OscConfig+0xbc>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	23a0      	movs	r3, #160	@ 0xa0
 8005170:	02db      	lsls	r3, r3, #11
 8005172:	429a      	cmp	r2, r3
 8005174:	d10e      	bne.n	8005194 <HAL_RCC_OscConfig+0xa4>
 8005176:	4baa      	ldr	r3, [pc, #680]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	4ba9      	ldr	r3, [pc, #676]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 800517c:	2180      	movs	r1, #128	@ 0x80
 800517e:	02c9      	lsls	r1, r1, #11
 8005180:	430a      	orrs	r2, r1
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	4ba6      	ldr	r3, [pc, #664]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	4ba5      	ldr	r3, [pc, #660]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 800518a:	2180      	movs	r1, #128	@ 0x80
 800518c:	0249      	lsls	r1, r1, #9
 800518e:	430a      	orrs	r2, r1
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	e00b      	b.n	80051ac <HAL_RCC_OscConfig+0xbc>
 8005194:	4ba2      	ldr	r3, [pc, #648]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	4ba1      	ldr	r3, [pc, #644]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 800519a:	49a2      	ldr	r1, [pc, #648]	@ (8005424 <HAL_RCC_OscConfig+0x334>)
 800519c:	400a      	ands	r2, r1
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	4b9f      	ldr	r3, [pc, #636]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	4b9e      	ldr	r3, [pc, #632]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 80051a6:	49a0      	ldr	r1, [pc, #640]	@ (8005428 <HAL_RCC_OscConfig+0x338>)
 80051a8:	400a      	ands	r2, r1
 80051aa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d014      	beq.n	80051de <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b4:	f7fe fe6e 	bl	8003e94 <HAL_GetTick>
 80051b8:	0003      	movs	r3, r0
 80051ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051bc:	e008      	b.n	80051d0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051be:	f7fe fe69 	bl	8003e94 <HAL_GetTick>
 80051c2:	0002      	movs	r2, r0
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b64      	cmp	r3, #100	@ 0x64
 80051ca:	d901      	bls.n	80051d0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e2e9      	b.n	80057a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051d0:	4b93      	ldr	r3, [pc, #588]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	2380      	movs	r3, #128	@ 0x80
 80051d6:	029b      	lsls	r3, r3, #10
 80051d8:	4013      	ands	r3, r2
 80051da:	d0f0      	beq.n	80051be <HAL_RCC_OscConfig+0xce>
 80051dc:	e015      	b.n	800520a <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051de:	f7fe fe59 	bl	8003e94 <HAL_GetTick>
 80051e2:	0003      	movs	r3, r0
 80051e4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051e8:	f7fe fe54 	bl	8003e94 <HAL_GetTick>
 80051ec:	0002      	movs	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b64      	cmp	r3, #100	@ 0x64
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e2d4      	b.n	80057a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051fa:	4b89      	ldr	r3, [pc, #548]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	2380      	movs	r3, #128	@ 0x80
 8005200:	029b      	lsls	r3, r3, #10
 8005202:	4013      	ands	r3, r2
 8005204:	d1f0      	bne.n	80051e8 <HAL_RCC_OscConfig+0xf8>
 8005206:	e000      	b.n	800520a <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005208:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2202      	movs	r2, #2
 8005210:	4013      	ands	r3, r2
 8005212:	d100      	bne.n	8005216 <HAL_RCC_OscConfig+0x126>
 8005214:	e099      	b.n	800534a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005216:	4b82      	ldr	r3, [pc, #520]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	2238      	movs	r2, #56	@ 0x38
 800521c:	4013      	ands	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005220:	4b7f      	ldr	r3, [pc, #508]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	2203      	movs	r2, #3
 8005226:	4013      	ands	r3, r2
 8005228:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	2b10      	cmp	r3, #16
 800522e:	d102      	bne.n	8005236 <HAL_RCC_OscConfig+0x146>
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d002      	beq.n	800523c <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d135      	bne.n	80052a8 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800523c:	4b78      	ldr	r3, [pc, #480]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	2380      	movs	r3, #128	@ 0x80
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	4013      	ands	r3, r2
 8005246:	d005      	beq.n	8005254 <HAL_RCC_OscConfig+0x164>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e2a7      	b.n	80057a4 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005254:	4b72      	ldr	r3, [pc, #456]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	4a74      	ldr	r2, [pc, #464]	@ (800542c <HAL_RCC_OscConfig+0x33c>)
 800525a:	4013      	ands	r3, r2
 800525c:	0019      	movs	r1, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	021a      	lsls	r2, r3, #8
 8005264:	4b6e      	ldr	r3, [pc, #440]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 8005266:	430a      	orrs	r2, r1
 8005268:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d112      	bne.n	8005296 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005270:	4b6b      	ldr	r3, [pc, #428]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a6e      	ldr	r2, [pc, #440]	@ (8005430 <HAL_RCC_OscConfig+0x340>)
 8005276:	4013      	ands	r3, r2
 8005278:	0019      	movs	r1, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691a      	ldr	r2, [r3, #16]
 800527e:	4b68      	ldr	r3, [pc, #416]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 8005280:	430a      	orrs	r2, r1
 8005282:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005284:	4b66      	ldr	r3, [pc, #408]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	0adb      	lsrs	r3, r3, #11
 800528a:	2207      	movs	r2, #7
 800528c:	4013      	ands	r3, r2
 800528e:	4a69      	ldr	r2, [pc, #420]	@ (8005434 <HAL_RCC_OscConfig+0x344>)
 8005290:	40da      	lsrs	r2, r3
 8005292:	4b69      	ldr	r3, [pc, #420]	@ (8005438 <HAL_RCC_OscConfig+0x348>)
 8005294:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005296:	4b69      	ldr	r3, [pc, #420]	@ (800543c <HAL_RCC_OscConfig+0x34c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	0018      	movs	r0, r3
 800529c:	f7fe fd9e 	bl	8003ddc <HAL_InitTick>
 80052a0:	1e03      	subs	r3, r0, #0
 80052a2:	d051      	beq.n	8005348 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e27d      	b.n	80057a4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d030      	beq.n	8005312 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80052b0:	4b5b      	ldr	r3, [pc, #364]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a5e      	ldr	r2, [pc, #376]	@ (8005430 <HAL_RCC_OscConfig+0x340>)
 80052b6:	4013      	ands	r3, r2
 80052b8:	0019      	movs	r1, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691a      	ldr	r2, [r3, #16]
 80052be:	4b58      	ldr	r3, [pc, #352]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 80052c0:	430a      	orrs	r2, r1
 80052c2:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80052c4:	4b56      	ldr	r3, [pc, #344]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	4b55      	ldr	r3, [pc, #340]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 80052ca:	2180      	movs	r1, #128	@ 0x80
 80052cc:	0049      	lsls	r1, r1, #1
 80052ce:	430a      	orrs	r2, r1
 80052d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052d2:	f7fe fddf 	bl	8003e94 <HAL_GetTick>
 80052d6:	0003      	movs	r3, r0
 80052d8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052dc:	f7fe fdda 	bl	8003e94 <HAL_GetTick>
 80052e0:	0002      	movs	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e25a      	b.n	80057a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052ee:	4b4c      	ldr	r3, [pc, #304]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	2380      	movs	r3, #128	@ 0x80
 80052f4:	00db      	lsls	r3, r3, #3
 80052f6:	4013      	ands	r3, r2
 80052f8:	d0f0      	beq.n	80052dc <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052fa:	4b49      	ldr	r3, [pc, #292]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	4a4b      	ldr	r2, [pc, #300]	@ (800542c <HAL_RCC_OscConfig+0x33c>)
 8005300:	4013      	ands	r3, r2
 8005302:	0019      	movs	r1, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	021a      	lsls	r2, r3, #8
 800530a:	4b45      	ldr	r3, [pc, #276]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 800530c:	430a      	orrs	r2, r1
 800530e:	605a      	str	r2, [r3, #4]
 8005310:	e01b      	b.n	800534a <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005312:	4b43      	ldr	r3, [pc, #268]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4b42      	ldr	r3, [pc, #264]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 8005318:	4949      	ldr	r1, [pc, #292]	@ (8005440 <HAL_RCC_OscConfig+0x350>)
 800531a:	400a      	ands	r2, r1
 800531c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800531e:	f7fe fdb9 	bl	8003e94 <HAL_GetTick>
 8005322:	0003      	movs	r3, r0
 8005324:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005328:	f7fe fdb4 	bl	8003e94 <HAL_GetTick>
 800532c:	0002      	movs	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e234      	b.n	80057a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800533a:	4b39      	ldr	r3, [pc, #228]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	2380      	movs	r3, #128	@ 0x80
 8005340:	00db      	lsls	r3, r3, #3
 8005342:	4013      	ands	r3, r2
 8005344:	d1f0      	bne.n	8005328 <HAL_RCC_OscConfig+0x238>
 8005346:	e000      	b.n	800534a <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005348:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2208      	movs	r2, #8
 8005350:	4013      	ands	r3, r2
 8005352:	d047      	beq.n	80053e4 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005354:	4b32      	ldr	r3, [pc, #200]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	2238      	movs	r2, #56	@ 0x38
 800535a:	4013      	ands	r3, r2
 800535c:	2b18      	cmp	r3, #24
 800535e:	d10a      	bne.n	8005376 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005360:	4b2f      	ldr	r3, [pc, #188]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 8005362:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005364:	2202      	movs	r2, #2
 8005366:	4013      	ands	r3, r2
 8005368:	d03c      	beq.n	80053e4 <HAL_RCC_OscConfig+0x2f4>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d138      	bne.n	80053e4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e216      	b.n	80057a4 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d019      	beq.n	80053b2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800537e:	4b28      	ldr	r3, [pc, #160]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 8005380:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005382:	4b27      	ldr	r3, [pc, #156]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 8005384:	2101      	movs	r1, #1
 8005386:	430a      	orrs	r2, r1
 8005388:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538a:	f7fe fd83 	bl	8003e94 <HAL_GetTick>
 800538e:	0003      	movs	r3, r0
 8005390:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005392:	e008      	b.n	80053a6 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005394:	f7fe fd7e 	bl	8003e94 <HAL_GetTick>
 8005398:	0002      	movs	r2, r0
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e1fe      	b.n	80057a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 80053a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053aa:	2202      	movs	r2, #2
 80053ac:	4013      	ands	r3, r2
 80053ae:	d0f1      	beq.n	8005394 <HAL_RCC_OscConfig+0x2a4>
 80053b0:	e018      	b.n	80053e4 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80053b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 80053b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80053b6:	4b1a      	ldr	r3, [pc, #104]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 80053b8:	2101      	movs	r1, #1
 80053ba:	438a      	bics	r2, r1
 80053bc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053be:	f7fe fd69 	bl	8003e94 <HAL_GetTick>
 80053c2:	0003      	movs	r3, r0
 80053c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053c8:	f7fe fd64 	bl	8003e94 <HAL_GetTick>
 80053cc:	0002      	movs	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e1e4      	b.n	80057a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053da:	4b11      	ldr	r3, [pc, #68]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 80053dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053de:	2202      	movs	r2, #2
 80053e0:	4013      	ands	r3, r2
 80053e2:	d1f1      	bne.n	80053c8 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2204      	movs	r2, #4
 80053ea:	4013      	ands	r3, r2
 80053ec:	d100      	bne.n	80053f0 <HAL_RCC_OscConfig+0x300>
 80053ee:	e0c7      	b.n	8005580 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053f0:	231f      	movs	r3, #31
 80053f2:	18fb      	adds	r3, r7, r3
 80053f4:	2200      	movs	r2, #0
 80053f6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80053f8:	4b09      	ldr	r3, [pc, #36]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	2238      	movs	r2, #56	@ 0x38
 80053fe:	4013      	ands	r3, r2
 8005400:	2b20      	cmp	r3, #32
 8005402:	d11f      	bne.n	8005444 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005404:	4b06      	ldr	r3, [pc, #24]	@ (8005420 <HAL_RCC_OscConfig+0x330>)
 8005406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005408:	2202      	movs	r2, #2
 800540a:	4013      	ands	r3, r2
 800540c:	d100      	bne.n	8005410 <HAL_RCC_OscConfig+0x320>
 800540e:	e0b7      	b.n	8005580 <HAL_RCC_OscConfig+0x490>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d000      	beq.n	800541a <HAL_RCC_OscConfig+0x32a>
 8005418:	e0b2      	b.n	8005580 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e1c2      	b.n	80057a4 <HAL_RCC_OscConfig+0x6b4>
 800541e:	46c0      	nop			@ (mov r8, r8)
 8005420:	40021000 	.word	0x40021000
 8005424:	fffeffff 	.word	0xfffeffff
 8005428:	fffbffff 	.word	0xfffbffff
 800542c:	ffff80ff 	.word	0xffff80ff
 8005430:	ffffc7ff 	.word	0xffffc7ff
 8005434:	00f42400 	.word	0x00f42400
 8005438:	20000e84 	.word	0x20000e84
 800543c:	20000e88 	.word	0x20000e88
 8005440:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005444:	4bb5      	ldr	r3, [pc, #724]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 8005446:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005448:	2380      	movs	r3, #128	@ 0x80
 800544a:	055b      	lsls	r3, r3, #21
 800544c:	4013      	ands	r3, r2
 800544e:	d101      	bne.n	8005454 <HAL_RCC_OscConfig+0x364>
 8005450:	2301      	movs	r3, #1
 8005452:	e000      	b.n	8005456 <HAL_RCC_OscConfig+0x366>
 8005454:	2300      	movs	r3, #0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d011      	beq.n	800547e <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800545a:	4bb0      	ldr	r3, [pc, #704]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 800545c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800545e:	4baf      	ldr	r3, [pc, #700]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 8005460:	2180      	movs	r1, #128	@ 0x80
 8005462:	0549      	lsls	r1, r1, #21
 8005464:	430a      	orrs	r2, r1
 8005466:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005468:	4bac      	ldr	r3, [pc, #688]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 800546a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800546c:	2380      	movs	r3, #128	@ 0x80
 800546e:	055b      	lsls	r3, r3, #21
 8005470:	4013      	ands	r3, r2
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005476:	231f      	movs	r3, #31
 8005478:	18fb      	adds	r3, r7, r3
 800547a:	2201      	movs	r2, #1
 800547c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800547e:	4ba8      	ldr	r3, [pc, #672]	@ (8005720 <HAL_RCC_OscConfig+0x630>)
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	2380      	movs	r3, #128	@ 0x80
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	4013      	ands	r3, r2
 8005488:	d11a      	bne.n	80054c0 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800548a:	4ba5      	ldr	r3, [pc, #660]	@ (8005720 <HAL_RCC_OscConfig+0x630>)
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	4ba4      	ldr	r3, [pc, #656]	@ (8005720 <HAL_RCC_OscConfig+0x630>)
 8005490:	2180      	movs	r1, #128	@ 0x80
 8005492:	0049      	lsls	r1, r1, #1
 8005494:	430a      	orrs	r2, r1
 8005496:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005498:	f7fe fcfc 	bl	8003e94 <HAL_GetTick>
 800549c:	0003      	movs	r3, r0
 800549e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054a2:	f7fe fcf7 	bl	8003e94 <HAL_GetTick>
 80054a6:	0002      	movs	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e177      	b.n	80057a4 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054b4:	4b9a      	ldr	r3, [pc, #616]	@ (8005720 <HAL_RCC_OscConfig+0x630>)
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	2380      	movs	r3, #128	@ 0x80
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	4013      	ands	r3, r2
 80054be:	d0f0      	beq.n	80054a2 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d106      	bne.n	80054d6 <HAL_RCC_OscConfig+0x3e6>
 80054c8:	4b94      	ldr	r3, [pc, #592]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 80054ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80054cc:	4b93      	ldr	r3, [pc, #588]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 80054ce:	2101      	movs	r1, #1
 80054d0:	430a      	orrs	r2, r1
 80054d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80054d4:	e01c      	b.n	8005510 <HAL_RCC_OscConfig+0x420>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	2b05      	cmp	r3, #5
 80054dc:	d10c      	bne.n	80054f8 <HAL_RCC_OscConfig+0x408>
 80054de:	4b8f      	ldr	r3, [pc, #572]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 80054e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80054e2:	4b8e      	ldr	r3, [pc, #568]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 80054e4:	2104      	movs	r1, #4
 80054e6:	430a      	orrs	r2, r1
 80054e8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80054ea:	4b8c      	ldr	r3, [pc, #560]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 80054ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80054ee:	4b8b      	ldr	r3, [pc, #556]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 80054f0:	2101      	movs	r1, #1
 80054f2:	430a      	orrs	r2, r1
 80054f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80054f6:	e00b      	b.n	8005510 <HAL_RCC_OscConfig+0x420>
 80054f8:	4b88      	ldr	r3, [pc, #544]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 80054fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80054fc:	4b87      	ldr	r3, [pc, #540]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 80054fe:	2101      	movs	r1, #1
 8005500:	438a      	bics	r2, r1
 8005502:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005504:	4b85      	ldr	r3, [pc, #532]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 8005506:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005508:	4b84      	ldr	r3, [pc, #528]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 800550a:	2104      	movs	r1, #4
 800550c:	438a      	bics	r2, r1
 800550e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d014      	beq.n	8005542 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005518:	f7fe fcbc 	bl	8003e94 <HAL_GetTick>
 800551c:	0003      	movs	r3, r0
 800551e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005520:	e009      	b.n	8005536 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005522:	f7fe fcb7 	bl	8003e94 <HAL_GetTick>
 8005526:	0002      	movs	r2, r0
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	4a7d      	ldr	r2, [pc, #500]	@ (8005724 <HAL_RCC_OscConfig+0x634>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e136      	b.n	80057a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005536:	4b79      	ldr	r3, [pc, #484]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 8005538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800553a:	2202      	movs	r2, #2
 800553c:	4013      	ands	r3, r2
 800553e:	d0f0      	beq.n	8005522 <HAL_RCC_OscConfig+0x432>
 8005540:	e013      	b.n	800556a <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005542:	f7fe fca7 	bl	8003e94 <HAL_GetTick>
 8005546:	0003      	movs	r3, r0
 8005548:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800554a:	e009      	b.n	8005560 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800554c:	f7fe fca2 	bl	8003e94 <HAL_GetTick>
 8005550:	0002      	movs	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	4a73      	ldr	r2, [pc, #460]	@ (8005724 <HAL_RCC_OscConfig+0x634>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d901      	bls.n	8005560 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e121      	b.n	80057a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005560:	4b6e      	ldr	r3, [pc, #440]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 8005562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005564:	2202      	movs	r2, #2
 8005566:	4013      	ands	r3, r2
 8005568:	d1f0      	bne.n	800554c <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800556a:	231f      	movs	r3, #31
 800556c:	18fb      	adds	r3, r7, r3
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d105      	bne.n	8005580 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005574:	4b69      	ldr	r3, [pc, #420]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 8005576:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005578:	4b68      	ldr	r3, [pc, #416]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 800557a:	496b      	ldr	r1, [pc, #428]	@ (8005728 <HAL_RCC_OscConfig+0x638>)
 800557c:	400a      	ands	r2, r1
 800557e:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2220      	movs	r2, #32
 8005586:	4013      	ands	r3, r2
 8005588:	d039      	beq.n	80055fe <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d01b      	beq.n	80055ca <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005592:	4b62      	ldr	r3, [pc, #392]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	4b61      	ldr	r3, [pc, #388]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 8005598:	2180      	movs	r1, #128	@ 0x80
 800559a:	03c9      	lsls	r1, r1, #15
 800559c:	430a      	orrs	r2, r1
 800559e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a0:	f7fe fc78 	bl	8003e94 <HAL_GetTick>
 80055a4:	0003      	movs	r3, r0
 80055a6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80055a8:	e008      	b.n	80055bc <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055aa:	f7fe fc73 	bl	8003e94 <HAL_GetTick>
 80055ae:	0002      	movs	r2, r0
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d901      	bls.n	80055bc <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e0f3      	b.n	80057a4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80055bc:	4b57      	ldr	r3, [pc, #348]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	2380      	movs	r3, #128	@ 0x80
 80055c2:	041b      	lsls	r3, r3, #16
 80055c4:	4013      	ands	r3, r2
 80055c6:	d0f0      	beq.n	80055aa <HAL_RCC_OscConfig+0x4ba>
 80055c8:	e019      	b.n	80055fe <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055ca:	4b54      	ldr	r3, [pc, #336]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	4b53      	ldr	r3, [pc, #332]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 80055d0:	4956      	ldr	r1, [pc, #344]	@ (800572c <HAL_RCC_OscConfig+0x63c>)
 80055d2:	400a      	ands	r2, r1
 80055d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d6:	f7fe fc5d 	bl	8003e94 <HAL_GetTick>
 80055da:	0003      	movs	r3, r0
 80055dc:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055e0:	f7fe fc58 	bl	8003e94 <HAL_GetTick>
 80055e4:	0002      	movs	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e0d8      	b.n	80057a4 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80055f2:	4b4a      	ldr	r3, [pc, #296]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	2380      	movs	r3, #128	@ 0x80
 80055f8:	041b      	lsls	r3, r3, #16
 80055fa:	4013      	ands	r3, r2
 80055fc:	d1f0      	bne.n	80055e0 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d100      	bne.n	8005608 <HAL_RCC_OscConfig+0x518>
 8005606:	e0cc      	b.n	80057a2 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005608:	4b44      	ldr	r3, [pc, #272]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	2238      	movs	r2, #56	@ 0x38
 800560e:	4013      	ands	r3, r2
 8005610:	2b10      	cmp	r3, #16
 8005612:	d100      	bne.n	8005616 <HAL_RCC_OscConfig+0x526>
 8005614:	e07b      	b.n	800570e <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	2b02      	cmp	r3, #2
 800561c:	d156      	bne.n	80056cc <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800561e:	4b3f      	ldr	r3, [pc, #252]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	4b3e      	ldr	r3, [pc, #248]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 8005624:	4942      	ldr	r1, [pc, #264]	@ (8005730 <HAL_RCC_OscConfig+0x640>)
 8005626:	400a      	ands	r2, r1
 8005628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562a:	f7fe fc33 	bl	8003e94 <HAL_GetTick>
 800562e:	0003      	movs	r3, r0
 8005630:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005634:	f7fe fc2e 	bl	8003e94 <HAL_GetTick>
 8005638:	0002      	movs	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e0ae      	b.n	80057a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005646:	4b35      	ldr	r3, [pc, #212]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	2380      	movs	r3, #128	@ 0x80
 800564c:	049b      	lsls	r3, r3, #18
 800564e:	4013      	ands	r3, r2
 8005650:	d1f0      	bne.n	8005634 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005652:	4b32      	ldr	r3, [pc, #200]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	4a37      	ldr	r2, [pc, #220]	@ (8005734 <HAL_RCC_OscConfig+0x644>)
 8005658:	4013      	ands	r3, r2
 800565a:	0019      	movs	r1, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005664:	431a      	orrs	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566a:	021b      	lsls	r3, r3, #8
 800566c:	431a      	orrs	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005672:	431a      	orrs	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005678:	431a      	orrs	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567e:	431a      	orrs	r2, r3
 8005680:	4b26      	ldr	r3, [pc, #152]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 8005682:	430a      	orrs	r2, r1
 8005684:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005686:	4b25      	ldr	r3, [pc, #148]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	4b24      	ldr	r3, [pc, #144]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 800568c:	2180      	movs	r1, #128	@ 0x80
 800568e:	0449      	lsls	r1, r1, #17
 8005690:	430a      	orrs	r2, r1
 8005692:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005694:	4b21      	ldr	r3, [pc, #132]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 8005696:	68da      	ldr	r2, [r3, #12]
 8005698:	4b20      	ldr	r3, [pc, #128]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 800569a:	2180      	movs	r1, #128	@ 0x80
 800569c:	0549      	lsls	r1, r1, #21
 800569e:	430a      	orrs	r2, r1
 80056a0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a2:	f7fe fbf7 	bl	8003e94 <HAL_GetTick>
 80056a6:	0003      	movs	r3, r0
 80056a8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ac:	f7fe fbf2 	bl	8003e94 <HAL_GetTick>
 80056b0:	0002      	movs	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e072      	b.n	80057a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056be:	4b17      	ldr	r3, [pc, #92]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	2380      	movs	r3, #128	@ 0x80
 80056c4:	049b      	lsls	r3, r3, #18
 80056c6:	4013      	ands	r3, r2
 80056c8:	d0f0      	beq.n	80056ac <HAL_RCC_OscConfig+0x5bc>
 80056ca:	e06a      	b.n	80057a2 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056cc:	4b13      	ldr	r3, [pc, #76]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	4b12      	ldr	r3, [pc, #72]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 80056d2:	4917      	ldr	r1, [pc, #92]	@ (8005730 <HAL_RCC_OscConfig+0x640>)
 80056d4:	400a      	ands	r2, r1
 80056d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056d8:	f7fe fbdc 	bl	8003e94 <HAL_GetTick>
 80056dc:	0003      	movs	r3, r0
 80056de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056e0:	e008      	b.n	80056f4 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056e2:	f7fe fbd7 	bl	8003e94 <HAL_GetTick>
 80056e6:	0002      	movs	r2, r0
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d901      	bls.n	80056f4 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e057      	b.n	80057a4 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056f4:	4b09      	ldr	r3, [pc, #36]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	2380      	movs	r3, #128	@ 0x80
 80056fa:	049b      	lsls	r3, r3, #18
 80056fc:	4013      	ands	r3, r2
 80056fe:	d1f0      	bne.n	80056e2 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005700:	4b06      	ldr	r3, [pc, #24]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	4b05      	ldr	r3, [pc, #20]	@ (800571c <HAL_RCC_OscConfig+0x62c>)
 8005706:	490c      	ldr	r1, [pc, #48]	@ (8005738 <HAL_RCC_OscConfig+0x648>)
 8005708:	400a      	ands	r2, r1
 800570a:	60da      	str	r2, [r3, #12]
 800570c:	e049      	b.n	80057a2 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d112      	bne.n	800573c <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e044      	b.n	80057a4 <HAL_RCC_OscConfig+0x6b4>
 800571a:	46c0      	nop			@ (mov r8, r8)
 800571c:	40021000 	.word	0x40021000
 8005720:	40007000 	.word	0x40007000
 8005724:	00001388 	.word	0x00001388
 8005728:	efffffff 	.word	0xefffffff
 800572c:	ffbfffff 	.word	0xffbfffff
 8005730:	feffffff 	.word	0xfeffffff
 8005734:	11c1808c 	.word	0x11c1808c
 8005738:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800573c:	4b1b      	ldr	r3, [pc, #108]	@ (80057ac <HAL_RCC_OscConfig+0x6bc>)
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2203      	movs	r2, #3
 8005746:	401a      	ands	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574c:	429a      	cmp	r2, r3
 800574e:	d126      	bne.n	800579e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	2270      	movs	r2, #112	@ 0x70
 8005754:	401a      	ands	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800575a:	429a      	cmp	r2, r3
 800575c:	d11f      	bne.n	800579e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	23fe      	movs	r3, #254	@ 0xfe
 8005762:	01db      	lsls	r3, r3, #7
 8005764:	401a      	ands	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800576c:	429a      	cmp	r2, r3
 800576e:	d116      	bne.n	800579e <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	23f8      	movs	r3, #248	@ 0xf8
 8005774:	039b      	lsls	r3, r3, #14
 8005776:	401a      	ands	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800577c:	429a      	cmp	r2, r3
 800577e:	d10e      	bne.n	800579e <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	23e0      	movs	r3, #224	@ 0xe0
 8005784:	051b      	lsls	r3, r3, #20
 8005786:	401a      	ands	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800578c:	429a      	cmp	r2, r3
 800578e:	d106      	bne.n	800579e <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	0f5b      	lsrs	r3, r3, #29
 8005794:	075a      	lsls	r2, r3, #29
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800579a:	429a      	cmp	r2, r3
 800579c:	d001      	beq.n	80057a2 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e000      	b.n	80057a4 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	0018      	movs	r0, r3
 80057a6:	46bd      	mov	sp, r7
 80057a8:	b008      	add	sp, #32
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	40021000 	.word	0x40021000

080057b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e0e9      	b.n	8005998 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057c4:	4b76      	ldr	r3, [pc, #472]	@ (80059a0 <HAL_RCC_ClockConfig+0x1f0>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2207      	movs	r2, #7
 80057ca:	4013      	ands	r3, r2
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d91e      	bls.n	8005810 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057d2:	4b73      	ldr	r3, [pc, #460]	@ (80059a0 <HAL_RCC_ClockConfig+0x1f0>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2207      	movs	r2, #7
 80057d8:	4393      	bics	r3, r2
 80057da:	0019      	movs	r1, r3
 80057dc:	4b70      	ldr	r3, [pc, #448]	@ (80059a0 <HAL_RCC_ClockConfig+0x1f0>)
 80057de:	683a      	ldr	r2, [r7, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057e4:	f7fe fb56 	bl	8003e94 <HAL_GetTick>
 80057e8:	0003      	movs	r3, r0
 80057ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80057ec:	e009      	b.n	8005802 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057ee:	f7fe fb51 	bl	8003e94 <HAL_GetTick>
 80057f2:	0002      	movs	r2, r0
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	4a6a      	ldr	r2, [pc, #424]	@ (80059a4 <HAL_RCC_ClockConfig+0x1f4>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e0ca      	b.n	8005998 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005802:	4b67      	ldr	r3, [pc, #412]	@ (80059a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2207      	movs	r2, #7
 8005808:	4013      	ands	r3, r2
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d1ee      	bne.n	80057ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2202      	movs	r2, #2
 8005816:	4013      	ands	r3, r2
 8005818:	d015      	beq.n	8005846 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2204      	movs	r2, #4
 8005820:	4013      	ands	r3, r2
 8005822:	d006      	beq.n	8005832 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005824:	4b60      	ldr	r3, [pc, #384]	@ (80059a8 <HAL_RCC_ClockConfig+0x1f8>)
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	4b5f      	ldr	r3, [pc, #380]	@ (80059a8 <HAL_RCC_ClockConfig+0x1f8>)
 800582a:	21e0      	movs	r1, #224	@ 0xe0
 800582c:	01c9      	lsls	r1, r1, #7
 800582e:	430a      	orrs	r2, r1
 8005830:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005832:	4b5d      	ldr	r3, [pc, #372]	@ (80059a8 <HAL_RCC_ClockConfig+0x1f8>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	4a5d      	ldr	r2, [pc, #372]	@ (80059ac <HAL_RCC_ClockConfig+0x1fc>)
 8005838:	4013      	ands	r3, r2
 800583a:	0019      	movs	r1, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	4b59      	ldr	r3, [pc, #356]	@ (80059a8 <HAL_RCC_ClockConfig+0x1f8>)
 8005842:	430a      	orrs	r2, r1
 8005844:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2201      	movs	r2, #1
 800584c:	4013      	ands	r3, r2
 800584e:	d057      	beq.n	8005900 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d107      	bne.n	8005868 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005858:	4b53      	ldr	r3, [pc, #332]	@ (80059a8 <HAL_RCC_ClockConfig+0x1f8>)
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	2380      	movs	r3, #128	@ 0x80
 800585e:	029b      	lsls	r3, r3, #10
 8005860:	4013      	ands	r3, r2
 8005862:	d12b      	bne.n	80058bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e097      	b.n	8005998 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	2b02      	cmp	r3, #2
 800586e:	d107      	bne.n	8005880 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005870:	4b4d      	ldr	r3, [pc, #308]	@ (80059a8 <HAL_RCC_ClockConfig+0x1f8>)
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	2380      	movs	r3, #128	@ 0x80
 8005876:	049b      	lsls	r3, r3, #18
 8005878:	4013      	ands	r3, r2
 800587a:	d11f      	bne.n	80058bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e08b      	b.n	8005998 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d107      	bne.n	8005898 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005888:	4b47      	ldr	r3, [pc, #284]	@ (80059a8 <HAL_RCC_ClockConfig+0x1f8>)
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	2380      	movs	r3, #128	@ 0x80
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	4013      	ands	r3, r2
 8005892:	d113      	bne.n	80058bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e07f      	b.n	8005998 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	2b03      	cmp	r3, #3
 800589e:	d106      	bne.n	80058ae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058a0:	4b41      	ldr	r3, [pc, #260]	@ (80059a8 <HAL_RCC_ClockConfig+0x1f8>)
 80058a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058a4:	2202      	movs	r2, #2
 80058a6:	4013      	ands	r3, r2
 80058a8:	d108      	bne.n	80058bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e074      	b.n	8005998 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058ae:	4b3e      	ldr	r3, [pc, #248]	@ (80059a8 <HAL_RCC_ClockConfig+0x1f8>)
 80058b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b2:	2202      	movs	r2, #2
 80058b4:	4013      	ands	r3, r2
 80058b6:	d101      	bne.n	80058bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e06d      	b.n	8005998 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058bc:	4b3a      	ldr	r3, [pc, #232]	@ (80059a8 <HAL_RCC_ClockConfig+0x1f8>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	2207      	movs	r2, #7
 80058c2:	4393      	bics	r3, r2
 80058c4:	0019      	movs	r1, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	4b37      	ldr	r3, [pc, #220]	@ (80059a8 <HAL_RCC_ClockConfig+0x1f8>)
 80058cc:	430a      	orrs	r2, r1
 80058ce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058d0:	f7fe fae0 	bl	8003e94 <HAL_GetTick>
 80058d4:	0003      	movs	r3, r0
 80058d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058d8:	e009      	b.n	80058ee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058da:	f7fe fadb 	bl	8003e94 <HAL_GetTick>
 80058de:	0002      	movs	r2, r0
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	4a2f      	ldr	r2, [pc, #188]	@ (80059a4 <HAL_RCC_ClockConfig+0x1f4>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e054      	b.n	8005998 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ee:	4b2e      	ldr	r3, [pc, #184]	@ (80059a8 <HAL_RCC_ClockConfig+0x1f8>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	2238      	movs	r2, #56	@ 0x38
 80058f4:	401a      	ands	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d1ec      	bne.n	80058da <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005900:	4b27      	ldr	r3, [pc, #156]	@ (80059a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2207      	movs	r2, #7
 8005906:	4013      	ands	r3, r2
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	429a      	cmp	r2, r3
 800590c:	d21e      	bcs.n	800594c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800590e:	4b24      	ldr	r3, [pc, #144]	@ (80059a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2207      	movs	r2, #7
 8005914:	4393      	bics	r3, r2
 8005916:	0019      	movs	r1, r3
 8005918:	4b21      	ldr	r3, [pc, #132]	@ (80059a0 <HAL_RCC_ClockConfig+0x1f0>)
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	430a      	orrs	r2, r1
 800591e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005920:	f7fe fab8 	bl	8003e94 <HAL_GetTick>
 8005924:	0003      	movs	r3, r0
 8005926:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005928:	e009      	b.n	800593e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800592a:	f7fe fab3 	bl	8003e94 <HAL_GetTick>
 800592e:	0002      	movs	r2, r0
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	4a1b      	ldr	r2, [pc, #108]	@ (80059a4 <HAL_RCC_ClockConfig+0x1f4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d901      	bls.n	800593e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e02c      	b.n	8005998 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800593e:	4b18      	ldr	r3, [pc, #96]	@ (80059a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2207      	movs	r2, #7
 8005944:	4013      	ands	r3, r2
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	429a      	cmp	r2, r3
 800594a:	d1ee      	bne.n	800592a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2204      	movs	r2, #4
 8005952:	4013      	ands	r3, r2
 8005954:	d009      	beq.n	800596a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005956:	4b14      	ldr	r3, [pc, #80]	@ (80059a8 <HAL_RCC_ClockConfig+0x1f8>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	4a15      	ldr	r2, [pc, #84]	@ (80059b0 <HAL_RCC_ClockConfig+0x200>)
 800595c:	4013      	ands	r3, r2
 800595e:	0019      	movs	r1, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	4b10      	ldr	r3, [pc, #64]	@ (80059a8 <HAL_RCC_ClockConfig+0x1f8>)
 8005966:	430a      	orrs	r2, r1
 8005968:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800596a:	f000 f829 	bl	80059c0 <HAL_RCC_GetSysClockFreq>
 800596e:	0001      	movs	r1, r0
 8005970:	4b0d      	ldr	r3, [pc, #52]	@ (80059a8 <HAL_RCC_ClockConfig+0x1f8>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	0a1b      	lsrs	r3, r3, #8
 8005976:	220f      	movs	r2, #15
 8005978:	401a      	ands	r2, r3
 800597a:	4b0e      	ldr	r3, [pc, #56]	@ (80059b4 <HAL_RCC_ClockConfig+0x204>)
 800597c:	0092      	lsls	r2, r2, #2
 800597e:	58d3      	ldr	r3, [r2, r3]
 8005980:	221f      	movs	r2, #31
 8005982:	4013      	ands	r3, r2
 8005984:	000a      	movs	r2, r1
 8005986:	40da      	lsrs	r2, r3
 8005988:	4b0b      	ldr	r3, [pc, #44]	@ (80059b8 <HAL_RCC_ClockConfig+0x208>)
 800598a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800598c:	4b0b      	ldr	r3, [pc, #44]	@ (80059bc <HAL_RCC_ClockConfig+0x20c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	0018      	movs	r0, r3
 8005992:	f7fe fa23 	bl	8003ddc <HAL_InitTick>
 8005996:	0003      	movs	r3, r0
}
 8005998:	0018      	movs	r0, r3
 800599a:	46bd      	mov	sp, r7
 800599c:	b004      	add	sp, #16
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	40022000 	.word	0x40022000
 80059a4:	00001388 	.word	0x00001388
 80059a8:	40021000 	.word	0x40021000
 80059ac:	fffff0ff 	.word	0xfffff0ff
 80059b0:	ffff8fff 	.word	0xffff8fff
 80059b4:	08009cb4 	.word	0x08009cb4
 80059b8:	20000e84 	.word	0x20000e84
 80059bc:	20000e88 	.word	0x20000e88

080059c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059c6:	4b3c      	ldr	r3, [pc, #240]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2238      	movs	r2, #56	@ 0x38
 80059cc:	4013      	ands	r3, r2
 80059ce:	d10f      	bne.n	80059f0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80059d0:	4b39      	ldr	r3, [pc, #228]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	0adb      	lsrs	r3, r3, #11
 80059d6:	2207      	movs	r2, #7
 80059d8:	4013      	ands	r3, r2
 80059da:	2201      	movs	r2, #1
 80059dc:	409a      	lsls	r2, r3
 80059de:	0013      	movs	r3, r2
 80059e0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80059e2:	6839      	ldr	r1, [r7, #0]
 80059e4:	4835      	ldr	r0, [pc, #212]	@ (8005abc <HAL_RCC_GetSysClockFreq+0xfc>)
 80059e6:	f7fa fb9f 	bl	8000128 <__udivsi3>
 80059ea:	0003      	movs	r3, r0
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	e05d      	b.n	8005aac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80059f0:	4b31      	ldr	r3, [pc, #196]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	2238      	movs	r2, #56	@ 0x38
 80059f6:	4013      	ands	r3, r2
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d102      	bne.n	8005a02 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059fc:	4b30      	ldr	r3, [pc, #192]	@ (8005ac0 <HAL_RCC_GetSysClockFreq+0x100>)
 80059fe:	613b      	str	r3, [r7, #16]
 8005a00:	e054      	b.n	8005aac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a02:	4b2d      	ldr	r3, [pc, #180]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	2238      	movs	r2, #56	@ 0x38
 8005a08:	4013      	ands	r3, r2
 8005a0a:	2b10      	cmp	r3, #16
 8005a0c:	d138      	bne.n	8005a80 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	2203      	movs	r2, #3
 8005a14:	4013      	ands	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a18:	4b27      	ldr	r3, [pc, #156]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	091b      	lsrs	r3, r3, #4
 8005a1e:	2207      	movs	r2, #7
 8005a20:	4013      	ands	r3, r2
 8005a22:	3301      	adds	r3, #1
 8005a24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b03      	cmp	r3, #3
 8005a2a:	d10d      	bne.n	8005a48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	4824      	ldr	r0, [pc, #144]	@ (8005ac0 <HAL_RCC_GetSysClockFreq+0x100>)
 8005a30:	f7fa fb7a 	bl	8000128 <__udivsi3>
 8005a34:	0003      	movs	r3, r0
 8005a36:	0019      	movs	r1, r3
 8005a38:	4b1f      	ldr	r3, [pc, #124]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	0a1b      	lsrs	r3, r3, #8
 8005a3e:	227f      	movs	r2, #127	@ 0x7f
 8005a40:	4013      	ands	r3, r2
 8005a42:	434b      	muls	r3, r1
 8005a44:	617b      	str	r3, [r7, #20]
        break;
 8005a46:	e00d      	b.n	8005a64 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005a48:	68b9      	ldr	r1, [r7, #8]
 8005a4a:	481c      	ldr	r0, [pc, #112]	@ (8005abc <HAL_RCC_GetSysClockFreq+0xfc>)
 8005a4c:	f7fa fb6c 	bl	8000128 <__udivsi3>
 8005a50:	0003      	movs	r3, r0
 8005a52:	0019      	movs	r1, r3
 8005a54:	4b18      	ldr	r3, [pc, #96]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	0a1b      	lsrs	r3, r3, #8
 8005a5a:	227f      	movs	r2, #127	@ 0x7f
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	434b      	muls	r3, r1
 8005a60:	617b      	str	r3, [r7, #20]
        break;
 8005a62:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005a64:	4b14      	ldr	r3, [pc, #80]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	0f5b      	lsrs	r3, r3, #29
 8005a6a:	2207      	movs	r2, #7
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	3301      	adds	r3, #1
 8005a70:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005a72:	6879      	ldr	r1, [r7, #4]
 8005a74:	6978      	ldr	r0, [r7, #20]
 8005a76:	f7fa fb57 	bl	8000128 <__udivsi3>
 8005a7a:	0003      	movs	r3, r0
 8005a7c:	613b      	str	r3, [r7, #16]
 8005a7e:	e015      	b.n	8005aac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005a80:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	2238      	movs	r2, #56	@ 0x38
 8005a86:	4013      	ands	r3, r2
 8005a88:	2b20      	cmp	r3, #32
 8005a8a:	d103      	bne.n	8005a94 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005a8c:	2380      	movs	r3, #128	@ 0x80
 8005a8e:	021b      	lsls	r3, r3, #8
 8005a90:	613b      	str	r3, [r7, #16]
 8005a92:	e00b      	b.n	8005aac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005a94:	4b08      	ldr	r3, [pc, #32]	@ (8005ab8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	2238      	movs	r2, #56	@ 0x38
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	2b18      	cmp	r3, #24
 8005a9e:	d103      	bne.n	8005aa8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005aa0:	23fa      	movs	r3, #250	@ 0xfa
 8005aa2:	01db      	lsls	r3, r3, #7
 8005aa4:	613b      	str	r3, [r7, #16]
 8005aa6:	e001      	b.n	8005aac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005aac:	693b      	ldr	r3, [r7, #16]
}
 8005aae:	0018      	movs	r0, r3
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	b006      	add	sp, #24
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	46c0      	nop			@ (mov r8, r8)
 8005ab8:	40021000 	.word	0x40021000
 8005abc:	00f42400 	.word	0x00f42400
 8005ac0:	007a1200 	.word	0x007a1200

08005ac4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ac8:	4b02      	ldr	r3, [pc, #8]	@ (8005ad4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005aca:	681b      	ldr	r3, [r3, #0]
}
 8005acc:	0018      	movs	r0, r3
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	46c0      	nop			@ (mov r8, r8)
 8005ad4:	20000e84 	.word	0x20000e84

08005ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ad8:	b5b0      	push	{r4, r5, r7, lr}
 8005ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005adc:	f7ff fff2 	bl	8005ac4 <HAL_RCC_GetHCLKFreq>
 8005ae0:	0004      	movs	r4, r0
 8005ae2:	f7ff faf9 	bl	80050d8 <LL_RCC_GetAPB1Prescaler>
 8005ae6:	0003      	movs	r3, r0
 8005ae8:	0b1a      	lsrs	r2, r3, #12
 8005aea:	4b05      	ldr	r3, [pc, #20]	@ (8005b00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005aec:	0092      	lsls	r2, r2, #2
 8005aee:	58d3      	ldr	r3, [r2, r3]
 8005af0:	221f      	movs	r2, #31
 8005af2:	4013      	ands	r3, r2
 8005af4:	40dc      	lsrs	r4, r3
 8005af6:	0023      	movs	r3, r4
}
 8005af8:	0018      	movs	r0, r3
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bdb0      	pop	{r4, r5, r7, pc}
 8005afe:	46c0      	nop			@ (mov r8, r8)
 8005b00:	08009cf4 	.word	0x08009cf4

08005b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005b0c:	2313      	movs	r3, #19
 8005b0e:	18fb      	adds	r3, r7, r3
 8005b10:	2200      	movs	r2, #0
 8005b12:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b14:	2312      	movs	r3, #18
 8005b16:	18fb      	adds	r3, r7, r3
 8005b18:	2200      	movs	r2, #0
 8005b1a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	2380      	movs	r3, #128	@ 0x80
 8005b22:	029b      	lsls	r3, r3, #10
 8005b24:	4013      	ands	r3, r2
 8005b26:	d100      	bne.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005b28:	e0ad      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b2a:	2011      	movs	r0, #17
 8005b2c:	183b      	adds	r3, r7, r0
 8005b2e:	2200      	movs	r2, #0
 8005b30:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b32:	4b47      	ldr	r3, [pc, #284]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005b34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b36:	2380      	movs	r3, #128	@ 0x80
 8005b38:	055b      	lsls	r3, r3, #21
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	d110      	bne.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b3e:	4b44      	ldr	r3, [pc, #272]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005b40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b42:	4b43      	ldr	r3, [pc, #268]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005b44:	2180      	movs	r1, #128	@ 0x80
 8005b46:	0549      	lsls	r1, r1, #21
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005b4c:	4b40      	ldr	r3, [pc, #256]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005b4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b50:	2380      	movs	r3, #128	@ 0x80
 8005b52:	055b      	lsls	r3, r3, #21
 8005b54:	4013      	ands	r3, r2
 8005b56:	60bb      	str	r3, [r7, #8]
 8005b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b5a:	183b      	adds	r3, r7, r0
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b60:	4b3c      	ldr	r3, [pc, #240]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	4b3b      	ldr	r3, [pc, #236]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005b66:	2180      	movs	r1, #128	@ 0x80
 8005b68:	0049      	lsls	r1, r1, #1
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b6e:	f7fe f991 	bl	8003e94 <HAL_GetTick>
 8005b72:	0003      	movs	r3, r0
 8005b74:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b76:	e00b      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b78:	f7fe f98c 	bl	8003e94 <HAL_GetTick>
 8005b7c:	0002      	movs	r2, r0
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d904      	bls.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005b86:	2313      	movs	r3, #19
 8005b88:	18fb      	adds	r3, r7, r3
 8005b8a:	2203      	movs	r2, #3
 8005b8c:	701a      	strb	r2, [r3, #0]
        break;
 8005b8e:	e005      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b90:	4b30      	ldr	r3, [pc, #192]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	2380      	movs	r3, #128	@ 0x80
 8005b96:	005b      	lsls	r3, r3, #1
 8005b98:	4013      	ands	r3, r2
 8005b9a:	d0ed      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005b9c:	2313      	movs	r3, #19
 8005b9e:	18fb      	adds	r3, r7, r3
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d15e      	bne.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ba6:	4b2a      	ldr	r3, [pc, #168]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005ba8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005baa:	23c0      	movs	r3, #192	@ 0xc0
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4013      	ands	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d019      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d014      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005bc2:	4b23      	ldr	r3, [pc, #140]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bc6:	4a24      	ldr	r2, [pc, #144]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005bc8:	4013      	ands	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bcc:	4b20      	ldr	r3, [pc, #128]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005bce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005bd2:	2180      	movs	r1, #128	@ 0x80
 8005bd4:	0249      	lsls	r1, r1, #9
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bda:	4b1d      	ldr	r3, [pc, #116]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005bdc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005bde:	4b1c      	ldr	r3, [pc, #112]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005be0:	491e      	ldr	r1, [pc, #120]	@ (8005c5c <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8005be2:	400a      	ands	r2, r1
 8005be4:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005be6:	4b1a      	ldr	r3, [pc, #104]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	d016      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf4:	f7fe f94e 	bl	8003e94 <HAL_GetTick>
 8005bf8:	0003      	movs	r3, r0
 8005bfa:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bfc:	e00c      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bfe:	f7fe f949 	bl	8003e94 <HAL_GetTick>
 8005c02:	0002      	movs	r2, r0
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	4a15      	ldr	r2, [pc, #84]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d904      	bls.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005c0e:	2313      	movs	r3, #19
 8005c10:	18fb      	adds	r3, r7, r3
 8005c12:	2203      	movs	r2, #3
 8005c14:	701a      	strb	r2, [r3, #0]
            break;
 8005c16:	e004      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c18:	4b0d      	ldr	r3, [pc, #52]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	4013      	ands	r3, r2
 8005c20:	d0ed      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005c22:	2313      	movs	r3, #19
 8005c24:	18fb      	adds	r3, r7, r3
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10a      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c2c:	4b08      	ldr	r3, [pc, #32]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c30:	4a09      	ldr	r2, [pc, #36]	@ (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005c32:	4013      	ands	r3, r2
 8005c34:	0019      	movs	r1, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c3a:	4b05      	ldr	r3, [pc, #20]	@ (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c40:	e016      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c42:	2312      	movs	r3, #18
 8005c44:	18fb      	adds	r3, r7, r3
 8005c46:	2213      	movs	r2, #19
 8005c48:	18ba      	adds	r2, r7, r2
 8005c4a:	7812      	ldrb	r2, [r2, #0]
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	e00f      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005c50:	40021000 	.word	0x40021000
 8005c54:	40007000 	.word	0x40007000
 8005c58:	fffffcff 	.word	0xfffffcff
 8005c5c:	fffeffff 	.word	0xfffeffff
 8005c60:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c64:	2312      	movs	r3, #18
 8005c66:	18fb      	adds	r3, r7, r3
 8005c68:	2213      	movs	r2, #19
 8005c6a:	18ba      	adds	r2, r7, r2
 8005c6c:	7812      	ldrb	r2, [r2, #0]
 8005c6e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c70:	2311      	movs	r3, #17
 8005c72:	18fb      	adds	r3, r7, r3
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d105      	bne.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c7a:	4bb6      	ldr	r3, [pc, #728]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c7e:	4bb5      	ldr	r3, [pc, #724]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c80:	49b5      	ldr	r1, [pc, #724]	@ (8005f58 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8005c82:	400a      	ands	r2, r1
 8005c84:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	d009      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c90:	4bb0      	ldr	r3, [pc, #704]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c94:	2203      	movs	r2, #3
 8005c96:	4393      	bics	r3, r2
 8005c98:	0019      	movs	r1, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	4bad      	ldr	r3, [pc, #692]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2202      	movs	r2, #2
 8005caa:	4013      	ands	r3, r2
 8005cac:	d009      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cae:	4ba9      	ldr	r3, [pc, #676]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb2:	220c      	movs	r2, #12
 8005cb4:	4393      	bics	r3, r2
 8005cb6:	0019      	movs	r1, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	4ba5      	ldr	r3, [pc, #660]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2204      	movs	r2, #4
 8005cc8:	4013      	ands	r3, r2
 8005cca:	d009      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ccc:	4ba1      	ldr	r3, [pc, #644]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cd0:	2230      	movs	r2, #48	@ 0x30
 8005cd2:	4393      	bics	r3, r2
 8005cd4:	0019      	movs	r1, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68da      	ldr	r2, [r3, #12]
 8005cda:	4b9e      	ldr	r3, [pc, #632]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2210      	movs	r2, #16
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	d009      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cea:	4b9a      	ldr	r3, [pc, #616]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cee:	4a9b      	ldr	r2, [pc, #620]	@ (8005f5c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	0019      	movs	r1, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691a      	ldr	r2, [r3, #16]
 8005cf8:	4b96      	ldr	r3, [pc, #600]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	2380      	movs	r3, #128	@ 0x80
 8005d04:	015b      	lsls	r3, r3, #5
 8005d06:	4013      	ands	r3, r2
 8005d08:	d009      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8005d0a:	4b92      	ldr	r3, [pc, #584]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d0e:	4a94      	ldr	r2, [pc, #592]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	0019      	movs	r1, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	695a      	ldr	r2, [r3, #20]
 8005d18:	4b8e      	ldr	r3, [pc, #568]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	2380      	movs	r3, #128	@ 0x80
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4013      	ands	r3, r2
 8005d28:	d009      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d2a:	4b8a      	ldr	r3, [pc, #552]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d2e:	4a8d      	ldr	r2, [pc, #564]	@ (8005f64 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005d30:	4013      	ands	r3, r2
 8005d32:	0019      	movs	r1, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d38:	4b86      	ldr	r3, [pc, #536]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	2380      	movs	r3, #128	@ 0x80
 8005d44:	00db      	lsls	r3, r3, #3
 8005d46:	4013      	ands	r3, r2
 8005d48:	d009      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d4a:	4b82      	ldr	r3, [pc, #520]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d4e:	4a86      	ldr	r2, [pc, #536]	@ (8005f68 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8005d50:	4013      	ands	r3, r2
 8005d52:	0019      	movs	r1, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d58:	4b7e      	ldr	r3, [pc, #504]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2220      	movs	r2, #32
 8005d64:	4013      	ands	r3, r2
 8005d66:	d009      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d68:	4b7a      	ldr	r3, [pc, #488]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d6c:	4a7f      	ldr	r2, [pc, #508]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005d6e:	4013      	ands	r3, r2
 8005d70:	0019      	movs	r1, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	699a      	ldr	r2, [r3, #24]
 8005d76:	4b77      	ldr	r3, [pc, #476]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2240      	movs	r2, #64	@ 0x40
 8005d82:	4013      	ands	r3, r2
 8005d84:	d009      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d86:	4b73      	ldr	r3, [pc, #460]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d8a:	4a79      	ldr	r2, [pc, #484]	@ (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	0019      	movs	r1, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	69da      	ldr	r2, [r3, #28]
 8005d94:	4b6f      	ldr	r3, [pc, #444]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d96:	430a      	orrs	r2, r1
 8005d98:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	2380      	movs	r3, #128	@ 0x80
 8005da0:	01db      	lsls	r3, r3, #7
 8005da2:	4013      	ands	r3, r2
 8005da4:	d015      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005da6:	4b6b      	ldr	r3, [pc, #428]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	0899      	lsrs	r1, r3, #2
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005db2:	4b68      	ldr	r3, [pc, #416]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005db4:	430a      	orrs	r2, r1
 8005db6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dbc:	2380      	movs	r3, #128	@ 0x80
 8005dbe:	05db      	lsls	r3, r3, #23
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d106      	bne.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005dc4:	4b63      	ldr	r3, [pc, #396]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005dc6:	68da      	ldr	r2, [r3, #12]
 8005dc8:	4b62      	ldr	r3, [pc, #392]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005dca:	2180      	movs	r1, #128	@ 0x80
 8005dcc:	0249      	lsls	r1, r1, #9
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	2380      	movs	r3, #128	@ 0x80
 8005dd8:	031b      	lsls	r3, r3, #12
 8005dda:	4013      	ands	r3, r2
 8005ddc:	d009      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005dde:	4b5d      	ldr	r3, [pc, #372]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005de2:	2240      	movs	r2, #64	@ 0x40
 8005de4:	4393      	bics	r3, r2
 8005de6:	0019      	movs	r1, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dec:	4b59      	ldr	r3, [pc, #356]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005dee:	430a      	orrs	r2, r1
 8005df0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	2380      	movs	r3, #128	@ 0x80
 8005df8:	039b      	lsls	r3, r3, #14
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	d016      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005dfe:	4b55      	ldr	r3, [pc, #340]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e02:	4a5c      	ldr	r2, [pc, #368]	@ (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005e04:	4013      	ands	r3, r2
 8005e06:	0019      	movs	r1, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e0c:	4b51      	ldr	r3, [pc, #324]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e16:	2380      	movs	r3, #128	@ 0x80
 8005e18:	03db      	lsls	r3, r3, #15
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d106      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005e1e:	4b4d      	ldr	r3, [pc, #308]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e20:	68da      	ldr	r2, [r3, #12]
 8005e22:	4b4c      	ldr	r3, [pc, #304]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e24:	2180      	movs	r1, #128	@ 0x80
 8005e26:	0449      	lsls	r1, r1, #17
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	2380      	movs	r3, #128	@ 0x80
 8005e32:	03db      	lsls	r3, r3, #15
 8005e34:	4013      	ands	r3, r2
 8005e36:	d016      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005e38:	4b46      	ldr	r3, [pc, #280]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e3c:	4a4e      	ldr	r2, [pc, #312]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005e3e:	4013      	ands	r3, r2
 8005e40:	0019      	movs	r1, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e46:	4b43      	ldr	r3, [pc, #268]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e50:	2380      	movs	r3, #128	@ 0x80
 8005e52:	045b      	lsls	r3, r3, #17
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d106      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005e58:	4b3e      	ldr	r3, [pc, #248]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	4b3d      	ldr	r3, [pc, #244]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e5e:	2180      	movs	r1, #128	@ 0x80
 8005e60:	0449      	lsls	r1, r1, #17
 8005e62:	430a      	orrs	r2, r1
 8005e64:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	2380      	movs	r3, #128	@ 0x80
 8005e6c:	011b      	lsls	r3, r3, #4
 8005e6e:	4013      	ands	r3, r2
 8005e70:	d014      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005e72:	4b38      	ldr	r3, [pc, #224]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e76:	2203      	movs	r2, #3
 8005e78:	4393      	bics	r3, r2
 8005e7a:	0019      	movs	r1, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a1a      	ldr	r2, [r3, #32]
 8005e80:	4b34      	ldr	r3, [pc, #208]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e82:	430a      	orrs	r2, r1
 8005e84:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d106      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005e8e:	4b31      	ldr	r3, [pc, #196]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e90:	68da      	ldr	r2, [r3, #12]
 8005e92:	4b30      	ldr	r3, [pc, #192]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005e94:	2180      	movs	r1, #128	@ 0x80
 8005e96:	0249      	lsls	r1, r1, #9
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	2380      	movs	r3, #128	@ 0x80
 8005ea2:	019b      	lsls	r3, r3, #6
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	d014      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eac:	220c      	movs	r2, #12
 8005eae:	4393      	bics	r3, r2
 8005eb0:	0019      	movs	r1, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005eb6:	4b27      	ldr	r3, [pc, #156]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec0:	2b04      	cmp	r3, #4
 8005ec2:	d106      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005ec4:	4b23      	ldr	r3, [pc, #140]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	4b22      	ldr	r3, [pc, #136]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005eca:	2180      	movs	r1, #128	@ 0x80
 8005ecc:	0249      	lsls	r1, r1, #9
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	2380      	movs	r3, #128	@ 0x80
 8005ed8:	045b      	lsls	r3, r3, #17
 8005eda:	4013      	ands	r3, r2
 8005edc:	d016      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ede:	4b1d      	ldr	r3, [pc, #116]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ee2:	4a22      	ldr	r2, [pc, #136]	@ (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	0019      	movs	r1, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005eec:	4b19      	ldr	r3, [pc, #100]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ef6:	2380      	movs	r3, #128	@ 0x80
 8005ef8:	019b      	lsls	r3, r3, #6
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d106      	bne.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005efe:	4b15      	ldr	r3, [pc, #84]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	4b14      	ldr	r3, [pc, #80]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f04:	2180      	movs	r1, #128	@ 0x80
 8005f06:	0449      	lsls	r1, r1, #17
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	2380      	movs	r3, #128	@ 0x80
 8005f12:	049b      	lsls	r3, r3, #18
 8005f14:	4013      	ands	r3, r2
 8005f16:	d016      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f18:	4b0e      	ldr	r3, [pc, #56]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f1c:	4a10      	ldr	r2, [pc, #64]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005f1e:	4013      	ands	r3, r2
 8005f20:	0019      	movs	r1, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f26:	4b0b      	ldr	r3, [pc, #44]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f30:	2380      	movs	r3, #128	@ 0x80
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d106      	bne.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005f38:	4b06      	ldr	r3, [pc, #24]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f3a:	68da      	ldr	r2, [r3, #12]
 8005f3c:	4b05      	ldr	r3, [pc, #20]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005f3e:	2180      	movs	r1, #128	@ 0x80
 8005f40:	0449      	lsls	r1, r1, #17
 8005f42:	430a      	orrs	r2, r1
 8005f44:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005f46:	2312      	movs	r3, #18
 8005f48:	18fb      	adds	r3, r7, r3
 8005f4a:	781b      	ldrb	r3, [r3, #0]
}
 8005f4c:	0018      	movs	r0, r3
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	b006      	add	sp, #24
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	40021000 	.word	0x40021000
 8005f58:	efffffff 	.word	0xefffffff
 8005f5c:	fffff3ff 	.word	0xfffff3ff
 8005f60:	fffffcff 	.word	0xfffffcff
 8005f64:	fff3ffff 	.word	0xfff3ffff
 8005f68:	ffcfffff 	.word	0xffcfffff
 8005f6c:	ffffcfff 	.word	0xffffcfff
 8005f70:	ffff3fff 	.word	0xffff3fff
 8005f74:	ffbfffff 	.word	0xffbfffff
 8005f78:	feffffff 	.word	0xfeffffff

08005f7c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005f7c:	b590      	push	{r4, r7, lr}
 8005f7e:	b089      	sub	sp, #36	@ 0x24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2228      	movs	r2, #40	@ 0x28
 8005f8c:	5c9b      	ldrb	r3, [r3, r2]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d101      	bne.n	8005f96 <HAL_RTC_SetAlarm_IT+0x1a>
 8005f92:	2302      	movs	r3, #2
 8005f94:	e127      	b.n	80061e6 <HAL_RTC_SetAlarm_IT+0x26a>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2228      	movs	r2, #40	@ 0x28
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2229      	movs	r2, #41	@ 0x29
 8005fa2:	2102      	movs	r1, #2
 8005fa4:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d136      	bne.n	800601a <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	2240      	movs	r2, #64	@ 0x40
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	d102      	bne.n	8005fbe <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	f000 fa1e 	bl	8006404 <RTC_ByteToBcd2>
 8005fc8:	0003      	movs	r3, r0
 8005fca:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	785b      	ldrb	r3, [r3, #1]
 8005fd0:	0018      	movs	r0, r3
 8005fd2:	f000 fa17 	bl	8006404 <RTC_ByteToBcd2>
 8005fd6:	0003      	movs	r3, r0
 8005fd8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005fda:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	789b      	ldrb	r3, [r3, #2]
 8005fe0:	0018      	movs	r0, r3
 8005fe2:	f000 fa0f 	bl	8006404 <RTC_ByteToBcd2>
 8005fe6:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005fe8:	0022      	movs	r2, r4
 8005fea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	78db      	ldrb	r3, [r3, #3]
 8005ff0:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	5c9b      	ldrb	r3, [r3, r2]
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	f000 fa01 	bl	8006404 <RTC_ByteToBcd2>
 8006002:	0003      	movs	r3, r0
 8006004:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006006:	0022      	movs	r2, r4
 8006008:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800600e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006014:	4313      	orrs	r3, r2
 8006016:	61fb      	str	r3, [r7, #28]
 8006018:	e022      	b.n	8006060 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	2240      	movs	r2, #64	@ 0x40
 8006022:	4013      	ands	r3, r2
 8006024:	d102      	bne.n	800602c <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2200      	movs	r2, #0
 800602a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	785b      	ldrb	r3, [r3, #1]
 8006036:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006038:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800603e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	78db      	ldrb	r3, [r3, #3]
 8006044:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006046:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2120      	movs	r1, #32
 800604c:	5c5b      	ldrb	r3, [r3, r1]
 800604e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006050:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006056:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800605c:	4313      	orrs	r3, r2
 800605e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	4313      	orrs	r3, r2
 800606a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	22ca      	movs	r2, #202	@ 0xca
 8006072:	625a      	str	r2, [r3, #36]	@ 0x24
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2253      	movs	r2, #83	@ 0x53
 800607a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006080:	2380      	movs	r3, #128	@ 0x80
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	429a      	cmp	r2, r3
 8006086:	d14c      	bne.n	8006122 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	699a      	ldr	r2, [r3, #24]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4957      	ldr	r1, [pc, #348]	@ (80061f0 <HAL_RTC_SetAlarm_IT+0x274>)
 8006094:	400a      	ands	r2, r1
 8006096:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2101      	movs	r1, #1
 80060a4:	430a      	orrs	r2, r1
 80060a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 80060a8:	f7fd fef4 	bl	8003e94 <HAL_GetTick>
 80060ac:	0003      	movs	r3, r0
 80060ae:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80060b0:	e016      	b.n	80060e0 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80060b2:	f7fd feef 	bl	8003e94 <HAL_GetTick>
 80060b6:	0002      	movs	r2, r0
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	1ad2      	subs	r2, r2, r3
 80060bc:	23fa      	movs	r3, #250	@ 0xfa
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d90d      	bls.n	80060e0 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	22ff      	movs	r2, #255	@ 0xff
 80060ca:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2229      	movs	r2, #41	@ 0x29
 80060d0:	2103      	movs	r1, #3
 80060d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2228      	movs	r2, #40	@ 0x28
 80060d8:	2100      	movs	r1, #0
 80060da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e082      	b.n	80061e6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	2201      	movs	r2, #1
 80060e8:	4013      	ands	r3, r2
 80060ea:	d0e2      	beq.n	80060b2 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	69fa      	ldr	r2, [r7, #28]
 80060f2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699a      	ldr	r2, [r3, #24]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2180      	movs	r1, #128	@ 0x80
 8006108:	0049      	lsls	r1, r1, #1
 800610a:	430a      	orrs	r2, r1
 800610c:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	699a      	ldr	r2, [r3, #24]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2180      	movs	r1, #128	@ 0x80
 800611a:	0149      	lsls	r1, r1, #5
 800611c:	430a      	orrs	r2, r1
 800611e:	619a      	str	r2, [r3, #24]
 8006120:	e04b      	b.n	80061ba <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	699a      	ldr	r2, [r3, #24]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4931      	ldr	r1, [pc, #196]	@ (80061f4 <HAL_RTC_SetAlarm_IT+0x278>)
 800612e:	400a      	ands	r2, r1
 8006130:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2102      	movs	r1, #2
 800613e:	430a      	orrs	r2, r1
 8006140:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8006142:	f7fd fea7 	bl	8003e94 <HAL_GetTick>
 8006146:	0003      	movs	r3, r0
 8006148:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800614a:	e016      	b.n	800617a <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800614c:	f7fd fea2 	bl	8003e94 <HAL_GetTick>
 8006150:	0002      	movs	r2, r0
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	1ad2      	subs	r2, r2, r3
 8006156:	23fa      	movs	r3, #250	@ 0xfa
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	429a      	cmp	r2, r3
 800615c:	d90d      	bls.n	800617a <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	22ff      	movs	r2, #255	@ 0xff
 8006164:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2229      	movs	r2, #41	@ 0x29
 800616a:	2103      	movs	r1, #3
 800616c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2228      	movs	r2, #40	@ 0x28
 8006172:	2100      	movs	r1, #0
 8006174:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e035      	b.n	80061e6 <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	2202      	movs	r2, #2
 8006182:	4013      	ands	r3, r2
 8006184:	d0e2      	beq.n	800614c <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	69fa      	ldr	r2, [r7, #28]
 800618c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	699a      	ldr	r2, [r3, #24]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2180      	movs	r1, #128	@ 0x80
 80061a2:	0089      	lsls	r1, r1, #2
 80061a4:	430a      	orrs	r2, r1
 80061a6:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699a      	ldr	r2, [r3, #24]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2180      	movs	r1, #128	@ 0x80
 80061b4:	0189      	lsls	r1, r1, #6
 80061b6:	430a      	orrs	r2, r1
 80061b8:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80061ba:	4a0f      	ldr	r2, [pc, #60]	@ (80061f8 <HAL_RTC_SetAlarm_IT+0x27c>)
 80061bc:	2380      	movs	r3, #128	@ 0x80
 80061be:	58d3      	ldr	r3, [r2, r3]
 80061c0:	490d      	ldr	r1, [pc, #52]	@ (80061f8 <HAL_RTC_SetAlarm_IT+0x27c>)
 80061c2:	2280      	movs	r2, #128	@ 0x80
 80061c4:	0312      	lsls	r2, r2, #12
 80061c6:	4313      	orrs	r3, r2
 80061c8:	2280      	movs	r2, #128	@ 0x80
 80061ca:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	22ff      	movs	r2, #255	@ 0xff
 80061d2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2229      	movs	r2, #41	@ 0x29
 80061d8:	2101      	movs	r1, #1
 80061da:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2228      	movs	r2, #40	@ 0x28
 80061e0:	2100      	movs	r1, #0
 80061e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	0018      	movs	r0, r3
 80061e8:	46bd      	mov	sp, r7
 80061ea:	b009      	add	sp, #36	@ 0x24
 80061ec:	bd90      	pop	{r4, r7, pc}
 80061ee:	46c0      	nop			@ (mov r8, r8)
 80061f0:	fffffeff 	.word	0xfffffeff
 80061f4:	fffffdff 	.word	0xfffffdff
 80061f8:	40021800 	.word	0x40021800

080061fc <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
 8006208:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	2380      	movs	r3, #128	@ 0x80
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	429a      	cmp	r2, r3
 8006212:	d144      	bne.n	800629e <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2280      	movs	r2, #128	@ 0x80
 8006218:	0052      	lsls	r2, r2, #1
 800621a:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006222:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800622a:	045b      	lsls	r3, r3, #17
 800622c:	0c5b      	lsrs	r3, r3, #17
 800622e:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	0c1b      	lsrs	r3, r3, #16
 8006234:	b2db      	uxtb	r3, r3
 8006236:	223f      	movs	r2, #63	@ 0x3f
 8006238:	4013      	ands	r3, r2
 800623a:	b2da      	uxtb	r2, r3
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	0a1b      	lsrs	r3, r3, #8
 8006244:	b2db      	uxtb	r3, r3
 8006246:	227f      	movs	r2, #127	@ 0x7f
 8006248:	4013      	ands	r3, r2
 800624a:	b2da      	uxtb	r2, r3
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	b2db      	uxtb	r3, r3
 8006254:	227f      	movs	r2, #127	@ 0x7f
 8006256:	4013      	ands	r3, r2
 8006258:	b2da      	uxtb	r2, r3
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	0d9b      	lsrs	r3, r3, #22
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2201      	movs	r2, #1
 8006266:	4013      	ands	r3, r2
 8006268:	b2da      	uxtb	r2, r3
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	0e1b      	lsrs	r3, r3, #24
 8006278:	b2db      	uxtb	r3, r3
 800627a:	223f      	movs	r2, #63	@ 0x3f
 800627c:	4013      	ands	r3, r2
 800627e:	b2d9      	uxtb	r1, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2220      	movs	r2, #32
 8006284:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	2380      	movs	r3, #128	@ 0x80
 800628a:	05db      	lsls	r3, r3, #23
 800628c:	401a      	ands	r2, r3
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	4a3b      	ldr	r2, [pc, #236]	@ (8006384 <HAL_RTC_GetAlarm+0x188>)
 8006296:	401a      	ands	r2, r3
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	615a      	str	r2, [r3, #20]
 800629c:	e043      	b.n	8006326 <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2280      	movs	r2, #128	@ 0x80
 80062a2:	0092      	lsls	r2, r2, #2
 80062a4:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062ac:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062b4:	045b      	lsls	r3, r3, #17
 80062b6:	0c5b      	lsrs	r3, r3, #17
 80062b8:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	0c1b      	lsrs	r3, r3, #16
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	223f      	movs	r2, #63	@ 0x3f
 80062c2:	4013      	ands	r3, r2
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	0a1b      	lsrs	r3, r3, #8
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	227f      	movs	r2, #127	@ 0x7f
 80062d2:	4013      	ands	r3, r2
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	227f      	movs	r2, #127	@ 0x7f
 80062e0:	4013      	ands	r3, r2
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	0d9b      	lsrs	r3, r3, #22
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2201      	movs	r2, #1
 80062f0:	4013      	ands	r3, r2
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	0e1b      	lsrs	r3, r3, #24
 8006302:	b2db      	uxtb	r3, r3
 8006304:	223f      	movs	r2, #63	@ 0x3f
 8006306:	4013      	ands	r3, r2
 8006308:	b2d9      	uxtb	r1, r3
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	2220      	movs	r2, #32
 800630e:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	2380      	movs	r3, #128	@ 0x80
 8006314:	05db      	lsls	r3, r3, #23
 8006316:	401a      	ands	r2, r3
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	4a19      	ldr	r2, [pc, #100]	@ (8006384 <HAL_RTC_GetAlarm+0x188>)
 8006320:	401a      	ands	r2, r3
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d125      	bne.n	8006378 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	0018      	movs	r0, r3
 8006332:	f000 f88f 	bl	8006454 <RTC_Bcd2ToByte>
 8006336:	0003      	movs	r3, r0
 8006338:	001a      	movs	r2, r3
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	785b      	ldrb	r3, [r3, #1]
 8006342:	0018      	movs	r0, r3
 8006344:	f000 f886 	bl	8006454 <RTC_Bcd2ToByte>
 8006348:	0003      	movs	r3, r0
 800634a:	001a      	movs	r2, r3
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	789b      	ldrb	r3, [r3, #2]
 8006354:	0018      	movs	r0, r3
 8006356:	f000 f87d 	bl	8006454 <RTC_Bcd2ToByte>
 800635a:	0003      	movs	r3, r0
 800635c:	001a      	movs	r2, r3
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2220      	movs	r2, #32
 8006366:	5c9b      	ldrb	r3, [r3, r2]
 8006368:	0018      	movs	r0, r3
 800636a:	f000 f873 	bl	8006454 <RTC_Bcd2ToByte>
 800636e:	0003      	movs	r3, r0
 8006370:	0019      	movs	r1, r3
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2220      	movs	r2, #32
 8006376:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	0018      	movs	r0, r3
 800637c:	46bd      	mov	sp, r7
 800637e:	b006      	add	sp, #24
 8006380:	bd80      	pop	{r7, pc}
 8006382:	46c0      	nop			@ (mov r8, r8)
 8006384:	80808080 	.word	0x80808080

08006388 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699a      	ldr	r2, [r3, #24]
 8006396:	2380      	movs	r3, #128	@ 0x80
 8006398:	015b      	lsls	r3, r3, #5
 800639a:	4013      	ands	r3, r2
 800639c:	d011      	beq.n	80063c2 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063a4:	2201      	movs	r2, #1
 80063a6:	4013      	ands	r3, r2
 80063a8:	d00b      	beq.n	80063c2 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2101      	movs	r1, #1
 80063b6:	430a      	orrs	r2, r1
 80063b8:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	0018      	movs	r0, r3
 80063be:	f7fd fa1f 	bl	8003800 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	699a      	ldr	r2, [r3, #24]
 80063c8:	2380      	movs	r3, #128	@ 0x80
 80063ca:	019b      	lsls	r3, r3, #6
 80063cc:	4013      	ands	r3, r2
 80063ce:	d011      	beq.n	80063f4 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063d6:	2202      	movs	r2, #2
 80063d8:	4013      	ands	r3, r2
 80063da:	d00b      	beq.n	80063f4 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2102      	movs	r1, #2
 80063e8:	430a      	orrs	r2, r1
 80063ea:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	0018      	movs	r0, r3
 80063f0:	f000 f873 	bl	80064da <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2229      	movs	r2, #41	@ 0x29
 80063f8:	2101      	movs	r1, #1
 80063fa:	5499      	strb	r1, [r3, r2]
}
 80063fc:	46c0      	nop			@ (mov r8, r8)
 80063fe:	46bd      	mov	sp, r7
 8006400:	b002      	add	sp, #8
 8006402:	bd80      	pop	{r7, pc}

08006404 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	0002      	movs	r2, r0
 800640c:	1dfb      	adds	r3, r7, #7
 800640e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006414:	230b      	movs	r3, #11
 8006416:	18fb      	adds	r3, r7, r3
 8006418:	1dfa      	adds	r2, r7, #7
 800641a:	7812      	ldrb	r2, [r2, #0]
 800641c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800641e:	e008      	b.n	8006432 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	3301      	adds	r3, #1
 8006424:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006426:	220b      	movs	r2, #11
 8006428:	18bb      	adds	r3, r7, r2
 800642a:	18ba      	adds	r2, r7, r2
 800642c:	7812      	ldrb	r2, [r2, #0]
 800642e:	3a0a      	subs	r2, #10
 8006430:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8006432:	210b      	movs	r1, #11
 8006434:	187b      	adds	r3, r7, r1
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b09      	cmp	r3, #9
 800643a:	d8f1      	bhi.n	8006420 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	b2db      	uxtb	r3, r3
 8006440:	011b      	lsls	r3, r3, #4
 8006442:	b2da      	uxtb	r2, r3
 8006444:	187b      	adds	r3, r7, r1
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	4313      	orrs	r3, r2
 800644a:	b2db      	uxtb	r3, r3
}
 800644c:	0018      	movs	r0, r3
 800644e:	46bd      	mov	sp, r7
 8006450:	b004      	add	sp, #16
 8006452:	bd80      	pop	{r7, pc}

08006454 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	0002      	movs	r2, r0
 800645c:	1dfb      	adds	r3, r7, #7
 800645e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006460:	1dfb      	adds	r3, r7, #7
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	091b      	lsrs	r3, r3, #4
 8006466:	b2db      	uxtb	r3, r3
 8006468:	001a      	movs	r2, r3
 800646a:	0013      	movs	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	189b      	adds	r3, r3, r2
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	b2da      	uxtb	r2, r3
 8006478:	1dfb      	adds	r3, r7, #7
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	210f      	movs	r1, #15
 800647e:	400b      	ands	r3, r1
 8006480:	b2db      	uxtb	r3, r3
 8006482:	18d3      	adds	r3, r2, r3
 8006484:	b2db      	uxtb	r3, r3
}
 8006486:	0018      	movs	r0, r3
 8006488:	46bd      	mov	sp, r7
 800648a:	b004      	add	sp, #16
 800648c:	bd80      	pop	{r7, pc}

0800648e <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b082      	sub	sp, #8
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800649c:	2204      	movs	r2, #4
 800649e:	4013      	ands	r3, r2
 80064a0:	d00b      	beq.n	80064ba <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2104      	movs	r1, #4
 80064ae:	430a      	orrs	r2, r1
 80064b0:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	0018      	movs	r0, r3
 80064b6:	f000 f808 	bl	80064ca <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2229      	movs	r2, #41	@ 0x29
 80064be:	2101      	movs	r1, #1
 80064c0:	5499      	strb	r1, [r3, r2]
}
 80064c2:	46c0      	nop			@ (mov r8, r8)
 80064c4:	46bd      	mov	sp, r7
 80064c6:	b002      	add	sp, #8
 80064c8:	bd80      	pop	{r7, pc}

080064ca <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b082      	sub	sp, #8
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80064d2:	46c0      	nop			@ (mov r8, r8)
 80064d4:	46bd      	mov	sp, r7
 80064d6:	b002      	add	sp, #8
 80064d8:	bd80      	pop	{r7, pc}

080064da <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b082      	sub	sp, #8
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80064e2:	46c0      	nop			@ (mov r8, r8)
 80064e4:	46bd      	mov	sp, r7
 80064e6:	b002      	add	sp, #8
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e0a8      	b.n	8006650 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006502:	2b00      	cmp	r3, #0
 8006504:	d109      	bne.n	800651a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685a      	ldr	r2, [r3, #4]
 800650a:	2382      	movs	r3, #130	@ 0x82
 800650c:	005b      	lsls	r3, r3, #1
 800650e:	429a      	cmp	r2, r3
 8006510:	d009      	beq.n	8006526 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	61da      	str	r2, [r3, #28]
 8006518:	e005      	b.n	8006526 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	225d      	movs	r2, #93	@ 0x5d
 8006530:	5c9b      	ldrb	r3, [r3, r2]
 8006532:	b2db      	uxtb	r3, r3
 8006534:	2b00      	cmp	r3, #0
 8006536:	d107      	bne.n	8006548 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	225c      	movs	r2, #92	@ 0x5c
 800653c:	2100      	movs	r1, #0
 800653e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	0018      	movs	r0, r3
 8006544:	f7fd fa26 	bl	8003994 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	225d      	movs	r2, #93	@ 0x5d
 800654c:	2102      	movs	r1, #2
 800654e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2140      	movs	r1, #64	@ 0x40
 800655c:	438a      	bics	r2, r1
 800655e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68da      	ldr	r2, [r3, #12]
 8006564:	23e0      	movs	r3, #224	@ 0xe0
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	429a      	cmp	r2, r3
 800656a:	d902      	bls.n	8006572 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800656c:	2300      	movs	r3, #0
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	e002      	b.n	8006578 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006572:	2380      	movs	r3, #128	@ 0x80
 8006574:	015b      	lsls	r3, r3, #5
 8006576:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68da      	ldr	r2, [r3, #12]
 800657c:	23f0      	movs	r3, #240	@ 0xf0
 800657e:	011b      	lsls	r3, r3, #4
 8006580:	429a      	cmp	r2, r3
 8006582:	d008      	beq.n	8006596 <HAL_SPI_Init+0xaa>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	23e0      	movs	r3, #224	@ 0xe0
 800658a:	00db      	lsls	r3, r3, #3
 800658c:	429a      	cmp	r2, r3
 800658e:	d002      	beq.n	8006596 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	2382      	movs	r3, #130	@ 0x82
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	401a      	ands	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6899      	ldr	r1, [r3, #8]
 80065a4:	2384      	movs	r3, #132	@ 0x84
 80065a6:	021b      	lsls	r3, r3, #8
 80065a8:	400b      	ands	r3, r1
 80065aa:	431a      	orrs	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	2102      	movs	r1, #2
 80065b2:	400b      	ands	r3, r1
 80065b4:	431a      	orrs	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	2101      	movs	r1, #1
 80065bc:	400b      	ands	r3, r1
 80065be:	431a      	orrs	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6999      	ldr	r1, [r3, #24]
 80065c4:	2380      	movs	r3, #128	@ 0x80
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	400b      	ands	r3, r1
 80065ca:	431a      	orrs	r2, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	2138      	movs	r1, #56	@ 0x38
 80065d2:	400b      	ands	r3, r1
 80065d4:	431a      	orrs	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	2180      	movs	r1, #128	@ 0x80
 80065dc:	400b      	ands	r3, r1
 80065de:	431a      	orrs	r2, r3
 80065e0:	0011      	movs	r1, r2
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065e6:	2380      	movs	r3, #128	@ 0x80
 80065e8:	019b      	lsls	r3, r3, #6
 80065ea:	401a      	ands	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	430a      	orrs	r2, r1
 80065f2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	0c1b      	lsrs	r3, r3, #16
 80065fa:	2204      	movs	r2, #4
 80065fc:	401a      	ands	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006602:	2110      	movs	r1, #16
 8006604:	400b      	ands	r3, r1
 8006606:	431a      	orrs	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800660c:	2108      	movs	r1, #8
 800660e:	400b      	ands	r3, r1
 8006610:	431a      	orrs	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68d9      	ldr	r1, [r3, #12]
 8006616:	23f0      	movs	r3, #240	@ 0xf0
 8006618:	011b      	lsls	r3, r3, #4
 800661a:	400b      	ands	r3, r1
 800661c:	431a      	orrs	r2, r3
 800661e:	0011      	movs	r1, r2
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	2380      	movs	r3, #128	@ 0x80
 8006624:	015b      	lsls	r3, r3, #5
 8006626:	401a      	ands	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	430a      	orrs	r2, r1
 800662e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	69da      	ldr	r2, [r3, #28]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4907      	ldr	r1, [pc, #28]	@ (8006658 <HAL_SPI_Init+0x16c>)
 800663c:	400a      	ands	r2, r1
 800663e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	225d      	movs	r2, #93	@ 0x5d
 800664a:	2101      	movs	r1, #1
 800664c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	0018      	movs	r0, r3
 8006652:	46bd      	mov	sp, r7
 8006654:	b004      	add	sp, #16
 8006656:	bd80      	pop	{r7, pc}
 8006658:	fffff7ff 	.word	0xfffff7ff

0800665c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b088      	sub	sp, #32
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	603b      	str	r3, [r7, #0]
 8006668:	1dbb      	adds	r3, r7, #6
 800666a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800666c:	231f      	movs	r3, #31
 800666e:	18fb      	adds	r3, r7, r3
 8006670:	2200      	movs	r2, #0
 8006672:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	225c      	movs	r2, #92	@ 0x5c
 8006678:	5c9b      	ldrb	r3, [r3, r2]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d101      	bne.n	8006682 <HAL_SPI_Transmit+0x26>
 800667e:	2302      	movs	r3, #2
 8006680:	e147      	b.n	8006912 <HAL_SPI_Transmit+0x2b6>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	225c      	movs	r2, #92	@ 0x5c
 8006686:	2101      	movs	r1, #1
 8006688:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800668a:	f7fd fc03 	bl	8003e94 <HAL_GetTick>
 800668e:	0003      	movs	r3, r0
 8006690:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006692:	2316      	movs	r3, #22
 8006694:	18fb      	adds	r3, r7, r3
 8006696:	1dba      	adds	r2, r7, #6
 8006698:	8812      	ldrh	r2, [r2, #0]
 800669a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	225d      	movs	r2, #93	@ 0x5d
 80066a0:	5c9b      	ldrb	r3, [r3, r2]
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d004      	beq.n	80066b2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80066a8:	231f      	movs	r3, #31
 80066aa:	18fb      	adds	r3, r7, r3
 80066ac:	2202      	movs	r2, #2
 80066ae:	701a      	strb	r2, [r3, #0]
    goto error;
 80066b0:	e128      	b.n	8006904 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d003      	beq.n	80066c0 <HAL_SPI_Transmit+0x64>
 80066b8:	1dbb      	adds	r3, r7, #6
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d104      	bne.n	80066ca <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80066c0:	231f      	movs	r3, #31
 80066c2:	18fb      	adds	r3, r7, r3
 80066c4:	2201      	movs	r2, #1
 80066c6:	701a      	strb	r2, [r3, #0]
    goto error;
 80066c8:	e11c      	b.n	8006904 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	225d      	movs	r2, #93	@ 0x5d
 80066ce:	2103      	movs	r1, #3
 80066d0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	1dba      	adds	r2, r7, #6
 80066e2:	8812      	ldrh	r2, [r2, #0]
 80066e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	1dba      	adds	r2, r7, #6
 80066ea:	8812      	ldrh	r2, [r2, #0]
 80066ec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2244      	movs	r2, #68	@ 0x44
 80066f8:	2100      	movs	r1, #0
 80066fa:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2246      	movs	r2, #70	@ 0x46
 8006700:	2100      	movs	r1, #0
 8006702:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	2380      	movs	r3, #128	@ 0x80
 8006716:	021b      	lsls	r3, r3, #8
 8006718:	429a      	cmp	r2, r3
 800671a:	d110      	bne.n	800673e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2140      	movs	r1, #64	@ 0x40
 8006728:	438a      	bics	r2, r1
 800672a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2180      	movs	r1, #128	@ 0x80
 8006738:	01c9      	lsls	r1, r1, #7
 800673a:	430a      	orrs	r2, r1
 800673c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2240      	movs	r2, #64	@ 0x40
 8006746:	4013      	ands	r3, r2
 8006748:	2b40      	cmp	r3, #64	@ 0x40
 800674a:	d007      	beq.n	800675c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2140      	movs	r1, #64	@ 0x40
 8006758:	430a      	orrs	r2, r1
 800675a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	68da      	ldr	r2, [r3, #12]
 8006760:	23e0      	movs	r3, #224	@ 0xe0
 8006762:	00db      	lsls	r3, r3, #3
 8006764:	429a      	cmp	r2, r3
 8006766:	d952      	bls.n	800680e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d004      	beq.n	800677a <HAL_SPI_Transmit+0x11e>
 8006770:	2316      	movs	r3, #22
 8006772:	18fb      	adds	r3, r7, r3
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d143      	bne.n	8006802 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800677e:	881a      	ldrh	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800678a:	1c9a      	adds	r2, r3, #2
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006794:	b29b      	uxth	r3, r3
 8006796:	3b01      	subs	r3, #1
 8006798:	b29a      	uxth	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800679e:	e030      	b.n	8006802 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	2202      	movs	r2, #2
 80067a8:	4013      	ands	r3, r2
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d112      	bne.n	80067d4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b2:	881a      	ldrh	r2, [r3, #0]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067be:	1c9a      	adds	r2, r3, #2
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	3b01      	subs	r3, #1
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80067d2:	e016      	b.n	8006802 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067d4:	f7fd fb5e 	bl	8003e94 <HAL_GetTick>
 80067d8:	0002      	movs	r2, r0
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d802      	bhi.n	80067ea <HAL_SPI_Transmit+0x18e>
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	3301      	adds	r3, #1
 80067e8:	d102      	bne.n	80067f0 <HAL_SPI_Transmit+0x194>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d108      	bne.n	8006802 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80067f0:	231f      	movs	r3, #31
 80067f2:	18fb      	adds	r3, r7, r3
 80067f4:	2203      	movs	r2, #3
 80067f6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	225d      	movs	r2, #93	@ 0x5d
 80067fc:	2101      	movs	r1, #1
 80067fe:	5499      	strb	r1, [r3, r2]
          goto error;
 8006800:	e080      	b.n	8006904 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006806:	b29b      	uxth	r3, r3
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1c9      	bne.n	80067a0 <HAL_SPI_Transmit+0x144>
 800680c:	e053      	b.n	80068b6 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d004      	beq.n	8006820 <HAL_SPI_Transmit+0x1c4>
 8006816:	2316      	movs	r3, #22
 8006818:	18fb      	adds	r3, r7, r3
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d145      	bne.n	80068ac <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	330c      	adds	r3, #12
 800682a:	7812      	ldrb	r2, [r2, #0]
 800682c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006832:	1c5a      	adds	r2, r3, #1
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800683c:	b29b      	uxth	r3, r3
 800683e:	3b01      	subs	r3, #1
 8006840:	b29a      	uxth	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006846:	e031      	b.n	80068ac <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	2202      	movs	r2, #2
 8006850:	4013      	ands	r3, r2
 8006852:	2b02      	cmp	r3, #2
 8006854:	d113      	bne.n	800687e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	330c      	adds	r3, #12
 8006860:	7812      	ldrb	r2, [r2, #0]
 8006862:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006868:	1c5a      	adds	r2, r3, #1
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006872:	b29b      	uxth	r3, r3
 8006874:	3b01      	subs	r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800687c:	e016      	b.n	80068ac <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800687e:	f7fd fb09 	bl	8003e94 <HAL_GetTick>
 8006882:	0002      	movs	r2, r0
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	429a      	cmp	r2, r3
 800688c:	d802      	bhi.n	8006894 <HAL_SPI_Transmit+0x238>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	3301      	adds	r3, #1
 8006892:	d102      	bne.n	800689a <HAL_SPI_Transmit+0x23e>
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d108      	bne.n	80068ac <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800689a:	231f      	movs	r3, #31
 800689c:	18fb      	adds	r3, r7, r3
 800689e:	2203      	movs	r2, #3
 80068a0:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	225d      	movs	r2, #93	@ 0x5d
 80068a6:	2101      	movs	r1, #1
 80068a8:	5499      	strb	r1, [r3, r2]
          goto error;
 80068aa:	e02b      	b.n	8006904 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1c8      	bne.n	8006848 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	6839      	ldr	r1, [r7, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	0018      	movs	r0, r3
 80068be:	f000 f95d 	bl	8006b7c <SPI_EndRxTxTransaction>
 80068c2:	1e03      	subs	r3, r0, #0
 80068c4:	d002      	beq.n	80068cc <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2220      	movs	r2, #32
 80068ca:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10a      	bne.n	80068ea <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068d4:	2300      	movs	r3, #0
 80068d6:	613b      	str	r3, [r7, #16]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	613b      	str	r3, [r7, #16]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	613b      	str	r3, [r7, #16]
 80068e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d004      	beq.n	80068fc <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80068f2:	231f      	movs	r3, #31
 80068f4:	18fb      	adds	r3, r7, r3
 80068f6:	2201      	movs	r2, #1
 80068f8:	701a      	strb	r2, [r3, #0]
 80068fa:	e003      	b.n	8006904 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	225d      	movs	r2, #93	@ 0x5d
 8006900:	2101      	movs	r1, #1
 8006902:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	225c      	movs	r2, #92	@ 0x5c
 8006908:	2100      	movs	r1, #0
 800690a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800690c:	231f      	movs	r3, #31
 800690e:	18fb      	adds	r3, r7, r3
 8006910:	781b      	ldrb	r3, [r3, #0]
}
 8006912:	0018      	movs	r0, r3
 8006914:	46bd      	mov	sp, r7
 8006916:	b008      	add	sp, #32
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b088      	sub	sp, #32
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	603b      	str	r3, [r7, #0]
 8006928:	1dfb      	adds	r3, r7, #7
 800692a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800692c:	f7fd fab2 	bl	8003e94 <HAL_GetTick>
 8006930:	0002      	movs	r2, r0
 8006932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006934:	1a9b      	subs	r3, r3, r2
 8006936:	683a      	ldr	r2, [r7, #0]
 8006938:	18d3      	adds	r3, r2, r3
 800693a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800693c:	f7fd faaa 	bl	8003e94 <HAL_GetTick>
 8006940:	0003      	movs	r3, r0
 8006942:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006944:	4b3a      	ldr	r3, [pc, #232]	@ (8006a30 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	015b      	lsls	r3, r3, #5
 800694a:	0d1b      	lsrs	r3, r3, #20
 800694c:	69fa      	ldr	r2, [r7, #28]
 800694e:	4353      	muls	r3, r2
 8006950:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006952:	e058      	b.n	8006a06 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	3301      	adds	r3, #1
 8006958:	d055      	beq.n	8006a06 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800695a:	f7fd fa9b 	bl	8003e94 <HAL_GetTick>
 800695e:	0002      	movs	r2, r0
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	69fa      	ldr	r2, [r7, #28]
 8006966:	429a      	cmp	r2, r3
 8006968:	d902      	bls.n	8006970 <SPI_WaitFlagStateUntilTimeout+0x54>
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d142      	bne.n	80069f6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	21e0      	movs	r1, #224	@ 0xe0
 800697c:	438a      	bics	r2, r1
 800697e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	2382      	movs	r3, #130	@ 0x82
 8006986:	005b      	lsls	r3, r3, #1
 8006988:	429a      	cmp	r2, r3
 800698a:	d113      	bne.n	80069b4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	2380      	movs	r3, #128	@ 0x80
 8006992:	021b      	lsls	r3, r3, #8
 8006994:	429a      	cmp	r2, r3
 8006996:	d005      	beq.n	80069a4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	689a      	ldr	r2, [r3, #8]
 800699c:	2380      	movs	r3, #128	@ 0x80
 800699e:	00db      	lsls	r3, r3, #3
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d107      	bne.n	80069b4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2140      	movs	r1, #64	@ 0x40
 80069b0:	438a      	bics	r2, r1
 80069b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069b8:	2380      	movs	r3, #128	@ 0x80
 80069ba:	019b      	lsls	r3, r3, #6
 80069bc:	429a      	cmp	r2, r3
 80069be:	d110      	bne.n	80069e2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	491a      	ldr	r1, [pc, #104]	@ (8006a34 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80069cc:	400a      	ands	r2, r1
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2180      	movs	r1, #128	@ 0x80
 80069dc:	0189      	lsls	r1, r1, #6
 80069de:	430a      	orrs	r2, r1
 80069e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	225d      	movs	r2, #93	@ 0x5d
 80069e6:	2101      	movs	r1, #1
 80069e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	225c      	movs	r2, #92	@ 0x5c
 80069ee:	2100      	movs	r1, #0
 80069f0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e017      	b.n	8006a26 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d101      	bne.n	8006a00 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	3b01      	subs	r3, #1
 8006a04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	4013      	ands	r3, r2
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	425a      	negs	r2, r3
 8006a16:	4153      	adcs	r3, r2
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	001a      	movs	r2, r3
 8006a1c:	1dfb      	adds	r3, r7, #7
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d197      	bne.n	8006954 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	0018      	movs	r0, r3
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	b008      	add	sp, #32
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	46c0      	nop			@ (mov r8, r8)
 8006a30:	20000e84 	.word	0x20000e84
 8006a34:	ffffdfff 	.word	0xffffdfff

08006a38 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08a      	sub	sp, #40	@ 0x28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
 8006a44:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006a46:	2317      	movs	r3, #23
 8006a48:	18fb      	adds	r3, r7, r3
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006a4e:	f7fd fa21 	bl	8003e94 <HAL_GetTick>
 8006a52:	0002      	movs	r2, r0
 8006a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a56:	1a9b      	subs	r3, r3, r2
 8006a58:	683a      	ldr	r2, [r7, #0]
 8006a5a:	18d3      	adds	r3, r2, r3
 8006a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006a5e:	f7fd fa19 	bl	8003e94 <HAL_GetTick>
 8006a62:	0003      	movs	r3, r0
 8006a64:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	330c      	adds	r3, #12
 8006a6c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006a6e:	4b41      	ldr	r3, [pc, #260]	@ (8006b74 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	0013      	movs	r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	189b      	adds	r3, r3, r2
 8006a78:	00da      	lsls	r2, r3, #3
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	0d1b      	lsrs	r3, r3, #20
 8006a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a80:	4353      	muls	r3, r2
 8006a82:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006a84:	e068      	b.n	8006b58 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	23c0      	movs	r3, #192	@ 0xc0
 8006a8a:	00db      	lsls	r3, r3, #3
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d10a      	bne.n	8006aa6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d107      	bne.n	8006aa6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	b2da      	uxtb	r2, r3
 8006a9c:	2117      	movs	r1, #23
 8006a9e:	187b      	adds	r3, r7, r1
 8006aa0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006aa2:	187b      	adds	r3, r7, r1
 8006aa4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	d055      	beq.n	8006b58 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006aac:	f7fd f9f2 	bl	8003e94 <HAL_GetTick>
 8006ab0:	0002      	movs	r2, r0
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d902      	bls.n	8006ac2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d142      	bne.n	8006b48 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	21e0      	movs	r1, #224	@ 0xe0
 8006ace:	438a      	bics	r2, r1
 8006ad0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	2382      	movs	r3, #130	@ 0x82
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d113      	bne.n	8006b06 <SPI_WaitFifoStateUntilTimeout+0xce>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	2380      	movs	r3, #128	@ 0x80
 8006ae4:	021b      	lsls	r3, r3, #8
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d005      	beq.n	8006af6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	2380      	movs	r3, #128	@ 0x80
 8006af0:	00db      	lsls	r3, r3, #3
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d107      	bne.n	8006b06 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2140      	movs	r1, #64	@ 0x40
 8006b02:	438a      	bics	r2, r1
 8006b04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b0a:	2380      	movs	r3, #128	@ 0x80
 8006b0c:	019b      	lsls	r3, r3, #6
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d110      	bne.n	8006b34 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4916      	ldr	r1, [pc, #88]	@ (8006b78 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006b1e:	400a      	ands	r2, r1
 8006b20:	601a      	str	r2, [r3, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2180      	movs	r1, #128	@ 0x80
 8006b2e:	0189      	lsls	r1, r1, #6
 8006b30:	430a      	orrs	r2, r1
 8006b32:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	225d      	movs	r2, #93	@ 0x5d
 8006b38:	2101      	movs	r1, #1
 8006b3a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	225c      	movs	r2, #92	@ 0x5c
 8006b40:	2100      	movs	r1, #0
 8006b42:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e010      	b.n	8006b6a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	4013      	ands	r3, r2
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d18e      	bne.n	8006a86 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	0018      	movs	r0, r3
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	b00a      	add	sp, #40	@ 0x28
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	46c0      	nop			@ (mov r8, r8)
 8006b74:	20000e84 	.word	0x20000e84
 8006b78:	ffffdfff 	.word	0xffffdfff

08006b7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af02      	add	r7, sp, #8
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	23c0      	movs	r3, #192	@ 0xc0
 8006b8c:	0159      	lsls	r1, r3, #5
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	0013      	movs	r3, r2
 8006b96:	2200      	movs	r2, #0
 8006b98:	f7ff ff4e 	bl	8006a38 <SPI_WaitFifoStateUntilTimeout>
 8006b9c:	1e03      	subs	r3, r0, #0
 8006b9e:	d007      	beq.n	8006bb0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e027      	b.n	8006c00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	0013      	movs	r3, r2
 8006bba:	2200      	movs	r2, #0
 8006bbc:	2180      	movs	r1, #128	@ 0x80
 8006bbe:	f7ff fead 	bl	800691c <SPI_WaitFlagStateUntilTimeout>
 8006bc2:	1e03      	subs	r3, r0, #0
 8006bc4:	d007      	beq.n	8006bd6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bca:	2220      	movs	r2, #32
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e014      	b.n	8006c00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	23c0      	movs	r3, #192	@ 0xc0
 8006bda:	00d9      	lsls	r1, r3, #3
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	0013      	movs	r3, r2
 8006be4:	2200      	movs	r2, #0
 8006be6:	f7ff ff27 	bl	8006a38 <SPI_WaitFifoStateUntilTimeout>
 8006bea:	1e03      	subs	r3, r0, #0
 8006bec:	d007      	beq.n	8006bfe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e000      	b.n	8006c00 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	0018      	movs	r0, r3
 8006c02:	46bd      	mov	sp, r7
 8006c04:	b004      	add	sp, #16
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e04a      	b.n	8006cb0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	223d      	movs	r2, #61	@ 0x3d
 8006c1e:	5c9b      	ldrb	r3, [r3, r2]
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d107      	bne.n	8006c36 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	223c      	movs	r2, #60	@ 0x3c
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	0018      	movs	r0, r3
 8006c32:	f7fc ff1d 	bl	8003a70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	223d      	movs	r2, #61	@ 0x3d
 8006c3a:	2102      	movs	r1, #2
 8006c3c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	3304      	adds	r3, #4
 8006c46:	0019      	movs	r1, r3
 8006c48:	0010      	movs	r0, r2
 8006c4a:	f000 fb11 	bl	8007270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2248      	movs	r2, #72	@ 0x48
 8006c52:	2101      	movs	r1, #1
 8006c54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	223e      	movs	r2, #62	@ 0x3e
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	5499      	strb	r1, [r3, r2]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	223f      	movs	r2, #63	@ 0x3f
 8006c62:	2101      	movs	r1, #1
 8006c64:	5499      	strb	r1, [r3, r2]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2240      	movs	r2, #64	@ 0x40
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	5499      	strb	r1, [r3, r2]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2241      	movs	r2, #65	@ 0x41
 8006c72:	2101      	movs	r1, #1
 8006c74:	5499      	strb	r1, [r3, r2]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2242      	movs	r2, #66	@ 0x42
 8006c7a:	2101      	movs	r1, #1
 8006c7c:	5499      	strb	r1, [r3, r2]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2243      	movs	r2, #67	@ 0x43
 8006c82:	2101      	movs	r1, #1
 8006c84:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2244      	movs	r2, #68	@ 0x44
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	5499      	strb	r1, [r3, r2]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2245      	movs	r2, #69	@ 0x45
 8006c92:	2101      	movs	r1, #1
 8006c94:	5499      	strb	r1, [r3, r2]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2246      	movs	r2, #70	@ 0x46
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	5499      	strb	r1, [r3, r2]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2247      	movs	r2, #71	@ 0x47
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	223d      	movs	r2, #61	@ 0x3d
 8006caa:	2101      	movs	r1, #1
 8006cac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	0018      	movs	r0, r3
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	b002      	add	sp, #8
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e04a      	b.n	8006d60 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	223d      	movs	r2, #61	@ 0x3d
 8006cce:	5c9b      	ldrb	r3, [r3, r2]
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d107      	bne.n	8006ce6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	223c      	movs	r2, #60	@ 0x3c
 8006cda:	2100      	movs	r1, #0
 8006cdc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	0018      	movs	r0, r3
 8006ce2:	f000 f841 	bl	8006d68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	223d      	movs	r2, #61	@ 0x3d
 8006cea:	2102      	movs	r1, #2
 8006cec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	3304      	adds	r3, #4
 8006cf6:	0019      	movs	r1, r3
 8006cf8:	0010      	movs	r0, r2
 8006cfa:	f000 fab9 	bl	8007270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2248      	movs	r2, #72	@ 0x48
 8006d02:	2101      	movs	r1, #1
 8006d04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	223e      	movs	r2, #62	@ 0x3e
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	5499      	strb	r1, [r3, r2]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	223f      	movs	r2, #63	@ 0x3f
 8006d12:	2101      	movs	r1, #1
 8006d14:	5499      	strb	r1, [r3, r2]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2240      	movs	r2, #64	@ 0x40
 8006d1a:	2101      	movs	r1, #1
 8006d1c:	5499      	strb	r1, [r3, r2]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2241      	movs	r2, #65	@ 0x41
 8006d22:	2101      	movs	r1, #1
 8006d24:	5499      	strb	r1, [r3, r2]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2242      	movs	r2, #66	@ 0x42
 8006d2a:	2101      	movs	r1, #1
 8006d2c:	5499      	strb	r1, [r3, r2]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2243      	movs	r2, #67	@ 0x43
 8006d32:	2101      	movs	r1, #1
 8006d34:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2244      	movs	r2, #68	@ 0x44
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	5499      	strb	r1, [r3, r2]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2245      	movs	r2, #69	@ 0x45
 8006d42:	2101      	movs	r1, #1
 8006d44:	5499      	strb	r1, [r3, r2]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2246      	movs	r2, #70	@ 0x46
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	5499      	strb	r1, [r3, r2]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2247      	movs	r2, #71	@ 0x47
 8006d52:	2101      	movs	r1, #1
 8006d54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	223d      	movs	r2, #61	@ 0x3d
 8006d5a:	2101      	movs	r1, #1
 8006d5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	0018      	movs	r0, r3
 8006d62:	46bd      	mov	sp, r7
 8006d64:	b002      	add	sp, #8
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d70:	46c0      	nop			@ (mov r8, r8)
 8006d72:	46bd      	mov	sp, r7
 8006d74:	b002      	add	sp, #8
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d108      	bne.n	8006d9a <HAL_TIM_PWM_Start+0x22>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	223e      	movs	r2, #62	@ 0x3e
 8006d8c:	5c9b      	ldrb	r3, [r3, r2]
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	3b01      	subs	r3, #1
 8006d92:	1e5a      	subs	r2, r3, #1
 8006d94:	4193      	sbcs	r3, r2
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	e037      	b.n	8006e0a <HAL_TIM_PWM_Start+0x92>
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2b04      	cmp	r3, #4
 8006d9e:	d108      	bne.n	8006db2 <HAL_TIM_PWM_Start+0x3a>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	223f      	movs	r2, #63	@ 0x3f
 8006da4:	5c9b      	ldrb	r3, [r3, r2]
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	3b01      	subs	r3, #1
 8006daa:	1e5a      	subs	r2, r3, #1
 8006dac:	4193      	sbcs	r3, r2
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	e02b      	b.n	8006e0a <HAL_TIM_PWM_Start+0x92>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b08      	cmp	r3, #8
 8006db6:	d108      	bne.n	8006dca <HAL_TIM_PWM_Start+0x52>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2240      	movs	r2, #64	@ 0x40
 8006dbc:	5c9b      	ldrb	r3, [r3, r2]
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	1e5a      	subs	r2, r3, #1
 8006dc4:	4193      	sbcs	r3, r2
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	e01f      	b.n	8006e0a <HAL_TIM_PWM_Start+0x92>
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2b0c      	cmp	r3, #12
 8006dce:	d108      	bne.n	8006de2 <HAL_TIM_PWM_Start+0x6a>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2241      	movs	r2, #65	@ 0x41
 8006dd4:	5c9b      	ldrb	r3, [r3, r2]
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	1e5a      	subs	r2, r3, #1
 8006ddc:	4193      	sbcs	r3, r2
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	e013      	b.n	8006e0a <HAL_TIM_PWM_Start+0x92>
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b10      	cmp	r3, #16
 8006de6:	d108      	bne.n	8006dfa <HAL_TIM_PWM_Start+0x82>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2242      	movs	r2, #66	@ 0x42
 8006dec:	5c9b      	ldrb	r3, [r3, r2]
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	3b01      	subs	r3, #1
 8006df2:	1e5a      	subs	r2, r3, #1
 8006df4:	4193      	sbcs	r3, r2
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	e007      	b.n	8006e0a <HAL_TIM_PWM_Start+0x92>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2243      	movs	r2, #67	@ 0x43
 8006dfe:	5c9b      	ldrb	r3, [r3, r2]
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	3b01      	subs	r3, #1
 8006e04:	1e5a      	subs	r2, r3, #1
 8006e06:	4193      	sbcs	r3, r2
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e090      	b.n	8006f34 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d104      	bne.n	8006e22 <HAL_TIM_PWM_Start+0xaa>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	223e      	movs	r2, #62	@ 0x3e
 8006e1c:	2102      	movs	r1, #2
 8006e1e:	5499      	strb	r1, [r3, r2]
 8006e20:	e023      	b.n	8006e6a <HAL_TIM_PWM_Start+0xf2>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b04      	cmp	r3, #4
 8006e26:	d104      	bne.n	8006e32 <HAL_TIM_PWM_Start+0xba>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	223f      	movs	r2, #63	@ 0x3f
 8006e2c:	2102      	movs	r1, #2
 8006e2e:	5499      	strb	r1, [r3, r2]
 8006e30:	e01b      	b.n	8006e6a <HAL_TIM_PWM_Start+0xf2>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b08      	cmp	r3, #8
 8006e36:	d104      	bne.n	8006e42 <HAL_TIM_PWM_Start+0xca>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2240      	movs	r2, #64	@ 0x40
 8006e3c:	2102      	movs	r1, #2
 8006e3e:	5499      	strb	r1, [r3, r2]
 8006e40:	e013      	b.n	8006e6a <HAL_TIM_PWM_Start+0xf2>
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2b0c      	cmp	r3, #12
 8006e46:	d104      	bne.n	8006e52 <HAL_TIM_PWM_Start+0xda>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2241      	movs	r2, #65	@ 0x41
 8006e4c:	2102      	movs	r1, #2
 8006e4e:	5499      	strb	r1, [r3, r2]
 8006e50:	e00b      	b.n	8006e6a <HAL_TIM_PWM_Start+0xf2>
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b10      	cmp	r3, #16
 8006e56:	d104      	bne.n	8006e62 <HAL_TIM_PWM_Start+0xea>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2242      	movs	r2, #66	@ 0x42
 8006e5c:	2102      	movs	r1, #2
 8006e5e:	5499      	strb	r1, [r3, r2]
 8006e60:	e003      	b.n	8006e6a <HAL_TIM_PWM_Start+0xf2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2243      	movs	r2, #67	@ 0x43
 8006e66:	2102      	movs	r1, #2
 8006e68:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	2201      	movs	r2, #1
 8006e72:	0018      	movs	r0, r3
 8006e74:	f000 fd58 	bl	8007928 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a2f      	ldr	r2, [pc, #188]	@ (8006f3c <HAL_TIM_PWM_Start+0x1c4>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d00e      	beq.n	8006ea0 <HAL_TIM_PWM_Start+0x128>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a2e      	ldr	r2, [pc, #184]	@ (8006f40 <HAL_TIM_PWM_Start+0x1c8>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d009      	beq.n	8006ea0 <HAL_TIM_PWM_Start+0x128>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a2c      	ldr	r2, [pc, #176]	@ (8006f44 <HAL_TIM_PWM_Start+0x1cc>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d004      	beq.n	8006ea0 <HAL_TIM_PWM_Start+0x128>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a2b      	ldr	r2, [pc, #172]	@ (8006f48 <HAL_TIM_PWM_Start+0x1d0>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d101      	bne.n	8006ea4 <HAL_TIM_PWM_Start+0x12c>
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e000      	b.n	8006ea6 <HAL_TIM_PWM_Start+0x12e>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d008      	beq.n	8006ebc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2180      	movs	r1, #128	@ 0x80
 8006eb6:	0209      	lsls	r1, r1, #8
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a1e      	ldr	r2, [pc, #120]	@ (8006f3c <HAL_TIM_PWM_Start+0x1c4>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d014      	beq.n	8006ef0 <HAL_TIM_PWM_Start+0x178>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	2380      	movs	r3, #128	@ 0x80
 8006ecc:	05db      	lsls	r3, r3, #23
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d00e      	beq.n	8006ef0 <HAL_TIM_PWM_Start+0x178>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8006f4c <HAL_TIM_PWM_Start+0x1d4>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d009      	beq.n	8006ef0 <HAL_TIM_PWM_Start+0x178>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8006f50 <HAL_TIM_PWM_Start+0x1d8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d004      	beq.n	8006ef0 <HAL_TIM_PWM_Start+0x178>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a15      	ldr	r2, [pc, #84]	@ (8006f40 <HAL_TIM_PWM_Start+0x1c8>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d116      	bne.n	8006f1e <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	4a17      	ldr	r2, [pc, #92]	@ (8006f54 <HAL_TIM_PWM_Start+0x1dc>)
 8006ef8:	4013      	ands	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b06      	cmp	r3, #6
 8006f00:	d016      	beq.n	8006f30 <HAL_TIM_PWM_Start+0x1b8>
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	2380      	movs	r3, #128	@ 0x80
 8006f06:	025b      	lsls	r3, r3, #9
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d011      	beq.n	8006f30 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2101      	movs	r1, #1
 8006f18:	430a      	orrs	r2, r1
 8006f1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f1c:	e008      	b.n	8006f30 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2101      	movs	r1, #1
 8006f2a:	430a      	orrs	r2, r1
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	e000      	b.n	8006f32 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f30:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	0018      	movs	r0, r3
 8006f36:	46bd      	mov	sp, r7
 8006f38:	b004      	add	sp, #16
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	40012c00 	.word	0x40012c00
 8006f40:	40014000 	.word	0x40014000
 8006f44:	40014400 	.word	0x40014400
 8006f48:	40014800 	.word	0x40014800
 8006f4c:	40000400 	.word	0x40000400
 8006f50:	40000800 	.word	0x40000800
 8006f54:	00010007 	.word	0x00010007

08006f58 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	0018      	movs	r0, r3
 8006f6c:	f000 fcdc 	bl	8007928 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a37      	ldr	r2, [pc, #220]	@ (8007054 <HAL_TIM_PWM_Stop+0xfc>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d00e      	beq.n	8006f98 <HAL_TIM_PWM_Stop+0x40>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a36      	ldr	r2, [pc, #216]	@ (8007058 <HAL_TIM_PWM_Stop+0x100>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d009      	beq.n	8006f98 <HAL_TIM_PWM_Stop+0x40>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a34      	ldr	r2, [pc, #208]	@ (800705c <HAL_TIM_PWM_Stop+0x104>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d004      	beq.n	8006f98 <HAL_TIM_PWM_Stop+0x40>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a33      	ldr	r2, [pc, #204]	@ (8007060 <HAL_TIM_PWM_Stop+0x108>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d101      	bne.n	8006f9c <HAL_TIM_PWM_Stop+0x44>
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e000      	b.n	8006f9e <HAL_TIM_PWM_Stop+0x46>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d013      	beq.n	8006fca <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6a1b      	ldr	r3, [r3, #32]
 8006fa8:	4a2e      	ldr	r2, [pc, #184]	@ (8007064 <HAL_TIM_PWM_Stop+0x10c>)
 8006faa:	4013      	ands	r3, r2
 8006fac:	d10d      	bne.n	8006fca <HAL_TIM_PWM_Stop+0x72>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	4a2c      	ldr	r2, [pc, #176]	@ (8007068 <HAL_TIM_PWM_Stop+0x110>)
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	d107      	bne.n	8006fca <HAL_TIM_PWM_Stop+0x72>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4929      	ldr	r1, [pc, #164]	@ (800706c <HAL_TIM_PWM_Stop+0x114>)
 8006fc6:	400a      	ands	r2, r1
 8006fc8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6a1b      	ldr	r3, [r3, #32]
 8006fd0:	4a24      	ldr	r2, [pc, #144]	@ (8007064 <HAL_TIM_PWM_Stop+0x10c>)
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	d10d      	bne.n	8006ff2 <HAL_TIM_PWM_Stop+0x9a>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	4a22      	ldr	r2, [pc, #136]	@ (8007068 <HAL_TIM_PWM_Stop+0x110>)
 8006fde:	4013      	ands	r3, r2
 8006fe0:	d107      	bne.n	8006ff2 <HAL_TIM_PWM_Stop+0x9a>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2101      	movs	r1, #1
 8006fee:	438a      	bics	r2, r1
 8006ff0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d104      	bne.n	8007002 <HAL_TIM_PWM_Stop+0xaa>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	223e      	movs	r2, #62	@ 0x3e
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	5499      	strb	r1, [r3, r2]
 8007000:	e023      	b.n	800704a <HAL_TIM_PWM_Stop+0xf2>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b04      	cmp	r3, #4
 8007006:	d104      	bne.n	8007012 <HAL_TIM_PWM_Stop+0xba>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	223f      	movs	r2, #63	@ 0x3f
 800700c:	2101      	movs	r1, #1
 800700e:	5499      	strb	r1, [r3, r2]
 8007010:	e01b      	b.n	800704a <HAL_TIM_PWM_Stop+0xf2>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b08      	cmp	r3, #8
 8007016:	d104      	bne.n	8007022 <HAL_TIM_PWM_Stop+0xca>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2240      	movs	r2, #64	@ 0x40
 800701c:	2101      	movs	r1, #1
 800701e:	5499      	strb	r1, [r3, r2]
 8007020:	e013      	b.n	800704a <HAL_TIM_PWM_Stop+0xf2>
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2b0c      	cmp	r3, #12
 8007026:	d104      	bne.n	8007032 <HAL_TIM_PWM_Stop+0xda>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2241      	movs	r2, #65	@ 0x41
 800702c:	2101      	movs	r1, #1
 800702e:	5499      	strb	r1, [r3, r2]
 8007030:	e00b      	b.n	800704a <HAL_TIM_PWM_Stop+0xf2>
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b10      	cmp	r3, #16
 8007036:	d104      	bne.n	8007042 <HAL_TIM_PWM_Stop+0xea>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2242      	movs	r2, #66	@ 0x42
 800703c:	2101      	movs	r1, #1
 800703e:	5499      	strb	r1, [r3, r2]
 8007040:	e003      	b.n	800704a <HAL_TIM_PWM_Stop+0xf2>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2243      	movs	r2, #67	@ 0x43
 8007046:	2101      	movs	r1, #1
 8007048:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	0018      	movs	r0, r3
 800704e:	46bd      	mov	sp, r7
 8007050:	b002      	add	sp, #8
 8007052:	bd80      	pop	{r7, pc}
 8007054:	40012c00 	.word	0x40012c00
 8007058:	40014000 	.word	0x40014000
 800705c:	40014400 	.word	0x40014400
 8007060:	40014800 	.word	0x40014800
 8007064:	00001111 	.word	0x00001111
 8007068:	00000444 	.word	0x00000444
 800706c:	ffff7fff 	.word	0xffff7fff

08007070 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800707c:	2317      	movs	r3, #23
 800707e:	18fb      	adds	r3, r7, r3
 8007080:	2200      	movs	r2, #0
 8007082:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	223c      	movs	r2, #60	@ 0x3c
 8007088:	5c9b      	ldrb	r3, [r3, r2]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d101      	bne.n	8007092 <HAL_TIM_PWM_ConfigChannel+0x22>
 800708e:	2302      	movs	r3, #2
 8007090:	e0e5      	b.n	800725e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	223c      	movs	r2, #60	@ 0x3c
 8007096:	2101      	movs	r1, #1
 8007098:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b14      	cmp	r3, #20
 800709e:	d900      	bls.n	80070a2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80070a0:	e0d1      	b.n	8007246 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	009a      	lsls	r2, r3, #2
 80070a6:	4b70      	ldr	r3, [pc, #448]	@ (8007268 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80070a8:	18d3      	adds	r3, r2, r3
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	0011      	movs	r1, r2
 80070b6:	0018      	movs	r0, r3
 80070b8:	f000 f972 	bl	80073a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	699a      	ldr	r2, [r3, #24]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2108      	movs	r1, #8
 80070c8:	430a      	orrs	r2, r1
 80070ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	699a      	ldr	r2, [r3, #24]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2104      	movs	r1, #4
 80070d8:	438a      	bics	r2, r1
 80070da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6999      	ldr	r1, [r3, #24]
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	691a      	ldr	r2, [r3, #16]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	430a      	orrs	r2, r1
 80070ec:	619a      	str	r2, [r3, #24]
      break;
 80070ee:	e0af      	b.n	8007250 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	0011      	movs	r1, r2
 80070f8:	0018      	movs	r0, r3
 80070fa:	f000 f9db 	bl	80074b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	699a      	ldr	r2, [r3, #24]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2180      	movs	r1, #128	@ 0x80
 800710a:	0109      	lsls	r1, r1, #4
 800710c:	430a      	orrs	r2, r1
 800710e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	699a      	ldr	r2, [r3, #24]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4954      	ldr	r1, [pc, #336]	@ (800726c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800711c:	400a      	ands	r2, r1
 800711e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6999      	ldr	r1, [r3, #24]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	021a      	lsls	r2, r3, #8
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	430a      	orrs	r2, r1
 8007132:	619a      	str	r2, [r3, #24]
      break;
 8007134:	e08c      	b.n	8007250 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	0011      	movs	r1, r2
 800713e:	0018      	movs	r0, r3
 8007140:	f000 fa3c 	bl	80075bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	69da      	ldr	r2, [r3, #28]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2108      	movs	r1, #8
 8007150:	430a      	orrs	r2, r1
 8007152:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	69da      	ldr	r2, [r3, #28]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2104      	movs	r1, #4
 8007160:	438a      	bics	r2, r1
 8007162:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	69d9      	ldr	r1, [r3, #28]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	691a      	ldr	r2, [r3, #16]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	430a      	orrs	r2, r1
 8007174:	61da      	str	r2, [r3, #28]
      break;
 8007176:	e06b      	b.n	8007250 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	0011      	movs	r1, r2
 8007180:	0018      	movs	r0, r3
 8007182:	f000 faa3 	bl	80076cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	69da      	ldr	r2, [r3, #28]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2180      	movs	r1, #128	@ 0x80
 8007192:	0109      	lsls	r1, r1, #4
 8007194:	430a      	orrs	r2, r1
 8007196:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	69da      	ldr	r2, [r3, #28]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4932      	ldr	r1, [pc, #200]	@ (800726c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80071a4:	400a      	ands	r2, r1
 80071a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	69d9      	ldr	r1, [r3, #28]
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	021a      	lsls	r2, r3, #8
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	430a      	orrs	r2, r1
 80071ba:	61da      	str	r2, [r3, #28]
      break;
 80071bc:	e048      	b.n	8007250 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	0011      	movs	r1, r2
 80071c6:	0018      	movs	r0, r3
 80071c8:	f000 faea 	bl	80077a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2108      	movs	r1, #8
 80071d8:	430a      	orrs	r2, r1
 80071da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2104      	movs	r1, #4
 80071e8:	438a      	bics	r2, r1
 80071ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	691a      	ldr	r2, [r3, #16]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80071fe:	e027      	b.n	8007250 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	0011      	movs	r1, r2
 8007208:	0018      	movs	r0, r3
 800720a:	f000 fb29 	bl	8007860 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2180      	movs	r1, #128	@ 0x80
 800721a:	0109      	lsls	r1, r1, #4
 800721c:	430a      	orrs	r2, r1
 800721e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4910      	ldr	r1, [pc, #64]	@ (800726c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800722c:	400a      	ands	r2, r1
 800722e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	021a      	lsls	r2, r3, #8
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	430a      	orrs	r2, r1
 8007242:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007244:	e004      	b.n	8007250 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8007246:	2317      	movs	r3, #23
 8007248:	18fb      	adds	r3, r7, r3
 800724a:	2201      	movs	r2, #1
 800724c:	701a      	strb	r2, [r3, #0]
      break;
 800724e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	223c      	movs	r2, #60	@ 0x3c
 8007254:	2100      	movs	r1, #0
 8007256:	5499      	strb	r1, [r3, r2]

  return status;
 8007258:	2317      	movs	r3, #23
 800725a:	18fb      	adds	r3, r7, r3
 800725c:	781b      	ldrb	r3, [r3, #0]
}
 800725e:	0018      	movs	r0, r3
 8007260:	46bd      	mov	sp, r7
 8007262:	b006      	add	sp, #24
 8007264:	bd80      	pop	{r7, pc}
 8007266:	46c0      	nop			@ (mov r8, r8)
 8007268:	08009d14 	.word	0x08009d14
 800726c:	fffffbff 	.word	0xfffffbff

08007270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a3f      	ldr	r2, [pc, #252]	@ (8007380 <TIM_Base_SetConfig+0x110>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d00c      	beq.n	80072a2 <TIM_Base_SetConfig+0x32>
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	2380      	movs	r3, #128	@ 0x80
 800728c:	05db      	lsls	r3, r3, #23
 800728e:	429a      	cmp	r2, r3
 8007290:	d007      	beq.n	80072a2 <TIM_Base_SetConfig+0x32>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a3b      	ldr	r2, [pc, #236]	@ (8007384 <TIM_Base_SetConfig+0x114>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d003      	beq.n	80072a2 <TIM_Base_SetConfig+0x32>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a3a      	ldr	r2, [pc, #232]	@ (8007388 <TIM_Base_SetConfig+0x118>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d108      	bne.n	80072b4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2270      	movs	r2, #112	@ 0x70
 80072a6:	4393      	bics	r3, r2
 80072a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a32      	ldr	r2, [pc, #200]	@ (8007380 <TIM_Base_SetConfig+0x110>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d01c      	beq.n	80072f6 <TIM_Base_SetConfig+0x86>
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	2380      	movs	r3, #128	@ 0x80
 80072c0:	05db      	lsls	r3, r3, #23
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d017      	beq.n	80072f6 <TIM_Base_SetConfig+0x86>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a2e      	ldr	r2, [pc, #184]	@ (8007384 <TIM_Base_SetConfig+0x114>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d013      	beq.n	80072f6 <TIM_Base_SetConfig+0x86>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a2d      	ldr	r2, [pc, #180]	@ (8007388 <TIM_Base_SetConfig+0x118>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d00f      	beq.n	80072f6 <TIM_Base_SetConfig+0x86>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a2c      	ldr	r2, [pc, #176]	@ (800738c <TIM_Base_SetConfig+0x11c>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d00b      	beq.n	80072f6 <TIM_Base_SetConfig+0x86>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a2b      	ldr	r2, [pc, #172]	@ (8007390 <TIM_Base_SetConfig+0x120>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d007      	beq.n	80072f6 <TIM_Base_SetConfig+0x86>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a2a      	ldr	r2, [pc, #168]	@ (8007394 <TIM_Base_SetConfig+0x124>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d003      	beq.n	80072f6 <TIM_Base_SetConfig+0x86>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a29      	ldr	r2, [pc, #164]	@ (8007398 <TIM_Base_SetConfig+0x128>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d108      	bne.n	8007308 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	4a28      	ldr	r2, [pc, #160]	@ (800739c <TIM_Base_SetConfig+0x12c>)
 80072fa:	4013      	ands	r3, r2
 80072fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	4313      	orrs	r3, r2
 8007306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2280      	movs	r2, #128	@ 0x80
 800730c:	4393      	bics	r3, r2
 800730e:	001a      	movs	r2, r3
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	4313      	orrs	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	689a      	ldr	r2, [r3, #8]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a13      	ldr	r2, [pc, #76]	@ (8007380 <TIM_Base_SetConfig+0x110>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d00b      	beq.n	800734e <TIM_Base_SetConfig+0xde>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a15      	ldr	r2, [pc, #84]	@ (8007390 <TIM_Base_SetConfig+0x120>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d007      	beq.n	800734e <TIM_Base_SetConfig+0xde>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a14      	ldr	r2, [pc, #80]	@ (8007394 <TIM_Base_SetConfig+0x124>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d003      	beq.n	800734e <TIM_Base_SetConfig+0xde>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a13      	ldr	r2, [pc, #76]	@ (8007398 <TIM_Base_SetConfig+0x128>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d103      	bne.n	8007356 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	691a      	ldr	r2, [r3, #16]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2201      	movs	r2, #1
 800735a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	2201      	movs	r2, #1
 8007362:	4013      	ands	r3, r2
 8007364:	2b01      	cmp	r3, #1
 8007366:	d106      	bne.n	8007376 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	2201      	movs	r2, #1
 800736e:	4393      	bics	r3, r2
 8007370:	001a      	movs	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	611a      	str	r2, [r3, #16]
  }
}
 8007376:	46c0      	nop			@ (mov r8, r8)
 8007378:	46bd      	mov	sp, r7
 800737a:	b004      	add	sp, #16
 800737c:	bd80      	pop	{r7, pc}
 800737e:	46c0      	nop			@ (mov r8, r8)
 8007380:	40012c00 	.word	0x40012c00
 8007384:	40000400 	.word	0x40000400
 8007388:	40000800 	.word	0x40000800
 800738c:	40002000 	.word	0x40002000
 8007390:	40014000 	.word	0x40014000
 8007394:	40014400 	.word	0x40014400
 8007398:	40014800 	.word	0x40014800
 800739c:	fffffcff 	.word	0xfffffcff

080073a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a1b      	ldr	r3, [r3, #32]
 80073b4:	2201      	movs	r2, #1
 80073b6:	4393      	bics	r3, r2
 80073b8:	001a      	movs	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	4a32      	ldr	r2, [pc, #200]	@ (8007498 <TIM_OC1_SetConfig+0xf8>)
 80073ce:	4013      	ands	r3, r2
 80073d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2203      	movs	r2, #3
 80073d6:	4393      	bics	r3, r2
 80073d8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	2202      	movs	r2, #2
 80073e8:	4393      	bics	r3, r2
 80073ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a28      	ldr	r2, [pc, #160]	@ (800749c <TIM_OC1_SetConfig+0xfc>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d00b      	beq.n	8007416 <TIM_OC1_SetConfig+0x76>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a27      	ldr	r2, [pc, #156]	@ (80074a0 <TIM_OC1_SetConfig+0x100>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d007      	beq.n	8007416 <TIM_OC1_SetConfig+0x76>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a26      	ldr	r2, [pc, #152]	@ (80074a4 <TIM_OC1_SetConfig+0x104>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d003      	beq.n	8007416 <TIM_OC1_SetConfig+0x76>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a25      	ldr	r2, [pc, #148]	@ (80074a8 <TIM_OC1_SetConfig+0x108>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d10c      	bne.n	8007430 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	2208      	movs	r2, #8
 800741a:	4393      	bics	r3, r2
 800741c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	4313      	orrs	r3, r2
 8007426:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	2204      	movs	r2, #4
 800742c:	4393      	bics	r3, r2
 800742e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a1a      	ldr	r2, [pc, #104]	@ (800749c <TIM_OC1_SetConfig+0xfc>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d00b      	beq.n	8007450 <TIM_OC1_SetConfig+0xb0>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a19      	ldr	r2, [pc, #100]	@ (80074a0 <TIM_OC1_SetConfig+0x100>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d007      	beq.n	8007450 <TIM_OC1_SetConfig+0xb0>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a18      	ldr	r2, [pc, #96]	@ (80074a4 <TIM_OC1_SetConfig+0x104>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d003      	beq.n	8007450 <TIM_OC1_SetConfig+0xb0>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a17      	ldr	r2, [pc, #92]	@ (80074a8 <TIM_OC1_SetConfig+0x108>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d111      	bne.n	8007474 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	4a16      	ldr	r2, [pc, #88]	@ (80074ac <TIM_OC1_SetConfig+0x10c>)
 8007454:	4013      	ands	r3, r2
 8007456:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	4a15      	ldr	r2, [pc, #84]	@ (80074b0 <TIM_OC1_SetConfig+0x110>)
 800745c:	4013      	ands	r3, r2
 800745e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	4313      	orrs	r3, r2
 8007468:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	4313      	orrs	r3, r2
 8007472:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	685a      	ldr	r2, [r3, #4]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	621a      	str	r2, [r3, #32]
}
 800748e:	46c0      	nop			@ (mov r8, r8)
 8007490:	46bd      	mov	sp, r7
 8007492:	b006      	add	sp, #24
 8007494:	bd80      	pop	{r7, pc}
 8007496:	46c0      	nop			@ (mov r8, r8)
 8007498:	fffeff8f 	.word	0xfffeff8f
 800749c:	40012c00 	.word	0x40012c00
 80074a0:	40014000 	.word	0x40014000
 80074a4:	40014400 	.word	0x40014400
 80074a8:	40014800 	.word	0x40014800
 80074ac:	fffffeff 	.word	0xfffffeff
 80074b0:	fffffdff 	.word	0xfffffdff

080074b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a1b      	ldr	r3, [r3, #32]
 80074c8:	2210      	movs	r2, #16
 80074ca:	4393      	bics	r3, r2
 80074cc:	001a      	movs	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	4a2e      	ldr	r2, [pc, #184]	@ (800759c <TIM_OC2_SetConfig+0xe8>)
 80074e2:	4013      	ands	r3, r2
 80074e4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	4a2d      	ldr	r2, [pc, #180]	@ (80075a0 <TIM_OC2_SetConfig+0xec>)
 80074ea:	4013      	ands	r3, r2
 80074ec:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	021b      	lsls	r3, r3, #8
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2220      	movs	r2, #32
 80074fe:	4393      	bics	r3, r2
 8007500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	011b      	lsls	r3, r3, #4
 8007508:	697a      	ldr	r2, [r7, #20]
 800750a:	4313      	orrs	r3, r2
 800750c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a24      	ldr	r2, [pc, #144]	@ (80075a4 <TIM_OC2_SetConfig+0xf0>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d10d      	bne.n	8007532 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	2280      	movs	r2, #128	@ 0x80
 800751a:	4393      	bics	r3, r2
 800751c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	4313      	orrs	r3, r2
 8007528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2240      	movs	r2, #64	@ 0x40
 800752e:	4393      	bics	r3, r2
 8007530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a1b      	ldr	r2, [pc, #108]	@ (80075a4 <TIM_OC2_SetConfig+0xf0>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d00b      	beq.n	8007552 <TIM_OC2_SetConfig+0x9e>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a1a      	ldr	r2, [pc, #104]	@ (80075a8 <TIM_OC2_SetConfig+0xf4>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d007      	beq.n	8007552 <TIM_OC2_SetConfig+0x9e>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a19      	ldr	r2, [pc, #100]	@ (80075ac <TIM_OC2_SetConfig+0xf8>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d003      	beq.n	8007552 <TIM_OC2_SetConfig+0x9e>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a18      	ldr	r2, [pc, #96]	@ (80075b0 <TIM_OC2_SetConfig+0xfc>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d113      	bne.n	800757a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	4a17      	ldr	r2, [pc, #92]	@ (80075b4 <TIM_OC2_SetConfig+0x100>)
 8007556:	4013      	ands	r3, r2
 8007558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	4a16      	ldr	r2, [pc, #88]	@ (80075b8 <TIM_OC2_SetConfig+0x104>)
 800755e:	4013      	ands	r3, r2
 8007560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	4313      	orrs	r3, r2
 800756c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	4313      	orrs	r3, r2
 8007578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	621a      	str	r2, [r3, #32]
}
 8007594:	46c0      	nop			@ (mov r8, r8)
 8007596:	46bd      	mov	sp, r7
 8007598:	b006      	add	sp, #24
 800759a:	bd80      	pop	{r7, pc}
 800759c:	feff8fff 	.word	0xfeff8fff
 80075a0:	fffffcff 	.word	0xfffffcff
 80075a4:	40012c00 	.word	0x40012c00
 80075a8:	40014000 	.word	0x40014000
 80075ac:	40014400 	.word	0x40014400
 80075b0:	40014800 	.word	0x40014800
 80075b4:	fffffbff 	.word	0xfffffbff
 80075b8:	fffff7ff 	.word	0xfffff7ff

080075bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6a1b      	ldr	r3, [r3, #32]
 80075d0:	4a33      	ldr	r2, [pc, #204]	@ (80076a0 <TIM_OC3_SetConfig+0xe4>)
 80075d2:	401a      	ands	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	69db      	ldr	r3, [r3, #28]
 80075e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	4a2f      	ldr	r2, [pc, #188]	@ (80076a4 <TIM_OC3_SetConfig+0xe8>)
 80075e8:	4013      	ands	r3, r2
 80075ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2203      	movs	r2, #3
 80075f0:	4393      	bics	r3, r2
 80075f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	4a29      	ldr	r2, [pc, #164]	@ (80076a8 <TIM_OC3_SetConfig+0xec>)
 8007602:	4013      	ands	r3, r2
 8007604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	021b      	lsls	r3, r3, #8
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	4313      	orrs	r3, r2
 8007610:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a25      	ldr	r2, [pc, #148]	@ (80076ac <TIM_OC3_SetConfig+0xf0>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d10d      	bne.n	8007636 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	4a24      	ldr	r2, [pc, #144]	@ (80076b0 <TIM_OC3_SetConfig+0xf4>)
 800761e:	4013      	ands	r3, r2
 8007620:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	021b      	lsls	r3, r3, #8
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	4313      	orrs	r3, r2
 800762c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	4a20      	ldr	r2, [pc, #128]	@ (80076b4 <TIM_OC3_SetConfig+0xf8>)
 8007632:	4013      	ands	r3, r2
 8007634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a1c      	ldr	r2, [pc, #112]	@ (80076ac <TIM_OC3_SetConfig+0xf0>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d00b      	beq.n	8007656 <TIM_OC3_SetConfig+0x9a>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a1d      	ldr	r2, [pc, #116]	@ (80076b8 <TIM_OC3_SetConfig+0xfc>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d007      	beq.n	8007656 <TIM_OC3_SetConfig+0x9a>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a1c      	ldr	r2, [pc, #112]	@ (80076bc <TIM_OC3_SetConfig+0x100>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d003      	beq.n	8007656 <TIM_OC3_SetConfig+0x9a>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a1b      	ldr	r2, [pc, #108]	@ (80076c0 <TIM_OC3_SetConfig+0x104>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d113      	bne.n	800767e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	4a1a      	ldr	r2, [pc, #104]	@ (80076c4 <TIM_OC3_SetConfig+0x108>)
 800765a:	4013      	ands	r3, r2
 800765c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	4a19      	ldr	r2, [pc, #100]	@ (80076c8 <TIM_OC3_SetConfig+0x10c>)
 8007662:	4013      	ands	r3, r2
 8007664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	011b      	lsls	r3, r3, #4
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	4313      	orrs	r3, r2
 8007670:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	011b      	lsls	r3, r3, #4
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	4313      	orrs	r3, r2
 800767c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	685a      	ldr	r2, [r3, #4]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	621a      	str	r2, [r3, #32]
}
 8007698:	46c0      	nop			@ (mov r8, r8)
 800769a:	46bd      	mov	sp, r7
 800769c:	b006      	add	sp, #24
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	fffffeff 	.word	0xfffffeff
 80076a4:	fffeff8f 	.word	0xfffeff8f
 80076a8:	fffffdff 	.word	0xfffffdff
 80076ac:	40012c00 	.word	0x40012c00
 80076b0:	fffff7ff 	.word	0xfffff7ff
 80076b4:	fffffbff 	.word	0xfffffbff
 80076b8:	40014000 	.word	0x40014000
 80076bc:	40014400 	.word	0x40014400
 80076c0:	40014800 	.word	0x40014800
 80076c4:	ffffefff 	.word	0xffffefff
 80076c8:	ffffdfff 	.word	0xffffdfff

080076cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a1b      	ldr	r3, [r3, #32]
 80076e0:	4a26      	ldr	r2, [pc, #152]	@ (800777c <TIM_OC4_SetConfig+0xb0>)
 80076e2:	401a      	ands	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	69db      	ldr	r3, [r3, #28]
 80076f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	4a22      	ldr	r2, [pc, #136]	@ (8007780 <TIM_OC4_SetConfig+0xb4>)
 80076f8:	4013      	ands	r3, r2
 80076fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	4a21      	ldr	r2, [pc, #132]	@ (8007784 <TIM_OC4_SetConfig+0xb8>)
 8007700:	4013      	ands	r3, r2
 8007702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	021b      	lsls	r3, r3, #8
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	4313      	orrs	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	4a1d      	ldr	r2, [pc, #116]	@ (8007788 <TIM_OC4_SetConfig+0xbc>)
 8007714:	4013      	ands	r3, r2
 8007716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	031b      	lsls	r3, r3, #12
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	4313      	orrs	r3, r2
 8007722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a19      	ldr	r2, [pc, #100]	@ (800778c <TIM_OC4_SetConfig+0xc0>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d00b      	beq.n	8007744 <TIM_OC4_SetConfig+0x78>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a18      	ldr	r2, [pc, #96]	@ (8007790 <TIM_OC4_SetConfig+0xc4>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d007      	beq.n	8007744 <TIM_OC4_SetConfig+0x78>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a17      	ldr	r2, [pc, #92]	@ (8007794 <TIM_OC4_SetConfig+0xc8>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d003      	beq.n	8007744 <TIM_OC4_SetConfig+0x78>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a16      	ldr	r2, [pc, #88]	@ (8007798 <TIM_OC4_SetConfig+0xcc>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d109      	bne.n	8007758 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	4a15      	ldr	r2, [pc, #84]	@ (800779c <TIM_OC4_SetConfig+0xd0>)
 8007748:	4013      	ands	r3, r2
 800774a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	695b      	ldr	r3, [r3, #20]
 8007750:	019b      	lsls	r3, r3, #6
 8007752:	697a      	ldr	r2, [r7, #20]
 8007754:	4313      	orrs	r3, r2
 8007756:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	621a      	str	r2, [r3, #32]
}
 8007772:	46c0      	nop			@ (mov r8, r8)
 8007774:	46bd      	mov	sp, r7
 8007776:	b006      	add	sp, #24
 8007778:	bd80      	pop	{r7, pc}
 800777a:	46c0      	nop			@ (mov r8, r8)
 800777c:	ffffefff 	.word	0xffffefff
 8007780:	feff8fff 	.word	0xfeff8fff
 8007784:	fffffcff 	.word	0xfffffcff
 8007788:	ffffdfff 	.word	0xffffdfff
 800778c:	40012c00 	.word	0x40012c00
 8007790:	40014000 	.word	0x40014000
 8007794:	40014400 	.word	0x40014400
 8007798:	40014800 	.word	0x40014800
 800779c:	ffffbfff 	.word	0xffffbfff

080077a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b086      	sub	sp, #24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a1b      	ldr	r3, [r3, #32]
 80077b4:	4a23      	ldr	r2, [pc, #140]	@ (8007844 <TIM_OC5_SetConfig+0xa4>)
 80077b6:	401a      	ands	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	4a1f      	ldr	r2, [pc, #124]	@ (8007848 <TIM_OC5_SetConfig+0xa8>)
 80077cc:	4013      	ands	r3, r2
 80077ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	4a1b      	ldr	r2, [pc, #108]	@ (800784c <TIM_OC5_SetConfig+0xac>)
 80077de:	4013      	ands	r3, r2
 80077e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	041b      	lsls	r3, r3, #16
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a17      	ldr	r2, [pc, #92]	@ (8007850 <TIM_OC5_SetConfig+0xb0>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d00b      	beq.n	800780e <TIM_OC5_SetConfig+0x6e>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a16      	ldr	r2, [pc, #88]	@ (8007854 <TIM_OC5_SetConfig+0xb4>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d007      	beq.n	800780e <TIM_OC5_SetConfig+0x6e>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a15      	ldr	r2, [pc, #84]	@ (8007858 <TIM_OC5_SetConfig+0xb8>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d003      	beq.n	800780e <TIM_OC5_SetConfig+0x6e>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a14      	ldr	r2, [pc, #80]	@ (800785c <TIM_OC5_SetConfig+0xbc>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d109      	bne.n	8007822 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	4a0c      	ldr	r2, [pc, #48]	@ (8007844 <TIM_OC5_SetConfig+0xa4>)
 8007812:	4013      	ands	r3, r2
 8007814:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	695b      	ldr	r3, [r3, #20]
 800781a:	021b      	lsls	r3, r3, #8
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	4313      	orrs	r3, r2
 8007820:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	697a      	ldr	r2, [r7, #20]
 8007826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	621a      	str	r2, [r3, #32]
}
 800783c:	46c0      	nop			@ (mov r8, r8)
 800783e:	46bd      	mov	sp, r7
 8007840:	b006      	add	sp, #24
 8007842:	bd80      	pop	{r7, pc}
 8007844:	fffeffff 	.word	0xfffeffff
 8007848:	fffeff8f 	.word	0xfffeff8f
 800784c:	fffdffff 	.word	0xfffdffff
 8007850:	40012c00 	.word	0x40012c00
 8007854:	40014000 	.word	0x40014000
 8007858:	40014400 	.word	0x40014400
 800785c:	40014800 	.word	0x40014800

08007860 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	4a24      	ldr	r2, [pc, #144]	@ (8007908 <TIM_OC6_SetConfig+0xa8>)
 8007876:	401a      	ands	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	4a20      	ldr	r2, [pc, #128]	@ (800790c <TIM_OC6_SetConfig+0xac>)
 800788c:	4013      	ands	r3, r2
 800788e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	021b      	lsls	r3, r3, #8
 8007896:	68fa      	ldr	r2, [r7, #12]
 8007898:	4313      	orrs	r3, r2
 800789a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	4a1c      	ldr	r2, [pc, #112]	@ (8007910 <TIM_OC6_SetConfig+0xb0>)
 80078a0:	4013      	ands	r3, r2
 80078a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	051b      	lsls	r3, r3, #20
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a18      	ldr	r2, [pc, #96]	@ (8007914 <TIM_OC6_SetConfig+0xb4>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d00b      	beq.n	80078d0 <TIM_OC6_SetConfig+0x70>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a17      	ldr	r2, [pc, #92]	@ (8007918 <TIM_OC6_SetConfig+0xb8>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d007      	beq.n	80078d0 <TIM_OC6_SetConfig+0x70>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a16      	ldr	r2, [pc, #88]	@ (800791c <TIM_OC6_SetConfig+0xbc>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d003      	beq.n	80078d0 <TIM_OC6_SetConfig+0x70>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a15      	ldr	r2, [pc, #84]	@ (8007920 <TIM_OC6_SetConfig+0xc0>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d109      	bne.n	80078e4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	4a14      	ldr	r2, [pc, #80]	@ (8007924 <TIM_OC6_SetConfig+0xc4>)
 80078d4:	4013      	ands	r3, r2
 80078d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	029b      	lsls	r3, r3, #10
 80078de:	697a      	ldr	r2, [r7, #20]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	621a      	str	r2, [r3, #32]
}
 80078fe:	46c0      	nop			@ (mov r8, r8)
 8007900:	46bd      	mov	sp, r7
 8007902:	b006      	add	sp, #24
 8007904:	bd80      	pop	{r7, pc}
 8007906:	46c0      	nop			@ (mov r8, r8)
 8007908:	ffefffff 	.word	0xffefffff
 800790c:	feff8fff 	.word	0xfeff8fff
 8007910:	ffdfffff 	.word	0xffdfffff
 8007914:	40012c00 	.word	0x40012c00
 8007918:	40014000 	.word	0x40014000
 800791c:	40014400 	.word	0x40014400
 8007920:	40014800 	.word	0x40014800
 8007924:	fffbffff 	.word	0xfffbffff

08007928 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	221f      	movs	r2, #31
 8007938:	4013      	ands	r3, r2
 800793a:	2201      	movs	r2, #1
 800793c:	409a      	lsls	r2, r3
 800793e:	0013      	movs	r3, r2
 8007940:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	43d2      	mvns	r2, r2
 800794a:	401a      	ands	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6a1a      	ldr	r2, [r3, #32]
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	211f      	movs	r1, #31
 8007958:	400b      	ands	r3, r1
 800795a:	6879      	ldr	r1, [r7, #4]
 800795c:	4099      	lsls	r1, r3
 800795e:	000b      	movs	r3, r1
 8007960:	431a      	orrs	r2, r3
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	621a      	str	r2, [r3, #32]
}
 8007966:	46c0      	nop			@ (mov r8, r8)
 8007968:	46bd      	mov	sp, r7
 800796a:	b006      	add	sp, #24
 800796c:	bd80      	pop	{r7, pc}
	...

08007970 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800797a:	2300      	movs	r3, #0
 800797c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	223c      	movs	r2, #60	@ 0x3c
 8007982:	5c9b      	ldrb	r3, [r3, r2]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d101      	bne.n	800798c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007988:	2302      	movs	r3, #2
 800798a:	e06f      	b.n	8007a6c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	223c      	movs	r2, #60	@ 0x3c
 8007990:	2101      	movs	r1, #1
 8007992:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	22ff      	movs	r2, #255	@ 0xff
 8007998:	4393      	bics	r3, r2
 800799a:	001a      	movs	r2, r3
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	4a33      	ldr	r2, [pc, #204]	@ (8007a74 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80079a8:	401a      	ands	r2, r3
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	4a30      	ldr	r2, [pc, #192]	@ (8007a78 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80079b6:	401a      	ands	r2, r3
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	4313      	orrs	r3, r2
 80079be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	4a2e      	ldr	r2, [pc, #184]	@ (8007a7c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80079c4:	401a      	ands	r2, r3
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	4a2b      	ldr	r2, [pc, #172]	@ (8007a80 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80079d2:	401a      	ands	r2, r3
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	4313      	orrs	r3, r2
 80079da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	4a29      	ldr	r2, [pc, #164]	@ (8007a84 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80079e0:	401a      	ands	r2, r3
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	4a26      	ldr	r2, [pc, #152]	@ (8007a88 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80079ee:	401a      	ands	r2, r3
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079f4:	4313      	orrs	r3, r2
 80079f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4a24      	ldr	r2, [pc, #144]	@ (8007a8c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80079fc:	401a      	ands	r2, r3
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	041b      	lsls	r3, r3, #16
 8007a04:	4313      	orrs	r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	4a21      	ldr	r2, [pc, #132]	@ (8007a90 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007a0c:	401a      	ands	r2, r3
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	69db      	ldr	r3, [r3, #28]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8007a94 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d11c      	bne.n	8007a5a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	4a1d      	ldr	r2, [pc, #116]	@ (8007a98 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8007a24:	401a      	ands	r2, r3
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a2a:	051b      	lsls	r3, r3, #20
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	4a1a      	ldr	r2, [pc, #104]	@ (8007a9c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8007a34:	401a      	ands	r2, r3
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	4a17      	ldr	r2, [pc, #92]	@ (8007aa0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8007a42:	401a      	ands	r2, r3
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	4a15      	ldr	r2, [pc, #84]	@ (8007aa4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8007a50:	401a      	ands	r2, r3
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a56:	4313      	orrs	r3, r2
 8007a58:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	223c      	movs	r2, #60	@ 0x3c
 8007a66:	2100      	movs	r1, #0
 8007a68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	0018      	movs	r0, r3
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	b004      	add	sp, #16
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	fffffcff 	.word	0xfffffcff
 8007a78:	fffffbff 	.word	0xfffffbff
 8007a7c:	fffff7ff 	.word	0xfffff7ff
 8007a80:	ffffefff 	.word	0xffffefff
 8007a84:	ffffdfff 	.word	0xffffdfff
 8007a88:	ffffbfff 	.word	0xffffbfff
 8007a8c:	fff0ffff 	.word	0xfff0ffff
 8007a90:	efffffff 	.word	0xefffffff
 8007a94:	40012c00 	.word	0x40012c00
 8007a98:	ff0fffff 	.word	0xff0fffff
 8007a9c:	feffffff 	.word	0xfeffffff
 8007aa0:	fdffffff 	.word	0xfdffffff
 8007aa4:	dfffffff 	.word	0xdfffffff

08007aa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e046      	b.n	8007b48 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2288      	movs	r2, #136	@ 0x88
 8007abe:	589b      	ldr	r3, [r3, r2]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d107      	bne.n	8007ad4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2284      	movs	r2, #132	@ 0x84
 8007ac8:	2100      	movs	r1, #0
 8007aca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	0018      	movs	r0, r3
 8007ad0:	f7fc f82a 	bl	8003b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2288      	movs	r2, #136	@ 0x88
 8007ad8:	2124      	movs	r1, #36	@ 0x24
 8007ada:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	438a      	bics	r2, r1
 8007aea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d003      	beq.n	8007afc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	0018      	movs	r0, r3
 8007af8:	f000 fc26 	bl	8008348 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	0018      	movs	r0, r3
 8007b00:	f000 f8cc 	bl	8007c9c <UART_SetConfig>
 8007b04:	0003      	movs	r3, r0
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d101      	bne.n	8007b0e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e01c      	b.n	8007b48 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	490d      	ldr	r1, [pc, #52]	@ (8007b50 <HAL_UART_Init+0xa8>)
 8007b1a:	400a      	ands	r2, r1
 8007b1c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	689a      	ldr	r2, [r3, #8]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	212a      	movs	r1, #42	@ 0x2a
 8007b2a:	438a      	bics	r2, r1
 8007b2c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2101      	movs	r1, #1
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	0018      	movs	r0, r3
 8007b42:	f000 fcb5 	bl	80084b0 <UART_CheckIdleState>
 8007b46:	0003      	movs	r3, r0
}
 8007b48:	0018      	movs	r0, r3
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	b002      	add	sp, #8
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	ffffb7ff 	.word	0xffffb7ff

08007b54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b08a      	sub	sp, #40	@ 0x28
 8007b58:	af02      	add	r7, sp, #8
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	603b      	str	r3, [r7, #0]
 8007b60:	1dbb      	adds	r3, r7, #6
 8007b62:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2288      	movs	r2, #136	@ 0x88
 8007b68:	589b      	ldr	r3, [r3, r2]
 8007b6a:	2b20      	cmp	r3, #32
 8007b6c:	d000      	beq.n	8007b70 <HAL_UART_Transmit+0x1c>
 8007b6e:	e090      	b.n	8007c92 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d003      	beq.n	8007b7e <HAL_UART_Transmit+0x2a>
 8007b76:	1dbb      	adds	r3, r7, #6
 8007b78:	881b      	ldrh	r3, [r3, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e088      	b.n	8007c94 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	689a      	ldr	r2, [r3, #8]
 8007b86:	2380      	movs	r3, #128	@ 0x80
 8007b88:	015b      	lsls	r3, r3, #5
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d109      	bne.n	8007ba2 <HAL_UART_Transmit+0x4e>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d105      	bne.n	8007ba2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	d001      	beq.n	8007ba2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e078      	b.n	8007c94 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2290      	movs	r2, #144	@ 0x90
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2288      	movs	r2, #136	@ 0x88
 8007bae:	2121      	movs	r1, #33	@ 0x21
 8007bb0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bb2:	f7fc f96f 	bl	8003e94 <HAL_GetTick>
 8007bb6:	0003      	movs	r3, r0
 8007bb8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	1dba      	adds	r2, r7, #6
 8007bbe:	2154      	movs	r1, #84	@ 0x54
 8007bc0:	8812      	ldrh	r2, [r2, #0]
 8007bc2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	1dba      	adds	r2, r7, #6
 8007bc8:	2156      	movs	r1, #86	@ 0x56
 8007bca:	8812      	ldrh	r2, [r2, #0]
 8007bcc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	689a      	ldr	r2, [r3, #8]
 8007bd2:	2380      	movs	r3, #128	@ 0x80
 8007bd4:	015b      	lsls	r3, r3, #5
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d108      	bne.n	8007bec <HAL_UART_Transmit+0x98>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d104      	bne.n	8007bec <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8007be2:	2300      	movs	r3, #0
 8007be4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	61bb      	str	r3, [r7, #24]
 8007bea:	e003      	b.n	8007bf4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007bf4:	e030      	b.n	8007c58 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	9300      	str	r3, [sp, #0]
 8007bfe:	0013      	movs	r3, r2
 8007c00:	2200      	movs	r2, #0
 8007c02:	2180      	movs	r1, #128	@ 0x80
 8007c04:	f000 fcfe 	bl	8008604 <UART_WaitOnFlagUntilTimeout>
 8007c08:	1e03      	subs	r3, r0, #0
 8007c0a:	d005      	beq.n	8007c18 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2288      	movs	r2, #136	@ 0x88
 8007c10:	2120      	movs	r1, #32
 8007c12:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e03d      	b.n	8007c94 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10b      	bne.n	8007c36 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	001a      	movs	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	05d2      	lsls	r2, r2, #23
 8007c2a:	0dd2      	lsrs	r2, r2, #23
 8007c2c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	3302      	adds	r3, #2
 8007c32:	61bb      	str	r3, [r7, #24]
 8007c34:	e007      	b.n	8007c46 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	781a      	ldrb	r2, [r3, #0]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	3301      	adds	r3, #1
 8007c44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2256      	movs	r2, #86	@ 0x56
 8007c4a:	5a9b      	ldrh	r3, [r3, r2]
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	b299      	uxth	r1, r3
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2256      	movs	r2, #86	@ 0x56
 8007c56:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2256      	movs	r2, #86	@ 0x56
 8007c5c:	5a9b      	ldrh	r3, [r3, r2]
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1c8      	bne.n	8007bf6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	0013      	movs	r3, r2
 8007c6e:	2200      	movs	r2, #0
 8007c70:	2140      	movs	r1, #64	@ 0x40
 8007c72:	f000 fcc7 	bl	8008604 <UART_WaitOnFlagUntilTimeout>
 8007c76:	1e03      	subs	r3, r0, #0
 8007c78:	d005      	beq.n	8007c86 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2288      	movs	r2, #136	@ 0x88
 8007c7e:	2120      	movs	r1, #32
 8007c80:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8007c82:	2303      	movs	r3, #3
 8007c84:	e006      	b.n	8007c94 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2288      	movs	r2, #136	@ 0x88
 8007c8a:	2120      	movs	r1, #32
 8007c8c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	e000      	b.n	8007c94 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8007c92:	2302      	movs	r3, #2
  }
}
 8007c94:	0018      	movs	r0, r3
 8007c96:	46bd      	mov	sp, r7
 8007c98:	b008      	add	sp, #32
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c9c:	b5b0      	push	{r4, r5, r7, lr}
 8007c9e:	b090      	sub	sp, #64	@ 0x40
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ca4:	231a      	movs	r3, #26
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	189b      	adds	r3, r3, r2
 8007caa:	19db      	adds	r3, r3, r7
 8007cac:	2200      	movs	r2, #0
 8007cae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb2:	689a      	ldr	r2, [r3, #8]
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	431a      	orrs	r2, r3
 8007cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc2:	69db      	ldr	r3, [r3, #28]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4ac1      	ldr	r2, [pc, #772]	@ (8007fd4 <UART_SetConfig+0x338>)
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	0019      	movs	r1, r3
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cda:	430b      	orrs	r3, r1
 8007cdc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	4abc      	ldr	r2, [pc, #752]	@ (8007fd8 <UART_SetConfig+0x33c>)
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	0018      	movs	r0, r3
 8007cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cec:	68d9      	ldr	r1, [r3, #12]
 8007cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	0003      	movs	r3, r0
 8007cf4:	430b      	orrs	r3, r1
 8007cf6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4ab6      	ldr	r2, [pc, #728]	@ (8007fdc <UART_SetConfig+0x340>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d009      	beq.n	8007d1c <UART_SetConfig+0x80>
 8007d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4ab4      	ldr	r2, [pc, #720]	@ (8007fe0 <UART_SetConfig+0x344>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d004      	beq.n	8007d1c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	4ab0      	ldr	r2, [pc, #704]	@ (8007fe4 <UART_SetConfig+0x348>)
 8007d24:	4013      	ands	r3, r2
 8007d26:	0019      	movs	r1, r3
 8007d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d2e:	430b      	orrs	r3, r1
 8007d30:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d38:	220f      	movs	r2, #15
 8007d3a:	4393      	bics	r3, r2
 8007d3c:	0018      	movs	r0, r3
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d40:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	0003      	movs	r3, r0
 8007d48:	430b      	orrs	r3, r1
 8007d4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4aa5      	ldr	r2, [pc, #660]	@ (8007fe8 <UART_SetConfig+0x34c>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d131      	bne.n	8007dba <UART_SetConfig+0x11e>
 8007d56:	4ba5      	ldr	r3, [pc, #660]	@ (8007fec <UART_SetConfig+0x350>)
 8007d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d5a:	2203      	movs	r2, #3
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	2b03      	cmp	r3, #3
 8007d60:	d01d      	beq.n	8007d9e <UART_SetConfig+0x102>
 8007d62:	d823      	bhi.n	8007dac <UART_SetConfig+0x110>
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d00c      	beq.n	8007d82 <UART_SetConfig+0xe6>
 8007d68:	d820      	bhi.n	8007dac <UART_SetConfig+0x110>
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d002      	beq.n	8007d74 <UART_SetConfig+0xd8>
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d00e      	beq.n	8007d90 <UART_SetConfig+0xf4>
 8007d72:	e01b      	b.n	8007dac <UART_SetConfig+0x110>
 8007d74:	231b      	movs	r3, #27
 8007d76:	2220      	movs	r2, #32
 8007d78:	189b      	adds	r3, r3, r2
 8007d7a:	19db      	adds	r3, r3, r7
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	701a      	strb	r2, [r3, #0]
 8007d80:	e154      	b.n	800802c <UART_SetConfig+0x390>
 8007d82:	231b      	movs	r3, #27
 8007d84:	2220      	movs	r2, #32
 8007d86:	189b      	adds	r3, r3, r2
 8007d88:	19db      	adds	r3, r3, r7
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	701a      	strb	r2, [r3, #0]
 8007d8e:	e14d      	b.n	800802c <UART_SetConfig+0x390>
 8007d90:	231b      	movs	r3, #27
 8007d92:	2220      	movs	r2, #32
 8007d94:	189b      	adds	r3, r3, r2
 8007d96:	19db      	adds	r3, r3, r7
 8007d98:	2204      	movs	r2, #4
 8007d9a:	701a      	strb	r2, [r3, #0]
 8007d9c:	e146      	b.n	800802c <UART_SetConfig+0x390>
 8007d9e:	231b      	movs	r3, #27
 8007da0:	2220      	movs	r2, #32
 8007da2:	189b      	adds	r3, r3, r2
 8007da4:	19db      	adds	r3, r3, r7
 8007da6:	2208      	movs	r2, #8
 8007da8:	701a      	strb	r2, [r3, #0]
 8007daa:	e13f      	b.n	800802c <UART_SetConfig+0x390>
 8007dac:	231b      	movs	r3, #27
 8007dae:	2220      	movs	r2, #32
 8007db0:	189b      	adds	r3, r3, r2
 8007db2:	19db      	adds	r3, r3, r7
 8007db4:	2210      	movs	r2, #16
 8007db6:	701a      	strb	r2, [r3, #0]
 8007db8:	e138      	b.n	800802c <UART_SetConfig+0x390>
 8007dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a8c      	ldr	r2, [pc, #560]	@ (8007ff0 <UART_SetConfig+0x354>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d131      	bne.n	8007e28 <UART_SetConfig+0x18c>
 8007dc4:	4b89      	ldr	r3, [pc, #548]	@ (8007fec <UART_SetConfig+0x350>)
 8007dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dc8:	220c      	movs	r2, #12
 8007dca:	4013      	ands	r3, r2
 8007dcc:	2b0c      	cmp	r3, #12
 8007dce:	d01d      	beq.n	8007e0c <UART_SetConfig+0x170>
 8007dd0:	d823      	bhi.n	8007e1a <UART_SetConfig+0x17e>
 8007dd2:	2b08      	cmp	r3, #8
 8007dd4:	d00c      	beq.n	8007df0 <UART_SetConfig+0x154>
 8007dd6:	d820      	bhi.n	8007e1a <UART_SetConfig+0x17e>
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d002      	beq.n	8007de2 <UART_SetConfig+0x146>
 8007ddc:	2b04      	cmp	r3, #4
 8007dde:	d00e      	beq.n	8007dfe <UART_SetConfig+0x162>
 8007de0:	e01b      	b.n	8007e1a <UART_SetConfig+0x17e>
 8007de2:	231b      	movs	r3, #27
 8007de4:	2220      	movs	r2, #32
 8007de6:	189b      	adds	r3, r3, r2
 8007de8:	19db      	adds	r3, r3, r7
 8007dea:	2200      	movs	r2, #0
 8007dec:	701a      	strb	r2, [r3, #0]
 8007dee:	e11d      	b.n	800802c <UART_SetConfig+0x390>
 8007df0:	231b      	movs	r3, #27
 8007df2:	2220      	movs	r2, #32
 8007df4:	189b      	adds	r3, r3, r2
 8007df6:	19db      	adds	r3, r3, r7
 8007df8:	2202      	movs	r2, #2
 8007dfa:	701a      	strb	r2, [r3, #0]
 8007dfc:	e116      	b.n	800802c <UART_SetConfig+0x390>
 8007dfe:	231b      	movs	r3, #27
 8007e00:	2220      	movs	r2, #32
 8007e02:	189b      	adds	r3, r3, r2
 8007e04:	19db      	adds	r3, r3, r7
 8007e06:	2204      	movs	r2, #4
 8007e08:	701a      	strb	r2, [r3, #0]
 8007e0a:	e10f      	b.n	800802c <UART_SetConfig+0x390>
 8007e0c:	231b      	movs	r3, #27
 8007e0e:	2220      	movs	r2, #32
 8007e10:	189b      	adds	r3, r3, r2
 8007e12:	19db      	adds	r3, r3, r7
 8007e14:	2208      	movs	r2, #8
 8007e16:	701a      	strb	r2, [r3, #0]
 8007e18:	e108      	b.n	800802c <UART_SetConfig+0x390>
 8007e1a:	231b      	movs	r3, #27
 8007e1c:	2220      	movs	r2, #32
 8007e1e:	189b      	adds	r3, r3, r2
 8007e20:	19db      	adds	r3, r3, r7
 8007e22:	2210      	movs	r2, #16
 8007e24:	701a      	strb	r2, [r3, #0]
 8007e26:	e101      	b.n	800802c <UART_SetConfig+0x390>
 8007e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a71      	ldr	r2, [pc, #452]	@ (8007ff4 <UART_SetConfig+0x358>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d131      	bne.n	8007e96 <UART_SetConfig+0x1fa>
 8007e32:	4b6e      	ldr	r3, [pc, #440]	@ (8007fec <UART_SetConfig+0x350>)
 8007e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e36:	2230      	movs	r2, #48	@ 0x30
 8007e38:	4013      	ands	r3, r2
 8007e3a:	2b30      	cmp	r3, #48	@ 0x30
 8007e3c:	d01d      	beq.n	8007e7a <UART_SetConfig+0x1de>
 8007e3e:	d823      	bhi.n	8007e88 <UART_SetConfig+0x1ec>
 8007e40:	2b20      	cmp	r3, #32
 8007e42:	d00c      	beq.n	8007e5e <UART_SetConfig+0x1c2>
 8007e44:	d820      	bhi.n	8007e88 <UART_SetConfig+0x1ec>
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d002      	beq.n	8007e50 <UART_SetConfig+0x1b4>
 8007e4a:	2b10      	cmp	r3, #16
 8007e4c:	d00e      	beq.n	8007e6c <UART_SetConfig+0x1d0>
 8007e4e:	e01b      	b.n	8007e88 <UART_SetConfig+0x1ec>
 8007e50:	231b      	movs	r3, #27
 8007e52:	2220      	movs	r2, #32
 8007e54:	189b      	adds	r3, r3, r2
 8007e56:	19db      	adds	r3, r3, r7
 8007e58:	2200      	movs	r2, #0
 8007e5a:	701a      	strb	r2, [r3, #0]
 8007e5c:	e0e6      	b.n	800802c <UART_SetConfig+0x390>
 8007e5e:	231b      	movs	r3, #27
 8007e60:	2220      	movs	r2, #32
 8007e62:	189b      	adds	r3, r3, r2
 8007e64:	19db      	adds	r3, r3, r7
 8007e66:	2202      	movs	r2, #2
 8007e68:	701a      	strb	r2, [r3, #0]
 8007e6a:	e0df      	b.n	800802c <UART_SetConfig+0x390>
 8007e6c:	231b      	movs	r3, #27
 8007e6e:	2220      	movs	r2, #32
 8007e70:	189b      	adds	r3, r3, r2
 8007e72:	19db      	adds	r3, r3, r7
 8007e74:	2204      	movs	r2, #4
 8007e76:	701a      	strb	r2, [r3, #0]
 8007e78:	e0d8      	b.n	800802c <UART_SetConfig+0x390>
 8007e7a:	231b      	movs	r3, #27
 8007e7c:	2220      	movs	r2, #32
 8007e7e:	189b      	adds	r3, r3, r2
 8007e80:	19db      	adds	r3, r3, r7
 8007e82:	2208      	movs	r2, #8
 8007e84:	701a      	strb	r2, [r3, #0]
 8007e86:	e0d1      	b.n	800802c <UART_SetConfig+0x390>
 8007e88:	231b      	movs	r3, #27
 8007e8a:	2220      	movs	r2, #32
 8007e8c:	189b      	adds	r3, r3, r2
 8007e8e:	19db      	adds	r3, r3, r7
 8007e90:	2210      	movs	r2, #16
 8007e92:	701a      	strb	r2, [r3, #0]
 8007e94:	e0ca      	b.n	800802c <UART_SetConfig+0x390>
 8007e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a57      	ldr	r2, [pc, #348]	@ (8007ff8 <UART_SetConfig+0x35c>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d106      	bne.n	8007eae <UART_SetConfig+0x212>
 8007ea0:	231b      	movs	r3, #27
 8007ea2:	2220      	movs	r2, #32
 8007ea4:	189b      	adds	r3, r3, r2
 8007ea6:	19db      	adds	r3, r3, r7
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	701a      	strb	r2, [r3, #0]
 8007eac:	e0be      	b.n	800802c <UART_SetConfig+0x390>
 8007eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a52      	ldr	r2, [pc, #328]	@ (8007ffc <UART_SetConfig+0x360>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d106      	bne.n	8007ec6 <UART_SetConfig+0x22a>
 8007eb8:	231b      	movs	r3, #27
 8007eba:	2220      	movs	r2, #32
 8007ebc:	189b      	adds	r3, r3, r2
 8007ebe:	19db      	adds	r3, r3, r7
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	701a      	strb	r2, [r3, #0]
 8007ec4:	e0b2      	b.n	800802c <UART_SetConfig+0x390>
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a4d      	ldr	r2, [pc, #308]	@ (8008000 <UART_SetConfig+0x364>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d106      	bne.n	8007ede <UART_SetConfig+0x242>
 8007ed0:	231b      	movs	r3, #27
 8007ed2:	2220      	movs	r2, #32
 8007ed4:	189b      	adds	r3, r3, r2
 8007ed6:	19db      	adds	r3, r3, r7
 8007ed8:	2200      	movs	r2, #0
 8007eda:	701a      	strb	r2, [r3, #0]
 8007edc:	e0a6      	b.n	800802c <UART_SetConfig+0x390>
 8007ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a3e      	ldr	r2, [pc, #248]	@ (8007fdc <UART_SetConfig+0x340>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d13e      	bne.n	8007f66 <UART_SetConfig+0x2ca>
 8007ee8:	4b40      	ldr	r3, [pc, #256]	@ (8007fec <UART_SetConfig+0x350>)
 8007eea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007eec:	23c0      	movs	r3, #192	@ 0xc0
 8007eee:	011b      	lsls	r3, r3, #4
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	22c0      	movs	r2, #192	@ 0xc0
 8007ef4:	0112      	lsls	r2, r2, #4
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d027      	beq.n	8007f4a <UART_SetConfig+0x2ae>
 8007efa:	22c0      	movs	r2, #192	@ 0xc0
 8007efc:	0112      	lsls	r2, r2, #4
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d82a      	bhi.n	8007f58 <UART_SetConfig+0x2bc>
 8007f02:	2280      	movs	r2, #128	@ 0x80
 8007f04:	0112      	lsls	r2, r2, #4
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d011      	beq.n	8007f2e <UART_SetConfig+0x292>
 8007f0a:	2280      	movs	r2, #128	@ 0x80
 8007f0c:	0112      	lsls	r2, r2, #4
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d822      	bhi.n	8007f58 <UART_SetConfig+0x2bc>
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d004      	beq.n	8007f20 <UART_SetConfig+0x284>
 8007f16:	2280      	movs	r2, #128	@ 0x80
 8007f18:	00d2      	lsls	r2, r2, #3
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d00e      	beq.n	8007f3c <UART_SetConfig+0x2a0>
 8007f1e:	e01b      	b.n	8007f58 <UART_SetConfig+0x2bc>
 8007f20:	231b      	movs	r3, #27
 8007f22:	2220      	movs	r2, #32
 8007f24:	189b      	adds	r3, r3, r2
 8007f26:	19db      	adds	r3, r3, r7
 8007f28:	2200      	movs	r2, #0
 8007f2a:	701a      	strb	r2, [r3, #0]
 8007f2c:	e07e      	b.n	800802c <UART_SetConfig+0x390>
 8007f2e:	231b      	movs	r3, #27
 8007f30:	2220      	movs	r2, #32
 8007f32:	189b      	adds	r3, r3, r2
 8007f34:	19db      	adds	r3, r3, r7
 8007f36:	2202      	movs	r2, #2
 8007f38:	701a      	strb	r2, [r3, #0]
 8007f3a:	e077      	b.n	800802c <UART_SetConfig+0x390>
 8007f3c:	231b      	movs	r3, #27
 8007f3e:	2220      	movs	r2, #32
 8007f40:	189b      	adds	r3, r3, r2
 8007f42:	19db      	adds	r3, r3, r7
 8007f44:	2204      	movs	r2, #4
 8007f46:	701a      	strb	r2, [r3, #0]
 8007f48:	e070      	b.n	800802c <UART_SetConfig+0x390>
 8007f4a:	231b      	movs	r3, #27
 8007f4c:	2220      	movs	r2, #32
 8007f4e:	189b      	adds	r3, r3, r2
 8007f50:	19db      	adds	r3, r3, r7
 8007f52:	2208      	movs	r2, #8
 8007f54:	701a      	strb	r2, [r3, #0]
 8007f56:	e069      	b.n	800802c <UART_SetConfig+0x390>
 8007f58:	231b      	movs	r3, #27
 8007f5a:	2220      	movs	r2, #32
 8007f5c:	189b      	adds	r3, r3, r2
 8007f5e:	19db      	adds	r3, r3, r7
 8007f60:	2210      	movs	r2, #16
 8007f62:	701a      	strb	r2, [r3, #0]
 8007f64:	e062      	b.n	800802c <UART_SetConfig+0x390>
 8007f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a1d      	ldr	r2, [pc, #116]	@ (8007fe0 <UART_SetConfig+0x344>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d157      	bne.n	8008020 <UART_SetConfig+0x384>
 8007f70:	4b1e      	ldr	r3, [pc, #120]	@ (8007fec <UART_SetConfig+0x350>)
 8007f72:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007f74:	23c0      	movs	r3, #192	@ 0xc0
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	4013      	ands	r3, r2
 8007f7a:	22c0      	movs	r2, #192	@ 0xc0
 8007f7c:	0092      	lsls	r2, r2, #2
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d040      	beq.n	8008004 <UART_SetConfig+0x368>
 8007f82:	22c0      	movs	r2, #192	@ 0xc0
 8007f84:	0092      	lsls	r2, r2, #2
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d843      	bhi.n	8008012 <UART_SetConfig+0x376>
 8007f8a:	2280      	movs	r2, #128	@ 0x80
 8007f8c:	0092      	lsls	r2, r2, #2
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d011      	beq.n	8007fb6 <UART_SetConfig+0x31a>
 8007f92:	2280      	movs	r2, #128	@ 0x80
 8007f94:	0092      	lsls	r2, r2, #2
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d83b      	bhi.n	8008012 <UART_SetConfig+0x376>
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d004      	beq.n	8007fa8 <UART_SetConfig+0x30c>
 8007f9e:	2280      	movs	r2, #128	@ 0x80
 8007fa0:	0052      	lsls	r2, r2, #1
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d00e      	beq.n	8007fc4 <UART_SetConfig+0x328>
 8007fa6:	e034      	b.n	8008012 <UART_SetConfig+0x376>
 8007fa8:	231b      	movs	r3, #27
 8007faa:	2220      	movs	r2, #32
 8007fac:	189b      	adds	r3, r3, r2
 8007fae:	19db      	adds	r3, r3, r7
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	701a      	strb	r2, [r3, #0]
 8007fb4:	e03a      	b.n	800802c <UART_SetConfig+0x390>
 8007fb6:	231b      	movs	r3, #27
 8007fb8:	2220      	movs	r2, #32
 8007fba:	189b      	adds	r3, r3, r2
 8007fbc:	19db      	adds	r3, r3, r7
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	701a      	strb	r2, [r3, #0]
 8007fc2:	e033      	b.n	800802c <UART_SetConfig+0x390>
 8007fc4:	231b      	movs	r3, #27
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	189b      	adds	r3, r3, r2
 8007fca:	19db      	adds	r3, r3, r7
 8007fcc:	2204      	movs	r2, #4
 8007fce:	701a      	strb	r2, [r3, #0]
 8007fd0:	e02c      	b.n	800802c <UART_SetConfig+0x390>
 8007fd2:	46c0      	nop			@ (mov r8, r8)
 8007fd4:	cfff69f3 	.word	0xcfff69f3
 8007fd8:	ffffcfff 	.word	0xffffcfff
 8007fdc:	40008000 	.word	0x40008000
 8007fe0:	40008400 	.word	0x40008400
 8007fe4:	11fff4ff 	.word	0x11fff4ff
 8007fe8:	40013800 	.word	0x40013800
 8007fec:	40021000 	.word	0x40021000
 8007ff0:	40004400 	.word	0x40004400
 8007ff4:	40004800 	.word	0x40004800
 8007ff8:	40004c00 	.word	0x40004c00
 8007ffc:	40005000 	.word	0x40005000
 8008000:	40013c00 	.word	0x40013c00
 8008004:	231b      	movs	r3, #27
 8008006:	2220      	movs	r2, #32
 8008008:	189b      	adds	r3, r3, r2
 800800a:	19db      	adds	r3, r3, r7
 800800c:	2208      	movs	r2, #8
 800800e:	701a      	strb	r2, [r3, #0]
 8008010:	e00c      	b.n	800802c <UART_SetConfig+0x390>
 8008012:	231b      	movs	r3, #27
 8008014:	2220      	movs	r2, #32
 8008016:	189b      	adds	r3, r3, r2
 8008018:	19db      	adds	r3, r3, r7
 800801a:	2210      	movs	r2, #16
 800801c:	701a      	strb	r2, [r3, #0]
 800801e:	e005      	b.n	800802c <UART_SetConfig+0x390>
 8008020:	231b      	movs	r3, #27
 8008022:	2220      	movs	r2, #32
 8008024:	189b      	adds	r3, r3, r2
 8008026:	19db      	adds	r3, r3, r7
 8008028:	2210      	movs	r2, #16
 800802a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800802c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4ac1      	ldr	r2, [pc, #772]	@ (8008338 <UART_SetConfig+0x69c>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d005      	beq.n	8008042 <UART_SetConfig+0x3a6>
 8008036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4ac0      	ldr	r2, [pc, #768]	@ (800833c <UART_SetConfig+0x6a0>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d000      	beq.n	8008042 <UART_SetConfig+0x3a6>
 8008040:	e093      	b.n	800816a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008042:	231b      	movs	r3, #27
 8008044:	2220      	movs	r2, #32
 8008046:	189b      	adds	r3, r3, r2
 8008048:	19db      	adds	r3, r3, r7
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	2b08      	cmp	r3, #8
 800804e:	d015      	beq.n	800807c <UART_SetConfig+0x3e0>
 8008050:	dc18      	bgt.n	8008084 <UART_SetConfig+0x3e8>
 8008052:	2b04      	cmp	r3, #4
 8008054:	d00d      	beq.n	8008072 <UART_SetConfig+0x3d6>
 8008056:	dc15      	bgt.n	8008084 <UART_SetConfig+0x3e8>
 8008058:	2b00      	cmp	r3, #0
 800805a:	d002      	beq.n	8008062 <UART_SetConfig+0x3c6>
 800805c:	2b02      	cmp	r3, #2
 800805e:	d005      	beq.n	800806c <UART_SetConfig+0x3d0>
 8008060:	e010      	b.n	8008084 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008062:	f7fd fd39 	bl	8005ad8 <HAL_RCC_GetPCLK1Freq>
 8008066:	0003      	movs	r3, r0
 8008068:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800806a:	e014      	b.n	8008096 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800806c:	4bb4      	ldr	r3, [pc, #720]	@ (8008340 <UART_SetConfig+0x6a4>)
 800806e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008070:	e011      	b.n	8008096 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008072:	f7fd fca5 	bl	80059c0 <HAL_RCC_GetSysClockFreq>
 8008076:	0003      	movs	r3, r0
 8008078:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800807a:	e00c      	b.n	8008096 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800807c:	2380      	movs	r3, #128	@ 0x80
 800807e:	021b      	lsls	r3, r3, #8
 8008080:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008082:	e008      	b.n	8008096 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8008084:	2300      	movs	r3, #0
 8008086:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8008088:	231a      	movs	r3, #26
 800808a:	2220      	movs	r2, #32
 800808c:	189b      	adds	r3, r3, r2
 800808e:	19db      	adds	r3, r3, r7
 8008090:	2201      	movs	r2, #1
 8008092:	701a      	strb	r2, [r3, #0]
        break;
 8008094:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008098:	2b00      	cmp	r3, #0
 800809a:	d100      	bne.n	800809e <UART_SetConfig+0x402>
 800809c:	e135      	b.n	800830a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800809e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80080a2:	4ba8      	ldr	r3, [pc, #672]	@ (8008344 <UART_SetConfig+0x6a8>)
 80080a4:	0052      	lsls	r2, r2, #1
 80080a6:	5ad3      	ldrh	r3, [r2, r3]
 80080a8:	0019      	movs	r1, r3
 80080aa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80080ac:	f7f8 f83c 	bl	8000128 <__udivsi3>
 80080b0:	0003      	movs	r3, r0
 80080b2:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	0013      	movs	r3, r2
 80080ba:	005b      	lsls	r3, r3, #1
 80080bc:	189b      	adds	r3, r3, r2
 80080be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d305      	bcc.n	80080d0 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80080c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d906      	bls.n	80080de <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80080d0:	231a      	movs	r3, #26
 80080d2:	2220      	movs	r2, #32
 80080d4:	189b      	adds	r3, r3, r2
 80080d6:	19db      	adds	r3, r3, r7
 80080d8:	2201      	movs	r2, #1
 80080da:	701a      	strb	r2, [r3, #0]
 80080dc:	e044      	b.n	8008168 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080e0:	61bb      	str	r3, [r7, #24]
 80080e2:	2300      	movs	r3, #0
 80080e4:	61fb      	str	r3, [r7, #28]
 80080e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80080ea:	4b96      	ldr	r3, [pc, #600]	@ (8008344 <UART_SetConfig+0x6a8>)
 80080ec:	0052      	lsls	r2, r2, #1
 80080ee:	5ad3      	ldrh	r3, [r2, r3]
 80080f0:	613b      	str	r3, [r7, #16]
 80080f2:	2300      	movs	r3, #0
 80080f4:	617b      	str	r3, [r7, #20]
 80080f6:	693a      	ldr	r2, [r7, #16]
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	69b8      	ldr	r0, [r7, #24]
 80080fc:	69f9      	ldr	r1, [r7, #28]
 80080fe:	f7f8 f9c7 	bl	8000490 <__aeabi_uldivmod>
 8008102:	0002      	movs	r2, r0
 8008104:	000b      	movs	r3, r1
 8008106:	0e11      	lsrs	r1, r2, #24
 8008108:	021d      	lsls	r5, r3, #8
 800810a:	430d      	orrs	r5, r1
 800810c:	0214      	lsls	r4, r2, #8
 800810e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	085b      	lsrs	r3, r3, #1
 8008114:	60bb      	str	r3, [r7, #8]
 8008116:	2300      	movs	r3, #0
 8008118:	60fb      	str	r3, [r7, #12]
 800811a:	68b8      	ldr	r0, [r7, #8]
 800811c:	68f9      	ldr	r1, [r7, #12]
 800811e:	1900      	adds	r0, r0, r4
 8008120:	4169      	adcs	r1, r5
 8008122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	603b      	str	r3, [r7, #0]
 8008128:	2300      	movs	r3, #0
 800812a:	607b      	str	r3, [r7, #4]
 800812c:	683a      	ldr	r2, [r7, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f7f8 f9ae 	bl	8000490 <__aeabi_uldivmod>
 8008134:	0002      	movs	r2, r0
 8008136:	000b      	movs	r3, r1
 8008138:	0013      	movs	r3, r2
 800813a:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800813c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800813e:	23c0      	movs	r3, #192	@ 0xc0
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	429a      	cmp	r2, r3
 8008144:	d309      	bcc.n	800815a <UART_SetConfig+0x4be>
 8008146:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008148:	2380      	movs	r3, #128	@ 0x80
 800814a:	035b      	lsls	r3, r3, #13
 800814c:	429a      	cmp	r2, r3
 800814e:	d204      	bcs.n	800815a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8008150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008156:	60da      	str	r2, [r3, #12]
 8008158:	e006      	b.n	8008168 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 800815a:	231a      	movs	r3, #26
 800815c:	2220      	movs	r2, #32
 800815e:	189b      	adds	r3, r3, r2
 8008160:	19db      	adds	r3, r3, r7
 8008162:	2201      	movs	r2, #1
 8008164:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8008166:	e0d0      	b.n	800830a <UART_SetConfig+0x66e>
 8008168:	e0cf      	b.n	800830a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800816a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816c:	69da      	ldr	r2, [r3, #28]
 800816e:	2380      	movs	r3, #128	@ 0x80
 8008170:	021b      	lsls	r3, r3, #8
 8008172:	429a      	cmp	r2, r3
 8008174:	d000      	beq.n	8008178 <UART_SetConfig+0x4dc>
 8008176:	e070      	b.n	800825a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8008178:	231b      	movs	r3, #27
 800817a:	2220      	movs	r2, #32
 800817c:	189b      	adds	r3, r3, r2
 800817e:	19db      	adds	r3, r3, r7
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	2b08      	cmp	r3, #8
 8008184:	d015      	beq.n	80081b2 <UART_SetConfig+0x516>
 8008186:	dc18      	bgt.n	80081ba <UART_SetConfig+0x51e>
 8008188:	2b04      	cmp	r3, #4
 800818a:	d00d      	beq.n	80081a8 <UART_SetConfig+0x50c>
 800818c:	dc15      	bgt.n	80081ba <UART_SetConfig+0x51e>
 800818e:	2b00      	cmp	r3, #0
 8008190:	d002      	beq.n	8008198 <UART_SetConfig+0x4fc>
 8008192:	2b02      	cmp	r3, #2
 8008194:	d005      	beq.n	80081a2 <UART_SetConfig+0x506>
 8008196:	e010      	b.n	80081ba <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008198:	f7fd fc9e 	bl	8005ad8 <HAL_RCC_GetPCLK1Freq>
 800819c:	0003      	movs	r3, r0
 800819e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081a0:	e014      	b.n	80081cc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081a2:	4b67      	ldr	r3, [pc, #412]	@ (8008340 <UART_SetConfig+0x6a4>)
 80081a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081a6:	e011      	b.n	80081cc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081a8:	f7fd fc0a 	bl	80059c0 <HAL_RCC_GetSysClockFreq>
 80081ac:	0003      	movs	r3, r0
 80081ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081b0:	e00c      	b.n	80081cc <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081b2:	2380      	movs	r3, #128	@ 0x80
 80081b4:	021b      	lsls	r3, r3, #8
 80081b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081b8:	e008      	b.n	80081cc <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80081ba:	2300      	movs	r3, #0
 80081bc:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80081be:	231a      	movs	r3, #26
 80081c0:	2220      	movs	r2, #32
 80081c2:	189b      	adds	r3, r3, r2
 80081c4:	19db      	adds	r3, r3, r7
 80081c6:	2201      	movs	r2, #1
 80081c8:	701a      	strb	r2, [r3, #0]
        break;
 80081ca:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d100      	bne.n	80081d4 <UART_SetConfig+0x538>
 80081d2:	e09a      	b.n	800830a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081d8:	4b5a      	ldr	r3, [pc, #360]	@ (8008344 <UART_SetConfig+0x6a8>)
 80081da:	0052      	lsls	r2, r2, #1
 80081dc:	5ad3      	ldrh	r3, [r2, r3]
 80081de:	0019      	movs	r1, r3
 80081e0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80081e2:	f7f7 ffa1 	bl	8000128 <__udivsi3>
 80081e6:	0003      	movs	r3, r0
 80081e8:	005a      	lsls	r2, r3, #1
 80081ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	085b      	lsrs	r3, r3, #1
 80081f0:	18d2      	adds	r2, r2, r3
 80081f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	0019      	movs	r1, r3
 80081f8:	0010      	movs	r0, r2
 80081fa:	f7f7 ff95 	bl	8000128 <__udivsi3>
 80081fe:	0003      	movs	r3, r0
 8008200:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008204:	2b0f      	cmp	r3, #15
 8008206:	d921      	bls.n	800824c <UART_SetConfig+0x5b0>
 8008208:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800820a:	2380      	movs	r3, #128	@ 0x80
 800820c:	025b      	lsls	r3, r3, #9
 800820e:	429a      	cmp	r2, r3
 8008210:	d21c      	bcs.n	800824c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008214:	b29a      	uxth	r2, r3
 8008216:	200e      	movs	r0, #14
 8008218:	2420      	movs	r4, #32
 800821a:	1903      	adds	r3, r0, r4
 800821c:	19db      	adds	r3, r3, r7
 800821e:	210f      	movs	r1, #15
 8008220:	438a      	bics	r2, r1
 8008222:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008226:	085b      	lsrs	r3, r3, #1
 8008228:	b29b      	uxth	r3, r3
 800822a:	2207      	movs	r2, #7
 800822c:	4013      	ands	r3, r2
 800822e:	b299      	uxth	r1, r3
 8008230:	1903      	adds	r3, r0, r4
 8008232:	19db      	adds	r3, r3, r7
 8008234:	1902      	adds	r2, r0, r4
 8008236:	19d2      	adds	r2, r2, r7
 8008238:	8812      	ldrh	r2, [r2, #0]
 800823a:	430a      	orrs	r2, r1
 800823c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800823e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	1902      	adds	r2, r0, r4
 8008244:	19d2      	adds	r2, r2, r7
 8008246:	8812      	ldrh	r2, [r2, #0]
 8008248:	60da      	str	r2, [r3, #12]
 800824a:	e05e      	b.n	800830a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800824c:	231a      	movs	r3, #26
 800824e:	2220      	movs	r2, #32
 8008250:	189b      	adds	r3, r3, r2
 8008252:	19db      	adds	r3, r3, r7
 8008254:	2201      	movs	r2, #1
 8008256:	701a      	strb	r2, [r3, #0]
 8008258:	e057      	b.n	800830a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800825a:	231b      	movs	r3, #27
 800825c:	2220      	movs	r2, #32
 800825e:	189b      	adds	r3, r3, r2
 8008260:	19db      	adds	r3, r3, r7
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	2b08      	cmp	r3, #8
 8008266:	d015      	beq.n	8008294 <UART_SetConfig+0x5f8>
 8008268:	dc18      	bgt.n	800829c <UART_SetConfig+0x600>
 800826a:	2b04      	cmp	r3, #4
 800826c:	d00d      	beq.n	800828a <UART_SetConfig+0x5ee>
 800826e:	dc15      	bgt.n	800829c <UART_SetConfig+0x600>
 8008270:	2b00      	cmp	r3, #0
 8008272:	d002      	beq.n	800827a <UART_SetConfig+0x5de>
 8008274:	2b02      	cmp	r3, #2
 8008276:	d005      	beq.n	8008284 <UART_SetConfig+0x5e8>
 8008278:	e010      	b.n	800829c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800827a:	f7fd fc2d 	bl	8005ad8 <HAL_RCC_GetPCLK1Freq>
 800827e:	0003      	movs	r3, r0
 8008280:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008282:	e014      	b.n	80082ae <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008284:	4b2e      	ldr	r3, [pc, #184]	@ (8008340 <UART_SetConfig+0x6a4>)
 8008286:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008288:	e011      	b.n	80082ae <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800828a:	f7fd fb99 	bl	80059c0 <HAL_RCC_GetSysClockFreq>
 800828e:	0003      	movs	r3, r0
 8008290:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008292:	e00c      	b.n	80082ae <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008294:	2380      	movs	r3, #128	@ 0x80
 8008296:	021b      	lsls	r3, r3, #8
 8008298:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800829a:	e008      	b.n	80082ae <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 800829c:	2300      	movs	r3, #0
 800829e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80082a0:	231a      	movs	r3, #26
 80082a2:	2220      	movs	r2, #32
 80082a4:	189b      	adds	r3, r3, r2
 80082a6:	19db      	adds	r3, r3, r7
 80082a8:	2201      	movs	r2, #1
 80082aa:	701a      	strb	r2, [r3, #0]
        break;
 80082ac:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80082ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d02a      	beq.n	800830a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082b8:	4b22      	ldr	r3, [pc, #136]	@ (8008344 <UART_SetConfig+0x6a8>)
 80082ba:	0052      	lsls	r2, r2, #1
 80082bc:	5ad3      	ldrh	r3, [r2, r3]
 80082be:	0019      	movs	r1, r3
 80082c0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80082c2:	f7f7 ff31 	bl	8000128 <__udivsi3>
 80082c6:	0003      	movs	r3, r0
 80082c8:	001a      	movs	r2, r3
 80082ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	085b      	lsrs	r3, r3, #1
 80082d0:	18d2      	adds	r2, r2, r3
 80082d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	0019      	movs	r1, r3
 80082d8:	0010      	movs	r0, r2
 80082da:	f7f7 ff25 	bl	8000128 <__udivsi3>
 80082de:	0003      	movs	r3, r0
 80082e0:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e4:	2b0f      	cmp	r3, #15
 80082e6:	d90a      	bls.n	80082fe <UART_SetConfig+0x662>
 80082e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082ea:	2380      	movs	r3, #128	@ 0x80
 80082ec:	025b      	lsls	r3, r3, #9
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d205      	bcs.n	80082fe <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	60da      	str	r2, [r3, #12]
 80082fc:	e005      	b.n	800830a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80082fe:	231a      	movs	r3, #26
 8008300:	2220      	movs	r2, #32
 8008302:	189b      	adds	r3, r3, r2
 8008304:	19db      	adds	r3, r3, r7
 8008306:	2201      	movs	r2, #1
 8008308:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800830a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830c:	226a      	movs	r2, #106	@ 0x6a
 800830e:	2101      	movs	r1, #1
 8008310:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8008312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008314:	2268      	movs	r2, #104	@ 0x68
 8008316:	2101      	movs	r1, #1
 8008318:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800831a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831c:	2200      	movs	r2, #0
 800831e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008322:	2200      	movs	r2, #0
 8008324:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008326:	231a      	movs	r3, #26
 8008328:	2220      	movs	r2, #32
 800832a:	189b      	adds	r3, r3, r2
 800832c:	19db      	adds	r3, r3, r7
 800832e:	781b      	ldrb	r3, [r3, #0]
}
 8008330:	0018      	movs	r0, r3
 8008332:	46bd      	mov	sp, r7
 8008334:	b010      	add	sp, #64	@ 0x40
 8008336:	bdb0      	pop	{r4, r5, r7, pc}
 8008338:	40008000 	.word	0x40008000
 800833c:	40008400 	.word	0x40008400
 8008340:	00f42400 	.word	0x00f42400
 8008344:	08009d68 	.word	0x08009d68

08008348 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008354:	2208      	movs	r2, #8
 8008356:	4013      	ands	r3, r2
 8008358:	d00b      	beq.n	8008372 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	4a4a      	ldr	r2, [pc, #296]	@ (800848c <UART_AdvFeatureConfig+0x144>)
 8008362:	4013      	ands	r3, r2
 8008364:	0019      	movs	r1, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	430a      	orrs	r2, r1
 8008370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008376:	2201      	movs	r2, #1
 8008378:	4013      	ands	r3, r2
 800837a:	d00b      	beq.n	8008394 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	4a43      	ldr	r2, [pc, #268]	@ (8008490 <UART_AdvFeatureConfig+0x148>)
 8008384:	4013      	ands	r3, r2
 8008386:	0019      	movs	r1, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	430a      	orrs	r2, r1
 8008392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008398:	2202      	movs	r2, #2
 800839a:	4013      	ands	r3, r2
 800839c:	d00b      	beq.n	80083b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	4a3b      	ldr	r2, [pc, #236]	@ (8008494 <UART_AdvFeatureConfig+0x14c>)
 80083a6:	4013      	ands	r3, r2
 80083a8:	0019      	movs	r1, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	430a      	orrs	r2, r1
 80083b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ba:	2204      	movs	r2, #4
 80083bc:	4013      	ands	r3, r2
 80083be:	d00b      	beq.n	80083d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	4a34      	ldr	r2, [pc, #208]	@ (8008498 <UART_AdvFeatureConfig+0x150>)
 80083c8:	4013      	ands	r3, r2
 80083ca:	0019      	movs	r1, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	430a      	orrs	r2, r1
 80083d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083dc:	2210      	movs	r2, #16
 80083de:	4013      	ands	r3, r2
 80083e0:	d00b      	beq.n	80083fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	4a2c      	ldr	r2, [pc, #176]	@ (800849c <UART_AdvFeatureConfig+0x154>)
 80083ea:	4013      	ands	r3, r2
 80083ec:	0019      	movs	r1, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	430a      	orrs	r2, r1
 80083f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083fe:	2220      	movs	r2, #32
 8008400:	4013      	ands	r3, r2
 8008402:	d00b      	beq.n	800841c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	4a25      	ldr	r2, [pc, #148]	@ (80084a0 <UART_AdvFeatureConfig+0x158>)
 800840c:	4013      	ands	r3, r2
 800840e:	0019      	movs	r1, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	430a      	orrs	r2, r1
 800841a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008420:	2240      	movs	r2, #64	@ 0x40
 8008422:	4013      	ands	r3, r2
 8008424:	d01d      	beq.n	8008462 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	4a1d      	ldr	r2, [pc, #116]	@ (80084a4 <UART_AdvFeatureConfig+0x15c>)
 800842e:	4013      	ands	r3, r2
 8008430:	0019      	movs	r1, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	430a      	orrs	r2, r1
 800843c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008442:	2380      	movs	r3, #128	@ 0x80
 8008444:	035b      	lsls	r3, r3, #13
 8008446:	429a      	cmp	r2, r3
 8008448:	d10b      	bne.n	8008462 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	4a15      	ldr	r2, [pc, #84]	@ (80084a8 <UART_AdvFeatureConfig+0x160>)
 8008452:	4013      	ands	r3, r2
 8008454:	0019      	movs	r1, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	430a      	orrs	r2, r1
 8008460:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008466:	2280      	movs	r2, #128	@ 0x80
 8008468:	4013      	ands	r3, r2
 800846a:	d00b      	beq.n	8008484 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	4a0e      	ldr	r2, [pc, #56]	@ (80084ac <UART_AdvFeatureConfig+0x164>)
 8008474:	4013      	ands	r3, r2
 8008476:	0019      	movs	r1, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	430a      	orrs	r2, r1
 8008482:	605a      	str	r2, [r3, #4]
  }
}
 8008484:	46c0      	nop			@ (mov r8, r8)
 8008486:	46bd      	mov	sp, r7
 8008488:	b002      	add	sp, #8
 800848a:	bd80      	pop	{r7, pc}
 800848c:	ffff7fff 	.word	0xffff7fff
 8008490:	fffdffff 	.word	0xfffdffff
 8008494:	fffeffff 	.word	0xfffeffff
 8008498:	fffbffff 	.word	0xfffbffff
 800849c:	ffffefff 	.word	0xffffefff
 80084a0:	ffffdfff 	.word	0xffffdfff
 80084a4:	ffefffff 	.word	0xffefffff
 80084a8:	ff9fffff 	.word	0xff9fffff
 80084ac:	fff7ffff 	.word	0xfff7ffff

080084b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b092      	sub	sp, #72	@ 0x48
 80084b4:	af02      	add	r7, sp, #8
 80084b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2290      	movs	r2, #144	@ 0x90
 80084bc:	2100      	movs	r1, #0
 80084be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084c0:	f7fb fce8 	bl	8003e94 <HAL_GetTick>
 80084c4:	0003      	movs	r3, r0
 80084c6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2208      	movs	r2, #8
 80084d0:	4013      	ands	r3, r2
 80084d2:	2b08      	cmp	r3, #8
 80084d4:	d12d      	bne.n	8008532 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084d8:	2280      	movs	r2, #128	@ 0x80
 80084da:	0391      	lsls	r1, r2, #14
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	4a47      	ldr	r2, [pc, #284]	@ (80085fc <UART_CheckIdleState+0x14c>)
 80084e0:	9200      	str	r2, [sp, #0]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f000 f88e 	bl	8008604 <UART_WaitOnFlagUntilTimeout>
 80084e8:	1e03      	subs	r3, r0, #0
 80084ea:	d022      	beq.n	8008532 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084ec:	f3ef 8310 	mrs	r3, PRIMASK
 80084f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80084f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80084f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80084f6:	2301      	movs	r3, #1
 80084f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084fc:	f383 8810 	msr	PRIMASK, r3
}
 8008500:	46c0      	nop			@ (mov r8, r8)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2180      	movs	r1, #128	@ 0x80
 800850e:	438a      	bics	r2, r1
 8008510:	601a      	str	r2, [r3, #0]
 8008512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008514:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008518:	f383 8810 	msr	PRIMASK, r3
}
 800851c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2288      	movs	r2, #136	@ 0x88
 8008522:	2120      	movs	r1, #32
 8008524:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2284      	movs	r2, #132	@ 0x84
 800852a:	2100      	movs	r1, #0
 800852c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800852e:	2303      	movs	r3, #3
 8008530:	e060      	b.n	80085f4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2204      	movs	r2, #4
 800853a:	4013      	ands	r3, r2
 800853c:	2b04      	cmp	r3, #4
 800853e:	d146      	bne.n	80085ce <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008542:	2280      	movs	r2, #128	@ 0x80
 8008544:	03d1      	lsls	r1, r2, #15
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	4a2c      	ldr	r2, [pc, #176]	@ (80085fc <UART_CheckIdleState+0x14c>)
 800854a:	9200      	str	r2, [sp, #0]
 800854c:	2200      	movs	r2, #0
 800854e:	f000 f859 	bl	8008604 <UART_WaitOnFlagUntilTimeout>
 8008552:	1e03      	subs	r3, r0, #0
 8008554:	d03b      	beq.n	80085ce <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008556:	f3ef 8310 	mrs	r3, PRIMASK
 800855a:	60fb      	str	r3, [r7, #12]
  return(result);
 800855c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800855e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008560:	2301      	movs	r3, #1
 8008562:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	f383 8810 	msr	PRIMASK, r3
}
 800856a:	46c0      	nop			@ (mov r8, r8)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4922      	ldr	r1, [pc, #136]	@ (8008600 <UART_CheckIdleState+0x150>)
 8008578:	400a      	ands	r2, r1
 800857a:	601a      	str	r2, [r3, #0]
 800857c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800857e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	f383 8810 	msr	PRIMASK, r3
}
 8008586:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008588:	f3ef 8310 	mrs	r3, PRIMASK
 800858c:	61bb      	str	r3, [r7, #24]
  return(result);
 800858e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008590:	633b      	str	r3, [r7, #48]	@ 0x30
 8008592:	2301      	movs	r3, #1
 8008594:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	f383 8810 	msr	PRIMASK, r3
}
 800859c:	46c0      	nop			@ (mov r8, r8)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	689a      	ldr	r2, [r3, #8]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2101      	movs	r1, #1
 80085aa:	438a      	bics	r2, r1
 80085ac:	609a      	str	r2, [r3, #8]
 80085ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085b2:	6a3b      	ldr	r3, [r7, #32]
 80085b4:	f383 8810 	msr	PRIMASK, r3
}
 80085b8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	228c      	movs	r2, #140	@ 0x8c
 80085be:	2120      	movs	r1, #32
 80085c0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2284      	movs	r2, #132	@ 0x84
 80085c6:	2100      	movs	r1, #0
 80085c8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085ca:	2303      	movs	r3, #3
 80085cc:	e012      	b.n	80085f4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2288      	movs	r2, #136	@ 0x88
 80085d2:	2120      	movs	r1, #32
 80085d4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	228c      	movs	r2, #140	@ 0x8c
 80085da:	2120      	movs	r1, #32
 80085dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2284      	movs	r2, #132	@ 0x84
 80085ee:	2100      	movs	r1, #0
 80085f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	0018      	movs	r0, r3
 80085f6:	46bd      	mov	sp, r7
 80085f8:	b010      	add	sp, #64	@ 0x40
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	01ffffff 	.word	0x01ffffff
 8008600:	fffffedf 	.word	0xfffffedf

08008604 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	603b      	str	r3, [r7, #0]
 8008610:	1dfb      	adds	r3, r7, #7
 8008612:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008614:	e051      	b.n	80086ba <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	3301      	adds	r3, #1
 800861a:	d04e      	beq.n	80086ba <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800861c:	f7fb fc3a 	bl	8003e94 <HAL_GetTick>
 8008620:	0002      	movs	r2, r0
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	69ba      	ldr	r2, [r7, #24]
 8008628:	429a      	cmp	r2, r3
 800862a:	d302      	bcc.n	8008632 <UART_WaitOnFlagUntilTimeout+0x2e>
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d101      	bne.n	8008636 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e051      	b.n	80086da <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2204      	movs	r2, #4
 800863e:	4013      	ands	r3, r2
 8008640:	d03b      	beq.n	80086ba <UART_WaitOnFlagUntilTimeout+0xb6>
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	2b80      	cmp	r3, #128	@ 0x80
 8008646:	d038      	beq.n	80086ba <UART_WaitOnFlagUntilTimeout+0xb6>
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	2b40      	cmp	r3, #64	@ 0x40
 800864c:	d035      	beq.n	80086ba <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	2208      	movs	r2, #8
 8008656:	4013      	ands	r3, r2
 8008658:	2b08      	cmp	r3, #8
 800865a:	d111      	bne.n	8008680 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2208      	movs	r2, #8
 8008662:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	0018      	movs	r0, r3
 8008668:	f000 f83c 	bl	80086e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2290      	movs	r2, #144	@ 0x90
 8008670:	2108      	movs	r1, #8
 8008672:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2284      	movs	r2, #132	@ 0x84
 8008678:	2100      	movs	r1, #0
 800867a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800867c:	2301      	movs	r3, #1
 800867e:	e02c      	b.n	80086da <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	69da      	ldr	r2, [r3, #28]
 8008686:	2380      	movs	r3, #128	@ 0x80
 8008688:	011b      	lsls	r3, r3, #4
 800868a:	401a      	ands	r2, r3
 800868c:	2380      	movs	r3, #128	@ 0x80
 800868e:	011b      	lsls	r3, r3, #4
 8008690:	429a      	cmp	r2, r3
 8008692:	d112      	bne.n	80086ba <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2280      	movs	r2, #128	@ 0x80
 800869a:	0112      	lsls	r2, r2, #4
 800869c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	0018      	movs	r0, r3
 80086a2:	f000 f81f 	bl	80086e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2290      	movs	r2, #144	@ 0x90
 80086aa:	2120      	movs	r1, #32
 80086ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2284      	movs	r2, #132	@ 0x84
 80086b2:	2100      	movs	r1, #0
 80086b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80086b6:	2303      	movs	r3, #3
 80086b8:	e00f      	b.n	80086da <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	69db      	ldr	r3, [r3, #28]
 80086c0:	68ba      	ldr	r2, [r7, #8]
 80086c2:	4013      	ands	r3, r2
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	425a      	negs	r2, r3
 80086ca:	4153      	adcs	r3, r2
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	001a      	movs	r2, r3
 80086d0:	1dfb      	adds	r3, r7, #7
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d09e      	beq.n	8008616 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086d8:	2300      	movs	r3, #0
}
 80086da:	0018      	movs	r0, r3
 80086dc:	46bd      	mov	sp, r7
 80086de:	b004      	add	sp, #16
 80086e0:	bd80      	pop	{r7, pc}
	...

080086e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b08e      	sub	sp, #56	@ 0x38
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086ec:	f3ef 8310 	mrs	r3, PRIMASK
 80086f0:	617b      	str	r3, [r7, #20]
  return(result);
 80086f2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80086f6:	2301      	movs	r3, #1
 80086f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	f383 8810 	msr	PRIMASK, r3
}
 8008700:	46c0      	nop			@ (mov r8, r8)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4926      	ldr	r1, [pc, #152]	@ (80087a8 <UART_EndRxTransfer+0xc4>)
 800870e:	400a      	ands	r2, r1
 8008710:	601a      	str	r2, [r3, #0]
 8008712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008714:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	f383 8810 	msr	PRIMASK, r3
}
 800871c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800871e:	f3ef 8310 	mrs	r3, PRIMASK
 8008722:	623b      	str	r3, [r7, #32]
  return(result);
 8008724:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008726:	633b      	str	r3, [r7, #48]	@ 0x30
 8008728:	2301      	movs	r3, #1
 800872a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800872c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872e:	f383 8810 	msr	PRIMASK, r3
}
 8008732:	46c0      	nop			@ (mov r8, r8)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	689a      	ldr	r2, [r3, #8]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	491b      	ldr	r1, [pc, #108]	@ (80087ac <UART_EndRxTransfer+0xc8>)
 8008740:	400a      	ands	r2, r1
 8008742:	609a      	str	r2, [r3, #8]
 8008744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008746:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800874a:	f383 8810 	msr	PRIMASK, r3
}
 800874e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008754:	2b01      	cmp	r3, #1
 8008756:	d118      	bne.n	800878a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008758:	f3ef 8310 	mrs	r3, PRIMASK
 800875c:	60bb      	str	r3, [r7, #8]
  return(result);
 800875e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008760:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008762:	2301      	movs	r3, #1
 8008764:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f383 8810 	msr	PRIMASK, r3
}
 800876c:	46c0      	nop			@ (mov r8, r8)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2110      	movs	r1, #16
 800877a:	438a      	bics	r2, r1
 800877c:	601a      	str	r2, [r3, #0]
 800877e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008780:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	f383 8810 	msr	PRIMASK, r3
}
 8008788:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	228c      	movs	r2, #140	@ 0x8c
 800878e:	2120      	movs	r1, #32
 8008790:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800879e:	46c0      	nop			@ (mov r8, r8)
 80087a0:	46bd      	mov	sp, r7
 80087a2:	b00e      	add	sp, #56	@ 0x38
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	46c0      	nop			@ (mov r8, r8)
 80087a8:	fffffedf 	.word	0xfffffedf
 80087ac:	effffffe 	.word	0xeffffffe

080087b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2284      	movs	r2, #132	@ 0x84
 80087bc:	5c9b      	ldrb	r3, [r3, r2]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d101      	bne.n	80087c6 <HAL_UARTEx_DisableFifoMode+0x16>
 80087c2:	2302      	movs	r3, #2
 80087c4:	e027      	b.n	8008816 <HAL_UARTEx_DisableFifoMode+0x66>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2284      	movs	r2, #132	@ 0x84
 80087ca:	2101      	movs	r1, #1
 80087cc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2288      	movs	r2, #136	@ 0x88
 80087d2:	2124      	movs	r1, #36	@ 0x24
 80087d4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2101      	movs	r1, #1
 80087ea:	438a      	bics	r2, r1
 80087ec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	4a0b      	ldr	r2, [pc, #44]	@ (8008820 <HAL_UARTEx_DisableFifoMode+0x70>)
 80087f2:	4013      	ands	r3, r2
 80087f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2288      	movs	r2, #136	@ 0x88
 8008808:	2120      	movs	r1, #32
 800880a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2284      	movs	r2, #132	@ 0x84
 8008810:	2100      	movs	r1, #0
 8008812:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	0018      	movs	r0, r3
 8008818:	46bd      	mov	sp, r7
 800881a:	b004      	add	sp, #16
 800881c:	bd80      	pop	{r7, pc}
 800881e:	46c0      	nop			@ (mov r8, r8)
 8008820:	dfffffff 	.word	0xdfffffff

08008824 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2284      	movs	r2, #132	@ 0x84
 8008832:	5c9b      	ldrb	r3, [r3, r2]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d101      	bne.n	800883c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008838:	2302      	movs	r3, #2
 800883a:	e02e      	b.n	800889a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2284      	movs	r2, #132	@ 0x84
 8008840:	2101      	movs	r1, #1
 8008842:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2288      	movs	r2, #136	@ 0x88
 8008848:	2124      	movs	r1, #36	@ 0x24
 800884a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2101      	movs	r1, #1
 8008860:	438a      	bics	r2, r1
 8008862:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	00db      	lsls	r3, r3, #3
 800886c:	08d9      	lsrs	r1, r3, #3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	683a      	ldr	r2, [r7, #0]
 8008874:	430a      	orrs	r2, r1
 8008876:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	0018      	movs	r0, r3
 800887c:	f000 f854 	bl	8008928 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2288      	movs	r2, #136	@ 0x88
 800888c:	2120      	movs	r1, #32
 800888e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2284      	movs	r2, #132	@ 0x84
 8008894:	2100      	movs	r1, #0
 8008896:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	0018      	movs	r0, r3
 800889c:	46bd      	mov	sp, r7
 800889e:	b004      	add	sp, #16
 80088a0:	bd80      	pop	{r7, pc}
	...

080088a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2284      	movs	r2, #132	@ 0x84
 80088b2:	5c9b      	ldrb	r3, [r3, r2]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d101      	bne.n	80088bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088b8:	2302      	movs	r3, #2
 80088ba:	e02f      	b.n	800891c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2284      	movs	r2, #132	@ 0x84
 80088c0:	2101      	movs	r1, #1
 80088c2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2288      	movs	r2, #136	@ 0x88
 80088c8:	2124      	movs	r1, #36	@ 0x24
 80088ca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2101      	movs	r1, #1
 80088e0:	438a      	bics	r2, r1
 80088e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	4a0e      	ldr	r2, [pc, #56]	@ (8008924 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80088ec:	4013      	ands	r3, r2
 80088ee:	0019      	movs	r1, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	683a      	ldr	r2, [r7, #0]
 80088f6:	430a      	orrs	r2, r1
 80088f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	0018      	movs	r0, r3
 80088fe:	f000 f813 	bl	8008928 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2288      	movs	r2, #136	@ 0x88
 800890e:	2120      	movs	r1, #32
 8008910:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2284      	movs	r2, #132	@ 0x84
 8008916:	2100      	movs	r1, #0
 8008918:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	0018      	movs	r0, r3
 800891e:	46bd      	mov	sp, r7
 8008920:	b004      	add	sp, #16
 8008922:	bd80      	pop	{r7, pc}
 8008924:	f1ffffff 	.word	0xf1ffffff

08008928 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008934:	2b00      	cmp	r3, #0
 8008936:	d108      	bne.n	800894a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	226a      	movs	r2, #106	@ 0x6a
 800893c:	2101      	movs	r1, #1
 800893e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2268      	movs	r2, #104	@ 0x68
 8008944:	2101      	movs	r1, #1
 8008946:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008948:	e043      	b.n	80089d2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800894a:	260f      	movs	r6, #15
 800894c:	19bb      	adds	r3, r7, r6
 800894e:	2208      	movs	r2, #8
 8008950:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008952:	200e      	movs	r0, #14
 8008954:	183b      	adds	r3, r7, r0
 8008956:	2208      	movs	r2, #8
 8008958:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	0e5b      	lsrs	r3, r3, #25
 8008962:	b2da      	uxtb	r2, r3
 8008964:	240d      	movs	r4, #13
 8008966:	193b      	adds	r3, r7, r4
 8008968:	2107      	movs	r1, #7
 800896a:	400a      	ands	r2, r1
 800896c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	0f5b      	lsrs	r3, r3, #29
 8008976:	b2da      	uxtb	r2, r3
 8008978:	250c      	movs	r5, #12
 800897a:	197b      	adds	r3, r7, r5
 800897c:	2107      	movs	r1, #7
 800897e:	400a      	ands	r2, r1
 8008980:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008982:	183b      	adds	r3, r7, r0
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	197a      	adds	r2, r7, r5
 8008988:	7812      	ldrb	r2, [r2, #0]
 800898a:	4914      	ldr	r1, [pc, #80]	@ (80089dc <UARTEx_SetNbDataToProcess+0xb4>)
 800898c:	5c8a      	ldrb	r2, [r1, r2]
 800898e:	435a      	muls	r2, r3
 8008990:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008992:	197b      	adds	r3, r7, r5
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	4a12      	ldr	r2, [pc, #72]	@ (80089e0 <UARTEx_SetNbDataToProcess+0xb8>)
 8008998:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800899a:	0019      	movs	r1, r3
 800899c:	f7f7 fc4e 	bl	800023c <__divsi3>
 80089a0:	0003      	movs	r3, r0
 80089a2:	b299      	uxth	r1, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	226a      	movs	r2, #106	@ 0x6a
 80089a8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089aa:	19bb      	adds	r3, r7, r6
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	193a      	adds	r2, r7, r4
 80089b0:	7812      	ldrb	r2, [r2, #0]
 80089b2:	490a      	ldr	r1, [pc, #40]	@ (80089dc <UARTEx_SetNbDataToProcess+0xb4>)
 80089b4:	5c8a      	ldrb	r2, [r1, r2]
 80089b6:	435a      	muls	r2, r3
 80089b8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80089ba:	193b      	adds	r3, r7, r4
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	4a08      	ldr	r2, [pc, #32]	@ (80089e0 <UARTEx_SetNbDataToProcess+0xb8>)
 80089c0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80089c2:	0019      	movs	r1, r3
 80089c4:	f7f7 fc3a 	bl	800023c <__divsi3>
 80089c8:	0003      	movs	r3, r0
 80089ca:	b299      	uxth	r1, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2268      	movs	r2, #104	@ 0x68
 80089d0:	5299      	strh	r1, [r3, r2]
}
 80089d2:	46c0      	nop			@ (mov r8, r8)
 80089d4:	46bd      	mov	sp, r7
 80089d6:	b005      	add	sp, #20
 80089d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089da:	46c0      	nop			@ (mov r8, r8)
 80089dc:	08009d80 	.word	0x08009d80
 80089e0:	08009d88 	.word	0x08009d88

080089e4 <siprintf>:
 80089e4:	b40e      	push	{r1, r2, r3}
 80089e6:	b500      	push	{lr}
 80089e8:	490b      	ldr	r1, [pc, #44]	@ (8008a18 <siprintf+0x34>)
 80089ea:	b09c      	sub	sp, #112	@ 0x70
 80089ec:	ab1d      	add	r3, sp, #116	@ 0x74
 80089ee:	9002      	str	r0, [sp, #8]
 80089f0:	9006      	str	r0, [sp, #24]
 80089f2:	9107      	str	r1, [sp, #28]
 80089f4:	9104      	str	r1, [sp, #16]
 80089f6:	4809      	ldr	r0, [pc, #36]	@ (8008a1c <siprintf+0x38>)
 80089f8:	4909      	ldr	r1, [pc, #36]	@ (8008a20 <siprintf+0x3c>)
 80089fa:	cb04      	ldmia	r3!, {r2}
 80089fc:	9105      	str	r1, [sp, #20]
 80089fe:	6800      	ldr	r0, [r0, #0]
 8008a00:	a902      	add	r1, sp, #8
 8008a02:	9301      	str	r3, [sp, #4]
 8008a04:	f000 f9a8 	bl	8008d58 <_svfiprintf_r>
 8008a08:	2200      	movs	r2, #0
 8008a0a:	9b02      	ldr	r3, [sp, #8]
 8008a0c:	701a      	strb	r2, [r3, #0]
 8008a0e:	b01c      	add	sp, #112	@ 0x70
 8008a10:	bc08      	pop	{r3}
 8008a12:	b003      	add	sp, #12
 8008a14:	4718      	bx	r3
 8008a16:	46c0      	nop			@ (mov r8, r8)
 8008a18:	7fffffff 	.word	0x7fffffff
 8008a1c:	20000e90 	.word	0x20000e90
 8008a20:	ffff0208 	.word	0xffff0208

08008a24 <memset>:
 8008a24:	0003      	movs	r3, r0
 8008a26:	1882      	adds	r2, r0, r2
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d100      	bne.n	8008a2e <memset+0xa>
 8008a2c:	4770      	bx	lr
 8008a2e:	7019      	strb	r1, [r3, #0]
 8008a30:	3301      	adds	r3, #1
 8008a32:	e7f9      	b.n	8008a28 <memset+0x4>

08008a34 <__errno>:
 8008a34:	4b01      	ldr	r3, [pc, #4]	@ (8008a3c <__errno+0x8>)
 8008a36:	6818      	ldr	r0, [r3, #0]
 8008a38:	4770      	bx	lr
 8008a3a:	46c0      	nop			@ (mov r8, r8)
 8008a3c:	20000e90 	.word	0x20000e90

08008a40 <__libc_init_array>:
 8008a40:	b570      	push	{r4, r5, r6, lr}
 8008a42:	2600      	movs	r6, #0
 8008a44:	4c0c      	ldr	r4, [pc, #48]	@ (8008a78 <__libc_init_array+0x38>)
 8008a46:	4d0d      	ldr	r5, [pc, #52]	@ (8008a7c <__libc_init_array+0x3c>)
 8008a48:	1b64      	subs	r4, r4, r5
 8008a4a:	10a4      	asrs	r4, r4, #2
 8008a4c:	42a6      	cmp	r6, r4
 8008a4e:	d109      	bne.n	8008a64 <__libc_init_array+0x24>
 8008a50:	2600      	movs	r6, #0
 8008a52:	f000 fda5 	bl	80095a0 <_init>
 8008a56:	4c0a      	ldr	r4, [pc, #40]	@ (8008a80 <__libc_init_array+0x40>)
 8008a58:	4d0a      	ldr	r5, [pc, #40]	@ (8008a84 <__libc_init_array+0x44>)
 8008a5a:	1b64      	subs	r4, r4, r5
 8008a5c:	10a4      	asrs	r4, r4, #2
 8008a5e:	42a6      	cmp	r6, r4
 8008a60:	d105      	bne.n	8008a6e <__libc_init_array+0x2e>
 8008a62:	bd70      	pop	{r4, r5, r6, pc}
 8008a64:	00b3      	lsls	r3, r6, #2
 8008a66:	58eb      	ldr	r3, [r5, r3]
 8008a68:	4798      	blx	r3
 8008a6a:	3601      	adds	r6, #1
 8008a6c:	e7ee      	b.n	8008a4c <__libc_init_array+0xc>
 8008a6e:	00b3      	lsls	r3, r6, #2
 8008a70:	58eb      	ldr	r3, [r5, r3]
 8008a72:	4798      	blx	r3
 8008a74:	3601      	adds	r6, #1
 8008a76:	e7f2      	b.n	8008a5e <__libc_init_array+0x1e>
 8008a78:	08009de0 	.word	0x08009de0
 8008a7c:	08009de0 	.word	0x08009de0
 8008a80:	08009de4 	.word	0x08009de4
 8008a84:	08009de0 	.word	0x08009de0

08008a88 <__retarget_lock_acquire_recursive>:
 8008a88:	4770      	bx	lr

08008a8a <__retarget_lock_release_recursive>:
 8008a8a:	4770      	bx	lr

08008a8c <memcpy>:
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	b510      	push	{r4, lr}
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d100      	bne.n	8008a96 <memcpy+0xa>
 8008a94:	bd10      	pop	{r4, pc}
 8008a96:	5ccc      	ldrb	r4, [r1, r3]
 8008a98:	54c4      	strb	r4, [r0, r3]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	e7f8      	b.n	8008a90 <memcpy+0x4>
	...

08008aa0 <_free_r>:
 8008aa0:	b570      	push	{r4, r5, r6, lr}
 8008aa2:	0005      	movs	r5, r0
 8008aa4:	1e0c      	subs	r4, r1, #0
 8008aa6:	d010      	beq.n	8008aca <_free_r+0x2a>
 8008aa8:	3c04      	subs	r4, #4
 8008aaa:	6823      	ldr	r3, [r4, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	da00      	bge.n	8008ab2 <_free_r+0x12>
 8008ab0:	18e4      	adds	r4, r4, r3
 8008ab2:	0028      	movs	r0, r5
 8008ab4:	f000 f8e0 	bl	8008c78 <__malloc_lock>
 8008ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8008b30 <_free_r+0x90>)
 8008aba:	6813      	ldr	r3, [r2, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d105      	bne.n	8008acc <_free_r+0x2c>
 8008ac0:	6063      	str	r3, [r4, #4]
 8008ac2:	6014      	str	r4, [r2, #0]
 8008ac4:	0028      	movs	r0, r5
 8008ac6:	f000 f8df 	bl	8008c88 <__malloc_unlock>
 8008aca:	bd70      	pop	{r4, r5, r6, pc}
 8008acc:	42a3      	cmp	r3, r4
 8008ace:	d908      	bls.n	8008ae2 <_free_r+0x42>
 8008ad0:	6820      	ldr	r0, [r4, #0]
 8008ad2:	1821      	adds	r1, r4, r0
 8008ad4:	428b      	cmp	r3, r1
 8008ad6:	d1f3      	bne.n	8008ac0 <_free_r+0x20>
 8008ad8:	6819      	ldr	r1, [r3, #0]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	1809      	adds	r1, r1, r0
 8008ade:	6021      	str	r1, [r4, #0]
 8008ae0:	e7ee      	b.n	8008ac0 <_free_r+0x20>
 8008ae2:	001a      	movs	r2, r3
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <_free_r+0x4e>
 8008aea:	42a3      	cmp	r3, r4
 8008aec:	d9f9      	bls.n	8008ae2 <_free_r+0x42>
 8008aee:	6811      	ldr	r1, [r2, #0]
 8008af0:	1850      	adds	r0, r2, r1
 8008af2:	42a0      	cmp	r0, r4
 8008af4:	d10b      	bne.n	8008b0e <_free_r+0x6e>
 8008af6:	6820      	ldr	r0, [r4, #0]
 8008af8:	1809      	adds	r1, r1, r0
 8008afa:	1850      	adds	r0, r2, r1
 8008afc:	6011      	str	r1, [r2, #0]
 8008afe:	4283      	cmp	r3, r0
 8008b00:	d1e0      	bne.n	8008ac4 <_free_r+0x24>
 8008b02:	6818      	ldr	r0, [r3, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	1841      	adds	r1, r0, r1
 8008b08:	6011      	str	r1, [r2, #0]
 8008b0a:	6053      	str	r3, [r2, #4]
 8008b0c:	e7da      	b.n	8008ac4 <_free_r+0x24>
 8008b0e:	42a0      	cmp	r0, r4
 8008b10:	d902      	bls.n	8008b18 <_free_r+0x78>
 8008b12:	230c      	movs	r3, #12
 8008b14:	602b      	str	r3, [r5, #0]
 8008b16:	e7d5      	b.n	8008ac4 <_free_r+0x24>
 8008b18:	6820      	ldr	r0, [r4, #0]
 8008b1a:	1821      	adds	r1, r4, r0
 8008b1c:	428b      	cmp	r3, r1
 8008b1e:	d103      	bne.n	8008b28 <_free_r+0x88>
 8008b20:	6819      	ldr	r1, [r3, #0]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	1809      	adds	r1, r1, r0
 8008b26:	6021      	str	r1, [r4, #0]
 8008b28:	6063      	str	r3, [r4, #4]
 8008b2a:	6054      	str	r4, [r2, #4]
 8008b2c:	e7ca      	b.n	8008ac4 <_free_r+0x24>
 8008b2e:	46c0      	nop			@ (mov r8, r8)
 8008b30:	200016a8 	.word	0x200016a8

08008b34 <sbrk_aligned>:
 8008b34:	b570      	push	{r4, r5, r6, lr}
 8008b36:	4e0f      	ldr	r6, [pc, #60]	@ (8008b74 <sbrk_aligned+0x40>)
 8008b38:	000d      	movs	r5, r1
 8008b3a:	6831      	ldr	r1, [r6, #0]
 8008b3c:	0004      	movs	r4, r0
 8008b3e:	2900      	cmp	r1, #0
 8008b40:	d102      	bne.n	8008b48 <sbrk_aligned+0x14>
 8008b42:	f000 fb99 	bl	8009278 <_sbrk_r>
 8008b46:	6030      	str	r0, [r6, #0]
 8008b48:	0029      	movs	r1, r5
 8008b4a:	0020      	movs	r0, r4
 8008b4c:	f000 fb94 	bl	8009278 <_sbrk_r>
 8008b50:	1c43      	adds	r3, r0, #1
 8008b52:	d103      	bne.n	8008b5c <sbrk_aligned+0x28>
 8008b54:	2501      	movs	r5, #1
 8008b56:	426d      	negs	r5, r5
 8008b58:	0028      	movs	r0, r5
 8008b5a:	bd70      	pop	{r4, r5, r6, pc}
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	1cc5      	adds	r5, r0, #3
 8008b60:	439d      	bics	r5, r3
 8008b62:	42a8      	cmp	r0, r5
 8008b64:	d0f8      	beq.n	8008b58 <sbrk_aligned+0x24>
 8008b66:	1a29      	subs	r1, r5, r0
 8008b68:	0020      	movs	r0, r4
 8008b6a:	f000 fb85 	bl	8009278 <_sbrk_r>
 8008b6e:	3001      	adds	r0, #1
 8008b70:	d1f2      	bne.n	8008b58 <sbrk_aligned+0x24>
 8008b72:	e7ef      	b.n	8008b54 <sbrk_aligned+0x20>
 8008b74:	200016a4 	.word	0x200016a4

08008b78 <_malloc_r>:
 8008b78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b7a:	2203      	movs	r2, #3
 8008b7c:	1ccb      	adds	r3, r1, #3
 8008b7e:	4393      	bics	r3, r2
 8008b80:	3308      	adds	r3, #8
 8008b82:	0005      	movs	r5, r0
 8008b84:	001f      	movs	r7, r3
 8008b86:	2b0c      	cmp	r3, #12
 8008b88:	d234      	bcs.n	8008bf4 <_malloc_r+0x7c>
 8008b8a:	270c      	movs	r7, #12
 8008b8c:	42b9      	cmp	r1, r7
 8008b8e:	d833      	bhi.n	8008bf8 <_malloc_r+0x80>
 8008b90:	0028      	movs	r0, r5
 8008b92:	f000 f871 	bl	8008c78 <__malloc_lock>
 8008b96:	4e37      	ldr	r6, [pc, #220]	@ (8008c74 <_malloc_r+0xfc>)
 8008b98:	6833      	ldr	r3, [r6, #0]
 8008b9a:	001c      	movs	r4, r3
 8008b9c:	2c00      	cmp	r4, #0
 8008b9e:	d12f      	bne.n	8008c00 <_malloc_r+0x88>
 8008ba0:	0039      	movs	r1, r7
 8008ba2:	0028      	movs	r0, r5
 8008ba4:	f7ff ffc6 	bl	8008b34 <sbrk_aligned>
 8008ba8:	0004      	movs	r4, r0
 8008baa:	1c43      	adds	r3, r0, #1
 8008bac:	d15f      	bne.n	8008c6e <_malloc_r+0xf6>
 8008bae:	6834      	ldr	r4, [r6, #0]
 8008bb0:	9400      	str	r4, [sp, #0]
 8008bb2:	9b00      	ldr	r3, [sp, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d14a      	bne.n	8008c4e <_malloc_r+0xd6>
 8008bb8:	2c00      	cmp	r4, #0
 8008bba:	d052      	beq.n	8008c62 <_malloc_r+0xea>
 8008bbc:	6823      	ldr	r3, [r4, #0]
 8008bbe:	0028      	movs	r0, r5
 8008bc0:	18e3      	adds	r3, r4, r3
 8008bc2:	9900      	ldr	r1, [sp, #0]
 8008bc4:	9301      	str	r3, [sp, #4]
 8008bc6:	f000 fb57 	bl	8009278 <_sbrk_r>
 8008bca:	9b01      	ldr	r3, [sp, #4]
 8008bcc:	4283      	cmp	r3, r0
 8008bce:	d148      	bne.n	8008c62 <_malloc_r+0xea>
 8008bd0:	6823      	ldr	r3, [r4, #0]
 8008bd2:	0028      	movs	r0, r5
 8008bd4:	1aff      	subs	r7, r7, r3
 8008bd6:	0039      	movs	r1, r7
 8008bd8:	f7ff ffac 	bl	8008b34 <sbrk_aligned>
 8008bdc:	3001      	adds	r0, #1
 8008bde:	d040      	beq.n	8008c62 <_malloc_r+0xea>
 8008be0:	6823      	ldr	r3, [r4, #0]
 8008be2:	19db      	adds	r3, r3, r7
 8008be4:	6023      	str	r3, [r4, #0]
 8008be6:	6833      	ldr	r3, [r6, #0]
 8008be8:	685a      	ldr	r2, [r3, #4]
 8008bea:	2a00      	cmp	r2, #0
 8008bec:	d133      	bne.n	8008c56 <_malloc_r+0xde>
 8008bee:	9b00      	ldr	r3, [sp, #0]
 8008bf0:	6033      	str	r3, [r6, #0]
 8008bf2:	e019      	b.n	8008c28 <_malloc_r+0xb0>
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	dac9      	bge.n	8008b8c <_malloc_r+0x14>
 8008bf8:	230c      	movs	r3, #12
 8008bfa:	602b      	str	r3, [r5, #0]
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c00:	6821      	ldr	r1, [r4, #0]
 8008c02:	1bc9      	subs	r1, r1, r7
 8008c04:	d420      	bmi.n	8008c48 <_malloc_r+0xd0>
 8008c06:	290b      	cmp	r1, #11
 8008c08:	d90a      	bls.n	8008c20 <_malloc_r+0xa8>
 8008c0a:	19e2      	adds	r2, r4, r7
 8008c0c:	6027      	str	r7, [r4, #0]
 8008c0e:	42a3      	cmp	r3, r4
 8008c10:	d104      	bne.n	8008c1c <_malloc_r+0xa4>
 8008c12:	6032      	str	r2, [r6, #0]
 8008c14:	6863      	ldr	r3, [r4, #4]
 8008c16:	6011      	str	r1, [r2, #0]
 8008c18:	6053      	str	r3, [r2, #4]
 8008c1a:	e005      	b.n	8008c28 <_malloc_r+0xb0>
 8008c1c:	605a      	str	r2, [r3, #4]
 8008c1e:	e7f9      	b.n	8008c14 <_malloc_r+0x9c>
 8008c20:	6862      	ldr	r2, [r4, #4]
 8008c22:	42a3      	cmp	r3, r4
 8008c24:	d10e      	bne.n	8008c44 <_malloc_r+0xcc>
 8008c26:	6032      	str	r2, [r6, #0]
 8008c28:	0028      	movs	r0, r5
 8008c2a:	f000 f82d 	bl	8008c88 <__malloc_unlock>
 8008c2e:	0020      	movs	r0, r4
 8008c30:	2207      	movs	r2, #7
 8008c32:	300b      	adds	r0, #11
 8008c34:	1d23      	adds	r3, r4, #4
 8008c36:	4390      	bics	r0, r2
 8008c38:	1ac2      	subs	r2, r0, r3
 8008c3a:	4298      	cmp	r0, r3
 8008c3c:	d0df      	beq.n	8008bfe <_malloc_r+0x86>
 8008c3e:	1a1b      	subs	r3, r3, r0
 8008c40:	50a3      	str	r3, [r4, r2]
 8008c42:	e7dc      	b.n	8008bfe <_malloc_r+0x86>
 8008c44:	605a      	str	r2, [r3, #4]
 8008c46:	e7ef      	b.n	8008c28 <_malloc_r+0xb0>
 8008c48:	0023      	movs	r3, r4
 8008c4a:	6864      	ldr	r4, [r4, #4]
 8008c4c:	e7a6      	b.n	8008b9c <_malloc_r+0x24>
 8008c4e:	9c00      	ldr	r4, [sp, #0]
 8008c50:	6863      	ldr	r3, [r4, #4]
 8008c52:	9300      	str	r3, [sp, #0]
 8008c54:	e7ad      	b.n	8008bb2 <_malloc_r+0x3a>
 8008c56:	001a      	movs	r2, r3
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	42a3      	cmp	r3, r4
 8008c5c:	d1fb      	bne.n	8008c56 <_malloc_r+0xde>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	e7da      	b.n	8008c18 <_malloc_r+0xa0>
 8008c62:	230c      	movs	r3, #12
 8008c64:	0028      	movs	r0, r5
 8008c66:	602b      	str	r3, [r5, #0]
 8008c68:	f000 f80e 	bl	8008c88 <__malloc_unlock>
 8008c6c:	e7c6      	b.n	8008bfc <_malloc_r+0x84>
 8008c6e:	6007      	str	r7, [r0, #0]
 8008c70:	e7da      	b.n	8008c28 <_malloc_r+0xb0>
 8008c72:	46c0      	nop			@ (mov r8, r8)
 8008c74:	200016a8 	.word	0x200016a8

08008c78 <__malloc_lock>:
 8008c78:	b510      	push	{r4, lr}
 8008c7a:	4802      	ldr	r0, [pc, #8]	@ (8008c84 <__malloc_lock+0xc>)
 8008c7c:	f7ff ff04 	bl	8008a88 <__retarget_lock_acquire_recursive>
 8008c80:	bd10      	pop	{r4, pc}
 8008c82:	46c0      	nop			@ (mov r8, r8)
 8008c84:	200016a0 	.word	0x200016a0

08008c88 <__malloc_unlock>:
 8008c88:	b510      	push	{r4, lr}
 8008c8a:	4802      	ldr	r0, [pc, #8]	@ (8008c94 <__malloc_unlock+0xc>)
 8008c8c:	f7ff fefd 	bl	8008a8a <__retarget_lock_release_recursive>
 8008c90:	bd10      	pop	{r4, pc}
 8008c92:	46c0      	nop			@ (mov r8, r8)
 8008c94:	200016a0 	.word	0x200016a0

08008c98 <__ssputs_r>:
 8008c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c9a:	688e      	ldr	r6, [r1, #8]
 8008c9c:	b085      	sub	sp, #20
 8008c9e:	001f      	movs	r7, r3
 8008ca0:	000c      	movs	r4, r1
 8008ca2:	680b      	ldr	r3, [r1, #0]
 8008ca4:	9002      	str	r0, [sp, #8]
 8008ca6:	9203      	str	r2, [sp, #12]
 8008ca8:	42be      	cmp	r6, r7
 8008caa:	d830      	bhi.n	8008d0e <__ssputs_r+0x76>
 8008cac:	210c      	movs	r1, #12
 8008cae:	5e62      	ldrsh	r2, [r4, r1]
 8008cb0:	2190      	movs	r1, #144	@ 0x90
 8008cb2:	00c9      	lsls	r1, r1, #3
 8008cb4:	420a      	tst	r2, r1
 8008cb6:	d028      	beq.n	8008d0a <__ssputs_r+0x72>
 8008cb8:	2003      	movs	r0, #3
 8008cba:	6921      	ldr	r1, [r4, #16]
 8008cbc:	1a5b      	subs	r3, r3, r1
 8008cbe:	9301      	str	r3, [sp, #4]
 8008cc0:	6963      	ldr	r3, [r4, #20]
 8008cc2:	4343      	muls	r3, r0
 8008cc4:	9801      	ldr	r0, [sp, #4]
 8008cc6:	0fdd      	lsrs	r5, r3, #31
 8008cc8:	18ed      	adds	r5, r5, r3
 8008cca:	1c7b      	adds	r3, r7, #1
 8008ccc:	181b      	adds	r3, r3, r0
 8008cce:	106d      	asrs	r5, r5, #1
 8008cd0:	42ab      	cmp	r3, r5
 8008cd2:	d900      	bls.n	8008cd6 <__ssputs_r+0x3e>
 8008cd4:	001d      	movs	r5, r3
 8008cd6:	0552      	lsls	r2, r2, #21
 8008cd8:	d528      	bpl.n	8008d2c <__ssputs_r+0x94>
 8008cda:	0029      	movs	r1, r5
 8008cdc:	9802      	ldr	r0, [sp, #8]
 8008cde:	f7ff ff4b 	bl	8008b78 <_malloc_r>
 8008ce2:	1e06      	subs	r6, r0, #0
 8008ce4:	d02c      	beq.n	8008d40 <__ssputs_r+0xa8>
 8008ce6:	9a01      	ldr	r2, [sp, #4]
 8008ce8:	6921      	ldr	r1, [r4, #16]
 8008cea:	f7ff fecf 	bl	8008a8c <memcpy>
 8008cee:	89a2      	ldrh	r2, [r4, #12]
 8008cf0:	4b18      	ldr	r3, [pc, #96]	@ (8008d54 <__ssputs_r+0xbc>)
 8008cf2:	401a      	ands	r2, r3
 8008cf4:	2380      	movs	r3, #128	@ 0x80
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	81a3      	strh	r3, [r4, #12]
 8008cfa:	9b01      	ldr	r3, [sp, #4]
 8008cfc:	6126      	str	r6, [r4, #16]
 8008cfe:	18f6      	adds	r6, r6, r3
 8008d00:	6026      	str	r6, [r4, #0]
 8008d02:	003e      	movs	r6, r7
 8008d04:	6165      	str	r5, [r4, #20]
 8008d06:	1aed      	subs	r5, r5, r3
 8008d08:	60a5      	str	r5, [r4, #8]
 8008d0a:	42be      	cmp	r6, r7
 8008d0c:	d900      	bls.n	8008d10 <__ssputs_r+0x78>
 8008d0e:	003e      	movs	r6, r7
 8008d10:	0032      	movs	r2, r6
 8008d12:	9903      	ldr	r1, [sp, #12]
 8008d14:	6820      	ldr	r0, [r4, #0]
 8008d16:	f000 fa9b 	bl	8009250 <memmove>
 8008d1a:	2000      	movs	r0, #0
 8008d1c:	68a3      	ldr	r3, [r4, #8]
 8008d1e:	1b9b      	subs	r3, r3, r6
 8008d20:	60a3      	str	r3, [r4, #8]
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	199b      	adds	r3, r3, r6
 8008d26:	6023      	str	r3, [r4, #0]
 8008d28:	b005      	add	sp, #20
 8008d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d2c:	002a      	movs	r2, r5
 8008d2e:	9802      	ldr	r0, [sp, #8]
 8008d30:	f000 fabf 	bl	80092b2 <_realloc_r>
 8008d34:	1e06      	subs	r6, r0, #0
 8008d36:	d1e0      	bne.n	8008cfa <__ssputs_r+0x62>
 8008d38:	6921      	ldr	r1, [r4, #16]
 8008d3a:	9802      	ldr	r0, [sp, #8]
 8008d3c:	f7ff feb0 	bl	8008aa0 <_free_r>
 8008d40:	230c      	movs	r3, #12
 8008d42:	2001      	movs	r0, #1
 8008d44:	9a02      	ldr	r2, [sp, #8]
 8008d46:	4240      	negs	r0, r0
 8008d48:	6013      	str	r3, [r2, #0]
 8008d4a:	89a2      	ldrh	r2, [r4, #12]
 8008d4c:	3334      	adds	r3, #52	@ 0x34
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	81a3      	strh	r3, [r4, #12]
 8008d52:	e7e9      	b.n	8008d28 <__ssputs_r+0x90>
 8008d54:	fffffb7f 	.word	0xfffffb7f

08008d58 <_svfiprintf_r>:
 8008d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d5a:	b0a1      	sub	sp, #132	@ 0x84
 8008d5c:	9003      	str	r0, [sp, #12]
 8008d5e:	001d      	movs	r5, r3
 8008d60:	898b      	ldrh	r3, [r1, #12]
 8008d62:	000f      	movs	r7, r1
 8008d64:	0016      	movs	r6, r2
 8008d66:	061b      	lsls	r3, r3, #24
 8008d68:	d511      	bpl.n	8008d8e <_svfiprintf_r+0x36>
 8008d6a:	690b      	ldr	r3, [r1, #16]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d10e      	bne.n	8008d8e <_svfiprintf_r+0x36>
 8008d70:	2140      	movs	r1, #64	@ 0x40
 8008d72:	f7ff ff01 	bl	8008b78 <_malloc_r>
 8008d76:	6038      	str	r0, [r7, #0]
 8008d78:	6138      	str	r0, [r7, #16]
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	d105      	bne.n	8008d8a <_svfiprintf_r+0x32>
 8008d7e:	230c      	movs	r3, #12
 8008d80:	9a03      	ldr	r2, [sp, #12]
 8008d82:	6013      	str	r3, [r2, #0]
 8008d84:	2001      	movs	r0, #1
 8008d86:	4240      	negs	r0, r0
 8008d88:	e0cf      	b.n	8008f2a <_svfiprintf_r+0x1d2>
 8008d8a:	2340      	movs	r3, #64	@ 0x40
 8008d8c:	617b      	str	r3, [r7, #20]
 8008d8e:	2300      	movs	r3, #0
 8008d90:	ac08      	add	r4, sp, #32
 8008d92:	6163      	str	r3, [r4, #20]
 8008d94:	3320      	adds	r3, #32
 8008d96:	7663      	strb	r3, [r4, #25]
 8008d98:	3310      	adds	r3, #16
 8008d9a:	76a3      	strb	r3, [r4, #26]
 8008d9c:	9507      	str	r5, [sp, #28]
 8008d9e:	0035      	movs	r5, r6
 8008da0:	782b      	ldrb	r3, [r5, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d001      	beq.n	8008daa <_svfiprintf_r+0x52>
 8008da6:	2b25      	cmp	r3, #37	@ 0x25
 8008da8:	d148      	bne.n	8008e3c <_svfiprintf_r+0xe4>
 8008daa:	1bab      	subs	r3, r5, r6
 8008dac:	9305      	str	r3, [sp, #20]
 8008dae:	42b5      	cmp	r5, r6
 8008db0:	d00b      	beq.n	8008dca <_svfiprintf_r+0x72>
 8008db2:	0032      	movs	r2, r6
 8008db4:	0039      	movs	r1, r7
 8008db6:	9803      	ldr	r0, [sp, #12]
 8008db8:	f7ff ff6e 	bl	8008c98 <__ssputs_r>
 8008dbc:	3001      	adds	r0, #1
 8008dbe:	d100      	bne.n	8008dc2 <_svfiprintf_r+0x6a>
 8008dc0:	e0ae      	b.n	8008f20 <_svfiprintf_r+0x1c8>
 8008dc2:	6963      	ldr	r3, [r4, #20]
 8008dc4:	9a05      	ldr	r2, [sp, #20]
 8008dc6:	189b      	adds	r3, r3, r2
 8008dc8:	6163      	str	r3, [r4, #20]
 8008dca:	782b      	ldrb	r3, [r5, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d100      	bne.n	8008dd2 <_svfiprintf_r+0x7a>
 8008dd0:	e0a6      	b.n	8008f20 <_svfiprintf_r+0x1c8>
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	4252      	negs	r2, r2
 8008dd8:	6062      	str	r2, [r4, #4]
 8008dda:	a904      	add	r1, sp, #16
 8008ddc:	3254      	adds	r2, #84	@ 0x54
 8008dde:	1852      	adds	r2, r2, r1
 8008de0:	1c6e      	adds	r6, r5, #1
 8008de2:	6023      	str	r3, [r4, #0]
 8008de4:	60e3      	str	r3, [r4, #12]
 8008de6:	60a3      	str	r3, [r4, #8]
 8008de8:	7013      	strb	r3, [r2, #0]
 8008dea:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008dec:	4b54      	ldr	r3, [pc, #336]	@ (8008f40 <_svfiprintf_r+0x1e8>)
 8008dee:	2205      	movs	r2, #5
 8008df0:	0018      	movs	r0, r3
 8008df2:	7831      	ldrb	r1, [r6, #0]
 8008df4:	9305      	str	r3, [sp, #20]
 8008df6:	f000 fa51 	bl	800929c <memchr>
 8008dfa:	1c75      	adds	r5, r6, #1
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d11f      	bne.n	8008e40 <_svfiprintf_r+0xe8>
 8008e00:	6822      	ldr	r2, [r4, #0]
 8008e02:	06d3      	lsls	r3, r2, #27
 8008e04:	d504      	bpl.n	8008e10 <_svfiprintf_r+0xb8>
 8008e06:	2353      	movs	r3, #83	@ 0x53
 8008e08:	a904      	add	r1, sp, #16
 8008e0a:	185b      	adds	r3, r3, r1
 8008e0c:	2120      	movs	r1, #32
 8008e0e:	7019      	strb	r1, [r3, #0]
 8008e10:	0713      	lsls	r3, r2, #28
 8008e12:	d504      	bpl.n	8008e1e <_svfiprintf_r+0xc6>
 8008e14:	2353      	movs	r3, #83	@ 0x53
 8008e16:	a904      	add	r1, sp, #16
 8008e18:	185b      	adds	r3, r3, r1
 8008e1a:	212b      	movs	r1, #43	@ 0x2b
 8008e1c:	7019      	strb	r1, [r3, #0]
 8008e1e:	7833      	ldrb	r3, [r6, #0]
 8008e20:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e22:	d016      	beq.n	8008e52 <_svfiprintf_r+0xfa>
 8008e24:	0035      	movs	r5, r6
 8008e26:	2100      	movs	r1, #0
 8008e28:	200a      	movs	r0, #10
 8008e2a:	68e3      	ldr	r3, [r4, #12]
 8008e2c:	782a      	ldrb	r2, [r5, #0]
 8008e2e:	1c6e      	adds	r6, r5, #1
 8008e30:	3a30      	subs	r2, #48	@ 0x30
 8008e32:	2a09      	cmp	r2, #9
 8008e34:	d950      	bls.n	8008ed8 <_svfiprintf_r+0x180>
 8008e36:	2900      	cmp	r1, #0
 8008e38:	d111      	bne.n	8008e5e <_svfiprintf_r+0x106>
 8008e3a:	e017      	b.n	8008e6c <_svfiprintf_r+0x114>
 8008e3c:	3501      	adds	r5, #1
 8008e3e:	e7af      	b.n	8008da0 <_svfiprintf_r+0x48>
 8008e40:	9b05      	ldr	r3, [sp, #20]
 8008e42:	6822      	ldr	r2, [r4, #0]
 8008e44:	1ac0      	subs	r0, r0, r3
 8008e46:	2301      	movs	r3, #1
 8008e48:	4083      	lsls	r3, r0
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	002e      	movs	r6, r5
 8008e4e:	6023      	str	r3, [r4, #0]
 8008e50:	e7cc      	b.n	8008dec <_svfiprintf_r+0x94>
 8008e52:	9b07      	ldr	r3, [sp, #28]
 8008e54:	1d19      	adds	r1, r3, #4
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	9107      	str	r1, [sp, #28]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	db01      	blt.n	8008e62 <_svfiprintf_r+0x10a>
 8008e5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e60:	e004      	b.n	8008e6c <_svfiprintf_r+0x114>
 8008e62:	425b      	negs	r3, r3
 8008e64:	60e3      	str	r3, [r4, #12]
 8008e66:	2302      	movs	r3, #2
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	6023      	str	r3, [r4, #0]
 8008e6c:	782b      	ldrb	r3, [r5, #0]
 8008e6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e70:	d10c      	bne.n	8008e8c <_svfiprintf_r+0x134>
 8008e72:	786b      	ldrb	r3, [r5, #1]
 8008e74:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e76:	d134      	bne.n	8008ee2 <_svfiprintf_r+0x18a>
 8008e78:	9b07      	ldr	r3, [sp, #28]
 8008e7a:	3502      	adds	r5, #2
 8008e7c:	1d1a      	adds	r2, r3, #4
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	9207      	str	r2, [sp, #28]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	da01      	bge.n	8008e8a <_svfiprintf_r+0x132>
 8008e86:	2301      	movs	r3, #1
 8008e88:	425b      	negs	r3, r3
 8008e8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e8c:	4e2d      	ldr	r6, [pc, #180]	@ (8008f44 <_svfiprintf_r+0x1ec>)
 8008e8e:	2203      	movs	r2, #3
 8008e90:	0030      	movs	r0, r6
 8008e92:	7829      	ldrb	r1, [r5, #0]
 8008e94:	f000 fa02 	bl	800929c <memchr>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d006      	beq.n	8008eaa <_svfiprintf_r+0x152>
 8008e9c:	2340      	movs	r3, #64	@ 0x40
 8008e9e:	1b80      	subs	r0, r0, r6
 8008ea0:	4083      	lsls	r3, r0
 8008ea2:	6822      	ldr	r2, [r4, #0]
 8008ea4:	3501      	adds	r5, #1
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	6023      	str	r3, [r4, #0]
 8008eaa:	7829      	ldrb	r1, [r5, #0]
 8008eac:	2206      	movs	r2, #6
 8008eae:	4826      	ldr	r0, [pc, #152]	@ (8008f48 <_svfiprintf_r+0x1f0>)
 8008eb0:	1c6e      	adds	r6, r5, #1
 8008eb2:	7621      	strb	r1, [r4, #24]
 8008eb4:	f000 f9f2 	bl	800929c <memchr>
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d038      	beq.n	8008f2e <_svfiprintf_r+0x1d6>
 8008ebc:	4b23      	ldr	r3, [pc, #140]	@ (8008f4c <_svfiprintf_r+0x1f4>)
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d122      	bne.n	8008f08 <_svfiprintf_r+0x1b0>
 8008ec2:	2207      	movs	r2, #7
 8008ec4:	9b07      	ldr	r3, [sp, #28]
 8008ec6:	3307      	adds	r3, #7
 8008ec8:	4393      	bics	r3, r2
 8008eca:	3308      	adds	r3, #8
 8008ecc:	9307      	str	r3, [sp, #28]
 8008ece:	6963      	ldr	r3, [r4, #20]
 8008ed0:	9a04      	ldr	r2, [sp, #16]
 8008ed2:	189b      	adds	r3, r3, r2
 8008ed4:	6163      	str	r3, [r4, #20]
 8008ed6:	e762      	b.n	8008d9e <_svfiprintf_r+0x46>
 8008ed8:	4343      	muls	r3, r0
 8008eda:	0035      	movs	r5, r6
 8008edc:	2101      	movs	r1, #1
 8008ede:	189b      	adds	r3, r3, r2
 8008ee0:	e7a4      	b.n	8008e2c <_svfiprintf_r+0xd4>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	200a      	movs	r0, #10
 8008ee6:	0019      	movs	r1, r3
 8008ee8:	3501      	adds	r5, #1
 8008eea:	6063      	str	r3, [r4, #4]
 8008eec:	782a      	ldrb	r2, [r5, #0]
 8008eee:	1c6e      	adds	r6, r5, #1
 8008ef0:	3a30      	subs	r2, #48	@ 0x30
 8008ef2:	2a09      	cmp	r2, #9
 8008ef4:	d903      	bls.n	8008efe <_svfiprintf_r+0x1a6>
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d0c8      	beq.n	8008e8c <_svfiprintf_r+0x134>
 8008efa:	9109      	str	r1, [sp, #36]	@ 0x24
 8008efc:	e7c6      	b.n	8008e8c <_svfiprintf_r+0x134>
 8008efe:	4341      	muls	r1, r0
 8008f00:	0035      	movs	r5, r6
 8008f02:	2301      	movs	r3, #1
 8008f04:	1889      	adds	r1, r1, r2
 8008f06:	e7f1      	b.n	8008eec <_svfiprintf_r+0x194>
 8008f08:	aa07      	add	r2, sp, #28
 8008f0a:	9200      	str	r2, [sp, #0]
 8008f0c:	0021      	movs	r1, r4
 8008f0e:	003a      	movs	r2, r7
 8008f10:	4b0f      	ldr	r3, [pc, #60]	@ (8008f50 <_svfiprintf_r+0x1f8>)
 8008f12:	9803      	ldr	r0, [sp, #12]
 8008f14:	e000      	b.n	8008f18 <_svfiprintf_r+0x1c0>
 8008f16:	bf00      	nop
 8008f18:	9004      	str	r0, [sp, #16]
 8008f1a:	9b04      	ldr	r3, [sp, #16]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	d1d6      	bne.n	8008ece <_svfiprintf_r+0x176>
 8008f20:	89bb      	ldrh	r3, [r7, #12]
 8008f22:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008f24:	065b      	lsls	r3, r3, #25
 8008f26:	d500      	bpl.n	8008f2a <_svfiprintf_r+0x1d2>
 8008f28:	e72c      	b.n	8008d84 <_svfiprintf_r+0x2c>
 8008f2a:	b021      	add	sp, #132	@ 0x84
 8008f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f2e:	aa07      	add	r2, sp, #28
 8008f30:	9200      	str	r2, [sp, #0]
 8008f32:	0021      	movs	r1, r4
 8008f34:	003a      	movs	r2, r7
 8008f36:	4b06      	ldr	r3, [pc, #24]	@ (8008f50 <_svfiprintf_r+0x1f8>)
 8008f38:	9803      	ldr	r0, [sp, #12]
 8008f3a:	f000 f87b 	bl	8009034 <_printf_i>
 8008f3e:	e7eb      	b.n	8008f18 <_svfiprintf_r+0x1c0>
 8008f40:	08009d90 	.word	0x08009d90
 8008f44:	08009d96 	.word	0x08009d96
 8008f48:	08009d9a 	.word	0x08009d9a
 8008f4c:	00000000 	.word	0x00000000
 8008f50:	08008c99 	.word	0x08008c99

08008f54 <_printf_common>:
 8008f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f56:	0016      	movs	r6, r2
 8008f58:	9301      	str	r3, [sp, #4]
 8008f5a:	688a      	ldr	r2, [r1, #8]
 8008f5c:	690b      	ldr	r3, [r1, #16]
 8008f5e:	000c      	movs	r4, r1
 8008f60:	9000      	str	r0, [sp, #0]
 8008f62:	4293      	cmp	r3, r2
 8008f64:	da00      	bge.n	8008f68 <_printf_common+0x14>
 8008f66:	0013      	movs	r3, r2
 8008f68:	0022      	movs	r2, r4
 8008f6a:	6033      	str	r3, [r6, #0]
 8008f6c:	3243      	adds	r2, #67	@ 0x43
 8008f6e:	7812      	ldrb	r2, [r2, #0]
 8008f70:	2a00      	cmp	r2, #0
 8008f72:	d001      	beq.n	8008f78 <_printf_common+0x24>
 8008f74:	3301      	adds	r3, #1
 8008f76:	6033      	str	r3, [r6, #0]
 8008f78:	6823      	ldr	r3, [r4, #0]
 8008f7a:	069b      	lsls	r3, r3, #26
 8008f7c:	d502      	bpl.n	8008f84 <_printf_common+0x30>
 8008f7e:	6833      	ldr	r3, [r6, #0]
 8008f80:	3302      	adds	r3, #2
 8008f82:	6033      	str	r3, [r6, #0]
 8008f84:	6822      	ldr	r2, [r4, #0]
 8008f86:	2306      	movs	r3, #6
 8008f88:	0015      	movs	r5, r2
 8008f8a:	401d      	ands	r5, r3
 8008f8c:	421a      	tst	r2, r3
 8008f8e:	d027      	beq.n	8008fe0 <_printf_common+0x8c>
 8008f90:	0023      	movs	r3, r4
 8008f92:	3343      	adds	r3, #67	@ 0x43
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	1e5a      	subs	r2, r3, #1
 8008f98:	4193      	sbcs	r3, r2
 8008f9a:	6822      	ldr	r2, [r4, #0]
 8008f9c:	0692      	lsls	r2, r2, #26
 8008f9e:	d430      	bmi.n	8009002 <_printf_common+0xae>
 8008fa0:	0022      	movs	r2, r4
 8008fa2:	9901      	ldr	r1, [sp, #4]
 8008fa4:	9800      	ldr	r0, [sp, #0]
 8008fa6:	9d08      	ldr	r5, [sp, #32]
 8008fa8:	3243      	adds	r2, #67	@ 0x43
 8008faa:	47a8      	blx	r5
 8008fac:	3001      	adds	r0, #1
 8008fae:	d025      	beq.n	8008ffc <_printf_common+0xa8>
 8008fb0:	2206      	movs	r2, #6
 8008fb2:	6823      	ldr	r3, [r4, #0]
 8008fb4:	2500      	movs	r5, #0
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	2b04      	cmp	r3, #4
 8008fba:	d105      	bne.n	8008fc8 <_printf_common+0x74>
 8008fbc:	6833      	ldr	r3, [r6, #0]
 8008fbe:	68e5      	ldr	r5, [r4, #12]
 8008fc0:	1aed      	subs	r5, r5, r3
 8008fc2:	43eb      	mvns	r3, r5
 8008fc4:	17db      	asrs	r3, r3, #31
 8008fc6:	401d      	ands	r5, r3
 8008fc8:	68a3      	ldr	r3, [r4, #8]
 8008fca:	6922      	ldr	r2, [r4, #16]
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	dd01      	ble.n	8008fd4 <_printf_common+0x80>
 8008fd0:	1a9b      	subs	r3, r3, r2
 8008fd2:	18ed      	adds	r5, r5, r3
 8008fd4:	2600      	movs	r6, #0
 8008fd6:	42b5      	cmp	r5, r6
 8008fd8:	d120      	bne.n	800901c <_printf_common+0xc8>
 8008fda:	2000      	movs	r0, #0
 8008fdc:	e010      	b.n	8009000 <_printf_common+0xac>
 8008fde:	3501      	adds	r5, #1
 8008fe0:	68e3      	ldr	r3, [r4, #12]
 8008fe2:	6832      	ldr	r2, [r6, #0]
 8008fe4:	1a9b      	subs	r3, r3, r2
 8008fe6:	42ab      	cmp	r3, r5
 8008fe8:	ddd2      	ble.n	8008f90 <_printf_common+0x3c>
 8008fea:	0022      	movs	r2, r4
 8008fec:	2301      	movs	r3, #1
 8008fee:	9901      	ldr	r1, [sp, #4]
 8008ff0:	9800      	ldr	r0, [sp, #0]
 8008ff2:	9f08      	ldr	r7, [sp, #32]
 8008ff4:	3219      	adds	r2, #25
 8008ff6:	47b8      	blx	r7
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	d1f0      	bne.n	8008fde <_printf_common+0x8a>
 8008ffc:	2001      	movs	r0, #1
 8008ffe:	4240      	negs	r0, r0
 8009000:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009002:	2030      	movs	r0, #48	@ 0x30
 8009004:	18e1      	adds	r1, r4, r3
 8009006:	3143      	adds	r1, #67	@ 0x43
 8009008:	7008      	strb	r0, [r1, #0]
 800900a:	0021      	movs	r1, r4
 800900c:	1c5a      	adds	r2, r3, #1
 800900e:	3145      	adds	r1, #69	@ 0x45
 8009010:	7809      	ldrb	r1, [r1, #0]
 8009012:	18a2      	adds	r2, r4, r2
 8009014:	3243      	adds	r2, #67	@ 0x43
 8009016:	3302      	adds	r3, #2
 8009018:	7011      	strb	r1, [r2, #0]
 800901a:	e7c1      	b.n	8008fa0 <_printf_common+0x4c>
 800901c:	0022      	movs	r2, r4
 800901e:	2301      	movs	r3, #1
 8009020:	9901      	ldr	r1, [sp, #4]
 8009022:	9800      	ldr	r0, [sp, #0]
 8009024:	9f08      	ldr	r7, [sp, #32]
 8009026:	321a      	adds	r2, #26
 8009028:	47b8      	blx	r7
 800902a:	3001      	adds	r0, #1
 800902c:	d0e6      	beq.n	8008ffc <_printf_common+0xa8>
 800902e:	3601      	adds	r6, #1
 8009030:	e7d1      	b.n	8008fd6 <_printf_common+0x82>
	...

08009034 <_printf_i>:
 8009034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009036:	b08b      	sub	sp, #44	@ 0x2c
 8009038:	9206      	str	r2, [sp, #24]
 800903a:	000a      	movs	r2, r1
 800903c:	3243      	adds	r2, #67	@ 0x43
 800903e:	9307      	str	r3, [sp, #28]
 8009040:	9005      	str	r0, [sp, #20]
 8009042:	9203      	str	r2, [sp, #12]
 8009044:	7e0a      	ldrb	r2, [r1, #24]
 8009046:	000c      	movs	r4, r1
 8009048:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800904a:	2a78      	cmp	r2, #120	@ 0x78
 800904c:	d809      	bhi.n	8009062 <_printf_i+0x2e>
 800904e:	2a62      	cmp	r2, #98	@ 0x62
 8009050:	d80b      	bhi.n	800906a <_printf_i+0x36>
 8009052:	2a00      	cmp	r2, #0
 8009054:	d100      	bne.n	8009058 <_printf_i+0x24>
 8009056:	e0bc      	b.n	80091d2 <_printf_i+0x19e>
 8009058:	497b      	ldr	r1, [pc, #492]	@ (8009248 <_printf_i+0x214>)
 800905a:	9104      	str	r1, [sp, #16]
 800905c:	2a58      	cmp	r2, #88	@ 0x58
 800905e:	d100      	bne.n	8009062 <_printf_i+0x2e>
 8009060:	e090      	b.n	8009184 <_printf_i+0x150>
 8009062:	0025      	movs	r5, r4
 8009064:	3542      	adds	r5, #66	@ 0x42
 8009066:	702a      	strb	r2, [r5, #0]
 8009068:	e022      	b.n	80090b0 <_printf_i+0x7c>
 800906a:	0010      	movs	r0, r2
 800906c:	3863      	subs	r0, #99	@ 0x63
 800906e:	2815      	cmp	r0, #21
 8009070:	d8f7      	bhi.n	8009062 <_printf_i+0x2e>
 8009072:	f7f7 f84f 	bl	8000114 <__gnu_thumb1_case_shi>
 8009076:	0016      	.short	0x0016
 8009078:	fff6001f 	.word	0xfff6001f
 800907c:	fff6fff6 	.word	0xfff6fff6
 8009080:	001ffff6 	.word	0x001ffff6
 8009084:	fff6fff6 	.word	0xfff6fff6
 8009088:	fff6fff6 	.word	0xfff6fff6
 800908c:	003600a1 	.word	0x003600a1
 8009090:	fff60080 	.word	0xfff60080
 8009094:	00b2fff6 	.word	0x00b2fff6
 8009098:	0036fff6 	.word	0x0036fff6
 800909c:	fff6fff6 	.word	0xfff6fff6
 80090a0:	0084      	.short	0x0084
 80090a2:	0025      	movs	r5, r4
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	3542      	adds	r5, #66	@ 0x42
 80090a8:	1d11      	adds	r1, r2, #4
 80090aa:	6019      	str	r1, [r3, #0]
 80090ac:	6813      	ldr	r3, [r2, #0]
 80090ae:	702b      	strb	r3, [r5, #0]
 80090b0:	2301      	movs	r3, #1
 80090b2:	e0a0      	b.n	80091f6 <_printf_i+0x1c2>
 80090b4:	6818      	ldr	r0, [r3, #0]
 80090b6:	6809      	ldr	r1, [r1, #0]
 80090b8:	1d02      	adds	r2, r0, #4
 80090ba:	060d      	lsls	r5, r1, #24
 80090bc:	d50b      	bpl.n	80090d6 <_printf_i+0xa2>
 80090be:	6806      	ldr	r6, [r0, #0]
 80090c0:	601a      	str	r2, [r3, #0]
 80090c2:	2e00      	cmp	r6, #0
 80090c4:	da03      	bge.n	80090ce <_printf_i+0x9a>
 80090c6:	232d      	movs	r3, #45	@ 0x2d
 80090c8:	9a03      	ldr	r2, [sp, #12]
 80090ca:	4276      	negs	r6, r6
 80090cc:	7013      	strb	r3, [r2, #0]
 80090ce:	4b5e      	ldr	r3, [pc, #376]	@ (8009248 <_printf_i+0x214>)
 80090d0:	270a      	movs	r7, #10
 80090d2:	9304      	str	r3, [sp, #16]
 80090d4:	e018      	b.n	8009108 <_printf_i+0xd4>
 80090d6:	6806      	ldr	r6, [r0, #0]
 80090d8:	601a      	str	r2, [r3, #0]
 80090da:	0649      	lsls	r1, r1, #25
 80090dc:	d5f1      	bpl.n	80090c2 <_printf_i+0x8e>
 80090de:	b236      	sxth	r6, r6
 80090e0:	e7ef      	b.n	80090c2 <_printf_i+0x8e>
 80090e2:	6808      	ldr	r0, [r1, #0]
 80090e4:	6819      	ldr	r1, [r3, #0]
 80090e6:	c940      	ldmia	r1!, {r6}
 80090e8:	0605      	lsls	r5, r0, #24
 80090ea:	d402      	bmi.n	80090f2 <_printf_i+0xbe>
 80090ec:	0640      	lsls	r0, r0, #25
 80090ee:	d500      	bpl.n	80090f2 <_printf_i+0xbe>
 80090f0:	b2b6      	uxth	r6, r6
 80090f2:	6019      	str	r1, [r3, #0]
 80090f4:	4b54      	ldr	r3, [pc, #336]	@ (8009248 <_printf_i+0x214>)
 80090f6:	270a      	movs	r7, #10
 80090f8:	9304      	str	r3, [sp, #16]
 80090fa:	2a6f      	cmp	r2, #111	@ 0x6f
 80090fc:	d100      	bne.n	8009100 <_printf_i+0xcc>
 80090fe:	3f02      	subs	r7, #2
 8009100:	0023      	movs	r3, r4
 8009102:	2200      	movs	r2, #0
 8009104:	3343      	adds	r3, #67	@ 0x43
 8009106:	701a      	strb	r2, [r3, #0]
 8009108:	6863      	ldr	r3, [r4, #4]
 800910a:	60a3      	str	r3, [r4, #8]
 800910c:	2b00      	cmp	r3, #0
 800910e:	db03      	blt.n	8009118 <_printf_i+0xe4>
 8009110:	2104      	movs	r1, #4
 8009112:	6822      	ldr	r2, [r4, #0]
 8009114:	438a      	bics	r2, r1
 8009116:	6022      	str	r2, [r4, #0]
 8009118:	2e00      	cmp	r6, #0
 800911a:	d102      	bne.n	8009122 <_printf_i+0xee>
 800911c:	9d03      	ldr	r5, [sp, #12]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d00c      	beq.n	800913c <_printf_i+0x108>
 8009122:	9d03      	ldr	r5, [sp, #12]
 8009124:	0030      	movs	r0, r6
 8009126:	0039      	movs	r1, r7
 8009128:	f7f7 f884 	bl	8000234 <__aeabi_uidivmod>
 800912c:	9b04      	ldr	r3, [sp, #16]
 800912e:	3d01      	subs	r5, #1
 8009130:	5c5b      	ldrb	r3, [r3, r1]
 8009132:	702b      	strb	r3, [r5, #0]
 8009134:	0033      	movs	r3, r6
 8009136:	0006      	movs	r6, r0
 8009138:	429f      	cmp	r7, r3
 800913a:	d9f3      	bls.n	8009124 <_printf_i+0xf0>
 800913c:	2f08      	cmp	r7, #8
 800913e:	d109      	bne.n	8009154 <_printf_i+0x120>
 8009140:	6823      	ldr	r3, [r4, #0]
 8009142:	07db      	lsls	r3, r3, #31
 8009144:	d506      	bpl.n	8009154 <_printf_i+0x120>
 8009146:	6862      	ldr	r2, [r4, #4]
 8009148:	6923      	ldr	r3, [r4, #16]
 800914a:	429a      	cmp	r2, r3
 800914c:	dc02      	bgt.n	8009154 <_printf_i+0x120>
 800914e:	2330      	movs	r3, #48	@ 0x30
 8009150:	3d01      	subs	r5, #1
 8009152:	702b      	strb	r3, [r5, #0]
 8009154:	9b03      	ldr	r3, [sp, #12]
 8009156:	1b5b      	subs	r3, r3, r5
 8009158:	6123      	str	r3, [r4, #16]
 800915a:	9b07      	ldr	r3, [sp, #28]
 800915c:	0021      	movs	r1, r4
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	9805      	ldr	r0, [sp, #20]
 8009162:	9b06      	ldr	r3, [sp, #24]
 8009164:	aa09      	add	r2, sp, #36	@ 0x24
 8009166:	f7ff fef5 	bl	8008f54 <_printf_common>
 800916a:	3001      	adds	r0, #1
 800916c:	d148      	bne.n	8009200 <_printf_i+0x1cc>
 800916e:	2001      	movs	r0, #1
 8009170:	4240      	negs	r0, r0
 8009172:	b00b      	add	sp, #44	@ 0x2c
 8009174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009176:	2220      	movs	r2, #32
 8009178:	6809      	ldr	r1, [r1, #0]
 800917a:	430a      	orrs	r2, r1
 800917c:	6022      	str	r2, [r4, #0]
 800917e:	2278      	movs	r2, #120	@ 0x78
 8009180:	4932      	ldr	r1, [pc, #200]	@ (800924c <_printf_i+0x218>)
 8009182:	9104      	str	r1, [sp, #16]
 8009184:	0021      	movs	r1, r4
 8009186:	3145      	adds	r1, #69	@ 0x45
 8009188:	700a      	strb	r2, [r1, #0]
 800918a:	6819      	ldr	r1, [r3, #0]
 800918c:	6822      	ldr	r2, [r4, #0]
 800918e:	c940      	ldmia	r1!, {r6}
 8009190:	0610      	lsls	r0, r2, #24
 8009192:	d402      	bmi.n	800919a <_printf_i+0x166>
 8009194:	0650      	lsls	r0, r2, #25
 8009196:	d500      	bpl.n	800919a <_printf_i+0x166>
 8009198:	b2b6      	uxth	r6, r6
 800919a:	6019      	str	r1, [r3, #0]
 800919c:	07d3      	lsls	r3, r2, #31
 800919e:	d502      	bpl.n	80091a6 <_printf_i+0x172>
 80091a0:	2320      	movs	r3, #32
 80091a2:	4313      	orrs	r3, r2
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	2e00      	cmp	r6, #0
 80091a8:	d001      	beq.n	80091ae <_printf_i+0x17a>
 80091aa:	2710      	movs	r7, #16
 80091ac:	e7a8      	b.n	8009100 <_printf_i+0xcc>
 80091ae:	2220      	movs	r2, #32
 80091b0:	6823      	ldr	r3, [r4, #0]
 80091b2:	4393      	bics	r3, r2
 80091b4:	6023      	str	r3, [r4, #0]
 80091b6:	e7f8      	b.n	80091aa <_printf_i+0x176>
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	680d      	ldr	r5, [r1, #0]
 80091bc:	1d10      	adds	r0, r2, #4
 80091be:	6949      	ldr	r1, [r1, #20]
 80091c0:	6018      	str	r0, [r3, #0]
 80091c2:	6813      	ldr	r3, [r2, #0]
 80091c4:	062e      	lsls	r6, r5, #24
 80091c6:	d501      	bpl.n	80091cc <_printf_i+0x198>
 80091c8:	6019      	str	r1, [r3, #0]
 80091ca:	e002      	b.n	80091d2 <_printf_i+0x19e>
 80091cc:	066d      	lsls	r5, r5, #25
 80091ce:	d5fb      	bpl.n	80091c8 <_printf_i+0x194>
 80091d0:	8019      	strh	r1, [r3, #0]
 80091d2:	2300      	movs	r3, #0
 80091d4:	9d03      	ldr	r5, [sp, #12]
 80091d6:	6123      	str	r3, [r4, #16]
 80091d8:	e7bf      	b.n	800915a <_printf_i+0x126>
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	1d11      	adds	r1, r2, #4
 80091de:	6019      	str	r1, [r3, #0]
 80091e0:	6815      	ldr	r5, [r2, #0]
 80091e2:	2100      	movs	r1, #0
 80091e4:	0028      	movs	r0, r5
 80091e6:	6862      	ldr	r2, [r4, #4]
 80091e8:	f000 f858 	bl	800929c <memchr>
 80091ec:	2800      	cmp	r0, #0
 80091ee:	d001      	beq.n	80091f4 <_printf_i+0x1c0>
 80091f0:	1b40      	subs	r0, r0, r5
 80091f2:	6060      	str	r0, [r4, #4]
 80091f4:	6863      	ldr	r3, [r4, #4]
 80091f6:	6123      	str	r3, [r4, #16]
 80091f8:	2300      	movs	r3, #0
 80091fa:	9a03      	ldr	r2, [sp, #12]
 80091fc:	7013      	strb	r3, [r2, #0]
 80091fe:	e7ac      	b.n	800915a <_printf_i+0x126>
 8009200:	002a      	movs	r2, r5
 8009202:	6923      	ldr	r3, [r4, #16]
 8009204:	9906      	ldr	r1, [sp, #24]
 8009206:	9805      	ldr	r0, [sp, #20]
 8009208:	9d07      	ldr	r5, [sp, #28]
 800920a:	47a8      	blx	r5
 800920c:	3001      	adds	r0, #1
 800920e:	d0ae      	beq.n	800916e <_printf_i+0x13a>
 8009210:	6823      	ldr	r3, [r4, #0]
 8009212:	079b      	lsls	r3, r3, #30
 8009214:	d415      	bmi.n	8009242 <_printf_i+0x20e>
 8009216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009218:	68e0      	ldr	r0, [r4, #12]
 800921a:	4298      	cmp	r0, r3
 800921c:	daa9      	bge.n	8009172 <_printf_i+0x13e>
 800921e:	0018      	movs	r0, r3
 8009220:	e7a7      	b.n	8009172 <_printf_i+0x13e>
 8009222:	0022      	movs	r2, r4
 8009224:	2301      	movs	r3, #1
 8009226:	9906      	ldr	r1, [sp, #24]
 8009228:	9805      	ldr	r0, [sp, #20]
 800922a:	9e07      	ldr	r6, [sp, #28]
 800922c:	3219      	adds	r2, #25
 800922e:	47b0      	blx	r6
 8009230:	3001      	adds	r0, #1
 8009232:	d09c      	beq.n	800916e <_printf_i+0x13a>
 8009234:	3501      	adds	r5, #1
 8009236:	68e3      	ldr	r3, [r4, #12]
 8009238:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800923a:	1a9b      	subs	r3, r3, r2
 800923c:	42ab      	cmp	r3, r5
 800923e:	dcf0      	bgt.n	8009222 <_printf_i+0x1ee>
 8009240:	e7e9      	b.n	8009216 <_printf_i+0x1e2>
 8009242:	2500      	movs	r5, #0
 8009244:	e7f7      	b.n	8009236 <_printf_i+0x202>
 8009246:	46c0      	nop			@ (mov r8, r8)
 8009248:	08009da1 	.word	0x08009da1
 800924c:	08009db2 	.word	0x08009db2

08009250 <memmove>:
 8009250:	b510      	push	{r4, lr}
 8009252:	4288      	cmp	r0, r1
 8009254:	d806      	bhi.n	8009264 <memmove+0x14>
 8009256:	2300      	movs	r3, #0
 8009258:	429a      	cmp	r2, r3
 800925a:	d008      	beq.n	800926e <memmove+0x1e>
 800925c:	5ccc      	ldrb	r4, [r1, r3]
 800925e:	54c4      	strb	r4, [r0, r3]
 8009260:	3301      	adds	r3, #1
 8009262:	e7f9      	b.n	8009258 <memmove+0x8>
 8009264:	188b      	adds	r3, r1, r2
 8009266:	4298      	cmp	r0, r3
 8009268:	d2f5      	bcs.n	8009256 <memmove+0x6>
 800926a:	3a01      	subs	r2, #1
 800926c:	d200      	bcs.n	8009270 <memmove+0x20>
 800926e:	bd10      	pop	{r4, pc}
 8009270:	5c8b      	ldrb	r3, [r1, r2]
 8009272:	5483      	strb	r3, [r0, r2]
 8009274:	e7f9      	b.n	800926a <memmove+0x1a>
	...

08009278 <_sbrk_r>:
 8009278:	2300      	movs	r3, #0
 800927a:	b570      	push	{r4, r5, r6, lr}
 800927c:	4d06      	ldr	r5, [pc, #24]	@ (8009298 <_sbrk_r+0x20>)
 800927e:	0004      	movs	r4, r0
 8009280:	0008      	movs	r0, r1
 8009282:	602b      	str	r3, [r5, #0]
 8009284:	f7fa fd24 	bl	8003cd0 <_sbrk>
 8009288:	1c43      	adds	r3, r0, #1
 800928a:	d103      	bne.n	8009294 <_sbrk_r+0x1c>
 800928c:	682b      	ldr	r3, [r5, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d000      	beq.n	8009294 <_sbrk_r+0x1c>
 8009292:	6023      	str	r3, [r4, #0]
 8009294:	bd70      	pop	{r4, r5, r6, pc}
 8009296:	46c0      	nop			@ (mov r8, r8)
 8009298:	2000169c 	.word	0x2000169c

0800929c <memchr>:
 800929c:	b2c9      	uxtb	r1, r1
 800929e:	1882      	adds	r2, r0, r2
 80092a0:	4290      	cmp	r0, r2
 80092a2:	d101      	bne.n	80092a8 <memchr+0xc>
 80092a4:	2000      	movs	r0, #0
 80092a6:	4770      	bx	lr
 80092a8:	7803      	ldrb	r3, [r0, #0]
 80092aa:	428b      	cmp	r3, r1
 80092ac:	d0fb      	beq.n	80092a6 <memchr+0xa>
 80092ae:	3001      	adds	r0, #1
 80092b0:	e7f6      	b.n	80092a0 <memchr+0x4>

080092b2 <_realloc_r>:
 80092b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092b4:	0006      	movs	r6, r0
 80092b6:	000c      	movs	r4, r1
 80092b8:	0015      	movs	r5, r2
 80092ba:	2900      	cmp	r1, #0
 80092bc:	d105      	bne.n	80092ca <_realloc_r+0x18>
 80092be:	0011      	movs	r1, r2
 80092c0:	f7ff fc5a 	bl	8008b78 <_malloc_r>
 80092c4:	0004      	movs	r4, r0
 80092c6:	0020      	movs	r0, r4
 80092c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80092ca:	2a00      	cmp	r2, #0
 80092cc:	d103      	bne.n	80092d6 <_realloc_r+0x24>
 80092ce:	f7ff fbe7 	bl	8008aa0 <_free_r>
 80092d2:	2400      	movs	r4, #0
 80092d4:	e7f7      	b.n	80092c6 <_realloc_r+0x14>
 80092d6:	f000 f81b 	bl	8009310 <_malloc_usable_size_r>
 80092da:	0007      	movs	r7, r0
 80092dc:	4285      	cmp	r5, r0
 80092de:	d802      	bhi.n	80092e6 <_realloc_r+0x34>
 80092e0:	0843      	lsrs	r3, r0, #1
 80092e2:	42ab      	cmp	r3, r5
 80092e4:	d3ef      	bcc.n	80092c6 <_realloc_r+0x14>
 80092e6:	0029      	movs	r1, r5
 80092e8:	0030      	movs	r0, r6
 80092ea:	f7ff fc45 	bl	8008b78 <_malloc_r>
 80092ee:	9001      	str	r0, [sp, #4]
 80092f0:	2800      	cmp	r0, #0
 80092f2:	d0ee      	beq.n	80092d2 <_realloc_r+0x20>
 80092f4:	002a      	movs	r2, r5
 80092f6:	42bd      	cmp	r5, r7
 80092f8:	d900      	bls.n	80092fc <_realloc_r+0x4a>
 80092fa:	003a      	movs	r2, r7
 80092fc:	0021      	movs	r1, r4
 80092fe:	9801      	ldr	r0, [sp, #4]
 8009300:	f7ff fbc4 	bl	8008a8c <memcpy>
 8009304:	0021      	movs	r1, r4
 8009306:	0030      	movs	r0, r6
 8009308:	f7ff fbca 	bl	8008aa0 <_free_r>
 800930c:	9c01      	ldr	r4, [sp, #4]
 800930e:	e7da      	b.n	80092c6 <_realloc_r+0x14>

08009310 <_malloc_usable_size_r>:
 8009310:	1f0b      	subs	r3, r1, #4
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	1f18      	subs	r0, r3, #4
 8009316:	2b00      	cmp	r3, #0
 8009318:	da01      	bge.n	800931e <_malloc_usable_size_r+0xe>
 800931a:	580b      	ldr	r3, [r1, r0]
 800931c:	18c0      	adds	r0, r0, r3
 800931e:	4770      	bx	lr

08009320 <fmod>:
 8009320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009322:	0014      	movs	r4, r2
 8009324:	001d      	movs	r5, r3
 8009326:	9000      	str	r0, [sp, #0]
 8009328:	9101      	str	r1, [sp, #4]
 800932a:	f000 f823 	bl	8009374 <__ieee754_fmod>
 800932e:	0022      	movs	r2, r4
 8009330:	0006      	movs	r6, r0
 8009332:	000f      	movs	r7, r1
 8009334:	9800      	ldr	r0, [sp, #0]
 8009336:	9901      	ldr	r1, [sp, #4]
 8009338:	002b      	movs	r3, r5
 800933a:	f7f8 fb9d 	bl	8001a78 <__aeabi_dcmpun>
 800933e:	2800      	cmp	r0, #0
 8009340:	d113      	bne.n	800936a <fmod+0x4a>
 8009342:	2200      	movs	r2, #0
 8009344:	2300      	movs	r3, #0
 8009346:	0020      	movs	r0, r4
 8009348:	0029      	movs	r1, r5
 800934a:	f7f7 f873 	bl	8000434 <__aeabi_dcmpeq>
 800934e:	2800      	cmp	r0, #0
 8009350:	d00b      	beq.n	800936a <fmod+0x4a>
 8009352:	f7ff fb6f 	bl	8008a34 <__errno>
 8009356:	2321      	movs	r3, #33	@ 0x21
 8009358:	2200      	movs	r2, #0
 800935a:	6003      	str	r3, [r0, #0]
 800935c:	2300      	movs	r3, #0
 800935e:	0010      	movs	r0, r2
 8009360:	0019      	movs	r1, r3
 8009362:	f7f7 fc7d 	bl	8000c60 <__aeabi_ddiv>
 8009366:	0006      	movs	r6, r0
 8009368:	000f      	movs	r7, r1
 800936a:	0030      	movs	r0, r6
 800936c:	0039      	movs	r1, r7
 800936e:	b003      	add	sp, #12
 8009370:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009374 <__ieee754_fmod>:
 8009374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009376:	b085      	sub	sp, #20
 8009378:	9200      	str	r2, [sp, #0]
 800937a:	9301      	str	r3, [sp, #4]
 800937c:	9b01      	ldr	r3, [sp, #4]
 800937e:	9e00      	ldr	r6, [sp, #0]
 8009380:	005b      	lsls	r3, r3, #1
 8009382:	085b      	lsrs	r3, r3, #1
 8009384:	469c      	mov	ip, r3
 8009386:	9603      	str	r6, [sp, #12]
 8009388:	4333      	orrs	r3, r6
 800938a:	d00d      	beq.n	80093a8 <__ieee754_fmod+0x34>
 800938c:	4b7a      	ldr	r3, [pc, #488]	@ (8009578 <__ieee754_fmod+0x204>)
 800938e:	004a      	lsls	r2, r1, #1
 8009390:	000d      	movs	r5, r1
 8009392:	0852      	lsrs	r2, r2, #1
 8009394:	429a      	cmp	r2, r3
 8009396:	d807      	bhi.n	80093a8 <__ieee754_fmod+0x34>
 8009398:	4664      	mov	r4, ip
 800939a:	4273      	negs	r3, r6
 800939c:	4333      	orrs	r3, r6
 800939e:	0fdb      	lsrs	r3, r3, #31
 80093a0:	4323      	orrs	r3, r4
 80093a2:	4c76      	ldr	r4, [pc, #472]	@ (800957c <__ieee754_fmod+0x208>)
 80093a4:	42a3      	cmp	r3, r4
 80093a6:	d909      	bls.n	80093bc <__ieee754_fmod+0x48>
 80093a8:	9a00      	ldr	r2, [sp, #0]
 80093aa:	9b01      	ldr	r3, [sp, #4]
 80093ac:	f7f8 f89c 	bl	80014e8 <__aeabi_dmul>
 80093b0:	0002      	movs	r2, r0
 80093b2:	000b      	movs	r3, r1
 80093b4:	f7f7 fc54 	bl	8000c60 <__aeabi_ddiv>
 80093b8:	b005      	add	sp, #20
 80093ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093bc:	0fcc      	lsrs	r4, r1, #31
 80093be:	07e4      	lsls	r4, r4, #31
 80093c0:	0007      	movs	r7, r0
 80093c2:	0003      	movs	r3, r0
 80093c4:	9402      	str	r4, [sp, #8]
 80093c6:	4562      	cmp	r2, ip
 80093c8:	dc0a      	bgt.n	80093e0 <__ieee754_fmod+0x6c>
 80093ca:	dbf5      	blt.n	80093b8 <__ieee754_fmod+0x44>
 80093cc:	4286      	cmp	r6, r0
 80093ce:	d8f3      	bhi.n	80093b8 <__ieee754_fmod+0x44>
 80093d0:	d106      	bne.n	80093e0 <__ieee754_fmod+0x6c>
 80093d2:	0022      	movs	r2, r4
 80093d4:	4b6a      	ldr	r3, [pc, #424]	@ (8009580 <__ieee754_fmod+0x20c>)
 80093d6:	0f12      	lsrs	r2, r2, #28
 80093d8:	189b      	adds	r3, r3, r2
 80093da:	6818      	ldr	r0, [r3, #0]
 80093dc:	6859      	ldr	r1, [r3, #4]
 80093de:	e7eb      	b.n	80093b8 <__ieee754_fmod+0x44>
 80093e0:	4866      	ldr	r0, [pc, #408]	@ (800957c <__ieee754_fmod+0x208>)
 80093e2:	4205      	tst	r5, r0
 80093e4:	d14c      	bne.n	8009480 <__ieee754_fmod+0x10c>
 80093e6:	2a00      	cmp	r2, #0
 80093e8:	d143      	bne.n	8009472 <__ieee754_fmod+0xfe>
 80093ea:	0038      	movs	r0, r7
 80093ec:	4965      	ldr	r1, [pc, #404]	@ (8009584 <__ieee754_fmod+0x210>)
 80093ee:	2800      	cmp	r0, #0
 80093f0:	dc3c      	bgt.n	800946c <__ieee754_fmod+0xf8>
 80093f2:	4862      	ldr	r0, [pc, #392]	@ (800957c <__ieee754_fmod+0x208>)
 80093f4:	9c01      	ldr	r4, [sp, #4]
 80093f6:	4220      	tst	r0, r4
 80093f8:	d150      	bne.n	800949c <__ieee754_fmod+0x128>
 80093fa:	4660      	mov	r0, ip
 80093fc:	2800      	cmp	r0, #0
 80093fe:	d146      	bne.n	800948e <__ieee754_fmod+0x11a>
 8009400:	4860      	ldr	r0, [pc, #384]	@ (8009584 <__ieee754_fmod+0x210>)
 8009402:	2e00      	cmp	r6, #0
 8009404:	dc40      	bgt.n	8009488 <__ieee754_fmod+0x114>
 8009406:	4c60      	ldr	r4, [pc, #384]	@ (8009588 <__ieee754_fmod+0x214>)
 8009408:	42a1      	cmp	r1, r4
 800940a:	db4c      	blt.n	80094a6 <__ieee754_fmod+0x132>
 800940c:	2280      	movs	r2, #128	@ 0x80
 800940e:	032f      	lsls	r7, r5, #12
 8009410:	0b3f      	lsrs	r7, r7, #12
 8009412:	0352      	lsls	r2, r2, #13
 8009414:	433a      	orrs	r2, r7
 8009416:	4c5c      	ldr	r4, [pc, #368]	@ (8009588 <__ieee754_fmod+0x214>)
 8009418:	42a0      	cmp	r0, r4
 800941a:	db59      	blt.n	80094d0 <__ieee754_fmod+0x15c>
 800941c:	2580      	movs	r5, #128	@ 0x80
 800941e:	9c01      	ldr	r4, [sp, #4]
 8009420:	036d      	lsls	r5, r5, #13
 8009422:	0324      	lsls	r4, r4, #12
 8009424:	0b24      	lsrs	r4, r4, #12
 8009426:	4325      	orrs	r5, r4
 8009428:	1a09      	subs	r1, r1, r0
 800942a:	9e03      	ldr	r6, [sp, #12]
 800942c:	1b54      	subs	r4, r2, r5
 800942e:	1b9f      	subs	r7, r3, r6
 8009430:	2900      	cmp	r1, #0
 8009432:	d165      	bne.n	8009500 <__ieee754_fmod+0x18c>
 8009434:	42b3      	cmp	r3, r6
 8009436:	4189      	sbcs	r1, r1
 8009438:	4249      	negs	r1, r1
 800943a:	1a64      	subs	r4, r4, r1
 800943c:	d401      	bmi.n	8009442 <__ieee754_fmod+0xce>
 800943e:	003b      	movs	r3, r7
 8009440:	0022      	movs	r2, r4
 8009442:	0011      	movs	r1, r2
 8009444:	4319      	orrs	r1, r3
 8009446:	d06a      	beq.n	800951e <__ieee754_fmod+0x1aa>
 8009448:	2180      	movs	r1, #128	@ 0x80
 800944a:	0349      	lsls	r1, r1, #13
 800944c:	428a      	cmp	r2, r1
 800944e:	db6e      	blt.n	800952e <__ieee754_fmod+0x1ba>
 8009450:	494d      	ldr	r1, [pc, #308]	@ (8009588 <__ieee754_fmod+0x214>)
 8009452:	4288      	cmp	r0, r1
 8009454:	db71      	blt.n	800953a <__ieee754_fmod+0x1c6>
 8009456:	494d      	ldr	r1, [pc, #308]	@ (800958c <__ieee754_fmod+0x218>)
 8009458:	1852      	adds	r2, r2, r1
 800945a:	9902      	ldr	r1, [sp, #8]
 800945c:	430a      	orrs	r2, r1
 800945e:	494c      	ldr	r1, [pc, #304]	@ (8009590 <__ieee754_fmod+0x21c>)
 8009460:	1840      	adds	r0, r0, r1
 8009462:	0504      	lsls	r4, r0, #20
 8009464:	4322      	orrs	r2, r4
 8009466:	0011      	movs	r1, r2
 8009468:	0018      	movs	r0, r3
 800946a:	e7a5      	b.n	80093b8 <__ieee754_fmod+0x44>
 800946c:	3901      	subs	r1, #1
 800946e:	0040      	lsls	r0, r0, #1
 8009470:	e7bd      	b.n	80093ee <__ieee754_fmod+0x7a>
 8009472:	4945      	ldr	r1, [pc, #276]	@ (8009588 <__ieee754_fmod+0x214>)
 8009474:	02d0      	lsls	r0, r2, #11
 8009476:	2800      	cmp	r0, #0
 8009478:	ddbb      	ble.n	80093f2 <__ieee754_fmod+0x7e>
 800947a:	3901      	subs	r1, #1
 800947c:	0040      	lsls	r0, r0, #1
 800947e:	e7fa      	b.n	8009476 <__ieee754_fmod+0x102>
 8009480:	4844      	ldr	r0, [pc, #272]	@ (8009594 <__ieee754_fmod+0x220>)
 8009482:	1511      	asrs	r1, r2, #20
 8009484:	1809      	adds	r1, r1, r0
 8009486:	e7b4      	b.n	80093f2 <__ieee754_fmod+0x7e>
 8009488:	3801      	subs	r0, #1
 800948a:	0076      	lsls	r6, r6, #1
 800948c:	e7b9      	b.n	8009402 <__ieee754_fmod+0x8e>
 800948e:	02c6      	lsls	r6, r0, #11
 8009490:	483d      	ldr	r0, [pc, #244]	@ (8009588 <__ieee754_fmod+0x214>)
 8009492:	2e00      	cmp	r6, #0
 8009494:	ddb7      	ble.n	8009406 <__ieee754_fmod+0x92>
 8009496:	3801      	subs	r0, #1
 8009498:	0076      	lsls	r6, r6, #1
 800949a:	e7fa      	b.n	8009492 <__ieee754_fmod+0x11e>
 800949c:	4660      	mov	r0, ip
 800949e:	4c3d      	ldr	r4, [pc, #244]	@ (8009594 <__ieee754_fmod+0x220>)
 80094a0:	1500      	asrs	r0, r0, #20
 80094a2:	1900      	adds	r0, r0, r4
 80094a4:	e7af      	b.n	8009406 <__ieee754_fmod+0x92>
 80094a6:	4b38      	ldr	r3, [pc, #224]	@ (8009588 <__ieee754_fmod+0x214>)
 80094a8:	1a5b      	subs	r3, r3, r1
 80094aa:	2b1f      	cmp	r3, #31
 80094ac:	dc0a      	bgt.n	80094c4 <__ieee754_fmod+0x150>
 80094ae:	409a      	lsls	r2, r3
 80094b0:	003c      	movs	r4, r7
 80094b2:	0015      	movs	r5, r2
 80094b4:	4a38      	ldr	r2, [pc, #224]	@ (8009598 <__ieee754_fmod+0x224>)
 80094b6:	409f      	lsls	r7, r3
 80094b8:	188a      	adds	r2, r1, r2
 80094ba:	40d4      	lsrs	r4, r2
 80094bc:	0022      	movs	r2, r4
 80094be:	003b      	movs	r3, r7
 80094c0:	432a      	orrs	r2, r5
 80094c2:	e7a8      	b.n	8009416 <__ieee754_fmod+0xa2>
 80094c4:	003a      	movs	r2, r7
 80094c6:	4b35      	ldr	r3, [pc, #212]	@ (800959c <__ieee754_fmod+0x228>)
 80094c8:	1a5b      	subs	r3, r3, r1
 80094ca:	409a      	lsls	r2, r3
 80094cc:	2300      	movs	r3, #0
 80094ce:	e7a2      	b.n	8009416 <__ieee754_fmod+0xa2>
 80094d0:	4c2d      	ldr	r4, [pc, #180]	@ (8009588 <__ieee754_fmod+0x214>)
 80094d2:	1a27      	subs	r7, r4, r0
 80094d4:	2f1f      	cmp	r7, #31
 80094d6:	dc0c      	bgt.n	80094f2 <__ieee754_fmod+0x17e>
 80094d8:	4c2f      	ldr	r4, [pc, #188]	@ (8009598 <__ieee754_fmod+0x224>)
 80094da:	4665      	mov	r5, ip
 80094dc:	46a4      	mov	ip, r4
 80094de:	4484      	add	ip, r0
 80094e0:	4666      	mov	r6, ip
 80094e2:	9c00      	ldr	r4, [sp, #0]
 80094e4:	40bd      	lsls	r5, r7
 80094e6:	40f4      	lsrs	r4, r6
 80094e8:	4325      	orrs	r5, r4
 80094ea:	9c00      	ldr	r4, [sp, #0]
 80094ec:	40bc      	lsls	r4, r7
 80094ee:	9403      	str	r4, [sp, #12]
 80094f0:	e79a      	b.n	8009428 <__ieee754_fmod+0xb4>
 80094f2:	4d2a      	ldr	r5, [pc, #168]	@ (800959c <__ieee754_fmod+0x228>)
 80094f4:	9c00      	ldr	r4, [sp, #0]
 80094f6:	1a2d      	subs	r5, r5, r0
 80094f8:	40ac      	lsls	r4, r5
 80094fa:	0025      	movs	r5, r4
 80094fc:	2400      	movs	r4, #0
 80094fe:	e7f6      	b.n	80094ee <__ieee754_fmod+0x17a>
 8009500:	9e03      	ldr	r6, [sp, #12]
 8009502:	42b3      	cmp	r3, r6
 8009504:	41b6      	sbcs	r6, r6
 8009506:	4276      	negs	r6, r6
 8009508:	1ba4      	subs	r4, r4, r6
 800950a:	d505      	bpl.n	8009518 <__ieee754_fmod+0x1a4>
 800950c:	0fdc      	lsrs	r4, r3, #31
 800950e:	0052      	lsls	r2, r2, #1
 8009510:	1912      	adds	r2, r2, r4
 8009512:	005b      	lsls	r3, r3, #1
 8009514:	3901      	subs	r1, #1
 8009516:	e788      	b.n	800942a <__ieee754_fmod+0xb6>
 8009518:	0023      	movs	r3, r4
 800951a:	433b      	orrs	r3, r7
 800951c:	d102      	bne.n	8009524 <__ieee754_fmod+0x1b0>
 800951e:	4b18      	ldr	r3, [pc, #96]	@ (8009580 <__ieee754_fmod+0x20c>)
 8009520:	9a02      	ldr	r2, [sp, #8]
 8009522:	e758      	b.n	80093d6 <__ieee754_fmod+0x62>
 8009524:	0064      	lsls	r4, r4, #1
 8009526:	0ffa      	lsrs	r2, r7, #31
 8009528:	18a2      	adds	r2, r4, r2
 800952a:	007b      	lsls	r3, r7, #1
 800952c:	e7f2      	b.n	8009514 <__ieee754_fmod+0x1a0>
 800952e:	0fdc      	lsrs	r4, r3, #31
 8009530:	0052      	lsls	r2, r2, #1
 8009532:	1912      	adds	r2, r2, r4
 8009534:	005b      	lsls	r3, r3, #1
 8009536:	3801      	subs	r0, #1
 8009538:	e788      	b.n	800944c <__ieee754_fmod+0xd8>
 800953a:	4913      	ldr	r1, [pc, #76]	@ (8009588 <__ieee754_fmod+0x214>)
 800953c:	1a0e      	subs	r6, r1, r0
 800953e:	2e14      	cmp	r6, #20
 8009540:	dc0b      	bgt.n	800955a <__ieee754_fmod+0x1e6>
 8009542:	40f3      	lsrs	r3, r6
 8009544:	0019      	movs	r1, r3
 8009546:	4b14      	ldr	r3, [pc, #80]	@ (8009598 <__ieee754_fmod+0x224>)
 8009548:	18c0      	adds	r0, r0, r3
 800954a:	0013      	movs	r3, r2
 800954c:	4083      	lsls	r3, r0
 800954e:	4132      	asrs	r2, r6
 8009550:	430b      	orrs	r3, r1
 8009552:	9c02      	ldr	r4, [sp, #8]
 8009554:	4314      	orrs	r4, r2
 8009556:	0021      	movs	r1, r4
 8009558:	e786      	b.n	8009468 <__ieee754_fmod+0xf4>
 800955a:	2e1f      	cmp	r6, #31
 800955c:	dc06      	bgt.n	800956c <__ieee754_fmod+0x1f8>
 800955e:	490e      	ldr	r1, [pc, #56]	@ (8009598 <__ieee754_fmod+0x224>)
 8009560:	40f3      	lsrs	r3, r6
 8009562:	1840      	adds	r0, r0, r1
 8009564:	4082      	lsls	r2, r0
 8009566:	4313      	orrs	r3, r2
 8009568:	9a02      	ldr	r2, [sp, #8]
 800956a:	e7f2      	b.n	8009552 <__ieee754_fmod+0x1de>
 800956c:	4b0b      	ldr	r3, [pc, #44]	@ (800959c <__ieee754_fmod+0x228>)
 800956e:	1a1b      	subs	r3, r3, r0
 8009570:	411a      	asrs	r2, r3
 8009572:	0013      	movs	r3, r2
 8009574:	e7f8      	b.n	8009568 <__ieee754_fmod+0x1f4>
 8009576:	46c0      	nop			@ (mov r8, r8)
 8009578:	7fefffff 	.word	0x7fefffff
 800957c:	7ff00000 	.word	0x7ff00000
 8009580:	08009dc8 	.word	0x08009dc8
 8009584:	fffffbed 	.word	0xfffffbed
 8009588:	fffffc02 	.word	0xfffffc02
 800958c:	fff00000 	.word	0xfff00000
 8009590:	000003ff 	.word	0x000003ff
 8009594:	fffffc01 	.word	0xfffffc01
 8009598:	0000041e 	.word	0x0000041e
 800959c:	fffffbe2 	.word	0xfffffbe2

080095a0 <_init>:
 80095a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a2:	46c0      	nop			@ (mov r8, r8)
 80095a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095a6:	bc08      	pop	{r3}
 80095a8:	469e      	mov	lr, r3
 80095aa:	4770      	bx	lr

080095ac <_fini>:
 80095ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ae:	46c0      	nop			@ (mov r8, r8)
 80095b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095b2:	bc08      	pop	{r3}
 80095b4:	469e      	mov	lr, r3
 80095b6:	4770      	bx	lr
