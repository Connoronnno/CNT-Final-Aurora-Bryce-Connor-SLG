
ynotag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c50  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000878  08009d10  08009d10  0000ad10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a588  0800a588  0000ca40  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a588  0800a588  0000b588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a590  0800a590  0000ca40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a590  0800a590  0000b590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a594  0800a594  0000b594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000a40  20000000  0800a598  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007dc  20000a40  0800afd8  0000ca40  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000121c  0800afd8  0000d21c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000ca40  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6d0  00000000  00000000  0000ca68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003282  00000000  00000000  00027138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c8  00000000  00000000  0002a3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012dd  00000000  00000000  0002bb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f415  00000000  00000000  0002ce65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d705  00000000  00000000  0004c27a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca103  00000000  00000000  0006997f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00133a82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060d4  00000000  00000000  00133ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  00139b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000a40 	.word	0x20000a40
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009cf4 	.word	0x08009cf4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000a44 	.word	0x20000a44
 8000100:	08009cf4 	.word	0x08009cf4

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <__aeabi_cdrcmple>:
 8000414:	4684      	mov	ip, r0
 8000416:	0010      	movs	r0, r2
 8000418:	4662      	mov	r2, ip
 800041a:	468c      	mov	ip, r1
 800041c:	0019      	movs	r1, r3
 800041e:	4663      	mov	r3, ip
 8000420:	e000      	b.n	8000424 <__aeabi_cdcmpeq>
 8000422:	46c0      	nop			@ (mov r8, r8)

08000424 <__aeabi_cdcmpeq>:
 8000424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000426:	f001 f89d 	bl	8001564 <__ledf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	d401      	bmi.n	8000432 <__aeabi_cdcmpeq+0xe>
 800042e:	2100      	movs	r1, #0
 8000430:	42c8      	cmn	r0, r1
 8000432:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000434 <__aeabi_dcmpeq>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 ffe1 	bl	80013fc <__eqdf2>
 800043a:	4240      	negs	r0, r0
 800043c:	3001      	adds	r0, #1
 800043e:	bd10      	pop	{r4, pc}

08000440 <__aeabi_dcmplt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f001 f88f 	bl	8001564 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	db01      	blt.n	800044e <__aeabi_dcmplt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_dcmple>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f885 	bl	8001564 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dd01      	ble.n	8000462 <__aeabi_dcmple+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmpgt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f80b 	bl	8001484 <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dc01      	bgt.n	8000476 <__aeabi_dcmpgt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmpge>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 f801 	bl	8001484 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	da01      	bge.n	800048a <__aeabi_dcmpge+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_uldivmod>:
 8000490:	2b00      	cmp	r3, #0
 8000492:	d111      	bne.n	80004b8 <__aeabi_uldivmod+0x28>
 8000494:	2a00      	cmp	r2, #0
 8000496:	d10f      	bne.n	80004b8 <__aeabi_uldivmod+0x28>
 8000498:	2900      	cmp	r1, #0
 800049a:	d100      	bne.n	800049e <__aeabi_uldivmod+0xe>
 800049c:	2800      	cmp	r0, #0
 800049e:	d002      	beq.n	80004a6 <__aeabi_uldivmod+0x16>
 80004a0:	2100      	movs	r1, #0
 80004a2:	43c9      	mvns	r1, r1
 80004a4:	0008      	movs	r0, r1
 80004a6:	b407      	push	{r0, r1, r2}
 80004a8:	4802      	ldr	r0, [pc, #8]	@ (80004b4 <__aeabi_uldivmod+0x24>)
 80004aa:	a102      	add	r1, pc, #8	@ (adr r1, 80004b4 <__aeabi_uldivmod+0x24>)
 80004ac:	1840      	adds	r0, r0, r1
 80004ae:	9002      	str	r0, [sp, #8]
 80004b0:	bd03      	pop	{r0, r1, pc}
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	ffffff5d 	.word	0xffffff5d
 80004b8:	b403      	push	{r0, r1}
 80004ba:	4668      	mov	r0, sp
 80004bc:	b501      	push	{r0, lr}
 80004be:	9802      	ldr	r0, [sp, #8]
 80004c0:	f000 f81e 	bl	8000500 <__udivmoddi4>
 80004c4:	9b01      	ldr	r3, [sp, #4]
 80004c6:	469e      	mov	lr, r3
 80004c8:	b002      	add	sp, #8
 80004ca:	bc0c      	pop	{r2, r3}
 80004cc:	4770      	bx	lr
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_f2uiz>:
 80004d0:	219e      	movs	r1, #158	@ 0x9e
 80004d2:	b510      	push	{r4, lr}
 80004d4:	05c9      	lsls	r1, r1, #23
 80004d6:	1c04      	adds	r4, r0, #0
 80004d8:	f001 fcf0 	bl	8001ebc <__aeabi_fcmpge>
 80004dc:	2800      	cmp	r0, #0
 80004de:	d103      	bne.n	80004e8 <__aeabi_f2uiz+0x18>
 80004e0:	1c20      	adds	r0, r4, #0
 80004e2:	f000 fc53 	bl	8000d8c <__aeabi_f2iz>
 80004e6:	bd10      	pop	{r4, pc}
 80004e8:	219e      	movs	r1, #158	@ 0x9e
 80004ea:	1c20      	adds	r0, r4, #0
 80004ec:	05c9      	lsls	r1, r1, #23
 80004ee:	f000 f9e9 	bl	80008c4 <__aeabi_fsub>
 80004f2:	f000 fc4b 	bl	8000d8c <__aeabi_f2iz>
 80004f6:	2380      	movs	r3, #128	@ 0x80
 80004f8:	061b      	lsls	r3, r3, #24
 80004fa:	469c      	mov	ip, r3
 80004fc:	4460      	add	r0, ip
 80004fe:	e7f2      	b.n	80004e6 <__aeabi_f2uiz+0x16>

08000500 <__udivmoddi4>:
 8000500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000502:	4657      	mov	r7, sl
 8000504:	464e      	mov	r6, r9
 8000506:	4645      	mov	r5, r8
 8000508:	46de      	mov	lr, fp
 800050a:	b5e0      	push	{r5, r6, r7, lr}
 800050c:	0004      	movs	r4, r0
 800050e:	000d      	movs	r5, r1
 8000510:	4692      	mov	sl, r2
 8000512:	4699      	mov	r9, r3
 8000514:	b083      	sub	sp, #12
 8000516:	428b      	cmp	r3, r1
 8000518:	d830      	bhi.n	800057c <__udivmoddi4+0x7c>
 800051a:	d02d      	beq.n	8000578 <__udivmoddi4+0x78>
 800051c:	4649      	mov	r1, r9
 800051e:	4650      	mov	r0, sl
 8000520:	f001 fcf4 	bl	8001f0c <__clzdi2>
 8000524:	0029      	movs	r1, r5
 8000526:	0006      	movs	r6, r0
 8000528:	0020      	movs	r0, r4
 800052a:	f001 fcef 	bl	8001f0c <__clzdi2>
 800052e:	1a33      	subs	r3, r6, r0
 8000530:	4698      	mov	r8, r3
 8000532:	3b20      	subs	r3, #32
 8000534:	d434      	bmi.n	80005a0 <__udivmoddi4+0xa0>
 8000536:	469b      	mov	fp, r3
 8000538:	4653      	mov	r3, sl
 800053a:	465a      	mov	r2, fp
 800053c:	4093      	lsls	r3, r2
 800053e:	4642      	mov	r2, r8
 8000540:	001f      	movs	r7, r3
 8000542:	4653      	mov	r3, sl
 8000544:	4093      	lsls	r3, r2
 8000546:	001e      	movs	r6, r3
 8000548:	42af      	cmp	r7, r5
 800054a:	d83b      	bhi.n	80005c4 <__udivmoddi4+0xc4>
 800054c:	42af      	cmp	r7, r5
 800054e:	d100      	bne.n	8000552 <__udivmoddi4+0x52>
 8000550:	e079      	b.n	8000646 <__udivmoddi4+0x146>
 8000552:	465b      	mov	r3, fp
 8000554:	1ba4      	subs	r4, r4, r6
 8000556:	41bd      	sbcs	r5, r7
 8000558:	2b00      	cmp	r3, #0
 800055a:	da00      	bge.n	800055e <__udivmoddi4+0x5e>
 800055c:	e076      	b.n	800064c <__udivmoddi4+0x14c>
 800055e:	2200      	movs	r2, #0
 8000560:	2300      	movs	r3, #0
 8000562:	9200      	str	r2, [sp, #0]
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	2301      	movs	r3, #1
 8000568:	465a      	mov	r2, fp
 800056a:	4093      	lsls	r3, r2
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	2301      	movs	r3, #1
 8000570:	4642      	mov	r2, r8
 8000572:	4093      	lsls	r3, r2
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	e029      	b.n	80005cc <__udivmoddi4+0xcc>
 8000578:	4282      	cmp	r2, r0
 800057a:	d9cf      	bls.n	800051c <__udivmoddi4+0x1c>
 800057c:	2200      	movs	r2, #0
 800057e:	2300      	movs	r3, #0
 8000580:	9200      	str	r2, [sp, #0]
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <__udivmoddi4+0x8e>
 800058a:	601c      	str	r4, [r3, #0]
 800058c:	605d      	str	r5, [r3, #4]
 800058e:	9800      	ldr	r0, [sp, #0]
 8000590:	9901      	ldr	r1, [sp, #4]
 8000592:	b003      	add	sp, #12
 8000594:	bcf0      	pop	{r4, r5, r6, r7}
 8000596:	46bb      	mov	fp, r7
 8000598:	46b2      	mov	sl, r6
 800059a:	46a9      	mov	r9, r5
 800059c:	46a0      	mov	r8, r4
 800059e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a0:	4642      	mov	r2, r8
 80005a2:	469b      	mov	fp, r3
 80005a4:	2320      	movs	r3, #32
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	4652      	mov	r2, sl
 80005aa:	40da      	lsrs	r2, r3
 80005ac:	4641      	mov	r1, r8
 80005ae:	0013      	movs	r3, r2
 80005b0:	464a      	mov	r2, r9
 80005b2:	408a      	lsls	r2, r1
 80005b4:	0017      	movs	r7, r2
 80005b6:	4642      	mov	r2, r8
 80005b8:	431f      	orrs	r7, r3
 80005ba:	4653      	mov	r3, sl
 80005bc:	4093      	lsls	r3, r2
 80005be:	001e      	movs	r6, r3
 80005c0:	42af      	cmp	r7, r5
 80005c2:	d9c3      	bls.n	800054c <__udivmoddi4+0x4c>
 80005c4:	2200      	movs	r2, #0
 80005c6:	2300      	movs	r3, #0
 80005c8:	9200      	str	r2, [sp, #0]
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	4643      	mov	r3, r8
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d0d8      	beq.n	8000584 <__udivmoddi4+0x84>
 80005d2:	07fb      	lsls	r3, r7, #31
 80005d4:	0872      	lsrs	r2, r6, #1
 80005d6:	431a      	orrs	r2, r3
 80005d8:	4646      	mov	r6, r8
 80005da:	087b      	lsrs	r3, r7, #1
 80005dc:	e00e      	b.n	80005fc <__udivmoddi4+0xfc>
 80005de:	42ab      	cmp	r3, r5
 80005e0:	d101      	bne.n	80005e6 <__udivmoddi4+0xe6>
 80005e2:	42a2      	cmp	r2, r4
 80005e4:	d80c      	bhi.n	8000600 <__udivmoddi4+0x100>
 80005e6:	1aa4      	subs	r4, r4, r2
 80005e8:	419d      	sbcs	r5, r3
 80005ea:	2001      	movs	r0, #1
 80005ec:	1924      	adds	r4, r4, r4
 80005ee:	416d      	adcs	r5, r5
 80005f0:	2100      	movs	r1, #0
 80005f2:	3e01      	subs	r6, #1
 80005f4:	1824      	adds	r4, r4, r0
 80005f6:	414d      	adcs	r5, r1
 80005f8:	2e00      	cmp	r6, #0
 80005fa:	d006      	beq.n	800060a <__udivmoddi4+0x10a>
 80005fc:	42ab      	cmp	r3, r5
 80005fe:	d9ee      	bls.n	80005de <__udivmoddi4+0xde>
 8000600:	3e01      	subs	r6, #1
 8000602:	1924      	adds	r4, r4, r4
 8000604:	416d      	adcs	r5, r5
 8000606:	2e00      	cmp	r6, #0
 8000608:	d1f8      	bne.n	80005fc <__udivmoddi4+0xfc>
 800060a:	9800      	ldr	r0, [sp, #0]
 800060c:	9901      	ldr	r1, [sp, #4]
 800060e:	465b      	mov	r3, fp
 8000610:	1900      	adds	r0, r0, r4
 8000612:	4169      	adcs	r1, r5
 8000614:	2b00      	cmp	r3, #0
 8000616:	db24      	blt.n	8000662 <__udivmoddi4+0x162>
 8000618:	002b      	movs	r3, r5
 800061a:	465a      	mov	r2, fp
 800061c:	4644      	mov	r4, r8
 800061e:	40d3      	lsrs	r3, r2
 8000620:	002a      	movs	r2, r5
 8000622:	40e2      	lsrs	r2, r4
 8000624:	001c      	movs	r4, r3
 8000626:	465b      	mov	r3, fp
 8000628:	0015      	movs	r5, r2
 800062a:	2b00      	cmp	r3, #0
 800062c:	db2a      	blt.n	8000684 <__udivmoddi4+0x184>
 800062e:	0026      	movs	r6, r4
 8000630:	409e      	lsls	r6, r3
 8000632:	0033      	movs	r3, r6
 8000634:	0026      	movs	r6, r4
 8000636:	4647      	mov	r7, r8
 8000638:	40be      	lsls	r6, r7
 800063a:	0032      	movs	r2, r6
 800063c:	1a80      	subs	r0, r0, r2
 800063e:	4199      	sbcs	r1, r3
 8000640:	9000      	str	r0, [sp, #0]
 8000642:	9101      	str	r1, [sp, #4]
 8000644:	e79e      	b.n	8000584 <__udivmoddi4+0x84>
 8000646:	42a3      	cmp	r3, r4
 8000648:	d8bc      	bhi.n	80005c4 <__udivmoddi4+0xc4>
 800064a:	e782      	b.n	8000552 <__udivmoddi4+0x52>
 800064c:	4642      	mov	r2, r8
 800064e:	2320      	movs	r3, #32
 8000650:	2100      	movs	r1, #0
 8000652:	1a9b      	subs	r3, r3, r2
 8000654:	2200      	movs	r2, #0
 8000656:	9100      	str	r1, [sp, #0]
 8000658:	9201      	str	r2, [sp, #4]
 800065a:	2201      	movs	r2, #1
 800065c:	40da      	lsrs	r2, r3
 800065e:	9201      	str	r2, [sp, #4]
 8000660:	e785      	b.n	800056e <__udivmoddi4+0x6e>
 8000662:	4642      	mov	r2, r8
 8000664:	2320      	movs	r3, #32
 8000666:	1a9b      	subs	r3, r3, r2
 8000668:	002a      	movs	r2, r5
 800066a:	4646      	mov	r6, r8
 800066c:	409a      	lsls	r2, r3
 800066e:	0023      	movs	r3, r4
 8000670:	40f3      	lsrs	r3, r6
 8000672:	4644      	mov	r4, r8
 8000674:	4313      	orrs	r3, r2
 8000676:	002a      	movs	r2, r5
 8000678:	40e2      	lsrs	r2, r4
 800067a:	001c      	movs	r4, r3
 800067c:	465b      	mov	r3, fp
 800067e:	0015      	movs	r5, r2
 8000680:	2b00      	cmp	r3, #0
 8000682:	dad4      	bge.n	800062e <__udivmoddi4+0x12e>
 8000684:	4642      	mov	r2, r8
 8000686:	002f      	movs	r7, r5
 8000688:	2320      	movs	r3, #32
 800068a:	0026      	movs	r6, r4
 800068c:	4097      	lsls	r7, r2
 800068e:	1a9b      	subs	r3, r3, r2
 8000690:	40de      	lsrs	r6, r3
 8000692:	003b      	movs	r3, r7
 8000694:	4333      	orrs	r3, r6
 8000696:	e7cd      	b.n	8000634 <__udivmoddi4+0x134>

08000698 <__aeabi_fdiv>:
 8000698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069a:	4646      	mov	r6, r8
 800069c:	464f      	mov	r7, r9
 800069e:	46d6      	mov	lr, sl
 80006a0:	0245      	lsls	r5, r0, #9
 80006a2:	b5c0      	push	{r6, r7, lr}
 80006a4:	0fc3      	lsrs	r3, r0, #31
 80006a6:	0047      	lsls	r7, r0, #1
 80006a8:	4698      	mov	r8, r3
 80006aa:	1c0e      	adds	r6, r1, #0
 80006ac:	0a6d      	lsrs	r5, r5, #9
 80006ae:	0e3f      	lsrs	r7, r7, #24
 80006b0:	d05b      	beq.n	800076a <__aeabi_fdiv+0xd2>
 80006b2:	2fff      	cmp	r7, #255	@ 0xff
 80006b4:	d021      	beq.n	80006fa <__aeabi_fdiv+0x62>
 80006b6:	2380      	movs	r3, #128	@ 0x80
 80006b8:	00ed      	lsls	r5, r5, #3
 80006ba:	04db      	lsls	r3, r3, #19
 80006bc:	431d      	orrs	r5, r3
 80006be:	2300      	movs	r3, #0
 80006c0:	4699      	mov	r9, r3
 80006c2:	469a      	mov	sl, r3
 80006c4:	3f7f      	subs	r7, #127	@ 0x7f
 80006c6:	0274      	lsls	r4, r6, #9
 80006c8:	0073      	lsls	r3, r6, #1
 80006ca:	0a64      	lsrs	r4, r4, #9
 80006cc:	0e1b      	lsrs	r3, r3, #24
 80006ce:	0ff6      	lsrs	r6, r6, #31
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d020      	beq.n	8000716 <__aeabi_fdiv+0x7e>
 80006d4:	2bff      	cmp	r3, #255	@ 0xff
 80006d6:	d043      	beq.n	8000760 <__aeabi_fdiv+0xc8>
 80006d8:	2280      	movs	r2, #128	@ 0x80
 80006da:	2000      	movs	r0, #0
 80006dc:	00e4      	lsls	r4, r4, #3
 80006de:	04d2      	lsls	r2, r2, #19
 80006e0:	4314      	orrs	r4, r2
 80006e2:	3b7f      	subs	r3, #127	@ 0x7f
 80006e4:	4642      	mov	r2, r8
 80006e6:	1aff      	subs	r7, r7, r3
 80006e8:	464b      	mov	r3, r9
 80006ea:	4072      	eors	r2, r6
 80006ec:	2b0f      	cmp	r3, #15
 80006ee:	d900      	bls.n	80006f2 <__aeabi_fdiv+0x5a>
 80006f0:	e09d      	b.n	800082e <__aeabi_fdiv+0x196>
 80006f2:	4971      	ldr	r1, [pc, #452]	@ (80008b8 <__aeabi_fdiv+0x220>)
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	58cb      	ldr	r3, [r1, r3]
 80006f8:	469f      	mov	pc, r3
 80006fa:	2d00      	cmp	r5, #0
 80006fc:	d15a      	bne.n	80007b4 <__aeabi_fdiv+0x11c>
 80006fe:	2308      	movs	r3, #8
 8000700:	4699      	mov	r9, r3
 8000702:	3b06      	subs	r3, #6
 8000704:	0274      	lsls	r4, r6, #9
 8000706:	469a      	mov	sl, r3
 8000708:	0073      	lsls	r3, r6, #1
 800070a:	27ff      	movs	r7, #255	@ 0xff
 800070c:	0a64      	lsrs	r4, r4, #9
 800070e:	0e1b      	lsrs	r3, r3, #24
 8000710:	0ff6      	lsrs	r6, r6, #31
 8000712:	2b00      	cmp	r3, #0
 8000714:	d1de      	bne.n	80006d4 <__aeabi_fdiv+0x3c>
 8000716:	2c00      	cmp	r4, #0
 8000718:	d13b      	bne.n	8000792 <__aeabi_fdiv+0xfa>
 800071a:	2301      	movs	r3, #1
 800071c:	4642      	mov	r2, r8
 800071e:	4649      	mov	r1, r9
 8000720:	4072      	eors	r2, r6
 8000722:	4319      	orrs	r1, r3
 8000724:	290e      	cmp	r1, #14
 8000726:	d818      	bhi.n	800075a <__aeabi_fdiv+0xc2>
 8000728:	4864      	ldr	r0, [pc, #400]	@ (80008bc <__aeabi_fdiv+0x224>)
 800072a:	0089      	lsls	r1, r1, #2
 800072c:	5841      	ldr	r1, [r0, r1]
 800072e:	468f      	mov	pc, r1
 8000730:	4653      	mov	r3, sl
 8000732:	2b02      	cmp	r3, #2
 8000734:	d100      	bne.n	8000738 <__aeabi_fdiv+0xa0>
 8000736:	e0b8      	b.n	80008aa <__aeabi_fdiv+0x212>
 8000738:	2b03      	cmp	r3, #3
 800073a:	d06e      	beq.n	800081a <__aeabi_fdiv+0x182>
 800073c:	4642      	mov	r2, r8
 800073e:	002c      	movs	r4, r5
 8000740:	2b01      	cmp	r3, #1
 8000742:	d140      	bne.n	80007c6 <__aeabi_fdiv+0x12e>
 8000744:	2000      	movs	r0, #0
 8000746:	2400      	movs	r4, #0
 8000748:	05c0      	lsls	r0, r0, #23
 800074a:	4320      	orrs	r0, r4
 800074c:	07d2      	lsls	r2, r2, #31
 800074e:	4310      	orrs	r0, r2
 8000750:	bce0      	pop	{r5, r6, r7}
 8000752:	46ba      	mov	sl, r7
 8000754:	46b1      	mov	r9, r6
 8000756:	46a8      	mov	r8, r5
 8000758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800075a:	20ff      	movs	r0, #255	@ 0xff
 800075c:	2400      	movs	r4, #0
 800075e:	e7f3      	b.n	8000748 <__aeabi_fdiv+0xb0>
 8000760:	2c00      	cmp	r4, #0
 8000762:	d120      	bne.n	80007a6 <__aeabi_fdiv+0x10e>
 8000764:	2302      	movs	r3, #2
 8000766:	3fff      	subs	r7, #255	@ 0xff
 8000768:	e7d8      	b.n	800071c <__aeabi_fdiv+0x84>
 800076a:	2d00      	cmp	r5, #0
 800076c:	d105      	bne.n	800077a <__aeabi_fdiv+0xe2>
 800076e:	2304      	movs	r3, #4
 8000770:	4699      	mov	r9, r3
 8000772:	3b03      	subs	r3, #3
 8000774:	2700      	movs	r7, #0
 8000776:	469a      	mov	sl, r3
 8000778:	e7a5      	b.n	80006c6 <__aeabi_fdiv+0x2e>
 800077a:	0028      	movs	r0, r5
 800077c:	f001 fba8 	bl	8001ed0 <__clzsi2>
 8000780:	2776      	movs	r7, #118	@ 0x76
 8000782:	1f43      	subs	r3, r0, #5
 8000784:	409d      	lsls	r5, r3
 8000786:	2300      	movs	r3, #0
 8000788:	427f      	negs	r7, r7
 800078a:	4699      	mov	r9, r3
 800078c:	469a      	mov	sl, r3
 800078e:	1a3f      	subs	r7, r7, r0
 8000790:	e799      	b.n	80006c6 <__aeabi_fdiv+0x2e>
 8000792:	0020      	movs	r0, r4
 8000794:	f001 fb9c 	bl	8001ed0 <__clzsi2>
 8000798:	1f43      	subs	r3, r0, #5
 800079a:	409c      	lsls	r4, r3
 800079c:	2376      	movs	r3, #118	@ 0x76
 800079e:	425b      	negs	r3, r3
 80007a0:	1a1b      	subs	r3, r3, r0
 80007a2:	2000      	movs	r0, #0
 80007a4:	e79e      	b.n	80006e4 <__aeabi_fdiv+0x4c>
 80007a6:	2303      	movs	r3, #3
 80007a8:	464a      	mov	r2, r9
 80007aa:	431a      	orrs	r2, r3
 80007ac:	4691      	mov	r9, r2
 80007ae:	2003      	movs	r0, #3
 80007b0:	33fc      	adds	r3, #252	@ 0xfc
 80007b2:	e797      	b.n	80006e4 <__aeabi_fdiv+0x4c>
 80007b4:	230c      	movs	r3, #12
 80007b6:	4699      	mov	r9, r3
 80007b8:	3b09      	subs	r3, #9
 80007ba:	27ff      	movs	r7, #255	@ 0xff
 80007bc:	469a      	mov	sl, r3
 80007be:	e782      	b.n	80006c6 <__aeabi_fdiv+0x2e>
 80007c0:	2803      	cmp	r0, #3
 80007c2:	d02c      	beq.n	800081e <__aeabi_fdiv+0x186>
 80007c4:	0032      	movs	r2, r6
 80007c6:	0038      	movs	r0, r7
 80007c8:	307f      	adds	r0, #127	@ 0x7f
 80007ca:	2800      	cmp	r0, #0
 80007cc:	dd47      	ble.n	800085e <__aeabi_fdiv+0x1c6>
 80007ce:	0763      	lsls	r3, r4, #29
 80007d0:	d004      	beq.n	80007dc <__aeabi_fdiv+0x144>
 80007d2:	230f      	movs	r3, #15
 80007d4:	4023      	ands	r3, r4
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	d000      	beq.n	80007dc <__aeabi_fdiv+0x144>
 80007da:	3404      	adds	r4, #4
 80007dc:	0123      	lsls	r3, r4, #4
 80007de:	d503      	bpl.n	80007e8 <__aeabi_fdiv+0x150>
 80007e0:	0038      	movs	r0, r7
 80007e2:	4b37      	ldr	r3, [pc, #220]	@ (80008c0 <__aeabi_fdiv+0x228>)
 80007e4:	3080      	adds	r0, #128	@ 0x80
 80007e6:	401c      	ands	r4, r3
 80007e8:	28fe      	cmp	r0, #254	@ 0xfe
 80007ea:	dcb6      	bgt.n	800075a <__aeabi_fdiv+0xc2>
 80007ec:	01a4      	lsls	r4, r4, #6
 80007ee:	0a64      	lsrs	r4, r4, #9
 80007f0:	b2c0      	uxtb	r0, r0
 80007f2:	e7a9      	b.n	8000748 <__aeabi_fdiv+0xb0>
 80007f4:	2480      	movs	r4, #128	@ 0x80
 80007f6:	2200      	movs	r2, #0
 80007f8:	20ff      	movs	r0, #255	@ 0xff
 80007fa:	03e4      	lsls	r4, r4, #15
 80007fc:	e7a4      	b.n	8000748 <__aeabi_fdiv+0xb0>
 80007fe:	2380      	movs	r3, #128	@ 0x80
 8000800:	03db      	lsls	r3, r3, #15
 8000802:	421d      	tst	r5, r3
 8000804:	d001      	beq.n	800080a <__aeabi_fdiv+0x172>
 8000806:	421c      	tst	r4, r3
 8000808:	d00b      	beq.n	8000822 <__aeabi_fdiv+0x18a>
 800080a:	2480      	movs	r4, #128	@ 0x80
 800080c:	03e4      	lsls	r4, r4, #15
 800080e:	432c      	orrs	r4, r5
 8000810:	0264      	lsls	r4, r4, #9
 8000812:	4642      	mov	r2, r8
 8000814:	20ff      	movs	r0, #255	@ 0xff
 8000816:	0a64      	lsrs	r4, r4, #9
 8000818:	e796      	b.n	8000748 <__aeabi_fdiv+0xb0>
 800081a:	4646      	mov	r6, r8
 800081c:	002c      	movs	r4, r5
 800081e:	2380      	movs	r3, #128	@ 0x80
 8000820:	03db      	lsls	r3, r3, #15
 8000822:	431c      	orrs	r4, r3
 8000824:	0264      	lsls	r4, r4, #9
 8000826:	0032      	movs	r2, r6
 8000828:	20ff      	movs	r0, #255	@ 0xff
 800082a:	0a64      	lsrs	r4, r4, #9
 800082c:	e78c      	b.n	8000748 <__aeabi_fdiv+0xb0>
 800082e:	016d      	lsls	r5, r5, #5
 8000830:	0160      	lsls	r0, r4, #5
 8000832:	4285      	cmp	r5, r0
 8000834:	d22d      	bcs.n	8000892 <__aeabi_fdiv+0x1fa>
 8000836:	231b      	movs	r3, #27
 8000838:	2400      	movs	r4, #0
 800083a:	3f01      	subs	r7, #1
 800083c:	2601      	movs	r6, #1
 800083e:	0029      	movs	r1, r5
 8000840:	0064      	lsls	r4, r4, #1
 8000842:	006d      	lsls	r5, r5, #1
 8000844:	2900      	cmp	r1, #0
 8000846:	db01      	blt.n	800084c <__aeabi_fdiv+0x1b4>
 8000848:	4285      	cmp	r5, r0
 800084a:	d301      	bcc.n	8000850 <__aeabi_fdiv+0x1b8>
 800084c:	1a2d      	subs	r5, r5, r0
 800084e:	4334      	orrs	r4, r6
 8000850:	3b01      	subs	r3, #1
 8000852:	2b00      	cmp	r3, #0
 8000854:	d1f3      	bne.n	800083e <__aeabi_fdiv+0x1a6>
 8000856:	1e6b      	subs	r3, r5, #1
 8000858:	419d      	sbcs	r5, r3
 800085a:	432c      	orrs	r4, r5
 800085c:	e7b3      	b.n	80007c6 <__aeabi_fdiv+0x12e>
 800085e:	2301      	movs	r3, #1
 8000860:	1a1b      	subs	r3, r3, r0
 8000862:	2b1b      	cmp	r3, #27
 8000864:	dd00      	ble.n	8000868 <__aeabi_fdiv+0x1d0>
 8000866:	e76d      	b.n	8000744 <__aeabi_fdiv+0xac>
 8000868:	0021      	movs	r1, r4
 800086a:	379e      	adds	r7, #158	@ 0x9e
 800086c:	40d9      	lsrs	r1, r3
 800086e:	40bc      	lsls	r4, r7
 8000870:	000b      	movs	r3, r1
 8000872:	1e61      	subs	r1, r4, #1
 8000874:	418c      	sbcs	r4, r1
 8000876:	4323      	orrs	r3, r4
 8000878:	0759      	lsls	r1, r3, #29
 800087a:	d004      	beq.n	8000886 <__aeabi_fdiv+0x1ee>
 800087c:	210f      	movs	r1, #15
 800087e:	4019      	ands	r1, r3
 8000880:	2904      	cmp	r1, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fdiv+0x1ee>
 8000884:	3304      	adds	r3, #4
 8000886:	0159      	lsls	r1, r3, #5
 8000888:	d413      	bmi.n	80008b2 <__aeabi_fdiv+0x21a>
 800088a:	019b      	lsls	r3, r3, #6
 800088c:	2000      	movs	r0, #0
 800088e:	0a5c      	lsrs	r4, r3, #9
 8000890:	e75a      	b.n	8000748 <__aeabi_fdiv+0xb0>
 8000892:	231a      	movs	r3, #26
 8000894:	2401      	movs	r4, #1
 8000896:	1a2d      	subs	r5, r5, r0
 8000898:	e7d0      	b.n	800083c <__aeabi_fdiv+0x1a4>
 800089a:	1e98      	subs	r0, r3, #2
 800089c:	4243      	negs	r3, r0
 800089e:	4158      	adcs	r0, r3
 80008a0:	4240      	negs	r0, r0
 80008a2:	0032      	movs	r2, r6
 80008a4:	2400      	movs	r4, #0
 80008a6:	b2c0      	uxtb	r0, r0
 80008a8:	e74e      	b.n	8000748 <__aeabi_fdiv+0xb0>
 80008aa:	4642      	mov	r2, r8
 80008ac:	20ff      	movs	r0, #255	@ 0xff
 80008ae:	2400      	movs	r4, #0
 80008b0:	e74a      	b.n	8000748 <__aeabi_fdiv+0xb0>
 80008b2:	2001      	movs	r0, #1
 80008b4:	2400      	movs	r4, #0
 80008b6:	e747      	b.n	8000748 <__aeabi_fdiv+0xb0>
 80008b8:	08009e38 	.word	0x08009e38
 80008bc:	08009e78 	.word	0x08009e78
 80008c0:	f7ffffff 	.word	0xf7ffffff

080008c4 <__aeabi_fsub>:
 80008c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c6:	4647      	mov	r7, r8
 80008c8:	46ce      	mov	lr, r9
 80008ca:	0243      	lsls	r3, r0, #9
 80008cc:	b580      	push	{r7, lr}
 80008ce:	0a5f      	lsrs	r7, r3, #9
 80008d0:	099b      	lsrs	r3, r3, #6
 80008d2:	0045      	lsls	r5, r0, #1
 80008d4:	004a      	lsls	r2, r1, #1
 80008d6:	469c      	mov	ip, r3
 80008d8:	024b      	lsls	r3, r1, #9
 80008da:	0fc4      	lsrs	r4, r0, #31
 80008dc:	0fce      	lsrs	r6, r1, #31
 80008de:	0e2d      	lsrs	r5, r5, #24
 80008e0:	0a58      	lsrs	r0, r3, #9
 80008e2:	0e12      	lsrs	r2, r2, #24
 80008e4:	0999      	lsrs	r1, r3, #6
 80008e6:	2aff      	cmp	r2, #255	@ 0xff
 80008e8:	d06b      	beq.n	80009c2 <__aeabi_fsub+0xfe>
 80008ea:	2301      	movs	r3, #1
 80008ec:	405e      	eors	r6, r3
 80008ee:	1aab      	subs	r3, r5, r2
 80008f0:	42b4      	cmp	r4, r6
 80008f2:	d04b      	beq.n	800098c <__aeabi_fsub+0xc8>
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	dc00      	bgt.n	80008fa <__aeabi_fsub+0x36>
 80008f8:	e0ff      	b.n	8000afa <__aeabi_fsub+0x236>
 80008fa:	2a00      	cmp	r2, #0
 80008fc:	d100      	bne.n	8000900 <__aeabi_fsub+0x3c>
 80008fe:	e088      	b.n	8000a12 <__aeabi_fsub+0x14e>
 8000900:	2dff      	cmp	r5, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fsub+0x42>
 8000904:	e0ef      	b.n	8000ae6 <__aeabi_fsub+0x222>
 8000906:	2280      	movs	r2, #128	@ 0x80
 8000908:	04d2      	lsls	r2, r2, #19
 800090a:	4311      	orrs	r1, r2
 800090c:	2001      	movs	r0, #1
 800090e:	2b1b      	cmp	r3, #27
 8000910:	dc08      	bgt.n	8000924 <__aeabi_fsub+0x60>
 8000912:	0008      	movs	r0, r1
 8000914:	2220      	movs	r2, #32
 8000916:	40d8      	lsrs	r0, r3
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	4099      	lsls	r1, r3
 800091c:	000b      	movs	r3, r1
 800091e:	1e5a      	subs	r2, r3, #1
 8000920:	4193      	sbcs	r3, r2
 8000922:	4318      	orrs	r0, r3
 8000924:	4663      	mov	r3, ip
 8000926:	1a1b      	subs	r3, r3, r0
 8000928:	469c      	mov	ip, r3
 800092a:	4663      	mov	r3, ip
 800092c:	015b      	lsls	r3, r3, #5
 800092e:	d400      	bmi.n	8000932 <__aeabi_fsub+0x6e>
 8000930:	e0cd      	b.n	8000ace <__aeabi_fsub+0x20a>
 8000932:	4663      	mov	r3, ip
 8000934:	019f      	lsls	r7, r3, #6
 8000936:	09bf      	lsrs	r7, r7, #6
 8000938:	0038      	movs	r0, r7
 800093a:	f001 fac9 	bl	8001ed0 <__clzsi2>
 800093e:	003b      	movs	r3, r7
 8000940:	3805      	subs	r0, #5
 8000942:	4083      	lsls	r3, r0
 8000944:	4285      	cmp	r5, r0
 8000946:	dc00      	bgt.n	800094a <__aeabi_fsub+0x86>
 8000948:	e0a2      	b.n	8000a90 <__aeabi_fsub+0x1cc>
 800094a:	4ab7      	ldr	r2, [pc, #732]	@ (8000c28 <__aeabi_fsub+0x364>)
 800094c:	1a2d      	subs	r5, r5, r0
 800094e:	401a      	ands	r2, r3
 8000950:	4694      	mov	ip, r2
 8000952:	075a      	lsls	r2, r3, #29
 8000954:	d100      	bne.n	8000958 <__aeabi_fsub+0x94>
 8000956:	e0c3      	b.n	8000ae0 <__aeabi_fsub+0x21c>
 8000958:	220f      	movs	r2, #15
 800095a:	4013      	ands	r3, r2
 800095c:	2b04      	cmp	r3, #4
 800095e:	d100      	bne.n	8000962 <__aeabi_fsub+0x9e>
 8000960:	e0be      	b.n	8000ae0 <__aeabi_fsub+0x21c>
 8000962:	2304      	movs	r3, #4
 8000964:	4698      	mov	r8, r3
 8000966:	44c4      	add	ip, r8
 8000968:	4663      	mov	r3, ip
 800096a:	015b      	lsls	r3, r3, #5
 800096c:	d400      	bmi.n	8000970 <__aeabi_fsub+0xac>
 800096e:	e0b7      	b.n	8000ae0 <__aeabi_fsub+0x21c>
 8000970:	1c68      	adds	r0, r5, #1
 8000972:	2dfe      	cmp	r5, #254	@ 0xfe
 8000974:	d000      	beq.n	8000978 <__aeabi_fsub+0xb4>
 8000976:	e0a5      	b.n	8000ac4 <__aeabi_fsub+0x200>
 8000978:	20ff      	movs	r0, #255	@ 0xff
 800097a:	2200      	movs	r2, #0
 800097c:	05c0      	lsls	r0, r0, #23
 800097e:	4310      	orrs	r0, r2
 8000980:	07e4      	lsls	r4, r4, #31
 8000982:	4320      	orrs	r0, r4
 8000984:	bcc0      	pop	{r6, r7}
 8000986:	46b9      	mov	r9, r7
 8000988:	46b0      	mov	r8, r6
 800098a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800098c:	2b00      	cmp	r3, #0
 800098e:	dc00      	bgt.n	8000992 <__aeabi_fsub+0xce>
 8000990:	e1eb      	b.n	8000d6a <__aeabi_fsub+0x4a6>
 8000992:	2a00      	cmp	r2, #0
 8000994:	d046      	beq.n	8000a24 <__aeabi_fsub+0x160>
 8000996:	2dff      	cmp	r5, #255	@ 0xff
 8000998:	d100      	bne.n	800099c <__aeabi_fsub+0xd8>
 800099a:	e0a4      	b.n	8000ae6 <__aeabi_fsub+0x222>
 800099c:	2280      	movs	r2, #128	@ 0x80
 800099e:	04d2      	lsls	r2, r2, #19
 80009a0:	4311      	orrs	r1, r2
 80009a2:	2b1b      	cmp	r3, #27
 80009a4:	dc00      	bgt.n	80009a8 <__aeabi_fsub+0xe4>
 80009a6:	e0fb      	b.n	8000ba0 <__aeabi_fsub+0x2dc>
 80009a8:	2305      	movs	r3, #5
 80009aa:	4698      	mov	r8, r3
 80009ac:	002b      	movs	r3, r5
 80009ae:	44c4      	add	ip, r8
 80009b0:	4662      	mov	r2, ip
 80009b2:	08d7      	lsrs	r7, r2, #3
 80009b4:	2bff      	cmp	r3, #255	@ 0xff
 80009b6:	d100      	bne.n	80009ba <__aeabi_fsub+0xf6>
 80009b8:	e095      	b.n	8000ae6 <__aeabi_fsub+0x222>
 80009ba:	027a      	lsls	r2, r7, #9
 80009bc:	0a52      	lsrs	r2, r2, #9
 80009be:	b2d8      	uxtb	r0, r3
 80009c0:	e7dc      	b.n	800097c <__aeabi_fsub+0xb8>
 80009c2:	002b      	movs	r3, r5
 80009c4:	3bff      	subs	r3, #255	@ 0xff
 80009c6:	4699      	mov	r9, r3
 80009c8:	2900      	cmp	r1, #0
 80009ca:	d118      	bne.n	80009fe <__aeabi_fsub+0x13a>
 80009cc:	2301      	movs	r3, #1
 80009ce:	405e      	eors	r6, r3
 80009d0:	42b4      	cmp	r4, r6
 80009d2:	d100      	bne.n	80009d6 <__aeabi_fsub+0x112>
 80009d4:	e0ca      	b.n	8000b6c <__aeabi_fsub+0x2a8>
 80009d6:	464b      	mov	r3, r9
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d02d      	beq.n	8000a38 <__aeabi_fsub+0x174>
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d000      	beq.n	80009e2 <__aeabi_fsub+0x11e>
 80009e0:	e13c      	b.n	8000c5c <__aeabi_fsub+0x398>
 80009e2:	23ff      	movs	r3, #255	@ 0xff
 80009e4:	4664      	mov	r4, ip
 80009e6:	2c00      	cmp	r4, #0
 80009e8:	d100      	bne.n	80009ec <__aeabi_fsub+0x128>
 80009ea:	e15f      	b.n	8000cac <__aeabi_fsub+0x3e8>
 80009ec:	1e5d      	subs	r5, r3, #1
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d100      	bne.n	80009f4 <__aeabi_fsub+0x130>
 80009f2:	e174      	b.n	8000cde <__aeabi_fsub+0x41a>
 80009f4:	0034      	movs	r4, r6
 80009f6:	2bff      	cmp	r3, #255	@ 0xff
 80009f8:	d074      	beq.n	8000ae4 <__aeabi_fsub+0x220>
 80009fa:	002b      	movs	r3, r5
 80009fc:	e103      	b.n	8000c06 <__aeabi_fsub+0x342>
 80009fe:	42b4      	cmp	r4, r6
 8000a00:	d100      	bne.n	8000a04 <__aeabi_fsub+0x140>
 8000a02:	e09c      	b.n	8000b3e <__aeabi_fsub+0x27a>
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d017      	beq.n	8000a38 <__aeabi_fsub+0x174>
 8000a08:	2d00      	cmp	r5, #0
 8000a0a:	d0ea      	beq.n	80009e2 <__aeabi_fsub+0x11e>
 8000a0c:	0007      	movs	r7, r0
 8000a0e:	0034      	movs	r4, r6
 8000a10:	e06c      	b.n	8000aec <__aeabi_fsub+0x228>
 8000a12:	2900      	cmp	r1, #0
 8000a14:	d0cc      	beq.n	80009b0 <__aeabi_fsub+0xec>
 8000a16:	1e5a      	subs	r2, r3, #1
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d02b      	beq.n	8000a74 <__aeabi_fsub+0x1b0>
 8000a1c:	2bff      	cmp	r3, #255	@ 0xff
 8000a1e:	d062      	beq.n	8000ae6 <__aeabi_fsub+0x222>
 8000a20:	0013      	movs	r3, r2
 8000a22:	e773      	b.n	800090c <__aeabi_fsub+0x48>
 8000a24:	2900      	cmp	r1, #0
 8000a26:	d0c3      	beq.n	80009b0 <__aeabi_fsub+0xec>
 8000a28:	1e5a      	subs	r2, r3, #1
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_fsub+0x16c>
 8000a2e:	e11e      	b.n	8000c6e <__aeabi_fsub+0x3aa>
 8000a30:	2bff      	cmp	r3, #255	@ 0xff
 8000a32:	d058      	beq.n	8000ae6 <__aeabi_fsub+0x222>
 8000a34:	0013      	movs	r3, r2
 8000a36:	e7b4      	b.n	80009a2 <__aeabi_fsub+0xde>
 8000a38:	22fe      	movs	r2, #254	@ 0xfe
 8000a3a:	1c6b      	adds	r3, r5, #1
 8000a3c:	421a      	tst	r2, r3
 8000a3e:	d10d      	bne.n	8000a5c <__aeabi_fsub+0x198>
 8000a40:	2d00      	cmp	r5, #0
 8000a42:	d060      	beq.n	8000b06 <__aeabi_fsub+0x242>
 8000a44:	4663      	mov	r3, ip
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d000      	beq.n	8000a4c <__aeabi_fsub+0x188>
 8000a4a:	e120      	b.n	8000c8e <__aeabi_fsub+0x3ca>
 8000a4c:	2900      	cmp	r1, #0
 8000a4e:	d000      	beq.n	8000a52 <__aeabi_fsub+0x18e>
 8000a50:	e128      	b.n	8000ca4 <__aeabi_fsub+0x3e0>
 8000a52:	2280      	movs	r2, #128	@ 0x80
 8000a54:	2400      	movs	r4, #0
 8000a56:	20ff      	movs	r0, #255	@ 0xff
 8000a58:	03d2      	lsls	r2, r2, #15
 8000a5a:	e78f      	b.n	800097c <__aeabi_fsub+0xb8>
 8000a5c:	4663      	mov	r3, ip
 8000a5e:	1a5f      	subs	r7, r3, r1
 8000a60:	017b      	lsls	r3, r7, #5
 8000a62:	d500      	bpl.n	8000a66 <__aeabi_fsub+0x1a2>
 8000a64:	e0fe      	b.n	8000c64 <__aeabi_fsub+0x3a0>
 8000a66:	2f00      	cmp	r7, #0
 8000a68:	d000      	beq.n	8000a6c <__aeabi_fsub+0x1a8>
 8000a6a:	e765      	b.n	8000938 <__aeabi_fsub+0x74>
 8000a6c:	2400      	movs	r4, #0
 8000a6e:	2000      	movs	r0, #0
 8000a70:	2200      	movs	r2, #0
 8000a72:	e783      	b.n	800097c <__aeabi_fsub+0xb8>
 8000a74:	4663      	mov	r3, ip
 8000a76:	1a59      	subs	r1, r3, r1
 8000a78:	014b      	lsls	r3, r1, #5
 8000a7a:	d400      	bmi.n	8000a7e <__aeabi_fsub+0x1ba>
 8000a7c:	e119      	b.n	8000cb2 <__aeabi_fsub+0x3ee>
 8000a7e:	018f      	lsls	r7, r1, #6
 8000a80:	09bf      	lsrs	r7, r7, #6
 8000a82:	0038      	movs	r0, r7
 8000a84:	f001 fa24 	bl	8001ed0 <__clzsi2>
 8000a88:	003b      	movs	r3, r7
 8000a8a:	3805      	subs	r0, #5
 8000a8c:	4083      	lsls	r3, r0
 8000a8e:	2501      	movs	r5, #1
 8000a90:	2220      	movs	r2, #32
 8000a92:	1b40      	subs	r0, r0, r5
 8000a94:	3001      	adds	r0, #1
 8000a96:	1a12      	subs	r2, r2, r0
 8000a98:	0019      	movs	r1, r3
 8000a9a:	4093      	lsls	r3, r2
 8000a9c:	40c1      	lsrs	r1, r0
 8000a9e:	1e5a      	subs	r2, r3, #1
 8000aa0:	4193      	sbcs	r3, r2
 8000aa2:	4319      	orrs	r1, r3
 8000aa4:	468c      	mov	ip, r1
 8000aa6:	1e0b      	subs	r3, r1, #0
 8000aa8:	d0e1      	beq.n	8000a6e <__aeabi_fsub+0x1aa>
 8000aaa:	075b      	lsls	r3, r3, #29
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_fsub+0x1ec>
 8000aae:	e152      	b.n	8000d56 <__aeabi_fsub+0x492>
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	2500      	movs	r5, #0
 8000ab4:	400b      	ands	r3, r1
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	d000      	beq.n	8000abc <__aeabi_fsub+0x1f8>
 8000aba:	e752      	b.n	8000962 <__aeabi_fsub+0x9e>
 8000abc:	2001      	movs	r0, #1
 8000abe:	014a      	lsls	r2, r1, #5
 8000ac0:	d400      	bmi.n	8000ac4 <__aeabi_fsub+0x200>
 8000ac2:	e092      	b.n	8000bea <__aeabi_fsub+0x326>
 8000ac4:	b2c0      	uxtb	r0, r0
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	019a      	lsls	r2, r3, #6
 8000aca:	0a52      	lsrs	r2, r2, #9
 8000acc:	e756      	b.n	800097c <__aeabi_fsub+0xb8>
 8000ace:	4663      	mov	r3, ip
 8000ad0:	075b      	lsls	r3, r3, #29
 8000ad2:	d005      	beq.n	8000ae0 <__aeabi_fsub+0x21c>
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	4662      	mov	r2, ip
 8000ad8:	4013      	ands	r3, r2
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	d000      	beq.n	8000ae0 <__aeabi_fsub+0x21c>
 8000ade:	e740      	b.n	8000962 <__aeabi_fsub+0x9e>
 8000ae0:	002b      	movs	r3, r5
 8000ae2:	e765      	b.n	80009b0 <__aeabi_fsub+0xec>
 8000ae4:	0007      	movs	r7, r0
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d100      	bne.n	8000aec <__aeabi_fsub+0x228>
 8000aea:	e745      	b.n	8000978 <__aeabi_fsub+0xb4>
 8000aec:	2280      	movs	r2, #128	@ 0x80
 8000aee:	03d2      	lsls	r2, r2, #15
 8000af0:	433a      	orrs	r2, r7
 8000af2:	0252      	lsls	r2, r2, #9
 8000af4:	20ff      	movs	r0, #255	@ 0xff
 8000af6:	0a52      	lsrs	r2, r2, #9
 8000af8:	e740      	b.n	800097c <__aeabi_fsub+0xb8>
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d179      	bne.n	8000bf2 <__aeabi_fsub+0x32e>
 8000afe:	22fe      	movs	r2, #254	@ 0xfe
 8000b00:	1c6b      	adds	r3, r5, #1
 8000b02:	421a      	tst	r2, r3
 8000b04:	d1aa      	bne.n	8000a5c <__aeabi_fsub+0x198>
 8000b06:	4663      	mov	r3, ip
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_fsub+0x24a>
 8000b0c:	e0f5      	b.n	8000cfa <__aeabi_fsub+0x436>
 8000b0e:	2900      	cmp	r1, #0
 8000b10:	d100      	bne.n	8000b14 <__aeabi_fsub+0x250>
 8000b12:	e0d1      	b.n	8000cb8 <__aeabi_fsub+0x3f4>
 8000b14:	1a5f      	subs	r7, r3, r1
 8000b16:	2380      	movs	r3, #128	@ 0x80
 8000b18:	04db      	lsls	r3, r3, #19
 8000b1a:	421f      	tst	r7, r3
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_fsub+0x25c>
 8000b1e:	e10e      	b.n	8000d3e <__aeabi_fsub+0x47a>
 8000b20:	4662      	mov	r2, ip
 8000b22:	2401      	movs	r4, #1
 8000b24:	1a8a      	subs	r2, r1, r2
 8000b26:	4694      	mov	ip, r2
 8000b28:	2000      	movs	r0, #0
 8000b2a:	4034      	ands	r4, r6
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_fsub+0x26e>
 8000b30:	e724      	b.n	800097c <__aeabi_fsub+0xb8>
 8000b32:	2001      	movs	r0, #1
 8000b34:	421a      	tst	r2, r3
 8000b36:	d1c6      	bne.n	8000ac6 <__aeabi_fsub+0x202>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	08d7      	lsrs	r7, r2, #3
 8000b3c:	e73d      	b.n	80009ba <__aeabi_fsub+0xf6>
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d017      	beq.n	8000b72 <__aeabi_fsub+0x2ae>
 8000b42:	2d00      	cmp	r5, #0
 8000b44:	d000      	beq.n	8000b48 <__aeabi_fsub+0x284>
 8000b46:	e0af      	b.n	8000ca8 <__aeabi_fsub+0x3e4>
 8000b48:	23ff      	movs	r3, #255	@ 0xff
 8000b4a:	4665      	mov	r5, ip
 8000b4c:	2d00      	cmp	r5, #0
 8000b4e:	d100      	bne.n	8000b52 <__aeabi_fsub+0x28e>
 8000b50:	e0ad      	b.n	8000cae <__aeabi_fsub+0x3ea>
 8000b52:	1e5e      	subs	r6, r3, #1
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d100      	bne.n	8000b5a <__aeabi_fsub+0x296>
 8000b58:	e089      	b.n	8000c6e <__aeabi_fsub+0x3aa>
 8000b5a:	2bff      	cmp	r3, #255	@ 0xff
 8000b5c:	d0c2      	beq.n	8000ae4 <__aeabi_fsub+0x220>
 8000b5e:	2e1b      	cmp	r6, #27
 8000b60:	dc00      	bgt.n	8000b64 <__aeabi_fsub+0x2a0>
 8000b62:	e0ab      	b.n	8000cbc <__aeabi_fsub+0x3f8>
 8000b64:	1d4b      	adds	r3, r1, #5
 8000b66:	469c      	mov	ip, r3
 8000b68:	0013      	movs	r3, r2
 8000b6a:	e721      	b.n	80009b0 <__aeabi_fsub+0xec>
 8000b6c:	464b      	mov	r3, r9
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d170      	bne.n	8000c54 <__aeabi_fsub+0x390>
 8000b72:	22fe      	movs	r2, #254	@ 0xfe
 8000b74:	1c6b      	adds	r3, r5, #1
 8000b76:	421a      	tst	r2, r3
 8000b78:	d15e      	bne.n	8000c38 <__aeabi_fsub+0x374>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d000      	beq.n	8000b80 <__aeabi_fsub+0x2bc>
 8000b7e:	e0c3      	b.n	8000d08 <__aeabi_fsub+0x444>
 8000b80:	4663      	mov	r3, ip
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d100      	bne.n	8000b88 <__aeabi_fsub+0x2c4>
 8000b86:	e0d0      	b.n	8000d2a <__aeabi_fsub+0x466>
 8000b88:	2900      	cmp	r1, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fsub+0x2ca>
 8000b8c:	e094      	b.n	8000cb8 <__aeabi_fsub+0x3f4>
 8000b8e:	000a      	movs	r2, r1
 8000b90:	4462      	add	r2, ip
 8000b92:	0153      	lsls	r3, r2, #5
 8000b94:	d400      	bmi.n	8000b98 <__aeabi_fsub+0x2d4>
 8000b96:	e0d8      	b.n	8000d4a <__aeabi_fsub+0x486>
 8000b98:	0192      	lsls	r2, r2, #6
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	0a52      	lsrs	r2, r2, #9
 8000b9e:	e6ed      	b.n	800097c <__aeabi_fsub+0xb8>
 8000ba0:	0008      	movs	r0, r1
 8000ba2:	2220      	movs	r2, #32
 8000ba4:	40d8      	lsrs	r0, r3
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	4099      	lsls	r1, r3
 8000baa:	000b      	movs	r3, r1
 8000bac:	1e5a      	subs	r2, r3, #1
 8000bae:	4193      	sbcs	r3, r2
 8000bb0:	4303      	orrs	r3, r0
 8000bb2:	449c      	add	ip, r3
 8000bb4:	4663      	mov	r3, ip
 8000bb6:	015b      	lsls	r3, r3, #5
 8000bb8:	d589      	bpl.n	8000ace <__aeabi_fsub+0x20a>
 8000bba:	3501      	adds	r5, #1
 8000bbc:	2dff      	cmp	r5, #255	@ 0xff
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_fsub+0x2fe>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fsub+0xb4>
 8000bc2:	4662      	mov	r2, ip
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	4919      	ldr	r1, [pc, #100]	@ (8000c2c <__aeabi_fsub+0x368>)
 8000bc8:	4013      	ands	r3, r2
 8000bca:	0852      	lsrs	r2, r2, #1
 8000bcc:	400a      	ands	r2, r1
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	0013      	movs	r3, r2
 8000bd2:	4694      	mov	ip, r2
 8000bd4:	075b      	lsls	r3, r3, #29
 8000bd6:	d004      	beq.n	8000be2 <__aeabi_fsub+0x31e>
 8000bd8:	230f      	movs	r3, #15
 8000bda:	4013      	ands	r3, r2
 8000bdc:	2b04      	cmp	r3, #4
 8000bde:	d000      	beq.n	8000be2 <__aeabi_fsub+0x31e>
 8000be0:	e6bf      	b.n	8000962 <__aeabi_fsub+0x9e>
 8000be2:	4663      	mov	r3, ip
 8000be4:	015b      	lsls	r3, r3, #5
 8000be6:	d500      	bpl.n	8000bea <__aeabi_fsub+0x326>
 8000be8:	e6c2      	b.n	8000970 <__aeabi_fsub+0xac>
 8000bea:	4663      	mov	r3, ip
 8000bec:	08df      	lsrs	r7, r3, #3
 8000bee:	002b      	movs	r3, r5
 8000bf0:	e6e3      	b.n	80009ba <__aeabi_fsub+0xf6>
 8000bf2:	1b53      	subs	r3, r2, r5
 8000bf4:	2d00      	cmp	r5, #0
 8000bf6:	d100      	bne.n	8000bfa <__aeabi_fsub+0x336>
 8000bf8:	e6f4      	b.n	80009e4 <__aeabi_fsub+0x120>
 8000bfa:	2080      	movs	r0, #128	@ 0x80
 8000bfc:	4664      	mov	r4, ip
 8000bfe:	04c0      	lsls	r0, r0, #19
 8000c00:	4304      	orrs	r4, r0
 8000c02:	46a4      	mov	ip, r4
 8000c04:	0034      	movs	r4, r6
 8000c06:	2001      	movs	r0, #1
 8000c08:	2b1b      	cmp	r3, #27
 8000c0a:	dc09      	bgt.n	8000c20 <__aeabi_fsub+0x35c>
 8000c0c:	2520      	movs	r5, #32
 8000c0e:	4660      	mov	r0, ip
 8000c10:	40d8      	lsrs	r0, r3
 8000c12:	1aeb      	subs	r3, r5, r3
 8000c14:	4665      	mov	r5, ip
 8000c16:	409d      	lsls	r5, r3
 8000c18:	002b      	movs	r3, r5
 8000c1a:	1e5d      	subs	r5, r3, #1
 8000c1c:	41ab      	sbcs	r3, r5
 8000c1e:	4318      	orrs	r0, r3
 8000c20:	1a0b      	subs	r3, r1, r0
 8000c22:	469c      	mov	ip, r3
 8000c24:	0015      	movs	r5, r2
 8000c26:	e680      	b.n	800092a <__aeabi_fsub+0x66>
 8000c28:	fbffffff 	.word	0xfbffffff
 8000c2c:	7dffffff 	.word	0x7dffffff
 8000c30:	22fe      	movs	r2, #254	@ 0xfe
 8000c32:	1c6b      	adds	r3, r5, #1
 8000c34:	4213      	tst	r3, r2
 8000c36:	d0a3      	beq.n	8000b80 <__aeabi_fsub+0x2bc>
 8000c38:	2bff      	cmp	r3, #255	@ 0xff
 8000c3a:	d100      	bne.n	8000c3e <__aeabi_fsub+0x37a>
 8000c3c:	e69c      	b.n	8000978 <__aeabi_fsub+0xb4>
 8000c3e:	4461      	add	r1, ip
 8000c40:	0849      	lsrs	r1, r1, #1
 8000c42:	074a      	lsls	r2, r1, #29
 8000c44:	d049      	beq.n	8000cda <__aeabi_fsub+0x416>
 8000c46:	220f      	movs	r2, #15
 8000c48:	400a      	ands	r2, r1
 8000c4a:	2a04      	cmp	r2, #4
 8000c4c:	d045      	beq.n	8000cda <__aeabi_fsub+0x416>
 8000c4e:	1d0a      	adds	r2, r1, #4
 8000c50:	4694      	mov	ip, r2
 8000c52:	e6ad      	b.n	80009b0 <__aeabi_fsub+0xec>
 8000c54:	2d00      	cmp	r5, #0
 8000c56:	d100      	bne.n	8000c5a <__aeabi_fsub+0x396>
 8000c58:	e776      	b.n	8000b48 <__aeabi_fsub+0x284>
 8000c5a:	e68d      	b.n	8000978 <__aeabi_fsub+0xb4>
 8000c5c:	0034      	movs	r4, r6
 8000c5e:	20ff      	movs	r0, #255	@ 0xff
 8000c60:	2200      	movs	r2, #0
 8000c62:	e68b      	b.n	800097c <__aeabi_fsub+0xb8>
 8000c64:	4663      	mov	r3, ip
 8000c66:	2401      	movs	r4, #1
 8000c68:	1acf      	subs	r7, r1, r3
 8000c6a:	4034      	ands	r4, r6
 8000c6c:	e664      	b.n	8000938 <__aeabi_fsub+0x74>
 8000c6e:	4461      	add	r1, ip
 8000c70:	014b      	lsls	r3, r1, #5
 8000c72:	d56d      	bpl.n	8000d50 <__aeabi_fsub+0x48c>
 8000c74:	0848      	lsrs	r0, r1, #1
 8000c76:	4944      	ldr	r1, [pc, #272]	@ (8000d88 <__aeabi_fsub+0x4c4>)
 8000c78:	4001      	ands	r1, r0
 8000c7a:	0743      	lsls	r3, r0, #29
 8000c7c:	d02c      	beq.n	8000cd8 <__aeabi_fsub+0x414>
 8000c7e:	230f      	movs	r3, #15
 8000c80:	4003      	ands	r3, r0
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	d028      	beq.n	8000cd8 <__aeabi_fsub+0x414>
 8000c86:	1d0b      	adds	r3, r1, #4
 8000c88:	469c      	mov	ip, r3
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	e690      	b.n	80009b0 <__aeabi_fsub+0xec>
 8000c8e:	2900      	cmp	r1, #0
 8000c90:	d100      	bne.n	8000c94 <__aeabi_fsub+0x3d0>
 8000c92:	e72b      	b.n	8000aec <__aeabi_fsub+0x228>
 8000c94:	2380      	movs	r3, #128	@ 0x80
 8000c96:	03db      	lsls	r3, r3, #15
 8000c98:	429f      	cmp	r7, r3
 8000c9a:	d200      	bcs.n	8000c9e <__aeabi_fsub+0x3da>
 8000c9c:	e726      	b.n	8000aec <__aeabi_fsub+0x228>
 8000c9e:	4298      	cmp	r0, r3
 8000ca0:	d300      	bcc.n	8000ca4 <__aeabi_fsub+0x3e0>
 8000ca2:	e723      	b.n	8000aec <__aeabi_fsub+0x228>
 8000ca4:	2401      	movs	r4, #1
 8000ca6:	4034      	ands	r4, r6
 8000ca8:	0007      	movs	r7, r0
 8000caa:	e71f      	b.n	8000aec <__aeabi_fsub+0x228>
 8000cac:	0034      	movs	r4, r6
 8000cae:	468c      	mov	ip, r1
 8000cb0:	e67e      	b.n	80009b0 <__aeabi_fsub+0xec>
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	08cf      	lsrs	r7, r1, #3
 8000cb6:	e680      	b.n	80009ba <__aeabi_fsub+0xf6>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	e67e      	b.n	80009ba <__aeabi_fsub+0xf6>
 8000cbc:	2020      	movs	r0, #32
 8000cbe:	4665      	mov	r5, ip
 8000cc0:	1b80      	subs	r0, r0, r6
 8000cc2:	4085      	lsls	r5, r0
 8000cc4:	4663      	mov	r3, ip
 8000cc6:	0028      	movs	r0, r5
 8000cc8:	40f3      	lsrs	r3, r6
 8000cca:	1e45      	subs	r5, r0, #1
 8000ccc:	41a8      	sbcs	r0, r5
 8000cce:	4303      	orrs	r3, r0
 8000cd0:	469c      	mov	ip, r3
 8000cd2:	0015      	movs	r5, r2
 8000cd4:	448c      	add	ip, r1
 8000cd6:	e76d      	b.n	8000bb4 <__aeabi_fsub+0x2f0>
 8000cd8:	2302      	movs	r3, #2
 8000cda:	08cf      	lsrs	r7, r1, #3
 8000cdc:	e66d      	b.n	80009ba <__aeabi_fsub+0xf6>
 8000cde:	1b0f      	subs	r7, r1, r4
 8000ce0:	017b      	lsls	r3, r7, #5
 8000ce2:	d528      	bpl.n	8000d36 <__aeabi_fsub+0x472>
 8000ce4:	01bf      	lsls	r7, r7, #6
 8000ce6:	09bf      	lsrs	r7, r7, #6
 8000ce8:	0038      	movs	r0, r7
 8000cea:	f001 f8f1 	bl	8001ed0 <__clzsi2>
 8000cee:	003b      	movs	r3, r7
 8000cf0:	3805      	subs	r0, #5
 8000cf2:	4083      	lsls	r3, r0
 8000cf4:	0034      	movs	r4, r6
 8000cf6:	2501      	movs	r5, #1
 8000cf8:	e6ca      	b.n	8000a90 <__aeabi_fsub+0x1cc>
 8000cfa:	2900      	cmp	r1, #0
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_fsub+0x43c>
 8000cfe:	e6b5      	b.n	8000a6c <__aeabi_fsub+0x1a8>
 8000d00:	2401      	movs	r4, #1
 8000d02:	0007      	movs	r7, r0
 8000d04:	4034      	ands	r4, r6
 8000d06:	e658      	b.n	80009ba <__aeabi_fsub+0xf6>
 8000d08:	4663      	mov	r3, ip
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_fsub+0x44c>
 8000d0e:	e6e9      	b.n	8000ae4 <__aeabi_fsub+0x220>
 8000d10:	2900      	cmp	r1, #0
 8000d12:	d100      	bne.n	8000d16 <__aeabi_fsub+0x452>
 8000d14:	e6ea      	b.n	8000aec <__aeabi_fsub+0x228>
 8000d16:	2380      	movs	r3, #128	@ 0x80
 8000d18:	03db      	lsls	r3, r3, #15
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d200      	bcs.n	8000d20 <__aeabi_fsub+0x45c>
 8000d1e:	e6e5      	b.n	8000aec <__aeabi_fsub+0x228>
 8000d20:	4298      	cmp	r0, r3
 8000d22:	d300      	bcc.n	8000d26 <__aeabi_fsub+0x462>
 8000d24:	e6e2      	b.n	8000aec <__aeabi_fsub+0x228>
 8000d26:	0007      	movs	r7, r0
 8000d28:	e6e0      	b.n	8000aec <__aeabi_fsub+0x228>
 8000d2a:	2900      	cmp	r1, #0
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_fsub+0x46c>
 8000d2e:	e69e      	b.n	8000a6e <__aeabi_fsub+0x1aa>
 8000d30:	2300      	movs	r3, #0
 8000d32:	08cf      	lsrs	r7, r1, #3
 8000d34:	e641      	b.n	80009ba <__aeabi_fsub+0xf6>
 8000d36:	0034      	movs	r4, r6
 8000d38:	2301      	movs	r3, #1
 8000d3a:	08ff      	lsrs	r7, r7, #3
 8000d3c:	e63d      	b.n	80009ba <__aeabi_fsub+0xf6>
 8000d3e:	2f00      	cmp	r7, #0
 8000d40:	d100      	bne.n	8000d44 <__aeabi_fsub+0x480>
 8000d42:	e693      	b.n	8000a6c <__aeabi_fsub+0x1a8>
 8000d44:	2300      	movs	r3, #0
 8000d46:	08ff      	lsrs	r7, r7, #3
 8000d48:	e637      	b.n	80009ba <__aeabi_fsub+0xf6>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	08d7      	lsrs	r7, r2, #3
 8000d4e:	e634      	b.n	80009ba <__aeabi_fsub+0xf6>
 8000d50:	2301      	movs	r3, #1
 8000d52:	08cf      	lsrs	r7, r1, #3
 8000d54:	e631      	b.n	80009ba <__aeabi_fsub+0xf6>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	000b      	movs	r3, r1
 8000d5a:	04d2      	lsls	r2, r2, #19
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4013      	ands	r3, r2
 8000d60:	4211      	tst	r1, r2
 8000d62:	d000      	beq.n	8000d66 <__aeabi_fsub+0x4a2>
 8000d64:	e6ae      	b.n	8000ac4 <__aeabi_fsub+0x200>
 8000d66:	08cf      	lsrs	r7, r1, #3
 8000d68:	e627      	b.n	80009ba <__aeabi_fsub+0xf6>
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_fsub+0x4ac>
 8000d6e:	e75f      	b.n	8000c30 <__aeabi_fsub+0x36c>
 8000d70:	1b56      	subs	r6, r2, r5
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d101      	bne.n	8000d7a <__aeabi_fsub+0x4b6>
 8000d76:	0033      	movs	r3, r6
 8000d78:	e6e7      	b.n	8000b4a <__aeabi_fsub+0x286>
 8000d7a:	2380      	movs	r3, #128	@ 0x80
 8000d7c:	4660      	mov	r0, ip
 8000d7e:	04db      	lsls	r3, r3, #19
 8000d80:	4318      	orrs	r0, r3
 8000d82:	4684      	mov	ip, r0
 8000d84:	e6eb      	b.n	8000b5e <__aeabi_fsub+0x29a>
 8000d86:	46c0      	nop			@ (mov r8, r8)
 8000d88:	7dffffff 	.word	0x7dffffff

08000d8c <__aeabi_f2iz>:
 8000d8c:	0241      	lsls	r1, r0, #9
 8000d8e:	0042      	lsls	r2, r0, #1
 8000d90:	0fc3      	lsrs	r3, r0, #31
 8000d92:	0a49      	lsrs	r1, r1, #9
 8000d94:	2000      	movs	r0, #0
 8000d96:	0e12      	lsrs	r2, r2, #24
 8000d98:	2a7e      	cmp	r2, #126	@ 0x7e
 8000d9a:	dd03      	ble.n	8000da4 <__aeabi_f2iz+0x18>
 8000d9c:	2a9d      	cmp	r2, #157	@ 0x9d
 8000d9e:	dd02      	ble.n	8000da6 <__aeabi_f2iz+0x1a>
 8000da0:	4a09      	ldr	r2, [pc, #36]	@ (8000dc8 <__aeabi_f2iz+0x3c>)
 8000da2:	1898      	adds	r0, r3, r2
 8000da4:	4770      	bx	lr
 8000da6:	2080      	movs	r0, #128	@ 0x80
 8000da8:	0400      	lsls	r0, r0, #16
 8000daa:	4301      	orrs	r1, r0
 8000dac:	2a95      	cmp	r2, #149	@ 0x95
 8000dae:	dc07      	bgt.n	8000dc0 <__aeabi_f2iz+0x34>
 8000db0:	2096      	movs	r0, #150	@ 0x96
 8000db2:	1a82      	subs	r2, r0, r2
 8000db4:	40d1      	lsrs	r1, r2
 8000db6:	4248      	negs	r0, r1
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1f3      	bne.n	8000da4 <__aeabi_f2iz+0x18>
 8000dbc:	0008      	movs	r0, r1
 8000dbe:	e7f1      	b.n	8000da4 <__aeabi_f2iz+0x18>
 8000dc0:	3a96      	subs	r2, #150	@ 0x96
 8000dc2:	4091      	lsls	r1, r2
 8000dc4:	e7f7      	b.n	8000db6 <__aeabi_f2iz+0x2a>
 8000dc6:	46c0      	nop			@ (mov r8, r8)
 8000dc8:	7fffffff 	.word	0x7fffffff

08000dcc <__aeabi_ddiv>:
 8000dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dce:	46de      	mov	lr, fp
 8000dd0:	4645      	mov	r5, r8
 8000dd2:	4657      	mov	r7, sl
 8000dd4:	464e      	mov	r6, r9
 8000dd6:	b5e0      	push	{r5, r6, r7, lr}
 8000dd8:	b087      	sub	sp, #28
 8000dda:	9200      	str	r2, [sp, #0]
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	030b      	lsls	r3, r1, #12
 8000de0:	0b1b      	lsrs	r3, r3, #12
 8000de2:	469b      	mov	fp, r3
 8000de4:	0fca      	lsrs	r2, r1, #31
 8000de6:	004b      	lsls	r3, r1, #1
 8000de8:	0004      	movs	r4, r0
 8000dea:	4680      	mov	r8, r0
 8000dec:	0d5b      	lsrs	r3, r3, #21
 8000dee:	9202      	str	r2, [sp, #8]
 8000df0:	d100      	bne.n	8000df4 <__aeabi_ddiv+0x28>
 8000df2:	e098      	b.n	8000f26 <__aeabi_ddiv+0x15a>
 8000df4:	4a7c      	ldr	r2, [pc, #496]	@ (8000fe8 <__aeabi_ddiv+0x21c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d037      	beq.n	8000e6a <__aeabi_ddiv+0x9e>
 8000dfa:	4659      	mov	r1, fp
 8000dfc:	0f42      	lsrs	r2, r0, #29
 8000dfe:	00c9      	lsls	r1, r1, #3
 8000e00:	430a      	orrs	r2, r1
 8000e02:	2180      	movs	r1, #128	@ 0x80
 8000e04:	0409      	lsls	r1, r1, #16
 8000e06:	4311      	orrs	r1, r2
 8000e08:	00c2      	lsls	r2, r0, #3
 8000e0a:	4690      	mov	r8, r2
 8000e0c:	4a77      	ldr	r2, [pc, #476]	@ (8000fec <__aeabi_ddiv+0x220>)
 8000e0e:	4689      	mov	r9, r1
 8000e10:	4692      	mov	sl, r2
 8000e12:	449a      	add	sl, r3
 8000e14:	2300      	movs	r3, #0
 8000e16:	2400      	movs	r4, #0
 8000e18:	9303      	str	r3, [sp, #12]
 8000e1a:	9e00      	ldr	r6, [sp, #0]
 8000e1c:	9f01      	ldr	r7, [sp, #4]
 8000e1e:	033b      	lsls	r3, r7, #12
 8000e20:	0b1b      	lsrs	r3, r3, #12
 8000e22:	469b      	mov	fp, r3
 8000e24:	007b      	lsls	r3, r7, #1
 8000e26:	0030      	movs	r0, r6
 8000e28:	0d5b      	lsrs	r3, r3, #21
 8000e2a:	0ffd      	lsrs	r5, r7, #31
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d059      	beq.n	8000ee4 <__aeabi_ddiv+0x118>
 8000e30:	4a6d      	ldr	r2, [pc, #436]	@ (8000fe8 <__aeabi_ddiv+0x21c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d048      	beq.n	8000ec8 <__aeabi_ddiv+0xfc>
 8000e36:	4659      	mov	r1, fp
 8000e38:	0f72      	lsrs	r2, r6, #29
 8000e3a:	00c9      	lsls	r1, r1, #3
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	2180      	movs	r1, #128	@ 0x80
 8000e40:	0409      	lsls	r1, r1, #16
 8000e42:	4311      	orrs	r1, r2
 8000e44:	468b      	mov	fp, r1
 8000e46:	4969      	ldr	r1, [pc, #420]	@ (8000fec <__aeabi_ddiv+0x220>)
 8000e48:	00f2      	lsls	r2, r6, #3
 8000e4a:	468c      	mov	ip, r1
 8000e4c:	4651      	mov	r1, sl
 8000e4e:	4463      	add	r3, ip
 8000e50:	1acb      	subs	r3, r1, r3
 8000e52:	469a      	mov	sl, r3
 8000e54:	2100      	movs	r1, #0
 8000e56:	9e02      	ldr	r6, [sp, #8]
 8000e58:	406e      	eors	r6, r5
 8000e5a:	b2f6      	uxtb	r6, r6
 8000e5c:	2c0f      	cmp	r4, #15
 8000e5e:	d900      	bls.n	8000e62 <__aeabi_ddiv+0x96>
 8000e60:	e0ce      	b.n	8001000 <__aeabi_ddiv+0x234>
 8000e62:	4b63      	ldr	r3, [pc, #396]	@ (8000ff0 <__aeabi_ddiv+0x224>)
 8000e64:	00a4      	lsls	r4, r4, #2
 8000e66:	591b      	ldr	r3, [r3, r4]
 8000e68:	469f      	mov	pc, r3
 8000e6a:	465a      	mov	r2, fp
 8000e6c:	4302      	orrs	r2, r0
 8000e6e:	4691      	mov	r9, r2
 8000e70:	d000      	beq.n	8000e74 <__aeabi_ddiv+0xa8>
 8000e72:	e090      	b.n	8000f96 <__aeabi_ddiv+0x1ca>
 8000e74:	469a      	mov	sl, r3
 8000e76:	2302      	movs	r3, #2
 8000e78:	4690      	mov	r8, r2
 8000e7a:	2408      	movs	r4, #8
 8000e7c:	9303      	str	r3, [sp, #12]
 8000e7e:	e7cc      	b.n	8000e1a <__aeabi_ddiv+0x4e>
 8000e80:	46cb      	mov	fp, r9
 8000e82:	4642      	mov	r2, r8
 8000e84:	9d02      	ldr	r5, [sp, #8]
 8000e86:	9903      	ldr	r1, [sp, #12]
 8000e88:	2902      	cmp	r1, #2
 8000e8a:	d100      	bne.n	8000e8e <__aeabi_ddiv+0xc2>
 8000e8c:	e1de      	b.n	800124c <__aeabi_ddiv+0x480>
 8000e8e:	2903      	cmp	r1, #3
 8000e90:	d100      	bne.n	8000e94 <__aeabi_ddiv+0xc8>
 8000e92:	e08d      	b.n	8000fb0 <__aeabi_ddiv+0x1e4>
 8000e94:	2901      	cmp	r1, #1
 8000e96:	d000      	beq.n	8000e9a <__aeabi_ddiv+0xce>
 8000e98:	e179      	b.n	800118e <__aeabi_ddiv+0x3c2>
 8000e9a:	002e      	movs	r6, r5
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	2400      	movs	r4, #0
 8000ea2:	4690      	mov	r8, r2
 8000ea4:	051b      	lsls	r3, r3, #20
 8000ea6:	4323      	orrs	r3, r4
 8000ea8:	07f6      	lsls	r6, r6, #31
 8000eaa:	4333      	orrs	r3, r6
 8000eac:	4640      	mov	r0, r8
 8000eae:	0019      	movs	r1, r3
 8000eb0:	b007      	add	sp, #28
 8000eb2:	bcf0      	pop	{r4, r5, r6, r7}
 8000eb4:	46bb      	mov	fp, r7
 8000eb6:	46b2      	mov	sl, r6
 8000eb8:	46a9      	mov	r9, r5
 8000eba:	46a0      	mov	r8, r4
 8000ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2400      	movs	r4, #0
 8000ec2:	4690      	mov	r8, r2
 8000ec4:	4b48      	ldr	r3, [pc, #288]	@ (8000fe8 <__aeabi_ddiv+0x21c>)
 8000ec6:	e7ed      	b.n	8000ea4 <__aeabi_ddiv+0xd8>
 8000ec8:	465a      	mov	r2, fp
 8000eca:	9b00      	ldr	r3, [sp, #0]
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	4b49      	ldr	r3, [pc, #292]	@ (8000ff4 <__aeabi_ddiv+0x228>)
 8000ed0:	469c      	mov	ip, r3
 8000ed2:	44e2      	add	sl, ip
 8000ed4:	2a00      	cmp	r2, #0
 8000ed6:	d159      	bne.n	8000f8c <__aeabi_ddiv+0x1c0>
 8000ed8:	2302      	movs	r3, #2
 8000eda:	431c      	orrs	r4, r3
 8000edc:	2300      	movs	r3, #0
 8000ede:	2102      	movs	r1, #2
 8000ee0:	469b      	mov	fp, r3
 8000ee2:	e7b8      	b.n	8000e56 <__aeabi_ddiv+0x8a>
 8000ee4:	465a      	mov	r2, fp
 8000ee6:	9b00      	ldr	r3, [sp, #0]
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	d049      	beq.n	8000f80 <__aeabi_ddiv+0x1b4>
 8000eec:	465b      	mov	r3, fp
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_ddiv+0x128>
 8000ef2:	e19c      	b.n	800122e <__aeabi_ddiv+0x462>
 8000ef4:	4658      	mov	r0, fp
 8000ef6:	f000 ffeb 	bl	8001ed0 <__clzsi2>
 8000efa:	0002      	movs	r2, r0
 8000efc:	0003      	movs	r3, r0
 8000efe:	3a0b      	subs	r2, #11
 8000f00:	271d      	movs	r7, #29
 8000f02:	9e00      	ldr	r6, [sp, #0]
 8000f04:	1aba      	subs	r2, r7, r2
 8000f06:	0019      	movs	r1, r3
 8000f08:	4658      	mov	r0, fp
 8000f0a:	40d6      	lsrs	r6, r2
 8000f0c:	3908      	subs	r1, #8
 8000f0e:	4088      	lsls	r0, r1
 8000f10:	0032      	movs	r2, r6
 8000f12:	4302      	orrs	r2, r0
 8000f14:	4693      	mov	fp, r2
 8000f16:	9a00      	ldr	r2, [sp, #0]
 8000f18:	408a      	lsls	r2, r1
 8000f1a:	4937      	ldr	r1, [pc, #220]	@ (8000ff8 <__aeabi_ddiv+0x22c>)
 8000f1c:	4453      	add	r3, sl
 8000f1e:	468a      	mov	sl, r1
 8000f20:	2100      	movs	r1, #0
 8000f22:	449a      	add	sl, r3
 8000f24:	e797      	b.n	8000e56 <__aeabi_ddiv+0x8a>
 8000f26:	465b      	mov	r3, fp
 8000f28:	4303      	orrs	r3, r0
 8000f2a:	4699      	mov	r9, r3
 8000f2c:	d021      	beq.n	8000f72 <__aeabi_ddiv+0x1a6>
 8000f2e:	465b      	mov	r3, fp
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d100      	bne.n	8000f36 <__aeabi_ddiv+0x16a>
 8000f34:	e169      	b.n	800120a <__aeabi_ddiv+0x43e>
 8000f36:	4658      	mov	r0, fp
 8000f38:	f000 ffca 	bl	8001ed0 <__clzsi2>
 8000f3c:	230b      	movs	r3, #11
 8000f3e:	425b      	negs	r3, r3
 8000f40:	469c      	mov	ip, r3
 8000f42:	0002      	movs	r2, r0
 8000f44:	4484      	add	ip, r0
 8000f46:	4666      	mov	r6, ip
 8000f48:	231d      	movs	r3, #29
 8000f4a:	1b9b      	subs	r3, r3, r6
 8000f4c:	0026      	movs	r6, r4
 8000f4e:	0011      	movs	r1, r2
 8000f50:	4658      	mov	r0, fp
 8000f52:	40de      	lsrs	r6, r3
 8000f54:	3908      	subs	r1, #8
 8000f56:	4088      	lsls	r0, r1
 8000f58:	0033      	movs	r3, r6
 8000f5a:	4303      	orrs	r3, r0
 8000f5c:	4699      	mov	r9, r3
 8000f5e:	0023      	movs	r3, r4
 8000f60:	408b      	lsls	r3, r1
 8000f62:	4698      	mov	r8, r3
 8000f64:	4b25      	ldr	r3, [pc, #148]	@ (8000ffc <__aeabi_ddiv+0x230>)
 8000f66:	2400      	movs	r4, #0
 8000f68:	1a9b      	subs	r3, r3, r2
 8000f6a:	469a      	mov	sl, r3
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	9303      	str	r3, [sp, #12]
 8000f70:	e753      	b.n	8000e1a <__aeabi_ddiv+0x4e>
 8000f72:	2300      	movs	r3, #0
 8000f74:	4698      	mov	r8, r3
 8000f76:	469a      	mov	sl, r3
 8000f78:	3301      	adds	r3, #1
 8000f7a:	2404      	movs	r4, #4
 8000f7c:	9303      	str	r3, [sp, #12]
 8000f7e:	e74c      	b.n	8000e1a <__aeabi_ddiv+0x4e>
 8000f80:	2301      	movs	r3, #1
 8000f82:	431c      	orrs	r4, r3
 8000f84:	2300      	movs	r3, #0
 8000f86:	2101      	movs	r1, #1
 8000f88:	469b      	mov	fp, r3
 8000f8a:	e764      	b.n	8000e56 <__aeabi_ddiv+0x8a>
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	0032      	movs	r2, r6
 8000f90:	2103      	movs	r1, #3
 8000f92:	431c      	orrs	r4, r3
 8000f94:	e75f      	b.n	8000e56 <__aeabi_ddiv+0x8a>
 8000f96:	469a      	mov	sl, r3
 8000f98:	2303      	movs	r3, #3
 8000f9a:	46d9      	mov	r9, fp
 8000f9c:	240c      	movs	r4, #12
 8000f9e:	9303      	str	r3, [sp, #12]
 8000fa0:	e73b      	b.n	8000e1a <__aeabi_ddiv+0x4e>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	2480      	movs	r4, #128	@ 0x80
 8000fa6:	4698      	mov	r8, r3
 8000fa8:	2600      	movs	r6, #0
 8000faa:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <__aeabi_ddiv+0x21c>)
 8000fac:	0324      	lsls	r4, r4, #12
 8000fae:	e779      	b.n	8000ea4 <__aeabi_ddiv+0xd8>
 8000fb0:	2480      	movs	r4, #128	@ 0x80
 8000fb2:	465b      	mov	r3, fp
 8000fb4:	0324      	lsls	r4, r4, #12
 8000fb6:	431c      	orrs	r4, r3
 8000fb8:	0324      	lsls	r4, r4, #12
 8000fba:	002e      	movs	r6, r5
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <__aeabi_ddiv+0x21c>)
 8000fc0:	0b24      	lsrs	r4, r4, #12
 8000fc2:	e76f      	b.n	8000ea4 <__aeabi_ddiv+0xd8>
 8000fc4:	2480      	movs	r4, #128	@ 0x80
 8000fc6:	464b      	mov	r3, r9
 8000fc8:	0324      	lsls	r4, r4, #12
 8000fca:	4223      	tst	r3, r4
 8000fcc:	d002      	beq.n	8000fd4 <__aeabi_ddiv+0x208>
 8000fce:	465b      	mov	r3, fp
 8000fd0:	4223      	tst	r3, r4
 8000fd2:	d0f0      	beq.n	8000fb6 <__aeabi_ddiv+0x1ea>
 8000fd4:	2480      	movs	r4, #128	@ 0x80
 8000fd6:	464b      	mov	r3, r9
 8000fd8:	0324      	lsls	r4, r4, #12
 8000fda:	431c      	orrs	r4, r3
 8000fdc:	0324      	lsls	r4, r4, #12
 8000fde:	9e02      	ldr	r6, [sp, #8]
 8000fe0:	4b01      	ldr	r3, [pc, #4]	@ (8000fe8 <__aeabi_ddiv+0x21c>)
 8000fe2:	0b24      	lsrs	r4, r4, #12
 8000fe4:	e75e      	b.n	8000ea4 <__aeabi_ddiv+0xd8>
 8000fe6:	46c0      	nop			@ (mov r8, r8)
 8000fe8:	000007ff 	.word	0x000007ff
 8000fec:	fffffc01 	.word	0xfffffc01
 8000ff0:	08009eb4 	.word	0x08009eb4
 8000ff4:	fffff801 	.word	0xfffff801
 8000ff8:	000003f3 	.word	0x000003f3
 8000ffc:	fffffc0d 	.word	0xfffffc0d
 8001000:	45cb      	cmp	fp, r9
 8001002:	d200      	bcs.n	8001006 <__aeabi_ddiv+0x23a>
 8001004:	e0f8      	b.n	80011f8 <__aeabi_ddiv+0x42c>
 8001006:	d100      	bne.n	800100a <__aeabi_ddiv+0x23e>
 8001008:	e0f3      	b.n	80011f2 <__aeabi_ddiv+0x426>
 800100a:	2301      	movs	r3, #1
 800100c:	425b      	negs	r3, r3
 800100e:	469c      	mov	ip, r3
 8001010:	4644      	mov	r4, r8
 8001012:	4648      	mov	r0, r9
 8001014:	2500      	movs	r5, #0
 8001016:	44e2      	add	sl, ip
 8001018:	465b      	mov	r3, fp
 800101a:	0e17      	lsrs	r7, r2, #24
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	431f      	orrs	r7, r3
 8001020:	0c19      	lsrs	r1, r3, #16
 8001022:	043b      	lsls	r3, r7, #16
 8001024:	0212      	lsls	r2, r2, #8
 8001026:	9700      	str	r7, [sp, #0]
 8001028:	0c1f      	lsrs	r7, r3, #16
 800102a:	4691      	mov	r9, r2
 800102c:	9102      	str	r1, [sp, #8]
 800102e:	9703      	str	r7, [sp, #12]
 8001030:	f7ff f900 	bl	8000234 <__aeabi_uidivmod>
 8001034:	0002      	movs	r2, r0
 8001036:	437a      	muls	r2, r7
 8001038:	040b      	lsls	r3, r1, #16
 800103a:	0c21      	lsrs	r1, r4, #16
 800103c:	4680      	mov	r8, r0
 800103e:	4319      	orrs	r1, r3
 8001040:	428a      	cmp	r2, r1
 8001042:	d909      	bls.n	8001058 <__aeabi_ddiv+0x28c>
 8001044:	9f00      	ldr	r7, [sp, #0]
 8001046:	2301      	movs	r3, #1
 8001048:	46bc      	mov	ip, r7
 800104a:	425b      	negs	r3, r3
 800104c:	4461      	add	r1, ip
 800104e:	469c      	mov	ip, r3
 8001050:	44e0      	add	r8, ip
 8001052:	428f      	cmp	r7, r1
 8001054:	d800      	bhi.n	8001058 <__aeabi_ddiv+0x28c>
 8001056:	e15c      	b.n	8001312 <__aeabi_ddiv+0x546>
 8001058:	1a88      	subs	r0, r1, r2
 800105a:	9902      	ldr	r1, [sp, #8]
 800105c:	f7ff f8ea 	bl	8000234 <__aeabi_uidivmod>
 8001060:	9a03      	ldr	r2, [sp, #12]
 8001062:	0424      	lsls	r4, r4, #16
 8001064:	4342      	muls	r2, r0
 8001066:	0409      	lsls	r1, r1, #16
 8001068:	0c24      	lsrs	r4, r4, #16
 800106a:	0003      	movs	r3, r0
 800106c:	430c      	orrs	r4, r1
 800106e:	42a2      	cmp	r2, r4
 8001070:	d906      	bls.n	8001080 <__aeabi_ddiv+0x2b4>
 8001072:	9900      	ldr	r1, [sp, #0]
 8001074:	3b01      	subs	r3, #1
 8001076:	468c      	mov	ip, r1
 8001078:	4464      	add	r4, ip
 800107a:	42a1      	cmp	r1, r4
 800107c:	d800      	bhi.n	8001080 <__aeabi_ddiv+0x2b4>
 800107e:	e142      	b.n	8001306 <__aeabi_ddiv+0x53a>
 8001080:	1aa0      	subs	r0, r4, r2
 8001082:	4642      	mov	r2, r8
 8001084:	0412      	lsls	r2, r2, #16
 8001086:	431a      	orrs	r2, r3
 8001088:	4693      	mov	fp, r2
 800108a:	464b      	mov	r3, r9
 800108c:	4659      	mov	r1, fp
 800108e:	0c1b      	lsrs	r3, r3, #16
 8001090:	001f      	movs	r7, r3
 8001092:	9304      	str	r3, [sp, #16]
 8001094:	040b      	lsls	r3, r1, #16
 8001096:	4649      	mov	r1, r9
 8001098:	0409      	lsls	r1, r1, #16
 800109a:	0c09      	lsrs	r1, r1, #16
 800109c:	000c      	movs	r4, r1
 800109e:	0c1b      	lsrs	r3, r3, #16
 80010a0:	435c      	muls	r4, r3
 80010a2:	0c12      	lsrs	r2, r2, #16
 80010a4:	437b      	muls	r3, r7
 80010a6:	4688      	mov	r8, r1
 80010a8:	4351      	muls	r1, r2
 80010aa:	437a      	muls	r2, r7
 80010ac:	0c27      	lsrs	r7, r4, #16
 80010ae:	46bc      	mov	ip, r7
 80010b0:	185b      	adds	r3, r3, r1
 80010b2:	4463      	add	r3, ip
 80010b4:	4299      	cmp	r1, r3
 80010b6:	d903      	bls.n	80010c0 <__aeabi_ddiv+0x2f4>
 80010b8:	2180      	movs	r1, #128	@ 0x80
 80010ba:	0249      	lsls	r1, r1, #9
 80010bc:	468c      	mov	ip, r1
 80010be:	4462      	add	r2, ip
 80010c0:	0c19      	lsrs	r1, r3, #16
 80010c2:	0424      	lsls	r4, r4, #16
 80010c4:	041b      	lsls	r3, r3, #16
 80010c6:	0c24      	lsrs	r4, r4, #16
 80010c8:	188a      	adds	r2, r1, r2
 80010ca:	191c      	adds	r4, r3, r4
 80010cc:	4290      	cmp	r0, r2
 80010ce:	d302      	bcc.n	80010d6 <__aeabi_ddiv+0x30a>
 80010d0:	d116      	bne.n	8001100 <__aeabi_ddiv+0x334>
 80010d2:	42a5      	cmp	r5, r4
 80010d4:	d214      	bcs.n	8001100 <__aeabi_ddiv+0x334>
 80010d6:	465b      	mov	r3, fp
 80010d8:	9f00      	ldr	r7, [sp, #0]
 80010da:	3b01      	subs	r3, #1
 80010dc:	444d      	add	r5, r9
 80010de:	9305      	str	r3, [sp, #20]
 80010e0:	454d      	cmp	r5, r9
 80010e2:	419b      	sbcs	r3, r3
 80010e4:	46bc      	mov	ip, r7
 80010e6:	425b      	negs	r3, r3
 80010e8:	4463      	add	r3, ip
 80010ea:	18c0      	adds	r0, r0, r3
 80010ec:	4287      	cmp	r7, r0
 80010ee:	d300      	bcc.n	80010f2 <__aeabi_ddiv+0x326>
 80010f0:	e102      	b.n	80012f8 <__aeabi_ddiv+0x52c>
 80010f2:	4282      	cmp	r2, r0
 80010f4:	d900      	bls.n	80010f8 <__aeabi_ddiv+0x32c>
 80010f6:	e129      	b.n	800134c <__aeabi_ddiv+0x580>
 80010f8:	d100      	bne.n	80010fc <__aeabi_ddiv+0x330>
 80010fa:	e124      	b.n	8001346 <__aeabi_ddiv+0x57a>
 80010fc:	9b05      	ldr	r3, [sp, #20]
 80010fe:	469b      	mov	fp, r3
 8001100:	1b2c      	subs	r4, r5, r4
 8001102:	42a5      	cmp	r5, r4
 8001104:	41ad      	sbcs	r5, r5
 8001106:	9b00      	ldr	r3, [sp, #0]
 8001108:	1a80      	subs	r0, r0, r2
 800110a:	426d      	negs	r5, r5
 800110c:	1b40      	subs	r0, r0, r5
 800110e:	4283      	cmp	r3, r0
 8001110:	d100      	bne.n	8001114 <__aeabi_ddiv+0x348>
 8001112:	e10f      	b.n	8001334 <__aeabi_ddiv+0x568>
 8001114:	9902      	ldr	r1, [sp, #8]
 8001116:	f7ff f88d 	bl	8000234 <__aeabi_uidivmod>
 800111a:	9a03      	ldr	r2, [sp, #12]
 800111c:	040b      	lsls	r3, r1, #16
 800111e:	4342      	muls	r2, r0
 8001120:	0c21      	lsrs	r1, r4, #16
 8001122:	0005      	movs	r5, r0
 8001124:	4319      	orrs	r1, r3
 8001126:	428a      	cmp	r2, r1
 8001128:	d900      	bls.n	800112c <__aeabi_ddiv+0x360>
 800112a:	e0cb      	b.n	80012c4 <__aeabi_ddiv+0x4f8>
 800112c:	1a88      	subs	r0, r1, r2
 800112e:	9902      	ldr	r1, [sp, #8]
 8001130:	f7ff f880 	bl	8000234 <__aeabi_uidivmod>
 8001134:	9a03      	ldr	r2, [sp, #12]
 8001136:	0424      	lsls	r4, r4, #16
 8001138:	4342      	muls	r2, r0
 800113a:	0409      	lsls	r1, r1, #16
 800113c:	0c24      	lsrs	r4, r4, #16
 800113e:	0003      	movs	r3, r0
 8001140:	430c      	orrs	r4, r1
 8001142:	42a2      	cmp	r2, r4
 8001144:	d900      	bls.n	8001148 <__aeabi_ddiv+0x37c>
 8001146:	e0ca      	b.n	80012de <__aeabi_ddiv+0x512>
 8001148:	4641      	mov	r1, r8
 800114a:	1aa4      	subs	r4, r4, r2
 800114c:	042a      	lsls	r2, r5, #16
 800114e:	431a      	orrs	r2, r3
 8001150:	9f04      	ldr	r7, [sp, #16]
 8001152:	0413      	lsls	r3, r2, #16
 8001154:	0c1b      	lsrs	r3, r3, #16
 8001156:	4359      	muls	r1, r3
 8001158:	4640      	mov	r0, r8
 800115a:	437b      	muls	r3, r7
 800115c:	469c      	mov	ip, r3
 800115e:	0c15      	lsrs	r5, r2, #16
 8001160:	4368      	muls	r0, r5
 8001162:	0c0b      	lsrs	r3, r1, #16
 8001164:	4484      	add	ip, r0
 8001166:	4463      	add	r3, ip
 8001168:	437d      	muls	r5, r7
 800116a:	4298      	cmp	r0, r3
 800116c:	d903      	bls.n	8001176 <__aeabi_ddiv+0x3aa>
 800116e:	2080      	movs	r0, #128	@ 0x80
 8001170:	0240      	lsls	r0, r0, #9
 8001172:	4684      	mov	ip, r0
 8001174:	4465      	add	r5, ip
 8001176:	0c18      	lsrs	r0, r3, #16
 8001178:	0409      	lsls	r1, r1, #16
 800117a:	041b      	lsls	r3, r3, #16
 800117c:	0c09      	lsrs	r1, r1, #16
 800117e:	1940      	adds	r0, r0, r5
 8001180:	185b      	adds	r3, r3, r1
 8001182:	4284      	cmp	r4, r0
 8001184:	d327      	bcc.n	80011d6 <__aeabi_ddiv+0x40a>
 8001186:	d023      	beq.n	80011d0 <__aeabi_ddiv+0x404>
 8001188:	2301      	movs	r3, #1
 800118a:	0035      	movs	r5, r6
 800118c:	431a      	orrs	r2, r3
 800118e:	4b94      	ldr	r3, [pc, #592]	@ (80013e0 <__aeabi_ddiv+0x614>)
 8001190:	4453      	add	r3, sl
 8001192:	2b00      	cmp	r3, #0
 8001194:	dd60      	ble.n	8001258 <__aeabi_ddiv+0x48c>
 8001196:	0751      	lsls	r1, r2, #29
 8001198:	d000      	beq.n	800119c <__aeabi_ddiv+0x3d0>
 800119a:	e086      	b.n	80012aa <__aeabi_ddiv+0x4de>
 800119c:	002e      	movs	r6, r5
 800119e:	08d1      	lsrs	r1, r2, #3
 80011a0:	465a      	mov	r2, fp
 80011a2:	01d2      	lsls	r2, r2, #7
 80011a4:	d506      	bpl.n	80011b4 <__aeabi_ddiv+0x3e8>
 80011a6:	465a      	mov	r2, fp
 80011a8:	4b8e      	ldr	r3, [pc, #568]	@ (80013e4 <__aeabi_ddiv+0x618>)
 80011aa:	401a      	ands	r2, r3
 80011ac:	2380      	movs	r3, #128	@ 0x80
 80011ae:	4693      	mov	fp, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	4453      	add	r3, sl
 80011b4:	4a8c      	ldr	r2, [pc, #560]	@ (80013e8 <__aeabi_ddiv+0x61c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	dd00      	ble.n	80011bc <__aeabi_ddiv+0x3f0>
 80011ba:	e680      	b.n	8000ebe <__aeabi_ddiv+0xf2>
 80011bc:	465a      	mov	r2, fp
 80011be:	0752      	lsls	r2, r2, #29
 80011c0:	430a      	orrs	r2, r1
 80011c2:	4690      	mov	r8, r2
 80011c4:	465a      	mov	r2, fp
 80011c6:	055b      	lsls	r3, r3, #21
 80011c8:	0254      	lsls	r4, r2, #9
 80011ca:	0b24      	lsrs	r4, r4, #12
 80011cc:	0d5b      	lsrs	r3, r3, #21
 80011ce:	e669      	b.n	8000ea4 <__aeabi_ddiv+0xd8>
 80011d0:	0035      	movs	r5, r6
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0db      	beq.n	800118e <__aeabi_ddiv+0x3c2>
 80011d6:	9d00      	ldr	r5, [sp, #0]
 80011d8:	1e51      	subs	r1, r2, #1
 80011da:	46ac      	mov	ip, r5
 80011dc:	4464      	add	r4, ip
 80011de:	42ac      	cmp	r4, r5
 80011e0:	d200      	bcs.n	80011e4 <__aeabi_ddiv+0x418>
 80011e2:	e09e      	b.n	8001322 <__aeabi_ddiv+0x556>
 80011e4:	4284      	cmp	r4, r0
 80011e6:	d200      	bcs.n	80011ea <__aeabi_ddiv+0x41e>
 80011e8:	e0e1      	b.n	80013ae <__aeabi_ddiv+0x5e2>
 80011ea:	d100      	bne.n	80011ee <__aeabi_ddiv+0x422>
 80011ec:	e0ee      	b.n	80013cc <__aeabi_ddiv+0x600>
 80011ee:	000a      	movs	r2, r1
 80011f0:	e7ca      	b.n	8001188 <__aeabi_ddiv+0x3bc>
 80011f2:	4542      	cmp	r2, r8
 80011f4:	d900      	bls.n	80011f8 <__aeabi_ddiv+0x42c>
 80011f6:	e708      	b.n	800100a <__aeabi_ddiv+0x23e>
 80011f8:	464b      	mov	r3, r9
 80011fa:	07dc      	lsls	r4, r3, #31
 80011fc:	0858      	lsrs	r0, r3, #1
 80011fe:	4643      	mov	r3, r8
 8001200:	085b      	lsrs	r3, r3, #1
 8001202:	431c      	orrs	r4, r3
 8001204:	4643      	mov	r3, r8
 8001206:	07dd      	lsls	r5, r3, #31
 8001208:	e706      	b.n	8001018 <__aeabi_ddiv+0x24c>
 800120a:	f000 fe61 	bl	8001ed0 <__clzsi2>
 800120e:	2315      	movs	r3, #21
 8001210:	469c      	mov	ip, r3
 8001212:	4484      	add	ip, r0
 8001214:	0002      	movs	r2, r0
 8001216:	4663      	mov	r3, ip
 8001218:	3220      	adds	r2, #32
 800121a:	2b1c      	cmp	r3, #28
 800121c:	dc00      	bgt.n	8001220 <__aeabi_ddiv+0x454>
 800121e:	e692      	b.n	8000f46 <__aeabi_ddiv+0x17a>
 8001220:	0023      	movs	r3, r4
 8001222:	3808      	subs	r0, #8
 8001224:	4083      	lsls	r3, r0
 8001226:	4699      	mov	r9, r3
 8001228:	2300      	movs	r3, #0
 800122a:	4698      	mov	r8, r3
 800122c:	e69a      	b.n	8000f64 <__aeabi_ddiv+0x198>
 800122e:	f000 fe4f 	bl	8001ed0 <__clzsi2>
 8001232:	0002      	movs	r2, r0
 8001234:	0003      	movs	r3, r0
 8001236:	3215      	adds	r2, #21
 8001238:	3320      	adds	r3, #32
 800123a:	2a1c      	cmp	r2, #28
 800123c:	dc00      	bgt.n	8001240 <__aeabi_ddiv+0x474>
 800123e:	e65f      	b.n	8000f00 <__aeabi_ddiv+0x134>
 8001240:	9900      	ldr	r1, [sp, #0]
 8001242:	3808      	subs	r0, #8
 8001244:	4081      	lsls	r1, r0
 8001246:	2200      	movs	r2, #0
 8001248:	468b      	mov	fp, r1
 800124a:	e666      	b.n	8000f1a <__aeabi_ddiv+0x14e>
 800124c:	2200      	movs	r2, #0
 800124e:	002e      	movs	r6, r5
 8001250:	2400      	movs	r4, #0
 8001252:	4690      	mov	r8, r2
 8001254:	4b65      	ldr	r3, [pc, #404]	@ (80013ec <__aeabi_ddiv+0x620>)
 8001256:	e625      	b.n	8000ea4 <__aeabi_ddiv+0xd8>
 8001258:	002e      	movs	r6, r5
 800125a:	2101      	movs	r1, #1
 800125c:	1ac9      	subs	r1, r1, r3
 800125e:	2938      	cmp	r1, #56	@ 0x38
 8001260:	dd00      	ble.n	8001264 <__aeabi_ddiv+0x498>
 8001262:	e61b      	b.n	8000e9c <__aeabi_ddiv+0xd0>
 8001264:	291f      	cmp	r1, #31
 8001266:	dc7e      	bgt.n	8001366 <__aeabi_ddiv+0x59a>
 8001268:	4861      	ldr	r0, [pc, #388]	@ (80013f0 <__aeabi_ddiv+0x624>)
 800126a:	0014      	movs	r4, r2
 800126c:	4450      	add	r0, sl
 800126e:	465b      	mov	r3, fp
 8001270:	4082      	lsls	r2, r0
 8001272:	4083      	lsls	r3, r0
 8001274:	40cc      	lsrs	r4, r1
 8001276:	1e50      	subs	r0, r2, #1
 8001278:	4182      	sbcs	r2, r0
 800127a:	4323      	orrs	r3, r4
 800127c:	431a      	orrs	r2, r3
 800127e:	465b      	mov	r3, fp
 8001280:	40cb      	lsrs	r3, r1
 8001282:	0751      	lsls	r1, r2, #29
 8001284:	d009      	beq.n	800129a <__aeabi_ddiv+0x4ce>
 8001286:	210f      	movs	r1, #15
 8001288:	4011      	ands	r1, r2
 800128a:	2904      	cmp	r1, #4
 800128c:	d005      	beq.n	800129a <__aeabi_ddiv+0x4ce>
 800128e:	1d11      	adds	r1, r2, #4
 8001290:	4291      	cmp	r1, r2
 8001292:	4192      	sbcs	r2, r2
 8001294:	4252      	negs	r2, r2
 8001296:	189b      	adds	r3, r3, r2
 8001298:	000a      	movs	r2, r1
 800129a:	0219      	lsls	r1, r3, #8
 800129c:	d400      	bmi.n	80012a0 <__aeabi_ddiv+0x4d4>
 800129e:	e09b      	b.n	80013d8 <__aeabi_ddiv+0x60c>
 80012a0:	2200      	movs	r2, #0
 80012a2:	2301      	movs	r3, #1
 80012a4:	2400      	movs	r4, #0
 80012a6:	4690      	mov	r8, r2
 80012a8:	e5fc      	b.n	8000ea4 <__aeabi_ddiv+0xd8>
 80012aa:	210f      	movs	r1, #15
 80012ac:	4011      	ands	r1, r2
 80012ae:	2904      	cmp	r1, #4
 80012b0:	d100      	bne.n	80012b4 <__aeabi_ddiv+0x4e8>
 80012b2:	e773      	b.n	800119c <__aeabi_ddiv+0x3d0>
 80012b4:	1d11      	adds	r1, r2, #4
 80012b6:	4291      	cmp	r1, r2
 80012b8:	4192      	sbcs	r2, r2
 80012ba:	4252      	negs	r2, r2
 80012bc:	002e      	movs	r6, r5
 80012be:	08c9      	lsrs	r1, r1, #3
 80012c0:	4493      	add	fp, r2
 80012c2:	e76d      	b.n	80011a0 <__aeabi_ddiv+0x3d4>
 80012c4:	9b00      	ldr	r3, [sp, #0]
 80012c6:	3d01      	subs	r5, #1
 80012c8:	469c      	mov	ip, r3
 80012ca:	4461      	add	r1, ip
 80012cc:	428b      	cmp	r3, r1
 80012ce:	d900      	bls.n	80012d2 <__aeabi_ddiv+0x506>
 80012d0:	e72c      	b.n	800112c <__aeabi_ddiv+0x360>
 80012d2:	428a      	cmp	r2, r1
 80012d4:	d800      	bhi.n	80012d8 <__aeabi_ddiv+0x50c>
 80012d6:	e729      	b.n	800112c <__aeabi_ddiv+0x360>
 80012d8:	1e85      	subs	r5, r0, #2
 80012da:	4461      	add	r1, ip
 80012dc:	e726      	b.n	800112c <__aeabi_ddiv+0x360>
 80012de:	9900      	ldr	r1, [sp, #0]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	468c      	mov	ip, r1
 80012e4:	4464      	add	r4, ip
 80012e6:	42a1      	cmp	r1, r4
 80012e8:	d900      	bls.n	80012ec <__aeabi_ddiv+0x520>
 80012ea:	e72d      	b.n	8001148 <__aeabi_ddiv+0x37c>
 80012ec:	42a2      	cmp	r2, r4
 80012ee:	d800      	bhi.n	80012f2 <__aeabi_ddiv+0x526>
 80012f0:	e72a      	b.n	8001148 <__aeabi_ddiv+0x37c>
 80012f2:	1e83      	subs	r3, r0, #2
 80012f4:	4464      	add	r4, ip
 80012f6:	e727      	b.n	8001148 <__aeabi_ddiv+0x37c>
 80012f8:	4287      	cmp	r7, r0
 80012fa:	d000      	beq.n	80012fe <__aeabi_ddiv+0x532>
 80012fc:	e6fe      	b.n	80010fc <__aeabi_ddiv+0x330>
 80012fe:	45a9      	cmp	r9, r5
 8001300:	d900      	bls.n	8001304 <__aeabi_ddiv+0x538>
 8001302:	e6fb      	b.n	80010fc <__aeabi_ddiv+0x330>
 8001304:	e6f5      	b.n	80010f2 <__aeabi_ddiv+0x326>
 8001306:	42a2      	cmp	r2, r4
 8001308:	d800      	bhi.n	800130c <__aeabi_ddiv+0x540>
 800130a:	e6b9      	b.n	8001080 <__aeabi_ddiv+0x2b4>
 800130c:	1e83      	subs	r3, r0, #2
 800130e:	4464      	add	r4, ip
 8001310:	e6b6      	b.n	8001080 <__aeabi_ddiv+0x2b4>
 8001312:	428a      	cmp	r2, r1
 8001314:	d800      	bhi.n	8001318 <__aeabi_ddiv+0x54c>
 8001316:	e69f      	b.n	8001058 <__aeabi_ddiv+0x28c>
 8001318:	46bc      	mov	ip, r7
 800131a:	1e83      	subs	r3, r0, #2
 800131c:	4698      	mov	r8, r3
 800131e:	4461      	add	r1, ip
 8001320:	e69a      	b.n	8001058 <__aeabi_ddiv+0x28c>
 8001322:	000a      	movs	r2, r1
 8001324:	4284      	cmp	r4, r0
 8001326:	d000      	beq.n	800132a <__aeabi_ddiv+0x55e>
 8001328:	e72e      	b.n	8001188 <__aeabi_ddiv+0x3bc>
 800132a:	454b      	cmp	r3, r9
 800132c:	d000      	beq.n	8001330 <__aeabi_ddiv+0x564>
 800132e:	e72b      	b.n	8001188 <__aeabi_ddiv+0x3bc>
 8001330:	0035      	movs	r5, r6
 8001332:	e72c      	b.n	800118e <__aeabi_ddiv+0x3c2>
 8001334:	4b2a      	ldr	r3, [pc, #168]	@ (80013e0 <__aeabi_ddiv+0x614>)
 8001336:	4a2f      	ldr	r2, [pc, #188]	@ (80013f4 <__aeabi_ddiv+0x628>)
 8001338:	4453      	add	r3, sl
 800133a:	4592      	cmp	sl, r2
 800133c:	db43      	blt.n	80013c6 <__aeabi_ddiv+0x5fa>
 800133e:	2201      	movs	r2, #1
 8001340:	2100      	movs	r1, #0
 8001342:	4493      	add	fp, r2
 8001344:	e72c      	b.n	80011a0 <__aeabi_ddiv+0x3d4>
 8001346:	42ac      	cmp	r4, r5
 8001348:	d800      	bhi.n	800134c <__aeabi_ddiv+0x580>
 800134a:	e6d7      	b.n	80010fc <__aeabi_ddiv+0x330>
 800134c:	2302      	movs	r3, #2
 800134e:	425b      	negs	r3, r3
 8001350:	469c      	mov	ip, r3
 8001352:	9900      	ldr	r1, [sp, #0]
 8001354:	444d      	add	r5, r9
 8001356:	454d      	cmp	r5, r9
 8001358:	419b      	sbcs	r3, r3
 800135a:	44e3      	add	fp, ip
 800135c:	468c      	mov	ip, r1
 800135e:	425b      	negs	r3, r3
 8001360:	4463      	add	r3, ip
 8001362:	18c0      	adds	r0, r0, r3
 8001364:	e6cc      	b.n	8001100 <__aeabi_ddiv+0x334>
 8001366:	201f      	movs	r0, #31
 8001368:	4240      	negs	r0, r0
 800136a:	1ac3      	subs	r3, r0, r3
 800136c:	4658      	mov	r0, fp
 800136e:	40d8      	lsrs	r0, r3
 8001370:	2920      	cmp	r1, #32
 8001372:	d004      	beq.n	800137e <__aeabi_ddiv+0x5b2>
 8001374:	4659      	mov	r1, fp
 8001376:	4b20      	ldr	r3, [pc, #128]	@ (80013f8 <__aeabi_ddiv+0x62c>)
 8001378:	4453      	add	r3, sl
 800137a:	4099      	lsls	r1, r3
 800137c:	430a      	orrs	r2, r1
 800137e:	1e53      	subs	r3, r2, #1
 8001380:	419a      	sbcs	r2, r3
 8001382:	2307      	movs	r3, #7
 8001384:	0019      	movs	r1, r3
 8001386:	4302      	orrs	r2, r0
 8001388:	2400      	movs	r4, #0
 800138a:	4011      	ands	r1, r2
 800138c:	4213      	tst	r3, r2
 800138e:	d009      	beq.n	80013a4 <__aeabi_ddiv+0x5d8>
 8001390:	3308      	adds	r3, #8
 8001392:	4013      	ands	r3, r2
 8001394:	2b04      	cmp	r3, #4
 8001396:	d01d      	beq.n	80013d4 <__aeabi_ddiv+0x608>
 8001398:	1d13      	adds	r3, r2, #4
 800139a:	4293      	cmp	r3, r2
 800139c:	4189      	sbcs	r1, r1
 800139e:	001a      	movs	r2, r3
 80013a0:	4249      	negs	r1, r1
 80013a2:	0749      	lsls	r1, r1, #29
 80013a4:	08d2      	lsrs	r2, r2, #3
 80013a6:	430a      	orrs	r2, r1
 80013a8:	4690      	mov	r8, r2
 80013aa:	2300      	movs	r3, #0
 80013ac:	e57a      	b.n	8000ea4 <__aeabi_ddiv+0xd8>
 80013ae:	4649      	mov	r1, r9
 80013b0:	9f00      	ldr	r7, [sp, #0]
 80013b2:	004d      	lsls	r5, r1, #1
 80013b4:	454d      	cmp	r5, r9
 80013b6:	4189      	sbcs	r1, r1
 80013b8:	46bc      	mov	ip, r7
 80013ba:	4249      	negs	r1, r1
 80013bc:	4461      	add	r1, ip
 80013be:	46a9      	mov	r9, r5
 80013c0:	3a02      	subs	r2, #2
 80013c2:	1864      	adds	r4, r4, r1
 80013c4:	e7ae      	b.n	8001324 <__aeabi_ddiv+0x558>
 80013c6:	2201      	movs	r2, #1
 80013c8:	4252      	negs	r2, r2
 80013ca:	e746      	b.n	800125a <__aeabi_ddiv+0x48e>
 80013cc:	4599      	cmp	r9, r3
 80013ce:	d3ee      	bcc.n	80013ae <__aeabi_ddiv+0x5e2>
 80013d0:	000a      	movs	r2, r1
 80013d2:	e7aa      	b.n	800132a <__aeabi_ddiv+0x55e>
 80013d4:	2100      	movs	r1, #0
 80013d6:	e7e5      	b.n	80013a4 <__aeabi_ddiv+0x5d8>
 80013d8:	0759      	lsls	r1, r3, #29
 80013da:	025b      	lsls	r3, r3, #9
 80013dc:	0b1c      	lsrs	r4, r3, #12
 80013de:	e7e1      	b.n	80013a4 <__aeabi_ddiv+0x5d8>
 80013e0:	000003ff 	.word	0x000003ff
 80013e4:	feffffff 	.word	0xfeffffff
 80013e8:	000007fe 	.word	0x000007fe
 80013ec:	000007ff 	.word	0x000007ff
 80013f0:	0000041e 	.word	0x0000041e
 80013f4:	fffffc02 	.word	0xfffffc02
 80013f8:	0000043e 	.word	0x0000043e

080013fc <__eqdf2>:
 80013fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fe:	4657      	mov	r7, sl
 8001400:	46de      	mov	lr, fp
 8001402:	464e      	mov	r6, r9
 8001404:	4645      	mov	r5, r8
 8001406:	b5e0      	push	{r5, r6, r7, lr}
 8001408:	000d      	movs	r5, r1
 800140a:	0004      	movs	r4, r0
 800140c:	0fe8      	lsrs	r0, r5, #31
 800140e:	4683      	mov	fp, r0
 8001410:	0309      	lsls	r1, r1, #12
 8001412:	0fd8      	lsrs	r0, r3, #31
 8001414:	0b09      	lsrs	r1, r1, #12
 8001416:	4682      	mov	sl, r0
 8001418:	4819      	ldr	r0, [pc, #100]	@ (8001480 <__eqdf2+0x84>)
 800141a:	468c      	mov	ip, r1
 800141c:	031f      	lsls	r7, r3, #12
 800141e:	0069      	lsls	r1, r5, #1
 8001420:	005e      	lsls	r6, r3, #1
 8001422:	0d49      	lsrs	r1, r1, #21
 8001424:	0b3f      	lsrs	r7, r7, #12
 8001426:	0d76      	lsrs	r6, r6, #21
 8001428:	4281      	cmp	r1, r0
 800142a:	d018      	beq.n	800145e <__eqdf2+0x62>
 800142c:	4286      	cmp	r6, r0
 800142e:	d00f      	beq.n	8001450 <__eqdf2+0x54>
 8001430:	2001      	movs	r0, #1
 8001432:	42b1      	cmp	r1, r6
 8001434:	d10d      	bne.n	8001452 <__eqdf2+0x56>
 8001436:	45bc      	cmp	ip, r7
 8001438:	d10b      	bne.n	8001452 <__eqdf2+0x56>
 800143a:	4294      	cmp	r4, r2
 800143c:	d109      	bne.n	8001452 <__eqdf2+0x56>
 800143e:	45d3      	cmp	fp, sl
 8001440:	d01c      	beq.n	800147c <__eqdf2+0x80>
 8001442:	2900      	cmp	r1, #0
 8001444:	d105      	bne.n	8001452 <__eqdf2+0x56>
 8001446:	4660      	mov	r0, ip
 8001448:	4320      	orrs	r0, r4
 800144a:	1e43      	subs	r3, r0, #1
 800144c:	4198      	sbcs	r0, r3
 800144e:	e000      	b.n	8001452 <__eqdf2+0x56>
 8001450:	2001      	movs	r0, #1
 8001452:	bcf0      	pop	{r4, r5, r6, r7}
 8001454:	46bb      	mov	fp, r7
 8001456:	46b2      	mov	sl, r6
 8001458:	46a9      	mov	r9, r5
 800145a:	46a0      	mov	r8, r4
 800145c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145e:	2001      	movs	r0, #1
 8001460:	428e      	cmp	r6, r1
 8001462:	d1f6      	bne.n	8001452 <__eqdf2+0x56>
 8001464:	4661      	mov	r1, ip
 8001466:	4339      	orrs	r1, r7
 8001468:	000f      	movs	r7, r1
 800146a:	4317      	orrs	r7, r2
 800146c:	4327      	orrs	r7, r4
 800146e:	d1f0      	bne.n	8001452 <__eqdf2+0x56>
 8001470:	465b      	mov	r3, fp
 8001472:	4652      	mov	r2, sl
 8001474:	1a98      	subs	r0, r3, r2
 8001476:	1e43      	subs	r3, r0, #1
 8001478:	4198      	sbcs	r0, r3
 800147a:	e7ea      	b.n	8001452 <__eqdf2+0x56>
 800147c:	2000      	movs	r0, #0
 800147e:	e7e8      	b.n	8001452 <__eqdf2+0x56>
 8001480:	000007ff 	.word	0x000007ff

08001484 <__gedf2>:
 8001484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001486:	4657      	mov	r7, sl
 8001488:	464e      	mov	r6, r9
 800148a:	4645      	mov	r5, r8
 800148c:	46de      	mov	lr, fp
 800148e:	b5e0      	push	{r5, r6, r7, lr}
 8001490:	000d      	movs	r5, r1
 8001492:	030e      	lsls	r6, r1, #12
 8001494:	0049      	lsls	r1, r1, #1
 8001496:	0d49      	lsrs	r1, r1, #21
 8001498:	468a      	mov	sl, r1
 800149a:	0fdf      	lsrs	r7, r3, #31
 800149c:	0fe9      	lsrs	r1, r5, #31
 800149e:	46bc      	mov	ip, r7
 80014a0:	b083      	sub	sp, #12
 80014a2:	4f2f      	ldr	r7, [pc, #188]	@ (8001560 <__gedf2+0xdc>)
 80014a4:	0004      	movs	r4, r0
 80014a6:	4680      	mov	r8, r0
 80014a8:	9101      	str	r1, [sp, #4]
 80014aa:	0058      	lsls	r0, r3, #1
 80014ac:	0319      	lsls	r1, r3, #12
 80014ae:	4691      	mov	r9, r2
 80014b0:	0b36      	lsrs	r6, r6, #12
 80014b2:	0b09      	lsrs	r1, r1, #12
 80014b4:	0d40      	lsrs	r0, r0, #21
 80014b6:	45ba      	cmp	sl, r7
 80014b8:	d01d      	beq.n	80014f6 <__gedf2+0x72>
 80014ba:	42b8      	cmp	r0, r7
 80014bc:	d00d      	beq.n	80014da <__gedf2+0x56>
 80014be:	4657      	mov	r7, sl
 80014c0:	2f00      	cmp	r7, #0
 80014c2:	d12a      	bne.n	800151a <__gedf2+0x96>
 80014c4:	4334      	orrs	r4, r6
 80014c6:	2800      	cmp	r0, #0
 80014c8:	d124      	bne.n	8001514 <__gedf2+0x90>
 80014ca:	430a      	orrs	r2, r1
 80014cc:	d036      	beq.n	800153c <__gedf2+0xb8>
 80014ce:	2c00      	cmp	r4, #0
 80014d0:	d141      	bne.n	8001556 <__gedf2+0xd2>
 80014d2:	4663      	mov	r3, ip
 80014d4:	0058      	lsls	r0, r3, #1
 80014d6:	3801      	subs	r0, #1
 80014d8:	e015      	b.n	8001506 <__gedf2+0x82>
 80014da:	4311      	orrs	r1, r2
 80014dc:	d138      	bne.n	8001550 <__gedf2+0xcc>
 80014de:	4653      	mov	r3, sl
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <__gedf2+0x64>
 80014e4:	4326      	orrs	r6, r4
 80014e6:	d0f4      	beq.n	80014d2 <__gedf2+0x4e>
 80014e8:	9b01      	ldr	r3, [sp, #4]
 80014ea:	4563      	cmp	r3, ip
 80014ec:	d107      	bne.n	80014fe <__gedf2+0x7a>
 80014ee:	9b01      	ldr	r3, [sp, #4]
 80014f0:	0058      	lsls	r0, r3, #1
 80014f2:	3801      	subs	r0, #1
 80014f4:	e007      	b.n	8001506 <__gedf2+0x82>
 80014f6:	4326      	orrs	r6, r4
 80014f8:	d12a      	bne.n	8001550 <__gedf2+0xcc>
 80014fa:	4550      	cmp	r0, sl
 80014fc:	d021      	beq.n	8001542 <__gedf2+0xbe>
 80014fe:	2001      	movs	r0, #1
 8001500:	9b01      	ldr	r3, [sp, #4]
 8001502:	425f      	negs	r7, r3
 8001504:	4338      	orrs	r0, r7
 8001506:	b003      	add	sp, #12
 8001508:	bcf0      	pop	{r4, r5, r6, r7}
 800150a:	46bb      	mov	fp, r7
 800150c:	46b2      	mov	sl, r6
 800150e:	46a9      	mov	r9, r5
 8001510:	46a0      	mov	r8, r4
 8001512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001514:	2c00      	cmp	r4, #0
 8001516:	d0dc      	beq.n	80014d2 <__gedf2+0x4e>
 8001518:	e7e6      	b.n	80014e8 <__gedf2+0x64>
 800151a:	2800      	cmp	r0, #0
 800151c:	d0ef      	beq.n	80014fe <__gedf2+0x7a>
 800151e:	9b01      	ldr	r3, [sp, #4]
 8001520:	4563      	cmp	r3, ip
 8001522:	d1ec      	bne.n	80014fe <__gedf2+0x7a>
 8001524:	4582      	cmp	sl, r0
 8001526:	dcea      	bgt.n	80014fe <__gedf2+0x7a>
 8001528:	dbe1      	blt.n	80014ee <__gedf2+0x6a>
 800152a:	428e      	cmp	r6, r1
 800152c:	d8e7      	bhi.n	80014fe <__gedf2+0x7a>
 800152e:	d1de      	bne.n	80014ee <__gedf2+0x6a>
 8001530:	45c8      	cmp	r8, r9
 8001532:	d8e4      	bhi.n	80014fe <__gedf2+0x7a>
 8001534:	2000      	movs	r0, #0
 8001536:	45c8      	cmp	r8, r9
 8001538:	d2e5      	bcs.n	8001506 <__gedf2+0x82>
 800153a:	e7d8      	b.n	80014ee <__gedf2+0x6a>
 800153c:	2c00      	cmp	r4, #0
 800153e:	d0e2      	beq.n	8001506 <__gedf2+0x82>
 8001540:	e7dd      	b.n	80014fe <__gedf2+0x7a>
 8001542:	4311      	orrs	r1, r2
 8001544:	d104      	bne.n	8001550 <__gedf2+0xcc>
 8001546:	9b01      	ldr	r3, [sp, #4]
 8001548:	4563      	cmp	r3, ip
 800154a:	d1d8      	bne.n	80014fe <__gedf2+0x7a>
 800154c:	2000      	movs	r0, #0
 800154e:	e7da      	b.n	8001506 <__gedf2+0x82>
 8001550:	2002      	movs	r0, #2
 8001552:	4240      	negs	r0, r0
 8001554:	e7d7      	b.n	8001506 <__gedf2+0x82>
 8001556:	9b01      	ldr	r3, [sp, #4]
 8001558:	4563      	cmp	r3, ip
 800155a:	d0e6      	beq.n	800152a <__gedf2+0xa6>
 800155c:	e7cf      	b.n	80014fe <__gedf2+0x7a>
 800155e:	46c0      	nop			@ (mov r8, r8)
 8001560:	000007ff 	.word	0x000007ff

08001564 <__ledf2>:
 8001564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001566:	4657      	mov	r7, sl
 8001568:	464e      	mov	r6, r9
 800156a:	4645      	mov	r5, r8
 800156c:	46de      	mov	lr, fp
 800156e:	b5e0      	push	{r5, r6, r7, lr}
 8001570:	000d      	movs	r5, r1
 8001572:	030e      	lsls	r6, r1, #12
 8001574:	0049      	lsls	r1, r1, #1
 8001576:	0d49      	lsrs	r1, r1, #21
 8001578:	468a      	mov	sl, r1
 800157a:	0fdf      	lsrs	r7, r3, #31
 800157c:	0fe9      	lsrs	r1, r5, #31
 800157e:	46bc      	mov	ip, r7
 8001580:	b083      	sub	sp, #12
 8001582:	4f2e      	ldr	r7, [pc, #184]	@ (800163c <__ledf2+0xd8>)
 8001584:	0004      	movs	r4, r0
 8001586:	4680      	mov	r8, r0
 8001588:	9101      	str	r1, [sp, #4]
 800158a:	0058      	lsls	r0, r3, #1
 800158c:	0319      	lsls	r1, r3, #12
 800158e:	4691      	mov	r9, r2
 8001590:	0b36      	lsrs	r6, r6, #12
 8001592:	0b09      	lsrs	r1, r1, #12
 8001594:	0d40      	lsrs	r0, r0, #21
 8001596:	45ba      	cmp	sl, r7
 8001598:	d01e      	beq.n	80015d8 <__ledf2+0x74>
 800159a:	42b8      	cmp	r0, r7
 800159c:	d00d      	beq.n	80015ba <__ledf2+0x56>
 800159e:	4657      	mov	r7, sl
 80015a0:	2f00      	cmp	r7, #0
 80015a2:	d127      	bne.n	80015f4 <__ledf2+0x90>
 80015a4:	4334      	orrs	r4, r6
 80015a6:	2800      	cmp	r0, #0
 80015a8:	d133      	bne.n	8001612 <__ledf2+0xae>
 80015aa:	430a      	orrs	r2, r1
 80015ac:	d034      	beq.n	8001618 <__ledf2+0xb4>
 80015ae:	2c00      	cmp	r4, #0
 80015b0:	d140      	bne.n	8001634 <__ledf2+0xd0>
 80015b2:	4663      	mov	r3, ip
 80015b4:	0058      	lsls	r0, r3, #1
 80015b6:	3801      	subs	r0, #1
 80015b8:	e015      	b.n	80015e6 <__ledf2+0x82>
 80015ba:	4311      	orrs	r1, r2
 80015bc:	d112      	bne.n	80015e4 <__ledf2+0x80>
 80015be:	4653      	mov	r3, sl
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <__ledf2+0x64>
 80015c4:	4326      	orrs	r6, r4
 80015c6:	d0f4      	beq.n	80015b2 <__ledf2+0x4e>
 80015c8:	9b01      	ldr	r3, [sp, #4]
 80015ca:	4563      	cmp	r3, ip
 80015cc:	d01d      	beq.n	800160a <__ledf2+0xa6>
 80015ce:	2001      	movs	r0, #1
 80015d0:	9b01      	ldr	r3, [sp, #4]
 80015d2:	425f      	negs	r7, r3
 80015d4:	4338      	orrs	r0, r7
 80015d6:	e006      	b.n	80015e6 <__ledf2+0x82>
 80015d8:	4326      	orrs	r6, r4
 80015da:	d103      	bne.n	80015e4 <__ledf2+0x80>
 80015dc:	4550      	cmp	r0, sl
 80015de:	d1f6      	bne.n	80015ce <__ledf2+0x6a>
 80015e0:	4311      	orrs	r1, r2
 80015e2:	d01c      	beq.n	800161e <__ledf2+0xba>
 80015e4:	2002      	movs	r0, #2
 80015e6:	b003      	add	sp, #12
 80015e8:	bcf0      	pop	{r4, r5, r6, r7}
 80015ea:	46bb      	mov	fp, r7
 80015ec:	46b2      	mov	sl, r6
 80015ee:	46a9      	mov	r9, r5
 80015f0:	46a0      	mov	r8, r4
 80015f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015f4:	2800      	cmp	r0, #0
 80015f6:	d0ea      	beq.n	80015ce <__ledf2+0x6a>
 80015f8:	9b01      	ldr	r3, [sp, #4]
 80015fa:	4563      	cmp	r3, ip
 80015fc:	d1e7      	bne.n	80015ce <__ledf2+0x6a>
 80015fe:	4582      	cmp	sl, r0
 8001600:	dce5      	bgt.n	80015ce <__ledf2+0x6a>
 8001602:	db02      	blt.n	800160a <__ledf2+0xa6>
 8001604:	428e      	cmp	r6, r1
 8001606:	d8e2      	bhi.n	80015ce <__ledf2+0x6a>
 8001608:	d00e      	beq.n	8001628 <__ledf2+0xc4>
 800160a:	9b01      	ldr	r3, [sp, #4]
 800160c:	0058      	lsls	r0, r3, #1
 800160e:	3801      	subs	r0, #1
 8001610:	e7e9      	b.n	80015e6 <__ledf2+0x82>
 8001612:	2c00      	cmp	r4, #0
 8001614:	d0cd      	beq.n	80015b2 <__ledf2+0x4e>
 8001616:	e7d7      	b.n	80015c8 <__ledf2+0x64>
 8001618:	2c00      	cmp	r4, #0
 800161a:	d0e4      	beq.n	80015e6 <__ledf2+0x82>
 800161c:	e7d7      	b.n	80015ce <__ledf2+0x6a>
 800161e:	9b01      	ldr	r3, [sp, #4]
 8001620:	2000      	movs	r0, #0
 8001622:	4563      	cmp	r3, ip
 8001624:	d0df      	beq.n	80015e6 <__ledf2+0x82>
 8001626:	e7d2      	b.n	80015ce <__ledf2+0x6a>
 8001628:	45c8      	cmp	r8, r9
 800162a:	d8d0      	bhi.n	80015ce <__ledf2+0x6a>
 800162c:	2000      	movs	r0, #0
 800162e:	45c8      	cmp	r8, r9
 8001630:	d2d9      	bcs.n	80015e6 <__ledf2+0x82>
 8001632:	e7ea      	b.n	800160a <__ledf2+0xa6>
 8001634:	9b01      	ldr	r3, [sp, #4]
 8001636:	4563      	cmp	r3, ip
 8001638:	d0e4      	beq.n	8001604 <__ledf2+0xa0>
 800163a:	e7c8      	b.n	80015ce <__ledf2+0x6a>
 800163c:	000007ff 	.word	0x000007ff

08001640 <__aeabi_dmul>:
 8001640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001642:	4657      	mov	r7, sl
 8001644:	464e      	mov	r6, r9
 8001646:	46de      	mov	lr, fp
 8001648:	4645      	mov	r5, r8
 800164a:	b5e0      	push	{r5, r6, r7, lr}
 800164c:	001f      	movs	r7, r3
 800164e:	030b      	lsls	r3, r1, #12
 8001650:	0b1b      	lsrs	r3, r3, #12
 8001652:	0016      	movs	r6, r2
 8001654:	469a      	mov	sl, r3
 8001656:	0fca      	lsrs	r2, r1, #31
 8001658:	004b      	lsls	r3, r1, #1
 800165a:	0004      	movs	r4, r0
 800165c:	4691      	mov	r9, r2
 800165e:	b085      	sub	sp, #20
 8001660:	0d5b      	lsrs	r3, r3, #21
 8001662:	d100      	bne.n	8001666 <__aeabi_dmul+0x26>
 8001664:	e1cf      	b.n	8001a06 <__aeabi_dmul+0x3c6>
 8001666:	4acd      	ldr	r2, [pc, #820]	@ (800199c <__aeabi_dmul+0x35c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d055      	beq.n	8001718 <__aeabi_dmul+0xd8>
 800166c:	4651      	mov	r1, sl
 800166e:	0f42      	lsrs	r2, r0, #29
 8001670:	00c9      	lsls	r1, r1, #3
 8001672:	430a      	orrs	r2, r1
 8001674:	2180      	movs	r1, #128	@ 0x80
 8001676:	0409      	lsls	r1, r1, #16
 8001678:	4311      	orrs	r1, r2
 800167a:	00c2      	lsls	r2, r0, #3
 800167c:	4690      	mov	r8, r2
 800167e:	4ac8      	ldr	r2, [pc, #800]	@ (80019a0 <__aeabi_dmul+0x360>)
 8001680:	468a      	mov	sl, r1
 8001682:	4693      	mov	fp, r2
 8001684:	449b      	add	fp, r3
 8001686:	2300      	movs	r3, #0
 8001688:	2500      	movs	r5, #0
 800168a:	9302      	str	r3, [sp, #8]
 800168c:	033c      	lsls	r4, r7, #12
 800168e:	007b      	lsls	r3, r7, #1
 8001690:	0ffa      	lsrs	r2, r7, #31
 8001692:	9601      	str	r6, [sp, #4]
 8001694:	0b24      	lsrs	r4, r4, #12
 8001696:	0d5b      	lsrs	r3, r3, #21
 8001698:	9200      	str	r2, [sp, #0]
 800169a:	d100      	bne.n	800169e <__aeabi_dmul+0x5e>
 800169c:	e188      	b.n	80019b0 <__aeabi_dmul+0x370>
 800169e:	4abf      	ldr	r2, [pc, #764]	@ (800199c <__aeabi_dmul+0x35c>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d100      	bne.n	80016a6 <__aeabi_dmul+0x66>
 80016a4:	e092      	b.n	80017cc <__aeabi_dmul+0x18c>
 80016a6:	4abe      	ldr	r2, [pc, #760]	@ (80019a0 <__aeabi_dmul+0x360>)
 80016a8:	4694      	mov	ip, r2
 80016aa:	4463      	add	r3, ip
 80016ac:	449b      	add	fp, r3
 80016ae:	2d0a      	cmp	r5, #10
 80016b0:	dc42      	bgt.n	8001738 <__aeabi_dmul+0xf8>
 80016b2:	00e4      	lsls	r4, r4, #3
 80016b4:	0f73      	lsrs	r3, r6, #29
 80016b6:	4323      	orrs	r3, r4
 80016b8:	2480      	movs	r4, #128	@ 0x80
 80016ba:	4649      	mov	r1, r9
 80016bc:	0424      	lsls	r4, r4, #16
 80016be:	431c      	orrs	r4, r3
 80016c0:	00f3      	lsls	r3, r6, #3
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	9b00      	ldr	r3, [sp, #0]
 80016c6:	2000      	movs	r0, #0
 80016c8:	4059      	eors	r1, r3
 80016ca:	b2cb      	uxtb	r3, r1
 80016cc:	9303      	str	r3, [sp, #12]
 80016ce:	2d02      	cmp	r5, #2
 80016d0:	dc00      	bgt.n	80016d4 <__aeabi_dmul+0x94>
 80016d2:	e094      	b.n	80017fe <__aeabi_dmul+0x1be>
 80016d4:	2301      	movs	r3, #1
 80016d6:	40ab      	lsls	r3, r5
 80016d8:	001d      	movs	r5, r3
 80016da:	23a6      	movs	r3, #166	@ 0xa6
 80016dc:	002a      	movs	r2, r5
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	401a      	ands	r2, r3
 80016e2:	421d      	tst	r5, r3
 80016e4:	d000      	beq.n	80016e8 <__aeabi_dmul+0xa8>
 80016e6:	e229      	b.n	8001b3c <__aeabi_dmul+0x4fc>
 80016e8:	2390      	movs	r3, #144	@ 0x90
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	421d      	tst	r5, r3
 80016ee:	d100      	bne.n	80016f2 <__aeabi_dmul+0xb2>
 80016f0:	e24d      	b.n	8001b8e <__aeabi_dmul+0x54e>
 80016f2:	2300      	movs	r3, #0
 80016f4:	2480      	movs	r4, #128	@ 0x80
 80016f6:	4699      	mov	r9, r3
 80016f8:	0324      	lsls	r4, r4, #12
 80016fa:	4ba8      	ldr	r3, [pc, #672]	@ (800199c <__aeabi_dmul+0x35c>)
 80016fc:	0010      	movs	r0, r2
 80016fe:	464a      	mov	r2, r9
 8001700:	051b      	lsls	r3, r3, #20
 8001702:	4323      	orrs	r3, r4
 8001704:	07d2      	lsls	r2, r2, #31
 8001706:	4313      	orrs	r3, r2
 8001708:	0019      	movs	r1, r3
 800170a:	b005      	add	sp, #20
 800170c:	bcf0      	pop	{r4, r5, r6, r7}
 800170e:	46bb      	mov	fp, r7
 8001710:	46b2      	mov	sl, r6
 8001712:	46a9      	mov	r9, r5
 8001714:	46a0      	mov	r8, r4
 8001716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001718:	4652      	mov	r2, sl
 800171a:	4302      	orrs	r2, r0
 800171c:	4690      	mov	r8, r2
 800171e:	d000      	beq.n	8001722 <__aeabi_dmul+0xe2>
 8001720:	e1ac      	b.n	8001a7c <__aeabi_dmul+0x43c>
 8001722:	469b      	mov	fp, r3
 8001724:	2302      	movs	r3, #2
 8001726:	4692      	mov	sl, r2
 8001728:	2508      	movs	r5, #8
 800172a:	9302      	str	r3, [sp, #8]
 800172c:	e7ae      	b.n	800168c <__aeabi_dmul+0x4c>
 800172e:	9b00      	ldr	r3, [sp, #0]
 8001730:	46a2      	mov	sl, r4
 8001732:	4699      	mov	r9, r3
 8001734:	9b01      	ldr	r3, [sp, #4]
 8001736:	4698      	mov	r8, r3
 8001738:	9b02      	ldr	r3, [sp, #8]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d100      	bne.n	8001740 <__aeabi_dmul+0x100>
 800173e:	e1ca      	b.n	8001ad6 <__aeabi_dmul+0x496>
 8001740:	2b03      	cmp	r3, #3
 8001742:	d100      	bne.n	8001746 <__aeabi_dmul+0x106>
 8001744:	e192      	b.n	8001a6c <__aeabi_dmul+0x42c>
 8001746:	2b01      	cmp	r3, #1
 8001748:	d110      	bne.n	800176c <__aeabi_dmul+0x12c>
 800174a:	2300      	movs	r3, #0
 800174c:	2400      	movs	r4, #0
 800174e:	2200      	movs	r2, #0
 8001750:	e7d4      	b.n	80016fc <__aeabi_dmul+0xbc>
 8001752:	2201      	movs	r2, #1
 8001754:	087b      	lsrs	r3, r7, #1
 8001756:	403a      	ands	r2, r7
 8001758:	4313      	orrs	r3, r2
 800175a:	4652      	mov	r2, sl
 800175c:	07d2      	lsls	r2, r2, #31
 800175e:	4313      	orrs	r3, r2
 8001760:	4698      	mov	r8, r3
 8001762:	4653      	mov	r3, sl
 8001764:	085b      	lsrs	r3, r3, #1
 8001766:	469a      	mov	sl, r3
 8001768:	9b03      	ldr	r3, [sp, #12]
 800176a:	4699      	mov	r9, r3
 800176c:	465b      	mov	r3, fp
 800176e:	1c58      	adds	r0, r3, #1
 8001770:	2380      	movs	r3, #128	@ 0x80
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	445b      	add	r3, fp
 8001776:	2b00      	cmp	r3, #0
 8001778:	dc00      	bgt.n	800177c <__aeabi_dmul+0x13c>
 800177a:	e1b1      	b.n	8001ae0 <__aeabi_dmul+0x4a0>
 800177c:	4642      	mov	r2, r8
 800177e:	0752      	lsls	r2, r2, #29
 8001780:	d00b      	beq.n	800179a <__aeabi_dmul+0x15a>
 8001782:	220f      	movs	r2, #15
 8001784:	4641      	mov	r1, r8
 8001786:	400a      	ands	r2, r1
 8001788:	2a04      	cmp	r2, #4
 800178a:	d006      	beq.n	800179a <__aeabi_dmul+0x15a>
 800178c:	4642      	mov	r2, r8
 800178e:	1d11      	adds	r1, r2, #4
 8001790:	4541      	cmp	r1, r8
 8001792:	4192      	sbcs	r2, r2
 8001794:	4688      	mov	r8, r1
 8001796:	4252      	negs	r2, r2
 8001798:	4492      	add	sl, r2
 800179a:	4652      	mov	r2, sl
 800179c:	01d2      	lsls	r2, r2, #7
 800179e:	d506      	bpl.n	80017ae <__aeabi_dmul+0x16e>
 80017a0:	4652      	mov	r2, sl
 80017a2:	4b80      	ldr	r3, [pc, #512]	@ (80019a4 <__aeabi_dmul+0x364>)
 80017a4:	401a      	ands	r2, r3
 80017a6:	2380      	movs	r3, #128	@ 0x80
 80017a8:	4692      	mov	sl, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	18c3      	adds	r3, r0, r3
 80017ae:	4a7e      	ldr	r2, [pc, #504]	@ (80019a8 <__aeabi_dmul+0x368>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	dd00      	ble.n	80017b6 <__aeabi_dmul+0x176>
 80017b4:	e18f      	b.n	8001ad6 <__aeabi_dmul+0x496>
 80017b6:	4642      	mov	r2, r8
 80017b8:	08d1      	lsrs	r1, r2, #3
 80017ba:	4652      	mov	r2, sl
 80017bc:	0752      	lsls	r2, r2, #29
 80017be:	430a      	orrs	r2, r1
 80017c0:	4651      	mov	r1, sl
 80017c2:	055b      	lsls	r3, r3, #21
 80017c4:	024c      	lsls	r4, r1, #9
 80017c6:	0b24      	lsrs	r4, r4, #12
 80017c8:	0d5b      	lsrs	r3, r3, #21
 80017ca:	e797      	b.n	80016fc <__aeabi_dmul+0xbc>
 80017cc:	4b73      	ldr	r3, [pc, #460]	@ (800199c <__aeabi_dmul+0x35c>)
 80017ce:	4326      	orrs	r6, r4
 80017d0:	469c      	mov	ip, r3
 80017d2:	44e3      	add	fp, ip
 80017d4:	2e00      	cmp	r6, #0
 80017d6:	d100      	bne.n	80017da <__aeabi_dmul+0x19a>
 80017d8:	e16f      	b.n	8001aba <__aeabi_dmul+0x47a>
 80017da:	2303      	movs	r3, #3
 80017dc:	4649      	mov	r1, r9
 80017de:	431d      	orrs	r5, r3
 80017e0:	9b00      	ldr	r3, [sp, #0]
 80017e2:	4059      	eors	r1, r3
 80017e4:	b2cb      	uxtb	r3, r1
 80017e6:	9303      	str	r3, [sp, #12]
 80017e8:	2d0a      	cmp	r5, #10
 80017ea:	dd00      	ble.n	80017ee <__aeabi_dmul+0x1ae>
 80017ec:	e133      	b.n	8001a56 <__aeabi_dmul+0x416>
 80017ee:	2301      	movs	r3, #1
 80017f0:	40ab      	lsls	r3, r5
 80017f2:	001d      	movs	r5, r3
 80017f4:	2303      	movs	r3, #3
 80017f6:	9302      	str	r3, [sp, #8]
 80017f8:	2288      	movs	r2, #136	@ 0x88
 80017fa:	422a      	tst	r2, r5
 80017fc:	d197      	bne.n	800172e <__aeabi_dmul+0xee>
 80017fe:	4642      	mov	r2, r8
 8001800:	4643      	mov	r3, r8
 8001802:	0412      	lsls	r2, r2, #16
 8001804:	0c12      	lsrs	r2, r2, #16
 8001806:	0016      	movs	r6, r2
 8001808:	9801      	ldr	r0, [sp, #4]
 800180a:	0c1d      	lsrs	r5, r3, #16
 800180c:	0c03      	lsrs	r3, r0, #16
 800180e:	0400      	lsls	r0, r0, #16
 8001810:	0c00      	lsrs	r0, r0, #16
 8001812:	4346      	muls	r6, r0
 8001814:	46b4      	mov	ip, r6
 8001816:	001e      	movs	r6, r3
 8001818:	436e      	muls	r6, r5
 800181a:	9600      	str	r6, [sp, #0]
 800181c:	0016      	movs	r6, r2
 800181e:	0007      	movs	r7, r0
 8001820:	435e      	muls	r6, r3
 8001822:	4661      	mov	r1, ip
 8001824:	46b0      	mov	r8, r6
 8001826:	436f      	muls	r7, r5
 8001828:	0c0e      	lsrs	r6, r1, #16
 800182a:	44b8      	add	r8, r7
 800182c:	4446      	add	r6, r8
 800182e:	42b7      	cmp	r7, r6
 8001830:	d905      	bls.n	800183e <__aeabi_dmul+0x1fe>
 8001832:	2180      	movs	r1, #128	@ 0x80
 8001834:	0249      	lsls	r1, r1, #9
 8001836:	4688      	mov	r8, r1
 8001838:	9f00      	ldr	r7, [sp, #0]
 800183a:	4447      	add	r7, r8
 800183c:	9700      	str	r7, [sp, #0]
 800183e:	4661      	mov	r1, ip
 8001840:	0409      	lsls	r1, r1, #16
 8001842:	0c09      	lsrs	r1, r1, #16
 8001844:	0c37      	lsrs	r7, r6, #16
 8001846:	0436      	lsls	r6, r6, #16
 8001848:	468c      	mov	ip, r1
 800184a:	0031      	movs	r1, r6
 800184c:	4461      	add	r1, ip
 800184e:	9101      	str	r1, [sp, #4]
 8001850:	0011      	movs	r1, r2
 8001852:	0c26      	lsrs	r6, r4, #16
 8001854:	0424      	lsls	r4, r4, #16
 8001856:	0c24      	lsrs	r4, r4, #16
 8001858:	4361      	muls	r1, r4
 800185a:	468c      	mov	ip, r1
 800185c:	0021      	movs	r1, r4
 800185e:	4369      	muls	r1, r5
 8001860:	4689      	mov	r9, r1
 8001862:	4661      	mov	r1, ip
 8001864:	0c09      	lsrs	r1, r1, #16
 8001866:	4688      	mov	r8, r1
 8001868:	4372      	muls	r2, r6
 800186a:	444a      	add	r2, r9
 800186c:	4442      	add	r2, r8
 800186e:	4375      	muls	r5, r6
 8001870:	4591      	cmp	r9, r2
 8001872:	d903      	bls.n	800187c <__aeabi_dmul+0x23c>
 8001874:	2180      	movs	r1, #128	@ 0x80
 8001876:	0249      	lsls	r1, r1, #9
 8001878:	4688      	mov	r8, r1
 800187a:	4445      	add	r5, r8
 800187c:	0c11      	lsrs	r1, r2, #16
 800187e:	4688      	mov	r8, r1
 8001880:	4661      	mov	r1, ip
 8001882:	0409      	lsls	r1, r1, #16
 8001884:	0c09      	lsrs	r1, r1, #16
 8001886:	468c      	mov	ip, r1
 8001888:	0412      	lsls	r2, r2, #16
 800188a:	4462      	add	r2, ip
 800188c:	18b9      	adds	r1, r7, r2
 800188e:	9102      	str	r1, [sp, #8]
 8001890:	4651      	mov	r1, sl
 8001892:	0c09      	lsrs	r1, r1, #16
 8001894:	468c      	mov	ip, r1
 8001896:	4651      	mov	r1, sl
 8001898:	040f      	lsls	r7, r1, #16
 800189a:	0c3f      	lsrs	r7, r7, #16
 800189c:	0039      	movs	r1, r7
 800189e:	4341      	muls	r1, r0
 80018a0:	4445      	add	r5, r8
 80018a2:	4688      	mov	r8, r1
 80018a4:	4661      	mov	r1, ip
 80018a6:	4341      	muls	r1, r0
 80018a8:	468a      	mov	sl, r1
 80018aa:	4641      	mov	r1, r8
 80018ac:	4660      	mov	r0, ip
 80018ae:	0c09      	lsrs	r1, r1, #16
 80018b0:	4689      	mov	r9, r1
 80018b2:	4358      	muls	r0, r3
 80018b4:	437b      	muls	r3, r7
 80018b6:	4453      	add	r3, sl
 80018b8:	444b      	add	r3, r9
 80018ba:	459a      	cmp	sl, r3
 80018bc:	d903      	bls.n	80018c6 <__aeabi_dmul+0x286>
 80018be:	2180      	movs	r1, #128	@ 0x80
 80018c0:	0249      	lsls	r1, r1, #9
 80018c2:	4689      	mov	r9, r1
 80018c4:	4448      	add	r0, r9
 80018c6:	0c19      	lsrs	r1, r3, #16
 80018c8:	4689      	mov	r9, r1
 80018ca:	4641      	mov	r1, r8
 80018cc:	0409      	lsls	r1, r1, #16
 80018ce:	0c09      	lsrs	r1, r1, #16
 80018d0:	4688      	mov	r8, r1
 80018d2:	0039      	movs	r1, r7
 80018d4:	4361      	muls	r1, r4
 80018d6:	041b      	lsls	r3, r3, #16
 80018d8:	4443      	add	r3, r8
 80018da:	4688      	mov	r8, r1
 80018dc:	4661      	mov	r1, ip
 80018de:	434c      	muls	r4, r1
 80018e0:	4371      	muls	r1, r6
 80018e2:	468c      	mov	ip, r1
 80018e4:	4641      	mov	r1, r8
 80018e6:	4377      	muls	r7, r6
 80018e8:	0c0e      	lsrs	r6, r1, #16
 80018ea:	193f      	adds	r7, r7, r4
 80018ec:	19f6      	adds	r6, r6, r7
 80018ee:	4448      	add	r0, r9
 80018f0:	42b4      	cmp	r4, r6
 80018f2:	d903      	bls.n	80018fc <__aeabi_dmul+0x2bc>
 80018f4:	2180      	movs	r1, #128	@ 0x80
 80018f6:	0249      	lsls	r1, r1, #9
 80018f8:	4689      	mov	r9, r1
 80018fa:	44cc      	add	ip, r9
 80018fc:	9902      	ldr	r1, [sp, #8]
 80018fe:	9f00      	ldr	r7, [sp, #0]
 8001900:	4689      	mov	r9, r1
 8001902:	0431      	lsls	r1, r6, #16
 8001904:	444f      	add	r7, r9
 8001906:	4689      	mov	r9, r1
 8001908:	4641      	mov	r1, r8
 800190a:	4297      	cmp	r7, r2
 800190c:	4192      	sbcs	r2, r2
 800190e:	040c      	lsls	r4, r1, #16
 8001910:	0c24      	lsrs	r4, r4, #16
 8001912:	444c      	add	r4, r9
 8001914:	18ff      	adds	r7, r7, r3
 8001916:	4252      	negs	r2, r2
 8001918:	1964      	adds	r4, r4, r5
 800191a:	18a1      	adds	r1, r4, r2
 800191c:	429f      	cmp	r7, r3
 800191e:	419b      	sbcs	r3, r3
 8001920:	4688      	mov	r8, r1
 8001922:	4682      	mov	sl, r0
 8001924:	425b      	negs	r3, r3
 8001926:	4699      	mov	r9, r3
 8001928:	4590      	cmp	r8, r2
 800192a:	4192      	sbcs	r2, r2
 800192c:	42ac      	cmp	r4, r5
 800192e:	41a4      	sbcs	r4, r4
 8001930:	44c2      	add	sl, r8
 8001932:	44d1      	add	r9, sl
 8001934:	4252      	negs	r2, r2
 8001936:	4264      	negs	r4, r4
 8001938:	4314      	orrs	r4, r2
 800193a:	4599      	cmp	r9, r3
 800193c:	419b      	sbcs	r3, r3
 800193e:	4582      	cmp	sl, r0
 8001940:	4192      	sbcs	r2, r2
 8001942:	425b      	negs	r3, r3
 8001944:	4252      	negs	r2, r2
 8001946:	4313      	orrs	r3, r2
 8001948:	464a      	mov	r2, r9
 800194a:	0c36      	lsrs	r6, r6, #16
 800194c:	19a4      	adds	r4, r4, r6
 800194e:	18e3      	adds	r3, r4, r3
 8001950:	4463      	add	r3, ip
 8001952:	025b      	lsls	r3, r3, #9
 8001954:	0dd2      	lsrs	r2, r2, #23
 8001956:	431a      	orrs	r2, r3
 8001958:	9901      	ldr	r1, [sp, #4]
 800195a:	4692      	mov	sl, r2
 800195c:	027a      	lsls	r2, r7, #9
 800195e:	430a      	orrs	r2, r1
 8001960:	1e50      	subs	r0, r2, #1
 8001962:	4182      	sbcs	r2, r0
 8001964:	0dff      	lsrs	r7, r7, #23
 8001966:	4317      	orrs	r7, r2
 8001968:	464a      	mov	r2, r9
 800196a:	0252      	lsls	r2, r2, #9
 800196c:	4317      	orrs	r7, r2
 800196e:	46b8      	mov	r8, r7
 8001970:	01db      	lsls	r3, r3, #7
 8001972:	d500      	bpl.n	8001976 <__aeabi_dmul+0x336>
 8001974:	e6ed      	b.n	8001752 <__aeabi_dmul+0x112>
 8001976:	4b0d      	ldr	r3, [pc, #52]	@ (80019ac <__aeabi_dmul+0x36c>)
 8001978:	9a03      	ldr	r2, [sp, #12]
 800197a:	445b      	add	r3, fp
 800197c:	4691      	mov	r9, r2
 800197e:	2b00      	cmp	r3, #0
 8001980:	dc00      	bgt.n	8001984 <__aeabi_dmul+0x344>
 8001982:	e0ac      	b.n	8001ade <__aeabi_dmul+0x49e>
 8001984:	003a      	movs	r2, r7
 8001986:	0752      	lsls	r2, r2, #29
 8001988:	d100      	bne.n	800198c <__aeabi_dmul+0x34c>
 800198a:	e710      	b.n	80017ae <__aeabi_dmul+0x16e>
 800198c:	220f      	movs	r2, #15
 800198e:	4658      	mov	r0, fp
 8001990:	403a      	ands	r2, r7
 8001992:	2a04      	cmp	r2, #4
 8001994:	d000      	beq.n	8001998 <__aeabi_dmul+0x358>
 8001996:	e6f9      	b.n	800178c <__aeabi_dmul+0x14c>
 8001998:	e709      	b.n	80017ae <__aeabi_dmul+0x16e>
 800199a:	46c0      	nop			@ (mov r8, r8)
 800199c:	000007ff 	.word	0x000007ff
 80019a0:	fffffc01 	.word	0xfffffc01
 80019a4:	feffffff 	.word	0xfeffffff
 80019a8:	000007fe 	.word	0x000007fe
 80019ac:	000003ff 	.word	0x000003ff
 80019b0:	0022      	movs	r2, r4
 80019b2:	4332      	orrs	r2, r6
 80019b4:	d06f      	beq.n	8001a96 <__aeabi_dmul+0x456>
 80019b6:	2c00      	cmp	r4, #0
 80019b8:	d100      	bne.n	80019bc <__aeabi_dmul+0x37c>
 80019ba:	e0c2      	b.n	8001b42 <__aeabi_dmul+0x502>
 80019bc:	0020      	movs	r0, r4
 80019be:	f000 fa87 	bl	8001ed0 <__clzsi2>
 80019c2:	0002      	movs	r2, r0
 80019c4:	0003      	movs	r3, r0
 80019c6:	3a0b      	subs	r2, #11
 80019c8:	201d      	movs	r0, #29
 80019ca:	1a82      	subs	r2, r0, r2
 80019cc:	0030      	movs	r0, r6
 80019ce:	0019      	movs	r1, r3
 80019d0:	40d0      	lsrs	r0, r2
 80019d2:	3908      	subs	r1, #8
 80019d4:	408c      	lsls	r4, r1
 80019d6:	0002      	movs	r2, r0
 80019d8:	4322      	orrs	r2, r4
 80019da:	0034      	movs	r4, r6
 80019dc:	408c      	lsls	r4, r1
 80019de:	4659      	mov	r1, fp
 80019e0:	1acb      	subs	r3, r1, r3
 80019e2:	4986      	ldr	r1, [pc, #536]	@ (8001bfc <__aeabi_dmul+0x5bc>)
 80019e4:	468b      	mov	fp, r1
 80019e6:	449b      	add	fp, r3
 80019e8:	2d0a      	cmp	r5, #10
 80019ea:	dd00      	ble.n	80019ee <__aeabi_dmul+0x3ae>
 80019ec:	e6a4      	b.n	8001738 <__aeabi_dmul+0xf8>
 80019ee:	4649      	mov	r1, r9
 80019f0:	9b00      	ldr	r3, [sp, #0]
 80019f2:	9401      	str	r4, [sp, #4]
 80019f4:	4059      	eors	r1, r3
 80019f6:	b2cb      	uxtb	r3, r1
 80019f8:	0014      	movs	r4, r2
 80019fa:	2000      	movs	r0, #0
 80019fc:	9303      	str	r3, [sp, #12]
 80019fe:	2d02      	cmp	r5, #2
 8001a00:	dd00      	ble.n	8001a04 <__aeabi_dmul+0x3c4>
 8001a02:	e667      	b.n	80016d4 <__aeabi_dmul+0x94>
 8001a04:	e6fb      	b.n	80017fe <__aeabi_dmul+0x1be>
 8001a06:	4653      	mov	r3, sl
 8001a08:	4303      	orrs	r3, r0
 8001a0a:	4698      	mov	r8, r3
 8001a0c:	d03c      	beq.n	8001a88 <__aeabi_dmul+0x448>
 8001a0e:	4653      	mov	r3, sl
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d100      	bne.n	8001a16 <__aeabi_dmul+0x3d6>
 8001a14:	e0a3      	b.n	8001b5e <__aeabi_dmul+0x51e>
 8001a16:	4650      	mov	r0, sl
 8001a18:	f000 fa5a 	bl	8001ed0 <__clzsi2>
 8001a1c:	230b      	movs	r3, #11
 8001a1e:	425b      	negs	r3, r3
 8001a20:	469c      	mov	ip, r3
 8001a22:	0002      	movs	r2, r0
 8001a24:	4484      	add	ip, r0
 8001a26:	0011      	movs	r1, r2
 8001a28:	4650      	mov	r0, sl
 8001a2a:	3908      	subs	r1, #8
 8001a2c:	4088      	lsls	r0, r1
 8001a2e:	231d      	movs	r3, #29
 8001a30:	4680      	mov	r8, r0
 8001a32:	4660      	mov	r0, ip
 8001a34:	1a1b      	subs	r3, r3, r0
 8001a36:	0020      	movs	r0, r4
 8001a38:	40d8      	lsrs	r0, r3
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	4640      	mov	r0, r8
 8001a3e:	4303      	orrs	r3, r0
 8001a40:	469a      	mov	sl, r3
 8001a42:	0023      	movs	r3, r4
 8001a44:	408b      	lsls	r3, r1
 8001a46:	4698      	mov	r8, r3
 8001a48:	4b6c      	ldr	r3, [pc, #432]	@ (8001bfc <__aeabi_dmul+0x5bc>)
 8001a4a:	2500      	movs	r5, #0
 8001a4c:	1a9b      	subs	r3, r3, r2
 8001a4e:	469b      	mov	fp, r3
 8001a50:	2300      	movs	r3, #0
 8001a52:	9302      	str	r3, [sp, #8]
 8001a54:	e61a      	b.n	800168c <__aeabi_dmul+0x4c>
 8001a56:	2d0f      	cmp	r5, #15
 8001a58:	d000      	beq.n	8001a5c <__aeabi_dmul+0x41c>
 8001a5a:	e0c9      	b.n	8001bf0 <__aeabi_dmul+0x5b0>
 8001a5c:	2380      	movs	r3, #128	@ 0x80
 8001a5e:	4652      	mov	r2, sl
 8001a60:	031b      	lsls	r3, r3, #12
 8001a62:	421a      	tst	r2, r3
 8001a64:	d002      	beq.n	8001a6c <__aeabi_dmul+0x42c>
 8001a66:	421c      	tst	r4, r3
 8001a68:	d100      	bne.n	8001a6c <__aeabi_dmul+0x42c>
 8001a6a:	e092      	b.n	8001b92 <__aeabi_dmul+0x552>
 8001a6c:	2480      	movs	r4, #128	@ 0x80
 8001a6e:	4653      	mov	r3, sl
 8001a70:	0324      	lsls	r4, r4, #12
 8001a72:	431c      	orrs	r4, r3
 8001a74:	0324      	lsls	r4, r4, #12
 8001a76:	4642      	mov	r2, r8
 8001a78:	0b24      	lsrs	r4, r4, #12
 8001a7a:	e63e      	b.n	80016fa <__aeabi_dmul+0xba>
 8001a7c:	469b      	mov	fp, r3
 8001a7e:	2303      	movs	r3, #3
 8001a80:	4680      	mov	r8, r0
 8001a82:	250c      	movs	r5, #12
 8001a84:	9302      	str	r3, [sp, #8]
 8001a86:	e601      	b.n	800168c <__aeabi_dmul+0x4c>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	469a      	mov	sl, r3
 8001a8c:	469b      	mov	fp, r3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	2504      	movs	r5, #4
 8001a92:	9302      	str	r3, [sp, #8]
 8001a94:	e5fa      	b.n	800168c <__aeabi_dmul+0x4c>
 8001a96:	2101      	movs	r1, #1
 8001a98:	430d      	orrs	r5, r1
 8001a9a:	2d0a      	cmp	r5, #10
 8001a9c:	dd00      	ble.n	8001aa0 <__aeabi_dmul+0x460>
 8001a9e:	e64b      	b.n	8001738 <__aeabi_dmul+0xf8>
 8001aa0:	4649      	mov	r1, r9
 8001aa2:	9800      	ldr	r0, [sp, #0]
 8001aa4:	4041      	eors	r1, r0
 8001aa6:	b2c9      	uxtb	r1, r1
 8001aa8:	9103      	str	r1, [sp, #12]
 8001aaa:	2d02      	cmp	r5, #2
 8001aac:	dc00      	bgt.n	8001ab0 <__aeabi_dmul+0x470>
 8001aae:	e096      	b.n	8001bde <__aeabi_dmul+0x59e>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	2400      	movs	r4, #0
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	9301      	str	r3, [sp, #4]
 8001ab8:	e60c      	b.n	80016d4 <__aeabi_dmul+0x94>
 8001aba:	4649      	mov	r1, r9
 8001abc:	2302      	movs	r3, #2
 8001abe:	9a00      	ldr	r2, [sp, #0]
 8001ac0:	432b      	orrs	r3, r5
 8001ac2:	4051      	eors	r1, r2
 8001ac4:	b2ca      	uxtb	r2, r1
 8001ac6:	9203      	str	r2, [sp, #12]
 8001ac8:	2b0a      	cmp	r3, #10
 8001aca:	dd00      	ble.n	8001ace <__aeabi_dmul+0x48e>
 8001acc:	e634      	b.n	8001738 <__aeabi_dmul+0xf8>
 8001ace:	2d00      	cmp	r5, #0
 8001ad0:	d157      	bne.n	8001b82 <__aeabi_dmul+0x542>
 8001ad2:	9b03      	ldr	r3, [sp, #12]
 8001ad4:	4699      	mov	r9, r3
 8001ad6:	2400      	movs	r4, #0
 8001ad8:	2200      	movs	r2, #0
 8001ada:	4b49      	ldr	r3, [pc, #292]	@ (8001c00 <__aeabi_dmul+0x5c0>)
 8001adc:	e60e      	b.n	80016fc <__aeabi_dmul+0xbc>
 8001ade:	4658      	mov	r0, fp
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	1ac9      	subs	r1, r1, r3
 8001ae4:	2938      	cmp	r1, #56	@ 0x38
 8001ae6:	dd00      	ble.n	8001aea <__aeabi_dmul+0x4aa>
 8001ae8:	e62f      	b.n	800174a <__aeabi_dmul+0x10a>
 8001aea:	291f      	cmp	r1, #31
 8001aec:	dd56      	ble.n	8001b9c <__aeabi_dmul+0x55c>
 8001aee:	221f      	movs	r2, #31
 8001af0:	4654      	mov	r4, sl
 8001af2:	4252      	negs	r2, r2
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	40dc      	lsrs	r4, r3
 8001af8:	2920      	cmp	r1, #32
 8001afa:	d007      	beq.n	8001b0c <__aeabi_dmul+0x4cc>
 8001afc:	4b41      	ldr	r3, [pc, #260]	@ (8001c04 <__aeabi_dmul+0x5c4>)
 8001afe:	4642      	mov	r2, r8
 8001b00:	469c      	mov	ip, r3
 8001b02:	4653      	mov	r3, sl
 8001b04:	4460      	add	r0, ip
 8001b06:	4083      	lsls	r3, r0
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	4690      	mov	r8, r2
 8001b0c:	4642      	mov	r2, r8
 8001b0e:	2107      	movs	r1, #7
 8001b10:	1e53      	subs	r3, r2, #1
 8001b12:	419a      	sbcs	r2, r3
 8001b14:	000b      	movs	r3, r1
 8001b16:	4322      	orrs	r2, r4
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2400      	movs	r4, #0
 8001b1c:	4211      	tst	r1, r2
 8001b1e:	d009      	beq.n	8001b34 <__aeabi_dmul+0x4f4>
 8001b20:	230f      	movs	r3, #15
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d05d      	beq.n	8001be4 <__aeabi_dmul+0x5a4>
 8001b28:	1d11      	adds	r1, r2, #4
 8001b2a:	4291      	cmp	r1, r2
 8001b2c:	419b      	sbcs	r3, r3
 8001b2e:	000a      	movs	r2, r1
 8001b30:	425b      	negs	r3, r3
 8001b32:	075b      	lsls	r3, r3, #29
 8001b34:	08d2      	lsrs	r2, r2, #3
 8001b36:	431a      	orrs	r2, r3
 8001b38:	2300      	movs	r3, #0
 8001b3a:	e5df      	b.n	80016fc <__aeabi_dmul+0xbc>
 8001b3c:	9b03      	ldr	r3, [sp, #12]
 8001b3e:	4699      	mov	r9, r3
 8001b40:	e5fa      	b.n	8001738 <__aeabi_dmul+0xf8>
 8001b42:	9801      	ldr	r0, [sp, #4]
 8001b44:	f000 f9c4 	bl	8001ed0 <__clzsi2>
 8001b48:	0002      	movs	r2, r0
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	3215      	adds	r2, #21
 8001b4e:	3320      	adds	r3, #32
 8001b50:	2a1c      	cmp	r2, #28
 8001b52:	dc00      	bgt.n	8001b56 <__aeabi_dmul+0x516>
 8001b54:	e738      	b.n	80019c8 <__aeabi_dmul+0x388>
 8001b56:	9a01      	ldr	r2, [sp, #4]
 8001b58:	3808      	subs	r0, #8
 8001b5a:	4082      	lsls	r2, r0
 8001b5c:	e73f      	b.n	80019de <__aeabi_dmul+0x39e>
 8001b5e:	f000 f9b7 	bl	8001ed0 <__clzsi2>
 8001b62:	2315      	movs	r3, #21
 8001b64:	469c      	mov	ip, r3
 8001b66:	4484      	add	ip, r0
 8001b68:	0002      	movs	r2, r0
 8001b6a:	4663      	mov	r3, ip
 8001b6c:	3220      	adds	r2, #32
 8001b6e:	2b1c      	cmp	r3, #28
 8001b70:	dc00      	bgt.n	8001b74 <__aeabi_dmul+0x534>
 8001b72:	e758      	b.n	8001a26 <__aeabi_dmul+0x3e6>
 8001b74:	2300      	movs	r3, #0
 8001b76:	4698      	mov	r8, r3
 8001b78:	0023      	movs	r3, r4
 8001b7a:	3808      	subs	r0, #8
 8001b7c:	4083      	lsls	r3, r0
 8001b7e:	469a      	mov	sl, r3
 8001b80:	e762      	b.n	8001a48 <__aeabi_dmul+0x408>
 8001b82:	001d      	movs	r5, r3
 8001b84:	2300      	movs	r3, #0
 8001b86:	2400      	movs	r4, #0
 8001b88:	2002      	movs	r0, #2
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	e5a2      	b.n	80016d4 <__aeabi_dmul+0x94>
 8001b8e:	9002      	str	r0, [sp, #8]
 8001b90:	e632      	b.n	80017f8 <__aeabi_dmul+0x1b8>
 8001b92:	431c      	orrs	r4, r3
 8001b94:	9b00      	ldr	r3, [sp, #0]
 8001b96:	9a01      	ldr	r2, [sp, #4]
 8001b98:	4699      	mov	r9, r3
 8001b9a:	e5ae      	b.n	80016fa <__aeabi_dmul+0xba>
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c08 <__aeabi_dmul+0x5c8>)
 8001b9e:	4652      	mov	r2, sl
 8001ba0:	18c3      	adds	r3, r0, r3
 8001ba2:	4640      	mov	r0, r8
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	40c8      	lsrs	r0, r1
 8001ba8:	4302      	orrs	r2, r0
 8001baa:	4640      	mov	r0, r8
 8001bac:	4098      	lsls	r0, r3
 8001bae:	0003      	movs	r3, r0
 8001bb0:	1e58      	subs	r0, r3, #1
 8001bb2:	4183      	sbcs	r3, r0
 8001bb4:	4654      	mov	r4, sl
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	40cc      	lsrs	r4, r1
 8001bba:	0753      	lsls	r3, r2, #29
 8001bbc:	d009      	beq.n	8001bd2 <__aeabi_dmul+0x592>
 8001bbe:	230f      	movs	r3, #15
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d005      	beq.n	8001bd2 <__aeabi_dmul+0x592>
 8001bc6:	1d13      	adds	r3, r2, #4
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	4192      	sbcs	r2, r2
 8001bcc:	4252      	negs	r2, r2
 8001bce:	18a4      	adds	r4, r4, r2
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	0223      	lsls	r3, r4, #8
 8001bd4:	d508      	bpl.n	8001be8 <__aeabi_dmul+0x5a8>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	2400      	movs	r4, #0
 8001bda:	2200      	movs	r2, #0
 8001bdc:	e58e      	b.n	80016fc <__aeabi_dmul+0xbc>
 8001bde:	4689      	mov	r9, r1
 8001be0:	2400      	movs	r4, #0
 8001be2:	e58b      	b.n	80016fc <__aeabi_dmul+0xbc>
 8001be4:	2300      	movs	r3, #0
 8001be6:	e7a5      	b.n	8001b34 <__aeabi_dmul+0x4f4>
 8001be8:	0763      	lsls	r3, r4, #29
 8001bea:	0264      	lsls	r4, r4, #9
 8001bec:	0b24      	lsrs	r4, r4, #12
 8001bee:	e7a1      	b.n	8001b34 <__aeabi_dmul+0x4f4>
 8001bf0:	9b00      	ldr	r3, [sp, #0]
 8001bf2:	46a2      	mov	sl, r4
 8001bf4:	4699      	mov	r9, r3
 8001bf6:	9b01      	ldr	r3, [sp, #4]
 8001bf8:	4698      	mov	r8, r3
 8001bfa:	e737      	b.n	8001a6c <__aeabi_dmul+0x42c>
 8001bfc:	fffffc0d 	.word	0xfffffc0d
 8001c00:	000007ff 	.word	0x000007ff
 8001c04:	0000043e 	.word	0x0000043e
 8001c08:	0000041e 	.word	0x0000041e

08001c0c <__aeabi_dcmpun>:
 8001c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0e:	46c6      	mov	lr, r8
 8001c10:	031e      	lsls	r6, r3, #12
 8001c12:	0b36      	lsrs	r6, r6, #12
 8001c14:	46b0      	mov	r8, r6
 8001c16:	4e0d      	ldr	r6, [pc, #52]	@ (8001c4c <__aeabi_dcmpun+0x40>)
 8001c18:	030c      	lsls	r4, r1, #12
 8001c1a:	004d      	lsls	r5, r1, #1
 8001c1c:	005f      	lsls	r7, r3, #1
 8001c1e:	b500      	push	{lr}
 8001c20:	0b24      	lsrs	r4, r4, #12
 8001c22:	0d6d      	lsrs	r5, r5, #21
 8001c24:	0d7f      	lsrs	r7, r7, #21
 8001c26:	42b5      	cmp	r5, r6
 8001c28:	d00b      	beq.n	8001c42 <__aeabi_dcmpun+0x36>
 8001c2a:	4908      	ldr	r1, [pc, #32]	@ (8001c4c <__aeabi_dcmpun+0x40>)
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	428f      	cmp	r7, r1
 8001c30:	d104      	bne.n	8001c3c <__aeabi_dcmpun+0x30>
 8001c32:	4646      	mov	r6, r8
 8001c34:	4316      	orrs	r6, r2
 8001c36:	0030      	movs	r0, r6
 8001c38:	1e43      	subs	r3, r0, #1
 8001c3a:	4198      	sbcs	r0, r3
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	46b8      	mov	r8, r7
 8001c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c42:	4304      	orrs	r4, r0
 8001c44:	2001      	movs	r0, #1
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	d1f8      	bne.n	8001c3c <__aeabi_dcmpun+0x30>
 8001c4a:	e7ee      	b.n	8001c2a <__aeabi_dcmpun+0x1e>
 8001c4c:	000007ff 	.word	0x000007ff

08001c50 <__aeabi_d2iz>:
 8001c50:	000b      	movs	r3, r1
 8001c52:	0002      	movs	r2, r0
 8001c54:	b570      	push	{r4, r5, r6, lr}
 8001c56:	4d16      	ldr	r5, [pc, #88]	@ (8001cb0 <__aeabi_d2iz+0x60>)
 8001c58:	030c      	lsls	r4, r1, #12
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	0049      	lsls	r1, r1, #1
 8001c5e:	2000      	movs	r0, #0
 8001c60:	9200      	str	r2, [sp, #0]
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	0b24      	lsrs	r4, r4, #12
 8001c66:	0d49      	lsrs	r1, r1, #21
 8001c68:	0fde      	lsrs	r6, r3, #31
 8001c6a:	42a9      	cmp	r1, r5
 8001c6c:	dd04      	ble.n	8001c78 <__aeabi_d2iz+0x28>
 8001c6e:	4811      	ldr	r0, [pc, #68]	@ (8001cb4 <__aeabi_d2iz+0x64>)
 8001c70:	4281      	cmp	r1, r0
 8001c72:	dd03      	ble.n	8001c7c <__aeabi_d2iz+0x2c>
 8001c74:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <__aeabi_d2iz+0x68>)
 8001c76:	18f0      	adds	r0, r6, r3
 8001c78:	b002      	add	sp, #8
 8001c7a:	bd70      	pop	{r4, r5, r6, pc}
 8001c7c:	2080      	movs	r0, #128	@ 0x80
 8001c7e:	0340      	lsls	r0, r0, #13
 8001c80:	4320      	orrs	r0, r4
 8001c82:	4c0e      	ldr	r4, [pc, #56]	@ (8001cbc <__aeabi_d2iz+0x6c>)
 8001c84:	1a64      	subs	r4, r4, r1
 8001c86:	2c1f      	cmp	r4, #31
 8001c88:	dd08      	ble.n	8001c9c <__aeabi_d2iz+0x4c>
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc0 <__aeabi_d2iz+0x70>)
 8001c8c:	1a5b      	subs	r3, r3, r1
 8001c8e:	40d8      	lsrs	r0, r3
 8001c90:	0003      	movs	r3, r0
 8001c92:	4258      	negs	r0, r3
 8001c94:	2e00      	cmp	r6, #0
 8001c96:	d1ef      	bne.n	8001c78 <__aeabi_d2iz+0x28>
 8001c98:	0018      	movs	r0, r3
 8001c9a:	e7ed      	b.n	8001c78 <__aeabi_d2iz+0x28>
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <__aeabi_d2iz+0x74>)
 8001c9e:	9a00      	ldr	r2, [sp, #0]
 8001ca0:	469c      	mov	ip, r3
 8001ca2:	0003      	movs	r3, r0
 8001ca4:	4461      	add	r1, ip
 8001ca6:	408b      	lsls	r3, r1
 8001ca8:	40e2      	lsrs	r2, r4
 8001caa:	4313      	orrs	r3, r2
 8001cac:	e7f1      	b.n	8001c92 <__aeabi_d2iz+0x42>
 8001cae:	46c0      	nop			@ (mov r8, r8)
 8001cb0:	000003fe 	.word	0x000003fe
 8001cb4:	0000041d 	.word	0x0000041d
 8001cb8:	7fffffff 	.word	0x7fffffff
 8001cbc:	00000433 	.word	0x00000433
 8001cc0:	00000413 	.word	0x00000413
 8001cc4:	fffffbed 	.word	0xfffffbed

08001cc8 <__aeabi_f2d>:
 8001cc8:	b570      	push	{r4, r5, r6, lr}
 8001cca:	0242      	lsls	r2, r0, #9
 8001ccc:	0043      	lsls	r3, r0, #1
 8001cce:	0fc4      	lsrs	r4, r0, #31
 8001cd0:	20fe      	movs	r0, #254	@ 0xfe
 8001cd2:	0e1b      	lsrs	r3, r3, #24
 8001cd4:	1c59      	adds	r1, r3, #1
 8001cd6:	0a55      	lsrs	r5, r2, #9
 8001cd8:	4208      	tst	r0, r1
 8001cda:	d00c      	beq.n	8001cf6 <__aeabi_f2d+0x2e>
 8001cdc:	21e0      	movs	r1, #224	@ 0xe0
 8001cde:	0089      	lsls	r1, r1, #2
 8001ce0:	468c      	mov	ip, r1
 8001ce2:	076d      	lsls	r5, r5, #29
 8001ce4:	0b12      	lsrs	r2, r2, #12
 8001ce6:	4463      	add	r3, ip
 8001ce8:	051b      	lsls	r3, r3, #20
 8001cea:	4313      	orrs	r3, r2
 8001cec:	07e4      	lsls	r4, r4, #31
 8001cee:	4323      	orrs	r3, r4
 8001cf0:	0028      	movs	r0, r5
 8001cf2:	0019      	movs	r1, r3
 8001cf4:	bd70      	pop	{r4, r5, r6, pc}
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d114      	bne.n	8001d24 <__aeabi_f2d+0x5c>
 8001cfa:	2d00      	cmp	r5, #0
 8001cfc:	d01b      	beq.n	8001d36 <__aeabi_f2d+0x6e>
 8001cfe:	0028      	movs	r0, r5
 8001d00:	f000 f8e6 	bl	8001ed0 <__clzsi2>
 8001d04:	280a      	cmp	r0, #10
 8001d06:	dc1c      	bgt.n	8001d42 <__aeabi_f2d+0x7a>
 8001d08:	230b      	movs	r3, #11
 8001d0a:	002a      	movs	r2, r5
 8001d0c:	1a1b      	subs	r3, r3, r0
 8001d0e:	40da      	lsrs	r2, r3
 8001d10:	0003      	movs	r3, r0
 8001d12:	3315      	adds	r3, #21
 8001d14:	409d      	lsls	r5, r3
 8001d16:	4b0e      	ldr	r3, [pc, #56]	@ (8001d50 <__aeabi_f2d+0x88>)
 8001d18:	0312      	lsls	r2, r2, #12
 8001d1a:	1a1b      	subs	r3, r3, r0
 8001d1c:	055b      	lsls	r3, r3, #21
 8001d1e:	0b12      	lsrs	r2, r2, #12
 8001d20:	0d5b      	lsrs	r3, r3, #21
 8001d22:	e7e1      	b.n	8001ce8 <__aeabi_f2d+0x20>
 8001d24:	2d00      	cmp	r5, #0
 8001d26:	d009      	beq.n	8001d3c <__aeabi_f2d+0x74>
 8001d28:	0b13      	lsrs	r3, r2, #12
 8001d2a:	2280      	movs	r2, #128	@ 0x80
 8001d2c:	0312      	lsls	r2, r2, #12
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	076d      	lsls	r5, r5, #29
 8001d32:	4b08      	ldr	r3, [pc, #32]	@ (8001d54 <__aeabi_f2d+0x8c>)
 8001d34:	e7d8      	b.n	8001ce8 <__aeabi_f2d+0x20>
 8001d36:	2300      	movs	r3, #0
 8001d38:	2200      	movs	r2, #0
 8001d3a:	e7d5      	b.n	8001ce8 <__aeabi_f2d+0x20>
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	4b05      	ldr	r3, [pc, #20]	@ (8001d54 <__aeabi_f2d+0x8c>)
 8001d40:	e7d2      	b.n	8001ce8 <__aeabi_f2d+0x20>
 8001d42:	0003      	movs	r3, r0
 8001d44:	002a      	movs	r2, r5
 8001d46:	3b0b      	subs	r3, #11
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	2500      	movs	r5, #0
 8001d4c:	e7e3      	b.n	8001d16 <__aeabi_f2d+0x4e>
 8001d4e:	46c0      	nop			@ (mov r8, r8)
 8001d50:	00000389 	.word	0x00000389
 8001d54:	000007ff 	.word	0x000007ff

08001d58 <__aeabi_d2f>:
 8001d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d5a:	004b      	lsls	r3, r1, #1
 8001d5c:	030f      	lsls	r7, r1, #12
 8001d5e:	0d5b      	lsrs	r3, r3, #21
 8001d60:	4c3a      	ldr	r4, [pc, #232]	@ (8001e4c <__aeabi_d2f+0xf4>)
 8001d62:	0f45      	lsrs	r5, r0, #29
 8001d64:	b083      	sub	sp, #12
 8001d66:	0a7f      	lsrs	r7, r7, #9
 8001d68:	1c5e      	adds	r6, r3, #1
 8001d6a:	432f      	orrs	r7, r5
 8001d6c:	9000      	str	r0, [sp, #0]
 8001d6e:	9101      	str	r1, [sp, #4]
 8001d70:	0fca      	lsrs	r2, r1, #31
 8001d72:	00c5      	lsls	r5, r0, #3
 8001d74:	4226      	tst	r6, r4
 8001d76:	d00b      	beq.n	8001d90 <__aeabi_d2f+0x38>
 8001d78:	4935      	ldr	r1, [pc, #212]	@ (8001e50 <__aeabi_d2f+0xf8>)
 8001d7a:	185c      	adds	r4, r3, r1
 8001d7c:	2cfe      	cmp	r4, #254	@ 0xfe
 8001d7e:	dd13      	ble.n	8001da8 <__aeabi_d2f+0x50>
 8001d80:	20ff      	movs	r0, #255	@ 0xff
 8001d82:	2300      	movs	r3, #0
 8001d84:	05c0      	lsls	r0, r0, #23
 8001d86:	4318      	orrs	r0, r3
 8001d88:	07d2      	lsls	r2, r2, #31
 8001d8a:	4310      	orrs	r0, r2
 8001d8c:	b003      	add	sp, #12
 8001d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d90:	433d      	orrs	r5, r7
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <__aeabi_d2f+0x42>
 8001d96:	2000      	movs	r0, #0
 8001d98:	e7f4      	b.n	8001d84 <__aeabi_d2f+0x2c>
 8001d9a:	2d00      	cmp	r5, #0
 8001d9c:	d0f0      	beq.n	8001d80 <__aeabi_d2f+0x28>
 8001d9e:	2380      	movs	r3, #128	@ 0x80
 8001da0:	03db      	lsls	r3, r3, #15
 8001da2:	20ff      	movs	r0, #255	@ 0xff
 8001da4:	433b      	orrs	r3, r7
 8001da6:	e7ed      	b.n	8001d84 <__aeabi_d2f+0x2c>
 8001da8:	2c00      	cmp	r4, #0
 8001daa:	dd0c      	ble.n	8001dc6 <__aeabi_d2f+0x6e>
 8001dac:	9b00      	ldr	r3, [sp, #0]
 8001dae:	00ff      	lsls	r7, r7, #3
 8001db0:	019b      	lsls	r3, r3, #6
 8001db2:	1e58      	subs	r0, r3, #1
 8001db4:	4183      	sbcs	r3, r0
 8001db6:	0f69      	lsrs	r1, r5, #29
 8001db8:	433b      	orrs	r3, r7
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	0759      	lsls	r1, r3, #29
 8001dbe:	d127      	bne.n	8001e10 <__aeabi_d2f+0xb8>
 8001dc0:	08db      	lsrs	r3, r3, #3
 8001dc2:	b2e0      	uxtb	r0, r4
 8001dc4:	e7de      	b.n	8001d84 <__aeabi_d2f+0x2c>
 8001dc6:	0021      	movs	r1, r4
 8001dc8:	3117      	adds	r1, #23
 8001dca:	db31      	blt.n	8001e30 <__aeabi_d2f+0xd8>
 8001dcc:	2180      	movs	r1, #128	@ 0x80
 8001dce:	201e      	movs	r0, #30
 8001dd0:	0409      	lsls	r1, r1, #16
 8001dd2:	4339      	orrs	r1, r7
 8001dd4:	1b00      	subs	r0, r0, r4
 8001dd6:	281f      	cmp	r0, #31
 8001dd8:	dd2d      	ble.n	8001e36 <__aeabi_d2f+0xde>
 8001dda:	2602      	movs	r6, #2
 8001ddc:	4276      	negs	r6, r6
 8001dde:	1b34      	subs	r4, r6, r4
 8001de0:	000e      	movs	r6, r1
 8001de2:	40e6      	lsrs	r6, r4
 8001de4:	0034      	movs	r4, r6
 8001de6:	2820      	cmp	r0, #32
 8001de8:	d004      	beq.n	8001df4 <__aeabi_d2f+0x9c>
 8001dea:	481a      	ldr	r0, [pc, #104]	@ (8001e54 <__aeabi_d2f+0xfc>)
 8001dec:	4684      	mov	ip, r0
 8001dee:	4463      	add	r3, ip
 8001df0:	4099      	lsls	r1, r3
 8001df2:	430d      	orrs	r5, r1
 8001df4:	002b      	movs	r3, r5
 8001df6:	1e59      	subs	r1, r3, #1
 8001df8:	418b      	sbcs	r3, r1
 8001dfa:	4323      	orrs	r3, r4
 8001dfc:	0759      	lsls	r1, r3, #29
 8001dfe:	d003      	beq.n	8001e08 <__aeabi_d2f+0xb0>
 8001e00:	210f      	movs	r1, #15
 8001e02:	4019      	ands	r1, r3
 8001e04:	2904      	cmp	r1, #4
 8001e06:	d10b      	bne.n	8001e20 <__aeabi_d2f+0xc8>
 8001e08:	019b      	lsls	r3, r3, #6
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	0a5b      	lsrs	r3, r3, #9
 8001e0e:	e7b9      	b.n	8001d84 <__aeabi_d2f+0x2c>
 8001e10:	210f      	movs	r1, #15
 8001e12:	4019      	ands	r1, r3
 8001e14:	2904      	cmp	r1, #4
 8001e16:	d104      	bne.n	8001e22 <__aeabi_d2f+0xca>
 8001e18:	019b      	lsls	r3, r3, #6
 8001e1a:	0a5b      	lsrs	r3, r3, #9
 8001e1c:	b2e0      	uxtb	r0, r4
 8001e1e:	e7b1      	b.n	8001d84 <__aeabi_d2f+0x2c>
 8001e20:	2400      	movs	r4, #0
 8001e22:	3304      	adds	r3, #4
 8001e24:	0159      	lsls	r1, r3, #5
 8001e26:	d5f7      	bpl.n	8001e18 <__aeabi_d2f+0xc0>
 8001e28:	3401      	adds	r4, #1
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	b2e0      	uxtb	r0, r4
 8001e2e:	e7a9      	b.n	8001d84 <__aeabi_d2f+0x2c>
 8001e30:	2000      	movs	r0, #0
 8001e32:	2300      	movs	r3, #0
 8001e34:	e7a6      	b.n	8001d84 <__aeabi_d2f+0x2c>
 8001e36:	4c08      	ldr	r4, [pc, #32]	@ (8001e58 <__aeabi_d2f+0x100>)
 8001e38:	191c      	adds	r4, r3, r4
 8001e3a:	002b      	movs	r3, r5
 8001e3c:	40a5      	lsls	r5, r4
 8001e3e:	40c3      	lsrs	r3, r0
 8001e40:	40a1      	lsls	r1, r4
 8001e42:	1e68      	subs	r0, r5, #1
 8001e44:	4185      	sbcs	r5, r0
 8001e46:	4329      	orrs	r1, r5
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	e7d7      	b.n	8001dfc <__aeabi_d2f+0xa4>
 8001e4c:	000007fe 	.word	0x000007fe
 8001e50:	fffffc80 	.word	0xfffffc80
 8001e54:	fffffca2 	.word	0xfffffca2
 8001e58:	fffffc82 	.word	0xfffffc82

08001e5c <__aeabi_cfrcmple>:
 8001e5c:	4684      	mov	ip, r0
 8001e5e:	0008      	movs	r0, r1
 8001e60:	4661      	mov	r1, ip
 8001e62:	e7ff      	b.n	8001e64 <__aeabi_cfcmpeq>

08001e64 <__aeabi_cfcmpeq>:
 8001e64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001e66:	f000 f8cd 	bl	8002004 <__lesf2>
 8001e6a:	2800      	cmp	r0, #0
 8001e6c:	d401      	bmi.n	8001e72 <__aeabi_cfcmpeq+0xe>
 8001e6e:	2100      	movs	r1, #0
 8001e70:	42c8      	cmn	r0, r1
 8001e72:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001e74 <__aeabi_fcmpeq>:
 8001e74:	b510      	push	{r4, lr}
 8001e76:	f000 f855 	bl	8001f24 <__eqsf2>
 8001e7a:	4240      	negs	r0, r0
 8001e7c:	3001      	adds	r0, #1
 8001e7e:	bd10      	pop	{r4, pc}

08001e80 <__aeabi_fcmplt>:
 8001e80:	b510      	push	{r4, lr}
 8001e82:	f000 f8bf 	bl	8002004 <__lesf2>
 8001e86:	2800      	cmp	r0, #0
 8001e88:	db01      	blt.n	8001e8e <__aeabi_fcmplt+0xe>
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	bd10      	pop	{r4, pc}
 8001e8e:	2001      	movs	r0, #1
 8001e90:	bd10      	pop	{r4, pc}
 8001e92:	46c0      	nop			@ (mov r8, r8)

08001e94 <__aeabi_fcmple>:
 8001e94:	b510      	push	{r4, lr}
 8001e96:	f000 f8b5 	bl	8002004 <__lesf2>
 8001e9a:	2800      	cmp	r0, #0
 8001e9c:	dd01      	ble.n	8001ea2 <__aeabi_fcmple+0xe>
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	bd10      	pop	{r4, pc}
 8001ea2:	2001      	movs	r0, #1
 8001ea4:	bd10      	pop	{r4, pc}
 8001ea6:	46c0      	nop			@ (mov r8, r8)

08001ea8 <__aeabi_fcmpgt>:
 8001ea8:	b510      	push	{r4, lr}
 8001eaa:	f000 f863 	bl	8001f74 <__gesf2>
 8001eae:	2800      	cmp	r0, #0
 8001eb0:	dc01      	bgt.n	8001eb6 <__aeabi_fcmpgt+0xe>
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	bd10      	pop	{r4, pc}
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	bd10      	pop	{r4, pc}
 8001eba:	46c0      	nop			@ (mov r8, r8)

08001ebc <__aeabi_fcmpge>:
 8001ebc:	b510      	push	{r4, lr}
 8001ebe:	f000 f859 	bl	8001f74 <__gesf2>
 8001ec2:	2800      	cmp	r0, #0
 8001ec4:	da01      	bge.n	8001eca <__aeabi_fcmpge+0xe>
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	bd10      	pop	{r4, pc}
 8001eca:	2001      	movs	r0, #1
 8001ecc:	bd10      	pop	{r4, pc}
 8001ece:	46c0      	nop			@ (mov r8, r8)

08001ed0 <__clzsi2>:
 8001ed0:	211c      	movs	r1, #28
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	041b      	lsls	r3, r3, #16
 8001ed6:	4298      	cmp	r0, r3
 8001ed8:	d301      	bcc.n	8001ede <__clzsi2+0xe>
 8001eda:	0c00      	lsrs	r0, r0, #16
 8001edc:	3910      	subs	r1, #16
 8001ede:	0a1b      	lsrs	r3, r3, #8
 8001ee0:	4298      	cmp	r0, r3
 8001ee2:	d301      	bcc.n	8001ee8 <__clzsi2+0x18>
 8001ee4:	0a00      	lsrs	r0, r0, #8
 8001ee6:	3908      	subs	r1, #8
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	4298      	cmp	r0, r3
 8001eec:	d301      	bcc.n	8001ef2 <__clzsi2+0x22>
 8001eee:	0900      	lsrs	r0, r0, #4
 8001ef0:	3904      	subs	r1, #4
 8001ef2:	a202      	add	r2, pc, #8	@ (adr r2, 8001efc <__clzsi2+0x2c>)
 8001ef4:	5c10      	ldrb	r0, [r2, r0]
 8001ef6:	1840      	adds	r0, r0, r1
 8001ef8:	4770      	bx	lr
 8001efa:	46c0      	nop			@ (mov r8, r8)
 8001efc:	02020304 	.word	0x02020304
 8001f00:	01010101 	.word	0x01010101
	...

08001f0c <__clzdi2>:
 8001f0c:	b510      	push	{r4, lr}
 8001f0e:	2900      	cmp	r1, #0
 8001f10:	d103      	bne.n	8001f1a <__clzdi2+0xe>
 8001f12:	f7ff ffdd 	bl	8001ed0 <__clzsi2>
 8001f16:	3020      	adds	r0, #32
 8001f18:	e002      	b.n	8001f20 <__clzdi2+0x14>
 8001f1a:	0008      	movs	r0, r1
 8001f1c:	f7ff ffd8 	bl	8001ed0 <__clzsi2>
 8001f20:	bd10      	pop	{r4, pc}
 8001f22:	46c0      	nop			@ (mov r8, r8)

08001f24 <__eqsf2>:
 8001f24:	b570      	push	{r4, r5, r6, lr}
 8001f26:	0042      	lsls	r2, r0, #1
 8001f28:	024e      	lsls	r6, r1, #9
 8001f2a:	004c      	lsls	r4, r1, #1
 8001f2c:	0245      	lsls	r5, r0, #9
 8001f2e:	0a6d      	lsrs	r5, r5, #9
 8001f30:	0e12      	lsrs	r2, r2, #24
 8001f32:	0fc3      	lsrs	r3, r0, #31
 8001f34:	0a76      	lsrs	r6, r6, #9
 8001f36:	0e24      	lsrs	r4, r4, #24
 8001f38:	0fc9      	lsrs	r1, r1, #31
 8001f3a:	2aff      	cmp	r2, #255	@ 0xff
 8001f3c:	d010      	beq.n	8001f60 <__eqsf2+0x3c>
 8001f3e:	2cff      	cmp	r4, #255	@ 0xff
 8001f40:	d00c      	beq.n	8001f5c <__eqsf2+0x38>
 8001f42:	2001      	movs	r0, #1
 8001f44:	42a2      	cmp	r2, r4
 8001f46:	d10a      	bne.n	8001f5e <__eqsf2+0x3a>
 8001f48:	42b5      	cmp	r5, r6
 8001f4a:	d108      	bne.n	8001f5e <__eqsf2+0x3a>
 8001f4c:	428b      	cmp	r3, r1
 8001f4e:	d00f      	beq.n	8001f70 <__eqsf2+0x4c>
 8001f50:	2a00      	cmp	r2, #0
 8001f52:	d104      	bne.n	8001f5e <__eqsf2+0x3a>
 8001f54:	0028      	movs	r0, r5
 8001f56:	1e43      	subs	r3, r0, #1
 8001f58:	4198      	sbcs	r0, r3
 8001f5a:	e000      	b.n	8001f5e <__eqsf2+0x3a>
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	bd70      	pop	{r4, r5, r6, pc}
 8001f60:	2001      	movs	r0, #1
 8001f62:	2cff      	cmp	r4, #255	@ 0xff
 8001f64:	d1fb      	bne.n	8001f5e <__eqsf2+0x3a>
 8001f66:	4335      	orrs	r5, r6
 8001f68:	d1f9      	bne.n	8001f5e <__eqsf2+0x3a>
 8001f6a:	404b      	eors	r3, r1
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	e7f6      	b.n	8001f5e <__eqsf2+0x3a>
 8001f70:	2000      	movs	r0, #0
 8001f72:	e7f4      	b.n	8001f5e <__eqsf2+0x3a>

08001f74 <__gesf2>:
 8001f74:	b530      	push	{r4, r5, lr}
 8001f76:	0042      	lsls	r2, r0, #1
 8001f78:	0244      	lsls	r4, r0, #9
 8001f7a:	024d      	lsls	r5, r1, #9
 8001f7c:	0fc3      	lsrs	r3, r0, #31
 8001f7e:	0048      	lsls	r0, r1, #1
 8001f80:	0a64      	lsrs	r4, r4, #9
 8001f82:	0e12      	lsrs	r2, r2, #24
 8001f84:	0a6d      	lsrs	r5, r5, #9
 8001f86:	0e00      	lsrs	r0, r0, #24
 8001f88:	0fc9      	lsrs	r1, r1, #31
 8001f8a:	2aff      	cmp	r2, #255	@ 0xff
 8001f8c:	d018      	beq.n	8001fc0 <__gesf2+0x4c>
 8001f8e:	28ff      	cmp	r0, #255	@ 0xff
 8001f90:	d00a      	beq.n	8001fa8 <__gesf2+0x34>
 8001f92:	2a00      	cmp	r2, #0
 8001f94:	d11e      	bne.n	8001fd4 <__gesf2+0x60>
 8001f96:	2800      	cmp	r0, #0
 8001f98:	d10a      	bne.n	8001fb0 <__gesf2+0x3c>
 8001f9a:	2d00      	cmp	r5, #0
 8001f9c:	d029      	beq.n	8001ff2 <__gesf2+0x7e>
 8001f9e:	2c00      	cmp	r4, #0
 8001fa0:	d12d      	bne.n	8001ffe <__gesf2+0x8a>
 8001fa2:	0048      	lsls	r0, r1, #1
 8001fa4:	3801      	subs	r0, #1
 8001fa6:	bd30      	pop	{r4, r5, pc}
 8001fa8:	2d00      	cmp	r5, #0
 8001faa:	d125      	bne.n	8001ff8 <__gesf2+0x84>
 8001fac:	2a00      	cmp	r2, #0
 8001fae:	d101      	bne.n	8001fb4 <__gesf2+0x40>
 8001fb0:	2c00      	cmp	r4, #0
 8001fb2:	d0f6      	beq.n	8001fa2 <__gesf2+0x2e>
 8001fb4:	428b      	cmp	r3, r1
 8001fb6:	d019      	beq.n	8001fec <__gesf2+0x78>
 8001fb8:	2001      	movs	r0, #1
 8001fba:	425b      	negs	r3, r3
 8001fbc:	4318      	orrs	r0, r3
 8001fbe:	e7f2      	b.n	8001fa6 <__gesf2+0x32>
 8001fc0:	2c00      	cmp	r4, #0
 8001fc2:	d119      	bne.n	8001ff8 <__gesf2+0x84>
 8001fc4:	28ff      	cmp	r0, #255	@ 0xff
 8001fc6:	d1f7      	bne.n	8001fb8 <__gesf2+0x44>
 8001fc8:	2d00      	cmp	r5, #0
 8001fca:	d115      	bne.n	8001ff8 <__gesf2+0x84>
 8001fcc:	2000      	movs	r0, #0
 8001fce:	428b      	cmp	r3, r1
 8001fd0:	d1f2      	bne.n	8001fb8 <__gesf2+0x44>
 8001fd2:	e7e8      	b.n	8001fa6 <__gesf2+0x32>
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	d0ef      	beq.n	8001fb8 <__gesf2+0x44>
 8001fd8:	428b      	cmp	r3, r1
 8001fda:	d1ed      	bne.n	8001fb8 <__gesf2+0x44>
 8001fdc:	4282      	cmp	r2, r0
 8001fde:	dceb      	bgt.n	8001fb8 <__gesf2+0x44>
 8001fe0:	db04      	blt.n	8001fec <__gesf2+0x78>
 8001fe2:	42ac      	cmp	r4, r5
 8001fe4:	d8e8      	bhi.n	8001fb8 <__gesf2+0x44>
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	42ac      	cmp	r4, r5
 8001fea:	d2dc      	bcs.n	8001fa6 <__gesf2+0x32>
 8001fec:	0058      	lsls	r0, r3, #1
 8001fee:	3801      	subs	r0, #1
 8001ff0:	e7d9      	b.n	8001fa6 <__gesf2+0x32>
 8001ff2:	2c00      	cmp	r4, #0
 8001ff4:	d0d7      	beq.n	8001fa6 <__gesf2+0x32>
 8001ff6:	e7df      	b.n	8001fb8 <__gesf2+0x44>
 8001ff8:	2002      	movs	r0, #2
 8001ffa:	4240      	negs	r0, r0
 8001ffc:	e7d3      	b.n	8001fa6 <__gesf2+0x32>
 8001ffe:	428b      	cmp	r3, r1
 8002000:	d1da      	bne.n	8001fb8 <__gesf2+0x44>
 8002002:	e7ee      	b.n	8001fe2 <__gesf2+0x6e>

08002004 <__lesf2>:
 8002004:	b530      	push	{r4, r5, lr}
 8002006:	0042      	lsls	r2, r0, #1
 8002008:	0244      	lsls	r4, r0, #9
 800200a:	024d      	lsls	r5, r1, #9
 800200c:	0fc3      	lsrs	r3, r0, #31
 800200e:	0048      	lsls	r0, r1, #1
 8002010:	0a64      	lsrs	r4, r4, #9
 8002012:	0e12      	lsrs	r2, r2, #24
 8002014:	0a6d      	lsrs	r5, r5, #9
 8002016:	0e00      	lsrs	r0, r0, #24
 8002018:	0fc9      	lsrs	r1, r1, #31
 800201a:	2aff      	cmp	r2, #255	@ 0xff
 800201c:	d017      	beq.n	800204e <__lesf2+0x4a>
 800201e:	28ff      	cmp	r0, #255	@ 0xff
 8002020:	d00a      	beq.n	8002038 <__lesf2+0x34>
 8002022:	2a00      	cmp	r2, #0
 8002024:	d11b      	bne.n	800205e <__lesf2+0x5a>
 8002026:	2800      	cmp	r0, #0
 8002028:	d10a      	bne.n	8002040 <__lesf2+0x3c>
 800202a:	2d00      	cmp	r5, #0
 800202c:	d01d      	beq.n	800206a <__lesf2+0x66>
 800202e:	2c00      	cmp	r4, #0
 8002030:	d12d      	bne.n	800208e <__lesf2+0x8a>
 8002032:	0048      	lsls	r0, r1, #1
 8002034:	3801      	subs	r0, #1
 8002036:	e011      	b.n	800205c <__lesf2+0x58>
 8002038:	2d00      	cmp	r5, #0
 800203a:	d10e      	bne.n	800205a <__lesf2+0x56>
 800203c:	2a00      	cmp	r2, #0
 800203e:	d101      	bne.n	8002044 <__lesf2+0x40>
 8002040:	2c00      	cmp	r4, #0
 8002042:	d0f6      	beq.n	8002032 <__lesf2+0x2e>
 8002044:	428b      	cmp	r3, r1
 8002046:	d10c      	bne.n	8002062 <__lesf2+0x5e>
 8002048:	0058      	lsls	r0, r3, #1
 800204a:	3801      	subs	r0, #1
 800204c:	e006      	b.n	800205c <__lesf2+0x58>
 800204e:	2c00      	cmp	r4, #0
 8002050:	d103      	bne.n	800205a <__lesf2+0x56>
 8002052:	28ff      	cmp	r0, #255	@ 0xff
 8002054:	d105      	bne.n	8002062 <__lesf2+0x5e>
 8002056:	2d00      	cmp	r5, #0
 8002058:	d015      	beq.n	8002086 <__lesf2+0x82>
 800205a:	2002      	movs	r0, #2
 800205c:	bd30      	pop	{r4, r5, pc}
 800205e:	2800      	cmp	r0, #0
 8002060:	d106      	bne.n	8002070 <__lesf2+0x6c>
 8002062:	2001      	movs	r0, #1
 8002064:	425b      	negs	r3, r3
 8002066:	4318      	orrs	r0, r3
 8002068:	e7f8      	b.n	800205c <__lesf2+0x58>
 800206a:	2c00      	cmp	r4, #0
 800206c:	d0f6      	beq.n	800205c <__lesf2+0x58>
 800206e:	e7f8      	b.n	8002062 <__lesf2+0x5e>
 8002070:	428b      	cmp	r3, r1
 8002072:	d1f6      	bne.n	8002062 <__lesf2+0x5e>
 8002074:	4282      	cmp	r2, r0
 8002076:	dcf4      	bgt.n	8002062 <__lesf2+0x5e>
 8002078:	dbe6      	blt.n	8002048 <__lesf2+0x44>
 800207a:	42ac      	cmp	r4, r5
 800207c:	d8f1      	bhi.n	8002062 <__lesf2+0x5e>
 800207e:	2000      	movs	r0, #0
 8002080:	42ac      	cmp	r4, r5
 8002082:	d2eb      	bcs.n	800205c <__lesf2+0x58>
 8002084:	e7e0      	b.n	8002048 <__lesf2+0x44>
 8002086:	2000      	movs	r0, #0
 8002088:	428b      	cmp	r3, r1
 800208a:	d1ea      	bne.n	8002062 <__lesf2+0x5e>
 800208c:	e7e6      	b.n	800205c <__lesf2+0x58>
 800208e:	428b      	cmp	r3, r1
 8002090:	d1e7      	bne.n	8002062 <__lesf2+0x5e>
 8002092:	e7f2      	b.n	800207a <__lesf2+0x76>

08002094 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	0004      	movs	r4, r0
 800209c:	0008      	movs	r0, r1
 800209e:	0011      	movs	r1, r2
 80020a0:	1dbb      	adds	r3, r7, #6
 80020a2:	1c22      	adds	r2, r4, #0
 80020a4:	801a      	strh	r2, [r3, #0]
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	1c02      	adds	r2, r0, #0
 80020aa:	801a      	strh	r2, [r3, #0]
 80020ac:	1cbb      	adds	r3, r7, #2
 80020ae:	1c0a      	adds	r2, r1, #0
 80020b0:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(y,x, color);
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	8818      	ldrh	r0, [r3, #0]
 80020b6:	1dbb      	adds	r3, r7, #6
 80020b8:	8819      	ldrh	r1, [r3, #0]
 80020ba:	1cbb      	adds	r3, r7, #2
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	001a      	movs	r2, r3
 80020c0:	f000 fee8 	bl	8002e94 <ST7735_DrawPixel>
}
 80020c4:	46c0      	nop			@ (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b003      	add	sp, #12
 80020ca:	bd90      	pop	{r4, r7, pc}

080020cc <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80020cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ce:	46c6      	mov	lr, r8
 80020d0:	b500      	push	{lr}
 80020d2:	b090      	sub	sp, #64	@ 0x40
 80020d4:	af04      	add	r7, sp, #16
 80020d6:	468c      	mov	ip, r1
 80020d8:	0016      	movs	r6, r2
 80020da:	0019      	movs	r1, r3
 80020dc:	221e      	movs	r2, #30
 80020de:	18ba      	adds	r2, r7, r2
 80020e0:	1c03      	adds	r3, r0, #0
 80020e2:	8013      	strh	r3, [r2, #0]
 80020e4:	231c      	movs	r3, #28
 80020e6:	18fb      	adds	r3, r7, r3
 80020e8:	4662      	mov	r2, ip
 80020ea:	801a      	strh	r2, [r3, #0]
 80020ec:	201a      	movs	r0, #26
 80020ee:	183b      	adds	r3, r7, r0
 80020f0:	1c32      	adds	r2, r6, #0
 80020f2:	801a      	strh	r2, [r3, #0]
 80020f4:	2018      	movs	r0, #24
 80020f6:	183b      	adds	r3, r7, r0
 80020f8:	1c0a      	adds	r2, r1, #0
 80020fa:	801a      	strh	r2, [r3, #0]
 80020fc:	466b      	mov	r3, sp
 80020fe:	4698      	mov	r8, r3
	uint16_t pallette[] = {color};
 8002100:	230c      	movs	r3, #12
 8002102:	0001      	movs	r1, r0
 8002104:	185e      	adds	r6, r3, r1
 8002106:	19f2      	adds	r2, r6, r7
 8002108:	2030      	movs	r0, #48	@ 0x30
 800210a:	1846      	adds	r6, r0, r1
 800210c:	19f3      	adds	r3, r6, r7
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	8013      	strh	r3, [r2, #0]
	    uint16_t pixels[w*h][2];
 8002112:	201a      	movs	r0, #26
 8002114:	183b      	adds	r3, r7, r0
 8002116:	2200      	movs	r2, #0
 8002118:	5e9b      	ldrsh	r3, [r3, r2]
 800211a:	187a      	adds	r2, r7, r1
 800211c:	2000      	movs	r0, #0
 800211e:	5e12      	ldrsh	r2, [r2, r0]
 8002120:	4353      	muls	r3, r2
 8002122:	1e5a      	subs	r2, r3, #1
 8002124:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002126:	001a      	movs	r2, r3
 8002128:	60ba      	str	r2, [r7, #8]
 800212a:	2200      	movs	r2, #0
 800212c:	60fa      	str	r2, [r7, #12]
 800212e:	68b8      	ldr	r0, [r7, #8]
 8002130:	68f9      	ldr	r1, [r7, #12]
 8002132:	0002      	movs	r2, r0
 8002134:	0ed2      	lsrs	r2, r2, #27
 8002136:	000e      	movs	r6, r1
 8002138:	0176      	lsls	r6, r6, #5
 800213a:	617e      	str	r6, [r7, #20]
 800213c:	697e      	ldr	r6, [r7, #20]
 800213e:	4316      	orrs	r6, r2
 8002140:	617e      	str	r6, [r7, #20]
 8002142:	0002      	movs	r2, r0
 8002144:	0152      	lsls	r2, r2, #5
 8002146:	613a      	str	r2, [r7, #16]
 8002148:	001a      	movs	r2, r3
 800214a:	603a      	str	r2, [r7, #0]
 800214c:	2200      	movs	r2, #0
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	6838      	ldr	r0, [r7, #0]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	0002      	movs	r2, r0
 8002156:	0ed2      	lsrs	r2, r2, #27
 8002158:	000e      	movs	r6, r1
 800215a:	0175      	lsls	r5, r6, #5
 800215c:	4315      	orrs	r5, r2
 800215e:	0002      	movs	r2, r0
 8002160:	0154      	lsls	r4, r2, #5
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	3307      	adds	r3, #7
 8002166:	08db      	lsrs	r3, r3, #3
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	466a      	mov	r2, sp
 800216c:	1ad2      	subs	r2, r2, r3
 800216e:	4695      	mov	sp, r2
 8002170:	ab04      	add	r3, sp, #16
 8002172:	3301      	adds	r3, #1
 8002174:	085b      	lsrs	r3, r3, #1
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	62bb      	str	r3, [r7, #40]	@ 0x28

	    pixels[0][0] = 0;
 800217a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800217c:	2200      	movs	r2, #0
 800217e:	801a      	strh	r2, [r3, #0]
	    pixels[0][1] = w*h;
 8002180:	201a      	movs	r0, #26
 8002182:	183b      	adds	r3, r7, r0
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	2118      	movs	r1, #24
 8002188:	187a      	adds	r2, r7, r1
 800218a:	8812      	ldrh	r2, [r2, #0]
 800218c:	4353      	muls	r3, r2
 800218e:	b29a      	uxth	r2, r3
 8002190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002192:	805a      	strh	r2, [r3, #2]
	    drawImage(pixels, pallette, x, y, w, h, 1);
 8002194:	221e      	movs	r2, #30
 8002196:	18bb      	adds	r3, r7, r2
 8002198:	881c      	ldrh	r4, [r3, #0]
 800219a:	231c      	movs	r3, #28
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	881d      	ldrh	r5, [r3, #0]
 80021a0:	183b      	adds	r3, r7, r0
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	0008      	movs	r0, r1
 80021a6:	187a      	adds	r2, r7, r1
 80021a8:	8812      	ldrh	r2, [r2, #0]
 80021aa:	210c      	movs	r1, #12
 80021ac:	1809      	adds	r1, r1, r0
 80021ae:	19c9      	adds	r1, r1, r7
 80021b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021b2:	2601      	movs	r6, #1
 80021b4:	46b4      	mov	ip, r6
 80021b6:	4666      	mov	r6, ip
 80021b8:	9602      	str	r6, [sp, #8]
 80021ba:	9201      	str	r2, [sp, #4]
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	002b      	movs	r3, r5
 80021c0:	0022      	movs	r2, r4
 80021c2:	f000 fbc5 	bl	8002950 <drawImage>
 80021c6:	46c5      	mov	sp, r8

	//ST7735_FillRectangle(x, y, w, h, color);
}
 80021c8:	46c0      	nop			@ (mov r8, r8)
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b00c      	add	sp, #48	@ 0x30
 80021ce:	bc80      	pop	{r7}
 80021d0:	46b8      	mov	r8, r7
 80021d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021d4 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 80021d4:	b590      	push	{r4, r7, lr}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	0004      	movs	r4, r0
 80021dc:	0008      	movs	r0, r1
 80021de:	0011      	movs	r1, r2
 80021e0:	1dbb      	adds	r3, r7, #6
 80021e2:	1c22      	adds	r2, r4, #0
 80021e4:	801a      	strh	r2, [r3, #0]
 80021e6:	1d3b      	adds	r3, r7, #4
 80021e8:	1c02      	adds	r2, r0, #0
 80021ea:	801a      	strh	r2, [r3, #0]
 80021ec:	1cbb      	adds	r3, r7, #2
 80021ee:	1c0a      	adds	r2, r1, #0
 80021f0:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 80021f2:	1cbb      	adds	r3, r7, #2
 80021f4:	881a      	ldrh	r2, [r3, #0]
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	2100      	movs	r1, #0
 80021fa:	5e59      	ldrsh	r1, [r3, r1]
 80021fc:	1dbb      	adds	r3, r7, #6
 80021fe:	2000      	movs	r0, #0
 8002200:	5e1b      	ldrsh	r3, [r3, r0]
 8002202:	0018      	movs	r0, r3
 8002204:	f7ff ff46 	bl	8002094 <drawPixel>
}
 8002208:	46c0      	nop			@ (mov r8, r8)
 800220a:	46bd      	mov	sp, r7
 800220c:	b003      	add	sp, #12
 800220e:	bd90      	pop	{r4, r7, pc}

08002210 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8002210:	b5b0      	push	{r4, r5, r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af00      	add	r7, sp, #0
 8002216:	0005      	movs	r5, r0
 8002218:	000c      	movs	r4, r1
 800221a:	0010      	movs	r0, r2
 800221c:	0019      	movs	r1, r3
 800221e:	1dbb      	adds	r3, r7, #6
 8002220:	1c2a      	adds	r2, r5, #0
 8002222:	801a      	strh	r2, [r3, #0]
 8002224:	1d3b      	adds	r3, r7, #4
 8002226:	1c22      	adds	r2, r4, #0
 8002228:	801a      	strh	r2, [r3, #0]
 800222a:	1cbb      	adds	r3, r7, #2
 800222c:	1c02      	adds	r2, r0, #0
 800222e:	801a      	strh	r2, [r3, #0]
 8002230:	003b      	movs	r3, r7
 8002232:	1c0a      	adds	r2, r1, #0
 8002234:	801a      	strh	r2, [r3, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8002236:	003b      	movs	r3, r7
 8002238:	2200      	movs	r2, #0
 800223a:	5e9a      	ldrsh	r2, [r3, r2]
 800223c:	1d3b      	adds	r3, r7, #4
 800223e:	2100      	movs	r1, #0
 8002240:	5e5b      	ldrsh	r3, [r3, r1]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	17d9      	asrs	r1, r3, #31
 8002246:	185a      	adds	r2, r3, r1
 8002248:	404a      	eors	r2, r1
 800224a:	1cbb      	adds	r3, r7, #2
 800224c:	2100      	movs	r1, #0
 800224e:	5e59      	ldrsh	r1, [r3, r1]
 8002250:	1dbb      	adds	r3, r7, #6
 8002252:	2000      	movs	r0, #0
 8002254:	5e1b      	ldrsh	r3, [r3, r0]
 8002256:	1acb      	subs	r3, r1, r3
 8002258:	17d9      	asrs	r1, r3, #31
 800225a:	185b      	adds	r3, r3, r1
 800225c:	404b      	eors	r3, r1
 800225e:	2101      	movs	r1, #1
 8002260:	429a      	cmp	r2, r3
 8002262:	dc01      	bgt.n	8002268 <writeLine+0x58>
 8002264:	2300      	movs	r3, #0
 8002266:	1c19      	adds	r1, r3, #0
 8002268:	b2ca      	uxtb	r2, r1
 800226a:	211a      	movs	r1, #26
 800226c:	187b      	adds	r3, r7, r1
 800226e:	801a      	strh	r2, [r3, #0]
    if (steep) {
 8002270:	187b      	adds	r3, r7, r1
 8002272:	2200      	movs	r2, #0
 8002274:	5e9b      	ldrsh	r3, [r3, r2]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d019      	beq.n	80022ae <writeLine+0x9e>
        _swap_int16_t(x0, y0);
 800227a:	2118      	movs	r1, #24
 800227c:	187b      	adds	r3, r7, r1
 800227e:	1dba      	adds	r2, r7, #6
 8002280:	8812      	ldrh	r2, [r2, #0]
 8002282:	801a      	strh	r2, [r3, #0]
 8002284:	1dbb      	adds	r3, r7, #6
 8002286:	1d3a      	adds	r2, r7, #4
 8002288:	8812      	ldrh	r2, [r2, #0]
 800228a:	801a      	strh	r2, [r3, #0]
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	187a      	adds	r2, r7, r1
 8002290:	8812      	ldrh	r2, [r2, #0]
 8002292:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
 8002294:	2116      	movs	r1, #22
 8002296:	187b      	adds	r3, r7, r1
 8002298:	1cba      	adds	r2, r7, #2
 800229a:	8812      	ldrh	r2, [r2, #0]
 800229c:	801a      	strh	r2, [r3, #0]
 800229e:	1cbb      	adds	r3, r7, #2
 80022a0:	003a      	movs	r2, r7
 80022a2:	8812      	ldrh	r2, [r2, #0]
 80022a4:	801a      	strh	r2, [r3, #0]
 80022a6:	003b      	movs	r3, r7
 80022a8:	187a      	adds	r2, r7, r1
 80022aa:	8812      	ldrh	r2, [r2, #0]
 80022ac:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1) {
 80022ae:	1dba      	adds	r2, r7, #6
 80022b0:	1cbb      	adds	r3, r7, #2
 80022b2:	2100      	movs	r1, #0
 80022b4:	5e52      	ldrsh	r2, [r2, r1]
 80022b6:	2100      	movs	r1, #0
 80022b8:	5e5b      	ldrsh	r3, [r3, r1]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	dd19      	ble.n	80022f2 <writeLine+0xe2>
        _swap_int16_t(x0, x1);
 80022be:	2114      	movs	r1, #20
 80022c0:	187b      	adds	r3, r7, r1
 80022c2:	1dba      	adds	r2, r7, #6
 80022c4:	8812      	ldrh	r2, [r2, #0]
 80022c6:	801a      	strh	r2, [r3, #0]
 80022c8:	1dbb      	adds	r3, r7, #6
 80022ca:	1cba      	adds	r2, r7, #2
 80022cc:	8812      	ldrh	r2, [r2, #0]
 80022ce:	801a      	strh	r2, [r3, #0]
 80022d0:	1cbb      	adds	r3, r7, #2
 80022d2:	187a      	adds	r2, r7, r1
 80022d4:	8812      	ldrh	r2, [r2, #0]
 80022d6:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
 80022d8:	2112      	movs	r1, #18
 80022da:	187b      	adds	r3, r7, r1
 80022dc:	1d3a      	adds	r2, r7, #4
 80022de:	8812      	ldrh	r2, [r2, #0]
 80022e0:	801a      	strh	r2, [r3, #0]
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	003a      	movs	r2, r7
 80022e6:	8812      	ldrh	r2, [r2, #0]
 80022e8:	801a      	strh	r2, [r3, #0]
 80022ea:	003b      	movs	r3, r7
 80022ec:	187a      	adds	r2, r7, r1
 80022ee:	8812      	ldrh	r2, [r2, #0]
 80022f0:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 80022f2:	1cbb      	adds	r3, r7, #2
 80022f4:	881a      	ldrh	r2, [r3, #0]
 80022f6:	1dbb      	adds	r3, r7, #6
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	2010      	movs	r0, #16
 8002300:	183b      	adds	r3, r7, r0
 8002302:	801a      	strh	r2, [r3, #0]
    dy = abs(y1 - y0);
 8002304:	003b      	movs	r3, r7
 8002306:	2200      	movs	r2, #0
 8002308:	5e9a      	ldrsh	r2, [r3, r2]
 800230a:	1d3b      	adds	r3, r7, #4
 800230c:	2100      	movs	r1, #0
 800230e:	5e5b      	ldrsh	r3, [r3, r1]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	17d9      	asrs	r1, r3, #31
 8002314:	185a      	adds	r2, r3, r1
 8002316:	404a      	eors	r2, r1
 8002318:	230e      	movs	r3, #14
 800231a:	18fb      	adds	r3, r7, r3
 800231c:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 800231e:	231e      	movs	r3, #30
 8002320:	18fa      	adds	r2, r7, r3
 8002322:	183b      	adds	r3, r7, r0
 8002324:	2100      	movs	r1, #0
 8002326:	5e5b      	ldrsh	r3, [r3, r1]
 8002328:	2b00      	cmp	r3, #0
 800232a:	da00      	bge.n	800232e <writeLine+0x11e>
 800232c:	3301      	adds	r3, #1
 800232e:	105b      	asrs	r3, r3, #1
 8002330:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
 8002332:	1d3a      	adds	r2, r7, #4
 8002334:	003b      	movs	r3, r7
 8002336:	2100      	movs	r1, #0
 8002338:	5e52      	ldrsh	r2, [r2, r1]
 800233a:	2100      	movs	r1, #0
 800233c:	5e5b      	ldrsh	r3, [r3, r1]
 800233e:	429a      	cmp	r2, r3
 8002340:	da04      	bge.n	800234c <writeLine+0x13c>
        ystep = 1;
 8002342:	231c      	movs	r3, #28
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	2201      	movs	r2, #1
 8002348:	801a      	strh	r2, [r3, #0]
 800234a:	e04d      	b.n	80023e8 <writeLine+0x1d8>
    } else {
        ystep = -1;
 800234c:	231c      	movs	r3, #28
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	2201      	movs	r2, #1
 8002352:	4252      	negs	r2, r2
 8002354:	801a      	strh	r2, [r3, #0]
    }

    for (; x0<=x1; x0++) {
 8002356:	e047      	b.n	80023e8 <writeLine+0x1d8>
        if (steep) {
 8002358:	231a      	movs	r3, #26
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	2200      	movs	r2, #0
 800235e:	5e9b      	ldrsh	r3, [r3, r2]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00c      	beq.n	800237e <writeLine+0x16e>
            writePixel(y0, x0, color);
 8002364:	2330      	movs	r3, #48	@ 0x30
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	881a      	ldrh	r2, [r3, #0]
 800236a:	1dbb      	adds	r3, r7, #6
 800236c:	2100      	movs	r1, #0
 800236e:	5e59      	ldrsh	r1, [r3, r1]
 8002370:	1d3b      	adds	r3, r7, #4
 8002372:	2000      	movs	r0, #0
 8002374:	5e1b      	ldrsh	r3, [r3, r0]
 8002376:	0018      	movs	r0, r3
 8002378:	f7ff ff2c 	bl	80021d4 <writePixel>
 800237c:	e00b      	b.n	8002396 <writeLine+0x186>
        } else {
            writePixel(x0, y0, color);
 800237e:	2330      	movs	r3, #48	@ 0x30
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	881a      	ldrh	r2, [r3, #0]
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	2100      	movs	r1, #0
 8002388:	5e59      	ldrsh	r1, [r3, r1]
 800238a:	1dbb      	adds	r3, r7, #6
 800238c:	2000      	movs	r0, #0
 800238e:	5e1b      	ldrsh	r3, [r3, r0]
 8002390:	0018      	movs	r0, r3
 8002392:	f7ff ff1f 	bl	80021d4 <writePixel>
        }
        err -= dy;
 8002396:	211e      	movs	r1, #30
 8002398:	187b      	adds	r3, r7, r1
 800239a:	881a      	ldrh	r2, [r3, #0]
 800239c:	230e      	movs	r3, #14
 800239e:	18fb      	adds	r3, r7, r3
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	187b      	adds	r3, r7, r1
 80023a8:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
 80023aa:	187b      	adds	r3, r7, r1
 80023ac:	2200      	movs	r2, #0
 80023ae:	5e9b      	ldrsh	r3, [r3, r2]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	da11      	bge.n	80023d8 <writeLine+0x1c8>
            y0 += ystep;
 80023b4:	1d3b      	adds	r3, r7, #4
 80023b6:	881a      	ldrh	r2, [r3, #0]
 80023b8:	231c      	movs	r3, #28
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	18d3      	adds	r3, r2, r3
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	801a      	strh	r2, [r3, #0]
            err += dx;
 80023c6:	187b      	adds	r3, r7, r1
 80023c8:	881a      	ldrh	r2, [r3, #0]
 80023ca:	2310      	movs	r3, #16
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	18d3      	adds	r3, r2, r3
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	187b      	adds	r3, r7, r1
 80023d6:	801a      	strh	r2, [r3, #0]
    for (; x0<=x1; x0++) {
 80023d8:	1dbb      	adds	r3, r7, #6
 80023da:	2200      	movs	r2, #0
 80023dc:	5e9b      	ldrsh	r3, [r3, r2]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	3301      	adds	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	1dbb      	adds	r3, r7, #6
 80023e6:	801a      	strh	r2, [r3, #0]
 80023e8:	1dba      	adds	r2, r7, #6
 80023ea:	1cbb      	adds	r3, r7, #2
 80023ec:	2100      	movs	r1, #0
 80023ee:	5e52      	ldrsh	r2, [r2, r1]
 80023f0:	2100      	movs	r1, #0
 80023f2:	5e5b      	ldrsh	r3, [r3, r1]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	ddaf      	ble.n	8002358 <writeLine+0x148>
        }
    }
}
 80023f8:	46c0      	nop			@ (mov r8, r8)
 80023fa:	46c0      	nop			@ (mov r8, r8)
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b008      	add	sp, #32
 8002400:	bdb0      	pop	{r4, r5, r7, pc}

08002402 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8002402:	b5b0      	push	{r4, r5, r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af02      	add	r7, sp, #8
 8002408:	0005      	movs	r5, r0
 800240a:	000c      	movs	r4, r1
 800240c:	0010      	movs	r0, r2
 800240e:	0019      	movs	r1, r3
 8002410:	1dbb      	adds	r3, r7, #6
 8002412:	1c2a      	adds	r2, r5, #0
 8002414:	801a      	strh	r2, [r3, #0]
 8002416:	1d3b      	adds	r3, r7, #4
 8002418:	1c22      	adds	r2, r4, #0
 800241a:	801a      	strh	r2, [r3, #0]
 800241c:	1cbb      	adds	r3, r7, #2
 800241e:	1c02      	adds	r2, r0, #0
 8002420:	801a      	strh	r2, [r3, #0]
 8002422:	003b      	movs	r3, r7
 8002424:	1c0a      	adds	r2, r1, #0
 8002426:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x, y + h - 1, color);
 8002428:	1d3b      	adds	r3, r7, #4
 800242a:	881a      	ldrh	r2, [r3, #0]
 800242c:	1cbb      	adds	r3, r7, #2
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	18d3      	adds	r3, r2, r3
 8002432:	b29b      	uxth	r3, r3
 8002434:	3b01      	subs	r3, #1
 8002436:	b29b      	uxth	r3, r3
 8002438:	b21c      	sxth	r4, r3
 800243a:	1dbb      	adds	r3, r7, #6
 800243c:	2200      	movs	r2, #0
 800243e:	5e9a      	ldrsh	r2, [r3, r2]
 8002440:	1d3b      	adds	r3, r7, #4
 8002442:	2100      	movs	r1, #0
 8002444:	5e59      	ldrsh	r1, [r3, r1]
 8002446:	1dbb      	adds	r3, r7, #6
 8002448:	2000      	movs	r0, #0
 800244a:	5e18      	ldrsh	r0, [r3, r0]
 800244c:	003b      	movs	r3, r7
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	0023      	movs	r3, r4
 8002454:	f7ff fedc 	bl	8002210 <writeLine>
}
 8002458:	46c0      	nop			@ (mov r8, r8)
 800245a:	46bd      	mov	sp, r7
 800245c:	b002      	add	sp, #8
 800245e:	bdb0      	pop	{r4, r5, r7, pc}

08002460 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8002460:	b5b0      	push	{r4, r5, r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af02      	add	r7, sp, #8
 8002466:	0005      	movs	r5, r0
 8002468:	000c      	movs	r4, r1
 800246a:	0010      	movs	r0, r2
 800246c:	0019      	movs	r1, r3
 800246e:	1dbb      	adds	r3, r7, #6
 8002470:	1c2a      	adds	r2, r5, #0
 8002472:	801a      	strh	r2, [r3, #0]
 8002474:	1d3b      	adds	r3, r7, #4
 8002476:	1c22      	adds	r2, r4, #0
 8002478:	801a      	strh	r2, [r3, #0]
 800247a:	1cbb      	adds	r3, r7, #2
 800247c:	1c02      	adds	r2, r0, #0
 800247e:	801a      	strh	r2, [r3, #0]
 8002480:	003b      	movs	r3, r7
 8002482:	1c0a      	adds	r2, r1, #0
 8002484:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x + w - 1, y, color);
 8002486:	1dbb      	adds	r3, r7, #6
 8002488:	881a      	ldrh	r2, [r3, #0]
 800248a:	1cbb      	adds	r3, r7, #2
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	18d3      	adds	r3, r2, r3
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29b      	uxth	r3, r3
 8002496:	b21a      	sxth	r2, r3
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	2400      	movs	r4, #0
 800249c:	5f1c      	ldrsh	r4, [r3, r4]
 800249e:	1d3b      	adds	r3, r7, #4
 80024a0:	2100      	movs	r1, #0
 80024a2:	5e59      	ldrsh	r1, [r3, r1]
 80024a4:	1dbb      	adds	r3, r7, #6
 80024a6:	2000      	movs	r0, #0
 80024a8:	5e18      	ldrsh	r0, [r3, r0]
 80024aa:	003b      	movs	r3, r7
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	0023      	movs	r3, r4
 80024b2:	f7ff fead 	bl	8002210 <writeLine>
}
 80024b6:	46c0      	nop			@ (mov r8, r8)
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b002      	add	sp, #8
 80024bc:	bdb0      	pop	{r4, r5, r7, pc}

080024be <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80024be:	b5b0      	push	{r4, r5, r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af02      	add	r7, sp, #8
 80024c4:	0005      	movs	r5, r0
 80024c6:	000c      	movs	r4, r1
 80024c8:	0010      	movs	r0, r2
 80024ca:	0019      	movs	r1, r3
 80024cc:	1dbb      	adds	r3, r7, #6
 80024ce:	1c2a      	adds	r2, r5, #0
 80024d0:	801a      	strh	r2, [r3, #0]
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	1c22      	adds	r2, r4, #0
 80024d6:	801a      	strh	r2, [r3, #0]
 80024d8:	1cbb      	adds	r3, r7, #2
 80024da:	1c02      	adds	r2, r0, #0
 80024dc:	801a      	strh	r2, [r3, #0]
 80024de:	003b      	movs	r3, r7
 80024e0:	1c0a      	adds	r2, r1, #0
 80024e2:	801a      	strh	r2, [r3, #0]
    if(x0 == x1){
 80024e4:	1dba      	adds	r2, r7, #6
 80024e6:	1cbb      	adds	r3, r7, #2
 80024e8:	2100      	movs	r1, #0
 80024ea:	5e52      	ldrsh	r2, [r2, r1]
 80024ec:	2100      	movs	r1, #0
 80024ee:	5e5b      	ldrsh	r3, [r3, r1]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d12a      	bne.n	800254a <drawLine+0x8c>
        if(y0 > y1) _swap_int16_t(y0, y1);
 80024f4:	1d3a      	adds	r2, r7, #4
 80024f6:	003b      	movs	r3, r7
 80024f8:	2100      	movs	r1, #0
 80024fa:	5e52      	ldrsh	r2, [r2, r1]
 80024fc:	2100      	movs	r1, #0
 80024fe:	5e5b      	ldrsh	r3, [r3, r1]
 8002500:	429a      	cmp	r2, r3
 8002502:	dd0c      	ble.n	800251e <drawLine+0x60>
 8002504:	210c      	movs	r1, #12
 8002506:	187b      	adds	r3, r7, r1
 8002508:	1d3a      	adds	r2, r7, #4
 800250a:	8812      	ldrh	r2, [r2, #0]
 800250c:	801a      	strh	r2, [r3, #0]
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	003a      	movs	r2, r7
 8002512:	8812      	ldrh	r2, [r2, #0]
 8002514:	801a      	strh	r2, [r3, #0]
 8002516:	003b      	movs	r3, r7
 8002518:	187a      	adds	r2, r7, r1
 800251a:	8812      	ldrh	r2, [r2, #0]
 800251c:	801a      	strh	r2, [r3, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 800251e:	003b      	movs	r3, r7
 8002520:	881a      	ldrh	r2, [r3, #0]
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	b29b      	uxth	r3, r3
 800252a:	3301      	adds	r3, #1
 800252c:	b29b      	uxth	r3, r3
 800252e:	b21a      	sxth	r2, r3
 8002530:	2320      	movs	r3, #32
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	881c      	ldrh	r4, [r3, #0]
 8002536:	1d3b      	adds	r3, r7, #4
 8002538:	2100      	movs	r1, #0
 800253a:	5e59      	ldrsh	r1, [r3, r1]
 800253c:	1dbb      	adds	r3, r7, #6
 800253e:	2000      	movs	r0, #0
 8002540:	5e18      	ldrsh	r0, [r3, r0]
 8002542:	0023      	movs	r3, r4
 8002544:	f7ff ff5d 	bl	8002402 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 8002548:	e045      	b.n	80025d6 <drawLine+0x118>
    } else if(y0 == y1){
 800254a:	1d3a      	adds	r2, r7, #4
 800254c:	003b      	movs	r3, r7
 800254e:	2100      	movs	r1, #0
 8002550:	5e52      	ldrsh	r2, [r2, r1]
 8002552:	2100      	movs	r1, #0
 8002554:	5e5b      	ldrsh	r3, [r3, r1]
 8002556:	429a      	cmp	r2, r3
 8002558:	d12a      	bne.n	80025b0 <drawLine+0xf2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 800255a:	1dba      	adds	r2, r7, #6
 800255c:	1cbb      	adds	r3, r7, #2
 800255e:	2100      	movs	r1, #0
 8002560:	5e52      	ldrsh	r2, [r2, r1]
 8002562:	2100      	movs	r1, #0
 8002564:	5e5b      	ldrsh	r3, [r3, r1]
 8002566:	429a      	cmp	r2, r3
 8002568:	dd0c      	ble.n	8002584 <drawLine+0xc6>
 800256a:	210e      	movs	r1, #14
 800256c:	187b      	adds	r3, r7, r1
 800256e:	1dba      	adds	r2, r7, #6
 8002570:	8812      	ldrh	r2, [r2, #0]
 8002572:	801a      	strh	r2, [r3, #0]
 8002574:	1dbb      	adds	r3, r7, #6
 8002576:	1cba      	adds	r2, r7, #2
 8002578:	8812      	ldrh	r2, [r2, #0]
 800257a:	801a      	strh	r2, [r3, #0]
 800257c:	1cbb      	adds	r3, r7, #2
 800257e:	187a      	adds	r2, r7, r1
 8002580:	8812      	ldrh	r2, [r2, #0]
 8002582:	801a      	strh	r2, [r3, #0]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8002584:	1cbb      	adds	r3, r7, #2
 8002586:	881a      	ldrh	r2, [r3, #0]
 8002588:	1dbb      	adds	r3, r7, #6
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	b29b      	uxth	r3, r3
 8002590:	3301      	adds	r3, #1
 8002592:	b29b      	uxth	r3, r3
 8002594:	b21a      	sxth	r2, r3
 8002596:	2320      	movs	r3, #32
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	881c      	ldrh	r4, [r3, #0]
 800259c:	1d3b      	adds	r3, r7, #4
 800259e:	2100      	movs	r1, #0
 80025a0:	5e59      	ldrsh	r1, [r3, r1]
 80025a2:	1dbb      	adds	r3, r7, #6
 80025a4:	2000      	movs	r0, #0
 80025a6:	5e18      	ldrsh	r0, [r3, r0]
 80025a8:	0023      	movs	r3, r4
 80025aa:	f7ff ff59 	bl	8002460 <drawFastHLine>
}
 80025ae:	e012      	b.n	80025d6 <drawLine+0x118>
        writeLine(x0, y0, x1, y1, color);
 80025b0:	003b      	movs	r3, r7
 80025b2:	2400      	movs	r4, #0
 80025b4:	5f1c      	ldrsh	r4, [r3, r4]
 80025b6:	1cbb      	adds	r3, r7, #2
 80025b8:	2200      	movs	r2, #0
 80025ba:	5e9a      	ldrsh	r2, [r3, r2]
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	2100      	movs	r1, #0
 80025c0:	5e59      	ldrsh	r1, [r3, r1]
 80025c2:	1dbb      	adds	r3, r7, #6
 80025c4:	2000      	movs	r0, #0
 80025c6:	5e18      	ldrsh	r0, [r3, r0]
 80025c8:	2320      	movs	r3, #32
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	0023      	movs	r3, r4
 80025d2:	f7ff fe1d 	bl	8002210 <writeLine>
}
 80025d6:	46c0      	nop			@ (mov r8, r8)
 80025d8:	46bd      	mov	sp, r7
 80025da:	b004      	add	sp, #16
 80025dc:	bdb0      	pop	{r4, r5, r7, pc}

080025de <drawString>:
void drawString(int16_t x, int16_t y, char* c, int16_t textColor, int16_t bgColor, uint8_t size, uint8_t spacing)
{
 80025de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025e0:	b089      	sub	sp, #36	@ 0x24
 80025e2:	af02      	add	r7, sp, #8
 80025e4:	0004      	movs	r4, r0
 80025e6:	0008      	movs	r0, r1
 80025e8:	60ba      	str	r2, [r7, #8]
 80025ea:	0019      	movs	r1, r3
 80025ec:	230e      	movs	r3, #14
 80025ee:	18fb      	adds	r3, r7, r3
 80025f0:	1c22      	adds	r2, r4, #0
 80025f2:	801a      	strh	r2, [r3, #0]
 80025f4:	230c      	movs	r3, #12
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	1c02      	adds	r2, r0, #0
 80025fa:	801a      	strh	r2, [r3, #0]
 80025fc:	1dbb      	adds	r3, r7, #6
 80025fe:	1c0a      	adds	r2, r1, #0
 8002600:	801a      	strh	r2, [r3, #0]
	uint16_t i =0;
 8002602:	2316      	movs	r3, #22
 8002604:	18fb      	adds	r3, r7, r3
 8002606:	2200      	movs	r2, #0
 8002608:	801a      	strh	r2, [r3, #0]

	while(c[i])
 800260a:	e03f      	b.n	800268c <drawString+0xae>
	{
		drawChar(x, y, c[i], textColor, bgColor, size);
 800260c:	2516      	movs	r5, #22
 800260e:	197b      	adds	r3, r7, r5
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	18d3      	adds	r3, r2, r3
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	469c      	mov	ip, r3
 800261a:	1dbb      	adds	r3, r7, #6
 800261c:	2400      	movs	r4, #0
 800261e:	5f1c      	ldrsh	r4, [r3, r4]
 8002620:	230c      	movs	r3, #12
 8002622:	18fb      	adds	r3, r7, r3
 8002624:	2100      	movs	r1, #0
 8002626:	5e59      	ldrsh	r1, [r3, r1]
 8002628:	260e      	movs	r6, #14
 800262a:	19bb      	adds	r3, r7, r6
 800262c:	2000      	movs	r0, #0
 800262e:	5e18      	ldrsh	r0, [r3, r0]
 8002630:	232c      	movs	r3, #44	@ 0x2c
 8002632:	2208      	movs	r2, #8
 8002634:	189b      	adds	r3, r3, r2
 8002636:	19db      	adds	r3, r3, r7
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	9301      	str	r3, [sp, #4]
 800263c:	2328      	movs	r3, #40	@ 0x28
 800263e:	189b      	adds	r3, r3, r2
 8002640:	19db      	adds	r3, r3, r7
 8002642:	2200      	movs	r2, #0
 8002644:	5e9b      	ldrsh	r3, [r3, r2]
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	0023      	movs	r3, r4
 800264a:	4662      	mov	r2, ip
 800264c:	f000 f82c 	bl	80026a8 <drawChar>
		x+=(size*6)+spacing;
 8002650:	232c      	movs	r3, #44	@ 0x2c
 8002652:	2108      	movs	r1, #8
 8002654:	185b      	adds	r3, r3, r1
 8002656:	19db      	adds	r3, r3, r7
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	b29b      	uxth	r3, r3
 800265c:	1c1a      	adds	r2, r3, #0
 800265e:	1c13      	adds	r3, r2, #0
 8002660:	18db      	adds	r3, r3, r3
 8002662:	189b      	adds	r3, r3, r2
 8002664:	18db      	adds	r3, r3, r3
 8002666:	b29a      	uxth	r2, r3
 8002668:	2330      	movs	r3, #48	@ 0x30
 800266a:	185b      	adds	r3, r3, r1
 800266c:	19db      	adds	r3, r3, r7
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	b29b      	uxth	r3, r3
 8002672:	18d3      	adds	r3, r2, r3
 8002674:	b29a      	uxth	r2, r3
 8002676:	19bb      	adds	r3, r7, r6
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	18d3      	adds	r3, r2, r3
 800267c:	b29a      	uxth	r2, r3
 800267e:	19bb      	adds	r3, r7, r6
 8002680:	801a      	strh	r2, [r3, #0]
		i++;
 8002682:	197b      	adds	r3, r7, r5
 8002684:	881a      	ldrh	r2, [r3, #0]
 8002686:	197b      	adds	r3, r7, r5
 8002688:	3201      	adds	r2, #1
 800268a:	801a      	strh	r2, [r3, #0]
	while(c[i])
 800268c:	2316      	movs	r3, #22
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	18d3      	adds	r3, r2, r3
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1b7      	bne.n	800260c <drawString+0x2e>
	}
}
 800269c:	46c0      	nop			@ (mov r8, r8)
 800269e:	46c0      	nop			@ (mov r8, r8)
 80026a0:	46bd      	mov	sp, r7
 80026a2:	b007      	add	sp, #28
 80026a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080026a8 <drawChar>:
void drawChar(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 80026a8:	b5b0      	push	{r4, r5, r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af02      	add	r7, sp, #8
 80026ae:	0005      	movs	r5, r0
 80026b0:	000c      	movs	r4, r1
 80026b2:	0010      	movs	r0, r2
 80026b4:	0019      	movs	r1, r3
 80026b6:	1dbb      	adds	r3, r7, #6
 80026b8:	1c2a      	adds	r2, r5, #0
 80026ba:	801a      	strh	r2, [r3, #0]
 80026bc:	1d3b      	adds	r3, r7, #4
 80026be:	1c22      	adds	r2, r4, #0
 80026c0:	801a      	strh	r2, [r3, #0]
 80026c2:	1cfb      	adds	r3, r7, #3
 80026c4:	1c02      	adds	r2, r0, #0
 80026c6:	701a      	strb	r2, [r3, #0]
 80026c8:	003b      	movs	r3, r7
 80026ca:	1c0a      	adds	r2, r1, #0
 80026cc:	801a      	strh	r2, [r3, #0]
     //(y >= _height))           //||
     //((x + 5 * size - 1) < 0) ||
     //((y + 8 * size - 1) < 0))
   // return;

  for (i=0; i<6; i++ ) {
 80026ce:	2300      	movs	r3, #0
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	e0bd      	b.n	8002850 <drawChar+0x1a8>
    if ((i) == 5)
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	2b05      	cmp	r3, #5
 80026d8:	d104      	bne.n	80026e4 <drawChar+0x3c>
      line = 0x0;
 80026da:	2317      	movs	r3, #23
 80026dc:	18fb      	adds	r3, r7, r3
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
 80026e2:	e00b      	b.n	80026fc <drawChar+0x54>
    else
      line = Font[(c*5)+(i)];
 80026e4:	1cfb      	adds	r3, r7, #3
 80026e6:	781a      	ldrb	r2, [r3, #0]
 80026e8:	0013      	movs	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	189a      	adds	r2, r3, r2
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	18d2      	adds	r2, r2, r3
 80026f2:	2317      	movs	r3, #23
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	495b      	ldr	r1, [pc, #364]	@ (8002864 <drawChar+0x1bc>)
 80026f8:	5c8a      	ldrb	r2, [r1, r2]
 80026fa:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 80026fc:	2300      	movs	r3, #0
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	e09f      	b.n	8002842 <drawChar+0x19a>
      if (line & 0x1) {
 8002702:	2317      	movs	r3, #23
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2201      	movs	r2, #1
 800270a:	4013      	ands	r3, r2
 800270c:	d043      	beq.n	8002796 <drawChar+0xee>
        if (size == 1)
 800270e:	232c      	movs	r3, #44	@ 0x2c
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d115      	bne.n	8002744 <drawChar+0x9c>
          writePixel(x+(i), y+(7-j), textColor);
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	b29a      	uxth	r2, r3
 800271c:	1dbb      	adds	r3, r7, #6
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	18d3      	adds	r3, r2, r3
 8002722:	b29b      	uxth	r3, r3
 8002724:	b218      	sxth	r0, r3
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	881a      	ldrh	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	b29b      	uxth	r3, r3
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	b29b      	uxth	r3, r3
 8002732:	3307      	adds	r3, #7
 8002734:	b29b      	uxth	r3, r3
 8002736:	b219      	sxth	r1, r3
 8002738:	003b      	movs	r3, r7
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	001a      	movs	r2, r3
 800273e:	f7ff fd49 	bl	80021d4 <writePixel>
 8002742:	e075      	b.n	8002830 <drawChar+0x188>
        else {
          fillRect(x+((i)*size), y+((7-j)*size), size, size, textColor);
 8002744:	212c      	movs	r1, #44	@ 0x2c
 8002746:	187b      	adds	r3, r7, r1
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	b292      	uxth	r2, r2
 8002750:	4353      	muls	r3, r2
 8002752:	b29a      	uxth	r2, r3
 8002754:	1dbb      	adds	r3, r7, #6
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	18d3      	adds	r3, r2, r3
 800275a:	b29b      	uxth	r3, r3
 800275c:	b218      	sxth	r0, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2207      	movs	r2, #7
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	b29b      	uxth	r3, r3
 8002766:	000c      	movs	r4, r1
 8002768:	187a      	adds	r2, r7, r1
 800276a:	7812      	ldrb	r2, [r2, #0]
 800276c:	b292      	uxth	r2, r2
 800276e:	4353      	muls	r3, r2
 8002770:	b29a      	uxth	r2, r3
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	18d3      	adds	r3, r2, r3
 8002778:	b29b      	uxth	r3, r3
 800277a:	b219      	sxth	r1, r3
 800277c:	193b      	adds	r3, r7, r4
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	b21a      	sxth	r2, r3
 8002782:	193b      	adds	r3, r7, r4
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	b21c      	sxth	r4, r3
 8002788:	003b      	movs	r3, r7
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	0023      	movs	r3, r4
 8002790:	f7ff fc9c 	bl	80020cc <fillRect>
 8002794:	e04c      	b.n	8002830 <drawChar+0x188>
        }
      } else if (bgColor != textColor) {
 8002796:	2428      	movs	r4, #40	@ 0x28
 8002798:	193b      	adds	r3, r7, r4
 800279a:	0039      	movs	r1, r7
 800279c:	2200      	movs	r2, #0
 800279e:	5e9a      	ldrsh	r2, [r3, r2]
 80027a0:	2300      	movs	r3, #0
 80027a2:	5ecb      	ldrsh	r3, [r1, r3]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d043      	beq.n	8002830 <drawChar+0x188>
        if (size == 1) // default size
 80027a8:	232c      	movs	r3, #44	@ 0x2c
 80027aa:	18fb      	adds	r3, r7, r3
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d115      	bne.n	80027de <drawChar+0x136>
          writePixel(x+(i), y+(7-j), bgColor);
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	1dbb      	adds	r3, r7, #6
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	18d3      	adds	r3, r2, r3
 80027bc:	b29b      	uxth	r3, r3
 80027be:	b218      	sxth	r0, r3
 80027c0:	1d3b      	adds	r3, r7, #4
 80027c2:	881a      	ldrh	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3307      	adds	r3, #7
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	b219      	sxth	r1, r3
 80027d2:	193b      	adds	r3, r7, r4
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	001a      	movs	r2, r3
 80027d8:	f7ff fcfc 	bl	80021d4 <writePixel>
 80027dc:	e028      	b.n	8002830 <drawChar+0x188>
        else {  // big size
          fillRect(x+(i)*size, y+(7-j)*size, size, size, bgColor);
 80027de:	212c      	movs	r1, #44	@ 0x2c
 80027e0:	187b      	adds	r3, r7, r1
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	b292      	uxth	r2, r2
 80027ea:	4353      	muls	r3, r2
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	1dbb      	adds	r3, r7, #6
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	18d3      	adds	r3, r2, r3
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	b218      	sxth	r0, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2207      	movs	r2, #7
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	b29b      	uxth	r3, r3
 8002800:	000c      	movs	r4, r1
 8002802:	187a      	adds	r2, r7, r1
 8002804:	7812      	ldrb	r2, [r2, #0]
 8002806:	b292      	uxth	r2, r2
 8002808:	4353      	muls	r3, r2
 800280a:	b29a      	uxth	r2, r3
 800280c:	1d3b      	adds	r3, r7, #4
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	18d3      	adds	r3, r2, r3
 8002812:	b29b      	uxth	r3, r3
 8002814:	b219      	sxth	r1, r3
 8002816:	193b      	adds	r3, r7, r4
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b21a      	sxth	r2, r3
 800281c:	193b      	adds	r3, r7, r4
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	b21c      	sxth	r4, r3
 8002822:	2328      	movs	r3, #40	@ 0x28
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	0023      	movs	r3, r4
 800282c:	f7ff fc4e 	bl	80020cc <fillRect>
        }
      }
      line >>= 1;
 8002830:	2217      	movs	r2, #23
 8002832:	18bb      	adds	r3, r7, r2
 8002834:	18ba      	adds	r2, r7, r2
 8002836:	7812      	ldrb	r2, [r2, #0]
 8002838:	0852      	lsrs	r2, r2, #1
 800283a:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3301      	adds	r3, #1
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2b07      	cmp	r3, #7
 8002846:	dc00      	bgt.n	800284a <drawChar+0x1a2>
 8002848:	e75b      	b.n	8002702 <drawChar+0x5a>
  for (i=0; i<6; i++ ) {
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	3301      	adds	r3, #1
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	2b05      	cmp	r3, #5
 8002854:	dc00      	bgt.n	8002858 <drawChar+0x1b0>
 8002856:	e73d      	b.n	80026d4 <drawChar+0x2c>
    }
  }
}
 8002858:	46c0      	nop			@ (mov r8, r8)
 800285a:	46c0      	nop			@ (mov r8, r8)
 800285c:	46bd      	mov	sp, r7
 800285e:	b006      	add	sp, #24
 8002860:	bdb0      	pop	{r4, r5, r7, pc}
 8002862:	46c0      	nop			@ (mov r8, r8)
 8002864:	08009ef4 	.word	0x08009ef4

08002868 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8002868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800286a:	b091      	sub	sp, #68	@ 0x44
 800286c:	af04      	add	r7, sp, #16
 800286e:	231e      	movs	r3, #30
 8002870:	18f9      	adds	r1, r7, r3
 8002872:	8008      	strh	r0, [r1, #0]
 8002874:	4669      	mov	r1, sp
 8002876:	000e      	movs	r6, r1
    uint16_t pallette[] = {color};
 8002878:	210c      	movs	r1, #12
 800287a:	2318      	movs	r3, #24
 800287c:	18cb      	adds	r3, r1, r3
 800287e:	19d9      	adds	r1, r3, r7
 8002880:	231e      	movs	r3, #30
 8002882:	18f8      	adds	r0, r7, r3
 8002884:	8800      	ldrh	r0, [r0, #0]
 8002886:	8008      	strh	r0, [r1, #0]
    uint16_t pixels[_width*_height][2];
 8002888:	492f      	ldr	r1, [pc, #188]	@ (8002948 <fillScreen+0xe0>)
 800288a:	2300      	movs	r3, #0
 800288c:	5ec9      	ldrsh	r1, [r1, r3]
 800288e:	0008      	movs	r0, r1
 8002890:	492e      	ldr	r1, [pc, #184]	@ (800294c <fillScreen+0xe4>)
 8002892:	2300      	movs	r3, #0
 8002894:	5ec9      	ldrsh	r1, [r1, r3]
 8002896:	4341      	muls	r1, r0
 8002898:	1e48      	subs	r0, r1, #1
 800289a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800289c:	0008      	movs	r0, r1
 800289e:	6138      	str	r0, [r7, #16]
 80028a0:	2000      	movs	r0, #0
 80028a2:	6178      	str	r0, [r7, #20]
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	0010      	movs	r0, r2
 80028aa:	0ec0      	lsrs	r0, r0, #27
 80028ac:	613a      	str	r2, [r7, #16]
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	015d      	lsls	r5, r3, #5
 80028b2:	4305      	orrs	r5, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	015c      	lsls	r4, r3, #5
 80028b8:	0008      	movs	r0, r1
 80028ba:	6038      	str	r0, [r7, #0]
 80028bc:	2000      	movs	r0, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	683c      	ldr	r4, [r7, #0]
 80028c2:	687d      	ldr	r5, [r7, #4]
 80028c4:	0023      	movs	r3, r4
 80028c6:	0ed8      	lsrs	r0, r3, #27
 80028c8:	002b      	movs	r3, r5
 80028ca:	015b      	lsls	r3, r3, #5
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	4303      	orrs	r3, r0
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	0023      	movs	r3, r4
 80028d6:	015b      	lsls	r3, r3, #5
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	000b      	movs	r3, r1
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	3307      	adds	r3, #7
 80028e0:	08db      	lsrs	r3, r3, #3
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	466a      	mov	r2, sp
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	469d      	mov	sp, r3
 80028ea:	ab04      	add	r3, sp, #16
 80028ec:	3301      	adds	r3, #1
 80028ee:	085b      	lsrs	r3, r3, #1
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	62bb      	str	r3, [r7, #40]	@ 0x28

    pixels[0][0] = 0;
 80028f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f6:	2200      	movs	r2, #0
 80028f8:	801a      	strh	r2, [r3, #0]
    pixels[0][1] = _width*_height;
 80028fa:	4b13      	ldr	r3, [pc, #76]	@ (8002948 <fillScreen+0xe0>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	5e9b      	ldrsh	r3, [r3, r2]
 8002900:	b29b      	uxth	r3, r3
 8002902:	4a12      	ldr	r2, [pc, #72]	@ (800294c <fillScreen+0xe4>)
 8002904:	2000      	movs	r0, #0
 8002906:	5e12      	ldrsh	r2, [r2, r0]
 8002908:	b292      	uxth	r2, r2
 800290a:	4353      	muls	r3, r2
 800290c:	b29a      	uxth	r2, r3
 800290e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002910:	805a      	strh	r2, [r3, #2]
    drawImage(pixels, pallette, 0, 0, _width, _height, 1);
 8002912:	4b0d      	ldr	r3, [pc, #52]	@ (8002948 <fillScreen+0xe0>)
 8002914:	2200      	movs	r2, #0
 8002916:	5e9b      	ldrsh	r3, [r3, r2]
 8002918:	b29b      	uxth	r3, r3
 800291a:	4a0c      	ldr	r2, [pc, #48]	@ (800294c <fillScreen+0xe4>)
 800291c:	2000      	movs	r0, #0
 800291e:	5e12      	ldrsh	r2, [r2, r0]
 8002920:	b292      	uxth	r2, r2
 8002922:	210c      	movs	r1, #12
 8002924:	2018      	movs	r0, #24
 8002926:	1809      	adds	r1, r1, r0
 8002928:	19c9      	adds	r1, r1, r7
 800292a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800292c:	2401      	movs	r4, #1
 800292e:	9402      	str	r4, [sp, #8]
 8002930:	9201      	str	r2, [sp, #4]
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	2300      	movs	r3, #0
 8002936:	2200      	movs	r2, #0
 8002938:	f000 f80a 	bl	8002950 <drawImage>
 800293c:	46b5      	mov	sp, r6
	//fillRect(0, 0, _width, _height, color);
}
 800293e:	46c0      	nop			@ (mov r8, r8)
 8002940:	46bd      	mov	sp, r7
 8002942:	b00d      	add	sp, #52	@ 0x34
 8002944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002946:	46c0      	nop			@ (mov r8, r8)
 8002948:	20000a5c 	.word	0x20000a5c
 800294c:	20000a5e 	.word	0x20000a5e

08002950 <drawImage>:

void drawImage(uint16_t image[][2], uint16_t palette[], uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
{
 8002950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002952:	46c6      	mov	lr, r8
 8002954:	b500      	push	{lr}
 8002956:	b092      	sub	sp, #72	@ 0x48
 8002958:	af02      	add	r7, sp, #8
 800295a:	6278      	str	r0, [r7, #36]	@ 0x24
 800295c:	6239      	str	r1, [r7, #32]
 800295e:	0019      	movs	r1, r3
 8002960:	231e      	movs	r3, #30
 8002962:	18fb      	adds	r3, r7, r3
 8002964:	801a      	strh	r2, [r3, #0]
 8002966:	231c      	movs	r3, #28
 8002968:	18fb      	adds	r3, r7, r3
 800296a:	1c0a      	adds	r2, r1, #0
 800296c:	801a      	strh	r2, [r3, #0]
 800296e:	466b      	mov	r3, sp
 8002970:	4698      	mov	r8, r3
	uint16_t i;
	uint16_t j;
	uint16_t totalInd =0;
 8002972:	2322      	movs	r3, #34	@ 0x22
 8002974:	2118      	movs	r1, #24
 8002976:	185b      	adds	r3, r3, r1
 8002978:	19db      	adds	r3, r3, r7
 800297a:	2200      	movs	r2, #0
 800297c:	801a      	strh	r2, [r3, #0]
	uint16_t ind;
	uint16_t count;
	uint16_t bufffer[w*h];
 800297e:	2340      	movs	r3, #64	@ 0x40
 8002980:	185b      	adds	r3, r3, r1
 8002982:	19db      	adds	r3, r3, r7
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	2244      	movs	r2, #68	@ 0x44
 8002988:	1852      	adds	r2, r2, r1
 800298a:	19d2      	adds	r2, r2, r7
 800298c:	8812      	ldrh	r2, [r2, #0]
 800298e:	4353      	muls	r3, r2
 8002990:	1e5a      	subs	r2, r3, #1
 8002992:	637a      	str	r2, [r7, #52]	@ 0x34
 8002994:	001a      	movs	r2, r3
 8002996:	60ba      	str	r2, [r7, #8]
 8002998:	2200      	movs	r2, #0
 800299a:	60fa      	str	r2, [r7, #12]
 800299c:	68b8      	ldr	r0, [r7, #8]
 800299e:	68f9      	ldr	r1, [r7, #12]
 80029a0:	0002      	movs	r2, r0
 80029a2:	0f12      	lsrs	r2, r2, #28
 80029a4:	000e      	movs	r6, r1
 80029a6:	0136      	lsls	r6, r6, #4
 80029a8:	617e      	str	r6, [r7, #20]
 80029aa:	697e      	ldr	r6, [r7, #20]
 80029ac:	4316      	orrs	r6, r2
 80029ae:	617e      	str	r6, [r7, #20]
 80029b0:	0002      	movs	r2, r0
 80029b2:	0112      	lsls	r2, r2, #4
 80029b4:	613a      	str	r2, [r7, #16]
 80029b6:	001a      	movs	r2, r3
 80029b8:	603a      	str	r2, [r7, #0]
 80029ba:	2200      	movs	r2, #0
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	6838      	ldr	r0, [r7, #0]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	0002      	movs	r2, r0
 80029c4:	0f12      	lsrs	r2, r2, #28
 80029c6:	000e      	movs	r6, r1
 80029c8:	0135      	lsls	r5, r6, #4
 80029ca:	4315      	orrs	r5, r2
 80029cc:	0002      	movs	r2, r0
 80029ce:	0114      	lsls	r4, r2, #4
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	3307      	adds	r3, #7
 80029d4:	08db      	lsrs	r3, r3, #3
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	466a      	mov	r2, sp
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	469d      	mov	sp, r3
 80029de:	ab02      	add	r3, sp, #8
 80029e0:	3301      	adds	r3, #1
 80029e2:	085b      	lsrs	r3, r3, #1
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	633b      	str	r3, [r7, #48]	@ 0x30
for(i=0; i<c; i++)
 80029e8:	2326      	movs	r3, #38	@ 0x26
 80029ea:	2118      	movs	r1, #24
 80029ec:	185b      	adds	r3, r3, r1
 80029ee:	19db      	adds	r3, r3, r7
 80029f0:	2200      	movs	r2, #0
 80029f2:	801a      	strh	r2, [r3, #0]
 80029f4:	e04d      	b.n	8002a92 <drawImage+0x142>
{
	ind = image[i][0];
 80029f6:	2126      	movs	r1, #38	@ 0x26
 80029f8:	2018      	movs	r0, #24
 80029fa:	180b      	adds	r3, r1, r0
 80029fc:	19db      	adds	r3, r3, r7
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a04:	18d2      	adds	r2, r2, r3
 8002a06:	2316      	movs	r3, #22
 8002a08:	181b      	adds	r3, r3, r0
 8002a0a:	19db      	adds	r3, r3, r7
 8002a0c:	8812      	ldrh	r2, [r2, #0]
 8002a0e:	801a      	strh	r2, [r3, #0]
	count = image[i][1];
 8002a10:	180b      	adds	r3, r1, r0
 8002a12:	19db      	adds	r3, r3, r7
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a1a:	18d2      	adds	r2, r2, r3
 8002a1c:	2314      	movs	r3, #20
 8002a1e:	181b      	adds	r3, r3, r0
 8002a20:	19db      	adds	r3, r3, r7
 8002a22:	8852      	ldrh	r2, [r2, #2]
 8002a24:	801a      	strh	r2, [r3, #0]
	for(j=0; j<count; j++)
 8002a26:	2324      	movs	r3, #36	@ 0x24
 8002a28:	181b      	adds	r3, r3, r0
 8002a2a:	19db      	adds	r3, r3, r7
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	801a      	strh	r2, [r3, #0]
 8002a30:	e01c      	b.n	8002a6c <drawImage+0x11c>
	{
		bufffer[totalInd++] = palette[ind];
 8002a32:	2316      	movs	r3, #22
 8002a34:	2418      	movs	r4, #24
 8002a36:	191b      	adds	r3, r3, r4
 8002a38:	19db      	adds	r3, r3, r7
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	6a3a      	ldr	r2, [r7, #32]
 8002a40:	18d2      	adds	r2, r2, r3
 8002a42:	2122      	movs	r1, #34	@ 0x22
 8002a44:	190b      	adds	r3, r1, r4
 8002a46:	19db      	adds	r3, r3, r7
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	1909      	adds	r1, r1, r4
 8002a4c:	19c9      	adds	r1, r1, r7
 8002a4e:	1c58      	adds	r0, r3, #1
 8002a50:	8008      	strh	r0, [r1, #0]
 8002a52:	0018      	movs	r0, r3
 8002a54:	8811      	ldrh	r1, [r2, #0]
 8002a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a58:	0042      	lsls	r2, r0, #1
 8002a5a:	52d1      	strh	r1, [r2, r3]
	for(j=0; j<count; j++)
 8002a5c:	2124      	movs	r1, #36	@ 0x24
 8002a5e:	190b      	adds	r3, r1, r4
 8002a60:	19db      	adds	r3, r3, r7
 8002a62:	881a      	ldrh	r2, [r3, #0]
 8002a64:	190b      	adds	r3, r1, r4
 8002a66:	19db      	adds	r3, r3, r7
 8002a68:	3201      	adds	r2, #1
 8002a6a:	801a      	strh	r2, [r3, #0]
 8002a6c:	2324      	movs	r3, #36	@ 0x24
 8002a6e:	2018      	movs	r0, #24
 8002a70:	181b      	adds	r3, r3, r0
 8002a72:	19da      	adds	r2, r3, r7
 8002a74:	2314      	movs	r3, #20
 8002a76:	181b      	adds	r3, r3, r0
 8002a78:	19db      	adds	r3, r3, r7
 8002a7a:	8812      	ldrh	r2, [r2, #0]
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d3d7      	bcc.n	8002a32 <drawImage+0xe2>
for(i=0; i<c; i++)
 8002a82:	2126      	movs	r1, #38	@ 0x26
 8002a84:	180b      	adds	r3, r1, r0
 8002a86:	19db      	adds	r3, r3, r7
 8002a88:	881a      	ldrh	r2, [r3, #0]
 8002a8a:	180b      	adds	r3, r1, r0
 8002a8c:	19db      	adds	r3, r3, r7
 8002a8e:	3201      	adds	r2, #1
 8002a90:	801a      	strh	r2, [r3, #0]
 8002a92:	2326      	movs	r3, #38	@ 0x26
 8002a94:	2118      	movs	r1, #24
 8002a96:	185b      	adds	r3, r3, r1
 8002a98:	19da      	adds	r2, r3, r7
 8002a9a:	2348      	movs	r3, #72	@ 0x48
 8002a9c:	185b      	adds	r3, r3, r1
 8002a9e:	19db      	adds	r3, r3, r7
 8002aa0:	8812      	ldrh	r2, [r2, #0]
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d3a6      	bcc.n	80029f6 <drawImage+0xa6>
	}
}
ST7735_DrawImage(y, x, w, h, bufffer);
 8002aa8:	2344      	movs	r3, #68	@ 0x44
 8002aaa:	185b      	adds	r3, r3, r1
 8002aac:	19db      	adds	r3, r3, r7
 8002aae:	881c      	ldrh	r4, [r3, #0]
 8002ab0:	2340      	movs	r3, #64	@ 0x40
 8002ab2:	185b      	adds	r3, r3, r1
 8002ab4:	19db      	adds	r3, r3, r7
 8002ab6:	881a      	ldrh	r2, [r3, #0]
 8002ab8:	231e      	movs	r3, #30
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	8819      	ldrh	r1, [r3, #0]
 8002abe:	231c      	movs	r3, #28
 8002ac0:	18fb      	adds	r3, r7, r3
 8002ac2:	8818      	ldrh	r0, [r3, #0]
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	0023      	movs	r3, r4
 8002aca:	f000 fa31 	bl	8002f30 <ST7735_DrawImage>
 8002ace:	46c5      	mov	sp, r8
}
 8002ad0:	46c0      	nop			@ (mov r8, r8)
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b010      	add	sp, #64	@ 0x40
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	46b8      	mov	r8, r7
 8002ada:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002adc <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8002ae0:	23a0      	movs	r3, #160	@ 0xa0
 8002ae2:	05db      	lsls	r3, r3, #23
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2120      	movs	r1, #32
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f001 fffe 	bl	8004aea <HAL_GPIO_WritePin>
}
 8002aee:	46c0      	nop			@ (mov r8, r8)
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8002af8:	23a0      	movs	r3, #160	@ 0xa0
 8002afa:	05db      	lsls	r3, r3, #23
 8002afc:	2201      	movs	r2, #1
 8002afe:	2120      	movs	r1, #32
 8002b00:	0018      	movs	r0, r3
 8002b02:	f001 fff2 	bl	8004aea <HAL_GPIO_WritePin>
}
 8002b06:	46c0      	nop			@ (mov r8, r8)
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <ST7735_Reset>:

void ST7735_Reset()
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8002b10:	2380      	movs	r3, #128	@ 0x80
 8002b12:	0219      	lsls	r1, r3, #8
 8002b14:	23a0      	movs	r3, #160	@ 0xa0
 8002b16:	05db      	lsls	r3, r3, #23
 8002b18:	2200      	movs	r2, #0
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f001 ffe5 	bl	8004aea <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8002b20:	2005      	movs	r0, #5
 8002b22:	f001 fd6b 	bl	80045fc <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8002b26:	2380      	movs	r3, #128	@ 0x80
 8002b28:	0219      	lsls	r1, r3, #8
 8002b2a:	23a0      	movs	r3, #160	@ 0xa0
 8002b2c:	05db      	lsls	r3, r3, #23
 8002b2e:	2201      	movs	r2, #1
 8002b30:	0018      	movs	r0, r3
 8002b32:	f001 ffda 	bl	8004aea <HAL_GPIO_WritePin>
}
 8002b36:	46c0      	nop			@ (mov r8, r8)
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	0002      	movs	r2, r0
 8002b44:	1dfb      	adds	r3, r7, #7
 8002b46:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8002b48:	23a0      	movs	r3, #160	@ 0xa0
 8002b4a:	05db      	lsls	r3, r3, #23
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2110      	movs	r1, #16
 8002b50:	0018      	movs	r0, r3
 8002b52:	f001 ffca 	bl	8004aea <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002b56:	2301      	movs	r3, #1
 8002b58:	425b      	negs	r3, r3
 8002b5a:	1df9      	adds	r1, r7, #7
 8002b5c:	4803      	ldr	r0, [pc, #12]	@ (8002b6c <ST7735_WriteCommand+0x30>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f004 f926 	bl	8006db0 <HAL_SPI_Transmit>
}
 8002b64:	46c0      	nop			@ (mov r8, r8)
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b002      	add	sp, #8
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	20000ef4 	.word	0x20000ef4

08002b70 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8002b7a:	23a0      	movs	r3, #160	@ 0xa0
 8002b7c:	05db      	lsls	r3, r3, #23
 8002b7e:	2201      	movs	r2, #1
 8002b80:	2110      	movs	r1, #16
 8002b82:	0018      	movs	r0, r3
 8002b84:	f001 ffb1 	bl	8004aea <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	425b      	negs	r3, r3
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4803      	ldr	r0, [pc, #12]	@ (8002ba0 <ST7735_WriteData+0x30>)
 8002b94:	f004 f90c 	bl	8006db0 <HAL_SPI_Transmit>
}
 8002b98:	46c0      	nop			@ (mov r8, r8)
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b002      	add	sp, #8
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000ef4 	.word	0x20000ef4

08002ba4 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8002ba4:	b590      	push	{r4, r7, lr}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	607a      	str	r2, [r7, #4]
 8002bb2:	220f      	movs	r2, #15
 8002bb4:	18ba      	adds	r2, r7, r2
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 8002bba:	e04a      	b.n	8002c52 <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	607a      	str	r2, [r7, #4]
 8002bc2:	210b      	movs	r1, #11
 8002bc4:	187a      	adds	r2, r7, r1
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 8002bca:	187b      	adds	r3, r7, r1
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f7ff ffb4 	bl	8002b3c <ST7735_WriteCommand>

        numArgs = *addr++;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	200a      	movs	r0, #10
 8002bdc:	183a      	adds	r2, r7, r0
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8002be2:	183b      	adds	r3, r7, r0
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	230c      	movs	r3, #12
 8002bea:	18fb      	adds	r3, r7, r3
 8002bec:	2180      	movs	r1, #128	@ 0x80
 8002bee:	400a      	ands	r2, r1
 8002bf0:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 8002bf2:	183b      	adds	r3, r7, r0
 8002bf4:	183a      	adds	r2, r7, r0
 8002bf6:	7812      	ldrb	r2, [r2, #0]
 8002bf8:	217f      	movs	r1, #127	@ 0x7f
 8002bfa:	400a      	ands	r2, r1
 8002bfc:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 8002bfe:	183b      	adds	r3, r7, r0
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00c      	beq.n	8002c20 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8002c06:	0004      	movs	r4, r0
 8002c08:	183b      	adds	r3, r7, r0
 8002c0a:	781a      	ldrb	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	0011      	movs	r1, r2
 8002c10:	0018      	movs	r0, r3
 8002c12:	f7ff ffad 	bl	8002b70 <ST7735_WriteData>
            addr += numArgs;
 8002c16:	193b      	adds	r3, r7, r4
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	18d3      	adds	r3, r2, r3
 8002c1e:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8002c20:	210c      	movs	r1, #12
 8002c22:	187b      	adds	r3, r7, r1
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d013      	beq.n	8002c52 <DisplayInit+0xae>
            ms = *addr++;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	781a      	ldrb	r2, [r3, #0]
 8002c32:	187b      	adds	r3, r7, r1
 8002c34:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 8002c36:	187b      	adds	r3, r7, r1
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	2bff      	cmp	r3, #255	@ 0xff
 8002c3c:	d103      	bne.n	8002c46 <DisplayInit+0xa2>
 8002c3e:	187b      	adds	r3, r7, r1
 8002c40:	22fa      	movs	r2, #250	@ 0xfa
 8002c42:	0052      	lsls	r2, r2, #1
 8002c44:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 8002c46:	230c      	movs	r3, #12
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f001 fcd5 	bl	80045fc <HAL_Delay>
    while(numCommands--) {
 8002c52:	220f      	movs	r2, #15
 8002c54:	18bb      	adds	r3, r7, r2
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	18ba      	adds	r2, r7, r2
 8002c5a:	1e59      	subs	r1, r3, #1
 8002c5c:	7011      	strb	r1, [r2, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1ac      	bne.n	8002bbc <DisplayInit+0x18>
        }
    }
}
 8002c62:	46c0      	nop			@ (mov r8, r8)
 8002c64:	46c0      	nop			@ (mov r8, r8)
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b005      	add	sp, #20
 8002c6a:	bd90      	pop	{r4, r7, pc}

08002c6c <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8002c6c:	b5b0      	push	{r4, r5, r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	0005      	movs	r5, r0
 8002c74:	000c      	movs	r4, r1
 8002c76:	0010      	movs	r0, r2
 8002c78:	0019      	movs	r1, r3
 8002c7a:	1dfb      	adds	r3, r7, #7
 8002c7c:	1c2a      	adds	r2, r5, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
 8002c80:	1dbb      	adds	r3, r7, #6
 8002c82:	1c22      	adds	r2, r4, #0
 8002c84:	701a      	strb	r2, [r3, #0]
 8002c86:	1d7b      	adds	r3, r7, #5
 8002c88:	1c02      	adds	r2, r0, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
 8002c8c:	1d3b      	adds	r3, r7, #4
 8002c8e:	1c0a      	adds	r2, r1, #0
 8002c90:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8002c92:	202a      	movs	r0, #42	@ 0x2a
 8002c94:	f7ff ff52 	bl	8002b3c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8002c98:	210c      	movs	r1, #12
 8002c9a:	187b      	adds	r3, r7, r1
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	701a      	strb	r2, [r3, #0]
 8002ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8002d14 <ST7735_SetAddressWindow+0xa8>)
 8002ca2:	781a      	ldrb	r2, [r3, #0]
 8002ca4:	1dfb      	adds	r3, r7, #7
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	18d3      	adds	r3, r2, r3
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	187b      	adds	r3, r7, r1
 8002cae:	705a      	strb	r2, [r3, #1]
 8002cb0:	187b      	adds	r3, r7, r1
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	709a      	strb	r2, [r3, #2]
 8002cb6:	4b17      	ldr	r3, [pc, #92]	@ (8002d14 <ST7735_SetAddressWindow+0xa8>)
 8002cb8:	781a      	ldrb	r2, [r3, #0]
 8002cba:	1d7b      	adds	r3, r7, #5
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	18d3      	adds	r3, r2, r3
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	187b      	adds	r3, r7, r1
 8002cc4:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8002cc6:	000c      	movs	r4, r1
 8002cc8:	187b      	adds	r3, r7, r1
 8002cca:	2104      	movs	r1, #4
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f7ff ff4f 	bl	8002b70 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8002cd2:	202b      	movs	r0, #43	@ 0x2b
 8002cd4:	f7ff ff32 	bl	8002b3c <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8002cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d18 <ST7735_SetAddressWindow+0xac>)
 8002cda:	781a      	ldrb	r2, [r3, #0]
 8002cdc:	1dbb      	adds	r3, r7, #6
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	18d3      	adds	r3, r2, r3
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	0021      	movs	r1, r4
 8002ce6:	187b      	adds	r3, r7, r1
 8002ce8:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 8002cea:	4b0b      	ldr	r3, [pc, #44]	@ (8002d18 <ST7735_SetAddressWindow+0xac>)
 8002cec:	781a      	ldrb	r2, [r3, #0]
 8002cee:	1d3b      	adds	r3, r7, #4
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	18d3      	adds	r3, r2, r3
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	187b      	adds	r3, r7, r1
 8002cf8:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8002cfa:	187b      	adds	r3, r7, r1
 8002cfc:	2104      	movs	r1, #4
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f7ff ff36 	bl	8002b70 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8002d04:	202c      	movs	r0, #44	@ 0x2c
 8002d06:	f7ff ff19 	bl	8002b3c <ST7735_WriteCommand>
}
 8002d0a:	46c0      	nop			@ (mov r8, r8)
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b004      	add	sp, #16
 8002d10:	bdb0      	pop	{r4, r5, r7, pc}
 8002d12:	46c0      	nop			@ (mov r8, r8)
 8002d14:	20000a63 	.word	0x20000a63
 8002d18:	20000a64 	.word	0x20000a64

08002d1c <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	0002      	movs	r2, r0
 8002d24:	1dfb      	adds	r3, r7, #7
 8002d26:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 8002d28:	f7ff fed8 	bl	8002adc <ST7735_Select>
    ST7735_Reset();
 8002d2c:	f7ff feee 	bl	8002b0c <ST7735_Reset>
    DisplayInit(init_cmds1);
 8002d30:	4b0e      	ldr	r3, [pc, #56]	@ (8002d6c <ST7735_Init+0x50>)
 8002d32:	0018      	movs	r0, r3
 8002d34:	f7ff ff36 	bl	8002ba4 <DisplayInit>
    DisplayInit(init_cmds2);
 8002d38:	4b0d      	ldr	r3, [pc, #52]	@ (8002d70 <ST7735_Init+0x54>)
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f7ff ff32 	bl	8002ba4 <DisplayInit>
    DisplayInit(init_cmds3);
 8002d40:	4b0c      	ldr	r3, [pc, #48]	@ (8002d74 <ST7735_Init+0x58>)
 8002d42:	0018      	movs	r0, r3
 8002d44:	f7ff ff2e 	bl	8002ba4 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8002d48:	4b0b      	ldr	r3, [pc, #44]	@ (8002d78 <ST7735_Init+0x5c>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8002d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d7c <ST7735_Init+0x60>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8002d54:	1dfb      	adds	r3, r7, #7
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f000 f811 	bl	8002d80 <ST7735_SetRotation>
    ST7735_Unselect();
 8002d5e:	f7ff fec9 	bl	8002af4 <ST7735_Unselect>

}
 8002d62:	46c0      	nop			@ (mov r8, r8)
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b002      	add	sp, #8
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	46c0      	nop			@ (mov r8, r8)
 8002d6c:	0800a3f0 	.word	0x0800a3f0
 8002d70:	0800a428 	.word	0x0800a428
 8002d74:	0800a438 	.word	0x0800a438
 8002d78:	20000a61 	.word	0x20000a61
 8002d7c:	20000a62 	.word	0x20000a62

08002d80 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	0002      	movs	r2, r0
 8002d88:	1dfb      	adds	r3, r7, #7
 8002d8a:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8002d8c:	230f      	movs	r3, #15
 8002d8e:	18fb      	adds	r3, r7, r3
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8002d94:	1dfb      	adds	r3, r7, #7
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2203      	movs	r2, #3
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	4b36      	ldr	r3, [pc, #216]	@ (8002e78 <ST7735_SetRotation+0xf8>)
 8002da0:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8002da2:	4b35      	ldr	r3, [pc, #212]	@ (8002e78 <ST7735_SetRotation+0xf8>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d041      	beq.n	8002e2e <ST7735_SetRotation+0xae>
 8002daa:	dc53      	bgt.n	8002e54 <ST7735_SetRotation+0xd4>
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d02b      	beq.n	8002e08 <ST7735_SetRotation+0x88>
 8002db0:	dc50      	bgt.n	8002e54 <ST7735_SetRotation+0xd4>
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <ST7735_SetRotation+0x3c>
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d013      	beq.n	8002de2 <ST7735_SetRotation+0x62>
 8002dba:	e04b      	b.n	8002e54 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8002dbc:	230f      	movs	r3, #15
 8002dbe:	18fb      	adds	r3, r7, r3
 8002dc0:	22c0      	movs	r2, #192	@ 0xc0
 8002dc2:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8002dc4:	4b2d      	ldr	r3, [pc, #180]	@ (8002e7c <ST7735_SetRotation+0xfc>)
 8002dc6:	22a0      	movs	r2, #160	@ 0xa0
 8002dc8:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8002dca:	4b2d      	ldr	r3, [pc, #180]	@ (8002e80 <ST7735_SetRotation+0x100>)
 8002dcc:	2280      	movs	r2, #128	@ 0x80
 8002dce:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8002dd0:	4b2c      	ldr	r3, [pc, #176]	@ (8002e84 <ST7735_SetRotation+0x104>)
 8002dd2:	781a      	ldrb	r2, [r3, #0]
 8002dd4:	4b2c      	ldr	r3, [pc, #176]	@ (8002e88 <ST7735_SetRotation+0x108>)
 8002dd6:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8002dd8:	4b2c      	ldr	r3, [pc, #176]	@ (8002e8c <ST7735_SetRotation+0x10c>)
 8002dda:	781a      	ldrb	r2, [r3, #0]
 8002ddc:	4b2c      	ldr	r3, [pc, #176]	@ (8002e90 <ST7735_SetRotation+0x110>)
 8002dde:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8002de0:	e038      	b.n	8002e54 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8002de2:	230f      	movs	r3, #15
 8002de4:	18fb      	adds	r3, r7, r3
 8002de6:	22a0      	movs	r2, #160	@ 0xa0
 8002de8:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8002dea:	4b25      	ldr	r3, [pc, #148]	@ (8002e80 <ST7735_SetRotation+0x100>)
 8002dec:	22a0      	movs	r2, #160	@ 0xa0
 8002dee:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8002df0:	4b22      	ldr	r3, [pc, #136]	@ (8002e7c <ST7735_SetRotation+0xfc>)
 8002df2:	2280      	movs	r2, #128	@ 0x80
 8002df4:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8002df6:	4b23      	ldr	r3, [pc, #140]	@ (8002e84 <ST7735_SetRotation+0x104>)
 8002df8:	781a      	ldrb	r2, [r3, #0]
 8002dfa:	4b25      	ldr	r3, [pc, #148]	@ (8002e90 <ST7735_SetRotation+0x110>)
 8002dfc:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8002dfe:	4b23      	ldr	r3, [pc, #140]	@ (8002e8c <ST7735_SetRotation+0x10c>)
 8002e00:	781a      	ldrb	r2, [r3, #0]
 8002e02:	4b21      	ldr	r3, [pc, #132]	@ (8002e88 <ST7735_SetRotation+0x108>)
 8002e04:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8002e06:	e025      	b.n	8002e54 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8002e08:	230f      	movs	r3, #15
 8002e0a:	18fb      	adds	r3, r7, r3
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8002e10:	4b1a      	ldr	r3, [pc, #104]	@ (8002e7c <ST7735_SetRotation+0xfc>)
 8002e12:	22a0      	movs	r2, #160	@ 0xa0
 8002e14:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8002e16:	4b1a      	ldr	r3, [pc, #104]	@ (8002e80 <ST7735_SetRotation+0x100>)
 8002e18:	2280      	movs	r2, #128	@ 0x80
 8002e1a:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8002e1c:	4b19      	ldr	r3, [pc, #100]	@ (8002e84 <ST7735_SetRotation+0x104>)
 8002e1e:	781a      	ldrb	r2, [r3, #0]
 8002e20:	4b19      	ldr	r3, [pc, #100]	@ (8002e88 <ST7735_SetRotation+0x108>)
 8002e22:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8002e24:	4b19      	ldr	r3, [pc, #100]	@ (8002e8c <ST7735_SetRotation+0x10c>)
 8002e26:	781a      	ldrb	r2, [r3, #0]
 8002e28:	4b19      	ldr	r3, [pc, #100]	@ (8002e90 <ST7735_SetRotation+0x110>)
 8002e2a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8002e2c:	e012      	b.n	8002e54 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8002e2e:	230f      	movs	r3, #15
 8002e30:	18fb      	adds	r3, r7, r3
 8002e32:	2260      	movs	r2, #96	@ 0x60
 8002e34:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8002e36:	4b12      	ldr	r3, [pc, #72]	@ (8002e80 <ST7735_SetRotation+0x100>)
 8002e38:	22a0      	movs	r2, #160	@ 0xa0
 8002e3a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e7c <ST7735_SetRotation+0xfc>)
 8002e3e:	2280      	movs	r2, #128	@ 0x80
 8002e40:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8002e42:	4b10      	ldr	r3, [pc, #64]	@ (8002e84 <ST7735_SetRotation+0x104>)
 8002e44:	781a      	ldrb	r2, [r3, #0]
 8002e46:	4b12      	ldr	r3, [pc, #72]	@ (8002e90 <ST7735_SetRotation+0x110>)
 8002e48:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8002e4a:	4b10      	ldr	r3, [pc, #64]	@ (8002e8c <ST7735_SetRotation+0x10c>)
 8002e4c:	781a      	ldrb	r2, [r3, #0]
 8002e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e88 <ST7735_SetRotation+0x108>)
 8002e50:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8002e52:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 8002e54:	f7ff fe42 	bl	8002adc <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8002e58:	2036      	movs	r0, #54	@ 0x36
 8002e5a:	f7ff fe6f 	bl	8002b3c <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8002e5e:	230f      	movs	r3, #15
 8002e60:	18fb      	adds	r3, r7, r3
 8002e62:	2101      	movs	r1, #1
 8002e64:	0018      	movs	r0, r3
 8002e66:	f7ff fe83 	bl	8002b70 <ST7735_WriteData>
  ST7735_Unselect();
 8002e6a:	f7ff fe43 	bl	8002af4 <ST7735_Unselect>
}
 8002e6e:	46c0      	nop			@ (mov r8, r8)
 8002e70:	46bd      	mov	sp, r7
 8002e72:	b004      	add	sp, #16
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	46c0      	nop			@ (mov r8, r8)
 8002e78:	20000a60 	.word	0x20000a60
 8002e7c:	20000a5e 	.word	0x20000a5e
 8002e80:	20000a5c 	.word	0x20000a5c
 8002e84:	20000a61 	.word	0x20000a61
 8002e88:	20000a63 	.word	0x20000a63
 8002e8c:	20000a62 	.word	0x20000a62
 8002e90:	20000a64 	.word	0x20000a64

08002e94 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8002e94:	b590      	push	{r4, r7, lr}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	0004      	movs	r4, r0
 8002e9c:	0008      	movs	r0, r1
 8002e9e:	0011      	movs	r1, r2
 8002ea0:	1dbb      	adds	r3, r7, #6
 8002ea2:	1c22      	adds	r2, r4, #0
 8002ea4:	801a      	strh	r2, [r3, #0]
 8002ea6:	1d3b      	adds	r3, r7, #4
 8002ea8:	1c02      	adds	r2, r0, #0
 8002eaa:	801a      	strh	r2, [r3, #0]
 8002eac:	1cbb      	adds	r3, r7, #2
 8002eae:	1c0a      	adds	r2, r1, #0
 8002eb0:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 8002eb2:	1dbb      	adds	r3, r7, #6
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8002f28 <ST7735_DrawPixel+0x94>)
 8002eb8:	2100      	movs	r1, #0
 8002eba:	5e52      	ldrsh	r2, [r2, r1]
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	da2f      	bge.n	8002f20 <ST7735_DrawPixel+0x8c>
 8002ec0:	1d3b      	adds	r3, r7, #4
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	4a19      	ldr	r2, [pc, #100]	@ (8002f2c <ST7735_DrawPixel+0x98>)
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	5e52      	ldrsh	r2, [r2, r1]
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	da28      	bge.n	8002f20 <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 8002ece:	f7ff fe05 	bl	8002adc <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8002ed2:	1dbb      	adds	r3, r7, #6
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	b2d8      	uxtb	r0, r3
 8002ed8:	1d3b      	adds	r3, r7, #4
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	b2d9      	uxtb	r1, r3
 8002ede:	1dbb      	adds	r3, r7, #6
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	1d3b      	adds	r3, r7, #4
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	3301      	adds	r3, #1
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	f7ff febb 	bl	8002c6c <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8002ef6:	1cbb      	adds	r3, r7, #2
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	0a1b      	lsrs	r3, r3, #8
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	210c      	movs	r1, #12
 8002f02:	187b      	adds	r3, r7, r1
 8002f04:	701a      	strb	r2, [r3, #0]
 8002f06:	1cbb      	adds	r3, r7, #2
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	187b      	adds	r3, r7, r1
 8002f0e:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 8002f10:	187b      	adds	r3, r7, r1
 8002f12:	2102      	movs	r1, #2
 8002f14:	0018      	movs	r0, r3
 8002f16:	f7ff fe2b 	bl	8002b70 <ST7735_WriteData>

    ST7735_Unselect();
 8002f1a:	f7ff fdeb 	bl	8002af4 <ST7735_Unselect>
 8002f1e:	e000      	b.n	8002f22 <ST7735_DrawPixel+0x8e>
        return;
 8002f20:	46c0      	nop			@ (mov r8, r8)
}
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b005      	add	sp, #20
 8002f26:	bd90      	pop	{r4, r7, pc}
 8002f28:	20000a5c 	.word	0x20000a5c
 8002f2c:	20000a5e 	.word	0x20000a5e

08002f30 <ST7735_DrawImage>:
    }

    ST7735_Unselect();
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8002f30:	b5b0      	push	{r4, r5, r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	0005      	movs	r5, r0
 8002f38:	000c      	movs	r4, r1
 8002f3a:	0010      	movs	r0, r2
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	1dbb      	adds	r3, r7, #6
 8002f40:	1c2a      	adds	r2, r5, #0
 8002f42:	801a      	strh	r2, [r3, #0]
 8002f44:	1d3b      	adds	r3, r7, #4
 8002f46:	1c22      	adds	r2, r4, #0
 8002f48:	801a      	strh	r2, [r3, #0]
 8002f4a:	1cbb      	adds	r3, r7, #2
 8002f4c:	1c02      	adds	r2, r0, #0
 8002f4e:	801a      	strh	r2, [r3, #0]
 8002f50:	003b      	movs	r3, r7
 8002f52:	1c0a      	adds	r2, r1, #0
 8002f54:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8002f56:	1dbb      	adds	r3, r7, #6
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	4a2a      	ldr	r2, [pc, #168]	@ (8003004 <ST7735_DrawImage+0xd4>)
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	5e52      	ldrsh	r2, [r2, r1]
 8002f60:	4293      	cmp	r3, r2
 8002f62:	da47      	bge.n	8002ff4 <ST7735_DrawImage+0xc4>
 8002f64:	1d3b      	adds	r3, r7, #4
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	4a27      	ldr	r2, [pc, #156]	@ (8003008 <ST7735_DrawImage+0xd8>)
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	5e52      	ldrsh	r2, [r2, r1]
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	da40      	bge.n	8002ff4 <ST7735_DrawImage+0xc4>
    if((x + w - 1) >= _width) return;
 8002f72:	1dbb      	adds	r3, r7, #6
 8002f74:	881a      	ldrh	r2, [r3, #0]
 8002f76:	1cbb      	adds	r3, r7, #2
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	18d3      	adds	r3, r2, r3
 8002f7c:	4a21      	ldr	r2, [pc, #132]	@ (8003004 <ST7735_DrawImage+0xd4>)
 8002f7e:	2100      	movs	r1, #0
 8002f80:	5e52      	ldrsh	r2, [r2, r1]
 8002f82:	4293      	cmp	r3, r2
 8002f84:	dc38      	bgt.n	8002ff8 <ST7735_DrawImage+0xc8>
    if((y + h - 1) >= _height) return;
 8002f86:	1d3b      	adds	r3, r7, #4
 8002f88:	881a      	ldrh	r2, [r3, #0]
 8002f8a:	003b      	movs	r3, r7
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	18d3      	adds	r3, r2, r3
 8002f90:	4a1d      	ldr	r2, [pc, #116]	@ (8003008 <ST7735_DrawImage+0xd8>)
 8002f92:	2100      	movs	r1, #0
 8002f94:	5e52      	ldrsh	r2, [r2, r1]
 8002f96:	4293      	cmp	r3, r2
 8002f98:	dc30      	bgt.n	8002ffc <ST7735_DrawImage+0xcc>

    ST7735_Select();
 8002f9a:	f7ff fd9f 	bl	8002adc <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002f9e:	1dbb      	adds	r3, r7, #6
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	b2d8      	uxtb	r0, r3
 8002fa4:	1d3b      	adds	r3, r7, #4
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	b2d9      	uxtb	r1, r3
 8002faa:	1dbb      	adds	r3, r7, #6
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	1cbb      	adds	r3, r7, #2
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	18d3      	adds	r3, r2, r3
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b2dc      	uxtb	r4, r3
 8002fbe:	1d3b      	adds	r3, r7, #4
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	003b      	movs	r3, r7
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	18d3      	adds	r3, r2, r3
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	0022      	movs	r2, r4
 8002fd4:	f7ff fe4a 	bl	8002c6c <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8002fd8:	1cbb      	adds	r3, r7, #2
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	003a      	movs	r2, r7
 8002fde:	8812      	ldrh	r2, [r2, #0]
 8002fe0:	4353      	muls	r3, r2
 8002fe2:	005a      	lsls	r2, r3, #1
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	0011      	movs	r1, r2
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f7ff fdc1 	bl	8002b70 <ST7735_WriteData>
    ST7735_Unselect();
 8002fee:	f7ff fd81 	bl	8002af4 <ST7735_Unselect>
 8002ff2:	e004      	b.n	8002ffe <ST7735_DrawImage+0xce>
    if((x >= _width) || (y >= _height)) return;
 8002ff4:	46c0      	nop			@ (mov r8, r8)
 8002ff6:	e002      	b.n	8002ffe <ST7735_DrawImage+0xce>
    if((x + w - 1) >= _width) return;
 8002ff8:	46c0      	nop			@ (mov r8, r8)
 8002ffa:	e000      	b.n	8002ffe <ST7735_DrawImage+0xce>
    if((y + h - 1) >= _height) return;
 8002ffc:	46c0      	nop			@ (mov r8, r8)
}
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b002      	add	sp, #8
 8003002:	bdb0      	pop	{r4, r5, r7, pc}
 8003004:	20000a5c 	.word	0x20000a5c
 8003008:	20000a5e 	.word	0x20000a5e

0800300c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800300c:	b590      	push	{r4, r7, lr}
 800300e:	b087      	sub	sp, #28
 8003010:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003012:	f001 fa6d 	bl	80044f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003016:	f000 fbd1 	bl	80037bc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  steps=0;
 800301a:	4be1      	ldr	r3, [pc, #900]	@ (80033a0 <main+0x394>)
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
  sitting0.Body = *imgSitting0;
 8003020:	4be0      	ldr	r3, [pc, #896]	@ (80033a4 <main+0x398>)
 8003022:	4ae1      	ldr	r2, [pc, #900]	@ (80033a8 <main+0x39c>)
 8003024:	601a      	str	r2, [r3, #0]
  sitting0.Size = 307;
 8003026:	4bdf      	ldr	r3, [pc, #892]	@ (80033a4 <main+0x398>)
 8003028:	2234      	movs	r2, #52	@ 0x34
 800302a:	32ff      	adds	r2, #255	@ 0xff
 800302c:	605a      	str	r2, [r3, #4]
  sitting1.Body = *imgSitting1;
 800302e:	4bdf      	ldr	r3, [pc, #892]	@ (80033ac <main+0x3a0>)
 8003030:	4adf      	ldr	r2, [pc, #892]	@ (80033b0 <main+0x3a4>)
 8003032:	601a      	str	r2, [r3, #0]
  sitting1.Size = 305;
 8003034:	4bdd      	ldr	r3, [pc, #884]	@ (80033ac <main+0x3a0>)
 8003036:	2232      	movs	r2, #50	@ 0x32
 8003038:	32ff      	adds	r2, #255	@ 0xff
 800303a:	605a      	str	r2, [r3, #4]
  animSitting[0] = sitting0;
 800303c:	4bdd      	ldr	r3, [pc, #884]	@ (80033b4 <main+0x3a8>)
 800303e:	4ad9      	ldr	r2, [pc, #868]	@ (80033a4 <main+0x398>)
 8003040:	ca03      	ldmia	r2!, {r0, r1}
 8003042:	c303      	stmia	r3!, {r0, r1}
  animSitting[1] = sitting1;
 8003044:	4bdb      	ldr	r3, [pc, #876]	@ (80033b4 <main+0x3a8>)
 8003046:	4ad9      	ldr	r2, [pc, #868]	@ (80033ac <main+0x3a0>)
 8003048:	3308      	adds	r3, #8
 800304a:	ca03      	ldmia	r2!, {r0, r1}
 800304c:	c303      	stmia	r3!, {r0, r1}
  game.evo=0;
 800304e:	4bda      	ldr	r3, [pc, #872]	@ (80033b8 <main+0x3ac>)
 8003050:	2200      	movs	r2, #0
 8003052:	741a      	strb	r2, [r3, #16]
  game.uid[0]='h';
 8003054:	4ad8      	ldr	r2, [pc, #864]	@ (80033b8 <main+0x3ac>)
 8003056:	2394      	movs	r3, #148	@ 0x94
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	2168      	movs	r1, #104	@ 0x68
 800305c:	54d1      	strb	r1, [r2, r3]
  game.uid[1]='i';
 800305e:	4ad6      	ldr	r2, [pc, #856]	@ (80033b8 <main+0x3ac>)
 8003060:	232a      	movs	r3, #42	@ 0x2a
 8003062:	33ff      	adds	r3, #255	@ 0xff
 8003064:	2169      	movs	r1, #105	@ 0x69
 8003066:	54d1      	strb	r1, [r2, r3]
  game.allSteps=0;
 8003068:	4ad3      	ldr	r2, [pc, #844]	@ (80033b8 <main+0x3ac>)
 800306a:	238c      	movs	r3, #140	@ 0x8c
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	2100      	movs	r1, #0
 8003070:	50d1      	str	r1, [r2, r3]
  game.mood=100;
 8003072:	4bd1      	ldr	r3, [pc, #836]	@ (80033b8 <main+0x3ac>)
 8003074:	2264      	movs	r2, #100	@ 0x64
 8003076:	745a      	strb	r2, [r3, #17]
  game.numLocations=3;
 8003078:	4bcf      	ldr	r3, [pc, #828]	@ (80033b8 <main+0x3ac>)
 800307a:	2203      	movs	r2, #3
 800307c:	615a      	str	r2, [r3, #20]
  game.stepsToday=0;
 800307e:	4ace      	ldr	r2, [pc, #824]	@ (80033b8 <main+0x3ac>)
 8003080:	2390      	movs	r3, #144	@ 0x90
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	2100      	movs	r1, #0
 8003086:	50d1      	str	r1, [r2, r3]
  game.weeklySteps=0;
 8003088:	4acb      	ldr	r2, [pc, #812]	@ (80033b8 <main+0x3ac>)
 800308a:	238e      	movs	r3, #142	@ 0x8e
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	2100      	movs	r1, #0
 8003090:	50d1      	str	r1, [r2, r3]
  game.challengeGoal=2000;
 8003092:	4ac9      	ldr	r2, [pc, #804]	@ (80033b8 <main+0x3ac>)
 8003094:	2392      	movs	r3, #146	@ 0x92
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	21fa      	movs	r1, #250	@ 0xfa
 800309a:	00c9      	lsls	r1, r1, #3
 800309c:	50d1      	str	r1, [r2, r3]
  dummy.lat=12.34567;
 800309e:	4bc7      	ldr	r3, [pc, #796]	@ (80033bc <main+0x3b0>)
 80030a0:	4ac7      	ldr	r2, [pc, #796]	@ (80033c0 <main+0x3b4>)
 80030a2:	601a      	str	r2, [r3, #0]
  dummy.lon=-89.10111;
 80030a4:	4bc5      	ldr	r3, [pc, #788]	@ (80033bc <main+0x3b0>)
 80030a6:	4ac7      	ldr	r2, [pc, #796]	@ (80033c4 <main+0x3b8>)
 80030a8:	605a      	str	r2, [r3, #4]
  game.positions[0]=dummy;
 80030aa:	4bc3      	ldr	r3, [pc, #780]	@ (80033b8 <main+0x3ac>)
 80030ac:	4ac3      	ldr	r2, [pc, #780]	@ (80033bc <main+0x3b0>)
 80030ae:	3318      	adds	r3, #24
 80030b0:	ca03      	ldmia	r2!, {r0, r1}
 80030b2:	c303      	stmia	r3!, {r0, r1}
  game.positions[1]=dummy;
 80030b4:	4bc0      	ldr	r3, [pc, #768]	@ (80033b8 <main+0x3ac>)
 80030b6:	4ac1      	ldr	r2, [pc, #772]	@ (80033bc <main+0x3b0>)
 80030b8:	3320      	adds	r3, #32
 80030ba:	ca03      	ldmia	r2!, {r0, r1}
 80030bc:	c303      	stmia	r3!, {r0, r1}
  game.positions[2]=dummy;
 80030be:	4bbe      	ldr	r3, [pc, #760]	@ (80033b8 <main+0x3ac>)
 80030c0:	4abe      	ldr	r2, [pc, #760]	@ (80033bc <main+0x3b0>)
 80030c2:	3328      	adds	r3, #40	@ 0x28
 80030c4:	ca03      	ldmia	r2!, {r0, r1}
 80030c6:	c303      	stmia	r3!, {r0, r1}
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030c8:	f000 fd7e 	bl	8003bc8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80030cc:	f000 fbd8 	bl	8003880 <MX_I2C1_Init>
  MX_SPI1_Init();
 80030d0:	f000 fc16 	bl	8003900 <MX_SPI1_Init>
  MX_TIM17_Init();
 80030d4:	f000 fc54 	bl	8003980 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 80030d8:	f000 fcda 	bl	8003a90 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80030dc:	f000 fd26 	bl	8003b2c <MX_USART2_UART_Init>
  //MX_RTC_Init();
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
  ST7735_Unselect();
 80030e0:	f7ff fd08 	bl	8002af4 <ST7735_Unselect>
  ST7735_Init(1);
 80030e4:	2001      	movs	r0, #1
 80030e6:	f7ff fe19 	bl	8002d1c <ST7735_Init>
  //testAll();
  buffer[0] = 'A';
 80030ea:	4bb7      	ldr	r3, [pc, #732]	@ (80033c8 <main+0x3bc>)
 80030ec:	2241      	movs	r2, #65	@ 0x41
 80030ee:	701a      	strb	r2, [r3, #0]
  buffer[1] = 'B';
 80030f0:	4bb5      	ldr	r3, [pc, #724]	@ (80033c8 <main+0x3bc>)
 80030f2:	2242      	movs	r2, #66	@ 0x42
 80030f4:	705a      	strb	r2, [r3, #1]
  TIM17->CCR1 = 5;
 80030f6:	4bb5      	ldr	r3, [pc, #724]	@ (80033cc <main+0x3c0>)
 80030f8:	2205      	movs	r2, #5
 80030fa:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM17->PSC=64;
 80030fc:	4bb3      	ldr	r3, [pc, #716]	@ (80033cc <main+0x3c0>)
 80030fe:	2240      	movs	r2, #64	@ 0x40
 8003100:	629a      	str	r2, [r3, #40]	@ 0x28
  uint8_t ret=0;
 8003102:	1dfb      	adds	r3, r7, #7
 8003104:	2200      	movs	r2, #0
 8003106:	701a      	strb	r2, [r3, #0]
    //_ADXL343_Init();

      //Pedometer Setup
      _ADXL343_WriteReg8(0x19, 0x02);
 8003108:	2102      	movs	r1, #2
 800310a:	2019      	movs	r0, #25
 800310c:	f000 fe34 	bl	8003d78 <_ADXL343_WriteReg8>
      ////wait

      _ADXL343_WriteReg8(0x7C, 0x01);
 8003110:	2101      	movs	r1, #1
 8003112:	207c      	movs	r0, #124	@ 0x7c
 8003114:	f000 fe30 	bl	8003d78 <_ADXL343_WriteReg8>
       _ADXL343_WriteReg8(0x1A, 0x38);
 8003118:	2138      	movs	r1, #56	@ 0x38
 800311a:	201a      	movs	r0, #26
 800311c:	f000 fe2c 	bl	8003d78 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1B, 0x04);
 8003120:	2104      	movs	r1, #4
 8003122:	201b      	movs	r0, #27
 8003124:	f000 fe28 	bl	8003d78 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1F, 0x80);
 8003128:	2180      	movs	r1, #128	@ 0x80
 800312a:	201f      	movs	r0, #31
 800312c:	f000 fe24 	bl	8003d78 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x21, 0x80);
 8003130:	2180      	movs	r1, #128	@ 0x80
 8003132:	2021      	movs	r0, #33	@ 0x21
 8003134:	f000 fe20 	bl	8003d78 <_ADXL343_WriteReg8>



      //  //Step Counter
      _ADXL343_WriteReg8(0x18, 0x01); // enable walking mode
 8003138:	2101      	movs	r1, #1
 800313a:	2018      	movs	r0, #24
 800313c:	f000 fe1c 	bl	8003d78 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x20, 0x01); // enable step interrupt
 8003140:	2101      	movs	r1, #1
 8003142:	2020      	movs	r0, #32
 8003144:	f000 fe18 	bl	8003d78 <_ADXL343_WriteReg8>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
      //Before entering the while, fill the screen to clear it once
      fillScreen(BLACK);
 8003148:	2000      	movs	r0, #0
 800314a:	f7ff fb8d 	bl	8002868 <fillScreen>
  while (1)
  {
	  SendData();
 800314e:	f000 fe39 	bl	8003dc4 <SendData>
	  if((game.time.hours%dayLength)==0) game.stepsToday=0;
 8003152:	4b99      	ldr	r3, [pc, #612]	@ (80033b8 <main+0x3ac>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2218      	movs	r2, #24
 8003158:	0011      	movs	r1, r2
 800315a:	0018      	movs	r0, r3
 800315c:	f7fd f954 	bl	8000408 <__aeabi_idivmod>
 8003160:	1e0b      	subs	r3, r1, #0
 8003162:	d104      	bne.n	800316e <main+0x162>
 8003164:	4a94      	ldr	r2, [pc, #592]	@ (80033b8 <main+0x3ac>)
 8003166:	2390      	movs	r3, #144	@ 0x90
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	2100      	movs	r1, #0
 800316c:	50d1      	str	r1, [r2, r3]
	  if((game.time.hours%weekLength)==0) game.weeklySteps=0;
 800316e:	4b92      	ldr	r3, [pc, #584]	@ (80033b8 <main+0x3ac>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	22a8      	movs	r2, #168	@ 0xa8
 8003174:	0011      	movs	r1, r2
 8003176:	0018      	movs	r0, r3
 8003178:	f7fd f946 	bl	8000408 <__aeabi_idivmod>
 800317c:	1e0b      	subs	r3, r1, #0
 800317e:	d104      	bne.n	800318a <main+0x17e>
 8003180:	4a8d      	ldr	r2, [pc, #564]	@ (80033b8 <main+0x3ac>)
 8003182:	238e      	movs	r3, #142	@ 0x8e
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	2100      	movs	r1, #0
 8003188:	50d1      	str	r1, [r2, r3]
	  game.stepsToday +=steps-game.allSteps;
 800318a:	4a8b      	ldr	r2, [pc, #556]	@ (80033b8 <main+0x3ac>)
 800318c:	2390      	movs	r3, #144	@ 0x90
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	58d2      	ldr	r2, [r2, r3]
 8003192:	4b83      	ldr	r3, [pc, #524]	@ (80033a0 <main+0x394>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	0018      	movs	r0, r3
 8003198:	4987      	ldr	r1, [pc, #540]	@ (80033b8 <main+0x3ac>)
 800319a:	238c      	movs	r3, #140	@ 0x8c
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	58cb      	ldr	r3, [r1, r3]
 80031a0:	1ac3      	subs	r3, r0, r3
 80031a2:	18d1      	adds	r1, r2, r3
 80031a4:	4a84      	ldr	r2, [pc, #528]	@ (80033b8 <main+0x3ac>)
 80031a6:	2390      	movs	r3, #144	@ 0x90
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	50d1      	str	r1, [r2, r3]
	  game.weeklySteps+=steps-game.allSteps;
 80031ac:	4a82      	ldr	r2, [pc, #520]	@ (80033b8 <main+0x3ac>)
 80031ae:	238e      	movs	r3, #142	@ 0x8e
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	58d2      	ldr	r2, [r2, r3]
 80031b4:	4b7a      	ldr	r3, [pc, #488]	@ (80033a0 <main+0x394>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	0018      	movs	r0, r3
 80031ba:	497f      	ldr	r1, [pc, #508]	@ (80033b8 <main+0x3ac>)
 80031bc:	238c      	movs	r3, #140	@ 0x8c
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	58cb      	ldr	r3, [r1, r3]
 80031c2:	1ac3      	subs	r3, r0, r3
 80031c4:	18d1      	adds	r1, r2, r3
 80031c6:	4a7c      	ldr	r2, [pc, #496]	@ (80033b8 <main+0x3ac>)
 80031c8:	238e      	movs	r3, #142	@ 0x8e
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	50d1      	str	r1, [r2, r3]
	  game.allSteps=steps;
 80031ce:	4b74      	ldr	r3, [pc, #464]	@ (80033a0 <main+0x394>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	0019      	movs	r1, r3
 80031d4:	4a78      	ldr	r2, [pc, #480]	@ (80033b8 <main+0x3ac>)
 80031d6:	238c      	movs	r3, #140	@ 0x8c
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	50d1      	str	r1, [r2, r3]
	  //SendData();
	  //HAL_UART_Transmit(&huart2, "hello", 5, 100);
	  switch(currentMenu){
 80031dc:	4b7c      	ldr	r3, [pc, #496]	@ (80033d0 <main+0x3c4>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d100      	bne.n	80031e6 <main+0x1da>
 80031e4:	e206      	b.n	80035f4 <main+0x5e8>
 80031e6:	dcb2      	bgt.n	800314e <main+0x142>
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d100      	bne.n	80031ee <main+0x1e2>
 80031ec:	e104      	b.n	80033f8 <main+0x3ec>
 80031ee:	dcae      	bgt.n	800314e <main+0x142>
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d060      	beq.n	80032b6 <main+0x2aa>
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d1aa      	bne.n	800314e <main+0x142>
	  case Main:


		  if((++updateScreen)>=5)
 80031f8:	4b76      	ldr	r3, [pc, #472]	@ (80033d4 <main+0x3c8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	4b75      	ldr	r3, [pc, #468]	@ (80033d4 <main+0x3c8>)
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	4b74      	ldr	r3, [pc, #464]	@ (80033d4 <main+0x3c8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b04      	cmp	r3, #4
 8003208:	d922      	bls.n	8003250 <main+0x244>
		  {
			  //Animate character
			  Animate(animSitting,1);
 800320a:	4b6a      	ldr	r3, [pc, #424]	@ (80033b4 <main+0x3a8>)
 800320c:	2101      	movs	r1, #1
 800320e:	0018      	movs	r0, r3
 8003210:	f000 fd4e 	bl	8003cb0 <Animate>
			  updateScreen = 0;
 8003214:	4b6f      	ldr	r3, [pc, #444]	@ (80033d4 <main+0x3c8>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
			  //Update steps
			  _ADXL343_ReadReg8(0x15, &steps, 1);
 800321a:	4b61      	ldr	r3, [pc, #388]	@ (80033a0 <main+0x394>)
 800321c:	2201      	movs	r2, #1
 800321e:	0019      	movs	r1, r3
 8003220:	2015      	movs	r0, #21
 8003222:	f000 fd77 	bl	8003d14 <_ADXL343_ReadReg8>
			  sprintf(buffer2, "Steps today: %d ", steps);
 8003226:	4b5e      	ldr	r3, [pc, #376]	@ (80033a0 <main+0x394>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	001a      	movs	r2, r3
 800322c:	496a      	ldr	r1, [pc, #424]	@ (80033d8 <main+0x3cc>)
 800322e:	4b6b      	ldr	r3, [pc, #428]	@ (80033dc <main+0x3d0>)
 8003230:	0018      	movs	r0, r3
 8003232:	f005 ff81 	bl	8009138 <siprintf>
			  drawString(0, 20, buffer2, WHITE, BLACK, 1, 1);
 8003236:	2301      	movs	r3, #1
 8003238:	425b      	negs	r3, r3
 800323a:	4a68      	ldr	r2, [pc, #416]	@ (80033dc <main+0x3d0>)
 800323c:	2101      	movs	r1, #1
 800323e:	9102      	str	r1, [sp, #8]
 8003240:	2101      	movs	r1, #1
 8003242:	9101      	str	r1, [sp, #4]
 8003244:	2100      	movs	r1, #0
 8003246:	9100      	str	r1, [sp, #0]
 8003248:	2114      	movs	r1, #20
 800324a:	2000      	movs	r0, #0
 800324c:	f7ff f9c7 	bl	80025de <drawString>
		  }


		  //Change current Menu
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET ) {
 8003250:	2380      	movs	r3, #128	@ 0x80
 8003252:	015a      	lsls	r2, r3, #5
 8003254:	23a0      	movs	r3, #160	@ 0xa0
 8003256:	05db      	lsls	r3, r3, #23
 8003258:	0011      	movs	r1, r2
 800325a:	0018      	movs	r0, r3
 800325c:	f001 fc28 	bl	8004ab0 <HAL_GPIO_ReadPin>
 8003260:	0003      	movs	r3, r0
 8003262:	2b01      	cmp	r3, #1
 8003264:	d10e      	bne.n	8003284 <main+0x278>
			  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8003266:	4b5e      	ldr	r3, [pc, #376]	@ (80033e0 <main+0x3d4>)
 8003268:	2100      	movs	r1, #0
 800326a:	0018      	movs	r0, r3
 800326c:	f004 f92e 	bl	80074cc <HAL_TIM_PWM_Start>
			  currentMenu = Settings;
 8003270:	4b57      	ldr	r3, [pc, #348]	@ (80033d0 <main+0x3c4>)
 8003272:	2202      	movs	r2, #2
 8003274:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8003276:	4b5b      	ldr	r3, [pc, #364]	@ (80033e4 <main+0x3d8>)
 8003278:	2200      	movs	r2, #0
 800327a:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 800327c:	2000      	movs	r0, #0
 800327e:	f7ff faf3 	bl	8002868 <fillScreen>
		  }
		  else
			  canChange = 1;


		  break;
 8003282:	e268      	b.n	8003756 <main+0x74a>
		  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET ) {
 8003284:	2380      	movs	r3, #128	@ 0x80
 8003286:	011a      	lsls	r2, r3, #4
 8003288:	23a0      	movs	r3, #160	@ 0xa0
 800328a:	05db      	lsls	r3, r3, #23
 800328c:	0011      	movs	r1, r2
 800328e:	0018      	movs	r0, r3
 8003290:	f001 fc0e 	bl	8004ab0 <HAL_GPIO_ReadPin>
 8003294:	0003      	movs	r3, r0
 8003296:	2b01      	cmp	r3, #1
 8003298:	d109      	bne.n	80032ae <main+0x2a2>
			  currentMenu = StatsDisplay;
 800329a:	4b4d      	ldr	r3, [pc, #308]	@ (80033d0 <main+0x3c4>)
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 80032a0:	4b50      	ldr	r3, [pc, #320]	@ (80033e4 <main+0x3d8>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 80032a6:	2000      	movs	r0, #0
 80032a8:	f7ff fade 	bl	8002868 <fillScreen>
		  break;
 80032ac:	e253      	b.n	8003756 <main+0x74a>
			  canChange = 1;
 80032ae:	4b4d      	ldr	r3, [pc, #308]	@ (80033e4 <main+0x3d8>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	701a      	strb	r2, [r3, #0]
		  break;
 80032b4:	e24f      	b.n	8003756 <main+0x74a>
	  case StatsDisplay:

		  if((++updateScreen)>=5)
 80032b6:	4b47      	ldr	r3, [pc, #284]	@ (80033d4 <main+0x3c8>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	4b45      	ldr	r3, [pc, #276]	@ (80033d4 <main+0x3c8>)
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	4b44      	ldr	r3, [pc, #272]	@ (80033d4 <main+0x3c8>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d951      	bls.n	800336c <main+0x360>
		  {
			  //fillScreen(BLACK);

			  drawString(0, 150, "- STEPS -", WHITE, BLACK, 1, 1);
 80032c8:	2301      	movs	r3, #1
 80032ca:	425b      	negs	r3, r3
 80032cc:	4a46      	ldr	r2, [pc, #280]	@ (80033e8 <main+0x3dc>)
 80032ce:	2101      	movs	r1, #1
 80032d0:	9102      	str	r1, [sp, #8]
 80032d2:	2101      	movs	r1, #1
 80032d4:	9101      	str	r1, [sp, #4]
 80032d6:	2100      	movs	r1, #0
 80032d8:	9100      	str	r1, [sp, #0]
 80032da:	2196      	movs	r1, #150	@ 0x96
 80032dc:	2000      	movs	r0, #0
 80032de:	f7ff f97e 	bl	80025de <drawString>
			  sprintf(buffer2, "Today: %d ", game.stepsToday);
 80032e2:	4a35      	ldr	r2, [pc, #212]	@ (80033b8 <main+0x3ac>)
 80032e4:	2390      	movs	r3, #144	@ 0x90
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	58d2      	ldr	r2, [r2, r3]
 80032ea:	4940      	ldr	r1, [pc, #256]	@ (80033ec <main+0x3e0>)
 80032ec:	4b3b      	ldr	r3, [pc, #236]	@ (80033dc <main+0x3d0>)
 80032ee:	0018      	movs	r0, r3
 80032f0:	f005 ff22 	bl	8009138 <siprintf>
			  drawString(0, 140, buffer2, WHITE, BLACK, 1, 1);
 80032f4:	2301      	movs	r3, #1
 80032f6:	425b      	negs	r3, r3
 80032f8:	4a38      	ldr	r2, [pc, #224]	@ (80033dc <main+0x3d0>)
 80032fa:	2101      	movs	r1, #1
 80032fc:	9102      	str	r1, [sp, #8]
 80032fe:	2101      	movs	r1, #1
 8003300:	9101      	str	r1, [sp, #4]
 8003302:	2100      	movs	r1, #0
 8003304:	9100      	str	r1, [sp, #0]
 8003306:	218c      	movs	r1, #140	@ 0x8c
 8003308:	2000      	movs	r0, #0
 800330a:	f7ff f968 	bl	80025de <drawString>
			  sprintf(buffer2, "This week: %d ", game.weeklySteps);
 800330e:	4a2a      	ldr	r2, [pc, #168]	@ (80033b8 <main+0x3ac>)
 8003310:	238e      	movs	r3, #142	@ 0x8e
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	58d2      	ldr	r2, [r2, r3]
 8003316:	4936      	ldr	r1, [pc, #216]	@ (80033f0 <main+0x3e4>)
 8003318:	4b30      	ldr	r3, [pc, #192]	@ (80033dc <main+0x3d0>)
 800331a:	0018      	movs	r0, r3
 800331c:	f005 ff0c 	bl	8009138 <siprintf>
			  drawString(0, 130, buffer2, WHITE, BLACK, 1, 1);
 8003320:	2301      	movs	r3, #1
 8003322:	425b      	negs	r3, r3
 8003324:	4a2d      	ldr	r2, [pc, #180]	@ (80033dc <main+0x3d0>)
 8003326:	2101      	movs	r1, #1
 8003328:	9102      	str	r1, [sp, #8]
 800332a:	2101      	movs	r1, #1
 800332c:	9101      	str	r1, [sp, #4]
 800332e:	2100      	movs	r1, #0
 8003330:	9100      	str	r1, [sp, #0]
 8003332:	2182      	movs	r1, #130	@ 0x82
 8003334:	2000      	movs	r0, #0
 8003336:	f7ff f952 	bl	80025de <drawString>
			  sprintf(buffer2, "All time: %d ", game.allSteps);
 800333a:	4a1f      	ldr	r2, [pc, #124]	@ (80033b8 <main+0x3ac>)
 800333c:	238c      	movs	r3, #140	@ 0x8c
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	58d2      	ldr	r2, [r2, r3]
 8003342:	492c      	ldr	r1, [pc, #176]	@ (80033f4 <main+0x3e8>)
 8003344:	4b25      	ldr	r3, [pc, #148]	@ (80033dc <main+0x3d0>)
 8003346:	0018      	movs	r0, r3
 8003348:	f005 fef6 	bl	8009138 <siprintf>
			  drawString(0, 120, buffer2, WHITE, BLACK, 1, 1);
 800334c:	2301      	movs	r3, #1
 800334e:	425b      	negs	r3, r3
 8003350:	4a22      	ldr	r2, [pc, #136]	@ (80033dc <main+0x3d0>)
 8003352:	2101      	movs	r1, #1
 8003354:	9102      	str	r1, [sp, #8]
 8003356:	2101      	movs	r1, #1
 8003358:	9101      	str	r1, [sp, #4]
 800335a:	2100      	movs	r1, #0
 800335c:	9100      	str	r1, [sp, #0]
 800335e:	2178      	movs	r1, #120	@ 0x78
 8003360:	2000      	movs	r0, #0
 8003362:	f7ff f93c 	bl	80025de <drawString>

			  //drawString(0, 70, "- PET -", WHITE, BLACK, 1, 1);
			  updateScreen = 0;
 8003366:	4b1b      	ldr	r3, [pc, #108]	@ (80033d4 <main+0x3c8>)
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
		  }
	  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET ){
 800336c:	2380      	movs	r3, #128	@ 0x80
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	23a0      	movs	r3, #160	@ 0xa0
 8003372:	05db      	lsls	r3, r3, #23
 8003374:	0011      	movs	r1, r2
 8003376:	0018      	movs	r0, r3
 8003378:	f001 fb9a 	bl	8004ab0 <HAL_GPIO_ReadPin>
 800337c:	0003      	movs	r3, r0
 800337e:	2b01      	cmp	r3, #1
 8003380:	d109      	bne.n	8003396 <main+0x38a>
	  		currentMenu = Main;
 8003382:	4b13      	ldr	r3, [pc, #76]	@ (80033d0 <main+0x3c4>)
 8003384:	2201      	movs	r2, #1
 8003386:	701a      	strb	r2, [r3, #0]
	  		canChange = 0;
 8003388:	4b16      	ldr	r3, [pc, #88]	@ (80033e4 <main+0x3d8>)
 800338a:	2200      	movs	r2, #0
 800338c:	701a      	strb	r2, [r3, #0]
	  		fillScreen(BLACK);
 800338e:	2000      	movs	r0, #0
 8003390:	f7ff fa6a 	bl	8002868 <fillScreen>
	  	  }
	  	  else
	  	      canChange = 1;
	  	  break;
 8003394:	e1df      	b.n	8003756 <main+0x74a>
	  	      canChange = 1;
 8003396:	4b13      	ldr	r3, [pc, #76]	@ (80033e4 <main+0x3d8>)
 8003398:	2201      	movs	r2, #1
 800339a:	701a      	strb	r2, [r3, #0]
	  	  break;
 800339c:	e1db      	b.n	8003756 <main+0x74a>
 800339e:	46c0      	nop			@ (mov r8, r8)
 80033a0:	20000e68 	.word	0x20000e68
 80033a4:	20000dd0 	.word	0x20000dd0
 80033a8:	20000000 	.word	0x20000000
 80033ac:	20000dd8 	.word	0x20000dd8
 80033b0:	200004cc 	.word	0x200004cc
 80033b4:	20000de0 	.word	0x20000de0
 80033b8:	20000a68 	.word	0x20000a68
 80033bc:	20000bb0 	.word	0x20000bb0
 80033c0:	414587dd 	.word	0x414587dd
 80033c4:	c2b233c5 	.word	0xc2b233c5
 80033c8:	20000bbc 	.word	0x20000bbc
 80033cc:	40014800 	.word	0x40014800
 80033d0:	200009e0 	.word	0x200009e0
 80033d4:	20000dcc 	.word	0x20000dcc
 80033d8:	08009d10 	.word	0x08009d10
 80033dc:	20000e04 	.word	0x20000e04
 80033e0:	20000f58 	.word	0x20000f58
 80033e4:	200009e1 	.word	0x200009e1
 80033e8:	08009d24 	.word	0x08009d24
 80033ec:	08009d30 	.word	0x08009d30
 80033f0:	08009d3c 	.word	0x08009d3c
 80033f4:	08009d4c 	.word	0x08009d4c
	  case Settings:
		  ++updateScreen;
 80033f8:	4bd7      	ldr	r3, [pc, #860]	@ (8003758 <main+0x74c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	4bd6      	ldr	r3, [pc, #856]	@ (8003758 <main+0x74c>)
 8003400:	601a      	str	r2, [r3, #0]
		  HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8003402:	4bd6      	ldr	r3, [pc, #856]	@ (800375c <main+0x750>)
 8003404:	2100      	movs	r1, #0
 8003406:	0018      	movs	r0, r3
 8003408:	f004 f950 	bl	80076ac <HAL_TIM_PWM_Stop>
		  drawString(0, 150, "- OPTIONS -", WHITE, BLACK, 1, 1);
 800340c:	2301      	movs	r3, #1
 800340e:	425b      	negs	r3, r3
 8003410:	4ad3      	ldr	r2, [pc, #844]	@ (8003760 <main+0x754>)
 8003412:	2101      	movs	r1, #1
 8003414:	9102      	str	r1, [sp, #8]
 8003416:	2101      	movs	r1, #1
 8003418:	9101      	str	r1, [sp, #4]
 800341a:	2100      	movs	r1, #0
 800341c:	9100      	str	r1, [sp, #0]
 800341e:	2196      	movs	r1, #150	@ 0x96
 8003420:	2000      	movs	r0, #0
 8003422:	f7ff f8dc 	bl	80025de <drawString>
		  sprintf(buffer2, "DIFFICULTY: %d ", game.challengeGoal);
 8003426:	4acf      	ldr	r2, [pc, #828]	@ (8003764 <main+0x758>)
 8003428:	2392      	movs	r3, #146	@ 0x92
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	58d2      	ldr	r2, [r2, r3]
 800342e:	49ce      	ldr	r1, [pc, #824]	@ (8003768 <main+0x75c>)
 8003430:	4bce      	ldr	r3, [pc, #824]	@ (800376c <main+0x760>)
 8003432:	0018      	movs	r0, r3
 8003434:	f005 fe80 	bl	8009138 <siprintf>
		  drawString(0, 130, buffer2, WHITE, BLACK, 1, 1); //Display the current difficulty
 8003438:	2301      	movs	r3, #1
 800343a:	425b      	negs	r3, r3
 800343c:	4acb      	ldr	r2, [pc, #812]	@ (800376c <main+0x760>)
 800343e:	2101      	movs	r1, #1
 8003440:	9102      	str	r1, [sp, #8]
 8003442:	2101      	movs	r1, #1
 8003444:	9101      	str	r1, [sp, #4]
 8003446:	2100      	movs	r1, #0
 8003448:	9100      	str	r1, [sp, #0]
 800344a:	2182      	movs	r1, #130	@ 0x82
 800344c:	2000      	movs	r0, #0
 800344e:	f7ff f8c6 	bl	80025de <drawString>
		  drawString(0,110,"UPLOAD DATA",WHITE,BLACK,1,1);
 8003452:	2301      	movs	r3, #1
 8003454:	425b      	negs	r3, r3
 8003456:	4ac6      	ldr	r2, [pc, #792]	@ (8003770 <main+0x764>)
 8003458:	2101      	movs	r1, #1
 800345a:	9102      	str	r1, [sp, #8]
 800345c:	2101      	movs	r1, #1
 800345e:	9101      	str	r1, [sp, #4]
 8003460:	2100      	movs	r1, #0
 8003462:	9100      	str	r1, [sp, #0]
 8003464:	216e      	movs	r1, #110	@ 0x6e
 8003466:	2000      	movs	r0, #0
 8003468:	f7ff f8b9 	bl	80025de <drawString>
		  if(editSetting)
 800346c:	4bc1      	ldr	r3, [pc, #772]	@ (8003774 <main+0x768>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d055      	beq.n	8003520 <main+0x514>
		  {
				  drawLine(0,125,128,125,WHITE);
 8003474:	4bc0      	ldr	r3, [pc, #768]	@ (8003778 <main+0x76c>)
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	237d      	movs	r3, #125	@ 0x7d
 800347a:	2280      	movs	r2, #128	@ 0x80
 800347c:	217d      	movs	r1, #125	@ 0x7d
 800347e:	2000      	movs	r0, #0
 8003480:	f7ff f81d 	bl	80024be <drawLine>
				  //GET OUT when the center button is pressed!
				  if(updateScreen>=15)
 8003484:	4bb4      	ldr	r3, [pc, #720]	@ (8003758 <main+0x74c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b0e      	cmp	r3, #14
 800348a:	d800      	bhi.n	800348e <main+0x482>
 800348c:	e160      	b.n	8003750 <main+0x744>
				  {
					  updateScreen = 0;
 800348e:	4bb2      	ldr	r3, [pc, #712]	@ (8003758 <main+0x74c>)
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
				  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6))
 8003494:	4bb9      	ldr	r3, [pc, #740]	@ (800377c <main+0x770>)
 8003496:	2140      	movs	r1, #64	@ 0x40
 8003498:	0018      	movs	r0, r3
 800349a:	f001 fb09 	bl	8004ab0 <HAL_GPIO_ReadPin>
 800349e:	1e03      	subs	r3, r0, #0
 80034a0:	d00b      	beq.n	80034ba <main+0x4ae>
				  {
					  editSetting = 0;
 80034a2:	4bb4      	ldr	r3, [pc, #720]	@ (8003774 <main+0x768>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
					  drawLine(0,125,128,125,BLACK);
 80034a8:	2300      	movs	r3, #0
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	237d      	movs	r3, #125	@ 0x7d
 80034ae:	2280      	movs	r2, #128	@ 0x80
 80034b0:	217d      	movs	r1, #125	@ 0x7d
 80034b2:	2000      	movs	r0, #0
 80034b4:	f7ff f803 	bl	80024be <drawLine>
 80034b8:	e028      	b.n	800350c <main+0x500>
				  }
				  //Right increments the goal
				  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12))
 80034ba:	2380      	movs	r3, #128	@ 0x80
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	23a0      	movs	r3, #160	@ 0xa0
 80034c0:	05db      	lsls	r3, r3, #23
 80034c2:	0011      	movs	r1, r2
 80034c4:	0018      	movs	r0, r3
 80034c6:	f001 faf3 	bl	8004ab0 <HAL_GPIO_ReadPin>
 80034ca:	1e03      	subs	r3, r0, #0
 80034cc:	d00a      	beq.n	80034e4 <main+0x4d8>
				  {
					  game.challengeGoal += 100;
 80034ce:	4aa5      	ldr	r2, [pc, #660]	@ (8003764 <main+0x758>)
 80034d0:	2392      	movs	r3, #146	@ 0x92
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	58d3      	ldr	r3, [r2, r3]
 80034d6:	3364      	adds	r3, #100	@ 0x64
 80034d8:	0019      	movs	r1, r3
 80034da:	4aa2      	ldr	r2, [pc, #648]	@ (8003764 <main+0x758>)
 80034dc:	2392      	movs	r3, #146	@ 0x92
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	50d1      	str	r1, [r2, r3]
 80034e2:	e013      	b.n	800350c <main+0x500>
				  }
				  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12))
 80034e4:	2380      	movs	r3, #128	@ 0x80
 80034e6:	015a      	lsls	r2, r3, #5
 80034e8:	23a0      	movs	r3, #160	@ 0xa0
 80034ea:	05db      	lsls	r3, r3, #23
 80034ec:	0011      	movs	r1, r2
 80034ee:	0018      	movs	r0, r3
 80034f0:	f001 fade 	bl	8004ab0 <HAL_GPIO_ReadPin>
 80034f4:	1e03      	subs	r3, r0, #0
 80034f6:	d009      	beq.n	800350c <main+0x500>
				  {
					  game.challengeGoal -= 100;
 80034f8:	4a9a      	ldr	r2, [pc, #616]	@ (8003764 <main+0x758>)
 80034fa:	2392      	movs	r3, #146	@ 0x92
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	58d3      	ldr	r3, [r2, r3]
 8003500:	3b64      	subs	r3, #100	@ 0x64
 8003502:	0019      	movs	r1, r3
 8003504:	4a97      	ldr	r2, [pc, #604]	@ (8003764 <main+0x758>)
 8003506:	2392      	movs	r3, #146	@ 0x92
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	50d1      	str	r1, [r2, r3]
				  }
				  sprintf(buffer2, "DIFFICULTY: %d ", game.challengeGoal);
 800350c:	4a95      	ldr	r2, [pc, #596]	@ (8003764 <main+0x758>)
 800350e:	2392      	movs	r3, #146	@ 0x92
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	58d2      	ldr	r2, [r2, r3]
 8003514:	4994      	ldr	r1, [pc, #592]	@ (8003768 <main+0x75c>)
 8003516:	4b95      	ldr	r3, [pc, #596]	@ (800376c <main+0x760>)
 8003518:	0018      	movs	r0, r3
 800351a:	f005 fe0d 	bl	8009138 <siprintf>
			  }
			  break;
 800351e:	e117      	b.n	8003750 <main+0x744>
		  }
		  if(currentSetting==Difficulty)
 8003520:	4b97      	ldr	r3, [pc, #604]	@ (8003780 <main+0x774>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d110      	bne.n	800354a <main+0x53e>
		  {
			  //Try to underline the option being selected
			  drawLine(0,125,20,125,WHITE);
 8003528:	4b93      	ldr	r3, [pc, #588]	@ (8003778 <main+0x76c>)
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	237d      	movs	r3, #125	@ 0x7d
 800352e:	2214      	movs	r2, #20
 8003530:	217d      	movs	r1, #125	@ 0x7d
 8003532:	2000      	movs	r0, #0
 8003534:	f7fe ffc3 	bl	80024be <drawLine>
			  //Then erase the highlight under the other option not being selected
			  drawLine(0,105,20,105,BLACK);
 8003538:	2300      	movs	r3, #0
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	2369      	movs	r3, #105	@ 0x69
 800353e:	2214      	movs	r2, #20
 8003540:	2169      	movs	r1, #105	@ 0x69
 8003542:	2000      	movs	r0, #0
 8003544:	f7fe ffbb 	bl	80024be <drawLine>
 8003548:	e013      	b.n	8003572 <main+0x566>
		  }
		  else if(currentSetting==Upload)
 800354a:	4b8d      	ldr	r3, [pc, #564]	@ (8003780 <main+0x774>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d10f      	bne.n	8003572 <main+0x566>
		  {
			  drawLine(0,105,20,105,WHITE);
 8003552:	4b89      	ldr	r3, [pc, #548]	@ (8003778 <main+0x76c>)
 8003554:	9300      	str	r3, [sp, #0]
 8003556:	2369      	movs	r3, #105	@ 0x69
 8003558:	2214      	movs	r2, #20
 800355a:	2169      	movs	r1, #105	@ 0x69
 800355c:	2000      	movs	r0, #0
 800355e:	f7fe ffae 	bl	80024be <drawLine>
			  drawLine(0,125,20,125,BLACK);
 8003562:	2300      	movs	r3, #0
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	237d      	movs	r3, #125	@ 0x7d
 8003568:	2214      	movs	r2, #20
 800356a:	217d      	movs	r1, #125	@ 0x7d
 800356c:	2000      	movs	r0, #0
 800356e:	f7fe ffa6 	bl	80024be <drawLine>
		  }
		  //IF RIGHT BUTTON IS PRESSED, INCREMENT THE SETTINGS MENU
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET)
 8003572:	2380      	movs	r3, #128	@ 0x80
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	23a0      	movs	r3, #160	@ 0xa0
 8003578:	05db      	lsls	r3, r3, #23
 800357a:	0011      	movs	r1, r2
 800357c:	0018      	movs	r0, r3
 800357e:	f001 fa97 	bl	8004ab0 <HAL_GPIO_ReadPin>
 8003582:	0003      	movs	r3, r0
 8003584:	2b01      	cmp	r3, #1
 8003586:	d10d      	bne.n	80035a4 <main+0x598>
		  {
			  currentSetting++;
 8003588:	4b7d      	ldr	r3, [pc, #500]	@ (8003780 <main+0x774>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	4b7c      	ldr	r3, [pc, #496]	@ (8003780 <main+0x774>)
 8003590:	601a      	str	r2, [r3, #0]
			  if(currentSetting>1)
 8003592:	4b7b      	ldr	r3, [pc, #492]	@ (8003780 <main+0x774>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d800      	bhi.n	800359c <main+0x590>
 800359a:	e0db      	b.n	8003754 <main+0x748>
			  {
				  currentSetting=0;
 800359c:	4b78      	ldr	r3, [pc, #480]	@ (8003780 <main+0x774>)
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
		  	  	 canChange = 0;
		  	  	fillScreen(BLACK);
		  	  	}
		  	  	 else
		  			 canChange = 1;
		  break;
 80035a2:	e0d7      	b.n	8003754 <main+0x748>
		  else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) && currentSetting==Difficulty)
 80035a4:	4b77      	ldr	r3, [pc, #476]	@ (8003784 <main+0x778>)
 80035a6:	2102      	movs	r1, #2
 80035a8:	0018      	movs	r0, r3
 80035aa:	f001 fa81 	bl	8004ab0 <HAL_GPIO_ReadPin>
 80035ae:	1e03      	subs	r3, r0, #0
 80035b0:	d007      	beq.n	80035c2 <main+0x5b6>
 80035b2:	4b73      	ldr	r3, [pc, #460]	@ (8003780 <main+0x774>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d103      	bne.n	80035c2 <main+0x5b6>
			  editSetting=1;
 80035ba:	4b6e      	ldr	r3, [pc, #440]	@ (8003774 <main+0x768>)
 80035bc:	2201      	movs	r2, #1
 80035be:	601a      	str	r2, [r3, #0]
		  break;
 80035c0:	e0c8      	b.n	8003754 <main+0x748>
		  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET) {
 80035c2:	2380      	movs	r3, #128	@ 0x80
 80035c4:	011a      	lsls	r2, r3, #4
 80035c6:	23a0      	movs	r3, #160	@ 0xa0
 80035c8:	05db      	lsls	r3, r3, #23
 80035ca:	0011      	movs	r1, r2
 80035cc:	0018      	movs	r0, r3
 80035ce:	f001 fa6f 	bl	8004ab0 <HAL_GPIO_ReadPin>
 80035d2:	0003      	movs	r3, r0
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d109      	bne.n	80035ec <main+0x5e0>
		  	  	currentMenu = Main;
 80035d8:	4b6b      	ldr	r3, [pc, #428]	@ (8003788 <main+0x77c>)
 80035da:	2201      	movs	r2, #1
 80035dc:	701a      	strb	r2, [r3, #0]
		  	  	 canChange = 0;
 80035de:	4b6b      	ldr	r3, [pc, #428]	@ (800378c <main+0x780>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	701a      	strb	r2, [r3, #0]
		  	  	fillScreen(BLACK);
 80035e4:	2000      	movs	r0, #0
 80035e6:	f7ff f93f 	bl	8002868 <fillScreen>
		  break;
 80035ea:	e0b3      	b.n	8003754 <main+0x748>
		  			 canChange = 1;
 80035ec:	4b67      	ldr	r3, [pc, #412]	@ (800378c <main+0x780>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	701a      	strb	r2, [r3, #0]
		  break;
 80035f2:	e0af      	b.n	8003754 <main+0x748>
	  	// else
			 //canChange = 1;

			 //break;
	  case ConnorDemo:
		  	  steps=0;
 80035f4:	4b66      	ldr	r3, [pc, #408]	@ (8003790 <main+0x784>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]

		  	  if((whileI++)%3==0)
 80035fa:	4b66      	ldr	r3, [pc, #408]	@ (8003794 <main+0x788>)
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	b291      	uxth	r1, r2
 8003604:	4a63      	ldr	r2, [pc, #396]	@ (8003794 <main+0x788>)
 8003606:	8011      	strh	r1, [r2, #0]
 8003608:	2103      	movs	r1, #3
 800360a:	0018      	movs	r0, r3
 800360c:	f7fc fe12 	bl	8000234 <__aeabi_uidivmod>
 8003610:	000b      	movs	r3, r1
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10f      	bne.n	8003638 <main+0x62c>
		  		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET)
 8003618:	4b5a      	ldr	r3, [pc, #360]	@ (8003784 <main+0x778>)
 800361a:	2102      	movs	r1, #2
 800361c:	0018      	movs	r0, r3
 800361e:	f001 fa47 	bl	8004ab0 <HAL_GPIO_ReadPin>
 8003622:	0003      	movs	r3, r0
 8003624:	2b01      	cmp	r3, #1
 8003626:	d104      	bne.n	8003632 <main+0x626>
		  		  		  fillScreen(WHITE);
 8003628:	4b53      	ldr	r3, [pc, #332]	@ (8003778 <main+0x76c>)
 800362a:	0018      	movs	r0, r3
 800362c:	f7ff f91c 	bl	8002868 <fillScreen>
 8003630:	e002      	b.n	8003638 <main+0x62c>
		  		  	  else
		  		  		  fillScreen(BLACK);
 8003632:	2000      	movs	r0, #0
 8003634:	f7ff f918 	bl	8002868 <fillScreen>
		  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET)
 8003638:	2380      	movs	r3, #128	@ 0x80
 800363a:	011a      	lsls	r2, r3, #4
 800363c:	23a0      	movs	r3, #160	@ 0xa0
 800363e:	05db      	lsls	r3, r3, #23
 8003640:	0011      	movs	r1, r2
 8003642:	0018      	movs	r0, r3
 8003644:	f001 fa34 	bl	8004ab0 <HAL_GPIO_ReadPin>
 8003648:	0003      	movs	r3, r0
 800364a:	2b01      	cmp	r3, #1
 800364c:	d106      	bne.n	800365c <main+0x650>
		  		  petXPos-=5;
 800364e:	4b52      	ldr	r3, [pc, #328]	@ (8003798 <main+0x78c>)
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b05      	subs	r3, #5
 8003656:	b29a      	uxth	r2, r3
 8003658:	4b4f      	ldr	r3, [pc, #316]	@ (8003798 <main+0x78c>)
 800365a:	801a      	strh	r2, [r3, #0]
		  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET)
 800365c:	2380      	movs	r3, #128	@ 0x80
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	23a0      	movs	r3, #160	@ 0xa0
 8003662:	05db      	lsls	r3, r3, #23
 8003664:	0011      	movs	r1, r2
 8003666:	0018      	movs	r0, r3
 8003668:	f001 fa22 	bl	8004ab0 <HAL_GPIO_ReadPin>
 800366c:	0003      	movs	r3, r0
 800366e:	2b01      	cmp	r3, #1
 8003670:	d106      	bne.n	8003680 <main+0x674>
		  		  petXPos+=5;
 8003672:	4b49      	ldr	r3, [pc, #292]	@ (8003798 <main+0x78c>)
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	b29b      	uxth	r3, r3
 8003678:	3305      	adds	r3, #5
 800367a:	b29a      	uxth	r2, r3
 800367c:	4b46      	ldr	r3, [pc, #280]	@ (8003798 <main+0x78c>)
 800367e:	801a      	strh	r2, [r3, #0]
		  	  if(petXPos<3)petXPos=0;
 8003680:	4b45      	ldr	r3, [pc, #276]	@ (8003798 <main+0x78c>)
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d802      	bhi.n	8003690 <main+0x684>
 800368a:	4b43      	ldr	r3, [pc, #268]	@ (8003798 <main+0x78c>)
 800368c:	2200      	movs	r2, #0
 800368e:	801a      	strh	r2, [r3, #0]
		  	  if(petXPos>60) petXPos=60;
 8003690:	4b41      	ldr	r3, [pc, #260]	@ (8003798 <main+0x78c>)
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	b29b      	uxth	r3, r3
 8003696:	2b3c      	cmp	r3, #60	@ 0x3c
 8003698:	d902      	bls.n	80036a0 <main+0x694>
 800369a:	4b3f      	ldr	r3, [pc, #252]	@ (8003798 <main+0x78c>)
 800369c:	223c      	movs	r2, #60	@ 0x3c
 800369e:	801a      	strh	r2, [r3, #0]
		  	  freq = freqs[(toneIndex++)%8];
 80036a0:	4b3e      	ldr	r3, [pc, #248]	@ (800379c <main+0x790>)
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	1c5a      	adds	r2, r3, #1
 80036a8:	b291      	uxth	r1, r2
 80036aa:	4a3c      	ldr	r2, [pc, #240]	@ (800379c <main+0x790>)
 80036ac:	8011      	strh	r1, [r2, #0]
 80036ae:	001a      	movs	r2, r3
 80036b0:	2307      	movs	r3, #7
 80036b2:	4013      	ands	r3, r2
 80036b4:	4a3a      	ldr	r2, [pc, #232]	@ (80037a0 <main+0x794>)
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	18d3      	adds	r3, r2, r3
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	4939      	ldr	r1, [pc, #228]	@ (80037a4 <main+0x798>)
 80036c0:	600a      	str	r2, [r1, #0]
 80036c2:	604b      	str	r3, [r1, #4]
		  	  TIM17->ARR=(uint32_t)(987*(float)1000/(float)freq);
 80036c4:	4b37      	ldr	r3, [pc, #220]	@ (80037a4 <main+0x798>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	0010      	movs	r0, r2
 80036cc:	0019      	movs	r1, r3
 80036ce:	f7fe fb43 	bl	8001d58 <__aeabi_d2f>
 80036d2:	1c03      	adds	r3, r0, #0
 80036d4:	1c19      	adds	r1, r3, #0
 80036d6:	4834      	ldr	r0, [pc, #208]	@ (80037a8 <main+0x79c>)
 80036d8:	f7fc ffde 	bl	8000698 <__aeabi_fdiv>
 80036dc:	1c03      	adds	r3, r0, #0
 80036de:	4c33      	ldr	r4, [pc, #204]	@ (80037ac <main+0x7a0>)
 80036e0:	1c18      	adds	r0, r3, #0
 80036e2:	f7fc fef5 	bl	80004d0 <__aeabi_f2uiz>
 80036e6:	0003      	movs	r3, r0
 80036e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
//		  	  _ADXL343_ReadReg8(0x07, &accelX, 1);
//		  	  _ADXL343_ReadReg8(0x08, &accelY, 1);
//		  	  _ADXL343_ReadReg8(0x09, &accelZ, 1);

		  	  //sprintf(buffer2, "X:%d - Y:%d - Z:%d ", accelX, accelY, accelZ);
		  	  drawString(0, 10, buffer2, BLACK, GREEN, 1, 1);
 80036ea:	4a20      	ldr	r2, [pc, #128]	@ (800376c <main+0x760>)
 80036ec:	2301      	movs	r3, #1
 80036ee:	9302      	str	r3, [sp, #8]
 80036f0:	2301      	movs	r3, #1
 80036f2:	9301      	str	r3, [sp, #4]
 80036f4:	4b2e      	ldr	r3, [pc, #184]	@ (80037b0 <main+0x7a4>)
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	2300      	movs	r3, #0
 80036fa:	210a      	movs	r1, #10
 80036fc:	2000      	movs	r0, #0
 80036fe:	f7fe ff6e 	bl	80025de <drawString>

		  	  _ADXL343_ReadReg8(0x15, &steps, 1);
 8003702:	4b23      	ldr	r3, [pc, #140]	@ (8003790 <main+0x784>)
 8003704:	2201      	movs	r2, #1
 8003706:	0019      	movs	r1, r3
 8003708:	2015      	movs	r0, #21
 800370a:	f000 fb03 	bl	8003d14 <_ADXL343_ReadReg8>
		  	  sprintf(buffer2, "Steps: %d ", steps);
 800370e:	4b20      	ldr	r3, [pc, #128]	@ (8003790 <main+0x784>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	001a      	movs	r2, r3
 8003714:	4927      	ldr	r1, [pc, #156]	@ (80037b4 <main+0x7a8>)
 8003716:	4b15      	ldr	r3, [pc, #84]	@ (800376c <main+0x760>)
 8003718:	0018      	movs	r0, r3
 800371a:	f005 fd0d 	bl	8009138 <siprintf>
		  	  drawString(0, 20, buffer2, BLACK, GREEN, 1, 1);
 800371e:	4a13      	ldr	r2, [pc, #76]	@ (800376c <main+0x760>)
 8003720:	2301      	movs	r3, #1
 8003722:	9302      	str	r3, [sp, #8]
 8003724:	2301      	movs	r3, #1
 8003726:	9301      	str	r3, [sp, #4]
 8003728:	4b21      	ldr	r3, [pc, #132]	@ (80037b0 <main+0x7a4>)
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	2300      	movs	r3, #0
 800372e:	2114      	movs	r1, #20
 8003730:	2000      	movs	r0, #0
 8003732:	f7fe ff54 	bl	80025de <drawString>

		  	  	  //only run this code every few seconds

		  	  drawString(70, 70, buffer, BLACK, GREEN, 1, 1);
 8003736:	4a20      	ldr	r2, [pc, #128]	@ (80037b8 <main+0x7ac>)
 8003738:	2301      	movs	r3, #1
 800373a:	9302      	str	r3, [sp, #8]
 800373c:	2301      	movs	r3, #1
 800373e:	9301      	str	r3, [sp, #4]
 8003740:	4b1b      	ldr	r3, [pc, #108]	@ (80037b0 <main+0x7a4>)
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	2300      	movs	r3, #0
 8003746:	2146      	movs	r1, #70	@ 0x46
 8003748:	2046      	movs	r0, #70	@ 0x46
 800374a:	f7fe ff48 	bl	80025de <drawString>

		  break;
 800374e:	e002      	b.n	8003756 <main+0x74a>
			  break;
 8003750:	46c0      	nop			@ (mov r8, r8)
 8003752:	e4fc      	b.n	800314e <main+0x142>
		  break;
 8003754:	46c0      	nop			@ (mov r8, r8)
	  SendData();
 8003756:	e4fa      	b.n	800314e <main+0x142>
 8003758:	20000dcc 	.word	0x20000dcc
 800375c:	20000f58 	.word	0x20000f58
 8003760:	08009d5c 	.word	0x08009d5c
 8003764:	20000a68 	.word	0x20000a68
 8003768:	08009d68 	.word	0x08009d68
 800376c:	20000e04 	.word	0x20000e04
 8003770:	08009d78 	.word	0x08009d78
 8003774:	20000e70 	.word	0x20000e70
 8003778:	0000ffff 	.word	0x0000ffff
 800377c:	50000c00 	.word	0x50000c00
 8003780:	20000e6c 	.word	0x20000e6c
 8003784:	50000800 	.word	0x50000800
 8003788:	200009e0 	.word	0x200009e0
 800378c:	200009e1 	.word	0x200009e1
 8003790:	20000e68 	.word	0x20000e68
 8003794:	20000bb8 	.word	0x20000bb8
 8003798:	20000bba 	.word	0x20000bba
 800379c:	20000e00 	.word	0x20000e00
 80037a0:	200009a0 	.word	0x200009a0
 80037a4:	20000df8 	.word	0x20000df8
 80037a8:	4970f780 	.word	0x4970f780
 80037ac:	40014800 	.word	0x40014800
 80037b0:	ffffe007 	.word	0xffffe007
 80037b4:	08009d84 	.word	0x08009d84
 80037b8:	20000bbc 	.word	0x20000bbc

080037bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037bc:	b590      	push	{r4, r7, lr}
 80037be:	b095      	sub	sp, #84	@ 0x54
 80037c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037c2:	2414      	movs	r4, #20
 80037c4:	193b      	adds	r3, r7, r4
 80037c6:	0018      	movs	r0, r3
 80037c8:	233c      	movs	r3, #60	@ 0x3c
 80037ca:	001a      	movs	r2, r3
 80037cc:	2100      	movs	r1, #0
 80037ce:	f005 fcd5 	bl	800917c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037d2:	1d3b      	adds	r3, r7, #4
 80037d4:	0018      	movs	r0, r3
 80037d6:	2310      	movs	r3, #16
 80037d8:	001a      	movs	r2, r3
 80037da:	2100      	movs	r1, #0
 80037dc:	f005 fcce 	bl	800917c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037e0:	2380      	movs	r3, #128	@ 0x80
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	0018      	movs	r0, r3
 80037e6:	f001 ffe1 	bl	80057ac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80037ea:	193b      	adds	r3, r7, r4
 80037ec:	220a      	movs	r2, #10
 80037ee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037f0:	193b      	adds	r3, r7, r4
 80037f2:	2280      	movs	r2, #128	@ 0x80
 80037f4:	0052      	lsls	r2, r2, #1
 80037f6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80037f8:	0021      	movs	r1, r4
 80037fa:	187b      	adds	r3, r7, r1
 80037fc:	2200      	movs	r2, #0
 80037fe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003800:	187b      	adds	r3, r7, r1
 8003802:	2240      	movs	r2, #64	@ 0x40
 8003804:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003806:	187b      	adds	r3, r7, r1
 8003808:	2201      	movs	r2, #1
 800380a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800380c:	187b      	adds	r3, r7, r1
 800380e:	2202      	movs	r2, #2
 8003810:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003812:	187b      	adds	r3, r7, r1
 8003814:	2202      	movs	r2, #2
 8003816:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003818:	187b      	adds	r3, r7, r1
 800381a:	2200      	movs	r2, #0
 800381c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 800381e:	187b      	adds	r3, r7, r1
 8003820:	2208      	movs	r2, #8
 8003822:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003824:	187b      	adds	r3, r7, r1
 8003826:	2280      	movs	r2, #128	@ 0x80
 8003828:	0292      	lsls	r2, r2, #10
 800382a:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800382c:	187b      	adds	r3, r7, r1
 800382e:	2280      	movs	r2, #128	@ 0x80
 8003830:	0492      	lsls	r2, r2, #18
 8003832:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003834:	187b      	adds	r3, r7, r1
 8003836:	2280      	movs	r2, #128	@ 0x80
 8003838:	0592      	lsls	r2, r2, #22
 800383a:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800383c:	187b      	adds	r3, r7, r1
 800383e:	0018      	movs	r0, r3
 8003840:	f002 f800 	bl	8005844 <HAL_RCC_OscConfig>
 8003844:	1e03      	subs	r3, r0, #0
 8003846:	d001      	beq.n	800384c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8003848:	f000 fbbe 	bl	8003fc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800384c:	1d3b      	adds	r3, r7, #4
 800384e:	2207      	movs	r2, #7
 8003850:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003852:	1d3b      	adds	r3, r7, #4
 8003854:	2202      	movs	r2, #2
 8003856:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003858:	1d3b      	adds	r3, r7, #4
 800385a:	2200      	movs	r2, #0
 800385c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800385e:	1d3b      	adds	r3, r7, #4
 8003860:	2200      	movs	r2, #0
 8003862:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003864:	1d3b      	adds	r3, r7, #4
 8003866:	2102      	movs	r1, #2
 8003868:	0018      	movs	r0, r3
 800386a:	f002 fb4b 	bl	8005f04 <HAL_RCC_ClockConfig>
 800386e:	1e03      	subs	r3, r0, #0
 8003870:	d001      	beq.n	8003876 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8003872:	f000 fba9 	bl	8003fc8 <Error_Handler>
  }
}
 8003876:	46c0      	nop			@ (mov r8, r8)
 8003878:	46bd      	mov	sp, r7
 800387a:	b015      	add	sp, #84	@ 0x54
 800387c:	bd90      	pop	{r4, r7, pc}
	...

08003880 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003884:	4b1b      	ldr	r3, [pc, #108]	@ (80038f4 <MX_I2C1_Init+0x74>)
 8003886:	4a1c      	ldr	r2, [pc, #112]	@ (80038f8 <MX_I2C1_Init+0x78>)
 8003888:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 800388a:	4b1a      	ldr	r3, [pc, #104]	@ (80038f4 <MX_I2C1_Init+0x74>)
 800388c:	4a1b      	ldr	r2, [pc, #108]	@ (80038fc <MX_I2C1_Init+0x7c>)
 800388e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003890:	4b18      	ldr	r3, [pc, #96]	@ (80038f4 <MX_I2C1_Init+0x74>)
 8003892:	2200      	movs	r2, #0
 8003894:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003896:	4b17      	ldr	r3, [pc, #92]	@ (80038f4 <MX_I2C1_Init+0x74>)
 8003898:	2201      	movs	r2, #1
 800389a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800389c:	4b15      	ldr	r3, [pc, #84]	@ (80038f4 <MX_I2C1_Init+0x74>)
 800389e:	2200      	movs	r2, #0
 80038a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80038a2:	4b14      	ldr	r3, [pc, #80]	@ (80038f4 <MX_I2C1_Init+0x74>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80038a8:	4b12      	ldr	r3, [pc, #72]	@ (80038f4 <MX_I2C1_Init+0x74>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80038ae:	4b11      	ldr	r3, [pc, #68]	@ (80038f4 <MX_I2C1_Init+0x74>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80038b4:	4b0f      	ldr	r3, [pc, #60]	@ (80038f4 <MX_I2C1_Init+0x74>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80038ba:	4b0e      	ldr	r3, [pc, #56]	@ (80038f4 <MX_I2C1_Init+0x74>)
 80038bc:	0018      	movs	r0, r3
 80038be:	f001 f931 	bl	8004b24 <HAL_I2C_Init>
 80038c2:	1e03      	subs	r3, r0, #0
 80038c4:	d001      	beq.n	80038ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80038c6:	f000 fb7f 	bl	8003fc8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80038ca:	4b0a      	ldr	r3, [pc, #40]	@ (80038f4 <MX_I2C1_Init+0x74>)
 80038cc:	2100      	movs	r1, #0
 80038ce:	0018      	movs	r0, r3
 80038d0:	f001 fed4 	bl	800567c <HAL_I2CEx_ConfigAnalogFilter>
 80038d4:	1e03      	subs	r3, r0, #0
 80038d6:	d001      	beq.n	80038dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80038d8:	f000 fb76 	bl	8003fc8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80038dc:	4b05      	ldr	r3, [pc, #20]	@ (80038f4 <MX_I2C1_Init+0x74>)
 80038de:	2100      	movs	r1, #0
 80038e0:	0018      	movs	r0, r3
 80038e2:	f001 ff17 	bl	8005714 <HAL_I2CEx_ConfigDigitalFilter>
 80038e6:	1e03      	subs	r3, r0, #0
 80038e8:	d001      	beq.n	80038ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80038ea:	f000 fb6d 	bl	8003fc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80038ee:	46c0      	nop			@ (mov r8, r8)
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	20000e74 	.word	0x20000e74
 80038f8:	40005400 	.word	0x40005400
 80038fc:	10b17db5 	.word	0x10b17db5

08003900 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003904:	4b1c      	ldr	r3, [pc, #112]	@ (8003978 <MX_SPI1_Init+0x78>)
 8003906:	4a1d      	ldr	r2, [pc, #116]	@ (800397c <MX_SPI1_Init+0x7c>)
 8003908:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800390a:	4b1b      	ldr	r3, [pc, #108]	@ (8003978 <MX_SPI1_Init+0x78>)
 800390c:	2282      	movs	r2, #130	@ 0x82
 800390e:	0052      	lsls	r2, r2, #1
 8003910:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8003912:	4b19      	ldr	r3, [pc, #100]	@ (8003978 <MX_SPI1_Init+0x78>)
 8003914:	2280      	movs	r2, #128	@ 0x80
 8003916:	0212      	lsls	r2, r2, #8
 8003918:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800391a:	4b17      	ldr	r3, [pc, #92]	@ (8003978 <MX_SPI1_Init+0x78>)
 800391c:	22e0      	movs	r2, #224	@ 0xe0
 800391e:	00d2      	lsls	r2, r2, #3
 8003920:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003922:	4b15      	ldr	r3, [pc, #84]	@ (8003978 <MX_SPI1_Init+0x78>)
 8003924:	2200      	movs	r2, #0
 8003926:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003928:	4b13      	ldr	r3, [pc, #76]	@ (8003978 <MX_SPI1_Init+0x78>)
 800392a:	2200      	movs	r2, #0
 800392c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800392e:	4b12      	ldr	r3, [pc, #72]	@ (8003978 <MX_SPI1_Init+0x78>)
 8003930:	2280      	movs	r2, #128	@ 0x80
 8003932:	0092      	lsls	r2, r2, #2
 8003934:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003936:	4b10      	ldr	r3, [pc, #64]	@ (8003978 <MX_SPI1_Init+0x78>)
 8003938:	2220      	movs	r2, #32
 800393a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800393c:	4b0e      	ldr	r3, [pc, #56]	@ (8003978 <MX_SPI1_Init+0x78>)
 800393e:	2200      	movs	r2, #0
 8003940:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003942:	4b0d      	ldr	r3, [pc, #52]	@ (8003978 <MX_SPI1_Init+0x78>)
 8003944:	2200      	movs	r2, #0
 8003946:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003948:	4b0b      	ldr	r3, [pc, #44]	@ (8003978 <MX_SPI1_Init+0x78>)
 800394a:	2200      	movs	r2, #0
 800394c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800394e:	4b0a      	ldr	r3, [pc, #40]	@ (8003978 <MX_SPI1_Init+0x78>)
 8003950:	2207      	movs	r2, #7
 8003952:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003954:	4b08      	ldr	r3, [pc, #32]	@ (8003978 <MX_SPI1_Init+0x78>)
 8003956:	2200      	movs	r2, #0
 8003958:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800395a:	4b07      	ldr	r3, [pc, #28]	@ (8003978 <MX_SPI1_Init+0x78>)
 800395c:	2208      	movs	r2, #8
 800395e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003960:	4b05      	ldr	r3, [pc, #20]	@ (8003978 <MX_SPI1_Init+0x78>)
 8003962:	0018      	movs	r0, r3
 8003964:	f003 f96c 	bl	8006c40 <HAL_SPI_Init>
 8003968:	1e03      	subs	r3, r0, #0
 800396a:	d001      	beq.n	8003970 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 800396c:	f000 fb2c 	bl	8003fc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003970:	46c0      	nop			@ (mov r8, r8)
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	46c0      	nop			@ (mov r8, r8)
 8003978:	20000ef4 	.word	0x20000ef4
 800397c:	40013000 	.word	0x40013000

08003980 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b094      	sub	sp, #80	@ 0x50
 8003984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003986:	2334      	movs	r3, #52	@ 0x34
 8003988:	18fb      	adds	r3, r7, r3
 800398a:	0018      	movs	r0, r3
 800398c:	231c      	movs	r3, #28
 800398e:	001a      	movs	r2, r3
 8003990:	2100      	movs	r1, #0
 8003992:	f005 fbf3 	bl	800917c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003996:	003b      	movs	r3, r7
 8003998:	0018      	movs	r0, r3
 800399a:	2334      	movs	r3, #52	@ 0x34
 800399c:	001a      	movs	r2, r3
 800399e:	2100      	movs	r1, #0
 80039a0:	f005 fbec 	bl	800917c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80039a4:	4b37      	ldr	r3, [pc, #220]	@ (8003a84 <MX_TIM17_Init+0x104>)
 80039a6:	4a38      	ldr	r2, [pc, #224]	@ (8003a88 <MX_TIM17_Init+0x108>)
 80039a8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80039aa:	4b36      	ldr	r3, [pc, #216]	@ (8003a84 <MX_TIM17_Init+0x104>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039b0:	4b34      	ldr	r3, [pc, #208]	@ (8003a84 <MX_TIM17_Init+0x104>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80039b6:	4b33      	ldr	r3, [pc, #204]	@ (8003a84 <MX_TIM17_Init+0x104>)
 80039b8:	4a34      	ldr	r2, [pc, #208]	@ (8003a8c <MX_TIM17_Init+0x10c>)
 80039ba:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039bc:	4b31      	ldr	r3, [pc, #196]	@ (8003a84 <MX_TIM17_Init+0x104>)
 80039be:	2200      	movs	r2, #0
 80039c0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80039c2:	4b30      	ldr	r3, [pc, #192]	@ (8003a84 <MX_TIM17_Init+0x104>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039c8:	4b2e      	ldr	r3, [pc, #184]	@ (8003a84 <MX_TIM17_Init+0x104>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80039ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003a84 <MX_TIM17_Init+0x104>)
 80039d0:	0018      	movs	r0, r3
 80039d2:	f003 fcc3 	bl	800735c <HAL_TIM_Base_Init>
 80039d6:	1e03      	subs	r3, r0, #0
 80039d8:	d001      	beq.n	80039de <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80039da:	f000 faf5 	bl	8003fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80039de:	4b29      	ldr	r3, [pc, #164]	@ (8003a84 <MX_TIM17_Init+0x104>)
 80039e0:	0018      	movs	r0, r3
 80039e2:	f003 fd13 	bl	800740c <HAL_TIM_PWM_Init>
 80039e6:	1e03      	subs	r3, r0, #0
 80039e8:	d001      	beq.n	80039ee <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 80039ea:	f000 faed 	bl	8003fc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039ee:	2134      	movs	r1, #52	@ 0x34
 80039f0:	187b      	adds	r3, r7, r1
 80039f2:	2260      	movs	r2, #96	@ 0x60
 80039f4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80039f6:	187b      	adds	r3, r7, r1
 80039f8:	2200      	movs	r2, #0
 80039fa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039fc:	187b      	adds	r3, r7, r1
 80039fe:	2200      	movs	r2, #0
 8003a00:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a02:	187b      	adds	r3, r7, r1
 8003a04:	2200      	movs	r2, #0
 8003a06:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a08:	187b      	adds	r3, r7, r1
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a0e:	187b      	adds	r3, r7, r1
 8003a10:	2200      	movs	r2, #0
 8003a12:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a14:	187b      	adds	r3, r7, r1
 8003a16:	2200      	movs	r2, #0
 8003a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a1a:	1879      	adds	r1, r7, r1
 8003a1c:	4b19      	ldr	r3, [pc, #100]	@ (8003a84 <MX_TIM17_Init+0x104>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	0018      	movs	r0, r3
 8003a22:	f003 fecf 	bl	80077c4 <HAL_TIM_PWM_ConfigChannel>
 8003a26:	1e03      	subs	r3, r0, #0
 8003a28:	d001      	beq.n	8003a2e <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8003a2a:	f000 facd 	bl	8003fc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a2e:	003b      	movs	r3, r7
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a34:	003b      	movs	r3, r7
 8003a36:	2200      	movs	r2, #0
 8003a38:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a3a:	003b      	movs	r3, r7
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a40:	003b      	movs	r3, r7
 8003a42:	2200      	movs	r2, #0
 8003a44:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a46:	003b      	movs	r3, r7
 8003a48:	2200      	movs	r2, #0
 8003a4a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a4c:	003b      	movs	r3, r7
 8003a4e:	2280      	movs	r2, #128	@ 0x80
 8003a50:	0192      	lsls	r2, r2, #6
 8003a52:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003a54:	003b      	movs	r3, r7
 8003a56:	2200      	movs	r2, #0
 8003a58:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a5a:	003b      	movs	r3, r7
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8003a60:	003a      	movs	r2, r7
 8003a62:	4b08      	ldr	r3, [pc, #32]	@ (8003a84 <MX_TIM17_Init+0x104>)
 8003a64:	0011      	movs	r1, r2
 8003a66:	0018      	movs	r0, r3
 8003a68:	f004 fb2c 	bl	80080c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003a6c:	1e03      	subs	r3, r0, #0
 8003a6e:	d001      	beq.n	8003a74 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8003a70:	f000 faaa 	bl	8003fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8003a74:	4b03      	ldr	r3, [pc, #12]	@ (8003a84 <MX_TIM17_Init+0x104>)
 8003a76:	0018      	movs	r0, r3
 8003a78:	f000 fbc4 	bl	8004204 <HAL_TIM_MspPostInit>

}
 8003a7c:	46c0      	nop			@ (mov r8, r8)
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b014      	add	sp, #80	@ 0x50
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	20000f58 	.word	0x20000f58
 8003a88:	40014800 	.word	0x40014800
 8003a8c:	0000ffff 	.word	0x0000ffff

08003a90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a94:	4b23      	ldr	r3, [pc, #140]	@ (8003b24 <MX_USART1_UART_Init+0x94>)
 8003a96:	4a24      	ldr	r2, [pc, #144]	@ (8003b28 <MX_USART1_UART_Init+0x98>)
 8003a98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003a9a:	4b22      	ldr	r3, [pc, #136]	@ (8003b24 <MX_USART1_UART_Init+0x94>)
 8003a9c:	2296      	movs	r2, #150	@ 0x96
 8003a9e:	0192      	lsls	r2, r2, #6
 8003aa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003aa2:	4b20      	ldr	r3, [pc, #128]	@ (8003b24 <MX_USART1_UART_Init+0x94>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8003b24 <MX_USART1_UART_Init+0x94>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003aae:	4b1d      	ldr	r3, [pc, #116]	@ (8003b24 <MX_USART1_UART_Init+0x94>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b24 <MX_USART1_UART_Init+0x94>)
 8003ab6:	220c      	movs	r2, #12
 8003ab8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003aba:	4b1a      	ldr	r3, [pc, #104]	@ (8003b24 <MX_USART1_UART_Init+0x94>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ac0:	4b18      	ldr	r3, [pc, #96]	@ (8003b24 <MX_USART1_UART_Init+0x94>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ac6:	4b17      	ldr	r3, [pc, #92]	@ (8003b24 <MX_USART1_UART_Init+0x94>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003acc:	4b15      	ldr	r3, [pc, #84]	@ (8003b24 <MX_USART1_UART_Init+0x94>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ad2:	4b14      	ldr	r3, [pc, #80]	@ (8003b24 <MX_USART1_UART_Init+0x94>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ad8:	4b12      	ldr	r3, [pc, #72]	@ (8003b24 <MX_USART1_UART_Init+0x94>)
 8003ada:	0018      	movs	r0, r3
 8003adc:	f004 fb8e 	bl	80081fc <HAL_UART_Init>
 8003ae0:	1e03      	subs	r3, r0, #0
 8003ae2:	d001      	beq.n	8003ae8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003ae4:	f000 fa70 	bl	8003fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8003b24 <MX_USART1_UART_Init+0x94>)
 8003aea:	2100      	movs	r1, #0
 8003aec:	0018      	movs	r0, r3
 8003aee:	f005 fa43 	bl	8008f78 <HAL_UARTEx_SetTxFifoThreshold>
 8003af2:	1e03      	subs	r3, r0, #0
 8003af4:	d001      	beq.n	8003afa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003af6:	f000 fa67 	bl	8003fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003afa:	4b0a      	ldr	r3, [pc, #40]	@ (8003b24 <MX_USART1_UART_Init+0x94>)
 8003afc:	2100      	movs	r1, #0
 8003afe:	0018      	movs	r0, r3
 8003b00:	f005 fa7a 	bl	8008ff8 <HAL_UARTEx_SetRxFifoThreshold>
 8003b04:	1e03      	subs	r3, r0, #0
 8003b06:	d001      	beq.n	8003b0c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003b08:	f000 fa5e 	bl	8003fc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003b0c:	4b05      	ldr	r3, [pc, #20]	@ (8003b24 <MX_USART1_UART_Init+0x94>)
 8003b0e:	0018      	movs	r0, r3
 8003b10:	f005 f9f8 	bl	8008f04 <HAL_UARTEx_DisableFifoMode>
 8003b14:	1e03      	subs	r3, r0, #0
 8003b16:	d001      	beq.n	8003b1c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003b18:	f000 fa56 	bl	8003fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b1c:	46c0      	nop			@ (mov r8, r8)
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	46c0      	nop			@ (mov r8, r8)
 8003b24:	20000fa4 	.word	0x20000fa4
 8003b28:	40013800 	.word	0x40013800

08003b2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b30:	4b23      	ldr	r3, [pc, #140]	@ (8003bc0 <MX_USART2_UART_Init+0x94>)
 8003b32:	4a24      	ldr	r2, [pc, #144]	@ (8003bc4 <MX_USART2_UART_Init+0x98>)
 8003b34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003b36:	4b22      	ldr	r3, [pc, #136]	@ (8003bc0 <MX_USART2_UART_Init+0x94>)
 8003b38:	22e1      	movs	r2, #225	@ 0xe1
 8003b3a:	0252      	lsls	r2, r2, #9
 8003b3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b3e:	4b20      	ldr	r3, [pc, #128]	@ (8003bc0 <MX_USART2_UART_Init+0x94>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b44:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc0 <MX_USART2_UART_Init+0x94>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003bc0 <MX_USART2_UART_Init+0x94>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b50:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc0 <MX_USART2_UART_Init+0x94>)
 8003b52:	220c      	movs	r2, #12
 8003b54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b56:	4b1a      	ldr	r3, [pc, #104]	@ (8003bc0 <MX_USART2_UART_Init+0x94>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b5c:	4b18      	ldr	r3, [pc, #96]	@ (8003bc0 <MX_USART2_UART_Init+0x94>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b62:	4b17      	ldr	r3, [pc, #92]	@ (8003bc0 <MX_USART2_UART_Init+0x94>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b68:	4b15      	ldr	r3, [pc, #84]	@ (8003bc0 <MX_USART2_UART_Init+0x94>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b6e:	4b14      	ldr	r3, [pc, #80]	@ (8003bc0 <MX_USART2_UART_Init+0x94>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b74:	4b12      	ldr	r3, [pc, #72]	@ (8003bc0 <MX_USART2_UART_Init+0x94>)
 8003b76:	0018      	movs	r0, r3
 8003b78:	f004 fb40 	bl	80081fc <HAL_UART_Init>
 8003b7c:	1e03      	subs	r3, r0, #0
 8003b7e:	d001      	beq.n	8003b84 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003b80:	f000 fa22 	bl	8003fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b84:	4b0e      	ldr	r3, [pc, #56]	@ (8003bc0 <MX_USART2_UART_Init+0x94>)
 8003b86:	2100      	movs	r1, #0
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f005 f9f5 	bl	8008f78 <HAL_UARTEx_SetTxFifoThreshold>
 8003b8e:	1e03      	subs	r3, r0, #0
 8003b90:	d001      	beq.n	8003b96 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003b92:	f000 fa19 	bl	8003fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b96:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc0 <MX_USART2_UART_Init+0x94>)
 8003b98:	2100      	movs	r1, #0
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f005 fa2c 	bl	8008ff8 <HAL_UARTEx_SetRxFifoThreshold>
 8003ba0:	1e03      	subs	r3, r0, #0
 8003ba2:	d001      	beq.n	8003ba8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003ba4:	f000 fa10 	bl	8003fc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003ba8:	4b05      	ldr	r3, [pc, #20]	@ (8003bc0 <MX_USART2_UART_Init+0x94>)
 8003baa:	0018      	movs	r0, r3
 8003bac:	f005 f9aa 	bl	8008f04 <HAL_UARTEx_DisableFifoMode>
 8003bb0:	1e03      	subs	r3, r0, #0
 8003bb2:	d001      	beq.n	8003bb8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003bb4:	f000 fa08 	bl	8003fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003bb8:	46c0      	nop			@ (mov r8, r8)
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	46c0      	nop			@ (mov r8, r8)
 8003bc0:	20001038 	.word	0x20001038
 8003bc4:	40004400 	.word	0x40004400

08003bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bc8:	b590      	push	{r4, r7, lr}
 8003bca:	b089      	sub	sp, #36	@ 0x24
 8003bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bce:	240c      	movs	r4, #12
 8003bd0:	193b      	adds	r3, r7, r4
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	2314      	movs	r3, #20
 8003bd6:	001a      	movs	r2, r3
 8003bd8:	2100      	movs	r1, #0
 8003bda:	f005 facf 	bl	800917c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bde:	4b31      	ldr	r3, [pc, #196]	@ (8003ca4 <MX_GPIO_Init+0xdc>)
 8003be0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003be2:	4b30      	ldr	r3, [pc, #192]	@ (8003ca4 <MX_GPIO_Init+0xdc>)
 8003be4:	2104      	movs	r1, #4
 8003be6:	430a      	orrs	r2, r1
 8003be8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003bea:	4b2e      	ldr	r3, [pc, #184]	@ (8003ca4 <MX_GPIO_Init+0xdc>)
 8003bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bee:	2204      	movs	r2, #4
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	60bb      	str	r3, [r7, #8]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf6:	4b2b      	ldr	r3, [pc, #172]	@ (8003ca4 <MX_GPIO_Init+0xdc>)
 8003bf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8003ca4 <MX_GPIO_Init+0xdc>)
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c02:	4b28      	ldr	r3, [pc, #160]	@ (8003ca4 <MX_GPIO_Init+0xdc>)
 8003c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c06:	2201      	movs	r2, #1
 8003c08:	4013      	ands	r3, r2
 8003c0a:	607b      	str	r3, [r7, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c0e:	4b25      	ldr	r3, [pc, #148]	@ (8003ca4 <MX_GPIO_Init+0xdc>)
 8003c10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c12:	4b24      	ldr	r3, [pc, #144]	@ (8003ca4 <MX_GPIO_Init+0xdc>)
 8003c14:	2108      	movs	r1, #8
 8003c16:	430a      	orrs	r2, r1
 8003c18:	635a      	str	r2, [r3, #52]	@ 0x34
 8003c1a:	4b22      	ldr	r3, [pc, #136]	@ (8003ca4 <MX_GPIO_Init+0xdc>)
 8003c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c1e:	2208      	movs	r2, #8
 8003c20:	4013      	ands	r3, r2
 8003c22:	603b      	str	r3, [r7, #0]
 8003c24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15, GPIO_PIN_RESET);
 8003c26:	4920      	ldr	r1, [pc, #128]	@ (8003ca8 <MX_GPIO_Init+0xe0>)
 8003c28:	23a0      	movs	r3, #160	@ 0xa0
 8003c2a:	05db      	lsls	r3, r3, #23
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	0018      	movs	r0, r3
 8003c30:	f000 ff5b 	bl	8004aea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003c34:	193b      	adds	r3, r7, r4
 8003c36:	2202      	movs	r2, #2
 8003c38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c3a:	193b      	adds	r3, r7, r4
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c40:	193b      	adds	r3, r7, r4
 8003c42:	2200      	movs	r2, #0
 8003c44:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c46:	193b      	adds	r3, r7, r4
 8003c48:	4a18      	ldr	r2, [pc, #96]	@ (8003cac <MX_GPIO_Init+0xe4>)
 8003c4a:	0019      	movs	r1, r3
 8003c4c:	0010      	movs	r0, r2
 8003c4e:	f000 fdc3 	bl	80047d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_15;
 8003c52:	193b      	adds	r3, r7, r4
 8003c54:	4a14      	ldr	r2, [pc, #80]	@ (8003ca8 <MX_GPIO_Init+0xe0>)
 8003c56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c58:	193b      	adds	r3, r7, r4
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5e:	193b      	adds	r3, r7, r4
 8003c60:	2200      	movs	r2, #0
 8003c62:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c64:	193b      	adds	r3, r7, r4
 8003c66:	2200      	movs	r2, #0
 8003c68:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c6a:	193a      	adds	r2, r7, r4
 8003c6c:	23a0      	movs	r3, #160	@ 0xa0
 8003c6e:	05db      	lsls	r3, r3, #23
 8003c70:	0011      	movs	r1, r2
 8003c72:	0018      	movs	r0, r3
 8003c74:	f000 fdb0 	bl	80047d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003c78:	0021      	movs	r1, r4
 8003c7a:	187b      	adds	r3, r7, r1
 8003c7c:	22c0      	movs	r2, #192	@ 0xc0
 8003c7e:	0152      	lsls	r2, r2, #5
 8003c80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c82:	187b      	adds	r3, r7, r1
 8003c84:	2200      	movs	r2, #0
 8003c86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c88:	187b      	adds	r3, r7, r1
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c8e:	187a      	adds	r2, r7, r1
 8003c90:	23a0      	movs	r3, #160	@ 0xa0
 8003c92:	05db      	lsls	r3, r3, #23
 8003c94:	0011      	movs	r1, r2
 8003c96:	0018      	movs	r0, r3
 8003c98:	f000 fd9e 	bl	80047d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003c9c:	46c0      	nop			@ (mov r8, r8)
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b009      	add	sp, #36	@ 0x24
 8003ca2:	bd90      	pop	{r4, r7, pc}
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	00008030 	.word	0x00008030
 8003cac:	50000800 	.word	0x50000800

08003cb0 <Animate>:

/* USER CODE BEGIN 4 */
//AURORA: Put custom functions here!
void Animate (struct Img* animation, unsigned int size)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af04      	add	r7, sp, #16
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
	++currentFrame;
 8003cba:	4b14      	ldr	r3, [pc, #80]	@ (8003d0c <Animate+0x5c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	4b12      	ldr	r3, [pc, #72]	@ (8003d0c <Animate+0x5c>)
 8003cc2:	601a      	str	r2, [r3, #0]
	if(currentFrame > size)
 8003cc4:	4b11      	ldr	r3, [pc, #68]	@ (8003d0c <Animate+0x5c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d202      	bcs.n	8003cd4 <Animate+0x24>
	{
		currentFrame = 0;
 8003cce:	4b0f      	ldr	r3, [pc, #60]	@ (8003d0c <Animate+0x5c>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
	}
	drawImage(animation[currentFrame].Body, palette, 40, 40, 64, 64, animation[currentFrame].Size);
 8003cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8003d0c <Animate+0x5c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	18d3      	adds	r3, r2, r3
 8003cde:	6818      	ldr	r0, [r3, #0]
 8003ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8003d0c <Animate+0x5c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	18d3      	adds	r3, r2, r3
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	4908      	ldr	r1, [pc, #32]	@ (8003d10 <Animate+0x60>)
 8003cf0:	9302      	str	r3, [sp, #8]
 8003cf2:	2340      	movs	r3, #64	@ 0x40
 8003cf4:	9301      	str	r3, [sp, #4]
 8003cf6:	2340      	movs	r3, #64	@ 0x40
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	2328      	movs	r3, #40	@ 0x28
 8003cfc:	2228      	movs	r2, #40	@ 0x28
 8003cfe:	f7fe fe27 	bl	8002950 <drawImage>
	return;
 8003d02:	46c0      	nop			@ (mov r8, r8)
}
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b002      	add	sp, #8
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	46c0      	nop			@ (mov r8, r8)
 8003d0c:	20000df0 	.word	0x20000df0
 8003d10:	20000990 	.word	0x20000990

08003d14 <_ADXL343_ReadReg8>:
int _ADXL343_ReadReg8 (unsigned char TargetRegister, unsigned char * TargetValue, uint8_t size)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af02      	add	r7, sp, #8
 8003d1a:	6039      	str	r1, [r7, #0]
 8003d1c:	0011      	movs	r1, r2
 8003d1e:	1dfb      	adds	r3, r7, #7
 8003d20:	1c02      	adds	r2, r0, #0
 8003d22:	701a      	strb	r2, [r3, #0]
 8003d24:	1dbb      	adds	r3, r7, #6
 8003d26:	1c0a      	adds	r2, r1, #0
 8003d28:	701a      	strb	r2, [r3, #0]
  if (!HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, &TargetRegister, 1, 1000)==HAL_OK)
 8003d2a:	1dfa      	adds	r2, r7, #7
 8003d2c:	4811      	ldr	r0, [pc, #68]	@ (8003d74 <_ADXL343_ReadReg8+0x60>)
 8003d2e:	23fa      	movs	r3, #250	@ 0xfa
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	2301      	movs	r3, #1
 8003d36:	2128      	movs	r1, #40	@ 0x28
 8003d38:	f000 ff9a 	bl	8004c70 <HAL_I2C_Master_Transmit>
 8003d3c:	1e03      	subs	r3, r0, #0
 8003d3e:	d002      	beq.n	8003d46 <_ADXL343_ReadReg8+0x32>
      return -1;
 8003d40:	2301      	movs	r3, #1
 8003d42:	425b      	negs	r3, r3
 8003d44:	e011      	b.n	8003d6a <_ADXL343_ReadReg8+0x56>

  if (!HAL_I2C_Master_Receive(&hi2c1, 0x14<<1, TargetValue, size, 1000)==HAL_OK)
 8003d46:	1dbb      	adds	r3, r7, #6
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	b299      	uxth	r1, r3
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	4809      	ldr	r0, [pc, #36]	@ (8003d74 <_ADXL343_ReadReg8+0x60>)
 8003d50:	23fa      	movs	r3, #250	@ 0xfa
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	000b      	movs	r3, r1
 8003d58:	2128      	movs	r1, #40	@ 0x28
 8003d5a:	f001 f8b3 	bl	8004ec4 <HAL_I2C_Master_Receive>
 8003d5e:	1e03      	subs	r3, r0, #0
 8003d60:	d002      	beq.n	8003d68 <_ADXL343_ReadReg8+0x54>
    return -2;
 8003d62:	2302      	movs	r3, #2
 8003d64:	425b      	negs	r3, r3
 8003d66:	e000      	b.n	8003d6a <_ADXL343_ReadReg8+0x56>

  return 0;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b002      	add	sp, #8
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	46c0      	nop			@ (mov r8, r8)
 8003d74:	20000e74 	.word	0x20000e74

08003d78 <_ADXL343_WriteReg8>:

int _ADXL343_WriteReg8 (unsigned char TargetRegister, unsigned char TargetValue)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af02      	add	r7, sp, #8
 8003d7e:	0002      	movs	r2, r0
 8003d80:	1dfb      	adds	r3, r7, #7
 8003d82:	701a      	strb	r2, [r3, #0]
 8003d84:	1dbb      	adds	r3, r7, #6
 8003d86:	1c0a      	adds	r2, r1, #0
 8003d88:	701a      	strb	r2, [r3, #0]
  unsigned char buff [2];
  buff[0] = TargetRegister;
 8003d8a:	210c      	movs	r1, #12
 8003d8c:	187b      	adds	r3, r7, r1
 8003d8e:	1dfa      	adds	r2, r7, #7
 8003d90:	7812      	ldrb	r2, [r2, #0]
 8003d92:	701a      	strb	r2, [r3, #0]
  buff[1] = TargetValue;
 8003d94:	187b      	adds	r3, r7, r1
 8003d96:	1dba      	adds	r2, r7, #6
 8003d98:	7812      	ldrb	r2, [r2, #0]
 8003d9a:	705a      	strb	r2, [r3, #1]

  if (HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, buff, 2, 100))
 8003d9c:	187a      	adds	r2, r7, r1
 8003d9e:	4808      	ldr	r0, [pc, #32]	@ (8003dc0 <_ADXL343_WriteReg8+0x48>)
 8003da0:	2364      	movs	r3, #100	@ 0x64
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	2302      	movs	r3, #2
 8003da6:	2128      	movs	r1, #40	@ 0x28
 8003da8:	f000 ff62 	bl	8004c70 <HAL_I2C_Master_Transmit>
 8003dac:	1e03      	subs	r3, r0, #0
 8003dae:	d002      	beq.n	8003db6 <_ADXL343_WriteReg8+0x3e>
      return -1;
 8003db0:	2301      	movs	r3, #1
 8003db2:	425b      	negs	r3, r3
 8003db4:	e000      	b.n	8003db8 <_ADXL343_WriteReg8+0x40>

  return 0;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	0018      	movs	r0, r3
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	b004      	add	sp, #16
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	20000e74 	.word	0x20000e74

08003dc4 <SendData>:
void SendData()
{
 8003dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dc6:	46c6      	mov	lr, r8
 8003dc8:	b500      	push	{lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af06      	add	r7, sp, #24
	unsigned int posIndex;
	unsigned int clrIndex;
	sprintf(sendBuffer, "(lifeSteps:%d),(weeklySteps:%d),(dailySteps:%d),(uid:%s),(friendship:%d),(password:password)(difficulty:%d),(evolution:%d) \n\r", game.allSteps,game.weeklySteps,game.stepsToday, game.uid, game.mood, game.challengeGoal, game.evo);
 8003dce:	4a59      	ldr	r2, [pc, #356]	@ (8003f34 <SendData+0x170>)
 8003dd0:	238c      	movs	r3, #140	@ 0x8c
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	58d4      	ldr	r4, [r2, r3]
 8003dd6:	4a57      	ldr	r2, [pc, #348]	@ (8003f34 <SendData+0x170>)
 8003dd8:	238e      	movs	r3, #142	@ 0x8e
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	58d5      	ldr	r5, [r2, r3]
 8003dde:	4a55      	ldr	r2, [pc, #340]	@ (8003f34 <SendData+0x170>)
 8003de0:	2390      	movs	r3, #144	@ 0x90
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	58d3      	ldr	r3, [r2, r3]
 8003de6:	4698      	mov	r8, r3
 8003de8:	4a52      	ldr	r2, [pc, #328]	@ (8003f34 <SendData+0x170>)
 8003dea:	7c52      	ldrb	r2, [r2, #17]
 8003dec:	0016      	movs	r6, r2
 8003dee:	4951      	ldr	r1, [pc, #324]	@ (8003f34 <SendData+0x170>)
 8003df0:	2292      	movs	r2, #146	@ 0x92
 8003df2:	0052      	lsls	r2, r2, #1
 8003df4:	588a      	ldr	r2, [r1, r2]
 8003df6:	494f      	ldr	r1, [pc, #316]	@ (8003f34 <SendData+0x170>)
 8003df8:	7c09      	ldrb	r1, [r1, #16]
 8003dfa:	468c      	mov	ip, r1
 8003dfc:	494e      	ldr	r1, [pc, #312]	@ (8003f38 <SendData+0x174>)
 8003dfe:	484f      	ldr	r0, [pc, #316]	@ (8003f3c <SendData+0x178>)
 8003e00:	4663      	mov	r3, ip
 8003e02:	9304      	str	r3, [sp, #16]
 8003e04:	9203      	str	r2, [sp, #12]
 8003e06:	9602      	str	r6, [sp, #8]
 8003e08:	4a4d      	ldr	r2, [pc, #308]	@ (8003f40 <SendData+0x17c>)
 8003e0a:	9201      	str	r2, [sp, #4]
 8003e0c:	4643      	mov	r3, r8
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	002b      	movs	r3, r5
 8003e12:	0022      	movs	r2, r4
 8003e14:	f005 f990 	bl	8009138 <siprintf>
	HAL_UART_Transmit(&huart2, sendBuffer, strlen(sendBuffer), 200);
 8003e18:	4b48      	ldr	r3, [pc, #288]	@ (8003f3c <SendData+0x178>)
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f7fc f972 	bl	8000104 <strlen>
 8003e20:	0003      	movs	r3, r0
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	4945      	ldr	r1, [pc, #276]	@ (8003f3c <SendData+0x178>)
 8003e26:	4847      	ldr	r0, [pc, #284]	@ (8003f44 <SendData+0x180>)
 8003e28:	23c8      	movs	r3, #200	@ 0xc8
 8003e2a:	f004 fa3d 	bl	80082a8 <HAL_UART_Transmit>
	for(posIndex=0; posIndex<game.numLocations; posIndex++)
 8003e2e:	2300      	movs	r3, #0
 8003e30:	607b      	str	r3, [r7, #4]
 8003e32:	e072      	b.n	8003f1a <SendData+0x156>
	{       HAL_Delay(5);
 8003e34:	2005      	movs	r0, #5
 8003e36:	f000 fbe1 	bl	80045fc <HAL_Delay>
		for(clrIndex=0;clrIndex<400;clrIndex++) sendBuffer[clrIndex]=0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	603b      	str	r3, [r7, #0]
 8003e3e:	e007      	b.n	8003e50 <SendData+0x8c>
 8003e40:	4a3e      	ldr	r2, [pc, #248]	@ (8003f3c <SendData+0x178>)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	18d3      	adds	r3, r2, r3
 8003e46:	2200      	movs	r2, #0
 8003e48:	701a      	strb	r2, [r3, #0]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	23c8      	movs	r3, #200	@ 0xc8
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d3f2      	bcc.n	8003e40 <SendData+0x7c>
		sprintf(sendBuffer, "(lat:%d.%d),(lon:%d.%d),", ((int)game.positions[posIndex].lat), abs((int)((fmod((double)game.positions[posIndex].lat, (double)1))*10000)),((int)game.positions[posIndex].lon), abs((int)((fmod((double)game.positions[posIndex].lon, (double)1))*10000)));
 8003e5a:	4b36      	ldr	r3, [pc, #216]	@ (8003f34 <SendData+0x170>)
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	3203      	adds	r2, #3
 8003e60:	00d2      	lsls	r2, r2, #3
 8003e62:	58d3      	ldr	r3, [r2, r3]
 8003e64:	1c18      	adds	r0, r3, #0
 8003e66:	f7fc ff91 	bl	8000d8c <__aeabi_f2iz>
 8003e6a:	0006      	movs	r6, r0
 8003e6c:	4b31      	ldr	r3, [pc, #196]	@ (8003f34 <SendData+0x170>)
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	3203      	adds	r2, #3
 8003e72:	00d2      	lsls	r2, r2, #3
 8003e74:	58d3      	ldr	r3, [r2, r3]
 8003e76:	1c18      	adds	r0, r3, #0
 8003e78:	f7fd ff26 	bl	8001cc8 <__aeabi_f2d>
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	4b32      	ldr	r3, [pc, #200]	@ (8003f48 <SendData+0x184>)
 8003e80:	f005 fdf7 	bl	8009a72 <fmod>
 8003e84:	2200      	movs	r2, #0
 8003e86:	4b31      	ldr	r3, [pc, #196]	@ (8003f4c <SendData+0x188>)
 8003e88:	f7fd fbda 	bl	8001640 <__aeabi_dmul>
 8003e8c:	0002      	movs	r2, r0
 8003e8e:	000b      	movs	r3, r1
 8003e90:	0010      	movs	r0, r2
 8003e92:	0019      	movs	r1, r3
 8003e94:	f7fd fedc 	bl	8001c50 <__aeabi_d2iz>
 8003e98:	0003      	movs	r3, r0
 8003e9a:	17da      	asrs	r2, r3, #31
 8003e9c:	189c      	adds	r4, r3, r2
 8003e9e:	4054      	eors	r4, r2
 8003ea0:	4a24      	ldr	r2, [pc, #144]	@ (8003f34 <SendData+0x170>)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3303      	adds	r3, #3
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	18d3      	adds	r3, r2, r3
 8003eaa:	3304      	adds	r3, #4
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	1c18      	adds	r0, r3, #0
 8003eb0:	f7fc ff6c 	bl	8000d8c <__aeabi_f2iz>
 8003eb4:	0005      	movs	r5, r0
 8003eb6:	4a1f      	ldr	r2, [pc, #124]	@ (8003f34 <SendData+0x170>)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3303      	adds	r3, #3
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	18d3      	adds	r3, r2, r3
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	1c18      	adds	r0, r3, #0
 8003ec6:	f7fd feff 	bl	8001cc8 <__aeabi_f2d>
 8003eca:	2200      	movs	r2, #0
 8003ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8003f48 <SendData+0x184>)
 8003ece:	f005 fdd0 	bl	8009a72 <fmod>
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f4c <SendData+0x188>)
 8003ed6:	f7fd fbb3 	bl	8001640 <__aeabi_dmul>
 8003eda:	0002      	movs	r2, r0
 8003edc:	000b      	movs	r3, r1
 8003ede:	0010      	movs	r0, r2
 8003ee0:	0019      	movs	r1, r3
 8003ee2:	f7fd feb5 	bl	8001c50 <__aeabi_d2iz>
 8003ee6:	0003      	movs	r3, r0
 8003ee8:	17da      	asrs	r2, r3, #31
 8003eea:	189b      	adds	r3, r3, r2
 8003eec:	4053      	eors	r3, r2
 8003eee:	4918      	ldr	r1, [pc, #96]	@ (8003f50 <SendData+0x18c>)
 8003ef0:	4812      	ldr	r0, [pc, #72]	@ (8003f3c <SendData+0x178>)
 8003ef2:	9301      	str	r3, [sp, #4]
 8003ef4:	9500      	str	r5, [sp, #0]
 8003ef6:	0023      	movs	r3, r4
 8003ef8:	0032      	movs	r2, r6
 8003efa:	f005 f91d 	bl	8009138 <siprintf>
		HAL_UART_Transmit(&huart2, sendBuffer, strlen(sendBuffer), 200);
 8003efe:	4b0f      	ldr	r3, [pc, #60]	@ (8003f3c <SendData+0x178>)
 8003f00:	0018      	movs	r0, r3
 8003f02:	f7fc f8ff 	bl	8000104 <strlen>
 8003f06:	0003      	movs	r3, r0
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	490c      	ldr	r1, [pc, #48]	@ (8003f3c <SendData+0x178>)
 8003f0c:	480d      	ldr	r0, [pc, #52]	@ (8003f44 <SendData+0x180>)
 8003f0e:	23c8      	movs	r3, #200	@ 0xc8
 8003f10:	f004 f9ca 	bl	80082a8 <HAL_UART_Transmit>
	for(posIndex=0; posIndex<game.numLocations; posIndex++)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3301      	adds	r3, #1
 8003f18:	607b      	str	r3, [r7, #4]
 8003f1a:	4b06      	ldr	r3, [pc, #24]	@ (8003f34 <SendData+0x170>)
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d387      	bcc.n	8003e34 <SendData+0x70>

	}
}
 8003f24:	46c0      	nop			@ (mov r8, r8)
 8003f26:	46c0      	nop			@ (mov r8, r8)
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	b002      	add	sp, #8
 8003f2c:	bc80      	pop	{r7}
 8003f2e:	46b8      	mov	r8, r7
 8003f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f32:	46c0      	nop			@ (mov r8, r8)
 8003f34:	20000a68 	.word	0x20000a68
 8003f38:	08009d90 	.word	0x08009d90
 8003f3c:	20000c3c 	.word	0x20000c3c
 8003f40:	20000b90 	.word	0x20000b90
 8003f44:	20001038 	.word	0x20001038
 8003f48:	3ff00000 	.word	0x3ff00000
 8003f4c:	40c38800 	.word	0x40c38800
 8003f50:	08009e10 	.word	0x08009e10

08003f54 <HAL_RTC_AlarmAEventCallback>:
			  		  	}

	game.positions[game.numLocations] = pos;
	game.numLocations++;
}
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8003f54:	b590      	push	{r4, r7, lr}
 8003f56:	b091      	sub	sp, #68	@ 0x44
 8003f58:	af04      	add	r7, sp, #16
 8003f5a:	6078      	str	r0, [r7, #4]
  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 8003f5c:	2380      	movs	r3, #128	@ 0x80
 8003f5e:	005a      	lsls	r2, r3, #1
 8003f60:	2408      	movs	r4, #8
 8003f62:	1939      	adds	r1, r7, r4
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	2300      	movs	r3, #0
 8003f68:	f002 fcf2 	bl	8006950 <HAL_RTC_GetAlarm>
  if(sAlarm.AlarmTime.Seconds>58) {
 8003f6c:	0022      	movs	r2, r4
 8003f6e:	18bb      	adds	r3, r7, r2
 8003f70:	789b      	ldrb	r3, [r3, #2]
 8003f72:	2b3a      	cmp	r3, #58	@ 0x3a
 8003f74:	d903      	bls.n	8003f7e <HAL_RTC_AlarmAEventCallback+0x2a>
    sAlarm.AlarmTime.Seconds=0;
 8003f76:	18bb      	adds	r3, r7, r2
 8003f78:	2200      	movs	r2, #0
 8003f7a:	709a      	strb	r2, [r3, #2]
 8003f7c:	e006      	b.n	8003f8c <HAL_RTC_AlarmAEventCallback+0x38>
  }else{
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 8003f7e:	2108      	movs	r1, #8
 8003f80:	187b      	adds	r3, r7, r1
 8003f82:	789b      	ldrb	r3, [r3, #2]
 8003f84:	3301      	adds	r3, #1
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	187b      	adds	r3, r7, r1
 8003f8a:	709a      	strb	r2, [r3, #2]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8003f8c:	46c0      	nop			@ (mov r8, r8)
 8003f8e:	2308      	movs	r3, #8
 8003f90:	18f9      	adds	r1, r7, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	0018      	movs	r0, r3
 8003f98:	f002 fb9a 	bl	80066d0 <HAL_RTC_SetAlarm_IT>
 8003f9c:	1e03      	subs	r3, r0, #0
 8003f9e:	d1f6      	bne.n	8003f8e <HAL_RTC_AlarmAEventCallback+0x3a>
  	  drawString(30, 30, "testTime", BLACK, GREEN, 1, 1);
 8003fa0:	4a07      	ldr	r2, [pc, #28]	@ (8003fc0 <HAL_RTC_AlarmAEventCallback+0x6c>)
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	9302      	str	r3, [sp, #8]
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	9301      	str	r3, [sp, #4]
 8003faa:	4b06      	ldr	r3, [pc, #24]	@ (8003fc4 <HAL_RTC_AlarmAEventCallback+0x70>)
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	211e      	movs	r1, #30
 8003fb2:	201e      	movs	r0, #30
 8003fb4:	f7fe fb13 	bl	80025de <drawString>
}
 8003fb8:	46c0      	nop			@ (mov r8, r8)
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b00d      	add	sp, #52	@ 0x34
 8003fbe:	bd90      	pop	{r4, r7, pc}
 8003fc0:	08009e2c 	.word	0x08009e2c
 8003fc4:	ffffe007 	.word	0xffffe007

08003fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fcc:	b672      	cpsid	i
}
 8003fce:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003fd0:	46c0      	nop			@ (mov r8, r8)
 8003fd2:	e7fd      	b.n	8003fd0 <Error_Handler+0x8>

08003fd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fda:	4b11      	ldr	r3, [pc, #68]	@ (8004020 <HAL_MspInit+0x4c>)
 8003fdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fde:	4b10      	ldr	r3, [pc, #64]	@ (8004020 <HAL_MspInit+0x4c>)
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	641a      	str	r2, [r3, #64]	@ 0x40
 8003fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8004020 <HAL_MspInit+0x4c>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fea:	2201      	movs	r2, #1
 8003fec:	4013      	ands	r3, r2
 8003fee:	607b      	str	r3, [r7, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8004020 <HAL_MspInit+0x4c>)
 8003ff4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8004020 <HAL_MspInit+0x4c>)
 8003ff8:	2180      	movs	r1, #128	@ 0x80
 8003ffa:	0549      	lsls	r1, r1, #21
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004000:	4b07      	ldr	r3, [pc, #28]	@ (8004020 <HAL_MspInit+0x4c>)
 8004002:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004004:	2380      	movs	r3, #128	@ 0x80
 8004006:	055b      	lsls	r3, r3, #21
 8004008:	4013      	ands	r3, r2
 800400a:	603b      	str	r3, [r7, #0]
 800400c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800400e:	23c0      	movs	r3, #192	@ 0xc0
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	0018      	movs	r0, r3
 8004014:	f000 fb16 	bl	8004644 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004018:	46c0      	nop			@ (mov r8, r8)
 800401a:	46bd      	mov	sp, r7
 800401c:	b002      	add	sp, #8
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40021000 	.word	0x40021000

08004024 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004024:	b590      	push	{r4, r7, lr}
 8004026:	b09d      	sub	sp, #116	@ 0x74
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800402c:	235c      	movs	r3, #92	@ 0x5c
 800402e:	18fb      	adds	r3, r7, r3
 8004030:	0018      	movs	r0, r3
 8004032:	2314      	movs	r3, #20
 8004034:	001a      	movs	r2, r3
 8004036:	2100      	movs	r1, #0
 8004038:	f005 f8a0 	bl	800917c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800403c:	2410      	movs	r4, #16
 800403e:	193b      	adds	r3, r7, r4
 8004040:	0018      	movs	r0, r3
 8004042:	234c      	movs	r3, #76	@ 0x4c
 8004044:	001a      	movs	r2, r3
 8004046:	2100      	movs	r1, #0
 8004048:	f005 f898 	bl	800917c <memset>
  if(hi2c->Instance==I2C1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a23      	ldr	r2, [pc, #140]	@ (80040e0 <HAL_I2C_MspInit+0xbc>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d13f      	bne.n	80040d6 <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004056:	193b      	adds	r3, r7, r4
 8004058:	2220      	movs	r2, #32
 800405a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800405c:	193b      	adds	r3, r7, r4
 800405e:	2200      	movs	r2, #0
 8004060:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004062:	193b      	adds	r3, r7, r4
 8004064:	0018      	movs	r0, r3
 8004066:	f002 f8f7 	bl	8006258 <HAL_RCCEx_PeriphCLKConfig>
 800406a:	1e03      	subs	r3, r0, #0
 800406c:	d001      	beq.n	8004072 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800406e:	f7ff ffab 	bl	8003fc8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004072:	4b1c      	ldr	r3, [pc, #112]	@ (80040e4 <HAL_I2C_MspInit+0xc0>)
 8004074:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004076:	4b1b      	ldr	r3, [pc, #108]	@ (80040e4 <HAL_I2C_MspInit+0xc0>)
 8004078:	2101      	movs	r1, #1
 800407a:	430a      	orrs	r2, r1
 800407c:	635a      	str	r2, [r3, #52]	@ 0x34
 800407e:	4b19      	ldr	r3, [pc, #100]	@ (80040e4 <HAL_I2C_MspInit+0xc0>)
 8004080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004082:	2201      	movs	r2, #1
 8004084:	4013      	ands	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800408a:	215c      	movs	r1, #92	@ 0x5c
 800408c:	187b      	adds	r3, r7, r1
 800408e:	22c0      	movs	r2, #192	@ 0xc0
 8004090:	00d2      	lsls	r2, r2, #3
 8004092:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004094:	187b      	adds	r3, r7, r1
 8004096:	2212      	movs	r2, #18
 8004098:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409a:	187b      	adds	r3, r7, r1
 800409c:	2200      	movs	r2, #0
 800409e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a0:	187b      	adds	r3, r7, r1
 80040a2:	2200      	movs	r2, #0
 80040a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80040a6:	187b      	adds	r3, r7, r1
 80040a8:	2206      	movs	r2, #6
 80040aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ac:	187a      	adds	r2, r7, r1
 80040ae:	23a0      	movs	r3, #160	@ 0xa0
 80040b0:	05db      	lsls	r3, r3, #23
 80040b2:	0011      	movs	r1, r2
 80040b4:	0018      	movs	r0, r3
 80040b6:	f000 fb8f 	bl	80047d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80040ba:	4b0a      	ldr	r3, [pc, #40]	@ (80040e4 <HAL_I2C_MspInit+0xc0>)
 80040bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040be:	4b09      	ldr	r3, [pc, #36]	@ (80040e4 <HAL_I2C_MspInit+0xc0>)
 80040c0:	2180      	movs	r1, #128	@ 0x80
 80040c2:	0389      	lsls	r1, r1, #14
 80040c4:	430a      	orrs	r2, r1
 80040c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80040c8:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <HAL_I2C_MspInit+0xc0>)
 80040ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040cc:	2380      	movs	r3, #128	@ 0x80
 80040ce:	039b      	lsls	r3, r3, #14
 80040d0:	4013      	ands	r3, r2
 80040d2:	60bb      	str	r3, [r7, #8]
 80040d4:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80040d6:	46c0      	nop			@ (mov r8, r8)
 80040d8:	46bd      	mov	sp, r7
 80040da:	b01d      	add	sp, #116	@ 0x74
 80040dc:	bd90      	pop	{r4, r7, pc}
 80040de:	46c0      	nop			@ (mov r8, r8)
 80040e0:	40005400 	.word	0x40005400
 80040e4:	40021000 	.word	0x40021000

080040e8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80040e8:	b590      	push	{r4, r7, lr}
 80040ea:	b08b      	sub	sp, #44	@ 0x2c
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f0:	2414      	movs	r4, #20
 80040f2:	193b      	adds	r3, r7, r4
 80040f4:	0018      	movs	r0, r3
 80040f6:	2314      	movs	r3, #20
 80040f8:	001a      	movs	r2, r3
 80040fa:	2100      	movs	r1, #0
 80040fc:	f005 f83e 	bl	800917c <memset>
  if(hspi->Instance==SPI1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a2c      	ldr	r2, [pc, #176]	@ (80041b8 <HAL_SPI_MspInit+0xd0>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d151      	bne.n	80041ae <HAL_SPI_MspInit+0xc6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800410a:	4b2c      	ldr	r3, [pc, #176]	@ (80041bc <HAL_SPI_MspInit+0xd4>)
 800410c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800410e:	4b2b      	ldr	r3, [pc, #172]	@ (80041bc <HAL_SPI_MspInit+0xd4>)
 8004110:	2180      	movs	r1, #128	@ 0x80
 8004112:	0149      	lsls	r1, r1, #5
 8004114:	430a      	orrs	r2, r1
 8004116:	641a      	str	r2, [r3, #64]	@ 0x40
 8004118:	4b28      	ldr	r3, [pc, #160]	@ (80041bc <HAL_SPI_MspInit+0xd4>)
 800411a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800411c:	2380      	movs	r3, #128	@ 0x80
 800411e:	015b      	lsls	r3, r3, #5
 8004120:	4013      	ands	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
 8004124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004126:	4b25      	ldr	r3, [pc, #148]	@ (80041bc <HAL_SPI_MspInit+0xd4>)
 8004128:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800412a:	4b24      	ldr	r3, [pc, #144]	@ (80041bc <HAL_SPI_MspInit+0xd4>)
 800412c:	2101      	movs	r1, #1
 800412e:	430a      	orrs	r2, r1
 8004130:	635a      	str	r2, [r3, #52]	@ 0x34
 8004132:	4b22      	ldr	r3, [pc, #136]	@ (80041bc <HAL_SPI_MspInit+0xd4>)
 8004134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004136:	2201      	movs	r2, #1
 8004138:	4013      	ands	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800413e:	4b1f      	ldr	r3, [pc, #124]	@ (80041bc <HAL_SPI_MspInit+0xd4>)
 8004140:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004142:	4b1e      	ldr	r3, [pc, #120]	@ (80041bc <HAL_SPI_MspInit+0xd4>)
 8004144:	2108      	movs	r1, #8
 8004146:	430a      	orrs	r2, r1
 8004148:	635a      	str	r2, [r3, #52]	@ 0x34
 800414a:	4b1c      	ldr	r3, [pc, #112]	@ (80041bc <HAL_SPI_MspInit+0xd4>)
 800414c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800414e:	2208      	movs	r2, #8
 8004150:	4013      	ands	r3, r2
 8004152:	60bb      	str	r3, [r7, #8]
 8004154:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PD5     ------> SPI1_MISO
    PD6     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004156:	193b      	adds	r3, r7, r4
 8004158:	2202      	movs	r2, #2
 800415a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800415c:	193b      	adds	r3, r7, r4
 800415e:	2202      	movs	r2, #2
 8004160:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004162:	193b      	adds	r3, r7, r4
 8004164:	2200      	movs	r2, #0
 8004166:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004168:	193b      	adds	r3, r7, r4
 800416a:	2200      	movs	r2, #0
 800416c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800416e:	193b      	adds	r3, r7, r4
 8004170:	2200      	movs	r2, #0
 8004172:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004174:	193a      	adds	r2, r7, r4
 8004176:	23a0      	movs	r3, #160	@ 0xa0
 8004178:	05db      	lsls	r3, r3, #23
 800417a:	0011      	movs	r1, r2
 800417c:	0018      	movs	r0, r3
 800417e:	f000 fb2b 	bl	80047d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004182:	0021      	movs	r1, r4
 8004184:	187b      	adds	r3, r7, r1
 8004186:	2260      	movs	r2, #96	@ 0x60
 8004188:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800418a:	187b      	adds	r3, r7, r1
 800418c:	2202      	movs	r2, #2
 800418e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004190:	187b      	adds	r3, r7, r1
 8004192:	2200      	movs	r2, #0
 8004194:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004196:	187b      	adds	r3, r7, r1
 8004198:	2200      	movs	r2, #0
 800419a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI1;
 800419c:	187b      	adds	r3, r7, r1
 800419e:	2201      	movs	r2, #1
 80041a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041a2:	187b      	adds	r3, r7, r1
 80041a4:	4a06      	ldr	r2, [pc, #24]	@ (80041c0 <HAL_SPI_MspInit+0xd8>)
 80041a6:	0019      	movs	r1, r3
 80041a8:	0010      	movs	r0, r2
 80041aa:	f000 fb15 	bl	80047d8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80041ae:	46c0      	nop			@ (mov r8, r8)
 80041b0:	46bd      	mov	sp, r7
 80041b2:	b00b      	add	sp, #44	@ 0x2c
 80041b4:	bd90      	pop	{r4, r7, pc}
 80041b6:	46c0      	nop			@ (mov r8, r8)
 80041b8:	40013000 	.word	0x40013000
 80041bc:	40021000 	.word	0x40021000
 80041c0:	50000c00 	.word	0x50000c00

080041c4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a0a      	ldr	r2, [pc, #40]	@ (80041fc <HAL_TIM_Base_MspInit+0x38>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d10d      	bne.n	80041f2 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80041d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004200 <HAL_TIM_Base_MspInit+0x3c>)
 80041d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041da:	4b09      	ldr	r3, [pc, #36]	@ (8004200 <HAL_TIM_Base_MspInit+0x3c>)
 80041dc:	2180      	movs	r1, #128	@ 0x80
 80041de:	02c9      	lsls	r1, r1, #11
 80041e0:	430a      	orrs	r2, r1
 80041e2:	641a      	str	r2, [r3, #64]	@ 0x40
 80041e4:	4b06      	ldr	r3, [pc, #24]	@ (8004200 <HAL_TIM_Base_MspInit+0x3c>)
 80041e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80041e8:	2380      	movs	r3, #128	@ 0x80
 80041ea:	02db      	lsls	r3, r3, #11
 80041ec:	4013      	ands	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 80041f2:	46c0      	nop			@ (mov r8, r8)
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b004      	add	sp, #16
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	46c0      	nop			@ (mov r8, r8)
 80041fc:	40014800 	.word	0x40014800
 8004200:	40021000 	.word	0x40021000

08004204 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004204:	b590      	push	{r4, r7, lr}
 8004206:	b089      	sub	sp, #36	@ 0x24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800420c:	240c      	movs	r4, #12
 800420e:	193b      	adds	r3, r7, r4
 8004210:	0018      	movs	r0, r3
 8004212:	2314      	movs	r3, #20
 8004214:	001a      	movs	r2, r3
 8004216:	2100      	movs	r1, #0
 8004218:	f004 ffb0 	bl	800917c <memset>
  if(htim->Instance==TIM17)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a14      	ldr	r2, [pc, #80]	@ (8004274 <HAL_TIM_MspPostInit+0x70>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d122      	bne.n	800426c <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004226:	4b14      	ldr	r3, [pc, #80]	@ (8004278 <HAL_TIM_MspPostInit+0x74>)
 8004228:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800422a:	4b13      	ldr	r3, [pc, #76]	@ (8004278 <HAL_TIM_MspPostInit+0x74>)
 800422c:	2101      	movs	r1, #1
 800422e:	430a      	orrs	r2, r1
 8004230:	635a      	str	r2, [r3, #52]	@ 0x34
 8004232:	4b11      	ldr	r3, [pc, #68]	@ (8004278 <HAL_TIM_MspPostInit+0x74>)
 8004234:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004236:	2201      	movs	r2, #1
 8004238:	4013      	ands	r3, r2
 800423a:	60bb      	str	r3, [r7, #8]
 800423c:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800423e:	0021      	movs	r1, r4
 8004240:	187b      	adds	r3, r7, r1
 8004242:	2280      	movs	r2, #128	@ 0x80
 8004244:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004246:	187b      	adds	r3, r7, r1
 8004248:	2202      	movs	r2, #2
 800424a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800424c:	187b      	adds	r3, r7, r1
 800424e:	2200      	movs	r2, #0
 8004250:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004252:	187b      	adds	r3, r7, r1
 8004254:	2200      	movs	r2, #0
 8004256:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8004258:	187b      	adds	r3, r7, r1
 800425a:	2205      	movs	r2, #5
 800425c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800425e:	187a      	adds	r2, r7, r1
 8004260:	23a0      	movs	r3, #160	@ 0xa0
 8004262:	05db      	lsls	r3, r3, #23
 8004264:	0011      	movs	r1, r2
 8004266:	0018      	movs	r0, r3
 8004268:	f000 fab6 	bl	80047d8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800426c:	46c0      	nop			@ (mov r8, r8)
 800426e:	46bd      	mov	sp, r7
 8004270:	b009      	add	sp, #36	@ 0x24
 8004272:	bd90      	pop	{r4, r7, pc}
 8004274:	40014800 	.word	0x40014800
 8004278:	40021000 	.word	0x40021000

0800427c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800427c:	b590      	push	{r4, r7, lr}
 800427e:	b09f      	sub	sp, #124	@ 0x7c
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004284:	2364      	movs	r3, #100	@ 0x64
 8004286:	18fb      	adds	r3, r7, r3
 8004288:	0018      	movs	r0, r3
 800428a:	2314      	movs	r3, #20
 800428c:	001a      	movs	r2, r3
 800428e:	2100      	movs	r1, #0
 8004290:	f004 ff74 	bl	800917c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004294:	2418      	movs	r4, #24
 8004296:	193b      	adds	r3, r7, r4
 8004298:	0018      	movs	r0, r3
 800429a:	234c      	movs	r3, #76	@ 0x4c
 800429c:	001a      	movs	r2, r3
 800429e:	2100      	movs	r1, #0
 80042a0:	f004 ff6c 	bl	800917c <memset>
  if(huart->Instance==USART1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a45      	ldr	r2, [pc, #276]	@ (80043c0 <HAL_UART_MspInit+0x144>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d13e      	bne.n	800432c <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80042ae:	193b      	adds	r3, r7, r4
 80042b0:	2201      	movs	r2, #1
 80042b2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80042b4:	193b      	adds	r3, r7, r4
 80042b6:	2200      	movs	r2, #0
 80042b8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80042ba:	193b      	adds	r3, r7, r4
 80042bc:	0018      	movs	r0, r3
 80042be:	f001 ffcb 	bl	8006258 <HAL_RCCEx_PeriphCLKConfig>
 80042c2:	1e03      	subs	r3, r0, #0
 80042c4:	d001      	beq.n	80042ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80042c6:	f7ff fe7f 	bl	8003fc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80042ca:	4b3e      	ldr	r3, [pc, #248]	@ (80043c4 <HAL_UART_MspInit+0x148>)
 80042cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042ce:	4b3d      	ldr	r3, [pc, #244]	@ (80043c4 <HAL_UART_MspInit+0x148>)
 80042d0:	2180      	movs	r1, #128	@ 0x80
 80042d2:	01c9      	lsls	r1, r1, #7
 80042d4:	430a      	orrs	r2, r1
 80042d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80042d8:	4b3a      	ldr	r3, [pc, #232]	@ (80043c4 <HAL_UART_MspInit+0x148>)
 80042da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042dc:	2380      	movs	r3, #128	@ 0x80
 80042de:	01db      	lsls	r3, r3, #7
 80042e0:	4013      	ands	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042e6:	4b37      	ldr	r3, [pc, #220]	@ (80043c4 <HAL_UART_MspInit+0x148>)
 80042e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042ea:	4b36      	ldr	r3, [pc, #216]	@ (80043c4 <HAL_UART_MspInit+0x148>)
 80042ec:	2104      	movs	r1, #4
 80042ee:	430a      	orrs	r2, r1
 80042f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80042f2:	4b34      	ldr	r3, [pc, #208]	@ (80043c4 <HAL_UART_MspInit+0x148>)
 80042f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042f6:	2204      	movs	r2, #4
 80042f8:	4013      	ands	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
 80042fc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80042fe:	2164      	movs	r1, #100	@ 0x64
 8004300:	187b      	adds	r3, r7, r1
 8004302:	2230      	movs	r2, #48	@ 0x30
 8004304:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004306:	187b      	adds	r3, r7, r1
 8004308:	2202      	movs	r2, #2
 800430a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430c:	187b      	adds	r3, r7, r1
 800430e:	2200      	movs	r2, #0
 8004310:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004312:	187b      	adds	r3, r7, r1
 8004314:	2200      	movs	r2, #0
 8004316:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004318:	187b      	adds	r3, r7, r1
 800431a:	2201      	movs	r2, #1
 800431c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800431e:	187b      	adds	r3, r7, r1
 8004320:	4a29      	ldr	r2, [pc, #164]	@ (80043c8 <HAL_UART_MspInit+0x14c>)
 8004322:	0019      	movs	r1, r3
 8004324:	0010      	movs	r0, r2
 8004326:	f000 fa57 	bl	80047d8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800432a:	e044      	b.n	80043b6 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a26      	ldr	r2, [pc, #152]	@ (80043cc <HAL_UART_MspInit+0x150>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d13f      	bne.n	80043b6 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004336:	2118      	movs	r1, #24
 8004338:	187b      	adds	r3, r7, r1
 800433a:	2202      	movs	r2, #2
 800433c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800433e:	187b      	adds	r3, r7, r1
 8004340:	2200      	movs	r2, #0
 8004342:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004344:	187b      	adds	r3, r7, r1
 8004346:	0018      	movs	r0, r3
 8004348:	f001 ff86 	bl	8006258 <HAL_RCCEx_PeriphCLKConfig>
 800434c:	1e03      	subs	r3, r0, #0
 800434e:	d001      	beq.n	8004354 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8004350:	f7ff fe3a 	bl	8003fc8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004354:	4b1b      	ldr	r3, [pc, #108]	@ (80043c4 <HAL_UART_MspInit+0x148>)
 8004356:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004358:	4b1a      	ldr	r3, [pc, #104]	@ (80043c4 <HAL_UART_MspInit+0x148>)
 800435a:	2180      	movs	r1, #128	@ 0x80
 800435c:	0289      	lsls	r1, r1, #10
 800435e:	430a      	orrs	r2, r1
 8004360:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004362:	4b18      	ldr	r3, [pc, #96]	@ (80043c4 <HAL_UART_MspInit+0x148>)
 8004364:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004366:	2380      	movs	r3, #128	@ 0x80
 8004368:	029b      	lsls	r3, r3, #10
 800436a:	4013      	ands	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004370:	4b14      	ldr	r3, [pc, #80]	@ (80043c4 <HAL_UART_MspInit+0x148>)
 8004372:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004374:	4b13      	ldr	r3, [pc, #76]	@ (80043c4 <HAL_UART_MspInit+0x148>)
 8004376:	2101      	movs	r1, #1
 8004378:	430a      	orrs	r2, r1
 800437a:	635a      	str	r2, [r3, #52]	@ 0x34
 800437c:	4b11      	ldr	r3, [pc, #68]	@ (80043c4 <HAL_UART_MspInit+0x148>)
 800437e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004380:	2201      	movs	r2, #1
 8004382:	4013      	ands	r3, r2
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004388:	2164      	movs	r1, #100	@ 0x64
 800438a:	187b      	adds	r3, r7, r1
 800438c:	220c      	movs	r2, #12
 800438e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004390:	187b      	adds	r3, r7, r1
 8004392:	2202      	movs	r2, #2
 8004394:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004396:	187b      	adds	r3, r7, r1
 8004398:	2200      	movs	r2, #0
 800439a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800439c:	187b      	adds	r3, r7, r1
 800439e:	2200      	movs	r2, #0
 80043a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80043a2:	187b      	adds	r3, r7, r1
 80043a4:	2201      	movs	r2, #1
 80043a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043a8:	187a      	adds	r2, r7, r1
 80043aa:	23a0      	movs	r3, #160	@ 0xa0
 80043ac:	05db      	lsls	r3, r3, #23
 80043ae:	0011      	movs	r1, r2
 80043b0:	0018      	movs	r0, r3
 80043b2:	f000 fa11 	bl	80047d8 <HAL_GPIO_Init>
}
 80043b6:	46c0      	nop			@ (mov r8, r8)
 80043b8:	46bd      	mov	sp, r7
 80043ba:	b01f      	add	sp, #124	@ 0x7c
 80043bc:	bd90      	pop	{r4, r7, pc}
 80043be:	46c0      	nop			@ (mov r8, r8)
 80043c0:	40013800 	.word	0x40013800
 80043c4:	40021000 	.word	0x40021000
 80043c8:	50000800 	.word	0x50000800
 80043cc:	40004400 	.word	0x40004400

080043d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80043d4:	46c0      	nop			@ (mov r8, r8)
 80043d6:	e7fd      	b.n	80043d4 <NMI_Handler+0x4>

080043d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043dc:	46c0      	nop			@ (mov r8, r8)
 80043de:	e7fd      	b.n	80043dc <HardFault_Handler+0x4>

080043e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80043e4:	46c0      	nop			@ (mov r8, r8)
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043ee:	46c0      	nop			@ (mov r8, r8)
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043f8:	f000 f8e4 	bl	80045c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043fc:	46c0      	nop			@ (mov r8, r8)
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004408:	4b05      	ldr	r3, [pc, #20]	@ (8004420 <RTC_TAMP_IRQHandler+0x1c>)
 800440a:	0018      	movs	r0, r3
 800440c:	f002 fb66 	bl	8006adc <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8004410:	4b03      	ldr	r3, [pc, #12]	@ (8004420 <RTC_TAMP_IRQHandler+0x1c>)
 8004412:	0018      	movs	r0, r3
 8004414:	f002 fbe5 	bl	8006be2 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8004418:	46c0      	nop			@ (mov r8, r8)
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	46c0      	nop			@ (mov r8, r8)
 8004420:	20000ec8 	.word	0x20000ec8

08004424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800442c:	4a14      	ldr	r2, [pc, #80]	@ (8004480 <_sbrk+0x5c>)
 800442e:	4b15      	ldr	r3, [pc, #84]	@ (8004484 <_sbrk+0x60>)
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004438:	4b13      	ldr	r3, [pc, #76]	@ (8004488 <_sbrk+0x64>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d102      	bne.n	8004446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004440:	4b11      	ldr	r3, [pc, #68]	@ (8004488 <_sbrk+0x64>)
 8004442:	4a12      	ldr	r2, [pc, #72]	@ (800448c <_sbrk+0x68>)
 8004444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004446:	4b10      	ldr	r3, [pc, #64]	@ (8004488 <_sbrk+0x64>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	18d3      	adds	r3, r2, r3
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	429a      	cmp	r2, r3
 8004452:	d207      	bcs.n	8004464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004454:	f004 fe9a 	bl	800918c <__errno>
 8004458:	0003      	movs	r3, r0
 800445a:	220c      	movs	r2, #12
 800445c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800445e:	2301      	movs	r3, #1
 8004460:	425b      	negs	r3, r3
 8004462:	e009      	b.n	8004478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004464:	4b08      	ldr	r3, [pc, #32]	@ (8004488 <_sbrk+0x64>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800446a:	4b07      	ldr	r3, [pc, #28]	@ (8004488 <_sbrk+0x64>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	18d2      	adds	r2, r2, r3
 8004472:	4b05      	ldr	r3, [pc, #20]	@ (8004488 <_sbrk+0x64>)
 8004474:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004476:	68fb      	ldr	r3, [r7, #12]
}
 8004478:	0018      	movs	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	b006      	add	sp, #24
 800447e:	bd80      	pop	{r7, pc}
 8004480:	20024000 	.word	0x20024000
 8004484:	00000400 	.word	0x00000400
 8004488:	200010cc 	.word	0x200010cc
 800448c:	20001220 	.word	0x20001220

08004490 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004494:	46c0      	nop			@ (mov r8, r8)
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800449c:	480d      	ldr	r0, [pc, #52]	@ (80044d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800449e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80044a0:	f7ff fff6 	bl	8004490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044a4:	480c      	ldr	r0, [pc, #48]	@ (80044d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80044a6:	490d      	ldr	r1, [pc, #52]	@ (80044dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80044a8:	4a0d      	ldr	r2, [pc, #52]	@ (80044e0 <LoopForever+0xe>)
  movs r3, #0
 80044aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044ac:	e002      	b.n	80044b4 <LoopCopyDataInit>

080044ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044b2:	3304      	adds	r3, #4

080044b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044b8:	d3f9      	bcc.n	80044ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044ba:	4a0a      	ldr	r2, [pc, #40]	@ (80044e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80044bc:	4c0a      	ldr	r4, [pc, #40]	@ (80044e8 <LoopForever+0x16>)
  movs r3, #0
 80044be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044c0:	e001      	b.n	80044c6 <LoopFillZerobss>

080044c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044c4:	3204      	adds	r2, #4

080044c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044c8:	d3fb      	bcc.n	80044c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80044ca:	f004 fe65 	bl	8009198 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80044ce:	f7fe fd9d 	bl	800300c <main>

080044d2 <LoopForever>:

LoopForever:
  b LoopForever
 80044d2:	e7fe      	b.n	80044d2 <LoopForever>
  ldr   r0, =_estack
 80044d4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80044d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044dc:	20000a40 	.word	0x20000a40
  ldr r2, =_sidata
 80044e0:	0800a598 	.word	0x0800a598
  ldr r2, =_sbss
 80044e4:	20000a40 	.word	0x20000a40
  ldr r4, =_ebss
 80044e8:	2000121c 	.word	0x2000121c

080044ec <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80044ec:	e7fe      	b.n	80044ec <ADC1_COMP_IRQHandler>
	...

080044f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80044f6:	1dfb      	adds	r3, r7, #7
 80044f8:	2200      	movs	r2, #0
 80044fa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044fc:	4b0b      	ldr	r3, [pc, #44]	@ (800452c <HAL_Init+0x3c>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	4b0a      	ldr	r3, [pc, #40]	@ (800452c <HAL_Init+0x3c>)
 8004502:	2180      	movs	r1, #128	@ 0x80
 8004504:	0049      	lsls	r1, r1, #1
 8004506:	430a      	orrs	r2, r1
 8004508:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800450a:	2003      	movs	r0, #3
 800450c:	f000 f810 	bl	8004530 <HAL_InitTick>
 8004510:	1e03      	subs	r3, r0, #0
 8004512:	d003      	beq.n	800451c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004514:	1dfb      	adds	r3, r7, #7
 8004516:	2201      	movs	r2, #1
 8004518:	701a      	strb	r2, [r3, #0]
 800451a:	e001      	b.n	8004520 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800451c:	f7ff fd5a 	bl	8003fd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004520:	1dfb      	adds	r3, r7, #7
 8004522:	781b      	ldrb	r3, [r3, #0]
}
 8004524:	0018      	movs	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	b002      	add	sp, #8
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40022000 	.word	0x40022000

08004530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004530:	b590      	push	{r4, r7, lr}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004538:	230f      	movs	r3, #15
 800453a:	18fb      	adds	r3, r7, r3
 800453c:	2200      	movs	r2, #0
 800453e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004540:	4b1d      	ldr	r3, [pc, #116]	@ (80045b8 <HAL_InitTick+0x88>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d02b      	beq.n	80045a0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004548:	4b1c      	ldr	r3, [pc, #112]	@ (80045bc <HAL_InitTick+0x8c>)
 800454a:	681c      	ldr	r4, [r3, #0]
 800454c:	4b1a      	ldr	r3, [pc, #104]	@ (80045b8 <HAL_InitTick+0x88>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	0019      	movs	r1, r3
 8004552:	23fa      	movs	r3, #250	@ 0xfa
 8004554:	0098      	lsls	r0, r3, #2
 8004556:	f7fb fde7 	bl	8000128 <__udivsi3>
 800455a:	0003      	movs	r3, r0
 800455c:	0019      	movs	r1, r3
 800455e:	0020      	movs	r0, r4
 8004560:	f7fb fde2 	bl	8000128 <__udivsi3>
 8004564:	0003      	movs	r3, r0
 8004566:	0018      	movs	r0, r3
 8004568:	f000 f929 	bl	80047be <HAL_SYSTICK_Config>
 800456c:	1e03      	subs	r3, r0, #0
 800456e:	d112      	bne.n	8004596 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b03      	cmp	r3, #3
 8004574:	d80a      	bhi.n	800458c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	2301      	movs	r3, #1
 800457a:	425b      	negs	r3, r3
 800457c:	2200      	movs	r2, #0
 800457e:	0018      	movs	r0, r3
 8004580:	f000 f908 	bl	8004794 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004584:	4b0e      	ldr	r3, [pc, #56]	@ (80045c0 <HAL_InitTick+0x90>)
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	e00d      	b.n	80045a8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800458c:	230f      	movs	r3, #15
 800458e:	18fb      	adds	r3, r7, r3
 8004590:	2201      	movs	r2, #1
 8004592:	701a      	strb	r2, [r3, #0]
 8004594:	e008      	b.n	80045a8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004596:	230f      	movs	r3, #15
 8004598:	18fb      	adds	r3, r7, r3
 800459a:	2201      	movs	r2, #1
 800459c:	701a      	strb	r2, [r3, #0]
 800459e:	e003      	b.n	80045a8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80045a0:	230f      	movs	r3, #15
 80045a2:	18fb      	adds	r3, r7, r3
 80045a4:	2201      	movs	r2, #1
 80045a6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80045a8:	230f      	movs	r3, #15
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	781b      	ldrb	r3, [r3, #0]
}
 80045ae:	0018      	movs	r0, r3
 80045b0:	46bd      	mov	sp, r7
 80045b2:	b005      	add	sp, #20
 80045b4:	bd90      	pop	{r4, r7, pc}
 80045b6:	46c0      	nop			@ (mov r8, r8)
 80045b8:	200009ec 	.word	0x200009ec
 80045bc:	200009e4 	.word	0x200009e4
 80045c0:	200009e8 	.word	0x200009e8

080045c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80045c8:	4b05      	ldr	r3, [pc, #20]	@ (80045e0 <HAL_IncTick+0x1c>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	001a      	movs	r2, r3
 80045ce:	4b05      	ldr	r3, [pc, #20]	@ (80045e4 <HAL_IncTick+0x20>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	18d2      	adds	r2, r2, r3
 80045d4:	4b03      	ldr	r3, [pc, #12]	@ (80045e4 <HAL_IncTick+0x20>)
 80045d6:	601a      	str	r2, [r3, #0]
}
 80045d8:	46c0      	nop			@ (mov r8, r8)
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	46c0      	nop			@ (mov r8, r8)
 80045e0:	200009ec 	.word	0x200009ec
 80045e4:	200010d0 	.word	0x200010d0

080045e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  return uwTick;
 80045ec:	4b02      	ldr	r3, [pc, #8]	@ (80045f8 <HAL_GetTick+0x10>)
 80045ee:	681b      	ldr	r3, [r3, #0]
}
 80045f0:	0018      	movs	r0, r3
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	46c0      	nop			@ (mov r8, r8)
 80045f8:	200010d0 	.word	0x200010d0

080045fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004604:	f7ff fff0 	bl	80045e8 <HAL_GetTick>
 8004608:	0003      	movs	r3, r0
 800460a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	3301      	adds	r3, #1
 8004614:	d005      	beq.n	8004622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004616:	4b0a      	ldr	r3, [pc, #40]	@ (8004640 <HAL_Delay+0x44>)
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	001a      	movs	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	189b      	adds	r3, r3, r2
 8004620:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004622:	46c0      	nop			@ (mov r8, r8)
 8004624:	f7ff ffe0 	bl	80045e8 <HAL_GetTick>
 8004628:	0002      	movs	r2, r0
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	429a      	cmp	r2, r3
 8004632:	d8f7      	bhi.n	8004624 <HAL_Delay+0x28>
  {
  }
}
 8004634:	46c0      	nop			@ (mov r8, r8)
 8004636:	46c0      	nop			@ (mov r8, r8)
 8004638:	46bd      	mov	sp, r7
 800463a:	b004      	add	sp, #16
 800463c:	bd80      	pop	{r7, pc}
 800463e:	46c0      	nop			@ (mov r8, r8)
 8004640:	200009ec 	.word	0x200009ec

08004644 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800464c:	4b06      	ldr	r3, [pc, #24]	@ (8004668 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a06      	ldr	r2, [pc, #24]	@ (800466c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8004652:	4013      	ands	r3, r2
 8004654:	0019      	movs	r1, r3
 8004656:	4b04      	ldr	r3, [pc, #16]	@ (8004668 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	430a      	orrs	r2, r1
 800465c:	601a      	str	r2, [r3, #0]
}
 800465e:	46c0      	nop			@ (mov r8, r8)
 8004660:	46bd      	mov	sp, r7
 8004662:	b002      	add	sp, #8
 8004664:	bd80      	pop	{r7, pc}
 8004666:	46c0      	nop			@ (mov r8, r8)
 8004668:	40010000 	.word	0x40010000
 800466c:	fffff9ff 	.word	0xfffff9ff

08004670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004670:	b590      	push	{r4, r7, lr}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	0002      	movs	r2, r0
 8004678:	6039      	str	r1, [r7, #0]
 800467a:	1dfb      	adds	r3, r7, #7
 800467c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800467e:	1dfb      	adds	r3, r7, #7
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b7f      	cmp	r3, #127	@ 0x7f
 8004684:	d828      	bhi.n	80046d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004686:	4a2f      	ldr	r2, [pc, #188]	@ (8004744 <__NVIC_SetPriority+0xd4>)
 8004688:	1dfb      	adds	r3, r7, #7
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	b25b      	sxtb	r3, r3
 800468e:	089b      	lsrs	r3, r3, #2
 8004690:	33c0      	adds	r3, #192	@ 0xc0
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	589b      	ldr	r3, [r3, r2]
 8004696:	1dfa      	adds	r2, r7, #7
 8004698:	7812      	ldrb	r2, [r2, #0]
 800469a:	0011      	movs	r1, r2
 800469c:	2203      	movs	r2, #3
 800469e:	400a      	ands	r2, r1
 80046a0:	00d2      	lsls	r2, r2, #3
 80046a2:	21ff      	movs	r1, #255	@ 0xff
 80046a4:	4091      	lsls	r1, r2
 80046a6:	000a      	movs	r2, r1
 80046a8:	43d2      	mvns	r2, r2
 80046aa:	401a      	ands	r2, r3
 80046ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	019b      	lsls	r3, r3, #6
 80046b2:	22ff      	movs	r2, #255	@ 0xff
 80046b4:	401a      	ands	r2, r3
 80046b6:	1dfb      	adds	r3, r7, #7
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	0018      	movs	r0, r3
 80046bc:	2303      	movs	r3, #3
 80046be:	4003      	ands	r3, r0
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046c4:	481f      	ldr	r0, [pc, #124]	@ (8004744 <__NVIC_SetPriority+0xd4>)
 80046c6:	1dfb      	adds	r3, r7, #7
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	b25b      	sxtb	r3, r3
 80046cc:	089b      	lsrs	r3, r3, #2
 80046ce:	430a      	orrs	r2, r1
 80046d0:	33c0      	adds	r3, #192	@ 0xc0
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80046d6:	e031      	b.n	800473c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004748 <__NVIC_SetPriority+0xd8>)
 80046da:	1dfb      	adds	r3, r7, #7
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	0019      	movs	r1, r3
 80046e0:	230f      	movs	r3, #15
 80046e2:	400b      	ands	r3, r1
 80046e4:	3b08      	subs	r3, #8
 80046e6:	089b      	lsrs	r3, r3, #2
 80046e8:	3306      	adds	r3, #6
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	18d3      	adds	r3, r2, r3
 80046ee:	3304      	adds	r3, #4
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	1dfa      	adds	r2, r7, #7
 80046f4:	7812      	ldrb	r2, [r2, #0]
 80046f6:	0011      	movs	r1, r2
 80046f8:	2203      	movs	r2, #3
 80046fa:	400a      	ands	r2, r1
 80046fc:	00d2      	lsls	r2, r2, #3
 80046fe:	21ff      	movs	r1, #255	@ 0xff
 8004700:	4091      	lsls	r1, r2
 8004702:	000a      	movs	r2, r1
 8004704:	43d2      	mvns	r2, r2
 8004706:	401a      	ands	r2, r3
 8004708:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	019b      	lsls	r3, r3, #6
 800470e:	22ff      	movs	r2, #255	@ 0xff
 8004710:	401a      	ands	r2, r3
 8004712:	1dfb      	adds	r3, r7, #7
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	0018      	movs	r0, r3
 8004718:	2303      	movs	r3, #3
 800471a:	4003      	ands	r3, r0
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004720:	4809      	ldr	r0, [pc, #36]	@ (8004748 <__NVIC_SetPriority+0xd8>)
 8004722:	1dfb      	adds	r3, r7, #7
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	001c      	movs	r4, r3
 8004728:	230f      	movs	r3, #15
 800472a:	4023      	ands	r3, r4
 800472c:	3b08      	subs	r3, #8
 800472e:	089b      	lsrs	r3, r3, #2
 8004730:	430a      	orrs	r2, r1
 8004732:	3306      	adds	r3, #6
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	18c3      	adds	r3, r0, r3
 8004738:	3304      	adds	r3, #4
 800473a:	601a      	str	r2, [r3, #0]
}
 800473c:	46c0      	nop			@ (mov r8, r8)
 800473e:	46bd      	mov	sp, r7
 8004740:	b003      	add	sp, #12
 8004742:	bd90      	pop	{r4, r7, pc}
 8004744:	e000e100 	.word	0xe000e100
 8004748:	e000ed00 	.word	0xe000ed00

0800474c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	1e5a      	subs	r2, r3, #1
 8004758:	2380      	movs	r3, #128	@ 0x80
 800475a:	045b      	lsls	r3, r3, #17
 800475c:	429a      	cmp	r2, r3
 800475e:	d301      	bcc.n	8004764 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004760:	2301      	movs	r3, #1
 8004762:	e010      	b.n	8004786 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004764:	4b0a      	ldr	r3, [pc, #40]	@ (8004790 <SysTick_Config+0x44>)
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	3a01      	subs	r2, #1
 800476a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800476c:	2301      	movs	r3, #1
 800476e:	425b      	negs	r3, r3
 8004770:	2103      	movs	r1, #3
 8004772:	0018      	movs	r0, r3
 8004774:	f7ff ff7c 	bl	8004670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004778:	4b05      	ldr	r3, [pc, #20]	@ (8004790 <SysTick_Config+0x44>)
 800477a:	2200      	movs	r2, #0
 800477c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800477e:	4b04      	ldr	r3, [pc, #16]	@ (8004790 <SysTick_Config+0x44>)
 8004780:	2207      	movs	r2, #7
 8004782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004784:	2300      	movs	r3, #0
}
 8004786:	0018      	movs	r0, r3
 8004788:	46bd      	mov	sp, r7
 800478a:	b002      	add	sp, #8
 800478c:	bd80      	pop	{r7, pc}
 800478e:	46c0      	nop			@ (mov r8, r8)
 8004790:	e000e010 	.word	0xe000e010

08004794 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	607a      	str	r2, [r7, #4]
 800479e:	210f      	movs	r1, #15
 80047a0:	187b      	adds	r3, r7, r1
 80047a2:	1c02      	adds	r2, r0, #0
 80047a4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	187b      	adds	r3, r7, r1
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	b25b      	sxtb	r3, r3
 80047ae:	0011      	movs	r1, r2
 80047b0:	0018      	movs	r0, r3
 80047b2:	f7ff ff5d 	bl	8004670 <__NVIC_SetPriority>
}
 80047b6:	46c0      	nop			@ (mov r8, r8)
 80047b8:	46bd      	mov	sp, r7
 80047ba:	b004      	add	sp, #16
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b082      	sub	sp, #8
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	0018      	movs	r0, r3
 80047ca:	f7ff ffbf 	bl	800474c <SysTick_Config>
 80047ce:	0003      	movs	r3, r0
}
 80047d0:	0018      	movs	r0, r3
 80047d2:	46bd      	mov	sp, r7
 80047d4:	b002      	add	sp, #8
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047e6:	e14d      	b.n	8004a84 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2101      	movs	r1, #1
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	4091      	lsls	r1, r2
 80047f2:	000a      	movs	r2, r1
 80047f4:	4013      	ands	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d100      	bne.n	8004800 <HAL_GPIO_Init+0x28>
 80047fe:	e13e      	b.n	8004a7e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2203      	movs	r2, #3
 8004806:	4013      	ands	r3, r2
 8004808:	2b01      	cmp	r3, #1
 800480a:	d005      	beq.n	8004818 <HAL_GPIO_Init+0x40>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2203      	movs	r2, #3
 8004812:	4013      	ands	r3, r2
 8004814:	2b02      	cmp	r3, #2
 8004816:	d130      	bne.n	800487a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	2203      	movs	r2, #3
 8004824:	409a      	lsls	r2, r3
 8004826:	0013      	movs	r3, r2
 8004828:	43da      	mvns	r2, r3
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	4013      	ands	r3, r2
 800482e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	409a      	lsls	r2, r3
 800483a:	0013      	movs	r3, r2
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	4313      	orrs	r3, r2
 8004840:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800484e:	2201      	movs	r2, #1
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	409a      	lsls	r2, r3
 8004854:	0013      	movs	r3, r2
 8004856:	43da      	mvns	r2, r3
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	4013      	ands	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	091b      	lsrs	r3, r3, #4
 8004864:	2201      	movs	r2, #1
 8004866:	401a      	ands	r2, r3
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	409a      	lsls	r2, r3
 800486c:	0013      	movs	r3, r2
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2203      	movs	r2, #3
 8004880:	4013      	ands	r3, r2
 8004882:	2b03      	cmp	r3, #3
 8004884:	d017      	beq.n	80048b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	2203      	movs	r2, #3
 8004892:	409a      	lsls	r2, r3
 8004894:	0013      	movs	r3, r2
 8004896:	43da      	mvns	r2, r3
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	4013      	ands	r3, r2
 800489c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	689a      	ldr	r2, [r3, #8]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	409a      	lsls	r2, r3
 80048a8:	0013      	movs	r3, r2
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2203      	movs	r2, #3
 80048bc:	4013      	ands	r3, r2
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d123      	bne.n	800490a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	08da      	lsrs	r2, r3, #3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3208      	adds	r2, #8
 80048ca:	0092      	lsls	r2, r2, #2
 80048cc:	58d3      	ldr	r3, [r2, r3]
 80048ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	2207      	movs	r2, #7
 80048d4:	4013      	ands	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	220f      	movs	r2, #15
 80048da:	409a      	lsls	r2, r3
 80048dc:	0013      	movs	r3, r2
 80048de:	43da      	mvns	r2, r3
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	4013      	ands	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	691a      	ldr	r2, [r3, #16]
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2107      	movs	r1, #7
 80048ee:	400b      	ands	r3, r1
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	409a      	lsls	r2, r3
 80048f4:	0013      	movs	r3, r2
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	08da      	lsrs	r2, r3, #3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	3208      	adds	r2, #8
 8004904:	0092      	lsls	r2, r2, #2
 8004906:	6939      	ldr	r1, [r7, #16]
 8004908:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	2203      	movs	r2, #3
 8004916:	409a      	lsls	r2, r3
 8004918:	0013      	movs	r3, r2
 800491a:	43da      	mvns	r2, r3
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	4013      	ands	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2203      	movs	r2, #3
 8004928:	401a      	ands	r2, r3
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	409a      	lsls	r2, r3
 8004930:	0013      	movs	r3, r2
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	23c0      	movs	r3, #192	@ 0xc0
 8004944:	029b      	lsls	r3, r3, #10
 8004946:	4013      	ands	r3, r2
 8004948:	d100      	bne.n	800494c <HAL_GPIO_Init+0x174>
 800494a:	e098      	b.n	8004a7e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800494c:	4a53      	ldr	r2, [pc, #332]	@ (8004a9c <HAL_GPIO_Init+0x2c4>)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	089b      	lsrs	r3, r3, #2
 8004952:	3318      	adds	r3, #24
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	589b      	ldr	r3, [r3, r2]
 8004958:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2203      	movs	r2, #3
 800495e:	4013      	ands	r3, r2
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	220f      	movs	r2, #15
 8004964:	409a      	lsls	r2, r3
 8004966:	0013      	movs	r3, r2
 8004968:	43da      	mvns	r2, r3
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	4013      	ands	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	23a0      	movs	r3, #160	@ 0xa0
 8004974:	05db      	lsls	r3, r3, #23
 8004976:	429a      	cmp	r2, r3
 8004978:	d019      	beq.n	80049ae <HAL_GPIO_Init+0x1d6>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a48      	ldr	r2, [pc, #288]	@ (8004aa0 <HAL_GPIO_Init+0x2c8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d013      	beq.n	80049aa <HAL_GPIO_Init+0x1d2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a47      	ldr	r2, [pc, #284]	@ (8004aa4 <HAL_GPIO_Init+0x2cc>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d00d      	beq.n	80049a6 <HAL_GPIO_Init+0x1ce>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a46      	ldr	r2, [pc, #280]	@ (8004aa8 <HAL_GPIO_Init+0x2d0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d007      	beq.n	80049a2 <HAL_GPIO_Init+0x1ca>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a45      	ldr	r2, [pc, #276]	@ (8004aac <HAL_GPIO_Init+0x2d4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d101      	bne.n	800499e <HAL_GPIO_Init+0x1c6>
 800499a:	2304      	movs	r3, #4
 800499c:	e008      	b.n	80049b0 <HAL_GPIO_Init+0x1d8>
 800499e:	2305      	movs	r3, #5
 80049a0:	e006      	b.n	80049b0 <HAL_GPIO_Init+0x1d8>
 80049a2:	2303      	movs	r3, #3
 80049a4:	e004      	b.n	80049b0 <HAL_GPIO_Init+0x1d8>
 80049a6:	2302      	movs	r3, #2
 80049a8:	e002      	b.n	80049b0 <HAL_GPIO_Init+0x1d8>
 80049aa:	2301      	movs	r3, #1
 80049ac:	e000      	b.n	80049b0 <HAL_GPIO_Init+0x1d8>
 80049ae:	2300      	movs	r3, #0
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	2103      	movs	r1, #3
 80049b4:	400a      	ands	r2, r1
 80049b6:	00d2      	lsls	r2, r2, #3
 80049b8:	4093      	lsls	r3, r2
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80049c0:	4936      	ldr	r1, [pc, #216]	@ (8004a9c <HAL_GPIO_Init+0x2c4>)
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	089b      	lsrs	r3, r3, #2
 80049c6:	3318      	adds	r3, #24
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049ce:	4b33      	ldr	r3, [pc, #204]	@ (8004a9c <HAL_GPIO_Init+0x2c4>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	43da      	mvns	r2, r3
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	4013      	ands	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	2380      	movs	r3, #128	@ 0x80
 80049e4:	035b      	lsls	r3, r3, #13
 80049e6:	4013      	ands	r3, r2
 80049e8:	d003      	beq.n	80049f2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80049f2:	4b2a      	ldr	r3, [pc, #168]	@ (8004a9c <HAL_GPIO_Init+0x2c4>)
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80049f8:	4b28      	ldr	r3, [pc, #160]	@ (8004a9c <HAL_GPIO_Init+0x2c4>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	43da      	mvns	r2, r3
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	4013      	ands	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	2380      	movs	r3, #128	@ 0x80
 8004a0e:	039b      	lsls	r3, r3, #14
 8004a10:	4013      	ands	r3, r2
 8004a12:	d003      	beq.n	8004a1c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8004a9c <HAL_GPIO_Init+0x2c4>)
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004a22:	4a1e      	ldr	r2, [pc, #120]	@ (8004a9c <HAL_GPIO_Init+0x2c4>)
 8004a24:	2384      	movs	r3, #132	@ 0x84
 8004a26:	58d3      	ldr	r3, [r2, r3]
 8004a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	43da      	mvns	r2, r3
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	4013      	ands	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	2380      	movs	r3, #128	@ 0x80
 8004a3a:	029b      	lsls	r3, r3, #10
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	d003      	beq.n	8004a48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a48:	4914      	ldr	r1, [pc, #80]	@ (8004a9c <HAL_GPIO_Init+0x2c4>)
 8004a4a:	2284      	movs	r2, #132	@ 0x84
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004a50:	4a12      	ldr	r2, [pc, #72]	@ (8004a9c <HAL_GPIO_Init+0x2c4>)
 8004a52:	2380      	movs	r3, #128	@ 0x80
 8004a54:	58d3      	ldr	r3, [r2, r3]
 8004a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	43da      	mvns	r2, r3
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	2380      	movs	r3, #128	@ 0x80
 8004a68:	025b      	lsls	r3, r3, #9
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	d003      	beq.n	8004a76 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a76:	4909      	ldr	r1, [pc, #36]	@ (8004a9c <HAL_GPIO_Init+0x2c4>)
 8004a78:	2280      	movs	r2, #128	@ 0x80
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	3301      	adds	r3, #1
 8004a82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	40da      	lsrs	r2, r3
 8004a8c:	1e13      	subs	r3, r2, #0
 8004a8e:	d000      	beq.n	8004a92 <HAL_GPIO_Init+0x2ba>
 8004a90:	e6aa      	b.n	80047e8 <HAL_GPIO_Init+0x10>
  }
}
 8004a92:	46c0      	nop			@ (mov r8, r8)
 8004a94:	46c0      	nop			@ (mov r8, r8)
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b006      	add	sp, #24
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40021800 	.word	0x40021800
 8004aa0:	50000400 	.word	0x50000400
 8004aa4:	50000800 	.word	0x50000800
 8004aa8:	50000c00 	.word	0x50000c00
 8004aac:	50001000 	.word	0x50001000

08004ab0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	000a      	movs	r2, r1
 8004aba:	1cbb      	adds	r3, r7, #2
 8004abc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	1cba      	adds	r2, r7, #2
 8004ac4:	8812      	ldrh	r2, [r2, #0]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	d004      	beq.n	8004ad4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004aca:	230f      	movs	r3, #15
 8004acc:	18fb      	adds	r3, r7, r3
 8004ace:	2201      	movs	r2, #1
 8004ad0:	701a      	strb	r2, [r3, #0]
 8004ad2:	e003      	b.n	8004adc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ad4:	230f      	movs	r3, #15
 8004ad6:	18fb      	adds	r3, r7, r3
 8004ad8:	2200      	movs	r2, #0
 8004ada:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004adc:	230f      	movs	r3, #15
 8004ade:	18fb      	adds	r3, r7, r3
 8004ae0:	781b      	ldrb	r3, [r3, #0]
}
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	b004      	add	sp, #16
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	0008      	movs	r0, r1
 8004af4:	0011      	movs	r1, r2
 8004af6:	1cbb      	adds	r3, r7, #2
 8004af8:	1c02      	adds	r2, r0, #0
 8004afa:	801a      	strh	r2, [r3, #0]
 8004afc:	1c7b      	adds	r3, r7, #1
 8004afe:	1c0a      	adds	r2, r1, #0
 8004b00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b02:	1c7b      	adds	r3, r7, #1
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d004      	beq.n	8004b14 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b0a:	1cbb      	adds	r3, r7, #2
 8004b0c:	881a      	ldrh	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b12:	e003      	b.n	8004b1c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b14:	1cbb      	adds	r3, r7, #2
 8004b16:	881a      	ldrh	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004b1c:	46c0      	nop			@ (mov r8, r8)
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	b002      	add	sp, #8
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e08f      	b.n	8004c56 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2241      	movs	r2, #65	@ 0x41
 8004b3a:	5c9b      	ldrb	r3, [r3, r2]
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d107      	bne.n	8004b52 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2240      	movs	r2, #64	@ 0x40
 8004b46:	2100      	movs	r1, #0
 8004b48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f7ff fa69 	bl	8004024 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2241      	movs	r2, #65	@ 0x41
 8004b56:	2124      	movs	r1, #36	@ 0x24
 8004b58:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2101      	movs	r1, #1
 8004b66:	438a      	bics	r2, r1
 8004b68:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	493b      	ldr	r1, [pc, #236]	@ (8004c60 <HAL_I2C_Init+0x13c>)
 8004b74:	400a      	ands	r2, r1
 8004b76:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4938      	ldr	r1, [pc, #224]	@ (8004c64 <HAL_I2C_Init+0x140>)
 8004b84:	400a      	ands	r2, r1
 8004b86:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d108      	bne.n	8004ba2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2180      	movs	r1, #128	@ 0x80
 8004b9a:	0209      	lsls	r1, r1, #8
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	609a      	str	r2, [r3, #8]
 8004ba0:	e007      	b.n	8004bb2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2184      	movs	r1, #132	@ 0x84
 8004bac:	0209      	lsls	r1, r1, #8
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d109      	bne.n	8004bce <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2180      	movs	r1, #128	@ 0x80
 8004bc6:	0109      	lsls	r1, r1, #4
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	605a      	str	r2, [r3, #4]
 8004bcc:	e007      	b.n	8004bde <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4923      	ldr	r1, [pc, #140]	@ (8004c68 <HAL_I2C_Init+0x144>)
 8004bda:	400a      	ands	r2, r1
 8004bdc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4920      	ldr	r1, [pc, #128]	@ (8004c6c <HAL_I2C_Init+0x148>)
 8004bea:	430a      	orrs	r2, r1
 8004bec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	491a      	ldr	r1, [pc, #104]	@ (8004c64 <HAL_I2C_Init+0x140>)
 8004bfa:	400a      	ands	r2, r1
 8004bfc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	431a      	orrs	r2, r3
 8004c08:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	430a      	orrs	r2, r1
 8004c16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	69d9      	ldr	r1, [r3, #28]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a1a      	ldr	r2, [r3, #32]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2101      	movs	r1, #1
 8004c34:	430a      	orrs	r2, r1
 8004c36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2241      	movs	r2, #65	@ 0x41
 8004c42:	2120      	movs	r1, #32
 8004c44:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2242      	movs	r2, #66	@ 0x42
 8004c50:	2100      	movs	r1, #0
 8004c52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	0018      	movs	r0, r3
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	b002      	add	sp, #8
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	46c0      	nop			@ (mov r8, r8)
 8004c60:	f0ffffff 	.word	0xf0ffffff
 8004c64:	ffff7fff 	.word	0xffff7fff
 8004c68:	fffff7ff 	.word	0xfffff7ff
 8004c6c:	02008000 	.word	0x02008000

08004c70 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004c70:	b590      	push	{r4, r7, lr}
 8004c72:	b089      	sub	sp, #36	@ 0x24
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	0008      	movs	r0, r1
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	0019      	movs	r1, r3
 8004c7e:	230a      	movs	r3, #10
 8004c80:	18fb      	adds	r3, r7, r3
 8004c82:	1c02      	adds	r2, r0, #0
 8004c84:	801a      	strh	r2, [r3, #0]
 8004c86:	2308      	movs	r3, #8
 8004c88:	18fb      	adds	r3, r7, r3
 8004c8a:	1c0a      	adds	r2, r1, #0
 8004c8c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2241      	movs	r2, #65	@ 0x41
 8004c92:	5c9b      	ldrb	r3, [r3, r2]
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b20      	cmp	r3, #32
 8004c98:	d000      	beq.n	8004c9c <HAL_I2C_Master_Transmit+0x2c>
 8004c9a:	e10a      	b.n	8004eb2 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2240      	movs	r2, #64	@ 0x40
 8004ca0:	5c9b      	ldrb	r3, [r3, r2]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d101      	bne.n	8004caa <HAL_I2C_Master_Transmit+0x3a>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	e104      	b.n	8004eb4 <HAL_I2C_Master_Transmit+0x244>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2240      	movs	r2, #64	@ 0x40
 8004cae:	2101      	movs	r1, #1
 8004cb0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cb2:	f7ff fc99 	bl	80045e8 <HAL_GetTick>
 8004cb6:	0003      	movs	r3, r0
 8004cb8:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cba:	2380      	movs	r3, #128	@ 0x80
 8004cbc:	0219      	lsls	r1, r3, #8
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	2319      	movs	r3, #25
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f000 fa26 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004ccc:	1e03      	subs	r3, r0, #0
 8004cce:	d001      	beq.n	8004cd4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e0ef      	b.n	8004eb4 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2241      	movs	r2, #65	@ 0x41
 8004cd8:	2121      	movs	r1, #33	@ 0x21
 8004cda:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2242      	movs	r2, #66	@ 0x42
 8004ce0:	2110      	movs	r1, #16
 8004ce2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2208      	movs	r2, #8
 8004cf4:	18ba      	adds	r2, r7, r2
 8004cf6:	8812      	ldrh	r2, [r2, #0]
 8004cf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	2bff      	cmp	r3, #255	@ 0xff
 8004d08:	d906      	bls.n	8004d18 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	22ff      	movs	r2, #255	@ 0xff
 8004d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004d10:	2380      	movs	r3, #128	@ 0x80
 8004d12:	045b      	lsls	r3, r3, #17
 8004d14:	617b      	str	r3, [r7, #20]
 8004d16:	e007      	b.n	8004d28 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004d22:	2380      	movs	r3, #128	@ 0x80
 8004d24:	049b      	lsls	r3, r3, #18
 8004d26:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d027      	beq.n	8004d80 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d34:	781a      	ldrb	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	3301      	adds	r3, #1
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	697c      	ldr	r4, [r7, #20]
 8004d6c:	230a      	movs	r3, #10
 8004d6e:	18fb      	adds	r3, r7, r3
 8004d70:	8819      	ldrh	r1, [r3, #0]
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	4b51      	ldr	r3, [pc, #324]	@ (8004ebc <HAL_I2C_Master_Transmit+0x24c>)
 8004d76:	9300      	str	r3, [sp, #0]
 8004d78:	0023      	movs	r3, r4
 8004d7a:	f000 fc45 	bl	8005608 <I2C_TransferConfig>
 8004d7e:	e06f      	b.n	8004e60 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	697c      	ldr	r4, [r7, #20]
 8004d88:	230a      	movs	r3, #10
 8004d8a:	18fb      	adds	r3, r7, r3
 8004d8c:	8819      	ldrh	r1, [r3, #0]
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	4b4a      	ldr	r3, [pc, #296]	@ (8004ebc <HAL_I2C_Master_Transmit+0x24c>)
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	0023      	movs	r3, r4
 8004d96:	f000 fc37 	bl	8005608 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004d9a:	e061      	b.n	8004e60 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	0018      	movs	r0, r3
 8004da4:	f000 fa10 	bl	80051c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004da8:	1e03      	subs	r3, r0, #0
 8004daa:	d001      	beq.n	8004db0 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e081      	b.n	8004eb4 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	781a      	ldrb	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d03a      	beq.n	8004e60 <HAL_I2C_Master_Transmit+0x1f0>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d136      	bne.n	8004e60 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004df2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	9300      	str	r3, [sp, #0]
 8004dfa:	0013      	movs	r3, r2
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	2180      	movs	r1, #128	@ 0x80
 8004e00:	f000 f98a 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004e04:	1e03      	subs	r3, r0, #0
 8004e06:	d001      	beq.n	8004e0c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e053      	b.n	8004eb4 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2bff      	cmp	r3, #255	@ 0xff
 8004e14:	d911      	bls.n	8004e3a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	22ff      	movs	r2, #255	@ 0xff
 8004e1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	2380      	movs	r3, #128	@ 0x80
 8004e24:	045c      	lsls	r4, r3, #17
 8004e26:	230a      	movs	r3, #10
 8004e28:	18fb      	adds	r3, r7, r3
 8004e2a:	8819      	ldrh	r1, [r3, #0]
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	2300      	movs	r3, #0
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	0023      	movs	r3, r4
 8004e34:	f000 fbe8 	bl	8005608 <I2C_TransferConfig>
 8004e38:	e012      	b.n	8004e60 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	2380      	movs	r3, #128	@ 0x80
 8004e4c:	049c      	lsls	r4, r3, #18
 8004e4e:	230a      	movs	r3, #10
 8004e50:	18fb      	adds	r3, r7, r3
 8004e52:	8819      	ldrh	r1, [r3, #0]
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	2300      	movs	r3, #0
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	0023      	movs	r3, r4
 8004e5c:	f000 fbd4 	bl	8005608 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d198      	bne.n	8004d9c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	0018      	movs	r0, r3
 8004e72:	f000 f9ef 	bl	8005254 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e76:	1e03      	subs	r3, r0, #0
 8004e78:	d001      	beq.n	8004e7e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e01a      	b.n	8004eb4 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2220      	movs	r2, #32
 8004e84:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	490b      	ldr	r1, [pc, #44]	@ (8004ec0 <HAL_I2C_Master_Transmit+0x250>)
 8004e92:	400a      	ands	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2241      	movs	r2, #65	@ 0x41
 8004e9a:	2120      	movs	r1, #32
 8004e9c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2242      	movs	r2, #66	@ 0x42
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2240      	movs	r2, #64	@ 0x40
 8004eaa:	2100      	movs	r1, #0
 8004eac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e000      	b.n	8004eb4 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8004eb2:	2302      	movs	r3, #2
  }
}
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b007      	add	sp, #28
 8004eba:	bd90      	pop	{r4, r7, pc}
 8004ebc:	80002000 	.word	0x80002000
 8004ec0:	fe00e800 	.word	0xfe00e800

08004ec4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004ec4:	b590      	push	{r4, r7, lr}
 8004ec6:	b089      	sub	sp, #36	@ 0x24
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	0008      	movs	r0, r1
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	0019      	movs	r1, r3
 8004ed2:	230a      	movs	r3, #10
 8004ed4:	18fb      	adds	r3, r7, r3
 8004ed6:	1c02      	adds	r2, r0, #0
 8004ed8:	801a      	strh	r2, [r3, #0]
 8004eda:	2308      	movs	r3, #8
 8004edc:	18fb      	adds	r3, r7, r3
 8004ede:	1c0a      	adds	r2, r1, #0
 8004ee0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2241      	movs	r2, #65	@ 0x41
 8004ee6:	5c9b      	ldrb	r3, [r3, r2]
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b20      	cmp	r3, #32
 8004eec:	d000      	beq.n	8004ef0 <HAL_I2C_Master_Receive+0x2c>
 8004eee:	e0e8      	b.n	80050c2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2240      	movs	r2, #64	@ 0x40
 8004ef4:	5c9b      	ldrb	r3, [r3, r2]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <HAL_I2C_Master_Receive+0x3a>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e0e2      	b.n	80050c4 <HAL_I2C_Master_Receive+0x200>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2240      	movs	r2, #64	@ 0x40
 8004f02:	2101      	movs	r1, #1
 8004f04:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f06:	f7ff fb6f 	bl	80045e8 <HAL_GetTick>
 8004f0a:	0003      	movs	r3, r0
 8004f0c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f0e:	2380      	movs	r3, #128	@ 0x80
 8004f10:	0219      	lsls	r1, r3, #8
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	2319      	movs	r3, #25
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f000 f8fc 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8004f20:	1e03      	subs	r3, r0, #0
 8004f22:	d001      	beq.n	8004f28 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e0cd      	b.n	80050c4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2241      	movs	r2, #65	@ 0x41
 8004f2c:	2122      	movs	r1, #34	@ 0x22
 8004f2e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2242      	movs	r2, #66	@ 0x42
 8004f34:	2110      	movs	r1, #16
 8004f36:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2208      	movs	r2, #8
 8004f48:	18ba      	adds	r2, r7, r2
 8004f4a:	8812      	ldrh	r2, [r2, #0]
 8004f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	2bff      	cmp	r3, #255	@ 0xff
 8004f5c:	d911      	bls.n	8004f82 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	22ff      	movs	r2, #255	@ 0xff
 8004f62:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	2380      	movs	r3, #128	@ 0x80
 8004f6c:	045c      	lsls	r4, r3, #17
 8004f6e:	230a      	movs	r3, #10
 8004f70:	18fb      	adds	r3, r7, r3
 8004f72:	8819      	ldrh	r1, [r3, #0]
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	4b55      	ldr	r3, [pc, #340]	@ (80050cc <HAL_I2C_Master_Receive+0x208>)
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	0023      	movs	r3, r4
 8004f7c:	f000 fb44 	bl	8005608 <I2C_TransferConfig>
 8004f80:	e076      	b.n	8005070 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	2380      	movs	r3, #128	@ 0x80
 8004f94:	049c      	lsls	r4, r3, #18
 8004f96:	230a      	movs	r3, #10
 8004f98:	18fb      	adds	r3, r7, r3
 8004f9a:	8819      	ldrh	r1, [r3, #0]
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	4b4b      	ldr	r3, [pc, #300]	@ (80050cc <HAL_I2C_Master_Receive+0x208>)
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	0023      	movs	r3, r4
 8004fa4:	f000 fb30 	bl	8005608 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004fa8:	e062      	b.n	8005070 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	f000 f993 	bl	80052dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fb6:	1e03      	subs	r3, r0, #0
 8004fb8:	d001      	beq.n	8004fbe <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e082      	b.n	80050c4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d03a      	beq.n	8005070 <HAL_I2C_Master_Receive+0x1ac>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d136      	bne.n	8005070 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005002:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	0013      	movs	r3, r2
 800500c:	2200      	movs	r2, #0
 800500e:	2180      	movs	r1, #128	@ 0x80
 8005010:	f000 f882 	bl	8005118 <I2C_WaitOnFlagUntilTimeout>
 8005014:	1e03      	subs	r3, r0, #0
 8005016:	d001      	beq.n	800501c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e053      	b.n	80050c4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005020:	b29b      	uxth	r3, r3
 8005022:	2bff      	cmp	r3, #255	@ 0xff
 8005024:	d911      	bls.n	800504a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	22ff      	movs	r2, #255	@ 0xff
 800502a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005030:	b2da      	uxtb	r2, r3
 8005032:	2380      	movs	r3, #128	@ 0x80
 8005034:	045c      	lsls	r4, r3, #17
 8005036:	230a      	movs	r3, #10
 8005038:	18fb      	adds	r3, r7, r3
 800503a:	8819      	ldrh	r1, [r3, #0]
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	2300      	movs	r3, #0
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	0023      	movs	r3, r4
 8005044:	f000 fae0 	bl	8005608 <I2C_TransferConfig>
 8005048:	e012      	b.n	8005070 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800504e:	b29a      	uxth	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005058:	b2da      	uxtb	r2, r3
 800505a:	2380      	movs	r3, #128	@ 0x80
 800505c:	049c      	lsls	r4, r3, #18
 800505e:	230a      	movs	r3, #10
 8005060:	18fb      	adds	r3, r7, r3
 8005062:	8819      	ldrh	r1, [r3, #0]
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	2300      	movs	r3, #0
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	0023      	movs	r3, r4
 800506c:	f000 facc 	bl	8005608 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d197      	bne.n	8004faa <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	0018      	movs	r0, r3
 8005082:	f000 f8e7 	bl	8005254 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005086:	1e03      	subs	r3, r0, #0
 8005088:	d001      	beq.n	800508e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e01a      	b.n	80050c4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2220      	movs	r2, #32
 8005094:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	490b      	ldr	r1, [pc, #44]	@ (80050d0 <HAL_I2C_Master_Receive+0x20c>)
 80050a2:	400a      	ands	r2, r1
 80050a4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2241      	movs	r2, #65	@ 0x41
 80050aa:	2120      	movs	r1, #32
 80050ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2242      	movs	r2, #66	@ 0x42
 80050b2:	2100      	movs	r1, #0
 80050b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2240      	movs	r2, #64	@ 0x40
 80050ba:	2100      	movs	r1, #0
 80050bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	e000      	b.n	80050c4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80050c2:	2302      	movs	r3, #2
  }
}
 80050c4:	0018      	movs	r0, r3
 80050c6:	46bd      	mov	sp, r7
 80050c8:	b007      	add	sp, #28
 80050ca:	bd90      	pop	{r4, r7, pc}
 80050cc:	80002400 	.word	0x80002400
 80050d0:	fe00e800 	.word	0xfe00e800

080050d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	2202      	movs	r2, #2
 80050e4:	4013      	ands	r3, r2
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d103      	bne.n	80050f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2200      	movs	r2, #0
 80050f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	2201      	movs	r2, #1
 80050fa:	4013      	ands	r3, r2
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d007      	beq.n	8005110 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2101      	movs	r1, #1
 800510c:	430a      	orrs	r2, r1
 800510e:	619a      	str	r2, [r3, #24]
  }
}
 8005110:	46c0      	nop			@ (mov r8, r8)
 8005112:	46bd      	mov	sp, r7
 8005114:	b002      	add	sp, #8
 8005116:	bd80      	pop	{r7, pc}

08005118 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	1dfb      	adds	r3, r7, #7
 8005126:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005128:	e03a      	b.n	80051a0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	6839      	ldr	r1, [r7, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	0018      	movs	r0, r3
 8005132:	f000 f971 	bl	8005418 <I2C_IsErrorOccurred>
 8005136:	1e03      	subs	r3, r0, #0
 8005138:	d001      	beq.n	800513e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e040      	b.n	80051c0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	3301      	adds	r3, #1
 8005142:	d02d      	beq.n	80051a0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005144:	f7ff fa50 	bl	80045e8 <HAL_GetTick>
 8005148:	0002      	movs	r2, r0
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	429a      	cmp	r2, r3
 8005152:	d302      	bcc.n	800515a <I2C_WaitOnFlagUntilTimeout+0x42>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d122      	bne.n	80051a0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	4013      	ands	r3, r2
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	425a      	negs	r2, r3
 800516a:	4153      	adcs	r3, r2
 800516c:	b2db      	uxtb	r3, r3
 800516e:	001a      	movs	r2, r3
 8005170:	1dfb      	adds	r3, r7, #7
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	429a      	cmp	r2, r3
 8005176:	d113      	bne.n	80051a0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800517c:	2220      	movs	r2, #32
 800517e:	431a      	orrs	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2241      	movs	r2, #65	@ 0x41
 8005188:	2120      	movs	r1, #32
 800518a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2242      	movs	r2, #66	@ 0x42
 8005190:	2100      	movs	r1, #0
 8005192:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2240      	movs	r2, #64	@ 0x40
 8005198:	2100      	movs	r1, #0
 800519a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e00f      	b.n	80051c0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	4013      	ands	r3, r2
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	425a      	negs	r2, r3
 80051b0:	4153      	adcs	r3, r2
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	001a      	movs	r2, r3
 80051b6:	1dfb      	adds	r3, r7, #7
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d0b5      	beq.n	800512a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	0018      	movs	r0, r3
 80051c2:	46bd      	mov	sp, r7
 80051c4:	b004      	add	sp, #16
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051d4:	e032      	b.n	800523c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	68b9      	ldr	r1, [r7, #8]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	0018      	movs	r0, r3
 80051de:	f000 f91b 	bl	8005418 <I2C_IsErrorOccurred>
 80051e2:	1e03      	subs	r3, r0, #0
 80051e4:	d001      	beq.n	80051ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e030      	b.n	800524c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	3301      	adds	r3, #1
 80051ee:	d025      	beq.n	800523c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051f0:	f7ff f9fa 	bl	80045e8 <HAL_GetTick>
 80051f4:	0002      	movs	r2, r0
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d302      	bcc.n	8005206 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d11a      	bne.n	800523c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	2202      	movs	r2, #2
 800520e:	4013      	ands	r3, r2
 8005210:	2b02      	cmp	r3, #2
 8005212:	d013      	beq.n	800523c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005218:	2220      	movs	r2, #32
 800521a:	431a      	orrs	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2241      	movs	r2, #65	@ 0x41
 8005224:	2120      	movs	r1, #32
 8005226:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2242      	movs	r2, #66	@ 0x42
 800522c:	2100      	movs	r1, #0
 800522e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2240      	movs	r2, #64	@ 0x40
 8005234:	2100      	movs	r1, #0
 8005236:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e007      	b.n	800524c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	2202      	movs	r2, #2
 8005244:	4013      	ands	r3, r2
 8005246:	2b02      	cmp	r3, #2
 8005248:	d1c5      	bne.n	80051d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	0018      	movs	r0, r3
 800524e:	46bd      	mov	sp, r7
 8005250:	b004      	add	sp, #16
 8005252:	bd80      	pop	{r7, pc}

08005254 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005260:	e02f      	b.n	80052c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	0018      	movs	r0, r3
 800526a:	f000 f8d5 	bl	8005418 <I2C_IsErrorOccurred>
 800526e:	1e03      	subs	r3, r0, #0
 8005270:	d001      	beq.n	8005276 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e02d      	b.n	80052d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005276:	f7ff f9b7 	bl	80045e8 <HAL_GetTick>
 800527a:	0002      	movs	r2, r0
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	429a      	cmp	r2, r3
 8005284:	d302      	bcc.n	800528c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d11a      	bne.n	80052c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	2220      	movs	r2, #32
 8005294:	4013      	ands	r3, r2
 8005296:	2b20      	cmp	r3, #32
 8005298:	d013      	beq.n	80052c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800529e:	2220      	movs	r2, #32
 80052a0:	431a      	orrs	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2241      	movs	r2, #65	@ 0x41
 80052aa:	2120      	movs	r1, #32
 80052ac:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2242      	movs	r2, #66	@ 0x42
 80052b2:	2100      	movs	r1, #0
 80052b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2240      	movs	r2, #64	@ 0x40
 80052ba:	2100      	movs	r1, #0
 80052bc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e007      	b.n	80052d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	2220      	movs	r2, #32
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b20      	cmp	r3, #32
 80052ce:	d1c8      	bne.n	8005262 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	0018      	movs	r0, r3
 80052d4:	46bd      	mov	sp, r7
 80052d6:	b004      	add	sp, #16
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052e8:	2317      	movs	r3, #23
 80052ea:	18fb      	adds	r3, r7, r3
 80052ec:	2200      	movs	r2, #0
 80052ee:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80052f0:	e07b      	b.n	80053ea <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	68b9      	ldr	r1, [r7, #8]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	0018      	movs	r0, r3
 80052fa:	f000 f88d 	bl	8005418 <I2C_IsErrorOccurred>
 80052fe:	1e03      	subs	r3, r0, #0
 8005300:	d003      	beq.n	800530a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8005302:	2317      	movs	r3, #23
 8005304:	18fb      	adds	r3, r7, r3
 8005306:	2201      	movs	r2, #1
 8005308:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	2220      	movs	r2, #32
 8005312:	4013      	ands	r3, r2
 8005314:	2b20      	cmp	r3, #32
 8005316:	d140      	bne.n	800539a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8005318:	2117      	movs	r1, #23
 800531a:	187b      	adds	r3, r7, r1
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d13b      	bne.n	800539a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	2204      	movs	r2, #4
 800532a:	4013      	ands	r3, r2
 800532c:	2b04      	cmp	r3, #4
 800532e:	d106      	bne.n	800533e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005338:	187b      	adds	r3, r7, r1
 800533a:	2200      	movs	r2, #0
 800533c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	2210      	movs	r2, #16
 8005346:	4013      	ands	r3, r2
 8005348:	2b10      	cmp	r3, #16
 800534a:	d123      	bne.n	8005394 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2210      	movs	r2, #16
 8005352:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2204      	movs	r2, #4
 8005358:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2220      	movs	r2, #32
 8005360:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4929      	ldr	r1, [pc, #164]	@ (8005414 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800536e:	400a      	ands	r2, r1
 8005370:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2241      	movs	r2, #65	@ 0x41
 8005376:	2120      	movs	r1, #32
 8005378:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2242      	movs	r2, #66	@ 0x42
 800537e:	2100      	movs	r1, #0
 8005380:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2240      	movs	r2, #64	@ 0x40
 8005386:	2100      	movs	r1, #0
 8005388:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800538a:	2317      	movs	r3, #23
 800538c:	18fb      	adds	r3, r7, r3
 800538e:	2201      	movs	r2, #1
 8005390:	701a      	strb	r2, [r3, #0]
 8005392:	e002      	b.n	800539a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800539a:	f7ff f925 	bl	80045e8 <HAL_GetTick>
 800539e:	0002      	movs	r2, r0
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d302      	bcc.n	80053b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d11c      	bne.n	80053ea <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80053b0:	2017      	movs	r0, #23
 80053b2:	183b      	adds	r3, r7, r0
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d117      	bne.n	80053ea <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	2204      	movs	r2, #4
 80053c2:	4013      	ands	r3, r2
 80053c4:	2b04      	cmp	r3, #4
 80053c6:	d010      	beq.n	80053ea <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053cc:	2220      	movs	r2, #32
 80053ce:	431a      	orrs	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2241      	movs	r2, #65	@ 0x41
 80053d8:	2120      	movs	r1, #32
 80053da:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2240      	movs	r2, #64	@ 0x40
 80053e0:	2100      	movs	r1, #0
 80053e2:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80053e4:	183b      	adds	r3, r7, r0
 80053e6:	2201      	movs	r2, #1
 80053e8:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	2204      	movs	r2, #4
 80053f2:	4013      	ands	r3, r2
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d005      	beq.n	8005404 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80053f8:	2317      	movs	r3, #23
 80053fa:	18fb      	adds	r3, r7, r3
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d100      	bne.n	8005404 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8005402:	e776      	b.n	80052f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8005404:	2317      	movs	r3, #23
 8005406:	18fb      	adds	r3, r7, r3
 8005408:	781b      	ldrb	r3, [r3, #0]
}
 800540a:	0018      	movs	r0, r3
 800540c:	46bd      	mov	sp, r7
 800540e:	b006      	add	sp, #24
 8005410:	bd80      	pop	{r7, pc}
 8005412:	46c0      	nop			@ (mov r8, r8)
 8005414:	fe00e800 	.word	0xfe00e800

08005418 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08a      	sub	sp, #40	@ 0x28
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005424:	2327      	movs	r3, #39	@ 0x27
 8005426:	18fb      	adds	r3, r7, r3
 8005428:	2200      	movs	r2, #0
 800542a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	2210      	movs	r2, #16
 8005440:	4013      	ands	r3, r2
 8005442:	d100      	bne.n	8005446 <I2C_IsErrorOccurred+0x2e>
 8005444:	e079      	b.n	800553a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2210      	movs	r2, #16
 800544c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800544e:	e057      	b.n	8005500 <I2C_IsErrorOccurred+0xe8>
 8005450:	2227      	movs	r2, #39	@ 0x27
 8005452:	18bb      	adds	r3, r7, r2
 8005454:	18ba      	adds	r2, r7, r2
 8005456:	7812      	ldrb	r2, [r2, #0]
 8005458:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	3301      	adds	r3, #1
 800545e:	d04f      	beq.n	8005500 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005460:	f7ff f8c2 	bl	80045e8 <HAL_GetTick>
 8005464:	0002      	movs	r2, r0
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	429a      	cmp	r2, r3
 800546e:	d302      	bcc.n	8005476 <I2C_IsErrorOccurred+0x5e>
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d144      	bne.n	8005500 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	2380      	movs	r3, #128	@ 0x80
 800547e:	01db      	lsls	r3, r3, #7
 8005480:	4013      	ands	r3, r2
 8005482:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005484:	2013      	movs	r0, #19
 8005486:	183b      	adds	r3, r7, r0
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	2142      	movs	r1, #66	@ 0x42
 800548c:	5c52      	ldrb	r2, [r2, r1]
 800548e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	2380      	movs	r3, #128	@ 0x80
 8005498:	021b      	lsls	r3, r3, #8
 800549a:	401a      	ands	r2, r3
 800549c:	2380      	movs	r3, #128	@ 0x80
 800549e:	021b      	lsls	r3, r3, #8
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d126      	bne.n	80054f2 <I2C_IsErrorOccurred+0xda>
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	2380      	movs	r3, #128	@ 0x80
 80054a8:	01db      	lsls	r3, r3, #7
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d021      	beq.n	80054f2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80054ae:	183b      	adds	r3, r7, r0
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	2b20      	cmp	r3, #32
 80054b4:	d01d      	beq.n	80054f2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2180      	movs	r1, #128	@ 0x80
 80054c2:	01c9      	lsls	r1, r1, #7
 80054c4:	430a      	orrs	r2, r1
 80054c6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80054c8:	f7ff f88e 	bl	80045e8 <HAL_GetTick>
 80054cc:	0003      	movs	r3, r0
 80054ce:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054d0:	e00f      	b.n	80054f2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80054d2:	f7ff f889 	bl	80045e8 <HAL_GetTick>
 80054d6:	0002      	movs	r2, r0
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b19      	cmp	r3, #25
 80054de:	d908      	bls.n	80054f2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	2220      	movs	r2, #32
 80054e4:	4313      	orrs	r3, r2
 80054e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80054e8:	2327      	movs	r3, #39	@ 0x27
 80054ea:	18fb      	adds	r3, r7, r3
 80054ec:	2201      	movs	r2, #1
 80054ee:	701a      	strb	r2, [r3, #0]

              break;
 80054f0:	e006      	b.n	8005500 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	2220      	movs	r2, #32
 80054fa:	4013      	ands	r3, r2
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d1e8      	bne.n	80054d2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	2220      	movs	r2, #32
 8005508:	4013      	ands	r3, r2
 800550a:	2b20      	cmp	r3, #32
 800550c:	d004      	beq.n	8005518 <I2C_IsErrorOccurred+0x100>
 800550e:	2327      	movs	r3, #39	@ 0x27
 8005510:	18fb      	adds	r3, r7, r3
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d09b      	beq.n	8005450 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005518:	2327      	movs	r3, #39	@ 0x27
 800551a:	18fb      	adds	r3, r7, r3
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d103      	bne.n	800552a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2220      	movs	r2, #32
 8005528:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	2204      	movs	r2, #4
 800552e:	4313      	orrs	r3, r2
 8005530:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005532:	2327      	movs	r3, #39	@ 0x27
 8005534:	18fb      	adds	r3, r7, r3
 8005536:	2201      	movs	r2, #1
 8005538:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	2380      	movs	r3, #128	@ 0x80
 8005546:	005b      	lsls	r3, r3, #1
 8005548:	4013      	ands	r3, r2
 800554a:	d00c      	beq.n	8005566 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	2201      	movs	r2, #1
 8005550:	4313      	orrs	r3, r2
 8005552:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2280      	movs	r2, #128	@ 0x80
 800555a:	0052      	lsls	r2, r2, #1
 800555c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800555e:	2327      	movs	r3, #39	@ 0x27
 8005560:	18fb      	adds	r3, r7, r3
 8005562:	2201      	movs	r2, #1
 8005564:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	2380      	movs	r3, #128	@ 0x80
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	4013      	ands	r3, r2
 800556e:	d00c      	beq.n	800558a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	2208      	movs	r2, #8
 8005574:	4313      	orrs	r3, r2
 8005576:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2280      	movs	r2, #128	@ 0x80
 800557e:	00d2      	lsls	r2, r2, #3
 8005580:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005582:	2327      	movs	r3, #39	@ 0x27
 8005584:	18fb      	adds	r3, r7, r3
 8005586:	2201      	movs	r2, #1
 8005588:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	2380      	movs	r3, #128	@ 0x80
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4013      	ands	r3, r2
 8005592:	d00c      	beq.n	80055ae <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	2202      	movs	r2, #2
 8005598:	4313      	orrs	r3, r2
 800559a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2280      	movs	r2, #128	@ 0x80
 80055a2:	0092      	lsls	r2, r2, #2
 80055a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055a6:	2327      	movs	r3, #39	@ 0x27
 80055a8:	18fb      	adds	r3, r7, r3
 80055aa:	2201      	movs	r2, #1
 80055ac:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80055ae:	2327      	movs	r3, #39	@ 0x27
 80055b0:	18fb      	adds	r3, r7, r3
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01d      	beq.n	80055f4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	0018      	movs	r0, r3
 80055bc:	f7ff fd8a 	bl	80050d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	490e      	ldr	r1, [pc, #56]	@ (8005604 <I2C_IsErrorOccurred+0x1ec>)
 80055cc:	400a      	ands	r2, r1
 80055ce:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	431a      	orrs	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2241      	movs	r2, #65	@ 0x41
 80055e0:	2120      	movs	r1, #32
 80055e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2242      	movs	r2, #66	@ 0x42
 80055e8:	2100      	movs	r1, #0
 80055ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2240      	movs	r2, #64	@ 0x40
 80055f0:	2100      	movs	r1, #0
 80055f2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80055f4:	2327      	movs	r3, #39	@ 0x27
 80055f6:	18fb      	adds	r3, r7, r3
 80055f8:	781b      	ldrb	r3, [r3, #0]
}
 80055fa:	0018      	movs	r0, r3
 80055fc:	46bd      	mov	sp, r7
 80055fe:	b00a      	add	sp, #40	@ 0x28
 8005600:	bd80      	pop	{r7, pc}
 8005602:	46c0      	nop			@ (mov r8, r8)
 8005604:	fe00e800 	.word	0xfe00e800

08005608 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005608:	b590      	push	{r4, r7, lr}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	0008      	movs	r0, r1
 8005612:	0011      	movs	r1, r2
 8005614:	607b      	str	r3, [r7, #4]
 8005616:	240a      	movs	r4, #10
 8005618:	193b      	adds	r3, r7, r4
 800561a:	1c02      	adds	r2, r0, #0
 800561c:	801a      	strh	r2, [r3, #0]
 800561e:	2009      	movs	r0, #9
 8005620:	183b      	adds	r3, r7, r0
 8005622:	1c0a      	adds	r2, r1, #0
 8005624:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005626:	193b      	adds	r3, r7, r4
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	059b      	lsls	r3, r3, #22
 800562c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800562e:	183b      	adds	r3, r7, r0
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	0419      	lsls	r1, r3, #16
 8005634:	23ff      	movs	r3, #255	@ 0xff
 8005636:	041b      	lsls	r3, r3, #16
 8005638:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800563a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005642:	4313      	orrs	r3, r2
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	085b      	lsrs	r3, r3, #1
 8005648:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005652:	0d51      	lsrs	r1, r2, #21
 8005654:	2280      	movs	r2, #128	@ 0x80
 8005656:	00d2      	lsls	r2, r2, #3
 8005658:	400a      	ands	r2, r1
 800565a:	4907      	ldr	r1, [pc, #28]	@ (8005678 <I2C_TransferConfig+0x70>)
 800565c:	430a      	orrs	r2, r1
 800565e:	43d2      	mvns	r2, r2
 8005660:	401a      	ands	r2, r3
 8005662:	0011      	movs	r1, r2
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	430a      	orrs	r2, r1
 800566c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800566e:	46c0      	nop			@ (mov r8, r8)
 8005670:	46bd      	mov	sp, r7
 8005672:	b007      	add	sp, #28
 8005674:	bd90      	pop	{r4, r7, pc}
 8005676:	46c0      	nop			@ (mov r8, r8)
 8005678:	03ff63ff 	.word	0x03ff63ff

0800567c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2241      	movs	r2, #65	@ 0x41
 800568a:	5c9b      	ldrb	r3, [r3, r2]
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b20      	cmp	r3, #32
 8005690:	d138      	bne.n	8005704 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2240      	movs	r2, #64	@ 0x40
 8005696:	5c9b      	ldrb	r3, [r3, r2]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800569c:	2302      	movs	r3, #2
 800569e:	e032      	b.n	8005706 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2240      	movs	r2, #64	@ 0x40
 80056a4:	2101      	movs	r1, #1
 80056a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2241      	movs	r2, #65	@ 0x41
 80056ac:	2124      	movs	r1, #36	@ 0x24
 80056ae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2101      	movs	r1, #1
 80056bc:	438a      	bics	r2, r1
 80056be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4911      	ldr	r1, [pc, #68]	@ (8005710 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80056cc:	400a      	ands	r2, r1
 80056ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6819      	ldr	r1, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2101      	movs	r1, #1
 80056ec:	430a      	orrs	r2, r1
 80056ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2241      	movs	r2, #65	@ 0x41
 80056f4:	2120      	movs	r1, #32
 80056f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2240      	movs	r2, #64	@ 0x40
 80056fc:	2100      	movs	r1, #0
 80056fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	e000      	b.n	8005706 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005704:	2302      	movs	r3, #2
  }
}
 8005706:	0018      	movs	r0, r3
 8005708:	46bd      	mov	sp, r7
 800570a:	b002      	add	sp, #8
 800570c:	bd80      	pop	{r7, pc}
 800570e:	46c0      	nop			@ (mov r8, r8)
 8005710:	ffffefff 	.word	0xffffefff

08005714 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2241      	movs	r2, #65	@ 0x41
 8005722:	5c9b      	ldrb	r3, [r3, r2]
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b20      	cmp	r3, #32
 8005728:	d139      	bne.n	800579e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2240      	movs	r2, #64	@ 0x40
 800572e:	5c9b      	ldrb	r3, [r3, r2]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d101      	bne.n	8005738 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005734:	2302      	movs	r3, #2
 8005736:	e033      	b.n	80057a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2240      	movs	r2, #64	@ 0x40
 800573c:	2101      	movs	r1, #1
 800573e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2241      	movs	r2, #65	@ 0x41
 8005744:	2124      	movs	r1, #36	@ 0x24
 8005746:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2101      	movs	r1, #1
 8005754:	438a      	bics	r2, r1
 8005756:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4a11      	ldr	r2, [pc, #68]	@ (80057a8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005764:	4013      	ands	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	021b      	lsls	r3, r3, #8
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4313      	orrs	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2101      	movs	r1, #1
 8005786:	430a      	orrs	r2, r1
 8005788:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2241      	movs	r2, #65	@ 0x41
 800578e:	2120      	movs	r1, #32
 8005790:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2240      	movs	r2, #64	@ 0x40
 8005796:	2100      	movs	r1, #0
 8005798:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	e000      	b.n	80057a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800579e:	2302      	movs	r3, #2
  }
}
 80057a0:	0018      	movs	r0, r3
 80057a2:	46bd      	mov	sp, r7
 80057a4:	b004      	add	sp, #16
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	fffff0ff 	.word	0xfffff0ff

080057ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80057b4:	4b19      	ldr	r3, [pc, #100]	@ (800581c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a19      	ldr	r2, [pc, #100]	@ (8005820 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80057ba:	4013      	ands	r3, r2
 80057bc:	0019      	movs	r1, r3
 80057be:	4b17      	ldr	r3, [pc, #92]	@ (800581c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	2380      	movs	r3, #128	@ 0x80
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d11f      	bne.n	8005810 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80057d0:	4b14      	ldr	r3, [pc, #80]	@ (8005824 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	0013      	movs	r3, r2
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	189b      	adds	r3, r3, r2
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	4912      	ldr	r1, [pc, #72]	@ (8005828 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80057de:	0018      	movs	r0, r3
 80057e0:	f7fa fca2 	bl	8000128 <__udivsi3>
 80057e4:	0003      	movs	r3, r0
 80057e6:	3301      	adds	r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057ea:	e008      	b.n	80057fe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3b01      	subs	r3, #1
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	e001      	b.n	80057fe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e009      	b.n	8005812 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057fe:	4b07      	ldr	r3, [pc, #28]	@ (800581c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005800:	695a      	ldr	r2, [r3, #20]
 8005802:	2380      	movs	r3, #128	@ 0x80
 8005804:	00db      	lsls	r3, r3, #3
 8005806:	401a      	ands	r2, r3
 8005808:	2380      	movs	r3, #128	@ 0x80
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	429a      	cmp	r2, r3
 800580e:	d0ed      	beq.n	80057ec <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	0018      	movs	r0, r3
 8005814:	46bd      	mov	sp, r7
 8005816:	b004      	add	sp, #16
 8005818:	bd80      	pop	{r7, pc}
 800581a:	46c0      	nop			@ (mov r8, r8)
 800581c:	40007000 	.word	0x40007000
 8005820:	fffff9ff 	.word	0xfffff9ff
 8005824:	200009e4 	.word	0x200009e4
 8005828:	000f4240 	.word	0x000f4240

0800582c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8005830:	4b03      	ldr	r3, [pc, #12]	@ (8005840 <LL_RCC_GetAPB1Prescaler+0x14>)
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	23e0      	movs	r3, #224	@ 0xe0
 8005836:	01db      	lsls	r3, r3, #7
 8005838:	4013      	ands	r3, r2
}
 800583a:	0018      	movs	r0, r3
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	40021000 	.word	0x40021000

08005844 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b088      	sub	sp, #32
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d102      	bne.n	8005858 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	f000 fb50 	bl	8005ef8 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2201      	movs	r2, #1
 800585e:	4013      	ands	r3, r2
 8005860:	d100      	bne.n	8005864 <HAL_RCC_OscConfig+0x20>
 8005862:	e07c      	b.n	800595e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005864:	4bc3      	ldr	r3, [pc, #780]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	2238      	movs	r2, #56	@ 0x38
 800586a:	4013      	ands	r3, r2
 800586c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800586e:	4bc1      	ldr	r3, [pc, #772]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	2203      	movs	r2, #3
 8005874:	4013      	ands	r3, r2
 8005876:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	2b10      	cmp	r3, #16
 800587c:	d102      	bne.n	8005884 <HAL_RCC_OscConfig+0x40>
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2b03      	cmp	r3, #3
 8005882:	d002      	beq.n	800588a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	2b08      	cmp	r3, #8
 8005888:	d10b      	bne.n	80058a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800588a:	4bba      	ldr	r3, [pc, #744]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	2380      	movs	r3, #128	@ 0x80
 8005890:	029b      	lsls	r3, r3, #10
 8005892:	4013      	ands	r3, r2
 8005894:	d062      	beq.n	800595c <HAL_RCC_OscConfig+0x118>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d15e      	bne.n	800595c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e32a      	b.n	8005ef8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	2380      	movs	r3, #128	@ 0x80
 80058a8:	025b      	lsls	r3, r3, #9
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d107      	bne.n	80058be <HAL_RCC_OscConfig+0x7a>
 80058ae:	4bb1      	ldr	r3, [pc, #708]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	4bb0      	ldr	r3, [pc, #704]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 80058b4:	2180      	movs	r1, #128	@ 0x80
 80058b6:	0249      	lsls	r1, r1, #9
 80058b8:	430a      	orrs	r2, r1
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	e020      	b.n	8005900 <HAL_RCC_OscConfig+0xbc>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	23a0      	movs	r3, #160	@ 0xa0
 80058c4:	02db      	lsls	r3, r3, #11
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d10e      	bne.n	80058e8 <HAL_RCC_OscConfig+0xa4>
 80058ca:	4baa      	ldr	r3, [pc, #680]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	4ba9      	ldr	r3, [pc, #676]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 80058d0:	2180      	movs	r1, #128	@ 0x80
 80058d2:	02c9      	lsls	r1, r1, #11
 80058d4:	430a      	orrs	r2, r1
 80058d6:	601a      	str	r2, [r3, #0]
 80058d8:	4ba6      	ldr	r3, [pc, #664]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	4ba5      	ldr	r3, [pc, #660]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 80058de:	2180      	movs	r1, #128	@ 0x80
 80058e0:	0249      	lsls	r1, r1, #9
 80058e2:	430a      	orrs	r2, r1
 80058e4:	601a      	str	r2, [r3, #0]
 80058e6:	e00b      	b.n	8005900 <HAL_RCC_OscConfig+0xbc>
 80058e8:	4ba2      	ldr	r3, [pc, #648]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	4ba1      	ldr	r3, [pc, #644]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 80058ee:	49a2      	ldr	r1, [pc, #648]	@ (8005b78 <HAL_RCC_OscConfig+0x334>)
 80058f0:	400a      	ands	r2, r1
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	4b9f      	ldr	r3, [pc, #636]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	4b9e      	ldr	r3, [pc, #632]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 80058fa:	49a0      	ldr	r1, [pc, #640]	@ (8005b7c <HAL_RCC_OscConfig+0x338>)
 80058fc:	400a      	ands	r2, r1
 80058fe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d014      	beq.n	8005932 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005908:	f7fe fe6e 	bl	80045e8 <HAL_GetTick>
 800590c:	0003      	movs	r3, r0
 800590e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005910:	e008      	b.n	8005924 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005912:	f7fe fe69 	bl	80045e8 <HAL_GetTick>
 8005916:	0002      	movs	r2, r0
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	2b64      	cmp	r3, #100	@ 0x64
 800591e:	d901      	bls.n	8005924 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e2e9      	b.n	8005ef8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005924:	4b93      	ldr	r3, [pc, #588]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	2380      	movs	r3, #128	@ 0x80
 800592a:	029b      	lsls	r3, r3, #10
 800592c:	4013      	ands	r3, r2
 800592e:	d0f0      	beq.n	8005912 <HAL_RCC_OscConfig+0xce>
 8005930:	e015      	b.n	800595e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005932:	f7fe fe59 	bl	80045e8 <HAL_GetTick>
 8005936:	0003      	movs	r3, r0
 8005938:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800593c:	f7fe fe54 	bl	80045e8 <HAL_GetTick>
 8005940:	0002      	movs	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b64      	cmp	r3, #100	@ 0x64
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e2d4      	b.n	8005ef8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800594e:	4b89      	ldr	r3, [pc, #548]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	2380      	movs	r3, #128	@ 0x80
 8005954:	029b      	lsls	r3, r3, #10
 8005956:	4013      	ands	r3, r2
 8005958:	d1f0      	bne.n	800593c <HAL_RCC_OscConfig+0xf8>
 800595a:	e000      	b.n	800595e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800595c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2202      	movs	r2, #2
 8005964:	4013      	ands	r3, r2
 8005966:	d100      	bne.n	800596a <HAL_RCC_OscConfig+0x126>
 8005968:	e099      	b.n	8005a9e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800596a:	4b82      	ldr	r3, [pc, #520]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	2238      	movs	r2, #56	@ 0x38
 8005970:	4013      	ands	r3, r2
 8005972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005974:	4b7f      	ldr	r3, [pc, #508]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	2203      	movs	r2, #3
 800597a:	4013      	ands	r3, r2
 800597c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	2b10      	cmp	r3, #16
 8005982:	d102      	bne.n	800598a <HAL_RCC_OscConfig+0x146>
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2b02      	cmp	r3, #2
 8005988:	d002      	beq.n	8005990 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d135      	bne.n	80059fc <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005990:	4b78      	ldr	r3, [pc, #480]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	2380      	movs	r3, #128	@ 0x80
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	4013      	ands	r3, r2
 800599a:	d005      	beq.n	80059a8 <HAL_RCC_OscConfig+0x164>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e2a7      	b.n	8005ef8 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059a8:	4b72      	ldr	r3, [pc, #456]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	4a74      	ldr	r2, [pc, #464]	@ (8005b80 <HAL_RCC_OscConfig+0x33c>)
 80059ae:	4013      	ands	r3, r2
 80059b0:	0019      	movs	r1, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	021a      	lsls	r2, r3, #8
 80059b8:	4b6e      	ldr	r3, [pc, #440]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 80059ba:	430a      	orrs	r2, r1
 80059bc:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d112      	bne.n	80059ea <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80059c4:	4b6b      	ldr	r3, [pc, #428]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a6e      	ldr	r2, [pc, #440]	@ (8005b84 <HAL_RCC_OscConfig+0x340>)
 80059ca:	4013      	ands	r3, r2
 80059cc:	0019      	movs	r1, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691a      	ldr	r2, [r3, #16]
 80059d2:	4b68      	ldr	r3, [pc, #416]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 80059d4:	430a      	orrs	r2, r1
 80059d6:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80059d8:	4b66      	ldr	r3, [pc, #408]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	0adb      	lsrs	r3, r3, #11
 80059de:	2207      	movs	r2, #7
 80059e0:	4013      	ands	r3, r2
 80059e2:	4a69      	ldr	r2, [pc, #420]	@ (8005b88 <HAL_RCC_OscConfig+0x344>)
 80059e4:	40da      	lsrs	r2, r3
 80059e6:	4b69      	ldr	r3, [pc, #420]	@ (8005b8c <HAL_RCC_OscConfig+0x348>)
 80059e8:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80059ea:	4b69      	ldr	r3, [pc, #420]	@ (8005b90 <HAL_RCC_OscConfig+0x34c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	0018      	movs	r0, r3
 80059f0:	f7fe fd9e 	bl	8004530 <HAL_InitTick>
 80059f4:	1e03      	subs	r3, r0, #0
 80059f6:	d051      	beq.n	8005a9c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e27d      	b.n	8005ef8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d030      	beq.n	8005a66 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005a04:	4b5b      	ldr	r3, [pc, #364]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a5e      	ldr	r2, [pc, #376]	@ (8005b84 <HAL_RCC_OscConfig+0x340>)
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	0019      	movs	r1, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691a      	ldr	r2, [r3, #16]
 8005a12:	4b58      	ldr	r3, [pc, #352]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005a14:	430a      	orrs	r2, r1
 8005a16:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005a18:	4b56      	ldr	r3, [pc, #344]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	4b55      	ldr	r3, [pc, #340]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005a1e:	2180      	movs	r1, #128	@ 0x80
 8005a20:	0049      	lsls	r1, r1, #1
 8005a22:	430a      	orrs	r2, r1
 8005a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a26:	f7fe fddf 	bl	80045e8 <HAL_GetTick>
 8005a2a:	0003      	movs	r3, r0
 8005a2c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a30:	f7fe fdda 	bl	80045e8 <HAL_GetTick>
 8005a34:	0002      	movs	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e25a      	b.n	8005ef8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a42:	4b4c      	ldr	r3, [pc, #304]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	2380      	movs	r3, #128	@ 0x80
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	d0f0      	beq.n	8005a30 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a4e:	4b49      	ldr	r3, [pc, #292]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	4a4b      	ldr	r2, [pc, #300]	@ (8005b80 <HAL_RCC_OscConfig+0x33c>)
 8005a54:	4013      	ands	r3, r2
 8005a56:	0019      	movs	r1, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	021a      	lsls	r2, r3, #8
 8005a5e:	4b45      	ldr	r3, [pc, #276]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005a60:	430a      	orrs	r2, r1
 8005a62:	605a      	str	r2, [r3, #4]
 8005a64:	e01b      	b.n	8005a9e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005a66:	4b43      	ldr	r3, [pc, #268]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	4b42      	ldr	r3, [pc, #264]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005a6c:	4949      	ldr	r1, [pc, #292]	@ (8005b94 <HAL_RCC_OscConfig+0x350>)
 8005a6e:	400a      	ands	r2, r1
 8005a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a72:	f7fe fdb9 	bl	80045e8 <HAL_GetTick>
 8005a76:	0003      	movs	r3, r0
 8005a78:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a7c:	f7fe fdb4 	bl	80045e8 <HAL_GetTick>
 8005a80:	0002      	movs	r2, r0
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e234      	b.n	8005ef8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a8e:	4b39      	ldr	r3, [pc, #228]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	2380      	movs	r3, #128	@ 0x80
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	4013      	ands	r3, r2
 8005a98:	d1f0      	bne.n	8005a7c <HAL_RCC_OscConfig+0x238>
 8005a9a:	e000      	b.n	8005a9e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a9c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2208      	movs	r2, #8
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	d047      	beq.n	8005b38 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005aa8:	4b32      	ldr	r3, [pc, #200]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	2238      	movs	r2, #56	@ 0x38
 8005aae:	4013      	ands	r3, r2
 8005ab0:	2b18      	cmp	r3, #24
 8005ab2:	d10a      	bne.n	8005aca <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005ab4:	4b2f      	ldr	r3, [pc, #188]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ab8:	2202      	movs	r2, #2
 8005aba:	4013      	ands	r3, r2
 8005abc:	d03c      	beq.n	8005b38 <HAL_RCC_OscConfig+0x2f4>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d138      	bne.n	8005b38 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e216      	b.n	8005ef8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d019      	beq.n	8005b06 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005ad2:	4b28      	ldr	r3, [pc, #160]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005ad4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005ad6:	4b27      	ldr	r3, [pc, #156]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005ad8:	2101      	movs	r1, #1
 8005ada:	430a      	orrs	r2, r1
 8005adc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ade:	f7fe fd83 	bl	80045e8 <HAL_GetTick>
 8005ae2:	0003      	movs	r3, r0
 8005ae4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ae8:	f7fe fd7e 	bl	80045e8 <HAL_GetTick>
 8005aec:	0002      	movs	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e1fe      	b.n	8005ef8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005afa:	4b1e      	ldr	r3, [pc, #120]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005afe:	2202      	movs	r2, #2
 8005b00:	4013      	ands	r3, r2
 8005b02:	d0f1      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x2a4>
 8005b04:	e018      	b.n	8005b38 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005b06:	4b1b      	ldr	r3, [pc, #108]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005b08:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	438a      	bics	r2, r1
 8005b10:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b12:	f7fe fd69 	bl	80045e8 <HAL_GetTick>
 8005b16:	0003      	movs	r3, r0
 8005b18:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b1c:	f7fe fd64 	bl	80045e8 <HAL_GetTick>
 8005b20:	0002      	movs	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e1e4      	b.n	8005ef8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b2e:	4b11      	ldr	r3, [pc, #68]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b32:	2202      	movs	r2, #2
 8005b34:	4013      	ands	r3, r2
 8005b36:	d1f1      	bne.n	8005b1c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2204      	movs	r2, #4
 8005b3e:	4013      	ands	r3, r2
 8005b40:	d100      	bne.n	8005b44 <HAL_RCC_OscConfig+0x300>
 8005b42:	e0c7      	b.n	8005cd4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b44:	231f      	movs	r3, #31
 8005b46:	18fb      	adds	r3, r7, r3
 8005b48:	2200      	movs	r2, #0
 8005b4a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005b4c:	4b09      	ldr	r3, [pc, #36]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	2238      	movs	r2, #56	@ 0x38
 8005b52:	4013      	ands	r3, r2
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	d11f      	bne.n	8005b98 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005b58:	4b06      	ldr	r3, [pc, #24]	@ (8005b74 <HAL_RCC_OscConfig+0x330>)
 8005b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	4013      	ands	r3, r2
 8005b60:	d100      	bne.n	8005b64 <HAL_RCC_OscConfig+0x320>
 8005b62:	e0b7      	b.n	8005cd4 <HAL_RCC_OscConfig+0x490>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d000      	beq.n	8005b6e <HAL_RCC_OscConfig+0x32a>
 8005b6c:	e0b2      	b.n	8005cd4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e1c2      	b.n	8005ef8 <HAL_RCC_OscConfig+0x6b4>
 8005b72:	46c0      	nop			@ (mov r8, r8)
 8005b74:	40021000 	.word	0x40021000
 8005b78:	fffeffff 	.word	0xfffeffff
 8005b7c:	fffbffff 	.word	0xfffbffff
 8005b80:	ffff80ff 	.word	0xffff80ff
 8005b84:	ffffc7ff 	.word	0xffffc7ff
 8005b88:	00f42400 	.word	0x00f42400
 8005b8c:	200009e4 	.word	0x200009e4
 8005b90:	200009e8 	.word	0x200009e8
 8005b94:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b98:	4bb5      	ldr	r3, [pc, #724]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005b9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b9c:	2380      	movs	r3, #128	@ 0x80
 8005b9e:	055b      	lsls	r3, r3, #21
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	d101      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x364>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e000      	b.n	8005baa <HAL_RCC_OscConfig+0x366>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d011      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005bae:	4bb0      	ldr	r3, [pc, #704]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005bb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bb2:	4baf      	ldr	r3, [pc, #700]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005bb4:	2180      	movs	r1, #128	@ 0x80
 8005bb6:	0549      	lsls	r1, r1, #21
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005bbc:	4bac      	ldr	r3, [pc, #688]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005bbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005bc0:	2380      	movs	r3, #128	@ 0x80
 8005bc2:	055b      	lsls	r3, r3, #21
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005bca:	231f      	movs	r3, #31
 8005bcc:	18fb      	adds	r3, r7, r3
 8005bce:	2201      	movs	r2, #1
 8005bd0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bd2:	4ba8      	ldr	r3, [pc, #672]	@ (8005e74 <HAL_RCC_OscConfig+0x630>)
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	2380      	movs	r3, #128	@ 0x80
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	4013      	ands	r3, r2
 8005bdc:	d11a      	bne.n	8005c14 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bde:	4ba5      	ldr	r3, [pc, #660]	@ (8005e74 <HAL_RCC_OscConfig+0x630>)
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	4ba4      	ldr	r3, [pc, #656]	@ (8005e74 <HAL_RCC_OscConfig+0x630>)
 8005be4:	2180      	movs	r1, #128	@ 0x80
 8005be6:	0049      	lsls	r1, r1, #1
 8005be8:	430a      	orrs	r2, r1
 8005bea:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005bec:	f7fe fcfc 	bl	80045e8 <HAL_GetTick>
 8005bf0:	0003      	movs	r3, r0
 8005bf2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bf4:	e008      	b.n	8005c08 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bf6:	f7fe fcf7 	bl	80045e8 <HAL_GetTick>
 8005bfa:	0002      	movs	r2, r0
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e177      	b.n	8005ef8 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c08:	4b9a      	ldr	r3, [pc, #616]	@ (8005e74 <HAL_RCC_OscConfig+0x630>)
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	2380      	movs	r3, #128	@ 0x80
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	4013      	ands	r3, r2
 8005c12:	d0f0      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d106      	bne.n	8005c2a <HAL_RCC_OscConfig+0x3e6>
 8005c1c:	4b94      	ldr	r3, [pc, #592]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005c1e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c20:	4b93      	ldr	r3, [pc, #588]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005c22:	2101      	movs	r1, #1
 8005c24:	430a      	orrs	r2, r1
 8005c26:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c28:	e01c      	b.n	8005c64 <HAL_RCC_OscConfig+0x420>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	2b05      	cmp	r3, #5
 8005c30:	d10c      	bne.n	8005c4c <HAL_RCC_OscConfig+0x408>
 8005c32:	4b8f      	ldr	r3, [pc, #572]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005c34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c36:	4b8e      	ldr	r3, [pc, #568]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005c38:	2104      	movs	r1, #4
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c3e:	4b8c      	ldr	r3, [pc, #560]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005c40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c42:	4b8b      	ldr	r3, [pc, #556]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005c44:	2101      	movs	r1, #1
 8005c46:	430a      	orrs	r2, r1
 8005c48:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c4a:	e00b      	b.n	8005c64 <HAL_RCC_OscConfig+0x420>
 8005c4c:	4b88      	ldr	r3, [pc, #544]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005c4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c50:	4b87      	ldr	r3, [pc, #540]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005c52:	2101      	movs	r1, #1
 8005c54:	438a      	bics	r2, r1
 8005c56:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c58:	4b85      	ldr	r3, [pc, #532]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005c5a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c5c:	4b84      	ldr	r3, [pc, #528]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005c5e:	2104      	movs	r1, #4
 8005c60:	438a      	bics	r2, r1
 8005c62:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d014      	beq.n	8005c96 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c6c:	f7fe fcbc 	bl	80045e8 <HAL_GetTick>
 8005c70:	0003      	movs	r3, r0
 8005c72:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c74:	e009      	b.n	8005c8a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c76:	f7fe fcb7 	bl	80045e8 <HAL_GetTick>
 8005c7a:	0002      	movs	r2, r0
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	4a7d      	ldr	r2, [pc, #500]	@ (8005e78 <HAL_RCC_OscConfig+0x634>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e136      	b.n	8005ef8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c8a:	4b79      	ldr	r3, [pc, #484]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c8e:	2202      	movs	r2, #2
 8005c90:	4013      	ands	r3, r2
 8005c92:	d0f0      	beq.n	8005c76 <HAL_RCC_OscConfig+0x432>
 8005c94:	e013      	b.n	8005cbe <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c96:	f7fe fca7 	bl	80045e8 <HAL_GetTick>
 8005c9a:	0003      	movs	r3, r0
 8005c9c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c9e:	e009      	b.n	8005cb4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ca0:	f7fe fca2 	bl	80045e8 <HAL_GetTick>
 8005ca4:	0002      	movs	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	4a73      	ldr	r2, [pc, #460]	@ (8005e78 <HAL_RCC_OscConfig+0x634>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e121      	b.n	8005ef8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cb4:	4b6e      	ldr	r3, [pc, #440]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cb8:	2202      	movs	r2, #2
 8005cba:	4013      	ands	r3, r2
 8005cbc:	d1f0      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005cbe:	231f      	movs	r3, #31
 8005cc0:	18fb      	adds	r3, r7, r3
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d105      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005cc8:	4b69      	ldr	r3, [pc, #420]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005cca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ccc:	4b68      	ldr	r3, [pc, #416]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005cce:	496b      	ldr	r1, [pc, #428]	@ (8005e7c <HAL_RCC_OscConfig+0x638>)
 8005cd0:	400a      	ands	r2, r1
 8005cd2:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	4013      	ands	r3, r2
 8005cdc:	d039      	beq.n	8005d52 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d01b      	beq.n	8005d1e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ce6:	4b62      	ldr	r3, [pc, #392]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	4b61      	ldr	r3, [pc, #388]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005cec:	2180      	movs	r1, #128	@ 0x80
 8005cee:	03c9      	lsls	r1, r1, #15
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf4:	f7fe fc78 	bl	80045e8 <HAL_GetTick>
 8005cf8:	0003      	movs	r3, r0
 8005cfa:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005cfc:	e008      	b.n	8005d10 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cfe:	f7fe fc73 	bl	80045e8 <HAL_GetTick>
 8005d02:	0002      	movs	r2, r0
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d901      	bls.n	8005d10 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e0f3      	b.n	8005ef8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005d10:	4b57      	ldr	r3, [pc, #348]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	2380      	movs	r3, #128	@ 0x80
 8005d16:	041b      	lsls	r3, r3, #16
 8005d18:	4013      	ands	r3, r2
 8005d1a:	d0f0      	beq.n	8005cfe <HAL_RCC_OscConfig+0x4ba>
 8005d1c:	e019      	b.n	8005d52 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d1e:	4b54      	ldr	r3, [pc, #336]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	4b53      	ldr	r3, [pc, #332]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005d24:	4956      	ldr	r1, [pc, #344]	@ (8005e80 <HAL_RCC_OscConfig+0x63c>)
 8005d26:	400a      	ands	r2, r1
 8005d28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d2a:	f7fe fc5d 	bl	80045e8 <HAL_GetTick>
 8005d2e:	0003      	movs	r3, r0
 8005d30:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005d32:	e008      	b.n	8005d46 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d34:	f7fe fc58 	bl	80045e8 <HAL_GetTick>
 8005d38:	0002      	movs	r2, r0
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e0d8      	b.n	8005ef8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005d46:	4b4a      	ldr	r3, [pc, #296]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	2380      	movs	r3, #128	@ 0x80
 8005d4c:	041b      	lsls	r3, r3, #16
 8005d4e:	4013      	ands	r3, r2
 8005d50:	d1f0      	bne.n	8005d34 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d100      	bne.n	8005d5c <HAL_RCC_OscConfig+0x518>
 8005d5a:	e0cc      	b.n	8005ef6 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d5c:	4b44      	ldr	r3, [pc, #272]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	2238      	movs	r2, #56	@ 0x38
 8005d62:	4013      	ands	r3, r2
 8005d64:	2b10      	cmp	r3, #16
 8005d66:	d100      	bne.n	8005d6a <HAL_RCC_OscConfig+0x526>
 8005d68:	e07b      	b.n	8005e62 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d156      	bne.n	8005e20 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d72:	4b3f      	ldr	r3, [pc, #252]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	4b3e      	ldr	r3, [pc, #248]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005d78:	4942      	ldr	r1, [pc, #264]	@ (8005e84 <HAL_RCC_OscConfig+0x640>)
 8005d7a:	400a      	ands	r2, r1
 8005d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d7e:	f7fe fc33 	bl	80045e8 <HAL_GetTick>
 8005d82:	0003      	movs	r3, r0
 8005d84:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d88:	f7fe fc2e 	bl	80045e8 <HAL_GetTick>
 8005d8c:	0002      	movs	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e0ae      	b.n	8005ef8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d9a:	4b35      	ldr	r3, [pc, #212]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	2380      	movs	r3, #128	@ 0x80
 8005da0:	049b      	lsls	r3, r3, #18
 8005da2:	4013      	ands	r3, r2
 8005da4:	d1f0      	bne.n	8005d88 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005da6:	4b32      	ldr	r3, [pc, #200]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	4a37      	ldr	r2, [pc, #220]	@ (8005e88 <HAL_RCC_OscConfig+0x644>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	0019      	movs	r1, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db8:	431a      	orrs	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	4b26      	ldr	r3, [pc, #152]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dda:	4b25      	ldr	r3, [pc, #148]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	4b24      	ldr	r3, [pc, #144]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005de0:	2180      	movs	r1, #128	@ 0x80
 8005de2:	0449      	lsls	r1, r1, #17
 8005de4:	430a      	orrs	r2, r1
 8005de6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005de8:	4b21      	ldr	r3, [pc, #132]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005dea:	68da      	ldr	r2, [r3, #12]
 8005dec:	4b20      	ldr	r3, [pc, #128]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005dee:	2180      	movs	r1, #128	@ 0x80
 8005df0:	0549      	lsls	r1, r1, #21
 8005df2:	430a      	orrs	r2, r1
 8005df4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df6:	f7fe fbf7 	bl	80045e8 <HAL_GetTick>
 8005dfa:	0003      	movs	r3, r0
 8005dfc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dfe:	e008      	b.n	8005e12 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e00:	f7fe fbf2 	bl	80045e8 <HAL_GetTick>
 8005e04:	0002      	movs	r2, r0
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e072      	b.n	8005ef8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e12:	4b17      	ldr	r3, [pc, #92]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	2380      	movs	r3, #128	@ 0x80
 8005e18:	049b      	lsls	r3, r3, #18
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	d0f0      	beq.n	8005e00 <HAL_RCC_OscConfig+0x5bc>
 8005e1e:	e06a      	b.n	8005ef6 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e20:	4b13      	ldr	r3, [pc, #76]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	4b12      	ldr	r3, [pc, #72]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005e26:	4917      	ldr	r1, [pc, #92]	@ (8005e84 <HAL_RCC_OscConfig+0x640>)
 8005e28:	400a      	ands	r2, r1
 8005e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e2c:	f7fe fbdc 	bl	80045e8 <HAL_GetTick>
 8005e30:	0003      	movs	r3, r0
 8005e32:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e34:	e008      	b.n	8005e48 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e36:	f7fe fbd7 	bl	80045e8 <HAL_GetTick>
 8005e3a:	0002      	movs	r2, r0
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d901      	bls.n	8005e48 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e057      	b.n	8005ef8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e48:	4b09      	ldr	r3, [pc, #36]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	2380      	movs	r3, #128	@ 0x80
 8005e4e:	049b      	lsls	r3, r3, #18
 8005e50:	4013      	ands	r3, r2
 8005e52:	d1f0      	bne.n	8005e36 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005e54:	4b06      	ldr	r3, [pc, #24]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	4b05      	ldr	r3, [pc, #20]	@ (8005e70 <HAL_RCC_OscConfig+0x62c>)
 8005e5a:	490c      	ldr	r1, [pc, #48]	@ (8005e8c <HAL_RCC_OscConfig+0x648>)
 8005e5c:	400a      	ands	r2, r1
 8005e5e:	60da      	str	r2, [r3, #12]
 8005e60:	e049      	b.n	8005ef6 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d112      	bne.n	8005e90 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e044      	b.n	8005ef8 <HAL_RCC_OscConfig+0x6b4>
 8005e6e:	46c0      	nop			@ (mov r8, r8)
 8005e70:	40021000 	.word	0x40021000
 8005e74:	40007000 	.word	0x40007000
 8005e78:	00001388 	.word	0x00001388
 8005e7c:	efffffff 	.word	0xefffffff
 8005e80:	ffbfffff 	.word	0xffbfffff
 8005e84:	feffffff 	.word	0xfeffffff
 8005e88:	11c1808c 	.word	0x11c1808c
 8005e8c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005e90:	4b1b      	ldr	r3, [pc, #108]	@ (8005f00 <HAL_RCC_OscConfig+0x6bc>)
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2203      	movs	r2, #3
 8005e9a:	401a      	ands	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d126      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	2270      	movs	r2, #112	@ 0x70
 8005ea8:	401a      	ands	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d11f      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	23fe      	movs	r3, #254	@ 0xfe
 8005eb6:	01db      	lsls	r3, r3, #7
 8005eb8:	401a      	ands	r2, r3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ebe:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d116      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	23f8      	movs	r3, #248	@ 0xf8
 8005ec8:	039b      	lsls	r3, r3, #14
 8005eca:	401a      	ands	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d10e      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	23e0      	movs	r3, #224	@ 0xe0
 8005ed8:	051b      	lsls	r3, r3, #20
 8005eda:	401a      	ands	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d106      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	0f5b      	lsrs	r3, r3, #29
 8005ee8:	075a      	lsls	r2, r3, #29
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d001      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e000      	b.n	8005ef8 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	0018      	movs	r0, r3
 8005efa:	46bd      	mov	sp, r7
 8005efc:	b008      	add	sp, #32
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	40021000 	.word	0x40021000

08005f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e0e9      	b.n	80060ec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f18:	4b76      	ldr	r3, [pc, #472]	@ (80060f4 <HAL_RCC_ClockConfig+0x1f0>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2207      	movs	r2, #7
 8005f1e:	4013      	ands	r3, r2
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d91e      	bls.n	8005f64 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f26:	4b73      	ldr	r3, [pc, #460]	@ (80060f4 <HAL_RCC_ClockConfig+0x1f0>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2207      	movs	r2, #7
 8005f2c:	4393      	bics	r3, r2
 8005f2e:	0019      	movs	r1, r3
 8005f30:	4b70      	ldr	r3, [pc, #448]	@ (80060f4 <HAL_RCC_ClockConfig+0x1f0>)
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005f38:	f7fe fb56 	bl	80045e8 <HAL_GetTick>
 8005f3c:	0003      	movs	r3, r0
 8005f3e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005f40:	e009      	b.n	8005f56 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f42:	f7fe fb51 	bl	80045e8 <HAL_GetTick>
 8005f46:	0002      	movs	r2, r0
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	4a6a      	ldr	r2, [pc, #424]	@ (80060f8 <HAL_RCC_ClockConfig+0x1f4>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e0ca      	b.n	80060ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005f56:	4b67      	ldr	r3, [pc, #412]	@ (80060f4 <HAL_RCC_ClockConfig+0x1f0>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2207      	movs	r2, #7
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d1ee      	bne.n	8005f42 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2202      	movs	r2, #2
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	d015      	beq.n	8005f9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2204      	movs	r2, #4
 8005f74:	4013      	ands	r3, r2
 8005f76:	d006      	beq.n	8005f86 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005f78:	4b60      	ldr	r3, [pc, #384]	@ (80060fc <HAL_RCC_ClockConfig+0x1f8>)
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	4b5f      	ldr	r3, [pc, #380]	@ (80060fc <HAL_RCC_ClockConfig+0x1f8>)
 8005f7e:	21e0      	movs	r1, #224	@ 0xe0
 8005f80:	01c9      	lsls	r1, r1, #7
 8005f82:	430a      	orrs	r2, r1
 8005f84:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f86:	4b5d      	ldr	r3, [pc, #372]	@ (80060fc <HAL_RCC_ClockConfig+0x1f8>)
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	4a5d      	ldr	r2, [pc, #372]	@ (8006100 <HAL_RCC_ClockConfig+0x1fc>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	0019      	movs	r1, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	4b59      	ldr	r3, [pc, #356]	@ (80060fc <HAL_RCC_ClockConfig+0x1f8>)
 8005f96:	430a      	orrs	r2, r1
 8005f98:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	d057      	beq.n	8006054 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d107      	bne.n	8005fbc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fac:	4b53      	ldr	r3, [pc, #332]	@ (80060fc <HAL_RCC_ClockConfig+0x1f8>)
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	2380      	movs	r3, #128	@ 0x80
 8005fb2:	029b      	lsls	r3, r3, #10
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	d12b      	bne.n	8006010 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e097      	b.n	80060ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d107      	bne.n	8005fd4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fc4:	4b4d      	ldr	r3, [pc, #308]	@ (80060fc <HAL_RCC_ClockConfig+0x1f8>)
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	2380      	movs	r3, #128	@ 0x80
 8005fca:	049b      	lsls	r3, r3, #18
 8005fcc:	4013      	ands	r3, r2
 8005fce:	d11f      	bne.n	8006010 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e08b      	b.n	80060ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d107      	bne.n	8005fec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fdc:	4b47      	ldr	r3, [pc, #284]	@ (80060fc <HAL_RCC_ClockConfig+0x1f8>)
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	2380      	movs	r3, #128	@ 0x80
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	d113      	bne.n	8006010 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e07f      	b.n	80060ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	2b03      	cmp	r3, #3
 8005ff2:	d106      	bne.n	8006002 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ff4:	4b41      	ldr	r3, [pc, #260]	@ (80060fc <HAL_RCC_ClockConfig+0x1f8>)
 8005ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	d108      	bne.n	8006010 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e074      	b.n	80060ec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006002:	4b3e      	ldr	r3, [pc, #248]	@ (80060fc <HAL_RCC_ClockConfig+0x1f8>)
 8006004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006006:	2202      	movs	r2, #2
 8006008:	4013      	ands	r3, r2
 800600a:	d101      	bne.n	8006010 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e06d      	b.n	80060ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006010:	4b3a      	ldr	r3, [pc, #232]	@ (80060fc <HAL_RCC_ClockConfig+0x1f8>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	2207      	movs	r2, #7
 8006016:	4393      	bics	r3, r2
 8006018:	0019      	movs	r1, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	4b37      	ldr	r3, [pc, #220]	@ (80060fc <HAL_RCC_ClockConfig+0x1f8>)
 8006020:	430a      	orrs	r2, r1
 8006022:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006024:	f7fe fae0 	bl	80045e8 <HAL_GetTick>
 8006028:	0003      	movs	r3, r0
 800602a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800602c:	e009      	b.n	8006042 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800602e:	f7fe fadb 	bl	80045e8 <HAL_GetTick>
 8006032:	0002      	movs	r2, r0
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	4a2f      	ldr	r2, [pc, #188]	@ (80060f8 <HAL_RCC_ClockConfig+0x1f4>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d901      	bls.n	8006042 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e054      	b.n	80060ec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006042:	4b2e      	ldr	r3, [pc, #184]	@ (80060fc <HAL_RCC_ClockConfig+0x1f8>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	2238      	movs	r2, #56	@ 0x38
 8006048:	401a      	ands	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	429a      	cmp	r2, r3
 8006052:	d1ec      	bne.n	800602e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006054:	4b27      	ldr	r3, [pc, #156]	@ (80060f4 <HAL_RCC_ClockConfig+0x1f0>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2207      	movs	r2, #7
 800605a:	4013      	ands	r3, r2
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	429a      	cmp	r2, r3
 8006060:	d21e      	bcs.n	80060a0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006062:	4b24      	ldr	r3, [pc, #144]	@ (80060f4 <HAL_RCC_ClockConfig+0x1f0>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2207      	movs	r2, #7
 8006068:	4393      	bics	r3, r2
 800606a:	0019      	movs	r1, r3
 800606c:	4b21      	ldr	r3, [pc, #132]	@ (80060f4 <HAL_RCC_ClockConfig+0x1f0>)
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006074:	f7fe fab8 	bl	80045e8 <HAL_GetTick>
 8006078:	0003      	movs	r3, r0
 800607a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800607c:	e009      	b.n	8006092 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800607e:	f7fe fab3 	bl	80045e8 <HAL_GetTick>
 8006082:	0002      	movs	r2, r0
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	4a1b      	ldr	r2, [pc, #108]	@ (80060f8 <HAL_RCC_ClockConfig+0x1f4>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d901      	bls.n	8006092 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e02c      	b.n	80060ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006092:	4b18      	ldr	r3, [pc, #96]	@ (80060f4 <HAL_RCC_ClockConfig+0x1f0>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2207      	movs	r2, #7
 8006098:	4013      	ands	r3, r2
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	429a      	cmp	r2, r3
 800609e:	d1ee      	bne.n	800607e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2204      	movs	r2, #4
 80060a6:	4013      	ands	r3, r2
 80060a8:	d009      	beq.n	80060be <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80060aa:	4b14      	ldr	r3, [pc, #80]	@ (80060fc <HAL_RCC_ClockConfig+0x1f8>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	4a15      	ldr	r2, [pc, #84]	@ (8006104 <HAL_RCC_ClockConfig+0x200>)
 80060b0:	4013      	ands	r3, r2
 80060b2:	0019      	movs	r1, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	68da      	ldr	r2, [r3, #12]
 80060b8:	4b10      	ldr	r3, [pc, #64]	@ (80060fc <HAL_RCC_ClockConfig+0x1f8>)
 80060ba:	430a      	orrs	r2, r1
 80060bc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80060be:	f000 f829 	bl	8006114 <HAL_RCC_GetSysClockFreq>
 80060c2:	0001      	movs	r1, r0
 80060c4:	4b0d      	ldr	r3, [pc, #52]	@ (80060fc <HAL_RCC_ClockConfig+0x1f8>)
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	0a1b      	lsrs	r3, r3, #8
 80060ca:	220f      	movs	r2, #15
 80060cc:	401a      	ands	r2, r3
 80060ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006108 <HAL_RCC_ClockConfig+0x204>)
 80060d0:	0092      	lsls	r2, r2, #2
 80060d2:	58d3      	ldr	r3, [r2, r3]
 80060d4:	221f      	movs	r2, #31
 80060d6:	4013      	ands	r3, r2
 80060d8:	000a      	movs	r2, r1
 80060da:	40da      	lsrs	r2, r3
 80060dc:	4b0b      	ldr	r3, [pc, #44]	@ (800610c <HAL_RCC_ClockConfig+0x208>)
 80060de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80060e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006110 <HAL_RCC_ClockConfig+0x20c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	0018      	movs	r0, r3
 80060e6:	f7fe fa23 	bl	8004530 <HAL_InitTick>
 80060ea:	0003      	movs	r3, r0
}
 80060ec:	0018      	movs	r0, r3
 80060ee:	46bd      	mov	sp, r7
 80060f0:	b004      	add	sp, #16
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	40022000 	.word	0x40022000
 80060f8:	00001388 	.word	0x00001388
 80060fc:	40021000 	.word	0x40021000
 8006100:	fffff0ff 	.word	0xfffff0ff
 8006104:	ffff8fff 	.word	0xffff8fff
 8006108:	0800a464 	.word	0x0800a464
 800610c:	200009e4 	.word	0x200009e4
 8006110:	200009e8 	.word	0x200009e8

08006114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800611a:	4b3c      	ldr	r3, [pc, #240]	@ (800620c <HAL_RCC_GetSysClockFreq+0xf8>)
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	2238      	movs	r2, #56	@ 0x38
 8006120:	4013      	ands	r3, r2
 8006122:	d10f      	bne.n	8006144 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006124:	4b39      	ldr	r3, [pc, #228]	@ (800620c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	0adb      	lsrs	r3, r3, #11
 800612a:	2207      	movs	r2, #7
 800612c:	4013      	ands	r3, r2
 800612e:	2201      	movs	r2, #1
 8006130:	409a      	lsls	r2, r3
 8006132:	0013      	movs	r3, r2
 8006134:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006136:	6839      	ldr	r1, [r7, #0]
 8006138:	4835      	ldr	r0, [pc, #212]	@ (8006210 <HAL_RCC_GetSysClockFreq+0xfc>)
 800613a:	f7f9 fff5 	bl	8000128 <__udivsi3>
 800613e:	0003      	movs	r3, r0
 8006140:	613b      	str	r3, [r7, #16]
 8006142:	e05d      	b.n	8006200 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006144:	4b31      	ldr	r3, [pc, #196]	@ (800620c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	2238      	movs	r2, #56	@ 0x38
 800614a:	4013      	ands	r3, r2
 800614c:	2b08      	cmp	r3, #8
 800614e:	d102      	bne.n	8006156 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006150:	4b30      	ldr	r3, [pc, #192]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x100>)
 8006152:	613b      	str	r3, [r7, #16]
 8006154:	e054      	b.n	8006200 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006156:	4b2d      	ldr	r3, [pc, #180]	@ (800620c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	2238      	movs	r2, #56	@ 0x38
 800615c:	4013      	ands	r3, r2
 800615e:	2b10      	cmp	r3, #16
 8006160:	d138      	bne.n	80061d4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006162:	4b2a      	ldr	r3, [pc, #168]	@ (800620c <HAL_RCC_GetSysClockFreq+0xf8>)
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	2203      	movs	r2, #3
 8006168:	4013      	ands	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800616c:	4b27      	ldr	r3, [pc, #156]	@ (800620c <HAL_RCC_GetSysClockFreq+0xf8>)
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	091b      	lsrs	r3, r3, #4
 8006172:	2207      	movs	r2, #7
 8006174:	4013      	ands	r3, r2
 8006176:	3301      	adds	r3, #1
 8006178:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2b03      	cmp	r3, #3
 800617e:	d10d      	bne.n	800619c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006180:	68b9      	ldr	r1, [r7, #8]
 8006182:	4824      	ldr	r0, [pc, #144]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x100>)
 8006184:	f7f9 ffd0 	bl	8000128 <__udivsi3>
 8006188:	0003      	movs	r3, r0
 800618a:	0019      	movs	r1, r3
 800618c:	4b1f      	ldr	r3, [pc, #124]	@ (800620c <HAL_RCC_GetSysClockFreq+0xf8>)
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	0a1b      	lsrs	r3, r3, #8
 8006192:	227f      	movs	r2, #127	@ 0x7f
 8006194:	4013      	ands	r3, r2
 8006196:	434b      	muls	r3, r1
 8006198:	617b      	str	r3, [r7, #20]
        break;
 800619a:	e00d      	b.n	80061b8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800619c:	68b9      	ldr	r1, [r7, #8]
 800619e:	481c      	ldr	r0, [pc, #112]	@ (8006210 <HAL_RCC_GetSysClockFreq+0xfc>)
 80061a0:	f7f9 ffc2 	bl	8000128 <__udivsi3>
 80061a4:	0003      	movs	r3, r0
 80061a6:	0019      	movs	r1, r3
 80061a8:	4b18      	ldr	r3, [pc, #96]	@ (800620c <HAL_RCC_GetSysClockFreq+0xf8>)
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	0a1b      	lsrs	r3, r3, #8
 80061ae:	227f      	movs	r2, #127	@ 0x7f
 80061b0:	4013      	ands	r3, r2
 80061b2:	434b      	muls	r3, r1
 80061b4:	617b      	str	r3, [r7, #20]
        break;
 80061b6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80061b8:	4b14      	ldr	r3, [pc, #80]	@ (800620c <HAL_RCC_GetSysClockFreq+0xf8>)
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	0f5b      	lsrs	r3, r3, #29
 80061be:	2207      	movs	r2, #7
 80061c0:	4013      	ands	r3, r2
 80061c2:	3301      	adds	r3, #1
 80061c4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80061c6:	6879      	ldr	r1, [r7, #4]
 80061c8:	6978      	ldr	r0, [r7, #20]
 80061ca:	f7f9 ffad 	bl	8000128 <__udivsi3>
 80061ce:	0003      	movs	r3, r0
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	e015      	b.n	8006200 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80061d4:	4b0d      	ldr	r3, [pc, #52]	@ (800620c <HAL_RCC_GetSysClockFreq+0xf8>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	2238      	movs	r2, #56	@ 0x38
 80061da:	4013      	ands	r3, r2
 80061dc:	2b20      	cmp	r3, #32
 80061de:	d103      	bne.n	80061e8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80061e0:	2380      	movs	r3, #128	@ 0x80
 80061e2:	021b      	lsls	r3, r3, #8
 80061e4:	613b      	str	r3, [r7, #16]
 80061e6:	e00b      	b.n	8006200 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80061e8:	4b08      	ldr	r3, [pc, #32]	@ (800620c <HAL_RCC_GetSysClockFreq+0xf8>)
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	2238      	movs	r2, #56	@ 0x38
 80061ee:	4013      	ands	r3, r2
 80061f0:	2b18      	cmp	r3, #24
 80061f2:	d103      	bne.n	80061fc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80061f4:	23fa      	movs	r3, #250	@ 0xfa
 80061f6:	01db      	lsls	r3, r3, #7
 80061f8:	613b      	str	r3, [r7, #16]
 80061fa:	e001      	b.n	8006200 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006200:	693b      	ldr	r3, [r7, #16]
}
 8006202:	0018      	movs	r0, r3
 8006204:	46bd      	mov	sp, r7
 8006206:	b006      	add	sp, #24
 8006208:	bd80      	pop	{r7, pc}
 800620a:	46c0      	nop			@ (mov r8, r8)
 800620c:	40021000 	.word	0x40021000
 8006210:	00f42400 	.word	0x00f42400
 8006214:	007a1200 	.word	0x007a1200

08006218 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800621c:	4b02      	ldr	r3, [pc, #8]	@ (8006228 <HAL_RCC_GetHCLKFreq+0x10>)
 800621e:	681b      	ldr	r3, [r3, #0]
}
 8006220:	0018      	movs	r0, r3
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	46c0      	nop			@ (mov r8, r8)
 8006228:	200009e4 	.word	0x200009e4

0800622c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800622c:	b5b0      	push	{r4, r5, r7, lr}
 800622e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006230:	f7ff fff2 	bl	8006218 <HAL_RCC_GetHCLKFreq>
 8006234:	0004      	movs	r4, r0
 8006236:	f7ff faf9 	bl	800582c <LL_RCC_GetAPB1Prescaler>
 800623a:	0003      	movs	r3, r0
 800623c:	0b1a      	lsrs	r2, r3, #12
 800623e:	4b05      	ldr	r3, [pc, #20]	@ (8006254 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006240:	0092      	lsls	r2, r2, #2
 8006242:	58d3      	ldr	r3, [r2, r3]
 8006244:	221f      	movs	r2, #31
 8006246:	4013      	ands	r3, r2
 8006248:	40dc      	lsrs	r4, r3
 800624a:	0023      	movs	r3, r4
}
 800624c:	0018      	movs	r0, r3
 800624e:	46bd      	mov	sp, r7
 8006250:	bdb0      	pop	{r4, r5, r7, pc}
 8006252:	46c0      	nop			@ (mov r8, r8)
 8006254:	0800a4a4 	.word	0x0800a4a4

08006258 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8006260:	2313      	movs	r3, #19
 8006262:	18fb      	adds	r3, r7, r3
 8006264:	2200      	movs	r2, #0
 8006266:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006268:	2312      	movs	r3, #18
 800626a:	18fb      	adds	r3, r7, r3
 800626c:	2200      	movs	r2, #0
 800626e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	2380      	movs	r3, #128	@ 0x80
 8006276:	029b      	lsls	r3, r3, #10
 8006278:	4013      	ands	r3, r2
 800627a:	d100      	bne.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800627c:	e0ad      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800627e:	2011      	movs	r0, #17
 8006280:	183b      	adds	r3, r7, r0
 8006282:	2200      	movs	r2, #0
 8006284:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006286:	4b47      	ldr	r3, [pc, #284]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006288:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800628a:	2380      	movs	r3, #128	@ 0x80
 800628c:	055b      	lsls	r3, r3, #21
 800628e:	4013      	ands	r3, r2
 8006290:	d110      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006292:	4b44      	ldr	r3, [pc, #272]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006294:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006296:	4b43      	ldr	r3, [pc, #268]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006298:	2180      	movs	r1, #128	@ 0x80
 800629a:	0549      	lsls	r1, r1, #21
 800629c:	430a      	orrs	r2, r1
 800629e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80062a0:	4b40      	ldr	r3, [pc, #256]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80062a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062a4:	2380      	movs	r3, #128	@ 0x80
 80062a6:	055b      	lsls	r3, r3, #21
 80062a8:	4013      	ands	r3, r2
 80062aa:	60bb      	str	r3, [r7, #8]
 80062ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062ae:	183b      	adds	r3, r7, r0
 80062b0:	2201      	movs	r2, #1
 80062b2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062b4:	4b3c      	ldr	r3, [pc, #240]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	4b3b      	ldr	r3, [pc, #236]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80062ba:	2180      	movs	r1, #128	@ 0x80
 80062bc:	0049      	lsls	r1, r1, #1
 80062be:	430a      	orrs	r2, r1
 80062c0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062c2:	f7fe f991 	bl	80045e8 <HAL_GetTick>
 80062c6:	0003      	movs	r3, r0
 80062c8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062ca:	e00b      	b.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062cc:	f7fe f98c 	bl	80045e8 <HAL_GetTick>
 80062d0:	0002      	movs	r2, r0
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d904      	bls.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80062da:	2313      	movs	r3, #19
 80062dc:	18fb      	adds	r3, r7, r3
 80062de:	2203      	movs	r2, #3
 80062e0:	701a      	strb	r2, [r3, #0]
        break;
 80062e2:	e005      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80062e4:	4b30      	ldr	r3, [pc, #192]	@ (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	2380      	movs	r3, #128	@ 0x80
 80062ea:	005b      	lsls	r3, r3, #1
 80062ec:	4013      	ands	r3, r2
 80062ee:	d0ed      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80062f0:	2313      	movs	r3, #19
 80062f2:	18fb      	adds	r3, r7, r3
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d15e      	bne.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80062fa:	4b2a      	ldr	r3, [pc, #168]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80062fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80062fe:	23c0      	movs	r3, #192	@ 0xc0
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4013      	ands	r3, r2
 8006304:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d019      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	429a      	cmp	r2, r3
 8006314:	d014      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006316:	4b23      	ldr	r3, [pc, #140]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800631a:	4a24      	ldr	r2, [pc, #144]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800631c:	4013      	ands	r3, r2
 800631e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006320:	4b20      	ldr	r3, [pc, #128]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006322:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006324:	4b1f      	ldr	r3, [pc, #124]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006326:	2180      	movs	r1, #128	@ 0x80
 8006328:	0249      	lsls	r1, r1, #9
 800632a:	430a      	orrs	r2, r1
 800632c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800632e:	4b1d      	ldr	r3, [pc, #116]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006330:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006332:	4b1c      	ldr	r3, [pc, #112]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006334:	491e      	ldr	r1, [pc, #120]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8006336:	400a      	ands	r2, r1
 8006338:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800633a:	4b1a      	ldr	r3, [pc, #104]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	2201      	movs	r2, #1
 8006344:	4013      	ands	r3, r2
 8006346:	d016      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006348:	f7fe f94e 	bl	80045e8 <HAL_GetTick>
 800634c:	0003      	movs	r3, r0
 800634e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006350:	e00c      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006352:	f7fe f949 	bl	80045e8 <HAL_GetTick>
 8006356:	0002      	movs	r2, r0
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	1ad3      	subs	r3, r2, r3
 800635c:	4a15      	ldr	r2, [pc, #84]	@ (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d904      	bls.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8006362:	2313      	movs	r3, #19
 8006364:	18fb      	adds	r3, r7, r3
 8006366:	2203      	movs	r2, #3
 8006368:	701a      	strb	r2, [r3, #0]
            break;
 800636a:	e004      	b.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800636c:	4b0d      	ldr	r3, [pc, #52]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800636e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006370:	2202      	movs	r2, #2
 8006372:	4013      	ands	r3, r2
 8006374:	d0ed      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8006376:	2313      	movs	r3, #19
 8006378:	18fb      	adds	r3, r7, r3
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10a      	bne.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006380:	4b08      	ldr	r3, [pc, #32]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006384:	4a09      	ldr	r2, [pc, #36]	@ (80063ac <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8006386:	4013      	ands	r3, r2
 8006388:	0019      	movs	r1, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800638e:	4b05      	ldr	r3, [pc, #20]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8006390:	430a      	orrs	r2, r1
 8006392:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006394:	e016      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006396:	2312      	movs	r3, #18
 8006398:	18fb      	adds	r3, r7, r3
 800639a:	2213      	movs	r2, #19
 800639c:	18ba      	adds	r2, r7, r2
 800639e:	7812      	ldrb	r2, [r2, #0]
 80063a0:	701a      	strb	r2, [r3, #0]
 80063a2:	e00f      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80063a4:	40021000 	.word	0x40021000
 80063a8:	40007000 	.word	0x40007000
 80063ac:	fffffcff 	.word	0xfffffcff
 80063b0:	fffeffff 	.word	0xfffeffff
 80063b4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b8:	2312      	movs	r3, #18
 80063ba:	18fb      	adds	r3, r7, r3
 80063bc:	2213      	movs	r2, #19
 80063be:	18ba      	adds	r2, r7, r2
 80063c0:	7812      	ldrb	r2, [r2, #0]
 80063c2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80063c4:	2311      	movs	r3, #17
 80063c6:	18fb      	adds	r3, r7, r3
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d105      	bne.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ce:	4bb6      	ldr	r3, [pc, #728]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80063d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80063d2:	4bb5      	ldr	r3, [pc, #724]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80063d4:	49b5      	ldr	r1, [pc, #724]	@ (80066ac <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80063d6:	400a      	ands	r2, r1
 80063d8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2201      	movs	r2, #1
 80063e0:	4013      	ands	r3, r2
 80063e2:	d009      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063e4:	4bb0      	ldr	r3, [pc, #704]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80063e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063e8:	2203      	movs	r2, #3
 80063ea:	4393      	bics	r3, r2
 80063ec:	0019      	movs	r1, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	4bad      	ldr	r3, [pc, #692]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80063f4:	430a      	orrs	r2, r1
 80063f6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2202      	movs	r2, #2
 80063fe:	4013      	ands	r3, r2
 8006400:	d009      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006402:	4ba9      	ldr	r3, [pc, #676]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006406:	220c      	movs	r2, #12
 8006408:	4393      	bics	r3, r2
 800640a:	0019      	movs	r1, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	4ba5      	ldr	r3, [pc, #660]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006412:	430a      	orrs	r2, r1
 8006414:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2204      	movs	r2, #4
 800641c:	4013      	ands	r3, r2
 800641e:	d009      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006420:	4ba1      	ldr	r3, [pc, #644]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006424:	2230      	movs	r2, #48	@ 0x30
 8006426:	4393      	bics	r3, r2
 8006428:	0019      	movs	r1, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	4b9e      	ldr	r3, [pc, #632]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006430:	430a      	orrs	r2, r1
 8006432:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2210      	movs	r2, #16
 800643a:	4013      	ands	r3, r2
 800643c:	d009      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800643e:	4b9a      	ldr	r3, [pc, #616]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006442:	4a9b      	ldr	r2, [pc, #620]	@ (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8006444:	4013      	ands	r3, r2
 8006446:	0019      	movs	r1, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	691a      	ldr	r2, [r3, #16]
 800644c:	4b96      	ldr	r3, [pc, #600]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800644e:	430a      	orrs	r2, r1
 8006450:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	2380      	movs	r3, #128	@ 0x80
 8006458:	015b      	lsls	r3, r3, #5
 800645a:	4013      	ands	r3, r2
 800645c:	d009      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800645e:	4b92      	ldr	r3, [pc, #584]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006462:	4a94      	ldr	r2, [pc, #592]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006464:	4013      	ands	r3, r2
 8006466:	0019      	movs	r1, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	695a      	ldr	r2, [r3, #20]
 800646c:	4b8e      	ldr	r3, [pc, #568]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800646e:	430a      	orrs	r2, r1
 8006470:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	2380      	movs	r3, #128	@ 0x80
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4013      	ands	r3, r2
 800647c:	d009      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800647e:	4b8a      	ldr	r3, [pc, #552]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006482:	4a8d      	ldr	r2, [pc, #564]	@ (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8006484:	4013      	ands	r3, r2
 8006486:	0019      	movs	r1, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800648c:	4b86      	ldr	r3, [pc, #536]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800648e:	430a      	orrs	r2, r1
 8006490:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	2380      	movs	r3, #128	@ 0x80
 8006498:	00db      	lsls	r3, r3, #3
 800649a:	4013      	ands	r3, r2
 800649c:	d009      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800649e:	4b82      	ldr	r3, [pc, #520]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80064a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a2:	4a86      	ldr	r2, [pc, #536]	@ (80066bc <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80064a4:	4013      	ands	r3, r2
 80064a6:	0019      	movs	r1, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ac:	4b7e      	ldr	r3, [pc, #504]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80064ae:	430a      	orrs	r2, r1
 80064b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2220      	movs	r2, #32
 80064b8:	4013      	ands	r3, r2
 80064ba:	d009      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064bc:	4b7a      	ldr	r3, [pc, #488]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80064be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c0:	4a7f      	ldr	r2, [pc, #508]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80064c2:	4013      	ands	r3, r2
 80064c4:	0019      	movs	r1, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699a      	ldr	r2, [r3, #24]
 80064ca:	4b77      	ldr	r3, [pc, #476]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80064cc:	430a      	orrs	r2, r1
 80064ce:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2240      	movs	r2, #64	@ 0x40
 80064d6:	4013      	ands	r3, r2
 80064d8:	d009      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80064da:	4b73      	ldr	r3, [pc, #460]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80064dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064de:	4a79      	ldr	r2, [pc, #484]	@ (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80064e0:	4013      	ands	r3, r2
 80064e2:	0019      	movs	r1, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	69da      	ldr	r2, [r3, #28]
 80064e8:	4b6f      	ldr	r3, [pc, #444]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80064ea:	430a      	orrs	r2, r1
 80064ec:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	2380      	movs	r3, #128	@ 0x80
 80064f4:	01db      	lsls	r3, r3, #7
 80064f6:	4013      	ands	r3, r2
 80064f8:	d015      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064fa:	4b6b      	ldr	r3, [pc, #428]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80064fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	0899      	lsrs	r1, r3, #2
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006506:	4b68      	ldr	r3, [pc, #416]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006508:	430a      	orrs	r2, r1
 800650a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006510:	2380      	movs	r3, #128	@ 0x80
 8006512:	05db      	lsls	r3, r3, #23
 8006514:	429a      	cmp	r2, r3
 8006516:	d106      	bne.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006518:	4b63      	ldr	r3, [pc, #396]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	4b62      	ldr	r3, [pc, #392]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800651e:	2180      	movs	r1, #128	@ 0x80
 8006520:	0249      	lsls	r1, r1, #9
 8006522:	430a      	orrs	r2, r1
 8006524:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	2380      	movs	r3, #128	@ 0x80
 800652c:	031b      	lsls	r3, r3, #12
 800652e:	4013      	ands	r3, r2
 8006530:	d009      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006532:	4b5d      	ldr	r3, [pc, #372]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006536:	2240      	movs	r2, #64	@ 0x40
 8006538:	4393      	bics	r3, r2
 800653a:	0019      	movs	r1, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006540:	4b59      	ldr	r3, [pc, #356]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006542:	430a      	orrs	r2, r1
 8006544:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	2380      	movs	r3, #128	@ 0x80
 800654c:	039b      	lsls	r3, r3, #14
 800654e:	4013      	ands	r3, r2
 8006550:	d016      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006552:	4b55      	ldr	r3, [pc, #340]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006556:	4a5c      	ldr	r2, [pc, #368]	@ (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8006558:	4013      	ands	r3, r2
 800655a:	0019      	movs	r1, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006560:	4b51      	ldr	r3, [pc, #324]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006562:	430a      	orrs	r2, r1
 8006564:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800656a:	2380      	movs	r3, #128	@ 0x80
 800656c:	03db      	lsls	r3, r3, #15
 800656e:	429a      	cmp	r2, r3
 8006570:	d106      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006572:	4b4d      	ldr	r3, [pc, #308]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	4b4c      	ldr	r3, [pc, #304]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006578:	2180      	movs	r1, #128	@ 0x80
 800657a:	0449      	lsls	r1, r1, #17
 800657c:	430a      	orrs	r2, r1
 800657e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	2380      	movs	r3, #128	@ 0x80
 8006586:	03db      	lsls	r3, r3, #15
 8006588:	4013      	ands	r3, r2
 800658a:	d016      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800658c:	4b46      	ldr	r3, [pc, #280]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800658e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006590:	4a4e      	ldr	r2, [pc, #312]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006592:	4013      	ands	r3, r2
 8006594:	0019      	movs	r1, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800659a:	4b43      	ldr	r3, [pc, #268]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800659c:	430a      	orrs	r2, r1
 800659e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065a4:	2380      	movs	r3, #128	@ 0x80
 80065a6:	045b      	lsls	r3, r3, #17
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d106      	bne.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80065ac:	4b3e      	ldr	r3, [pc, #248]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065ae:	68da      	ldr	r2, [r3, #12]
 80065b0:	4b3d      	ldr	r3, [pc, #244]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065b2:	2180      	movs	r1, #128	@ 0x80
 80065b4:	0449      	lsls	r1, r1, #17
 80065b6:	430a      	orrs	r2, r1
 80065b8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	2380      	movs	r3, #128	@ 0x80
 80065c0:	011b      	lsls	r3, r3, #4
 80065c2:	4013      	ands	r3, r2
 80065c4:	d014      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80065c6:	4b38      	ldr	r3, [pc, #224]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ca:	2203      	movs	r2, #3
 80065cc:	4393      	bics	r3, r2
 80065ce:	0019      	movs	r1, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a1a      	ldr	r2, [r3, #32]
 80065d4:	4b34      	ldr	r3, [pc, #208]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065d6:	430a      	orrs	r2, r1
 80065d8:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d106      	bne.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80065e2:	4b31      	ldr	r3, [pc, #196]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	4b30      	ldr	r3, [pc, #192]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065e8:	2180      	movs	r1, #128	@ 0x80
 80065ea:	0249      	lsls	r1, r1, #9
 80065ec:	430a      	orrs	r2, r1
 80065ee:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	2380      	movs	r3, #128	@ 0x80
 80065f6:	019b      	lsls	r3, r3, #6
 80065f8:	4013      	ands	r3, r2
 80065fa:	d014      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80065fc:	4b2a      	ldr	r3, [pc, #168]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80065fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006600:	220c      	movs	r2, #12
 8006602:	4393      	bics	r3, r2
 8006604:	0019      	movs	r1, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800660a:	4b27      	ldr	r3, [pc, #156]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800660c:	430a      	orrs	r2, r1
 800660e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006614:	2b04      	cmp	r3, #4
 8006616:	d106      	bne.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006618:	4b23      	ldr	r3, [pc, #140]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	4b22      	ldr	r3, [pc, #136]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800661e:	2180      	movs	r1, #128	@ 0x80
 8006620:	0249      	lsls	r1, r1, #9
 8006622:	430a      	orrs	r2, r1
 8006624:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	2380      	movs	r3, #128	@ 0x80
 800662c:	045b      	lsls	r3, r3, #17
 800662e:	4013      	ands	r3, r2
 8006630:	d016      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006632:	4b1d      	ldr	r3, [pc, #116]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006636:	4a22      	ldr	r2, [pc, #136]	@ (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8006638:	4013      	ands	r3, r2
 800663a:	0019      	movs	r1, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006640:	4b19      	ldr	r3, [pc, #100]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006642:	430a      	orrs	r2, r1
 8006644:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800664a:	2380      	movs	r3, #128	@ 0x80
 800664c:	019b      	lsls	r3, r3, #6
 800664e:	429a      	cmp	r2, r3
 8006650:	d106      	bne.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006652:	4b15      	ldr	r3, [pc, #84]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006654:	68da      	ldr	r2, [r3, #12]
 8006656:	4b14      	ldr	r3, [pc, #80]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006658:	2180      	movs	r1, #128	@ 0x80
 800665a:	0449      	lsls	r1, r1, #17
 800665c:	430a      	orrs	r2, r1
 800665e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	2380      	movs	r3, #128	@ 0x80
 8006666:	049b      	lsls	r3, r3, #18
 8006668:	4013      	ands	r3, r2
 800666a:	d016      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800666c:	4b0e      	ldr	r3, [pc, #56]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800666e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006670:	4a10      	ldr	r2, [pc, #64]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006672:	4013      	ands	r3, r2
 8006674:	0019      	movs	r1, r3
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800667a:	4b0b      	ldr	r3, [pc, #44]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800667c:	430a      	orrs	r2, r1
 800667e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006684:	2380      	movs	r3, #128	@ 0x80
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	429a      	cmp	r2, r3
 800668a:	d106      	bne.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800668c:	4b06      	ldr	r3, [pc, #24]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800668e:	68da      	ldr	r2, [r3, #12]
 8006690:	4b05      	ldr	r3, [pc, #20]	@ (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006692:	2180      	movs	r1, #128	@ 0x80
 8006694:	0449      	lsls	r1, r1, #17
 8006696:	430a      	orrs	r2, r1
 8006698:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800669a:	2312      	movs	r3, #18
 800669c:	18fb      	adds	r3, r7, r3
 800669e:	781b      	ldrb	r3, [r3, #0]
}
 80066a0:	0018      	movs	r0, r3
 80066a2:	46bd      	mov	sp, r7
 80066a4:	b006      	add	sp, #24
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	40021000 	.word	0x40021000
 80066ac:	efffffff 	.word	0xefffffff
 80066b0:	fffff3ff 	.word	0xfffff3ff
 80066b4:	fffffcff 	.word	0xfffffcff
 80066b8:	fff3ffff 	.word	0xfff3ffff
 80066bc:	ffcfffff 	.word	0xffcfffff
 80066c0:	ffffcfff 	.word	0xffffcfff
 80066c4:	ffff3fff 	.word	0xffff3fff
 80066c8:	ffbfffff 	.word	0xffbfffff
 80066cc:	feffffff 	.word	0xfeffffff

080066d0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80066d0:	b590      	push	{r4, r7, lr}
 80066d2:	b089      	sub	sp, #36	@ 0x24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2228      	movs	r2, #40	@ 0x28
 80066e0:	5c9b      	ldrb	r3, [r3, r2]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d101      	bne.n	80066ea <HAL_RTC_SetAlarm_IT+0x1a>
 80066e6:	2302      	movs	r3, #2
 80066e8:	e127      	b.n	800693a <HAL_RTC_SetAlarm_IT+0x26a>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2228      	movs	r2, #40	@ 0x28
 80066ee:	2101      	movs	r1, #1
 80066f0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2229      	movs	r2, #41	@ 0x29
 80066f6:	2102      	movs	r1, #2
 80066f8:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d136      	bne.n	800676e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	2240      	movs	r2, #64	@ 0x40
 8006708:	4013      	ands	r3, r2
 800670a:	d102      	bne.n	8006712 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2200      	movs	r2, #0
 8006710:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	0018      	movs	r0, r3
 8006718:	f000 fa1e 	bl	8006b58 <RTC_ByteToBcd2>
 800671c:	0003      	movs	r3, r0
 800671e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	785b      	ldrb	r3, [r3, #1]
 8006724:	0018      	movs	r0, r3
 8006726:	f000 fa17 	bl	8006b58 <RTC_ByteToBcd2>
 800672a:	0003      	movs	r3, r0
 800672c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800672e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	789b      	ldrb	r3, [r3, #2]
 8006734:	0018      	movs	r0, r3
 8006736:	f000 fa0f 	bl	8006b58 <RTC_ByteToBcd2>
 800673a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800673c:	0022      	movs	r2, r4
 800673e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	78db      	ldrb	r3, [r3, #3]
 8006744:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006746:	431a      	orrs	r2, r3
 8006748:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	2220      	movs	r2, #32
 800674e:	5c9b      	ldrb	r3, [r3, r2]
 8006750:	0018      	movs	r0, r3
 8006752:	f000 fa01 	bl	8006b58 <RTC_ByteToBcd2>
 8006756:	0003      	movs	r3, r0
 8006758:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800675a:	0022      	movs	r2, r4
 800675c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006762:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006768:	4313      	orrs	r3, r2
 800676a:	61fb      	str	r3, [r7, #28]
 800676c:	e022      	b.n	80067b4 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	2240      	movs	r2, #64	@ 0x40
 8006776:	4013      	ands	r3, r2
 8006778:	d102      	bne.n	8006780 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2200      	movs	r2, #0
 800677e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	785b      	ldrb	r3, [r3, #1]
 800678a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800678c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006792:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	78db      	ldrb	r3, [r3, #3]
 8006798:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800679a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2120      	movs	r1, #32
 80067a0:	5c5b      	ldrb	r3, [r3, r1]
 80067a2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80067a4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80067aa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067b0:	4313      	orrs	r3, r2
 80067b2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	685a      	ldr	r2, [r3, #4]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	4313      	orrs	r3, r2
 80067be:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	22ca      	movs	r2, #202	@ 0xca
 80067c6:	625a      	str	r2, [r3, #36]	@ 0x24
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2253      	movs	r2, #83	@ 0x53
 80067ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067d4:	2380      	movs	r3, #128	@ 0x80
 80067d6:	005b      	lsls	r3, r3, #1
 80067d8:	429a      	cmp	r2, r3
 80067da:	d14c      	bne.n	8006876 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	699a      	ldr	r2, [r3, #24]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4957      	ldr	r1, [pc, #348]	@ (8006944 <HAL_RTC_SetAlarm_IT+0x274>)
 80067e8:	400a      	ands	r2, r1
 80067ea:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2101      	movs	r1, #1
 80067f8:	430a      	orrs	r2, r1
 80067fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 80067fc:	f7fd fef4 	bl	80045e8 <HAL_GetTick>
 8006800:	0003      	movs	r3, r0
 8006802:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006804:	e016      	b.n	8006834 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006806:	f7fd feef 	bl	80045e8 <HAL_GetTick>
 800680a:	0002      	movs	r2, r0
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	1ad2      	subs	r2, r2, r3
 8006810:	23fa      	movs	r3, #250	@ 0xfa
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	429a      	cmp	r2, r3
 8006816:	d90d      	bls.n	8006834 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	22ff      	movs	r2, #255	@ 0xff
 800681e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2229      	movs	r2, #41	@ 0x29
 8006824:	2103      	movs	r1, #3
 8006826:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2228      	movs	r2, #40	@ 0x28
 800682c:	2100      	movs	r1, #0
 800682e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e082      	b.n	800693a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	2201      	movs	r2, #1
 800683c:	4013      	ands	r3, r2
 800683e:	d0e2      	beq.n	8006806 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	69fa      	ldr	r2, [r7, #28]
 8006846:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	699a      	ldr	r2, [r3, #24]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2180      	movs	r1, #128	@ 0x80
 800685c:	0049      	lsls	r1, r1, #1
 800685e:	430a      	orrs	r2, r1
 8006860:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	699a      	ldr	r2, [r3, #24]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2180      	movs	r1, #128	@ 0x80
 800686e:	0149      	lsls	r1, r1, #5
 8006870:	430a      	orrs	r2, r1
 8006872:	619a      	str	r2, [r3, #24]
 8006874:	e04b      	b.n	800690e <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	699a      	ldr	r2, [r3, #24]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4931      	ldr	r1, [pc, #196]	@ (8006948 <HAL_RTC_SetAlarm_IT+0x278>)
 8006882:	400a      	ands	r2, r1
 8006884:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2102      	movs	r1, #2
 8006892:	430a      	orrs	r2, r1
 8006894:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8006896:	f7fd fea7 	bl	80045e8 <HAL_GetTick>
 800689a:	0003      	movs	r3, r0
 800689c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800689e:	e016      	b.n	80068ce <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80068a0:	f7fd fea2 	bl	80045e8 <HAL_GetTick>
 80068a4:	0002      	movs	r2, r0
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	1ad2      	subs	r2, r2, r3
 80068aa:	23fa      	movs	r3, #250	@ 0xfa
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d90d      	bls.n	80068ce <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	22ff      	movs	r2, #255	@ 0xff
 80068b8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2229      	movs	r2, #41	@ 0x29
 80068be:	2103      	movs	r1, #3
 80068c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2228      	movs	r2, #40	@ 0x28
 80068c6:	2100      	movs	r1, #0
 80068c8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e035      	b.n	800693a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	2202      	movs	r2, #2
 80068d6:	4013      	ands	r3, r2
 80068d8:	d0e2      	beq.n	80068a0 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	69fa      	ldr	r2, [r7, #28]
 80068e0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	699a      	ldr	r2, [r3, #24]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2180      	movs	r1, #128	@ 0x80
 80068f6:	0089      	lsls	r1, r1, #2
 80068f8:	430a      	orrs	r2, r1
 80068fa:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	699a      	ldr	r2, [r3, #24]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2180      	movs	r1, #128	@ 0x80
 8006908:	0189      	lsls	r1, r1, #6
 800690a:	430a      	orrs	r2, r1
 800690c:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800690e:	4a0f      	ldr	r2, [pc, #60]	@ (800694c <HAL_RTC_SetAlarm_IT+0x27c>)
 8006910:	2380      	movs	r3, #128	@ 0x80
 8006912:	58d3      	ldr	r3, [r2, r3]
 8006914:	490d      	ldr	r1, [pc, #52]	@ (800694c <HAL_RTC_SetAlarm_IT+0x27c>)
 8006916:	2280      	movs	r2, #128	@ 0x80
 8006918:	0312      	lsls	r2, r2, #12
 800691a:	4313      	orrs	r3, r2
 800691c:	2280      	movs	r2, #128	@ 0x80
 800691e:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	22ff      	movs	r2, #255	@ 0xff
 8006926:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2229      	movs	r2, #41	@ 0x29
 800692c:	2101      	movs	r1, #1
 800692e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2228      	movs	r2, #40	@ 0x28
 8006934:	2100      	movs	r1, #0
 8006936:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	0018      	movs	r0, r3
 800693c:	46bd      	mov	sp, r7
 800693e:	b009      	add	sp, #36	@ 0x24
 8006940:	bd90      	pop	{r4, r7, pc}
 8006942:	46c0      	nop			@ (mov r8, r8)
 8006944:	fffffeff 	.word	0xfffffeff
 8006948:	fffffdff 	.word	0xfffffdff
 800694c:	40021800 	.word	0x40021800

08006950 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	2380      	movs	r3, #128	@ 0x80
 8006962:	005b      	lsls	r3, r3, #1
 8006964:	429a      	cmp	r2, r3
 8006966:	d144      	bne.n	80069f2 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	2280      	movs	r2, #128	@ 0x80
 800696c:	0052      	lsls	r2, r2, #1
 800696e:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006976:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800697e:	045b      	lsls	r3, r3, #17
 8006980:	0c5b      	lsrs	r3, r3, #17
 8006982:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	0c1b      	lsrs	r3, r3, #16
 8006988:	b2db      	uxtb	r3, r3
 800698a:	223f      	movs	r2, #63	@ 0x3f
 800698c:	4013      	ands	r3, r2
 800698e:	b2da      	uxtb	r2, r3
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	0a1b      	lsrs	r3, r3, #8
 8006998:	b2db      	uxtb	r3, r3
 800699a:	227f      	movs	r2, #127	@ 0x7f
 800699c:	4013      	ands	r3, r2
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	227f      	movs	r2, #127	@ 0x7f
 80069aa:	4013      	ands	r3, r2
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	0d9b      	lsrs	r3, r3, #22
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2201      	movs	r2, #1
 80069ba:	4013      	ands	r3, r2
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	0e1b      	lsrs	r3, r3, #24
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	223f      	movs	r2, #63	@ 0x3f
 80069d0:	4013      	ands	r3, r2
 80069d2:	b2d9      	uxtb	r1, r3
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2220      	movs	r2, #32
 80069d8:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	2380      	movs	r3, #128	@ 0x80
 80069de:	05db      	lsls	r3, r3, #23
 80069e0:	401a      	ands	r2, r3
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	4a3b      	ldr	r2, [pc, #236]	@ (8006ad8 <HAL_RTC_GetAlarm+0x188>)
 80069ea:	401a      	ands	r2, r3
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	615a      	str	r2, [r3, #20]
 80069f0:	e043      	b.n	8006a7a <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	2280      	movs	r2, #128	@ 0x80
 80069f6:	0092      	lsls	r2, r2, #2
 80069f8:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a00:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a08:	045b      	lsls	r3, r3, #17
 8006a0a:	0c5b      	lsrs	r3, r3, #17
 8006a0c:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	0c1b      	lsrs	r3, r3, #16
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	223f      	movs	r2, #63	@ 0x3f
 8006a16:	4013      	ands	r3, r2
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	0a1b      	lsrs	r3, r3, #8
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	227f      	movs	r2, #127	@ 0x7f
 8006a26:	4013      	ands	r3, r2
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	227f      	movs	r2, #127	@ 0x7f
 8006a34:	4013      	ands	r3, r2
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	0d9b      	lsrs	r3, r3, #22
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2201      	movs	r2, #1
 8006a44:	4013      	ands	r3, r2
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	0e1b      	lsrs	r3, r3, #24
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	223f      	movs	r2, #63	@ 0x3f
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	b2d9      	uxtb	r1, r3
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	2220      	movs	r2, #32
 8006a62:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	2380      	movs	r3, #128	@ 0x80
 8006a68:	05db      	lsls	r3, r3, #23
 8006a6a:	401a      	ands	r2, r3
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	4a19      	ldr	r2, [pc, #100]	@ (8006ad8 <HAL_RTC_GetAlarm+0x188>)
 8006a74:	401a      	ands	r2, r3
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d125      	bne.n	8006acc <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	0018      	movs	r0, r3
 8006a86:	f000 f88f 	bl	8006ba8 <RTC_Bcd2ToByte>
 8006a8a:	0003      	movs	r3, r0
 8006a8c:	001a      	movs	r2, r3
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	785b      	ldrb	r3, [r3, #1]
 8006a96:	0018      	movs	r0, r3
 8006a98:	f000 f886 	bl	8006ba8 <RTC_Bcd2ToByte>
 8006a9c:	0003      	movs	r3, r0
 8006a9e:	001a      	movs	r2, r3
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	789b      	ldrb	r3, [r3, #2]
 8006aa8:	0018      	movs	r0, r3
 8006aaa:	f000 f87d 	bl	8006ba8 <RTC_Bcd2ToByte>
 8006aae:	0003      	movs	r3, r0
 8006ab0:	001a      	movs	r2, r3
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	5c9b      	ldrb	r3, [r3, r2]
 8006abc:	0018      	movs	r0, r3
 8006abe:	f000 f873 	bl	8006ba8 <RTC_Bcd2ToByte>
 8006ac2:	0003      	movs	r3, r0
 8006ac4:	0019      	movs	r1, r3
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	0018      	movs	r0, r3
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	b006      	add	sp, #24
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	46c0      	nop			@ (mov r8, r8)
 8006ad8:	80808080 	.word	0x80808080

08006adc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	699a      	ldr	r2, [r3, #24]
 8006aea:	2380      	movs	r3, #128	@ 0x80
 8006aec:	015b      	lsls	r3, r3, #5
 8006aee:	4013      	ands	r3, r2
 8006af0:	d011      	beq.n	8006b16 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006af8:	2201      	movs	r2, #1
 8006afa:	4013      	ands	r3, r2
 8006afc:	d00b      	beq.n	8006b16 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2101      	movs	r1, #1
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	0018      	movs	r0, r3
 8006b12:	f7fd fa1f 	bl	8003f54 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	699a      	ldr	r2, [r3, #24]
 8006b1c:	2380      	movs	r3, #128	@ 0x80
 8006b1e:	019b      	lsls	r3, r3, #6
 8006b20:	4013      	ands	r3, r2
 8006b22:	d011      	beq.n	8006b48 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	d00b      	beq.n	8006b48 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2102      	movs	r1, #2
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	0018      	movs	r0, r3
 8006b44:	f000 f873 	bl	8006c2e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2229      	movs	r2, #41	@ 0x29
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	5499      	strb	r1, [r3, r2]
}
 8006b50:	46c0      	nop			@ (mov r8, r8)
 8006b52:	46bd      	mov	sp, r7
 8006b54:	b002      	add	sp, #8
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	0002      	movs	r2, r0
 8006b60:	1dfb      	adds	r3, r7, #7
 8006b62:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006b64:	2300      	movs	r3, #0
 8006b66:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006b68:	230b      	movs	r3, #11
 8006b6a:	18fb      	adds	r3, r7, r3
 8006b6c:	1dfa      	adds	r2, r7, #7
 8006b6e:	7812      	ldrb	r2, [r2, #0]
 8006b70:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8006b72:	e008      	b.n	8006b86 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	3301      	adds	r3, #1
 8006b78:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006b7a:	220b      	movs	r2, #11
 8006b7c:	18bb      	adds	r3, r7, r2
 8006b7e:	18ba      	adds	r2, r7, r2
 8006b80:	7812      	ldrb	r2, [r2, #0]
 8006b82:	3a0a      	subs	r2, #10
 8006b84:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8006b86:	210b      	movs	r1, #11
 8006b88:	187b      	adds	r3, r7, r1
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	2b09      	cmp	r3, #9
 8006b8e:	d8f1      	bhi.n	8006b74 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	011b      	lsls	r3, r3, #4
 8006b96:	b2da      	uxtb	r2, r3
 8006b98:	187b      	adds	r3, r7, r1
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	b2db      	uxtb	r3, r3
}
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	b004      	add	sp, #16
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	0002      	movs	r2, r0
 8006bb0:	1dfb      	adds	r3, r7, #7
 8006bb2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006bb4:	1dfb      	adds	r3, r7, #7
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	091b      	lsrs	r3, r3, #4
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	001a      	movs	r2, r3
 8006bbe:	0013      	movs	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	189b      	adds	r3, r3, r2
 8006bc4:	005b      	lsls	r3, r3, #1
 8006bc6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	1dfb      	adds	r3, r7, #7
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	210f      	movs	r1, #15
 8006bd2:	400b      	ands	r3, r1
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	18d3      	adds	r3, r2, r3
 8006bd8:	b2db      	uxtb	r3, r3
}
 8006bda:	0018      	movs	r0, r3
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	b004      	add	sp, #16
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b082      	sub	sp, #8
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bf0:	2204      	movs	r2, #4
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	d00b      	beq.n	8006c0e <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2104      	movs	r1, #4
 8006c02:	430a      	orrs	r2, r1
 8006c04:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	0018      	movs	r0, r3
 8006c0a:	f000 f808 	bl	8006c1e <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2229      	movs	r2, #41	@ 0x29
 8006c12:	2101      	movs	r1, #1
 8006c14:	5499      	strb	r1, [r3, r2]
}
 8006c16:	46c0      	nop			@ (mov r8, r8)
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	b002      	add	sp, #8
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b082      	sub	sp, #8
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8006c26:	46c0      	nop			@ (mov r8, r8)
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	b002      	add	sp, #8
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b082      	sub	sp, #8
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006c36:	46c0      	nop			@ (mov r8, r8)
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	b002      	add	sp, #8
 8006c3c:	bd80      	pop	{r7, pc}
	...

08006c40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e0a8      	b.n	8006da4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d109      	bne.n	8006c6e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	2382      	movs	r3, #130	@ 0x82
 8006c60:	005b      	lsls	r3, r3, #1
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d009      	beq.n	8006c7a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	61da      	str	r2, [r3, #28]
 8006c6c:	e005      	b.n	8006c7a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	225d      	movs	r2, #93	@ 0x5d
 8006c84:	5c9b      	ldrb	r3, [r3, r2]
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d107      	bne.n	8006c9c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	225c      	movs	r2, #92	@ 0x5c
 8006c90:	2100      	movs	r1, #0
 8006c92:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	0018      	movs	r0, r3
 8006c98:	f7fd fa26 	bl	80040e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	225d      	movs	r2, #93	@ 0x5d
 8006ca0:	2102      	movs	r1, #2
 8006ca2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2140      	movs	r1, #64	@ 0x40
 8006cb0:	438a      	bics	r2, r1
 8006cb2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68da      	ldr	r2, [r3, #12]
 8006cb8:	23e0      	movs	r3, #224	@ 0xe0
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d902      	bls.n	8006cc6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	e002      	b.n	8006ccc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006cc6:	2380      	movs	r3, #128	@ 0x80
 8006cc8:	015b      	lsls	r3, r3, #5
 8006cca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68da      	ldr	r2, [r3, #12]
 8006cd0:	23f0      	movs	r3, #240	@ 0xf0
 8006cd2:	011b      	lsls	r3, r3, #4
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d008      	beq.n	8006cea <HAL_SPI_Init+0xaa>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68da      	ldr	r2, [r3, #12]
 8006cdc:	23e0      	movs	r3, #224	@ 0xe0
 8006cde:	00db      	lsls	r3, r3, #3
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d002      	beq.n	8006cea <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	2382      	movs	r3, #130	@ 0x82
 8006cf0:	005b      	lsls	r3, r3, #1
 8006cf2:	401a      	ands	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6899      	ldr	r1, [r3, #8]
 8006cf8:	2384      	movs	r3, #132	@ 0x84
 8006cfa:	021b      	lsls	r3, r3, #8
 8006cfc:	400b      	ands	r3, r1
 8006cfe:	431a      	orrs	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	2102      	movs	r1, #2
 8006d06:	400b      	ands	r3, r1
 8006d08:	431a      	orrs	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	2101      	movs	r1, #1
 8006d10:	400b      	ands	r3, r1
 8006d12:	431a      	orrs	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6999      	ldr	r1, [r3, #24]
 8006d18:	2380      	movs	r3, #128	@ 0x80
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	400b      	ands	r3, r1
 8006d1e:	431a      	orrs	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	69db      	ldr	r3, [r3, #28]
 8006d24:	2138      	movs	r1, #56	@ 0x38
 8006d26:	400b      	ands	r3, r1
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	2180      	movs	r1, #128	@ 0x80
 8006d30:	400b      	ands	r3, r1
 8006d32:	431a      	orrs	r2, r3
 8006d34:	0011      	movs	r1, r2
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d3a:	2380      	movs	r3, #128	@ 0x80
 8006d3c:	019b      	lsls	r3, r3, #6
 8006d3e:	401a      	ands	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	430a      	orrs	r2, r1
 8006d46:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	0c1b      	lsrs	r3, r3, #16
 8006d4e:	2204      	movs	r2, #4
 8006d50:	401a      	ands	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d56:	2110      	movs	r1, #16
 8006d58:	400b      	ands	r3, r1
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d60:	2108      	movs	r1, #8
 8006d62:	400b      	ands	r3, r1
 8006d64:	431a      	orrs	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68d9      	ldr	r1, [r3, #12]
 8006d6a:	23f0      	movs	r3, #240	@ 0xf0
 8006d6c:	011b      	lsls	r3, r3, #4
 8006d6e:	400b      	ands	r3, r1
 8006d70:	431a      	orrs	r2, r3
 8006d72:	0011      	movs	r1, r2
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	2380      	movs	r3, #128	@ 0x80
 8006d78:	015b      	lsls	r3, r3, #5
 8006d7a:	401a      	ands	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	430a      	orrs	r2, r1
 8006d82:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	69da      	ldr	r2, [r3, #28]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4907      	ldr	r1, [pc, #28]	@ (8006dac <HAL_SPI_Init+0x16c>)
 8006d90:	400a      	ands	r2, r1
 8006d92:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	225d      	movs	r2, #93	@ 0x5d
 8006d9e:	2101      	movs	r1, #1
 8006da0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	0018      	movs	r0, r3
 8006da6:	46bd      	mov	sp, r7
 8006da8:	b004      	add	sp, #16
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	fffff7ff 	.word	0xfffff7ff

08006db0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b088      	sub	sp, #32
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	603b      	str	r3, [r7, #0]
 8006dbc:	1dbb      	adds	r3, r7, #6
 8006dbe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006dc0:	231f      	movs	r3, #31
 8006dc2:	18fb      	adds	r3, r7, r3
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	225c      	movs	r2, #92	@ 0x5c
 8006dcc:	5c9b      	ldrb	r3, [r3, r2]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d101      	bne.n	8006dd6 <HAL_SPI_Transmit+0x26>
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	e147      	b.n	8007066 <HAL_SPI_Transmit+0x2b6>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	225c      	movs	r2, #92	@ 0x5c
 8006dda:	2101      	movs	r1, #1
 8006ddc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006dde:	f7fd fc03 	bl	80045e8 <HAL_GetTick>
 8006de2:	0003      	movs	r3, r0
 8006de4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006de6:	2316      	movs	r3, #22
 8006de8:	18fb      	adds	r3, r7, r3
 8006dea:	1dba      	adds	r2, r7, #6
 8006dec:	8812      	ldrh	r2, [r2, #0]
 8006dee:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	225d      	movs	r2, #93	@ 0x5d
 8006df4:	5c9b      	ldrb	r3, [r3, r2]
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d004      	beq.n	8006e06 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006dfc:	231f      	movs	r3, #31
 8006dfe:	18fb      	adds	r3, r7, r3
 8006e00:	2202      	movs	r2, #2
 8006e02:	701a      	strb	r2, [r3, #0]
    goto error;
 8006e04:	e128      	b.n	8007058 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d003      	beq.n	8006e14 <HAL_SPI_Transmit+0x64>
 8006e0c:	1dbb      	adds	r3, r7, #6
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d104      	bne.n	8006e1e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006e14:	231f      	movs	r3, #31
 8006e16:	18fb      	adds	r3, r7, r3
 8006e18:	2201      	movs	r2, #1
 8006e1a:	701a      	strb	r2, [r3, #0]
    goto error;
 8006e1c:	e11c      	b.n	8007058 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	225d      	movs	r2, #93	@ 0x5d
 8006e22:	2103      	movs	r1, #3
 8006e24:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	1dba      	adds	r2, r7, #6
 8006e36:	8812      	ldrh	r2, [r2, #0]
 8006e38:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	1dba      	adds	r2, r7, #6
 8006e3e:	8812      	ldrh	r2, [r2, #0]
 8006e40:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2244      	movs	r2, #68	@ 0x44
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2246      	movs	r2, #70	@ 0x46
 8006e54:	2100      	movs	r1, #0
 8006e56:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	689a      	ldr	r2, [r3, #8]
 8006e68:	2380      	movs	r3, #128	@ 0x80
 8006e6a:	021b      	lsls	r3, r3, #8
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d110      	bne.n	8006e92 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2140      	movs	r1, #64	@ 0x40
 8006e7c:	438a      	bics	r2, r1
 8006e7e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2180      	movs	r1, #128	@ 0x80
 8006e8c:	01c9      	lsls	r1, r1, #7
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2240      	movs	r2, #64	@ 0x40
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	2b40      	cmp	r3, #64	@ 0x40
 8006e9e:	d007      	beq.n	8006eb0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2140      	movs	r1, #64	@ 0x40
 8006eac:	430a      	orrs	r2, r1
 8006eae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	68da      	ldr	r2, [r3, #12]
 8006eb4:	23e0      	movs	r3, #224	@ 0xe0
 8006eb6:	00db      	lsls	r3, r3, #3
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d952      	bls.n	8006f62 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d004      	beq.n	8006ece <HAL_SPI_Transmit+0x11e>
 8006ec4:	2316      	movs	r3, #22
 8006ec6:	18fb      	adds	r3, r7, r3
 8006ec8:	881b      	ldrh	r3, [r3, #0]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d143      	bne.n	8006f56 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed2:	881a      	ldrh	r2, [r3, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ede:	1c9a      	adds	r2, r3, #2
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	3b01      	subs	r3, #1
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006ef2:	e030      	b.n	8006f56 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	2202      	movs	r2, #2
 8006efc:	4013      	ands	r3, r2
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d112      	bne.n	8006f28 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f06:	881a      	ldrh	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f12:	1c9a      	adds	r2, r3, #2
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f26:	e016      	b.n	8006f56 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f28:	f7fd fb5e 	bl	80045e8 <HAL_GetTick>
 8006f2c:	0002      	movs	r2, r0
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d802      	bhi.n	8006f3e <HAL_SPI_Transmit+0x18e>
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	d102      	bne.n	8006f44 <HAL_SPI_Transmit+0x194>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d108      	bne.n	8006f56 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8006f44:	231f      	movs	r3, #31
 8006f46:	18fb      	adds	r3, r7, r3
 8006f48:	2203      	movs	r2, #3
 8006f4a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	225d      	movs	r2, #93	@ 0x5d
 8006f50:	2101      	movs	r1, #1
 8006f52:	5499      	strb	r1, [r3, r2]
          goto error;
 8006f54:	e080      	b.n	8007058 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1c9      	bne.n	8006ef4 <HAL_SPI_Transmit+0x144>
 8006f60:	e053      	b.n	800700a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d004      	beq.n	8006f74 <HAL_SPI_Transmit+0x1c4>
 8006f6a:	2316      	movs	r3, #22
 8006f6c:	18fb      	adds	r3, r7, r3
 8006f6e:	881b      	ldrh	r3, [r3, #0]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d145      	bne.n	8007000 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	330c      	adds	r3, #12
 8006f7e:	7812      	ldrb	r2, [r2, #0]
 8006f80:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f86:	1c5a      	adds	r2, r3, #1
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	3b01      	subs	r3, #1
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006f9a:	e031      	b.n	8007000 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d113      	bne.n	8006fd2 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	330c      	adds	r3, #12
 8006fb4:	7812      	ldrb	r2, [r2, #0]
 8006fb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fbc:	1c5a      	adds	r2, r3, #1
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006fd0:	e016      	b.n	8007000 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fd2:	f7fd fb09 	bl	80045e8 <HAL_GetTick>
 8006fd6:	0002      	movs	r2, r0
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	683a      	ldr	r2, [r7, #0]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d802      	bhi.n	8006fe8 <HAL_SPI_Transmit+0x238>
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	d102      	bne.n	8006fee <HAL_SPI_Transmit+0x23e>
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d108      	bne.n	8007000 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8006fee:	231f      	movs	r3, #31
 8006ff0:	18fb      	adds	r3, r7, r3
 8006ff2:	2203      	movs	r2, #3
 8006ff4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	225d      	movs	r2, #93	@ 0x5d
 8006ffa:	2101      	movs	r1, #1
 8006ffc:	5499      	strb	r1, [r3, r2]
          goto error;
 8006ffe:	e02b      	b.n	8007058 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007004:	b29b      	uxth	r3, r3
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1c8      	bne.n	8006f9c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	0018      	movs	r0, r3
 8007012:	f000 f95d 	bl	80072d0 <SPI_EndRxTxTransaction>
 8007016:	1e03      	subs	r3, r0, #0
 8007018:	d002      	beq.n	8007020 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2220      	movs	r2, #32
 800701e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d10a      	bne.n	800703e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007028:	2300      	movs	r3, #0
 800702a:	613b      	str	r3, [r7, #16]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	613b      	str	r3, [r7, #16]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	613b      	str	r3, [r7, #16]
 800703c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007042:	2b00      	cmp	r3, #0
 8007044:	d004      	beq.n	8007050 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8007046:	231f      	movs	r3, #31
 8007048:	18fb      	adds	r3, r7, r3
 800704a:	2201      	movs	r2, #1
 800704c:	701a      	strb	r2, [r3, #0]
 800704e:	e003      	b.n	8007058 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	225d      	movs	r2, #93	@ 0x5d
 8007054:	2101      	movs	r1, #1
 8007056:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	225c      	movs	r2, #92	@ 0x5c
 800705c:	2100      	movs	r1, #0
 800705e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007060:	231f      	movs	r3, #31
 8007062:	18fb      	adds	r3, r7, r3
 8007064:	781b      	ldrb	r3, [r3, #0]
}
 8007066:	0018      	movs	r0, r3
 8007068:	46bd      	mov	sp, r7
 800706a:	b008      	add	sp, #32
 800706c:	bd80      	pop	{r7, pc}
	...

08007070 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b088      	sub	sp, #32
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	603b      	str	r3, [r7, #0]
 800707c:	1dfb      	adds	r3, r7, #7
 800707e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007080:	f7fd fab2 	bl	80045e8 <HAL_GetTick>
 8007084:	0002      	movs	r2, r0
 8007086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007088:	1a9b      	subs	r3, r3, r2
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	18d3      	adds	r3, r2, r3
 800708e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007090:	f7fd faaa 	bl	80045e8 <HAL_GetTick>
 8007094:	0003      	movs	r3, r0
 8007096:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007098:	4b3a      	ldr	r3, [pc, #232]	@ (8007184 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	015b      	lsls	r3, r3, #5
 800709e:	0d1b      	lsrs	r3, r3, #20
 80070a0:	69fa      	ldr	r2, [r7, #28]
 80070a2:	4353      	muls	r3, r2
 80070a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070a6:	e058      	b.n	800715a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	3301      	adds	r3, #1
 80070ac:	d055      	beq.n	800715a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070ae:	f7fd fa9b 	bl	80045e8 <HAL_GetTick>
 80070b2:	0002      	movs	r2, r0
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	69fa      	ldr	r2, [r7, #28]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d902      	bls.n	80070c4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d142      	bne.n	800714a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	21e0      	movs	r1, #224	@ 0xe0
 80070d0:	438a      	bics	r2, r1
 80070d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	2382      	movs	r3, #130	@ 0x82
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	429a      	cmp	r2, r3
 80070de:	d113      	bne.n	8007108 <SPI_WaitFlagStateUntilTimeout+0x98>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	689a      	ldr	r2, [r3, #8]
 80070e4:	2380      	movs	r3, #128	@ 0x80
 80070e6:	021b      	lsls	r3, r3, #8
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d005      	beq.n	80070f8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	689a      	ldr	r2, [r3, #8]
 80070f0:	2380      	movs	r3, #128	@ 0x80
 80070f2:	00db      	lsls	r3, r3, #3
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d107      	bne.n	8007108 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2140      	movs	r1, #64	@ 0x40
 8007104:	438a      	bics	r2, r1
 8007106:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800710c:	2380      	movs	r3, #128	@ 0x80
 800710e:	019b      	lsls	r3, r3, #6
 8007110:	429a      	cmp	r2, r3
 8007112:	d110      	bne.n	8007136 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	491a      	ldr	r1, [pc, #104]	@ (8007188 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007120:	400a      	ands	r2, r1
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2180      	movs	r1, #128	@ 0x80
 8007130:	0189      	lsls	r1, r1, #6
 8007132:	430a      	orrs	r2, r1
 8007134:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	225d      	movs	r2, #93	@ 0x5d
 800713a:	2101      	movs	r1, #1
 800713c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	225c      	movs	r2, #92	@ 0x5c
 8007142:	2100      	movs	r1, #0
 8007144:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e017      	b.n	800717a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d101      	bne.n	8007154 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007150:	2300      	movs	r3, #0
 8007152:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	3b01      	subs	r3, #1
 8007158:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	4013      	ands	r3, r2
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	425a      	negs	r2, r3
 800716a:	4153      	adcs	r3, r2
 800716c:	b2db      	uxtb	r3, r3
 800716e:	001a      	movs	r2, r3
 8007170:	1dfb      	adds	r3, r7, #7
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	429a      	cmp	r2, r3
 8007176:	d197      	bne.n	80070a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	0018      	movs	r0, r3
 800717c:	46bd      	mov	sp, r7
 800717e:	b008      	add	sp, #32
 8007180:	bd80      	pop	{r7, pc}
 8007182:	46c0      	nop			@ (mov r8, r8)
 8007184:	200009e4 	.word	0x200009e4
 8007188:	ffffdfff 	.word	0xffffdfff

0800718c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b08a      	sub	sp, #40	@ 0x28
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
 8007198:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800719a:	2317      	movs	r3, #23
 800719c:	18fb      	adds	r3, r7, r3
 800719e:	2200      	movs	r2, #0
 80071a0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80071a2:	f7fd fa21 	bl	80045e8 <HAL_GetTick>
 80071a6:	0002      	movs	r2, r0
 80071a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071aa:	1a9b      	subs	r3, r3, r2
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	18d3      	adds	r3, r2, r3
 80071b0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80071b2:	f7fd fa19 	bl	80045e8 <HAL_GetTick>
 80071b6:	0003      	movs	r3, r0
 80071b8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	330c      	adds	r3, #12
 80071c0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80071c2:	4b41      	ldr	r3, [pc, #260]	@ (80072c8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	0013      	movs	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	189b      	adds	r3, r3, r2
 80071cc:	00da      	lsls	r2, r3, #3
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	0d1b      	lsrs	r3, r3, #20
 80071d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071d4:	4353      	muls	r3, r2
 80071d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80071d8:	e068      	b.n	80072ac <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	23c0      	movs	r3, #192	@ 0xc0
 80071de:	00db      	lsls	r3, r3, #3
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d10a      	bne.n	80071fa <SPI_WaitFifoStateUntilTimeout+0x6e>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d107      	bne.n	80071fa <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	b2da      	uxtb	r2, r3
 80071f0:	2117      	movs	r1, #23
 80071f2:	187b      	adds	r3, r7, r1
 80071f4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80071f6:	187b      	adds	r3, r7, r1
 80071f8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	3301      	adds	r3, #1
 80071fe:	d055      	beq.n	80072ac <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007200:	f7fd f9f2 	bl	80045e8 <HAL_GetTick>
 8007204:	0002      	movs	r2, r0
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800720c:	429a      	cmp	r2, r3
 800720e:	d902      	bls.n	8007216 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007212:	2b00      	cmp	r3, #0
 8007214:	d142      	bne.n	800729c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	21e0      	movs	r1, #224	@ 0xe0
 8007222:	438a      	bics	r2, r1
 8007224:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	2382      	movs	r3, #130	@ 0x82
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	429a      	cmp	r2, r3
 8007230:	d113      	bne.n	800725a <SPI_WaitFifoStateUntilTimeout+0xce>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	689a      	ldr	r2, [r3, #8]
 8007236:	2380      	movs	r3, #128	@ 0x80
 8007238:	021b      	lsls	r3, r3, #8
 800723a:	429a      	cmp	r2, r3
 800723c:	d005      	beq.n	800724a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	689a      	ldr	r2, [r3, #8]
 8007242:	2380      	movs	r3, #128	@ 0x80
 8007244:	00db      	lsls	r3, r3, #3
 8007246:	429a      	cmp	r2, r3
 8007248:	d107      	bne.n	800725a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2140      	movs	r1, #64	@ 0x40
 8007256:	438a      	bics	r2, r1
 8007258:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800725e:	2380      	movs	r3, #128	@ 0x80
 8007260:	019b      	lsls	r3, r3, #6
 8007262:	429a      	cmp	r2, r3
 8007264:	d110      	bne.n	8007288 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4916      	ldr	r1, [pc, #88]	@ (80072cc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007272:	400a      	ands	r2, r1
 8007274:	601a      	str	r2, [r3, #0]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2180      	movs	r1, #128	@ 0x80
 8007282:	0189      	lsls	r1, r1, #6
 8007284:	430a      	orrs	r2, r1
 8007286:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	225d      	movs	r2, #93	@ 0x5d
 800728c:	2101      	movs	r1, #1
 800728e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	225c      	movs	r2, #92	@ 0x5c
 8007294:	2100      	movs	r1, #0
 8007296:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e010      	b.n	80072be <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d101      	bne.n	80072a6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	3b01      	subs	r3, #1
 80072aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	4013      	ands	r3, r2
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d18e      	bne.n	80071da <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	0018      	movs	r0, r3
 80072c0:	46bd      	mov	sp, r7
 80072c2:	b00a      	add	sp, #40	@ 0x28
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	46c0      	nop			@ (mov r8, r8)
 80072c8:	200009e4 	.word	0x200009e4
 80072cc:	ffffdfff 	.word	0xffffdfff

080072d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af02      	add	r7, sp, #8
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	23c0      	movs	r3, #192	@ 0xc0
 80072e0:	0159      	lsls	r1, r3, #5
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	0013      	movs	r3, r2
 80072ea:	2200      	movs	r2, #0
 80072ec:	f7ff ff4e 	bl	800718c <SPI_WaitFifoStateUntilTimeout>
 80072f0:	1e03      	subs	r3, r0, #0
 80072f2:	d007      	beq.n	8007304 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072f8:	2220      	movs	r2, #32
 80072fa:	431a      	orrs	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e027      	b.n	8007354 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	9300      	str	r3, [sp, #0]
 800730c:	0013      	movs	r3, r2
 800730e:	2200      	movs	r2, #0
 8007310:	2180      	movs	r1, #128	@ 0x80
 8007312:	f7ff fead 	bl	8007070 <SPI_WaitFlagStateUntilTimeout>
 8007316:	1e03      	subs	r3, r0, #0
 8007318:	d007      	beq.n	800732a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800731e:	2220      	movs	r2, #32
 8007320:	431a      	orrs	r2, r3
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e014      	b.n	8007354 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	23c0      	movs	r3, #192	@ 0xc0
 800732e:	00d9      	lsls	r1, r3, #3
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	0013      	movs	r3, r2
 8007338:	2200      	movs	r2, #0
 800733a:	f7ff ff27 	bl	800718c <SPI_WaitFifoStateUntilTimeout>
 800733e:	1e03      	subs	r3, r0, #0
 8007340:	d007      	beq.n	8007352 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007346:	2220      	movs	r2, #32
 8007348:	431a      	orrs	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e000      	b.n	8007354 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	0018      	movs	r0, r3
 8007356:	46bd      	mov	sp, r7
 8007358:	b004      	add	sp, #16
 800735a:	bd80      	pop	{r7, pc}

0800735c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e04a      	b.n	8007404 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	223d      	movs	r2, #61	@ 0x3d
 8007372:	5c9b      	ldrb	r3, [r3, r2]
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d107      	bne.n	800738a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	223c      	movs	r2, #60	@ 0x3c
 800737e:	2100      	movs	r1, #0
 8007380:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	0018      	movs	r0, r3
 8007386:	f7fc ff1d 	bl	80041c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	223d      	movs	r2, #61	@ 0x3d
 800738e:	2102      	movs	r1, #2
 8007390:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	3304      	adds	r3, #4
 800739a:	0019      	movs	r1, r3
 800739c:	0010      	movs	r0, r2
 800739e:	f000 fb11 	bl	80079c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2248      	movs	r2, #72	@ 0x48
 80073a6:	2101      	movs	r1, #1
 80073a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	223e      	movs	r2, #62	@ 0x3e
 80073ae:	2101      	movs	r1, #1
 80073b0:	5499      	strb	r1, [r3, r2]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	223f      	movs	r2, #63	@ 0x3f
 80073b6:	2101      	movs	r1, #1
 80073b8:	5499      	strb	r1, [r3, r2]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2240      	movs	r2, #64	@ 0x40
 80073be:	2101      	movs	r1, #1
 80073c0:	5499      	strb	r1, [r3, r2]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2241      	movs	r2, #65	@ 0x41
 80073c6:	2101      	movs	r1, #1
 80073c8:	5499      	strb	r1, [r3, r2]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2242      	movs	r2, #66	@ 0x42
 80073ce:	2101      	movs	r1, #1
 80073d0:	5499      	strb	r1, [r3, r2]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2243      	movs	r2, #67	@ 0x43
 80073d6:	2101      	movs	r1, #1
 80073d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2244      	movs	r2, #68	@ 0x44
 80073de:	2101      	movs	r1, #1
 80073e0:	5499      	strb	r1, [r3, r2]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2245      	movs	r2, #69	@ 0x45
 80073e6:	2101      	movs	r1, #1
 80073e8:	5499      	strb	r1, [r3, r2]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2246      	movs	r2, #70	@ 0x46
 80073ee:	2101      	movs	r1, #1
 80073f0:	5499      	strb	r1, [r3, r2]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2247      	movs	r2, #71	@ 0x47
 80073f6:	2101      	movs	r1, #1
 80073f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	223d      	movs	r2, #61	@ 0x3d
 80073fe:	2101      	movs	r1, #1
 8007400:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	0018      	movs	r0, r3
 8007406:	46bd      	mov	sp, r7
 8007408:	b002      	add	sp, #8
 800740a:	bd80      	pop	{r7, pc}

0800740c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e04a      	b.n	80074b4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	223d      	movs	r2, #61	@ 0x3d
 8007422:	5c9b      	ldrb	r3, [r3, r2]
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b00      	cmp	r3, #0
 8007428:	d107      	bne.n	800743a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	223c      	movs	r2, #60	@ 0x3c
 800742e:	2100      	movs	r1, #0
 8007430:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	0018      	movs	r0, r3
 8007436:	f000 f841 	bl	80074bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	223d      	movs	r2, #61	@ 0x3d
 800743e:	2102      	movs	r1, #2
 8007440:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	3304      	adds	r3, #4
 800744a:	0019      	movs	r1, r3
 800744c:	0010      	movs	r0, r2
 800744e:	f000 fab9 	bl	80079c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2248      	movs	r2, #72	@ 0x48
 8007456:	2101      	movs	r1, #1
 8007458:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	223e      	movs	r2, #62	@ 0x3e
 800745e:	2101      	movs	r1, #1
 8007460:	5499      	strb	r1, [r3, r2]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	223f      	movs	r2, #63	@ 0x3f
 8007466:	2101      	movs	r1, #1
 8007468:	5499      	strb	r1, [r3, r2]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2240      	movs	r2, #64	@ 0x40
 800746e:	2101      	movs	r1, #1
 8007470:	5499      	strb	r1, [r3, r2]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2241      	movs	r2, #65	@ 0x41
 8007476:	2101      	movs	r1, #1
 8007478:	5499      	strb	r1, [r3, r2]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2242      	movs	r2, #66	@ 0x42
 800747e:	2101      	movs	r1, #1
 8007480:	5499      	strb	r1, [r3, r2]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2243      	movs	r2, #67	@ 0x43
 8007486:	2101      	movs	r1, #1
 8007488:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2244      	movs	r2, #68	@ 0x44
 800748e:	2101      	movs	r1, #1
 8007490:	5499      	strb	r1, [r3, r2]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2245      	movs	r2, #69	@ 0x45
 8007496:	2101      	movs	r1, #1
 8007498:	5499      	strb	r1, [r3, r2]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2246      	movs	r2, #70	@ 0x46
 800749e:	2101      	movs	r1, #1
 80074a0:	5499      	strb	r1, [r3, r2]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2247      	movs	r2, #71	@ 0x47
 80074a6:	2101      	movs	r1, #1
 80074a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	223d      	movs	r2, #61	@ 0x3d
 80074ae:	2101      	movs	r1, #1
 80074b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	0018      	movs	r0, r3
 80074b6:	46bd      	mov	sp, r7
 80074b8:	b002      	add	sp, #8
 80074ba:	bd80      	pop	{r7, pc}

080074bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80074c4:	46c0      	nop			@ (mov r8, r8)
 80074c6:	46bd      	mov	sp, r7
 80074c8:	b002      	add	sp, #8
 80074ca:	bd80      	pop	{r7, pc}

080074cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d108      	bne.n	80074ee <HAL_TIM_PWM_Start+0x22>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	223e      	movs	r2, #62	@ 0x3e
 80074e0:	5c9b      	ldrb	r3, [r3, r2]
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	3b01      	subs	r3, #1
 80074e6:	1e5a      	subs	r2, r3, #1
 80074e8:	4193      	sbcs	r3, r2
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	e037      	b.n	800755e <HAL_TIM_PWM_Start+0x92>
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	2b04      	cmp	r3, #4
 80074f2:	d108      	bne.n	8007506 <HAL_TIM_PWM_Start+0x3a>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	223f      	movs	r2, #63	@ 0x3f
 80074f8:	5c9b      	ldrb	r3, [r3, r2]
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	3b01      	subs	r3, #1
 80074fe:	1e5a      	subs	r2, r3, #1
 8007500:	4193      	sbcs	r3, r2
 8007502:	b2db      	uxtb	r3, r3
 8007504:	e02b      	b.n	800755e <HAL_TIM_PWM_Start+0x92>
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2b08      	cmp	r3, #8
 800750a:	d108      	bne.n	800751e <HAL_TIM_PWM_Start+0x52>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2240      	movs	r2, #64	@ 0x40
 8007510:	5c9b      	ldrb	r3, [r3, r2]
 8007512:	b2db      	uxtb	r3, r3
 8007514:	3b01      	subs	r3, #1
 8007516:	1e5a      	subs	r2, r3, #1
 8007518:	4193      	sbcs	r3, r2
 800751a:	b2db      	uxtb	r3, r3
 800751c:	e01f      	b.n	800755e <HAL_TIM_PWM_Start+0x92>
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b0c      	cmp	r3, #12
 8007522:	d108      	bne.n	8007536 <HAL_TIM_PWM_Start+0x6a>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2241      	movs	r2, #65	@ 0x41
 8007528:	5c9b      	ldrb	r3, [r3, r2]
 800752a:	b2db      	uxtb	r3, r3
 800752c:	3b01      	subs	r3, #1
 800752e:	1e5a      	subs	r2, r3, #1
 8007530:	4193      	sbcs	r3, r2
 8007532:	b2db      	uxtb	r3, r3
 8007534:	e013      	b.n	800755e <HAL_TIM_PWM_Start+0x92>
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	2b10      	cmp	r3, #16
 800753a:	d108      	bne.n	800754e <HAL_TIM_PWM_Start+0x82>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2242      	movs	r2, #66	@ 0x42
 8007540:	5c9b      	ldrb	r3, [r3, r2]
 8007542:	b2db      	uxtb	r3, r3
 8007544:	3b01      	subs	r3, #1
 8007546:	1e5a      	subs	r2, r3, #1
 8007548:	4193      	sbcs	r3, r2
 800754a:	b2db      	uxtb	r3, r3
 800754c:	e007      	b.n	800755e <HAL_TIM_PWM_Start+0x92>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2243      	movs	r2, #67	@ 0x43
 8007552:	5c9b      	ldrb	r3, [r3, r2]
 8007554:	b2db      	uxtb	r3, r3
 8007556:	3b01      	subs	r3, #1
 8007558:	1e5a      	subs	r2, r3, #1
 800755a:	4193      	sbcs	r3, r2
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d001      	beq.n	8007566 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e090      	b.n	8007688 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d104      	bne.n	8007576 <HAL_TIM_PWM_Start+0xaa>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	223e      	movs	r2, #62	@ 0x3e
 8007570:	2102      	movs	r1, #2
 8007572:	5499      	strb	r1, [r3, r2]
 8007574:	e023      	b.n	80075be <HAL_TIM_PWM_Start+0xf2>
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	2b04      	cmp	r3, #4
 800757a:	d104      	bne.n	8007586 <HAL_TIM_PWM_Start+0xba>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	223f      	movs	r2, #63	@ 0x3f
 8007580:	2102      	movs	r1, #2
 8007582:	5499      	strb	r1, [r3, r2]
 8007584:	e01b      	b.n	80075be <HAL_TIM_PWM_Start+0xf2>
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	2b08      	cmp	r3, #8
 800758a:	d104      	bne.n	8007596 <HAL_TIM_PWM_Start+0xca>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2240      	movs	r2, #64	@ 0x40
 8007590:	2102      	movs	r1, #2
 8007592:	5499      	strb	r1, [r3, r2]
 8007594:	e013      	b.n	80075be <HAL_TIM_PWM_Start+0xf2>
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b0c      	cmp	r3, #12
 800759a:	d104      	bne.n	80075a6 <HAL_TIM_PWM_Start+0xda>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2241      	movs	r2, #65	@ 0x41
 80075a0:	2102      	movs	r1, #2
 80075a2:	5499      	strb	r1, [r3, r2]
 80075a4:	e00b      	b.n	80075be <HAL_TIM_PWM_Start+0xf2>
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	2b10      	cmp	r3, #16
 80075aa:	d104      	bne.n	80075b6 <HAL_TIM_PWM_Start+0xea>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2242      	movs	r2, #66	@ 0x42
 80075b0:	2102      	movs	r1, #2
 80075b2:	5499      	strb	r1, [r3, r2]
 80075b4:	e003      	b.n	80075be <HAL_TIM_PWM_Start+0xf2>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2243      	movs	r2, #67	@ 0x43
 80075ba:	2102      	movs	r1, #2
 80075bc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6839      	ldr	r1, [r7, #0]
 80075c4:	2201      	movs	r2, #1
 80075c6:	0018      	movs	r0, r3
 80075c8:	f000 fd58 	bl	800807c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a2f      	ldr	r2, [pc, #188]	@ (8007690 <HAL_TIM_PWM_Start+0x1c4>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d00e      	beq.n	80075f4 <HAL_TIM_PWM_Start+0x128>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a2e      	ldr	r2, [pc, #184]	@ (8007694 <HAL_TIM_PWM_Start+0x1c8>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d009      	beq.n	80075f4 <HAL_TIM_PWM_Start+0x128>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a2c      	ldr	r2, [pc, #176]	@ (8007698 <HAL_TIM_PWM_Start+0x1cc>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d004      	beq.n	80075f4 <HAL_TIM_PWM_Start+0x128>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a2b      	ldr	r2, [pc, #172]	@ (800769c <HAL_TIM_PWM_Start+0x1d0>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d101      	bne.n	80075f8 <HAL_TIM_PWM_Start+0x12c>
 80075f4:	2301      	movs	r3, #1
 80075f6:	e000      	b.n	80075fa <HAL_TIM_PWM_Start+0x12e>
 80075f8:	2300      	movs	r3, #0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d008      	beq.n	8007610 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2180      	movs	r1, #128	@ 0x80
 800760a:	0209      	lsls	r1, r1, #8
 800760c:	430a      	orrs	r2, r1
 800760e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a1e      	ldr	r2, [pc, #120]	@ (8007690 <HAL_TIM_PWM_Start+0x1c4>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d014      	beq.n	8007644 <HAL_TIM_PWM_Start+0x178>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	2380      	movs	r3, #128	@ 0x80
 8007620:	05db      	lsls	r3, r3, #23
 8007622:	429a      	cmp	r2, r3
 8007624:	d00e      	beq.n	8007644 <HAL_TIM_PWM_Start+0x178>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a1d      	ldr	r2, [pc, #116]	@ (80076a0 <HAL_TIM_PWM_Start+0x1d4>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d009      	beq.n	8007644 <HAL_TIM_PWM_Start+0x178>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a1b      	ldr	r2, [pc, #108]	@ (80076a4 <HAL_TIM_PWM_Start+0x1d8>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d004      	beq.n	8007644 <HAL_TIM_PWM_Start+0x178>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a15      	ldr	r2, [pc, #84]	@ (8007694 <HAL_TIM_PWM_Start+0x1c8>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d116      	bne.n	8007672 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	4a17      	ldr	r2, [pc, #92]	@ (80076a8 <HAL_TIM_PWM_Start+0x1dc>)
 800764c:	4013      	ands	r3, r2
 800764e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2b06      	cmp	r3, #6
 8007654:	d016      	beq.n	8007684 <HAL_TIM_PWM_Start+0x1b8>
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	2380      	movs	r3, #128	@ 0x80
 800765a:	025b      	lsls	r3, r3, #9
 800765c:	429a      	cmp	r2, r3
 800765e:	d011      	beq.n	8007684 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2101      	movs	r1, #1
 800766c:	430a      	orrs	r2, r1
 800766e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007670:	e008      	b.n	8007684 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2101      	movs	r1, #1
 800767e:	430a      	orrs	r2, r1
 8007680:	601a      	str	r2, [r3, #0]
 8007682:	e000      	b.n	8007686 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007684:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	0018      	movs	r0, r3
 800768a:	46bd      	mov	sp, r7
 800768c:	b004      	add	sp, #16
 800768e:	bd80      	pop	{r7, pc}
 8007690:	40012c00 	.word	0x40012c00
 8007694:	40014000 	.word	0x40014000
 8007698:	40014400 	.word	0x40014400
 800769c:	40014800 	.word	0x40014800
 80076a0:	40000400 	.word	0x40000400
 80076a4:	40000800 	.word	0x40000800
 80076a8:	00010007 	.word	0x00010007

080076ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	2200      	movs	r2, #0
 80076be:	0018      	movs	r0, r3
 80076c0:	f000 fcdc 	bl	800807c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a37      	ldr	r2, [pc, #220]	@ (80077a8 <HAL_TIM_PWM_Stop+0xfc>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d00e      	beq.n	80076ec <HAL_TIM_PWM_Stop+0x40>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a36      	ldr	r2, [pc, #216]	@ (80077ac <HAL_TIM_PWM_Stop+0x100>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d009      	beq.n	80076ec <HAL_TIM_PWM_Stop+0x40>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a34      	ldr	r2, [pc, #208]	@ (80077b0 <HAL_TIM_PWM_Stop+0x104>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d004      	beq.n	80076ec <HAL_TIM_PWM_Stop+0x40>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a33      	ldr	r2, [pc, #204]	@ (80077b4 <HAL_TIM_PWM_Stop+0x108>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d101      	bne.n	80076f0 <HAL_TIM_PWM_Stop+0x44>
 80076ec:	2301      	movs	r3, #1
 80076ee:	e000      	b.n	80076f2 <HAL_TIM_PWM_Stop+0x46>
 80076f0:	2300      	movs	r3, #0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d013      	beq.n	800771e <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	6a1b      	ldr	r3, [r3, #32]
 80076fc:	4a2e      	ldr	r2, [pc, #184]	@ (80077b8 <HAL_TIM_PWM_Stop+0x10c>)
 80076fe:	4013      	ands	r3, r2
 8007700:	d10d      	bne.n	800771e <HAL_TIM_PWM_Stop+0x72>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	6a1b      	ldr	r3, [r3, #32]
 8007708:	4a2c      	ldr	r2, [pc, #176]	@ (80077bc <HAL_TIM_PWM_Stop+0x110>)
 800770a:	4013      	ands	r3, r2
 800770c:	d107      	bne.n	800771e <HAL_TIM_PWM_Stop+0x72>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4929      	ldr	r1, [pc, #164]	@ (80077c0 <HAL_TIM_PWM_Stop+0x114>)
 800771a:	400a      	ands	r2, r1
 800771c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	6a1b      	ldr	r3, [r3, #32]
 8007724:	4a24      	ldr	r2, [pc, #144]	@ (80077b8 <HAL_TIM_PWM_Stop+0x10c>)
 8007726:	4013      	ands	r3, r2
 8007728:	d10d      	bne.n	8007746 <HAL_TIM_PWM_Stop+0x9a>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	4a22      	ldr	r2, [pc, #136]	@ (80077bc <HAL_TIM_PWM_Stop+0x110>)
 8007732:	4013      	ands	r3, r2
 8007734:	d107      	bne.n	8007746 <HAL_TIM_PWM_Stop+0x9a>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2101      	movs	r1, #1
 8007742:	438a      	bics	r2, r1
 8007744:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d104      	bne.n	8007756 <HAL_TIM_PWM_Stop+0xaa>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	223e      	movs	r2, #62	@ 0x3e
 8007750:	2101      	movs	r1, #1
 8007752:	5499      	strb	r1, [r3, r2]
 8007754:	e023      	b.n	800779e <HAL_TIM_PWM_Stop+0xf2>
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	2b04      	cmp	r3, #4
 800775a:	d104      	bne.n	8007766 <HAL_TIM_PWM_Stop+0xba>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	223f      	movs	r2, #63	@ 0x3f
 8007760:	2101      	movs	r1, #1
 8007762:	5499      	strb	r1, [r3, r2]
 8007764:	e01b      	b.n	800779e <HAL_TIM_PWM_Stop+0xf2>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	2b08      	cmp	r3, #8
 800776a:	d104      	bne.n	8007776 <HAL_TIM_PWM_Stop+0xca>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2240      	movs	r2, #64	@ 0x40
 8007770:	2101      	movs	r1, #1
 8007772:	5499      	strb	r1, [r3, r2]
 8007774:	e013      	b.n	800779e <HAL_TIM_PWM_Stop+0xf2>
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	2b0c      	cmp	r3, #12
 800777a:	d104      	bne.n	8007786 <HAL_TIM_PWM_Stop+0xda>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2241      	movs	r2, #65	@ 0x41
 8007780:	2101      	movs	r1, #1
 8007782:	5499      	strb	r1, [r3, r2]
 8007784:	e00b      	b.n	800779e <HAL_TIM_PWM_Stop+0xf2>
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	2b10      	cmp	r3, #16
 800778a:	d104      	bne.n	8007796 <HAL_TIM_PWM_Stop+0xea>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2242      	movs	r2, #66	@ 0x42
 8007790:	2101      	movs	r1, #1
 8007792:	5499      	strb	r1, [r3, r2]
 8007794:	e003      	b.n	800779e <HAL_TIM_PWM_Stop+0xf2>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2243      	movs	r2, #67	@ 0x43
 800779a:	2101      	movs	r1, #1
 800779c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	0018      	movs	r0, r3
 80077a2:	46bd      	mov	sp, r7
 80077a4:	b002      	add	sp, #8
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	40012c00 	.word	0x40012c00
 80077ac:	40014000 	.word	0x40014000
 80077b0:	40014400 	.word	0x40014400
 80077b4:	40014800 	.word	0x40014800
 80077b8:	00001111 	.word	0x00001111
 80077bc:	00000444 	.word	0x00000444
 80077c0:	ffff7fff 	.word	0xffff7fff

080077c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077d0:	2317      	movs	r3, #23
 80077d2:	18fb      	adds	r3, r7, r3
 80077d4:	2200      	movs	r2, #0
 80077d6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	223c      	movs	r2, #60	@ 0x3c
 80077dc:	5c9b      	ldrb	r3, [r3, r2]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d101      	bne.n	80077e6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80077e2:	2302      	movs	r3, #2
 80077e4:	e0e5      	b.n	80079b2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	223c      	movs	r2, #60	@ 0x3c
 80077ea:	2101      	movs	r1, #1
 80077ec:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2b14      	cmp	r3, #20
 80077f2:	d900      	bls.n	80077f6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80077f4:	e0d1      	b.n	800799a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	009a      	lsls	r2, r3, #2
 80077fa:	4b70      	ldr	r3, [pc, #448]	@ (80079bc <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80077fc:	18d3      	adds	r3, r2, r3
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	0011      	movs	r1, r2
 800780a:	0018      	movs	r0, r3
 800780c:	f000 f972 	bl	8007af4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	699a      	ldr	r2, [r3, #24]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2108      	movs	r1, #8
 800781c:	430a      	orrs	r2, r1
 800781e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	699a      	ldr	r2, [r3, #24]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2104      	movs	r1, #4
 800782c:	438a      	bics	r2, r1
 800782e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6999      	ldr	r1, [r3, #24]
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	691a      	ldr	r2, [r3, #16]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	430a      	orrs	r2, r1
 8007840:	619a      	str	r2, [r3, #24]
      break;
 8007842:	e0af      	b.n	80079a4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68ba      	ldr	r2, [r7, #8]
 800784a:	0011      	movs	r1, r2
 800784c:	0018      	movs	r0, r3
 800784e:	f000 f9db 	bl	8007c08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	699a      	ldr	r2, [r3, #24]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2180      	movs	r1, #128	@ 0x80
 800785e:	0109      	lsls	r1, r1, #4
 8007860:	430a      	orrs	r2, r1
 8007862:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	699a      	ldr	r2, [r3, #24]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4954      	ldr	r1, [pc, #336]	@ (80079c0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007870:	400a      	ands	r2, r1
 8007872:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6999      	ldr	r1, [r3, #24]
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	691b      	ldr	r3, [r3, #16]
 800787e:	021a      	lsls	r2, r3, #8
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	430a      	orrs	r2, r1
 8007886:	619a      	str	r2, [r3, #24]
      break;
 8007888:	e08c      	b.n	80079a4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	0011      	movs	r1, r2
 8007892:	0018      	movs	r0, r3
 8007894:	f000 fa3c 	bl	8007d10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	69da      	ldr	r2, [r3, #28]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2108      	movs	r1, #8
 80078a4:	430a      	orrs	r2, r1
 80078a6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	69da      	ldr	r2, [r3, #28]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2104      	movs	r1, #4
 80078b4:	438a      	bics	r2, r1
 80078b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	69d9      	ldr	r1, [r3, #28]
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	691a      	ldr	r2, [r3, #16]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	430a      	orrs	r2, r1
 80078c8:	61da      	str	r2, [r3, #28]
      break;
 80078ca:	e06b      	b.n	80079a4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68ba      	ldr	r2, [r7, #8]
 80078d2:	0011      	movs	r1, r2
 80078d4:	0018      	movs	r0, r3
 80078d6:	f000 faa3 	bl	8007e20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	69da      	ldr	r2, [r3, #28]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2180      	movs	r1, #128	@ 0x80
 80078e6:	0109      	lsls	r1, r1, #4
 80078e8:	430a      	orrs	r2, r1
 80078ea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	69da      	ldr	r2, [r3, #28]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4932      	ldr	r1, [pc, #200]	@ (80079c0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80078f8:	400a      	ands	r2, r1
 80078fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	69d9      	ldr	r1, [r3, #28]
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	021a      	lsls	r2, r3, #8
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	430a      	orrs	r2, r1
 800790e:	61da      	str	r2, [r3, #28]
      break;
 8007910:	e048      	b.n	80079a4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	0011      	movs	r1, r2
 800791a:	0018      	movs	r0, r3
 800791c:	f000 faea 	bl	8007ef4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2108      	movs	r1, #8
 800792c:	430a      	orrs	r2, r1
 800792e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2104      	movs	r1, #4
 800793c:	438a      	bics	r2, r1
 800793e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	691a      	ldr	r2, [r3, #16]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	430a      	orrs	r2, r1
 8007950:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007952:	e027      	b.n	80079a4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	0011      	movs	r1, r2
 800795c:	0018      	movs	r0, r3
 800795e:	f000 fb29 	bl	8007fb4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2180      	movs	r1, #128	@ 0x80
 800796e:	0109      	lsls	r1, r1, #4
 8007970:	430a      	orrs	r2, r1
 8007972:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4910      	ldr	r1, [pc, #64]	@ (80079c0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007980:	400a      	ands	r2, r1
 8007982:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	021a      	lsls	r2, r3, #8
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	430a      	orrs	r2, r1
 8007996:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007998:	e004      	b.n	80079a4 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800799a:	2317      	movs	r3, #23
 800799c:	18fb      	adds	r3, r7, r3
 800799e:	2201      	movs	r2, #1
 80079a0:	701a      	strb	r2, [r3, #0]
      break;
 80079a2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	223c      	movs	r2, #60	@ 0x3c
 80079a8:	2100      	movs	r1, #0
 80079aa:	5499      	strb	r1, [r3, r2]

  return status;
 80079ac:	2317      	movs	r3, #23
 80079ae:	18fb      	adds	r3, r7, r3
 80079b0:	781b      	ldrb	r3, [r3, #0]
}
 80079b2:	0018      	movs	r0, r3
 80079b4:	46bd      	mov	sp, r7
 80079b6:	b006      	add	sp, #24
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	46c0      	nop			@ (mov r8, r8)
 80079bc:	0800a4c4 	.word	0x0800a4c4
 80079c0:	fffffbff 	.word	0xfffffbff

080079c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a3f      	ldr	r2, [pc, #252]	@ (8007ad4 <TIM_Base_SetConfig+0x110>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d00c      	beq.n	80079f6 <TIM_Base_SetConfig+0x32>
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	2380      	movs	r3, #128	@ 0x80
 80079e0:	05db      	lsls	r3, r3, #23
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d007      	beq.n	80079f6 <TIM_Base_SetConfig+0x32>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a3b      	ldr	r2, [pc, #236]	@ (8007ad8 <TIM_Base_SetConfig+0x114>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d003      	beq.n	80079f6 <TIM_Base_SetConfig+0x32>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a3a      	ldr	r2, [pc, #232]	@ (8007adc <TIM_Base_SetConfig+0x118>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d108      	bne.n	8007a08 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2270      	movs	r2, #112	@ 0x70
 80079fa:	4393      	bics	r3, r2
 80079fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a32      	ldr	r2, [pc, #200]	@ (8007ad4 <TIM_Base_SetConfig+0x110>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d01c      	beq.n	8007a4a <TIM_Base_SetConfig+0x86>
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	2380      	movs	r3, #128	@ 0x80
 8007a14:	05db      	lsls	r3, r3, #23
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d017      	beq.n	8007a4a <TIM_Base_SetConfig+0x86>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a2e      	ldr	r2, [pc, #184]	@ (8007ad8 <TIM_Base_SetConfig+0x114>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d013      	beq.n	8007a4a <TIM_Base_SetConfig+0x86>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a2d      	ldr	r2, [pc, #180]	@ (8007adc <TIM_Base_SetConfig+0x118>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d00f      	beq.n	8007a4a <TIM_Base_SetConfig+0x86>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a2c      	ldr	r2, [pc, #176]	@ (8007ae0 <TIM_Base_SetConfig+0x11c>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d00b      	beq.n	8007a4a <TIM_Base_SetConfig+0x86>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a2b      	ldr	r2, [pc, #172]	@ (8007ae4 <TIM_Base_SetConfig+0x120>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d007      	beq.n	8007a4a <TIM_Base_SetConfig+0x86>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a2a      	ldr	r2, [pc, #168]	@ (8007ae8 <TIM_Base_SetConfig+0x124>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d003      	beq.n	8007a4a <TIM_Base_SetConfig+0x86>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a29      	ldr	r2, [pc, #164]	@ (8007aec <TIM_Base_SetConfig+0x128>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d108      	bne.n	8007a5c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	4a28      	ldr	r2, [pc, #160]	@ (8007af0 <TIM_Base_SetConfig+0x12c>)
 8007a4e:	4013      	ands	r3, r2
 8007a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2280      	movs	r2, #128	@ 0x80
 8007a60:	4393      	bics	r3, r2
 8007a62:	001a      	movs	r2, r3
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	695b      	ldr	r3, [r3, #20]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	689a      	ldr	r2, [r3, #8]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a13      	ldr	r2, [pc, #76]	@ (8007ad4 <TIM_Base_SetConfig+0x110>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d00b      	beq.n	8007aa2 <TIM_Base_SetConfig+0xde>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a15      	ldr	r2, [pc, #84]	@ (8007ae4 <TIM_Base_SetConfig+0x120>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d007      	beq.n	8007aa2 <TIM_Base_SetConfig+0xde>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a14      	ldr	r2, [pc, #80]	@ (8007ae8 <TIM_Base_SetConfig+0x124>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d003      	beq.n	8007aa2 <TIM_Base_SetConfig+0xde>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a13      	ldr	r2, [pc, #76]	@ (8007aec <TIM_Base_SetConfig+0x128>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d103      	bne.n	8007aaa <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	691a      	ldr	r2, [r3, #16]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d106      	bne.n	8007aca <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	4393      	bics	r3, r2
 8007ac4:	001a      	movs	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	611a      	str	r2, [r3, #16]
  }
}
 8007aca:	46c0      	nop			@ (mov r8, r8)
 8007acc:	46bd      	mov	sp, r7
 8007ace:	b004      	add	sp, #16
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	46c0      	nop			@ (mov r8, r8)
 8007ad4:	40012c00 	.word	0x40012c00
 8007ad8:	40000400 	.word	0x40000400
 8007adc:	40000800 	.word	0x40000800
 8007ae0:	40002000 	.word	0x40002000
 8007ae4:	40014000 	.word	0x40014000
 8007ae8:	40014400 	.word	0x40014400
 8007aec:	40014800 	.word	0x40014800
 8007af0:	fffffcff 	.word	0xfffffcff

08007af4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a1b      	ldr	r3, [r3, #32]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	4393      	bics	r3, r2
 8007b0c:	001a      	movs	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	4a32      	ldr	r2, [pc, #200]	@ (8007bec <TIM_OC1_SetConfig+0xf8>)
 8007b22:	4013      	ands	r3, r2
 8007b24:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2203      	movs	r2, #3
 8007b2a:	4393      	bics	r3, r2
 8007b2c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	4393      	bics	r3, r2
 8007b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a28      	ldr	r2, [pc, #160]	@ (8007bf0 <TIM_OC1_SetConfig+0xfc>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d00b      	beq.n	8007b6a <TIM_OC1_SetConfig+0x76>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a27      	ldr	r2, [pc, #156]	@ (8007bf4 <TIM_OC1_SetConfig+0x100>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d007      	beq.n	8007b6a <TIM_OC1_SetConfig+0x76>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a26      	ldr	r2, [pc, #152]	@ (8007bf8 <TIM_OC1_SetConfig+0x104>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d003      	beq.n	8007b6a <TIM_OC1_SetConfig+0x76>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a25      	ldr	r2, [pc, #148]	@ (8007bfc <TIM_OC1_SetConfig+0x108>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d10c      	bne.n	8007b84 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	2208      	movs	r2, #8
 8007b6e:	4393      	bics	r3, r2
 8007b70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	697a      	ldr	r2, [r7, #20]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	2204      	movs	r2, #4
 8007b80:	4393      	bics	r3, r2
 8007b82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a1a      	ldr	r2, [pc, #104]	@ (8007bf0 <TIM_OC1_SetConfig+0xfc>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d00b      	beq.n	8007ba4 <TIM_OC1_SetConfig+0xb0>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a19      	ldr	r2, [pc, #100]	@ (8007bf4 <TIM_OC1_SetConfig+0x100>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d007      	beq.n	8007ba4 <TIM_OC1_SetConfig+0xb0>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a18      	ldr	r2, [pc, #96]	@ (8007bf8 <TIM_OC1_SetConfig+0x104>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d003      	beq.n	8007ba4 <TIM_OC1_SetConfig+0xb0>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a17      	ldr	r2, [pc, #92]	@ (8007bfc <TIM_OC1_SetConfig+0x108>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d111      	bne.n	8007bc8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	4a16      	ldr	r2, [pc, #88]	@ (8007c00 <TIM_OC1_SetConfig+0x10c>)
 8007ba8:	4013      	ands	r3, r2
 8007baa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	4a15      	ldr	r2, [pc, #84]	@ (8007c04 <TIM_OC1_SetConfig+0x110>)
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	685a      	ldr	r2, [r3, #4]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	621a      	str	r2, [r3, #32]
}
 8007be2:	46c0      	nop			@ (mov r8, r8)
 8007be4:	46bd      	mov	sp, r7
 8007be6:	b006      	add	sp, #24
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	46c0      	nop			@ (mov r8, r8)
 8007bec:	fffeff8f 	.word	0xfffeff8f
 8007bf0:	40012c00 	.word	0x40012c00
 8007bf4:	40014000 	.word	0x40014000
 8007bf8:	40014400 	.word	0x40014400
 8007bfc:	40014800 	.word	0x40014800
 8007c00:	fffffeff 	.word	0xfffffeff
 8007c04:	fffffdff 	.word	0xfffffdff

08007c08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a1b      	ldr	r3, [r3, #32]
 8007c1c:	2210      	movs	r2, #16
 8007c1e:	4393      	bics	r3, r2
 8007c20:	001a      	movs	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	4a2e      	ldr	r2, [pc, #184]	@ (8007cf0 <TIM_OC2_SetConfig+0xe8>)
 8007c36:	4013      	ands	r3, r2
 8007c38:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	4a2d      	ldr	r2, [pc, #180]	@ (8007cf4 <TIM_OC2_SetConfig+0xec>)
 8007c3e:	4013      	ands	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	021b      	lsls	r3, r3, #8
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	2220      	movs	r2, #32
 8007c52:	4393      	bics	r3, r2
 8007c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	011b      	lsls	r3, r3, #4
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a24      	ldr	r2, [pc, #144]	@ (8007cf8 <TIM_OC2_SetConfig+0xf0>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d10d      	bne.n	8007c86 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	2280      	movs	r2, #128	@ 0x80
 8007c6e:	4393      	bics	r3, r2
 8007c70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	011b      	lsls	r3, r3, #4
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	2240      	movs	r2, #64	@ 0x40
 8007c82:	4393      	bics	r3, r2
 8007c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a1b      	ldr	r2, [pc, #108]	@ (8007cf8 <TIM_OC2_SetConfig+0xf0>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d00b      	beq.n	8007ca6 <TIM_OC2_SetConfig+0x9e>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a1a      	ldr	r2, [pc, #104]	@ (8007cfc <TIM_OC2_SetConfig+0xf4>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d007      	beq.n	8007ca6 <TIM_OC2_SetConfig+0x9e>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a19      	ldr	r2, [pc, #100]	@ (8007d00 <TIM_OC2_SetConfig+0xf8>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d003      	beq.n	8007ca6 <TIM_OC2_SetConfig+0x9e>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a18      	ldr	r2, [pc, #96]	@ (8007d04 <TIM_OC2_SetConfig+0xfc>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d113      	bne.n	8007cce <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	4a17      	ldr	r2, [pc, #92]	@ (8007d08 <TIM_OC2_SetConfig+0x100>)
 8007caa:	4013      	ands	r3, r2
 8007cac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	4a16      	ldr	r2, [pc, #88]	@ (8007d0c <TIM_OC2_SetConfig+0x104>)
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	693a      	ldr	r2, [r7, #16]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	685a      	ldr	r2, [r3, #4]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	621a      	str	r2, [r3, #32]
}
 8007ce8:	46c0      	nop			@ (mov r8, r8)
 8007cea:	46bd      	mov	sp, r7
 8007cec:	b006      	add	sp, #24
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	feff8fff 	.word	0xfeff8fff
 8007cf4:	fffffcff 	.word	0xfffffcff
 8007cf8:	40012c00 	.word	0x40012c00
 8007cfc:	40014000 	.word	0x40014000
 8007d00:	40014400 	.word	0x40014400
 8007d04:	40014800 	.word	0x40014800
 8007d08:	fffffbff 	.word	0xfffffbff
 8007d0c:	fffff7ff 	.word	0xfffff7ff

08007d10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a1b      	ldr	r3, [r3, #32]
 8007d1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6a1b      	ldr	r3, [r3, #32]
 8007d24:	4a33      	ldr	r2, [pc, #204]	@ (8007df4 <TIM_OC3_SetConfig+0xe4>)
 8007d26:	401a      	ands	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	69db      	ldr	r3, [r3, #28]
 8007d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4a2f      	ldr	r2, [pc, #188]	@ (8007df8 <TIM_OC3_SetConfig+0xe8>)
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2203      	movs	r2, #3
 8007d44:	4393      	bics	r3, r2
 8007d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	4a29      	ldr	r2, [pc, #164]	@ (8007dfc <TIM_OC3_SetConfig+0xec>)
 8007d56:	4013      	ands	r3, r2
 8007d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	021b      	lsls	r3, r3, #8
 8007d60:	697a      	ldr	r2, [r7, #20]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a25      	ldr	r2, [pc, #148]	@ (8007e00 <TIM_OC3_SetConfig+0xf0>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d10d      	bne.n	8007d8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	4a24      	ldr	r2, [pc, #144]	@ (8007e04 <TIM_OC3_SetConfig+0xf4>)
 8007d72:	4013      	ands	r3, r2
 8007d74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	021b      	lsls	r3, r3, #8
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	4a20      	ldr	r2, [pc, #128]	@ (8007e08 <TIM_OC3_SetConfig+0xf8>)
 8007d86:	4013      	ands	r3, r2
 8007d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8007e00 <TIM_OC3_SetConfig+0xf0>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d00b      	beq.n	8007daa <TIM_OC3_SetConfig+0x9a>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a1d      	ldr	r2, [pc, #116]	@ (8007e0c <TIM_OC3_SetConfig+0xfc>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d007      	beq.n	8007daa <TIM_OC3_SetConfig+0x9a>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8007e10 <TIM_OC3_SetConfig+0x100>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d003      	beq.n	8007daa <TIM_OC3_SetConfig+0x9a>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a1b      	ldr	r2, [pc, #108]	@ (8007e14 <TIM_OC3_SetConfig+0x104>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d113      	bne.n	8007dd2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	4a1a      	ldr	r2, [pc, #104]	@ (8007e18 <TIM_OC3_SetConfig+0x108>)
 8007dae:	4013      	ands	r3, r2
 8007db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	4a19      	ldr	r2, [pc, #100]	@ (8007e1c <TIM_OC3_SetConfig+0x10c>)
 8007db6:	4013      	ands	r3, r2
 8007db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	011b      	lsls	r3, r3, #4
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	011b      	lsls	r3, r3, #4
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685a      	ldr	r2, [r3, #4]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	697a      	ldr	r2, [r7, #20]
 8007dea:	621a      	str	r2, [r3, #32]
}
 8007dec:	46c0      	nop			@ (mov r8, r8)
 8007dee:	46bd      	mov	sp, r7
 8007df0:	b006      	add	sp, #24
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	fffffeff 	.word	0xfffffeff
 8007df8:	fffeff8f 	.word	0xfffeff8f
 8007dfc:	fffffdff 	.word	0xfffffdff
 8007e00:	40012c00 	.word	0x40012c00
 8007e04:	fffff7ff 	.word	0xfffff7ff
 8007e08:	fffffbff 	.word	0xfffffbff
 8007e0c:	40014000 	.word	0x40014000
 8007e10:	40014400 	.word	0x40014400
 8007e14:	40014800 	.word	0x40014800
 8007e18:	ffffefff 	.word	0xffffefff
 8007e1c:	ffffdfff 	.word	0xffffdfff

08007e20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a1b      	ldr	r3, [r3, #32]
 8007e34:	4a26      	ldr	r2, [pc, #152]	@ (8007ed0 <TIM_OC4_SetConfig+0xb0>)
 8007e36:	401a      	ands	r2, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	69db      	ldr	r3, [r3, #28]
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	4a22      	ldr	r2, [pc, #136]	@ (8007ed4 <TIM_OC4_SetConfig+0xb4>)
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	4a21      	ldr	r2, [pc, #132]	@ (8007ed8 <TIM_OC4_SetConfig+0xb8>)
 8007e54:	4013      	ands	r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	021b      	lsls	r3, r3, #8
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	4a1d      	ldr	r2, [pc, #116]	@ (8007edc <TIM_OC4_SetConfig+0xbc>)
 8007e68:	4013      	ands	r3, r2
 8007e6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	031b      	lsls	r3, r3, #12
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a19      	ldr	r2, [pc, #100]	@ (8007ee0 <TIM_OC4_SetConfig+0xc0>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d00b      	beq.n	8007e98 <TIM_OC4_SetConfig+0x78>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a18      	ldr	r2, [pc, #96]	@ (8007ee4 <TIM_OC4_SetConfig+0xc4>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d007      	beq.n	8007e98 <TIM_OC4_SetConfig+0x78>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a17      	ldr	r2, [pc, #92]	@ (8007ee8 <TIM_OC4_SetConfig+0xc8>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d003      	beq.n	8007e98 <TIM_OC4_SetConfig+0x78>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a16      	ldr	r2, [pc, #88]	@ (8007eec <TIM_OC4_SetConfig+0xcc>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d109      	bne.n	8007eac <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	4a15      	ldr	r2, [pc, #84]	@ (8007ef0 <TIM_OC4_SetConfig+0xd0>)
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	695b      	ldr	r3, [r3, #20]
 8007ea4:	019b      	lsls	r3, r3, #6
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	693a      	ldr	r2, [r7, #16]
 8007ec4:	621a      	str	r2, [r3, #32]
}
 8007ec6:	46c0      	nop			@ (mov r8, r8)
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	b006      	add	sp, #24
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	46c0      	nop			@ (mov r8, r8)
 8007ed0:	ffffefff 	.word	0xffffefff
 8007ed4:	feff8fff 	.word	0xfeff8fff
 8007ed8:	fffffcff 	.word	0xfffffcff
 8007edc:	ffffdfff 	.word	0xffffdfff
 8007ee0:	40012c00 	.word	0x40012c00
 8007ee4:	40014000 	.word	0x40014000
 8007ee8:	40014400 	.word	0x40014400
 8007eec:	40014800 	.word	0x40014800
 8007ef0:	ffffbfff 	.word	0xffffbfff

08007ef4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a1b      	ldr	r3, [r3, #32]
 8007f02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a1b      	ldr	r3, [r3, #32]
 8007f08:	4a23      	ldr	r2, [pc, #140]	@ (8007f98 <TIM_OC5_SetConfig+0xa4>)
 8007f0a:	401a      	ands	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4a1f      	ldr	r2, [pc, #124]	@ (8007f9c <TIM_OC5_SetConfig+0xa8>)
 8007f20:	4013      	ands	r3, r2
 8007f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	4a1b      	ldr	r2, [pc, #108]	@ (8007fa0 <TIM_OC5_SetConfig+0xac>)
 8007f32:	4013      	ands	r3, r2
 8007f34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	041b      	lsls	r3, r3, #16
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a17      	ldr	r2, [pc, #92]	@ (8007fa4 <TIM_OC5_SetConfig+0xb0>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d00b      	beq.n	8007f62 <TIM_OC5_SetConfig+0x6e>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a16      	ldr	r2, [pc, #88]	@ (8007fa8 <TIM_OC5_SetConfig+0xb4>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d007      	beq.n	8007f62 <TIM_OC5_SetConfig+0x6e>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a15      	ldr	r2, [pc, #84]	@ (8007fac <TIM_OC5_SetConfig+0xb8>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d003      	beq.n	8007f62 <TIM_OC5_SetConfig+0x6e>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a14      	ldr	r2, [pc, #80]	@ (8007fb0 <TIM_OC5_SetConfig+0xbc>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d109      	bne.n	8007f76 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	4a0c      	ldr	r2, [pc, #48]	@ (8007f98 <TIM_OC5_SetConfig+0xa4>)
 8007f66:	4013      	ands	r3, r2
 8007f68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	021b      	lsls	r3, r3, #8
 8007f70:	697a      	ldr	r2, [r7, #20]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	685a      	ldr	r2, [r3, #4]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	621a      	str	r2, [r3, #32]
}
 8007f90:	46c0      	nop			@ (mov r8, r8)
 8007f92:	46bd      	mov	sp, r7
 8007f94:	b006      	add	sp, #24
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	fffeffff 	.word	0xfffeffff
 8007f9c:	fffeff8f 	.word	0xfffeff8f
 8007fa0:	fffdffff 	.word	0xfffdffff
 8007fa4:	40012c00 	.word	0x40012c00
 8007fa8:	40014000 	.word	0x40014000
 8007fac:	40014400 	.word	0x40014400
 8007fb0:	40014800 	.word	0x40014800

08007fb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a1b      	ldr	r3, [r3, #32]
 8007fc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a1b      	ldr	r3, [r3, #32]
 8007fc8:	4a24      	ldr	r2, [pc, #144]	@ (800805c <TIM_OC6_SetConfig+0xa8>)
 8007fca:	401a      	ands	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4a20      	ldr	r2, [pc, #128]	@ (8008060 <TIM_OC6_SetConfig+0xac>)
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	021b      	lsls	r3, r3, #8
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8008064 <TIM_OC6_SetConfig+0xb0>)
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	051b      	lsls	r3, r3, #20
 8007ffe:	693a      	ldr	r2, [r7, #16]
 8008000:	4313      	orrs	r3, r2
 8008002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a18      	ldr	r2, [pc, #96]	@ (8008068 <TIM_OC6_SetConfig+0xb4>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d00b      	beq.n	8008024 <TIM_OC6_SetConfig+0x70>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a17      	ldr	r2, [pc, #92]	@ (800806c <TIM_OC6_SetConfig+0xb8>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d007      	beq.n	8008024 <TIM_OC6_SetConfig+0x70>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a16      	ldr	r2, [pc, #88]	@ (8008070 <TIM_OC6_SetConfig+0xbc>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d003      	beq.n	8008024 <TIM_OC6_SetConfig+0x70>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a15      	ldr	r2, [pc, #84]	@ (8008074 <TIM_OC6_SetConfig+0xc0>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d109      	bne.n	8008038 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	4a14      	ldr	r2, [pc, #80]	@ (8008078 <TIM_OC6_SetConfig+0xc4>)
 8008028:	4013      	ands	r3, r2
 800802a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	695b      	ldr	r3, [r3, #20]
 8008030:	029b      	lsls	r3, r3, #10
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	4313      	orrs	r3, r2
 8008036:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	685a      	ldr	r2, [r3, #4]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	621a      	str	r2, [r3, #32]
}
 8008052:	46c0      	nop			@ (mov r8, r8)
 8008054:	46bd      	mov	sp, r7
 8008056:	b006      	add	sp, #24
 8008058:	bd80      	pop	{r7, pc}
 800805a:	46c0      	nop			@ (mov r8, r8)
 800805c:	ffefffff 	.word	0xffefffff
 8008060:	feff8fff 	.word	0xfeff8fff
 8008064:	ffdfffff 	.word	0xffdfffff
 8008068:	40012c00 	.word	0x40012c00
 800806c:	40014000 	.word	0x40014000
 8008070:	40014400 	.word	0x40014400
 8008074:	40014800 	.word	0x40014800
 8008078:	fffbffff 	.word	0xfffbffff

0800807c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	221f      	movs	r2, #31
 800808c:	4013      	ands	r3, r2
 800808e:	2201      	movs	r2, #1
 8008090:	409a      	lsls	r2, r3
 8008092:	0013      	movs	r3, r2
 8008094:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	697a      	ldr	r2, [r7, #20]
 800809c:	43d2      	mvns	r2, r2
 800809e:	401a      	ands	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6a1a      	ldr	r2, [r3, #32]
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	211f      	movs	r1, #31
 80080ac:	400b      	ands	r3, r1
 80080ae:	6879      	ldr	r1, [r7, #4]
 80080b0:	4099      	lsls	r1, r3
 80080b2:	000b      	movs	r3, r1
 80080b4:	431a      	orrs	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	621a      	str	r2, [r3, #32]
}
 80080ba:	46c0      	nop			@ (mov r8, r8)
 80080bc:	46bd      	mov	sp, r7
 80080be:	b006      	add	sp, #24
 80080c0:	bd80      	pop	{r7, pc}
	...

080080c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80080ce:	2300      	movs	r3, #0
 80080d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	223c      	movs	r2, #60	@ 0x3c
 80080d6:	5c9b      	ldrb	r3, [r3, r2]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d101      	bne.n	80080e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80080dc:	2302      	movs	r3, #2
 80080de:	e06f      	b.n	80081c0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	223c      	movs	r2, #60	@ 0x3c
 80080e4:	2101      	movs	r1, #1
 80080e6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	22ff      	movs	r2, #255	@ 0xff
 80080ec:	4393      	bics	r3, r2
 80080ee:	001a      	movs	r2, r3
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4a33      	ldr	r2, [pc, #204]	@ (80081c8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80080fc:	401a      	ands	r2, r3
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	4313      	orrs	r3, r2
 8008104:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	4a30      	ldr	r2, [pc, #192]	@ (80081cc <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800810a:	401a      	ands	r2, r3
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	4313      	orrs	r3, r2
 8008112:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	4a2e      	ldr	r2, [pc, #184]	@ (80081d0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8008118:	401a      	ands	r2, r3
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4313      	orrs	r3, r2
 8008120:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	4a2b      	ldr	r2, [pc, #172]	@ (80081d4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8008126:	401a      	ands	r2, r3
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	4313      	orrs	r3, r2
 800812e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	4a29      	ldr	r2, [pc, #164]	@ (80081d8 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008134:	401a      	ands	r2, r3
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	4313      	orrs	r3, r2
 800813c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	4a26      	ldr	r2, [pc, #152]	@ (80081dc <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8008142:	401a      	ands	r2, r3
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008148:	4313      	orrs	r3, r2
 800814a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	4a24      	ldr	r2, [pc, #144]	@ (80081e0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008150:	401a      	ands	r2, r3
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	041b      	lsls	r3, r3, #16
 8008158:	4313      	orrs	r3, r2
 800815a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	4a21      	ldr	r2, [pc, #132]	@ (80081e4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008160:	401a      	ands	r2, r3
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	4313      	orrs	r3, r2
 8008168:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a1e      	ldr	r2, [pc, #120]	@ (80081e8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d11c      	bne.n	80081ae <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	4a1d      	ldr	r2, [pc, #116]	@ (80081ec <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008178:	401a      	ands	r2, r3
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800817e:	051b      	lsls	r3, r3, #20
 8008180:	4313      	orrs	r3, r2
 8008182:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	4a1a      	ldr	r2, [pc, #104]	@ (80081f0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008188:	401a      	ands	r2, r3
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	6a1b      	ldr	r3, [r3, #32]
 800818e:	4313      	orrs	r3, r2
 8008190:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	4a17      	ldr	r2, [pc, #92]	@ (80081f4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008196:	401a      	ands	r2, r3
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800819c:	4313      	orrs	r3, r2
 800819e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4a15      	ldr	r2, [pc, #84]	@ (80081f8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80081a4:	401a      	ands	r2, r3
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081aa:	4313      	orrs	r3, r2
 80081ac:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	223c      	movs	r2, #60	@ 0x3c
 80081ba:	2100      	movs	r1, #0
 80081bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	0018      	movs	r0, r3
 80081c2:	46bd      	mov	sp, r7
 80081c4:	b004      	add	sp, #16
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	fffffcff 	.word	0xfffffcff
 80081cc:	fffffbff 	.word	0xfffffbff
 80081d0:	fffff7ff 	.word	0xfffff7ff
 80081d4:	ffffefff 	.word	0xffffefff
 80081d8:	ffffdfff 	.word	0xffffdfff
 80081dc:	ffffbfff 	.word	0xffffbfff
 80081e0:	fff0ffff 	.word	0xfff0ffff
 80081e4:	efffffff 	.word	0xefffffff
 80081e8:	40012c00 	.word	0x40012c00
 80081ec:	ff0fffff 	.word	0xff0fffff
 80081f0:	feffffff 	.word	0xfeffffff
 80081f4:	fdffffff 	.word	0xfdffffff
 80081f8:	dfffffff 	.word	0xdfffffff

080081fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e046      	b.n	800829c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2288      	movs	r2, #136	@ 0x88
 8008212:	589b      	ldr	r3, [r3, r2]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d107      	bne.n	8008228 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2284      	movs	r2, #132	@ 0x84
 800821c:	2100      	movs	r1, #0
 800821e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	0018      	movs	r0, r3
 8008224:	f7fc f82a 	bl	800427c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2288      	movs	r2, #136	@ 0x88
 800822c:	2124      	movs	r1, #36	@ 0x24
 800822e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2101      	movs	r1, #1
 800823c:	438a      	bics	r2, r1
 800823e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008244:	2b00      	cmp	r3, #0
 8008246:	d003      	beq.n	8008250 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	0018      	movs	r0, r3
 800824c:	f000 fc26 	bl	8008a9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	0018      	movs	r0, r3
 8008254:	f000 f8cc 	bl	80083f0 <UART_SetConfig>
 8008258:	0003      	movs	r3, r0
 800825a:	2b01      	cmp	r3, #1
 800825c:	d101      	bne.n	8008262 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e01c      	b.n	800829c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	685a      	ldr	r2, [r3, #4]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	490d      	ldr	r1, [pc, #52]	@ (80082a4 <HAL_UART_Init+0xa8>)
 800826e:	400a      	ands	r2, r1
 8008270:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	689a      	ldr	r2, [r3, #8]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	212a      	movs	r1, #42	@ 0x2a
 800827e:	438a      	bics	r2, r1
 8008280:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2101      	movs	r1, #1
 800828e:	430a      	orrs	r2, r1
 8008290:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	0018      	movs	r0, r3
 8008296:	f000 fcb5 	bl	8008c04 <UART_CheckIdleState>
 800829a:	0003      	movs	r3, r0
}
 800829c:	0018      	movs	r0, r3
 800829e:	46bd      	mov	sp, r7
 80082a0:	b002      	add	sp, #8
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	ffffb7ff 	.word	0xffffb7ff

080082a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08a      	sub	sp, #40	@ 0x28
 80082ac:	af02      	add	r7, sp, #8
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	603b      	str	r3, [r7, #0]
 80082b4:	1dbb      	adds	r3, r7, #6
 80082b6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2288      	movs	r2, #136	@ 0x88
 80082bc:	589b      	ldr	r3, [r3, r2]
 80082be:	2b20      	cmp	r3, #32
 80082c0:	d000      	beq.n	80082c4 <HAL_UART_Transmit+0x1c>
 80082c2:	e090      	b.n	80083e6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <HAL_UART_Transmit+0x2a>
 80082ca:	1dbb      	adds	r3, r7, #6
 80082cc:	881b      	ldrh	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d101      	bne.n	80082d6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e088      	b.n	80083e8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	689a      	ldr	r2, [r3, #8]
 80082da:	2380      	movs	r3, #128	@ 0x80
 80082dc:	015b      	lsls	r3, r3, #5
 80082de:	429a      	cmp	r2, r3
 80082e0:	d109      	bne.n	80082f6 <HAL_UART_Transmit+0x4e>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d105      	bne.n	80082f6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	2201      	movs	r2, #1
 80082ee:	4013      	ands	r3, r2
 80082f0:	d001      	beq.n	80082f6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e078      	b.n	80083e8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2290      	movs	r2, #144	@ 0x90
 80082fa:	2100      	movs	r1, #0
 80082fc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2288      	movs	r2, #136	@ 0x88
 8008302:	2121      	movs	r1, #33	@ 0x21
 8008304:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008306:	f7fc f96f 	bl	80045e8 <HAL_GetTick>
 800830a:	0003      	movs	r3, r0
 800830c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	1dba      	adds	r2, r7, #6
 8008312:	2154      	movs	r1, #84	@ 0x54
 8008314:	8812      	ldrh	r2, [r2, #0]
 8008316:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	1dba      	adds	r2, r7, #6
 800831c:	2156      	movs	r1, #86	@ 0x56
 800831e:	8812      	ldrh	r2, [r2, #0]
 8008320:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	689a      	ldr	r2, [r3, #8]
 8008326:	2380      	movs	r3, #128	@ 0x80
 8008328:	015b      	lsls	r3, r3, #5
 800832a:	429a      	cmp	r2, r3
 800832c:	d108      	bne.n	8008340 <HAL_UART_Transmit+0x98>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d104      	bne.n	8008340 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8008336:	2300      	movs	r3, #0
 8008338:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	61bb      	str	r3, [r7, #24]
 800833e:	e003      	b.n	8008348 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008344:	2300      	movs	r3, #0
 8008346:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008348:	e030      	b.n	80083ac <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	0013      	movs	r3, r2
 8008354:	2200      	movs	r2, #0
 8008356:	2180      	movs	r1, #128	@ 0x80
 8008358:	f000 fcfe 	bl	8008d58 <UART_WaitOnFlagUntilTimeout>
 800835c:	1e03      	subs	r3, r0, #0
 800835e:	d005      	beq.n	800836c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2288      	movs	r2, #136	@ 0x88
 8008364:	2120      	movs	r1, #32
 8008366:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008368:	2303      	movs	r3, #3
 800836a:	e03d      	b.n	80083e8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10b      	bne.n	800838a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	881b      	ldrh	r3, [r3, #0]
 8008376:	001a      	movs	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	05d2      	lsls	r2, r2, #23
 800837e:	0dd2      	lsrs	r2, r2, #23
 8008380:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	3302      	adds	r3, #2
 8008386:	61bb      	str	r3, [r7, #24]
 8008388:	e007      	b.n	800839a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	781a      	ldrb	r2, [r3, #0]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	3301      	adds	r3, #1
 8008398:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2256      	movs	r2, #86	@ 0x56
 800839e:	5a9b      	ldrh	r3, [r3, r2]
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	3b01      	subs	r3, #1
 80083a4:	b299      	uxth	r1, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2256      	movs	r2, #86	@ 0x56
 80083aa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2256      	movs	r2, #86	@ 0x56
 80083b0:	5a9b      	ldrh	r3, [r3, r2]
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1c8      	bne.n	800834a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	68f8      	ldr	r0, [r7, #12]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	0013      	movs	r3, r2
 80083c2:	2200      	movs	r2, #0
 80083c4:	2140      	movs	r1, #64	@ 0x40
 80083c6:	f000 fcc7 	bl	8008d58 <UART_WaitOnFlagUntilTimeout>
 80083ca:	1e03      	subs	r3, r0, #0
 80083cc:	d005      	beq.n	80083da <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2288      	movs	r2, #136	@ 0x88
 80083d2:	2120      	movs	r1, #32
 80083d4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e006      	b.n	80083e8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2288      	movs	r2, #136	@ 0x88
 80083de:	2120      	movs	r1, #32
 80083e0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	e000      	b.n	80083e8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80083e6:	2302      	movs	r3, #2
  }
}
 80083e8:	0018      	movs	r0, r3
 80083ea:	46bd      	mov	sp, r7
 80083ec:	b008      	add	sp, #32
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083f0:	b5b0      	push	{r4, r5, r7, lr}
 80083f2:	b090      	sub	sp, #64	@ 0x40
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083f8:	231a      	movs	r3, #26
 80083fa:	2220      	movs	r2, #32
 80083fc:	189b      	adds	r3, r3, r2
 80083fe:	19db      	adds	r3, r3, r7
 8008400:	2200      	movs	r2, #0
 8008402:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008406:	689a      	ldr	r2, [r3, #8]
 8008408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	431a      	orrs	r2, r3
 800840e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008410:	695b      	ldr	r3, [r3, #20]
 8008412:	431a      	orrs	r2, r3
 8008414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008416:	69db      	ldr	r3, [r3, #28]
 8008418:	4313      	orrs	r3, r2
 800841a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800841c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4ac1      	ldr	r2, [pc, #772]	@ (8008728 <UART_SetConfig+0x338>)
 8008424:	4013      	ands	r3, r2
 8008426:	0019      	movs	r1, r3
 8008428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800842e:	430b      	orrs	r3, r1
 8008430:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	4abc      	ldr	r2, [pc, #752]	@ (800872c <UART_SetConfig+0x33c>)
 800843a:	4013      	ands	r3, r2
 800843c:	0018      	movs	r0, r3
 800843e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008440:	68d9      	ldr	r1, [r3, #12]
 8008442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	0003      	movs	r3, r0
 8008448:	430b      	orrs	r3, r1
 800844a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800844c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4ab6      	ldr	r2, [pc, #728]	@ (8008730 <UART_SetConfig+0x340>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d009      	beq.n	8008470 <UART_SetConfig+0x80>
 800845c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4ab4      	ldr	r2, [pc, #720]	@ (8008734 <UART_SetConfig+0x344>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d004      	beq.n	8008470 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008468:	6a1b      	ldr	r3, [r3, #32]
 800846a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800846c:	4313      	orrs	r3, r2
 800846e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	4ab0      	ldr	r2, [pc, #704]	@ (8008738 <UART_SetConfig+0x348>)
 8008478:	4013      	ands	r3, r2
 800847a:	0019      	movs	r1, r3
 800847c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008482:	430b      	orrs	r3, r1
 8008484:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800848c:	220f      	movs	r2, #15
 800848e:	4393      	bics	r3, r2
 8008490:	0018      	movs	r0, r3
 8008492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008494:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	0003      	movs	r3, r0
 800849c:	430b      	orrs	r3, r1
 800849e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4aa5      	ldr	r2, [pc, #660]	@ (800873c <UART_SetConfig+0x34c>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d131      	bne.n	800850e <UART_SetConfig+0x11e>
 80084aa:	4ba5      	ldr	r3, [pc, #660]	@ (8008740 <UART_SetConfig+0x350>)
 80084ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084ae:	2203      	movs	r2, #3
 80084b0:	4013      	ands	r3, r2
 80084b2:	2b03      	cmp	r3, #3
 80084b4:	d01d      	beq.n	80084f2 <UART_SetConfig+0x102>
 80084b6:	d823      	bhi.n	8008500 <UART_SetConfig+0x110>
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d00c      	beq.n	80084d6 <UART_SetConfig+0xe6>
 80084bc:	d820      	bhi.n	8008500 <UART_SetConfig+0x110>
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d002      	beq.n	80084c8 <UART_SetConfig+0xd8>
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d00e      	beq.n	80084e4 <UART_SetConfig+0xf4>
 80084c6:	e01b      	b.n	8008500 <UART_SetConfig+0x110>
 80084c8:	231b      	movs	r3, #27
 80084ca:	2220      	movs	r2, #32
 80084cc:	189b      	adds	r3, r3, r2
 80084ce:	19db      	adds	r3, r3, r7
 80084d0:	2200      	movs	r2, #0
 80084d2:	701a      	strb	r2, [r3, #0]
 80084d4:	e154      	b.n	8008780 <UART_SetConfig+0x390>
 80084d6:	231b      	movs	r3, #27
 80084d8:	2220      	movs	r2, #32
 80084da:	189b      	adds	r3, r3, r2
 80084dc:	19db      	adds	r3, r3, r7
 80084de:	2202      	movs	r2, #2
 80084e0:	701a      	strb	r2, [r3, #0]
 80084e2:	e14d      	b.n	8008780 <UART_SetConfig+0x390>
 80084e4:	231b      	movs	r3, #27
 80084e6:	2220      	movs	r2, #32
 80084e8:	189b      	adds	r3, r3, r2
 80084ea:	19db      	adds	r3, r3, r7
 80084ec:	2204      	movs	r2, #4
 80084ee:	701a      	strb	r2, [r3, #0]
 80084f0:	e146      	b.n	8008780 <UART_SetConfig+0x390>
 80084f2:	231b      	movs	r3, #27
 80084f4:	2220      	movs	r2, #32
 80084f6:	189b      	adds	r3, r3, r2
 80084f8:	19db      	adds	r3, r3, r7
 80084fa:	2208      	movs	r2, #8
 80084fc:	701a      	strb	r2, [r3, #0]
 80084fe:	e13f      	b.n	8008780 <UART_SetConfig+0x390>
 8008500:	231b      	movs	r3, #27
 8008502:	2220      	movs	r2, #32
 8008504:	189b      	adds	r3, r3, r2
 8008506:	19db      	adds	r3, r3, r7
 8008508:	2210      	movs	r2, #16
 800850a:	701a      	strb	r2, [r3, #0]
 800850c:	e138      	b.n	8008780 <UART_SetConfig+0x390>
 800850e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a8c      	ldr	r2, [pc, #560]	@ (8008744 <UART_SetConfig+0x354>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d131      	bne.n	800857c <UART_SetConfig+0x18c>
 8008518:	4b89      	ldr	r3, [pc, #548]	@ (8008740 <UART_SetConfig+0x350>)
 800851a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800851c:	220c      	movs	r2, #12
 800851e:	4013      	ands	r3, r2
 8008520:	2b0c      	cmp	r3, #12
 8008522:	d01d      	beq.n	8008560 <UART_SetConfig+0x170>
 8008524:	d823      	bhi.n	800856e <UART_SetConfig+0x17e>
 8008526:	2b08      	cmp	r3, #8
 8008528:	d00c      	beq.n	8008544 <UART_SetConfig+0x154>
 800852a:	d820      	bhi.n	800856e <UART_SetConfig+0x17e>
 800852c:	2b00      	cmp	r3, #0
 800852e:	d002      	beq.n	8008536 <UART_SetConfig+0x146>
 8008530:	2b04      	cmp	r3, #4
 8008532:	d00e      	beq.n	8008552 <UART_SetConfig+0x162>
 8008534:	e01b      	b.n	800856e <UART_SetConfig+0x17e>
 8008536:	231b      	movs	r3, #27
 8008538:	2220      	movs	r2, #32
 800853a:	189b      	adds	r3, r3, r2
 800853c:	19db      	adds	r3, r3, r7
 800853e:	2200      	movs	r2, #0
 8008540:	701a      	strb	r2, [r3, #0]
 8008542:	e11d      	b.n	8008780 <UART_SetConfig+0x390>
 8008544:	231b      	movs	r3, #27
 8008546:	2220      	movs	r2, #32
 8008548:	189b      	adds	r3, r3, r2
 800854a:	19db      	adds	r3, r3, r7
 800854c:	2202      	movs	r2, #2
 800854e:	701a      	strb	r2, [r3, #0]
 8008550:	e116      	b.n	8008780 <UART_SetConfig+0x390>
 8008552:	231b      	movs	r3, #27
 8008554:	2220      	movs	r2, #32
 8008556:	189b      	adds	r3, r3, r2
 8008558:	19db      	adds	r3, r3, r7
 800855a:	2204      	movs	r2, #4
 800855c:	701a      	strb	r2, [r3, #0]
 800855e:	e10f      	b.n	8008780 <UART_SetConfig+0x390>
 8008560:	231b      	movs	r3, #27
 8008562:	2220      	movs	r2, #32
 8008564:	189b      	adds	r3, r3, r2
 8008566:	19db      	adds	r3, r3, r7
 8008568:	2208      	movs	r2, #8
 800856a:	701a      	strb	r2, [r3, #0]
 800856c:	e108      	b.n	8008780 <UART_SetConfig+0x390>
 800856e:	231b      	movs	r3, #27
 8008570:	2220      	movs	r2, #32
 8008572:	189b      	adds	r3, r3, r2
 8008574:	19db      	adds	r3, r3, r7
 8008576:	2210      	movs	r2, #16
 8008578:	701a      	strb	r2, [r3, #0]
 800857a:	e101      	b.n	8008780 <UART_SetConfig+0x390>
 800857c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a71      	ldr	r2, [pc, #452]	@ (8008748 <UART_SetConfig+0x358>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d131      	bne.n	80085ea <UART_SetConfig+0x1fa>
 8008586:	4b6e      	ldr	r3, [pc, #440]	@ (8008740 <UART_SetConfig+0x350>)
 8008588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800858a:	2230      	movs	r2, #48	@ 0x30
 800858c:	4013      	ands	r3, r2
 800858e:	2b30      	cmp	r3, #48	@ 0x30
 8008590:	d01d      	beq.n	80085ce <UART_SetConfig+0x1de>
 8008592:	d823      	bhi.n	80085dc <UART_SetConfig+0x1ec>
 8008594:	2b20      	cmp	r3, #32
 8008596:	d00c      	beq.n	80085b2 <UART_SetConfig+0x1c2>
 8008598:	d820      	bhi.n	80085dc <UART_SetConfig+0x1ec>
 800859a:	2b00      	cmp	r3, #0
 800859c:	d002      	beq.n	80085a4 <UART_SetConfig+0x1b4>
 800859e:	2b10      	cmp	r3, #16
 80085a0:	d00e      	beq.n	80085c0 <UART_SetConfig+0x1d0>
 80085a2:	e01b      	b.n	80085dc <UART_SetConfig+0x1ec>
 80085a4:	231b      	movs	r3, #27
 80085a6:	2220      	movs	r2, #32
 80085a8:	189b      	adds	r3, r3, r2
 80085aa:	19db      	adds	r3, r3, r7
 80085ac:	2200      	movs	r2, #0
 80085ae:	701a      	strb	r2, [r3, #0]
 80085b0:	e0e6      	b.n	8008780 <UART_SetConfig+0x390>
 80085b2:	231b      	movs	r3, #27
 80085b4:	2220      	movs	r2, #32
 80085b6:	189b      	adds	r3, r3, r2
 80085b8:	19db      	adds	r3, r3, r7
 80085ba:	2202      	movs	r2, #2
 80085bc:	701a      	strb	r2, [r3, #0]
 80085be:	e0df      	b.n	8008780 <UART_SetConfig+0x390>
 80085c0:	231b      	movs	r3, #27
 80085c2:	2220      	movs	r2, #32
 80085c4:	189b      	adds	r3, r3, r2
 80085c6:	19db      	adds	r3, r3, r7
 80085c8:	2204      	movs	r2, #4
 80085ca:	701a      	strb	r2, [r3, #0]
 80085cc:	e0d8      	b.n	8008780 <UART_SetConfig+0x390>
 80085ce:	231b      	movs	r3, #27
 80085d0:	2220      	movs	r2, #32
 80085d2:	189b      	adds	r3, r3, r2
 80085d4:	19db      	adds	r3, r3, r7
 80085d6:	2208      	movs	r2, #8
 80085d8:	701a      	strb	r2, [r3, #0]
 80085da:	e0d1      	b.n	8008780 <UART_SetConfig+0x390>
 80085dc:	231b      	movs	r3, #27
 80085de:	2220      	movs	r2, #32
 80085e0:	189b      	adds	r3, r3, r2
 80085e2:	19db      	adds	r3, r3, r7
 80085e4:	2210      	movs	r2, #16
 80085e6:	701a      	strb	r2, [r3, #0]
 80085e8:	e0ca      	b.n	8008780 <UART_SetConfig+0x390>
 80085ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a57      	ldr	r2, [pc, #348]	@ (800874c <UART_SetConfig+0x35c>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d106      	bne.n	8008602 <UART_SetConfig+0x212>
 80085f4:	231b      	movs	r3, #27
 80085f6:	2220      	movs	r2, #32
 80085f8:	189b      	adds	r3, r3, r2
 80085fa:	19db      	adds	r3, r3, r7
 80085fc:	2200      	movs	r2, #0
 80085fe:	701a      	strb	r2, [r3, #0]
 8008600:	e0be      	b.n	8008780 <UART_SetConfig+0x390>
 8008602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a52      	ldr	r2, [pc, #328]	@ (8008750 <UART_SetConfig+0x360>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d106      	bne.n	800861a <UART_SetConfig+0x22a>
 800860c:	231b      	movs	r3, #27
 800860e:	2220      	movs	r2, #32
 8008610:	189b      	adds	r3, r3, r2
 8008612:	19db      	adds	r3, r3, r7
 8008614:	2200      	movs	r2, #0
 8008616:	701a      	strb	r2, [r3, #0]
 8008618:	e0b2      	b.n	8008780 <UART_SetConfig+0x390>
 800861a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a4d      	ldr	r2, [pc, #308]	@ (8008754 <UART_SetConfig+0x364>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d106      	bne.n	8008632 <UART_SetConfig+0x242>
 8008624:	231b      	movs	r3, #27
 8008626:	2220      	movs	r2, #32
 8008628:	189b      	adds	r3, r3, r2
 800862a:	19db      	adds	r3, r3, r7
 800862c:	2200      	movs	r2, #0
 800862e:	701a      	strb	r2, [r3, #0]
 8008630:	e0a6      	b.n	8008780 <UART_SetConfig+0x390>
 8008632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a3e      	ldr	r2, [pc, #248]	@ (8008730 <UART_SetConfig+0x340>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d13e      	bne.n	80086ba <UART_SetConfig+0x2ca>
 800863c:	4b40      	ldr	r3, [pc, #256]	@ (8008740 <UART_SetConfig+0x350>)
 800863e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008640:	23c0      	movs	r3, #192	@ 0xc0
 8008642:	011b      	lsls	r3, r3, #4
 8008644:	4013      	ands	r3, r2
 8008646:	22c0      	movs	r2, #192	@ 0xc0
 8008648:	0112      	lsls	r2, r2, #4
 800864a:	4293      	cmp	r3, r2
 800864c:	d027      	beq.n	800869e <UART_SetConfig+0x2ae>
 800864e:	22c0      	movs	r2, #192	@ 0xc0
 8008650:	0112      	lsls	r2, r2, #4
 8008652:	4293      	cmp	r3, r2
 8008654:	d82a      	bhi.n	80086ac <UART_SetConfig+0x2bc>
 8008656:	2280      	movs	r2, #128	@ 0x80
 8008658:	0112      	lsls	r2, r2, #4
 800865a:	4293      	cmp	r3, r2
 800865c:	d011      	beq.n	8008682 <UART_SetConfig+0x292>
 800865e:	2280      	movs	r2, #128	@ 0x80
 8008660:	0112      	lsls	r2, r2, #4
 8008662:	4293      	cmp	r3, r2
 8008664:	d822      	bhi.n	80086ac <UART_SetConfig+0x2bc>
 8008666:	2b00      	cmp	r3, #0
 8008668:	d004      	beq.n	8008674 <UART_SetConfig+0x284>
 800866a:	2280      	movs	r2, #128	@ 0x80
 800866c:	00d2      	lsls	r2, r2, #3
 800866e:	4293      	cmp	r3, r2
 8008670:	d00e      	beq.n	8008690 <UART_SetConfig+0x2a0>
 8008672:	e01b      	b.n	80086ac <UART_SetConfig+0x2bc>
 8008674:	231b      	movs	r3, #27
 8008676:	2220      	movs	r2, #32
 8008678:	189b      	adds	r3, r3, r2
 800867a:	19db      	adds	r3, r3, r7
 800867c:	2200      	movs	r2, #0
 800867e:	701a      	strb	r2, [r3, #0]
 8008680:	e07e      	b.n	8008780 <UART_SetConfig+0x390>
 8008682:	231b      	movs	r3, #27
 8008684:	2220      	movs	r2, #32
 8008686:	189b      	adds	r3, r3, r2
 8008688:	19db      	adds	r3, r3, r7
 800868a:	2202      	movs	r2, #2
 800868c:	701a      	strb	r2, [r3, #0]
 800868e:	e077      	b.n	8008780 <UART_SetConfig+0x390>
 8008690:	231b      	movs	r3, #27
 8008692:	2220      	movs	r2, #32
 8008694:	189b      	adds	r3, r3, r2
 8008696:	19db      	adds	r3, r3, r7
 8008698:	2204      	movs	r2, #4
 800869a:	701a      	strb	r2, [r3, #0]
 800869c:	e070      	b.n	8008780 <UART_SetConfig+0x390>
 800869e:	231b      	movs	r3, #27
 80086a0:	2220      	movs	r2, #32
 80086a2:	189b      	adds	r3, r3, r2
 80086a4:	19db      	adds	r3, r3, r7
 80086a6:	2208      	movs	r2, #8
 80086a8:	701a      	strb	r2, [r3, #0]
 80086aa:	e069      	b.n	8008780 <UART_SetConfig+0x390>
 80086ac:	231b      	movs	r3, #27
 80086ae:	2220      	movs	r2, #32
 80086b0:	189b      	adds	r3, r3, r2
 80086b2:	19db      	adds	r3, r3, r7
 80086b4:	2210      	movs	r2, #16
 80086b6:	701a      	strb	r2, [r3, #0]
 80086b8:	e062      	b.n	8008780 <UART_SetConfig+0x390>
 80086ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a1d      	ldr	r2, [pc, #116]	@ (8008734 <UART_SetConfig+0x344>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d157      	bne.n	8008774 <UART_SetConfig+0x384>
 80086c4:	4b1e      	ldr	r3, [pc, #120]	@ (8008740 <UART_SetConfig+0x350>)
 80086c6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80086c8:	23c0      	movs	r3, #192	@ 0xc0
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	4013      	ands	r3, r2
 80086ce:	22c0      	movs	r2, #192	@ 0xc0
 80086d0:	0092      	lsls	r2, r2, #2
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d040      	beq.n	8008758 <UART_SetConfig+0x368>
 80086d6:	22c0      	movs	r2, #192	@ 0xc0
 80086d8:	0092      	lsls	r2, r2, #2
 80086da:	4293      	cmp	r3, r2
 80086dc:	d843      	bhi.n	8008766 <UART_SetConfig+0x376>
 80086de:	2280      	movs	r2, #128	@ 0x80
 80086e0:	0092      	lsls	r2, r2, #2
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d011      	beq.n	800870a <UART_SetConfig+0x31a>
 80086e6:	2280      	movs	r2, #128	@ 0x80
 80086e8:	0092      	lsls	r2, r2, #2
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d83b      	bhi.n	8008766 <UART_SetConfig+0x376>
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d004      	beq.n	80086fc <UART_SetConfig+0x30c>
 80086f2:	2280      	movs	r2, #128	@ 0x80
 80086f4:	0052      	lsls	r2, r2, #1
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d00e      	beq.n	8008718 <UART_SetConfig+0x328>
 80086fa:	e034      	b.n	8008766 <UART_SetConfig+0x376>
 80086fc:	231b      	movs	r3, #27
 80086fe:	2220      	movs	r2, #32
 8008700:	189b      	adds	r3, r3, r2
 8008702:	19db      	adds	r3, r3, r7
 8008704:	2200      	movs	r2, #0
 8008706:	701a      	strb	r2, [r3, #0]
 8008708:	e03a      	b.n	8008780 <UART_SetConfig+0x390>
 800870a:	231b      	movs	r3, #27
 800870c:	2220      	movs	r2, #32
 800870e:	189b      	adds	r3, r3, r2
 8008710:	19db      	adds	r3, r3, r7
 8008712:	2202      	movs	r2, #2
 8008714:	701a      	strb	r2, [r3, #0]
 8008716:	e033      	b.n	8008780 <UART_SetConfig+0x390>
 8008718:	231b      	movs	r3, #27
 800871a:	2220      	movs	r2, #32
 800871c:	189b      	adds	r3, r3, r2
 800871e:	19db      	adds	r3, r3, r7
 8008720:	2204      	movs	r2, #4
 8008722:	701a      	strb	r2, [r3, #0]
 8008724:	e02c      	b.n	8008780 <UART_SetConfig+0x390>
 8008726:	46c0      	nop			@ (mov r8, r8)
 8008728:	cfff69f3 	.word	0xcfff69f3
 800872c:	ffffcfff 	.word	0xffffcfff
 8008730:	40008000 	.word	0x40008000
 8008734:	40008400 	.word	0x40008400
 8008738:	11fff4ff 	.word	0x11fff4ff
 800873c:	40013800 	.word	0x40013800
 8008740:	40021000 	.word	0x40021000
 8008744:	40004400 	.word	0x40004400
 8008748:	40004800 	.word	0x40004800
 800874c:	40004c00 	.word	0x40004c00
 8008750:	40005000 	.word	0x40005000
 8008754:	40013c00 	.word	0x40013c00
 8008758:	231b      	movs	r3, #27
 800875a:	2220      	movs	r2, #32
 800875c:	189b      	adds	r3, r3, r2
 800875e:	19db      	adds	r3, r3, r7
 8008760:	2208      	movs	r2, #8
 8008762:	701a      	strb	r2, [r3, #0]
 8008764:	e00c      	b.n	8008780 <UART_SetConfig+0x390>
 8008766:	231b      	movs	r3, #27
 8008768:	2220      	movs	r2, #32
 800876a:	189b      	adds	r3, r3, r2
 800876c:	19db      	adds	r3, r3, r7
 800876e:	2210      	movs	r2, #16
 8008770:	701a      	strb	r2, [r3, #0]
 8008772:	e005      	b.n	8008780 <UART_SetConfig+0x390>
 8008774:	231b      	movs	r3, #27
 8008776:	2220      	movs	r2, #32
 8008778:	189b      	adds	r3, r3, r2
 800877a:	19db      	adds	r3, r3, r7
 800877c:	2210      	movs	r2, #16
 800877e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4ac1      	ldr	r2, [pc, #772]	@ (8008a8c <UART_SetConfig+0x69c>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d005      	beq.n	8008796 <UART_SetConfig+0x3a6>
 800878a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4ac0      	ldr	r2, [pc, #768]	@ (8008a90 <UART_SetConfig+0x6a0>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d000      	beq.n	8008796 <UART_SetConfig+0x3a6>
 8008794:	e093      	b.n	80088be <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008796:	231b      	movs	r3, #27
 8008798:	2220      	movs	r2, #32
 800879a:	189b      	adds	r3, r3, r2
 800879c:	19db      	adds	r3, r3, r7
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	2b08      	cmp	r3, #8
 80087a2:	d015      	beq.n	80087d0 <UART_SetConfig+0x3e0>
 80087a4:	dc18      	bgt.n	80087d8 <UART_SetConfig+0x3e8>
 80087a6:	2b04      	cmp	r3, #4
 80087a8:	d00d      	beq.n	80087c6 <UART_SetConfig+0x3d6>
 80087aa:	dc15      	bgt.n	80087d8 <UART_SetConfig+0x3e8>
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d002      	beq.n	80087b6 <UART_SetConfig+0x3c6>
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d005      	beq.n	80087c0 <UART_SetConfig+0x3d0>
 80087b4:	e010      	b.n	80087d8 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087b6:	f7fd fd39 	bl	800622c <HAL_RCC_GetPCLK1Freq>
 80087ba:	0003      	movs	r3, r0
 80087bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087be:	e014      	b.n	80087ea <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087c0:	4bb4      	ldr	r3, [pc, #720]	@ (8008a94 <UART_SetConfig+0x6a4>)
 80087c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087c4:	e011      	b.n	80087ea <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087c6:	f7fd fca5 	bl	8006114 <HAL_RCC_GetSysClockFreq>
 80087ca:	0003      	movs	r3, r0
 80087cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087ce:	e00c      	b.n	80087ea <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087d0:	2380      	movs	r3, #128	@ 0x80
 80087d2:	021b      	lsls	r3, r3, #8
 80087d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087d6:	e008      	b.n	80087ea <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80087d8:	2300      	movs	r3, #0
 80087da:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80087dc:	231a      	movs	r3, #26
 80087de:	2220      	movs	r2, #32
 80087e0:	189b      	adds	r3, r3, r2
 80087e2:	19db      	adds	r3, r3, r7
 80087e4:	2201      	movs	r2, #1
 80087e6:	701a      	strb	r2, [r3, #0]
        break;
 80087e8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80087ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d100      	bne.n	80087f2 <UART_SetConfig+0x402>
 80087f0:	e135      	b.n	8008a5e <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80087f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087f6:	4ba8      	ldr	r3, [pc, #672]	@ (8008a98 <UART_SetConfig+0x6a8>)
 80087f8:	0052      	lsls	r2, r2, #1
 80087fa:	5ad3      	ldrh	r3, [r2, r3]
 80087fc:	0019      	movs	r1, r3
 80087fe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008800:	f7f7 fc92 	bl	8000128 <__udivsi3>
 8008804:	0003      	movs	r3, r0
 8008806:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	0013      	movs	r3, r2
 800880e:	005b      	lsls	r3, r3, #1
 8008810:	189b      	adds	r3, r3, r2
 8008812:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008814:	429a      	cmp	r2, r3
 8008816:	d305      	bcc.n	8008824 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800881e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008820:	429a      	cmp	r2, r3
 8008822:	d906      	bls.n	8008832 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8008824:	231a      	movs	r3, #26
 8008826:	2220      	movs	r2, #32
 8008828:	189b      	adds	r3, r3, r2
 800882a:	19db      	adds	r3, r3, r7
 800882c:	2201      	movs	r2, #1
 800882e:	701a      	strb	r2, [r3, #0]
 8008830:	e044      	b.n	80088bc <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008834:	61bb      	str	r3, [r7, #24]
 8008836:	2300      	movs	r3, #0
 8008838:	61fb      	str	r3, [r7, #28]
 800883a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800883c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800883e:	4b96      	ldr	r3, [pc, #600]	@ (8008a98 <UART_SetConfig+0x6a8>)
 8008840:	0052      	lsls	r2, r2, #1
 8008842:	5ad3      	ldrh	r3, [r2, r3]
 8008844:	613b      	str	r3, [r7, #16]
 8008846:	2300      	movs	r3, #0
 8008848:	617b      	str	r3, [r7, #20]
 800884a:	693a      	ldr	r2, [r7, #16]
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	69b8      	ldr	r0, [r7, #24]
 8008850:	69f9      	ldr	r1, [r7, #28]
 8008852:	f7f7 fe1d 	bl	8000490 <__aeabi_uldivmod>
 8008856:	0002      	movs	r2, r0
 8008858:	000b      	movs	r3, r1
 800885a:	0e11      	lsrs	r1, r2, #24
 800885c:	021d      	lsls	r5, r3, #8
 800885e:	430d      	orrs	r5, r1
 8008860:	0214      	lsls	r4, r2, #8
 8008862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	085b      	lsrs	r3, r3, #1
 8008868:	60bb      	str	r3, [r7, #8]
 800886a:	2300      	movs	r3, #0
 800886c:	60fb      	str	r3, [r7, #12]
 800886e:	68b8      	ldr	r0, [r7, #8]
 8008870:	68f9      	ldr	r1, [r7, #12]
 8008872:	1900      	adds	r0, r0, r4
 8008874:	4169      	adcs	r1, r5
 8008876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	603b      	str	r3, [r7, #0]
 800887c:	2300      	movs	r3, #0
 800887e:	607b      	str	r3, [r7, #4]
 8008880:	683a      	ldr	r2, [r7, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f7f7 fe04 	bl	8000490 <__aeabi_uldivmod>
 8008888:	0002      	movs	r2, r0
 800888a:	000b      	movs	r3, r1
 800888c:	0013      	movs	r3, r2
 800888e:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008892:	23c0      	movs	r3, #192	@ 0xc0
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	429a      	cmp	r2, r3
 8008898:	d309      	bcc.n	80088ae <UART_SetConfig+0x4be>
 800889a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800889c:	2380      	movs	r3, #128	@ 0x80
 800889e:	035b      	lsls	r3, r3, #13
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d204      	bcs.n	80088ae <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80088a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088aa:	60da      	str	r2, [r3, #12]
 80088ac:	e006      	b.n	80088bc <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80088ae:	231a      	movs	r3, #26
 80088b0:	2220      	movs	r2, #32
 80088b2:	189b      	adds	r3, r3, r2
 80088b4:	19db      	adds	r3, r3, r7
 80088b6:	2201      	movs	r2, #1
 80088b8:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80088ba:	e0d0      	b.n	8008a5e <UART_SetConfig+0x66e>
 80088bc:	e0cf      	b.n	8008a5e <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c0:	69da      	ldr	r2, [r3, #28]
 80088c2:	2380      	movs	r3, #128	@ 0x80
 80088c4:	021b      	lsls	r3, r3, #8
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d000      	beq.n	80088cc <UART_SetConfig+0x4dc>
 80088ca:	e070      	b.n	80089ae <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80088cc:	231b      	movs	r3, #27
 80088ce:	2220      	movs	r2, #32
 80088d0:	189b      	adds	r3, r3, r2
 80088d2:	19db      	adds	r3, r3, r7
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	2b08      	cmp	r3, #8
 80088d8:	d015      	beq.n	8008906 <UART_SetConfig+0x516>
 80088da:	dc18      	bgt.n	800890e <UART_SetConfig+0x51e>
 80088dc:	2b04      	cmp	r3, #4
 80088de:	d00d      	beq.n	80088fc <UART_SetConfig+0x50c>
 80088e0:	dc15      	bgt.n	800890e <UART_SetConfig+0x51e>
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d002      	beq.n	80088ec <UART_SetConfig+0x4fc>
 80088e6:	2b02      	cmp	r3, #2
 80088e8:	d005      	beq.n	80088f6 <UART_SetConfig+0x506>
 80088ea:	e010      	b.n	800890e <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088ec:	f7fd fc9e 	bl	800622c <HAL_RCC_GetPCLK1Freq>
 80088f0:	0003      	movs	r3, r0
 80088f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088f4:	e014      	b.n	8008920 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088f6:	4b67      	ldr	r3, [pc, #412]	@ (8008a94 <UART_SetConfig+0x6a4>)
 80088f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088fa:	e011      	b.n	8008920 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088fc:	f7fd fc0a 	bl	8006114 <HAL_RCC_GetSysClockFreq>
 8008900:	0003      	movs	r3, r0
 8008902:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008904:	e00c      	b.n	8008920 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008906:	2380      	movs	r3, #128	@ 0x80
 8008908:	021b      	lsls	r3, r3, #8
 800890a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800890c:	e008      	b.n	8008920 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800890e:	2300      	movs	r3, #0
 8008910:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8008912:	231a      	movs	r3, #26
 8008914:	2220      	movs	r2, #32
 8008916:	189b      	adds	r3, r3, r2
 8008918:	19db      	adds	r3, r3, r7
 800891a:	2201      	movs	r2, #1
 800891c:	701a      	strb	r2, [r3, #0]
        break;
 800891e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008922:	2b00      	cmp	r3, #0
 8008924:	d100      	bne.n	8008928 <UART_SetConfig+0x538>
 8008926:	e09a      	b.n	8008a5e <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800892c:	4b5a      	ldr	r3, [pc, #360]	@ (8008a98 <UART_SetConfig+0x6a8>)
 800892e:	0052      	lsls	r2, r2, #1
 8008930:	5ad3      	ldrh	r3, [r2, r3]
 8008932:	0019      	movs	r1, r3
 8008934:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008936:	f7f7 fbf7 	bl	8000128 <__udivsi3>
 800893a:	0003      	movs	r3, r0
 800893c:	005a      	lsls	r2, r3, #1
 800893e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	085b      	lsrs	r3, r3, #1
 8008944:	18d2      	adds	r2, r2, r3
 8008946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	0019      	movs	r1, r3
 800894c:	0010      	movs	r0, r2
 800894e:	f7f7 fbeb 	bl	8000128 <__udivsi3>
 8008952:	0003      	movs	r3, r0
 8008954:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008958:	2b0f      	cmp	r3, #15
 800895a:	d921      	bls.n	80089a0 <UART_SetConfig+0x5b0>
 800895c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800895e:	2380      	movs	r3, #128	@ 0x80
 8008960:	025b      	lsls	r3, r3, #9
 8008962:	429a      	cmp	r2, r3
 8008964:	d21c      	bcs.n	80089a0 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008968:	b29a      	uxth	r2, r3
 800896a:	200e      	movs	r0, #14
 800896c:	2420      	movs	r4, #32
 800896e:	1903      	adds	r3, r0, r4
 8008970:	19db      	adds	r3, r3, r7
 8008972:	210f      	movs	r1, #15
 8008974:	438a      	bics	r2, r1
 8008976:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800897a:	085b      	lsrs	r3, r3, #1
 800897c:	b29b      	uxth	r3, r3
 800897e:	2207      	movs	r2, #7
 8008980:	4013      	ands	r3, r2
 8008982:	b299      	uxth	r1, r3
 8008984:	1903      	adds	r3, r0, r4
 8008986:	19db      	adds	r3, r3, r7
 8008988:	1902      	adds	r2, r0, r4
 800898a:	19d2      	adds	r2, r2, r7
 800898c:	8812      	ldrh	r2, [r2, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	1902      	adds	r2, r0, r4
 8008998:	19d2      	adds	r2, r2, r7
 800899a:	8812      	ldrh	r2, [r2, #0]
 800899c:	60da      	str	r2, [r3, #12]
 800899e:	e05e      	b.n	8008a5e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80089a0:	231a      	movs	r3, #26
 80089a2:	2220      	movs	r2, #32
 80089a4:	189b      	adds	r3, r3, r2
 80089a6:	19db      	adds	r3, r3, r7
 80089a8:	2201      	movs	r2, #1
 80089aa:	701a      	strb	r2, [r3, #0]
 80089ac:	e057      	b.n	8008a5e <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80089ae:	231b      	movs	r3, #27
 80089b0:	2220      	movs	r2, #32
 80089b2:	189b      	adds	r3, r3, r2
 80089b4:	19db      	adds	r3, r3, r7
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	2b08      	cmp	r3, #8
 80089ba:	d015      	beq.n	80089e8 <UART_SetConfig+0x5f8>
 80089bc:	dc18      	bgt.n	80089f0 <UART_SetConfig+0x600>
 80089be:	2b04      	cmp	r3, #4
 80089c0:	d00d      	beq.n	80089de <UART_SetConfig+0x5ee>
 80089c2:	dc15      	bgt.n	80089f0 <UART_SetConfig+0x600>
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d002      	beq.n	80089ce <UART_SetConfig+0x5de>
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d005      	beq.n	80089d8 <UART_SetConfig+0x5e8>
 80089cc:	e010      	b.n	80089f0 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089ce:	f7fd fc2d 	bl	800622c <HAL_RCC_GetPCLK1Freq>
 80089d2:	0003      	movs	r3, r0
 80089d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089d6:	e014      	b.n	8008a02 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089d8:	4b2e      	ldr	r3, [pc, #184]	@ (8008a94 <UART_SetConfig+0x6a4>)
 80089da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089dc:	e011      	b.n	8008a02 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089de:	f7fd fb99 	bl	8006114 <HAL_RCC_GetSysClockFreq>
 80089e2:	0003      	movs	r3, r0
 80089e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089e6:	e00c      	b.n	8008a02 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089e8:	2380      	movs	r3, #128	@ 0x80
 80089ea:	021b      	lsls	r3, r3, #8
 80089ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089ee:	e008      	b.n	8008a02 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80089f0:	2300      	movs	r3, #0
 80089f2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80089f4:	231a      	movs	r3, #26
 80089f6:	2220      	movs	r2, #32
 80089f8:	189b      	adds	r3, r3, r2
 80089fa:	19db      	adds	r3, r3, r7
 80089fc:	2201      	movs	r2, #1
 80089fe:	701a      	strb	r2, [r3, #0]
        break;
 8008a00:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8008a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d02a      	beq.n	8008a5e <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a0c:	4b22      	ldr	r3, [pc, #136]	@ (8008a98 <UART_SetConfig+0x6a8>)
 8008a0e:	0052      	lsls	r2, r2, #1
 8008a10:	5ad3      	ldrh	r3, [r2, r3]
 8008a12:	0019      	movs	r1, r3
 8008a14:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008a16:	f7f7 fb87 	bl	8000128 <__udivsi3>
 8008a1a:	0003      	movs	r3, r0
 8008a1c:	001a      	movs	r2, r3
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	085b      	lsrs	r3, r3, #1
 8008a24:	18d2      	adds	r2, r2, r3
 8008a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	0019      	movs	r1, r3
 8008a2c:	0010      	movs	r0, r2
 8008a2e:	f7f7 fb7b 	bl	8000128 <__udivsi3>
 8008a32:	0003      	movs	r3, r0
 8008a34:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a38:	2b0f      	cmp	r3, #15
 8008a3a:	d90a      	bls.n	8008a52 <UART_SetConfig+0x662>
 8008a3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a3e:	2380      	movs	r3, #128	@ 0x80
 8008a40:	025b      	lsls	r3, r3, #9
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d205      	bcs.n	8008a52 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	60da      	str	r2, [r3, #12]
 8008a50:	e005      	b.n	8008a5e <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8008a52:	231a      	movs	r3, #26
 8008a54:	2220      	movs	r2, #32
 8008a56:	189b      	adds	r3, r3, r2
 8008a58:	19db      	adds	r3, r3, r7
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a60:	226a      	movs	r2, #106	@ 0x6a
 8008a62:	2101      	movs	r1, #1
 8008a64:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8008a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a68:	2268      	movs	r2, #104	@ 0x68
 8008a6a:	2101      	movs	r1, #1
 8008a6c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a70:	2200      	movs	r2, #0
 8008a72:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a76:	2200      	movs	r2, #0
 8008a78:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008a7a:	231a      	movs	r3, #26
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	189b      	adds	r3, r3, r2
 8008a80:	19db      	adds	r3, r3, r7
 8008a82:	781b      	ldrb	r3, [r3, #0]
}
 8008a84:	0018      	movs	r0, r3
 8008a86:	46bd      	mov	sp, r7
 8008a88:	b010      	add	sp, #64	@ 0x40
 8008a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8008a8c:	40008000 	.word	0x40008000
 8008a90:	40008400 	.word	0x40008400
 8008a94:	00f42400 	.word	0x00f42400
 8008a98:	0800a518 	.word	0x0800a518

08008a9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aa8:	2208      	movs	r2, #8
 8008aaa:	4013      	ands	r3, r2
 8008aac:	d00b      	beq.n	8008ac6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	4a4a      	ldr	r2, [pc, #296]	@ (8008be0 <UART_AdvFeatureConfig+0x144>)
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	0019      	movs	r1, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aca:	2201      	movs	r2, #1
 8008acc:	4013      	ands	r3, r2
 8008ace:	d00b      	beq.n	8008ae8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	4a43      	ldr	r2, [pc, #268]	@ (8008be4 <UART_AdvFeatureConfig+0x148>)
 8008ad8:	4013      	ands	r3, r2
 8008ada:	0019      	movs	r1, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aec:	2202      	movs	r2, #2
 8008aee:	4013      	ands	r3, r2
 8008af0:	d00b      	beq.n	8008b0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	4a3b      	ldr	r2, [pc, #236]	@ (8008be8 <UART_AdvFeatureConfig+0x14c>)
 8008afa:	4013      	ands	r3, r2
 8008afc:	0019      	movs	r1, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	430a      	orrs	r2, r1
 8008b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b0e:	2204      	movs	r2, #4
 8008b10:	4013      	ands	r3, r2
 8008b12:	d00b      	beq.n	8008b2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	4a34      	ldr	r2, [pc, #208]	@ (8008bec <UART_AdvFeatureConfig+0x150>)
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	0019      	movs	r1, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	430a      	orrs	r2, r1
 8008b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b30:	2210      	movs	r2, #16
 8008b32:	4013      	ands	r3, r2
 8008b34:	d00b      	beq.n	8008b4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	4a2c      	ldr	r2, [pc, #176]	@ (8008bf0 <UART_AdvFeatureConfig+0x154>)
 8008b3e:	4013      	ands	r3, r2
 8008b40:	0019      	movs	r1, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b52:	2220      	movs	r2, #32
 8008b54:	4013      	ands	r3, r2
 8008b56:	d00b      	beq.n	8008b70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	4a25      	ldr	r2, [pc, #148]	@ (8008bf4 <UART_AdvFeatureConfig+0x158>)
 8008b60:	4013      	ands	r3, r2
 8008b62:	0019      	movs	r1, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	430a      	orrs	r2, r1
 8008b6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b74:	2240      	movs	r2, #64	@ 0x40
 8008b76:	4013      	ands	r3, r2
 8008b78:	d01d      	beq.n	8008bb6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	4a1d      	ldr	r2, [pc, #116]	@ (8008bf8 <UART_AdvFeatureConfig+0x15c>)
 8008b82:	4013      	ands	r3, r2
 8008b84:	0019      	movs	r1, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	430a      	orrs	r2, r1
 8008b90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b96:	2380      	movs	r3, #128	@ 0x80
 8008b98:	035b      	lsls	r3, r3, #13
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d10b      	bne.n	8008bb6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	4a15      	ldr	r2, [pc, #84]	@ (8008bfc <UART_AdvFeatureConfig+0x160>)
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	0019      	movs	r1, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	430a      	orrs	r2, r1
 8008bb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bba:	2280      	movs	r2, #128	@ 0x80
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	d00b      	beq.n	8008bd8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	4a0e      	ldr	r2, [pc, #56]	@ (8008c00 <UART_AdvFeatureConfig+0x164>)
 8008bc8:	4013      	ands	r3, r2
 8008bca:	0019      	movs	r1, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	430a      	orrs	r2, r1
 8008bd6:	605a      	str	r2, [r3, #4]
  }
}
 8008bd8:	46c0      	nop			@ (mov r8, r8)
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	b002      	add	sp, #8
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	ffff7fff 	.word	0xffff7fff
 8008be4:	fffdffff 	.word	0xfffdffff
 8008be8:	fffeffff 	.word	0xfffeffff
 8008bec:	fffbffff 	.word	0xfffbffff
 8008bf0:	ffffefff 	.word	0xffffefff
 8008bf4:	ffffdfff 	.word	0xffffdfff
 8008bf8:	ffefffff 	.word	0xffefffff
 8008bfc:	ff9fffff 	.word	0xff9fffff
 8008c00:	fff7ffff 	.word	0xfff7ffff

08008c04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b092      	sub	sp, #72	@ 0x48
 8008c08:	af02      	add	r7, sp, #8
 8008c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2290      	movs	r2, #144	@ 0x90
 8008c10:	2100      	movs	r1, #0
 8008c12:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c14:	f7fb fce8 	bl	80045e8 <HAL_GetTick>
 8008c18:	0003      	movs	r3, r0
 8008c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2208      	movs	r2, #8
 8008c24:	4013      	ands	r3, r2
 8008c26:	2b08      	cmp	r3, #8
 8008c28:	d12d      	bne.n	8008c86 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c2c:	2280      	movs	r2, #128	@ 0x80
 8008c2e:	0391      	lsls	r1, r2, #14
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	4a47      	ldr	r2, [pc, #284]	@ (8008d50 <UART_CheckIdleState+0x14c>)
 8008c34:	9200      	str	r2, [sp, #0]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f000 f88e 	bl	8008d58 <UART_WaitOnFlagUntilTimeout>
 8008c3c:	1e03      	subs	r3, r0, #0
 8008c3e:	d022      	beq.n	8008c86 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c40:	f3ef 8310 	mrs	r3, PRIMASK
 8008c44:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008c48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c50:	f383 8810 	msr	PRIMASK, r3
}
 8008c54:	46c0      	nop			@ (mov r8, r8)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2180      	movs	r1, #128	@ 0x80
 8008c62:	438a      	bics	r2, r1
 8008c64:	601a      	str	r2, [r3, #0]
 8008c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c6c:	f383 8810 	msr	PRIMASK, r3
}
 8008c70:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2288      	movs	r2, #136	@ 0x88
 8008c76:	2120      	movs	r1, #32
 8008c78:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2284      	movs	r2, #132	@ 0x84
 8008c7e:	2100      	movs	r1, #0
 8008c80:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	e060      	b.n	8008d48 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2204      	movs	r2, #4
 8008c8e:	4013      	ands	r3, r2
 8008c90:	2b04      	cmp	r3, #4
 8008c92:	d146      	bne.n	8008d22 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c96:	2280      	movs	r2, #128	@ 0x80
 8008c98:	03d1      	lsls	r1, r2, #15
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	4a2c      	ldr	r2, [pc, #176]	@ (8008d50 <UART_CheckIdleState+0x14c>)
 8008c9e:	9200      	str	r2, [sp, #0]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f000 f859 	bl	8008d58 <UART_WaitOnFlagUntilTimeout>
 8008ca6:	1e03      	subs	r3, r0, #0
 8008ca8:	d03b      	beq.n	8008d22 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008caa:	f3ef 8310 	mrs	r3, PRIMASK
 8008cae:	60fb      	str	r3, [r7, #12]
  return(result);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	f383 8810 	msr	PRIMASK, r3
}
 8008cbe:	46c0      	nop			@ (mov r8, r8)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4922      	ldr	r1, [pc, #136]	@ (8008d54 <UART_CheckIdleState+0x150>)
 8008ccc:	400a      	ands	r2, r1
 8008cce:	601a      	str	r2, [r3, #0]
 8008cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cd2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	f383 8810 	msr	PRIMASK, r3
}
 8008cda:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cdc:	f3ef 8310 	mrs	r3, PRIMASK
 8008ce0:	61bb      	str	r3, [r7, #24]
  return(result);
 8008ce2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ce4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	f383 8810 	msr	PRIMASK, r3
}
 8008cf0:	46c0      	nop			@ (mov r8, r8)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	689a      	ldr	r2, [r3, #8]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2101      	movs	r1, #1
 8008cfe:	438a      	bics	r2, r1
 8008d00:	609a      	str	r2, [r3, #8]
 8008d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d04:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d06:	6a3b      	ldr	r3, [r7, #32]
 8008d08:	f383 8810 	msr	PRIMASK, r3
}
 8008d0c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	228c      	movs	r2, #140	@ 0x8c
 8008d12:	2120      	movs	r1, #32
 8008d14:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2284      	movs	r2, #132	@ 0x84
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e012      	b.n	8008d48 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2288      	movs	r2, #136	@ 0x88
 8008d26:	2120      	movs	r1, #32
 8008d28:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	228c      	movs	r2, #140	@ 0x8c
 8008d2e:	2120      	movs	r1, #32
 8008d30:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2284      	movs	r2, #132	@ 0x84
 8008d42:	2100      	movs	r1, #0
 8008d44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	0018      	movs	r0, r3
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	b010      	add	sp, #64	@ 0x40
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	01ffffff 	.word	0x01ffffff
 8008d54:	fffffedf 	.word	0xfffffedf

08008d58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	603b      	str	r3, [r7, #0]
 8008d64:	1dfb      	adds	r3, r7, #7
 8008d66:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d68:	e051      	b.n	8008e0e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	d04e      	beq.n	8008e0e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d70:	f7fb fc3a 	bl	80045e8 <HAL_GetTick>
 8008d74:	0002      	movs	r2, r0
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	69ba      	ldr	r2, [r7, #24]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d302      	bcc.n	8008d86 <UART_WaitOnFlagUntilTimeout+0x2e>
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d101      	bne.n	8008d8a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e051      	b.n	8008e2e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2204      	movs	r2, #4
 8008d92:	4013      	ands	r3, r2
 8008d94:	d03b      	beq.n	8008e0e <UART_WaitOnFlagUntilTimeout+0xb6>
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	2b80      	cmp	r3, #128	@ 0x80
 8008d9a:	d038      	beq.n	8008e0e <UART_WaitOnFlagUntilTimeout+0xb6>
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	2b40      	cmp	r3, #64	@ 0x40
 8008da0:	d035      	beq.n	8008e0e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	69db      	ldr	r3, [r3, #28]
 8008da8:	2208      	movs	r2, #8
 8008daa:	4013      	ands	r3, r2
 8008dac:	2b08      	cmp	r3, #8
 8008dae:	d111      	bne.n	8008dd4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2208      	movs	r2, #8
 8008db6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	0018      	movs	r0, r3
 8008dbc:	f000 f83c 	bl	8008e38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2290      	movs	r2, #144	@ 0x90
 8008dc4:	2108      	movs	r1, #8
 8008dc6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2284      	movs	r2, #132	@ 0x84
 8008dcc:	2100      	movs	r1, #0
 8008dce:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e02c      	b.n	8008e2e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	69da      	ldr	r2, [r3, #28]
 8008dda:	2380      	movs	r3, #128	@ 0x80
 8008ddc:	011b      	lsls	r3, r3, #4
 8008dde:	401a      	ands	r2, r3
 8008de0:	2380      	movs	r3, #128	@ 0x80
 8008de2:	011b      	lsls	r3, r3, #4
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d112      	bne.n	8008e0e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2280      	movs	r2, #128	@ 0x80
 8008dee:	0112      	lsls	r2, r2, #4
 8008df0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	0018      	movs	r0, r3
 8008df6:	f000 f81f 	bl	8008e38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2290      	movs	r2, #144	@ 0x90
 8008dfe:	2120      	movs	r1, #32
 8008e00:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2284      	movs	r2, #132	@ 0x84
 8008e06:	2100      	movs	r1, #0
 8008e08:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e00f      	b.n	8008e2e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	69db      	ldr	r3, [r3, #28]
 8008e14:	68ba      	ldr	r2, [r7, #8]
 8008e16:	4013      	ands	r3, r2
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	425a      	negs	r2, r3
 8008e1e:	4153      	adcs	r3, r2
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	001a      	movs	r2, r3
 8008e24:	1dfb      	adds	r3, r7, #7
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d09e      	beq.n	8008d6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	0018      	movs	r0, r3
 8008e30:	46bd      	mov	sp, r7
 8008e32:	b004      	add	sp, #16
 8008e34:	bd80      	pop	{r7, pc}
	...

08008e38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b08e      	sub	sp, #56	@ 0x38
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e40:	f3ef 8310 	mrs	r3, PRIMASK
 8008e44:	617b      	str	r3, [r7, #20]
  return(result);
 8008e46:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e48:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	f383 8810 	msr	PRIMASK, r3
}
 8008e54:	46c0      	nop			@ (mov r8, r8)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4926      	ldr	r1, [pc, #152]	@ (8008efc <UART_EndRxTransfer+0xc4>)
 8008e62:	400a      	ands	r2, r1
 8008e64:	601a      	str	r2, [r3, #0]
 8008e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	f383 8810 	msr	PRIMASK, r3
}
 8008e70:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e72:	f3ef 8310 	mrs	r3, PRIMASK
 8008e76:	623b      	str	r3, [r7, #32]
  return(result);
 8008e78:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e82:	f383 8810 	msr	PRIMASK, r3
}
 8008e86:	46c0      	nop			@ (mov r8, r8)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	689a      	ldr	r2, [r3, #8]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	491b      	ldr	r1, [pc, #108]	@ (8008f00 <UART_EndRxTransfer+0xc8>)
 8008e94:	400a      	ands	r2, r1
 8008e96:	609a      	str	r2, [r3, #8]
 8008e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e9e:	f383 8810 	msr	PRIMASK, r3
}
 8008ea2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d118      	bne.n	8008ede <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008eac:	f3ef 8310 	mrs	r3, PRIMASK
 8008eb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8008eb2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f383 8810 	msr	PRIMASK, r3
}
 8008ec0:	46c0      	nop			@ (mov r8, r8)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2110      	movs	r1, #16
 8008ece:	438a      	bics	r2, r1
 8008ed0:	601a      	str	r2, [r3, #0]
 8008ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	f383 8810 	msr	PRIMASK, r3
}
 8008edc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	228c      	movs	r2, #140	@ 0x8c
 8008ee2:	2120      	movs	r1, #32
 8008ee4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008ef2:	46c0      	nop			@ (mov r8, r8)
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	b00e      	add	sp, #56	@ 0x38
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	46c0      	nop			@ (mov r8, r8)
 8008efc:	fffffedf 	.word	0xfffffedf
 8008f00:	effffffe 	.word	0xeffffffe

08008f04 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2284      	movs	r2, #132	@ 0x84
 8008f10:	5c9b      	ldrb	r3, [r3, r2]
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d101      	bne.n	8008f1a <HAL_UARTEx_DisableFifoMode+0x16>
 8008f16:	2302      	movs	r3, #2
 8008f18:	e027      	b.n	8008f6a <HAL_UARTEx_DisableFifoMode+0x66>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2284      	movs	r2, #132	@ 0x84
 8008f1e:	2101      	movs	r1, #1
 8008f20:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2288      	movs	r2, #136	@ 0x88
 8008f26:	2124      	movs	r1, #36	@ 0x24
 8008f28:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2101      	movs	r1, #1
 8008f3e:	438a      	bics	r2, r1
 8008f40:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	4a0b      	ldr	r2, [pc, #44]	@ (8008f74 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008f46:	4013      	ands	r3, r2
 8008f48:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2288      	movs	r2, #136	@ 0x88
 8008f5c:	2120      	movs	r1, #32
 8008f5e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2284      	movs	r2, #132	@ 0x84
 8008f64:	2100      	movs	r1, #0
 8008f66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	0018      	movs	r0, r3
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	b004      	add	sp, #16
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	46c0      	nop			@ (mov r8, r8)
 8008f74:	dfffffff 	.word	0xdfffffff

08008f78 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2284      	movs	r2, #132	@ 0x84
 8008f86:	5c9b      	ldrb	r3, [r3, r2]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d101      	bne.n	8008f90 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	e02e      	b.n	8008fee <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2284      	movs	r2, #132	@ 0x84
 8008f94:	2101      	movs	r1, #1
 8008f96:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2288      	movs	r2, #136	@ 0x88
 8008f9c:	2124      	movs	r1, #36	@ 0x24
 8008f9e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2101      	movs	r1, #1
 8008fb4:	438a      	bics	r2, r1
 8008fb6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	00db      	lsls	r3, r3, #3
 8008fc0:	08d9      	lsrs	r1, r3, #3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	683a      	ldr	r2, [r7, #0]
 8008fc8:	430a      	orrs	r2, r1
 8008fca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	0018      	movs	r0, r3
 8008fd0:	f000 f854 	bl	800907c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2288      	movs	r2, #136	@ 0x88
 8008fe0:	2120      	movs	r1, #32
 8008fe2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2284      	movs	r2, #132	@ 0x84
 8008fe8:	2100      	movs	r1, #0
 8008fea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	0018      	movs	r0, r3
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	b004      	add	sp, #16
 8008ff4:	bd80      	pop	{r7, pc}
	...

08008ff8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2284      	movs	r2, #132	@ 0x84
 8009006:	5c9b      	ldrb	r3, [r3, r2]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d101      	bne.n	8009010 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800900c:	2302      	movs	r3, #2
 800900e:	e02f      	b.n	8009070 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2284      	movs	r2, #132	@ 0x84
 8009014:	2101      	movs	r1, #1
 8009016:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2288      	movs	r2, #136	@ 0x88
 800901c:	2124      	movs	r1, #36	@ 0x24
 800901e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2101      	movs	r1, #1
 8009034:	438a      	bics	r2, r1
 8009036:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	4a0e      	ldr	r2, [pc, #56]	@ (8009078 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009040:	4013      	ands	r3, r2
 8009042:	0019      	movs	r1, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	683a      	ldr	r2, [r7, #0]
 800904a:	430a      	orrs	r2, r1
 800904c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	0018      	movs	r0, r3
 8009052:	f000 f813 	bl	800907c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2288      	movs	r2, #136	@ 0x88
 8009062:	2120      	movs	r1, #32
 8009064:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2284      	movs	r2, #132	@ 0x84
 800906a:	2100      	movs	r1, #0
 800906c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	0018      	movs	r0, r3
 8009072:	46bd      	mov	sp, r7
 8009074:	b004      	add	sp, #16
 8009076:	bd80      	pop	{r7, pc}
 8009078:	f1ffffff 	.word	0xf1ffffff

0800907c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800907c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009088:	2b00      	cmp	r3, #0
 800908a:	d108      	bne.n	800909e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	226a      	movs	r2, #106	@ 0x6a
 8009090:	2101      	movs	r1, #1
 8009092:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2268      	movs	r2, #104	@ 0x68
 8009098:	2101      	movs	r1, #1
 800909a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800909c:	e043      	b.n	8009126 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800909e:	260f      	movs	r6, #15
 80090a0:	19bb      	adds	r3, r7, r6
 80090a2:	2208      	movs	r2, #8
 80090a4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80090a6:	200e      	movs	r0, #14
 80090a8:	183b      	adds	r3, r7, r0
 80090aa:	2208      	movs	r2, #8
 80090ac:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	0e5b      	lsrs	r3, r3, #25
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	240d      	movs	r4, #13
 80090ba:	193b      	adds	r3, r7, r4
 80090bc:	2107      	movs	r1, #7
 80090be:	400a      	ands	r2, r1
 80090c0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	0f5b      	lsrs	r3, r3, #29
 80090ca:	b2da      	uxtb	r2, r3
 80090cc:	250c      	movs	r5, #12
 80090ce:	197b      	adds	r3, r7, r5
 80090d0:	2107      	movs	r1, #7
 80090d2:	400a      	ands	r2, r1
 80090d4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090d6:	183b      	adds	r3, r7, r0
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	197a      	adds	r2, r7, r5
 80090dc:	7812      	ldrb	r2, [r2, #0]
 80090de:	4914      	ldr	r1, [pc, #80]	@ (8009130 <UARTEx_SetNbDataToProcess+0xb4>)
 80090e0:	5c8a      	ldrb	r2, [r1, r2]
 80090e2:	435a      	muls	r2, r3
 80090e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80090e6:	197b      	adds	r3, r7, r5
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	4a12      	ldr	r2, [pc, #72]	@ (8009134 <UARTEx_SetNbDataToProcess+0xb8>)
 80090ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090ee:	0019      	movs	r1, r3
 80090f0:	f7f7 f8a4 	bl	800023c <__divsi3>
 80090f4:	0003      	movs	r3, r0
 80090f6:	b299      	uxth	r1, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	226a      	movs	r2, #106	@ 0x6a
 80090fc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090fe:	19bb      	adds	r3, r7, r6
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	193a      	adds	r2, r7, r4
 8009104:	7812      	ldrb	r2, [r2, #0]
 8009106:	490a      	ldr	r1, [pc, #40]	@ (8009130 <UARTEx_SetNbDataToProcess+0xb4>)
 8009108:	5c8a      	ldrb	r2, [r1, r2]
 800910a:	435a      	muls	r2, r3
 800910c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800910e:	193b      	adds	r3, r7, r4
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	4a08      	ldr	r2, [pc, #32]	@ (8009134 <UARTEx_SetNbDataToProcess+0xb8>)
 8009114:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009116:	0019      	movs	r1, r3
 8009118:	f7f7 f890 	bl	800023c <__divsi3>
 800911c:	0003      	movs	r3, r0
 800911e:	b299      	uxth	r1, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2268      	movs	r2, #104	@ 0x68
 8009124:	5299      	strh	r1, [r3, r2]
}
 8009126:	46c0      	nop			@ (mov r8, r8)
 8009128:	46bd      	mov	sp, r7
 800912a:	b005      	add	sp, #20
 800912c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800912e:	46c0      	nop			@ (mov r8, r8)
 8009130:	0800a530 	.word	0x0800a530
 8009134:	0800a538 	.word	0x0800a538

08009138 <siprintf>:
 8009138:	b40e      	push	{r1, r2, r3}
 800913a:	b510      	push	{r4, lr}
 800913c:	2400      	movs	r4, #0
 800913e:	490c      	ldr	r1, [pc, #48]	@ (8009170 <siprintf+0x38>)
 8009140:	b09d      	sub	sp, #116	@ 0x74
 8009142:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009144:	9002      	str	r0, [sp, #8]
 8009146:	9006      	str	r0, [sp, #24]
 8009148:	9107      	str	r1, [sp, #28]
 800914a:	9104      	str	r1, [sp, #16]
 800914c:	4809      	ldr	r0, [pc, #36]	@ (8009174 <siprintf+0x3c>)
 800914e:	490a      	ldr	r1, [pc, #40]	@ (8009178 <siprintf+0x40>)
 8009150:	cb04      	ldmia	r3!, {r2}
 8009152:	9105      	str	r1, [sp, #20]
 8009154:	6800      	ldr	r0, [r0, #0]
 8009156:	a902      	add	r1, sp, #8
 8009158:	9301      	str	r3, [sp, #4]
 800915a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800915c:	f000 f9a8 	bl	80094b0 <_svfiprintf_r>
 8009160:	9b02      	ldr	r3, [sp, #8]
 8009162:	701c      	strb	r4, [r3, #0]
 8009164:	b01d      	add	sp, #116	@ 0x74
 8009166:	bc10      	pop	{r4}
 8009168:	bc08      	pop	{r3}
 800916a:	b003      	add	sp, #12
 800916c:	4718      	bx	r3
 800916e:	46c0      	nop			@ (mov r8, r8)
 8009170:	7fffffff 	.word	0x7fffffff
 8009174:	200009f0 	.word	0x200009f0
 8009178:	ffff0208 	.word	0xffff0208

0800917c <memset>:
 800917c:	0003      	movs	r3, r0
 800917e:	1882      	adds	r2, r0, r2
 8009180:	4293      	cmp	r3, r2
 8009182:	d100      	bne.n	8009186 <memset+0xa>
 8009184:	4770      	bx	lr
 8009186:	7019      	strb	r1, [r3, #0]
 8009188:	3301      	adds	r3, #1
 800918a:	e7f9      	b.n	8009180 <memset+0x4>

0800918c <__errno>:
 800918c:	4b01      	ldr	r3, [pc, #4]	@ (8009194 <__errno+0x8>)
 800918e:	6818      	ldr	r0, [r3, #0]
 8009190:	4770      	bx	lr
 8009192:	46c0      	nop			@ (mov r8, r8)
 8009194:	200009f0 	.word	0x200009f0

08009198 <__libc_init_array>:
 8009198:	b570      	push	{r4, r5, r6, lr}
 800919a:	2600      	movs	r6, #0
 800919c:	4c0c      	ldr	r4, [pc, #48]	@ (80091d0 <__libc_init_array+0x38>)
 800919e:	4d0d      	ldr	r5, [pc, #52]	@ (80091d4 <__libc_init_array+0x3c>)
 80091a0:	1b64      	subs	r4, r4, r5
 80091a2:	10a4      	asrs	r4, r4, #2
 80091a4:	42a6      	cmp	r6, r4
 80091a6:	d109      	bne.n	80091bc <__libc_init_array+0x24>
 80091a8:	2600      	movs	r6, #0
 80091aa:	f000 fda3 	bl	8009cf4 <_init>
 80091ae:	4c0a      	ldr	r4, [pc, #40]	@ (80091d8 <__libc_init_array+0x40>)
 80091b0:	4d0a      	ldr	r5, [pc, #40]	@ (80091dc <__libc_init_array+0x44>)
 80091b2:	1b64      	subs	r4, r4, r5
 80091b4:	10a4      	asrs	r4, r4, #2
 80091b6:	42a6      	cmp	r6, r4
 80091b8:	d105      	bne.n	80091c6 <__libc_init_array+0x2e>
 80091ba:	bd70      	pop	{r4, r5, r6, pc}
 80091bc:	00b3      	lsls	r3, r6, #2
 80091be:	58eb      	ldr	r3, [r5, r3]
 80091c0:	4798      	blx	r3
 80091c2:	3601      	adds	r6, #1
 80091c4:	e7ee      	b.n	80091a4 <__libc_init_array+0xc>
 80091c6:	00b3      	lsls	r3, r6, #2
 80091c8:	58eb      	ldr	r3, [r5, r3]
 80091ca:	4798      	blx	r3
 80091cc:	3601      	adds	r6, #1
 80091ce:	e7f2      	b.n	80091b6 <__libc_init_array+0x1e>
 80091d0:	0800a590 	.word	0x0800a590
 80091d4:	0800a590 	.word	0x0800a590
 80091d8:	0800a594 	.word	0x0800a594
 80091dc:	0800a590 	.word	0x0800a590

080091e0 <__retarget_lock_acquire_recursive>:
 80091e0:	4770      	bx	lr

080091e2 <__retarget_lock_release_recursive>:
 80091e2:	4770      	bx	lr

080091e4 <memcpy>:
 80091e4:	2300      	movs	r3, #0
 80091e6:	b510      	push	{r4, lr}
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d100      	bne.n	80091ee <memcpy+0xa>
 80091ec:	bd10      	pop	{r4, pc}
 80091ee:	5ccc      	ldrb	r4, [r1, r3]
 80091f0:	54c4      	strb	r4, [r0, r3]
 80091f2:	3301      	adds	r3, #1
 80091f4:	e7f8      	b.n	80091e8 <memcpy+0x4>
	...

080091f8 <_free_r>:
 80091f8:	b570      	push	{r4, r5, r6, lr}
 80091fa:	0005      	movs	r5, r0
 80091fc:	1e0c      	subs	r4, r1, #0
 80091fe:	d010      	beq.n	8009222 <_free_r+0x2a>
 8009200:	3c04      	subs	r4, #4
 8009202:	6823      	ldr	r3, [r4, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	da00      	bge.n	800920a <_free_r+0x12>
 8009208:	18e4      	adds	r4, r4, r3
 800920a:	0028      	movs	r0, r5
 800920c:	f000 f8e0 	bl	80093d0 <__malloc_lock>
 8009210:	4a1d      	ldr	r2, [pc, #116]	@ (8009288 <_free_r+0x90>)
 8009212:	6813      	ldr	r3, [r2, #0]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d105      	bne.n	8009224 <_free_r+0x2c>
 8009218:	6063      	str	r3, [r4, #4]
 800921a:	6014      	str	r4, [r2, #0]
 800921c:	0028      	movs	r0, r5
 800921e:	f000 f8df 	bl	80093e0 <__malloc_unlock>
 8009222:	bd70      	pop	{r4, r5, r6, pc}
 8009224:	42a3      	cmp	r3, r4
 8009226:	d908      	bls.n	800923a <_free_r+0x42>
 8009228:	6820      	ldr	r0, [r4, #0]
 800922a:	1821      	adds	r1, r4, r0
 800922c:	428b      	cmp	r3, r1
 800922e:	d1f3      	bne.n	8009218 <_free_r+0x20>
 8009230:	6819      	ldr	r1, [r3, #0]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	1809      	adds	r1, r1, r0
 8009236:	6021      	str	r1, [r4, #0]
 8009238:	e7ee      	b.n	8009218 <_free_r+0x20>
 800923a:	001a      	movs	r2, r3
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d001      	beq.n	8009246 <_free_r+0x4e>
 8009242:	42a3      	cmp	r3, r4
 8009244:	d9f9      	bls.n	800923a <_free_r+0x42>
 8009246:	6811      	ldr	r1, [r2, #0]
 8009248:	1850      	adds	r0, r2, r1
 800924a:	42a0      	cmp	r0, r4
 800924c:	d10b      	bne.n	8009266 <_free_r+0x6e>
 800924e:	6820      	ldr	r0, [r4, #0]
 8009250:	1809      	adds	r1, r1, r0
 8009252:	1850      	adds	r0, r2, r1
 8009254:	6011      	str	r1, [r2, #0]
 8009256:	4283      	cmp	r3, r0
 8009258:	d1e0      	bne.n	800921c <_free_r+0x24>
 800925a:	6818      	ldr	r0, [r3, #0]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	1841      	adds	r1, r0, r1
 8009260:	6011      	str	r1, [r2, #0]
 8009262:	6053      	str	r3, [r2, #4]
 8009264:	e7da      	b.n	800921c <_free_r+0x24>
 8009266:	42a0      	cmp	r0, r4
 8009268:	d902      	bls.n	8009270 <_free_r+0x78>
 800926a:	230c      	movs	r3, #12
 800926c:	602b      	str	r3, [r5, #0]
 800926e:	e7d5      	b.n	800921c <_free_r+0x24>
 8009270:	6820      	ldr	r0, [r4, #0]
 8009272:	1821      	adds	r1, r4, r0
 8009274:	428b      	cmp	r3, r1
 8009276:	d103      	bne.n	8009280 <_free_r+0x88>
 8009278:	6819      	ldr	r1, [r3, #0]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	1809      	adds	r1, r1, r0
 800927e:	6021      	str	r1, [r4, #0]
 8009280:	6063      	str	r3, [r4, #4]
 8009282:	6054      	str	r4, [r2, #4]
 8009284:	e7ca      	b.n	800921c <_free_r+0x24>
 8009286:	46c0      	nop			@ (mov r8, r8)
 8009288:	20001218 	.word	0x20001218

0800928c <sbrk_aligned>:
 800928c:	b570      	push	{r4, r5, r6, lr}
 800928e:	4e0f      	ldr	r6, [pc, #60]	@ (80092cc <sbrk_aligned+0x40>)
 8009290:	000d      	movs	r5, r1
 8009292:	6831      	ldr	r1, [r6, #0]
 8009294:	0004      	movs	r4, r0
 8009296:	2900      	cmp	r1, #0
 8009298:	d102      	bne.n	80092a0 <sbrk_aligned+0x14>
 800929a:	f000 fb95 	bl	80099c8 <_sbrk_r>
 800929e:	6030      	str	r0, [r6, #0]
 80092a0:	0029      	movs	r1, r5
 80092a2:	0020      	movs	r0, r4
 80092a4:	f000 fb90 	bl	80099c8 <_sbrk_r>
 80092a8:	1c43      	adds	r3, r0, #1
 80092aa:	d103      	bne.n	80092b4 <sbrk_aligned+0x28>
 80092ac:	2501      	movs	r5, #1
 80092ae:	426d      	negs	r5, r5
 80092b0:	0028      	movs	r0, r5
 80092b2:	bd70      	pop	{r4, r5, r6, pc}
 80092b4:	2303      	movs	r3, #3
 80092b6:	1cc5      	adds	r5, r0, #3
 80092b8:	439d      	bics	r5, r3
 80092ba:	42a8      	cmp	r0, r5
 80092bc:	d0f8      	beq.n	80092b0 <sbrk_aligned+0x24>
 80092be:	1a29      	subs	r1, r5, r0
 80092c0:	0020      	movs	r0, r4
 80092c2:	f000 fb81 	bl	80099c8 <_sbrk_r>
 80092c6:	3001      	adds	r0, #1
 80092c8:	d1f2      	bne.n	80092b0 <sbrk_aligned+0x24>
 80092ca:	e7ef      	b.n	80092ac <sbrk_aligned+0x20>
 80092cc:	20001214 	.word	0x20001214

080092d0 <_malloc_r>:
 80092d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092d2:	2203      	movs	r2, #3
 80092d4:	1ccb      	adds	r3, r1, #3
 80092d6:	4393      	bics	r3, r2
 80092d8:	3308      	adds	r3, #8
 80092da:	0005      	movs	r5, r0
 80092dc:	001f      	movs	r7, r3
 80092de:	2b0c      	cmp	r3, #12
 80092e0:	d234      	bcs.n	800934c <_malloc_r+0x7c>
 80092e2:	270c      	movs	r7, #12
 80092e4:	42b9      	cmp	r1, r7
 80092e6:	d833      	bhi.n	8009350 <_malloc_r+0x80>
 80092e8:	0028      	movs	r0, r5
 80092ea:	f000 f871 	bl	80093d0 <__malloc_lock>
 80092ee:	4e37      	ldr	r6, [pc, #220]	@ (80093cc <_malloc_r+0xfc>)
 80092f0:	6833      	ldr	r3, [r6, #0]
 80092f2:	001c      	movs	r4, r3
 80092f4:	2c00      	cmp	r4, #0
 80092f6:	d12f      	bne.n	8009358 <_malloc_r+0x88>
 80092f8:	0039      	movs	r1, r7
 80092fa:	0028      	movs	r0, r5
 80092fc:	f7ff ffc6 	bl	800928c <sbrk_aligned>
 8009300:	0004      	movs	r4, r0
 8009302:	1c43      	adds	r3, r0, #1
 8009304:	d15f      	bne.n	80093c6 <_malloc_r+0xf6>
 8009306:	6834      	ldr	r4, [r6, #0]
 8009308:	9400      	str	r4, [sp, #0]
 800930a:	9b00      	ldr	r3, [sp, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d14a      	bne.n	80093a6 <_malloc_r+0xd6>
 8009310:	2c00      	cmp	r4, #0
 8009312:	d052      	beq.n	80093ba <_malloc_r+0xea>
 8009314:	6823      	ldr	r3, [r4, #0]
 8009316:	0028      	movs	r0, r5
 8009318:	18e3      	adds	r3, r4, r3
 800931a:	9900      	ldr	r1, [sp, #0]
 800931c:	9301      	str	r3, [sp, #4]
 800931e:	f000 fb53 	bl	80099c8 <_sbrk_r>
 8009322:	9b01      	ldr	r3, [sp, #4]
 8009324:	4283      	cmp	r3, r0
 8009326:	d148      	bne.n	80093ba <_malloc_r+0xea>
 8009328:	6823      	ldr	r3, [r4, #0]
 800932a:	0028      	movs	r0, r5
 800932c:	1aff      	subs	r7, r7, r3
 800932e:	0039      	movs	r1, r7
 8009330:	f7ff ffac 	bl	800928c <sbrk_aligned>
 8009334:	3001      	adds	r0, #1
 8009336:	d040      	beq.n	80093ba <_malloc_r+0xea>
 8009338:	6823      	ldr	r3, [r4, #0]
 800933a:	19db      	adds	r3, r3, r7
 800933c:	6023      	str	r3, [r4, #0]
 800933e:	6833      	ldr	r3, [r6, #0]
 8009340:	685a      	ldr	r2, [r3, #4]
 8009342:	2a00      	cmp	r2, #0
 8009344:	d133      	bne.n	80093ae <_malloc_r+0xde>
 8009346:	9b00      	ldr	r3, [sp, #0]
 8009348:	6033      	str	r3, [r6, #0]
 800934a:	e019      	b.n	8009380 <_malloc_r+0xb0>
 800934c:	2b00      	cmp	r3, #0
 800934e:	dac9      	bge.n	80092e4 <_malloc_r+0x14>
 8009350:	230c      	movs	r3, #12
 8009352:	602b      	str	r3, [r5, #0]
 8009354:	2000      	movs	r0, #0
 8009356:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009358:	6821      	ldr	r1, [r4, #0]
 800935a:	1bc9      	subs	r1, r1, r7
 800935c:	d420      	bmi.n	80093a0 <_malloc_r+0xd0>
 800935e:	290b      	cmp	r1, #11
 8009360:	d90a      	bls.n	8009378 <_malloc_r+0xa8>
 8009362:	19e2      	adds	r2, r4, r7
 8009364:	6027      	str	r7, [r4, #0]
 8009366:	42a3      	cmp	r3, r4
 8009368:	d104      	bne.n	8009374 <_malloc_r+0xa4>
 800936a:	6032      	str	r2, [r6, #0]
 800936c:	6863      	ldr	r3, [r4, #4]
 800936e:	6011      	str	r1, [r2, #0]
 8009370:	6053      	str	r3, [r2, #4]
 8009372:	e005      	b.n	8009380 <_malloc_r+0xb0>
 8009374:	605a      	str	r2, [r3, #4]
 8009376:	e7f9      	b.n	800936c <_malloc_r+0x9c>
 8009378:	6862      	ldr	r2, [r4, #4]
 800937a:	42a3      	cmp	r3, r4
 800937c:	d10e      	bne.n	800939c <_malloc_r+0xcc>
 800937e:	6032      	str	r2, [r6, #0]
 8009380:	0028      	movs	r0, r5
 8009382:	f000 f82d 	bl	80093e0 <__malloc_unlock>
 8009386:	0020      	movs	r0, r4
 8009388:	2207      	movs	r2, #7
 800938a:	300b      	adds	r0, #11
 800938c:	1d23      	adds	r3, r4, #4
 800938e:	4390      	bics	r0, r2
 8009390:	1ac2      	subs	r2, r0, r3
 8009392:	4298      	cmp	r0, r3
 8009394:	d0df      	beq.n	8009356 <_malloc_r+0x86>
 8009396:	1a1b      	subs	r3, r3, r0
 8009398:	50a3      	str	r3, [r4, r2]
 800939a:	e7dc      	b.n	8009356 <_malloc_r+0x86>
 800939c:	605a      	str	r2, [r3, #4]
 800939e:	e7ef      	b.n	8009380 <_malloc_r+0xb0>
 80093a0:	0023      	movs	r3, r4
 80093a2:	6864      	ldr	r4, [r4, #4]
 80093a4:	e7a6      	b.n	80092f4 <_malloc_r+0x24>
 80093a6:	9c00      	ldr	r4, [sp, #0]
 80093a8:	6863      	ldr	r3, [r4, #4]
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	e7ad      	b.n	800930a <_malloc_r+0x3a>
 80093ae:	001a      	movs	r2, r3
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	42a3      	cmp	r3, r4
 80093b4:	d1fb      	bne.n	80093ae <_malloc_r+0xde>
 80093b6:	2300      	movs	r3, #0
 80093b8:	e7da      	b.n	8009370 <_malloc_r+0xa0>
 80093ba:	230c      	movs	r3, #12
 80093bc:	0028      	movs	r0, r5
 80093be:	602b      	str	r3, [r5, #0]
 80093c0:	f000 f80e 	bl	80093e0 <__malloc_unlock>
 80093c4:	e7c6      	b.n	8009354 <_malloc_r+0x84>
 80093c6:	6007      	str	r7, [r0, #0]
 80093c8:	e7da      	b.n	8009380 <_malloc_r+0xb0>
 80093ca:	46c0      	nop			@ (mov r8, r8)
 80093cc:	20001218 	.word	0x20001218

080093d0 <__malloc_lock>:
 80093d0:	b510      	push	{r4, lr}
 80093d2:	4802      	ldr	r0, [pc, #8]	@ (80093dc <__malloc_lock+0xc>)
 80093d4:	f7ff ff04 	bl	80091e0 <__retarget_lock_acquire_recursive>
 80093d8:	bd10      	pop	{r4, pc}
 80093da:	46c0      	nop			@ (mov r8, r8)
 80093dc:	20001210 	.word	0x20001210

080093e0 <__malloc_unlock>:
 80093e0:	b510      	push	{r4, lr}
 80093e2:	4802      	ldr	r0, [pc, #8]	@ (80093ec <__malloc_unlock+0xc>)
 80093e4:	f7ff fefd 	bl	80091e2 <__retarget_lock_release_recursive>
 80093e8:	bd10      	pop	{r4, pc}
 80093ea:	46c0      	nop			@ (mov r8, r8)
 80093ec:	20001210 	.word	0x20001210

080093f0 <__ssputs_r>:
 80093f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093f2:	688e      	ldr	r6, [r1, #8]
 80093f4:	b085      	sub	sp, #20
 80093f6:	001f      	movs	r7, r3
 80093f8:	000c      	movs	r4, r1
 80093fa:	680b      	ldr	r3, [r1, #0]
 80093fc:	9002      	str	r0, [sp, #8]
 80093fe:	9203      	str	r2, [sp, #12]
 8009400:	42be      	cmp	r6, r7
 8009402:	d830      	bhi.n	8009466 <__ssputs_r+0x76>
 8009404:	210c      	movs	r1, #12
 8009406:	5e62      	ldrsh	r2, [r4, r1]
 8009408:	2190      	movs	r1, #144	@ 0x90
 800940a:	00c9      	lsls	r1, r1, #3
 800940c:	420a      	tst	r2, r1
 800940e:	d028      	beq.n	8009462 <__ssputs_r+0x72>
 8009410:	2003      	movs	r0, #3
 8009412:	6921      	ldr	r1, [r4, #16]
 8009414:	1a5b      	subs	r3, r3, r1
 8009416:	9301      	str	r3, [sp, #4]
 8009418:	6963      	ldr	r3, [r4, #20]
 800941a:	4343      	muls	r3, r0
 800941c:	9801      	ldr	r0, [sp, #4]
 800941e:	0fdd      	lsrs	r5, r3, #31
 8009420:	18ed      	adds	r5, r5, r3
 8009422:	1c7b      	adds	r3, r7, #1
 8009424:	181b      	adds	r3, r3, r0
 8009426:	106d      	asrs	r5, r5, #1
 8009428:	42ab      	cmp	r3, r5
 800942a:	d900      	bls.n	800942e <__ssputs_r+0x3e>
 800942c:	001d      	movs	r5, r3
 800942e:	0552      	lsls	r2, r2, #21
 8009430:	d528      	bpl.n	8009484 <__ssputs_r+0x94>
 8009432:	0029      	movs	r1, r5
 8009434:	9802      	ldr	r0, [sp, #8]
 8009436:	f7ff ff4b 	bl	80092d0 <_malloc_r>
 800943a:	1e06      	subs	r6, r0, #0
 800943c:	d02c      	beq.n	8009498 <__ssputs_r+0xa8>
 800943e:	9a01      	ldr	r2, [sp, #4]
 8009440:	6921      	ldr	r1, [r4, #16]
 8009442:	f7ff fecf 	bl	80091e4 <memcpy>
 8009446:	89a2      	ldrh	r2, [r4, #12]
 8009448:	4b18      	ldr	r3, [pc, #96]	@ (80094ac <__ssputs_r+0xbc>)
 800944a:	401a      	ands	r2, r3
 800944c:	2380      	movs	r3, #128	@ 0x80
 800944e:	4313      	orrs	r3, r2
 8009450:	81a3      	strh	r3, [r4, #12]
 8009452:	9b01      	ldr	r3, [sp, #4]
 8009454:	6126      	str	r6, [r4, #16]
 8009456:	18f6      	adds	r6, r6, r3
 8009458:	6026      	str	r6, [r4, #0]
 800945a:	003e      	movs	r6, r7
 800945c:	6165      	str	r5, [r4, #20]
 800945e:	1aed      	subs	r5, r5, r3
 8009460:	60a5      	str	r5, [r4, #8]
 8009462:	42be      	cmp	r6, r7
 8009464:	d900      	bls.n	8009468 <__ssputs_r+0x78>
 8009466:	003e      	movs	r6, r7
 8009468:	0032      	movs	r2, r6
 800946a:	9903      	ldr	r1, [sp, #12]
 800946c:	6820      	ldr	r0, [r4, #0]
 800946e:	f000 fa99 	bl	80099a4 <memmove>
 8009472:	2000      	movs	r0, #0
 8009474:	68a3      	ldr	r3, [r4, #8]
 8009476:	1b9b      	subs	r3, r3, r6
 8009478:	60a3      	str	r3, [r4, #8]
 800947a:	6823      	ldr	r3, [r4, #0]
 800947c:	199b      	adds	r3, r3, r6
 800947e:	6023      	str	r3, [r4, #0]
 8009480:	b005      	add	sp, #20
 8009482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009484:	002a      	movs	r2, r5
 8009486:	9802      	ldr	r0, [sp, #8]
 8009488:	f000 fabb 	bl	8009a02 <_realloc_r>
 800948c:	1e06      	subs	r6, r0, #0
 800948e:	d1e0      	bne.n	8009452 <__ssputs_r+0x62>
 8009490:	6921      	ldr	r1, [r4, #16]
 8009492:	9802      	ldr	r0, [sp, #8]
 8009494:	f7ff feb0 	bl	80091f8 <_free_r>
 8009498:	230c      	movs	r3, #12
 800949a:	2001      	movs	r0, #1
 800949c:	9a02      	ldr	r2, [sp, #8]
 800949e:	4240      	negs	r0, r0
 80094a0:	6013      	str	r3, [r2, #0]
 80094a2:	89a2      	ldrh	r2, [r4, #12]
 80094a4:	3334      	adds	r3, #52	@ 0x34
 80094a6:	4313      	orrs	r3, r2
 80094a8:	81a3      	strh	r3, [r4, #12]
 80094aa:	e7e9      	b.n	8009480 <__ssputs_r+0x90>
 80094ac:	fffffb7f 	.word	0xfffffb7f

080094b0 <_svfiprintf_r>:
 80094b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094b2:	b0a1      	sub	sp, #132	@ 0x84
 80094b4:	9003      	str	r0, [sp, #12]
 80094b6:	001d      	movs	r5, r3
 80094b8:	898b      	ldrh	r3, [r1, #12]
 80094ba:	000f      	movs	r7, r1
 80094bc:	0016      	movs	r6, r2
 80094be:	061b      	lsls	r3, r3, #24
 80094c0:	d511      	bpl.n	80094e6 <_svfiprintf_r+0x36>
 80094c2:	690b      	ldr	r3, [r1, #16]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d10e      	bne.n	80094e6 <_svfiprintf_r+0x36>
 80094c8:	2140      	movs	r1, #64	@ 0x40
 80094ca:	f7ff ff01 	bl	80092d0 <_malloc_r>
 80094ce:	6038      	str	r0, [r7, #0]
 80094d0:	6138      	str	r0, [r7, #16]
 80094d2:	2800      	cmp	r0, #0
 80094d4:	d105      	bne.n	80094e2 <_svfiprintf_r+0x32>
 80094d6:	230c      	movs	r3, #12
 80094d8:	9a03      	ldr	r2, [sp, #12]
 80094da:	6013      	str	r3, [r2, #0]
 80094dc:	2001      	movs	r0, #1
 80094de:	4240      	negs	r0, r0
 80094e0:	e0cf      	b.n	8009682 <_svfiprintf_r+0x1d2>
 80094e2:	2340      	movs	r3, #64	@ 0x40
 80094e4:	617b      	str	r3, [r7, #20]
 80094e6:	2300      	movs	r3, #0
 80094e8:	ac08      	add	r4, sp, #32
 80094ea:	6163      	str	r3, [r4, #20]
 80094ec:	3320      	adds	r3, #32
 80094ee:	7663      	strb	r3, [r4, #25]
 80094f0:	3310      	adds	r3, #16
 80094f2:	76a3      	strb	r3, [r4, #26]
 80094f4:	9507      	str	r5, [sp, #28]
 80094f6:	0035      	movs	r5, r6
 80094f8:	782b      	ldrb	r3, [r5, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d001      	beq.n	8009502 <_svfiprintf_r+0x52>
 80094fe:	2b25      	cmp	r3, #37	@ 0x25
 8009500:	d148      	bne.n	8009594 <_svfiprintf_r+0xe4>
 8009502:	1bab      	subs	r3, r5, r6
 8009504:	9305      	str	r3, [sp, #20]
 8009506:	42b5      	cmp	r5, r6
 8009508:	d00b      	beq.n	8009522 <_svfiprintf_r+0x72>
 800950a:	0032      	movs	r2, r6
 800950c:	0039      	movs	r1, r7
 800950e:	9803      	ldr	r0, [sp, #12]
 8009510:	f7ff ff6e 	bl	80093f0 <__ssputs_r>
 8009514:	3001      	adds	r0, #1
 8009516:	d100      	bne.n	800951a <_svfiprintf_r+0x6a>
 8009518:	e0ae      	b.n	8009678 <_svfiprintf_r+0x1c8>
 800951a:	6963      	ldr	r3, [r4, #20]
 800951c:	9a05      	ldr	r2, [sp, #20]
 800951e:	189b      	adds	r3, r3, r2
 8009520:	6163      	str	r3, [r4, #20]
 8009522:	782b      	ldrb	r3, [r5, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d100      	bne.n	800952a <_svfiprintf_r+0x7a>
 8009528:	e0a6      	b.n	8009678 <_svfiprintf_r+0x1c8>
 800952a:	2201      	movs	r2, #1
 800952c:	2300      	movs	r3, #0
 800952e:	4252      	negs	r2, r2
 8009530:	6062      	str	r2, [r4, #4]
 8009532:	a904      	add	r1, sp, #16
 8009534:	3254      	adds	r2, #84	@ 0x54
 8009536:	1852      	adds	r2, r2, r1
 8009538:	1c6e      	adds	r6, r5, #1
 800953a:	6023      	str	r3, [r4, #0]
 800953c:	60e3      	str	r3, [r4, #12]
 800953e:	60a3      	str	r3, [r4, #8]
 8009540:	7013      	strb	r3, [r2, #0]
 8009542:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009544:	4b54      	ldr	r3, [pc, #336]	@ (8009698 <_svfiprintf_r+0x1e8>)
 8009546:	2205      	movs	r2, #5
 8009548:	0018      	movs	r0, r3
 800954a:	7831      	ldrb	r1, [r6, #0]
 800954c:	9305      	str	r3, [sp, #20]
 800954e:	f000 fa4d 	bl	80099ec <memchr>
 8009552:	1c75      	adds	r5, r6, #1
 8009554:	2800      	cmp	r0, #0
 8009556:	d11f      	bne.n	8009598 <_svfiprintf_r+0xe8>
 8009558:	6822      	ldr	r2, [r4, #0]
 800955a:	06d3      	lsls	r3, r2, #27
 800955c:	d504      	bpl.n	8009568 <_svfiprintf_r+0xb8>
 800955e:	2353      	movs	r3, #83	@ 0x53
 8009560:	a904      	add	r1, sp, #16
 8009562:	185b      	adds	r3, r3, r1
 8009564:	2120      	movs	r1, #32
 8009566:	7019      	strb	r1, [r3, #0]
 8009568:	0713      	lsls	r3, r2, #28
 800956a:	d504      	bpl.n	8009576 <_svfiprintf_r+0xc6>
 800956c:	2353      	movs	r3, #83	@ 0x53
 800956e:	a904      	add	r1, sp, #16
 8009570:	185b      	adds	r3, r3, r1
 8009572:	212b      	movs	r1, #43	@ 0x2b
 8009574:	7019      	strb	r1, [r3, #0]
 8009576:	7833      	ldrb	r3, [r6, #0]
 8009578:	2b2a      	cmp	r3, #42	@ 0x2a
 800957a:	d016      	beq.n	80095aa <_svfiprintf_r+0xfa>
 800957c:	0035      	movs	r5, r6
 800957e:	2100      	movs	r1, #0
 8009580:	200a      	movs	r0, #10
 8009582:	68e3      	ldr	r3, [r4, #12]
 8009584:	782a      	ldrb	r2, [r5, #0]
 8009586:	1c6e      	adds	r6, r5, #1
 8009588:	3a30      	subs	r2, #48	@ 0x30
 800958a:	2a09      	cmp	r2, #9
 800958c:	d950      	bls.n	8009630 <_svfiprintf_r+0x180>
 800958e:	2900      	cmp	r1, #0
 8009590:	d111      	bne.n	80095b6 <_svfiprintf_r+0x106>
 8009592:	e017      	b.n	80095c4 <_svfiprintf_r+0x114>
 8009594:	3501      	adds	r5, #1
 8009596:	e7af      	b.n	80094f8 <_svfiprintf_r+0x48>
 8009598:	9b05      	ldr	r3, [sp, #20]
 800959a:	6822      	ldr	r2, [r4, #0]
 800959c:	1ac0      	subs	r0, r0, r3
 800959e:	2301      	movs	r3, #1
 80095a0:	4083      	lsls	r3, r0
 80095a2:	4313      	orrs	r3, r2
 80095a4:	002e      	movs	r6, r5
 80095a6:	6023      	str	r3, [r4, #0]
 80095a8:	e7cc      	b.n	8009544 <_svfiprintf_r+0x94>
 80095aa:	9b07      	ldr	r3, [sp, #28]
 80095ac:	1d19      	adds	r1, r3, #4
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	9107      	str	r1, [sp, #28]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	db01      	blt.n	80095ba <_svfiprintf_r+0x10a>
 80095b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095b8:	e004      	b.n	80095c4 <_svfiprintf_r+0x114>
 80095ba:	425b      	negs	r3, r3
 80095bc:	60e3      	str	r3, [r4, #12]
 80095be:	2302      	movs	r3, #2
 80095c0:	4313      	orrs	r3, r2
 80095c2:	6023      	str	r3, [r4, #0]
 80095c4:	782b      	ldrb	r3, [r5, #0]
 80095c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80095c8:	d10c      	bne.n	80095e4 <_svfiprintf_r+0x134>
 80095ca:	786b      	ldrb	r3, [r5, #1]
 80095cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80095ce:	d134      	bne.n	800963a <_svfiprintf_r+0x18a>
 80095d0:	9b07      	ldr	r3, [sp, #28]
 80095d2:	3502      	adds	r5, #2
 80095d4:	1d1a      	adds	r2, r3, #4
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	9207      	str	r2, [sp, #28]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	da01      	bge.n	80095e2 <_svfiprintf_r+0x132>
 80095de:	2301      	movs	r3, #1
 80095e0:	425b      	negs	r3, r3
 80095e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80095e4:	4e2d      	ldr	r6, [pc, #180]	@ (800969c <_svfiprintf_r+0x1ec>)
 80095e6:	2203      	movs	r2, #3
 80095e8:	0030      	movs	r0, r6
 80095ea:	7829      	ldrb	r1, [r5, #0]
 80095ec:	f000 f9fe 	bl	80099ec <memchr>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d006      	beq.n	8009602 <_svfiprintf_r+0x152>
 80095f4:	2340      	movs	r3, #64	@ 0x40
 80095f6:	1b80      	subs	r0, r0, r6
 80095f8:	4083      	lsls	r3, r0
 80095fa:	6822      	ldr	r2, [r4, #0]
 80095fc:	3501      	adds	r5, #1
 80095fe:	4313      	orrs	r3, r2
 8009600:	6023      	str	r3, [r4, #0]
 8009602:	7829      	ldrb	r1, [r5, #0]
 8009604:	2206      	movs	r2, #6
 8009606:	4826      	ldr	r0, [pc, #152]	@ (80096a0 <_svfiprintf_r+0x1f0>)
 8009608:	1c6e      	adds	r6, r5, #1
 800960a:	7621      	strb	r1, [r4, #24]
 800960c:	f000 f9ee 	bl	80099ec <memchr>
 8009610:	2800      	cmp	r0, #0
 8009612:	d038      	beq.n	8009686 <_svfiprintf_r+0x1d6>
 8009614:	4b23      	ldr	r3, [pc, #140]	@ (80096a4 <_svfiprintf_r+0x1f4>)
 8009616:	2b00      	cmp	r3, #0
 8009618:	d122      	bne.n	8009660 <_svfiprintf_r+0x1b0>
 800961a:	2207      	movs	r2, #7
 800961c:	9b07      	ldr	r3, [sp, #28]
 800961e:	3307      	adds	r3, #7
 8009620:	4393      	bics	r3, r2
 8009622:	3308      	adds	r3, #8
 8009624:	9307      	str	r3, [sp, #28]
 8009626:	6963      	ldr	r3, [r4, #20]
 8009628:	9a04      	ldr	r2, [sp, #16]
 800962a:	189b      	adds	r3, r3, r2
 800962c:	6163      	str	r3, [r4, #20]
 800962e:	e762      	b.n	80094f6 <_svfiprintf_r+0x46>
 8009630:	4343      	muls	r3, r0
 8009632:	0035      	movs	r5, r6
 8009634:	2101      	movs	r1, #1
 8009636:	189b      	adds	r3, r3, r2
 8009638:	e7a4      	b.n	8009584 <_svfiprintf_r+0xd4>
 800963a:	2300      	movs	r3, #0
 800963c:	200a      	movs	r0, #10
 800963e:	0019      	movs	r1, r3
 8009640:	3501      	adds	r5, #1
 8009642:	6063      	str	r3, [r4, #4]
 8009644:	782a      	ldrb	r2, [r5, #0]
 8009646:	1c6e      	adds	r6, r5, #1
 8009648:	3a30      	subs	r2, #48	@ 0x30
 800964a:	2a09      	cmp	r2, #9
 800964c:	d903      	bls.n	8009656 <_svfiprintf_r+0x1a6>
 800964e:	2b00      	cmp	r3, #0
 8009650:	d0c8      	beq.n	80095e4 <_svfiprintf_r+0x134>
 8009652:	9109      	str	r1, [sp, #36]	@ 0x24
 8009654:	e7c6      	b.n	80095e4 <_svfiprintf_r+0x134>
 8009656:	4341      	muls	r1, r0
 8009658:	0035      	movs	r5, r6
 800965a:	2301      	movs	r3, #1
 800965c:	1889      	adds	r1, r1, r2
 800965e:	e7f1      	b.n	8009644 <_svfiprintf_r+0x194>
 8009660:	aa07      	add	r2, sp, #28
 8009662:	9200      	str	r2, [sp, #0]
 8009664:	0021      	movs	r1, r4
 8009666:	003a      	movs	r2, r7
 8009668:	4b0f      	ldr	r3, [pc, #60]	@ (80096a8 <_svfiprintf_r+0x1f8>)
 800966a:	9803      	ldr	r0, [sp, #12]
 800966c:	e000      	b.n	8009670 <_svfiprintf_r+0x1c0>
 800966e:	bf00      	nop
 8009670:	9004      	str	r0, [sp, #16]
 8009672:	9b04      	ldr	r3, [sp, #16]
 8009674:	3301      	adds	r3, #1
 8009676:	d1d6      	bne.n	8009626 <_svfiprintf_r+0x176>
 8009678:	89bb      	ldrh	r3, [r7, #12]
 800967a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800967c:	065b      	lsls	r3, r3, #25
 800967e:	d500      	bpl.n	8009682 <_svfiprintf_r+0x1d2>
 8009680:	e72c      	b.n	80094dc <_svfiprintf_r+0x2c>
 8009682:	b021      	add	sp, #132	@ 0x84
 8009684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009686:	aa07      	add	r2, sp, #28
 8009688:	9200      	str	r2, [sp, #0]
 800968a:	0021      	movs	r1, r4
 800968c:	003a      	movs	r2, r7
 800968e:	4b06      	ldr	r3, [pc, #24]	@ (80096a8 <_svfiprintf_r+0x1f8>)
 8009690:	9803      	ldr	r0, [sp, #12]
 8009692:	f000 f87b 	bl	800978c <_printf_i>
 8009696:	e7eb      	b.n	8009670 <_svfiprintf_r+0x1c0>
 8009698:	0800a540 	.word	0x0800a540
 800969c:	0800a546 	.word	0x0800a546
 80096a0:	0800a54a 	.word	0x0800a54a
 80096a4:	00000000 	.word	0x00000000
 80096a8:	080093f1 	.word	0x080093f1

080096ac <_printf_common>:
 80096ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096ae:	0016      	movs	r6, r2
 80096b0:	9301      	str	r3, [sp, #4]
 80096b2:	688a      	ldr	r2, [r1, #8]
 80096b4:	690b      	ldr	r3, [r1, #16]
 80096b6:	000c      	movs	r4, r1
 80096b8:	9000      	str	r0, [sp, #0]
 80096ba:	4293      	cmp	r3, r2
 80096bc:	da00      	bge.n	80096c0 <_printf_common+0x14>
 80096be:	0013      	movs	r3, r2
 80096c0:	0022      	movs	r2, r4
 80096c2:	6033      	str	r3, [r6, #0]
 80096c4:	3243      	adds	r2, #67	@ 0x43
 80096c6:	7812      	ldrb	r2, [r2, #0]
 80096c8:	2a00      	cmp	r2, #0
 80096ca:	d001      	beq.n	80096d0 <_printf_common+0x24>
 80096cc:	3301      	adds	r3, #1
 80096ce:	6033      	str	r3, [r6, #0]
 80096d0:	6823      	ldr	r3, [r4, #0]
 80096d2:	069b      	lsls	r3, r3, #26
 80096d4:	d502      	bpl.n	80096dc <_printf_common+0x30>
 80096d6:	6833      	ldr	r3, [r6, #0]
 80096d8:	3302      	adds	r3, #2
 80096da:	6033      	str	r3, [r6, #0]
 80096dc:	6822      	ldr	r2, [r4, #0]
 80096de:	2306      	movs	r3, #6
 80096e0:	0015      	movs	r5, r2
 80096e2:	401d      	ands	r5, r3
 80096e4:	421a      	tst	r2, r3
 80096e6:	d027      	beq.n	8009738 <_printf_common+0x8c>
 80096e8:	0023      	movs	r3, r4
 80096ea:	3343      	adds	r3, #67	@ 0x43
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	1e5a      	subs	r2, r3, #1
 80096f0:	4193      	sbcs	r3, r2
 80096f2:	6822      	ldr	r2, [r4, #0]
 80096f4:	0692      	lsls	r2, r2, #26
 80096f6:	d430      	bmi.n	800975a <_printf_common+0xae>
 80096f8:	0022      	movs	r2, r4
 80096fa:	9901      	ldr	r1, [sp, #4]
 80096fc:	9800      	ldr	r0, [sp, #0]
 80096fe:	9d08      	ldr	r5, [sp, #32]
 8009700:	3243      	adds	r2, #67	@ 0x43
 8009702:	47a8      	blx	r5
 8009704:	3001      	adds	r0, #1
 8009706:	d025      	beq.n	8009754 <_printf_common+0xa8>
 8009708:	2206      	movs	r2, #6
 800970a:	6823      	ldr	r3, [r4, #0]
 800970c:	2500      	movs	r5, #0
 800970e:	4013      	ands	r3, r2
 8009710:	2b04      	cmp	r3, #4
 8009712:	d105      	bne.n	8009720 <_printf_common+0x74>
 8009714:	6833      	ldr	r3, [r6, #0]
 8009716:	68e5      	ldr	r5, [r4, #12]
 8009718:	1aed      	subs	r5, r5, r3
 800971a:	43eb      	mvns	r3, r5
 800971c:	17db      	asrs	r3, r3, #31
 800971e:	401d      	ands	r5, r3
 8009720:	68a3      	ldr	r3, [r4, #8]
 8009722:	6922      	ldr	r2, [r4, #16]
 8009724:	4293      	cmp	r3, r2
 8009726:	dd01      	ble.n	800972c <_printf_common+0x80>
 8009728:	1a9b      	subs	r3, r3, r2
 800972a:	18ed      	adds	r5, r5, r3
 800972c:	2600      	movs	r6, #0
 800972e:	42b5      	cmp	r5, r6
 8009730:	d120      	bne.n	8009774 <_printf_common+0xc8>
 8009732:	2000      	movs	r0, #0
 8009734:	e010      	b.n	8009758 <_printf_common+0xac>
 8009736:	3501      	adds	r5, #1
 8009738:	68e3      	ldr	r3, [r4, #12]
 800973a:	6832      	ldr	r2, [r6, #0]
 800973c:	1a9b      	subs	r3, r3, r2
 800973e:	42ab      	cmp	r3, r5
 8009740:	ddd2      	ble.n	80096e8 <_printf_common+0x3c>
 8009742:	0022      	movs	r2, r4
 8009744:	2301      	movs	r3, #1
 8009746:	9901      	ldr	r1, [sp, #4]
 8009748:	9800      	ldr	r0, [sp, #0]
 800974a:	9f08      	ldr	r7, [sp, #32]
 800974c:	3219      	adds	r2, #25
 800974e:	47b8      	blx	r7
 8009750:	3001      	adds	r0, #1
 8009752:	d1f0      	bne.n	8009736 <_printf_common+0x8a>
 8009754:	2001      	movs	r0, #1
 8009756:	4240      	negs	r0, r0
 8009758:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800975a:	2030      	movs	r0, #48	@ 0x30
 800975c:	18e1      	adds	r1, r4, r3
 800975e:	3143      	adds	r1, #67	@ 0x43
 8009760:	7008      	strb	r0, [r1, #0]
 8009762:	0021      	movs	r1, r4
 8009764:	1c5a      	adds	r2, r3, #1
 8009766:	3145      	adds	r1, #69	@ 0x45
 8009768:	7809      	ldrb	r1, [r1, #0]
 800976a:	18a2      	adds	r2, r4, r2
 800976c:	3243      	adds	r2, #67	@ 0x43
 800976e:	3302      	adds	r3, #2
 8009770:	7011      	strb	r1, [r2, #0]
 8009772:	e7c1      	b.n	80096f8 <_printf_common+0x4c>
 8009774:	0022      	movs	r2, r4
 8009776:	2301      	movs	r3, #1
 8009778:	9901      	ldr	r1, [sp, #4]
 800977a:	9800      	ldr	r0, [sp, #0]
 800977c:	9f08      	ldr	r7, [sp, #32]
 800977e:	321a      	adds	r2, #26
 8009780:	47b8      	blx	r7
 8009782:	3001      	adds	r0, #1
 8009784:	d0e6      	beq.n	8009754 <_printf_common+0xa8>
 8009786:	3601      	adds	r6, #1
 8009788:	e7d1      	b.n	800972e <_printf_common+0x82>
	...

0800978c <_printf_i>:
 800978c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800978e:	b08b      	sub	sp, #44	@ 0x2c
 8009790:	9206      	str	r2, [sp, #24]
 8009792:	000a      	movs	r2, r1
 8009794:	3243      	adds	r2, #67	@ 0x43
 8009796:	9307      	str	r3, [sp, #28]
 8009798:	9005      	str	r0, [sp, #20]
 800979a:	9203      	str	r2, [sp, #12]
 800979c:	7e0a      	ldrb	r2, [r1, #24]
 800979e:	000c      	movs	r4, r1
 80097a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80097a2:	2a78      	cmp	r2, #120	@ 0x78
 80097a4:	d809      	bhi.n	80097ba <_printf_i+0x2e>
 80097a6:	2a62      	cmp	r2, #98	@ 0x62
 80097a8:	d80b      	bhi.n	80097c2 <_printf_i+0x36>
 80097aa:	2a00      	cmp	r2, #0
 80097ac:	d100      	bne.n	80097b0 <_printf_i+0x24>
 80097ae:	e0ba      	b.n	8009926 <_printf_i+0x19a>
 80097b0:	497a      	ldr	r1, [pc, #488]	@ (800999c <_printf_i+0x210>)
 80097b2:	9104      	str	r1, [sp, #16]
 80097b4:	2a58      	cmp	r2, #88	@ 0x58
 80097b6:	d100      	bne.n	80097ba <_printf_i+0x2e>
 80097b8:	e08e      	b.n	80098d8 <_printf_i+0x14c>
 80097ba:	0025      	movs	r5, r4
 80097bc:	3542      	adds	r5, #66	@ 0x42
 80097be:	702a      	strb	r2, [r5, #0]
 80097c0:	e022      	b.n	8009808 <_printf_i+0x7c>
 80097c2:	0010      	movs	r0, r2
 80097c4:	3863      	subs	r0, #99	@ 0x63
 80097c6:	2815      	cmp	r0, #21
 80097c8:	d8f7      	bhi.n	80097ba <_printf_i+0x2e>
 80097ca:	f7f6 fca3 	bl	8000114 <__gnu_thumb1_case_shi>
 80097ce:	0016      	.short	0x0016
 80097d0:	fff6001f 	.word	0xfff6001f
 80097d4:	fff6fff6 	.word	0xfff6fff6
 80097d8:	001ffff6 	.word	0x001ffff6
 80097dc:	fff6fff6 	.word	0xfff6fff6
 80097e0:	fff6fff6 	.word	0xfff6fff6
 80097e4:	0036009f 	.word	0x0036009f
 80097e8:	fff6007e 	.word	0xfff6007e
 80097ec:	00b0fff6 	.word	0x00b0fff6
 80097f0:	0036fff6 	.word	0x0036fff6
 80097f4:	fff6fff6 	.word	0xfff6fff6
 80097f8:	0082      	.short	0x0082
 80097fa:	0025      	movs	r5, r4
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	3542      	adds	r5, #66	@ 0x42
 8009800:	1d11      	adds	r1, r2, #4
 8009802:	6019      	str	r1, [r3, #0]
 8009804:	6813      	ldr	r3, [r2, #0]
 8009806:	702b      	strb	r3, [r5, #0]
 8009808:	2301      	movs	r3, #1
 800980a:	e09e      	b.n	800994a <_printf_i+0x1be>
 800980c:	6818      	ldr	r0, [r3, #0]
 800980e:	6809      	ldr	r1, [r1, #0]
 8009810:	1d02      	adds	r2, r0, #4
 8009812:	060d      	lsls	r5, r1, #24
 8009814:	d50b      	bpl.n	800982e <_printf_i+0xa2>
 8009816:	6806      	ldr	r6, [r0, #0]
 8009818:	601a      	str	r2, [r3, #0]
 800981a:	2e00      	cmp	r6, #0
 800981c:	da03      	bge.n	8009826 <_printf_i+0x9a>
 800981e:	232d      	movs	r3, #45	@ 0x2d
 8009820:	9a03      	ldr	r2, [sp, #12]
 8009822:	4276      	negs	r6, r6
 8009824:	7013      	strb	r3, [r2, #0]
 8009826:	4b5d      	ldr	r3, [pc, #372]	@ (800999c <_printf_i+0x210>)
 8009828:	270a      	movs	r7, #10
 800982a:	9304      	str	r3, [sp, #16]
 800982c:	e018      	b.n	8009860 <_printf_i+0xd4>
 800982e:	6806      	ldr	r6, [r0, #0]
 8009830:	601a      	str	r2, [r3, #0]
 8009832:	0649      	lsls	r1, r1, #25
 8009834:	d5f1      	bpl.n	800981a <_printf_i+0x8e>
 8009836:	b236      	sxth	r6, r6
 8009838:	e7ef      	b.n	800981a <_printf_i+0x8e>
 800983a:	6808      	ldr	r0, [r1, #0]
 800983c:	6819      	ldr	r1, [r3, #0]
 800983e:	c940      	ldmia	r1!, {r6}
 8009840:	0605      	lsls	r5, r0, #24
 8009842:	d402      	bmi.n	800984a <_printf_i+0xbe>
 8009844:	0640      	lsls	r0, r0, #25
 8009846:	d500      	bpl.n	800984a <_printf_i+0xbe>
 8009848:	b2b6      	uxth	r6, r6
 800984a:	6019      	str	r1, [r3, #0]
 800984c:	4b53      	ldr	r3, [pc, #332]	@ (800999c <_printf_i+0x210>)
 800984e:	270a      	movs	r7, #10
 8009850:	9304      	str	r3, [sp, #16]
 8009852:	2a6f      	cmp	r2, #111	@ 0x6f
 8009854:	d100      	bne.n	8009858 <_printf_i+0xcc>
 8009856:	3f02      	subs	r7, #2
 8009858:	0023      	movs	r3, r4
 800985a:	2200      	movs	r2, #0
 800985c:	3343      	adds	r3, #67	@ 0x43
 800985e:	701a      	strb	r2, [r3, #0]
 8009860:	6863      	ldr	r3, [r4, #4]
 8009862:	60a3      	str	r3, [r4, #8]
 8009864:	2b00      	cmp	r3, #0
 8009866:	db06      	blt.n	8009876 <_printf_i+0xea>
 8009868:	2104      	movs	r1, #4
 800986a:	6822      	ldr	r2, [r4, #0]
 800986c:	9d03      	ldr	r5, [sp, #12]
 800986e:	438a      	bics	r2, r1
 8009870:	6022      	str	r2, [r4, #0]
 8009872:	4333      	orrs	r3, r6
 8009874:	d00c      	beq.n	8009890 <_printf_i+0x104>
 8009876:	9d03      	ldr	r5, [sp, #12]
 8009878:	0030      	movs	r0, r6
 800987a:	0039      	movs	r1, r7
 800987c:	f7f6 fcda 	bl	8000234 <__aeabi_uidivmod>
 8009880:	9b04      	ldr	r3, [sp, #16]
 8009882:	3d01      	subs	r5, #1
 8009884:	5c5b      	ldrb	r3, [r3, r1]
 8009886:	702b      	strb	r3, [r5, #0]
 8009888:	0033      	movs	r3, r6
 800988a:	0006      	movs	r6, r0
 800988c:	429f      	cmp	r7, r3
 800988e:	d9f3      	bls.n	8009878 <_printf_i+0xec>
 8009890:	2f08      	cmp	r7, #8
 8009892:	d109      	bne.n	80098a8 <_printf_i+0x11c>
 8009894:	6823      	ldr	r3, [r4, #0]
 8009896:	07db      	lsls	r3, r3, #31
 8009898:	d506      	bpl.n	80098a8 <_printf_i+0x11c>
 800989a:	6862      	ldr	r2, [r4, #4]
 800989c:	6923      	ldr	r3, [r4, #16]
 800989e:	429a      	cmp	r2, r3
 80098a0:	dc02      	bgt.n	80098a8 <_printf_i+0x11c>
 80098a2:	2330      	movs	r3, #48	@ 0x30
 80098a4:	3d01      	subs	r5, #1
 80098a6:	702b      	strb	r3, [r5, #0]
 80098a8:	9b03      	ldr	r3, [sp, #12]
 80098aa:	1b5b      	subs	r3, r3, r5
 80098ac:	6123      	str	r3, [r4, #16]
 80098ae:	9b07      	ldr	r3, [sp, #28]
 80098b0:	0021      	movs	r1, r4
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	9805      	ldr	r0, [sp, #20]
 80098b6:	9b06      	ldr	r3, [sp, #24]
 80098b8:	aa09      	add	r2, sp, #36	@ 0x24
 80098ba:	f7ff fef7 	bl	80096ac <_printf_common>
 80098be:	3001      	adds	r0, #1
 80098c0:	d148      	bne.n	8009954 <_printf_i+0x1c8>
 80098c2:	2001      	movs	r0, #1
 80098c4:	4240      	negs	r0, r0
 80098c6:	b00b      	add	sp, #44	@ 0x2c
 80098c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098ca:	2220      	movs	r2, #32
 80098cc:	6809      	ldr	r1, [r1, #0]
 80098ce:	430a      	orrs	r2, r1
 80098d0:	6022      	str	r2, [r4, #0]
 80098d2:	2278      	movs	r2, #120	@ 0x78
 80098d4:	4932      	ldr	r1, [pc, #200]	@ (80099a0 <_printf_i+0x214>)
 80098d6:	9104      	str	r1, [sp, #16]
 80098d8:	0021      	movs	r1, r4
 80098da:	3145      	adds	r1, #69	@ 0x45
 80098dc:	700a      	strb	r2, [r1, #0]
 80098de:	6819      	ldr	r1, [r3, #0]
 80098e0:	6822      	ldr	r2, [r4, #0]
 80098e2:	c940      	ldmia	r1!, {r6}
 80098e4:	0610      	lsls	r0, r2, #24
 80098e6:	d402      	bmi.n	80098ee <_printf_i+0x162>
 80098e8:	0650      	lsls	r0, r2, #25
 80098ea:	d500      	bpl.n	80098ee <_printf_i+0x162>
 80098ec:	b2b6      	uxth	r6, r6
 80098ee:	6019      	str	r1, [r3, #0]
 80098f0:	07d3      	lsls	r3, r2, #31
 80098f2:	d502      	bpl.n	80098fa <_printf_i+0x16e>
 80098f4:	2320      	movs	r3, #32
 80098f6:	4313      	orrs	r3, r2
 80098f8:	6023      	str	r3, [r4, #0]
 80098fa:	2e00      	cmp	r6, #0
 80098fc:	d001      	beq.n	8009902 <_printf_i+0x176>
 80098fe:	2710      	movs	r7, #16
 8009900:	e7aa      	b.n	8009858 <_printf_i+0xcc>
 8009902:	2220      	movs	r2, #32
 8009904:	6823      	ldr	r3, [r4, #0]
 8009906:	4393      	bics	r3, r2
 8009908:	6023      	str	r3, [r4, #0]
 800990a:	e7f8      	b.n	80098fe <_printf_i+0x172>
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	680d      	ldr	r5, [r1, #0]
 8009910:	1d10      	adds	r0, r2, #4
 8009912:	6949      	ldr	r1, [r1, #20]
 8009914:	6018      	str	r0, [r3, #0]
 8009916:	6813      	ldr	r3, [r2, #0]
 8009918:	062e      	lsls	r6, r5, #24
 800991a:	d501      	bpl.n	8009920 <_printf_i+0x194>
 800991c:	6019      	str	r1, [r3, #0]
 800991e:	e002      	b.n	8009926 <_printf_i+0x19a>
 8009920:	066d      	lsls	r5, r5, #25
 8009922:	d5fb      	bpl.n	800991c <_printf_i+0x190>
 8009924:	8019      	strh	r1, [r3, #0]
 8009926:	2300      	movs	r3, #0
 8009928:	9d03      	ldr	r5, [sp, #12]
 800992a:	6123      	str	r3, [r4, #16]
 800992c:	e7bf      	b.n	80098ae <_printf_i+0x122>
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	1d11      	adds	r1, r2, #4
 8009932:	6019      	str	r1, [r3, #0]
 8009934:	6815      	ldr	r5, [r2, #0]
 8009936:	2100      	movs	r1, #0
 8009938:	0028      	movs	r0, r5
 800993a:	6862      	ldr	r2, [r4, #4]
 800993c:	f000 f856 	bl	80099ec <memchr>
 8009940:	2800      	cmp	r0, #0
 8009942:	d001      	beq.n	8009948 <_printf_i+0x1bc>
 8009944:	1b40      	subs	r0, r0, r5
 8009946:	6060      	str	r0, [r4, #4]
 8009948:	6863      	ldr	r3, [r4, #4]
 800994a:	6123      	str	r3, [r4, #16]
 800994c:	2300      	movs	r3, #0
 800994e:	9a03      	ldr	r2, [sp, #12]
 8009950:	7013      	strb	r3, [r2, #0]
 8009952:	e7ac      	b.n	80098ae <_printf_i+0x122>
 8009954:	002a      	movs	r2, r5
 8009956:	6923      	ldr	r3, [r4, #16]
 8009958:	9906      	ldr	r1, [sp, #24]
 800995a:	9805      	ldr	r0, [sp, #20]
 800995c:	9d07      	ldr	r5, [sp, #28]
 800995e:	47a8      	blx	r5
 8009960:	3001      	adds	r0, #1
 8009962:	d0ae      	beq.n	80098c2 <_printf_i+0x136>
 8009964:	6823      	ldr	r3, [r4, #0]
 8009966:	079b      	lsls	r3, r3, #30
 8009968:	d415      	bmi.n	8009996 <_printf_i+0x20a>
 800996a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800996c:	68e0      	ldr	r0, [r4, #12]
 800996e:	4298      	cmp	r0, r3
 8009970:	daa9      	bge.n	80098c6 <_printf_i+0x13a>
 8009972:	0018      	movs	r0, r3
 8009974:	e7a7      	b.n	80098c6 <_printf_i+0x13a>
 8009976:	0022      	movs	r2, r4
 8009978:	2301      	movs	r3, #1
 800997a:	9906      	ldr	r1, [sp, #24]
 800997c:	9805      	ldr	r0, [sp, #20]
 800997e:	9e07      	ldr	r6, [sp, #28]
 8009980:	3219      	adds	r2, #25
 8009982:	47b0      	blx	r6
 8009984:	3001      	adds	r0, #1
 8009986:	d09c      	beq.n	80098c2 <_printf_i+0x136>
 8009988:	3501      	adds	r5, #1
 800998a:	68e3      	ldr	r3, [r4, #12]
 800998c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800998e:	1a9b      	subs	r3, r3, r2
 8009990:	42ab      	cmp	r3, r5
 8009992:	dcf0      	bgt.n	8009976 <_printf_i+0x1ea>
 8009994:	e7e9      	b.n	800996a <_printf_i+0x1de>
 8009996:	2500      	movs	r5, #0
 8009998:	e7f7      	b.n	800998a <_printf_i+0x1fe>
 800999a:	46c0      	nop			@ (mov r8, r8)
 800999c:	0800a551 	.word	0x0800a551
 80099a0:	0800a562 	.word	0x0800a562

080099a4 <memmove>:
 80099a4:	b510      	push	{r4, lr}
 80099a6:	4288      	cmp	r0, r1
 80099a8:	d902      	bls.n	80099b0 <memmove+0xc>
 80099aa:	188b      	adds	r3, r1, r2
 80099ac:	4298      	cmp	r0, r3
 80099ae:	d308      	bcc.n	80099c2 <memmove+0x1e>
 80099b0:	2300      	movs	r3, #0
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d007      	beq.n	80099c6 <memmove+0x22>
 80099b6:	5ccc      	ldrb	r4, [r1, r3]
 80099b8:	54c4      	strb	r4, [r0, r3]
 80099ba:	3301      	adds	r3, #1
 80099bc:	e7f9      	b.n	80099b2 <memmove+0xe>
 80099be:	5c8b      	ldrb	r3, [r1, r2]
 80099c0:	5483      	strb	r3, [r0, r2]
 80099c2:	3a01      	subs	r2, #1
 80099c4:	d2fb      	bcs.n	80099be <memmove+0x1a>
 80099c6:	bd10      	pop	{r4, pc}

080099c8 <_sbrk_r>:
 80099c8:	2300      	movs	r3, #0
 80099ca:	b570      	push	{r4, r5, r6, lr}
 80099cc:	4d06      	ldr	r5, [pc, #24]	@ (80099e8 <_sbrk_r+0x20>)
 80099ce:	0004      	movs	r4, r0
 80099d0:	0008      	movs	r0, r1
 80099d2:	602b      	str	r3, [r5, #0]
 80099d4:	f7fa fd26 	bl	8004424 <_sbrk>
 80099d8:	1c43      	adds	r3, r0, #1
 80099da:	d103      	bne.n	80099e4 <_sbrk_r+0x1c>
 80099dc:	682b      	ldr	r3, [r5, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d000      	beq.n	80099e4 <_sbrk_r+0x1c>
 80099e2:	6023      	str	r3, [r4, #0]
 80099e4:	bd70      	pop	{r4, r5, r6, pc}
 80099e6:	46c0      	nop			@ (mov r8, r8)
 80099e8:	2000120c 	.word	0x2000120c

080099ec <memchr>:
 80099ec:	b2c9      	uxtb	r1, r1
 80099ee:	1882      	adds	r2, r0, r2
 80099f0:	4290      	cmp	r0, r2
 80099f2:	d101      	bne.n	80099f8 <memchr+0xc>
 80099f4:	2000      	movs	r0, #0
 80099f6:	4770      	bx	lr
 80099f8:	7803      	ldrb	r3, [r0, #0]
 80099fa:	428b      	cmp	r3, r1
 80099fc:	d0fb      	beq.n	80099f6 <memchr+0xa>
 80099fe:	3001      	adds	r0, #1
 8009a00:	e7f6      	b.n	80099f0 <memchr+0x4>

08009a02 <_realloc_r>:
 8009a02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a04:	0006      	movs	r6, r0
 8009a06:	000c      	movs	r4, r1
 8009a08:	0015      	movs	r5, r2
 8009a0a:	2900      	cmp	r1, #0
 8009a0c:	d105      	bne.n	8009a1a <_realloc_r+0x18>
 8009a0e:	0011      	movs	r1, r2
 8009a10:	f7ff fc5e 	bl	80092d0 <_malloc_r>
 8009a14:	0004      	movs	r4, r0
 8009a16:	0020      	movs	r0, r4
 8009a18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009a1a:	2a00      	cmp	r2, #0
 8009a1c:	d103      	bne.n	8009a26 <_realloc_r+0x24>
 8009a1e:	f7ff fbeb 	bl	80091f8 <_free_r>
 8009a22:	002c      	movs	r4, r5
 8009a24:	e7f7      	b.n	8009a16 <_realloc_r+0x14>
 8009a26:	f000 f81c 	bl	8009a62 <_malloc_usable_size_r>
 8009a2a:	0007      	movs	r7, r0
 8009a2c:	4285      	cmp	r5, r0
 8009a2e:	d802      	bhi.n	8009a36 <_realloc_r+0x34>
 8009a30:	0843      	lsrs	r3, r0, #1
 8009a32:	42ab      	cmp	r3, r5
 8009a34:	d3ef      	bcc.n	8009a16 <_realloc_r+0x14>
 8009a36:	0029      	movs	r1, r5
 8009a38:	0030      	movs	r0, r6
 8009a3a:	f7ff fc49 	bl	80092d0 <_malloc_r>
 8009a3e:	9001      	str	r0, [sp, #4]
 8009a40:	2800      	cmp	r0, #0
 8009a42:	d101      	bne.n	8009a48 <_realloc_r+0x46>
 8009a44:	9c01      	ldr	r4, [sp, #4]
 8009a46:	e7e6      	b.n	8009a16 <_realloc_r+0x14>
 8009a48:	002a      	movs	r2, r5
 8009a4a:	42bd      	cmp	r5, r7
 8009a4c:	d900      	bls.n	8009a50 <_realloc_r+0x4e>
 8009a4e:	003a      	movs	r2, r7
 8009a50:	0021      	movs	r1, r4
 8009a52:	9801      	ldr	r0, [sp, #4]
 8009a54:	f7ff fbc6 	bl	80091e4 <memcpy>
 8009a58:	0021      	movs	r1, r4
 8009a5a:	0030      	movs	r0, r6
 8009a5c:	f7ff fbcc 	bl	80091f8 <_free_r>
 8009a60:	e7f0      	b.n	8009a44 <_realloc_r+0x42>

08009a62 <_malloc_usable_size_r>:
 8009a62:	1f0b      	subs	r3, r1, #4
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	1f18      	subs	r0, r3, #4
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	da01      	bge.n	8009a70 <_malloc_usable_size_r+0xe>
 8009a6c:	580b      	ldr	r3, [r1, r0]
 8009a6e:	18c0      	adds	r0, r0, r3
 8009a70:	4770      	bx	lr

08009a72 <fmod>:
 8009a72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a74:	0014      	movs	r4, r2
 8009a76:	001d      	movs	r5, r3
 8009a78:	9000      	str	r0, [sp, #0]
 8009a7a:	9101      	str	r1, [sp, #4]
 8009a7c:	f000 f822 	bl	8009ac4 <__ieee754_fmod>
 8009a80:	0022      	movs	r2, r4
 8009a82:	0006      	movs	r6, r0
 8009a84:	000f      	movs	r7, r1
 8009a86:	9800      	ldr	r0, [sp, #0]
 8009a88:	9901      	ldr	r1, [sp, #4]
 8009a8a:	002b      	movs	r3, r5
 8009a8c:	f7f8 f8be 	bl	8001c0c <__aeabi_dcmpun>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	d113      	bne.n	8009abc <fmod+0x4a>
 8009a94:	2200      	movs	r2, #0
 8009a96:	2300      	movs	r3, #0
 8009a98:	0020      	movs	r0, r4
 8009a9a:	0029      	movs	r1, r5
 8009a9c:	f7f6 fcca 	bl	8000434 <__aeabi_dcmpeq>
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	d00b      	beq.n	8009abc <fmod+0x4a>
 8009aa4:	f7ff fb72 	bl	800918c <__errno>
 8009aa8:	2321      	movs	r3, #33	@ 0x21
 8009aaa:	2200      	movs	r2, #0
 8009aac:	6003      	str	r3, [r0, #0]
 8009aae:	2300      	movs	r3, #0
 8009ab0:	0010      	movs	r0, r2
 8009ab2:	0019      	movs	r1, r3
 8009ab4:	f7f7 f98a 	bl	8000dcc <__aeabi_ddiv>
 8009ab8:	0006      	movs	r6, r0
 8009aba:	000f      	movs	r7, r1
 8009abc:	0030      	movs	r0, r6
 8009abe:	0039      	movs	r1, r7
 8009ac0:	b003      	add	sp, #12
 8009ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009ac4 <__ieee754_fmod>:
 8009ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ac6:	b087      	sub	sp, #28
 8009ac8:	9200      	str	r2, [sp, #0]
 8009aca:	9301      	str	r3, [sp, #4]
 8009acc:	9b01      	ldr	r3, [sp, #4]
 8009ace:	9e00      	ldr	r6, [sp, #0]
 8009ad0:	005c      	lsls	r4, r3, #1
 8009ad2:	0863      	lsrs	r3, r4, #1
 8009ad4:	001c      	movs	r4, r3
 8009ad6:	469c      	mov	ip, r3
 8009ad8:	9604      	str	r6, [sp, #16]
 8009ada:	4334      	orrs	r4, r6
 8009adc:	d00d      	beq.n	8009afa <__ieee754_fmod+0x36>
 8009ade:	4d7b      	ldr	r5, [pc, #492]	@ (8009ccc <__ieee754_fmod+0x208>)
 8009ae0:	004c      	lsls	r4, r1, #1
 8009ae2:	9105      	str	r1, [sp, #20]
 8009ae4:	0864      	lsrs	r4, r4, #1
 8009ae6:	42ac      	cmp	r4, r5
 8009ae8:	d807      	bhi.n	8009afa <__ieee754_fmod+0x36>
 8009aea:	4663      	mov	r3, ip
 8009aec:	4275      	negs	r5, r6
 8009aee:	4335      	orrs	r5, r6
 8009af0:	0fed      	lsrs	r5, r5, #31
 8009af2:	431d      	orrs	r5, r3
 8009af4:	4b76      	ldr	r3, [pc, #472]	@ (8009cd0 <__ieee754_fmod+0x20c>)
 8009af6:	429d      	cmp	r5, r3
 8009af8:	d909      	bls.n	8009b0e <__ieee754_fmod+0x4a>
 8009afa:	9a00      	ldr	r2, [sp, #0]
 8009afc:	9b01      	ldr	r3, [sp, #4]
 8009afe:	f7f7 fd9f 	bl	8001640 <__aeabi_dmul>
 8009b02:	0002      	movs	r2, r0
 8009b04:	000b      	movs	r3, r1
 8009b06:	f7f7 f961 	bl	8000dcc <__aeabi_ddiv>
 8009b0a:	b007      	add	sp, #28
 8009b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b0e:	9b05      	ldr	r3, [sp, #20]
 8009b10:	0007      	movs	r7, r0
 8009b12:	0fdb      	lsrs	r3, r3, #31
 8009b14:	07db      	lsls	r3, r3, #31
 8009b16:	0005      	movs	r5, r0
 8009b18:	9303      	str	r3, [sp, #12]
 8009b1a:	4564      	cmp	r4, ip
 8009b1c:	dc0a      	bgt.n	8009b34 <__ieee754_fmod+0x70>
 8009b1e:	dbf4      	blt.n	8009b0a <__ieee754_fmod+0x46>
 8009b20:	4286      	cmp	r6, r0
 8009b22:	d8f2      	bhi.n	8009b0a <__ieee754_fmod+0x46>
 8009b24:	d106      	bne.n	8009b34 <__ieee754_fmod+0x70>
 8009b26:	9a03      	ldr	r2, [sp, #12]
 8009b28:	4b6a      	ldr	r3, [pc, #424]	@ (8009cd4 <__ieee754_fmod+0x210>)
 8009b2a:	0f12      	lsrs	r2, r2, #28
 8009b2c:	189b      	adds	r3, r3, r2
 8009b2e:	6818      	ldr	r0, [r3, #0]
 8009b30:	6859      	ldr	r1, [r3, #4]
 8009b32:	e7ea      	b.n	8009b0a <__ieee754_fmod+0x46>
 8009b34:	9b05      	ldr	r3, [sp, #20]
 8009b36:	4a66      	ldr	r2, [pc, #408]	@ (8009cd0 <__ieee754_fmod+0x20c>)
 8009b38:	4213      	tst	r3, r2
 8009b3a:	d14e      	bne.n	8009bda <__ieee754_fmod+0x116>
 8009b3c:	2c00      	cmp	r4, #0
 8009b3e:	d145      	bne.n	8009bcc <__ieee754_fmod+0x108>
 8009b40:	0039      	movs	r1, r7
 8009b42:	4865      	ldr	r0, [pc, #404]	@ (8009cd8 <__ieee754_fmod+0x214>)
 8009b44:	2900      	cmp	r1, #0
 8009b46:	dc3e      	bgt.n	8009bc6 <__ieee754_fmod+0x102>
 8009b48:	4b61      	ldr	r3, [pc, #388]	@ (8009cd0 <__ieee754_fmod+0x20c>)
 8009b4a:	9a01      	ldr	r2, [sp, #4]
 8009b4c:	4213      	tst	r3, r2
 8009b4e:	d152      	bne.n	8009bf6 <__ieee754_fmod+0x132>
 8009b50:	4663      	mov	r3, ip
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d148      	bne.n	8009be8 <__ieee754_fmod+0x124>
 8009b56:	4960      	ldr	r1, [pc, #384]	@ (8009cd8 <__ieee754_fmod+0x214>)
 8009b58:	2e00      	cmp	r6, #0
 8009b5a:	dc42      	bgt.n	8009be2 <__ieee754_fmod+0x11e>
 8009b5c:	4e5f      	ldr	r6, [pc, #380]	@ (8009cdc <__ieee754_fmod+0x218>)
 8009b5e:	42b0      	cmp	r0, r6
 8009b60:	db4e      	blt.n	8009c00 <__ieee754_fmod+0x13c>
 8009b62:	2480      	movs	r4, #128	@ 0x80
 8009b64:	9b05      	ldr	r3, [sp, #20]
 8009b66:	0364      	lsls	r4, r4, #13
 8009b68:	031f      	lsls	r7, r3, #12
 8009b6a:	0b3f      	lsrs	r7, r7, #12
 8009b6c:	433c      	orrs	r4, r7
 8009b6e:	42b1      	cmp	r1, r6
 8009b70:	db5a      	blt.n	8009c28 <__ieee754_fmod+0x164>
 8009b72:	2280      	movs	r2, #128	@ 0x80
 8009b74:	9b01      	ldr	r3, [sp, #4]
 8009b76:	0352      	lsls	r2, r2, #13
 8009b78:	031b      	lsls	r3, r3, #12
 8009b7a:	0b1b      	lsrs	r3, r3, #12
 8009b7c:	431a      	orrs	r2, r3
 8009b7e:	4694      	mov	ip, r2
 8009b80:	1a40      	subs	r0, r0, r1
 8009b82:	4663      	mov	r3, ip
 8009b84:	9a04      	ldr	r2, [sp, #16]
 8009b86:	1ae3      	subs	r3, r4, r3
 8009b88:	1aaa      	subs	r2, r5, r2
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	d166      	bne.n	8009c5c <__ieee754_fmod+0x198>
 8009b8e:	9804      	ldr	r0, [sp, #16]
 8009b90:	4285      	cmp	r5, r0
 8009b92:	4180      	sbcs	r0, r0
 8009b94:	4240      	negs	r0, r0
 8009b96:	1a1b      	subs	r3, r3, r0
 8009b98:	d501      	bpl.n	8009b9e <__ieee754_fmod+0xda>
 8009b9a:	002a      	movs	r2, r5
 8009b9c:	0023      	movs	r3, r4
 8009b9e:	0018      	movs	r0, r3
 8009ba0:	4310      	orrs	r0, r2
 8009ba2:	d0c0      	beq.n	8009b26 <__ieee754_fmod+0x62>
 8009ba4:	2080      	movs	r0, #128	@ 0x80
 8009ba6:	0340      	lsls	r0, r0, #13
 8009ba8:	4283      	cmp	r3, r0
 8009baa:	db6c      	blt.n	8009c86 <__ieee754_fmod+0x1c2>
 8009bac:	42b1      	cmp	r1, r6
 8009bae:	db70      	blt.n	8009c92 <__ieee754_fmod+0x1ce>
 8009bb0:	484b      	ldr	r0, [pc, #300]	@ (8009ce0 <__ieee754_fmod+0x21c>)
 8009bb2:	181b      	adds	r3, r3, r0
 8009bb4:	9803      	ldr	r0, [sp, #12]
 8009bb6:	4303      	orrs	r3, r0
 8009bb8:	484a      	ldr	r0, [pc, #296]	@ (8009ce4 <__ieee754_fmod+0x220>)
 8009bba:	1809      	adds	r1, r1, r0
 8009bbc:	050c      	lsls	r4, r1, #20
 8009bbe:	4323      	orrs	r3, r4
 8009bc0:	0019      	movs	r1, r3
 8009bc2:	0010      	movs	r0, r2
 8009bc4:	e7a1      	b.n	8009b0a <__ieee754_fmod+0x46>
 8009bc6:	3801      	subs	r0, #1
 8009bc8:	0049      	lsls	r1, r1, #1
 8009bca:	e7bb      	b.n	8009b44 <__ieee754_fmod+0x80>
 8009bcc:	4843      	ldr	r0, [pc, #268]	@ (8009cdc <__ieee754_fmod+0x218>)
 8009bce:	02e1      	lsls	r1, r4, #11
 8009bd0:	2900      	cmp	r1, #0
 8009bd2:	ddb9      	ble.n	8009b48 <__ieee754_fmod+0x84>
 8009bd4:	3801      	subs	r0, #1
 8009bd6:	0049      	lsls	r1, r1, #1
 8009bd8:	e7fa      	b.n	8009bd0 <__ieee754_fmod+0x10c>
 8009bda:	4b43      	ldr	r3, [pc, #268]	@ (8009ce8 <__ieee754_fmod+0x224>)
 8009bdc:	1520      	asrs	r0, r4, #20
 8009bde:	18c0      	adds	r0, r0, r3
 8009be0:	e7b2      	b.n	8009b48 <__ieee754_fmod+0x84>
 8009be2:	3901      	subs	r1, #1
 8009be4:	0076      	lsls	r6, r6, #1
 8009be6:	e7b7      	b.n	8009b58 <__ieee754_fmod+0x94>
 8009be8:	493c      	ldr	r1, [pc, #240]	@ (8009cdc <__ieee754_fmod+0x218>)
 8009bea:	02de      	lsls	r6, r3, #11
 8009bec:	2e00      	cmp	r6, #0
 8009bee:	ddb5      	ble.n	8009b5c <__ieee754_fmod+0x98>
 8009bf0:	3901      	subs	r1, #1
 8009bf2:	0076      	lsls	r6, r6, #1
 8009bf4:	e7fa      	b.n	8009bec <__ieee754_fmod+0x128>
 8009bf6:	4663      	mov	r3, ip
 8009bf8:	1519      	asrs	r1, r3, #20
 8009bfa:	4b3b      	ldr	r3, [pc, #236]	@ (8009ce8 <__ieee754_fmod+0x224>)
 8009bfc:	18c9      	adds	r1, r1, r3
 8009bfe:	e7ad      	b.n	8009b5c <__ieee754_fmod+0x98>
 8009c00:	1a35      	subs	r5, r6, r0
 8009c02:	2d1f      	cmp	r5, #31
 8009c04:	dc0a      	bgt.n	8009c1c <__ieee754_fmod+0x158>
 8009c06:	40ac      	lsls	r4, r5
 8009c08:	4b38      	ldr	r3, [pc, #224]	@ (8009cec <__ieee754_fmod+0x228>)
 8009c0a:	0022      	movs	r2, r4
 8009c0c:	18c4      	adds	r4, r0, r3
 8009c0e:	003b      	movs	r3, r7
 8009c10:	40e3      	lsrs	r3, r4
 8009c12:	40af      	lsls	r7, r5
 8009c14:	001c      	movs	r4, r3
 8009c16:	003d      	movs	r5, r7
 8009c18:	4314      	orrs	r4, r2
 8009c1a:	e7a8      	b.n	8009b6e <__ieee754_fmod+0xaa>
 8009c1c:	4c34      	ldr	r4, [pc, #208]	@ (8009cf0 <__ieee754_fmod+0x22c>)
 8009c1e:	2500      	movs	r5, #0
 8009c20:	1a24      	subs	r4, r4, r0
 8009c22:	40a7      	lsls	r7, r4
 8009c24:	003c      	movs	r4, r7
 8009c26:	e7a2      	b.n	8009b6e <__ieee754_fmod+0xaa>
 8009c28:	1a77      	subs	r7, r6, r1
 8009c2a:	2f1f      	cmp	r7, #31
 8009c2c:	dc0f      	bgt.n	8009c4e <__ieee754_fmod+0x18a>
 8009c2e:	4663      	mov	r3, ip
 8009c30:	4a2e      	ldr	r2, [pc, #184]	@ (8009cec <__ieee754_fmod+0x228>)
 8009c32:	40bb      	lsls	r3, r7
 8009c34:	4694      	mov	ip, r2
 8009c36:	448c      	add	ip, r1
 8009c38:	9304      	str	r3, [sp, #16]
 8009c3a:	4663      	mov	r3, ip
 8009c3c:	9a00      	ldr	r2, [sp, #0]
 8009c3e:	40da      	lsrs	r2, r3
 8009c40:	9b04      	ldr	r3, [sp, #16]
 8009c42:	431a      	orrs	r2, r3
 8009c44:	9b00      	ldr	r3, [sp, #0]
 8009c46:	4694      	mov	ip, r2
 8009c48:	40bb      	lsls	r3, r7
 8009c4a:	9304      	str	r3, [sp, #16]
 8009c4c:	e798      	b.n	8009b80 <__ieee754_fmod+0xbc>
 8009c4e:	4b28      	ldr	r3, [pc, #160]	@ (8009cf0 <__ieee754_fmod+0x22c>)
 8009c50:	9a00      	ldr	r2, [sp, #0]
 8009c52:	1a5b      	subs	r3, r3, r1
 8009c54:	409a      	lsls	r2, r3
 8009c56:	2300      	movs	r3, #0
 8009c58:	4694      	mov	ip, r2
 8009c5a:	e7f6      	b.n	8009c4a <__ieee754_fmod+0x186>
 8009c5c:	9f04      	ldr	r7, [sp, #16]
 8009c5e:	42bd      	cmp	r5, r7
 8009c60:	41bf      	sbcs	r7, r7
 8009c62:	427f      	negs	r7, r7
 8009c64:	1bdb      	subs	r3, r3, r7
 8009c66:	d505      	bpl.n	8009c74 <__ieee754_fmod+0x1b0>
 8009c68:	0feb      	lsrs	r3, r5, #31
 8009c6a:	0064      	lsls	r4, r4, #1
 8009c6c:	18e4      	adds	r4, r4, r3
 8009c6e:	006d      	lsls	r5, r5, #1
 8009c70:	3801      	subs	r0, #1
 8009c72:	e786      	b.n	8009b82 <__ieee754_fmod+0xbe>
 8009c74:	001c      	movs	r4, r3
 8009c76:	4314      	orrs	r4, r2
 8009c78:	d100      	bne.n	8009c7c <__ieee754_fmod+0x1b8>
 8009c7a:	e754      	b.n	8009b26 <__ieee754_fmod+0x62>
 8009c7c:	005b      	lsls	r3, r3, #1
 8009c7e:	0fd4      	lsrs	r4, r2, #31
 8009c80:	191c      	adds	r4, r3, r4
 8009c82:	0055      	lsls	r5, r2, #1
 8009c84:	e7f4      	b.n	8009c70 <__ieee754_fmod+0x1ac>
 8009c86:	0fd4      	lsrs	r4, r2, #31
 8009c88:	005b      	lsls	r3, r3, #1
 8009c8a:	191b      	adds	r3, r3, r4
 8009c8c:	0052      	lsls	r2, r2, #1
 8009c8e:	3901      	subs	r1, #1
 8009c90:	e78a      	b.n	8009ba8 <__ieee754_fmod+0xe4>
 8009c92:	1a76      	subs	r6, r6, r1
 8009c94:	2e14      	cmp	r6, #20
 8009c96:	dc0b      	bgt.n	8009cb0 <__ieee754_fmod+0x1ec>
 8009c98:	40f2      	lsrs	r2, r6
 8009c9a:	0010      	movs	r0, r2
 8009c9c:	4a13      	ldr	r2, [pc, #76]	@ (8009cec <__ieee754_fmod+0x228>)
 8009c9e:	1889      	adds	r1, r1, r2
 8009ca0:	001a      	movs	r2, r3
 8009ca2:	408a      	lsls	r2, r1
 8009ca4:	4133      	asrs	r3, r6
 8009ca6:	4302      	orrs	r2, r0
 8009ca8:	9c03      	ldr	r4, [sp, #12]
 8009caa:	431c      	orrs	r4, r3
 8009cac:	0021      	movs	r1, r4
 8009cae:	e788      	b.n	8009bc2 <__ieee754_fmod+0xfe>
 8009cb0:	2e1f      	cmp	r6, #31
 8009cb2:	dc06      	bgt.n	8009cc2 <__ieee754_fmod+0x1fe>
 8009cb4:	480d      	ldr	r0, [pc, #52]	@ (8009cec <__ieee754_fmod+0x228>)
 8009cb6:	40f2      	lsrs	r2, r6
 8009cb8:	1809      	adds	r1, r1, r0
 8009cba:	408b      	lsls	r3, r1
 8009cbc:	431a      	orrs	r2, r3
 8009cbe:	9b03      	ldr	r3, [sp, #12]
 8009cc0:	e7f2      	b.n	8009ca8 <__ieee754_fmod+0x1e4>
 8009cc2:	4a0b      	ldr	r2, [pc, #44]	@ (8009cf0 <__ieee754_fmod+0x22c>)
 8009cc4:	1a52      	subs	r2, r2, r1
 8009cc6:	4113      	asrs	r3, r2
 8009cc8:	001a      	movs	r2, r3
 8009cca:	e7f8      	b.n	8009cbe <__ieee754_fmod+0x1fa>
 8009ccc:	7fefffff 	.word	0x7fefffff
 8009cd0:	7ff00000 	.word	0x7ff00000
 8009cd4:	0800a578 	.word	0x0800a578
 8009cd8:	fffffbed 	.word	0xfffffbed
 8009cdc:	fffffc02 	.word	0xfffffc02
 8009ce0:	fff00000 	.word	0xfff00000
 8009ce4:	000003ff 	.word	0x000003ff
 8009ce8:	fffffc01 	.word	0xfffffc01
 8009cec:	0000041e 	.word	0x0000041e
 8009cf0:	fffffbe2 	.word	0xfffffbe2

08009cf4 <_init>:
 8009cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf6:	46c0      	nop			@ (mov r8, r8)
 8009cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cfa:	bc08      	pop	{r3}
 8009cfc:	469e      	mov	lr, r3
 8009cfe:	4770      	bx	lr

08009d00 <_fini>:
 8009d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d02:	46c0      	nop			@ (mov r8, r8)
 8009d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d06:	bc08      	pop	{r3}
 8009d08:	469e      	mov	lr, r3
 8009d0a:	4770      	bx	lr
