
ynotag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e38  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000970  08008ef4  08008ef4  00009ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009864  08009864  0000b54c  2**0
                  CONTENTS
  4 .ARM          00000008  08009864  08009864  0000a864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800986c  0800986c  0000b54c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800986c  0800986c  0000a86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009870  08009870  0000a870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000054c  20000000  08009874  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000488  20000550  08009dc0  0000b550  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200009d8  08009dc0  0000b9d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b54c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac4f  00000000  00000000  0000b574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000345a  00000000  00000000  000261c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001820  00000000  00000000  00029620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013b0  00000000  00000000  0002ae40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fa9a  00000000  00000000  0002c1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e687  00000000  00000000  0004bc8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caaf2  00000000  00000000  0006a311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134e03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006138  00000000  00000000  00134e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0013af80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000550 	.word	0x20000550
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008edc 	.word	0x08008edc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000554 	.word	0x20000554
 8000100:	08008edc 	.word	0x08008edc

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	@ (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	@ (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f81e 	bl	8000488 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_f2uiz>:
 8000458:	219e      	movs	r1, #158	@ 0x9e
 800045a:	b510      	push	{r4, lr}
 800045c:	05c9      	lsls	r1, r1, #23
 800045e:	1c04      	adds	r4, r0, #0
 8000460:	f000 ff8a 	bl	8001378 <__aeabi_fcmpge>
 8000464:	2800      	cmp	r0, #0
 8000466:	d103      	bne.n	8000470 <__aeabi_f2uiz+0x18>
 8000468:	1c20      	adds	r0, r4, #0
 800046a:	f000 fe65 	bl	8001138 <__aeabi_f2iz>
 800046e:	bd10      	pop	{r4, pc}
 8000470:	219e      	movs	r1, #158	@ 0x9e
 8000472:	1c20      	adds	r0, r4, #0
 8000474:	05c9      	lsls	r1, r1, #23
 8000476:	f000 fcbb 	bl	8000df0 <__aeabi_fsub>
 800047a:	f000 fe5d 	bl	8001138 <__aeabi_f2iz>
 800047e:	2380      	movs	r3, #128	@ 0x80
 8000480:	061b      	lsls	r3, r3, #24
 8000482:	469c      	mov	ip, r3
 8000484:	4460      	add	r0, ip
 8000486:	e7f2      	b.n	800046e <__aeabi_f2uiz+0x16>

08000488 <__udivmoddi4>:
 8000488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800048a:	4657      	mov	r7, sl
 800048c:	464e      	mov	r6, r9
 800048e:	4645      	mov	r5, r8
 8000490:	46de      	mov	lr, fp
 8000492:	b5e0      	push	{r5, r6, r7, lr}
 8000494:	0004      	movs	r4, r0
 8000496:	000d      	movs	r5, r1
 8000498:	4692      	mov	sl, r2
 800049a:	4699      	mov	r9, r3
 800049c:	b083      	sub	sp, #12
 800049e:	428b      	cmp	r3, r1
 80004a0:	d830      	bhi.n	8000504 <__udivmoddi4+0x7c>
 80004a2:	d02d      	beq.n	8000500 <__udivmoddi4+0x78>
 80004a4:	4649      	mov	r1, r9
 80004a6:	4650      	mov	r0, sl
 80004a8:	f000 ff8e 	bl	80013c8 <__clzdi2>
 80004ac:	0029      	movs	r1, r5
 80004ae:	0006      	movs	r6, r0
 80004b0:	0020      	movs	r0, r4
 80004b2:	f000 ff89 	bl	80013c8 <__clzdi2>
 80004b6:	1a33      	subs	r3, r6, r0
 80004b8:	4698      	mov	r8, r3
 80004ba:	3b20      	subs	r3, #32
 80004bc:	d434      	bmi.n	8000528 <__udivmoddi4+0xa0>
 80004be:	469b      	mov	fp, r3
 80004c0:	4653      	mov	r3, sl
 80004c2:	465a      	mov	r2, fp
 80004c4:	4093      	lsls	r3, r2
 80004c6:	4642      	mov	r2, r8
 80004c8:	001f      	movs	r7, r3
 80004ca:	4653      	mov	r3, sl
 80004cc:	4093      	lsls	r3, r2
 80004ce:	001e      	movs	r6, r3
 80004d0:	42af      	cmp	r7, r5
 80004d2:	d83b      	bhi.n	800054c <__udivmoddi4+0xc4>
 80004d4:	42af      	cmp	r7, r5
 80004d6:	d100      	bne.n	80004da <__udivmoddi4+0x52>
 80004d8:	e079      	b.n	80005ce <__udivmoddi4+0x146>
 80004da:	465b      	mov	r3, fp
 80004dc:	1ba4      	subs	r4, r4, r6
 80004de:	41bd      	sbcs	r5, r7
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	da00      	bge.n	80004e6 <__udivmoddi4+0x5e>
 80004e4:	e076      	b.n	80005d4 <__udivmoddi4+0x14c>
 80004e6:	2200      	movs	r2, #0
 80004e8:	2300      	movs	r3, #0
 80004ea:	9200      	str	r2, [sp, #0]
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	2301      	movs	r3, #1
 80004f0:	465a      	mov	r2, fp
 80004f2:	4093      	lsls	r3, r2
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2301      	movs	r3, #1
 80004f8:	4642      	mov	r2, r8
 80004fa:	4093      	lsls	r3, r2
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	e029      	b.n	8000554 <__udivmoddi4+0xcc>
 8000500:	4282      	cmp	r2, r0
 8000502:	d9cf      	bls.n	80004a4 <__udivmoddi4+0x1c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <__udivmoddi4+0x8e>
 8000512:	601c      	str	r4, [r3, #0]
 8000514:	605d      	str	r5, [r3, #4]
 8000516:	9800      	ldr	r0, [sp, #0]
 8000518:	9901      	ldr	r1, [sp, #4]
 800051a:	b003      	add	sp, #12
 800051c:	bcf0      	pop	{r4, r5, r6, r7}
 800051e:	46bb      	mov	fp, r7
 8000520:	46b2      	mov	sl, r6
 8000522:	46a9      	mov	r9, r5
 8000524:	46a0      	mov	r8, r4
 8000526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000528:	4642      	mov	r2, r8
 800052a:	469b      	mov	fp, r3
 800052c:	2320      	movs	r3, #32
 800052e:	1a9b      	subs	r3, r3, r2
 8000530:	4652      	mov	r2, sl
 8000532:	40da      	lsrs	r2, r3
 8000534:	4641      	mov	r1, r8
 8000536:	0013      	movs	r3, r2
 8000538:	464a      	mov	r2, r9
 800053a:	408a      	lsls	r2, r1
 800053c:	0017      	movs	r7, r2
 800053e:	4642      	mov	r2, r8
 8000540:	431f      	orrs	r7, r3
 8000542:	4653      	mov	r3, sl
 8000544:	4093      	lsls	r3, r2
 8000546:	001e      	movs	r6, r3
 8000548:	42af      	cmp	r7, r5
 800054a:	d9c3      	bls.n	80004d4 <__udivmoddi4+0x4c>
 800054c:	2200      	movs	r2, #0
 800054e:	2300      	movs	r3, #0
 8000550:	9200      	str	r2, [sp, #0]
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	4643      	mov	r3, r8
 8000556:	2b00      	cmp	r3, #0
 8000558:	d0d8      	beq.n	800050c <__udivmoddi4+0x84>
 800055a:	07fb      	lsls	r3, r7, #31
 800055c:	0872      	lsrs	r2, r6, #1
 800055e:	431a      	orrs	r2, r3
 8000560:	4646      	mov	r6, r8
 8000562:	087b      	lsrs	r3, r7, #1
 8000564:	e00e      	b.n	8000584 <__udivmoddi4+0xfc>
 8000566:	42ab      	cmp	r3, r5
 8000568:	d101      	bne.n	800056e <__udivmoddi4+0xe6>
 800056a:	42a2      	cmp	r2, r4
 800056c:	d80c      	bhi.n	8000588 <__udivmoddi4+0x100>
 800056e:	1aa4      	subs	r4, r4, r2
 8000570:	419d      	sbcs	r5, r3
 8000572:	2001      	movs	r0, #1
 8000574:	1924      	adds	r4, r4, r4
 8000576:	416d      	adcs	r5, r5
 8000578:	2100      	movs	r1, #0
 800057a:	3e01      	subs	r6, #1
 800057c:	1824      	adds	r4, r4, r0
 800057e:	414d      	adcs	r5, r1
 8000580:	2e00      	cmp	r6, #0
 8000582:	d006      	beq.n	8000592 <__udivmoddi4+0x10a>
 8000584:	42ab      	cmp	r3, r5
 8000586:	d9ee      	bls.n	8000566 <__udivmoddi4+0xde>
 8000588:	3e01      	subs	r6, #1
 800058a:	1924      	adds	r4, r4, r4
 800058c:	416d      	adcs	r5, r5
 800058e:	2e00      	cmp	r6, #0
 8000590:	d1f8      	bne.n	8000584 <__udivmoddi4+0xfc>
 8000592:	9800      	ldr	r0, [sp, #0]
 8000594:	9901      	ldr	r1, [sp, #4]
 8000596:	465b      	mov	r3, fp
 8000598:	1900      	adds	r0, r0, r4
 800059a:	4169      	adcs	r1, r5
 800059c:	2b00      	cmp	r3, #0
 800059e:	db24      	blt.n	80005ea <__udivmoddi4+0x162>
 80005a0:	002b      	movs	r3, r5
 80005a2:	465a      	mov	r2, fp
 80005a4:	4644      	mov	r4, r8
 80005a6:	40d3      	lsrs	r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	40e2      	lsrs	r2, r4
 80005ac:	001c      	movs	r4, r3
 80005ae:	465b      	mov	r3, fp
 80005b0:	0015      	movs	r5, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	db2a      	blt.n	800060c <__udivmoddi4+0x184>
 80005b6:	0026      	movs	r6, r4
 80005b8:	409e      	lsls	r6, r3
 80005ba:	0033      	movs	r3, r6
 80005bc:	0026      	movs	r6, r4
 80005be:	4647      	mov	r7, r8
 80005c0:	40be      	lsls	r6, r7
 80005c2:	0032      	movs	r2, r6
 80005c4:	1a80      	subs	r0, r0, r2
 80005c6:	4199      	sbcs	r1, r3
 80005c8:	9000      	str	r0, [sp, #0]
 80005ca:	9101      	str	r1, [sp, #4]
 80005cc:	e79e      	b.n	800050c <__udivmoddi4+0x84>
 80005ce:	42a3      	cmp	r3, r4
 80005d0:	d8bc      	bhi.n	800054c <__udivmoddi4+0xc4>
 80005d2:	e782      	b.n	80004da <__udivmoddi4+0x52>
 80005d4:	4642      	mov	r2, r8
 80005d6:	2320      	movs	r3, #32
 80005d8:	2100      	movs	r1, #0
 80005da:	1a9b      	subs	r3, r3, r2
 80005dc:	2200      	movs	r2, #0
 80005de:	9100      	str	r1, [sp, #0]
 80005e0:	9201      	str	r2, [sp, #4]
 80005e2:	2201      	movs	r2, #1
 80005e4:	40da      	lsrs	r2, r3
 80005e6:	9201      	str	r2, [sp, #4]
 80005e8:	e785      	b.n	80004f6 <__udivmoddi4+0x6e>
 80005ea:	4642      	mov	r2, r8
 80005ec:	2320      	movs	r3, #32
 80005ee:	1a9b      	subs	r3, r3, r2
 80005f0:	002a      	movs	r2, r5
 80005f2:	4646      	mov	r6, r8
 80005f4:	409a      	lsls	r2, r3
 80005f6:	0023      	movs	r3, r4
 80005f8:	40f3      	lsrs	r3, r6
 80005fa:	4644      	mov	r4, r8
 80005fc:	4313      	orrs	r3, r2
 80005fe:	002a      	movs	r2, r5
 8000600:	40e2      	lsrs	r2, r4
 8000602:	001c      	movs	r4, r3
 8000604:	465b      	mov	r3, fp
 8000606:	0015      	movs	r5, r2
 8000608:	2b00      	cmp	r3, #0
 800060a:	dad4      	bge.n	80005b6 <__udivmoddi4+0x12e>
 800060c:	4642      	mov	r2, r8
 800060e:	002f      	movs	r7, r5
 8000610:	2320      	movs	r3, #32
 8000612:	0026      	movs	r6, r4
 8000614:	4097      	lsls	r7, r2
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	40de      	lsrs	r6, r3
 800061a:	003b      	movs	r3, r7
 800061c:	4333      	orrs	r3, r6
 800061e:	e7cd      	b.n	80005bc <__udivmoddi4+0x134>

08000620 <__aeabi_fadd>:
 8000620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000622:	46ce      	mov	lr, r9
 8000624:	4647      	mov	r7, r8
 8000626:	0243      	lsls	r3, r0, #9
 8000628:	0a5a      	lsrs	r2, r3, #9
 800062a:	024e      	lsls	r6, r1, #9
 800062c:	0045      	lsls	r5, r0, #1
 800062e:	0fc4      	lsrs	r4, r0, #31
 8000630:	0048      	lsls	r0, r1, #1
 8000632:	4691      	mov	r9, r2
 8000634:	0e2d      	lsrs	r5, r5, #24
 8000636:	0a72      	lsrs	r2, r6, #9
 8000638:	0e00      	lsrs	r0, r0, #24
 800063a:	4694      	mov	ip, r2
 800063c:	b580      	push	{r7, lr}
 800063e:	099b      	lsrs	r3, r3, #6
 8000640:	0fc9      	lsrs	r1, r1, #31
 8000642:	09b6      	lsrs	r6, r6, #6
 8000644:	1a2a      	subs	r2, r5, r0
 8000646:	428c      	cmp	r4, r1
 8000648:	d021      	beq.n	800068e <__aeabi_fadd+0x6e>
 800064a:	2a00      	cmp	r2, #0
 800064c:	dd0d      	ble.n	800066a <__aeabi_fadd+0x4a>
 800064e:	2800      	cmp	r0, #0
 8000650:	d12d      	bne.n	80006ae <__aeabi_fadd+0x8e>
 8000652:	2e00      	cmp	r6, #0
 8000654:	d100      	bne.n	8000658 <__aeabi_fadd+0x38>
 8000656:	e08d      	b.n	8000774 <__aeabi_fadd+0x154>
 8000658:	1e51      	subs	r1, r2, #1
 800065a:	2a01      	cmp	r2, #1
 800065c:	d100      	bne.n	8000660 <__aeabi_fadd+0x40>
 800065e:	e11d      	b.n	800089c <__aeabi_fadd+0x27c>
 8000660:	2aff      	cmp	r2, #255	@ 0xff
 8000662:	d100      	bne.n	8000666 <__aeabi_fadd+0x46>
 8000664:	e0ab      	b.n	80007be <__aeabi_fadd+0x19e>
 8000666:	000a      	movs	r2, r1
 8000668:	e027      	b.n	80006ba <__aeabi_fadd+0x9a>
 800066a:	2a00      	cmp	r2, #0
 800066c:	d04d      	beq.n	800070a <__aeabi_fadd+0xea>
 800066e:	1b42      	subs	r2, r0, r5
 8000670:	2d00      	cmp	r5, #0
 8000672:	d000      	beq.n	8000676 <__aeabi_fadd+0x56>
 8000674:	e0cc      	b.n	8000810 <__aeabi_fadd+0x1f0>
 8000676:	2b00      	cmp	r3, #0
 8000678:	d100      	bne.n	800067c <__aeabi_fadd+0x5c>
 800067a:	e079      	b.n	8000770 <__aeabi_fadd+0x150>
 800067c:	1e54      	subs	r4, r2, #1
 800067e:	2a01      	cmp	r2, #1
 8000680:	d100      	bne.n	8000684 <__aeabi_fadd+0x64>
 8000682:	e128      	b.n	80008d6 <__aeabi_fadd+0x2b6>
 8000684:	2aff      	cmp	r2, #255	@ 0xff
 8000686:	d100      	bne.n	800068a <__aeabi_fadd+0x6a>
 8000688:	e097      	b.n	80007ba <__aeabi_fadd+0x19a>
 800068a:	0022      	movs	r2, r4
 800068c:	e0c5      	b.n	800081a <__aeabi_fadd+0x1fa>
 800068e:	2a00      	cmp	r2, #0
 8000690:	dc00      	bgt.n	8000694 <__aeabi_fadd+0x74>
 8000692:	e096      	b.n	80007c2 <__aeabi_fadd+0x1a2>
 8000694:	2800      	cmp	r0, #0
 8000696:	d04f      	beq.n	8000738 <__aeabi_fadd+0x118>
 8000698:	2dff      	cmp	r5, #255	@ 0xff
 800069a:	d100      	bne.n	800069e <__aeabi_fadd+0x7e>
 800069c:	e08f      	b.n	80007be <__aeabi_fadd+0x19e>
 800069e:	2180      	movs	r1, #128	@ 0x80
 80006a0:	04c9      	lsls	r1, r1, #19
 80006a2:	430e      	orrs	r6, r1
 80006a4:	2a1b      	cmp	r2, #27
 80006a6:	dd51      	ble.n	800074c <__aeabi_fadd+0x12c>
 80006a8:	002a      	movs	r2, r5
 80006aa:	3301      	adds	r3, #1
 80006ac:	e018      	b.n	80006e0 <__aeabi_fadd+0xc0>
 80006ae:	2dff      	cmp	r5, #255	@ 0xff
 80006b0:	d100      	bne.n	80006b4 <__aeabi_fadd+0x94>
 80006b2:	e084      	b.n	80007be <__aeabi_fadd+0x19e>
 80006b4:	2180      	movs	r1, #128	@ 0x80
 80006b6:	04c9      	lsls	r1, r1, #19
 80006b8:	430e      	orrs	r6, r1
 80006ba:	2101      	movs	r1, #1
 80006bc:	2a1b      	cmp	r2, #27
 80006be:	dc08      	bgt.n	80006d2 <__aeabi_fadd+0xb2>
 80006c0:	0031      	movs	r1, r6
 80006c2:	2020      	movs	r0, #32
 80006c4:	40d1      	lsrs	r1, r2
 80006c6:	1a82      	subs	r2, r0, r2
 80006c8:	4096      	lsls	r6, r2
 80006ca:	0032      	movs	r2, r6
 80006cc:	1e50      	subs	r0, r2, #1
 80006ce:	4182      	sbcs	r2, r0
 80006d0:	4311      	orrs	r1, r2
 80006d2:	1a5b      	subs	r3, r3, r1
 80006d4:	015a      	lsls	r2, r3, #5
 80006d6:	d459      	bmi.n	800078c <__aeabi_fadd+0x16c>
 80006d8:	2107      	movs	r1, #7
 80006da:	002a      	movs	r2, r5
 80006dc:	4019      	ands	r1, r3
 80006de:	d049      	beq.n	8000774 <__aeabi_fadd+0x154>
 80006e0:	210f      	movs	r1, #15
 80006e2:	4019      	ands	r1, r3
 80006e4:	2904      	cmp	r1, #4
 80006e6:	d000      	beq.n	80006ea <__aeabi_fadd+0xca>
 80006e8:	3304      	adds	r3, #4
 80006ea:	0159      	lsls	r1, r3, #5
 80006ec:	d542      	bpl.n	8000774 <__aeabi_fadd+0x154>
 80006ee:	1c50      	adds	r0, r2, #1
 80006f0:	2afe      	cmp	r2, #254	@ 0xfe
 80006f2:	d03a      	beq.n	800076a <__aeabi_fadd+0x14a>
 80006f4:	019b      	lsls	r3, r3, #6
 80006f6:	b2c0      	uxtb	r0, r0
 80006f8:	0a5b      	lsrs	r3, r3, #9
 80006fa:	05c0      	lsls	r0, r0, #23
 80006fc:	4318      	orrs	r0, r3
 80006fe:	07e4      	lsls	r4, r4, #31
 8000700:	4320      	orrs	r0, r4
 8000702:	bcc0      	pop	{r6, r7}
 8000704:	46b9      	mov	r9, r7
 8000706:	46b0      	mov	r8, r6
 8000708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800070a:	20fe      	movs	r0, #254	@ 0xfe
 800070c:	4680      	mov	r8, r0
 800070e:	1c6f      	adds	r7, r5, #1
 8000710:	0038      	movs	r0, r7
 8000712:	4647      	mov	r7, r8
 8000714:	4207      	tst	r7, r0
 8000716:	d000      	beq.n	800071a <__aeabi_fadd+0xfa>
 8000718:	e08e      	b.n	8000838 <__aeabi_fadd+0x218>
 800071a:	2d00      	cmp	r5, #0
 800071c:	d000      	beq.n	8000720 <__aeabi_fadd+0x100>
 800071e:	e0b4      	b.n	800088a <__aeabi_fadd+0x26a>
 8000720:	2b00      	cmp	r3, #0
 8000722:	d100      	bne.n	8000726 <__aeabi_fadd+0x106>
 8000724:	e0db      	b.n	80008de <__aeabi_fadd+0x2be>
 8000726:	2e00      	cmp	r6, #0
 8000728:	d06c      	beq.n	8000804 <__aeabi_fadd+0x1e4>
 800072a:	1b98      	subs	r0, r3, r6
 800072c:	0145      	lsls	r5, r0, #5
 800072e:	d400      	bmi.n	8000732 <__aeabi_fadd+0x112>
 8000730:	e0f7      	b.n	8000922 <__aeabi_fadd+0x302>
 8000732:	000c      	movs	r4, r1
 8000734:	1af3      	subs	r3, r6, r3
 8000736:	e03d      	b.n	80007b4 <__aeabi_fadd+0x194>
 8000738:	2e00      	cmp	r6, #0
 800073a:	d01b      	beq.n	8000774 <__aeabi_fadd+0x154>
 800073c:	1e51      	subs	r1, r2, #1
 800073e:	2a01      	cmp	r2, #1
 8000740:	d100      	bne.n	8000744 <__aeabi_fadd+0x124>
 8000742:	e082      	b.n	800084a <__aeabi_fadd+0x22a>
 8000744:	2aff      	cmp	r2, #255	@ 0xff
 8000746:	d03a      	beq.n	80007be <__aeabi_fadd+0x19e>
 8000748:	000a      	movs	r2, r1
 800074a:	e7ab      	b.n	80006a4 <__aeabi_fadd+0x84>
 800074c:	0031      	movs	r1, r6
 800074e:	2020      	movs	r0, #32
 8000750:	40d1      	lsrs	r1, r2
 8000752:	1a82      	subs	r2, r0, r2
 8000754:	4096      	lsls	r6, r2
 8000756:	0032      	movs	r2, r6
 8000758:	1e50      	subs	r0, r2, #1
 800075a:	4182      	sbcs	r2, r0
 800075c:	430a      	orrs	r2, r1
 800075e:	189b      	adds	r3, r3, r2
 8000760:	015a      	lsls	r2, r3, #5
 8000762:	d5b9      	bpl.n	80006d8 <__aeabi_fadd+0xb8>
 8000764:	1c6a      	adds	r2, r5, #1
 8000766:	2dfe      	cmp	r5, #254	@ 0xfe
 8000768:	d175      	bne.n	8000856 <__aeabi_fadd+0x236>
 800076a:	20ff      	movs	r0, #255	@ 0xff
 800076c:	2300      	movs	r3, #0
 800076e:	e7c4      	b.n	80006fa <__aeabi_fadd+0xda>
 8000770:	000c      	movs	r4, r1
 8000772:	0033      	movs	r3, r6
 8000774:	08db      	lsrs	r3, r3, #3
 8000776:	2aff      	cmp	r2, #255	@ 0xff
 8000778:	d146      	bne.n	8000808 <__aeabi_fadd+0x1e8>
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f5      	beq.n	800076a <__aeabi_fadd+0x14a>
 800077e:	2280      	movs	r2, #128	@ 0x80
 8000780:	03d2      	lsls	r2, r2, #15
 8000782:	4313      	orrs	r3, r2
 8000784:	025b      	lsls	r3, r3, #9
 8000786:	20ff      	movs	r0, #255	@ 0xff
 8000788:	0a5b      	lsrs	r3, r3, #9
 800078a:	e7b6      	b.n	80006fa <__aeabi_fadd+0xda>
 800078c:	019f      	lsls	r7, r3, #6
 800078e:	09bf      	lsrs	r7, r7, #6
 8000790:	0038      	movs	r0, r7
 8000792:	f000 fdfb 	bl	800138c <__clzsi2>
 8000796:	3805      	subs	r0, #5
 8000798:	4087      	lsls	r7, r0
 800079a:	4285      	cmp	r5, r0
 800079c:	dc24      	bgt.n	80007e8 <__aeabi_fadd+0x1c8>
 800079e:	003b      	movs	r3, r7
 80007a0:	2120      	movs	r1, #32
 80007a2:	1b42      	subs	r2, r0, r5
 80007a4:	3201      	adds	r2, #1
 80007a6:	40d3      	lsrs	r3, r2
 80007a8:	1a8a      	subs	r2, r1, r2
 80007aa:	4097      	lsls	r7, r2
 80007ac:	1e7a      	subs	r2, r7, #1
 80007ae:	4197      	sbcs	r7, r2
 80007b0:	2200      	movs	r2, #0
 80007b2:	433b      	orrs	r3, r7
 80007b4:	0759      	lsls	r1, r3, #29
 80007b6:	d193      	bne.n	80006e0 <__aeabi_fadd+0xc0>
 80007b8:	e797      	b.n	80006ea <__aeabi_fadd+0xca>
 80007ba:	000c      	movs	r4, r1
 80007bc:	0033      	movs	r3, r6
 80007be:	08db      	lsrs	r3, r3, #3
 80007c0:	e7db      	b.n	800077a <__aeabi_fadd+0x15a>
 80007c2:	2a00      	cmp	r2, #0
 80007c4:	d014      	beq.n	80007f0 <__aeabi_fadd+0x1d0>
 80007c6:	1b42      	subs	r2, r0, r5
 80007c8:	2d00      	cmp	r5, #0
 80007ca:	d14b      	bne.n	8000864 <__aeabi_fadd+0x244>
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d0d0      	beq.n	8000772 <__aeabi_fadd+0x152>
 80007d0:	1e51      	subs	r1, r2, #1
 80007d2:	2a01      	cmp	r2, #1
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fadd+0x1b8>
 80007d6:	e09e      	b.n	8000916 <__aeabi_fadd+0x2f6>
 80007d8:	2aff      	cmp	r2, #255	@ 0xff
 80007da:	d0ef      	beq.n	80007bc <__aeabi_fadd+0x19c>
 80007dc:	000a      	movs	r2, r1
 80007de:	2a1b      	cmp	r2, #27
 80007e0:	dd5f      	ble.n	80008a2 <__aeabi_fadd+0x282>
 80007e2:	0002      	movs	r2, r0
 80007e4:	1c73      	adds	r3, r6, #1
 80007e6:	e77b      	b.n	80006e0 <__aeabi_fadd+0xc0>
 80007e8:	4b50      	ldr	r3, [pc, #320]	@ (800092c <__aeabi_fadd+0x30c>)
 80007ea:	1a2a      	subs	r2, r5, r0
 80007ec:	403b      	ands	r3, r7
 80007ee:	e7e1      	b.n	80007b4 <__aeabi_fadd+0x194>
 80007f0:	21fe      	movs	r1, #254	@ 0xfe
 80007f2:	1c6a      	adds	r2, r5, #1
 80007f4:	4211      	tst	r1, r2
 80007f6:	d13b      	bne.n	8000870 <__aeabi_fadd+0x250>
 80007f8:	2d00      	cmp	r5, #0
 80007fa:	d15d      	bne.n	80008b8 <__aeabi_fadd+0x298>
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d07f      	beq.n	8000900 <__aeabi_fadd+0x2e0>
 8000800:	2e00      	cmp	r6, #0
 8000802:	d17f      	bne.n	8000904 <__aeabi_fadd+0x2e4>
 8000804:	2200      	movs	r2, #0
 8000806:	08db      	lsrs	r3, r3, #3
 8000808:	025b      	lsls	r3, r3, #9
 800080a:	0a5b      	lsrs	r3, r3, #9
 800080c:	b2d0      	uxtb	r0, r2
 800080e:	e774      	b.n	80006fa <__aeabi_fadd+0xda>
 8000810:	28ff      	cmp	r0, #255	@ 0xff
 8000812:	d0d2      	beq.n	80007ba <__aeabi_fadd+0x19a>
 8000814:	2480      	movs	r4, #128	@ 0x80
 8000816:	04e4      	lsls	r4, r4, #19
 8000818:	4323      	orrs	r3, r4
 800081a:	2401      	movs	r4, #1
 800081c:	2a1b      	cmp	r2, #27
 800081e:	dc07      	bgt.n	8000830 <__aeabi_fadd+0x210>
 8000820:	001c      	movs	r4, r3
 8000822:	2520      	movs	r5, #32
 8000824:	40d4      	lsrs	r4, r2
 8000826:	1aaa      	subs	r2, r5, r2
 8000828:	4093      	lsls	r3, r2
 800082a:	1e5a      	subs	r2, r3, #1
 800082c:	4193      	sbcs	r3, r2
 800082e:	431c      	orrs	r4, r3
 8000830:	1b33      	subs	r3, r6, r4
 8000832:	0005      	movs	r5, r0
 8000834:	000c      	movs	r4, r1
 8000836:	e74d      	b.n	80006d4 <__aeabi_fadd+0xb4>
 8000838:	1b9f      	subs	r7, r3, r6
 800083a:	017a      	lsls	r2, r7, #5
 800083c:	d422      	bmi.n	8000884 <__aeabi_fadd+0x264>
 800083e:	2f00      	cmp	r7, #0
 8000840:	d1a6      	bne.n	8000790 <__aeabi_fadd+0x170>
 8000842:	2400      	movs	r4, #0
 8000844:	2000      	movs	r0, #0
 8000846:	2300      	movs	r3, #0
 8000848:	e757      	b.n	80006fa <__aeabi_fadd+0xda>
 800084a:	199b      	adds	r3, r3, r6
 800084c:	2501      	movs	r5, #1
 800084e:	3201      	adds	r2, #1
 8000850:	0159      	lsls	r1, r3, #5
 8000852:	d400      	bmi.n	8000856 <__aeabi_fadd+0x236>
 8000854:	e740      	b.n	80006d8 <__aeabi_fadd+0xb8>
 8000856:	2101      	movs	r1, #1
 8000858:	4835      	ldr	r0, [pc, #212]	@ (8000930 <__aeabi_fadd+0x310>)
 800085a:	4019      	ands	r1, r3
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	4003      	ands	r3, r0
 8000860:	430b      	orrs	r3, r1
 8000862:	e7a7      	b.n	80007b4 <__aeabi_fadd+0x194>
 8000864:	28ff      	cmp	r0, #255	@ 0xff
 8000866:	d0a9      	beq.n	80007bc <__aeabi_fadd+0x19c>
 8000868:	2180      	movs	r1, #128	@ 0x80
 800086a:	04c9      	lsls	r1, r1, #19
 800086c:	430b      	orrs	r3, r1
 800086e:	e7b6      	b.n	80007de <__aeabi_fadd+0x1be>
 8000870:	2aff      	cmp	r2, #255	@ 0xff
 8000872:	d100      	bne.n	8000876 <__aeabi_fadd+0x256>
 8000874:	e779      	b.n	800076a <__aeabi_fadd+0x14a>
 8000876:	199b      	adds	r3, r3, r6
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	0759      	lsls	r1, r3, #29
 800087c:	d000      	beq.n	8000880 <__aeabi_fadd+0x260>
 800087e:	e72f      	b.n	80006e0 <__aeabi_fadd+0xc0>
 8000880:	08db      	lsrs	r3, r3, #3
 8000882:	e7c1      	b.n	8000808 <__aeabi_fadd+0x1e8>
 8000884:	000c      	movs	r4, r1
 8000886:	1af7      	subs	r7, r6, r3
 8000888:	e782      	b.n	8000790 <__aeabi_fadd+0x170>
 800088a:	2b00      	cmp	r3, #0
 800088c:	d12c      	bne.n	80008e8 <__aeabi_fadd+0x2c8>
 800088e:	2e00      	cmp	r6, #0
 8000890:	d193      	bne.n	80007ba <__aeabi_fadd+0x19a>
 8000892:	2380      	movs	r3, #128	@ 0x80
 8000894:	2400      	movs	r4, #0
 8000896:	20ff      	movs	r0, #255	@ 0xff
 8000898:	03db      	lsls	r3, r3, #15
 800089a:	e72e      	b.n	80006fa <__aeabi_fadd+0xda>
 800089c:	2501      	movs	r5, #1
 800089e:	1b9b      	subs	r3, r3, r6
 80008a0:	e718      	b.n	80006d4 <__aeabi_fadd+0xb4>
 80008a2:	0019      	movs	r1, r3
 80008a4:	2520      	movs	r5, #32
 80008a6:	40d1      	lsrs	r1, r2
 80008a8:	1aaa      	subs	r2, r5, r2
 80008aa:	4093      	lsls	r3, r2
 80008ac:	1e5a      	subs	r2, r3, #1
 80008ae:	4193      	sbcs	r3, r2
 80008b0:	430b      	orrs	r3, r1
 80008b2:	0005      	movs	r5, r0
 80008b4:	199b      	adds	r3, r3, r6
 80008b6:	e753      	b.n	8000760 <__aeabi_fadd+0x140>
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d100      	bne.n	80008be <__aeabi_fadd+0x29e>
 80008bc:	e77e      	b.n	80007bc <__aeabi_fadd+0x19c>
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d100      	bne.n	80008c4 <__aeabi_fadd+0x2a4>
 80008c2:	e77c      	b.n	80007be <__aeabi_fadd+0x19e>
 80008c4:	2280      	movs	r2, #128	@ 0x80
 80008c6:	03d2      	lsls	r2, r2, #15
 80008c8:	4591      	cmp	r9, r2
 80008ca:	d302      	bcc.n	80008d2 <__aeabi_fadd+0x2b2>
 80008cc:	4594      	cmp	ip, r2
 80008ce:	d200      	bcs.n	80008d2 <__aeabi_fadd+0x2b2>
 80008d0:	0033      	movs	r3, r6
 80008d2:	08db      	lsrs	r3, r3, #3
 80008d4:	e753      	b.n	800077e <__aeabi_fadd+0x15e>
 80008d6:	000c      	movs	r4, r1
 80008d8:	1af3      	subs	r3, r6, r3
 80008da:	3501      	adds	r5, #1
 80008dc:	e6fa      	b.n	80006d4 <__aeabi_fadd+0xb4>
 80008de:	2e00      	cmp	r6, #0
 80008e0:	d0af      	beq.n	8000842 <__aeabi_fadd+0x222>
 80008e2:	000c      	movs	r4, r1
 80008e4:	0033      	movs	r3, r6
 80008e6:	e78d      	b.n	8000804 <__aeabi_fadd+0x1e4>
 80008e8:	2e00      	cmp	r6, #0
 80008ea:	d100      	bne.n	80008ee <__aeabi_fadd+0x2ce>
 80008ec:	e767      	b.n	80007be <__aeabi_fadd+0x19e>
 80008ee:	2280      	movs	r2, #128	@ 0x80
 80008f0:	03d2      	lsls	r2, r2, #15
 80008f2:	4591      	cmp	r9, r2
 80008f4:	d3ed      	bcc.n	80008d2 <__aeabi_fadd+0x2b2>
 80008f6:	4594      	cmp	ip, r2
 80008f8:	d2eb      	bcs.n	80008d2 <__aeabi_fadd+0x2b2>
 80008fa:	000c      	movs	r4, r1
 80008fc:	0033      	movs	r3, r6
 80008fe:	e7e8      	b.n	80008d2 <__aeabi_fadd+0x2b2>
 8000900:	0033      	movs	r3, r6
 8000902:	e77f      	b.n	8000804 <__aeabi_fadd+0x1e4>
 8000904:	199b      	adds	r3, r3, r6
 8000906:	2200      	movs	r2, #0
 8000908:	0159      	lsls	r1, r3, #5
 800090a:	d5b9      	bpl.n	8000880 <__aeabi_fadd+0x260>
 800090c:	4a07      	ldr	r2, [pc, #28]	@ (800092c <__aeabi_fadd+0x30c>)
 800090e:	4013      	ands	r3, r2
 8000910:	08db      	lsrs	r3, r3, #3
 8000912:	2201      	movs	r2, #1
 8000914:	e778      	b.n	8000808 <__aeabi_fadd+0x1e8>
 8000916:	199b      	adds	r3, r3, r6
 8000918:	3201      	adds	r2, #1
 800091a:	3501      	adds	r5, #1
 800091c:	0159      	lsls	r1, r3, #5
 800091e:	d49a      	bmi.n	8000856 <__aeabi_fadd+0x236>
 8000920:	e6da      	b.n	80006d8 <__aeabi_fadd+0xb8>
 8000922:	1e03      	subs	r3, r0, #0
 8000924:	d08d      	beq.n	8000842 <__aeabi_fadd+0x222>
 8000926:	08db      	lsrs	r3, r3, #3
 8000928:	e76e      	b.n	8000808 <__aeabi_fadd+0x1e8>
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	fbffffff 	.word	0xfbffffff
 8000930:	7dffffff 	.word	0x7dffffff

08000934 <__aeabi_fdiv>:
 8000934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000936:	464f      	mov	r7, r9
 8000938:	4646      	mov	r6, r8
 800093a:	46d6      	mov	lr, sl
 800093c:	0244      	lsls	r4, r0, #9
 800093e:	b5c0      	push	{r6, r7, lr}
 8000940:	0047      	lsls	r7, r0, #1
 8000942:	1c0e      	adds	r6, r1, #0
 8000944:	0a64      	lsrs	r4, r4, #9
 8000946:	0e3f      	lsrs	r7, r7, #24
 8000948:	0fc5      	lsrs	r5, r0, #31
 800094a:	2f00      	cmp	r7, #0
 800094c:	d03c      	beq.n	80009c8 <__aeabi_fdiv+0x94>
 800094e:	2fff      	cmp	r7, #255	@ 0xff
 8000950:	d042      	beq.n	80009d8 <__aeabi_fdiv+0xa4>
 8000952:	2300      	movs	r3, #0
 8000954:	2280      	movs	r2, #128	@ 0x80
 8000956:	4699      	mov	r9, r3
 8000958:	469a      	mov	sl, r3
 800095a:	00e4      	lsls	r4, r4, #3
 800095c:	04d2      	lsls	r2, r2, #19
 800095e:	4314      	orrs	r4, r2
 8000960:	3f7f      	subs	r7, #127	@ 0x7f
 8000962:	0273      	lsls	r3, r6, #9
 8000964:	0a5b      	lsrs	r3, r3, #9
 8000966:	4698      	mov	r8, r3
 8000968:	0073      	lsls	r3, r6, #1
 800096a:	0e1b      	lsrs	r3, r3, #24
 800096c:	0ff6      	lsrs	r6, r6, #31
 800096e:	2b00      	cmp	r3, #0
 8000970:	d01b      	beq.n	80009aa <__aeabi_fdiv+0x76>
 8000972:	2bff      	cmp	r3, #255	@ 0xff
 8000974:	d013      	beq.n	800099e <__aeabi_fdiv+0x6a>
 8000976:	4642      	mov	r2, r8
 8000978:	2180      	movs	r1, #128	@ 0x80
 800097a:	00d2      	lsls	r2, r2, #3
 800097c:	04c9      	lsls	r1, r1, #19
 800097e:	4311      	orrs	r1, r2
 8000980:	4688      	mov	r8, r1
 8000982:	2000      	movs	r0, #0
 8000984:	3b7f      	subs	r3, #127	@ 0x7f
 8000986:	0029      	movs	r1, r5
 8000988:	1aff      	subs	r7, r7, r3
 800098a:	464b      	mov	r3, r9
 800098c:	4071      	eors	r1, r6
 800098e:	b2c9      	uxtb	r1, r1
 8000990:	2b0f      	cmp	r3, #15
 8000992:	d900      	bls.n	8000996 <__aeabi_fdiv+0x62>
 8000994:	e0b5      	b.n	8000b02 <__aeabi_fdiv+0x1ce>
 8000996:	4a74      	ldr	r2, [pc, #464]	@ (8000b68 <__aeabi_fdiv+0x234>)
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	58d3      	ldr	r3, [r2, r3]
 800099c:	469f      	mov	pc, r3
 800099e:	4643      	mov	r3, r8
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d13f      	bne.n	8000a24 <__aeabi_fdiv+0xf0>
 80009a4:	3fff      	subs	r7, #255	@ 0xff
 80009a6:	3302      	adds	r3, #2
 80009a8:	e003      	b.n	80009b2 <__aeabi_fdiv+0x7e>
 80009aa:	4643      	mov	r3, r8
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d12d      	bne.n	8000a0c <__aeabi_fdiv+0xd8>
 80009b0:	2301      	movs	r3, #1
 80009b2:	0029      	movs	r1, r5
 80009b4:	464a      	mov	r2, r9
 80009b6:	4071      	eors	r1, r6
 80009b8:	b2c9      	uxtb	r1, r1
 80009ba:	431a      	orrs	r2, r3
 80009bc:	2a0e      	cmp	r2, #14
 80009be:	d838      	bhi.n	8000a32 <__aeabi_fdiv+0xfe>
 80009c0:	486a      	ldr	r0, [pc, #424]	@ (8000b6c <__aeabi_fdiv+0x238>)
 80009c2:	0092      	lsls	r2, r2, #2
 80009c4:	5882      	ldr	r2, [r0, r2]
 80009c6:	4697      	mov	pc, r2
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	d113      	bne.n	80009f4 <__aeabi_fdiv+0xc0>
 80009cc:	2304      	movs	r3, #4
 80009ce:	4699      	mov	r9, r3
 80009d0:	3b03      	subs	r3, #3
 80009d2:	2700      	movs	r7, #0
 80009d4:	469a      	mov	sl, r3
 80009d6:	e7c4      	b.n	8000962 <__aeabi_fdiv+0x2e>
 80009d8:	2c00      	cmp	r4, #0
 80009da:	d105      	bne.n	80009e8 <__aeabi_fdiv+0xb4>
 80009dc:	2308      	movs	r3, #8
 80009de:	4699      	mov	r9, r3
 80009e0:	3b06      	subs	r3, #6
 80009e2:	27ff      	movs	r7, #255	@ 0xff
 80009e4:	469a      	mov	sl, r3
 80009e6:	e7bc      	b.n	8000962 <__aeabi_fdiv+0x2e>
 80009e8:	230c      	movs	r3, #12
 80009ea:	4699      	mov	r9, r3
 80009ec:	3b09      	subs	r3, #9
 80009ee:	27ff      	movs	r7, #255	@ 0xff
 80009f0:	469a      	mov	sl, r3
 80009f2:	e7b6      	b.n	8000962 <__aeabi_fdiv+0x2e>
 80009f4:	0020      	movs	r0, r4
 80009f6:	f000 fcc9 	bl	800138c <__clzsi2>
 80009fa:	2776      	movs	r7, #118	@ 0x76
 80009fc:	1f43      	subs	r3, r0, #5
 80009fe:	409c      	lsls	r4, r3
 8000a00:	2300      	movs	r3, #0
 8000a02:	427f      	negs	r7, r7
 8000a04:	4699      	mov	r9, r3
 8000a06:	469a      	mov	sl, r3
 8000a08:	1a3f      	subs	r7, r7, r0
 8000a0a:	e7aa      	b.n	8000962 <__aeabi_fdiv+0x2e>
 8000a0c:	4640      	mov	r0, r8
 8000a0e:	f000 fcbd 	bl	800138c <__clzsi2>
 8000a12:	4642      	mov	r2, r8
 8000a14:	1f43      	subs	r3, r0, #5
 8000a16:	409a      	lsls	r2, r3
 8000a18:	2376      	movs	r3, #118	@ 0x76
 8000a1a:	425b      	negs	r3, r3
 8000a1c:	1a1b      	subs	r3, r3, r0
 8000a1e:	4690      	mov	r8, r2
 8000a20:	2000      	movs	r0, #0
 8000a22:	e7b0      	b.n	8000986 <__aeabi_fdiv+0x52>
 8000a24:	2303      	movs	r3, #3
 8000a26:	464a      	mov	r2, r9
 8000a28:	431a      	orrs	r2, r3
 8000a2a:	4691      	mov	r9, r2
 8000a2c:	2003      	movs	r0, #3
 8000a2e:	33fc      	adds	r3, #252	@ 0xfc
 8000a30:	e7a9      	b.n	8000986 <__aeabi_fdiv+0x52>
 8000a32:	000d      	movs	r5, r1
 8000a34:	20ff      	movs	r0, #255	@ 0xff
 8000a36:	2200      	movs	r2, #0
 8000a38:	05c0      	lsls	r0, r0, #23
 8000a3a:	07ed      	lsls	r5, r5, #31
 8000a3c:	4310      	orrs	r0, r2
 8000a3e:	4328      	orrs	r0, r5
 8000a40:	bce0      	pop	{r5, r6, r7}
 8000a42:	46ba      	mov	sl, r7
 8000a44:	46b1      	mov	r9, r6
 8000a46:	46a8      	mov	r8, r5
 8000a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a4a:	000d      	movs	r5, r1
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	2200      	movs	r2, #0
 8000a50:	e7f2      	b.n	8000a38 <__aeabi_fdiv+0x104>
 8000a52:	4653      	mov	r3, sl
 8000a54:	2b02      	cmp	r3, #2
 8000a56:	d0ed      	beq.n	8000a34 <__aeabi_fdiv+0x100>
 8000a58:	2b03      	cmp	r3, #3
 8000a5a:	d033      	beq.n	8000ac4 <__aeabi_fdiv+0x190>
 8000a5c:	46a0      	mov	r8, r4
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d105      	bne.n	8000a6e <__aeabi_fdiv+0x13a>
 8000a62:	2000      	movs	r0, #0
 8000a64:	2200      	movs	r2, #0
 8000a66:	e7e7      	b.n	8000a38 <__aeabi_fdiv+0x104>
 8000a68:	0035      	movs	r5, r6
 8000a6a:	2803      	cmp	r0, #3
 8000a6c:	d07a      	beq.n	8000b64 <__aeabi_fdiv+0x230>
 8000a6e:	003b      	movs	r3, r7
 8000a70:	337f      	adds	r3, #127	@ 0x7f
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	dd2d      	ble.n	8000ad2 <__aeabi_fdiv+0x19e>
 8000a76:	4642      	mov	r2, r8
 8000a78:	0752      	lsls	r2, r2, #29
 8000a7a:	d007      	beq.n	8000a8c <__aeabi_fdiv+0x158>
 8000a7c:	220f      	movs	r2, #15
 8000a7e:	4641      	mov	r1, r8
 8000a80:	400a      	ands	r2, r1
 8000a82:	2a04      	cmp	r2, #4
 8000a84:	d002      	beq.n	8000a8c <__aeabi_fdiv+0x158>
 8000a86:	2204      	movs	r2, #4
 8000a88:	4694      	mov	ip, r2
 8000a8a:	44e0      	add	r8, ip
 8000a8c:	4642      	mov	r2, r8
 8000a8e:	0112      	lsls	r2, r2, #4
 8000a90:	d505      	bpl.n	8000a9e <__aeabi_fdiv+0x16a>
 8000a92:	4642      	mov	r2, r8
 8000a94:	4b36      	ldr	r3, [pc, #216]	@ (8000b70 <__aeabi_fdiv+0x23c>)
 8000a96:	401a      	ands	r2, r3
 8000a98:	003b      	movs	r3, r7
 8000a9a:	4690      	mov	r8, r2
 8000a9c:	3380      	adds	r3, #128	@ 0x80
 8000a9e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000aa0:	dcc8      	bgt.n	8000a34 <__aeabi_fdiv+0x100>
 8000aa2:	4642      	mov	r2, r8
 8000aa4:	0192      	lsls	r2, r2, #6
 8000aa6:	0a52      	lsrs	r2, r2, #9
 8000aa8:	b2d8      	uxtb	r0, r3
 8000aaa:	e7c5      	b.n	8000a38 <__aeabi_fdiv+0x104>
 8000aac:	2280      	movs	r2, #128	@ 0x80
 8000aae:	2500      	movs	r5, #0
 8000ab0:	20ff      	movs	r0, #255	@ 0xff
 8000ab2:	03d2      	lsls	r2, r2, #15
 8000ab4:	e7c0      	b.n	8000a38 <__aeabi_fdiv+0x104>
 8000ab6:	2280      	movs	r2, #128	@ 0x80
 8000ab8:	03d2      	lsls	r2, r2, #15
 8000aba:	4214      	tst	r4, r2
 8000abc:	d002      	beq.n	8000ac4 <__aeabi_fdiv+0x190>
 8000abe:	4643      	mov	r3, r8
 8000ac0:	4213      	tst	r3, r2
 8000ac2:	d049      	beq.n	8000b58 <__aeabi_fdiv+0x224>
 8000ac4:	2280      	movs	r2, #128	@ 0x80
 8000ac6:	03d2      	lsls	r2, r2, #15
 8000ac8:	4322      	orrs	r2, r4
 8000aca:	0252      	lsls	r2, r2, #9
 8000acc:	20ff      	movs	r0, #255	@ 0xff
 8000ace:	0a52      	lsrs	r2, r2, #9
 8000ad0:	e7b2      	b.n	8000a38 <__aeabi_fdiv+0x104>
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	1ad3      	subs	r3, r2, r3
 8000ad6:	2b1b      	cmp	r3, #27
 8000ad8:	dcc3      	bgt.n	8000a62 <__aeabi_fdiv+0x12e>
 8000ada:	4642      	mov	r2, r8
 8000adc:	40da      	lsrs	r2, r3
 8000ade:	4643      	mov	r3, r8
 8000ae0:	379e      	adds	r7, #158	@ 0x9e
 8000ae2:	40bb      	lsls	r3, r7
 8000ae4:	1e59      	subs	r1, r3, #1
 8000ae6:	418b      	sbcs	r3, r1
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	0753      	lsls	r3, r2, #29
 8000aec:	d004      	beq.n	8000af8 <__aeabi_fdiv+0x1c4>
 8000aee:	230f      	movs	r3, #15
 8000af0:	4013      	ands	r3, r2
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	d000      	beq.n	8000af8 <__aeabi_fdiv+0x1c4>
 8000af6:	3204      	adds	r2, #4
 8000af8:	0153      	lsls	r3, r2, #5
 8000afa:	d529      	bpl.n	8000b50 <__aeabi_fdiv+0x21c>
 8000afc:	2001      	movs	r0, #1
 8000afe:	2200      	movs	r2, #0
 8000b00:	e79a      	b.n	8000a38 <__aeabi_fdiv+0x104>
 8000b02:	4642      	mov	r2, r8
 8000b04:	0163      	lsls	r3, r4, #5
 8000b06:	0155      	lsls	r5, r2, #5
 8000b08:	42ab      	cmp	r3, r5
 8000b0a:	d215      	bcs.n	8000b38 <__aeabi_fdiv+0x204>
 8000b0c:	201b      	movs	r0, #27
 8000b0e:	2200      	movs	r2, #0
 8000b10:	3f01      	subs	r7, #1
 8000b12:	2601      	movs	r6, #1
 8000b14:	001c      	movs	r4, r3
 8000b16:	0052      	lsls	r2, r2, #1
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	2c00      	cmp	r4, #0
 8000b1c:	db01      	blt.n	8000b22 <__aeabi_fdiv+0x1ee>
 8000b1e:	429d      	cmp	r5, r3
 8000b20:	d801      	bhi.n	8000b26 <__aeabi_fdiv+0x1f2>
 8000b22:	1b5b      	subs	r3, r3, r5
 8000b24:	4332      	orrs	r2, r6
 8000b26:	3801      	subs	r0, #1
 8000b28:	2800      	cmp	r0, #0
 8000b2a:	d1f3      	bne.n	8000b14 <__aeabi_fdiv+0x1e0>
 8000b2c:	1e58      	subs	r0, r3, #1
 8000b2e:	4183      	sbcs	r3, r0
 8000b30:	4313      	orrs	r3, r2
 8000b32:	4698      	mov	r8, r3
 8000b34:	000d      	movs	r5, r1
 8000b36:	e79a      	b.n	8000a6e <__aeabi_fdiv+0x13a>
 8000b38:	201a      	movs	r0, #26
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	1b5b      	subs	r3, r3, r5
 8000b3e:	e7e8      	b.n	8000b12 <__aeabi_fdiv+0x1de>
 8000b40:	3b02      	subs	r3, #2
 8000b42:	425a      	negs	r2, r3
 8000b44:	4153      	adcs	r3, r2
 8000b46:	425b      	negs	r3, r3
 8000b48:	0035      	movs	r5, r6
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	b2d8      	uxtb	r0, r3
 8000b4e:	e773      	b.n	8000a38 <__aeabi_fdiv+0x104>
 8000b50:	0192      	lsls	r2, r2, #6
 8000b52:	2000      	movs	r0, #0
 8000b54:	0a52      	lsrs	r2, r2, #9
 8000b56:	e76f      	b.n	8000a38 <__aeabi_fdiv+0x104>
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	0252      	lsls	r2, r2, #9
 8000b5c:	0035      	movs	r5, r6
 8000b5e:	20ff      	movs	r0, #255	@ 0xff
 8000b60:	0a52      	lsrs	r2, r2, #9
 8000b62:	e769      	b.n	8000a38 <__aeabi_fdiv+0x104>
 8000b64:	4644      	mov	r4, r8
 8000b66:	e7ad      	b.n	8000ac4 <__aeabi_fdiv+0x190>
 8000b68:	08008fa4 	.word	0x08008fa4
 8000b6c:	08008fe4 	.word	0x08008fe4
 8000b70:	f7ffffff 	.word	0xf7ffffff

08000b74 <__aeabi_fmul>:
 8000b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b76:	464f      	mov	r7, r9
 8000b78:	4646      	mov	r6, r8
 8000b7a:	46d6      	mov	lr, sl
 8000b7c:	0243      	lsls	r3, r0, #9
 8000b7e:	0a5b      	lsrs	r3, r3, #9
 8000b80:	0045      	lsls	r5, r0, #1
 8000b82:	b5c0      	push	{r6, r7, lr}
 8000b84:	4699      	mov	r9, r3
 8000b86:	1c0f      	adds	r7, r1, #0
 8000b88:	0e2d      	lsrs	r5, r5, #24
 8000b8a:	0fc6      	lsrs	r6, r0, #31
 8000b8c:	2d00      	cmp	r5, #0
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_fmul+0x1e>
 8000b90:	e088      	b.n	8000ca4 <__aeabi_fmul+0x130>
 8000b92:	2dff      	cmp	r5, #255	@ 0xff
 8000b94:	d100      	bne.n	8000b98 <__aeabi_fmul+0x24>
 8000b96:	e08d      	b.n	8000cb4 <__aeabi_fmul+0x140>
 8000b98:	2280      	movs	r2, #128	@ 0x80
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	04d2      	lsls	r2, r2, #19
 8000b9e:	431a      	orrs	r2, r3
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	4691      	mov	r9, r2
 8000ba4:	4698      	mov	r8, r3
 8000ba6:	469a      	mov	sl, r3
 8000ba8:	3d7f      	subs	r5, #127	@ 0x7f
 8000baa:	027c      	lsls	r4, r7, #9
 8000bac:	007b      	lsls	r3, r7, #1
 8000bae:	0a64      	lsrs	r4, r4, #9
 8000bb0:	0e1b      	lsrs	r3, r3, #24
 8000bb2:	0fff      	lsrs	r7, r7, #31
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d068      	beq.n	8000c8a <__aeabi_fmul+0x116>
 8000bb8:	2bff      	cmp	r3, #255	@ 0xff
 8000bba:	d021      	beq.n	8000c00 <__aeabi_fmul+0x8c>
 8000bbc:	2280      	movs	r2, #128	@ 0x80
 8000bbe:	00e4      	lsls	r4, r4, #3
 8000bc0:	04d2      	lsls	r2, r2, #19
 8000bc2:	4314      	orrs	r4, r2
 8000bc4:	4642      	mov	r2, r8
 8000bc6:	3b7f      	subs	r3, #127	@ 0x7f
 8000bc8:	195b      	adds	r3, r3, r5
 8000bca:	2100      	movs	r1, #0
 8000bcc:	1c5d      	adds	r5, r3, #1
 8000bce:	2a0a      	cmp	r2, #10
 8000bd0:	dc2e      	bgt.n	8000c30 <__aeabi_fmul+0xbc>
 8000bd2:	407e      	eors	r6, r7
 8000bd4:	4642      	mov	r2, r8
 8000bd6:	2a02      	cmp	r2, #2
 8000bd8:	dc23      	bgt.n	8000c22 <__aeabi_fmul+0xae>
 8000bda:	3a01      	subs	r2, #1
 8000bdc:	2a01      	cmp	r2, #1
 8000bde:	d900      	bls.n	8000be2 <__aeabi_fmul+0x6e>
 8000be0:	e0bd      	b.n	8000d5e <__aeabi_fmul+0x1ea>
 8000be2:	2902      	cmp	r1, #2
 8000be4:	d06e      	beq.n	8000cc4 <__aeabi_fmul+0x150>
 8000be6:	2901      	cmp	r1, #1
 8000be8:	d12c      	bne.n	8000c44 <__aeabi_fmul+0xd0>
 8000bea:	2000      	movs	r0, #0
 8000bec:	2200      	movs	r2, #0
 8000bee:	05c0      	lsls	r0, r0, #23
 8000bf0:	07f6      	lsls	r6, r6, #31
 8000bf2:	4310      	orrs	r0, r2
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	bce0      	pop	{r5, r6, r7}
 8000bf8:	46ba      	mov	sl, r7
 8000bfa:	46b1      	mov	r9, r6
 8000bfc:	46a8      	mov	r8, r5
 8000bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c00:	002b      	movs	r3, r5
 8000c02:	33ff      	adds	r3, #255	@ 0xff
 8000c04:	2c00      	cmp	r4, #0
 8000c06:	d065      	beq.n	8000cd4 <__aeabi_fmul+0x160>
 8000c08:	2203      	movs	r2, #3
 8000c0a:	4641      	mov	r1, r8
 8000c0c:	4311      	orrs	r1, r2
 8000c0e:	0032      	movs	r2, r6
 8000c10:	3501      	adds	r5, #1
 8000c12:	4688      	mov	r8, r1
 8000c14:	407a      	eors	r2, r7
 8000c16:	35ff      	adds	r5, #255	@ 0xff
 8000c18:	290a      	cmp	r1, #10
 8000c1a:	dd00      	ble.n	8000c1e <__aeabi_fmul+0xaa>
 8000c1c:	e0d8      	b.n	8000dd0 <__aeabi_fmul+0x25c>
 8000c1e:	0016      	movs	r6, r2
 8000c20:	2103      	movs	r1, #3
 8000c22:	4640      	mov	r0, r8
 8000c24:	2201      	movs	r2, #1
 8000c26:	4082      	lsls	r2, r0
 8000c28:	20a6      	movs	r0, #166	@ 0xa6
 8000c2a:	00c0      	lsls	r0, r0, #3
 8000c2c:	4202      	tst	r2, r0
 8000c2e:	d020      	beq.n	8000c72 <__aeabi_fmul+0xfe>
 8000c30:	4653      	mov	r3, sl
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d046      	beq.n	8000cc4 <__aeabi_fmul+0x150>
 8000c36:	2b03      	cmp	r3, #3
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fmul+0xc8>
 8000c3a:	e0bb      	b.n	8000db4 <__aeabi_fmul+0x240>
 8000c3c:	4651      	mov	r1, sl
 8000c3e:	464c      	mov	r4, r9
 8000c40:	2901      	cmp	r1, #1
 8000c42:	d0d2      	beq.n	8000bea <__aeabi_fmul+0x76>
 8000c44:	002b      	movs	r3, r5
 8000c46:	337f      	adds	r3, #127	@ 0x7f
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	dd70      	ble.n	8000d2e <__aeabi_fmul+0x1ba>
 8000c4c:	0762      	lsls	r2, r4, #29
 8000c4e:	d004      	beq.n	8000c5a <__aeabi_fmul+0xe6>
 8000c50:	220f      	movs	r2, #15
 8000c52:	4022      	ands	r2, r4
 8000c54:	2a04      	cmp	r2, #4
 8000c56:	d000      	beq.n	8000c5a <__aeabi_fmul+0xe6>
 8000c58:	3404      	adds	r4, #4
 8000c5a:	0122      	lsls	r2, r4, #4
 8000c5c:	d503      	bpl.n	8000c66 <__aeabi_fmul+0xf2>
 8000c5e:	4b63      	ldr	r3, [pc, #396]	@ (8000dec <__aeabi_fmul+0x278>)
 8000c60:	401c      	ands	r4, r3
 8000c62:	002b      	movs	r3, r5
 8000c64:	3380      	adds	r3, #128	@ 0x80
 8000c66:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c68:	dc2c      	bgt.n	8000cc4 <__aeabi_fmul+0x150>
 8000c6a:	01a2      	lsls	r2, r4, #6
 8000c6c:	0a52      	lsrs	r2, r2, #9
 8000c6e:	b2d8      	uxtb	r0, r3
 8000c70:	e7bd      	b.n	8000bee <__aeabi_fmul+0x7a>
 8000c72:	2090      	movs	r0, #144	@ 0x90
 8000c74:	0080      	lsls	r0, r0, #2
 8000c76:	4202      	tst	r2, r0
 8000c78:	d127      	bne.n	8000cca <__aeabi_fmul+0x156>
 8000c7a:	38b9      	subs	r0, #185	@ 0xb9
 8000c7c:	38ff      	subs	r0, #255	@ 0xff
 8000c7e:	4210      	tst	r0, r2
 8000c80:	d06d      	beq.n	8000d5e <__aeabi_fmul+0x1ea>
 8000c82:	003e      	movs	r6, r7
 8000c84:	46a1      	mov	r9, r4
 8000c86:	468a      	mov	sl, r1
 8000c88:	e7d2      	b.n	8000c30 <__aeabi_fmul+0xbc>
 8000c8a:	2c00      	cmp	r4, #0
 8000c8c:	d141      	bne.n	8000d12 <__aeabi_fmul+0x19e>
 8000c8e:	2301      	movs	r3, #1
 8000c90:	4642      	mov	r2, r8
 8000c92:	431a      	orrs	r2, r3
 8000c94:	4690      	mov	r8, r2
 8000c96:	002b      	movs	r3, r5
 8000c98:	4642      	mov	r2, r8
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	1c5d      	adds	r5, r3, #1
 8000c9e:	2a0a      	cmp	r2, #10
 8000ca0:	dd97      	ble.n	8000bd2 <__aeabi_fmul+0x5e>
 8000ca2:	e7c5      	b.n	8000c30 <__aeabi_fmul+0xbc>
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d126      	bne.n	8000cf6 <__aeabi_fmul+0x182>
 8000ca8:	2304      	movs	r3, #4
 8000caa:	4698      	mov	r8, r3
 8000cac:	3b03      	subs	r3, #3
 8000cae:	2500      	movs	r5, #0
 8000cb0:	469a      	mov	sl, r3
 8000cb2:	e77a      	b.n	8000baa <__aeabi_fmul+0x36>
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d118      	bne.n	8000cea <__aeabi_fmul+0x176>
 8000cb8:	2308      	movs	r3, #8
 8000cba:	4698      	mov	r8, r3
 8000cbc:	3b06      	subs	r3, #6
 8000cbe:	25ff      	movs	r5, #255	@ 0xff
 8000cc0:	469a      	mov	sl, r3
 8000cc2:	e772      	b.n	8000baa <__aeabi_fmul+0x36>
 8000cc4:	20ff      	movs	r0, #255	@ 0xff
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	e791      	b.n	8000bee <__aeabi_fmul+0x7a>
 8000cca:	2280      	movs	r2, #128	@ 0x80
 8000ccc:	2600      	movs	r6, #0
 8000cce:	20ff      	movs	r0, #255	@ 0xff
 8000cd0:	03d2      	lsls	r2, r2, #15
 8000cd2:	e78c      	b.n	8000bee <__aeabi_fmul+0x7a>
 8000cd4:	4641      	mov	r1, r8
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	3501      	adds	r5, #1
 8000cda:	4311      	orrs	r1, r2
 8000cdc:	4688      	mov	r8, r1
 8000cde:	35ff      	adds	r5, #255	@ 0xff
 8000ce0:	290a      	cmp	r1, #10
 8000ce2:	dca5      	bgt.n	8000c30 <__aeabi_fmul+0xbc>
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	407e      	eors	r6, r7
 8000ce8:	e774      	b.n	8000bd4 <__aeabi_fmul+0x60>
 8000cea:	230c      	movs	r3, #12
 8000cec:	4698      	mov	r8, r3
 8000cee:	3b09      	subs	r3, #9
 8000cf0:	25ff      	movs	r5, #255	@ 0xff
 8000cf2:	469a      	mov	sl, r3
 8000cf4:	e759      	b.n	8000baa <__aeabi_fmul+0x36>
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f000 fb48 	bl	800138c <__clzsi2>
 8000cfc:	464a      	mov	r2, r9
 8000cfe:	1f43      	subs	r3, r0, #5
 8000d00:	2576      	movs	r5, #118	@ 0x76
 8000d02:	409a      	lsls	r2, r3
 8000d04:	2300      	movs	r3, #0
 8000d06:	426d      	negs	r5, r5
 8000d08:	4691      	mov	r9, r2
 8000d0a:	4698      	mov	r8, r3
 8000d0c:	469a      	mov	sl, r3
 8000d0e:	1a2d      	subs	r5, r5, r0
 8000d10:	e74b      	b.n	8000baa <__aeabi_fmul+0x36>
 8000d12:	0020      	movs	r0, r4
 8000d14:	f000 fb3a 	bl	800138c <__clzsi2>
 8000d18:	4642      	mov	r2, r8
 8000d1a:	1f43      	subs	r3, r0, #5
 8000d1c:	409c      	lsls	r4, r3
 8000d1e:	1a2b      	subs	r3, r5, r0
 8000d20:	3b76      	subs	r3, #118	@ 0x76
 8000d22:	2100      	movs	r1, #0
 8000d24:	1c5d      	adds	r5, r3, #1
 8000d26:	2a0a      	cmp	r2, #10
 8000d28:	dc00      	bgt.n	8000d2c <__aeabi_fmul+0x1b8>
 8000d2a:	e752      	b.n	8000bd2 <__aeabi_fmul+0x5e>
 8000d2c:	e780      	b.n	8000c30 <__aeabi_fmul+0xbc>
 8000d2e:	2201      	movs	r2, #1
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	2b1b      	cmp	r3, #27
 8000d34:	dd00      	ble.n	8000d38 <__aeabi_fmul+0x1c4>
 8000d36:	e758      	b.n	8000bea <__aeabi_fmul+0x76>
 8000d38:	359e      	adds	r5, #158	@ 0x9e
 8000d3a:	0022      	movs	r2, r4
 8000d3c:	40ac      	lsls	r4, r5
 8000d3e:	40da      	lsrs	r2, r3
 8000d40:	1e63      	subs	r3, r4, #1
 8000d42:	419c      	sbcs	r4, r3
 8000d44:	4322      	orrs	r2, r4
 8000d46:	0753      	lsls	r3, r2, #29
 8000d48:	d004      	beq.n	8000d54 <__aeabi_fmul+0x1e0>
 8000d4a:	230f      	movs	r3, #15
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	d000      	beq.n	8000d54 <__aeabi_fmul+0x1e0>
 8000d52:	3204      	adds	r2, #4
 8000d54:	0153      	lsls	r3, r2, #5
 8000d56:	d537      	bpl.n	8000dc8 <__aeabi_fmul+0x254>
 8000d58:	2001      	movs	r0, #1
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	e747      	b.n	8000bee <__aeabi_fmul+0x7a>
 8000d5e:	0c21      	lsrs	r1, r4, #16
 8000d60:	464a      	mov	r2, r9
 8000d62:	0424      	lsls	r4, r4, #16
 8000d64:	0c24      	lsrs	r4, r4, #16
 8000d66:	0027      	movs	r7, r4
 8000d68:	0c10      	lsrs	r0, r2, #16
 8000d6a:	0412      	lsls	r2, r2, #16
 8000d6c:	0c12      	lsrs	r2, r2, #16
 8000d6e:	4344      	muls	r4, r0
 8000d70:	4357      	muls	r7, r2
 8000d72:	4348      	muls	r0, r1
 8000d74:	4351      	muls	r1, r2
 8000d76:	0c3a      	lsrs	r2, r7, #16
 8000d78:	1909      	adds	r1, r1, r4
 8000d7a:	1852      	adds	r2, r2, r1
 8000d7c:	4294      	cmp	r4, r2
 8000d7e:	d903      	bls.n	8000d88 <__aeabi_fmul+0x214>
 8000d80:	2180      	movs	r1, #128	@ 0x80
 8000d82:	0249      	lsls	r1, r1, #9
 8000d84:	468c      	mov	ip, r1
 8000d86:	4460      	add	r0, ip
 8000d88:	043f      	lsls	r7, r7, #16
 8000d8a:	0411      	lsls	r1, r2, #16
 8000d8c:	0c3f      	lsrs	r7, r7, #16
 8000d8e:	19c9      	adds	r1, r1, r7
 8000d90:	018c      	lsls	r4, r1, #6
 8000d92:	1e67      	subs	r7, r4, #1
 8000d94:	41bc      	sbcs	r4, r7
 8000d96:	0c12      	lsrs	r2, r2, #16
 8000d98:	0e89      	lsrs	r1, r1, #26
 8000d9a:	1812      	adds	r2, r2, r0
 8000d9c:	430c      	orrs	r4, r1
 8000d9e:	0192      	lsls	r2, r2, #6
 8000da0:	4314      	orrs	r4, r2
 8000da2:	0112      	lsls	r2, r2, #4
 8000da4:	d50e      	bpl.n	8000dc4 <__aeabi_fmul+0x250>
 8000da6:	2301      	movs	r3, #1
 8000da8:	0862      	lsrs	r2, r4, #1
 8000daa:	401c      	ands	r4, r3
 8000dac:	4314      	orrs	r4, r2
 8000dae:	e749      	b.n	8000c44 <__aeabi_fmul+0xd0>
 8000db0:	003e      	movs	r6, r7
 8000db2:	46a1      	mov	r9, r4
 8000db4:	2280      	movs	r2, #128	@ 0x80
 8000db6:	464b      	mov	r3, r9
 8000db8:	03d2      	lsls	r2, r2, #15
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	0252      	lsls	r2, r2, #9
 8000dbe:	20ff      	movs	r0, #255	@ 0xff
 8000dc0:	0a52      	lsrs	r2, r2, #9
 8000dc2:	e714      	b.n	8000bee <__aeabi_fmul+0x7a>
 8000dc4:	001d      	movs	r5, r3
 8000dc6:	e73d      	b.n	8000c44 <__aeabi_fmul+0xd0>
 8000dc8:	0192      	lsls	r2, r2, #6
 8000dca:	2000      	movs	r0, #0
 8000dcc:	0a52      	lsrs	r2, r2, #9
 8000dce:	e70e      	b.n	8000bee <__aeabi_fmul+0x7a>
 8000dd0:	290f      	cmp	r1, #15
 8000dd2:	d1ed      	bne.n	8000db0 <__aeabi_fmul+0x23c>
 8000dd4:	2280      	movs	r2, #128	@ 0x80
 8000dd6:	464b      	mov	r3, r9
 8000dd8:	03d2      	lsls	r2, r2, #15
 8000dda:	4213      	tst	r3, r2
 8000ddc:	d0ea      	beq.n	8000db4 <__aeabi_fmul+0x240>
 8000dde:	4214      	tst	r4, r2
 8000de0:	d1e8      	bne.n	8000db4 <__aeabi_fmul+0x240>
 8000de2:	003e      	movs	r6, r7
 8000de4:	20ff      	movs	r0, #255	@ 0xff
 8000de6:	4322      	orrs	r2, r4
 8000de8:	e701      	b.n	8000bee <__aeabi_fmul+0x7a>
 8000dea:	46c0      	nop			@ (mov r8, r8)
 8000dec:	f7ffffff 	.word	0xf7ffffff

08000df0 <__aeabi_fsub>:
 8000df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000df2:	4647      	mov	r7, r8
 8000df4:	46ce      	mov	lr, r9
 8000df6:	024e      	lsls	r6, r1, #9
 8000df8:	0243      	lsls	r3, r0, #9
 8000dfa:	0045      	lsls	r5, r0, #1
 8000dfc:	0a72      	lsrs	r2, r6, #9
 8000dfe:	0fc4      	lsrs	r4, r0, #31
 8000e00:	0048      	lsls	r0, r1, #1
 8000e02:	b580      	push	{r7, lr}
 8000e04:	4694      	mov	ip, r2
 8000e06:	0a5f      	lsrs	r7, r3, #9
 8000e08:	0e2d      	lsrs	r5, r5, #24
 8000e0a:	099b      	lsrs	r3, r3, #6
 8000e0c:	0e00      	lsrs	r0, r0, #24
 8000e0e:	0fc9      	lsrs	r1, r1, #31
 8000e10:	09b6      	lsrs	r6, r6, #6
 8000e12:	28ff      	cmp	r0, #255	@ 0xff
 8000e14:	d024      	beq.n	8000e60 <__aeabi_fsub+0x70>
 8000e16:	2201      	movs	r2, #1
 8000e18:	4051      	eors	r1, r2
 8000e1a:	1a2a      	subs	r2, r5, r0
 8000e1c:	428c      	cmp	r4, r1
 8000e1e:	d00f      	beq.n	8000e40 <__aeabi_fsub+0x50>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	dc00      	bgt.n	8000e26 <__aeabi_fsub+0x36>
 8000e24:	e16a      	b.n	80010fc <__aeabi_fsub+0x30c>
 8000e26:	2800      	cmp	r0, #0
 8000e28:	d135      	bne.n	8000e96 <__aeabi_fsub+0xa6>
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_fsub+0x40>
 8000e2e:	e0a2      	b.n	8000f76 <__aeabi_fsub+0x186>
 8000e30:	1e51      	subs	r1, r2, #1
 8000e32:	2a01      	cmp	r2, #1
 8000e34:	d100      	bne.n	8000e38 <__aeabi_fsub+0x48>
 8000e36:	e124      	b.n	8001082 <__aeabi_fsub+0x292>
 8000e38:	2aff      	cmp	r2, #255	@ 0xff
 8000e3a:	d021      	beq.n	8000e80 <__aeabi_fsub+0x90>
 8000e3c:	000a      	movs	r2, r1
 8000e3e:	e02f      	b.n	8000ea0 <__aeabi_fsub+0xb0>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	dc00      	bgt.n	8000e46 <__aeabi_fsub+0x56>
 8000e44:	e167      	b.n	8001116 <__aeabi_fsub+0x326>
 8000e46:	2800      	cmp	r0, #0
 8000e48:	d05e      	beq.n	8000f08 <__aeabi_fsub+0x118>
 8000e4a:	2dff      	cmp	r5, #255	@ 0xff
 8000e4c:	d018      	beq.n	8000e80 <__aeabi_fsub+0x90>
 8000e4e:	2180      	movs	r1, #128	@ 0x80
 8000e50:	04c9      	lsls	r1, r1, #19
 8000e52:	430e      	orrs	r6, r1
 8000e54:	2a1b      	cmp	r2, #27
 8000e56:	dc00      	bgt.n	8000e5a <__aeabi_fsub+0x6a>
 8000e58:	e076      	b.n	8000f48 <__aeabi_fsub+0x158>
 8000e5a:	002a      	movs	r2, r5
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	e032      	b.n	8000ec6 <__aeabi_fsub+0xd6>
 8000e60:	002a      	movs	r2, r5
 8000e62:	3aff      	subs	r2, #255	@ 0xff
 8000e64:	4691      	mov	r9, r2
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d042      	beq.n	8000ef0 <__aeabi_fsub+0x100>
 8000e6a:	428c      	cmp	r4, r1
 8000e6c:	d055      	beq.n	8000f1a <__aeabi_fsub+0x12a>
 8000e6e:	464a      	mov	r2, r9
 8000e70:	2a00      	cmp	r2, #0
 8000e72:	d100      	bne.n	8000e76 <__aeabi_fsub+0x86>
 8000e74:	e09c      	b.n	8000fb0 <__aeabi_fsub+0x1c0>
 8000e76:	2d00      	cmp	r5, #0
 8000e78:	d100      	bne.n	8000e7c <__aeabi_fsub+0x8c>
 8000e7a:	e077      	b.n	8000f6c <__aeabi_fsub+0x17c>
 8000e7c:	000c      	movs	r4, r1
 8000e7e:	0033      	movs	r3, r6
 8000e80:	08db      	lsrs	r3, r3, #3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d100      	bne.n	8000e88 <__aeabi_fsub+0x98>
 8000e86:	e06e      	b.n	8000f66 <__aeabi_fsub+0x176>
 8000e88:	2280      	movs	r2, #128	@ 0x80
 8000e8a:	03d2      	lsls	r2, r2, #15
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	025b      	lsls	r3, r3, #9
 8000e90:	20ff      	movs	r0, #255	@ 0xff
 8000e92:	0a5b      	lsrs	r3, r3, #9
 8000e94:	e024      	b.n	8000ee0 <__aeabi_fsub+0xf0>
 8000e96:	2dff      	cmp	r5, #255	@ 0xff
 8000e98:	d0f2      	beq.n	8000e80 <__aeabi_fsub+0x90>
 8000e9a:	2180      	movs	r1, #128	@ 0x80
 8000e9c:	04c9      	lsls	r1, r1, #19
 8000e9e:	430e      	orrs	r6, r1
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	2a1b      	cmp	r2, #27
 8000ea4:	dc08      	bgt.n	8000eb8 <__aeabi_fsub+0xc8>
 8000ea6:	0031      	movs	r1, r6
 8000ea8:	2020      	movs	r0, #32
 8000eaa:	40d1      	lsrs	r1, r2
 8000eac:	1a82      	subs	r2, r0, r2
 8000eae:	4096      	lsls	r6, r2
 8000eb0:	0032      	movs	r2, r6
 8000eb2:	1e50      	subs	r0, r2, #1
 8000eb4:	4182      	sbcs	r2, r0
 8000eb6:	4311      	orrs	r1, r2
 8000eb8:	1a5b      	subs	r3, r3, r1
 8000eba:	015a      	lsls	r2, r3, #5
 8000ebc:	d460      	bmi.n	8000f80 <__aeabi_fsub+0x190>
 8000ebe:	2107      	movs	r1, #7
 8000ec0:	002a      	movs	r2, r5
 8000ec2:	4019      	ands	r1, r3
 8000ec4:	d057      	beq.n	8000f76 <__aeabi_fsub+0x186>
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	4019      	ands	r1, r3
 8000eca:	2904      	cmp	r1, #4
 8000ecc:	d000      	beq.n	8000ed0 <__aeabi_fsub+0xe0>
 8000ece:	3304      	adds	r3, #4
 8000ed0:	0159      	lsls	r1, r3, #5
 8000ed2:	d550      	bpl.n	8000f76 <__aeabi_fsub+0x186>
 8000ed4:	1c50      	adds	r0, r2, #1
 8000ed6:	2afe      	cmp	r2, #254	@ 0xfe
 8000ed8:	d045      	beq.n	8000f66 <__aeabi_fsub+0x176>
 8000eda:	019b      	lsls	r3, r3, #6
 8000edc:	b2c0      	uxtb	r0, r0
 8000ede:	0a5b      	lsrs	r3, r3, #9
 8000ee0:	05c0      	lsls	r0, r0, #23
 8000ee2:	4318      	orrs	r0, r3
 8000ee4:	07e4      	lsls	r4, r4, #31
 8000ee6:	4320      	orrs	r0, r4
 8000ee8:	bcc0      	pop	{r6, r7}
 8000eea:	46b9      	mov	r9, r7
 8000eec:	46b0      	mov	r8, r6
 8000eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	4051      	eors	r1, r2
 8000ef4:	428c      	cmp	r4, r1
 8000ef6:	d1ba      	bne.n	8000e6e <__aeabi_fsub+0x7e>
 8000ef8:	464a      	mov	r2, r9
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	d010      	beq.n	8000f20 <__aeabi_fsub+0x130>
 8000efe:	2d00      	cmp	r5, #0
 8000f00:	d100      	bne.n	8000f04 <__aeabi_fsub+0x114>
 8000f02:	e098      	b.n	8001036 <__aeabi_fsub+0x246>
 8000f04:	2300      	movs	r3, #0
 8000f06:	e7bb      	b.n	8000e80 <__aeabi_fsub+0x90>
 8000f08:	2e00      	cmp	r6, #0
 8000f0a:	d034      	beq.n	8000f76 <__aeabi_fsub+0x186>
 8000f0c:	1e51      	subs	r1, r2, #1
 8000f0e:	2a01      	cmp	r2, #1
 8000f10:	d06e      	beq.n	8000ff0 <__aeabi_fsub+0x200>
 8000f12:	2aff      	cmp	r2, #255	@ 0xff
 8000f14:	d0b4      	beq.n	8000e80 <__aeabi_fsub+0x90>
 8000f16:	000a      	movs	r2, r1
 8000f18:	e79c      	b.n	8000e54 <__aeabi_fsub+0x64>
 8000f1a:	2a00      	cmp	r2, #0
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_fsub+0x130>
 8000f1e:	e088      	b.n	8001032 <__aeabi_fsub+0x242>
 8000f20:	20fe      	movs	r0, #254	@ 0xfe
 8000f22:	1c6a      	adds	r2, r5, #1
 8000f24:	4210      	tst	r0, r2
 8000f26:	d000      	beq.n	8000f2a <__aeabi_fsub+0x13a>
 8000f28:	e092      	b.n	8001050 <__aeabi_fsub+0x260>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d000      	beq.n	8000f30 <__aeabi_fsub+0x140>
 8000f2e:	e0a4      	b.n	800107a <__aeabi_fsub+0x28a>
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d100      	bne.n	8000f36 <__aeabi_fsub+0x146>
 8000f34:	e0cb      	b.n	80010ce <__aeabi_fsub+0x2de>
 8000f36:	2e00      	cmp	r6, #0
 8000f38:	d000      	beq.n	8000f3c <__aeabi_fsub+0x14c>
 8000f3a:	e0ca      	b.n	80010d2 <__aeabi_fsub+0x2e2>
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	08db      	lsrs	r3, r3, #3
 8000f40:	025b      	lsls	r3, r3, #9
 8000f42:	0a5b      	lsrs	r3, r3, #9
 8000f44:	b2d0      	uxtb	r0, r2
 8000f46:	e7cb      	b.n	8000ee0 <__aeabi_fsub+0xf0>
 8000f48:	0031      	movs	r1, r6
 8000f4a:	2020      	movs	r0, #32
 8000f4c:	40d1      	lsrs	r1, r2
 8000f4e:	1a82      	subs	r2, r0, r2
 8000f50:	4096      	lsls	r6, r2
 8000f52:	0032      	movs	r2, r6
 8000f54:	1e50      	subs	r0, r2, #1
 8000f56:	4182      	sbcs	r2, r0
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	189b      	adds	r3, r3, r2
 8000f5c:	015a      	lsls	r2, r3, #5
 8000f5e:	d5ae      	bpl.n	8000ebe <__aeabi_fsub+0xce>
 8000f60:	1c6a      	adds	r2, r5, #1
 8000f62:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f64:	d14a      	bne.n	8000ffc <__aeabi_fsub+0x20c>
 8000f66:	20ff      	movs	r0, #255	@ 0xff
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e7b9      	b.n	8000ee0 <__aeabi_fsub+0xf0>
 8000f6c:	22ff      	movs	r2, #255	@ 0xff
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d14b      	bne.n	800100a <__aeabi_fsub+0x21a>
 8000f72:	000c      	movs	r4, r1
 8000f74:	0033      	movs	r3, r6
 8000f76:	08db      	lsrs	r3, r3, #3
 8000f78:	2aff      	cmp	r2, #255	@ 0xff
 8000f7a:	d100      	bne.n	8000f7e <__aeabi_fsub+0x18e>
 8000f7c:	e781      	b.n	8000e82 <__aeabi_fsub+0x92>
 8000f7e:	e7df      	b.n	8000f40 <__aeabi_fsub+0x150>
 8000f80:	019f      	lsls	r7, r3, #6
 8000f82:	09bf      	lsrs	r7, r7, #6
 8000f84:	0038      	movs	r0, r7
 8000f86:	f000 fa01 	bl	800138c <__clzsi2>
 8000f8a:	3805      	subs	r0, #5
 8000f8c:	4087      	lsls	r7, r0
 8000f8e:	4285      	cmp	r5, r0
 8000f90:	dc21      	bgt.n	8000fd6 <__aeabi_fsub+0x1e6>
 8000f92:	003b      	movs	r3, r7
 8000f94:	2120      	movs	r1, #32
 8000f96:	1b42      	subs	r2, r0, r5
 8000f98:	3201      	adds	r2, #1
 8000f9a:	40d3      	lsrs	r3, r2
 8000f9c:	1a8a      	subs	r2, r1, r2
 8000f9e:	4097      	lsls	r7, r2
 8000fa0:	1e7a      	subs	r2, r7, #1
 8000fa2:	4197      	sbcs	r7, r2
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	433b      	orrs	r3, r7
 8000fa8:	0759      	lsls	r1, r3, #29
 8000faa:	d000      	beq.n	8000fae <__aeabi_fsub+0x1be>
 8000fac:	e78b      	b.n	8000ec6 <__aeabi_fsub+0xd6>
 8000fae:	e78f      	b.n	8000ed0 <__aeabi_fsub+0xe0>
 8000fb0:	20fe      	movs	r0, #254	@ 0xfe
 8000fb2:	1c6a      	adds	r2, r5, #1
 8000fb4:	4210      	tst	r0, r2
 8000fb6:	d112      	bne.n	8000fde <__aeabi_fsub+0x1ee>
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d152      	bne.n	8001062 <__aeabi_fsub+0x272>
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d07c      	beq.n	80010ba <__aeabi_fsub+0x2ca>
 8000fc0:	2e00      	cmp	r6, #0
 8000fc2:	d0bb      	beq.n	8000f3c <__aeabi_fsub+0x14c>
 8000fc4:	1b9a      	subs	r2, r3, r6
 8000fc6:	0150      	lsls	r0, r2, #5
 8000fc8:	d400      	bmi.n	8000fcc <__aeabi_fsub+0x1dc>
 8000fca:	e08b      	b.n	80010e4 <__aeabi_fsub+0x2f4>
 8000fcc:	2401      	movs	r4, #1
 8000fce:	2200      	movs	r2, #0
 8000fd0:	1af3      	subs	r3, r6, r3
 8000fd2:	400c      	ands	r4, r1
 8000fd4:	e7e8      	b.n	8000fa8 <__aeabi_fsub+0x1b8>
 8000fd6:	4b56      	ldr	r3, [pc, #344]	@ (8001130 <__aeabi_fsub+0x340>)
 8000fd8:	1a2a      	subs	r2, r5, r0
 8000fda:	403b      	ands	r3, r7
 8000fdc:	e7e4      	b.n	8000fa8 <__aeabi_fsub+0x1b8>
 8000fde:	1b9f      	subs	r7, r3, r6
 8000fe0:	017a      	lsls	r2, r7, #5
 8000fe2:	d446      	bmi.n	8001072 <__aeabi_fsub+0x282>
 8000fe4:	2f00      	cmp	r7, #0
 8000fe6:	d1cd      	bne.n	8000f84 <__aeabi_fsub+0x194>
 8000fe8:	2400      	movs	r4, #0
 8000fea:	2000      	movs	r0, #0
 8000fec:	2300      	movs	r3, #0
 8000fee:	e777      	b.n	8000ee0 <__aeabi_fsub+0xf0>
 8000ff0:	199b      	adds	r3, r3, r6
 8000ff2:	2501      	movs	r5, #1
 8000ff4:	3201      	adds	r2, #1
 8000ff6:	0159      	lsls	r1, r3, #5
 8000ff8:	d400      	bmi.n	8000ffc <__aeabi_fsub+0x20c>
 8000ffa:	e760      	b.n	8000ebe <__aeabi_fsub+0xce>
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	484d      	ldr	r0, [pc, #308]	@ (8001134 <__aeabi_fsub+0x344>)
 8001000:	4019      	ands	r1, r3
 8001002:	085b      	lsrs	r3, r3, #1
 8001004:	4003      	ands	r3, r0
 8001006:	430b      	orrs	r3, r1
 8001008:	e7ce      	b.n	8000fa8 <__aeabi_fsub+0x1b8>
 800100a:	1e57      	subs	r7, r2, #1
 800100c:	2a01      	cmp	r2, #1
 800100e:	d05a      	beq.n	80010c6 <__aeabi_fsub+0x2d6>
 8001010:	000c      	movs	r4, r1
 8001012:	2aff      	cmp	r2, #255	@ 0xff
 8001014:	d033      	beq.n	800107e <__aeabi_fsub+0x28e>
 8001016:	2201      	movs	r2, #1
 8001018:	2f1b      	cmp	r7, #27
 800101a:	dc07      	bgt.n	800102c <__aeabi_fsub+0x23c>
 800101c:	2120      	movs	r1, #32
 800101e:	1bc9      	subs	r1, r1, r7
 8001020:	001a      	movs	r2, r3
 8001022:	408b      	lsls	r3, r1
 8001024:	40fa      	lsrs	r2, r7
 8001026:	1e59      	subs	r1, r3, #1
 8001028:	418b      	sbcs	r3, r1
 800102a:	431a      	orrs	r2, r3
 800102c:	0005      	movs	r5, r0
 800102e:	1ab3      	subs	r3, r6, r2
 8001030:	e743      	b.n	8000eba <__aeabi_fsub+0xca>
 8001032:	2d00      	cmp	r5, #0
 8001034:	d123      	bne.n	800107e <__aeabi_fsub+0x28e>
 8001036:	22ff      	movs	r2, #255	@ 0xff
 8001038:	2b00      	cmp	r3, #0
 800103a:	d09b      	beq.n	8000f74 <__aeabi_fsub+0x184>
 800103c:	1e51      	subs	r1, r2, #1
 800103e:	2a01      	cmp	r2, #1
 8001040:	d0d6      	beq.n	8000ff0 <__aeabi_fsub+0x200>
 8001042:	2aff      	cmp	r2, #255	@ 0xff
 8001044:	d01b      	beq.n	800107e <__aeabi_fsub+0x28e>
 8001046:	291b      	cmp	r1, #27
 8001048:	dd2c      	ble.n	80010a4 <__aeabi_fsub+0x2b4>
 800104a:	0002      	movs	r2, r0
 800104c:	1c73      	adds	r3, r6, #1
 800104e:	e73a      	b.n	8000ec6 <__aeabi_fsub+0xd6>
 8001050:	2aff      	cmp	r2, #255	@ 0xff
 8001052:	d088      	beq.n	8000f66 <__aeabi_fsub+0x176>
 8001054:	199b      	adds	r3, r3, r6
 8001056:	085b      	lsrs	r3, r3, #1
 8001058:	0759      	lsls	r1, r3, #29
 800105a:	d000      	beq.n	800105e <__aeabi_fsub+0x26e>
 800105c:	e733      	b.n	8000ec6 <__aeabi_fsub+0xd6>
 800105e:	08db      	lsrs	r3, r3, #3
 8001060:	e76e      	b.n	8000f40 <__aeabi_fsub+0x150>
 8001062:	2b00      	cmp	r3, #0
 8001064:	d110      	bne.n	8001088 <__aeabi_fsub+0x298>
 8001066:	2e00      	cmp	r6, #0
 8001068:	d043      	beq.n	80010f2 <__aeabi_fsub+0x302>
 800106a:	2401      	movs	r4, #1
 800106c:	0033      	movs	r3, r6
 800106e:	400c      	ands	r4, r1
 8001070:	e706      	b.n	8000e80 <__aeabi_fsub+0x90>
 8001072:	2401      	movs	r4, #1
 8001074:	1af7      	subs	r7, r6, r3
 8001076:	400c      	ands	r4, r1
 8001078:	e784      	b.n	8000f84 <__aeabi_fsub+0x194>
 800107a:	2b00      	cmp	r3, #0
 800107c:	d104      	bne.n	8001088 <__aeabi_fsub+0x298>
 800107e:	0033      	movs	r3, r6
 8001080:	e6fe      	b.n	8000e80 <__aeabi_fsub+0x90>
 8001082:	2501      	movs	r5, #1
 8001084:	1b9b      	subs	r3, r3, r6
 8001086:	e718      	b.n	8000eba <__aeabi_fsub+0xca>
 8001088:	2e00      	cmp	r6, #0
 800108a:	d100      	bne.n	800108e <__aeabi_fsub+0x29e>
 800108c:	e6f8      	b.n	8000e80 <__aeabi_fsub+0x90>
 800108e:	2280      	movs	r2, #128	@ 0x80
 8001090:	03d2      	lsls	r2, r2, #15
 8001092:	4297      	cmp	r7, r2
 8001094:	d304      	bcc.n	80010a0 <__aeabi_fsub+0x2b0>
 8001096:	4594      	cmp	ip, r2
 8001098:	d202      	bcs.n	80010a0 <__aeabi_fsub+0x2b0>
 800109a:	2401      	movs	r4, #1
 800109c:	0033      	movs	r3, r6
 800109e:	400c      	ands	r4, r1
 80010a0:	08db      	lsrs	r3, r3, #3
 80010a2:	e6f1      	b.n	8000e88 <__aeabi_fsub+0x98>
 80010a4:	001a      	movs	r2, r3
 80010a6:	2520      	movs	r5, #32
 80010a8:	40ca      	lsrs	r2, r1
 80010aa:	1a69      	subs	r1, r5, r1
 80010ac:	408b      	lsls	r3, r1
 80010ae:	1e59      	subs	r1, r3, #1
 80010b0:	418b      	sbcs	r3, r1
 80010b2:	4313      	orrs	r3, r2
 80010b4:	0005      	movs	r5, r0
 80010b6:	199b      	adds	r3, r3, r6
 80010b8:	e750      	b.n	8000f5c <__aeabi_fsub+0x16c>
 80010ba:	2e00      	cmp	r6, #0
 80010bc:	d094      	beq.n	8000fe8 <__aeabi_fsub+0x1f8>
 80010be:	2401      	movs	r4, #1
 80010c0:	0033      	movs	r3, r6
 80010c2:	400c      	ands	r4, r1
 80010c4:	e73a      	b.n	8000f3c <__aeabi_fsub+0x14c>
 80010c6:	000c      	movs	r4, r1
 80010c8:	2501      	movs	r5, #1
 80010ca:	1af3      	subs	r3, r6, r3
 80010cc:	e6f5      	b.n	8000eba <__aeabi_fsub+0xca>
 80010ce:	0033      	movs	r3, r6
 80010d0:	e734      	b.n	8000f3c <__aeabi_fsub+0x14c>
 80010d2:	199b      	adds	r3, r3, r6
 80010d4:	2200      	movs	r2, #0
 80010d6:	0159      	lsls	r1, r3, #5
 80010d8:	d5c1      	bpl.n	800105e <__aeabi_fsub+0x26e>
 80010da:	4a15      	ldr	r2, [pc, #84]	@ (8001130 <__aeabi_fsub+0x340>)
 80010dc:	4013      	ands	r3, r2
 80010de:	08db      	lsrs	r3, r3, #3
 80010e0:	2201      	movs	r2, #1
 80010e2:	e72d      	b.n	8000f40 <__aeabi_fsub+0x150>
 80010e4:	2a00      	cmp	r2, #0
 80010e6:	d100      	bne.n	80010ea <__aeabi_fsub+0x2fa>
 80010e8:	e77e      	b.n	8000fe8 <__aeabi_fsub+0x1f8>
 80010ea:	0013      	movs	r3, r2
 80010ec:	2200      	movs	r2, #0
 80010ee:	08db      	lsrs	r3, r3, #3
 80010f0:	e726      	b.n	8000f40 <__aeabi_fsub+0x150>
 80010f2:	2380      	movs	r3, #128	@ 0x80
 80010f4:	2400      	movs	r4, #0
 80010f6:	20ff      	movs	r0, #255	@ 0xff
 80010f8:	03db      	lsls	r3, r3, #15
 80010fa:	e6f1      	b.n	8000ee0 <__aeabi_fsub+0xf0>
 80010fc:	2a00      	cmp	r2, #0
 80010fe:	d100      	bne.n	8001102 <__aeabi_fsub+0x312>
 8001100:	e756      	b.n	8000fb0 <__aeabi_fsub+0x1c0>
 8001102:	1b47      	subs	r7, r0, r5
 8001104:	003a      	movs	r2, r7
 8001106:	2d00      	cmp	r5, #0
 8001108:	d100      	bne.n	800110c <__aeabi_fsub+0x31c>
 800110a:	e730      	b.n	8000f6e <__aeabi_fsub+0x17e>
 800110c:	2280      	movs	r2, #128	@ 0x80
 800110e:	04d2      	lsls	r2, r2, #19
 8001110:	000c      	movs	r4, r1
 8001112:	4313      	orrs	r3, r2
 8001114:	e77f      	b.n	8001016 <__aeabi_fsub+0x226>
 8001116:	2a00      	cmp	r2, #0
 8001118:	d100      	bne.n	800111c <__aeabi_fsub+0x32c>
 800111a:	e701      	b.n	8000f20 <__aeabi_fsub+0x130>
 800111c:	1b41      	subs	r1, r0, r5
 800111e:	2d00      	cmp	r5, #0
 8001120:	d101      	bne.n	8001126 <__aeabi_fsub+0x336>
 8001122:	000a      	movs	r2, r1
 8001124:	e788      	b.n	8001038 <__aeabi_fsub+0x248>
 8001126:	2280      	movs	r2, #128	@ 0x80
 8001128:	04d2      	lsls	r2, r2, #19
 800112a:	4313      	orrs	r3, r2
 800112c:	e78b      	b.n	8001046 <__aeabi_fsub+0x256>
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	fbffffff 	.word	0xfbffffff
 8001134:	7dffffff 	.word	0x7dffffff

08001138 <__aeabi_f2iz>:
 8001138:	0241      	lsls	r1, r0, #9
 800113a:	0042      	lsls	r2, r0, #1
 800113c:	0fc3      	lsrs	r3, r0, #31
 800113e:	0a49      	lsrs	r1, r1, #9
 8001140:	2000      	movs	r0, #0
 8001142:	0e12      	lsrs	r2, r2, #24
 8001144:	2a7e      	cmp	r2, #126	@ 0x7e
 8001146:	dd03      	ble.n	8001150 <__aeabi_f2iz+0x18>
 8001148:	2a9d      	cmp	r2, #157	@ 0x9d
 800114a:	dd02      	ble.n	8001152 <__aeabi_f2iz+0x1a>
 800114c:	4a09      	ldr	r2, [pc, #36]	@ (8001174 <__aeabi_f2iz+0x3c>)
 800114e:	1898      	adds	r0, r3, r2
 8001150:	4770      	bx	lr
 8001152:	2080      	movs	r0, #128	@ 0x80
 8001154:	0400      	lsls	r0, r0, #16
 8001156:	4301      	orrs	r1, r0
 8001158:	2a95      	cmp	r2, #149	@ 0x95
 800115a:	dc07      	bgt.n	800116c <__aeabi_f2iz+0x34>
 800115c:	2096      	movs	r0, #150	@ 0x96
 800115e:	1a82      	subs	r2, r0, r2
 8001160:	40d1      	lsrs	r1, r2
 8001162:	4248      	negs	r0, r1
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1f3      	bne.n	8001150 <__aeabi_f2iz+0x18>
 8001168:	0008      	movs	r0, r1
 800116a:	e7f1      	b.n	8001150 <__aeabi_f2iz+0x18>
 800116c:	3a96      	subs	r2, #150	@ 0x96
 800116e:	4091      	lsls	r1, r2
 8001170:	e7f7      	b.n	8001162 <__aeabi_f2iz+0x2a>
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	7fffffff 	.word	0x7fffffff

08001178 <__aeabi_i2f>:
 8001178:	b570      	push	{r4, r5, r6, lr}
 800117a:	2800      	cmp	r0, #0
 800117c:	d013      	beq.n	80011a6 <__aeabi_i2f+0x2e>
 800117e:	17c3      	asrs	r3, r0, #31
 8001180:	18c5      	adds	r5, r0, r3
 8001182:	405d      	eors	r5, r3
 8001184:	0fc4      	lsrs	r4, r0, #31
 8001186:	0028      	movs	r0, r5
 8001188:	f000 f900 	bl	800138c <__clzsi2>
 800118c:	239e      	movs	r3, #158	@ 0x9e
 800118e:	0001      	movs	r1, r0
 8001190:	1a1b      	subs	r3, r3, r0
 8001192:	2b96      	cmp	r3, #150	@ 0x96
 8001194:	dc0f      	bgt.n	80011b6 <__aeabi_i2f+0x3e>
 8001196:	2808      	cmp	r0, #8
 8001198:	d034      	beq.n	8001204 <__aeabi_i2f+0x8c>
 800119a:	3908      	subs	r1, #8
 800119c:	408d      	lsls	r5, r1
 800119e:	026d      	lsls	r5, r5, #9
 80011a0:	0a6d      	lsrs	r5, r5, #9
 80011a2:	b2d8      	uxtb	r0, r3
 80011a4:	e002      	b.n	80011ac <__aeabi_i2f+0x34>
 80011a6:	2400      	movs	r4, #0
 80011a8:	2000      	movs	r0, #0
 80011aa:	2500      	movs	r5, #0
 80011ac:	05c0      	lsls	r0, r0, #23
 80011ae:	4328      	orrs	r0, r5
 80011b0:	07e4      	lsls	r4, r4, #31
 80011b2:	4320      	orrs	r0, r4
 80011b4:	bd70      	pop	{r4, r5, r6, pc}
 80011b6:	2b99      	cmp	r3, #153	@ 0x99
 80011b8:	dc16      	bgt.n	80011e8 <__aeabi_i2f+0x70>
 80011ba:	1f42      	subs	r2, r0, #5
 80011bc:	2805      	cmp	r0, #5
 80011be:	d000      	beq.n	80011c2 <__aeabi_i2f+0x4a>
 80011c0:	4095      	lsls	r5, r2
 80011c2:	002a      	movs	r2, r5
 80011c4:	4811      	ldr	r0, [pc, #68]	@ (800120c <__aeabi_i2f+0x94>)
 80011c6:	4002      	ands	r2, r0
 80011c8:	076e      	lsls	r6, r5, #29
 80011ca:	d009      	beq.n	80011e0 <__aeabi_i2f+0x68>
 80011cc:	260f      	movs	r6, #15
 80011ce:	4035      	ands	r5, r6
 80011d0:	2d04      	cmp	r5, #4
 80011d2:	d005      	beq.n	80011e0 <__aeabi_i2f+0x68>
 80011d4:	3204      	adds	r2, #4
 80011d6:	0155      	lsls	r5, r2, #5
 80011d8:	d502      	bpl.n	80011e0 <__aeabi_i2f+0x68>
 80011da:	239f      	movs	r3, #159	@ 0x9f
 80011dc:	4002      	ands	r2, r0
 80011de:	1a5b      	subs	r3, r3, r1
 80011e0:	0192      	lsls	r2, r2, #6
 80011e2:	0a55      	lsrs	r5, r2, #9
 80011e4:	b2d8      	uxtb	r0, r3
 80011e6:	e7e1      	b.n	80011ac <__aeabi_i2f+0x34>
 80011e8:	2205      	movs	r2, #5
 80011ea:	1a12      	subs	r2, r2, r0
 80011ec:	0028      	movs	r0, r5
 80011ee:	40d0      	lsrs	r0, r2
 80011f0:	0002      	movs	r2, r0
 80011f2:	0008      	movs	r0, r1
 80011f4:	301b      	adds	r0, #27
 80011f6:	4085      	lsls	r5, r0
 80011f8:	0028      	movs	r0, r5
 80011fa:	1e45      	subs	r5, r0, #1
 80011fc:	41a8      	sbcs	r0, r5
 80011fe:	4302      	orrs	r2, r0
 8001200:	0015      	movs	r5, r2
 8001202:	e7de      	b.n	80011c2 <__aeabi_i2f+0x4a>
 8001204:	026d      	lsls	r5, r5, #9
 8001206:	2096      	movs	r0, #150	@ 0x96
 8001208:	0a6d      	lsrs	r5, r5, #9
 800120a:	e7cf      	b.n	80011ac <__aeabi_i2f+0x34>
 800120c:	fbffffff 	.word	0xfbffffff

08001210 <__aeabi_d2f>:
 8001210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001212:	004b      	lsls	r3, r1, #1
 8001214:	030f      	lsls	r7, r1, #12
 8001216:	0d5b      	lsrs	r3, r3, #21
 8001218:	4c3b      	ldr	r4, [pc, #236]	@ (8001308 <__aeabi_d2f+0xf8>)
 800121a:	0f45      	lsrs	r5, r0, #29
 800121c:	b083      	sub	sp, #12
 800121e:	0a7f      	lsrs	r7, r7, #9
 8001220:	1c5e      	adds	r6, r3, #1
 8001222:	432f      	orrs	r7, r5
 8001224:	9000      	str	r0, [sp, #0]
 8001226:	9101      	str	r1, [sp, #4]
 8001228:	0fca      	lsrs	r2, r1, #31
 800122a:	00c5      	lsls	r5, r0, #3
 800122c:	4226      	tst	r6, r4
 800122e:	d00b      	beq.n	8001248 <__aeabi_d2f+0x38>
 8001230:	4936      	ldr	r1, [pc, #216]	@ (800130c <__aeabi_d2f+0xfc>)
 8001232:	185c      	adds	r4, r3, r1
 8001234:	2cfe      	cmp	r4, #254	@ 0xfe
 8001236:	dd13      	ble.n	8001260 <__aeabi_d2f+0x50>
 8001238:	20ff      	movs	r0, #255	@ 0xff
 800123a:	2300      	movs	r3, #0
 800123c:	05c0      	lsls	r0, r0, #23
 800123e:	4318      	orrs	r0, r3
 8001240:	07d2      	lsls	r2, r2, #31
 8001242:	4310      	orrs	r0, r2
 8001244:	b003      	add	sp, #12
 8001246:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001248:	2b00      	cmp	r3, #0
 800124a:	d102      	bne.n	8001252 <__aeabi_d2f+0x42>
 800124c:	2000      	movs	r0, #0
 800124e:	2300      	movs	r3, #0
 8001250:	e7f4      	b.n	800123c <__aeabi_d2f+0x2c>
 8001252:	433d      	orrs	r5, r7
 8001254:	d0f0      	beq.n	8001238 <__aeabi_d2f+0x28>
 8001256:	2380      	movs	r3, #128	@ 0x80
 8001258:	03db      	lsls	r3, r3, #15
 800125a:	20ff      	movs	r0, #255	@ 0xff
 800125c:	433b      	orrs	r3, r7
 800125e:	e7ed      	b.n	800123c <__aeabi_d2f+0x2c>
 8001260:	2c00      	cmp	r4, #0
 8001262:	dd14      	ble.n	800128e <__aeabi_d2f+0x7e>
 8001264:	9b00      	ldr	r3, [sp, #0]
 8001266:	00ff      	lsls	r7, r7, #3
 8001268:	019b      	lsls	r3, r3, #6
 800126a:	1e58      	subs	r0, r3, #1
 800126c:	4183      	sbcs	r3, r0
 800126e:	0f69      	lsrs	r1, r5, #29
 8001270:	433b      	orrs	r3, r7
 8001272:	430b      	orrs	r3, r1
 8001274:	0759      	lsls	r1, r3, #29
 8001276:	d041      	beq.n	80012fc <__aeabi_d2f+0xec>
 8001278:	210f      	movs	r1, #15
 800127a:	4019      	ands	r1, r3
 800127c:	2904      	cmp	r1, #4
 800127e:	d028      	beq.n	80012d2 <__aeabi_d2f+0xc2>
 8001280:	3304      	adds	r3, #4
 8001282:	0159      	lsls	r1, r3, #5
 8001284:	d525      	bpl.n	80012d2 <__aeabi_d2f+0xc2>
 8001286:	3401      	adds	r4, #1
 8001288:	2300      	movs	r3, #0
 800128a:	b2e0      	uxtb	r0, r4
 800128c:	e7d6      	b.n	800123c <__aeabi_d2f+0x2c>
 800128e:	0021      	movs	r1, r4
 8001290:	3117      	adds	r1, #23
 8001292:	dbdb      	blt.n	800124c <__aeabi_d2f+0x3c>
 8001294:	2180      	movs	r1, #128	@ 0x80
 8001296:	201e      	movs	r0, #30
 8001298:	0409      	lsls	r1, r1, #16
 800129a:	4339      	orrs	r1, r7
 800129c:	1b00      	subs	r0, r0, r4
 800129e:	281f      	cmp	r0, #31
 80012a0:	dd1b      	ble.n	80012da <__aeabi_d2f+0xca>
 80012a2:	2602      	movs	r6, #2
 80012a4:	4276      	negs	r6, r6
 80012a6:	1b34      	subs	r4, r6, r4
 80012a8:	000e      	movs	r6, r1
 80012aa:	40e6      	lsrs	r6, r4
 80012ac:	0034      	movs	r4, r6
 80012ae:	2820      	cmp	r0, #32
 80012b0:	d004      	beq.n	80012bc <__aeabi_d2f+0xac>
 80012b2:	4817      	ldr	r0, [pc, #92]	@ (8001310 <__aeabi_d2f+0x100>)
 80012b4:	4684      	mov	ip, r0
 80012b6:	4463      	add	r3, ip
 80012b8:	4099      	lsls	r1, r3
 80012ba:	430d      	orrs	r5, r1
 80012bc:	002b      	movs	r3, r5
 80012be:	1e59      	subs	r1, r3, #1
 80012c0:	418b      	sbcs	r3, r1
 80012c2:	4323      	orrs	r3, r4
 80012c4:	0759      	lsls	r1, r3, #29
 80012c6:	d015      	beq.n	80012f4 <__aeabi_d2f+0xe4>
 80012c8:	210f      	movs	r1, #15
 80012ca:	2400      	movs	r4, #0
 80012cc:	4019      	ands	r1, r3
 80012ce:	2904      	cmp	r1, #4
 80012d0:	d117      	bne.n	8001302 <__aeabi_d2f+0xf2>
 80012d2:	019b      	lsls	r3, r3, #6
 80012d4:	0a5b      	lsrs	r3, r3, #9
 80012d6:	b2e0      	uxtb	r0, r4
 80012d8:	e7b0      	b.n	800123c <__aeabi_d2f+0x2c>
 80012da:	4c0e      	ldr	r4, [pc, #56]	@ (8001314 <__aeabi_d2f+0x104>)
 80012dc:	191c      	adds	r4, r3, r4
 80012de:	002b      	movs	r3, r5
 80012e0:	40a5      	lsls	r5, r4
 80012e2:	40c3      	lsrs	r3, r0
 80012e4:	40a1      	lsls	r1, r4
 80012e6:	1e68      	subs	r0, r5, #1
 80012e8:	4185      	sbcs	r5, r0
 80012ea:	4329      	orrs	r1, r5
 80012ec:	430b      	orrs	r3, r1
 80012ee:	2400      	movs	r4, #0
 80012f0:	0759      	lsls	r1, r3, #29
 80012f2:	d1c1      	bne.n	8001278 <__aeabi_d2f+0x68>
 80012f4:	019b      	lsls	r3, r3, #6
 80012f6:	2000      	movs	r0, #0
 80012f8:	0a5b      	lsrs	r3, r3, #9
 80012fa:	e79f      	b.n	800123c <__aeabi_d2f+0x2c>
 80012fc:	08db      	lsrs	r3, r3, #3
 80012fe:	b2e0      	uxtb	r0, r4
 8001300:	e79c      	b.n	800123c <__aeabi_d2f+0x2c>
 8001302:	3304      	adds	r3, #4
 8001304:	e7e5      	b.n	80012d2 <__aeabi_d2f+0xc2>
 8001306:	46c0      	nop			@ (mov r8, r8)
 8001308:	000007fe 	.word	0x000007fe
 800130c:	fffffc80 	.word	0xfffffc80
 8001310:	fffffca2 	.word	0xfffffca2
 8001314:	fffffc82 	.word	0xfffffc82

08001318 <__aeabi_cfrcmple>:
 8001318:	4684      	mov	ip, r0
 800131a:	0008      	movs	r0, r1
 800131c:	4661      	mov	r1, ip
 800131e:	e7ff      	b.n	8001320 <__aeabi_cfcmpeq>

08001320 <__aeabi_cfcmpeq>:
 8001320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001322:	f000 f8d5 	bl	80014d0 <__lesf2>
 8001326:	2800      	cmp	r0, #0
 8001328:	d401      	bmi.n	800132e <__aeabi_cfcmpeq+0xe>
 800132a:	2100      	movs	r1, #0
 800132c:	42c8      	cmn	r0, r1
 800132e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001330 <__aeabi_fcmpeq>:
 8001330:	b510      	push	{r4, lr}
 8001332:	f000 f855 	bl	80013e0 <__eqsf2>
 8001336:	4240      	negs	r0, r0
 8001338:	3001      	adds	r0, #1
 800133a:	bd10      	pop	{r4, pc}

0800133c <__aeabi_fcmplt>:
 800133c:	b510      	push	{r4, lr}
 800133e:	f000 f8c7 	bl	80014d0 <__lesf2>
 8001342:	2800      	cmp	r0, #0
 8001344:	db01      	blt.n	800134a <__aeabi_fcmplt+0xe>
 8001346:	2000      	movs	r0, #0
 8001348:	bd10      	pop	{r4, pc}
 800134a:	2001      	movs	r0, #1
 800134c:	bd10      	pop	{r4, pc}
 800134e:	46c0      	nop			@ (mov r8, r8)

08001350 <__aeabi_fcmple>:
 8001350:	b510      	push	{r4, lr}
 8001352:	f000 f8bd 	bl	80014d0 <__lesf2>
 8001356:	2800      	cmp	r0, #0
 8001358:	dd01      	ble.n	800135e <__aeabi_fcmple+0xe>
 800135a:	2000      	movs	r0, #0
 800135c:	bd10      	pop	{r4, pc}
 800135e:	2001      	movs	r0, #1
 8001360:	bd10      	pop	{r4, pc}
 8001362:	46c0      	nop			@ (mov r8, r8)

08001364 <__aeabi_fcmpgt>:
 8001364:	b510      	push	{r4, lr}
 8001366:	f000 f863 	bl	8001430 <__gesf2>
 800136a:	2800      	cmp	r0, #0
 800136c:	dc01      	bgt.n	8001372 <__aeabi_fcmpgt+0xe>
 800136e:	2000      	movs	r0, #0
 8001370:	bd10      	pop	{r4, pc}
 8001372:	2001      	movs	r0, #1
 8001374:	bd10      	pop	{r4, pc}
 8001376:	46c0      	nop			@ (mov r8, r8)

08001378 <__aeabi_fcmpge>:
 8001378:	b510      	push	{r4, lr}
 800137a:	f000 f859 	bl	8001430 <__gesf2>
 800137e:	2800      	cmp	r0, #0
 8001380:	da01      	bge.n	8001386 <__aeabi_fcmpge+0xe>
 8001382:	2000      	movs	r0, #0
 8001384:	bd10      	pop	{r4, pc}
 8001386:	2001      	movs	r0, #1
 8001388:	bd10      	pop	{r4, pc}
 800138a:	46c0      	nop			@ (mov r8, r8)

0800138c <__clzsi2>:
 800138c:	211c      	movs	r1, #28
 800138e:	2301      	movs	r3, #1
 8001390:	041b      	lsls	r3, r3, #16
 8001392:	4298      	cmp	r0, r3
 8001394:	d301      	bcc.n	800139a <__clzsi2+0xe>
 8001396:	0c00      	lsrs	r0, r0, #16
 8001398:	3910      	subs	r1, #16
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	4298      	cmp	r0, r3
 800139e:	d301      	bcc.n	80013a4 <__clzsi2+0x18>
 80013a0:	0a00      	lsrs	r0, r0, #8
 80013a2:	3908      	subs	r1, #8
 80013a4:	091b      	lsrs	r3, r3, #4
 80013a6:	4298      	cmp	r0, r3
 80013a8:	d301      	bcc.n	80013ae <__clzsi2+0x22>
 80013aa:	0900      	lsrs	r0, r0, #4
 80013ac:	3904      	subs	r1, #4
 80013ae:	a202      	add	r2, pc, #8	@ (adr r2, 80013b8 <__clzsi2+0x2c>)
 80013b0:	5c10      	ldrb	r0, [r2, r0]
 80013b2:	1840      	adds	r0, r0, r1
 80013b4:	4770      	bx	lr
 80013b6:	46c0      	nop			@ (mov r8, r8)
 80013b8:	02020304 	.word	0x02020304
 80013bc:	01010101 	.word	0x01010101
	...

080013c8 <__clzdi2>:
 80013c8:	b510      	push	{r4, lr}
 80013ca:	2900      	cmp	r1, #0
 80013cc:	d103      	bne.n	80013d6 <__clzdi2+0xe>
 80013ce:	f7ff ffdd 	bl	800138c <__clzsi2>
 80013d2:	3020      	adds	r0, #32
 80013d4:	e002      	b.n	80013dc <__clzdi2+0x14>
 80013d6:	0008      	movs	r0, r1
 80013d8:	f7ff ffd8 	bl	800138c <__clzsi2>
 80013dc:	bd10      	pop	{r4, pc}
 80013de:	46c0      	nop			@ (mov r8, r8)

080013e0 <__eqsf2>:
 80013e0:	b570      	push	{r4, r5, r6, lr}
 80013e2:	0042      	lsls	r2, r0, #1
 80013e4:	024e      	lsls	r6, r1, #9
 80013e6:	004c      	lsls	r4, r1, #1
 80013e8:	0245      	lsls	r5, r0, #9
 80013ea:	0a6d      	lsrs	r5, r5, #9
 80013ec:	0e12      	lsrs	r2, r2, #24
 80013ee:	0fc3      	lsrs	r3, r0, #31
 80013f0:	0a76      	lsrs	r6, r6, #9
 80013f2:	0e24      	lsrs	r4, r4, #24
 80013f4:	0fc9      	lsrs	r1, r1, #31
 80013f6:	2aff      	cmp	r2, #255	@ 0xff
 80013f8:	d010      	beq.n	800141c <__eqsf2+0x3c>
 80013fa:	2cff      	cmp	r4, #255	@ 0xff
 80013fc:	d00c      	beq.n	8001418 <__eqsf2+0x38>
 80013fe:	2001      	movs	r0, #1
 8001400:	42a2      	cmp	r2, r4
 8001402:	d10a      	bne.n	800141a <__eqsf2+0x3a>
 8001404:	42b5      	cmp	r5, r6
 8001406:	d108      	bne.n	800141a <__eqsf2+0x3a>
 8001408:	428b      	cmp	r3, r1
 800140a:	d00f      	beq.n	800142c <__eqsf2+0x4c>
 800140c:	2a00      	cmp	r2, #0
 800140e:	d104      	bne.n	800141a <__eqsf2+0x3a>
 8001410:	0028      	movs	r0, r5
 8001412:	1e43      	subs	r3, r0, #1
 8001414:	4198      	sbcs	r0, r3
 8001416:	e000      	b.n	800141a <__eqsf2+0x3a>
 8001418:	2001      	movs	r0, #1
 800141a:	bd70      	pop	{r4, r5, r6, pc}
 800141c:	2001      	movs	r0, #1
 800141e:	2cff      	cmp	r4, #255	@ 0xff
 8001420:	d1fb      	bne.n	800141a <__eqsf2+0x3a>
 8001422:	4335      	orrs	r5, r6
 8001424:	d1f9      	bne.n	800141a <__eqsf2+0x3a>
 8001426:	404b      	eors	r3, r1
 8001428:	0018      	movs	r0, r3
 800142a:	e7f6      	b.n	800141a <__eqsf2+0x3a>
 800142c:	2000      	movs	r0, #0
 800142e:	e7f4      	b.n	800141a <__eqsf2+0x3a>

08001430 <__gesf2>:
 8001430:	b530      	push	{r4, r5, lr}
 8001432:	0042      	lsls	r2, r0, #1
 8001434:	0244      	lsls	r4, r0, #9
 8001436:	024d      	lsls	r5, r1, #9
 8001438:	0fc3      	lsrs	r3, r0, #31
 800143a:	0048      	lsls	r0, r1, #1
 800143c:	0a64      	lsrs	r4, r4, #9
 800143e:	0e12      	lsrs	r2, r2, #24
 8001440:	0a6d      	lsrs	r5, r5, #9
 8001442:	0e00      	lsrs	r0, r0, #24
 8001444:	0fc9      	lsrs	r1, r1, #31
 8001446:	2aff      	cmp	r2, #255	@ 0xff
 8001448:	d019      	beq.n	800147e <__gesf2+0x4e>
 800144a:	28ff      	cmp	r0, #255	@ 0xff
 800144c:	d00b      	beq.n	8001466 <__gesf2+0x36>
 800144e:	2a00      	cmp	r2, #0
 8001450:	d11e      	bne.n	8001490 <__gesf2+0x60>
 8001452:	2800      	cmp	r0, #0
 8001454:	d10b      	bne.n	800146e <__gesf2+0x3e>
 8001456:	2d00      	cmp	r5, #0
 8001458:	d027      	beq.n	80014aa <__gesf2+0x7a>
 800145a:	2c00      	cmp	r4, #0
 800145c:	d134      	bne.n	80014c8 <__gesf2+0x98>
 800145e:	2900      	cmp	r1, #0
 8001460:	d02f      	beq.n	80014c2 <__gesf2+0x92>
 8001462:	0008      	movs	r0, r1
 8001464:	bd30      	pop	{r4, r5, pc}
 8001466:	2d00      	cmp	r5, #0
 8001468:	d128      	bne.n	80014bc <__gesf2+0x8c>
 800146a:	2a00      	cmp	r2, #0
 800146c:	d101      	bne.n	8001472 <__gesf2+0x42>
 800146e:	2c00      	cmp	r4, #0
 8001470:	d0f5      	beq.n	800145e <__gesf2+0x2e>
 8001472:	428b      	cmp	r3, r1
 8001474:	d107      	bne.n	8001486 <__gesf2+0x56>
 8001476:	2b00      	cmp	r3, #0
 8001478:	d023      	beq.n	80014c2 <__gesf2+0x92>
 800147a:	0018      	movs	r0, r3
 800147c:	e7f2      	b.n	8001464 <__gesf2+0x34>
 800147e:	2c00      	cmp	r4, #0
 8001480:	d11c      	bne.n	80014bc <__gesf2+0x8c>
 8001482:	28ff      	cmp	r0, #255	@ 0xff
 8001484:	d014      	beq.n	80014b0 <__gesf2+0x80>
 8001486:	1e58      	subs	r0, r3, #1
 8001488:	2302      	movs	r3, #2
 800148a:	4018      	ands	r0, r3
 800148c:	3801      	subs	r0, #1
 800148e:	e7e9      	b.n	8001464 <__gesf2+0x34>
 8001490:	2800      	cmp	r0, #0
 8001492:	d0f8      	beq.n	8001486 <__gesf2+0x56>
 8001494:	428b      	cmp	r3, r1
 8001496:	d1f6      	bne.n	8001486 <__gesf2+0x56>
 8001498:	4282      	cmp	r2, r0
 800149a:	dcf4      	bgt.n	8001486 <__gesf2+0x56>
 800149c:	dbeb      	blt.n	8001476 <__gesf2+0x46>
 800149e:	42ac      	cmp	r4, r5
 80014a0:	d8f1      	bhi.n	8001486 <__gesf2+0x56>
 80014a2:	2000      	movs	r0, #0
 80014a4:	42ac      	cmp	r4, r5
 80014a6:	d2dd      	bcs.n	8001464 <__gesf2+0x34>
 80014a8:	e7e5      	b.n	8001476 <__gesf2+0x46>
 80014aa:	2c00      	cmp	r4, #0
 80014ac:	d0da      	beq.n	8001464 <__gesf2+0x34>
 80014ae:	e7ea      	b.n	8001486 <__gesf2+0x56>
 80014b0:	2d00      	cmp	r5, #0
 80014b2:	d103      	bne.n	80014bc <__gesf2+0x8c>
 80014b4:	428b      	cmp	r3, r1
 80014b6:	d1e6      	bne.n	8001486 <__gesf2+0x56>
 80014b8:	2000      	movs	r0, #0
 80014ba:	e7d3      	b.n	8001464 <__gesf2+0x34>
 80014bc:	2002      	movs	r0, #2
 80014be:	4240      	negs	r0, r0
 80014c0:	e7d0      	b.n	8001464 <__gesf2+0x34>
 80014c2:	2001      	movs	r0, #1
 80014c4:	4240      	negs	r0, r0
 80014c6:	e7cd      	b.n	8001464 <__gesf2+0x34>
 80014c8:	428b      	cmp	r3, r1
 80014ca:	d0e8      	beq.n	800149e <__gesf2+0x6e>
 80014cc:	e7db      	b.n	8001486 <__gesf2+0x56>
 80014ce:	46c0      	nop			@ (mov r8, r8)

080014d0 <__lesf2>:
 80014d0:	b530      	push	{r4, r5, lr}
 80014d2:	0042      	lsls	r2, r0, #1
 80014d4:	0244      	lsls	r4, r0, #9
 80014d6:	024d      	lsls	r5, r1, #9
 80014d8:	0fc3      	lsrs	r3, r0, #31
 80014da:	0048      	lsls	r0, r1, #1
 80014dc:	0a64      	lsrs	r4, r4, #9
 80014de:	0e12      	lsrs	r2, r2, #24
 80014e0:	0a6d      	lsrs	r5, r5, #9
 80014e2:	0e00      	lsrs	r0, r0, #24
 80014e4:	0fc9      	lsrs	r1, r1, #31
 80014e6:	2aff      	cmp	r2, #255	@ 0xff
 80014e8:	d01a      	beq.n	8001520 <__lesf2+0x50>
 80014ea:	28ff      	cmp	r0, #255	@ 0xff
 80014ec:	d00e      	beq.n	800150c <__lesf2+0x3c>
 80014ee:	2a00      	cmp	r2, #0
 80014f0:	d11e      	bne.n	8001530 <__lesf2+0x60>
 80014f2:	2800      	cmp	r0, #0
 80014f4:	d10e      	bne.n	8001514 <__lesf2+0x44>
 80014f6:	2d00      	cmp	r5, #0
 80014f8:	d02a      	beq.n	8001550 <__lesf2+0x80>
 80014fa:	2c00      	cmp	r4, #0
 80014fc:	d00c      	beq.n	8001518 <__lesf2+0x48>
 80014fe:	428b      	cmp	r3, r1
 8001500:	d01d      	beq.n	800153e <__lesf2+0x6e>
 8001502:	1e58      	subs	r0, r3, #1
 8001504:	2302      	movs	r3, #2
 8001506:	4018      	ands	r0, r3
 8001508:	3801      	subs	r0, #1
 800150a:	e010      	b.n	800152e <__lesf2+0x5e>
 800150c:	2d00      	cmp	r5, #0
 800150e:	d10d      	bne.n	800152c <__lesf2+0x5c>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d120      	bne.n	8001556 <__lesf2+0x86>
 8001514:	2c00      	cmp	r4, #0
 8001516:	d11e      	bne.n	8001556 <__lesf2+0x86>
 8001518:	2900      	cmp	r1, #0
 800151a:	d023      	beq.n	8001564 <__lesf2+0x94>
 800151c:	0008      	movs	r0, r1
 800151e:	e006      	b.n	800152e <__lesf2+0x5e>
 8001520:	2c00      	cmp	r4, #0
 8001522:	d103      	bne.n	800152c <__lesf2+0x5c>
 8001524:	28ff      	cmp	r0, #255	@ 0xff
 8001526:	d1ec      	bne.n	8001502 <__lesf2+0x32>
 8001528:	2d00      	cmp	r5, #0
 800152a:	d017      	beq.n	800155c <__lesf2+0x8c>
 800152c:	2002      	movs	r0, #2
 800152e:	bd30      	pop	{r4, r5, pc}
 8001530:	2800      	cmp	r0, #0
 8001532:	d0e6      	beq.n	8001502 <__lesf2+0x32>
 8001534:	428b      	cmp	r3, r1
 8001536:	d1e4      	bne.n	8001502 <__lesf2+0x32>
 8001538:	4282      	cmp	r2, r0
 800153a:	dce2      	bgt.n	8001502 <__lesf2+0x32>
 800153c:	db04      	blt.n	8001548 <__lesf2+0x78>
 800153e:	42ac      	cmp	r4, r5
 8001540:	d8df      	bhi.n	8001502 <__lesf2+0x32>
 8001542:	2000      	movs	r0, #0
 8001544:	42ac      	cmp	r4, r5
 8001546:	d2f2      	bcs.n	800152e <__lesf2+0x5e>
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00b      	beq.n	8001564 <__lesf2+0x94>
 800154c:	0018      	movs	r0, r3
 800154e:	e7ee      	b.n	800152e <__lesf2+0x5e>
 8001550:	2c00      	cmp	r4, #0
 8001552:	d0ec      	beq.n	800152e <__lesf2+0x5e>
 8001554:	e7d5      	b.n	8001502 <__lesf2+0x32>
 8001556:	428b      	cmp	r3, r1
 8001558:	d1d3      	bne.n	8001502 <__lesf2+0x32>
 800155a:	e7f5      	b.n	8001548 <__lesf2+0x78>
 800155c:	2000      	movs	r0, #0
 800155e:	428b      	cmp	r3, r1
 8001560:	d0e5      	beq.n	800152e <__lesf2+0x5e>
 8001562:	e7ce      	b.n	8001502 <__lesf2+0x32>
 8001564:	2001      	movs	r0, #1
 8001566:	4240      	negs	r0, r0
 8001568:	e7e1      	b.n	800152e <__lesf2+0x5e>
 800156a:	46c0      	nop			@ (mov r8, r8)

0800156c <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	0004      	movs	r4, r0
 8001574:	0008      	movs	r0, r1
 8001576:	0011      	movs	r1, r2
 8001578:	1dbb      	adds	r3, r7, #6
 800157a:	1c22      	adds	r2, r4, #0
 800157c:	801a      	strh	r2, [r3, #0]
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	1c02      	adds	r2, r0, #0
 8001582:	801a      	strh	r2, [r3, #0]
 8001584:	1cbb      	adds	r3, r7, #2
 8001586:	1c0a      	adds	r2, r1, #0
 8001588:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(y,x, color);
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	8818      	ldrh	r0, [r3, #0]
 800158e:	1dbb      	adds	r3, r7, #6
 8001590:	8819      	ldrh	r1, [r3, #0]
 8001592:	1cbb      	adds	r3, r7, #2
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	001a      	movs	r2, r3
 8001598:	f000 fccc 	bl	8001f34 <ST7735_DrawPixel>
}
 800159c:	46c0      	nop			@ (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	b003      	add	sp, #12
 80015a2:	bd90      	pop	{r4, r7, pc}

080015a4 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80015a4:	b5b0      	push	{r4, r5, r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af02      	add	r7, sp, #8
 80015aa:	0005      	movs	r5, r0
 80015ac:	000c      	movs	r4, r1
 80015ae:	0010      	movs	r0, r2
 80015b0:	0019      	movs	r1, r3
 80015b2:	1dbb      	adds	r3, r7, #6
 80015b4:	1c2a      	adds	r2, r5, #0
 80015b6:	801a      	strh	r2, [r3, #0]
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	1c22      	adds	r2, r4, #0
 80015bc:	801a      	strh	r2, [r3, #0]
 80015be:	1cbb      	adds	r3, r7, #2
 80015c0:	1c02      	adds	r2, r0, #0
 80015c2:	801a      	strh	r2, [r3, #0]
 80015c4:	003b      	movs	r3, r7
 80015c6:	1c0a      	adds	r2, r1, #0
 80015c8:	801a      	strh	r2, [r3, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 80015ca:	1dbb      	adds	r3, r7, #6
 80015cc:	8818      	ldrh	r0, [r3, #0]
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	8819      	ldrh	r1, [r3, #0]
 80015d2:	1cbb      	adds	r3, r7, #2
 80015d4:	881a      	ldrh	r2, [r3, #0]
 80015d6:	003b      	movs	r3, r7
 80015d8:	881c      	ldrh	r4, [r3, #0]
 80015da:	2318      	movs	r3, #24
 80015dc:	18fb      	adds	r3, r7, r3
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	0023      	movs	r3, r4
 80015e4:	f000 fcf4 	bl	8001fd0 <ST7735_FillRectangle>
}
 80015e8:	46c0      	nop			@ (mov r8, r8)
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b002      	add	sp, #8
 80015ee:	bdb0      	pop	{r4, r5, r7, pc}

080015f0 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	0004      	movs	r4, r0
 80015f8:	0008      	movs	r0, r1
 80015fa:	0011      	movs	r1, r2
 80015fc:	1dbb      	adds	r3, r7, #6
 80015fe:	1c22      	adds	r2, r4, #0
 8001600:	801a      	strh	r2, [r3, #0]
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	1c02      	adds	r2, r0, #0
 8001606:	801a      	strh	r2, [r3, #0]
 8001608:	1cbb      	adds	r3, r7, #2
 800160a:	1c0a      	adds	r2, r1, #0
 800160c:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 800160e:	1cbb      	adds	r3, r7, #2
 8001610:	881a      	ldrh	r2, [r3, #0]
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2100      	movs	r1, #0
 8001616:	5e59      	ldrsh	r1, [r3, r1]
 8001618:	1dbb      	adds	r3, r7, #6
 800161a:	2000      	movs	r0, #0
 800161c:	5e1b      	ldrsh	r3, [r3, r0]
 800161e:	0018      	movs	r0, r3
 8001620:	f7ff ffa4 	bl	800156c <drawPixel>
}
 8001624:	46c0      	nop			@ (mov r8, r8)
 8001626:	46bd      	mov	sp, r7
 8001628:	b003      	add	sp, #12
 800162a:	bd90      	pop	{r4, r7, pc}

0800162c <drawString>:
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
void drawString(int16_t x, int16_t y, char* c, int16_t textColor, int16_t bgColor, uint8_t size, uint8_t spacing)
{
 800162c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162e:	b089      	sub	sp, #36	@ 0x24
 8001630:	af02      	add	r7, sp, #8
 8001632:	0004      	movs	r4, r0
 8001634:	0008      	movs	r0, r1
 8001636:	60ba      	str	r2, [r7, #8]
 8001638:	0019      	movs	r1, r3
 800163a:	230e      	movs	r3, #14
 800163c:	18fb      	adds	r3, r7, r3
 800163e:	1c22      	adds	r2, r4, #0
 8001640:	801a      	strh	r2, [r3, #0]
 8001642:	230c      	movs	r3, #12
 8001644:	18fb      	adds	r3, r7, r3
 8001646:	1c02      	adds	r2, r0, #0
 8001648:	801a      	strh	r2, [r3, #0]
 800164a:	1dbb      	adds	r3, r7, #6
 800164c:	1c0a      	adds	r2, r1, #0
 800164e:	801a      	strh	r2, [r3, #0]
	uint16_t i =0;
 8001650:	2316      	movs	r3, #22
 8001652:	18fb      	adds	r3, r7, r3
 8001654:	2200      	movs	r2, #0
 8001656:	801a      	strh	r2, [r3, #0]

	while(c[i])
 8001658:	e03f      	b.n	80016da <drawString+0xae>
	{
		drawChar(x, y, c[i], textColor, bgColor, size);
 800165a:	2516      	movs	r5, #22
 800165c:	197b      	adds	r3, r7, r5
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	18d3      	adds	r3, r2, r3
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	469c      	mov	ip, r3
 8001668:	1dbb      	adds	r3, r7, #6
 800166a:	2400      	movs	r4, #0
 800166c:	5f1c      	ldrsh	r4, [r3, r4]
 800166e:	230c      	movs	r3, #12
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	2100      	movs	r1, #0
 8001674:	5e59      	ldrsh	r1, [r3, r1]
 8001676:	260e      	movs	r6, #14
 8001678:	19bb      	adds	r3, r7, r6
 800167a:	2000      	movs	r0, #0
 800167c:	5e18      	ldrsh	r0, [r3, r0]
 800167e:	232c      	movs	r3, #44	@ 0x2c
 8001680:	2208      	movs	r2, #8
 8001682:	189b      	adds	r3, r3, r2
 8001684:	19db      	adds	r3, r3, r7
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	2328      	movs	r3, #40	@ 0x28
 800168c:	189b      	adds	r3, r3, r2
 800168e:	19db      	adds	r3, r3, r7
 8001690:	2200      	movs	r2, #0
 8001692:	5e9b      	ldrsh	r3, [r3, r2]
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	0023      	movs	r3, r4
 8001698:	4662      	mov	r2, ip
 800169a:	f000 f82b 	bl	80016f4 <drawChar>
		x+=(size*6)+spacing;
 800169e:	232c      	movs	r3, #44	@ 0x2c
 80016a0:	2108      	movs	r1, #8
 80016a2:	185b      	adds	r3, r3, r1
 80016a4:	19db      	adds	r3, r3, r7
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	1c1a      	adds	r2, r3, #0
 80016ac:	1c13      	adds	r3, r2, #0
 80016ae:	18db      	adds	r3, r3, r3
 80016b0:	189b      	adds	r3, r3, r2
 80016b2:	18db      	adds	r3, r3, r3
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	2330      	movs	r3, #48	@ 0x30
 80016b8:	185b      	adds	r3, r3, r1
 80016ba:	19db      	adds	r3, r3, r7
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	18d3      	adds	r3, r2, r3
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	19bb      	adds	r3, r7, r6
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	18d3      	adds	r3, r2, r3
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	19bb      	adds	r3, r7, r6
 80016ce:	801a      	strh	r2, [r3, #0]
		i++;
 80016d0:	197b      	adds	r3, r7, r5
 80016d2:	881a      	ldrh	r2, [r3, #0]
 80016d4:	197b      	adds	r3, r7, r5
 80016d6:	3201      	adds	r2, #1
 80016d8:	801a      	strh	r2, [r3, #0]
	while(c[i])
 80016da:	2316      	movs	r3, #22
 80016dc:	18fb      	adds	r3, r7, r3
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	18d3      	adds	r3, r2, r3
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1b7      	bne.n	800165a <drawString+0x2e>
	}
}
 80016ea:	46c0      	nop			@ (mov r8, r8)
 80016ec:	46c0      	nop			@ (mov r8, r8)
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b007      	add	sp, #28
 80016f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016f4 <drawChar>:
void drawChar(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 80016f4:	b5b0      	push	{r4, r5, r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af02      	add	r7, sp, #8
 80016fa:	0005      	movs	r5, r0
 80016fc:	000c      	movs	r4, r1
 80016fe:	0010      	movs	r0, r2
 8001700:	0019      	movs	r1, r3
 8001702:	1dbb      	adds	r3, r7, #6
 8001704:	1c2a      	adds	r2, r5, #0
 8001706:	801a      	strh	r2, [r3, #0]
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	1c22      	adds	r2, r4, #0
 800170c:	801a      	strh	r2, [r3, #0]
 800170e:	1cfb      	adds	r3, r7, #3
 8001710:	1c02      	adds	r2, r0, #0
 8001712:	701a      	strb	r2, [r3, #0]
 8001714:	003b      	movs	r3, r7
 8001716:	1c0a      	adds	r2, r1, #0
 8001718:	801a      	strh	r2, [r3, #0]
  uint8_t line;
  int32_t i, j;
  if((x >= _width)            ||
 800171a:	4b79      	ldr	r3, [pc, #484]	@ (8001900 <drawChar+0x20c>)
 800171c:	2200      	movs	r2, #0
 800171e:	5e9b      	ldrsh	r3, [r3, r2]
 8001720:	1dba      	adds	r2, r7, #6
 8001722:	2100      	movs	r1, #0
 8001724:	5e52      	ldrsh	r2, [r2, r1]
 8001726:	429a      	cmp	r2, r3
 8001728:	db00      	blt.n	800172c <drawChar+0x38>
 800172a:	e0e5      	b.n	80018f8 <drawChar+0x204>
     (y >= _height)           ||
 800172c:	4b75      	ldr	r3, [pc, #468]	@ (8001904 <drawChar+0x210>)
 800172e:	2200      	movs	r2, #0
 8001730:	5e9b      	ldrsh	r3, [r3, r2]
  if((x >= _width)            ||
 8001732:	1d3a      	adds	r2, r7, #4
 8001734:	2100      	movs	r1, #0
 8001736:	5e52      	ldrsh	r2, [r2, r1]
 8001738:	429a      	cmp	r2, r3
 800173a:	db00      	blt.n	800173e <drawChar+0x4a>
 800173c:	e0dc      	b.n	80018f8 <drawChar+0x204>
     ((x + 5 * size - 1) < 0) ||
 800173e:	1dbb      	adds	r3, r7, #6
 8001740:	2100      	movs	r1, #0
 8001742:	5e59      	ldrsh	r1, [r3, r1]
 8001744:	202c      	movs	r0, #44	@ 0x2c
 8001746:	183b      	adds	r3, r7, r0
 8001748:	781a      	ldrb	r2, [r3, #0]
 800174a:	0013      	movs	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	189b      	adds	r3, r3, r2
 8001750:	18cb      	adds	r3, r1, r3
     (y >= _height)           ||
 8001752:	2b00      	cmp	r3, #0
 8001754:	dc00      	bgt.n	8001758 <drawChar+0x64>
 8001756:	e0cf      	b.n	80018f8 <drawChar+0x204>
     ((y + 8 * size - 1) < 0))
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	2200      	movs	r2, #0
 800175c:	5e9a      	ldrsh	r2, [r3, r2]
 800175e:	183b      	adds	r3, r7, r0
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	18d3      	adds	r3, r2, r3
     ((x + 5 * size - 1) < 0) ||
 8001766:	2b00      	cmp	r3, #0
 8001768:	dc00      	bgt.n	800176c <drawChar+0x78>
 800176a:	e0c5      	b.n	80018f8 <drawChar+0x204>
    return;

  for (i=0; i<6; i++ ) {
 800176c:	2300      	movs	r3, #0
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	e0bd      	b.n	80018ee <drawChar+0x1fa>
    if ((i) == 5)
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	2b05      	cmp	r3, #5
 8001776:	d104      	bne.n	8001782 <drawChar+0x8e>
      line = 0x0;
 8001778:	2317      	movs	r3, #23
 800177a:	18fb      	adds	r3, r7, r3
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
 8001780:	e00b      	b.n	800179a <drawChar+0xa6>
    else
      line = Font[(c*5)+(i)];
 8001782:	1cfb      	adds	r3, r7, #3
 8001784:	781a      	ldrb	r2, [r3, #0]
 8001786:	0013      	movs	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	189a      	adds	r2, r3, r2
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	18d2      	adds	r2, r2, r3
 8001790:	2317      	movs	r3, #23
 8001792:	18fb      	adds	r3, r7, r3
 8001794:	495c      	ldr	r1, [pc, #368]	@ (8001908 <drawChar+0x214>)
 8001796:	5c8a      	ldrb	r2, [r1, r2]
 8001798:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	e09f      	b.n	80018e0 <drawChar+0x1ec>
      if (line & 0x1) {
 80017a0:	2317      	movs	r3, #23
 80017a2:	18fb      	adds	r3, r7, r3
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2201      	movs	r2, #1
 80017a8:	4013      	ands	r3, r2
 80017aa:	d043      	beq.n	8001834 <drawChar+0x140>
        if (size == 1)
 80017ac:	232c      	movs	r3, #44	@ 0x2c
 80017ae:	18fb      	adds	r3, r7, r3
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d115      	bne.n	80017e2 <drawChar+0xee>
          writePixel(x+(i), y+(7-j), textColor);
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	1dbb      	adds	r3, r7, #6
 80017bc:	881b      	ldrh	r3, [r3, #0]
 80017be:	18d3      	adds	r3, r2, r3
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	b218      	sxth	r0, r3
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	881a      	ldrh	r2, [r3, #0]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	3307      	adds	r3, #7
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	b219      	sxth	r1, r3
 80017d6:	003b      	movs	r3, r7
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	001a      	movs	r2, r3
 80017dc:	f7ff ff08 	bl	80015f0 <writePixel>
 80017e0:	e075      	b.n	80018ce <drawChar+0x1da>
        else {
          fillRect(x+((i)*size), y+((7-j)*size), size, size, textColor);
 80017e2:	212c      	movs	r1, #44	@ 0x2c
 80017e4:	187b      	adds	r3, r7, r1
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	b292      	uxth	r2, r2
 80017ee:	4353      	muls	r3, r2
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	1dbb      	adds	r3, r7, #6
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	18d3      	adds	r3, r2, r3
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	b218      	sxth	r0, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2207      	movs	r2, #7
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	b29b      	uxth	r3, r3
 8001804:	000c      	movs	r4, r1
 8001806:	187a      	adds	r2, r7, r1
 8001808:	7812      	ldrb	r2, [r2, #0]
 800180a:	b292      	uxth	r2, r2
 800180c:	4353      	muls	r3, r2
 800180e:	b29a      	uxth	r2, r3
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	18d3      	adds	r3, r2, r3
 8001816:	b29b      	uxth	r3, r3
 8001818:	b219      	sxth	r1, r3
 800181a:	193b      	adds	r3, r7, r4
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	b21a      	sxth	r2, r3
 8001820:	193b      	adds	r3, r7, r4
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	b21c      	sxth	r4, r3
 8001826:	003b      	movs	r3, r7
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	0023      	movs	r3, r4
 800182e:	f7ff feb9 	bl	80015a4 <fillRect>
 8001832:	e04c      	b.n	80018ce <drawChar+0x1da>
        }
      } else if (bgColor != textColor) {
 8001834:	2428      	movs	r4, #40	@ 0x28
 8001836:	193b      	adds	r3, r7, r4
 8001838:	0039      	movs	r1, r7
 800183a:	2200      	movs	r2, #0
 800183c:	5e9a      	ldrsh	r2, [r3, r2]
 800183e:	2300      	movs	r3, #0
 8001840:	5ecb      	ldrsh	r3, [r1, r3]
 8001842:	429a      	cmp	r2, r3
 8001844:	d043      	beq.n	80018ce <drawChar+0x1da>
        if (size == 1) // default size
 8001846:	232c      	movs	r3, #44	@ 0x2c
 8001848:	18fb      	adds	r3, r7, r3
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d115      	bne.n	800187c <drawChar+0x188>
          writePixel(x+(i), y+(7-j), bgColor);
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	b29a      	uxth	r2, r3
 8001854:	1dbb      	adds	r3, r7, #6
 8001856:	881b      	ldrh	r3, [r3, #0]
 8001858:	18d3      	adds	r3, r2, r3
 800185a:	b29b      	uxth	r3, r3
 800185c:	b218      	sxth	r0, r3
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	881a      	ldrh	r2, [r3, #0]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	b29b      	uxth	r3, r3
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	b29b      	uxth	r3, r3
 800186a:	3307      	adds	r3, #7
 800186c:	b29b      	uxth	r3, r3
 800186e:	b219      	sxth	r1, r3
 8001870:	193b      	adds	r3, r7, r4
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	001a      	movs	r2, r3
 8001876:	f7ff febb 	bl	80015f0 <writePixel>
 800187a:	e028      	b.n	80018ce <drawChar+0x1da>
        else {  // big size
          fillRect(x+(i)*size, y+(7-j)*size, size, size, bgColor);
 800187c:	212c      	movs	r1, #44	@ 0x2c
 800187e:	187b      	adds	r3, r7, r1
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	b29b      	uxth	r3, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	b292      	uxth	r2, r2
 8001888:	4353      	muls	r3, r2
 800188a:	b29a      	uxth	r2, r3
 800188c:	1dbb      	adds	r3, r7, #6
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	18d3      	adds	r3, r2, r3
 8001892:	b29b      	uxth	r3, r3
 8001894:	b218      	sxth	r0, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2207      	movs	r2, #7
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	b29b      	uxth	r3, r3
 800189e:	000c      	movs	r4, r1
 80018a0:	187a      	adds	r2, r7, r1
 80018a2:	7812      	ldrb	r2, [r2, #0]
 80018a4:	b292      	uxth	r2, r2
 80018a6:	4353      	muls	r3, r2
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	18d3      	adds	r3, r2, r3
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	b219      	sxth	r1, r3
 80018b4:	193b      	adds	r3, r7, r4
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	b21a      	sxth	r2, r3
 80018ba:	193b      	adds	r3, r7, r4
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	b21c      	sxth	r4, r3
 80018c0:	2328      	movs	r3, #40	@ 0x28
 80018c2:	18fb      	adds	r3, r7, r3
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	0023      	movs	r3, r4
 80018ca:	f7ff fe6b 	bl	80015a4 <fillRect>
        }
      }
      line >>= 1;
 80018ce:	2217      	movs	r2, #23
 80018d0:	18bb      	adds	r3, r7, r2
 80018d2:	18ba      	adds	r2, r7, r2
 80018d4:	7812      	ldrb	r2, [r2, #0]
 80018d6:	0852      	lsrs	r2, r2, #1
 80018d8:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	3301      	adds	r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2b07      	cmp	r3, #7
 80018e4:	dc00      	bgt.n	80018e8 <drawChar+0x1f4>
 80018e6:	e75b      	b.n	80017a0 <drawChar+0xac>
  for (i=0; i<6; i++ ) {
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	3301      	adds	r3, #1
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	2b05      	cmp	r3, #5
 80018f2:	dc00      	bgt.n	80018f6 <drawChar+0x202>
 80018f4:	e73d      	b.n	8001772 <drawChar+0x7e>
 80018f6:	e000      	b.n	80018fa <drawChar+0x206>
    return;
 80018f8:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b006      	add	sp, #24
 80018fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001900:	2000056c 	.word	0x2000056c
 8001904:	2000056e 	.word	0x2000056e
 8001908:	08009020 	.word	0x08009020

0800190c <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 800190c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800190e:	b091      	sub	sp, #68	@ 0x44
 8001910:	af04      	add	r7, sp, #16
 8001912:	231e      	movs	r3, #30
 8001914:	18f9      	adds	r1, r7, r3
 8001916:	8008      	strh	r0, [r1, #0]
 8001918:	4669      	mov	r1, sp
 800191a:	000e      	movs	r6, r1
    uint16_t pallette[] = {color};
 800191c:	210c      	movs	r1, #12
 800191e:	2318      	movs	r3, #24
 8001920:	18cb      	adds	r3, r1, r3
 8001922:	19d9      	adds	r1, r3, r7
 8001924:	231e      	movs	r3, #30
 8001926:	18f8      	adds	r0, r7, r3
 8001928:	8800      	ldrh	r0, [r0, #0]
 800192a:	8008      	strh	r0, [r1, #0]
    uint16_t pixels[_width*_height][2];
 800192c:	492f      	ldr	r1, [pc, #188]	@ (80019ec <fillScreen+0xe0>)
 800192e:	2300      	movs	r3, #0
 8001930:	5ec9      	ldrsh	r1, [r1, r3]
 8001932:	0008      	movs	r0, r1
 8001934:	492e      	ldr	r1, [pc, #184]	@ (80019f0 <fillScreen+0xe4>)
 8001936:	2300      	movs	r3, #0
 8001938:	5ec9      	ldrsh	r1, [r1, r3]
 800193a:	4341      	muls	r1, r0
 800193c:	1e48      	subs	r0, r1, #1
 800193e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001940:	0008      	movs	r0, r1
 8001942:	6138      	str	r0, [r7, #16]
 8001944:	2000      	movs	r0, #0
 8001946:	6178      	str	r0, [r7, #20]
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	0010      	movs	r0, r2
 800194e:	0ec0      	lsrs	r0, r0, #27
 8001950:	613a      	str	r2, [r7, #16]
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	015d      	lsls	r5, r3, #5
 8001956:	4305      	orrs	r5, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	015c      	lsls	r4, r3, #5
 800195c:	0008      	movs	r0, r1
 800195e:	6038      	str	r0, [r7, #0]
 8001960:	2000      	movs	r0, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	683c      	ldr	r4, [r7, #0]
 8001966:	687d      	ldr	r5, [r7, #4]
 8001968:	0023      	movs	r3, r4
 800196a:	0ed8      	lsrs	r0, r3, #27
 800196c:	002b      	movs	r3, r5
 800196e:	015b      	lsls	r3, r3, #5
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4303      	orrs	r3, r0
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	0023      	movs	r3, r4
 800197a:	015b      	lsls	r3, r3, #5
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	000b      	movs	r3, r1
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	3307      	adds	r3, #7
 8001984:	08db      	lsrs	r3, r3, #3
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	466a      	mov	r2, sp
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	469d      	mov	sp, r3
 800198e:	ab04      	add	r3, sp, #16
 8001990:	3301      	adds	r3, #1
 8001992:	085b      	lsrs	r3, r3, #1
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	62bb      	str	r3, [r7, #40]	@ 0x28

    pixels[0][0] = 0;
 8001998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800199a:	2200      	movs	r2, #0
 800199c:	801a      	strh	r2, [r3, #0]
    pixels[0][1] = _width*_height;
 800199e:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <fillScreen+0xe0>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	5e9b      	ldrsh	r3, [r3, r2]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	4a12      	ldr	r2, [pc, #72]	@ (80019f0 <fillScreen+0xe4>)
 80019a8:	2000      	movs	r0, #0
 80019aa:	5e12      	ldrsh	r2, [r2, r0]
 80019ac:	b292      	uxth	r2, r2
 80019ae:	4353      	muls	r3, r2
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019b4:	805a      	strh	r2, [r3, #2]
    drawImage(pixels, pallette, 0, 0, _width, _height, 1);
 80019b6:	4b0d      	ldr	r3, [pc, #52]	@ (80019ec <fillScreen+0xe0>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	5e9b      	ldrsh	r3, [r3, r2]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	4a0c      	ldr	r2, [pc, #48]	@ (80019f0 <fillScreen+0xe4>)
 80019c0:	2000      	movs	r0, #0
 80019c2:	5e12      	ldrsh	r2, [r2, r0]
 80019c4:	b292      	uxth	r2, r2
 80019c6:	210c      	movs	r1, #12
 80019c8:	2018      	movs	r0, #24
 80019ca:	1809      	adds	r1, r1, r0
 80019cc:	19c9      	adds	r1, r1, r7
 80019ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80019d0:	2401      	movs	r4, #1
 80019d2:	9402      	str	r4, [sp, #8]
 80019d4:	9201      	str	r2, [sp, #4]
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	2300      	movs	r3, #0
 80019da:	2200      	movs	r2, #0
 80019dc:	f000 f80a 	bl	80019f4 <drawImage>
 80019e0:	46b5      	mov	sp, r6
	//fillRect(0, 0, _width, _height, color);
}
 80019e2:	46c0      	nop			@ (mov r8, r8)
 80019e4:	46bd      	mov	sp, r7
 80019e6:	b00d      	add	sp, #52	@ 0x34
 80019e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ea:	46c0      	nop			@ (mov r8, r8)
 80019ec:	2000056c 	.word	0x2000056c
 80019f0:	2000056e 	.word	0x2000056e

080019f4 <drawImage>:

void drawImage(uint16_t image[][2], uint16_t palette[], uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
{
 80019f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f6:	46c6      	mov	lr, r8
 80019f8:	b500      	push	{lr}
 80019fa:	b092      	sub	sp, #72	@ 0x48
 80019fc:	af02      	add	r7, sp, #8
 80019fe:	6278      	str	r0, [r7, #36]	@ 0x24
 8001a00:	6239      	str	r1, [r7, #32]
 8001a02:	0019      	movs	r1, r3
 8001a04:	231e      	movs	r3, #30
 8001a06:	18fb      	adds	r3, r7, r3
 8001a08:	801a      	strh	r2, [r3, #0]
 8001a0a:	231c      	movs	r3, #28
 8001a0c:	18fb      	adds	r3, r7, r3
 8001a0e:	1c0a      	adds	r2, r1, #0
 8001a10:	801a      	strh	r2, [r3, #0]
 8001a12:	466b      	mov	r3, sp
 8001a14:	4698      	mov	r8, r3
	uint16_t i;
	uint16_t j;
	uint16_t totalInd =0;
 8001a16:	2322      	movs	r3, #34	@ 0x22
 8001a18:	2118      	movs	r1, #24
 8001a1a:	185b      	adds	r3, r3, r1
 8001a1c:	19db      	adds	r3, r3, r7
 8001a1e:	2200      	movs	r2, #0
 8001a20:	801a      	strh	r2, [r3, #0]
	uint16_t ind;
	uint16_t count;
	uint16_t bufffer[w*h];
 8001a22:	2340      	movs	r3, #64	@ 0x40
 8001a24:	185b      	adds	r3, r3, r1
 8001a26:	19db      	adds	r3, r3, r7
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	2244      	movs	r2, #68	@ 0x44
 8001a2c:	1852      	adds	r2, r2, r1
 8001a2e:	19d2      	adds	r2, r2, r7
 8001a30:	8812      	ldrh	r2, [r2, #0]
 8001a32:	4353      	muls	r3, r2
 8001a34:	1e5a      	subs	r2, r3, #1
 8001a36:	637a      	str	r2, [r7, #52]	@ 0x34
 8001a38:	001a      	movs	r2, r3
 8001a3a:	60ba      	str	r2, [r7, #8]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	60fa      	str	r2, [r7, #12]
 8001a40:	68b8      	ldr	r0, [r7, #8]
 8001a42:	68f9      	ldr	r1, [r7, #12]
 8001a44:	0002      	movs	r2, r0
 8001a46:	0f12      	lsrs	r2, r2, #28
 8001a48:	000e      	movs	r6, r1
 8001a4a:	0136      	lsls	r6, r6, #4
 8001a4c:	617e      	str	r6, [r7, #20]
 8001a4e:	697e      	ldr	r6, [r7, #20]
 8001a50:	4316      	orrs	r6, r2
 8001a52:	617e      	str	r6, [r7, #20]
 8001a54:	0002      	movs	r2, r0
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	613a      	str	r2, [r7, #16]
 8001a5a:	001a      	movs	r2, r3
 8001a5c:	603a      	str	r2, [r7, #0]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	607a      	str	r2, [r7, #4]
 8001a62:	6838      	ldr	r0, [r7, #0]
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	0002      	movs	r2, r0
 8001a68:	0f12      	lsrs	r2, r2, #28
 8001a6a:	000e      	movs	r6, r1
 8001a6c:	0135      	lsls	r5, r6, #4
 8001a6e:	4315      	orrs	r5, r2
 8001a70:	0002      	movs	r2, r0
 8001a72:	0114      	lsls	r4, r2, #4
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	3307      	adds	r3, #7
 8001a78:	08db      	lsrs	r3, r3, #3
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	466a      	mov	r2, sp
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	469d      	mov	sp, r3
 8001a82:	ab02      	add	r3, sp, #8
 8001a84:	3301      	adds	r3, #1
 8001a86:	085b      	lsrs	r3, r3, #1
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	633b      	str	r3, [r7, #48]	@ 0x30
for(i=0; i<c; i++)
 8001a8c:	2326      	movs	r3, #38	@ 0x26
 8001a8e:	2118      	movs	r1, #24
 8001a90:	185b      	adds	r3, r3, r1
 8001a92:	19db      	adds	r3, r3, r7
 8001a94:	2200      	movs	r2, #0
 8001a96:	801a      	strh	r2, [r3, #0]
 8001a98:	e04d      	b.n	8001b36 <drawImage+0x142>
{
	ind = image[i][0];
 8001a9a:	2126      	movs	r1, #38	@ 0x26
 8001a9c:	2018      	movs	r0, #24
 8001a9e:	180b      	adds	r3, r1, r0
 8001aa0:	19db      	adds	r3, r3, r7
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aa8:	18d2      	adds	r2, r2, r3
 8001aaa:	2316      	movs	r3, #22
 8001aac:	181b      	adds	r3, r3, r0
 8001aae:	19db      	adds	r3, r3, r7
 8001ab0:	8812      	ldrh	r2, [r2, #0]
 8001ab2:	801a      	strh	r2, [r3, #0]
	count = image[i][1];
 8001ab4:	180b      	adds	r3, r1, r0
 8001ab6:	19db      	adds	r3, r3, r7
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001abe:	18d2      	adds	r2, r2, r3
 8001ac0:	2314      	movs	r3, #20
 8001ac2:	181b      	adds	r3, r3, r0
 8001ac4:	19db      	adds	r3, r3, r7
 8001ac6:	8852      	ldrh	r2, [r2, #2]
 8001ac8:	801a      	strh	r2, [r3, #0]
	for(j=0; j<count; j++)
 8001aca:	2324      	movs	r3, #36	@ 0x24
 8001acc:	181b      	adds	r3, r3, r0
 8001ace:	19db      	adds	r3, r3, r7
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	801a      	strh	r2, [r3, #0]
 8001ad4:	e01c      	b.n	8001b10 <drawImage+0x11c>
	{
		bufffer[totalInd++] = palette[ind];
 8001ad6:	2316      	movs	r3, #22
 8001ad8:	2418      	movs	r4, #24
 8001ada:	191b      	adds	r3, r3, r4
 8001adc:	19db      	adds	r3, r3, r7
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	6a3a      	ldr	r2, [r7, #32]
 8001ae4:	18d2      	adds	r2, r2, r3
 8001ae6:	2122      	movs	r1, #34	@ 0x22
 8001ae8:	190b      	adds	r3, r1, r4
 8001aea:	19db      	adds	r3, r3, r7
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	1909      	adds	r1, r1, r4
 8001af0:	19c9      	adds	r1, r1, r7
 8001af2:	1c58      	adds	r0, r3, #1
 8001af4:	8008      	strh	r0, [r1, #0]
 8001af6:	0018      	movs	r0, r3
 8001af8:	8811      	ldrh	r1, [r2, #0]
 8001afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001afc:	0042      	lsls	r2, r0, #1
 8001afe:	52d1      	strh	r1, [r2, r3]
	for(j=0; j<count; j++)
 8001b00:	2124      	movs	r1, #36	@ 0x24
 8001b02:	190b      	adds	r3, r1, r4
 8001b04:	19db      	adds	r3, r3, r7
 8001b06:	881a      	ldrh	r2, [r3, #0]
 8001b08:	190b      	adds	r3, r1, r4
 8001b0a:	19db      	adds	r3, r3, r7
 8001b0c:	3201      	adds	r2, #1
 8001b0e:	801a      	strh	r2, [r3, #0]
 8001b10:	2324      	movs	r3, #36	@ 0x24
 8001b12:	2018      	movs	r0, #24
 8001b14:	181b      	adds	r3, r3, r0
 8001b16:	19da      	adds	r2, r3, r7
 8001b18:	2314      	movs	r3, #20
 8001b1a:	181b      	adds	r3, r3, r0
 8001b1c:	19db      	adds	r3, r3, r7
 8001b1e:	8812      	ldrh	r2, [r2, #0]
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d3d7      	bcc.n	8001ad6 <drawImage+0xe2>
for(i=0; i<c; i++)
 8001b26:	2126      	movs	r1, #38	@ 0x26
 8001b28:	180b      	adds	r3, r1, r0
 8001b2a:	19db      	adds	r3, r3, r7
 8001b2c:	881a      	ldrh	r2, [r3, #0]
 8001b2e:	180b      	adds	r3, r1, r0
 8001b30:	19db      	adds	r3, r3, r7
 8001b32:	3201      	adds	r2, #1
 8001b34:	801a      	strh	r2, [r3, #0]
 8001b36:	2326      	movs	r3, #38	@ 0x26
 8001b38:	2118      	movs	r1, #24
 8001b3a:	185b      	adds	r3, r3, r1
 8001b3c:	19da      	adds	r2, r3, r7
 8001b3e:	2348      	movs	r3, #72	@ 0x48
 8001b40:	185b      	adds	r3, r3, r1
 8001b42:	19db      	adds	r3, r3, r7
 8001b44:	8812      	ldrh	r2, [r2, #0]
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d3a6      	bcc.n	8001a9a <drawImage+0xa6>
	}
}
ST7735_DrawImage(y, x, w, h, bufffer);
 8001b4c:	2344      	movs	r3, #68	@ 0x44
 8001b4e:	185b      	adds	r3, r3, r1
 8001b50:	19db      	adds	r3, r3, r7
 8001b52:	881c      	ldrh	r4, [r3, #0]
 8001b54:	2340      	movs	r3, #64	@ 0x40
 8001b56:	185b      	adds	r3, r3, r1
 8001b58:	19db      	adds	r3, r3, r7
 8001b5a:	881a      	ldrh	r2, [r3, #0]
 8001b5c:	231e      	movs	r3, #30
 8001b5e:	18fb      	adds	r3, r7, r3
 8001b60:	8819      	ldrh	r1, [r3, #0]
 8001b62:	231c      	movs	r3, #28
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	8818      	ldrh	r0, [r3, #0]
 8001b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	0023      	movs	r3, r4
 8001b6e:	f000 fadd 	bl	800212c <ST7735_DrawImage>
 8001b72:	46c5      	mov	sp, r8
}
 8001b74:	46c0      	nop			@ (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b010      	add	sp, #64	@ 0x40
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	46b8      	mov	r8, r7
 8001b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b80 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8001b84:	23a0      	movs	r3, #160	@ 0xa0
 8001b86:	05db      	lsls	r3, r3, #23
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2120      	movs	r1, #32
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f002 f994 	bl	8003eba <HAL_GPIO_WritePin>
}
 8001b92:	46c0      	nop			@ (mov r8, r8)
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001b9c:	23a0      	movs	r3, #160	@ 0xa0
 8001b9e:	05db      	lsls	r3, r3, #23
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	2120      	movs	r1, #32
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f002 f988 	bl	8003eba <HAL_GPIO_WritePin>
}
 8001baa:	46c0      	nop			@ (mov r8, r8)
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <ST7735_Reset>:

void ST7735_Reset()
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8001bb4:	23a0      	movs	r3, #160	@ 0xa0
 8001bb6:	05db      	lsls	r3, r3, #23
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2108      	movs	r1, #8
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f002 f97c 	bl	8003eba <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001bc2:	2005      	movs	r0, #5
 8001bc4:	f001 ff02 	bl	80039cc <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8001bc8:	23a0      	movs	r3, #160	@ 0xa0
 8001bca:	05db      	lsls	r3, r3, #23
 8001bcc:	2201      	movs	r2, #1
 8001bce:	2108      	movs	r1, #8
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f002 f972 	bl	8003eba <HAL_GPIO_WritePin>
}
 8001bd6:	46c0      	nop			@ (mov r8, r8)
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	0002      	movs	r2, r0
 8001be4:	1dfb      	adds	r3, r7, #7
 8001be6:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8001be8:	23a0      	movs	r3, #160	@ 0xa0
 8001bea:	05db      	lsls	r3, r3, #23
 8001bec:	2200      	movs	r2, #0
 8001bee:	2110      	movs	r1, #16
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f002 f962 	bl	8003eba <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	425b      	negs	r3, r3
 8001bfa:	1df9      	adds	r1, r7, #7
 8001bfc:	4803      	ldr	r0, [pc, #12]	@ (8001c0c <ST7735_WriteCommand+0x30>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f004 fabe 	bl	8006180 <HAL_SPI_Transmit>
}
 8001c04:	46c0      	nop			@ (mov r8, r8)
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b002      	add	sp, #8
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000744 	.word	0x20000744

08001c10 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001c1a:	23a0      	movs	r3, #160	@ 0xa0
 8001c1c:	05db      	lsls	r3, r3, #23
 8001c1e:	2201      	movs	r2, #1
 8001c20:	2110      	movs	r1, #16
 8001c22:	0018      	movs	r0, r3
 8001c24:	f002 f949 	bl	8003eba <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	425b      	negs	r3, r3
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4803      	ldr	r0, [pc, #12]	@ (8001c40 <ST7735_WriteData+0x30>)
 8001c34:	f004 faa4 	bl	8006180 <HAL_SPI_Transmit>
}
 8001c38:	46c0      	nop			@ (mov r8, r8)
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b002      	add	sp, #8
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000744 	.word	0x20000744

08001c44 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	220f      	movs	r2, #15
 8001c54:	18ba      	adds	r2, r7, r2
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 8001c5a:	e04a      	b.n	8001cf2 <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	607a      	str	r2, [r7, #4]
 8001c62:	210b      	movs	r1, #11
 8001c64:	187a      	adds	r2, r7, r1
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 8001c6a:	187b      	adds	r3, r7, r1
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f7ff ffb4 	bl	8001bdc <ST7735_WriteCommand>

        numArgs = *addr++;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	200a      	movs	r0, #10
 8001c7c:	183a      	adds	r2, r7, r0
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001c82:	183b      	adds	r3, r7, r0
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	230c      	movs	r3, #12
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	2180      	movs	r1, #128	@ 0x80
 8001c8e:	400a      	ands	r2, r1
 8001c90:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 8001c92:	183b      	adds	r3, r7, r0
 8001c94:	183a      	adds	r2, r7, r0
 8001c96:	7812      	ldrb	r2, [r2, #0]
 8001c98:	217f      	movs	r1, #127	@ 0x7f
 8001c9a:	400a      	ands	r2, r1
 8001c9c:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 8001c9e:	183b      	adds	r3, r7, r0
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d00c      	beq.n	8001cc0 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001ca6:	0004      	movs	r4, r0
 8001ca8:	183b      	adds	r3, r7, r0
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	0011      	movs	r1, r2
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f7ff ffad 	bl	8001c10 <ST7735_WriteData>
            addr += numArgs;
 8001cb6:	193b      	adds	r3, r7, r4
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	18d3      	adds	r3, r2, r3
 8001cbe:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001cc0:	210c      	movs	r1, #12
 8001cc2:	187b      	adds	r3, r7, r1
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d013      	beq.n	8001cf2 <DisplayInit+0xae>
            ms = *addr++;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	607a      	str	r2, [r7, #4]
 8001cd0:	781a      	ldrb	r2, [r3, #0]
 8001cd2:	187b      	adds	r3, r7, r1
 8001cd4:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 8001cd6:	187b      	adds	r3, r7, r1
 8001cd8:	881b      	ldrh	r3, [r3, #0]
 8001cda:	2bff      	cmp	r3, #255	@ 0xff
 8001cdc:	d103      	bne.n	8001ce6 <DisplayInit+0xa2>
 8001cde:	187b      	adds	r3, r7, r1
 8001ce0:	22fa      	movs	r2, #250	@ 0xfa
 8001ce2:	0052      	lsls	r2, r2, #1
 8001ce4:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 8001ce6:	230c      	movs	r3, #12
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	0018      	movs	r0, r3
 8001cee:	f001 fe6d 	bl	80039cc <HAL_Delay>
    while(numCommands--) {
 8001cf2:	220f      	movs	r2, #15
 8001cf4:	18bb      	adds	r3, r7, r2
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	18ba      	adds	r2, r7, r2
 8001cfa:	1e59      	subs	r1, r3, #1
 8001cfc:	7011      	strb	r1, [r2, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1ac      	bne.n	8001c5c <DisplayInit+0x18>
        }
    }
}
 8001d02:	46c0      	nop			@ (mov r8, r8)
 8001d04:	46c0      	nop			@ (mov r8, r8)
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b005      	add	sp, #20
 8001d0a:	bd90      	pop	{r4, r7, pc}

08001d0c <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001d0c:	b5b0      	push	{r4, r5, r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	0005      	movs	r5, r0
 8001d14:	000c      	movs	r4, r1
 8001d16:	0010      	movs	r0, r2
 8001d18:	0019      	movs	r1, r3
 8001d1a:	1dfb      	adds	r3, r7, #7
 8001d1c:	1c2a      	adds	r2, r5, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
 8001d20:	1dbb      	adds	r3, r7, #6
 8001d22:	1c22      	adds	r2, r4, #0
 8001d24:	701a      	strb	r2, [r3, #0]
 8001d26:	1d7b      	adds	r3, r7, #5
 8001d28:	1c02      	adds	r2, r0, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	1c0a      	adds	r2, r1, #0
 8001d30:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001d32:	202a      	movs	r0, #42	@ 0x2a
 8001d34:	f7ff ff52 	bl	8001bdc <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8001d38:	210c      	movs	r1, #12
 8001d3a:	187b      	adds	r3, r7, r1
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
 8001d40:	4b1c      	ldr	r3, [pc, #112]	@ (8001db4 <ST7735_SetAddressWindow+0xa8>)
 8001d42:	781a      	ldrb	r2, [r3, #0]
 8001d44:	1dfb      	adds	r3, r7, #7
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	18d3      	adds	r3, r2, r3
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	187b      	adds	r3, r7, r1
 8001d4e:	705a      	strb	r2, [r3, #1]
 8001d50:	187b      	adds	r3, r7, r1
 8001d52:	2200      	movs	r2, #0
 8001d54:	709a      	strb	r2, [r3, #2]
 8001d56:	4b17      	ldr	r3, [pc, #92]	@ (8001db4 <ST7735_SetAddressWindow+0xa8>)
 8001d58:	781a      	ldrb	r2, [r3, #0]
 8001d5a:	1d7b      	adds	r3, r7, #5
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	18d3      	adds	r3, r2, r3
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	187b      	adds	r3, r7, r1
 8001d64:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8001d66:	000c      	movs	r4, r1
 8001d68:	187b      	adds	r3, r7, r1
 8001d6a:	2104      	movs	r1, #4
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f7ff ff4f 	bl	8001c10 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001d72:	202b      	movs	r0, #43	@ 0x2b
 8001d74:	f7ff ff32 	bl	8001bdc <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <ST7735_SetAddressWindow+0xac>)
 8001d7a:	781a      	ldrb	r2, [r3, #0]
 8001d7c:	1dbb      	adds	r3, r7, #6
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	18d3      	adds	r3, r2, r3
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	0021      	movs	r1, r4
 8001d86:	187b      	adds	r3, r7, r1
 8001d88:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <ST7735_SetAddressWindow+0xac>)
 8001d8c:	781a      	ldrb	r2, [r3, #0]
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	18d3      	adds	r3, r2, r3
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	187b      	adds	r3, r7, r1
 8001d98:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8001d9a:	187b      	adds	r3, r7, r1
 8001d9c:	2104      	movs	r1, #4
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f7ff ff36 	bl	8001c10 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001da4:	202c      	movs	r0, #44	@ 0x2c
 8001da6:	f7ff ff19 	bl	8001bdc <ST7735_WriteCommand>
}
 8001daa:	46c0      	nop			@ (mov r8, r8)
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b004      	add	sp, #16
 8001db0:	bdb0      	pop	{r4, r5, r7, pc}
 8001db2:	46c0      	nop			@ (mov r8, r8)
 8001db4:	20000573 	.word	0x20000573
 8001db8:	20000574 	.word	0x20000574

08001dbc <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	1dfb      	adds	r3, r7, #7
 8001dc6:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 8001dc8:	f7ff feda 	bl	8001b80 <ST7735_Select>
    ST7735_Reset();
 8001dcc:	f7ff fef0 	bl	8001bb0 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e0c <ST7735_Init+0x50>)
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f7ff ff36 	bl	8001c44 <DisplayInit>
    DisplayInit(init_cmds2);
 8001dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001e10 <ST7735_Init+0x54>)
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f7ff ff32 	bl	8001c44 <DisplayInit>
    DisplayInit(init_cmds3);
 8001de0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e14 <ST7735_Init+0x58>)
 8001de2:	0018      	movs	r0, r3
 8001de4:	f7ff ff2e 	bl	8001c44 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8001de8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e18 <ST7735_Init+0x5c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8001dee:	4b0b      	ldr	r3, [pc, #44]	@ (8001e1c <ST7735_Init+0x60>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8001df4:	1dfb      	adds	r3, r7, #7
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f000 f811 	bl	8001e20 <ST7735_SetRotation>
    ST7735_Unselect();
 8001dfe:	f7ff fecb 	bl	8001b98 <ST7735_Unselect>

}
 8001e02:	46c0      	nop			@ (mov r8, r8)
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b002      	add	sp, #8
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	46c0      	nop			@ (mov r8, r8)
 8001e0c:	0800951c 	.word	0x0800951c
 8001e10:	08009554 	.word	0x08009554
 8001e14:	08009564 	.word	0x08009564
 8001e18:	20000571 	.word	0x20000571
 8001e1c:	20000572 	.word	0x20000572

08001e20 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	0002      	movs	r2, r0
 8001e28:	1dfb      	adds	r3, r7, #7
 8001e2a:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8001e2c:	230f      	movs	r3, #15
 8001e2e:	18fb      	adds	r3, r7, r3
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8001e34:	1dfb      	adds	r3, r7, #7
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2203      	movs	r2, #3
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4b36      	ldr	r3, [pc, #216]	@ (8001f18 <ST7735_SetRotation+0xf8>)
 8001e40:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8001e42:	4b35      	ldr	r3, [pc, #212]	@ (8001f18 <ST7735_SetRotation+0xf8>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d041      	beq.n	8001ece <ST7735_SetRotation+0xae>
 8001e4a:	dc53      	bgt.n	8001ef4 <ST7735_SetRotation+0xd4>
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d02b      	beq.n	8001ea8 <ST7735_SetRotation+0x88>
 8001e50:	dc50      	bgt.n	8001ef4 <ST7735_SetRotation+0xd4>
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <ST7735_SetRotation+0x3c>
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d013      	beq.n	8001e82 <ST7735_SetRotation+0x62>
 8001e5a:	e04b      	b.n	8001ef4 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8001e5c:	230f      	movs	r3, #15
 8001e5e:	18fb      	adds	r3, r7, r3
 8001e60:	22c0      	movs	r2, #192	@ 0xc0
 8001e62:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8001e64:	4b2d      	ldr	r3, [pc, #180]	@ (8001f1c <ST7735_SetRotation+0xfc>)
 8001e66:	22a0      	movs	r2, #160	@ 0xa0
 8001e68:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001e6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001f20 <ST7735_SetRotation+0x100>)
 8001e6c:	2280      	movs	r2, #128	@ 0x80
 8001e6e:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8001e70:	4b2c      	ldr	r3, [pc, #176]	@ (8001f24 <ST7735_SetRotation+0x104>)
 8001e72:	781a      	ldrb	r2, [r3, #0]
 8001e74:	4b2c      	ldr	r3, [pc, #176]	@ (8001f28 <ST7735_SetRotation+0x108>)
 8001e76:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8001e78:	4b2c      	ldr	r3, [pc, #176]	@ (8001f2c <ST7735_SetRotation+0x10c>)
 8001e7a:	781a      	ldrb	r2, [r3, #0]
 8001e7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001f30 <ST7735_SetRotation+0x110>)
 8001e7e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001e80:	e038      	b.n	8001ef4 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8001e82:	230f      	movs	r3, #15
 8001e84:	18fb      	adds	r3, r7, r3
 8001e86:	22a0      	movs	r2, #160	@ 0xa0
 8001e88:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8001e8a:	4b25      	ldr	r3, [pc, #148]	@ (8001f20 <ST7735_SetRotation+0x100>)
 8001e8c:	22a0      	movs	r2, #160	@ 0xa0
 8001e8e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001e90:	4b22      	ldr	r3, [pc, #136]	@ (8001f1c <ST7735_SetRotation+0xfc>)
 8001e92:	2280      	movs	r2, #128	@ 0x80
 8001e94:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8001e96:	4b23      	ldr	r3, [pc, #140]	@ (8001f24 <ST7735_SetRotation+0x104>)
 8001e98:	781a      	ldrb	r2, [r3, #0]
 8001e9a:	4b25      	ldr	r3, [pc, #148]	@ (8001f30 <ST7735_SetRotation+0x110>)
 8001e9c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001e9e:	4b23      	ldr	r3, [pc, #140]	@ (8001f2c <ST7735_SetRotation+0x10c>)
 8001ea0:	781a      	ldrb	r2, [r3, #0]
 8001ea2:	4b21      	ldr	r3, [pc, #132]	@ (8001f28 <ST7735_SetRotation+0x108>)
 8001ea4:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001ea6:	e025      	b.n	8001ef4 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8001ea8:	230f      	movs	r3, #15
 8001eaa:	18fb      	adds	r3, r7, r3
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8001eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f1c <ST7735_SetRotation+0xfc>)
 8001eb2:	22a0      	movs	r2, #160	@ 0xa0
 8001eb4:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8001eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f20 <ST7735_SetRotation+0x100>)
 8001eb8:	2280      	movs	r2, #128	@ 0x80
 8001eba:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8001ebc:	4b19      	ldr	r3, [pc, #100]	@ (8001f24 <ST7735_SetRotation+0x104>)
 8001ebe:	781a      	ldrb	r2, [r3, #0]
 8001ec0:	4b19      	ldr	r3, [pc, #100]	@ (8001f28 <ST7735_SetRotation+0x108>)
 8001ec2:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8001ec4:	4b19      	ldr	r3, [pc, #100]	@ (8001f2c <ST7735_SetRotation+0x10c>)
 8001ec6:	781a      	ldrb	r2, [r3, #0]
 8001ec8:	4b19      	ldr	r3, [pc, #100]	@ (8001f30 <ST7735_SetRotation+0x110>)
 8001eca:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001ecc:	e012      	b.n	8001ef4 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8001ece:	230f      	movs	r3, #15
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	2260      	movs	r2, #96	@ 0x60
 8001ed4:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8001ed6:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <ST7735_SetRotation+0x100>)
 8001ed8:	22a0      	movs	r2, #160	@ 0xa0
 8001eda:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001edc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f1c <ST7735_SetRotation+0xfc>)
 8001ede:	2280      	movs	r2, #128	@ 0x80
 8001ee0:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8001ee2:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <ST7735_SetRotation+0x104>)
 8001ee4:	781a      	ldrb	r2, [r3, #0]
 8001ee6:	4b12      	ldr	r3, [pc, #72]	@ (8001f30 <ST7735_SetRotation+0x110>)
 8001ee8:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001eea:	4b10      	ldr	r3, [pc, #64]	@ (8001f2c <ST7735_SetRotation+0x10c>)
 8001eec:	781a      	ldrb	r2, [r3, #0]
 8001eee:	4b0e      	ldr	r3, [pc, #56]	@ (8001f28 <ST7735_SetRotation+0x108>)
 8001ef0:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001ef2:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 8001ef4:	f7ff fe44 	bl	8001b80 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8001ef8:	2036      	movs	r0, #54	@ 0x36
 8001efa:	f7ff fe6f 	bl	8001bdc <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8001efe:	230f      	movs	r3, #15
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	2101      	movs	r1, #1
 8001f04:	0018      	movs	r0, r3
 8001f06:	f7ff fe83 	bl	8001c10 <ST7735_WriteData>
  ST7735_Unselect();
 8001f0a:	f7ff fe45 	bl	8001b98 <ST7735_Unselect>
}
 8001f0e:	46c0      	nop			@ (mov r8, r8)
 8001f10:	46bd      	mov	sp, r7
 8001f12:	b004      	add	sp, #16
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	46c0      	nop			@ (mov r8, r8)
 8001f18:	20000570 	.word	0x20000570
 8001f1c:	2000056e 	.word	0x2000056e
 8001f20:	2000056c 	.word	0x2000056c
 8001f24:	20000571 	.word	0x20000571
 8001f28:	20000573 	.word	0x20000573
 8001f2c:	20000572 	.word	0x20000572
 8001f30:	20000574 	.word	0x20000574

08001f34 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	0004      	movs	r4, r0
 8001f3c:	0008      	movs	r0, r1
 8001f3e:	0011      	movs	r1, r2
 8001f40:	1dbb      	adds	r3, r7, #6
 8001f42:	1c22      	adds	r2, r4, #0
 8001f44:	801a      	strh	r2, [r3, #0]
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	1c02      	adds	r2, r0, #0
 8001f4a:	801a      	strh	r2, [r3, #0]
 8001f4c:	1cbb      	adds	r3, r7, #2
 8001f4e:	1c0a      	adds	r2, r1, #0
 8001f50:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 8001f52:	1dbb      	adds	r3, r7, #6
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	4a1c      	ldr	r2, [pc, #112]	@ (8001fc8 <ST7735_DrawPixel+0x94>)
 8001f58:	2100      	movs	r1, #0
 8001f5a:	5e52      	ldrsh	r2, [r2, r1]
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	da2f      	bge.n	8001fc0 <ST7735_DrawPixel+0x8c>
 8001f60:	1d3b      	adds	r3, r7, #4
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	4a19      	ldr	r2, [pc, #100]	@ (8001fcc <ST7735_DrawPixel+0x98>)
 8001f66:	2100      	movs	r1, #0
 8001f68:	5e52      	ldrsh	r2, [r2, r1]
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	da28      	bge.n	8001fc0 <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 8001f6e:	f7ff fe07 	bl	8001b80 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8001f72:	1dbb      	adds	r3, r7, #6
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	b2d8      	uxtb	r0, r3
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	b2d9      	uxtb	r1, r3
 8001f7e:	1dbb      	adds	r3, r7, #6
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	3301      	adds	r3, #1
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	1d3b      	adds	r3, r7, #4
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	3301      	adds	r3, #1
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	f7ff febb 	bl	8001d0c <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8001f96:	1cbb      	adds	r3, r7, #2
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	0a1b      	lsrs	r3, r3, #8
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	210c      	movs	r1, #12
 8001fa2:	187b      	adds	r3, r7, r1
 8001fa4:	701a      	strb	r2, [r3, #0]
 8001fa6:	1cbb      	adds	r3, r7, #2
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	187b      	adds	r3, r7, r1
 8001fae:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 8001fb0:	187b      	adds	r3, r7, r1
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f7ff fe2b 	bl	8001c10 <ST7735_WriteData>

    ST7735_Unselect();
 8001fba:	f7ff fded 	bl	8001b98 <ST7735_Unselect>
 8001fbe:	e000      	b.n	8001fc2 <ST7735_DrawPixel+0x8e>
        return;
 8001fc0:	46c0      	nop			@ (mov r8, r8)
}
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	b005      	add	sp, #20
 8001fc6:	bd90      	pop	{r4, r7, pc}
 8001fc8:	2000056c 	.word	0x2000056c
 8001fcc:	2000056e 	.word	0x2000056e

08001fd0 <ST7735_FillRectangle>:

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001fd0:	b5b0      	push	{r4, r5, r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	0005      	movs	r5, r0
 8001fd8:	000c      	movs	r4, r1
 8001fda:	0010      	movs	r0, r2
 8001fdc:	0019      	movs	r1, r3
 8001fde:	1dbb      	adds	r3, r7, #6
 8001fe0:	1c2a      	adds	r2, r5, #0
 8001fe2:	801a      	strh	r2, [r3, #0]
 8001fe4:	1d3b      	adds	r3, r7, #4
 8001fe6:	1c22      	adds	r2, r4, #0
 8001fe8:	801a      	strh	r2, [r3, #0]
 8001fea:	1cbb      	adds	r3, r7, #2
 8001fec:	1c02      	adds	r2, r0, #0
 8001fee:	801a      	strh	r2, [r3, #0]
 8001ff0:	003b      	movs	r3, r7
 8001ff2:	1c0a      	adds	r2, r1, #0
 8001ff4:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8001ff6:	1dbb      	adds	r3, r7, #6
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	4a49      	ldr	r2, [pc, #292]	@ (8002120 <ST7735_FillRectangle+0x150>)
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	5e52      	ldrsh	r2, [r2, r1]
 8002000:	4293      	cmp	r3, r2
 8002002:	db00      	blt.n	8002006 <ST7735_FillRectangle+0x36>
 8002004:	e088      	b.n	8002118 <ST7735_FillRectangle+0x148>
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	4a46      	ldr	r2, [pc, #280]	@ (8002124 <ST7735_FillRectangle+0x154>)
 800200c:	2100      	movs	r1, #0
 800200e:	5e52      	ldrsh	r2, [r2, r1]
 8002010:	4293      	cmp	r3, r2
 8002012:	db00      	blt.n	8002016 <ST7735_FillRectangle+0x46>
 8002014:	e080      	b.n	8002118 <ST7735_FillRectangle+0x148>
    if((x + w - 1) >= _width) w = _width - x;
 8002016:	1dbb      	adds	r3, r7, #6
 8002018:	881a      	ldrh	r2, [r3, #0]
 800201a:	1cbb      	adds	r3, r7, #2
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	18d3      	adds	r3, r2, r3
 8002020:	4a3f      	ldr	r2, [pc, #252]	@ (8002120 <ST7735_FillRectangle+0x150>)
 8002022:	2100      	movs	r1, #0
 8002024:	5e52      	ldrsh	r2, [r2, r1]
 8002026:	4293      	cmp	r3, r2
 8002028:	dd08      	ble.n	800203c <ST7735_FillRectangle+0x6c>
 800202a:	4b3d      	ldr	r3, [pc, #244]	@ (8002120 <ST7735_FillRectangle+0x150>)
 800202c:	2200      	movs	r2, #0
 800202e:	5e9b      	ldrsh	r3, [r3, r2]
 8002030:	b299      	uxth	r1, r3
 8002032:	1cbb      	adds	r3, r7, #2
 8002034:	1dba      	adds	r2, r7, #6
 8002036:	8812      	ldrh	r2, [r2, #0]
 8002038:	1a8a      	subs	r2, r1, r2
 800203a:	801a      	strh	r2, [r3, #0]
    if((y + h - 1) >= _height) h = _height - y;
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	881a      	ldrh	r2, [r3, #0]
 8002040:	003b      	movs	r3, r7
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	18d3      	adds	r3, r2, r3
 8002046:	4a37      	ldr	r2, [pc, #220]	@ (8002124 <ST7735_FillRectangle+0x154>)
 8002048:	2100      	movs	r1, #0
 800204a:	5e52      	ldrsh	r2, [r2, r1]
 800204c:	4293      	cmp	r3, r2
 800204e:	dd08      	ble.n	8002062 <ST7735_FillRectangle+0x92>
 8002050:	4b34      	ldr	r3, [pc, #208]	@ (8002124 <ST7735_FillRectangle+0x154>)
 8002052:	2200      	movs	r2, #0
 8002054:	5e9b      	ldrsh	r3, [r3, r2]
 8002056:	b299      	uxth	r1, r3
 8002058:	003b      	movs	r3, r7
 800205a:	1d3a      	adds	r2, r7, #4
 800205c:	8812      	ldrh	r2, [r2, #0]
 800205e:	1a8a      	subs	r2, r1, r2
 8002060:	801a      	strh	r2, [r3, #0]

    ST7735_Select();
 8002062:	f7ff fd8d 	bl	8001b80 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002066:	1dbb      	adds	r3, r7, #6
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	b2d8      	uxtb	r0, r3
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	b2d9      	uxtb	r1, r3
 8002072:	1dbb      	adds	r3, r7, #6
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	b2da      	uxtb	r2, r3
 8002078:	1cbb      	adds	r3, r7, #2
 800207a:	881b      	ldrh	r3, [r3, #0]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	18d3      	adds	r3, r2, r3
 8002080:	b2db      	uxtb	r3, r3
 8002082:	3b01      	subs	r3, #1
 8002084:	b2dc      	uxtb	r4, r3
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	b2da      	uxtb	r2, r3
 800208c:	003b      	movs	r3, r7
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	18d3      	adds	r3, r2, r3
 8002094:	b2db      	uxtb	r3, r3
 8002096:	3b01      	subs	r3, #1
 8002098:	b2db      	uxtb	r3, r3
 800209a:	0022      	movs	r2, r4
 800209c:	f7ff fe36 	bl	8001d0c <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80020a0:	2120      	movs	r1, #32
 80020a2:	187b      	adds	r3, r7, r1
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	0a1b      	lsrs	r3, r3, #8
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	200c      	movs	r0, #12
 80020ae:	183b      	adds	r3, r7, r0
 80020b0:	701a      	strb	r2, [r3, #0]
 80020b2:	187b      	adds	r3, r7, r1
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	183b      	adds	r3, r7, r0
 80020ba:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80020bc:	23a0      	movs	r3, #160	@ 0xa0
 80020be:	05db      	lsls	r3, r3, #23
 80020c0:	2201      	movs	r2, #1
 80020c2:	2110      	movs	r1, #16
 80020c4:	0018      	movs	r0, r3
 80020c6:	f001 fef8 	bl	8003eba <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	003a      	movs	r2, r7
 80020ce:	8812      	ldrh	r2, [r2, #0]
 80020d0:	801a      	strh	r2, [r3, #0]
 80020d2:	e01a      	b.n	800210a <ST7735_FillRectangle+0x13a>
        for(x = w; x > 0; x--) {
 80020d4:	1dbb      	adds	r3, r7, #6
 80020d6:	1cba      	adds	r2, r7, #2
 80020d8:	8812      	ldrh	r2, [r2, #0]
 80020da:	801a      	strh	r2, [r3, #0]
 80020dc:	e00c      	b.n	80020f8 <ST7735_FillRectangle+0x128>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80020de:	2301      	movs	r3, #1
 80020e0:	425b      	negs	r3, r3
 80020e2:	220c      	movs	r2, #12
 80020e4:	18b9      	adds	r1, r7, r2
 80020e6:	4810      	ldr	r0, [pc, #64]	@ (8002128 <ST7735_FillRectangle+0x158>)
 80020e8:	2202      	movs	r2, #2
 80020ea:	f004 f849 	bl	8006180 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80020ee:	1dbb      	adds	r3, r7, #6
 80020f0:	881a      	ldrh	r2, [r3, #0]
 80020f2:	1dbb      	adds	r3, r7, #6
 80020f4:	3a01      	subs	r2, #1
 80020f6:	801a      	strh	r2, [r3, #0]
 80020f8:	1dbb      	adds	r3, r7, #6
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1ee      	bne.n	80020de <ST7735_FillRectangle+0x10e>
    for(y = h; y > 0; y--) {
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	881a      	ldrh	r2, [r3, #0]
 8002104:	1d3b      	adds	r3, r7, #4
 8002106:	3a01      	subs	r2, #1
 8002108:	801a      	strh	r2, [r3, #0]
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1e0      	bne.n	80020d4 <ST7735_FillRectangle+0x104>
        }
    }

    ST7735_Unselect();
 8002112:	f7ff fd41 	bl	8001b98 <ST7735_Unselect>
 8002116:	e000      	b.n	800211a <ST7735_FillRectangle+0x14a>
    if((x >= _width) || (y >= _height)) return;
 8002118:	46c0      	nop			@ (mov r8, r8)
}
 800211a:	46bd      	mov	sp, r7
 800211c:	b004      	add	sp, #16
 800211e:	bdb0      	pop	{r4, r5, r7, pc}
 8002120:	2000056c 	.word	0x2000056c
 8002124:	2000056e 	.word	0x2000056e
 8002128:	20000744 	.word	0x20000744

0800212c <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 800212c:	b5b0      	push	{r4, r5, r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	0005      	movs	r5, r0
 8002134:	000c      	movs	r4, r1
 8002136:	0010      	movs	r0, r2
 8002138:	0019      	movs	r1, r3
 800213a:	1dbb      	adds	r3, r7, #6
 800213c:	1c2a      	adds	r2, r5, #0
 800213e:	801a      	strh	r2, [r3, #0]
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	1c22      	adds	r2, r4, #0
 8002144:	801a      	strh	r2, [r3, #0]
 8002146:	1cbb      	adds	r3, r7, #2
 8002148:	1c02      	adds	r2, r0, #0
 800214a:	801a      	strh	r2, [r3, #0]
 800214c:	003b      	movs	r3, r7
 800214e:	1c0a      	adds	r2, r1, #0
 8002150:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8002152:	1dbb      	adds	r3, r7, #6
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	4a2a      	ldr	r2, [pc, #168]	@ (8002200 <ST7735_DrawImage+0xd4>)
 8002158:	2100      	movs	r1, #0
 800215a:	5e52      	ldrsh	r2, [r2, r1]
 800215c:	4293      	cmp	r3, r2
 800215e:	da47      	bge.n	80021f0 <ST7735_DrawImage+0xc4>
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	4a27      	ldr	r2, [pc, #156]	@ (8002204 <ST7735_DrawImage+0xd8>)
 8002166:	2100      	movs	r1, #0
 8002168:	5e52      	ldrsh	r2, [r2, r1]
 800216a:	4293      	cmp	r3, r2
 800216c:	da40      	bge.n	80021f0 <ST7735_DrawImage+0xc4>
    if((x + w - 1) >= _width) return;
 800216e:	1dbb      	adds	r3, r7, #6
 8002170:	881a      	ldrh	r2, [r3, #0]
 8002172:	1cbb      	adds	r3, r7, #2
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	18d3      	adds	r3, r2, r3
 8002178:	4a21      	ldr	r2, [pc, #132]	@ (8002200 <ST7735_DrawImage+0xd4>)
 800217a:	2100      	movs	r1, #0
 800217c:	5e52      	ldrsh	r2, [r2, r1]
 800217e:	4293      	cmp	r3, r2
 8002180:	dc38      	bgt.n	80021f4 <ST7735_DrawImage+0xc8>
    if((y + h - 1) >= _height) return;
 8002182:	1d3b      	adds	r3, r7, #4
 8002184:	881a      	ldrh	r2, [r3, #0]
 8002186:	003b      	movs	r3, r7
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	18d3      	adds	r3, r2, r3
 800218c:	4a1d      	ldr	r2, [pc, #116]	@ (8002204 <ST7735_DrawImage+0xd8>)
 800218e:	2100      	movs	r1, #0
 8002190:	5e52      	ldrsh	r2, [r2, r1]
 8002192:	4293      	cmp	r3, r2
 8002194:	dc30      	bgt.n	80021f8 <ST7735_DrawImage+0xcc>

    ST7735_Select();
 8002196:	f7ff fcf3 	bl	8001b80 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800219a:	1dbb      	adds	r3, r7, #6
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	b2d8      	uxtb	r0, r3
 80021a0:	1d3b      	adds	r3, r7, #4
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	b2d9      	uxtb	r1, r3
 80021a6:	1dbb      	adds	r3, r7, #6
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	1cbb      	adds	r3, r7, #2
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	18d3      	adds	r3, r2, r3
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	3b01      	subs	r3, #1
 80021b8:	b2dc      	uxtb	r4, r3
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	003b      	movs	r3, r7
 80021c2:	881b      	ldrh	r3, [r3, #0]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	18d3      	adds	r3, r2, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	0022      	movs	r2, r4
 80021d0:	f7ff fd9c 	bl	8001d0c <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 80021d4:	1cbb      	adds	r3, r7, #2
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	003a      	movs	r2, r7
 80021da:	8812      	ldrh	r2, [r2, #0]
 80021dc:	4353      	muls	r3, r2
 80021de:	005a      	lsls	r2, r3, #1
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	0011      	movs	r1, r2
 80021e4:	0018      	movs	r0, r3
 80021e6:	f7ff fd13 	bl	8001c10 <ST7735_WriteData>
    ST7735_Unselect();
 80021ea:	f7ff fcd5 	bl	8001b98 <ST7735_Unselect>
 80021ee:	e004      	b.n	80021fa <ST7735_DrawImage+0xce>
    if((x >= _width) || (y >= _height)) return;
 80021f0:	46c0      	nop			@ (mov r8, r8)
 80021f2:	e002      	b.n	80021fa <ST7735_DrawImage+0xce>
    if((x + w - 1) >= _width) return;
 80021f4:	46c0      	nop			@ (mov r8, r8)
 80021f6:	e000      	b.n	80021fa <ST7735_DrawImage+0xce>
    if((y + h - 1) >= _height) return;
 80021f8:	46c0      	nop			@ (mov r8, r8)
}
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b002      	add	sp, #8
 80021fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002200:	2000056c 	.word	0x2000056c
 8002204:	2000056e 	.word	0x2000056e

08002208 <minmea_tocoord>:
/**
 * Convert a raw coordinate to a floating point DD.DDD... value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tocoord(struct minmea_float *f)
{
 8002208:	b5b0      	push	{r4, r5, r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
    if (f->scale == 0)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <minmea_tocoord+0x14>
        return NAN;
 8002218:	4b1c      	ldr	r3, [pc, #112]	@ (800228c <minmea_tocoord+0x84>)
 800221a:	e033      	b.n	8002284 <minmea_tocoord+0x7c>
    int_least32_t degrees = f->value / (f->scale * 100);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2164      	movs	r1, #100	@ 0x64
 8002226:	434b      	muls	r3, r1
 8002228:	0019      	movs	r1, r3
 800222a:	0010      	movs	r0, r2
 800222c:	f7fe f808 	bl	8000240 <__divsi3>
 8002230:	0003      	movs	r3, r0
 8002232:	60fb      	str	r3, [r7, #12]
    int_least32_t minutes = f->value % (f->scale * 100);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2164      	movs	r1, #100	@ 0x64
 800223e:	434b      	muls	r3, r1
 8002240:	0019      	movs	r1, r3
 8002242:	0010      	movs	r0, r2
 8002244:	f7fe f8e2 	bl	800040c <__aeabi_idivmod>
 8002248:	000b      	movs	r3, r1
 800224a:	60bb      	str	r3, [r7, #8]
    return (float) degrees + (float) minutes / (60 * f->scale);
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f7fe ff93 	bl	8001178 <__aeabi_i2f>
 8002252:	1c04      	adds	r4, r0, #0
 8002254:	68b8      	ldr	r0, [r7, #8]
 8002256:	f7fe ff8f 	bl	8001178 <__aeabi_i2f>
 800225a:	1c05      	adds	r5, r0, #0
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	0013      	movs	r3, r2
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	1a9b      	subs	r3, r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	0018      	movs	r0, r3
 800226a:	f7fe ff85 	bl	8001178 <__aeabi_i2f>
 800226e:	1c03      	adds	r3, r0, #0
 8002270:	1c19      	adds	r1, r3, #0
 8002272:	1c28      	adds	r0, r5, #0
 8002274:	f7fe fb5e 	bl	8000934 <__aeabi_fdiv>
 8002278:	1c03      	adds	r3, r0, #0
 800227a:	1c19      	adds	r1, r3, #0
 800227c:	1c20      	adds	r0, r4, #0
 800227e:	f7fe f9cf 	bl	8000620 <__aeabi_fadd>
 8002282:	1c03      	adds	r3, r0, #0
}
 8002284:	1c18      	adds	r0, r3, #0
 8002286:	46bd      	mov	sp, r7
 8002288:	b004      	add	sp, #16
 800228a:	bdb0      	pop	{r4, r5, r7, pc}
 800228c:	7fc00000 	.word	0x7fc00000

08002290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002290:	b590      	push	{r4, r7, lr}
 8002292:	b087      	sub	sp, #28
 8002294:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002296:	f001 fb13 	bl	80038c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800229a:	f000 f9c7 	bl	800262c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800229e:	f000 fb7d 	bl	800299c <MX_GPIO_Init>
  MX_I2C1_Init();
 80022a2:	f000 fa25 	bl	80026f0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80022a6:	f000 fa63 	bl	8002770 <MX_SPI1_Init>
  MX_TIM17_Init();
 80022aa:	f000 faa1 	bl	80027f0 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 80022ae:	f000 fb27 	bl	8002900 <MX_USART1_UART_Init>
  //MX_USART2_UART_Init();
  //MX_RTC_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80022b2:	4bbe      	ldr	r3, [pc, #760]	@ (80025ac <main+0x31c>)
 80022b4:	2100      	movs	r1, #0
 80022b6:	0018      	movs	r0, r3
 80022b8:	f004 faf0 	bl	800689c <HAL_TIM_PWM_Start>
  ST7735_Unselect();
 80022bc:	f7ff fc6c 	bl	8001b98 <ST7735_Unselect>
  ST7735_Init(1);
 80022c0:	2001      	movs	r0, #1
 80022c2:	f7ff fd7b 	bl	8001dbc <ST7735_Init>
  //testAll();
  buffer[0] = 'A';
 80022c6:	4bba      	ldr	r3, [pc, #744]	@ (80025b0 <main+0x320>)
 80022c8:	2241      	movs	r2, #65	@ 0x41
 80022ca:	701a      	strb	r2, [r3, #0]
  buffer[1] = 'B';
 80022cc:	4bb8      	ldr	r3, [pc, #736]	@ (80025b0 <main+0x320>)
 80022ce:	2242      	movs	r2, #66	@ 0x42
 80022d0:	705a      	strb	r2, [r3, #1]
  TIM17->CCR1 = 5;
 80022d2:	4bb8      	ldr	r3, [pc, #736]	@ (80025b4 <main+0x324>)
 80022d4:	2205      	movs	r2, #5
 80022d6:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM17->PSC=64;
 80022d8:	4bb6      	ldr	r3, [pc, #728]	@ (80025b4 <main+0x324>)
 80022da:	2240      	movs	r2, #64	@ 0x40
 80022dc:	629a      	str	r2, [r3, #40]	@ 0x28
  uint8_t ret=0;
 80022de:	1dfb      	adds	r3, r7, #7
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
    //_ADXL343_Init();

      //Pedometer Setup
      _ADXL343_WriteReg8(0x19, 0x02);
 80022e4:	2102      	movs	r1, #2
 80022e6:	2019      	movs	r0, #25
 80022e8:	f000 fbf0 	bl	8002acc <_ADXL343_WriteReg8>
      ////wait

      _ADXL343_WriteReg8(0x7C, 0x01);
 80022ec:	2101      	movs	r1, #1
 80022ee:	207c      	movs	r0, #124	@ 0x7c
 80022f0:	f000 fbec 	bl	8002acc <_ADXL343_WriteReg8>
       _ADXL343_WriteReg8(0x1A, 0x38);
 80022f4:	2138      	movs	r1, #56	@ 0x38
 80022f6:	201a      	movs	r0, #26
 80022f8:	f000 fbe8 	bl	8002acc <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1B, 0x04);
 80022fc:	2104      	movs	r1, #4
 80022fe:	201b      	movs	r0, #27
 8002300:	f000 fbe4 	bl	8002acc <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1F, 0x80);
 8002304:	2180      	movs	r1, #128	@ 0x80
 8002306:	201f      	movs	r0, #31
 8002308:	f000 fbe0 	bl	8002acc <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x21, 0x80);
 800230c:	2180      	movs	r1, #128	@ 0x80
 800230e:	2021      	movs	r0, #33	@ 0x21
 8002310:	f000 fbdc 	bl	8002acc <_ADXL343_WriteReg8>



      //  //Step Counter
      _ADXL343_WriteReg8(0x18, 0x01); // enable walking mode
 8002314:	2101      	movs	r1, #1
 8002316:	2018      	movs	r0, #24
 8002318:	f000 fbd8 	bl	8002acc <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x20, 0x01); // enable step interrupt
 800231c:	2101      	movs	r1, #1
 800231e:	2020      	movs	r0, #32
 8002320:	f000 fbd4 	bl	8002acc <_ADXL343_WriteReg8>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  steps=0;
 8002324:	4ba4      	ldr	r3, [pc, #656]	@ (80025b8 <main+0x328>)
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
	  if((whileI++)%3==0)
 800232a:	4ba4      	ldr	r3, [pc, #656]	@ (80025bc <main+0x32c>)
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	b291      	uxth	r1, r2
 8002334:	4aa1      	ldr	r2, [pc, #644]	@ (80025bc <main+0x32c>)
 8002336:	8011      	strh	r1, [r2, #0]
 8002338:	2103      	movs	r1, #3
 800233a:	0018      	movs	r0, r3
 800233c:	f7fd ff7c 	bl	8000238 <__aeabi_uidivmod>
 8002340:	000b      	movs	r3, r1
 8002342:	b29b      	uxth	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10f      	bne.n	8002368 <main+0xd8>
		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET)
 8002348:	4b9d      	ldr	r3, [pc, #628]	@ (80025c0 <main+0x330>)
 800234a:	2102      	movs	r1, #2
 800234c:	0018      	movs	r0, r3
 800234e:	f001 fd97 	bl	8003e80 <HAL_GPIO_ReadPin>
 8002352:	0003      	movs	r3, r0
 8002354:	2b01      	cmp	r3, #1
 8002356:	d104      	bne.n	8002362 <main+0xd2>
		  		  fillScreen(WHITE);
 8002358:	4b9a      	ldr	r3, [pc, #616]	@ (80025c4 <main+0x334>)
 800235a:	0018      	movs	r0, r3
 800235c:	f7ff fad6 	bl	800190c <fillScreen>
 8002360:	e002      	b.n	8002368 <main+0xd8>
		  	  else
		  		  fillScreen(BLACK);
 8002362:	2000      	movs	r0, #0
 8002364:	f7ff fad2 	bl	800190c <fillScreen>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET)
 8002368:	2380      	movs	r3, #128	@ 0x80
 800236a:	011a      	lsls	r2, r3, #4
 800236c:	23a0      	movs	r3, #160	@ 0xa0
 800236e:	05db      	lsls	r3, r3, #23
 8002370:	0011      	movs	r1, r2
 8002372:	0018      	movs	r0, r3
 8002374:	f001 fd84 	bl	8003e80 <HAL_GPIO_ReadPin>
 8002378:	0003      	movs	r3, r0
 800237a:	2b01      	cmp	r3, #1
 800237c:	d106      	bne.n	800238c <main+0xfc>
		  petXPos-=5;
 800237e:	4b92      	ldr	r3, [pc, #584]	@ (80025c8 <main+0x338>)
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	3b05      	subs	r3, #5
 8002386:	b29a      	uxth	r2, r3
 8002388:	4b8f      	ldr	r3, [pc, #572]	@ (80025c8 <main+0x338>)
 800238a:	801a      	strh	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET)
 800238c:	2380      	movs	r3, #128	@ 0x80
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	23a0      	movs	r3, #160	@ 0xa0
 8002392:	05db      	lsls	r3, r3, #23
 8002394:	0011      	movs	r1, r2
 8002396:	0018      	movs	r0, r3
 8002398:	f001 fd72 	bl	8003e80 <HAL_GPIO_ReadPin>
 800239c:	0003      	movs	r3, r0
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d106      	bne.n	80023b0 <main+0x120>
		  petXPos+=5;
 80023a2:	4b89      	ldr	r3, [pc, #548]	@ (80025c8 <main+0x338>)
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	3305      	adds	r3, #5
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	4b86      	ldr	r3, [pc, #536]	@ (80025c8 <main+0x338>)
 80023ae:	801a      	strh	r2, [r3, #0]
	  if(petXPos<3)petXPos=0;
 80023b0:	4b85      	ldr	r3, [pc, #532]	@ (80025c8 <main+0x338>)
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d802      	bhi.n	80023c0 <main+0x130>
 80023ba:	4b83      	ldr	r3, [pc, #524]	@ (80025c8 <main+0x338>)
 80023bc:	2200      	movs	r2, #0
 80023be:	801a      	strh	r2, [r3, #0]
	  if(petXPos>60) petXPos=60;
 80023c0:	4b81      	ldr	r3, [pc, #516]	@ (80025c8 <main+0x338>)
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	2b3c      	cmp	r3, #60	@ 0x3c
 80023c8:	d902      	bls.n	80023d0 <main+0x140>
 80023ca:	4b7f      	ldr	r3, [pc, #508]	@ (80025c8 <main+0x338>)
 80023cc:	223c      	movs	r2, #60	@ 0x3c
 80023ce:	801a      	strh	r2, [r3, #0]
	  freq = freqs[(toneIndex++)%8];
 80023d0:	4b7e      	ldr	r3, [pc, #504]	@ (80025cc <main+0x33c>)
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	b291      	uxth	r1, r2
 80023da:	4a7c      	ldr	r2, [pc, #496]	@ (80025cc <main+0x33c>)
 80023dc:	8011      	strh	r1, [r2, #0]
 80023de:	001a      	movs	r2, r3
 80023e0:	2307      	movs	r3, #7
 80023e2:	4013      	ands	r3, r2
 80023e4:	4a7a      	ldr	r2, [pc, #488]	@ (80025d0 <main+0x340>)
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	18d3      	adds	r3, r2, r3
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	4979      	ldr	r1, [pc, #484]	@ (80025d4 <main+0x344>)
 80023f0:	600a      	str	r2, [r1, #0]
 80023f2:	604b      	str	r3, [r1, #4]
	  TIM17->ARR=(uint32_t)(987*(float)1000/(float)freq);
 80023f4:	4b77      	ldr	r3, [pc, #476]	@ (80025d4 <main+0x344>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	0010      	movs	r0, r2
 80023fc:	0019      	movs	r1, r3
 80023fe:	f7fe ff07 	bl	8001210 <__aeabi_d2f>
 8002402:	1c03      	adds	r3, r0, #0
 8002404:	1c19      	adds	r1, r3, #0
 8002406:	4874      	ldr	r0, [pc, #464]	@ (80025d8 <main+0x348>)
 8002408:	f7fe fa94 	bl	8000934 <__aeabi_fdiv>
 800240c:	1c03      	adds	r3, r0, #0
 800240e:	4c69      	ldr	r4, [pc, #420]	@ (80025b4 <main+0x324>)
 8002410:	1c18      	adds	r0, r3, #0
 8002412:	f7fe f821 	bl	8000458 <__aeabi_f2uiz>
 8002416:	0003      	movs	r3, r0
 8002418:	62e3      	str	r3, [r4, #44]	@ 0x2c
	  //fillScreen(WHITE);
	  drawImage(testImage, palette, petXPos, 40, 64, 64, 296);
 800241a:	4b6b      	ldr	r3, [pc, #428]	@ (80025c8 <main+0x338>)
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	b29a      	uxth	r2, r3
 8002420:	496e      	ldr	r1, [pc, #440]	@ (80025dc <main+0x34c>)
 8002422:	486f      	ldr	r0, [pc, #444]	@ (80025e0 <main+0x350>)
 8002424:	2394      	movs	r3, #148	@ 0x94
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	9302      	str	r3, [sp, #8]
 800242a:	2340      	movs	r3, #64	@ 0x40
 800242c:	9301      	str	r3, [sp, #4]
 800242e:	2340      	movs	r3, #64	@ 0x40
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	2328      	movs	r3, #40	@ 0x28
 8002434:	f7ff fade 	bl	80019f4 <drawImage>
	  //_ADXL343_ReadReg8(0x06, &accelZ, 1);
	  //_ADXL343_ReadReg8(0x07, &accelX, 1);
	  //_ADXL343_ReadReg8(0x08, &accelY, 1);
	  //_ADXL343_ReadReg8(0x09, &accelZ, 1);

	  sprintf(buffer2, "X:%d - Y:%d - Z:%d ", accelX, accelY, accelZ);
 8002438:	4b6a      	ldr	r3, [pc, #424]	@ (80025e4 <main+0x354>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	001a      	movs	r2, r3
 800243e:	4b6a      	ldr	r3, [pc, #424]	@ (80025e8 <main+0x358>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	001c      	movs	r4, r3
 8002444:	4b69      	ldr	r3, [pc, #420]	@ (80025ec <main+0x35c>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	4969      	ldr	r1, [pc, #420]	@ (80025f0 <main+0x360>)
 800244a:	486a      	ldr	r0, [pc, #424]	@ (80025f4 <main+0x364>)
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	0023      	movs	r3, r4
 8002450:	f006 f8a6 	bl	80085a0 <siprintf>
	  drawString(0, 10, buffer2, BLACK, GREEN, 1, 1);
 8002454:	4a67      	ldr	r2, [pc, #412]	@ (80025f4 <main+0x364>)
 8002456:	2301      	movs	r3, #1
 8002458:	9302      	str	r3, [sp, #8]
 800245a:	2301      	movs	r3, #1
 800245c:	9301      	str	r3, [sp, #4]
 800245e:	4b66      	ldr	r3, [pc, #408]	@ (80025f8 <main+0x368>)
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	2300      	movs	r3, #0
 8002464:	210a      	movs	r1, #10
 8002466:	2000      	movs	r0, #0
 8002468:	f7ff f8e0 	bl	800162c <drawString>

	  _ADXL343_ReadReg8(0x15, &steps, 1);
 800246c:	4b52      	ldr	r3, [pc, #328]	@ (80025b8 <main+0x328>)
 800246e:	2201      	movs	r2, #1
 8002470:	0019      	movs	r1, r3
 8002472:	2015      	movs	r0, #21
 8002474:	f000 faf8 	bl	8002a68 <_ADXL343_ReadReg8>
	  sprintf(buffer2, "Steps: %d ", steps);
 8002478:	4b4f      	ldr	r3, [pc, #316]	@ (80025b8 <main+0x328>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	001a      	movs	r2, r3
 800247e:	495f      	ldr	r1, [pc, #380]	@ (80025fc <main+0x36c>)
 8002480:	4b5c      	ldr	r3, [pc, #368]	@ (80025f4 <main+0x364>)
 8002482:	0018      	movs	r0, r3
 8002484:	f006 f88c 	bl	80085a0 <siprintf>
	  drawString(0, 20, buffer2, BLACK, GREEN, 1, 1);
 8002488:	4a5a      	ldr	r2, [pc, #360]	@ (80025f4 <main+0x364>)
 800248a:	2301      	movs	r3, #1
 800248c:	9302      	str	r3, [sp, #8]
 800248e:	2301      	movs	r3, #1
 8002490:	9301      	str	r3, [sp, #4]
 8002492:	4b59      	ldr	r3, [pc, #356]	@ (80025f8 <main+0x368>)
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	2300      	movs	r3, #0
 8002498:	2114      	movs	r1, #20
 800249a:	2000      	movs	r0, #0
 800249c:	f7ff f8c6 	bl	800162c <drawString>

	  	  //only run this code every few seconds
		  while(HAL_UART_Receive(&huart1, &(buffer[i]), 1, 0xFFFF)==HAL_OK)
 80024a0:	e075      	b.n	800258e <main+0x2fe>
		  	{
			  if(buffer[i]&&buffer[i]=='\n')
 80024a2:	4b57      	ldr	r3, [pc, #348]	@ (8002600 <main+0x370>)
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	001a      	movs	r2, r3
 80024aa:	4b41      	ldr	r3, [pc, #260]	@ (80025b0 <main+0x320>)
 80024ac:	5c9b      	ldrb	r3, [r3, r2]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d066      	beq.n	8002580 <main+0x2f0>
 80024b2:	4b53      	ldr	r3, [pc, #332]	@ (8002600 <main+0x370>)
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	001a      	movs	r2, r3
 80024ba:	4b3d      	ldr	r3, [pc, #244]	@ (80025b0 <main+0x320>)
 80024bc:	5c9b      	ldrb	r3, [r3, r2]
 80024be:	2b0a      	cmp	r3, #10
 80024c0:	d15e      	bne.n	8002580 <main+0x2f0>
				  {


				  if(minmea_parse_rmc(&rmcStruct, &(buffer[1]))){
 80024c2:	4a50      	ldr	r2, [pc, #320]	@ (8002604 <main+0x374>)
 80024c4:	4b50      	ldr	r3, [pc, #320]	@ (8002608 <main+0x378>)
 80024c6:	0011      	movs	r1, r2
 80024c8:	0018      	movs	r0, r3
 80024ca:	f000 ff1b 	bl	8003304 <minmea_parse_rmc>
 80024ce:	1e03      	subs	r3, r0, #0
 80024d0:	d038      	beq.n	8002544 <main+0x2b4>
				      //printf("FIX?:");
				      lat = minmea_tocoord(&rmcStruct.latitude);
 80024d2:	4b4e      	ldr	r3, [pc, #312]	@ (800260c <main+0x37c>)
 80024d4:	0018      	movs	r0, r3
 80024d6:	f7ff fe97 	bl	8002208 <minmea_tocoord>
 80024da:	1c02      	adds	r2, r0, #0
 80024dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002610 <main+0x380>)
 80024de:	601a      	str	r2, [r3, #0]
				      lon = minmea_tocoord(&rmcStruct.longitude);
 80024e0:	4b4c      	ldr	r3, [pc, #304]	@ (8002614 <main+0x384>)
 80024e2:	0018      	movs	r0, r3
 80024e4:	f7ff fe90 	bl	8002208 <minmea_tocoord>
 80024e8:	1c02      	adds	r2, r0, #0
 80024ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002618 <main+0x388>)
 80024ec:	601a      	str	r2, [r3, #0]
				      sprintf(buffer, "lat:%d, %d", (int)(lat*100), (int)(lon*100));
 80024ee:	4b48      	ldr	r3, [pc, #288]	@ (8002610 <main+0x380>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	494a      	ldr	r1, [pc, #296]	@ (800261c <main+0x38c>)
 80024f4:	1c18      	adds	r0, r3, #0
 80024f6:	f7fe fb3d 	bl	8000b74 <__aeabi_fmul>
 80024fa:	1c03      	adds	r3, r0, #0
 80024fc:	1c18      	adds	r0, r3, #0
 80024fe:	f7fe fe1b 	bl	8001138 <__aeabi_f2iz>
 8002502:	0004      	movs	r4, r0
 8002504:	4b44      	ldr	r3, [pc, #272]	@ (8002618 <main+0x388>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4944      	ldr	r1, [pc, #272]	@ (800261c <main+0x38c>)
 800250a:	1c18      	adds	r0, r3, #0
 800250c:	f7fe fb32 	bl	8000b74 <__aeabi_fmul>
 8002510:	1c03      	adds	r3, r0, #0
 8002512:	1c18      	adds	r0, r3, #0
 8002514:	f7fe fe10 	bl	8001138 <__aeabi_f2iz>
 8002518:	0003      	movs	r3, r0
 800251a:	4941      	ldr	r1, [pc, #260]	@ (8002620 <main+0x390>)
 800251c:	4824      	ldr	r0, [pc, #144]	@ (80025b0 <main+0x320>)
 800251e:	0022      	movs	r2, r4
 8002520:	f006 f83e 	bl	80085a0 <siprintf>
				      if(rmcStruct.valid!=0)
 8002524:	4b38      	ldr	r3, [pc, #224]	@ (8002608 <main+0x378>)
 8002526:	7c1b      	ldrb	r3, [r3, #16]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00b      	beq.n	8002544 <main+0x2b4>
				      {drawString(0, 30, buffer, BLACK, GREEN, 1, 1);
 800252c:	4a20      	ldr	r2, [pc, #128]	@ (80025b0 <main+0x320>)
 800252e:	2301      	movs	r3, #1
 8002530:	9302      	str	r3, [sp, #8]
 8002532:	2301      	movs	r3, #1
 8002534:	9301      	str	r3, [sp, #4]
 8002536:	4b30      	ldr	r3, [pc, #192]	@ (80025f8 <main+0x368>)
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	2300      	movs	r3, #0
 800253c:	211e      	movs	r1, #30
 800253e:	2000      	movs	r0, #0
 8002540:	f7ff f874 	bl	800162c <drawString>
				    }
				  }
				  //buffer[0]='_';
				  //drawString(70, 70, buffer, BLACK, GREEN, 1, 1);
				  for(ii=0;ii<=i;ii++) buffer[ii]=0;
 8002544:	4b37      	ldr	r3, [pc, #220]	@ (8002624 <main+0x394>)
 8002546:	2200      	movs	r2, #0
 8002548:	801a      	strh	r2, [r3, #0]
 800254a:	e00d      	b.n	8002568 <main+0x2d8>
 800254c:	4b35      	ldr	r3, [pc, #212]	@ (8002624 <main+0x394>)
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	b29b      	uxth	r3, r3
 8002552:	001a      	movs	r2, r3
 8002554:	4b16      	ldr	r3, [pc, #88]	@ (80025b0 <main+0x320>)
 8002556:	2100      	movs	r1, #0
 8002558:	5499      	strb	r1, [r3, r2]
 800255a:	4b32      	ldr	r3, [pc, #200]	@ (8002624 <main+0x394>)
 800255c:	881b      	ldrh	r3, [r3, #0]
 800255e:	b29b      	uxth	r3, r3
 8002560:	3301      	adds	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	4b2f      	ldr	r3, [pc, #188]	@ (8002624 <main+0x394>)
 8002566:	801a      	strh	r2, [r3, #0]
 8002568:	4b2e      	ldr	r3, [pc, #184]	@ (8002624 <main+0x394>)
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	b29a      	uxth	r2, r3
 800256e:	4b24      	ldr	r3, [pc, #144]	@ (8002600 <main+0x370>)
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	429a      	cmp	r2, r3
 8002576:	d9e9      	bls.n	800254c <main+0x2bc>
				 i=0;
 8002578:	4b21      	ldr	r3, [pc, #132]	@ (8002600 <main+0x370>)
 800257a:	2200      	movs	r2, #0
 800257c:	801a      	strh	r2, [r3, #0]
				 break;
 800257e:	e014      	b.n	80025aa <main+0x31a>
				  }
			  	        i++;
 8002580:	4b1f      	ldr	r3, [pc, #124]	@ (8002600 <main+0x370>)
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	b29b      	uxth	r3, r3
 8002586:	3301      	adds	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	4b1d      	ldr	r3, [pc, #116]	@ (8002600 <main+0x370>)
 800258c:	801a      	strh	r2, [r3, #0]
		  while(HAL_UART_Receive(&huart1, &(buffer[i]), 1, 0xFFFF)==HAL_OK)
 800258e:	4b1c      	ldr	r3, [pc, #112]	@ (8002600 <main+0x370>)
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	b29b      	uxth	r3, r3
 8002594:	001a      	movs	r2, r3
 8002596:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <main+0x320>)
 8002598:	18d1      	adds	r1, r2, r3
 800259a:	4b0a      	ldr	r3, [pc, #40]	@ (80025c4 <main+0x334>)
 800259c:	4822      	ldr	r0, [pc, #136]	@ (8002628 <main+0x398>)
 800259e:	2201      	movs	r2, #1
 80025a0:	f004 ffde 	bl	8007560 <HAL_UART_Receive>
 80025a4:	1e03      	subs	r3, r0, #0
 80025a6:	d100      	bne.n	80025aa <main+0x31a>
 80025a8:	e77b      	b.n	80024a2 <main+0x212>
	  steps=0;
 80025aa:	e6bb      	b.n	8002324 <main+0x94>
 80025ac:	200007a8 	.word	0x200007a8
 80025b0:	200005c8 	.word	0x200005c8
 80025b4:	40014800 	.word	0x40014800
 80025b8:	200006c3 	.word	0x200006c3
 80025bc:	2000057a 	.word	0x2000057a
 80025c0:	50000800 	.word	0x50000800
 80025c4:	0000ffff 	.word	0x0000ffff
 80025c8:	2000057c 	.word	0x2000057c
 80025cc:	20000658 	.word	0x20000658
 80025d0:	200004b0 	.word	0x200004b0
 80025d4:	20000650 	.word	0x20000650
 80025d8:	4970f780 	.word	0x4970f780
 80025dc:	200004a0 	.word	0x200004a0
 80025e0:	20000000 	.word	0x20000000
 80025e4:	200006c0 	.word	0x200006c0
 80025e8:	200006c1 	.word	0x200006c1
 80025ec:	200006c2 	.word	0x200006c2
 80025f0:	08008ef4 	.word	0x08008ef4
 80025f4:	2000065c 	.word	0x2000065c
 80025f8:	ffffe007 	.word	0xffffe007
 80025fc:	08008f08 	.word	0x08008f08
 8002600:	20000576 	.word	0x20000576
 8002604:	200005c9 	.word	0x200005c9
 8002608:	20000580 	.word	0x20000580
 800260c:	20000594 	.word	0x20000594
 8002610:	20000648 	.word	0x20000648
 8002614:	2000059c 	.word	0x2000059c
 8002618:	2000064c 	.word	0x2000064c
 800261c:	42c80000 	.word	0x42c80000
 8002620:	08008f14 	.word	0x08008f14
 8002624:	20000578 	.word	0x20000578
 8002628:	200007f4 	.word	0x200007f4

0800262c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b095      	sub	sp, #84	@ 0x54
 8002630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002632:	2414      	movs	r4, #20
 8002634:	193b      	adds	r3, r7, r4
 8002636:	0018      	movs	r0, r3
 8002638:	233c      	movs	r3, #60	@ 0x3c
 800263a:	001a      	movs	r2, r3
 800263c:	2100      	movs	r1, #0
 800263e:	f005 ffcf 	bl	80085e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002642:	1d3b      	adds	r3, r7, #4
 8002644:	0018      	movs	r0, r3
 8002646:	2310      	movs	r3, #16
 8002648:	001a      	movs	r2, r3
 800264a:	2100      	movs	r1, #0
 800264c:	f005 ffc8 	bl	80085e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002650:	2380      	movs	r3, #128	@ 0x80
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	0018      	movs	r0, r3
 8002656:	f002 fa91 	bl	8004b7c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800265a:	193b      	adds	r3, r7, r4
 800265c:	220a      	movs	r2, #10
 800265e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002660:	193b      	adds	r3, r7, r4
 8002662:	2280      	movs	r2, #128	@ 0x80
 8002664:	0052      	lsls	r2, r2, #1
 8002666:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002668:	0021      	movs	r1, r4
 800266a:	187b      	adds	r3, r7, r1
 800266c:	2200      	movs	r2, #0
 800266e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002670:	187b      	adds	r3, r7, r1
 8002672:	2240      	movs	r2, #64	@ 0x40
 8002674:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002676:	187b      	adds	r3, r7, r1
 8002678:	2201      	movs	r2, #1
 800267a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800267c:	187b      	adds	r3, r7, r1
 800267e:	2202      	movs	r2, #2
 8002680:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002682:	187b      	adds	r3, r7, r1
 8002684:	2202      	movs	r2, #2
 8002686:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002688:	187b      	adds	r3, r7, r1
 800268a:	2200      	movs	r2, #0
 800268c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 800268e:	187b      	adds	r3, r7, r1
 8002690:	2208      	movs	r2, #8
 8002692:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002694:	187b      	adds	r3, r7, r1
 8002696:	2280      	movs	r2, #128	@ 0x80
 8002698:	0292      	lsls	r2, r2, #10
 800269a:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800269c:	187b      	adds	r3, r7, r1
 800269e:	2280      	movs	r2, #128	@ 0x80
 80026a0:	0492      	lsls	r2, r2, #18
 80026a2:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80026a4:	187b      	adds	r3, r7, r1
 80026a6:	2280      	movs	r2, #128	@ 0x80
 80026a8:	0592      	lsls	r2, r2, #22
 80026aa:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ac:	187b      	adds	r3, r7, r1
 80026ae:	0018      	movs	r0, r3
 80026b0:	f002 fab0 	bl	8004c14 <HAL_RCC_OscConfig>
 80026b4:	1e03      	subs	r3, r0, #0
 80026b6:	d001      	beq.n	80026bc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80026b8:	f000 fa68 	bl	8002b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026bc:	1d3b      	adds	r3, r7, #4
 80026be:	2207      	movs	r2, #7
 80026c0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026c2:	1d3b      	adds	r3, r7, #4
 80026c4:	2202      	movs	r2, #2
 80026c6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026c8:	1d3b      	adds	r3, r7, #4
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026ce:	1d3b      	adds	r3, r7, #4
 80026d0:	2200      	movs	r2, #0
 80026d2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	2102      	movs	r1, #2
 80026d8:	0018      	movs	r0, r3
 80026da:	f002 fdfb 	bl	80052d4 <HAL_RCC_ClockConfig>
 80026de:	1e03      	subs	r3, r0, #0
 80026e0:	d001      	beq.n	80026e6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80026e2:	f000 fa53 	bl	8002b8c <Error_Handler>
  }
}
 80026e6:	46c0      	nop			@ (mov r8, r8)
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b015      	add	sp, #84	@ 0x54
 80026ec:	bd90      	pop	{r4, r7, pc}
	...

080026f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002764 <MX_I2C1_Init+0x74>)
 80026f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002768 <MX_I2C1_Init+0x78>)
 80026f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 80026fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002764 <MX_I2C1_Init+0x74>)
 80026fc:	4a1b      	ldr	r2, [pc, #108]	@ (800276c <MX_I2C1_Init+0x7c>)
 80026fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002700:	4b18      	ldr	r3, [pc, #96]	@ (8002764 <MX_I2C1_Init+0x74>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002706:	4b17      	ldr	r3, [pc, #92]	@ (8002764 <MX_I2C1_Init+0x74>)
 8002708:	2201      	movs	r2, #1
 800270a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800270c:	4b15      	ldr	r3, [pc, #84]	@ (8002764 <MX_I2C1_Init+0x74>)
 800270e:	2200      	movs	r2, #0
 8002710:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002712:	4b14      	ldr	r3, [pc, #80]	@ (8002764 <MX_I2C1_Init+0x74>)
 8002714:	2200      	movs	r2, #0
 8002716:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002718:	4b12      	ldr	r3, [pc, #72]	@ (8002764 <MX_I2C1_Init+0x74>)
 800271a:	2200      	movs	r2, #0
 800271c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800271e:	4b11      	ldr	r3, [pc, #68]	@ (8002764 <MX_I2C1_Init+0x74>)
 8002720:	2200      	movs	r2, #0
 8002722:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002724:	4b0f      	ldr	r3, [pc, #60]	@ (8002764 <MX_I2C1_Init+0x74>)
 8002726:	2200      	movs	r2, #0
 8002728:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800272a:	4b0e      	ldr	r3, [pc, #56]	@ (8002764 <MX_I2C1_Init+0x74>)
 800272c:	0018      	movs	r0, r3
 800272e:	f001 fbe1 	bl	8003ef4 <HAL_I2C_Init>
 8002732:	1e03      	subs	r3, r0, #0
 8002734:	d001      	beq.n	800273a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002736:	f000 fa29 	bl	8002b8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800273a:	4b0a      	ldr	r3, [pc, #40]	@ (8002764 <MX_I2C1_Init+0x74>)
 800273c:	2100      	movs	r1, #0
 800273e:	0018      	movs	r0, r3
 8002740:	f002 f984 	bl	8004a4c <HAL_I2CEx_ConfigAnalogFilter>
 8002744:	1e03      	subs	r3, r0, #0
 8002746:	d001      	beq.n	800274c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002748:	f000 fa20 	bl	8002b8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800274c:	4b05      	ldr	r3, [pc, #20]	@ (8002764 <MX_I2C1_Init+0x74>)
 800274e:	2100      	movs	r1, #0
 8002750:	0018      	movs	r0, r3
 8002752:	f002 f9c7 	bl	8004ae4 <HAL_I2CEx_ConfigDigitalFilter>
 8002756:	1e03      	subs	r3, r0, #0
 8002758:	d001      	beq.n	800275e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800275a:	f000 fa17 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800275e:	46c0      	nop			@ (mov r8, r8)
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	200006c4 	.word	0x200006c4
 8002768:	40005400 	.word	0x40005400
 800276c:	10b17db5 	.word	0x10b17db5

08002770 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002774:	4b1c      	ldr	r3, [pc, #112]	@ (80027e8 <MX_SPI1_Init+0x78>)
 8002776:	4a1d      	ldr	r2, [pc, #116]	@ (80027ec <MX_SPI1_Init+0x7c>)
 8002778:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800277a:	4b1b      	ldr	r3, [pc, #108]	@ (80027e8 <MX_SPI1_Init+0x78>)
 800277c:	2282      	movs	r2, #130	@ 0x82
 800277e:	0052      	lsls	r2, r2, #1
 8002780:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002782:	4b19      	ldr	r3, [pc, #100]	@ (80027e8 <MX_SPI1_Init+0x78>)
 8002784:	2280      	movs	r2, #128	@ 0x80
 8002786:	0212      	lsls	r2, r2, #8
 8002788:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800278a:	4b17      	ldr	r3, [pc, #92]	@ (80027e8 <MX_SPI1_Init+0x78>)
 800278c:	22e0      	movs	r2, #224	@ 0xe0
 800278e:	00d2      	lsls	r2, r2, #3
 8002790:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002792:	4b15      	ldr	r3, [pc, #84]	@ (80027e8 <MX_SPI1_Init+0x78>)
 8002794:	2200      	movs	r2, #0
 8002796:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002798:	4b13      	ldr	r3, [pc, #76]	@ (80027e8 <MX_SPI1_Init+0x78>)
 800279a:	2200      	movs	r2, #0
 800279c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800279e:	4b12      	ldr	r3, [pc, #72]	@ (80027e8 <MX_SPI1_Init+0x78>)
 80027a0:	2280      	movs	r2, #128	@ 0x80
 80027a2:	0092      	lsls	r2, r2, #2
 80027a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80027a6:	4b10      	ldr	r3, [pc, #64]	@ (80027e8 <MX_SPI1_Init+0x78>)
 80027a8:	2220      	movs	r2, #32
 80027aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027ac:	4b0e      	ldr	r3, [pc, #56]	@ (80027e8 <MX_SPI1_Init+0x78>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027b2:	4b0d      	ldr	r3, [pc, #52]	@ (80027e8 <MX_SPI1_Init+0x78>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027b8:	4b0b      	ldr	r3, [pc, #44]	@ (80027e8 <MX_SPI1_Init+0x78>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80027be:	4b0a      	ldr	r3, [pc, #40]	@ (80027e8 <MX_SPI1_Init+0x78>)
 80027c0:	2207      	movs	r2, #7
 80027c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027c4:	4b08      	ldr	r3, [pc, #32]	@ (80027e8 <MX_SPI1_Init+0x78>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80027ca:	4b07      	ldr	r3, [pc, #28]	@ (80027e8 <MX_SPI1_Init+0x78>)
 80027cc:	2208      	movs	r2, #8
 80027ce:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027d0:	4b05      	ldr	r3, [pc, #20]	@ (80027e8 <MX_SPI1_Init+0x78>)
 80027d2:	0018      	movs	r0, r3
 80027d4:	f003 fc1c 	bl	8006010 <HAL_SPI_Init>
 80027d8:	1e03      	subs	r3, r0, #0
 80027da:	d001      	beq.n	80027e0 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80027dc:	f000 f9d6 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80027e0:	46c0      	nop			@ (mov r8, r8)
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	46c0      	nop			@ (mov r8, r8)
 80027e8:	20000744 	.word	0x20000744
 80027ec:	40013000 	.word	0x40013000

080027f0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b094      	sub	sp, #80	@ 0x50
 80027f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80027f6:	2334      	movs	r3, #52	@ 0x34
 80027f8:	18fb      	adds	r3, r7, r3
 80027fa:	0018      	movs	r0, r3
 80027fc:	231c      	movs	r3, #28
 80027fe:	001a      	movs	r2, r3
 8002800:	2100      	movs	r1, #0
 8002802:	f005 feed 	bl	80085e0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002806:	003b      	movs	r3, r7
 8002808:	0018      	movs	r0, r3
 800280a:	2334      	movs	r3, #52	@ 0x34
 800280c:	001a      	movs	r2, r3
 800280e:	2100      	movs	r1, #0
 8002810:	f005 fee6 	bl	80085e0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002814:	4b37      	ldr	r3, [pc, #220]	@ (80028f4 <MX_TIM17_Init+0x104>)
 8002816:	4a38      	ldr	r2, [pc, #224]	@ (80028f8 <MX_TIM17_Init+0x108>)
 8002818:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800281a:	4b36      	ldr	r3, [pc, #216]	@ (80028f4 <MX_TIM17_Init+0x104>)
 800281c:	2200      	movs	r2, #0
 800281e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002820:	4b34      	ldr	r3, [pc, #208]	@ (80028f4 <MX_TIM17_Init+0x104>)
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002826:	4b33      	ldr	r3, [pc, #204]	@ (80028f4 <MX_TIM17_Init+0x104>)
 8002828:	4a34      	ldr	r2, [pc, #208]	@ (80028fc <MX_TIM17_Init+0x10c>)
 800282a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800282c:	4b31      	ldr	r3, [pc, #196]	@ (80028f4 <MX_TIM17_Init+0x104>)
 800282e:	2200      	movs	r2, #0
 8002830:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002832:	4b30      	ldr	r3, [pc, #192]	@ (80028f4 <MX_TIM17_Init+0x104>)
 8002834:	2200      	movs	r2, #0
 8002836:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002838:	4b2e      	ldr	r3, [pc, #184]	@ (80028f4 <MX_TIM17_Init+0x104>)
 800283a:	2200      	movs	r2, #0
 800283c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800283e:	4b2d      	ldr	r3, [pc, #180]	@ (80028f4 <MX_TIM17_Init+0x104>)
 8002840:	0018      	movs	r0, r3
 8002842:	f003 ff73 	bl	800672c <HAL_TIM_Base_Init>
 8002846:	1e03      	subs	r3, r0, #0
 8002848:	d001      	beq.n	800284e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800284a:	f000 f99f 	bl	8002b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800284e:	4b29      	ldr	r3, [pc, #164]	@ (80028f4 <MX_TIM17_Init+0x104>)
 8002850:	0018      	movs	r0, r3
 8002852:	f003 ffc3 	bl	80067dc <HAL_TIM_PWM_Init>
 8002856:	1e03      	subs	r3, r0, #0
 8002858:	d001      	beq.n	800285e <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 800285a:	f000 f997 	bl	8002b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800285e:	2134      	movs	r1, #52	@ 0x34
 8002860:	187b      	adds	r3, r7, r1
 8002862:	2260      	movs	r2, #96	@ 0x60
 8002864:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002866:	187b      	adds	r3, r7, r1
 8002868:	2200      	movs	r2, #0
 800286a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800286c:	187b      	adds	r3, r7, r1
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002872:	187b      	adds	r3, r7, r1
 8002874:	2200      	movs	r2, #0
 8002876:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002878:	187b      	adds	r3, r7, r1
 800287a:	2200      	movs	r2, #0
 800287c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800287e:	187b      	adds	r3, r7, r1
 8002880:	2200      	movs	r2, #0
 8002882:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002884:	187b      	adds	r3, r7, r1
 8002886:	2200      	movs	r2, #0
 8002888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800288a:	1879      	adds	r1, r7, r1
 800288c:	4b19      	ldr	r3, [pc, #100]	@ (80028f4 <MX_TIM17_Init+0x104>)
 800288e:	2200      	movs	r2, #0
 8002890:	0018      	movs	r0, r3
 8002892:	f004 f8f3 	bl	8006a7c <HAL_TIM_PWM_ConfigChannel>
 8002896:	1e03      	subs	r3, r0, #0
 8002898:	d001      	beq.n	800289e <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 800289a:	f000 f977 	bl	8002b8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800289e:	003b      	movs	r3, r7
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028a4:	003b      	movs	r3, r7
 80028a6:	2200      	movs	r2, #0
 80028a8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028aa:	003b      	movs	r3, r7
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028b0:	003b      	movs	r3, r7
 80028b2:	2200      	movs	r2, #0
 80028b4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028b6:	003b      	movs	r3, r7
 80028b8:	2200      	movs	r2, #0
 80028ba:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028bc:	003b      	movs	r3, r7
 80028be:	2280      	movs	r2, #128	@ 0x80
 80028c0:	0192      	lsls	r2, r2, #6
 80028c2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80028c4:	003b      	movs	r3, r7
 80028c6:	2200      	movs	r2, #0
 80028c8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028ca:	003b      	movs	r3, r7
 80028cc:	2200      	movs	r2, #0
 80028ce:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80028d0:	003a      	movs	r2, r7
 80028d2:	4b08      	ldr	r3, [pc, #32]	@ (80028f4 <MX_TIM17_Init+0x104>)
 80028d4:	0011      	movs	r1, r2
 80028d6:	0018      	movs	r0, r3
 80028d8:	f004 fd50 	bl	800737c <HAL_TIMEx_ConfigBreakDeadTime>
 80028dc:	1e03      	subs	r3, r0, #0
 80028de:	d001      	beq.n	80028e4 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 80028e0:	f000 f954 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80028e4:	4b03      	ldr	r3, [pc, #12]	@ (80028f4 <MX_TIM17_Init+0x104>)
 80028e6:	0018      	movs	r0, r3
 80028e8:	f000 fe74 	bl	80035d4 <HAL_TIM_MspPostInit>

}
 80028ec:	46c0      	nop			@ (mov r8, r8)
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b014      	add	sp, #80	@ 0x50
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	200007a8 	.word	0x200007a8
 80028f8:	40014800 	.word	0x40014800
 80028fc:	0000ffff 	.word	0x0000ffff

08002900 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002904:	4b23      	ldr	r3, [pc, #140]	@ (8002994 <MX_USART1_UART_Init+0x94>)
 8002906:	4a24      	ldr	r2, [pc, #144]	@ (8002998 <MX_USART1_UART_Init+0x98>)
 8002908:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800290a:	4b22      	ldr	r3, [pc, #136]	@ (8002994 <MX_USART1_UART_Init+0x94>)
 800290c:	2296      	movs	r2, #150	@ 0x96
 800290e:	0192      	lsls	r2, r2, #6
 8002910:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002912:	4b20      	ldr	r3, [pc, #128]	@ (8002994 <MX_USART1_UART_Init+0x94>)
 8002914:	2200      	movs	r2, #0
 8002916:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002918:	4b1e      	ldr	r3, [pc, #120]	@ (8002994 <MX_USART1_UART_Init+0x94>)
 800291a:	2200      	movs	r2, #0
 800291c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800291e:	4b1d      	ldr	r3, [pc, #116]	@ (8002994 <MX_USART1_UART_Init+0x94>)
 8002920:	2200      	movs	r2, #0
 8002922:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002924:	4b1b      	ldr	r3, [pc, #108]	@ (8002994 <MX_USART1_UART_Init+0x94>)
 8002926:	220c      	movs	r2, #12
 8002928:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800292a:	4b1a      	ldr	r3, [pc, #104]	@ (8002994 <MX_USART1_UART_Init+0x94>)
 800292c:	2200      	movs	r2, #0
 800292e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002930:	4b18      	ldr	r3, [pc, #96]	@ (8002994 <MX_USART1_UART_Init+0x94>)
 8002932:	2200      	movs	r2, #0
 8002934:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002936:	4b17      	ldr	r3, [pc, #92]	@ (8002994 <MX_USART1_UART_Init+0x94>)
 8002938:	2200      	movs	r2, #0
 800293a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800293c:	4b15      	ldr	r3, [pc, #84]	@ (8002994 <MX_USART1_UART_Init+0x94>)
 800293e:	2200      	movs	r2, #0
 8002940:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002942:	4b14      	ldr	r3, [pc, #80]	@ (8002994 <MX_USART1_UART_Init+0x94>)
 8002944:	2200      	movs	r2, #0
 8002946:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002948:	4b12      	ldr	r3, [pc, #72]	@ (8002994 <MX_USART1_UART_Init+0x94>)
 800294a:	0018      	movs	r0, r3
 800294c:	f004 fdb2 	bl	80074b4 <HAL_UART_Init>
 8002950:	1e03      	subs	r3, r0, #0
 8002952:	d001      	beq.n	8002958 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002954:	f000 f91a 	bl	8002b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002958:	4b0e      	ldr	r3, [pc, #56]	@ (8002994 <MX_USART1_UART_Init+0x94>)
 800295a:	2100      	movs	r1, #0
 800295c:	0018      	movs	r0, r3
 800295e:	f005 fca9 	bl	80082b4 <HAL_UARTEx_SetTxFifoThreshold>
 8002962:	1e03      	subs	r3, r0, #0
 8002964:	d001      	beq.n	800296a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002966:	f000 f911 	bl	8002b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800296a:	4b0a      	ldr	r3, [pc, #40]	@ (8002994 <MX_USART1_UART_Init+0x94>)
 800296c:	2100      	movs	r1, #0
 800296e:	0018      	movs	r0, r3
 8002970:	f005 fce0 	bl	8008334 <HAL_UARTEx_SetRxFifoThreshold>
 8002974:	1e03      	subs	r3, r0, #0
 8002976:	d001      	beq.n	800297c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002978:	f000 f908 	bl	8002b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800297c:	4b05      	ldr	r3, [pc, #20]	@ (8002994 <MX_USART1_UART_Init+0x94>)
 800297e:	0018      	movs	r0, r3
 8002980:	f005 fc5e 	bl	8008240 <HAL_UARTEx_DisableFifoMode>
 8002984:	1e03      	subs	r3, r0, #0
 8002986:	d001      	beq.n	800298c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002988:	f000 f900 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800298c:	46c0      	nop			@ (mov r8, r8)
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	46c0      	nop			@ (mov r8, r8)
 8002994:	200007f4 	.word	0x200007f4
 8002998:	40013800 	.word	0x40013800

0800299c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800299c:	b590      	push	{r4, r7, lr}
 800299e:	b089      	sub	sp, #36	@ 0x24
 80029a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a2:	240c      	movs	r4, #12
 80029a4:	193b      	adds	r3, r7, r4
 80029a6:	0018      	movs	r0, r3
 80029a8:	2314      	movs	r3, #20
 80029aa:	001a      	movs	r2, r3
 80029ac:	2100      	movs	r1, #0
 80029ae:	f005 fe17 	bl	80085e0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002a60 <MX_GPIO_Init+0xc4>)
 80029b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002a60 <MX_GPIO_Init+0xc4>)
 80029b8:	2104      	movs	r1, #4
 80029ba:	430a      	orrs	r2, r1
 80029bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80029be:	4b28      	ldr	r3, [pc, #160]	@ (8002a60 <MX_GPIO_Init+0xc4>)
 80029c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c2:	2204      	movs	r2, #4
 80029c4:	4013      	ands	r3, r2
 80029c6:	60bb      	str	r3, [r7, #8]
 80029c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ca:	4b25      	ldr	r3, [pc, #148]	@ (8002a60 <MX_GPIO_Init+0xc4>)
 80029cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029ce:	4b24      	ldr	r3, [pc, #144]	@ (8002a60 <MX_GPIO_Init+0xc4>)
 80029d0:	2101      	movs	r1, #1
 80029d2:	430a      	orrs	r2, r1
 80029d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80029d6:	4b22      	ldr	r3, [pc, #136]	@ (8002a60 <MX_GPIO_Init+0xc4>)
 80029d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029da:	2201      	movs	r2, #1
 80029dc:	4013      	ands	r3, r2
 80029de:	607b      	str	r3, [r7, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80029e2:	23a0      	movs	r3, #160	@ 0xa0
 80029e4:	05db      	lsls	r3, r3, #23
 80029e6:	2200      	movs	r2, #0
 80029e8:	2138      	movs	r1, #56	@ 0x38
 80029ea:	0018      	movs	r0, r3
 80029ec:	f001 fa65 	bl	8003eba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80029f0:	193b      	adds	r3, r7, r4
 80029f2:	2202      	movs	r2, #2
 80029f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029f6:	193b      	adds	r3, r7, r4
 80029f8:	2200      	movs	r2, #0
 80029fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fc:	193b      	adds	r3, r7, r4
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a02:	193b      	adds	r3, r7, r4
 8002a04:	4a17      	ldr	r2, [pc, #92]	@ (8002a64 <MX_GPIO_Init+0xc8>)
 8002a06:	0019      	movs	r1, r3
 8002a08:	0010      	movs	r0, r2
 8002a0a:	f001 f8cd 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002a0e:	193b      	adds	r3, r7, r4
 8002a10:	2238      	movs	r2, #56	@ 0x38
 8002a12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a14:	193b      	adds	r3, r7, r4
 8002a16:	2201      	movs	r2, #1
 8002a18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	193b      	adds	r3, r7, r4
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a20:	193b      	adds	r3, r7, r4
 8002a22:	2200      	movs	r2, #0
 8002a24:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a26:	193a      	adds	r2, r7, r4
 8002a28:	23a0      	movs	r3, #160	@ 0xa0
 8002a2a:	05db      	lsls	r3, r3, #23
 8002a2c:	0011      	movs	r1, r2
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f001 f8ba 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002a34:	0021      	movs	r1, r4
 8002a36:	187b      	adds	r3, r7, r1
 8002a38:	22c0      	movs	r2, #192	@ 0xc0
 8002a3a:	0152      	lsls	r2, r2, #5
 8002a3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a3e:	187b      	adds	r3, r7, r1
 8002a40:	2200      	movs	r2, #0
 8002a42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	187b      	adds	r3, r7, r1
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4a:	187a      	adds	r2, r7, r1
 8002a4c:	23a0      	movs	r3, #160	@ 0xa0
 8002a4e:	05db      	lsls	r3, r3, #23
 8002a50:	0011      	movs	r1, r2
 8002a52:	0018      	movs	r0, r3
 8002a54:	f001 f8a8 	bl	8003ba8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002a58:	46c0      	nop			@ (mov r8, r8)
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b009      	add	sp, #36	@ 0x24
 8002a5e:	bd90      	pop	{r4, r7, pc}
 8002a60:	40021000 	.word	0x40021000
 8002a64:	50000800 	.word	0x50000800

08002a68 <_ADXL343_ReadReg8>:

/* USER CODE BEGIN 4 */
int _ADXL343_ReadReg8 (unsigned char TargetRegister, unsigned char * TargetValue, uint8_t size)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	6039      	str	r1, [r7, #0]
 8002a70:	0011      	movs	r1, r2
 8002a72:	1dfb      	adds	r3, r7, #7
 8002a74:	1c02      	adds	r2, r0, #0
 8002a76:	701a      	strb	r2, [r3, #0]
 8002a78:	1dbb      	adds	r3, r7, #6
 8002a7a:	1c0a      	adds	r2, r1, #0
 8002a7c:	701a      	strb	r2, [r3, #0]
  if (!HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, &TargetRegister, 1, 1000)==HAL_OK)
 8002a7e:	1dfa      	adds	r2, r7, #7
 8002a80:	4811      	ldr	r0, [pc, #68]	@ (8002ac8 <_ADXL343_ReadReg8+0x60>)
 8002a82:	23fa      	movs	r3, #250	@ 0xfa
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	2301      	movs	r3, #1
 8002a8a:	2128      	movs	r1, #40	@ 0x28
 8002a8c:	f001 fad8 	bl	8004040 <HAL_I2C_Master_Transmit>
 8002a90:	1e03      	subs	r3, r0, #0
 8002a92:	d002      	beq.n	8002a9a <_ADXL343_ReadReg8+0x32>
      return -1;
 8002a94:	2301      	movs	r3, #1
 8002a96:	425b      	negs	r3, r3
 8002a98:	e011      	b.n	8002abe <_ADXL343_ReadReg8+0x56>

  if (!HAL_I2C_Master_Receive(&hi2c1, 0x14<<1, TargetValue, size, 1000)==HAL_OK)
 8002a9a:	1dbb      	adds	r3, r7, #6
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	b299      	uxth	r1, r3
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	4809      	ldr	r0, [pc, #36]	@ (8002ac8 <_ADXL343_ReadReg8+0x60>)
 8002aa4:	23fa      	movs	r3, #250	@ 0xfa
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	000b      	movs	r3, r1
 8002aac:	2128      	movs	r1, #40	@ 0x28
 8002aae:	f001 fbf1 	bl	8004294 <HAL_I2C_Master_Receive>
 8002ab2:	1e03      	subs	r3, r0, #0
 8002ab4:	d002      	beq.n	8002abc <_ADXL343_ReadReg8+0x54>
    return -2;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	425b      	negs	r3, r3
 8002aba:	e000      	b.n	8002abe <_ADXL343_ReadReg8+0x56>

  return 0;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	0018      	movs	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b002      	add	sp, #8
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	46c0      	nop			@ (mov r8, r8)
 8002ac8:	200006c4 	.word	0x200006c4

08002acc <_ADXL343_WriteReg8>:

int _ADXL343_WriteReg8 (unsigned char TargetRegister, unsigned char TargetValue)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af02      	add	r7, sp, #8
 8002ad2:	0002      	movs	r2, r0
 8002ad4:	1dfb      	adds	r3, r7, #7
 8002ad6:	701a      	strb	r2, [r3, #0]
 8002ad8:	1dbb      	adds	r3, r7, #6
 8002ada:	1c0a      	adds	r2, r1, #0
 8002adc:	701a      	strb	r2, [r3, #0]
  unsigned char buff [2];
  buff[0] = TargetRegister;
 8002ade:	210c      	movs	r1, #12
 8002ae0:	187b      	adds	r3, r7, r1
 8002ae2:	1dfa      	adds	r2, r7, #7
 8002ae4:	7812      	ldrb	r2, [r2, #0]
 8002ae6:	701a      	strb	r2, [r3, #0]
  buff[1] = TargetValue;
 8002ae8:	187b      	adds	r3, r7, r1
 8002aea:	1dba      	adds	r2, r7, #6
 8002aec:	7812      	ldrb	r2, [r2, #0]
 8002aee:	705a      	strb	r2, [r3, #1]

  if (HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, buff, 2, 100))
 8002af0:	187a      	adds	r2, r7, r1
 8002af2:	4808      	ldr	r0, [pc, #32]	@ (8002b14 <_ADXL343_WriteReg8+0x48>)
 8002af4:	2364      	movs	r3, #100	@ 0x64
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	2302      	movs	r3, #2
 8002afa:	2128      	movs	r1, #40	@ 0x28
 8002afc:	f001 faa0 	bl	8004040 <HAL_I2C_Master_Transmit>
 8002b00:	1e03      	subs	r3, r0, #0
 8002b02:	d002      	beq.n	8002b0a <_ADXL343_WriteReg8+0x3e>
      return -1;
 8002b04:	2301      	movs	r3, #1
 8002b06:	425b      	negs	r3, r3
 8002b08:	e000      	b.n	8002b0c <_ADXL343_WriteReg8+0x40>

  return 0;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b004      	add	sp, #16
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	200006c4 	.word	0x200006c4

08002b18 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8002b18:	b590      	push	{r4, r7, lr}
 8002b1a:	b091      	sub	sp, #68	@ 0x44
 8002b1c:	af04      	add	r7, sp, #16
 8002b1e:	6078      	str	r0, [r7, #4]
  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 8002b20:	2380      	movs	r3, #128	@ 0x80
 8002b22:	005a      	lsls	r2, r3, #1
 8002b24:	2408      	movs	r4, #8
 8002b26:	1939      	adds	r1, r7, r4
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f003 f8f8 	bl	8005d20 <HAL_RTC_GetAlarm>
  if(sAlarm.AlarmTime.Seconds>58) {
 8002b30:	0022      	movs	r2, r4
 8002b32:	18bb      	adds	r3, r7, r2
 8002b34:	789b      	ldrb	r3, [r3, #2]
 8002b36:	2b3a      	cmp	r3, #58	@ 0x3a
 8002b38:	d903      	bls.n	8002b42 <HAL_RTC_AlarmAEventCallback+0x2a>
    sAlarm.AlarmTime.Seconds=0;
 8002b3a:	18bb      	adds	r3, r7, r2
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	709a      	strb	r2, [r3, #2]
 8002b40:	e006      	b.n	8002b50 <HAL_RTC_AlarmAEventCallback+0x38>
  }else{
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 8002b42:	2108      	movs	r1, #8
 8002b44:	187b      	adds	r3, r7, r1
 8002b46:	789b      	ldrb	r3, [r3, #2]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	187b      	adds	r3, r7, r1
 8002b4e:	709a      	strb	r2, [r3, #2]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8002b50:	46c0      	nop			@ (mov r8, r8)
 8002b52:	2308      	movs	r3, #8
 8002b54:	18f9      	adds	r1, r7, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f002 ffa0 	bl	8005aa0 <HAL_RTC_SetAlarm_IT>
 8002b60:	1e03      	subs	r3, r0, #0
 8002b62:	d1f6      	bne.n	8002b52 <HAL_RTC_AlarmAEventCallback+0x3a>
  	  drawString(30, 30, "testTime", BLACK, GREEN, 1, 1);
 8002b64:	4a07      	ldr	r2, [pc, #28]	@ (8002b84 <HAL_RTC_AlarmAEventCallback+0x6c>)
 8002b66:	2301      	movs	r3, #1
 8002b68:	9302      	str	r3, [sp, #8]
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	9301      	str	r3, [sp, #4]
 8002b6e:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <HAL_RTC_AlarmAEventCallback+0x70>)
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	2300      	movs	r3, #0
 8002b74:	211e      	movs	r1, #30
 8002b76:	201e      	movs	r0, #30
 8002b78:	f7fe fd58 	bl	800162c <drawString>
}
 8002b7c:	46c0      	nop			@ (mov r8, r8)
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b00d      	add	sp, #52	@ 0x34
 8002b82:	bd90      	pop	{r4, r7, pc}
 8002b84:	08008f20 	.word	0x08008f20
 8002b88:	ffffe007 	.word	0xffffe007

08002b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b90:	b672      	cpsid	i
}
 8002b92:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b94:	46c0      	nop			@ (mov r8, r8)
 8002b96:	e7fd      	b.n	8002b94 <Error_Handler+0x8>

08002b98 <minmea_isfield>:
        return false;

    return true;
}

static inline bool minmea_isfield(char c) {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	0002      	movs	r2, r0
 8002ba0:	1dfb      	adds	r3, r7, #7
 8002ba2:	701a      	strb	r2, [r3, #0]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8002ba4:	1dfb      	adds	r3, r7, #7
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	4b0d      	ldr	r3, [pc, #52]	@ (8002be0 <minmea_isfield+0x48>)
 8002bac:	18d3      	adds	r3, r2, r3
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	001a      	movs	r2, r3
 8002bb2:	2397      	movs	r3, #151	@ 0x97
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	d009      	beq.n	8002bcc <minmea_isfield+0x34>
 8002bb8:	1dfb      	adds	r3, r7, #7
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b2c      	cmp	r3, #44	@ 0x2c
 8002bbe:	d005      	beq.n	8002bcc <minmea_isfield+0x34>
 8002bc0:	1dfb      	adds	r3, r7, #7
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bc6:	d001      	beq.n	8002bcc <minmea_isfield+0x34>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e000      	b.n	8002bce <minmea_isfield+0x36>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	1c1a      	adds	r2, r3, #0
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	b2db      	uxtb	r3, r3
}
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b002      	add	sp, #8
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	46c0      	nop			@ (mov r8, r8)
 8002be0:	08009730 	.word	0x08009730

08002be4 <minmea_scan>:

bool minmea_scan(const char *sentence, const char *format, ...)
{
 8002be4:	b40e      	push	{r1, r2, r3}
 8002be6:	b5b0      	push	{r4, r5, r7, lr}
 8002be8:	b0a7      	sub	sp, #156	@ 0x9c
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
    bool result = false;
 8002bee:	2397      	movs	r3, #151	@ 0x97
 8002bf0:	18fb      	adds	r3, r7, r3
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
    bool optional = false;
 8002bf6:	2396      	movs	r3, #150	@ 0x96
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
    va_list ap;
    va_start(ap, format);
 8002bfe:	23a8      	movs	r3, #168	@ 0xa8
 8002c00:	2208      	movs	r2, #8
 8002c02:	189b      	adds	r3, r3, r2
 8002c04:	19db      	adds	r3, r3, r7
 8002c06:	62fb      	str	r3, [r7, #44]	@ 0x2c

    const char *field = sentence;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2290      	movs	r2, #144	@ 0x90
 8002c0c:	18ba      	adds	r2, r7, r2
 8002c0e:	6013      	str	r3, [r2, #0]
        } else { \
            field = NULL; \
        } \
    } while (0)

    while (*format) {
 8002c10:	e345      	b.n	800329e <minmea_scan+0x6ba>
        char type = *format++;
 8002c12:	21a4      	movs	r1, #164	@ 0xa4
 8002c14:	2008      	movs	r0, #8
 8002c16:	180b      	adds	r3, r1, r0
 8002c18:	19db      	adds	r3, r3, r7
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	1809      	adds	r1, r1, r0
 8002c20:	19c9      	adds	r1, r1, r7
 8002c22:	600a      	str	r2, [r1, #0]
 8002c24:	2143      	movs	r1, #67	@ 0x43
 8002c26:	187a      	adds	r2, r7, r1
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	7013      	strb	r3, [r2, #0]

        if (type == ';') {
 8002c2c:	187b      	adds	r3, r7, r1
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b3b      	cmp	r3, #59	@ 0x3b
 8002c32:	d104      	bne.n	8002c3e <minmea_scan+0x5a>
            // All further fields are optional.
            optional = true;
 8002c34:	2396      	movs	r3, #150	@ 0x96
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	2201      	movs	r2, #1
 8002c3a:	701a      	strb	r2, [r3, #0]
            continue;
 8002c3c:	e32f      	b.n	800329e <minmea_scan+0x6ba>
        }

        if (!field && !optional) {
 8002c3e:	2390      	movs	r3, #144	@ 0x90
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d108      	bne.n	8002c5a <minmea_scan+0x76>
 8002c48:	2396      	movs	r3, #150	@ 0x96
 8002c4a:	18fb      	adds	r3, r7, r3
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	4053      	eors	r3, r2
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d000      	beq.n	8002c5a <minmea_scan+0x76>
 8002c58:	e32f      	b.n	80032ba <minmea_scan+0x6d6>
            // Field requested but we ran out if input. Bail out.
            goto parse_error;
        }

        switch (type) {
 8002c5a:	2343      	movs	r3, #67	@ 0x43
 8002c5c:	18fb      	adds	r3, r7, r3
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	3b44      	subs	r3, #68	@ 0x44
 8002c62:	2b30      	cmp	r3, #48	@ 0x30
 8002c64:	d900      	bls.n	8002c68 <minmea_scan+0x84>
 8002c66:	e32a      	b.n	80032be <minmea_scan+0x6da>
 8002c68:	009a      	lsls	r2, r3, #2
 8002c6a:	4bbd      	ldr	r3, [pc, #756]	@ (8002f60 <minmea_scan+0x37c>)
 8002c6c:	18d3      	adds	r3, r2, r3
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	469f      	mov	pc, r3
            case 'c': { // Single character field (char).
                char value = '\0';
 8002c72:	258f      	movs	r5, #143	@ 0x8f
 8002c74:	197b      	adds	r3, r7, r5
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]

                if (field && minmea_isfield(*field))
 8002c7a:	2490      	movs	r4, #144	@ 0x90
 8002c7c:	193b      	adds	r3, r7, r4
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00c      	beq.n	8002c9e <minmea_scan+0xba>
 8002c84:	193b      	adds	r3, r7, r4
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f7ff ff84 	bl	8002b98 <minmea_isfield>
 8002c90:	1e03      	subs	r3, r0, #0
 8002c92:	d004      	beq.n	8002c9e <minmea_scan+0xba>
                    value = *field;
 8002c94:	197b      	adds	r3, r7, r5
 8002c96:	193a      	adds	r2, r7, r4
 8002c98:	6812      	ldr	r2, [r2, #0]
 8002c9a:	7812      	ldrb	r2, [r2, #0]
 8002c9c:	701a      	strb	r2, [r3, #0]

                *va_arg(ap, char *) = value;
 8002c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ca0:	1d1a      	adds	r2, r3, #4
 8002ca2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	228f      	movs	r2, #143	@ 0x8f
 8002ca8:	18ba      	adds	r2, r7, r2
 8002caa:	7812      	ldrb	r2, [r2, #0]
 8002cac:	701a      	strb	r2, [r3, #0]
            } break;
 8002cae:	e2db      	b.n	8003268 <minmea_scan+0x684>

            case 'd': { // Single character direction field (int).
                int value = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	2288      	movs	r2, #136	@ 0x88
 8002cb4:	18ba      	adds	r2, r7, r2
 8002cb6:	6013      	str	r3, [r2, #0]

                if (field && minmea_isfield(*field)) {
 8002cb8:	2490      	movs	r4, #144	@ 0x90
 8002cba:	193b      	adds	r3, r7, r4
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d022      	beq.n	8002d08 <minmea_scan+0x124>
 8002cc2:	193b      	adds	r3, r7, r4
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f7ff ff65 	bl	8002b98 <minmea_isfield>
 8002cce:	1e03      	subs	r3, r0, #0
 8002cd0:	d01a      	beq.n	8002d08 <minmea_scan+0x124>
                    switch (*field) {
 8002cd2:	193b      	adds	r3, r7, r4
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b57      	cmp	r3, #87	@ 0x57
 8002cda:	d00f      	beq.n	8002cfc <minmea_scan+0x118>
 8002cdc:	dd00      	ble.n	8002ce0 <minmea_scan+0xfc>
 8002cde:	e2f0      	b.n	80032c2 <minmea_scan+0x6de>
 8002ce0:	2b53      	cmp	r3, #83	@ 0x53
 8002ce2:	d00b      	beq.n	8002cfc <minmea_scan+0x118>
 8002ce4:	dd00      	ble.n	8002ce8 <minmea_scan+0x104>
 8002ce6:	e2ec      	b.n	80032c2 <minmea_scan+0x6de>
 8002ce8:	2b45      	cmp	r3, #69	@ 0x45
 8002cea:	d002      	beq.n	8002cf2 <minmea_scan+0x10e>
 8002cec:	2b4e      	cmp	r3, #78	@ 0x4e
 8002cee:	d000      	beq.n	8002cf2 <minmea_scan+0x10e>
 8002cf0:	e2e7      	b.n	80032c2 <minmea_scan+0x6de>
                        case 'N':
                        case 'E':
                            value = 1;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	2288      	movs	r2, #136	@ 0x88
 8002cf6:	18ba      	adds	r2, r7, r2
 8002cf8:	6013      	str	r3, [r2, #0]
                            break;
 8002cfa:	e005      	b.n	8002d08 <minmea_scan+0x124>
                        case 'S':
                        case 'W':
                            value = -1;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	425b      	negs	r3, r3
 8002d00:	2288      	movs	r2, #136	@ 0x88
 8002d02:	18ba      	adds	r2, r7, r2
 8002d04:	6013      	str	r3, [r2, #0]
                            break;
 8002d06:	46c0      	nop			@ (mov r8, r8)
                        default:
                            goto parse_error;
                    }
                }

                *va_arg(ap, int *) = value;
 8002d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d0a:	1d1a      	adds	r2, r3, #4
 8002d0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2288      	movs	r2, #136	@ 0x88
 8002d12:	18ba      	adds	r2, r7, r2
 8002d14:	6812      	ldr	r2, [r2, #0]
 8002d16:	601a      	str	r2, [r3, #0]
            } break;
 8002d18:	e2a6      	b.n	8003268 <minmea_scan+0x684>

            case 'f': { // Fractional value with scale (struct minmea_float).
                int sign = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	2284      	movs	r2, #132	@ 0x84
 8002d1e:	18ba      	adds	r2, r7, r2
 8002d20:	6013      	str	r3, [r2, #0]
                int_least32_t value = -1;
 8002d22:	2301      	movs	r3, #1
 8002d24:	425b      	negs	r3, r3
 8002d26:	2280      	movs	r2, #128	@ 0x80
 8002d28:	18ba      	adds	r2, r7, r2
 8002d2a:	6013      	str	r3, [r2, #0]
                int_least32_t scale = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	67fb      	str	r3, [r7, #124]	@ 0x7c

                if (field) {
 8002d30:	2390      	movs	r3, #144	@ 0x90
 8002d32:	18fb      	adds	r3, r7, r3
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d100      	bne.n	8002d3c <minmea_scan+0x158>
 8002d3a:	e088      	b.n	8002e4e <minmea_scan+0x26a>
                    while (minmea_isfield(*field)) {
 8002d3c:	e07d      	b.n	8002e3a <minmea_scan+0x256>
                        if (*field == '+' && !sign && value == -1) {
 8002d3e:	2390      	movs	r3, #144	@ 0x90
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b2b      	cmp	r3, #43	@ 0x2b
 8002d48:	d10d      	bne.n	8002d66 <minmea_scan+0x182>
 8002d4a:	2284      	movs	r2, #132	@ 0x84
 8002d4c:	18bb      	adds	r3, r7, r2
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d108      	bne.n	8002d66 <minmea_scan+0x182>
 8002d54:	2380      	movs	r3, #128	@ 0x80
 8002d56:	18fb      	adds	r3, r7, r3
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	d103      	bne.n	8002d66 <minmea_scan+0x182>
                            sign = 1;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	18ba      	adds	r2, r7, r2
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	e063      	b.n	8002e2e <minmea_scan+0x24a>
                        } else if (*field == '-' && !sign && value == -1) {
 8002d66:	2390      	movs	r3, #144	@ 0x90
 8002d68:	18fb      	adds	r3, r7, r3
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b2d      	cmp	r3, #45	@ 0x2d
 8002d70:	d10e      	bne.n	8002d90 <minmea_scan+0x1ac>
 8002d72:	2284      	movs	r2, #132	@ 0x84
 8002d74:	18bb      	adds	r3, r7, r2
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d109      	bne.n	8002d90 <minmea_scan+0x1ac>
 8002d7c:	2380      	movs	r3, #128	@ 0x80
 8002d7e:	18fb      	adds	r3, r7, r3
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	3301      	adds	r3, #1
 8002d84:	d104      	bne.n	8002d90 <minmea_scan+0x1ac>
                            sign = -1;
 8002d86:	2301      	movs	r3, #1
 8002d88:	425b      	negs	r3, r3
 8002d8a:	18ba      	adds	r2, r7, r2
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	e04e      	b.n	8002e2e <minmea_scan+0x24a>
                        } else if (isdigit((unsigned char) *field)) {
 8002d90:	2190      	movs	r1, #144	@ 0x90
 8002d92:	187b      	adds	r3, r7, r1
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	4b72      	ldr	r3, [pc, #456]	@ (8002f64 <minmea_scan+0x380>)
 8002d9c:	18d3      	adds	r3, r2, r3
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	001a      	movs	r2, r3
 8002da2:	2304      	movs	r3, #4
 8002da4:	4013      	ands	r3, r2
 8002da6:	d035      	beq.n	8002e14 <minmea_scan+0x230>
                            int digit = *field - '0';
 8002da8:	187b      	adds	r3, r7, r1
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	3b30      	subs	r3, #48	@ 0x30
 8002db0:	63bb      	str	r3, [r7, #56]	@ 0x38
                            if (value == -1)
 8002db2:	2280      	movs	r2, #128	@ 0x80
 8002db4:	18bb      	adds	r3, r7, r2
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3301      	adds	r3, #1
 8002dba:	d102      	bne.n	8002dc2 <minmea_scan+0x1de>
                                value = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	18ba      	adds	r2, r7, r2
 8002dc0:	6013      	str	r3, [r2, #0]
                            if (value > (INT_LEAST32_MAX-digit) / 10) {
 8002dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc4:	4a68      	ldr	r2, [pc, #416]	@ (8002f68 <minmea_scan+0x384>)
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	210a      	movs	r1, #10
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f7fd fa38 	bl	8000240 <__divsi3>
 8002dd0:	0003      	movs	r3, r0
 8002dd2:	001a      	movs	r2, r3
 8002dd4:	2380      	movs	r3, #128	@ 0x80
 8002dd6:	18fb      	adds	r3, r7, r3
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	dd04      	ble.n	8002de8 <minmea_scan+0x204>
                                /* we ran out of bits, what do we do? */
                                if (scale) {
 8002dde:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d100      	bne.n	8002de6 <minmea_scan+0x202>
 8002de4:	e26f      	b.n	80032c6 <minmea_scan+0x6e2>
                                    /* truncate extra precision */
                                    break;
 8002de6:	e032      	b.n	8002e4e <minmea_scan+0x26a>
                                } else {
                                    /* integer overflow. bail out. */
                                    goto parse_error;
                                }
                            }
                            value = (10 * value) + digit;
 8002de8:	2180      	movs	r1, #128	@ 0x80
 8002dea:	187b      	adds	r3, r7, r1
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	0013      	movs	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	189b      	adds	r3, r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	001a      	movs	r2, r3
 8002df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dfa:	189b      	adds	r3, r3, r2
 8002dfc:	187a      	adds	r2, r7, r1
 8002dfe:	6013      	str	r3, [r2, #0]
                            if (scale)
 8002e00:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d013      	beq.n	8002e2e <minmea_scan+0x24a>
                                scale *= 10;
 8002e06:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002e08:	0013      	movs	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	189b      	adds	r3, r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002e12:	e00c      	b.n	8002e2e <minmea_scan+0x24a>
                        } else if (*field == '.' && scale == 0) {
 8002e14:	2390      	movs	r3, #144	@ 0x90
 8002e16:	18fb      	adds	r3, r7, r3
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e1e:	d000      	beq.n	8002e22 <minmea_scan+0x23e>
 8002e20:	e253      	b.n	80032ca <minmea_scan+0x6e6>
 8002e22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d000      	beq.n	8002e2a <minmea_scan+0x246>
 8002e28:	e24f      	b.n	80032ca <minmea_scan+0x6e6>
                            scale = 1;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
                        } else {
                            goto parse_error;
                        }
                        field++;
 8002e2e:	2290      	movs	r2, #144	@ 0x90
 8002e30:	18bb      	adds	r3, r7, r2
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3301      	adds	r3, #1
 8002e36:	18ba      	adds	r2, r7, r2
 8002e38:	6013      	str	r3, [r2, #0]
                    while (minmea_isfield(*field)) {
 8002e3a:	2390      	movs	r3, #144	@ 0x90
 8002e3c:	18fb      	adds	r3, r7, r3
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	0018      	movs	r0, r3
 8002e44:	f7ff fea8 	bl	8002b98 <minmea_isfield>
 8002e48:	1e03      	subs	r3, r0, #0
 8002e4a:	d000      	beq.n	8002e4e <minmea_scan+0x26a>
 8002e4c:	e777      	b.n	8002d3e <minmea_scan+0x15a>
                    }
                }

                if ((sign || scale) && value == -1)
 8002e4e:	2384      	movs	r3, #132	@ 0x84
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d102      	bne.n	8002e5e <minmea_scan+0x27a>
 8002e58:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <minmea_scan+0x286>
 8002e5e:	2380      	movs	r3, #128	@ 0x80
 8002e60:	18fb      	adds	r3, r7, r3
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3301      	adds	r3, #1
 8002e66:	d100      	bne.n	8002e6a <minmea_scan+0x286>
 8002e68:	e231      	b.n	80032ce <minmea_scan+0x6ea>
                    goto parse_error;

                if (value == -1) {
 8002e6a:	2280      	movs	r2, #128	@ 0x80
 8002e6c:	18bb      	adds	r3, r7, r2
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3301      	adds	r3, #1
 8002e72:	d105      	bne.n	8002e80 <minmea_scan+0x29c>
                    /* No digits were scanned. */
                    value = 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	18ba      	adds	r2, r7, r2
 8002e78:	6013      	str	r3, [r2, #0]
                    scale = 0;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002e7e:	e004      	b.n	8002e8a <minmea_scan+0x2a6>
                } else if (scale == 0) {
 8002e80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <minmea_scan+0x2a6>
                    /* No decimal point. */
                    scale = 1;
 8002e86:	2301      	movs	r3, #1
 8002e88:	67fb      	str	r3, [r7, #124]	@ 0x7c
                }
                if (sign)
 8002e8a:	2284      	movs	r2, #132	@ 0x84
 8002e8c:	18bb      	adds	r3, r7, r2
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d007      	beq.n	8002ea4 <minmea_scan+0x2c0>
                    value *= sign;
 8002e94:	2180      	movs	r1, #128	@ 0x80
 8002e96:	187b      	adds	r3, r7, r1
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	18ba      	adds	r2, r7, r2
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	4353      	muls	r3, r2
 8002ea0:	187a      	adds	r2, r7, r1
 8002ea2:	6013      	str	r3, [r2, #0]

                *va_arg(ap, struct minmea_float *) = (struct minmea_float) {value, scale};
 8002ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea6:	1d1a      	adds	r2, r3, #4
 8002ea8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2280      	movs	r2, #128	@ 0x80
 8002eae:	18ba      	adds	r2, r7, r2
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002eb6:	605a      	str	r2, [r3, #4]
            } break;
 8002eb8:	e1d6      	b.n	8003268 <minmea_scan+0x684>

            case 'i': { // Integer value, default 0 (int).
                int value = 0;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	67bb      	str	r3, [r7, #120]	@ 0x78

                if (field) {
 8002ebe:	2290      	movs	r2, #144	@ 0x90
 8002ec0:	18bb      	adds	r3, r7, r2
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d011      	beq.n	8002eec <minmea_scan+0x308>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 8002ec8:	2320      	movs	r3, #32
 8002eca:	18f9      	adds	r1, r7, r3
 8002ecc:	18bb      	adds	r3, r7, r2
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	220a      	movs	r2, #10
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f005 fb58 	bl	8008588 <strtol>
 8002ed8:	0003      	movs	r3, r0
 8002eda:	67bb      	str	r3, [r7, #120]	@ 0x78
                    if (minmea_isfield(*endptr))
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f7ff fe59 	bl	8002b98 <minmea_isfield>
 8002ee6:	1e03      	subs	r3, r0, #0
 8002ee8:	d000      	beq.n	8002eec <minmea_scan+0x308>
 8002eea:	e1f2      	b.n	80032d2 <minmea_scan+0x6ee>
                        goto parse_error;
                }

                *va_arg(ap, int *) = value;
 8002eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eee:	1d1a      	adds	r2, r3, #4
 8002ef0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002ef6:	601a      	str	r2, [r3, #0]
            } break;
 8002ef8:	e1b6      	b.n	8003268 <minmea_scan+0x684>

            case 's': { // String value (char *).
                char *buf = va_arg(ap, char *);
 8002efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002efc:	1d1a      	adds	r2, r3, #4
 8002efe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	677b      	str	r3, [r7, #116]	@ 0x74

                if (field) {
 8002f04:	2390      	movs	r3, #144	@ 0x90
 8002f06:	18fb      	adds	r3, r7, r3
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d014      	beq.n	8002f38 <minmea_scan+0x354>
                    while (minmea_isfield(*field))
 8002f0e:	e00a      	b.n	8002f26 <minmea_scan+0x342>
                        *buf++ = *field++;
 8002f10:	2190      	movs	r1, #144	@ 0x90
 8002f12:	187b      	adds	r3, r7, r1
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	1c53      	adds	r3, r2, #1
 8002f18:	1879      	adds	r1, r7, r1
 8002f1a:	600b      	str	r3, [r1, #0]
 8002f1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f1e:	1c59      	adds	r1, r3, #1
 8002f20:	6779      	str	r1, [r7, #116]	@ 0x74
 8002f22:	7812      	ldrb	r2, [r2, #0]
 8002f24:	701a      	strb	r2, [r3, #0]
                    while (minmea_isfield(*field))
 8002f26:	2390      	movs	r3, #144	@ 0x90
 8002f28:	18fb      	adds	r3, r7, r3
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f7ff fe32 	bl	8002b98 <minmea_isfield>
 8002f34:	1e03      	subs	r3, r0, #0
 8002f36:	d1eb      	bne.n	8002f10 <minmea_scan+0x32c>
                }

                *buf = '\0';
 8002f38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	701a      	strb	r2, [r3, #0]
            } break;
 8002f3e:	e193      	b.n	8003268 <minmea_scan+0x684>

            case 't': { // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field)
 8002f40:	2290      	movs	r2, #144	@ 0x90
 8002f42:	18bb      	adds	r3, r7, r2
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d100      	bne.n	8002f4c <minmea_scan+0x368>
 8002f4a:	e1c4      	b.n	80032d6 <minmea_scan+0x6f2>
                    goto parse_error;

                if (field[0] != '$')
 8002f4c:	18bb      	adds	r3, r7, r2
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b24      	cmp	r3, #36	@ 0x24
 8002f54:	d000      	beq.n	8002f58 <minmea_scan+0x374>
 8002f56:	e1c0      	b.n	80032da <minmea_scan+0x6f6>
                    goto parse_error;
                for (int i=0; i<5; i++)
 8002f58:	2300      	movs	r3, #0
 8002f5a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f5c:	e01c      	b.n	8002f98 <minmea_scan+0x3b4>
 8002f5e:	46c0      	nop			@ (mov r8, r8)
 8002f60:	08009590 	.word	0x08009590
 8002f64:	08009730 	.word	0x08009730
 8002f68:	7fffffff 	.word	0x7fffffff
                    if (!minmea_isfield(field[1+i]))
 8002f6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f6e:	3301      	adds	r3, #1
 8002f70:	001a      	movs	r2, r3
 8002f72:	2390      	movs	r3, #144	@ 0x90
 8002f74:	18fb      	adds	r3, r7, r3
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	189b      	adds	r3, r3, r2
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f7ff fe0b 	bl	8002b98 <minmea_isfield>
 8002f82:	0003      	movs	r3, r0
 8002f84:	001a      	movs	r2, r3
 8002f86:	2301      	movs	r3, #1
 8002f88:	4053      	eors	r3, r2
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d000      	beq.n	8002f92 <minmea_scan+0x3ae>
 8002f90:	e1a5      	b.n	80032de <minmea_scan+0x6fa>
                for (int i=0; i<5; i++)
 8002f92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f94:	3301      	adds	r3, #1
 8002f96:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	dde6      	ble.n	8002f6c <minmea_scan+0x388>
                        goto parse_error;

                char *buf = va_arg(ap, char *);
 8002f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa0:	1d1a      	adds	r2, r3, #4
 8002fa2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
                memcpy(buf, field+1, 5);
 8002fa8:	2390      	movs	r3, #144	@ 0x90
 8002faa:	18fb      	adds	r3, r7, r3
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	1c59      	adds	r1, r3, #1
 8002fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fb2:	2205      	movs	r2, #5
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f005 fb47 	bl	8008648 <memcpy>
                buf[5] = '\0';
 8002fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fbc:	3305      	adds	r3, #5
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	701a      	strb	r2, [r3, #0]
            } break;
 8002fc2:	e151      	b.n	8003268 <minmea_scan+0x684>

            case 'D': { // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 8002fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fc6:	1d1a      	adds	r2, r3, #4
 8002fc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	633b      	str	r3, [r7, #48]	@ 0x30

                int d = -1, m = -1, y = -1;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	425b      	negs	r3, r3
 8002fd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	425b      	negs	r3, r3
 8002fd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fda:	2301      	movs	r3, #1
 8002fdc:	425b      	negs	r3, r3
 8002fde:	667b      	str	r3, [r7, #100]	@ 0x64

                if (field && minmea_isfield(*field)) {
 8002fe0:	2290      	movs	r2, #144	@ 0x90
 8002fe2:	18bb      	adds	r3, r7, r2
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d067      	beq.n	80030ba <minmea_scan+0x4d6>
 8002fea:	18bb      	adds	r3, r7, r2
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f7ff fdd1 	bl	8002b98 <minmea_isfield>
 8002ff6:	1e03      	subs	r3, r0, #0
 8002ff8:	d05f      	beq.n	80030ba <minmea_scan+0x4d6>
                    // Always six digits.
                    for (int i=0; i<6; i++)
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ffe:	e011      	b.n	8003024 <minmea_scan+0x440>
                        if (!isdigit((unsigned char) field[i]))
 8003000:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003002:	2290      	movs	r2, #144	@ 0x90
 8003004:	18ba      	adds	r2, r7, r2
 8003006:	6812      	ldr	r2, [r2, #0]
 8003008:	18d3      	adds	r3, r2, r3
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	4bbb      	ldr	r3, [pc, #748]	@ (80032fc <minmea_scan+0x718>)
 8003010:	18d3      	adds	r3, r2, r3
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	001a      	movs	r2, r3
 8003016:	2304      	movs	r3, #4
 8003018:	4013      	ands	r3, r2
 800301a:	d100      	bne.n	800301e <minmea_scan+0x43a>
 800301c:	e161      	b.n	80032e2 <minmea_scan+0x6fe>
                    for (int i=0; i<6; i++)
 800301e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003020:	3301      	adds	r3, #1
 8003022:	663b      	str	r3, [r7, #96]	@ 0x60
 8003024:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003026:	2b05      	cmp	r3, #5
 8003028:	ddea      	ble.n	8003000 <minmea_scan+0x41c>
                            goto parse_error;

                    d = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 800302a:	2490      	movs	r4, #144	@ 0x90
 800302c:	193b      	adds	r3, r7, r4
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	781a      	ldrb	r2, [r3, #0]
 8003032:	211c      	movs	r1, #28
 8003034:	187b      	adds	r3, r7, r1
 8003036:	701a      	strb	r2, [r3, #0]
 8003038:	193b      	adds	r3, r7, r4
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3301      	adds	r3, #1
 800303e:	781a      	ldrb	r2, [r3, #0]
 8003040:	187b      	adds	r3, r7, r1
 8003042:	705a      	strb	r2, [r3, #1]
 8003044:	187b      	adds	r3, r7, r1
 8003046:	2200      	movs	r2, #0
 8003048:	709a      	strb	r2, [r3, #2]
 800304a:	187b      	adds	r3, r7, r1
 800304c:	220a      	movs	r2, #10
 800304e:	2100      	movs	r1, #0
 8003050:	0018      	movs	r0, r3
 8003052:	f005 fa99 	bl	8008588 <strtol>
 8003056:	0003      	movs	r3, r0
 8003058:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    m = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 800305a:	193b      	adds	r3, r7, r4
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3302      	adds	r3, #2
 8003060:	781a      	ldrb	r2, [r3, #0]
 8003062:	2118      	movs	r1, #24
 8003064:	187b      	adds	r3, r7, r1
 8003066:	701a      	strb	r2, [r3, #0]
 8003068:	193b      	adds	r3, r7, r4
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3303      	adds	r3, #3
 800306e:	781a      	ldrb	r2, [r3, #0]
 8003070:	187b      	adds	r3, r7, r1
 8003072:	705a      	strb	r2, [r3, #1]
 8003074:	187b      	adds	r3, r7, r1
 8003076:	2200      	movs	r2, #0
 8003078:	709a      	strb	r2, [r3, #2]
 800307a:	187b      	adds	r3, r7, r1
 800307c:	220a      	movs	r2, #10
 800307e:	2100      	movs	r1, #0
 8003080:	0018      	movs	r0, r3
 8003082:	f005 fa81 	bl	8008588 <strtol>
 8003086:	0003      	movs	r3, r0
 8003088:	66bb      	str	r3, [r7, #104]	@ 0x68
                    y = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 800308a:	193b      	adds	r3, r7, r4
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3304      	adds	r3, #4
 8003090:	781a      	ldrb	r2, [r3, #0]
 8003092:	2114      	movs	r1, #20
 8003094:	187b      	adds	r3, r7, r1
 8003096:	701a      	strb	r2, [r3, #0]
 8003098:	193b      	adds	r3, r7, r4
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3305      	adds	r3, #5
 800309e:	781a      	ldrb	r2, [r3, #0]
 80030a0:	187b      	adds	r3, r7, r1
 80030a2:	705a      	strb	r2, [r3, #1]
 80030a4:	187b      	adds	r3, r7, r1
 80030a6:	2200      	movs	r2, #0
 80030a8:	709a      	strb	r2, [r3, #2]
 80030aa:	187b      	adds	r3, r7, r1
 80030ac:	220a      	movs	r2, #10
 80030ae:	2100      	movs	r1, #0
 80030b0:	0018      	movs	r0, r3
 80030b2:	f005 fa69 	bl	8008588 <strtol>
 80030b6:	0003      	movs	r3, r0
 80030b8:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                date->day = d;
 80030ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80030be:	601a      	str	r2, [r3, #0]
                date->month = m;
 80030c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80030c4:	605a      	str	r2, [r3, #4]
                date->year = y;
 80030c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80030ca:	609a      	str	r2, [r3, #8]
            } break;
 80030cc:	e0cc      	b.n	8003268 <minmea_scan+0x684>

            case 'T': { // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time = va_arg(ap, struct minmea_time *);
 80030ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d0:	1d1a      	adds	r2, r3, #4
 80030d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	637b      	str	r3, [r7, #52]	@ 0x34

                int h = -1, i = -1, s = -1, u = -1;
 80030d8:	2301      	movs	r3, #1
 80030da:	425b      	negs	r3, r3
 80030dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030de:	2301      	movs	r3, #1
 80030e0:	425b      	negs	r3, r3
 80030e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80030e4:	2301      	movs	r3, #1
 80030e6:	425b      	negs	r3, r3
 80030e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80030ea:	2301      	movs	r3, #1
 80030ec:	425b      	negs	r3, r3
 80030ee:	653b      	str	r3, [r7, #80]	@ 0x50

                if (field && minmea_isfield(*field)) {
 80030f0:	2290      	movs	r2, #144	@ 0x90
 80030f2:	18bb      	adds	r3, r7, r2
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d100      	bne.n	80030fc <minmea_scan+0x518>
 80030fa:	e0a7      	b.n	800324c <minmea_scan+0x668>
 80030fc:	18bb      	adds	r3, r7, r2
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	0018      	movs	r0, r3
 8003104:	f7ff fd48 	bl	8002b98 <minmea_isfield>
 8003108:	1e03      	subs	r3, r0, #0
 800310a:	d100      	bne.n	800310e <minmea_scan+0x52a>
 800310c:	e09e      	b.n	800324c <minmea_scan+0x668>
                    // Minimum required: integer time.
                    for (int i=0; i<6; i++)
 800310e:	2300      	movs	r3, #0
 8003110:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003112:	e011      	b.n	8003138 <minmea_scan+0x554>
                        if (!isdigit((unsigned char) field[i]))
 8003114:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003116:	2290      	movs	r2, #144	@ 0x90
 8003118:	18ba      	adds	r2, r7, r2
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	18d3      	adds	r3, r2, r3
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	4b76      	ldr	r3, [pc, #472]	@ (80032fc <minmea_scan+0x718>)
 8003124:	18d3      	adds	r3, r2, r3
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	001a      	movs	r2, r3
 800312a:	2304      	movs	r3, #4
 800312c:	4013      	ands	r3, r2
 800312e:	d100      	bne.n	8003132 <minmea_scan+0x54e>
 8003130:	e0d9      	b.n	80032e6 <minmea_scan+0x702>
                    for (int i=0; i<6; i++)
 8003132:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003134:	3301      	adds	r3, #1
 8003136:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800313a:	2b05      	cmp	r3, #5
 800313c:	ddea      	ble.n	8003114 <minmea_scan+0x530>
                            goto parse_error;

                    h = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 800313e:	2490      	movs	r4, #144	@ 0x90
 8003140:	193b      	adds	r3, r7, r4
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	781a      	ldrb	r2, [r3, #0]
 8003146:	2110      	movs	r1, #16
 8003148:	187b      	adds	r3, r7, r1
 800314a:	701a      	strb	r2, [r3, #0]
 800314c:	193b      	adds	r3, r7, r4
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3301      	adds	r3, #1
 8003152:	781a      	ldrb	r2, [r3, #0]
 8003154:	187b      	adds	r3, r7, r1
 8003156:	705a      	strb	r2, [r3, #1]
 8003158:	187b      	adds	r3, r7, r1
 800315a:	2200      	movs	r2, #0
 800315c:	709a      	strb	r2, [r3, #2]
 800315e:	187b      	adds	r3, r7, r1
 8003160:	220a      	movs	r2, #10
 8003162:	2100      	movs	r1, #0
 8003164:	0018      	movs	r0, r3
 8003166:	f005 fa0f 	bl	8008588 <strtol>
 800316a:	0003      	movs	r3, r0
 800316c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    i = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 800316e:	193b      	adds	r3, r7, r4
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	3302      	adds	r3, #2
 8003174:	781a      	ldrb	r2, [r3, #0]
 8003176:	210c      	movs	r1, #12
 8003178:	187b      	adds	r3, r7, r1
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	193b      	adds	r3, r7, r4
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	3303      	adds	r3, #3
 8003182:	781a      	ldrb	r2, [r3, #0]
 8003184:	187b      	adds	r3, r7, r1
 8003186:	705a      	strb	r2, [r3, #1]
 8003188:	187b      	adds	r3, r7, r1
 800318a:	2200      	movs	r2, #0
 800318c:	709a      	strb	r2, [r3, #2]
 800318e:	187b      	adds	r3, r7, r1
 8003190:	220a      	movs	r2, #10
 8003192:	2100      	movs	r1, #0
 8003194:	0018      	movs	r0, r3
 8003196:	f005 f9f7 	bl	8008588 <strtol>
 800319a:	0003      	movs	r3, r0
 800319c:	65bb      	str	r3, [r7, #88]	@ 0x58
                    s = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 800319e:	193b      	adds	r3, r7, r4
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3304      	adds	r3, #4
 80031a4:	781a      	ldrb	r2, [r3, #0]
 80031a6:	2108      	movs	r1, #8
 80031a8:	187b      	adds	r3, r7, r1
 80031aa:	701a      	strb	r2, [r3, #0]
 80031ac:	193b      	adds	r3, r7, r4
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3305      	adds	r3, #5
 80031b2:	781a      	ldrb	r2, [r3, #0]
 80031b4:	187b      	adds	r3, r7, r1
 80031b6:	705a      	strb	r2, [r3, #1]
 80031b8:	187b      	adds	r3, r7, r1
 80031ba:	2200      	movs	r2, #0
 80031bc:	709a      	strb	r2, [r3, #2]
 80031be:	187b      	adds	r3, r7, r1
 80031c0:	220a      	movs	r2, #10
 80031c2:	2100      	movs	r1, #0
 80031c4:	0018      	movs	r0, r3
 80031c6:	f005 f9df 	bl	8008588 <strtol>
 80031ca:	0003      	movs	r3, r0
 80031cc:	657b      	str	r3, [r7, #84]	@ 0x54
                    field += 6;
 80031ce:	193b      	adds	r3, r7, r4
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3306      	adds	r3, #6
 80031d4:	193a      	adds	r2, r7, r4
 80031d6:	6013      	str	r3, [r2, #0]

                    // Extra: fractional time. Saved as microseconds.
                    if (*field++ == '.') {
 80031d8:	193b      	adds	r3, r7, r4
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	1c5a      	adds	r2, r3, #1
 80031de:	1939      	adds	r1, r7, r4
 80031e0:	600a      	str	r2, [r1, #0]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80031e6:	d12f      	bne.n	8003248 <minmea_scan+0x664>
                        int value = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	64bb      	str	r3, [r7, #72]	@ 0x48
                        int scale = 1000000;
 80031ec:	4b44      	ldr	r3, [pc, #272]	@ (8003300 <minmea_scan+0x71c>)
 80031ee:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 80031f0:	e016      	b.n	8003220 <minmea_scan+0x63c>
                            value = (value * 10) + (*field++ - '0');
 80031f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031f4:	0013      	movs	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	189b      	adds	r3, r3, r2
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	0019      	movs	r1, r3
 80031fe:	2090      	movs	r0, #144	@ 0x90
 8003200:	183b      	adds	r3, r7, r0
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	1838      	adds	r0, r7, r0
 8003208:	6002      	str	r2, [r0, #0]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	3b30      	subs	r3, #48	@ 0x30
 800320e:	18cb      	adds	r3, r1, r3
 8003210:	64bb      	str	r3, [r7, #72]	@ 0x48
                            scale /= 10;
 8003212:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003214:	210a      	movs	r1, #10
 8003216:	0018      	movs	r0, r3
 8003218:	f7fd f812 	bl	8000240 <__divsi3>
 800321c:	0003      	movs	r3, r0
 800321e:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 8003220:	2390      	movs	r3, #144	@ 0x90
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	4b34      	ldr	r3, [pc, #208]	@ (80032fc <minmea_scan+0x718>)
 800322c:	18d3      	adds	r3, r2, r3
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	001a      	movs	r2, r3
 8003232:	2304      	movs	r3, #4
 8003234:	4013      	ands	r3, r2
 8003236:	d002      	beq.n	800323e <minmea_scan+0x65a>
 8003238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800323a:	2b01      	cmp	r3, #1
 800323c:	dcd9      	bgt.n	80031f2 <minmea_scan+0x60e>
                        }
                        u = value * scale;
 800323e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003240:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003242:	4353      	muls	r3, r2
 8003244:	653b      	str	r3, [r7, #80]	@ 0x50
 8003246:	e001      	b.n	800324c <minmea_scan+0x668>
                    } else {
                        u = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	653b      	str	r3, [r7, #80]	@ 0x50
                    }
                }

                time->hours = h;
 800324c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800324e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003250:	601a      	str	r2, [r3, #0]
                time->minutes = i;
 8003252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003254:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003256:	605a      	str	r2, [r3, #4]
                time->seconds = s;
 8003258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800325a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800325c:	609a      	str	r2, [r3, #8]
                time->microseconds = u;
 800325e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003260:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003262:	60da      	str	r2, [r3, #12]
            } break;
 8003264:	e000      	b.n	8003268 <minmea_scan+0x684>

            case '_': { // Ignore the field.
            } break;
 8003266:	46c0      	nop			@ (mov r8, r8)
            default: { // Unknown.
                goto parse_error;
            } break;
        }

        next_field();
 8003268:	e002      	b.n	8003270 <minmea_scan+0x68c>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3301      	adds	r3, #1
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	0018      	movs	r0, r3
 8003276:	f7ff fc8f 	bl	8002b98 <minmea_isfield>
 800327a:	1e03      	subs	r3, r0, #0
 800327c:	d1f5      	bne.n	800326a <minmea_scan+0x686>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b2c      	cmp	r3, #44	@ 0x2c
 8003284:	d107      	bne.n	8003296 <minmea_scan+0x6b2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3301      	adds	r3, #1
 800328a:	607b      	str	r3, [r7, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2290      	movs	r2, #144	@ 0x90
 8003290:	18ba      	adds	r2, r7, r2
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	e003      	b.n	800329e <minmea_scan+0x6ba>
 8003296:	2300      	movs	r3, #0
 8003298:	2290      	movs	r2, #144	@ 0x90
 800329a:	18ba      	adds	r2, r7, r2
 800329c:	6013      	str	r3, [r2, #0]
    while (*format) {
 800329e:	23a4      	movs	r3, #164	@ 0xa4
 80032a0:	2208      	movs	r2, #8
 80032a2:	189b      	adds	r3, r3, r2
 80032a4:	19db      	adds	r3, r3, r7
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d000      	beq.n	80032b0 <minmea_scan+0x6cc>
 80032ae:	e4b0      	b.n	8002c12 <minmea_scan+0x2e>
    }

    result = true;
 80032b0:	2397      	movs	r3, #151	@ 0x97
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	2201      	movs	r2, #1
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	e016      	b.n	80032e8 <minmea_scan+0x704>
            goto parse_error;
 80032ba:	46c0      	nop			@ (mov r8, r8)
 80032bc:	e014      	b.n	80032e8 <minmea_scan+0x704>
                goto parse_error;
 80032be:	46c0      	nop			@ (mov r8, r8)
 80032c0:	e012      	b.n	80032e8 <minmea_scan+0x704>
                            goto parse_error;
 80032c2:	46c0      	nop			@ (mov r8, r8)
 80032c4:	e010      	b.n	80032e8 <minmea_scan+0x704>
                                    goto parse_error;
 80032c6:	46c0      	nop			@ (mov r8, r8)
 80032c8:	e00e      	b.n	80032e8 <minmea_scan+0x704>
                            goto parse_error;
 80032ca:	46c0      	nop			@ (mov r8, r8)
 80032cc:	e00c      	b.n	80032e8 <minmea_scan+0x704>
                    goto parse_error;
 80032ce:	46c0      	nop			@ (mov r8, r8)
 80032d0:	e00a      	b.n	80032e8 <minmea_scan+0x704>
                        goto parse_error;
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	e008      	b.n	80032e8 <minmea_scan+0x704>
                    goto parse_error;
 80032d6:	46c0      	nop			@ (mov r8, r8)
 80032d8:	e006      	b.n	80032e8 <minmea_scan+0x704>
                    goto parse_error;
 80032da:	46c0      	nop			@ (mov r8, r8)
 80032dc:	e004      	b.n	80032e8 <minmea_scan+0x704>
                        goto parse_error;
 80032de:	46c0      	nop			@ (mov r8, r8)
 80032e0:	e002      	b.n	80032e8 <minmea_scan+0x704>
                            goto parse_error;
 80032e2:	46c0      	nop			@ (mov r8, r8)
 80032e4:	e000      	b.n	80032e8 <minmea_scan+0x704>
                            goto parse_error;
 80032e6:	46c0      	nop			@ (mov r8, r8)

parse_error:
    va_end(ap);
    return result;
 80032e8:	2397      	movs	r3, #151	@ 0x97
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	781b      	ldrb	r3, [r3, #0]
}
 80032ee:	0018      	movs	r0, r3
 80032f0:	46bd      	mov	sp, r7
 80032f2:	b027      	add	sp, #156	@ 0x9c
 80032f4:	bcb0      	pop	{r4, r5, r7}
 80032f6:	bc08      	pop	{r3}
 80032f8:	b003      	add	sp, #12
 80032fa:	4718      	bx	r3
 80032fc:	08009730 	.word	0x08009730
 8003300:	000f4240 	.word	0x000f4240

08003304 <minmea_parse_rmc>:

    return MINMEA_UNKNOWN;
}

bool minmea_parse_rmc(struct minmea_sentence_rmc *frame, const char *sentence)
{
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46d6      	mov	lr, sl
 8003308:	464f      	mov	r7, r9
 800330a:	4646      	mov	r6, r8
 800330c:	b5c0      	push	{r6, r7, lr}
 800330e:	b092      	sub	sp, #72	@ 0x48
 8003310:	af0a      	add	r7, sp, #40	@ 0x28
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
    char type[6];
    char validity;
    int latitude_direction;
    int longitude_direction;
    int variation_direction;
    if (!minmea_scan(sentence, "tTcfdfdffDfd",
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	469a      	mov	sl, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3314      	adds	r3, #20
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	321c      	adds	r2, #28
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	3124      	adds	r1, #36	@ 0x24
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	302c      	adds	r0, #44	@ 0x2c
 800332a:	687c      	ldr	r4, [r7, #4]
 800332c:	3434      	adds	r4, #52	@ 0x34
 800332e:	687d      	ldr	r5, [r7, #4]
 8003330:	3540      	adds	r5, #64	@ 0x40
 8003332:	2618      	movs	r6, #24
 8003334:	46b1      	mov	r9, r6
 8003336:	44b9      	add	r9, r7
 8003338:	4e2a      	ldr	r6, [pc, #168]	@ (80033e4 <minmea_parse_rmc+0xe0>)
 800333a:	46b0      	mov	r8, r6
 800333c:	683e      	ldr	r6, [r7, #0]
 800333e:	46b4      	mov	ip, r6
 8003340:	2608      	movs	r6, #8
 8003342:	19be      	adds	r6, r7, r6
 8003344:	9609      	str	r6, [sp, #36]	@ 0x24
 8003346:	9508      	str	r5, [sp, #32]
 8003348:	9407      	str	r4, [sp, #28]
 800334a:	9006      	str	r0, [sp, #24]
 800334c:	9105      	str	r1, [sp, #20]
 800334e:	210c      	movs	r1, #12
 8003350:	1879      	adds	r1, r7, r1
 8003352:	9104      	str	r1, [sp, #16]
 8003354:	9203      	str	r2, [sp, #12]
 8003356:	2210      	movs	r2, #16
 8003358:	18ba      	adds	r2, r7, r2
 800335a:	9202      	str	r2, [sp, #8]
 800335c:	9301      	str	r3, [sp, #4]
 800335e:	2317      	movs	r3, #23
 8003360:	18fb      	adds	r3, r7, r3
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	4653      	mov	r3, sl
 8003366:	464a      	mov	r2, r9
 8003368:	4641      	mov	r1, r8
 800336a:	4660      	mov	r0, ip
 800336c:	f7ff fc3a 	bl	8002be4 <minmea_scan>
 8003370:	0003      	movs	r3, r0
 8003372:	001a      	movs	r2, r3
 8003374:	2301      	movs	r3, #1
 8003376:	4053      	eors	r3, r2
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <minmea_parse_rmc+0x7e>
            &frame->longitude, &longitude_direction,
            &frame->speed,
            &frame->course,
            &frame->date,
            &frame->variation, &variation_direction))
        return false;
 800337e:	2300      	movs	r3, #0
 8003380:	e027      	b.n	80033d2 <minmea_parse_rmc+0xce>
    if (strcmp(type+2, "RMC"))
 8003382:	2318      	movs	r3, #24
 8003384:	18fb      	adds	r3, r7, r3
 8003386:	3302      	adds	r3, #2
 8003388:	4a17      	ldr	r2, [pc, #92]	@ (80033e8 <minmea_parse_rmc+0xe4>)
 800338a:	0011      	movs	r1, r2
 800338c:	0018      	movs	r0, r3
 800338e:	f7fc feb9 	bl	8000104 <strcmp>
 8003392:	1e03      	subs	r3, r0, #0
 8003394:	d001      	beq.n	800339a <minmea_parse_rmc+0x96>
        return false;
 8003396:	2300      	movs	r3, #0
 8003398:	e01b      	b.n	80033d2 <minmea_parse_rmc+0xce>

    frame->valid = (validity == 'A');
 800339a:	2317      	movs	r3, #23
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	3b41      	subs	r3, #65	@ 0x41
 80033a2:	425a      	negs	r2, r3
 80033a4:	4153      	adcs	r3, r2
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	741a      	strb	r2, [r3, #16]
    frame->latitude.value *= latitude_direction;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	435a      	muls	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	615a      	str	r2, [r3, #20]
    frame->longitude.value *= longitude_direction;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	435a      	muls	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	61da      	str	r2, [r3, #28]
    frame->variation.value *= variation_direction;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	435a      	muls	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	641a      	str	r2, [r3, #64]	@ 0x40

    return true;
 80033d0:	2301      	movs	r3, #1
}
 80033d2:	0018      	movs	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b008      	add	sp, #32
 80033d8:	bce0      	pop	{r5, r6, r7}
 80033da:	46ba      	mov	sl, r7
 80033dc:	46b1      	mov	r9, r6
 80033de:	46a8      	mov	r8, r5
 80033e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033e2:	46c0      	nop			@ (mov r8, r8)
 80033e4:	08008f4c 	.word	0x08008f4c
 80033e8:	08008f38 	.word	0x08008f38

080033ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033f2:	4b11      	ldr	r3, [pc, #68]	@ (8003438 <HAL_MspInit+0x4c>)
 80033f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033f6:	4b10      	ldr	r3, [pc, #64]	@ (8003438 <HAL_MspInit+0x4c>)
 80033f8:	2101      	movs	r1, #1
 80033fa:	430a      	orrs	r2, r1
 80033fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80033fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003438 <HAL_MspInit+0x4c>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003402:	2201      	movs	r2, #1
 8003404:	4013      	ands	r3, r2
 8003406:	607b      	str	r3, [r7, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800340a:	4b0b      	ldr	r3, [pc, #44]	@ (8003438 <HAL_MspInit+0x4c>)
 800340c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800340e:	4b0a      	ldr	r3, [pc, #40]	@ (8003438 <HAL_MspInit+0x4c>)
 8003410:	2180      	movs	r1, #128	@ 0x80
 8003412:	0549      	lsls	r1, r1, #21
 8003414:	430a      	orrs	r2, r1
 8003416:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003418:	4b07      	ldr	r3, [pc, #28]	@ (8003438 <HAL_MspInit+0x4c>)
 800341a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800341c:	2380      	movs	r3, #128	@ 0x80
 800341e:	055b      	lsls	r3, r3, #21
 8003420:	4013      	ands	r3, r2
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003426:	23c0      	movs	r3, #192	@ 0xc0
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	0018      	movs	r0, r3
 800342c:	f000 faf2 	bl	8003a14 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003430:	46c0      	nop			@ (mov r8, r8)
 8003432:	46bd      	mov	sp, r7
 8003434:	b002      	add	sp, #8
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40021000 	.word	0x40021000

0800343c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800343c:	b590      	push	{r4, r7, lr}
 800343e:	b09d      	sub	sp, #116	@ 0x74
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003444:	235c      	movs	r3, #92	@ 0x5c
 8003446:	18fb      	adds	r3, r7, r3
 8003448:	0018      	movs	r0, r3
 800344a:	2314      	movs	r3, #20
 800344c:	001a      	movs	r2, r3
 800344e:	2100      	movs	r1, #0
 8003450:	f005 f8c6 	bl	80085e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003454:	2410      	movs	r4, #16
 8003456:	193b      	adds	r3, r7, r4
 8003458:	0018      	movs	r0, r3
 800345a:	234c      	movs	r3, #76	@ 0x4c
 800345c:	001a      	movs	r2, r3
 800345e:	2100      	movs	r1, #0
 8003460:	f005 f8be 	bl	80085e0 <memset>
  if(hi2c->Instance==I2C1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a23      	ldr	r2, [pc, #140]	@ (80034f8 <HAL_I2C_MspInit+0xbc>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d13f      	bne.n	80034ee <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800346e:	193b      	adds	r3, r7, r4
 8003470:	2220      	movs	r2, #32
 8003472:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003474:	193b      	adds	r3, r7, r4
 8003476:	2200      	movs	r2, #0
 8003478:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800347a:	193b      	adds	r3, r7, r4
 800347c:	0018      	movs	r0, r3
 800347e:	f002 f8d3 	bl	8005628 <HAL_RCCEx_PeriphCLKConfig>
 8003482:	1e03      	subs	r3, r0, #0
 8003484:	d001      	beq.n	800348a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003486:	f7ff fb81 	bl	8002b8c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800348a:	4b1c      	ldr	r3, [pc, #112]	@ (80034fc <HAL_I2C_MspInit+0xc0>)
 800348c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800348e:	4b1b      	ldr	r3, [pc, #108]	@ (80034fc <HAL_I2C_MspInit+0xc0>)
 8003490:	2101      	movs	r1, #1
 8003492:	430a      	orrs	r2, r1
 8003494:	635a      	str	r2, [r3, #52]	@ 0x34
 8003496:	4b19      	ldr	r3, [pc, #100]	@ (80034fc <HAL_I2C_MspInit+0xc0>)
 8003498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800349a:	2201      	movs	r2, #1
 800349c:	4013      	ands	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80034a2:	215c      	movs	r1, #92	@ 0x5c
 80034a4:	187b      	adds	r3, r7, r1
 80034a6:	22c0      	movs	r2, #192	@ 0xc0
 80034a8:	00d2      	lsls	r2, r2, #3
 80034aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034ac:	187b      	adds	r3, r7, r1
 80034ae:	2212      	movs	r2, #18
 80034b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	187b      	adds	r3, r7, r1
 80034b4:	2200      	movs	r2, #0
 80034b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b8:	187b      	adds	r3, r7, r1
 80034ba:	2200      	movs	r2, #0
 80034bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80034be:	187b      	adds	r3, r7, r1
 80034c0:	2206      	movs	r2, #6
 80034c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c4:	187a      	adds	r2, r7, r1
 80034c6:	23a0      	movs	r3, #160	@ 0xa0
 80034c8:	05db      	lsls	r3, r3, #23
 80034ca:	0011      	movs	r1, r2
 80034cc:	0018      	movs	r0, r3
 80034ce:	f000 fb6b 	bl	8003ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034d2:	4b0a      	ldr	r3, [pc, #40]	@ (80034fc <HAL_I2C_MspInit+0xc0>)
 80034d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034d6:	4b09      	ldr	r3, [pc, #36]	@ (80034fc <HAL_I2C_MspInit+0xc0>)
 80034d8:	2180      	movs	r1, #128	@ 0x80
 80034da:	0389      	lsls	r1, r1, #14
 80034dc:	430a      	orrs	r2, r1
 80034de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80034e0:	4b06      	ldr	r3, [pc, #24]	@ (80034fc <HAL_I2C_MspInit+0xc0>)
 80034e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034e4:	2380      	movs	r3, #128	@ 0x80
 80034e6:	039b      	lsls	r3, r3, #14
 80034e8:	4013      	ands	r3, r2
 80034ea:	60bb      	str	r3, [r7, #8]
 80034ec:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80034ee:	46c0      	nop			@ (mov r8, r8)
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b01d      	add	sp, #116	@ 0x74
 80034f4:	bd90      	pop	{r4, r7, pc}
 80034f6:	46c0      	nop			@ (mov r8, r8)
 80034f8:	40005400 	.word	0x40005400
 80034fc:	40021000 	.word	0x40021000

08003500 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003500:	b590      	push	{r4, r7, lr}
 8003502:	b08b      	sub	sp, #44	@ 0x2c
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003508:	2414      	movs	r4, #20
 800350a:	193b      	adds	r3, r7, r4
 800350c:	0018      	movs	r0, r3
 800350e:	2314      	movs	r3, #20
 8003510:	001a      	movs	r2, r3
 8003512:	2100      	movs	r1, #0
 8003514:	f005 f864 	bl	80085e0 <memset>
  if(hspi->Instance==SPI1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a1b      	ldr	r2, [pc, #108]	@ (800358c <HAL_SPI_MspInit+0x8c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d130      	bne.n	8003584 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003522:	4b1b      	ldr	r3, [pc, #108]	@ (8003590 <HAL_SPI_MspInit+0x90>)
 8003524:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003526:	4b1a      	ldr	r3, [pc, #104]	@ (8003590 <HAL_SPI_MspInit+0x90>)
 8003528:	2180      	movs	r1, #128	@ 0x80
 800352a:	0149      	lsls	r1, r1, #5
 800352c:	430a      	orrs	r2, r1
 800352e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003530:	4b17      	ldr	r3, [pc, #92]	@ (8003590 <HAL_SPI_MspInit+0x90>)
 8003532:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003534:	2380      	movs	r3, #128	@ 0x80
 8003536:	015b      	lsls	r3, r3, #5
 8003538:	4013      	ands	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800353e:	4b14      	ldr	r3, [pc, #80]	@ (8003590 <HAL_SPI_MspInit+0x90>)
 8003540:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003542:	4b13      	ldr	r3, [pc, #76]	@ (8003590 <HAL_SPI_MspInit+0x90>)
 8003544:	2101      	movs	r1, #1
 8003546:	430a      	orrs	r2, r1
 8003548:	635a      	str	r2, [r3, #52]	@ 0x34
 800354a:	4b11      	ldr	r3, [pc, #68]	@ (8003590 <HAL_SPI_MspInit+0x90>)
 800354c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800354e:	2201      	movs	r2, #1
 8003550:	4013      	ands	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8003556:	0021      	movs	r1, r4
 8003558:	187b      	adds	r3, r7, r1
 800355a:	2206      	movs	r2, #6
 800355c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355e:	187b      	adds	r3, r7, r1
 8003560:	2202      	movs	r2, #2
 8003562:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003564:	187b      	adds	r3, r7, r1
 8003566:	2200      	movs	r2, #0
 8003568:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356a:	187b      	adds	r3, r7, r1
 800356c:	2200      	movs	r2, #0
 800356e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003570:	187b      	adds	r3, r7, r1
 8003572:	2200      	movs	r2, #0
 8003574:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003576:	187a      	adds	r2, r7, r1
 8003578:	23a0      	movs	r3, #160	@ 0xa0
 800357a:	05db      	lsls	r3, r3, #23
 800357c:	0011      	movs	r1, r2
 800357e:	0018      	movs	r0, r3
 8003580:	f000 fb12 	bl	8003ba8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003584:	46c0      	nop			@ (mov r8, r8)
 8003586:	46bd      	mov	sp, r7
 8003588:	b00b      	add	sp, #44	@ 0x2c
 800358a:	bd90      	pop	{r4, r7, pc}
 800358c:	40013000 	.word	0x40013000
 8003590:	40021000 	.word	0x40021000

08003594 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a0a      	ldr	r2, [pc, #40]	@ (80035cc <HAL_TIM_Base_MspInit+0x38>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d10d      	bne.n	80035c2 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80035a6:	4b0a      	ldr	r3, [pc, #40]	@ (80035d0 <HAL_TIM_Base_MspInit+0x3c>)
 80035a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035aa:	4b09      	ldr	r3, [pc, #36]	@ (80035d0 <HAL_TIM_Base_MspInit+0x3c>)
 80035ac:	2180      	movs	r1, #128	@ 0x80
 80035ae:	02c9      	lsls	r1, r1, #11
 80035b0:	430a      	orrs	r2, r1
 80035b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80035b4:	4b06      	ldr	r3, [pc, #24]	@ (80035d0 <HAL_TIM_Base_MspInit+0x3c>)
 80035b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035b8:	2380      	movs	r3, #128	@ 0x80
 80035ba:	02db      	lsls	r3, r3, #11
 80035bc:	4013      	ands	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 80035c2:	46c0      	nop			@ (mov r8, r8)
 80035c4:	46bd      	mov	sp, r7
 80035c6:	b004      	add	sp, #16
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	46c0      	nop			@ (mov r8, r8)
 80035cc:	40014800 	.word	0x40014800
 80035d0:	40021000 	.word	0x40021000

080035d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035d4:	b590      	push	{r4, r7, lr}
 80035d6:	b089      	sub	sp, #36	@ 0x24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035dc:	240c      	movs	r4, #12
 80035de:	193b      	adds	r3, r7, r4
 80035e0:	0018      	movs	r0, r3
 80035e2:	2314      	movs	r3, #20
 80035e4:	001a      	movs	r2, r3
 80035e6:	2100      	movs	r1, #0
 80035e8:	f004 fffa 	bl	80085e0 <memset>
  if(htim->Instance==TIM17)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a14      	ldr	r2, [pc, #80]	@ (8003644 <HAL_TIM_MspPostInit+0x70>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d122      	bne.n	800363c <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035f6:	4b14      	ldr	r3, [pc, #80]	@ (8003648 <HAL_TIM_MspPostInit+0x74>)
 80035f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035fa:	4b13      	ldr	r3, [pc, #76]	@ (8003648 <HAL_TIM_MspPostInit+0x74>)
 80035fc:	2101      	movs	r1, #1
 80035fe:	430a      	orrs	r2, r1
 8003600:	635a      	str	r2, [r3, #52]	@ 0x34
 8003602:	4b11      	ldr	r3, [pc, #68]	@ (8003648 <HAL_TIM_MspPostInit+0x74>)
 8003604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003606:	2201      	movs	r2, #1
 8003608:	4013      	ands	r3, r2
 800360a:	60bb      	str	r3, [r7, #8]
 800360c:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800360e:	0021      	movs	r1, r4
 8003610:	187b      	adds	r3, r7, r1
 8003612:	2280      	movs	r2, #128	@ 0x80
 8003614:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003616:	187b      	adds	r3, r7, r1
 8003618:	2202      	movs	r2, #2
 800361a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361c:	187b      	adds	r3, r7, r1
 800361e:	2200      	movs	r2, #0
 8003620:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003622:	187b      	adds	r3, r7, r1
 8003624:	2200      	movs	r2, #0
 8003626:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8003628:	187b      	adds	r3, r7, r1
 800362a:	2205      	movs	r2, #5
 800362c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800362e:	187a      	adds	r2, r7, r1
 8003630:	23a0      	movs	r3, #160	@ 0xa0
 8003632:	05db      	lsls	r3, r3, #23
 8003634:	0011      	movs	r1, r2
 8003636:	0018      	movs	r0, r3
 8003638:	f000 fab6 	bl	8003ba8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800363c:	46c0      	nop			@ (mov r8, r8)
 800363e:	46bd      	mov	sp, r7
 8003640:	b009      	add	sp, #36	@ 0x24
 8003642:	bd90      	pop	{r4, r7, pc}
 8003644:	40014800 	.word	0x40014800
 8003648:	40021000 	.word	0x40021000

0800364c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800364c:	b590      	push	{r4, r7, lr}
 800364e:	b09f      	sub	sp, #124	@ 0x7c
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003654:	2364      	movs	r3, #100	@ 0x64
 8003656:	18fb      	adds	r3, r7, r3
 8003658:	0018      	movs	r0, r3
 800365a:	2314      	movs	r3, #20
 800365c:	001a      	movs	r2, r3
 800365e:	2100      	movs	r1, #0
 8003660:	f004 ffbe 	bl	80085e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003664:	2418      	movs	r4, #24
 8003666:	193b      	adds	r3, r7, r4
 8003668:	0018      	movs	r0, r3
 800366a:	234c      	movs	r3, #76	@ 0x4c
 800366c:	001a      	movs	r2, r3
 800366e:	2100      	movs	r1, #0
 8003670:	f004 ffb6 	bl	80085e0 <memset>
  if(huart->Instance==USART1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a45      	ldr	r2, [pc, #276]	@ (8003790 <HAL_UART_MspInit+0x144>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d13e      	bne.n	80036fc <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800367e:	193b      	adds	r3, r7, r4
 8003680:	2201      	movs	r2, #1
 8003682:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003684:	193b      	adds	r3, r7, r4
 8003686:	2200      	movs	r2, #0
 8003688:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800368a:	193b      	adds	r3, r7, r4
 800368c:	0018      	movs	r0, r3
 800368e:	f001 ffcb 	bl	8005628 <HAL_RCCEx_PeriphCLKConfig>
 8003692:	1e03      	subs	r3, r0, #0
 8003694:	d001      	beq.n	800369a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003696:	f7ff fa79 	bl	8002b8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800369a:	4b3e      	ldr	r3, [pc, #248]	@ (8003794 <HAL_UART_MspInit+0x148>)
 800369c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800369e:	4b3d      	ldr	r3, [pc, #244]	@ (8003794 <HAL_UART_MspInit+0x148>)
 80036a0:	2180      	movs	r1, #128	@ 0x80
 80036a2:	01c9      	lsls	r1, r1, #7
 80036a4:	430a      	orrs	r2, r1
 80036a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80036a8:	4b3a      	ldr	r3, [pc, #232]	@ (8003794 <HAL_UART_MspInit+0x148>)
 80036aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036ac:	2380      	movs	r3, #128	@ 0x80
 80036ae:	01db      	lsls	r3, r3, #7
 80036b0:	4013      	ands	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036b6:	4b37      	ldr	r3, [pc, #220]	@ (8003794 <HAL_UART_MspInit+0x148>)
 80036b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036ba:	4b36      	ldr	r3, [pc, #216]	@ (8003794 <HAL_UART_MspInit+0x148>)
 80036bc:	2104      	movs	r1, #4
 80036be:	430a      	orrs	r2, r1
 80036c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80036c2:	4b34      	ldr	r3, [pc, #208]	@ (8003794 <HAL_UART_MspInit+0x148>)
 80036c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036c6:	2204      	movs	r2, #4
 80036c8:	4013      	ands	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80036ce:	2164      	movs	r1, #100	@ 0x64
 80036d0:	187b      	adds	r3, r7, r1
 80036d2:	2230      	movs	r2, #48	@ 0x30
 80036d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d6:	187b      	adds	r3, r7, r1
 80036d8:	2202      	movs	r2, #2
 80036da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036dc:	187b      	adds	r3, r7, r1
 80036de:	2200      	movs	r2, #0
 80036e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e2:	187b      	adds	r3, r7, r1
 80036e4:	2200      	movs	r2, #0
 80036e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80036e8:	187b      	adds	r3, r7, r1
 80036ea:	2201      	movs	r2, #1
 80036ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ee:	187b      	adds	r3, r7, r1
 80036f0:	4a29      	ldr	r2, [pc, #164]	@ (8003798 <HAL_UART_MspInit+0x14c>)
 80036f2:	0019      	movs	r1, r3
 80036f4:	0010      	movs	r0, r2
 80036f6:	f000 fa57 	bl	8003ba8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80036fa:	e045      	b.n	8003788 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a26      	ldr	r2, [pc, #152]	@ (800379c <HAL_UART_MspInit+0x150>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d140      	bne.n	8003788 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003706:	2118      	movs	r1, #24
 8003708:	187b      	adds	r3, r7, r1
 800370a:	2202      	movs	r2, #2
 800370c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800370e:	187b      	adds	r3, r7, r1
 8003710:	2200      	movs	r2, #0
 8003712:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003714:	187b      	adds	r3, r7, r1
 8003716:	0018      	movs	r0, r3
 8003718:	f001 ff86 	bl	8005628 <HAL_RCCEx_PeriphCLKConfig>
 800371c:	1e03      	subs	r3, r0, #0
 800371e:	d001      	beq.n	8003724 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8003720:	f7ff fa34 	bl	8002b8c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003724:	4b1b      	ldr	r3, [pc, #108]	@ (8003794 <HAL_UART_MspInit+0x148>)
 8003726:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003728:	4b1a      	ldr	r3, [pc, #104]	@ (8003794 <HAL_UART_MspInit+0x148>)
 800372a:	2180      	movs	r1, #128	@ 0x80
 800372c:	0289      	lsls	r1, r1, #10
 800372e:	430a      	orrs	r2, r1
 8003730:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003732:	4b18      	ldr	r3, [pc, #96]	@ (8003794 <HAL_UART_MspInit+0x148>)
 8003734:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003736:	2380      	movs	r3, #128	@ 0x80
 8003738:	029b      	lsls	r3, r3, #10
 800373a:	4013      	ands	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003740:	4b14      	ldr	r3, [pc, #80]	@ (8003794 <HAL_UART_MspInit+0x148>)
 8003742:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003744:	4b13      	ldr	r3, [pc, #76]	@ (8003794 <HAL_UART_MspInit+0x148>)
 8003746:	2101      	movs	r1, #1
 8003748:	430a      	orrs	r2, r1
 800374a:	635a      	str	r2, [r3, #52]	@ 0x34
 800374c:	4b11      	ldr	r3, [pc, #68]	@ (8003794 <HAL_UART_MspInit+0x148>)
 800374e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003750:	2201      	movs	r2, #1
 8003752:	4013      	ands	r3, r2
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003758:	2164      	movs	r1, #100	@ 0x64
 800375a:	187b      	adds	r3, r7, r1
 800375c:	22c0      	movs	r2, #192	@ 0xc0
 800375e:	0212      	lsls	r2, r2, #8
 8003760:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003762:	187b      	adds	r3, r7, r1
 8003764:	2202      	movs	r2, #2
 8003766:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003768:	187b      	adds	r3, r7, r1
 800376a:	2200      	movs	r2, #0
 800376c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376e:	187b      	adds	r3, r7, r1
 8003770:	2200      	movs	r2, #0
 8003772:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003774:	187b      	adds	r3, r7, r1
 8003776:	2201      	movs	r2, #1
 8003778:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800377a:	187a      	adds	r2, r7, r1
 800377c:	23a0      	movs	r3, #160	@ 0xa0
 800377e:	05db      	lsls	r3, r3, #23
 8003780:	0011      	movs	r1, r2
 8003782:	0018      	movs	r0, r3
 8003784:	f000 fa10 	bl	8003ba8 <HAL_GPIO_Init>
}
 8003788:	46c0      	nop			@ (mov r8, r8)
 800378a:	46bd      	mov	sp, r7
 800378c:	b01f      	add	sp, #124	@ 0x7c
 800378e:	bd90      	pop	{r4, r7, pc}
 8003790:	40013800 	.word	0x40013800
 8003794:	40021000 	.word	0x40021000
 8003798:	50000800 	.word	0x50000800
 800379c:	40004400 	.word	0x40004400

080037a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80037a4:	46c0      	nop			@ (mov r8, r8)
 80037a6:	e7fd      	b.n	80037a4 <NMI_Handler+0x4>

080037a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037ac:	46c0      	nop			@ (mov r8, r8)
 80037ae:	e7fd      	b.n	80037ac <HardFault_Handler+0x4>

080037b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80037b4:	46c0      	nop			@ (mov r8, r8)
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037be:	46c0      	nop			@ (mov r8, r8)
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037c8:	f000 f8e4 	bl	8003994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037cc:	46c0      	nop			@ (mov r8, r8)
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80037d8:	4b05      	ldr	r3, [pc, #20]	@ (80037f0 <RTC_TAMP_IRQHandler+0x1c>)
 80037da:	0018      	movs	r0, r3
 80037dc:	f002 fb66 	bl	8005eac <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80037e0:	4b03      	ldr	r3, [pc, #12]	@ (80037f0 <RTC_TAMP_IRQHandler+0x1c>)
 80037e2:	0018      	movs	r0, r3
 80037e4:	f002 fbe5 	bl	8005fb2 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80037e8:	46c0      	nop			@ (mov r8, r8)
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	46c0      	nop			@ (mov r8, r8)
 80037f0:	20000718 	.word	0x20000718

080037f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037fc:	4a14      	ldr	r2, [pc, #80]	@ (8003850 <_sbrk+0x5c>)
 80037fe:	4b15      	ldr	r3, [pc, #84]	@ (8003854 <_sbrk+0x60>)
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003808:	4b13      	ldr	r3, [pc, #76]	@ (8003858 <_sbrk+0x64>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d102      	bne.n	8003816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003810:	4b11      	ldr	r3, [pc, #68]	@ (8003858 <_sbrk+0x64>)
 8003812:	4a12      	ldr	r2, [pc, #72]	@ (800385c <_sbrk+0x68>)
 8003814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003816:	4b10      	ldr	r3, [pc, #64]	@ (8003858 <_sbrk+0x64>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	18d3      	adds	r3, r2, r3
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	429a      	cmp	r2, r3
 8003822:	d207      	bcs.n	8003834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003824:	f004 fee4 	bl	80085f0 <__errno>
 8003828:	0003      	movs	r3, r0
 800382a:	220c      	movs	r2, #12
 800382c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800382e:	2301      	movs	r3, #1
 8003830:	425b      	negs	r3, r3
 8003832:	e009      	b.n	8003848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003834:	4b08      	ldr	r3, [pc, #32]	@ (8003858 <_sbrk+0x64>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800383a:	4b07      	ldr	r3, [pc, #28]	@ (8003858 <_sbrk+0x64>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	18d2      	adds	r2, r2, r3
 8003842:	4b05      	ldr	r3, [pc, #20]	@ (8003858 <_sbrk+0x64>)
 8003844:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003846:	68fb      	ldr	r3, [r7, #12]
}
 8003848:	0018      	movs	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	b006      	add	sp, #24
 800384e:	bd80      	pop	{r7, pc}
 8003850:	20024000 	.word	0x20024000
 8003854:	00000400 	.word	0x00000400
 8003858:	20000888 	.word	0x20000888
 800385c:	200009d8 	.word	0x200009d8

08003860 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003864:	46c0      	nop			@ (mov r8, r8)
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800386c:	480d      	ldr	r0, [pc, #52]	@ (80038a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800386e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003870:	f7ff fff6 	bl	8003860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003874:	480c      	ldr	r0, [pc, #48]	@ (80038a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003876:	490d      	ldr	r1, [pc, #52]	@ (80038ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8003878:	4a0d      	ldr	r2, [pc, #52]	@ (80038b0 <LoopForever+0xe>)
  movs r3, #0
 800387a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800387c:	e002      	b.n	8003884 <LoopCopyDataInit>

0800387e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800387e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003882:	3304      	adds	r3, #4

08003884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003888:	d3f9      	bcc.n	800387e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800388a:	4a0a      	ldr	r2, [pc, #40]	@ (80038b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800388c:	4c0a      	ldr	r4, [pc, #40]	@ (80038b8 <LoopForever+0x16>)
  movs r3, #0
 800388e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003890:	e001      	b.n	8003896 <LoopFillZerobss>

08003892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003894:	3204      	adds	r2, #4

08003896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003898:	d3fb      	bcc.n	8003892 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800389a:	f004 feaf 	bl	80085fc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800389e:	f7fe fcf7 	bl	8002290 <main>

080038a2 <LoopForever>:

LoopForever:
  b LoopForever
 80038a2:	e7fe      	b.n	80038a2 <LoopForever>
  ldr   r0, =_estack
 80038a4:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80038a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038ac:	2000054c 	.word	0x2000054c
  ldr r2, =_sidata
 80038b0:	08009874 	.word	0x08009874
  ldr r2, =_sbss
 80038b4:	20000550 	.word	0x20000550
  ldr r4, =_ebss
 80038b8:	200009d8 	.word	0x200009d8

080038bc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80038bc:	e7fe      	b.n	80038bc <ADC1_COMP_IRQHandler>
	...

080038c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038c6:	1dfb      	adds	r3, r7, #7
 80038c8:	2200      	movs	r2, #0
 80038ca:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038cc:	4b0b      	ldr	r3, [pc, #44]	@ (80038fc <HAL_Init+0x3c>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	4b0a      	ldr	r3, [pc, #40]	@ (80038fc <HAL_Init+0x3c>)
 80038d2:	2180      	movs	r1, #128	@ 0x80
 80038d4:	0049      	lsls	r1, r1, #1
 80038d6:	430a      	orrs	r2, r1
 80038d8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038da:	2003      	movs	r0, #3
 80038dc:	f000 f810 	bl	8003900 <HAL_InitTick>
 80038e0:	1e03      	subs	r3, r0, #0
 80038e2:	d003      	beq.n	80038ec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80038e4:	1dfb      	adds	r3, r7, #7
 80038e6:	2201      	movs	r2, #1
 80038e8:	701a      	strb	r2, [r3, #0]
 80038ea:	e001      	b.n	80038f0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80038ec:	f7ff fd7e 	bl	80033ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80038f0:	1dfb      	adds	r3, r7, #7
 80038f2:	781b      	ldrb	r3, [r3, #0]
}
 80038f4:	0018      	movs	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b002      	add	sp, #8
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40022000 	.word	0x40022000

08003900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003900:	b590      	push	{r4, r7, lr}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003908:	230f      	movs	r3, #15
 800390a:	18fb      	adds	r3, r7, r3
 800390c:	2200      	movs	r2, #0
 800390e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003910:	4b1d      	ldr	r3, [pc, #116]	@ (8003988 <HAL_InitTick+0x88>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d02b      	beq.n	8003970 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003918:	4b1c      	ldr	r3, [pc, #112]	@ (800398c <HAL_InitTick+0x8c>)
 800391a:	681c      	ldr	r4, [r3, #0]
 800391c:	4b1a      	ldr	r3, [pc, #104]	@ (8003988 <HAL_InitTick+0x88>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	0019      	movs	r1, r3
 8003922:	23fa      	movs	r3, #250	@ 0xfa
 8003924:	0098      	lsls	r0, r3, #2
 8003926:	f7fc fc01 	bl	800012c <__udivsi3>
 800392a:	0003      	movs	r3, r0
 800392c:	0019      	movs	r1, r3
 800392e:	0020      	movs	r0, r4
 8003930:	f7fc fbfc 	bl	800012c <__udivsi3>
 8003934:	0003      	movs	r3, r0
 8003936:	0018      	movs	r0, r3
 8003938:	f000 f929 	bl	8003b8e <HAL_SYSTICK_Config>
 800393c:	1e03      	subs	r3, r0, #0
 800393e:	d112      	bne.n	8003966 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b03      	cmp	r3, #3
 8003944:	d80a      	bhi.n	800395c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	2301      	movs	r3, #1
 800394a:	425b      	negs	r3, r3
 800394c:	2200      	movs	r2, #0
 800394e:	0018      	movs	r0, r3
 8003950:	f000 f908 	bl	8003b64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003954:	4b0e      	ldr	r3, [pc, #56]	@ (8003990 <HAL_InitTick+0x90>)
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	e00d      	b.n	8003978 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800395c:	230f      	movs	r3, #15
 800395e:	18fb      	adds	r3, r7, r3
 8003960:	2201      	movs	r2, #1
 8003962:	701a      	strb	r2, [r3, #0]
 8003964:	e008      	b.n	8003978 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003966:	230f      	movs	r3, #15
 8003968:	18fb      	adds	r3, r7, r3
 800396a:	2201      	movs	r2, #1
 800396c:	701a      	strb	r2, [r3, #0]
 800396e:	e003      	b.n	8003978 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003970:	230f      	movs	r3, #15
 8003972:	18fb      	adds	r3, r7, r3
 8003974:	2201      	movs	r2, #1
 8003976:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003978:	230f      	movs	r3, #15
 800397a:	18fb      	adds	r3, r7, r3
 800397c:	781b      	ldrb	r3, [r3, #0]
}
 800397e:	0018      	movs	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	b005      	add	sp, #20
 8003984:	bd90      	pop	{r4, r7, pc}
 8003986:	46c0      	nop			@ (mov r8, r8)
 8003988:	200004f8 	.word	0x200004f8
 800398c:	200004f0 	.word	0x200004f0
 8003990:	200004f4 	.word	0x200004f4

08003994 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003998:	4b05      	ldr	r3, [pc, #20]	@ (80039b0 <HAL_IncTick+0x1c>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	001a      	movs	r2, r3
 800399e:	4b05      	ldr	r3, [pc, #20]	@ (80039b4 <HAL_IncTick+0x20>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	18d2      	adds	r2, r2, r3
 80039a4:	4b03      	ldr	r3, [pc, #12]	@ (80039b4 <HAL_IncTick+0x20>)
 80039a6:	601a      	str	r2, [r3, #0]
}
 80039a8:	46c0      	nop			@ (mov r8, r8)
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	46c0      	nop			@ (mov r8, r8)
 80039b0:	200004f8 	.word	0x200004f8
 80039b4:	2000088c 	.word	0x2000088c

080039b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  return uwTick;
 80039bc:	4b02      	ldr	r3, [pc, #8]	@ (80039c8 <HAL_GetTick+0x10>)
 80039be:	681b      	ldr	r3, [r3, #0]
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	46c0      	nop			@ (mov r8, r8)
 80039c8:	2000088c 	.word	0x2000088c

080039cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039d4:	f7ff fff0 	bl	80039b8 <HAL_GetTick>
 80039d8:	0003      	movs	r3, r0
 80039da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	3301      	adds	r3, #1
 80039e4:	d005      	beq.n	80039f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003a10 <HAL_Delay+0x44>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	001a      	movs	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	189b      	adds	r3, r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039f2:	46c0      	nop			@ (mov r8, r8)
 80039f4:	f7ff ffe0 	bl	80039b8 <HAL_GetTick>
 80039f8:	0002      	movs	r2, r0
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d8f7      	bhi.n	80039f4 <HAL_Delay+0x28>
  {
  }
}
 8003a04:	46c0      	nop			@ (mov r8, r8)
 8003a06:	46c0      	nop			@ (mov r8, r8)
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	b004      	add	sp, #16
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	46c0      	nop			@ (mov r8, r8)
 8003a10:	200004f8 	.word	0x200004f8

08003a14 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003a1c:	4b06      	ldr	r3, [pc, #24]	@ (8003a38 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a06      	ldr	r2, [pc, #24]	@ (8003a3c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	0019      	movs	r1, r3
 8003a26:	4b04      	ldr	r3, [pc, #16]	@ (8003a38 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	601a      	str	r2, [r3, #0]
}
 8003a2e:	46c0      	nop			@ (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b002      	add	sp, #8
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	46c0      	nop			@ (mov r8, r8)
 8003a38:	40010000 	.word	0x40010000
 8003a3c:	fffff9ff 	.word	0xfffff9ff

08003a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a40:	b590      	push	{r4, r7, lr}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	0002      	movs	r2, r0
 8003a48:	6039      	str	r1, [r7, #0]
 8003a4a:	1dfb      	adds	r3, r7, #7
 8003a4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a4e:	1dfb      	adds	r3, r7, #7
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a54:	d828      	bhi.n	8003aa8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a56:	4a2f      	ldr	r2, [pc, #188]	@ (8003b14 <__NVIC_SetPriority+0xd4>)
 8003a58:	1dfb      	adds	r3, r7, #7
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	b25b      	sxtb	r3, r3
 8003a5e:	089b      	lsrs	r3, r3, #2
 8003a60:	33c0      	adds	r3, #192	@ 0xc0
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	589b      	ldr	r3, [r3, r2]
 8003a66:	1dfa      	adds	r2, r7, #7
 8003a68:	7812      	ldrb	r2, [r2, #0]
 8003a6a:	0011      	movs	r1, r2
 8003a6c:	2203      	movs	r2, #3
 8003a6e:	400a      	ands	r2, r1
 8003a70:	00d2      	lsls	r2, r2, #3
 8003a72:	21ff      	movs	r1, #255	@ 0xff
 8003a74:	4091      	lsls	r1, r2
 8003a76:	000a      	movs	r2, r1
 8003a78:	43d2      	mvns	r2, r2
 8003a7a:	401a      	ands	r2, r3
 8003a7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	019b      	lsls	r3, r3, #6
 8003a82:	22ff      	movs	r2, #255	@ 0xff
 8003a84:	401a      	ands	r2, r3
 8003a86:	1dfb      	adds	r3, r7, #7
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	4003      	ands	r3, r0
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a94:	481f      	ldr	r0, [pc, #124]	@ (8003b14 <__NVIC_SetPriority+0xd4>)
 8003a96:	1dfb      	adds	r3, r7, #7
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	b25b      	sxtb	r3, r3
 8003a9c:	089b      	lsrs	r3, r3, #2
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	33c0      	adds	r3, #192	@ 0xc0
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003aa6:	e031      	b.n	8003b0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003aa8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b18 <__NVIC_SetPriority+0xd8>)
 8003aaa:	1dfb      	adds	r3, r7, #7
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	0019      	movs	r1, r3
 8003ab0:	230f      	movs	r3, #15
 8003ab2:	400b      	ands	r3, r1
 8003ab4:	3b08      	subs	r3, #8
 8003ab6:	089b      	lsrs	r3, r3, #2
 8003ab8:	3306      	adds	r3, #6
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	18d3      	adds	r3, r2, r3
 8003abe:	3304      	adds	r3, #4
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	1dfa      	adds	r2, r7, #7
 8003ac4:	7812      	ldrb	r2, [r2, #0]
 8003ac6:	0011      	movs	r1, r2
 8003ac8:	2203      	movs	r2, #3
 8003aca:	400a      	ands	r2, r1
 8003acc:	00d2      	lsls	r2, r2, #3
 8003ace:	21ff      	movs	r1, #255	@ 0xff
 8003ad0:	4091      	lsls	r1, r2
 8003ad2:	000a      	movs	r2, r1
 8003ad4:	43d2      	mvns	r2, r2
 8003ad6:	401a      	ands	r2, r3
 8003ad8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	019b      	lsls	r3, r3, #6
 8003ade:	22ff      	movs	r2, #255	@ 0xff
 8003ae0:	401a      	ands	r2, r3
 8003ae2:	1dfb      	adds	r3, r7, #7
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	2303      	movs	r3, #3
 8003aea:	4003      	ands	r3, r0
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003af0:	4809      	ldr	r0, [pc, #36]	@ (8003b18 <__NVIC_SetPriority+0xd8>)
 8003af2:	1dfb      	adds	r3, r7, #7
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	001c      	movs	r4, r3
 8003af8:	230f      	movs	r3, #15
 8003afa:	4023      	ands	r3, r4
 8003afc:	3b08      	subs	r3, #8
 8003afe:	089b      	lsrs	r3, r3, #2
 8003b00:	430a      	orrs	r2, r1
 8003b02:	3306      	adds	r3, #6
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	18c3      	adds	r3, r0, r3
 8003b08:	3304      	adds	r3, #4
 8003b0a:	601a      	str	r2, [r3, #0]
}
 8003b0c:	46c0      	nop			@ (mov r8, r8)
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b003      	add	sp, #12
 8003b12:	bd90      	pop	{r4, r7, pc}
 8003b14:	e000e100 	.word	0xe000e100
 8003b18:	e000ed00 	.word	0xe000ed00

08003b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	1e5a      	subs	r2, r3, #1
 8003b28:	2380      	movs	r3, #128	@ 0x80
 8003b2a:	045b      	lsls	r3, r3, #17
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d301      	bcc.n	8003b34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b30:	2301      	movs	r3, #1
 8003b32:	e010      	b.n	8003b56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b34:	4b0a      	ldr	r3, [pc, #40]	@ (8003b60 <SysTick_Config+0x44>)
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	3a01      	subs	r2, #1
 8003b3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	425b      	negs	r3, r3
 8003b40:	2103      	movs	r1, #3
 8003b42:	0018      	movs	r0, r3
 8003b44:	f7ff ff7c 	bl	8003a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b48:	4b05      	ldr	r3, [pc, #20]	@ (8003b60 <SysTick_Config+0x44>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b4e:	4b04      	ldr	r3, [pc, #16]	@ (8003b60 <SysTick_Config+0x44>)
 8003b50:	2207      	movs	r2, #7
 8003b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	0018      	movs	r0, r3
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b002      	add	sp, #8
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	46c0      	nop			@ (mov r8, r8)
 8003b60:	e000e010 	.word	0xe000e010

08003b64 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	607a      	str	r2, [r7, #4]
 8003b6e:	210f      	movs	r1, #15
 8003b70:	187b      	adds	r3, r7, r1
 8003b72:	1c02      	adds	r2, r0, #0
 8003b74:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	187b      	adds	r3, r7, r1
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	b25b      	sxtb	r3, r3
 8003b7e:	0011      	movs	r1, r2
 8003b80:	0018      	movs	r0, r3
 8003b82:	f7ff ff5d 	bl	8003a40 <__NVIC_SetPriority>
}
 8003b86:	46c0      	nop			@ (mov r8, r8)
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b004      	add	sp, #16
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b082      	sub	sp, #8
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f7ff ffbf 	bl	8003b1c <SysTick_Config>
 8003b9e:	0003      	movs	r3, r0
}
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	b002      	add	sp, #8
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bb6:	e14d      	b.n	8003e54 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	4091      	lsls	r1, r2
 8003bc2:	000a      	movs	r2, r1
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d100      	bne.n	8003bd0 <HAL_GPIO_Init+0x28>
 8003bce:	e13e      	b.n	8003e4e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2203      	movs	r2, #3
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d005      	beq.n	8003be8 <HAL_GPIO_Init+0x40>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2203      	movs	r2, #3
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d130      	bne.n	8003c4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	2203      	movs	r2, #3
 8003bf4:	409a      	lsls	r2, r3
 8003bf6:	0013      	movs	r3, r2
 8003bf8:	43da      	mvns	r2, r3
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	409a      	lsls	r2, r3
 8003c0a:	0013      	movs	r3, r2
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c1e:	2201      	movs	r2, #1
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	409a      	lsls	r2, r3
 8003c24:	0013      	movs	r3, r2
 8003c26:	43da      	mvns	r2, r3
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	091b      	lsrs	r3, r3, #4
 8003c34:	2201      	movs	r2, #1
 8003c36:	401a      	ands	r2, r3
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	409a      	lsls	r2, r3
 8003c3c:	0013      	movs	r3, r2
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2203      	movs	r2, #3
 8003c50:	4013      	ands	r3, r2
 8003c52:	2b03      	cmp	r3, #3
 8003c54:	d017      	beq.n	8003c86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	2203      	movs	r2, #3
 8003c62:	409a      	lsls	r2, r3
 8003c64:	0013      	movs	r3, r2
 8003c66:	43da      	mvns	r2, r3
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	409a      	lsls	r2, r3
 8003c78:	0013      	movs	r3, r2
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2203      	movs	r2, #3
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d123      	bne.n	8003cda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	08da      	lsrs	r2, r3, #3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3208      	adds	r2, #8
 8003c9a:	0092      	lsls	r2, r2, #2
 8003c9c:	58d3      	ldr	r3, [r2, r3]
 8003c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2207      	movs	r2, #7
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	220f      	movs	r2, #15
 8003caa:	409a      	lsls	r2, r3
 8003cac:	0013      	movs	r3, r2
 8003cae:	43da      	mvns	r2, r3
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	691a      	ldr	r2, [r3, #16]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2107      	movs	r1, #7
 8003cbe:	400b      	ands	r3, r1
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	0013      	movs	r3, r2
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	08da      	lsrs	r2, r3, #3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3208      	adds	r2, #8
 8003cd4:	0092      	lsls	r2, r2, #2
 8003cd6:	6939      	ldr	r1, [r7, #16]
 8003cd8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	409a      	lsls	r2, r3
 8003ce8:	0013      	movs	r3, r2
 8003cea:	43da      	mvns	r2, r3
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	401a      	ands	r2, r3
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	409a      	lsls	r2, r3
 8003d00:	0013      	movs	r3, r2
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	23c0      	movs	r3, #192	@ 0xc0
 8003d14:	029b      	lsls	r3, r3, #10
 8003d16:	4013      	ands	r3, r2
 8003d18:	d100      	bne.n	8003d1c <HAL_GPIO_Init+0x174>
 8003d1a:	e098      	b.n	8003e4e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003d1c:	4a53      	ldr	r2, [pc, #332]	@ (8003e6c <HAL_GPIO_Init+0x2c4>)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	089b      	lsrs	r3, r3, #2
 8003d22:	3318      	adds	r3, #24
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	589b      	ldr	r3, [r3, r2]
 8003d28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	4013      	ands	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	220f      	movs	r2, #15
 8003d34:	409a      	lsls	r2, r3
 8003d36:	0013      	movs	r3, r2
 8003d38:	43da      	mvns	r2, r3
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	23a0      	movs	r3, #160	@ 0xa0
 8003d44:	05db      	lsls	r3, r3, #23
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d019      	beq.n	8003d7e <HAL_GPIO_Init+0x1d6>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a48      	ldr	r2, [pc, #288]	@ (8003e70 <HAL_GPIO_Init+0x2c8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d013      	beq.n	8003d7a <HAL_GPIO_Init+0x1d2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a47      	ldr	r2, [pc, #284]	@ (8003e74 <HAL_GPIO_Init+0x2cc>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00d      	beq.n	8003d76 <HAL_GPIO_Init+0x1ce>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a46      	ldr	r2, [pc, #280]	@ (8003e78 <HAL_GPIO_Init+0x2d0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d007      	beq.n	8003d72 <HAL_GPIO_Init+0x1ca>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a45      	ldr	r2, [pc, #276]	@ (8003e7c <HAL_GPIO_Init+0x2d4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d101      	bne.n	8003d6e <HAL_GPIO_Init+0x1c6>
 8003d6a:	2304      	movs	r3, #4
 8003d6c:	e008      	b.n	8003d80 <HAL_GPIO_Init+0x1d8>
 8003d6e:	2305      	movs	r3, #5
 8003d70:	e006      	b.n	8003d80 <HAL_GPIO_Init+0x1d8>
 8003d72:	2303      	movs	r3, #3
 8003d74:	e004      	b.n	8003d80 <HAL_GPIO_Init+0x1d8>
 8003d76:	2302      	movs	r3, #2
 8003d78:	e002      	b.n	8003d80 <HAL_GPIO_Init+0x1d8>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <HAL_GPIO_Init+0x1d8>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	2103      	movs	r1, #3
 8003d84:	400a      	ands	r2, r1
 8003d86:	00d2      	lsls	r2, r2, #3
 8003d88:	4093      	lsls	r3, r2
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003d90:	4936      	ldr	r1, [pc, #216]	@ (8003e6c <HAL_GPIO_Init+0x2c4>)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	089b      	lsrs	r3, r3, #2
 8003d96:	3318      	adds	r3, #24
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d9e:	4b33      	ldr	r3, [pc, #204]	@ (8003e6c <HAL_GPIO_Init+0x2c4>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	43da      	mvns	r2, r3
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4013      	ands	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	2380      	movs	r3, #128	@ 0x80
 8003db4:	035b      	lsls	r3, r3, #13
 8003db6:	4013      	ands	r3, r2
 8003db8:	d003      	beq.n	8003dc2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dc2:	4b2a      	ldr	r3, [pc, #168]	@ (8003e6c <HAL_GPIO_Init+0x2c4>)
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003dc8:	4b28      	ldr	r3, [pc, #160]	@ (8003e6c <HAL_GPIO_Init+0x2c4>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	43da      	mvns	r2, r3
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	2380      	movs	r3, #128	@ 0x80
 8003dde:	039b      	lsls	r3, r3, #14
 8003de0:	4013      	ands	r3, r2
 8003de2:	d003      	beq.n	8003dec <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dec:	4b1f      	ldr	r3, [pc, #124]	@ (8003e6c <HAL_GPIO_Init+0x2c4>)
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003df2:	4a1e      	ldr	r2, [pc, #120]	@ (8003e6c <HAL_GPIO_Init+0x2c4>)
 8003df4:	2384      	movs	r3, #132	@ 0x84
 8003df6:	58d3      	ldr	r3, [r2, r3]
 8003df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	43da      	mvns	r2, r3
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	4013      	ands	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	2380      	movs	r3, #128	@ 0x80
 8003e0a:	029b      	lsls	r3, r3, #10
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	d003      	beq.n	8003e18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e18:	4914      	ldr	r1, [pc, #80]	@ (8003e6c <HAL_GPIO_Init+0x2c4>)
 8003e1a:	2284      	movs	r2, #132	@ 0x84
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003e20:	4a12      	ldr	r2, [pc, #72]	@ (8003e6c <HAL_GPIO_Init+0x2c4>)
 8003e22:	2380      	movs	r3, #128	@ 0x80
 8003e24:	58d3      	ldr	r3, [r2, r3]
 8003e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	43da      	mvns	r2, r3
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	2380      	movs	r3, #128	@ 0x80
 8003e38:	025b      	lsls	r3, r3, #9
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	d003      	beq.n	8003e46 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e46:	4909      	ldr	r1, [pc, #36]	@ (8003e6c <HAL_GPIO_Init+0x2c4>)
 8003e48:	2280      	movs	r2, #128	@ 0x80
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	3301      	adds	r3, #1
 8003e52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	40da      	lsrs	r2, r3
 8003e5c:	1e13      	subs	r3, r2, #0
 8003e5e:	d000      	beq.n	8003e62 <HAL_GPIO_Init+0x2ba>
 8003e60:	e6aa      	b.n	8003bb8 <HAL_GPIO_Init+0x10>
  }
}
 8003e62:	46c0      	nop			@ (mov r8, r8)
 8003e64:	46c0      	nop			@ (mov r8, r8)
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b006      	add	sp, #24
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40021800 	.word	0x40021800
 8003e70:	50000400 	.word	0x50000400
 8003e74:	50000800 	.word	0x50000800
 8003e78:	50000c00 	.word	0x50000c00
 8003e7c:	50001000 	.word	0x50001000

08003e80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	000a      	movs	r2, r1
 8003e8a:	1cbb      	adds	r3, r7, #2
 8003e8c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	1cba      	adds	r2, r7, #2
 8003e94:	8812      	ldrh	r2, [r2, #0]
 8003e96:	4013      	ands	r3, r2
 8003e98:	d004      	beq.n	8003ea4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003e9a:	230f      	movs	r3, #15
 8003e9c:	18fb      	adds	r3, r7, r3
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	701a      	strb	r2, [r3, #0]
 8003ea2:	e003      	b.n	8003eac <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ea4:	230f      	movs	r3, #15
 8003ea6:	18fb      	adds	r3, r7, r3
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003eac:	230f      	movs	r3, #15
 8003eae:	18fb      	adds	r3, r7, r3
 8003eb0:	781b      	ldrb	r3, [r3, #0]
}
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	b004      	add	sp, #16
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b082      	sub	sp, #8
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	0008      	movs	r0, r1
 8003ec4:	0011      	movs	r1, r2
 8003ec6:	1cbb      	adds	r3, r7, #2
 8003ec8:	1c02      	adds	r2, r0, #0
 8003eca:	801a      	strh	r2, [r3, #0]
 8003ecc:	1c7b      	adds	r3, r7, #1
 8003ece:	1c0a      	adds	r2, r1, #0
 8003ed0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ed2:	1c7b      	adds	r3, r7, #1
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d004      	beq.n	8003ee4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eda:	1cbb      	adds	r3, r7, #2
 8003edc:	881a      	ldrh	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ee2:	e003      	b.n	8003eec <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ee4:	1cbb      	adds	r3, r7, #2
 8003ee6:	881a      	ldrh	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003eec:	46c0      	nop			@ (mov r8, r8)
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b002      	add	sp, #8
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e08f      	b.n	8004026 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2241      	movs	r2, #65	@ 0x41
 8003f0a:	5c9b      	ldrb	r3, [r3, r2]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d107      	bne.n	8003f22 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2240      	movs	r2, #64	@ 0x40
 8003f16:	2100      	movs	r1, #0
 8003f18:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f7ff fa8d 	bl	800343c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2241      	movs	r2, #65	@ 0x41
 8003f26:	2124      	movs	r1, #36	@ 0x24
 8003f28:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2101      	movs	r1, #1
 8003f36:	438a      	bics	r2, r1
 8003f38:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	493b      	ldr	r1, [pc, #236]	@ (8004030 <HAL_I2C_Init+0x13c>)
 8003f44:	400a      	ands	r2, r1
 8003f46:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4938      	ldr	r1, [pc, #224]	@ (8004034 <HAL_I2C_Init+0x140>)
 8003f54:	400a      	ands	r2, r1
 8003f56:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d108      	bne.n	8003f72 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2180      	movs	r1, #128	@ 0x80
 8003f6a:	0209      	lsls	r1, r1, #8
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	609a      	str	r2, [r3, #8]
 8003f70:	e007      	b.n	8003f82 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689a      	ldr	r2, [r3, #8]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2184      	movs	r1, #132	@ 0x84
 8003f7c:	0209      	lsls	r1, r1, #8
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d109      	bne.n	8003f9e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685a      	ldr	r2, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2180      	movs	r1, #128	@ 0x80
 8003f96:	0109      	lsls	r1, r1, #4
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	605a      	str	r2, [r3, #4]
 8003f9c:	e007      	b.n	8003fae <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4923      	ldr	r1, [pc, #140]	@ (8004038 <HAL_I2C_Init+0x144>)
 8003faa:	400a      	ands	r2, r1
 8003fac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4920      	ldr	r1, [pc, #128]	@ (800403c <HAL_I2C_Init+0x148>)
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68da      	ldr	r2, [r3, #12]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	491a      	ldr	r1, [pc, #104]	@ (8004034 <HAL_I2C_Init+0x140>)
 8003fca:	400a      	ands	r2, r1
 8003fcc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	69d9      	ldr	r1, [r3, #28]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1a      	ldr	r2, [r3, #32]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2101      	movs	r1, #1
 8004004:	430a      	orrs	r2, r1
 8004006:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2241      	movs	r2, #65	@ 0x41
 8004012:	2120      	movs	r1, #32
 8004014:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2242      	movs	r2, #66	@ 0x42
 8004020:	2100      	movs	r1, #0
 8004022:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	0018      	movs	r0, r3
 8004028:	46bd      	mov	sp, r7
 800402a:	b002      	add	sp, #8
 800402c:	bd80      	pop	{r7, pc}
 800402e:	46c0      	nop			@ (mov r8, r8)
 8004030:	f0ffffff 	.word	0xf0ffffff
 8004034:	ffff7fff 	.word	0xffff7fff
 8004038:	fffff7ff 	.word	0xfffff7ff
 800403c:	02008000 	.word	0x02008000

08004040 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004040:	b590      	push	{r4, r7, lr}
 8004042:	b089      	sub	sp, #36	@ 0x24
 8004044:	af02      	add	r7, sp, #8
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	0008      	movs	r0, r1
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	0019      	movs	r1, r3
 800404e:	230a      	movs	r3, #10
 8004050:	18fb      	adds	r3, r7, r3
 8004052:	1c02      	adds	r2, r0, #0
 8004054:	801a      	strh	r2, [r3, #0]
 8004056:	2308      	movs	r3, #8
 8004058:	18fb      	adds	r3, r7, r3
 800405a:	1c0a      	adds	r2, r1, #0
 800405c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2241      	movs	r2, #65	@ 0x41
 8004062:	5c9b      	ldrb	r3, [r3, r2]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b20      	cmp	r3, #32
 8004068:	d000      	beq.n	800406c <HAL_I2C_Master_Transmit+0x2c>
 800406a:	e10a      	b.n	8004282 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2240      	movs	r2, #64	@ 0x40
 8004070:	5c9b      	ldrb	r3, [r3, r2]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d101      	bne.n	800407a <HAL_I2C_Master_Transmit+0x3a>
 8004076:	2302      	movs	r3, #2
 8004078:	e104      	b.n	8004284 <HAL_I2C_Master_Transmit+0x244>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2240      	movs	r2, #64	@ 0x40
 800407e:	2101      	movs	r1, #1
 8004080:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004082:	f7ff fc99 	bl	80039b8 <HAL_GetTick>
 8004086:	0003      	movs	r3, r0
 8004088:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800408a:	2380      	movs	r3, #128	@ 0x80
 800408c:	0219      	lsls	r1, r3, #8
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	2319      	movs	r3, #25
 8004096:	2201      	movs	r2, #1
 8004098:	f000 fa26 	bl	80044e8 <I2C_WaitOnFlagUntilTimeout>
 800409c:	1e03      	subs	r3, r0, #0
 800409e:	d001      	beq.n	80040a4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0ef      	b.n	8004284 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2241      	movs	r2, #65	@ 0x41
 80040a8:	2121      	movs	r1, #33	@ 0x21
 80040aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2242      	movs	r2, #66	@ 0x42
 80040b0:	2110      	movs	r1, #16
 80040b2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2208      	movs	r2, #8
 80040c4:	18ba      	adds	r2, r7, r2
 80040c6:	8812      	ldrh	r2, [r2, #0]
 80040c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2bff      	cmp	r3, #255	@ 0xff
 80040d8:	d906      	bls.n	80040e8 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	22ff      	movs	r2, #255	@ 0xff
 80040de:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80040e0:	2380      	movs	r3, #128	@ 0x80
 80040e2:	045b      	lsls	r3, r3, #17
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	e007      	b.n	80040f8 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80040f2:	2380      	movs	r3, #128	@ 0x80
 80040f4:	049b      	lsls	r3, r3, #18
 80040f6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d027      	beq.n	8004150 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004104:	781a      	ldrb	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004134:	b2db      	uxtb	r3, r3
 8004136:	3301      	adds	r3, #1
 8004138:	b2da      	uxtb	r2, r3
 800413a:	697c      	ldr	r4, [r7, #20]
 800413c:	230a      	movs	r3, #10
 800413e:	18fb      	adds	r3, r7, r3
 8004140:	8819      	ldrh	r1, [r3, #0]
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	4b51      	ldr	r3, [pc, #324]	@ (800428c <HAL_I2C_Master_Transmit+0x24c>)
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	0023      	movs	r3, r4
 800414a:	f000 fc45 	bl	80049d8 <I2C_TransferConfig>
 800414e:	e06f      	b.n	8004230 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004154:	b2da      	uxtb	r2, r3
 8004156:	697c      	ldr	r4, [r7, #20]
 8004158:	230a      	movs	r3, #10
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	8819      	ldrh	r1, [r3, #0]
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	4b4a      	ldr	r3, [pc, #296]	@ (800428c <HAL_I2C_Master_Transmit+0x24c>)
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	0023      	movs	r3, r4
 8004166:	f000 fc37 	bl	80049d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800416a:	e061      	b.n	8004230 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	0018      	movs	r0, r3
 8004174:	f000 fa10 	bl	8004598 <I2C_WaitOnTXISFlagUntilTimeout>
 8004178:	1e03      	subs	r3, r0, #0
 800417a:	d001      	beq.n	8004180 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e081      	b.n	8004284 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004184:	781a      	ldrb	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d03a      	beq.n	8004230 <HAL_I2C_Master_Transmit+0x1f0>
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d136      	bne.n	8004230 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	0013      	movs	r3, r2
 80041cc:	2200      	movs	r2, #0
 80041ce:	2180      	movs	r1, #128	@ 0x80
 80041d0:	f000 f98a 	bl	80044e8 <I2C_WaitOnFlagUntilTimeout>
 80041d4:	1e03      	subs	r3, r0, #0
 80041d6:	d001      	beq.n	80041dc <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e053      	b.n	8004284 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2bff      	cmp	r3, #255	@ 0xff
 80041e4:	d911      	bls.n	800420a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	22ff      	movs	r2, #255	@ 0xff
 80041ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	2380      	movs	r3, #128	@ 0x80
 80041f4:	045c      	lsls	r4, r3, #17
 80041f6:	230a      	movs	r3, #10
 80041f8:	18fb      	adds	r3, r7, r3
 80041fa:	8819      	ldrh	r1, [r3, #0]
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	2300      	movs	r3, #0
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	0023      	movs	r3, r4
 8004204:	f000 fbe8 	bl	80049d8 <I2C_TransferConfig>
 8004208:	e012      	b.n	8004230 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004218:	b2da      	uxtb	r2, r3
 800421a:	2380      	movs	r3, #128	@ 0x80
 800421c:	049c      	lsls	r4, r3, #18
 800421e:	230a      	movs	r3, #10
 8004220:	18fb      	adds	r3, r7, r3
 8004222:	8819      	ldrh	r1, [r3, #0]
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	2300      	movs	r3, #0
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	0023      	movs	r3, r4
 800422c:	f000 fbd4 	bl	80049d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d198      	bne.n	800416c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	0018      	movs	r0, r3
 8004242:	f000 f9ef 	bl	8004624 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004246:	1e03      	subs	r3, r0, #0
 8004248:	d001      	beq.n	800424e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e01a      	b.n	8004284 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2220      	movs	r2, #32
 8004254:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	490b      	ldr	r1, [pc, #44]	@ (8004290 <HAL_I2C_Master_Transmit+0x250>)
 8004262:	400a      	ands	r2, r1
 8004264:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2241      	movs	r2, #65	@ 0x41
 800426a:	2120      	movs	r1, #32
 800426c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2242      	movs	r2, #66	@ 0x42
 8004272:	2100      	movs	r1, #0
 8004274:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2240      	movs	r2, #64	@ 0x40
 800427a:	2100      	movs	r1, #0
 800427c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	e000      	b.n	8004284 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8004282:	2302      	movs	r3, #2
  }
}
 8004284:	0018      	movs	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	b007      	add	sp, #28
 800428a:	bd90      	pop	{r4, r7, pc}
 800428c:	80002000 	.word	0x80002000
 8004290:	fe00e800 	.word	0xfe00e800

08004294 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004294:	b590      	push	{r4, r7, lr}
 8004296:	b089      	sub	sp, #36	@ 0x24
 8004298:	af02      	add	r7, sp, #8
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	0008      	movs	r0, r1
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	0019      	movs	r1, r3
 80042a2:	230a      	movs	r3, #10
 80042a4:	18fb      	adds	r3, r7, r3
 80042a6:	1c02      	adds	r2, r0, #0
 80042a8:	801a      	strh	r2, [r3, #0]
 80042aa:	2308      	movs	r3, #8
 80042ac:	18fb      	adds	r3, r7, r3
 80042ae:	1c0a      	adds	r2, r1, #0
 80042b0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2241      	movs	r2, #65	@ 0x41
 80042b6:	5c9b      	ldrb	r3, [r3, r2]
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	d000      	beq.n	80042c0 <HAL_I2C_Master_Receive+0x2c>
 80042be:	e0e8      	b.n	8004492 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2240      	movs	r2, #64	@ 0x40
 80042c4:	5c9b      	ldrb	r3, [r3, r2]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d101      	bne.n	80042ce <HAL_I2C_Master_Receive+0x3a>
 80042ca:	2302      	movs	r3, #2
 80042cc:	e0e2      	b.n	8004494 <HAL_I2C_Master_Receive+0x200>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2240      	movs	r2, #64	@ 0x40
 80042d2:	2101      	movs	r1, #1
 80042d4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042d6:	f7ff fb6f 	bl	80039b8 <HAL_GetTick>
 80042da:	0003      	movs	r3, r0
 80042dc:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042de:	2380      	movs	r3, #128	@ 0x80
 80042e0:	0219      	lsls	r1, r3, #8
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	2319      	movs	r3, #25
 80042ea:	2201      	movs	r2, #1
 80042ec:	f000 f8fc 	bl	80044e8 <I2C_WaitOnFlagUntilTimeout>
 80042f0:	1e03      	subs	r3, r0, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e0cd      	b.n	8004494 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2241      	movs	r2, #65	@ 0x41
 80042fc:	2122      	movs	r1, #34	@ 0x22
 80042fe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2242      	movs	r2, #66	@ 0x42
 8004304:	2110      	movs	r1, #16
 8004306:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2208      	movs	r2, #8
 8004318:	18ba      	adds	r2, r7, r2
 800431a:	8812      	ldrh	r2, [r2, #0]
 800431c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004328:	b29b      	uxth	r3, r3
 800432a:	2bff      	cmp	r3, #255	@ 0xff
 800432c:	d911      	bls.n	8004352 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	22ff      	movs	r2, #255	@ 0xff
 8004332:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004338:	b2da      	uxtb	r2, r3
 800433a:	2380      	movs	r3, #128	@ 0x80
 800433c:	045c      	lsls	r4, r3, #17
 800433e:	230a      	movs	r3, #10
 8004340:	18fb      	adds	r3, r7, r3
 8004342:	8819      	ldrh	r1, [r3, #0]
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	4b55      	ldr	r3, [pc, #340]	@ (800449c <HAL_I2C_Master_Receive+0x208>)
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	0023      	movs	r3, r4
 800434c:	f000 fb44 	bl	80049d8 <I2C_TransferConfig>
 8004350:	e076      	b.n	8004440 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004360:	b2da      	uxtb	r2, r3
 8004362:	2380      	movs	r3, #128	@ 0x80
 8004364:	049c      	lsls	r4, r3, #18
 8004366:	230a      	movs	r3, #10
 8004368:	18fb      	adds	r3, r7, r3
 800436a:	8819      	ldrh	r1, [r3, #0]
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	4b4b      	ldr	r3, [pc, #300]	@ (800449c <HAL_I2C_Master_Receive+0x208>)
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	0023      	movs	r3, r4
 8004374:	f000 fb30 	bl	80049d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004378:	e062      	b.n	8004440 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	0018      	movs	r0, r3
 8004382:	f000 f993 	bl	80046ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004386:	1e03      	subs	r3, r0, #0
 8004388:	d001      	beq.n	800438e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e082      	b.n	8004494 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d03a      	beq.n	8004440 <HAL_I2C_Master_Receive+0x1ac>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d136      	bne.n	8004440 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	9300      	str	r3, [sp, #0]
 80043da:	0013      	movs	r3, r2
 80043dc:	2200      	movs	r2, #0
 80043de:	2180      	movs	r1, #128	@ 0x80
 80043e0:	f000 f882 	bl	80044e8 <I2C_WaitOnFlagUntilTimeout>
 80043e4:	1e03      	subs	r3, r0, #0
 80043e6:	d001      	beq.n	80043ec <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e053      	b.n	8004494 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2bff      	cmp	r3, #255	@ 0xff
 80043f4:	d911      	bls.n	800441a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	22ff      	movs	r2, #255	@ 0xff
 80043fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004400:	b2da      	uxtb	r2, r3
 8004402:	2380      	movs	r3, #128	@ 0x80
 8004404:	045c      	lsls	r4, r3, #17
 8004406:	230a      	movs	r3, #10
 8004408:	18fb      	adds	r3, r7, r3
 800440a:	8819      	ldrh	r1, [r3, #0]
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	2300      	movs	r3, #0
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	0023      	movs	r3, r4
 8004414:	f000 fae0 	bl	80049d8 <I2C_TransferConfig>
 8004418:	e012      	b.n	8004440 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004428:	b2da      	uxtb	r2, r3
 800442a:	2380      	movs	r3, #128	@ 0x80
 800442c:	049c      	lsls	r4, r3, #18
 800442e:	230a      	movs	r3, #10
 8004430:	18fb      	adds	r3, r7, r3
 8004432:	8819      	ldrh	r1, [r3, #0]
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	2300      	movs	r3, #0
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	0023      	movs	r3, r4
 800443c:	f000 facc 	bl	80049d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004444:	b29b      	uxth	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d197      	bne.n	800437a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	0018      	movs	r0, r3
 8004452:	f000 f8e7 	bl	8004624 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004456:	1e03      	subs	r3, r0, #0
 8004458:	d001      	beq.n	800445e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e01a      	b.n	8004494 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2220      	movs	r2, #32
 8004464:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	490b      	ldr	r1, [pc, #44]	@ (80044a0 <HAL_I2C_Master_Receive+0x20c>)
 8004472:	400a      	ands	r2, r1
 8004474:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2241      	movs	r2, #65	@ 0x41
 800447a:	2120      	movs	r1, #32
 800447c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2242      	movs	r2, #66	@ 0x42
 8004482:	2100      	movs	r1, #0
 8004484:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2240      	movs	r2, #64	@ 0x40
 800448a:	2100      	movs	r1, #0
 800448c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	e000      	b.n	8004494 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004492:	2302      	movs	r3, #2
  }
}
 8004494:	0018      	movs	r0, r3
 8004496:	46bd      	mov	sp, r7
 8004498:	b007      	add	sp, #28
 800449a:	bd90      	pop	{r4, r7, pc}
 800449c:	80002400 	.word	0x80002400
 80044a0:	fe00e800 	.word	0xfe00e800

080044a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	2202      	movs	r2, #2
 80044b4:	4013      	ands	r3, r2
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d103      	bne.n	80044c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2200      	movs	r2, #0
 80044c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	2201      	movs	r2, #1
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d007      	beq.n	80044e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	699a      	ldr	r2, [r3, #24]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2101      	movs	r1, #1
 80044dc:	430a      	orrs	r2, r1
 80044de:	619a      	str	r2, [r3, #24]
  }
}
 80044e0:	46c0      	nop			@ (mov r8, r8)
 80044e2:	46bd      	mov	sp, r7
 80044e4:	b002      	add	sp, #8
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	1dfb      	adds	r3, r7, #7
 80044f6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044f8:	e03a      	b.n	8004570 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	6839      	ldr	r1, [r7, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	0018      	movs	r0, r3
 8004502:	f000 f971 	bl	80047e8 <I2C_IsErrorOccurred>
 8004506:	1e03      	subs	r3, r0, #0
 8004508:	d001      	beq.n	800450e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e040      	b.n	8004590 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	3301      	adds	r3, #1
 8004512:	d02d      	beq.n	8004570 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004514:	f7ff fa50 	bl	80039b8 <HAL_GetTick>
 8004518:	0002      	movs	r2, r0
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d302      	bcc.n	800452a <I2C_WaitOnFlagUntilTimeout+0x42>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d122      	bne.n	8004570 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	4013      	ands	r3, r2
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	425a      	negs	r2, r3
 800453a:	4153      	adcs	r3, r2
 800453c:	b2db      	uxtb	r3, r3
 800453e:	001a      	movs	r2, r3
 8004540:	1dfb      	adds	r3, r7, #7
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	429a      	cmp	r2, r3
 8004546:	d113      	bne.n	8004570 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800454c:	2220      	movs	r2, #32
 800454e:	431a      	orrs	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2241      	movs	r2, #65	@ 0x41
 8004558:	2120      	movs	r1, #32
 800455a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2242      	movs	r2, #66	@ 0x42
 8004560:	2100      	movs	r1, #0
 8004562:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2240      	movs	r2, #64	@ 0x40
 8004568:	2100      	movs	r1, #0
 800456a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e00f      	b.n	8004590 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	4013      	ands	r3, r2
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	425a      	negs	r2, r3
 8004580:	4153      	adcs	r3, r2
 8004582:	b2db      	uxtb	r3, r3
 8004584:	001a      	movs	r2, r3
 8004586:	1dfb      	adds	r3, r7, #7
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d0b5      	beq.n	80044fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	0018      	movs	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	b004      	add	sp, #16
 8004596:	bd80      	pop	{r7, pc}

08004598 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045a4:	e032      	b.n	800460c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	0018      	movs	r0, r3
 80045ae:	f000 f91b 	bl	80047e8 <I2C_IsErrorOccurred>
 80045b2:	1e03      	subs	r3, r0, #0
 80045b4:	d001      	beq.n	80045ba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e030      	b.n	800461c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	3301      	adds	r3, #1
 80045be:	d025      	beq.n	800460c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c0:	f7ff f9fa 	bl	80039b8 <HAL_GetTick>
 80045c4:	0002      	movs	r2, r0
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d302      	bcc.n	80045d6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d11a      	bne.n	800460c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	2202      	movs	r2, #2
 80045de:	4013      	ands	r3, r2
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d013      	beq.n	800460c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e8:	2220      	movs	r2, #32
 80045ea:	431a      	orrs	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2241      	movs	r2, #65	@ 0x41
 80045f4:	2120      	movs	r1, #32
 80045f6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2242      	movs	r2, #66	@ 0x42
 80045fc:	2100      	movs	r1, #0
 80045fe:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2240      	movs	r2, #64	@ 0x40
 8004604:	2100      	movs	r1, #0
 8004606:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e007      	b.n	800461c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	2202      	movs	r2, #2
 8004614:	4013      	ands	r3, r2
 8004616:	2b02      	cmp	r3, #2
 8004618:	d1c5      	bne.n	80045a6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	0018      	movs	r0, r3
 800461e:	46bd      	mov	sp, r7
 8004620:	b004      	add	sp, #16
 8004622:	bd80      	pop	{r7, pc}

08004624 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004630:	e02f      	b.n	8004692 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	68b9      	ldr	r1, [r7, #8]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	0018      	movs	r0, r3
 800463a:	f000 f8d5 	bl	80047e8 <I2C_IsErrorOccurred>
 800463e:	1e03      	subs	r3, r0, #0
 8004640:	d001      	beq.n	8004646 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e02d      	b.n	80046a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004646:	f7ff f9b7 	bl	80039b8 <HAL_GetTick>
 800464a:	0002      	movs	r2, r0
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	429a      	cmp	r2, r3
 8004654:	d302      	bcc.n	800465c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d11a      	bne.n	8004692 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	2220      	movs	r2, #32
 8004664:	4013      	ands	r3, r2
 8004666:	2b20      	cmp	r3, #32
 8004668:	d013      	beq.n	8004692 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800466e:	2220      	movs	r2, #32
 8004670:	431a      	orrs	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2241      	movs	r2, #65	@ 0x41
 800467a:	2120      	movs	r1, #32
 800467c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2242      	movs	r2, #66	@ 0x42
 8004682:	2100      	movs	r1, #0
 8004684:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2240      	movs	r2, #64	@ 0x40
 800468a:	2100      	movs	r1, #0
 800468c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e007      	b.n	80046a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	2220      	movs	r2, #32
 800469a:	4013      	ands	r3, r2
 800469c:	2b20      	cmp	r3, #32
 800469e:	d1c8      	bne.n	8004632 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	0018      	movs	r0, r3
 80046a4:	46bd      	mov	sp, r7
 80046a6:	b004      	add	sp, #16
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046b8:	2317      	movs	r3, #23
 80046ba:	18fb      	adds	r3, r7, r3
 80046bc:	2200      	movs	r2, #0
 80046be:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80046c0:	e07b      	b.n	80047ba <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	68b9      	ldr	r1, [r7, #8]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	0018      	movs	r0, r3
 80046ca:	f000 f88d 	bl	80047e8 <I2C_IsErrorOccurred>
 80046ce:	1e03      	subs	r3, r0, #0
 80046d0:	d003      	beq.n	80046da <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80046d2:	2317      	movs	r3, #23
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	2201      	movs	r2, #1
 80046d8:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	2220      	movs	r2, #32
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b20      	cmp	r3, #32
 80046e6:	d140      	bne.n	800476a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80046e8:	2117      	movs	r1, #23
 80046ea:	187b      	adds	r3, r7, r1
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d13b      	bne.n	800476a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	2204      	movs	r2, #4
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d106      	bne.n	800470e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004708:	187b      	adds	r3, r7, r1
 800470a:	2200      	movs	r2, #0
 800470c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	2210      	movs	r2, #16
 8004716:	4013      	ands	r3, r2
 8004718:	2b10      	cmp	r3, #16
 800471a:	d123      	bne.n	8004764 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2210      	movs	r2, #16
 8004722:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2204      	movs	r2, #4
 8004728:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2220      	movs	r2, #32
 8004730:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4929      	ldr	r1, [pc, #164]	@ (80047e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800473e:	400a      	ands	r2, r1
 8004740:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2241      	movs	r2, #65	@ 0x41
 8004746:	2120      	movs	r1, #32
 8004748:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2242      	movs	r2, #66	@ 0x42
 800474e:	2100      	movs	r1, #0
 8004750:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2240      	movs	r2, #64	@ 0x40
 8004756:	2100      	movs	r1, #0
 8004758:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800475a:	2317      	movs	r3, #23
 800475c:	18fb      	adds	r3, r7, r3
 800475e:	2201      	movs	r2, #1
 8004760:	701a      	strb	r2, [r3, #0]
 8004762:	e002      	b.n	800476a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800476a:	f7ff f925 	bl	80039b8 <HAL_GetTick>
 800476e:	0002      	movs	r2, r0
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	429a      	cmp	r2, r3
 8004778:	d302      	bcc.n	8004780 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d11c      	bne.n	80047ba <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8004780:	2017      	movs	r0, #23
 8004782:	183b      	adds	r3, r7, r0
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d117      	bne.n	80047ba <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	2204      	movs	r2, #4
 8004792:	4013      	ands	r3, r2
 8004794:	2b04      	cmp	r3, #4
 8004796:	d010      	beq.n	80047ba <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800479c:	2220      	movs	r2, #32
 800479e:	431a      	orrs	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2241      	movs	r2, #65	@ 0x41
 80047a8:	2120      	movs	r1, #32
 80047aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2240      	movs	r2, #64	@ 0x40
 80047b0:	2100      	movs	r1, #0
 80047b2:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80047b4:	183b      	adds	r3, r7, r0
 80047b6:	2201      	movs	r2, #1
 80047b8:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	2204      	movs	r2, #4
 80047c2:	4013      	ands	r3, r2
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d005      	beq.n	80047d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80047c8:	2317      	movs	r3, #23
 80047ca:	18fb      	adds	r3, r7, r3
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d100      	bne.n	80047d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80047d2:	e776      	b.n	80046c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80047d4:	2317      	movs	r3, #23
 80047d6:	18fb      	adds	r3, r7, r3
 80047d8:	781b      	ldrb	r3, [r3, #0]
}
 80047da:	0018      	movs	r0, r3
 80047dc:	46bd      	mov	sp, r7
 80047de:	b006      	add	sp, #24
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	46c0      	nop			@ (mov r8, r8)
 80047e4:	fe00e800 	.word	0xfe00e800

080047e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08a      	sub	sp, #40	@ 0x28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047f4:	2327      	movs	r3, #39	@ 0x27
 80047f6:	18fb      	adds	r3, r7, r3
 80047f8:	2200      	movs	r2, #0
 80047fa:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004804:	2300      	movs	r3, #0
 8004806:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	2210      	movs	r2, #16
 8004810:	4013      	ands	r3, r2
 8004812:	d100      	bne.n	8004816 <I2C_IsErrorOccurred+0x2e>
 8004814:	e079      	b.n	800490a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2210      	movs	r2, #16
 800481c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800481e:	e057      	b.n	80048d0 <I2C_IsErrorOccurred+0xe8>
 8004820:	2227      	movs	r2, #39	@ 0x27
 8004822:	18bb      	adds	r3, r7, r2
 8004824:	18ba      	adds	r2, r7, r2
 8004826:	7812      	ldrb	r2, [r2, #0]
 8004828:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	3301      	adds	r3, #1
 800482e:	d04f      	beq.n	80048d0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004830:	f7ff f8c2 	bl	80039b8 <HAL_GetTick>
 8004834:	0002      	movs	r2, r0
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	429a      	cmp	r2, r3
 800483e:	d302      	bcc.n	8004846 <I2C_IsErrorOccurred+0x5e>
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d144      	bne.n	80048d0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	2380      	movs	r3, #128	@ 0x80
 800484e:	01db      	lsls	r3, r3, #7
 8004850:	4013      	ands	r3, r2
 8004852:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004854:	2013      	movs	r0, #19
 8004856:	183b      	adds	r3, r7, r0
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	2142      	movs	r1, #66	@ 0x42
 800485c:	5c52      	ldrb	r2, [r2, r1]
 800485e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699a      	ldr	r2, [r3, #24]
 8004866:	2380      	movs	r3, #128	@ 0x80
 8004868:	021b      	lsls	r3, r3, #8
 800486a:	401a      	ands	r2, r3
 800486c:	2380      	movs	r3, #128	@ 0x80
 800486e:	021b      	lsls	r3, r3, #8
 8004870:	429a      	cmp	r2, r3
 8004872:	d126      	bne.n	80048c2 <I2C_IsErrorOccurred+0xda>
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	2380      	movs	r3, #128	@ 0x80
 8004878:	01db      	lsls	r3, r3, #7
 800487a:	429a      	cmp	r2, r3
 800487c:	d021      	beq.n	80048c2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800487e:	183b      	adds	r3, r7, r0
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b20      	cmp	r3, #32
 8004884:	d01d      	beq.n	80048c2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2180      	movs	r1, #128	@ 0x80
 8004892:	01c9      	lsls	r1, r1, #7
 8004894:	430a      	orrs	r2, r1
 8004896:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004898:	f7ff f88e 	bl	80039b8 <HAL_GetTick>
 800489c:	0003      	movs	r3, r0
 800489e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048a0:	e00f      	b.n	80048c2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80048a2:	f7ff f889 	bl	80039b8 <HAL_GetTick>
 80048a6:	0002      	movs	r2, r0
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b19      	cmp	r3, #25
 80048ae:	d908      	bls.n	80048c2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	2220      	movs	r2, #32
 80048b4:	4313      	orrs	r3, r2
 80048b6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80048b8:	2327      	movs	r3, #39	@ 0x27
 80048ba:	18fb      	adds	r3, r7, r3
 80048bc:	2201      	movs	r2, #1
 80048be:	701a      	strb	r2, [r3, #0]

              break;
 80048c0:	e006      	b.n	80048d0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	2220      	movs	r2, #32
 80048ca:	4013      	ands	r3, r2
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d1e8      	bne.n	80048a2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	2220      	movs	r2, #32
 80048d8:	4013      	ands	r3, r2
 80048da:	2b20      	cmp	r3, #32
 80048dc:	d004      	beq.n	80048e8 <I2C_IsErrorOccurred+0x100>
 80048de:	2327      	movs	r3, #39	@ 0x27
 80048e0:	18fb      	adds	r3, r7, r3
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d09b      	beq.n	8004820 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80048e8:	2327      	movs	r3, #39	@ 0x27
 80048ea:	18fb      	adds	r3, r7, r3
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d103      	bne.n	80048fa <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2220      	movs	r2, #32
 80048f8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	2204      	movs	r2, #4
 80048fe:	4313      	orrs	r3, r2
 8004900:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004902:	2327      	movs	r3, #39	@ 0x27
 8004904:	18fb      	adds	r3, r7, r3
 8004906:	2201      	movs	r2, #1
 8004908:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	2380      	movs	r3, #128	@ 0x80
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	4013      	ands	r3, r2
 800491a:	d00c      	beq.n	8004936 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	2201      	movs	r2, #1
 8004920:	4313      	orrs	r3, r2
 8004922:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2280      	movs	r2, #128	@ 0x80
 800492a:	0052      	lsls	r2, r2, #1
 800492c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800492e:	2327      	movs	r3, #39	@ 0x27
 8004930:	18fb      	adds	r3, r7, r3
 8004932:	2201      	movs	r2, #1
 8004934:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	2380      	movs	r3, #128	@ 0x80
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	4013      	ands	r3, r2
 800493e:	d00c      	beq.n	800495a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	2208      	movs	r2, #8
 8004944:	4313      	orrs	r3, r2
 8004946:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2280      	movs	r2, #128	@ 0x80
 800494e:	00d2      	lsls	r2, r2, #3
 8004950:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004952:	2327      	movs	r3, #39	@ 0x27
 8004954:	18fb      	adds	r3, r7, r3
 8004956:	2201      	movs	r2, #1
 8004958:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	2380      	movs	r3, #128	@ 0x80
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4013      	ands	r3, r2
 8004962:	d00c      	beq.n	800497e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	2202      	movs	r2, #2
 8004968:	4313      	orrs	r3, r2
 800496a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2280      	movs	r2, #128	@ 0x80
 8004972:	0092      	lsls	r2, r2, #2
 8004974:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004976:	2327      	movs	r3, #39	@ 0x27
 8004978:	18fb      	adds	r3, r7, r3
 800497a:	2201      	movs	r2, #1
 800497c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800497e:	2327      	movs	r3, #39	@ 0x27
 8004980:	18fb      	adds	r3, r7, r3
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d01d      	beq.n	80049c4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	0018      	movs	r0, r3
 800498c:	f7ff fd8a 	bl	80044a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	490e      	ldr	r1, [pc, #56]	@ (80049d4 <I2C_IsErrorOccurred+0x1ec>)
 800499c:	400a      	ands	r2, r1
 800499e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2241      	movs	r2, #65	@ 0x41
 80049b0:	2120      	movs	r1, #32
 80049b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2242      	movs	r2, #66	@ 0x42
 80049b8:	2100      	movs	r1, #0
 80049ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2240      	movs	r2, #64	@ 0x40
 80049c0:	2100      	movs	r1, #0
 80049c2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80049c4:	2327      	movs	r3, #39	@ 0x27
 80049c6:	18fb      	adds	r3, r7, r3
 80049c8:	781b      	ldrb	r3, [r3, #0]
}
 80049ca:	0018      	movs	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	b00a      	add	sp, #40	@ 0x28
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	fe00e800 	.word	0xfe00e800

080049d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80049d8:	b590      	push	{r4, r7, lr}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	0008      	movs	r0, r1
 80049e2:	0011      	movs	r1, r2
 80049e4:	607b      	str	r3, [r7, #4]
 80049e6:	240a      	movs	r4, #10
 80049e8:	193b      	adds	r3, r7, r4
 80049ea:	1c02      	adds	r2, r0, #0
 80049ec:	801a      	strh	r2, [r3, #0]
 80049ee:	2009      	movs	r0, #9
 80049f0:	183b      	adds	r3, r7, r0
 80049f2:	1c0a      	adds	r2, r1, #0
 80049f4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049f6:	193b      	adds	r3, r7, r4
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	059b      	lsls	r3, r3, #22
 80049fc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049fe:	183b      	adds	r3, r7, r0
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	0419      	lsls	r1, r3, #16
 8004a04:	23ff      	movs	r3, #255	@ 0xff
 8004a06:	041b      	lsls	r3, r3, #16
 8004a08:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a0a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a12:	4313      	orrs	r3, r2
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	085b      	lsrs	r3, r3, #1
 8004a18:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a22:	0d51      	lsrs	r1, r2, #21
 8004a24:	2280      	movs	r2, #128	@ 0x80
 8004a26:	00d2      	lsls	r2, r2, #3
 8004a28:	400a      	ands	r2, r1
 8004a2a:	4907      	ldr	r1, [pc, #28]	@ (8004a48 <I2C_TransferConfig+0x70>)
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	43d2      	mvns	r2, r2
 8004a30:	401a      	ands	r2, r3
 8004a32:	0011      	movs	r1, r2
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a3e:	46c0      	nop			@ (mov r8, r8)
 8004a40:	46bd      	mov	sp, r7
 8004a42:	b007      	add	sp, #28
 8004a44:	bd90      	pop	{r4, r7, pc}
 8004a46:	46c0      	nop			@ (mov r8, r8)
 8004a48:	03ff63ff 	.word	0x03ff63ff

08004a4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2241      	movs	r2, #65	@ 0x41
 8004a5a:	5c9b      	ldrb	r3, [r3, r2]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b20      	cmp	r3, #32
 8004a60:	d138      	bne.n	8004ad4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2240      	movs	r2, #64	@ 0x40
 8004a66:	5c9b      	ldrb	r3, [r3, r2]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d101      	bne.n	8004a70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	e032      	b.n	8004ad6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2240      	movs	r2, #64	@ 0x40
 8004a74:	2101      	movs	r1, #1
 8004a76:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2241      	movs	r2, #65	@ 0x41
 8004a7c:	2124      	movs	r1, #36	@ 0x24
 8004a7e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	438a      	bics	r2, r1
 8004a8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4911      	ldr	r1, [pc, #68]	@ (8004ae0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004a9c:	400a      	ands	r2, r1
 8004a9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6819      	ldr	r1, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2101      	movs	r1, #1
 8004abc:	430a      	orrs	r2, r1
 8004abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2241      	movs	r2, #65	@ 0x41
 8004ac4:	2120      	movs	r1, #32
 8004ac6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2240      	movs	r2, #64	@ 0x40
 8004acc:	2100      	movs	r1, #0
 8004ace:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	e000      	b.n	8004ad6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ad4:	2302      	movs	r3, #2
  }
}
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	b002      	add	sp, #8
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	46c0      	nop			@ (mov r8, r8)
 8004ae0:	ffffefff 	.word	0xffffefff

08004ae4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2241      	movs	r2, #65	@ 0x41
 8004af2:	5c9b      	ldrb	r3, [r3, r2]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b20      	cmp	r3, #32
 8004af8:	d139      	bne.n	8004b6e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2240      	movs	r2, #64	@ 0x40
 8004afe:	5c9b      	ldrb	r3, [r3, r2]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d101      	bne.n	8004b08 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b04:	2302      	movs	r3, #2
 8004b06:	e033      	b.n	8004b70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2240      	movs	r2, #64	@ 0x40
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2241      	movs	r2, #65	@ 0x41
 8004b14:	2124      	movs	r1, #36	@ 0x24
 8004b16:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2101      	movs	r1, #1
 8004b24:	438a      	bics	r2, r1
 8004b26:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4a11      	ldr	r2, [pc, #68]	@ (8004b78 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	021b      	lsls	r3, r3, #8
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2101      	movs	r1, #1
 8004b56:	430a      	orrs	r2, r1
 8004b58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2241      	movs	r2, #65	@ 0x41
 8004b5e:	2120      	movs	r1, #32
 8004b60:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2240      	movs	r2, #64	@ 0x40
 8004b66:	2100      	movs	r1, #0
 8004b68:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	e000      	b.n	8004b70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b6e:	2302      	movs	r3, #2
  }
}
 8004b70:	0018      	movs	r0, r3
 8004b72:	46bd      	mov	sp, r7
 8004b74:	b004      	add	sp, #16
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	fffff0ff 	.word	0xfffff0ff

08004b7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004b84:	4b19      	ldr	r3, [pc, #100]	@ (8004bec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a19      	ldr	r2, [pc, #100]	@ (8004bf0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	0019      	movs	r1, r3
 8004b8e:	4b17      	ldr	r3, [pc, #92]	@ (8004bec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	2380      	movs	r3, #128	@ 0x80
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d11f      	bne.n	8004be0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004ba0:	4b14      	ldr	r3, [pc, #80]	@ (8004bf4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	0013      	movs	r3, r2
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	189b      	adds	r3, r3, r2
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	4912      	ldr	r1, [pc, #72]	@ (8004bf8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f7fb fabc 	bl	800012c <__udivsi3>
 8004bb4:	0003      	movs	r3, r0
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bba:	e008      	b.n	8004bce <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	e001      	b.n	8004bce <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e009      	b.n	8004be2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bce:	4b07      	ldr	r3, [pc, #28]	@ (8004bec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004bd0:	695a      	ldr	r2, [r3, #20]
 8004bd2:	2380      	movs	r3, #128	@ 0x80
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	401a      	ands	r2, r3
 8004bd8:	2380      	movs	r3, #128	@ 0x80
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d0ed      	beq.n	8004bbc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	0018      	movs	r0, r3
 8004be4:	46bd      	mov	sp, r7
 8004be6:	b004      	add	sp, #16
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	46c0      	nop			@ (mov r8, r8)
 8004bec:	40007000 	.word	0x40007000
 8004bf0:	fffff9ff 	.word	0xfffff9ff
 8004bf4:	200004f0 	.word	0x200004f0
 8004bf8:	000f4240 	.word	0x000f4240

08004bfc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004c00:	4b03      	ldr	r3, [pc, #12]	@ (8004c10 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	23e0      	movs	r3, #224	@ 0xe0
 8004c06:	01db      	lsls	r3, r3, #7
 8004c08:	4013      	ands	r3, r2
}
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40021000 	.word	0x40021000

08004c14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b088      	sub	sp, #32
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d102      	bne.n	8004c28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	f000 fb50 	bl	80052c8 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	4013      	ands	r3, r2
 8004c30:	d100      	bne.n	8004c34 <HAL_RCC_OscConfig+0x20>
 8004c32:	e07c      	b.n	8004d2e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c34:	4bc3      	ldr	r3, [pc, #780]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	2238      	movs	r2, #56	@ 0x38
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c3e:	4bc1      	ldr	r3, [pc, #772]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	2203      	movs	r2, #3
 8004c44:	4013      	ands	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	2b10      	cmp	r3, #16
 8004c4c:	d102      	bne.n	8004c54 <HAL_RCC_OscConfig+0x40>
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2b03      	cmp	r3, #3
 8004c52:	d002      	beq.n	8004c5a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	2b08      	cmp	r3, #8
 8004c58:	d10b      	bne.n	8004c72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c5a:	4bba      	ldr	r3, [pc, #744]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	2380      	movs	r3, #128	@ 0x80
 8004c60:	029b      	lsls	r3, r3, #10
 8004c62:	4013      	ands	r3, r2
 8004c64:	d062      	beq.n	8004d2c <HAL_RCC_OscConfig+0x118>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d15e      	bne.n	8004d2c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e32a      	b.n	80052c8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	2380      	movs	r3, #128	@ 0x80
 8004c78:	025b      	lsls	r3, r3, #9
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d107      	bne.n	8004c8e <HAL_RCC_OscConfig+0x7a>
 8004c7e:	4bb1      	ldr	r3, [pc, #708]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	4bb0      	ldr	r3, [pc, #704]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004c84:	2180      	movs	r1, #128	@ 0x80
 8004c86:	0249      	lsls	r1, r1, #9
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	e020      	b.n	8004cd0 <HAL_RCC_OscConfig+0xbc>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	23a0      	movs	r3, #160	@ 0xa0
 8004c94:	02db      	lsls	r3, r3, #11
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d10e      	bne.n	8004cb8 <HAL_RCC_OscConfig+0xa4>
 8004c9a:	4baa      	ldr	r3, [pc, #680]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	4ba9      	ldr	r3, [pc, #676]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004ca0:	2180      	movs	r1, #128	@ 0x80
 8004ca2:	02c9      	lsls	r1, r1, #11
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	4ba6      	ldr	r3, [pc, #664]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	4ba5      	ldr	r3, [pc, #660]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004cae:	2180      	movs	r1, #128	@ 0x80
 8004cb0:	0249      	lsls	r1, r1, #9
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	e00b      	b.n	8004cd0 <HAL_RCC_OscConfig+0xbc>
 8004cb8:	4ba2      	ldr	r3, [pc, #648]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	4ba1      	ldr	r3, [pc, #644]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004cbe:	49a2      	ldr	r1, [pc, #648]	@ (8004f48 <HAL_RCC_OscConfig+0x334>)
 8004cc0:	400a      	ands	r2, r1
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	4b9f      	ldr	r3, [pc, #636]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	4b9e      	ldr	r3, [pc, #632]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004cca:	49a0      	ldr	r1, [pc, #640]	@ (8004f4c <HAL_RCC_OscConfig+0x338>)
 8004ccc:	400a      	ands	r2, r1
 8004cce:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d014      	beq.n	8004d02 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd8:	f7fe fe6e 	bl	80039b8 <HAL_GetTick>
 8004cdc:	0003      	movs	r3, r0
 8004cde:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ce2:	f7fe fe69 	bl	80039b8 <HAL_GetTick>
 8004ce6:	0002      	movs	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b64      	cmp	r3, #100	@ 0x64
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e2e9      	b.n	80052c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cf4:	4b93      	ldr	r3, [pc, #588]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	2380      	movs	r3, #128	@ 0x80
 8004cfa:	029b      	lsls	r3, r3, #10
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d0f0      	beq.n	8004ce2 <HAL_RCC_OscConfig+0xce>
 8004d00:	e015      	b.n	8004d2e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d02:	f7fe fe59 	bl	80039b8 <HAL_GetTick>
 8004d06:	0003      	movs	r3, r0
 8004d08:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d0c:	f7fe fe54 	bl	80039b8 <HAL_GetTick>
 8004d10:	0002      	movs	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b64      	cmp	r3, #100	@ 0x64
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e2d4      	b.n	80052c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d1e:	4b89      	ldr	r3, [pc, #548]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	2380      	movs	r3, #128	@ 0x80
 8004d24:	029b      	lsls	r3, r3, #10
 8004d26:	4013      	ands	r3, r2
 8004d28:	d1f0      	bne.n	8004d0c <HAL_RCC_OscConfig+0xf8>
 8004d2a:	e000      	b.n	8004d2e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d2c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2202      	movs	r2, #2
 8004d34:	4013      	ands	r3, r2
 8004d36:	d100      	bne.n	8004d3a <HAL_RCC_OscConfig+0x126>
 8004d38:	e099      	b.n	8004e6e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d3a:	4b82      	ldr	r3, [pc, #520]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	2238      	movs	r2, #56	@ 0x38
 8004d40:	4013      	ands	r3, r2
 8004d42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d44:	4b7f      	ldr	r3, [pc, #508]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	2203      	movs	r2, #3
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	2b10      	cmp	r3, #16
 8004d52:	d102      	bne.n	8004d5a <HAL_RCC_OscConfig+0x146>
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d002      	beq.n	8004d60 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d135      	bne.n	8004dcc <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d60:	4b78      	ldr	r3, [pc, #480]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	2380      	movs	r3, #128	@ 0x80
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	4013      	ands	r3, r2
 8004d6a:	d005      	beq.n	8004d78 <HAL_RCC_OscConfig+0x164>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e2a7      	b.n	80052c8 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d78:	4b72      	ldr	r3, [pc, #456]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	4a74      	ldr	r2, [pc, #464]	@ (8004f50 <HAL_RCC_OscConfig+0x33c>)
 8004d7e:	4013      	ands	r3, r2
 8004d80:	0019      	movs	r1, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	021a      	lsls	r2, r3, #8
 8004d88:	4b6e      	ldr	r3, [pc, #440]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d112      	bne.n	8004dba <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004d94:	4b6b      	ldr	r3, [pc, #428]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a6e      	ldr	r2, [pc, #440]	@ (8004f54 <HAL_RCC_OscConfig+0x340>)
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	0019      	movs	r1, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	4b68      	ldr	r3, [pc, #416]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004da4:	430a      	orrs	r2, r1
 8004da6:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004da8:	4b66      	ldr	r3, [pc, #408]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	0adb      	lsrs	r3, r3, #11
 8004dae:	2207      	movs	r2, #7
 8004db0:	4013      	ands	r3, r2
 8004db2:	4a69      	ldr	r2, [pc, #420]	@ (8004f58 <HAL_RCC_OscConfig+0x344>)
 8004db4:	40da      	lsrs	r2, r3
 8004db6:	4b69      	ldr	r3, [pc, #420]	@ (8004f5c <HAL_RCC_OscConfig+0x348>)
 8004db8:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004dba:	4b69      	ldr	r3, [pc, #420]	@ (8004f60 <HAL_RCC_OscConfig+0x34c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	f7fe fd9e 	bl	8003900 <HAL_InitTick>
 8004dc4:	1e03      	subs	r3, r0, #0
 8004dc6:	d051      	beq.n	8004e6c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e27d      	b.n	80052c8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d030      	beq.n	8004e36 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004dd4:	4b5b      	ldr	r3, [pc, #364]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a5e      	ldr	r2, [pc, #376]	@ (8004f54 <HAL_RCC_OscConfig+0x340>)
 8004dda:	4013      	ands	r3, r2
 8004ddc:	0019      	movs	r1, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691a      	ldr	r2, [r3, #16]
 8004de2:	4b58      	ldr	r3, [pc, #352]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004de4:	430a      	orrs	r2, r1
 8004de6:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004de8:	4b56      	ldr	r3, [pc, #344]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	4b55      	ldr	r3, [pc, #340]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004dee:	2180      	movs	r1, #128	@ 0x80
 8004df0:	0049      	lsls	r1, r1, #1
 8004df2:	430a      	orrs	r2, r1
 8004df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df6:	f7fe fddf 	bl	80039b8 <HAL_GetTick>
 8004dfa:	0003      	movs	r3, r0
 8004dfc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e00:	f7fe fdda 	bl	80039b8 <HAL_GetTick>
 8004e04:	0002      	movs	r2, r0
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e25a      	b.n	80052c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e12:	4b4c      	ldr	r3, [pc, #304]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	2380      	movs	r3, #128	@ 0x80
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	d0f0      	beq.n	8004e00 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e1e:	4b49      	ldr	r3, [pc, #292]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	4a4b      	ldr	r2, [pc, #300]	@ (8004f50 <HAL_RCC_OscConfig+0x33c>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	0019      	movs	r1, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	021a      	lsls	r2, r3, #8
 8004e2e:	4b45      	ldr	r3, [pc, #276]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004e30:	430a      	orrs	r2, r1
 8004e32:	605a      	str	r2, [r3, #4]
 8004e34:	e01b      	b.n	8004e6e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004e36:	4b43      	ldr	r3, [pc, #268]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	4b42      	ldr	r3, [pc, #264]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004e3c:	4949      	ldr	r1, [pc, #292]	@ (8004f64 <HAL_RCC_OscConfig+0x350>)
 8004e3e:	400a      	ands	r2, r1
 8004e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e42:	f7fe fdb9 	bl	80039b8 <HAL_GetTick>
 8004e46:	0003      	movs	r3, r0
 8004e48:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e4c:	f7fe fdb4 	bl	80039b8 <HAL_GetTick>
 8004e50:	0002      	movs	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e234      	b.n	80052c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e5e:	4b39      	ldr	r3, [pc, #228]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	2380      	movs	r3, #128	@ 0x80
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	4013      	ands	r3, r2
 8004e68:	d1f0      	bne.n	8004e4c <HAL_RCC_OscConfig+0x238>
 8004e6a:	e000      	b.n	8004e6e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e6c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2208      	movs	r2, #8
 8004e74:	4013      	ands	r3, r2
 8004e76:	d047      	beq.n	8004f08 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004e78:	4b32      	ldr	r3, [pc, #200]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2238      	movs	r2, #56	@ 0x38
 8004e7e:	4013      	ands	r3, r2
 8004e80:	2b18      	cmp	r3, #24
 8004e82:	d10a      	bne.n	8004e9a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004e84:	4b2f      	ldr	r3, [pc, #188]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e88:	2202      	movs	r2, #2
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	d03c      	beq.n	8004f08 <HAL_RCC_OscConfig+0x2f4>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d138      	bne.n	8004f08 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e216      	b.n	80052c8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d019      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004ea2:	4b28      	ldr	r3, [pc, #160]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004ea4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004ea6:	4b27      	ldr	r3, [pc, #156]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eae:	f7fe fd83 	bl	80039b8 <HAL_GetTick>
 8004eb2:	0003      	movs	r3, r0
 8004eb4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eb8:	f7fe fd7e 	bl	80039b8 <HAL_GetTick>
 8004ebc:	0002      	movs	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e1fe      	b.n	80052c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004eca:	4b1e      	ldr	r3, [pc, #120]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ece:	2202      	movs	r2, #2
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	d0f1      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x2a4>
 8004ed4:	e018      	b.n	8004f08 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004ed8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004eda:	4b1a      	ldr	r3, [pc, #104]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004edc:	2101      	movs	r1, #1
 8004ede:	438a      	bics	r2, r1
 8004ee0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee2:	f7fe fd69 	bl	80039b8 <HAL_GetTick>
 8004ee6:	0003      	movs	r3, r0
 8004ee8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eec:	f7fe fd64 	bl	80039b8 <HAL_GetTick>
 8004ef0:	0002      	movs	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e1e4      	b.n	80052c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004efe:	4b11      	ldr	r3, [pc, #68]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f02:	2202      	movs	r2, #2
 8004f04:	4013      	ands	r3, r2
 8004f06:	d1f1      	bne.n	8004eec <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2204      	movs	r2, #4
 8004f0e:	4013      	ands	r3, r2
 8004f10:	d100      	bne.n	8004f14 <HAL_RCC_OscConfig+0x300>
 8004f12:	e0c7      	b.n	80050a4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f14:	231f      	movs	r3, #31
 8004f16:	18fb      	adds	r3, r7, r3
 8004f18:	2200      	movs	r2, #0
 8004f1a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004f1c:	4b09      	ldr	r3, [pc, #36]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	2238      	movs	r2, #56	@ 0x38
 8004f22:	4013      	ands	r3, r2
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	d11f      	bne.n	8004f68 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004f28:	4b06      	ldr	r3, [pc, #24]	@ (8004f44 <HAL_RCC_OscConfig+0x330>)
 8004f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	4013      	ands	r3, r2
 8004f30:	d100      	bne.n	8004f34 <HAL_RCC_OscConfig+0x320>
 8004f32:	e0b7      	b.n	80050a4 <HAL_RCC_OscConfig+0x490>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d000      	beq.n	8004f3e <HAL_RCC_OscConfig+0x32a>
 8004f3c:	e0b2      	b.n	80050a4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e1c2      	b.n	80052c8 <HAL_RCC_OscConfig+0x6b4>
 8004f42:	46c0      	nop			@ (mov r8, r8)
 8004f44:	40021000 	.word	0x40021000
 8004f48:	fffeffff 	.word	0xfffeffff
 8004f4c:	fffbffff 	.word	0xfffbffff
 8004f50:	ffff80ff 	.word	0xffff80ff
 8004f54:	ffffc7ff 	.word	0xffffc7ff
 8004f58:	00f42400 	.word	0x00f42400
 8004f5c:	200004f0 	.word	0x200004f0
 8004f60:	200004f4 	.word	0x200004f4
 8004f64:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f68:	4bb5      	ldr	r3, [pc, #724]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 8004f6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f6c:	2380      	movs	r3, #128	@ 0x80
 8004f6e:	055b      	lsls	r3, r3, #21
 8004f70:	4013      	ands	r3, r2
 8004f72:	d101      	bne.n	8004f78 <HAL_RCC_OscConfig+0x364>
 8004f74:	2301      	movs	r3, #1
 8004f76:	e000      	b.n	8004f7a <HAL_RCC_OscConfig+0x366>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d011      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004f7e:	4bb0      	ldr	r3, [pc, #704]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 8004f80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f82:	4baf      	ldr	r3, [pc, #700]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 8004f84:	2180      	movs	r1, #128	@ 0x80
 8004f86:	0549      	lsls	r1, r1, #21
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004f8c:	4bac      	ldr	r3, [pc, #688]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 8004f8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f90:	2380      	movs	r3, #128	@ 0x80
 8004f92:	055b      	lsls	r3, r3, #21
 8004f94:	4013      	ands	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004f9a:	231f      	movs	r3, #31
 8004f9c:	18fb      	adds	r3, r7, r3
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fa2:	4ba8      	ldr	r3, [pc, #672]	@ (8005244 <HAL_RCC_OscConfig+0x630>)
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	2380      	movs	r3, #128	@ 0x80
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	4013      	ands	r3, r2
 8004fac:	d11a      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fae:	4ba5      	ldr	r3, [pc, #660]	@ (8005244 <HAL_RCC_OscConfig+0x630>)
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	4ba4      	ldr	r3, [pc, #656]	@ (8005244 <HAL_RCC_OscConfig+0x630>)
 8004fb4:	2180      	movs	r1, #128	@ 0x80
 8004fb6:	0049      	lsls	r1, r1, #1
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004fbc:	f7fe fcfc 	bl	80039b8 <HAL_GetTick>
 8004fc0:	0003      	movs	r3, r0
 8004fc2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fc6:	f7fe fcf7 	bl	80039b8 <HAL_GetTick>
 8004fca:	0002      	movs	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e177      	b.n	80052c8 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fd8:	4b9a      	ldr	r3, [pc, #616]	@ (8005244 <HAL_RCC_OscConfig+0x630>)
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	2380      	movs	r3, #128	@ 0x80
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	d0f0      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d106      	bne.n	8004ffa <HAL_RCC_OscConfig+0x3e6>
 8004fec:	4b94      	ldr	r3, [pc, #592]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 8004fee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004ff0:	4b93      	ldr	r3, [pc, #588]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004ff8:	e01c      	b.n	8005034 <HAL_RCC_OscConfig+0x420>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	2b05      	cmp	r3, #5
 8005000:	d10c      	bne.n	800501c <HAL_RCC_OscConfig+0x408>
 8005002:	4b8f      	ldr	r3, [pc, #572]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 8005004:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005006:	4b8e      	ldr	r3, [pc, #568]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 8005008:	2104      	movs	r1, #4
 800500a:	430a      	orrs	r2, r1
 800500c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800500e:	4b8c      	ldr	r3, [pc, #560]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 8005010:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005012:	4b8b      	ldr	r3, [pc, #556]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 8005014:	2101      	movs	r1, #1
 8005016:	430a      	orrs	r2, r1
 8005018:	65da      	str	r2, [r3, #92]	@ 0x5c
 800501a:	e00b      	b.n	8005034 <HAL_RCC_OscConfig+0x420>
 800501c:	4b88      	ldr	r3, [pc, #544]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 800501e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005020:	4b87      	ldr	r3, [pc, #540]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 8005022:	2101      	movs	r1, #1
 8005024:	438a      	bics	r2, r1
 8005026:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005028:	4b85      	ldr	r3, [pc, #532]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 800502a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800502c:	4b84      	ldr	r3, [pc, #528]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 800502e:	2104      	movs	r1, #4
 8005030:	438a      	bics	r2, r1
 8005032:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d014      	beq.n	8005066 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503c:	f7fe fcbc 	bl	80039b8 <HAL_GetTick>
 8005040:	0003      	movs	r3, r0
 8005042:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005044:	e009      	b.n	800505a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005046:	f7fe fcb7 	bl	80039b8 <HAL_GetTick>
 800504a:	0002      	movs	r2, r0
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	4a7d      	ldr	r2, [pc, #500]	@ (8005248 <HAL_RCC_OscConfig+0x634>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e136      	b.n	80052c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800505a:	4b79      	ldr	r3, [pc, #484]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 800505c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800505e:	2202      	movs	r2, #2
 8005060:	4013      	ands	r3, r2
 8005062:	d0f0      	beq.n	8005046 <HAL_RCC_OscConfig+0x432>
 8005064:	e013      	b.n	800508e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005066:	f7fe fca7 	bl	80039b8 <HAL_GetTick>
 800506a:	0003      	movs	r3, r0
 800506c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800506e:	e009      	b.n	8005084 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005070:	f7fe fca2 	bl	80039b8 <HAL_GetTick>
 8005074:	0002      	movs	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	4a73      	ldr	r2, [pc, #460]	@ (8005248 <HAL_RCC_OscConfig+0x634>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d901      	bls.n	8005084 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e121      	b.n	80052c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005084:	4b6e      	ldr	r3, [pc, #440]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 8005086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005088:	2202      	movs	r2, #2
 800508a:	4013      	ands	r3, r2
 800508c:	d1f0      	bne.n	8005070 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800508e:	231f      	movs	r3, #31
 8005090:	18fb      	adds	r3, r7, r3
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d105      	bne.n	80050a4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005098:	4b69      	ldr	r3, [pc, #420]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 800509a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800509c:	4b68      	ldr	r3, [pc, #416]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 800509e:	496b      	ldr	r1, [pc, #428]	@ (800524c <HAL_RCC_OscConfig+0x638>)
 80050a0:	400a      	ands	r2, r1
 80050a2:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2220      	movs	r2, #32
 80050aa:	4013      	ands	r3, r2
 80050ac:	d039      	beq.n	8005122 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d01b      	beq.n	80050ee <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050b6:	4b62      	ldr	r3, [pc, #392]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	4b61      	ldr	r3, [pc, #388]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 80050bc:	2180      	movs	r1, #128	@ 0x80
 80050be:	03c9      	lsls	r1, r1, #15
 80050c0:	430a      	orrs	r2, r1
 80050c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c4:	f7fe fc78 	bl	80039b8 <HAL_GetTick>
 80050c8:	0003      	movs	r3, r0
 80050ca:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80050cc:	e008      	b.n	80050e0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050ce:	f7fe fc73 	bl	80039b8 <HAL_GetTick>
 80050d2:	0002      	movs	r2, r0
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e0f3      	b.n	80052c8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80050e0:	4b57      	ldr	r3, [pc, #348]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	2380      	movs	r3, #128	@ 0x80
 80050e6:	041b      	lsls	r3, r3, #16
 80050e8:	4013      	ands	r3, r2
 80050ea:	d0f0      	beq.n	80050ce <HAL_RCC_OscConfig+0x4ba>
 80050ec:	e019      	b.n	8005122 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050ee:	4b54      	ldr	r3, [pc, #336]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4b53      	ldr	r3, [pc, #332]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 80050f4:	4956      	ldr	r1, [pc, #344]	@ (8005250 <HAL_RCC_OscConfig+0x63c>)
 80050f6:	400a      	ands	r2, r1
 80050f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050fa:	f7fe fc5d 	bl	80039b8 <HAL_GetTick>
 80050fe:	0003      	movs	r3, r0
 8005100:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005104:	f7fe fc58 	bl	80039b8 <HAL_GetTick>
 8005108:	0002      	movs	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e0d8      	b.n	80052c8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005116:	4b4a      	ldr	r3, [pc, #296]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	2380      	movs	r3, #128	@ 0x80
 800511c:	041b      	lsls	r3, r3, #16
 800511e:	4013      	ands	r3, r2
 8005120:	d1f0      	bne.n	8005104 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d100      	bne.n	800512c <HAL_RCC_OscConfig+0x518>
 800512a:	e0cc      	b.n	80052c6 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800512c:	4b44      	ldr	r3, [pc, #272]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	2238      	movs	r2, #56	@ 0x38
 8005132:	4013      	ands	r3, r2
 8005134:	2b10      	cmp	r3, #16
 8005136:	d100      	bne.n	800513a <HAL_RCC_OscConfig+0x526>
 8005138:	e07b      	b.n	8005232 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d156      	bne.n	80051f0 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005142:	4b3f      	ldr	r3, [pc, #252]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	4b3e      	ldr	r3, [pc, #248]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 8005148:	4942      	ldr	r1, [pc, #264]	@ (8005254 <HAL_RCC_OscConfig+0x640>)
 800514a:	400a      	ands	r2, r1
 800514c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514e:	f7fe fc33 	bl	80039b8 <HAL_GetTick>
 8005152:	0003      	movs	r3, r0
 8005154:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005158:	f7fe fc2e 	bl	80039b8 <HAL_GetTick>
 800515c:	0002      	movs	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e0ae      	b.n	80052c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800516a:	4b35      	ldr	r3, [pc, #212]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	2380      	movs	r3, #128	@ 0x80
 8005170:	049b      	lsls	r3, r3, #18
 8005172:	4013      	ands	r3, r2
 8005174:	d1f0      	bne.n	8005158 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005176:	4b32      	ldr	r3, [pc, #200]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	4a37      	ldr	r2, [pc, #220]	@ (8005258 <HAL_RCC_OscConfig+0x644>)
 800517c:	4013      	ands	r3, r2
 800517e:	0019      	movs	r1, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005188:	431a      	orrs	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518e:	021b      	lsls	r3, r3, #8
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800519c:	431a      	orrs	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a2:	431a      	orrs	r2, r3
 80051a4:	4b26      	ldr	r3, [pc, #152]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 80051a6:	430a      	orrs	r2, r1
 80051a8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051aa:	4b25      	ldr	r3, [pc, #148]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	4b24      	ldr	r3, [pc, #144]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 80051b0:	2180      	movs	r1, #128	@ 0x80
 80051b2:	0449      	lsls	r1, r1, #17
 80051b4:	430a      	orrs	r2, r1
 80051b6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80051b8:	4b21      	ldr	r3, [pc, #132]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 80051ba:	68da      	ldr	r2, [r3, #12]
 80051bc:	4b20      	ldr	r3, [pc, #128]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 80051be:	2180      	movs	r1, #128	@ 0x80
 80051c0:	0549      	lsls	r1, r1, #21
 80051c2:	430a      	orrs	r2, r1
 80051c4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c6:	f7fe fbf7 	bl	80039b8 <HAL_GetTick>
 80051ca:	0003      	movs	r3, r0
 80051cc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051d0:	f7fe fbf2 	bl	80039b8 <HAL_GetTick>
 80051d4:	0002      	movs	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e072      	b.n	80052c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051e2:	4b17      	ldr	r3, [pc, #92]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	2380      	movs	r3, #128	@ 0x80
 80051e8:	049b      	lsls	r3, r3, #18
 80051ea:	4013      	ands	r3, r2
 80051ec:	d0f0      	beq.n	80051d0 <HAL_RCC_OscConfig+0x5bc>
 80051ee:	e06a      	b.n	80052c6 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051f0:	4b13      	ldr	r3, [pc, #76]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	4b12      	ldr	r3, [pc, #72]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 80051f6:	4917      	ldr	r1, [pc, #92]	@ (8005254 <HAL_RCC_OscConfig+0x640>)
 80051f8:	400a      	ands	r2, r1
 80051fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fc:	f7fe fbdc 	bl	80039b8 <HAL_GetTick>
 8005200:	0003      	movs	r3, r0
 8005202:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005204:	e008      	b.n	8005218 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005206:	f7fe fbd7 	bl	80039b8 <HAL_GetTick>
 800520a:	0002      	movs	r2, r0
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d901      	bls.n	8005218 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e057      	b.n	80052c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005218:	4b09      	ldr	r3, [pc, #36]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	2380      	movs	r3, #128	@ 0x80
 800521e:	049b      	lsls	r3, r3, #18
 8005220:	4013      	ands	r3, r2
 8005222:	d1f0      	bne.n	8005206 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005224:	4b06      	ldr	r3, [pc, #24]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	4b05      	ldr	r3, [pc, #20]	@ (8005240 <HAL_RCC_OscConfig+0x62c>)
 800522a:	490c      	ldr	r1, [pc, #48]	@ (800525c <HAL_RCC_OscConfig+0x648>)
 800522c:	400a      	ands	r2, r1
 800522e:	60da      	str	r2, [r3, #12]
 8005230:	e049      	b.n	80052c6 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d112      	bne.n	8005260 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e044      	b.n	80052c8 <HAL_RCC_OscConfig+0x6b4>
 800523e:	46c0      	nop			@ (mov r8, r8)
 8005240:	40021000 	.word	0x40021000
 8005244:	40007000 	.word	0x40007000
 8005248:	00001388 	.word	0x00001388
 800524c:	efffffff 	.word	0xefffffff
 8005250:	ffbfffff 	.word	0xffbfffff
 8005254:	feffffff 	.word	0xfeffffff
 8005258:	11c1808c 	.word	0x11c1808c
 800525c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005260:	4b1b      	ldr	r3, [pc, #108]	@ (80052d0 <HAL_RCC_OscConfig+0x6bc>)
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2203      	movs	r2, #3
 800526a:	401a      	ands	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005270:	429a      	cmp	r2, r3
 8005272:	d126      	bne.n	80052c2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	2270      	movs	r2, #112	@ 0x70
 8005278:	401a      	ands	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800527e:	429a      	cmp	r2, r3
 8005280:	d11f      	bne.n	80052c2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	23fe      	movs	r3, #254	@ 0xfe
 8005286:	01db      	lsls	r3, r3, #7
 8005288:	401a      	ands	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005290:	429a      	cmp	r2, r3
 8005292:	d116      	bne.n	80052c2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	23f8      	movs	r3, #248	@ 0xf8
 8005298:	039b      	lsls	r3, r3, #14
 800529a:	401a      	ands	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d10e      	bne.n	80052c2 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	23e0      	movs	r3, #224	@ 0xe0
 80052a8:	051b      	lsls	r3, r3, #20
 80052aa:	401a      	ands	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d106      	bne.n	80052c2 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	0f5b      	lsrs	r3, r3, #29
 80052b8:	075a      	lsls	r2, r3, #29
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80052be:	429a      	cmp	r2, r3
 80052c0:	d001      	beq.n	80052c6 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	0018      	movs	r0, r3
 80052ca:	46bd      	mov	sp, r7
 80052cc:	b008      	add	sp, #32
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40021000 	.word	0x40021000

080052d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e0e9      	b.n	80054bc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052e8:	4b76      	ldr	r3, [pc, #472]	@ (80054c4 <HAL_RCC_ClockConfig+0x1f0>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2207      	movs	r2, #7
 80052ee:	4013      	ands	r3, r2
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d91e      	bls.n	8005334 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052f6:	4b73      	ldr	r3, [pc, #460]	@ (80054c4 <HAL_RCC_ClockConfig+0x1f0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2207      	movs	r2, #7
 80052fc:	4393      	bics	r3, r2
 80052fe:	0019      	movs	r1, r3
 8005300:	4b70      	ldr	r3, [pc, #448]	@ (80054c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005308:	f7fe fb56 	bl	80039b8 <HAL_GetTick>
 800530c:	0003      	movs	r3, r0
 800530e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005310:	e009      	b.n	8005326 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005312:	f7fe fb51 	bl	80039b8 <HAL_GetTick>
 8005316:	0002      	movs	r2, r0
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	4a6a      	ldr	r2, [pc, #424]	@ (80054c8 <HAL_RCC_ClockConfig+0x1f4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e0ca      	b.n	80054bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005326:	4b67      	ldr	r3, [pc, #412]	@ (80054c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2207      	movs	r2, #7
 800532c:	4013      	ands	r3, r2
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	429a      	cmp	r2, r3
 8005332:	d1ee      	bne.n	8005312 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2202      	movs	r2, #2
 800533a:	4013      	ands	r3, r2
 800533c:	d015      	beq.n	800536a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2204      	movs	r2, #4
 8005344:	4013      	ands	r3, r2
 8005346:	d006      	beq.n	8005356 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005348:	4b60      	ldr	r3, [pc, #384]	@ (80054cc <HAL_RCC_ClockConfig+0x1f8>)
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	4b5f      	ldr	r3, [pc, #380]	@ (80054cc <HAL_RCC_ClockConfig+0x1f8>)
 800534e:	21e0      	movs	r1, #224	@ 0xe0
 8005350:	01c9      	lsls	r1, r1, #7
 8005352:	430a      	orrs	r2, r1
 8005354:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005356:	4b5d      	ldr	r3, [pc, #372]	@ (80054cc <HAL_RCC_ClockConfig+0x1f8>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	4a5d      	ldr	r2, [pc, #372]	@ (80054d0 <HAL_RCC_ClockConfig+0x1fc>)
 800535c:	4013      	ands	r3, r2
 800535e:	0019      	movs	r1, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	4b59      	ldr	r3, [pc, #356]	@ (80054cc <HAL_RCC_ClockConfig+0x1f8>)
 8005366:	430a      	orrs	r2, r1
 8005368:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2201      	movs	r2, #1
 8005370:	4013      	ands	r3, r2
 8005372:	d057      	beq.n	8005424 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d107      	bne.n	800538c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800537c:	4b53      	ldr	r3, [pc, #332]	@ (80054cc <HAL_RCC_ClockConfig+0x1f8>)
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	2380      	movs	r3, #128	@ 0x80
 8005382:	029b      	lsls	r3, r3, #10
 8005384:	4013      	ands	r3, r2
 8005386:	d12b      	bne.n	80053e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e097      	b.n	80054bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2b02      	cmp	r3, #2
 8005392:	d107      	bne.n	80053a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005394:	4b4d      	ldr	r3, [pc, #308]	@ (80054cc <HAL_RCC_ClockConfig+0x1f8>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	2380      	movs	r3, #128	@ 0x80
 800539a:	049b      	lsls	r3, r3, #18
 800539c:	4013      	ands	r3, r2
 800539e:	d11f      	bne.n	80053e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e08b      	b.n	80054bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d107      	bne.n	80053bc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053ac:	4b47      	ldr	r3, [pc, #284]	@ (80054cc <HAL_RCC_ClockConfig+0x1f8>)
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	2380      	movs	r3, #128	@ 0x80
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	4013      	ands	r3, r2
 80053b6:	d113      	bne.n	80053e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e07f      	b.n	80054bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	d106      	bne.n	80053d2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053c4:	4b41      	ldr	r3, [pc, #260]	@ (80054cc <HAL_RCC_ClockConfig+0x1f8>)
 80053c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053c8:	2202      	movs	r2, #2
 80053ca:	4013      	ands	r3, r2
 80053cc:	d108      	bne.n	80053e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e074      	b.n	80054bc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053d2:	4b3e      	ldr	r3, [pc, #248]	@ (80054cc <HAL_RCC_ClockConfig+0x1f8>)
 80053d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053d6:	2202      	movs	r2, #2
 80053d8:	4013      	ands	r3, r2
 80053da:	d101      	bne.n	80053e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e06d      	b.n	80054bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053e0:	4b3a      	ldr	r3, [pc, #232]	@ (80054cc <HAL_RCC_ClockConfig+0x1f8>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	2207      	movs	r2, #7
 80053e6:	4393      	bics	r3, r2
 80053e8:	0019      	movs	r1, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	4b37      	ldr	r3, [pc, #220]	@ (80054cc <HAL_RCC_ClockConfig+0x1f8>)
 80053f0:	430a      	orrs	r2, r1
 80053f2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053f4:	f7fe fae0 	bl	80039b8 <HAL_GetTick>
 80053f8:	0003      	movs	r3, r0
 80053fa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053fc:	e009      	b.n	8005412 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053fe:	f7fe fadb 	bl	80039b8 <HAL_GetTick>
 8005402:	0002      	movs	r2, r0
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	4a2f      	ldr	r2, [pc, #188]	@ (80054c8 <HAL_RCC_ClockConfig+0x1f4>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e054      	b.n	80054bc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005412:	4b2e      	ldr	r3, [pc, #184]	@ (80054cc <HAL_RCC_ClockConfig+0x1f8>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	2238      	movs	r2, #56	@ 0x38
 8005418:	401a      	ands	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	429a      	cmp	r2, r3
 8005422:	d1ec      	bne.n	80053fe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005424:	4b27      	ldr	r3, [pc, #156]	@ (80054c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2207      	movs	r2, #7
 800542a:	4013      	ands	r3, r2
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	429a      	cmp	r2, r3
 8005430:	d21e      	bcs.n	8005470 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005432:	4b24      	ldr	r3, [pc, #144]	@ (80054c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2207      	movs	r2, #7
 8005438:	4393      	bics	r3, r2
 800543a:	0019      	movs	r1, r3
 800543c:	4b21      	ldr	r3, [pc, #132]	@ (80054c4 <HAL_RCC_ClockConfig+0x1f0>)
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	430a      	orrs	r2, r1
 8005442:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005444:	f7fe fab8 	bl	80039b8 <HAL_GetTick>
 8005448:	0003      	movs	r3, r0
 800544a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800544c:	e009      	b.n	8005462 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800544e:	f7fe fab3 	bl	80039b8 <HAL_GetTick>
 8005452:	0002      	movs	r2, r0
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	4a1b      	ldr	r2, [pc, #108]	@ (80054c8 <HAL_RCC_ClockConfig+0x1f4>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e02c      	b.n	80054bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005462:	4b18      	ldr	r3, [pc, #96]	@ (80054c4 <HAL_RCC_ClockConfig+0x1f0>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2207      	movs	r2, #7
 8005468:	4013      	ands	r3, r2
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	429a      	cmp	r2, r3
 800546e:	d1ee      	bne.n	800544e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2204      	movs	r2, #4
 8005476:	4013      	ands	r3, r2
 8005478:	d009      	beq.n	800548e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800547a:	4b14      	ldr	r3, [pc, #80]	@ (80054cc <HAL_RCC_ClockConfig+0x1f8>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	4a15      	ldr	r2, [pc, #84]	@ (80054d4 <HAL_RCC_ClockConfig+0x200>)
 8005480:	4013      	ands	r3, r2
 8005482:	0019      	movs	r1, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	4b10      	ldr	r3, [pc, #64]	@ (80054cc <HAL_RCC_ClockConfig+0x1f8>)
 800548a:	430a      	orrs	r2, r1
 800548c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800548e:	f000 f829 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 8005492:	0001      	movs	r1, r0
 8005494:	4b0d      	ldr	r3, [pc, #52]	@ (80054cc <HAL_RCC_ClockConfig+0x1f8>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	0a1b      	lsrs	r3, r3, #8
 800549a:	220f      	movs	r2, #15
 800549c:	401a      	ands	r2, r3
 800549e:	4b0e      	ldr	r3, [pc, #56]	@ (80054d8 <HAL_RCC_ClockConfig+0x204>)
 80054a0:	0092      	lsls	r2, r2, #2
 80054a2:	58d3      	ldr	r3, [r2, r3]
 80054a4:	221f      	movs	r2, #31
 80054a6:	4013      	ands	r3, r2
 80054a8:	000a      	movs	r2, r1
 80054aa:	40da      	lsrs	r2, r3
 80054ac:	4b0b      	ldr	r3, [pc, #44]	@ (80054dc <HAL_RCC_ClockConfig+0x208>)
 80054ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80054b0:	4b0b      	ldr	r3, [pc, #44]	@ (80054e0 <HAL_RCC_ClockConfig+0x20c>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	0018      	movs	r0, r3
 80054b6:	f7fe fa23 	bl	8003900 <HAL_InitTick>
 80054ba:	0003      	movs	r3, r0
}
 80054bc:	0018      	movs	r0, r3
 80054be:	46bd      	mov	sp, r7
 80054c0:	b004      	add	sp, #16
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	40022000 	.word	0x40022000
 80054c8:	00001388 	.word	0x00001388
 80054cc:	40021000 	.word	0x40021000
 80054d0:	fffff0ff 	.word	0xfffff0ff
 80054d4:	ffff8fff 	.word	0xffff8fff
 80054d8:	08009654 	.word	0x08009654
 80054dc:	200004f0 	.word	0x200004f0
 80054e0:	200004f4 	.word	0x200004f4

080054e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054ea:	4b3c      	ldr	r3, [pc, #240]	@ (80055dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	2238      	movs	r2, #56	@ 0x38
 80054f0:	4013      	ands	r3, r2
 80054f2:	d10f      	bne.n	8005514 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80054f4:	4b39      	ldr	r3, [pc, #228]	@ (80055dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	0adb      	lsrs	r3, r3, #11
 80054fa:	2207      	movs	r2, #7
 80054fc:	4013      	ands	r3, r2
 80054fe:	2201      	movs	r2, #1
 8005500:	409a      	lsls	r2, r3
 8005502:	0013      	movs	r3, r2
 8005504:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005506:	6839      	ldr	r1, [r7, #0]
 8005508:	4835      	ldr	r0, [pc, #212]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800550a:	f7fa fe0f 	bl	800012c <__udivsi3>
 800550e:	0003      	movs	r3, r0
 8005510:	613b      	str	r3, [r7, #16]
 8005512:	e05d      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005514:	4b31      	ldr	r3, [pc, #196]	@ (80055dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	2238      	movs	r2, #56	@ 0x38
 800551a:	4013      	ands	r3, r2
 800551c:	2b08      	cmp	r3, #8
 800551e:	d102      	bne.n	8005526 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005520:	4b30      	ldr	r3, [pc, #192]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0x100>)
 8005522:	613b      	str	r3, [r7, #16]
 8005524:	e054      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005526:	4b2d      	ldr	r3, [pc, #180]	@ (80055dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	2238      	movs	r2, #56	@ 0x38
 800552c:	4013      	ands	r3, r2
 800552e:	2b10      	cmp	r3, #16
 8005530:	d138      	bne.n	80055a4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005532:	4b2a      	ldr	r3, [pc, #168]	@ (80055dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	2203      	movs	r2, #3
 8005538:	4013      	ands	r3, r2
 800553a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800553c:	4b27      	ldr	r3, [pc, #156]	@ (80055dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	091b      	lsrs	r3, r3, #4
 8005542:	2207      	movs	r2, #7
 8005544:	4013      	ands	r3, r2
 8005546:	3301      	adds	r3, #1
 8005548:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2b03      	cmp	r3, #3
 800554e:	d10d      	bne.n	800556c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005550:	68b9      	ldr	r1, [r7, #8]
 8005552:	4824      	ldr	r0, [pc, #144]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0x100>)
 8005554:	f7fa fdea 	bl	800012c <__udivsi3>
 8005558:	0003      	movs	r3, r0
 800555a:	0019      	movs	r1, r3
 800555c:	4b1f      	ldr	r3, [pc, #124]	@ (80055dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	0a1b      	lsrs	r3, r3, #8
 8005562:	227f      	movs	r2, #127	@ 0x7f
 8005564:	4013      	ands	r3, r2
 8005566:	434b      	muls	r3, r1
 8005568:	617b      	str	r3, [r7, #20]
        break;
 800556a:	e00d      	b.n	8005588 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800556c:	68b9      	ldr	r1, [r7, #8]
 800556e:	481c      	ldr	r0, [pc, #112]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005570:	f7fa fddc 	bl	800012c <__udivsi3>
 8005574:	0003      	movs	r3, r0
 8005576:	0019      	movs	r1, r3
 8005578:	4b18      	ldr	r3, [pc, #96]	@ (80055dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	0a1b      	lsrs	r3, r3, #8
 800557e:	227f      	movs	r2, #127	@ 0x7f
 8005580:	4013      	ands	r3, r2
 8005582:	434b      	muls	r3, r1
 8005584:	617b      	str	r3, [r7, #20]
        break;
 8005586:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005588:	4b14      	ldr	r3, [pc, #80]	@ (80055dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	0f5b      	lsrs	r3, r3, #29
 800558e:	2207      	movs	r2, #7
 8005590:	4013      	ands	r3, r2
 8005592:	3301      	adds	r3, #1
 8005594:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	6978      	ldr	r0, [r7, #20]
 800559a:	f7fa fdc7 	bl	800012c <__udivsi3>
 800559e:	0003      	movs	r3, r0
 80055a0:	613b      	str	r3, [r7, #16]
 80055a2:	e015      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80055a4:	4b0d      	ldr	r3, [pc, #52]	@ (80055dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	2238      	movs	r2, #56	@ 0x38
 80055aa:	4013      	ands	r3, r2
 80055ac:	2b20      	cmp	r3, #32
 80055ae:	d103      	bne.n	80055b8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80055b0:	2380      	movs	r3, #128	@ 0x80
 80055b2:	021b      	lsls	r3, r3, #8
 80055b4:	613b      	str	r3, [r7, #16]
 80055b6:	e00b      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80055b8:	4b08      	ldr	r3, [pc, #32]	@ (80055dc <HAL_RCC_GetSysClockFreq+0xf8>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2238      	movs	r2, #56	@ 0x38
 80055be:	4013      	ands	r3, r2
 80055c0:	2b18      	cmp	r3, #24
 80055c2:	d103      	bne.n	80055cc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80055c4:	23fa      	movs	r3, #250	@ 0xfa
 80055c6:	01db      	lsls	r3, r3, #7
 80055c8:	613b      	str	r3, [r7, #16]
 80055ca:	e001      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80055d0:	693b      	ldr	r3, [r7, #16]
}
 80055d2:	0018      	movs	r0, r3
 80055d4:	46bd      	mov	sp, r7
 80055d6:	b006      	add	sp, #24
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	46c0      	nop			@ (mov r8, r8)
 80055dc:	40021000 	.word	0x40021000
 80055e0:	00f42400 	.word	0x00f42400
 80055e4:	007a1200 	.word	0x007a1200

080055e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055ec:	4b02      	ldr	r3, [pc, #8]	@ (80055f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80055ee:	681b      	ldr	r3, [r3, #0]
}
 80055f0:	0018      	movs	r0, r3
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	46c0      	nop			@ (mov r8, r8)
 80055f8:	200004f0 	.word	0x200004f0

080055fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055fc:	b5b0      	push	{r4, r5, r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005600:	f7ff fff2 	bl	80055e8 <HAL_RCC_GetHCLKFreq>
 8005604:	0004      	movs	r4, r0
 8005606:	f7ff faf9 	bl	8004bfc <LL_RCC_GetAPB1Prescaler>
 800560a:	0003      	movs	r3, r0
 800560c:	0b1a      	lsrs	r2, r3, #12
 800560e:	4b05      	ldr	r3, [pc, #20]	@ (8005624 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005610:	0092      	lsls	r2, r2, #2
 8005612:	58d3      	ldr	r3, [r2, r3]
 8005614:	221f      	movs	r2, #31
 8005616:	4013      	ands	r3, r2
 8005618:	40dc      	lsrs	r4, r3
 800561a:	0023      	movs	r3, r4
}
 800561c:	0018      	movs	r0, r3
 800561e:	46bd      	mov	sp, r7
 8005620:	bdb0      	pop	{r4, r5, r7, pc}
 8005622:	46c0      	nop			@ (mov r8, r8)
 8005624:	08009694 	.word	0x08009694

08005628 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b086      	sub	sp, #24
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005630:	2313      	movs	r3, #19
 8005632:	18fb      	adds	r3, r7, r3
 8005634:	2200      	movs	r2, #0
 8005636:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005638:	2312      	movs	r3, #18
 800563a:	18fb      	adds	r3, r7, r3
 800563c:	2200      	movs	r2, #0
 800563e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	2380      	movs	r3, #128	@ 0x80
 8005646:	029b      	lsls	r3, r3, #10
 8005648:	4013      	ands	r3, r2
 800564a:	d100      	bne.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800564c:	e0ad      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800564e:	2011      	movs	r0, #17
 8005650:	183b      	adds	r3, r7, r0
 8005652:	2200      	movs	r2, #0
 8005654:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005656:	4b47      	ldr	r3, [pc, #284]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005658:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800565a:	2380      	movs	r3, #128	@ 0x80
 800565c:	055b      	lsls	r3, r3, #21
 800565e:	4013      	ands	r3, r2
 8005660:	d110      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005662:	4b44      	ldr	r3, [pc, #272]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005664:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005666:	4b43      	ldr	r3, [pc, #268]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005668:	2180      	movs	r1, #128	@ 0x80
 800566a:	0549      	lsls	r1, r1, #21
 800566c:	430a      	orrs	r2, r1
 800566e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005670:	4b40      	ldr	r3, [pc, #256]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005672:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005674:	2380      	movs	r3, #128	@ 0x80
 8005676:	055b      	lsls	r3, r3, #21
 8005678:	4013      	ands	r3, r2
 800567a:	60bb      	str	r3, [r7, #8]
 800567c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800567e:	183b      	adds	r3, r7, r0
 8005680:	2201      	movs	r2, #1
 8005682:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005684:	4b3c      	ldr	r3, [pc, #240]	@ (8005778 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	4b3b      	ldr	r3, [pc, #236]	@ (8005778 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800568a:	2180      	movs	r1, #128	@ 0x80
 800568c:	0049      	lsls	r1, r1, #1
 800568e:	430a      	orrs	r2, r1
 8005690:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005692:	f7fe f991 	bl	80039b8 <HAL_GetTick>
 8005696:	0003      	movs	r3, r0
 8005698:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800569a:	e00b      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800569c:	f7fe f98c 	bl	80039b8 <HAL_GetTick>
 80056a0:	0002      	movs	r2, r0
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d904      	bls.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80056aa:	2313      	movs	r3, #19
 80056ac:	18fb      	adds	r3, r7, r3
 80056ae:	2203      	movs	r2, #3
 80056b0:	701a      	strb	r2, [r3, #0]
        break;
 80056b2:	e005      	b.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80056b4:	4b30      	ldr	r3, [pc, #192]	@ (8005778 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	2380      	movs	r3, #128	@ 0x80
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	4013      	ands	r3, r2
 80056be:	d0ed      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80056c0:	2313      	movs	r3, #19
 80056c2:	18fb      	adds	r3, r7, r3
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d15e      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056ca:	4b2a      	ldr	r3, [pc, #168]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80056cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80056ce:	23c0      	movs	r3, #192	@ 0xc0
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4013      	ands	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d019      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d014      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80056e6:	4b23      	ldr	r3, [pc, #140]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80056e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056ea:	4a24      	ldr	r2, [pc, #144]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056f0:	4b20      	ldr	r3, [pc, #128]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80056f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80056f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80056f6:	2180      	movs	r1, #128	@ 0x80
 80056f8:	0249      	lsls	r1, r1, #9
 80056fa:	430a      	orrs	r2, r1
 80056fc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80056fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005700:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005702:	4b1c      	ldr	r3, [pc, #112]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005704:	491e      	ldr	r1, [pc, #120]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8005706:	400a      	ands	r2, r1
 8005708:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800570a:	4b1a      	ldr	r3, [pc, #104]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2201      	movs	r2, #1
 8005714:	4013      	ands	r3, r2
 8005716:	d016      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005718:	f7fe f94e 	bl	80039b8 <HAL_GetTick>
 800571c:	0003      	movs	r3, r0
 800571e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005720:	e00c      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005722:	f7fe f949 	bl	80039b8 <HAL_GetTick>
 8005726:	0002      	movs	r2, r0
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	4a15      	ldr	r2, [pc, #84]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d904      	bls.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005732:	2313      	movs	r3, #19
 8005734:	18fb      	adds	r3, r7, r3
 8005736:	2203      	movs	r2, #3
 8005738:	701a      	strb	r2, [r3, #0]
            break;
 800573a:	e004      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800573c:	4b0d      	ldr	r3, [pc, #52]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800573e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005740:	2202      	movs	r2, #2
 8005742:	4013      	ands	r3, r2
 8005744:	d0ed      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005746:	2313      	movs	r3, #19
 8005748:	18fb      	adds	r3, r7, r3
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10a      	bne.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005750:	4b08      	ldr	r3, [pc, #32]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005754:	4a09      	ldr	r2, [pc, #36]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005756:	4013      	ands	r3, r2
 8005758:	0019      	movs	r1, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800575e:	4b05      	ldr	r3, [pc, #20]	@ (8005774 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005760:	430a      	orrs	r2, r1
 8005762:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005764:	e016      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005766:	2312      	movs	r3, #18
 8005768:	18fb      	adds	r3, r7, r3
 800576a:	2213      	movs	r2, #19
 800576c:	18ba      	adds	r2, r7, r2
 800576e:	7812      	ldrb	r2, [r2, #0]
 8005770:	701a      	strb	r2, [r3, #0]
 8005772:	e00f      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005774:	40021000 	.word	0x40021000
 8005778:	40007000 	.word	0x40007000
 800577c:	fffffcff 	.word	0xfffffcff
 8005780:	fffeffff 	.word	0xfffeffff
 8005784:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005788:	2312      	movs	r3, #18
 800578a:	18fb      	adds	r3, r7, r3
 800578c:	2213      	movs	r2, #19
 800578e:	18ba      	adds	r2, r7, r2
 8005790:	7812      	ldrb	r2, [r2, #0]
 8005792:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005794:	2311      	movs	r3, #17
 8005796:	18fb      	adds	r3, r7, r3
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d105      	bne.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800579e:	4bb6      	ldr	r3, [pc, #728]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057a2:	4bb5      	ldr	r3, [pc, #724]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057a4:	49b5      	ldr	r1, [pc, #724]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80057a6:	400a      	ands	r2, r1
 80057a8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2201      	movs	r2, #1
 80057b0:	4013      	ands	r3, r2
 80057b2:	d009      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057b4:	4bb0      	ldr	r3, [pc, #704]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b8:	2203      	movs	r2, #3
 80057ba:	4393      	bics	r3, r2
 80057bc:	0019      	movs	r1, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	4bad      	ldr	r3, [pc, #692]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057c4:	430a      	orrs	r2, r1
 80057c6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2202      	movs	r2, #2
 80057ce:	4013      	ands	r3, r2
 80057d0:	d009      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057d2:	4ba9      	ldr	r3, [pc, #676]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057d6:	220c      	movs	r2, #12
 80057d8:	4393      	bics	r3, r2
 80057da:	0019      	movs	r1, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	4ba5      	ldr	r3, [pc, #660]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057e2:	430a      	orrs	r2, r1
 80057e4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2204      	movs	r2, #4
 80057ec:	4013      	ands	r3, r2
 80057ee:	d009      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80057f0:	4ba1      	ldr	r3, [pc, #644]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80057f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f4:	2230      	movs	r2, #48	@ 0x30
 80057f6:	4393      	bics	r3, r2
 80057f8:	0019      	movs	r1, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	4b9e      	ldr	r3, [pc, #632]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005800:	430a      	orrs	r2, r1
 8005802:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2210      	movs	r2, #16
 800580a:	4013      	ands	r3, r2
 800580c:	d009      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800580e:	4b9a      	ldr	r3, [pc, #616]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005812:	4a9b      	ldr	r2, [pc, #620]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005814:	4013      	ands	r3, r2
 8005816:	0019      	movs	r1, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691a      	ldr	r2, [r3, #16]
 800581c:	4b96      	ldr	r3, [pc, #600]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800581e:	430a      	orrs	r2, r1
 8005820:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	2380      	movs	r3, #128	@ 0x80
 8005828:	015b      	lsls	r3, r3, #5
 800582a:	4013      	ands	r3, r2
 800582c:	d009      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800582e:	4b92      	ldr	r3, [pc, #584]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005832:	4a94      	ldr	r2, [pc, #592]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005834:	4013      	ands	r3, r2
 8005836:	0019      	movs	r1, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	695a      	ldr	r2, [r3, #20]
 800583c:	4b8e      	ldr	r3, [pc, #568]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800583e:	430a      	orrs	r2, r1
 8005840:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	2380      	movs	r3, #128	@ 0x80
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4013      	ands	r3, r2
 800584c:	d009      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800584e:	4b8a      	ldr	r3, [pc, #552]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005852:	4a8d      	ldr	r2, [pc, #564]	@ (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005854:	4013      	ands	r3, r2
 8005856:	0019      	movs	r1, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800585c:	4b86      	ldr	r3, [pc, #536]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800585e:	430a      	orrs	r2, r1
 8005860:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	2380      	movs	r3, #128	@ 0x80
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	4013      	ands	r3, r2
 800586c:	d009      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800586e:	4b82      	ldr	r3, [pc, #520]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005872:	4a86      	ldr	r2, [pc, #536]	@ (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8005874:	4013      	ands	r3, r2
 8005876:	0019      	movs	r1, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800587c:	4b7e      	ldr	r3, [pc, #504]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800587e:	430a      	orrs	r2, r1
 8005880:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2220      	movs	r2, #32
 8005888:	4013      	ands	r3, r2
 800588a:	d009      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800588c:	4b7a      	ldr	r3, [pc, #488]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800588e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005890:	4a7f      	ldr	r2, [pc, #508]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005892:	4013      	ands	r3, r2
 8005894:	0019      	movs	r1, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699a      	ldr	r2, [r3, #24]
 800589a:	4b77      	ldr	r3, [pc, #476]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800589c:	430a      	orrs	r2, r1
 800589e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2240      	movs	r2, #64	@ 0x40
 80058a6:	4013      	ands	r3, r2
 80058a8:	d009      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058aa:	4b73      	ldr	r3, [pc, #460]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ae:	4a79      	ldr	r2, [pc, #484]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80058b0:	4013      	ands	r3, r2
 80058b2:	0019      	movs	r1, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	69da      	ldr	r2, [r3, #28]
 80058b8:	4b6f      	ldr	r3, [pc, #444]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058ba:	430a      	orrs	r2, r1
 80058bc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	2380      	movs	r3, #128	@ 0x80
 80058c4:	01db      	lsls	r3, r3, #7
 80058c6:	4013      	ands	r3, r2
 80058c8:	d015      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058ca:	4b6b      	ldr	r3, [pc, #428]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	0899      	lsrs	r1, r3, #2
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058d6:	4b68      	ldr	r3, [pc, #416]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058d8:	430a      	orrs	r2, r1
 80058da:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058e0:	2380      	movs	r3, #128	@ 0x80
 80058e2:	05db      	lsls	r3, r3, #23
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d106      	bne.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80058e8:	4b63      	ldr	r3, [pc, #396]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058ea:	68da      	ldr	r2, [r3, #12]
 80058ec:	4b62      	ldr	r3, [pc, #392]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80058ee:	2180      	movs	r1, #128	@ 0x80
 80058f0:	0249      	lsls	r1, r1, #9
 80058f2:	430a      	orrs	r2, r1
 80058f4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	2380      	movs	r3, #128	@ 0x80
 80058fc:	031b      	lsls	r3, r3, #12
 80058fe:	4013      	ands	r3, r2
 8005900:	d009      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005902:	4b5d      	ldr	r3, [pc, #372]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005906:	2240      	movs	r2, #64	@ 0x40
 8005908:	4393      	bics	r3, r2
 800590a:	0019      	movs	r1, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005910:	4b59      	ldr	r3, [pc, #356]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005912:	430a      	orrs	r2, r1
 8005914:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	2380      	movs	r3, #128	@ 0x80
 800591c:	039b      	lsls	r3, r3, #14
 800591e:	4013      	ands	r3, r2
 8005920:	d016      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005922:	4b55      	ldr	r3, [pc, #340]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005926:	4a5c      	ldr	r2, [pc, #368]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005928:	4013      	ands	r3, r2
 800592a:	0019      	movs	r1, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005930:	4b51      	ldr	r3, [pc, #324]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005932:	430a      	orrs	r2, r1
 8005934:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800593a:	2380      	movs	r3, #128	@ 0x80
 800593c:	03db      	lsls	r3, r3, #15
 800593e:	429a      	cmp	r2, r3
 8005940:	d106      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005942:	4b4d      	ldr	r3, [pc, #308]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	4b4c      	ldr	r3, [pc, #304]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005948:	2180      	movs	r1, #128	@ 0x80
 800594a:	0449      	lsls	r1, r1, #17
 800594c:	430a      	orrs	r2, r1
 800594e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	2380      	movs	r3, #128	@ 0x80
 8005956:	03db      	lsls	r3, r3, #15
 8005958:	4013      	ands	r3, r2
 800595a:	d016      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800595c:	4b46      	ldr	r3, [pc, #280]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800595e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005960:	4a4e      	ldr	r2, [pc, #312]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005962:	4013      	ands	r3, r2
 8005964:	0019      	movs	r1, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800596a:	4b43      	ldr	r3, [pc, #268]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800596c:	430a      	orrs	r2, r1
 800596e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005974:	2380      	movs	r3, #128	@ 0x80
 8005976:	045b      	lsls	r3, r3, #17
 8005978:	429a      	cmp	r2, r3
 800597a:	d106      	bne.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800597c:	4b3e      	ldr	r3, [pc, #248]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	4b3d      	ldr	r3, [pc, #244]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005982:	2180      	movs	r1, #128	@ 0x80
 8005984:	0449      	lsls	r1, r1, #17
 8005986:	430a      	orrs	r2, r1
 8005988:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	2380      	movs	r3, #128	@ 0x80
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	4013      	ands	r3, r2
 8005994:	d014      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005996:	4b38      	ldr	r3, [pc, #224]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800599a:	2203      	movs	r2, #3
 800599c:	4393      	bics	r3, r2
 800599e:	0019      	movs	r1, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a1a      	ldr	r2, [r3, #32]
 80059a4:	4b34      	ldr	r3, [pc, #208]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059a6:	430a      	orrs	r2, r1
 80059a8:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d106      	bne.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80059b2:	4b31      	ldr	r3, [pc, #196]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	4b30      	ldr	r3, [pc, #192]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059b8:	2180      	movs	r1, #128	@ 0x80
 80059ba:	0249      	lsls	r1, r1, #9
 80059bc:	430a      	orrs	r2, r1
 80059be:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	2380      	movs	r3, #128	@ 0x80
 80059c6:	019b      	lsls	r3, r3, #6
 80059c8:	4013      	ands	r3, r2
 80059ca:	d014      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80059cc:	4b2a      	ldr	r3, [pc, #168]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d0:	220c      	movs	r2, #12
 80059d2:	4393      	bics	r3, r2
 80059d4:	0019      	movs	r1, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059da:	4b27      	ldr	r3, [pc, #156]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059dc:	430a      	orrs	r2, r1
 80059de:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e4:	2b04      	cmp	r3, #4
 80059e6:	d106      	bne.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80059e8:	4b23      	ldr	r3, [pc, #140]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059ea:	68da      	ldr	r2, [r3, #12]
 80059ec:	4b22      	ldr	r3, [pc, #136]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80059ee:	2180      	movs	r1, #128	@ 0x80
 80059f0:	0249      	lsls	r1, r1, #9
 80059f2:	430a      	orrs	r2, r1
 80059f4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	2380      	movs	r3, #128	@ 0x80
 80059fc:	045b      	lsls	r3, r3, #17
 80059fe:	4013      	ands	r3, r2
 8005a00:	d016      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a02:	4b1d      	ldr	r3, [pc, #116]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a06:	4a22      	ldr	r2, [pc, #136]	@ (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	0019      	movs	r1, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a10:	4b19      	ldr	r3, [pc, #100]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a12:	430a      	orrs	r2, r1
 8005a14:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a1a:	2380      	movs	r3, #128	@ 0x80
 8005a1c:	019b      	lsls	r3, r3, #6
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d106      	bne.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005a22:	4b15      	ldr	r3, [pc, #84]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	4b14      	ldr	r3, [pc, #80]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a28:	2180      	movs	r1, #128	@ 0x80
 8005a2a:	0449      	lsls	r1, r1, #17
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	2380      	movs	r3, #128	@ 0x80
 8005a36:	049b      	lsls	r3, r3, #18
 8005a38:	4013      	ands	r3, r2
 8005a3a:	d016      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a40:	4a10      	ldr	r2, [pc, #64]	@ (8005a84 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005a42:	4013      	ands	r3, r2
 8005a44:	0019      	movs	r1, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005a54:	2380      	movs	r3, #128	@ 0x80
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d106      	bne.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005a5c:	4b06      	ldr	r3, [pc, #24]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a5e:	68da      	ldr	r2, [r3, #12]
 8005a60:	4b05      	ldr	r3, [pc, #20]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005a62:	2180      	movs	r1, #128	@ 0x80
 8005a64:	0449      	lsls	r1, r1, #17
 8005a66:	430a      	orrs	r2, r1
 8005a68:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005a6a:	2312      	movs	r3, #18
 8005a6c:	18fb      	adds	r3, r7, r3
 8005a6e:	781b      	ldrb	r3, [r3, #0]
}
 8005a70:	0018      	movs	r0, r3
 8005a72:	46bd      	mov	sp, r7
 8005a74:	b006      	add	sp, #24
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	40021000 	.word	0x40021000
 8005a7c:	efffffff 	.word	0xefffffff
 8005a80:	fffff3ff 	.word	0xfffff3ff
 8005a84:	fffffcff 	.word	0xfffffcff
 8005a88:	fff3ffff 	.word	0xfff3ffff
 8005a8c:	ffcfffff 	.word	0xffcfffff
 8005a90:	ffffcfff 	.word	0xffffcfff
 8005a94:	ffff3fff 	.word	0xffff3fff
 8005a98:	ffbfffff 	.word	0xffbfffff
 8005a9c:	feffffff 	.word	0xfeffffff

08005aa0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005aa0:	b590      	push	{r4, r7, lr}
 8005aa2:	b089      	sub	sp, #36	@ 0x24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2228      	movs	r2, #40	@ 0x28
 8005ab0:	5c9b      	ldrb	r3, [r3, r2]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d101      	bne.n	8005aba <HAL_RTC_SetAlarm_IT+0x1a>
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	e127      	b.n	8005d0a <HAL_RTC_SetAlarm_IT+0x26a>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2228      	movs	r2, #40	@ 0x28
 8005abe:	2101      	movs	r1, #1
 8005ac0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2229      	movs	r2, #41	@ 0x29
 8005ac6:	2102      	movs	r1, #2
 8005ac8:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d136      	bne.n	8005b3e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	2240      	movs	r2, #64	@ 0x40
 8005ad8:	4013      	ands	r3, r2
 8005ada:	d102      	bne.n	8005ae2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f000 fa1e 	bl	8005f28 <RTC_ByteToBcd2>
 8005aec:	0003      	movs	r3, r0
 8005aee:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	785b      	ldrb	r3, [r3, #1]
 8005af4:	0018      	movs	r0, r3
 8005af6:	f000 fa17 	bl	8005f28 <RTC_ByteToBcd2>
 8005afa:	0003      	movs	r3, r0
 8005afc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005afe:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	789b      	ldrb	r3, [r3, #2]
 8005b04:	0018      	movs	r0, r3
 8005b06:	f000 fa0f 	bl	8005f28 <RTC_ByteToBcd2>
 8005b0a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005b0c:	0022      	movs	r2, r4
 8005b0e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	78db      	ldrb	r3, [r3, #3]
 8005b14:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005b16:	431a      	orrs	r2, r3
 8005b18:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2220      	movs	r2, #32
 8005b1e:	5c9b      	ldrb	r3, [r3, r2]
 8005b20:	0018      	movs	r0, r3
 8005b22:	f000 fa01 	bl	8005f28 <RTC_ByteToBcd2>
 8005b26:	0003      	movs	r3, r0
 8005b28:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005b2a:	0022      	movs	r2, r4
 8005b2c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005b32:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	61fb      	str	r3, [r7, #28]
 8005b3c:	e022      	b.n	8005b84 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	2240      	movs	r2, #64	@ 0x40
 8005b46:	4013      	ands	r3, r2
 8005b48:	d102      	bne.n	8005b50 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	785b      	ldrb	r3, [r3, #1]
 8005b5a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005b5c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005b62:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	78db      	ldrb	r3, [r3, #3]
 8005b68:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005b6a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2120      	movs	r1, #32
 8005b70:	5c5b      	ldrb	r3, [r3, r1]
 8005b72:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005b74:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005b7a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005b80:	4313      	orrs	r3, r2
 8005b82:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	22ca      	movs	r2, #202	@ 0xca
 8005b96:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2253      	movs	r2, #83	@ 0x53
 8005b9e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ba4:	2380      	movs	r3, #128	@ 0x80
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d14c      	bne.n	8005c46 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699a      	ldr	r2, [r3, #24]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4957      	ldr	r1, [pc, #348]	@ (8005d14 <HAL_RTC_SetAlarm_IT+0x274>)
 8005bb8:	400a      	ands	r2, r1
 8005bba:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8005bcc:	f7fd fef4 	bl	80039b8 <HAL_GetTick>
 8005bd0:	0003      	movs	r3, r0
 8005bd2:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005bd4:	e016      	b.n	8005c04 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005bd6:	f7fd feef 	bl	80039b8 <HAL_GetTick>
 8005bda:	0002      	movs	r2, r0
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	1ad2      	subs	r2, r2, r3
 8005be0:	23fa      	movs	r3, #250	@ 0xfa
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d90d      	bls.n	8005c04 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	22ff      	movs	r2, #255	@ 0xff
 8005bee:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2229      	movs	r2, #41	@ 0x29
 8005bf4:	2103      	movs	r1, #3
 8005bf6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2228      	movs	r2, #40	@ 0x28
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e082      	b.n	8005d0a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	d0e2      	beq.n	8005bd6 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	69fa      	ldr	r2, [r7, #28]
 8005c16:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699a      	ldr	r2, [r3, #24]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2180      	movs	r1, #128	@ 0x80
 8005c2c:	0049      	lsls	r1, r1, #1
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	699a      	ldr	r2, [r3, #24]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2180      	movs	r1, #128	@ 0x80
 8005c3e:	0149      	lsls	r1, r1, #5
 8005c40:	430a      	orrs	r2, r1
 8005c42:	619a      	str	r2, [r3, #24]
 8005c44:	e04b      	b.n	8005cde <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	699a      	ldr	r2, [r3, #24]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4931      	ldr	r1, [pc, #196]	@ (8005d18 <HAL_RTC_SetAlarm_IT+0x278>)
 8005c52:	400a      	ands	r2, r1
 8005c54:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2102      	movs	r1, #2
 8005c62:	430a      	orrs	r2, r1
 8005c64:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8005c66:	f7fd fea7 	bl	80039b8 <HAL_GetTick>
 8005c6a:	0003      	movs	r3, r0
 8005c6c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005c6e:	e016      	b.n	8005c9e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c70:	f7fd fea2 	bl	80039b8 <HAL_GetTick>
 8005c74:	0002      	movs	r2, r0
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	1ad2      	subs	r2, r2, r3
 8005c7a:	23fa      	movs	r3, #250	@ 0xfa
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d90d      	bls.n	8005c9e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	22ff      	movs	r2, #255	@ 0xff
 8005c88:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2229      	movs	r2, #41	@ 0x29
 8005c8e:	2103      	movs	r1, #3
 8005c90:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2228      	movs	r2, #40	@ 0x28
 8005c96:	2100      	movs	r1, #0
 8005c98:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e035      	b.n	8005d0a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	d0e2      	beq.n	8005c70 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69fa      	ldr	r2, [r7, #28]
 8005cb0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	699a      	ldr	r2, [r3, #24]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2180      	movs	r1, #128	@ 0x80
 8005cc6:	0089      	lsls	r1, r1, #2
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699a      	ldr	r2, [r3, #24]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2180      	movs	r1, #128	@ 0x80
 8005cd8:	0189      	lsls	r1, r1, #6
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005cde:	4a0f      	ldr	r2, [pc, #60]	@ (8005d1c <HAL_RTC_SetAlarm_IT+0x27c>)
 8005ce0:	2380      	movs	r3, #128	@ 0x80
 8005ce2:	58d3      	ldr	r3, [r2, r3]
 8005ce4:	490d      	ldr	r1, [pc, #52]	@ (8005d1c <HAL_RTC_SetAlarm_IT+0x27c>)
 8005ce6:	2280      	movs	r2, #128	@ 0x80
 8005ce8:	0312      	lsls	r2, r2, #12
 8005cea:	4313      	orrs	r3, r2
 8005cec:	2280      	movs	r2, #128	@ 0x80
 8005cee:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	22ff      	movs	r2, #255	@ 0xff
 8005cf6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2229      	movs	r2, #41	@ 0x29
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2228      	movs	r2, #40	@ 0x28
 8005d04:	2100      	movs	r1, #0
 8005d06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	b009      	add	sp, #36	@ 0x24
 8005d10:	bd90      	pop	{r4, r7, pc}
 8005d12:	46c0      	nop			@ (mov r8, r8)
 8005d14:	fffffeff 	.word	0xfffffeff
 8005d18:	fffffdff 	.word	0xfffffdff
 8005d1c:	40021800 	.word	0x40021800

08005d20 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	2380      	movs	r3, #128	@ 0x80
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d144      	bne.n	8005dc2 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	2280      	movs	r2, #128	@ 0x80
 8005d3c:	0052      	lsls	r2, r2, #1
 8005d3e:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d46:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4e:	045b      	lsls	r3, r3, #17
 8005d50:	0c5b      	lsrs	r3, r3, #17
 8005d52:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	0c1b      	lsrs	r3, r3, #16
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	223f      	movs	r2, #63	@ 0x3f
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	0a1b      	lsrs	r3, r3, #8
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	227f      	movs	r2, #127	@ 0x7f
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	227f      	movs	r2, #127	@ 0x7f
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	0d9b      	lsrs	r3, r3, #22
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2201      	movs	r2, #1
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	0e1b      	lsrs	r3, r3, #24
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	223f      	movs	r2, #63	@ 0x3f
 8005da0:	4013      	ands	r3, r2
 8005da2:	b2d9      	uxtb	r1, r3
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2220      	movs	r2, #32
 8005da8:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	2380      	movs	r3, #128	@ 0x80
 8005dae:	05db      	lsls	r3, r3, #23
 8005db0:	401a      	ands	r2, r3
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	4a3b      	ldr	r2, [pc, #236]	@ (8005ea8 <HAL_RTC_GetAlarm+0x188>)
 8005dba:	401a      	ands	r2, r3
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	615a      	str	r2, [r3, #20]
 8005dc0:	e043      	b.n	8005e4a <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2280      	movs	r2, #128	@ 0x80
 8005dc6:	0092      	lsls	r2, r2, #2
 8005dc8:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dd0:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dd8:	045b      	lsls	r3, r3, #17
 8005dda:	0c5b      	lsrs	r3, r3, #17
 8005ddc:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	0c1b      	lsrs	r3, r3, #16
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	223f      	movs	r2, #63	@ 0x3f
 8005de6:	4013      	ands	r3, r2
 8005de8:	b2da      	uxtb	r2, r3
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	0a1b      	lsrs	r3, r3, #8
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	227f      	movs	r2, #127	@ 0x7f
 8005df6:	4013      	ands	r3, r2
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	227f      	movs	r2, #127	@ 0x7f
 8005e04:	4013      	ands	r3, r2
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	0d9b      	lsrs	r3, r3, #22
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2201      	movs	r2, #1
 8005e14:	4013      	ands	r3, r2
 8005e16:	b2da      	uxtb	r2, r3
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	0e1b      	lsrs	r3, r3, #24
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	223f      	movs	r2, #63	@ 0x3f
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	b2d9      	uxtb	r1, r3
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	2220      	movs	r2, #32
 8005e32:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	2380      	movs	r3, #128	@ 0x80
 8005e38:	05db      	lsls	r3, r3, #23
 8005e3a:	401a      	ands	r2, r3
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	4a19      	ldr	r2, [pc, #100]	@ (8005ea8 <HAL_RTC_GetAlarm+0x188>)
 8005e44:	401a      	ands	r2, r3
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d125      	bne.n	8005e9c <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	0018      	movs	r0, r3
 8005e56:	f000 f88f 	bl	8005f78 <RTC_Bcd2ToByte>
 8005e5a:	0003      	movs	r3, r0
 8005e5c:	001a      	movs	r2, r3
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	785b      	ldrb	r3, [r3, #1]
 8005e66:	0018      	movs	r0, r3
 8005e68:	f000 f886 	bl	8005f78 <RTC_Bcd2ToByte>
 8005e6c:	0003      	movs	r3, r0
 8005e6e:	001a      	movs	r2, r3
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	789b      	ldrb	r3, [r3, #2]
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f000 f87d 	bl	8005f78 <RTC_Bcd2ToByte>
 8005e7e:	0003      	movs	r3, r0
 8005e80:	001a      	movs	r2, r3
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	5c9b      	ldrb	r3, [r3, r2]
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	f000 f873 	bl	8005f78 <RTC_Bcd2ToByte>
 8005e92:	0003      	movs	r3, r0
 8005e94:	0019      	movs	r1, r3
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	b006      	add	sp, #24
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	46c0      	nop			@ (mov r8, r8)
 8005ea8:	80808080 	.word	0x80808080

08005eac <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	699a      	ldr	r2, [r3, #24]
 8005eba:	2380      	movs	r3, #128	@ 0x80
 8005ebc:	015b      	lsls	r3, r3, #5
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	d011      	beq.n	8005ee6 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ec8:	2201      	movs	r2, #1
 8005eca:	4013      	ands	r3, r2
 8005ecc:	d00b      	beq.n	8005ee6 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2101      	movs	r1, #1
 8005eda:	430a      	orrs	r2, r1
 8005edc:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	0018      	movs	r0, r3
 8005ee2:	f7fc fe19 	bl	8002b18 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	699a      	ldr	r2, [r3, #24]
 8005eec:	2380      	movs	r3, #128	@ 0x80
 8005eee:	019b      	lsls	r3, r3, #6
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	d011      	beq.n	8005f18 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005efa:	2202      	movs	r2, #2
 8005efc:	4013      	ands	r3, r2
 8005efe:	d00b      	beq.n	8005f18 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2102      	movs	r1, #2
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	0018      	movs	r0, r3
 8005f14:	f000 f873 	bl	8005ffe <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2229      	movs	r2, #41	@ 0x29
 8005f1c:	2101      	movs	r1, #1
 8005f1e:	5499      	strb	r1, [r3, r2]
}
 8005f20:	46c0      	nop			@ (mov r8, r8)
 8005f22:	46bd      	mov	sp, r7
 8005f24:	b002      	add	sp, #8
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	0002      	movs	r2, r0
 8005f30:	1dfb      	adds	r3, r7, #7
 8005f32:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005f34:	2300      	movs	r3, #0
 8005f36:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005f38:	230b      	movs	r3, #11
 8005f3a:	18fb      	adds	r3, r7, r3
 8005f3c:	1dfa      	adds	r2, r7, #7
 8005f3e:	7812      	ldrb	r2, [r2, #0]
 8005f40:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005f42:	e008      	b.n	8005f56 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3301      	adds	r3, #1
 8005f48:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005f4a:	220b      	movs	r2, #11
 8005f4c:	18bb      	adds	r3, r7, r2
 8005f4e:	18ba      	adds	r2, r7, r2
 8005f50:	7812      	ldrb	r2, [r2, #0]
 8005f52:	3a0a      	subs	r2, #10
 8005f54:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8005f56:	210b      	movs	r1, #11
 8005f58:	187b      	adds	r3, r7, r1
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2b09      	cmp	r3, #9
 8005f5e:	d8f1      	bhi.n	8005f44 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	011b      	lsls	r3, r3, #4
 8005f66:	b2da      	uxtb	r2, r3
 8005f68:	187b      	adds	r3, r7, r1
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	b2db      	uxtb	r3, r3
}
 8005f70:	0018      	movs	r0, r3
 8005f72:	46bd      	mov	sp, r7
 8005f74:	b004      	add	sp, #16
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	0002      	movs	r2, r0
 8005f80:	1dfb      	adds	r3, r7, #7
 8005f82:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005f84:	1dfb      	adds	r3, r7, #7
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	091b      	lsrs	r3, r3, #4
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	001a      	movs	r2, r3
 8005f8e:	0013      	movs	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	189b      	adds	r3, r3, r2
 8005f94:	005b      	lsls	r3, r3, #1
 8005f96:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	1dfb      	adds	r3, r7, #7
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	210f      	movs	r1, #15
 8005fa2:	400b      	ands	r3, r1
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	18d3      	adds	r3, r2, r3
 8005fa8:	b2db      	uxtb	r3, r3
}
 8005faa:	0018      	movs	r0, r3
 8005fac:	46bd      	mov	sp, r7
 8005fae:	b004      	add	sp, #16
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b082      	sub	sp, #8
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fc0:	2204      	movs	r2, #4
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	d00b      	beq.n	8005fde <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2104      	movs	r1, #4
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	0018      	movs	r0, r3
 8005fda:	f000 f808 	bl	8005fee <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2229      	movs	r2, #41	@ 0x29
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	5499      	strb	r1, [r3, r2]
}
 8005fe6:	46c0      	nop			@ (mov r8, r8)
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	b002      	add	sp, #8
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b082      	sub	sp, #8
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8005ff6:	46c0      	nop			@ (mov r8, r8)
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	b002      	add	sp, #8
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006006:	46c0      	nop			@ (mov r8, r8)
 8006008:	46bd      	mov	sp, r7
 800600a:	b002      	add	sp, #8
 800600c:	bd80      	pop	{r7, pc}
	...

08006010 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e0a8      	b.n	8006174 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006026:	2b00      	cmp	r3, #0
 8006028:	d109      	bne.n	800603e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	2382      	movs	r3, #130	@ 0x82
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	429a      	cmp	r2, r3
 8006034:	d009      	beq.n	800604a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	61da      	str	r2, [r3, #28]
 800603c:	e005      	b.n	800604a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	225d      	movs	r2, #93	@ 0x5d
 8006054:	5c9b      	ldrb	r3, [r3, r2]
 8006056:	b2db      	uxtb	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	d107      	bne.n	800606c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	225c      	movs	r2, #92	@ 0x5c
 8006060:	2100      	movs	r1, #0
 8006062:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	0018      	movs	r0, r3
 8006068:	f7fd fa4a 	bl	8003500 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	225d      	movs	r2, #93	@ 0x5d
 8006070:	2102      	movs	r1, #2
 8006072:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2140      	movs	r1, #64	@ 0x40
 8006080:	438a      	bics	r2, r1
 8006082:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	23e0      	movs	r3, #224	@ 0xe0
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	429a      	cmp	r2, r3
 800608e:	d902      	bls.n	8006096 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006090:	2300      	movs	r3, #0
 8006092:	60fb      	str	r3, [r7, #12]
 8006094:	e002      	b.n	800609c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006096:	2380      	movs	r3, #128	@ 0x80
 8006098:	015b      	lsls	r3, r3, #5
 800609a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68da      	ldr	r2, [r3, #12]
 80060a0:	23f0      	movs	r3, #240	@ 0xf0
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d008      	beq.n	80060ba <HAL_SPI_Init+0xaa>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	23e0      	movs	r3, #224	@ 0xe0
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d002      	beq.n	80060ba <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	2382      	movs	r3, #130	@ 0x82
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	401a      	ands	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6899      	ldr	r1, [r3, #8]
 80060c8:	2384      	movs	r3, #132	@ 0x84
 80060ca:	021b      	lsls	r3, r3, #8
 80060cc:	400b      	ands	r3, r1
 80060ce:	431a      	orrs	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	2102      	movs	r1, #2
 80060d6:	400b      	ands	r3, r1
 80060d8:	431a      	orrs	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	2101      	movs	r1, #1
 80060e0:	400b      	ands	r3, r1
 80060e2:	431a      	orrs	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6999      	ldr	r1, [r3, #24]
 80060e8:	2380      	movs	r3, #128	@ 0x80
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	400b      	ands	r3, r1
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	2138      	movs	r1, #56	@ 0x38
 80060f6:	400b      	ands	r3, r1
 80060f8:	431a      	orrs	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	2180      	movs	r1, #128	@ 0x80
 8006100:	400b      	ands	r3, r1
 8006102:	431a      	orrs	r2, r3
 8006104:	0011      	movs	r1, r2
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800610a:	2380      	movs	r3, #128	@ 0x80
 800610c:	019b      	lsls	r3, r3, #6
 800610e:	401a      	ands	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	0c1b      	lsrs	r3, r3, #16
 800611e:	2204      	movs	r2, #4
 8006120:	401a      	ands	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006126:	2110      	movs	r1, #16
 8006128:	400b      	ands	r3, r1
 800612a:	431a      	orrs	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006130:	2108      	movs	r1, #8
 8006132:	400b      	ands	r3, r1
 8006134:	431a      	orrs	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68d9      	ldr	r1, [r3, #12]
 800613a:	23f0      	movs	r3, #240	@ 0xf0
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	400b      	ands	r3, r1
 8006140:	431a      	orrs	r2, r3
 8006142:	0011      	movs	r1, r2
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	2380      	movs	r3, #128	@ 0x80
 8006148:	015b      	lsls	r3, r3, #5
 800614a:	401a      	ands	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	430a      	orrs	r2, r1
 8006152:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	69da      	ldr	r2, [r3, #28]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4907      	ldr	r1, [pc, #28]	@ (800617c <HAL_SPI_Init+0x16c>)
 8006160:	400a      	ands	r2, r1
 8006162:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	225d      	movs	r2, #93	@ 0x5d
 800616e:	2101      	movs	r1, #1
 8006170:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	0018      	movs	r0, r3
 8006176:	46bd      	mov	sp, r7
 8006178:	b004      	add	sp, #16
 800617a:	bd80      	pop	{r7, pc}
 800617c:	fffff7ff 	.word	0xfffff7ff

08006180 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b088      	sub	sp, #32
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	603b      	str	r3, [r7, #0]
 800618c:	1dbb      	adds	r3, r7, #6
 800618e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006190:	231f      	movs	r3, #31
 8006192:	18fb      	adds	r3, r7, r3
 8006194:	2200      	movs	r2, #0
 8006196:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	225c      	movs	r2, #92	@ 0x5c
 800619c:	5c9b      	ldrb	r3, [r3, r2]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d101      	bne.n	80061a6 <HAL_SPI_Transmit+0x26>
 80061a2:	2302      	movs	r3, #2
 80061a4:	e147      	b.n	8006436 <HAL_SPI_Transmit+0x2b6>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	225c      	movs	r2, #92	@ 0x5c
 80061aa:	2101      	movs	r1, #1
 80061ac:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061ae:	f7fd fc03 	bl	80039b8 <HAL_GetTick>
 80061b2:	0003      	movs	r3, r0
 80061b4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80061b6:	2316      	movs	r3, #22
 80061b8:	18fb      	adds	r3, r7, r3
 80061ba:	1dba      	adds	r2, r7, #6
 80061bc:	8812      	ldrh	r2, [r2, #0]
 80061be:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	225d      	movs	r2, #93	@ 0x5d
 80061c4:	5c9b      	ldrb	r3, [r3, r2]
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d004      	beq.n	80061d6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80061cc:	231f      	movs	r3, #31
 80061ce:	18fb      	adds	r3, r7, r3
 80061d0:	2202      	movs	r2, #2
 80061d2:	701a      	strb	r2, [r3, #0]
    goto error;
 80061d4:	e128      	b.n	8006428 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d003      	beq.n	80061e4 <HAL_SPI_Transmit+0x64>
 80061dc:	1dbb      	adds	r3, r7, #6
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d104      	bne.n	80061ee <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80061e4:	231f      	movs	r3, #31
 80061e6:	18fb      	adds	r3, r7, r3
 80061e8:	2201      	movs	r2, #1
 80061ea:	701a      	strb	r2, [r3, #0]
    goto error;
 80061ec:	e11c      	b.n	8006428 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	225d      	movs	r2, #93	@ 0x5d
 80061f2:	2103      	movs	r1, #3
 80061f4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	1dba      	adds	r2, r7, #6
 8006206:	8812      	ldrh	r2, [r2, #0]
 8006208:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	1dba      	adds	r2, r7, #6
 800620e:	8812      	ldrh	r2, [r2, #0]
 8006210:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2244      	movs	r2, #68	@ 0x44
 800621c:	2100      	movs	r1, #0
 800621e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2246      	movs	r2, #70	@ 0x46
 8006224:	2100      	movs	r1, #0
 8006226:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	2380      	movs	r3, #128	@ 0x80
 800623a:	021b      	lsls	r3, r3, #8
 800623c:	429a      	cmp	r2, r3
 800623e:	d110      	bne.n	8006262 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2140      	movs	r1, #64	@ 0x40
 800624c:	438a      	bics	r2, r1
 800624e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2180      	movs	r1, #128	@ 0x80
 800625c:	01c9      	lsls	r1, r1, #7
 800625e:	430a      	orrs	r2, r1
 8006260:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2240      	movs	r2, #64	@ 0x40
 800626a:	4013      	ands	r3, r2
 800626c:	2b40      	cmp	r3, #64	@ 0x40
 800626e:	d007      	beq.n	8006280 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2140      	movs	r1, #64	@ 0x40
 800627c:	430a      	orrs	r2, r1
 800627e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	68da      	ldr	r2, [r3, #12]
 8006284:	23e0      	movs	r3, #224	@ 0xe0
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	429a      	cmp	r2, r3
 800628a:	d952      	bls.n	8006332 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d004      	beq.n	800629e <HAL_SPI_Transmit+0x11e>
 8006294:	2316      	movs	r3, #22
 8006296:	18fb      	adds	r3, r7, r3
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d143      	bne.n	8006326 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a2:	881a      	ldrh	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ae:	1c9a      	adds	r2, r3, #2
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	3b01      	subs	r3, #1
 80062bc:	b29a      	uxth	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80062c2:	e030      	b.n	8006326 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	2202      	movs	r2, #2
 80062cc:	4013      	ands	r3, r2
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d112      	bne.n	80062f8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d6:	881a      	ldrh	r2, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e2:	1c9a      	adds	r2, r3, #2
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	3b01      	subs	r3, #1
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062f6:	e016      	b.n	8006326 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062f8:	f7fd fb5e 	bl	80039b8 <HAL_GetTick>
 80062fc:	0002      	movs	r2, r0
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	429a      	cmp	r2, r3
 8006306:	d802      	bhi.n	800630e <HAL_SPI_Transmit+0x18e>
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	3301      	adds	r3, #1
 800630c:	d102      	bne.n	8006314 <HAL_SPI_Transmit+0x194>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d108      	bne.n	8006326 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8006314:	231f      	movs	r3, #31
 8006316:	18fb      	adds	r3, r7, r3
 8006318:	2203      	movs	r2, #3
 800631a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	225d      	movs	r2, #93	@ 0x5d
 8006320:	2101      	movs	r1, #1
 8006322:	5499      	strb	r1, [r3, r2]
          goto error;
 8006324:	e080      	b.n	8006428 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800632a:	b29b      	uxth	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1c9      	bne.n	80062c4 <HAL_SPI_Transmit+0x144>
 8006330:	e053      	b.n	80063da <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d004      	beq.n	8006344 <HAL_SPI_Transmit+0x1c4>
 800633a:	2316      	movs	r3, #22
 800633c:	18fb      	adds	r3, r7, r3
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d145      	bne.n	80063d0 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	330c      	adds	r3, #12
 800634e:	7812      	ldrb	r2, [r2, #0]
 8006350:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006360:	b29b      	uxth	r3, r3
 8006362:	3b01      	subs	r3, #1
 8006364:	b29a      	uxth	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800636a:	e031      	b.n	80063d0 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	2202      	movs	r2, #2
 8006374:	4013      	ands	r3, r2
 8006376:	2b02      	cmp	r3, #2
 8006378:	d113      	bne.n	80063a2 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	330c      	adds	r3, #12
 8006384:	7812      	ldrb	r2, [r2, #0]
 8006386:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800638c:	1c5a      	adds	r2, r3, #1
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006396:	b29b      	uxth	r3, r3
 8006398:	3b01      	subs	r3, #1
 800639a:	b29a      	uxth	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80063a0:	e016      	b.n	80063d0 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063a2:	f7fd fb09 	bl	80039b8 <HAL_GetTick>
 80063a6:	0002      	movs	r2, r0
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d802      	bhi.n	80063b8 <HAL_SPI_Transmit+0x238>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	3301      	adds	r3, #1
 80063b6:	d102      	bne.n	80063be <HAL_SPI_Transmit+0x23e>
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d108      	bne.n	80063d0 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80063be:	231f      	movs	r3, #31
 80063c0:	18fb      	adds	r3, r7, r3
 80063c2:	2203      	movs	r2, #3
 80063c4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	225d      	movs	r2, #93	@ 0x5d
 80063ca:	2101      	movs	r1, #1
 80063cc:	5499      	strb	r1, [r3, r2]
          goto error;
 80063ce:	e02b      	b.n	8006428 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1c8      	bne.n	800636c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	6839      	ldr	r1, [r7, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	0018      	movs	r0, r3
 80063e2:	f000 f95d 	bl	80066a0 <SPI_EndRxTxTransaction>
 80063e6:	1e03      	subs	r3, r0, #0
 80063e8:	d002      	beq.n	80063f0 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2220      	movs	r2, #32
 80063ee:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10a      	bne.n	800640e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063f8:	2300      	movs	r3, #0
 80063fa:	613b      	str	r3, [r7, #16]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	613b      	str	r3, [r7, #16]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	613b      	str	r3, [r7, #16]
 800640c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006412:	2b00      	cmp	r3, #0
 8006414:	d004      	beq.n	8006420 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8006416:	231f      	movs	r3, #31
 8006418:	18fb      	adds	r3, r7, r3
 800641a:	2201      	movs	r2, #1
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	e003      	b.n	8006428 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	225d      	movs	r2, #93	@ 0x5d
 8006424:	2101      	movs	r1, #1
 8006426:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	225c      	movs	r2, #92	@ 0x5c
 800642c:	2100      	movs	r1, #0
 800642e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006430:	231f      	movs	r3, #31
 8006432:	18fb      	adds	r3, r7, r3
 8006434:	781b      	ldrb	r3, [r3, #0]
}
 8006436:	0018      	movs	r0, r3
 8006438:	46bd      	mov	sp, r7
 800643a:	b008      	add	sp, #32
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	603b      	str	r3, [r7, #0]
 800644c:	1dfb      	adds	r3, r7, #7
 800644e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006450:	f7fd fab2 	bl	80039b8 <HAL_GetTick>
 8006454:	0002      	movs	r2, r0
 8006456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006458:	1a9b      	subs	r3, r3, r2
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	18d3      	adds	r3, r2, r3
 800645e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006460:	f7fd faaa 	bl	80039b8 <HAL_GetTick>
 8006464:	0003      	movs	r3, r0
 8006466:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006468:	4b3a      	ldr	r3, [pc, #232]	@ (8006554 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	015b      	lsls	r3, r3, #5
 800646e:	0d1b      	lsrs	r3, r3, #20
 8006470:	69fa      	ldr	r2, [r7, #28]
 8006472:	4353      	muls	r3, r2
 8006474:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006476:	e058      	b.n	800652a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	3301      	adds	r3, #1
 800647c:	d055      	beq.n	800652a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800647e:	f7fd fa9b 	bl	80039b8 <HAL_GetTick>
 8006482:	0002      	movs	r2, r0
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	69fa      	ldr	r2, [r7, #28]
 800648a:	429a      	cmp	r2, r3
 800648c:	d902      	bls.n	8006494 <SPI_WaitFlagStateUntilTimeout+0x54>
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d142      	bne.n	800651a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	21e0      	movs	r1, #224	@ 0xe0
 80064a0:	438a      	bics	r2, r1
 80064a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	2382      	movs	r3, #130	@ 0x82
 80064aa:	005b      	lsls	r3, r3, #1
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d113      	bne.n	80064d8 <SPI_WaitFlagStateUntilTimeout+0x98>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	689a      	ldr	r2, [r3, #8]
 80064b4:	2380      	movs	r3, #128	@ 0x80
 80064b6:	021b      	lsls	r3, r3, #8
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d005      	beq.n	80064c8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	689a      	ldr	r2, [r3, #8]
 80064c0:	2380      	movs	r3, #128	@ 0x80
 80064c2:	00db      	lsls	r3, r3, #3
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d107      	bne.n	80064d8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2140      	movs	r1, #64	@ 0x40
 80064d4:	438a      	bics	r2, r1
 80064d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064dc:	2380      	movs	r3, #128	@ 0x80
 80064de:	019b      	lsls	r3, r3, #6
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d110      	bne.n	8006506 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	491a      	ldr	r1, [pc, #104]	@ (8006558 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80064f0:	400a      	ands	r2, r1
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2180      	movs	r1, #128	@ 0x80
 8006500:	0189      	lsls	r1, r1, #6
 8006502:	430a      	orrs	r2, r1
 8006504:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	225d      	movs	r2, #93	@ 0x5d
 800650a:	2101      	movs	r1, #1
 800650c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	225c      	movs	r2, #92	@ 0x5c
 8006512:	2100      	movs	r1, #0
 8006514:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e017      	b.n	800654a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006520:	2300      	movs	r3, #0
 8006522:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	3b01      	subs	r3, #1
 8006528:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	4013      	ands	r3, r2
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	425a      	negs	r2, r3
 800653a:	4153      	adcs	r3, r2
 800653c:	b2db      	uxtb	r3, r3
 800653e:	001a      	movs	r2, r3
 8006540:	1dfb      	adds	r3, r7, #7
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	429a      	cmp	r2, r3
 8006546:	d197      	bne.n	8006478 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	0018      	movs	r0, r3
 800654c:	46bd      	mov	sp, r7
 800654e:	b008      	add	sp, #32
 8006550:	bd80      	pop	{r7, pc}
 8006552:	46c0      	nop			@ (mov r8, r8)
 8006554:	200004f0 	.word	0x200004f0
 8006558:	ffffdfff 	.word	0xffffdfff

0800655c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b08a      	sub	sp, #40	@ 0x28
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800656a:	2317      	movs	r3, #23
 800656c:	18fb      	adds	r3, r7, r3
 800656e:	2200      	movs	r2, #0
 8006570:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006572:	f7fd fa21 	bl	80039b8 <HAL_GetTick>
 8006576:	0002      	movs	r2, r0
 8006578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657a:	1a9b      	subs	r3, r3, r2
 800657c:	683a      	ldr	r2, [r7, #0]
 800657e:	18d3      	adds	r3, r2, r3
 8006580:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006582:	f7fd fa19 	bl	80039b8 <HAL_GetTick>
 8006586:	0003      	movs	r3, r0
 8006588:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	330c      	adds	r3, #12
 8006590:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006592:	4b41      	ldr	r3, [pc, #260]	@ (8006698 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	0013      	movs	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	189b      	adds	r3, r3, r2
 800659c:	00da      	lsls	r2, r3, #3
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	0d1b      	lsrs	r3, r3, #20
 80065a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065a4:	4353      	muls	r3, r2
 80065a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80065a8:	e068      	b.n	800667c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	23c0      	movs	r3, #192	@ 0xc0
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d10a      	bne.n	80065ca <SPI_WaitFifoStateUntilTimeout+0x6e>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d107      	bne.n	80065ca <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	2117      	movs	r1, #23
 80065c2:	187b      	adds	r3, r7, r1
 80065c4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80065c6:	187b      	adds	r3, r7, r1
 80065c8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	3301      	adds	r3, #1
 80065ce:	d055      	beq.n	800667c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065d0:	f7fd f9f2 	bl	80039b8 <HAL_GetTick>
 80065d4:	0002      	movs	r2, r0
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065dc:	429a      	cmp	r2, r3
 80065de:	d902      	bls.n	80065e6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80065e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d142      	bne.n	800666c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	21e0      	movs	r1, #224	@ 0xe0
 80065f2:	438a      	bics	r2, r1
 80065f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	2382      	movs	r3, #130	@ 0x82
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	429a      	cmp	r2, r3
 8006600:	d113      	bne.n	800662a <SPI_WaitFifoStateUntilTimeout+0xce>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	689a      	ldr	r2, [r3, #8]
 8006606:	2380      	movs	r3, #128	@ 0x80
 8006608:	021b      	lsls	r3, r3, #8
 800660a:	429a      	cmp	r2, r3
 800660c:	d005      	beq.n	800661a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	689a      	ldr	r2, [r3, #8]
 8006612:	2380      	movs	r3, #128	@ 0x80
 8006614:	00db      	lsls	r3, r3, #3
 8006616:	429a      	cmp	r2, r3
 8006618:	d107      	bne.n	800662a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2140      	movs	r1, #64	@ 0x40
 8006626:	438a      	bics	r2, r1
 8006628:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800662e:	2380      	movs	r3, #128	@ 0x80
 8006630:	019b      	lsls	r3, r3, #6
 8006632:	429a      	cmp	r2, r3
 8006634:	d110      	bne.n	8006658 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4916      	ldr	r1, [pc, #88]	@ (800669c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006642:	400a      	ands	r2, r1
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2180      	movs	r1, #128	@ 0x80
 8006652:	0189      	lsls	r1, r1, #6
 8006654:	430a      	orrs	r2, r1
 8006656:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	225d      	movs	r2, #93	@ 0x5d
 800665c:	2101      	movs	r1, #1
 800665e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	225c      	movs	r2, #92	@ 0x5c
 8006664:	2100      	movs	r1, #0
 8006666:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e010      	b.n	800668e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006672:	2300      	movs	r3, #0
 8006674:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	3b01      	subs	r3, #1
 800667a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	4013      	ands	r3, r2
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	429a      	cmp	r2, r3
 800668a:	d18e      	bne.n	80065aa <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	0018      	movs	r0, r3
 8006690:	46bd      	mov	sp, r7
 8006692:	b00a      	add	sp, #40	@ 0x28
 8006694:	bd80      	pop	{r7, pc}
 8006696:	46c0      	nop			@ (mov r8, r8)
 8006698:	200004f0 	.word	0x200004f0
 800669c:	ffffdfff 	.word	0xffffdfff

080066a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af02      	add	r7, sp, #8
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	23c0      	movs	r3, #192	@ 0xc0
 80066b0:	0159      	lsls	r1, r3, #5
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	0013      	movs	r3, r2
 80066ba:	2200      	movs	r2, #0
 80066bc:	f7ff ff4e 	bl	800655c <SPI_WaitFifoStateUntilTimeout>
 80066c0:	1e03      	subs	r3, r0, #0
 80066c2:	d007      	beq.n	80066d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066c8:	2220      	movs	r2, #32
 80066ca:	431a      	orrs	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e027      	b.n	8006724 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	0013      	movs	r3, r2
 80066de:	2200      	movs	r2, #0
 80066e0:	2180      	movs	r1, #128	@ 0x80
 80066e2:	f7ff fead 	bl	8006440 <SPI_WaitFlagStateUntilTimeout>
 80066e6:	1e03      	subs	r3, r0, #0
 80066e8:	d007      	beq.n	80066fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066ee:	2220      	movs	r2, #32
 80066f0:	431a      	orrs	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e014      	b.n	8006724 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	23c0      	movs	r3, #192	@ 0xc0
 80066fe:	00d9      	lsls	r1, r3, #3
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	0013      	movs	r3, r2
 8006708:	2200      	movs	r2, #0
 800670a:	f7ff ff27 	bl	800655c <SPI_WaitFifoStateUntilTimeout>
 800670e:	1e03      	subs	r3, r0, #0
 8006710:	d007      	beq.n	8006722 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006716:	2220      	movs	r2, #32
 8006718:	431a      	orrs	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e000      	b.n	8006724 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	0018      	movs	r0, r3
 8006726:	46bd      	mov	sp, r7
 8006728:	b004      	add	sp, #16
 800672a:	bd80      	pop	{r7, pc}

0800672c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e04a      	b.n	80067d4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	223d      	movs	r2, #61	@ 0x3d
 8006742:	5c9b      	ldrb	r3, [r3, r2]
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d107      	bne.n	800675a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	223c      	movs	r2, #60	@ 0x3c
 800674e:	2100      	movs	r1, #0
 8006750:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	0018      	movs	r0, r3
 8006756:	f7fc ff1d 	bl	8003594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	223d      	movs	r2, #61	@ 0x3d
 800675e:	2102      	movs	r1, #2
 8006760:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3304      	adds	r3, #4
 800676a:	0019      	movs	r1, r3
 800676c:	0010      	movs	r0, r2
 800676e:	f000 fa85 	bl	8006c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2248      	movs	r2, #72	@ 0x48
 8006776:	2101      	movs	r1, #1
 8006778:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	223e      	movs	r2, #62	@ 0x3e
 800677e:	2101      	movs	r1, #1
 8006780:	5499      	strb	r1, [r3, r2]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	223f      	movs	r2, #63	@ 0x3f
 8006786:	2101      	movs	r1, #1
 8006788:	5499      	strb	r1, [r3, r2]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2240      	movs	r2, #64	@ 0x40
 800678e:	2101      	movs	r1, #1
 8006790:	5499      	strb	r1, [r3, r2]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2241      	movs	r2, #65	@ 0x41
 8006796:	2101      	movs	r1, #1
 8006798:	5499      	strb	r1, [r3, r2]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2242      	movs	r2, #66	@ 0x42
 800679e:	2101      	movs	r1, #1
 80067a0:	5499      	strb	r1, [r3, r2]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2243      	movs	r2, #67	@ 0x43
 80067a6:	2101      	movs	r1, #1
 80067a8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2244      	movs	r2, #68	@ 0x44
 80067ae:	2101      	movs	r1, #1
 80067b0:	5499      	strb	r1, [r3, r2]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2245      	movs	r2, #69	@ 0x45
 80067b6:	2101      	movs	r1, #1
 80067b8:	5499      	strb	r1, [r3, r2]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2246      	movs	r2, #70	@ 0x46
 80067be:	2101      	movs	r1, #1
 80067c0:	5499      	strb	r1, [r3, r2]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2247      	movs	r2, #71	@ 0x47
 80067c6:	2101      	movs	r1, #1
 80067c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	223d      	movs	r2, #61	@ 0x3d
 80067ce:	2101      	movs	r1, #1
 80067d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	0018      	movs	r0, r3
 80067d6:	46bd      	mov	sp, r7
 80067d8:	b002      	add	sp, #8
 80067da:	bd80      	pop	{r7, pc}

080067dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e04a      	b.n	8006884 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	223d      	movs	r2, #61	@ 0x3d
 80067f2:	5c9b      	ldrb	r3, [r3, r2]
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d107      	bne.n	800680a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	223c      	movs	r2, #60	@ 0x3c
 80067fe:	2100      	movs	r1, #0
 8006800:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	0018      	movs	r0, r3
 8006806:	f000 f841 	bl	800688c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	223d      	movs	r2, #61	@ 0x3d
 800680e:	2102      	movs	r1, #2
 8006810:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3304      	adds	r3, #4
 800681a:	0019      	movs	r1, r3
 800681c:	0010      	movs	r0, r2
 800681e:	f000 fa2d 	bl	8006c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2248      	movs	r2, #72	@ 0x48
 8006826:	2101      	movs	r1, #1
 8006828:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	223e      	movs	r2, #62	@ 0x3e
 800682e:	2101      	movs	r1, #1
 8006830:	5499      	strb	r1, [r3, r2]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	223f      	movs	r2, #63	@ 0x3f
 8006836:	2101      	movs	r1, #1
 8006838:	5499      	strb	r1, [r3, r2]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2240      	movs	r2, #64	@ 0x40
 800683e:	2101      	movs	r1, #1
 8006840:	5499      	strb	r1, [r3, r2]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2241      	movs	r2, #65	@ 0x41
 8006846:	2101      	movs	r1, #1
 8006848:	5499      	strb	r1, [r3, r2]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2242      	movs	r2, #66	@ 0x42
 800684e:	2101      	movs	r1, #1
 8006850:	5499      	strb	r1, [r3, r2]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2243      	movs	r2, #67	@ 0x43
 8006856:	2101      	movs	r1, #1
 8006858:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2244      	movs	r2, #68	@ 0x44
 800685e:	2101      	movs	r1, #1
 8006860:	5499      	strb	r1, [r3, r2]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2245      	movs	r2, #69	@ 0x45
 8006866:	2101      	movs	r1, #1
 8006868:	5499      	strb	r1, [r3, r2]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2246      	movs	r2, #70	@ 0x46
 800686e:	2101      	movs	r1, #1
 8006870:	5499      	strb	r1, [r3, r2]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2247      	movs	r2, #71	@ 0x47
 8006876:	2101      	movs	r1, #1
 8006878:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	223d      	movs	r2, #61	@ 0x3d
 800687e:	2101      	movs	r1, #1
 8006880:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	0018      	movs	r0, r3
 8006886:	46bd      	mov	sp, r7
 8006888:	b002      	add	sp, #8
 800688a:	bd80      	pop	{r7, pc}

0800688c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006894:	46c0      	nop			@ (mov r8, r8)
 8006896:	46bd      	mov	sp, r7
 8006898:	b002      	add	sp, #8
 800689a:	bd80      	pop	{r7, pc}

0800689c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d108      	bne.n	80068be <HAL_TIM_PWM_Start+0x22>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	223e      	movs	r2, #62	@ 0x3e
 80068b0:	5c9b      	ldrb	r3, [r3, r2]
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	3b01      	subs	r3, #1
 80068b6:	1e5a      	subs	r2, r3, #1
 80068b8:	4193      	sbcs	r3, r2
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	e037      	b.n	800692e <HAL_TIM_PWM_Start+0x92>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b04      	cmp	r3, #4
 80068c2:	d108      	bne.n	80068d6 <HAL_TIM_PWM_Start+0x3a>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	223f      	movs	r2, #63	@ 0x3f
 80068c8:	5c9b      	ldrb	r3, [r3, r2]
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	3b01      	subs	r3, #1
 80068ce:	1e5a      	subs	r2, r3, #1
 80068d0:	4193      	sbcs	r3, r2
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	e02b      	b.n	800692e <HAL_TIM_PWM_Start+0x92>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b08      	cmp	r3, #8
 80068da:	d108      	bne.n	80068ee <HAL_TIM_PWM_Start+0x52>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2240      	movs	r2, #64	@ 0x40
 80068e0:	5c9b      	ldrb	r3, [r3, r2]
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	3b01      	subs	r3, #1
 80068e6:	1e5a      	subs	r2, r3, #1
 80068e8:	4193      	sbcs	r3, r2
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	e01f      	b.n	800692e <HAL_TIM_PWM_Start+0x92>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2b0c      	cmp	r3, #12
 80068f2:	d108      	bne.n	8006906 <HAL_TIM_PWM_Start+0x6a>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2241      	movs	r2, #65	@ 0x41
 80068f8:	5c9b      	ldrb	r3, [r3, r2]
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	3b01      	subs	r3, #1
 80068fe:	1e5a      	subs	r2, r3, #1
 8006900:	4193      	sbcs	r3, r2
 8006902:	b2db      	uxtb	r3, r3
 8006904:	e013      	b.n	800692e <HAL_TIM_PWM_Start+0x92>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	2b10      	cmp	r3, #16
 800690a:	d108      	bne.n	800691e <HAL_TIM_PWM_Start+0x82>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2242      	movs	r2, #66	@ 0x42
 8006910:	5c9b      	ldrb	r3, [r3, r2]
 8006912:	b2db      	uxtb	r3, r3
 8006914:	3b01      	subs	r3, #1
 8006916:	1e5a      	subs	r2, r3, #1
 8006918:	4193      	sbcs	r3, r2
 800691a:	b2db      	uxtb	r3, r3
 800691c:	e007      	b.n	800692e <HAL_TIM_PWM_Start+0x92>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2243      	movs	r2, #67	@ 0x43
 8006922:	5c9b      	ldrb	r3, [r3, r2]
 8006924:	b2db      	uxtb	r3, r3
 8006926:	3b01      	subs	r3, #1
 8006928:	1e5a      	subs	r2, r3, #1
 800692a:	4193      	sbcs	r3, r2
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e090      	b.n	8006a58 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d104      	bne.n	8006946 <HAL_TIM_PWM_Start+0xaa>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	223e      	movs	r2, #62	@ 0x3e
 8006940:	2102      	movs	r1, #2
 8006942:	5499      	strb	r1, [r3, r2]
 8006944:	e023      	b.n	800698e <HAL_TIM_PWM_Start+0xf2>
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2b04      	cmp	r3, #4
 800694a:	d104      	bne.n	8006956 <HAL_TIM_PWM_Start+0xba>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	223f      	movs	r2, #63	@ 0x3f
 8006950:	2102      	movs	r1, #2
 8006952:	5499      	strb	r1, [r3, r2]
 8006954:	e01b      	b.n	800698e <HAL_TIM_PWM_Start+0xf2>
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b08      	cmp	r3, #8
 800695a:	d104      	bne.n	8006966 <HAL_TIM_PWM_Start+0xca>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2240      	movs	r2, #64	@ 0x40
 8006960:	2102      	movs	r1, #2
 8006962:	5499      	strb	r1, [r3, r2]
 8006964:	e013      	b.n	800698e <HAL_TIM_PWM_Start+0xf2>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b0c      	cmp	r3, #12
 800696a:	d104      	bne.n	8006976 <HAL_TIM_PWM_Start+0xda>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2241      	movs	r2, #65	@ 0x41
 8006970:	2102      	movs	r1, #2
 8006972:	5499      	strb	r1, [r3, r2]
 8006974:	e00b      	b.n	800698e <HAL_TIM_PWM_Start+0xf2>
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b10      	cmp	r3, #16
 800697a:	d104      	bne.n	8006986 <HAL_TIM_PWM_Start+0xea>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2242      	movs	r2, #66	@ 0x42
 8006980:	2102      	movs	r1, #2
 8006982:	5499      	strb	r1, [r3, r2]
 8006984:	e003      	b.n	800698e <HAL_TIM_PWM_Start+0xf2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2243      	movs	r2, #67	@ 0x43
 800698a:	2102      	movs	r1, #2
 800698c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	2201      	movs	r2, #1
 8006996:	0018      	movs	r0, r3
 8006998:	f000 fccc 	bl	8007334 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a2f      	ldr	r2, [pc, #188]	@ (8006a60 <HAL_TIM_PWM_Start+0x1c4>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d00e      	beq.n	80069c4 <HAL_TIM_PWM_Start+0x128>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a2e      	ldr	r2, [pc, #184]	@ (8006a64 <HAL_TIM_PWM_Start+0x1c8>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d009      	beq.n	80069c4 <HAL_TIM_PWM_Start+0x128>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a2c      	ldr	r2, [pc, #176]	@ (8006a68 <HAL_TIM_PWM_Start+0x1cc>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d004      	beq.n	80069c4 <HAL_TIM_PWM_Start+0x128>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a2b      	ldr	r2, [pc, #172]	@ (8006a6c <HAL_TIM_PWM_Start+0x1d0>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d101      	bne.n	80069c8 <HAL_TIM_PWM_Start+0x12c>
 80069c4:	2301      	movs	r3, #1
 80069c6:	e000      	b.n	80069ca <HAL_TIM_PWM_Start+0x12e>
 80069c8:	2300      	movs	r3, #0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d008      	beq.n	80069e0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2180      	movs	r1, #128	@ 0x80
 80069da:	0209      	lsls	r1, r1, #8
 80069dc:	430a      	orrs	r2, r1
 80069de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a1e      	ldr	r2, [pc, #120]	@ (8006a60 <HAL_TIM_PWM_Start+0x1c4>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d014      	beq.n	8006a14 <HAL_TIM_PWM_Start+0x178>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	2380      	movs	r3, #128	@ 0x80
 80069f0:	05db      	lsls	r3, r3, #23
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d00e      	beq.n	8006a14 <HAL_TIM_PWM_Start+0x178>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a1d      	ldr	r2, [pc, #116]	@ (8006a70 <HAL_TIM_PWM_Start+0x1d4>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d009      	beq.n	8006a14 <HAL_TIM_PWM_Start+0x178>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a1b      	ldr	r2, [pc, #108]	@ (8006a74 <HAL_TIM_PWM_Start+0x1d8>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d004      	beq.n	8006a14 <HAL_TIM_PWM_Start+0x178>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a15      	ldr	r2, [pc, #84]	@ (8006a64 <HAL_TIM_PWM_Start+0x1c8>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d116      	bne.n	8006a42 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	4a17      	ldr	r2, [pc, #92]	@ (8006a78 <HAL_TIM_PWM_Start+0x1dc>)
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2b06      	cmp	r3, #6
 8006a24:	d016      	beq.n	8006a54 <HAL_TIM_PWM_Start+0x1b8>
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	2380      	movs	r3, #128	@ 0x80
 8006a2a:	025b      	lsls	r3, r3, #9
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d011      	beq.n	8006a54 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a40:	e008      	b.n	8006a54 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	601a      	str	r2, [r3, #0]
 8006a52:	e000      	b.n	8006a56 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a54:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	0018      	movs	r0, r3
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	b004      	add	sp, #16
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	40012c00 	.word	0x40012c00
 8006a64:	40014000 	.word	0x40014000
 8006a68:	40014400 	.word	0x40014400
 8006a6c:	40014800 	.word	0x40014800
 8006a70:	40000400 	.word	0x40000400
 8006a74:	40000800 	.word	0x40000800
 8006a78:	00010007 	.word	0x00010007

08006a7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a88:	2317      	movs	r3, #23
 8006a8a:	18fb      	adds	r3, r7, r3
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	223c      	movs	r2, #60	@ 0x3c
 8006a94:	5c9b      	ldrb	r3, [r3, r2]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d101      	bne.n	8006a9e <HAL_TIM_PWM_ConfigChannel+0x22>
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	e0e5      	b.n	8006c6a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	223c      	movs	r2, #60	@ 0x3c
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2b14      	cmp	r3, #20
 8006aaa:	d900      	bls.n	8006aae <HAL_TIM_PWM_ConfigChannel+0x32>
 8006aac:	e0d1      	b.n	8006c52 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	009a      	lsls	r2, r3, #2
 8006ab2:	4b70      	ldr	r3, [pc, #448]	@ (8006c74 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8006ab4:	18d3      	adds	r3, r2, r3
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	0011      	movs	r1, r2
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	f000 f972 	bl	8006dac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	699a      	ldr	r2, [r3, #24]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2108      	movs	r1, #8
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699a      	ldr	r2, [r3, #24]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2104      	movs	r1, #4
 8006ae4:	438a      	bics	r2, r1
 8006ae6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6999      	ldr	r1, [r3, #24]
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	691a      	ldr	r2, [r3, #16]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	430a      	orrs	r2, r1
 8006af8:	619a      	str	r2, [r3, #24]
      break;
 8006afa:	e0af      	b.n	8006c5c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	0011      	movs	r1, r2
 8006b04:	0018      	movs	r0, r3
 8006b06:	f000 f9db 	bl	8006ec0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	699a      	ldr	r2, [r3, #24]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2180      	movs	r1, #128	@ 0x80
 8006b16:	0109      	lsls	r1, r1, #4
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	699a      	ldr	r2, [r3, #24]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4954      	ldr	r1, [pc, #336]	@ (8006c78 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006b28:	400a      	ands	r2, r1
 8006b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6999      	ldr	r1, [r3, #24]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	021a      	lsls	r2, r3, #8
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	619a      	str	r2, [r3, #24]
      break;
 8006b40:	e08c      	b.n	8006c5c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	0011      	movs	r1, r2
 8006b4a:	0018      	movs	r0, r3
 8006b4c:	f000 fa3c 	bl	8006fc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	69da      	ldr	r2, [r3, #28]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2108      	movs	r1, #8
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	69da      	ldr	r2, [r3, #28]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2104      	movs	r1, #4
 8006b6c:	438a      	bics	r2, r1
 8006b6e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	69d9      	ldr	r1, [r3, #28]
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	691a      	ldr	r2, [r3, #16]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	61da      	str	r2, [r3, #28]
      break;
 8006b82:	e06b      	b.n	8006c5c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	0011      	movs	r1, r2
 8006b8c:	0018      	movs	r0, r3
 8006b8e:	f000 faa3 	bl	80070d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	69da      	ldr	r2, [r3, #28]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2180      	movs	r1, #128	@ 0x80
 8006b9e:	0109      	lsls	r1, r1, #4
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	69da      	ldr	r2, [r3, #28]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4932      	ldr	r1, [pc, #200]	@ (8006c78 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006bb0:	400a      	ands	r2, r1
 8006bb2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	69d9      	ldr	r1, [r3, #28]
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	021a      	lsls	r2, r3, #8
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	61da      	str	r2, [r3, #28]
      break;
 8006bc8:	e048      	b.n	8006c5c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	0011      	movs	r1, r2
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	f000 faea 	bl	80071ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2108      	movs	r1, #8
 8006be4:	430a      	orrs	r2, r1
 8006be6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2104      	movs	r1, #4
 8006bf4:	438a      	bics	r2, r1
 8006bf6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	691a      	ldr	r2, [r3, #16]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006c0a:	e027      	b.n	8006c5c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	0011      	movs	r1, r2
 8006c14:	0018      	movs	r0, r3
 8006c16:	f000 fb29 	bl	800726c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2180      	movs	r1, #128	@ 0x80
 8006c26:	0109      	lsls	r1, r1, #4
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4910      	ldr	r1, [pc, #64]	@ (8006c78 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006c38:	400a      	ands	r2, r1
 8006c3a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	021a      	lsls	r2, r3, #8
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006c50:	e004      	b.n	8006c5c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8006c52:	2317      	movs	r3, #23
 8006c54:	18fb      	adds	r3, r7, r3
 8006c56:	2201      	movs	r2, #1
 8006c58:	701a      	strb	r2, [r3, #0]
      break;
 8006c5a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	223c      	movs	r2, #60	@ 0x3c
 8006c60:	2100      	movs	r1, #0
 8006c62:	5499      	strb	r1, [r3, r2]

  return status;
 8006c64:	2317      	movs	r3, #23
 8006c66:	18fb      	adds	r3, r7, r3
 8006c68:	781b      	ldrb	r3, [r3, #0]
}
 8006c6a:	0018      	movs	r0, r3
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	b006      	add	sp, #24
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	46c0      	nop			@ (mov r8, r8)
 8006c74:	080096b4 	.word	0x080096b4
 8006c78:	fffffbff 	.word	0xfffffbff

08006c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a3f      	ldr	r2, [pc, #252]	@ (8006d8c <TIM_Base_SetConfig+0x110>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d00c      	beq.n	8006cae <TIM_Base_SetConfig+0x32>
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	2380      	movs	r3, #128	@ 0x80
 8006c98:	05db      	lsls	r3, r3, #23
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d007      	beq.n	8006cae <TIM_Base_SetConfig+0x32>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	4a3b      	ldr	r2, [pc, #236]	@ (8006d90 <TIM_Base_SetConfig+0x114>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d003      	beq.n	8006cae <TIM_Base_SetConfig+0x32>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a3a      	ldr	r2, [pc, #232]	@ (8006d94 <TIM_Base_SetConfig+0x118>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d108      	bne.n	8006cc0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2270      	movs	r2, #112	@ 0x70
 8006cb2:	4393      	bics	r3, r2
 8006cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a32      	ldr	r2, [pc, #200]	@ (8006d8c <TIM_Base_SetConfig+0x110>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d01c      	beq.n	8006d02 <TIM_Base_SetConfig+0x86>
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	2380      	movs	r3, #128	@ 0x80
 8006ccc:	05db      	lsls	r3, r3, #23
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d017      	beq.n	8006d02 <TIM_Base_SetConfig+0x86>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a2e      	ldr	r2, [pc, #184]	@ (8006d90 <TIM_Base_SetConfig+0x114>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d013      	beq.n	8006d02 <TIM_Base_SetConfig+0x86>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a2d      	ldr	r2, [pc, #180]	@ (8006d94 <TIM_Base_SetConfig+0x118>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d00f      	beq.n	8006d02 <TIM_Base_SetConfig+0x86>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a2c      	ldr	r2, [pc, #176]	@ (8006d98 <TIM_Base_SetConfig+0x11c>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d00b      	beq.n	8006d02 <TIM_Base_SetConfig+0x86>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a2b      	ldr	r2, [pc, #172]	@ (8006d9c <TIM_Base_SetConfig+0x120>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d007      	beq.n	8006d02 <TIM_Base_SetConfig+0x86>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a2a      	ldr	r2, [pc, #168]	@ (8006da0 <TIM_Base_SetConfig+0x124>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d003      	beq.n	8006d02 <TIM_Base_SetConfig+0x86>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a29      	ldr	r2, [pc, #164]	@ (8006da4 <TIM_Base_SetConfig+0x128>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d108      	bne.n	8006d14 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	4a28      	ldr	r2, [pc, #160]	@ (8006da8 <TIM_Base_SetConfig+0x12c>)
 8006d06:	4013      	ands	r3, r2
 8006d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	68db      	ldr	r3, [r3, #12]
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2280      	movs	r2, #128	@ 0x80
 8006d18:	4393      	bics	r3, r2
 8006d1a:	001a      	movs	r2, r3
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	689a      	ldr	r2, [r3, #8]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a13      	ldr	r2, [pc, #76]	@ (8006d8c <TIM_Base_SetConfig+0x110>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d00b      	beq.n	8006d5a <TIM_Base_SetConfig+0xde>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a15      	ldr	r2, [pc, #84]	@ (8006d9c <TIM_Base_SetConfig+0x120>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d007      	beq.n	8006d5a <TIM_Base_SetConfig+0xde>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a14      	ldr	r2, [pc, #80]	@ (8006da0 <TIM_Base_SetConfig+0x124>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d003      	beq.n	8006d5a <TIM_Base_SetConfig+0xde>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a13      	ldr	r2, [pc, #76]	@ (8006da4 <TIM_Base_SetConfig+0x128>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d103      	bne.n	8006d62 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	691a      	ldr	r2, [r3, #16]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	4013      	ands	r3, r2
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d106      	bne.n	8006d82 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	4393      	bics	r3, r2
 8006d7c:	001a      	movs	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	611a      	str	r2, [r3, #16]
  }
}
 8006d82:	46c0      	nop			@ (mov r8, r8)
 8006d84:	46bd      	mov	sp, r7
 8006d86:	b004      	add	sp, #16
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	46c0      	nop			@ (mov r8, r8)
 8006d8c:	40012c00 	.word	0x40012c00
 8006d90:	40000400 	.word	0x40000400
 8006d94:	40000800 	.word	0x40000800
 8006d98:	40002000 	.word	0x40002000
 8006d9c:	40014000 	.word	0x40014000
 8006da0:	40014400 	.word	0x40014400
 8006da4:	40014800 	.word	0x40014800
 8006da8:	fffffcff 	.word	0xfffffcff

08006dac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	4393      	bics	r3, r2
 8006dc4:	001a      	movs	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	4a32      	ldr	r2, [pc, #200]	@ (8006ea4 <TIM_OC1_SetConfig+0xf8>)
 8006dda:	4013      	ands	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2203      	movs	r2, #3
 8006de2:	4393      	bics	r3, r2
 8006de4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	2202      	movs	r2, #2
 8006df4:	4393      	bics	r3, r2
 8006df6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a28      	ldr	r2, [pc, #160]	@ (8006ea8 <TIM_OC1_SetConfig+0xfc>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d00b      	beq.n	8006e22 <TIM_OC1_SetConfig+0x76>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a27      	ldr	r2, [pc, #156]	@ (8006eac <TIM_OC1_SetConfig+0x100>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d007      	beq.n	8006e22 <TIM_OC1_SetConfig+0x76>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a26      	ldr	r2, [pc, #152]	@ (8006eb0 <TIM_OC1_SetConfig+0x104>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d003      	beq.n	8006e22 <TIM_OC1_SetConfig+0x76>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a25      	ldr	r2, [pc, #148]	@ (8006eb4 <TIM_OC1_SetConfig+0x108>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d10c      	bne.n	8006e3c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	2208      	movs	r2, #8
 8006e26:	4393      	bics	r3, r2
 8006e28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	2204      	movs	r2, #4
 8006e38:	4393      	bics	r3, r2
 8006e3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ea8 <TIM_OC1_SetConfig+0xfc>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d00b      	beq.n	8006e5c <TIM_OC1_SetConfig+0xb0>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a19      	ldr	r2, [pc, #100]	@ (8006eac <TIM_OC1_SetConfig+0x100>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d007      	beq.n	8006e5c <TIM_OC1_SetConfig+0xb0>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a18      	ldr	r2, [pc, #96]	@ (8006eb0 <TIM_OC1_SetConfig+0x104>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d003      	beq.n	8006e5c <TIM_OC1_SetConfig+0xb0>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a17      	ldr	r2, [pc, #92]	@ (8006eb4 <TIM_OC1_SetConfig+0x108>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d111      	bne.n	8006e80 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	4a16      	ldr	r2, [pc, #88]	@ (8006eb8 <TIM_OC1_SetConfig+0x10c>)
 8006e60:	4013      	ands	r3, r2
 8006e62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	4a15      	ldr	r2, [pc, #84]	@ (8006ebc <TIM_OC1_SetConfig+0x110>)
 8006e68:	4013      	ands	r3, r2
 8006e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	621a      	str	r2, [r3, #32]
}
 8006e9a:	46c0      	nop			@ (mov r8, r8)
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	b006      	add	sp, #24
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	46c0      	nop			@ (mov r8, r8)
 8006ea4:	fffeff8f 	.word	0xfffeff8f
 8006ea8:	40012c00 	.word	0x40012c00
 8006eac:	40014000 	.word	0x40014000
 8006eb0:	40014400 	.word	0x40014400
 8006eb4:	40014800 	.word	0x40014800
 8006eb8:	fffffeff 	.word	0xfffffeff
 8006ebc:	fffffdff 	.word	0xfffffdff

08006ec0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	2210      	movs	r2, #16
 8006ed6:	4393      	bics	r3, r2
 8006ed8:	001a      	movs	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	4a2e      	ldr	r2, [pc, #184]	@ (8006fa8 <TIM_OC2_SetConfig+0xe8>)
 8006eee:	4013      	ands	r3, r2
 8006ef0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4a2d      	ldr	r2, [pc, #180]	@ (8006fac <TIM_OC2_SetConfig+0xec>)
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	021b      	lsls	r3, r3, #8
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	4393      	bics	r3, r2
 8006f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	011b      	lsls	r3, r3, #4
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a24      	ldr	r2, [pc, #144]	@ (8006fb0 <TIM_OC2_SetConfig+0xf0>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d10d      	bne.n	8006f3e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	2280      	movs	r2, #128	@ 0x80
 8006f26:	4393      	bics	r3, r2
 8006f28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	011b      	lsls	r3, r3, #4
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2240      	movs	r2, #64	@ 0x40
 8006f3a:	4393      	bics	r3, r2
 8006f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a1b      	ldr	r2, [pc, #108]	@ (8006fb0 <TIM_OC2_SetConfig+0xf0>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d00b      	beq.n	8006f5e <TIM_OC2_SetConfig+0x9e>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a1a      	ldr	r2, [pc, #104]	@ (8006fb4 <TIM_OC2_SetConfig+0xf4>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d007      	beq.n	8006f5e <TIM_OC2_SetConfig+0x9e>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a19      	ldr	r2, [pc, #100]	@ (8006fb8 <TIM_OC2_SetConfig+0xf8>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d003      	beq.n	8006f5e <TIM_OC2_SetConfig+0x9e>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a18      	ldr	r2, [pc, #96]	@ (8006fbc <TIM_OC2_SetConfig+0xfc>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d113      	bne.n	8006f86 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	4a17      	ldr	r2, [pc, #92]	@ (8006fc0 <TIM_OC2_SetConfig+0x100>)
 8006f62:	4013      	ands	r3, r2
 8006f64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	4a16      	ldr	r2, [pc, #88]	@ (8006fc4 <TIM_OC2_SetConfig+0x104>)
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	621a      	str	r2, [r3, #32]
}
 8006fa0:	46c0      	nop			@ (mov r8, r8)
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	b006      	add	sp, #24
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	feff8fff 	.word	0xfeff8fff
 8006fac:	fffffcff 	.word	0xfffffcff
 8006fb0:	40012c00 	.word	0x40012c00
 8006fb4:	40014000 	.word	0x40014000
 8006fb8:	40014400 	.word	0x40014400
 8006fbc:	40014800 	.word	0x40014800
 8006fc0:	fffffbff 	.word	0xfffffbff
 8006fc4:	fffff7ff 	.word	0xfffff7ff

08006fc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	4a33      	ldr	r2, [pc, #204]	@ (80070ac <TIM_OC3_SetConfig+0xe4>)
 8006fde:	401a      	ands	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	69db      	ldr	r3, [r3, #28]
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4a2f      	ldr	r2, [pc, #188]	@ (80070b0 <TIM_OC3_SetConfig+0xe8>)
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2203      	movs	r2, #3
 8006ffc:	4393      	bics	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	4313      	orrs	r3, r2
 8007008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	4a29      	ldr	r2, [pc, #164]	@ (80070b4 <TIM_OC3_SetConfig+0xec>)
 800700e:	4013      	ands	r3, r2
 8007010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	021b      	lsls	r3, r3, #8
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	4313      	orrs	r3, r2
 800701c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a25      	ldr	r2, [pc, #148]	@ (80070b8 <TIM_OC3_SetConfig+0xf0>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d10d      	bne.n	8007042 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	4a24      	ldr	r2, [pc, #144]	@ (80070bc <TIM_OC3_SetConfig+0xf4>)
 800702a:	4013      	ands	r3, r2
 800702c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	021b      	lsls	r3, r3, #8
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	4313      	orrs	r3, r2
 8007038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	4a20      	ldr	r2, [pc, #128]	@ (80070c0 <TIM_OC3_SetConfig+0xf8>)
 800703e:	4013      	ands	r3, r2
 8007040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a1c      	ldr	r2, [pc, #112]	@ (80070b8 <TIM_OC3_SetConfig+0xf0>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d00b      	beq.n	8007062 <TIM_OC3_SetConfig+0x9a>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a1d      	ldr	r2, [pc, #116]	@ (80070c4 <TIM_OC3_SetConfig+0xfc>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d007      	beq.n	8007062 <TIM_OC3_SetConfig+0x9a>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a1c      	ldr	r2, [pc, #112]	@ (80070c8 <TIM_OC3_SetConfig+0x100>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d003      	beq.n	8007062 <TIM_OC3_SetConfig+0x9a>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a1b      	ldr	r2, [pc, #108]	@ (80070cc <TIM_OC3_SetConfig+0x104>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d113      	bne.n	800708a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	4a1a      	ldr	r2, [pc, #104]	@ (80070d0 <TIM_OC3_SetConfig+0x108>)
 8007066:	4013      	ands	r3, r2
 8007068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	4a19      	ldr	r2, [pc, #100]	@ (80070d4 <TIM_OC3_SetConfig+0x10c>)
 800706e:	4013      	ands	r3, r2
 8007070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	011b      	lsls	r3, r3, #4
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	4313      	orrs	r3, r2
 800707c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	011b      	lsls	r3, r3, #4
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	4313      	orrs	r3, r2
 8007088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	621a      	str	r2, [r3, #32]
}
 80070a4:	46c0      	nop			@ (mov r8, r8)
 80070a6:	46bd      	mov	sp, r7
 80070a8:	b006      	add	sp, #24
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	fffffeff 	.word	0xfffffeff
 80070b0:	fffeff8f 	.word	0xfffeff8f
 80070b4:	fffffdff 	.word	0xfffffdff
 80070b8:	40012c00 	.word	0x40012c00
 80070bc:	fffff7ff 	.word	0xfffff7ff
 80070c0:	fffffbff 	.word	0xfffffbff
 80070c4:	40014000 	.word	0x40014000
 80070c8:	40014400 	.word	0x40014400
 80070cc:	40014800 	.word	0x40014800
 80070d0:	ffffefff 	.word	0xffffefff
 80070d4:	ffffdfff 	.word	0xffffdfff

080070d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	4a26      	ldr	r2, [pc, #152]	@ (8007188 <TIM_OC4_SetConfig+0xb0>)
 80070ee:	401a      	ands	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	69db      	ldr	r3, [r3, #28]
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	4a22      	ldr	r2, [pc, #136]	@ (800718c <TIM_OC4_SetConfig+0xb4>)
 8007104:	4013      	ands	r3, r2
 8007106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	4a21      	ldr	r2, [pc, #132]	@ (8007190 <TIM_OC4_SetConfig+0xb8>)
 800710c:	4013      	ands	r3, r2
 800710e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	021b      	lsls	r3, r3, #8
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	4313      	orrs	r3, r2
 800711a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	4a1d      	ldr	r2, [pc, #116]	@ (8007194 <TIM_OC4_SetConfig+0xbc>)
 8007120:	4013      	ands	r3, r2
 8007122:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	031b      	lsls	r3, r3, #12
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	4313      	orrs	r3, r2
 800712e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a19      	ldr	r2, [pc, #100]	@ (8007198 <TIM_OC4_SetConfig+0xc0>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d00b      	beq.n	8007150 <TIM_OC4_SetConfig+0x78>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a18      	ldr	r2, [pc, #96]	@ (800719c <TIM_OC4_SetConfig+0xc4>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d007      	beq.n	8007150 <TIM_OC4_SetConfig+0x78>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a17      	ldr	r2, [pc, #92]	@ (80071a0 <TIM_OC4_SetConfig+0xc8>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d003      	beq.n	8007150 <TIM_OC4_SetConfig+0x78>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a16      	ldr	r2, [pc, #88]	@ (80071a4 <TIM_OC4_SetConfig+0xcc>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d109      	bne.n	8007164 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	4a15      	ldr	r2, [pc, #84]	@ (80071a8 <TIM_OC4_SetConfig+0xd0>)
 8007154:	4013      	ands	r3, r2
 8007156:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	019b      	lsls	r3, r3, #6
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	4313      	orrs	r3, r2
 8007162:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	621a      	str	r2, [r3, #32]
}
 800717e:	46c0      	nop			@ (mov r8, r8)
 8007180:	46bd      	mov	sp, r7
 8007182:	b006      	add	sp, #24
 8007184:	bd80      	pop	{r7, pc}
 8007186:	46c0      	nop			@ (mov r8, r8)
 8007188:	ffffefff 	.word	0xffffefff
 800718c:	feff8fff 	.word	0xfeff8fff
 8007190:	fffffcff 	.word	0xfffffcff
 8007194:	ffffdfff 	.word	0xffffdfff
 8007198:	40012c00 	.word	0x40012c00
 800719c:	40014000 	.word	0x40014000
 80071a0:	40014400 	.word	0x40014400
 80071a4:	40014800 	.word	0x40014800
 80071a8:	ffffbfff 	.word	0xffffbfff

080071ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	4a23      	ldr	r2, [pc, #140]	@ (8007250 <TIM_OC5_SetConfig+0xa4>)
 80071c2:	401a      	ands	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4a1f      	ldr	r2, [pc, #124]	@ (8007254 <TIM_OC5_SetConfig+0xa8>)
 80071d8:	4013      	ands	r3, r2
 80071da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	4a1b      	ldr	r2, [pc, #108]	@ (8007258 <TIM_OC5_SetConfig+0xac>)
 80071ea:	4013      	ands	r3, r2
 80071ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	041b      	lsls	r3, r3, #16
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a17      	ldr	r2, [pc, #92]	@ (800725c <TIM_OC5_SetConfig+0xb0>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d00b      	beq.n	800721a <TIM_OC5_SetConfig+0x6e>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a16      	ldr	r2, [pc, #88]	@ (8007260 <TIM_OC5_SetConfig+0xb4>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d007      	beq.n	800721a <TIM_OC5_SetConfig+0x6e>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a15      	ldr	r2, [pc, #84]	@ (8007264 <TIM_OC5_SetConfig+0xb8>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d003      	beq.n	800721a <TIM_OC5_SetConfig+0x6e>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a14      	ldr	r2, [pc, #80]	@ (8007268 <TIM_OC5_SetConfig+0xbc>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d109      	bne.n	800722e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	4a0c      	ldr	r2, [pc, #48]	@ (8007250 <TIM_OC5_SetConfig+0xa4>)
 800721e:	4013      	ands	r3, r2
 8007220:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	021b      	lsls	r3, r3, #8
 8007228:	697a      	ldr	r2, [r7, #20]
 800722a:	4313      	orrs	r3, r2
 800722c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	685a      	ldr	r2, [r3, #4]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	621a      	str	r2, [r3, #32]
}
 8007248:	46c0      	nop			@ (mov r8, r8)
 800724a:	46bd      	mov	sp, r7
 800724c:	b006      	add	sp, #24
 800724e:	bd80      	pop	{r7, pc}
 8007250:	fffeffff 	.word	0xfffeffff
 8007254:	fffeff8f 	.word	0xfffeff8f
 8007258:	fffdffff 	.word	0xfffdffff
 800725c:	40012c00 	.word	0x40012c00
 8007260:	40014000 	.word	0x40014000
 8007264:	40014400 	.word	0x40014400
 8007268:	40014800 	.word	0x40014800

0800726c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	4a24      	ldr	r2, [pc, #144]	@ (8007314 <TIM_OC6_SetConfig+0xa8>)
 8007282:	401a      	ands	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4a20      	ldr	r2, [pc, #128]	@ (8007318 <TIM_OC6_SetConfig+0xac>)
 8007298:	4013      	ands	r3, r2
 800729a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	021b      	lsls	r3, r3, #8
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	4a1c      	ldr	r2, [pc, #112]	@ (800731c <TIM_OC6_SetConfig+0xb0>)
 80072ac:	4013      	ands	r3, r2
 80072ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	051b      	lsls	r3, r3, #20
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a18      	ldr	r2, [pc, #96]	@ (8007320 <TIM_OC6_SetConfig+0xb4>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d00b      	beq.n	80072dc <TIM_OC6_SetConfig+0x70>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a17      	ldr	r2, [pc, #92]	@ (8007324 <TIM_OC6_SetConfig+0xb8>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d007      	beq.n	80072dc <TIM_OC6_SetConfig+0x70>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a16      	ldr	r2, [pc, #88]	@ (8007328 <TIM_OC6_SetConfig+0xbc>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d003      	beq.n	80072dc <TIM_OC6_SetConfig+0x70>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a15      	ldr	r2, [pc, #84]	@ (800732c <TIM_OC6_SetConfig+0xc0>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d109      	bne.n	80072f0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	4a14      	ldr	r2, [pc, #80]	@ (8007330 <TIM_OC6_SetConfig+0xc4>)
 80072e0:	4013      	ands	r3, r2
 80072e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	695b      	ldr	r3, [r3, #20]
 80072e8:	029b      	lsls	r3, r3, #10
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	693a      	ldr	r2, [r7, #16]
 8007308:	621a      	str	r2, [r3, #32]
}
 800730a:	46c0      	nop			@ (mov r8, r8)
 800730c:	46bd      	mov	sp, r7
 800730e:	b006      	add	sp, #24
 8007310:	bd80      	pop	{r7, pc}
 8007312:	46c0      	nop			@ (mov r8, r8)
 8007314:	ffefffff 	.word	0xffefffff
 8007318:	feff8fff 	.word	0xfeff8fff
 800731c:	ffdfffff 	.word	0xffdfffff
 8007320:	40012c00 	.word	0x40012c00
 8007324:	40014000 	.word	0x40014000
 8007328:	40014400 	.word	0x40014400
 800732c:	40014800 	.word	0x40014800
 8007330:	fffbffff 	.word	0xfffbffff

08007334 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	221f      	movs	r2, #31
 8007344:	4013      	ands	r3, r2
 8007346:	2201      	movs	r2, #1
 8007348:	409a      	lsls	r2, r3
 800734a:	0013      	movs	r3, r2
 800734c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	43d2      	mvns	r2, r2
 8007356:	401a      	ands	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6a1a      	ldr	r2, [r3, #32]
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	211f      	movs	r1, #31
 8007364:	400b      	ands	r3, r1
 8007366:	6879      	ldr	r1, [r7, #4]
 8007368:	4099      	lsls	r1, r3
 800736a:	000b      	movs	r3, r1
 800736c:	431a      	orrs	r2, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	621a      	str	r2, [r3, #32]
}
 8007372:	46c0      	nop			@ (mov r8, r8)
 8007374:	46bd      	mov	sp, r7
 8007376:	b006      	add	sp, #24
 8007378:	bd80      	pop	{r7, pc}
	...

0800737c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007386:	2300      	movs	r3, #0
 8007388:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	223c      	movs	r2, #60	@ 0x3c
 800738e:	5c9b      	ldrb	r3, [r3, r2]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d101      	bne.n	8007398 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007394:	2302      	movs	r3, #2
 8007396:	e06f      	b.n	8007478 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	223c      	movs	r2, #60	@ 0x3c
 800739c:	2101      	movs	r1, #1
 800739e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	22ff      	movs	r2, #255	@ 0xff
 80073a4:	4393      	bics	r3, r2
 80073a6:	001a      	movs	r2, r3
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	4a33      	ldr	r2, [pc, #204]	@ (8007480 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80073b4:	401a      	ands	r2, r3
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	4a30      	ldr	r2, [pc, #192]	@ (8007484 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80073c2:	401a      	ands	r2, r3
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4a2e      	ldr	r2, [pc, #184]	@ (8007488 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80073d0:	401a      	ands	r2, r3
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	4a2b      	ldr	r2, [pc, #172]	@ (800748c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80073de:	401a      	ands	r2, r3
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4a29      	ldr	r2, [pc, #164]	@ (8007490 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80073ec:	401a      	ands	r2, r3
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4a26      	ldr	r2, [pc, #152]	@ (8007494 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80073fa:	401a      	ands	r2, r3
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007400:	4313      	orrs	r3, r2
 8007402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	4a24      	ldr	r2, [pc, #144]	@ (8007498 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007408:	401a      	ands	r2, r3
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	041b      	lsls	r3, r3, #16
 8007410:	4313      	orrs	r3, r2
 8007412:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	4a21      	ldr	r2, [pc, #132]	@ (800749c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007418:	401a      	ands	r2, r3
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	4313      	orrs	r3, r2
 8007420:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a1e      	ldr	r2, [pc, #120]	@ (80074a0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d11c      	bne.n	8007466 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4a1d      	ldr	r2, [pc, #116]	@ (80074a4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8007430:	401a      	ands	r2, r3
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007436:	051b      	lsls	r3, r3, #20
 8007438:	4313      	orrs	r3, r2
 800743a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4a1a      	ldr	r2, [pc, #104]	@ (80074a8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8007440:	401a      	ands	r2, r3
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	4313      	orrs	r3, r2
 8007448:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	4a17      	ldr	r2, [pc, #92]	@ (80074ac <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800744e:	401a      	ands	r2, r3
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007454:	4313      	orrs	r3, r2
 8007456:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	4a15      	ldr	r2, [pc, #84]	@ (80074b0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800745c:	401a      	ands	r2, r3
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007462:	4313      	orrs	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	223c      	movs	r2, #60	@ 0x3c
 8007472:	2100      	movs	r1, #0
 8007474:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	0018      	movs	r0, r3
 800747a:	46bd      	mov	sp, r7
 800747c:	b004      	add	sp, #16
 800747e:	bd80      	pop	{r7, pc}
 8007480:	fffffcff 	.word	0xfffffcff
 8007484:	fffffbff 	.word	0xfffffbff
 8007488:	fffff7ff 	.word	0xfffff7ff
 800748c:	ffffefff 	.word	0xffffefff
 8007490:	ffffdfff 	.word	0xffffdfff
 8007494:	ffffbfff 	.word	0xffffbfff
 8007498:	fff0ffff 	.word	0xfff0ffff
 800749c:	efffffff 	.word	0xefffffff
 80074a0:	40012c00 	.word	0x40012c00
 80074a4:	ff0fffff 	.word	0xff0fffff
 80074a8:	feffffff 	.word	0xfeffffff
 80074ac:	fdffffff 	.word	0xfdffffff
 80074b0:	dfffffff 	.word	0xdfffffff

080074b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e046      	b.n	8007554 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2288      	movs	r2, #136	@ 0x88
 80074ca:	589b      	ldr	r3, [r3, r2]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d107      	bne.n	80074e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2284      	movs	r2, #132	@ 0x84
 80074d4:	2100      	movs	r1, #0
 80074d6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	0018      	movs	r0, r3
 80074dc:	f7fc f8b6 	bl	800364c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2288      	movs	r2, #136	@ 0x88
 80074e4:	2124      	movs	r1, #36	@ 0x24
 80074e6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2101      	movs	r1, #1
 80074f4:	438a      	bics	r2, r1
 80074f6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d003      	beq.n	8007508 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	0018      	movs	r0, r3
 8007504:	f000 fc68 	bl	8007dd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	0018      	movs	r0, r3
 800750c:	f000 f90e 	bl	800772c <UART_SetConfig>
 8007510:	0003      	movs	r3, r0
 8007512:	2b01      	cmp	r3, #1
 8007514:	d101      	bne.n	800751a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e01c      	b.n	8007554 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	685a      	ldr	r2, [r3, #4]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	490d      	ldr	r1, [pc, #52]	@ (800755c <HAL_UART_Init+0xa8>)
 8007526:	400a      	ands	r2, r1
 8007528:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689a      	ldr	r2, [r3, #8]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	212a      	movs	r1, #42	@ 0x2a
 8007536:	438a      	bics	r2, r1
 8007538:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2101      	movs	r1, #1
 8007546:	430a      	orrs	r2, r1
 8007548:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	0018      	movs	r0, r3
 800754e:	f000 fcf7 	bl	8007f40 <UART_CheckIdleState>
 8007552:	0003      	movs	r3, r0
}
 8007554:	0018      	movs	r0, r3
 8007556:	46bd      	mov	sp, r7
 8007558:	b002      	add	sp, #8
 800755a:	bd80      	pop	{r7, pc}
 800755c:	ffffb7ff 	.word	0xffffb7ff

08007560 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b08a      	sub	sp, #40	@ 0x28
 8007564:	af02      	add	r7, sp, #8
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	603b      	str	r3, [r7, #0]
 800756c:	1dbb      	adds	r3, r7, #6
 800756e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	228c      	movs	r2, #140	@ 0x8c
 8007574:	589b      	ldr	r3, [r3, r2]
 8007576:	2b20      	cmp	r3, #32
 8007578:	d000      	beq.n	800757c <HAL_UART_Receive+0x1c>
 800757a:	e0d0      	b.n	800771e <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d003      	beq.n	800758a <HAL_UART_Receive+0x2a>
 8007582:	1dbb      	adds	r3, r7, #6
 8007584:	881b      	ldrh	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e0c8      	b.n	8007720 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	689a      	ldr	r2, [r3, #8]
 8007592:	2380      	movs	r3, #128	@ 0x80
 8007594:	015b      	lsls	r3, r3, #5
 8007596:	429a      	cmp	r2, r3
 8007598:	d109      	bne.n	80075ae <HAL_UART_Receive+0x4e>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d105      	bne.n	80075ae <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	2201      	movs	r2, #1
 80075a6:	4013      	ands	r3, r2
 80075a8:	d001      	beq.n	80075ae <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e0b8      	b.n	8007720 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2290      	movs	r2, #144	@ 0x90
 80075b2:	2100      	movs	r1, #0
 80075b4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	228c      	movs	r2, #140	@ 0x8c
 80075ba:	2122      	movs	r1, #34	@ 0x22
 80075bc:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075c4:	f7fc f9f8 	bl	80039b8 <HAL_GetTick>
 80075c8:	0003      	movs	r3, r0
 80075ca:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	1dba      	adds	r2, r7, #6
 80075d0:	215c      	movs	r1, #92	@ 0x5c
 80075d2:	8812      	ldrh	r2, [r2, #0]
 80075d4:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	1dba      	adds	r2, r7, #6
 80075da:	215e      	movs	r1, #94	@ 0x5e
 80075dc:	8812      	ldrh	r2, [r2, #0]
 80075de:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	689a      	ldr	r2, [r3, #8]
 80075e4:	2380      	movs	r3, #128	@ 0x80
 80075e6:	015b      	lsls	r3, r3, #5
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d10d      	bne.n	8007608 <HAL_UART_Receive+0xa8>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d104      	bne.n	80075fe <HAL_UART_Receive+0x9e>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2260      	movs	r2, #96	@ 0x60
 80075f8:	494b      	ldr	r1, [pc, #300]	@ (8007728 <HAL_UART_Receive+0x1c8>)
 80075fa:	5299      	strh	r1, [r3, r2]
 80075fc:	e02e      	b.n	800765c <HAL_UART_Receive+0xfc>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2260      	movs	r2, #96	@ 0x60
 8007602:	21ff      	movs	r1, #255	@ 0xff
 8007604:	5299      	strh	r1, [r3, r2]
 8007606:	e029      	b.n	800765c <HAL_UART_Receive+0xfc>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10d      	bne.n	800762c <HAL_UART_Receive+0xcc>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d104      	bne.n	8007622 <HAL_UART_Receive+0xc2>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2260      	movs	r2, #96	@ 0x60
 800761c:	21ff      	movs	r1, #255	@ 0xff
 800761e:	5299      	strh	r1, [r3, r2]
 8007620:	e01c      	b.n	800765c <HAL_UART_Receive+0xfc>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2260      	movs	r2, #96	@ 0x60
 8007626:	217f      	movs	r1, #127	@ 0x7f
 8007628:	5299      	strh	r1, [r3, r2]
 800762a:	e017      	b.n	800765c <HAL_UART_Receive+0xfc>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	689a      	ldr	r2, [r3, #8]
 8007630:	2380      	movs	r3, #128	@ 0x80
 8007632:	055b      	lsls	r3, r3, #21
 8007634:	429a      	cmp	r2, r3
 8007636:	d10d      	bne.n	8007654 <HAL_UART_Receive+0xf4>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d104      	bne.n	800764a <HAL_UART_Receive+0xea>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2260      	movs	r2, #96	@ 0x60
 8007644:	217f      	movs	r1, #127	@ 0x7f
 8007646:	5299      	strh	r1, [r3, r2]
 8007648:	e008      	b.n	800765c <HAL_UART_Receive+0xfc>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2260      	movs	r2, #96	@ 0x60
 800764e:	213f      	movs	r1, #63	@ 0x3f
 8007650:	5299      	strh	r1, [r3, r2]
 8007652:	e003      	b.n	800765c <HAL_UART_Receive+0xfc>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2260      	movs	r2, #96	@ 0x60
 8007658:	2100      	movs	r1, #0
 800765a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800765c:	2312      	movs	r3, #18
 800765e:	18fb      	adds	r3, r7, r3
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	2160      	movs	r1, #96	@ 0x60
 8007664:	5a52      	ldrh	r2, [r2, r1]
 8007666:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	689a      	ldr	r2, [r3, #8]
 800766c:	2380      	movs	r3, #128	@ 0x80
 800766e:	015b      	lsls	r3, r3, #5
 8007670:	429a      	cmp	r2, r3
 8007672:	d108      	bne.n	8007686 <HAL_UART_Receive+0x126>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d104      	bne.n	8007686 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800767c:	2300      	movs	r3, #0
 800767e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	61bb      	str	r3, [r7, #24]
 8007684:	e003      	b.n	800768e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800768a:	2300      	movs	r3, #0
 800768c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800768e:	e03a      	b.n	8007706 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	0013      	movs	r3, r2
 800769a:	2200      	movs	r2, #0
 800769c:	2120      	movs	r1, #32
 800769e:	f000 fcf9 	bl	8008094 <UART_WaitOnFlagUntilTimeout>
 80076a2:	1e03      	subs	r3, r0, #0
 80076a4:	d005      	beq.n	80076b2 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	228c      	movs	r2, #140	@ 0x8c
 80076aa:	2120      	movs	r1, #32
 80076ac:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e036      	b.n	8007720 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10e      	bne.n	80076d6 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076be:	b29b      	uxth	r3, r3
 80076c0:	2212      	movs	r2, #18
 80076c2:	18ba      	adds	r2, r7, r2
 80076c4:	8812      	ldrh	r2, [r2, #0]
 80076c6:	4013      	ands	r3, r2
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	3302      	adds	r3, #2
 80076d2:	61bb      	str	r3, [r7, #24]
 80076d4:	e00e      	b.n	80076f4 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2212      	movs	r2, #18
 80076e0:	18ba      	adds	r2, r7, r2
 80076e2:	8812      	ldrh	r2, [r2, #0]
 80076e4:	b2d2      	uxtb	r2, r2
 80076e6:	4013      	ands	r3, r2
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	3301      	adds	r3, #1
 80076f2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	225e      	movs	r2, #94	@ 0x5e
 80076f8:	5a9b      	ldrh	r3, [r3, r2]
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	3b01      	subs	r3, #1
 80076fe:	b299      	uxth	r1, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	225e      	movs	r2, #94	@ 0x5e
 8007704:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	225e      	movs	r2, #94	@ 0x5e
 800770a:	5a9b      	ldrh	r3, [r3, r2]
 800770c:	b29b      	uxth	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1be      	bne.n	8007690 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	228c      	movs	r2, #140	@ 0x8c
 8007716:	2120      	movs	r1, #32
 8007718:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	e000      	b.n	8007720 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800771e:	2302      	movs	r3, #2
  }
}
 8007720:	0018      	movs	r0, r3
 8007722:	46bd      	mov	sp, r7
 8007724:	b008      	add	sp, #32
 8007726:	bd80      	pop	{r7, pc}
 8007728:	000001ff 	.word	0x000001ff

0800772c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800772c:	b5b0      	push	{r4, r5, r7, lr}
 800772e:	b090      	sub	sp, #64	@ 0x40
 8007730:	af00      	add	r7, sp, #0
 8007732:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007734:	231a      	movs	r3, #26
 8007736:	2220      	movs	r2, #32
 8007738:	189b      	adds	r3, r3, r2
 800773a:	19db      	adds	r3, r3, r7
 800773c:	2200      	movs	r2, #0
 800773e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007742:	689a      	ldr	r2, [r3, #8]
 8007744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	431a      	orrs	r2, r3
 800774a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	431a      	orrs	r2, r3
 8007750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007752:	69db      	ldr	r3, [r3, #28]
 8007754:	4313      	orrs	r3, r2
 8007756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4ac1      	ldr	r2, [pc, #772]	@ (8007a64 <UART_SetConfig+0x338>)
 8007760:	4013      	ands	r3, r2
 8007762:	0019      	movs	r1, r3
 8007764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800776a:	430b      	orrs	r3, r1
 800776c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800776e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	4abc      	ldr	r2, [pc, #752]	@ (8007a68 <UART_SetConfig+0x33c>)
 8007776:	4013      	ands	r3, r2
 8007778:	0018      	movs	r0, r3
 800777a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800777c:	68d9      	ldr	r1, [r3, #12]
 800777e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	0003      	movs	r3, r0
 8007784:	430b      	orrs	r3, r1
 8007786:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800778e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4ab6      	ldr	r2, [pc, #728]	@ (8007a6c <UART_SetConfig+0x340>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d009      	beq.n	80077ac <UART_SetConfig+0x80>
 8007798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4ab4      	ldr	r2, [pc, #720]	@ (8007a70 <UART_SetConfig+0x344>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d004      	beq.n	80077ac <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80077a8:	4313      	orrs	r3, r2
 80077aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	4ab0      	ldr	r2, [pc, #704]	@ (8007a74 <UART_SetConfig+0x348>)
 80077b4:	4013      	ands	r3, r2
 80077b6:	0019      	movs	r1, r3
 80077b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077be:	430b      	orrs	r3, r1
 80077c0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80077c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c8:	220f      	movs	r2, #15
 80077ca:	4393      	bics	r3, r2
 80077cc:	0018      	movs	r0, r3
 80077ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80077d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	0003      	movs	r3, r0
 80077d8:	430b      	orrs	r3, r1
 80077da:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4aa5      	ldr	r2, [pc, #660]	@ (8007a78 <UART_SetConfig+0x34c>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d131      	bne.n	800784a <UART_SetConfig+0x11e>
 80077e6:	4ba5      	ldr	r3, [pc, #660]	@ (8007a7c <UART_SetConfig+0x350>)
 80077e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ea:	2203      	movs	r2, #3
 80077ec:	4013      	ands	r3, r2
 80077ee:	2b03      	cmp	r3, #3
 80077f0:	d01d      	beq.n	800782e <UART_SetConfig+0x102>
 80077f2:	d823      	bhi.n	800783c <UART_SetConfig+0x110>
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d00c      	beq.n	8007812 <UART_SetConfig+0xe6>
 80077f8:	d820      	bhi.n	800783c <UART_SetConfig+0x110>
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d002      	beq.n	8007804 <UART_SetConfig+0xd8>
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d00e      	beq.n	8007820 <UART_SetConfig+0xf4>
 8007802:	e01b      	b.n	800783c <UART_SetConfig+0x110>
 8007804:	231b      	movs	r3, #27
 8007806:	2220      	movs	r2, #32
 8007808:	189b      	adds	r3, r3, r2
 800780a:	19db      	adds	r3, r3, r7
 800780c:	2200      	movs	r2, #0
 800780e:	701a      	strb	r2, [r3, #0]
 8007810:	e154      	b.n	8007abc <UART_SetConfig+0x390>
 8007812:	231b      	movs	r3, #27
 8007814:	2220      	movs	r2, #32
 8007816:	189b      	adds	r3, r3, r2
 8007818:	19db      	adds	r3, r3, r7
 800781a:	2202      	movs	r2, #2
 800781c:	701a      	strb	r2, [r3, #0]
 800781e:	e14d      	b.n	8007abc <UART_SetConfig+0x390>
 8007820:	231b      	movs	r3, #27
 8007822:	2220      	movs	r2, #32
 8007824:	189b      	adds	r3, r3, r2
 8007826:	19db      	adds	r3, r3, r7
 8007828:	2204      	movs	r2, #4
 800782a:	701a      	strb	r2, [r3, #0]
 800782c:	e146      	b.n	8007abc <UART_SetConfig+0x390>
 800782e:	231b      	movs	r3, #27
 8007830:	2220      	movs	r2, #32
 8007832:	189b      	adds	r3, r3, r2
 8007834:	19db      	adds	r3, r3, r7
 8007836:	2208      	movs	r2, #8
 8007838:	701a      	strb	r2, [r3, #0]
 800783a:	e13f      	b.n	8007abc <UART_SetConfig+0x390>
 800783c:	231b      	movs	r3, #27
 800783e:	2220      	movs	r2, #32
 8007840:	189b      	adds	r3, r3, r2
 8007842:	19db      	adds	r3, r3, r7
 8007844:	2210      	movs	r2, #16
 8007846:	701a      	strb	r2, [r3, #0]
 8007848:	e138      	b.n	8007abc <UART_SetConfig+0x390>
 800784a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a8c      	ldr	r2, [pc, #560]	@ (8007a80 <UART_SetConfig+0x354>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d131      	bne.n	80078b8 <UART_SetConfig+0x18c>
 8007854:	4b89      	ldr	r3, [pc, #548]	@ (8007a7c <UART_SetConfig+0x350>)
 8007856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007858:	220c      	movs	r2, #12
 800785a:	4013      	ands	r3, r2
 800785c:	2b0c      	cmp	r3, #12
 800785e:	d01d      	beq.n	800789c <UART_SetConfig+0x170>
 8007860:	d823      	bhi.n	80078aa <UART_SetConfig+0x17e>
 8007862:	2b08      	cmp	r3, #8
 8007864:	d00c      	beq.n	8007880 <UART_SetConfig+0x154>
 8007866:	d820      	bhi.n	80078aa <UART_SetConfig+0x17e>
 8007868:	2b00      	cmp	r3, #0
 800786a:	d002      	beq.n	8007872 <UART_SetConfig+0x146>
 800786c:	2b04      	cmp	r3, #4
 800786e:	d00e      	beq.n	800788e <UART_SetConfig+0x162>
 8007870:	e01b      	b.n	80078aa <UART_SetConfig+0x17e>
 8007872:	231b      	movs	r3, #27
 8007874:	2220      	movs	r2, #32
 8007876:	189b      	adds	r3, r3, r2
 8007878:	19db      	adds	r3, r3, r7
 800787a:	2200      	movs	r2, #0
 800787c:	701a      	strb	r2, [r3, #0]
 800787e:	e11d      	b.n	8007abc <UART_SetConfig+0x390>
 8007880:	231b      	movs	r3, #27
 8007882:	2220      	movs	r2, #32
 8007884:	189b      	adds	r3, r3, r2
 8007886:	19db      	adds	r3, r3, r7
 8007888:	2202      	movs	r2, #2
 800788a:	701a      	strb	r2, [r3, #0]
 800788c:	e116      	b.n	8007abc <UART_SetConfig+0x390>
 800788e:	231b      	movs	r3, #27
 8007890:	2220      	movs	r2, #32
 8007892:	189b      	adds	r3, r3, r2
 8007894:	19db      	adds	r3, r3, r7
 8007896:	2204      	movs	r2, #4
 8007898:	701a      	strb	r2, [r3, #0]
 800789a:	e10f      	b.n	8007abc <UART_SetConfig+0x390>
 800789c:	231b      	movs	r3, #27
 800789e:	2220      	movs	r2, #32
 80078a0:	189b      	adds	r3, r3, r2
 80078a2:	19db      	adds	r3, r3, r7
 80078a4:	2208      	movs	r2, #8
 80078a6:	701a      	strb	r2, [r3, #0]
 80078a8:	e108      	b.n	8007abc <UART_SetConfig+0x390>
 80078aa:	231b      	movs	r3, #27
 80078ac:	2220      	movs	r2, #32
 80078ae:	189b      	adds	r3, r3, r2
 80078b0:	19db      	adds	r3, r3, r7
 80078b2:	2210      	movs	r2, #16
 80078b4:	701a      	strb	r2, [r3, #0]
 80078b6:	e101      	b.n	8007abc <UART_SetConfig+0x390>
 80078b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a71      	ldr	r2, [pc, #452]	@ (8007a84 <UART_SetConfig+0x358>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d131      	bne.n	8007926 <UART_SetConfig+0x1fa>
 80078c2:	4b6e      	ldr	r3, [pc, #440]	@ (8007a7c <UART_SetConfig+0x350>)
 80078c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078c6:	2230      	movs	r2, #48	@ 0x30
 80078c8:	4013      	ands	r3, r2
 80078ca:	2b30      	cmp	r3, #48	@ 0x30
 80078cc:	d01d      	beq.n	800790a <UART_SetConfig+0x1de>
 80078ce:	d823      	bhi.n	8007918 <UART_SetConfig+0x1ec>
 80078d0:	2b20      	cmp	r3, #32
 80078d2:	d00c      	beq.n	80078ee <UART_SetConfig+0x1c2>
 80078d4:	d820      	bhi.n	8007918 <UART_SetConfig+0x1ec>
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d002      	beq.n	80078e0 <UART_SetConfig+0x1b4>
 80078da:	2b10      	cmp	r3, #16
 80078dc:	d00e      	beq.n	80078fc <UART_SetConfig+0x1d0>
 80078de:	e01b      	b.n	8007918 <UART_SetConfig+0x1ec>
 80078e0:	231b      	movs	r3, #27
 80078e2:	2220      	movs	r2, #32
 80078e4:	189b      	adds	r3, r3, r2
 80078e6:	19db      	adds	r3, r3, r7
 80078e8:	2200      	movs	r2, #0
 80078ea:	701a      	strb	r2, [r3, #0]
 80078ec:	e0e6      	b.n	8007abc <UART_SetConfig+0x390>
 80078ee:	231b      	movs	r3, #27
 80078f0:	2220      	movs	r2, #32
 80078f2:	189b      	adds	r3, r3, r2
 80078f4:	19db      	adds	r3, r3, r7
 80078f6:	2202      	movs	r2, #2
 80078f8:	701a      	strb	r2, [r3, #0]
 80078fa:	e0df      	b.n	8007abc <UART_SetConfig+0x390>
 80078fc:	231b      	movs	r3, #27
 80078fe:	2220      	movs	r2, #32
 8007900:	189b      	adds	r3, r3, r2
 8007902:	19db      	adds	r3, r3, r7
 8007904:	2204      	movs	r2, #4
 8007906:	701a      	strb	r2, [r3, #0]
 8007908:	e0d8      	b.n	8007abc <UART_SetConfig+0x390>
 800790a:	231b      	movs	r3, #27
 800790c:	2220      	movs	r2, #32
 800790e:	189b      	adds	r3, r3, r2
 8007910:	19db      	adds	r3, r3, r7
 8007912:	2208      	movs	r2, #8
 8007914:	701a      	strb	r2, [r3, #0]
 8007916:	e0d1      	b.n	8007abc <UART_SetConfig+0x390>
 8007918:	231b      	movs	r3, #27
 800791a:	2220      	movs	r2, #32
 800791c:	189b      	adds	r3, r3, r2
 800791e:	19db      	adds	r3, r3, r7
 8007920:	2210      	movs	r2, #16
 8007922:	701a      	strb	r2, [r3, #0]
 8007924:	e0ca      	b.n	8007abc <UART_SetConfig+0x390>
 8007926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a57      	ldr	r2, [pc, #348]	@ (8007a88 <UART_SetConfig+0x35c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d106      	bne.n	800793e <UART_SetConfig+0x212>
 8007930:	231b      	movs	r3, #27
 8007932:	2220      	movs	r2, #32
 8007934:	189b      	adds	r3, r3, r2
 8007936:	19db      	adds	r3, r3, r7
 8007938:	2200      	movs	r2, #0
 800793a:	701a      	strb	r2, [r3, #0]
 800793c:	e0be      	b.n	8007abc <UART_SetConfig+0x390>
 800793e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a52      	ldr	r2, [pc, #328]	@ (8007a8c <UART_SetConfig+0x360>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d106      	bne.n	8007956 <UART_SetConfig+0x22a>
 8007948:	231b      	movs	r3, #27
 800794a:	2220      	movs	r2, #32
 800794c:	189b      	adds	r3, r3, r2
 800794e:	19db      	adds	r3, r3, r7
 8007950:	2200      	movs	r2, #0
 8007952:	701a      	strb	r2, [r3, #0]
 8007954:	e0b2      	b.n	8007abc <UART_SetConfig+0x390>
 8007956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a4d      	ldr	r2, [pc, #308]	@ (8007a90 <UART_SetConfig+0x364>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d106      	bne.n	800796e <UART_SetConfig+0x242>
 8007960:	231b      	movs	r3, #27
 8007962:	2220      	movs	r2, #32
 8007964:	189b      	adds	r3, r3, r2
 8007966:	19db      	adds	r3, r3, r7
 8007968:	2200      	movs	r2, #0
 800796a:	701a      	strb	r2, [r3, #0]
 800796c:	e0a6      	b.n	8007abc <UART_SetConfig+0x390>
 800796e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a3e      	ldr	r2, [pc, #248]	@ (8007a6c <UART_SetConfig+0x340>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d13e      	bne.n	80079f6 <UART_SetConfig+0x2ca>
 8007978:	4b40      	ldr	r3, [pc, #256]	@ (8007a7c <UART_SetConfig+0x350>)
 800797a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800797c:	23c0      	movs	r3, #192	@ 0xc0
 800797e:	011b      	lsls	r3, r3, #4
 8007980:	4013      	ands	r3, r2
 8007982:	22c0      	movs	r2, #192	@ 0xc0
 8007984:	0112      	lsls	r2, r2, #4
 8007986:	4293      	cmp	r3, r2
 8007988:	d027      	beq.n	80079da <UART_SetConfig+0x2ae>
 800798a:	22c0      	movs	r2, #192	@ 0xc0
 800798c:	0112      	lsls	r2, r2, #4
 800798e:	4293      	cmp	r3, r2
 8007990:	d82a      	bhi.n	80079e8 <UART_SetConfig+0x2bc>
 8007992:	2280      	movs	r2, #128	@ 0x80
 8007994:	0112      	lsls	r2, r2, #4
 8007996:	4293      	cmp	r3, r2
 8007998:	d011      	beq.n	80079be <UART_SetConfig+0x292>
 800799a:	2280      	movs	r2, #128	@ 0x80
 800799c:	0112      	lsls	r2, r2, #4
 800799e:	4293      	cmp	r3, r2
 80079a0:	d822      	bhi.n	80079e8 <UART_SetConfig+0x2bc>
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d004      	beq.n	80079b0 <UART_SetConfig+0x284>
 80079a6:	2280      	movs	r2, #128	@ 0x80
 80079a8:	00d2      	lsls	r2, r2, #3
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d00e      	beq.n	80079cc <UART_SetConfig+0x2a0>
 80079ae:	e01b      	b.n	80079e8 <UART_SetConfig+0x2bc>
 80079b0:	231b      	movs	r3, #27
 80079b2:	2220      	movs	r2, #32
 80079b4:	189b      	adds	r3, r3, r2
 80079b6:	19db      	adds	r3, r3, r7
 80079b8:	2200      	movs	r2, #0
 80079ba:	701a      	strb	r2, [r3, #0]
 80079bc:	e07e      	b.n	8007abc <UART_SetConfig+0x390>
 80079be:	231b      	movs	r3, #27
 80079c0:	2220      	movs	r2, #32
 80079c2:	189b      	adds	r3, r3, r2
 80079c4:	19db      	adds	r3, r3, r7
 80079c6:	2202      	movs	r2, #2
 80079c8:	701a      	strb	r2, [r3, #0]
 80079ca:	e077      	b.n	8007abc <UART_SetConfig+0x390>
 80079cc:	231b      	movs	r3, #27
 80079ce:	2220      	movs	r2, #32
 80079d0:	189b      	adds	r3, r3, r2
 80079d2:	19db      	adds	r3, r3, r7
 80079d4:	2204      	movs	r2, #4
 80079d6:	701a      	strb	r2, [r3, #0]
 80079d8:	e070      	b.n	8007abc <UART_SetConfig+0x390>
 80079da:	231b      	movs	r3, #27
 80079dc:	2220      	movs	r2, #32
 80079de:	189b      	adds	r3, r3, r2
 80079e0:	19db      	adds	r3, r3, r7
 80079e2:	2208      	movs	r2, #8
 80079e4:	701a      	strb	r2, [r3, #0]
 80079e6:	e069      	b.n	8007abc <UART_SetConfig+0x390>
 80079e8:	231b      	movs	r3, #27
 80079ea:	2220      	movs	r2, #32
 80079ec:	189b      	adds	r3, r3, r2
 80079ee:	19db      	adds	r3, r3, r7
 80079f0:	2210      	movs	r2, #16
 80079f2:	701a      	strb	r2, [r3, #0]
 80079f4:	e062      	b.n	8007abc <UART_SetConfig+0x390>
 80079f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a1d      	ldr	r2, [pc, #116]	@ (8007a70 <UART_SetConfig+0x344>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d157      	bne.n	8007ab0 <UART_SetConfig+0x384>
 8007a00:	4b1e      	ldr	r3, [pc, #120]	@ (8007a7c <UART_SetConfig+0x350>)
 8007a02:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a04:	23c0      	movs	r3, #192	@ 0xc0
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4013      	ands	r3, r2
 8007a0a:	22c0      	movs	r2, #192	@ 0xc0
 8007a0c:	0092      	lsls	r2, r2, #2
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d040      	beq.n	8007a94 <UART_SetConfig+0x368>
 8007a12:	22c0      	movs	r2, #192	@ 0xc0
 8007a14:	0092      	lsls	r2, r2, #2
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d843      	bhi.n	8007aa2 <UART_SetConfig+0x376>
 8007a1a:	2280      	movs	r2, #128	@ 0x80
 8007a1c:	0092      	lsls	r2, r2, #2
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d011      	beq.n	8007a46 <UART_SetConfig+0x31a>
 8007a22:	2280      	movs	r2, #128	@ 0x80
 8007a24:	0092      	lsls	r2, r2, #2
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d83b      	bhi.n	8007aa2 <UART_SetConfig+0x376>
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d004      	beq.n	8007a38 <UART_SetConfig+0x30c>
 8007a2e:	2280      	movs	r2, #128	@ 0x80
 8007a30:	0052      	lsls	r2, r2, #1
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d00e      	beq.n	8007a54 <UART_SetConfig+0x328>
 8007a36:	e034      	b.n	8007aa2 <UART_SetConfig+0x376>
 8007a38:	231b      	movs	r3, #27
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	189b      	adds	r3, r3, r2
 8007a3e:	19db      	adds	r3, r3, r7
 8007a40:	2200      	movs	r2, #0
 8007a42:	701a      	strb	r2, [r3, #0]
 8007a44:	e03a      	b.n	8007abc <UART_SetConfig+0x390>
 8007a46:	231b      	movs	r3, #27
 8007a48:	2220      	movs	r2, #32
 8007a4a:	189b      	adds	r3, r3, r2
 8007a4c:	19db      	adds	r3, r3, r7
 8007a4e:	2202      	movs	r2, #2
 8007a50:	701a      	strb	r2, [r3, #0]
 8007a52:	e033      	b.n	8007abc <UART_SetConfig+0x390>
 8007a54:	231b      	movs	r3, #27
 8007a56:	2220      	movs	r2, #32
 8007a58:	189b      	adds	r3, r3, r2
 8007a5a:	19db      	adds	r3, r3, r7
 8007a5c:	2204      	movs	r2, #4
 8007a5e:	701a      	strb	r2, [r3, #0]
 8007a60:	e02c      	b.n	8007abc <UART_SetConfig+0x390>
 8007a62:	46c0      	nop			@ (mov r8, r8)
 8007a64:	cfff69f3 	.word	0xcfff69f3
 8007a68:	ffffcfff 	.word	0xffffcfff
 8007a6c:	40008000 	.word	0x40008000
 8007a70:	40008400 	.word	0x40008400
 8007a74:	11fff4ff 	.word	0x11fff4ff
 8007a78:	40013800 	.word	0x40013800
 8007a7c:	40021000 	.word	0x40021000
 8007a80:	40004400 	.word	0x40004400
 8007a84:	40004800 	.word	0x40004800
 8007a88:	40004c00 	.word	0x40004c00
 8007a8c:	40005000 	.word	0x40005000
 8007a90:	40013c00 	.word	0x40013c00
 8007a94:	231b      	movs	r3, #27
 8007a96:	2220      	movs	r2, #32
 8007a98:	189b      	adds	r3, r3, r2
 8007a9a:	19db      	adds	r3, r3, r7
 8007a9c:	2208      	movs	r2, #8
 8007a9e:	701a      	strb	r2, [r3, #0]
 8007aa0:	e00c      	b.n	8007abc <UART_SetConfig+0x390>
 8007aa2:	231b      	movs	r3, #27
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	189b      	adds	r3, r3, r2
 8007aa8:	19db      	adds	r3, r3, r7
 8007aaa:	2210      	movs	r2, #16
 8007aac:	701a      	strb	r2, [r3, #0]
 8007aae:	e005      	b.n	8007abc <UART_SetConfig+0x390>
 8007ab0:	231b      	movs	r3, #27
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	189b      	adds	r3, r3, r2
 8007ab6:	19db      	adds	r3, r3, r7
 8007ab8:	2210      	movs	r2, #16
 8007aba:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4ac1      	ldr	r2, [pc, #772]	@ (8007dc8 <UART_SetConfig+0x69c>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d005      	beq.n	8007ad2 <UART_SetConfig+0x3a6>
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4ac0      	ldr	r2, [pc, #768]	@ (8007dcc <UART_SetConfig+0x6a0>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d000      	beq.n	8007ad2 <UART_SetConfig+0x3a6>
 8007ad0:	e093      	b.n	8007bfa <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007ad2:	231b      	movs	r3, #27
 8007ad4:	2220      	movs	r2, #32
 8007ad6:	189b      	adds	r3, r3, r2
 8007ad8:	19db      	adds	r3, r3, r7
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	2b08      	cmp	r3, #8
 8007ade:	d015      	beq.n	8007b0c <UART_SetConfig+0x3e0>
 8007ae0:	dc18      	bgt.n	8007b14 <UART_SetConfig+0x3e8>
 8007ae2:	2b04      	cmp	r3, #4
 8007ae4:	d00d      	beq.n	8007b02 <UART_SetConfig+0x3d6>
 8007ae6:	dc15      	bgt.n	8007b14 <UART_SetConfig+0x3e8>
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d002      	beq.n	8007af2 <UART_SetConfig+0x3c6>
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d005      	beq.n	8007afc <UART_SetConfig+0x3d0>
 8007af0:	e010      	b.n	8007b14 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007af2:	f7fd fd83 	bl	80055fc <HAL_RCC_GetPCLK1Freq>
 8007af6:	0003      	movs	r3, r0
 8007af8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007afa:	e014      	b.n	8007b26 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007afc:	4bb4      	ldr	r3, [pc, #720]	@ (8007dd0 <UART_SetConfig+0x6a4>)
 8007afe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b00:	e011      	b.n	8007b26 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b02:	f7fd fcef 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 8007b06:	0003      	movs	r3, r0
 8007b08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b0a:	e00c      	b.n	8007b26 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b0c:	2380      	movs	r3, #128	@ 0x80
 8007b0e:	021b      	lsls	r3, r3, #8
 8007b10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b12:	e008      	b.n	8007b26 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8007b14:	2300      	movs	r3, #0
 8007b16:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007b18:	231a      	movs	r3, #26
 8007b1a:	2220      	movs	r2, #32
 8007b1c:	189b      	adds	r3, r3, r2
 8007b1e:	19db      	adds	r3, r3, r7
 8007b20:	2201      	movs	r2, #1
 8007b22:	701a      	strb	r2, [r3, #0]
        break;
 8007b24:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d100      	bne.n	8007b2e <UART_SetConfig+0x402>
 8007b2c:	e135      	b.n	8007d9a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b32:	4ba8      	ldr	r3, [pc, #672]	@ (8007dd4 <UART_SetConfig+0x6a8>)
 8007b34:	0052      	lsls	r2, r2, #1
 8007b36:	5ad3      	ldrh	r3, [r2, r3]
 8007b38:	0019      	movs	r1, r3
 8007b3a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007b3c:	f7f8 faf6 	bl	800012c <__udivsi3>
 8007b40:	0003      	movs	r3, r0
 8007b42:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b46:	685a      	ldr	r2, [r3, #4]
 8007b48:	0013      	movs	r3, r2
 8007b4a:	005b      	lsls	r3, r3, #1
 8007b4c:	189b      	adds	r3, r3, r2
 8007b4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d305      	bcc.n	8007b60 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d906      	bls.n	8007b6e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8007b60:	231a      	movs	r3, #26
 8007b62:	2220      	movs	r2, #32
 8007b64:	189b      	adds	r3, r3, r2
 8007b66:	19db      	adds	r3, r3, r7
 8007b68:	2201      	movs	r2, #1
 8007b6a:	701a      	strb	r2, [r3, #0]
 8007b6c:	e044      	b.n	8007bf8 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b70:	61bb      	str	r3, [r7, #24]
 8007b72:	2300      	movs	r3, #0
 8007b74:	61fb      	str	r3, [r7, #28]
 8007b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b7a:	4b96      	ldr	r3, [pc, #600]	@ (8007dd4 <UART_SetConfig+0x6a8>)
 8007b7c:	0052      	lsls	r2, r2, #1
 8007b7e:	5ad3      	ldrh	r3, [r2, r3]
 8007b80:	613b      	str	r3, [r7, #16]
 8007b82:	2300      	movs	r3, #0
 8007b84:	617b      	str	r3, [r7, #20]
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	69b8      	ldr	r0, [r7, #24]
 8007b8c:	69f9      	ldr	r1, [r7, #28]
 8007b8e:	f7f8 fc43 	bl	8000418 <__aeabi_uldivmod>
 8007b92:	0002      	movs	r2, r0
 8007b94:	000b      	movs	r3, r1
 8007b96:	0e11      	lsrs	r1, r2, #24
 8007b98:	021d      	lsls	r5, r3, #8
 8007b9a:	430d      	orrs	r5, r1
 8007b9c:	0214      	lsls	r4, r2, #8
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	085b      	lsrs	r3, r3, #1
 8007ba4:	60bb      	str	r3, [r7, #8]
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60fb      	str	r3, [r7, #12]
 8007baa:	68b8      	ldr	r0, [r7, #8]
 8007bac:	68f9      	ldr	r1, [r7, #12]
 8007bae:	1900      	adds	r0, r0, r4
 8007bb0:	4169      	adcs	r1, r5
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	603b      	str	r3, [r7, #0]
 8007bb8:	2300      	movs	r3, #0
 8007bba:	607b      	str	r3, [r7, #4]
 8007bbc:	683a      	ldr	r2, [r7, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f7f8 fc2a 	bl	8000418 <__aeabi_uldivmod>
 8007bc4:	0002      	movs	r2, r0
 8007bc6:	000b      	movs	r3, r1
 8007bc8:	0013      	movs	r3, r2
 8007bca:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bce:	23c0      	movs	r3, #192	@ 0xc0
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d309      	bcc.n	8007bea <UART_SetConfig+0x4be>
 8007bd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bd8:	2380      	movs	r3, #128	@ 0x80
 8007bda:	035b      	lsls	r3, r3, #13
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d204      	bcs.n	8007bea <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8007be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007be6:	60da      	str	r2, [r3, #12]
 8007be8:	e006      	b.n	8007bf8 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8007bea:	231a      	movs	r3, #26
 8007bec:	2220      	movs	r2, #32
 8007bee:	189b      	adds	r3, r3, r2
 8007bf0:	19db      	adds	r3, r3, r7
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8007bf6:	e0d0      	b.n	8007d9a <UART_SetConfig+0x66e>
 8007bf8:	e0cf      	b.n	8007d9a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfc:	69da      	ldr	r2, [r3, #28]
 8007bfe:	2380      	movs	r3, #128	@ 0x80
 8007c00:	021b      	lsls	r3, r3, #8
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d000      	beq.n	8007c08 <UART_SetConfig+0x4dc>
 8007c06:	e070      	b.n	8007cea <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8007c08:	231b      	movs	r3, #27
 8007c0a:	2220      	movs	r2, #32
 8007c0c:	189b      	adds	r3, r3, r2
 8007c0e:	19db      	adds	r3, r3, r7
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	2b08      	cmp	r3, #8
 8007c14:	d015      	beq.n	8007c42 <UART_SetConfig+0x516>
 8007c16:	dc18      	bgt.n	8007c4a <UART_SetConfig+0x51e>
 8007c18:	2b04      	cmp	r3, #4
 8007c1a:	d00d      	beq.n	8007c38 <UART_SetConfig+0x50c>
 8007c1c:	dc15      	bgt.n	8007c4a <UART_SetConfig+0x51e>
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d002      	beq.n	8007c28 <UART_SetConfig+0x4fc>
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d005      	beq.n	8007c32 <UART_SetConfig+0x506>
 8007c26:	e010      	b.n	8007c4a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c28:	f7fd fce8 	bl	80055fc <HAL_RCC_GetPCLK1Freq>
 8007c2c:	0003      	movs	r3, r0
 8007c2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c30:	e014      	b.n	8007c5c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c32:	4b67      	ldr	r3, [pc, #412]	@ (8007dd0 <UART_SetConfig+0x6a4>)
 8007c34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c36:	e011      	b.n	8007c5c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c38:	f7fd fc54 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 8007c3c:	0003      	movs	r3, r0
 8007c3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c40:	e00c      	b.n	8007c5c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c42:	2380      	movs	r3, #128	@ 0x80
 8007c44:	021b      	lsls	r3, r3, #8
 8007c46:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c48:	e008      	b.n	8007c5c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007c4e:	231a      	movs	r3, #26
 8007c50:	2220      	movs	r2, #32
 8007c52:	189b      	adds	r3, r3, r2
 8007c54:	19db      	adds	r3, r3, r7
 8007c56:	2201      	movs	r2, #1
 8007c58:	701a      	strb	r2, [r3, #0]
        break;
 8007c5a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d100      	bne.n	8007c64 <UART_SetConfig+0x538>
 8007c62:	e09a      	b.n	8007d9a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c68:	4b5a      	ldr	r3, [pc, #360]	@ (8007dd4 <UART_SetConfig+0x6a8>)
 8007c6a:	0052      	lsls	r2, r2, #1
 8007c6c:	5ad3      	ldrh	r3, [r2, r3]
 8007c6e:	0019      	movs	r1, r3
 8007c70:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007c72:	f7f8 fa5b 	bl	800012c <__udivsi3>
 8007c76:	0003      	movs	r3, r0
 8007c78:	005a      	lsls	r2, r3, #1
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	085b      	lsrs	r3, r3, #1
 8007c80:	18d2      	adds	r2, r2, r3
 8007c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	0019      	movs	r1, r3
 8007c88:	0010      	movs	r0, r2
 8007c8a:	f7f8 fa4f 	bl	800012c <__udivsi3>
 8007c8e:	0003      	movs	r3, r0
 8007c90:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c94:	2b0f      	cmp	r3, #15
 8007c96:	d921      	bls.n	8007cdc <UART_SetConfig+0x5b0>
 8007c98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c9a:	2380      	movs	r3, #128	@ 0x80
 8007c9c:	025b      	lsls	r3, r3, #9
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d21c      	bcs.n	8007cdc <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	200e      	movs	r0, #14
 8007ca8:	2420      	movs	r4, #32
 8007caa:	1903      	adds	r3, r0, r4
 8007cac:	19db      	adds	r3, r3, r7
 8007cae:	210f      	movs	r1, #15
 8007cb0:	438a      	bics	r2, r1
 8007cb2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb6:	085b      	lsrs	r3, r3, #1
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	2207      	movs	r2, #7
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	b299      	uxth	r1, r3
 8007cc0:	1903      	adds	r3, r0, r4
 8007cc2:	19db      	adds	r3, r3, r7
 8007cc4:	1902      	adds	r2, r0, r4
 8007cc6:	19d2      	adds	r2, r2, r7
 8007cc8:	8812      	ldrh	r2, [r2, #0]
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	1902      	adds	r2, r0, r4
 8007cd4:	19d2      	adds	r2, r2, r7
 8007cd6:	8812      	ldrh	r2, [r2, #0]
 8007cd8:	60da      	str	r2, [r3, #12]
 8007cda:	e05e      	b.n	8007d9a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8007cdc:	231a      	movs	r3, #26
 8007cde:	2220      	movs	r2, #32
 8007ce0:	189b      	adds	r3, r3, r2
 8007ce2:	19db      	adds	r3, r3, r7
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	701a      	strb	r2, [r3, #0]
 8007ce8:	e057      	b.n	8007d9a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cea:	231b      	movs	r3, #27
 8007cec:	2220      	movs	r2, #32
 8007cee:	189b      	adds	r3, r3, r2
 8007cf0:	19db      	adds	r3, r3, r7
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	2b08      	cmp	r3, #8
 8007cf6:	d015      	beq.n	8007d24 <UART_SetConfig+0x5f8>
 8007cf8:	dc18      	bgt.n	8007d2c <UART_SetConfig+0x600>
 8007cfa:	2b04      	cmp	r3, #4
 8007cfc:	d00d      	beq.n	8007d1a <UART_SetConfig+0x5ee>
 8007cfe:	dc15      	bgt.n	8007d2c <UART_SetConfig+0x600>
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <UART_SetConfig+0x5de>
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d005      	beq.n	8007d14 <UART_SetConfig+0x5e8>
 8007d08:	e010      	b.n	8007d2c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d0a:	f7fd fc77 	bl	80055fc <HAL_RCC_GetPCLK1Freq>
 8007d0e:	0003      	movs	r3, r0
 8007d10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d12:	e014      	b.n	8007d3e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d14:	4b2e      	ldr	r3, [pc, #184]	@ (8007dd0 <UART_SetConfig+0x6a4>)
 8007d16:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d18:	e011      	b.n	8007d3e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d1a:	f7fd fbe3 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 8007d1e:	0003      	movs	r3, r0
 8007d20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d22:	e00c      	b.n	8007d3e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d24:	2380      	movs	r3, #128	@ 0x80
 8007d26:	021b      	lsls	r3, r3, #8
 8007d28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d2a:	e008      	b.n	8007d3e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007d30:	231a      	movs	r3, #26
 8007d32:	2220      	movs	r2, #32
 8007d34:	189b      	adds	r3, r3, r2
 8007d36:	19db      	adds	r3, r3, r7
 8007d38:	2201      	movs	r2, #1
 8007d3a:	701a      	strb	r2, [r3, #0]
        break;
 8007d3c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8007d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d02a      	beq.n	8007d9a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d48:	4b22      	ldr	r3, [pc, #136]	@ (8007dd4 <UART_SetConfig+0x6a8>)
 8007d4a:	0052      	lsls	r2, r2, #1
 8007d4c:	5ad3      	ldrh	r3, [r2, r3]
 8007d4e:	0019      	movs	r1, r3
 8007d50:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007d52:	f7f8 f9eb 	bl	800012c <__udivsi3>
 8007d56:	0003      	movs	r3, r0
 8007d58:	001a      	movs	r2, r3
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	085b      	lsrs	r3, r3, #1
 8007d60:	18d2      	adds	r2, r2, r3
 8007d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	0019      	movs	r1, r3
 8007d68:	0010      	movs	r0, r2
 8007d6a:	f7f8 f9df 	bl	800012c <__udivsi3>
 8007d6e:	0003      	movs	r3, r0
 8007d70:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d74:	2b0f      	cmp	r3, #15
 8007d76:	d90a      	bls.n	8007d8e <UART_SetConfig+0x662>
 8007d78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d7a:	2380      	movs	r3, #128	@ 0x80
 8007d7c:	025b      	lsls	r3, r3, #9
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d205      	bcs.n	8007d8e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	60da      	str	r2, [r3, #12]
 8007d8c:	e005      	b.n	8007d9a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8007d8e:	231a      	movs	r3, #26
 8007d90:	2220      	movs	r2, #32
 8007d92:	189b      	adds	r3, r3, r2
 8007d94:	19db      	adds	r3, r3, r7
 8007d96:	2201      	movs	r2, #1
 8007d98:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d9c:	226a      	movs	r2, #106	@ 0x6a
 8007d9e:	2101      	movs	r1, #1
 8007da0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da4:	2268      	movs	r2, #104	@ 0x68
 8007da6:	2101      	movs	r1, #1
 8007da8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dac:	2200      	movs	r2, #0
 8007dae:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db2:	2200      	movs	r2, #0
 8007db4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007db6:	231a      	movs	r3, #26
 8007db8:	2220      	movs	r2, #32
 8007dba:	189b      	adds	r3, r3, r2
 8007dbc:	19db      	adds	r3, r3, r7
 8007dbe:	781b      	ldrb	r3, [r3, #0]
}
 8007dc0:	0018      	movs	r0, r3
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	b010      	add	sp, #64	@ 0x40
 8007dc6:	bdb0      	pop	{r4, r5, r7, pc}
 8007dc8:	40008000 	.word	0x40008000
 8007dcc:	40008400 	.word	0x40008400
 8007dd0:	00f42400 	.word	0x00f42400
 8007dd4:	08009708 	.word	0x08009708

08007dd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de4:	2208      	movs	r2, #8
 8007de6:	4013      	ands	r3, r2
 8007de8:	d00b      	beq.n	8007e02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	4a4a      	ldr	r2, [pc, #296]	@ (8007f1c <UART_AdvFeatureConfig+0x144>)
 8007df2:	4013      	ands	r3, r2
 8007df4:	0019      	movs	r1, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e06:	2201      	movs	r2, #1
 8007e08:	4013      	ands	r3, r2
 8007e0a:	d00b      	beq.n	8007e24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	4a43      	ldr	r2, [pc, #268]	@ (8007f20 <UART_AdvFeatureConfig+0x148>)
 8007e14:	4013      	ands	r3, r2
 8007e16:	0019      	movs	r1, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	430a      	orrs	r2, r1
 8007e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e28:	2202      	movs	r2, #2
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	d00b      	beq.n	8007e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	4a3b      	ldr	r2, [pc, #236]	@ (8007f24 <UART_AdvFeatureConfig+0x14c>)
 8007e36:	4013      	ands	r3, r2
 8007e38:	0019      	movs	r1, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	430a      	orrs	r2, r1
 8007e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e4a:	2204      	movs	r2, #4
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	d00b      	beq.n	8007e68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	4a34      	ldr	r2, [pc, #208]	@ (8007f28 <UART_AdvFeatureConfig+0x150>)
 8007e58:	4013      	ands	r3, r2
 8007e5a:	0019      	movs	r1, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e6c:	2210      	movs	r2, #16
 8007e6e:	4013      	ands	r3, r2
 8007e70:	d00b      	beq.n	8007e8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	4a2c      	ldr	r2, [pc, #176]	@ (8007f2c <UART_AdvFeatureConfig+0x154>)
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	0019      	movs	r1, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e8e:	2220      	movs	r2, #32
 8007e90:	4013      	ands	r3, r2
 8007e92:	d00b      	beq.n	8007eac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	4a25      	ldr	r2, [pc, #148]	@ (8007f30 <UART_AdvFeatureConfig+0x158>)
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	0019      	movs	r1, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	430a      	orrs	r2, r1
 8007eaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eb0:	2240      	movs	r2, #64	@ 0x40
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	d01d      	beq.n	8007ef2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8007f34 <UART_AdvFeatureConfig+0x15c>)
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	0019      	movs	r1, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ed2:	2380      	movs	r3, #128	@ 0x80
 8007ed4:	035b      	lsls	r3, r3, #13
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d10b      	bne.n	8007ef2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	4a15      	ldr	r2, [pc, #84]	@ (8007f38 <UART_AdvFeatureConfig+0x160>)
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	0019      	movs	r1, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef6:	2280      	movs	r2, #128	@ 0x80
 8007ef8:	4013      	ands	r3, r2
 8007efa:	d00b      	beq.n	8007f14 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	4a0e      	ldr	r2, [pc, #56]	@ (8007f3c <UART_AdvFeatureConfig+0x164>)
 8007f04:	4013      	ands	r3, r2
 8007f06:	0019      	movs	r1, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	430a      	orrs	r2, r1
 8007f12:	605a      	str	r2, [r3, #4]
  }
}
 8007f14:	46c0      	nop			@ (mov r8, r8)
 8007f16:	46bd      	mov	sp, r7
 8007f18:	b002      	add	sp, #8
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	ffff7fff 	.word	0xffff7fff
 8007f20:	fffdffff 	.word	0xfffdffff
 8007f24:	fffeffff 	.word	0xfffeffff
 8007f28:	fffbffff 	.word	0xfffbffff
 8007f2c:	ffffefff 	.word	0xffffefff
 8007f30:	ffffdfff 	.word	0xffffdfff
 8007f34:	ffefffff 	.word	0xffefffff
 8007f38:	ff9fffff 	.word	0xff9fffff
 8007f3c:	fff7ffff 	.word	0xfff7ffff

08007f40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b092      	sub	sp, #72	@ 0x48
 8007f44:	af02      	add	r7, sp, #8
 8007f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2290      	movs	r2, #144	@ 0x90
 8007f4c:	2100      	movs	r1, #0
 8007f4e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f50:	f7fb fd32 	bl	80039b8 <HAL_GetTick>
 8007f54:	0003      	movs	r3, r0
 8007f56:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2208      	movs	r2, #8
 8007f60:	4013      	ands	r3, r2
 8007f62:	2b08      	cmp	r3, #8
 8007f64:	d12d      	bne.n	8007fc2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f68:	2280      	movs	r2, #128	@ 0x80
 8007f6a:	0391      	lsls	r1, r2, #14
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	4a47      	ldr	r2, [pc, #284]	@ (800808c <UART_CheckIdleState+0x14c>)
 8007f70:	9200      	str	r2, [sp, #0]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f000 f88e 	bl	8008094 <UART_WaitOnFlagUntilTimeout>
 8007f78:	1e03      	subs	r3, r0, #0
 8007f7a:	d022      	beq.n	8007fc2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8007f80:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007f84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f86:	2301      	movs	r3, #1
 8007f88:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f8c:	f383 8810 	msr	PRIMASK, r3
}
 8007f90:	46c0      	nop			@ (mov r8, r8)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2180      	movs	r1, #128	@ 0x80
 8007f9e:	438a      	bics	r2, r1
 8007fa0:	601a      	str	r2, [r3, #0]
 8007fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fa8:	f383 8810 	msr	PRIMASK, r3
}
 8007fac:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2288      	movs	r2, #136	@ 0x88
 8007fb2:	2120      	movs	r1, #32
 8007fb4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2284      	movs	r2, #132	@ 0x84
 8007fba:	2100      	movs	r1, #0
 8007fbc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e060      	b.n	8008084 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2204      	movs	r2, #4
 8007fca:	4013      	ands	r3, r2
 8007fcc:	2b04      	cmp	r3, #4
 8007fce:	d146      	bne.n	800805e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fd2:	2280      	movs	r2, #128	@ 0x80
 8007fd4:	03d1      	lsls	r1, r2, #15
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	4a2c      	ldr	r2, [pc, #176]	@ (800808c <UART_CheckIdleState+0x14c>)
 8007fda:	9200      	str	r2, [sp, #0]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f000 f859 	bl	8008094 <UART_WaitOnFlagUntilTimeout>
 8007fe2:	1e03      	subs	r3, r0, #0
 8007fe4:	d03b      	beq.n	800805e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8007fea:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fec:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fee:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	f383 8810 	msr	PRIMASK, r3
}
 8007ffa:	46c0      	nop			@ (mov r8, r8)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4922      	ldr	r1, [pc, #136]	@ (8008090 <UART_CheckIdleState+0x150>)
 8008008:	400a      	ands	r2, r1
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800800e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f383 8810 	msr	PRIMASK, r3
}
 8008016:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008018:	f3ef 8310 	mrs	r3, PRIMASK
 800801c:	61bb      	str	r3, [r7, #24]
  return(result);
 800801e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008020:	633b      	str	r3, [r7, #48]	@ 0x30
 8008022:	2301      	movs	r3, #1
 8008024:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	f383 8810 	msr	PRIMASK, r3
}
 800802c:	46c0      	nop			@ (mov r8, r8)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	689a      	ldr	r2, [r3, #8]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2101      	movs	r1, #1
 800803a:	438a      	bics	r2, r1
 800803c:	609a      	str	r2, [r3, #8]
 800803e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008040:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008042:	6a3b      	ldr	r3, [r7, #32]
 8008044:	f383 8810 	msr	PRIMASK, r3
}
 8008048:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	228c      	movs	r2, #140	@ 0x8c
 800804e:	2120      	movs	r1, #32
 8008050:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2284      	movs	r2, #132	@ 0x84
 8008056:	2100      	movs	r1, #0
 8008058:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800805a:	2303      	movs	r3, #3
 800805c:	e012      	b.n	8008084 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2288      	movs	r2, #136	@ 0x88
 8008062:	2120      	movs	r1, #32
 8008064:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	228c      	movs	r2, #140	@ 0x8c
 800806a:	2120      	movs	r1, #32
 800806c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2284      	movs	r2, #132	@ 0x84
 800807e:	2100      	movs	r1, #0
 8008080:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	0018      	movs	r0, r3
 8008086:	46bd      	mov	sp, r7
 8008088:	b010      	add	sp, #64	@ 0x40
 800808a:	bd80      	pop	{r7, pc}
 800808c:	01ffffff 	.word	0x01ffffff
 8008090:	fffffedf 	.word	0xfffffedf

08008094 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	603b      	str	r3, [r7, #0]
 80080a0:	1dfb      	adds	r3, r7, #7
 80080a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080a4:	e051      	b.n	800814a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	3301      	adds	r3, #1
 80080aa:	d04e      	beq.n	800814a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080ac:	f7fb fc84 	bl	80039b8 <HAL_GetTick>
 80080b0:	0002      	movs	r2, r0
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	69ba      	ldr	r2, [r7, #24]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d302      	bcc.n	80080c2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e051      	b.n	800816a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2204      	movs	r2, #4
 80080ce:	4013      	ands	r3, r2
 80080d0:	d03b      	beq.n	800814a <UART_WaitOnFlagUntilTimeout+0xb6>
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	2b80      	cmp	r3, #128	@ 0x80
 80080d6:	d038      	beq.n	800814a <UART_WaitOnFlagUntilTimeout+0xb6>
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2b40      	cmp	r3, #64	@ 0x40
 80080dc:	d035      	beq.n	800814a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	69db      	ldr	r3, [r3, #28]
 80080e4:	2208      	movs	r2, #8
 80080e6:	4013      	ands	r3, r2
 80080e8:	2b08      	cmp	r3, #8
 80080ea:	d111      	bne.n	8008110 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2208      	movs	r2, #8
 80080f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	0018      	movs	r0, r3
 80080f8:	f000 f83c 	bl	8008174 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2290      	movs	r2, #144	@ 0x90
 8008100:	2108      	movs	r1, #8
 8008102:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2284      	movs	r2, #132	@ 0x84
 8008108:	2100      	movs	r1, #0
 800810a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e02c      	b.n	800816a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	69da      	ldr	r2, [r3, #28]
 8008116:	2380      	movs	r3, #128	@ 0x80
 8008118:	011b      	lsls	r3, r3, #4
 800811a:	401a      	ands	r2, r3
 800811c:	2380      	movs	r3, #128	@ 0x80
 800811e:	011b      	lsls	r3, r3, #4
 8008120:	429a      	cmp	r2, r3
 8008122:	d112      	bne.n	800814a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2280      	movs	r2, #128	@ 0x80
 800812a:	0112      	lsls	r2, r2, #4
 800812c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	0018      	movs	r0, r3
 8008132:	f000 f81f 	bl	8008174 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2290      	movs	r2, #144	@ 0x90
 800813a:	2120      	movs	r1, #32
 800813c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2284      	movs	r2, #132	@ 0x84
 8008142:	2100      	movs	r1, #0
 8008144:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e00f      	b.n	800816a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	69db      	ldr	r3, [r3, #28]
 8008150:	68ba      	ldr	r2, [r7, #8]
 8008152:	4013      	ands	r3, r2
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	425a      	negs	r2, r3
 800815a:	4153      	adcs	r3, r2
 800815c:	b2db      	uxtb	r3, r3
 800815e:	001a      	movs	r2, r3
 8008160:	1dfb      	adds	r3, r7, #7
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	429a      	cmp	r2, r3
 8008166:	d09e      	beq.n	80080a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	0018      	movs	r0, r3
 800816c:	46bd      	mov	sp, r7
 800816e:	b004      	add	sp, #16
 8008170:	bd80      	pop	{r7, pc}
	...

08008174 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b08e      	sub	sp, #56	@ 0x38
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800817c:	f3ef 8310 	mrs	r3, PRIMASK
 8008180:	617b      	str	r3, [r7, #20]
  return(result);
 8008182:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008184:	637b      	str	r3, [r7, #52]	@ 0x34
 8008186:	2301      	movs	r3, #1
 8008188:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	f383 8810 	msr	PRIMASK, r3
}
 8008190:	46c0      	nop			@ (mov r8, r8)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4926      	ldr	r1, [pc, #152]	@ (8008238 <UART_EndRxTransfer+0xc4>)
 800819e:	400a      	ands	r2, r1
 80081a0:	601a      	str	r2, [r3, #0]
 80081a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	f383 8810 	msr	PRIMASK, r3
}
 80081ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081ae:	f3ef 8310 	mrs	r3, PRIMASK
 80081b2:	623b      	str	r3, [r7, #32]
  return(result);
 80081b4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80081b8:	2301      	movs	r3, #1
 80081ba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081be:	f383 8810 	msr	PRIMASK, r3
}
 80081c2:	46c0      	nop			@ (mov r8, r8)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	689a      	ldr	r2, [r3, #8]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	491b      	ldr	r1, [pc, #108]	@ (800823c <UART_EndRxTransfer+0xc8>)
 80081d0:	400a      	ands	r2, r1
 80081d2:	609a      	str	r2, [r3, #8]
 80081d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081da:	f383 8810 	msr	PRIMASK, r3
}
 80081de:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d118      	bne.n	800821a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081e8:	f3ef 8310 	mrs	r3, PRIMASK
 80081ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80081ee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081f2:	2301      	movs	r3, #1
 80081f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f383 8810 	msr	PRIMASK, r3
}
 80081fc:	46c0      	nop			@ (mov r8, r8)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2110      	movs	r1, #16
 800820a:	438a      	bics	r2, r1
 800820c:	601a      	str	r2, [r3, #0]
 800820e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008210:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	f383 8810 	msr	PRIMASK, r3
}
 8008218:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	228c      	movs	r2, #140	@ 0x8c
 800821e:	2120      	movs	r1, #32
 8008220:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800822e:	46c0      	nop			@ (mov r8, r8)
 8008230:	46bd      	mov	sp, r7
 8008232:	b00e      	add	sp, #56	@ 0x38
 8008234:	bd80      	pop	{r7, pc}
 8008236:	46c0      	nop			@ (mov r8, r8)
 8008238:	fffffedf 	.word	0xfffffedf
 800823c:	effffffe 	.word	0xeffffffe

08008240 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2284      	movs	r2, #132	@ 0x84
 800824c:	5c9b      	ldrb	r3, [r3, r2]
 800824e:	2b01      	cmp	r3, #1
 8008250:	d101      	bne.n	8008256 <HAL_UARTEx_DisableFifoMode+0x16>
 8008252:	2302      	movs	r3, #2
 8008254:	e027      	b.n	80082a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2284      	movs	r2, #132	@ 0x84
 800825a:	2101      	movs	r1, #1
 800825c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2288      	movs	r2, #136	@ 0x88
 8008262:	2124      	movs	r1, #36	@ 0x24
 8008264:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2101      	movs	r1, #1
 800827a:	438a      	bics	r2, r1
 800827c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	4a0b      	ldr	r2, [pc, #44]	@ (80082b0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008282:	4013      	ands	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2288      	movs	r2, #136	@ 0x88
 8008298:	2120      	movs	r1, #32
 800829a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2284      	movs	r2, #132	@ 0x84
 80082a0:	2100      	movs	r1, #0
 80082a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	0018      	movs	r0, r3
 80082a8:	46bd      	mov	sp, r7
 80082aa:	b004      	add	sp, #16
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	46c0      	nop			@ (mov r8, r8)
 80082b0:	dfffffff 	.word	0xdfffffff

080082b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2284      	movs	r2, #132	@ 0x84
 80082c2:	5c9b      	ldrb	r3, [r3, r2]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d101      	bne.n	80082cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80082c8:	2302      	movs	r3, #2
 80082ca:	e02e      	b.n	800832a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2284      	movs	r2, #132	@ 0x84
 80082d0:	2101      	movs	r1, #1
 80082d2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2288      	movs	r2, #136	@ 0x88
 80082d8:	2124      	movs	r1, #36	@ 0x24
 80082da:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2101      	movs	r1, #1
 80082f0:	438a      	bics	r2, r1
 80082f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	00db      	lsls	r3, r3, #3
 80082fc:	08d9      	lsrs	r1, r3, #3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	683a      	ldr	r2, [r7, #0]
 8008304:	430a      	orrs	r2, r1
 8008306:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	0018      	movs	r0, r3
 800830c:	f000 f854 	bl	80083b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2288      	movs	r2, #136	@ 0x88
 800831c:	2120      	movs	r1, #32
 800831e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2284      	movs	r2, #132	@ 0x84
 8008324:	2100      	movs	r1, #0
 8008326:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	0018      	movs	r0, r3
 800832c:	46bd      	mov	sp, r7
 800832e:	b004      	add	sp, #16
 8008330:	bd80      	pop	{r7, pc}
	...

08008334 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2284      	movs	r2, #132	@ 0x84
 8008342:	5c9b      	ldrb	r3, [r3, r2]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d101      	bne.n	800834c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008348:	2302      	movs	r3, #2
 800834a:	e02f      	b.n	80083ac <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2284      	movs	r2, #132	@ 0x84
 8008350:	2101      	movs	r1, #1
 8008352:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2288      	movs	r2, #136	@ 0x88
 8008358:	2124      	movs	r1, #36	@ 0x24
 800835a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2101      	movs	r1, #1
 8008370:	438a      	bics	r2, r1
 8008372:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	4a0e      	ldr	r2, [pc, #56]	@ (80083b4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800837c:	4013      	ands	r3, r2
 800837e:	0019      	movs	r1, r3
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	683a      	ldr	r2, [r7, #0]
 8008386:	430a      	orrs	r2, r1
 8008388:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	0018      	movs	r0, r3
 800838e:	f000 f813 	bl	80083b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2288      	movs	r2, #136	@ 0x88
 800839e:	2120      	movs	r1, #32
 80083a0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2284      	movs	r2, #132	@ 0x84
 80083a6:	2100      	movs	r1, #0
 80083a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	0018      	movs	r0, r3
 80083ae:	46bd      	mov	sp, r7
 80083b0:	b004      	add	sp, #16
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	f1ffffff 	.word	0xf1ffffff

080083b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80083b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d108      	bne.n	80083da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	226a      	movs	r2, #106	@ 0x6a
 80083cc:	2101      	movs	r1, #1
 80083ce:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2268      	movs	r2, #104	@ 0x68
 80083d4:	2101      	movs	r1, #1
 80083d6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80083d8:	e043      	b.n	8008462 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80083da:	260f      	movs	r6, #15
 80083dc:	19bb      	adds	r3, r7, r6
 80083de:	2208      	movs	r2, #8
 80083e0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80083e2:	200e      	movs	r0, #14
 80083e4:	183b      	adds	r3, r7, r0
 80083e6:	2208      	movs	r2, #8
 80083e8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	0e5b      	lsrs	r3, r3, #25
 80083f2:	b2da      	uxtb	r2, r3
 80083f4:	240d      	movs	r4, #13
 80083f6:	193b      	adds	r3, r7, r4
 80083f8:	2107      	movs	r1, #7
 80083fa:	400a      	ands	r2, r1
 80083fc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	0f5b      	lsrs	r3, r3, #29
 8008406:	b2da      	uxtb	r2, r3
 8008408:	250c      	movs	r5, #12
 800840a:	197b      	adds	r3, r7, r5
 800840c:	2107      	movs	r1, #7
 800840e:	400a      	ands	r2, r1
 8008410:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008412:	183b      	adds	r3, r7, r0
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	197a      	adds	r2, r7, r5
 8008418:	7812      	ldrb	r2, [r2, #0]
 800841a:	4914      	ldr	r1, [pc, #80]	@ (800846c <UARTEx_SetNbDataToProcess+0xb4>)
 800841c:	5c8a      	ldrb	r2, [r1, r2]
 800841e:	435a      	muls	r2, r3
 8008420:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008422:	197b      	adds	r3, r7, r5
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	4a12      	ldr	r2, [pc, #72]	@ (8008470 <UARTEx_SetNbDataToProcess+0xb8>)
 8008428:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800842a:	0019      	movs	r1, r3
 800842c:	f7f7 ff08 	bl	8000240 <__divsi3>
 8008430:	0003      	movs	r3, r0
 8008432:	b299      	uxth	r1, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	226a      	movs	r2, #106	@ 0x6a
 8008438:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800843a:	19bb      	adds	r3, r7, r6
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	193a      	adds	r2, r7, r4
 8008440:	7812      	ldrb	r2, [r2, #0]
 8008442:	490a      	ldr	r1, [pc, #40]	@ (800846c <UARTEx_SetNbDataToProcess+0xb4>)
 8008444:	5c8a      	ldrb	r2, [r1, r2]
 8008446:	435a      	muls	r2, r3
 8008448:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800844a:	193b      	adds	r3, r7, r4
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	4a08      	ldr	r2, [pc, #32]	@ (8008470 <UARTEx_SetNbDataToProcess+0xb8>)
 8008450:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008452:	0019      	movs	r1, r3
 8008454:	f7f7 fef4 	bl	8000240 <__divsi3>
 8008458:	0003      	movs	r3, r0
 800845a:	b299      	uxth	r1, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2268      	movs	r2, #104	@ 0x68
 8008460:	5299      	strh	r1, [r3, r2]
}
 8008462:	46c0      	nop			@ (mov r8, r8)
 8008464:	46bd      	mov	sp, r7
 8008466:	b005      	add	sp, #20
 8008468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800846a:	46c0      	nop			@ (mov r8, r8)
 800846c:	08009720 	.word	0x08009720
 8008470:	08009728 	.word	0x08009728

08008474 <_strtol_l.constprop.0>:
 8008474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008476:	b085      	sub	sp, #20
 8008478:	0017      	movs	r7, r2
 800847a:	001e      	movs	r6, r3
 800847c:	9003      	str	r0, [sp, #12]
 800847e:	9101      	str	r1, [sp, #4]
 8008480:	2b24      	cmp	r3, #36	@ 0x24
 8008482:	d844      	bhi.n	800850e <_strtol_l.constprop.0+0x9a>
 8008484:	000c      	movs	r4, r1
 8008486:	2b01      	cmp	r3, #1
 8008488:	d041      	beq.n	800850e <_strtol_l.constprop.0+0x9a>
 800848a:	4b3d      	ldr	r3, [pc, #244]	@ (8008580 <_strtol_l.constprop.0+0x10c>)
 800848c:	2208      	movs	r2, #8
 800848e:	469c      	mov	ip, r3
 8008490:	0023      	movs	r3, r4
 8008492:	4661      	mov	r1, ip
 8008494:	781d      	ldrb	r5, [r3, #0]
 8008496:	3401      	adds	r4, #1
 8008498:	5d48      	ldrb	r0, [r1, r5]
 800849a:	0001      	movs	r1, r0
 800849c:	4011      	ands	r1, r2
 800849e:	4210      	tst	r0, r2
 80084a0:	d1f6      	bne.n	8008490 <_strtol_l.constprop.0+0x1c>
 80084a2:	2d2d      	cmp	r5, #45	@ 0x2d
 80084a4:	d13a      	bne.n	800851c <_strtol_l.constprop.0+0xa8>
 80084a6:	7825      	ldrb	r5, [r4, #0]
 80084a8:	1c9c      	adds	r4, r3, #2
 80084aa:	2301      	movs	r3, #1
 80084ac:	9300      	str	r3, [sp, #0]
 80084ae:	2210      	movs	r2, #16
 80084b0:	0033      	movs	r3, r6
 80084b2:	4393      	bics	r3, r2
 80084b4:	d109      	bne.n	80084ca <_strtol_l.constprop.0+0x56>
 80084b6:	2d30      	cmp	r5, #48	@ 0x30
 80084b8:	d136      	bne.n	8008528 <_strtol_l.constprop.0+0xb4>
 80084ba:	2120      	movs	r1, #32
 80084bc:	7823      	ldrb	r3, [r4, #0]
 80084be:	438b      	bics	r3, r1
 80084c0:	2b58      	cmp	r3, #88	@ 0x58
 80084c2:	d131      	bne.n	8008528 <_strtol_l.constprop.0+0xb4>
 80084c4:	0016      	movs	r6, r2
 80084c6:	7865      	ldrb	r5, [r4, #1]
 80084c8:	3402      	adds	r4, #2
 80084ca:	4a2e      	ldr	r2, [pc, #184]	@ (8008584 <_strtol_l.constprop.0+0x110>)
 80084cc:	9b00      	ldr	r3, [sp, #0]
 80084ce:	4694      	mov	ip, r2
 80084d0:	4463      	add	r3, ip
 80084d2:	0031      	movs	r1, r6
 80084d4:	0018      	movs	r0, r3
 80084d6:	9302      	str	r3, [sp, #8]
 80084d8:	f7f7 feae 	bl	8000238 <__aeabi_uidivmod>
 80084dc:	2200      	movs	r2, #0
 80084de:	4684      	mov	ip, r0
 80084e0:	0010      	movs	r0, r2
 80084e2:	002b      	movs	r3, r5
 80084e4:	3b30      	subs	r3, #48	@ 0x30
 80084e6:	2b09      	cmp	r3, #9
 80084e8:	d825      	bhi.n	8008536 <_strtol_l.constprop.0+0xc2>
 80084ea:	001d      	movs	r5, r3
 80084ec:	42ae      	cmp	r6, r5
 80084ee:	dd31      	ble.n	8008554 <_strtol_l.constprop.0+0xe0>
 80084f0:	1c53      	adds	r3, r2, #1
 80084f2:	d009      	beq.n	8008508 <_strtol_l.constprop.0+0x94>
 80084f4:	2201      	movs	r2, #1
 80084f6:	4252      	negs	r2, r2
 80084f8:	4584      	cmp	ip, r0
 80084fa:	d305      	bcc.n	8008508 <_strtol_l.constprop.0+0x94>
 80084fc:	d101      	bne.n	8008502 <_strtol_l.constprop.0+0x8e>
 80084fe:	42a9      	cmp	r1, r5
 8008500:	db25      	blt.n	800854e <_strtol_l.constprop.0+0xda>
 8008502:	2201      	movs	r2, #1
 8008504:	4370      	muls	r0, r6
 8008506:	1828      	adds	r0, r5, r0
 8008508:	7825      	ldrb	r5, [r4, #0]
 800850a:	3401      	adds	r4, #1
 800850c:	e7e9      	b.n	80084e2 <_strtol_l.constprop.0+0x6e>
 800850e:	f000 f86f 	bl	80085f0 <__errno>
 8008512:	2316      	movs	r3, #22
 8008514:	6003      	str	r3, [r0, #0]
 8008516:	2000      	movs	r0, #0
 8008518:	b005      	add	sp, #20
 800851a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800851c:	9100      	str	r1, [sp, #0]
 800851e:	2d2b      	cmp	r5, #43	@ 0x2b
 8008520:	d1c5      	bne.n	80084ae <_strtol_l.constprop.0+0x3a>
 8008522:	7825      	ldrb	r5, [r4, #0]
 8008524:	1c9c      	adds	r4, r3, #2
 8008526:	e7c2      	b.n	80084ae <_strtol_l.constprop.0+0x3a>
 8008528:	2e00      	cmp	r6, #0
 800852a:	d1ce      	bne.n	80084ca <_strtol_l.constprop.0+0x56>
 800852c:	3608      	adds	r6, #8
 800852e:	2d30      	cmp	r5, #48	@ 0x30
 8008530:	d0cb      	beq.n	80084ca <_strtol_l.constprop.0+0x56>
 8008532:	3602      	adds	r6, #2
 8008534:	e7c9      	b.n	80084ca <_strtol_l.constprop.0+0x56>
 8008536:	002b      	movs	r3, r5
 8008538:	3b41      	subs	r3, #65	@ 0x41
 800853a:	2b19      	cmp	r3, #25
 800853c:	d801      	bhi.n	8008542 <_strtol_l.constprop.0+0xce>
 800853e:	3d37      	subs	r5, #55	@ 0x37
 8008540:	e7d4      	b.n	80084ec <_strtol_l.constprop.0+0x78>
 8008542:	002b      	movs	r3, r5
 8008544:	3b61      	subs	r3, #97	@ 0x61
 8008546:	2b19      	cmp	r3, #25
 8008548:	d804      	bhi.n	8008554 <_strtol_l.constprop.0+0xe0>
 800854a:	3d57      	subs	r5, #87	@ 0x57
 800854c:	e7ce      	b.n	80084ec <_strtol_l.constprop.0+0x78>
 800854e:	2201      	movs	r2, #1
 8008550:	4252      	negs	r2, r2
 8008552:	e7d9      	b.n	8008508 <_strtol_l.constprop.0+0x94>
 8008554:	1c53      	adds	r3, r2, #1
 8008556:	d108      	bne.n	800856a <_strtol_l.constprop.0+0xf6>
 8008558:	2322      	movs	r3, #34	@ 0x22
 800855a:	9a03      	ldr	r2, [sp, #12]
 800855c:	9802      	ldr	r0, [sp, #8]
 800855e:	6013      	str	r3, [r2, #0]
 8008560:	2f00      	cmp	r7, #0
 8008562:	d0d9      	beq.n	8008518 <_strtol_l.constprop.0+0xa4>
 8008564:	1e63      	subs	r3, r4, #1
 8008566:	9301      	str	r3, [sp, #4]
 8008568:	e007      	b.n	800857a <_strtol_l.constprop.0+0x106>
 800856a:	9b00      	ldr	r3, [sp, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d000      	beq.n	8008572 <_strtol_l.constprop.0+0xfe>
 8008570:	4240      	negs	r0, r0
 8008572:	2f00      	cmp	r7, #0
 8008574:	d0d0      	beq.n	8008518 <_strtol_l.constprop.0+0xa4>
 8008576:	2a00      	cmp	r2, #0
 8008578:	d1f4      	bne.n	8008564 <_strtol_l.constprop.0+0xf0>
 800857a:	9b01      	ldr	r3, [sp, #4]
 800857c:	603b      	str	r3, [r7, #0]
 800857e:	e7cb      	b.n	8008518 <_strtol_l.constprop.0+0xa4>
 8008580:	08009731 	.word	0x08009731
 8008584:	7fffffff 	.word	0x7fffffff

08008588 <strtol>:
 8008588:	b510      	push	{r4, lr}
 800858a:	4c04      	ldr	r4, [pc, #16]	@ (800859c <strtol+0x14>)
 800858c:	0013      	movs	r3, r2
 800858e:	000a      	movs	r2, r1
 8008590:	0001      	movs	r1, r0
 8008592:	6820      	ldr	r0, [r4, #0]
 8008594:	f7ff ff6e 	bl	8008474 <_strtol_l.constprop.0>
 8008598:	bd10      	pop	{r4, pc}
 800859a:	46c0      	nop			@ (mov r8, r8)
 800859c:	200004fc 	.word	0x200004fc

080085a0 <siprintf>:
 80085a0:	b40e      	push	{r1, r2, r3}
 80085a2:	b500      	push	{lr}
 80085a4:	490b      	ldr	r1, [pc, #44]	@ (80085d4 <siprintf+0x34>)
 80085a6:	b09c      	sub	sp, #112	@ 0x70
 80085a8:	ab1d      	add	r3, sp, #116	@ 0x74
 80085aa:	9002      	str	r0, [sp, #8]
 80085ac:	9006      	str	r0, [sp, #24]
 80085ae:	9107      	str	r1, [sp, #28]
 80085b0:	9104      	str	r1, [sp, #16]
 80085b2:	4809      	ldr	r0, [pc, #36]	@ (80085d8 <siprintf+0x38>)
 80085b4:	4909      	ldr	r1, [pc, #36]	@ (80085dc <siprintf+0x3c>)
 80085b6:	cb04      	ldmia	r3!, {r2}
 80085b8:	9105      	str	r1, [sp, #20]
 80085ba:	6800      	ldr	r0, [r0, #0]
 80085bc:	a902      	add	r1, sp, #8
 80085be:	9301      	str	r3, [sp, #4]
 80085c0:	f000 f9a8 	bl	8008914 <_svfiprintf_r>
 80085c4:	2200      	movs	r2, #0
 80085c6:	9b02      	ldr	r3, [sp, #8]
 80085c8:	701a      	strb	r2, [r3, #0]
 80085ca:	b01c      	add	sp, #112	@ 0x70
 80085cc:	bc08      	pop	{r3}
 80085ce:	b003      	add	sp, #12
 80085d0:	4718      	bx	r3
 80085d2:	46c0      	nop			@ (mov r8, r8)
 80085d4:	7fffffff 	.word	0x7fffffff
 80085d8:	200004fc 	.word	0x200004fc
 80085dc:	ffff0208 	.word	0xffff0208

080085e0 <memset>:
 80085e0:	0003      	movs	r3, r0
 80085e2:	1882      	adds	r2, r0, r2
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d100      	bne.n	80085ea <memset+0xa>
 80085e8:	4770      	bx	lr
 80085ea:	7019      	strb	r1, [r3, #0]
 80085ec:	3301      	adds	r3, #1
 80085ee:	e7f9      	b.n	80085e4 <memset+0x4>

080085f0 <__errno>:
 80085f0:	4b01      	ldr	r3, [pc, #4]	@ (80085f8 <__errno+0x8>)
 80085f2:	6818      	ldr	r0, [r3, #0]
 80085f4:	4770      	bx	lr
 80085f6:	46c0      	nop			@ (mov r8, r8)
 80085f8:	200004fc 	.word	0x200004fc

080085fc <__libc_init_array>:
 80085fc:	b570      	push	{r4, r5, r6, lr}
 80085fe:	2600      	movs	r6, #0
 8008600:	4c0c      	ldr	r4, [pc, #48]	@ (8008634 <__libc_init_array+0x38>)
 8008602:	4d0d      	ldr	r5, [pc, #52]	@ (8008638 <__libc_init_array+0x3c>)
 8008604:	1b64      	subs	r4, r4, r5
 8008606:	10a4      	asrs	r4, r4, #2
 8008608:	42a6      	cmp	r6, r4
 800860a:	d109      	bne.n	8008620 <__libc_init_array+0x24>
 800860c:	2600      	movs	r6, #0
 800860e:	f000 fc65 	bl	8008edc <_init>
 8008612:	4c0a      	ldr	r4, [pc, #40]	@ (800863c <__libc_init_array+0x40>)
 8008614:	4d0a      	ldr	r5, [pc, #40]	@ (8008640 <__libc_init_array+0x44>)
 8008616:	1b64      	subs	r4, r4, r5
 8008618:	10a4      	asrs	r4, r4, #2
 800861a:	42a6      	cmp	r6, r4
 800861c:	d105      	bne.n	800862a <__libc_init_array+0x2e>
 800861e:	bd70      	pop	{r4, r5, r6, pc}
 8008620:	00b3      	lsls	r3, r6, #2
 8008622:	58eb      	ldr	r3, [r5, r3]
 8008624:	4798      	blx	r3
 8008626:	3601      	adds	r6, #1
 8008628:	e7ee      	b.n	8008608 <__libc_init_array+0xc>
 800862a:	00b3      	lsls	r3, r6, #2
 800862c:	58eb      	ldr	r3, [r5, r3]
 800862e:	4798      	blx	r3
 8008630:	3601      	adds	r6, #1
 8008632:	e7f2      	b.n	800861a <__libc_init_array+0x1e>
 8008634:	0800986c 	.word	0x0800986c
 8008638:	0800986c 	.word	0x0800986c
 800863c:	08009870 	.word	0x08009870
 8008640:	0800986c 	.word	0x0800986c

08008644 <__retarget_lock_acquire_recursive>:
 8008644:	4770      	bx	lr

08008646 <__retarget_lock_release_recursive>:
 8008646:	4770      	bx	lr

08008648 <memcpy>:
 8008648:	2300      	movs	r3, #0
 800864a:	b510      	push	{r4, lr}
 800864c:	429a      	cmp	r2, r3
 800864e:	d100      	bne.n	8008652 <memcpy+0xa>
 8008650:	bd10      	pop	{r4, pc}
 8008652:	5ccc      	ldrb	r4, [r1, r3]
 8008654:	54c4      	strb	r4, [r0, r3]
 8008656:	3301      	adds	r3, #1
 8008658:	e7f8      	b.n	800864c <memcpy+0x4>
	...

0800865c <_free_r>:
 800865c:	b570      	push	{r4, r5, r6, lr}
 800865e:	0005      	movs	r5, r0
 8008660:	1e0c      	subs	r4, r1, #0
 8008662:	d010      	beq.n	8008686 <_free_r+0x2a>
 8008664:	3c04      	subs	r4, #4
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	da00      	bge.n	800866e <_free_r+0x12>
 800866c:	18e4      	adds	r4, r4, r3
 800866e:	0028      	movs	r0, r5
 8008670:	f000 f8e0 	bl	8008834 <__malloc_lock>
 8008674:	4a1d      	ldr	r2, [pc, #116]	@ (80086ec <_free_r+0x90>)
 8008676:	6813      	ldr	r3, [r2, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d105      	bne.n	8008688 <_free_r+0x2c>
 800867c:	6063      	str	r3, [r4, #4]
 800867e:	6014      	str	r4, [r2, #0]
 8008680:	0028      	movs	r0, r5
 8008682:	f000 f8df 	bl	8008844 <__malloc_unlock>
 8008686:	bd70      	pop	{r4, r5, r6, pc}
 8008688:	42a3      	cmp	r3, r4
 800868a:	d908      	bls.n	800869e <_free_r+0x42>
 800868c:	6820      	ldr	r0, [r4, #0]
 800868e:	1821      	adds	r1, r4, r0
 8008690:	428b      	cmp	r3, r1
 8008692:	d1f3      	bne.n	800867c <_free_r+0x20>
 8008694:	6819      	ldr	r1, [r3, #0]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	1809      	adds	r1, r1, r0
 800869a:	6021      	str	r1, [r4, #0]
 800869c:	e7ee      	b.n	800867c <_free_r+0x20>
 800869e:	001a      	movs	r2, r3
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <_free_r+0x4e>
 80086a6:	42a3      	cmp	r3, r4
 80086a8:	d9f9      	bls.n	800869e <_free_r+0x42>
 80086aa:	6811      	ldr	r1, [r2, #0]
 80086ac:	1850      	adds	r0, r2, r1
 80086ae:	42a0      	cmp	r0, r4
 80086b0:	d10b      	bne.n	80086ca <_free_r+0x6e>
 80086b2:	6820      	ldr	r0, [r4, #0]
 80086b4:	1809      	adds	r1, r1, r0
 80086b6:	1850      	adds	r0, r2, r1
 80086b8:	6011      	str	r1, [r2, #0]
 80086ba:	4283      	cmp	r3, r0
 80086bc:	d1e0      	bne.n	8008680 <_free_r+0x24>
 80086be:	6818      	ldr	r0, [r3, #0]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	1841      	adds	r1, r0, r1
 80086c4:	6011      	str	r1, [r2, #0]
 80086c6:	6053      	str	r3, [r2, #4]
 80086c8:	e7da      	b.n	8008680 <_free_r+0x24>
 80086ca:	42a0      	cmp	r0, r4
 80086cc:	d902      	bls.n	80086d4 <_free_r+0x78>
 80086ce:	230c      	movs	r3, #12
 80086d0:	602b      	str	r3, [r5, #0]
 80086d2:	e7d5      	b.n	8008680 <_free_r+0x24>
 80086d4:	6820      	ldr	r0, [r4, #0]
 80086d6:	1821      	adds	r1, r4, r0
 80086d8:	428b      	cmp	r3, r1
 80086da:	d103      	bne.n	80086e4 <_free_r+0x88>
 80086dc:	6819      	ldr	r1, [r3, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	1809      	adds	r1, r1, r0
 80086e2:	6021      	str	r1, [r4, #0]
 80086e4:	6063      	str	r3, [r4, #4]
 80086e6:	6054      	str	r4, [r2, #4]
 80086e8:	e7ca      	b.n	8008680 <_free_r+0x24>
 80086ea:	46c0      	nop			@ (mov r8, r8)
 80086ec:	200009d4 	.word	0x200009d4

080086f0 <sbrk_aligned>:
 80086f0:	b570      	push	{r4, r5, r6, lr}
 80086f2:	4e0f      	ldr	r6, [pc, #60]	@ (8008730 <sbrk_aligned+0x40>)
 80086f4:	000d      	movs	r5, r1
 80086f6:	6831      	ldr	r1, [r6, #0]
 80086f8:	0004      	movs	r4, r0
 80086fa:	2900      	cmp	r1, #0
 80086fc:	d102      	bne.n	8008704 <sbrk_aligned+0x14>
 80086fe:	f000 fb99 	bl	8008e34 <_sbrk_r>
 8008702:	6030      	str	r0, [r6, #0]
 8008704:	0029      	movs	r1, r5
 8008706:	0020      	movs	r0, r4
 8008708:	f000 fb94 	bl	8008e34 <_sbrk_r>
 800870c:	1c43      	adds	r3, r0, #1
 800870e:	d103      	bne.n	8008718 <sbrk_aligned+0x28>
 8008710:	2501      	movs	r5, #1
 8008712:	426d      	negs	r5, r5
 8008714:	0028      	movs	r0, r5
 8008716:	bd70      	pop	{r4, r5, r6, pc}
 8008718:	2303      	movs	r3, #3
 800871a:	1cc5      	adds	r5, r0, #3
 800871c:	439d      	bics	r5, r3
 800871e:	42a8      	cmp	r0, r5
 8008720:	d0f8      	beq.n	8008714 <sbrk_aligned+0x24>
 8008722:	1a29      	subs	r1, r5, r0
 8008724:	0020      	movs	r0, r4
 8008726:	f000 fb85 	bl	8008e34 <_sbrk_r>
 800872a:	3001      	adds	r0, #1
 800872c:	d1f2      	bne.n	8008714 <sbrk_aligned+0x24>
 800872e:	e7ef      	b.n	8008710 <sbrk_aligned+0x20>
 8008730:	200009d0 	.word	0x200009d0

08008734 <_malloc_r>:
 8008734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008736:	2203      	movs	r2, #3
 8008738:	1ccb      	adds	r3, r1, #3
 800873a:	4393      	bics	r3, r2
 800873c:	3308      	adds	r3, #8
 800873e:	0005      	movs	r5, r0
 8008740:	001f      	movs	r7, r3
 8008742:	2b0c      	cmp	r3, #12
 8008744:	d234      	bcs.n	80087b0 <_malloc_r+0x7c>
 8008746:	270c      	movs	r7, #12
 8008748:	42b9      	cmp	r1, r7
 800874a:	d833      	bhi.n	80087b4 <_malloc_r+0x80>
 800874c:	0028      	movs	r0, r5
 800874e:	f000 f871 	bl	8008834 <__malloc_lock>
 8008752:	4e37      	ldr	r6, [pc, #220]	@ (8008830 <_malloc_r+0xfc>)
 8008754:	6833      	ldr	r3, [r6, #0]
 8008756:	001c      	movs	r4, r3
 8008758:	2c00      	cmp	r4, #0
 800875a:	d12f      	bne.n	80087bc <_malloc_r+0x88>
 800875c:	0039      	movs	r1, r7
 800875e:	0028      	movs	r0, r5
 8008760:	f7ff ffc6 	bl	80086f0 <sbrk_aligned>
 8008764:	0004      	movs	r4, r0
 8008766:	1c43      	adds	r3, r0, #1
 8008768:	d15f      	bne.n	800882a <_malloc_r+0xf6>
 800876a:	6834      	ldr	r4, [r6, #0]
 800876c:	9400      	str	r4, [sp, #0]
 800876e:	9b00      	ldr	r3, [sp, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d14a      	bne.n	800880a <_malloc_r+0xd6>
 8008774:	2c00      	cmp	r4, #0
 8008776:	d052      	beq.n	800881e <_malloc_r+0xea>
 8008778:	6823      	ldr	r3, [r4, #0]
 800877a:	0028      	movs	r0, r5
 800877c:	18e3      	adds	r3, r4, r3
 800877e:	9900      	ldr	r1, [sp, #0]
 8008780:	9301      	str	r3, [sp, #4]
 8008782:	f000 fb57 	bl	8008e34 <_sbrk_r>
 8008786:	9b01      	ldr	r3, [sp, #4]
 8008788:	4283      	cmp	r3, r0
 800878a:	d148      	bne.n	800881e <_malloc_r+0xea>
 800878c:	6823      	ldr	r3, [r4, #0]
 800878e:	0028      	movs	r0, r5
 8008790:	1aff      	subs	r7, r7, r3
 8008792:	0039      	movs	r1, r7
 8008794:	f7ff ffac 	bl	80086f0 <sbrk_aligned>
 8008798:	3001      	adds	r0, #1
 800879a:	d040      	beq.n	800881e <_malloc_r+0xea>
 800879c:	6823      	ldr	r3, [r4, #0]
 800879e:	19db      	adds	r3, r3, r7
 80087a0:	6023      	str	r3, [r4, #0]
 80087a2:	6833      	ldr	r3, [r6, #0]
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	2a00      	cmp	r2, #0
 80087a8:	d133      	bne.n	8008812 <_malloc_r+0xde>
 80087aa:	9b00      	ldr	r3, [sp, #0]
 80087ac:	6033      	str	r3, [r6, #0]
 80087ae:	e019      	b.n	80087e4 <_malloc_r+0xb0>
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	dac9      	bge.n	8008748 <_malloc_r+0x14>
 80087b4:	230c      	movs	r3, #12
 80087b6:	602b      	str	r3, [r5, #0]
 80087b8:	2000      	movs	r0, #0
 80087ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80087bc:	6821      	ldr	r1, [r4, #0]
 80087be:	1bc9      	subs	r1, r1, r7
 80087c0:	d420      	bmi.n	8008804 <_malloc_r+0xd0>
 80087c2:	290b      	cmp	r1, #11
 80087c4:	d90a      	bls.n	80087dc <_malloc_r+0xa8>
 80087c6:	19e2      	adds	r2, r4, r7
 80087c8:	6027      	str	r7, [r4, #0]
 80087ca:	42a3      	cmp	r3, r4
 80087cc:	d104      	bne.n	80087d8 <_malloc_r+0xa4>
 80087ce:	6032      	str	r2, [r6, #0]
 80087d0:	6863      	ldr	r3, [r4, #4]
 80087d2:	6011      	str	r1, [r2, #0]
 80087d4:	6053      	str	r3, [r2, #4]
 80087d6:	e005      	b.n	80087e4 <_malloc_r+0xb0>
 80087d8:	605a      	str	r2, [r3, #4]
 80087da:	e7f9      	b.n	80087d0 <_malloc_r+0x9c>
 80087dc:	6862      	ldr	r2, [r4, #4]
 80087de:	42a3      	cmp	r3, r4
 80087e0:	d10e      	bne.n	8008800 <_malloc_r+0xcc>
 80087e2:	6032      	str	r2, [r6, #0]
 80087e4:	0028      	movs	r0, r5
 80087e6:	f000 f82d 	bl	8008844 <__malloc_unlock>
 80087ea:	0020      	movs	r0, r4
 80087ec:	2207      	movs	r2, #7
 80087ee:	300b      	adds	r0, #11
 80087f0:	1d23      	adds	r3, r4, #4
 80087f2:	4390      	bics	r0, r2
 80087f4:	1ac2      	subs	r2, r0, r3
 80087f6:	4298      	cmp	r0, r3
 80087f8:	d0df      	beq.n	80087ba <_malloc_r+0x86>
 80087fa:	1a1b      	subs	r3, r3, r0
 80087fc:	50a3      	str	r3, [r4, r2]
 80087fe:	e7dc      	b.n	80087ba <_malloc_r+0x86>
 8008800:	605a      	str	r2, [r3, #4]
 8008802:	e7ef      	b.n	80087e4 <_malloc_r+0xb0>
 8008804:	0023      	movs	r3, r4
 8008806:	6864      	ldr	r4, [r4, #4]
 8008808:	e7a6      	b.n	8008758 <_malloc_r+0x24>
 800880a:	9c00      	ldr	r4, [sp, #0]
 800880c:	6863      	ldr	r3, [r4, #4]
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	e7ad      	b.n	800876e <_malloc_r+0x3a>
 8008812:	001a      	movs	r2, r3
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	42a3      	cmp	r3, r4
 8008818:	d1fb      	bne.n	8008812 <_malloc_r+0xde>
 800881a:	2300      	movs	r3, #0
 800881c:	e7da      	b.n	80087d4 <_malloc_r+0xa0>
 800881e:	230c      	movs	r3, #12
 8008820:	0028      	movs	r0, r5
 8008822:	602b      	str	r3, [r5, #0]
 8008824:	f000 f80e 	bl	8008844 <__malloc_unlock>
 8008828:	e7c6      	b.n	80087b8 <_malloc_r+0x84>
 800882a:	6007      	str	r7, [r0, #0]
 800882c:	e7da      	b.n	80087e4 <_malloc_r+0xb0>
 800882e:	46c0      	nop			@ (mov r8, r8)
 8008830:	200009d4 	.word	0x200009d4

08008834 <__malloc_lock>:
 8008834:	b510      	push	{r4, lr}
 8008836:	4802      	ldr	r0, [pc, #8]	@ (8008840 <__malloc_lock+0xc>)
 8008838:	f7ff ff04 	bl	8008644 <__retarget_lock_acquire_recursive>
 800883c:	bd10      	pop	{r4, pc}
 800883e:	46c0      	nop			@ (mov r8, r8)
 8008840:	200009cc 	.word	0x200009cc

08008844 <__malloc_unlock>:
 8008844:	b510      	push	{r4, lr}
 8008846:	4802      	ldr	r0, [pc, #8]	@ (8008850 <__malloc_unlock+0xc>)
 8008848:	f7ff fefd 	bl	8008646 <__retarget_lock_release_recursive>
 800884c:	bd10      	pop	{r4, pc}
 800884e:	46c0      	nop			@ (mov r8, r8)
 8008850:	200009cc 	.word	0x200009cc

08008854 <__ssputs_r>:
 8008854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008856:	688e      	ldr	r6, [r1, #8]
 8008858:	b085      	sub	sp, #20
 800885a:	001f      	movs	r7, r3
 800885c:	000c      	movs	r4, r1
 800885e:	680b      	ldr	r3, [r1, #0]
 8008860:	9002      	str	r0, [sp, #8]
 8008862:	9203      	str	r2, [sp, #12]
 8008864:	42be      	cmp	r6, r7
 8008866:	d830      	bhi.n	80088ca <__ssputs_r+0x76>
 8008868:	210c      	movs	r1, #12
 800886a:	5e62      	ldrsh	r2, [r4, r1]
 800886c:	2190      	movs	r1, #144	@ 0x90
 800886e:	00c9      	lsls	r1, r1, #3
 8008870:	420a      	tst	r2, r1
 8008872:	d028      	beq.n	80088c6 <__ssputs_r+0x72>
 8008874:	2003      	movs	r0, #3
 8008876:	6921      	ldr	r1, [r4, #16]
 8008878:	1a5b      	subs	r3, r3, r1
 800887a:	9301      	str	r3, [sp, #4]
 800887c:	6963      	ldr	r3, [r4, #20]
 800887e:	4343      	muls	r3, r0
 8008880:	9801      	ldr	r0, [sp, #4]
 8008882:	0fdd      	lsrs	r5, r3, #31
 8008884:	18ed      	adds	r5, r5, r3
 8008886:	1c7b      	adds	r3, r7, #1
 8008888:	181b      	adds	r3, r3, r0
 800888a:	106d      	asrs	r5, r5, #1
 800888c:	42ab      	cmp	r3, r5
 800888e:	d900      	bls.n	8008892 <__ssputs_r+0x3e>
 8008890:	001d      	movs	r5, r3
 8008892:	0552      	lsls	r2, r2, #21
 8008894:	d528      	bpl.n	80088e8 <__ssputs_r+0x94>
 8008896:	0029      	movs	r1, r5
 8008898:	9802      	ldr	r0, [sp, #8]
 800889a:	f7ff ff4b 	bl	8008734 <_malloc_r>
 800889e:	1e06      	subs	r6, r0, #0
 80088a0:	d02c      	beq.n	80088fc <__ssputs_r+0xa8>
 80088a2:	9a01      	ldr	r2, [sp, #4]
 80088a4:	6921      	ldr	r1, [r4, #16]
 80088a6:	f7ff fecf 	bl	8008648 <memcpy>
 80088aa:	89a2      	ldrh	r2, [r4, #12]
 80088ac:	4b18      	ldr	r3, [pc, #96]	@ (8008910 <__ssputs_r+0xbc>)
 80088ae:	401a      	ands	r2, r3
 80088b0:	2380      	movs	r3, #128	@ 0x80
 80088b2:	4313      	orrs	r3, r2
 80088b4:	81a3      	strh	r3, [r4, #12]
 80088b6:	9b01      	ldr	r3, [sp, #4]
 80088b8:	6126      	str	r6, [r4, #16]
 80088ba:	18f6      	adds	r6, r6, r3
 80088bc:	6026      	str	r6, [r4, #0]
 80088be:	003e      	movs	r6, r7
 80088c0:	6165      	str	r5, [r4, #20]
 80088c2:	1aed      	subs	r5, r5, r3
 80088c4:	60a5      	str	r5, [r4, #8]
 80088c6:	42be      	cmp	r6, r7
 80088c8:	d900      	bls.n	80088cc <__ssputs_r+0x78>
 80088ca:	003e      	movs	r6, r7
 80088cc:	0032      	movs	r2, r6
 80088ce:	9903      	ldr	r1, [sp, #12]
 80088d0:	6820      	ldr	r0, [r4, #0]
 80088d2:	f000 fa9b 	bl	8008e0c <memmove>
 80088d6:	2000      	movs	r0, #0
 80088d8:	68a3      	ldr	r3, [r4, #8]
 80088da:	1b9b      	subs	r3, r3, r6
 80088dc:	60a3      	str	r3, [r4, #8]
 80088de:	6823      	ldr	r3, [r4, #0]
 80088e0:	199b      	adds	r3, r3, r6
 80088e2:	6023      	str	r3, [r4, #0]
 80088e4:	b005      	add	sp, #20
 80088e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088e8:	002a      	movs	r2, r5
 80088ea:	9802      	ldr	r0, [sp, #8]
 80088ec:	f000 fabf 	bl	8008e6e <_realloc_r>
 80088f0:	1e06      	subs	r6, r0, #0
 80088f2:	d1e0      	bne.n	80088b6 <__ssputs_r+0x62>
 80088f4:	6921      	ldr	r1, [r4, #16]
 80088f6:	9802      	ldr	r0, [sp, #8]
 80088f8:	f7ff feb0 	bl	800865c <_free_r>
 80088fc:	230c      	movs	r3, #12
 80088fe:	2001      	movs	r0, #1
 8008900:	9a02      	ldr	r2, [sp, #8]
 8008902:	4240      	negs	r0, r0
 8008904:	6013      	str	r3, [r2, #0]
 8008906:	89a2      	ldrh	r2, [r4, #12]
 8008908:	3334      	adds	r3, #52	@ 0x34
 800890a:	4313      	orrs	r3, r2
 800890c:	81a3      	strh	r3, [r4, #12]
 800890e:	e7e9      	b.n	80088e4 <__ssputs_r+0x90>
 8008910:	fffffb7f 	.word	0xfffffb7f

08008914 <_svfiprintf_r>:
 8008914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008916:	b0a1      	sub	sp, #132	@ 0x84
 8008918:	9003      	str	r0, [sp, #12]
 800891a:	001d      	movs	r5, r3
 800891c:	898b      	ldrh	r3, [r1, #12]
 800891e:	000f      	movs	r7, r1
 8008920:	0016      	movs	r6, r2
 8008922:	061b      	lsls	r3, r3, #24
 8008924:	d511      	bpl.n	800894a <_svfiprintf_r+0x36>
 8008926:	690b      	ldr	r3, [r1, #16]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10e      	bne.n	800894a <_svfiprintf_r+0x36>
 800892c:	2140      	movs	r1, #64	@ 0x40
 800892e:	f7ff ff01 	bl	8008734 <_malloc_r>
 8008932:	6038      	str	r0, [r7, #0]
 8008934:	6138      	str	r0, [r7, #16]
 8008936:	2800      	cmp	r0, #0
 8008938:	d105      	bne.n	8008946 <_svfiprintf_r+0x32>
 800893a:	230c      	movs	r3, #12
 800893c:	9a03      	ldr	r2, [sp, #12]
 800893e:	6013      	str	r3, [r2, #0]
 8008940:	2001      	movs	r0, #1
 8008942:	4240      	negs	r0, r0
 8008944:	e0cf      	b.n	8008ae6 <_svfiprintf_r+0x1d2>
 8008946:	2340      	movs	r3, #64	@ 0x40
 8008948:	617b      	str	r3, [r7, #20]
 800894a:	2300      	movs	r3, #0
 800894c:	ac08      	add	r4, sp, #32
 800894e:	6163      	str	r3, [r4, #20]
 8008950:	3320      	adds	r3, #32
 8008952:	7663      	strb	r3, [r4, #25]
 8008954:	3310      	adds	r3, #16
 8008956:	76a3      	strb	r3, [r4, #26]
 8008958:	9507      	str	r5, [sp, #28]
 800895a:	0035      	movs	r5, r6
 800895c:	782b      	ldrb	r3, [r5, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d001      	beq.n	8008966 <_svfiprintf_r+0x52>
 8008962:	2b25      	cmp	r3, #37	@ 0x25
 8008964:	d148      	bne.n	80089f8 <_svfiprintf_r+0xe4>
 8008966:	1bab      	subs	r3, r5, r6
 8008968:	9305      	str	r3, [sp, #20]
 800896a:	42b5      	cmp	r5, r6
 800896c:	d00b      	beq.n	8008986 <_svfiprintf_r+0x72>
 800896e:	0032      	movs	r2, r6
 8008970:	0039      	movs	r1, r7
 8008972:	9803      	ldr	r0, [sp, #12]
 8008974:	f7ff ff6e 	bl	8008854 <__ssputs_r>
 8008978:	3001      	adds	r0, #1
 800897a:	d100      	bne.n	800897e <_svfiprintf_r+0x6a>
 800897c:	e0ae      	b.n	8008adc <_svfiprintf_r+0x1c8>
 800897e:	6963      	ldr	r3, [r4, #20]
 8008980:	9a05      	ldr	r2, [sp, #20]
 8008982:	189b      	adds	r3, r3, r2
 8008984:	6163      	str	r3, [r4, #20]
 8008986:	782b      	ldrb	r3, [r5, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d100      	bne.n	800898e <_svfiprintf_r+0x7a>
 800898c:	e0a6      	b.n	8008adc <_svfiprintf_r+0x1c8>
 800898e:	2201      	movs	r2, #1
 8008990:	2300      	movs	r3, #0
 8008992:	4252      	negs	r2, r2
 8008994:	6062      	str	r2, [r4, #4]
 8008996:	a904      	add	r1, sp, #16
 8008998:	3254      	adds	r2, #84	@ 0x54
 800899a:	1852      	adds	r2, r2, r1
 800899c:	1c6e      	adds	r6, r5, #1
 800899e:	6023      	str	r3, [r4, #0]
 80089a0:	60e3      	str	r3, [r4, #12]
 80089a2:	60a3      	str	r3, [r4, #8]
 80089a4:	7013      	strb	r3, [r2, #0]
 80089a6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80089a8:	4b54      	ldr	r3, [pc, #336]	@ (8008afc <_svfiprintf_r+0x1e8>)
 80089aa:	2205      	movs	r2, #5
 80089ac:	0018      	movs	r0, r3
 80089ae:	7831      	ldrb	r1, [r6, #0]
 80089b0:	9305      	str	r3, [sp, #20]
 80089b2:	f000 fa51 	bl	8008e58 <memchr>
 80089b6:	1c75      	adds	r5, r6, #1
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d11f      	bne.n	80089fc <_svfiprintf_r+0xe8>
 80089bc:	6822      	ldr	r2, [r4, #0]
 80089be:	06d3      	lsls	r3, r2, #27
 80089c0:	d504      	bpl.n	80089cc <_svfiprintf_r+0xb8>
 80089c2:	2353      	movs	r3, #83	@ 0x53
 80089c4:	a904      	add	r1, sp, #16
 80089c6:	185b      	adds	r3, r3, r1
 80089c8:	2120      	movs	r1, #32
 80089ca:	7019      	strb	r1, [r3, #0]
 80089cc:	0713      	lsls	r3, r2, #28
 80089ce:	d504      	bpl.n	80089da <_svfiprintf_r+0xc6>
 80089d0:	2353      	movs	r3, #83	@ 0x53
 80089d2:	a904      	add	r1, sp, #16
 80089d4:	185b      	adds	r3, r3, r1
 80089d6:	212b      	movs	r1, #43	@ 0x2b
 80089d8:	7019      	strb	r1, [r3, #0]
 80089da:	7833      	ldrb	r3, [r6, #0]
 80089dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80089de:	d016      	beq.n	8008a0e <_svfiprintf_r+0xfa>
 80089e0:	0035      	movs	r5, r6
 80089e2:	2100      	movs	r1, #0
 80089e4:	200a      	movs	r0, #10
 80089e6:	68e3      	ldr	r3, [r4, #12]
 80089e8:	782a      	ldrb	r2, [r5, #0]
 80089ea:	1c6e      	adds	r6, r5, #1
 80089ec:	3a30      	subs	r2, #48	@ 0x30
 80089ee:	2a09      	cmp	r2, #9
 80089f0:	d950      	bls.n	8008a94 <_svfiprintf_r+0x180>
 80089f2:	2900      	cmp	r1, #0
 80089f4:	d111      	bne.n	8008a1a <_svfiprintf_r+0x106>
 80089f6:	e017      	b.n	8008a28 <_svfiprintf_r+0x114>
 80089f8:	3501      	adds	r5, #1
 80089fa:	e7af      	b.n	800895c <_svfiprintf_r+0x48>
 80089fc:	9b05      	ldr	r3, [sp, #20]
 80089fe:	6822      	ldr	r2, [r4, #0]
 8008a00:	1ac0      	subs	r0, r0, r3
 8008a02:	2301      	movs	r3, #1
 8008a04:	4083      	lsls	r3, r0
 8008a06:	4313      	orrs	r3, r2
 8008a08:	002e      	movs	r6, r5
 8008a0a:	6023      	str	r3, [r4, #0]
 8008a0c:	e7cc      	b.n	80089a8 <_svfiprintf_r+0x94>
 8008a0e:	9b07      	ldr	r3, [sp, #28]
 8008a10:	1d19      	adds	r1, r3, #4
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	9107      	str	r1, [sp, #28]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	db01      	blt.n	8008a1e <_svfiprintf_r+0x10a>
 8008a1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a1c:	e004      	b.n	8008a28 <_svfiprintf_r+0x114>
 8008a1e:	425b      	negs	r3, r3
 8008a20:	60e3      	str	r3, [r4, #12]
 8008a22:	2302      	movs	r3, #2
 8008a24:	4313      	orrs	r3, r2
 8008a26:	6023      	str	r3, [r4, #0]
 8008a28:	782b      	ldrb	r3, [r5, #0]
 8008a2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a2c:	d10c      	bne.n	8008a48 <_svfiprintf_r+0x134>
 8008a2e:	786b      	ldrb	r3, [r5, #1]
 8008a30:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a32:	d134      	bne.n	8008a9e <_svfiprintf_r+0x18a>
 8008a34:	9b07      	ldr	r3, [sp, #28]
 8008a36:	3502      	adds	r5, #2
 8008a38:	1d1a      	adds	r2, r3, #4
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	9207      	str	r2, [sp, #28]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	da01      	bge.n	8008a46 <_svfiprintf_r+0x132>
 8008a42:	2301      	movs	r3, #1
 8008a44:	425b      	negs	r3, r3
 8008a46:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a48:	4e2d      	ldr	r6, [pc, #180]	@ (8008b00 <_svfiprintf_r+0x1ec>)
 8008a4a:	2203      	movs	r2, #3
 8008a4c:	0030      	movs	r0, r6
 8008a4e:	7829      	ldrb	r1, [r5, #0]
 8008a50:	f000 fa02 	bl	8008e58 <memchr>
 8008a54:	2800      	cmp	r0, #0
 8008a56:	d006      	beq.n	8008a66 <_svfiprintf_r+0x152>
 8008a58:	2340      	movs	r3, #64	@ 0x40
 8008a5a:	1b80      	subs	r0, r0, r6
 8008a5c:	4083      	lsls	r3, r0
 8008a5e:	6822      	ldr	r2, [r4, #0]
 8008a60:	3501      	adds	r5, #1
 8008a62:	4313      	orrs	r3, r2
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	7829      	ldrb	r1, [r5, #0]
 8008a68:	2206      	movs	r2, #6
 8008a6a:	4826      	ldr	r0, [pc, #152]	@ (8008b04 <_svfiprintf_r+0x1f0>)
 8008a6c:	1c6e      	adds	r6, r5, #1
 8008a6e:	7621      	strb	r1, [r4, #24]
 8008a70:	f000 f9f2 	bl	8008e58 <memchr>
 8008a74:	2800      	cmp	r0, #0
 8008a76:	d038      	beq.n	8008aea <_svfiprintf_r+0x1d6>
 8008a78:	4b23      	ldr	r3, [pc, #140]	@ (8008b08 <_svfiprintf_r+0x1f4>)
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d122      	bne.n	8008ac4 <_svfiprintf_r+0x1b0>
 8008a7e:	2207      	movs	r2, #7
 8008a80:	9b07      	ldr	r3, [sp, #28]
 8008a82:	3307      	adds	r3, #7
 8008a84:	4393      	bics	r3, r2
 8008a86:	3308      	adds	r3, #8
 8008a88:	9307      	str	r3, [sp, #28]
 8008a8a:	6963      	ldr	r3, [r4, #20]
 8008a8c:	9a04      	ldr	r2, [sp, #16]
 8008a8e:	189b      	adds	r3, r3, r2
 8008a90:	6163      	str	r3, [r4, #20]
 8008a92:	e762      	b.n	800895a <_svfiprintf_r+0x46>
 8008a94:	4343      	muls	r3, r0
 8008a96:	0035      	movs	r5, r6
 8008a98:	2101      	movs	r1, #1
 8008a9a:	189b      	adds	r3, r3, r2
 8008a9c:	e7a4      	b.n	80089e8 <_svfiprintf_r+0xd4>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	200a      	movs	r0, #10
 8008aa2:	0019      	movs	r1, r3
 8008aa4:	3501      	adds	r5, #1
 8008aa6:	6063      	str	r3, [r4, #4]
 8008aa8:	782a      	ldrb	r2, [r5, #0]
 8008aaa:	1c6e      	adds	r6, r5, #1
 8008aac:	3a30      	subs	r2, #48	@ 0x30
 8008aae:	2a09      	cmp	r2, #9
 8008ab0:	d903      	bls.n	8008aba <_svfiprintf_r+0x1a6>
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d0c8      	beq.n	8008a48 <_svfiprintf_r+0x134>
 8008ab6:	9109      	str	r1, [sp, #36]	@ 0x24
 8008ab8:	e7c6      	b.n	8008a48 <_svfiprintf_r+0x134>
 8008aba:	4341      	muls	r1, r0
 8008abc:	0035      	movs	r5, r6
 8008abe:	2301      	movs	r3, #1
 8008ac0:	1889      	adds	r1, r1, r2
 8008ac2:	e7f1      	b.n	8008aa8 <_svfiprintf_r+0x194>
 8008ac4:	aa07      	add	r2, sp, #28
 8008ac6:	9200      	str	r2, [sp, #0]
 8008ac8:	0021      	movs	r1, r4
 8008aca:	003a      	movs	r2, r7
 8008acc:	4b0f      	ldr	r3, [pc, #60]	@ (8008b0c <_svfiprintf_r+0x1f8>)
 8008ace:	9803      	ldr	r0, [sp, #12]
 8008ad0:	e000      	b.n	8008ad4 <_svfiprintf_r+0x1c0>
 8008ad2:	bf00      	nop
 8008ad4:	9004      	str	r0, [sp, #16]
 8008ad6:	9b04      	ldr	r3, [sp, #16]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	d1d6      	bne.n	8008a8a <_svfiprintf_r+0x176>
 8008adc:	89bb      	ldrh	r3, [r7, #12]
 8008ade:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008ae0:	065b      	lsls	r3, r3, #25
 8008ae2:	d500      	bpl.n	8008ae6 <_svfiprintf_r+0x1d2>
 8008ae4:	e72c      	b.n	8008940 <_svfiprintf_r+0x2c>
 8008ae6:	b021      	add	sp, #132	@ 0x84
 8008ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aea:	aa07      	add	r2, sp, #28
 8008aec:	9200      	str	r2, [sp, #0]
 8008aee:	0021      	movs	r1, r4
 8008af0:	003a      	movs	r2, r7
 8008af2:	4b06      	ldr	r3, [pc, #24]	@ (8008b0c <_svfiprintf_r+0x1f8>)
 8008af4:	9803      	ldr	r0, [sp, #12]
 8008af6:	f000 f87b 	bl	8008bf0 <_printf_i>
 8008afa:	e7eb      	b.n	8008ad4 <_svfiprintf_r+0x1c0>
 8008afc:	08009831 	.word	0x08009831
 8008b00:	08009837 	.word	0x08009837
 8008b04:	0800983b 	.word	0x0800983b
 8008b08:	00000000 	.word	0x00000000
 8008b0c:	08008855 	.word	0x08008855

08008b10 <_printf_common>:
 8008b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b12:	0016      	movs	r6, r2
 8008b14:	9301      	str	r3, [sp, #4]
 8008b16:	688a      	ldr	r2, [r1, #8]
 8008b18:	690b      	ldr	r3, [r1, #16]
 8008b1a:	000c      	movs	r4, r1
 8008b1c:	9000      	str	r0, [sp, #0]
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	da00      	bge.n	8008b24 <_printf_common+0x14>
 8008b22:	0013      	movs	r3, r2
 8008b24:	0022      	movs	r2, r4
 8008b26:	6033      	str	r3, [r6, #0]
 8008b28:	3243      	adds	r2, #67	@ 0x43
 8008b2a:	7812      	ldrb	r2, [r2, #0]
 8008b2c:	2a00      	cmp	r2, #0
 8008b2e:	d001      	beq.n	8008b34 <_printf_common+0x24>
 8008b30:	3301      	adds	r3, #1
 8008b32:	6033      	str	r3, [r6, #0]
 8008b34:	6823      	ldr	r3, [r4, #0]
 8008b36:	069b      	lsls	r3, r3, #26
 8008b38:	d502      	bpl.n	8008b40 <_printf_common+0x30>
 8008b3a:	6833      	ldr	r3, [r6, #0]
 8008b3c:	3302      	adds	r3, #2
 8008b3e:	6033      	str	r3, [r6, #0]
 8008b40:	6822      	ldr	r2, [r4, #0]
 8008b42:	2306      	movs	r3, #6
 8008b44:	0015      	movs	r5, r2
 8008b46:	401d      	ands	r5, r3
 8008b48:	421a      	tst	r2, r3
 8008b4a:	d027      	beq.n	8008b9c <_printf_common+0x8c>
 8008b4c:	0023      	movs	r3, r4
 8008b4e:	3343      	adds	r3, #67	@ 0x43
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	1e5a      	subs	r2, r3, #1
 8008b54:	4193      	sbcs	r3, r2
 8008b56:	6822      	ldr	r2, [r4, #0]
 8008b58:	0692      	lsls	r2, r2, #26
 8008b5a:	d430      	bmi.n	8008bbe <_printf_common+0xae>
 8008b5c:	0022      	movs	r2, r4
 8008b5e:	9901      	ldr	r1, [sp, #4]
 8008b60:	9800      	ldr	r0, [sp, #0]
 8008b62:	9d08      	ldr	r5, [sp, #32]
 8008b64:	3243      	adds	r2, #67	@ 0x43
 8008b66:	47a8      	blx	r5
 8008b68:	3001      	adds	r0, #1
 8008b6a:	d025      	beq.n	8008bb8 <_printf_common+0xa8>
 8008b6c:	2206      	movs	r2, #6
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	2500      	movs	r5, #0
 8008b72:	4013      	ands	r3, r2
 8008b74:	2b04      	cmp	r3, #4
 8008b76:	d105      	bne.n	8008b84 <_printf_common+0x74>
 8008b78:	6833      	ldr	r3, [r6, #0]
 8008b7a:	68e5      	ldr	r5, [r4, #12]
 8008b7c:	1aed      	subs	r5, r5, r3
 8008b7e:	43eb      	mvns	r3, r5
 8008b80:	17db      	asrs	r3, r3, #31
 8008b82:	401d      	ands	r5, r3
 8008b84:	68a3      	ldr	r3, [r4, #8]
 8008b86:	6922      	ldr	r2, [r4, #16]
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	dd01      	ble.n	8008b90 <_printf_common+0x80>
 8008b8c:	1a9b      	subs	r3, r3, r2
 8008b8e:	18ed      	adds	r5, r5, r3
 8008b90:	2600      	movs	r6, #0
 8008b92:	42b5      	cmp	r5, r6
 8008b94:	d120      	bne.n	8008bd8 <_printf_common+0xc8>
 8008b96:	2000      	movs	r0, #0
 8008b98:	e010      	b.n	8008bbc <_printf_common+0xac>
 8008b9a:	3501      	adds	r5, #1
 8008b9c:	68e3      	ldr	r3, [r4, #12]
 8008b9e:	6832      	ldr	r2, [r6, #0]
 8008ba0:	1a9b      	subs	r3, r3, r2
 8008ba2:	42ab      	cmp	r3, r5
 8008ba4:	ddd2      	ble.n	8008b4c <_printf_common+0x3c>
 8008ba6:	0022      	movs	r2, r4
 8008ba8:	2301      	movs	r3, #1
 8008baa:	9901      	ldr	r1, [sp, #4]
 8008bac:	9800      	ldr	r0, [sp, #0]
 8008bae:	9f08      	ldr	r7, [sp, #32]
 8008bb0:	3219      	adds	r2, #25
 8008bb2:	47b8      	blx	r7
 8008bb4:	3001      	adds	r0, #1
 8008bb6:	d1f0      	bne.n	8008b9a <_printf_common+0x8a>
 8008bb8:	2001      	movs	r0, #1
 8008bba:	4240      	negs	r0, r0
 8008bbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008bbe:	2030      	movs	r0, #48	@ 0x30
 8008bc0:	18e1      	adds	r1, r4, r3
 8008bc2:	3143      	adds	r1, #67	@ 0x43
 8008bc4:	7008      	strb	r0, [r1, #0]
 8008bc6:	0021      	movs	r1, r4
 8008bc8:	1c5a      	adds	r2, r3, #1
 8008bca:	3145      	adds	r1, #69	@ 0x45
 8008bcc:	7809      	ldrb	r1, [r1, #0]
 8008bce:	18a2      	adds	r2, r4, r2
 8008bd0:	3243      	adds	r2, #67	@ 0x43
 8008bd2:	3302      	adds	r3, #2
 8008bd4:	7011      	strb	r1, [r2, #0]
 8008bd6:	e7c1      	b.n	8008b5c <_printf_common+0x4c>
 8008bd8:	0022      	movs	r2, r4
 8008bda:	2301      	movs	r3, #1
 8008bdc:	9901      	ldr	r1, [sp, #4]
 8008bde:	9800      	ldr	r0, [sp, #0]
 8008be0:	9f08      	ldr	r7, [sp, #32]
 8008be2:	321a      	adds	r2, #26
 8008be4:	47b8      	blx	r7
 8008be6:	3001      	adds	r0, #1
 8008be8:	d0e6      	beq.n	8008bb8 <_printf_common+0xa8>
 8008bea:	3601      	adds	r6, #1
 8008bec:	e7d1      	b.n	8008b92 <_printf_common+0x82>
	...

08008bf0 <_printf_i>:
 8008bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bf2:	b08b      	sub	sp, #44	@ 0x2c
 8008bf4:	9206      	str	r2, [sp, #24]
 8008bf6:	000a      	movs	r2, r1
 8008bf8:	3243      	adds	r2, #67	@ 0x43
 8008bfa:	9307      	str	r3, [sp, #28]
 8008bfc:	9005      	str	r0, [sp, #20]
 8008bfe:	9203      	str	r2, [sp, #12]
 8008c00:	7e0a      	ldrb	r2, [r1, #24]
 8008c02:	000c      	movs	r4, r1
 8008c04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008c06:	2a78      	cmp	r2, #120	@ 0x78
 8008c08:	d809      	bhi.n	8008c1e <_printf_i+0x2e>
 8008c0a:	2a62      	cmp	r2, #98	@ 0x62
 8008c0c:	d80b      	bhi.n	8008c26 <_printf_i+0x36>
 8008c0e:	2a00      	cmp	r2, #0
 8008c10:	d100      	bne.n	8008c14 <_printf_i+0x24>
 8008c12:	e0bc      	b.n	8008d8e <_printf_i+0x19e>
 8008c14:	497b      	ldr	r1, [pc, #492]	@ (8008e04 <_printf_i+0x214>)
 8008c16:	9104      	str	r1, [sp, #16]
 8008c18:	2a58      	cmp	r2, #88	@ 0x58
 8008c1a:	d100      	bne.n	8008c1e <_printf_i+0x2e>
 8008c1c:	e090      	b.n	8008d40 <_printf_i+0x150>
 8008c1e:	0025      	movs	r5, r4
 8008c20:	3542      	adds	r5, #66	@ 0x42
 8008c22:	702a      	strb	r2, [r5, #0]
 8008c24:	e022      	b.n	8008c6c <_printf_i+0x7c>
 8008c26:	0010      	movs	r0, r2
 8008c28:	3863      	subs	r0, #99	@ 0x63
 8008c2a:	2815      	cmp	r0, #21
 8008c2c:	d8f7      	bhi.n	8008c1e <_printf_i+0x2e>
 8008c2e:	f7f7 fa73 	bl	8000118 <__gnu_thumb1_case_shi>
 8008c32:	0016      	.short	0x0016
 8008c34:	fff6001f 	.word	0xfff6001f
 8008c38:	fff6fff6 	.word	0xfff6fff6
 8008c3c:	001ffff6 	.word	0x001ffff6
 8008c40:	fff6fff6 	.word	0xfff6fff6
 8008c44:	fff6fff6 	.word	0xfff6fff6
 8008c48:	003600a1 	.word	0x003600a1
 8008c4c:	fff60080 	.word	0xfff60080
 8008c50:	00b2fff6 	.word	0x00b2fff6
 8008c54:	0036fff6 	.word	0x0036fff6
 8008c58:	fff6fff6 	.word	0xfff6fff6
 8008c5c:	0084      	.short	0x0084
 8008c5e:	0025      	movs	r5, r4
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	3542      	adds	r5, #66	@ 0x42
 8008c64:	1d11      	adds	r1, r2, #4
 8008c66:	6019      	str	r1, [r3, #0]
 8008c68:	6813      	ldr	r3, [r2, #0]
 8008c6a:	702b      	strb	r3, [r5, #0]
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e0a0      	b.n	8008db2 <_printf_i+0x1c2>
 8008c70:	6818      	ldr	r0, [r3, #0]
 8008c72:	6809      	ldr	r1, [r1, #0]
 8008c74:	1d02      	adds	r2, r0, #4
 8008c76:	060d      	lsls	r5, r1, #24
 8008c78:	d50b      	bpl.n	8008c92 <_printf_i+0xa2>
 8008c7a:	6806      	ldr	r6, [r0, #0]
 8008c7c:	601a      	str	r2, [r3, #0]
 8008c7e:	2e00      	cmp	r6, #0
 8008c80:	da03      	bge.n	8008c8a <_printf_i+0x9a>
 8008c82:	232d      	movs	r3, #45	@ 0x2d
 8008c84:	9a03      	ldr	r2, [sp, #12]
 8008c86:	4276      	negs	r6, r6
 8008c88:	7013      	strb	r3, [r2, #0]
 8008c8a:	4b5e      	ldr	r3, [pc, #376]	@ (8008e04 <_printf_i+0x214>)
 8008c8c:	270a      	movs	r7, #10
 8008c8e:	9304      	str	r3, [sp, #16]
 8008c90:	e018      	b.n	8008cc4 <_printf_i+0xd4>
 8008c92:	6806      	ldr	r6, [r0, #0]
 8008c94:	601a      	str	r2, [r3, #0]
 8008c96:	0649      	lsls	r1, r1, #25
 8008c98:	d5f1      	bpl.n	8008c7e <_printf_i+0x8e>
 8008c9a:	b236      	sxth	r6, r6
 8008c9c:	e7ef      	b.n	8008c7e <_printf_i+0x8e>
 8008c9e:	6808      	ldr	r0, [r1, #0]
 8008ca0:	6819      	ldr	r1, [r3, #0]
 8008ca2:	c940      	ldmia	r1!, {r6}
 8008ca4:	0605      	lsls	r5, r0, #24
 8008ca6:	d402      	bmi.n	8008cae <_printf_i+0xbe>
 8008ca8:	0640      	lsls	r0, r0, #25
 8008caa:	d500      	bpl.n	8008cae <_printf_i+0xbe>
 8008cac:	b2b6      	uxth	r6, r6
 8008cae:	6019      	str	r1, [r3, #0]
 8008cb0:	4b54      	ldr	r3, [pc, #336]	@ (8008e04 <_printf_i+0x214>)
 8008cb2:	270a      	movs	r7, #10
 8008cb4:	9304      	str	r3, [sp, #16]
 8008cb6:	2a6f      	cmp	r2, #111	@ 0x6f
 8008cb8:	d100      	bne.n	8008cbc <_printf_i+0xcc>
 8008cba:	3f02      	subs	r7, #2
 8008cbc:	0023      	movs	r3, r4
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	3343      	adds	r3, #67	@ 0x43
 8008cc2:	701a      	strb	r2, [r3, #0]
 8008cc4:	6863      	ldr	r3, [r4, #4]
 8008cc6:	60a3      	str	r3, [r4, #8]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	db03      	blt.n	8008cd4 <_printf_i+0xe4>
 8008ccc:	2104      	movs	r1, #4
 8008cce:	6822      	ldr	r2, [r4, #0]
 8008cd0:	438a      	bics	r2, r1
 8008cd2:	6022      	str	r2, [r4, #0]
 8008cd4:	2e00      	cmp	r6, #0
 8008cd6:	d102      	bne.n	8008cde <_printf_i+0xee>
 8008cd8:	9d03      	ldr	r5, [sp, #12]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00c      	beq.n	8008cf8 <_printf_i+0x108>
 8008cde:	9d03      	ldr	r5, [sp, #12]
 8008ce0:	0030      	movs	r0, r6
 8008ce2:	0039      	movs	r1, r7
 8008ce4:	f7f7 faa8 	bl	8000238 <__aeabi_uidivmod>
 8008ce8:	9b04      	ldr	r3, [sp, #16]
 8008cea:	3d01      	subs	r5, #1
 8008cec:	5c5b      	ldrb	r3, [r3, r1]
 8008cee:	702b      	strb	r3, [r5, #0]
 8008cf0:	0033      	movs	r3, r6
 8008cf2:	0006      	movs	r6, r0
 8008cf4:	429f      	cmp	r7, r3
 8008cf6:	d9f3      	bls.n	8008ce0 <_printf_i+0xf0>
 8008cf8:	2f08      	cmp	r7, #8
 8008cfa:	d109      	bne.n	8008d10 <_printf_i+0x120>
 8008cfc:	6823      	ldr	r3, [r4, #0]
 8008cfe:	07db      	lsls	r3, r3, #31
 8008d00:	d506      	bpl.n	8008d10 <_printf_i+0x120>
 8008d02:	6862      	ldr	r2, [r4, #4]
 8008d04:	6923      	ldr	r3, [r4, #16]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	dc02      	bgt.n	8008d10 <_printf_i+0x120>
 8008d0a:	2330      	movs	r3, #48	@ 0x30
 8008d0c:	3d01      	subs	r5, #1
 8008d0e:	702b      	strb	r3, [r5, #0]
 8008d10:	9b03      	ldr	r3, [sp, #12]
 8008d12:	1b5b      	subs	r3, r3, r5
 8008d14:	6123      	str	r3, [r4, #16]
 8008d16:	9b07      	ldr	r3, [sp, #28]
 8008d18:	0021      	movs	r1, r4
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	9805      	ldr	r0, [sp, #20]
 8008d1e:	9b06      	ldr	r3, [sp, #24]
 8008d20:	aa09      	add	r2, sp, #36	@ 0x24
 8008d22:	f7ff fef5 	bl	8008b10 <_printf_common>
 8008d26:	3001      	adds	r0, #1
 8008d28:	d148      	bne.n	8008dbc <_printf_i+0x1cc>
 8008d2a:	2001      	movs	r0, #1
 8008d2c:	4240      	negs	r0, r0
 8008d2e:	b00b      	add	sp, #44	@ 0x2c
 8008d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d32:	2220      	movs	r2, #32
 8008d34:	6809      	ldr	r1, [r1, #0]
 8008d36:	430a      	orrs	r2, r1
 8008d38:	6022      	str	r2, [r4, #0]
 8008d3a:	2278      	movs	r2, #120	@ 0x78
 8008d3c:	4932      	ldr	r1, [pc, #200]	@ (8008e08 <_printf_i+0x218>)
 8008d3e:	9104      	str	r1, [sp, #16]
 8008d40:	0021      	movs	r1, r4
 8008d42:	3145      	adds	r1, #69	@ 0x45
 8008d44:	700a      	strb	r2, [r1, #0]
 8008d46:	6819      	ldr	r1, [r3, #0]
 8008d48:	6822      	ldr	r2, [r4, #0]
 8008d4a:	c940      	ldmia	r1!, {r6}
 8008d4c:	0610      	lsls	r0, r2, #24
 8008d4e:	d402      	bmi.n	8008d56 <_printf_i+0x166>
 8008d50:	0650      	lsls	r0, r2, #25
 8008d52:	d500      	bpl.n	8008d56 <_printf_i+0x166>
 8008d54:	b2b6      	uxth	r6, r6
 8008d56:	6019      	str	r1, [r3, #0]
 8008d58:	07d3      	lsls	r3, r2, #31
 8008d5a:	d502      	bpl.n	8008d62 <_printf_i+0x172>
 8008d5c:	2320      	movs	r3, #32
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	6023      	str	r3, [r4, #0]
 8008d62:	2e00      	cmp	r6, #0
 8008d64:	d001      	beq.n	8008d6a <_printf_i+0x17a>
 8008d66:	2710      	movs	r7, #16
 8008d68:	e7a8      	b.n	8008cbc <_printf_i+0xcc>
 8008d6a:	2220      	movs	r2, #32
 8008d6c:	6823      	ldr	r3, [r4, #0]
 8008d6e:	4393      	bics	r3, r2
 8008d70:	6023      	str	r3, [r4, #0]
 8008d72:	e7f8      	b.n	8008d66 <_printf_i+0x176>
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	680d      	ldr	r5, [r1, #0]
 8008d78:	1d10      	adds	r0, r2, #4
 8008d7a:	6949      	ldr	r1, [r1, #20]
 8008d7c:	6018      	str	r0, [r3, #0]
 8008d7e:	6813      	ldr	r3, [r2, #0]
 8008d80:	062e      	lsls	r6, r5, #24
 8008d82:	d501      	bpl.n	8008d88 <_printf_i+0x198>
 8008d84:	6019      	str	r1, [r3, #0]
 8008d86:	e002      	b.n	8008d8e <_printf_i+0x19e>
 8008d88:	066d      	lsls	r5, r5, #25
 8008d8a:	d5fb      	bpl.n	8008d84 <_printf_i+0x194>
 8008d8c:	8019      	strh	r1, [r3, #0]
 8008d8e:	2300      	movs	r3, #0
 8008d90:	9d03      	ldr	r5, [sp, #12]
 8008d92:	6123      	str	r3, [r4, #16]
 8008d94:	e7bf      	b.n	8008d16 <_printf_i+0x126>
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	1d11      	adds	r1, r2, #4
 8008d9a:	6019      	str	r1, [r3, #0]
 8008d9c:	6815      	ldr	r5, [r2, #0]
 8008d9e:	2100      	movs	r1, #0
 8008da0:	0028      	movs	r0, r5
 8008da2:	6862      	ldr	r2, [r4, #4]
 8008da4:	f000 f858 	bl	8008e58 <memchr>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	d001      	beq.n	8008db0 <_printf_i+0x1c0>
 8008dac:	1b40      	subs	r0, r0, r5
 8008dae:	6060      	str	r0, [r4, #4]
 8008db0:	6863      	ldr	r3, [r4, #4]
 8008db2:	6123      	str	r3, [r4, #16]
 8008db4:	2300      	movs	r3, #0
 8008db6:	9a03      	ldr	r2, [sp, #12]
 8008db8:	7013      	strb	r3, [r2, #0]
 8008dba:	e7ac      	b.n	8008d16 <_printf_i+0x126>
 8008dbc:	002a      	movs	r2, r5
 8008dbe:	6923      	ldr	r3, [r4, #16]
 8008dc0:	9906      	ldr	r1, [sp, #24]
 8008dc2:	9805      	ldr	r0, [sp, #20]
 8008dc4:	9d07      	ldr	r5, [sp, #28]
 8008dc6:	47a8      	blx	r5
 8008dc8:	3001      	adds	r0, #1
 8008dca:	d0ae      	beq.n	8008d2a <_printf_i+0x13a>
 8008dcc:	6823      	ldr	r3, [r4, #0]
 8008dce:	079b      	lsls	r3, r3, #30
 8008dd0:	d415      	bmi.n	8008dfe <_printf_i+0x20e>
 8008dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dd4:	68e0      	ldr	r0, [r4, #12]
 8008dd6:	4298      	cmp	r0, r3
 8008dd8:	daa9      	bge.n	8008d2e <_printf_i+0x13e>
 8008dda:	0018      	movs	r0, r3
 8008ddc:	e7a7      	b.n	8008d2e <_printf_i+0x13e>
 8008dde:	0022      	movs	r2, r4
 8008de0:	2301      	movs	r3, #1
 8008de2:	9906      	ldr	r1, [sp, #24]
 8008de4:	9805      	ldr	r0, [sp, #20]
 8008de6:	9e07      	ldr	r6, [sp, #28]
 8008de8:	3219      	adds	r2, #25
 8008dea:	47b0      	blx	r6
 8008dec:	3001      	adds	r0, #1
 8008dee:	d09c      	beq.n	8008d2a <_printf_i+0x13a>
 8008df0:	3501      	adds	r5, #1
 8008df2:	68e3      	ldr	r3, [r4, #12]
 8008df4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008df6:	1a9b      	subs	r3, r3, r2
 8008df8:	42ab      	cmp	r3, r5
 8008dfa:	dcf0      	bgt.n	8008dde <_printf_i+0x1ee>
 8008dfc:	e7e9      	b.n	8008dd2 <_printf_i+0x1e2>
 8008dfe:	2500      	movs	r5, #0
 8008e00:	e7f7      	b.n	8008df2 <_printf_i+0x202>
 8008e02:	46c0      	nop			@ (mov r8, r8)
 8008e04:	08009842 	.word	0x08009842
 8008e08:	08009853 	.word	0x08009853

08008e0c <memmove>:
 8008e0c:	b510      	push	{r4, lr}
 8008e0e:	4288      	cmp	r0, r1
 8008e10:	d806      	bhi.n	8008e20 <memmove+0x14>
 8008e12:	2300      	movs	r3, #0
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d008      	beq.n	8008e2a <memmove+0x1e>
 8008e18:	5ccc      	ldrb	r4, [r1, r3]
 8008e1a:	54c4      	strb	r4, [r0, r3]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	e7f9      	b.n	8008e14 <memmove+0x8>
 8008e20:	188b      	adds	r3, r1, r2
 8008e22:	4298      	cmp	r0, r3
 8008e24:	d2f5      	bcs.n	8008e12 <memmove+0x6>
 8008e26:	3a01      	subs	r2, #1
 8008e28:	d200      	bcs.n	8008e2c <memmove+0x20>
 8008e2a:	bd10      	pop	{r4, pc}
 8008e2c:	5c8b      	ldrb	r3, [r1, r2]
 8008e2e:	5483      	strb	r3, [r0, r2]
 8008e30:	e7f9      	b.n	8008e26 <memmove+0x1a>
	...

08008e34 <_sbrk_r>:
 8008e34:	2300      	movs	r3, #0
 8008e36:	b570      	push	{r4, r5, r6, lr}
 8008e38:	4d06      	ldr	r5, [pc, #24]	@ (8008e54 <_sbrk_r+0x20>)
 8008e3a:	0004      	movs	r4, r0
 8008e3c:	0008      	movs	r0, r1
 8008e3e:	602b      	str	r3, [r5, #0]
 8008e40:	f7fa fcd8 	bl	80037f4 <_sbrk>
 8008e44:	1c43      	adds	r3, r0, #1
 8008e46:	d103      	bne.n	8008e50 <_sbrk_r+0x1c>
 8008e48:	682b      	ldr	r3, [r5, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d000      	beq.n	8008e50 <_sbrk_r+0x1c>
 8008e4e:	6023      	str	r3, [r4, #0]
 8008e50:	bd70      	pop	{r4, r5, r6, pc}
 8008e52:	46c0      	nop			@ (mov r8, r8)
 8008e54:	200009c8 	.word	0x200009c8

08008e58 <memchr>:
 8008e58:	b2c9      	uxtb	r1, r1
 8008e5a:	1882      	adds	r2, r0, r2
 8008e5c:	4290      	cmp	r0, r2
 8008e5e:	d101      	bne.n	8008e64 <memchr+0xc>
 8008e60:	2000      	movs	r0, #0
 8008e62:	4770      	bx	lr
 8008e64:	7803      	ldrb	r3, [r0, #0]
 8008e66:	428b      	cmp	r3, r1
 8008e68:	d0fb      	beq.n	8008e62 <memchr+0xa>
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	e7f6      	b.n	8008e5c <memchr+0x4>

08008e6e <_realloc_r>:
 8008e6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e70:	0006      	movs	r6, r0
 8008e72:	000c      	movs	r4, r1
 8008e74:	0015      	movs	r5, r2
 8008e76:	2900      	cmp	r1, #0
 8008e78:	d105      	bne.n	8008e86 <_realloc_r+0x18>
 8008e7a:	0011      	movs	r1, r2
 8008e7c:	f7ff fc5a 	bl	8008734 <_malloc_r>
 8008e80:	0004      	movs	r4, r0
 8008e82:	0020      	movs	r0, r4
 8008e84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e86:	2a00      	cmp	r2, #0
 8008e88:	d103      	bne.n	8008e92 <_realloc_r+0x24>
 8008e8a:	f7ff fbe7 	bl	800865c <_free_r>
 8008e8e:	2400      	movs	r4, #0
 8008e90:	e7f7      	b.n	8008e82 <_realloc_r+0x14>
 8008e92:	f000 f81b 	bl	8008ecc <_malloc_usable_size_r>
 8008e96:	0007      	movs	r7, r0
 8008e98:	4285      	cmp	r5, r0
 8008e9a:	d802      	bhi.n	8008ea2 <_realloc_r+0x34>
 8008e9c:	0843      	lsrs	r3, r0, #1
 8008e9e:	42ab      	cmp	r3, r5
 8008ea0:	d3ef      	bcc.n	8008e82 <_realloc_r+0x14>
 8008ea2:	0029      	movs	r1, r5
 8008ea4:	0030      	movs	r0, r6
 8008ea6:	f7ff fc45 	bl	8008734 <_malloc_r>
 8008eaa:	9001      	str	r0, [sp, #4]
 8008eac:	2800      	cmp	r0, #0
 8008eae:	d0ee      	beq.n	8008e8e <_realloc_r+0x20>
 8008eb0:	002a      	movs	r2, r5
 8008eb2:	42bd      	cmp	r5, r7
 8008eb4:	d900      	bls.n	8008eb8 <_realloc_r+0x4a>
 8008eb6:	003a      	movs	r2, r7
 8008eb8:	0021      	movs	r1, r4
 8008eba:	9801      	ldr	r0, [sp, #4]
 8008ebc:	f7ff fbc4 	bl	8008648 <memcpy>
 8008ec0:	0021      	movs	r1, r4
 8008ec2:	0030      	movs	r0, r6
 8008ec4:	f7ff fbca 	bl	800865c <_free_r>
 8008ec8:	9c01      	ldr	r4, [sp, #4]
 8008eca:	e7da      	b.n	8008e82 <_realloc_r+0x14>

08008ecc <_malloc_usable_size_r>:
 8008ecc:	1f0b      	subs	r3, r1, #4
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	1f18      	subs	r0, r3, #4
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	da01      	bge.n	8008eda <_malloc_usable_size_r+0xe>
 8008ed6:	580b      	ldr	r3, [r1, r0]
 8008ed8:	18c0      	adds	r0, r0, r3
 8008eda:	4770      	bx	lr

08008edc <_init>:
 8008edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ede:	46c0      	nop			@ (mov r8, r8)
 8008ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ee2:	bc08      	pop	{r3}
 8008ee4:	469e      	mov	lr, r3
 8008ee6:	4770      	bx	lr

08008ee8 <_fini>:
 8008ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eea:	46c0      	nop			@ (mov r8, r8)
 8008eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eee:	bc08      	pop	{r3}
 8008ef0:	469e      	mov	lr, r3
 8008ef2:	4770      	bx	lr
