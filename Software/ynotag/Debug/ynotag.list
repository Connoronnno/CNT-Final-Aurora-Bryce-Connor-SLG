
ynotag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092e4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000970  080093a0  080093a0  0000a3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d10  08009d10  0000b550  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009d10  08009d10  0000ad10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d18  08009d18  0000b550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d18  08009d18  0000ad18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009d1c  08009d1c  0000ad1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000550  20000000  08009d20  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000550  0800a270  0000b550  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200009dc  0800a270  0000b9dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b550  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad09  00000000  00000000  0000b578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003456  00000000  00000000  00026281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001820  00000000  00000000  000296d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013b1  00000000  00000000  0002aef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fb02  00000000  00000000  0002c2a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e20e  00000000  00000000  0004bdab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cac7d  00000000  00000000  00069fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134c36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006148  00000000  00000000  00134c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0013adc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000550 	.word	0x20000550
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009388 	.word	0x08009388

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000554 	.word	0x20000554
 8000100:	08009388 	.word	0x08009388

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	@ (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	@ (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f81e 	bl	8000488 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_f2uiz>:
 8000458:	219e      	movs	r1, #158	@ 0x9e
 800045a:	b510      	push	{r4, lr}
 800045c:	05c9      	lsls	r1, r1, #23
 800045e:	1c04      	adds	r4, r0, #0
 8000460:	f001 f8c6 	bl	80015f0 <__aeabi_fcmpge>
 8000464:	2800      	cmp	r0, #0
 8000466:	d103      	bne.n	8000470 <__aeabi_f2uiz+0x18>
 8000468:	1c20      	adds	r0, r4, #0
 800046a:	f000 ff9f 	bl	80013ac <__aeabi_f2iz>
 800046e:	bd10      	pop	{r4, pc}
 8000470:	219e      	movs	r1, #158	@ 0x9e
 8000472:	1c20      	adds	r0, r4, #0
 8000474:	05c9      	lsls	r1, r1, #23
 8000476:	f000 fd35 	bl	8000ee4 <__aeabi_fsub>
 800047a:	f000 ff97 	bl	80013ac <__aeabi_f2iz>
 800047e:	2380      	movs	r3, #128	@ 0x80
 8000480:	061b      	lsls	r3, r3, #24
 8000482:	469c      	mov	ip, r3
 8000484:	4460      	add	r0, ip
 8000486:	e7f2      	b.n	800046e <__aeabi_f2uiz+0x16>

08000488 <__udivmoddi4>:
 8000488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800048a:	4657      	mov	r7, sl
 800048c:	464e      	mov	r6, r9
 800048e:	4645      	mov	r5, r8
 8000490:	46de      	mov	lr, fp
 8000492:	b5e0      	push	{r5, r6, r7, lr}
 8000494:	0004      	movs	r4, r0
 8000496:	000d      	movs	r5, r1
 8000498:	4692      	mov	sl, r2
 800049a:	4699      	mov	r9, r3
 800049c:	b083      	sub	sp, #12
 800049e:	428b      	cmp	r3, r1
 80004a0:	d830      	bhi.n	8000504 <__udivmoddi4+0x7c>
 80004a2:	d02d      	beq.n	8000500 <__udivmoddi4+0x78>
 80004a4:	4649      	mov	r1, r9
 80004a6:	4650      	mov	r0, sl
 80004a8:	f001 f8ca 	bl	8001640 <__clzdi2>
 80004ac:	0029      	movs	r1, r5
 80004ae:	0006      	movs	r6, r0
 80004b0:	0020      	movs	r0, r4
 80004b2:	f001 f8c5 	bl	8001640 <__clzdi2>
 80004b6:	1a33      	subs	r3, r6, r0
 80004b8:	4698      	mov	r8, r3
 80004ba:	3b20      	subs	r3, #32
 80004bc:	d434      	bmi.n	8000528 <__udivmoddi4+0xa0>
 80004be:	469b      	mov	fp, r3
 80004c0:	4653      	mov	r3, sl
 80004c2:	465a      	mov	r2, fp
 80004c4:	4093      	lsls	r3, r2
 80004c6:	4642      	mov	r2, r8
 80004c8:	001f      	movs	r7, r3
 80004ca:	4653      	mov	r3, sl
 80004cc:	4093      	lsls	r3, r2
 80004ce:	001e      	movs	r6, r3
 80004d0:	42af      	cmp	r7, r5
 80004d2:	d83b      	bhi.n	800054c <__udivmoddi4+0xc4>
 80004d4:	42af      	cmp	r7, r5
 80004d6:	d100      	bne.n	80004da <__udivmoddi4+0x52>
 80004d8:	e079      	b.n	80005ce <__udivmoddi4+0x146>
 80004da:	465b      	mov	r3, fp
 80004dc:	1ba4      	subs	r4, r4, r6
 80004de:	41bd      	sbcs	r5, r7
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	da00      	bge.n	80004e6 <__udivmoddi4+0x5e>
 80004e4:	e076      	b.n	80005d4 <__udivmoddi4+0x14c>
 80004e6:	2200      	movs	r2, #0
 80004e8:	2300      	movs	r3, #0
 80004ea:	9200      	str	r2, [sp, #0]
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	2301      	movs	r3, #1
 80004f0:	465a      	mov	r2, fp
 80004f2:	4093      	lsls	r3, r2
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2301      	movs	r3, #1
 80004f8:	4642      	mov	r2, r8
 80004fa:	4093      	lsls	r3, r2
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	e029      	b.n	8000554 <__udivmoddi4+0xcc>
 8000500:	4282      	cmp	r2, r0
 8000502:	d9cf      	bls.n	80004a4 <__udivmoddi4+0x1c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <__udivmoddi4+0x8e>
 8000512:	601c      	str	r4, [r3, #0]
 8000514:	605d      	str	r5, [r3, #4]
 8000516:	9800      	ldr	r0, [sp, #0]
 8000518:	9901      	ldr	r1, [sp, #4]
 800051a:	b003      	add	sp, #12
 800051c:	bcf0      	pop	{r4, r5, r6, r7}
 800051e:	46bb      	mov	fp, r7
 8000520:	46b2      	mov	sl, r6
 8000522:	46a9      	mov	r9, r5
 8000524:	46a0      	mov	r8, r4
 8000526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000528:	4642      	mov	r2, r8
 800052a:	469b      	mov	fp, r3
 800052c:	2320      	movs	r3, #32
 800052e:	1a9b      	subs	r3, r3, r2
 8000530:	4652      	mov	r2, sl
 8000532:	40da      	lsrs	r2, r3
 8000534:	4641      	mov	r1, r8
 8000536:	0013      	movs	r3, r2
 8000538:	464a      	mov	r2, r9
 800053a:	408a      	lsls	r2, r1
 800053c:	0017      	movs	r7, r2
 800053e:	4642      	mov	r2, r8
 8000540:	431f      	orrs	r7, r3
 8000542:	4653      	mov	r3, sl
 8000544:	4093      	lsls	r3, r2
 8000546:	001e      	movs	r6, r3
 8000548:	42af      	cmp	r7, r5
 800054a:	d9c3      	bls.n	80004d4 <__udivmoddi4+0x4c>
 800054c:	2200      	movs	r2, #0
 800054e:	2300      	movs	r3, #0
 8000550:	9200      	str	r2, [sp, #0]
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	4643      	mov	r3, r8
 8000556:	2b00      	cmp	r3, #0
 8000558:	d0d8      	beq.n	800050c <__udivmoddi4+0x84>
 800055a:	07fb      	lsls	r3, r7, #31
 800055c:	0872      	lsrs	r2, r6, #1
 800055e:	431a      	orrs	r2, r3
 8000560:	4646      	mov	r6, r8
 8000562:	087b      	lsrs	r3, r7, #1
 8000564:	e00e      	b.n	8000584 <__udivmoddi4+0xfc>
 8000566:	42ab      	cmp	r3, r5
 8000568:	d101      	bne.n	800056e <__udivmoddi4+0xe6>
 800056a:	42a2      	cmp	r2, r4
 800056c:	d80c      	bhi.n	8000588 <__udivmoddi4+0x100>
 800056e:	1aa4      	subs	r4, r4, r2
 8000570:	419d      	sbcs	r5, r3
 8000572:	2001      	movs	r0, #1
 8000574:	1924      	adds	r4, r4, r4
 8000576:	416d      	adcs	r5, r5
 8000578:	2100      	movs	r1, #0
 800057a:	3e01      	subs	r6, #1
 800057c:	1824      	adds	r4, r4, r0
 800057e:	414d      	adcs	r5, r1
 8000580:	2e00      	cmp	r6, #0
 8000582:	d006      	beq.n	8000592 <__udivmoddi4+0x10a>
 8000584:	42ab      	cmp	r3, r5
 8000586:	d9ee      	bls.n	8000566 <__udivmoddi4+0xde>
 8000588:	3e01      	subs	r6, #1
 800058a:	1924      	adds	r4, r4, r4
 800058c:	416d      	adcs	r5, r5
 800058e:	2e00      	cmp	r6, #0
 8000590:	d1f8      	bne.n	8000584 <__udivmoddi4+0xfc>
 8000592:	9800      	ldr	r0, [sp, #0]
 8000594:	9901      	ldr	r1, [sp, #4]
 8000596:	465b      	mov	r3, fp
 8000598:	1900      	adds	r0, r0, r4
 800059a:	4169      	adcs	r1, r5
 800059c:	2b00      	cmp	r3, #0
 800059e:	db24      	blt.n	80005ea <__udivmoddi4+0x162>
 80005a0:	002b      	movs	r3, r5
 80005a2:	465a      	mov	r2, fp
 80005a4:	4644      	mov	r4, r8
 80005a6:	40d3      	lsrs	r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	40e2      	lsrs	r2, r4
 80005ac:	001c      	movs	r4, r3
 80005ae:	465b      	mov	r3, fp
 80005b0:	0015      	movs	r5, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	db2a      	blt.n	800060c <__udivmoddi4+0x184>
 80005b6:	0026      	movs	r6, r4
 80005b8:	409e      	lsls	r6, r3
 80005ba:	0033      	movs	r3, r6
 80005bc:	0026      	movs	r6, r4
 80005be:	4647      	mov	r7, r8
 80005c0:	40be      	lsls	r6, r7
 80005c2:	0032      	movs	r2, r6
 80005c4:	1a80      	subs	r0, r0, r2
 80005c6:	4199      	sbcs	r1, r3
 80005c8:	9000      	str	r0, [sp, #0]
 80005ca:	9101      	str	r1, [sp, #4]
 80005cc:	e79e      	b.n	800050c <__udivmoddi4+0x84>
 80005ce:	42a3      	cmp	r3, r4
 80005d0:	d8bc      	bhi.n	800054c <__udivmoddi4+0xc4>
 80005d2:	e782      	b.n	80004da <__udivmoddi4+0x52>
 80005d4:	4642      	mov	r2, r8
 80005d6:	2320      	movs	r3, #32
 80005d8:	2100      	movs	r1, #0
 80005da:	1a9b      	subs	r3, r3, r2
 80005dc:	2200      	movs	r2, #0
 80005de:	9100      	str	r1, [sp, #0]
 80005e0:	9201      	str	r2, [sp, #4]
 80005e2:	2201      	movs	r2, #1
 80005e4:	40da      	lsrs	r2, r3
 80005e6:	9201      	str	r2, [sp, #4]
 80005e8:	e785      	b.n	80004f6 <__udivmoddi4+0x6e>
 80005ea:	4642      	mov	r2, r8
 80005ec:	2320      	movs	r3, #32
 80005ee:	1a9b      	subs	r3, r3, r2
 80005f0:	002a      	movs	r2, r5
 80005f2:	4646      	mov	r6, r8
 80005f4:	409a      	lsls	r2, r3
 80005f6:	0023      	movs	r3, r4
 80005f8:	40f3      	lsrs	r3, r6
 80005fa:	4644      	mov	r4, r8
 80005fc:	4313      	orrs	r3, r2
 80005fe:	002a      	movs	r2, r5
 8000600:	40e2      	lsrs	r2, r4
 8000602:	001c      	movs	r4, r3
 8000604:	465b      	mov	r3, fp
 8000606:	0015      	movs	r5, r2
 8000608:	2b00      	cmp	r3, #0
 800060a:	dad4      	bge.n	80005b6 <__udivmoddi4+0x12e>
 800060c:	4642      	mov	r2, r8
 800060e:	002f      	movs	r7, r5
 8000610:	2320      	movs	r3, #32
 8000612:	0026      	movs	r6, r4
 8000614:	4097      	lsls	r7, r2
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	40de      	lsrs	r6, r3
 800061a:	003b      	movs	r3, r7
 800061c:	4333      	orrs	r3, r6
 800061e:	e7cd      	b.n	80005bc <__udivmoddi4+0x134>

08000620 <__aeabi_fadd>:
 8000620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000622:	024b      	lsls	r3, r1, #9
 8000624:	0a5a      	lsrs	r2, r3, #9
 8000626:	4694      	mov	ip, r2
 8000628:	004a      	lsls	r2, r1, #1
 800062a:	0fc9      	lsrs	r1, r1, #31
 800062c:	46ce      	mov	lr, r9
 800062e:	4647      	mov	r7, r8
 8000630:	4689      	mov	r9, r1
 8000632:	0045      	lsls	r5, r0, #1
 8000634:	0246      	lsls	r6, r0, #9
 8000636:	0e2d      	lsrs	r5, r5, #24
 8000638:	0e12      	lsrs	r2, r2, #24
 800063a:	b580      	push	{r7, lr}
 800063c:	0999      	lsrs	r1, r3, #6
 800063e:	0a77      	lsrs	r7, r6, #9
 8000640:	0fc4      	lsrs	r4, r0, #31
 8000642:	09b6      	lsrs	r6, r6, #6
 8000644:	1aab      	subs	r3, r5, r2
 8000646:	454c      	cmp	r4, r9
 8000648:	d020      	beq.n	800068c <__aeabi_fadd+0x6c>
 800064a:	2b00      	cmp	r3, #0
 800064c:	dd0c      	ble.n	8000668 <__aeabi_fadd+0x48>
 800064e:	2a00      	cmp	r2, #0
 8000650:	d134      	bne.n	80006bc <__aeabi_fadd+0x9c>
 8000652:	2900      	cmp	r1, #0
 8000654:	d02a      	beq.n	80006ac <__aeabi_fadd+0x8c>
 8000656:	1e5a      	subs	r2, r3, #1
 8000658:	2b01      	cmp	r3, #1
 800065a:	d100      	bne.n	800065e <__aeabi_fadd+0x3e>
 800065c:	e08f      	b.n	800077e <__aeabi_fadd+0x15e>
 800065e:	2bff      	cmp	r3, #255	@ 0xff
 8000660:	d100      	bne.n	8000664 <__aeabi_fadd+0x44>
 8000662:	e0cd      	b.n	8000800 <__aeabi_fadd+0x1e0>
 8000664:	0013      	movs	r3, r2
 8000666:	e02f      	b.n	80006c8 <__aeabi_fadd+0xa8>
 8000668:	2b00      	cmp	r3, #0
 800066a:	d060      	beq.n	800072e <__aeabi_fadd+0x10e>
 800066c:	1b53      	subs	r3, r2, r5
 800066e:	2d00      	cmp	r5, #0
 8000670:	d000      	beq.n	8000674 <__aeabi_fadd+0x54>
 8000672:	e0ee      	b.n	8000852 <__aeabi_fadd+0x232>
 8000674:	2e00      	cmp	r6, #0
 8000676:	d100      	bne.n	800067a <__aeabi_fadd+0x5a>
 8000678:	e13e      	b.n	80008f8 <__aeabi_fadd+0x2d8>
 800067a:	1e5c      	subs	r4, r3, #1
 800067c:	2b01      	cmp	r3, #1
 800067e:	d100      	bne.n	8000682 <__aeabi_fadd+0x62>
 8000680:	e16b      	b.n	800095a <__aeabi_fadd+0x33a>
 8000682:	2bff      	cmp	r3, #255	@ 0xff
 8000684:	d100      	bne.n	8000688 <__aeabi_fadd+0x68>
 8000686:	e0b9      	b.n	80007fc <__aeabi_fadd+0x1dc>
 8000688:	0023      	movs	r3, r4
 800068a:	e0e7      	b.n	800085c <__aeabi_fadd+0x23c>
 800068c:	2b00      	cmp	r3, #0
 800068e:	dc00      	bgt.n	8000692 <__aeabi_fadd+0x72>
 8000690:	e0a4      	b.n	80007dc <__aeabi_fadd+0x1bc>
 8000692:	2a00      	cmp	r2, #0
 8000694:	d069      	beq.n	800076a <__aeabi_fadd+0x14a>
 8000696:	2dff      	cmp	r5, #255	@ 0xff
 8000698:	d100      	bne.n	800069c <__aeabi_fadd+0x7c>
 800069a:	e0b1      	b.n	8000800 <__aeabi_fadd+0x1e0>
 800069c:	2280      	movs	r2, #128	@ 0x80
 800069e:	04d2      	lsls	r2, r2, #19
 80006a0:	4311      	orrs	r1, r2
 80006a2:	2b1b      	cmp	r3, #27
 80006a4:	dc00      	bgt.n	80006a8 <__aeabi_fadd+0x88>
 80006a6:	e0e9      	b.n	800087c <__aeabi_fadd+0x25c>
 80006a8:	002b      	movs	r3, r5
 80006aa:	3605      	adds	r6, #5
 80006ac:	08f7      	lsrs	r7, r6, #3
 80006ae:	2bff      	cmp	r3, #255	@ 0xff
 80006b0:	d100      	bne.n	80006b4 <__aeabi_fadd+0x94>
 80006b2:	e0a5      	b.n	8000800 <__aeabi_fadd+0x1e0>
 80006b4:	027a      	lsls	r2, r7, #9
 80006b6:	0a52      	lsrs	r2, r2, #9
 80006b8:	b2d8      	uxtb	r0, r3
 80006ba:	e030      	b.n	800071e <__aeabi_fadd+0xfe>
 80006bc:	2dff      	cmp	r5, #255	@ 0xff
 80006be:	d100      	bne.n	80006c2 <__aeabi_fadd+0xa2>
 80006c0:	e09e      	b.n	8000800 <__aeabi_fadd+0x1e0>
 80006c2:	2280      	movs	r2, #128	@ 0x80
 80006c4:	04d2      	lsls	r2, r2, #19
 80006c6:	4311      	orrs	r1, r2
 80006c8:	2001      	movs	r0, #1
 80006ca:	2b1b      	cmp	r3, #27
 80006cc:	dc08      	bgt.n	80006e0 <__aeabi_fadd+0xc0>
 80006ce:	0008      	movs	r0, r1
 80006d0:	2220      	movs	r2, #32
 80006d2:	40d8      	lsrs	r0, r3
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	4099      	lsls	r1, r3
 80006d8:	000b      	movs	r3, r1
 80006da:	1e5a      	subs	r2, r3, #1
 80006dc:	4193      	sbcs	r3, r2
 80006de:	4318      	orrs	r0, r3
 80006e0:	1a36      	subs	r6, r6, r0
 80006e2:	0173      	lsls	r3, r6, #5
 80006e4:	d400      	bmi.n	80006e8 <__aeabi_fadd+0xc8>
 80006e6:	e071      	b.n	80007cc <__aeabi_fadd+0x1ac>
 80006e8:	01b6      	lsls	r6, r6, #6
 80006ea:	09b7      	lsrs	r7, r6, #6
 80006ec:	0038      	movs	r0, r7
 80006ee:	f000 ff89 	bl	8001604 <__clzsi2>
 80006f2:	003b      	movs	r3, r7
 80006f4:	3805      	subs	r0, #5
 80006f6:	4083      	lsls	r3, r0
 80006f8:	4285      	cmp	r5, r0
 80006fa:	dd4d      	ble.n	8000798 <__aeabi_fadd+0x178>
 80006fc:	4eb4      	ldr	r6, [pc, #720]	@ (80009d0 <__aeabi_fadd+0x3b0>)
 80006fe:	1a2d      	subs	r5, r5, r0
 8000700:	401e      	ands	r6, r3
 8000702:	075a      	lsls	r2, r3, #29
 8000704:	d068      	beq.n	80007d8 <__aeabi_fadd+0x1b8>
 8000706:	220f      	movs	r2, #15
 8000708:	4013      	ands	r3, r2
 800070a:	2b04      	cmp	r3, #4
 800070c:	d064      	beq.n	80007d8 <__aeabi_fadd+0x1b8>
 800070e:	3604      	adds	r6, #4
 8000710:	0173      	lsls	r3, r6, #5
 8000712:	d561      	bpl.n	80007d8 <__aeabi_fadd+0x1b8>
 8000714:	1c68      	adds	r0, r5, #1
 8000716:	2dfe      	cmp	r5, #254	@ 0xfe
 8000718:	d154      	bne.n	80007c4 <__aeabi_fadd+0x1a4>
 800071a:	20ff      	movs	r0, #255	@ 0xff
 800071c:	2200      	movs	r2, #0
 800071e:	05c0      	lsls	r0, r0, #23
 8000720:	4310      	orrs	r0, r2
 8000722:	07e4      	lsls	r4, r4, #31
 8000724:	4320      	orrs	r0, r4
 8000726:	bcc0      	pop	{r6, r7}
 8000728:	46b9      	mov	r9, r7
 800072a:	46b0      	mov	r8, r6
 800072c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800072e:	22fe      	movs	r2, #254	@ 0xfe
 8000730:	4690      	mov	r8, r2
 8000732:	1c68      	adds	r0, r5, #1
 8000734:	0002      	movs	r2, r0
 8000736:	4640      	mov	r0, r8
 8000738:	4210      	tst	r0, r2
 800073a:	d16b      	bne.n	8000814 <__aeabi_fadd+0x1f4>
 800073c:	2d00      	cmp	r5, #0
 800073e:	d000      	beq.n	8000742 <__aeabi_fadd+0x122>
 8000740:	e0dd      	b.n	80008fe <__aeabi_fadd+0x2de>
 8000742:	2e00      	cmp	r6, #0
 8000744:	d100      	bne.n	8000748 <__aeabi_fadd+0x128>
 8000746:	e102      	b.n	800094e <__aeabi_fadd+0x32e>
 8000748:	2900      	cmp	r1, #0
 800074a:	d0b3      	beq.n	80006b4 <__aeabi_fadd+0x94>
 800074c:	2280      	movs	r2, #128	@ 0x80
 800074e:	1a77      	subs	r7, r6, r1
 8000750:	04d2      	lsls	r2, r2, #19
 8000752:	4217      	tst	r7, r2
 8000754:	d100      	bne.n	8000758 <__aeabi_fadd+0x138>
 8000756:	e136      	b.n	80009c6 <__aeabi_fadd+0x3a6>
 8000758:	464c      	mov	r4, r9
 800075a:	1b8e      	subs	r6, r1, r6
 800075c:	d061      	beq.n	8000822 <__aeabi_fadd+0x202>
 800075e:	2001      	movs	r0, #1
 8000760:	4216      	tst	r6, r2
 8000762:	d130      	bne.n	80007c6 <__aeabi_fadd+0x1a6>
 8000764:	2300      	movs	r3, #0
 8000766:	08f7      	lsrs	r7, r6, #3
 8000768:	e7a4      	b.n	80006b4 <__aeabi_fadd+0x94>
 800076a:	2900      	cmp	r1, #0
 800076c:	d09e      	beq.n	80006ac <__aeabi_fadd+0x8c>
 800076e:	1e5a      	subs	r2, r3, #1
 8000770:	2b01      	cmp	r3, #1
 8000772:	d100      	bne.n	8000776 <__aeabi_fadd+0x156>
 8000774:	e0ca      	b.n	800090c <__aeabi_fadd+0x2ec>
 8000776:	2bff      	cmp	r3, #255	@ 0xff
 8000778:	d042      	beq.n	8000800 <__aeabi_fadd+0x1e0>
 800077a:	0013      	movs	r3, r2
 800077c:	e791      	b.n	80006a2 <__aeabi_fadd+0x82>
 800077e:	1a71      	subs	r1, r6, r1
 8000780:	014b      	lsls	r3, r1, #5
 8000782:	d400      	bmi.n	8000786 <__aeabi_fadd+0x166>
 8000784:	e0d1      	b.n	800092a <__aeabi_fadd+0x30a>
 8000786:	018f      	lsls	r7, r1, #6
 8000788:	09bf      	lsrs	r7, r7, #6
 800078a:	0038      	movs	r0, r7
 800078c:	f000 ff3a 	bl	8001604 <__clzsi2>
 8000790:	003b      	movs	r3, r7
 8000792:	3805      	subs	r0, #5
 8000794:	4083      	lsls	r3, r0
 8000796:	2501      	movs	r5, #1
 8000798:	2220      	movs	r2, #32
 800079a:	1b40      	subs	r0, r0, r5
 800079c:	3001      	adds	r0, #1
 800079e:	1a12      	subs	r2, r2, r0
 80007a0:	001e      	movs	r6, r3
 80007a2:	4093      	lsls	r3, r2
 80007a4:	40c6      	lsrs	r6, r0
 80007a6:	1e5a      	subs	r2, r3, #1
 80007a8:	4193      	sbcs	r3, r2
 80007aa:	431e      	orrs	r6, r3
 80007ac:	d039      	beq.n	8000822 <__aeabi_fadd+0x202>
 80007ae:	0773      	lsls	r3, r6, #29
 80007b0:	d100      	bne.n	80007b4 <__aeabi_fadd+0x194>
 80007b2:	e11b      	b.n	80009ec <__aeabi_fadd+0x3cc>
 80007b4:	230f      	movs	r3, #15
 80007b6:	2500      	movs	r5, #0
 80007b8:	4033      	ands	r3, r6
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	d1a7      	bne.n	800070e <__aeabi_fadd+0xee>
 80007be:	2001      	movs	r0, #1
 80007c0:	0172      	lsls	r2, r6, #5
 80007c2:	d57c      	bpl.n	80008be <__aeabi_fadd+0x29e>
 80007c4:	b2c0      	uxtb	r0, r0
 80007c6:	01b2      	lsls	r2, r6, #6
 80007c8:	0a52      	lsrs	r2, r2, #9
 80007ca:	e7a8      	b.n	800071e <__aeabi_fadd+0xfe>
 80007cc:	0773      	lsls	r3, r6, #29
 80007ce:	d003      	beq.n	80007d8 <__aeabi_fadd+0x1b8>
 80007d0:	230f      	movs	r3, #15
 80007d2:	4033      	ands	r3, r6
 80007d4:	2b04      	cmp	r3, #4
 80007d6:	d19a      	bne.n	800070e <__aeabi_fadd+0xee>
 80007d8:	002b      	movs	r3, r5
 80007da:	e767      	b.n	80006ac <__aeabi_fadd+0x8c>
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d023      	beq.n	8000828 <__aeabi_fadd+0x208>
 80007e0:	1b53      	subs	r3, r2, r5
 80007e2:	2d00      	cmp	r5, #0
 80007e4:	d17b      	bne.n	80008de <__aeabi_fadd+0x2be>
 80007e6:	2e00      	cmp	r6, #0
 80007e8:	d100      	bne.n	80007ec <__aeabi_fadd+0x1cc>
 80007ea:	e086      	b.n	80008fa <__aeabi_fadd+0x2da>
 80007ec:	1e5d      	subs	r5, r3, #1
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x1d4>
 80007f2:	e08b      	b.n	800090c <__aeabi_fadd+0x2ec>
 80007f4:	2bff      	cmp	r3, #255	@ 0xff
 80007f6:	d002      	beq.n	80007fe <__aeabi_fadd+0x1de>
 80007f8:	002b      	movs	r3, r5
 80007fa:	e075      	b.n	80008e8 <__aeabi_fadd+0x2c8>
 80007fc:	464c      	mov	r4, r9
 80007fe:	4667      	mov	r7, ip
 8000800:	2f00      	cmp	r7, #0
 8000802:	d100      	bne.n	8000806 <__aeabi_fadd+0x1e6>
 8000804:	e789      	b.n	800071a <__aeabi_fadd+0xfa>
 8000806:	2280      	movs	r2, #128	@ 0x80
 8000808:	03d2      	lsls	r2, r2, #15
 800080a:	433a      	orrs	r2, r7
 800080c:	0252      	lsls	r2, r2, #9
 800080e:	20ff      	movs	r0, #255	@ 0xff
 8000810:	0a52      	lsrs	r2, r2, #9
 8000812:	e784      	b.n	800071e <__aeabi_fadd+0xfe>
 8000814:	1a77      	subs	r7, r6, r1
 8000816:	017b      	lsls	r3, r7, #5
 8000818:	d46b      	bmi.n	80008f2 <__aeabi_fadd+0x2d2>
 800081a:	2f00      	cmp	r7, #0
 800081c:	d000      	beq.n	8000820 <__aeabi_fadd+0x200>
 800081e:	e765      	b.n	80006ec <__aeabi_fadd+0xcc>
 8000820:	2400      	movs	r4, #0
 8000822:	2000      	movs	r0, #0
 8000824:	2200      	movs	r2, #0
 8000826:	e77a      	b.n	800071e <__aeabi_fadd+0xfe>
 8000828:	22fe      	movs	r2, #254	@ 0xfe
 800082a:	1c6b      	adds	r3, r5, #1
 800082c:	421a      	tst	r2, r3
 800082e:	d149      	bne.n	80008c4 <__aeabi_fadd+0x2a4>
 8000830:	2d00      	cmp	r5, #0
 8000832:	d000      	beq.n	8000836 <__aeabi_fadd+0x216>
 8000834:	e09f      	b.n	8000976 <__aeabi_fadd+0x356>
 8000836:	2e00      	cmp	r6, #0
 8000838:	d100      	bne.n	800083c <__aeabi_fadd+0x21c>
 800083a:	e0ba      	b.n	80009b2 <__aeabi_fadd+0x392>
 800083c:	2900      	cmp	r1, #0
 800083e:	d100      	bne.n	8000842 <__aeabi_fadd+0x222>
 8000840:	e0cf      	b.n	80009e2 <__aeabi_fadd+0x3c2>
 8000842:	1872      	adds	r2, r6, r1
 8000844:	0153      	lsls	r3, r2, #5
 8000846:	d400      	bmi.n	800084a <__aeabi_fadd+0x22a>
 8000848:	e0cd      	b.n	80009e6 <__aeabi_fadd+0x3c6>
 800084a:	0192      	lsls	r2, r2, #6
 800084c:	2001      	movs	r0, #1
 800084e:	0a52      	lsrs	r2, r2, #9
 8000850:	e765      	b.n	800071e <__aeabi_fadd+0xfe>
 8000852:	2aff      	cmp	r2, #255	@ 0xff
 8000854:	d0d2      	beq.n	80007fc <__aeabi_fadd+0x1dc>
 8000856:	2080      	movs	r0, #128	@ 0x80
 8000858:	04c0      	lsls	r0, r0, #19
 800085a:	4306      	orrs	r6, r0
 800085c:	2001      	movs	r0, #1
 800085e:	2b1b      	cmp	r3, #27
 8000860:	dc08      	bgt.n	8000874 <__aeabi_fadd+0x254>
 8000862:	0030      	movs	r0, r6
 8000864:	2420      	movs	r4, #32
 8000866:	40d8      	lsrs	r0, r3
 8000868:	1ae3      	subs	r3, r4, r3
 800086a:	409e      	lsls	r6, r3
 800086c:	0033      	movs	r3, r6
 800086e:	1e5c      	subs	r4, r3, #1
 8000870:	41a3      	sbcs	r3, r4
 8000872:	4318      	orrs	r0, r3
 8000874:	464c      	mov	r4, r9
 8000876:	0015      	movs	r5, r2
 8000878:	1a0e      	subs	r6, r1, r0
 800087a:	e732      	b.n	80006e2 <__aeabi_fadd+0xc2>
 800087c:	0008      	movs	r0, r1
 800087e:	2220      	movs	r2, #32
 8000880:	40d8      	lsrs	r0, r3
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	4099      	lsls	r1, r3
 8000886:	000b      	movs	r3, r1
 8000888:	1e5a      	subs	r2, r3, #1
 800088a:	4193      	sbcs	r3, r2
 800088c:	4303      	orrs	r3, r0
 800088e:	18f6      	adds	r6, r6, r3
 8000890:	0173      	lsls	r3, r6, #5
 8000892:	d59b      	bpl.n	80007cc <__aeabi_fadd+0x1ac>
 8000894:	3501      	adds	r5, #1
 8000896:	2dff      	cmp	r5, #255	@ 0xff
 8000898:	d100      	bne.n	800089c <__aeabi_fadd+0x27c>
 800089a:	e73e      	b.n	800071a <__aeabi_fadd+0xfa>
 800089c:	2301      	movs	r3, #1
 800089e:	494d      	ldr	r1, [pc, #308]	@ (80009d4 <__aeabi_fadd+0x3b4>)
 80008a0:	0872      	lsrs	r2, r6, #1
 80008a2:	4033      	ands	r3, r6
 80008a4:	400a      	ands	r2, r1
 80008a6:	431a      	orrs	r2, r3
 80008a8:	0016      	movs	r6, r2
 80008aa:	0753      	lsls	r3, r2, #29
 80008ac:	d004      	beq.n	80008b8 <__aeabi_fadd+0x298>
 80008ae:	230f      	movs	r3, #15
 80008b0:	4013      	ands	r3, r2
 80008b2:	2b04      	cmp	r3, #4
 80008b4:	d000      	beq.n	80008b8 <__aeabi_fadd+0x298>
 80008b6:	e72a      	b.n	800070e <__aeabi_fadd+0xee>
 80008b8:	0173      	lsls	r3, r6, #5
 80008ba:	d500      	bpl.n	80008be <__aeabi_fadd+0x29e>
 80008bc:	e72a      	b.n	8000714 <__aeabi_fadd+0xf4>
 80008be:	002b      	movs	r3, r5
 80008c0:	08f7      	lsrs	r7, r6, #3
 80008c2:	e6f7      	b.n	80006b4 <__aeabi_fadd+0x94>
 80008c4:	2bff      	cmp	r3, #255	@ 0xff
 80008c6:	d100      	bne.n	80008ca <__aeabi_fadd+0x2aa>
 80008c8:	e727      	b.n	800071a <__aeabi_fadd+0xfa>
 80008ca:	1871      	adds	r1, r6, r1
 80008cc:	0849      	lsrs	r1, r1, #1
 80008ce:	074a      	lsls	r2, r1, #29
 80008d0:	d02f      	beq.n	8000932 <__aeabi_fadd+0x312>
 80008d2:	220f      	movs	r2, #15
 80008d4:	400a      	ands	r2, r1
 80008d6:	2a04      	cmp	r2, #4
 80008d8:	d02b      	beq.n	8000932 <__aeabi_fadd+0x312>
 80008da:	1d0e      	adds	r6, r1, #4
 80008dc:	e6e6      	b.n	80006ac <__aeabi_fadd+0x8c>
 80008de:	2aff      	cmp	r2, #255	@ 0xff
 80008e0:	d08d      	beq.n	80007fe <__aeabi_fadd+0x1de>
 80008e2:	2080      	movs	r0, #128	@ 0x80
 80008e4:	04c0      	lsls	r0, r0, #19
 80008e6:	4306      	orrs	r6, r0
 80008e8:	2b1b      	cmp	r3, #27
 80008ea:	dd24      	ble.n	8000936 <__aeabi_fadd+0x316>
 80008ec:	0013      	movs	r3, r2
 80008ee:	1d4e      	adds	r6, r1, #5
 80008f0:	e6dc      	b.n	80006ac <__aeabi_fadd+0x8c>
 80008f2:	464c      	mov	r4, r9
 80008f4:	1b8f      	subs	r7, r1, r6
 80008f6:	e6f9      	b.n	80006ec <__aeabi_fadd+0xcc>
 80008f8:	464c      	mov	r4, r9
 80008fa:	000e      	movs	r6, r1
 80008fc:	e6d6      	b.n	80006ac <__aeabi_fadd+0x8c>
 80008fe:	2e00      	cmp	r6, #0
 8000900:	d149      	bne.n	8000996 <__aeabi_fadd+0x376>
 8000902:	2900      	cmp	r1, #0
 8000904:	d068      	beq.n	80009d8 <__aeabi_fadd+0x3b8>
 8000906:	4667      	mov	r7, ip
 8000908:	464c      	mov	r4, r9
 800090a:	e77c      	b.n	8000806 <__aeabi_fadd+0x1e6>
 800090c:	1870      	adds	r0, r6, r1
 800090e:	0143      	lsls	r3, r0, #5
 8000910:	d574      	bpl.n	80009fc <__aeabi_fadd+0x3dc>
 8000912:	4930      	ldr	r1, [pc, #192]	@ (80009d4 <__aeabi_fadd+0x3b4>)
 8000914:	0840      	lsrs	r0, r0, #1
 8000916:	4001      	ands	r1, r0
 8000918:	0743      	lsls	r3, r0, #29
 800091a:	d009      	beq.n	8000930 <__aeabi_fadd+0x310>
 800091c:	230f      	movs	r3, #15
 800091e:	4003      	ands	r3, r0
 8000920:	2b04      	cmp	r3, #4
 8000922:	d005      	beq.n	8000930 <__aeabi_fadd+0x310>
 8000924:	2302      	movs	r3, #2
 8000926:	1d0e      	adds	r6, r1, #4
 8000928:	e6c0      	b.n	80006ac <__aeabi_fadd+0x8c>
 800092a:	2301      	movs	r3, #1
 800092c:	08cf      	lsrs	r7, r1, #3
 800092e:	e6c1      	b.n	80006b4 <__aeabi_fadd+0x94>
 8000930:	2302      	movs	r3, #2
 8000932:	08cf      	lsrs	r7, r1, #3
 8000934:	e6be      	b.n	80006b4 <__aeabi_fadd+0x94>
 8000936:	2520      	movs	r5, #32
 8000938:	0030      	movs	r0, r6
 800093a:	40d8      	lsrs	r0, r3
 800093c:	1aeb      	subs	r3, r5, r3
 800093e:	409e      	lsls	r6, r3
 8000940:	0033      	movs	r3, r6
 8000942:	1e5d      	subs	r5, r3, #1
 8000944:	41ab      	sbcs	r3, r5
 8000946:	4303      	orrs	r3, r0
 8000948:	0015      	movs	r5, r2
 800094a:	185e      	adds	r6, r3, r1
 800094c:	e7a0      	b.n	8000890 <__aeabi_fadd+0x270>
 800094e:	2900      	cmp	r1, #0
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x334>
 8000952:	e765      	b.n	8000820 <__aeabi_fadd+0x200>
 8000954:	464c      	mov	r4, r9
 8000956:	4667      	mov	r7, ip
 8000958:	e6ac      	b.n	80006b4 <__aeabi_fadd+0x94>
 800095a:	1b8f      	subs	r7, r1, r6
 800095c:	017b      	lsls	r3, r7, #5
 800095e:	d52e      	bpl.n	80009be <__aeabi_fadd+0x39e>
 8000960:	01bf      	lsls	r7, r7, #6
 8000962:	09bf      	lsrs	r7, r7, #6
 8000964:	0038      	movs	r0, r7
 8000966:	f000 fe4d 	bl	8001604 <__clzsi2>
 800096a:	003b      	movs	r3, r7
 800096c:	3805      	subs	r0, #5
 800096e:	4083      	lsls	r3, r0
 8000970:	464c      	mov	r4, r9
 8000972:	3501      	adds	r5, #1
 8000974:	e710      	b.n	8000798 <__aeabi_fadd+0x178>
 8000976:	2e00      	cmp	r6, #0
 8000978:	d100      	bne.n	800097c <__aeabi_fadd+0x35c>
 800097a:	e740      	b.n	80007fe <__aeabi_fadd+0x1de>
 800097c:	2900      	cmp	r1, #0
 800097e:	d100      	bne.n	8000982 <__aeabi_fadd+0x362>
 8000980:	e741      	b.n	8000806 <__aeabi_fadd+0x1e6>
 8000982:	2380      	movs	r3, #128	@ 0x80
 8000984:	03db      	lsls	r3, r3, #15
 8000986:	429f      	cmp	r7, r3
 8000988:	d200      	bcs.n	800098c <__aeabi_fadd+0x36c>
 800098a:	e73c      	b.n	8000806 <__aeabi_fadd+0x1e6>
 800098c:	459c      	cmp	ip, r3
 800098e:	d300      	bcc.n	8000992 <__aeabi_fadd+0x372>
 8000990:	e739      	b.n	8000806 <__aeabi_fadd+0x1e6>
 8000992:	4667      	mov	r7, ip
 8000994:	e737      	b.n	8000806 <__aeabi_fadd+0x1e6>
 8000996:	2900      	cmp	r1, #0
 8000998:	d100      	bne.n	800099c <__aeabi_fadd+0x37c>
 800099a:	e734      	b.n	8000806 <__aeabi_fadd+0x1e6>
 800099c:	2380      	movs	r3, #128	@ 0x80
 800099e:	03db      	lsls	r3, r3, #15
 80009a0:	429f      	cmp	r7, r3
 80009a2:	d200      	bcs.n	80009a6 <__aeabi_fadd+0x386>
 80009a4:	e72f      	b.n	8000806 <__aeabi_fadd+0x1e6>
 80009a6:	459c      	cmp	ip, r3
 80009a8:	d300      	bcc.n	80009ac <__aeabi_fadd+0x38c>
 80009aa:	e72c      	b.n	8000806 <__aeabi_fadd+0x1e6>
 80009ac:	464c      	mov	r4, r9
 80009ae:	4667      	mov	r7, ip
 80009b0:	e729      	b.n	8000806 <__aeabi_fadd+0x1e6>
 80009b2:	2900      	cmp	r1, #0
 80009b4:	d100      	bne.n	80009b8 <__aeabi_fadd+0x398>
 80009b6:	e734      	b.n	8000822 <__aeabi_fadd+0x202>
 80009b8:	2300      	movs	r3, #0
 80009ba:	08cf      	lsrs	r7, r1, #3
 80009bc:	e67a      	b.n	80006b4 <__aeabi_fadd+0x94>
 80009be:	464c      	mov	r4, r9
 80009c0:	2301      	movs	r3, #1
 80009c2:	08ff      	lsrs	r7, r7, #3
 80009c4:	e676      	b.n	80006b4 <__aeabi_fadd+0x94>
 80009c6:	2f00      	cmp	r7, #0
 80009c8:	d100      	bne.n	80009cc <__aeabi_fadd+0x3ac>
 80009ca:	e729      	b.n	8000820 <__aeabi_fadd+0x200>
 80009cc:	08ff      	lsrs	r7, r7, #3
 80009ce:	e671      	b.n	80006b4 <__aeabi_fadd+0x94>
 80009d0:	fbffffff 	.word	0xfbffffff
 80009d4:	7dffffff 	.word	0x7dffffff
 80009d8:	2280      	movs	r2, #128	@ 0x80
 80009da:	2400      	movs	r4, #0
 80009dc:	20ff      	movs	r0, #255	@ 0xff
 80009de:	03d2      	lsls	r2, r2, #15
 80009e0:	e69d      	b.n	800071e <__aeabi_fadd+0xfe>
 80009e2:	2300      	movs	r3, #0
 80009e4:	e666      	b.n	80006b4 <__aeabi_fadd+0x94>
 80009e6:	2300      	movs	r3, #0
 80009e8:	08d7      	lsrs	r7, r2, #3
 80009ea:	e663      	b.n	80006b4 <__aeabi_fadd+0x94>
 80009ec:	2001      	movs	r0, #1
 80009ee:	0172      	lsls	r2, r6, #5
 80009f0:	d500      	bpl.n	80009f4 <__aeabi_fadd+0x3d4>
 80009f2:	e6e7      	b.n	80007c4 <__aeabi_fadd+0x1a4>
 80009f4:	0031      	movs	r1, r6
 80009f6:	2300      	movs	r3, #0
 80009f8:	08cf      	lsrs	r7, r1, #3
 80009fa:	e65b      	b.n	80006b4 <__aeabi_fadd+0x94>
 80009fc:	2301      	movs	r3, #1
 80009fe:	08c7      	lsrs	r7, r0, #3
 8000a00:	e658      	b.n	80006b4 <__aeabi_fadd+0x94>
 8000a02:	46c0      	nop			@ (mov r8, r8)

08000a04 <__aeabi_fdiv>:
 8000a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a06:	4646      	mov	r6, r8
 8000a08:	464f      	mov	r7, r9
 8000a0a:	46d6      	mov	lr, sl
 8000a0c:	0245      	lsls	r5, r0, #9
 8000a0e:	b5c0      	push	{r6, r7, lr}
 8000a10:	0fc3      	lsrs	r3, r0, #31
 8000a12:	0047      	lsls	r7, r0, #1
 8000a14:	4698      	mov	r8, r3
 8000a16:	1c0e      	adds	r6, r1, #0
 8000a18:	0a6d      	lsrs	r5, r5, #9
 8000a1a:	0e3f      	lsrs	r7, r7, #24
 8000a1c:	d05b      	beq.n	8000ad6 <__aeabi_fdiv+0xd2>
 8000a1e:	2fff      	cmp	r7, #255	@ 0xff
 8000a20:	d021      	beq.n	8000a66 <__aeabi_fdiv+0x62>
 8000a22:	2380      	movs	r3, #128	@ 0x80
 8000a24:	00ed      	lsls	r5, r5, #3
 8000a26:	04db      	lsls	r3, r3, #19
 8000a28:	431d      	orrs	r5, r3
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	4699      	mov	r9, r3
 8000a2e:	469a      	mov	sl, r3
 8000a30:	3f7f      	subs	r7, #127	@ 0x7f
 8000a32:	0274      	lsls	r4, r6, #9
 8000a34:	0073      	lsls	r3, r6, #1
 8000a36:	0a64      	lsrs	r4, r4, #9
 8000a38:	0e1b      	lsrs	r3, r3, #24
 8000a3a:	0ff6      	lsrs	r6, r6, #31
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d020      	beq.n	8000a82 <__aeabi_fdiv+0x7e>
 8000a40:	2bff      	cmp	r3, #255	@ 0xff
 8000a42:	d043      	beq.n	8000acc <__aeabi_fdiv+0xc8>
 8000a44:	2280      	movs	r2, #128	@ 0x80
 8000a46:	2000      	movs	r0, #0
 8000a48:	00e4      	lsls	r4, r4, #3
 8000a4a:	04d2      	lsls	r2, r2, #19
 8000a4c:	4314      	orrs	r4, r2
 8000a4e:	3b7f      	subs	r3, #127	@ 0x7f
 8000a50:	4642      	mov	r2, r8
 8000a52:	1aff      	subs	r7, r7, r3
 8000a54:	464b      	mov	r3, r9
 8000a56:	4072      	eors	r2, r6
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d900      	bls.n	8000a5e <__aeabi_fdiv+0x5a>
 8000a5c:	e09d      	b.n	8000b9a <__aeabi_fdiv+0x196>
 8000a5e:	4971      	ldr	r1, [pc, #452]	@ (8000c24 <__aeabi_fdiv+0x220>)
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	58cb      	ldr	r3, [r1, r3]
 8000a64:	469f      	mov	pc, r3
 8000a66:	2d00      	cmp	r5, #0
 8000a68:	d15a      	bne.n	8000b20 <__aeabi_fdiv+0x11c>
 8000a6a:	2308      	movs	r3, #8
 8000a6c:	4699      	mov	r9, r3
 8000a6e:	3b06      	subs	r3, #6
 8000a70:	0274      	lsls	r4, r6, #9
 8000a72:	469a      	mov	sl, r3
 8000a74:	0073      	lsls	r3, r6, #1
 8000a76:	27ff      	movs	r7, #255	@ 0xff
 8000a78:	0a64      	lsrs	r4, r4, #9
 8000a7a:	0e1b      	lsrs	r3, r3, #24
 8000a7c:	0ff6      	lsrs	r6, r6, #31
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d1de      	bne.n	8000a40 <__aeabi_fdiv+0x3c>
 8000a82:	2c00      	cmp	r4, #0
 8000a84:	d13b      	bne.n	8000afe <__aeabi_fdiv+0xfa>
 8000a86:	2301      	movs	r3, #1
 8000a88:	4642      	mov	r2, r8
 8000a8a:	4649      	mov	r1, r9
 8000a8c:	4072      	eors	r2, r6
 8000a8e:	4319      	orrs	r1, r3
 8000a90:	290e      	cmp	r1, #14
 8000a92:	d818      	bhi.n	8000ac6 <__aeabi_fdiv+0xc2>
 8000a94:	4864      	ldr	r0, [pc, #400]	@ (8000c28 <__aeabi_fdiv+0x224>)
 8000a96:	0089      	lsls	r1, r1, #2
 8000a98:	5841      	ldr	r1, [r0, r1]
 8000a9a:	468f      	mov	pc, r1
 8000a9c:	4653      	mov	r3, sl
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_fdiv+0xa0>
 8000aa2:	e0b8      	b.n	8000c16 <__aeabi_fdiv+0x212>
 8000aa4:	2b03      	cmp	r3, #3
 8000aa6:	d06e      	beq.n	8000b86 <__aeabi_fdiv+0x182>
 8000aa8:	4642      	mov	r2, r8
 8000aaa:	002c      	movs	r4, r5
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d140      	bne.n	8000b32 <__aeabi_fdiv+0x12e>
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	2400      	movs	r4, #0
 8000ab4:	05c0      	lsls	r0, r0, #23
 8000ab6:	4320      	orrs	r0, r4
 8000ab8:	07d2      	lsls	r2, r2, #31
 8000aba:	4310      	orrs	r0, r2
 8000abc:	bce0      	pop	{r5, r6, r7}
 8000abe:	46ba      	mov	sl, r7
 8000ac0:	46b1      	mov	r9, r6
 8000ac2:	46a8      	mov	r8, r5
 8000ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ac6:	20ff      	movs	r0, #255	@ 0xff
 8000ac8:	2400      	movs	r4, #0
 8000aca:	e7f3      	b.n	8000ab4 <__aeabi_fdiv+0xb0>
 8000acc:	2c00      	cmp	r4, #0
 8000ace:	d120      	bne.n	8000b12 <__aeabi_fdiv+0x10e>
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	3fff      	subs	r7, #255	@ 0xff
 8000ad4:	e7d8      	b.n	8000a88 <__aeabi_fdiv+0x84>
 8000ad6:	2d00      	cmp	r5, #0
 8000ad8:	d105      	bne.n	8000ae6 <__aeabi_fdiv+0xe2>
 8000ada:	2304      	movs	r3, #4
 8000adc:	4699      	mov	r9, r3
 8000ade:	3b03      	subs	r3, #3
 8000ae0:	2700      	movs	r7, #0
 8000ae2:	469a      	mov	sl, r3
 8000ae4:	e7a5      	b.n	8000a32 <__aeabi_fdiv+0x2e>
 8000ae6:	0028      	movs	r0, r5
 8000ae8:	f000 fd8c 	bl	8001604 <__clzsi2>
 8000aec:	2776      	movs	r7, #118	@ 0x76
 8000aee:	1f43      	subs	r3, r0, #5
 8000af0:	409d      	lsls	r5, r3
 8000af2:	2300      	movs	r3, #0
 8000af4:	427f      	negs	r7, r7
 8000af6:	4699      	mov	r9, r3
 8000af8:	469a      	mov	sl, r3
 8000afa:	1a3f      	subs	r7, r7, r0
 8000afc:	e799      	b.n	8000a32 <__aeabi_fdiv+0x2e>
 8000afe:	0020      	movs	r0, r4
 8000b00:	f000 fd80 	bl	8001604 <__clzsi2>
 8000b04:	1f43      	subs	r3, r0, #5
 8000b06:	409c      	lsls	r4, r3
 8000b08:	2376      	movs	r3, #118	@ 0x76
 8000b0a:	425b      	negs	r3, r3
 8000b0c:	1a1b      	subs	r3, r3, r0
 8000b0e:	2000      	movs	r0, #0
 8000b10:	e79e      	b.n	8000a50 <__aeabi_fdiv+0x4c>
 8000b12:	2303      	movs	r3, #3
 8000b14:	464a      	mov	r2, r9
 8000b16:	431a      	orrs	r2, r3
 8000b18:	4691      	mov	r9, r2
 8000b1a:	2003      	movs	r0, #3
 8000b1c:	33fc      	adds	r3, #252	@ 0xfc
 8000b1e:	e797      	b.n	8000a50 <__aeabi_fdiv+0x4c>
 8000b20:	230c      	movs	r3, #12
 8000b22:	4699      	mov	r9, r3
 8000b24:	3b09      	subs	r3, #9
 8000b26:	27ff      	movs	r7, #255	@ 0xff
 8000b28:	469a      	mov	sl, r3
 8000b2a:	e782      	b.n	8000a32 <__aeabi_fdiv+0x2e>
 8000b2c:	2803      	cmp	r0, #3
 8000b2e:	d02c      	beq.n	8000b8a <__aeabi_fdiv+0x186>
 8000b30:	0032      	movs	r2, r6
 8000b32:	0038      	movs	r0, r7
 8000b34:	307f      	adds	r0, #127	@ 0x7f
 8000b36:	2800      	cmp	r0, #0
 8000b38:	dd47      	ble.n	8000bca <__aeabi_fdiv+0x1c6>
 8000b3a:	0763      	lsls	r3, r4, #29
 8000b3c:	d004      	beq.n	8000b48 <__aeabi_fdiv+0x144>
 8000b3e:	230f      	movs	r3, #15
 8000b40:	4023      	ands	r3, r4
 8000b42:	2b04      	cmp	r3, #4
 8000b44:	d000      	beq.n	8000b48 <__aeabi_fdiv+0x144>
 8000b46:	3404      	adds	r4, #4
 8000b48:	0123      	lsls	r3, r4, #4
 8000b4a:	d503      	bpl.n	8000b54 <__aeabi_fdiv+0x150>
 8000b4c:	0038      	movs	r0, r7
 8000b4e:	4b37      	ldr	r3, [pc, #220]	@ (8000c2c <__aeabi_fdiv+0x228>)
 8000b50:	3080      	adds	r0, #128	@ 0x80
 8000b52:	401c      	ands	r4, r3
 8000b54:	28fe      	cmp	r0, #254	@ 0xfe
 8000b56:	dcb6      	bgt.n	8000ac6 <__aeabi_fdiv+0xc2>
 8000b58:	01a4      	lsls	r4, r4, #6
 8000b5a:	0a64      	lsrs	r4, r4, #9
 8000b5c:	b2c0      	uxtb	r0, r0
 8000b5e:	e7a9      	b.n	8000ab4 <__aeabi_fdiv+0xb0>
 8000b60:	2480      	movs	r4, #128	@ 0x80
 8000b62:	2200      	movs	r2, #0
 8000b64:	20ff      	movs	r0, #255	@ 0xff
 8000b66:	03e4      	lsls	r4, r4, #15
 8000b68:	e7a4      	b.n	8000ab4 <__aeabi_fdiv+0xb0>
 8000b6a:	2380      	movs	r3, #128	@ 0x80
 8000b6c:	03db      	lsls	r3, r3, #15
 8000b6e:	421d      	tst	r5, r3
 8000b70:	d001      	beq.n	8000b76 <__aeabi_fdiv+0x172>
 8000b72:	421c      	tst	r4, r3
 8000b74:	d00b      	beq.n	8000b8e <__aeabi_fdiv+0x18a>
 8000b76:	2480      	movs	r4, #128	@ 0x80
 8000b78:	03e4      	lsls	r4, r4, #15
 8000b7a:	432c      	orrs	r4, r5
 8000b7c:	0264      	lsls	r4, r4, #9
 8000b7e:	4642      	mov	r2, r8
 8000b80:	20ff      	movs	r0, #255	@ 0xff
 8000b82:	0a64      	lsrs	r4, r4, #9
 8000b84:	e796      	b.n	8000ab4 <__aeabi_fdiv+0xb0>
 8000b86:	4646      	mov	r6, r8
 8000b88:	002c      	movs	r4, r5
 8000b8a:	2380      	movs	r3, #128	@ 0x80
 8000b8c:	03db      	lsls	r3, r3, #15
 8000b8e:	431c      	orrs	r4, r3
 8000b90:	0264      	lsls	r4, r4, #9
 8000b92:	0032      	movs	r2, r6
 8000b94:	20ff      	movs	r0, #255	@ 0xff
 8000b96:	0a64      	lsrs	r4, r4, #9
 8000b98:	e78c      	b.n	8000ab4 <__aeabi_fdiv+0xb0>
 8000b9a:	016d      	lsls	r5, r5, #5
 8000b9c:	0160      	lsls	r0, r4, #5
 8000b9e:	4285      	cmp	r5, r0
 8000ba0:	d22d      	bcs.n	8000bfe <__aeabi_fdiv+0x1fa>
 8000ba2:	231b      	movs	r3, #27
 8000ba4:	2400      	movs	r4, #0
 8000ba6:	3f01      	subs	r7, #1
 8000ba8:	2601      	movs	r6, #1
 8000baa:	0029      	movs	r1, r5
 8000bac:	0064      	lsls	r4, r4, #1
 8000bae:	006d      	lsls	r5, r5, #1
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	db01      	blt.n	8000bb8 <__aeabi_fdiv+0x1b4>
 8000bb4:	4285      	cmp	r5, r0
 8000bb6:	d301      	bcc.n	8000bbc <__aeabi_fdiv+0x1b8>
 8000bb8:	1a2d      	subs	r5, r5, r0
 8000bba:	4334      	orrs	r4, r6
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1f3      	bne.n	8000baa <__aeabi_fdiv+0x1a6>
 8000bc2:	1e6b      	subs	r3, r5, #1
 8000bc4:	419d      	sbcs	r5, r3
 8000bc6:	432c      	orrs	r4, r5
 8000bc8:	e7b3      	b.n	8000b32 <__aeabi_fdiv+0x12e>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	1a1b      	subs	r3, r3, r0
 8000bce:	2b1b      	cmp	r3, #27
 8000bd0:	dd00      	ble.n	8000bd4 <__aeabi_fdiv+0x1d0>
 8000bd2:	e76d      	b.n	8000ab0 <__aeabi_fdiv+0xac>
 8000bd4:	0021      	movs	r1, r4
 8000bd6:	379e      	adds	r7, #158	@ 0x9e
 8000bd8:	40d9      	lsrs	r1, r3
 8000bda:	40bc      	lsls	r4, r7
 8000bdc:	000b      	movs	r3, r1
 8000bde:	1e61      	subs	r1, r4, #1
 8000be0:	418c      	sbcs	r4, r1
 8000be2:	4323      	orrs	r3, r4
 8000be4:	0759      	lsls	r1, r3, #29
 8000be6:	d004      	beq.n	8000bf2 <__aeabi_fdiv+0x1ee>
 8000be8:	210f      	movs	r1, #15
 8000bea:	4019      	ands	r1, r3
 8000bec:	2904      	cmp	r1, #4
 8000bee:	d000      	beq.n	8000bf2 <__aeabi_fdiv+0x1ee>
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	0159      	lsls	r1, r3, #5
 8000bf4:	d413      	bmi.n	8000c1e <__aeabi_fdiv+0x21a>
 8000bf6:	019b      	lsls	r3, r3, #6
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	0a5c      	lsrs	r4, r3, #9
 8000bfc:	e75a      	b.n	8000ab4 <__aeabi_fdiv+0xb0>
 8000bfe:	231a      	movs	r3, #26
 8000c00:	2401      	movs	r4, #1
 8000c02:	1a2d      	subs	r5, r5, r0
 8000c04:	e7d0      	b.n	8000ba8 <__aeabi_fdiv+0x1a4>
 8000c06:	1e98      	subs	r0, r3, #2
 8000c08:	4243      	negs	r3, r0
 8000c0a:	4158      	adcs	r0, r3
 8000c0c:	4240      	negs	r0, r0
 8000c0e:	0032      	movs	r2, r6
 8000c10:	2400      	movs	r4, #0
 8000c12:	b2c0      	uxtb	r0, r0
 8000c14:	e74e      	b.n	8000ab4 <__aeabi_fdiv+0xb0>
 8000c16:	4642      	mov	r2, r8
 8000c18:	20ff      	movs	r0, #255	@ 0xff
 8000c1a:	2400      	movs	r4, #0
 8000c1c:	e74a      	b.n	8000ab4 <__aeabi_fdiv+0xb0>
 8000c1e:	2001      	movs	r0, #1
 8000c20:	2400      	movs	r4, #0
 8000c22:	e747      	b.n	8000ab4 <__aeabi_fdiv+0xb0>
 8000c24:	08009450 	.word	0x08009450
 8000c28:	08009490 	.word	0x08009490
 8000c2c:	f7ffffff 	.word	0xf7ffffff

08000c30 <__aeabi_fmul>:
 8000c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c32:	464f      	mov	r7, r9
 8000c34:	4646      	mov	r6, r8
 8000c36:	46d6      	mov	lr, sl
 8000c38:	0044      	lsls	r4, r0, #1
 8000c3a:	b5c0      	push	{r6, r7, lr}
 8000c3c:	0246      	lsls	r6, r0, #9
 8000c3e:	1c0f      	adds	r7, r1, #0
 8000c40:	0a76      	lsrs	r6, r6, #9
 8000c42:	0e24      	lsrs	r4, r4, #24
 8000c44:	0fc5      	lsrs	r5, r0, #31
 8000c46:	2c00      	cmp	r4, #0
 8000c48:	d100      	bne.n	8000c4c <__aeabi_fmul+0x1c>
 8000c4a:	e0da      	b.n	8000e02 <__aeabi_fmul+0x1d2>
 8000c4c:	2cff      	cmp	r4, #255	@ 0xff
 8000c4e:	d074      	beq.n	8000d3a <__aeabi_fmul+0x10a>
 8000c50:	2380      	movs	r3, #128	@ 0x80
 8000c52:	00f6      	lsls	r6, r6, #3
 8000c54:	04db      	lsls	r3, r3, #19
 8000c56:	431e      	orrs	r6, r3
 8000c58:	2300      	movs	r3, #0
 8000c5a:	4699      	mov	r9, r3
 8000c5c:	469a      	mov	sl, r3
 8000c5e:	3c7f      	subs	r4, #127	@ 0x7f
 8000c60:	027b      	lsls	r3, r7, #9
 8000c62:	0a5b      	lsrs	r3, r3, #9
 8000c64:	4698      	mov	r8, r3
 8000c66:	007b      	lsls	r3, r7, #1
 8000c68:	0e1b      	lsrs	r3, r3, #24
 8000c6a:	0fff      	lsrs	r7, r7, #31
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d074      	beq.n	8000d5a <__aeabi_fmul+0x12a>
 8000c70:	2bff      	cmp	r3, #255	@ 0xff
 8000c72:	d100      	bne.n	8000c76 <__aeabi_fmul+0x46>
 8000c74:	e08e      	b.n	8000d94 <__aeabi_fmul+0x164>
 8000c76:	4642      	mov	r2, r8
 8000c78:	2180      	movs	r1, #128	@ 0x80
 8000c7a:	00d2      	lsls	r2, r2, #3
 8000c7c:	04c9      	lsls	r1, r1, #19
 8000c7e:	4311      	orrs	r1, r2
 8000c80:	3b7f      	subs	r3, #127	@ 0x7f
 8000c82:	002a      	movs	r2, r5
 8000c84:	18e4      	adds	r4, r4, r3
 8000c86:	464b      	mov	r3, r9
 8000c88:	407a      	eors	r2, r7
 8000c8a:	4688      	mov	r8, r1
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	2b0a      	cmp	r3, #10
 8000c90:	dc75      	bgt.n	8000d7e <__aeabi_fmul+0x14e>
 8000c92:	464b      	mov	r3, r9
 8000c94:	2000      	movs	r0, #0
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	dd0f      	ble.n	8000cba <__aeabi_fmul+0x8a>
 8000c9a:	4649      	mov	r1, r9
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	408b      	lsls	r3, r1
 8000ca0:	21a6      	movs	r1, #166	@ 0xa6
 8000ca2:	00c9      	lsls	r1, r1, #3
 8000ca4:	420b      	tst	r3, r1
 8000ca6:	d169      	bne.n	8000d7c <__aeabi_fmul+0x14c>
 8000ca8:	2190      	movs	r1, #144	@ 0x90
 8000caa:	0089      	lsls	r1, r1, #2
 8000cac:	420b      	tst	r3, r1
 8000cae:	d000      	beq.n	8000cb2 <__aeabi_fmul+0x82>
 8000cb0:	e100      	b.n	8000eb4 <__aeabi_fmul+0x284>
 8000cb2:	2188      	movs	r1, #136	@ 0x88
 8000cb4:	4219      	tst	r1, r3
 8000cb6:	d000      	beq.n	8000cba <__aeabi_fmul+0x8a>
 8000cb8:	e0f5      	b.n	8000ea6 <__aeabi_fmul+0x276>
 8000cba:	4641      	mov	r1, r8
 8000cbc:	0409      	lsls	r1, r1, #16
 8000cbe:	0c09      	lsrs	r1, r1, #16
 8000cc0:	4643      	mov	r3, r8
 8000cc2:	0008      	movs	r0, r1
 8000cc4:	0c35      	lsrs	r5, r6, #16
 8000cc6:	0436      	lsls	r6, r6, #16
 8000cc8:	0c1b      	lsrs	r3, r3, #16
 8000cca:	0c36      	lsrs	r6, r6, #16
 8000ccc:	4370      	muls	r0, r6
 8000cce:	4369      	muls	r1, r5
 8000cd0:	435e      	muls	r6, r3
 8000cd2:	435d      	muls	r5, r3
 8000cd4:	1876      	adds	r6, r6, r1
 8000cd6:	0c03      	lsrs	r3, r0, #16
 8000cd8:	199b      	adds	r3, r3, r6
 8000cda:	4299      	cmp	r1, r3
 8000cdc:	d903      	bls.n	8000ce6 <__aeabi_fmul+0xb6>
 8000cde:	2180      	movs	r1, #128	@ 0x80
 8000ce0:	0249      	lsls	r1, r1, #9
 8000ce2:	468c      	mov	ip, r1
 8000ce4:	4465      	add	r5, ip
 8000ce6:	0400      	lsls	r0, r0, #16
 8000ce8:	0419      	lsls	r1, r3, #16
 8000cea:	0c00      	lsrs	r0, r0, #16
 8000cec:	1809      	adds	r1, r1, r0
 8000cee:	018e      	lsls	r6, r1, #6
 8000cf0:	1e70      	subs	r0, r6, #1
 8000cf2:	4186      	sbcs	r6, r0
 8000cf4:	0c1b      	lsrs	r3, r3, #16
 8000cf6:	0e89      	lsrs	r1, r1, #26
 8000cf8:	195b      	adds	r3, r3, r5
 8000cfa:	430e      	orrs	r6, r1
 8000cfc:	019b      	lsls	r3, r3, #6
 8000cfe:	431e      	orrs	r6, r3
 8000d00:	011b      	lsls	r3, r3, #4
 8000d02:	d46c      	bmi.n	8000dde <__aeabi_fmul+0x1ae>
 8000d04:	0023      	movs	r3, r4
 8000d06:	337f      	adds	r3, #127	@ 0x7f
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	dc00      	bgt.n	8000d0e <__aeabi_fmul+0xde>
 8000d0c:	e0b1      	b.n	8000e72 <__aeabi_fmul+0x242>
 8000d0e:	0015      	movs	r5, r2
 8000d10:	0771      	lsls	r1, r6, #29
 8000d12:	d00b      	beq.n	8000d2c <__aeabi_fmul+0xfc>
 8000d14:	200f      	movs	r0, #15
 8000d16:	0021      	movs	r1, r4
 8000d18:	4030      	ands	r0, r6
 8000d1a:	2804      	cmp	r0, #4
 8000d1c:	d006      	beq.n	8000d2c <__aeabi_fmul+0xfc>
 8000d1e:	3604      	adds	r6, #4
 8000d20:	0132      	lsls	r2, r6, #4
 8000d22:	d503      	bpl.n	8000d2c <__aeabi_fmul+0xfc>
 8000d24:	4b6e      	ldr	r3, [pc, #440]	@ (8000ee0 <__aeabi_fmul+0x2b0>)
 8000d26:	401e      	ands	r6, r3
 8000d28:	000b      	movs	r3, r1
 8000d2a:	3380      	adds	r3, #128	@ 0x80
 8000d2c:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d2e:	dd00      	ble.n	8000d32 <__aeabi_fmul+0x102>
 8000d30:	e0bd      	b.n	8000eae <__aeabi_fmul+0x27e>
 8000d32:	01b2      	lsls	r2, r6, #6
 8000d34:	0a52      	lsrs	r2, r2, #9
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	e048      	b.n	8000dcc <__aeabi_fmul+0x19c>
 8000d3a:	2e00      	cmp	r6, #0
 8000d3c:	d000      	beq.n	8000d40 <__aeabi_fmul+0x110>
 8000d3e:	e092      	b.n	8000e66 <__aeabi_fmul+0x236>
 8000d40:	2308      	movs	r3, #8
 8000d42:	4699      	mov	r9, r3
 8000d44:	3b06      	subs	r3, #6
 8000d46:	469a      	mov	sl, r3
 8000d48:	027b      	lsls	r3, r7, #9
 8000d4a:	0a5b      	lsrs	r3, r3, #9
 8000d4c:	4698      	mov	r8, r3
 8000d4e:	007b      	lsls	r3, r7, #1
 8000d50:	24ff      	movs	r4, #255	@ 0xff
 8000d52:	0e1b      	lsrs	r3, r3, #24
 8000d54:	0fff      	lsrs	r7, r7, #31
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d18a      	bne.n	8000c70 <__aeabi_fmul+0x40>
 8000d5a:	4642      	mov	r2, r8
 8000d5c:	2a00      	cmp	r2, #0
 8000d5e:	d164      	bne.n	8000e2a <__aeabi_fmul+0x1fa>
 8000d60:	4649      	mov	r1, r9
 8000d62:	3201      	adds	r2, #1
 8000d64:	4311      	orrs	r1, r2
 8000d66:	4689      	mov	r9, r1
 8000d68:	290a      	cmp	r1, #10
 8000d6a:	dc08      	bgt.n	8000d7e <__aeabi_fmul+0x14e>
 8000d6c:	407d      	eors	r5, r7
 8000d6e:	2001      	movs	r0, #1
 8000d70:	b2ea      	uxtb	r2, r5
 8000d72:	2902      	cmp	r1, #2
 8000d74:	dc91      	bgt.n	8000c9a <__aeabi_fmul+0x6a>
 8000d76:	0015      	movs	r5, r2
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e027      	b.n	8000dcc <__aeabi_fmul+0x19c>
 8000d7c:	0015      	movs	r5, r2
 8000d7e:	4653      	mov	r3, sl
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d100      	bne.n	8000d86 <__aeabi_fmul+0x156>
 8000d84:	e093      	b.n	8000eae <__aeabi_fmul+0x27e>
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	d01a      	beq.n	8000dc0 <__aeabi_fmul+0x190>
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d12c      	bne.n	8000de8 <__aeabi_fmul+0x1b8>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	2200      	movs	r2, #0
 8000d92:	e01b      	b.n	8000dcc <__aeabi_fmul+0x19c>
 8000d94:	4643      	mov	r3, r8
 8000d96:	34ff      	adds	r4, #255	@ 0xff
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d055      	beq.n	8000e48 <__aeabi_fmul+0x218>
 8000d9c:	2103      	movs	r1, #3
 8000d9e:	464b      	mov	r3, r9
 8000da0:	430b      	orrs	r3, r1
 8000da2:	0019      	movs	r1, r3
 8000da4:	2b0a      	cmp	r3, #10
 8000da6:	dc00      	bgt.n	8000daa <__aeabi_fmul+0x17a>
 8000da8:	e092      	b.n	8000ed0 <__aeabi_fmul+0x2a0>
 8000daa:	2b0f      	cmp	r3, #15
 8000dac:	d000      	beq.n	8000db0 <__aeabi_fmul+0x180>
 8000dae:	e08c      	b.n	8000eca <__aeabi_fmul+0x29a>
 8000db0:	2280      	movs	r2, #128	@ 0x80
 8000db2:	03d2      	lsls	r2, r2, #15
 8000db4:	4216      	tst	r6, r2
 8000db6:	d003      	beq.n	8000dc0 <__aeabi_fmul+0x190>
 8000db8:	4643      	mov	r3, r8
 8000dba:	4213      	tst	r3, r2
 8000dbc:	d100      	bne.n	8000dc0 <__aeabi_fmul+0x190>
 8000dbe:	e07d      	b.n	8000ebc <__aeabi_fmul+0x28c>
 8000dc0:	2280      	movs	r2, #128	@ 0x80
 8000dc2:	03d2      	lsls	r2, r2, #15
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	0252      	lsls	r2, r2, #9
 8000dc8:	0a52      	lsrs	r2, r2, #9
 8000dca:	23ff      	movs	r3, #255	@ 0xff
 8000dcc:	05d8      	lsls	r0, r3, #23
 8000dce:	07ed      	lsls	r5, r5, #31
 8000dd0:	4310      	orrs	r0, r2
 8000dd2:	4328      	orrs	r0, r5
 8000dd4:	bce0      	pop	{r5, r6, r7}
 8000dd6:	46ba      	mov	sl, r7
 8000dd8:	46b1      	mov	r9, r6
 8000dda:	46a8      	mov	r8, r5
 8000ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dde:	2301      	movs	r3, #1
 8000de0:	0015      	movs	r5, r2
 8000de2:	0871      	lsrs	r1, r6, #1
 8000de4:	401e      	ands	r6, r3
 8000de6:	430e      	orrs	r6, r1
 8000de8:	0023      	movs	r3, r4
 8000dea:	3380      	adds	r3, #128	@ 0x80
 8000dec:	1c61      	adds	r1, r4, #1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	dd41      	ble.n	8000e76 <__aeabi_fmul+0x246>
 8000df2:	0772      	lsls	r2, r6, #29
 8000df4:	d094      	beq.n	8000d20 <__aeabi_fmul+0xf0>
 8000df6:	220f      	movs	r2, #15
 8000df8:	4032      	ands	r2, r6
 8000dfa:	2a04      	cmp	r2, #4
 8000dfc:	d000      	beq.n	8000e00 <__aeabi_fmul+0x1d0>
 8000dfe:	e78e      	b.n	8000d1e <__aeabi_fmul+0xee>
 8000e00:	e78e      	b.n	8000d20 <__aeabi_fmul+0xf0>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	d105      	bne.n	8000e12 <__aeabi_fmul+0x1e2>
 8000e06:	2304      	movs	r3, #4
 8000e08:	4699      	mov	r9, r3
 8000e0a:	3b03      	subs	r3, #3
 8000e0c:	2400      	movs	r4, #0
 8000e0e:	469a      	mov	sl, r3
 8000e10:	e726      	b.n	8000c60 <__aeabi_fmul+0x30>
 8000e12:	0030      	movs	r0, r6
 8000e14:	f000 fbf6 	bl	8001604 <__clzsi2>
 8000e18:	2476      	movs	r4, #118	@ 0x76
 8000e1a:	1f43      	subs	r3, r0, #5
 8000e1c:	409e      	lsls	r6, r3
 8000e1e:	2300      	movs	r3, #0
 8000e20:	4264      	negs	r4, r4
 8000e22:	4699      	mov	r9, r3
 8000e24:	469a      	mov	sl, r3
 8000e26:	1a24      	subs	r4, r4, r0
 8000e28:	e71a      	b.n	8000c60 <__aeabi_fmul+0x30>
 8000e2a:	4640      	mov	r0, r8
 8000e2c:	f000 fbea 	bl	8001604 <__clzsi2>
 8000e30:	464b      	mov	r3, r9
 8000e32:	1a24      	subs	r4, r4, r0
 8000e34:	3c76      	subs	r4, #118	@ 0x76
 8000e36:	2b0a      	cmp	r3, #10
 8000e38:	dca1      	bgt.n	8000d7e <__aeabi_fmul+0x14e>
 8000e3a:	4643      	mov	r3, r8
 8000e3c:	3805      	subs	r0, #5
 8000e3e:	4083      	lsls	r3, r0
 8000e40:	407d      	eors	r5, r7
 8000e42:	4698      	mov	r8, r3
 8000e44:	b2ea      	uxtb	r2, r5
 8000e46:	e724      	b.n	8000c92 <__aeabi_fmul+0x62>
 8000e48:	464a      	mov	r2, r9
 8000e4a:	3302      	adds	r3, #2
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	002a      	movs	r2, r5
 8000e50:	407a      	eors	r2, r7
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	2b0a      	cmp	r3, #10
 8000e56:	dc92      	bgt.n	8000d7e <__aeabi_fmul+0x14e>
 8000e58:	4649      	mov	r1, r9
 8000e5a:	0015      	movs	r5, r2
 8000e5c:	2900      	cmp	r1, #0
 8000e5e:	d026      	beq.n	8000eae <__aeabi_fmul+0x27e>
 8000e60:	4699      	mov	r9, r3
 8000e62:	2002      	movs	r0, #2
 8000e64:	e719      	b.n	8000c9a <__aeabi_fmul+0x6a>
 8000e66:	230c      	movs	r3, #12
 8000e68:	4699      	mov	r9, r3
 8000e6a:	3b09      	subs	r3, #9
 8000e6c:	24ff      	movs	r4, #255	@ 0xff
 8000e6e:	469a      	mov	sl, r3
 8000e70:	e6f6      	b.n	8000c60 <__aeabi_fmul+0x30>
 8000e72:	0015      	movs	r5, r2
 8000e74:	0021      	movs	r1, r4
 8000e76:	2201      	movs	r2, #1
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b1b      	cmp	r3, #27
 8000e7c:	dd00      	ble.n	8000e80 <__aeabi_fmul+0x250>
 8000e7e:	e786      	b.n	8000d8e <__aeabi_fmul+0x15e>
 8000e80:	319e      	adds	r1, #158	@ 0x9e
 8000e82:	0032      	movs	r2, r6
 8000e84:	408e      	lsls	r6, r1
 8000e86:	40da      	lsrs	r2, r3
 8000e88:	1e73      	subs	r3, r6, #1
 8000e8a:	419e      	sbcs	r6, r3
 8000e8c:	4332      	orrs	r2, r6
 8000e8e:	0753      	lsls	r3, r2, #29
 8000e90:	d004      	beq.n	8000e9c <__aeabi_fmul+0x26c>
 8000e92:	230f      	movs	r3, #15
 8000e94:	4013      	ands	r3, r2
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	d000      	beq.n	8000e9c <__aeabi_fmul+0x26c>
 8000e9a:	3204      	adds	r2, #4
 8000e9c:	0153      	lsls	r3, r2, #5
 8000e9e:	d510      	bpl.n	8000ec2 <__aeabi_fmul+0x292>
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	e792      	b.n	8000dcc <__aeabi_fmul+0x19c>
 8000ea6:	003d      	movs	r5, r7
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	4682      	mov	sl, r0
 8000eac:	e767      	b.n	8000d7e <__aeabi_fmul+0x14e>
 8000eae:	23ff      	movs	r3, #255	@ 0xff
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	e78b      	b.n	8000dcc <__aeabi_fmul+0x19c>
 8000eb4:	2280      	movs	r2, #128	@ 0x80
 8000eb6:	2500      	movs	r5, #0
 8000eb8:	03d2      	lsls	r2, r2, #15
 8000eba:	e786      	b.n	8000dca <__aeabi_fmul+0x19a>
 8000ebc:	003d      	movs	r5, r7
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	e783      	b.n	8000dca <__aeabi_fmul+0x19a>
 8000ec2:	0192      	lsls	r2, r2, #6
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	0a52      	lsrs	r2, r2, #9
 8000ec8:	e780      	b.n	8000dcc <__aeabi_fmul+0x19c>
 8000eca:	003d      	movs	r5, r7
 8000ecc:	4646      	mov	r6, r8
 8000ece:	e777      	b.n	8000dc0 <__aeabi_fmul+0x190>
 8000ed0:	002a      	movs	r2, r5
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	407a      	eors	r2, r7
 8000ed6:	408b      	lsls	r3, r1
 8000ed8:	2003      	movs	r0, #3
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	e6e9      	b.n	8000cb2 <__aeabi_fmul+0x82>
 8000ede:	46c0      	nop			@ (mov r8, r8)
 8000ee0:	f7ffffff 	.word	0xf7ffffff

08000ee4 <__aeabi_fsub>:
 8000ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ee6:	4647      	mov	r7, r8
 8000ee8:	46ce      	mov	lr, r9
 8000eea:	0243      	lsls	r3, r0, #9
 8000eec:	b580      	push	{r7, lr}
 8000eee:	0a5f      	lsrs	r7, r3, #9
 8000ef0:	099b      	lsrs	r3, r3, #6
 8000ef2:	0045      	lsls	r5, r0, #1
 8000ef4:	004a      	lsls	r2, r1, #1
 8000ef6:	469c      	mov	ip, r3
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	0fc4      	lsrs	r4, r0, #31
 8000efc:	0fce      	lsrs	r6, r1, #31
 8000efe:	0e2d      	lsrs	r5, r5, #24
 8000f00:	0a58      	lsrs	r0, r3, #9
 8000f02:	0e12      	lsrs	r2, r2, #24
 8000f04:	0999      	lsrs	r1, r3, #6
 8000f06:	2aff      	cmp	r2, #255	@ 0xff
 8000f08:	d06b      	beq.n	8000fe2 <__aeabi_fsub+0xfe>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	405e      	eors	r6, r3
 8000f0e:	1aab      	subs	r3, r5, r2
 8000f10:	42b4      	cmp	r4, r6
 8000f12:	d04b      	beq.n	8000fac <__aeabi_fsub+0xc8>
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	dc00      	bgt.n	8000f1a <__aeabi_fsub+0x36>
 8000f18:	e0ff      	b.n	800111a <__aeabi_fsub+0x236>
 8000f1a:	2a00      	cmp	r2, #0
 8000f1c:	d100      	bne.n	8000f20 <__aeabi_fsub+0x3c>
 8000f1e:	e088      	b.n	8001032 <__aeabi_fsub+0x14e>
 8000f20:	2dff      	cmp	r5, #255	@ 0xff
 8000f22:	d100      	bne.n	8000f26 <__aeabi_fsub+0x42>
 8000f24:	e0ef      	b.n	8001106 <__aeabi_fsub+0x222>
 8000f26:	2280      	movs	r2, #128	@ 0x80
 8000f28:	04d2      	lsls	r2, r2, #19
 8000f2a:	4311      	orrs	r1, r2
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	2b1b      	cmp	r3, #27
 8000f30:	dc08      	bgt.n	8000f44 <__aeabi_fsub+0x60>
 8000f32:	0008      	movs	r0, r1
 8000f34:	2220      	movs	r2, #32
 8000f36:	40d8      	lsrs	r0, r3
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	4099      	lsls	r1, r3
 8000f3c:	000b      	movs	r3, r1
 8000f3e:	1e5a      	subs	r2, r3, #1
 8000f40:	4193      	sbcs	r3, r2
 8000f42:	4318      	orrs	r0, r3
 8000f44:	4663      	mov	r3, ip
 8000f46:	1a1b      	subs	r3, r3, r0
 8000f48:	469c      	mov	ip, r3
 8000f4a:	4663      	mov	r3, ip
 8000f4c:	015b      	lsls	r3, r3, #5
 8000f4e:	d400      	bmi.n	8000f52 <__aeabi_fsub+0x6e>
 8000f50:	e0cd      	b.n	80010ee <__aeabi_fsub+0x20a>
 8000f52:	4663      	mov	r3, ip
 8000f54:	019f      	lsls	r7, r3, #6
 8000f56:	09bf      	lsrs	r7, r7, #6
 8000f58:	0038      	movs	r0, r7
 8000f5a:	f000 fb53 	bl	8001604 <__clzsi2>
 8000f5e:	003b      	movs	r3, r7
 8000f60:	3805      	subs	r0, #5
 8000f62:	4083      	lsls	r3, r0
 8000f64:	4285      	cmp	r5, r0
 8000f66:	dc00      	bgt.n	8000f6a <__aeabi_fsub+0x86>
 8000f68:	e0a2      	b.n	80010b0 <__aeabi_fsub+0x1cc>
 8000f6a:	4ab7      	ldr	r2, [pc, #732]	@ (8001248 <__aeabi_fsub+0x364>)
 8000f6c:	1a2d      	subs	r5, r5, r0
 8000f6e:	401a      	ands	r2, r3
 8000f70:	4694      	mov	ip, r2
 8000f72:	075a      	lsls	r2, r3, #29
 8000f74:	d100      	bne.n	8000f78 <__aeabi_fsub+0x94>
 8000f76:	e0c3      	b.n	8001100 <__aeabi_fsub+0x21c>
 8000f78:	220f      	movs	r2, #15
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	2b04      	cmp	r3, #4
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_fsub+0x9e>
 8000f80:	e0be      	b.n	8001100 <__aeabi_fsub+0x21c>
 8000f82:	2304      	movs	r3, #4
 8000f84:	4698      	mov	r8, r3
 8000f86:	44c4      	add	ip, r8
 8000f88:	4663      	mov	r3, ip
 8000f8a:	015b      	lsls	r3, r3, #5
 8000f8c:	d400      	bmi.n	8000f90 <__aeabi_fsub+0xac>
 8000f8e:	e0b7      	b.n	8001100 <__aeabi_fsub+0x21c>
 8000f90:	1c68      	adds	r0, r5, #1
 8000f92:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f94:	d000      	beq.n	8000f98 <__aeabi_fsub+0xb4>
 8000f96:	e0a5      	b.n	80010e4 <__aeabi_fsub+0x200>
 8000f98:	20ff      	movs	r0, #255	@ 0xff
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	05c0      	lsls	r0, r0, #23
 8000f9e:	4310      	orrs	r0, r2
 8000fa0:	07e4      	lsls	r4, r4, #31
 8000fa2:	4320      	orrs	r0, r4
 8000fa4:	bcc0      	pop	{r6, r7}
 8000fa6:	46b9      	mov	r9, r7
 8000fa8:	46b0      	mov	r8, r6
 8000faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	dc00      	bgt.n	8000fb2 <__aeabi_fsub+0xce>
 8000fb0:	e1eb      	b.n	800138a <__aeabi_fsub+0x4a6>
 8000fb2:	2a00      	cmp	r2, #0
 8000fb4:	d046      	beq.n	8001044 <__aeabi_fsub+0x160>
 8000fb6:	2dff      	cmp	r5, #255	@ 0xff
 8000fb8:	d100      	bne.n	8000fbc <__aeabi_fsub+0xd8>
 8000fba:	e0a4      	b.n	8001106 <__aeabi_fsub+0x222>
 8000fbc:	2280      	movs	r2, #128	@ 0x80
 8000fbe:	04d2      	lsls	r2, r2, #19
 8000fc0:	4311      	orrs	r1, r2
 8000fc2:	2b1b      	cmp	r3, #27
 8000fc4:	dc00      	bgt.n	8000fc8 <__aeabi_fsub+0xe4>
 8000fc6:	e0fb      	b.n	80011c0 <__aeabi_fsub+0x2dc>
 8000fc8:	2305      	movs	r3, #5
 8000fca:	4698      	mov	r8, r3
 8000fcc:	002b      	movs	r3, r5
 8000fce:	44c4      	add	ip, r8
 8000fd0:	4662      	mov	r2, ip
 8000fd2:	08d7      	lsrs	r7, r2, #3
 8000fd4:	2bff      	cmp	r3, #255	@ 0xff
 8000fd6:	d100      	bne.n	8000fda <__aeabi_fsub+0xf6>
 8000fd8:	e095      	b.n	8001106 <__aeabi_fsub+0x222>
 8000fda:	027a      	lsls	r2, r7, #9
 8000fdc:	0a52      	lsrs	r2, r2, #9
 8000fde:	b2d8      	uxtb	r0, r3
 8000fe0:	e7dc      	b.n	8000f9c <__aeabi_fsub+0xb8>
 8000fe2:	002b      	movs	r3, r5
 8000fe4:	3bff      	subs	r3, #255	@ 0xff
 8000fe6:	4699      	mov	r9, r3
 8000fe8:	2900      	cmp	r1, #0
 8000fea:	d118      	bne.n	800101e <__aeabi_fsub+0x13a>
 8000fec:	2301      	movs	r3, #1
 8000fee:	405e      	eors	r6, r3
 8000ff0:	42b4      	cmp	r4, r6
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_fsub+0x112>
 8000ff4:	e0ca      	b.n	800118c <__aeabi_fsub+0x2a8>
 8000ff6:	464b      	mov	r3, r9
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d02d      	beq.n	8001058 <__aeabi_fsub+0x174>
 8000ffc:	2d00      	cmp	r5, #0
 8000ffe:	d000      	beq.n	8001002 <__aeabi_fsub+0x11e>
 8001000:	e13c      	b.n	800127c <__aeabi_fsub+0x398>
 8001002:	23ff      	movs	r3, #255	@ 0xff
 8001004:	4664      	mov	r4, ip
 8001006:	2c00      	cmp	r4, #0
 8001008:	d100      	bne.n	800100c <__aeabi_fsub+0x128>
 800100a:	e15f      	b.n	80012cc <__aeabi_fsub+0x3e8>
 800100c:	1e5d      	subs	r5, r3, #1
 800100e:	2b01      	cmp	r3, #1
 8001010:	d100      	bne.n	8001014 <__aeabi_fsub+0x130>
 8001012:	e174      	b.n	80012fe <__aeabi_fsub+0x41a>
 8001014:	0034      	movs	r4, r6
 8001016:	2bff      	cmp	r3, #255	@ 0xff
 8001018:	d074      	beq.n	8001104 <__aeabi_fsub+0x220>
 800101a:	002b      	movs	r3, r5
 800101c:	e103      	b.n	8001226 <__aeabi_fsub+0x342>
 800101e:	42b4      	cmp	r4, r6
 8001020:	d100      	bne.n	8001024 <__aeabi_fsub+0x140>
 8001022:	e09c      	b.n	800115e <__aeabi_fsub+0x27a>
 8001024:	2b00      	cmp	r3, #0
 8001026:	d017      	beq.n	8001058 <__aeabi_fsub+0x174>
 8001028:	2d00      	cmp	r5, #0
 800102a:	d0ea      	beq.n	8001002 <__aeabi_fsub+0x11e>
 800102c:	0007      	movs	r7, r0
 800102e:	0034      	movs	r4, r6
 8001030:	e06c      	b.n	800110c <__aeabi_fsub+0x228>
 8001032:	2900      	cmp	r1, #0
 8001034:	d0cc      	beq.n	8000fd0 <__aeabi_fsub+0xec>
 8001036:	1e5a      	subs	r2, r3, #1
 8001038:	2b01      	cmp	r3, #1
 800103a:	d02b      	beq.n	8001094 <__aeabi_fsub+0x1b0>
 800103c:	2bff      	cmp	r3, #255	@ 0xff
 800103e:	d062      	beq.n	8001106 <__aeabi_fsub+0x222>
 8001040:	0013      	movs	r3, r2
 8001042:	e773      	b.n	8000f2c <__aeabi_fsub+0x48>
 8001044:	2900      	cmp	r1, #0
 8001046:	d0c3      	beq.n	8000fd0 <__aeabi_fsub+0xec>
 8001048:	1e5a      	subs	r2, r3, #1
 800104a:	2b01      	cmp	r3, #1
 800104c:	d100      	bne.n	8001050 <__aeabi_fsub+0x16c>
 800104e:	e11e      	b.n	800128e <__aeabi_fsub+0x3aa>
 8001050:	2bff      	cmp	r3, #255	@ 0xff
 8001052:	d058      	beq.n	8001106 <__aeabi_fsub+0x222>
 8001054:	0013      	movs	r3, r2
 8001056:	e7b4      	b.n	8000fc2 <__aeabi_fsub+0xde>
 8001058:	22fe      	movs	r2, #254	@ 0xfe
 800105a:	1c6b      	adds	r3, r5, #1
 800105c:	421a      	tst	r2, r3
 800105e:	d10d      	bne.n	800107c <__aeabi_fsub+0x198>
 8001060:	2d00      	cmp	r5, #0
 8001062:	d060      	beq.n	8001126 <__aeabi_fsub+0x242>
 8001064:	4663      	mov	r3, ip
 8001066:	2b00      	cmp	r3, #0
 8001068:	d000      	beq.n	800106c <__aeabi_fsub+0x188>
 800106a:	e120      	b.n	80012ae <__aeabi_fsub+0x3ca>
 800106c:	2900      	cmp	r1, #0
 800106e:	d000      	beq.n	8001072 <__aeabi_fsub+0x18e>
 8001070:	e128      	b.n	80012c4 <__aeabi_fsub+0x3e0>
 8001072:	2280      	movs	r2, #128	@ 0x80
 8001074:	2400      	movs	r4, #0
 8001076:	20ff      	movs	r0, #255	@ 0xff
 8001078:	03d2      	lsls	r2, r2, #15
 800107a:	e78f      	b.n	8000f9c <__aeabi_fsub+0xb8>
 800107c:	4663      	mov	r3, ip
 800107e:	1a5f      	subs	r7, r3, r1
 8001080:	017b      	lsls	r3, r7, #5
 8001082:	d500      	bpl.n	8001086 <__aeabi_fsub+0x1a2>
 8001084:	e0fe      	b.n	8001284 <__aeabi_fsub+0x3a0>
 8001086:	2f00      	cmp	r7, #0
 8001088:	d000      	beq.n	800108c <__aeabi_fsub+0x1a8>
 800108a:	e765      	b.n	8000f58 <__aeabi_fsub+0x74>
 800108c:	2400      	movs	r4, #0
 800108e:	2000      	movs	r0, #0
 8001090:	2200      	movs	r2, #0
 8001092:	e783      	b.n	8000f9c <__aeabi_fsub+0xb8>
 8001094:	4663      	mov	r3, ip
 8001096:	1a59      	subs	r1, r3, r1
 8001098:	014b      	lsls	r3, r1, #5
 800109a:	d400      	bmi.n	800109e <__aeabi_fsub+0x1ba>
 800109c:	e119      	b.n	80012d2 <__aeabi_fsub+0x3ee>
 800109e:	018f      	lsls	r7, r1, #6
 80010a0:	09bf      	lsrs	r7, r7, #6
 80010a2:	0038      	movs	r0, r7
 80010a4:	f000 faae 	bl	8001604 <__clzsi2>
 80010a8:	003b      	movs	r3, r7
 80010aa:	3805      	subs	r0, #5
 80010ac:	4083      	lsls	r3, r0
 80010ae:	2501      	movs	r5, #1
 80010b0:	2220      	movs	r2, #32
 80010b2:	1b40      	subs	r0, r0, r5
 80010b4:	3001      	adds	r0, #1
 80010b6:	1a12      	subs	r2, r2, r0
 80010b8:	0019      	movs	r1, r3
 80010ba:	4093      	lsls	r3, r2
 80010bc:	40c1      	lsrs	r1, r0
 80010be:	1e5a      	subs	r2, r3, #1
 80010c0:	4193      	sbcs	r3, r2
 80010c2:	4319      	orrs	r1, r3
 80010c4:	468c      	mov	ip, r1
 80010c6:	1e0b      	subs	r3, r1, #0
 80010c8:	d0e1      	beq.n	800108e <__aeabi_fsub+0x1aa>
 80010ca:	075b      	lsls	r3, r3, #29
 80010cc:	d100      	bne.n	80010d0 <__aeabi_fsub+0x1ec>
 80010ce:	e152      	b.n	8001376 <__aeabi_fsub+0x492>
 80010d0:	230f      	movs	r3, #15
 80010d2:	2500      	movs	r5, #0
 80010d4:	400b      	ands	r3, r1
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d000      	beq.n	80010dc <__aeabi_fsub+0x1f8>
 80010da:	e752      	b.n	8000f82 <__aeabi_fsub+0x9e>
 80010dc:	2001      	movs	r0, #1
 80010de:	014a      	lsls	r2, r1, #5
 80010e0:	d400      	bmi.n	80010e4 <__aeabi_fsub+0x200>
 80010e2:	e092      	b.n	800120a <__aeabi_fsub+0x326>
 80010e4:	b2c0      	uxtb	r0, r0
 80010e6:	4663      	mov	r3, ip
 80010e8:	019a      	lsls	r2, r3, #6
 80010ea:	0a52      	lsrs	r2, r2, #9
 80010ec:	e756      	b.n	8000f9c <__aeabi_fsub+0xb8>
 80010ee:	4663      	mov	r3, ip
 80010f0:	075b      	lsls	r3, r3, #29
 80010f2:	d005      	beq.n	8001100 <__aeabi_fsub+0x21c>
 80010f4:	230f      	movs	r3, #15
 80010f6:	4662      	mov	r2, ip
 80010f8:	4013      	ands	r3, r2
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d000      	beq.n	8001100 <__aeabi_fsub+0x21c>
 80010fe:	e740      	b.n	8000f82 <__aeabi_fsub+0x9e>
 8001100:	002b      	movs	r3, r5
 8001102:	e765      	b.n	8000fd0 <__aeabi_fsub+0xec>
 8001104:	0007      	movs	r7, r0
 8001106:	2f00      	cmp	r7, #0
 8001108:	d100      	bne.n	800110c <__aeabi_fsub+0x228>
 800110a:	e745      	b.n	8000f98 <__aeabi_fsub+0xb4>
 800110c:	2280      	movs	r2, #128	@ 0x80
 800110e:	03d2      	lsls	r2, r2, #15
 8001110:	433a      	orrs	r2, r7
 8001112:	0252      	lsls	r2, r2, #9
 8001114:	20ff      	movs	r0, #255	@ 0xff
 8001116:	0a52      	lsrs	r2, r2, #9
 8001118:	e740      	b.n	8000f9c <__aeabi_fsub+0xb8>
 800111a:	2b00      	cmp	r3, #0
 800111c:	d179      	bne.n	8001212 <__aeabi_fsub+0x32e>
 800111e:	22fe      	movs	r2, #254	@ 0xfe
 8001120:	1c6b      	adds	r3, r5, #1
 8001122:	421a      	tst	r2, r3
 8001124:	d1aa      	bne.n	800107c <__aeabi_fsub+0x198>
 8001126:	4663      	mov	r3, ip
 8001128:	2b00      	cmp	r3, #0
 800112a:	d100      	bne.n	800112e <__aeabi_fsub+0x24a>
 800112c:	e0f5      	b.n	800131a <__aeabi_fsub+0x436>
 800112e:	2900      	cmp	r1, #0
 8001130:	d100      	bne.n	8001134 <__aeabi_fsub+0x250>
 8001132:	e0d1      	b.n	80012d8 <__aeabi_fsub+0x3f4>
 8001134:	1a5f      	subs	r7, r3, r1
 8001136:	2380      	movs	r3, #128	@ 0x80
 8001138:	04db      	lsls	r3, r3, #19
 800113a:	421f      	tst	r7, r3
 800113c:	d100      	bne.n	8001140 <__aeabi_fsub+0x25c>
 800113e:	e10e      	b.n	800135e <__aeabi_fsub+0x47a>
 8001140:	4662      	mov	r2, ip
 8001142:	2401      	movs	r4, #1
 8001144:	1a8a      	subs	r2, r1, r2
 8001146:	4694      	mov	ip, r2
 8001148:	2000      	movs	r0, #0
 800114a:	4034      	ands	r4, r6
 800114c:	2a00      	cmp	r2, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_fsub+0x26e>
 8001150:	e724      	b.n	8000f9c <__aeabi_fsub+0xb8>
 8001152:	2001      	movs	r0, #1
 8001154:	421a      	tst	r2, r3
 8001156:	d1c6      	bne.n	80010e6 <__aeabi_fsub+0x202>
 8001158:	2300      	movs	r3, #0
 800115a:	08d7      	lsrs	r7, r2, #3
 800115c:	e73d      	b.n	8000fda <__aeabi_fsub+0xf6>
 800115e:	2b00      	cmp	r3, #0
 8001160:	d017      	beq.n	8001192 <__aeabi_fsub+0x2ae>
 8001162:	2d00      	cmp	r5, #0
 8001164:	d000      	beq.n	8001168 <__aeabi_fsub+0x284>
 8001166:	e0af      	b.n	80012c8 <__aeabi_fsub+0x3e4>
 8001168:	23ff      	movs	r3, #255	@ 0xff
 800116a:	4665      	mov	r5, ip
 800116c:	2d00      	cmp	r5, #0
 800116e:	d100      	bne.n	8001172 <__aeabi_fsub+0x28e>
 8001170:	e0ad      	b.n	80012ce <__aeabi_fsub+0x3ea>
 8001172:	1e5e      	subs	r6, r3, #1
 8001174:	2b01      	cmp	r3, #1
 8001176:	d100      	bne.n	800117a <__aeabi_fsub+0x296>
 8001178:	e089      	b.n	800128e <__aeabi_fsub+0x3aa>
 800117a:	2bff      	cmp	r3, #255	@ 0xff
 800117c:	d0c2      	beq.n	8001104 <__aeabi_fsub+0x220>
 800117e:	2e1b      	cmp	r6, #27
 8001180:	dc00      	bgt.n	8001184 <__aeabi_fsub+0x2a0>
 8001182:	e0ab      	b.n	80012dc <__aeabi_fsub+0x3f8>
 8001184:	1d4b      	adds	r3, r1, #5
 8001186:	469c      	mov	ip, r3
 8001188:	0013      	movs	r3, r2
 800118a:	e721      	b.n	8000fd0 <__aeabi_fsub+0xec>
 800118c:	464b      	mov	r3, r9
 800118e:	2b00      	cmp	r3, #0
 8001190:	d170      	bne.n	8001274 <__aeabi_fsub+0x390>
 8001192:	22fe      	movs	r2, #254	@ 0xfe
 8001194:	1c6b      	adds	r3, r5, #1
 8001196:	421a      	tst	r2, r3
 8001198:	d15e      	bne.n	8001258 <__aeabi_fsub+0x374>
 800119a:	2d00      	cmp	r5, #0
 800119c:	d000      	beq.n	80011a0 <__aeabi_fsub+0x2bc>
 800119e:	e0c3      	b.n	8001328 <__aeabi_fsub+0x444>
 80011a0:	4663      	mov	r3, ip
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d100      	bne.n	80011a8 <__aeabi_fsub+0x2c4>
 80011a6:	e0d0      	b.n	800134a <__aeabi_fsub+0x466>
 80011a8:	2900      	cmp	r1, #0
 80011aa:	d100      	bne.n	80011ae <__aeabi_fsub+0x2ca>
 80011ac:	e094      	b.n	80012d8 <__aeabi_fsub+0x3f4>
 80011ae:	000a      	movs	r2, r1
 80011b0:	4462      	add	r2, ip
 80011b2:	0153      	lsls	r3, r2, #5
 80011b4:	d400      	bmi.n	80011b8 <__aeabi_fsub+0x2d4>
 80011b6:	e0d8      	b.n	800136a <__aeabi_fsub+0x486>
 80011b8:	0192      	lsls	r2, r2, #6
 80011ba:	2001      	movs	r0, #1
 80011bc:	0a52      	lsrs	r2, r2, #9
 80011be:	e6ed      	b.n	8000f9c <__aeabi_fsub+0xb8>
 80011c0:	0008      	movs	r0, r1
 80011c2:	2220      	movs	r2, #32
 80011c4:	40d8      	lsrs	r0, r3
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	4099      	lsls	r1, r3
 80011ca:	000b      	movs	r3, r1
 80011cc:	1e5a      	subs	r2, r3, #1
 80011ce:	4193      	sbcs	r3, r2
 80011d0:	4303      	orrs	r3, r0
 80011d2:	449c      	add	ip, r3
 80011d4:	4663      	mov	r3, ip
 80011d6:	015b      	lsls	r3, r3, #5
 80011d8:	d589      	bpl.n	80010ee <__aeabi_fsub+0x20a>
 80011da:	3501      	adds	r5, #1
 80011dc:	2dff      	cmp	r5, #255	@ 0xff
 80011de:	d100      	bne.n	80011e2 <__aeabi_fsub+0x2fe>
 80011e0:	e6da      	b.n	8000f98 <__aeabi_fsub+0xb4>
 80011e2:	4662      	mov	r2, ip
 80011e4:	2301      	movs	r3, #1
 80011e6:	4919      	ldr	r1, [pc, #100]	@ (800124c <__aeabi_fsub+0x368>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	0852      	lsrs	r2, r2, #1
 80011ec:	400a      	ands	r2, r1
 80011ee:	431a      	orrs	r2, r3
 80011f0:	0013      	movs	r3, r2
 80011f2:	4694      	mov	ip, r2
 80011f4:	075b      	lsls	r3, r3, #29
 80011f6:	d004      	beq.n	8001202 <__aeabi_fsub+0x31e>
 80011f8:	230f      	movs	r3, #15
 80011fa:	4013      	ands	r3, r2
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d000      	beq.n	8001202 <__aeabi_fsub+0x31e>
 8001200:	e6bf      	b.n	8000f82 <__aeabi_fsub+0x9e>
 8001202:	4663      	mov	r3, ip
 8001204:	015b      	lsls	r3, r3, #5
 8001206:	d500      	bpl.n	800120a <__aeabi_fsub+0x326>
 8001208:	e6c2      	b.n	8000f90 <__aeabi_fsub+0xac>
 800120a:	4663      	mov	r3, ip
 800120c:	08df      	lsrs	r7, r3, #3
 800120e:	002b      	movs	r3, r5
 8001210:	e6e3      	b.n	8000fda <__aeabi_fsub+0xf6>
 8001212:	1b53      	subs	r3, r2, r5
 8001214:	2d00      	cmp	r5, #0
 8001216:	d100      	bne.n	800121a <__aeabi_fsub+0x336>
 8001218:	e6f4      	b.n	8001004 <__aeabi_fsub+0x120>
 800121a:	2080      	movs	r0, #128	@ 0x80
 800121c:	4664      	mov	r4, ip
 800121e:	04c0      	lsls	r0, r0, #19
 8001220:	4304      	orrs	r4, r0
 8001222:	46a4      	mov	ip, r4
 8001224:	0034      	movs	r4, r6
 8001226:	2001      	movs	r0, #1
 8001228:	2b1b      	cmp	r3, #27
 800122a:	dc09      	bgt.n	8001240 <__aeabi_fsub+0x35c>
 800122c:	2520      	movs	r5, #32
 800122e:	4660      	mov	r0, ip
 8001230:	40d8      	lsrs	r0, r3
 8001232:	1aeb      	subs	r3, r5, r3
 8001234:	4665      	mov	r5, ip
 8001236:	409d      	lsls	r5, r3
 8001238:	002b      	movs	r3, r5
 800123a:	1e5d      	subs	r5, r3, #1
 800123c:	41ab      	sbcs	r3, r5
 800123e:	4318      	orrs	r0, r3
 8001240:	1a0b      	subs	r3, r1, r0
 8001242:	469c      	mov	ip, r3
 8001244:	0015      	movs	r5, r2
 8001246:	e680      	b.n	8000f4a <__aeabi_fsub+0x66>
 8001248:	fbffffff 	.word	0xfbffffff
 800124c:	7dffffff 	.word	0x7dffffff
 8001250:	22fe      	movs	r2, #254	@ 0xfe
 8001252:	1c6b      	adds	r3, r5, #1
 8001254:	4213      	tst	r3, r2
 8001256:	d0a3      	beq.n	80011a0 <__aeabi_fsub+0x2bc>
 8001258:	2bff      	cmp	r3, #255	@ 0xff
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0x37a>
 800125c:	e69c      	b.n	8000f98 <__aeabi_fsub+0xb4>
 800125e:	4461      	add	r1, ip
 8001260:	0849      	lsrs	r1, r1, #1
 8001262:	074a      	lsls	r2, r1, #29
 8001264:	d049      	beq.n	80012fa <__aeabi_fsub+0x416>
 8001266:	220f      	movs	r2, #15
 8001268:	400a      	ands	r2, r1
 800126a:	2a04      	cmp	r2, #4
 800126c:	d045      	beq.n	80012fa <__aeabi_fsub+0x416>
 800126e:	1d0a      	adds	r2, r1, #4
 8001270:	4694      	mov	ip, r2
 8001272:	e6ad      	b.n	8000fd0 <__aeabi_fsub+0xec>
 8001274:	2d00      	cmp	r5, #0
 8001276:	d100      	bne.n	800127a <__aeabi_fsub+0x396>
 8001278:	e776      	b.n	8001168 <__aeabi_fsub+0x284>
 800127a:	e68d      	b.n	8000f98 <__aeabi_fsub+0xb4>
 800127c:	0034      	movs	r4, r6
 800127e:	20ff      	movs	r0, #255	@ 0xff
 8001280:	2200      	movs	r2, #0
 8001282:	e68b      	b.n	8000f9c <__aeabi_fsub+0xb8>
 8001284:	4663      	mov	r3, ip
 8001286:	2401      	movs	r4, #1
 8001288:	1acf      	subs	r7, r1, r3
 800128a:	4034      	ands	r4, r6
 800128c:	e664      	b.n	8000f58 <__aeabi_fsub+0x74>
 800128e:	4461      	add	r1, ip
 8001290:	014b      	lsls	r3, r1, #5
 8001292:	d56d      	bpl.n	8001370 <__aeabi_fsub+0x48c>
 8001294:	0848      	lsrs	r0, r1, #1
 8001296:	4944      	ldr	r1, [pc, #272]	@ (80013a8 <__aeabi_fsub+0x4c4>)
 8001298:	4001      	ands	r1, r0
 800129a:	0743      	lsls	r3, r0, #29
 800129c:	d02c      	beq.n	80012f8 <__aeabi_fsub+0x414>
 800129e:	230f      	movs	r3, #15
 80012a0:	4003      	ands	r3, r0
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	d028      	beq.n	80012f8 <__aeabi_fsub+0x414>
 80012a6:	1d0b      	adds	r3, r1, #4
 80012a8:	469c      	mov	ip, r3
 80012aa:	2302      	movs	r3, #2
 80012ac:	e690      	b.n	8000fd0 <__aeabi_fsub+0xec>
 80012ae:	2900      	cmp	r1, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x3d0>
 80012b2:	e72b      	b.n	800110c <__aeabi_fsub+0x228>
 80012b4:	2380      	movs	r3, #128	@ 0x80
 80012b6:	03db      	lsls	r3, r3, #15
 80012b8:	429f      	cmp	r7, r3
 80012ba:	d200      	bcs.n	80012be <__aeabi_fsub+0x3da>
 80012bc:	e726      	b.n	800110c <__aeabi_fsub+0x228>
 80012be:	4298      	cmp	r0, r3
 80012c0:	d300      	bcc.n	80012c4 <__aeabi_fsub+0x3e0>
 80012c2:	e723      	b.n	800110c <__aeabi_fsub+0x228>
 80012c4:	2401      	movs	r4, #1
 80012c6:	4034      	ands	r4, r6
 80012c8:	0007      	movs	r7, r0
 80012ca:	e71f      	b.n	800110c <__aeabi_fsub+0x228>
 80012cc:	0034      	movs	r4, r6
 80012ce:	468c      	mov	ip, r1
 80012d0:	e67e      	b.n	8000fd0 <__aeabi_fsub+0xec>
 80012d2:	2301      	movs	r3, #1
 80012d4:	08cf      	lsrs	r7, r1, #3
 80012d6:	e680      	b.n	8000fda <__aeabi_fsub+0xf6>
 80012d8:	2300      	movs	r3, #0
 80012da:	e67e      	b.n	8000fda <__aeabi_fsub+0xf6>
 80012dc:	2020      	movs	r0, #32
 80012de:	4665      	mov	r5, ip
 80012e0:	1b80      	subs	r0, r0, r6
 80012e2:	4085      	lsls	r5, r0
 80012e4:	4663      	mov	r3, ip
 80012e6:	0028      	movs	r0, r5
 80012e8:	40f3      	lsrs	r3, r6
 80012ea:	1e45      	subs	r5, r0, #1
 80012ec:	41a8      	sbcs	r0, r5
 80012ee:	4303      	orrs	r3, r0
 80012f0:	469c      	mov	ip, r3
 80012f2:	0015      	movs	r5, r2
 80012f4:	448c      	add	ip, r1
 80012f6:	e76d      	b.n	80011d4 <__aeabi_fsub+0x2f0>
 80012f8:	2302      	movs	r3, #2
 80012fa:	08cf      	lsrs	r7, r1, #3
 80012fc:	e66d      	b.n	8000fda <__aeabi_fsub+0xf6>
 80012fe:	1b0f      	subs	r7, r1, r4
 8001300:	017b      	lsls	r3, r7, #5
 8001302:	d528      	bpl.n	8001356 <__aeabi_fsub+0x472>
 8001304:	01bf      	lsls	r7, r7, #6
 8001306:	09bf      	lsrs	r7, r7, #6
 8001308:	0038      	movs	r0, r7
 800130a:	f000 f97b 	bl	8001604 <__clzsi2>
 800130e:	003b      	movs	r3, r7
 8001310:	3805      	subs	r0, #5
 8001312:	4083      	lsls	r3, r0
 8001314:	0034      	movs	r4, r6
 8001316:	2501      	movs	r5, #1
 8001318:	e6ca      	b.n	80010b0 <__aeabi_fsub+0x1cc>
 800131a:	2900      	cmp	r1, #0
 800131c:	d100      	bne.n	8001320 <__aeabi_fsub+0x43c>
 800131e:	e6b5      	b.n	800108c <__aeabi_fsub+0x1a8>
 8001320:	2401      	movs	r4, #1
 8001322:	0007      	movs	r7, r0
 8001324:	4034      	ands	r4, r6
 8001326:	e658      	b.n	8000fda <__aeabi_fsub+0xf6>
 8001328:	4663      	mov	r3, ip
 800132a:	2b00      	cmp	r3, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x44c>
 800132e:	e6e9      	b.n	8001104 <__aeabi_fsub+0x220>
 8001330:	2900      	cmp	r1, #0
 8001332:	d100      	bne.n	8001336 <__aeabi_fsub+0x452>
 8001334:	e6ea      	b.n	800110c <__aeabi_fsub+0x228>
 8001336:	2380      	movs	r3, #128	@ 0x80
 8001338:	03db      	lsls	r3, r3, #15
 800133a:	429f      	cmp	r7, r3
 800133c:	d200      	bcs.n	8001340 <__aeabi_fsub+0x45c>
 800133e:	e6e5      	b.n	800110c <__aeabi_fsub+0x228>
 8001340:	4298      	cmp	r0, r3
 8001342:	d300      	bcc.n	8001346 <__aeabi_fsub+0x462>
 8001344:	e6e2      	b.n	800110c <__aeabi_fsub+0x228>
 8001346:	0007      	movs	r7, r0
 8001348:	e6e0      	b.n	800110c <__aeabi_fsub+0x228>
 800134a:	2900      	cmp	r1, #0
 800134c:	d100      	bne.n	8001350 <__aeabi_fsub+0x46c>
 800134e:	e69e      	b.n	800108e <__aeabi_fsub+0x1aa>
 8001350:	2300      	movs	r3, #0
 8001352:	08cf      	lsrs	r7, r1, #3
 8001354:	e641      	b.n	8000fda <__aeabi_fsub+0xf6>
 8001356:	0034      	movs	r4, r6
 8001358:	2301      	movs	r3, #1
 800135a:	08ff      	lsrs	r7, r7, #3
 800135c:	e63d      	b.n	8000fda <__aeabi_fsub+0xf6>
 800135e:	2f00      	cmp	r7, #0
 8001360:	d100      	bne.n	8001364 <__aeabi_fsub+0x480>
 8001362:	e693      	b.n	800108c <__aeabi_fsub+0x1a8>
 8001364:	2300      	movs	r3, #0
 8001366:	08ff      	lsrs	r7, r7, #3
 8001368:	e637      	b.n	8000fda <__aeabi_fsub+0xf6>
 800136a:	2300      	movs	r3, #0
 800136c:	08d7      	lsrs	r7, r2, #3
 800136e:	e634      	b.n	8000fda <__aeabi_fsub+0xf6>
 8001370:	2301      	movs	r3, #1
 8001372:	08cf      	lsrs	r7, r1, #3
 8001374:	e631      	b.n	8000fda <__aeabi_fsub+0xf6>
 8001376:	2280      	movs	r2, #128	@ 0x80
 8001378:	000b      	movs	r3, r1
 800137a:	04d2      	lsls	r2, r2, #19
 800137c:	2001      	movs	r0, #1
 800137e:	4013      	ands	r3, r2
 8001380:	4211      	tst	r1, r2
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x4a2>
 8001384:	e6ae      	b.n	80010e4 <__aeabi_fsub+0x200>
 8001386:	08cf      	lsrs	r7, r1, #3
 8001388:	e627      	b.n	8000fda <__aeabi_fsub+0xf6>
 800138a:	2b00      	cmp	r3, #0
 800138c:	d100      	bne.n	8001390 <__aeabi_fsub+0x4ac>
 800138e:	e75f      	b.n	8001250 <__aeabi_fsub+0x36c>
 8001390:	1b56      	subs	r6, r2, r5
 8001392:	2d00      	cmp	r5, #0
 8001394:	d101      	bne.n	800139a <__aeabi_fsub+0x4b6>
 8001396:	0033      	movs	r3, r6
 8001398:	e6e7      	b.n	800116a <__aeabi_fsub+0x286>
 800139a:	2380      	movs	r3, #128	@ 0x80
 800139c:	4660      	mov	r0, ip
 800139e:	04db      	lsls	r3, r3, #19
 80013a0:	4318      	orrs	r0, r3
 80013a2:	4684      	mov	ip, r0
 80013a4:	e6eb      	b.n	800117e <__aeabi_fsub+0x29a>
 80013a6:	46c0      	nop			@ (mov r8, r8)
 80013a8:	7dffffff 	.word	0x7dffffff

080013ac <__aeabi_f2iz>:
 80013ac:	0241      	lsls	r1, r0, #9
 80013ae:	0042      	lsls	r2, r0, #1
 80013b0:	0fc3      	lsrs	r3, r0, #31
 80013b2:	0a49      	lsrs	r1, r1, #9
 80013b4:	2000      	movs	r0, #0
 80013b6:	0e12      	lsrs	r2, r2, #24
 80013b8:	2a7e      	cmp	r2, #126	@ 0x7e
 80013ba:	dd03      	ble.n	80013c4 <__aeabi_f2iz+0x18>
 80013bc:	2a9d      	cmp	r2, #157	@ 0x9d
 80013be:	dd02      	ble.n	80013c6 <__aeabi_f2iz+0x1a>
 80013c0:	4a09      	ldr	r2, [pc, #36]	@ (80013e8 <__aeabi_f2iz+0x3c>)
 80013c2:	1898      	adds	r0, r3, r2
 80013c4:	4770      	bx	lr
 80013c6:	2080      	movs	r0, #128	@ 0x80
 80013c8:	0400      	lsls	r0, r0, #16
 80013ca:	4301      	orrs	r1, r0
 80013cc:	2a95      	cmp	r2, #149	@ 0x95
 80013ce:	dc07      	bgt.n	80013e0 <__aeabi_f2iz+0x34>
 80013d0:	2096      	movs	r0, #150	@ 0x96
 80013d2:	1a82      	subs	r2, r0, r2
 80013d4:	40d1      	lsrs	r1, r2
 80013d6:	4248      	negs	r0, r1
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1f3      	bne.n	80013c4 <__aeabi_f2iz+0x18>
 80013dc:	0008      	movs	r0, r1
 80013de:	e7f1      	b.n	80013c4 <__aeabi_f2iz+0x18>
 80013e0:	3a96      	subs	r2, #150	@ 0x96
 80013e2:	4091      	lsls	r1, r2
 80013e4:	e7f7      	b.n	80013d6 <__aeabi_f2iz+0x2a>
 80013e6:	46c0      	nop			@ (mov r8, r8)
 80013e8:	7fffffff 	.word	0x7fffffff

080013ec <__aeabi_i2f>:
 80013ec:	b570      	push	{r4, r5, r6, lr}
 80013ee:	2800      	cmp	r0, #0
 80013f0:	d012      	beq.n	8001418 <__aeabi_i2f+0x2c>
 80013f2:	17c3      	asrs	r3, r0, #31
 80013f4:	18c5      	adds	r5, r0, r3
 80013f6:	405d      	eors	r5, r3
 80013f8:	0fc4      	lsrs	r4, r0, #31
 80013fa:	0028      	movs	r0, r5
 80013fc:	f000 f902 	bl	8001604 <__clzsi2>
 8001400:	239e      	movs	r3, #158	@ 0x9e
 8001402:	1a1b      	subs	r3, r3, r0
 8001404:	2b96      	cmp	r3, #150	@ 0x96
 8001406:	dc0f      	bgt.n	8001428 <__aeabi_i2f+0x3c>
 8001408:	2808      	cmp	r0, #8
 800140a:	d038      	beq.n	800147e <__aeabi_i2f+0x92>
 800140c:	3808      	subs	r0, #8
 800140e:	4085      	lsls	r5, r0
 8001410:	026d      	lsls	r5, r5, #9
 8001412:	0a6d      	lsrs	r5, r5, #9
 8001414:	b2d8      	uxtb	r0, r3
 8001416:	e002      	b.n	800141e <__aeabi_i2f+0x32>
 8001418:	2400      	movs	r4, #0
 800141a:	2000      	movs	r0, #0
 800141c:	2500      	movs	r5, #0
 800141e:	05c0      	lsls	r0, r0, #23
 8001420:	4328      	orrs	r0, r5
 8001422:	07e4      	lsls	r4, r4, #31
 8001424:	4320      	orrs	r0, r4
 8001426:	bd70      	pop	{r4, r5, r6, pc}
 8001428:	2b99      	cmp	r3, #153	@ 0x99
 800142a:	dc14      	bgt.n	8001456 <__aeabi_i2f+0x6a>
 800142c:	1f42      	subs	r2, r0, #5
 800142e:	4095      	lsls	r5, r2
 8001430:	002a      	movs	r2, r5
 8001432:	4915      	ldr	r1, [pc, #84]	@ (8001488 <__aeabi_i2f+0x9c>)
 8001434:	4011      	ands	r1, r2
 8001436:	0755      	lsls	r5, r2, #29
 8001438:	d01c      	beq.n	8001474 <__aeabi_i2f+0x88>
 800143a:	250f      	movs	r5, #15
 800143c:	402a      	ands	r2, r5
 800143e:	2a04      	cmp	r2, #4
 8001440:	d018      	beq.n	8001474 <__aeabi_i2f+0x88>
 8001442:	3104      	adds	r1, #4
 8001444:	08ca      	lsrs	r2, r1, #3
 8001446:	0149      	lsls	r1, r1, #5
 8001448:	d515      	bpl.n	8001476 <__aeabi_i2f+0x8a>
 800144a:	239f      	movs	r3, #159	@ 0x9f
 800144c:	0252      	lsls	r2, r2, #9
 800144e:	1a18      	subs	r0, r3, r0
 8001450:	0a55      	lsrs	r5, r2, #9
 8001452:	b2c0      	uxtb	r0, r0
 8001454:	e7e3      	b.n	800141e <__aeabi_i2f+0x32>
 8001456:	2205      	movs	r2, #5
 8001458:	0029      	movs	r1, r5
 800145a:	1a12      	subs	r2, r2, r0
 800145c:	40d1      	lsrs	r1, r2
 800145e:	0002      	movs	r2, r0
 8001460:	321b      	adds	r2, #27
 8001462:	4095      	lsls	r5, r2
 8001464:	002a      	movs	r2, r5
 8001466:	1e55      	subs	r5, r2, #1
 8001468:	41aa      	sbcs	r2, r5
 800146a:	430a      	orrs	r2, r1
 800146c:	4906      	ldr	r1, [pc, #24]	@ (8001488 <__aeabi_i2f+0x9c>)
 800146e:	4011      	ands	r1, r2
 8001470:	0755      	lsls	r5, r2, #29
 8001472:	d1e2      	bne.n	800143a <__aeabi_i2f+0x4e>
 8001474:	08ca      	lsrs	r2, r1, #3
 8001476:	0252      	lsls	r2, r2, #9
 8001478:	0a55      	lsrs	r5, r2, #9
 800147a:	b2d8      	uxtb	r0, r3
 800147c:	e7cf      	b.n	800141e <__aeabi_i2f+0x32>
 800147e:	026d      	lsls	r5, r5, #9
 8001480:	0a6d      	lsrs	r5, r5, #9
 8001482:	308e      	adds	r0, #142	@ 0x8e
 8001484:	e7cb      	b.n	800141e <__aeabi_i2f+0x32>
 8001486:	46c0      	nop			@ (mov r8, r8)
 8001488:	fbffffff 	.word	0xfbffffff

0800148c <__aeabi_d2f>:
 800148c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148e:	004b      	lsls	r3, r1, #1
 8001490:	030f      	lsls	r7, r1, #12
 8001492:	0d5b      	lsrs	r3, r3, #21
 8001494:	4c3a      	ldr	r4, [pc, #232]	@ (8001580 <__aeabi_d2f+0xf4>)
 8001496:	0f45      	lsrs	r5, r0, #29
 8001498:	b083      	sub	sp, #12
 800149a:	0a7f      	lsrs	r7, r7, #9
 800149c:	1c5e      	adds	r6, r3, #1
 800149e:	432f      	orrs	r7, r5
 80014a0:	9000      	str	r0, [sp, #0]
 80014a2:	9101      	str	r1, [sp, #4]
 80014a4:	0fca      	lsrs	r2, r1, #31
 80014a6:	00c5      	lsls	r5, r0, #3
 80014a8:	4226      	tst	r6, r4
 80014aa:	d00b      	beq.n	80014c4 <__aeabi_d2f+0x38>
 80014ac:	4935      	ldr	r1, [pc, #212]	@ (8001584 <__aeabi_d2f+0xf8>)
 80014ae:	185c      	adds	r4, r3, r1
 80014b0:	2cfe      	cmp	r4, #254	@ 0xfe
 80014b2:	dd13      	ble.n	80014dc <__aeabi_d2f+0x50>
 80014b4:	20ff      	movs	r0, #255	@ 0xff
 80014b6:	2300      	movs	r3, #0
 80014b8:	05c0      	lsls	r0, r0, #23
 80014ba:	4318      	orrs	r0, r3
 80014bc:	07d2      	lsls	r2, r2, #31
 80014be:	4310      	orrs	r0, r2
 80014c0:	b003      	add	sp, #12
 80014c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c4:	433d      	orrs	r5, r7
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <__aeabi_d2f+0x42>
 80014ca:	2000      	movs	r0, #0
 80014cc:	e7f4      	b.n	80014b8 <__aeabi_d2f+0x2c>
 80014ce:	2d00      	cmp	r5, #0
 80014d0:	d0f0      	beq.n	80014b4 <__aeabi_d2f+0x28>
 80014d2:	2380      	movs	r3, #128	@ 0x80
 80014d4:	03db      	lsls	r3, r3, #15
 80014d6:	20ff      	movs	r0, #255	@ 0xff
 80014d8:	433b      	orrs	r3, r7
 80014da:	e7ed      	b.n	80014b8 <__aeabi_d2f+0x2c>
 80014dc:	2c00      	cmp	r4, #0
 80014de:	dd0c      	ble.n	80014fa <__aeabi_d2f+0x6e>
 80014e0:	9b00      	ldr	r3, [sp, #0]
 80014e2:	00ff      	lsls	r7, r7, #3
 80014e4:	019b      	lsls	r3, r3, #6
 80014e6:	1e58      	subs	r0, r3, #1
 80014e8:	4183      	sbcs	r3, r0
 80014ea:	0f69      	lsrs	r1, r5, #29
 80014ec:	433b      	orrs	r3, r7
 80014ee:	430b      	orrs	r3, r1
 80014f0:	0759      	lsls	r1, r3, #29
 80014f2:	d127      	bne.n	8001544 <__aeabi_d2f+0xb8>
 80014f4:	08db      	lsrs	r3, r3, #3
 80014f6:	b2e0      	uxtb	r0, r4
 80014f8:	e7de      	b.n	80014b8 <__aeabi_d2f+0x2c>
 80014fa:	0021      	movs	r1, r4
 80014fc:	3117      	adds	r1, #23
 80014fe:	db31      	blt.n	8001564 <__aeabi_d2f+0xd8>
 8001500:	2180      	movs	r1, #128	@ 0x80
 8001502:	201e      	movs	r0, #30
 8001504:	0409      	lsls	r1, r1, #16
 8001506:	4339      	orrs	r1, r7
 8001508:	1b00      	subs	r0, r0, r4
 800150a:	281f      	cmp	r0, #31
 800150c:	dd2d      	ble.n	800156a <__aeabi_d2f+0xde>
 800150e:	2602      	movs	r6, #2
 8001510:	4276      	negs	r6, r6
 8001512:	1b34      	subs	r4, r6, r4
 8001514:	000e      	movs	r6, r1
 8001516:	40e6      	lsrs	r6, r4
 8001518:	0034      	movs	r4, r6
 800151a:	2820      	cmp	r0, #32
 800151c:	d004      	beq.n	8001528 <__aeabi_d2f+0x9c>
 800151e:	481a      	ldr	r0, [pc, #104]	@ (8001588 <__aeabi_d2f+0xfc>)
 8001520:	4684      	mov	ip, r0
 8001522:	4463      	add	r3, ip
 8001524:	4099      	lsls	r1, r3
 8001526:	430d      	orrs	r5, r1
 8001528:	002b      	movs	r3, r5
 800152a:	1e59      	subs	r1, r3, #1
 800152c:	418b      	sbcs	r3, r1
 800152e:	4323      	orrs	r3, r4
 8001530:	0759      	lsls	r1, r3, #29
 8001532:	d003      	beq.n	800153c <__aeabi_d2f+0xb0>
 8001534:	210f      	movs	r1, #15
 8001536:	4019      	ands	r1, r3
 8001538:	2904      	cmp	r1, #4
 800153a:	d10b      	bne.n	8001554 <__aeabi_d2f+0xc8>
 800153c:	019b      	lsls	r3, r3, #6
 800153e:	2000      	movs	r0, #0
 8001540:	0a5b      	lsrs	r3, r3, #9
 8001542:	e7b9      	b.n	80014b8 <__aeabi_d2f+0x2c>
 8001544:	210f      	movs	r1, #15
 8001546:	4019      	ands	r1, r3
 8001548:	2904      	cmp	r1, #4
 800154a:	d104      	bne.n	8001556 <__aeabi_d2f+0xca>
 800154c:	019b      	lsls	r3, r3, #6
 800154e:	0a5b      	lsrs	r3, r3, #9
 8001550:	b2e0      	uxtb	r0, r4
 8001552:	e7b1      	b.n	80014b8 <__aeabi_d2f+0x2c>
 8001554:	2400      	movs	r4, #0
 8001556:	3304      	adds	r3, #4
 8001558:	0159      	lsls	r1, r3, #5
 800155a:	d5f7      	bpl.n	800154c <__aeabi_d2f+0xc0>
 800155c:	3401      	adds	r4, #1
 800155e:	2300      	movs	r3, #0
 8001560:	b2e0      	uxtb	r0, r4
 8001562:	e7a9      	b.n	80014b8 <__aeabi_d2f+0x2c>
 8001564:	2000      	movs	r0, #0
 8001566:	2300      	movs	r3, #0
 8001568:	e7a6      	b.n	80014b8 <__aeabi_d2f+0x2c>
 800156a:	4c08      	ldr	r4, [pc, #32]	@ (800158c <__aeabi_d2f+0x100>)
 800156c:	191c      	adds	r4, r3, r4
 800156e:	002b      	movs	r3, r5
 8001570:	40a5      	lsls	r5, r4
 8001572:	40c3      	lsrs	r3, r0
 8001574:	40a1      	lsls	r1, r4
 8001576:	1e68      	subs	r0, r5, #1
 8001578:	4185      	sbcs	r5, r0
 800157a:	4329      	orrs	r1, r5
 800157c:	430b      	orrs	r3, r1
 800157e:	e7d7      	b.n	8001530 <__aeabi_d2f+0xa4>
 8001580:	000007fe 	.word	0x000007fe
 8001584:	fffffc80 	.word	0xfffffc80
 8001588:	fffffca2 	.word	0xfffffca2
 800158c:	fffffc82 	.word	0xfffffc82

08001590 <__aeabi_cfrcmple>:
 8001590:	4684      	mov	ip, r0
 8001592:	0008      	movs	r0, r1
 8001594:	4661      	mov	r1, ip
 8001596:	e7ff      	b.n	8001598 <__aeabi_cfcmpeq>

08001598 <__aeabi_cfcmpeq>:
 8001598:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800159a:	f000 f8cd 	bl	8001738 <__lesf2>
 800159e:	2800      	cmp	r0, #0
 80015a0:	d401      	bmi.n	80015a6 <__aeabi_cfcmpeq+0xe>
 80015a2:	2100      	movs	r1, #0
 80015a4:	42c8      	cmn	r0, r1
 80015a6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080015a8 <__aeabi_fcmpeq>:
 80015a8:	b510      	push	{r4, lr}
 80015aa:	f000 f855 	bl	8001658 <__eqsf2>
 80015ae:	4240      	negs	r0, r0
 80015b0:	3001      	adds	r0, #1
 80015b2:	bd10      	pop	{r4, pc}

080015b4 <__aeabi_fcmplt>:
 80015b4:	b510      	push	{r4, lr}
 80015b6:	f000 f8bf 	bl	8001738 <__lesf2>
 80015ba:	2800      	cmp	r0, #0
 80015bc:	db01      	blt.n	80015c2 <__aeabi_fcmplt+0xe>
 80015be:	2000      	movs	r0, #0
 80015c0:	bd10      	pop	{r4, pc}
 80015c2:	2001      	movs	r0, #1
 80015c4:	bd10      	pop	{r4, pc}
 80015c6:	46c0      	nop			@ (mov r8, r8)

080015c8 <__aeabi_fcmple>:
 80015c8:	b510      	push	{r4, lr}
 80015ca:	f000 f8b5 	bl	8001738 <__lesf2>
 80015ce:	2800      	cmp	r0, #0
 80015d0:	dd01      	ble.n	80015d6 <__aeabi_fcmple+0xe>
 80015d2:	2000      	movs	r0, #0
 80015d4:	bd10      	pop	{r4, pc}
 80015d6:	2001      	movs	r0, #1
 80015d8:	bd10      	pop	{r4, pc}
 80015da:	46c0      	nop			@ (mov r8, r8)

080015dc <__aeabi_fcmpgt>:
 80015dc:	b510      	push	{r4, lr}
 80015de:	f000 f863 	bl	80016a8 <__gesf2>
 80015e2:	2800      	cmp	r0, #0
 80015e4:	dc01      	bgt.n	80015ea <__aeabi_fcmpgt+0xe>
 80015e6:	2000      	movs	r0, #0
 80015e8:	bd10      	pop	{r4, pc}
 80015ea:	2001      	movs	r0, #1
 80015ec:	bd10      	pop	{r4, pc}
 80015ee:	46c0      	nop			@ (mov r8, r8)

080015f0 <__aeabi_fcmpge>:
 80015f0:	b510      	push	{r4, lr}
 80015f2:	f000 f859 	bl	80016a8 <__gesf2>
 80015f6:	2800      	cmp	r0, #0
 80015f8:	da01      	bge.n	80015fe <__aeabi_fcmpge+0xe>
 80015fa:	2000      	movs	r0, #0
 80015fc:	bd10      	pop	{r4, pc}
 80015fe:	2001      	movs	r0, #1
 8001600:	bd10      	pop	{r4, pc}
 8001602:	46c0      	nop			@ (mov r8, r8)

08001604 <__clzsi2>:
 8001604:	211c      	movs	r1, #28
 8001606:	2301      	movs	r3, #1
 8001608:	041b      	lsls	r3, r3, #16
 800160a:	4298      	cmp	r0, r3
 800160c:	d301      	bcc.n	8001612 <__clzsi2+0xe>
 800160e:	0c00      	lsrs	r0, r0, #16
 8001610:	3910      	subs	r1, #16
 8001612:	0a1b      	lsrs	r3, r3, #8
 8001614:	4298      	cmp	r0, r3
 8001616:	d301      	bcc.n	800161c <__clzsi2+0x18>
 8001618:	0a00      	lsrs	r0, r0, #8
 800161a:	3908      	subs	r1, #8
 800161c:	091b      	lsrs	r3, r3, #4
 800161e:	4298      	cmp	r0, r3
 8001620:	d301      	bcc.n	8001626 <__clzsi2+0x22>
 8001622:	0900      	lsrs	r0, r0, #4
 8001624:	3904      	subs	r1, #4
 8001626:	a202      	add	r2, pc, #8	@ (adr r2, 8001630 <__clzsi2+0x2c>)
 8001628:	5c10      	ldrb	r0, [r2, r0]
 800162a:	1840      	adds	r0, r0, r1
 800162c:	4770      	bx	lr
 800162e:	46c0      	nop			@ (mov r8, r8)
 8001630:	02020304 	.word	0x02020304
 8001634:	01010101 	.word	0x01010101
	...

08001640 <__clzdi2>:
 8001640:	b510      	push	{r4, lr}
 8001642:	2900      	cmp	r1, #0
 8001644:	d103      	bne.n	800164e <__clzdi2+0xe>
 8001646:	f7ff ffdd 	bl	8001604 <__clzsi2>
 800164a:	3020      	adds	r0, #32
 800164c:	e002      	b.n	8001654 <__clzdi2+0x14>
 800164e:	0008      	movs	r0, r1
 8001650:	f7ff ffd8 	bl	8001604 <__clzsi2>
 8001654:	bd10      	pop	{r4, pc}
 8001656:	46c0      	nop			@ (mov r8, r8)

08001658 <__eqsf2>:
 8001658:	b570      	push	{r4, r5, r6, lr}
 800165a:	0042      	lsls	r2, r0, #1
 800165c:	024e      	lsls	r6, r1, #9
 800165e:	004c      	lsls	r4, r1, #1
 8001660:	0245      	lsls	r5, r0, #9
 8001662:	0a6d      	lsrs	r5, r5, #9
 8001664:	0e12      	lsrs	r2, r2, #24
 8001666:	0fc3      	lsrs	r3, r0, #31
 8001668:	0a76      	lsrs	r6, r6, #9
 800166a:	0e24      	lsrs	r4, r4, #24
 800166c:	0fc9      	lsrs	r1, r1, #31
 800166e:	2aff      	cmp	r2, #255	@ 0xff
 8001670:	d010      	beq.n	8001694 <__eqsf2+0x3c>
 8001672:	2cff      	cmp	r4, #255	@ 0xff
 8001674:	d00c      	beq.n	8001690 <__eqsf2+0x38>
 8001676:	2001      	movs	r0, #1
 8001678:	42a2      	cmp	r2, r4
 800167a:	d10a      	bne.n	8001692 <__eqsf2+0x3a>
 800167c:	42b5      	cmp	r5, r6
 800167e:	d108      	bne.n	8001692 <__eqsf2+0x3a>
 8001680:	428b      	cmp	r3, r1
 8001682:	d00f      	beq.n	80016a4 <__eqsf2+0x4c>
 8001684:	2a00      	cmp	r2, #0
 8001686:	d104      	bne.n	8001692 <__eqsf2+0x3a>
 8001688:	0028      	movs	r0, r5
 800168a:	1e43      	subs	r3, r0, #1
 800168c:	4198      	sbcs	r0, r3
 800168e:	e000      	b.n	8001692 <__eqsf2+0x3a>
 8001690:	2001      	movs	r0, #1
 8001692:	bd70      	pop	{r4, r5, r6, pc}
 8001694:	2001      	movs	r0, #1
 8001696:	2cff      	cmp	r4, #255	@ 0xff
 8001698:	d1fb      	bne.n	8001692 <__eqsf2+0x3a>
 800169a:	4335      	orrs	r5, r6
 800169c:	d1f9      	bne.n	8001692 <__eqsf2+0x3a>
 800169e:	404b      	eors	r3, r1
 80016a0:	0018      	movs	r0, r3
 80016a2:	e7f6      	b.n	8001692 <__eqsf2+0x3a>
 80016a4:	2000      	movs	r0, #0
 80016a6:	e7f4      	b.n	8001692 <__eqsf2+0x3a>

080016a8 <__gesf2>:
 80016a8:	b530      	push	{r4, r5, lr}
 80016aa:	0042      	lsls	r2, r0, #1
 80016ac:	0244      	lsls	r4, r0, #9
 80016ae:	024d      	lsls	r5, r1, #9
 80016b0:	0fc3      	lsrs	r3, r0, #31
 80016b2:	0048      	lsls	r0, r1, #1
 80016b4:	0a64      	lsrs	r4, r4, #9
 80016b6:	0e12      	lsrs	r2, r2, #24
 80016b8:	0a6d      	lsrs	r5, r5, #9
 80016ba:	0e00      	lsrs	r0, r0, #24
 80016bc:	0fc9      	lsrs	r1, r1, #31
 80016be:	2aff      	cmp	r2, #255	@ 0xff
 80016c0:	d018      	beq.n	80016f4 <__gesf2+0x4c>
 80016c2:	28ff      	cmp	r0, #255	@ 0xff
 80016c4:	d00a      	beq.n	80016dc <__gesf2+0x34>
 80016c6:	2a00      	cmp	r2, #0
 80016c8:	d11e      	bne.n	8001708 <__gesf2+0x60>
 80016ca:	2800      	cmp	r0, #0
 80016cc:	d10a      	bne.n	80016e4 <__gesf2+0x3c>
 80016ce:	2d00      	cmp	r5, #0
 80016d0:	d029      	beq.n	8001726 <__gesf2+0x7e>
 80016d2:	2c00      	cmp	r4, #0
 80016d4:	d12d      	bne.n	8001732 <__gesf2+0x8a>
 80016d6:	0048      	lsls	r0, r1, #1
 80016d8:	3801      	subs	r0, #1
 80016da:	bd30      	pop	{r4, r5, pc}
 80016dc:	2d00      	cmp	r5, #0
 80016de:	d125      	bne.n	800172c <__gesf2+0x84>
 80016e0:	2a00      	cmp	r2, #0
 80016e2:	d101      	bne.n	80016e8 <__gesf2+0x40>
 80016e4:	2c00      	cmp	r4, #0
 80016e6:	d0f6      	beq.n	80016d6 <__gesf2+0x2e>
 80016e8:	428b      	cmp	r3, r1
 80016ea:	d019      	beq.n	8001720 <__gesf2+0x78>
 80016ec:	2001      	movs	r0, #1
 80016ee:	425b      	negs	r3, r3
 80016f0:	4318      	orrs	r0, r3
 80016f2:	e7f2      	b.n	80016da <__gesf2+0x32>
 80016f4:	2c00      	cmp	r4, #0
 80016f6:	d119      	bne.n	800172c <__gesf2+0x84>
 80016f8:	28ff      	cmp	r0, #255	@ 0xff
 80016fa:	d1f7      	bne.n	80016ec <__gesf2+0x44>
 80016fc:	2d00      	cmp	r5, #0
 80016fe:	d115      	bne.n	800172c <__gesf2+0x84>
 8001700:	2000      	movs	r0, #0
 8001702:	428b      	cmp	r3, r1
 8001704:	d1f2      	bne.n	80016ec <__gesf2+0x44>
 8001706:	e7e8      	b.n	80016da <__gesf2+0x32>
 8001708:	2800      	cmp	r0, #0
 800170a:	d0ef      	beq.n	80016ec <__gesf2+0x44>
 800170c:	428b      	cmp	r3, r1
 800170e:	d1ed      	bne.n	80016ec <__gesf2+0x44>
 8001710:	4282      	cmp	r2, r0
 8001712:	dceb      	bgt.n	80016ec <__gesf2+0x44>
 8001714:	db04      	blt.n	8001720 <__gesf2+0x78>
 8001716:	42ac      	cmp	r4, r5
 8001718:	d8e8      	bhi.n	80016ec <__gesf2+0x44>
 800171a:	2000      	movs	r0, #0
 800171c:	42ac      	cmp	r4, r5
 800171e:	d2dc      	bcs.n	80016da <__gesf2+0x32>
 8001720:	0058      	lsls	r0, r3, #1
 8001722:	3801      	subs	r0, #1
 8001724:	e7d9      	b.n	80016da <__gesf2+0x32>
 8001726:	2c00      	cmp	r4, #0
 8001728:	d0d7      	beq.n	80016da <__gesf2+0x32>
 800172a:	e7df      	b.n	80016ec <__gesf2+0x44>
 800172c:	2002      	movs	r0, #2
 800172e:	4240      	negs	r0, r0
 8001730:	e7d3      	b.n	80016da <__gesf2+0x32>
 8001732:	428b      	cmp	r3, r1
 8001734:	d1da      	bne.n	80016ec <__gesf2+0x44>
 8001736:	e7ee      	b.n	8001716 <__gesf2+0x6e>

08001738 <__lesf2>:
 8001738:	b530      	push	{r4, r5, lr}
 800173a:	0042      	lsls	r2, r0, #1
 800173c:	0244      	lsls	r4, r0, #9
 800173e:	024d      	lsls	r5, r1, #9
 8001740:	0fc3      	lsrs	r3, r0, #31
 8001742:	0048      	lsls	r0, r1, #1
 8001744:	0a64      	lsrs	r4, r4, #9
 8001746:	0e12      	lsrs	r2, r2, #24
 8001748:	0a6d      	lsrs	r5, r5, #9
 800174a:	0e00      	lsrs	r0, r0, #24
 800174c:	0fc9      	lsrs	r1, r1, #31
 800174e:	2aff      	cmp	r2, #255	@ 0xff
 8001750:	d017      	beq.n	8001782 <__lesf2+0x4a>
 8001752:	28ff      	cmp	r0, #255	@ 0xff
 8001754:	d00a      	beq.n	800176c <__lesf2+0x34>
 8001756:	2a00      	cmp	r2, #0
 8001758:	d11b      	bne.n	8001792 <__lesf2+0x5a>
 800175a:	2800      	cmp	r0, #0
 800175c:	d10a      	bne.n	8001774 <__lesf2+0x3c>
 800175e:	2d00      	cmp	r5, #0
 8001760:	d01d      	beq.n	800179e <__lesf2+0x66>
 8001762:	2c00      	cmp	r4, #0
 8001764:	d12d      	bne.n	80017c2 <__lesf2+0x8a>
 8001766:	0048      	lsls	r0, r1, #1
 8001768:	3801      	subs	r0, #1
 800176a:	e011      	b.n	8001790 <__lesf2+0x58>
 800176c:	2d00      	cmp	r5, #0
 800176e:	d10e      	bne.n	800178e <__lesf2+0x56>
 8001770:	2a00      	cmp	r2, #0
 8001772:	d101      	bne.n	8001778 <__lesf2+0x40>
 8001774:	2c00      	cmp	r4, #0
 8001776:	d0f6      	beq.n	8001766 <__lesf2+0x2e>
 8001778:	428b      	cmp	r3, r1
 800177a:	d10c      	bne.n	8001796 <__lesf2+0x5e>
 800177c:	0058      	lsls	r0, r3, #1
 800177e:	3801      	subs	r0, #1
 8001780:	e006      	b.n	8001790 <__lesf2+0x58>
 8001782:	2c00      	cmp	r4, #0
 8001784:	d103      	bne.n	800178e <__lesf2+0x56>
 8001786:	28ff      	cmp	r0, #255	@ 0xff
 8001788:	d105      	bne.n	8001796 <__lesf2+0x5e>
 800178a:	2d00      	cmp	r5, #0
 800178c:	d015      	beq.n	80017ba <__lesf2+0x82>
 800178e:	2002      	movs	r0, #2
 8001790:	bd30      	pop	{r4, r5, pc}
 8001792:	2800      	cmp	r0, #0
 8001794:	d106      	bne.n	80017a4 <__lesf2+0x6c>
 8001796:	2001      	movs	r0, #1
 8001798:	425b      	negs	r3, r3
 800179a:	4318      	orrs	r0, r3
 800179c:	e7f8      	b.n	8001790 <__lesf2+0x58>
 800179e:	2c00      	cmp	r4, #0
 80017a0:	d0f6      	beq.n	8001790 <__lesf2+0x58>
 80017a2:	e7f8      	b.n	8001796 <__lesf2+0x5e>
 80017a4:	428b      	cmp	r3, r1
 80017a6:	d1f6      	bne.n	8001796 <__lesf2+0x5e>
 80017a8:	4282      	cmp	r2, r0
 80017aa:	dcf4      	bgt.n	8001796 <__lesf2+0x5e>
 80017ac:	dbe6      	blt.n	800177c <__lesf2+0x44>
 80017ae:	42ac      	cmp	r4, r5
 80017b0:	d8f1      	bhi.n	8001796 <__lesf2+0x5e>
 80017b2:	2000      	movs	r0, #0
 80017b4:	42ac      	cmp	r4, r5
 80017b6:	d2eb      	bcs.n	8001790 <__lesf2+0x58>
 80017b8:	e7e0      	b.n	800177c <__lesf2+0x44>
 80017ba:	2000      	movs	r0, #0
 80017bc:	428b      	cmp	r3, r1
 80017be:	d1ea      	bne.n	8001796 <__lesf2+0x5e>
 80017c0:	e7e6      	b.n	8001790 <__lesf2+0x58>
 80017c2:	428b      	cmp	r3, r1
 80017c4:	d1e7      	bne.n	8001796 <__lesf2+0x5e>
 80017c6:	e7f2      	b.n	80017ae <__lesf2+0x76>

080017c8 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	0004      	movs	r4, r0
 80017d0:	0008      	movs	r0, r1
 80017d2:	0011      	movs	r1, r2
 80017d4:	1dbb      	adds	r3, r7, #6
 80017d6:	1c22      	adds	r2, r4, #0
 80017d8:	801a      	strh	r2, [r3, #0]
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	1c02      	adds	r2, r0, #0
 80017de:	801a      	strh	r2, [r3, #0]
 80017e0:	1cbb      	adds	r3, r7, #2
 80017e2:	1c0a      	adds	r2, r1, #0
 80017e4:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(y,x, color);
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	8818      	ldrh	r0, [r3, #0]
 80017ea:	1dbb      	adds	r3, r7, #6
 80017ec:	8819      	ldrh	r1, [r3, #0]
 80017ee:	1cbb      	adds	r3, r7, #2
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	001a      	movs	r2, r3
 80017f4:	f000 fd2a 	bl	800224c <ST7735_DrawPixel>
}
 80017f8:	46c0      	nop			@ (mov r8, r8)
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b003      	add	sp, #12
 80017fe:	bd90      	pop	{r4, r7, pc}

08001800 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8001800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001802:	46c6      	mov	lr, r8
 8001804:	b500      	push	{lr}
 8001806:	b090      	sub	sp, #64	@ 0x40
 8001808:	af04      	add	r7, sp, #16
 800180a:	468c      	mov	ip, r1
 800180c:	0016      	movs	r6, r2
 800180e:	0019      	movs	r1, r3
 8001810:	221e      	movs	r2, #30
 8001812:	18ba      	adds	r2, r7, r2
 8001814:	1c03      	adds	r3, r0, #0
 8001816:	8013      	strh	r3, [r2, #0]
 8001818:	231c      	movs	r3, #28
 800181a:	18fb      	adds	r3, r7, r3
 800181c:	4662      	mov	r2, ip
 800181e:	801a      	strh	r2, [r3, #0]
 8001820:	201a      	movs	r0, #26
 8001822:	183b      	adds	r3, r7, r0
 8001824:	1c32      	adds	r2, r6, #0
 8001826:	801a      	strh	r2, [r3, #0]
 8001828:	2018      	movs	r0, #24
 800182a:	183b      	adds	r3, r7, r0
 800182c:	1c0a      	adds	r2, r1, #0
 800182e:	801a      	strh	r2, [r3, #0]
 8001830:	466b      	mov	r3, sp
 8001832:	4698      	mov	r8, r3
	uint16_t pallette[] = {color};
 8001834:	230c      	movs	r3, #12
 8001836:	0001      	movs	r1, r0
 8001838:	185e      	adds	r6, r3, r1
 800183a:	19f2      	adds	r2, r6, r7
 800183c:	2030      	movs	r0, #48	@ 0x30
 800183e:	1846      	adds	r6, r0, r1
 8001840:	19f3      	adds	r3, r6, r7
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	8013      	strh	r3, [r2, #0]
	    uint16_t pixels[w*h][2];
 8001846:	201a      	movs	r0, #26
 8001848:	183b      	adds	r3, r7, r0
 800184a:	2200      	movs	r2, #0
 800184c:	5e9b      	ldrsh	r3, [r3, r2]
 800184e:	187a      	adds	r2, r7, r1
 8001850:	2000      	movs	r0, #0
 8001852:	5e12      	ldrsh	r2, [r2, r0]
 8001854:	4353      	muls	r3, r2
 8001856:	1e5a      	subs	r2, r3, #1
 8001858:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800185a:	001a      	movs	r2, r3
 800185c:	60ba      	str	r2, [r7, #8]
 800185e:	2200      	movs	r2, #0
 8001860:	60fa      	str	r2, [r7, #12]
 8001862:	68b8      	ldr	r0, [r7, #8]
 8001864:	68f9      	ldr	r1, [r7, #12]
 8001866:	0002      	movs	r2, r0
 8001868:	0ed2      	lsrs	r2, r2, #27
 800186a:	000e      	movs	r6, r1
 800186c:	0176      	lsls	r6, r6, #5
 800186e:	617e      	str	r6, [r7, #20]
 8001870:	697e      	ldr	r6, [r7, #20]
 8001872:	4316      	orrs	r6, r2
 8001874:	617e      	str	r6, [r7, #20]
 8001876:	0002      	movs	r2, r0
 8001878:	0152      	lsls	r2, r2, #5
 800187a:	613a      	str	r2, [r7, #16]
 800187c:	001a      	movs	r2, r3
 800187e:	603a      	str	r2, [r7, #0]
 8001880:	2200      	movs	r2, #0
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	6838      	ldr	r0, [r7, #0]
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	0002      	movs	r2, r0
 800188a:	0ed2      	lsrs	r2, r2, #27
 800188c:	000e      	movs	r6, r1
 800188e:	0175      	lsls	r5, r6, #5
 8001890:	4315      	orrs	r5, r2
 8001892:	0002      	movs	r2, r0
 8001894:	0154      	lsls	r4, r2, #5
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	3307      	adds	r3, #7
 800189a:	08db      	lsrs	r3, r3, #3
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	466a      	mov	r2, sp
 80018a0:	1ad2      	subs	r2, r2, r3
 80018a2:	4695      	mov	sp, r2
 80018a4:	ab04      	add	r3, sp, #16
 80018a6:	3301      	adds	r3, #1
 80018a8:	085b      	lsrs	r3, r3, #1
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	62bb      	str	r3, [r7, #40]	@ 0x28

	    pixels[0][0] = 0;
 80018ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b0:	2200      	movs	r2, #0
 80018b2:	801a      	strh	r2, [r3, #0]
	    pixels[0][1] = w*h;
 80018b4:	201a      	movs	r0, #26
 80018b6:	183b      	adds	r3, r7, r0
 80018b8:	881b      	ldrh	r3, [r3, #0]
 80018ba:	2118      	movs	r1, #24
 80018bc:	187a      	adds	r2, r7, r1
 80018be:	8812      	ldrh	r2, [r2, #0]
 80018c0:	4353      	muls	r3, r2
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018c6:	805a      	strh	r2, [r3, #2]
	    drawImage(pixels, pallette, x, y, w, h, 1);
 80018c8:	221e      	movs	r2, #30
 80018ca:	18bb      	adds	r3, r7, r2
 80018cc:	881c      	ldrh	r4, [r3, #0]
 80018ce:	231c      	movs	r3, #28
 80018d0:	18fb      	adds	r3, r7, r3
 80018d2:	881d      	ldrh	r5, [r3, #0]
 80018d4:	183b      	adds	r3, r7, r0
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	0008      	movs	r0, r1
 80018da:	187a      	adds	r2, r7, r1
 80018dc:	8812      	ldrh	r2, [r2, #0]
 80018de:	210c      	movs	r1, #12
 80018e0:	1809      	adds	r1, r1, r0
 80018e2:	19c9      	adds	r1, r1, r7
 80018e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80018e6:	2601      	movs	r6, #1
 80018e8:	46b4      	mov	ip, r6
 80018ea:	4666      	mov	r6, ip
 80018ec:	9602      	str	r6, [sp, #8]
 80018ee:	9201      	str	r2, [sp, #4]
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	002b      	movs	r3, r5
 80018f4:	0022      	movs	r2, r4
 80018f6:	f000 fa09 	bl	8001d0c <drawImage>
 80018fa:	46c5      	mov	sp, r8

	//ST7735_FillRectangle(x, y, w, h, color);
}
 80018fc:	46c0      	nop			@ (mov r8, r8)
 80018fe:	46bd      	mov	sp, r7
 8001900:	b00c      	add	sp, #48	@ 0x30
 8001902:	bc80      	pop	{r7}
 8001904:	46b8      	mov	r8, r7
 8001906:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001908 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	0004      	movs	r4, r0
 8001910:	0008      	movs	r0, r1
 8001912:	0011      	movs	r1, r2
 8001914:	1dbb      	adds	r3, r7, #6
 8001916:	1c22      	adds	r2, r4, #0
 8001918:	801a      	strh	r2, [r3, #0]
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	1c02      	adds	r2, r0, #0
 800191e:	801a      	strh	r2, [r3, #0]
 8001920:	1cbb      	adds	r3, r7, #2
 8001922:	1c0a      	adds	r2, r1, #0
 8001924:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 8001926:	1cbb      	adds	r3, r7, #2
 8001928:	881a      	ldrh	r2, [r3, #0]
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	2100      	movs	r1, #0
 800192e:	5e59      	ldrsh	r1, [r3, r1]
 8001930:	1dbb      	adds	r3, r7, #6
 8001932:	2000      	movs	r0, #0
 8001934:	5e1b      	ldrsh	r3, [r3, r0]
 8001936:	0018      	movs	r0, r3
 8001938:	f7ff ff46 	bl	80017c8 <drawPixel>
}
 800193c:	46c0      	nop			@ (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	b003      	add	sp, #12
 8001942:	bd90      	pop	{r4, r7, pc}

08001944 <drawString>:
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
void drawString(int16_t x, int16_t y, char* c, int16_t textColor, int16_t bgColor, uint8_t size, uint8_t spacing)
{
 8001944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001946:	b089      	sub	sp, #36	@ 0x24
 8001948:	af02      	add	r7, sp, #8
 800194a:	0004      	movs	r4, r0
 800194c:	0008      	movs	r0, r1
 800194e:	60ba      	str	r2, [r7, #8]
 8001950:	0019      	movs	r1, r3
 8001952:	230e      	movs	r3, #14
 8001954:	18fb      	adds	r3, r7, r3
 8001956:	1c22      	adds	r2, r4, #0
 8001958:	801a      	strh	r2, [r3, #0]
 800195a:	230c      	movs	r3, #12
 800195c:	18fb      	adds	r3, r7, r3
 800195e:	1c02      	adds	r2, r0, #0
 8001960:	801a      	strh	r2, [r3, #0]
 8001962:	1dbb      	adds	r3, r7, #6
 8001964:	1c0a      	adds	r2, r1, #0
 8001966:	801a      	strh	r2, [r3, #0]
	uint16_t i =0;
 8001968:	2316      	movs	r3, #22
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	2200      	movs	r2, #0
 800196e:	801a      	strh	r2, [r3, #0]

	while(c[i])
 8001970:	e03f      	b.n	80019f2 <drawString+0xae>
	{
		drawChar(x, y, c[i], textColor, bgColor, size);
 8001972:	2516      	movs	r5, #22
 8001974:	197b      	adds	r3, r7, r5
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	18d3      	adds	r3, r2, r3
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	469c      	mov	ip, r3
 8001980:	1dbb      	adds	r3, r7, #6
 8001982:	2400      	movs	r4, #0
 8001984:	5f1c      	ldrsh	r4, [r3, r4]
 8001986:	230c      	movs	r3, #12
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	2100      	movs	r1, #0
 800198c:	5e59      	ldrsh	r1, [r3, r1]
 800198e:	260e      	movs	r6, #14
 8001990:	19bb      	adds	r3, r7, r6
 8001992:	2000      	movs	r0, #0
 8001994:	5e18      	ldrsh	r0, [r3, r0]
 8001996:	232c      	movs	r3, #44	@ 0x2c
 8001998:	2208      	movs	r2, #8
 800199a:	189b      	adds	r3, r3, r2
 800199c:	19db      	adds	r3, r3, r7
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	2328      	movs	r3, #40	@ 0x28
 80019a4:	189b      	adds	r3, r3, r2
 80019a6:	19db      	adds	r3, r3, r7
 80019a8:	2200      	movs	r2, #0
 80019aa:	5e9b      	ldrsh	r3, [r3, r2]
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	0023      	movs	r3, r4
 80019b0:	4662      	mov	r2, ip
 80019b2:	f000 f82b 	bl	8001a0c <drawChar>
		x+=(size*6)+spacing;
 80019b6:	232c      	movs	r3, #44	@ 0x2c
 80019b8:	2108      	movs	r1, #8
 80019ba:	185b      	adds	r3, r3, r1
 80019bc:	19db      	adds	r3, r3, r7
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	1c1a      	adds	r2, r3, #0
 80019c4:	1c13      	adds	r3, r2, #0
 80019c6:	18db      	adds	r3, r3, r3
 80019c8:	189b      	adds	r3, r3, r2
 80019ca:	18db      	adds	r3, r3, r3
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	2330      	movs	r3, #48	@ 0x30
 80019d0:	185b      	adds	r3, r3, r1
 80019d2:	19db      	adds	r3, r3, r7
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	18d3      	adds	r3, r2, r3
 80019da:	b29a      	uxth	r2, r3
 80019dc:	19bb      	adds	r3, r7, r6
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	18d3      	adds	r3, r2, r3
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	19bb      	adds	r3, r7, r6
 80019e6:	801a      	strh	r2, [r3, #0]
		i++;
 80019e8:	197b      	adds	r3, r7, r5
 80019ea:	881a      	ldrh	r2, [r3, #0]
 80019ec:	197b      	adds	r3, r7, r5
 80019ee:	3201      	adds	r2, #1
 80019f0:	801a      	strh	r2, [r3, #0]
	while(c[i])
 80019f2:	2316      	movs	r3, #22
 80019f4:	18fb      	adds	r3, r7, r3
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	18d3      	adds	r3, r2, r3
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1b7      	bne.n	8001972 <drawString+0x2e>
	}
}
 8001a02:	46c0      	nop			@ (mov r8, r8)
 8001a04:	46c0      	nop			@ (mov r8, r8)
 8001a06:	46bd      	mov	sp, r7
 8001a08:	b007      	add	sp, #28
 8001a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a0c <drawChar>:
void drawChar(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 8001a0c:	b5b0      	push	{r4, r5, r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af02      	add	r7, sp, #8
 8001a12:	0005      	movs	r5, r0
 8001a14:	000c      	movs	r4, r1
 8001a16:	0010      	movs	r0, r2
 8001a18:	0019      	movs	r1, r3
 8001a1a:	1dbb      	adds	r3, r7, #6
 8001a1c:	1c2a      	adds	r2, r5, #0
 8001a1e:	801a      	strh	r2, [r3, #0]
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	1c22      	adds	r2, r4, #0
 8001a24:	801a      	strh	r2, [r3, #0]
 8001a26:	1cfb      	adds	r3, r7, #3
 8001a28:	1c02      	adds	r2, r0, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
 8001a2c:	003b      	movs	r3, r7
 8001a2e:	1c0a      	adds	r2, r1, #0
 8001a30:	801a      	strh	r2, [r3, #0]
  uint8_t line;
  int32_t i, j;
  if((x >= _width)            ||
 8001a32:	4b79      	ldr	r3, [pc, #484]	@ (8001c18 <drawChar+0x20c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	5e9b      	ldrsh	r3, [r3, r2]
 8001a38:	1dba      	adds	r2, r7, #6
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	5e52      	ldrsh	r2, [r2, r1]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	db00      	blt.n	8001a44 <drawChar+0x38>
 8001a42:	e0e5      	b.n	8001c10 <drawChar+0x204>
     (y >= _height)           ||
 8001a44:	4b75      	ldr	r3, [pc, #468]	@ (8001c1c <drawChar+0x210>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	5e9b      	ldrsh	r3, [r3, r2]
  if((x >= _width)            ||
 8001a4a:	1d3a      	adds	r2, r7, #4
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	5e52      	ldrsh	r2, [r2, r1]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	db00      	blt.n	8001a56 <drawChar+0x4a>
 8001a54:	e0dc      	b.n	8001c10 <drawChar+0x204>
     ((x + 5 * size - 1) < 0) ||
 8001a56:	1dbb      	adds	r3, r7, #6
 8001a58:	2100      	movs	r1, #0
 8001a5a:	5e59      	ldrsh	r1, [r3, r1]
 8001a5c:	202c      	movs	r0, #44	@ 0x2c
 8001a5e:	183b      	adds	r3, r7, r0
 8001a60:	781a      	ldrb	r2, [r3, #0]
 8001a62:	0013      	movs	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	189b      	adds	r3, r3, r2
 8001a68:	18cb      	adds	r3, r1, r3
     (y >= _height)           ||
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	dc00      	bgt.n	8001a70 <drawChar+0x64>
 8001a6e:	e0cf      	b.n	8001c10 <drawChar+0x204>
     ((y + 8 * size - 1) < 0))
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	2200      	movs	r2, #0
 8001a74:	5e9a      	ldrsh	r2, [r3, r2]
 8001a76:	183b      	adds	r3, r7, r0
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	18d3      	adds	r3, r2, r3
     ((x + 5 * size - 1) < 0) ||
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	dc00      	bgt.n	8001a84 <drawChar+0x78>
 8001a82:	e0c5      	b.n	8001c10 <drawChar+0x204>
    return;

  for (i=0; i<6; i++ ) {
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	e0bd      	b.n	8001c06 <drawChar+0x1fa>
    if ((i) == 5)
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	d104      	bne.n	8001a9a <drawChar+0x8e>
      line = 0x0;
 8001a90:	2317      	movs	r3, #23
 8001a92:	18fb      	adds	r3, r7, r3
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
 8001a98:	e00b      	b.n	8001ab2 <drawChar+0xa6>
    else
      line = Font[(c*5)+(i)];
 8001a9a:	1cfb      	adds	r3, r7, #3
 8001a9c:	781a      	ldrb	r2, [r3, #0]
 8001a9e:	0013      	movs	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	189a      	adds	r2, r3, r2
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	18d2      	adds	r2, r2, r3
 8001aa8:	2317      	movs	r3, #23
 8001aaa:	18fb      	adds	r3, r7, r3
 8001aac:	495c      	ldr	r1, [pc, #368]	@ (8001c20 <drawChar+0x214>)
 8001aae:	5c8a      	ldrb	r2, [r1, r2]
 8001ab0:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	e09f      	b.n	8001bf8 <drawChar+0x1ec>
      if (line & 0x1) {
 8001ab8:	2317      	movs	r3, #23
 8001aba:	18fb      	adds	r3, r7, r3
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d043      	beq.n	8001b4c <drawChar+0x140>
        if (size == 1)
 8001ac4:	232c      	movs	r3, #44	@ 0x2c
 8001ac6:	18fb      	adds	r3, r7, r3
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d115      	bne.n	8001afa <drawChar+0xee>
          writePixel(x+(i), y+(7-j), textColor);
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	1dbb      	adds	r3, r7, #6
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	18d3      	adds	r3, r2, r3
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	b218      	sxth	r0, r3
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	881a      	ldrh	r2, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	3307      	adds	r3, #7
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	b219      	sxth	r1, r3
 8001aee:	003b      	movs	r3, r7
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	001a      	movs	r2, r3
 8001af4:	f7ff ff08 	bl	8001908 <writePixel>
 8001af8:	e075      	b.n	8001be6 <drawChar+0x1da>
        else {
          fillRect(x+((i)*size), y+((7-j)*size), size, size, textColor);
 8001afa:	212c      	movs	r1, #44	@ 0x2c
 8001afc:	187b      	adds	r3, r7, r1
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	b292      	uxth	r2, r2
 8001b06:	4353      	muls	r3, r2
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	1dbb      	adds	r3, r7, #6
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	18d3      	adds	r3, r2, r3
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	b218      	sxth	r0, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2207      	movs	r2, #7
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	000c      	movs	r4, r1
 8001b1e:	187a      	adds	r2, r7, r1
 8001b20:	7812      	ldrb	r2, [r2, #0]
 8001b22:	b292      	uxth	r2, r2
 8001b24:	4353      	muls	r3, r2
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	18d3      	adds	r3, r2, r3
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	b219      	sxth	r1, r3
 8001b32:	193b      	adds	r3, r7, r4
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	b21a      	sxth	r2, r3
 8001b38:	193b      	adds	r3, r7, r4
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	b21c      	sxth	r4, r3
 8001b3e:	003b      	movs	r3, r7
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	0023      	movs	r3, r4
 8001b46:	f7ff fe5b 	bl	8001800 <fillRect>
 8001b4a:	e04c      	b.n	8001be6 <drawChar+0x1da>
        }
      } else if (bgColor != textColor) {
 8001b4c:	2428      	movs	r4, #40	@ 0x28
 8001b4e:	193b      	adds	r3, r7, r4
 8001b50:	0039      	movs	r1, r7
 8001b52:	2200      	movs	r2, #0
 8001b54:	5e9a      	ldrsh	r2, [r3, r2]
 8001b56:	2300      	movs	r3, #0
 8001b58:	5ecb      	ldrsh	r3, [r1, r3]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d043      	beq.n	8001be6 <drawChar+0x1da>
        if (size == 1) // default size
 8001b5e:	232c      	movs	r3, #44	@ 0x2c
 8001b60:	18fb      	adds	r3, r7, r3
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d115      	bne.n	8001b94 <drawChar+0x188>
          writePixel(x+(i), y+(7-j), bgColor);
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	1dbb      	adds	r3, r7, #6
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	18d3      	adds	r3, r2, r3
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	b218      	sxth	r0, r3
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	881a      	ldrh	r2, [r3, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	3307      	adds	r3, #7
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	b219      	sxth	r1, r3
 8001b88:	193b      	adds	r3, r7, r4
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	001a      	movs	r2, r3
 8001b8e:	f7ff febb 	bl	8001908 <writePixel>
 8001b92:	e028      	b.n	8001be6 <drawChar+0x1da>
        else {  // big size
          fillRect(x+(i)*size, y+(7-j)*size, size, size, bgColor);
 8001b94:	212c      	movs	r1, #44	@ 0x2c
 8001b96:	187b      	adds	r3, r7, r1
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	b292      	uxth	r2, r2
 8001ba0:	4353      	muls	r3, r2
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	1dbb      	adds	r3, r7, #6
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	18d3      	adds	r3, r2, r3
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	b218      	sxth	r0, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2207      	movs	r2, #7
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	000c      	movs	r4, r1
 8001bb8:	187a      	adds	r2, r7, r1
 8001bba:	7812      	ldrb	r2, [r2, #0]
 8001bbc:	b292      	uxth	r2, r2
 8001bbe:	4353      	muls	r3, r2
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	18d3      	adds	r3, r2, r3
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	b219      	sxth	r1, r3
 8001bcc:	193b      	adds	r3, r7, r4
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	b21a      	sxth	r2, r3
 8001bd2:	193b      	adds	r3, r7, r4
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	b21c      	sxth	r4, r3
 8001bd8:	2328      	movs	r3, #40	@ 0x28
 8001bda:	18fb      	adds	r3, r7, r3
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	0023      	movs	r3, r4
 8001be2:	f7ff fe0d 	bl	8001800 <fillRect>
        }
      }
      line >>= 1;
 8001be6:	2217      	movs	r2, #23
 8001be8:	18bb      	adds	r3, r7, r2
 8001bea:	18ba      	adds	r2, r7, r2
 8001bec:	7812      	ldrb	r2, [r2, #0]
 8001bee:	0852      	lsrs	r2, r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2b07      	cmp	r3, #7
 8001bfc:	dc00      	bgt.n	8001c00 <drawChar+0x1f4>
 8001bfe:	e75b      	b.n	8001ab8 <drawChar+0xac>
  for (i=0; i<6; i++ ) {
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	3301      	adds	r3, #1
 8001c04:	613b      	str	r3, [r7, #16]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	2b05      	cmp	r3, #5
 8001c0a:	dc00      	bgt.n	8001c0e <drawChar+0x202>
 8001c0c:	e73d      	b.n	8001a8a <drawChar+0x7e>
 8001c0e:	e000      	b.n	8001c12 <drawChar+0x206>
    return;
 8001c10:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b006      	add	sp, #24
 8001c16:	bdb0      	pop	{r4, r5, r7, pc}
 8001c18:	2000056c 	.word	0x2000056c
 8001c1c:	2000056e 	.word	0x2000056e
 8001c20:	080094cc 	.word	0x080094cc

08001c24 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8001c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c26:	b091      	sub	sp, #68	@ 0x44
 8001c28:	af04      	add	r7, sp, #16
 8001c2a:	231e      	movs	r3, #30
 8001c2c:	18f9      	adds	r1, r7, r3
 8001c2e:	8008      	strh	r0, [r1, #0]
 8001c30:	4669      	mov	r1, sp
 8001c32:	000e      	movs	r6, r1
    uint16_t pallette[] = {color};
 8001c34:	210c      	movs	r1, #12
 8001c36:	2318      	movs	r3, #24
 8001c38:	18cb      	adds	r3, r1, r3
 8001c3a:	19d9      	adds	r1, r3, r7
 8001c3c:	231e      	movs	r3, #30
 8001c3e:	18f8      	adds	r0, r7, r3
 8001c40:	8800      	ldrh	r0, [r0, #0]
 8001c42:	8008      	strh	r0, [r1, #0]
    uint16_t pixels[_width*_height][2];
 8001c44:	492f      	ldr	r1, [pc, #188]	@ (8001d04 <fillScreen+0xe0>)
 8001c46:	2300      	movs	r3, #0
 8001c48:	5ec9      	ldrsh	r1, [r1, r3]
 8001c4a:	0008      	movs	r0, r1
 8001c4c:	492e      	ldr	r1, [pc, #184]	@ (8001d08 <fillScreen+0xe4>)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	5ec9      	ldrsh	r1, [r1, r3]
 8001c52:	4341      	muls	r1, r0
 8001c54:	1e48      	subs	r0, r1, #1
 8001c56:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001c58:	0008      	movs	r0, r1
 8001c5a:	6138      	str	r0, [r7, #16]
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	6178      	str	r0, [r7, #20]
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	0010      	movs	r0, r2
 8001c66:	0ec0      	lsrs	r0, r0, #27
 8001c68:	613a      	str	r2, [r7, #16]
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	015d      	lsls	r5, r3, #5
 8001c6e:	4305      	orrs	r5, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	015c      	lsls	r4, r3, #5
 8001c74:	0008      	movs	r0, r1
 8001c76:	6038      	str	r0, [r7, #0]
 8001c78:	2000      	movs	r0, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	683c      	ldr	r4, [r7, #0]
 8001c7e:	687d      	ldr	r5, [r7, #4]
 8001c80:	0023      	movs	r3, r4
 8001c82:	0ed8      	lsrs	r0, r3, #27
 8001c84:	002b      	movs	r3, r5
 8001c86:	015b      	lsls	r3, r3, #5
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4303      	orrs	r3, r0
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	0023      	movs	r3, r4
 8001c92:	015b      	lsls	r3, r3, #5
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	000b      	movs	r3, r1
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	3307      	adds	r3, #7
 8001c9c:	08db      	lsrs	r3, r3, #3
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	466a      	mov	r2, sp
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	469d      	mov	sp, r3
 8001ca6:	ab04      	add	r3, sp, #16
 8001ca8:	3301      	adds	r3, #1
 8001caa:	085b      	lsrs	r3, r3, #1
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	62bb      	str	r3, [r7, #40]	@ 0x28

    pixels[0][0] = 0;
 8001cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	801a      	strh	r2, [r3, #0]
    pixels[0][1] = _width*_height;
 8001cb6:	4b13      	ldr	r3, [pc, #76]	@ (8001d04 <fillScreen+0xe0>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	5e9b      	ldrsh	r3, [r3, r2]
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	4a12      	ldr	r2, [pc, #72]	@ (8001d08 <fillScreen+0xe4>)
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	5e12      	ldrsh	r2, [r2, r0]
 8001cc4:	b292      	uxth	r2, r2
 8001cc6:	4353      	muls	r3, r2
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ccc:	805a      	strh	r2, [r3, #2]
    drawImage(pixels, pallette, 0, 0, _width, _height, 1);
 8001cce:	4b0d      	ldr	r3, [pc, #52]	@ (8001d04 <fillScreen+0xe0>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	5e9b      	ldrsh	r3, [r3, r2]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8001d08 <fillScreen+0xe4>)
 8001cd8:	2000      	movs	r0, #0
 8001cda:	5e12      	ldrsh	r2, [r2, r0]
 8001cdc:	b292      	uxth	r2, r2
 8001cde:	210c      	movs	r1, #12
 8001ce0:	2018      	movs	r0, #24
 8001ce2:	1809      	adds	r1, r1, r0
 8001ce4:	19c9      	adds	r1, r1, r7
 8001ce6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001ce8:	2401      	movs	r4, #1
 8001cea:	9402      	str	r4, [sp, #8]
 8001cec:	9201      	str	r2, [sp, #4]
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f000 f80a 	bl	8001d0c <drawImage>
 8001cf8:	46b5      	mov	sp, r6
	//fillRect(0, 0, _width, _height, color);
}
 8001cfa:	46c0      	nop			@ (mov r8, r8)
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b00d      	add	sp, #52	@ 0x34
 8001d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d02:	46c0      	nop			@ (mov r8, r8)
 8001d04:	2000056c 	.word	0x2000056c
 8001d08:	2000056e 	.word	0x2000056e

08001d0c <drawImage>:

void drawImage(uint16_t image[][2], uint16_t palette[], uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
{
 8001d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d0e:	46c6      	mov	lr, r8
 8001d10:	b500      	push	{lr}
 8001d12:	b092      	sub	sp, #72	@ 0x48
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	6278      	str	r0, [r7, #36]	@ 0x24
 8001d18:	6239      	str	r1, [r7, #32]
 8001d1a:	0019      	movs	r1, r3
 8001d1c:	231e      	movs	r3, #30
 8001d1e:	18fb      	adds	r3, r7, r3
 8001d20:	801a      	strh	r2, [r3, #0]
 8001d22:	231c      	movs	r3, #28
 8001d24:	18fb      	adds	r3, r7, r3
 8001d26:	1c0a      	adds	r2, r1, #0
 8001d28:	801a      	strh	r2, [r3, #0]
 8001d2a:	466b      	mov	r3, sp
 8001d2c:	4698      	mov	r8, r3
	uint16_t i;
	uint16_t j;
	uint16_t totalInd =0;
 8001d2e:	2322      	movs	r3, #34	@ 0x22
 8001d30:	2118      	movs	r1, #24
 8001d32:	185b      	adds	r3, r3, r1
 8001d34:	19db      	adds	r3, r3, r7
 8001d36:	2200      	movs	r2, #0
 8001d38:	801a      	strh	r2, [r3, #0]
	uint16_t ind;
	uint16_t count;
	uint16_t bufffer[w*h];
 8001d3a:	2340      	movs	r3, #64	@ 0x40
 8001d3c:	185b      	adds	r3, r3, r1
 8001d3e:	19db      	adds	r3, r3, r7
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	2244      	movs	r2, #68	@ 0x44
 8001d44:	1852      	adds	r2, r2, r1
 8001d46:	19d2      	adds	r2, r2, r7
 8001d48:	8812      	ldrh	r2, [r2, #0]
 8001d4a:	4353      	muls	r3, r2
 8001d4c:	1e5a      	subs	r2, r3, #1
 8001d4e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001d50:	001a      	movs	r2, r3
 8001d52:	60ba      	str	r2, [r7, #8]
 8001d54:	2200      	movs	r2, #0
 8001d56:	60fa      	str	r2, [r7, #12]
 8001d58:	68b8      	ldr	r0, [r7, #8]
 8001d5a:	68f9      	ldr	r1, [r7, #12]
 8001d5c:	0002      	movs	r2, r0
 8001d5e:	0f12      	lsrs	r2, r2, #28
 8001d60:	000e      	movs	r6, r1
 8001d62:	0136      	lsls	r6, r6, #4
 8001d64:	617e      	str	r6, [r7, #20]
 8001d66:	697e      	ldr	r6, [r7, #20]
 8001d68:	4316      	orrs	r6, r2
 8001d6a:	617e      	str	r6, [r7, #20]
 8001d6c:	0002      	movs	r2, r0
 8001d6e:	0112      	lsls	r2, r2, #4
 8001d70:	613a      	str	r2, [r7, #16]
 8001d72:	001a      	movs	r2, r3
 8001d74:	603a      	str	r2, [r7, #0]
 8001d76:	2200      	movs	r2, #0
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	6838      	ldr	r0, [r7, #0]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	0002      	movs	r2, r0
 8001d80:	0f12      	lsrs	r2, r2, #28
 8001d82:	000e      	movs	r6, r1
 8001d84:	0135      	lsls	r5, r6, #4
 8001d86:	4315      	orrs	r5, r2
 8001d88:	0002      	movs	r2, r0
 8001d8a:	0114      	lsls	r4, r2, #4
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	3307      	adds	r3, #7
 8001d90:	08db      	lsrs	r3, r3, #3
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	466a      	mov	r2, sp
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	469d      	mov	sp, r3
 8001d9a:	ab02      	add	r3, sp, #8
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	085b      	lsrs	r3, r3, #1
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	633b      	str	r3, [r7, #48]	@ 0x30
for(i=0; i<c; i++)
 8001da4:	2326      	movs	r3, #38	@ 0x26
 8001da6:	2118      	movs	r1, #24
 8001da8:	185b      	adds	r3, r3, r1
 8001daa:	19db      	adds	r3, r3, r7
 8001dac:	2200      	movs	r2, #0
 8001dae:	801a      	strh	r2, [r3, #0]
 8001db0:	e04d      	b.n	8001e4e <drawImage+0x142>
{
	ind = image[i][0];
 8001db2:	2126      	movs	r1, #38	@ 0x26
 8001db4:	2018      	movs	r0, #24
 8001db6:	180b      	adds	r3, r1, r0
 8001db8:	19db      	adds	r3, r3, r7
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dc0:	18d2      	adds	r2, r2, r3
 8001dc2:	2316      	movs	r3, #22
 8001dc4:	181b      	adds	r3, r3, r0
 8001dc6:	19db      	adds	r3, r3, r7
 8001dc8:	8812      	ldrh	r2, [r2, #0]
 8001dca:	801a      	strh	r2, [r3, #0]
	count = image[i][1];
 8001dcc:	180b      	adds	r3, r1, r0
 8001dce:	19db      	adds	r3, r3, r7
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dd6:	18d2      	adds	r2, r2, r3
 8001dd8:	2314      	movs	r3, #20
 8001dda:	181b      	adds	r3, r3, r0
 8001ddc:	19db      	adds	r3, r3, r7
 8001dde:	8852      	ldrh	r2, [r2, #2]
 8001de0:	801a      	strh	r2, [r3, #0]
	for(j=0; j<count; j++)
 8001de2:	2324      	movs	r3, #36	@ 0x24
 8001de4:	181b      	adds	r3, r3, r0
 8001de6:	19db      	adds	r3, r3, r7
 8001de8:	2200      	movs	r2, #0
 8001dea:	801a      	strh	r2, [r3, #0]
 8001dec:	e01c      	b.n	8001e28 <drawImage+0x11c>
	{
		bufffer[totalInd++] = palette[ind];
 8001dee:	2316      	movs	r3, #22
 8001df0:	2418      	movs	r4, #24
 8001df2:	191b      	adds	r3, r3, r4
 8001df4:	19db      	adds	r3, r3, r7
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	6a3a      	ldr	r2, [r7, #32]
 8001dfc:	18d2      	adds	r2, r2, r3
 8001dfe:	2122      	movs	r1, #34	@ 0x22
 8001e00:	190b      	adds	r3, r1, r4
 8001e02:	19db      	adds	r3, r3, r7
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	1909      	adds	r1, r1, r4
 8001e08:	19c9      	adds	r1, r1, r7
 8001e0a:	1c58      	adds	r0, r3, #1
 8001e0c:	8008      	strh	r0, [r1, #0]
 8001e0e:	0018      	movs	r0, r3
 8001e10:	8811      	ldrh	r1, [r2, #0]
 8001e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e14:	0042      	lsls	r2, r0, #1
 8001e16:	52d1      	strh	r1, [r2, r3]
	for(j=0; j<count; j++)
 8001e18:	2124      	movs	r1, #36	@ 0x24
 8001e1a:	190b      	adds	r3, r1, r4
 8001e1c:	19db      	adds	r3, r3, r7
 8001e1e:	881a      	ldrh	r2, [r3, #0]
 8001e20:	190b      	adds	r3, r1, r4
 8001e22:	19db      	adds	r3, r3, r7
 8001e24:	3201      	adds	r2, #1
 8001e26:	801a      	strh	r2, [r3, #0]
 8001e28:	2324      	movs	r3, #36	@ 0x24
 8001e2a:	2018      	movs	r0, #24
 8001e2c:	181b      	adds	r3, r3, r0
 8001e2e:	19da      	adds	r2, r3, r7
 8001e30:	2314      	movs	r3, #20
 8001e32:	181b      	adds	r3, r3, r0
 8001e34:	19db      	adds	r3, r3, r7
 8001e36:	8812      	ldrh	r2, [r2, #0]
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d3d7      	bcc.n	8001dee <drawImage+0xe2>
for(i=0; i<c; i++)
 8001e3e:	2126      	movs	r1, #38	@ 0x26
 8001e40:	180b      	adds	r3, r1, r0
 8001e42:	19db      	adds	r3, r3, r7
 8001e44:	881a      	ldrh	r2, [r3, #0]
 8001e46:	180b      	adds	r3, r1, r0
 8001e48:	19db      	adds	r3, r3, r7
 8001e4a:	3201      	adds	r2, #1
 8001e4c:	801a      	strh	r2, [r3, #0]
 8001e4e:	2326      	movs	r3, #38	@ 0x26
 8001e50:	2118      	movs	r1, #24
 8001e52:	185b      	adds	r3, r3, r1
 8001e54:	19da      	adds	r2, r3, r7
 8001e56:	2348      	movs	r3, #72	@ 0x48
 8001e58:	185b      	adds	r3, r3, r1
 8001e5a:	19db      	adds	r3, r3, r7
 8001e5c:	8812      	ldrh	r2, [r2, #0]
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d3a6      	bcc.n	8001db2 <drawImage+0xa6>
	}
}
ST7735_DrawImage(y, x, w, h, bufffer);
 8001e64:	2344      	movs	r3, #68	@ 0x44
 8001e66:	185b      	adds	r3, r3, r1
 8001e68:	19db      	adds	r3, r3, r7
 8001e6a:	881c      	ldrh	r4, [r3, #0]
 8001e6c:	2340      	movs	r3, #64	@ 0x40
 8001e6e:	185b      	adds	r3, r3, r1
 8001e70:	19db      	adds	r3, r3, r7
 8001e72:	881a      	ldrh	r2, [r3, #0]
 8001e74:	231e      	movs	r3, #30
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	8819      	ldrh	r1, [r3, #0]
 8001e7a:	231c      	movs	r3, #28
 8001e7c:	18fb      	adds	r3, r7, r3
 8001e7e:	8818      	ldrh	r0, [r3, #0]
 8001e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	0023      	movs	r3, r4
 8001e86:	f000 fa2f 	bl	80022e8 <ST7735_DrawImage>
 8001e8a:	46c5      	mov	sp, r8
}
 8001e8c:	46c0      	nop			@ (mov r8, r8)
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b010      	add	sp, #64	@ 0x40
 8001e92:	bc80      	pop	{r7}
 8001e94:	46b8      	mov	r8, r7
 8001e96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e98 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8001e9c:	23a0      	movs	r3, #160	@ 0xa0
 8001e9e:	05db      	lsls	r3, r3, #23
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2120      	movs	r1, #32
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f002 f9d2 	bl	800424e <HAL_GPIO_WritePin>
}
 8001eaa:	46c0      	nop			@ (mov r8, r8)
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001eb4:	23a0      	movs	r3, #160	@ 0xa0
 8001eb6:	05db      	lsls	r3, r3, #23
 8001eb8:	2201      	movs	r2, #1
 8001eba:	2120      	movs	r1, #32
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f002 f9c6 	bl	800424e <HAL_GPIO_WritePin>
}
 8001ec2:	46c0      	nop			@ (mov r8, r8)
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <ST7735_Reset>:

void ST7735_Reset()
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8001ecc:	23a0      	movs	r3, #160	@ 0xa0
 8001ece:	05db      	lsls	r3, r3, #23
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2108      	movs	r1, #8
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f002 f9ba 	bl	800424e <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001eda:	2005      	movs	r0, #5
 8001edc:	f001 ff40 	bl	8003d60 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8001ee0:	23a0      	movs	r3, #160	@ 0xa0
 8001ee2:	05db      	lsls	r3, r3, #23
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	2108      	movs	r1, #8
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f002 f9b0 	bl	800424e <HAL_GPIO_WritePin>
}
 8001eee:	46c0      	nop			@ (mov r8, r8)
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	0002      	movs	r2, r0
 8001efc:	1dfb      	adds	r3, r7, #7
 8001efe:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8001f00:	23a0      	movs	r3, #160	@ 0xa0
 8001f02:	05db      	lsls	r3, r3, #23
 8001f04:	2200      	movs	r2, #0
 8001f06:	2110      	movs	r1, #16
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f002 f9a0 	bl	800424e <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001f0e:	2301      	movs	r3, #1
 8001f10:	425b      	negs	r3, r3
 8001f12:	1df9      	adds	r1, r7, #7
 8001f14:	4803      	ldr	r0, [pc, #12]	@ (8001f24 <ST7735_WriteCommand+0x30>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	f004 fafc 	bl	8006514 <HAL_SPI_Transmit>
}
 8001f1c:	46c0      	nop			@ (mov r8, r8)
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	b002      	add	sp, #8
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000748 	.word	0x20000748

08001f28 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001f32:	23a0      	movs	r3, #160	@ 0xa0
 8001f34:	05db      	lsls	r3, r3, #23
 8001f36:	2201      	movs	r2, #1
 8001f38:	2110      	movs	r1, #16
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f002 f987 	bl	800424e <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	2301      	movs	r3, #1
 8001f46:	425b      	negs	r3, r3
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4803      	ldr	r0, [pc, #12]	@ (8001f58 <ST7735_WriteData+0x30>)
 8001f4c:	f004 fae2 	bl	8006514 <HAL_SPI_Transmit>
}
 8001f50:	46c0      	nop			@ (mov r8, r8)
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b002      	add	sp, #8
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000748 	.word	0x20000748

08001f5c <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	18ba      	adds	r2, r7, r2
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 8001f72:	e04a      	b.n	800200a <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	1c5a      	adds	r2, r3, #1
 8001f78:	607a      	str	r2, [r7, #4]
 8001f7a:	210b      	movs	r1, #11
 8001f7c:	187a      	adds	r2, r7, r1
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 8001f82:	187b      	adds	r3, r7, r1
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	0018      	movs	r0, r3
 8001f88:	f7ff ffb4 	bl	8001ef4 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	200a      	movs	r0, #10
 8001f94:	183a      	adds	r2, r7, r0
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001f9a:	183b      	adds	r3, r7, r0
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	230c      	movs	r3, #12
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	2180      	movs	r1, #128	@ 0x80
 8001fa6:	400a      	ands	r2, r1
 8001fa8:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 8001faa:	183b      	adds	r3, r7, r0
 8001fac:	183a      	adds	r2, r7, r0
 8001fae:	7812      	ldrb	r2, [r2, #0]
 8001fb0:	217f      	movs	r1, #127	@ 0x7f
 8001fb2:	400a      	ands	r2, r1
 8001fb4:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 8001fb6:	183b      	adds	r3, r7, r0
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00c      	beq.n	8001fd8 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001fbe:	0004      	movs	r4, r0
 8001fc0:	183b      	adds	r3, r7, r0
 8001fc2:	781a      	ldrb	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	0011      	movs	r1, r2
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f7ff ffad 	bl	8001f28 <ST7735_WriteData>
            addr += numArgs;
 8001fce:	193b      	adds	r3, r7, r4
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	18d3      	adds	r3, r2, r3
 8001fd6:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001fd8:	210c      	movs	r1, #12
 8001fda:	187b      	adds	r3, r7, r1
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d013      	beq.n	800200a <DisplayInit+0xae>
            ms = *addr++;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	781a      	ldrb	r2, [r3, #0]
 8001fea:	187b      	adds	r3, r7, r1
 8001fec:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 8001fee:	187b      	adds	r3, r7, r1
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	2bff      	cmp	r3, #255	@ 0xff
 8001ff4:	d103      	bne.n	8001ffe <DisplayInit+0xa2>
 8001ff6:	187b      	adds	r3, r7, r1
 8001ff8:	22fa      	movs	r2, #250	@ 0xfa
 8001ffa:	0052      	lsls	r2, r2, #1
 8001ffc:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 8001ffe:	230c      	movs	r3, #12
 8002000:	18fb      	adds	r3, r7, r3
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	0018      	movs	r0, r3
 8002006:	f001 feab 	bl	8003d60 <HAL_Delay>
    while(numCommands--) {
 800200a:	220f      	movs	r2, #15
 800200c:	18bb      	adds	r3, r7, r2
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	18ba      	adds	r2, r7, r2
 8002012:	1e59      	subs	r1, r3, #1
 8002014:	7011      	strb	r1, [r2, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1ac      	bne.n	8001f74 <DisplayInit+0x18>
        }
    }
}
 800201a:	46c0      	nop			@ (mov r8, r8)
 800201c:	46c0      	nop			@ (mov r8, r8)
 800201e:	46bd      	mov	sp, r7
 8002020:	b005      	add	sp, #20
 8002022:	bd90      	pop	{r4, r7, pc}

08002024 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8002024:	b5b0      	push	{r4, r5, r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	0005      	movs	r5, r0
 800202c:	000c      	movs	r4, r1
 800202e:	0010      	movs	r0, r2
 8002030:	0019      	movs	r1, r3
 8002032:	1dfb      	adds	r3, r7, #7
 8002034:	1c2a      	adds	r2, r5, #0
 8002036:	701a      	strb	r2, [r3, #0]
 8002038:	1dbb      	adds	r3, r7, #6
 800203a:	1c22      	adds	r2, r4, #0
 800203c:	701a      	strb	r2, [r3, #0]
 800203e:	1d7b      	adds	r3, r7, #5
 8002040:	1c02      	adds	r2, r0, #0
 8002042:	701a      	strb	r2, [r3, #0]
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	1c0a      	adds	r2, r1, #0
 8002048:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 800204a:	202a      	movs	r0, #42	@ 0x2a
 800204c:	f7ff ff52 	bl	8001ef4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8002050:	210c      	movs	r1, #12
 8002052:	187b      	adds	r3, r7, r1
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
 8002058:	4b1c      	ldr	r3, [pc, #112]	@ (80020cc <ST7735_SetAddressWindow+0xa8>)
 800205a:	781a      	ldrb	r2, [r3, #0]
 800205c:	1dfb      	adds	r3, r7, #7
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	18d3      	adds	r3, r2, r3
 8002062:	b2da      	uxtb	r2, r3
 8002064:	187b      	adds	r3, r7, r1
 8002066:	705a      	strb	r2, [r3, #1]
 8002068:	187b      	adds	r3, r7, r1
 800206a:	2200      	movs	r2, #0
 800206c:	709a      	strb	r2, [r3, #2]
 800206e:	4b17      	ldr	r3, [pc, #92]	@ (80020cc <ST7735_SetAddressWindow+0xa8>)
 8002070:	781a      	ldrb	r2, [r3, #0]
 8002072:	1d7b      	adds	r3, r7, #5
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	18d3      	adds	r3, r2, r3
 8002078:	b2da      	uxtb	r2, r3
 800207a:	187b      	adds	r3, r7, r1
 800207c:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 800207e:	000c      	movs	r4, r1
 8002080:	187b      	adds	r3, r7, r1
 8002082:	2104      	movs	r1, #4
 8002084:	0018      	movs	r0, r3
 8002086:	f7ff ff4f 	bl	8001f28 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800208a:	202b      	movs	r0, #43	@ 0x2b
 800208c:	f7ff ff32 	bl	8001ef4 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8002090:	4b0f      	ldr	r3, [pc, #60]	@ (80020d0 <ST7735_SetAddressWindow+0xac>)
 8002092:	781a      	ldrb	r2, [r3, #0]
 8002094:	1dbb      	adds	r3, r7, #6
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	18d3      	adds	r3, r2, r3
 800209a:	b2da      	uxtb	r2, r3
 800209c:	0021      	movs	r1, r4
 800209e:	187b      	adds	r3, r7, r1
 80020a0:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 80020a2:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <ST7735_SetAddressWindow+0xac>)
 80020a4:	781a      	ldrb	r2, [r3, #0]
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	18d3      	adds	r3, r2, r3
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	187b      	adds	r3, r7, r1
 80020b0:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 80020b2:	187b      	adds	r3, r7, r1
 80020b4:	2104      	movs	r1, #4
 80020b6:	0018      	movs	r0, r3
 80020b8:	f7ff ff36 	bl	8001f28 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80020bc:	202c      	movs	r0, #44	@ 0x2c
 80020be:	f7ff ff19 	bl	8001ef4 <ST7735_WriteCommand>
}
 80020c2:	46c0      	nop			@ (mov r8, r8)
 80020c4:	46bd      	mov	sp, r7
 80020c6:	b004      	add	sp, #16
 80020c8:	bdb0      	pop	{r4, r5, r7, pc}
 80020ca:	46c0      	nop			@ (mov r8, r8)
 80020cc:	20000573 	.word	0x20000573
 80020d0:	20000574 	.word	0x20000574

080020d4 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	0002      	movs	r2, r0
 80020dc:	1dfb      	adds	r3, r7, #7
 80020de:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 80020e0:	f7ff feda 	bl	8001e98 <ST7735_Select>
    ST7735_Reset();
 80020e4:	f7ff fef0 	bl	8001ec8 <ST7735_Reset>
    DisplayInit(init_cmds1);
 80020e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002124 <ST7735_Init+0x50>)
 80020ea:	0018      	movs	r0, r3
 80020ec:	f7ff ff36 	bl	8001f5c <DisplayInit>
    DisplayInit(init_cmds2);
 80020f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002128 <ST7735_Init+0x54>)
 80020f2:	0018      	movs	r0, r3
 80020f4:	f7ff ff32 	bl	8001f5c <DisplayInit>
    DisplayInit(init_cmds3);
 80020f8:	4b0c      	ldr	r3, [pc, #48]	@ (800212c <ST7735_Init+0x58>)
 80020fa:	0018      	movs	r0, r3
 80020fc:	f7ff ff2e 	bl	8001f5c <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8002100:	4b0b      	ldr	r3, [pc, #44]	@ (8002130 <ST7735_Init+0x5c>)
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8002106:	4b0b      	ldr	r3, [pc, #44]	@ (8002134 <ST7735_Init+0x60>)
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 800210c:	1dfb      	adds	r3, r7, #7
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	0018      	movs	r0, r3
 8002112:	f000 f811 	bl	8002138 <ST7735_SetRotation>
    ST7735_Unselect();
 8002116:	f7ff fecb 	bl	8001eb0 <ST7735_Unselect>

}
 800211a:	46c0      	nop			@ (mov r8, r8)
 800211c:	46bd      	mov	sp, r7
 800211e:	b002      	add	sp, #8
 8002120:	bd80      	pop	{r7, pc}
 8002122:	46c0      	nop			@ (mov r8, r8)
 8002124:	080099c8 	.word	0x080099c8
 8002128:	08009a00 	.word	0x08009a00
 800212c:	08009a10 	.word	0x08009a10
 8002130:	20000571 	.word	0x20000571
 8002134:	20000572 	.word	0x20000572

08002138 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	0002      	movs	r2, r0
 8002140:	1dfb      	adds	r3, r7, #7
 8002142:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8002144:	230f      	movs	r3, #15
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	2200      	movs	r2, #0
 800214a:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 800214c:	1dfb      	adds	r3, r7, #7
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2203      	movs	r2, #3
 8002152:	4013      	ands	r3, r2
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4b36      	ldr	r3, [pc, #216]	@ (8002230 <ST7735_SetRotation+0xf8>)
 8002158:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800215a:	4b35      	ldr	r3, [pc, #212]	@ (8002230 <ST7735_SetRotation+0xf8>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b03      	cmp	r3, #3
 8002160:	d041      	beq.n	80021e6 <ST7735_SetRotation+0xae>
 8002162:	dc53      	bgt.n	800220c <ST7735_SetRotation+0xd4>
 8002164:	2b02      	cmp	r3, #2
 8002166:	d02b      	beq.n	80021c0 <ST7735_SetRotation+0x88>
 8002168:	dc50      	bgt.n	800220c <ST7735_SetRotation+0xd4>
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <ST7735_SetRotation+0x3c>
 800216e:	2b01      	cmp	r3, #1
 8002170:	d013      	beq.n	800219a <ST7735_SetRotation+0x62>
 8002172:	e04b      	b.n	800220c <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8002174:	230f      	movs	r3, #15
 8002176:	18fb      	adds	r3, r7, r3
 8002178:	22c0      	movs	r2, #192	@ 0xc0
 800217a:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 800217c:	4b2d      	ldr	r3, [pc, #180]	@ (8002234 <ST7735_SetRotation+0xfc>)
 800217e:	22a0      	movs	r2, #160	@ 0xa0
 8002180:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8002182:	4b2d      	ldr	r3, [pc, #180]	@ (8002238 <ST7735_SetRotation+0x100>)
 8002184:	2280      	movs	r2, #128	@ 0x80
 8002186:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8002188:	4b2c      	ldr	r3, [pc, #176]	@ (800223c <ST7735_SetRotation+0x104>)
 800218a:	781a      	ldrb	r2, [r3, #0]
 800218c:	4b2c      	ldr	r3, [pc, #176]	@ (8002240 <ST7735_SetRotation+0x108>)
 800218e:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8002190:	4b2c      	ldr	r3, [pc, #176]	@ (8002244 <ST7735_SetRotation+0x10c>)
 8002192:	781a      	ldrb	r2, [r3, #0]
 8002194:	4b2c      	ldr	r3, [pc, #176]	@ (8002248 <ST7735_SetRotation+0x110>)
 8002196:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8002198:	e038      	b.n	800220c <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800219a:	230f      	movs	r3, #15
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	22a0      	movs	r2, #160	@ 0xa0
 80021a0:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 80021a2:	4b25      	ldr	r3, [pc, #148]	@ (8002238 <ST7735_SetRotation+0x100>)
 80021a4:	22a0      	movs	r2, #160	@ 0xa0
 80021a6:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80021a8:	4b22      	ldr	r3, [pc, #136]	@ (8002234 <ST7735_SetRotation+0xfc>)
 80021aa:	2280      	movs	r2, #128	@ 0x80
 80021ac:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80021ae:	4b23      	ldr	r3, [pc, #140]	@ (800223c <ST7735_SetRotation+0x104>)
 80021b0:	781a      	ldrb	r2, [r3, #0]
 80021b2:	4b25      	ldr	r3, [pc, #148]	@ (8002248 <ST7735_SetRotation+0x110>)
 80021b4:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80021b6:	4b23      	ldr	r3, [pc, #140]	@ (8002244 <ST7735_SetRotation+0x10c>)
 80021b8:	781a      	ldrb	r2, [r3, #0]
 80021ba:	4b21      	ldr	r3, [pc, #132]	@ (8002240 <ST7735_SetRotation+0x108>)
 80021bc:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80021be:	e025      	b.n	800220c <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 80021c0:	230f      	movs	r3, #15
 80021c2:	18fb      	adds	r3, r7, r3
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 80021c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002234 <ST7735_SetRotation+0xfc>)
 80021ca:	22a0      	movs	r2, #160	@ 0xa0
 80021cc:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80021ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002238 <ST7735_SetRotation+0x100>)
 80021d0:	2280      	movs	r2, #128	@ 0x80
 80021d2:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80021d4:	4b19      	ldr	r3, [pc, #100]	@ (800223c <ST7735_SetRotation+0x104>)
 80021d6:	781a      	ldrb	r2, [r3, #0]
 80021d8:	4b19      	ldr	r3, [pc, #100]	@ (8002240 <ST7735_SetRotation+0x108>)
 80021da:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80021dc:	4b19      	ldr	r3, [pc, #100]	@ (8002244 <ST7735_SetRotation+0x10c>)
 80021de:	781a      	ldrb	r2, [r3, #0]
 80021e0:	4b19      	ldr	r3, [pc, #100]	@ (8002248 <ST7735_SetRotation+0x110>)
 80021e2:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80021e4:	e012      	b.n	800220c <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80021e6:	230f      	movs	r3, #15
 80021e8:	18fb      	adds	r3, r7, r3
 80021ea:	2260      	movs	r2, #96	@ 0x60
 80021ec:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 80021ee:	4b12      	ldr	r3, [pc, #72]	@ (8002238 <ST7735_SetRotation+0x100>)
 80021f0:	22a0      	movs	r2, #160	@ 0xa0
 80021f2:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80021f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002234 <ST7735_SetRotation+0xfc>)
 80021f6:	2280      	movs	r2, #128	@ 0x80
 80021f8:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80021fa:	4b10      	ldr	r3, [pc, #64]	@ (800223c <ST7735_SetRotation+0x104>)
 80021fc:	781a      	ldrb	r2, [r3, #0]
 80021fe:	4b12      	ldr	r3, [pc, #72]	@ (8002248 <ST7735_SetRotation+0x110>)
 8002200:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8002202:	4b10      	ldr	r3, [pc, #64]	@ (8002244 <ST7735_SetRotation+0x10c>)
 8002204:	781a      	ldrb	r2, [r3, #0]
 8002206:	4b0e      	ldr	r3, [pc, #56]	@ (8002240 <ST7735_SetRotation+0x108>)
 8002208:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800220a:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 800220c:	f7ff fe44 	bl	8001e98 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8002210:	2036      	movs	r0, #54	@ 0x36
 8002212:	f7ff fe6f 	bl	8001ef4 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8002216:	230f      	movs	r3, #15
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	2101      	movs	r1, #1
 800221c:	0018      	movs	r0, r3
 800221e:	f7ff fe83 	bl	8001f28 <ST7735_WriteData>
  ST7735_Unselect();
 8002222:	f7ff fe45 	bl	8001eb0 <ST7735_Unselect>
}
 8002226:	46c0      	nop			@ (mov r8, r8)
 8002228:	46bd      	mov	sp, r7
 800222a:	b004      	add	sp, #16
 800222c:	bd80      	pop	{r7, pc}
 800222e:	46c0      	nop			@ (mov r8, r8)
 8002230:	20000570 	.word	0x20000570
 8002234:	2000056e 	.word	0x2000056e
 8002238:	2000056c 	.word	0x2000056c
 800223c:	20000571 	.word	0x20000571
 8002240:	20000573 	.word	0x20000573
 8002244:	20000572 	.word	0x20000572
 8002248:	20000574 	.word	0x20000574

0800224c <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	0004      	movs	r4, r0
 8002254:	0008      	movs	r0, r1
 8002256:	0011      	movs	r1, r2
 8002258:	1dbb      	adds	r3, r7, #6
 800225a:	1c22      	adds	r2, r4, #0
 800225c:	801a      	strh	r2, [r3, #0]
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	1c02      	adds	r2, r0, #0
 8002262:	801a      	strh	r2, [r3, #0]
 8002264:	1cbb      	adds	r3, r7, #2
 8002266:	1c0a      	adds	r2, r1, #0
 8002268:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 800226a:	1dbb      	adds	r3, r7, #6
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	4a1c      	ldr	r2, [pc, #112]	@ (80022e0 <ST7735_DrawPixel+0x94>)
 8002270:	2100      	movs	r1, #0
 8002272:	5e52      	ldrsh	r2, [r2, r1]
 8002274:	4293      	cmp	r3, r2
 8002276:	da2f      	bge.n	80022d8 <ST7735_DrawPixel+0x8c>
 8002278:	1d3b      	adds	r3, r7, #4
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	4a19      	ldr	r2, [pc, #100]	@ (80022e4 <ST7735_DrawPixel+0x98>)
 800227e:	2100      	movs	r1, #0
 8002280:	5e52      	ldrsh	r2, [r2, r1]
 8002282:	4293      	cmp	r3, r2
 8002284:	da28      	bge.n	80022d8 <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 8002286:	f7ff fe07 	bl	8001e98 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800228a:	1dbb      	adds	r3, r7, #6
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	b2d8      	uxtb	r0, r3
 8002290:	1d3b      	adds	r3, r7, #4
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	b2d9      	uxtb	r1, r3
 8002296:	1dbb      	adds	r3, r7, #6
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	b2db      	uxtb	r3, r3
 800229c:	3301      	adds	r3, #1
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	3301      	adds	r3, #1
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	f7ff febb 	bl	8002024 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80022ae:	1cbb      	adds	r3, r7, #2
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	0a1b      	lsrs	r3, r3, #8
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	210c      	movs	r1, #12
 80022ba:	187b      	adds	r3, r7, r1
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	1cbb      	adds	r3, r7, #2
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	187b      	adds	r3, r7, r1
 80022c6:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 80022c8:	187b      	adds	r3, r7, r1
 80022ca:	2102      	movs	r1, #2
 80022cc:	0018      	movs	r0, r3
 80022ce:	f7ff fe2b 	bl	8001f28 <ST7735_WriteData>

    ST7735_Unselect();
 80022d2:	f7ff fded 	bl	8001eb0 <ST7735_Unselect>
 80022d6:	e000      	b.n	80022da <ST7735_DrawPixel+0x8e>
        return;
 80022d8:	46c0      	nop			@ (mov r8, r8)
}
 80022da:	46bd      	mov	sp, r7
 80022dc:	b005      	add	sp, #20
 80022de:	bd90      	pop	{r4, r7, pc}
 80022e0:	2000056c 	.word	0x2000056c
 80022e4:	2000056e 	.word	0x2000056e

080022e8 <ST7735_DrawImage>:
    }

    ST7735_Unselect();
}

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 80022e8:	b5b0      	push	{r4, r5, r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	0005      	movs	r5, r0
 80022f0:	000c      	movs	r4, r1
 80022f2:	0010      	movs	r0, r2
 80022f4:	0019      	movs	r1, r3
 80022f6:	1dbb      	adds	r3, r7, #6
 80022f8:	1c2a      	adds	r2, r5, #0
 80022fa:	801a      	strh	r2, [r3, #0]
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	1c22      	adds	r2, r4, #0
 8002300:	801a      	strh	r2, [r3, #0]
 8002302:	1cbb      	adds	r3, r7, #2
 8002304:	1c02      	adds	r2, r0, #0
 8002306:	801a      	strh	r2, [r3, #0]
 8002308:	003b      	movs	r3, r7
 800230a:	1c0a      	adds	r2, r1, #0
 800230c:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 800230e:	1dbb      	adds	r3, r7, #6
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	4a2a      	ldr	r2, [pc, #168]	@ (80023bc <ST7735_DrawImage+0xd4>)
 8002314:	2100      	movs	r1, #0
 8002316:	5e52      	ldrsh	r2, [r2, r1]
 8002318:	4293      	cmp	r3, r2
 800231a:	da47      	bge.n	80023ac <ST7735_DrawImage+0xc4>
 800231c:	1d3b      	adds	r3, r7, #4
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	4a27      	ldr	r2, [pc, #156]	@ (80023c0 <ST7735_DrawImage+0xd8>)
 8002322:	2100      	movs	r1, #0
 8002324:	5e52      	ldrsh	r2, [r2, r1]
 8002326:	4293      	cmp	r3, r2
 8002328:	da40      	bge.n	80023ac <ST7735_DrawImage+0xc4>
    if((x + w - 1) >= _width) return;
 800232a:	1dbb      	adds	r3, r7, #6
 800232c:	881a      	ldrh	r2, [r3, #0]
 800232e:	1cbb      	adds	r3, r7, #2
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	18d3      	adds	r3, r2, r3
 8002334:	4a21      	ldr	r2, [pc, #132]	@ (80023bc <ST7735_DrawImage+0xd4>)
 8002336:	2100      	movs	r1, #0
 8002338:	5e52      	ldrsh	r2, [r2, r1]
 800233a:	4293      	cmp	r3, r2
 800233c:	dc38      	bgt.n	80023b0 <ST7735_DrawImage+0xc8>
    if((y + h - 1) >= _height) return;
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	881a      	ldrh	r2, [r3, #0]
 8002342:	003b      	movs	r3, r7
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	18d3      	adds	r3, r2, r3
 8002348:	4a1d      	ldr	r2, [pc, #116]	@ (80023c0 <ST7735_DrawImage+0xd8>)
 800234a:	2100      	movs	r1, #0
 800234c:	5e52      	ldrsh	r2, [r2, r1]
 800234e:	4293      	cmp	r3, r2
 8002350:	dc30      	bgt.n	80023b4 <ST7735_DrawImage+0xcc>

    ST7735_Select();
 8002352:	f7ff fda1 	bl	8001e98 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002356:	1dbb      	adds	r3, r7, #6
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b2d8      	uxtb	r0, r3
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	b2d9      	uxtb	r1, r3
 8002362:	1dbb      	adds	r3, r7, #6
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	b2da      	uxtb	r2, r3
 8002368:	1cbb      	adds	r3, r7, #2
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	18d3      	adds	r3, r2, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	3b01      	subs	r3, #1
 8002374:	b2dc      	uxtb	r4, r3
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	003b      	movs	r3, r7
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	18d3      	adds	r3, r2, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	3b01      	subs	r3, #1
 8002388:	b2db      	uxtb	r3, r3
 800238a:	0022      	movs	r2, r4
 800238c:	f7ff fe4a 	bl	8002024 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8002390:	1cbb      	adds	r3, r7, #2
 8002392:	881b      	ldrh	r3, [r3, #0]
 8002394:	003a      	movs	r2, r7
 8002396:	8812      	ldrh	r2, [r2, #0]
 8002398:	4353      	muls	r3, r2
 800239a:	005a      	lsls	r2, r3, #1
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	0011      	movs	r1, r2
 80023a0:	0018      	movs	r0, r3
 80023a2:	f7ff fdc1 	bl	8001f28 <ST7735_WriteData>
    ST7735_Unselect();
 80023a6:	f7ff fd83 	bl	8001eb0 <ST7735_Unselect>
 80023aa:	e004      	b.n	80023b6 <ST7735_DrawImage+0xce>
    if((x >= _width) || (y >= _height)) return;
 80023ac:	46c0      	nop			@ (mov r8, r8)
 80023ae:	e002      	b.n	80023b6 <ST7735_DrawImage+0xce>
    if((x + w - 1) >= _width) return;
 80023b0:	46c0      	nop			@ (mov r8, r8)
 80023b2:	e000      	b.n	80023b6 <ST7735_DrawImage+0xce>
    if((y + h - 1) >= _height) return;
 80023b4:	46c0      	nop			@ (mov r8, r8)
}
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b002      	add	sp, #8
 80023ba:	bdb0      	pop	{r4, r5, r7, pc}
 80023bc:	2000056c 	.word	0x2000056c
 80023c0:	2000056e 	.word	0x2000056e

080023c4 <minmea_tocoord>:
/**
 * Convert a raw coordinate to a floating point DD.DDD... value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tocoord(struct minmea_float *f)
{
 80023c4:	b5b0      	push	{r4, r5, r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
    if (f->scale == 0)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <minmea_tocoord+0x14>
        return NAN;
 80023d4:	4b1c      	ldr	r3, [pc, #112]	@ (8002448 <minmea_tocoord+0x84>)
 80023d6:	e033      	b.n	8002440 <minmea_tocoord+0x7c>
    int_least32_t degrees = f->value / (f->scale * 100);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2164      	movs	r1, #100	@ 0x64
 80023e2:	434b      	muls	r3, r1
 80023e4:	0019      	movs	r1, r3
 80023e6:	0010      	movs	r0, r2
 80023e8:	f7fd ff2a 	bl	8000240 <__divsi3>
 80023ec:	0003      	movs	r3, r0
 80023ee:	60fb      	str	r3, [r7, #12]
    int_least32_t minutes = f->value % (f->scale * 100);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2164      	movs	r1, #100	@ 0x64
 80023fa:	434b      	muls	r3, r1
 80023fc:	0019      	movs	r1, r3
 80023fe:	0010      	movs	r0, r2
 8002400:	f7fe f804 	bl	800040c <__aeabi_idivmod>
 8002404:	000b      	movs	r3, r1
 8002406:	60bb      	str	r3, [r7, #8]
    return (float) degrees + (float) minutes / (60 * f->scale);
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f7fe ffef 	bl	80013ec <__aeabi_i2f>
 800240e:	1c04      	adds	r4, r0, #0
 8002410:	68b8      	ldr	r0, [r7, #8]
 8002412:	f7fe ffeb 	bl	80013ec <__aeabi_i2f>
 8002416:	1c05      	adds	r5, r0, #0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	0013      	movs	r3, r2
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	0018      	movs	r0, r3
 8002426:	f7fe ffe1 	bl	80013ec <__aeabi_i2f>
 800242a:	1c03      	adds	r3, r0, #0
 800242c:	1c19      	adds	r1, r3, #0
 800242e:	1c28      	adds	r0, r5, #0
 8002430:	f7fe fae8 	bl	8000a04 <__aeabi_fdiv>
 8002434:	1c03      	adds	r3, r0, #0
 8002436:	1c19      	adds	r1, r3, #0
 8002438:	1c20      	adds	r0, r4, #0
 800243a:	f7fe f8f1 	bl	8000620 <__aeabi_fadd>
 800243e:	1c03      	adds	r3, r0, #0
}
 8002440:	1c18      	adds	r0, r3, #0
 8002442:	46bd      	mov	sp, r7
 8002444:	b004      	add	sp, #16
 8002446:	bdb0      	pop	{r4, r5, r7, pc}
 8002448:	7fc00000 	.word	0x7fc00000

0800244c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800244c:	b590      	push	{r4, r7, lr}
 800244e:	b087      	sub	sp, #28
 8002450:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002452:	f001 fbff 	bl	8003c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002456:	f000 fab3 	bl	80029c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800245a:	f000 fc69 	bl	8002d30 <MX_GPIO_Init>
  MX_I2C1_Init();
 800245e:	f000 fb11 	bl	8002a84 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002462:	f000 fb4f 	bl	8002b04 <MX_SPI1_Init>
  MX_TIM17_Init();
 8002466:	f000 fb8d 	bl	8002b84 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 800246a:	f000 fc13 	bl	8002c94 <MX_USART1_UART_Init>
  //MX_USART2_UART_Init();
  //MX_RTC_Init();
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
  ST7735_Unselect();
 800246e:	f7ff fd1f 	bl	8001eb0 <ST7735_Unselect>
  ST7735_Init(1);
 8002472:	2001      	movs	r0, #1
 8002474:	f7ff fe2e 	bl	80020d4 <ST7735_Init>
  //testAll();
  buffer[0] = 'A';
 8002478:	4be1      	ldr	r3, [pc, #900]	@ (8002800 <main+0x3b4>)
 800247a:	2241      	movs	r2, #65	@ 0x41
 800247c:	701a      	strb	r2, [r3, #0]
  buffer[1] = 'B';
 800247e:	4be0      	ldr	r3, [pc, #896]	@ (8002800 <main+0x3b4>)
 8002480:	2242      	movs	r2, #66	@ 0x42
 8002482:	705a      	strb	r2, [r3, #1]
  TIM17->CCR1 = 5;
 8002484:	4bdf      	ldr	r3, [pc, #892]	@ (8002804 <main+0x3b8>)
 8002486:	2205      	movs	r2, #5
 8002488:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM17->PSC=64;
 800248a:	4bde      	ldr	r3, [pc, #888]	@ (8002804 <main+0x3b8>)
 800248c:	2240      	movs	r2, #64	@ 0x40
 800248e:	629a      	str	r2, [r3, #40]	@ 0x28
  uint8_t ret=0;
 8002490:	1dfb      	adds	r3, r7, #7
 8002492:	2200      	movs	r2, #0
 8002494:	701a      	strb	r2, [r3, #0]
    //_ADXL343_Init();

      //Pedometer Setup
      _ADXL343_WriteReg8(0x19, 0x02);
 8002496:	2102      	movs	r1, #2
 8002498:	2019      	movs	r0, #25
 800249a:	f000 fce1 	bl	8002e60 <_ADXL343_WriteReg8>
      ////wait

      _ADXL343_WriteReg8(0x7C, 0x01);
 800249e:	2101      	movs	r1, #1
 80024a0:	207c      	movs	r0, #124	@ 0x7c
 80024a2:	f000 fcdd 	bl	8002e60 <_ADXL343_WriteReg8>
       _ADXL343_WriteReg8(0x1A, 0x38);
 80024a6:	2138      	movs	r1, #56	@ 0x38
 80024a8:	201a      	movs	r0, #26
 80024aa:	f000 fcd9 	bl	8002e60 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1B, 0x04);
 80024ae:	2104      	movs	r1, #4
 80024b0:	201b      	movs	r0, #27
 80024b2:	f000 fcd5 	bl	8002e60 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1F, 0x80);
 80024b6:	2180      	movs	r1, #128	@ 0x80
 80024b8:	201f      	movs	r0, #31
 80024ba:	f000 fcd1 	bl	8002e60 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x21, 0x80);
 80024be:	2180      	movs	r1, #128	@ 0x80
 80024c0:	2021      	movs	r0, #33	@ 0x21
 80024c2:	f000 fccd 	bl	8002e60 <_ADXL343_WriteReg8>



      //  //Step Counter
      _ADXL343_WriteReg8(0x18, 0x01); // enable walking mode
 80024c6:	2101      	movs	r1, #1
 80024c8:	2018      	movs	r0, #24
 80024ca:	f000 fcc9 	bl	8002e60 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x20, 0x01); // enable step interrupt
 80024ce:	2101      	movs	r1, #1
 80024d0:	2020      	movs	r0, #32
 80024d2:	f000 fcc5 	bl	8002e60 <_ADXL343_WriteReg8>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  switch(currentMenu){
 80024d6:	4bcc      	ldr	r3, [pc, #816]	@ (8002808 <main+0x3bc>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d100      	bne.n	80024e0 <main+0x94>
 80024de:	e0d0      	b.n	8002682 <main+0x236>
 80024e0:	dcf9      	bgt.n	80024d6 <main+0x8a>
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d100      	bne.n	80024e8 <main+0x9c>
 80024e6:	e087      	b.n	80025f8 <main+0x1ac>
 80024e8:	dcf5      	bgt.n	80024d6 <main+0x8a>
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d06a      	beq.n	80025c4 <main+0x178>
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d1f1      	bne.n	80024d6 <main+0x8a>
	  case Main:
		  //fillScreen(BLACK);

		  // Draw the Silly little guy centered
		  if((++updateScreen)>=10000)
 80024f2:	4bc6      	ldr	r3, [pc, #792]	@ (800280c <main+0x3c0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	4bc4      	ldr	r3, [pc, #784]	@ (800280c <main+0x3c0>)
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	4bc3      	ldr	r3, [pc, #780]	@ (800280c <main+0x3c0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4ac3      	ldr	r2, [pc, #780]	@ (8002810 <main+0x3c4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d917      	bls.n	8002536 <main+0xea>
		  {
			  fillRect(40, 40, 64, 64, BLACK);
 8002506:	2300      	movs	r3, #0
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	2340      	movs	r3, #64	@ 0x40
 800250c:	2240      	movs	r2, #64	@ 0x40
 800250e:	2128      	movs	r1, #40	@ 0x28
 8002510:	2028      	movs	r0, #40	@ 0x28
 8002512:	f7ff f975 	bl	8001800 <fillRect>
			  drawImage(testImage, palette, 40, 40, 64, 64, 296);
 8002516:	49bf      	ldr	r1, [pc, #764]	@ (8002814 <main+0x3c8>)
 8002518:	48bf      	ldr	r0, [pc, #764]	@ (8002818 <main+0x3cc>)
 800251a:	2394      	movs	r3, #148	@ 0x94
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	9302      	str	r3, [sp, #8]
 8002520:	2340      	movs	r3, #64	@ 0x40
 8002522:	9301      	str	r3, [sp, #4]
 8002524:	2340      	movs	r3, #64	@ 0x40
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	2328      	movs	r3, #40	@ 0x28
 800252a:	2228      	movs	r2, #40	@ 0x28
 800252c:	f7ff fbee 	bl	8001d0c <drawImage>
			  updateScreen = 0;
 8002530:	4bb6      	ldr	r3, [pc, #728]	@ (800280c <main+0x3c0>)
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
		  }

		  //Display the current Steps
		  _ADXL343_ReadReg8(0x15, &steps, 1);
 8002536:	4bb9      	ldr	r3, [pc, #740]	@ (800281c <main+0x3d0>)
 8002538:	2201      	movs	r2, #1
 800253a:	0019      	movs	r1, r3
 800253c:	2015      	movs	r0, #21
 800253e:	f000 fc5d 	bl	8002dfc <_ADXL343_ReadReg8>
		  sprintf(buffer2, "Steps: %d ", steps);
 8002542:	4bb6      	ldr	r3, [pc, #728]	@ (800281c <main+0x3d0>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	001a      	movs	r2, r3
 8002548:	49b5      	ldr	r1, [pc, #724]	@ (8002820 <main+0x3d4>)
 800254a:	4bb6      	ldr	r3, [pc, #728]	@ (8002824 <main+0x3d8>)
 800254c:	0018      	movs	r0, r3
 800254e:	f006 fa7d 	bl	8008a4c <siprintf>
		  drawString(0, 20, buffer2, BLACK, GREEN, 1, 1);
 8002552:	4ab4      	ldr	r2, [pc, #720]	@ (8002824 <main+0x3d8>)
 8002554:	2301      	movs	r3, #1
 8002556:	9302      	str	r3, [sp, #8]
 8002558:	2301      	movs	r3, #1
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	4bb2      	ldr	r3, [pc, #712]	@ (8002828 <main+0x3dc>)
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	2300      	movs	r3, #0
 8002562:	2114      	movs	r1, #20
 8002564:	2000      	movs	r0, #0
 8002566:	f7ff f9ed 	bl	8001944 <drawString>

		  //Change current Menu
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET ) {
 800256a:	2380      	movs	r3, #128	@ 0x80
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	23a0      	movs	r3, #160	@ 0xa0
 8002570:	05db      	lsls	r3, r3, #23
 8002572:	0011      	movs	r1, r2
 8002574:	0018      	movs	r0, r3
 8002576:	f001 fe4d 	bl	8004214 <HAL_GPIO_ReadPin>
 800257a:	0003      	movs	r3, r0
 800257c:	2b01      	cmp	r3, #1
 800257e:	d10b      	bne.n	8002598 <main+0x14c>
			  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8002580:	4baa      	ldr	r3, [pc, #680]	@ (800282c <main+0x3e0>)
 8002582:	2100      	movs	r1, #0
 8002584:	0018      	movs	r0, r3
 8002586:	f004 fb53 	bl	8006c30 <HAL_TIM_PWM_Start>
			  currentMenu = MusicTest;
 800258a:	4b9f      	ldr	r3, [pc, #636]	@ (8002808 <main+0x3bc>)
 800258c:	2202      	movs	r2, #2
 800258e:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8002590:	4ba7      	ldr	r3, [pc, #668]	@ (8002830 <main+0x3e4>)
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
		  }
		  else
			  canChange = 1;


		  break;
 8002596:	e1f6      	b.n	8002986 <main+0x53a>
		  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET ) {
 8002598:	2380      	movs	r3, #128	@ 0x80
 800259a:	011a      	lsls	r2, r3, #4
 800259c:	23a0      	movs	r3, #160	@ 0xa0
 800259e:	05db      	lsls	r3, r3, #23
 80025a0:	0011      	movs	r1, r2
 80025a2:	0018      	movs	r0, r3
 80025a4:	f001 fe36 	bl	8004214 <HAL_GPIO_ReadPin>
 80025a8:	0003      	movs	r3, r0
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d106      	bne.n	80025bc <main+0x170>
			  currentMenu = StatsDisplay;
 80025ae:	4b96      	ldr	r3, [pc, #600]	@ (8002808 <main+0x3bc>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 80025b4:	4b9e      	ldr	r3, [pc, #632]	@ (8002830 <main+0x3e4>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
		  break;
 80025ba:	e1e4      	b.n	8002986 <main+0x53a>
			  canChange = 1;
 80025bc:	4b9c      	ldr	r3, [pc, #624]	@ (8002830 <main+0x3e4>)
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]
		  break;
 80025c2:	e1e0      	b.n	8002986 <main+0x53a>
	  case StatsDisplay:
		  fillScreen(WHITE);
 80025c4:	4b9b      	ldr	r3, [pc, #620]	@ (8002834 <main+0x3e8>)
 80025c6:	0018      	movs	r0, r3
 80025c8:	f7ff fb2c 	bl	8001c24 <fillScreen>

	  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET ){
 80025cc:	2380      	movs	r3, #128	@ 0x80
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	23a0      	movs	r3, #160	@ 0xa0
 80025d2:	05db      	lsls	r3, r3, #23
 80025d4:	0011      	movs	r1, r2
 80025d6:	0018      	movs	r0, r3
 80025d8:	f001 fe1c 	bl	8004214 <HAL_GPIO_ReadPin>
 80025dc:	0003      	movs	r3, r0
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d106      	bne.n	80025f0 <main+0x1a4>
	  		currentMenu = Main;
 80025e2:	4b89      	ldr	r3, [pc, #548]	@ (8002808 <main+0x3bc>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	701a      	strb	r2, [r3, #0]
	  		canChange = 0;
 80025e8:	4b91      	ldr	r3, [pc, #580]	@ (8002830 <main+0x3e4>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	701a      	strb	r2, [r3, #0]
	  	  }
	  	  else
	  	      canChange = 1;

	  	  break;
 80025ee:	e1ca      	b.n	8002986 <main+0x53a>
	  	      canChange = 1;
 80025f0:	4b8f      	ldr	r3, [pc, #572]	@ (8002830 <main+0x3e4>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	701a      	strb	r2, [r3, #0]
	  	  break;
 80025f6:	e1c6      	b.n	8002986 <main+0x53a>
	  case MusicTest:
		  fillScreen(BLUE);
 80025f8:	23f8      	movs	r3, #248	@ 0xf8
 80025fa:	015b      	lsls	r3, r3, #5
 80025fc:	0018      	movs	r0, r3
 80025fe:	f7ff fb11 	bl	8001c24 <fillScreen>

		  freq = freqs[(toneIndex++)%8];
 8002602:	4b8d      	ldr	r3, [pc, #564]	@ (8002838 <main+0x3ec>)
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	b29b      	uxth	r3, r3
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	b291      	uxth	r1, r2
 800260c:	4a8a      	ldr	r2, [pc, #552]	@ (8002838 <main+0x3ec>)
 800260e:	8011      	strh	r1, [r2, #0]
 8002610:	001a      	movs	r2, r3
 8002612:	2307      	movs	r3, #7
 8002614:	4013      	ands	r3, r2
 8002616:	4a89      	ldr	r2, [pc, #548]	@ (800283c <main+0x3f0>)
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	18d3      	adds	r3, r2, r3
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4987      	ldr	r1, [pc, #540]	@ (8002840 <main+0x3f4>)
 8002622:	600a      	str	r2, [r1, #0]
 8002624:	604b      	str	r3, [r1, #4]
		  TIM17->ARR=(uint32_t)(987*(float)1000/(float)freq);
 8002626:	4b86      	ldr	r3, [pc, #536]	@ (8002840 <main+0x3f4>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	0010      	movs	r0, r2
 800262e:	0019      	movs	r1, r3
 8002630:	f7fe ff2c 	bl	800148c <__aeabi_d2f>
 8002634:	1c03      	adds	r3, r0, #0
 8002636:	1c19      	adds	r1, r3, #0
 8002638:	4882      	ldr	r0, [pc, #520]	@ (8002844 <main+0x3f8>)
 800263a:	f7fe f9e3 	bl	8000a04 <__aeabi_fdiv>
 800263e:	1c03      	adds	r3, r0, #0
 8002640:	4c70      	ldr	r4, [pc, #448]	@ (8002804 <main+0x3b8>)
 8002642:	1c18      	adds	r0, r3, #0
 8002644:	f7fd ff08 	bl	8000458 <__aeabi_f2uiz>
 8002648:	0003      	movs	r3, r0
 800264a:	62e3      	str	r3, [r4, #44]	@ 0x2c

		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET) {
 800264c:	2380      	movs	r3, #128	@ 0x80
 800264e:	011a      	lsls	r2, r3, #4
 8002650:	23a0      	movs	r3, #160	@ 0xa0
 8002652:	05db      	lsls	r3, r3, #23
 8002654:	0011      	movs	r1, r2
 8002656:	0018      	movs	r0, r3
 8002658:	f001 fddc 	bl	8004214 <HAL_GPIO_ReadPin>
 800265c:	0003      	movs	r3, r0
 800265e:	2b01      	cmp	r3, #1
 8002660:	d10b      	bne.n	800267a <main+0x22e>
			  currentMenu = Main;
 8002662:	4b69      	ldr	r3, [pc, #420]	@ (8002808 <main+0x3bc>)
 8002664:	2201      	movs	r2, #1
 8002666:	701a      	strb	r2, [r3, #0]
			  canChange = 0;
 8002668:	4b71      	ldr	r3, [pc, #452]	@ (8002830 <main+0x3e4>)
 800266a:	2200      	movs	r2, #0
 800266c:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 800266e:	4b6f      	ldr	r3, [pc, #444]	@ (800282c <main+0x3e0>)
 8002670:	2100      	movs	r1, #0
 8002672:	0018      	movs	r0, r3
 8002674:	f004 fbcc 	bl	8006e10 <HAL_TIM_PWM_Stop>
		  }
		  else
			  canChange = 1;

		  break;
 8002678:	e185      	b.n	8002986 <main+0x53a>
			  canChange = 1;
 800267a:	4b6d      	ldr	r3, [pc, #436]	@ (8002830 <main+0x3e4>)
 800267c:	2201      	movs	r2, #1
 800267e:	701a      	strb	r2, [r3, #0]
		  break;
 8002680:	e181      	b.n	8002986 <main+0x53a>
	  case ConnorDemo:
		  	  steps=0;
 8002682:	4b66      	ldr	r3, [pc, #408]	@ (800281c <main+0x3d0>)
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]

		  	  if((whileI++)%3==0)
 8002688:	4b6f      	ldr	r3, [pc, #444]	@ (8002848 <main+0x3fc>)
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	b29b      	uxth	r3, r3
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	b291      	uxth	r1, r2
 8002692:	4a6d      	ldr	r2, [pc, #436]	@ (8002848 <main+0x3fc>)
 8002694:	8011      	strh	r1, [r2, #0]
 8002696:	2103      	movs	r1, #3
 8002698:	0018      	movs	r0, r3
 800269a:	f7fd fdcd 	bl	8000238 <__aeabi_uidivmod>
 800269e:	000b      	movs	r3, r1
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10f      	bne.n	80026c6 <main+0x27a>
		  		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET)
 80026a6:	4b69      	ldr	r3, [pc, #420]	@ (800284c <main+0x400>)
 80026a8:	2102      	movs	r1, #2
 80026aa:	0018      	movs	r0, r3
 80026ac:	f001 fdb2 	bl	8004214 <HAL_GPIO_ReadPin>
 80026b0:	0003      	movs	r3, r0
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d104      	bne.n	80026c0 <main+0x274>
		  		  		  fillScreen(WHITE);
 80026b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002834 <main+0x3e8>)
 80026b8:	0018      	movs	r0, r3
 80026ba:	f7ff fab3 	bl	8001c24 <fillScreen>
 80026be:	e002      	b.n	80026c6 <main+0x27a>
		  		  	  else
		  		  		  fillScreen(BLACK);
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7ff faaf 	bl	8001c24 <fillScreen>
		  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET)
 80026c6:	2380      	movs	r3, #128	@ 0x80
 80026c8:	011a      	lsls	r2, r3, #4
 80026ca:	23a0      	movs	r3, #160	@ 0xa0
 80026cc:	05db      	lsls	r3, r3, #23
 80026ce:	0011      	movs	r1, r2
 80026d0:	0018      	movs	r0, r3
 80026d2:	f001 fd9f 	bl	8004214 <HAL_GPIO_ReadPin>
 80026d6:	0003      	movs	r3, r0
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d106      	bne.n	80026ea <main+0x29e>
		  		  petXPos-=5;
 80026dc:	4b5c      	ldr	r3, [pc, #368]	@ (8002850 <main+0x404>)
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b05      	subs	r3, #5
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	4b5a      	ldr	r3, [pc, #360]	@ (8002850 <main+0x404>)
 80026e8:	801a      	strh	r2, [r3, #0]
		  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET)
 80026ea:	2380      	movs	r3, #128	@ 0x80
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	23a0      	movs	r3, #160	@ 0xa0
 80026f0:	05db      	lsls	r3, r3, #23
 80026f2:	0011      	movs	r1, r2
 80026f4:	0018      	movs	r0, r3
 80026f6:	f001 fd8d 	bl	8004214 <HAL_GPIO_ReadPin>
 80026fa:	0003      	movs	r3, r0
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d106      	bne.n	800270e <main+0x2c2>
		  		  petXPos+=5;
 8002700:	4b53      	ldr	r3, [pc, #332]	@ (8002850 <main+0x404>)
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	b29b      	uxth	r3, r3
 8002706:	3305      	adds	r3, #5
 8002708:	b29a      	uxth	r2, r3
 800270a:	4b51      	ldr	r3, [pc, #324]	@ (8002850 <main+0x404>)
 800270c:	801a      	strh	r2, [r3, #0]
		  	  if(petXPos<3)petXPos=0;
 800270e:	4b50      	ldr	r3, [pc, #320]	@ (8002850 <main+0x404>)
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d802      	bhi.n	800271e <main+0x2d2>
 8002718:	4b4d      	ldr	r3, [pc, #308]	@ (8002850 <main+0x404>)
 800271a:	2200      	movs	r2, #0
 800271c:	801a      	strh	r2, [r3, #0]
		  	  if(petXPos>60) petXPos=60;
 800271e:	4b4c      	ldr	r3, [pc, #304]	@ (8002850 <main+0x404>)
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	b29b      	uxth	r3, r3
 8002724:	2b3c      	cmp	r3, #60	@ 0x3c
 8002726:	d902      	bls.n	800272e <main+0x2e2>
 8002728:	4b49      	ldr	r3, [pc, #292]	@ (8002850 <main+0x404>)
 800272a:	223c      	movs	r2, #60	@ 0x3c
 800272c:	801a      	strh	r2, [r3, #0]
		  	  freq = freqs[(toneIndex++)%8];
 800272e:	4b42      	ldr	r3, [pc, #264]	@ (8002838 <main+0x3ec>)
 8002730:	881b      	ldrh	r3, [r3, #0]
 8002732:	b29b      	uxth	r3, r3
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	b291      	uxth	r1, r2
 8002738:	4a3f      	ldr	r2, [pc, #252]	@ (8002838 <main+0x3ec>)
 800273a:	8011      	strh	r1, [r2, #0]
 800273c:	001a      	movs	r2, r3
 800273e:	2307      	movs	r3, #7
 8002740:	4013      	ands	r3, r2
 8002742:	4a3e      	ldr	r2, [pc, #248]	@ (800283c <main+0x3f0>)
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	18d3      	adds	r3, r2, r3
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	493c      	ldr	r1, [pc, #240]	@ (8002840 <main+0x3f4>)
 800274e:	600a      	str	r2, [r1, #0]
 8002750:	604b      	str	r3, [r1, #4]
		  	  TIM17->ARR=(uint32_t)(987*(float)1000/(float)freq);
 8002752:	4b3b      	ldr	r3, [pc, #236]	@ (8002840 <main+0x3f4>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	0010      	movs	r0, r2
 800275a:	0019      	movs	r1, r3
 800275c:	f7fe fe96 	bl	800148c <__aeabi_d2f>
 8002760:	1c03      	adds	r3, r0, #0
 8002762:	1c19      	adds	r1, r3, #0
 8002764:	4837      	ldr	r0, [pc, #220]	@ (8002844 <main+0x3f8>)
 8002766:	f7fe f94d 	bl	8000a04 <__aeabi_fdiv>
 800276a:	1c03      	adds	r3, r0, #0
 800276c:	4c25      	ldr	r4, [pc, #148]	@ (8002804 <main+0x3b8>)
 800276e:	1c18      	adds	r0, r3, #0
 8002770:	f7fd fe72 	bl	8000458 <__aeabi_f2uiz>
 8002774:	0003      	movs	r3, r0
 8002776:	62e3      	str	r3, [r4, #44]	@ 0x2c
		  	  //fillScreen(WHITE);
		  	  drawImage(testImage, palette, petXPos, 40, 64, 64, 296);
 8002778:	4b35      	ldr	r3, [pc, #212]	@ (8002850 <main+0x404>)
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	b29a      	uxth	r2, r3
 800277e:	4925      	ldr	r1, [pc, #148]	@ (8002814 <main+0x3c8>)
 8002780:	4825      	ldr	r0, [pc, #148]	@ (8002818 <main+0x3cc>)
 8002782:	2394      	movs	r3, #148	@ 0x94
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	9302      	str	r3, [sp, #8]
 8002788:	2340      	movs	r3, #64	@ 0x40
 800278a:	9301      	str	r3, [sp, #4]
 800278c:	2340      	movs	r3, #64	@ 0x40
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	2328      	movs	r3, #40	@ 0x28
 8002792:	f7ff fabb 	bl	8001d0c <drawImage>
//		  	  _ADXL343_ReadReg8(0x06, &accelZ, 1);
//		  	  _ADXL343_ReadReg8(0x07, &accelX, 1);
//		  	  _ADXL343_ReadReg8(0x08, &accelY, 1);
//		  	  _ADXL343_ReadReg8(0x09, &accelZ, 1);

		  	  sprintf(buffer2, "X:%d - Y:%d - Z:%d ", accelX, accelY, accelZ);
 8002796:	4b2f      	ldr	r3, [pc, #188]	@ (8002854 <main+0x408>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	001a      	movs	r2, r3
 800279c:	4b2e      	ldr	r3, [pc, #184]	@ (8002858 <main+0x40c>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	001c      	movs	r4, r3
 80027a2:	4b2e      	ldr	r3, [pc, #184]	@ (800285c <main+0x410>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	492e      	ldr	r1, [pc, #184]	@ (8002860 <main+0x414>)
 80027a8:	481e      	ldr	r0, [pc, #120]	@ (8002824 <main+0x3d8>)
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	0023      	movs	r3, r4
 80027ae:	f006 f94d 	bl	8008a4c <siprintf>
		  	  drawString(0, 10, buffer2, BLACK, GREEN, 1, 1);
 80027b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002824 <main+0x3d8>)
 80027b4:	2301      	movs	r3, #1
 80027b6:	9302      	str	r3, [sp, #8]
 80027b8:	2301      	movs	r3, #1
 80027ba:	9301      	str	r3, [sp, #4]
 80027bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002828 <main+0x3dc>)
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	2300      	movs	r3, #0
 80027c2:	210a      	movs	r1, #10
 80027c4:	2000      	movs	r0, #0
 80027c6:	f7ff f8bd 	bl	8001944 <drawString>

		  	  _ADXL343_ReadReg8(0x15, &steps, 1);
 80027ca:	4b14      	ldr	r3, [pc, #80]	@ (800281c <main+0x3d0>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	0019      	movs	r1, r3
 80027d0:	2015      	movs	r0, #21
 80027d2:	f000 fb13 	bl	8002dfc <_ADXL343_ReadReg8>
		  	  sprintf(buffer2, "Steps: %d ", steps);
 80027d6:	4b11      	ldr	r3, [pc, #68]	@ (800281c <main+0x3d0>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	001a      	movs	r2, r3
 80027dc:	4910      	ldr	r1, [pc, #64]	@ (8002820 <main+0x3d4>)
 80027de:	4b11      	ldr	r3, [pc, #68]	@ (8002824 <main+0x3d8>)
 80027e0:	0018      	movs	r0, r3
 80027e2:	f006 f933 	bl	8008a4c <siprintf>
		  	  drawString(0, 20, buffer2, BLACK, GREEN, 1, 1);
 80027e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002824 <main+0x3d8>)
 80027e8:	2301      	movs	r3, #1
 80027ea:	9302      	str	r3, [sp, #8]
 80027ec:	2301      	movs	r3, #1
 80027ee:	9301      	str	r3, [sp, #4]
 80027f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002828 <main+0x3dc>)
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	2300      	movs	r3, #0
 80027f6:	2114      	movs	r1, #20
 80027f8:	2000      	movs	r0, #0
 80027fa:	f7ff f8a3 	bl	8001944 <drawString>

		  	  	  //only run this code every few seconds
		  		  while(HAL_UART_Receive(&huart1, &(buffer[i]), 1, 0xFFFF)==HAL_OK)
 80027fe:	e0a7      	b.n	8002950 <main+0x504>
 8002800:	200005c8 	.word	0x200005c8
 8002804:	40014800 	.word	0x40014800
 8002808:	200004f0 	.word	0x200004f0
 800280c:	200006c4 	.word	0x200006c4
 8002810:	0000270f 	.word	0x0000270f
 8002814:	200004a0 	.word	0x200004a0
 8002818:	20000000 	.word	0x20000000
 800281c:	200006c3 	.word	0x200006c3
 8002820:	080093a0 	.word	0x080093a0
 8002824:	2000065c 	.word	0x2000065c
 8002828:	ffffe007 	.word	0xffffe007
 800282c:	200007ac 	.word	0x200007ac
 8002830:	200004f1 	.word	0x200004f1
 8002834:	0000ffff 	.word	0x0000ffff
 8002838:	20000658 	.word	0x20000658
 800283c:	200004b0 	.word	0x200004b0
 8002840:	20000650 	.word	0x20000650
 8002844:	4970f780 	.word	0x4970f780
 8002848:	2000057a 	.word	0x2000057a
 800284c:	50000800 	.word	0x50000800
 8002850:	2000057c 	.word	0x2000057c
 8002854:	200006c0 	.word	0x200006c0
 8002858:	200006c1 	.word	0x200006c1
 800285c:	200006c2 	.word	0x200006c2
 8002860:	080093ac 	.word	0x080093ac
		  		  	{
		  			  if(buffer[i]&&buffer[i]=='\n')
 8002864:	4b48      	ldr	r3, [pc, #288]	@ (8002988 <main+0x53c>)
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	001a      	movs	r2, r3
 800286c:	4b47      	ldr	r3, [pc, #284]	@ (800298c <main+0x540>)
 800286e:	5c9b      	ldrb	r3, [r3, r2]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d066      	beq.n	8002942 <main+0x4f6>
 8002874:	4b44      	ldr	r3, [pc, #272]	@ (8002988 <main+0x53c>)
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	b29b      	uxth	r3, r3
 800287a:	001a      	movs	r2, r3
 800287c:	4b43      	ldr	r3, [pc, #268]	@ (800298c <main+0x540>)
 800287e:	5c9b      	ldrb	r3, [r3, r2]
 8002880:	2b0a      	cmp	r3, #10
 8002882:	d15e      	bne.n	8002942 <main+0x4f6>
		  				  {


		  				  if(minmea_parse_rmc(&rmcStruct, &(buffer[1]))){
 8002884:	4a42      	ldr	r2, [pc, #264]	@ (8002990 <main+0x544>)
 8002886:	4b43      	ldr	r3, [pc, #268]	@ (8002994 <main+0x548>)
 8002888:	0011      	movs	r1, r2
 800288a:	0018      	movs	r0, r3
 800288c:	f000 ff04 	bl	8003698 <minmea_parse_rmc>
 8002890:	1e03      	subs	r3, r0, #0
 8002892:	d038      	beq.n	8002906 <main+0x4ba>
		  				      //printf("FIX?:");
		  				      lat = minmea_tocoord(&rmcStruct.latitude);
 8002894:	4b40      	ldr	r3, [pc, #256]	@ (8002998 <main+0x54c>)
 8002896:	0018      	movs	r0, r3
 8002898:	f7ff fd94 	bl	80023c4 <minmea_tocoord>
 800289c:	1c02      	adds	r2, r0, #0
 800289e:	4b3f      	ldr	r3, [pc, #252]	@ (800299c <main+0x550>)
 80028a0:	601a      	str	r2, [r3, #0]
		  				      lon = minmea_tocoord(&rmcStruct.longitude);
 80028a2:	4b3f      	ldr	r3, [pc, #252]	@ (80029a0 <main+0x554>)
 80028a4:	0018      	movs	r0, r3
 80028a6:	f7ff fd8d 	bl	80023c4 <minmea_tocoord>
 80028aa:	1c02      	adds	r2, r0, #0
 80028ac:	4b3d      	ldr	r3, [pc, #244]	@ (80029a4 <main+0x558>)
 80028ae:	601a      	str	r2, [r3, #0]
		  				      sprintf(buffer, "lat:%d, %d", (int)(lat*100), (int)(lon*100));
 80028b0:	4b3a      	ldr	r3, [pc, #232]	@ (800299c <main+0x550>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	493c      	ldr	r1, [pc, #240]	@ (80029a8 <main+0x55c>)
 80028b6:	1c18      	adds	r0, r3, #0
 80028b8:	f7fe f9ba 	bl	8000c30 <__aeabi_fmul>
 80028bc:	1c03      	adds	r3, r0, #0
 80028be:	1c18      	adds	r0, r3, #0
 80028c0:	f7fe fd74 	bl	80013ac <__aeabi_f2iz>
 80028c4:	0004      	movs	r4, r0
 80028c6:	4b37      	ldr	r3, [pc, #220]	@ (80029a4 <main+0x558>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4937      	ldr	r1, [pc, #220]	@ (80029a8 <main+0x55c>)
 80028cc:	1c18      	adds	r0, r3, #0
 80028ce:	f7fe f9af 	bl	8000c30 <__aeabi_fmul>
 80028d2:	1c03      	adds	r3, r0, #0
 80028d4:	1c18      	adds	r0, r3, #0
 80028d6:	f7fe fd69 	bl	80013ac <__aeabi_f2iz>
 80028da:	0003      	movs	r3, r0
 80028dc:	4933      	ldr	r1, [pc, #204]	@ (80029ac <main+0x560>)
 80028de:	482b      	ldr	r0, [pc, #172]	@ (800298c <main+0x540>)
 80028e0:	0022      	movs	r2, r4
 80028e2:	f006 f8b3 	bl	8008a4c <siprintf>
		  				      if(rmcStruct.valid!=0)
 80028e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002994 <main+0x548>)
 80028e8:	7c1b      	ldrb	r3, [r3, #16]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00b      	beq.n	8002906 <main+0x4ba>
		  				      {drawString(0, 30, buffer, BLACK, GREEN, 1, 1);
 80028ee:	4a27      	ldr	r2, [pc, #156]	@ (800298c <main+0x540>)
 80028f0:	2301      	movs	r3, #1
 80028f2:	9302      	str	r3, [sp, #8]
 80028f4:	2301      	movs	r3, #1
 80028f6:	9301      	str	r3, [sp, #4]
 80028f8:	4b2d      	ldr	r3, [pc, #180]	@ (80029b0 <main+0x564>)
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	2300      	movs	r3, #0
 80028fe:	211e      	movs	r1, #30
 8002900:	2000      	movs	r0, #0
 8002902:	f7ff f81f 	bl	8001944 <drawString>
		  				    }
		  				  }
		  				  //buffer[0]='_';
		  				  //drawString(70, 70, buffer, BLACK, GREEN, 1, 1);
		  				  for(ii=0;ii<=i;ii++) buffer[ii]=0;
 8002906:	4b2b      	ldr	r3, [pc, #172]	@ (80029b4 <main+0x568>)
 8002908:	2200      	movs	r2, #0
 800290a:	801a      	strh	r2, [r3, #0]
 800290c:	e00d      	b.n	800292a <main+0x4de>
 800290e:	4b29      	ldr	r3, [pc, #164]	@ (80029b4 <main+0x568>)
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	b29b      	uxth	r3, r3
 8002914:	001a      	movs	r2, r3
 8002916:	4b1d      	ldr	r3, [pc, #116]	@ (800298c <main+0x540>)
 8002918:	2100      	movs	r1, #0
 800291a:	5499      	strb	r1, [r3, r2]
 800291c:	4b25      	ldr	r3, [pc, #148]	@ (80029b4 <main+0x568>)
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	b29b      	uxth	r3, r3
 8002922:	3301      	adds	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	4b23      	ldr	r3, [pc, #140]	@ (80029b4 <main+0x568>)
 8002928:	801a      	strh	r2, [r3, #0]
 800292a:	4b22      	ldr	r3, [pc, #136]	@ (80029b4 <main+0x568>)
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	b29a      	uxth	r2, r3
 8002930:	4b15      	ldr	r3, [pc, #84]	@ (8002988 <main+0x53c>)
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	b29b      	uxth	r3, r3
 8002936:	429a      	cmp	r2, r3
 8002938:	d9e9      	bls.n	800290e <main+0x4c2>
		  				 i=0;
 800293a:	4b13      	ldr	r3, [pc, #76]	@ (8002988 <main+0x53c>)
 800293c:	2200      	movs	r2, #0
 800293e:	801a      	strh	r2, [r3, #0]
		  				 break;
 8002940:	e014      	b.n	800296c <main+0x520>
		  				  }
		  			  	        i++;
 8002942:	4b11      	ldr	r3, [pc, #68]	@ (8002988 <main+0x53c>)
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	3301      	adds	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	4b0e      	ldr	r3, [pc, #56]	@ (8002988 <main+0x53c>)
 800294e:	801a      	strh	r2, [r3, #0]
		  		  while(HAL_UART_Receive(&huart1, &(buffer[i]), 1, 0xFFFF)==HAL_OK)
 8002950:	4b0d      	ldr	r3, [pc, #52]	@ (8002988 <main+0x53c>)
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	b29b      	uxth	r3, r3
 8002956:	001a      	movs	r2, r3
 8002958:	4b0c      	ldr	r3, [pc, #48]	@ (800298c <main+0x540>)
 800295a:	18d1      	adds	r1, r2, r3
 800295c:	4b16      	ldr	r3, [pc, #88]	@ (80029b8 <main+0x56c>)
 800295e:	4817      	ldr	r0, [pc, #92]	@ (80029bc <main+0x570>)
 8002960:	2201      	movs	r2, #1
 8002962:	f005 f853 	bl	8007a0c <HAL_UART_Receive>
 8002966:	1e03      	subs	r3, r0, #0
 8002968:	d100      	bne.n	800296c <main+0x520>
 800296a:	e77b      	b.n	8002864 <main+0x418>

		  		  	}
		  	  drawString(70, 70, buffer, BLACK, GREEN, 1, 1);
 800296c:	4a07      	ldr	r2, [pc, #28]	@ (800298c <main+0x540>)
 800296e:	2301      	movs	r3, #1
 8002970:	9302      	str	r3, [sp, #8]
 8002972:	2301      	movs	r3, #1
 8002974:	9301      	str	r3, [sp, #4]
 8002976:	4b0e      	ldr	r3, [pc, #56]	@ (80029b0 <main+0x564>)
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	2300      	movs	r3, #0
 800297c:	2146      	movs	r1, #70	@ 0x46
 800297e:	2046      	movs	r0, #70	@ 0x46
 8002980:	f7fe ffe0 	bl	8001944 <drawString>

		  break;
 8002984:	46c0      	nop			@ (mov r8, r8)
	  switch(currentMenu){
 8002986:	e5a6      	b.n	80024d6 <main+0x8a>
 8002988:	20000576 	.word	0x20000576
 800298c:	200005c8 	.word	0x200005c8
 8002990:	200005c9 	.word	0x200005c9
 8002994:	20000580 	.word	0x20000580
 8002998:	20000594 	.word	0x20000594
 800299c:	20000648 	.word	0x20000648
 80029a0:	2000059c 	.word	0x2000059c
 80029a4:	2000064c 	.word	0x2000064c
 80029a8:	42c80000 	.word	0x42c80000
 80029ac:	080093c0 	.word	0x080093c0
 80029b0:	ffffe007 	.word	0xffffe007
 80029b4:	20000578 	.word	0x20000578
 80029b8:	0000ffff 	.word	0x0000ffff
 80029bc:	200007f8 	.word	0x200007f8

080029c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029c0:	b590      	push	{r4, r7, lr}
 80029c2:	b095      	sub	sp, #84	@ 0x54
 80029c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029c6:	2414      	movs	r4, #20
 80029c8:	193b      	adds	r3, r7, r4
 80029ca:	0018      	movs	r0, r3
 80029cc:	233c      	movs	r3, #60	@ 0x3c
 80029ce:	001a      	movs	r2, r3
 80029d0:	2100      	movs	r1, #0
 80029d2:	f006 f85d 	bl	8008a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029d6:	1d3b      	adds	r3, r7, #4
 80029d8:	0018      	movs	r0, r3
 80029da:	2310      	movs	r3, #16
 80029dc:	001a      	movs	r2, r3
 80029de:	2100      	movs	r1, #0
 80029e0:	f006 f856 	bl	8008a90 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029e4:	2380      	movs	r3, #128	@ 0x80
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	0018      	movs	r0, r3
 80029ea:	f002 fa91 	bl	8004f10 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80029ee:	193b      	adds	r3, r7, r4
 80029f0:	220a      	movs	r2, #10
 80029f2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029f4:	193b      	adds	r3, r7, r4
 80029f6:	2280      	movs	r2, #128	@ 0x80
 80029f8:	0052      	lsls	r2, r2, #1
 80029fa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80029fc:	0021      	movs	r1, r4
 80029fe:	187b      	adds	r3, r7, r1
 8002a00:	2200      	movs	r2, #0
 8002a02:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a04:	187b      	adds	r3, r7, r1
 8002a06:	2240      	movs	r2, #64	@ 0x40
 8002a08:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002a0a:	187b      	adds	r3, r7, r1
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a10:	187b      	adds	r3, r7, r1
 8002a12:	2202      	movs	r2, #2
 8002a14:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a16:	187b      	adds	r3, r7, r1
 8002a18:	2202      	movs	r2, #2
 8002a1a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002a1c:	187b      	adds	r3, r7, r1
 8002a1e:	2200      	movs	r2, #0
 8002a20:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002a22:	187b      	adds	r3, r7, r1
 8002a24:	2208      	movs	r2, #8
 8002a26:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a28:	187b      	adds	r3, r7, r1
 8002a2a:	2280      	movs	r2, #128	@ 0x80
 8002a2c:	0292      	lsls	r2, r2, #10
 8002a2e:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002a30:	187b      	adds	r3, r7, r1
 8002a32:	2280      	movs	r2, #128	@ 0x80
 8002a34:	0492      	lsls	r2, r2, #18
 8002a36:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002a38:	187b      	adds	r3, r7, r1
 8002a3a:	2280      	movs	r2, #128	@ 0x80
 8002a3c:	0592      	lsls	r2, r2, #22
 8002a3e:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a40:	187b      	adds	r3, r7, r1
 8002a42:	0018      	movs	r0, r3
 8002a44:	f002 fab0 	bl	8004fa8 <HAL_RCC_OscConfig>
 8002a48:	1e03      	subs	r3, r0, #0
 8002a4a:	d001      	beq.n	8002a50 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002a4c:	f000 fa68 	bl	8002f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	2207      	movs	r2, #7
 8002a54:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a56:	1d3b      	adds	r3, r7, #4
 8002a58:	2202      	movs	r2, #2
 8002a5a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a5c:	1d3b      	adds	r3, r7, #4
 8002a5e:	2200      	movs	r2, #0
 8002a60:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a62:	1d3b      	adds	r3, r7, #4
 8002a64:	2200      	movs	r2, #0
 8002a66:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a68:	1d3b      	adds	r3, r7, #4
 8002a6a:	2102      	movs	r1, #2
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f002 fdfb 	bl	8005668 <HAL_RCC_ClockConfig>
 8002a72:	1e03      	subs	r3, r0, #0
 8002a74:	d001      	beq.n	8002a7a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8002a76:	f000 fa53 	bl	8002f20 <Error_Handler>
  }
}
 8002a7a:	46c0      	nop			@ (mov r8, r8)
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b015      	add	sp, #84	@ 0x54
 8002a80:	bd90      	pop	{r4, r7, pc}
	...

08002a84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002a88:	4b1b      	ldr	r3, [pc, #108]	@ (8002af8 <MX_I2C1_Init+0x74>)
 8002a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8002afc <MX_I2C1_Init+0x78>)
 8002a8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8002a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002af8 <MX_I2C1_Init+0x74>)
 8002a90:	4a1b      	ldr	r2, [pc, #108]	@ (8002b00 <MX_I2C1_Init+0x7c>)
 8002a92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002a94:	4b18      	ldr	r3, [pc, #96]	@ (8002af8 <MX_I2C1_Init+0x74>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a9a:	4b17      	ldr	r3, [pc, #92]	@ (8002af8 <MX_I2C1_Init+0x74>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002aa0:	4b15      	ldr	r3, [pc, #84]	@ (8002af8 <MX_I2C1_Init+0x74>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002aa6:	4b14      	ldr	r3, [pc, #80]	@ (8002af8 <MX_I2C1_Init+0x74>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002aac:	4b12      	ldr	r3, [pc, #72]	@ (8002af8 <MX_I2C1_Init+0x74>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ab2:	4b11      	ldr	r3, [pc, #68]	@ (8002af8 <MX_I2C1_Init+0x74>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8002af8 <MX_I2C1_Init+0x74>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002abe:	4b0e      	ldr	r3, [pc, #56]	@ (8002af8 <MX_I2C1_Init+0x74>)
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f001 fbe1 	bl	8004288 <HAL_I2C_Init>
 8002ac6:	1e03      	subs	r3, r0, #0
 8002ac8:	d001      	beq.n	8002ace <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002aca:	f000 fa29 	bl	8002f20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ace:	4b0a      	ldr	r3, [pc, #40]	@ (8002af8 <MX_I2C1_Init+0x74>)
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f002 f984 	bl	8004de0 <HAL_I2CEx_ConfigAnalogFilter>
 8002ad8:	1e03      	subs	r3, r0, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002adc:	f000 fa20 	bl	8002f20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ae0:	4b05      	ldr	r3, [pc, #20]	@ (8002af8 <MX_I2C1_Init+0x74>)
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f002 f9c7 	bl	8004e78 <HAL_I2CEx_ConfigDigitalFilter>
 8002aea:	1e03      	subs	r3, r0, #0
 8002aec:	d001      	beq.n	8002af2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002aee:	f000 fa17 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002af2:	46c0      	nop			@ (mov r8, r8)
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	200006c8 	.word	0x200006c8
 8002afc:	40005400 	.word	0x40005400
 8002b00:	10b17db5 	.word	0x10b17db5

08002b04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b08:	4b1c      	ldr	r3, [pc, #112]	@ (8002b7c <MX_SPI1_Init+0x78>)
 8002b0a:	4a1d      	ldr	r2, [pc, #116]	@ (8002b80 <MX_SPI1_Init+0x7c>)
 8002b0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8002b7c <MX_SPI1_Init+0x78>)
 8002b10:	2282      	movs	r2, #130	@ 0x82
 8002b12:	0052      	lsls	r2, r2, #1
 8002b14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002b16:	4b19      	ldr	r3, [pc, #100]	@ (8002b7c <MX_SPI1_Init+0x78>)
 8002b18:	2280      	movs	r2, #128	@ 0x80
 8002b1a:	0212      	lsls	r2, r2, #8
 8002b1c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b1e:	4b17      	ldr	r3, [pc, #92]	@ (8002b7c <MX_SPI1_Init+0x78>)
 8002b20:	22e0      	movs	r2, #224	@ 0xe0
 8002b22:	00d2      	lsls	r2, r2, #3
 8002b24:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b26:	4b15      	ldr	r3, [pc, #84]	@ (8002b7c <MX_SPI1_Init+0x78>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b2c:	4b13      	ldr	r3, [pc, #76]	@ (8002b7c <MX_SPI1_Init+0x78>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b32:	4b12      	ldr	r3, [pc, #72]	@ (8002b7c <MX_SPI1_Init+0x78>)
 8002b34:	2280      	movs	r2, #128	@ 0x80
 8002b36:	0092      	lsls	r2, r2, #2
 8002b38:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002b3a:	4b10      	ldr	r3, [pc, #64]	@ (8002b7c <MX_SPI1_Init+0x78>)
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b40:	4b0e      	ldr	r3, [pc, #56]	@ (8002b7c <MX_SPI1_Init+0x78>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b46:	4b0d      	ldr	r3, [pc, #52]	@ (8002b7c <MX_SPI1_Init+0x78>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b7c <MX_SPI1_Init+0x78>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002b52:	4b0a      	ldr	r3, [pc, #40]	@ (8002b7c <MX_SPI1_Init+0x78>)
 8002b54:	2207      	movs	r2, #7
 8002b56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b58:	4b08      	ldr	r3, [pc, #32]	@ (8002b7c <MX_SPI1_Init+0x78>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b5e:	4b07      	ldr	r3, [pc, #28]	@ (8002b7c <MX_SPI1_Init+0x78>)
 8002b60:	2208      	movs	r2, #8
 8002b62:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b64:	4b05      	ldr	r3, [pc, #20]	@ (8002b7c <MX_SPI1_Init+0x78>)
 8002b66:	0018      	movs	r0, r3
 8002b68:	f003 fc1c 	bl	80063a4 <HAL_SPI_Init>
 8002b6c:	1e03      	subs	r3, r0, #0
 8002b6e:	d001      	beq.n	8002b74 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8002b70:	f000 f9d6 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b74:	46c0      	nop			@ (mov r8, r8)
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	46c0      	nop			@ (mov r8, r8)
 8002b7c:	20000748 	.word	0x20000748
 8002b80:	40013000 	.word	0x40013000

08002b84 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b094      	sub	sp, #80	@ 0x50
 8002b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b8a:	2334      	movs	r3, #52	@ 0x34
 8002b8c:	18fb      	adds	r3, r7, r3
 8002b8e:	0018      	movs	r0, r3
 8002b90:	231c      	movs	r3, #28
 8002b92:	001a      	movs	r2, r3
 8002b94:	2100      	movs	r1, #0
 8002b96:	f005 ff7b 	bl	8008a90 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b9a:	003b      	movs	r3, r7
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	2334      	movs	r3, #52	@ 0x34
 8002ba0:	001a      	movs	r2, r3
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	f005 ff74 	bl	8008a90 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002ba8:	4b37      	ldr	r3, [pc, #220]	@ (8002c88 <MX_TIM17_Init+0x104>)
 8002baa:	4a38      	ldr	r2, [pc, #224]	@ (8002c8c <MX_TIM17_Init+0x108>)
 8002bac:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002bae:	4b36      	ldr	r3, [pc, #216]	@ (8002c88 <MX_TIM17_Init+0x104>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb4:	4b34      	ldr	r3, [pc, #208]	@ (8002c88 <MX_TIM17_Init+0x104>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002bba:	4b33      	ldr	r3, [pc, #204]	@ (8002c88 <MX_TIM17_Init+0x104>)
 8002bbc:	4a34      	ldr	r2, [pc, #208]	@ (8002c90 <MX_TIM17_Init+0x10c>)
 8002bbe:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bc0:	4b31      	ldr	r3, [pc, #196]	@ (8002c88 <MX_TIM17_Init+0x104>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002bc6:	4b30      	ldr	r3, [pc, #192]	@ (8002c88 <MX_TIM17_Init+0x104>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bcc:	4b2e      	ldr	r3, [pc, #184]	@ (8002c88 <MX_TIM17_Init+0x104>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002bd2:	4b2d      	ldr	r3, [pc, #180]	@ (8002c88 <MX_TIM17_Init+0x104>)
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f003 ff73 	bl	8006ac0 <HAL_TIM_Base_Init>
 8002bda:	1e03      	subs	r3, r0, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8002bde:	f000 f99f 	bl	8002f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002be2:	4b29      	ldr	r3, [pc, #164]	@ (8002c88 <MX_TIM17_Init+0x104>)
 8002be4:	0018      	movs	r0, r3
 8002be6:	f003 ffc3 	bl	8006b70 <HAL_TIM_PWM_Init>
 8002bea:	1e03      	subs	r3, r0, #0
 8002bec:	d001      	beq.n	8002bf2 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8002bee:	f000 f997 	bl	8002f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bf2:	2134      	movs	r1, #52	@ 0x34
 8002bf4:	187b      	adds	r3, r7, r1
 8002bf6:	2260      	movs	r2, #96	@ 0x60
 8002bf8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002bfa:	187b      	adds	r3, r7, r1
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c00:	187b      	adds	r3, r7, r1
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c06:	187b      	adds	r3, r7, r1
 8002c08:	2200      	movs	r2, #0
 8002c0a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c0c:	187b      	adds	r3, r7, r1
 8002c0e:	2200      	movs	r2, #0
 8002c10:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c12:	187b      	adds	r3, r7, r1
 8002c14:	2200      	movs	r2, #0
 8002c16:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c18:	187b      	adds	r3, r7, r1
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c1e:	1879      	adds	r1, r7, r1
 8002c20:	4b19      	ldr	r3, [pc, #100]	@ (8002c88 <MX_TIM17_Init+0x104>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	0018      	movs	r0, r3
 8002c26:	f004 f97f 	bl	8006f28 <HAL_TIM_PWM_ConfigChannel>
 8002c2a:	1e03      	subs	r3, r0, #0
 8002c2c:	d001      	beq.n	8002c32 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8002c2e:	f000 f977 	bl	8002f20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c32:	003b      	movs	r3, r7
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c38:	003b      	movs	r3, r7
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c3e:	003b      	movs	r3, r7
 8002c40:	2200      	movs	r2, #0
 8002c42:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c44:	003b      	movs	r3, r7
 8002c46:	2200      	movs	r2, #0
 8002c48:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c4a:	003b      	movs	r3, r7
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c50:	003b      	movs	r3, r7
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	0192      	lsls	r2, r2, #6
 8002c56:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c58:	003b      	movs	r3, r7
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c5e:	003b      	movs	r3, r7
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002c64:	003a      	movs	r2, r7
 8002c66:	4b08      	ldr	r3, [pc, #32]	@ (8002c88 <MX_TIM17_Init+0x104>)
 8002c68:	0011      	movs	r1, r2
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f004 fddc 	bl	8007828 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c70:	1e03      	subs	r3, r0, #0
 8002c72:	d001      	beq.n	8002c78 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8002c74:	f000 f954 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002c78:	4b03      	ldr	r3, [pc, #12]	@ (8002c88 <MX_TIM17_Init+0x104>)
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	f000 fe74 	bl	8003968 <HAL_TIM_MspPostInit>

}
 8002c80:	46c0      	nop			@ (mov r8, r8)
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b014      	add	sp, #80	@ 0x50
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	200007ac 	.word	0x200007ac
 8002c8c:	40014800 	.word	0x40014800
 8002c90:	0000ffff 	.word	0x0000ffff

08002c94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c98:	4b23      	ldr	r3, [pc, #140]	@ (8002d28 <MX_USART1_UART_Init+0x94>)
 8002c9a:	4a24      	ldr	r2, [pc, #144]	@ (8002d2c <MX_USART1_UART_Init+0x98>)
 8002c9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002c9e:	4b22      	ldr	r3, [pc, #136]	@ (8002d28 <MX_USART1_UART_Init+0x94>)
 8002ca0:	2296      	movs	r2, #150	@ 0x96
 8002ca2:	0192      	lsls	r2, r2, #6
 8002ca4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ca6:	4b20      	ldr	r3, [pc, #128]	@ (8002d28 <MX_USART1_UART_Init+0x94>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cac:	4b1e      	ldr	r3, [pc, #120]	@ (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cba:	220c      	movs	r2, #12
 8002cbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cc4:	4b18      	ldr	r3, [pc, #96]	@ (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cca:	4b17      	ldr	r3, [pc, #92]	@ (8002d28 <MX_USART1_UART_Init+0x94>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cd0:	4b15      	ldr	r3, [pc, #84]	@ (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cd6:	4b14      	ldr	r3, [pc, #80]	@ (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002cdc:	4b12      	ldr	r3, [pc, #72]	@ (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f004 fe3e 	bl	8007960 <HAL_UART_Init>
 8002ce4:	1e03      	subs	r3, r0, #0
 8002ce6:	d001      	beq.n	8002cec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002ce8:	f000 f91a 	bl	8002f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cec:	4b0e      	ldr	r3, [pc, #56]	@ (8002d28 <MX_USART1_UART_Init+0x94>)
 8002cee:	2100      	movs	r1, #0
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f005 fd35 	bl	8008760 <HAL_UARTEx_SetTxFifoThreshold>
 8002cf6:	1e03      	subs	r3, r0, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002cfa:	f000 f911 	bl	8002f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002d28 <MX_USART1_UART_Init+0x94>)
 8002d00:	2100      	movs	r1, #0
 8002d02:	0018      	movs	r0, r3
 8002d04:	f005 fd6c 	bl	80087e0 <HAL_UARTEx_SetRxFifoThreshold>
 8002d08:	1e03      	subs	r3, r0, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d0c:	f000 f908 	bl	8002f20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d10:	4b05      	ldr	r3, [pc, #20]	@ (8002d28 <MX_USART1_UART_Init+0x94>)
 8002d12:	0018      	movs	r0, r3
 8002d14:	f005 fcea 	bl	80086ec <HAL_UARTEx_DisableFifoMode>
 8002d18:	1e03      	subs	r3, r0, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002d1c:	f000 f900 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d20:	46c0      	nop			@ (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	200007f8 	.word	0x200007f8
 8002d2c:	40013800 	.word	0x40013800

08002d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d30:	b590      	push	{r4, r7, lr}
 8002d32:	b089      	sub	sp, #36	@ 0x24
 8002d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d36:	240c      	movs	r4, #12
 8002d38:	193b      	adds	r3, r7, r4
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	2314      	movs	r3, #20
 8002d3e:	001a      	movs	r2, r3
 8002d40:	2100      	movs	r1, #0
 8002d42:	f005 fea5 	bl	8008a90 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d46:	4b2b      	ldr	r3, [pc, #172]	@ (8002df4 <MX_GPIO_Init+0xc4>)
 8002d48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8002df4 <MX_GPIO_Init+0xc4>)
 8002d4c:	2104      	movs	r1, #4
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d52:	4b28      	ldr	r3, [pc, #160]	@ (8002df4 <MX_GPIO_Init+0xc4>)
 8002d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d56:	2204      	movs	r2, #4
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d5e:	4b25      	ldr	r3, [pc, #148]	@ (8002df4 <MX_GPIO_Init+0xc4>)
 8002d60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d62:	4b24      	ldr	r3, [pc, #144]	@ (8002df4 <MX_GPIO_Init+0xc4>)
 8002d64:	2101      	movs	r1, #1
 8002d66:	430a      	orrs	r2, r1
 8002d68:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d6a:	4b22      	ldr	r3, [pc, #136]	@ (8002df4 <MX_GPIO_Init+0xc4>)
 8002d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d6e:	2201      	movs	r2, #1
 8002d70:	4013      	ands	r3, r2
 8002d72:	607b      	str	r3, [r7, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002d76:	23a0      	movs	r3, #160	@ 0xa0
 8002d78:	05db      	lsls	r3, r3, #23
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2138      	movs	r1, #56	@ 0x38
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f001 fa65 	bl	800424e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002d84:	193b      	adds	r3, r7, r4
 8002d86:	2202      	movs	r2, #2
 8002d88:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d8a:	193b      	adds	r3, r7, r4
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	193b      	adds	r3, r7, r4
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d96:	193b      	adds	r3, r7, r4
 8002d98:	4a17      	ldr	r2, [pc, #92]	@ (8002df8 <MX_GPIO_Init+0xc8>)
 8002d9a:	0019      	movs	r1, r3
 8002d9c:	0010      	movs	r0, r2
 8002d9e:	f001 f8cd 	bl	8003f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002da2:	193b      	adds	r3, r7, r4
 8002da4:	2238      	movs	r2, #56	@ 0x38
 8002da6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da8:	193b      	adds	r3, r7, r4
 8002daa:	2201      	movs	r2, #1
 8002dac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	193b      	adds	r3, r7, r4
 8002db0:	2200      	movs	r2, #0
 8002db2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db4:	193b      	adds	r3, r7, r4
 8002db6:	2200      	movs	r2, #0
 8002db8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dba:	193a      	adds	r2, r7, r4
 8002dbc:	23a0      	movs	r3, #160	@ 0xa0
 8002dbe:	05db      	lsls	r3, r3, #23
 8002dc0:	0011      	movs	r1, r2
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f001 f8ba 	bl	8003f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002dc8:	0021      	movs	r1, r4
 8002dca:	187b      	adds	r3, r7, r1
 8002dcc:	22c0      	movs	r2, #192	@ 0xc0
 8002dce:	0152      	lsls	r2, r2, #5
 8002dd0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dd2:	187b      	adds	r3, r7, r1
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	187b      	adds	r3, r7, r1
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dde:	187a      	adds	r2, r7, r1
 8002de0:	23a0      	movs	r3, #160	@ 0xa0
 8002de2:	05db      	lsls	r3, r3, #23
 8002de4:	0011      	movs	r1, r2
 8002de6:	0018      	movs	r0, r3
 8002de8:	f001 f8a8 	bl	8003f3c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002dec:	46c0      	nop			@ (mov r8, r8)
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b009      	add	sp, #36	@ 0x24
 8002df2:	bd90      	pop	{r4, r7, pc}
 8002df4:	40021000 	.word	0x40021000
 8002df8:	50000800 	.word	0x50000800

08002dfc <_ADXL343_ReadReg8>:

/* USER CODE BEGIN 4 */
int _ADXL343_ReadReg8 (unsigned char TargetRegister, unsigned char * TargetValue, uint8_t size)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	6039      	str	r1, [r7, #0]
 8002e04:	0011      	movs	r1, r2
 8002e06:	1dfb      	adds	r3, r7, #7
 8002e08:	1c02      	adds	r2, r0, #0
 8002e0a:	701a      	strb	r2, [r3, #0]
 8002e0c:	1dbb      	adds	r3, r7, #6
 8002e0e:	1c0a      	adds	r2, r1, #0
 8002e10:	701a      	strb	r2, [r3, #0]
  if (!HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, &TargetRegister, 1, 1000)==HAL_OK)
 8002e12:	1dfa      	adds	r2, r7, #7
 8002e14:	4811      	ldr	r0, [pc, #68]	@ (8002e5c <_ADXL343_ReadReg8+0x60>)
 8002e16:	23fa      	movs	r3, #250	@ 0xfa
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	2128      	movs	r1, #40	@ 0x28
 8002e20:	f001 fad8 	bl	80043d4 <HAL_I2C_Master_Transmit>
 8002e24:	1e03      	subs	r3, r0, #0
 8002e26:	d002      	beq.n	8002e2e <_ADXL343_ReadReg8+0x32>
      return -1;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	425b      	negs	r3, r3
 8002e2c:	e011      	b.n	8002e52 <_ADXL343_ReadReg8+0x56>

  if (!HAL_I2C_Master_Receive(&hi2c1, 0x14<<1, TargetValue, size, 1000)==HAL_OK)
 8002e2e:	1dbb      	adds	r3, r7, #6
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	b299      	uxth	r1, r3
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	4809      	ldr	r0, [pc, #36]	@ (8002e5c <_ADXL343_ReadReg8+0x60>)
 8002e38:	23fa      	movs	r3, #250	@ 0xfa
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	000b      	movs	r3, r1
 8002e40:	2128      	movs	r1, #40	@ 0x28
 8002e42:	f001 fbf1 	bl	8004628 <HAL_I2C_Master_Receive>
 8002e46:	1e03      	subs	r3, r0, #0
 8002e48:	d002      	beq.n	8002e50 <_ADXL343_ReadReg8+0x54>
    return -2;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	425b      	negs	r3, r3
 8002e4e:	e000      	b.n	8002e52 <_ADXL343_ReadReg8+0x56>

  return 0;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	0018      	movs	r0, r3
 8002e54:	46bd      	mov	sp, r7
 8002e56:	b002      	add	sp, #8
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	46c0      	nop			@ (mov r8, r8)
 8002e5c:	200006c8 	.word	0x200006c8

08002e60 <_ADXL343_WriteReg8>:

int _ADXL343_WriteReg8 (unsigned char TargetRegister, unsigned char TargetValue)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	0002      	movs	r2, r0
 8002e68:	1dfb      	adds	r3, r7, #7
 8002e6a:	701a      	strb	r2, [r3, #0]
 8002e6c:	1dbb      	adds	r3, r7, #6
 8002e6e:	1c0a      	adds	r2, r1, #0
 8002e70:	701a      	strb	r2, [r3, #0]
  unsigned char buff [2];
  buff[0] = TargetRegister;
 8002e72:	210c      	movs	r1, #12
 8002e74:	187b      	adds	r3, r7, r1
 8002e76:	1dfa      	adds	r2, r7, #7
 8002e78:	7812      	ldrb	r2, [r2, #0]
 8002e7a:	701a      	strb	r2, [r3, #0]
  buff[1] = TargetValue;
 8002e7c:	187b      	adds	r3, r7, r1
 8002e7e:	1dba      	adds	r2, r7, #6
 8002e80:	7812      	ldrb	r2, [r2, #0]
 8002e82:	705a      	strb	r2, [r3, #1]

  if (HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, buff, 2, 100))
 8002e84:	187a      	adds	r2, r7, r1
 8002e86:	4808      	ldr	r0, [pc, #32]	@ (8002ea8 <_ADXL343_WriteReg8+0x48>)
 8002e88:	2364      	movs	r3, #100	@ 0x64
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	2128      	movs	r1, #40	@ 0x28
 8002e90:	f001 faa0 	bl	80043d4 <HAL_I2C_Master_Transmit>
 8002e94:	1e03      	subs	r3, r0, #0
 8002e96:	d002      	beq.n	8002e9e <_ADXL343_WriteReg8+0x3e>
      return -1;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	425b      	negs	r3, r3
 8002e9c:	e000      	b.n	8002ea0 <_ADXL343_WriteReg8+0x40>

  return 0;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b004      	add	sp, #16
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	200006c8 	.word	0x200006c8

08002eac <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8002eac:	b590      	push	{r4, r7, lr}
 8002eae:	b091      	sub	sp, #68	@ 0x44
 8002eb0:	af04      	add	r7, sp, #16
 8002eb2:	6078      	str	r0, [r7, #4]
  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 8002eb4:	2380      	movs	r3, #128	@ 0x80
 8002eb6:	005a      	lsls	r2, r3, #1
 8002eb8:	2408      	movs	r4, #8
 8002eba:	1939      	adds	r1, r7, r4
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f003 f8f8 	bl	80060b4 <HAL_RTC_GetAlarm>
  if(sAlarm.AlarmTime.Seconds>58) {
 8002ec4:	0022      	movs	r2, r4
 8002ec6:	18bb      	adds	r3, r7, r2
 8002ec8:	789b      	ldrb	r3, [r3, #2]
 8002eca:	2b3a      	cmp	r3, #58	@ 0x3a
 8002ecc:	d903      	bls.n	8002ed6 <HAL_RTC_AlarmAEventCallback+0x2a>
    sAlarm.AlarmTime.Seconds=0;
 8002ece:	18bb      	adds	r3, r7, r2
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	709a      	strb	r2, [r3, #2]
 8002ed4:	e006      	b.n	8002ee4 <HAL_RTC_AlarmAEventCallback+0x38>
  }else{
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 8002ed6:	2108      	movs	r1, #8
 8002ed8:	187b      	adds	r3, r7, r1
 8002eda:	789b      	ldrb	r3, [r3, #2]
 8002edc:	3301      	adds	r3, #1
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	187b      	adds	r3, r7, r1
 8002ee2:	709a      	strb	r2, [r3, #2]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8002ee4:	46c0      	nop			@ (mov r8, r8)
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	18f9      	adds	r1, r7, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f002 ffa0 	bl	8005e34 <HAL_RTC_SetAlarm_IT>
 8002ef4:	1e03      	subs	r3, r0, #0
 8002ef6:	d1f6      	bne.n	8002ee6 <HAL_RTC_AlarmAEventCallback+0x3a>
  	  drawString(30, 30, "testTime", BLACK, GREEN, 1, 1);
 8002ef8:	4a07      	ldr	r2, [pc, #28]	@ (8002f18 <HAL_RTC_AlarmAEventCallback+0x6c>)
 8002efa:	2301      	movs	r3, #1
 8002efc:	9302      	str	r3, [sp, #8]
 8002efe:	2301      	movs	r3, #1
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <HAL_RTC_AlarmAEventCallback+0x70>)
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	2300      	movs	r3, #0
 8002f08:	211e      	movs	r1, #30
 8002f0a:	201e      	movs	r0, #30
 8002f0c:	f7fe fd1a 	bl	8001944 <drawString>
}
 8002f10:	46c0      	nop			@ (mov r8, r8)
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b00d      	add	sp, #52	@ 0x34
 8002f16:	bd90      	pop	{r4, r7, pc}
 8002f18:	080093cc 	.word	0x080093cc
 8002f1c:	ffffe007 	.word	0xffffe007

08002f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f24:	b672      	cpsid	i
}
 8002f26:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f28:	46c0      	nop			@ (mov r8, r8)
 8002f2a:	e7fd      	b.n	8002f28 <Error_Handler+0x8>

08002f2c <minmea_isfield>:
        return false;

    return true;
}

static inline bool minmea_isfield(char c) {
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	0002      	movs	r2, r0
 8002f34:	1dfb      	adds	r3, r7, #7
 8002f36:	701a      	strb	r2, [r3, #0]
    return isprint((unsigned char) c) && c != ',' && c != '*';
 8002f38:	1dfb      	adds	r3, r7, #7
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f74 <minmea_isfield+0x48>)
 8002f40:	18d3      	adds	r3, r2, r3
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	001a      	movs	r2, r3
 8002f46:	2397      	movs	r3, #151	@ 0x97
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d009      	beq.n	8002f60 <minmea_isfield+0x34>
 8002f4c:	1dfb      	adds	r3, r7, #7
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b2c      	cmp	r3, #44	@ 0x2c
 8002f52:	d005      	beq.n	8002f60 <minmea_isfield+0x34>
 8002f54:	1dfb      	adds	r3, r7, #7
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f5a:	d001      	beq.n	8002f60 <minmea_isfield+0x34>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e000      	b.n	8002f62 <minmea_isfield+0x36>
 8002f60:	2300      	movs	r3, #0
 8002f62:	1c1a      	adds	r2, r3, #0
 8002f64:	2301      	movs	r3, #1
 8002f66:	4013      	ands	r3, r2
 8002f68:	b2db      	uxtb	r3, r3
}
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	b002      	add	sp, #8
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	46c0      	nop			@ (mov r8, r8)
 8002f74:	08009bdc 	.word	0x08009bdc

08002f78 <minmea_scan>:

bool minmea_scan(const char *sentence, const char *format, ...)
{
 8002f78:	b40e      	push	{r1, r2, r3}
 8002f7a:	b5b0      	push	{r4, r5, r7, lr}
 8002f7c:	b0a7      	sub	sp, #156	@ 0x9c
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
    bool result = false;
 8002f82:	2397      	movs	r3, #151	@ 0x97
 8002f84:	18fb      	adds	r3, r7, r3
 8002f86:	2200      	movs	r2, #0
 8002f88:	701a      	strb	r2, [r3, #0]
    bool optional = false;
 8002f8a:	2396      	movs	r3, #150	@ 0x96
 8002f8c:	18fb      	adds	r3, r7, r3
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]
    va_list ap;
    va_start(ap, format);
 8002f92:	23a8      	movs	r3, #168	@ 0xa8
 8002f94:	2208      	movs	r2, #8
 8002f96:	189b      	adds	r3, r3, r2
 8002f98:	19db      	adds	r3, r3, r7
 8002f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    const char *field = sentence;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2290      	movs	r2, #144	@ 0x90
 8002fa0:	18ba      	adds	r2, r7, r2
 8002fa2:	6013      	str	r3, [r2, #0]
        } else { \
            field = NULL; \
        } \
    } while (0)

    while (*format) {
 8002fa4:	e345      	b.n	8003632 <minmea_scan+0x6ba>
        char type = *format++;
 8002fa6:	21a4      	movs	r1, #164	@ 0xa4
 8002fa8:	2008      	movs	r0, #8
 8002faa:	180b      	adds	r3, r1, r0
 8002fac:	19db      	adds	r3, r3, r7
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	1c5a      	adds	r2, r3, #1
 8002fb2:	1809      	adds	r1, r1, r0
 8002fb4:	19c9      	adds	r1, r1, r7
 8002fb6:	600a      	str	r2, [r1, #0]
 8002fb8:	2143      	movs	r1, #67	@ 0x43
 8002fba:	187a      	adds	r2, r7, r1
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	7013      	strb	r3, [r2, #0]

        if (type == ';') {
 8002fc0:	187b      	adds	r3, r7, r1
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b3b      	cmp	r3, #59	@ 0x3b
 8002fc6:	d104      	bne.n	8002fd2 <minmea_scan+0x5a>
            // All further fields are optional.
            optional = true;
 8002fc8:	2396      	movs	r3, #150	@ 0x96
 8002fca:	18fb      	adds	r3, r7, r3
 8002fcc:	2201      	movs	r2, #1
 8002fce:	701a      	strb	r2, [r3, #0]
            continue;
 8002fd0:	e32f      	b.n	8003632 <minmea_scan+0x6ba>
        }

        if (!field && !optional) {
 8002fd2:	2390      	movs	r3, #144	@ 0x90
 8002fd4:	18fb      	adds	r3, r7, r3
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d108      	bne.n	8002fee <minmea_scan+0x76>
 8002fdc:	2396      	movs	r3, #150	@ 0x96
 8002fde:	18fb      	adds	r3, r7, r3
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	4053      	eors	r3, r2
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d000      	beq.n	8002fee <minmea_scan+0x76>
 8002fec:	e32f      	b.n	800364e <minmea_scan+0x6d6>
            // Field requested but we ran out if input. Bail out.
            goto parse_error;
        }

        switch (type) {
 8002fee:	2343      	movs	r3, #67	@ 0x43
 8002ff0:	18fb      	adds	r3, r7, r3
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	3b44      	subs	r3, #68	@ 0x44
 8002ff6:	2b30      	cmp	r3, #48	@ 0x30
 8002ff8:	d900      	bls.n	8002ffc <minmea_scan+0x84>
 8002ffa:	e32a      	b.n	8003652 <minmea_scan+0x6da>
 8002ffc:	009a      	lsls	r2, r3, #2
 8002ffe:	4bbd      	ldr	r3, [pc, #756]	@ (80032f4 <minmea_scan+0x37c>)
 8003000:	18d3      	adds	r3, r2, r3
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	469f      	mov	pc, r3
            case 'c': { // Single character field (char).
                char value = '\0';
 8003006:	258f      	movs	r5, #143	@ 0x8f
 8003008:	197b      	adds	r3, r7, r5
 800300a:	2200      	movs	r2, #0
 800300c:	701a      	strb	r2, [r3, #0]

                if (field && minmea_isfield(*field))
 800300e:	2490      	movs	r4, #144	@ 0x90
 8003010:	193b      	adds	r3, r7, r4
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00c      	beq.n	8003032 <minmea_scan+0xba>
 8003018:	193b      	adds	r3, r7, r4
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	0018      	movs	r0, r3
 8003020:	f7ff ff84 	bl	8002f2c <minmea_isfield>
 8003024:	1e03      	subs	r3, r0, #0
 8003026:	d004      	beq.n	8003032 <minmea_scan+0xba>
                    value = *field;
 8003028:	197b      	adds	r3, r7, r5
 800302a:	193a      	adds	r2, r7, r4
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	7812      	ldrb	r2, [r2, #0]
 8003030:	701a      	strb	r2, [r3, #0]

                *va_arg(ap, char *) = value;
 8003032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003034:	1d1a      	adds	r2, r3, #4
 8003036:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	228f      	movs	r2, #143	@ 0x8f
 800303c:	18ba      	adds	r2, r7, r2
 800303e:	7812      	ldrb	r2, [r2, #0]
 8003040:	701a      	strb	r2, [r3, #0]
            } break;
 8003042:	e2db      	b.n	80035fc <minmea_scan+0x684>

            case 'd': { // Single character direction field (int).
                int value = 0;
 8003044:	2300      	movs	r3, #0
 8003046:	2288      	movs	r2, #136	@ 0x88
 8003048:	18ba      	adds	r2, r7, r2
 800304a:	6013      	str	r3, [r2, #0]

                if (field && minmea_isfield(*field)) {
 800304c:	2490      	movs	r4, #144	@ 0x90
 800304e:	193b      	adds	r3, r7, r4
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d022      	beq.n	800309c <minmea_scan+0x124>
 8003056:	193b      	adds	r3, r7, r4
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	0018      	movs	r0, r3
 800305e:	f7ff ff65 	bl	8002f2c <minmea_isfield>
 8003062:	1e03      	subs	r3, r0, #0
 8003064:	d01a      	beq.n	800309c <minmea_scan+0x124>
                    switch (*field) {
 8003066:	193b      	adds	r3, r7, r4
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b57      	cmp	r3, #87	@ 0x57
 800306e:	d00f      	beq.n	8003090 <minmea_scan+0x118>
 8003070:	dd00      	ble.n	8003074 <minmea_scan+0xfc>
 8003072:	e2f0      	b.n	8003656 <minmea_scan+0x6de>
 8003074:	2b53      	cmp	r3, #83	@ 0x53
 8003076:	d00b      	beq.n	8003090 <minmea_scan+0x118>
 8003078:	dd00      	ble.n	800307c <minmea_scan+0x104>
 800307a:	e2ec      	b.n	8003656 <minmea_scan+0x6de>
 800307c:	2b45      	cmp	r3, #69	@ 0x45
 800307e:	d002      	beq.n	8003086 <minmea_scan+0x10e>
 8003080:	2b4e      	cmp	r3, #78	@ 0x4e
 8003082:	d000      	beq.n	8003086 <minmea_scan+0x10e>
 8003084:	e2e7      	b.n	8003656 <minmea_scan+0x6de>
                        case 'N':
                        case 'E':
                            value = 1;
 8003086:	2301      	movs	r3, #1
 8003088:	2288      	movs	r2, #136	@ 0x88
 800308a:	18ba      	adds	r2, r7, r2
 800308c:	6013      	str	r3, [r2, #0]
                            break;
 800308e:	e005      	b.n	800309c <minmea_scan+0x124>
                        case 'S':
                        case 'W':
                            value = -1;
 8003090:	2301      	movs	r3, #1
 8003092:	425b      	negs	r3, r3
 8003094:	2288      	movs	r2, #136	@ 0x88
 8003096:	18ba      	adds	r2, r7, r2
 8003098:	6013      	str	r3, [r2, #0]
                            break;
 800309a:	46c0      	nop			@ (mov r8, r8)
                        default:
                            goto parse_error;
                    }
                }

                *va_arg(ap, int *) = value;
 800309c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800309e:	1d1a      	adds	r2, r3, #4
 80030a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2288      	movs	r2, #136	@ 0x88
 80030a6:	18ba      	adds	r2, r7, r2
 80030a8:	6812      	ldr	r2, [r2, #0]
 80030aa:	601a      	str	r2, [r3, #0]
            } break;
 80030ac:	e2a6      	b.n	80035fc <minmea_scan+0x684>

            case 'f': { // Fractional value with scale (struct minmea_float).
                int sign = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	2284      	movs	r2, #132	@ 0x84
 80030b2:	18ba      	adds	r2, r7, r2
 80030b4:	6013      	str	r3, [r2, #0]
                int_least32_t value = -1;
 80030b6:	2301      	movs	r3, #1
 80030b8:	425b      	negs	r3, r3
 80030ba:	2280      	movs	r2, #128	@ 0x80
 80030bc:	18ba      	adds	r2, r7, r2
 80030be:	6013      	str	r3, [r2, #0]
                int_least32_t scale = 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	67fb      	str	r3, [r7, #124]	@ 0x7c

                if (field) {
 80030c4:	2390      	movs	r3, #144	@ 0x90
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d100      	bne.n	80030d0 <minmea_scan+0x158>
 80030ce:	e088      	b.n	80031e2 <minmea_scan+0x26a>
                    while (minmea_isfield(*field)) {
 80030d0:	e07d      	b.n	80031ce <minmea_scan+0x256>
                        if (*field == '+' && !sign && value == -1) {
 80030d2:	2390      	movs	r3, #144	@ 0x90
 80030d4:	18fb      	adds	r3, r7, r3
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b2b      	cmp	r3, #43	@ 0x2b
 80030dc:	d10d      	bne.n	80030fa <minmea_scan+0x182>
 80030de:	2284      	movs	r2, #132	@ 0x84
 80030e0:	18bb      	adds	r3, r7, r2
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d108      	bne.n	80030fa <minmea_scan+0x182>
 80030e8:	2380      	movs	r3, #128	@ 0x80
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	3301      	adds	r3, #1
 80030f0:	d103      	bne.n	80030fa <minmea_scan+0x182>
                            sign = 1;
 80030f2:	2301      	movs	r3, #1
 80030f4:	18ba      	adds	r2, r7, r2
 80030f6:	6013      	str	r3, [r2, #0]
 80030f8:	e063      	b.n	80031c2 <minmea_scan+0x24a>
                        } else if (*field == '-' && !sign && value == -1) {
 80030fa:	2390      	movs	r3, #144	@ 0x90
 80030fc:	18fb      	adds	r3, r7, r3
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b2d      	cmp	r3, #45	@ 0x2d
 8003104:	d10e      	bne.n	8003124 <minmea_scan+0x1ac>
 8003106:	2284      	movs	r2, #132	@ 0x84
 8003108:	18bb      	adds	r3, r7, r2
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d109      	bne.n	8003124 <minmea_scan+0x1ac>
 8003110:	2380      	movs	r3, #128	@ 0x80
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	3301      	adds	r3, #1
 8003118:	d104      	bne.n	8003124 <minmea_scan+0x1ac>
                            sign = -1;
 800311a:	2301      	movs	r3, #1
 800311c:	425b      	negs	r3, r3
 800311e:	18ba      	adds	r2, r7, r2
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	e04e      	b.n	80031c2 <minmea_scan+0x24a>
                        } else if (isdigit((unsigned char) *field)) {
 8003124:	2190      	movs	r1, #144	@ 0x90
 8003126:	187b      	adds	r3, r7, r1
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	4b72      	ldr	r3, [pc, #456]	@ (80032f8 <minmea_scan+0x380>)
 8003130:	18d3      	adds	r3, r2, r3
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	001a      	movs	r2, r3
 8003136:	2304      	movs	r3, #4
 8003138:	4013      	ands	r3, r2
 800313a:	d035      	beq.n	80031a8 <minmea_scan+0x230>
                            int digit = *field - '0';
 800313c:	187b      	adds	r3, r7, r1
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	3b30      	subs	r3, #48	@ 0x30
 8003144:	63bb      	str	r3, [r7, #56]	@ 0x38
                            if (value == -1)
 8003146:	2280      	movs	r2, #128	@ 0x80
 8003148:	18bb      	adds	r3, r7, r2
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	3301      	adds	r3, #1
 800314e:	d102      	bne.n	8003156 <minmea_scan+0x1de>
                                value = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	18ba      	adds	r2, r7, r2
 8003154:	6013      	str	r3, [r2, #0]
                            if (value > (INT_LEAST32_MAX-digit) / 10) {
 8003156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003158:	4a68      	ldr	r2, [pc, #416]	@ (80032fc <minmea_scan+0x384>)
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	210a      	movs	r1, #10
 800315e:	0018      	movs	r0, r3
 8003160:	f7fd f86e 	bl	8000240 <__divsi3>
 8003164:	0003      	movs	r3, r0
 8003166:	001a      	movs	r2, r3
 8003168:	2380      	movs	r3, #128	@ 0x80
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4293      	cmp	r3, r2
 8003170:	dd04      	ble.n	800317c <minmea_scan+0x204>
                                /* we ran out of bits, what do we do? */
                                if (scale) {
 8003172:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003174:	2b00      	cmp	r3, #0
 8003176:	d100      	bne.n	800317a <minmea_scan+0x202>
 8003178:	e26f      	b.n	800365a <minmea_scan+0x6e2>
                                    /* truncate extra precision */
                                    break;
 800317a:	e032      	b.n	80031e2 <minmea_scan+0x26a>
                                } else {
                                    /* integer overflow. bail out. */
                                    goto parse_error;
                                }
                            }
                            value = (10 * value) + digit;
 800317c:	2180      	movs	r1, #128	@ 0x80
 800317e:	187b      	adds	r3, r7, r1
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	0013      	movs	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	189b      	adds	r3, r3, r2
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	001a      	movs	r2, r3
 800318c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800318e:	189b      	adds	r3, r3, r2
 8003190:	187a      	adds	r2, r7, r1
 8003192:	6013      	str	r3, [r2, #0]
                            if (scale)
 8003194:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003196:	2b00      	cmp	r3, #0
 8003198:	d013      	beq.n	80031c2 <minmea_scan+0x24a>
                                scale *= 10;
 800319a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800319c:	0013      	movs	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	189b      	adds	r3, r3, r2
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80031a6:	e00c      	b.n	80031c2 <minmea_scan+0x24a>
                        } else if (*field == '.' && scale == 0) {
 80031a8:	2390      	movs	r3, #144	@ 0x90
 80031aa:	18fb      	adds	r3, r7, r3
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80031b2:	d000      	beq.n	80031b6 <minmea_scan+0x23e>
 80031b4:	e253      	b.n	800365e <minmea_scan+0x6e6>
 80031b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d000      	beq.n	80031be <minmea_scan+0x246>
 80031bc:	e24f      	b.n	800365e <minmea_scan+0x6e6>
                            scale = 1;
 80031be:	2301      	movs	r3, #1
 80031c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
                        } else {
                            goto parse_error;
                        }
                        field++;
 80031c2:	2290      	movs	r2, #144	@ 0x90
 80031c4:	18bb      	adds	r3, r7, r2
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3301      	adds	r3, #1
 80031ca:	18ba      	adds	r2, r7, r2
 80031cc:	6013      	str	r3, [r2, #0]
                    while (minmea_isfield(*field)) {
 80031ce:	2390      	movs	r3, #144	@ 0x90
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	0018      	movs	r0, r3
 80031d8:	f7ff fea8 	bl	8002f2c <minmea_isfield>
 80031dc:	1e03      	subs	r3, r0, #0
 80031de:	d000      	beq.n	80031e2 <minmea_scan+0x26a>
 80031e0:	e777      	b.n	80030d2 <minmea_scan+0x15a>
                    }
                }

                if ((sign || scale) && value == -1)
 80031e2:	2384      	movs	r3, #132	@ 0x84
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d102      	bne.n	80031f2 <minmea_scan+0x27a>
 80031ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <minmea_scan+0x286>
 80031f2:	2380      	movs	r3, #128	@ 0x80
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3301      	adds	r3, #1
 80031fa:	d100      	bne.n	80031fe <minmea_scan+0x286>
 80031fc:	e231      	b.n	8003662 <minmea_scan+0x6ea>
                    goto parse_error;

                if (value == -1) {
 80031fe:	2280      	movs	r2, #128	@ 0x80
 8003200:	18bb      	adds	r3, r7, r2
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3301      	adds	r3, #1
 8003206:	d105      	bne.n	8003214 <minmea_scan+0x29c>
                    /* No digits were scanned. */
                    value = 0;
 8003208:	2300      	movs	r3, #0
 800320a:	18ba      	adds	r2, r7, r2
 800320c:	6013      	str	r3, [r2, #0]
                    scale = 0;
 800320e:	2300      	movs	r3, #0
 8003210:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003212:	e004      	b.n	800321e <minmea_scan+0x2a6>
                } else if (scale == 0) {
 8003214:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <minmea_scan+0x2a6>
                    /* No decimal point. */
                    scale = 1;
 800321a:	2301      	movs	r3, #1
 800321c:	67fb      	str	r3, [r7, #124]	@ 0x7c
                }
                if (sign)
 800321e:	2284      	movs	r2, #132	@ 0x84
 8003220:	18bb      	adds	r3, r7, r2
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d007      	beq.n	8003238 <minmea_scan+0x2c0>
                    value *= sign;
 8003228:	2180      	movs	r1, #128	@ 0x80
 800322a:	187b      	adds	r3, r7, r1
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	18ba      	adds	r2, r7, r2
 8003230:	6812      	ldr	r2, [r2, #0]
 8003232:	4353      	muls	r3, r2
 8003234:	187a      	adds	r2, r7, r1
 8003236:	6013      	str	r3, [r2, #0]

                *va_arg(ap, struct minmea_float *) = (struct minmea_float) {value, scale};
 8003238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800323a:	1d1a      	adds	r2, r3, #4
 800323c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2280      	movs	r2, #128	@ 0x80
 8003242:	18ba      	adds	r2, r7, r2
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800324a:	605a      	str	r2, [r3, #4]
            } break;
 800324c:	e1d6      	b.n	80035fc <minmea_scan+0x684>

            case 'i': { // Integer value, default 0 (int).
                int value = 0;
 800324e:	2300      	movs	r3, #0
 8003250:	67bb      	str	r3, [r7, #120]	@ 0x78

                if (field) {
 8003252:	2290      	movs	r2, #144	@ 0x90
 8003254:	18bb      	adds	r3, r7, r2
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d011      	beq.n	8003280 <minmea_scan+0x308>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 800325c:	2320      	movs	r3, #32
 800325e:	18f9      	adds	r1, r7, r3
 8003260:	18bb      	adds	r3, r7, r2
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	220a      	movs	r2, #10
 8003266:	0018      	movs	r0, r3
 8003268:	f005 fbe4 	bl	8008a34 <strtol>
 800326c:	0003      	movs	r3, r0
 800326e:	67bb      	str	r3, [r7, #120]	@ 0x78
                    if (minmea_isfield(*endptr))
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	0018      	movs	r0, r3
 8003276:	f7ff fe59 	bl	8002f2c <minmea_isfield>
 800327a:	1e03      	subs	r3, r0, #0
 800327c:	d000      	beq.n	8003280 <minmea_scan+0x308>
 800327e:	e1f2      	b.n	8003666 <minmea_scan+0x6ee>
                        goto parse_error;
                }

                *va_arg(ap, int *) = value;
 8003280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003282:	1d1a      	adds	r2, r3, #4
 8003284:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800328a:	601a      	str	r2, [r3, #0]
            } break;
 800328c:	e1b6      	b.n	80035fc <minmea_scan+0x684>

            case 's': { // String value (char *).
                char *buf = va_arg(ap, char *);
 800328e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003290:	1d1a      	adds	r2, r3, #4
 8003292:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	677b      	str	r3, [r7, #116]	@ 0x74

                if (field) {
 8003298:	2390      	movs	r3, #144	@ 0x90
 800329a:	18fb      	adds	r3, r7, r3
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d014      	beq.n	80032cc <minmea_scan+0x354>
                    while (minmea_isfield(*field))
 80032a2:	e00a      	b.n	80032ba <minmea_scan+0x342>
                        *buf++ = *field++;
 80032a4:	2190      	movs	r1, #144	@ 0x90
 80032a6:	187b      	adds	r3, r7, r1
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	1c53      	adds	r3, r2, #1
 80032ac:	1879      	adds	r1, r7, r1
 80032ae:	600b      	str	r3, [r1, #0]
 80032b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032b2:	1c59      	adds	r1, r3, #1
 80032b4:	6779      	str	r1, [r7, #116]	@ 0x74
 80032b6:	7812      	ldrb	r2, [r2, #0]
 80032b8:	701a      	strb	r2, [r3, #0]
                    while (minmea_isfield(*field))
 80032ba:	2390      	movs	r3, #144	@ 0x90
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	0018      	movs	r0, r3
 80032c4:	f7ff fe32 	bl	8002f2c <minmea_isfield>
 80032c8:	1e03      	subs	r3, r0, #0
 80032ca:	d1eb      	bne.n	80032a4 <minmea_scan+0x32c>
                }

                *buf = '\0';
 80032cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032ce:	2200      	movs	r2, #0
 80032d0:	701a      	strb	r2, [r3, #0]
            } break;
 80032d2:	e193      	b.n	80035fc <minmea_scan+0x684>

            case 't': { // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field)
 80032d4:	2290      	movs	r2, #144	@ 0x90
 80032d6:	18bb      	adds	r3, r7, r2
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d100      	bne.n	80032e0 <minmea_scan+0x368>
 80032de:	e1c4      	b.n	800366a <minmea_scan+0x6f2>
                    goto parse_error;

                if (field[0] != '$')
 80032e0:	18bb      	adds	r3, r7, r2
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b24      	cmp	r3, #36	@ 0x24
 80032e8:	d000      	beq.n	80032ec <minmea_scan+0x374>
 80032ea:	e1c0      	b.n	800366e <minmea_scan+0x6f6>
                    goto parse_error;
                for (int i=0; i<5; i++)
 80032ec:	2300      	movs	r3, #0
 80032ee:	673b      	str	r3, [r7, #112]	@ 0x70
 80032f0:	e01c      	b.n	800332c <minmea_scan+0x3b4>
 80032f2:	46c0      	nop			@ (mov r8, r8)
 80032f4:	08009a3c 	.word	0x08009a3c
 80032f8:	08009bdc 	.word	0x08009bdc
 80032fc:	7fffffff 	.word	0x7fffffff
                    if (!minmea_isfield(field[1+i]))
 8003300:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003302:	3301      	adds	r3, #1
 8003304:	001a      	movs	r2, r3
 8003306:	2390      	movs	r3, #144	@ 0x90
 8003308:	18fb      	adds	r3, r7, r3
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	189b      	adds	r3, r3, r2
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	0018      	movs	r0, r3
 8003312:	f7ff fe0b 	bl	8002f2c <minmea_isfield>
 8003316:	0003      	movs	r3, r0
 8003318:	001a      	movs	r2, r3
 800331a:	2301      	movs	r3, #1
 800331c:	4053      	eors	r3, r2
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d000      	beq.n	8003326 <minmea_scan+0x3ae>
 8003324:	e1a5      	b.n	8003672 <minmea_scan+0x6fa>
                for (int i=0; i<5; i++)
 8003326:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003328:	3301      	adds	r3, #1
 800332a:	673b      	str	r3, [r7, #112]	@ 0x70
 800332c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800332e:	2b04      	cmp	r3, #4
 8003330:	dde6      	ble.n	8003300 <minmea_scan+0x388>
                        goto parse_error;

                char *buf = va_arg(ap, char *);
 8003332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003334:	1d1a      	adds	r2, r3, #4
 8003336:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                memcpy(buf, field+1, 5);
 800333c:	2390      	movs	r3, #144	@ 0x90
 800333e:	18fb      	adds	r3, r7, r3
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	1c59      	adds	r1, r3, #1
 8003344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003346:	2205      	movs	r2, #5
 8003348:	0018      	movs	r0, r3
 800334a:	f005 fbd5 	bl	8008af8 <memcpy>
                buf[5] = '\0';
 800334e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003350:	3305      	adds	r3, #5
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]
            } break;
 8003356:	e151      	b.n	80035fc <minmea_scan+0x684>

            case 'D': { // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 8003358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335a:	1d1a      	adds	r2, r3, #4
 800335c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	633b      	str	r3, [r7, #48]	@ 0x30

                int d = -1, m = -1, y = -1;
 8003362:	2301      	movs	r3, #1
 8003364:	425b      	negs	r3, r3
 8003366:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003368:	2301      	movs	r3, #1
 800336a:	425b      	negs	r3, r3
 800336c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800336e:	2301      	movs	r3, #1
 8003370:	425b      	negs	r3, r3
 8003372:	667b      	str	r3, [r7, #100]	@ 0x64

                if (field && minmea_isfield(*field)) {
 8003374:	2290      	movs	r2, #144	@ 0x90
 8003376:	18bb      	adds	r3, r7, r2
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d067      	beq.n	800344e <minmea_scan+0x4d6>
 800337e:	18bb      	adds	r3, r7, r2
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	0018      	movs	r0, r3
 8003386:	f7ff fdd1 	bl	8002f2c <minmea_isfield>
 800338a:	1e03      	subs	r3, r0, #0
 800338c:	d05f      	beq.n	800344e <minmea_scan+0x4d6>
                    // Always six digits.
                    for (int i=0; i<6; i++)
 800338e:	2300      	movs	r3, #0
 8003390:	663b      	str	r3, [r7, #96]	@ 0x60
 8003392:	e011      	b.n	80033b8 <minmea_scan+0x440>
                        if (!isdigit((unsigned char) field[i]))
 8003394:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003396:	2290      	movs	r2, #144	@ 0x90
 8003398:	18ba      	adds	r2, r7, r2
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	18d3      	adds	r3, r2, r3
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	4bbb      	ldr	r3, [pc, #748]	@ (8003690 <minmea_scan+0x718>)
 80033a4:	18d3      	adds	r3, r2, r3
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	001a      	movs	r2, r3
 80033aa:	2304      	movs	r3, #4
 80033ac:	4013      	ands	r3, r2
 80033ae:	d100      	bne.n	80033b2 <minmea_scan+0x43a>
 80033b0:	e161      	b.n	8003676 <minmea_scan+0x6fe>
                    for (int i=0; i<6; i++)
 80033b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033b4:	3301      	adds	r3, #1
 80033b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80033b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033ba:	2b05      	cmp	r3, #5
 80033bc:	ddea      	ble.n	8003394 <minmea_scan+0x41c>
                            goto parse_error;

                    d = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 80033be:	2490      	movs	r4, #144	@ 0x90
 80033c0:	193b      	adds	r3, r7, r4
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	781a      	ldrb	r2, [r3, #0]
 80033c6:	211c      	movs	r1, #28
 80033c8:	187b      	adds	r3, r7, r1
 80033ca:	701a      	strb	r2, [r3, #0]
 80033cc:	193b      	adds	r3, r7, r4
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3301      	adds	r3, #1
 80033d2:	781a      	ldrb	r2, [r3, #0]
 80033d4:	187b      	adds	r3, r7, r1
 80033d6:	705a      	strb	r2, [r3, #1]
 80033d8:	187b      	adds	r3, r7, r1
 80033da:	2200      	movs	r2, #0
 80033dc:	709a      	strb	r2, [r3, #2]
 80033de:	187b      	adds	r3, r7, r1
 80033e0:	220a      	movs	r2, #10
 80033e2:	2100      	movs	r1, #0
 80033e4:	0018      	movs	r0, r3
 80033e6:	f005 fb25 	bl	8008a34 <strtol>
 80033ea:	0003      	movs	r3, r0
 80033ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    m = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 80033ee:	193b      	adds	r3, r7, r4
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3302      	adds	r3, #2
 80033f4:	781a      	ldrb	r2, [r3, #0]
 80033f6:	2118      	movs	r1, #24
 80033f8:	187b      	adds	r3, r7, r1
 80033fa:	701a      	strb	r2, [r3, #0]
 80033fc:	193b      	adds	r3, r7, r4
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3303      	adds	r3, #3
 8003402:	781a      	ldrb	r2, [r3, #0]
 8003404:	187b      	adds	r3, r7, r1
 8003406:	705a      	strb	r2, [r3, #1]
 8003408:	187b      	adds	r3, r7, r1
 800340a:	2200      	movs	r2, #0
 800340c:	709a      	strb	r2, [r3, #2]
 800340e:	187b      	adds	r3, r7, r1
 8003410:	220a      	movs	r2, #10
 8003412:	2100      	movs	r1, #0
 8003414:	0018      	movs	r0, r3
 8003416:	f005 fb0d 	bl	8008a34 <strtol>
 800341a:	0003      	movs	r3, r0
 800341c:	66bb      	str	r3, [r7, #104]	@ 0x68
                    y = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 800341e:	193b      	adds	r3, r7, r4
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	3304      	adds	r3, #4
 8003424:	781a      	ldrb	r2, [r3, #0]
 8003426:	2114      	movs	r1, #20
 8003428:	187b      	adds	r3, r7, r1
 800342a:	701a      	strb	r2, [r3, #0]
 800342c:	193b      	adds	r3, r7, r4
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3305      	adds	r3, #5
 8003432:	781a      	ldrb	r2, [r3, #0]
 8003434:	187b      	adds	r3, r7, r1
 8003436:	705a      	strb	r2, [r3, #1]
 8003438:	187b      	adds	r3, r7, r1
 800343a:	2200      	movs	r2, #0
 800343c:	709a      	strb	r2, [r3, #2]
 800343e:	187b      	adds	r3, r7, r1
 8003440:	220a      	movs	r2, #10
 8003442:	2100      	movs	r1, #0
 8003444:	0018      	movs	r0, r3
 8003446:	f005 faf5 	bl	8008a34 <strtol>
 800344a:	0003      	movs	r3, r0
 800344c:	667b      	str	r3, [r7, #100]	@ 0x64
                }

                date->day = d;
 800344e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003450:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003452:	601a      	str	r2, [r3, #0]
                date->month = m;
 8003454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003456:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003458:	605a      	str	r2, [r3, #4]
                date->year = y;
 800345a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800345e:	609a      	str	r2, [r3, #8]
            } break;
 8003460:	e0cc      	b.n	80035fc <minmea_scan+0x684>

            case 'T': { // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time = va_arg(ap, struct minmea_time *);
 8003462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003464:	1d1a      	adds	r2, r3, #4
 8003466:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	637b      	str	r3, [r7, #52]	@ 0x34

                int h = -1, i = -1, s = -1, u = -1;
 800346c:	2301      	movs	r3, #1
 800346e:	425b      	negs	r3, r3
 8003470:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003472:	2301      	movs	r3, #1
 8003474:	425b      	negs	r3, r3
 8003476:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003478:	2301      	movs	r3, #1
 800347a:	425b      	negs	r3, r3
 800347c:	657b      	str	r3, [r7, #84]	@ 0x54
 800347e:	2301      	movs	r3, #1
 8003480:	425b      	negs	r3, r3
 8003482:	653b      	str	r3, [r7, #80]	@ 0x50

                if (field && minmea_isfield(*field)) {
 8003484:	2290      	movs	r2, #144	@ 0x90
 8003486:	18bb      	adds	r3, r7, r2
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d100      	bne.n	8003490 <minmea_scan+0x518>
 800348e:	e0a7      	b.n	80035e0 <minmea_scan+0x668>
 8003490:	18bb      	adds	r3, r7, r2
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	0018      	movs	r0, r3
 8003498:	f7ff fd48 	bl	8002f2c <minmea_isfield>
 800349c:	1e03      	subs	r3, r0, #0
 800349e:	d100      	bne.n	80034a2 <minmea_scan+0x52a>
 80034a0:	e09e      	b.n	80035e0 <minmea_scan+0x668>
                    // Minimum required: integer time.
                    for (int i=0; i<6; i++)
 80034a2:	2300      	movs	r3, #0
 80034a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034a6:	e011      	b.n	80034cc <minmea_scan+0x554>
                        if (!isdigit((unsigned char) field[i]))
 80034a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034aa:	2290      	movs	r2, #144	@ 0x90
 80034ac:	18ba      	adds	r2, r7, r2
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	18d3      	adds	r3, r2, r3
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	4b76      	ldr	r3, [pc, #472]	@ (8003690 <minmea_scan+0x718>)
 80034b8:	18d3      	adds	r3, r2, r3
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	001a      	movs	r2, r3
 80034be:	2304      	movs	r3, #4
 80034c0:	4013      	ands	r3, r2
 80034c2:	d100      	bne.n	80034c6 <minmea_scan+0x54e>
 80034c4:	e0d9      	b.n	800367a <minmea_scan+0x702>
                    for (int i=0; i<6; i++)
 80034c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034c8:	3301      	adds	r3, #1
 80034ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034ce:	2b05      	cmp	r3, #5
 80034d0:	ddea      	ble.n	80034a8 <minmea_scan+0x530>
                            goto parse_error;

                    h = strtol((char[]) {field[0], field[1], '\0'}, NULL, 10);
 80034d2:	2490      	movs	r4, #144	@ 0x90
 80034d4:	193b      	adds	r3, r7, r4
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	781a      	ldrb	r2, [r3, #0]
 80034da:	2110      	movs	r1, #16
 80034dc:	187b      	adds	r3, r7, r1
 80034de:	701a      	strb	r2, [r3, #0]
 80034e0:	193b      	adds	r3, r7, r4
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3301      	adds	r3, #1
 80034e6:	781a      	ldrb	r2, [r3, #0]
 80034e8:	187b      	adds	r3, r7, r1
 80034ea:	705a      	strb	r2, [r3, #1]
 80034ec:	187b      	adds	r3, r7, r1
 80034ee:	2200      	movs	r2, #0
 80034f0:	709a      	strb	r2, [r3, #2]
 80034f2:	187b      	adds	r3, r7, r1
 80034f4:	220a      	movs	r2, #10
 80034f6:	2100      	movs	r1, #0
 80034f8:	0018      	movs	r0, r3
 80034fa:	f005 fa9b 	bl	8008a34 <strtol>
 80034fe:	0003      	movs	r3, r0
 8003500:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    i = strtol((char[]) {field[2], field[3], '\0'}, NULL, 10);
 8003502:	193b      	adds	r3, r7, r4
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3302      	adds	r3, #2
 8003508:	781a      	ldrb	r2, [r3, #0]
 800350a:	210c      	movs	r1, #12
 800350c:	187b      	adds	r3, r7, r1
 800350e:	701a      	strb	r2, [r3, #0]
 8003510:	193b      	adds	r3, r7, r4
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3303      	adds	r3, #3
 8003516:	781a      	ldrb	r2, [r3, #0]
 8003518:	187b      	adds	r3, r7, r1
 800351a:	705a      	strb	r2, [r3, #1]
 800351c:	187b      	adds	r3, r7, r1
 800351e:	2200      	movs	r2, #0
 8003520:	709a      	strb	r2, [r3, #2]
 8003522:	187b      	adds	r3, r7, r1
 8003524:	220a      	movs	r2, #10
 8003526:	2100      	movs	r1, #0
 8003528:	0018      	movs	r0, r3
 800352a:	f005 fa83 	bl	8008a34 <strtol>
 800352e:	0003      	movs	r3, r0
 8003530:	65bb      	str	r3, [r7, #88]	@ 0x58
                    s = strtol((char[]) {field[4], field[5], '\0'}, NULL, 10);
 8003532:	193b      	adds	r3, r7, r4
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3304      	adds	r3, #4
 8003538:	781a      	ldrb	r2, [r3, #0]
 800353a:	2108      	movs	r1, #8
 800353c:	187b      	adds	r3, r7, r1
 800353e:	701a      	strb	r2, [r3, #0]
 8003540:	193b      	adds	r3, r7, r4
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3305      	adds	r3, #5
 8003546:	781a      	ldrb	r2, [r3, #0]
 8003548:	187b      	adds	r3, r7, r1
 800354a:	705a      	strb	r2, [r3, #1]
 800354c:	187b      	adds	r3, r7, r1
 800354e:	2200      	movs	r2, #0
 8003550:	709a      	strb	r2, [r3, #2]
 8003552:	187b      	adds	r3, r7, r1
 8003554:	220a      	movs	r2, #10
 8003556:	2100      	movs	r1, #0
 8003558:	0018      	movs	r0, r3
 800355a:	f005 fa6b 	bl	8008a34 <strtol>
 800355e:	0003      	movs	r3, r0
 8003560:	657b      	str	r3, [r7, #84]	@ 0x54
                    field += 6;
 8003562:	193b      	adds	r3, r7, r4
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	3306      	adds	r3, #6
 8003568:	193a      	adds	r2, r7, r4
 800356a:	6013      	str	r3, [r2, #0]

                    // Extra: fractional time. Saved as microseconds.
                    if (*field++ == '.') {
 800356c:	193b      	adds	r3, r7, r4
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	1939      	adds	r1, r7, r4
 8003574:	600a      	str	r2, [r1, #0]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b2e      	cmp	r3, #46	@ 0x2e
 800357a:	d12f      	bne.n	80035dc <minmea_scan+0x664>
                        int value = 0;
 800357c:	2300      	movs	r3, #0
 800357e:	64bb      	str	r3, [r7, #72]	@ 0x48
                        int scale = 1000000;
 8003580:	4b44      	ldr	r3, [pc, #272]	@ (8003694 <minmea_scan+0x71c>)
 8003582:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 8003584:	e016      	b.n	80035b4 <minmea_scan+0x63c>
                            value = (value * 10) + (*field++ - '0');
 8003586:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003588:	0013      	movs	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	189b      	adds	r3, r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	0019      	movs	r1, r3
 8003592:	2090      	movs	r0, #144	@ 0x90
 8003594:	183b      	adds	r3, r7, r0
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	1838      	adds	r0, r7, r0
 800359c:	6002      	str	r2, [r0, #0]
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	3b30      	subs	r3, #48	@ 0x30
 80035a2:	18cb      	adds	r3, r1, r3
 80035a4:	64bb      	str	r3, [r7, #72]	@ 0x48
                            scale /= 10;
 80035a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035a8:	210a      	movs	r1, #10
 80035aa:	0018      	movs	r0, r3
 80035ac:	f7fc fe48 	bl	8000240 <__divsi3>
 80035b0:	0003      	movs	r3, r0
 80035b2:	647b      	str	r3, [r7, #68]	@ 0x44
                        while (isdigit((unsigned char) *field) && scale > 1) {
 80035b4:	2390      	movs	r3, #144	@ 0x90
 80035b6:	18fb      	adds	r3, r7, r3
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	4b34      	ldr	r3, [pc, #208]	@ (8003690 <minmea_scan+0x718>)
 80035c0:	18d3      	adds	r3, r2, r3
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	001a      	movs	r2, r3
 80035c6:	2304      	movs	r3, #4
 80035c8:	4013      	ands	r3, r2
 80035ca:	d002      	beq.n	80035d2 <minmea_scan+0x65a>
 80035cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	dcd9      	bgt.n	8003586 <minmea_scan+0x60e>
                        }
                        u = value * scale;
 80035d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035d6:	4353      	muls	r3, r2
 80035d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80035da:	e001      	b.n	80035e0 <minmea_scan+0x668>
                    } else {
                        u = 0;
 80035dc:	2300      	movs	r3, #0
 80035de:	653b      	str	r3, [r7, #80]	@ 0x50
                    }
                }

                time->hours = h;
 80035e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80035e4:	601a      	str	r2, [r3, #0]
                time->minutes = i;
 80035e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035ea:	605a      	str	r2, [r3, #4]
                time->seconds = s;
 80035ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80035f0:	609a      	str	r2, [r3, #8]
                time->microseconds = u;
 80035f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80035f6:	60da      	str	r2, [r3, #12]
            } break;
 80035f8:	e000      	b.n	80035fc <minmea_scan+0x684>

            case '_': { // Ignore the field.
            } break;
 80035fa:	46c0      	nop			@ (mov r8, r8)
            default: { // Unknown.
                goto parse_error;
            } break;
        }

        next_field();
 80035fc:	e002      	b.n	8003604 <minmea_scan+0x68c>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3301      	adds	r3, #1
 8003602:	607b      	str	r3, [r7, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	0018      	movs	r0, r3
 800360a:	f7ff fc8f 	bl	8002f2c <minmea_isfield>
 800360e:	1e03      	subs	r3, r0, #0
 8003610:	d1f5      	bne.n	80035fe <minmea_scan+0x686>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b2c      	cmp	r3, #44	@ 0x2c
 8003618:	d107      	bne.n	800362a <minmea_scan+0x6b2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3301      	adds	r3, #1
 800361e:	607b      	str	r3, [r7, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2290      	movs	r2, #144	@ 0x90
 8003624:	18ba      	adds	r2, r7, r2
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	e003      	b.n	8003632 <minmea_scan+0x6ba>
 800362a:	2300      	movs	r3, #0
 800362c:	2290      	movs	r2, #144	@ 0x90
 800362e:	18ba      	adds	r2, r7, r2
 8003630:	6013      	str	r3, [r2, #0]
    while (*format) {
 8003632:	23a4      	movs	r3, #164	@ 0xa4
 8003634:	2208      	movs	r2, #8
 8003636:	189b      	adds	r3, r3, r2
 8003638:	19db      	adds	r3, r3, r7
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d000      	beq.n	8003644 <minmea_scan+0x6cc>
 8003642:	e4b0      	b.n	8002fa6 <minmea_scan+0x2e>
    }

    result = true;
 8003644:	2397      	movs	r3, #151	@ 0x97
 8003646:	18fb      	adds	r3, r7, r3
 8003648:	2201      	movs	r2, #1
 800364a:	701a      	strb	r2, [r3, #0]
 800364c:	e016      	b.n	800367c <minmea_scan+0x704>
            goto parse_error;
 800364e:	46c0      	nop			@ (mov r8, r8)
 8003650:	e014      	b.n	800367c <minmea_scan+0x704>
                goto parse_error;
 8003652:	46c0      	nop			@ (mov r8, r8)
 8003654:	e012      	b.n	800367c <minmea_scan+0x704>
                            goto parse_error;
 8003656:	46c0      	nop			@ (mov r8, r8)
 8003658:	e010      	b.n	800367c <minmea_scan+0x704>
                                    goto parse_error;
 800365a:	46c0      	nop			@ (mov r8, r8)
 800365c:	e00e      	b.n	800367c <minmea_scan+0x704>
                            goto parse_error;
 800365e:	46c0      	nop			@ (mov r8, r8)
 8003660:	e00c      	b.n	800367c <minmea_scan+0x704>
                    goto parse_error;
 8003662:	46c0      	nop			@ (mov r8, r8)
 8003664:	e00a      	b.n	800367c <minmea_scan+0x704>
                        goto parse_error;
 8003666:	46c0      	nop			@ (mov r8, r8)
 8003668:	e008      	b.n	800367c <minmea_scan+0x704>
                    goto parse_error;
 800366a:	46c0      	nop			@ (mov r8, r8)
 800366c:	e006      	b.n	800367c <minmea_scan+0x704>
                    goto parse_error;
 800366e:	46c0      	nop			@ (mov r8, r8)
 8003670:	e004      	b.n	800367c <minmea_scan+0x704>
                        goto parse_error;
 8003672:	46c0      	nop			@ (mov r8, r8)
 8003674:	e002      	b.n	800367c <minmea_scan+0x704>
                            goto parse_error;
 8003676:	46c0      	nop			@ (mov r8, r8)
 8003678:	e000      	b.n	800367c <minmea_scan+0x704>
                            goto parse_error;
 800367a:	46c0      	nop			@ (mov r8, r8)

parse_error:
    va_end(ap);
    return result;
 800367c:	2397      	movs	r3, #151	@ 0x97
 800367e:	18fb      	adds	r3, r7, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
}
 8003682:	0018      	movs	r0, r3
 8003684:	46bd      	mov	sp, r7
 8003686:	b027      	add	sp, #156	@ 0x9c
 8003688:	bcb0      	pop	{r4, r5, r7}
 800368a:	bc08      	pop	{r3}
 800368c:	b003      	add	sp, #12
 800368e:	4718      	bx	r3
 8003690:	08009bdc 	.word	0x08009bdc
 8003694:	000f4240 	.word	0x000f4240

08003698 <minmea_parse_rmc>:

    return MINMEA_UNKNOWN;
}

bool minmea_parse_rmc(struct minmea_sentence_rmc *frame, const char *sentence)
{
 8003698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800369a:	46d6      	mov	lr, sl
 800369c:	464f      	mov	r7, r9
 800369e:	4646      	mov	r6, r8
 80036a0:	b5c0      	push	{r6, r7, lr}
 80036a2:	b092      	sub	sp, #72	@ 0x48
 80036a4:	af0a      	add	r7, sp, #40	@ 0x28
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
    char type[6];
    char validity;
    int latitude_direction;
    int longitude_direction;
    int variation_direction;
    if (!minmea_scan(sentence, "tTcfdfdffDfd",
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	469a      	mov	sl, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3314      	adds	r3, #20
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	321c      	adds	r2, #28
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	3124      	adds	r1, #36	@ 0x24
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	302c      	adds	r0, #44	@ 0x2c
 80036be:	687c      	ldr	r4, [r7, #4]
 80036c0:	3434      	adds	r4, #52	@ 0x34
 80036c2:	687d      	ldr	r5, [r7, #4]
 80036c4:	3540      	adds	r5, #64	@ 0x40
 80036c6:	2618      	movs	r6, #24
 80036c8:	46b1      	mov	r9, r6
 80036ca:	44b9      	add	r9, r7
 80036cc:	4e2a      	ldr	r6, [pc, #168]	@ (8003778 <minmea_parse_rmc+0xe0>)
 80036ce:	46b0      	mov	r8, r6
 80036d0:	683e      	ldr	r6, [r7, #0]
 80036d2:	46b4      	mov	ip, r6
 80036d4:	2608      	movs	r6, #8
 80036d6:	19be      	adds	r6, r7, r6
 80036d8:	9609      	str	r6, [sp, #36]	@ 0x24
 80036da:	9508      	str	r5, [sp, #32]
 80036dc:	9407      	str	r4, [sp, #28]
 80036de:	9006      	str	r0, [sp, #24]
 80036e0:	9105      	str	r1, [sp, #20]
 80036e2:	210c      	movs	r1, #12
 80036e4:	1879      	adds	r1, r7, r1
 80036e6:	9104      	str	r1, [sp, #16]
 80036e8:	9203      	str	r2, [sp, #12]
 80036ea:	2210      	movs	r2, #16
 80036ec:	18ba      	adds	r2, r7, r2
 80036ee:	9202      	str	r2, [sp, #8]
 80036f0:	9301      	str	r3, [sp, #4]
 80036f2:	2317      	movs	r3, #23
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	4653      	mov	r3, sl
 80036fa:	464a      	mov	r2, r9
 80036fc:	4641      	mov	r1, r8
 80036fe:	4660      	mov	r0, ip
 8003700:	f7ff fc3a 	bl	8002f78 <minmea_scan>
 8003704:	0003      	movs	r3, r0
 8003706:	001a      	movs	r2, r3
 8003708:	2301      	movs	r3, #1
 800370a:	4053      	eors	r3, r2
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <minmea_parse_rmc+0x7e>
            &frame->longitude, &longitude_direction,
            &frame->speed,
            &frame->course,
            &frame->date,
            &frame->variation, &variation_direction))
        return false;
 8003712:	2300      	movs	r3, #0
 8003714:	e027      	b.n	8003766 <minmea_parse_rmc+0xce>
    if (strcmp(type+2, "RMC"))
 8003716:	2318      	movs	r3, #24
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	3302      	adds	r3, #2
 800371c:	4a17      	ldr	r2, [pc, #92]	@ (800377c <minmea_parse_rmc+0xe4>)
 800371e:	0011      	movs	r1, r2
 8003720:	0018      	movs	r0, r3
 8003722:	f7fc fcef 	bl	8000104 <strcmp>
 8003726:	1e03      	subs	r3, r0, #0
 8003728:	d001      	beq.n	800372e <minmea_parse_rmc+0x96>
        return false;
 800372a:	2300      	movs	r3, #0
 800372c:	e01b      	b.n	8003766 <minmea_parse_rmc+0xce>

    frame->valid = (validity == 'A');
 800372e:	2317      	movs	r3, #23
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	3b41      	subs	r3, #65	@ 0x41
 8003736:	425a      	negs	r2, r3
 8003738:	4153      	adcs	r3, r2
 800373a:	b2da      	uxtb	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	741a      	strb	r2, [r3, #16]
    frame->latitude.value *= latitude_direction;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	435a      	muls	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	615a      	str	r2, [r3, #20]
    frame->longitude.value *= longitude_direction;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	435a      	muls	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	61da      	str	r2, [r3, #28]
    frame->variation.value *= variation_direction;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	435a      	muls	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	641a      	str	r2, [r3, #64]	@ 0x40

    return true;
 8003764:	2301      	movs	r3, #1
}
 8003766:	0018      	movs	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	b008      	add	sp, #32
 800376c:	bce0      	pop	{r5, r6, r7}
 800376e:	46ba      	mov	sl, r7
 8003770:	46b1      	mov	r9, r6
 8003772:	46a8      	mov	r8, r5
 8003774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003776:	46c0      	nop			@ (mov r8, r8)
 8003778:	080093f8 	.word	0x080093f8
 800377c:	080093e4 	.word	0x080093e4

08003780 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003786:	4b11      	ldr	r3, [pc, #68]	@ (80037cc <HAL_MspInit+0x4c>)
 8003788:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800378a:	4b10      	ldr	r3, [pc, #64]	@ (80037cc <HAL_MspInit+0x4c>)
 800378c:	2101      	movs	r1, #1
 800378e:	430a      	orrs	r2, r1
 8003790:	641a      	str	r2, [r3, #64]	@ 0x40
 8003792:	4b0e      	ldr	r3, [pc, #56]	@ (80037cc <HAL_MspInit+0x4c>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003796:	2201      	movs	r2, #1
 8003798:	4013      	ands	r3, r2
 800379a:	607b      	str	r3, [r7, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800379e:	4b0b      	ldr	r3, [pc, #44]	@ (80037cc <HAL_MspInit+0x4c>)
 80037a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037a2:	4b0a      	ldr	r3, [pc, #40]	@ (80037cc <HAL_MspInit+0x4c>)
 80037a4:	2180      	movs	r1, #128	@ 0x80
 80037a6:	0549      	lsls	r1, r1, #21
 80037a8:	430a      	orrs	r2, r1
 80037aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80037ac:	4b07      	ldr	r3, [pc, #28]	@ (80037cc <HAL_MspInit+0x4c>)
 80037ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037b0:	2380      	movs	r3, #128	@ 0x80
 80037b2:	055b      	lsls	r3, r3, #21
 80037b4:	4013      	ands	r3, r2
 80037b6:	603b      	str	r3, [r7, #0]
 80037b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80037ba:	23c0      	movs	r3, #192	@ 0xc0
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	0018      	movs	r0, r3
 80037c0:	f000 faf2 	bl	8003da8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037c4:	46c0      	nop			@ (mov r8, r8)
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b002      	add	sp, #8
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40021000 	.word	0x40021000

080037d0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037d0:	b590      	push	{r4, r7, lr}
 80037d2:	b09d      	sub	sp, #116	@ 0x74
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d8:	235c      	movs	r3, #92	@ 0x5c
 80037da:	18fb      	adds	r3, r7, r3
 80037dc:	0018      	movs	r0, r3
 80037de:	2314      	movs	r3, #20
 80037e0:	001a      	movs	r2, r3
 80037e2:	2100      	movs	r1, #0
 80037e4:	f005 f954 	bl	8008a90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037e8:	2410      	movs	r4, #16
 80037ea:	193b      	adds	r3, r7, r4
 80037ec:	0018      	movs	r0, r3
 80037ee:	234c      	movs	r3, #76	@ 0x4c
 80037f0:	001a      	movs	r2, r3
 80037f2:	2100      	movs	r1, #0
 80037f4:	f005 f94c 	bl	8008a90 <memset>
  if(hi2c->Instance==I2C1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a23      	ldr	r2, [pc, #140]	@ (800388c <HAL_I2C_MspInit+0xbc>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d13f      	bne.n	8003882 <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003802:	193b      	adds	r3, r7, r4
 8003804:	2220      	movs	r2, #32
 8003806:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003808:	193b      	adds	r3, r7, r4
 800380a:	2200      	movs	r2, #0
 800380c:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800380e:	193b      	adds	r3, r7, r4
 8003810:	0018      	movs	r0, r3
 8003812:	f002 f8d3 	bl	80059bc <HAL_RCCEx_PeriphCLKConfig>
 8003816:	1e03      	subs	r3, r0, #0
 8003818:	d001      	beq.n	800381e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800381a:	f7ff fb81 	bl	8002f20 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800381e:	4b1c      	ldr	r3, [pc, #112]	@ (8003890 <HAL_I2C_MspInit+0xc0>)
 8003820:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003822:	4b1b      	ldr	r3, [pc, #108]	@ (8003890 <HAL_I2C_MspInit+0xc0>)
 8003824:	2101      	movs	r1, #1
 8003826:	430a      	orrs	r2, r1
 8003828:	635a      	str	r2, [r3, #52]	@ 0x34
 800382a:	4b19      	ldr	r3, [pc, #100]	@ (8003890 <HAL_I2C_MspInit+0xc0>)
 800382c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800382e:	2201      	movs	r2, #1
 8003830:	4013      	ands	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003836:	215c      	movs	r1, #92	@ 0x5c
 8003838:	187b      	adds	r3, r7, r1
 800383a:	22c0      	movs	r2, #192	@ 0xc0
 800383c:	00d2      	lsls	r2, r2, #3
 800383e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003840:	187b      	adds	r3, r7, r1
 8003842:	2212      	movs	r2, #18
 8003844:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003846:	187b      	adds	r3, r7, r1
 8003848:	2200      	movs	r2, #0
 800384a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800384c:	187b      	adds	r3, r7, r1
 800384e:	2200      	movs	r2, #0
 8003850:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8003852:	187b      	adds	r3, r7, r1
 8003854:	2206      	movs	r2, #6
 8003856:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003858:	187a      	adds	r2, r7, r1
 800385a:	23a0      	movs	r3, #160	@ 0xa0
 800385c:	05db      	lsls	r3, r3, #23
 800385e:	0011      	movs	r1, r2
 8003860:	0018      	movs	r0, r3
 8003862:	f000 fb6b 	bl	8003f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003866:	4b0a      	ldr	r3, [pc, #40]	@ (8003890 <HAL_I2C_MspInit+0xc0>)
 8003868:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800386a:	4b09      	ldr	r3, [pc, #36]	@ (8003890 <HAL_I2C_MspInit+0xc0>)
 800386c:	2180      	movs	r1, #128	@ 0x80
 800386e:	0389      	lsls	r1, r1, #14
 8003870:	430a      	orrs	r2, r1
 8003872:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003874:	4b06      	ldr	r3, [pc, #24]	@ (8003890 <HAL_I2C_MspInit+0xc0>)
 8003876:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003878:	2380      	movs	r3, #128	@ 0x80
 800387a:	039b      	lsls	r3, r3, #14
 800387c:	4013      	ands	r3, r2
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003882:	46c0      	nop			@ (mov r8, r8)
 8003884:	46bd      	mov	sp, r7
 8003886:	b01d      	add	sp, #116	@ 0x74
 8003888:	bd90      	pop	{r4, r7, pc}
 800388a:	46c0      	nop			@ (mov r8, r8)
 800388c:	40005400 	.word	0x40005400
 8003890:	40021000 	.word	0x40021000

08003894 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003894:	b590      	push	{r4, r7, lr}
 8003896:	b08b      	sub	sp, #44	@ 0x2c
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800389c:	2414      	movs	r4, #20
 800389e:	193b      	adds	r3, r7, r4
 80038a0:	0018      	movs	r0, r3
 80038a2:	2314      	movs	r3, #20
 80038a4:	001a      	movs	r2, r3
 80038a6:	2100      	movs	r1, #0
 80038a8:	f005 f8f2 	bl	8008a90 <memset>
  if(hspi->Instance==SPI1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003920 <HAL_SPI_MspInit+0x8c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d130      	bne.n	8003918 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003924 <HAL_SPI_MspInit+0x90>)
 80038b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003924 <HAL_SPI_MspInit+0x90>)
 80038bc:	2180      	movs	r1, #128	@ 0x80
 80038be:	0149      	lsls	r1, r1, #5
 80038c0:	430a      	orrs	r2, r1
 80038c2:	641a      	str	r2, [r3, #64]	@ 0x40
 80038c4:	4b17      	ldr	r3, [pc, #92]	@ (8003924 <HAL_SPI_MspInit+0x90>)
 80038c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038c8:	2380      	movs	r3, #128	@ 0x80
 80038ca:	015b      	lsls	r3, r3, #5
 80038cc:	4013      	ands	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
 80038d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038d2:	4b14      	ldr	r3, [pc, #80]	@ (8003924 <HAL_SPI_MspInit+0x90>)
 80038d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038d6:	4b13      	ldr	r3, [pc, #76]	@ (8003924 <HAL_SPI_MspInit+0x90>)
 80038d8:	2101      	movs	r1, #1
 80038da:	430a      	orrs	r2, r1
 80038dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80038de:	4b11      	ldr	r3, [pc, #68]	@ (8003924 <HAL_SPI_MspInit+0x90>)
 80038e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e2:	2201      	movs	r2, #1
 80038e4:	4013      	ands	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80038ea:	0021      	movs	r1, r4
 80038ec:	187b      	adds	r3, r7, r1
 80038ee:	2206      	movs	r2, #6
 80038f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f2:	187b      	adds	r3, r7, r1
 80038f4:	2202      	movs	r2, #2
 80038f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f8:	187b      	adds	r3, r7, r1
 80038fa:	2200      	movs	r2, #0
 80038fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fe:	187b      	adds	r3, r7, r1
 8003900:	2200      	movs	r2, #0
 8003902:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003904:	187b      	adds	r3, r7, r1
 8003906:	2200      	movs	r2, #0
 8003908:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800390a:	187a      	adds	r2, r7, r1
 800390c:	23a0      	movs	r3, #160	@ 0xa0
 800390e:	05db      	lsls	r3, r3, #23
 8003910:	0011      	movs	r1, r2
 8003912:	0018      	movs	r0, r3
 8003914:	f000 fb12 	bl	8003f3c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003918:	46c0      	nop			@ (mov r8, r8)
 800391a:	46bd      	mov	sp, r7
 800391c:	b00b      	add	sp, #44	@ 0x2c
 800391e:	bd90      	pop	{r4, r7, pc}
 8003920:	40013000 	.word	0x40013000
 8003924:	40021000 	.word	0x40021000

08003928 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a0a      	ldr	r2, [pc, #40]	@ (8003960 <HAL_TIM_Base_MspInit+0x38>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d10d      	bne.n	8003956 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800393a:	4b0a      	ldr	r3, [pc, #40]	@ (8003964 <HAL_TIM_Base_MspInit+0x3c>)
 800393c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800393e:	4b09      	ldr	r3, [pc, #36]	@ (8003964 <HAL_TIM_Base_MspInit+0x3c>)
 8003940:	2180      	movs	r1, #128	@ 0x80
 8003942:	02c9      	lsls	r1, r1, #11
 8003944:	430a      	orrs	r2, r1
 8003946:	641a      	str	r2, [r3, #64]	@ 0x40
 8003948:	4b06      	ldr	r3, [pc, #24]	@ (8003964 <HAL_TIM_Base_MspInit+0x3c>)
 800394a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800394c:	2380      	movs	r3, #128	@ 0x80
 800394e:	02db      	lsls	r3, r3, #11
 8003950:	4013      	ands	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8003956:	46c0      	nop			@ (mov r8, r8)
 8003958:	46bd      	mov	sp, r7
 800395a:	b004      	add	sp, #16
 800395c:	bd80      	pop	{r7, pc}
 800395e:	46c0      	nop			@ (mov r8, r8)
 8003960:	40014800 	.word	0x40014800
 8003964:	40021000 	.word	0x40021000

08003968 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003968:	b590      	push	{r4, r7, lr}
 800396a:	b089      	sub	sp, #36	@ 0x24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003970:	240c      	movs	r4, #12
 8003972:	193b      	adds	r3, r7, r4
 8003974:	0018      	movs	r0, r3
 8003976:	2314      	movs	r3, #20
 8003978:	001a      	movs	r2, r3
 800397a:	2100      	movs	r1, #0
 800397c:	f005 f888 	bl	8008a90 <memset>
  if(htim->Instance==TIM17)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a14      	ldr	r2, [pc, #80]	@ (80039d8 <HAL_TIM_MspPostInit+0x70>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d122      	bne.n	80039d0 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800398a:	4b14      	ldr	r3, [pc, #80]	@ (80039dc <HAL_TIM_MspPostInit+0x74>)
 800398c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800398e:	4b13      	ldr	r3, [pc, #76]	@ (80039dc <HAL_TIM_MspPostInit+0x74>)
 8003990:	2101      	movs	r1, #1
 8003992:	430a      	orrs	r2, r1
 8003994:	635a      	str	r2, [r3, #52]	@ 0x34
 8003996:	4b11      	ldr	r3, [pc, #68]	@ (80039dc <HAL_TIM_MspPostInit+0x74>)
 8003998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800399a:	2201      	movs	r2, #1
 800399c:	4013      	ands	r3, r2
 800399e:	60bb      	str	r3, [r7, #8]
 80039a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80039a2:	0021      	movs	r1, r4
 80039a4:	187b      	adds	r3, r7, r1
 80039a6:	2280      	movs	r2, #128	@ 0x80
 80039a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039aa:	187b      	adds	r3, r7, r1
 80039ac:	2202      	movs	r2, #2
 80039ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b0:	187b      	adds	r3, r7, r1
 80039b2:	2200      	movs	r2, #0
 80039b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b6:	187b      	adds	r3, r7, r1
 80039b8:	2200      	movs	r2, #0
 80039ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 80039bc:	187b      	adds	r3, r7, r1
 80039be:	2205      	movs	r2, #5
 80039c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039c2:	187a      	adds	r2, r7, r1
 80039c4:	23a0      	movs	r3, #160	@ 0xa0
 80039c6:	05db      	lsls	r3, r3, #23
 80039c8:	0011      	movs	r1, r2
 80039ca:	0018      	movs	r0, r3
 80039cc:	f000 fab6 	bl	8003f3c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80039d0:	46c0      	nop			@ (mov r8, r8)
 80039d2:	46bd      	mov	sp, r7
 80039d4:	b009      	add	sp, #36	@ 0x24
 80039d6:	bd90      	pop	{r4, r7, pc}
 80039d8:	40014800 	.word	0x40014800
 80039dc:	40021000 	.word	0x40021000

080039e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80039e0:	b590      	push	{r4, r7, lr}
 80039e2:	b09f      	sub	sp, #124	@ 0x7c
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e8:	2364      	movs	r3, #100	@ 0x64
 80039ea:	18fb      	adds	r3, r7, r3
 80039ec:	0018      	movs	r0, r3
 80039ee:	2314      	movs	r3, #20
 80039f0:	001a      	movs	r2, r3
 80039f2:	2100      	movs	r1, #0
 80039f4:	f005 f84c 	bl	8008a90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80039f8:	2418      	movs	r4, #24
 80039fa:	193b      	adds	r3, r7, r4
 80039fc:	0018      	movs	r0, r3
 80039fe:	234c      	movs	r3, #76	@ 0x4c
 8003a00:	001a      	movs	r2, r3
 8003a02:	2100      	movs	r1, #0
 8003a04:	f005 f844 	bl	8008a90 <memset>
  if(huart->Instance==USART1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a45      	ldr	r2, [pc, #276]	@ (8003b24 <HAL_UART_MspInit+0x144>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d13e      	bne.n	8003a90 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003a12:	193b      	adds	r3, r7, r4
 8003a14:	2201      	movs	r2, #1
 8003a16:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003a18:	193b      	adds	r3, r7, r4
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a1e:	193b      	adds	r3, r7, r4
 8003a20:	0018      	movs	r0, r3
 8003a22:	f001 ffcb 	bl	80059bc <HAL_RCCEx_PeriphCLKConfig>
 8003a26:	1e03      	subs	r3, r0, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003a2a:	f7ff fa79 	bl	8002f20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a2e:	4b3e      	ldr	r3, [pc, #248]	@ (8003b28 <HAL_UART_MspInit+0x148>)
 8003a30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a32:	4b3d      	ldr	r3, [pc, #244]	@ (8003b28 <HAL_UART_MspInit+0x148>)
 8003a34:	2180      	movs	r1, #128	@ 0x80
 8003a36:	01c9      	lsls	r1, r1, #7
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a3c:	4b3a      	ldr	r3, [pc, #232]	@ (8003b28 <HAL_UART_MspInit+0x148>)
 8003a3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a40:	2380      	movs	r3, #128	@ 0x80
 8003a42:	01db      	lsls	r3, r3, #7
 8003a44:	4013      	ands	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a4a:	4b37      	ldr	r3, [pc, #220]	@ (8003b28 <HAL_UART_MspInit+0x148>)
 8003a4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a4e:	4b36      	ldr	r3, [pc, #216]	@ (8003b28 <HAL_UART_MspInit+0x148>)
 8003a50:	2104      	movs	r1, #4
 8003a52:	430a      	orrs	r2, r1
 8003a54:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a56:	4b34      	ldr	r3, [pc, #208]	@ (8003b28 <HAL_UART_MspInit+0x148>)
 8003a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a5a:	2204      	movs	r2, #4
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003a62:	2164      	movs	r1, #100	@ 0x64
 8003a64:	187b      	adds	r3, r7, r1
 8003a66:	2230      	movs	r2, #48	@ 0x30
 8003a68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a6a:	187b      	adds	r3, r7, r1
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a70:	187b      	adds	r3, r7, r1
 8003a72:	2200      	movs	r2, #0
 8003a74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a76:	187b      	adds	r3, r7, r1
 8003a78:	2200      	movs	r2, #0
 8003a7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003a7c:	187b      	adds	r3, r7, r1
 8003a7e:	2201      	movs	r2, #1
 8003a80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a82:	187b      	adds	r3, r7, r1
 8003a84:	4a29      	ldr	r2, [pc, #164]	@ (8003b2c <HAL_UART_MspInit+0x14c>)
 8003a86:	0019      	movs	r1, r3
 8003a88:	0010      	movs	r0, r2
 8003a8a:	f000 fa57 	bl	8003f3c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a8e:	e045      	b.n	8003b1c <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a26      	ldr	r2, [pc, #152]	@ (8003b30 <HAL_UART_MspInit+0x150>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d140      	bne.n	8003b1c <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003a9a:	2118      	movs	r1, #24
 8003a9c:	187b      	adds	r3, r7, r1
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003aa2:	187b      	adds	r3, r7, r1
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003aa8:	187b      	adds	r3, r7, r1
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f001 ff86 	bl	80059bc <HAL_RCCEx_PeriphCLKConfig>
 8003ab0:	1e03      	subs	r3, r0, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8003ab4:	f7ff fa34 	bl	8002f20 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b28 <HAL_UART_MspInit+0x148>)
 8003aba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003abc:	4b1a      	ldr	r3, [pc, #104]	@ (8003b28 <HAL_UART_MspInit+0x148>)
 8003abe:	2180      	movs	r1, #128	@ 0x80
 8003ac0:	0289      	lsls	r1, r1, #10
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003ac6:	4b18      	ldr	r3, [pc, #96]	@ (8003b28 <HAL_UART_MspInit+0x148>)
 8003ac8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003aca:	2380      	movs	r3, #128	@ 0x80
 8003acc:	029b      	lsls	r3, r3, #10
 8003ace:	4013      	ands	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ad4:	4b14      	ldr	r3, [pc, #80]	@ (8003b28 <HAL_UART_MspInit+0x148>)
 8003ad6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ad8:	4b13      	ldr	r3, [pc, #76]	@ (8003b28 <HAL_UART_MspInit+0x148>)
 8003ada:	2101      	movs	r1, #1
 8003adc:	430a      	orrs	r2, r1
 8003ade:	635a      	str	r2, [r3, #52]	@ 0x34
 8003ae0:	4b11      	ldr	r3, [pc, #68]	@ (8003b28 <HAL_UART_MspInit+0x148>)
 8003ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003aec:	2164      	movs	r1, #100	@ 0x64
 8003aee:	187b      	adds	r3, r7, r1
 8003af0:	22c0      	movs	r2, #192	@ 0xc0
 8003af2:	0212      	lsls	r2, r2, #8
 8003af4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af6:	187b      	adds	r3, r7, r1
 8003af8:	2202      	movs	r2, #2
 8003afa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afc:	187b      	adds	r3, r7, r1
 8003afe:	2200      	movs	r2, #0
 8003b00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b02:	187b      	adds	r3, r7, r1
 8003b04:	2200      	movs	r2, #0
 8003b06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003b08:	187b      	adds	r3, r7, r1
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b0e:	187a      	adds	r2, r7, r1
 8003b10:	23a0      	movs	r3, #160	@ 0xa0
 8003b12:	05db      	lsls	r3, r3, #23
 8003b14:	0011      	movs	r1, r2
 8003b16:	0018      	movs	r0, r3
 8003b18:	f000 fa10 	bl	8003f3c <HAL_GPIO_Init>
}
 8003b1c:	46c0      	nop			@ (mov r8, r8)
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b01f      	add	sp, #124	@ 0x7c
 8003b22:	bd90      	pop	{r4, r7, pc}
 8003b24:	40013800 	.word	0x40013800
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	50000800 	.word	0x50000800
 8003b30:	40004400 	.word	0x40004400

08003b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b38:	46c0      	nop			@ (mov r8, r8)
 8003b3a:	e7fd      	b.n	8003b38 <NMI_Handler+0x4>

08003b3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b40:	46c0      	nop			@ (mov r8, r8)
 8003b42:	e7fd      	b.n	8003b40 <HardFault_Handler+0x4>

08003b44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003b48:	46c0      	nop			@ (mov r8, r8)
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b52:	46c0      	nop			@ (mov r8, r8)
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b5c:	f000 f8e4 	bl	8003d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b60:	46c0      	nop			@ (mov r8, r8)
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003b6c:	4b05      	ldr	r3, [pc, #20]	@ (8003b84 <RTC_TAMP_IRQHandler+0x1c>)
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f002 fb66 	bl	8006240 <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003b74:	4b03      	ldr	r3, [pc, #12]	@ (8003b84 <RTC_TAMP_IRQHandler+0x1c>)
 8003b76:	0018      	movs	r0, r3
 8003b78:	f002 fbe5 	bl	8006346 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8003b7c:	46c0      	nop			@ (mov r8, r8)
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	46c0      	nop			@ (mov r8, r8)
 8003b84:	2000071c 	.word	0x2000071c

08003b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b90:	4a14      	ldr	r2, [pc, #80]	@ (8003be4 <_sbrk+0x5c>)
 8003b92:	4b15      	ldr	r3, [pc, #84]	@ (8003be8 <_sbrk+0x60>)
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b9c:	4b13      	ldr	r3, [pc, #76]	@ (8003bec <_sbrk+0x64>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d102      	bne.n	8003baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ba4:	4b11      	ldr	r3, [pc, #68]	@ (8003bec <_sbrk+0x64>)
 8003ba6:	4a12      	ldr	r2, [pc, #72]	@ (8003bf0 <_sbrk+0x68>)
 8003ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003baa:	4b10      	ldr	r3, [pc, #64]	@ (8003bec <_sbrk+0x64>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	18d3      	adds	r3, r2, r3
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d207      	bcs.n	8003bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bb8:	f004 ff72 	bl	8008aa0 <__errno>
 8003bbc:	0003      	movs	r3, r0
 8003bbe:	220c      	movs	r2, #12
 8003bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	425b      	negs	r3, r3
 8003bc6:	e009      	b.n	8003bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bc8:	4b08      	ldr	r3, [pc, #32]	@ (8003bec <_sbrk+0x64>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bce:	4b07      	ldr	r3, [pc, #28]	@ (8003bec <_sbrk+0x64>)
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	18d2      	adds	r2, r2, r3
 8003bd6:	4b05      	ldr	r3, [pc, #20]	@ (8003bec <_sbrk+0x64>)
 8003bd8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003bda:	68fb      	ldr	r3, [r7, #12]
}
 8003bdc:	0018      	movs	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b006      	add	sp, #24
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	20024000 	.word	0x20024000
 8003be8:	00000400 	.word	0x00000400
 8003bec:	2000088c 	.word	0x2000088c
 8003bf0:	200009e0 	.word	0x200009e0

08003bf4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bf8:	46c0      	nop			@ (mov r8, r8)
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003c00:	480d      	ldr	r0, [pc, #52]	@ (8003c38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c02:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003c04:	f7ff fff6 	bl	8003bf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c08:	480c      	ldr	r0, [pc, #48]	@ (8003c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8003c0a:	490d      	ldr	r1, [pc, #52]	@ (8003c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8003c44 <LoopForever+0xe>)
  movs r3, #0
 8003c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c10:	e002      	b.n	8003c18 <LoopCopyDataInit>

08003c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c16:	3304      	adds	r3, #4

08003c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c1c:	d3f9      	bcc.n	8003c12 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8003c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c20:	4c0a      	ldr	r4, [pc, #40]	@ (8003c4c <LoopForever+0x16>)
  movs r3, #0
 8003c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c24:	e001      	b.n	8003c2a <LoopFillZerobss>

08003c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c28:	3204      	adds	r2, #4

08003c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c2c:	d3fb      	bcc.n	8003c26 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003c2e:	f004 ff3d 	bl	8008aac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003c32:	f7fe fc0b 	bl	800244c <main>

08003c36 <LoopForever>:

LoopForever:
  b LoopForever
 8003c36:	e7fe      	b.n	8003c36 <LoopForever>
  ldr   r0, =_estack
 8003c38:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8003c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c40:	20000550 	.word	0x20000550
  ldr r2, =_sidata
 8003c44:	08009d20 	.word	0x08009d20
  ldr r2, =_sbss
 8003c48:	20000550 	.word	0x20000550
  ldr r4, =_ebss
 8003c4c:	200009dc 	.word	0x200009dc

08003c50 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003c50:	e7fe      	b.n	8003c50 <ADC1_COMP_IRQHandler>
	...

08003c54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c5a:	1dfb      	adds	r3, r7, #7
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c60:	4b0b      	ldr	r3, [pc, #44]	@ (8003c90 <HAL_Init+0x3c>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4b0a      	ldr	r3, [pc, #40]	@ (8003c90 <HAL_Init+0x3c>)
 8003c66:	2180      	movs	r1, #128	@ 0x80
 8003c68:	0049      	lsls	r1, r1, #1
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c6e:	2003      	movs	r0, #3
 8003c70:	f000 f810 	bl	8003c94 <HAL_InitTick>
 8003c74:	1e03      	subs	r3, r0, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003c78:	1dfb      	adds	r3, r7, #7
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	701a      	strb	r2, [r3, #0]
 8003c7e:	e001      	b.n	8003c84 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003c80:	f7ff fd7e 	bl	8003780 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c84:	1dfb      	adds	r3, r7, #7
 8003c86:	781b      	ldrb	r3, [r3, #0]
}
 8003c88:	0018      	movs	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	b002      	add	sp, #8
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40022000 	.word	0x40022000

08003c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c94:	b590      	push	{r4, r7, lr}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c9c:	230f      	movs	r3, #15
 8003c9e:	18fb      	adds	r3, r7, r3
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d1c <HAL_InitTick+0x88>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d02b      	beq.n	8003d04 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003cac:	4b1c      	ldr	r3, [pc, #112]	@ (8003d20 <HAL_InitTick+0x8c>)
 8003cae:	681c      	ldr	r4, [r3, #0]
 8003cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8003d1c <HAL_InitTick+0x88>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	0019      	movs	r1, r3
 8003cb6:	23fa      	movs	r3, #250	@ 0xfa
 8003cb8:	0098      	lsls	r0, r3, #2
 8003cba:	f7fc fa37 	bl	800012c <__udivsi3>
 8003cbe:	0003      	movs	r3, r0
 8003cc0:	0019      	movs	r1, r3
 8003cc2:	0020      	movs	r0, r4
 8003cc4:	f7fc fa32 	bl	800012c <__udivsi3>
 8003cc8:	0003      	movs	r3, r0
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f000 f929 	bl	8003f22 <HAL_SYSTICK_Config>
 8003cd0:	1e03      	subs	r3, r0, #0
 8003cd2:	d112      	bne.n	8003cfa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d80a      	bhi.n	8003cf0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	2301      	movs	r3, #1
 8003cde:	425b      	negs	r3, r3
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f000 f908 	bl	8003ef8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8003d24 <HAL_InitTick+0x90>)
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e00d      	b.n	8003d0c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003cf0:	230f      	movs	r3, #15
 8003cf2:	18fb      	adds	r3, r7, r3
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	701a      	strb	r2, [r3, #0]
 8003cf8:	e008      	b.n	8003d0c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003cfa:	230f      	movs	r3, #15
 8003cfc:	18fb      	adds	r3, r7, r3
 8003cfe:	2201      	movs	r2, #1
 8003d00:	701a      	strb	r2, [r3, #0]
 8003d02:	e003      	b.n	8003d0c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003d04:	230f      	movs	r3, #15
 8003d06:	18fb      	adds	r3, r7, r3
 8003d08:	2201      	movs	r2, #1
 8003d0a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003d0c:	230f      	movs	r3, #15
 8003d0e:	18fb      	adds	r3, r7, r3
 8003d10:	781b      	ldrb	r3, [r3, #0]
}
 8003d12:	0018      	movs	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b005      	add	sp, #20
 8003d18:	bd90      	pop	{r4, r7, pc}
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	200004fc 	.word	0x200004fc
 8003d20:	200004f4 	.word	0x200004f4
 8003d24:	200004f8 	.word	0x200004f8

08003d28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d2c:	4b05      	ldr	r3, [pc, #20]	@ (8003d44 <HAL_IncTick+0x1c>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	001a      	movs	r2, r3
 8003d32:	4b05      	ldr	r3, [pc, #20]	@ (8003d48 <HAL_IncTick+0x20>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	18d2      	adds	r2, r2, r3
 8003d38:	4b03      	ldr	r3, [pc, #12]	@ (8003d48 <HAL_IncTick+0x20>)
 8003d3a:	601a      	str	r2, [r3, #0]
}
 8003d3c:	46c0      	nop			@ (mov r8, r8)
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	46c0      	nop			@ (mov r8, r8)
 8003d44:	200004fc 	.word	0x200004fc
 8003d48:	20000890 	.word	0x20000890

08003d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d50:	4b02      	ldr	r3, [pc, #8]	@ (8003d5c <HAL_GetTick+0x10>)
 8003d52:	681b      	ldr	r3, [r3, #0]
}
 8003d54:	0018      	movs	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	46c0      	nop			@ (mov r8, r8)
 8003d5c:	20000890 	.word	0x20000890

08003d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d68:	f7ff fff0 	bl	8003d4c <HAL_GetTick>
 8003d6c:	0003      	movs	r3, r0
 8003d6e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	3301      	adds	r3, #1
 8003d78:	d005      	beq.n	8003d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003da4 <HAL_Delay+0x44>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	001a      	movs	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	189b      	adds	r3, r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d86:	46c0      	nop			@ (mov r8, r8)
 8003d88:	f7ff ffe0 	bl	8003d4c <HAL_GetTick>
 8003d8c:	0002      	movs	r2, r0
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d8f7      	bhi.n	8003d88 <HAL_Delay+0x28>
  {
  }
}
 8003d98:	46c0      	nop			@ (mov r8, r8)
 8003d9a:	46c0      	nop			@ (mov r8, r8)
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	b004      	add	sp, #16
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	46c0      	nop			@ (mov r8, r8)
 8003da4:	200004fc 	.word	0x200004fc

08003da8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8003db0:	4b06      	ldr	r3, [pc, #24]	@ (8003dcc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a06      	ldr	r2, [pc, #24]	@ (8003dd0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	0019      	movs	r1, r3
 8003dba:	4b04      	ldr	r3, [pc, #16]	@ (8003dcc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	601a      	str	r2, [r3, #0]
}
 8003dc2:	46c0      	nop			@ (mov r8, r8)
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	b002      	add	sp, #8
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	46c0      	nop			@ (mov r8, r8)
 8003dcc:	40010000 	.word	0x40010000
 8003dd0:	fffff9ff 	.word	0xfffff9ff

08003dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dd4:	b590      	push	{r4, r7, lr}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	0002      	movs	r2, r0
 8003ddc:	6039      	str	r1, [r7, #0]
 8003dde:	1dfb      	adds	r3, r7, #7
 8003de0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003de2:	1dfb      	adds	r3, r7, #7
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b7f      	cmp	r3, #127	@ 0x7f
 8003de8:	d828      	bhi.n	8003e3c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003dea:	4a2f      	ldr	r2, [pc, #188]	@ (8003ea8 <__NVIC_SetPriority+0xd4>)
 8003dec:	1dfb      	adds	r3, r7, #7
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	b25b      	sxtb	r3, r3
 8003df2:	089b      	lsrs	r3, r3, #2
 8003df4:	33c0      	adds	r3, #192	@ 0xc0
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	589b      	ldr	r3, [r3, r2]
 8003dfa:	1dfa      	adds	r2, r7, #7
 8003dfc:	7812      	ldrb	r2, [r2, #0]
 8003dfe:	0011      	movs	r1, r2
 8003e00:	2203      	movs	r2, #3
 8003e02:	400a      	ands	r2, r1
 8003e04:	00d2      	lsls	r2, r2, #3
 8003e06:	21ff      	movs	r1, #255	@ 0xff
 8003e08:	4091      	lsls	r1, r2
 8003e0a:	000a      	movs	r2, r1
 8003e0c:	43d2      	mvns	r2, r2
 8003e0e:	401a      	ands	r2, r3
 8003e10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	019b      	lsls	r3, r3, #6
 8003e16:	22ff      	movs	r2, #255	@ 0xff
 8003e18:	401a      	ands	r2, r3
 8003e1a:	1dfb      	adds	r3, r7, #7
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	0018      	movs	r0, r3
 8003e20:	2303      	movs	r3, #3
 8003e22:	4003      	ands	r3, r0
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e28:	481f      	ldr	r0, [pc, #124]	@ (8003ea8 <__NVIC_SetPriority+0xd4>)
 8003e2a:	1dfb      	adds	r3, r7, #7
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	b25b      	sxtb	r3, r3
 8003e30:	089b      	lsrs	r3, r3, #2
 8003e32:	430a      	orrs	r2, r1
 8003e34:	33c0      	adds	r3, #192	@ 0xc0
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003e3a:	e031      	b.n	8003ea0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8003eac <__NVIC_SetPriority+0xd8>)
 8003e3e:	1dfb      	adds	r3, r7, #7
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	0019      	movs	r1, r3
 8003e44:	230f      	movs	r3, #15
 8003e46:	400b      	ands	r3, r1
 8003e48:	3b08      	subs	r3, #8
 8003e4a:	089b      	lsrs	r3, r3, #2
 8003e4c:	3306      	adds	r3, #6
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	18d3      	adds	r3, r2, r3
 8003e52:	3304      	adds	r3, #4
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	1dfa      	adds	r2, r7, #7
 8003e58:	7812      	ldrb	r2, [r2, #0]
 8003e5a:	0011      	movs	r1, r2
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	400a      	ands	r2, r1
 8003e60:	00d2      	lsls	r2, r2, #3
 8003e62:	21ff      	movs	r1, #255	@ 0xff
 8003e64:	4091      	lsls	r1, r2
 8003e66:	000a      	movs	r2, r1
 8003e68:	43d2      	mvns	r2, r2
 8003e6a:	401a      	ands	r2, r3
 8003e6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	019b      	lsls	r3, r3, #6
 8003e72:	22ff      	movs	r2, #255	@ 0xff
 8003e74:	401a      	ands	r2, r3
 8003e76:	1dfb      	adds	r3, r7, #7
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	4003      	ands	r3, r0
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e84:	4809      	ldr	r0, [pc, #36]	@ (8003eac <__NVIC_SetPriority+0xd8>)
 8003e86:	1dfb      	adds	r3, r7, #7
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	001c      	movs	r4, r3
 8003e8c:	230f      	movs	r3, #15
 8003e8e:	4023      	ands	r3, r4
 8003e90:	3b08      	subs	r3, #8
 8003e92:	089b      	lsrs	r3, r3, #2
 8003e94:	430a      	orrs	r2, r1
 8003e96:	3306      	adds	r3, #6
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	18c3      	adds	r3, r0, r3
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	601a      	str	r2, [r3, #0]
}
 8003ea0:	46c0      	nop			@ (mov r8, r8)
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b003      	add	sp, #12
 8003ea6:	bd90      	pop	{r4, r7, pc}
 8003ea8:	e000e100 	.word	0xe000e100
 8003eac:	e000ed00 	.word	0xe000ed00

08003eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	1e5a      	subs	r2, r3, #1
 8003ebc:	2380      	movs	r3, #128	@ 0x80
 8003ebe:	045b      	lsls	r3, r3, #17
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d301      	bcc.n	8003ec8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e010      	b.n	8003eea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef4 <SysTick_Config+0x44>)
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	3a01      	subs	r2, #1
 8003ece:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	425b      	negs	r3, r3
 8003ed4:	2103      	movs	r1, #3
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f7ff ff7c 	bl	8003dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003edc:	4b05      	ldr	r3, [pc, #20]	@ (8003ef4 <SysTick_Config+0x44>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ee2:	4b04      	ldr	r3, [pc, #16]	@ (8003ef4 <SysTick_Config+0x44>)
 8003ee4:	2207      	movs	r2, #7
 8003ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	0018      	movs	r0, r3
 8003eec:	46bd      	mov	sp, r7
 8003eee:	b002      	add	sp, #8
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	e000e010 	.word	0xe000e010

08003ef8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	607a      	str	r2, [r7, #4]
 8003f02:	210f      	movs	r1, #15
 8003f04:	187b      	adds	r3, r7, r1
 8003f06:	1c02      	adds	r2, r0, #0
 8003f08:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	187b      	adds	r3, r7, r1
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	b25b      	sxtb	r3, r3
 8003f12:	0011      	movs	r1, r2
 8003f14:	0018      	movs	r0, r3
 8003f16:	f7ff ff5d 	bl	8003dd4 <__NVIC_SetPriority>
}
 8003f1a:	46c0      	nop			@ (mov r8, r8)
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b004      	add	sp, #16
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f7ff ffbf 	bl	8003eb0 <SysTick_Config>
 8003f32:	0003      	movs	r3, r0
}
 8003f34:	0018      	movs	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	b002      	add	sp, #8
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f46:	2300      	movs	r3, #0
 8003f48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f4a:	e14d      	b.n	80041e8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2101      	movs	r1, #1
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	4091      	lsls	r1, r2
 8003f56:	000a      	movs	r2, r1
 8003f58:	4013      	ands	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d100      	bne.n	8003f64 <HAL_GPIO_Init+0x28>
 8003f62:	e13e      	b.n	80041e2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	2203      	movs	r2, #3
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d005      	beq.n	8003f7c <HAL_GPIO_Init+0x40>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2203      	movs	r2, #3
 8003f76:	4013      	ands	r3, r2
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d130      	bne.n	8003fde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	2203      	movs	r2, #3
 8003f88:	409a      	lsls	r2, r3
 8003f8a:	0013      	movs	r3, r2
 8003f8c:	43da      	mvns	r2, r3
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4013      	ands	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	409a      	lsls	r2, r3
 8003f9e:	0013      	movs	r3, r2
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	409a      	lsls	r2, r3
 8003fb8:	0013      	movs	r3, r2
 8003fba:	43da      	mvns	r2, r3
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	091b      	lsrs	r3, r3, #4
 8003fc8:	2201      	movs	r2, #1
 8003fca:	401a      	ands	r2, r3
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	0013      	movs	r3, r2
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d017      	beq.n	800401a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	409a      	lsls	r2, r3
 8003ff8:	0013      	movs	r3, r2
 8003ffa:	43da      	mvns	r2, r3
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	4013      	ands	r3, r2
 8004000:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	409a      	lsls	r2, r3
 800400c:	0013      	movs	r3, r2
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	4313      	orrs	r3, r2
 8004012:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	2203      	movs	r2, #3
 8004020:	4013      	ands	r3, r2
 8004022:	2b02      	cmp	r3, #2
 8004024:	d123      	bne.n	800406e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	08da      	lsrs	r2, r3, #3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3208      	adds	r2, #8
 800402e:	0092      	lsls	r2, r2, #2
 8004030:	58d3      	ldr	r3, [r2, r3]
 8004032:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	2207      	movs	r2, #7
 8004038:	4013      	ands	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	220f      	movs	r2, #15
 800403e:	409a      	lsls	r2, r3
 8004040:	0013      	movs	r3, r2
 8004042:	43da      	mvns	r2, r3
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	4013      	ands	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	691a      	ldr	r2, [r3, #16]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2107      	movs	r1, #7
 8004052:	400b      	ands	r3, r1
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	409a      	lsls	r2, r3
 8004058:	0013      	movs	r3, r2
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4313      	orrs	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	08da      	lsrs	r2, r3, #3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3208      	adds	r2, #8
 8004068:	0092      	lsls	r2, r2, #2
 800406a:	6939      	ldr	r1, [r7, #16]
 800406c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	2203      	movs	r2, #3
 800407a:	409a      	lsls	r2, r3
 800407c:	0013      	movs	r3, r2
 800407e:	43da      	mvns	r2, r3
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4013      	ands	r3, r2
 8004084:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2203      	movs	r2, #3
 800408c:	401a      	ands	r2, r3
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	409a      	lsls	r2, r3
 8004094:	0013      	movs	r3, r2
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4313      	orrs	r3, r2
 800409a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	23c0      	movs	r3, #192	@ 0xc0
 80040a8:	029b      	lsls	r3, r3, #10
 80040aa:	4013      	ands	r3, r2
 80040ac:	d100      	bne.n	80040b0 <HAL_GPIO_Init+0x174>
 80040ae:	e098      	b.n	80041e2 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80040b0:	4a53      	ldr	r2, [pc, #332]	@ (8004200 <HAL_GPIO_Init+0x2c4>)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	089b      	lsrs	r3, r3, #2
 80040b6:	3318      	adds	r3, #24
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	589b      	ldr	r3, [r3, r2]
 80040bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2203      	movs	r2, #3
 80040c2:	4013      	ands	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	220f      	movs	r2, #15
 80040c8:	409a      	lsls	r2, r3
 80040ca:	0013      	movs	r3, r2
 80040cc:	43da      	mvns	r2, r3
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	4013      	ands	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	23a0      	movs	r3, #160	@ 0xa0
 80040d8:	05db      	lsls	r3, r3, #23
 80040da:	429a      	cmp	r2, r3
 80040dc:	d019      	beq.n	8004112 <HAL_GPIO_Init+0x1d6>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a48      	ldr	r2, [pc, #288]	@ (8004204 <HAL_GPIO_Init+0x2c8>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d013      	beq.n	800410e <HAL_GPIO_Init+0x1d2>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a47      	ldr	r2, [pc, #284]	@ (8004208 <HAL_GPIO_Init+0x2cc>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00d      	beq.n	800410a <HAL_GPIO_Init+0x1ce>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a46      	ldr	r2, [pc, #280]	@ (800420c <HAL_GPIO_Init+0x2d0>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d007      	beq.n	8004106 <HAL_GPIO_Init+0x1ca>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a45      	ldr	r2, [pc, #276]	@ (8004210 <HAL_GPIO_Init+0x2d4>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d101      	bne.n	8004102 <HAL_GPIO_Init+0x1c6>
 80040fe:	2304      	movs	r3, #4
 8004100:	e008      	b.n	8004114 <HAL_GPIO_Init+0x1d8>
 8004102:	2305      	movs	r3, #5
 8004104:	e006      	b.n	8004114 <HAL_GPIO_Init+0x1d8>
 8004106:	2303      	movs	r3, #3
 8004108:	e004      	b.n	8004114 <HAL_GPIO_Init+0x1d8>
 800410a:	2302      	movs	r3, #2
 800410c:	e002      	b.n	8004114 <HAL_GPIO_Init+0x1d8>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <HAL_GPIO_Init+0x1d8>
 8004112:	2300      	movs	r3, #0
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	2103      	movs	r1, #3
 8004118:	400a      	ands	r2, r1
 800411a:	00d2      	lsls	r2, r2, #3
 800411c:	4093      	lsls	r3, r2
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004124:	4936      	ldr	r1, [pc, #216]	@ (8004200 <HAL_GPIO_Init+0x2c4>)
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	089b      	lsrs	r3, r3, #2
 800412a:	3318      	adds	r3, #24
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004132:	4b33      	ldr	r3, [pc, #204]	@ (8004200 <HAL_GPIO_Init+0x2c4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	43da      	mvns	r2, r3
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	4013      	ands	r3, r2
 8004140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	2380      	movs	r3, #128	@ 0x80
 8004148:	035b      	lsls	r3, r3, #13
 800414a:	4013      	ands	r3, r2
 800414c:	d003      	beq.n	8004156 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4313      	orrs	r3, r2
 8004154:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004156:	4b2a      	ldr	r3, [pc, #168]	@ (8004200 <HAL_GPIO_Init+0x2c4>)
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800415c:	4b28      	ldr	r3, [pc, #160]	@ (8004200 <HAL_GPIO_Init+0x2c4>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	43da      	mvns	r2, r3
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	4013      	ands	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	2380      	movs	r3, #128	@ 0x80
 8004172:	039b      	lsls	r3, r3, #14
 8004174:	4013      	ands	r3, r2
 8004176:	d003      	beq.n	8004180 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004180:	4b1f      	ldr	r3, [pc, #124]	@ (8004200 <HAL_GPIO_Init+0x2c4>)
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004186:	4a1e      	ldr	r2, [pc, #120]	@ (8004200 <HAL_GPIO_Init+0x2c4>)
 8004188:	2384      	movs	r3, #132	@ 0x84
 800418a:	58d3      	ldr	r3, [r2, r3]
 800418c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	43da      	mvns	r2, r3
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	4013      	ands	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	2380      	movs	r3, #128	@ 0x80
 800419e:	029b      	lsls	r3, r3, #10
 80041a0:	4013      	ands	r3, r2
 80041a2:	d003      	beq.n	80041ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041ac:	4914      	ldr	r1, [pc, #80]	@ (8004200 <HAL_GPIO_Init+0x2c4>)
 80041ae:	2284      	movs	r2, #132	@ 0x84
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80041b4:	4a12      	ldr	r2, [pc, #72]	@ (8004200 <HAL_GPIO_Init+0x2c4>)
 80041b6:	2380      	movs	r3, #128	@ 0x80
 80041b8:	58d3      	ldr	r3, [r2, r3]
 80041ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	43da      	mvns	r2, r3
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	4013      	ands	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	2380      	movs	r3, #128	@ 0x80
 80041cc:	025b      	lsls	r3, r3, #9
 80041ce:	4013      	ands	r3, r2
 80041d0:	d003      	beq.n	80041da <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041da:	4909      	ldr	r1, [pc, #36]	@ (8004200 <HAL_GPIO_Init+0x2c4>)
 80041dc:	2280      	movs	r2, #128	@ 0x80
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	3301      	adds	r3, #1
 80041e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	40da      	lsrs	r2, r3
 80041f0:	1e13      	subs	r3, r2, #0
 80041f2:	d000      	beq.n	80041f6 <HAL_GPIO_Init+0x2ba>
 80041f4:	e6aa      	b.n	8003f4c <HAL_GPIO_Init+0x10>
  }
}
 80041f6:	46c0      	nop			@ (mov r8, r8)
 80041f8:	46c0      	nop			@ (mov r8, r8)
 80041fa:	46bd      	mov	sp, r7
 80041fc:	b006      	add	sp, #24
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40021800 	.word	0x40021800
 8004204:	50000400 	.word	0x50000400
 8004208:	50000800 	.word	0x50000800
 800420c:	50000c00 	.word	0x50000c00
 8004210:	50001000 	.word	0x50001000

08004214 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	000a      	movs	r2, r1
 800421e:	1cbb      	adds	r3, r7, #2
 8004220:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	1cba      	adds	r2, r7, #2
 8004228:	8812      	ldrh	r2, [r2, #0]
 800422a:	4013      	ands	r3, r2
 800422c:	d004      	beq.n	8004238 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800422e:	230f      	movs	r3, #15
 8004230:	18fb      	adds	r3, r7, r3
 8004232:	2201      	movs	r2, #1
 8004234:	701a      	strb	r2, [r3, #0]
 8004236:	e003      	b.n	8004240 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004238:	230f      	movs	r3, #15
 800423a:	18fb      	adds	r3, r7, r3
 800423c:	2200      	movs	r2, #0
 800423e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004240:	230f      	movs	r3, #15
 8004242:	18fb      	adds	r3, r7, r3
 8004244:	781b      	ldrb	r3, [r3, #0]
}
 8004246:	0018      	movs	r0, r3
 8004248:	46bd      	mov	sp, r7
 800424a:	b004      	add	sp, #16
 800424c:	bd80      	pop	{r7, pc}

0800424e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b082      	sub	sp, #8
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
 8004256:	0008      	movs	r0, r1
 8004258:	0011      	movs	r1, r2
 800425a:	1cbb      	adds	r3, r7, #2
 800425c:	1c02      	adds	r2, r0, #0
 800425e:	801a      	strh	r2, [r3, #0]
 8004260:	1c7b      	adds	r3, r7, #1
 8004262:	1c0a      	adds	r2, r1, #0
 8004264:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004266:	1c7b      	adds	r3, r7, #1
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d004      	beq.n	8004278 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800426e:	1cbb      	adds	r3, r7, #2
 8004270:	881a      	ldrh	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004276:	e003      	b.n	8004280 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004278:	1cbb      	adds	r3, r7, #2
 800427a:	881a      	ldrh	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004280:	46c0      	nop			@ (mov r8, r8)
 8004282:	46bd      	mov	sp, r7
 8004284:	b002      	add	sp, #8
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e08f      	b.n	80043ba <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2241      	movs	r2, #65	@ 0x41
 800429e:	5c9b      	ldrb	r3, [r3, r2]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d107      	bne.n	80042b6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2240      	movs	r2, #64	@ 0x40
 80042aa:	2100      	movs	r1, #0
 80042ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	0018      	movs	r0, r3
 80042b2:	f7ff fa8d 	bl	80037d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2241      	movs	r2, #65	@ 0x41
 80042ba:	2124      	movs	r1, #36	@ 0x24
 80042bc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2101      	movs	r1, #1
 80042ca:	438a      	bics	r2, r1
 80042cc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	493b      	ldr	r1, [pc, #236]	@ (80043c4 <HAL_I2C_Init+0x13c>)
 80042d8:	400a      	ands	r2, r1
 80042da:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4938      	ldr	r1, [pc, #224]	@ (80043c8 <HAL_I2C_Init+0x140>)
 80042e8:	400a      	ands	r2, r1
 80042ea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d108      	bne.n	8004306 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2180      	movs	r1, #128	@ 0x80
 80042fe:	0209      	lsls	r1, r1, #8
 8004300:	430a      	orrs	r2, r1
 8004302:	609a      	str	r2, [r3, #8]
 8004304:	e007      	b.n	8004316 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689a      	ldr	r2, [r3, #8]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2184      	movs	r1, #132	@ 0x84
 8004310:	0209      	lsls	r1, r1, #8
 8004312:	430a      	orrs	r2, r1
 8004314:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	2b02      	cmp	r3, #2
 800431c:	d109      	bne.n	8004332 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2180      	movs	r1, #128	@ 0x80
 800432a:	0109      	lsls	r1, r1, #4
 800432c:	430a      	orrs	r2, r1
 800432e:	605a      	str	r2, [r3, #4]
 8004330:	e007      	b.n	8004342 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4923      	ldr	r1, [pc, #140]	@ (80043cc <HAL_I2C_Init+0x144>)
 800433e:	400a      	ands	r2, r1
 8004340:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4920      	ldr	r1, [pc, #128]	@ (80043d0 <HAL_I2C_Init+0x148>)
 800434e:	430a      	orrs	r2, r1
 8004350:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	491a      	ldr	r1, [pc, #104]	@ (80043c8 <HAL_I2C_Init+0x140>)
 800435e:	400a      	ands	r2, r1
 8004360:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	691a      	ldr	r2, [r3, #16]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	431a      	orrs	r2, r3
 800436c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	69d9      	ldr	r1, [r3, #28]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1a      	ldr	r2, [r3, #32]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2101      	movs	r1, #1
 8004398:	430a      	orrs	r2, r1
 800439a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2241      	movs	r2, #65	@ 0x41
 80043a6:	2120      	movs	r1, #32
 80043a8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2242      	movs	r2, #66	@ 0x42
 80043b4:	2100      	movs	r1, #0
 80043b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	0018      	movs	r0, r3
 80043bc:	46bd      	mov	sp, r7
 80043be:	b002      	add	sp, #8
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	46c0      	nop			@ (mov r8, r8)
 80043c4:	f0ffffff 	.word	0xf0ffffff
 80043c8:	ffff7fff 	.word	0xffff7fff
 80043cc:	fffff7ff 	.word	0xfffff7ff
 80043d0:	02008000 	.word	0x02008000

080043d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80043d4:	b590      	push	{r4, r7, lr}
 80043d6:	b089      	sub	sp, #36	@ 0x24
 80043d8:	af02      	add	r7, sp, #8
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	0008      	movs	r0, r1
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	0019      	movs	r1, r3
 80043e2:	230a      	movs	r3, #10
 80043e4:	18fb      	adds	r3, r7, r3
 80043e6:	1c02      	adds	r2, r0, #0
 80043e8:	801a      	strh	r2, [r3, #0]
 80043ea:	2308      	movs	r3, #8
 80043ec:	18fb      	adds	r3, r7, r3
 80043ee:	1c0a      	adds	r2, r1, #0
 80043f0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2241      	movs	r2, #65	@ 0x41
 80043f6:	5c9b      	ldrb	r3, [r3, r2]
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b20      	cmp	r3, #32
 80043fc:	d000      	beq.n	8004400 <HAL_I2C_Master_Transmit+0x2c>
 80043fe:	e10a      	b.n	8004616 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2240      	movs	r2, #64	@ 0x40
 8004404:	5c9b      	ldrb	r3, [r3, r2]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_I2C_Master_Transmit+0x3a>
 800440a:	2302      	movs	r3, #2
 800440c:	e104      	b.n	8004618 <HAL_I2C_Master_Transmit+0x244>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2240      	movs	r2, #64	@ 0x40
 8004412:	2101      	movs	r1, #1
 8004414:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004416:	f7ff fc99 	bl	8003d4c <HAL_GetTick>
 800441a:	0003      	movs	r3, r0
 800441c:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800441e:	2380      	movs	r3, #128	@ 0x80
 8004420:	0219      	lsls	r1, r3, #8
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	2319      	movs	r3, #25
 800442a:	2201      	movs	r2, #1
 800442c:	f000 fa26 	bl	800487c <I2C_WaitOnFlagUntilTimeout>
 8004430:	1e03      	subs	r3, r0, #0
 8004432:	d001      	beq.n	8004438 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e0ef      	b.n	8004618 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2241      	movs	r2, #65	@ 0x41
 800443c:	2121      	movs	r1, #33	@ 0x21
 800443e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2242      	movs	r2, #66	@ 0x42
 8004444:	2110      	movs	r1, #16
 8004446:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2208      	movs	r2, #8
 8004458:	18ba      	adds	r2, r7, r2
 800445a:	8812      	ldrh	r2, [r2, #0]
 800445c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004468:	b29b      	uxth	r3, r3
 800446a:	2bff      	cmp	r3, #255	@ 0xff
 800446c:	d906      	bls.n	800447c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	22ff      	movs	r2, #255	@ 0xff
 8004472:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004474:	2380      	movs	r3, #128	@ 0x80
 8004476:	045b      	lsls	r3, r3, #17
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	e007      	b.n	800448c <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004480:	b29a      	uxth	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004486:	2380      	movs	r3, #128	@ 0x80
 8004488:	049b      	lsls	r3, r3, #18
 800448a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004490:	2b00      	cmp	r3, #0
 8004492:	d027      	beq.n	80044e4 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004498:	781a      	ldrb	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044bc:	3b01      	subs	r3, #1
 80044be:	b29a      	uxth	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	3301      	adds	r3, #1
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	697c      	ldr	r4, [r7, #20]
 80044d0:	230a      	movs	r3, #10
 80044d2:	18fb      	adds	r3, r7, r3
 80044d4:	8819      	ldrh	r1, [r3, #0]
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	4b51      	ldr	r3, [pc, #324]	@ (8004620 <HAL_I2C_Master_Transmit+0x24c>)
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	0023      	movs	r3, r4
 80044de:	f000 fc45 	bl	8004d6c <I2C_TransferConfig>
 80044e2:	e06f      	b.n	80045c4 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	697c      	ldr	r4, [r7, #20]
 80044ec:	230a      	movs	r3, #10
 80044ee:	18fb      	adds	r3, r7, r3
 80044f0:	8819      	ldrh	r1, [r3, #0]
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	4b4a      	ldr	r3, [pc, #296]	@ (8004620 <HAL_I2C_Master_Transmit+0x24c>)
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	0023      	movs	r3, r4
 80044fa:	f000 fc37 	bl	8004d6c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80044fe:	e061      	b.n	80045c4 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	0018      	movs	r0, r3
 8004508:	f000 fa10 	bl	800492c <I2C_WaitOnTXISFlagUntilTimeout>
 800450c:	1e03      	subs	r3, r0, #0
 800450e:	d001      	beq.n	8004514 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e081      	b.n	8004618 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004518:	781a      	ldrb	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452e:	b29b      	uxth	r3, r3
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800453c:	3b01      	subs	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004548:	b29b      	uxth	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d03a      	beq.n	80045c4 <HAL_I2C_Master_Transmit+0x1f0>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004552:	2b00      	cmp	r3, #0
 8004554:	d136      	bne.n	80045c4 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004556:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	0013      	movs	r3, r2
 8004560:	2200      	movs	r2, #0
 8004562:	2180      	movs	r1, #128	@ 0x80
 8004564:	f000 f98a 	bl	800487c <I2C_WaitOnFlagUntilTimeout>
 8004568:	1e03      	subs	r3, r0, #0
 800456a:	d001      	beq.n	8004570 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e053      	b.n	8004618 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004574:	b29b      	uxth	r3, r3
 8004576:	2bff      	cmp	r3, #255	@ 0xff
 8004578:	d911      	bls.n	800459e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	22ff      	movs	r2, #255	@ 0xff
 800457e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004584:	b2da      	uxtb	r2, r3
 8004586:	2380      	movs	r3, #128	@ 0x80
 8004588:	045c      	lsls	r4, r3, #17
 800458a:	230a      	movs	r3, #10
 800458c:	18fb      	adds	r3, r7, r3
 800458e:	8819      	ldrh	r1, [r3, #0]
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	2300      	movs	r3, #0
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	0023      	movs	r3, r4
 8004598:	f000 fbe8 	bl	8004d6c <I2C_TransferConfig>
 800459c:	e012      	b.n	80045c4 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	2380      	movs	r3, #128	@ 0x80
 80045b0:	049c      	lsls	r4, r3, #18
 80045b2:	230a      	movs	r3, #10
 80045b4:	18fb      	adds	r3, r7, r3
 80045b6:	8819      	ldrh	r1, [r3, #0]
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	2300      	movs	r3, #0
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	0023      	movs	r3, r4
 80045c0:	f000 fbd4 	bl	8004d6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d198      	bne.n	8004500 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	0018      	movs	r0, r3
 80045d6:	f000 f9ef 	bl	80049b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045da:	1e03      	subs	r3, r0, #0
 80045dc:	d001      	beq.n	80045e2 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e01a      	b.n	8004618 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2220      	movs	r2, #32
 80045e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	490b      	ldr	r1, [pc, #44]	@ (8004624 <HAL_I2C_Master_Transmit+0x250>)
 80045f6:	400a      	ands	r2, r1
 80045f8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2241      	movs	r2, #65	@ 0x41
 80045fe:	2120      	movs	r1, #32
 8004600:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2242      	movs	r2, #66	@ 0x42
 8004606:	2100      	movs	r1, #0
 8004608:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2240      	movs	r2, #64	@ 0x40
 800460e:	2100      	movs	r1, #0
 8004610:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	e000      	b.n	8004618 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8004616:	2302      	movs	r3, #2
  }
}
 8004618:	0018      	movs	r0, r3
 800461a:	46bd      	mov	sp, r7
 800461c:	b007      	add	sp, #28
 800461e:	bd90      	pop	{r4, r7, pc}
 8004620:	80002000 	.word	0x80002000
 8004624:	fe00e800 	.word	0xfe00e800

08004628 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004628:	b590      	push	{r4, r7, lr}
 800462a:	b089      	sub	sp, #36	@ 0x24
 800462c:	af02      	add	r7, sp, #8
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	0008      	movs	r0, r1
 8004632:	607a      	str	r2, [r7, #4]
 8004634:	0019      	movs	r1, r3
 8004636:	230a      	movs	r3, #10
 8004638:	18fb      	adds	r3, r7, r3
 800463a:	1c02      	adds	r2, r0, #0
 800463c:	801a      	strh	r2, [r3, #0]
 800463e:	2308      	movs	r3, #8
 8004640:	18fb      	adds	r3, r7, r3
 8004642:	1c0a      	adds	r2, r1, #0
 8004644:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2241      	movs	r2, #65	@ 0x41
 800464a:	5c9b      	ldrb	r3, [r3, r2]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b20      	cmp	r3, #32
 8004650:	d000      	beq.n	8004654 <HAL_I2C_Master_Receive+0x2c>
 8004652:	e0e8      	b.n	8004826 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2240      	movs	r2, #64	@ 0x40
 8004658:	5c9b      	ldrb	r3, [r3, r2]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d101      	bne.n	8004662 <HAL_I2C_Master_Receive+0x3a>
 800465e:	2302      	movs	r3, #2
 8004660:	e0e2      	b.n	8004828 <HAL_I2C_Master_Receive+0x200>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2240      	movs	r2, #64	@ 0x40
 8004666:	2101      	movs	r1, #1
 8004668:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800466a:	f7ff fb6f 	bl	8003d4c <HAL_GetTick>
 800466e:	0003      	movs	r3, r0
 8004670:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004672:	2380      	movs	r3, #128	@ 0x80
 8004674:	0219      	lsls	r1, r3, #8
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	2319      	movs	r3, #25
 800467e:	2201      	movs	r2, #1
 8004680:	f000 f8fc 	bl	800487c <I2C_WaitOnFlagUntilTimeout>
 8004684:	1e03      	subs	r3, r0, #0
 8004686:	d001      	beq.n	800468c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e0cd      	b.n	8004828 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2241      	movs	r2, #65	@ 0x41
 8004690:	2122      	movs	r1, #34	@ 0x22
 8004692:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2242      	movs	r2, #66	@ 0x42
 8004698:	2110      	movs	r1, #16
 800469a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2208      	movs	r2, #8
 80046ac:	18ba      	adds	r2, r7, r2
 80046ae:	8812      	ldrh	r2, [r2, #0]
 80046b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2bff      	cmp	r3, #255	@ 0xff
 80046c0:	d911      	bls.n	80046e6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	22ff      	movs	r2, #255	@ 0xff
 80046c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	2380      	movs	r3, #128	@ 0x80
 80046d0:	045c      	lsls	r4, r3, #17
 80046d2:	230a      	movs	r3, #10
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	8819      	ldrh	r1, [r3, #0]
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	4b55      	ldr	r3, [pc, #340]	@ (8004830 <HAL_I2C_Master_Receive+0x208>)
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	0023      	movs	r3, r4
 80046e0:	f000 fb44 	bl	8004d6c <I2C_TransferConfig>
 80046e4:	e076      	b.n	80047d4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	2380      	movs	r3, #128	@ 0x80
 80046f8:	049c      	lsls	r4, r3, #18
 80046fa:	230a      	movs	r3, #10
 80046fc:	18fb      	adds	r3, r7, r3
 80046fe:	8819      	ldrh	r1, [r3, #0]
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	4b4b      	ldr	r3, [pc, #300]	@ (8004830 <HAL_I2C_Master_Receive+0x208>)
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	0023      	movs	r3, r4
 8004708:	f000 fb30 	bl	8004d6c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800470c:	e062      	b.n	80047d4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	0018      	movs	r0, r3
 8004716:	f000 f993 	bl	8004a40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800471a:	1e03      	subs	r3, r0, #0
 800471c:	d001      	beq.n	8004722 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e082      	b.n	8004828 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800473e:	3b01      	subs	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d03a      	beq.n	80047d4 <HAL_I2C_Master_Receive+0x1ac>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004762:	2b00      	cmp	r3, #0
 8004764:	d136      	bne.n	80047d4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004766:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	0013      	movs	r3, r2
 8004770:	2200      	movs	r2, #0
 8004772:	2180      	movs	r1, #128	@ 0x80
 8004774:	f000 f882 	bl	800487c <I2C_WaitOnFlagUntilTimeout>
 8004778:	1e03      	subs	r3, r0, #0
 800477a:	d001      	beq.n	8004780 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e053      	b.n	8004828 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004784:	b29b      	uxth	r3, r3
 8004786:	2bff      	cmp	r3, #255	@ 0xff
 8004788:	d911      	bls.n	80047ae <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	22ff      	movs	r2, #255	@ 0xff
 800478e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004794:	b2da      	uxtb	r2, r3
 8004796:	2380      	movs	r3, #128	@ 0x80
 8004798:	045c      	lsls	r4, r3, #17
 800479a:	230a      	movs	r3, #10
 800479c:	18fb      	adds	r3, r7, r3
 800479e:	8819      	ldrh	r1, [r3, #0]
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	2300      	movs	r3, #0
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	0023      	movs	r3, r4
 80047a8:	f000 fae0 	bl	8004d6c <I2C_TransferConfig>
 80047ac:	e012      	b.n	80047d4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	2380      	movs	r3, #128	@ 0x80
 80047c0:	049c      	lsls	r4, r3, #18
 80047c2:	230a      	movs	r3, #10
 80047c4:	18fb      	adds	r3, r7, r3
 80047c6:	8819      	ldrh	r1, [r3, #0]
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	2300      	movs	r3, #0
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	0023      	movs	r3, r4
 80047d0:	f000 facc 	bl	8004d6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d197      	bne.n	800470e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	0018      	movs	r0, r3
 80047e6:	f000 f8e7 	bl	80049b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80047ea:	1e03      	subs	r3, r0, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e01a      	b.n	8004828 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2220      	movs	r2, #32
 80047f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	490b      	ldr	r1, [pc, #44]	@ (8004834 <HAL_I2C_Master_Receive+0x20c>)
 8004806:	400a      	ands	r2, r1
 8004808:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2241      	movs	r2, #65	@ 0x41
 800480e:	2120      	movs	r1, #32
 8004810:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2242      	movs	r2, #66	@ 0x42
 8004816:	2100      	movs	r1, #0
 8004818:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2240      	movs	r2, #64	@ 0x40
 800481e:	2100      	movs	r1, #0
 8004820:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004822:	2300      	movs	r3, #0
 8004824:	e000      	b.n	8004828 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004826:	2302      	movs	r3, #2
  }
}
 8004828:	0018      	movs	r0, r3
 800482a:	46bd      	mov	sp, r7
 800482c:	b007      	add	sp, #28
 800482e:	bd90      	pop	{r4, r7, pc}
 8004830:	80002400 	.word	0x80002400
 8004834:	fe00e800 	.word	0xfe00e800

08004838 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	2202      	movs	r2, #2
 8004848:	4013      	ands	r3, r2
 800484a:	2b02      	cmp	r3, #2
 800484c:	d103      	bne.n	8004856 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2200      	movs	r2, #0
 8004854:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	2201      	movs	r2, #1
 800485e:	4013      	ands	r3, r2
 8004860:	2b01      	cmp	r3, #1
 8004862:	d007      	beq.n	8004874 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2101      	movs	r1, #1
 8004870:	430a      	orrs	r2, r1
 8004872:	619a      	str	r2, [r3, #24]
  }
}
 8004874:	46c0      	nop			@ (mov r8, r8)
 8004876:	46bd      	mov	sp, r7
 8004878:	b002      	add	sp, #8
 800487a:	bd80      	pop	{r7, pc}

0800487c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	1dfb      	adds	r3, r7, #7
 800488a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800488c:	e03a      	b.n	8004904 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	6839      	ldr	r1, [r7, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	0018      	movs	r0, r3
 8004896:	f000 f971 	bl	8004b7c <I2C_IsErrorOccurred>
 800489a:	1e03      	subs	r3, r0, #0
 800489c:	d001      	beq.n	80048a2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e040      	b.n	8004924 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	3301      	adds	r3, #1
 80048a6:	d02d      	beq.n	8004904 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048a8:	f7ff fa50 	bl	8003d4c <HAL_GetTick>
 80048ac:	0002      	movs	r2, r0
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d302      	bcc.n	80048be <I2C_WaitOnFlagUntilTimeout+0x42>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d122      	bne.n	8004904 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	4013      	ands	r3, r2
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	425a      	negs	r2, r3
 80048ce:	4153      	adcs	r3, r2
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	001a      	movs	r2, r3
 80048d4:	1dfb      	adds	r3, r7, #7
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d113      	bne.n	8004904 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e0:	2220      	movs	r2, #32
 80048e2:	431a      	orrs	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2241      	movs	r2, #65	@ 0x41
 80048ec:	2120      	movs	r1, #32
 80048ee:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2242      	movs	r2, #66	@ 0x42
 80048f4:	2100      	movs	r1, #0
 80048f6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2240      	movs	r2, #64	@ 0x40
 80048fc:	2100      	movs	r1, #0
 80048fe:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e00f      	b.n	8004924 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	4013      	ands	r3, r2
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	425a      	negs	r2, r3
 8004914:	4153      	adcs	r3, r2
 8004916:	b2db      	uxtb	r3, r3
 8004918:	001a      	movs	r2, r3
 800491a:	1dfb      	adds	r3, r7, #7
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d0b5      	beq.n	800488e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	0018      	movs	r0, r3
 8004926:	46bd      	mov	sp, r7
 8004928:	b004      	add	sp, #16
 800492a:	bd80      	pop	{r7, pc}

0800492c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004938:	e032      	b.n	80049a0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	68b9      	ldr	r1, [r7, #8]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	0018      	movs	r0, r3
 8004942:	f000 f91b 	bl	8004b7c <I2C_IsErrorOccurred>
 8004946:	1e03      	subs	r3, r0, #0
 8004948:	d001      	beq.n	800494e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e030      	b.n	80049b0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	3301      	adds	r3, #1
 8004952:	d025      	beq.n	80049a0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004954:	f7ff f9fa 	bl	8003d4c <HAL_GetTick>
 8004958:	0002      	movs	r2, r0
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	68ba      	ldr	r2, [r7, #8]
 8004960:	429a      	cmp	r2, r3
 8004962:	d302      	bcc.n	800496a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d11a      	bne.n	80049a0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	2202      	movs	r2, #2
 8004972:	4013      	ands	r3, r2
 8004974:	2b02      	cmp	r3, #2
 8004976:	d013      	beq.n	80049a0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800497c:	2220      	movs	r2, #32
 800497e:	431a      	orrs	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2241      	movs	r2, #65	@ 0x41
 8004988:	2120      	movs	r1, #32
 800498a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2242      	movs	r2, #66	@ 0x42
 8004990:	2100      	movs	r1, #0
 8004992:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2240      	movs	r2, #64	@ 0x40
 8004998:	2100      	movs	r1, #0
 800499a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e007      	b.n	80049b0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	2202      	movs	r2, #2
 80049a8:	4013      	ands	r3, r2
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d1c5      	bne.n	800493a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	0018      	movs	r0, r3
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b004      	add	sp, #16
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049c4:	e02f      	b.n	8004a26 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	0018      	movs	r0, r3
 80049ce:	f000 f8d5 	bl	8004b7c <I2C_IsErrorOccurred>
 80049d2:	1e03      	subs	r3, r0, #0
 80049d4:	d001      	beq.n	80049da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e02d      	b.n	8004a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049da:	f7ff f9b7 	bl	8003d4c <HAL_GetTick>
 80049de:	0002      	movs	r2, r0
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d302      	bcc.n	80049f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d11a      	bne.n	8004a26 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	2220      	movs	r2, #32
 80049f8:	4013      	ands	r3, r2
 80049fa:	2b20      	cmp	r3, #32
 80049fc:	d013      	beq.n	8004a26 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a02:	2220      	movs	r2, #32
 8004a04:	431a      	orrs	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2241      	movs	r2, #65	@ 0x41
 8004a0e:	2120      	movs	r1, #32
 8004a10:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2242      	movs	r2, #66	@ 0x42
 8004a16:	2100      	movs	r1, #0
 8004a18:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2240      	movs	r2, #64	@ 0x40
 8004a1e:	2100      	movs	r1, #0
 8004a20:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e007      	b.n	8004a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	4013      	ands	r3, r2
 8004a30:	2b20      	cmp	r3, #32
 8004a32:	d1c8      	bne.n	80049c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	0018      	movs	r0, r3
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	b004      	add	sp, #16
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a4c:	2317      	movs	r3, #23
 8004a4e:	18fb      	adds	r3, r7, r3
 8004a50:	2200      	movs	r2, #0
 8004a52:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004a54:	e07b      	b.n	8004b4e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	68b9      	ldr	r1, [r7, #8]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f000 f88d 	bl	8004b7c <I2C_IsErrorOccurred>
 8004a62:	1e03      	subs	r3, r0, #0
 8004a64:	d003      	beq.n	8004a6e <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8004a66:	2317      	movs	r3, #23
 8004a68:	18fb      	adds	r3, r7, r3
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	2220      	movs	r2, #32
 8004a76:	4013      	ands	r3, r2
 8004a78:	2b20      	cmp	r3, #32
 8004a7a:	d140      	bne.n	8004afe <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8004a7c:	2117      	movs	r1, #23
 8004a7e:	187b      	adds	r3, r7, r1
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d13b      	bne.n	8004afe <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	2204      	movs	r2, #4
 8004a8e:	4013      	ands	r3, r2
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d106      	bne.n	8004aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004a9c:	187b      	adds	r3, r7, r1
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	2210      	movs	r2, #16
 8004aaa:	4013      	ands	r3, r2
 8004aac:	2b10      	cmp	r3, #16
 8004aae:	d123      	bne.n	8004af8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2210      	movs	r2, #16
 8004ab6:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2204      	movs	r2, #4
 8004abc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4929      	ldr	r1, [pc, #164]	@ (8004b78 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8004ad2:	400a      	ands	r2, r1
 8004ad4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2241      	movs	r2, #65	@ 0x41
 8004ada:	2120      	movs	r1, #32
 8004adc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2242      	movs	r2, #66	@ 0x42
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2240      	movs	r2, #64	@ 0x40
 8004aea:	2100      	movs	r1, #0
 8004aec:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004aee:	2317      	movs	r3, #23
 8004af0:	18fb      	adds	r3, r7, r3
 8004af2:	2201      	movs	r2, #1
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	e002      	b.n	8004afe <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004afe:	f7ff f925 	bl	8003d4c <HAL_GetTick>
 8004b02:	0002      	movs	r2, r0
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d302      	bcc.n	8004b14 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d11c      	bne.n	8004b4e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8004b14:	2017      	movs	r0, #23
 8004b16:	183b      	adds	r3, r7, r0
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d117      	bne.n	8004b4e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	2204      	movs	r2, #4
 8004b26:	4013      	ands	r3, r2
 8004b28:	2b04      	cmp	r3, #4
 8004b2a:	d010      	beq.n	8004b4e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b30:	2220      	movs	r2, #32
 8004b32:	431a      	orrs	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2241      	movs	r2, #65	@ 0x41
 8004b3c:	2120      	movs	r1, #32
 8004b3e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2240      	movs	r2, #64	@ 0x40
 8004b44:	2100      	movs	r1, #0
 8004b46:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004b48:	183b      	adds	r3, r7, r0
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	2204      	movs	r2, #4
 8004b56:	4013      	ands	r3, r2
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d005      	beq.n	8004b68 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004b5c:	2317      	movs	r3, #23
 8004b5e:	18fb      	adds	r3, r7, r3
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d100      	bne.n	8004b68 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004b66:	e776      	b.n	8004a56 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8004b68:	2317      	movs	r3, #23
 8004b6a:	18fb      	adds	r3, r7, r3
 8004b6c:	781b      	ldrb	r3, [r3, #0]
}
 8004b6e:	0018      	movs	r0, r3
 8004b70:	46bd      	mov	sp, r7
 8004b72:	b006      	add	sp, #24
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	46c0      	nop			@ (mov r8, r8)
 8004b78:	fe00e800 	.word	0xfe00e800

08004b7c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08a      	sub	sp, #40	@ 0x28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b88:	2327      	movs	r3, #39	@ 0x27
 8004b8a:	18fb      	adds	r3, r7, r3
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	2210      	movs	r2, #16
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	d100      	bne.n	8004baa <I2C_IsErrorOccurred+0x2e>
 8004ba8:	e079      	b.n	8004c9e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2210      	movs	r2, #16
 8004bb0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004bb2:	e057      	b.n	8004c64 <I2C_IsErrorOccurred+0xe8>
 8004bb4:	2227      	movs	r2, #39	@ 0x27
 8004bb6:	18bb      	adds	r3, r7, r2
 8004bb8:	18ba      	adds	r2, r7, r2
 8004bba:	7812      	ldrb	r2, [r2, #0]
 8004bbc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	d04f      	beq.n	8004c64 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004bc4:	f7ff f8c2 	bl	8003d4c <HAL_GetTick>
 8004bc8:	0002      	movs	r2, r0
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d302      	bcc.n	8004bda <I2C_IsErrorOccurred+0x5e>
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d144      	bne.n	8004c64 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	2380      	movs	r3, #128	@ 0x80
 8004be2:	01db      	lsls	r3, r3, #7
 8004be4:	4013      	ands	r3, r2
 8004be6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004be8:	2013      	movs	r0, #19
 8004bea:	183b      	adds	r3, r7, r0
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	2142      	movs	r1, #66	@ 0x42
 8004bf0:	5c52      	ldrb	r2, [r2, r1]
 8004bf2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699a      	ldr	r2, [r3, #24]
 8004bfa:	2380      	movs	r3, #128	@ 0x80
 8004bfc:	021b      	lsls	r3, r3, #8
 8004bfe:	401a      	ands	r2, r3
 8004c00:	2380      	movs	r3, #128	@ 0x80
 8004c02:	021b      	lsls	r3, r3, #8
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d126      	bne.n	8004c56 <I2C_IsErrorOccurred+0xda>
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	2380      	movs	r3, #128	@ 0x80
 8004c0c:	01db      	lsls	r3, r3, #7
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d021      	beq.n	8004c56 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004c12:	183b      	adds	r3, r7, r0
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	d01d      	beq.n	8004c56 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2180      	movs	r1, #128	@ 0x80
 8004c26:	01c9      	lsls	r1, r1, #7
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004c2c:	f7ff f88e 	bl	8003d4c <HAL_GetTick>
 8004c30:	0003      	movs	r3, r0
 8004c32:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c34:	e00f      	b.n	8004c56 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004c36:	f7ff f889 	bl	8003d4c <HAL_GetTick>
 8004c3a:	0002      	movs	r2, r0
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b19      	cmp	r3, #25
 8004c42:	d908      	bls.n	8004c56 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	2220      	movs	r2, #32
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004c4c:	2327      	movs	r3, #39	@ 0x27
 8004c4e:	18fb      	adds	r3, r7, r3
 8004c50:	2201      	movs	r2, #1
 8004c52:	701a      	strb	r2, [r3, #0]

              break;
 8004c54:	e006      	b.n	8004c64 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	4013      	ands	r3, r2
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	d1e8      	bne.n	8004c36 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	2b20      	cmp	r3, #32
 8004c70:	d004      	beq.n	8004c7c <I2C_IsErrorOccurred+0x100>
 8004c72:	2327      	movs	r3, #39	@ 0x27
 8004c74:	18fb      	adds	r3, r7, r3
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d09b      	beq.n	8004bb4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004c7c:	2327      	movs	r3, #39	@ 0x27
 8004c7e:	18fb      	adds	r3, r7, r3
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d103      	bne.n	8004c8e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	2204      	movs	r2, #4
 8004c92:	4313      	orrs	r3, r2
 8004c94:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004c96:	2327      	movs	r3, #39	@ 0x27
 8004c98:	18fb      	adds	r3, r7, r3
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	2380      	movs	r3, #128	@ 0x80
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	4013      	ands	r3, r2
 8004cae:	d00c      	beq.n	8004cca <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2280      	movs	r2, #128	@ 0x80
 8004cbe:	0052      	lsls	r2, r2, #1
 8004cc0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cc2:	2327      	movs	r3, #39	@ 0x27
 8004cc4:	18fb      	adds	r3, r7, r3
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	2380      	movs	r3, #128	@ 0x80
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	d00c      	beq.n	8004cee <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	2208      	movs	r2, #8
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2280      	movs	r2, #128	@ 0x80
 8004ce2:	00d2      	lsls	r2, r2, #3
 8004ce4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ce6:	2327      	movs	r3, #39	@ 0x27
 8004ce8:	18fb      	adds	r3, r7, r3
 8004cea:	2201      	movs	r2, #1
 8004cec:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	2380      	movs	r3, #128	@ 0x80
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	d00c      	beq.n	8004d12 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2280      	movs	r2, #128	@ 0x80
 8004d06:	0092      	lsls	r2, r2, #2
 8004d08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d0a:	2327      	movs	r3, #39	@ 0x27
 8004d0c:	18fb      	adds	r3, r7, r3
 8004d0e:	2201      	movs	r2, #1
 8004d10:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004d12:	2327      	movs	r3, #39	@ 0x27
 8004d14:	18fb      	adds	r3, r7, r3
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01d      	beq.n	8004d58 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	0018      	movs	r0, r3
 8004d20:	f7ff fd8a 	bl	8004838 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	490e      	ldr	r1, [pc, #56]	@ (8004d68 <I2C_IsErrorOccurred+0x1ec>)
 8004d30:	400a      	ands	r2, r1
 8004d32:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2241      	movs	r2, #65	@ 0x41
 8004d44:	2120      	movs	r1, #32
 8004d46:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2242      	movs	r2, #66	@ 0x42
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2240      	movs	r2, #64	@ 0x40
 8004d54:	2100      	movs	r1, #0
 8004d56:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004d58:	2327      	movs	r3, #39	@ 0x27
 8004d5a:	18fb      	adds	r3, r7, r3
 8004d5c:	781b      	ldrb	r3, [r3, #0]
}
 8004d5e:	0018      	movs	r0, r3
 8004d60:	46bd      	mov	sp, r7
 8004d62:	b00a      	add	sp, #40	@ 0x28
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	46c0      	nop			@ (mov r8, r8)
 8004d68:	fe00e800 	.word	0xfe00e800

08004d6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d6c:	b590      	push	{r4, r7, lr}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	0008      	movs	r0, r1
 8004d76:	0011      	movs	r1, r2
 8004d78:	607b      	str	r3, [r7, #4]
 8004d7a:	240a      	movs	r4, #10
 8004d7c:	193b      	adds	r3, r7, r4
 8004d7e:	1c02      	adds	r2, r0, #0
 8004d80:	801a      	strh	r2, [r3, #0]
 8004d82:	2009      	movs	r0, #9
 8004d84:	183b      	adds	r3, r7, r0
 8004d86:	1c0a      	adds	r2, r1, #0
 8004d88:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d8a:	193b      	adds	r3, r7, r4
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	059b      	lsls	r3, r3, #22
 8004d90:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d92:	183b      	adds	r3, r7, r0
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	0419      	lsls	r1, r3, #16
 8004d98:	23ff      	movs	r3, #255	@ 0xff
 8004d9a:	041b      	lsls	r3, r3, #16
 8004d9c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d9e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da6:	4313      	orrs	r3, r2
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	085b      	lsrs	r3, r3, #1
 8004dac:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004db6:	0d51      	lsrs	r1, r2, #21
 8004db8:	2280      	movs	r2, #128	@ 0x80
 8004dba:	00d2      	lsls	r2, r2, #3
 8004dbc:	400a      	ands	r2, r1
 8004dbe:	4907      	ldr	r1, [pc, #28]	@ (8004ddc <I2C_TransferConfig+0x70>)
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	43d2      	mvns	r2, r2
 8004dc4:	401a      	ands	r2, r3
 8004dc6:	0011      	movs	r1, r2
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004dd2:	46c0      	nop			@ (mov r8, r8)
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	b007      	add	sp, #28
 8004dd8:	bd90      	pop	{r4, r7, pc}
 8004dda:	46c0      	nop			@ (mov r8, r8)
 8004ddc:	03ff63ff 	.word	0x03ff63ff

08004de0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2241      	movs	r2, #65	@ 0x41
 8004dee:	5c9b      	ldrb	r3, [r3, r2]
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	d138      	bne.n	8004e68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2240      	movs	r2, #64	@ 0x40
 8004dfa:	5c9b      	ldrb	r3, [r3, r2]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d101      	bne.n	8004e04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e00:	2302      	movs	r3, #2
 8004e02:	e032      	b.n	8004e6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2240      	movs	r2, #64	@ 0x40
 8004e08:	2101      	movs	r1, #1
 8004e0a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2241      	movs	r2, #65	@ 0x41
 8004e10:	2124      	movs	r1, #36	@ 0x24
 8004e12:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2101      	movs	r1, #1
 8004e20:	438a      	bics	r2, r1
 8004e22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4911      	ldr	r1, [pc, #68]	@ (8004e74 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004e30:	400a      	ands	r2, r1
 8004e32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6819      	ldr	r1, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2101      	movs	r1, #1
 8004e50:	430a      	orrs	r2, r1
 8004e52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2241      	movs	r2, #65	@ 0x41
 8004e58:	2120      	movs	r1, #32
 8004e5a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2240      	movs	r2, #64	@ 0x40
 8004e60:	2100      	movs	r1, #0
 8004e62:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e64:	2300      	movs	r3, #0
 8004e66:	e000      	b.n	8004e6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e68:	2302      	movs	r3, #2
  }
}
 8004e6a:	0018      	movs	r0, r3
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	b002      	add	sp, #8
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	46c0      	nop			@ (mov r8, r8)
 8004e74:	ffffefff 	.word	0xffffefff

08004e78 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2241      	movs	r2, #65	@ 0x41
 8004e86:	5c9b      	ldrb	r3, [r3, r2]
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b20      	cmp	r3, #32
 8004e8c:	d139      	bne.n	8004f02 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2240      	movs	r2, #64	@ 0x40
 8004e92:	5c9b      	ldrb	r3, [r3, r2]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d101      	bne.n	8004e9c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	e033      	b.n	8004f04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2240      	movs	r2, #64	@ 0x40
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2241      	movs	r2, #65	@ 0x41
 8004ea8:	2124      	movs	r1, #36	@ 0x24
 8004eaa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	438a      	bics	r2, r1
 8004eba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4a11      	ldr	r2, [pc, #68]	@ (8004f0c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004ec8:	4013      	ands	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	021b      	lsls	r3, r3, #8
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2101      	movs	r1, #1
 8004eea:	430a      	orrs	r2, r1
 8004eec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2241      	movs	r2, #65	@ 0x41
 8004ef2:	2120      	movs	r1, #32
 8004ef4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2240      	movs	r2, #64	@ 0x40
 8004efa:	2100      	movs	r1, #0
 8004efc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	e000      	b.n	8004f04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f02:	2302      	movs	r3, #2
  }
}
 8004f04:	0018      	movs	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b004      	add	sp, #16
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	fffff0ff 	.word	0xfffff0ff

08004f10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004f18:	4b19      	ldr	r3, [pc, #100]	@ (8004f80 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a19      	ldr	r2, [pc, #100]	@ (8004f84 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004f1e:	4013      	ands	r3, r2
 8004f20:	0019      	movs	r1, r3
 8004f22:	4b17      	ldr	r3, [pc, #92]	@ (8004f80 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	2380      	movs	r3, #128	@ 0x80
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d11f      	bne.n	8004f74 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004f34:	4b14      	ldr	r3, [pc, #80]	@ (8004f88 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	0013      	movs	r3, r2
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	189b      	adds	r3, r3, r2
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	4912      	ldr	r1, [pc, #72]	@ (8004f8c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004f42:	0018      	movs	r0, r3
 8004f44:	f7fb f8f2 	bl	800012c <__udivsi3>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f4e:	e008      	b.n	8004f62 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	e001      	b.n	8004f62 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e009      	b.n	8004f76 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f62:	4b07      	ldr	r3, [pc, #28]	@ (8004f80 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004f64:	695a      	ldr	r2, [r3, #20]
 8004f66:	2380      	movs	r3, #128	@ 0x80
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	401a      	ands	r2, r3
 8004f6c:	2380      	movs	r3, #128	@ 0x80
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d0ed      	beq.n	8004f50 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	0018      	movs	r0, r3
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	b004      	add	sp, #16
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	46c0      	nop			@ (mov r8, r8)
 8004f80:	40007000 	.word	0x40007000
 8004f84:	fffff9ff 	.word	0xfffff9ff
 8004f88:	200004f4 	.word	0x200004f4
 8004f8c:	000f4240 	.word	0x000f4240

08004f90 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004f94:	4b03      	ldr	r3, [pc, #12]	@ (8004fa4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	23e0      	movs	r3, #224	@ 0xe0
 8004f9a:	01db      	lsls	r3, r3, #7
 8004f9c:	4013      	ands	r3, r2
}
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	40021000 	.word	0x40021000

08004fa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b088      	sub	sp, #32
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d102      	bne.n	8004fbc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	f000 fb50 	bl	800565c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	d100      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x20>
 8004fc6:	e07c      	b.n	80050c2 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fc8:	4bc3      	ldr	r3, [pc, #780]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	2238      	movs	r2, #56	@ 0x38
 8004fce:	4013      	ands	r3, r2
 8004fd0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fd2:	4bc1      	ldr	r3, [pc, #772]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	2203      	movs	r2, #3
 8004fd8:	4013      	ands	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	2b10      	cmp	r3, #16
 8004fe0:	d102      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x40>
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	2b03      	cmp	r3, #3
 8004fe6:	d002      	beq.n	8004fee <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	2b08      	cmp	r3, #8
 8004fec:	d10b      	bne.n	8005006 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fee:	4bba      	ldr	r3, [pc, #744]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	2380      	movs	r3, #128	@ 0x80
 8004ff4:	029b      	lsls	r3, r3, #10
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	d062      	beq.n	80050c0 <HAL_RCC_OscConfig+0x118>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d15e      	bne.n	80050c0 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e32a      	b.n	800565c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	2380      	movs	r3, #128	@ 0x80
 800500c:	025b      	lsls	r3, r3, #9
 800500e:	429a      	cmp	r2, r3
 8005010:	d107      	bne.n	8005022 <HAL_RCC_OscConfig+0x7a>
 8005012:	4bb1      	ldr	r3, [pc, #708]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	4bb0      	ldr	r3, [pc, #704]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 8005018:	2180      	movs	r1, #128	@ 0x80
 800501a:	0249      	lsls	r1, r1, #9
 800501c:	430a      	orrs	r2, r1
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	e020      	b.n	8005064 <HAL_RCC_OscConfig+0xbc>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	23a0      	movs	r3, #160	@ 0xa0
 8005028:	02db      	lsls	r3, r3, #11
 800502a:	429a      	cmp	r2, r3
 800502c:	d10e      	bne.n	800504c <HAL_RCC_OscConfig+0xa4>
 800502e:	4baa      	ldr	r3, [pc, #680]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	4ba9      	ldr	r3, [pc, #676]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 8005034:	2180      	movs	r1, #128	@ 0x80
 8005036:	02c9      	lsls	r1, r1, #11
 8005038:	430a      	orrs	r2, r1
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	4ba6      	ldr	r3, [pc, #664]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	4ba5      	ldr	r3, [pc, #660]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 8005042:	2180      	movs	r1, #128	@ 0x80
 8005044:	0249      	lsls	r1, r1, #9
 8005046:	430a      	orrs	r2, r1
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	e00b      	b.n	8005064 <HAL_RCC_OscConfig+0xbc>
 800504c:	4ba2      	ldr	r3, [pc, #648]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	4ba1      	ldr	r3, [pc, #644]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 8005052:	49a2      	ldr	r1, [pc, #648]	@ (80052dc <HAL_RCC_OscConfig+0x334>)
 8005054:	400a      	ands	r2, r1
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	4b9f      	ldr	r3, [pc, #636]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	4b9e      	ldr	r3, [pc, #632]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 800505e:	49a0      	ldr	r1, [pc, #640]	@ (80052e0 <HAL_RCC_OscConfig+0x338>)
 8005060:	400a      	ands	r2, r1
 8005062:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d014      	beq.n	8005096 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506c:	f7fe fe6e 	bl	8003d4c <HAL_GetTick>
 8005070:	0003      	movs	r3, r0
 8005072:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005074:	e008      	b.n	8005088 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005076:	f7fe fe69 	bl	8003d4c <HAL_GetTick>
 800507a:	0002      	movs	r2, r0
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b64      	cmp	r3, #100	@ 0x64
 8005082:	d901      	bls.n	8005088 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e2e9      	b.n	800565c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005088:	4b93      	ldr	r3, [pc, #588]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	2380      	movs	r3, #128	@ 0x80
 800508e:	029b      	lsls	r3, r3, #10
 8005090:	4013      	ands	r3, r2
 8005092:	d0f0      	beq.n	8005076 <HAL_RCC_OscConfig+0xce>
 8005094:	e015      	b.n	80050c2 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005096:	f7fe fe59 	bl	8003d4c <HAL_GetTick>
 800509a:	0003      	movs	r3, r0
 800509c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050a0:	f7fe fe54 	bl	8003d4c <HAL_GetTick>
 80050a4:	0002      	movs	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b64      	cmp	r3, #100	@ 0x64
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e2d4      	b.n	800565c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050b2:	4b89      	ldr	r3, [pc, #548]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	2380      	movs	r3, #128	@ 0x80
 80050b8:	029b      	lsls	r3, r3, #10
 80050ba:	4013      	ands	r3, r2
 80050bc:	d1f0      	bne.n	80050a0 <HAL_RCC_OscConfig+0xf8>
 80050be:	e000      	b.n	80050c2 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2202      	movs	r2, #2
 80050c8:	4013      	ands	r3, r2
 80050ca:	d100      	bne.n	80050ce <HAL_RCC_OscConfig+0x126>
 80050cc:	e099      	b.n	8005202 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ce:	4b82      	ldr	r3, [pc, #520]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	2238      	movs	r2, #56	@ 0x38
 80050d4:	4013      	ands	r3, r2
 80050d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050d8:	4b7f      	ldr	r3, [pc, #508]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	2203      	movs	r2, #3
 80050de:	4013      	ands	r3, r2
 80050e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	2b10      	cmp	r3, #16
 80050e6:	d102      	bne.n	80050ee <HAL_RCC_OscConfig+0x146>
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d002      	beq.n	80050f4 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d135      	bne.n	8005160 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050f4:	4b78      	ldr	r3, [pc, #480]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	2380      	movs	r3, #128	@ 0x80
 80050fa:	00db      	lsls	r3, r3, #3
 80050fc:	4013      	ands	r3, r2
 80050fe:	d005      	beq.n	800510c <HAL_RCC_OscConfig+0x164>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e2a7      	b.n	800565c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800510c:	4b72      	ldr	r3, [pc, #456]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	4a74      	ldr	r2, [pc, #464]	@ (80052e4 <HAL_RCC_OscConfig+0x33c>)
 8005112:	4013      	ands	r3, r2
 8005114:	0019      	movs	r1, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	021a      	lsls	r2, r3, #8
 800511c:	4b6e      	ldr	r3, [pc, #440]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 800511e:	430a      	orrs	r2, r1
 8005120:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d112      	bne.n	800514e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005128:	4b6b      	ldr	r3, [pc, #428]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a6e      	ldr	r2, [pc, #440]	@ (80052e8 <HAL_RCC_OscConfig+0x340>)
 800512e:	4013      	ands	r3, r2
 8005130:	0019      	movs	r1, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691a      	ldr	r2, [r3, #16]
 8005136:	4b68      	ldr	r3, [pc, #416]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 8005138:	430a      	orrs	r2, r1
 800513a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800513c:	4b66      	ldr	r3, [pc, #408]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	0adb      	lsrs	r3, r3, #11
 8005142:	2207      	movs	r2, #7
 8005144:	4013      	ands	r3, r2
 8005146:	4a69      	ldr	r2, [pc, #420]	@ (80052ec <HAL_RCC_OscConfig+0x344>)
 8005148:	40da      	lsrs	r2, r3
 800514a:	4b69      	ldr	r3, [pc, #420]	@ (80052f0 <HAL_RCC_OscConfig+0x348>)
 800514c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800514e:	4b69      	ldr	r3, [pc, #420]	@ (80052f4 <HAL_RCC_OscConfig+0x34c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	0018      	movs	r0, r3
 8005154:	f7fe fd9e 	bl	8003c94 <HAL_InitTick>
 8005158:	1e03      	subs	r3, r0, #0
 800515a:	d051      	beq.n	8005200 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e27d      	b.n	800565c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d030      	beq.n	80051ca <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005168:	4b5b      	ldr	r3, [pc, #364]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a5e      	ldr	r2, [pc, #376]	@ (80052e8 <HAL_RCC_OscConfig+0x340>)
 800516e:	4013      	ands	r3, r2
 8005170:	0019      	movs	r1, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691a      	ldr	r2, [r3, #16]
 8005176:	4b58      	ldr	r3, [pc, #352]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 8005178:	430a      	orrs	r2, r1
 800517a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800517c:	4b56      	ldr	r3, [pc, #344]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	4b55      	ldr	r3, [pc, #340]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 8005182:	2180      	movs	r1, #128	@ 0x80
 8005184:	0049      	lsls	r1, r1, #1
 8005186:	430a      	orrs	r2, r1
 8005188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518a:	f7fe fddf 	bl	8003d4c <HAL_GetTick>
 800518e:	0003      	movs	r3, r0
 8005190:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005194:	f7fe fdda 	bl	8003d4c <HAL_GetTick>
 8005198:	0002      	movs	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e25a      	b.n	800565c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051a6:	4b4c      	ldr	r3, [pc, #304]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	2380      	movs	r3, #128	@ 0x80
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	4013      	ands	r3, r2
 80051b0:	d0f0      	beq.n	8005194 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b2:	4b49      	ldr	r3, [pc, #292]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	4a4b      	ldr	r2, [pc, #300]	@ (80052e4 <HAL_RCC_OscConfig+0x33c>)
 80051b8:	4013      	ands	r3, r2
 80051ba:	0019      	movs	r1, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	021a      	lsls	r2, r3, #8
 80051c2:	4b45      	ldr	r3, [pc, #276]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 80051c4:	430a      	orrs	r2, r1
 80051c6:	605a      	str	r2, [r3, #4]
 80051c8:	e01b      	b.n	8005202 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80051ca:	4b43      	ldr	r3, [pc, #268]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	4b42      	ldr	r3, [pc, #264]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 80051d0:	4949      	ldr	r1, [pc, #292]	@ (80052f8 <HAL_RCC_OscConfig+0x350>)
 80051d2:	400a      	ands	r2, r1
 80051d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d6:	f7fe fdb9 	bl	8003d4c <HAL_GetTick>
 80051da:	0003      	movs	r3, r0
 80051dc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051e0:	f7fe fdb4 	bl	8003d4c <HAL_GetTick>
 80051e4:	0002      	movs	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e234      	b.n	800565c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051f2:	4b39      	ldr	r3, [pc, #228]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	2380      	movs	r3, #128	@ 0x80
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	4013      	ands	r3, r2
 80051fc:	d1f0      	bne.n	80051e0 <HAL_RCC_OscConfig+0x238>
 80051fe:	e000      	b.n	8005202 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005200:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2208      	movs	r2, #8
 8005208:	4013      	ands	r3, r2
 800520a:	d047      	beq.n	800529c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800520c:	4b32      	ldr	r3, [pc, #200]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	2238      	movs	r2, #56	@ 0x38
 8005212:	4013      	ands	r3, r2
 8005214:	2b18      	cmp	r3, #24
 8005216:	d10a      	bne.n	800522e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005218:	4b2f      	ldr	r3, [pc, #188]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 800521a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800521c:	2202      	movs	r2, #2
 800521e:	4013      	ands	r3, r2
 8005220:	d03c      	beq.n	800529c <HAL_RCC_OscConfig+0x2f4>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d138      	bne.n	800529c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e216      	b.n	800565c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d019      	beq.n	800526a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005236:	4b28      	ldr	r3, [pc, #160]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 8005238:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800523a:	4b27      	ldr	r3, [pc, #156]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 800523c:	2101      	movs	r1, #1
 800523e:	430a      	orrs	r2, r1
 8005240:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005242:	f7fe fd83 	bl	8003d4c <HAL_GetTick>
 8005246:	0003      	movs	r3, r0
 8005248:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800524a:	e008      	b.n	800525e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800524c:	f7fe fd7e 	bl	8003d4c <HAL_GetTick>
 8005250:	0002      	movs	r2, r0
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e1fe      	b.n	800565c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800525e:	4b1e      	ldr	r3, [pc, #120]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 8005260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005262:	2202      	movs	r2, #2
 8005264:	4013      	ands	r3, r2
 8005266:	d0f1      	beq.n	800524c <HAL_RCC_OscConfig+0x2a4>
 8005268:	e018      	b.n	800529c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800526a:	4b1b      	ldr	r3, [pc, #108]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 800526c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800526e:	4b1a      	ldr	r3, [pc, #104]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 8005270:	2101      	movs	r1, #1
 8005272:	438a      	bics	r2, r1
 8005274:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005276:	f7fe fd69 	bl	8003d4c <HAL_GetTick>
 800527a:	0003      	movs	r3, r0
 800527c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005280:	f7fe fd64 	bl	8003d4c <HAL_GetTick>
 8005284:	0002      	movs	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e1e4      	b.n	800565c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005292:	4b11      	ldr	r3, [pc, #68]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 8005294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005296:	2202      	movs	r2, #2
 8005298:	4013      	ands	r3, r2
 800529a:	d1f1      	bne.n	8005280 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2204      	movs	r2, #4
 80052a2:	4013      	ands	r3, r2
 80052a4:	d100      	bne.n	80052a8 <HAL_RCC_OscConfig+0x300>
 80052a6:	e0c7      	b.n	8005438 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052a8:	231f      	movs	r3, #31
 80052aa:	18fb      	adds	r3, r7, r3
 80052ac:	2200      	movs	r2, #0
 80052ae:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80052b0:	4b09      	ldr	r3, [pc, #36]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	2238      	movs	r2, #56	@ 0x38
 80052b6:	4013      	ands	r3, r2
 80052b8:	2b20      	cmp	r3, #32
 80052ba:	d11f      	bne.n	80052fc <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80052bc:	4b06      	ldr	r3, [pc, #24]	@ (80052d8 <HAL_RCC_OscConfig+0x330>)
 80052be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c0:	2202      	movs	r2, #2
 80052c2:	4013      	ands	r3, r2
 80052c4:	d100      	bne.n	80052c8 <HAL_RCC_OscConfig+0x320>
 80052c6:	e0b7      	b.n	8005438 <HAL_RCC_OscConfig+0x490>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d000      	beq.n	80052d2 <HAL_RCC_OscConfig+0x32a>
 80052d0:	e0b2      	b.n	8005438 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e1c2      	b.n	800565c <HAL_RCC_OscConfig+0x6b4>
 80052d6:	46c0      	nop			@ (mov r8, r8)
 80052d8:	40021000 	.word	0x40021000
 80052dc:	fffeffff 	.word	0xfffeffff
 80052e0:	fffbffff 	.word	0xfffbffff
 80052e4:	ffff80ff 	.word	0xffff80ff
 80052e8:	ffffc7ff 	.word	0xffffc7ff
 80052ec:	00f42400 	.word	0x00f42400
 80052f0:	200004f4 	.word	0x200004f4
 80052f4:	200004f8 	.word	0x200004f8
 80052f8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052fc:	4bb5      	ldr	r3, [pc, #724]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 80052fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005300:	2380      	movs	r3, #128	@ 0x80
 8005302:	055b      	lsls	r3, r3, #21
 8005304:	4013      	ands	r3, r2
 8005306:	d101      	bne.n	800530c <HAL_RCC_OscConfig+0x364>
 8005308:	2301      	movs	r3, #1
 800530a:	e000      	b.n	800530e <HAL_RCC_OscConfig+0x366>
 800530c:	2300      	movs	r3, #0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d011      	beq.n	8005336 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005312:	4bb0      	ldr	r3, [pc, #704]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 8005314:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005316:	4baf      	ldr	r3, [pc, #700]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 8005318:	2180      	movs	r1, #128	@ 0x80
 800531a:	0549      	lsls	r1, r1, #21
 800531c:	430a      	orrs	r2, r1
 800531e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005320:	4bac      	ldr	r3, [pc, #688]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 8005322:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005324:	2380      	movs	r3, #128	@ 0x80
 8005326:	055b      	lsls	r3, r3, #21
 8005328:	4013      	ands	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800532e:	231f      	movs	r3, #31
 8005330:	18fb      	adds	r3, r7, r3
 8005332:	2201      	movs	r2, #1
 8005334:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005336:	4ba8      	ldr	r3, [pc, #672]	@ (80055d8 <HAL_RCC_OscConfig+0x630>)
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	2380      	movs	r3, #128	@ 0x80
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	4013      	ands	r3, r2
 8005340:	d11a      	bne.n	8005378 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005342:	4ba5      	ldr	r3, [pc, #660]	@ (80055d8 <HAL_RCC_OscConfig+0x630>)
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	4ba4      	ldr	r3, [pc, #656]	@ (80055d8 <HAL_RCC_OscConfig+0x630>)
 8005348:	2180      	movs	r1, #128	@ 0x80
 800534a:	0049      	lsls	r1, r1, #1
 800534c:	430a      	orrs	r2, r1
 800534e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005350:	f7fe fcfc 	bl	8003d4c <HAL_GetTick>
 8005354:	0003      	movs	r3, r0
 8005356:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005358:	e008      	b.n	800536c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800535a:	f7fe fcf7 	bl	8003d4c <HAL_GetTick>
 800535e:	0002      	movs	r2, r0
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d901      	bls.n	800536c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e177      	b.n	800565c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800536c:	4b9a      	ldr	r3, [pc, #616]	@ (80055d8 <HAL_RCC_OscConfig+0x630>)
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	2380      	movs	r3, #128	@ 0x80
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	4013      	ands	r3, r2
 8005376:	d0f0      	beq.n	800535a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d106      	bne.n	800538e <HAL_RCC_OscConfig+0x3e6>
 8005380:	4b94      	ldr	r3, [pc, #592]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 8005382:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005384:	4b93      	ldr	r3, [pc, #588]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 8005386:	2101      	movs	r1, #1
 8005388:	430a      	orrs	r2, r1
 800538a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800538c:	e01c      	b.n	80053c8 <HAL_RCC_OscConfig+0x420>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	2b05      	cmp	r3, #5
 8005394:	d10c      	bne.n	80053b0 <HAL_RCC_OscConfig+0x408>
 8005396:	4b8f      	ldr	r3, [pc, #572]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 8005398:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800539a:	4b8e      	ldr	r3, [pc, #568]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 800539c:	2104      	movs	r1, #4
 800539e:	430a      	orrs	r2, r1
 80053a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80053a2:	4b8c      	ldr	r3, [pc, #560]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 80053a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80053a6:	4b8b      	ldr	r3, [pc, #556]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 80053a8:	2101      	movs	r1, #1
 80053aa:	430a      	orrs	r2, r1
 80053ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80053ae:	e00b      	b.n	80053c8 <HAL_RCC_OscConfig+0x420>
 80053b0:	4b88      	ldr	r3, [pc, #544]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 80053b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80053b4:	4b87      	ldr	r3, [pc, #540]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 80053b6:	2101      	movs	r1, #1
 80053b8:	438a      	bics	r2, r1
 80053ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80053bc:	4b85      	ldr	r3, [pc, #532]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 80053be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80053c0:	4b84      	ldr	r3, [pc, #528]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 80053c2:	2104      	movs	r1, #4
 80053c4:	438a      	bics	r2, r1
 80053c6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d014      	beq.n	80053fa <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d0:	f7fe fcbc 	bl	8003d4c <HAL_GetTick>
 80053d4:	0003      	movs	r3, r0
 80053d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053d8:	e009      	b.n	80053ee <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053da:	f7fe fcb7 	bl	8003d4c <HAL_GetTick>
 80053de:	0002      	movs	r2, r0
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	4a7d      	ldr	r2, [pc, #500]	@ (80055dc <HAL_RCC_OscConfig+0x634>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e136      	b.n	800565c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ee:	4b79      	ldr	r3, [pc, #484]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 80053f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053f2:	2202      	movs	r2, #2
 80053f4:	4013      	ands	r3, r2
 80053f6:	d0f0      	beq.n	80053da <HAL_RCC_OscConfig+0x432>
 80053f8:	e013      	b.n	8005422 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fa:	f7fe fca7 	bl	8003d4c <HAL_GetTick>
 80053fe:	0003      	movs	r3, r0
 8005400:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005402:	e009      	b.n	8005418 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005404:	f7fe fca2 	bl	8003d4c <HAL_GetTick>
 8005408:	0002      	movs	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	4a73      	ldr	r2, [pc, #460]	@ (80055dc <HAL_RCC_OscConfig+0x634>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d901      	bls.n	8005418 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e121      	b.n	800565c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005418:	4b6e      	ldr	r3, [pc, #440]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 800541a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800541c:	2202      	movs	r2, #2
 800541e:	4013      	ands	r3, r2
 8005420:	d1f0      	bne.n	8005404 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005422:	231f      	movs	r3, #31
 8005424:	18fb      	adds	r3, r7, r3
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d105      	bne.n	8005438 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800542c:	4b69      	ldr	r3, [pc, #420]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 800542e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005430:	4b68      	ldr	r3, [pc, #416]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 8005432:	496b      	ldr	r1, [pc, #428]	@ (80055e0 <HAL_RCC_OscConfig+0x638>)
 8005434:	400a      	ands	r2, r1
 8005436:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2220      	movs	r2, #32
 800543e:	4013      	ands	r3, r2
 8005440:	d039      	beq.n	80054b6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d01b      	beq.n	8005482 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800544a:	4b62      	ldr	r3, [pc, #392]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	4b61      	ldr	r3, [pc, #388]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 8005450:	2180      	movs	r1, #128	@ 0x80
 8005452:	03c9      	lsls	r1, r1, #15
 8005454:	430a      	orrs	r2, r1
 8005456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005458:	f7fe fc78 	bl	8003d4c <HAL_GetTick>
 800545c:	0003      	movs	r3, r0
 800545e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005460:	e008      	b.n	8005474 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005462:	f7fe fc73 	bl	8003d4c <HAL_GetTick>
 8005466:	0002      	movs	r2, r0
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b02      	cmp	r3, #2
 800546e:	d901      	bls.n	8005474 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e0f3      	b.n	800565c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005474:	4b57      	ldr	r3, [pc, #348]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	2380      	movs	r3, #128	@ 0x80
 800547a:	041b      	lsls	r3, r3, #16
 800547c:	4013      	ands	r3, r2
 800547e:	d0f0      	beq.n	8005462 <HAL_RCC_OscConfig+0x4ba>
 8005480:	e019      	b.n	80054b6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005482:	4b54      	ldr	r3, [pc, #336]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	4b53      	ldr	r3, [pc, #332]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 8005488:	4956      	ldr	r1, [pc, #344]	@ (80055e4 <HAL_RCC_OscConfig+0x63c>)
 800548a:	400a      	ands	r2, r1
 800548c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800548e:	f7fe fc5d 	bl	8003d4c <HAL_GetTick>
 8005492:	0003      	movs	r3, r0
 8005494:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005498:	f7fe fc58 	bl	8003d4c <HAL_GetTick>
 800549c:	0002      	movs	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e0d8      	b.n	800565c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80054aa:	4b4a      	ldr	r3, [pc, #296]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	2380      	movs	r3, #128	@ 0x80
 80054b0:	041b      	lsls	r3, r3, #16
 80054b2:	4013      	ands	r3, r2
 80054b4:	d1f0      	bne.n	8005498 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d100      	bne.n	80054c0 <HAL_RCC_OscConfig+0x518>
 80054be:	e0cc      	b.n	800565a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054c0:	4b44      	ldr	r3, [pc, #272]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2238      	movs	r2, #56	@ 0x38
 80054c6:	4013      	ands	r3, r2
 80054c8:	2b10      	cmp	r3, #16
 80054ca:	d100      	bne.n	80054ce <HAL_RCC_OscConfig+0x526>
 80054cc:	e07b      	b.n	80055c6 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d156      	bne.n	8005584 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054d6:	4b3f      	ldr	r3, [pc, #252]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	4b3e      	ldr	r3, [pc, #248]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 80054dc:	4942      	ldr	r1, [pc, #264]	@ (80055e8 <HAL_RCC_OscConfig+0x640>)
 80054de:	400a      	ands	r2, r1
 80054e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e2:	f7fe fc33 	bl	8003d4c <HAL_GetTick>
 80054e6:	0003      	movs	r3, r0
 80054e8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054ec:	f7fe fc2e 	bl	8003d4c <HAL_GetTick>
 80054f0:	0002      	movs	r2, r0
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e0ae      	b.n	800565c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054fe:	4b35      	ldr	r3, [pc, #212]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	2380      	movs	r3, #128	@ 0x80
 8005504:	049b      	lsls	r3, r3, #18
 8005506:	4013      	ands	r3, r2
 8005508:	d1f0      	bne.n	80054ec <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800550a:	4b32      	ldr	r3, [pc, #200]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	4a37      	ldr	r2, [pc, #220]	@ (80055ec <HAL_RCC_OscConfig+0x644>)
 8005510:	4013      	ands	r3, r2
 8005512:	0019      	movs	r1, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800551c:	431a      	orrs	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005522:	021b      	lsls	r3, r3, #8
 8005524:	431a      	orrs	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800552a:	431a      	orrs	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005530:	431a      	orrs	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005536:	431a      	orrs	r2, r3
 8005538:	4b26      	ldr	r3, [pc, #152]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 800553a:	430a      	orrs	r2, r1
 800553c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800553e:	4b25      	ldr	r3, [pc, #148]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	4b24      	ldr	r3, [pc, #144]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 8005544:	2180      	movs	r1, #128	@ 0x80
 8005546:	0449      	lsls	r1, r1, #17
 8005548:	430a      	orrs	r2, r1
 800554a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800554c:	4b21      	ldr	r3, [pc, #132]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	4b20      	ldr	r3, [pc, #128]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 8005552:	2180      	movs	r1, #128	@ 0x80
 8005554:	0549      	lsls	r1, r1, #21
 8005556:	430a      	orrs	r2, r1
 8005558:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555a:	f7fe fbf7 	bl	8003d4c <HAL_GetTick>
 800555e:	0003      	movs	r3, r0
 8005560:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005564:	f7fe fbf2 	bl	8003d4c <HAL_GetTick>
 8005568:	0002      	movs	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e072      	b.n	800565c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005576:	4b17      	ldr	r3, [pc, #92]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	2380      	movs	r3, #128	@ 0x80
 800557c:	049b      	lsls	r3, r3, #18
 800557e:	4013      	ands	r3, r2
 8005580:	d0f0      	beq.n	8005564 <HAL_RCC_OscConfig+0x5bc>
 8005582:	e06a      	b.n	800565a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005584:	4b13      	ldr	r3, [pc, #76]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	4b12      	ldr	r3, [pc, #72]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 800558a:	4917      	ldr	r1, [pc, #92]	@ (80055e8 <HAL_RCC_OscConfig+0x640>)
 800558c:	400a      	ands	r2, r1
 800558e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005590:	f7fe fbdc 	bl	8003d4c <HAL_GetTick>
 8005594:	0003      	movs	r3, r0
 8005596:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005598:	e008      	b.n	80055ac <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800559a:	f7fe fbd7 	bl	8003d4c <HAL_GetTick>
 800559e:	0002      	movs	r2, r0
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d901      	bls.n	80055ac <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e057      	b.n	800565c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055ac:	4b09      	ldr	r3, [pc, #36]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	2380      	movs	r3, #128	@ 0x80
 80055b2:	049b      	lsls	r3, r3, #18
 80055b4:	4013      	ands	r3, r2
 80055b6:	d1f0      	bne.n	800559a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80055b8:	4b06      	ldr	r3, [pc, #24]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	4b05      	ldr	r3, [pc, #20]	@ (80055d4 <HAL_RCC_OscConfig+0x62c>)
 80055be:	490c      	ldr	r1, [pc, #48]	@ (80055f0 <HAL_RCC_OscConfig+0x648>)
 80055c0:	400a      	ands	r2, r1
 80055c2:	60da      	str	r2, [r3, #12]
 80055c4:	e049      	b.n	800565a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d112      	bne.n	80055f4 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e044      	b.n	800565c <HAL_RCC_OscConfig+0x6b4>
 80055d2:	46c0      	nop			@ (mov r8, r8)
 80055d4:	40021000 	.word	0x40021000
 80055d8:	40007000 	.word	0x40007000
 80055dc:	00001388 	.word	0x00001388
 80055e0:	efffffff 	.word	0xefffffff
 80055e4:	ffbfffff 	.word	0xffbfffff
 80055e8:	feffffff 	.word	0xfeffffff
 80055ec:	11c1808c 	.word	0x11c1808c
 80055f0:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80055f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005664 <HAL_RCC_OscConfig+0x6bc>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2203      	movs	r2, #3
 80055fe:	401a      	ands	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005604:	429a      	cmp	r2, r3
 8005606:	d126      	bne.n	8005656 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	2270      	movs	r2, #112	@ 0x70
 800560c:	401a      	ands	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005612:	429a      	cmp	r2, r3
 8005614:	d11f      	bne.n	8005656 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	23fe      	movs	r3, #254	@ 0xfe
 800561a:	01db      	lsls	r3, r3, #7
 800561c:	401a      	ands	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005622:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005624:	429a      	cmp	r2, r3
 8005626:	d116      	bne.n	8005656 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	23f8      	movs	r3, #248	@ 0xf8
 800562c:	039b      	lsls	r3, r3, #14
 800562e:	401a      	ands	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005634:	429a      	cmp	r2, r3
 8005636:	d10e      	bne.n	8005656 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	23e0      	movs	r3, #224	@ 0xe0
 800563c:	051b      	lsls	r3, r3, #20
 800563e:	401a      	ands	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005644:	429a      	cmp	r2, r3
 8005646:	d106      	bne.n	8005656 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	0f5b      	lsrs	r3, r3, #29
 800564c:	075a      	lsls	r2, r3, #29
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005652:	429a      	cmp	r2, r3
 8005654:	d001      	beq.n	800565a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	0018      	movs	r0, r3
 800565e:	46bd      	mov	sp, r7
 8005660:	b008      	add	sp, #32
 8005662:	bd80      	pop	{r7, pc}
 8005664:	40021000 	.word	0x40021000

08005668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e0e9      	b.n	8005850 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800567c:	4b76      	ldr	r3, [pc, #472]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2207      	movs	r2, #7
 8005682:	4013      	ands	r3, r2
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d91e      	bls.n	80056c8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800568a:	4b73      	ldr	r3, [pc, #460]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2207      	movs	r2, #7
 8005690:	4393      	bics	r3, r2
 8005692:	0019      	movs	r1, r3
 8005694:	4b70      	ldr	r3, [pc, #448]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800569c:	f7fe fb56 	bl	8003d4c <HAL_GetTick>
 80056a0:	0003      	movs	r3, r0
 80056a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80056a4:	e009      	b.n	80056ba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056a6:	f7fe fb51 	bl	8003d4c <HAL_GetTick>
 80056aa:	0002      	movs	r2, r0
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	4a6a      	ldr	r2, [pc, #424]	@ (800585c <HAL_RCC_ClockConfig+0x1f4>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e0ca      	b.n	8005850 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80056ba:	4b67      	ldr	r3, [pc, #412]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2207      	movs	r2, #7
 80056c0:	4013      	ands	r3, r2
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d1ee      	bne.n	80056a6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2202      	movs	r2, #2
 80056ce:	4013      	ands	r3, r2
 80056d0:	d015      	beq.n	80056fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2204      	movs	r2, #4
 80056d8:	4013      	ands	r3, r2
 80056da:	d006      	beq.n	80056ea <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80056dc:	4b60      	ldr	r3, [pc, #384]	@ (8005860 <HAL_RCC_ClockConfig+0x1f8>)
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	4b5f      	ldr	r3, [pc, #380]	@ (8005860 <HAL_RCC_ClockConfig+0x1f8>)
 80056e2:	21e0      	movs	r1, #224	@ 0xe0
 80056e4:	01c9      	lsls	r1, r1, #7
 80056e6:	430a      	orrs	r2, r1
 80056e8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056ea:	4b5d      	ldr	r3, [pc, #372]	@ (8005860 <HAL_RCC_ClockConfig+0x1f8>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	4a5d      	ldr	r2, [pc, #372]	@ (8005864 <HAL_RCC_ClockConfig+0x1fc>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	0019      	movs	r1, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	4b59      	ldr	r3, [pc, #356]	@ (8005860 <HAL_RCC_ClockConfig+0x1f8>)
 80056fa:	430a      	orrs	r2, r1
 80056fc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2201      	movs	r2, #1
 8005704:	4013      	ands	r3, r2
 8005706:	d057      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d107      	bne.n	8005720 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005710:	4b53      	ldr	r3, [pc, #332]	@ (8005860 <HAL_RCC_ClockConfig+0x1f8>)
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	2380      	movs	r3, #128	@ 0x80
 8005716:	029b      	lsls	r3, r3, #10
 8005718:	4013      	ands	r3, r2
 800571a:	d12b      	bne.n	8005774 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e097      	b.n	8005850 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	2b02      	cmp	r3, #2
 8005726:	d107      	bne.n	8005738 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005728:	4b4d      	ldr	r3, [pc, #308]	@ (8005860 <HAL_RCC_ClockConfig+0x1f8>)
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	2380      	movs	r3, #128	@ 0x80
 800572e:	049b      	lsls	r3, r3, #18
 8005730:	4013      	ands	r3, r2
 8005732:	d11f      	bne.n	8005774 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e08b      	b.n	8005850 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d107      	bne.n	8005750 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005740:	4b47      	ldr	r3, [pc, #284]	@ (8005860 <HAL_RCC_ClockConfig+0x1f8>)
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	2380      	movs	r3, #128	@ 0x80
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	4013      	ands	r3, r2
 800574a:	d113      	bne.n	8005774 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e07f      	b.n	8005850 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b03      	cmp	r3, #3
 8005756:	d106      	bne.n	8005766 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005758:	4b41      	ldr	r3, [pc, #260]	@ (8005860 <HAL_RCC_ClockConfig+0x1f8>)
 800575a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800575c:	2202      	movs	r2, #2
 800575e:	4013      	ands	r3, r2
 8005760:	d108      	bne.n	8005774 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e074      	b.n	8005850 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005766:	4b3e      	ldr	r3, [pc, #248]	@ (8005860 <HAL_RCC_ClockConfig+0x1f8>)
 8005768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800576a:	2202      	movs	r2, #2
 800576c:	4013      	ands	r3, r2
 800576e:	d101      	bne.n	8005774 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e06d      	b.n	8005850 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005774:	4b3a      	ldr	r3, [pc, #232]	@ (8005860 <HAL_RCC_ClockConfig+0x1f8>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	2207      	movs	r2, #7
 800577a:	4393      	bics	r3, r2
 800577c:	0019      	movs	r1, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	4b37      	ldr	r3, [pc, #220]	@ (8005860 <HAL_RCC_ClockConfig+0x1f8>)
 8005784:	430a      	orrs	r2, r1
 8005786:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005788:	f7fe fae0 	bl	8003d4c <HAL_GetTick>
 800578c:	0003      	movs	r3, r0
 800578e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005790:	e009      	b.n	80057a6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005792:	f7fe fadb 	bl	8003d4c <HAL_GetTick>
 8005796:	0002      	movs	r2, r0
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	4a2f      	ldr	r2, [pc, #188]	@ (800585c <HAL_RCC_ClockConfig+0x1f4>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d901      	bls.n	80057a6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80057a2:	2303      	movs	r3, #3
 80057a4:	e054      	b.n	8005850 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057a6:	4b2e      	ldr	r3, [pc, #184]	@ (8005860 <HAL_RCC_ClockConfig+0x1f8>)
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2238      	movs	r2, #56	@ 0x38
 80057ac:	401a      	ands	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d1ec      	bne.n	8005792 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057b8:	4b27      	ldr	r3, [pc, #156]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2207      	movs	r2, #7
 80057be:	4013      	ands	r3, r2
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d21e      	bcs.n	8005804 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057c6:	4b24      	ldr	r3, [pc, #144]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2207      	movs	r2, #7
 80057cc:	4393      	bics	r3, r2
 80057ce:	0019      	movs	r1, r3
 80057d0:	4b21      	ldr	r3, [pc, #132]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057d8:	f7fe fab8 	bl	8003d4c <HAL_GetTick>
 80057dc:	0003      	movs	r3, r0
 80057de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80057e0:	e009      	b.n	80057f6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057e2:	f7fe fab3 	bl	8003d4c <HAL_GetTick>
 80057e6:	0002      	movs	r2, r0
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	4a1b      	ldr	r2, [pc, #108]	@ (800585c <HAL_RCC_ClockConfig+0x1f4>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e02c      	b.n	8005850 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80057f6:	4b18      	ldr	r3, [pc, #96]	@ (8005858 <HAL_RCC_ClockConfig+0x1f0>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2207      	movs	r2, #7
 80057fc:	4013      	ands	r3, r2
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d1ee      	bne.n	80057e2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2204      	movs	r2, #4
 800580a:	4013      	ands	r3, r2
 800580c:	d009      	beq.n	8005822 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800580e:	4b14      	ldr	r3, [pc, #80]	@ (8005860 <HAL_RCC_ClockConfig+0x1f8>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	4a15      	ldr	r2, [pc, #84]	@ (8005868 <HAL_RCC_ClockConfig+0x200>)
 8005814:	4013      	ands	r3, r2
 8005816:	0019      	movs	r1, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68da      	ldr	r2, [r3, #12]
 800581c:	4b10      	ldr	r3, [pc, #64]	@ (8005860 <HAL_RCC_ClockConfig+0x1f8>)
 800581e:	430a      	orrs	r2, r1
 8005820:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005822:	f000 f829 	bl	8005878 <HAL_RCC_GetSysClockFreq>
 8005826:	0001      	movs	r1, r0
 8005828:	4b0d      	ldr	r3, [pc, #52]	@ (8005860 <HAL_RCC_ClockConfig+0x1f8>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	0a1b      	lsrs	r3, r3, #8
 800582e:	220f      	movs	r2, #15
 8005830:	401a      	ands	r2, r3
 8005832:	4b0e      	ldr	r3, [pc, #56]	@ (800586c <HAL_RCC_ClockConfig+0x204>)
 8005834:	0092      	lsls	r2, r2, #2
 8005836:	58d3      	ldr	r3, [r2, r3]
 8005838:	221f      	movs	r2, #31
 800583a:	4013      	ands	r3, r2
 800583c:	000a      	movs	r2, r1
 800583e:	40da      	lsrs	r2, r3
 8005840:	4b0b      	ldr	r3, [pc, #44]	@ (8005870 <HAL_RCC_ClockConfig+0x208>)
 8005842:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005844:	4b0b      	ldr	r3, [pc, #44]	@ (8005874 <HAL_RCC_ClockConfig+0x20c>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	0018      	movs	r0, r3
 800584a:	f7fe fa23 	bl	8003c94 <HAL_InitTick>
 800584e:	0003      	movs	r3, r0
}
 8005850:	0018      	movs	r0, r3
 8005852:	46bd      	mov	sp, r7
 8005854:	b004      	add	sp, #16
 8005856:	bd80      	pop	{r7, pc}
 8005858:	40022000 	.word	0x40022000
 800585c:	00001388 	.word	0x00001388
 8005860:	40021000 	.word	0x40021000
 8005864:	fffff0ff 	.word	0xfffff0ff
 8005868:	ffff8fff 	.word	0xffff8fff
 800586c:	08009b00 	.word	0x08009b00
 8005870:	200004f4 	.word	0x200004f4
 8005874:	200004f8 	.word	0x200004f8

08005878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800587e:	4b3c      	ldr	r3, [pc, #240]	@ (8005970 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	2238      	movs	r2, #56	@ 0x38
 8005884:	4013      	ands	r3, r2
 8005886:	d10f      	bne.n	80058a8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005888:	4b39      	ldr	r3, [pc, #228]	@ (8005970 <HAL_RCC_GetSysClockFreq+0xf8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	0adb      	lsrs	r3, r3, #11
 800588e:	2207      	movs	r2, #7
 8005890:	4013      	ands	r3, r2
 8005892:	2201      	movs	r2, #1
 8005894:	409a      	lsls	r2, r3
 8005896:	0013      	movs	r3, r2
 8005898:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800589a:	6839      	ldr	r1, [r7, #0]
 800589c:	4835      	ldr	r0, [pc, #212]	@ (8005974 <HAL_RCC_GetSysClockFreq+0xfc>)
 800589e:	f7fa fc45 	bl	800012c <__udivsi3>
 80058a2:	0003      	movs	r3, r0
 80058a4:	613b      	str	r3, [r7, #16]
 80058a6:	e05d      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80058a8:	4b31      	ldr	r3, [pc, #196]	@ (8005970 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	2238      	movs	r2, #56	@ 0x38
 80058ae:	4013      	ands	r3, r2
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d102      	bne.n	80058ba <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058b4:	4b30      	ldr	r3, [pc, #192]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x100>)
 80058b6:	613b      	str	r3, [r7, #16]
 80058b8:	e054      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058ba:	4b2d      	ldr	r3, [pc, #180]	@ (8005970 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	2238      	movs	r2, #56	@ 0x38
 80058c0:	4013      	ands	r3, r2
 80058c2:	2b10      	cmp	r3, #16
 80058c4:	d138      	bne.n	8005938 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80058c6:	4b2a      	ldr	r3, [pc, #168]	@ (8005970 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	2203      	movs	r2, #3
 80058cc:	4013      	ands	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058d0:	4b27      	ldr	r3, [pc, #156]	@ (8005970 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	091b      	lsrs	r3, r3, #4
 80058d6:	2207      	movs	r2, #7
 80058d8:	4013      	ands	r3, r2
 80058da:	3301      	adds	r3, #1
 80058dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d10d      	bne.n	8005900 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058e4:	68b9      	ldr	r1, [r7, #8]
 80058e6:	4824      	ldr	r0, [pc, #144]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x100>)
 80058e8:	f7fa fc20 	bl	800012c <__udivsi3>
 80058ec:	0003      	movs	r3, r0
 80058ee:	0019      	movs	r1, r3
 80058f0:	4b1f      	ldr	r3, [pc, #124]	@ (8005970 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	0a1b      	lsrs	r3, r3, #8
 80058f6:	227f      	movs	r2, #127	@ 0x7f
 80058f8:	4013      	ands	r3, r2
 80058fa:	434b      	muls	r3, r1
 80058fc:	617b      	str	r3, [r7, #20]
        break;
 80058fe:	e00d      	b.n	800591c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005900:	68b9      	ldr	r1, [r7, #8]
 8005902:	481c      	ldr	r0, [pc, #112]	@ (8005974 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005904:	f7fa fc12 	bl	800012c <__udivsi3>
 8005908:	0003      	movs	r3, r0
 800590a:	0019      	movs	r1, r3
 800590c:	4b18      	ldr	r3, [pc, #96]	@ (8005970 <HAL_RCC_GetSysClockFreq+0xf8>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	0a1b      	lsrs	r3, r3, #8
 8005912:	227f      	movs	r2, #127	@ 0x7f
 8005914:	4013      	ands	r3, r2
 8005916:	434b      	muls	r3, r1
 8005918:	617b      	str	r3, [r7, #20]
        break;
 800591a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800591c:	4b14      	ldr	r3, [pc, #80]	@ (8005970 <HAL_RCC_GetSysClockFreq+0xf8>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	0f5b      	lsrs	r3, r3, #29
 8005922:	2207      	movs	r2, #7
 8005924:	4013      	ands	r3, r2
 8005926:	3301      	adds	r3, #1
 8005928:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800592a:	6879      	ldr	r1, [r7, #4]
 800592c:	6978      	ldr	r0, [r7, #20]
 800592e:	f7fa fbfd 	bl	800012c <__udivsi3>
 8005932:	0003      	movs	r3, r0
 8005934:	613b      	str	r3, [r7, #16]
 8005936:	e015      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005938:	4b0d      	ldr	r3, [pc, #52]	@ (8005970 <HAL_RCC_GetSysClockFreq+0xf8>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	2238      	movs	r2, #56	@ 0x38
 800593e:	4013      	ands	r3, r2
 8005940:	2b20      	cmp	r3, #32
 8005942:	d103      	bne.n	800594c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005944:	2380      	movs	r3, #128	@ 0x80
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	613b      	str	r3, [r7, #16]
 800594a:	e00b      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800594c:	4b08      	ldr	r3, [pc, #32]	@ (8005970 <HAL_RCC_GetSysClockFreq+0xf8>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	2238      	movs	r2, #56	@ 0x38
 8005952:	4013      	ands	r3, r2
 8005954:	2b18      	cmp	r3, #24
 8005956:	d103      	bne.n	8005960 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005958:	23fa      	movs	r3, #250	@ 0xfa
 800595a:	01db      	lsls	r3, r3, #7
 800595c:	613b      	str	r3, [r7, #16]
 800595e:	e001      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005964:	693b      	ldr	r3, [r7, #16]
}
 8005966:	0018      	movs	r0, r3
 8005968:	46bd      	mov	sp, r7
 800596a:	b006      	add	sp, #24
 800596c:	bd80      	pop	{r7, pc}
 800596e:	46c0      	nop			@ (mov r8, r8)
 8005970:	40021000 	.word	0x40021000
 8005974:	00f42400 	.word	0x00f42400
 8005978:	007a1200 	.word	0x007a1200

0800597c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005980:	4b02      	ldr	r3, [pc, #8]	@ (800598c <HAL_RCC_GetHCLKFreq+0x10>)
 8005982:	681b      	ldr	r3, [r3, #0]
}
 8005984:	0018      	movs	r0, r3
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	46c0      	nop			@ (mov r8, r8)
 800598c:	200004f4 	.word	0x200004f4

08005990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005990:	b5b0      	push	{r4, r5, r7, lr}
 8005992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005994:	f7ff fff2 	bl	800597c <HAL_RCC_GetHCLKFreq>
 8005998:	0004      	movs	r4, r0
 800599a:	f7ff faf9 	bl	8004f90 <LL_RCC_GetAPB1Prescaler>
 800599e:	0003      	movs	r3, r0
 80059a0:	0b1a      	lsrs	r2, r3, #12
 80059a2:	4b05      	ldr	r3, [pc, #20]	@ (80059b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059a4:	0092      	lsls	r2, r2, #2
 80059a6:	58d3      	ldr	r3, [r2, r3]
 80059a8:	221f      	movs	r2, #31
 80059aa:	4013      	ands	r3, r2
 80059ac:	40dc      	lsrs	r4, r3
 80059ae:	0023      	movs	r3, r4
}
 80059b0:	0018      	movs	r0, r3
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bdb0      	pop	{r4, r5, r7, pc}
 80059b6:	46c0      	nop			@ (mov r8, r8)
 80059b8:	08009b40 	.word	0x08009b40

080059bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80059c4:	2313      	movs	r3, #19
 80059c6:	18fb      	adds	r3, r7, r3
 80059c8:	2200      	movs	r2, #0
 80059ca:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059cc:	2312      	movs	r3, #18
 80059ce:	18fb      	adds	r3, r7, r3
 80059d0:	2200      	movs	r2, #0
 80059d2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	2380      	movs	r3, #128	@ 0x80
 80059da:	029b      	lsls	r3, r3, #10
 80059dc:	4013      	ands	r3, r2
 80059de:	d100      	bne.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80059e0:	e0ad      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059e2:	2011      	movs	r0, #17
 80059e4:	183b      	adds	r3, r7, r0
 80059e6:	2200      	movs	r2, #0
 80059e8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059ea:	4b47      	ldr	r3, [pc, #284]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80059ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059ee:	2380      	movs	r3, #128	@ 0x80
 80059f0:	055b      	lsls	r3, r3, #21
 80059f2:	4013      	ands	r3, r2
 80059f4:	d110      	bne.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059f6:	4b44      	ldr	r3, [pc, #272]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80059f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059fa:	4b43      	ldr	r3, [pc, #268]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80059fc:	2180      	movs	r1, #128	@ 0x80
 80059fe:	0549      	lsls	r1, r1, #21
 8005a00:	430a      	orrs	r2, r1
 8005a02:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005a04:	4b40      	ldr	r3, [pc, #256]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005a06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a08:	2380      	movs	r3, #128	@ 0x80
 8005a0a:	055b      	lsls	r3, r3, #21
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	60bb      	str	r3, [r7, #8]
 8005a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a12:	183b      	adds	r3, r7, r0
 8005a14:	2201      	movs	r2, #1
 8005a16:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a18:	4b3c      	ldr	r3, [pc, #240]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	4b3b      	ldr	r3, [pc, #236]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005a1e:	2180      	movs	r1, #128	@ 0x80
 8005a20:	0049      	lsls	r1, r1, #1
 8005a22:	430a      	orrs	r2, r1
 8005a24:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a26:	f7fe f991 	bl	8003d4c <HAL_GetTick>
 8005a2a:	0003      	movs	r3, r0
 8005a2c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a2e:	e00b      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a30:	f7fe f98c 	bl	8003d4c <HAL_GetTick>
 8005a34:	0002      	movs	r2, r0
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d904      	bls.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005a3e:	2313      	movs	r3, #19
 8005a40:	18fb      	adds	r3, r7, r3
 8005a42:	2203      	movs	r2, #3
 8005a44:	701a      	strb	r2, [r3, #0]
        break;
 8005a46:	e005      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a48:	4b30      	ldr	r3, [pc, #192]	@ (8005b0c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	2380      	movs	r3, #128	@ 0x80
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	4013      	ands	r3, r2
 8005a52:	d0ed      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005a54:	2313      	movs	r3, #19
 8005a56:	18fb      	adds	r3, r7, r3
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d15e      	bne.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005a60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a62:	23c0      	movs	r3, #192	@ 0xc0
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4013      	ands	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d019      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d014      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a7a:	4b23      	ldr	r3, [pc, #140]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005a7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a7e:	4a24      	ldr	r2, [pc, #144]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005a80:	4013      	ands	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a84:	4b20      	ldr	r3, [pc, #128]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005a86:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a88:	4b1f      	ldr	r3, [pc, #124]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005a8a:	2180      	movs	r1, #128	@ 0x80
 8005a8c:	0249      	lsls	r1, r1, #9
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a92:	4b1d      	ldr	r3, [pc, #116]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005a94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a96:	4b1c      	ldr	r3, [pc, #112]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005a98:	491e      	ldr	r1, [pc, #120]	@ (8005b14 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8005a9a:	400a      	ands	r2, r1
 8005a9c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	d016      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aac:	f7fe f94e 	bl	8003d4c <HAL_GetTick>
 8005ab0:	0003      	movs	r3, r0
 8005ab2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ab4:	e00c      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ab6:	f7fe f949 	bl	8003d4c <HAL_GetTick>
 8005aba:	0002      	movs	r2, r0
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	4a15      	ldr	r2, [pc, #84]	@ (8005b18 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d904      	bls.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005ac6:	2313      	movs	r3, #19
 8005ac8:	18fb      	adds	r3, r7, r3
 8005aca:	2203      	movs	r2, #3
 8005acc:	701a      	strb	r2, [r3, #0]
            break;
 8005ace:	e004      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	d0ed      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005ada:	2313      	movs	r3, #19
 8005adc:	18fb      	adds	r3, r7, r3
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10a      	bne.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ae4:	4b08      	ldr	r3, [pc, #32]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ae8:	4a09      	ldr	r2, [pc, #36]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005aea:	4013      	ands	r3, r2
 8005aec:	0019      	movs	r1, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005af2:	4b05      	ldr	r3, [pc, #20]	@ (8005b08 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005af4:	430a      	orrs	r2, r1
 8005af6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005af8:	e016      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005afa:	2312      	movs	r3, #18
 8005afc:	18fb      	adds	r3, r7, r3
 8005afe:	2213      	movs	r2, #19
 8005b00:	18ba      	adds	r2, r7, r2
 8005b02:	7812      	ldrb	r2, [r2, #0]
 8005b04:	701a      	strb	r2, [r3, #0]
 8005b06:	e00f      	b.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005b08:	40021000 	.word	0x40021000
 8005b0c:	40007000 	.word	0x40007000
 8005b10:	fffffcff 	.word	0xfffffcff
 8005b14:	fffeffff 	.word	0xfffeffff
 8005b18:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1c:	2312      	movs	r3, #18
 8005b1e:	18fb      	adds	r3, r7, r3
 8005b20:	2213      	movs	r2, #19
 8005b22:	18ba      	adds	r2, r7, r2
 8005b24:	7812      	ldrb	r2, [r2, #0]
 8005b26:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b28:	2311      	movs	r3, #17
 8005b2a:	18fb      	adds	r3, r7, r3
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d105      	bne.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b32:	4bb6      	ldr	r3, [pc, #728]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b36:	4bb5      	ldr	r3, [pc, #724]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b38:	49b5      	ldr	r1, [pc, #724]	@ (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8005b3a:	400a      	ands	r2, r1
 8005b3c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2201      	movs	r2, #1
 8005b44:	4013      	ands	r3, r2
 8005b46:	d009      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b48:	4bb0      	ldr	r3, [pc, #704]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b4c:	2203      	movs	r2, #3
 8005b4e:	4393      	bics	r3, r2
 8005b50:	0019      	movs	r1, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	4bad      	ldr	r3, [pc, #692]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2202      	movs	r2, #2
 8005b62:	4013      	ands	r3, r2
 8005b64:	d009      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b66:	4ba9      	ldr	r3, [pc, #676]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b6a:	220c      	movs	r2, #12
 8005b6c:	4393      	bics	r3, r2
 8005b6e:	0019      	movs	r1, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	4ba5      	ldr	r3, [pc, #660]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b76:	430a      	orrs	r2, r1
 8005b78:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2204      	movs	r2, #4
 8005b80:	4013      	ands	r3, r2
 8005b82:	d009      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b84:	4ba1      	ldr	r3, [pc, #644]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b88:	2230      	movs	r2, #48	@ 0x30
 8005b8a:	4393      	bics	r3, r2
 8005b8c:	0019      	movs	r1, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	4b9e      	ldr	r3, [pc, #632]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005b94:	430a      	orrs	r2, r1
 8005b96:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2210      	movs	r2, #16
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	d009      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ba2:	4b9a      	ldr	r3, [pc, #616]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ba6:	4a9b      	ldr	r2, [pc, #620]	@ (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005ba8:	4013      	ands	r3, r2
 8005baa:	0019      	movs	r1, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	691a      	ldr	r2, [r3, #16]
 8005bb0:	4b96      	ldr	r3, [pc, #600]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	2380      	movs	r3, #128	@ 0x80
 8005bbc:	015b      	lsls	r3, r3, #5
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	d009      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8005bc2:	4b92      	ldr	r3, [pc, #584]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc6:	4a94      	ldr	r2, [pc, #592]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005bc8:	4013      	ands	r3, r2
 8005bca:	0019      	movs	r1, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	695a      	ldr	r2, [r3, #20]
 8005bd0:	4b8e      	ldr	r3, [pc, #568]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	2380      	movs	r3, #128	@ 0x80
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4013      	ands	r3, r2
 8005be0:	d009      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005be2:	4b8a      	ldr	r3, [pc, #552]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be6:	4a8d      	ldr	r2, [pc, #564]	@ (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005be8:	4013      	ands	r3, r2
 8005bea:	0019      	movs	r1, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005bf0:	4b86      	ldr	r3, [pc, #536]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	2380      	movs	r3, #128	@ 0x80
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	4013      	ands	r3, r2
 8005c00:	d009      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c02:	4b82      	ldr	r3, [pc, #520]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c06:	4a86      	ldr	r2, [pc, #536]	@ (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8005c08:	4013      	ands	r3, r2
 8005c0a:	0019      	movs	r1, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c10:	4b7e      	ldr	r3, [pc, #504]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c12:	430a      	orrs	r2, r1
 8005c14:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	d009      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c20:	4b7a      	ldr	r3, [pc, #488]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c24:	4a7f      	ldr	r2, [pc, #508]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005c26:	4013      	ands	r3, r2
 8005c28:	0019      	movs	r1, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699a      	ldr	r2, [r3, #24]
 8005c2e:	4b77      	ldr	r3, [pc, #476]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c30:	430a      	orrs	r2, r1
 8005c32:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	2240      	movs	r2, #64	@ 0x40
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	d009      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c3e:	4b73      	ldr	r3, [pc, #460]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c42:	4a79      	ldr	r2, [pc, #484]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005c44:	4013      	ands	r3, r2
 8005c46:	0019      	movs	r1, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	69da      	ldr	r2, [r3, #28]
 8005c4c:	4b6f      	ldr	r3, [pc, #444]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	2380      	movs	r3, #128	@ 0x80
 8005c58:	01db      	lsls	r3, r3, #7
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	d015      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c5e:	4b6b      	ldr	r3, [pc, #428]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	0899      	lsrs	r1, r3, #2
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c6a:	4b68      	ldr	r3, [pc, #416]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c74:	2380      	movs	r3, #128	@ 0x80
 8005c76:	05db      	lsls	r3, r3, #23
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d106      	bne.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005c7c:	4b63      	ldr	r3, [pc, #396]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c7e:	68da      	ldr	r2, [r3, #12]
 8005c80:	4b62      	ldr	r3, [pc, #392]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c82:	2180      	movs	r1, #128	@ 0x80
 8005c84:	0249      	lsls	r1, r1, #9
 8005c86:	430a      	orrs	r2, r1
 8005c88:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	2380      	movs	r3, #128	@ 0x80
 8005c90:	031b      	lsls	r3, r3, #12
 8005c92:	4013      	ands	r3, r2
 8005c94:	d009      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005c96:	4b5d      	ldr	r3, [pc, #372]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c9a:	2240      	movs	r2, #64	@ 0x40
 8005c9c:	4393      	bics	r3, r2
 8005c9e:	0019      	movs	r1, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ca4:	4b59      	ldr	r3, [pc, #356]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	2380      	movs	r3, #128	@ 0x80
 8005cb0:	039b      	lsls	r3, r3, #14
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	d016      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005cb6:	4b55      	ldr	r3, [pc, #340]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cba:	4a5c      	ldr	r2, [pc, #368]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	0019      	movs	r1, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cc4:	4b51      	ldr	r3, [pc, #324]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cce:	2380      	movs	r3, #128	@ 0x80
 8005cd0:	03db      	lsls	r3, r3, #15
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d106      	bne.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005cd6:	4b4d      	ldr	r3, [pc, #308]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cd8:	68da      	ldr	r2, [r3, #12]
 8005cda:	4b4c      	ldr	r3, [pc, #304]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cdc:	2180      	movs	r1, #128	@ 0x80
 8005cde:	0449      	lsls	r1, r1, #17
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	2380      	movs	r3, #128	@ 0x80
 8005cea:	03db      	lsls	r3, r3, #15
 8005cec:	4013      	ands	r3, r2
 8005cee:	d016      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005cf0:	4b46      	ldr	r3, [pc, #280]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf4:	4a4e      	ldr	r2, [pc, #312]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	0019      	movs	r1, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cfe:	4b43      	ldr	r3, [pc, #268]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d00:	430a      	orrs	r2, r1
 8005d02:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d08:	2380      	movs	r3, #128	@ 0x80
 8005d0a:	045b      	lsls	r3, r3, #17
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d106      	bne.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005d10:	4b3e      	ldr	r3, [pc, #248]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d12:	68da      	ldr	r2, [r3, #12]
 8005d14:	4b3d      	ldr	r3, [pc, #244]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d16:	2180      	movs	r1, #128	@ 0x80
 8005d18:	0449      	lsls	r1, r1, #17
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	2380      	movs	r3, #128	@ 0x80
 8005d24:	011b      	lsls	r3, r3, #4
 8005d26:	4013      	ands	r3, r2
 8005d28:	d014      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005d2a:	4b38      	ldr	r3, [pc, #224]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d2e:	2203      	movs	r2, #3
 8005d30:	4393      	bics	r3, r2
 8005d32:	0019      	movs	r1, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a1a      	ldr	r2, [r3, #32]
 8005d38:	4b34      	ldr	r3, [pc, #208]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d106      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005d46:	4b31      	ldr	r3, [pc, #196]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	4b30      	ldr	r3, [pc, #192]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d4c:	2180      	movs	r1, #128	@ 0x80
 8005d4e:	0249      	lsls	r1, r1, #9
 8005d50:	430a      	orrs	r2, r1
 8005d52:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	2380      	movs	r3, #128	@ 0x80
 8005d5a:	019b      	lsls	r3, r3, #6
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	d014      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005d60:	4b2a      	ldr	r3, [pc, #168]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d64:	220c      	movs	r2, #12
 8005d66:	4393      	bics	r3, r2
 8005d68:	0019      	movs	r1, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d6e:	4b27      	ldr	r3, [pc, #156]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d70:	430a      	orrs	r2, r1
 8005d72:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d78:	2b04      	cmp	r3, #4
 8005d7a:	d106      	bne.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005d7c:	4b23      	ldr	r3, [pc, #140]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d7e:	68da      	ldr	r2, [r3, #12]
 8005d80:	4b22      	ldr	r3, [pc, #136]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d82:	2180      	movs	r1, #128	@ 0x80
 8005d84:	0249      	lsls	r1, r1, #9
 8005d86:	430a      	orrs	r2, r1
 8005d88:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	2380      	movs	r3, #128	@ 0x80
 8005d90:	045b      	lsls	r3, r3, #17
 8005d92:	4013      	ands	r3, r2
 8005d94:	d016      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d96:	4b1d      	ldr	r3, [pc, #116]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d9a:	4a22      	ldr	r2, [pc, #136]	@ (8005e24 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	0019      	movs	r1, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005da4:	4b19      	ldr	r3, [pc, #100]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005da6:	430a      	orrs	r2, r1
 8005da8:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dae:	2380      	movs	r3, #128	@ 0x80
 8005db0:	019b      	lsls	r3, r3, #6
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d106      	bne.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005db6:	4b15      	ldr	r3, [pc, #84]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	4b14      	ldr	r3, [pc, #80]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005dbc:	2180      	movs	r1, #128	@ 0x80
 8005dbe:	0449      	lsls	r1, r1, #17
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	2380      	movs	r3, #128	@ 0x80
 8005dca:	049b      	lsls	r3, r3, #18
 8005dcc:	4013      	ands	r3, r2
 8005dce:	d016      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dd4:	4a10      	ldr	r2, [pc, #64]	@ (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	0019      	movs	r1, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005dde:	4b0b      	ldr	r3, [pc, #44]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005de0:	430a      	orrs	r2, r1
 8005de2:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005de8:	2380      	movs	r3, #128	@ 0x80
 8005dea:	005b      	lsls	r3, r3, #1
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d106      	bne.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005df0:	4b06      	ldr	r3, [pc, #24]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	4b05      	ldr	r3, [pc, #20]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005df6:	2180      	movs	r1, #128	@ 0x80
 8005df8:	0449      	lsls	r1, r1, #17
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005dfe:	2312      	movs	r3, #18
 8005e00:	18fb      	adds	r3, r7, r3
 8005e02:	781b      	ldrb	r3, [r3, #0]
}
 8005e04:	0018      	movs	r0, r3
 8005e06:	46bd      	mov	sp, r7
 8005e08:	b006      	add	sp, #24
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	40021000 	.word	0x40021000
 8005e10:	efffffff 	.word	0xefffffff
 8005e14:	fffff3ff 	.word	0xfffff3ff
 8005e18:	fffffcff 	.word	0xfffffcff
 8005e1c:	fff3ffff 	.word	0xfff3ffff
 8005e20:	ffcfffff 	.word	0xffcfffff
 8005e24:	ffffcfff 	.word	0xffffcfff
 8005e28:	ffff3fff 	.word	0xffff3fff
 8005e2c:	ffbfffff 	.word	0xffbfffff
 8005e30:	feffffff 	.word	0xfeffffff

08005e34 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005e34:	b590      	push	{r4, r7, lr}
 8005e36:	b089      	sub	sp, #36	@ 0x24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2228      	movs	r2, #40	@ 0x28
 8005e44:	5c9b      	ldrb	r3, [r3, r2]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d101      	bne.n	8005e4e <HAL_RTC_SetAlarm_IT+0x1a>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	e127      	b.n	800609e <HAL_RTC_SetAlarm_IT+0x26a>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2228      	movs	r2, #40	@ 0x28
 8005e52:	2101      	movs	r1, #1
 8005e54:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2229      	movs	r2, #41	@ 0x29
 8005e5a:	2102      	movs	r1, #2
 8005e5c:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d136      	bne.n	8005ed2 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	2240      	movs	r2, #64	@ 0x40
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	d102      	bne.n	8005e76 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	2200      	movs	r2, #0
 8005e74:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	f000 fa1e 	bl	80062bc <RTC_ByteToBcd2>
 8005e80:	0003      	movs	r3, r0
 8005e82:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	785b      	ldrb	r3, [r3, #1]
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f000 fa17 	bl	80062bc <RTC_ByteToBcd2>
 8005e8e:	0003      	movs	r3, r0
 8005e90:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005e92:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	789b      	ldrb	r3, [r3, #2]
 8005e98:	0018      	movs	r0, r3
 8005e9a:	f000 fa0f 	bl	80062bc <RTC_ByteToBcd2>
 8005e9e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005ea0:	0022      	movs	r2, r4
 8005ea2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	78db      	ldrb	r3, [r3, #3]
 8005ea8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	5c9b      	ldrb	r3, [r3, r2]
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	f000 fa01 	bl	80062bc <RTC_ByteToBcd2>
 8005eba:	0003      	movs	r3, r0
 8005ebc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005ebe:	0022      	movs	r2, r4
 8005ec0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005ec6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	61fb      	str	r3, [r7, #28]
 8005ed0:	e022      	b.n	8005f18 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	2240      	movs	r2, #64	@ 0x40
 8005eda:	4013      	ands	r3, r2
 8005edc:	d102      	bne.n	8005ee4 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	785b      	ldrb	r3, [r3, #1]
 8005eee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005ef0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005ef6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	78db      	ldrb	r3, [r3, #3]
 8005efc:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005efe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2120      	movs	r1, #32
 8005f04:	5c5b      	ldrb	r3, [r3, r1]
 8005f06:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005f08:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005f0e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005f14:	4313      	orrs	r3, r2
 8005f16:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	22ca      	movs	r2, #202	@ 0xca
 8005f2a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2253      	movs	r2, #83	@ 0x53
 8005f32:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f38:	2380      	movs	r3, #128	@ 0x80
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d14c      	bne.n	8005fda <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699a      	ldr	r2, [r3, #24]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4957      	ldr	r1, [pc, #348]	@ (80060a8 <HAL_RTC_SetAlarm_IT+0x274>)
 8005f4c:	400a      	ands	r2, r1
 8005f4e:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8005f60:	f7fd fef4 	bl	8003d4c <HAL_GetTick>
 8005f64:	0003      	movs	r3, r0
 8005f66:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005f68:	e016      	b.n	8005f98 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005f6a:	f7fd feef 	bl	8003d4c <HAL_GetTick>
 8005f6e:	0002      	movs	r2, r0
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	1ad2      	subs	r2, r2, r3
 8005f74:	23fa      	movs	r3, #250	@ 0xfa
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d90d      	bls.n	8005f98 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	22ff      	movs	r2, #255	@ 0xff
 8005f82:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2229      	movs	r2, #41	@ 0x29
 8005f88:	2103      	movs	r1, #3
 8005f8a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2228      	movs	r2, #40	@ 0x28
 8005f90:	2100      	movs	r1, #0
 8005f92:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e082      	b.n	800609e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	d0e2      	beq.n	8005f6a <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	69fa      	ldr	r2, [r7, #28]
 8005faa:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	699a      	ldr	r2, [r3, #24]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2180      	movs	r1, #128	@ 0x80
 8005fc0:	0049      	lsls	r1, r1, #1
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	699a      	ldr	r2, [r3, #24]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2180      	movs	r1, #128	@ 0x80
 8005fd2:	0149      	lsls	r1, r1, #5
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	619a      	str	r2, [r3, #24]
 8005fd8:	e04b      	b.n	8006072 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	699a      	ldr	r2, [r3, #24]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4931      	ldr	r1, [pc, #196]	@ (80060ac <HAL_RTC_SetAlarm_IT+0x278>)
 8005fe6:	400a      	ands	r2, r1
 8005fe8:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2102      	movs	r1, #2
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8005ffa:	f7fd fea7 	bl	8003d4c <HAL_GetTick>
 8005ffe:	0003      	movs	r3, r0
 8006000:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006002:	e016      	b.n	8006032 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006004:	f7fd fea2 	bl	8003d4c <HAL_GetTick>
 8006008:	0002      	movs	r2, r0
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	1ad2      	subs	r2, r2, r3
 800600e:	23fa      	movs	r3, #250	@ 0xfa
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	429a      	cmp	r2, r3
 8006014:	d90d      	bls.n	8006032 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	22ff      	movs	r2, #255	@ 0xff
 800601c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2229      	movs	r2, #41	@ 0x29
 8006022:	2103      	movs	r1, #3
 8006024:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2228      	movs	r2, #40	@ 0x28
 800602a:	2100      	movs	r1, #0
 800602c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e035      	b.n	800609e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	2202      	movs	r2, #2
 800603a:	4013      	ands	r3, r2
 800603c:	d0e2      	beq.n	8006004 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	69fa      	ldr	r2, [r7, #28]
 8006044:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	699a      	ldr	r2, [r3, #24]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2180      	movs	r1, #128	@ 0x80
 800605a:	0089      	lsls	r1, r1, #2
 800605c:	430a      	orrs	r2, r1
 800605e:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	699a      	ldr	r2, [r3, #24]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2180      	movs	r1, #128	@ 0x80
 800606c:	0189      	lsls	r1, r1, #6
 800606e:	430a      	orrs	r2, r1
 8006070:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006072:	4a0f      	ldr	r2, [pc, #60]	@ (80060b0 <HAL_RTC_SetAlarm_IT+0x27c>)
 8006074:	2380      	movs	r3, #128	@ 0x80
 8006076:	58d3      	ldr	r3, [r2, r3]
 8006078:	490d      	ldr	r1, [pc, #52]	@ (80060b0 <HAL_RTC_SetAlarm_IT+0x27c>)
 800607a:	2280      	movs	r2, #128	@ 0x80
 800607c:	0312      	lsls	r2, r2, #12
 800607e:	4313      	orrs	r3, r2
 8006080:	2280      	movs	r2, #128	@ 0x80
 8006082:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	22ff      	movs	r2, #255	@ 0xff
 800608a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2229      	movs	r2, #41	@ 0x29
 8006090:	2101      	movs	r1, #1
 8006092:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2228      	movs	r2, #40	@ 0x28
 8006098:	2100      	movs	r1, #0
 800609a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	0018      	movs	r0, r3
 80060a0:	46bd      	mov	sp, r7
 80060a2:	b009      	add	sp, #36	@ 0x24
 80060a4:	bd90      	pop	{r4, r7, pc}
 80060a6:	46c0      	nop			@ (mov r8, r8)
 80060a8:	fffffeff 	.word	0xfffffeff
 80060ac:	fffffdff 	.word	0xfffffdff
 80060b0:	40021800 	.word	0x40021800

080060b4 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	2380      	movs	r3, #128	@ 0x80
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d144      	bne.n	8006156 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	2280      	movs	r2, #128	@ 0x80
 80060d0:	0052      	lsls	r2, r2, #1
 80060d2:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060da:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060e2:	045b      	lsls	r3, r3, #17
 80060e4:	0c5b      	lsrs	r3, r3, #17
 80060e6:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	0c1b      	lsrs	r3, r3, #16
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	223f      	movs	r2, #63	@ 0x3f
 80060f0:	4013      	ands	r3, r2
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	0a1b      	lsrs	r3, r3, #8
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	227f      	movs	r2, #127	@ 0x7f
 8006100:	4013      	ands	r3, r2
 8006102:	b2da      	uxtb	r2, r3
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	b2db      	uxtb	r3, r3
 800610c:	227f      	movs	r2, #127	@ 0x7f
 800610e:	4013      	ands	r3, r2
 8006110:	b2da      	uxtb	r2, r3
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	0d9b      	lsrs	r3, r3, #22
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2201      	movs	r2, #1
 800611e:	4013      	ands	r3, r2
 8006120:	b2da      	uxtb	r2, r3
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	0e1b      	lsrs	r3, r3, #24
 8006130:	b2db      	uxtb	r3, r3
 8006132:	223f      	movs	r2, #63	@ 0x3f
 8006134:	4013      	ands	r3, r2
 8006136:	b2d9      	uxtb	r1, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2220      	movs	r2, #32
 800613c:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	2380      	movs	r3, #128	@ 0x80
 8006142:	05db      	lsls	r3, r3, #23
 8006144:	401a      	ands	r2, r3
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	4a3b      	ldr	r2, [pc, #236]	@ (800623c <HAL_RTC_GetAlarm+0x188>)
 800614e:	401a      	ands	r2, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	615a      	str	r2, [r3, #20]
 8006154:	e043      	b.n	80061de <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	2280      	movs	r2, #128	@ 0x80
 800615a:	0092      	lsls	r2, r2, #2
 800615c:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006164:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800616c:	045b      	lsls	r3, r3, #17
 800616e:	0c5b      	lsrs	r3, r3, #17
 8006170:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	0c1b      	lsrs	r3, r3, #16
 8006176:	b2db      	uxtb	r3, r3
 8006178:	223f      	movs	r2, #63	@ 0x3f
 800617a:	4013      	ands	r3, r2
 800617c:	b2da      	uxtb	r2, r3
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	0a1b      	lsrs	r3, r3, #8
 8006186:	b2db      	uxtb	r3, r3
 8006188:	227f      	movs	r2, #127	@ 0x7f
 800618a:	4013      	ands	r3, r2
 800618c:	b2da      	uxtb	r2, r3
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	b2db      	uxtb	r3, r3
 8006196:	227f      	movs	r2, #127	@ 0x7f
 8006198:	4013      	ands	r3, r2
 800619a:	b2da      	uxtb	r2, r3
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	0d9b      	lsrs	r3, r3, #22
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2201      	movs	r2, #1
 80061a8:	4013      	ands	r3, r2
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	0e1b      	lsrs	r3, r3, #24
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	223f      	movs	r2, #63	@ 0x3f
 80061be:	4013      	ands	r3, r2
 80061c0:	b2d9      	uxtb	r1, r3
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2220      	movs	r2, #32
 80061c6:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	2380      	movs	r3, #128	@ 0x80
 80061cc:	05db      	lsls	r3, r3, #23
 80061ce:	401a      	ands	r2, r3
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	4a19      	ldr	r2, [pc, #100]	@ (800623c <HAL_RTC_GetAlarm+0x188>)
 80061d8:	401a      	ands	r2, r3
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d125      	bne.n	8006230 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	0018      	movs	r0, r3
 80061ea:	f000 f88f 	bl	800630c <RTC_Bcd2ToByte>
 80061ee:	0003      	movs	r3, r0
 80061f0:	001a      	movs	r2, r3
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	785b      	ldrb	r3, [r3, #1]
 80061fa:	0018      	movs	r0, r3
 80061fc:	f000 f886 	bl	800630c <RTC_Bcd2ToByte>
 8006200:	0003      	movs	r3, r0
 8006202:	001a      	movs	r2, r3
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	789b      	ldrb	r3, [r3, #2]
 800620c:	0018      	movs	r0, r3
 800620e:	f000 f87d 	bl	800630c <RTC_Bcd2ToByte>
 8006212:	0003      	movs	r3, r0
 8006214:	001a      	movs	r2, r3
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2220      	movs	r2, #32
 800621e:	5c9b      	ldrb	r3, [r3, r2]
 8006220:	0018      	movs	r0, r3
 8006222:	f000 f873 	bl	800630c <RTC_Bcd2ToByte>
 8006226:	0003      	movs	r3, r0
 8006228:	0019      	movs	r1, r3
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2220      	movs	r2, #32
 800622e:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	0018      	movs	r0, r3
 8006234:	46bd      	mov	sp, r7
 8006236:	b006      	add	sp, #24
 8006238:	bd80      	pop	{r7, pc}
 800623a:	46c0      	nop			@ (mov r8, r8)
 800623c:	80808080 	.word	0x80808080

08006240 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699a      	ldr	r2, [r3, #24]
 800624e:	2380      	movs	r3, #128	@ 0x80
 8006250:	015b      	lsls	r3, r3, #5
 8006252:	4013      	ands	r3, r2
 8006254:	d011      	beq.n	800627a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800625c:	2201      	movs	r2, #1
 800625e:	4013      	ands	r3, r2
 8006260:	d00b      	beq.n	800627a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2101      	movs	r1, #1
 800626e:	430a      	orrs	r2, r1
 8006270:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	0018      	movs	r0, r3
 8006276:	f7fc fe19 	bl	8002eac <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	699a      	ldr	r2, [r3, #24]
 8006280:	2380      	movs	r3, #128	@ 0x80
 8006282:	019b      	lsls	r3, r3, #6
 8006284:	4013      	ands	r3, r2
 8006286:	d011      	beq.n	80062ac <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800628e:	2202      	movs	r2, #2
 8006290:	4013      	ands	r3, r2
 8006292:	d00b      	beq.n	80062ac <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2102      	movs	r1, #2
 80062a0:	430a      	orrs	r2, r1
 80062a2:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	0018      	movs	r0, r3
 80062a8:	f000 f873 	bl	8006392 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2229      	movs	r2, #41	@ 0x29
 80062b0:	2101      	movs	r1, #1
 80062b2:	5499      	strb	r1, [r3, r2]
}
 80062b4:	46c0      	nop			@ (mov r8, r8)
 80062b6:	46bd      	mov	sp, r7
 80062b8:	b002      	add	sp, #8
 80062ba:	bd80      	pop	{r7, pc}

080062bc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	0002      	movs	r2, r0
 80062c4:	1dfb      	adds	r3, r7, #7
 80062c6:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80062c8:	2300      	movs	r3, #0
 80062ca:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80062cc:	230b      	movs	r3, #11
 80062ce:	18fb      	adds	r3, r7, r3
 80062d0:	1dfa      	adds	r2, r7, #7
 80062d2:	7812      	ldrb	r2, [r2, #0]
 80062d4:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80062d6:	e008      	b.n	80062ea <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	3301      	adds	r3, #1
 80062dc:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80062de:	220b      	movs	r2, #11
 80062e0:	18bb      	adds	r3, r7, r2
 80062e2:	18ba      	adds	r2, r7, r2
 80062e4:	7812      	ldrb	r2, [r2, #0]
 80062e6:	3a0a      	subs	r2, #10
 80062e8:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80062ea:	210b      	movs	r1, #11
 80062ec:	187b      	adds	r3, r7, r1
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	2b09      	cmp	r3, #9
 80062f2:	d8f1      	bhi.n	80062d8 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	011b      	lsls	r3, r3, #4
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	187b      	adds	r3, r7, r1
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	4313      	orrs	r3, r2
 8006302:	b2db      	uxtb	r3, r3
}
 8006304:	0018      	movs	r0, r3
 8006306:	46bd      	mov	sp, r7
 8006308:	b004      	add	sp, #16
 800630a:	bd80      	pop	{r7, pc}

0800630c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	0002      	movs	r2, r0
 8006314:	1dfb      	adds	r3, r7, #7
 8006316:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006318:	1dfb      	adds	r3, r7, #7
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	091b      	lsrs	r3, r3, #4
 800631e:	b2db      	uxtb	r3, r3
 8006320:	001a      	movs	r2, r3
 8006322:	0013      	movs	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	189b      	adds	r3, r3, r2
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	b2da      	uxtb	r2, r3
 8006330:	1dfb      	adds	r3, r7, #7
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	210f      	movs	r1, #15
 8006336:	400b      	ands	r3, r1
 8006338:	b2db      	uxtb	r3, r3
 800633a:	18d3      	adds	r3, r2, r3
 800633c:	b2db      	uxtb	r3, r3
}
 800633e:	0018      	movs	r0, r3
 8006340:	46bd      	mov	sp, r7
 8006342:	b004      	add	sp, #16
 8006344:	bd80      	pop	{r7, pc}

08006346 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b082      	sub	sp, #8
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006354:	2204      	movs	r2, #4
 8006356:	4013      	ands	r3, r2
 8006358:	d00b      	beq.n	8006372 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2104      	movs	r1, #4
 8006366:	430a      	orrs	r2, r1
 8006368:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	0018      	movs	r0, r3
 800636e:	f000 f808 	bl	8006382 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2229      	movs	r2, #41	@ 0x29
 8006376:	2101      	movs	r1, #1
 8006378:	5499      	strb	r1, [r3, r2]
}
 800637a:	46c0      	nop			@ (mov r8, r8)
 800637c:	46bd      	mov	sp, r7
 800637e:	b002      	add	sp, #8
 8006380:	bd80      	pop	{r7, pc}

08006382 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b082      	sub	sp, #8
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800638a:	46c0      	nop			@ (mov r8, r8)
 800638c:	46bd      	mov	sp, r7
 800638e:	b002      	add	sp, #8
 8006390:	bd80      	pop	{r7, pc}

08006392 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b082      	sub	sp, #8
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800639a:	46c0      	nop			@ (mov r8, r8)
 800639c:	46bd      	mov	sp, r7
 800639e:	b002      	add	sp, #8
 80063a0:	bd80      	pop	{r7, pc}
	...

080063a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e0a8      	b.n	8006508 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d109      	bne.n	80063d2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	2382      	movs	r3, #130	@ 0x82
 80063c4:	005b      	lsls	r3, r3, #1
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d009      	beq.n	80063de <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	61da      	str	r2, [r3, #28]
 80063d0:	e005      	b.n	80063de <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	225d      	movs	r2, #93	@ 0x5d
 80063e8:	5c9b      	ldrb	r3, [r3, r2]
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d107      	bne.n	8006400 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	225c      	movs	r2, #92	@ 0x5c
 80063f4:	2100      	movs	r1, #0
 80063f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	0018      	movs	r0, r3
 80063fc:	f7fd fa4a 	bl	8003894 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	225d      	movs	r2, #93	@ 0x5d
 8006404:	2102      	movs	r1, #2
 8006406:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2140      	movs	r1, #64	@ 0x40
 8006414:	438a      	bics	r2, r1
 8006416:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68da      	ldr	r2, [r3, #12]
 800641c:	23e0      	movs	r3, #224	@ 0xe0
 800641e:	00db      	lsls	r3, r3, #3
 8006420:	429a      	cmp	r2, r3
 8006422:	d902      	bls.n	800642a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006424:	2300      	movs	r3, #0
 8006426:	60fb      	str	r3, [r7, #12]
 8006428:	e002      	b.n	8006430 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800642a:	2380      	movs	r3, #128	@ 0x80
 800642c:	015b      	lsls	r3, r3, #5
 800642e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	68da      	ldr	r2, [r3, #12]
 8006434:	23f0      	movs	r3, #240	@ 0xf0
 8006436:	011b      	lsls	r3, r3, #4
 8006438:	429a      	cmp	r2, r3
 800643a:	d008      	beq.n	800644e <HAL_SPI_Init+0xaa>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68da      	ldr	r2, [r3, #12]
 8006440:	23e0      	movs	r3, #224	@ 0xe0
 8006442:	00db      	lsls	r3, r3, #3
 8006444:	429a      	cmp	r2, r3
 8006446:	d002      	beq.n	800644e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685a      	ldr	r2, [r3, #4]
 8006452:	2382      	movs	r3, #130	@ 0x82
 8006454:	005b      	lsls	r3, r3, #1
 8006456:	401a      	ands	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6899      	ldr	r1, [r3, #8]
 800645c:	2384      	movs	r3, #132	@ 0x84
 800645e:	021b      	lsls	r3, r3, #8
 8006460:	400b      	ands	r3, r1
 8006462:	431a      	orrs	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	2102      	movs	r1, #2
 800646a:	400b      	ands	r3, r1
 800646c:	431a      	orrs	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	2101      	movs	r1, #1
 8006474:	400b      	ands	r3, r1
 8006476:	431a      	orrs	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6999      	ldr	r1, [r3, #24]
 800647c:	2380      	movs	r3, #128	@ 0x80
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	400b      	ands	r3, r1
 8006482:	431a      	orrs	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	2138      	movs	r1, #56	@ 0x38
 800648a:	400b      	ands	r3, r1
 800648c:	431a      	orrs	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	2180      	movs	r1, #128	@ 0x80
 8006494:	400b      	ands	r3, r1
 8006496:	431a      	orrs	r2, r3
 8006498:	0011      	movs	r1, r2
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800649e:	2380      	movs	r3, #128	@ 0x80
 80064a0:	019b      	lsls	r3, r3, #6
 80064a2:	401a      	ands	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	430a      	orrs	r2, r1
 80064aa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	0c1b      	lsrs	r3, r3, #16
 80064b2:	2204      	movs	r2, #4
 80064b4:	401a      	ands	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ba:	2110      	movs	r1, #16
 80064bc:	400b      	ands	r3, r1
 80064be:	431a      	orrs	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064c4:	2108      	movs	r1, #8
 80064c6:	400b      	ands	r3, r1
 80064c8:	431a      	orrs	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68d9      	ldr	r1, [r3, #12]
 80064ce:	23f0      	movs	r3, #240	@ 0xf0
 80064d0:	011b      	lsls	r3, r3, #4
 80064d2:	400b      	ands	r3, r1
 80064d4:	431a      	orrs	r2, r3
 80064d6:	0011      	movs	r1, r2
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	2380      	movs	r3, #128	@ 0x80
 80064dc:	015b      	lsls	r3, r3, #5
 80064de:	401a      	ands	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	69da      	ldr	r2, [r3, #28]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4907      	ldr	r1, [pc, #28]	@ (8006510 <HAL_SPI_Init+0x16c>)
 80064f4:	400a      	ands	r2, r1
 80064f6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	225d      	movs	r2, #93	@ 0x5d
 8006502:	2101      	movs	r1, #1
 8006504:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	0018      	movs	r0, r3
 800650a:	46bd      	mov	sp, r7
 800650c:	b004      	add	sp, #16
 800650e:	bd80      	pop	{r7, pc}
 8006510:	fffff7ff 	.word	0xfffff7ff

08006514 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b088      	sub	sp, #32
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	603b      	str	r3, [r7, #0]
 8006520:	1dbb      	adds	r3, r7, #6
 8006522:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006524:	231f      	movs	r3, #31
 8006526:	18fb      	adds	r3, r7, r3
 8006528:	2200      	movs	r2, #0
 800652a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	225c      	movs	r2, #92	@ 0x5c
 8006530:	5c9b      	ldrb	r3, [r3, r2]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d101      	bne.n	800653a <HAL_SPI_Transmit+0x26>
 8006536:	2302      	movs	r3, #2
 8006538:	e147      	b.n	80067ca <HAL_SPI_Transmit+0x2b6>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	225c      	movs	r2, #92	@ 0x5c
 800653e:	2101      	movs	r1, #1
 8006540:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006542:	f7fd fc03 	bl	8003d4c <HAL_GetTick>
 8006546:	0003      	movs	r3, r0
 8006548:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800654a:	2316      	movs	r3, #22
 800654c:	18fb      	adds	r3, r7, r3
 800654e:	1dba      	adds	r2, r7, #6
 8006550:	8812      	ldrh	r2, [r2, #0]
 8006552:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	225d      	movs	r2, #93	@ 0x5d
 8006558:	5c9b      	ldrb	r3, [r3, r2]
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b01      	cmp	r3, #1
 800655e:	d004      	beq.n	800656a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006560:	231f      	movs	r3, #31
 8006562:	18fb      	adds	r3, r7, r3
 8006564:	2202      	movs	r2, #2
 8006566:	701a      	strb	r2, [r3, #0]
    goto error;
 8006568:	e128      	b.n	80067bc <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <HAL_SPI_Transmit+0x64>
 8006570:	1dbb      	adds	r3, r7, #6
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d104      	bne.n	8006582 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006578:	231f      	movs	r3, #31
 800657a:	18fb      	adds	r3, r7, r3
 800657c:	2201      	movs	r2, #1
 800657e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006580:	e11c      	b.n	80067bc <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	225d      	movs	r2, #93	@ 0x5d
 8006586:	2103      	movs	r1, #3
 8006588:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	1dba      	adds	r2, r7, #6
 800659a:	8812      	ldrh	r2, [r2, #0]
 800659c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	1dba      	adds	r2, r7, #6
 80065a2:	8812      	ldrh	r2, [r2, #0]
 80065a4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2244      	movs	r2, #68	@ 0x44
 80065b0:	2100      	movs	r1, #0
 80065b2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2246      	movs	r2, #70	@ 0x46
 80065b8:	2100      	movs	r1, #0
 80065ba:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	689a      	ldr	r2, [r3, #8]
 80065cc:	2380      	movs	r3, #128	@ 0x80
 80065ce:	021b      	lsls	r3, r3, #8
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d110      	bne.n	80065f6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2140      	movs	r1, #64	@ 0x40
 80065e0:	438a      	bics	r2, r1
 80065e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2180      	movs	r1, #128	@ 0x80
 80065f0:	01c9      	lsls	r1, r1, #7
 80065f2:	430a      	orrs	r2, r1
 80065f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2240      	movs	r2, #64	@ 0x40
 80065fe:	4013      	ands	r3, r2
 8006600:	2b40      	cmp	r3, #64	@ 0x40
 8006602:	d007      	beq.n	8006614 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2140      	movs	r1, #64	@ 0x40
 8006610:	430a      	orrs	r2, r1
 8006612:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	68da      	ldr	r2, [r3, #12]
 8006618:	23e0      	movs	r3, #224	@ 0xe0
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	429a      	cmp	r2, r3
 800661e:	d952      	bls.n	80066c6 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d004      	beq.n	8006632 <HAL_SPI_Transmit+0x11e>
 8006628:	2316      	movs	r3, #22
 800662a:	18fb      	adds	r3, r7, r3
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	2b01      	cmp	r3, #1
 8006630:	d143      	bne.n	80066ba <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006636:	881a      	ldrh	r2, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006642:	1c9a      	adds	r2, r3, #2
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800664c:	b29b      	uxth	r3, r3
 800664e:	3b01      	subs	r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006656:	e030      	b.n	80066ba <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	2202      	movs	r2, #2
 8006660:	4013      	ands	r3, r2
 8006662:	2b02      	cmp	r3, #2
 8006664:	d112      	bne.n	800668c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800666a:	881a      	ldrh	r2, [r3, #0]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006676:	1c9a      	adds	r2, r3, #2
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006680:	b29b      	uxth	r3, r3
 8006682:	3b01      	subs	r3, #1
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800668a:	e016      	b.n	80066ba <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800668c:	f7fd fb5e 	bl	8003d4c <HAL_GetTick>
 8006690:	0002      	movs	r2, r0
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	429a      	cmp	r2, r3
 800669a:	d802      	bhi.n	80066a2 <HAL_SPI_Transmit+0x18e>
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	3301      	adds	r3, #1
 80066a0:	d102      	bne.n	80066a8 <HAL_SPI_Transmit+0x194>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d108      	bne.n	80066ba <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 80066a8:	231f      	movs	r3, #31
 80066aa:	18fb      	adds	r3, r7, r3
 80066ac:	2203      	movs	r2, #3
 80066ae:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	225d      	movs	r2, #93	@ 0x5d
 80066b4:	2101      	movs	r1, #1
 80066b6:	5499      	strb	r1, [r3, r2]
          goto error;
 80066b8:	e080      	b.n	80067bc <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066be:	b29b      	uxth	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1c9      	bne.n	8006658 <HAL_SPI_Transmit+0x144>
 80066c4:	e053      	b.n	800676e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d004      	beq.n	80066d8 <HAL_SPI_Transmit+0x1c4>
 80066ce:	2316      	movs	r3, #22
 80066d0:	18fb      	adds	r3, r7, r3
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d145      	bne.n	8006764 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	330c      	adds	r3, #12
 80066e2:	7812      	ldrb	r2, [r2, #0]
 80066e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ea:	1c5a      	adds	r2, r3, #1
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	3b01      	subs	r3, #1
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80066fe:	e031      	b.n	8006764 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	2202      	movs	r2, #2
 8006708:	4013      	ands	r3, r2
 800670a:	2b02      	cmp	r3, #2
 800670c:	d113      	bne.n	8006736 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	330c      	adds	r3, #12
 8006718:	7812      	ldrb	r2, [r2, #0]
 800671a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006720:	1c5a      	adds	r2, r3, #1
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800672a:	b29b      	uxth	r3, r3
 800672c:	3b01      	subs	r3, #1
 800672e:	b29a      	uxth	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006734:	e016      	b.n	8006764 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006736:	f7fd fb09 	bl	8003d4c <HAL_GetTick>
 800673a:	0002      	movs	r2, r0
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	683a      	ldr	r2, [r7, #0]
 8006742:	429a      	cmp	r2, r3
 8006744:	d802      	bhi.n	800674c <HAL_SPI_Transmit+0x238>
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	3301      	adds	r3, #1
 800674a:	d102      	bne.n	8006752 <HAL_SPI_Transmit+0x23e>
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d108      	bne.n	8006764 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8006752:	231f      	movs	r3, #31
 8006754:	18fb      	adds	r3, r7, r3
 8006756:	2203      	movs	r2, #3
 8006758:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	225d      	movs	r2, #93	@ 0x5d
 800675e:	2101      	movs	r1, #1
 8006760:	5499      	strb	r1, [r3, r2]
          goto error;
 8006762:	e02b      	b.n	80067bc <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006768:	b29b      	uxth	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1c8      	bne.n	8006700 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800676e:	69ba      	ldr	r2, [r7, #24]
 8006770:	6839      	ldr	r1, [r7, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	0018      	movs	r0, r3
 8006776:	f000 f95d 	bl	8006a34 <SPI_EndRxTxTransaction>
 800677a:	1e03      	subs	r3, r0, #0
 800677c:	d002      	beq.n	8006784 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2220      	movs	r2, #32
 8006782:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10a      	bne.n	80067a2 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800678c:	2300      	movs	r3, #0
 800678e:	613b      	str	r3, [r7, #16]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	613b      	str	r3, [r7, #16]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	613b      	str	r3, [r7, #16]
 80067a0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d004      	beq.n	80067b4 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80067aa:	231f      	movs	r3, #31
 80067ac:	18fb      	adds	r3, r7, r3
 80067ae:	2201      	movs	r2, #1
 80067b0:	701a      	strb	r2, [r3, #0]
 80067b2:	e003      	b.n	80067bc <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	225d      	movs	r2, #93	@ 0x5d
 80067b8:	2101      	movs	r1, #1
 80067ba:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	225c      	movs	r2, #92	@ 0x5c
 80067c0:	2100      	movs	r1, #0
 80067c2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80067c4:	231f      	movs	r3, #31
 80067c6:	18fb      	adds	r3, r7, r3
 80067c8:	781b      	ldrb	r3, [r3, #0]
}
 80067ca:	0018      	movs	r0, r3
 80067cc:	46bd      	mov	sp, r7
 80067ce:	b008      	add	sp, #32
 80067d0:	bd80      	pop	{r7, pc}
	...

080067d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b088      	sub	sp, #32
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	603b      	str	r3, [r7, #0]
 80067e0:	1dfb      	adds	r3, r7, #7
 80067e2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80067e4:	f7fd fab2 	bl	8003d4c <HAL_GetTick>
 80067e8:	0002      	movs	r2, r0
 80067ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ec:	1a9b      	subs	r3, r3, r2
 80067ee:	683a      	ldr	r2, [r7, #0]
 80067f0:	18d3      	adds	r3, r2, r3
 80067f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067f4:	f7fd faaa 	bl	8003d4c <HAL_GetTick>
 80067f8:	0003      	movs	r3, r0
 80067fa:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067fc:	4b3a      	ldr	r3, [pc, #232]	@ (80068e8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	015b      	lsls	r3, r3, #5
 8006802:	0d1b      	lsrs	r3, r3, #20
 8006804:	69fa      	ldr	r2, [r7, #28]
 8006806:	4353      	muls	r3, r2
 8006808:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800680a:	e058      	b.n	80068be <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	3301      	adds	r3, #1
 8006810:	d055      	beq.n	80068be <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006812:	f7fd fa9b 	bl	8003d4c <HAL_GetTick>
 8006816:	0002      	movs	r2, r0
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	69fa      	ldr	r2, [r7, #28]
 800681e:	429a      	cmp	r2, r3
 8006820:	d902      	bls.n	8006828 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d142      	bne.n	80068ae <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	21e0      	movs	r1, #224	@ 0xe0
 8006834:	438a      	bics	r2, r1
 8006836:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	2382      	movs	r3, #130	@ 0x82
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	429a      	cmp	r2, r3
 8006842:	d113      	bne.n	800686c <SPI_WaitFlagStateUntilTimeout+0x98>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	689a      	ldr	r2, [r3, #8]
 8006848:	2380      	movs	r3, #128	@ 0x80
 800684a:	021b      	lsls	r3, r3, #8
 800684c:	429a      	cmp	r2, r3
 800684e:	d005      	beq.n	800685c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	689a      	ldr	r2, [r3, #8]
 8006854:	2380      	movs	r3, #128	@ 0x80
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	429a      	cmp	r2, r3
 800685a:	d107      	bne.n	800686c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2140      	movs	r1, #64	@ 0x40
 8006868:	438a      	bics	r2, r1
 800686a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006870:	2380      	movs	r3, #128	@ 0x80
 8006872:	019b      	lsls	r3, r3, #6
 8006874:	429a      	cmp	r2, r3
 8006876:	d110      	bne.n	800689a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	491a      	ldr	r1, [pc, #104]	@ (80068ec <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006884:	400a      	ands	r2, r1
 8006886:	601a      	str	r2, [r3, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2180      	movs	r1, #128	@ 0x80
 8006894:	0189      	lsls	r1, r1, #6
 8006896:	430a      	orrs	r2, r1
 8006898:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	225d      	movs	r2, #93	@ 0x5d
 800689e:	2101      	movs	r1, #1
 80068a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	225c      	movs	r2, #92	@ 0x5c
 80068a6:	2100      	movs	r1, #0
 80068a8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e017      	b.n	80068de <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	3b01      	subs	r3, #1
 80068bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	4013      	ands	r3, r2
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	425a      	negs	r2, r3
 80068ce:	4153      	adcs	r3, r2
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	001a      	movs	r2, r3
 80068d4:	1dfb      	adds	r3, r7, #7
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d197      	bne.n	800680c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	0018      	movs	r0, r3
 80068e0:	46bd      	mov	sp, r7
 80068e2:	b008      	add	sp, #32
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	46c0      	nop			@ (mov r8, r8)
 80068e8:	200004f4 	.word	0x200004f4
 80068ec:	ffffdfff 	.word	0xffffdfff

080068f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b08a      	sub	sp, #40	@ 0x28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
 80068fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80068fe:	2317      	movs	r3, #23
 8006900:	18fb      	adds	r3, r7, r3
 8006902:	2200      	movs	r2, #0
 8006904:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006906:	f7fd fa21 	bl	8003d4c <HAL_GetTick>
 800690a:	0002      	movs	r2, r0
 800690c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690e:	1a9b      	subs	r3, r3, r2
 8006910:	683a      	ldr	r2, [r7, #0]
 8006912:	18d3      	adds	r3, r2, r3
 8006914:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006916:	f7fd fa19 	bl	8003d4c <HAL_GetTick>
 800691a:	0003      	movs	r3, r0
 800691c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	330c      	adds	r3, #12
 8006924:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006926:	4b41      	ldr	r3, [pc, #260]	@ (8006a2c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	0013      	movs	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	189b      	adds	r3, r3, r2
 8006930:	00da      	lsls	r2, r3, #3
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	0d1b      	lsrs	r3, r3, #20
 8006936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006938:	4353      	muls	r3, r2
 800693a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800693c:	e068      	b.n	8006a10 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	23c0      	movs	r3, #192	@ 0xc0
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	429a      	cmp	r2, r3
 8006946:	d10a      	bne.n	800695e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d107      	bne.n	800695e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	b2da      	uxtb	r2, r3
 8006954:	2117      	movs	r1, #23
 8006956:	187b      	adds	r3, r7, r1
 8006958:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800695a:	187b      	adds	r3, r7, r1
 800695c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	3301      	adds	r3, #1
 8006962:	d055      	beq.n	8006a10 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006964:	f7fd f9f2 	bl	8003d4c <HAL_GetTick>
 8006968:	0002      	movs	r2, r0
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006970:	429a      	cmp	r2, r3
 8006972:	d902      	bls.n	800697a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006976:	2b00      	cmp	r3, #0
 8006978:	d142      	bne.n	8006a00 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	21e0      	movs	r1, #224	@ 0xe0
 8006986:	438a      	bics	r2, r1
 8006988:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	2382      	movs	r3, #130	@ 0x82
 8006990:	005b      	lsls	r3, r3, #1
 8006992:	429a      	cmp	r2, r3
 8006994:	d113      	bne.n	80069be <SPI_WaitFifoStateUntilTimeout+0xce>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	689a      	ldr	r2, [r3, #8]
 800699a:	2380      	movs	r3, #128	@ 0x80
 800699c:	021b      	lsls	r3, r3, #8
 800699e:	429a      	cmp	r2, r3
 80069a0:	d005      	beq.n	80069ae <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	689a      	ldr	r2, [r3, #8]
 80069a6:	2380      	movs	r3, #128	@ 0x80
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d107      	bne.n	80069be <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2140      	movs	r1, #64	@ 0x40
 80069ba:	438a      	bics	r2, r1
 80069bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069c2:	2380      	movs	r3, #128	@ 0x80
 80069c4:	019b      	lsls	r3, r3, #6
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d110      	bne.n	80069ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4916      	ldr	r1, [pc, #88]	@ (8006a30 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80069d6:	400a      	ands	r2, r1
 80069d8:	601a      	str	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2180      	movs	r1, #128	@ 0x80
 80069e6:	0189      	lsls	r1, r1, #6
 80069e8:	430a      	orrs	r2, r1
 80069ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	225d      	movs	r2, #93	@ 0x5d
 80069f0:	2101      	movs	r1, #1
 80069f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	225c      	movs	r2, #92	@ 0x5c
 80069f8:	2100      	movs	r1, #0
 80069fa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e010      	b.n	8006a22 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	4013      	ands	r3, r2
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d18e      	bne.n	800693e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	0018      	movs	r0, r3
 8006a24:	46bd      	mov	sp, r7
 8006a26:	b00a      	add	sp, #40	@ 0x28
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	46c0      	nop			@ (mov r8, r8)
 8006a2c:	200004f4 	.word	0x200004f4
 8006a30:	ffffdfff 	.word	0xffffdfff

08006a34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af02      	add	r7, sp, #8
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	23c0      	movs	r3, #192	@ 0xc0
 8006a44:	0159      	lsls	r1, r3, #5
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	9300      	str	r3, [sp, #0]
 8006a4c:	0013      	movs	r3, r2
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f7ff ff4e 	bl	80068f0 <SPI_WaitFifoStateUntilTimeout>
 8006a54:	1e03      	subs	r3, r0, #0
 8006a56:	d007      	beq.n	8006a68 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e027      	b.n	8006ab8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	0013      	movs	r3, r2
 8006a72:	2200      	movs	r2, #0
 8006a74:	2180      	movs	r1, #128	@ 0x80
 8006a76:	f7ff fead 	bl	80067d4 <SPI_WaitFlagStateUntilTimeout>
 8006a7a:	1e03      	subs	r3, r0, #0
 8006a7c:	d007      	beq.n	8006a8e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a82:	2220      	movs	r2, #32
 8006a84:	431a      	orrs	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e014      	b.n	8006ab8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	23c0      	movs	r3, #192	@ 0xc0
 8006a92:	00d9      	lsls	r1, r3, #3
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	0013      	movs	r3, r2
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f7ff ff27 	bl	80068f0 <SPI_WaitFifoStateUntilTimeout>
 8006aa2:	1e03      	subs	r3, r0, #0
 8006aa4:	d007      	beq.n	8006ab6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aaa:	2220      	movs	r2, #32
 8006aac:	431a      	orrs	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e000      	b.n	8006ab8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	0018      	movs	r0, r3
 8006aba:	46bd      	mov	sp, r7
 8006abc:	b004      	add	sp, #16
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d101      	bne.n	8006ad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e04a      	b.n	8006b68 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	223d      	movs	r2, #61	@ 0x3d
 8006ad6:	5c9b      	ldrb	r3, [r3, r2]
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d107      	bne.n	8006aee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	223c      	movs	r2, #60	@ 0x3c
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	0018      	movs	r0, r3
 8006aea:	f7fc ff1d 	bl	8003928 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	223d      	movs	r2, #61	@ 0x3d
 8006af2:	2102      	movs	r1, #2
 8006af4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	3304      	adds	r3, #4
 8006afe:	0019      	movs	r1, r3
 8006b00:	0010      	movs	r0, r2
 8006b02:	f000 fb11 	bl	8007128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2248      	movs	r2, #72	@ 0x48
 8006b0a:	2101      	movs	r1, #1
 8006b0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	223e      	movs	r2, #62	@ 0x3e
 8006b12:	2101      	movs	r1, #1
 8006b14:	5499      	strb	r1, [r3, r2]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	223f      	movs	r2, #63	@ 0x3f
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	5499      	strb	r1, [r3, r2]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2240      	movs	r2, #64	@ 0x40
 8006b22:	2101      	movs	r1, #1
 8006b24:	5499      	strb	r1, [r3, r2]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2241      	movs	r2, #65	@ 0x41
 8006b2a:	2101      	movs	r1, #1
 8006b2c:	5499      	strb	r1, [r3, r2]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2242      	movs	r2, #66	@ 0x42
 8006b32:	2101      	movs	r1, #1
 8006b34:	5499      	strb	r1, [r3, r2]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2243      	movs	r2, #67	@ 0x43
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2244      	movs	r2, #68	@ 0x44
 8006b42:	2101      	movs	r1, #1
 8006b44:	5499      	strb	r1, [r3, r2]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2245      	movs	r2, #69	@ 0x45
 8006b4a:	2101      	movs	r1, #1
 8006b4c:	5499      	strb	r1, [r3, r2]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2246      	movs	r2, #70	@ 0x46
 8006b52:	2101      	movs	r1, #1
 8006b54:	5499      	strb	r1, [r3, r2]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2247      	movs	r2, #71	@ 0x47
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	223d      	movs	r2, #61	@ 0x3d
 8006b62:	2101      	movs	r1, #1
 8006b64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	0018      	movs	r0, r3
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	b002      	add	sp, #8
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e04a      	b.n	8006c18 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	223d      	movs	r2, #61	@ 0x3d
 8006b86:	5c9b      	ldrb	r3, [r3, r2]
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d107      	bne.n	8006b9e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	223c      	movs	r2, #60	@ 0x3c
 8006b92:	2100      	movs	r1, #0
 8006b94:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	0018      	movs	r0, r3
 8006b9a:	f000 f841 	bl	8006c20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	223d      	movs	r2, #61	@ 0x3d
 8006ba2:	2102      	movs	r1, #2
 8006ba4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	3304      	adds	r3, #4
 8006bae:	0019      	movs	r1, r3
 8006bb0:	0010      	movs	r0, r2
 8006bb2:	f000 fab9 	bl	8007128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2248      	movs	r2, #72	@ 0x48
 8006bba:	2101      	movs	r1, #1
 8006bbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	223e      	movs	r2, #62	@ 0x3e
 8006bc2:	2101      	movs	r1, #1
 8006bc4:	5499      	strb	r1, [r3, r2]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	223f      	movs	r2, #63	@ 0x3f
 8006bca:	2101      	movs	r1, #1
 8006bcc:	5499      	strb	r1, [r3, r2]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2240      	movs	r2, #64	@ 0x40
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	5499      	strb	r1, [r3, r2]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2241      	movs	r2, #65	@ 0x41
 8006bda:	2101      	movs	r1, #1
 8006bdc:	5499      	strb	r1, [r3, r2]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2242      	movs	r2, #66	@ 0x42
 8006be2:	2101      	movs	r1, #1
 8006be4:	5499      	strb	r1, [r3, r2]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2243      	movs	r2, #67	@ 0x43
 8006bea:	2101      	movs	r1, #1
 8006bec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2244      	movs	r2, #68	@ 0x44
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	5499      	strb	r1, [r3, r2]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2245      	movs	r2, #69	@ 0x45
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	5499      	strb	r1, [r3, r2]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2246      	movs	r2, #70	@ 0x46
 8006c02:	2101      	movs	r1, #1
 8006c04:	5499      	strb	r1, [r3, r2]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2247      	movs	r2, #71	@ 0x47
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	223d      	movs	r2, #61	@ 0x3d
 8006c12:	2101      	movs	r1, #1
 8006c14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	0018      	movs	r0, r3
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	b002      	add	sp, #8
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c28:	46c0      	nop			@ (mov r8, r8)
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	b002      	add	sp, #8
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d108      	bne.n	8006c52 <HAL_TIM_PWM_Start+0x22>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	223e      	movs	r2, #62	@ 0x3e
 8006c44:	5c9b      	ldrb	r3, [r3, r2]
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	1e5a      	subs	r2, r3, #1
 8006c4c:	4193      	sbcs	r3, r2
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	e037      	b.n	8006cc2 <HAL_TIM_PWM_Start+0x92>
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b04      	cmp	r3, #4
 8006c56:	d108      	bne.n	8006c6a <HAL_TIM_PWM_Start+0x3a>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	223f      	movs	r2, #63	@ 0x3f
 8006c5c:	5c9b      	ldrb	r3, [r3, r2]
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	3b01      	subs	r3, #1
 8006c62:	1e5a      	subs	r2, r3, #1
 8006c64:	4193      	sbcs	r3, r2
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	e02b      	b.n	8006cc2 <HAL_TIM_PWM_Start+0x92>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b08      	cmp	r3, #8
 8006c6e:	d108      	bne.n	8006c82 <HAL_TIM_PWM_Start+0x52>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2240      	movs	r2, #64	@ 0x40
 8006c74:	5c9b      	ldrb	r3, [r3, r2]
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	1e5a      	subs	r2, r3, #1
 8006c7c:	4193      	sbcs	r3, r2
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	e01f      	b.n	8006cc2 <HAL_TIM_PWM_Start+0x92>
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	2b0c      	cmp	r3, #12
 8006c86:	d108      	bne.n	8006c9a <HAL_TIM_PWM_Start+0x6a>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2241      	movs	r2, #65	@ 0x41
 8006c8c:	5c9b      	ldrb	r3, [r3, r2]
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	3b01      	subs	r3, #1
 8006c92:	1e5a      	subs	r2, r3, #1
 8006c94:	4193      	sbcs	r3, r2
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	e013      	b.n	8006cc2 <HAL_TIM_PWM_Start+0x92>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b10      	cmp	r3, #16
 8006c9e:	d108      	bne.n	8006cb2 <HAL_TIM_PWM_Start+0x82>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2242      	movs	r2, #66	@ 0x42
 8006ca4:	5c9b      	ldrb	r3, [r3, r2]
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	1e5a      	subs	r2, r3, #1
 8006cac:	4193      	sbcs	r3, r2
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	e007      	b.n	8006cc2 <HAL_TIM_PWM_Start+0x92>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2243      	movs	r2, #67	@ 0x43
 8006cb6:	5c9b      	ldrb	r3, [r3, r2]
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	1e5a      	subs	r2, r3, #1
 8006cbe:	4193      	sbcs	r3, r2
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d001      	beq.n	8006cca <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e090      	b.n	8006dec <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d104      	bne.n	8006cda <HAL_TIM_PWM_Start+0xaa>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	223e      	movs	r2, #62	@ 0x3e
 8006cd4:	2102      	movs	r1, #2
 8006cd6:	5499      	strb	r1, [r3, r2]
 8006cd8:	e023      	b.n	8006d22 <HAL_TIM_PWM_Start+0xf2>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b04      	cmp	r3, #4
 8006cde:	d104      	bne.n	8006cea <HAL_TIM_PWM_Start+0xba>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	223f      	movs	r2, #63	@ 0x3f
 8006ce4:	2102      	movs	r1, #2
 8006ce6:	5499      	strb	r1, [r3, r2]
 8006ce8:	e01b      	b.n	8006d22 <HAL_TIM_PWM_Start+0xf2>
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b08      	cmp	r3, #8
 8006cee:	d104      	bne.n	8006cfa <HAL_TIM_PWM_Start+0xca>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2240      	movs	r2, #64	@ 0x40
 8006cf4:	2102      	movs	r1, #2
 8006cf6:	5499      	strb	r1, [r3, r2]
 8006cf8:	e013      	b.n	8006d22 <HAL_TIM_PWM_Start+0xf2>
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2b0c      	cmp	r3, #12
 8006cfe:	d104      	bne.n	8006d0a <HAL_TIM_PWM_Start+0xda>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2241      	movs	r2, #65	@ 0x41
 8006d04:	2102      	movs	r1, #2
 8006d06:	5499      	strb	r1, [r3, r2]
 8006d08:	e00b      	b.n	8006d22 <HAL_TIM_PWM_Start+0xf2>
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b10      	cmp	r3, #16
 8006d0e:	d104      	bne.n	8006d1a <HAL_TIM_PWM_Start+0xea>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2242      	movs	r2, #66	@ 0x42
 8006d14:	2102      	movs	r1, #2
 8006d16:	5499      	strb	r1, [r3, r2]
 8006d18:	e003      	b.n	8006d22 <HAL_TIM_PWM_Start+0xf2>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2243      	movs	r2, #67	@ 0x43
 8006d1e:	2102      	movs	r1, #2
 8006d20:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	0018      	movs	r0, r3
 8006d2c:	f000 fd58 	bl	80077e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a2f      	ldr	r2, [pc, #188]	@ (8006df4 <HAL_TIM_PWM_Start+0x1c4>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d00e      	beq.n	8006d58 <HAL_TIM_PWM_Start+0x128>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a2e      	ldr	r2, [pc, #184]	@ (8006df8 <HAL_TIM_PWM_Start+0x1c8>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d009      	beq.n	8006d58 <HAL_TIM_PWM_Start+0x128>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a2c      	ldr	r2, [pc, #176]	@ (8006dfc <HAL_TIM_PWM_Start+0x1cc>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d004      	beq.n	8006d58 <HAL_TIM_PWM_Start+0x128>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a2b      	ldr	r2, [pc, #172]	@ (8006e00 <HAL_TIM_PWM_Start+0x1d0>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d101      	bne.n	8006d5c <HAL_TIM_PWM_Start+0x12c>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e000      	b.n	8006d5e <HAL_TIM_PWM_Start+0x12e>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d008      	beq.n	8006d74 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2180      	movs	r1, #128	@ 0x80
 8006d6e:	0209      	lsls	r1, r1, #8
 8006d70:	430a      	orrs	r2, r1
 8006d72:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a1e      	ldr	r2, [pc, #120]	@ (8006df4 <HAL_TIM_PWM_Start+0x1c4>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d014      	beq.n	8006da8 <HAL_TIM_PWM_Start+0x178>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	2380      	movs	r3, #128	@ 0x80
 8006d84:	05db      	lsls	r3, r3, #23
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d00e      	beq.n	8006da8 <HAL_TIM_PWM_Start+0x178>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a1d      	ldr	r2, [pc, #116]	@ (8006e04 <HAL_TIM_PWM_Start+0x1d4>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d009      	beq.n	8006da8 <HAL_TIM_PWM_Start+0x178>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a1b      	ldr	r2, [pc, #108]	@ (8006e08 <HAL_TIM_PWM_Start+0x1d8>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d004      	beq.n	8006da8 <HAL_TIM_PWM_Start+0x178>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a15      	ldr	r2, [pc, #84]	@ (8006df8 <HAL_TIM_PWM_Start+0x1c8>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d116      	bne.n	8006dd6 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	4a17      	ldr	r2, [pc, #92]	@ (8006e0c <HAL_TIM_PWM_Start+0x1dc>)
 8006db0:	4013      	ands	r3, r2
 8006db2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2b06      	cmp	r3, #6
 8006db8:	d016      	beq.n	8006de8 <HAL_TIM_PWM_Start+0x1b8>
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	2380      	movs	r3, #128	@ 0x80
 8006dbe:	025b      	lsls	r3, r3, #9
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d011      	beq.n	8006de8 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2101      	movs	r1, #1
 8006dd0:	430a      	orrs	r2, r1
 8006dd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dd4:	e008      	b.n	8006de8 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2101      	movs	r1, #1
 8006de2:	430a      	orrs	r2, r1
 8006de4:	601a      	str	r2, [r3, #0]
 8006de6:	e000      	b.n	8006dea <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006de8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	0018      	movs	r0, r3
 8006dee:	46bd      	mov	sp, r7
 8006df0:	b004      	add	sp, #16
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	40012c00 	.word	0x40012c00
 8006df8:	40014000 	.word	0x40014000
 8006dfc:	40014400 	.word	0x40014400
 8006e00:	40014800 	.word	0x40014800
 8006e04:	40000400 	.word	0x40000400
 8006e08:	40000800 	.word	0x40000800
 8006e0c:	00010007 	.word	0x00010007

08006e10 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	2200      	movs	r2, #0
 8006e22:	0018      	movs	r0, r3
 8006e24:	f000 fcdc 	bl	80077e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a37      	ldr	r2, [pc, #220]	@ (8006f0c <HAL_TIM_PWM_Stop+0xfc>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d00e      	beq.n	8006e50 <HAL_TIM_PWM_Stop+0x40>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a36      	ldr	r2, [pc, #216]	@ (8006f10 <HAL_TIM_PWM_Stop+0x100>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d009      	beq.n	8006e50 <HAL_TIM_PWM_Stop+0x40>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a34      	ldr	r2, [pc, #208]	@ (8006f14 <HAL_TIM_PWM_Stop+0x104>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d004      	beq.n	8006e50 <HAL_TIM_PWM_Stop+0x40>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a33      	ldr	r2, [pc, #204]	@ (8006f18 <HAL_TIM_PWM_Stop+0x108>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d101      	bne.n	8006e54 <HAL_TIM_PWM_Stop+0x44>
 8006e50:	2301      	movs	r3, #1
 8006e52:	e000      	b.n	8006e56 <HAL_TIM_PWM_Stop+0x46>
 8006e54:	2300      	movs	r3, #0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d013      	beq.n	8006e82 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	4a2e      	ldr	r2, [pc, #184]	@ (8006f1c <HAL_TIM_PWM_Stop+0x10c>)
 8006e62:	4013      	ands	r3, r2
 8006e64:	d10d      	bne.n	8006e82 <HAL_TIM_PWM_Stop+0x72>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	6a1b      	ldr	r3, [r3, #32]
 8006e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8006f20 <HAL_TIM_PWM_Stop+0x110>)
 8006e6e:	4013      	ands	r3, r2
 8006e70:	d107      	bne.n	8006e82 <HAL_TIM_PWM_Stop+0x72>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4929      	ldr	r1, [pc, #164]	@ (8006f24 <HAL_TIM_PWM_Stop+0x114>)
 8006e7e:	400a      	ands	r2, r1
 8006e80:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6a1b      	ldr	r3, [r3, #32]
 8006e88:	4a24      	ldr	r2, [pc, #144]	@ (8006f1c <HAL_TIM_PWM_Stop+0x10c>)
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	d10d      	bne.n	8006eaa <HAL_TIM_PWM_Stop+0x9a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	4a22      	ldr	r2, [pc, #136]	@ (8006f20 <HAL_TIM_PWM_Stop+0x110>)
 8006e96:	4013      	ands	r3, r2
 8006e98:	d107      	bne.n	8006eaa <HAL_TIM_PWM_Stop+0x9a>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2101      	movs	r1, #1
 8006ea6:	438a      	bics	r2, r1
 8006ea8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d104      	bne.n	8006eba <HAL_TIM_PWM_Stop+0xaa>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	223e      	movs	r2, #62	@ 0x3e
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	5499      	strb	r1, [r3, r2]
 8006eb8:	e023      	b.n	8006f02 <HAL_TIM_PWM_Stop+0xf2>
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2b04      	cmp	r3, #4
 8006ebe:	d104      	bne.n	8006eca <HAL_TIM_PWM_Stop+0xba>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	223f      	movs	r2, #63	@ 0x3f
 8006ec4:	2101      	movs	r1, #1
 8006ec6:	5499      	strb	r1, [r3, r2]
 8006ec8:	e01b      	b.n	8006f02 <HAL_TIM_PWM_Stop+0xf2>
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	d104      	bne.n	8006eda <HAL_TIM_PWM_Stop+0xca>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2240      	movs	r2, #64	@ 0x40
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	5499      	strb	r1, [r3, r2]
 8006ed8:	e013      	b.n	8006f02 <HAL_TIM_PWM_Stop+0xf2>
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b0c      	cmp	r3, #12
 8006ede:	d104      	bne.n	8006eea <HAL_TIM_PWM_Stop+0xda>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2241      	movs	r2, #65	@ 0x41
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	5499      	strb	r1, [r3, r2]
 8006ee8:	e00b      	b.n	8006f02 <HAL_TIM_PWM_Stop+0xf2>
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b10      	cmp	r3, #16
 8006eee:	d104      	bne.n	8006efa <HAL_TIM_PWM_Stop+0xea>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2242      	movs	r2, #66	@ 0x42
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	5499      	strb	r1, [r3, r2]
 8006ef8:	e003      	b.n	8006f02 <HAL_TIM_PWM_Stop+0xf2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2243      	movs	r2, #67	@ 0x43
 8006efe:	2101      	movs	r1, #1
 8006f00:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	0018      	movs	r0, r3
 8006f06:	46bd      	mov	sp, r7
 8006f08:	b002      	add	sp, #8
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	40012c00 	.word	0x40012c00
 8006f10:	40014000 	.word	0x40014000
 8006f14:	40014400 	.word	0x40014400
 8006f18:	40014800 	.word	0x40014800
 8006f1c:	00001111 	.word	0x00001111
 8006f20:	00000444 	.word	0x00000444
 8006f24:	ffff7fff 	.word	0xffff7fff

08006f28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f34:	2317      	movs	r3, #23
 8006f36:	18fb      	adds	r3, r7, r3
 8006f38:	2200      	movs	r2, #0
 8006f3a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	223c      	movs	r2, #60	@ 0x3c
 8006f40:	5c9b      	ldrb	r3, [r3, r2]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d101      	bne.n	8006f4a <HAL_TIM_PWM_ConfigChannel+0x22>
 8006f46:	2302      	movs	r3, #2
 8006f48:	e0e5      	b.n	8007116 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	223c      	movs	r2, #60	@ 0x3c
 8006f4e:	2101      	movs	r1, #1
 8006f50:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b14      	cmp	r3, #20
 8006f56:	d900      	bls.n	8006f5a <HAL_TIM_PWM_ConfigChannel+0x32>
 8006f58:	e0d1      	b.n	80070fe <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	009a      	lsls	r2, r3, #2
 8006f5e:	4b70      	ldr	r3, [pc, #448]	@ (8007120 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8006f60:	18d3      	adds	r3, r2, r3
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	0011      	movs	r1, r2
 8006f6e:	0018      	movs	r0, r3
 8006f70:	f000 f972 	bl	8007258 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	699a      	ldr	r2, [r3, #24]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2108      	movs	r1, #8
 8006f80:	430a      	orrs	r2, r1
 8006f82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	699a      	ldr	r2, [r3, #24]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2104      	movs	r1, #4
 8006f90:	438a      	bics	r2, r1
 8006f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6999      	ldr	r1, [r3, #24]
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	691a      	ldr	r2, [r3, #16]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	619a      	str	r2, [r3, #24]
      break;
 8006fa6:	e0af      	b.n	8007108 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	0011      	movs	r1, r2
 8006fb0:	0018      	movs	r0, r3
 8006fb2:	f000 f9db 	bl	800736c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	699a      	ldr	r2, [r3, #24]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2180      	movs	r1, #128	@ 0x80
 8006fc2:	0109      	lsls	r1, r1, #4
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	699a      	ldr	r2, [r3, #24]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4954      	ldr	r1, [pc, #336]	@ (8007124 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006fd4:	400a      	ands	r2, r1
 8006fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6999      	ldr	r1, [r3, #24]
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	021a      	lsls	r2, r3, #8
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	619a      	str	r2, [r3, #24]
      break;
 8006fec:	e08c      	b.n	8007108 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	0011      	movs	r1, r2
 8006ff6:	0018      	movs	r0, r3
 8006ff8:	f000 fa3c 	bl	8007474 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	69da      	ldr	r2, [r3, #28]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2108      	movs	r1, #8
 8007008:	430a      	orrs	r2, r1
 800700a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	69da      	ldr	r2, [r3, #28]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2104      	movs	r1, #4
 8007018:	438a      	bics	r2, r1
 800701a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	69d9      	ldr	r1, [r3, #28]
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	691a      	ldr	r2, [r3, #16]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	61da      	str	r2, [r3, #28]
      break;
 800702e:	e06b      	b.n	8007108 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	0011      	movs	r1, r2
 8007038:	0018      	movs	r0, r3
 800703a:	f000 faa3 	bl	8007584 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	69da      	ldr	r2, [r3, #28]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2180      	movs	r1, #128	@ 0x80
 800704a:	0109      	lsls	r1, r1, #4
 800704c:	430a      	orrs	r2, r1
 800704e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	69da      	ldr	r2, [r3, #28]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4932      	ldr	r1, [pc, #200]	@ (8007124 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800705c:	400a      	ands	r2, r1
 800705e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	69d9      	ldr	r1, [r3, #28]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	021a      	lsls	r2, r3, #8
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	430a      	orrs	r2, r1
 8007072:	61da      	str	r2, [r3, #28]
      break;
 8007074:	e048      	b.n	8007108 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	0011      	movs	r1, r2
 800707e:	0018      	movs	r0, r3
 8007080:	f000 faea 	bl	8007658 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2108      	movs	r1, #8
 8007090:	430a      	orrs	r2, r1
 8007092:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2104      	movs	r1, #4
 80070a0:	438a      	bics	r2, r1
 80070a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	691a      	ldr	r2, [r3, #16]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80070b6:	e027      	b.n	8007108 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	0011      	movs	r1, r2
 80070c0:	0018      	movs	r0, r3
 80070c2:	f000 fb29 	bl	8007718 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2180      	movs	r1, #128	@ 0x80
 80070d2:	0109      	lsls	r1, r1, #4
 80070d4:	430a      	orrs	r2, r1
 80070d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4910      	ldr	r1, [pc, #64]	@ (8007124 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80070e4:	400a      	ands	r2, r1
 80070e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	021a      	lsls	r2, r3, #8
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	430a      	orrs	r2, r1
 80070fa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80070fc:	e004      	b.n	8007108 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80070fe:	2317      	movs	r3, #23
 8007100:	18fb      	adds	r3, r7, r3
 8007102:	2201      	movs	r2, #1
 8007104:	701a      	strb	r2, [r3, #0]
      break;
 8007106:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	223c      	movs	r2, #60	@ 0x3c
 800710c:	2100      	movs	r1, #0
 800710e:	5499      	strb	r1, [r3, r2]

  return status;
 8007110:	2317      	movs	r3, #23
 8007112:	18fb      	adds	r3, r7, r3
 8007114:	781b      	ldrb	r3, [r3, #0]
}
 8007116:	0018      	movs	r0, r3
 8007118:	46bd      	mov	sp, r7
 800711a:	b006      	add	sp, #24
 800711c:	bd80      	pop	{r7, pc}
 800711e:	46c0      	nop			@ (mov r8, r8)
 8007120:	08009b60 	.word	0x08009b60
 8007124:	fffffbff 	.word	0xfffffbff

08007128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a3f      	ldr	r2, [pc, #252]	@ (8007238 <TIM_Base_SetConfig+0x110>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d00c      	beq.n	800715a <TIM_Base_SetConfig+0x32>
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	2380      	movs	r3, #128	@ 0x80
 8007144:	05db      	lsls	r3, r3, #23
 8007146:	429a      	cmp	r2, r3
 8007148:	d007      	beq.n	800715a <TIM_Base_SetConfig+0x32>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a3b      	ldr	r2, [pc, #236]	@ (800723c <TIM_Base_SetConfig+0x114>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d003      	beq.n	800715a <TIM_Base_SetConfig+0x32>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a3a      	ldr	r2, [pc, #232]	@ (8007240 <TIM_Base_SetConfig+0x118>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d108      	bne.n	800716c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2270      	movs	r2, #112	@ 0x70
 800715e:	4393      	bics	r3, r2
 8007160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	4313      	orrs	r3, r2
 800716a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a32      	ldr	r2, [pc, #200]	@ (8007238 <TIM_Base_SetConfig+0x110>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d01c      	beq.n	80071ae <TIM_Base_SetConfig+0x86>
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	2380      	movs	r3, #128	@ 0x80
 8007178:	05db      	lsls	r3, r3, #23
 800717a:	429a      	cmp	r2, r3
 800717c:	d017      	beq.n	80071ae <TIM_Base_SetConfig+0x86>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a2e      	ldr	r2, [pc, #184]	@ (800723c <TIM_Base_SetConfig+0x114>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d013      	beq.n	80071ae <TIM_Base_SetConfig+0x86>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a2d      	ldr	r2, [pc, #180]	@ (8007240 <TIM_Base_SetConfig+0x118>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d00f      	beq.n	80071ae <TIM_Base_SetConfig+0x86>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4a2c      	ldr	r2, [pc, #176]	@ (8007244 <TIM_Base_SetConfig+0x11c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d00b      	beq.n	80071ae <TIM_Base_SetConfig+0x86>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	4a2b      	ldr	r2, [pc, #172]	@ (8007248 <TIM_Base_SetConfig+0x120>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d007      	beq.n	80071ae <TIM_Base_SetConfig+0x86>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a2a      	ldr	r2, [pc, #168]	@ (800724c <TIM_Base_SetConfig+0x124>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d003      	beq.n	80071ae <TIM_Base_SetConfig+0x86>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a29      	ldr	r2, [pc, #164]	@ (8007250 <TIM_Base_SetConfig+0x128>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d108      	bne.n	80071c0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	4a28      	ldr	r2, [pc, #160]	@ (8007254 <TIM_Base_SetConfig+0x12c>)
 80071b2:	4013      	ands	r3, r2
 80071b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	4313      	orrs	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2280      	movs	r2, #128	@ 0x80
 80071c4:	4393      	bics	r3, r2
 80071c6:	001a      	movs	r2, r3
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	695b      	ldr	r3, [r3, #20]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	689a      	ldr	r2, [r3, #8]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a13      	ldr	r2, [pc, #76]	@ (8007238 <TIM_Base_SetConfig+0x110>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d00b      	beq.n	8007206 <TIM_Base_SetConfig+0xde>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a15      	ldr	r2, [pc, #84]	@ (8007248 <TIM_Base_SetConfig+0x120>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d007      	beq.n	8007206 <TIM_Base_SetConfig+0xde>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a14      	ldr	r2, [pc, #80]	@ (800724c <TIM_Base_SetConfig+0x124>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d003      	beq.n	8007206 <TIM_Base_SetConfig+0xde>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a13      	ldr	r2, [pc, #76]	@ (8007250 <TIM_Base_SetConfig+0x128>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d103      	bne.n	800720e <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	691a      	ldr	r2, [r3, #16]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	2201      	movs	r2, #1
 800721a:	4013      	ands	r3, r2
 800721c:	2b01      	cmp	r3, #1
 800721e:	d106      	bne.n	800722e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	2201      	movs	r2, #1
 8007226:	4393      	bics	r3, r2
 8007228:	001a      	movs	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	611a      	str	r2, [r3, #16]
  }
}
 800722e:	46c0      	nop			@ (mov r8, r8)
 8007230:	46bd      	mov	sp, r7
 8007232:	b004      	add	sp, #16
 8007234:	bd80      	pop	{r7, pc}
 8007236:	46c0      	nop			@ (mov r8, r8)
 8007238:	40012c00 	.word	0x40012c00
 800723c:	40000400 	.word	0x40000400
 8007240:	40000800 	.word	0x40000800
 8007244:	40002000 	.word	0x40002000
 8007248:	40014000 	.word	0x40014000
 800724c:	40014400 	.word	0x40014400
 8007250:	40014800 	.word	0x40014800
 8007254:	fffffcff 	.word	0xfffffcff

08007258 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a1b      	ldr	r3, [r3, #32]
 800726c:	2201      	movs	r2, #1
 800726e:	4393      	bics	r3, r2
 8007270:	001a      	movs	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	4a32      	ldr	r2, [pc, #200]	@ (8007350 <TIM_OC1_SetConfig+0xf8>)
 8007286:	4013      	ands	r3, r2
 8007288:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2203      	movs	r2, #3
 800728e:	4393      	bics	r3, r2
 8007290:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	4313      	orrs	r3, r2
 800729a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	2202      	movs	r2, #2
 80072a0:	4393      	bics	r3, r2
 80072a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a28      	ldr	r2, [pc, #160]	@ (8007354 <TIM_OC1_SetConfig+0xfc>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d00b      	beq.n	80072ce <TIM_OC1_SetConfig+0x76>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a27      	ldr	r2, [pc, #156]	@ (8007358 <TIM_OC1_SetConfig+0x100>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d007      	beq.n	80072ce <TIM_OC1_SetConfig+0x76>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a26      	ldr	r2, [pc, #152]	@ (800735c <TIM_OC1_SetConfig+0x104>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d003      	beq.n	80072ce <TIM_OC1_SetConfig+0x76>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a25      	ldr	r2, [pc, #148]	@ (8007360 <TIM_OC1_SetConfig+0x108>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d10c      	bne.n	80072e8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2208      	movs	r2, #8
 80072d2:	4393      	bics	r3, r2
 80072d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	4313      	orrs	r3, r2
 80072de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2204      	movs	r2, #4
 80072e4:	4393      	bics	r3, r2
 80072e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a1a      	ldr	r2, [pc, #104]	@ (8007354 <TIM_OC1_SetConfig+0xfc>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d00b      	beq.n	8007308 <TIM_OC1_SetConfig+0xb0>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a19      	ldr	r2, [pc, #100]	@ (8007358 <TIM_OC1_SetConfig+0x100>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d007      	beq.n	8007308 <TIM_OC1_SetConfig+0xb0>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a18      	ldr	r2, [pc, #96]	@ (800735c <TIM_OC1_SetConfig+0x104>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d003      	beq.n	8007308 <TIM_OC1_SetConfig+0xb0>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a17      	ldr	r2, [pc, #92]	@ (8007360 <TIM_OC1_SetConfig+0x108>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d111      	bne.n	800732c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	4a16      	ldr	r2, [pc, #88]	@ (8007364 <TIM_OC1_SetConfig+0x10c>)
 800730c:	4013      	ands	r3, r2
 800730e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	4a15      	ldr	r2, [pc, #84]	@ (8007368 <TIM_OC1_SetConfig+0x110>)
 8007314:	4013      	ands	r3, r2
 8007316:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	4313      	orrs	r3, r2
 8007320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	4313      	orrs	r3, r2
 800732a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	621a      	str	r2, [r3, #32]
}
 8007346:	46c0      	nop			@ (mov r8, r8)
 8007348:	46bd      	mov	sp, r7
 800734a:	b006      	add	sp, #24
 800734c:	bd80      	pop	{r7, pc}
 800734e:	46c0      	nop			@ (mov r8, r8)
 8007350:	fffeff8f 	.word	0xfffeff8f
 8007354:	40012c00 	.word	0x40012c00
 8007358:	40014000 	.word	0x40014000
 800735c:	40014400 	.word	0x40014400
 8007360:	40014800 	.word	0x40014800
 8007364:	fffffeff 	.word	0xfffffeff
 8007368:	fffffdff 	.word	0xfffffdff

0800736c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a1b      	ldr	r3, [r3, #32]
 8007380:	2210      	movs	r2, #16
 8007382:	4393      	bics	r3, r2
 8007384:	001a      	movs	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	4a2e      	ldr	r2, [pc, #184]	@ (8007454 <TIM_OC2_SetConfig+0xe8>)
 800739a:	4013      	ands	r3, r2
 800739c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	4a2d      	ldr	r2, [pc, #180]	@ (8007458 <TIM_OC2_SetConfig+0xec>)
 80073a2:	4013      	ands	r3, r2
 80073a4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	021b      	lsls	r3, r3, #8
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	2220      	movs	r2, #32
 80073b6:	4393      	bics	r3, r2
 80073b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	011b      	lsls	r3, r3, #4
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a24      	ldr	r2, [pc, #144]	@ (800745c <TIM_OC2_SetConfig+0xf0>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d10d      	bne.n	80073ea <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	2280      	movs	r2, #128	@ 0x80
 80073d2:	4393      	bics	r3, r2
 80073d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	011b      	lsls	r3, r3, #4
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	4313      	orrs	r3, r2
 80073e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	2240      	movs	r2, #64	@ 0x40
 80073e6:	4393      	bics	r3, r2
 80073e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a1b      	ldr	r2, [pc, #108]	@ (800745c <TIM_OC2_SetConfig+0xf0>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d00b      	beq.n	800740a <TIM_OC2_SetConfig+0x9e>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a1a      	ldr	r2, [pc, #104]	@ (8007460 <TIM_OC2_SetConfig+0xf4>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d007      	beq.n	800740a <TIM_OC2_SetConfig+0x9e>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a19      	ldr	r2, [pc, #100]	@ (8007464 <TIM_OC2_SetConfig+0xf8>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d003      	beq.n	800740a <TIM_OC2_SetConfig+0x9e>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a18      	ldr	r2, [pc, #96]	@ (8007468 <TIM_OC2_SetConfig+0xfc>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d113      	bne.n	8007432 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	4a17      	ldr	r2, [pc, #92]	@ (800746c <TIM_OC2_SetConfig+0x100>)
 800740e:	4013      	ands	r3, r2
 8007410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	4a16      	ldr	r2, [pc, #88]	@ (8007470 <TIM_OC2_SetConfig+0x104>)
 8007416:	4013      	ands	r3, r2
 8007418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	4313      	orrs	r3, r2
 8007424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	4313      	orrs	r3, r2
 8007430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	621a      	str	r2, [r3, #32]
}
 800744c:	46c0      	nop			@ (mov r8, r8)
 800744e:	46bd      	mov	sp, r7
 8007450:	b006      	add	sp, #24
 8007452:	bd80      	pop	{r7, pc}
 8007454:	feff8fff 	.word	0xfeff8fff
 8007458:	fffffcff 	.word	0xfffffcff
 800745c:	40012c00 	.word	0x40012c00
 8007460:	40014000 	.word	0x40014000
 8007464:	40014400 	.word	0x40014400
 8007468:	40014800 	.word	0x40014800
 800746c:	fffffbff 	.word	0xfffffbff
 8007470:	fffff7ff 	.word	0xfffff7ff

08007474 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a1b      	ldr	r3, [r3, #32]
 8007488:	4a33      	ldr	r2, [pc, #204]	@ (8007558 <TIM_OC3_SetConfig+0xe4>)
 800748a:	401a      	ands	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	69db      	ldr	r3, [r3, #28]
 800749a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4a2f      	ldr	r2, [pc, #188]	@ (800755c <TIM_OC3_SetConfig+0xe8>)
 80074a0:	4013      	ands	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2203      	movs	r2, #3
 80074a8:	4393      	bics	r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	4a29      	ldr	r2, [pc, #164]	@ (8007560 <TIM_OC3_SetConfig+0xec>)
 80074ba:	4013      	ands	r3, r2
 80074bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	021b      	lsls	r3, r3, #8
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a25      	ldr	r2, [pc, #148]	@ (8007564 <TIM_OC3_SetConfig+0xf0>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d10d      	bne.n	80074ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	4a24      	ldr	r2, [pc, #144]	@ (8007568 <TIM_OC3_SetConfig+0xf4>)
 80074d6:	4013      	ands	r3, r2
 80074d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	021b      	lsls	r3, r3, #8
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	4a20      	ldr	r2, [pc, #128]	@ (800756c <TIM_OC3_SetConfig+0xf8>)
 80074ea:	4013      	ands	r3, r2
 80074ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a1c      	ldr	r2, [pc, #112]	@ (8007564 <TIM_OC3_SetConfig+0xf0>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d00b      	beq.n	800750e <TIM_OC3_SetConfig+0x9a>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007570 <TIM_OC3_SetConfig+0xfc>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d007      	beq.n	800750e <TIM_OC3_SetConfig+0x9a>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a1c      	ldr	r2, [pc, #112]	@ (8007574 <TIM_OC3_SetConfig+0x100>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d003      	beq.n	800750e <TIM_OC3_SetConfig+0x9a>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a1b      	ldr	r2, [pc, #108]	@ (8007578 <TIM_OC3_SetConfig+0x104>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d113      	bne.n	8007536 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	4a1a      	ldr	r2, [pc, #104]	@ (800757c <TIM_OC3_SetConfig+0x108>)
 8007512:	4013      	ands	r3, r2
 8007514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	4a19      	ldr	r2, [pc, #100]	@ (8007580 <TIM_OC3_SetConfig+0x10c>)
 800751a:	4013      	ands	r3, r2
 800751c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	4313      	orrs	r3, r2
 8007528:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	011b      	lsls	r3, r3, #4
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	4313      	orrs	r3, r2
 8007534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	621a      	str	r2, [r3, #32]
}
 8007550:	46c0      	nop			@ (mov r8, r8)
 8007552:	46bd      	mov	sp, r7
 8007554:	b006      	add	sp, #24
 8007556:	bd80      	pop	{r7, pc}
 8007558:	fffffeff 	.word	0xfffffeff
 800755c:	fffeff8f 	.word	0xfffeff8f
 8007560:	fffffdff 	.word	0xfffffdff
 8007564:	40012c00 	.word	0x40012c00
 8007568:	fffff7ff 	.word	0xfffff7ff
 800756c:	fffffbff 	.word	0xfffffbff
 8007570:	40014000 	.word	0x40014000
 8007574:	40014400 	.word	0x40014400
 8007578:	40014800 	.word	0x40014800
 800757c:	ffffefff 	.word	0xffffefff
 8007580:	ffffdfff 	.word	0xffffdfff

08007584 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a1b      	ldr	r3, [r3, #32]
 8007598:	4a26      	ldr	r2, [pc, #152]	@ (8007634 <TIM_OC4_SetConfig+0xb0>)
 800759a:	401a      	ands	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	4a22      	ldr	r2, [pc, #136]	@ (8007638 <TIM_OC4_SetConfig+0xb4>)
 80075b0:	4013      	ands	r3, r2
 80075b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4a21      	ldr	r2, [pc, #132]	@ (800763c <TIM_OC4_SetConfig+0xb8>)
 80075b8:	4013      	ands	r3, r2
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	021b      	lsls	r3, r3, #8
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	4a1d      	ldr	r2, [pc, #116]	@ (8007640 <TIM_OC4_SetConfig+0xbc>)
 80075cc:	4013      	ands	r3, r2
 80075ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	031b      	lsls	r3, r3, #12
 80075d6:	693a      	ldr	r2, [r7, #16]
 80075d8:	4313      	orrs	r3, r2
 80075da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a19      	ldr	r2, [pc, #100]	@ (8007644 <TIM_OC4_SetConfig+0xc0>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d00b      	beq.n	80075fc <TIM_OC4_SetConfig+0x78>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a18      	ldr	r2, [pc, #96]	@ (8007648 <TIM_OC4_SetConfig+0xc4>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d007      	beq.n	80075fc <TIM_OC4_SetConfig+0x78>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a17      	ldr	r2, [pc, #92]	@ (800764c <TIM_OC4_SetConfig+0xc8>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d003      	beq.n	80075fc <TIM_OC4_SetConfig+0x78>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a16      	ldr	r2, [pc, #88]	@ (8007650 <TIM_OC4_SetConfig+0xcc>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d109      	bne.n	8007610 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	4a15      	ldr	r2, [pc, #84]	@ (8007654 <TIM_OC4_SetConfig+0xd0>)
 8007600:	4013      	ands	r3, r2
 8007602:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	695b      	ldr	r3, [r3, #20]
 8007608:	019b      	lsls	r3, r3, #6
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	4313      	orrs	r3, r2
 800760e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	685a      	ldr	r2, [r3, #4]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	621a      	str	r2, [r3, #32]
}
 800762a:	46c0      	nop			@ (mov r8, r8)
 800762c:	46bd      	mov	sp, r7
 800762e:	b006      	add	sp, #24
 8007630:	bd80      	pop	{r7, pc}
 8007632:	46c0      	nop			@ (mov r8, r8)
 8007634:	ffffefff 	.word	0xffffefff
 8007638:	feff8fff 	.word	0xfeff8fff
 800763c:	fffffcff 	.word	0xfffffcff
 8007640:	ffffdfff 	.word	0xffffdfff
 8007644:	40012c00 	.word	0x40012c00
 8007648:	40014000 	.word	0x40014000
 800764c:	40014400 	.word	0x40014400
 8007650:	40014800 	.word	0x40014800
 8007654:	ffffbfff 	.word	0xffffbfff

08007658 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	4a23      	ldr	r2, [pc, #140]	@ (80076fc <TIM_OC5_SetConfig+0xa4>)
 800766e:	401a      	ands	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800767e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4a1f      	ldr	r2, [pc, #124]	@ (8007700 <TIM_OC5_SetConfig+0xa8>)
 8007684:	4013      	ands	r3, r2
 8007686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	4313      	orrs	r3, r2
 8007690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	4a1b      	ldr	r2, [pc, #108]	@ (8007704 <TIM_OC5_SetConfig+0xac>)
 8007696:	4013      	ands	r3, r2
 8007698:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	041b      	lsls	r3, r3, #16
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a17      	ldr	r2, [pc, #92]	@ (8007708 <TIM_OC5_SetConfig+0xb0>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d00b      	beq.n	80076c6 <TIM_OC5_SetConfig+0x6e>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a16      	ldr	r2, [pc, #88]	@ (800770c <TIM_OC5_SetConfig+0xb4>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d007      	beq.n	80076c6 <TIM_OC5_SetConfig+0x6e>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a15      	ldr	r2, [pc, #84]	@ (8007710 <TIM_OC5_SetConfig+0xb8>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d003      	beq.n	80076c6 <TIM_OC5_SetConfig+0x6e>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a14      	ldr	r2, [pc, #80]	@ (8007714 <TIM_OC5_SetConfig+0xbc>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d109      	bne.n	80076da <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	4a0c      	ldr	r2, [pc, #48]	@ (80076fc <TIM_OC5_SetConfig+0xa4>)
 80076ca:	4013      	ands	r3, r2
 80076cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	021b      	lsls	r3, r3, #8
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	621a      	str	r2, [r3, #32]
}
 80076f4:	46c0      	nop			@ (mov r8, r8)
 80076f6:	46bd      	mov	sp, r7
 80076f8:	b006      	add	sp, #24
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	fffeffff 	.word	0xfffeffff
 8007700:	fffeff8f 	.word	0xfffeff8f
 8007704:	fffdffff 	.word	0xfffdffff
 8007708:	40012c00 	.word	0x40012c00
 800770c:	40014000 	.word	0x40014000
 8007710:	40014400 	.word	0x40014400
 8007714:	40014800 	.word	0x40014800

08007718 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a1b      	ldr	r3, [r3, #32]
 800772c:	4a24      	ldr	r2, [pc, #144]	@ (80077c0 <TIM_OC6_SetConfig+0xa8>)
 800772e:	401a      	ands	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800773e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	4a20      	ldr	r2, [pc, #128]	@ (80077c4 <TIM_OC6_SetConfig+0xac>)
 8007744:	4013      	ands	r3, r2
 8007746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	021b      	lsls	r3, r3, #8
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	4313      	orrs	r3, r2
 8007752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	4a1c      	ldr	r2, [pc, #112]	@ (80077c8 <TIM_OC6_SetConfig+0xb0>)
 8007758:	4013      	ands	r3, r2
 800775a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	051b      	lsls	r3, r3, #20
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	4313      	orrs	r3, r2
 8007766:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a18      	ldr	r2, [pc, #96]	@ (80077cc <TIM_OC6_SetConfig+0xb4>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d00b      	beq.n	8007788 <TIM_OC6_SetConfig+0x70>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a17      	ldr	r2, [pc, #92]	@ (80077d0 <TIM_OC6_SetConfig+0xb8>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d007      	beq.n	8007788 <TIM_OC6_SetConfig+0x70>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a16      	ldr	r2, [pc, #88]	@ (80077d4 <TIM_OC6_SetConfig+0xbc>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d003      	beq.n	8007788 <TIM_OC6_SetConfig+0x70>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a15      	ldr	r2, [pc, #84]	@ (80077d8 <TIM_OC6_SetConfig+0xc0>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d109      	bne.n	800779c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	4a14      	ldr	r2, [pc, #80]	@ (80077dc <TIM_OC6_SetConfig+0xc4>)
 800778c:	4013      	ands	r3, r2
 800778e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	695b      	ldr	r3, [r3, #20]
 8007794:	029b      	lsls	r3, r3, #10
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	4313      	orrs	r3, r2
 800779a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	621a      	str	r2, [r3, #32]
}
 80077b6:	46c0      	nop			@ (mov r8, r8)
 80077b8:	46bd      	mov	sp, r7
 80077ba:	b006      	add	sp, #24
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	46c0      	nop			@ (mov r8, r8)
 80077c0:	ffefffff 	.word	0xffefffff
 80077c4:	feff8fff 	.word	0xfeff8fff
 80077c8:	ffdfffff 	.word	0xffdfffff
 80077cc:	40012c00 	.word	0x40012c00
 80077d0:	40014000 	.word	0x40014000
 80077d4:	40014400 	.word	0x40014400
 80077d8:	40014800 	.word	0x40014800
 80077dc:	fffbffff 	.word	0xfffbffff

080077e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	221f      	movs	r2, #31
 80077f0:	4013      	ands	r3, r2
 80077f2:	2201      	movs	r2, #1
 80077f4:	409a      	lsls	r2, r3
 80077f6:	0013      	movs	r3, r2
 80077f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	43d2      	mvns	r2, r2
 8007802:	401a      	ands	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6a1a      	ldr	r2, [r3, #32]
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	211f      	movs	r1, #31
 8007810:	400b      	ands	r3, r1
 8007812:	6879      	ldr	r1, [r7, #4]
 8007814:	4099      	lsls	r1, r3
 8007816:	000b      	movs	r3, r1
 8007818:	431a      	orrs	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	621a      	str	r2, [r3, #32]
}
 800781e:	46c0      	nop			@ (mov r8, r8)
 8007820:	46bd      	mov	sp, r7
 8007822:	b006      	add	sp, #24
 8007824:	bd80      	pop	{r7, pc}
	...

08007828 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007832:	2300      	movs	r3, #0
 8007834:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	223c      	movs	r2, #60	@ 0x3c
 800783a:	5c9b      	ldrb	r3, [r3, r2]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d101      	bne.n	8007844 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007840:	2302      	movs	r3, #2
 8007842:	e06f      	b.n	8007924 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	223c      	movs	r2, #60	@ 0x3c
 8007848:	2101      	movs	r1, #1
 800784a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	22ff      	movs	r2, #255	@ 0xff
 8007850:	4393      	bics	r3, r2
 8007852:	001a      	movs	r2, r3
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	4313      	orrs	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4a33      	ldr	r2, [pc, #204]	@ (800792c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8007860:	401a      	ands	r2, r3
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	4313      	orrs	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	4a30      	ldr	r2, [pc, #192]	@ (8007930 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800786e:	401a      	ands	r2, r3
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	4313      	orrs	r3, r2
 8007876:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4a2e      	ldr	r2, [pc, #184]	@ (8007934 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800787c:	401a      	ands	r2, r3
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4313      	orrs	r3, r2
 8007884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	4a2b      	ldr	r2, [pc, #172]	@ (8007938 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800788a:	401a      	ands	r2, r3
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	4313      	orrs	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4a29      	ldr	r2, [pc, #164]	@ (800793c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8007898:	401a      	ands	r2, r3
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	4313      	orrs	r3, r2
 80078a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	4a26      	ldr	r2, [pc, #152]	@ (8007940 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80078a6:	401a      	ands	r2, r3
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ac:	4313      	orrs	r3, r2
 80078ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	4a24      	ldr	r2, [pc, #144]	@ (8007944 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80078b4:	401a      	ands	r2, r3
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	041b      	lsls	r3, r3, #16
 80078bc:	4313      	orrs	r3, r2
 80078be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	4a21      	ldr	r2, [pc, #132]	@ (8007948 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80078c4:	401a      	ands	r2, r3
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	69db      	ldr	r3, [r3, #28]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a1e      	ldr	r2, [pc, #120]	@ (800794c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d11c      	bne.n	8007912 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	4a1d      	ldr	r2, [pc, #116]	@ (8007950 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80078dc:	401a      	ands	r2, r3
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078e2:	051b      	lsls	r3, r3, #20
 80078e4:	4313      	orrs	r3, r2
 80078e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4a1a      	ldr	r2, [pc, #104]	@ (8007954 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80078ec:	401a      	ands	r2, r3
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	4a17      	ldr	r2, [pc, #92]	@ (8007958 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80078fa:	401a      	ands	r2, r3
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007900:	4313      	orrs	r3, r2
 8007902:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	4a15      	ldr	r2, [pc, #84]	@ (800795c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8007908:	401a      	ands	r2, r3
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	223c      	movs	r2, #60	@ 0x3c
 800791e:	2100      	movs	r1, #0
 8007920:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	0018      	movs	r0, r3
 8007926:	46bd      	mov	sp, r7
 8007928:	b004      	add	sp, #16
 800792a:	bd80      	pop	{r7, pc}
 800792c:	fffffcff 	.word	0xfffffcff
 8007930:	fffffbff 	.word	0xfffffbff
 8007934:	fffff7ff 	.word	0xfffff7ff
 8007938:	ffffefff 	.word	0xffffefff
 800793c:	ffffdfff 	.word	0xffffdfff
 8007940:	ffffbfff 	.word	0xffffbfff
 8007944:	fff0ffff 	.word	0xfff0ffff
 8007948:	efffffff 	.word	0xefffffff
 800794c:	40012c00 	.word	0x40012c00
 8007950:	ff0fffff 	.word	0xff0fffff
 8007954:	feffffff 	.word	0xfeffffff
 8007958:	fdffffff 	.word	0xfdffffff
 800795c:	dfffffff 	.word	0xdfffffff

08007960 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e046      	b.n	8007a00 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2288      	movs	r2, #136	@ 0x88
 8007976:	589b      	ldr	r3, [r3, r2]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d107      	bne.n	800798c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2284      	movs	r2, #132	@ 0x84
 8007980:	2100      	movs	r1, #0
 8007982:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	0018      	movs	r0, r3
 8007988:	f7fc f82a 	bl	80039e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2288      	movs	r2, #136	@ 0x88
 8007990:	2124      	movs	r1, #36	@ 0x24
 8007992:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2101      	movs	r1, #1
 80079a0:	438a      	bics	r2, r1
 80079a2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d003      	beq.n	80079b4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	0018      	movs	r0, r3
 80079b0:	f000 fc68 	bl	8008284 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	0018      	movs	r0, r3
 80079b8:	f000 f90e 	bl	8007bd8 <UART_SetConfig>
 80079bc:	0003      	movs	r3, r0
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d101      	bne.n	80079c6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e01c      	b.n	8007a00 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	685a      	ldr	r2, [r3, #4]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	490d      	ldr	r1, [pc, #52]	@ (8007a08 <HAL_UART_Init+0xa8>)
 80079d2:	400a      	ands	r2, r1
 80079d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	689a      	ldr	r2, [r3, #8]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	212a      	movs	r1, #42	@ 0x2a
 80079e2:	438a      	bics	r2, r1
 80079e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2101      	movs	r1, #1
 80079f2:	430a      	orrs	r2, r1
 80079f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	0018      	movs	r0, r3
 80079fa:	f000 fcf7 	bl	80083ec <UART_CheckIdleState>
 80079fe:	0003      	movs	r3, r0
}
 8007a00:	0018      	movs	r0, r3
 8007a02:	46bd      	mov	sp, r7
 8007a04:	b002      	add	sp, #8
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	ffffb7ff 	.word	0xffffb7ff

08007a0c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b08a      	sub	sp, #40	@ 0x28
 8007a10:	af02      	add	r7, sp, #8
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	603b      	str	r3, [r7, #0]
 8007a18:	1dbb      	adds	r3, r7, #6
 8007a1a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	228c      	movs	r2, #140	@ 0x8c
 8007a20:	589b      	ldr	r3, [r3, r2]
 8007a22:	2b20      	cmp	r3, #32
 8007a24:	d000      	beq.n	8007a28 <HAL_UART_Receive+0x1c>
 8007a26:	e0d0      	b.n	8007bca <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d003      	beq.n	8007a36 <HAL_UART_Receive+0x2a>
 8007a2e:	1dbb      	adds	r3, r7, #6
 8007a30:	881b      	ldrh	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e0c8      	b.n	8007bcc <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	689a      	ldr	r2, [r3, #8]
 8007a3e:	2380      	movs	r3, #128	@ 0x80
 8007a40:	015b      	lsls	r3, r3, #5
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d109      	bne.n	8007a5a <HAL_UART_Receive+0x4e>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d105      	bne.n	8007a5a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2201      	movs	r2, #1
 8007a52:	4013      	ands	r3, r2
 8007a54:	d001      	beq.n	8007a5a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e0b8      	b.n	8007bcc <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2290      	movs	r2, #144	@ 0x90
 8007a5e:	2100      	movs	r1, #0
 8007a60:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	228c      	movs	r2, #140	@ 0x8c
 8007a66:	2122      	movs	r1, #34	@ 0x22
 8007a68:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a70:	f7fc f96c 	bl	8003d4c <HAL_GetTick>
 8007a74:	0003      	movs	r3, r0
 8007a76:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	1dba      	adds	r2, r7, #6
 8007a7c:	215c      	movs	r1, #92	@ 0x5c
 8007a7e:	8812      	ldrh	r2, [r2, #0]
 8007a80:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	1dba      	adds	r2, r7, #6
 8007a86:	215e      	movs	r1, #94	@ 0x5e
 8007a88:	8812      	ldrh	r2, [r2, #0]
 8007a8a:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	689a      	ldr	r2, [r3, #8]
 8007a90:	2380      	movs	r3, #128	@ 0x80
 8007a92:	015b      	lsls	r3, r3, #5
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d10d      	bne.n	8007ab4 <HAL_UART_Receive+0xa8>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d104      	bne.n	8007aaa <HAL_UART_Receive+0x9e>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2260      	movs	r2, #96	@ 0x60
 8007aa4:	494b      	ldr	r1, [pc, #300]	@ (8007bd4 <HAL_UART_Receive+0x1c8>)
 8007aa6:	5299      	strh	r1, [r3, r2]
 8007aa8:	e02e      	b.n	8007b08 <HAL_UART_Receive+0xfc>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2260      	movs	r2, #96	@ 0x60
 8007aae:	21ff      	movs	r1, #255	@ 0xff
 8007ab0:	5299      	strh	r1, [r3, r2]
 8007ab2:	e029      	b.n	8007b08 <HAL_UART_Receive+0xfc>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10d      	bne.n	8007ad8 <HAL_UART_Receive+0xcc>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d104      	bne.n	8007ace <HAL_UART_Receive+0xc2>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2260      	movs	r2, #96	@ 0x60
 8007ac8:	21ff      	movs	r1, #255	@ 0xff
 8007aca:	5299      	strh	r1, [r3, r2]
 8007acc:	e01c      	b.n	8007b08 <HAL_UART_Receive+0xfc>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2260      	movs	r2, #96	@ 0x60
 8007ad2:	217f      	movs	r1, #127	@ 0x7f
 8007ad4:	5299      	strh	r1, [r3, r2]
 8007ad6:	e017      	b.n	8007b08 <HAL_UART_Receive+0xfc>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	689a      	ldr	r2, [r3, #8]
 8007adc:	2380      	movs	r3, #128	@ 0x80
 8007ade:	055b      	lsls	r3, r3, #21
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d10d      	bne.n	8007b00 <HAL_UART_Receive+0xf4>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d104      	bne.n	8007af6 <HAL_UART_Receive+0xea>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2260      	movs	r2, #96	@ 0x60
 8007af0:	217f      	movs	r1, #127	@ 0x7f
 8007af2:	5299      	strh	r1, [r3, r2]
 8007af4:	e008      	b.n	8007b08 <HAL_UART_Receive+0xfc>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2260      	movs	r2, #96	@ 0x60
 8007afa:	213f      	movs	r1, #63	@ 0x3f
 8007afc:	5299      	strh	r1, [r3, r2]
 8007afe:	e003      	b.n	8007b08 <HAL_UART_Receive+0xfc>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2260      	movs	r2, #96	@ 0x60
 8007b04:	2100      	movs	r1, #0
 8007b06:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8007b08:	2312      	movs	r3, #18
 8007b0a:	18fb      	adds	r3, r7, r3
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	2160      	movs	r1, #96	@ 0x60
 8007b10:	5a52      	ldrh	r2, [r2, r1]
 8007b12:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	689a      	ldr	r2, [r3, #8]
 8007b18:	2380      	movs	r3, #128	@ 0x80
 8007b1a:	015b      	lsls	r3, r3, #5
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d108      	bne.n	8007b32 <HAL_UART_Receive+0x126>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d104      	bne.n	8007b32 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	61bb      	str	r3, [r7, #24]
 8007b30:	e003      	b.n	8007b3a <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b36:	2300      	movs	r3, #0
 8007b38:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007b3a:	e03a      	b.n	8007bb2 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	0013      	movs	r3, r2
 8007b46:	2200      	movs	r2, #0
 8007b48:	2120      	movs	r1, #32
 8007b4a:	f000 fcf9 	bl	8008540 <UART_WaitOnFlagUntilTimeout>
 8007b4e:	1e03      	subs	r3, r0, #0
 8007b50:	d005      	beq.n	8007b5e <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	228c      	movs	r2, #140	@ 0x8c
 8007b56:	2120      	movs	r1, #32
 8007b58:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e036      	b.n	8007bcc <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10e      	bne.n	8007b82 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	2212      	movs	r2, #18
 8007b6e:	18ba      	adds	r2, r7, r2
 8007b70:	8812      	ldrh	r2, [r2, #0]
 8007b72:	4013      	ands	r3, r2
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	3302      	adds	r3, #2
 8007b7e:	61bb      	str	r3, [r7, #24]
 8007b80:	e00e      	b.n	8007ba0 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2212      	movs	r2, #18
 8007b8c:	18ba      	adds	r2, r7, r2
 8007b8e:	8812      	ldrh	r2, [r2, #0]
 8007b90:	b2d2      	uxtb	r2, r2
 8007b92:	4013      	ands	r3, r2
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	225e      	movs	r2, #94	@ 0x5e
 8007ba4:	5a9b      	ldrh	r3, [r3, r2]
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	b299      	uxth	r1, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	225e      	movs	r2, #94	@ 0x5e
 8007bb0:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	225e      	movs	r2, #94	@ 0x5e
 8007bb6:	5a9b      	ldrh	r3, [r3, r2]
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1be      	bne.n	8007b3c <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	228c      	movs	r2, #140	@ 0x8c
 8007bc2:	2120      	movs	r1, #32
 8007bc4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	e000      	b.n	8007bcc <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8007bca:	2302      	movs	r3, #2
  }
}
 8007bcc:	0018      	movs	r0, r3
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	b008      	add	sp, #32
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	000001ff 	.word	0x000001ff

08007bd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bd8:	b5b0      	push	{r4, r5, r7, lr}
 8007bda:	b090      	sub	sp, #64	@ 0x40
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007be0:	231a      	movs	r3, #26
 8007be2:	2220      	movs	r2, #32
 8007be4:	189b      	adds	r3, r3, r2
 8007be6:	19db      	adds	r3, r3, r7
 8007be8:	2200      	movs	r2, #0
 8007bea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bee:	689a      	ldr	r2, [r3, #8]
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	431a      	orrs	r2, r3
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	431a      	orrs	r2, r3
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfe:	69db      	ldr	r3, [r3, #28]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4ac1      	ldr	r2, [pc, #772]	@ (8007f10 <UART_SetConfig+0x338>)
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	0019      	movs	r1, r3
 8007c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c16:	430b      	orrs	r3, r1
 8007c18:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	4abc      	ldr	r2, [pc, #752]	@ (8007f14 <UART_SetConfig+0x33c>)
 8007c22:	4013      	ands	r3, r2
 8007c24:	0018      	movs	r0, r3
 8007c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c28:	68d9      	ldr	r1, [r3, #12]
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	0003      	movs	r3, r0
 8007c30:	430b      	orrs	r3, r1
 8007c32:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4ab6      	ldr	r2, [pc, #728]	@ (8007f18 <UART_SetConfig+0x340>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d009      	beq.n	8007c58 <UART_SetConfig+0x80>
 8007c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4ab4      	ldr	r2, [pc, #720]	@ (8007f1c <UART_SetConfig+0x344>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d004      	beq.n	8007c58 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007c54:	4313      	orrs	r3, r2
 8007c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	4ab0      	ldr	r2, [pc, #704]	@ (8007f20 <UART_SetConfig+0x348>)
 8007c60:	4013      	ands	r3, r2
 8007c62:	0019      	movs	r1, r3
 8007c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c6a:	430b      	orrs	r3, r1
 8007c6c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c74:	220f      	movs	r2, #15
 8007c76:	4393      	bics	r3, r2
 8007c78:	0018      	movs	r0, r3
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	0003      	movs	r3, r0
 8007c84:	430b      	orrs	r3, r1
 8007c86:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4aa5      	ldr	r2, [pc, #660]	@ (8007f24 <UART_SetConfig+0x34c>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d131      	bne.n	8007cf6 <UART_SetConfig+0x11e>
 8007c92:	4ba5      	ldr	r3, [pc, #660]	@ (8007f28 <UART_SetConfig+0x350>)
 8007c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c96:	2203      	movs	r2, #3
 8007c98:	4013      	ands	r3, r2
 8007c9a:	2b03      	cmp	r3, #3
 8007c9c:	d01d      	beq.n	8007cda <UART_SetConfig+0x102>
 8007c9e:	d823      	bhi.n	8007ce8 <UART_SetConfig+0x110>
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d00c      	beq.n	8007cbe <UART_SetConfig+0xe6>
 8007ca4:	d820      	bhi.n	8007ce8 <UART_SetConfig+0x110>
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d002      	beq.n	8007cb0 <UART_SetConfig+0xd8>
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d00e      	beq.n	8007ccc <UART_SetConfig+0xf4>
 8007cae:	e01b      	b.n	8007ce8 <UART_SetConfig+0x110>
 8007cb0:	231b      	movs	r3, #27
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	189b      	adds	r3, r3, r2
 8007cb6:	19db      	adds	r3, r3, r7
 8007cb8:	2200      	movs	r2, #0
 8007cba:	701a      	strb	r2, [r3, #0]
 8007cbc:	e154      	b.n	8007f68 <UART_SetConfig+0x390>
 8007cbe:	231b      	movs	r3, #27
 8007cc0:	2220      	movs	r2, #32
 8007cc2:	189b      	adds	r3, r3, r2
 8007cc4:	19db      	adds	r3, r3, r7
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	701a      	strb	r2, [r3, #0]
 8007cca:	e14d      	b.n	8007f68 <UART_SetConfig+0x390>
 8007ccc:	231b      	movs	r3, #27
 8007cce:	2220      	movs	r2, #32
 8007cd0:	189b      	adds	r3, r3, r2
 8007cd2:	19db      	adds	r3, r3, r7
 8007cd4:	2204      	movs	r2, #4
 8007cd6:	701a      	strb	r2, [r3, #0]
 8007cd8:	e146      	b.n	8007f68 <UART_SetConfig+0x390>
 8007cda:	231b      	movs	r3, #27
 8007cdc:	2220      	movs	r2, #32
 8007cde:	189b      	adds	r3, r3, r2
 8007ce0:	19db      	adds	r3, r3, r7
 8007ce2:	2208      	movs	r2, #8
 8007ce4:	701a      	strb	r2, [r3, #0]
 8007ce6:	e13f      	b.n	8007f68 <UART_SetConfig+0x390>
 8007ce8:	231b      	movs	r3, #27
 8007cea:	2220      	movs	r2, #32
 8007cec:	189b      	adds	r3, r3, r2
 8007cee:	19db      	adds	r3, r3, r7
 8007cf0:	2210      	movs	r2, #16
 8007cf2:	701a      	strb	r2, [r3, #0]
 8007cf4:	e138      	b.n	8007f68 <UART_SetConfig+0x390>
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a8c      	ldr	r2, [pc, #560]	@ (8007f2c <UART_SetConfig+0x354>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d131      	bne.n	8007d64 <UART_SetConfig+0x18c>
 8007d00:	4b89      	ldr	r3, [pc, #548]	@ (8007f28 <UART_SetConfig+0x350>)
 8007d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d04:	220c      	movs	r2, #12
 8007d06:	4013      	ands	r3, r2
 8007d08:	2b0c      	cmp	r3, #12
 8007d0a:	d01d      	beq.n	8007d48 <UART_SetConfig+0x170>
 8007d0c:	d823      	bhi.n	8007d56 <UART_SetConfig+0x17e>
 8007d0e:	2b08      	cmp	r3, #8
 8007d10:	d00c      	beq.n	8007d2c <UART_SetConfig+0x154>
 8007d12:	d820      	bhi.n	8007d56 <UART_SetConfig+0x17e>
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d002      	beq.n	8007d1e <UART_SetConfig+0x146>
 8007d18:	2b04      	cmp	r3, #4
 8007d1a:	d00e      	beq.n	8007d3a <UART_SetConfig+0x162>
 8007d1c:	e01b      	b.n	8007d56 <UART_SetConfig+0x17e>
 8007d1e:	231b      	movs	r3, #27
 8007d20:	2220      	movs	r2, #32
 8007d22:	189b      	adds	r3, r3, r2
 8007d24:	19db      	adds	r3, r3, r7
 8007d26:	2200      	movs	r2, #0
 8007d28:	701a      	strb	r2, [r3, #0]
 8007d2a:	e11d      	b.n	8007f68 <UART_SetConfig+0x390>
 8007d2c:	231b      	movs	r3, #27
 8007d2e:	2220      	movs	r2, #32
 8007d30:	189b      	adds	r3, r3, r2
 8007d32:	19db      	adds	r3, r3, r7
 8007d34:	2202      	movs	r2, #2
 8007d36:	701a      	strb	r2, [r3, #0]
 8007d38:	e116      	b.n	8007f68 <UART_SetConfig+0x390>
 8007d3a:	231b      	movs	r3, #27
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	189b      	adds	r3, r3, r2
 8007d40:	19db      	adds	r3, r3, r7
 8007d42:	2204      	movs	r2, #4
 8007d44:	701a      	strb	r2, [r3, #0]
 8007d46:	e10f      	b.n	8007f68 <UART_SetConfig+0x390>
 8007d48:	231b      	movs	r3, #27
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	189b      	adds	r3, r3, r2
 8007d4e:	19db      	adds	r3, r3, r7
 8007d50:	2208      	movs	r2, #8
 8007d52:	701a      	strb	r2, [r3, #0]
 8007d54:	e108      	b.n	8007f68 <UART_SetConfig+0x390>
 8007d56:	231b      	movs	r3, #27
 8007d58:	2220      	movs	r2, #32
 8007d5a:	189b      	adds	r3, r3, r2
 8007d5c:	19db      	adds	r3, r3, r7
 8007d5e:	2210      	movs	r2, #16
 8007d60:	701a      	strb	r2, [r3, #0]
 8007d62:	e101      	b.n	8007f68 <UART_SetConfig+0x390>
 8007d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a71      	ldr	r2, [pc, #452]	@ (8007f30 <UART_SetConfig+0x358>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d131      	bne.n	8007dd2 <UART_SetConfig+0x1fa>
 8007d6e:	4b6e      	ldr	r3, [pc, #440]	@ (8007f28 <UART_SetConfig+0x350>)
 8007d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d72:	2230      	movs	r2, #48	@ 0x30
 8007d74:	4013      	ands	r3, r2
 8007d76:	2b30      	cmp	r3, #48	@ 0x30
 8007d78:	d01d      	beq.n	8007db6 <UART_SetConfig+0x1de>
 8007d7a:	d823      	bhi.n	8007dc4 <UART_SetConfig+0x1ec>
 8007d7c:	2b20      	cmp	r3, #32
 8007d7e:	d00c      	beq.n	8007d9a <UART_SetConfig+0x1c2>
 8007d80:	d820      	bhi.n	8007dc4 <UART_SetConfig+0x1ec>
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d002      	beq.n	8007d8c <UART_SetConfig+0x1b4>
 8007d86:	2b10      	cmp	r3, #16
 8007d88:	d00e      	beq.n	8007da8 <UART_SetConfig+0x1d0>
 8007d8a:	e01b      	b.n	8007dc4 <UART_SetConfig+0x1ec>
 8007d8c:	231b      	movs	r3, #27
 8007d8e:	2220      	movs	r2, #32
 8007d90:	189b      	adds	r3, r3, r2
 8007d92:	19db      	adds	r3, r3, r7
 8007d94:	2200      	movs	r2, #0
 8007d96:	701a      	strb	r2, [r3, #0]
 8007d98:	e0e6      	b.n	8007f68 <UART_SetConfig+0x390>
 8007d9a:	231b      	movs	r3, #27
 8007d9c:	2220      	movs	r2, #32
 8007d9e:	189b      	adds	r3, r3, r2
 8007da0:	19db      	adds	r3, r3, r7
 8007da2:	2202      	movs	r2, #2
 8007da4:	701a      	strb	r2, [r3, #0]
 8007da6:	e0df      	b.n	8007f68 <UART_SetConfig+0x390>
 8007da8:	231b      	movs	r3, #27
 8007daa:	2220      	movs	r2, #32
 8007dac:	189b      	adds	r3, r3, r2
 8007dae:	19db      	adds	r3, r3, r7
 8007db0:	2204      	movs	r2, #4
 8007db2:	701a      	strb	r2, [r3, #0]
 8007db4:	e0d8      	b.n	8007f68 <UART_SetConfig+0x390>
 8007db6:	231b      	movs	r3, #27
 8007db8:	2220      	movs	r2, #32
 8007dba:	189b      	adds	r3, r3, r2
 8007dbc:	19db      	adds	r3, r3, r7
 8007dbe:	2208      	movs	r2, #8
 8007dc0:	701a      	strb	r2, [r3, #0]
 8007dc2:	e0d1      	b.n	8007f68 <UART_SetConfig+0x390>
 8007dc4:	231b      	movs	r3, #27
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	189b      	adds	r3, r3, r2
 8007dca:	19db      	adds	r3, r3, r7
 8007dcc:	2210      	movs	r2, #16
 8007dce:	701a      	strb	r2, [r3, #0]
 8007dd0:	e0ca      	b.n	8007f68 <UART_SetConfig+0x390>
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a57      	ldr	r2, [pc, #348]	@ (8007f34 <UART_SetConfig+0x35c>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d106      	bne.n	8007dea <UART_SetConfig+0x212>
 8007ddc:	231b      	movs	r3, #27
 8007dde:	2220      	movs	r2, #32
 8007de0:	189b      	adds	r3, r3, r2
 8007de2:	19db      	adds	r3, r3, r7
 8007de4:	2200      	movs	r2, #0
 8007de6:	701a      	strb	r2, [r3, #0]
 8007de8:	e0be      	b.n	8007f68 <UART_SetConfig+0x390>
 8007dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a52      	ldr	r2, [pc, #328]	@ (8007f38 <UART_SetConfig+0x360>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d106      	bne.n	8007e02 <UART_SetConfig+0x22a>
 8007df4:	231b      	movs	r3, #27
 8007df6:	2220      	movs	r2, #32
 8007df8:	189b      	adds	r3, r3, r2
 8007dfa:	19db      	adds	r3, r3, r7
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	701a      	strb	r2, [r3, #0]
 8007e00:	e0b2      	b.n	8007f68 <UART_SetConfig+0x390>
 8007e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a4d      	ldr	r2, [pc, #308]	@ (8007f3c <UART_SetConfig+0x364>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d106      	bne.n	8007e1a <UART_SetConfig+0x242>
 8007e0c:	231b      	movs	r3, #27
 8007e0e:	2220      	movs	r2, #32
 8007e10:	189b      	adds	r3, r3, r2
 8007e12:	19db      	adds	r3, r3, r7
 8007e14:	2200      	movs	r2, #0
 8007e16:	701a      	strb	r2, [r3, #0]
 8007e18:	e0a6      	b.n	8007f68 <UART_SetConfig+0x390>
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a3e      	ldr	r2, [pc, #248]	@ (8007f18 <UART_SetConfig+0x340>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d13e      	bne.n	8007ea2 <UART_SetConfig+0x2ca>
 8007e24:	4b40      	ldr	r3, [pc, #256]	@ (8007f28 <UART_SetConfig+0x350>)
 8007e26:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e28:	23c0      	movs	r3, #192	@ 0xc0
 8007e2a:	011b      	lsls	r3, r3, #4
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	22c0      	movs	r2, #192	@ 0xc0
 8007e30:	0112      	lsls	r2, r2, #4
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d027      	beq.n	8007e86 <UART_SetConfig+0x2ae>
 8007e36:	22c0      	movs	r2, #192	@ 0xc0
 8007e38:	0112      	lsls	r2, r2, #4
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d82a      	bhi.n	8007e94 <UART_SetConfig+0x2bc>
 8007e3e:	2280      	movs	r2, #128	@ 0x80
 8007e40:	0112      	lsls	r2, r2, #4
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d011      	beq.n	8007e6a <UART_SetConfig+0x292>
 8007e46:	2280      	movs	r2, #128	@ 0x80
 8007e48:	0112      	lsls	r2, r2, #4
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d822      	bhi.n	8007e94 <UART_SetConfig+0x2bc>
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d004      	beq.n	8007e5c <UART_SetConfig+0x284>
 8007e52:	2280      	movs	r2, #128	@ 0x80
 8007e54:	00d2      	lsls	r2, r2, #3
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d00e      	beq.n	8007e78 <UART_SetConfig+0x2a0>
 8007e5a:	e01b      	b.n	8007e94 <UART_SetConfig+0x2bc>
 8007e5c:	231b      	movs	r3, #27
 8007e5e:	2220      	movs	r2, #32
 8007e60:	189b      	adds	r3, r3, r2
 8007e62:	19db      	adds	r3, r3, r7
 8007e64:	2200      	movs	r2, #0
 8007e66:	701a      	strb	r2, [r3, #0]
 8007e68:	e07e      	b.n	8007f68 <UART_SetConfig+0x390>
 8007e6a:	231b      	movs	r3, #27
 8007e6c:	2220      	movs	r2, #32
 8007e6e:	189b      	adds	r3, r3, r2
 8007e70:	19db      	adds	r3, r3, r7
 8007e72:	2202      	movs	r2, #2
 8007e74:	701a      	strb	r2, [r3, #0]
 8007e76:	e077      	b.n	8007f68 <UART_SetConfig+0x390>
 8007e78:	231b      	movs	r3, #27
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	189b      	adds	r3, r3, r2
 8007e7e:	19db      	adds	r3, r3, r7
 8007e80:	2204      	movs	r2, #4
 8007e82:	701a      	strb	r2, [r3, #0]
 8007e84:	e070      	b.n	8007f68 <UART_SetConfig+0x390>
 8007e86:	231b      	movs	r3, #27
 8007e88:	2220      	movs	r2, #32
 8007e8a:	189b      	adds	r3, r3, r2
 8007e8c:	19db      	adds	r3, r3, r7
 8007e8e:	2208      	movs	r2, #8
 8007e90:	701a      	strb	r2, [r3, #0]
 8007e92:	e069      	b.n	8007f68 <UART_SetConfig+0x390>
 8007e94:	231b      	movs	r3, #27
 8007e96:	2220      	movs	r2, #32
 8007e98:	189b      	adds	r3, r3, r2
 8007e9a:	19db      	adds	r3, r3, r7
 8007e9c:	2210      	movs	r2, #16
 8007e9e:	701a      	strb	r2, [r3, #0]
 8007ea0:	e062      	b.n	8007f68 <UART_SetConfig+0x390>
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a1d      	ldr	r2, [pc, #116]	@ (8007f1c <UART_SetConfig+0x344>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d157      	bne.n	8007f5c <UART_SetConfig+0x384>
 8007eac:	4b1e      	ldr	r3, [pc, #120]	@ (8007f28 <UART_SetConfig+0x350>)
 8007eae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007eb0:	23c0      	movs	r3, #192	@ 0xc0
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	22c0      	movs	r2, #192	@ 0xc0
 8007eb8:	0092      	lsls	r2, r2, #2
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d040      	beq.n	8007f40 <UART_SetConfig+0x368>
 8007ebe:	22c0      	movs	r2, #192	@ 0xc0
 8007ec0:	0092      	lsls	r2, r2, #2
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d843      	bhi.n	8007f4e <UART_SetConfig+0x376>
 8007ec6:	2280      	movs	r2, #128	@ 0x80
 8007ec8:	0092      	lsls	r2, r2, #2
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d011      	beq.n	8007ef2 <UART_SetConfig+0x31a>
 8007ece:	2280      	movs	r2, #128	@ 0x80
 8007ed0:	0092      	lsls	r2, r2, #2
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d83b      	bhi.n	8007f4e <UART_SetConfig+0x376>
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d004      	beq.n	8007ee4 <UART_SetConfig+0x30c>
 8007eda:	2280      	movs	r2, #128	@ 0x80
 8007edc:	0052      	lsls	r2, r2, #1
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d00e      	beq.n	8007f00 <UART_SetConfig+0x328>
 8007ee2:	e034      	b.n	8007f4e <UART_SetConfig+0x376>
 8007ee4:	231b      	movs	r3, #27
 8007ee6:	2220      	movs	r2, #32
 8007ee8:	189b      	adds	r3, r3, r2
 8007eea:	19db      	adds	r3, r3, r7
 8007eec:	2200      	movs	r2, #0
 8007eee:	701a      	strb	r2, [r3, #0]
 8007ef0:	e03a      	b.n	8007f68 <UART_SetConfig+0x390>
 8007ef2:	231b      	movs	r3, #27
 8007ef4:	2220      	movs	r2, #32
 8007ef6:	189b      	adds	r3, r3, r2
 8007ef8:	19db      	adds	r3, r3, r7
 8007efa:	2202      	movs	r2, #2
 8007efc:	701a      	strb	r2, [r3, #0]
 8007efe:	e033      	b.n	8007f68 <UART_SetConfig+0x390>
 8007f00:	231b      	movs	r3, #27
 8007f02:	2220      	movs	r2, #32
 8007f04:	189b      	adds	r3, r3, r2
 8007f06:	19db      	adds	r3, r3, r7
 8007f08:	2204      	movs	r2, #4
 8007f0a:	701a      	strb	r2, [r3, #0]
 8007f0c:	e02c      	b.n	8007f68 <UART_SetConfig+0x390>
 8007f0e:	46c0      	nop			@ (mov r8, r8)
 8007f10:	cfff69f3 	.word	0xcfff69f3
 8007f14:	ffffcfff 	.word	0xffffcfff
 8007f18:	40008000 	.word	0x40008000
 8007f1c:	40008400 	.word	0x40008400
 8007f20:	11fff4ff 	.word	0x11fff4ff
 8007f24:	40013800 	.word	0x40013800
 8007f28:	40021000 	.word	0x40021000
 8007f2c:	40004400 	.word	0x40004400
 8007f30:	40004800 	.word	0x40004800
 8007f34:	40004c00 	.word	0x40004c00
 8007f38:	40005000 	.word	0x40005000
 8007f3c:	40013c00 	.word	0x40013c00
 8007f40:	231b      	movs	r3, #27
 8007f42:	2220      	movs	r2, #32
 8007f44:	189b      	adds	r3, r3, r2
 8007f46:	19db      	adds	r3, r3, r7
 8007f48:	2208      	movs	r2, #8
 8007f4a:	701a      	strb	r2, [r3, #0]
 8007f4c:	e00c      	b.n	8007f68 <UART_SetConfig+0x390>
 8007f4e:	231b      	movs	r3, #27
 8007f50:	2220      	movs	r2, #32
 8007f52:	189b      	adds	r3, r3, r2
 8007f54:	19db      	adds	r3, r3, r7
 8007f56:	2210      	movs	r2, #16
 8007f58:	701a      	strb	r2, [r3, #0]
 8007f5a:	e005      	b.n	8007f68 <UART_SetConfig+0x390>
 8007f5c:	231b      	movs	r3, #27
 8007f5e:	2220      	movs	r2, #32
 8007f60:	189b      	adds	r3, r3, r2
 8007f62:	19db      	adds	r3, r3, r7
 8007f64:	2210      	movs	r2, #16
 8007f66:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4ac1      	ldr	r2, [pc, #772]	@ (8008274 <UART_SetConfig+0x69c>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d005      	beq.n	8007f7e <UART_SetConfig+0x3a6>
 8007f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4ac0      	ldr	r2, [pc, #768]	@ (8008278 <UART_SetConfig+0x6a0>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d000      	beq.n	8007f7e <UART_SetConfig+0x3a6>
 8007f7c:	e093      	b.n	80080a6 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f7e:	231b      	movs	r3, #27
 8007f80:	2220      	movs	r2, #32
 8007f82:	189b      	adds	r3, r3, r2
 8007f84:	19db      	adds	r3, r3, r7
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	2b08      	cmp	r3, #8
 8007f8a:	d015      	beq.n	8007fb8 <UART_SetConfig+0x3e0>
 8007f8c:	dc18      	bgt.n	8007fc0 <UART_SetConfig+0x3e8>
 8007f8e:	2b04      	cmp	r3, #4
 8007f90:	d00d      	beq.n	8007fae <UART_SetConfig+0x3d6>
 8007f92:	dc15      	bgt.n	8007fc0 <UART_SetConfig+0x3e8>
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <UART_SetConfig+0x3c6>
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d005      	beq.n	8007fa8 <UART_SetConfig+0x3d0>
 8007f9c:	e010      	b.n	8007fc0 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f9e:	f7fd fcf7 	bl	8005990 <HAL_RCC_GetPCLK1Freq>
 8007fa2:	0003      	movs	r3, r0
 8007fa4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fa6:	e014      	b.n	8007fd2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fa8:	4bb4      	ldr	r3, [pc, #720]	@ (800827c <UART_SetConfig+0x6a4>)
 8007faa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fac:	e011      	b.n	8007fd2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fae:	f7fd fc63 	bl	8005878 <HAL_RCC_GetSysClockFreq>
 8007fb2:	0003      	movs	r3, r0
 8007fb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fb6:	e00c      	b.n	8007fd2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fb8:	2380      	movs	r3, #128	@ 0x80
 8007fba:	021b      	lsls	r3, r3, #8
 8007fbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fbe:	e008      	b.n	8007fd2 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007fc4:	231a      	movs	r3, #26
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	189b      	adds	r3, r3, r2
 8007fca:	19db      	adds	r3, r3, r7
 8007fcc:	2201      	movs	r2, #1
 8007fce:	701a      	strb	r2, [r3, #0]
        break;
 8007fd0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d100      	bne.n	8007fda <UART_SetConfig+0x402>
 8007fd8:	e135      	b.n	8008246 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fde:	4ba8      	ldr	r3, [pc, #672]	@ (8008280 <UART_SetConfig+0x6a8>)
 8007fe0:	0052      	lsls	r2, r2, #1
 8007fe2:	5ad3      	ldrh	r3, [r2, r3]
 8007fe4:	0019      	movs	r1, r3
 8007fe6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007fe8:	f7f8 f8a0 	bl	800012c <__udivsi3>
 8007fec:	0003      	movs	r3, r0
 8007fee:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff2:	685a      	ldr	r2, [r3, #4]
 8007ff4:	0013      	movs	r3, r2
 8007ff6:	005b      	lsls	r3, r3, #1
 8007ff8:	189b      	adds	r3, r3, r2
 8007ffa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d305      	bcc.n	800800c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008006:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008008:	429a      	cmp	r2, r3
 800800a:	d906      	bls.n	800801a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800800c:	231a      	movs	r3, #26
 800800e:	2220      	movs	r2, #32
 8008010:	189b      	adds	r3, r3, r2
 8008012:	19db      	adds	r3, r3, r7
 8008014:	2201      	movs	r2, #1
 8008016:	701a      	strb	r2, [r3, #0]
 8008018:	e044      	b.n	80080a4 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800801a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800801c:	61bb      	str	r3, [r7, #24]
 800801e:	2300      	movs	r3, #0
 8008020:	61fb      	str	r3, [r7, #28]
 8008022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008024:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008026:	4b96      	ldr	r3, [pc, #600]	@ (8008280 <UART_SetConfig+0x6a8>)
 8008028:	0052      	lsls	r2, r2, #1
 800802a:	5ad3      	ldrh	r3, [r2, r3]
 800802c:	613b      	str	r3, [r7, #16]
 800802e:	2300      	movs	r3, #0
 8008030:	617b      	str	r3, [r7, #20]
 8008032:	693a      	ldr	r2, [r7, #16]
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	69b8      	ldr	r0, [r7, #24]
 8008038:	69f9      	ldr	r1, [r7, #28]
 800803a:	f7f8 f9ed 	bl	8000418 <__aeabi_uldivmod>
 800803e:	0002      	movs	r2, r0
 8008040:	000b      	movs	r3, r1
 8008042:	0e11      	lsrs	r1, r2, #24
 8008044:	021d      	lsls	r5, r3, #8
 8008046:	430d      	orrs	r5, r1
 8008048:	0214      	lsls	r4, r2, #8
 800804a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	085b      	lsrs	r3, r3, #1
 8008050:	60bb      	str	r3, [r7, #8]
 8008052:	2300      	movs	r3, #0
 8008054:	60fb      	str	r3, [r7, #12]
 8008056:	68b8      	ldr	r0, [r7, #8]
 8008058:	68f9      	ldr	r1, [r7, #12]
 800805a:	1900      	adds	r0, r0, r4
 800805c:	4169      	adcs	r1, r5
 800805e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	603b      	str	r3, [r7, #0]
 8008064:	2300      	movs	r3, #0
 8008066:	607b      	str	r3, [r7, #4]
 8008068:	683a      	ldr	r2, [r7, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f7f8 f9d4 	bl	8000418 <__aeabi_uldivmod>
 8008070:	0002      	movs	r2, r0
 8008072:	000b      	movs	r3, r1
 8008074:	0013      	movs	r3, r2
 8008076:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008078:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800807a:	23c0      	movs	r3, #192	@ 0xc0
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	429a      	cmp	r2, r3
 8008080:	d309      	bcc.n	8008096 <UART_SetConfig+0x4be>
 8008082:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008084:	2380      	movs	r3, #128	@ 0x80
 8008086:	035b      	lsls	r3, r3, #13
 8008088:	429a      	cmp	r2, r3
 800808a:	d204      	bcs.n	8008096 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800808c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008092:	60da      	str	r2, [r3, #12]
 8008094:	e006      	b.n	80080a4 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8008096:	231a      	movs	r3, #26
 8008098:	2220      	movs	r2, #32
 800809a:	189b      	adds	r3, r3, r2
 800809c:	19db      	adds	r3, r3, r7
 800809e:	2201      	movs	r2, #1
 80080a0:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80080a2:	e0d0      	b.n	8008246 <UART_SetConfig+0x66e>
 80080a4:	e0cf      	b.n	8008246 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a8:	69da      	ldr	r2, [r3, #28]
 80080aa:	2380      	movs	r3, #128	@ 0x80
 80080ac:	021b      	lsls	r3, r3, #8
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d000      	beq.n	80080b4 <UART_SetConfig+0x4dc>
 80080b2:	e070      	b.n	8008196 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80080b4:	231b      	movs	r3, #27
 80080b6:	2220      	movs	r2, #32
 80080b8:	189b      	adds	r3, r3, r2
 80080ba:	19db      	adds	r3, r3, r7
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	2b08      	cmp	r3, #8
 80080c0:	d015      	beq.n	80080ee <UART_SetConfig+0x516>
 80080c2:	dc18      	bgt.n	80080f6 <UART_SetConfig+0x51e>
 80080c4:	2b04      	cmp	r3, #4
 80080c6:	d00d      	beq.n	80080e4 <UART_SetConfig+0x50c>
 80080c8:	dc15      	bgt.n	80080f6 <UART_SetConfig+0x51e>
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d002      	beq.n	80080d4 <UART_SetConfig+0x4fc>
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d005      	beq.n	80080de <UART_SetConfig+0x506>
 80080d2:	e010      	b.n	80080f6 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080d4:	f7fd fc5c 	bl	8005990 <HAL_RCC_GetPCLK1Freq>
 80080d8:	0003      	movs	r3, r0
 80080da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080dc:	e014      	b.n	8008108 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080de:	4b67      	ldr	r3, [pc, #412]	@ (800827c <UART_SetConfig+0x6a4>)
 80080e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080e2:	e011      	b.n	8008108 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080e4:	f7fd fbc8 	bl	8005878 <HAL_RCC_GetSysClockFreq>
 80080e8:	0003      	movs	r3, r0
 80080ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080ec:	e00c      	b.n	8008108 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080ee:	2380      	movs	r3, #128	@ 0x80
 80080f0:	021b      	lsls	r3, r3, #8
 80080f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080f4:	e008      	b.n	8008108 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80080f6:	2300      	movs	r3, #0
 80080f8:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80080fa:	231a      	movs	r3, #26
 80080fc:	2220      	movs	r2, #32
 80080fe:	189b      	adds	r3, r3, r2
 8008100:	19db      	adds	r3, r3, r7
 8008102:	2201      	movs	r2, #1
 8008104:	701a      	strb	r2, [r3, #0]
        break;
 8008106:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800810a:	2b00      	cmp	r3, #0
 800810c:	d100      	bne.n	8008110 <UART_SetConfig+0x538>
 800810e:	e09a      	b.n	8008246 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008112:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008114:	4b5a      	ldr	r3, [pc, #360]	@ (8008280 <UART_SetConfig+0x6a8>)
 8008116:	0052      	lsls	r2, r2, #1
 8008118:	5ad3      	ldrh	r3, [r2, r3]
 800811a:	0019      	movs	r1, r3
 800811c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800811e:	f7f8 f805 	bl	800012c <__udivsi3>
 8008122:	0003      	movs	r3, r0
 8008124:	005a      	lsls	r2, r3, #1
 8008126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	085b      	lsrs	r3, r3, #1
 800812c:	18d2      	adds	r2, r2, r3
 800812e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	0019      	movs	r1, r3
 8008134:	0010      	movs	r0, r2
 8008136:	f7f7 fff9 	bl	800012c <__udivsi3>
 800813a:	0003      	movs	r3, r0
 800813c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800813e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008140:	2b0f      	cmp	r3, #15
 8008142:	d921      	bls.n	8008188 <UART_SetConfig+0x5b0>
 8008144:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008146:	2380      	movs	r3, #128	@ 0x80
 8008148:	025b      	lsls	r3, r3, #9
 800814a:	429a      	cmp	r2, r3
 800814c:	d21c      	bcs.n	8008188 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800814e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008150:	b29a      	uxth	r2, r3
 8008152:	200e      	movs	r0, #14
 8008154:	2420      	movs	r4, #32
 8008156:	1903      	adds	r3, r0, r4
 8008158:	19db      	adds	r3, r3, r7
 800815a:	210f      	movs	r1, #15
 800815c:	438a      	bics	r2, r1
 800815e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008162:	085b      	lsrs	r3, r3, #1
 8008164:	b29b      	uxth	r3, r3
 8008166:	2207      	movs	r2, #7
 8008168:	4013      	ands	r3, r2
 800816a:	b299      	uxth	r1, r3
 800816c:	1903      	adds	r3, r0, r4
 800816e:	19db      	adds	r3, r3, r7
 8008170:	1902      	adds	r2, r0, r4
 8008172:	19d2      	adds	r2, r2, r7
 8008174:	8812      	ldrh	r2, [r2, #0]
 8008176:	430a      	orrs	r2, r1
 8008178:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800817a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	1902      	adds	r2, r0, r4
 8008180:	19d2      	adds	r2, r2, r7
 8008182:	8812      	ldrh	r2, [r2, #0]
 8008184:	60da      	str	r2, [r3, #12]
 8008186:	e05e      	b.n	8008246 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8008188:	231a      	movs	r3, #26
 800818a:	2220      	movs	r2, #32
 800818c:	189b      	adds	r3, r3, r2
 800818e:	19db      	adds	r3, r3, r7
 8008190:	2201      	movs	r2, #1
 8008192:	701a      	strb	r2, [r3, #0]
 8008194:	e057      	b.n	8008246 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008196:	231b      	movs	r3, #27
 8008198:	2220      	movs	r2, #32
 800819a:	189b      	adds	r3, r3, r2
 800819c:	19db      	adds	r3, r3, r7
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	2b08      	cmp	r3, #8
 80081a2:	d015      	beq.n	80081d0 <UART_SetConfig+0x5f8>
 80081a4:	dc18      	bgt.n	80081d8 <UART_SetConfig+0x600>
 80081a6:	2b04      	cmp	r3, #4
 80081a8:	d00d      	beq.n	80081c6 <UART_SetConfig+0x5ee>
 80081aa:	dc15      	bgt.n	80081d8 <UART_SetConfig+0x600>
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d002      	beq.n	80081b6 <UART_SetConfig+0x5de>
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d005      	beq.n	80081c0 <UART_SetConfig+0x5e8>
 80081b4:	e010      	b.n	80081d8 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081b6:	f7fd fbeb 	bl	8005990 <HAL_RCC_GetPCLK1Freq>
 80081ba:	0003      	movs	r3, r0
 80081bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081be:	e014      	b.n	80081ea <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081c0:	4b2e      	ldr	r3, [pc, #184]	@ (800827c <UART_SetConfig+0x6a4>)
 80081c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081c4:	e011      	b.n	80081ea <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081c6:	f7fd fb57 	bl	8005878 <HAL_RCC_GetSysClockFreq>
 80081ca:	0003      	movs	r3, r0
 80081cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081ce:	e00c      	b.n	80081ea <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081d0:	2380      	movs	r3, #128	@ 0x80
 80081d2:	021b      	lsls	r3, r3, #8
 80081d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081d6:	e008      	b.n	80081ea <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80081d8:	2300      	movs	r3, #0
 80081da:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80081dc:	231a      	movs	r3, #26
 80081de:	2220      	movs	r2, #32
 80081e0:	189b      	adds	r3, r3, r2
 80081e2:	19db      	adds	r3, r3, r7
 80081e4:	2201      	movs	r2, #1
 80081e6:	701a      	strb	r2, [r3, #0]
        break;
 80081e8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80081ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d02a      	beq.n	8008246 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081f4:	4b22      	ldr	r3, [pc, #136]	@ (8008280 <UART_SetConfig+0x6a8>)
 80081f6:	0052      	lsls	r2, r2, #1
 80081f8:	5ad3      	ldrh	r3, [r2, r3]
 80081fa:	0019      	movs	r1, r3
 80081fc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80081fe:	f7f7 ff95 	bl	800012c <__udivsi3>
 8008202:	0003      	movs	r3, r0
 8008204:	001a      	movs	r2, r3
 8008206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	085b      	lsrs	r3, r3, #1
 800820c:	18d2      	adds	r2, r2, r3
 800820e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	0019      	movs	r1, r3
 8008214:	0010      	movs	r0, r2
 8008216:	f7f7 ff89 	bl	800012c <__udivsi3>
 800821a:	0003      	movs	r3, r0
 800821c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800821e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008220:	2b0f      	cmp	r3, #15
 8008222:	d90a      	bls.n	800823a <UART_SetConfig+0x662>
 8008224:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008226:	2380      	movs	r3, #128	@ 0x80
 8008228:	025b      	lsls	r3, r3, #9
 800822a:	429a      	cmp	r2, r3
 800822c:	d205      	bcs.n	800823a <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800822e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008230:	b29a      	uxth	r2, r3
 8008232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	60da      	str	r2, [r3, #12]
 8008238:	e005      	b.n	8008246 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800823a:	231a      	movs	r3, #26
 800823c:	2220      	movs	r2, #32
 800823e:	189b      	adds	r3, r3, r2
 8008240:	19db      	adds	r3, r3, r7
 8008242:	2201      	movs	r2, #1
 8008244:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008248:	226a      	movs	r2, #106	@ 0x6a
 800824a:	2101      	movs	r1, #1
 800824c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800824e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008250:	2268      	movs	r2, #104	@ 0x68
 8008252:	2101      	movs	r1, #1
 8008254:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008258:	2200      	movs	r2, #0
 800825a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800825c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825e:	2200      	movs	r2, #0
 8008260:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008262:	231a      	movs	r3, #26
 8008264:	2220      	movs	r2, #32
 8008266:	189b      	adds	r3, r3, r2
 8008268:	19db      	adds	r3, r3, r7
 800826a:	781b      	ldrb	r3, [r3, #0]
}
 800826c:	0018      	movs	r0, r3
 800826e:	46bd      	mov	sp, r7
 8008270:	b010      	add	sp, #64	@ 0x40
 8008272:	bdb0      	pop	{r4, r5, r7, pc}
 8008274:	40008000 	.word	0x40008000
 8008278:	40008400 	.word	0x40008400
 800827c:	00f42400 	.word	0x00f42400
 8008280:	08009bb4 	.word	0x08009bb4

08008284 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008290:	2208      	movs	r2, #8
 8008292:	4013      	ands	r3, r2
 8008294:	d00b      	beq.n	80082ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	4a4a      	ldr	r2, [pc, #296]	@ (80083c8 <UART_AdvFeatureConfig+0x144>)
 800829e:	4013      	ands	r3, r2
 80082a0:	0019      	movs	r1, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	430a      	orrs	r2, r1
 80082ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082b2:	2201      	movs	r2, #1
 80082b4:	4013      	ands	r3, r2
 80082b6:	d00b      	beq.n	80082d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	4a43      	ldr	r2, [pc, #268]	@ (80083cc <UART_AdvFeatureConfig+0x148>)
 80082c0:	4013      	ands	r3, r2
 80082c2:	0019      	movs	r1, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	430a      	orrs	r2, r1
 80082ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d4:	2202      	movs	r2, #2
 80082d6:	4013      	ands	r3, r2
 80082d8:	d00b      	beq.n	80082f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	4a3b      	ldr	r2, [pc, #236]	@ (80083d0 <UART_AdvFeatureConfig+0x14c>)
 80082e2:	4013      	ands	r3, r2
 80082e4:	0019      	movs	r1, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	430a      	orrs	r2, r1
 80082f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082f6:	2204      	movs	r2, #4
 80082f8:	4013      	ands	r3, r2
 80082fa:	d00b      	beq.n	8008314 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	4a34      	ldr	r2, [pc, #208]	@ (80083d4 <UART_AdvFeatureConfig+0x150>)
 8008304:	4013      	ands	r3, r2
 8008306:	0019      	movs	r1, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	430a      	orrs	r2, r1
 8008312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008318:	2210      	movs	r2, #16
 800831a:	4013      	ands	r3, r2
 800831c:	d00b      	beq.n	8008336 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	4a2c      	ldr	r2, [pc, #176]	@ (80083d8 <UART_AdvFeatureConfig+0x154>)
 8008326:	4013      	ands	r3, r2
 8008328:	0019      	movs	r1, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800833a:	2220      	movs	r2, #32
 800833c:	4013      	ands	r3, r2
 800833e:	d00b      	beq.n	8008358 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	4a25      	ldr	r2, [pc, #148]	@ (80083dc <UART_AdvFeatureConfig+0x158>)
 8008348:	4013      	ands	r3, r2
 800834a:	0019      	movs	r1, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	430a      	orrs	r2, r1
 8008356:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800835c:	2240      	movs	r2, #64	@ 0x40
 800835e:	4013      	ands	r3, r2
 8008360:	d01d      	beq.n	800839e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	4a1d      	ldr	r2, [pc, #116]	@ (80083e0 <UART_AdvFeatureConfig+0x15c>)
 800836a:	4013      	ands	r3, r2
 800836c:	0019      	movs	r1, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	430a      	orrs	r2, r1
 8008378:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800837e:	2380      	movs	r3, #128	@ 0x80
 8008380:	035b      	lsls	r3, r3, #13
 8008382:	429a      	cmp	r2, r3
 8008384:	d10b      	bne.n	800839e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	4a15      	ldr	r2, [pc, #84]	@ (80083e4 <UART_AdvFeatureConfig+0x160>)
 800838e:	4013      	ands	r3, r2
 8008390:	0019      	movs	r1, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	430a      	orrs	r2, r1
 800839c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a2:	2280      	movs	r2, #128	@ 0x80
 80083a4:	4013      	ands	r3, r2
 80083a6:	d00b      	beq.n	80083c0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	4a0e      	ldr	r2, [pc, #56]	@ (80083e8 <UART_AdvFeatureConfig+0x164>)
 80083b0:	4013      	ands	r3, r2
 80083b2:	0019      	movs	r1, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	430a      	orrs	r2, r1
 80083be:	605a      	str	r2, [r3, #4]
  }
}
 80083c0:	46c0      	nop			@ (mov r8, r8)
 80083c2:	46bd      	mov	sp, r7
 80083c4:	b002      	add	sp, #8
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	ffff7fff 	.word	0xffff7fff
 80083cc:	fffdffff 	.word	0xfffdffff
 80083d0:	fffeffff 	.word	0xfffeffff
 80083d4:	fffbffff 	.word	0xfffbffff
 80083d8:	ffffefff 	.word	0xffffefff
 80083dc:	ffffdfff 	.word	0xffffdfff
 80083e0:	ffefffff 	.word	0xffefffff
 80083e4:	ff9fffff 	.word	0xff9fffff
 80083e8:	fff7ffff 	.word	0xfff7ffff

080083ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b092      	sub	sp, #72	@ 0x48
 80083f0:	af02      	add	r7, sp, #8
 80083f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2290      	movs	r2, #144	@ 0x90
 80083f8:	2100      	movs	r1, #0
 80083fa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083fc:	f7fb fca6 	bl	8003d4c <HAL_GetTick>
 8008400:	0003      	movs	r3, r0
 8008402:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2208      	movs	r2, #8
 800840c:	4013      	ands	r3, r2
 800840e:	2b08      	cmp	r3, #8
 8008410:	d12d      	bne.n	800846e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008414:	2280      	movs	r2, #128	@ 0x80
 8008416:	0391      	lsls	r1, r2, #14
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	4a47      	ldr	r2, [pc, #284]	@ (8008538 <UART_CheckIdleState+0x14c>)
 800841c:	9200      	str	r2, [sp, #0]
 800841e:	2200      	movs	r2, #0
 8008420:	f000 f88e 	bl	8008540 <UART_WaitOnFlagUntilTimeout>
 8008424:	1e03      	subs	r3, r0, #0
 8008426:	d022      	beq.n	800846e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008428:	f3ef 8310 	mrs	r3, PRIMASK
 800842c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800842e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008430:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008432:	2301      	movs	r3, #1
 8008434:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008438:	f383 8810 	msr	PRIMASK, r3
}
 800843c:	46c0      	nop			@ (mov r8, r8)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2180      	movs	r1, #128	@ 0x80
 800844a:	438a      	bics	r2, r1
 800844c:	601a      	str	r2, [r3, #0]
 800844e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008450:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008454:	f383 8810 	msr	PRIMASK, r3
}
 8008458:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2288      	movs	r2, #136	@ 0x88
 800845e:	2120      	movs	r1, #32
 8008460:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2284      	movs	r2, #132	@ 0x84
 8008466:	2100      	movs	r1, #0
 8008468:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800846a:	2303      	movs	r3, #3
 800846c:	e060      	b.n	8008530 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2204      	movs	r2, #4
 8008476:	4013      	ands	r3, r2
 8008478:	2b04      	cmp	r3, #4
 800847a:	d146      	bne.n	800850a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800847c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800847e:	2280      	movs	r2, #128	@ 0x80
 8008480:	03d1      	lsls	r1, r2, #15
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	4a2c      	ldr	r2, [pc, #176]	@ (8008538 <UART_CheckIdleState+0x14c>)
 8008486:	9200      	str	r2, [sp, #0]
 8008488:	2200      	movs	r2, #0
 800848a:	f000 f859 	bl	8008540 <UART_WaitOnFlagUntilTimeout>
 800848e:	1e03      	subs	r3, r0, #0
 8008490:	d03b      	beq.n	800850a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008492:	f3ef 8310 	mrs	r3, PRIMASK
 8008496:	60fb      	str	r3, [r7, #12]
  return(result);
 8008498:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800849a:	637b      	str	r3, [r7, #52]	@ 0x34
 800849c:	2301      	movs	r3, #1
 800849e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	f383 8810 	msr	PRIMASK, r3
}
 80084a6:	46c0      	nop			@ (mov r8, r8)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4922      	ldr	r1, [pc, #136]	@ (800853c <UART_CheckIdleState+0x150>)
 80084b4:	400a      	ands	r2, r1
 80084b6:	601a      	str	r2, [r3, #0]
 80084b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	f383 8810 	msr	PRIMASK, r3
}
 80084c2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084c4:	f3ef 8310 	mrs	r3, PRIMASK
 80084c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80084ca:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80084ce:	2301      	movs	r3, #1
 80084d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	f383 8810 	msr	PRIMASK, r3
}
 80084d8:	46c0      	nop			@ (mov r8, r8)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	689a      	ldr	r2, [r3, #8]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2101      	movs	r1, #1
 80084e6:	438a      	bics	r2, r1
 80084e8:	609a      	str	r2, [r3, #8]
 80084ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084ee:	6a3b      	ldr	r3, [r7, #32]
 80084f0:	f383 8810 	msr	PRIMASK, r3
}
 80084f4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	228c      	movs	r2, #140	@ 0x8c
 80084fa:	2120      	movs	r1, #32
 80084fc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2284      	movs	r2, #132	@ 0x84
 8008502:	2100      	movs	r1, #0
 8008504:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008506:	2303      	movs	r3, #3
 8008508:	e012      	b.n	8008530 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2288      	movs	r2, #136	@ 0x88
 800850e:	2120      	movs	r1, #32
 8008510:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	228c      	movs	r2, #140	@ 0x8c
 8008516:	2120      	movs	r1, #32
 8008518:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2284      	movs	r2, #132	@ 0x84
 800852a:	2100      	movs	r1, #0
 800852c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	0018      	movs	r0, r3
 8008532:	46bd      	mov	sp, r7
 8008534:	b010      	add	sp, #64	@ 0x40
 8008536:	bd80      	pop	{r7, pc}
 8008538:	01ffffff 	.word	0x01ffffff
 800853c:	fffffedf 	.word	0xfffffedf

08008540 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	603b      	str	r3, [r7, #0]
 800854c:	1dfb      	adds	r3, r7, #7
 800854e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008550:	e051      	b.n	80085f6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	3301      	adds	r3, #1
 8008556:	d04e      	beq.n	80085f6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008558:	f7fb fbf8 	bl	8003d4c <HAL_GetTick>
 800855c:	0002      	movs	r2, r0
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	69ba      	ldr	r2, [r7, #24]
 8008564:	429a      	cmp	r2, r3
 8008566:	d302      	bcc.n	800856e <UART_WaitOnFlagUntilTimeout+0x2e>
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d101      	bne.n	8008572 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e051      	b.n	8008616 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2204      	movs	r2, #4
 800857a:	4013      	ands	r3, r2
 800857c:	d03b      	beq.n	80085f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	2b80      	cmp	r3, #128	@ 0x80
 8008582:	d038      	beq.n	80085f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	2b40      	cmp	r3, #64	@ 0x40
 8008588:	d035      	beq.n	80085f6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	69db      	ldr	r3, [r3, #28]
 8008590:	2208      	movs	r2, #8
 8008592:	4013      	ands	r3, r2
 8008594:	2b08      	cmp	r3, #8
 8008596:	d111      	bne.n	80085bc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2208      	movs	r2, #8
 800859e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	0018      	movs	r0, r3
 80085a4:	f000 f83c 	bl	8008620 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2290      	movs	r2, #144	@ 0x90
 80085ac:	2108      	movs	r1, #8
 80085ae:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2284      	movs	r2, #132	@ 0x84
 80085b4:	2100      	movs	r1, #0
 80085b6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e02c      	b.n	8008616 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	69da      	ldr	r2, [r3, #28]
 80085c2:	2380      	movs	r3, #128	@ 0x80
 80085c4:	011b      	lsls	r3, r3, #4
 80085c6:	401a      	ands	r2, r3
 80085c8:	2380      	movs	r3, #128	@ 0x80
 80085ca:	011b      	lsls	r3, r3, #4
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d112      	bne.n	80085f6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2280      	movs	r2, #128	@ 0x80
 80085d6:	0112      	lsls	r2, r2, #4
 80085d8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	0018      	movs	r0, r3
 80085de:	f000 f81f 	bl	8008620 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2290      	movs	r2, #144	@ 0x90
 80085e6:	2120      	movs	r1, #32
 80085e8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2284      	movs	r2, #132	@ 0x84
 80085ee:	2100      	movs	r1, #0
 80085f0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e00f      	b.n	8008616 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	69db      	ldr	r3, [r3, #28]
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	4013      	ands	r3, r2
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	1ad3      	subs	r3, r2, r3
 8008604:	425a      	negs	r2, r3
 8008606:	4153      	adcs	r3, r2
 8008608:	b2db      	uxtb	r3, r3
 800860a:	001a      	movs	r2, r3
 800860c:	1dfb      	adds	r3, r7, #7
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	429a      	cmp	r2, r3
 8008612:	d09e      	beq.n	8008552 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	0018      	movs	r0, r3
 8008618:	46bd      	mov	sp, r7
 800861a:	b004      	add	sp, #16
 800861c:	bd80      	pop	{r7, pc}
	...

08008620 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b08e      	sub	sp, #56	@ 0x38
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008628:	f3ef 8310 	mrs	r3, PRIMASK
 800862c:	617b      	str	r3, [r7, #20]
  return(result);
 800862e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008630:	637b      	str	r3, [r7, #52]	@ 0x34
 8008632:	2301      	movs	r3, #1
 8008634:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	f383 8810 	msr	PRIMASK, r3
}
 800863c:	46c0      	nop			@ (mov r8, r8)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4926      	ldr	r1, [pc, #152]	@ (80086e4 <UART_EndRxTransfer+0xc4>)
 800864a:	400a      	ands	r2, r1
 800864c:	601a      	str	r2, [r3, #0]
 800864e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008650:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	f383 8810 	msr	PRIMASK, r3
}
 8008658:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800865a:	f3ef 8310 	mrs	r3, PRIMASK
 800865e:	623b      	str	r3, [r7, #32]
  return(result);
 8008660:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008662:	633b      	str	r3, [r7, #48]	@ 0x30
 8008664:	2301      	movs	r3, #1
 8008666:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866a:	f383 8810 	msr	PRIMASK, r3
}
 800866e:	46c0      	nop			@ (mov r8, r8)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	689a      	ldr	r2, [r3, #8]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	491b      	ldr	r1, [pc, #108]	@ (80086e8 <UART_EndRxTransfer+0xc8>)
 800867c:	400a      	ands	r2, r1
 800867e:	609a      	str	r2, [r3, #8]
 8008680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008682:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008686:	f383 8810 	msr	PRIMASK, r3
}
 800868a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008690:	2b01      	cmp	r3, #1
 8008692:	d118      	bne.n	80086c6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008694:	f3ef 8310 	mrs	r3, PRIMASK
 8008698:	60bb      	str	r3, [r7, #8]
  return(result);
 800869a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800869c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800869e:	2301      	movs	r3, #1
 80086a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f383 8810 	msr	PRIMASK, r3
}
 80086a8:	46c0      	nop			@ (mov r8, r8)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2110      	movs	r1, #16
 80086b6:	438a      	bics	r2, r1
 80086b8:	601a      	str	r2, [r3, #0]
 80086ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	f383 8810 	msr	PRIMASK, r3
}
 80086c4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	228c      	movs	r2, #140	@ 0x8c
 80086ca:	2120      	movs	r1, #32
 80086cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80086da:	46c0      	nop			@ (mov r8, r8)
 80086dc:	46bd      	mov	sp, r7
 80086de:	b00e      	add	sp, #56	@ 0x38
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	46c0      	nop			@ (mov r8, r8)
 80086e4:	fffffedf 	.word	0xfffffedf
 80086e8:	effffffe 	.word	0xeffffffe

080086ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2284      	movs	r2, #132	@ 0x84
 80086f8:	5c9b      	ldrb	r3, [r3, r2]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d101      	bne.n	8008702 <HAL_UARTEx_DisableFifoMode+0x16>
 80086fe:	2302      	movs	r3, #2
 8008700:	e027      	b.n	8008752 <HAL_UARTEx_DisableFifoMode+0x66>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2284      	movs	r2, #132	@ 0x84
 8008706:	2101      	movs	r1, #1
 8008708:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2288      	movs	r2, #136	@ 0x88
 800870e:	2124      	movs	r1, #36	@ 0x24
 8008710:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2101      	movs	r1, #1
 8008726:	438a      	bics	r2, r1
 8008728:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	4a0b      	ldr	r2, [pc, #44]	@ (800875c <HAL_UARTEx_DisableFifoMode+0x70>)
 800872e:	4013      	ands	r3, r2
 8008730:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2288      	movs	r2, #136	@ 0x88
 8008744:	2120      	movs	r1, #32
 8008746:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2284      	movs	r2, #132	@ 0x84
 800874c:	2100      	movs	r1, #0
 800874e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	0018      	movs	r0, r3
 8008754:	46bd      	mov	sp, r7
 8008756:	b004      	add	sp, #16
 8008758:	bd80      	pop	{r7, pc}
 800875a:	46c0      	nop			@ (mov r8, r8)
 800875c:	dfffffff 	.word	0xdfffffff

08008760 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2284      	movs	r2, #132	@ 0x84
 800876e:	5c9b      	ldrb	r3, [r3, r2]
 8008770:	2b01      	cmp	r3, #1
 8008772:	d101      	bne.n	8008778 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008774:	2302      	movs	r3, #2
 8008776:	e02e      	b.n	80087d6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2284      	movs	r2, #132	@ 0x84
 800877c:	2101      	movs	r1, #1
 800877e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2288      	movs	r2, #136	@ 0x88
 8008784:	2124      	movs	r1, #36	@ 0x24
 8008786:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2101      	movs	r1, #1
 800879c:	438a      	bics	r2, r1
 800879e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	00db      	lsls	r3, r3, #3
 80087a8:	08d9      	lsrs	r1, r3, #3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	430a      	orrs	r2, r1
 80087b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	0018      	movs	r0, r3
 80087b8:	f000 f854 	bl	8008864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2288      	movs	r2, #136	@ 0x88
 80087c8:	2120      	movs	r1, #32
 80087ca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2284      	movs	r2, #132	@ 0x84
 80087d0:	2100      	movs	r1, #0
 80087d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	0018      	movs	r0, r3
 80087d8:	46bd      	mov	sp, r7
 80087da:	b004      	add	sp, #16
 80087dc:	bd80      	pop	{r7, pc}
	...

080087e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2284      	movs	r2, #132	@ 0x84
 80087ee:	5c9b      	ldrb	r3, [r3, r2]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d101      	bne.n	80087f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80087f4:	2302      	movs	r3, #2
 80087f6:	e02f      	b.n	8008858 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2284      	movs	r2, #132	@ 0x84
 80087fc:	2101      	movs	r1, #1
 80087fe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2288      	movs	r2, #136	@ 0x88
 8008804:	2124      	movs	r1, #36	@ 0x24
 8008806:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2101      	movs	r1, #1
 800881c:	438a      	bics	r2, r1
 800881e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	4a0e      	ldr	r2, [pc, #56]	@ (8008860 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008828:	4013      	ands	r3, r2
 800882a:	0019      	movs	r1, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	430a      	orrs	r2, r1
 8008834:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	0018      	movs	r0, r3
 800883a:	f000 f813 	bl	8008864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2288      	movs	r2, #136	@ 0x88
 800884a:	2120      	movs	r1, #32
 800884c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2284      	movs	r2, #132	@ 0x84
 8008852:	2100      	movs	r1, #0
 8008854:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	0018      	movs	r0, r3
 800885a:	46bd      	mov	sp, r7
 800885c:	b004      	add	sp, #16
 800885e:	bd80      	pop	{r7, pc}
 8008860:	f1ffffff 	.word	0xf1ffffff

08008864 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008870:	2b00      	cmp	r3, #0
 8008872:	d108      	bne.n	8008886 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	226a      	movs	r2, #106	@ 0x6a
 8008878:	2101      	movs	r1, #1
 800887a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2268      	movs	r2, #104	@ 0x68
 8008880:	2101      	movs	r1, #1
 8008882:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008884:	e043      	b.n	800890e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008886:	260f      	movs	r6, #15
 8008888:	19bb      	adds	r3, r7, r6
 800888a:	2208      	movs	r2, #8
 800888c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800888e:	200e      	movs	r0, #14
 8008890:	183b      	adds	r3, r7, r0
 8008892:	2208      	movs	r2, #8
 8008894:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	0e5b      	lsrs	r3, r3, #25
 800889e:	b2da      	uxtb	r2, r3
 80088a0:	240d      	movs	r4, #13
 80088a2:	193b      	adds	r3, r7, r4
 80088a4:	2107      	movs	r1, #7
 80088a6:	400a      	ands	r2, r1
 80088a8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	0f5b      	lsrs	r3, r3, #29
 80088b2:	b2da      	uxtb	r2, r3
 80088b4:	250c      	movs	r5, #12
 80088b6:	197b      	adds	r3, r7, r5
 80088b8:	2107      	movs	r1, #7
 80088ba:	400a      	ands	r2, r1
 80088bc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088be:	183b      	adds	r3, r7, r0
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	197a      	adds	r2, r7, r5
 80088c4:	7812      	ldrb	r2, [r2, #0]
 80088c6:	4914      	ldr	r1, [pc, #80]	@ (8008918 <UARTEx_SetNbDataToProcess+0xb4>)
 80088c8:	5c8a      	ldrb	r2, [r1, r2]
 80088ca:	435a      	muls	r2, r3
 80088cc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80088ce:	197b      	adds	r3, r7, r5
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	4a12      	ldr	r2, [pc, #72]	@ (800891c <UARTEx_SetNbDataToProcess+0xb8>)
 80088d4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088d6:	0019      	movs	r1, r3
 80088d8:	f7f7 fcb2 	bl	8000240 <__divsi3>
 80088dc:	0003      	movs	r3, r0
 80088de:	b299      	uxth	r1, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	226a      	movs	r2, #106	@ 0x6a
 80088e4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088e6:	19bb      	adds	r3, r7, r6
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	193a      	adds	r2, r7, r4
 80088ec:	7812      	ldrb	r2, [r2, #0]
 80088ee:	490a      	ldr	r1, [pc, #40]	@ (8008918 <UARTEx_SetNbDataToProcess+0xb4>)
 80088f0:	5c8a      	ldrb	r2, [r1, r2]
 80088f2:	435a      	muls	r2, r3
 80088f4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80088f6:	193b      	adds	r3, r7, r4
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	4a08      	ldr	r2, [pc, #32]	@ (800891c <UARTEx_SetNbDataToProcess+0xb8>)
 80088fc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088fe:	0019      	movs	r1, r3
 8008900:	f7f7 fc9e 	bl	8000240 <__divsi3>
 8008904:	0003      	movs	r3, r0
 8008906:	b299      	uxth	r1, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2268      	movs	r2, #104	@ 0x68
 800890c:	5299      	strh	r1, [r3, r2]
}
 800890e:	46c0      	nop			@ (mov r8, r8)
 8008910:	46bd      	mov	sp, r7
 8008912:	b005      	add	sp, #20
 8008914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008916:	46c0      	nop			@ (mov r8, r8)
 8008918:	08009bcc 	.word	0x08009bcc
 800891c:	08009bd4 	.word	0x08009bd4

08008920 <_strtol_l.isra.0>:
 8008920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008922:	b085      	sub	sp, #20
 8008924:	0017      	movs	r7, r2
 8008926:	001e      	movs	r6, r3
 8008928:	9003      	str	r0, [sp, #12]
 800892a:	9101      	str	r1, [sp, #4]
 800892c:	2b24      	cmp	r3, #36	@ 0x24
 800892e:	d823      	bhi.n	8008978 <_strtol_l.isra.0+0x58>
 8008930:	000c      	movs	r4, r1
 8008932:	2b01      	cmp	r3, #1
 8008934:	d020      	beq.n	8008978 <_strtol_l.isra.0+0x58>
 8008936:	4b3d      	ldr	r3, [pc, #244]	@ (8008a2c <_strtol_l.isra.0+0x10c>)
 8008938:	2208      	movs	r2, #8
 800893a:	469c      	mov	ip, r3
 800893c:	0023      	movs	r3, r4
 800893e:	4661      	mov	r1, ip
 8008940:	781d      	ldrb	r5, [r3, #0]
 8008942:	3401      	adds	r4, #1
 8008944:	5d48      	ldrb	r0, [r1, r5]
 8008946:	0001      	movs	r1, r0
 8008948:	4011      	ands	r1, r2
 800894a:	4210      	tst	r0, r2
 800894c:	d1f6      	bne.n	800893c <_strtol_l.isra.0+0x1c>
 800894e:	2d2d      	cmp	r5, #45	@ 0x2d
 8008950:	d119      	bne.n	8008986 <_strtol_l.isra.0+0x66>
 8008952:	7825      	ldrb	r5, [r4, #0]
 8008954:	1c9c      	adds	r4, r3, #2
 8008956:	2301      	movs	r3, #1
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	2210      	movs	r2, #16
 800895c:	0033      	movs	r3, r6
 800895e:	4393      	bics	r3, r2
 8008960:	d11d      	bne.n	800899e <_strtol_l.isra.0+0x7e>
 8008962:	2d30      	cmp	r5, #48	@ 0x30
 8008964:	d115      	bne.n	8008992 <_strtol_l.isra.0+0x72>
 8008966:	2120      	movs	r1, #32
 8008968:	7823      	ldrb	r3, [r4, #0]
 800896a:	438b      	bics	r3, r1
 800896c:	2b58      	cmp	r3, #88	@ 0x58
 800896e:	d110      	bne.n	8008992 <_strtol_l.isra.0+0x72>
 8008970:	7865      	ldrb	r5, [r4, #1]
 8008972:	3402      	adds	r4, #2
 8008974:	2610      	movs	r6, #16
 8008976:	e012      	b.n	800899e <_strtol_l.isra.0+0x7e>
 8008978:	f000 f892 	bl	8008aa0 <__errno>
 800897c:	2316      	movs	r3, #22
 800897e:	6003      	str	r3, [r0, #0]
 8008980:	2000      	movs	r0, #0
 8008982:	b005      	add	sp, #20
 8008984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008986:	9100      	str	r1, [sp, #0]
 8008988:	2d2b      	cmp	r5, #43	@ 0x2b
 800898a:	d1e6      	bne.n	800895a <_strtol_l.isra.0+0x3a>
 800898c:	7825      	ldrb	r5, [r4, #0]
 800898e:	1c9c      	adds	r4, r3, #2
 8008990:	e7e3      	b.n	800895a <_strtol_l.isra.0+0x3a>
 8008992:	2e00      	cmp	r6, #0
 8008994:	d1ee      	bne.n	8008974 <_strtol_l.isra.0+0x54>
 8008996:	360a      	adds	r6, #10
 8008998:	2d30      	cmp	r5, #48	@ 0x30
 800899a:	d100      	bne.n	800899e <_strtol_l.isra.0+0x7e>
 800899c:	3e02      	subs	r6, #2
 800899e:	4a24      	ldr	r2, [pc, #144]	@ (8008a30 <_strtol_l.isra.0+0x110>)
 80089a0:	9b00      	ldr	r3, [sp, #0]
 80089a2:	4694      	mov	ip, r2
 80089a4:	4463      	add	r3, ip
 80089a6:	0031      	movs	r1, r6
 80089a8:	0018      	movs	r0, r3
 80089aa:	9302      	str	r3, [sp, #8]
 80089ac:	f7f7 fc44 	bl	8000238 <__aeabi_uidivmod>
 80089b0:	2200      	movs	r2, #0
 80089b2:	4684      	mov	ip, r0
 80089b4:	0010      	movs	r0, r2
 80089b6:	002b      	movs	r3, r5
 80089b8:	3b30      	subs	r3, #48	@ 0x30
 80089ba:	2b09      	cmp	r3, #9
 80089bc:	d811      	bhi.n	80089e2 <_strtol_l.isra.0+0xc2>
 80089be:	001d      	movs	r5, r3
 80089c0:	42ae      	cmp	r6, r5
 80089c2:	dd1d      	ble.n	8008a00 <_strtol_l.isra.0+0xe0>
 80089c4:	1c53      	adds	r3, r2, #1
 80089c6:	d009      	beq.n	80089dc <_strtol_l.isra.0+0xbc>
 80089c8:	2201      	movs	r2, #1
 80089ca:	4252      	negs	r2, r2
 80089cc:	4584      	cmp	ip, r0
 80089ce:	d305      	bcc.n	80089dc <_strtol_l.isra.0+0xbc>
 80089d0:	d101      	bne.n	80089d6 <_strtol_l.isra.0+0xb6>
 80089d2:	42a9      	cmp	r1, r5
 80089d4:	db11      	blt.n	80089fa <_strtol_l.isra.0+0xda>
 80089d6:	2201      	movs	r2, #1
 80089d8:	4370      	muls	r0, r6
 80089da:	1828      	adds	r0, r5, r0
 80089dc:	7825      	ldrb	r5, [r4, #0]
 80089de:	3401      	adds	r4, #1
 80089e0:	e7e9      	b.n	80089b6 <_strtol_l.isra.0+0x96>
 80089e2:	002b      	movs	r3, r5
 80089e4:	3b41      	subs	r3, #65	@ 0x41
 80089e6:	2b19      	cmp	r3, #25
 80089e8:	d801      	bhi.n	80089ee <_strtol_l.isra.0+0xce>
 80089ea:	3d37      	subs	r5, #55	@ 0x37
 80089ec:	e7e8      	b.n	80089c0 <_strtol_l.isra.0+0xa0>
 80089ee:	002b      	movs	r3, r5
 80089f0:	3b61      	subs	r3, #97	@ 0x61
 80089f2:	2b19      	cmp	r3, #25
 80089f4:	d804      	bhi.n	8008a00 <_strtol_l.isra.0+0xe0>
 80089f6:	3d57      	subs	r5, #87	@ 0x57
 80089f8:	e7e2      	b.n	80089c0 <_strtol_l.isra.0+0xa0>
 80089fa:	2201      	movs	r2, #1
 80089fc:	4252      	negs	r2, r2
 80089fe:	e7ed      	b.n	80089dc <_strtol_l.isra.0+0xbc>
 8008a00:	1c53      	adds	r3, r2, #1
 8008a02:	d108      	bne.n	8008a16 <_strtol_l.isra.0+0xf6>
 8008a04:	2322      	movs	r3, #34	@ 0x22
 8008a06:	9a03      	ldr	r2, [sp, #12]
 8008a08:	9802      	ldr	r0, [sp, #8]
 8008a0a:	6013      	str	r3, [r2, #0]
 8008a0c:	2f00      	cmp	r7, #0
 8008a0e:	d0b8      	beq.n	8008982 <_strtol_l.isra.0+0x62>
 8008a10:	1e63      	subs	r3, r4, #1
 8008a12:	9301      	str	r3, [sp, #4]
 8008a14:	e007      	b.n	8008a26 <_strtol_l.isra.0+0x106>
 8008a16:	9b00      	ldr	r3, [sp, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d000      	beq.n	8008a1e <_strtol_l.isra.0+0xfe>
 8008a1c:	4240      	negs	r0, r0
 8008a1e:	2f00      	cmp	r7, #0
 8008a20:	d0af      	beq.n	8008982 <_strtol_l.isra.0+0x62>
 8008a22:	2a00      	cmp	r2, #0
 8008a24:	d1f4      	bne.n	8008a10 <_strtol_l.isra.0+0xf0>
 8008a26:	9b01      	ldr	r3, [sp, #4]
 8008a28:	603b      	str	r3, [r7, #0]
 8008a2a:	e7aa      	b.n	8008982 <_strtol_l.isra.0+0x62>
 8008a2c:	08009bdd 	.word	0x08009bdd
 8008a30:	7fffffff 	.word	0x7fffffff

08008a34 <strtol>:
 8008a34:	b510      	push	{r4, lr}
 8008a36:	4c04      	ldr	r4, [pc, #16]	@ (8008a48 <strtol+0x14>)
 8008a38:	0013      	movs	r3, r2
 8008a3a:	000a      	movs	r2, r1
 8008a3c:	0001      	movs	r1, r0
 8008a3e:	6820      	ldr	r0, [r4, #0]
 8008a40:	f7ff ff6e 	bl	8008920 <_strtol_l.isra.0>
 8008a44:	bd10      	pop	{r4, pc}
 8008a46:	46c0      	nop			@ (mov r8, r8)
 8008a48:	20000500 	.word	0x20000500

08008a4c <siprintf>:
 8008a4c:	b40e      	push	{r1, r2, r3}
 8008a4e:	b510      	push	{r4, lr}
 8008a50:	2400      	movs	r4, #0
 8008a52:	490c      	ldr	r1, [pc, #48]	@ (8008a84 <siprintf+0x38>)
 8008a54:	b09d      	sub	sp, #116	@ 0x74
 8008a56:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008a58:	9002      	str	r0, [sp, #8]
 8008a5a:	9006      	str	r0, [sp, #24]
 8008a5c:	9107      	str	r1, [sp, #28]
 8008a5e:	9104      	str	r1, [sp, #16]
 8008a60:	4809      	ldr	r0, [pc, #36]	@ (8008a88 <siprintf+0x3c>)
 8008a62:	490a      	ldr	r1, [pc, #40]	@ (8008a8c <siprintf+0x40>)
 8008a64:	cb04      	ldmia	r3!, {r2}
 8008a66:	9105      	str	r1, [sp, #20]
 8008a68:	6800      	ldr	r0, [r0, #0]
 8008a6a:	a902      	add	r1, sp, #8
 8008a6c:	9301      	str	r3, [sp, #4]
 8008a6e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008a70:	f000 f9a8 	bl	8008dc4 <_svfiprintf_r>
 8008a74:	9b02      	ldr	r3, [sp, #8]
 8008a76:	701c      	strb	r4, [r3, #0]
 8008a78:	b01d      	add	sp, #116	@ 0x74
 8008a7a:	bc10      	pop	{r4}
 8008a7c:	bc08      	pop	{r3}
 8008a7e:	b003      	add	sp, #12
 8008a80:	4718      	bx	r3
 8008a82:	46c0      	nop			@ (mov r8, r8)
 8008a84:	7fffffff 	.word	0x7fffffff
 8008a88:	20000500 	.word	0x20000500
 8008a8c:	ffff0208 	.word	0xffff0208

08008a90 <memset>:
 8008a90:	0003      	movs	r3, r0
 8008a92:	1882      	adds	r2, r0, r2
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d100      	bne.n	8008a9a <memset+0xa>
 8008a98:	4770      	bx	lr
 8008a9a:	7019      	strb	r1, [r3, #0]
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	e7f9      	b.n	8008a94 <memset+0x4>

08008aa0 <__errno>:
 8008aa0:	4b01      	ldr	r3, [pc, #4]	@ (8008aa8 <__errno+0x8>)
 8008aa2:	6818      	ldr	r0, [r3, #0]
 8008aa4:	4770      	bx	lr
 8008aa6:	46c0      	nop			@ (mov r8, r8)
 8008aa8:	20000500 	.word	0x20000500

08008aac <__libc_init_array>:
 8008aac:	b570      	push	{r4, r5, r6, lr}
 8008aae:	2600      	movs	r6, #0
 8008ab0:	4c0c      	ldr	r4, [pc, #48]	@ (8008ae4 <__libc_init_array+0x38>)
 8008ab2:	4d0d      	ldr	r5, [pc, #52]	@ (8008ae8 <__libc_init_array+0x3c>)
 8008ab4:	1b64      	subs	r4, r4, r5
 8008ab6:	10a4      	asrs	r4, r4, #2
 8008ab8:	42a6      	cmp	r6, r4
 8008aba:	d109      	bne.n	8008ad0 <__libc_init_array+0x24>
 8008abc:	2600      	movs	r6, #0
 8008abe:	f000 fc63 	bl	8009388 <_init>
 8008ac2:	4c0a      	ldr	r4, [pc, #40]	@ (8008aec <__libc_init_array+0x40>)
 8008ac4:	4d0a      	ldr	r5, [pc, #40]	@ (8008af0 <__libc_init_array+0x44>)
 8008ac6:	1b64      	subs	r4, r4, r5
 8008ac8:	10a4      	asrs	r4, r4, #2
 8008aca:	42a6      	cmp	r6, r4
 8008acc:	d105      	bne.n	8008ada <__libc_init_array+0x2e>
 8008ace:	bd70      	pop	{r4, r5, r6, pc}
 8008ad0:	00b3      	lsls	r3, r6, #2
 8008ad2:	58eb      	ldr	r3, [r5, r3]
 8008ad4:	4798      	blx	r3
 8008ad6:	3601      	adds	r6, #1
 8008ad8:	e7ee      	b.n	8008ab8 <__libc_init_array+0xc>
 8008ada:	00b3      	lsls	r3, r6, #2
 8008adc:	58eb      	ldr	r3, [r5, r3]
 8008ade:	4798      	blx	r3
 8008ae0:	3601      	adds	r6, #1
 8008ae2:	e7f2      	b.n	8008aca <__libc_init_array+0x1e>
 8008ae4:	08009d18 	.word	0x08009d18
 8008ae8:	08009d18 	.word	0x08009d18
 8008aec:	08009d1c 	.word	0x08009d1c
 8008af0:	08009d18 	.word	0x08009d18

08008af4 <__retarget_lock_acquire_recursive>:
 8008af4:	4770      	bx	lr

08008af6 <__retarget_lock_release_recursive>:
 8008af6:	4770      	bx	lr

08008af8 <memcpy>:
 8008af8:	2300      	movs	r3, #0
 8008afa:	b510      	push	{r4, lr}
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d100      	bne.n	8008b02 <memcpy+0xa>
 8008b00:	bd10      	pop	{r4, pc}
 8008b02:	5ccc      	ldrb	r4, [r1, r3]
 8008b04:	54c4      	strb	r4, [r0, r3]
 8008b06:	3301      	adds	r3, #1
 8008b08:	e7f8      	b.n	8008afc <memcpy+0x4>
	...

08008b0c <_free_r>:
 8008b0c:	b570      	push	{r4, r5, r6, lr}
 8008b0e:	0005      	movs	r5, r0
 8008b10:	1e0c      	subs	r4, r1, #0
 8008b12:	d010      	beq.n	8008b36 <_free_r+0x2a>
 8008b14:	3c04      	subs	r4, #4
 8008b16:	6823      	ldr	r3, [r4, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	da00      	bge.n	8008b1e <_free_r+0x12>
 8008b1c:	18e4      	adds	r4, r4, r3
 8008b1e:	0028      	movs	r0, r5
 8008b20:	f000 f8e0 	bl	8008ce4 <__malloc_lock>
 8008b24:	4a1d      	ldr	r2, [pc, #116]	@ (8008b9c <_free_r+0x90>)
 8008b26:	6813      	ldr	r3, [r2, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d105      	bne.n	8008b38 <_free_r+0x2c>
 8008b2c:	6063      	str	r3, [r4, #4]
 8008b2e:	6014      	str	r4, [r2, #0]
 8008b30:	0028      	movs	r0, r5
 8008b32:	f000 f8df 	bl	8008cf4 <__malloc_unlock>
 8008b36:	bd70      	pop	{r4, r5, r6, pc}
 8008b38:	42a3      	cmp	r3, r4
 8008b3a:	d908      	bls.n	8008b4e <_free_r+0x42>
 8008b3c:	6820      	ldr	r0, [r4, #0]
 8008b3e:	1821      	adds	r1, r4, r0
 8008b40:	428b      	cmp	r3, r1
 8008b42:	d1f3      	bne.n	8008b2c <_free_r+0x20>
 8008b44:	6819      	ldr	r1, [r3, #0]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	1809      	adds	r1, r1, r0
 8008b4a:	6021      	str	r1, [r4, #0]
 8008b4c:	e7ee      	b.n	8008b2c <_free_r+0x20>
 8008b4e:	001a      	movs	r2, r3
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d001      	beq.n	8008b5a <_free_r+0x4e>
 8008b56:	42a3      	cmp	r3, r4
 8008b58:	d9f9      	bls.n	8008b4e <_free_r+0x42>
 8008b5a:	6811      	ldr	r1, [r2, #0]
 8008b5c:	1850      	adds	r0, r2, r1
 8008b5e:	42a0      	cmp	r0, r4
 8008b60:	d10b      	bne.n	8008b7a <_free_r+0x6e>
 8008b62:	6820      	ldr	r0, [r4, #0]
 8008b64:	1809      	adds	r1, r1, r0
 8008b66:	1850      	adds	r0, r2, r1
 8008b68:	6011      	str	r1, [r2, #0]
 8008b6a:	4283      	cmp	r3, r0
 8008b6c:	d1e0      	bne.n	8008b30 <_free_r+0x24>
 8008b6e:	6818      	ldr	r0, [r3, #0]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	1841      	adds	r1, r0, r1
 8008b74:	6011      	str	r1, [r2, #0]
 8008b76:	6053      	str	r3, [r2, #4]
 8008b78:	e7da      	b.n	8008b30 <_free_r+0x24>
 8008b7a:	42a0      	cmp	r0, r4
 8008b7c:	d902      	bls.n	8008b84 <_free_r+0x78>
 8008b7e:	230c      	movs	r3, #12
 8008b80:	602b      	str	r3, [r5, #0]
 8008b82:	e7d5      	b.n	8008b30 <_free_r+0x24>
 8008b84:	6820      	ldr	r0, [r4, #0]
 8008b86:	1821      	adds	r1, r4, r0
 8008b88:	428b      	cmp	r3, r1
 8008b8a:	d103      	bne.n	8008b94 <_free_r+0x88>
 8008b8c:	6819      	ldr	r1, [r3, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	1809      	adds	r1, r1, r0
 8008b92:	6021      	str	r1, [r4, #0]
 8008b94:	6063      	str	r3, [r4, #4]
 8008b96:	6054      	str	r4, [r2, #4]
 8008b98:	e7ca      	b.n	8008b30 <_free_r+0x24>
 8008b9a:	46c0      	nop			@ (mov r8, r8)
 8008b9c:	200009d8 	.word	0x200009d8

08008ba0 <sbrk_aligned>:
 8008ba0:	b570      	push	{r4, r5, r6, lr}
 8008ba2:	4e0f      	ldr	r6, [pc, #60]	@ (8008be0 <sbrk_aligned+0x40>)
 8008ba4:	000d      	movs	r5, r1
 8008ba6:	6831      	ldr	r1, [r6, #0]
 8008ba8:	0004      	movs	r4, r0
 8008baa:	2900      	cmp	r1, #0
 8008bac:	d102      	bne.n	8008bb4 <sbrk_aligned+0x14>
 8008bae:	f000 fb95 	bl	80092dc <_sbrk_r>
 8008bb2:	6030      	str	r0, [r6, #0]
 8008bb4:	0029      	movs	r1, r5
 8008bb6:	0020      	movs	r0, r4
 8008bb8:	f000 fb90 	bl	80092dc <_sbrk_r>
 8008bbc:	1c43      	adds	r3, r0, #1
 8008bbe:	d103      	bne.n	8008bc8 <sbrk_aligned+0x28>
 8008bc0:	2501      	movs	r5, #1
 8008bc2:	426d      	negs	r5, r5
 8008bc4:	0028      	movs	r0, r5
 8008bc6:	bd70      	pop	{r4, r5, r6, pc}
 8008bc8:	2303      	movs	r3, #3
 8008bca:	1cc5      	adds	r5, r0, #3
 8008bcc:	439d      	bics	r5, r3
 8008bce:	42a8      	cmp	r0, r5
 8008bd0:	d0f8      	beq.n	8008bc4 <sbrk_aligned+0x24>
 8008bd2:	1a29      	subs	r1, r5, r0
 8008bd4:	0020      	movs	r0, r4
 8008bd6:	f000 fb81 	bl	80092dc <_sbrk_r>
 8008bda:	3001      	adds	r0, #1
 8008bdc:	d1f2      	bne.n	8008bc4 <sbrk_aligned+0x24>
 8008bde:	e7ef      	b.n	8008bc0 <sbrk_aligned+0x20>
 8008be0:	200009d4 	.word	0x200009d4

08008be4 <_malloc_r>:
 8008be4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008be6:	2203      	movs	r2, #3
 8008be8:	1ccb      	adds	r3, r1, #3
 8008bea:	4393      	bics	r3, r2
 8008bec:	3308      	adds	r3, #8
 8008bee:	0005      	movs	r5, r0
 8008bf0:	001f      	movs	r7, r3
 8008bf2:	2b0c      	cmp	r3, #12
 8008bf4:	d234      	bcs.n	8008c60 <_malloc_r+0x7c>
 8008bf6:	270c      	movs	r7, #12
 8008bf8:	42b9      	cmp	r1, r7
 8008bfa:	d833      	bhi.n	8008c64 <_malloc_r+0x80>
 8008bfc:	0028      	movs	r0, r5
 8008bfe:	f000 f871 	bl	8008ce4 <__malloc_lock>
 8008c02:	4e37      	ldr	r6, [pc, #220]	@ (8008ce0 <_malloc_r+0xfc>)
 8008c04:	6833      	ldr	r3, [r6, #0]
 8008c06:	001c      	movs	r4, r3
 8008c08:	2c00      	cmp	r4, #0
 8008c0a:	d12f      	bne.n	8008c6c <_malloc_r+0x88>
 8008c0c:	0039      	movs	r1, r7
 8008c0e:	0028      	movs	r0, r5
 8008c10:	f7ff ffc6 	bl	8008ba0 <sbrk_aligned>
 8008c14:	0004      	movs	r4, r0
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	d15f      	bne.n	8008cda <_malloc_r+0xf6>
 8008c1a:	6834      	ldr	r4, [r6, #0]
 8008c1c:	9400      	str	r4, [sp, #0]
 8008c1e:	9b00      	ldr	r3, [sp, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d14a      	bne.n	8008cba <_malloc_r+0xd6>
 8008c24:	2c00      	cmp	r4, #0
 8008c26:	d052      	beq.n	8008cce <_malloc_r+0xea>
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	0028      	movs	r0, r5
 8008c2c:	18e3      	adds	r3, r4, r3
 8008c2e:	9900      	ldr	r1, [sp, #0]
 8008c30:	9301      	str	r3, [sp, #4]
 8008c32:	f000 fb53 	bl	80092dc <_sbrk_r>
 8008c36:	9b01      	ldr	r3, [sp, #4]
 8008c38:	4283      	cmp	r3, r0
 8008c3a:	d148      	bne.n	8008cce <_malloc_r+0xea>
 8008c3c:	6823      	ldr	r3, [r4, #0]
 8008c3e:	0028      	movs	r0, r5
 8008c40:	1aff      	subs	r7, r7, r3
 8008c42:	0039      	movs	r1, r7
 8008c44:	f7ff ffac 	bl	8008ba0 <sbrk_aligned>
 8008c48:	3001      	adds	r0, #1
 8008c4a:	d040      	beq.n	8008cce <_malloc_r+0xea>
 8008c4c:	6823      	ldr	r3, [r4, #0]
 8008c4e:	19db      	adds	r3, r3, r7
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	6833      	ldr	r3, [r6, #0]
 8008c54:	685a      	ldr	r2, [r3, #4]
 8008c56:	2a00      	cmp	r2, #0
 8008c58:	d133      	bne.n	8008cc2 <_malloc_r+0xde>
 8008c5a:	9b00      	ldr	r3, [sp, #0]
 8008c5c:	6033      	str	r3, [r6, #0]
 8008c5e:	e019      	b.n	8008c94 <_malloc_r+0xb0>
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	dac9      	bge.n	8008bf8 <_malloc_r+0x14>
 8008c64:	230c      	movs	r3, #12
 8008c66:	602b      	str	r3, [r5, #0]
 8008c68:	2000      	movs	r0, #0
 8008c6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c6c:	6821      	ldr	r1, [r4, #0]
 8008c6e:	1bc9      	subs	r1, r1, r7
 8008c70:	d420      	bmi.n	8008cb4 <_malloc_r+0xd0>
 8008c72:	290b      	cmp	r1, #11
 8008c74:	d90a      	bls.n	8008c8c <_malloc_r+0xa8>
 8008c76:	19e2      	adds	r2, r4, r7
 8008c78:	6027      	str	r7, [r4, #0]
 8008c7a:	42a3      	cmp	r3, r4
 8008c7c:	d104      	bne.n	8008c88 <_malloc_r+0xa4>
 8008c7e:	6032      	str	r2, [r6, #0]
 8008c80:	6863      	ldr	r3, [r4, #4]
 8008c82:	6011      	str	r1, [r2, #0]
 8008c84:	6053      	str	r3, [r2, #4]
 8008c86:	e005      	b.n	8008c94 <_malloc_r+0xb0>
 8008c88:	605a      	str	r2, [r3, #4]
 8008c8a:	e7f9      	b.n	8008c80 <_malloc_r+0x9c>
 8008c8c:	6862      	ldr	r2, [r4, #4]
 8008c8e:	42a3      	cmp	r3, r4
 8008c90:	d10e      	bne.n	8008cb0 <_malloc_r+0xcc>
 8008c92:	6032      	str	r2, [r6, #0]
 8008c94:	0028      	movs	r0, r5
 8008c96:	f000 f82d 	bl	8008cf4 <__malloc_unlock>
 8008c9a:	0020      	movs	r0, r4
 8008c9c:	2207      	movs	r2, #7
 8008c9e:	300b      	adds	r0, #11
 8008ca0:	1d23      	adds	r3, r4, #4
 8008ca2:	4390      	bics	r0, r2
 8008ca4:	1ac2      	subs	r2, r0, r3
 8008ca6:	4298      	cmp	r0, r3
 8008ca8:	d0df      	beq.n	8008c6a <_malloc_r+0x86>
 8008caa:	1a1b      	subs	r3, r3, r0
 8008cac:	50a3      	str	r3, [r4, r2]
 8008cae:	e7dc      	b.n	8008c6a <_malloc_r+0x86>
 8008cb0:	605a      	str	r2, [r3, #4]
 8008cb2:	e7ef      	b.n	8008c94 <_malloc_r+0xb0>
 8008cb4:	0023      	movs	r3, r4
 8008cb6:	6864      	ldr	r4, [r4, #4]
 8008cb8:	e7a6      	b.n	8008c08 <_malloc_r+0x24>
 8008cba:	9c00      	ldr	r4, [sp, #0]
 8008cbc:	6863      	ldr	r3, [r4, #4]
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	e7ad      	b.n	8008c1e <_malloc_r+0x3a>
 8008cc2:	001a      	movs	r2, r3
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	42a3      	cmp	r3, r4
 8008cc8:	d1fb      	bne.n	8008cc2 <_malloc_r+0xde>
 8008cca:	2300      	movs	r3, #0
 8008ccc:	e7da      	b.n	8008c84 <_malloc_r+0xa0>
 8008cce:	230c      	movs	r3, #12
 8008cd0:	0028      	movs	r0, r5
 8008cd2:	602b      	str	r3, [r5, #0]
 8008cd4:	f000 f80e 	bl	8008cf4 <__malloc_unlock>
 8008cd8:	e7c6      	b.n	8008c68 <_malloc_r+0x84>
 8008cda:	6007      	str	r7, [r0, #0]
 8008cdc:	e7da      	b.n	8008c94 <_malloc_r+0xb0>
 8008cde:	46c0      	nop			@ (mov r8, r8)
 8008ce0:	200009d8 	.word	0x200009d8

08008ce4 <__malloc_lock>:
 8008ce4:	b510      	push	{r4, lr}
 8008ce6:	4802      	ldr	r0, [pc, #8]	@ (8008cf0 <__malloc_lock+0xc>)
 8008ce8:	f7ff ff04 	bl	8008af4 <__retarget_lock_acquire_recursive>
 8008cec:	bd10      	pop	{r4, pc}
 8008cee:	46c0      	nop			@ (mov r8, r8)
 8008cf0:	200009d0 	.word	0x200009d0

08008cf4 <__malloc_unlock>:
 8008cf4:	b510      	push	{r4, lr}
 8008cf6:	4802      	ldr	r0, [pc, #8]	@ (8008d00 <__malloc_unlock+0xc>)
 8008cf8:	f7ff fefd 	bl	8008af6 <__retarget_lock_release_recursive>
 8008cfc:	bd10      	pop	{r4, pc}
 8008cfe:	46c0      	nop			@ (mov r8, r8)
 8008d00:	200009d0 	.word	0x200009d0

08008d04 <__ssputs_r>:
 8008d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d06:	688e      	ldr	r6, [r1, #8]
 8008d08:	b085      	sub	sp, #20
 8008d0a:	001f      	movs	r7, r3
 8008d0c:	000c      	movs	r4, r1
 8008d0e:	680b      	ldr	r3, [r1, #0]
 8008d10:	9002      	str	r0, [sp, #8]
 8008d12:	9203      	str	r2, [sp, #12]
 8008d14:	42be      	cmp	r6, r7
 8008d16:	d830      	bhi.n	8008d7a <__ssputs_r+0x76>
 8008d18:	210c      	movs	r1, #12
 8008d1a:	5e62      	ldrsh	r2, [r4, r1]
 8008d1c:	2190      	movs	r1, #144	@ 0x90
 8008d1e:	00c9      	lsls	r1, r1, #3
 8008d20:	420a      	tst	r2, r1
 8008d22:	d028      	beq.n	8008d76 <__ssputs_r+0x72>
 8008d24:	2003      	movs	r0, #3
 8008d26:	6921      	ldr	r1, [r4, #16]
 8008d28:	1a5b      	subs	r3, r3, r1
 8008d2a:	9301      	str	r3, [sp, #4]
 8008d2c:	6963      	ldr	r3, [r4, #20]
 8008d2e:	4343      	muls	r3, r0
 8008d30:	9801      	ldr	r0, [sp, #4]
 8008d32:	0fdd      	lsrs	r5, r3, #31
 8008d34:	18ed      	adds	r5, r5, r3
 8008d36:	1c7b      	adds	r3, r7, #1
 8008d38:	181b      	adds	r3, r3, r0
 8008d3a:	106d      	asrs	r5, r5, #1
 8008d3c:	42ab      	cmp	r3, r5
 8008d3e:	d900      	bls.n	8008d42 <__ssputs_r+0x3e>
 8008d40:	001d      	movs	r5, r3
 8008d42:	0552      	lsls	r2, r2, #21
 8008d44:	d528      	bpl.n	8008d98 <__ssputs_r+0x94>
 8008d46:	0029      	movs	r1, r5
 8008d48:	9802      	ldr	r0, [sp, #8]
 8008d4a:	f7ff ff4b 	bl	8008be4 <_malloc_r>
 8008d4e:	1e06      	subs	r6, r0, #0
 8008d50:	d02c      	beq.n	8008dac <__ssputs_r+0xa8>
 8008d52:	9a01      	ldr	r2, [sp, #4]
 8008d54:	6921      	ldr	r1, [r4, #16]
 8008d56:	f7ff fecf 	bl	8008af8 <memcpy>
 8008d5a:	89a2      	ldrh	r2, [r4, #12]
 8008d5c:	4b18      	ldr	r3, [pc, #96]	@ (8008dc0 <__ssputs_r+0xbc>)
 8008d5e:	401a      	ands	r2, r3
 8008d60:	2380      	movs	r3, #128	@ 0x80
 8008d62:	4313      	orrs	r3, r2
 8008d64:	81a3      	strh	r3, [r4, #12]
 8008d66:	9b01      	ldr	r3, [sp, #4]
 8008d68:	6126      	str	r6, [r4, #16]
 8008d6a:	18f6      	adds	r6, r6, r3
 8008d6c:	6026      	str	r6, [r4, #0]
 8008d6e:	003e      	movs	r6, r7
 8008d70:	6165      	str	r5, [r4, #20]
 8008d72:	1aed      	subs	r5, r5, r3
 8008d74:	60a5      	str	r5, [r4, #8]
 8008d76:	42be      	cmp	r6, r7
 8008d78:	d900      	bls.n	8008d7c <__ssputs_r+0x78>
 8008d7a:	003e      	movs	r6, r7
 8008d7c:	0032      	movs	r2, r6
 8008d7e:	9903      	ldr	r1, [sp, #12]
 8008d80:	6820      	ldr	r0, [r4, #0]
 8008d82:	f000 fa99 	bl	80092b8 <memmove>
 8008d86:	2000      	movs	r0, #0
 8008d88:	68a3      	ldr	r3, [r4, #8]
 8008d8a:	1b9b      	subs	r3, r3, r6
 8008d8c:	60a3      	str	r3, [r4, #8]
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	199b      	adds	r3, r3, r6
 8008d92:	6023      	str	r3, [r4, #0]
 8008d94:	b005      	add	sp, #20
 8008d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d98:	002a      	movs	r2, r5
 8008d9a:	9802      	ldr	r0, [sp, #8]
 8008d9c:	f000 fabb 	bl	8009316 <_realloc_r>
 8008da0:	1e06      	subs	r6, r0, #0
 8008da2:	d1e0      	bne.n	8008d66 <__ssputs_r+0x62>
 8008da4:	6921      	ldr	r1, [r4, #16]
 8008da6:	9802      	ldr	r0, [sp, #8]
 8008da8:	f7ff feb0 	bl	8008b0c <_free_r>
 8008dac:	230c      	movs	r3, #12
 8008dae:	2001      	movs	r0, #1
 8008db0:	9a02      	ldr	r2, [sp, #8]
 8008db2:	4240      	negs	r0, r0
 8008db4:	6013      	str	r3, [r2, #0]
 8008db6:	89a2      	ldrh	r2, [r4, #12]
 8008db8:	3334      	adds	r3, #52	@ 0x34
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	81a3      	strh	r3, [r4, #12]
 8008dbe:	e7e9      	b.n	8008d94 <__ssputs_r+0x90>
 8008dc0:	fffffb7f 	.word	0xfffffb7f

08008dc4 <_svfiprintf_r>:
 8008dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dc6:	b0a1      	sub	sp, #132	@ 0x84
 8008dc8:	9003      	str	r0, [sp, #12]
 8008dca:	001d      	movs	r5, r3
 8008dcc:	898b      	ldrh	r3, [r1, #12]
 8008dce:	000f      	movs	r7, r1
 8008dd0:	0016      	movs	r6, r2
 8008dd2:	061b      	lsls	r3, r3, #24
 8008dd4:	d511      	bpl.n	8008dfa <_svfiprintf_r+0x36>
 8008dd6:	690b      	ldr	r3, [r1, #16]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10e      	bne.n	8008dfa <_svfiprintf_r+0x36>
 8008ddc:	2140      	movs	r1, #64	@ 0x40
 8008dde:	f7ff ff01 	bl	8008be4 <_malloc_r>
 8008de2:	6038      	str	r0, [r7, #0]
 8008de4:	6138      	str	r0, [r7, #16]
 8008de6:	2800      	cmp	r0, #0
 8008de8:	d105      	bne.n	8008df6 <_svfiprintf_r+0x32>
 8008dea:	230c      	movs	r3, #12
 8008dec:	9a03      	ldr	r2, [sp, #12]
 8008dee:	6013      	str	r3, [r2, #0]
 8008df0:	2001      	movs	r0, #1
 8008df2:	4240      	negs	r0, r0
 8008df4:	e0cf      	b.n	8008f96 <_svfiprintf_r+0x1d2>
 8008df6:	2340      	movs	r3, #64	@ 0x40
 8008df8:	617b      	str	r3, [r7, #20]
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	ac08      	add	r4, sp, #32
 8008dfe:	6163      	str	r3, [r4, #20]
 8008e00:	3320      	adds	r3, #32
 8008e02:	7663      	strb	r3, [r4, #25]
 8008e04:	3310      	adds	r3, #16
 8008e06:	76a3      	strb	r3, [r4, #26]
 8008e08:	9507      	str	r5, [sp, #28]
 8008e0a:	0035      	movs	r5, r6
 8008e0c:	782b      	ldrb	r3, [r5, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d001      	beq.n	8008e16 <_svfiprintf_r+0x52>
 8008e12:	2b25      	cmp	r3, #37	@ 0x25
 8008e14:	d148      	bne.n	8008ea8 <_svfiprintf_r+0xe4>
 8008e16:	1bab      	subs	r3, r5, r6
 8008e18:	9305      	str	r3, [sp, #20]
 8008e1a:	42b5      	cmp	r5, r6
 8008e1c:	d00b      	beq.n	8008e36 <_svfiprintf_r+0x72>
 8008e1e:	0032      	movs	r2, r6
 8008e20:	0039      	movs	r1, r7
 8008e22:	9803      	ldr	r0, [sp, #12]
 8008e24:	f7ff ff6e 	bl	8008d04 <__ssputs_r>
 8008e28:	3001      	adds	r0, #1
 8008e2a:	d100      	bne.n	8008e2e <_svfiprintf_r+0x6a>
 8008e2c:	e0ae      	b.n	8008f8c <_svfiprintf_r+0x1c8>
 8008e2e:	6963      	ldr	r3, [r4, #20]
 8008e30:	9a05      	ldr	r2, [sp, #20]
 8008e32:	189b      	adds	r3, r3, r2
 8008e34:	6163      	str	r3, [r4, #20]
 8008e36:	782b      	ldrb	r3, [r5, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d100      	bne.n	8008e3e <_svfiprintf_r+0x7a>
 8008e3c:	e0a6      	b.n	8008f8c <_svfiprintf_r+0x1c8>
 8008e3e:	2201      	movs	r2, #1
 8008e40:	2300      	movs	r3, #0
 8008e42:	4252      	negs	r2, r2
 8008e44:	6062      	str	r2, [r4, #4]
 8008e46:	a904      	add	r1, sp, #16
 8008e48:	3254      	adds	r2, #84	@ 0x54
 8008e4a:	1852      	adds	r2, r2, r1
 8008e4c:	1c6e      	adds	r6, r5, #1
 8008e4e:	6023      	str	r3, [r4, #0]
 8008e50:	60e3      	str	r3, [r4, #12]
 8008e52:	60a3      	str	r3, [r4, #8]
 8008e54:	7013      	strb	r3, [r2, #0]
 8008e56:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008e58:	4b54      	ldr	r3, [pc, #336]	@ (8008fac <_svfiprintf_r+0x1e8>)
 8008e5a:	2205      	movs	r2, #5
 8008e5c:	0018      	movs	r0, r3
 8008e5e:	7831      	ldrb	r1, [r6, #0]
 8008e60:	9305      	str	r3, [sp, #20]
 8008e62:	f000 fa4d 	bl	8009300 <memchr>
 8008e66:	1c75      	adds	r5, r6, #1
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	d11f      	bne.n	8008eac <_svfiprintf_r+0xe8>
 8008e6c:	6822      	ldr	r2, [r4, #0]
 8008e6e:	06d3      	lsls	r3, r2, #27
 8008e70:	d504      	bpl.n	8008e7c <_svfiprintf_r+0xb8>
 8008e72:	2353      	movs	r3, #83	@ 0x53
 8008e74:	a904      	add	r1, sp, #16
 8008e76:	185b      	adds	r3, r3, r1
 8008e78:	2120      	movs	r1, #32
 8008e7a:	7019      	strb	r1, [r3, #0]
 8008e7c:	0713      	lsls	r3, r2, #28
 8008e7e:	d504      	bpl.n	8008e8a <_svfiprintf_r+0xc6>
 8008e80:	2353      	movs	r3, #83	@ 0x53
 8008e82:	a904      	add	r1, sp, #16
 8008e84:	185b      	adds	r3, r3, r1
 8008e86:	212b      	movs	r1, #43	@ 0x2b
 8008e88:	7019      	strb	r1, [r3, #0]
 8008e8a:	7833      	ldrb	r3, [r6, #0]
 8008e8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e8e:	d016      	beq.n	8008ebe <_svfiprintf_r+0xfa>
 8008e90:	0035      	movs	r5, r6
 8008e92:	2100      	movs	r1, #0
 8008e94:	200a      	movs	r0, #10
 8008e96:	68e3      	ldr	r3, [r4, #12]
 8008e98:	782a      	ldrb	r2, [r5, #0]
 8008e9a:	1c6e      	adds	r6, r5, #1
 8008e9c:	3a30      	subs	r2, #48	@ 0x30
 8008e9e:	2a09      	cmp	r2, #9
 8008ea0:	d950      	bls.n	8008f44 <_svfiprintf_r+0x180>
 8008ea2:	2900      	cmp	r1, #0
 8008ea4:	d111      	bne.n	8008eca <_svfiprintf_r+0x106>
 8008ea6:	e017      	b.n	8008ed8 <_svfiprintf_r+0x114>
 8008ea8:	3501      	adds	r5, #1
 8008eaa:	e7af      	b.n	8008e0c <_svfiprintf_r+0x48>
 8008eac:	9b05      	ldr	r3, [sp, #20]
 8008eae:	6822      	ldr	r2, [r4, #0]
 8008eb0:	1ac0      	subs	r0, r0, r3
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	4083      	lsls	r3, r0
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	002e      	movs	r6, r5
 8008eba:	6023      	str	r3, [r4, #0]
 8008ebc:	e7cc      	b.n	8008e58 <_svfiprintf_r+0x94>
 8008ebe:	9b07      	ldr	r3, [sp, #28]
 8008ec0:	1d19      	adds	r1, r3, #4
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	9107      	str	r1, [sp, #28]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	db01      	blt.n	8008ece <_svfiprintf_r+0x10a>
 8008eca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ecc:	e004      	b.n	8008ed8 <_svfiprintf_r+0x114>
 8008ece:	425b      	negs	r3, r3
 8008ed0:	60e3      	str	r3, [r4, #12]
 8008ed2:	2302      	movs	r3, #2
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	6023      	str	r3, [r4, #0]
 8008ed8:	782b      	ldrb	r3, [r5, #0]
 8008eda:	2b2e      	cmp	r3, #46	@ 0x2e
 8008edc:	d10c      	bne.n	8008ef8 <_svfiprintf_r+0x134>
 8008ede:	786b      	ldrb	r3, [r5, #1]
 8008ee0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ee2:	d134      	bne.n	8008f4e <_svfiprintf_r+0x18a>
 8008ee4:	9b07      	ldr	r3, [sp, #28]
 8008ee6:	3502      	adds	r5, #2
 8008ee8:	1d1a      	adds	r2, r3, #4
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	9207      	str	r2, [sp, #28]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	da01      	bge.n	8008ef6 <_svfiprintf_r+0x132>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	425b      	negs	r3, r3
 8008ef6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ef8:	4e2d      	ldr	r6, [pc, #180]	@ (8008fb0 <_svfiprintf_r+0x1ec>)
 8008efa:	2203      	movs	r2, #3
 8008efc:	0030      	movs	r0, r6
 8008efe:	7829      	ldrb	r1, [r5, #0]
 8008f00:	f000 f9fe 	bl	8009300 <memchr>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	d006      	beq.n	8008f16 <_svfiprintf_r+0x152>
 8008f08:	2340      	movs	r3, #64	@ 0x40
 8008f0a:	1b80      	subs	r0, r0, r6
 8008f0c:	4083      	lsls	r3, r0
 8008f0e:	6822      	ldr	r2, [r4, #0]
 8008f10:	3501      	adds	r5, #1
 8008f12:	4313      	orrs	r3, r2
 8008f14:	6023      	str	r3, [r4, #0]
 8008f16:	7829      	ldrb	r1, [r5, #0]
 8008f18:	2206      	movs	r2, #6
 8008f1a:	4826      	ldr	r0, [pc, #152]	@ (8008fb4 <_svfiprintf_r+0x1f0>)
 8008f1c:	1c6e      	adds	r6, r5, #1
 8008f1e:	7621      	strb	r1, [r4, #24]
 8008f20:	f000 f9ee 	bl	8009300 <memchr>
 8008f24:	2800      	cmp	r0, #0
 8008f26:	d038      	beq.n	8008f9a <_svfiprintf_r+0x1d6>
 8008f28:	4b23      	ldr	r3, [pc, #140]	@ (8008fb8 <_svfiprintf_r+0x1f4>)
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d122      	bne.n	8008f74 <_svfiprintf_r+0x1b0>
 8008f2e:	2207      	movs	r2, #7
 8008f30:	9b07      	ldr	r3, [sp, #28]
 8008f32:	3307      	adds	r3, #7
 8008f34:	4393      	bics	r3, r2
 8008f36:	3308      	adds	r3, #8
 8008f38:	9307      	str	r3, [sp, #28]
 8008f3a:	6963      	ldr	r3, [r4, #20]
 8008f3c:	9a04      	ldr	r2, [sp, #16]
 8008f3e:	189b      	adds	r3, r3, r2
 8008f40:	6163      	str	r3, [r4, #20]
 8008f42:	e762      	b.n	8008e0a <_svfiprintf_r+0x46>
 8008f44:	4343      	muls	r3, r0
 8008f46:	0035      	movs	r5, r6
 8008f48:	2101      	movs	r1, #1
 8008f4a:	189b      	adds	r3, r3, r2
 8008f4c:	e7a4      	b.n	8008e98 <_svfiprintf_r+0xd4>
 8008f4e:	2300      	movs	r3, #0
 8008f50:	200a      	movs	r0, #10
 8008f52:	0019      	movs	r1, r3
 8008f54:	3501      	adds	r5, #1
 8008f56:	6063      	str	r3, [r4, #4]
 8008f58:	782a      	ldrb	r2, [r5, #0]
 8008f5a:	1c6e      	adds	r6, r5, #1
 8008f5c:	3a30      	subs	r2, #48	@ 0x30
 8008f5e:	2a09      	cmp	r2, #9
 8008f60:	d903      	bls.n	8008f6a <_svfiprintf_r+0x1a6>
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d0c8      	beq.n	8008ef8 <_svfiprintf_r+0x134>
 8008f66:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f68:	e7c6      	b.n	8008ef8 <_svfiprintf_r+0x134>
 8008f6a:	4341      	muls	r1, r0
 8008f6c:	0035      	movs	r5, r6
 8008f6e:	2301      	movs	r3, #1
 8008f70:	1889      	adds	r1, r1, r2
 8008f72:	e7f1      	b.n	8008f58 <_svfiprintf_r+0x194>
 8008f74:	aa07      	add	r2, sp, #28
 8008f76:	9200      	str	r2, [sp, #0]
 8008f78:	0021      	movs	r1, r4
 8008f7a:	003a      	movs	r2, r7
 8008f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8008fbc <_svfiprintf_r+0x1f8>)
 8008f7e:	9803      	ldr	r0, [sp, #12]
 8008f80:	e000      	b.n	8008f84 <_svfiprintf_r+0x1c0>
 8008f82:	bf00      	nop
 8008f84:	9004      	str	r0, [sp, #16]
 8008f86:	9b04      	ldr	r3, [sp, #16]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	d1d6      	bne.n	8008f3a <_svfiprintf_r+0x176>
 8008f8c:	89bb      	ldrh	r3, [r7, #12]
 8008f8e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008f90:	065b      	lsls	r3, r3, #25
 8008f92:	d500      	bpl.n	8008f96 <_svfiprintf_r+0x1d2>
 8008f94:	e72c      	b.n	8008df0 <_svfiprintf_r+0x2c>
 8008f96:	b021      	add	sp, #132	@ 0x84
 8008f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f9a:	aa07      	add	r2, sp, #28
 8008f9c:	9200      	str	r2, [sp, #0]
 8008f9e:	0021      	movs	r1, r4
 8008fa0:	003a      	movs	r2, r7
 8008fa2:	4b06      	ldr	r3, [pc, #24]	@ (8008fbc <_svfiprintf_r+0x1f8>)
 8008fa4:	9803      	ldr	r0, [sp, #12]
 8008fa6:	f000 f87b 	bl	80090a0 <_printf_i>
 8008faa:	e7eb      	b.n	8008f84 <_svfiprintf_r+0x1c0>
 8008fac:	08009cdd 	.word	0x08009cdd
 8008fb0:	08009ce3 	.word	0x08009ce3
 8008fb4:	08009ce7 	.word	0x08009ce7
 8008fb8:	00000000 	.word	0x00000000
 8008fbc:	08008d05 	.word	0x08008d05

08008fc0 <_printf_common>:
 8008fc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fc2:	0016      	movs	r6, r2
 8008fc4:	9301      	str	r3, [sp, #4]
 8008fc6:	688a      	ldr	r2, [r1, #8]
 8008fc8:	690b      	ldr	r3, [r1, #16]
 8008fca:	000c      	movs	r4, r1
 8008fcc:	9000      	str	r0, [sp, #0]
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	da00      	bge.n	8008fd4 <_printf_common+0x14>
 8008fd2:	0013      	movs	r3, r2
 8008fd4:	0022      	movs	r2, r4
 8008fd6:	6033      	str	r3, [r6, #0]
 8008fd8:	3243      	adds	r2, #67	@ 0x43
 8008fda:	7812      	ldrb	r2, [r2, #0]
 8008fdc:	2a00      	cmp	r2, #0
 8008fde:	d001      	beq.n	8008fe4 <_printf_common+0x24>
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	6033      	str	r3, [r6, #0]
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	069b      	lsls	r3, r3, #26
 8008fe8:	d502      	bpl.n	8008ff0 <_printf_common+0x30>
 8008fea:	6833      	ldr	r3, [r6, #0]
 8008fec:	3302      	adds	r3, #2
 8008fee:	6033      	str	r3, [r6, #0]
 8008ff0:	6822      	ldr	r2, [r4, #0]
 8008ff2:	2306      	movs	r3, #6
 8008ff4:	0015      	movs	r5, r2
 8008ff6:	401d      	ands	r5, r3
 8008ff8:	421a      	tst	r2, r3
 8008ffa:	d027      	beq.n	800904c <_printf_common+0x8c>
 8008ffc:	0023      	movs	r3, r4
 8008ffe:	3343      	adds	r3, #67	@ 0x43
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	1e5a      	subs	r2, r3, #1
 8009004:	4193      	sbcs	r3, r2
 8009006:	6822      	ldr	r2, [r4, #0]
 8009008:	0692      	lsls	r2, r2, #26
 800900a:	d430      	bmi.n	800906e <_printf_common+0xae>
 800900c:	0022      	movs	r2, r4
 800900e:	9901      	ldr	r1, [sp, #4]
 8009010:	9800      	ldr	r0, [sp, #0]
 8009012:	9d08      	ldr	r5, [sp, #32]
 8009014:	3243      	adds	r2, #67	@ 0x43
 8009016:	47a8      	blx	r5
 8009018:	3001      	adds	r0, #1
 800901a:	d025      	beq.n	8009068 <_printf_common+0xa8>
 800901c:	2206      	movs	r2, #6
 800901e:	6823      	ldr	r3, [r4, #0]
 8009020:	2500      	movs	r5, #0
 8009022:	4013      	ands	r3, r2
 8009024:	2b04      	cmp	r3, #4
 8009026:	d105      	bne.n	8009034 <_printf_common+0x74>
 8009028:	6833      	ldr	r3, [r6, #0]
 800902a:	68e5      	ldr	r5, [r4, #12]
 800902c:	1aed      	subs	r5, r5, r3
 800902e:	43eb      	mvns	r3, r5
 8009030:	17db      	asrs	r3, r3, #31
 8009032:	401d      	ands	r5, r3
 8009034:	68a3      	ldr	r3, [r4, #8]
 8009036:	6922      	ldr	r2, [r4, #16]
 8009038:	4293      	cmp	r3, r2
 800903a:	dd01      	ble.n	8009040 <_printf_common+0x80>
 800903c:	1a9b      	subs	r3, r3, r2
 800903e:	18ed      	adds	r5, r5, r3
 8009040:	2600      	movs	r6, #0
 8009042:	42b5      	cmp	r5, r6
 8009044:	d120      	bne.n	8009088 <_printf_common+0xc8>
 8009046:	2000      	movs	r0, #0
 8009048:	e010      	b.n	800906c <_printf_common+0xac>
 800904a:	3501      	adds	r5, #1
 800904c:	68e3      	ldr	r3, [r4, #12]
 800904e:	6832      	ldr	r2, [r6, #0]
 8009050:	1a9b      	subs	r3, r3, r2
 8009052:	42ab      	cmp	r3, r5
 8009054:	ddd2      	ble.n	8008ffc <_printf_common+0x3c>
 8009056:	0022      	movs	r2, r4
 8009058:	2301      	movs	r3, #1
 800905a:	9901      	ldr	r1, [sp, #4]
 800905c:	9800      	ldr	r0, [sp, #0]
 800905e:	9f08      	ldr	r7, [sp, #32]
 8009060:	3219      	adds	r2, #25
 8009062:	47b8      	blx	r7
 8009064:	3001      	adds	r0, #1
 8009066:	d1f0      	bne.n	800904a <_printf_common+0x8a>
 8009068:	2001      	movs	r0, #1
 800906a:	4240      	negs	r0, r0
 800906c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800906e:	2030      	movs	r0, #48	@ 0x30
 8009070:	18e1      	adds	r1, r4, r3
 8009072:	3143      	adds	r1, #67	@ 0x43
 8009074:	7008      	strb	r0, [r1, #0]
 8009076:	0021      	movs	r1, r4
 8009078:	1c5a      	adds	r2, r3, #1
 800907a:	3145      	adds	r1, #69	@ 0x45
 800907c:	7809      	ldrb	r1, [r1, #0]
 800907e:	18a2      	adds	r2, r4, r2
 8009080:	3243      	adds	r2, #67	@ 0x43
 8009082:	3302      	adds	r3, #2
 8009084:	7011      	strb	r1, [r2, #0]
 8009086:	e7c1      	b.n	800900c <_printf_common+0x4c>
 8009088:	0022      	movs	r2, r4
 800908a:	2301      	movs	r3, #1
 800908c:	9901      	ldr	r1, [sp, #4]
 800908e:	9800      	ldr	r0, [sp, #0]
 8009090:	9f08      	ldr	r7, [sp, #32]
 8009092:	321a      	adds	r2, #26
 8009094:	47b8      	blx	r7
 8009096:	3001      	adds	r0, #1
 8009098:	d0e6      	beq.n	8009068 <_printf_common+0xa8>
 800909a:	3601      	adds	r6, #1
 800909c:	e7d1      	b.n	8009042 <_printf_common+0x82>
	...

080090a0 <_printf_i>:
 80090a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090a2:	b08b      	sub	sp, #44	@ 0x2c
 80090a4:	9206      	str	r2, [sp, #24]
 80090a6:	000a      	movs	r2, r1
 80090a8:	3243      	adds	r2, #67	@ 0x43
 80090aa:	9307      	str	r3, [sp, #28]
 80090ac:	9005      	str	r0, [sp, #20]
 80090ae:	9203      	str	r2, [sp, #12]
 80090b0:	7e0a      	ldrb	r2, [r1, #24]
 80090b2:	000c      	movs	r4, r1
 80090b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80090b6:	2a78      	cmp	r2, #120	@ 0x78
 80090b8:	d809      	bhi.n	80090ce <_printf_i+0x2e>
 80090ba:	2a62      	cmp	r2, #98	@ 0x62
 80090bc:	d80b      	bhi.n	80090d6 <_printf_i+0x36>
 80090be:	2a00      	cmp	r2, #0
 80090c0:	d100      	bne.n	80090c4 <_printf_i+0x24>
 80090c2:	e0ba      	b.n	800923a <_printf_i+0x19a>
 80090c4:	497a      	ldr	r1, [pc, #488]	@ (80092b0 <_printf_i+0x210>)
 80090c6:	9104      	str	r1, [sp, #16]
 80090c8:	2a58      	cmp	r2, #88	@ 0x58
 80090ca:	d100      	bne.n	80090ce <_printf_i+0x2e>
 80090cc:	e08e      	b.n	80091ec <_printf_i+0x14c>
 80090ce:	0025      	movs	r5, r4
 80090d0:	3542      	adds	r5, #66	@ 0x42
 80090d2:	702a      	strb	r2, [r5, #0]
 80090d4:	e022      	b.n	800911c <_printf_i+0x7c>
 80090d6:	0010      	movs	r0, r2
 80090d8:	3863      	subs	r0, #99	@ 0x63
 80090da:	2815      	cmp	r0, #21
 80090dc:	d8f7      	bhi.n	80090ce <_printf_i+0x2e>
 80090de:	f7f7 f81b 	bl	8000118 <__gnu_thumb1_case_shi>
 80090e2:	0016      	.short	0x0016
 80090e4:	fff6001f 	.word	0xfff6001f
 80090e8:	fff6fff6 	.word	0xfff6fff6
 80090ec:	001ffff6 	.word	0x001ffff6
 80090f0:	fff6fff6 	.word	0xfff6fff6
 80090f4:	fff6fff6 	.word	0xfff6fff6
 80090f8:	0036009f 	.word	0x0036009f
 80090fc:	fff6007e 	.word	0xfff6007e
 8009100:	00b0fff6 	.word	0x00b0fff6
 8009104:	0036fff6 	.word	0x0036fff6
 8009108:	fff6fff6 	.word	0xfff6fff6
 800910c:	0082      	.short	0x0082
 800910e:	0025      	movs	r5, r4
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	3542      	adds	r5, #66	@ 0x42
 8009114:	1d11      	adds	r1, r2, #4
 8009116:	6019      	str	r1, [r3, #0]
 8009118:	6813      	ldr	r3, [r2, #0]
 800911a:	702b      	strb	r3, [r5, #0]
 800911c:	2301      	movs	r3, #1
 800911e:	e09e      	b.n	800925e <_printf_i+0x1be>
 8009120:	6818      	ldr	r0, [r3, #0]
 8009122:	6809      	ldr	r1, [r1, #0]
 8009124:	1d02      	adds	r2, r0, #4
 8009126:	060d      	lsls	r5, r1, #24
 8009128:	d50b      	bpl.n	8009142 <_printf_i+0xa2>
 800912a:	6806      	ldr	r6, [r0, #0]
 800912c:	601a      	str	r2, [r3, #0]
 800912e:	2e00      	cmp	r6, #0
 8009130:	da03      	bge.n	800913a <_printf_i+0x9a>
 8009132:	232d      	movs	r3, #45	@ 0x2d
 8009134:	9a03      	ldr	r2, [sp, #12]
 8009136:	4276      	negs	r6, r6
 8009138:	7013      	strb	r3, [r2, #0]
 800913a:	4b5d      	ldr	r3, [pc, #372]	@ (80092b0 <_printf_i+0x210>)
 800913c:	270a      	movs	r7, #10
 800913e:	9304      	str	r3, [sp, #16]
 8009140:	e018      	b.n	8009174 <_printf_i+0xd4>
 8009142:	6806      	ldr	r6, [r0, #0]
 8009144:	601a      	str	r2, [r3, #0]
 8009146:	0649      	lsls	r1, r1, #25
 8009148:	d5f1      	bpl.n	800912e <_printf_i+0x8e>
 800914a:	b236      	sxth	r6, r6
 800914c:	e7ef      	b.n	800912e <_printf_i+0x8e>
 800914e:	6808      	ldr	r0, [r1, #0]
 8009150:	6819      	ldr	r1, [r3, #0]
 8009152:	c940      	ldmia	r1!, {r6}
 8009154:	0605      	lsls	r5, r0, #24
 8009156:	d402      	bmi.n	800915e <_printf_i+0xbe>
 8009158:	0640      	lsls	r0, r0, #25
 800915a:	d500      	bpl.n	800915e <_printf_i+0xbe>
 800915c:	b2b6      	uxth	r6, r6
 800915e:	6019      	str	r1, [r3, #0]
 8009160:	4b53      	ldr	r3, [pc, #332]	@ (80092b0 <_printf_i+0x210>)
 8009162:	270a      	movs	r7, #10
 8009164:	9304      	str	r3, [sp, #16]
 8009166:	2a6f      	cmp	r2, #111	@ 0x6f
 8009168:	d100      	bne.n	800916c <_printf_i+0xcc>
 800916a:	3f02      	subs	r7, #2
 800916c:	0023      	movs	r3, r4
 800916e:	2200      	movs	r2, #0
 8009170:	3343      	adds	r3, #67	@ 0x43
 8009172:	701a      	strb	r2, [r3, #0]
 8009174:	6863      	ldr	r3, [r4, #4]
 8009176:	60a3      	str	r3, [r4, #8]
 8009178:	2b00      	cmp	r3, #0
 800917a:	db06      	blt.n	800918a <_printf_i+0xea>
 800917c:	2104      	movs	r1, #4
 800917e:	6822      	ldr	r2, [r4, #0]
 8009180:	9d03      	ldr	r5, [sp, #12]
 8009182:	438a      	bics	r2, r1
 8009184:	6022      	str	r2, [r4, #0]
 8009186:	4333      	orrs	r3, r6
 8009188:	d00c      	beq.n	80091a4 <_printf_i+0x104>
 800918a:	9d03      	ldr	r5, [sp, #12]
 800918c:	0030      	movs	r0, r6
 800918e:	0039      	movs	r1, r7
 8009190:	f7f7 f852 	bl	8000238 <__aeabi_uidivmod>
 8009194:	9b04      	ldr	r3, [sp, #16]
 8009196:	3d01      	subs	r5, #1
 8009198:	5c5b      	ldrb	r3, [r3, r1]
 800919a:	702b      	strb	r3, [r5, #0]
 800919c:	0033      	movs	r3, r6
 800919e:	0006      	movs	r6, r0
 80091a0:	429f      	cmp	r7, r3
 80091a2:	d9f3      	bls.n	800918c <_printf_i+0xec>
 80091a4:	2f08      	cmp	r7, #8
 80091a6:	d109      	bne.n	80091bc <_printf_i+0x11c>
 80091a8:	6823      	ldr	r3, [r4, #0]
 80091aa:	07db      	lsls	r3, r3, #31
 80091ac:	d506      	bpl.n	80091bc <_printf_i+0x11c>
 80091ae:	6862      	ldr	r2, [r4, #4]
 80091b0:	6923      	ldr	r3, [r4, #16]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	dc02      	bgt.n	80091bc <_printf_i+0x11c>
 80091b6:	2330      	movs	r3, #48	@ 0x30
 80091b8:	3d01      	subs	r5, #1
 80091ba:	702b      	strb	r3, [r5, #0]
 80091bc:	9b03      	ldr	r3, [sp, #12]
 80091be:	1b5b      	subs	r3, r3, r5
 80091c0:	6123      	str	r3, [r4, #16]
 80091c2:	9b07      	ldr	r3, [sp, #28]
 80091c4:	0021      	movs	r1, r4
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	9805      	ldr	r0, [sp, #20]
 80091ca:	9b06      	ldr	r3, [sp, #24]
 80091cc:	aa09      	add	r2, sp, #36	@ 0x24
 80091ce:	f7ff fef7 	bl	8008fc0 <_printf_common>
 80091d2:	3001      	adds	r0, #1
 80091d4:	d148      	bne.n	8009268 <_printf_i+0x1c8>
 80091d6:	2001      	movs	r0, #1
 80091d8:	4240      	negs	r0, r0
 80091da:	b00b      	add	sp, #44	@ 0x2c
 80091dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091de:	2220      	movs	r2, #32
 80091e0:	6809      	ldr	r1, [r1, #0]
 80091e2:	430a      	orrs	r2, r1
 80091e4:	6022      	str	r2, [r4, #0]
 80091e6:	2278      	movs	r2, #120	@ 0x78
 80091e8:	4932      	ldr	r1, [pc, #200]	@ (80092b4 <_printf_i+0x214>)
 80091ea:	9104      	str	r1, [sp, #16]
 80091ec:	0021      	movs	r1, r4
 80091ee:	3145      	adds	r1, #69	@ 0x45
 80091f0:	700a      	strb	r2, [r1, #0]
 80091f2:	6819      	ldr	r1, [r3, #0]
 80091f4:	6822      	ldr	r2, [r4, #0]
 80091f6:	c940      	ldmia	r1!, {r6}
 80091f8:	0610      	lsls	r0, r2, #24
 80091fa:	d402      	bmi.n	8009202 <_printf_i+0x162>
 80091fc:	0650      	lsls	r0, r2, #25
 80091fe:	d500      	bpl.n	8009202 <_printf_i+0x162>
 8009200:	b2b6      	uxth	r6, r6
 8009202:	6019      	str	r1, [r3, #0]
 8009204:	07d3      	lsls	r3, r2, #31
 8009206:	d502      	bpl.n	800920e <_printf_i+0x16e>
 8009208:	2320      	movs	r3, #32
 800920a:	4313      	orrs	r3, r2
 800920c:	6023      	str	r3, [r4, #0]
 800920e:	2e00      	cmp	r6, #0
 8009210:	d001      	beq.n	8009216 <_printf_i+0x176>
 8009212:	2710      	movs	r7, #16
 8009214:	e7aa      	b.n	800916c <_printf_i+0xcc>
 8009216:	2220      	movs	r2, #32
 8009218:	6823      	ldr	r3, [r4, #0]
 800921a:	4393      	bics	r3, r2
 800921c:	6023      	str	r3, [r4, #0]
 800921e:	e7f8      	b.n	8009212 <_printf_i+0x172>
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	680d      	ldr	r5, [r1, #0]
 8009224:	1d10      	adds	r0, r2, #4
 8009226:	6949      	ldr	r1, [r1, #20]
 8009228:	6018      	str	r0, [r3, #0]
 800922a:	6813      	ldr	r3, [r2, #0]
 800922c:	062e      	lsls	r6, r5, #24
 800922e:	d501      	bpl.n	8009234 <_printf_i+0x194>
 8009230:	6019      	str	r1, [r3, #0]
 8009232:	e002      	b.n	800923a <_printf_i+0x19a>
 8009234:	066d      	lsls	r5, r5, #25
 8009236:	d5fb      	bpl.n	8009230 <_printf_i+0x190>
 8009238:	8019      	strh	r1, [r3, #0]
 800923a:	2300      	movs	r3, #0
 800923c:	9d03      	ldr	r5, [sp, #12]
 800923e:	6123      	str	r3, [r4, #16]
 8009240:	e7bf      	b.n	80091c2 <_printf_i+0x122>
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	1d11      	adds	r1, r2, #4
 8009246:	6019      	str	r1, [r3, #0]
 8009248:	6815      	ldr	r5, [r2, #0]
 800924a:	2100      	movs	r1, #0
 800924c:	0028      	movs	r0, r5
 800924e:	6862      	ldr	r2, [r4, #4]
 8009250:	f000 f856 	bl	8009300 <memchr>
 8009254:	2800      	cmp	r0, #0
 8009256:	d001      	beq.n	800925c <_printf_i+0x1bc>
 8009258:	1b40      	subs	r0, r0, r5
 800925a:	6060      	str	r0, [r4, #4]
 800925c:	6863      	ldr	r3, [r4, #4]
 800925e:	6123      	str	r3, [r4, #16]
 8009260:	2300      	movs	r3, #0
 8009262:	9a03      	ldr	r2, [sp, #12]
 8009264:	7013      	strb	r3, [r2, #0]
 8009266:	e7ac      	b.n	80091c2 <_printf_i+0x122>
 8009268:	002a      	movs	r2, r5
 800926a:	6923      	ldr	r3, [r4, #16]
 800926c:	9906      	ldr	r1, [sp, #24]
 800926e:	9805      	ldr	r0, [sp, #20]
 8009270:	9d07      	ldr	r5, [sp, #28]
 8009272:	47a8      	blx	r5
 8009274:	3001      	adds	r0, #1
 8009276:	d0ae      	beq.n	80091d6 <_printf_i+0x136>
 8009278:	6823      	ldr	r3, [r4, #0]
 800927a:	079b      	lsls	r3, r3, #30
 800927c:	d415      	bmi.n	80092aa <_printf_i+0x20a>
 800927e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009280:	68e0      	ldr	r0, [r4, #12]
 8009282:	4298      	cmp	r0, r3
 8009284:	daa9      	bge.n	80091da <_printf_i+0x13a>
 8009286:	0018      	movs	r0, r3
 8009288:	e7a7      	b.n	80091da <_printf_i+0x13a>
 800928a:	0022      	movs	r2, r4
 800928c:	2301      	movs	r3, #1
 800928e:	9906      	ldr	r1, [sp, #24]
 8009290:	9805      	ldr	r0, [sp, #20]
 8009292:	9e07      	ldr	r6, [sp, #28]
 8009294:	3219      	adds	r2, #25
 8009296:	47b0      	blx	r6
 8009298:	3001      	adds	r0, #1
 800929a:	d09c      	beq.n	80091d6 <_printf_i+0x136>
 800929c:	3501      	adds	r5, #1
 800929e:	68e3      	ldr	r3, [r4, #12]
 80092a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092a2:	1a9b      	subs	r3, r3, r2
 80092a4:	42ab      	cmp	r3, r5
 80092a6:	dcf0      	bgt.n	800928a <_printf_i+0x1ea>
 80092a8:	e7e9      	b.n	800927e <_printf_i+0x1de>
 80092aa:	2500      	movs	r5, #0
 80092ac:	e7f7      	b.n	800929e <_printf_i+0x1fe>
 80092ae:	46c0      	nop			@ (mov r8, r8)
 80092b0:	08009cee 	.word	0x08009cee
 80092b4:	08009cff 	.word	0x08009cff

080092b8 <memmove>:
 80092b8:	b510      	push	{r4, lr}
 80092ba:	4288      	cmp	r0, r1
 80092bc:	d902      	bls.n	80092c4 <memmove+0xc>
 80092be:	188b      	adds	r3, r1, r2
 80092c0:	4298      	cmp	r0, r3
 80092c2:	d308      	bcc.n	80092d6 <memmove+0x1e>
 80092c4:	2300      	movs	r3, #0
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d007      	beq.n	80092da <memmove+0x22>
 80092ca:	5ccc      	ldrb	r4, [r1, r3]
 80092cc:	54c4      	strb	r4, [r0, r3]
 80092ce:	3301      	adds	r3, #1
 80092d0:	e7f9      	b.n	80092c6 <memmove+0xe>
 80092d2:	5c8b      	ldrb	r3, [r1, r2]
 80092d4:	5483      	strb	r3, [r0, r2]
 80092d6:	3a01      	subs	r2, #1
 80092d8:	d2fb      	bcs.n	80092d2 <memmove+0x1a>
 80092da:	bd10      	pop	{r4, pc}

080092dc <_sbrk_r>:
 80092dc:	2300      	movs	r3, #0
 80092de:	b570      	push	{r4, r5, r6, lr}
 80092e0:	4d06      	ldr	r5, [pc, #24]	@ (80092fc <_sbrk_r+0x20>)
 80092e2:	0004      	movs	r4, r0
 80092e4:	0008      	movs	r0, r1
 80092e6:	602b      	str	r3, [r5, #0]
 80092e8:	f7fa fc4e 	bl	8003b88 <_sbrk>
 80092ec:	1c43      	adds	r3, r0, #1
 80092ee:	d103      	bne.n	80092f8 <_sbrk_r+0x1c>
 80092f0:	682b      	ldr	r3, [r5, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d000      	beq.n	80092f8 <_sbrk_r+0x1c>
 80092f6:	6023      	str	r3, [r4, #0]
 80092f8:	bd70      	pop	{r4, r5, r6, pc}
 80092fa:	46c0      	nop			@ (mov r8, r8)
 80092fc:	200009cc 	.word	0x200009cc

08009300 <memchr>:
 8009300:	b2c9      	uxtb	r1, r1
 8009302:	1882      	adds	r2, r0, r2
 8009304:	4290      	cmp	r0, r2
 8009306:	d101      	bne.n	800930c <memchr+0xc>
 8009308:	2000      	movs	r0, #0
 800930a:	4770      	bx	lr
 800930c:	7803      	ldrb	r3, [r0, #0]
 800930e:	428b      	cmp	r3, r1
 8009310:	d0fb      	beq.n	800930a <memchr+0xa>
 8009312:	3001      	adds	r0, #1
 8009314:	e7f6      	b.n	8009304 <memchr+0x4>

08009316 <_realloc_r>:
 8009316:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009318:	0006      	movs	r6, r0
 800931a:	000c      	movs	r4, r1
 800931c:	0015      	movs	r5, r2
 800931e:	2900      	cmp	r1, #0
 8009320:	d105      	bne.n	800932e <_realloc_r+0x18>
 8009322:	0011      	movs	r1, r2
 8009324:	f7ff fc5e 	bl	8008be4 <_malloc_r>
 8009328:	0004      	movs	r4, r0
 800932a:	0020      	movs	r0, r4
 800932c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800932e:	2a00      	cmp	r2, #0
 8009330:	d103      	bne.n	800933a <_realloc_r+0x24>
 8009332:	f7ff fbeb 	bl	8008b0c <_free_r>
 8009336:	002c      	movs	r4, r5
 8009338:	e7f7      	b.n	800932a <_realloc_r+0x14>
 800933a:	f000 f81c 	bl	8009376 <_malloc_usable_size_r>
 800933e:	0007      	movs	r7, r0
 8009340:	4285      	cmp	r5, r0
 8009342:	d802      	bhi.n	800934a <_realloc_r+0x34>
 8009344:	0843      	lsrs	r3, r0, #1
 8009346:	42ab      	cmp	r3, r5
 8009348:	d3ef      	bcc.n	800932a <_realloc_r+0x14>
 800934a:	0029      	movs	r1, r5
 800934c:	0030      	movs	r0, r6
 800934e:	f7ff fc49 	bl	8008be4 <_malloc_r>
 8009352:	9001      	str	r0, [sp, #4]
 8009354:	2800      	cmp	r0, #0
 8009356:	d101      	bne.n	800935c <_realloc_r+0x46>
 8009358:	9c01      	ldr	r4, [sp, #4]
 800935a:	e7e6      	b.n	800932a <_realloc_r+0x14>
 800935c:	002a      	movs	r2, r5
 800935e:	42bd      	cmp	r5, r7
 8009360:	d900      	bls.n	8009364 <_realloc_r+0x4e>
 8009362:	003a      	movs	r2, r7
 8009364:	0021      	movs	r1, r4
 8009366:	9801      	ldr	r0, [sp, #4]
 8009368:	f7ff fbc6 	bl	8008af8 <memcpy>
 800936c:	0021      	movs	r1, r4
 800936e:	0030      	movs	r0, r6
 8009370:	f7ff fbcc 	bl	8008b0c <_free_r>
 8009374:	e7f0      	b.n	8009358 <_realloc_r+0x42>

08009376 <_malloc_usable_size_r>:
 8009376:	1f0b      	subs	r3, r1, #4
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	1f18      	subs	r0, r3, #4
 800937c:	2b00      	cmp	r3, #0
 800937e:	da01      	bge.n	8009384 <_malloc_usable_size_r+0xe>
 8009380:	580b      	ldr	r3, [r1, r0]
 8009382:	18c0      	adds	r0, r0, r3
 8009384:	4770      	bx	lr
	...

08009388 <_init>:
 8009388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938a:	46c0      	nop			@ (mov r8, r8)
 800938c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800938e:	bc08      	pop	{r3}
 8009390:	469e      	mov	lr, r3
 8009392:	4770      	bx	lr

08009394 <_fini>:
 8009394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009396:	46c0      	nop			@ (mov r8, r8)
 8009398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800939a:	bc08      	pop	{r3}
 800939c:	469e      	mov	lr, r3
 800939e:	4770      	bx	lr
