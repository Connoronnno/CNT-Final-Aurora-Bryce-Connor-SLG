
ynotag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083cc  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  08008488  08008488  00009488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bb0  08008bb0  0000a54c  2**0
                  CONTENTS
  4 .ARM          00000008  08008bb0  08008bb0  00009bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bb8  08008bb8  0000a54c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bb8  08008bb8  00009bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008bbc  08008bbc  00009bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000054c  20000000  08008bc0  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  20000550  0800910c  0000a550  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000988  0800910c  0000a988  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a54c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a155  00000000  00000000  0000a574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031e6  00000000  00000000  000246c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a8  00000000  00000000  000278b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012c1  00000000  00000000  00029058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f358  00000000  00000000  0002a319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d8db  00000000  00000000  00049671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9d7d  00000000  00000000  00066f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130cc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e18  00000000  00000000  00130d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00136b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000550 	.word	0x20000550
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008470 	.word	0x08008470

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000554 	.word	0x20000554
 8000100:	08008470 	.word	0x08008470

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	@ (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f81e 	bl	8000474 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__aeabi_f2uiz>:
 8000444:	219e      	movs	r1, #158	@ 0x9e
 8000446:	b510      	push	{r4, lr}
 8000448:	05c9      	lsls	r1, r1, #23
 800044a:	1c04      	adds	r4, r0, #0
 800044c:	f000 fc76 	bl	8000d3c <__aeabi_fcmpge>
 8000450:	2800      	cmp	r0, #0
 8000452:	d103      	bne.n	800045c <__aeabi_f2uiz+0x18>
 8000454:	1c20      	adds	r0, r4, #0
 8000456:	f000 fb9d 	bl	8000b94 <__aeabi_f2iz>
 800045a:	bd10      	pop	{r4, pc}
 800045c:	219e      	movs	r1, #158	@ 0x9e
 800045e:	1c20      	adds	r0, r4, #0
 8000460:	05c9      	lsls	r1, r1, #23
 8000462:	f000 f9f3 	bl	800084c <__aeabi_fsub>
 8000466:	f000 fb95 	bl	8000b94 <__aeabi_f2iz>
 800046a:	2380      	movs	r3, #128	@ 0x80
 800046c:	061b      	lsls	r3, r3, #24
 800046e:	469c      	mov	ip, r3
 8000470:	4460      	add	r0, ip
 8000472:	e7f2      	b.n	800045a <__aeabi_f2uiz+0x16>

08000474 <__udivmoddi4>:
 8000474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000476:	4657      	mov	r7, sl
 8000478:	464e      	mov	r6, r9
 800047a:	4645      	mov	r5, r8
 800047c:	46de      	mov	lr, fp
 800047e:	b5e0      	push	{r5, r6, r7, lr}
 8000480:	0004      	movs	r4, r0
 8000482:	000d      	movs	r5, r1
 8000484:	4692      	mov	sl, r2
 8000486:	4699      	mov	r9, r3
 8000488:	b083      	sub	sp, #12
 800048a:	428b      	cmp	r3, r1
 800048c:	d830      	bhi.n	80004f0 <__udivmoddi4+0x7c>
 800048e:	d02d      	beq.n	80004ec <__udivmoddi4+0x78>
 8000490:	4649      	mov	r1, r9
 8000492:	4650      	mov	r0, sl
 8000494:	f000 fc7a 	bl	8000d8c <__clzdi2>
 8000498:	0029      	movs	r1, r5
 800049a:	0006      	movs	r6, r0
 800049c:	0020      	movs	r0, r4
 800049e:	f000 fc75 	bl	8000d8c <__clzdi2>
 80004a2:	1a33      	subs	r3, r6, r0
 80004a4:	4698      	mov	r8, r3
 80004a6:	3b20      	subs	r3, #32
 80004a8:	d434      	bmi.n	8000514 <__udivmoddi4+0xa0>
 80004aa:	469b      	mov	fp, r3
 80004ac:	4653      	mov	r3, sl
 80004ae:	465a      	mov	r2, fp
 80004b0:	4093      	lsls	r3, r2
 80004b2:	4642      	mov	r2, r8
 80004b4:	001f      	movs	r7, r3
 80004b6:	4653      	mov	r3, sl
 80004b8:	4093      	lsls	r3, r2
 80004ba:	001e      	movs	r6, r3
 80004bc:	42af      	cmp	r7, r5
 80004be:	d83b      	bhi.n	8000538 <__udivmoddi4+0xc4>
 80004c0:	42af      	cmp	r7, r5
 80004c2:	d100      	bne.n	80004c6 <__udivmoddi4+0x52>
 80004c4:	e079      	b.n	80005ba <__udivmoddi4+0x146>
 80004c6:	465b      	mov	r3, fp
 80004c8:	1ba4      	subs	r4, r4, r6
 80004ca:	41bd      	sbcs	r5, r7
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	da00      	bge.n	80004d2 <__udivmoddi4+0x5e>
 80004d0:	e076      	b.n	80005c0 <__udivmoddi4+0x14c>
 80004d2:	2200      	movs	r2, #0
 80004d4:	2300      	movs	r3, #0
 80004d6:	9200      	str	r2, [sp, #0]
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	2301      	movs	r3, #1
 80004dc:	465a      	mov	r2, fp
 80004de:	4093      	lsls	r3, r2
 80004e0:	9301      	str	r3, [sp, #4]
 80004e2:	2301      	movs	r3, #1
 80004e4:	4642      	mov	r2, r8
 80004e6:	4093      	lsls	r3, r2
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	e029      	b.n	8000540 <__udivmoddi4+0xcc>
 80004ec:	4282      	cmp	r2, r0
 80004ee:	d9cf      	bls.n	8000490 <__udivmoddi4+0x1c>
 80004f0:	2200      	movs	r2, #0
 80004f2:	2300      	movs	r3, #0
 80004f4:	9200      	str	r2, [sp, #0]
 80004f6:	9301      	str	r3, [sp, #4]
 80004f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <__udivmoddi4+0x8e>
 80004fe:	601c      	str	r4, [r3, #0]
 8000500:	605d      	str	r5, [r3, #4]
 8000502:	9800      	ldr	r0, [sp, #0]
 8000504:	9901      	ldr	r1, [sp, #4]
 8000506:	b003      	add	sp, #12
 8000508:	bcf0      	pop	{r4, r5, r6, r7}
 800050a:	46bb      	mov	fp, r7
 800050c:	46b2      	mov	sl, r6
 800050e:	46a9      	mov	r9, r5
 8000510:	46a0      	mov	r8, r4
 8000512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000514:	4642      	mov	r2, r8
 8000516:	469b      	mov	fp, r3
 8000518:	2320      	movs	r3, #32
 800051a:	1a9b      	subs	r3, r3, r2
 800051c:	4652      	mov	r2, sl
 800051e:	40da      	lsrs	r2, r3
 8000520:	4641      	mov	r1, r8
 8000522:	0013      	movs	r3, r2
 8000524:	464a      	mov	r2, r9
 8000526:	408a      	lsls	r2, r1
 8000528:	0017      	movs	r7, r2
 800052a:	4642      	mov	r2, r8
 800052c:	431f      	orrs	r7, r3
 800052e:	4653      	mov	r3, sl
 8000530:	4093      	lsls	r3, r2
 8000532:	001e      	movs	r6, r3
 8000534:	42af      	cmp	r7, r5
 8000536:	d9c3      	bls.n	80004c0 <__udivmoddi4+0x4c>
 8000538:	2200      	movs	r2, #0
 800053a:	2300      	movs	r3, #0
 800053c:	9200      	str	r2, [sp, #0]
 800053e:	9301      	str	r3, [sp, #4]
 8000540:	4643      	mov	r3, r8
 8000542:	2b00      	cmp	r3, #0
 8000544:	d0d8      	beq.n	80004f8 <__udivmoddi4+0x84>
 8000546:	07fb      	lsls	r3, r7, #31
 8000548:	0872      	lsrs	r2, r6, #1
 800054a:	431a      	orrs	r2, r3
 800054c:	4646      	mov	r6, r8
 800054e:	087b      	lsrs	r3, r7, #1
 8000550:	e00e      	b.n	8000570 <__udivmoddi4+0xfc>
 8000552:	42ab      	cmp	r3, r5
 8000554:	d101      	bne.n	800055a <__udivmoddi4+0xe6>
 8000556:	42a2      	cmp	r2, r4
 8000558:	d80c      	bhi.n	8000574 <__udivmoddi4+0x100>
 800055a:	1aa4      	subs	r4, r4, r2
 800055c:	419d      	sbcs	r5, r3
 800055e:	2001      	movs	r0, #1
 8000560:	1924      	adds	r4, r4, r4
 8000562:	416d      	adcs	r5, r5
 8000564:	2100      	movs	r1, #0
 8000566:	3e01      	subs	r6, #1
 8000568:	1824      	adds	r4, r4, r0
 800056a:	414d      	adcs	r5, r1
 800056c:	2e00      	cmp	r6, #0
 800056e:	d006      	beq.n	800057e <__udivmoddi4+0x10a>
 8000570:	42ab      	cmp	r3, r5
 8000572:	d9ee      	bls.n	8000552 <__udivmoddi4+0xde>
 8000574:	3e01      	subs	r6, #1
 8000576:	1924      	adds	r4, r4, r4
 8000578:	416d      	adcs	r5, r5
 800057a:	2e00      	cmp	r6, #0
 800057c:	d1f8      	bne.n	8000570 <__udivmoddi4+0xfc>
 800057e:	9800      	ldr	r0, [sp, #0]
 8000580:	9901      	ldr	r1, [sp, #4]
 8000582:	465b      	mov	r3, fp
 8000584:	1900      	adds	r0, r0, r4
 8000586:	4169      	adcs	r1, r5
 8000588:	2b00      	cmp	r3, #0
 800058a:	db24      	blt.n	80005d6 <__udivmoddi4+0x162>
 800058c:	002b      	movs	r3, r5
 800058e:	465a      	mov	r2, fp
 8000590:	4644      	mov	r4, r8
 8000592:	40d3      	lsrs	r3, r2
 8000594:	002a      	movs	r2, r5
 8000596:	40e2      	lsrs	r2, r4
 8000598:	001c      	movs	r4, r3
 800059a:	465b      	mov	r3, fp
 800059c:	0015      	movs	r5, r2
 800059e:	2b00      	cmp	r3, #0
 80005a0:	db2a      	blt.n	80005f8 <__udivmoddi4+0x184>
 80005a2:	0026      	movs	r6, r4
 80005a4:	409e      	lsls	r6, r3
 80005a6:	0033      	movs	r3, r6
 80005a8:	0026      	movs	r6, r4
 80005aa:	4647      	mov	r7, r8
 80005ac:	40be      	lsls	r6, r7
 80005ae:	0032      	movs	r2, r6
 80005b0:	1a80      	subs	r0, r0, r2
 80005b2:	4199      	sbcs	r1, r3
 80005b4:	9000      	str	r0, [sp, #0]
 80005b6:	9101      	str	r1, [sp, #4]
 80005b8:	e79e      	b.n	80004f8 <__udivmoddi4+0x84>
 80005ba:	42a3      	cmp	r3, r4
 80005bc:	d8bc      	bhi.n	8000538 <__udivmoddi4+0xc4>
 80005be:	e782      	b.n	80004c6 <__udivmoddi4+0x52>
 80005c0:	4642      	mov	r2, r8
 80005c2:	2320      	movs	r3, #32
 80005c4:	2100      	movs	r1, #0
 80005c6:	1a9b      	subs	r3, r3, r2
 80005c8:	2200      	movs	r2, #0
 80005ca:	9100      	str	r1, [sp, #0]
 80005cc:	9201      	str	r2, [sp, #4]
 80005ce:	2201      	movs	r2, #1
 80005d0:	40da      	lsrs	r2, r3
 80005d2:	9201      	str	r2, [sp, #4]
 80005d4:	e785      	b.n	80004e2 <__udivmoddi4+0x6e>
 80005d6:	4642      	mov	r2, r8
 80005d8:	2320      	movs	r3, #32
 80005da:	1a9b      	subs	r3, r3, r2
 80005dc:	002a      	movs	r2, r5
 80005de:	4646      	mov	r6, r8
 80005e0:	409a      	lsls	r2, r3
 80005e2:	0023      	movs	r3, r4
 80005e4:	40f3      	lsrs	r3, r6
 80005e6:	4644      	mov	r4, r8
 80005e8:	4313      	orrs	r3, r2
 80005ea:	002a      	movs	r2, r5
 80005ec:	40e2      	lsrs	r2, r4
 80005ee:	001c      	movs	r4, r3
 80005f0:	465b      	mov	r3, fp
 80005f2:	0015      	movs	r5, r2
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	dad4      	bge.n	80005a2 <__udivmoddi4+0x12e>
 80005f8:	4642      	mov	r2, r8
 80005fa:	002f      	movs	r7, r5
 80005fc:	2320      	movs	r3, #32
 80005fe:	0026      	movs	r6, r4
 8000600:	4097      	lsls	r7, r2
 8000602:	1a9b      	subs	r3, r3, r2
 8000604:	40de      	lsrs	r6, r3
 8000606:	003b      	movs	r3, r7
 8000608:	4333      	orrs	r3, r6
 800060a:	e7cd      	b.n	80005a8 <__udivmoddi4+0x134>

0800060c <__aeabi_fdiv>:
 800060c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060e:	464f      	mov	r7, r9
 8000610:	4646      	mov	r6, r8
 8000612:	46d6      	mov	lr, sl
 8000614:	0244      	lsls	r4, r0, #9
 8000616:	b5c0      	push	{r6, r7, lr}
 8000618:	0047      	lsls	r7, r0, #1
 800061a:	1c0e      	adds	r6, r1, #0
 800061c:	0a64      	lsrs	r4, r4, #9
 800061e:	0e3f      	lsrs	r7, r7, #24
 8000620:	0fc5      	lsrs	r5, r0, #31
 8000622:	2f00      	cmp	r7, #0
 8000624:	d03c      	beq.n	80006a0 <__aeabi_fdiv+0x94>
 8000626:	2fff      	cmp	r7, #255	@ 0xff
 8000628:	d042      	beq.n	80006b0 <__aeabi_fdiv+0xa4>
 800062a:	2300      	movs	r3, #0
 800062c:	2280      	movs	r2, #128	@ 0x80
 800062e:	4699      	mov	r9, r3
 8000630:	469a      	mov	sl, r3
 8000632:	00e4      	lsls	r4, r4, #3
 8000634:	04d2      	lsls	r2, r2, #19
 8000636:	4314      	orrs	r4, r2
 8000638:	3f7f      	subs	r7, #127	@ 0x7f
 800063a:	0273      	lsls	r3, r6, #9
 800063c:	0a5b      	lsrs	r3, r3, #9
 800063e:	4698      	mov	r8, r3
 8000640:	0073      	lsls	r3, r6, #1
 8000642:	0e1b      	lsrs	r3, r3, #24
 8000644:	0ff6      	lsrs	r6, r6, #31
 8000646:	2b00      	cmp	r3, #0
 8000648:	d01b      	beq.n	8000682 <__aeabi_fdiv+0x76>
 800064a:	2bff      	cmp	r3, #255	@ 0xff
 800064c:	d013      	beq.n	8000676 <__aeabi_fdiv+0x6a>
 800064e:	4642      	mov	r2, r8
 8000650:	2180      	movs	r1, #128	@ 0x80
 8000652:	00d2      	lsls	r2, r2, #3
 8000654:	04c9      	lsls	r1, r1, #19
 8000656:	4311      	orrs	r1, r2
 8000658:	4688      	mov	r8, r1
 800065a:	2000      	movs	r0, #0
 800065c:	3b7f      	subs	r3, #127	@ 0x7f
 800065e:	0029      	movs	r1, r5
 8000660:	1aff      	subs	r7, r7, r3
 8000662:	464b      	mov	r3, r9
 8000664:	4071      	eors	r1, r6
 8000666:	b2c9      	uxtb	r1, r1
 8000668:	2b0f      	cmp	r3, #15
 800066a:	d900      	bls.n	800066e <__aeabi_fdiv+0x62>
 800066c:	e0b5      	b.n	80007da <__aeabi_fdiv+0x1ce>
 800066e:	4a74      	ldr	r2, [pc, #464]	@ (8000840 <__aeabi_fdiv+0x234>)
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	58d3      	ldr	r3, [r2, r3]
 8000674:	469f      	mov	pc, r3
 8000676:	4643      	mov	r3, r8
 8000678:	2b00      	cmp	r3, #0
 800067a:	d13f      	bne.n	80006fc <__aeabi_fdiv+0xf0>
 800067c:	3fff      	subs	r7, #255	@ 0xff
 800067e:	3302      	adds	r3, #2
 8000680:	e003      	b.n	800068a <__aeabi_fdiv+0x7e>
 8000682:	4643      	mov	r3, r8
 8000684:	2b00      	cmp	r3, #0
 8000686:	d12d      	bne.n	80006e4 <__aeabi_fdiv+0xd8>
 8000688:	2301      	movs	r3, #1
 800068a:	0029      	movs	r1, r5
 800068c:	464a      	mov	r2, r9
 800068e:	4071      	eors	r1, r6
 8000690:	b2c9      	uxtb	r1, r1
 8000692:	431a      	orrs	r2, r3
 8000694:	2a0e      	cmp	r2, #14
 8000696:	d838      	bhi.n	800070a <__aeabi_fdiv+0xfe>
 8000698:	486a      	ldr	r0, [pc, #424]	@ (8000844 <__aeabi_fdiv+0x238>)
 800069a:	0092      	lsls	r2, r2, #2
 800069c:	5882      	ldr	r2, [r0, r2]
 800069e:	4697      	mov	pc, r2
 80006a0:	2c00      	cmp	r4, #0
 80006a2:	d113      	bne.n	80006cc <__aeabi_fdiv+0xc0>
 80006a4:	2304      	movs	r3, #4
 80006a6:	4699      	mov	r9, r3
 80006a8:	3b03      	subs	r3, #3
 80006aa:	2700      	movs	r7, #0
 80006ac:	469a      	mov	sl, r3
 80006ae:	e7c4      	b.n	800063a <__aeabi_fdiv+0x2e>
 80006b0:	2c00      	cmp	r4, #0
 80006b2:	d105      	bne.n	80006c0 <__aeabi_fdiv+0xb4>
 80006b4:	2308      	movs	r3, #8
 80006b6:	4699      	mov	r9, r3
 80006b8:	3b06      	subs	r3, #6
 80006ba:	27ff      	movs	r7, #255	@ 0xff
 80006bc:	469a      	mov	sl, r3
 80006be:	e7bc      	b.n	800063a <__aeabi_fdiv+0x2e>
 80006c0:	230c      	movs	r3, #12
 80006c2:	4699      	mov	r9, r3
 80006c4:	3b09      	subs	r3, #9
 80006c6:	27ff      	movs	r7, #255	@ 0xff
 80006c8:	469a      	mov	sl, r3
 80006ca:	e7b6      	b.n	800063a <__aeabi_fdiv+0x2e>
 80006cc:	0020      	movs	r0, r4
 80006ce:	f000 fb3f 	bl	8000d50 <__clzsi2>
 80006d2:	2776      	movs	r7, #118	@ 0x76
 80006d4:	1f43      	subs	r3, r0, #5
 80006d6:	409c      	lsls	r4, r3
 80006d8:	2300      	movs	r3, #0
 80006da:	427f      	negs	r7, r7
 80006dc:	4699      	mov	r9, r3
 80006de:	469a      	mov	sl, r3
 80006e0:	1a3f      	subs	r7, r7, r0
 80006e2:	e7aa      	b.n	800063a <__aeabi_fdiv+0x2e>
 80006e4:	4640      	mov	r0, r8
 80006e6:	f000 fb33 	bl	8000d50 <__clzsi2>
 80006ea:	4642      	mov	r2, r8
 80006ec:	1f43      	subs	r3, r0, #5
 80006ee:	409a      	lsls	r2, r3
 80006f0:	2376      	movs	r3, #118	@ 0x76
 80006f2:	425b      	negs	r3, r3
 80006f4:	1a1b      	subs	r3, r3, r0
 80006f6:	4690      	mov	r8, r2
 80006f8:	2000      	movs	r0, #0
 80006fa:	e7b0      	b.n	800065e <__aeabi_fdiv+0x52>
 80006fc:	2303      	movs	r3, #3
 80006fe:	464a      	mov	r2, r9
 8000700:	431a      	orrs	r2, r3
 8000702:	4691      	mov	r9, r2
 8000704:	2003      	movs	r0, #3
 8000706:	33fc      	adds	r3, #252	@ 0xfc
 8000708:	e7a9      	b.n	800065e <__aeabi_fdiv+0x52>
 800070a:	000d      	movs	r5, r1
 800070c:	20ff      	movs	r0, #255	@ 0xff
 800070e:	2200      	movs	r2, #0
 8000710:	05c0      	lsls	r0, r0, #23
 8000712:	07ed      	lsls	r5, r5, #31
 8000714:	4310      	orrs	r0, r2
 8000716:	4328      	orrs	r0, r5
 8000718:	bce0      	pop	{r5, r6, r7}
 800071a:	46ba      	mov	sl, r7
 800071c:	46b1      	mov	r9, r6
 800071e:	46a8      	mov	r8, r5
 8000720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000722:	000d      	movs	r5, r1
 8000724:	2000      	movs	r0, #0
 8000726:	2200      	movs	r2, #0
 8000728:	e7f2      	b.n	8000710 <__aeabi_fdiv+0x104>
 800072a:	4653      	mov	r3, sl
 800072c:	2b02      	cmp	r3, #2
 800072e:	d0ed      	beq.n	800070c <__aeabi_fdiv+0x100>
 8000730:	2b03      	cmp	r3, #3
 8000732:	d033      	beq.n	800079c <__aeabi_fdiv+0x190>
 8000734:	46a0      	mov	r8, r4
 8000736:	2b01      	cmp	r3, #1
 8000738:	d105      	bne.n	8000746 <__aeabi_fdiv+0x13a>
 800073a:	2000      	movs	r0, #0
 800073c:	2200      	movs	r2, #0
 800073e:	e7e7      	b.n	8000710 <__aeabi_fdiv+0x104>
 8000740:	0035      	movs	r5, r6
 8000742:	2803      	cmp	r0, #3
 8000744:	d07a      	beq.n	800083c <__aeabi_fdiv+0x230>
 8000746:	003b      	movs	r3, r7
 8000748:	337f      	adds	r3, #127	@ 0x7f
 800074a:	2b00      	cmp	r3, #0
 800074c:	dd2d      	ble.n	80007aa <__aeabi_fdiv+0x19e>
 800074e:	4642      	mov	r2, r8
 8000750:	0752      	lsls	r2, r2, #29
 8000752:	d007      	beq.n	8000764 <__aeabi_fdiv+0x158>
 8000754:	220f      	movs	r2, #15
 8000756:	4641      	mov	r1, r8
 8000758:	400a      	ands	r2, r1
 800075a:	2a04      	cmp	r2, #4
 800075c:	d002      	beq.n	8000764 <__aeabi_fdiv+0x158>
 800075e:	2204      	movs	r2, #4
 8000760:	4694      	mov	ip, r2
 8000762:	44e0      	add	r8, ip
 8000764:	4642      	mov	r2, r8
 8000766:	0112      	lsls	r2, r2, #4
 8000768:	d505      	bpl.n	8000776 <__aeabi_fdiv+0x16a>
 800076a:	4642      	mov	r2, r8
 800076c:	4b36      	ldr	r3, [pc, #216]	@ (8000848 <__aeabi_fdiv+0x23c>)
 800076e:	401a      	ands	r2, r3
 8000770:	003b      	movs	r3, r7
 8000772:	4690      	mov	r8, r2
 8000774:	3380      	adds	r3, #128	@ 0x80
 8000776:	2bfe      	cmp	r3, #254	@ 0xfe
 8000778:	dcc8      	bgt.n	800070c <__aeabi_fdiv+0x100>
 800077a:	4642      	mov	r2, r8
 800077c:	0192      	lsls	r2, r2, #6
 800077e:	0a52      	lsrs	r2, r2, #9
 8000780:	b2d8      	uxtb	r0, r3
 8000782:	e7c5      	b.n	8000710 <__aeabi_fdiv+0x104>
 8000784:	2280      	movs	r2, #128	@ 0x80
 8000786:	2500      	movs	r5, #0
 8000788:	20ff      	movs	r0, #255	@ 0xff
 800078a:	03d2      	lsls	r2, r2, #15
 800078c:	e7c0      	b.n	8000710 <__aeabi_fdiv+0x104>
 800078e:	2280      	movs	r2, #128	@ 0x80
 8000790:	03d2      	lsls	r2, r2, #15
 8000792:	4214      	tst	r4, r2
 8000794:	d002      	beq.n	800079c <__aeabi_fdiv+0x190>
 8000796:	4643      	mov	r3, r8
 8000798:	4213      	tst	r3, r2
 800079a:	d049      	beq.n	8000830 <__aeabi_fdiv+0x224>
 800079c:	2280      	movs	r2, #128	@ 0x80
 800079e:	03d2      	lsls	r2, r2, #15
 80007a0:	4322      	orrs	r2, r4
 80007a2:	0252      	lsls	r2, r2, #9
 80007a4:	20ff      	movs	r0, #255	@ 0xff
 80007a6:	0a52      	lsrs	r2, r2, #9
 80007a8:	e7b2      	b.n	8000710 <__aeabi_fdiv+0x104>
 80007aa:	2201      	movs	r2, #1
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	2b1b      	cmp	r3, #27
 80007b0:	dcc3      	bgt.n	800073a <__aeabi_fdiv+0x12e>
 80007b2:	4642      	mov	r2, r8
 80007b4:	40da      	lsrs	r2, r3
 80007b6:	4643      	mov	r3, r8
 80007b8:	379e      	adds	r7, #158	@ 0x9e
 80007ba:	40bb      	lsls	r3, r7
 80007bc:	1e59      	subs	r1, r3, #1
 80007be:	418b      	sbcs	r3, r1
 80007c0:	431a      	orrs	r2, r3
 80007c2:	0753      	lsls	r3, r2, #29
 80007c4:	d004      	beq.n	80007d0 <__aeabi_fdiv+0x1c4>
 80007c6:	230f      	movs	r3, #15
 80007c8:	4013      	ands	r3, r2
 80007ca:	2b04      	cmp	r3, #4
 80007cc:	d000      	beq.n	80007d0 <__aeabi_fdiv+0x1c4>
 80007ce:	3204      	adds	r2, #4
 80007d0:	0153      	lsls	r3, r2, #5
 80007d2:	d529      	bpl.n	8000828 <__aeabi_fdiv+0x21c>
 80007d4:	2001      	movs	r0, #1
 80007d6:	2200      	movs	r2, #0
 80007d8:	e79a      	b.n	8000710 <__aeabi_fdiv+0x104>
 80007da:	4642      	mov	r2, r8
 80007dc:	0163      	lsls	r3, r4, #5
 80007de:	0155      	lsls	r5, r2, #5
 80007e0:	42ab      	cmp	r3, r5
 80007e2:	d215      	bcs.n	8000810 <__aeabi_fdiv+0x204>
 80007e4:	201b      	movs	r0, #27
 80007e6:	2200      	movs	r2, #0
 80007e8:	3f01      	subs	r7, #1
 80007ea:	2601      	movs	r6, #1
 80007ec:	001c      	movs	r4, r3
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	2c00      	cmp	r4, #0
 80007f4:	db01      	blt.n	80007fa <__aeabi_fdiv+0x1ee>
 80007f6:	429d      	cmp	r5, r3
 80007f8:	d801      	bhi.n	80007fe <__aeabi_fdiv+0x1f2>
 80007fa:	1b5b      	subs	r3, r3, r5
 80007fc:	4332      	orrs	r2, r6
 80007fe:	3801      	subs	r0, #1
 8000800:	2800      	cmp	r0, #0
 8000802:	d1f3      	bne.n	80007ec <__aeabi_fdiv+0x1e0>
 8000804:	1e58      	subs	r0, r3, #1
 8000806:	4183      	sbcs	r3, r0
 8000808:	4313      	orrs	r3, r2
 800080a:	4698      	mov	r8, r3
 800080c:	000d      	movs	r5, r1
 800080e:	e79a      	b.n	8000746 <__aeabi_fdiv+0x13a>
 8000810:	201a      	movs	r0, #26
 8000812:	2201      	movs	r2, #1
 8000814:	1b5b      	subs	r3, r3, r5
 8000816:	e7e8      	b.n	80007ea <__aeabi_fdiv+0x1de>
 8000818:	3b02      	subs	r3, #2
 800081a:	425a      	negs	r2, r3
 800081c:	4153      	adcs	r3, r2
 800081e:	425b      	negs	r3, r3
 8000820:	0035      	movs	r5, r6
 8000822:	2200      	movs	r2, #0
 8000824:	b2d8      	uxtb	r0, r3
 8000826:	e773      	b.n	8000710 <__aeabi_fdiv+0x104>
 8000828:	0192      	lsls	r2, r2, #6
 800082a:	2000      	movs	r0, #0
 800082c:	0a52      	lsrs	r2, r2, #9
 800082e:	e76f      	b.n	8000710 <__aeabi_fdiv+0x104>
 8000830:	431a      	orrs	r2, r3
 8000832:	0252      	lsls	r2, r2, #9
 8000834:	0035      	movs	r5, r6
 8000836:	20ff      	movs	r0, #255	@ 0xff
 8000838:	0a52      	lsrs	r2, r2, #9
 800083a:	e769      	b.n	8000710 <__aeabi_fdiv+0x104>
 800083c:	4644      	mov	r4, r8
 800083e:	e7ad      	b.n	800079c <__aeabi_fdiv+0x190>
 8000840:	080084b4 	.word	0x080084b4
 8000844:	080084f4 	.word	0x080084f4
 8000848:	f7ffffff 	.word	0xf7ffffff

0800084c <__aeabi_fsub>:
 800084c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800084e:	4647      	mov	r7, r8
 8000850:	46ce      	mov	lr, r9
 8000852:	024e      	lsls	r6, r1, #9
 8000854:	0243      	lsls	r3, r0, #9
 8000856:	0045      	lsls	r5, r0, #1
 8000858:	0a72      	lsrs	r2, r6, #9
 800085a:	0fc4      	lsrs	r4, r0, #31
 800085c:	0048      	lsls	r0, r1, #1
 800085e:	b580      	push	{r7, lr}
 8000860:	4694      	mov	ip, r2
 8000862:	0a5f      	lsrs	r7, r3, #9
 8000864:	0e2d      	lsrs	r5, r5, #24
 8000866:	099b      	lsrs	r3, r3, #6
 8000868:	0e00      	lsrs	r0, r0, #24
 800086a:	0fc9      	lsrs	r1, r1, #31
 800086c:	09b6      	lsrs	r6, r6, #6
 800086e:	28ff      	cmp	r0, #255	@ 0xff
 8000870:	d024      	beq.n	80008bc <__aeabi_fsub+0x70>
 8000872:	2201      	movs	r2, #1
 8000874:	4051      	eors	r1, r2
 8000876:	1a2a      	subs	r2, r5, r0
 8000878:	428c      	cmp	r4, r1
 800087a:	d00f      	beq.n	800089c <__aeabi_fsub+0x50>
 800087c:	2a00      	cmp	r2, #0
 800087e:	dc00      	bgt.n	8000882 <__aeabi_fsub+0x36>
 8000880:	e16a      	b.n	8000b58 <__aeabi_fsub+0x30c>
 8000882:	2800      	cmp	r0, #0
 8000884:	d135      	bne.n	80008f2 <__aeabi_fsub+0xa6>
 8000886:	2e00      	cmp	r6, #0
 8000888:	d100      	bne.n	800088c <__aeabi_fsub+0x40>
 800088a:	e0a2      	b.n	80009d2 <__aeabi_fsub+0x186>
 800088c:	1e51      	subs	r1, r2, #1
 800088e:	2a01      	cmp	r2, #1
 8000890:	d100      	bne.n	8000894 <__aeabi_fsub+0x48>
 8000892:	e124      	b.n	8000ade <__aeabi_fsub+0x292>
 8000894:	2aff      	cmp	r2, #255	@ 0xff
 8000896:	d021      	beq.n	80008dc <__aeabi_fsub+0x90>
 8000898:	000a      	movs	r2, r1
 800089a:	e02f      	b.n	80008fc <__aeabi_fsub+0xb0>
 800089c:	2a00      	cmp	r2, #0
 800089e:	dc00      	bgt.n	80008a2 <__aeabi_fsub+0x56>
 80008a0:	e167      	b.n	8000b72 <__aeabi_fsub+0x326>
 80008a2:	2800      	cmp	r0, #0
 80008a4:	d05e      	beq.n	8000964 <__aeabi_fsub+0x118>
 80008a6:	2dff      	cmp	r5, #255	@ 0xff
 80008a8:	d018      	beq.n	80008dc <__aeabi_fsub+0x90>
 80008aa:	2180      	movs	r1, #128	@ 0x80
 80008ac:	04c9      	lsls	r1, r1, #19
 80008ae:	430e      	orrs	r6, r1
 80008b0:	2a1b      	cmp	r2, #27
 80008b2:	dc00      	bgt.n	80008b6 <__aeabi_fsub+0x6a>
 80008b4:	e076      	b.n	80009a4 <__aeabi_fsub+0x158>
 80008b6:	002a      	movs	r2, r5
 80008b8:	3301      	adds	r3, #1
 80008ba:	e032      	b.n	8000922 <__aeabi_fsub+0xd6>
 80008bc:	002a      	movs	r2, r5
 80008be:	3aff      	subs	r2, #255	@ 0xff
 80008c0:	4691      	mov	r9, r2
 80008c2:	2e00      	cmp	r6, #0
 80008c4:	d042      	beq.n	800094c <__aeabi_fsub+0x100>
 80008c6:	428c      	cmp	r4, r1
 80008c8:	d055      	beq.n	8000976 <__aeabi_fsub+0x12a>
 80008ca:	464a      	mov	r2, r9
 80008cc:	2a00      	cmp	r2, #0
 80008ce:	d100      	bne.n	80008d2 <__aeabi_fsub+0x86>
 80008d0:	e09c      	b.n	8000a0c <__aeabi_fsub+0x1c0>
 80008d2:	2d00      	cmp	r5, #0
 80008d4:	d100      	bne.n	80008d8 <__aeabi_fsub+0x8c>
 80008d6:	e077      	b.n	80009c8 <__aeabi_fsub+0x17c>
 80008d8:	000c      	movs	r4, r1
 80008da:	0033      	movs	r3, r6
 80008dc:	08db      	lsrs	r3, r3, #3
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d100      	bne.n	80008e4 <__aeabi_fsub+0x98>
 80008e2:	e06e      	b.n	80009c2 <__aeabi_fsub+0x176>
 80008e4:	2280      	movs	r2, #128	@ 0x80
 80008e6:	03d2      	lsls	r2, r2, #15
 80008e8:	4313      	orrs	r3, r2
 80008ea:	025b      	lsls	r3, r3, #9
 80008ec:	20ff      	movs	r0, #255	@ 0xff
 80008ee:	0a5b      	lsrs	r3, r3, #9
 80008f0:	e024      	b.n	800093c <__aeabi_fsub+0xf0>
 80008f2:	2dff      	cmp	r5, #255	@ 0xff
 80008f4:	d0f2      	beq.n	80008dc <__aeabi_fsub+0x90>
 80008f6:	2180      	movs	r1, #128	@ 0x80
 80008f8:	04c9      	lsls	r1, r1, #19
 80008fa:	430e      	orrs	r6, r1
 80008fc:	2101      	movs	r1, #1
 80008fe:	2a1b      	cmp	r2, #27
 8000900:	dc08      	bgt.n	8000914 <__aeabi_fsub+0xc8>
 8000902:	0031      	movs	r1, r6
 8000904:	2020      	movs	r0, #32
 8000906:	40d1      	lsrs	r1, r2
 8000908:	1a82      	subs	r2, r0, r2
 800090a:	4096      	lsls	r6, r2
 800090c:	0032      	movs	r2, r6
 800090e:	1e50      	subs	r0, r2, #1
 8000910:	4182      	sbcs	r2, r0
 8000912:	4311      	orrs	r1, r2
 8000914:	1a5b      	subs	r3, r3, r1
 8000916:	015a      	lsls	r2, r3, #5
 8000918:	d460      	bmi.n	80009dc <__aeabi_fsub+0x190>
 800091a:	2107      	movs	r1, #7
 800091c:	002a      	movs	r2, r5
 800091e:	4019      	ands	r1, r3
 8000920:	d057      	beq.n	80009d2 <__aeabi_fsub+0x186>
 8000922:	210f      	movs	r1, #15
 8000924:	4019      	ands	r1, r3
 8000926:	2904      	cmp	r1, #4
 8000928:	d000      	beq.n	800092c <__aeabi_fsub+0xe0>
 800092a:	3304      	adds	r3, #4
 800092c:	0159      	lsls	r1, r3, #5
 800092e:	d550      	bpl.n	80009d2 <__aeabi_fsub+0x186>
 8000930:	1c50      	adds	r0, r2, #1
 8000932:	2afe      	cmp	r2, #254	@ 0xfe
 8000934:	d045      	beq.n	80009c2 <__aeabi_fsub+0x176>
 8000936:	019b      	lsls	r3, r3, #6
 8000938:	b2c0      	uxtb	r0, r0
 800093a:	0a5b      	lsrs	r3, r3, #9
 800093c:	05c0      	lsls	r0, r0, #23
 800093e:	4318      	orrs	r0, r3
 8000940:	07e4      	lsls	r4, r4, #31
 8000942:	4320      	orrs	r0, r4
 8000944:	bcc0      	pop	{r6, r7}
 8000946:	46b9      	mov	r9, r7
 8000948:	46b0      	mov	r8, r6
 800094a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800094c:	2201      	movs	r2, #1
 800094e:	4051      	eors	r1, r2
 8000950:	428c      	cmp	r4, r1
 8000952:	d1ba      	bne.n	80008ca <__aeabi_fsub+0x7e>
 8000954:	464a      	mov	r2, r9
 8000956:	2a00      	cmp	r2, #0
 8000958:	d010      	beq.n	800097c <__aeabi_fsub+0x130>
 800095a:	2d00      	cmp	r5, #0
 800095c:	d100      	bne.n	8000960 <__aeabi_fsub+0x114>
 800095e:	e098      	b.n	8000a92 <__aeabi_fsub+0x246>
 8000960:	2300      	movs	r3, #0
 8000962:	e7bb      	b.n	80008dc <__aeabi_fsub+0x90>
 8000964:	2e00      	cmp	r6, #0
 8000966:	d034      	beq.n	80009d2 <__aeabi_fsub+0x186>
 8000968:	1e51      	subs	r1, r2, #1
 800096a:	2a01      	cmp	r2, #1
 800096c:	d06e      	beq.n	8000a4c <__aeabi_fsub+0x200>
 800096e:	2aff      	cmp	r2, #255	@ 0xff
 8000970:	d0b4      	beq.n	80008dc <__aeabi_fsub+0x90>
 8000972:	000a      	movs	r2, r1
 8000974:	e79c      	b.n	80008b0 <__aeabi_fsub+0x64>
 8000976:	2a00      	cmp	r2, #0
 8000978:	d000      	beq.n	800097c <__aeabi_fsub+0x130>
 800097a:	e088      	b.n	8000a8e <__aeabi_fsub+0x242>
 800097c:	20fe      	movs	r0, #254	@ 0xfe
 800097e:	1c6a      	adds	r2, r5, #1
 8000980:	4210      	tst	r0, r2
 8000982:	d000      	beq.n	8000986 <__aeabi_fsub+0x13a>
 8000984:	e092      	b.n	8000aac <__aeabi_fsub+0x260>
 8000986:	2d00      	cmp	r5, #0
 8000988:	d000      	beq.n	800098c <__aeabi_fsub+0x140>
 800098a:	e0a4      	b.n	8000ad6 <__aeabi_fsub+0x28a>
 800098c:	2b00      	cmp	r3, #0
 800098e:	d100      	bne.n	8000992 <__aeabi_fsub+0x146>
 8000990:	e0cb      	b.n	8000b2a <__aeabi_fsub+0x2de>
 8000992:	2e00      	cmp	r6, #0
 8000994:	d000      	beq.n	8000998 <__aeabi_fsub+0x14c>
 8000996:	e0ca      	b.n	8000b2e <__aeabi_fsub+0x2e2>
 8000998:	2200      	movs	r2, #0
 800099a:	08db      	lsrs	r3, r3, #3
 800099c:	025b      	lsls	r3, r3, #9
 800099e:	0a5b      	lsrs	r3, r3, #9
 80009a0:	b2d0      	uxtb	r0, r2
 80009a2:	e7cb      	b.n	800093c <__aeabi_fsub+0xf0>
 80009a4:	0031      	movs	r1, r6
 80009a6:	2020      	movs	r0, #32
 80009a8:	40d1      	lsrs	r1, r2
 80009aa:	1a82      	subs	r2, r0, r2
 80009ac:	4096      	lsls	r6, r2
 80009ae:	0032      	movs	r2, r6
 80009b0:	1e50      	subs	r0, r2, #1
 80009b2:	4182      	sbcs	r2, r0
 80009b4:	430a      	orrs	r2, r1
 80009b6:	189b      	adds	r3, r3, r2
 80009b8:	015a      	lsls	r2, r3, #5
 80009ba:	d5ae      	bpl.n	800091a <__aeabi_fsub+0xce>
 80009bc:	1c6a      	adds	r2, r5, #1
 80009be:	2dfe      	cmp	r5, #254	@ 0xfe
 80009c0:	d14a      	bne.n	8000a58 <__aeabi_fsub+0x20c>
 80009c2:	20ff      	movs	r0, #255	@ 0xff
 80009c4:	2300      	movs	r3, #0
 80009c6:	e7b9      	b.n	800093c <__aeabi_fsub+0xf0>
 80009c8:	22ff      	movs	r2, #255	@ 0xff
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d14b      	bne.n	8000a66 <__aeabi_fsub+0x21a>
 80009ce:	000c      	movs	r4, r1
 80009d0:	0033      	movs	r3, r6
 80009d2:	08db      	lsrs	r3, r3, #3
 80009d4:	2aff      	cmp	r2, #255	@ 0xff
 80009d6:	d100      	bne.n	80009da <__aeabi_fsub+0x18e>
 80009d8:	e781      	b.n	80008de <__aeabi_fsub+0x92>
 80009da:	e7df      	b.n	800099c <__aeabi_fsub+0x150>
 80009dc:	019f      	lsls	r7, r3, #6
 80009de:	09bf      	lsrs	r7, r7, #6
 80009e0:	0038      	movs	r0, r7
 80009e2:	f000 f9b5 	bl	8000d50 <__clzsi2>
 80009e6:	3805      	subs	r0, #5
 80009e8:	4087      	lsls	r7, r0
 80009ea:	4285      	cmp	r5, r0
 80009ec:	dc21      	bgt.n	8000a32 <__aeabi_fsub+0x1e6>
 80009ee:	003b      	movs	r3, r7
 80009f0:	2120      	movs	r1, #32
 80009f2:	1b42      	subs	r2, r0, r5
 80009f4:	3201      	adds	r2, #1
 80009f6:	40d3      	lsrs	r3, r2
 80009f8:	1a8a      	subs	r2, r1, r2
 80009fa:	4097      	lsls	r7, r2
 80009fc:	1e7a      	subs	r2, r7, #1
 80009fe:	4197      	sbcs	r7, r2
 8000a00:	2200      	movs	r2, #0
 8000a02:	433b      	orrs	r3, r7
 8000a04:	0759      	lsls	r1, r3, #29
 8000a06:	d000      	beq.n	8000a0a <__aeabi_fsub+0x1be>
 8000a08:	e78b      	b.n	8000922 <__aeabi_fsub+0xd6>
 8000a0a:	e78f      	b.n	800092c <__aeabi_fsub+0xe0>
 8000a0c:	20fe      	movs	r0, #254	@ 0xfe
 8000a0e:	1c6a      	adds	r2, r5, #1
 8000a10:	4210      	tst	r0, r2
 8000a12:	d112      	bne.n	8000a3a <__aeabi_fsub+0x1ee>
 8000a14:	2d00      	cmp	r5, #0
 8000a16:	d152      	bne.n	8000abe <__aeabi_fsub+0x272>
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d07c      	beq.n	8000b16 <__aeabi_fsub+0x2ca>
 8000a1c:	2e00      	cmp	r6, #0
 8000a1e:	d0bb      	beq.n	8000998 <__aeabi_fsub+0x14c>
 8000a20:	1b9a      	subs	r2, r3, r6
 8000a22:	0150      	lsls	r0, r2, #5
 8000a24:	d400      	bmi.n	8000a28 <__aeabi_fsub+0x1dc>
 8000a26:	e08b      	b.n	8000b40 <__aeabi_fsub+0x2f4>
 8000a28:	2401      	movs	r4, #1
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	1af3      	subs	r3, r6, r3
 8000a2e:	400c      	ands	r4, r1
 8000a30:	e7e8      	b.n	8000a04 <__aeabi_fsub+0x1b8>
 8000a32:	4b56      	ldr	r3, [pc, #344]	@ (8000b8c <__aeabi_fsub+0x340>)
 8000a34:	1a2a      	subs	r2, r5, r0
 8000a36:	403b      	ands	r3, r7
 8000a38:	e7e4      	b.n	8000a04 <__aeabi_fsub+0x1b8>
 8000a3a:	1b9f      	subs	r7, r3, r6
 8000a3c:	017a      	lsls	r2, r7, #5
 8000a3e:	d446      	bmi.n	8000ace <__aeabi_fsub+0x282>
 8000a40:	2f00      	cmp	r7, #0
 8000a42:	d1cd      	bne.n	80009e0 <__aeabi_fsub+0x194>
 8000a44:	2400      	movs	r4, #0
 8000a46:	2000      	movs	r0, #0
 8000a48:	2300      	movs	r3, #0
 8000a4a:	e777      	b.n	800093c <__aeabi_fsub+0xf0>
 8000a4c:	199b      	adds	r3, r3, r6
 8000a4e:	2501      	movs	r5, #1
 8000a50:	3201      	adds	r2, #1
 8000a52:	0159      	lsls	r1, r3, #5
 8000a54:	d400      	bmi.n	8000a58 <__aeabi_fsub+0x20c>
 8000a56:	e760      	b.n	800091a <__aeabi_fsub+0xce>
 8000a58:	2101      	movs	r1, #1
 8000a5a:	484d      	ldr	r0, [pc, #308]	@ (8000b90 <__aeabi_fsub+0x344>)
 8000a5c:	4019      	ands	r1, r3
 8000a5e:	085b      	lsrs	r3, r3, #1
 8000a60:	4003      	ands	r3, r0
 8000a62:	430b      	orrs	r3, r1
 8000a64:	e7ce      	b.n	8000a04 <__aeabi_fsub+0x1b8>
 8000a66:	1e57      	subs	r7, r2, #1
 8000a68:	2a01      	cmp	r2, #1
 8000a6a:	d05a      	beq.n	8000b22 <__aeabi_fsub+0x2d6>
 8000a6c:	000c      	movs	r4, r1
 8000a6e:	2aff      	cmp	r2, #255	@ 0xff
 8000a70:	d033      	beq.n	8000ada <__aeabi_fsub+0x28e>
 8000a72:	2201      	movs	r2, #1
 8000a74:	2f1b      	cmp	r7, #27
 8000a76:	dc07      	bgt.n	8000a88 <__aeabi_fsub+0x23c>
 8000a78:	2120      	movs	r1, #32
 8000a7a:	1bc9      	subs	r1, r1, r7
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	408b      	lsls	r3, r1
 8000a80:	40fa      	lsrs	r2, r7
 8000a82:	1e59      	subs	r1, r3, #1
 8000a84:	418b      	sbcs	r3, r1
 8000a86:	431a      	orrs	r2, r3
 8000a88:	0005      	movs	r5, r0
 8000a8a:	1ab3      	subs	r3, r6, r2
 8000a8c:	e743      	b.n	8000916 <__aeabi_fsub+0xca>
 8000a8e:	2d00      	cmp	r5, #0
 8000a90:	d123      	bne.n	8000ada <__aeabi_fsub+0x28e>
 8000a92:	22ff      	movs	r2, #255	@ 0xff
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d09b      	beq.n	80009d0 <__aeabi_fsub+0x184>
 8000a98:	1e51      	subs	r1, r2, #1
 8000a9a:	2a01      	cmp	r2, #1
 8000a9c:	d0d6      	beq.n	8000a4c <__aeabi_fsub+0x200>
 8000a9e:	2aff      	cmp	r2, #255	@ 0xff
 8000aa0:	d01b      	beq.n	8000ada <__aeabi_fsub+0x28e>
 8000aa2:	291b      	cmp	r1, #27
 8000aa4:	dd2c      	ble.n	8000b00 <__aeabi_fsub+0x2b4>
 8000aa6:	0002      	movs	r2, r0
 8000aa8:	1c73      	adds	r3, r6, #1
 8000aaa:	e73a      	b.n	8000922 <__aeabi_fsub+0xd6>
 8000aac:	2aff      	cmp	r2, #255	@ 0xff
 8000aae:	d088      	beq.n	80009c2 <__aeabi_fsub+0x176>
 8000ab0:	199b      	adds	r3, r3, r6
 8000ab2:	085b      	lsrs	r3, r3, #1
 8000ab4:	0759      	lsls	r1, r3, #29
 8000ab6:	d000      	beq.n	8000aba <__aeabi_fsub+0x26e>
 8000ab8:	e733      	b.n	8000922 <__aeabi_fsub+0xd6>
 8000aba:	08db      	lsrs	r3, r3, #3
 8000abc:	e76e      	b.n	800099c <__aeabi_fsub+0x150>
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d110      	bne.n	8000ae4 <__aeabi_fsub+0x298>
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d043      	beq.n	8000b4e <__aeabi_fsub+0x302>
 8000ac6:	2401      	movs	r4, #1
 8000ac8:	0033      	movs	r3, r6
 8000aca:	400c      	ands	r4, r1
 8000acc:	e706      	b.n	80008dc <__aeabi_fsub+0x90>
 8000ace:	2401      	movs	r4, #1
 8000ad0:	1af7      	subs	r7, r6, r3
 8000ad2:	400c      	ands	r4, r1
 8000ad4:	e784      	b.n	80009e0 <__aeabi_fsub+0x194>
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d104      	bne.n	8000ae4 <__aeabi_fsub+0x298>
 8000ada:	0033      	movs	r3, r6
 8000adc:	e6fe      	b.n	80008dc <__aeabi_fsub+0x90>
 8000ade:	2501      	movs	r5, #1
 8000ae0:	1b9b      	subs	r3, r3, r6
 8000ae2:	e718      	b.n	8000916 <__aeabi_fsub+0xca>
 8000ae4:	2e00      	cmp	r6, #0
 8000ae6:	d100      	bne.n	8000aea <__aeabi_fsub+0x29e>
 8000ae8:	e6f8      	b.n	80008dc <__aeabi_fsub+0x90>
 8000aea:	2280      	movs	r2, #128	@ 0x80
 8000aec:	03d2      	lsls	r2, r2, #15
 8000aee:	4297      	cmp	r7, r2
 8000af0:	d304      	bcc.n	8000afc <__aeabi_fsub+0x2b0>
 8000af2:	4594      	cmp	ip, r2
 8000af4:	d202      	bcs.n	8000afc <__aeabi_fsub+0x2b0>
 8000af6:	2401      	movs	r4, #1
 8000af8:	0033      	movs	r3, r6
 8000afa:	400c      	ands	r4, r1
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	e6f1      	b.n	80008e4 <__aeabi_fsub+0x98>
 8000b00:	001a      	movs	r2, r3
 8000b02:	2520      	movs	r5, #32
 8000b04:	40ca      	lsrs	r2, r1
 8000b06:	1a69      	subs	r1, r5, r1
 8000b08:	408b      	lsls	r3, r1
 8000b0a:	1e59      	subs	r1, r3, #1
 8000b0c:	418b      	sbcs	r3, r1
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	0005      	movs	r5, r0
 8000b12:	199b      	adds	r3, r3, r6
 8000b14:	e750      	b.n	80009b8 <__aeabi_fsub+0x16c>
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d094      	beq.n	8000a44 <__aeabi_fsub+0x1f8>
 8000b1a:	2401      	movs	r4, #1
 8000b1c:	0033      	movs	r3, r6
 8000b1e:	400c      	ands	r4, r1
 8000b20:	e73a      	b.n	8000998 <__aeabi_fsub+0x14c>
 8000b22:	000c      	movs	r4, r1
 8000b24:	2501      	movs	r5, #1
 8000b26:	1af3      	subs	r3, r6, r3
 8000b28:	e6f5      	b.n	8000916 <__aeabi_fsub+0xca>
 8000b2a:	0033      	movs	r3, r6
 8000b2c:	e734      	b.n	8000998 <__aeabi_fsub+0x14c>
 8000b2e:	199b      	adds	r3, r3, r6
 8000b30:	2200      	movs	r2, #0
 8000b32:	0159      	lsls	r1, r3, #5
 8000b34:	d5c1      	bpl.n	8000aba <__aeabi_fsub+0x26e>
 8000b36:	4a15      	ldr	r2, [pc, #84]	@ (8000b8c <__aeabi_fsub+0x340>)
 8000b38:	4013      	ands	r3, r2
 8000b3a:	08db      	lsrs	r3, r3, #3
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	e72d      	b.n	800099c <__aeabi_fsub+0x150>
 8000b40:	2a00      	cmp	r2, #0
 8000b42:	d100      	bne.n	8000b46 <__aeabi_fsub+0x2fa>
 8000b44:	e77e      	b.n	8000a44 <__aeabi_fsub+0x1f8>
 8000b46:	0013      	movs	r3, r2
 8000b48:	2200      	movs	r2, #0
 8000b4a:	08db      	lsrs	r3, r3, #3
 8000b4c:	e726      	b.n	800099c <__aeabi_fsub+0x150>
 8000b4e:	2380      	movs	r3, #128	@ 0x80
 8000b50:	2400      	movs	r4, #0
 8000b52:	20ff      	movs	r0, #255	@ 0xff
 8000b54:	03db      	lsls	r3, r3, #15
 8000b56:	e6f1      	b.n	800093c <__aeabi_fsub+0xf0>
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fsub+0x312>
 8000b5c:	e756      	b.n	8000a0c <__aeabi_fsub+0x1c0>
 8000b5e:	1b47      	subs	r7, r0, r5
 8000b60:	003a      	movs	r2, r7
 8000b62:	2d00      	cmp	r5, #0
 8000b64:	d100      	bne.n	8000b68 <__aeabi_fsub+0x31c>
 8000b66:	e730      	b.n	80009ca <__aeabi_fsub+0x17e>
 8000b68:	2280      	movs	r2, #128	@ 0x80
 8000b6a:	04d2      	lsls	r2, r2, #19
 8000b6c:	000c      	movs	r4, r1
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	e77f      	b.n	8000a72 <__aeabi_fsub+0x226>
 8000b72:	2a00      	cmp	r2, #0
 8000b74:	d100      	bne.n	8000b78 <__aeabi_fsub+0x32c>
 8000b76:	e701      	b.n	800097c <__aeabi_fsub+0x130>
 8000b78:	1b41      	subs	r1, r0, r5
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d101      	bne.n	8000b82 <__aeabi_fsub+0x336>
 8000b7e:	000a      	movs	r2, r1
 8000b80:	e788      	b.n	8000a94 <__aeabi_fsub+0x248>
 8000b82:	2280      	movs	r2, #128	@ 0x80
 8000b84:	04d2      	lsls	r2, r2, #19
 8000b86:	4313      	orrs	r3, r2
 8000b88:	e78b      	b.n	8000aa2 <__aeabi_fsub+0x256>
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	fbffffff 	.word	0xfbffffff
 8000b90:	7dffffff 	.word	0x7dffffff

08000b94 <__aeabi_f2iz>:
 8000b94:	0241      	lsls	r1, r0, #9
 8000b96:	0042      	lsls	r2, r0, #1
 8000b98:	0fc3      	lsrs	r3, r0, #31
 8000b9a:	0a49      	lsrs	r1, r1, #9
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	0e12      	lsrs	r2, r2, #24
 8000ba0:	2a7e      	cmp	r2, #126	@ 0x7e
 8000ba2:	dd03      	ble.n	8000bac <__aeabi_f2iz+0x18>
 8000ba4:	2a9d      	cmp	r2, #157	@ 0x9d
 8000ba6:	dd02      	ble.n	8000bae <__aeabi_f2iz+0x1a>
 8000ba8:	4a09      	ldr	r2, [pc, #36]	@ (8000bd0 <__aeabi_f2iz+0x3c>)
 8000baa:	1898      	adds	r0, r3, r2
 8000bac:	4770      	bx	lr
 8000bae:	2080      	movs	r0, #128	@ 0x80
 8000bb0:	0400      	lsls	r0, r0, #16
 8000bb2:	4301      	orrs	r1, r0
 8000bb4:	2a95      	cmp	r2, #149	@ 0x95
 8000bb6:	dc07      	bgt.n	8000bc8 <__aeabi_f2iz+0x34>
 8000bb8:	2096      	movs	r0, #150	@ 0x96
 8000bba:	1a82      	subs	r2, r0, r2
 8000bbc:	40d1      	lsrs	r1, r2
 8000bbe:	4248      	negs	r0, r1
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d1f3      	bne.n	8000bac <__aeabi_f2iz+0x18>
 8000bc4:	0008      	movs	r0, r1
 8000bc6:	e7f1      	b.n	8000bac <__aeabi_f2iz+0x18>
 8000bc8:	3a96      	subs	r2, #150	@ 0x96
 8000bca:	4091      	lsls	r1, r2
 8000bcc:	e7f7      	b.n	8000bbe <__aeabi_f2iz+0x2a>
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	7fffffff 	.word	0x7fffffff

08000bd4 <__aeabi_d2f>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	004b      	lsls	r3, r1, #1
 8000bd8:	030f      	lsls	r7, r1, #12
 8000bda:	0d5b      	lsrs	r3, r3, #21
 8000bdc:	4c3b      	ldr	r4, [pc, #236]	@ (8000ccc <__aeabi_d2f+0xf8>)
 8000bde:	0f45      	lsrs	r5, r0, #29
 8000be0:	b083      	sub	sp, #12
 8000be2:	0a7f      	lsrs	r7, r7, #9
 8000be4:	1c5e      	adds	r6, r3, #1
 8000be6:	432f      	orrs	r7, r5
 8000be8:	9000      	str	r0, [sp, #0]
 8000bea:	9101      	str	r1, [sp, #4]
 8000bec:	0fca      	lsrs	r2, r1, #31
 8000bee:	00c5      	lsls	r5, r0, #3
 8000bf0:	4226      	tst	r6, r4
 8000bf2:	d00b      	beq.n	8000c0c <__aeabi_d2f+0x38>
 8000bf4:	4936      	ldr	r1, [pc, #216]	@ (8000cd0 <__aeabi_d2f+0xfc>)
 8000bf6:	185c      	adds	r4, r3, r1
 8000bf8:	2cfe      	cmp	r4, #254	@ 0xfe
 8000bfa:	dd13      	ble.n	8000c24 <__aeabi_d2f+0x50>
 8000bfc:	20ff      	movs	r0, #255	@ 0xff
 8000bfe:	2300      	movs	r3, #0
 8000c00:	05c0      	lsls	r0, r0, #23
 8000c02:	4318      	orrs	r0, r3
 8000c04:	07d2      	lsls	r2, r2, #31
 8000c06:	4310      	orrs	r0, r2
 8000c08:	b003      	add	sp, #12
 8000c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d102      	bne.n	8000c16 <__aeabi_d2f+0x42>
 8000c10:	2000      	movs	r0, #0
 8000c12:	2300      	movs	r3, #0
 8000c14:	e7f4      	b.n	8000c00 <__aeabi_d2f+0x2c>
 8000c16:	433d      	orrs	r5, r7
 8000c18:	d0f0      	beq.n	8000bfc <__aeabi_d2f+0x28>
 8000c1a:	2380      	movs	r3, #128	@ 0x80
 8000c1c:	03db      	lsls	r3, r3, #15
 8000c1e:	20ff      	movs	r0, #255	@ 0xff
 8000c20:	433b      	orrs	r3, r7
 8000c22:	e7ed      	b.n	8000c00 <__aeabi_d2f+0x2c>
 8000c24:	2c00      	cmp	r4, #0
 8000c26:	dd14      	ble.n	8000c52 <__aeabi_d2f+0x7e>
 8000c28:	9b00      	ldr	r3, [sp, #0]
 8000c2a:	00ff      	lsls	r7, r7, #3
 8000c2c:	019b      	lsls	r3, r3, #6
 8000c2e:	1e58      	subs	r0, r3, #1
 8000c30:	4183      	sbcs	r3, r0
 8000c32:	0f69      	lsrs	r1, r5, #29
 8000c34:	433b      	orrs	r3, r7
 8000c36:	430b      	orrs	r3, r1
 8000c38:	0759      	lsls	r1, r3, #29
 8000c3a:	d041      	beq.n	8000cc0 <__aeabi_d2f+0xec>
 8000c3c:	210f      	movs	r1, #15
 8000c3e:	4019      	ands	r1, r3
 8000c40:	2904      	cmp	r1, #4
 8000c42:	d028      	beq.n	8000c96 <__aeabi_d2f+0xc2>
 8000c44:	3304      	adds	r3, #4
 8000c46:	0159      	lsls	r1, r3, #5
 8000c48:	d525      	bpl.n	8000c96 <__aeabi_d2f+0xc2>
 8000c4a:	3401      	adds	r4, #1
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	b2e0      	uxtb	r0, r4
 8000c50:	e7d6      	b.n	8000c00 <__aeabi_d2f+0x2c>
 8000c52:	0021      	movs	r1, r4
 8000c54:	3117      	adds	r1, #23
 8000c56:	dbdb      	blt.n	8000c10 <__aeabi_d2f+0x3c>
 8000c58:	2180      	movs	r1, #128	@ 0x80
 8000c5a:	201e      	movs	r0, #30
 8000c5c:	0409      	lsls	r1, r1, #16
 8000c5e:	4339      	orrs	r1, r7
 8000c60:	1b00      	subs	r0, r0, r4
 8000c62:	281f      	cmp	r0, #31
 8000c64:	dd1b      	ble.n	8000c9e <__aeabi_d2f+0xca>
 8000c66:	2602      	movs	r6, #2
 8000c68:	4276      	negs	r6, r6
 8000c6a:	1b34      	subs	r4, r6, r4
 8000c6c:	000e      	movs	r6, r1
 8000c6e:	40e6      	lsrs	r6, r4
 8000c70:	0034      	movs	r4, r6
 8000c72:	2820      	cmp	r0, #32
 8000c74:	d004      	beq.n	8000c80 <__aeabi_d2f+0xac>
 8000c76:	4817      	ldr	r0, [pc, #92]	@ (8000cd4 <__aeabi_d2f+0x100>)
 8000c78:	4684      	mov	ip, r0
 8000c7a:	4463      	add	r3, ip
 8000c7c:	4099      	lsls	r1, r3
 8000c7e:	430d      	orrs	r5, r1
 8000c80:	002b      	movs	r3, r5
 8000c82:	1e59      	subs	r1, r3, #1
 8000c84:	418b      	sbcs	r3, r1
 8000c86:	4323      	orrs	r3, r4
 8000c88:	0759      	lsls	r1, r3, #29
 8000c8a:	d015      	beq.n	8000cb8 <__aeabi_d2f+0xe4>
 8000c8c:	210f      	movs	r1, #15
 8000c8e:	2400      	movs	r4, #0
 8000c90:	4019      	ands	r1, r3
 8000c92:	2904      	cmp	r1, #4
 8000c94:	d117      	bne.n	8000cc6 <__aeabi_d2f+0xf2>
 8000c96:	019b      	lsls	r3, r3, #6
 8000c98:	0a5b      	lsrs	r3, r3, #9
 8000c9a:	b2e0      	uxtb	r0, r4
 8000c9c:	e7b0      	b.n	8000c00 <__aeabi_d2f+0x2c>
 8000c9e:	4c0e      	ldr	r4, [pc, #56]	@ (8000cd8 <__aeabi_d2f+0x104>)
 8000ca0:	191c      	adds	r4, r3, r4
 8000ca2:	002b      	movs	r3, r5
 8000ca4:	40a5      	lsls	r5, r4
 8000ca6:	40c3      	lsrs	r3, r0
 8000ca8:	40a1      	lsls	r1, r4
 8000caa:	1e68      	subs	r0, r5, #1
 8000cac:	4185      	sbcs	r5, r0
 8000cae:	4329      	orrs	r1, r5
 8000cb0:	430b      	orrs	r3, r1
 8000cb2:	2400      	movs	r4, #0
 8000cb4:	0759      	lsls	r1, r3, #29
 8000cb6:	d1c1      	bne.n	8000c3c <__aeabi_d2f+0x68>
 8000cb8:	019b      	lsls	r3, r3, #6
 8000cba:	2000      	movs	r0, #0
 8000cbc:	0a5b      	lsrs	r3, r3, #9
 8000cbe:	e79f      	b.n	8000c00 <__aeabi_d2f+0x2c>
 8000cc0:	08db      	lsrs	r3, r3, #3
 8000cc2:	b2e0      	uxtb	r0, r4
 8000cc4:	e79c      	b.n	8000c00 <__aeabi_d2f+0x2c>
 8000cc6:	3304      	adds	r3, #4
 8000cc8:	e7e5      	b.n	8000c96 <__aeabi_d2f+0xc2>
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	000007fe 	.word	0x000007fe
 8000cd0:	fffffc80 	.word	0xfffffc80
 8000cd4:	fffffca2 	.word	0xfffffca2
 8000cd8:	fffffc82 	.word	0xfffffc82

08000cdc <__aeabi_cfrcmple>:
 8000cdc:	4684      	mov	ip, r0
 8000cde:	0008      	movs	r0, r1
 8000ce0:	4661      	mov	r1, ip
 8000ce2:	e7ff      	b.n	8000ce4 <__aeabi_cfcmpeq>

08000ce4 <__aeabi_cfcmpeq>:
 8000ce4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000ce6:	f000 f8d5 	bl	8000e94 <__lesf2>
 8000cea:	2800      	cmp	r0, #0
 8000cec:	d401      	bmi.n	8000cf2 <__aeabi_cfcmpeq+0xe>
 8000cee:	2100      	movs	r1, #0
 8000cf0:	42c8      	cmn	r0, r1
 8000cf2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000cf4 <__aeabi_fcmpeq>:
 8000cf4:	b510      	push	{r4, lr}
 8000cf6:	f000 f855 	bl	8000da4 <__eqsf2>
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	3001      	adds	r0, #1
 8000cfe:	bd10      	pop	{r4, pc}

08000d00 <__aeabi_fcmplt>:
 8000d00:	b510      	push	{r4, lr}
 8000d02:	f000 f8c7 	bl	8000e94 <__lesf2>
 8000d06:	2800      	cmp	r0, #0
 8000d08:	db01      	blt.n	8000d0e <__aeabi_fcmplt+0xe>
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	bd10      	pop	{r4, pc}
 8000d0e:	2001      	movs	r0, #1
 8000d10:	bd10      	pop	{r4, pc}
 8000d12:	46c0      	nop			@ (mov r8, r8)

08000d14 <__aeabi_fcmple>:
 8000d14:	b510      	push	{r4, lr}
 8000d16:	f000 f8bd 	bl	8000e94 <__lesf2>
 8000d1a:	2800      	cmp	r0, #0
 8000d1c:	dd01      	ble.n	8000d22 <__aeabi_fcmple+0xe>
 8000d1e:	2000      	movs	r0, #0
 8000d20:	bd10      	pop	{r4, pc}
 8000d22:	2001      	movs	r0, #1
 8000d24:	bd10      	pop	{r4, pc}
 8000d26:	46c0      	nop			@ (mov r8, r8)

08000d28 <__aeabi_fcmpgt>:
 8000d28:	b510      	push	{r4, lr}
 8000d2a:	f000 f863 	bl	8000df4 <__gesf2>
 8000d2e:	2800      	cmp	r0, #0
 8000d30:	dc01      	bgt.n	8000d36 <__aeabi_fcmpgt+0xe>
 8000d32:	2000      	movs	r0, #0
 8000d34:	bd10      	pop	{r4, pc}
 8000d36:	2001      	movs	r0, #1
 8000d38:	bd10      	pop	{r4, pc}
 8000d3a:	46c0      	nop			@ (mov r8, r8)

08000d3c <__aeabi_fcmpge>:
 8000d3c:	b510      	push	{r4, lr}
 8000d3e:	f000 f859 	bl	8000df4 <__gesf2>
 8000d42:	2800      	cmp	r0, #0
 8000d44:	da01      	bge.n	8000d4a <__aeabi_fcmpge+0xe>
 8000d46:	2000      	movs	r0, #0
 8000d48:	bd10      	pop	{r4, pc}
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	bd10      	pop	{r4, pc}
 8000d4e:	46c0      	nop			@ (mov r8, r8)

08000d50 <__clzsi2>:
 8000d50:	211c      	movs	r1, #28
 8000d52:	2301      	movs	r3, #1
 8000d54:	041b      	lsls	r3, r3, #16
 8000d56:	4298      	cmp	r0, r3
 8000d58:	d301      	bcc.n	8000d5e <__clzsi2+0xe>
 8000d5a:	0c00      	lsrs	r0, r0, #16
 8000d5c:	3910      	subs	r1, #16
 8000d5e:	0a1b      	lsrs	r3, r3, #8
 8000d60:	4298      	cmp	r0, r3
 8000d62:	d301      	bcc.n	8000d68 <__clzsi2+0x18>
 8000d64:	0a00      	lsrs	r0, r0, #8
 8000d66:	3908      	subs	r1, #8
 8000d68:	091b      	lsrs	r3, r3, #4
 8000d6a:	4298      	cmp	r0, r3
 8000d6c:	d301      	bcc.n	8000d72 <__clzsi2+0x22>
 8000d6e:	0900      	lsrs	r0, r0, #4
 8000d70:	3904      	subs	r1, #4
 8000d72:	a202      	add	r2, pc, #8	@ (adr r2, 8000d7c <__clzsi2+0x2c>)
 8000d74:	5c10      	ldrb	r0, [r2, r0]
 8000d76:	1840      	adds	r0, r0, r1
 8000d78:	4770      	bx	lr
 8000d7a:	46c0      	nop			@ (mov r8, r8)
 8000d7c:	02020304 	.word	0x02020304
 8000d80:	01010101 	.word	0x01010101
	...

08000d8c <__clzdi2>:
 8000d8c:	b510      	push	{r4, lr}
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d103      	bne.n	8000d9a <__clzdi2+0xe>
 8000d92:	f7ff ffdd 	bl	8000d50 <__clzsi2>
 8000d96:	3020      	adds	r0, #32
 8000d98:	e002      	b.n	8000da0 <__clzdi2+0x14>
 8000d9a:	0008      	movs	r0, r1
 8000d9c:	f7ff ffd8 	bl	8000d50 <__clzsi2>
 8000da0:	bd10      	pop	{r4, pc}
 8000da2:	46c0      	nop			@ (mov r8, r8)

08000da4 <__eqsf2>:
 8000da4:	b570      	push	{r4, r5, r6, lr}
 8000da6:	0042      	lsls	r2, r0, #1
 8000da8:	024e      	lsls	r6, r1, #9
 8000daa:	004c      	lsls	r4, r1, #1
 8000dac:	0245      	lsls	r5, r0, #9
 8000dae:	0a6d      	lsrs	r5, r5, #9
 8000db0:	0e12      	lsrs	r2, r2, #24
 8000db2:	0fc3      	lsrs	r3, r0, #31
 8000db4:	0a76      	lsrs	r6, r6, #9
 8000db6:	0e24      	lsrs	r4, r4, #24
 8000db8:	0fc9      	lsrs	r1, r1, #31
 8000dba:	2aff      	cmp	r2, #255	@ 0xff
 8000dbc:	d010      	beq.n	8000de0 <__eqsf2+0x3c>
 8000dbe:	2cff      	cmp	r4, #255	@ 0xff
 8000dc0:	d00c      	beq.n	8000ddc <__eqsf2+0x38>
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	42a2      	cmp	r2, r4
 8000dc6:	d10a      	bne.n	8000dde <__eqsf2+0x3a>
 8000dc8:	42b5      	cmp	r5, r6
 8000dca:	d108      	bne.n	8000dde <__eqsf2+0x3a>
 8000dcc:	428b      	cmp	r3, r1
 8000dce:	d00f      	beq.n	8000df0 <__eqsf2+0x4c>
 8000dd0:	2a00      	cmp	r2, #0
 8000dd2:	d104      	bne.n	8000dde <__eqsf2+0x3a>
 8000dd4:	0028      	movs	r0, r5
 8000dd6:	1e43      	subs	r3, r0, #1
 8000dd8:	4198      	sbcs	r0, r3
 8000dda:	e000      	b.n	8000dde <__eqsf2+0x3a>
 8000ddc:	2001      	movs	r0, #1
 8000dde:	bd70      	pop	{r4, r5, r6, pc}
 8000de0:	2001      	movs	r0, #1
 8000de2:	2cff      	cmp	r4, #255	@ 0xff
 8000de4:	d1fb      	bne.n	8000dde <__eqsf2+0x3a>
 8000de6:	4335      	orrs	r5, r6
 8000de8:	d1f9      	bne.n	8000dde <__eqsf2+0x3a>
 8000dea:	404b      	eors	r3, r1
 8000dec:	0018      	movs	r0, r3
 8000dee:	e7f6      	b.n	8000dde <__eqsf2+0x3a>
 8000df0:	2000      	movs	r0, #0
 8000df2:	e7f4      	b.n	8000dde <__eqsf2+0x3a>

08000df4 <__gesf2>:
 8000df4:	b530      	push	{r4, r5, lr}
 8000df6:	0042      	lsls	r2, r0, #1
 8000df8:	0244      	lsls	r4, r0, #9
 8000dfa:	024d      	lsls	r5, r1, #9
 8000dfc:	0fc3      	lsrs	r3, r0, #31
 8000dfe:	0048      	lsls	r0, r1, #1
 8000e00:	0a64      	lsrs	r4, r4, #9
 8000e02:	0e12      	lsrs	r2, r2, #24
 8000e04:	0a6d      	lsrs	r5, r5, #9
 8000e06:	0e00      	lsrs	r0, r0, #24
 8000e08:	0fc9      	lsrs	r1, r1, #31
 8000e0a:	2aff      	cmp	r2, #255	@ 0xff
 8000e0c:	d019      	beq.n	8000e42 <__gesf2+0x4e>
 8000e0e:	28ff      	cmp	r0, #255	@ 0xff
 8000e10:	d00b      	beq.n	8000e2a <__gesf2+0x36>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d11e      	bne.n	8000e54 <__gesf2+0x60>
 8000e16:	2800      	cmp	r0, #0
 8000e18:	d10b      	bne.n	8000e32 <__gesf2+0x3e>
 8000e1a:	2d00      	cmp	r5, #0
 8000e1c:	d027      	beq.n	8000e6e <__gesf2+0x7a>
 8000e1e:	2c00      	cmp	r4, #0
 8000e20:	d134      	bne.n	8000e8c <__gesf2+0x98>
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d02f      	beq.n	8000e86 <__gesf2+0x92>
 8000e26:	0008      	movs	r0, r1
 8000e28:	bd30      	pop	{r4, r5, pc}
 8000e2a:	2d00      	cmp	r5, #0
 8000e2c:	d128      	bne.n	8000e80 <__gesf2+0x8c>
 8000e2e:	2a00      	cmp	r2, #0
 8000e30:	d101      	bne.n	8000e36 <__gesf2+0x42>
 8000e32:	2c00      	cmp	r4, #0
 8000e34:	d0f5      	beq.n	8000e22 <__gesf2+0x2e>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d107      	bne.n	8000e4a <__gesf2+0x56>
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d023      	beq.n	8000e86 <__gesf2+0x92>
 8000e3e:	0018      	movs	r0, r3
 8000e40:	e7f2      	b.n	8000e28 <__gesf2+0x34>
 8000e42:	2c00      	cmp	r4, #0
 8000e44:	d11c      	bne.n	8000e80 <__gesf2+0x8c>
 8000e46:	28ff      	cmp	r0, #255	@ 0xff
 8000e48:	d014      	beq.n	8000e74 <__gesf2+0x80>
 8000e4a:	1e58      	subs	r0, r3, #1
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	4018      	ands	r0, r3
 8000e50:	3801      	subs	r0, #1
 8000e52:	e7e9      	b.n	8000e28 <__gesf2+0x34>
 8000e54:	2800      	cmp	r0, #0
 8000e56:	d0f8      	beq.n	8000e4a <__gesf2+0x56>
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d1f6      	bne.n	8000e4a <__gesf2+0x56>
 8000e5c:	4282      	cmp	r2, r0
 8000e5e:	dcf4      	bgt.n	8000e4a <__gesf2+0x56>
 8000e60:	dbeb      	blt.n	8000e3a <__gesf2+0x46>
 8000e62:	42ac      	cmp	r4, r5
 8000e64:	d8f1      	bhi.n	8000e4a <__gesf2+0x56>
 8000e66:	2000      	movs	r0, #0
 8000e68:	42ac      	cmp	r4, r5
 8000e6a:	d2dd      	bcs.n	8000e28 <__gesf2+0x34>
 8000e6c:	e7e5      	b.n	8000e3a <__gesf2+0x46>
 8000e6e:	2c00      	cmp	r4, #0
 8000e70:	d0da      	beq.n	8000e28 <__gesf2+0x34>
 8000e72:	e7ea      	b.n	8000e4a <__gesf2+0x56>
 8000e74:	2d00      	cmp	r5, #0
 8000e76:	d103      	bne.n	8000e80 <__gesf2+0x8c>
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	d1e6      	bne.n	8000e4a <__gesf2+0x56>
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	e7d3      	b.n	8000e28 <__gesf2+0x34>
 8000e80:	2002      	movs	r0, #2
 8000e82:	4240      	negs	r0, r0
 8000e84:	e7d0      	b.n	8000e28 <__gesf2+0x34>
 8000e86:	2001      	movs	r0, #1
 8000e88:	4240      	negs	r0, r0
 8000e8a:	e7cd      	b.n	8000e28 <__gesf2+0x34>
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d0e8      	beq.n	8000e62 <__gesf2+0x6e>
 8000e90:	e7db      	b.n	8000e4a <__gesf2+0x56>
 8000e92:	46c0      	nop			@ (mov r8, r8)

08000e94 <__lesf2>:
 8000e94:	b530      	push	{r4, r5, lr}
 8000e96:	0042      	lsls	r2, r0, #1
 8000e98:	0244      	lsls	r4, r0, #9
 8000e9a:	024d      	lsls	r5, r1, #9
 8000e9c:	0fc3      	lsrs	r3, r0, #31
 8000e9e:	0048      	lsls	r0, r1, #1
 8000ea0:	0a64      	lsrs	r4, r4, #9
 8000ea2:	0e12      	lsrs	r2, r2, #24
 8000ea4:	0a6d      	lsrs	r5, r5, #9
 8000ea6:	0e00      	lsrs	r0, r0, #24
 8000ea8:	0fc9      	lsrs	r1, r1, #31
 8000eaa:	2aff      	cmp	r2, #255	@ 0xff
 8000eac:	d01a      	beq.n	8000ee4 <__lesf2+0x50>
 8000eae:	28ff      	cmp	r0, #255	@ 0xff
 8000eb0:	d00e      	beq.n	8000ed0 <__lesf2+0x3c>
 8000eb2:	2a00      	cmp	r2, #0
 8000eb4:	d11e      	bne.n	8000ef4 <__lesf2+0x60>
 8000eb6:	2800      	cmp	r0, #0
 8000eb8:	d10e      	bne.n	8000ed8 <__lesf2+0x44>
 8000eba:	2d00      	cmp	r5, #0
 8000ebc:	d02a      	beq.n	8000f14 <__lesf2+0x80>
 8000ebe:	2c00      	cmp	r4, #0
 8000ec0:	d00c      	beq.n	8000edc <__lesf2+0x48>
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d01d      	beq.n	8000f02 <__lesf2+0x6e>
 8000ec6:	1e58      	subs	r0, r3, #1
 8000ec8:	2302      	movs	r3, #2
 8000eca:	4018      	ands	r0, r3
 8000ecc:	3801      	subs	r0, #1
 8000ece:	e010      	b.n	8000ef2 <__lesf2+0x5e>
 8000ed0:	2d00      	cmp	r5, #0
 8000ed2:	d10d      	bne.n	8000ef0 <__lesf2+0x5c>
 8000ed4:	2a00      	cmp	r2, #0
 8000ed6:	d120      	bne.n	8000f1a <__lesf2+0x86>
 8000ed8:	2c00      	cmp	r4, #0
 8000eda:	d11e      	bne.n	8000f1a <__lesf2+0x86>
 8000edc:	2900      	cmp	r1, #0
 8000ede:	d023      	beq.n	8000f28 <__lesf2+0x94>
 8000ee0:	0008      	movs	r0, r1
 8000ee2:	e006      	b.n	8000ef2 <__lesf2+0x5e>
 8000ee4:	2c00      	cmp	r4, #0
 8000ee6:	d103      	bne.n	8000ef0 <__lesf2+0x5c>
 8000ee8:	28ff      	cmp	r0, #255	@ 0xff
 8000eea:	d1ec      	bne.n	8000ec6 <__lesf2+0x32>
 8000eec:	2d00      	cmp	r5, #0
 8000eee:	d017      	beq.n	8000f20 <__lesf2+0x8c>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	bd30      	pop	{r4, r5, pc}
 8000ef4:	2800      	cmp	r0, #0
 8000ef6:	d0e6      	beq.n	8000ec6 <__lesf2+0x32>
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	d1e4      	bne.n	8000ec6 <__lesf2+0x32>
 8000efc:	4282      	cmp	r2, r0
 8000efe:	dce2      	bgt.n	8000ec6 <__lesf2+0x32>
 8000f00:	db04      	blt.n	8000f0c <__lesf2+0x78>
 8000f02:	42ac      	cmp	r4, r5
 8000f04:	d8df      	bhi.n	8000ec6 <__lesf2+0x32>
 8000f06:	2000      	movs	r0, #0
 8000f08:	42ac      	cmp	r4, r5
 8000f0a:	d2f2      	bcs.n	8000ef2 <__lesf2+0x5e>
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d00b      	beq.n	8000f28 <__lesf2+0x94>
 8000f10:	0018      	movs	r0, r3
 8000f12:	e7ee      	b.n	8000ef2 <__lesf2+0x5e>
 8000f14:	2c00      	cmp	r4, #0
 8000f16:	d0ec      	beq.n	8000ef2 <__lesf2+0x5e>
 8000f18:	e7d5      	b.n	8000ec6 <__lesf2+0x32>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d1d3      	bne.n	8000ec6 <__lesf2+0x32>
 8000f1e:	e7f5      	b.n	8000f0c <__lesf2+0x78>
 8000f20:	2000      	movs	r0, #0
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d0e5      	beq.n	8000ef2 <__lesf2+0x5e>
 8000f26:	e7ce      	b.n	8000ec6 <__lesf2+0x32>
 8000f28:	2001      	movs	r0, #1
 8000f2a:	4240      	negs	r0, r0
 8000f2c:	e7e1      	b.n	8000ef2 <__lesf2+0x5e>
 8000f2e:	46c0      	nop			@ (mov r8, r8)

08000f30 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000f30:	b590      	push	{r4, r7, lr}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	0004      	movs	r4, r0
 8000f38:	0008      	movs	r0, r1
 8000f3a:	0011      	movs	r1, r2
 8000f3c:	1dbb      	adds	r3, r7, #6
 8000f3e:	1c22      	adds	r2, r4, #0
 8000f40:	801a      	strh	r2, [r3, #0]
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	1c02      	adds	r2, r0, #0
 8000f46:	801a      	strh	r2, [r3, #0]
 8000f48:	1cbb      	adds	r3, r7, #2
 8000f4a:	1c0a      	adds	r2, r1, #0
 8000f4c:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(y,x, color);
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	8818      	ldrh	r0, [r3, #0]
 8000f52:	1dbb      	adds	r3, r7, #6
 8000f54:	8819      	ldrh	r1, [r3, #0]
 8000f56:	1cbb      	adds	r3, r7, #2
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	001a      	movs	r2, r3
 8000f5c:	f000 fccc 	bl	80018f8 <ST7735_DrawPixel>
}
 8000f60:	46c0      	nop			@ (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b003      	add	sp, #12
 8000f66:	bd90      	pop	{r4, r7, pc}

08000f68 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000f68:	b5b0      	push	{r4, r5, r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af02      	add	r7, sp, #8
 8000f6e:	0005      	movs	r5, r0
 8000f70:	000c      	movs	r4, r1
 8000f72:	0010      	movs	r0, r2
 8000f74:	0019      	movs	r1, r3
 8000f76:	1dbb      	adds	r3, r7, #6
 8000f78:	1c2a      	adds	r2, r5, #0
 8000f7a:	801a      	strh	r2, [r3, #0]
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	1c22      	adds	r2, r4, #0
 8000f80:	801a      	strh	r2, [r3, #0]
 8000f82:	1cbb      	adds	r3, r7, #2
 8000f84:	1c02      	adds	r2, r0, #0
 8000f86:	801a      	strh	r2, [r3, #0]
 8000f88:	003b      	movs	r3, r7
 8000f8a:	1c0a      	adds	r2, r1, #0
 8000f8c:	801a      	strh	r2, [r3, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000f8e:	1dbb      	adds	r3, r7, #6
 8000f90:	8818      	ldrh	r0, [r3, #0]
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	8819      	ldrh	r1, [r3, #0]
 8000f96:	1cbb      	adds	r3, r7, #2
 8000f98:	881a      	ldrh	r2, [r3, #0]
 8000f9a:	003b      	movs	r3, r7
 8000f9c:	881c      	ldrh	r4, [r3, #0]
 8000f9e:	2318      	movs	r3, #24
 8000fa0:	18fb      	adds	r3, r7, r3
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	0023      	movs	r3, r4
 8000fa8:	f000 fcf4 	bl	8001994 <ST7735_FillRectangle>
}
 8000fac:	46c0      	nop			@ (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b002      	add	sp, #8
 8000fb2:	bdb0      	pop	{r4, r5, r7, pc}

08000fb4 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	0004      	movs	r4, r0
 8000fbc:	0008      	movs	r0, r1
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	1dbb      	adds	r3, r7, #6
 8000fc2:	1c22      	adds	r2, r4, #0
 8000fc4:	801a      	strh	r2, [r3, #0]
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	1c02      	adds	r2, r0, #0
 8000fca:	801a      	strh	r2, [r3, #0]
 8000fcc:	1cbb      	adds	r3, r7, #2
 8000fce:	1c0a      	adds	r2, r1, #0
 8000fd0:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 8000fd2:	1cbb      	adds	r3, r7, #2
 8000fd4:	881a      	ldrh	r2, [r3, #0]
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2100      	movs	r1, #0
 8000fda:	5e59      	ldrsh	r1, [r3, r1]
 8000fdc:	1dbb      	adds	r3, r7, #6
 8000fde:	2000      	movs	r0, #0
 8000fe0:	5e1b      	ldrsh	r3, [r3, r0]
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f7ff ffa4 	bl	8000f30 <drawPixel>
}
 8000fe8:	46c0      	nop			@ (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b003      	add	sp, #12
 8000fee:	bd90      	pop	{r4, r7, pc}

08000ff0 <drawString>:
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
void drawString(int16_t x, int16_t y, char* c, int16_t textColor, int16_t bgColor, uint8_t size, uint8_t spacing)
{
 8000ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ff2:	b089      	sub	sp, #36	@ 0x24
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	0004      	movs	r4, r0
 8000ff8:	0008      	movs	r0, r1
 8000ffa:	60ba      	str	r2, [r7, #8]
 8000ffc:	0019      	movs	r1, r3
 8000ffe:	230e      	movs	r3, #14
 8001000:	18fb      	adds	r3, r7, r3
 8001002:	1c22      	adds	r2, r4, #0
 8001004:	801a      	strh	r2, [r3, #0]
 8001006:	230c      	movs	r3, #12
 8001008:	18fb      	adds	r3, r7, r3
 800100a:	1c02      	adds	r2, r0, #0
 800100c:	801a      	strh	r2, [r3, #0]
 800100e:	1dbb      	adds	r3, r7, #6
 8001010:	1c0a      	adds	r2, r1, #0
 8001012:	801a      	strh	r2, [r3, #0]
	uint16_t i =0;
 8001014:	2316      	movs	r3, #22
 8001016:	18fb      	adds	r3, r7, r3
 8001018:	2200      	movs	r2, #0
 800101a:	801a      	strh	r2, [r3, #0]

	while(c[i])
 800101c:	e03f      	b.n	800109e <drawString+0xae>
	{
		drawChar(x, y, c[i], textColor, bgColor, size);
 800101e:	2516      	movs	r5, #22
 8001020:	197b      	adds	r3, r7, r5
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	18d3      	adds	r3, r2, r3
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	469c      	mov	ip, r3
 800102c:	1dbb      	adds	r3, r7, #6
 800102e:	2400      	movs	r4, #0
 8001030:	5f1c      	ldrsh	r4, [r3, r4]
 8001032:	230c      	movs	r3, #12
 8001034:	18fb      	adds	r3, r7, r3
 8001036:	2100      	movs	r1, #0
 8001038:	5e59      	ldrsh	r1, [r3, r1]
 800103a:	260e      	movs	r6, #14
 800103c:	19bb      	adds	r3, r7, r6
 800103e:	2000      	movs	r0, #0
 8001040:	5e18      	ldrsh	r0, [r3, r0]
 8001042:	232c      	movs	r3, #44	@ 0x2c
 8001044:	2208      	movs	r2, #8
 8001046:	189b      	adds	r3, r3, r2
 8001048:	19db      	adds	r3, r3, r7
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	2328      	movs	r3, #40	@ 0x28
 8001050:	189b      	adds	r3, r3, r2
 8001052:	19db      	adds	r3, r3, r7
 8001054:	2200      	movs	r2, #0
 8001056:	5e9b      	ldrsh	r3, [r3, r2]
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	0023      	movs	r3, r4
 800105c:	4662      	mov	r2, ip
 800105e:	f000 f82b 	bl	80010b8 <drawChar>
		x+=(size*6)+spacing;
 8001062:	232c      	movs	r3, #44	@ 0x2c
 8001064:	2108      	movs	r1, #8
 8001066:	185b      	adds	r3, r3, r1
 8001068:	19db      	adds	r3, r3, r7
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	b29b      	uxth	r3, r3
 800106e:	1c1a      	adds	r2, r3, #0
 8001070:	1c13      	adds	r3, r2, #0
 8001072:	18db      	adds	r3, r3, r3
 8001074:	189b      	adds	r3, r3, r2
 8001076:	18db      	adds	r3, r3, r3
 8001078:	b29a      	uxth	r2, r3
 800107a:	2330      	movs	r3, #48	@ 0x30
 800107c:	185b      	adds	r3, r3, r1
 800107e:	19db      	adds	r3, r3, r7
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	b29b      	uxth	r3, r3
 8001084:	18d3      	adds	r3, r2, r3
 8001086:	b29a      	uxth	r2, r3
 8001088:	19bb      	adds	r3, r7, r6
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	18d3      	adds	r3, r2, r3
 800108e:	b29a      	uxth	r2, r3
 8001090:	19bb      	adds	r3, r7, r6
 8001092:	801a      	strh	r2, [r3, #0]
		i++;
 8001094:	197b      	adds	r3, r7, r5
 8001096:	881a      	ldrh	r2, [r3, #0]
 8001098:	197b      	adds	r3, r7, r5
 800109a:	3201      	adds	r2, #1
 800109c:	801a      	strh	r2, [r3, #0]
	while(c[i])
 800109e:	2316      	movs	r3, #22
 80010a0:	18fb      	adds	r3, r7, r3
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	68ba      	ldr	r2, [r7, #8]
 80010a6:	18d3      	adds	r3, r2, r3
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1b7      	bne.n	800101e <drawString+0x2e>
	}
}
 80010ae:	46c0      	nop			@ (mov r8, r8)
 80010b0:	46c0      	nop			@ (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b007      	add	sp, #28
 80010b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010b8 <drawChar>:
void drawChar(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 80010b8:	b5b0      	push	{r4, r5, r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af02      	add	r7, sp, #8
 80010be:	0005      	movs	r5, r0
 80010c0:	000c      	movs	r4, r1
 80010c2:	0010      	movs	r0, r2
 80010c4:	0019      	movs	r1, r3
 80010c6:	1dbb      	adds	r3, r7, #6
 80010c8:	1c2a      	adds	r2, r5, #0
 80010ca:	801a      	strh	r2, [r3, #0]
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	1c22      	adds	r2, r4, #0
 80010d0:	801a      	strh	r2, [r3, #0]
 80010d2:	1cfb      	adds	r3, r7, #3
 80010d4:	1c02      	adds	r2, r0, #0
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	003b      	movs	r3, r7
 80010da:	1c0a      	adds	r2, r1, #0
 80010dc:	801a      	strh	r2, [r3, #0]
  uint8_t line;
  int32_t i, j;
  if((x >= _width)            ||
 80010de:	4b79      	ldr	r3, [pc, #484]	@ (80012c4 <drawChar+0x20c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	5e9b      	ldrsh	r3, [r3, r2]
 80010e4:	1dba      	adds	r2, r7, #6
 80010e6:	2100      	movs	r1, #0
 80010e8:	5e52      	ldrsh	r2, [r2, r1]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	db00      	blt.n	80010f0 <drawChar+0x38>
 80010ee:	e0e5      	b.n	80012bc <drawChar+0x204>
     (y >= _height)           ||
 80010f0:	4b75      	ldr	r3, [pc, #468]	@ (80012c8 <drawChar+0x210>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	5e9b      	ldrsh	r3, [r3, r2]
  if((x >= _width)            ||
 80010f6:	1d3a      	adds	r2, r7, #4
 80010f8:	2100      	movs	r1, #0
 80010fa:	5e52      	ldrsh	r2, [r2, r1]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	db00      	blt.n	8001102 <drawChar+0x4a>
 8001100:	e0dc      	b.n	80012bc <drawChar+0x204>
     ((x + 5 * size - 1) < 0) ||
 8001102:	1dbb      	adds	r3, r7, #6
 8001104:	2100      	movs	r1, #0
 8001106:	5e59      	ldrsh	r1, [r3, r1]
 8001108:	202c      	movs	r0, #44	@ 0x2c
 800110a:	183b      	adds	r3, r7, r0
 800110c:	781a      	ldrb	r2, [r3, #0]
 800110e:	0013      	movs	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	189b      	adds	r3, r3, r2
 8001114:	18cb      	adds	r3, r1, r3
     (y >= _height)           ||
 8001116:	2b00      	cmp	r3, #0
 8001118:	dc00      	bgt.n	800111c <drawChar+0x64>
 800111a:	e0cf      	b.n	80012bc <drawChar+0x204>
     ((y + 8 * size - 1) < 0))
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2200      	movs	r2, #0
 8001120:	5e9a      	ldrsh	r2, [r3, r2]
 8001122:	183b      	adds	r3, r7, r0
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	18d3      	adds	r3, r2, r3
     ((x + 5 * size - 1) < 0) ||
 800112a:	2b00      	cmp	r3, #0
 800112c:	dc00      	bgt.n	8001130 <drawChar+0x78>
 800112e:	e0c5      	b.n	80012bc <drawChar+0x204>
    return;

  for (i=0; i<6; i++ ) {
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	e0bd      	b.n	80012b2 <drawChar+0x1fa>
    if ((i) == 5)
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	2b05      	cmp	r3, #5
 800113a:	d104      	bne.n	8001146 <drawChar+0x8e>
      line = 0x0;
 800113c:	2317      	movs	r3, #23
 800113e:	18fb      	adds	r3, r7, r3
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	e00b      	b.n	800115e <drawChar+0xa6>
    else
      line = Font[(c*5)+(i)];
 8001146:	1cfb      	adds	r3, r7, #3
 8001148:	781a      	ldrb	r2, [r3, #0]
 800114a:	0013      	movs	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	189a      	adds	r2, r3, r2
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	18d2      	adds	r2, r2, r3
 8001154:	2317      	movs	r3, #23
 8001156:	18fb      	adds	r3, r7, r3
 8001158:	495c      	ldr	r1, [pc, #368]	@ (80012cc <drawChar+0x214>)
 800115a:	5c8a      	ldrb	r2, [r1, r2]
 800115c:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	e09f      	b.n	80012a4 <drawChar+0x1ec>
      if (line & 0x1) {
 8001164:	2317      	movs	r3, #23
 8001166:	18fb      	adds	r3, r7, r3
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2201      	movs	r2, #1
 800116c:	4013      	ands	r3, r2
 800116e:	d043      	beq.n	80011f8 <drawChar+0x140>
        if (size == 1)
 8001170:	232c      	movs	r3, #44	@ 0x2c
 8001172:	18fb      	adds	r3, r7, r3
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d115      	bne.n	80011a6 <drawChar+0xee>
          writePixel(x+(i), y+(7-j), textColor);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	b29a      	uxth	r2, r3
 800117e:	1dbb      	adds	r3, r7, #6
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	18d3      	adds	r3, r2, r3
 8001184:	b29b      	uxth	r3, r3
 8001186:	b218      	sxth	r0, r3
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	881a      	ldrh	r2, [r3, #0]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	b29b      	uxth	r3, r3
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	b29b      	uxth	r3, r3
 8001194:	3307      	adds	r3, #7
 8001196:	b29b      	uxth	r3, r3
 8001198:	b219      	sxth	r1, r3
 800119a:	003b      	movs	r3, r7
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	001a      	movs	r2, r3
 80011a0:	f7ff ff08 	bl	8000fb4 <writePixel>
 80011a4:	e075      	b.n	8001292 <drawChar+0x1da>
        else {
          fillRect(x+((i)*size), y+((7-j)*size), size, size, textColor);
 80011a6:	212c      	movs	r1, #44	@ 0x2c
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	b292      	uxth	r2, r2
 80011b2:	4353      	muls	r3, r2
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	1dbb      	adds	r3, r7, #6
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	18d3      	adds	r3, r2, r3
 80011bc:	b29b      	uxth	r3, r3
 80011be:	b218      	sxth	r0, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2207      	movs	r2, #7
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	000c      	movs	r4, r1
 80011ca:	187a      	adds	r2, r7, r1
 80011cc:	7812      	ldrb	r2, [r2, #0]
 80011ce:	b292      	uxth	r2, r2
 80011d0:	4353      	muls	r3, r2
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	18d3      	adds	r3, r2, r3
 80011da:	b29b      	uxth	r3, r3
 80011dc:	b219      	sxth	r1, r3
 80011de:	193b      	adds	r3, r7, r4
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	193b      	adds	r3, r7, r4
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b21c      	sxth	r4, r3
 80011ea:	003b      	movs	r3, r7
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	0023      	movs	r3, r4
 80011f2:	f7ff feb9 	bl	8000f68 <fillRect>
 80011f6:	e04c      	b.n	8001292 <drawChar+0x1da>
        }
      } else if (bgColor != textColor) {
 80011f8:	2428      	movs	r4, #40	@ 0x28
 80011fa:	193b      	adds	r3, r7, r4
 80011fc:	0039      	movs	r1, r7
 80011fe:	2200      	movs	r2, #0
 8001200:	5e9a      	ldrsh	r2, [r3, r2]
 8001202:	2300      	movs	r3, #0
 8001204:	5ecb      	ldrsh	r3, [r1, r3]
 8001206:	429a      	cmp	r2, r3
 8001208:	d043      	beq.n	8001292 <drawChar+0x1da>
        if (size == 1) // default size
 800120a:	232c      	movs	r3, #44	@ 0x2c
 800120c:	18fb      	adds	r3, r7, r3
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d115      	bne.n	8001240 <drawChar+0x188>
          writePixel(x+(i), y+(7-j), bgColor);
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	b29a      	uxth	r2, r3
 8001218:	1dbb      	adds	r3, r7, #6
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	18d3      	adds	r3, r2, r3
 800121e:	b29b      	uxth	r3, r3
 8001220:	b218      	sxth	r0, r3
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	881a      	ldrh	r2, [r3, #0]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	b29b      	uxth	r3, r3
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	b29b      	uxth	r3, r3
 800122e:	3307      	adds	r3, #7
 8001230:	b29b      	uxth	r3, r3
 8001232:	b219      	sxth	r1, r3
 8001234:	193b      	adds	r3, r7, r4
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	001a      	movs	r2, r3
 800123a:	f7ff febb 	bl	8000fb4 <writePixel>
 800123e:	e028      	b.n	8001292 <drawChar+0x1da>
        else {  // big size
          fillRect(x+(i)*size, y+(7-j)*size, size, size, bgColor);
 8001240:	212c      	movs	r1, #44	@ 0x2c
 8001242:	187b      	adds	r3, r7, r1
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b29b      	uxth	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	b292      	uxth	r2, r2
 800124c:	4353      	muls	r3, r2
 800124e:	b29a      	uxth	r2, r3
 8001250:	1dbb      	adds	r3, r7, #6
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	18d3      	adds	r3, r2, r3
 8001256:	b29b      	uxth	r3, r3
 8001258:	b218      	sxth	r0, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2207      	movs	r2, #7
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	b29b      	uxth	r3, r3
 8001262:	000c      	movs	r4, r1
 8001264:	187a      	adds	r2, r7, r1
 8001266:	7812      	ldrb	r2, [r2, #0]
 8001268:	b292      	uxth	r2, r2
 800126a:	4353      	muls	r3, r2
 800126c:	b29a      	uxth	r2, r3
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	18d3      	adds	r3, r2, r3
 8001274:	b29b      	uxth	r3, r3
 8001276:	b219      	sxth	r1, r3
 8001278:	193b      	adds	r3, r7, r4
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b21a      	sxth	r2, r3
 800127e:	193b      	adds	r3, r7, r4
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b21c      	sxth	r4, r3
 8001284:	2328      	movs	r3, #40	@ 0x28
 8001286:	18fb      	adds	r3, r7, r3
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	0023      	movs	r3, r4
 800128e:	f7ff fe6b 	bl	8000f68 <fillRect>
        }
      }
      line >>= 1;
 8001292:	2217      	movs	r2, #23
 8001294:	18bb      	adds	r3, r7, r2
 8001296:	18ba      	adds	r2, r7, r2
 8001298:	7812      	ldrb	r2, [r2, #0]
 800129a:	0852      	lsrs	r2, r2, #1
 800129c:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	3301      	adds	r3, #1
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2b07      	cmp	r3, #7
 80012a8:	dc00      	bgt.n	80012ac <drawChar+0x1f4>
 80012aa:	e75b      	b.n	8001164 <drawChar+0xac>
  for (i=0; i<6; i++ ) {
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	3301      	adds	r3, #1
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	2b05      	cmp	r3, #5
 80012b6:	dc00      	bgt.n	80012ba <drawChar+0x202>
 80012b8:	e73d      	b.n	8001136 <drawChar+0x7e>
 80012ba:	e000      	b.n	80012be <drawChar+0x206>
    return;
 80012bc:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80012be:	46bd      	mov	sp, r7
 80012c0:	b006      	add	sp, #24
 80012c2:	bdb0      	pop	{r4, r5, r7, pc}
 80012c4:	2000056c 	.word	0x2000056c
 80012c8:	2000056e 	.word	0x2000056e
 80012cc:	08008530 	.word	0x08008530

080012d0 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80012d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d2:	b091      	sub	sp, #68	@ 0x44
 80012d4:	af04      	add	r7, sp, #16
 80012d6:	231e      	movs	r3, #30
 80012d8:	18f9      	adds	r1, r7, r3
 80012da:	8008      	strh	r0, [r1, #0]
 80012dc:	4669      	mov	r1, sp
 80012de:	000e      	movs	r6, r1
    uint16_t pallette[] = {color};
 80012e0:	210c      	movs	r1, #12
 80012e2:	2318      	movs	r3, #24
 80012e4:	18cb      	adds	r3, r1, r3
 80012e6:	19d9      	adds	r1, r3, r7
 80012e8:	231e      	movs	r3, #30
 80012ea:	18f8      	adds	r0, r7, r3
 80012ec:	8800      	ldrh	r0, [r0, #0]
 80012ee:	8008      	strh	r0, [r1, #0]
    uint16_t pixels[_width*_height][2];
 80012f0:	492f      	ldr	r1, [pc, #188]	@ (80013b0 <fillScreen+0xe0>)
 80012f2:	2300      	movs	r3, #0
 80012f4:	5ec9      	ldrsh	r1, [r1, r3]
 80012f6:	0008      	movs	r0, r1
 80012f8:	492e      	ldr	r1, [pc, #184]	@ (80013b4 <fillScreen+0xe4>)
 80012fa:	2300      	movs	r3, #0
 80012fc:	5ec9      	ldrsh	r1, [r1, r3]
 80012fe:	4341      	muls	r1, r0
 8001300:	1e48      	subs	r0, r1, #1
 8001302:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001304:	0008      	movs	r0, r1
 8001306:	6138      	str	r0, [r7, #16]
 8001308:	2000      	movs	r0, #0
 800130a:	6178      	str	r0, [r7, #20]
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	0010      	movs	r0, r2
 8001312:	0ec0      	lsrs	r0, r0, #27
 8001314:	613a      	str	r2, [r7, #16]
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	015d      	lsls	r5, r3, #5
 800131a:	4305      	orrs	r5, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	015c      	lsls	r4, r3, #5
 8001320:	0008      	movs	r0, r1
 8001322:	6038      	str	r0, [r7, #0]
 8001324:	2000      	movs	r0, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	683c      	ldr	r4, [r7, #0]
 800132a:	687d      	ldr	r5, [r7, #4]
 800132c:	0023      	movs	r3, r4
 800132e:	0ed8      	lsrs	r0, r3, #27
 8001330:	002b      	movs	r3, r5
 8001332:	015b      	lsls	r3, r3, #5
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4303      	orrs	r3, r0
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	0023      	movs	r3, r4
 800133e:	015b      	lsls	r3, r3, #5
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	000b      	movs	r3, r1
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	3307      	adds	r3, #7
 8001348:	08db      	lsrs	r3, r3, #3
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	466a      	mov	r2, sp
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	469d      	mov	sp, r3
 8001352:	ab04      	add	r3, sp, #16
 8001354:	3301      	adds	r3, #1
 8001356:	085b      	lsrs	r3, r3, #1
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	62bb      	str	r3, [r7, #40]	@ 0x28

    pixels[0][0] = 0;
 800135c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800135e:	2200      	movs	r2, #0
 8001360:	801a      	strh	r2, [r3, #0]
    pixels[0][1] = _width*_height;
 8001362:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <fillScreen+0xe0>)
 8001364:	2200      	movs	r2, #0
 8001366:	5e9b      	ldrsh	r3, [r3, r2]
 8001368:	b29b      	uxth	r3, r3
 800136a:	4a12      	ldr	r2, [pc, #72]	@ (80013b4 <fillScreen+0xe4>)
 800136c:	2000      	movs	r0, #0
 800136e:	5e12      	ldrsh	r2, [r2, r0]
 8001370:	b292      	uxth	r2, r2
 8001372:	4353      	muls	r3, r2
 8001374:	b29a      	uxth	r2, r3
 8001376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001378:	805a      	strh	r2, [r3, #2]
    drawImage(pixels, pallette, 0, 0, _width, _height, 1);
 800137a:	4b0d      	ldr	r3, [pc, #52]	@ (80013b0 <fillScreen+0xe0>)
 800137c:	2200      	movs	r2, #0
 800137e:	5e9b      	ldrsh	r3, [r3, r2]
 8001380:	b29b      	uxth	r3, r3
 8001382:	4a0c      	ldr	r2, [pc, #48]	@ (80013b4 <fillScreen+0xe4>)
 8001384:	2000      	movs	r0, #0
 8001386:	5e12      	ldrsh	r2, [r2, r0]
 8001388:	b292      	uxth	r2, r2
 800138a:	210c      	movs	r1, #12
 800138c:	2018      	movs	r0, #24
 800138e:	1809      	adds	r1, r1, r0
 8001390:	19c9      	adds	r1, r1, r7
 8001392:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001394:	2401      	movs	r4, #1
 8001396:	9402      	str	r4, [sp, #8]
 8001398:	9201      	str	r2, [sp, #4]
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2300      	movs	r3, #0
 800139e:	2200      	movs	r2, #0
 80013a0:	f000 f80a 	bl	80013b8 <drawImage>
 80013a4:	46b5      	mov	sp, r6
	//fillRect(0, 0, _width, _height, color);
}
 80013a6:	46c0      	nop			@ (mov r8, r8)
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b00d      	add	sp, #52	@ 0x34
 80013ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ae:	46c0      	nop			@ (mov r8, r8)
 80013b0:	2000056c 	.word	0x2000056c
 80013b4:	2000056e 	.word	0x2000056e

080013b8 <drawImage>:

void drawImage(uint16_t image[][2], uint16_t palette[], uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
{
 80013b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ba:	46c6      	mov	lr, r8
 80013bc:	b500      	push	{lr}
 80013be:	b092      	sub	sp, #72	@ 0x48
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	6278      	str	r0, [r7, #36]	@ 0x24
 80013c4:	6239      	str	r1, [r7, #32]
 80013c6:	0019      	movs	r1, r3
 80013c8:	231e      	movs	r3, #30
 80013ca:	18fb      	adds	r3, r7, r3
 80013cc:	801a      	strh	r2, [r3, #0]
 80013ce:	231c      	movs	r3, #28
 80013d0:	18fb      	adds	r3, r7, r3
 80013d2:	1c0a      	adds	r2, r1, #0
 80013d4:	801a      	strh	r2, [r3, #0]
 80013d6:	466b      	mov	r3, sp
 80013d8:	4698      	mov	r8, r3
	uint16_t i;
	uint16_t j;
	uint16_t totalInd =0;
 80013da:	2322      	movs	r3, #34	@ 0x22
 80013dc:	2118      	movs	r1, #24
 80013de:	185b      	adds	r3, r3, r1
 80013e0:	19db      	adds	r3, r3, r7
 80013e2:	2200      	movs	r2, #0
 80013e4:	801a      	strh	r2, [r3, #0]
	uint16_t ind;
	uint16_t count;
	uint16_t bufffer[w*h];
 80013e6:	2340      	movs	r3, #64	@ 0x40
 80013e8:	185b      	adds	r3, r3, r1
 80013ea:	19db      	adds	r3, r3, r7
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	2244      	movs	r2, #68	@ 0x44
 80013f0:	1852      	adds	r2, r2, r1
 80013f2:	19d2      	adds	r2, r2, r7
 80013f4:	8812      	ldrh	r2, [r2, #0]
 80013f6:	4353      	muls	r3, r2
 80013f8:	1e5a      	subs	r2, r3, #1
 80013fa:	637a      	str	r2, [r7, #52]	@ 0x34
 80013fc:	001a      	movs	r2, r3
 80013fe:	60ba      	str	r2, [r7, #8]
 8001400:	2200      	movs	r2, #0
 8001402:	60fa      	str	r2, [r7, #12]
 8001404:	68b8      	ldr	r0, [r7, #8]
 8001406:	68f9      	ldr	r1, [r7, #12]
 8001408:	0002      	movs	r2, r0
 800140a:	0f12      	lsrs	r2, r2, #28
 800140c:	000e      	movs	r6, r1
 800140e:	0136      	lsls	r6, r6, #4
 8001410:	617e      	str	r6, [r7, #20]
 8001412:	697e      	ldr	r6, [r7, #20]
 8001414:	4316      	orrs	r6, r2
 8001416:	617e      	str	r6, [r7, #20]
 8001418:	0002      	movs	r2, r0
 800141a:	0112      	lsls	r2, r2, #4
 800141c:	613a      	str	r2, [r7, #16]
 800141e:	001a      	movs	r2, r3
 8001420:	603a      	str	r2, [r7, #0]
 8001422:	2200      	movs	r2, #0
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	6838      	ldr	r0, [r7, #0]
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	0002      	movs	r2, r0
 800142c:	0f12      	lsrs	r2, r2, #28
 800142e:	000e      	movs	r6, r1
 8001430:	0135      	lsls	r5, r6, #4
 8001432:	4315      	orrs	r5, r2
 8001434:	0002      	movs	r2, r0
 8001436:	0114      	lsls	r4, r2, #4
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	3307      	adds	r3, #7
 800143c:	08db      	lsrs	r3, r3, #3
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	466a      	mov	r2, sp
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	469d      	mov	sp, r3
 8001446:	ab02      	add	r3, sp, #8
 8001448:	3301      	adds	r3, #1
 800144a:	085b      	lsrs	r3, r3, #1
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	633b      	str	r3, [r7, #48]	@ 0x30
for(i=0; i<c; i++)
 8001450:	2326      	movs	r3, #38	@ 0x26
 8001452:	2118      	movs	r1, #24
 8001454:	185b      	adds	r3, r3, r1
 8001456:	19db      	adds	r3, r3, r7
 8001458:	2200      	movs	r2, #0
 800145a:	801a      	strh	r2, [r3, #0]
 800145c:	e04d      	b.n	80014fa <drawImage+0x142>
{
	ind = image[i][0];
 800145e:	2126      	movs	r1, #38	@ 0x26
 8001460:	2018      	movs	r0, #24
 8001462:	180b      	adds	r3, r1, r0
 8001464:	19db      	adds	r3, r3, r7
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800146c:	18d2      	adds	r2, r2, r3
 800146e:	2316      	movs	r3, #22
 8001470:	181b      	adds	r3, r3, r0
 8001472:	19db      	adds	r3, r3, r7
 8001474:	8812      	ldrh	r2, [r2, #0]
 8001476:	801a      	strh	r2, [r3, #0]
	count = image[i][1];
 8001478:	180b      	adds	r3, r1, r0
 800147a:	19db      	adds	r3, r3, r7
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001482:	18d2      	adds	r2, r2, r3
 8001484:	2314      	movs	r3, #20
 8001486:	181b      	adds	r3, r3, r0
 8001488:	19db      	adds	r3, r3, r7
 800148a:	8852      	ldrh	r2, [r2, #2]
 800148c:	801a      	strh	r2, [r3, #0]
	for(j=0; j<count; j++)
 800148e:	2324      	movs	r3, #36	@ 0x24
 8001490:	181b      	adds	r3, r3, r0
 8001492:	19db      	adds	r3, r3, r7
 8001494:	2200      	movs	r2, #0
 8001496:	801a      	strh	r2, [r3, #0]
 8001498:	e01c      	b.n	80014d4 <drawImage+0x11c>
	{
		bufffer[totalInd++] = palette[ind];
 800149a:	2316      	movs	r3, #22
 800149c:	2418      	movs	r4, #24
 800149e:	191b      	adds	r3, r3, r4
 80014a0:	19db      	adds	r3, r3, r7
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	6a3a      	ldr	r2, [r7, #32]
 80014a8:	18d2      	adds	r2, r2, r3
 80014aa:	2122      	movs	r1, #34	@ 0x22
 80014ac:	190b      	adds	r3, r1, r4
 80014ae:	19db      	adds	r3, r3, r7
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	1909      	adds	r1, r1, r4
 80014b4:	19c9      	adds	r1, r1, r7
 80014b6:	1c58      	adds	r0, r3, #1
 80014b8:	8008      	strh	r0, [r1, #0]
 80014ba:	0018      	movs	r0, r3
 80014bc:	8811      	ldrh	r1, [r2, #0]
 80014be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014c0:	0042      	lsls	r2, r0, #1
 80014c2:	52d1      	strh	r1, [r2, r3]
	for(j=0; j<count; j++)
 80014c4:	2124      	movs	r1, #36	@ 0x24
 80014c6:	190b      	adds	r3, r1, r4
 80014c8:	19db      	adds	r3, r3, r7
 80014ca:	881a      	ldrh	r2, [r3, #0]
 80014cc:	190b      	adds	r3, r1, r4
 80014ce:	19db      	adds	r3, r3, r7
 80014d0:	3201      	adds	r2, #1
 80014d2:	801a      	strh	r2, [r3, #0]
 80014d4:	2324      	movs	r3, #36	@ 0x24
 80014d6:	2018      	movs	r0, #24
 80014d8:	181b      	adds	r3, r3, r0
 80014da:	19da      	adds	r2, r3, r7
 80014dc:	2314      	movs	r3, #20
 80014de:	181b      	adds	r3, r3, r0
 80014e0:	19db      	adds	r3, r3, r7
 80014e2:	8812      	ldrh	r2, [r2, #0]
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d3d7      	bcc.n	800149a <drawImage+0xe2>
for(i=0; i<c; i++)
 80014ea:	2126      	movs	r1, #38	@ 0x26
 80014ec:	180b      	adds	r3, r1, r0
 80014ee:	19db      	adds	r3, r3, r7
 80014f0:	881a      	ldrh	r2, [r3, #0]
 80014f2:	180b      	adds	r3, r1, r0
 80014f4:	19db      	adds	r3, r3, r7
 80014f6:	3201      	adds	r2, #1
 80014f8:	801a      	strh	r2, [r3, #0]
 80014fa:	2326      	movs	r3, #38	@ 0x26
 80014fc:	2118      	movs	r1, #24
 80014fe:	185b      	adds	r3, r3, r1
 8001500:	19da      	adds	r2, r3, r7
 8001502:	2348      	movs	r3, #72	@ 0x48
 8001504:	185b      	adds	r3, r3, r1
 8001506:	19db      	adds	r3, r3, r7
 8001508:	8812      	ldrh	r2, [r2, #0]
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	d3a6      	bcc.n	800145e <drawImage+0xa6>
	}
}
ST7735_DrawImage(y, x, w, h, bufffer);
 8001510:	2344      	movs	r3, #68	@ 0x44
 8001512:	185b      	adds	r3, r3, r1
 8001514:	19db      	adds	r3, r3, r7
 8001516:	881c      	ldrh	r4, [r3, #0]
 8001518:	2340      	movs	r3, #64	@ 0x40
 800151a:	185b      	adds	r3, r3, r1
 800151c:	19db      	adds	r3, r3, r7
 800151e:	881a      	ldrh	r2, [r3, #0]
 8001520:	231e      	movs	r3, #30
 8001522:	18fb      	adds	r3, r7, r3
 8001524:	8819      	ldrh	r1, [r3, #0]
 8001526:	231c      	movs	r3, #28
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	8818      	ldrh	r0, [r3, #0]
 800152c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	0023      	movs	r3, r4
 8001532:	f000 fadd 	bl	8001af0 <ST7735_DrawImage>
 8001536:	46c5      	mov	sp, r8
}
 8001538:	46c0      	nop			@ (mov r8, r8)
 800153a:	46bd      	mov	sp, r7
 800153c:	b010      	add	sp, #64	@ 0x40
 800153e:	bc80      	pop	{r7}
 8001540:	46b8      	mov	r8, r7
 8001542:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001544 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8001548:	23a0      	movs	r3, #160	@ 0xa0
 800154a:	05db      	lsls	r3, r3, #23
 800154c:	2200      	movs	r2, #0
 800154e:	2120      	movs	r1, #32
 8001550:	0018      	movs	r0, r3
 8001552:	f001 fdd6 	bl	8003102 <HAL_GPIO_WritePin>
}
 8001556:	46c0      	nop			@ (mov r8, r8)
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <ST7735_Unselect>:

void ST7735_Unselect()
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001560:	23a0      	movs	r3, #160	@ 0xa0
 8001562:	05db      	lsls	r3, r3, #23
 8001564:	2201      	movs	r2, #1
 8001566:	2120      	movs	r1, #32
 8001568:	0018      	movs	r0, r3
 800156a:	f001 fdca 	bl	8003102 <HAL_GPIO_WritePin>
}
 800156e:	46c0      	nop			@ (mov r8, r8)
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <ST7735_Reset>:

void ST7735_Reset()
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8001578:	23a0      	movs	r3, #160	@ 0xa0
 800157a:	05db      	lsls	r3, r3, #23
 800157c:	2200      	movs	r2, #0
 800157e:	2108      	movs	r1, #8
 8001580:	0018      	movs	r0, r3
 8001582:	f001 fdbe 	bl	8003102 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001586:	2005      	movs	r0, #5
 8001588:	f001 fb1a 	bl	8002bc0 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 800158c:	23a0      	movs	r3, #160	@ 0xa0
 800158e:	05db      	lsls	r3, r3, #23
 8001590:	2201      	movs	r2, #1
 8001592:	2108      	movs	r1, #8
 8001594:	0018      	movs	r0, r3
 8001596:	f001 fdb4 	bl	8003102 <HAL_GPIO_WritePin>
}
 800159a:	46c0      	nop			@ (mov r8, r8)
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	0002      	movs	r2, r0
 80015a8:	1dfb      	adds	r3, r7, #7
 80015aa:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80015ac:	23a0      	movs	r3, #160	@ 0xa0
 80015ae:	05db      	lsls	r3, r3, #23
 80015b0:	2200      	movs	r2, #0
 80015b2:	2110      	movs	r1, #16
 80015b4:	0018      	movs	r0, r3
 80015b6:	f001 fda4 	bl	8003102 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80015ba:	2301      	movs	r3, #1
 80015bc:	425b      	negs	r3, r3
 80015be:	1df9      	adds	r1, r7, #7
 80015c0:	4803      	ldr	r0, [pc, #12]	@ (80015d0 <ST7735_WriteCommand+0x30>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	f004 fa22 	bl	8005a0c <HAL_SPI_Transmit>
}
 80015c8:	46c0      	nop			@ (mov r8, r8)
 80015ca:	46bd      	mov	sp, r7
 80015cc:	b002      	add	sp, #8
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	200006f4 	.word	0x200006f4

080015d4 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80015de:	23a0      	movs	r3, #160	@ 0xa0
 80015e0:	05db      	lsls	r3, r3, #23
 80015e2:	2201      	movs	r2, #1
 80015e4:	2110      	movs	r1, #16
 80015e6:	0018      	movs	r0, r3
 80015e8:	f001 fd8b 	bl	8003102 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	2301      	movs	r3, #1
 80015f2:	425b      	negs	r3, r3
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	4803      	ldr	r0, [pc, #12]	@ (8001604 <ST7735_WriteData+0x30>)
 80015f8:	f004 fa08 	bl	8005a0c <HAL_SPI_Transmit>
}
 80015fc:	46c0      	nop			@ (mov r8, r8)
 80015fe:	46bd      	mov	sp, r7
 8001600:	b002      	add	sp, #8
 8001602:	bd80      	pop	{r7, pc}
 8001604:	200006f4 	.word	0x200006f4

08001608 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8001608:	b590      	push	{r4, r7, lr}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	220f      	movs	r2, #15
 8001618:	18ba      	adds	r2, r7, r2
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 800161e:	e04a      	b.n	80016b6 <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	1c5a      	adds	r2, r3, #1
 8001624:	607a      	str	r2, [r7, #4]
 8001626:	210b      	movs	r1, #11
 8001628:	187a      	adds	r2, r7, r1
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 800162e:	187b      	adds	r3, r7, r1
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	0018      	movs	r0, r3
 8001634:	f7ff ffb4 	bl	80015a0 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	607a      	str	r2, [r7, #4]
 800163e:	200a      	movs	r0, #10
 8001640:	183a      	adds	r2, r7, r0
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001646:	183b      	adds	r3, r7, r0
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b29a      	uxth	r2, r3
 800164c:	230c      	movs	r3, #12
 800164e:	18fb      	adds	r3, r7, r3
 8001650:	2180      	movs	r1, #128	@ 0x80
 8001652:	400a      	ands	r2, r1
 8001654:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 8001656:	183b      	adds	r3, r7, r0
 8001658:	183a      	adds	r2, r7, r0
 800165a:	7812      	ldrb	r2, [r2, #0]
 800165c:	217f      	movs	r1, #127	@ 0x7f
 800165e:	400a      	ands	r2, r1
 8001660:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 8001662:	183b      	adds	r3, r7, r0
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d00c      	beq.n	8001684 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800166a:	0004      	movs	r4, r0
 800166c:	183b      	adds	r3, r7, r0
 800166e:	781a      	ldrb	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	0011      	movs	r1, r2
 8001674:	0018      	movs	r0, r3
 8001676:	f7ff ffad 	bl	80015d4 <ST7735_WriteData>
            addr += numArgs;
 800167a:	193b      	adds	r3, r7, r4
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	18d3      	adds	r3, r2, r3
 8001682:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001684:	210c      	movs	r1, #12
 8001686:	187b      	adds	r3, r7, r1
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d013      	beq.n	80016b6 <DisplayInit+0xae>
            ms = *addr++;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	1c5a      	adds	r2, r3, #1
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	781a      	ldrb	r2, [r3, #0]
 8001696:	187b      	adds	r3, r7, r1
 8001698:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 800169a:	187b      	adds	r3, r7, r1
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	2bff      	cmp	r3, #255	@ 0xff
 80016a0:	d103      	bne.n	80016aa <DisplayInit+0xa2>
 80016a2:	187b      	adds	r3, r7, r1
 80016a4:	22fa      	movs	r2, #250	@ 0xfa
 80016a6:	0052      	lsls	r2, r2, #1
 80016a8:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 80016aa:	230c      	movs	r3, #12
 80016ac:	18fb      	adds	r3, r7, r3
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	0018      	movs	r0, r3
 80016b2:	f001 fa85 	bl	8002bc0 <HAL_Delay>
    while(numCommands--) {
 80016b6:	220f      	movs	r2, #15
 80016b8:	18bb      	adds	r3, r7, r2
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	18ba      	adds	r2, r7, r2
 80016be:	1e59      	subs	r1, r3, #1
 80016c0:	7011      	strb	r1, [r2, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1ac      	bne.n	8001620 <DisplayInit+0x18>
        }
    }
}
 80016c6:	46c0      	nop			@ (mov r8, r8)
 80016c8:	46c0      	nop			@ (mov r8, r8)
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b005      	add	sp, #20
 80016ce:	bd90      	pop	{r4, r7, pc}

080016d0 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80016d0:	b5b0      	push	{r4, r5, r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	0005      	movs	r5, r0
 80016d8:	000c      	movs	r4, r1
 80016da:	0010      	movs	r0, r2
 80016dc:	0019      	movs	r1, r3
 80016de:	1dfb      	adds	r3, r7, #7
 80016e0:	1c2a      	adds	r2, r5, #0
 80016e2:	701a      	strb	r2, [r3, #0]
 80016e4:	1dbb      	adds	r3, r7, #6
 80016e6:	1c22      	adds	r2, r4, #0
 80016e8:	701a      	strb	r2, [r3, #0]
 80016ea:	1d7b      	adds	r3, r7, #5
 80016ec:	1c02      	adds	r2, r0, #0
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	1c0a      	adds	r2, r1, #0
 80016f4:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80016f6:	202a      	movs	r0, #42	@ 0x2a
 80016f8:	f7ff ff52 	bl	80015a0 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80016fc:	210c      	movs	r1, #12
 80016fe:	187b      	adds	r3, r7, r1
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
 8001704:	4b1c      	ldr	r3, [pc, #112]	@ (8001778 <ST7735_SetAddressWindow+0xa8>)
 8001706:	781a      	ldrb	r2, [r3, #0]
 8001708:	1dfb      	adds	r3, r7, #7
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	18d3      	adds	r3, r2, r3
 800170e:	b2da      	uxtb	r2, r3
 8001710:	187b      	adds	r3, r7, r1
 8001712:	705a      	strb	r2, [r3, #1]
 8001714:	187b      	adds	r3, r7, r1
 8001716:	2200      	movs	r2, #0
 8001718:	709a      	strb	r2, [r3, #2]
 800171a:	4b17      	ldr	r3, [pc, #92]	@ (8001778 <ST7735_SetAddressWindow+0xa8>)
 800171c:	781a      	ldrb	r2, [r3, #0]
 800171e:	1d7b      	adds	r3, r7, #5
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	18d3      	adds	r3, r2, r3
 8001724:	b2da      	uxtb	r2, r3
 8001726:	187b      	adds	r3, r7, r1
 8001728:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 800172a:	000c      	movs	r4, r1
 800172c:	187b      	adds	r3, r7, r1
 800172e:	2104      	movs	r1, #4
 8001730:	0018      	movs	r0, r3
 8001732:	f7ff ff4f 	bl	80015d4 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001736:	202b      	movs	r0, #43	@ 0x2b
 8001738:	f7ff ff32 	bl	80015a0 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800173c:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <ST7735_SetAddressWindow+0xac>)
 800173e:	781a      	ldrb	r2, [r3, #0]
 8001740:	1dbb      	adds	r3, r7, #6
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	18d3      	adds	r3, r2, r3
 8001746:	b2da      	uxtb	r2, r3
 8001748:	0021      	movs	r1, r4
 800174a:	187b      	adds	r3, r7, r1
 800174c:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 800174e:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <ST7735_SetAddressWindow+0xac>)
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	18d3      	adds	r3, r2, r3
 8001758:	b2da      	uxtb	r2, r3
 800175a:	187b      	adds	r3, r7, r1
 800175c:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 800175e:	187b      	adds	r3, r7, r1
 8001760:	2104      	movs	r1, #4
 8001762:	0018      	movs	r0, r3
 8001764:	f7ff ff36 	bl	80015d4 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001768:	202c      	movs	r0, #44	@ 0x2c
 800176a:	f7ff ff19 	bl	80015a0 <ST7735_WriteCommand>
}
 800176e:	46c0      	nop			@ (mov r8, r8)
 8001770:	46bd      	mov	sp, r7
 8001772:	b004      	add	sp, #16
 8001774:	bdb0      	pop	{r4, r5, r7, pc}
 8001776:	46c0      	nop			@ (mov r8, r8)
 8001778:	20000573 	.word	0x20000573
 800177c:	20000574 	.word	0x20000574

08001780 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	0002      	movs	r2, r0
 8001788:	1dfb      	adds	r3, r7, #7
 800178a:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 800178c:	f7ff feda 	bl	8001544 <ST7735_Select>
    ST7735_Reset();
 8001790:	f7ff fef0 	bl	8001574 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8001794:	4b0e      	ldr	r3, [pc, #56]	@ (80017d0 <ST7735_Init+0x50>)
 8001796:	0018      	movs	r0, r3
 8001798:	f7ff ff36 	bl	8001608 <DisplayInit>
    DisplayInit(init_cmds2);
 800179c:	4b0d      	ldr	r3, [pc, #52]	@ (80017d4 <ST7735_Init+0x54>)
 800179e:	0018      	movs	r0, r3
 80017a0:	f7ff ff32 	bl	8001608 <DisplayInit>
    DisplayInit(init_cmds3);
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <ST7735_Init+0x58>)
 80017a6:	0018      	movs	r0, r3
 80017a8:	f7ff ff2e 	bl	8001608 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 80017ac:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <ST7735_Init+0x5c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	@ (80017e0 <ST7735_Init+0x60>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 80017b8:	1dfb      	adds	r3, r7, #7
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	0018      	movs	r0, r3
 80017be:	f000 f811 	bl	80017e4 <ST7735_SetRotation>
    ST7735_Unselect();
 80017c2:	f7ff fecb 	bl	800155c <ST7735_Unselect>

}
 80017c6:	46c0      	nop			@ (mov r8, r8)
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b002      	add	sp, #8
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	46c0      	nop			@ (mov r8, r8)
 80017d0:	08008a2c 	.word	0x08008a2c
 80017d4:	08008a64 	.word	0x08008a64
 80017d8:	08008a74 	.word	0x08008a74
 80017dc:	20000571 	.word	0x20000571
 80017e0:	20000572 	.word	0x20000572

080017e4 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	0002      	movs	r2, r0
 80017ec:	1dfb      	adds	r3, r7, #7
 80017ee:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 80017f0:	230f      	movs	r3, #15
 80017f2:	18fb      	adds	r3, r7, r3
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 80017f8:	1dfb      	adds	r3, r7, #7
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2203      	movs	r2, #3
 80017fe:	4013      	ands	r3, r2
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4b36      	ldr	r3, [pc, #216]	@ (80018dc <ST7735_SetRotation+0xf8>)
 8001804:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8001806:	4b35      	ldr	r3, [pc, #212]	@ (80018dc <ST7735_SetRotation+0xf8>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b03      	cmp	r3, #3
 800180c:	d041      	beq.n	8001892 <ST7735_SetRotation+0xae>
 800180e:	dc53      	bgt.n	80018b8 <ST7735_SetRotation+0xd4>
 8001810:	2b02      	cmp	r3, #2
 8001812:	d02b      	beq.n	800186c <ST7735_SetRotation+0x88>
 8001814:	dc50      	bgt.n	80018b8 <ST7735_SetRotation+0xd4>
 8001816:	2b00      	cmp	r3, #0
 8001818:	d002      	beq.n	8001820 <ST7735_SetRotation+0x3c>
 800181a:	2b01      	cmp	r3, #1
 800181c:	d013      	beq.n	8001846 <ST7735_SetRotation+0x62>
 800181e:	e04b      	b.n	80018b8 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8001820:	230f      	movs	r3, #15
 8001822:	18fb      	adds	r3, r7, r3
 8001824:	22c0      	movs	r2, #192	@ 0xc0
 8001826:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8001828:	4b2d      	ldr	r3, [pc, #180]	@ (80018e0 <ST7735_SetRotation+0xfc>)
 800182a:	22a0      	movs	r2, #160	@ 0xa0
 800182c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800182e:	4b2d      	ldr	r3, [pc, #180]	@ (80018e4 <ST7735_SetRotation+0x100>)
 8001830:	2280      	movs	r2, #128	@ 0x80
 8001832:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8001834:	4b2c      	ldr	r3, [pc, #176]	@ (80018e8 <ST7735_SetRotation+0x104>)
 8001836:	781a      	ldrb	r2, [r3, #0]
 8001838:	4b2c      	ldr	r3, [pc, #176]	@ (80018ec <ST7735_SetRotation+0x108>)
 800183a:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 800183c:	4b2c      	ldr	r3, [pc, #176]	@ (80018f0 <ST7735_SetRotation+0x10c>)
 800183e:	781a      	ldrb	r2, [r3, #0]
 8001840:	4b2c      	ldr	r3, [pc, #176]	@ (80018f4 <ST7735_SetRotation+0x110>)
 8001842:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001844:	e038      	b.n	80018b8 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8001846:	230f      	movs	r3, #15
 8001848:	18fb      	adds	r3, r7, r3
 800184a:	22a0      	movs	r2, #160	@ 0xa0
 800184c:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 800184e:	4b25      	ldr	r3, [pc, #148]	@ (80018e4 <ST7735_SetRotation+0x100>)
 8001850:	22a0      	movs	r2, #160	@ 0xa0
 8001852:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001854:	4b22      	ldr	r3, [pc, #136]	@ (80018e0 <ST7735_SetRotation+0xfc>)
 8001856:	2280      	movs	r2, #128	@ 0x80
 8001858:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800185a:	4b23      	ldr	r3, [pc, #140]	@ (80018e8 <ST7735_SetRotation+0x104>)
 800185c:	781a      	ldrb	r2, [r3, #0]
 800185e:	4b25      	ldr	r3, [pc, #148]	@ (80018f4 <ST7735_SetRotation+0x110>)
 8001860:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001862:	4b23      	ldr	r3, [pc, #140]	@ (80018f0 <ST7735_SetRotation+0x10c>)
 8001864:	781a      	ldrb	r2, [r3, #0]
 8001866:	4b21      	ldr	r3, [pc, #132]	@ (80018ec <ST7735_SetRotation+0x108>)
 8001868:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800186a:	e025      	b.n	80018b8 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 800186c:	230f      	movs	r3, #15
 800186e:	18fb      	adds	r3, r7, r3
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8001874:	4b1a      	ldr	r3, [pc, #104]	@ (80018e0 <ST7735_SetRotation+0xfc>)
 8001876:	22a0      	movs	r2, #160	@ 0xa0
 8001878:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800187a:	4b1a      	ldr	r3, [pc, #104]	@ (80018e4 <ST7735_SetRotation+0x100>)
 800187c:	2280      	movs	r2, #128	@ 0x80
 800187e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8001880:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <ST7735_SetRotation+0x104>)
 8001882:	781a      	ldrb	r2, [r3, #0]
 8001884:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <ST7735_SetRotation+0x108>)
 8001886:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8001888:	4b19      	ldr	r3, [pc, #100]	@ (80018f0 <ST7735_SetRotation+0x10c>)
 800188a:	781a      	ldrb	r2, [r3, #0]
 800188c:	4b19      	ldr	r3, [pc, #100]	@ (80018f4 <ST7735_SetRotation+0x110>)
 800188e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001890:	e012      	b.n	80018b8 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8001892:	230f      	movs	r3, #15
 8001894:	18fb      	adds	r3, r7, r3
 8001896:	2260      	movs	r2, #96	@ 0x60
 8001898:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 800189a:	4b12      	ldr	r3, [pc, #72]	@ (80018e4 <ST7735_SetRotation+0x100>)
 800189c:	22a0      	movs	r2, #160	@ 0xa0
 800189e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	@ (80018e0 <ST7735_SetRotation+0xfc>)
 80018a2:	2280      	movs	r2, #128	@ 0x80
 80018a4:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80018a6:	4b10      	ldr	r3, [pc, #64]	@ (80018e8 <ST7735_SetRotation+0x104>)
 80018a8:	781a      	ldrb	r2, [r3, #0]
 80018aa:	4b12      	ldr	r3, [pc, #72]	@ (80018f4 <ST7735_SetRotation+0x110>)
 80018ac:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80018ae:	4b10      	ldr	r3, [pc, #64]	@ (80018f0 <ST7735_SetRotation+0x10c>)
 80018b0:	781a      	ldrb	r2, [r3, #0]
 80018b2:	4b0e      	ldr	r3, [pc, #56]	@ (80018ec <ST7735_SetRotation+0x108>)
 80018b4:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80018b6:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 80018b8:	f7ff fe44 	bl	8001544 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 80018bc:	2036      	movs	r0, #54	@ 0x36
 80018be:	f7ff fe6f 	bl	80015a0 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 80018c2:	230f      	movs	r3, #15
 80018c4:	18fb      	adds	r3, r7, r3
 80018c6:	2101      	movs	r1, #1
 80018c8:	0018      	movs	r0, r3
 80018ca:	f7ff fe83 	bl	80015d4 <ST7735_WriteData>
  ST7735_Unselect();
 80018ce:	f7ff fe45 	bl	800155c <ST7735_Unselect>
}
 80018d2:	46c0      	nop			@ (mov r8, r8)
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b004      	add	sp, #16
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	46c0      	nop			@ (mov r8, r8)
 80018dc:	20000570 	.word	0x20000570
 80018e0:	2000056e 	.word	0x2000056e
 80018e4:	2000056c 	.word	0x2000056c
 80018e8:	20000571 	.word	0x20000571
 80018ec:	20000573 	.word	0x20000573
 80018f0:	20000572 	.word	0x20000572
 80018f4:	20000574 	.word	0x20000574

080018f8 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80018f8:	b590      	push	{r4, r7, lr}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	0004      	movs	r4, r0
 8001900:	0008      	movs	r0, r1
 8001902:	0011      	movs	r1, r2
 8001904:	1dbb      	adds	r3, r7, #6
 8001906:	1c22      	adds	r2, r4, #0
 8001908:	801a      	strh	r2, [r3, #0]
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	1c02      	adds	r2, r0, #0
 800190e:	801a      	strh	r2, [r3, #0]
 8001910:	1cbb      	adds	r3, r7, #2
 8001912:	1c0a      	adds	r2, r1, #0
 8001914:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 8001916:	1dbb      	adds	r3, r7, #6
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	4a1c      	ldr	r2, [pc, #112]	@ (800198c <ST7735_DrawPixel+0x94>)
 800191c:	2100      	movs	r1, #0
 800191e:	5e52      	ldrsh	r2, [r2, r1]
 8001920:	4293      	cmp	r3, r2
 8001922:	da2f      	bge.n	8001984 <ST7735_DrawPixel+0x8c>
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	4a19      	ldr	r2, [pc, #100]	@ (8001990 <ST7735_DrawPixel+0x98>)
 800192a:	2100      	movs	r1, #0
 800192c:	5e52      	ldrsh	r2, [r2, r1]
 800192e:	4293      	cmp	r3, r2
 8001930:	da28      	bge.n	8001984 <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 8001932:	f7ff fe07 	bl	8001544 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8001936:	1dbb      	adds	r3, r7, #6
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	b2d8      	uxtb	r0, r3
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	b2d9      	uxtb	r1, r3
 8001942:	1dbb      	adds	r3, r7, #6
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	b2db      	uxtb	r3, r3
 8001948:	3301      	adds	r3, #1
 800194a:	b2da      	uxtb	r2, r3
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	b2db      	uxtb	r3, r3
 8001952:	3301      	adds	r3, #1
 8001954:	b2db      	uxtb	r3, r3
 8001956:	f7ff febb 	bl	80016d0 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800195a:	1cbb      	adds	r3, r7, #2
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	0a1b      	lsrs	r3, r3, #8
 8001960:	b29b      	uxth	r3, r3
 8001962:	b2da      	uxtb	r2, r3
 8001964:	210c      	movs	r1, #12
 8001966:	187b      	adds	r3, r7, r1
 8001968:	701a      	strb	r2, [r3, #0]
 800196a:	1cbb      	adds	r3, r7, #2
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	187b      	adds	r3, r7, r1
 8001972:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 8001974:	187b      	adds	r3, r7, r1
 8001976:	2102      	movs	r1, #2
 8001978:	0018      	movs	r0, r3
 800197a:	f7ff fe2b 	bl	80015d4 <ST7735_WriteData>

    ST7735_Unselect();
 800197e:	f7ff fded 	bl	800155c <ST7735_Unselect>
 8001982:	e000      	b.n	8001986 <ST7735_DrawPixel+0x8e>
        return;
 8001984:	46c0      	nop			@ (mov r8, r8)
}
 8001986:	46bd      	mov	sp, r7
 8001988:	b005      	add	sp, #20
 800198a:	bd90      	pop	{r4, r7, pc}
 800198c:	2000056c 	.word	0x2000056c
 8001990:	2000056e 	.word	0x2000056e

08001994 <ST7735_FillRectangle>:

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001994:	b5b0      	push	{r4, r5, r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	0005      	movs	r5, r0
 800199c:	000c      	movs	r4, r1
 800199e:	0010      	movs	r0, r2
 80019a0:	0019      	movs	r1, r3
 80019a2:	1dbb      	adds	r3, r7, #6
 80019a4:	1c2a      	adds	r2, r5, #0
 80019a6:	801a      	strh	r2, [r3, #0]
 80019a8:	1d3b      	adds	r3, r7, #4
 80019aa:	1c22      	adds	r2, r4, #0
 80019ac:	801a      	strh	r2, [r3, #0]
 80019ae:	1cbb      	adds	r3, r7, #2
 80019b0:	1c02      	adds	r2, r0, #0
 80019b2:	801a      	strh	r2, [r3, #0]
 80019b4:	003b      	movs	r3, r7
 80019b6:	1c0a      	adds	r2, r1, #0
 80019b8:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 80019ba:	1dbb      	adds	r3, r7, #6
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	4a49      	ldr	r2, [pc, #292]	@ (8001ae4 <ST7735_FillRectangle+0x150>)
 80019c0:	2100      	movs	r1, #0
 80019c2:	5e52      	ldrsh	r2, [r2, r1]
 80019c4:	4293      	cmp	r3, r2
 80019c6:	db00      	blt.n	80019ca <ST7735_FillRectangle+0x36>
 80019c8:	e088      	b.n	8001adc <ST7735_FillRectangle+0x148>
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	4a46      	ldr	r2, [pc, #280]	@ (8001ae8 <ST7735_FillRectangle+0x154>)
 80019d0:	2100      	movs	r1, #0
 80019d2:	5e52      	ldrsh	r2, [r2, r1]
 80019d4:	4293      	cmp	r3, r2
 80019d6:	db00      	blt.n	80019da <ST7735_FillRectangle+0x46>
 80019d8:	e080      	b.n	8001adc <ST7735_FillRectangle+0x148>
    if((x + w - 1) >= _width) w = _width - x;
 80019da:	1dbb      	adds	r3, r7, #6
 80019dc:	881a      	ldrh	r2, [r3, #0]
 80019de:	1cbb      	adds	r3, r7, #2
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	18d3      	adds	r3, r2, r3
 80019e4:	4a3f      	ldr	r2, [pc, #252]	@ (8001ae4 <ST7735_FillRectangle+0x150>)
 80019e6:	2100      	movs	r1, #0
 80019e8:	5e52      	ldrsh	r2, [r2, r1]
 80019ea:	4293      	cmp	r3, r2
 80019ec:	dd08      	ble.n	8001a00 <ST7735_FillRectangle+0x6c>
 80019ee:	4b3d      	ldr	r3, [pc, #244]	@ (8001ae4 <ST7735_FillRectangle+0x150>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	5e9b      	ldrsh	r3, [r3, r2]
 80019f4:	b299      	uxth	r1, r3
 80019f6:	1cbb      	adds	r3, r7, #2
 80019f8:	1dba      	adds	r2, r7, #6
 80019fa:	8812      	ldrh	r2, [r2, #0]
 80019fc:	1a8a      	subs	r2, r1, r2
 80019fe:	801a      	strh	r2, [r3, #0]
    if((y + h - 1) >= _height) h = _height - y;
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	881a      	ldrh	r2, [r3, #0]
 8001a04:	003b      	movs	r3, r7
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	18d3      	adds	r3, r2, r3
 8001a0a:	4a37      	ldr	r2, [pc, #220]	@ (8001ae8 <ST7735_FillRectangle+0x154>)
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	5e52      	ldrsh	r2, [r2, r1]
 8001a10:	4293      	cmp	r3, r2
 8001a12:	dd08      	ble.n	8001a26 <ST7735_FillRectangle+0x92>
 8001a14:	4b34      	ldr	r3, [pc, #208]	@ (8001ae8 <ST7735_FillRectangle+0x154>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	5e9b      	ldrsh	r3, [r3, r2]
 8001a1a:	b299      	uxth	r1, r3
 8001a1c:	003b      	movs	r3, r7
 8001a1e:	1d3a      	adds	r2, r7, #4
 8001a20:	8812      	ldrh	r2, [r2, #0]
 8001a22:	1a8a      	subs	r2, r1, r2
 8001a24:	801a      	strh	r2, [r3, #0]

    ST7735_Select();
 8001a26:	f7ff fd8d 	bl	8001544 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001a2a:	1dbb      	adds	r3, r7, #6
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	b2d8      	uxtb	r0, r3
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	b2d9      	uxtb	r1, r3
 8001a36:	1dbb      	adds	r3, r7, #6
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	1cbb      	adds	r3, r7, #2
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	18d3      	adds	r3, r2, r3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b2dc      	uxtb	r4, r3
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	003b      	movs	r3, r7
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	18d3      	adds	r3, r2, r3
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	0022      	movs	r2, r4
 8001a60:	f7ff fe36 	bl	80016d0 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001a64:	2120      	movs	r1, #32
 8001a66:	187b      	adds	r3, r7, r1
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	0a1b      	lsrs	r3, r3, #8
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	200c      	movs	r0, #12
 8001a72:	183b      	adds	r3, r7, r0
 8001a74:	701a      	strb	r2, [r3, #0]
 8001a76:	187b      	adds	r3, r7, r1
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	183b      	adds	r3, r7, r0
 8001a7e:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001a80:	23a0      	movs	r3, #160	@ 0xa0
 8001a82:	05db      	lsls	r3, r3, #23
 8001a84:	2201      	movs	r2, #1
 8001a86:	2110      	movs	r1, #16
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f001 fb3a 	bl	8003102 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	003a      	movs	r2, r7
 8001a92:	8812      	ldrh	r2, [r2, #0]
 8001a94:	801a      	strh	r2, [r3, #0]
 8001a96:	e01a      	b.n	8001ace <ST7735_FillRectangle+0x13a>
        for(x = w; x > 0; x--) {
 8001a98:	1dbb      	adds	r3, r7, #6
 8001a9a:	1cba      	adds	r2, r7, #2
 8001a9c:	8812      	ldrh	r2, [r2, #0]
 8001a9e:	801a      	strh	r2, [r3, #0]
 8001aa0:	e00c      	b.n	8001abc <ST7735_FillRectangle+0x128>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	425b      	negs	r3, r3
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	18b9      	adds	r1, r7, r2
 8001aaa:	4810      	ldr	r0, [pc, #64]	@ (8001aec <ST7735_FillRectangle+0x158>)
 8001aac:	2202      	movs	r2, #2
 8001aae:	f003 ffad 	bl	8005a0c <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001ab2:	1dbb      	adds	r3, r7, #6
 8001ab4:	881a      	ldrh	r2, [r3, #0]
 8001ab6:	1dbb      	adds	r3, r7, #6
 8001ab8:	3a01      	subs	r2, #1
 8001aba:	801a      	strh	r2, [r3, #0]
 8001abc:	1dbb      	adds	r3, r7, #6
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1ee      	bne.n	8001aa2 <ST7735_FillRectangle+0x10e>
    for(y = h; y > 0; y--) {
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	881a      	ldrh	r2, [r3, #0]
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	3a01      	subs	r2, #1
 8001acc:	801a      	strh	r2, [r3, #0]
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1e0      	bne.n	8001a98 <ST7735_FillRectangle+0x104>
        }
    }

    ST7735_Unselect();
 8001ad6:	f7ff fd41 	bl	800155c <ST7735_Unselect>
 8001ada:	e000      	b.n	8001ade <ST7735_FillRectangle+0x14a>
    if((x >= _width) || (y >= _height)) return;
 8001adc:	46c0      	nop			@ (mov r8, r8)
}
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	b004      	add	sp, #16
 8001ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae4:	2000056c 	.word	0x2000056c
 8001ae8:	2000056e 	.word	0x2000056e
 8001aec:	200006f4 	.word	0x200006f4

08001af0 <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8001af0:	b5b0      	push	{r4, r5, r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	0005      	movs	r5, r0
 8001af8:	000c      	movs	r4, r1
 8001afa:	0010      	movs	r0, r2
 8001afc:	0019      	movs	r1, r3
 8001afe:	1dbb      	adds	r3, r7, #6
 8001b00:	1c2a      	adds	r2, r5, #0
 8001b02:	801a      	strh	r2, [r3, #0]
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	1c22      	adds	r2, r4, #0
 8001b08:	801a      	strh	r2, [r3, #0]
 8001b0a:	1cbb      	adds	r3, r7, #2
 8001b0c:	1c02      	adds	r2, r0, #0
 8001b0e:	801a      	strh	r2, [r3, #0]
 8001b10:	003b      	movs	r3, r7
 8001b12:	1c0a      	adds	r2, r1, #0
 8001b14:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8001b16:	1dbb      	adds	r3, r7, #6
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	4a2a      	ldr	r2, [pc, #168]	@ (8001bc4 <ST7735_DrawImage+0xd4>)
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	5e52      	ldrsh	r2, [r2, r1]
 8001b20:	4293      	cmp	r3, r2
 8001b22:	da47      	bge.n	8001bb4 <ST7735_DrawImage+0xc4>
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	4a27      	ldr	r2, [pc, #156]	@ (8001bc8 <ST7735_DrawImage+0xd8>)
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	5e52      	ldrsh	r2, [r2, r1]
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	da40      	bge.n	8001bb4 <ST7735_DrawImage+0xc4>
    if((x + w - 1) >= _width) return;
 8001b32:	1dbb      	adds	r3, r7, #6
 8001b34:	881a      	ldrh	r2, [r3, #0]
 8001b36:	1cbb      	adds	r3, r7, #2
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	18d3      	adds	r3, r2, r3
 8001b3c:	4a21      	ldr	r2, [pc, #132]	@ (8001bc4 <ST7735_DrawImage+0xd4>)
 8001b3e:	2100      	movs	r1, #0
 8001b40:	5e52      	ldrsh	r2, [r2, r1]
 8001b42:	4293      	cmp	r3, r2
 8001b44:	dc38      	bgt.n	8001bb8 <ST7735_DrawImage+0xc8>
    if((y + h - 1) >= _height) return;
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	881a      	ldrh	r2, [r3, #0]
 8001b4a:	003b      	movs	r3, r7
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	18d3      	adds	r3, r2, r3
 8001b50:	4a1d      	ldr	r2, [pc, #116]	@ (8001bc8 <ST7735_DrawImage+0xd8>)
 8001b52:	2100      	movs	r1, #0
 8001b54:	5e52      	ldrsh	r2, [r2, r1]
 8001b56:	4293      	cmp	r3, r2
 8001b58:	dc30      	bgt.n	8001bbc <ST7735_DrawImage+0xcc>

    ST7735_Select();
 8001b5a:	f7ff fcf3 	bl	8001544 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001b5e:	1dbb      	adds	r3, r7, #6
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	b2d8      	uxtb	r0, r3
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	b2d9      	uxtb	r1, r3
 8001b6a:	1dbb      	adds	r3, r7, #6
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	1cbb      	adds	r3, r7, #2
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	18d3      	adds	r3, r2, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	b2dc      	uxtb	r4, r3
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	003b      	movs	r3, r7
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	18d3      	adds	r3, r2, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	0022      	movs	r2, r4
 8001b94:	f7ff fd9c 	bl	80016d0 <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8001b98:	1cbb      	adds	r3, r7, #2
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	003a      	movs	r2, r7
 8001b9e:	8812      	ldrh	r2, [r2, #0]
 8001ba0:	4353      	muls	r3, r2
 8001ba2:	005a      	lsls	r2, r3, #1
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	0011      	movs	r1, r2
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f7ff fd13 	bl	80015d4 <ST7735_WriteData>
    ST7735_Unselect();
 8001bae:	f7ff fcd5 	bl	800155c <ST7735_Unselect>
 8001bb2:	e004      	b.n	8001bbe <ST7735_DrawImage+0xce>
    if((x >= _width) || (y >= _height)) return;
 8001bb4:	46c0      	nop			@ (mov r8, r8)
 8001bb6:	e002      	b.n	8001bbe <ST7735_DrawImage+0xce>
    if((x + w - 1) >= _width) return;
 8001bb8:	46c0      	nop			@ (mov r8, r8)
 8001bba:	e000      	b.n	8001bbe <ST7735_DrawImage+0xce>
    if((y + h - 1) >= _height) return;
 8001bbc:	46c0      	nop			@ (mov r8, r8)
}
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b002      	add	sp, #8
 8001bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc4:	2000056c 	.word	0x2000056c
 8001bc8:	2000056e 	.word	0x2000056e

08001bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bcc:	b590      	push	{r4, r7, lr}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bd2:	f000 ff6f 	bl	8002ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bd6:	f000 f955 	bl	8001e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bda:	f000 fbbb 	bl	8002354 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001bde:	f000 f9b3 	bl	8001f48 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001be2:	f000 faa1 	bl	8002128 <MX_SPI1_Init>
  MX_TIM17_Init();
 8001be6:	f000 fadf 	bl	80021a8 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8001bea:	f000 fb65 	bl	80022b8 <MX_USART1_UART_Init>
  //MX_USART2_UART_Init();
  MX_RTC_Init();
 8001bee:	f000 f9eb 	bl	8001fc8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001bf2:	4b8f      	ldr	r3, [pc, #572]	@ (8001e30 <main+0x264>)
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f004 fa96 	bl	8006128 <HAL_TIM_PWM_Start>
  ST7735_Unselect();
 8001bfc:	f7ff fcae 	bl	800155c <ST7735_Unselect>
  ST7735_Init(1);
 8001c00:	2001      	movs	r0, #1
 8001c02:	f7ff fdbd 	bl	8001780 <ST7735_Init>
  //testAll();
  buffer[0] = 'A';
 8001c06:	4b8b      	ldr	r3, [pc, #556]	@ (8001e34 <main+0x268>)
 8001c08:	2241      	movs	r2, #65	@ 0x41
 8001c0a:	701a      	strb	r2, [r3, #0]
  buffer[1] = 'B';
 8001c0c:	4b89      	ldr	r3, [pc, #548]	@ (8001e34 <main+0x268>)
 8001c0e:	2242      	movs	r2, #66	@ 0x42
 8001c10:	705a      	strb	r2, [r3, #1]
  TIM17->CCR1 = 5;
 8001c12:	4b89      	ldr	r3, [pc, #548]	@ (8001e38 <main+0x26c>)
 8001c14:	2205      	movs	r2, #5
 8001c16:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM17->PSC=64;
 8001c18:	4b87      	ldr	r3, [pc, #540]	@ (8001e38 <main+0x26c>)
 8001c1a:	2240      	movs	r2, #64	@ 0x40
 8001c1c:	629a      	str	r2, [r3, #40]	@ 0x28
  uint8_t ret=0;
 8001c1e:	1dfb      	adds	r3, r7, #7
 8001c20:	2200      	movs	r2, #0
 8001c22:	701a      	strb	r2, [r3, #0]
    //_ADXL343_Init();

      //Pedometer Setup
      _ADXL343_WriteReg8(0x19, 0x02);
 8001c24:	2102      	movs	r1, #2
 8001c26:	2019      	movs	r0, #25
 8001c28:	f000 fc2e 	bl	8002488 <_ADXL343_WriteReg8>
      ////wait

      _ADXL343_WriteReg8(0x7C, 0x01);
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	207c      	movs	r0, #124	@ 0x7c
 8001c30:	f000 fc2a 	bl	8002488 <_ADXL343_WriteReg8>
       _ADXL343_WriteReg8(0x1A, 0x38);
 8001c34:	2138      	movs	r1, #56	@ 0x38
 8001c36:	201a      	movs	r0, #26
 8001c38:	f000 fc26 	bl	8002488 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1B, 0x04);
 8001c3c:	2104      	movs	r1, #4
 8001c3e:	201b      	movs	r0, #27
 8001c40:	f000 fc22 	bl	8002488 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1F, 0x80);
 8001c44:	2180      	movs	r1, #128	@ 0x80
 8001c46:	201f      	movs	r0, #31
 8001c48:	f000 fc1e 	bl	8002488 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x21, 0x80);
 8001c4c:	2180      	movs	r1, #128	@ 0x80
 8001c4e:	2021      	movs	r0, #33	@ 0x21
 8001c50:	f000 fc1a 	bl	8002488 <_ADXL343_WriteReg8>



      //  //Step Counter
      _ADXL343_WriteReg8(0x18, 0x01); // enable walking mode
 8001c54:	2101      	movs	r1, #1
 8001c56:	2018      	movs	r0, #24
 8001c58:	f000 fc16 	bl	8002488 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x20, 0x01); // enable step interrupt
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	2020      	movs	r0, #32
 8001c60:	f000 fc12 	bl	8002488 <_ADXL343_WriteReg8>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  steps=0;
 8001c64:	4b75      	ldr	r3, [pc, #468]	@ (8001e3c <main+0x270>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
	  if((whileI++)%3==0)
 8001c6a:	4b75      	ldr	r3, [pc, #468]	@ (8001e40 <main+0x274>)
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	b291      	uxth	r1, r2
 8001c74:	4a72      	ldr	r2, [pc, #456]	@ (8001e40 <main+0x274>)
 8001c76:	8011      	strh	r1, [r2, #0]
 8001c78:	2103      	movs	r1, #3
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f7fe fad2 	bl	8000224 <__aeabi_uidivmod>
 8001c80:	000b      	movs	r3, r1
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10f      	bne.n	8001ca8 <main+0xdc>
		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET)
 8001c88:	4b6e      	ldr	r3, [pc, #440]	@ (8001e44 <main+0x278>)
 8001c8a:	2102      	movs	r1, #2
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f001 fa1b 	bl	80030c8 <HAL_GPIO_ReadPin>
 8001c92:	0003      	movs	r3, r0
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d104      	bne.n	8001ca2 <main+0xd6>
		  		  fillScreen(WHITE);
 8001c98:	4b6b      	ldr	r3, [pc, #428]	@ (8001e48 <main+0x27c>)
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f7ff fb18 	bl	80012d0 <fillScreen>
 8001ca0:	e002      	b.n	8001ca8 <main+0xdc>
		  	  else
		  		  fillScreen(BLACK);
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f7ff fb14 	bl	80012d0 <fillScreen>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET)
 8001ca8:	2380      	movs	r3, #128	@ 0x80
 8001caa:	011a      	lsls	r2, r3, #4
 8001cac:	23a0      	movs	r3, #160	@ 0xa0
 8001cae:	05db      	lsls	r3, r3, #23
 8001cb0:	0011      	movs	r1, r2
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f001 fa08 	bl	80030c8 <HAL_GPIO_ReadPin>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d106      	bne.n	8001ccc <main+0x100>
		  petXPos-=5;
 8001cbe:	4b63      	ldr	r3, [pc, #396]	@ (8001e4c <main+0x280>)
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	3b05      	subs	r3, #5
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	4b60      	ldr	r3, [pc, #384]	@ (8001e4c <main+0x280>)
 8001cca:	801a      	strh	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET)
 8001ccc:	2380      	movs	r3, #128	@ 0x80
 8001cce:	015a      	lsls	r2, r3, #5
 8001cd0:	23a0      	movs	r3, #160	@ 0xa0
 8001cd2:	05db      	lsls	r3, r3, #23
 8001cd4:	0011      	movs	r1, r2
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f001 f9f6 	bl	80030c8 <HAL_GPIO_ReadPin>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d106      	bne.n	8001cf0 <main+0x124>
		  petXPos+=5;
 8001ce2:	4b5a      	ldr	r3, [pc, #360]	@ (8001e4c <main+0x280>)
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	3305      	adds	r3, #5
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	4b57      	ldr	r3, [pc, #348]	@ (8001e4c <main+0x280>)
 8001cee:	801a      	strh	r2, [r3, #0]
	  if(petXPos<3)petXPos=0;
 8001cf0:	4b56      	ldr	r3, [pc, #344]	@ (8001e4c <main+0x280>)
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d802      	bhi.n	8001d00 <main+0x134>
 8001cfa:	4b54      	ldr	r3, [pc, #336]	@ (8001e4c <main+0x280>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	801a      	strh	r2, [r3, #0]
	  if(petXPos>60) petXPos=60;
 8001d00:	4b52      	ldr	r3, [pc, #328]	@ (8001e4c <main+0x280>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	2b3c      	cmp	r3, #60	@ 0x3c
 8001d08:	d902      	bls.n	8001d10 <main+0x144>
 8001d0a:	4b50      	ldr	r3, [pc, #320]	@ (8001e4c <main+0x280>)
 8001d0c:	223c      	movs	r2, #60	@ 0x3c
 8001d0e:	801a      	strh	r2, [r3, #0]
	  freq = freqs[(toneIndex++)%8];
 8001d10:	4b4f      	ldr	r3, [pc, #316]	@ (8001e50 <main+0x284>)
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	b291      	uxth	r1, r2
 8001d1a:	4a4d      	ldr	r2, [pc, #308]	@ (8001e50 <main+0x284>)
 8001d1c:	8011      	strh	r1, [r2, #0]
 8001d1e:	001a      	movs	r2, r3
 8001d20:	2307      	movs	r3, #7
 8001d22:	4013      	ands	r3, r2
 8001d24:	4a4b      	ldr	r2, [pc, #300]	@ (8001e54 <main+0x288>)
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	18d3      	adds	r3, r2, r3
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	494a      	ldr	r1, [pc, #296]	@ (8001e58 <main+0x28c>)
 8001d30:	600a      	str	r2, [r1, #0]
 8001d32:	604b      	str	r3, [r1, #4]
	  TIM17->ARR=(uint32_t)(987*(float)1000/(float)freq);
 8001d34:	4b48      	ldr	r3, [pc, #288]	@ (8001e58 <main+0x28c>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	0010      	movs	r0, r2
 8001d3c:	0019      	movs	r1, r3
 8001d3e:	f7fe ff49 	bl	8000bd4 <__aeabi_d2f>
 8001d42:	1c03      	adds	r3, r0, #0
 8001d44:	1c19      	adds	r1, r3, #0
 8001d46:	4845      	ldr	r0, [pc, #276]	@ (8001e5c <main+0x290>)
 8001d48:	f7fe fc60 	bl	800060c <__aeabi_fdiv>
 8001d4c:	1c03      	adds	r3, r0, #0
 8001d4e:	4c3a      	ldr	r4, [pc, #232]	@ (8001e38 <main+0x26c>)
 8001d50:	1c18      	adds	r0, r3, #0
 8001d52:	f7fe fb77 	bl	8000444 <__aeabi_f2uiz>
 8001d56:	0003      	movs	r3, r0
 8001d58:	62e3      	str	r3, [r4, #44]	@ 0x2c
	  //fillScreen(WHITE);
	  drawImage(testImage, palette, petXPos, 40, 64, 64, 296);
 8001d5a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e4c <main+0x280>)
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	493f      	ldr	r1, [pc, #252]	@ (8001e60 <main+0x294>)
 8001d62:	4840      	ldr	r0, [pc, #256]	@ (8001e64 <main+0x298>)
 8001d64:	2394      	movs	r3, #148	@ 0x94
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	9302      	str	r3, [sp, #8]
 8001d6a:	2340      	movs	r3, #64	@ 0x40
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	2340      	movs	r3, #64	@ 0x40
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2328      	movs	r3, #40	@ 0x28
 8001d74:	f7ff fb20 	bl	80013b8 <drawImage>
	  //drawImage(testImage, palette, 10, 40, 64, 64);
	  //drawImage(testImage, palette, 70, 40, 64, 64);
	  //drawImage(testImage, palette, 100, 40, 64, 64);
	  _ADXL343_ReadReg8(0x04, &accelX, 1);
 8001d78:	4b3b      	ldr	r3, [pc, #236]	@ (8001e68 <main+0x29c>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	0019      	movs	r1, r3
 8001d7e:	2004      	movs	r0, #4
 8001d80:	f000 fb4e 	bl	8002420 <_ADXL343_ReadReg8>
	  _ADXL343_ReadReg8(0x05, &accelY, 1);
 8001d84:	4b39      	ldr	r3, [pc, #228]	@ (8001e6c <main+0x2a0>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	0019      	movs	r1, r3
 8001d8a:	2005      	movs	r0, #5
 8001d8c:	f000 fb48 	bl	8002420 <_ADXL343_ReadReg8>
	  _ADXL343_ReadReg8(0x06, &accelZ, 1);
 8001d90:	4b37      	ldr	r3, [pc, #220]	@ (8001e70 <main+0x2a4>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	0019      	movs	r1, r3
 8001d96:	2006      	movs	r0, #6
 8001d98:	f000 fb42 	bl	8002420 <_ADXL343_ReadReg8>
	  _ADXL343_ReadReg8(0x07, &accelX, 1);
 8001d9c:	4b32      	ldr	r3, [pc, #200]	@ (8001e68 <main+0x29c>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	0019      	movs	r1, r3
 8001da2:	2007      	movs	r0, #7
 8001da4:	f000 fb3c 	bl	8002420 <_ADXL343_ReadReg8>
	  _ADXL343_ReadReg8(0x08, &accelY, 1);
 8001da8:	4b30      	ldr	r3, [pc, #192]	@ (8001e6c <main+0x2a0>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	0019      	movs	r1, r3
 8001dae:	2008      	movs	r0, #8
 8001db0:	f000 fb36 	bl	8002420 <_ADXL343_ReadReg8>
	  _ADXL343_ReadReg8(0x09, &accelZ, 1);
 8001db4:	4b2e      	ldr	r3, [pc, #184]	@ (8001e70 <main+0x2a4>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	0019      	movs	r1, r3
 8001dba:	2009      	movs	r0, #9
 8001dbc:	f000 fb30 	bl	8002420 <_ADXL343_ReadReg8>

	  sprintf(buffer2, "X:%d - Y:%d - Z:%d ", accelX, accelY, accelZ);
 8001dc0:	4b29      	ldr	r3, [pc, #164]	@ (8001e68 <main+0x29c>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	001a      	movs	r2, r3
 8001dc6:	4b29      	ldr	r3, [pc, #164]	@ (8001e6c <main+0x2a0>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	001c      	movs	r4, r3
 8001dcc:	4b28      	ldr	r3, [pc, #160]	@ (8001e70 <main+0x2a4>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	4928      	ldr	r1, [pc, #160]	@ (8001e74 <main+0x2a8>)
 8001dd2:	4829      	ldr	r0, [pc, #164]	@ (8001e78 <main+0x2ac>)
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	0023      	movs	r3, r4
 8001dd8:	f005 feac 	bl	8007b34 <siprintf>
	  drawString(0, 10, buffer2, BLACK, GREEN, 1, 1);
 8001ddc:	4a26      	ldr	r2, [pc, #152]	@ (8001e78 <main+0x2ac>)
 8001dde:	2301      	movs	r3, #1
 8001de0:	9302      	str	r3, [sp, #8]
 8001de2:	2301      	movs	r3, #1
 8001de4:	9301      	str	r3, [sp, #4]
 8001de6:	4b25      	ldr	r3, [pc, #148]	@ (8001e7c <main+0x2b0>)
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	2300      	movs	r3, #0
 8001dec:	210a      	movs	r1, #10
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7ff f8fe 	bl	8000ff0 <drawString>

	  _ADXL343_ReadReg8(0x15, &steps, 1);
 8001df4:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <main+0x270>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	0019      	movs	r1, r3
 8001dfa:	2015      	movs	r0, #21
 8001dfc:	f000 fb10 	bl	8002420 <_ADXL343_ReadReg8>
	  sprintf(buffer2, "Steps: %d ", (steps&0b00000011));
 8001e00:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <main+0x270>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	001a      	movs	r2, r3
 8001e06:	2303      	movs	r3, #3
 8001e08:	401a      	ands	r2, r3
 8001e0a:	491d      	ldr	r1, [pc, #116]	@ (8001e80 <main+0x2b4>)
 8001e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e78 <main+0x2ac>)
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f005 fe90 	bl	8007b34 <siprintf>
	  drawString(0, 20, buffer2, BLACK, GREEN, 1, 1);
 8001e14:	4a18      	ldr	r2, [pc, #96]	@ (8001e78 <main+0x2ac>)
 8001e16:	2301      	movs	r3, #1
 8001e18:	9302      	str	r3, [sp, #8]
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	9301      	str	r3, [sp, #4]
 8001e1e:	4b17      	ldr	r3, [pc, #92]	@ (8001e7c <main+0x2b0>)
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	2300      	movs	r3, #0
 8001e24:	2114      	movs	r1, #20
 8001e26:	2000      	movs	r0, #0
 8001e28:	f7ff f8e2 	bl	8000ff0 <drawString>
	  steps=0;
 8001e2c:	e71a      	b.n	8001c64 <main+0x98>
 8001e2e:	46c0      	nop			@ (mov r8, r8)
 8001e30:	20000758 	.word	0x20000758
 8001e34:	2000057c 	.word	0x2000057c
 8001e38:	40014800 	.word	0x40014800
 8001e3c:	20000673 	.word	0x20000673
 8001e40:	20000576 	.word	0x20000576
 8001e44:	50000800 	.word	0x50000800
 8001e48:	0000ffff 	.word	0x0000ffff
 8001e4c:	20000578 	.word	0x20000578
 8001e50:	20000608 	.word	0x20000608
 8001e54:	200004b0 	.word	0x200004b0
 8001e58:	20000600 	.word	0x20000600
 8001e5c:	4970f780 	.word	0x4970f780
 8001e60:	200004a0 	.word	0x200004a0
 8001e64:	20000000 	.word	0x20000000
 8001e68:	20000670 	.word	0x20000670
 8001e6c:	20000671 	.word	0x20000671
 8001e70:	20000672 	.word	0x20000672
 8001e74:	08008488 	.word	0x08008488
 8001e78:	2000060c 	.word	0x2000060c
 8001e7c:	ffffe007 	.word	0xffffe007
 8001e80:	0800849c 	.word	0x0800849c

08001e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e84:	b590      	push	{r4, r7, lr}
 8001e86:	b095      	sub	sp, #84	@ 0x54
 8001e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e8a:	2414      	movs	r4, #20
 8001e8c:	193b      	adds	r3, r7, r4
 8001e8e:	0018      	movs	r0, r3
 8001e90:	233c      	movs	r3, #60	@ 0x3c
 8001e92:	001a      	movs	r2, r3
 8001e94:	2100      	movs	r1, #0
 8001e96:	f005 fe6d 	bl	8007b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e9a:	1d3b      	adds	r3, r7, #4
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	2310      	movs	r3, #16
 8001ea0:	001a      	movs	r2, r3
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	f005 fe66 	bl	8007b74 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ea8:	2380      	movs	r3, #128	@ 0x80
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	0018      	movs	r0, r3
 8001eae:	f001 ff89 	bl	8003dc4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001eb2:	193b      	adds	r3, r7, r4
 8001eb4:	220a      	movs	r2, #10
 8001eb6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eb8:	193b      	adds	r3, r7, r4
 8001eba:	2280      	movs	r2, #128	@ 0x80
 8001ebc:	0052      	lsls	r2, r2, #1
 8001ebe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001ec0:	0021      	movs	r1, r4
 8001ec2:	187b      	adds	r3, r7, r1
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ec8:	187b      	adds	r3, r7, r1
 8001eca:	2240      	movs	r2, #64	@ 0x40
 8001ecc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ece:	187b      	adds	r3, r7, r1
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ed4:	187b      	adds	r3, r7, r1
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001eda:	187b      	adds	r3, r7, r1
 8001edc:	2202      	movs	r2, #2
 8001ede:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001ee0:	187b      	adds	r3, r7, r1
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001ee6:	187b      	adds	r3, r7, r1
 8001ee8:	2208      	movs	r2, #8
 8001eea:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001eec:	187b      	adds	r3, r7, r1
 8001eee:	2280      	movs	r2, #128	@ 0x80
 8001ef0:	0292      	lsls	r2, r2, #10
 8001ef2:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ef4:	187b      	adds	r3, r7, r1
 8001ef6:	2280      	movs	r2, #128	@ 0x80
 8001ef8:	0492      	lsls	r2, r2, #18
 8001efa:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001efc:	187b      	adds	r3, r7, r1
 8001efe:	2280      	movs	r2, #128	@ 0x80
 8001f00:	0592      	lsls	r2, r2, #22
 8001f02:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	0018      	movs	r0, r3
 8001f08:	f001 ffa8 	bl	8003e5c <HAL_RCC_OscConfig>
 8001f0c:	1e03      	subs	r3, r0, #0
 8001f0e:	d001      	beq.n	8001f14 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001f10:	f000 fb1a 	bl	8002548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	2207      	movs	r2, #7
 8001f18:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f20:	1d3b      	adds	r3, r7, #4
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	2200      	movs	r2, #0
 8001f2a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	2102      	movs	r1, #2
 8001f30:	0018      	movs	r0, r3
 8001f32:	f002 faf3 	bl	800451c <HAL_RCC_ClockConfig>
 8001f36:	1e03      	subs	r3, r0, #0
 8001f38:	d001      	beq.n	8001f3e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001f3a:	f000 fb05 	bl	8002548 <Error_Handler>
  }
}
 8001f3e:	46c0      	nop			@ (mov r8, r8)
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b015      	add	sp, #84	@ 0x54
 8001f44:	bd90      	pop	{r4, r7, pc}
	...

08001f48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fbc <MX_I2C1_Init+0x74>)
 8001f4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fc0 <MX_I2C1_Init+0x78>)
 8001f50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8001f52:	4b1a      	ldr	r3, [pc, #104]	@ (8001fbc <MX_I2C1_Init+0x74>)
 8001f54:	4a1b      	ldr	r2, [pc, #108]	@ (8001fc4 <MX_I2C1_Init+0x7c>)
 8001f56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f58:	4b18      	ldr	r3, [pc, #96]	@ (8001fbc <MX_I2C1_Init+0x74>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f5e:	4b17      	ldr	r3, [pc, #92]	@ (8001fbc <MX_I2C1_Init+0x74>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f64:	4b15      	ldr	r3, [pc, #84]	@ (8001fbc <MX_I2C1_Init+0x74>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f6a:	4b14      	ldr	r3, [pc, #80]	@ (8001fbc <MX_I2C1_Init+0x74>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f70:	4b12      	ldr	r3, [pc, #72]	@ (8001fbc <MX_I2C1_Init+0x74>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f76:	4b11      	ldr	r3, [pc, #68]	@ (8001fbc <MX_I2C1_Init+0x74>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fbc <MX_I2C1_Init+0x74>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f82:	4b0e      	ldr	r3, [pc, #56]	@ (8001fbc <MX_I2C1_Init+0x74>)
 8001f84:	0018      	movs	r0, r3
 8001f86:	f001 f8d9 	bl	800313c <HAL_I2C_Init>
 8001f8a:	1e03      	subs	r3, r0, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f8e:	f000 fadb 	bl	8002548 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f92:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <MX_I2C1_Init+0x74>)
 8001f94:	2100      	movs	r1, #0
 8001f96:	0018      	movs	r0, r3
 8001f98:	f001 fe7c 	bl	8003c94 <HAL_I2CEx_ConfigAnalogFilter>
 8001f9c:	1e03      	subs	r3, r0, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001fa0:	f000 fad2 	bl	8002548 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001fa4:	4b05      	ldr	r3, [pc, #20]	@ (8001fbc <MX_I2C1_Init+0x74>)
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f001 febf 	bl	8003d2c <HAL_I2CEx_ConfigDigitalFilter>
 8001fae:	1e03      	subs	r3, r0, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001fb2:	f000 fac9 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fb6:	46c0      	nop			@ (mov r8, r8)
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000674 	.word	0x20000674
 8001fc0:	40005400 	.word	0x40005400
 8001fc4:	10b17db5 	.word	0x10b17db5

08001fc8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b090      	sub	sp, #64	@ 0x40
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001fce:	232c      	movs	r3, #44	@ 0x2c
 8001fd0:	18fb      	adds	r3, r7, r3
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	2314      	movs	r3, #20
 8001fd6:	001a      	movs	r2, r3
 8001fd8:	2100      	movs	r1, #0
 8001fda:	f005 fdcb 	bl	8007b74 <memset>
  RTC_DateTypeDef sDate = {0};
 8001fde:	2328      	movs	r3, #40	@ 0x28
 8001fe0:	18fb      	adds	r3, r7, r3
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8001fe6:	003b      	movs	r3, r7
 8001fe8:	0018      	movs	r0, r3
 8001fea:	2328      	movs	r3, #40	@ 0x28
 8001fec:	001a      	movs	r2, r3
 8001fee:	2100      	movs	r1, #0
 8001ff0:	f005 fdc0 	bl	8007b74 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ff4:	4b49      	ldr	r3, [pc, #292]	@ (800211c <MX_RTC_Init+0x154>)
 8001ff6:	4a4a      	ldr	r2, [pc, #296]	@ (8002120 <MX_RTC_Init+0x158>)
 8001ff8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ffa:	4b48      	ldr	r3, [pc, #288]	@ (800211c <MX_RTC_Init+0x154>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8002000:	4b46      	ldr	r3, [pc, #280]	@ (800211c <MX_RTC_Init+0x154>)
 8002002:	227f      	movs	r2, #127	@ 0x7f
 8002004:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8002006:	4b45      	ldr	r3, [pc, #276]	@ (800211c <MX_RTC_Init+0x154>)
 8002008:	22ff      	movs	r2, #255	@ 0xff
 800200a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800200c:	4b43      	ldr	r3, [pc, #268]	@ (800211c <MX_RTC_Init+0x154>)
 800200e:	2200      	movs	r2, #0
 8002010:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002012:	4b42      	ldr	r3, [pc, #264]	@ (800211c <MX_RTC_Init+0x154>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002018:	4b40      	ldr	r3, [pc, #256]	@ (800211c <MX_RTC_Init+0x154>)
 800201a:	2200      	movs	r2, #0
 800201c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800201e:	4b3f      	ldr	r3, [pc, #252]	@ (800211c <MX_RTC_Init+0x154>)
 8002020:	2280      	movs	r2, #128	@ 0x80
 8002022:	05d2      	lsls	r2, r2, #23
 8002024:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002026:	4b3d      	ldr	r3, [pc, #244]	@ (800211c <MX_RTC_Init+0x154>)
 8002028:	2200      	movs	r2, #0
 800202a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800202c:	4b3b      	ldr	r3, [pc, #236]	@ (800211c <MX_RTC_Init+0x154>)
 800202e:	0018      	movs	r0, r3
 8002030:	f002 fe5a 	bl	8004ce8 <HAL_RTC_Init>
 8002034:	1e03      	subs	r3, r0, #0
 8002036:	d001      	beq.n	800203c <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8002038:	f000 fa86 	bl	8002548 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800203c:	212c      	movs	r1, #44	@ 0x2c
 800203e:	187b      	adds	r3, r7, r1
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8002044:	187b      	adds	r3, r7, r1
 8002046:	2200      	movs	r2, #0
 8002048:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800204a:	187b      	adds	r3, r7, r1
 800204c:	2200      	movs	r2, #0
 800204e:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8002050:	187b      	adds	r3, r7, r1
 8002052:	2200      	movs	r2, #0
 8002054:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002056:	187b      	adds	r3, r7, r1
 8002058:	2200      	movs	r2, #0
 800205a:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800205c:	187b      	adds	r3, r7, r1
 800205e:	2200      	movs	r2, #0
 8002060:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002062:	1879      	adds	r1, r7, r1
 8002064:	4b2d      	ldr	r3, [pc, #180]	@ (800211c <MX_RTC_Init+0x154>)
 8002066:	2201      	movs	r2, #1
 8002068:	0018      	movs	r0, r3
 800206a:	f002 fedf 	bl	8004e2c <HAL_RTC_SetTime>
 800206e:	1e03      	subs	r3, r0, #0
 8002070:	d001      	beq.n	8002076 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8002072:	f000 fa69 	bl	8002548 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002076:	2128      	movs	r1, #40	@ 0x28
 8002078:	187b      	adds	r3, r7, r1
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800207e:	187b      	adds	r3, r7, r1
 8002080:	2201      	movs	r2, #1
 8002082:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8002084:	187b      	adds	r3, r7, r1
 8002086:	2201      	movs	r2, #1
 8002088:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800208a:	187b      	adds	r3, r7, r1
 800208c:	2200      	movs	r2, #0
 800208e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002090:	1879      	adds	r1, r7, r1
 8002092:	4b22      	ldr	r3, [pc, #136]	@ (800211c <MX_RTC_Init+0x154>)
 8002094:	2201      	movs	r2, #1
 8002096:	0018      	movs	r0, r3
 8002098:	f002 ff70 	bl	8004f7c <HAL_RTC_SetDate>
 800209c:	1e03      	subs	r3, r0, #0
 800209e:	d001      	beq.n	80020a4 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 80020a0:	f000 fa52 	bl	8002548 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80020a4:	003b      	movs	r3, r7
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80020aa:	003b      	movs	r3, r7
 80020ac:	2200      	movs	r2, #0
 80020ae:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 80020b0:	003b      	movs	r3, r7
 80020b2:	2201      	movs	r2, #1
 80020b4:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80020b6:	003b      	movs	r3, r7
 80020b8:	2200      	movs	r2, #0
 80020ba:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80020bc:	003b      	movs	r3, r7
 80020be:	2200      	movs	r2, #0
 80020c0:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80020c2:	003b      	movs	r3, r7
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80020c8:	003b      	movs	r3, r7
 80020ca:	2200      	movs	r2, #0
 80020cc:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80020ce:	003b      	movs	r3, r7
 80020d0:	2200      	movs	r2, #0
 80020d2:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80020d4:	003b      	movs	r3, r7
 80020d6:	2200      	movs	r2, #0
 80020d8:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80020da:	003b      	movs	r3, r7
 80020dc:	2220      	movs	r2, #32
 80020de:	2101      	movs	r1, #1
 80020e0:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80020e2:	003b      	movs	r3, r7
 80020e4:	2280      	movs	r2, #128	@ 0x80
 80020e6:	0052      	lsls	r2, r2, #1
 80020e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80020ea:	0039      	movs	r1, r7
 80020ec:	4b0b      	ldr	r3, [pc, #44]	@ (800211c <MX_RTC_Init+0x154>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	0018      	movs	r0, r3
 80020f2:	f002 ffd5 	bl	80050a0 <HAL_RTC_SetAlarm_IT>
 80020f6:	1e03      	subs	r3, r0, #0
 80020f8:	d001      	beq.n	80020fe <MX_RTC_Init+0x136>
  {
    Error_Handler();
 80020fa:	f000 fa25 	bl	8002548 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500B, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80020fe:	4909      	ldr	r1, [pc, #36]	@ (8002124 <MX_RTC_Init+0x15c>)
 8002100:	4b06      	ldr	r3, [pc, #24]	@ (800211c <MX_RTC_Init+0x154>)
 8002102:	2200      	movs	r2, #0
 8002104:	0018      	movs	r0, r3
 8002106:	f003 fb01 	bl	800570c <HAL_RTCEx_SetWakeUpTimer_IT>
 800210a:	1e03      	subs	r3, r0, #0
 800210c:	d001      	beq.n	8002112 <MX_RTC_Init+0x14a>
  {
    Error_Handler();
 800210e:	f000 fa1b 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002112:	46c0      	nop			@ (mov r8, r8)
 8002114:	46bd      	mov	sp, r7
 8002116:	b010      	add	sp, #64	@ 0x40
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			@ (mov r8, r8)
 800211c:	200006c8 	.word	0x200006c8
 8002120:	40002800 	.word	0x40002800
 8002124:	0000500b 	.word	0x0000500b

08002128 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800212c:	4b1c      	ldr	r3, [pc, #112]	@ (80021a0 <MX_SPI1_Init+0x78>)
 800212e:	4a1d      	ldr	r2, [pc, #116]	@ (80021a4 <MX_SPI1_Init+0x7c>)
 8002130:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002132:	4b1b      	ldr	r3, [pc, #108]	@ (80021a0 <MX_SPI1_Init+0x78>)
 8002134:	2282      	movs	r2, #130	@ 0x82
 8002136:	0052      	lsls	r2, r2, #1
 8002138:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800213a:	4b19      	ldr	r3, [pc, #100]	@ (80021a0 <MX_SPI1_Init+0x78>)
 800213c:	2280      	movs	r2, #128	@ 0x80
 800213e:	0212      	lsls	r2, r2, #8
 8002140:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002142:	4b17      	ldr	r3, [pc, #92]	@ (80021a0 <MX_SPI1_Init+0x78>)
 8002144:	22e0      	movs	r2, #224	@ 0xe0
 8002146:	00d2      	lsls	r2, r2, #3
 8002148:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800214a:	4b15      	ldr	r3, [pc, #84]	@ (80021a0 <MX_SPI1_Init+0x78>)
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002150:	4b13      	ldr	r3, [pc, #76]	@ (80021a0 <MX_SPI1_Init+0x78>)
 8002152:	2200      	movs	r2, #0
 8002154:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002156:	4b12      	ldr	r3, [pc, #72]	@ (80021a0 <MX_SPI1_Init+0x78>)
 8002158:	2280      	movs	r2, #128	@ 0x80
 800215a:	0092      	lsls	r2, r2, #2
 800215c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800215e:	4b10      	ldr	r3, [pc, #64]	@ (80021a0 <MX_SPI1_Init+0x78>)
 8002160:	2220      	movs	r2, #32
 8002162:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002164:	4b0e      	ldr	r3, [pc, #56]	@ (80021a0 <MX_SPI1_Init+0x78>)
 8002166:	2200      	movs	r2, #0
 8002168:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800216a:	4b0d      	ldr	r3, [pc, #52]	@ (80021a0 <MX_SPI1_Init+0x78>)
 800216c:	2200      	movs	r2, #0
 800216e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002170:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <MX_SPI1_Init+0x78>)
 8002172:	2200      	movs	r2, #0
 8002174:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002176:	4b0a      	ldr	r3, [pc, #40]	@ (80021a0 <MX_SPI1_Init+0x78>)
 8002178:	2207      	movs	r2, #7
 800217a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800217c:	4b08      	ldr	r3, [pc, #32]	@ (80021a0 <MX_SPI1_Init+0x78>)
 800217e:	2200      	movs	r2, #0
 8002180:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002182:	4b07      	ldr	r3, [pc, #28]	@ (80021a0 <MX_SPI1_Init+0x78>)
 8002184:	2208      	movs	r2, #8
 8002186:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002188:	4b05      	ldr	r3, [pc, #20]	@ (80021a0 <MX_SPI1_Init+0x78>)
 800218a:	0018      	movs	r0, r3
 800218c:	f003 fb86 	bl	800589c <HAL_SPI_Init>
 8002190:	1e03      	subs	r3, r0, #0
 8002192:	d001      	beq.n	8002198 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8002194:	f000 f9d8 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002198:	46c0      	nop			@ (mov r8, r8)
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			@ (mov r8, r8)
 80021a0:	200006f4 	.word	0x200006f4
 80021a4:	40013000 	.word	0x40013000

080021a8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b094      	sub	sp, #80	@ 0x50
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ae:	2334      	movs	r3, #52	@ 0x34
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	0018      	movs	r0, r3
 80021b4:	231c      	movs	r3, #28
 80021b6:	001a      	movs	r2, r3
 80021b8:	2100      	movs	r1, #0
 80021ba:	f005 fcdb 	bl	8007b74 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021be:	003b      	movs	r3, r7
 80021c0:	0018      	movs	r0, r3
 80021c2:	2334      	movs	r3, #52	@ 0x34
 80021c4:	001a      	movs	r2, r3
 80021c6:	2100      	movs	r1, #0
 80021c8:	f005 fcd4 	bl	8007b74 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80021cc:	4b37      	ldr	r3, [pc, #220]	@ (80022ac <MX_TIM17_Init+0x104>)
 80021ce:	4a38      	ldr	r2, [pc, #224]	@ (80022b0 <MX_TIM17_Init+0x108>)
 80021d0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80021d2:	4b36      	ldr	r3, [pc, #216]	@ (80022ac <MX_TIM17_Init+0x104>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d8:	4b34      	ldr	r3, [pc, #208]	@ (80022ac <MX_TIM17_Init+0x104>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80021de:	4b33      	ldr	r3, [pc, #204]	@ (80022ac <MX_TIM17_Init+0x104>)
 80021e0:	4a34      	ldr	r2, [pc, #208]	@ (80022b4 <MX_TIM17_Init+0x10c>)
 80021e2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e4:	4b31      	ldr	r3, [pc, #196]	@ (80022ac <MX_TIM17_Init+0x104>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80021ea:	4b30      	ldr	r3, [pc, #192]	@ (80022ac <MX_TIM17_Init+0x104>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f0:	4b2e      	ldr	r3, [pc, #184]	@ (80022ac <MX_TIM17_Init+0x104>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80021f6:	4b2d      	ldr	r3, [pc, #180]	@ (80022ac <MX_TIM17_Init+0x104>)
 80021f8:	0018      	movs	r0, r3
 80021fa:	f003 fedd 	bl	8005fb8 <HAL_TIM_Base_Init>
 80021fe:	1e03      	subs	r3, r0, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8002202:	f000 f9a1 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002206:	4b29      	ldr	r3, [pc, #164]	@ (80022ac <MX_TIM17_Init+0x104>)
 8002208:	0018      	movs	r0, r3
 800220a:	f003 ff2d 	bl	8006068 <HAL_TIM_PWM_Init>
 800220e:	1e03      	subs	r3, r0, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8002212:	f000 f999 	bl	8002548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002216:	2134      	movs	r1, #52	@ 0x34
 8002218:	187b      	adds	r3, r7, r1
 800221a:	2260      	movs	r2, #96	@ 0x60
 800221c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800221e:	187b      	adds	r3, r7, r1
 8002220:	2200      	movs	r2, #0
 8002222:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002224:	187b      	adds	r3, r7, r1
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800222a:	187b      	adds	r3, r7, r1
 800222c:	2200      	movs	r2, #0
 800222e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002230:	187b      	adds	r3, r7, r1
 8002232:	2200      	movs	r2, #0
 8002234:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002236:	187b      	adds	r3, r7, r1
 8002238:	2200      	movs	r2, #0
 800223a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800223c:	187b      	adds	r3, r7, r1
 800223e:	2200      	movs	r2, #0
 8002240:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002242:	1879      	adds	r1, r7, r1
 8002244:	4b19      	ldr	r3, [pc, #100]	@ (80022ac <MX_TIM17_Init+0x104>)
 8002246:	2200      	movs	r2, #0
 8002248:	0018      	movs	r0, r3
 800224a:	f004 f85d 	bl	8006308 <HAL_TIM_PWM_ConfigChannel>
 800224e:	1e03      	subs	r3, r0, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8002252:	f000 f979 	bl	8002548 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002256:	003b      	movs	r3, r7
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800225c:	003b      	movs	r3, r7
 800225e:	2200      	movs	r2, #0
 8002260:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002262:	003b      	movs	r3, r7
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002268:	003b      	movs	r3, r7
 800226a:	2200      	movs	r2, #0
 800226c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800226e:	003b      	movs	r3, r7
 8002270:	2200      	movs	r2, #0
 8002272:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002274:	003b      	movs	r3, r7
 8002276:	2280      	movs	r2, #128	@ 0x80
 8002278:	0192      	lsls	r2, r2, #6
 800227a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800227c:	003b      	movs	r3, r7
 800227e:	2200      	movs	r2, #0
 8002280:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002282:	003b      	movs	r3, r7
 8002284:	2200      	movs	r2, #0
 8002286:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002288:	003a      	movs	r2, r7
 800228a:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <MX_TIM17_Init+0x104>)
 800228c:	0011      	movs	r1, r2
 800228e:	0018      	movs	r0, r3
 8002290:	f004 fcba 	bl	8006c08 <HAL_TIMEx_ConfigBreakDeadTime>
 8002294:	1e03      	subs	r3, r0, #0
 8002296:	d001      	beq.n	800229c <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8002298:	f000 f956 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800229c:	4b03      	ldr	r3, [pc, #12]	@ (80022ac <MX_TIM17_Init+0x104>)
 800229e:	0018      	movs	r0, r3
 80022a0:	f000 fa92 	bl	80027c8 <HAL_TIM_MspPostInit>

}
 80022a4:	46c0      	nop			@ (mov r8, r8)
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b014      	add	sp, #80	@ 0x50
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000758 	.word	0x20000758
 80022b0:	40014800 	.word	0x40014800
 80022b4:	0000ffff 	.word	0x0000ffff

080022b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022bc:	4b23      	ldr	r3, [pc, #140]	@ (800234c <MX_USART1_UART_Init+0x94>)
 80022be:	4a24      	ldr	r2, [pc, #144]	@ (8002350 <MX_USART1_UART_Init+0x98>)
 80022c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80022c2:	4b22      	ldr	r3, [pc, #136]	@ (800234c <MX_USART1_UART_Init+0x94>)
 80022c4:	2296      	movs	r2, #150	@ 0x96
 80022c6:	0192      	lsls	r2, r2, #6
 80022c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022ca:	4b20      	ldr	r3, [pc, #128]	@ (800234c <MX_USART1_UART_Init+0x94>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022d0:	4b1e      	ldr	r3, [pc, #120]	@ (800234c <MX_USART1_UART_Init+0x94>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022d6:	4b1d      	ldr	r3, [pc, #116]	@ (800234c <MX_USART1_UART_Init+0x94>)
 80022d8:	2200      	movs	r2, #0
 80022da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022dc:	4b1b      	ldr	r3, [pc, #108]	@ (800234c <MX_USART1_UART_Init+0x94>)
 80022de:	220c      	movs	r2, #12
 80022e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022e2:	4b1a      	ldr	r3, [pc, #104]	@ (800234c <MX_USART1_UART_Init+0x94>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e8:	4b18      	ldr	r3, [pc, #96]	@ (800234c <MX_USART1_UART_Init+0x94>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ee:	4b17      	ldr	r3, [pc, #92]	@ (800234c <MX_USART1_UART_Init+0x94>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022f4:	4b15      	ldr	r3, [pc, #84]	@ (800234c <MX_USART1_UART_Init+0x94>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022fa:	4b14      	ldr	r3, [pc, #80]	@ (800234c <MX_USART1_UART_Init+0x94>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002300:	4b12      	ldr	r3, [pc, #72]	@ (800234c <MX_USART1_UART_Init+0x94>)
 8002302:	0018      	movs	r0, r3
 8002304:	f004 fd1c 	bl	8006d40 <HAL_UART_Init>
 8002308:	1e03      	subs	r3, r0, #0
 800230a:	d001      	beq.n	8002310 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800230c:	f000 f91c 	bl	8002548 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002310:	4b0e      	ldr	r3, [pc, #56]	@ (800234c <MX_USART1_UART_Init+0x94>)
 8002312:	2100      	movs	r1, #0
 8002314:	0018      	movs	r0, r3
 8002316:	f005 fb2d 	bl	8007974 <HAL_UARTEx_SetTxFifoThreshold>
 800231a:	1e03      	subs	r3, r0, #0
 800231c:	d001      	beq.n	8002322 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800231e:	f000 f913 	bl	8002548 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002322:	4b0a      	ldr	r3, [pc, #40]	@ (800234c <MX_USART1_UART_Init+0x94>)
 8002324:	2100      	movs	r1, #0
 8002326:	0018      	movs	r0, r3
 8002328:	f005 fb64 	bl	80079f4 <HAL_UARTEx_SetRxFifoThreshold>
 800232c:	1e03      	subs	r3, r0, #0
 800232e:	d001      	beq.n	8002334 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002330:	f000 f90a 	bl	8002548 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002334:	4b05      	ldr	r3, [pc, #20]	@ (800234c <MX_USART1_UART_Init+0x94>)
 8002336:	0018      	movs	r0, r3
 8002338:	f005 fae2 	bl	8007900 <HAL_UARTEx_DisableFifoMode>
 800233c:	1e03      	subs	r3, r0, #0
 800233e:	d001      	beq.n	8002344 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002340:	f000 f902 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002344:	46c0      	nop			@ (mov r8, r8)
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	46c0      	nop			@ (mov r8, r8)
 800234c:	200007a4 	.word	0x200007a4
 8002350:	40013800 	.word	0x40013800

08002354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002354:	b590      	push	{r4, r7, lr}
 8002356:	b089      	sub	sp, #36	@ 0x24
 8002358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235a:	240c      	movs	r4, #12
 800235c:	193b      	adds	r3, r7, r4
 800235e:	0018      	movs	r0, r3
 8002360:	2314      	movs	r3, #20
 8002362:	001a      	movs	r2, r3
 8002364:	2100      	movs	r1, #0
 8002366:	f005 fc05 	bl	8007b74 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800236a:	4b2b      	ldr	r3, [pc, #172]	@ (8002418 <MX_GPIO_Init+0xc4>)
 800236c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800236e:	4b2a      	ldr	r3, [pc, #168]	@ (8002418 <MX_GPIO_Init+0xc4>)
 8002370:	2104      	movs	r1, #4
 8002372:	430a      	orrs	r2, r1
 8002374:	635a      	str	r2, [r3, #52]	@ 0x34
 8002376:	4b28      	ldr	r3, [pc, #160]	@ (8002418 <MX_GPIO_Init+0xc4>)
 8002378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800237a:	2204      	movs	r2, #4
 800237c:	4013      	ands	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002382:	4b25      	ldr	r3, [pc, #148]	@ (8002418 <MX_GPIO_Init+0xc4>)
 8002384:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002386:	4b24      	ldr	r3, [pc, #144]	@ (8002418 <MX_GPIO_Init+0xc4>)
 8002388:	2101      	movs	r1, #1
 800238a:	430a      	orrs	r2, r1
 800238c:	635a      	str	r2, [r3, #52]	@ 0x34
 800238e:	4b22      	ldr	r3, [pc, #136]	@ (8002418 <MX_GPIO_Init+0xc4>)
 8002390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002392:	2201      	movs	r2, #1
 8002394:	4013      	ands	r3, r2
 8002396:	607b      	str	r3, [r7, #4]
 8002398:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800239a:	23a0      	movs	r3, #160	@ 0xa0
 800239c:	05db      	lsls	r3, r3, #23
 800239e:	2200      	movs	r2, #0
 80023a0:	2138      	movs	r1, #56	@ 0x38
 80023a2:	0018      	movs	r0, r3
 80023a4:	f000 fead 	bl	8003102 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80023a8:	193b      	adds	r3, r7, r4
 80023aa:	2202      	movs	r2, #2
 80023ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ae:	193b      	adds	r3, r7, r4
 80023b0:	2200      	movs	r2, #0
 80023b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	193b      	adds	r3, r7, r4
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ba:	193b      	adds	r3, r7, r4
 80023bc:	4a17      	ldr	r2, [pc, #92]	@ (800241c <MX_GPIO_Init+0xc8>)
 80023be:	0019      	movs	r1, r3
 80023c0:	0010      	movs	r0, r2
 80023c2:	f000 fd15 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80023c6:	193b      	adds	r3, r7, r4
 80023c8:	2238      	movs	r2, #56	@ 0x38
 80023ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023cc:	193b      	adds	r3, r7, r4
 80023ce:	2201      	movs	r2, #1
 80023d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	193b      	adds	r3, r7, r4
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d8:	193b      	adds	r3, r7, r4
 80023da:	2200      	movs	r2, #0
 80023dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023de:	193a      	adds	r2, r7, r4
 80023e0:	23a0      	movs	r3, #160	@ 0xa0
 80023e2:	05db      	lsls	r3, r3, #23
 80023e4:	0011      	movs	r1, r2
 80023e6:	0018      	movs	r0, r3
 80023e8:	f000 fd02 	bl	8002df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80023ec:	0021      	movs	r1, r4
 80023ee:	187b      	adds	r3, r7, r1
 80023f0:	22c0      	movs	r2, #192	@ 0xc0
 80023f2:	0152      	lsls	r2, r2, #5
 80023f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f6:	187b      	adds	r3, r7, r1
 80023f8:	2200      	movs	r2, #0
 80023fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	187b      	adds	r3, r7, r1
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002402:	187a      	adds	r2, r7, r1
 8002404:	23a0      	movs	r3, #160	@ 0xa0
 8002406:	05db      	lsls	r3, r3, #23
 8002408:	0011      	movs	r1, r2
 800240a:	0018      	movs	r0, r3
 800240c:	f000 fcf0 	bl	8002df0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002410:	46c0      	nop			@ (mov r8, r8)
 8002412:	46bd      	mov	sp, r7
 8002414:	b009      	add	sp, #36	@ 0x24
 8002416:	bd90      	pop	{r4, r7, pc}
 8002418:	40021000 	.word	0x40021000
 800241c:	50000800 	.word	0x50000800

08002420 <_ADXL343_ReadReg8>:

/* USER CODE BEGIN 4 */
int _ADXL343_ReadReg8 (unsigned char TargetRegister, unsigned char * TargetValue, uint8_t size)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af02      	add	r7, sp, #8
 8002426:	6039      	str	r1, [r7, #0]
 8002428:	0011      	movs	r1, r2
 800242a:	1dfb      	adds	r3, r7, #7
 800242c:	1c02      	adds	r2, r0, #0
 800242e:	701a      	strb	r2, [r3, #0]
 8002430:	1dbb      	adds	r3, r7, #6
 8002432:	1c0a      	adds	r2, r1, #0
 8002434:	701a      	strb	r2, [r3, #0]
  if (!HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, TargetRegister, 1, 1000)==HAL_OK)
 8002436:	1dfb      	adds	r3, r7, #7
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	001a      	movs	r2, r3
 800243c:	4811      	ldr	r0, [pc, #68]	@ (8002484 <_ADXL343_ReadReg8+0x64>)
 800243e:	23fa      	movs	r3, #250	@ 0xfa
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	2301      	movs	r3, #1
 8002446:	2128      	movs	r1, #40	@ 0x28
 8002448:	f000 ff1e 	bl	8003288 <HAL_I2C_Master_Transmit>
 800244c:	1e03      	subs	r3, r0, #0
 800244e:	d002      	beq.n	8002456 <_ADXL343_ReadReg8+0x36>
      return -1;
 8002450:	2301      	movs	r3, #1
 8002452:	425b      	negs	r3, r3
 8002454:	e011      	b.n	800247a <_ADXL343_ReadReg8+0x5a>

  if (!HAL_I2C_Master_Receive(&hi2c1, 0x14<<1, TargetValue, size, 1000)==HAL_OK)
 8002456:	1dbb      	adds	r3, r7, #6
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	b299      	uxth	r1, r3
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	4809      	ldr	r0, [pc, #36]	@ (8002484 <_ADXL343_ReadReg8+0x64>)
 8002460:	23fa      	movs	r3, #250	@ 0xfa
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	000b      	movs	r3, r1
 8002468:	2128      	movs	r1, #40	@ 0x28
 800246a:	f001 f837 	bl	80034dc <HAL_I2C_Master_Receive>
 800246e:	1e03      	subs	r3, r0, #0
 8002470:	d002      	beq.n	8002478 <_ADXL343_ReadReg8+0x58>
    return -2;
 8002472:	2302      	movs	r3, #2
 8002474:	425b      	negs	r3, r3
 8002476:	e000      	b.n	800247a <_ADXL343_ReadReg8+0x5a>

  return 0;
 8002478:	2300      	movs	r3, #0
}
 800247a:	0018      	movs	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	b002      	add	sp, #8
 8002480:	bd80      	pop	{r7, pc}
 8002482:	46c0      	nop			@ (mov r8, r8)
 8002484:	20000674 	.word	0x20000674

08002488 <_ADXL343_WriteReg8>:

int _ADXL343_WriteReg8 (unsigned char TargetRegister, unsigned char TargetValue)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af02      	add	r7, sp, #8
 800248e:	0002      	movs	r2, r0
 8002490:	1dfb      	adds	r3, r7, #7
 8002492:	701a      	strb	r2, [r3, #0]
 8002494:	1dbb      	adds	r3, r7, #6
 8002496:	1c0a      	adds	r2, r1, #0
 8002498:	701a      	strb	r2, [r3, #0]
  unsigned char buff [2];
  buff[0] = TargetRegister;
 800249a:	210c      	movs	r1, #12
 800249c:	187b      	adds	r3, r7, r1
 800249e:	1dfa      	adds	r2, r7, #7
 80024a0:	7812      	ldrb	r2, [r2, #0]
 80024a2:	701a      	strb	r2, [r3, #0]
  buff[1] = TargetValue;
 80024a4:	187b      	adds	r3, r7, r1
 80024a6:	1dba      	adds	r2, r7, #6
 80024a8:	7812      	ldrb	r2, [r2, #0]
 80024aa:	705a      	strb	r2, [r3, #1]

  if (HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, buff, 2, 100))
 80024ac:	187a      	adds	r2, r7, r1
 80024ae:	4808      	ldr	r0, [pc, #32]	@ (80024d0 <_ADXL343_WriteReg8+0x48>)
 80024b0:	2364      	movs	r3, #100	@ 0x64
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	2302      	movs	r3, #2
 80024b6:	2128      	movs	r1, #40	@ 0x28
 80024b8:	f000 fee6 	bl	8003288 <HAL_I2C_Master_Transmit>
 80024bc:	1e03      	subs	r3, r0, #0
 80024be:	d002      	beq.n	80024c6 <_ADXL343_WriteReg8+0x3e>
      return -1;
 80024c0:	2301      	movs	r3, #1
 80024c2:	425b      	negs	r3, r3
 80024c4:	e000      	b.n	80024c8 <_ADXL343_WriteReg8+0x40>

  return 0;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	0018      	movs	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b004      	add	sp, #16
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000674 	.word	0x20000674

080024d4 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80024d4:	b590      	push	{r4, r7, lr}
 80024d6:	b091      	sub	sp, #68	@ 0x44
 80024d8:	af04      	add	r7, sp, #16
 80024da:	6078      	str	r0, [r7, #4]
  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 80024dc:	2380      	movs	r3, #128	@ 0x80
 80024de:	005a      	lsls	r2, r3, #1
 80024e0:	2408      	movs	r4, #8
 80024e2:	1939      	adds	r1, r7, r4
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	2300      	movs	r3, #0
 80024e8:	f002 ff1a 	bl	8005320 <HAL_RTC_GetAlarm>
  if(sAlarm.AlarmTime.Seconds>58) {
 80024ec:	0022      	movs	r2, r4
 80024ee:	18bb      	adds	r3, r7, r2
 80024f0:	789b      	ldrb	r3, [r3, #2]
 80024f2:	2b3a      	cmp	r3, #58	@ 0x3a
 80024f4:	d903      	bls.n	80024fe <HAL_RTC_AlarmAEventCallback+0x2a>
    sAlarm.AlarmTime.Seconds=0;
 80024f6:	18bb      	adds	r3, r7, r2
 80024f8:	2200      	movs	r2, #0
 80024fa:	709a      	strb	r2, [r3, #2]
 80024fc:	e006      	b.n	800250c <HAL_RTC_AlarmAEventCallback+0x38>
  }else{
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 80024fe:	2108      	movs	r1, #8
 8002500:	187b      	adds	r3, r7, r1
 8002502:	789b      	ldrb	r3, [r3, #2]
 8002504:	3301      	adds	r3, #1
 8002506:	b2da      	uxtb	r2, r3
 8002508:	187b      	adds	r3, r7, r1
 800250a:	709a      	strb	r2, [r3, #2]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 800250c:	46c0      	nop			@ (mov r8, r8)
 800250e:	2308      	movs	r3, #8
 8002510:	18f9      	adds	r1, r7, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	0018      	movs	r0, r3
 8002518:	f002 fdc2 	bl	80050a0 <HAL_RTC_SetAlarm_IT>
 800251c:	1e03      	subs	r3, r0, #0
 800251e:	d1f6      	bne.n	800250e <HAL_RTC_AlarmAEventCallback+0x3a>
  	  drawString(30, 30, "testTime", BLACK, GREEN, 1, 1);
 8002520:	4a07      	ldr	r2, [pc, #28]	@ (8002540 <HAL_RTC_AlarmAEventCallback+0x6c>)
 8002522:	2301      	movs	r3, #1
 8002524:	9302      	str	r3, [sp, #8]
 8002526:	2301      	movs	r3, #1
 8002528:	9301      	str	r3, [sp, #4]
 800252a:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <HAL_RTC_AlarmAEventCallback+0x70>)
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	2300      	movs	r3, #0
 8002530:	211e      	movs	r1, #30
 8002532:	201e      	movs	r0, #30
 8002534:	f7fe fd5c 	bl	8000ff0 <drawString>
}
 8002538:	46c0      	nop			@ (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	b00d      	add	sp, #52	@ 0x34
 800253e:	bd90      	pop	{r4, r7, pc}
 8002540:	080084a8 	.word	0x080084a8
 8002544:	ffffe007 	.word	0xffffe007

08002548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800254c:	b672      	cpsid	i
}
 800254e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002550:	46c0      	nop			@ (mov r8, r8)
 8002552:	e7fd      	b.n	8002550 <Error_Handler+0x8>

08002554 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255a:	4b11      	ldr	r3, [pc, #68]	@ (80025a0 <HAL_MspInit+0x4c>)
 800255c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800255e:	4b10      	ldr	r3, [pc, #64]	@ (80025a0 <HAL_MspInit+0x4c>)
 8002560:	2101      	movs	r1, #1
 8002562:	430a      	orrs	r2, r1
 8002564:	641a      	str	r2, [r3, #64]	@ 0x40
 8002566:	4b0e      	ldr	r3, [pc, #56]	@ (80025a0 <HAL_MspInit+0x4c>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	2201      	movs	r2, #1
 800256c:	4013      	ands	r3, r2
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002572:	4b0b      	ldr	r3, [pc, #44]	@ (80025a0 <HAL_MspInit+0x4c>)
 8002574:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002576:	4b0a      	ldr	r3, [pc, #40]	@ (80025a0 <HAL_MspInit+0x4c>)
 8002578:	2180      	movs	r1, #128	@ 0x80
 800257a:	0549      	lsls	r1, r1, #21
 800257c:	430a      	orrs	r2, r1
 800257e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002580:	4b07      	ldr	r3, [pc, #28]	@ (80025a0 <HAL_MspInit+0x4c>)
 8002582:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002584:	2380      	movs	r3, #128	@ 0x80
 8002586:	055b      	lsls	r3, r3, #21
 8002588:	4013      	ands	r3, r2
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800258e:	23c0      	movs	r3, #192	@ 0xc0
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	0018      	movs	r0, r3
 8002594:	f000 fb38 	bl	8002c08 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002598:	46c0      	nop			@ (mov r8, r8)
 800259a:	46bd      	mov	sp, r7
 800259c:	b002      	add	sp, #8
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000

080025a4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b09d      	sub	sp, #116	@ 0x74
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ac:	235c      	movs	r3, #92	@ 0x5c
 80025ae:	18fb      	adds	r3, r7, r3
 80025b0:	0018      	movs	r0, r3
 80025b2:	2314      	movs	r3, #20
 80025b4:	001a      	movs	r2, r3
 80025b6:	2100      	movs	r1, #0
 80025b8:	f005 fadc 	bl	8007b74 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025bc:	2410      	movs	r4, #16
 80025be:	193b      	adds	r3, r7, r4
 80025c0:	0018      	movs	r0, r3
 80025c2:	234c      	movs	r3, #76	@ 0x4c
 80025c4:	001a      	movs	r2, r3
 80025c6:	2100      	movs	r1, #0
 80025c8:	f005 fad4 	bl	8007b74 <memset>
  if(hi2c->Instance==I2C1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a23      	ldr	r2, [pc, #140]	@ (8002660 <HAL_I2C_MspInit+0xbc>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d13f      	bne.n	8002656 <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80025d6:	193b      	adds	r3, r7, r4
 80025d8:	2220      	movs	r2, #32
 80025da:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80025dc:	193b      	adds	r3, r7, r4
 80025de:	2200      	movs	r2, #0
 80025e0:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025e2:	193b      	adds	r3, r7, r4
 80025e4:	0018      	movs	r0, r3
 80025e6:	f002 f943 	bl	8004870 <HAL_RCCEx_PeriphCLKConfig>
 80025ea:	1e03      	subs	r3, r0, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80025ee:	f7ff ffab 	bl	8002548 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002664 <HAL_I2C_MspInit+0xc0>)
 80025f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002664 <HAL_I2C_MspInit+0xc0>)
 80025f8:	2101      	movs	r1, #1
 80025fa:	430a      	orrs	r2, r1
 80025fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80025fe:	4b19      	ldr	r3, [pc, #100]	@ (8002664 <HAL_I2C_MspInit+0xc0>)
 8002600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002602:	2201      	movs	r2, #1
 8002604:	4013      	ands	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800260a:	215c      	movs	r1, #92	@ 0x5c
 800260c:	187b      	adds	r3, r7, r1
 800260e:	22c0      	movs	r2, #192	@ 0xc0
 8002610:	00d2      	lsls	r2, r2, #3
 8002612:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002614:	187b      	adds	r3, r7, r1
 8002616:	2212      	movs	r2, #18
 8002618:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	187b      	adds	r3, r7, r1
 800261c:	2200      	movs	r2, #0
 800261e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002620:	187b      	adds	r3, r7, r1
 8002622:	2200      	movs	r2, #0
 8002624:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002626:	187b      	adds	r3, r7, r1
 8002628:	2206      	movs	r2, #6
 800262a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262c:	187a      	adds	r2, r7, r1
 800262e:	23a0      	movs	r3, #160	@ 0xa0
 8002630:	05db      	lsls	r3, r3, #23
 8002632:	0011      	movs	r1, r2
 8002634:	0018      	movs	r0, r3
 8002636:	f000 fbdb 	bl	8002df0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800263a:	4b0a      	ldr	r3, [pc, #40]	@ (8002664 <HAL_I2C_MspInit+0xc0>)
 800263c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800263e:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <HAL_I2C_MspInit+0xc0>)
 8002640:	2180      	movs	r1, #128	@ 0x80
 8002642:	0389      	lsls	r1, r1, #14
 8002644:	430a      	orrs	r2, r1
 8002646:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002648:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <HAL_I2C_MspInit+0xc0>)
 800264a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800264c:	2380      	movs	r3, #128	@ 0x80
 800264e:	039b      	lsls	r3, r3, #14
 8002650:	4013      	ands	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002656:	46c0      	nop			@ (mov r8, r8)
 8002658:	46bd      	mov	sp, r7
 800265a:	b01d      	add	sp, #116	@ 0x74
 800265c:	bd90      	pop	{r4, r7, pc}
 800265e:	46c0      	nop			@ (mov r8, r8)
 8002660:	40005400 	.word	0x40005400
 8002664:	40021000 	.word	0x40021000

08002668 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b097      	sub	sp, #92	@ 0x5c
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002670:	240c      	movs	r4, #12
 8002672:	193b      	adds	r3, r7, r4
 8002674:	0018      	movs	r0, r3
 8002676:	234c      	movs	r3, #76	@ 0x4c
 8002678:	001a      	movs	r2, r3
 800267a:	2100      	movs	r1, #0
 800267c:	f005 fa7a 	bl	8007b74 <memset>
  if(hrtc->Instance==RTC)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a19      	ldr	r2, [pc, #100]	@ (80026ec <HAL_RTC_MspInit+0x84>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d12c      	bne.n	80026e4 <HAL_RTC_MspInit+0x7c>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800268a:	193b      	adds	r3, r7, r4
 800268c:	2280      	movs	r2, #128	@ 0x80
 800268e:	0292      	lsls	r2, r2, #10
 8002690:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002692:	193b      	adds	r3, r7, r4
 8002694:	2280      	movs	r2, #128	@ 0x80
 8002696:	0092      	lsls	r2, r2, #2
 8002698:	641a      	str	r2, [r3, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800269a:	193b      	adds	r3, r7, r4
 800269c:	0018      	movs	r0, r3
 800269e:	f002 f8e7 	bl	8004870 <HAL_RCCEx_PeriphCLKConfig>
 80026a2:	1e03      	subs	r3, r0, #0
 80026a4:	d001      	beq.n	80026aa <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80026a6:	f7ff ff4f 	bl	8002548 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026aa:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <HAL_RTC_MspInit+0x88>)
 80026ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026ae:	4b10      	ldr	r3, [pc, #64]	@ (80026f0 <HAL_RTC_MspInit+0x88>)
 80026b0:	2180      	movs	r1, #128	@ 0x80
 80026b2:	0209      	lsls	r1, r1, #8
 80026b4:	430a      	orrs	r2, r1
 80026b6:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80026b8:	4b0d      	ldr	r3, [pc, #52]	@ (80026f0 <HAL_RTC_MspInit+0x88>)
 80026ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026bc:	4b0c      	ldr	r3, [pc, #48]	@ (80026f0 <HAL_RTC_MspInit+0x88>)
 80026be:	2180      	movs	r1, #128	@ 0x80
 80026c0:	00c9      	lsls	r1, r1, #3
 80026c2:	430a      	orrs	r2, r1
 80026c4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026c6:	4b0a      	ldr	r3, [pc, #40]	@ (80026f0 <HAL_RTC_MspInit+0x88>)
 80026c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026ca:	2380      	movs	r3, #128	@ 0x80
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	4013      	ands	r3, r2
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80026d4:	2200      	movs	r2, #0
 80026d6:	2100      	movs	r1, #0
 80026d8:	2002      	movs	r0, #2
 80026da:	f000 fb57 	bl	8002d8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80026de:	2002      	movs	r0, #2
 80026e0:	f000 fb69 	bl	8002db6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80026e4:	46c0      	nop			@ (mov r8, r8)
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b017      	add	sp, #92	@ 0x5c
 80026ea:	bd90      	pop	{r4, r7, pc}
 80026ec:	40002800 	.word	0x40002800
 80026f0:	40021000 	.word	0x40021000

080026f4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026f4:	b590      	push	{r4, r7, lr}
 80026f6:	b08b      	sub	sp, #44	@ 0x2c
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fc:	2414      	movs	r4, #20
 80026fe:	193b      	adds	r3, r7, r4
 8002700:	0018      	movs	r0, r3
 8002702:	2314      	movs	r3, #20
 8002704:	001a      	movs	r2, r3
 8002706:	2100      	movs	r1, #0
 8002708:	f005 fa34 	bl	8007b74 <memset>
  if(hspi->Instance==SPI1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1b      	ldr	r2, [pc, #108]	@ (8002780 <HAL_SPI_MspInit+0x8c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d130      	bne.n	8002778 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002716:	4b1b      	ldr	r3, [pc, #108]	@ (8002784 <HAL_SPI_MspInit+0x90>)
 8002718:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800271a:	4b1a      	ldr	r3, [pc, #104]	@ (8002784 <HAL_SPI_MspInit+0x90>)
 800271c:	2180      	movs	r1, #128	@ 0x80
 800271e:	0149      	lsls	r1, r1, #5
 8002720:	430a      	orrs	r2, r1
 8002722:	641a      	str	r2, [r3, #64]	@ 0x40
 8002724:	4b17      	ldr	r3, [pc, #92]	@ (8002784 <HAL_SPI_MspInit+0x90>)
 8002726:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002728:	2380      	movs	r3, #128	@ 0x80
 800272a:	015b      	lsls	r3, r3, #5
 800272c:	4013      	ands	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002732:	4b14      	ldr	r3, [pc, #80]	@ (8002784 <HAL_SPI_MspInit+0x90>)
 8002734:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002736:	4b13      	ldr	r3, [pc, #76]	@ (8002784 <HAL_SPI_MspInit+0x90>)
 8002738:	2101      	movs	r1, #1
 800273a:	430a      	orrs	r2, r1
 800273c:	635a      	str	r2, [r3, #52]	@ 0x34
 800273e:	4b11      	ldr	r3, [pc, #68]	@ (8002784 <HAL_SPI_MspInit+0x90>)
 8002740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002742:	2201      	movs	r2, #1
 8002744:	4013      	ands	r3, r2
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800274a:	0021      	movs	r1, r4
 800274c:	187b      	adds	r3, r7, r1
 800274e:	2206      	movs	r2, #6
 8002750:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002752:	187b      	adds	r3, r7, r1
 8002754:	2202      	movs	r2, #2
 8002756:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	187b      	adds	r3, r7, r1
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275e:	187b      	adds	r3, r7, r1
 8002760:	2200      	movs	r2, #0
 8002762:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002764:	187b      	adds	r3, r7, r1
 8002766:	2200      	movs	r2, #0
 8002768:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276a:	187a      	adds	r2, r7, r1
 800276c:	23a0      	movs	r3, #160	@ 0xa0
 800276e:	05db      	lsls	r3, r3, #23
 8002770:	0011      	movs	r1, r2
 8002772:	0018      	movs	r0, r3
 8002774:	f000 fb3c 	bl	8002df0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002778:	46c0      	nop			@ (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b00b      	add	sp, #44	@ 0x2c
 800277e:	bd90      	pop	{r4, r7, pc}
 8002780:	40013000 	.word	0x40013000
 8002784:	40021000 	.word	0x40021000

08002788 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a0a      	ldr	r2, [pc, #40]	@ (80027c0 <HAL_TIM_Base_MspInit+0x38>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d10d      	bne.n	80027b6 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800279a:	4b0a      	ldr	r3, [pc, #40]	@ (80027c4 <HAL_TIM_Base_MspInit+0x3c>)
 800279c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800279e:	4b09      	ldr	r3, [pc, #36]	@ (80027c4 <HAL_TIM_Base_MspInit+0x3c>)
 80027a0:	2180      	movs	r1, #128	@ 0x80
 80027a2:	02c9      	lsls	r1, r1, #11
 80027a4:	430a      	orrs	r2, r1
 80027a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80027a8:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <HAL_TIM_Base_MspInit+0x3c>)
 80027aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027ac:	2380      	movs	r3, #128	@ 0x80
 80027ae:	02db      	lsls	r3, r3, #11
 80027b0:	4013      	ands	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 80027b6:	46c0      	nop			@ (mov r8, r8)
 80027b8:	46bd      	mov	sp, r7
 80027ba:	b004      	add	sp, #16
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	46c0      	nop			@ (mov r8, r8)
 80027c0:	40014800 	.word	0x40014800
 80027c4:	40021000 	.word	0x40021000

080027c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b089      	sub	sp, #36	@ 0x24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	240c      	movs	r4, #12
 80027d2:	193b      	adds	r3, r7, r4
 80027d4:	0018      	movs	r0, r3
 80027d6:	2314      	movs	r3, #20
 80027d8:	001a      	movs	r2, r3
 80027da:	2100      	movs	r1, #0
 80027dc:	f005 f9ca 	bl	8007b74 <memset>
  if(htim->Instance==TIM17)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a14      	ldr	r2, [pc, #80]	@ (8002838 <HAL_TIM_MspPostInit+0x70>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d122      	bne.n	8002830 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ea:	4b14      	ldr	r3, [pc, #80]	@ (800283c <HAL_TIM_MspPostInit+0x74>)
 80027ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027ee:	4b13      	ldr	r3, [pc, #76]	@ (800283c <HAL_TIM_MspPostInit+0x74>)
 80027f0:	2101      	movs	r1, #1
 80027f2:	430a      	orrs	r2, r1
 80027f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80027f6:	4b11      	ldr	r3, [pc, #68]	@ (800283c <HAL_TIM_MspPostInit+0x74>)
 80027f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027fa:	2201      	movs	r2, #1
 80027fc:	4013      	ands	r3, r2
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002802:	0021      	movs	r1, r4
 8002804:	187b      	adds	r3, r7, r1
 8002806:	2280      	movs	r2, #128	@ 0x80
 8002808:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280a:	187b      	adds	r3, r7, r1
 800280c:	2202      	movs	r2, #2
 800280e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	187b      	adds	r3, r7, r1
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002816:	187b      	adds	r3, r7, r1
 8002818:	2200      	movs	r2, #0
 800281a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 800281c:	187b      	adds	r3, r7, r1
 800281e:	2205      	movs	r2, #5
 8002820:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002822:	187a      	adds	r2, r7, r1
 8002824:	23a0      	movs	r3, #160	@ 0xa0
 8002826:	05db      	lsls	r3, r3, #23
 8002828:	0011      	movs	r1, r2
 800282a:	0018      	movs	r0, r3
 800282c:	f000 fae0 	bl	8002df0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002830:	46c0      	nop			@ (mov r8, r8)
 8002832:	46bd      	mov	sp, r7
 8002834:	b009      	add	sp, #36	@ 0x24
 8002836:	bd90      	pop	{r4, r7, pc}
 8002838:	40014800 	.word	0x40014800
 800283c:	40021000 	.word	0x40021000

08002840 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002840:	b590      	push	{r4, r7, lr}
 8002842:	b09f      	sub	sp, #124	@ 0x7c
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002848:	2364      	movs	r3, #100	@ 0x64
 800284a:	18fb      	adds	r3, r7, r3
 800284c:	0018      	movs	r0, r3
 800284e:	2314      	movs	r3, #20
 8002850:	001a      	movs	r2, r3
 8002852:	2100      	movs	r1, #0
 8002854:	f005 f98e 	bl	8007b74 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002858:	2418      	movs	r4, #24
 800285a:	193b      	adds	r3, r7, r4
 800285c:	0018      	movs	r0, r3
 800285e:	234c      	movs	r3, #76	@ 0x4c
 8002860:	001a      	movs	r2, r3
 8002862:	2100      	movs	r1, #0
 8002864:	f005 f986 	bl	8007b74 <memset>
  if(huart->Instance==USART1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a45      	ldr	r2, [pc, #276]	@ (8002984 <HAL_UART_MspInit+0x144>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d13e      	bne.n	80028f0 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002872:	193b      	adds	r3, r7, r4
 8002874:	2201      	movs	r2, #1
 8002876:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002878:	193b      	adds	r3, r7, r4
 800287a:	2200      	movs	r2, #0
 800287c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800287e:	193b      	adds	r3, r7, r4
 8002880:	0018      	movs	r0, r3
 8002882:	f001 fff5 	bl	8004870 <HAL_RCCEx_PeriphCLKConfig>
 8002886:	1e03      	subs	r3, r0, #0
 8002888:	d001      	beq.n	800288e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800288a:	f7ff fe5d 	bl	8002548 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800288e:	4b3e      	ldr	r3, [pc, #248]	@ (8002988 <HAL_UART_MspInit+0x148>)
 8002890:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002892:	4b3d      	ldr	r3, [pc, #244]	@ (8002988 <HAL_UART_MspInit+0x148>)
 8002894:	2180      	movs	r1, #128	@ 0x80
 8002896:	01c9      	lsls	r1, r1, #7
 8002898:	430a      	orrs	r2, r1
 800289a:	641a      	str	r2, [r3, #64]	@ 0x40
 800289c:	4b3a      	ldr	r3, [pc, #232]	@ (8002988 <HAL_UART_MspInit+0x148>)
 800289e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028a0:	2380      	movs	r3, #128	@ 0x80
 80028a2:	01db      	lsls	r3, r3, #7
 80028a4:	4013      	ands	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028aa:	4b37      	ldr	r3, [pc, #220]	@ (8002988 <HAL_UART_MspInit+0x148>)
 80028ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028ae:	4b36      	ldr	r3, [pc, #216]	@ (8002988 <HAL_UART_MspInit+0x148>)
 80028b0:	2104      	movs	r1, #4
 80028b2:	430a      	orrs	r2, r1
 80028b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80028b6:	4b34      	ldr	r3, [pc, #208]	@ (8002988 <HAL_UART_MspInit+0x148>)
 80028b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ba:	2204      	movs	r2, #4
 80028bc:	4013      	ands	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80028c2:	2164      	movs	r1, #100	@ 0x64
 80028c4:	187b      	adds	r3, r7, r1
 80028c6:	2230      	movs	r2, #48	@ 0x30
 80028c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	187b      	adds	r3, r7, r1
 80028cc:	2202      	movs	r2, #2
 80028ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	187b      	adds	r3, r7, r1
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d6:	187b      	adds	r3, r7, r1
 80028d8:	2200      	movs	r2, #0
 80028da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80028dc:	187b      	adds	r3, r7, r1
 80028de:	2201      	movs	r2, #1
 80028e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028e2:	187b      	adds	r3, r7, r1
 80028e4:	4a29      	ldr	r2, [pc, #164]	@ (800298c <HAL_UART_MspInit+0x14c>)
 80028e6:	0019      	movs	r1, r3
 80028e8:	0010      	movs	r0, r2
 80028ea:	f000 fa81 	bl	8002df0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80028ee:	e045      	b.n	800297c <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a26      	ldr	r2, [pc, #152]	@ (8002990 <HAL_UART_MspInit+0x150>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d140      	bne.n	800297c <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80028fa:	2118      	movs	r1, #24
 80028fc:	187b      	adds	r3, r7, r1
 80028fe:	2202      	movs	r2, #2
 8002900:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002902:	187b      	adds	r3, r7, r1
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002908:	187b      	adds	r3, r7, r1
 800290a:	0018      	movs	r0, r3
 800290c:	f001 ffb0 	bl	8004870 <HAL_RCCEx_PeriphCLKConfig>
 8002910:	1e03      	subs	r3, r0, #0
 8002912:	d001      	beq.n	8002918 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002914:	f7ff fe18 	bl	8002548 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002918:	4b1b      	ldr	r3, [pc, #108]	@ (8002988 <HAL_UART_MspInit+0x148>)
 800291a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800291c:	4b1a      	ldr	r3, [pc, #104]	@ (8002988 <HAL_UART_MspInit+0x148>)
 800291e:	2180      	movs	r1, #128	@ 0x80
 8002920:	0289      	lsls	r1, r1, #10
 8002922:	430a      	orrs	r2, r1
 8002924:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002926:	4b18      	ldr	r3, [pc, #96]	@ (8002988 <HAL_UART_MspInit+0x148>)
 8002928:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800292a:	2380      	movs	r3, #128	@ 0x80
 800292c:	029b      	lsls	r3, r3, #10
 800292e:	4013      	ands	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002934:	4b14      	ldr	r3, [pc, #80]	@ (8002988 <HAL_UART_MspInit+0x148>)
 8002936:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002938:	4b13      	ldr	r3, [pc, #76]	@ (8002988 <HAL_UART_MspInit+0x148>)
 800293a:	2101      	movs	r1, #1
 800293c:	430a      	orrs	r2, r1
 800293e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002940:	4b11      	ldr	r3, [pc, #68]	@ (8002988 <HAL_UART_MspInit+0x148>)
 8002942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002944:	2201      	movs	r2, #1
 8002946:	4013      	ands	r3, r2
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800294c:	2164      	movs	r1, #100	@ 0x64
 800294e:	187b      	adds	r3, r7, r1
 8002950:	22c0      	movs	r2, #192	@ 0xc0
 8002952:	0212      	lsls	r2, r2, #8
 8002954:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002956:	187b      	adds	r3, r7, r1
 8002958:	2202      	movs	r2, #2
 800295a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	187b      	adds	r3, r7, r1
 800295e:	2200      	movs	r2, #0
 8002960:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002962:	187b      	adds	r3, r7, r1
 8002964:	2200      	movs	r2, #0
 8002966:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002968:	187b      	adds	r3, r7, r1
 800296a:	2201      	movs	r2, #1
 800296c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296e:	187a      	adds	r2, r7, r1
 8002970:	23a0      	movs	r3, #160	@ 0xa0
 8002972:	05db      	lsls	r3, r3, #23
 8002974:	0011      	movs	r1, r2
 8002976:	0018      	movs	r0, r3
 8002978:	f000 fa3a 	bl	8002df0 <HAL_GPIO_Init>
}
 800297c:	46c0      	nop			@ (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	b01f      	add	sp, #124	@ 0x7c
 8002982:	bd90      	pop	{r4, r7, pc}
 8002984:	40013800 	.word	0x40013800
 8002988:	40021000 	.word	0x40021000
 800298c:	50000800 	.word	0x50000800
 8002990:	40004400 	.word	0x40004400

08002994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002998:	46c0      	nop			@ (mov r8, r8)
 800299a:	e7fd      	b.n	8002998 <NMI_Handler+0x4>

0800299c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029a0:	46c0      	nop			@ (mov r8, r8)
 80029a2:	e7fd      	b.n	80029a0 <HardFault_Handler+0x4>

080029a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80029a8:	46c0      	nop			@ (mov r8, r8)
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029b2:	46c0      	nop			@ (mov r8, r8)
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029bc:	f000 f8e4 	bl	8002b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029c0:	46c0      	nop			@ (mov r8, r8)
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80029cc:	4b05      	ldr	r3, [pc, #20]	@ (80029e4 <RTC_TAMP_IRQHandler+0x1c>)
 80029ce:	0018      	movs	r0, r3
 80029d0:	f002 fd6c 	bl	80054ac <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80029d4:	4b03      	ldr	r3, [pc, #12]	@ (80029e4 <RTC_TAMP_IRQHandler+0x1c>)
 80029d6:	0018      	movs	r0, r3
 80029d8:	f002 ff32 	bl	8005840 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80029dc:	46c0      	nop			@ (mov r8, r8)
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			@ (mov r8, r8)
 80029e4:	200006c8 	.word	0x200006c8

080029e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029f0:	4a14      	ldr	r2, [pc, #80]	@ (8002a44 <_sbrk+0x5c>)
 80029f2:	4b15      	ldr	r3, [pc, #84]	@ (8002a48 <_sbrk+0x60>)
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029fc:	4b13      	ldr	r3, [pc, #76]	@ (8002a4c <_sbrk+0x64>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d102      	bne.n	8002a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a04:	4b11      	ldr	r3, [pc, #68]	@ (8002a4c <_sbrk+0x64>)
 8002a06:	4a12      	ldr	r2, [pc, #72]	@ (8002a50 <_sbrk+0x68>)
 8002a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a0a:	4b10      	ldr	r3, [pc, #64]	@ (8002a4c <_sbrk+0x64>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	18d3      	adds	r3, r2, r3
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d207      	bcs.n	8002a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a18:	f005 f8b4 	bl	8007b84 <__errno>
 8002a1c:	0003      	movs	r3, r0
 8002a1e:	220c      	movs	r2, #12
 8002a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a22:	2301      	movs	r3, #1
 8002a24:	425b      	negs	r3, r3
 8002a26:	e009      	b.n	8002a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a28:	4b08      	ldr	r3, [pc, #32]	@ (8002a4c <_sbrk+0x64>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a2e:	4b07      	ldr	r3, [pc, #28]	@ (8002a4c <_sbrk+0x64>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	18d2      	adds	r2, r2, r3
 8002a36:	4b05      	ldr	r3, [pc, #20]	@ (8002a4c <_sbrk+0x64>)
 8002a38:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
}
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b006      	add	sp, #24
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20024000 	.word	0x20024000
 8002a48:	00000400 	.word	0x00000400
 8002a4c:	20000838 	.word	0x20000838
 8002a50:	20000988 	.word	0x20000988

08002a54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a58:	46c0      	nop			@ (mov r8, r8)
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <Reset_Handler>:
 8002a60:	480d      	ldr	r0, [pc, #52]	@ (8002a98 <LoopForever+0x2>)
 8002a62:	4685      	mov	sp, r0
 8002a64:	f7ff fff6 	bl	8002a54 <SystemInit>
 8002a68:	480c      	ldr	r0, [pc, #48]	@ (8002a9c <LoopForever+0x6>)
 8002a6a:	490d      	ldr	r1, [pc, #52]	@ (8002aa0 <LoopForever+0xa>)
 8002a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa4 <LoopForever+0xe>)
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e002      	b.n	8002a78 <LoopCopyDataInit>

08002a72 <CopyDataInit>:
 8002a72:	58d4      	ldr	r4, [r2, r3]
 8002a74:	50c4      	str	r4, [r0, r3]
 8002a76:	3304      	adds	r3, #4

08002a78 <LoopCopyDataInit>:
 8002a78:	18c4      	adds	r4, r0, r3
 8002a7a:	428c      	cmp	r4, r1
 8002a7c:	d3f9      	bcc.n	8002a72 <CopyDataInit>
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa8 <LoopForever+0x12>)
 8002a80:	4c0a      	ldr	r4, [pc, #40]	@ (8002aac <LoopForever+0x16>)
 8002a82:	2300      	movs	r3, #0
 8002a84:	e001      	b.n	8002a8a <LoopFillZerobss>

08002a86 <FillZerobss>:
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	3204      	adds	r2, #4

08002a8a <LoopFillZerobss>:
 8002a8a:	42a2      	cmp	r2, r4
 8002a8c:	d3fb      	bcc.n	8002a86 <FillZerobss>
 8002a8e:	f005 f87f 	bl	8007b90 <__libc_init_array>
 8002a92:	f7ff f89b 	bl	8001bcc <main>

08002a96 <LoopForever>:
 8002a96:	e7fe      	b.n	8002a96 <LoopForever>
 8002a98:	20024000 	.word	0x20024000
 8002a9c:	20000000 	.word	0x20000000
 8002aa0:	2000054c 	.word	0x2000054c
 8002aa4:	08008bc0 	.word	0x08008bc0
 8002aa8:	20000550 	.word	0x20000550
 8002aac:	20000988 	.word	0x20000988

08002ab0 <ADC1_COMP_IRQHandler>:
 8002ab0:	e7fe      	b.n	8002ab0 <ADC1_COMP_IRQHandler>
	...

08002ab4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002aba:	1dfb      	adds	r3, r7, #7
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8002af0 <HAL_Init+0x3c>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8002af0 <HAL_Init+0x3c>)
 8002ac6:	2180      	movs	r1, #128	@ 0x80
 8002ac8:	0049      	lsls	r1, r1, #1
 8002aca:	430a      	orrs	r2, r1
 8002acc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ace:	2003      	movs	r0, #3
 8002ad0:	f000 f810 	bl	8002af4 <HAL_InitTick>
 8002ad4:	1e03      	subs	r3, r0, #0
 8002ad6:	d003      	beq.n	8002ae0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002ad8:	1dfb      	adds	r3, r7, #7
 8002ada:	2201      	movs	r2, #1
 8002adc:	701a      	strb	r2, [r3, #0]
 8002ade:	e001      	b.n	8002ae4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002ae0:	f7ff fd38 	bl	8002554 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ae4:	1dfb      	adds	r3, r7, #7
 8002ae6:	781b      	ldrb	r3, [r3, #0]
}
 8002ae8:	0018      	movs	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	b002      	add	sp, #8
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40022000 	.word	0x40022000

08002af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af4:	b590      	push	{r4, r7, lr}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002afc:	230f      	movs	r3, #15
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	2200      	movs	r2, #0
 8002b02:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002b04:	4b1d      	ldr	r3, [pc, #116]	@ (8002b7c <HAL_InitTick+0x88>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d02b      	beq.n	8002b64 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8002b80 <HAL_InitTick+0x8c>)
 8002b0e:	681c      	ldr	r4, [r3, #0]
 8002b10:	4b1a      	ldr	r3, [pc, #104]	@ (8002b7c <HAL_InitTick+0x88>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	0019      	movs	r1, r3
 8002b16:	23fa      	movs	r3, #250	@ 0xfa
 8002b18:	0098      	lsls	r0, r3, #2
 8002b1a:	f7fd fafd 	bl	8000118 <__udivsi3>
 8002b1e:	0003      	movs	r3, r0
 8002b20:	0019      	movs	r1, r3
 8002b22:	0020      	movs	r0, r4
 8002b24:	f7fd faf8 	bl	8000118 <__udivsi3>
 8002b28:	0003      	movs	r3, r0
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f000 f953 	bl	8002dd6 <HAL_SYSTICK_Config>
 8002b30:	1e03      	subs	r3, r0, #0
 8002b32:	d112      	bne.n	8002b5a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d80a      	bhi.n	8002b50 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	425b      	negs	r3, r3
 8002b40:	2200      	movs	r2, #0
 8002b42:	0018      	movs	r0, r3
 8002b44:	f000 f922 	bl	8002d8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b48:	4b0e      	ldr	r3, [pc, #56]	@ (8002b84 <HAL_InitTick+0x90>)
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	e00d      	b.n	8002b6c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002b50:	230f      	movs	r3, #15
 8002b52:	18fb      	adds	r3, r7, r3
 8002b54:	2201      	movs	r2, #1
 8002b56:	701a      	strb	r2, [r3, #0]
 8002b58:	e008      	b.n	8002b6c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b5a:	230f      	movs	r3, #15
 8002b5c:	18fb      	adds	r3, r7, r3
 8002b5e:	2201      	movs	r2, #1
 8002b60:	701a      	strb	r2, [r3, #0]
 8002b62:	e003      	b.n	8002b6c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b64:	230f      	movs	r3, #15
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	2201      	movs	r2, #1
 8002b6a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002b6c:	230f      	movs	r3, #15
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	781b      	ldrb	r3, [r3, #0]
}
 8002b72:	0018      	movs	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b005      	add	sp, #20
 8002b78:	bd90      	pop	{r4, r7, pc}
 8002b7a:	46c0      	nop			@ (mov r8, r8)
 8002b7c:	200004f8 	.word	0x200004f8
 8002b80:	200004f0 	.word	0x200004f0
 8002b84:	200004f4 	.word	0x200004f4

08002b88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b8c:	4b05      	ldr	r3, [pc, #20]	@ (8002ba4 <HAL_IncTick+0x1c>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	001a      	movs	r2, r3
 8002b92:	4b05      	ldr	r3, [pc, #20]	@ (8002ba8 <HAL_IncTick+0x20>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	18d2      	adds	r2, r2, r3
 8002b98:	4b03      	ldr	r3, [pc, #12]	@ (8002ba8 <HAL_IncTick+0x20>)
 8002b9a:	601a      	str	r2, [r3, #0]
}
 8002b9c:	46c0      	nop			@ (mov r8, r8)
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	46c0      	nop			@ (mov r8, r8)
 8002ba4:	200004f8 	.word	0x200004f8
 8002ba8:	2000083c 	.word	0x2000083c

08002bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  return uwTick;
 8002bb0:	4b02      	ldr	r3, [pc, #8]	@ (8002bbc <HAL_GetTick+0x10>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	46c0      	nop			@ (mov r8, r8)
 8002bbc:	2000083c 	.word	0x2000083c

08002bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bc8:	f7ff fff0 	bl	8002bac <HAL_GetTick>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	d005      	beq.n	8002be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bda:	4b0a      	ldr	r3, [pc, #40]	@ (8002c04 <HAL_Delay+0x44>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	001a      	movs	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	189b      	adds	r3, r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002be6:	46c0      	nop			@ (mov r8, r8)
 8002be8:	f7ff ffe0 	bl	8002bac <HAL_GetTick>
 8002bec:	0002      	movs	r2, r0
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d8f7      	bhi.n	8002be8 <HAL_Delay+0x28>
  {
  }
}
 8002bf8:	46c0      	nop			@ (mov r8, r8)
 8002bfa:	46c0      	nop			@ (mov r8, r8)
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	b004      	add	sp, #16
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	46c0      	nop			@ (mov r8, r8)
 8002c04:	200004f8 	.word	0x200004f8

08002c08 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002c10:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a06      	ldr	r2, [pc, #24]	@ (8002c30 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	0019      	movs	r1, r3
 8002c1a:	4b04      	ldr	r3, [pc, #16]	@ (8002c2c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	601a      	str	r2, [r3, #0]
}
 8002c22:	46c0      	nop			@ (mov r8, r8)
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b002      	add	sp, #8
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	46c0      	nop			@ (mov r8, r8)
 8002c2c:	40010000 	.word	0x40010000
 8002c30:	fffff9ff 	.word	0xfffff9ff

08002c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	0002      	movs	r2, r0
 8002c3c:	1dfb      	adds	r3, r7, #7
 8002c3e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c40:	1dfb      	adds	r3, r7, #7
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c46:	d809      	bhi.n	8002c5c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c48:	1dfb      	adds	r3, r7, #7
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	001a      	movs	r2, r3
 8002c4e:	231f      	movs	r3, #31
 8002c50:	401a      	ands	r2, r3
 8002c52:	4b04      	ldr	r3, [pc, #16]	@ (8002c64 <__NVIC_EnableIRQ+0x30>)
 8002c54:	2101      	movs	r1, #1
 8002c56:	4091      	lsls	r1, r2
 8002c58:	000a      	movs	r2, r1
 8002c5a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002c5c:	46c0      	nop			@ (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b002      	add	sp, #8
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	e000e100 	.word	0xe000e100

08002c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	0002      	movs	r2, r0
 8002c70:	6039      	str	r1, [r7, #0]
 8002c72:	1dfb      	adds	r3, r7, #7
 8002c74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c76:	1dfb      	adds	r3, r7, #7
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c7c:	d828      	bhi.n	8002cd0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c7e:	4a2f      	ldr	r2, [pc, #188]	@ (8002d3c <__NVIC_SetPriority+0xd4>)
 8002c80:	1dfb      	adds	r3, r7, #7
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	b25b      	sxtb	r3, r3
 8002c86:	089b      	lsrs	r3, r3, #2
 8002c88:	33c0      	adds	r3, #192	@ 0xc0
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	589b      	ldr	r3, [r3, r2]
 8002c8e:	1dfa      	adds	r2, r7, #7
 8002c90:	7812      	ldrb	r2, [r2, #0]
 8002c92:	0011      	movs	r1, r2
 8002c94:	2203      	movs	r2, #3
 8002c96:	400a      	ands	r2, r1
 8002c98:	00d2      	lsls	r2, r2, #3
 8002c9a:	21ff      	movs	r1, #255	@ 0xff
 8002c9c:	4091      	lsls	r1, r2
 8002c9e:	000a      	movs	r2, r1
 8002ca0:	43d2      	mvns	r2, r2
 8002ca2:	401a      	ands	r2, r3
 8002ca4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	019b      	lsls	r3, r3, #6
 8002caa:	22ff      	movs	r2, #255	@ 0xff
 8002cac:	401a      	ands	r2, r3
 8002cae:	1dfb      	adds	r3, r7, #7
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	4003      	ands	r3, r0
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cbc:	481f      	ldr	r0, [pc, #124]	@ (8002d3c <__NVIC_SetPriority+0xd4>)
 8002cbe:	1dfb      	adds	r3, r7, #7
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	b25b      	sxtb	r3, r3
 8002cc4:	089b      	lsrs	r3, r3, #2
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	33c0      	adds	r3, #192	@ 0xc0
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002cce:	e031      	b.n	8002d34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cd0:	4a1b      	ldr	r2, [pc, #108]	@ (8002d40 <__NVIC_SetPriority+0xd8>)
 8002cd2:	1dfb      	adds	r3, r7, #7
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	230f      	movs	r3, #15
 8002cda:	400b      	ands	r3, r1
 8002cdc:	3b08      	subs	r3, #8
 8002cde:	089b      	lsrs	r3, r3, #2
 8002ce0:	3306      	adds	r3, #6
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	18d3      	adds	r3, r2, r3
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	1dfa      	adds	r2, r7, #7
 8002cec:	7812      	ldrb	r2, [r2, #0]
 8002cee:	0011      	movs	r1, r2
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	400a      	ands	r2, r1
 8002cf4:	00d2      	lsls	r2, r2, #3
 8002cf6:	21ff      	movs	r1, #255	@ 0xff
 8002cf8:	4091      	lsls	r1, r2
 8002cfa:	000a      	movs	r2, r1
 8002cfc:	43d2      	mvns	r2, r2
 8002cfe:	401a      	ands	r2, r3
 8002d00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	019b      	lsls	r3, r3, #6
 8002d06:	22ff      	movs	r2, #255	@ 0xff
 8002d08:	401a      	ands	r2, r3
 8002d0a:	1dfb      	adds	r3, r7, #7
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	0018      	movs	r0, r3
 8002d10:	2303      	movs	r3, #3
 8002d12:	4003      	ands	r3, r0
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d18:	4809      	ldr	r0, [pc, #36]	@ (8002d40 <__NVIC_SetPriority+0xd8>)
 8002d1a:	1dfb      	adds	r3, r7, #7
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	001c      	movs	r4, r3
 8002d20:	230f      	movs	r3, #15
 8002d22:	4023      	ands	r3, r4
 8002d24:	3b08      	subs	r3, #8
 8002d26:	089b      	lsrs	r3, r3, #2
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	3306      	adds	r3, #6
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	18c3      	adds	r3, r0, r3
 8002d30:	3304      	adds	r3, #4
 8002d32:	601a      	str	r2, [r3, #0]
}
 8002d34:	46c0      	nop			@ (mov r8, r8)
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b003      	add	sp, #12
 8002d3a:	bd90      	pop	{r4, r7, pc}
 8002d3c:	e000e100 	.word	0xe000e100
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	1e5a      	subs	r2, r3, #1
 8002d50:	2380      	movs	r3, #128	@ 0x80
 8002d52:	045b      	lsls	r3, r3, #17
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d301      	bcc.n	8002d5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e010      	b.n	8002d7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d88 <SysTick_Config+0x44>)
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	3a01      	subs	r2, #1
 8002d62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d64:	2301      	movs	r3, #1
 8002d66:	425b      	negs	r3, r3
 8002d68:	2103      	movs	r1, #3
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f7ff ff7c 	bl	8002c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d70:	4b05      	ldr	r3, [pc, #20]	@ (8002d88 <SysTick_Config+0x44>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d76:	4b04      	ldr	r3, [pc, #16]	@ (8002d88 <SysTick_Config+0x44>)
 8002d78:	2207      	movs	r2, #7
 8002d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	0018      	movs	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b002      	add	sp, #8
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	46c0      	nop			@ (mov r8, r8)
 8002d88:	e000e010 	.word	0xe000e010

08002d8c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	210f      	movs	r1, #15
 8002d98:	187b      	adds	r3, r7, r1
 8002d9a:	1c02      	adds	r2, r0, #0
 8002d9c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	187b      	adds	r3, r7, r1
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	b25b      	sxtb	r3, r3
 8002da6:	0011      	movs	r1, r2
 8002da8:	0018      	movs	r0, r3
 8002daa:	f7ff ff5d 	bl	8002c68 <__NVIC_SetPriority>
}
 8002dae:	46c0      	nop			@ (mov r8, r8)
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b004      	add	sp, #16
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	0002      	movs	r2, r0
 8002dbe:	1dfb      	adds	r3, r7, #7
 8002dc0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dc2:	1dfb      	adds	r3, r7, #7
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	b25b      	sxtb	r3, r3
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f7ff ff33 	bl	8002c34 <__NVIC_EnableIRQ>
}
 8002dce:	46c0      	nop			@ (mov r8, r8)
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b002      	add	sp, #8
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	0018      	movs	r0, r3
 8002de2:	f7ff ffaf 	bl	8002d44 <SysTick_Config>
 8002de6:	0003      	movs	r3, r0
}
 8002de8:	0018      	movs	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b002      	add	sp, #8
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dfe:	e14d      	b.n	800309c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2101      	movs	r1, #1
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4091      	lsls	r1, r2
 8002e0a:	000a      	movs	r2, r1
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d100      	bne.n	8002e18 <HAL_GPIO_Init+0x28>
 8002e16:	e13e      	b.n	8003096 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	4013      	ands	r3, r2
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d005      	beq.n	8002e30 <HAL_GPIO_Init+0x40>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2203      	movs	r2, #3
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d130      	bne.n	8002e92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	409a      	lsls	r2, r3
 8002e3e:	0013      	movs	r3, r2
 8002e40:	43da      	mvns	r2, r3
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4013      	ands	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	409a      	lsls	r2, r3
 8002e52:	0013      	movs	r3, r2
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e66:	2201      	movs	r2, #1
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	409a      	lsls	r2, r3
 8002e6c:	0013      	movs	r3, r2
 8002e6e:	43da      	mvns	r2, r3
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4013      	ands	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	091b      	lsrs	r3, r3, #4
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	401a      	ands	r2, r3
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	409a      	lsls	r2, r3
 8002e84:	0013      	movs	r3, r2
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2203      	movs	r2, #3
 8002e98:	4013      	ands	r3, r2
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d017      	beq.n	8002ece <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	2203      	movs	r2, #3
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	0013      	movs	r3, r2
 8002eae:	43da      	mvns	r2, r3
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	409a      	lsls	r2, r3
 8002ec0:	0013      	movs	r3, r2
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d123      	bne.n	8002f22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	08da      	lsrs	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3208      	adds	r2, #8
 8002ee2:	0092      	lsls	r2, r2, #2
 8002ee4:	58d3      	ldr	r3, [r2, r3]
 8002ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2207      	movs	r2, #7
 8002eec:	4013      	ands	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	220f      	movs	r2, #15
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	0013      	movs	r3, r2
 8002ef6:	43da      	mvns	r2, r3
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4013      	ands	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2107      	movs	r1, #7
 8002f06:	400b      	ands	r3, r1
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	409a      	lsls	r2, r3
 8002f0c:	0013      	movs	r3, r2
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	08da      	lsrs	r2, r3, #3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3208      	adds	r2, #8
 8002f1c:	0092      	lsls	r2, r2, #2
 8002f1e:	6939      	ldr	r1, [r7, #16]
 8002f20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	2203      	movs	r2, #3
 8002f2e:	409a      	lsls	r2, r3
 8002f30:	0013      	movs	r3, r2
 8002f32:	43da      	mvns	r2, r3
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4013      	ands	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2203      	movs	r2, #3
 8002f40:	401a      	ands	r2, r3
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	409a      	lsls	r2, r3
 8002f48:	0013      	movs	r3, r2
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	23c0      	movs	r3, #192	@ 0xc0
 8002f5c:	029b      	lsls	r3, r3, #10
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d100      	bne.n	8002f64 <HAL_GPIO_Init+0x174>
 8002f62:	e098      	b.n	8003096 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002f64:	4a53      	ldr	r2, [pc, #332]	@ (80030b4 <HAL_GPIO_Init+0x2c4>)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	089b      	lsrs	r3, r3, #2
 8002f6a:	3318      	adds	r3, #24
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	589b      	ldr	r3, [r3, r2]
 8002f70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2203      	movs	r2, #3
 8002f76:	4013      	ands	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	220f      	movs	r2, #15
 8002f7c:	409a      	lsls	r2, r3
 8002f7e:	0013      	movs	r3, r2
 8002f80:	43da      	mvns	r2, r3
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	4013      	ands	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	23a0      	movs	r3, #160	@ 0xa0
 8002f8c:	05db      	lsls	r3, r3, #23
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d019      	beq.n	8002fc6 <HAL_GPIO_Init+0x1d6>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a48      	ldr	r2, [pc, #288]	@ (80030b8 <HAL_GPIO_Init+0x2c8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d013      	beq.n	8002fc2 <HAL_GPIO_Init+0x1d2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a47      	ldr	r2, [pc, #284]	@ (80030bc <HAL_GPIO_Init+0x2cc>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00d      	beq.n	8002fbe <HAL_GPIO_Init+0x1ce>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a46      	ldr	r2, [pc, #280]	@ (80030c0 <HAL_GPIO_Init+0x2d0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d007      	beq.n	8002fba <HAL_GPIO_Init+0x1ca>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a45      	ldr	r2, [pc, #276]	@ (80030c4 <HAL_GPIO_Init+0x2d4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d101      	bne.n	8002fb6 <HAL_GPIO_Init+0x1c6>
 8002fb2:	2304      	movs	r3, #4
 8002fb4:	e008      	b.n	8002fc8 <HAL_GPIO_Init+0x1d8>
 8002fb6:	2305      	movs	r3, #5
 8002fb8:	e006      	b.n	8002fc8 <HAL_GPIO_Init+0x1d8>
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e004      	b.n	8002fc8 <HAL_GPIO_Init+0x1d8>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e002      	b.n	8002fc8 <HAL_GPIO_Init+0x1d8>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <HAL_GPIO_Init+0x1d8>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	2103      	movs	r1, #3
 8002fcc:	400a      	ands	r2, r1
 8002fce:	00d2      	lsls	r2, r2, #3
 8002fd0:	4093      	lsls	r3, r2
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002fd8:	4936      	ldr	r1, [pc, #216]	@ (80030b4 <HAL_GPIO_Init+0x2c4>)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	089b      	lsrs	r3, r3, #2
 8002fde:	3318      	adds	r3, #24
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fe6:	4b33      	ldr	r3, [pc, #204]	@ (80030b4 <HAL_GPIO_Init+0x2c4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	2380      	movs	r3, #128	@ 0x80
 8002ffc:	035b      	lsls	r3, r3, #13
 8002ffe:	4013      	ands	r3, r2
 8003000:	d003      	beq.n	800300a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800300a:	4b2a      	ldr	r3, [pc, #168]	@ (80030b4 <HAL_GPIO_Init+0x2c4>)
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003010:	4b28      	ldr	r3, [pc, #160]	@ (80030b4 <HAL_GPIO_Init+0x2c4>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	43da      	mvns	r2, r3
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	4013      	ands	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	2380      	movs	r3, #128	@ 0x80
 8003026:	039b      	lsls	r3, r3, #14
 8003028:	4013      	ands	r3, r2
 800302a:	d003      	beq.n	8003034 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4313      	orrs	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003034:	4b1f      	ldr	r3, [pc, #124]	@ (80030b4 <HAL_GPIO_Init+0x2c4>)
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800303a:	4a1e      	ldr	r2, [pc, #120]	@ (80030b4 <HAL_GPIO_Init+0x2c4>)
 800303c:	2384      	movs	r3, #132	@ 0x84
 800303e:	58d3      	ldr	r3, [r2, r3]
 8003040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	43da      	mvns	r2, r3
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4013      	ands	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	2380      	movs	r3, #128	@ 0x80
 8003052:	029b      	lsls	r3, r3, #10
 8003054:	4013      	ands	r3, r2
 8003056:	d003      	beq.n	8003060 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003060:	4914      	ldr	r1, [pc, #80]	@ (80030b4 <HAL_GPIO_Init+0x2c4>)
 8003062:	2284      	movs	r2, #132	@ 0x84
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003068:	4a12      	ldr	r2, [pc, #72]	@ (80030b4 <HAL_GPIO_Init+0x2c4>)
 800306a:	2380      	movs	r3, #128	@ 0x80
 800306c:	58d3      	ldr	r3, [r2, r3]
 800306e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	43da      	mvns	r2, r3
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4013      	ands	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	2380      	movs	r3, #128	@ 0x80
 8003080:	025b      	lsls	r3, r3, #9
 8003082:	4013      	ands	r3, r2
 8003084:	d003      	beq.n	800308e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800308e:	4909      	ldr	r1, [pc, #36]	@ (80030b4 <HAL_GPIO_Init+0x2c4>)
 8003090:	2280      	movs	r2, #128	@ 0x80
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	3301      	adds	r3, #1
 800309a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	40da      	lsrs	r2, r3
 80030a4:	1e13      	subs	r3, r2, #0
 80030a6:	d000      	beq.n	80030aa <HAL_GPIO_Init+0x2ba>
 80030a8:	e6aa      	b.n	8002e00 <HAL_GPIO_Init+0x10>
  }
}
 80030aa:	46c0      	nop			@ (mov r8, r8)
 80030ac:	46c0      	nop			@ (mov r8, r8)
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b006      	add	sp, #24
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40021800 	.word	0x40021800
 80030b8:	50000400 	.word	0x50000400
 80030bc:	50000800 	.word	0x50000800
 80030c0:	50000c00 	.word	0x50000c00
 80030c4:	50001000 	.word	0x50001000

080030c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	000a      	movs	r2, r1
 80030d2:	1cbb      	adds	r3, r7, #2
 80030d4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	1cba      	adds	r2, r7, #2
 80030dc:	8812      	ldrh	r2, [r2, #0]
 80030de:	4013      	ands	r3, r2
 80030e0:	d004      	beq.n	80030ec <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80030e2:	230f      	movs	r3, #15
 80030e4:	18fb      	adds	r3, r7, r3
 80030e6:	2201      	movs	r2, #1
 80030e8:	701a      	strb	r2, [r3, #0]
 80030ea:	e003      	b.n	80030f4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030ec:	230f      	movs	r3, #15
 80030ee:	18fb      	adds	r3, r7, r3
 80030f0:	2200      	movs	r2, #0
 80030f2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80030f4:	230f      	movs	r3, #15
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	781b      	ldrb	r3, [r3, #0]
}
 80030fa:	0018      	movs	r0, r3
 80030fc:	46bd      	mov	sp, r7
 80030fe:	b004      	add	sp, #16
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	0008      	movs	r0, r1
 800310c:	0011      	movs	r1, r2
 800310e:	1cbb      	adds	r3, r7, #2
 8003110:	1c02      	adds	r2, r0, #0
 8003112:	801a      	strh	r2, [r3, #0]
 8003114:	1c7b      	adds	r3, r7, #1
 8003116:	1c0a      	adds	r2, r1, #0
 8003118:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800311a:	1c7b      	adds	r3, r7, #1
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d004      	beq.n	800312c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003122:	1cbb      	adds	r3, r7, #2
 8003124:	881a      	ldrh	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800312a:	e003      	b.n	8003134 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800312c:	1cbb      	adds	r3, r7, #2
 800312e:	881a      	ldrh	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003134:	46c0      	nop			@ (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	b002      	add	sp, #8
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e08f      	b.n	800326e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2241      	movs	r2, #65	@ 0x41
 8003152:	5c9b      	ldrb	r3, [r3, r2]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d107      	bne.n	800316a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2240      	movs	r2, #64	@ 0x40
 800315e:	2100      	movs	r1, #0
 8003160:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	0018      	movs	r0, r3
 8003166:	f7ff fa1d 	bl	80025a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2241      	movs	r2, #65	@ 0x41
 800316e:	2124      	movs	r1, #36	@ 0x24
 8003170:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2101      	movs	r1, #1
 800317e:	438a      	bics	r2, r1
 8003180:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	493b      	ldr	r1, [pc, #236]	@ (8003278 <HAL_I2C_Init+0x13c>)
 800318c:	400a      	ands	r2, r1
 800318e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4938      	ldr	r1, [pc, #224]	@ (800327c <HAL_I2C_Init+0x140>)
 800319c:	400a      	ands	r2, r1
 800319e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d108      	bne.n	80031ba <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2180      	movs	r1, #128	@ 0x80
 80031b2:	0209      	lsls	r1, r1, #8
 80031b4:	430a      	orrs	r2, r1
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	e007      	b.n	80031ca <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2184      	movs	r1, #132	@ 0x84
 80031c4:	0209      	lsls	r1, r1, #8
 80031c6:	430a      	orrs	r2, r1
 80031c8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d109      	bne.n	80031e6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2180      	movs	r1, #128	@ 0x80
 80031de:	0109      	lsls	r1, r1, #4
 80031e0:	430a      	orrs	r2, r1
 80031e2:	605a      	str	r2, [r3, #4]
 80031e4:	e007      	b.n	80031f6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4923      	ldr	r1, [pc, #140]	@ (8003280 <HAL_I2C_Init+0x144>)
 80031f2:	400a      	ands	r2, r1
 80031f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4920      	ldr	r1, [pc, #128]	@ (8003284 <HAL_I2C_Init+0x148>)
 8003202:	430a      	orrs	r2, r1
 8003204:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	491a      	ldr	r1, [pc, #104]	@ (800327c <HAL_I2C_Init+0x140>)
 8003212:	400a      	ands	r2, r1
 8003214:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	431a      	orrs	r2, r3
 8003220:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69d9      	ldr	r1, [r3, #28]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1a      	ldr	r2, [r3, #32]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2101      	movs	r1, #1
 800324c:	430a      	orrs	r2, r1
 800324e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2241      	movs	r2, #65	@ 0x41
 800325a:	2120      	movs	r1, #32
 800325c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2242      	movs	r2, #66	@ 0x42
 8003268:	2100      	movs	r1, #0
 800326a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	0018      	movs	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	b002      	add	sp, #8
 8003274:	bd80      	pop	{r7, pc}
 8003276:	46c0      	nop			@ (mov r8, r8)
 8003278:	f0ffffff 	.word	0xf0ffffff
 800327c:	ffff7fff 	.word	0xffff7fff
 8003280:	fffff7ff 	.word	0xfffff7ff
 8003284:	02008000 	.word	0x02008000

08003288 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b089      	sub	sp, #36	@ 0x24
 800328c:	af02      	add	r7, sp, #8
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	0008      	movs	r0, r1
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	0019      	movs	r1, r3
 8003296:	230a      	movs	r3, #10
 8003298:	18fb      	adds	r3, r7, r3
 800329a:	1c02      	adds	r2, r0, #0
 800329c:	801a      	strh	r2, [r3, #0]
 800329e:	2308      	movs	r3, #8
 80032a0:	18fb      	adds	r3, r7, r3
 80032a2:	1c0a      	adds	r2, r1, #0
 80032a4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2241      	movs	r2, #65	@ 0x41
 80032aa:	5c9b      	ldrb	r3, [r3, r2]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b20      	cmp	r3, #32
 80032b0:	d000      	beq.n	80032b4 <HAL_I2C_Master_Transmit+0x2c>
 80032b2:	e10a      	b.n	80034ca <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2240      	movs	r2, #64	@ 0x40
 80032b8:	5c9b      	ldrb	r3, [r3, r2]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_I2C_Master_Transmit+0x3a>
 80032be:	2302      	movs	r3, #2
 80032c0:	e104      	b.n	80034cc <HAL_I2C_Master_Transmit+0x244>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2240      	movs	r2, #64	@ 0x40
 80032c6:	2101      	movs	r1, #1
 80032c8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032ca:	f7ff fc6f 	bl	8002bac <HAL_GetTick>
 80032ce:	0003      	movs	r3, r0
 80032d0:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032d2:	2380      	movs	r3, #128	@ 0x80
 80032d4:	0219      	lsls	r1, r3, #8
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	2319      	movs	r3, #25
 80032de:	2201      	movs	r2, #1
 80032e0:	f000 fa26 	bl	8003730 <I2C_WaitOnFlagUntilTimeout>
 80032e4:	1e03      	subs	r3, r0, #0
 80032e6:	d001      	beq.n	80032ec <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0ef      	b.n	80034cc <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2241      	movs	r2, #65	@ 0x41
 80032f0:	2121      	movs	r1, #33	@ 0x21
 80032f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2242      	movs	r2, #66	@ 0x42
 80032f8:	2110      	movs	r1, #16
 80032fa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2208      	movs	r2, #8
 800330c:	18ba      	adds	r2, r7, r2
 800330e:	8812      	ldrh	r2, [r2, #0]
 8003310:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	2bff      	cmp	r3, #255	@ 0xff
 8003320:	d906      	bls.n	8003330 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	22ff      	movs	r2, #255	@ 0xff
 8003326:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003328:	2380      	movs	r3, #128	@ 0x80
 800332a:	045b      	lsls	r3, r3, #17
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	e007      	b.n	8003340 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800333a:	2380      	movs	r3, #128	@ 0x80
 800333c:	049b      	lsls	r3, r3, #18
 800333e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003344:	2b00      	cmp	r3, #0
 8003346:	d027      	beq.n	8003398 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334c:	781a      	ldrb	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337c:	b2db      	uxtb	r3, r3
 800337e:	3301      	adds	r3, #1
 8003380:	b2da      	uxtb	r2, r3
 8003382:	697c      	ldr	r4, [r7, #20]
 8003384:	230a      	movs	r3, #10
 8003386:	18fb      	adds	r3, r7, r3
 8003388:	8819      	ldrh	r1, [r3, #0]
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	4b51      	ldr	r3, [pc, #324]	@ (80034d4 <HAL_I2C_Master_Transmit+0x24c>)
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	0023      	movs	r3, r4
 8003392:	f000 fc45 	bl	8003c20 <I2C_TransferConfig>
 8003396:	e06f      	b.n	8003478 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339c:	b2da      	uxtb	r2, r3
 800339e:	697c      	ldr	r4, [r7, #20]
 80033a0:	230a      	movs	r3, #10
 80033a2:	18fb      	adds	r3, r7, r3
 80033a4:	8819      	ldrh	r1, [r3, #0]
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	4b4a      	ldr	r3, [pc, #296]	@ (80034d4 <HAL_I2C_Master_Transmit+0x24c>)
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	0023      	movs	r3, r4
 80033ae:	f000 fc37 	bl	8003c20 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80033b2:	e061      	b.n	8003478 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	0018      	movs	r0, r3
 80033bc:	f000 fa10 	bl	80037e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80033c0:	1e03      	subs	r3, r0, #0
 80033c2:	d001      	beq.n	80033c8 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e081      	b.n	80034cc <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033cc:	781a      	ldrb	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d03a      	beq.n	8003478 <HAL_I2C_Master_Transmit+0x1f0>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003406:	2b00      	cmp	r3, #0
 8003408:	d136      	bne.n	8003478 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800340a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	0013      	movs	r3, r2
 8003414:	2200      	movs	r2, #0
 8003416:	2180      	movs	r1, #128	@ 0x80
 8003418:	f000 f98a 	bl	8003730 <I2C_WaitOnFlagUntilTimeout>
 800341c:	1e03      	subs	r3, r0, #0
 800341e:	d001      	beq.n	8003424 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e053      	b.n	80034cc <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	2bff      	cmp	r3, #255	@ 0xff
 800342c:	d911      	bls.n	8003452 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	22ff      	movs	r2, #255	@ 0xff
 8003432:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003438:	b2da      	uxtb	r2, r3
 800343a:	2380      	movs	r3, #128	@ 0x80
 800343c:	045c      	lsls	r4, r3, #17
 800343e:	230a      	movs	r3, #10
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	8819      	ldrh	r1, [r3, #0]
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	2300      	movs	r3, #0
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	0023      	movs	r3, r4
 800344c:	f000 fbe8 	bl	8003c20 <I2C_TransferConfig>
 8003450:	e012      	b.n	8003478 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003460:	b2da      	uxtb	r2, r3
 8003462:	2380      	movs	r3, #128	@ 0x80
 8003464:	049c      	lsls	r4, r3, #18
 8003466:	230a      	movs	r3, #10
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	8819      	ldrh	r1, [r3, #0]
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	2300      	movs	r3, #0
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	0023      	movs	r3, r4
 8003474:	f000 fbd4 	bl	8003c20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d198      	bne.n	80033b4 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	0018      	movs	r0, r3
 800348a:	f000 f9ef 	bl	800386c <I2C_WaitOnSTOPFlagUntilTimeout>
 800348e:	1e03      	subs	r3, r0, #0
 8003490:	d001      	beq.n	8003496 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e01a      	b.n	80034cc <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2220      	movs	r2, #32
 800349c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	490b      	ldr	r1, [pc, #44]	@ (80034d8 <HAL_I2C_Master_Transmit+0x250>)
 80034aa:	400a      	ands	r2, r1
 80034ac:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2241      	movs	r2, #65	@ 0x41
 80034b2:	2120      	movs	r1, #32
 80034b4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2242      	movs	r2, #66	@ 0x42
 80034ba:	2100      	movs	r1, #0
 80034bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2240      	movs	r2, #64	@ 0x40
 80034c2:	2100      	movs	r1, #0
 80034c4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e000      	b.n	80034cc <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80034ca:	2302      	movs	r3, #2
  }
}
 80034cc:	0018      	movs	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b007      	add	sp, #28
 80034d2:	bd90      	pop	{r4, r7, pc}
 80034d4:	80002000 	.word	0x80002000
 80034d8:	fe00e800 	.word	0xfe00e800

080034dc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80034dc:	b590      	push	{r4, r7, lr}
 80034de:	b089      	sub	sp, #36	@ 0x24
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	0008      	movs	r0, r1
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	0019      	movs	r1, r3
 80034ea:	230a      	movs	r3, #10
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	1c02      	adds	r2, r0, #0
 80034f0:	801a      	strh	r2, [r3, #0]
 80034f2:	2308      	movs	r3, #8
 80034f4:	18fb      	adds	r3, r7, r3
 80034f6:	1c0a      	adds	r2, r1, #0
 80034f8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2241      	movs	r2, #65	@ 0x41
 80034fe:	5c9b      	ldrb	r3, [r3, r2]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b20      	cmp	r3, #32
 8003504:	d000      	beq.n	8003508 <HAL_I2C_Master_Receive+0x2c>
 8003506:	e0e8      	b.n	80036da <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2240      	movs	r2, #64	@ 0x40
 800350c:	5c9b      	ldrb	r3, [r3, r2]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_I2C_Master_Receive+0x3a>
 8003512:	2302      	movs	r3, #2
 8003514:	e0e2      	b.n	80036dc <HAL_I2C_Master_Receive+0x200>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2240      	movs	r2, #64	@ 0x40
 800351a:	2101      	movs	r1, #1
 800351c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800351e:	f7ff fb45 	bl	8002bac <HAL_GetTick>
 8003522:	0003      	movs	r3, r0
 8003524:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003526:	2380      	movs	r3, #128	@ 0x80
 8003528:	0219      	lsls	r1, r3, #8
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	2319      	movs	r3, #25
 8003532:	2201      	movs	r2, #1
 8003534:	f000 f8fc 	bl	8003730 <I2C_WaitOnFlagUntilTimeout>
 8003538:	1e03      	subs	r3, r0, #0
 800353a:	d001      	beq.n	8003540 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e0cd      	b.n	80036dc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2241      	movs	r2, #65	@ 0x41
 8003544:	2122      	movs	r1, #34	@ 0x22
 8003546:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2242      	movs	r2, #66	@ 0x42
 800354c:	2110      	movs	r1, #16
 800354e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2208      	movs	r2, #8
 8003560:	18ba      	adds	r2, r7, r2
 8003562:	8812      	ldrh	r2, [r2, #0]
 8003564:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003570:	b29b      	uxth	r3, r3
 8003572:	2bff      	cmp	r3, #255	@ 0xff
 8003574:	d911      	bls.n	800359a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	22ff      	movs	r2, #255	@ 0xff
 800357a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003580:	b2da      	uxtb	r2, r3
 8003582:	2380      	movs	r3, #128	@ 0x80
 8003584:	045c      	lsls	r4, r3, #17
 8003586:	230a      	movs	r3, #10
 8003588:	18fb      	adds	r3, r7, r3
 800358a:	8819      	ldrh	r1, [r3, #0]
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	4b55      	ldr	r3, [pc, #340]	@ (80036e4 <HAL_I2C_Master_Receive+0x208>)
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	0023      	movs	r3, r4
 8003594:	f000 fb44 	bl	8003c20 <I2C_TransferConfig>
 8003598:	e076      	b.n	8003688 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a8:	b2da      	uxtb	r2, r3
 80035aa:	2380      	movs	r3, #128	@ 0x80
 80035ac:	049c      	lsls	r4, r3, #18
 80035ae:	230a      	movs	r3, #10
 80035b0:	18fb      	adds	r3, r7, r3
 80035b2:	8819      	ldrh	r1, [r3, #0]
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	4b4b      	ldr	r3, [pc, #300]	@ (80036e4 <HAL_I2C_Master_Receive+0x208>)
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	0023      	movs	r3, r4
 80035bc:	f000 fb30 	bl	8003c20 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80035c0:	e062      	b.n	8003688 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	0018      	movs	r0, r3
 80035ca:	f000 f993 	bl	80038f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035ce:	1e03      	subs	r3, r0, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e082      	b.n	80036dc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d03a      	beq.n	8003688 <HAL_I2C_Master_Receive+0x1ac>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003616:	2b00      	cmp	r3, #0
 8003618:	d136      	bne.n	8003688 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800361a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	0013      	movs	r3, r2
 8003624:	2200      	movs	r2, #0
 8003626:	2180      	movs	r1, #128	@ 0x80
 8003628:	f000 f882 	bl	8003730 <I2C_WaitOnFlagUntilTimeout>
 800362c:	1e03      	subs	r3, r0, #0
 800362e:	d001      	beq.n	8003634 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e053      	b.n	80036dc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003638:	b29b      	uxth	r3, r3
 800363a:	2bff      	cmp	r3, #255	@ 0xff
 800363c:	d911      	bls.n	8003662 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	22ff      	movs	r2, #255	@ 0xff
 8003642:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003648:	b2da      	uxtb	r2, r3
 800364a:	2380      	movs	r3, #128	@ 0x80
 800364c:	045c      	lsls	r4, r3, #17
 800364e:	230a      	movs	r3, #10
 8003650:	18fb      	adds	r3, r7, r3
 8003652:	8819      	ldrh	r1, [r3, #0]
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	2300      	movs	r3, #0
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	0023      	movs	r3, r4
 800365c:	f000 fae0 	bl	8003c20 <I2C_TransferConfig>
 8003660:	e012      	b.n	8003688 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003666:	b29a      	uxth	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003670:	b2da      	uxtb	r2, r3
 8003672:	2380      	movs	r3, #128	@ 0x80
 8003674:	049c      	lsls	r4, r3, #18
 8003676:	230a      	movs	r3, #10
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	8819      	ldrh	r1, [r3, #0]
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	2300      	movs	r3, #0
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	0023      	movs	r3, r4
 8003684:	f000 facc 	bl	8003c20 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d197      	bne.n	80035c2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	0018      	movs	r0, r3
 800369a:	f000 f8e7 	bl	800386c <I2C_WaitOnSTOPFlagUntilTimeout>
 800369e:	1e03      	subs	r3, r0, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e01a      	b.n	80036dc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2220      	movs	r2, #32
 80036ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	490b      	ldr	r1, [pc, #44]	@ (80036e8 <HAL_I2C_Master_Receive+0x20c>)
 80036ba:	400a      	ands	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2241      	movs	r2, #65	@ 0x41
 80036c2:	2120      	movs	r1, #32
 80036c4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2242      	movs	r2, #66	@ 0x42
 80036ca:	2100      	movs	r1, #0
 80036cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2240      	movs	r2, #64	@ 0x40
 80036d2:	2100      	movs	r1, #0
 80036d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	e000      	b.n	80036dc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80036da:	2302      	movs	r3, #2
  }
}
 80036dc:	0018      	movs	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	b007      	add	sp, #28
 80036e2:	bd90      	pop	{r4, r7, pc}
 80036e4:	80002400 	.word	0x80002400
 80036e8:	fe00e800 	.word	0xfe00e800

080036ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	2202      	movs	r2, #2
 80036fc:	4013      	ands	r3, r2
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d103      	bne.n	800370a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2200      	movs	r2, #0
 8003708:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	2201      	movs	r2, #1
 8003712:	4013      	ands	r3, r2
 8003714:	2b01      	cmp	r3, #1
 8003716:	d007      	beq.n	8003728 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699a      	ldr	r2, [r3, #24]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2101      	movs	r1, #1
 8003724:	430a      	orrs	r2, r1
 8003726:	619a      	str	r2, [r3, #24]
  }
}
 8003728:	46c0      	nop			@ (mov r8, r8)
 800372a:	46bd      	mov	sp, r7
 800372c:	b002      	add	sp, #8
 800372e:	bd80      	pop	{r7, pc}

08003730 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	1dfb      	adds	r3, r7, #7
 800373e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003740:	e03a      	b.n	80037b8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	6839      	ldr	r1, [r7, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	0018      	movs	r0, r3
 800374a:	f000 f971 	bl	8003a30 <I2C_IsErrorOccurred>
 800374e:	1e03      	subs	r3, r0, #0
 8003750:	d001      	beq.n	8003756 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e040      	b.n	80037d8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	3301      	adds	r3, #1
 800375a:	d02d      	beq.n	80037b8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375c:	f7ff fa26 	bl	8002bac <HAL_GetTick>
 8003760:	0002      	movs	r2, r0
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d302      	bcc.n	8003772 <I2C_WaitOnFlagUntilTimeout+0x42>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d122      	bne.n	80037b8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	4013      	ands	r3, r2
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	425a      	negs	r2, r3
 8003782:	4153      	adcs	r3, r2
 8003784:	b2db      	uxtb	r3, r3
 8003786:	001a      	movs	r2, r3
 8003788:	1dfb      	adds	r3, r7, #7
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d113      	bne.n	80037b8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003794:	2220      	movs	r2, #32
 8003796:	431a      	orrs	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2241      	movs	r2, #65	@ 0x41
 80037a0:	2120      	movs	r1, #32
 80037a2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2242      	movs	r2, #66	@ 0x42
 80037a8:	2100      	movs	r1, #0
 80037aa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2240      	movs	r2, #64	@ 0x40
 80037b0:	2100      	movs	r1, #0
 80037b2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e00f      	b.n	80037d8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	4013      	ands	r3, r2
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	425a      	negs	r2, r3
 80037c8:	4153      	adcs	r3, r2
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	001a      	movs	r2, r3
 80037ce:	1dfb      	adds	r3, r7, #7
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d0b5      	beq.n	8003742 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	0018      	movs	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	b004      	add	sp, #16
 80037de:	bd80      	pop	{r7, pc}

080037e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037ec:	e032      	b.n	8003854 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	68b9      	ldr	r1, [r7, #8]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	0018      	movs	r0, r3
 80037f6:	f000 f91b 	bl	8003a30 <I2C_IsErrorOccurred>
 80037fa:	1e03      	subs	r3, r0, #0
 80037fc:	d001      	beq.n	8003802 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e030      	b.n	8003864 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	3301      	adds	r3, #1
 8003806:	d025      	beq.n	8003854 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003808:	f7ff f9d0 	bl	8002bac <HAL_GetTick>
 800380c:	0002      	movs	r2, r0
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	429a      	cmp	r2, r3
 8003816:	d302      	bcc.n	800381e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d11a      	bne.n	8003854 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	2202      	movs	r2, #2
 8003826:	4013      	ands	r3, r2
 8003828:	2b02      	cmp	r3, #2
 800382a:	d013      	beq.n	8003854 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003830:	2220      	movs	r2, #32
 8003832:	431a      	orrs	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2241      	movs	r2, #65	@ 0x41
 800383c:	2120      	movs	r1, #32
 800383e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2242      	movs	r2, #66	@ 0x42
 8003844:	2100      	movs	r1, #0
 8003846:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2240      	movs	r2, #64	@ 0x40
 800384c:	2100      	movs	r1, #0
 800384e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e007      	b.n	8003864 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	2202      	movs	r2, #2
 800385c:	4013      	ands	r3, r2
 800385e:	2b02      	cmp	r3, #2
 8003860:	d1c5      	bne.n	80037ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	0018      	movs	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	b004      	add	sp, #16
 800386a:	bd80      	pop	{r7, pc}

0800386c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003878:	e02f      	b.n	80038da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	68b9      	ldr	r1, [r7, #8]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	0018      	movs	r0, r3
 8003882:	f000 f8d5 	bl	8003a30 <I2C_IsErrorOccurred>
 8003886:	1e03      	subs	r3, r0, #0
 8003888:	d001      	beq.n	800388e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e02d      	b.n	80038ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388e:	f7ff f98d 	bl	8002bac <HAL_GetTick>
 8003892:	0002      	movs	r2, r0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	429a      	cmp	r2, r3
 800389c:	d302      	bcc.n	80038a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d11a      	bne.n	80038da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	2220      	movs	r2, #32
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	d013      	beq.n	80038da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b6:	2220      	movs	r2, #32
 80038b8:	431a      	orrs	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2241      	movs	r2, #65	@ 0x41
 80038c2:	2120      	movs	r1, #32
 80038c4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2242      	movs	r2, #66	@ 0x42
 80038ca:	2100      	movs	r1, #0
 80038cc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2240      	movs	r2, #64	@ 0x40
 80038d2:	2100      	movs	r1, #0
 80038d4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e007      	b.n	80038ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	2220      	movs	r2, #32
 80038e2:	4013      	ands	r3, r2
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	d1c8      	bne.n	800387a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	0018      	movs	r0, r3
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b004      	add	sp, #16
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003900:	2317      	movs	r3, #23
 8003902:	18fb      	adds	r3, r7, r3
 8003904:	2200      	movs	r2, #0
 8003906:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003908:	e07b      	b.n	8003a02 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	0018      	movs	r0, r3
 8003912:	f000 f88d 	bl	8003a30 <I2C_IsErrorOccurred>
 8003916:	1e03      	subs	r3, r0, #0
 8003918:	d003      	beq.n	8003922 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800391a:	2317      	movs	r3, #23
 800391c:	18fb      	adds	r3, r7, r3
 800391e:	2201      	movs	r2, #1
 8003920:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	2220      	movs	r2, #32
 800392a:	4013      	ands	r3, r2
 800392c:	2b20      	cmp	r3, #32
 800392e:	d140      	bne.n	80039b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8003930:	2117      	movs	r1, #23
 8003932:	187b      	adds	r3, r7, r1
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d13b      	bne.n	80039b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2204      	movs	r2, #4
 8003942:	4013      	ands	r3, r2
 8003944:	2b04      	cmp	r3, #4
 8003946:	d106      	bne.n	8003956 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800394c:	2b00      	cmp	r3, #0
 800394e:	d002      	beq.n	8003956 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003950:	187b      	adds	r3, r7, r1
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	2210      	movs	r2, #16
 800395e:	4013      	ands	r3, r2
 8003960:	2b10      	cmp	r3, #16
 8003962:	d123      	bne.n	80039ac <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2210      	movs	r2, #16
 800396a:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2204      	movs	r2, #4
 8003970:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2220      	movs	r2, #32
 8003978:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4929      	ldr	r1, [pc, #164]	@ (8003a2c <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8003986:	400a      	ands	r2, r1
 8003988:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2241      	movs	r2, #65	@ 0x41
 800398e:	2120      	movs	r1, #32
 8003990:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2242      	movs	r2, #66	@ 0x42
 8003996:	2100      	movs	r1, #0
 8003998:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2240      	movs	r2, #64	@ 0x40
 800399e:	2100      	movs	r1, #0
 80039a0:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80039a2:	2317      	movs	r3, #23
 80039a4:	18fb      	adds	r3, r7, r3
 80039a6:	2201      	movs	r2, #1
 80039a8:	701a      	strb	r2, [r3, #0]
 80039aa:	e002      	b.n	80039b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80039b2:	f7ff f8fb 	bl	8002bac <HAL_GetTick>
 80039b6:	0002      	movs	r2, r0
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d302      	bcc.n	80039c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d11c      	bne.n	8003a02 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80039c8:	2017      	movs	r0, #23
 80039ca:	183b      	adds	r3, r7, r0
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d117      	bne.n	8003a02 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	2204      	movs	r2, #4
 80039da:	4013      	ands	r3, r2
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d010      	beq.n	8003a02 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e4:	2220      	movs	r2, #32
 80039e6:	431a      	orrs	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2241      	movs	r2, #65	@ 0x41
 80039f0:	2120      	movs	r1, #32
 80039f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2240      	movs	r2, #64	@ 0x40
 80039f8:	2100      	movs	r1, #0
 80039fa:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80039fc:	183b      	adds	r3, r7, r0
 80039fe:	2201      	movs	r2, #1
 8003a00:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	2204      	movs	r2, #4
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d005      	beq.n	8003a1c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003a10:	2317      	movs	r3, #23
 8003a12:	18fb      	adds	r3, r7, r3
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d100      	bne.n	8003a1c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003a1a:	e776      	b.n	800390a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8003a1c:	2317      	movs	r3, #23
 8003a1e:	18fb      	adds	r3, r7, r3
 8003a20:	781b      	ldrb	r3, [r3, #0]
}
 8003a22:	0018      	movs	r0, r3
 8003a24:	46bd      	mov	sp, r7
 8003a26:	b006      	add	sp, #24
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	46c0      	nop			@ (mov r8, r8)
 8003a2c:	fe00e800 	.word	0xfe00e800

08003a30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08a      	sub	sp, #40	@ 0x28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3c:	2327      	movs	r3, #39	@ 0x27
 8003a3e:	18fb      	adds	r3, r7, r3
 8003a40:	2200      	movs	r2, #0
 8003a42:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	2210      	movs	r2, #16
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d100      	bne.n	8003a5e <I2C_IsErrorOccurred+0x2e>
 8003a5c:	e079      	b.n	8003b52 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2210      	movs	r2, #16
 8003a64:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a66:	e057      	b.n	8003b18 <I2C_IsErrorOccurred+0xe8>
 8003a68:	2227      	movs	r2, #39	@ 0x27
 8003a6a:	18bb      	adds	r3, r7, r2
 8003a6c:	18ba      	adds	r2, r7, r2
 8003a6e:	7812      	ldrb	r2, [r2, #0]
 8003a70:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	3301      	adds	r3, #1
 8003a76:	d04f      	beq.n	8003b18 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a78:	f7ff f898 	bl	8002bac <HAL_GetTick>
 8003a7c:	0002      	movs	r2, r0
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d302      	bcc.n	8003a8e <I2C_IsErrorOccurred+0x5e>
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d144      	bne.n	8003b18 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	2380      	movs	r3, #128	@ 0x80
 8003a96:	01db      	lsls	r3, r3, #7
 8003a98:	4013      	ands	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a9c:	2013      	movs	r0, #19
 8003a9e:	183b      	adds	r3, r7, r0
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	2142      	movs	r1, #66	@ 0x42
 8003aa4:	5c52      	ldrb	r2, [r2, r1]
 8003aa6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699a      	ldr	r2, [r3, #24]
 8003aae:	2380      	movs	r3, #128	@ 0x80
 8003ab0:	021b      	lsls	r3, r3, #8
 8003ab2:	401a      	ands	r2, r3
 8003ab4:	2380      	movs	r3, #128	@ 0x80
 8003ab6:	021b      	lsls	r3, r3, #8
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d126      	bne.n	8003b0a <I2C_IsErrorOccurred+0xda>
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	2380      	movs	r3, #128	@ 0x80
 8003ac0:	01db      	lsls	r3, r3, #7
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d021      	beq.n	8003b0a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003ac6:	183b      	adds	r3, r7, r0
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	d01d      	beq.n	8003b0a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2180      	movs	r1, #128	@ 0x80
 8003ada:	01c9      	lsls	r1, r1, #7
 8003adc:	430a      	orrs	r2, r1
 8003ade:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ae0:	f7ff f864 	bl	8002bac <HAL_GetTick>
 8003ae4:	0003      	movs	r3, r0
 8003ae6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ae8:	e00f      	b.n	8003b0a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003aea:	f7ff f85f 	bl	8002bac <HAL_GetTick>
 8003aee:	0002      	movs	r2, r0
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b19      	cmp	r3, #25
 8003af6:	d908      	bls.n	8003b0a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	2220      	movs	r2, #32
 8003afc:	4313      	orrs	r3, r2
 8003afe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003b00:	2327      	movs	r3, #39	@ 0x27
 8003b02:	18fb      	adds	r3, r7, r3
 8003b04:	2201      	movs	r2, #1
 8003b06:	701a      	strb	r2, [r3, #0]

              break;
 8003b08:	e006      	b.n	8003b18 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	2220      	movs	r2, #32
 8003b12:	4013      	ands	r3, r2
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	d1e8      	bne.n	8003aea <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	4013      	ands	r3, r2
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	d004      	beq.n	8003b30 <I2C_IsErrorOccurred+0x100>
 8003b26:	2327      	movs	r3, #39	@ 0x27
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d09b      	beq.n	8003a68 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003b30:	2327      	movs	r3, #39	@ 0x27
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d103      	bne.n	8003b42 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	2204      	movs	r2, #4
 8003b46:	4313      	orrs	r3, r2
 8003b48:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b4a:	2327      	movs	r3, #39	@ 0x27
 8003b4c:	18fb      	adds	r3, r7, r3
 8003b4e:	2201      	movs	r2, #1
 8003b50:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	2380      	movs	r3, #128	@ 0x80
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	4013      	ands	r3, r2
 8003b62:	d00c      	beq.n	8003b7e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	2201      	movs	r2, #1
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2280      	movs	r2, #128	@ 0x80
 8003b72:	0052      	lsls	r2, r2, #1
 8003b74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b76:	2327      	movs	r3, #39	@ 0x27
 8003b78:	18fb      	adds	r3, r7, r3
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	2380      	movs	r3, #128	@ 0x80
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	4013      	ands	r3, r2
 8003b86:	d00c      	beq.n	8003ba2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	2208      	movs	r2, #8
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2280      	movs	r2, #128	@ 0x80
 8003b96:	00d2      	lsls	r2, r2, #3
 8003b98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b9a:	2327      	movs	r3, #39	@ 0x27
 8003b9c:	18fb      	adds	r3, r7, r3
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	2380      	movs	r3, #128	@ 0x80
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d00c      	beq.n	8003bc6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2280      	movs	r2, #128	@ 0x80
 8003bba:	0092      	lsls	r2, r2, #2
 8003bbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003bbe:	2327      	movs	r3, #39	@ 0x27
 8003bc0:	18fb      	adds	r3, r7, r3
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003bc6:	2327      	movs	r3, #39	@ 0x27
 8003bc8:	18fb      	adds	r3, r7, r3
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d01d      	beq.n	8003c0c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f7ff fd8a 	bl	80036ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	490e      	ldr	r1, [pc, #56]	@ (8003c1c <I2C_IsErrorOccurred+0x1ec>)
 8003be4:	400a      	ands	r2, r1
 8003be6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bec:	6a3b      	ldr	r3, [r7, #32]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2241      	movs	r2, #65	@ 0x41
 8003bf8:	2120      	movs	r1, #32
 8003bfa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2242      	movs	r2, #66	@ 0x42
 8003c00:	2100      	movs	r1, #0
 8003c02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2240      	movs	r2, #64	@ 0x40
 8003c08:	2100      	movs	r1, #0
 8003c0a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003c0c:	2327      	movs	r3, #39	@ 0x27
 8003c0e:	18fb      	adds	r3, r7, r3
 8003c10:	781b      	ldrb	r3, [r3, #0]
}
 8003c12:	0018      	movs	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	b00a      	add	sp, #40	@ 0x28
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	46c0      	nop			@ (mov r8, r8)
 8003c1c:	fe00e800 	.word	0xfe00e800

08003c20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003c20:	b590      	push	{r4, r7, lr}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	0008      	movs	r0, r1
 8003c2a:	0011      	movs	r1, r2
 8003c2c:	607b      	str	r3, [r7, #4]
 8003c2e:	240a      	movs	r4, #10
 8003c30:	193b      	adds	r3, r7, r4
 8003c32:	1c02      	adds	r2, r0, #0
 8003c34:	801a      	strh	r2, [r3, #0]
 8003c36:	2009      	movs	r0, #9
 8003c38:	183b      	adds	r3, r7, r0
 8003c3a:	1c0a      	adds	r2, r1, #0
 8003c3c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c3e:	193b      	adds	r3, r7, r4
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	059b      	lsls	r3, r3, #22
 8003c44:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c46:	183b      	adds	r3, r7, r0
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	0419      	lsls	r1, r3, #16
 8003c4c:	23ff      	movs	r3, #255	@ 0xff
 8003c4e:	041b      	lsls	r3, r3, #16
 8003c50:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c52:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	085b      	lsrs	r3, r3, #1
 8003c60:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c6a:	0d51      	lsrs	r1, r2, #21
 8003c6c:	2280      	movs	r2, #128	@ 0x80
 8003c6e:	00d2      	lsls	r2, r2, #3
 8003c70:	400a      	ands	r2, r1
 8003c72:	4907      	ldr	r1, [pc, #28]	@ (8003c90 <I2C_TransferConfig+0x70>)
 8003c74:	430a      	orrs	r2, r1
 8003c76:	43d2      	mvns	r2, r2
 8003c78:	401a      	ands	r2, r3
 8003c7a:	0011      	movs	r1, r2
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c86:	46c0      	nop			@ (mov r8, r8)
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b007      	add	sp, #28
 8003c8c:	bd90      	pop	{r4, r7, pc}
 8003c8e:	46c0      	nop			@ (mov r8, r8)
 8003c90:	03ff63ff 	.word	0x03ff63ff

08003c94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2241      	movs	r2, #65	@ 0x41
 8003ca2:	5c9b      	ldrb	r3, [r3, r2]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b20      	cmp	r3, #32
 8003ca8:	d138      	bne.n	8003d1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2240      	movs	r2, #64	@ 0x40
 8003cae:	5c9b      	ldrb	r3, [r3, r2]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e032      	b.n	8003d1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2240      	movs	r2, #64	@ 0x40
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2241      	movs	r2, #65	@ 0x41
 8003cc4:	2124      	movs	r1, #36	@ 0x24
 8003cc6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	438a      	bics	r2, r1
 8003cd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4911      	ldr	r1, [pc, #68]	@ (8003d28 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003ce4:	400a      	ands	r2, r1
 8003ce6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6819      	ldr	r1, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2101      	movs	r1, #1
 8003d04:	430a      	orrs	r2, r1
 8003d06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2241      	movs	r2, #65	@ 0x41
 8003d0c:	2120      	movs	r1, #32
 8003d0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2240      	movs	r2, #64	@ 0x40
 8003d14:	2100      	movs	r1, #0
 8003d16:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e000      	b.n	8003d1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d1c:	2302      	movs	r3, #2
  }
}
 8003d1e:	0018      	movs	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b002      	add	sp, #8
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	46c0      	nop			@ (mov r8, r8)
 8003d28:	ffffefff 	.word	0xffffefff

08003d2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2241      	movs	r2, #65	@ 0x41
 8003d3a:	5c9b      	ldrb	r3, [r3, r2]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d139      	bne.n	8003db6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2240      	movs	r2, #64	@ 0x40
 8003d46:	5c9b      	ldrb	r3, [r3, r2]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e033      	b.n	8003db8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2240      	movs	r2, #64	@ 0x40
 8003d54:	2101      	movs	r1, #1
 8003d56:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2241      	movs	r2, #65	@ 0x41
 8003d5c:	2124      	movs	r1, #36	@ 0x24
 8003d5e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	438a      	bics	r2, r1
 8003d6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4a11      	ldr	r2, [pc, #68]	@ (8003dc0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	021b      	lsls	r3, r3, #8
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2241      	movs	r2, #65	@ 0x41
 8003da6:	2120      	movs	r1, #32
 8003da8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2240      	movs	r2, #64	@ 0x40
 8003dae:	2100      	movs	r1, #0
 8003db0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	e000      	b.n	8003db8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003db6:	2302      	movs	r3, #2
  }
}
 8003db8:	0018      	movs	r0, r3
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	b004      	add	sp, #16
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	fffff0ff 	.word	0xfffff0ff

08003dc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003dcc:	4b19      	ldr	r3, [pc, #100]	@ (8003e34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a19      	ldr	r2, [pc, #100]	@ (8003e38 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	0019      	movs	r1, r3
 8003dd6:	4b17      	ldr	r3, [pc, #92]	@ (8003e34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	2380      	movs	r3, #128	@ 0x80
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d11f      	bne.n	8003e28 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003de8:	4b14      	ldr	r3, [pc, #80]	@ (8003e3c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	0013      	movs	r3, r2
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	189b      	adds	r3, r3, r2
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	4912      	ldr	r1, [pc, #72]	@ (8003e40 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003df6:	0018      	movs	r0, r3
 8003df8:	f7fc f98e 	bl	8000118 <__udivsi3>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	3301      	adds	r3, #1
 8003e00:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e02:	e008      	b.n	8003e16 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	e001      	b.n	8003e16 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e009      	b.n	8003e2a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e16:	4b07      	ldr	r3, [pc, #28]	@ (8003e34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	2380      	movs	r3, #128	@ 0x80
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	401a      	ands	r2, r3
 8003e20:	2380      	movs	r3, #128	@ 0x80
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d0ed      	beq.n	8003e04 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b004      	add	sp, #16
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	46c0      	nop			@ (mov r8, r8)
 8003e34:	40007000 	.word	0x40007000
 8003e38:	fffff9ff 	.word	0xfffff9ff
 8003e3c:	200004f0 	.word	0x200004f0
 8003e40:	000f4240 	.word	0x000f4240

08003e44 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003e48:	4b03      	ldr	r3, [pc, #12]	@ (8003e58 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	23e0      	movs	r3, #224	@ 0xe0
 8003e4e:	01db      	lsls	r3, r3, #7
 8003e50:	4013      	ands	r3, r2
}
 8003e52:	0018      	movs	r0, r3
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40021000 	.word	0x40021000

08003e5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d102      	bne.n	8003e70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f000 fb50 	bl	8004510 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2201      	movs	r2, #1
 8003e76:	4013      	ands	r3, r2
 8003e78:	d100      	bne.n	8003e7c <HAL_RCC_OscConfig+0x20>
 8003e7a:	e07c      	b.n	8003f76 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e7c:	4bc3      	ldr	r3, [pc, #780]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2238      	movs	r2, #56	@ 0x38
 8003e82:	4013      	ands	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e86:	4bc1      	ldr	r3, [pc, #772]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2b10      	cmp	r3, #16
 8003e94:	d102      	bne.n	8003e9c <HAL_RCC_OscConfig+0x40>
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d002      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d10b      	bne.n	8003eba <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea2:	4bba      	ldr	r3, [pc, #744]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	2380      	movs	r3, #128	@ 0x80
 8003ea8:	029b      	lsls	r3, r3, #10
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d062      	beq.n	8003f74 <HAL_RCC_OscConfig+0x118>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d15e      	bne.n	8003f74 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e32a      	b.n	8004510 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	2380      	movs	r3, #128	@ 0x80
 8003ec0:	025b      	lsls	r3, r3, #9
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d107      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x7a>
 8003ec6:	4bb1      	ldr	r3, [pc, #708]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	4bb0      	ldr	r3, [pc, #704]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8003ecc:	2180      	movs	r1, #128	@ 0x80
 8003ece:	0249      	lsls	r1, r1, #9
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	e020      	b.n	8003f18 <HAL_RCC_OscConfig+0xbc>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	23a0      	movs	r3, #160	@ 0xa0
 8003edc:	02db      	lsls	r3, r3, #11
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d10e      	bne.n	8003f00 <HAL_RCC_OscConfig+0xa4>
 8003ee2:	4baa      	ldr	r3, [pc, #680]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	4ba9      	ldr	r3, [pc, #676]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8003ee8:	2180      	movs	r1, #128	@ 0x80
 8003eea:	02c9      	lsls	r1, r1, #11
 8003eec:	430a      	orrs	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]
 8003ef0:	4ba6      	ldr	r3, [pc, #664]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4ba5      	ldr	r3, [pc, #660]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8003ef6:	2180      	movs	r1, #128	@ 0x80
 8003ef8:	0249      	lsls	r1, r1, #9
 8003efa:	430a      	orrs	r2, r1
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	e00b      	b.n	8003f18 <HAL_RCC_OscConfig+0xbc>
 8003f00:	4ba2      	ldr	r3, [pc, #648]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	4ba1      	ldr	r3, [pc, #644]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8003f06:	49a2      	ldr	r1, [pc, #648]	@ (8004190 <HAL_RCC_OscConfig+0x334>)
 8003f08:	400a      	ands	r2, r1
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	4b9f      	ldr	r3, [pc, #636]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	4b9e      	ldr	r3, [pc, #632]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8003f12:	49a0      	ldr	r1, [pc, #640]	@ (8004194 <HAL_RCC_OscConfig+0x338>)
 8003f14:	400a      	ands	r2, r1
 8003f16:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d014      	beq.n	8003f4a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f20:	f7fe fe44 	bl	8002bac <HAL_GetTick>
 8003f24:	0003      	movs	r3, r0
 8003f26:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f28:	e008      	b.n	8003f3c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f2a:	f7fe fe3f 	bl	8002bac <HAL_GetTick>
 8003f2e:	0002      	movs	r2, r0
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b64      	cmp	r3, #100	@ 0x64
 8003f36:	d901      	bls.n	8003f3c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e2e9      	b.n	8004510 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f3c:	4b93      	ldr	r3, [pc, #588]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	2380      	movs	r3, #128	@ 0x80
 8003f42:	029b      	lsls	r3, r3, #10
 8003f44:	4013      	ands	r3, r2
 8003f46:	d0f0      	beq.n	8003f2a <HAL_RCC_OscConfig+0xce>
 8003f48:	e015      	b.n	8003f76 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4a:	f7fe fe2f 	bl	8002bac <HAL_GetTick>
 8003f4e:	0003      	movs	r3, r0
 8003f50:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f54:	f7fe fe2a 	bl	8002bac <HAL_GetTick>
 8003f58:	0002      	movs	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b64      	cmp	r3, #100	@ 0x64
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e2d4      	b.n	8004510 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f66:	4b89      	ldr	r3, [pc, #548]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	2380      	movs	r3, #128	@ 0x80
 8003f6c:	029b      	lsls	r3, r3, #10
 8003f6e:	4013      	ands	r3, r2
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0xf8>
 8003f72:	e000      	b.n	8003f76 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f74:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d100      	bne.n	8003f82 <HAL_RCC_OscConfig+0x126>
 8003f80:	e099      	b.n	80040b6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f82:	4b82      	ldr	r3, [pc, #520]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2238      	movs	r2, #56	@ 0x38
 8003f88:	4013      	ands	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f8c:	4b7f      	ldr	r3, [pc, #508]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	2203      	movs	r2, #3
 8003f92:	4013      	ands	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	2b10      	cmp	r3, #16
 8003f9a:	d102      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x146>
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d002      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d135      	bne.n	8004014 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fa8:	4b78      	ldr	r3, [pc, #480]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	2380      	movs	r3, #128	@ 0x80
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d005      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x164>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e2a7      	b.n	8004510 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc0:	4b72      	ldr	r3, [pc, #456]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	4a74      	ldr	r2, [pc, #464]	@ (8004198 <HAL_RCC_OscConfig+0x33c>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	0019      	movs	r1, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	021a      	lsls	r2, r3, #8
 8003fd0:	4b6e      	ldr	r3, [pc, #440]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d112      	bne.n	8004002 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003fdc:	4b6b      	ldr	r3, [pc, #428]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a6e      	ldr	r2, [pc, #440]	@ (800419c <HAL_RCC_OscConfig+0x340>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	0019      	movs	r1, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	4b68      	ldr	r3, [pc, #416]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8003fec:	430a      	orrs	r2, r1
 8003fee:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003ff0:	4b66      	ldr	r3, [pc, #408]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	0adb      	lsrs	r3, r3, #11
 8003ff6:	2207      	movs	r2, #7
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	4a69      	ldr	r2, [pc, #420]	@ (80041a0 <HAL_RCC_OscConfig+0x344>)
 8003ffc:	40da      	lsrs	r2, r3
 8003ffe:	4b69      	ldr	r3, [pc, #420]	@ (80041a4 <HAL_RCC_OscConfig+0x348>)
 8004000:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004002:	4b69      	ldr	r3, [pc, #420]	@ (80041a8 <HAL_RCC_OscConfig+0x34c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	0018      	movs	r0, r3
 8004008:	f7fe fd74 	bl	8002af4 <HAL_InitTick>
 800400c:	1e03      	subs	r3, r0, #0
 800400e:	d051      	beq.n	80040b4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e27d      	b.n	8004510 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d030      	beq.n	800407e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800401c:	4b5b      	ldr	r3, [pc, #364]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a5e      	ldr	r2, [pc, #376]	@ (800419c <HAL_RCC_OscConfig+0x340>)
 8004022:	4013      	ands	r3, r2
 8004024:	0019      	movs	r1, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691a      	ldr	r2, [r3, #16]
 800402a:	4b58      	ldr	r3, [pc, #352]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 800402c:	430a      	orrs	r2, r1
 800402e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004030:	4b56      	ldr	r3, [pc, #344]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4b55      	ldr	r3, [pc, #340]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8004036:	2180      	movs	r1, #128	@ 0x80
 8004038:	0049      	lsls	r1, r1, #1
 800403a:	430a      	orrs	r2, r1
 800403c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403e:	f7fe fdb5 	bl	8002bac <HAL_GetTick>
 8004042:	0003      	movs	r3, r0
 8004044:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004048:	f7fe fdb0 	bl	8002bac <HAL_GetTick>
 800404c:	0002      	movs	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e25a      	b.n	8004510 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800405a:	4b4c      	ldr	r3, [pc, #304]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	2380      	movs	r3, #128	@ 0x80
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	4013      	ands	r3, r2
 8004064:	d0f0      	beq.n	8004048 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004066:	4b49      	ldr	r3, [pc, #292]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	4a4b      	ldr	r2, [pc, #300]	@ (8004198 <HAL_RCC_OscConfig+0x33c>)
 800406c:	4013      	ands	r3, r2
 800406e:	0019      	movs	r1, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	021a      	lsls	r2, r3, #8
 8004076:	4b45      	ldr	r3, [pc, #276]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8004078:	430a      	orrs	r2, r1
 800407a:	605a      	str	r2, [r3, #4]
 800407c:	e01b      	b.n	80040b6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800407e:	4b43      	ldr	r3, [pc, #268]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	4b42      	ldr	r3, [pc, #264]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8004084:	4949      	ldr	r1, [pc, #292]	@ (80041ac <HAL_RCC_OscConfig+0x350>)
 8004086:	400a      	ands	r2, r1
 8004088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408a:	f7fe fd8f 	bl	8002bac <HAL_GetTick>
 800408e:	0003      	movs	r3, r0
 8004090:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004094:	f7fe fd8a 	bl	8002bac <HAL_GetTick>
 8004098:	0002      	movs	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e234      	b.n	8004510 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040a6:	4b39      	ldr	r3, [pc, #228]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	2380      	movs	r3, #128	@ 0x80
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	4013      	ands	r3, r2
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x238>
 80040b2:	e000      	b.n	80040b6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040b4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2208      	movs	r2, #8
 80040bc:	4013      	ands	r3, r2
 80040be:	d047      	beq.n	8004150 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80040c0:	4b32      	ldr	r3, [pc, #200]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2238      	movs	r2, #56	@ 0x38
 80040c6:	4013      	ands	r3, r2
 80040c8:	2b18      	cmp	r3, #24
 80040ca:	d10a      	bne.n	80040e2 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80040cc:	4b2f      	ldr	r3, [pc, #188]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 80040ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040d0:	2202      	movs	r2, #2
 80040d2:	4013      	ands	r3, r2
 80040d4:	d03c      	beq.n	8004150 <HAL_RCC_OscConfig+0x2f4>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d138      	bne.n	8004150 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e216      	b.n	8004510 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d019      	beq.n	800411e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80040ea:	4b28      	ldr	r3, [pc, #160]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 80040ec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80040ee:	4b27      	ldr	r3, [pc, #156]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 80040f0:	2101      	movs	r1, #1
 80040f2:	430a      	orrs	r2, r1
 80040f4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f6:	f7fe fd59 	bl	8002bac <HAL_GetTick>
 80040fa:	0003      	movs	r3, r0
 80040fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004100:	f7fe fd54 	bl	8002bac <HAL_GetTick>
 8004104:	0002      	movs	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e1fe      	b.n	8004510 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004112:	4b1e      	ldr	r3, [pc, #120]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8004114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004116:	2202      	movs	r2, #2
 8004118:	4013      	ands	r3, r2
 800411a:	d0f1      	beq.n	8004100 <HAL_RCC_OscConfig+0x2a4>
 800411c:	e018      	b.n	8004150 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800411e:	4b1b      	ldr	r3, [pc, #108]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8004120:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004122:	4b1a      	ldr	r3, [pc, #104]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8004124:	2101      	movs	r1, #1
 8004126:	438a      	bics	r2, r1
 8004128:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412a:	f7fe fd3f 	bl	8002bac <HAL_GetTick>
 800412e:	0003      	movs	r3, r0
 8004130:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004134:	f7fe fd3a 	bl	8002bac <HAL_GetTick>
 8004138:	0002      	movs	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e1e4      	b.n	8004510 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004146:	4b11      	ldr	r3, [pc, #68]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8004148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800414a:	2202      	movs	r2, #2
 800414c:	4013      	ands	r3, r2
 800414e:	d1f1      	bne.n	8004134 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2204      	movs	r2, #4
 8004156:	4013      	ands	r3, r2
 8004158:	d100      	bne.n	800415c <HAL_RCC_OscConfig+0x300>
 800415a:	e0c7      	b.n	80042ec <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800415c:	231f      	movs	r3, #31
 800415e:	18fb      	adds	r3, r7, r3
 8004160:	2200      	movs	r2, #0
 8004162:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004164:	4b09      	ldr	r3, [pc, #36]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	2238      	movs	r2, #56	@ 0x38
 800416a:	4013      	ands	r3, r2
 800416c:	2b20      	cmp	r3, #32
 800416e:	d11f      	bne.n	80041b0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004170:	4b06      	ldr	r3, [pc, #24]	@ (800418c <HAL_RCC_OscConfig+0x330>)
 8004172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004174:	2202      	movs	r2, #2
 8004176:	4013      	ands	r3, r2
 8004178:	d100      	bne.n	800417c <HAL_RCC_OscConfig+0x320>
 800417a:	e0b7      	b.n	80042ec <HAL_RCC_OscConfig+0x490>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d000      	beq.n	8004186 <HAL_RCC_OscConfig+0x32a>
 8004184:	e0b2      	b.n	80042ec <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e1c2      	b.n	8004510 <HAL_RCC_OscConfig+0x6b4>
 800418a:	46c0      	nop			@ (mov r8, r8)
 800418c:	40021000 	.word	0x40021000
 8004190:	fffeffff 	.word	0xfffeffff
 8004194:	fffbffff 	.word	0xfffbffff
 8004198:	ffff80ff 	.word	0xffff80ff
 800419c:	ffffc7ff 	.word	0xffffc7ff
 80041a0:	00f42400 	.word	0x00f42400
 80041a4:	200004f0 	.word	0x200004f0
 80041a8:	200004f4 	.word	0x200004f4
 80041ac:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041b0:	4bb5      	ldr	r3, [pc, #724]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 80041b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041b4:	2380      	movs	r3, #128	@ 0x80
 80041b6:	055b      	lsls	r3, r3, #21
 80041b8:	4013      	ands	r3, r2
 80041ba:	d101      	bne.n	80041c0 <HAL_RCC_OscConfig+0x364>
 80041bc:	2301      	movs	r3, #1
 80041be:	e000      	b.n	80041c2 <HAL_RCC_OscConfig+0x366>
 80041c0:	2300      	movs	r3, #0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d011      	beq.n	80041ea <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80041c6:	4bb0      	ldr	r3, [pc, #704]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 80041c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041ca:	4baf      	ldr	r3, [pc, #700]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 80041cc:	2180      	movs	r1, #128	@ 0x80
 80041ce:	0549      	lsls	r1, r1, #21
 80041d0:	430a      	orrs	r2, r1
 80041d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80041d4:	4bac      	ldr	r3, [pc, #688]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 80041d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041d8:	2380      	movs	r3, #128	@ 0x80
 80041da:	055b      	lsls	r3, r3, #21
 80041dc:	4013      	ands	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80041e2:	231f      	movs	r3, #31
 80041e4:	18fb      	adds	r3, r7, r3
 80041e6:	2201      	movs	r2, #1
 80041e8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ea:	4ba8      	ldr	r3, [pc, #672]	@ (800448c <HAL_RCC_OscConfig+0x630>)
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	2380      	movs	r3, #128	@ 0x80
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	4013      	ands	r3, r2
 80041f4:	d11a      	bne.n	800422c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041f6:	4ba5      	ldr	r3, [pc, #660]	@ (800448c <HAL_RCC_OscConfig+0x630>)
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	4ba4      	ldr	r3, [pc, #656]	@ (800448c <HAL_RCC_OscConfig+0x630>)
 80041fc:	2180      	movs	r1, #128	@ 0x80
 80041fe:	0049      	lsls	r1, r1, #1
 8004200:	430a      	orrs	r2, r1
 8004202:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004204:	f7fe fcd2 	bl	8002bac <HAL_GetTick>
 8004208:	0003      	movs	r3, r0
 800420a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420e:	f7fe fccd 	bl	8002bac <HAL_GetTick>
 8004212:	0002      	movs	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e177      	b.n	8004510 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004220:	4b9a      	ldr	r3, [pc, #616]	@ (800448c <HAL_RCC_OscConfig+0x630>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	2380      	movs	r3, #128	@ 0x80
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	4013      	ands	r3, r2
 800422a:	d0f0      	beq.n	800420e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d106      	bne.n	8004242 <HAL_RCC_OscConfig+0x3e6>
 8004234:	4b94      	ldr	r3, [pc, #592]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 8004236:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004238:	4b93      	ldr	r3, [pc, #588]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 800423a:	2101      	movs	r1, #1
 800423c:	430a      	orrs	r2, r1
 800423e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004240:	e01c      	b.n	800427c <HAL_RCC_OscConfig+0x420>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b05      	cmp	r3, #5
 8004248:	d10c      	bne.n	8004264 <HAL_RCC_OscConfig+0x408>
 800424a:	4b8f      	ldr	r3, [pc, #572]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 800424c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800424e:	4b8e      	ldr	r3, [pc, #568]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 8004250:	2104      	movs	r1, #4
 8004252:	430a      	orrs	r2, r1
 8004254:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004256:	4b8c      	ldr	r3, [pc, #560]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 8004258:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800425a:	4b8b      	ldr	r3, [pc, #556]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 800425c:	2101      	movs	r1, #1
 800425e:	430a      	orrs	r2, r1
 8004260:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004262:	e00b      	b.n	800427c <HAL_RCC_OscConfig+0x420>
 8004264:	4b88      	ldr	r3, [pc, #544]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 8004266:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004268:	4b87      	ldr	r3, [pc, #540]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 800426a:	2101      	movs	r1, #1
 800426c:	438a      	bics	r2, r1
 800426e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004270:	4b85      	ldr	r3, [pc, #532]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 8004272:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004274:	4b84      	ldr	r3, [pc, #528]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 8004276:	2104      	movs	r1, #4
 8004278:	438a      	bics	r2, r1
 800427a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d014      	beq.n	80042ae <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004284:	f7fe fc92 	bl	8002bac <HAL_GetTick>
 8004288:	0003      	movs	r3, r0
 800428a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800428c:	e009      	b.n	80042a2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800428e:	f7fe fc8d 	bl	8002bac <HAL_GetTick>
 8004292:	0002      	movs	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	4a7d      	ldr	r2, [pc, #500]	@ (8004490 <HAL_RCC_OscConfig+0x634>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e136      	b.n	8004510 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042a2:	4b79      	ldr	r3, [pc, #484]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 80042a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042a6:	2202      	movs	r2, #2
 80042a8:	4013      	ands	r3, r2
 80042aa:	d0f0      	beq.n	800428e <HAL_RCC_OscConfig+0x432>
 80042ac:	e013      	b.n	80042d6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ae:	f7fe fc7d 	bl	8002bac <HAL_GetTick>
 80042b2:	0003      	movs	r3, r0
 80042b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042b6:	e009      	b.n	80042cc <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b8:	f7fe fc78 	bl	8002bac <HAL_GetTick>
 80042bc:	0002      	movs	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	4a73      	ldr	r2, [pc, #460]	@ (8004490 <HAL_RCC_OscConfig+0x634>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e121      	b.n	8004510 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042cc:	4b6e      	ldr	r3, [pc, #440]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 80042ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d0:	2202      	movs	r2, #2
 80042d2:	4013      	ands	r3, r2
 80042d4:	d1f0      	bne.n	80042b8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80042d6:	231f      	movs	r3, #31
 80042d8:	18fb      	adds	r3, r7, r3
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d105      	bne.n	80042ec <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80042e0:	4b69      	ldr	r3, [pc, #420]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 80042e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042e4:	4b68      	ldr	r3, [pc, #416]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 80042e6:	496b      	ldr	r1, [pc, #428]	@ (8004494 <HAL_RCC_OscConfig+0x638>)
 80042e8:	400a      	ands	r2, r1
 80042ea:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2220      	movs	r2, #32
 80042f2:	4013      	ands	r3, r2
 80042f4:	d039      	beq.n	800436a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01b      	beq.n	8004336 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042fe:	4b62      	ldr	r3, [pc, #392]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	4b61      	ldr	r3, [pc, #388]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 8004304:	2180      	movs	r1, #128	@ 0x80
 8004306:	03c9      	lsls	r1, r1, #15
 8004308:	430a      	orrs	r2, r1
 800430a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430c:	f7fe fc4e 	bl	8002bac <HAL_GetTick>
 8004310:	0003      	movs	r3, r0
 8004312:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004316:	f7fe fc49 	bl	8002bac <HAL_GetTick>
 800431a:	0002      	movs	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e0f3      	b.n	8004510 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004328:	4b57      	ldr	r3, [pc, #348]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	2380      	movs	r3, #128	@ 0x80
 800432e:	041b      	lsls	r3, r3, #16
 8004330:	4013      	ands	r3, r2
 8004332:	d0f0      	beq.n	8004316 <HAL_RCC_OscConfig+0x4ba>
 8004334:	e019      	b.n	800436a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004336:	4b54      	ldr	r3, [pc, #336]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4b53      	ldr	r3, [pc, #332]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 800433c:	4956      	ldr	r1, [pc, #344]	@ (8004498 <HAL_RCC_OscConfig+0x63c>)
 800433e:	400a      	ands	r2, r1
 8004340:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004342:	f7fe fc33 	bl	8002bac <HAL_GetTick>
 8004346:	0003      	movs	r3, r0
 8004348:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800434c:	f7fe fc2e 	bl	8002bac <HAL_GetTick>
 8004350:	0002      	movs	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e0d8      	b.n	8004510 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800435e:	4b4a      	ldr	r3, [pc, #296]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	2380      	movs	r3, #128	@ 0x80
 8004364:	041b      	lsls	r3, r3, #16
 8004366:	4013      	ands	r3, r2
 8004368:	d1f0      	bne.n	800434c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d100      	bne.n	8004374 <HAL_RCC_OscConfig+0x518>
 8004372:	e0cc      	b.n	800450e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004374:	4b44      	ldr	r3, [pc, #272]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2238      	movs	r2, #56	@ 0x38
 800437a:	4013      	ands	r3, r2
 800437c:	2b10      	cmp	r3, #16
 800437e:	d100      	bne.n	8004382 <HAL_RCC_OscConfig+0x526>
 8004380:	e07b      	b.n	800447a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	2b02      	cmp	r3, #2
 8004388:	d156      	bne.n	8004438 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438a:	4b3f      	ldr	r3, [pc, #252]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	4b3e      	ldr	r3, [pc, #248]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 8004390:	4942      	ldr	r1, [pc, #264]	@ (800449c <HAL_RCC_OscConfig+0x640>)
 8004392:	400a      	ands	r2, r1
 8004394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004396:	f7fe fc09 	bl	8002bac <HAL_GetTick>
 800439a:	0003      	movs	r3, r0
 800439c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fe fc04 	bl	8002bac <HAL_GetTick>
 80043a4:	0002      	movs	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e0ae      	b.n	8004510 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043b2:	4b35      	ldr	r3, [pc, #212]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	2380      	movs	r3, #128	@ 0x80
 80043b8:	049b      	lsls	r3, r3, #18
 80043ba:	4013      	ands	r3, r2
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043be:	4b32      	ldr	r3, [pc, #200]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	4a37      	ldr	r2, [pc, #220]	@ (80044a0 <HAL_RCC_OscConfig+0x644>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	0019      	movs	r1, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d6:	021b      	lsls	r3, r3, #8
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043e4:	431a      	orrs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ea:	431a      	orrs	r2, r3
 80043ec:	4b26      	ldr	r3, [pc, #152]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 80043ee:	430a      	orrs	r2, r1
 80043f0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043f2:	4b25      	ldr	r3, [pc, #148]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	4b24      	ldr	r3, [pc, #144]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 80043f8:	2180      	movs	r1, #128	@ 0x80
 80043fa:	0449      	lsls	r1, r1, #17
 80043fc:	430a      	orrs	r2, r1
 80043fe:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004400:	4b21      	ldr	r3, [pc, #132]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	4b20      	ldr	r3, [pc, #128]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 8004406:	2180      	movs	r1, #128	@ 0x80
 8004408:	0549      	lsls	r1, r1, #21
 800440a:	430a      	orrs	r2, r1
 800440c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440e:	f7fe fbcd 	bl	8002bac <HAL_GetTick>
 8004412:	0003      	movs	r3, r0
 8004414:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004418:	f7fe fbc8 	bl	8002bac <HAL_GetTick>
 800441c:	0002      	movs	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e072      	b.n	8004510 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800442a:	4b17      	ldr	r3, [pc, #92]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	2380      	movs	r3, #128	@ 0x80
 8004430:	049b      	lsls	r3, r3, #18
 8004432:	4013      	ands	r3, r2
 8004434:	d0f0      	beq.n	8004418 <HAL_RCC_OscConfig+0x5bc>
 8004436:	e06a      	b.n	800450e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004438:	4b13      	ldr	r3, [pc, #76]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	4b12      	ldr	r3, [pc, #72]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 800443e:	4917      	ldr	r1, [pc, #92]	@ (800449c <HAL_RCC_OscConfig+0x640>)
 8004440:	400a      	ands	r2, r1
 8004442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004444:	f7fe fbb2 	bl	8002bac <HAL_GetTick>
 8004448:	0003      	movs	r3, r0
 800444a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800444e:	f7fe fbad 	bl	8002bac <HAL_GetTick>
 8004452:	0002      	movs	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e057      	b.n	8004510 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004460:	4b09      	ldr	r3, [pc, #36]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	2380      	movs	r3, #128	@ 0x80
 8004466:	049b      	lsls	r3, r3, #18
 8004468:	4013      	ands	r3, r2
 800446a:	d1f0      	bne.n	800444e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800446c:	4b06      	ldr	r3, [pc, #24]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	4b05      	ldr	r3, [pc, #20]	@ (8004488 <HAL_RCC_OscConfig+0x62c>)
 8004472:	490c      	ldr	r1, [pc, #48]	@ (80044a4 <HAL_RCC_OscConfig+0x648>)
 8004474:	400a      	ands	r2, r1
 8004476:	60da      	str	r2, [r3, #12]
 8004478:	e049      	b.n	800450e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d112      	bne.n	80044a8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e044      	b.n	8004510 <HAL_RCC_OscConfig+0x6b4>
 8004486:	46c0      	nop			@ (mov r8, r8)
 8004488:	40021000 	.word	0x40021000
 800448c:	40007000 	.word	0x40007000
 8004490:	00001388 	.word	0x00001388
 8004494:	efffffff 	.word	0xefffffff
 8004498:	ffbfffff 	.word	0xffbfffff
 800449c:	feffffff 	.word	0xfeffffff
 80044a0:	11c1808c 	.word	0x11c1808c
 80044a4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80044a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004518 <HAL_RCC_OscConfig+0x6bc>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2203      	movs	r2, #3
 80044b2:	401a      	ands	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d126      	bne.n	800450a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	2270      	movs	r2, #112	@ 0x70
 80044c0:	401a      	ands	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d11f      	bne.n	800450a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	23fe      	movs	r3, #254	@ 0xfe
 80044ce:	01db      	lsls	r3, r3, #7
 80044d0:	401a      	ands	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044d8:	429a      	cmp	r2, r3
 80044da:	d116      	bne.n	800450a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	23f8      	movs	r3, #248	@ 0xf8
 80044e0:	039b      	lsls	r3, r3, #14
 80044e2:	401a      	ands	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d10e      	bne.n	800450a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	23e0      	movs	r3, #224	@ 0xe0
 80044f0:	051b      	lsls	r3, r3, #20
 80044f2:	401a      	ands	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d106      	bne.n	800450a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	0f5b      	lsrs	r3, r3, #29
 8004500:	075a      	lsls	r2, r3, #29
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004506:	429a      	cmp	r2, r3
 8004508:	d001      	beq.n	800450e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	0018      	movs	r0, r3
 8004512:	46bd      	mov	sp, r7
 8004514:	b008      	add	sp, #32
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40021000 	.word	0x40021000

0800451c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e0e9      	b.n	8004704 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004530:	4b76      	ldr	r3, [pc, #472]	@ (800470c <HAL_RCC_ClockConfig+0x1f0>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2207      	movs	r2, #7
 8004536:	4013      	ands	r3, r2
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d91e      	bls.n	800457c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453e:	4b73      	ldr	r3, [pc, #460]	@ (800470c <HAL_RCC_ClockConfig+0x1f0>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2207      	movs	r2, #7
 8004544:	4393      	bics	r3, r2
 8004546:	0019      	movs	r1, r3
 8004548:	4b70      	ldr	r3, [pc, #448]	@ (800470c <HAL_RCC_ClockConfig+0x1f0>)
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004550:	f7fe fb2c 	bl	8002bac <HAL_GetTick>
 8004554:	0003      	movs	r3, r0
 8004556:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004558:	e009      	b.n	800456e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800455a:	f7fe fb27 	bl	8002bac <HAL_GetTick>
 800455e:	0002      	movs	r2, r0
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	4a6a      	ldr	r2, [pc, #424]	@ (8004710 <HAL_RCC_ClockConfig+0x1f4>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d901      	bls.n	800456e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e0ca      	b.n	8004704 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800456e:	4b67      	ldr	r3, [pc, #412]	@ (800470c <HAL_RCC_ClockConfig+0x1f0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2207      	movs	r2, #7
 8004574:	4013      	ands	r3, r2
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	429a      	cmp	r2, r3
 800457a:	d1ee      	bne.n	800455a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2202      	movs	r2, #2
 8004582:	4013      	ands	r3, r2
 8004584:	d015      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2204      	movs	r2, #4
 800458c:	4013      	ands	r3, r2
 800458e:	d006      	beq.n	800459e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004590:	4b60      	ldr	r3, [pc, #384]	@ (8004714 <HAL_RCC_ClockConfig+0x1f8>)
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	4b5f      	ldr	r3, [pc, #380]	@ (8004714 <HAL_RCC_ClockConfig+0x1f8>)
 8004596:	21e0      	movs	r1, #224	@ 0xe0
 8004598:	01c9      	lsls	r1, r1, #7
 800459a:	430a      	orrs	r2, r1
 800459c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800459e:	4b5d      	ldr	r3, [pc, #372]	@ (8004714 <HAL_RCC_ClockConfig+0x1f8>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	4a5d      	ldr	r2, [pc, #372]	@ (8004718 <HAL_RCC_ClockConfig+0x1fc>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	0019      	movs	r1, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	4b59      	ldr	r3, [pc, #356]	@ (8004714 <HAL_RCC_ClockConfig+0x1f8>)
 80045ae:	430a      	orrs	r2, r1
 80045b0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2201      	movs	r2, #1
 80045b8:	4013      	ands	r3, r2
 80045ba:	d057      	beq.n	800466c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d107      	bne.n	80045d4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045c4:	4b53      	ldr	r3, [pc, #332]	@ (8004714 <HAL_RCC_ClockConfig+0x1f8>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	2380      	movs	r3, #128	@ 0x80
 80045ca:	029b      	lsls	r3, r3, #10
 80045cc:	4013      	ands	r3, r2
 80045ce:	d12b      	bne.n	8004628 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e097      	b.n	8004704 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d107      	bne.n	80045ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045dc:	4b4d      	ldr	r3, [pc, #308]	@ (8004714 <HAL_RCC_ClockConfig+0x1f8>)
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	2380      	movs	r3, #128	@ 0x80
 80045e2:	049b      	lsls	r3, r3, #18
 80045e4:	4013      	ands	r3, r2
 80045e6:	d11f      	bne.n	8004628 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e08b      	b.n	8004704 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d107      	bne.n	8004604 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045f4:	4b47      	ldr	r3, [pc, #284]	@ (8004714 <HAL_RCC_ClockConfig+0x1f8>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	2380      	movs	r3, #128	@ 0x80
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	4013      	ands	r3, r2
 80045fe:	d113      	bne.n	8004628 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e07f      	b.n	8004704 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b03      	cmp	r3, #3
 800460a:	d106      	bne.n	800461a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800460c:	4b41      	ldr	r3, [pc, #260]	@ (8004714 <HAL_RCC_ClockConfig+0x1f8>)
 800460e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004610:	2202      	movs	r2, #2
 8004612:	4013      	ands	r3, r2
 8004614:	d108      	bne.n	8004628 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e074      	b.n	8004704 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800461a:	4b3e      	ldr	r3, [pc, #248]	@ (8004714 <HAL_RCC_ClockConfig+0x1f8>)
 800461c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800461e:	2202      	movs	r2, #2
 8004620:	4013      	ands	r3, r2
 8004622:	d101      	bne.n	8004628 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e06d      	b.n	8004704 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004628:	4b3a      	ldr	r3, [pc, #232]	@ (8004714 <HAL_RCC_ClockConfig+0x1f8>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	2207      	movs	r2, #7
 800462e:	4393      	bics	r3, r2
 8004630:	0019      	movs	r1, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	4b37      	ldr	r3, [pc, #220]	@ (8004714 <HAL_RCC_ClockConfig+0x1f8>)
 8004638:	430a      	orrs	r2, r1
 800463a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800463c:	f7fe fab6 	bl	8002bac <HAL_GetTick>
 8004640:	0003      	movs	r3, r0
 8004642:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004644:	e009      	b.n	800465a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004646:	f7fe fab1 	bl	8002bac <HAL_GetTick>
 800464a:	0002      	movs	r2, r0
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	4a2f      	ldr	r2, [pc, #188]	@ (8004710 <HAL_RCC_ClockConfig+0x1f4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d901      	bls.n	800465a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e054      	b.n	8004704 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800465a:	4b2e      	ldr	r3, [pc, #184]	@ (8004714 <HAL_RCC_ClockConfig+0x1f8>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	2238      	movs	r2, #56	@ 0x38
 8004660:	401a      	ands	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	429a      	cmp	r2, r3
 800466a:	d1ec      	bne.n	8004646 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800466c:	4b27      	ldr	r3, [pc, #156]	@ (800470c <HAL_RCC_ClockConfig+0x1f0>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2207      	movs	r2, #7
 8004672:	4013      	ands	r3, r2
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	429a      	cmp	r2, r3
 8004678:	d21e      	bcs.n	80046b8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467a:	4b24      	ldr	r3, [pc, #144]	@ (800470c <HAL_RCC_ClockConfig+0x1f0>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2207      	movs	r2, #7
 8004680:	4393      	bics	r3, r2
 8004682:	0019      	movs	r1, r3
 8004684:	4b21      	ldr	r3, [pc, #132]	@ (800470c <HAL_RCC_ClockConfig+0x1f0>)
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800468c:	f7fe fa8e 	bl	8002bac <HAL_GetTick>
 8004690:	0003      	movs	r3, r0
 8004692:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004694:	e009      	b.n	80046aa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004696:	f7fe fa89 	bl	8002bac <HAL_GetTick>
 800469a:	0002      	movs	r2, r0
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	4a1b      	ldr	r2, [pc, #108]	@ (8004710 <HAL_RCC_ClockConfig+0x1f4>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e02c      	b.n	8004704 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80046aa:	4b18      	ldr	r3, [pc, #96]	@ (800470c <HAL_RCC_ClockConfig+0x1f0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2207      	movs	r2, #7
 80046b0:	4013      	ands	r3, r2
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d1ee      	bne.n	8004696 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2204      	movs	r2, #4
 80046be:	4013      	ands	r3, r2
 80046c0:	d009      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80046c2:	4b14      	ldr	r3, [pc, #80]	@ (8004714 <HAL_RCC_ClockConfig+0x1f8>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	4a15      	ldr	r2, [pc, #84]	@ (800471c <HAL_RCC_ClockConfig+0x200>)
 80046c8:	4013      	ands	r3, r2
 80046ca:	0019      	movs	r1, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	4b10      	ldr	r3, [pc, #64]	@ (8004714 <HAL_RCC_ClockConfig+0x1f8>)
 80046d2:	430a      	orrs	r2, r1
 80046d4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80046d6:	f000 f829 	bl	800472c <HAL_RCC_GetSysClockFreq>
 80046da:	0001      	movs	r1, r0
 80046dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004714 <HAL_RCC_ClockConfig+0x1f8>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	0a1b      	lsrs	r3, r3, #8
 80046e2:	220f      	movs	r2, #15
 80046e4:	401a      	ands	r2, r3
 80046e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004720 <HAL_RCC_ClockConfig+0x204>)
 80046e8:	0092      	lsls	r2, r2, #2
 80046ea:	58d3      	ldr	r3, [r2, r3]
 80046ec:	221f      	movs	r2, #31
 80046ee:	4013      	ands	r3, r2
 80046f0:	000a      	movs	r2, r1
 80046f2:	40da      	lsrs	r2, r3
 80046f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004724 <HAL_RCC_ClockConfig+0x208>)
 80046f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80046f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004728 <HAL_RCC_ClockConfig+0x20c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	0018      	movs	r0, r3
 80046fe:	f7fe f9f9 	bl	8002af4 <HAL_InitTick>
 8004702:	0003      	movs	r3, r0
}
 8004704:	0018      	movs	r0, r3
 8004706:	46bd      	mov	sp, r7
 8004708:	b004      	add	sp, #16
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40022000 	.word	0x40022000
 8004710:	00001388 	.word	0x00001388
 8004714:	40021000 	.word	0x40021000
 8004718:	fffff0ff 	.word	0xfffff0ff
 800471c:	ffff8fff 	.word	0xffff8fff
 8004720:	08008aa0 	.word	0x08008aa0
 8004724:	200004f0 	.word	0x200004f0
 8004728:	200004f4 	.word	0x200004f4

0800472c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004732:	4b3c      	ldr	r3, [pc, #240]	@ (8004824 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	2238      	movs	r2, #56	@ 0x38
 8004738:	4013      	ands	r3, r2
 800473a:	d10f      	bne.n	800475c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800473c:	4b39      	ldr	r3, [pc, #228]	@ (8004824 <HAL_RCC_GetSysClockFreq+0xf8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	0adb      	lsrs	r3, r3, #11
 8004742:	2207      	movs	r2, #7
 8004744:	4013      	ands	r3, r2
 8004746:	2201      	movs	r2, #1
 8004748:	409a      	lsls	r2, r3
 800474a:	0013      	movs	r3, r2
 800474c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800474e:	6839      	ldr	r1, [r7, #0]
 8004750:	4835      	ldr	r0, [pc, #212]	@ (8004828 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004752:	f7fb fce1 	bl	8000118 <__udivsi3>
 8004756:	0003      	movs	r3, r0
 8004758:	613b      	str	r3, [r7, #16]
 800475a:	e05d      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800475c:	4b31      	ldr	r3, [pc, #196]	@ (8004824 <HAL_RCC_GetSysClockFreq+0xf8>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2238      	movs	r2, #56	@ 0x38
 8004762:	4013      	ands	r3, r2
 8004764:	2b08      	cmp	r3, #8
 8004766:	d102      	bne.n	800476e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004768:	4b30      	ldr	r3, [pc, #192]	@ (800482c <HAL_RCC_GetSysClockFreq+0x100>)
 800476a:	613b      	str	r3, [r7, #16]
 800476c:	e054      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800476e:	4b2d      	ldr	r3, [pc, #180]	@ (8004824 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	2238      	movs	r2, #56	@ 0x38
 8004774:	4013      	ands	r3, r2
 8004776:	2b10      	cmp	r3, #16
 8004778:	d138      	bne.n	80047ec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800477a:	4b2a      	ldr	r3, [pc, #168]	@ (8004824 <HAL_RCC_GetSysClockFreq+0xf8>)
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	2203      	movs	r2, #3
 8004780:	4013      	ands	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004784:	4b27      	ldr	r3, [pc, #156]	@ (8004824 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	091b      	lsrs	r3, r3, #4
 800478a:	2207      	movs	r2, #7
 800478c:	4013      	ands	r3, r2
 800478e:	3301      	adds	r3, #1
 8004790:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2b03      	cmp	r3, #3
 8004796:	d10d      	bne.n	80047b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004798:	68b9      	ldr	r1, [r7, #8]
 800479a:	4824      	ldr	r0, [pc, #144]	@ (800482c <HAL_RCC_GetSysClockFreq+0x100>)
 800479c:	f7fb fcbc 	bl	8000118 <__udivsi3>
 80047a0:	0003      	movs	r3, r0
 80047a2:	0019      	movs	r1, r3
 80047a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004824 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	0a1b      	lsrs	r3, r3, #8
 80047aa:	227f      	movs	r2, #127	@ 0x7f
 80047ac:	4013      	ands	r3, r2
 80047ae:	434b      	muls	r3, r1
 80047b0:	617b      	str	r3, [r7, #20]
        break;
 80047b2:	e00d      	b.n	80047d0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80047b4:	68b9      	ldr	r1, [r7, #8]
 80047b6:	481c      	ldr	r0, [pc, #112]	@ (8004828 <HAL_RCC_GetSysClockFreq+0xfc>)
 80047b8:	f7fb fcae 	bl	8000118 <__udivsi3>
 80047bc:	0003      	movs	r3, r0
 80047be:	0019      	movs	r1, r3
 80047c0:	4b18      	ldr	r3, [pc, #96]	@ (8004824 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	0a1b      	lsrs	r3, r3, #8
 80047c6:	227f      	movs	r2, #127	@ 0x7f
 80047c8:	4013      	ands	r3, r2
 80047ca:	434b      	muls	r3, r1
 80047cc:	617b      	str	r3, [r7, #20]
        break;
 80047ce:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80047d0:	4b14      	ldr	r3, [pc, #80]	@ (8004824 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	0f5b      	lsrs	r3, r3, #29
 80047d6:	2207      	movs	r2, #7
 80047d8:	4013      	ands	r3, r2
 80047da:	3301      	adds	r3, #1
 80047dc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	6978      	ldr	r0, [r7, #20]
 80047e2:	f7fb fc99 	bl	8000118 <__udivsi3>
 80047e6:	0003      	movs	r3, r0
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	e015      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80047ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004824 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2238      	movs	r2, #56	@ 0x38
 80047f2:	4013      	ands	r3, r2
 80047f4:	2b20      	cmp	r3, #32
 80047f6:	d103      	bne.n	8004800 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80047f8:	2380      	movs	r3, #128	@ 0x80
 80047fa:	021b      	lsls	r3, r3, #8
 80047fc:	613b      	str	r3, [r7, #16]
 80047fe:	e00b      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004800:	4b08      	ldr	r3, [pc, #32]	@ (8004824 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2238      	movs	r2, #56	@ 0x38
 8004806:	4013      	ands	r3, r2
 8004808:	2b18      	cmp	r3, #24
 800480a:	d103      	bne.n	8004814 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800480c:	23fa      	movs	r3, #250	@ 0xfa
 800480e:	01db      	lsls	r3, r3, #7
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	e001      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004814:	2300      	movs	r3, #0
 8004816:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004818:	693b      	ldr	r3, [r7, #16]
}
 800481a:	0018      	movs	r0, r3
 800481c:	46bd      	mov	sp, r7
 800481e:	b006      	add	sp, #24
 8004820:	bd80      	pop	{r7, pc}
 8004822:	46c0      	nop			@ (mov r8, r8)
 8004824:	40021000 	.word	0x40021000
 8004828:	00f42400 	.word	0x00f42400
 800482c:	007a1200 	.word	0x007a1200

08004830 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004834:	4b02      	ldr	r3, [pc, #8]	@ (8004840 <HAL_RCC_GetHCLKFreq+0x10>)
 8004836:	681b      	ldr	r3, [r3, #0]
}
 8004838:	0018      	movs	r0, r3
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	46c0      	nop			@ (mov r8, r8)
 8004840:	200004f0 	.word	0x200004f0

08004844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004844:	b5b0      	push	{r4, r5, r7, lr}
 8004846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004848:	f7ff fff2 	bl	8004830 <HAL_RCC_GetHCLKFreq>
 800484c:	0004      	movs	r4, r0
 800484e:	f7ff faf9 	bl	8003e44 <LL_RCC_GetAPB1Prescaler>
 8004852:	0003      	movs	r3, r0
 8004854:	0b1a      	lsrs	r2, r3, #12
 8004856:	4b05      	ldr	r3, [pc, #20]	@ (800486c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004858:	0092      	lsls	r2, r2, #2
 800485a:	58d3      	ldr	r3, [r2, r3]
 800485c:	221f      	movs	r2, #31
 800485e:	4013      	ands	r3, r2
 8004860:	40dc      	lsrs	r4, r3
 8004862:	0023      	movs	r3, r4
}
 8004864:	0018      	movs	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	bdb0      	pop	{r4, r5, r7, pc}
 800486a:	46c0      	nop			@ (mov r8, r8)
 800486c:	08008ae0 	.word	0x08008ae0

08004870 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004878:	2313      	movs	r3, #19
 800487a:	18fb      	adds	r3, r7, r3
 800487c:	2200      	movs	r2, #0
 800487e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004880:	2312      	movs	r3, #18
 8004882:	18fb      	adds	r3, r7, r3
 8004884:	2200      	movs	r2, #0
 8004886:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	2380      	movs	r3, #128	@ 0x80
 800488e:	029b      	lsls	r3, r3, #10
 8004890:	4013      	ands	r3, r2
 8004892:	d100      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004894:	e0ad      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004896:	2011      	movs	r0, #17
 8004898:	183b      	adds	r3, r7, r0
 800489a:	2200      	movs	r2, #0
 800489c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800489e:	4b47      	ldr	r3, [pc, #284]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80048a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048a2:	2380      	movs	r3, #128	@ 0x80
 80048a4:	055b      	lsls	r3, r3, #21
 80048a6:	4013      	ands	r3, r2
 80048a8:	d110      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048aa:	4b44      	ldr	r3, [pc, #272]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80048ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048ae:	4b43      	ldr	r3, [pc, #268]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80048b0:	2180      	movs	r1, #128	@ 0x80
 80048b2:	0549      	lsls	r1, r1, #21
 80048b4:	430a      	orrs	r2, r1
 80048b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80048b8:	4b40      	ldr	r3, [pc, #256]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80048ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048bc:	2380      	movs	r3, #128	@ 0x80
 80048be:	055b      	lsls	r3, r3, #21
 80048c0:	4013      	ands	r3, r2
 80048c2:	60bb      	str	r3, [r7, #8]
 80048c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048c6:	183b      	adds	r3, r7, r0
 80048c8:	2201      	movs	r2, #1
 80048ca:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048cc:	4b3c      	ldr	r3, [pc, #240]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	4b3b      	ldr	r3, [pc, #236]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80048d2:	2180      	movs	r1, #128	@ 0x80
 80048d4:	0049      	lsls	r1, r1, #1
 80048d6:	430a      	orrs	r2, r1
 80048d8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048da:	f7fe f967 	bl	8002bac <HAL_GetTick>
 80048de:	0003      	movs	r3, r0
 80048e0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048e2:	e00b      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e4:	f7fe f962 	bl	8002bac <HAL_GetTick>
 80048e8:	0002      	movs	r2, r0
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d904      	bls.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80048f2:	2313      	movs	r3, #19
 80048f4:	18fb      	adds	r3, r7, r3
 80048f6:	2203      	movs	r2, #3
 80048f8:	701a      	strb	r2, [r3, #0]
        break;
 80048fa:	e005      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048fc:	4b30      	ldr	r3, [pc, #192]	@ (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	2380      	movs	r3, #128	@ 0x80
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	4013      	ands	r3, r2
 8004906:	d0ed      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004908:	2313      	movs	r3, #19
 800490a:	18fb      	adds	r3, r7, r3
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d15e      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004912:	4b2a      	ldr	r3, [pc, #168]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004914:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004916:	23c0      	movs	r3, #192	@ 0xc0
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4013      	ands	r3, r2
 800491c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d019      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	429a      	cmp	r2, r3
 800492c:	d014      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800492e:	4b23      	ldr	r3, [pc, #140]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004932:	4a24      	ldr	r2, [pc, #144]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004934:	4013      	ands	r3, r2
 8004936:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004938:	4b20      	ldr	r3, [pc, #128]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800493a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800493c:	4b1f      	ldr	r3, [pc, #124]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800493e:	2180      	movs	r1, #128	@ 0x80
 8004940:	0249      	lsls	r1, r1, #9
 8004942:	430a      	orrs	r2, r1
 8004944:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004946:	4b1d      	ldr	r3, [pc, #116]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004948:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800494a:	4b1c      	ldr	r3, [pc, #112]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800494c:	491e      	ldr	r1, [pc, #120]	@ (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800494e:	400a      	ands	r2, r1
 8004950:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004952:	4b1a      	ldr	r3, [pc, #104]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2201      	movs	r2, #1
 800495c:	4013      	ands	r3, r2
 800495e:	d016      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004960:	f7fe f924 	bl	8002bac <HAL_GetTick>
 8004964:	0003      	movs	r3, r0
 8004966:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004968:	e00c      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800496a:	f7fe f91f 	bl	8002bac <HAL_GetTick>
 800496e:	0002      	movs	r2, r0
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	4a15      	ldr	r2, [pc, #84]	@ (80049cc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d904      	bls.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800497a:	2313      	movs	r3, #19
 800497c:	18fb      	adds	r3, r7, r3
 800497e:	2203      	movs	r2, #3
 8004980:	701a      	strb	r2, [r3, #0]
            break;
 8004982:	e004      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004984:	4b0d      	ldr	r3, [pc, #52]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004988:	2202      	movs	r2, #2
 800498a:	4013      	ands	r3, r2
 800498c:	d0ed      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800498e:	2313      	movs	r3, #19
 8004990:	18fb      	adds	r3, r7, r3
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004998:	4b08      	ldr	r3, [pc, #32]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800499a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800499c:	4a09      	ldr	r2, [pc, #36]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800499e:	4013      	ands	r3, r2
 80049a0:	0019      	movs	r1, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049a6:	4b05      	ldr	r3, [pc, #20]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80049a8:	430a      	orrs	r2, r1
 80049aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80049ac:	e016      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049ae:	2312      	movs	r3, #18
 80049b0:	18fb      	adds	r3, r7, r3
 80049b2:	2213      	movs	r2, #19
 80049b4:	18ba      	adds	r2, r7, r2
 80049b6:	7812      	ldrb	r2, [r2, #0]
 80049b8:	701a      	strb	r2, [r3, #0]
 80049ba:	e00f      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80049bc:	40021000 	.word	0x40021000
 80049c0:	40007000 	.word	0x40007000
 80049c4:	fffffcff 	.word	0xfffffcff
 80049c8:	fffeffff 	.word	0xfffeffff
 80049cc:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d0:	2312      	movs	r3, #18
 80049d2:	18fb      	adds	r3, r7, r3
 80049d4:	2213      	movs	r2, #19
 80049d6:	18ba      	adds	r2, r7, r2
 80049d8:	7812      	ldrb	r2, [r2, #0]
 80049da:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049dc:	2311      	movs	r3, #17
 80049de:	18fb      	adds	r3, r7, r3
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d105      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049e6:	4bb6      	ldr	r3, [pc, #728]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049ea:	4bb5      	ldr	r3, [pc, #724]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049ec:	49b5      	ldr	r1, [pc, #724]	@ (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80049ee:	400a      	ands	r2, r1
 80049f0:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2201      	movs	r2, #1
 80049f8:	4013      	ands	r3, r2
 80049fa:	d009      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049fc:	4bb0      	ldr	r3, [pc, #704]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a00:	2203      	movs	r2, #3
 8004a02:	4393      	bics	r3, r2
 8004a04:	0019      	movs	r1, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	4bad      	ldr	r3, [pc, #692]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2202      	movs	r2, #2
 8004a16:	4013      	ands	r3, r2
 8004a18:	d009      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a1a:	4ba9      	ldr	r3, [pc, #676]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1e:	220c      	movs	r2, #12
 8004a20:	4393      	bics	r3, r2
 8004a22:	0019      	movs	r1, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	4ba5      	ldr	r3, [pc, #660]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2204      	movs	r2, #4
 8004a34:	4013      	ands	r3, r2
 8004a36:	d009      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a38:	4ba1      	ldr	r3, [pc, #644]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a3c:	2230      	movs	r2, #48	@ 0x30
 8004a3e:	4393      	bics	r3, r2
 8004a40:	0019      	movs	r1, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	4b9e      	ldr	r3, [pc, #632]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2210      	movs	r2, #16
 8004a52:	4013      	ands	r3, r2
 8004a54:	d009      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a56:	4b9a      	ldr	r3, [pc, #616]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a5a:	4a9b      	ldr	r2, [pc, #620]	@ (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	0019      	movs	r1, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	4b96      	ldr	r3, [pc, #600]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a66:	430a      	orrs	r2, r1
 8004a68:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	2380      	movs	r3, #128	@ 0x80
 8004a70:	015b      	lsls	r3, r3, #5
 8004a72:	4013      	ands	r3, r2
 8004a74:	d009      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8004a76:	4b92      	ldr	r3, [pc, #584]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a7a:	4a94      	ldr	r2, [pc, #592]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	0019      	movs	r1, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	695a      	ldr	r2, [r3, #20]
 8004a84:	4b8e      	ldr	r3, [pc, #568]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a86:	430a      	orrs	r2, r1
 8004a88:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	2380      	movs	r3, #128	@ 0x80
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4013      	ands	r3, r2
 8004a94:	d009      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a96:	4b8a      	ldr	r3, [pc, #552]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a9a:	4a8d      	ldr	r2, [pc, #564]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	0019      	movs	r1, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004aa4:	4b86      	ldr	r3, [pc, #536]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	2380      	movs	r3, #128	@ 0x80
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d009      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ab6:	4b82      	ldr	r3, [pc, #520]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aba:	4a86      	ldr	r2, [pc, #536]	@ (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004abc:	4013      	ands	r3, r2
 8004abe:	0019      	movs	r1, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ac4:	4b7e      	ldr	r3, [pc, #504]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	d009      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ad4:	4b7a      	ldr	r3, [pc, #488]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad8:	4a7f      	ldr	r2, [pc, #508]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	0019      	movs	r1, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699a      	ldr	r2, [r3, #24]
 8004ae2:	4b77      	ldr	r3, [pc, #476]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2240      	movs	r2, #64	@ 0x40
 8004aee:	4013      	ands	r3, r2
 8004af0:	d009      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004af2:	4b73      	ldr	r3, [pc, #460]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af6:	4a79      	ldr	r2, [pc, #484]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	0019      	movs	r1, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	69da      	ldr	r2, [r3, #28]
 8004b00:	4b6f      	ldr	r3, [pc, #444]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b02:	430a      	orrs	r2, r1
 8004b04:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	2380      	movs	r3, #128	@ 0x80
 8004b0c:	01db      	lsls	r3, r3, #7
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d015      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b12:	4b6b      	ldr	r3, [pc, #428]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	0899      	lsrs	r1, r3, #2
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b1e:	4b68      	ldr	r3, [pc, #416]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b20:	430a      	orrs	r2, r1
 8004b22:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b28:	2380      	movs	r3, #128	@ 0x80
 8004b2a:	05db      	lsls	r3, r3, #23
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d106      	bne.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004b30:	4b63      	ldr	r3, [pc, #396]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	4b62      	ldr	r3, [pc, #392]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b36:	2180      	movs	r1, #128	@ 0x80
 8004b38:	0249      	lsls	r1, r1, #9
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	2380      	movs	r3, #128	@ 0x80
 8004b44:	031b      	lsls	r3, r3, #12
 8004b46:	4013      	ands	r3, r2
 8004b48:	d009      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b4a:	4b5d      	ldr	r3, [pc, #372]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b4e:	2240      	movs	r2, #64	@ 0x40
 8004b50:	4393      	bics	r3, r2
 8004b52:	0019      	movs	r1, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b58:	4b59      	ldr	r3, [pc, #356]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	2380      	movs	r3, #128	@ 0x80
 8004b64:	039b      	lsls	r3, r3, #14
 8004b66:	4013      	ands	r3, r2
 8004b68:	d016      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004b6a:	4b55      	ldr	r3, [pc, #340]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b6e:	4a5c      	ldr	r2, [pc, #368]	@ (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	0019      	movs	r1, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b78:	4b51      	ldr	r3, [pc, #324]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b82:	2380      	movs	r3, #128	@ 0x80
 8004b84:	03db      	lsls	r3, r3, #15
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d106      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004b8a:	4b4d      	ldr	r3, [pc, #308]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	4b4c      	ldr	r3, [pc, #304]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b90:	2180      	movs	r1, #128	@ 0x80
 8004b92:	0449      	lsls	r1, r1, #17
 8004b94:	430a      	orrs	r2, r1
 8004b96:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	2380      	movs	r3, #128	@ 0x80
 8004b9e:	03db      	lsls	r3, r3, #15
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d016      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004ba4:	4b46      	ldr	r3, [pc, #280]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba8:	4a4e      	ldr	r2, [pc, #312]	@ (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004baa:	4013      	ands	r3, r2
 8004bac:	0019      	movs	r1, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bb2:	4b43      	ldr	r3, [pc, #268]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bbc:	2380      	movs	r3, #128	@ 0x80
 8004bbe:	045b      	lsls	r3, r3, #17
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d106      	bne.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004bc4:	4b3e      	ldr	r3, [pc, #248]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	4b3d      	ldr	r3, [pc, #244]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bca:	2180      	movs	r1, #128	@ 0x80
 8004bcc:	0449      	lsls	r1, r1, #17
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	2380      	movs	r3, #128	@ 0x80
 8004bd8:	011b      	lsls	r3, r3, #4
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d014      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004bde:	4b38      	ldr	r3, [pc, #224]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be2:	2203      	movs	r2, #3
 8004be4:	4393      	bics	r3, r2
 8004be6:	0019      	movs	r1, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a1a      	ldr	r2, [r3, #32]
 8004bec:	4b34      	ldr	r3, [pc, #208]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d106      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004bfa:	4b31      	ldr	r3, [pc, #196]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	4b30      	ldr	r3, [pc, #192]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c00:	2180      	movs	r1, #128	@ 0x80
 8004c02:	0249      	lsls	r1, r1, #9
 8004c04:	430a      	orrs	r2, r1
 8004c06:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	2380      	movs	r3, #128	@ 0x80
 8004c0e:	019b      	lsls	r3, r3, #6
 8004c10:	4013      	ands	r3, r2
 8004c12:	d014      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004c14:	4b2a      	ldr	r3, [pc, #168]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c18:	220c      	movs	r2, #12
 8004c1a:	4393      	bics	r3, r2
 8004c1c:	0019      	movs	r1, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c22:	4b27      	ldr	r3, [pc, #156]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c24:	430a      	orrs	r2, r1
 8004c26:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	d106      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004c30:	4b23      	ldr	r3, [pc, #140]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	4b22      	ldr	r3, [pc, #136]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c36:	2180      	movs	r1, #128	@ 0x80
 8004c38:	0249      	lsls	r1, r1, #9
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	2380      	movs	r3, #128	@ 0x80
 8004c44:	045b      	lsls	r3, r3, #17
 8004c46:	4013      	ands	r3, r2
 8004c48:	d016      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c4e:	4a22      	ldr	r2, [pc, #136]	@ (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004c50:	4013      	ands	r3, r2
 8004c52:	0019      	movs	r1, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c58:	4b19      	ldr	r3, [pc, #100]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c62:	2380      	movs	r3, #128	@ 0x80
 8004c64:	019b      	lsls	r3, r3, #6
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d106      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004c6a:	4b15      	ldr	r3, [pc, #84]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	4b14      	ldr	r3, [pc, #80]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c70:	2180      	movs	r1, #128	@ 0x80
 8004c72:	0449      	lsls	r1, r1, #17
 8004c74:	430a      	orrs	r2, r1
 8004c76:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	2380      	movs	r3, #128	@ 0x80
 8004c7e:	049b      	lsls	r3, r3, #18
 8004c80:	4013      	ands	r3, r2
 8004c82:	d016      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c84:	4b0e      	ldr	r3, [pc, #56]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c88:	4a10      	ldr	r2, [pc, #64]	@ (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	0019      	movs	r1, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c92:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c94:	430a      	orrs	r2, r1
 8004c96:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c9c:	2380      	movs	r3, #128	@ 0x80
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d106      	bne.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004ca4:	4b06      	ldr	r3, [pc, #24]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	4b05      	ldr	r3, [pc, #20]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004caa:	2180      	movs	r1, #128	@ 0x80
 8004cac:	0449      	lsls	r1, r1, #17
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004cb2:	2312      	movs	r3, #18
 8004cb4:	18fb      	adds	r3, r7, r3
 8004cb6:	781b      	ldrb	r3, [r3, #0]
}
 8004cb8:	0018      	movs	r0, r3
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	b006      	add	sp, #24
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	efffffff 	.word	0xefffffff
 8004cc8:	fffff3ff 	.word	0xfffff3ff
 8004ccc:	fffffcff 	.word	0xfffffcff
 8004cd0:	fff3ffff 	.word	0xfff3ffff
 8004cd4:	ffcfffff 	.word	0xffcfffff
 8004cd8:	ffffcfff 	.word	0xffffcfff
 8004cdc:	ffff3fff 	.word	0xffff3fff
 8004ce0:	ffbfffff 	.word	0xffbfffff
 8004ce4:	feffffff 	.word	0xfeffffff

08004ce8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ce8:	b5b0      	push	{r4, r5, r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004cf0:	230f      	movs	r3, #15
 8004cf2:	18fb      	adds	r3, r7, r3
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d100      	bne.n	8004d00 <HAL_RTC_Init+0x18>
 8004cfe:	e08c      	b.n	8004e1a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2229      	movs	r2, #41	@ 0x29
 8004d04:	5c9b      	ldrb	r3, [r3, r2]
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10b      	bne.n	8004d24 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2228      	movs	r2, #40	@ 0x28
 8004d10:	2100      	movs	r1, #0
 8004d12:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2288      	movs	r2, #136	@ 0x88
 8004d18:	0212      	lsls	r2, r2, #8
 8004d1a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	0018      	movs	r0, r3
 8004d20:	f7fd fca2 	bl	8002668 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2229      	movs	r2, #41	@ 0x29
 8004d28:	2102      	movs	r1, #2
 8004d2a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	2210      	movs	r2, #16
 8004d34:	4013      	ands	r3, r2
 8004d36:	2b10      	cmp	r3, #16
 8004d38:	d062      	beq.n	8004e00 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	22ca      	movs	r2, #202	@ 0xca
 8004d40:	625a      	str	r2, [r3, #36]	@ 0x24
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2253      	movs	r2, #83	@ 0x53
 8004d48:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004d4a:	250f      	movs	r5, #15
 8004d4c:	197c      	adds	r4, r7, r5
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	0018      	movs	r0, r3
 8004d52:	f000 fc0f 	bl	8005574 <RTC_EnterInitMode>
 8004d56:	0003      	movs	r3, r0
 8004d58:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8004d5a:	0028      	movs	r0, r5
 8004d5c:	183b      	adds	r3, r7, r0
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d12c      	bne.n	8004dbe <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699a      	ldr	r2, [r3, #24]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	492e      	ldr	r1, [pc, #184]	@ (8004e28 <HAL_RTC_Init+0x140>)
 8004d70:	400a      	ands	r2, r1
 8004d72:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6999      	ldr	r1, [r3, #24]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6912      	ldr	r2, [r2, #16]
 8004d9a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6919      	ldr	r1, [r3, #16]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	041a      	lsls	r2, r3, #16
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004db0:	183c      	adds	r4, r7, r0
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	0018      	movs	r0, r3
 8004db6:	f000 fc1f 	bl	80055f8 <RTC_ExitInitMode>
 8004dba:	0003      	movs	r3, r0
 8004dbc:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8004dbe:	230f      	movs	r3, #15
 8004dc0:	18fb      	adds	r3, r7, r3
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d116      	bne.n	8004df6 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	699a      	ldr	r2, [r3, #24]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	00d2      	lsls	r2, r2, #3
 8004dd4:	08d2      	lsrs	r2, r2, #3
 8004dd6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6999      	ldr	r1, [r3, #24]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	431a      	orrs	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	22ff      	movs	r2, #255	@ 0xff
 8004dfc:	625a      	str	r2, [r3, #36]	@ 0x24
 8004dfe:	e003      	b.n	8004e08 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004e00:	230f      	movs	r3, #15
 8004e02:	18fb      	adds	r3, r7, r3
 8004e04:	2200      	movs	r2, #0
 8004e06:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8004e08:	230f      	movs	r3, #15
 8004e0a:	18fb      	adds	r3, r7, r3
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d103      	bne.n	8004e1a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2229      	movs	r2, #41	@ 0x29
 8004e16:	2101      	movs	r1, #1
 8004e18:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8004e1a:	230f      	movs	r3, #15
 8004e1c:	18fb      	adds	r3, r7, r3
 8004e1e:	781b      	ldrb	r3, [r3, #0]
}
 8004e20:	0018      	movs	r0, r3
 8004e22:	46bd      	mov	sp, r7
 8004e24:	b004      	add	sp, #16
 8004e26:	bdb0      	pop	{r4, r5, r7, pc}
 8004e28:	fb8fffbf 	.word	0xfb8fffbf

08004e2c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e2c:	b5b0      	push	{r4, r5, r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2228      	movs	r2, #40	@ 0x28
 8004e3c:	5c9b      	ldrb	r3, [r3, r2]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d101      	bne.n	8004e46 <HAL_RTC_SetTime+0x1a>
 8004e42:	2302      	movs	r3, #2
 8004e44:	e092      	b.n	8004f6c <HAL_RTC_SetTime+0x140>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2228      	movs	r2, #40	@ 0x28
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2229      	movs	r2, #41	@ 0x29
 8004e52:	2102      	movs	r1, #2
 8004e54:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	22ca      	movs	r2, #202	@ 0xca
 8004e5c:	625a      	str	r2, [r3, #36]	@ 0x24
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2253      	movs	r2, #83	@ 0x53
 8004e64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004e66:	2513      	movs	r5, #19
 8004e68:	197c      	adds	r4, r7, r5
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f000 fb81 	bl	8005574 <RTC_EnterInitMode>
 8004e72:	0003      	movs	r3, r0
 8004e74:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8004e76:	197b      	adds	r3, r7, r5
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d162      	bne.n	8004f44 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d125      	bne.n	8004ed0 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	2240      	movs	r2, #64	@ 0x40
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	d102      	bne.n	8004e96 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2200      	movs	r2, #0
 8004e94:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	f000 fbf0 	bl	8005680 <RTC_ByteToBcd2>
 8004ea0:	0003      	movs	r3, r0
 8004ea2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	785b      	ldrb	r3, [r3, #1]
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	f000 fbe9 	bl	8005680 <RTC_ByteToBcd2>
 8004eae:	0003      	movs	r3, r0
 8004eb0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004eb2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	789b      	ldrb	r3, [r3, #2]
 8004eb8:	0018      	movs	r0, r3
 8004eba:	f000 fbe1 	bl	8005680 <RTC_ByteToBcd2>
 8004ebe:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ec0:	0022      	movs	r2, r4
 8004ec2:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	78db      	ldrb	r3, [r3, #3]
 8004ec8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	e017      	b.n	8004f00 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	2240      	movs	r2, #64	@ 0x40
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d102      	bne.n	8004ee2 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	785b      	ldrb	r3, [r3, #1]
 8004eec:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004eee:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ef4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	78db      	ldrb	r3, [r3, #3]
 8004efa:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004efc:	4313      	orrs	r3, r2
 8004efe:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	491b      	ldr	r1, [pc, #108]	@ (8004f74 <HAL_RTC_SetTime+0x148>)
 8004f08:	400a      	ands	r2, r1
 8004f0a:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699a      	ldr	r2, [r3, #24]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4918      	ldr	r1, [pc, #96]	@ (8004f78 <HAL_RTC_SetTime+0x14c>)
 8004f18:	400a      	ands	r2, r1
 8004f1a:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6999      	ldr	r1, [r3, #24]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004f34:	2313      	movs	r3, #19
 8004f36:	18fc      	adds	r4, r7, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	f000 fb5c 	bl	80055f8 <RTC_ExitInitMode>
 8004f40:	0003      	movs	r3, r0
 8004f42:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	22ff      	movs	r2, #255	@ 0xff
 8004f4a:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8004f4c:	2313      	movs	r3, #19
 8004f4e:	18fb      	adds	r3, r7, r3
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d103      	bne.n	8004f5e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2229      	movs	r2, #41	@ 0x29
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2228      	movs	r2, #40	@ 0x28
 8004f62:	2100      	movs	r1, #0
 8004f64:	5499      	strb	r1, [r3, r2]

  return status;
 8004f66:	2313      	movs	r3, #19
 8004f68:	18fb      	adds	r3, r7, r3
 8004f6a:	781b      	ldrb	r3, [r3, #0]
}
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	b006      	add	sp, #24
 8004f72:	bdb0      	pop	{r4, r5, r7, pc}
 8004f74:	007f7f7f 	.word	0x007f7f7f
 8004f78:	fffbffff 	.word	0xfffbffff

08004f7c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f7c:	b5b0      	push	{r4, r5, r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2228      	movs	r2, #40	@ 0x28
 8004f8c:	5c9b      	ldrb	r3, [r3, r2]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d101      	bne.n	8004f96 <HAL_RTC_SetDate+0x1a>
 8004f92:	2302      	movs	r3, #2
 8004f94:	e07e      	b.n	8005094 <HAL_RTC_SetDate+0x118>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2228      	movs	r2, #40	@ 0x28
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2229      	movs	r2, #41	@ 0x29
 8004fa2:	2102      	movs	r1, #2
 8004fa4:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10e      	bne.n	8004fca <HAL_RTC_SetDate+0x4e>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	785b      	ldrb	r3, [r3, #1]
 8004fb0:	001a      	movs	r2, r3
 8004fb2:	2310      	movs	r3, #16
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	d008      	beq.n	8004fca <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	785b      	ldrb	r3, [r3, #1]
 8004fbc:	2210      	movs	r2, #16
 8004fbe:	4393      	bics	r3, r2
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	330a      	adds	r3, #10
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d11c      	bne.n	800500a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	78db      	ldrb	r3, [r3, #3]
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f000 fb53 	bl	8005680 <RTC_ByteToBcd2>
 8004fda:	0003      	movs	r3, r0
 8004fdc:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	785b      	ldrb	r3, [r3, #1]
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	f000 fb4c 	bl	8005680 <RTC_ByteToBcd2>
 8004fe8:	0003      	movs	r3, r0
 8004fea:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004fec:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	789b      	ldrb	r3, [r3, #2]
 8004ff2:	0018      	movs	r0, r3
 8004ff4:	f000 fb44 	bl	8005680 <RTC_ByteToBcd2>
 8004ff8:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004ffa:	0022      	movs	r2, r4
 8004ffc:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	e00e      	b.n	8005028 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	78db      	ldrb	r3, [r3, #3]
 800500e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	785b      	ldrb	r3, [r3, #1]
 8005014:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005016:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800501c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005024:	4313      	orrs	r3, r2
 8005026:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	22ca      	movs	r2, #202	@ 0xca
 800502e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2253      	movs	r2, #83	@ 0x53
 8005036:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005038:	2513      	movs	r5, #19
 800503a:	197c      	adds	r4, r7, r5
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	0018      	movs	r0, r3
 8005040:	f000 fa98 	bl	8005574 <RTC_EnterInitMode>
 8005044:	0003      	movs	r3, r0
 8005046:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005048:	0028      	movs	r0, r5
 800504a:	183b      	adds	r3, r7, r0
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10c      	bne.n	800506c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4910      	ldr	r1, [pc, #64]	@ (800509c <HAL_RTC_SetDate+0x120>)
 800505a:	400a      	ands	r2, r1
 800505c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800505e:	183c      	adds	r4, r7, r0
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	0018      	movs	r0, r3
 8005064:	f000 fac8 	bl	80055f8 <RTC_ExitInitMode>
 8005068:	0003      	movs	r3, r0
 800506a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	22ff      	movs	r2, #255	@ 0xff
 8005072:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005074:	2313      	movs	r3, #19
 8005076:	18fb      	adds	r3, r7, r3
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d103      	bne.n	8005086 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2229      	movs	r2, #41	@ 0x29
 8005082:	2101      	movs	r1, #1
 8005084:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2228      	movs	r2, #40	@ 0x28
 800508a:	2100      	movs	r1, #0
 800508c:	5499      	strb	r1, [r3, r2]

  return status;
 800508e:	2313      	movs	r3, #19
 8005090:	18fb      	adds	r3, r7, r3
 8005092:	781b      	ldrb	r3, [r3, #0]
}
 8005094:	0018      	movs	r0, r3
 8005096:	46bd      	mov	sp, r7
 8005098:	b006      	add	sp, #24
 800509a:	bdb0      	pop	{r4, r5, r7, pc}
 800509c:	00ffff3f 	.word	0x00ffff3f

080050a0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80050a0:	b590      	push	{r4, r7, lr}
 80050a2:	b089      	sub	sp, #36	@ 0x24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2228      	movs	r2, #40	@ 0x28
 80050b0:	5c9b      	ldrb	r3, [r3, r2]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <HAL_RTC_SetAlarm_IT+0x1a>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e127      	b.n	800530a <HAL_RTC_SetAlarm_IT+0x26a>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2228      	movs	r2, #40	@ 0x28
 80050be:	2101      	movs	r1, #1
 80050c0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2229      	movs	r2, #41	@ 0x29
 80050c6:	2102      	movs	r1, #2
 80050c8:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d136      	bne.n	800513e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	2240      	movs	r2, #64	@ 0x40
 80050d8:	4013      	ands	r3, r2
 80050da:	d102      	bne.n	80050e2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2200      	movs	r2, #0
 80050e0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	0018      	movs	r0, r3
 80050e8:	f000 faca 	bl	8005680 <RTC_ByteToBcd2>
 80050ec:	0003      	movs	r3, r0
 80050ee:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	785b      	ldrb	r3, [r3, #1]
 80050f4:	0018      	movs	r0, r3
 80050f6:	f000 fac3 	bl	8005680 <RTC_ByteToBcd2>
 80050fa:	0003      	movs	r3, r0
 80050fc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80050fe:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	789b      	ldrb	r3, [r3, #2]
 8005104:	0018      	movs	r0, r3
 8005106:	f000 fabb 	bl	8005680 <RTC_ByteToBcd2>
 800510a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800510c:	0022      	movs	r2, r4
 800510e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	78db      	ldrb	r3, [r3, #3]
 8005114:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005116:	431a      	orrs	r2, r3
 8005118:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2220      	movs	r2, #32
 800511e:	5c9b      	ldrb	r3, [r3, r2]
 8005120:	0018      	movs	r0, r3
 8005122:	f000 faad 	bl	8005680 <RTC_ByteToBcd2>
 8005126:	0003      	movs	r3, r0
 8005128:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800512a:	0022      	movs	r2, r4
 800512c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005132:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005138:	4313      	orrs	r3, r2
 800513a:	61fb      	str	r3, [r7, #28]
 800513c:	e022      	b.n	8005184 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	2240      	movs	r2, #64	@ 0x40
 8005146:	4013      	ands	r3, r2
 8005148:	d102      	bne.n	8005150 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2200      	movs	r2, #0
 800514e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	785b      	ldrb	r3, [r3, #1]
 800515a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800515c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005162:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	78db      	ldrb	r3, [r3, #3]
 8005168:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800516a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2120      	movs	r1, #32
 8005170:	5c5b      	ldrb	r3, [r3, r1]
 8005172:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005174:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800517a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005180:	4313      	orrs	r3, r2
 8005182:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	4313      	orrs	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	22ca      	movs	r2, #202	@ 0xca
 8005196:	625a      	str	r2, [r3, #36]	@ 0x24
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2253      	movs	r2, #83	@ 0x53
 800519e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051a4:	2380      	movs	r3, #128	@ 0x80
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d14c      	bne.n	8005246 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699a      	ldr	r2, [r3, #24]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4957      	ldr	r1, [pc, #348]	@ (8005314 <HAL_RTC_SetAlarm_IT+0x274>)
 80051b8:	400a      	ands	r2, r1
 80051ba:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2101      	movs	r1, #1
 80051c8:	430a      	orrs	r2, r1
 80051ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 80051cc:	f7fd fcee 	bl	8002bac <HAL_GetTick>
 80051d0:	0003      	movs	r3, r0
 80051d2:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80051d4:	e016      	b.n	8005204 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80051d6:	f7fd fce9 	bl	8002bac <HAL_GetTick>
 80051da:	0002      	movs	r2, r0
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	1ad2      	subs	r2, r2, r3
 80051e0:	23fa      	movs	r3, #250	@ 0xfa
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d90d      	bls.n	8005204 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	22ff      	movs	r2, #255	@ 0xff
 80051ee:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2229      	movs	r2, #41	@ 0x29
 80051f4:	2103      	movs	r1, #3
 80051f6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2228      	movs	r2, #40	@ 0x28
 80051fc:	2100      	movs	r1, #0
 80051fe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e082      	b.n	800530a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	2201      	movs	r2, #1
 800520c:	4013      	ands	r3, r2
 800520e:	d0e2      	beq.n	80051d6 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	69fa      	ldr	r2, [r7, #28]
 8005216:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699a      	ldr	r2, [r3, #24]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2180      	movs	r1, #128	@ 0x80
 800522c:	0049      	lsls	r1, r1, #1
 800522e:	430a      	orrs	r2, r1
 8005230:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	699a      	ldr	r2, [r3, #24]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2180      	movs	r1, #128	@ 0x80
 800523e:	0149      	lsls	r1, r1, #5
 8005240:	430a      	orrs	r2, r1
 8005242:	619a      	str	r2, [r3, #24]
 8005244:	e04b      	b.n	80052de <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	699a      	ldr	r2, [r3, #24]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4931      	ldr	r1, [pc, #196]	@ (8005318 <HAL_RTC_SetAlarm_IT+0x278>)
 8005252:	400a      	ands	r2, r1
 8005254:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2102      	movs	r1, #2
 8005262:	430a      	orrs	r2, r1
 8005264:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8005266:	f7fd fca1 	bl	8002bac <HAL_GetTick>
 800526a:	0003      	movs	r3, r0
 800526c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800526e:	e016      	b.n	800529e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005270:	f7fd fc9c 	bl	8002bac <HAL_GetTick>
 8005274:	0002      	movs	r2, r0
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	1ad2      	subs	r2, r2, r3
 800527a:	23fa      	movs	r3, #250	@ 0xfa
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	429a      	cmp	r2, r3
 8005280:	d90d      	bls.n	800529e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	22ff      	movs	r2, #255	@ 0xff
 8005288:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2229      	movs	r2, #41	@ 0x29
 800528e:	2103      	movs	r1, #3
 8005290:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2228      	movs	r2, #40	@ 0x28
 8005296:	2100      	movs	r1, #0
 8005298:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e035      	b.n	800530a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	2202      	movs	r2, #2
 80052a6:	4013      	ands	r3, r2
 80052a8:	d0e2      	beq.n	8005270 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69fa      	ldr	r2, [r7, #28]
 80052b0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	699a      	ldr	r2, [r3, #24]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2180      	movs	r1, #128	@ 0x80
 80052c6:	0089      	lsls	r1, r1, #2
 80052c8:	430a      	orrs	r2, r1
 80052ca:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	699a      	ldr	r2, [r3, #24]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2180      	movs	r1, #128	@ 0x80
 80052d8:	0189      	lsls	r1, r1, #6
 80052da:	430a      	orrs	r2, r1
 80052dc:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80052de:	4a0f      	ldr	r2, [pc, #60]	@ (800531c <HAL_RTC_SetAlarm_IT+0x27c>)
 80052e0:	2380      	movs	r3, #128	@ 0x80
 80052e2:	58d3      	ldr	r3, [r2, r3]
 80052e4:	490d      	ldr	r1, [pc, #52]	@ (800531c <HAL_RTC_SetAlarm_IT+0x27c>)
 80052e6:	2280      	movs	r2, #128	@ 0x80
 80052e8:	0312      	lsls	r2, r2, #12
 80052ea:	4313      	orrs	r3, r2
 80052ec:	2280      	movs	r2, #128	@ 0x80
 80052ee:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	22ff      	movs	r2, #255	@ 0xff
 80052f6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2229      	movs	r2, #41	@ 0x29
 80052fc:	2101      	movs	r1, #1
 80052fe:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2228      	movs	r2, #40	@ 0x28
 8005304:	2100      	movs	r1, #0
 8005306:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	0018      	movs	r0, r3
 800530c:	46bd      	mov	sp, r7
 800530e:	b009      	add	sp, #36	@ 0x24
 8005310:	bd90      	pop	{r4, r7, pc}
 8005312:	46c0      	nop			@ (mov r8, r8)
 8005314:	fffffeff 	.word	0xfffffeff
 8005318:	fffffdff 	.word	0xfffffdff
 800531c:	40021800 	.word	0x40021800

08005320 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	2380      	movs	r3, #128	@ 0x80
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	429a      	cmp	r2, r3
 8005336:	d144      	bne.n	80053c2 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2280      	movs	r2, #128	@ 0x80
 800533c:	0052      	lsls	r2, r2, #1
 800533e:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005346:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800534e:	045b      	lsls	r3, r3, #17
 8005350:	0c5b      	lsrs	r3, r3, #17
 8005352:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	0c1b      	lsrs	r3, r3, #16
 8005358:	b2db      	uxtb	r3, r3
 800535a:	223f      	movs	r2, #63	@ 0x3f
 800535c:	4013      	ands	r3, r2
 800535e:	b2da      	uxtb	r2, r3
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	0a1b      	lsrs	r3, r3, #8
 8005368:	b2db      	uxtb	r3, r3
 800536a:	227f      	movs	r2, #127	@ 0x7f
 800536c:	4013      	ands	r3, r2
 800536e:	b2da      	uxtb	r2, r3
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	227f      	movs	r2, #127	@ 0x7f
 800537a:	4013      	ands	r3, r2
 800537c:	b2da      	uxtb	r2, r3
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	0d9b      	lsrs	r3, r3, #22
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2201      	movs	r2, #1
 800538a:	4013      	ands	r3, r2
 800538c:	b2da      	uxtb	r2, r3
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	0e1b      	lsrs	r3, r3, #24
 800539c:	b2db      	uxtb	r3, r3
 800539e:	223f      	movs	r2, #63	@ 0x3f
 80053a0:	4013      	ands	r3, r2
 80053a2:	b2d9      	uxtb	r1, r3
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2220      	movs	r2, #32
 80053a8:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	2380      	movs	r3, #128	@ 0x80
 80053ae:	05db      	lsls	r3, r3, #23
 80053b0:	401a      	ands	r2, r3
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	4a3b      	ldr	r2, [pc, #236]	@ (80054a8 <HAL_RTC_GetAlarm+0x188>)
 80053ba:	401a      	ands	r2, r3
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	615a      	str	r2, [r3, #20]
 80053c0:	e043      	b.n	800544a <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2280      	movs	r2, #128	@ 0x80
 80053c6:	0092      	lsls	r2, r2, #2
 80053c8:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053d0:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053d8:	045b      	lsls	r3, r3, #17
 80053da:	0c5b      	lsrs	r3, r3, #17
 80053dc:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	0c1b      	lsrs	r3, r3, #16
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	223f      	movs	r2, #63	@ 0x3f
 80053e6:	4013      	ands	r3, r2
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	0a1b      	lsrs	r3, r3, #8
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	227f      	movs	r2, #127	@ 0x7f
 80053f6:	4013      	ands	r3, r2
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	b2db      	uxtb	r3, r3
 8005402:	227f      	movs	r2, #127	@ 0x7f
 8005404:	4013      	ands	r3, r2
 8005406:	b2da      	uxtb	r2, r3
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	0d9b      	lsrs	r3, r3, #22
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2201      	movs	r2, #1
 8005414:	4013      	ands	r3, r2
 8005416:	b2da      	uxtb	r2, r3
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	0e1b      	lsrs	r3, r3, #24
 8005426:	b2db      	uxtb	r3, r3
 8005428:	223f      	movs	r2, #63	@ 0x3f
 800542a:	4013      	ands	r3, r2
 800542c:	b2d9      	uxtb	r1, r3
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2220      	movs	r2, #32
 8005432:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	2380      	movs	r3, #128	@ 0x80
 8005438:	05db      	lsls	r3, r3, #23
 800543a:	401a      	ands	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	4a19      	ldr	r2, [pc, #100]	@ (80054a8 <HAL_RTC_GetAlarm+0x188>)
 8005444:	401a      	ands	r2, r3
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d125      	bne.n	800549c <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	0018      	movs	r0, r3
 8005456:	f000 f93b 	bl	80056d0 <RTC_Bcd2ToByte>
 800545a:	0003      	movs	r3, r0
 800545c:	001a      	movs	r2, r3
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	785b      	ldrb	r3, [r3, #1]
 8005466:	0018      	movs	r0, r3
 8005468:	f000 f932 	bl	80056d0 <RTC_Bcd2ToByte>
 800546c:	0003      	movs	r3, r0
 800546e:	001a      	movs	r2, r3
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	789b      	ldrb	r3, [r3, #2]
 8005478:	0018      	movs	r0, r3
 800547a:	f000 f929 	bl	80056d0 <RTC_Bcd2ToByte>
 800547e:	0003      	movs	r3, r0
 8005480:	001a      	movs	r2, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2220      	movs	r2, #32
 800548a:	5c9b      	ldrb	r3, [r3, r2]
 800548c:	0018      	movs	r0, r3
 800548e:	f000 f91f 	bl	80056d0 <RTC_Bcd2ToByte>
 8005492:	0003      	movs	r3, r0
 8005494:	0019      	movs	r1, r3
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2220      	movs	r2, #32
 800549a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	0018      	movs	r0, r3
 80054a0:	46bd      	mov	sp, r7
 80054a2:	b006      	add	sp, #24
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	46c0      	nop			@ (mov r8, r8)
 80054a8:	80808080 	.word	0x80808080

080054ac <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699a      	ldr	r2, [r3, #24]
 80054ba:	2380      	movs	r3, #128	@ 0x80
 80054bc:	015b      	lsls	r3, r3, #5
 80054be:	4013      	ands	r3, r2
 80054c0:	d011      	beq.n	80054e6 <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054c8:	2201      	movs	r2, #1
 80054ca:	4013      	ands	r3, r2
 80054cc:	d00b      	beq.n	80054e6 <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2101      	movs	r1, #1
 80054da:	430a      	orrs	r2, r1
 80054dc:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	0018      	movs	r0, r3
 80054e2:	f7fc fff7 	bl	80024d4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	699a      	ldr	r2, [r3, #24]
 80054ec:	2380      	movs	r3, #128	@ 0x80
 80054ee:	019b      	lsls	r3, r3, #6
 80054f0:	4013      	ands	r3, r2
 80054f2:	d011      	beq.n	8005518 <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054fa:	2202      	movs	r2, #2
 80054fc:	4013      	ands	r3, r2
 80054fe:	d00b      	beq.n	8005518 <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2102      	movs	r1, #2
 800550c:	430a      	orrs	r2, r1
 800550e:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	0018      	movs	r0, r3
 8005514:	f000 f9ba 	bl	800588c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2229      	movs	r2, #41	@ 0x29
 800551c:	2101      	movs	r1, #1
 800551e:	5499      	strb	r1, [r3, r2]
}
 8005520:	46c0      	nop			@ (mov r8, r8)
 8005522:	46bd      	mov	sp, r7
 8005524:	b002      	add	sp, #8
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a0e      	ldr	r2, [pc, #56]	@ (8005570 <HAL_RTC_WaitForSynchro+0x48>)
 8005536:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005538:	f7fd fb38 	bl	8002bac <HAL_GetTick>
 800553c:	0003      	movs	r3, r0
 800553e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005540:	e00a      	b.n	8005558 <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005542:	f7fd fb33 	bl	8002bac <HAL_GetTick>
 8005546:	0002      	movs	r2, r0
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	1ad2      	subs	r2, r2, r3
 800554c:	23fa      	movs	r3, #250	@ 0xfa
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	429a      	cmp	r2, r3
 8005552:	d901      	bls.n	8005558 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e006      	b.n	8005566 <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	2220      	movs	r2, #32
 8005560:	4013      	ands	r3, r2
 8005562:	d0ee      	beq.n	8005542 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	0018      	movs	r0, r3
 8005568:	46bd      	mov	sp, r7
 800556a:	b004      	add	sp, #16
 800556c:	bd80      	pop	{r7, pc}
 800556e:	46c0      	nop			@ (mov r8, r8)
 8005570:	0001005f 	.word	0x0001005f

08005574 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800557c:	230f      	movs	r3, #15
 800557e:	18fb      	adds	r3, r7, r3
 8005580:	2200      	movs	r2, #0
 8005582:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	2240      	movs	r2, #64	@ 0x40
 800558c:	4013      	ands	r3, r2
 800558e:	d12c      	bne.n	80055ea <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2180      	movs	r1, #128	@ 0x80
 800559c:	430a      	orrs	r2, r1
 800559e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80055a0:	f7fd fb04 	bl	8002bac <HAL_GetTick>
 80055a4:	0003      	movs	r3, r0
 80055a6:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80055a8:	e014      	b.n	80055d4 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80055aa:	f7fd faff 	bl	8002bac <HAL_GetTick>
 80055ae:	0002      	movs	r2, r0
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	1ad2      	subs	r2, r2, r3
 80055b4:	200f      	movs	r0, #15
 80055b6:	183b      	adds	r3, r7, r0
 80055b8:	1839      	adds	r1, r7, r0
 80055ba:	7809      	ldrb	r1, [r1, #0]
 80055bc:	7019      	strb	r1, [r3, #0]
 80055be:	23fa      	movs	r3, #250	@ 0xfa
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d906      	bls.n	80055d4 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80055c6:	183b      	adds	r3, r7, r0
 80055c8:	2203      	movs	r2, #3
 80055ca:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2229      	movs	r2, #41	@ 0x29
 80055d0:	2103      	movs	r1, #3
 80055d2:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	2240      	movs	r2, #64	@ 0x40
 80055dc:	4013      	ands	r3, r2
 80055de:	d104      	bne.n	80055ea <RTC_EnterInitMode+0x76>
 80055e0:	230f      	movs	r3, #15
 80055e2:	18fb      	adds	r3, r7, r3
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	d1df      	bne.n	80055aa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80055ea:	230f      	movs	r3, #15
 80055ec:	18fb      	adds	r3, r7, r3
 80055ee:	781b      	ldrb	r3, [r3, #0]
}
 80055f0:	0018      	movs	r0, r3
 80055f2:	46bd      	mov	sp, r7
 80055f4:	b004      	add	sp, #16
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80055f8:	b590      	push	{r4, r7, lr}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005600:	240f      	movs	r4, #15
 8005602:	193b      	adds	r3, r7, r4
 8005604:	2200      	movs	r2, #0
 8005606:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005608:	4b1c      	ldr	r3, [pc, #112]	@ (800567c <RTC_ExitInitMode+0x84>)
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	4b1b      	ldr	r3, [pc, #108]	@ (800567c <RTC_ExitInitMode+0x84>)
 800560e:	2180      	movs	r1, #128	@ 0x80
 8005610:	438a      	bics	r2, r1
 8005612:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005614:	4b19      	ldr	r3, [pc, #100]	@ (800567c <RTC_ExitInitMode+0x84>)
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	2220      	movs	r2, #32
 800561a:	4013      	ands	r3, r2
 800561c:	d10d      	bne.n	800563a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	0018      	movs	r0, r3
 8005622:	f7ff ff81 	bl	8005528 <HAL_RTC_WaitForSynchro>
 8005626:	1e03      	subs	r3, r0, #0
 8005628:	d021      	beq.n	800566e <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2229      	movs	r2, #41	@ 0x29
 800562e:	2103      	movs	r1, #3
 8005630:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8005632:	193b      	adds	r3, r7, r4
 8005634:	2203      	movs	r2, #3
 8005636:	701a      	strb	r2, [r3, #0]
 8005638:	e019      	b.n	800566e <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800563a:	4b10      	ldr	r3, [pc, #64]	@ (800567c <RTC_ExitInitMode+0x84>)
 800563c:	699a      	ldr	r2, [r3, #24]
 800563e:	4b0f      	ldr	r3, [pc, #60]	@ (800567c <RTC_ExitInitMode+0x84>)
 8005640:	2120      	movs	r1, #32
 8005642:	438a      	bics	r2, r1
 8005644:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	0018      	movs	r0, r3
 800564a:	f7ff ff6d 	bl	8005528 <HAL_RTC_WaitForSynchro>
 800564e:	1e03      	subs	r3, r0, #0
 8005650:	d007      	beq.n	8005662 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2229      	movs	r2, #41	@ 0x29
 8005656:	2103      	movs	r1, #3
 8005658:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800565a:	230f      	movs	r3, #15
 800565c:	18fb      	adds	r3, r7, r3
 800565e:	2203      	movs	r2, #3
 8005660:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005662:	4b06      	ldr	r3, [pc, #24]	@ (800567c <RTC_ExitInitMode+0x84>)
 8005664:	699a      	ldr	r2, [r3, #24]
 8005666:	4b05      	ldr	r3, [pc, #20]	@ (800567c <RTC_ExitInitMode+0x84>)
 8005668:	2120      	movs	r1, #32
 800566a:	430a      	orrs	r2, r1
 800566c:	619a      	str	r2, [r3, #24]
  }

  return status;
 800566e:	230f      	movs	r3, #15
 8005670:	18fb      	adds	r3, r7, r3
 8005672:	781b      	ldrb	r3, [r3, #0]
}
 8005674:	0018      	movs	r0, r3
 8005676:	46bd      	mov	sp, r7
 8005678:	b005      	add	sp, #20
 800567a:	bd90      	pop	{r4, r7, pc}
 800567c:	40002800 	.word	0x40002800

08005680 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	0002      	movs	r2, r0
 8005688:	1dfb      	adds	r3, r7, #7
 800568a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005690:	230b      	movs	r3, #11
 8005692:	18fb      	adds	r3, r7, r3
 8005694:	1dfa      	adds	r2, r7, #7
 8005696:	7812      	ldrb	r2, [r2, #0]
 8005698:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800569a:	e008      	b.n	80056ae <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	3301      	adds	r3, #1
 80056a0:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80056a2:	220b      	movs	r2, #11
 80056a4:	18bb      	adds	r3, r7, r2
 80056a6:	18ba      	adds	r2, r7, r2
 80056a8:	7812      	ldrb	r2, [r2, #0]
 80056aa:	3a0a      	subs	r2, #10
 80056ac:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80056ae:	210b      	movs	r1, #11
 80056b0:	187b      	adds	r3, r7, r1
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b09      	cmp	r3, #9
 80056b6:	d8f1      	bhi.n	800569c <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	187b      	adds	r3, r7, r1
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	b2db      	uxtb	r3, r3
}
 80056c8:	0018      	movs	r0, r3
 80056ca:	46bd      	mov	sp, r7
 80056cc:	b004      	add	sp, #16
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	0002      	movs	r2, r0
 80056d8:	1dfb      	adds	r3, r7, #7
 80056da:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80056dc:	1dfb      	adds	r3, r7, #7
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	091b      	lsrs	r3, r3, #4
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	001a      	movs	r2, r3
 80056e6:	0013      	movs	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	189b      	adds	r3, r3, r2
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	1dfb      	adds	r3, r7, #7
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	210f      	movs	r1, #15
 80056fa:	400b      	ands	r3, r1
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	18d3      	adds	r3, r2, r3
 8005700:	b2db      	uxtb	r3, r3
}
 8005702:	0018      	movs	r0, r3
 8005704:	46bd      	mov	sp, r7
 8005706:	b004      	add	sp, #16
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2228      	movs	r2, #40	@ 0x28
 800571c:	5c9b      	ldrb	r3, [r3, r2]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d101      	bne.n	8005726 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005722:	2302      	movs	r3, #2
 8005724:	e082      	b.n	800582c <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2228      	movs	r2, #40	@ 0x28
 800572a:	2101      	movs	r1, #1
 800572c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2229      	movs	r2, #41	@ 0x29
 8005732:	2102      	movs	r1, #2
 8005734:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	22ca      	movs	r2, #202	@ 0xca
 800573c:	625a      	str	r2, [r3, #36]	@ 0x24
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2253      	movs	r2, #83	@ 0x53
 8005744:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	699a      	ldr	r2, [r3, #24]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4938      	ldr	r1, [pc, #224]	@ (8005834 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 8005752:	400a      	ands	r2, r1
 8005754:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2104      	movs	r1, #4
 8005762:	430a      	orrs	r2, r1
 8005764:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005766:	4b34      	ldr	r3, [pc, #208]	@ (8005838 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	2240      	movs	r2, #64	@ 0x40
 800576c:	4013      	ands	r3, r2
 800576e:	d121      	bne.n	80057b4 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 8005770:	f7fd fa1c 	bl	8002bac <HAL_GetTick>
 8005774:	0003      	movs	r3, r0
 8005776:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005778:	e016      	b.n	80057a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800577a:	f7fd fa17 	bl	8002bac <HAL_GetTick>
 800577e:	0002      	movs	r2, r0
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	1ad2      	subs	r2, r2, r3
 8005784:	23fa      	movs	r3, #250	@ 0xfa
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	429a      	cmp	r2, r3
 800578a:	d90d      	bls.n	80057a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	22ff      	movs	r2, #255	@ 0xff
 8005792:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2229      	movs	r2, #41	@ 0x29
 8005798:	2103      	movs	r1, #3
 800579a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2228      	movs	r2, #40	@ 0x28
 80057a0:	2100      	movs	r1, #0
 80057a2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e041      	b.n	800582c <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	2204      	movs	r2, #4
 80057b0:	4013      	ands	r3, r2
 80057b2:	d0e2      	beq.n	800577a <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699a      	ldr	r2, [r3, #24]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2107      	movs	r1, #7
 80057c8:	438a      	bics	r2, r1
 80057ca:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6999      	ldr	r1, [r3, #24]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	430a      	orrs	r2, r1
 80057da:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80057dc:	4a17      	ldr	r2, [pc, #92]	@ (800583c <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 80057de:	2380      	movs	r3, #128	@ 0x80
 80057e0:	58d3      	ldr	r3, [r2, r3]
 80057e2:	4916      	ldr	r1, [pc, #88]	@ (800583c <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 80057e4:	2280      	movs	r2, #128	@ 0x80
 80057e6:	0312      	lsls	r2, r2, #12
 80057e8:	4313      	orrs	r3, r2
 80057ea:	2280      	movs	r2, #128	@ 0x80
 80057ec:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	699a      	ldr	r2, [r3, #24]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2180      	movs	r1, #128	@ 0x80
 80057fa:	01c9      	lsls	r1, r1, #7
 80057fc:	430a      	orrs	r2, r1
 80057fe:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	699a      	ldr	r2, [r3, #24]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2180      	movs	r1, #128	@ 0x80
 800580c:	00c9      	lsls	r1, r1, #3
 800580e:	430a      	orrs	r2, r1
 8005810:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	22ff      	movs	r2, #255	@ 0xff
 8005818:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2229      	movs	r2, #41	@ 0x29
 800581e:	2101      	movs	r1, #1
 8005820:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2228      	movs	r2, #40	@ 0x28
 8005826:	2100      	movs	r1, #0
 8005828:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	0018      	movs	r0, r3
 800582e:	46bd      	mov	sp, r7
 8005830:	b006      	add	sp, #24
 8005832:	bd80      	pop	{r7, pc}
 8005834:	fffffbff 	.word	0xfffffbff
 8005838:	40002800 	.word	0x40002800
 800583c:	40021800 	.word	0x40021800

08005840 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800584e:	2204      	movs	r2, #4
 8005850:	4013      	ands	r3, r2
 8005852:	d00b      	beq.n	800586c <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2104      	movs	r1, #4
 8005860:	430a      	orrs	r2, r1
 8005862:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	0018      	movs	r0, r3
 8005868:	f000 f808 	bl	800587c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2229      	movs	r2, #41	@ 0x29
 8005870:	2101      	movs	r1, #1
 8005872:	5499      	strb	r1, [r3, r2]
}
 8005874:	46c0      	nop			@ (mov r8, r8)
 8005876:	46bd      	mov	sp, r7
 8005878:	b002      	add	sp, #8
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8005884:	46c0      	nop			@ (mov r8, r8)
 8005886:	46bd      	mov	sp, r7
 8005888:	b002      	add	sp, #8
 800588a:	bd80      	pop	{r7, pc}

0800588c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005894:	46c0      	nop			@ (mov r8, r8)
 8005896:	46bd      	mov	sp, r7
 8005898:	b002      	add	sp, #8
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e0a8      	b.n	8005a00 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	2382      	movs	r3, #130	@ 0x82
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	429a      	cmp	r2, r3
 80058c0:	d009      	beq.n	80058d6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	61da      	str	r2, [r3, #28]
 80058c8:	e005      	b.n	80058d6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	225d      	movs	r2, #93	@ 0x5d
 80058e0:	5c9b      	ldrb	r3, [r3, r2]
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d107      	bne.n	80058f8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	225c      	movs	r2, #92	@ 0x5c
 80058ec:	2100      	movs	r1, #0
 80058ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	0018      	movs	r0, r3
 80058f4:	f7fc fefe 	bl	80026f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	225d      	movs	r2, #93	@ 0x5d
 80058fc:	2102      	movs	r1, #2
 80058fe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2140      	movs	r1, #64	@ 0x40
 800590c:	438a      	bics	r2, r1
 800590e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	23e0      	movs	r3, #224	@ 0xe0
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	429a      	cmp	r2, r3
 800591a:	d902      	bls.n	8005922 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800591c:	2300      	movs	r3, #0
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	e002      	b.n	8005928 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005922:	2380      	movs	r3, #128	@ 0x80
 8005924:	015b      	lsls	r3, r3, #5
 8005926:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	23f0      	movs	r3, #240	@ 0xf0
 800592e:	011b      	lsls	r3, r3, #4
 8005930:	429a      	cmp	r2, r3
 8005932:	d008      	beq.n	8005946 <HAL_SPI_Init+0xaa>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68da      	ldr	r2, [r3, #12]
 8005938:	23e0      	movs	r3, #224	@ 0xe0
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	429a      	cmp	r2, r3
 800593e:	d002      	beq.n	8005946 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	2382      	movs	r3, #130	@ 0x82
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	401a      	ands	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6899      	ldr	r1, [r3, #8]
 8005954:	2384      	movs	r3, #132	@ 0x84
 8005956:	021b      	lsls	r3, r3, #8
 8005958:	400b      	ands	r3, r1
 800595a:	431a      	orrs	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	2102      	movs	r1, #2
 8005962:	400b      	ands	r3, r1
 8005964:	431a      	orrs	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	2101      	movs	r1, #1
 800596c:	400b      	ands	r3, r1
 800596e:	431a      	orrs	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6999      	ldr	r1, [r3, #24]
 8005974:	2380      	movs	r3, #128	@ 0x80
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	400b      	ands	r3, r1
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	2138      	movs	r1, #56	@ 0x38
 8005982:	400b      	ands	r3, r1
 8005984:	431a      	orrs	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	2180      	movs	r1, #128	@ 0x80
 800598c:	400b      	ands	r3, r1
 800598e:	431a      	orrs	r2, r3
 8005990:	0011      	movs	r1, r2
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005996:	2380      	movs	r3, #128	@ 0x80
 8005998:	019b      	lsls	r3, r3, #6
 800599a:	401a      	ands	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	0c1b      	lsrs	r3, r3, #16
 80059aa:	2204      	movs	r2, #4
 80059ac:	401a      	ands	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b2:	2110      	movs	r1, #16
 80059b4:	400b      	ands	r3, r1
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059bc:	2108      	movs	r1, #8
 80059be:	400b      	ands	r3, r1
 80059c0:	431a      	orrs	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68d9      	ldr	r1, [r3, #12]
 80059c6:	23f0      	movs	r3, #240	@ 0xf0
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	400b      	ands	r3, r1
 80059cc:	431a      	orrs	r2, r3
 80059ce:	0011      	movs	r1, r2
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	2380      	movs	r3, #128	@ 0x80
 80059d4:	015b      	lsls	r3, r3, #5
 80059d6:	401a      	ands	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	69da      	ldr	r2, [r3, #28]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4907      	ldr	r1, [pc, #28]	@ (8005a08 <HAL_SPI_Init+0x16c>)
 80059ec:	400a      	ands	r2, r1
 80059ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	225d      	movs	r2, #93	@ 0x5d
 80059fa:	2101      	movs	r1, #1
 80059fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	0018      	movs	r0, r3
 8005a02:	46bd      	mov	sp, r7
 8005a04:	b004      	add	sp, #16
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	fffff7ff 	.word	0xfffff7ff

08005a0c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b088      	sub	sp, #32
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	1dbb      	adds	r3, r7, #6
 8005a1a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a1c:	231f      	movs	r3, #31
 8005a1e:	18fb      	adds	r3, r7, r3
 8005a20:	2200      	movs	r2, #0
 8005a22:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	225c      	movs	r2, #92	@ 0x5c
 8005a28:	5c9b      	ldrb	r3, [r3, r2]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d101      	bne.n	8005a32 <HAL_SPI_Transmit+0x26>
 8005a2e:	2302      	movs	r3, #2
 8005a30:	e147      	b.n	8005cc2 <HAL_SPI_Transmit+0x2b6>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	225c      	movs	r2, #92	@ 0x5c
 8005a36:	2101      	movs	r1, #1
 8005a38:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a3a:	f7fd f8b7 	bl	8002bac <HAL_GetTick>
 8005a3e:	0003      	movs	r3, r0
 8005a40:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005a42:	2316      	movs	r3, #22
 8005a44:	18fb      	adds	r3, r7, r3
 8005a46:	1dba      	adds	r2, r7, #6
 8005a48:	8812      	ldrh	r2, [r2, #0]
 8005a4a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	225d      	movs	r2, #93	@ 0x5d
 8005a50:	5c9b      	ldrb	r3, [r3, r2]
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d004      	beq.n	8005a62 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005a58:	231f      	movs	r3, #31
 8005a5a:	18fb      	adds	r3, r7, r3
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005a60:	e128      	b.n	8005cb4 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <HAL_SPI_Transmit+0x64>
 8005a68:	1dbb      	adds	r3, r7, #6
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d104      	bne.n	8005a7a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005a70:	231f      	movs	r3, #31
 8005a72:	18fb      	adds	r3, r7, r3
 8005a74:	2201      	movs	r2, #1
 8005a76:	701a      	strb	r2, [r3, #0]
    goto error;
 8005a78:	e11c      	b.n	8005cb4 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	225d      	movs	r2, #93	@ 0x5d
 8005a7e:	2103      	movs	r1, #3
 8005a80:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	1dba      	adds	r2, r7, #6
 8005a92:	8812      	ldrh	r2, [r2, #0]
 8005a94:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	1dba      	adds	r2, r7, #6
 8005a9a:	8812      	ldrh	r2, [r2, #0]
 8005a9c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2244      	movs	r2, #68	@ 0x44
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2246      	movs	r2, #70	@ 0x46
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	2380      	movs	r3, #128	@ 0x80
 8005ac6:	021b      	lsls	r3, r3, #8
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d110      	bne.n	8005aee <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2140      	movs	r1, #64	@ 0x40
 8005ad8:	438a      	bics	r2, r1
 8005ada:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2180      	movs	r1, #128	@ 0x80
 8005ae8:	01c9      	lsls	r1, r1, #7
 8005aea:	430a      	orrs	r2, r1
 8005aec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2240      	movs	r2, #64	@ 0x40
 8005af6:	4013      	ands	r3, r2
 8005af8:	2b40      	cmp	r3, #64	@ 0x40
 8005afa:	d007      	beq.n	8005b0c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2140      	movs	r1, #64	@ 0x40
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	68da      	ldr	r2, [r3, #12]
 8005b10:	23e0      	movs	r3, #224	@ 0xe0
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d952      	bls.n	8005bbe <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d004      	beq.n	8005b2a <HAL_SPI_Transmit+0x11e>
 8005b20:	2316      	movs	r3, #22
 8005b22:	18fb      	adds	r3, r7, r3
 8005b24:	881b      	ldrh	r3, [r3, #0]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d143      	bne.n	8005bb2 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2e:	881a      	ldrh	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b3a:	1c9a      	adds	r2, r3, #2
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	3b01      	subs	r3, #1
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b4e:	e030      	b.n	8005bb2 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	2202      	movs	r2, #2
 8005b58:	4013      	ands	r3, r2
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d112      	bne.n	8005b84 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b62:	881a      	ldrh	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6e:	1c9a      	adds	r2, r3, #2
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b82:	e016      	b.n	8005bb2 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b84:	f7fd f812 	bl	8002bac <HAL_GetTick>
 8005b88:	0002      	movs	r2, r0
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d802      	bhi.n	8005b9a <HAL_SPI_Transmit+0x18e>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	3301      	adds	r3, #1
 8005b98:	d102      	bne.n	8005ba0 <HAL_SPI_Transmit+0x194>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d108      	bne.n	8005bb2 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8005ba0:	231f      	movs	r3, #31
 8005ba2:	18fb      	adds	r3, r7, r3
 8005ba4:	2203      	movs	r2, #3
 8005ba6:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	225d      	movs	r2, #93	@ 0x5d
 8005bac:	2101      	movs	r1, #1
 8005bae:	5499      	strb	r1, [r3, r2]
          goto error;
 8005bb0:	e080      	b.n	8005cb4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1c9      	bne.n	8005b50 <HAL_SPI_Transmit+0x144>
 8005bbc:	e053      	b.n	8005c66 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d004      	beq.n	8005bd0 <HAL_SPI_Transmit+0x1c4>
 8005bc6:	2316      	movs	r3, #22
 8005bc8:	18fb      	adds	r3, r7, r3
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d145      	bne.n	8005c5c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	330c      	adds	r3, #12
 8005bda:	7812      	ldrb	r2, [r2, #0]
 8005bdc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be2:	1c5a      	adds	r2, r3, #1
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005bf6:	e031      	b.n	8005c5c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	4013      	ands	r3, r2
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d113      	bne.n	8005c2e <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	330c      	adds	r3, #12
 8005c10:	7812      	ldrb	r2, [r2, #0]
 8005c12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	3b01      	subs	r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c2c:	e016      	b.n	8005c5c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c2e:	f7fc ffbd 	bl	8002bac <HAL_GetTick>
 8005c32:	0002      	movs	r2, r0
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d802      	bhi.n	8005c44 <HAL_SPI_Transmit+0x238>
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	3301      	adds	r3, #1
 8005c42:	d102      	bne.n	8005c4a <HAL_SPI_Transmit+0x23e>
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d108      	bne.n	8005c5c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8005c4a:	231f      	movs	r3, #31
 8005c4c:	18fb      	adds	r3, r7, r3
 8005c4e:	2203      	movs	r2, #3
 8005c50:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	225d      	movs	r2, #93	@ 0x5d
 8005c56:	2101      	movs	r1, #1
 8005c58:	5499      	strb	r1, [r3, r2]
          goto error;
 8005c5a:	e02b      	b.n	8005cb4 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1c8      	bne.n	8005bf8 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	6839      	ldr	r1, [r7, #0]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	0018      	movs	r0, r3
 8005c6e:	f000 f95d 	bl	8005f2c <SPI_EndRxTxTransaction>
 8005c72:	1e03      	subs	r3, r0, #0
 8005c74:	d002      	beq.n	8005c7c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10a      	bne.n	8005c9a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c84:	2300      	movs	r3, #0
 8005c86:	613b      	str	r3, [r7, #16]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	613b      	str	r3, [r7, #16]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	613b      	str	r3, [r7, #16]
 8005c98:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d004      	beq.n	8005cac <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8005ca2:	231f      	movs	r3, #31
 8005ca4:	18fb      	adds	r3, r7, r3
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	701a      	strb	r2, [r3, #0]
 8005caa:	e003      	b.n	8005cb4 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	225d      	movs	r2, #93	@ 0x5d
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	225c      	movs	r2, #92	@ 0x5c
 8005cb8:	2100      	movs	r1, #0
 8005cba:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005cbc:	231f      	movs	r3, #31
 8005cbe:	18fb      	adds	r3, r7, r3
 8005cc0:	781b      	ldrb	r3, [r3, #0]
}
 8005cc2:	0018      	movs	r0, r3
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	b008      	add	sp, #32
 8005cc8:	bd80      	pop	{r7, pc}
	...

08005ccc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b088      	sub	sp, #32
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	1dfb      	adds	r3, r7, #7
 8005cda:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005cdc:	f7fc ff66 	bl	8002bac <HAL_GetTick>
 8005ce0:	0002      	movs	r2, r0
 8005ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce4:	1a9b      	subs	r3, r3, r2
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	18d3      	adds	r3, r2, r3
 8005cea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005cec:	f7fc ff5e 	bl	8002bac <HAL_GetTick>
 8005cf0:	0003      	movs	r3, r0
 8005cf2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005cf4:	4b3a      	ldr	r3, [pc, #232]	@ (8005de0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	015b      	lsls	r3, r3, #5
 8005cfa:	0d1b      	lsrs	r3, r3, #20
 8005cfc:	69fa      	ldr	r2, [r7, #28]
 8005cfe:	4353      	muls	r3, r2
 8005d00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d02:	e058      	b.n	8005db6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	3301      	adds	r3, #1
 8005d08:	d055      	beq.n	8005db6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d0a:	f7fc ff4f 	bl	8002bac <HAL_GetTick>
 8005d0e:	0002      	movs	r2, r0
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	69fa      	ldr	r2, [r7, #28]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d902      	bls.n	8005d20 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d142      	bne.n	8005da6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	21e0      	movs	r1, #224	@ 0xe0
 8005d2c:	438a      	bics	r2, r1
 8005d2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	2382      	movs	r3, #130	@ 0x82
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d113      	bne.n	8005d64 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	2380      	movs	r3, #128	@ 0x80
 8005d42:	021b      	lsls	r3, r3, #8
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d005      	beq.n	8005d54 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	2380      	movs	r3, #128	@ 0x80
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d107      	bne.n	8005d64 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2140      	movs	r1, #64	@ 0x40
 8005d60:	438a      	bics	r2, r1
 8005d62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d68:	2380      	movs	r3, #128	@ 0x80
 8005d6a:	019b      	lsls	r3, r3, #6
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d110      	bne.n	8005d92 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	491a      	ldr	r1, [pc, #104]	@ (8005de4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005d7c:	400a      	ands	r2, r1
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2180      	movs	r1, #128	@ 0x80
 8005d8c:	0189      	lsls	r1, r1, #6
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	225d      	movs	r2, #93	@ 0x5d
 8005d96:	2101      	movs	r1, #1
 8005d98:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	225c      	movs	r2, #92	@ 0x5c
 8005d9e:	2100      	movs	r1, #0
 8005da0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e017      	b.n	8005dd6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	3b01      	subs	r3, #1
 8005db4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	425a      	negs	r2, r3
 8005dc6:	4153      	adcs	r3, r2
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	001a      	movs	r2, r3
 8005dcc:	1dfb      	adds	r3, r7, #7
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d197      	bne.n	8005d04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	b008      	add	sp, #32
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	46c0      	nop			@ (mov r8, r8)
 8005de0:	200004f0 	.word	0x200004f0
 8005de4:	ffffdfff 	.word	0xffffdfff

08005de8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08a      	sub	sp, #40	@ 0x28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005df6:	2317      	movs	r3, #23
 8005df8:	18fb      	adds	r3, r7, r3
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005dfe:	f7fc fed5 	bl	8002bac <HAL_GetTick>
 8005e02:	0002      	movs	r2, r0
 8005e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e06:	1a9b      	subs	r3, r3, r2
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	18d3      	adds	r3, r2, r3
 8005e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005e0e:	f7fc fecd 	bl	8002bac <HAL_GetTick>
 8005e12:	0003      	movs	r3, r0
 8005e14:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	330c      	adds	r3, #12
 8005e1c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005e1e:	4b41      	ldr	r3, [pc, #260]	@ (8005f24 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	0013      	movs	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	189b      	adds	r3, r3, r2
 8005e28:	00da      	lsls	r2, r3, #3
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	0d1b      	lsrs	r3, r3, #20
 8005e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e30:	4353      	muls	r3, r2
 8005e32:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005e34:	e068      	b.n	8005f08 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	23c0      	movs	r3, #192	@ 0xc0
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d10a      	bne.n	8005e56 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d107      	bne.n	8005e56 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	2117      	movs	r1, #23
 8005e4e:	187b      	adds	r3, r7, r1
 8005e50:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005e52:	187b      	adds	r3, r7, r1
 8005e54:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	d055      	beq.n	8005f08 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e5c:	f7fc fea6 	bl	8002bac <HAL_GetTick>
 8005e60:	0002      	movs	r2, r0
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d902      	bls.n	8005e72 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d142      	bne.n	8005ef8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	21e0      	movs	r1, #224	@ 0xe0
 8005e7e:	438a      	bics	r2, r1
 8005e80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	2382      	movs	r3, #130	@ 0x82
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d113      	bne.n	8005eb6 <SPI_WaitFifoStateUntilTimeout+0xce>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	689a      	ldr	r2, [r3, #8]
 8005e92:	2380      	movs	r3, #128	@ 0x80
 8005e94:	021b      	lsls	r3, r3, #8
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d005      	beq.n	8005ea6 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	689a      	ldr	r2, [r3, #8]
 8005e9e:	2380      	movs	r3, #128	@ 0x80
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d107      	bne.n	8005eb6 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2140      	movs	r1, #64	@ 0x40
 8005eb2:	438a      	bics	r2, r1
 8005eb4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005eba:	2380      	movs	r3, #128	@ 0x80
 8005ebc:	019b      	lsls	r3, r3, #6
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d110      	bne.n	8005ee4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4916      	ldr	r1, [pc, #88]	@ (8005f28 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005ece:	400a      	ands	r2, r1
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2180      	movs	r1, #128	@ 0x80
 8005ede:	0189      	lsls	r1, r1, #6
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	225d      	movs	r2, #93	@ 0x5d
 8005ee8:	2101      	movs	r1, #1
 8005eea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	225c      	movs	r2, #92	@ 0x5c
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e010      	b.n	8005f1a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	3b01      	subs	r3, #1
 8005f06:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	4013      	ands	r3, r2
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d18e      	bne.n	8005e36 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	b00a      	add	sp, #40	@ 0x28
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	46c0      	nop			@ (mov r8, r8)
 8005f24:	200004f0 	.word	0x200004f0
 8005f28:	ffffdfff 	.word	0xffffdfff

08005f2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af02      	add	r7, sp, #8
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	23c0      	movs	r3, #192	@ 0xc0
 8005f3c:	0159      	lsls	r1, r3, #5
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	0013      	movs	r3, r2
 8005f46:	2200      	movs	r2, #0
 8005f48:	f7ff ff4e 	bl	8005de8 <SPI_WaitFifoStateUntilTimeout>
 8005f4c:	1e03      	subs	r3, r0, #0
 8005f4e:	d007      	beq.n	8005f60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f54:	2220      	movs	r2, #32
 8005f56:	431a      	orrs	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e027      	b.n	8005fb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	0013      	movs	r3, r2
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2180      	movs	r1, #128	@ 0x80
 8005f6e:	f7ff fead 	bl	8005ccc <SPI_WaitFlagStateUntilTimeout>
 8005f72:	1e03      	subs	r3, r0, #0
 8005f74:	d007      	beq.n	8005f86 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e014      	b.n	8005fb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f86:	68ba      	ldr	r2, [r7, #8]
 8005f88:	23c0      	movs	r3, #192	@ 0xc0
 8005f8a:	00d9      	lsls	r1, r3, #3
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	0013      	movs	r3, r2
 8005f94:	2200      	movs	r2, #0
 8005f96:	f7ff ff27 	bl	8005de8 <SPI_WaitFifoStateUntilTimeout>
 8005f9a:	1e03      	subs	r3, r0, #0
 8005f9c:	d007      	beq.n	8005fae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e000      	b.n	8005fb0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	b004      	add	sp, #16
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e04a      	b.n	8006060 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	223d      	movs	r2, #61	@ 0x3d
 8005fce:	5c9b      	ldrb	r3, [r3, r2]
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d107      	bne.n	8005fe6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	223c      	movs	r2, #60	@ 0x3c
 8005fda:	2100      	movs	r1, #0
 8005fdc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	0018      	movs	r0, r3
 8005fe2:	f7fc fbd1 	bl	8002788 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	223d      	movs	r2, #61	@ 0x3d
 8005fea:	2102      	movs	r1, #2
 8005fec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	0019      	movs	r1, r3
 8005ff8:	0010      	movs	r0, r2
 8005ffa:	f000 fa85 	bl	8006508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2248      	movs	r2, #72	@ 0x48
 8006002:	2101      	movs	r1, #1
 8006004:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	223e      	movs	r2, #62	@ 0x3e
 800600a:	2101      	movs	r1, #1
 800600c:	5499      	strb	r1, [r3, r2]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	223f      	movs	r2, #63	@ 0x3f
 8006012:	2101      	movs	r1, #1
 8006014:	5499      	strb	r1, [r3, r2]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2240      	movs	r2, #64	@ 0x40
 800601a:	2101      	movs	r1, #1
 800601c:	5499      	strb	r1, [r3, r2]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2241      	movs	r2, #65	@ 0x41
 8006022:	2101      	movs	r1, #1
 8006024:	5499      	strb	r1, [r3, r2]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2242      	movs	r2, #66	@ 0x42
 800602a:	2101      	movs	r1, #1
 800602c:	5499      	strb	r1, [r3, r2]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2243      	movs	r2, #67	@ 0x43
 8006032:	2101      	movs	r1, #1
 8006034:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2244      	movs	r2, #68	@ 0x44
 800603a:	2101      	movs	r1, #1
 800603c:	5499      	strb	r1, [r3, r2]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2245      	movs	r2, #69	@ 0x45
 8006042:	2101      	movs	r1, #1
 8006044:	5499      	strb	r1, [r3, r2]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2246      	movs	r2, #70	@ 0x46
 800604a:	2101      	movs	r1, #1
 800604c:	5499      	strb	r1, [r3, r2]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2247      	movs	r2, #71	@ 0x47
 8006052:	2101      	movs	r1, #1
 8006054:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	223d      	movs	r2, #61	@ 0x3d
 800605a:	2101      	movs	r1, #1
 800605c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	0018      	movs	r0, r3
 8006062:	46bd      	mov	sp, r7
 8006064:	b002      	add	sp, #8
 8006066:	bd80      	pop	{r7, pc}

08006068 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e04a      	b.n	8006110 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	223d      	movs	r2, #61	@ 0x3d
 800607e:	5c9b      	ldrb	r3, [r3, r2]
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d107      	bne.n	8006096 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	223c      	movs	r2, #60	@ 0x3c
 800608a:	2100      	movs	r1, #0
 800608c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	0018      	movs	r0, r3
 8006092:	f000 f841 	bl	8006118 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	223d      	movs	r2, #61	@ 0x3d
 800609a:	2102      	movs	r1, #2
 800609c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	3304      	adds	r3, #4
 80060a6:	0019      	movs	r1, r3
 80060a8:	0010      	movs	r0, r2
 80060aa:	f000 fa2d 	bl	8006508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2248      	movs	r2, #72	@ 0x48
 80060b2:	2101      	movs	r1, #1
 80060b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	223e      	movs	r2, #62	@ 0x3e
 80060ba:	2101      	movs	r1, #1
 80060bc:	5499      	strb	r1, [r3, r2]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	223f      	movs	r2, #63	@ 0x3f
 80060c2:	2101      	movs	r1, #1
 80060c4:	5499      	strb	r1, [r3, r2]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2240      	movs	r2, #64	@ 0x40
 80060ca:	2101      	movs	r1, #1
 80060cc:	5499      	strb	r1, [r3, r2]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2241      	movs	r2, #65	@ 0x41
 80060d2:	2101      	movs	r1, #1
 80060d4:	5499      	strb	r1, [r3, r2]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2242      	movs	r2, #66	@ 0x42
 80060da:	2101      	movs	r1, #1
 80060dc:	5499      	strb	r1, [r3, r2]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2243      	movs	r2, #67	@ 0x43
 80060e2:	2101      	movs	r1, #1
 80060e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2244      	movs	r2, #68	@ 0x44
 80060ea:	2101      	movs	r1, #1
 80060ec:	5499      	strb	r1, [r3, r2]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2245      	movs	r2, #69	@ 0x45
 80060f2:	2101      	movs	r1, #1
 80060f4:	5499      	strb	r1, [r3, r2]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2246      	movs	r2, #70	@ 0x46
 80060fa:	2101      	movs	r1, #1
 80060fc:	5499      	strb	r1, [r3, r2]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2247      	movs	r2, #71	@ 0x47
 8006102:	2101      	movs	r1, #1
 8006104:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	223d      	movs	r2, #61	@ 0x3d
 800610a:	2101      	movs	r1, #1
 800610c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	0018      	movs	r0, r3
 8006112:	46bd      	mov	sp, r7
 8006114:	b002      	add	sp, #8
 8006116:	bd80      	pop	{r7, pc}

08006118 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006120:	46c0      	nop			@ (mov r8, r8)
 8006122:	46bd      	mov	sp, r7
 8006124:	b002      	add	sp, #8
 8006126:	bd80      	pop	{r7, pc}

08006128 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d108      	bne.n	800614a <HAL_TIM_PWM_Start+0x22>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	223e      	movs	r2, #62	@ 0x3e
 800613c:	5c9b      	ldrb	r3, [r3, r2]
 800613e:	b2db      	uxtb	r3, r3
 8006140:	3b01      	subs	r3, #1
 8006142:	1e5a      	subs	r2, r3, #1
 8006144:	4193      	sbcs	r3, r2
 8006146:	b2db      	uxtb	r3, r3
 8006148:	e037      	b.n	80061ba <HAL_TIM_PWM_Start+0x92>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b04      	cmp	r3, #4
 800614e:	d108      	bne.n	8006162 <HAL_TIM_PWM_Start+0x3a>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	223f      	movs	r2, #63	@ 0x3f
 8006154:	5c9b      	ldrb	r3, [r3, r2]
 8006156:	b2db      	uxtb	r3, r3
 8006158:	3b01      	subs	r3, #1
 800615a:	1e5a      	subs	r2, r3, #1
 800615c:	4193      	sbcs	r3, r2
 800615e:	b2db      	uxtb	r3, r3
 8006160:	e02b      	b.n	80061ba <HAL_TIM_PWM_Start+0x92>
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b08      	cmp	r3, #8
 8006166:	d108      	bne.n	800617a <HAL_TIM_PWM_Start+0x52>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2240      	movs	r2, #64	@ 0x40
 800616c:	5c9b      	ldrb	r3, [r3, r2]
 800616e:	b2db      	uxtb	r3, r3
 8006170:	3b01      	subs	r3, #1
 8006172:	1e5a      	subs	r2, r3, #1
 8006174:	4193      	sbcs	r3, r2
 8006176:	b2db      	uxtb	r3, r3
 8006178:	e01f      	b.n	80061ba <HAL_TIM_PWM_Start+0x92>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b0c      	cmp	r3, #12
 800617e:	d108      	bne.n	8006192 <HAL_TIM_PWM_Start+0x6a>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2241      	movs	r2, #65	@ 0x41
 8006184:	5c9b      	ldrb	r3, [r3, r2]
 8006186:	b2db      	uxtb	r3, r3
 8006188:	3b01      	subs	r3, #1
 800618a:	1e5a      	subs	r2, r3, #1
 800618c:	4193      	sbcs	r3, r2
 800618e:	b2db      	uxtb	r3, r3
 8006190:	e013      	b.n	80061ba <HAL_TIM_PWM_Start+0x92>
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b10      	cmp	r3, #16
 8006196:	d108      	bne.n	80061aa <HAL_TIM_PWM_Start+0x82>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2242      	movs	r2, #66	@ 0x42
 800619c:	5c9b      	ldrb	r3, [r3, r2]
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	3b01      	subs	r3, #1
 80061a2:	1e5a      	subs	r2, r3, #1
 80061a4:	4193      	sbcs	r3, r2
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	e007      	b.n	80061ba <HAL_TIM_PWM_Start+0x92>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2243      	movs	r2, #67	@ 0x43
 80061ae:	5c9b      	ldrb	r3, [r3, r2]
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	1e5a      	subs	r2, r3, #1
 80061b6:	4193      	sbcs	r3, r2
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d001      	beq.n	80061c2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e090      	b.n	80062e4 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d104      	bne.n	80061d2 <HAL_TIM_PWM_Start+0xaa>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	223e      	movs	r2, #62	@ 0x3e
 80061cc:	2102      	movs	r1, #2
 80061ce:	5499      	strb	r1, [r3, r2]
 80061d0:	e023      	b.n	800621a <HAL_TIM_PWM_Start+0xf2>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b04      	cmp	r3, #4
 80061d6:	d104      	bne.n	80061e2 <HAL_TIM_PWM_Start+0xba>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	223f      	movs	r2, #63	@ 0x3f
 80061dc:	2102      	movs	r1, #2
 80061de:	5499      	strb	r1, [r3, r2]
 80061e0:	e01b      	b.n	800621a <HAL_TIM_PWM_Start+0xf2>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	d104      	bne.n	80061f2 <HAL_TIM_PWM_Start+0xca>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2240      	movs	r2, #64	@ 0x40
 80061ec:	2102      	movs	r1, #2
 80061ee:	5499      	strb	r1, [r3, r2]
 80061f0:	e013      	b.n	800621a <HAL_TIM_PWM_Start+0xf2>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b0c      	cmp	r3, #12
 80061f6:	d104      	bne.n	8006202 <HAL_TIM_PWM_Start+0xda>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2241      	movs	r2, #65	@ 0x41
 80061fc:	2102      	movs	r1, #2
 80061fe:	5499      	strb	r1, [r3, r2]
 8006200:	e00b      	b.n	800621a <HAL_TIM_PWM_Start+0xf2>
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b10      	cmp	r3, #16
 8006206:	d104      	bne.n	8006212 <HAL_TIM_PWM_Start+0xea>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2242      	movs	r2, #66	@ 0x42
 800620c:	2102      	movs	r1, #2
 800620e:	5499      	strb	r1, [r3, r2]
 8006210:	e003      	b.n	800621a <HAL_TIM_PWM_Start+0xf2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2243      	movs	r2, #67	@ 0x43
 8006216:	2102      	movs	r1, #2
 8006218:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6839      	ldr	r1, [r7, #0]
 8006220:	2201      	movs	r2, #1
 8006222:	0018      	movs	r0, r3
 8006224:	f000 fccc 	bl	8006bc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a2f      	ldr	r2, [pc, #188]	@ (80062ec <HAL_TIM_PWM_Start+0x1c4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d00e      	beq.n	8006250 <HAL_TIM_PWM_Start+0x128>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a2e      	ldr	r2, [pc, #184]	@ (80062f0 <HAL_TIM_PWM_Start+0x1c8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d009      	beq.n	8006250 <HAL_TIM_PWM_Start+0x128>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a2c      	ldr	r2, [pc, #176]	@ (80062f4 <HAL_TIM_PWM_Start+0x1cc>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d004      	beq.n	8006250 <HAL_TIM_PWM_Start+0x128>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a2b      	ldr	r2, [pc, #172]	@ (80062f8 <HAL_TIM_PWM_Start+0x1d0>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d101      	bne.n	8006254 <HAL_TIM_PWM_Start+0x12c>
 8006250:	2301      	movs	r3, #1
 8006252:	e000      	b.n	8006256 <HAL_TIM_PWM_Start+0x12e>
 8006254:	2300      	movs	r3, #0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d008      	beq.n	800626c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2180      	movs	r1, #128	@ 0x80
 8006266:	0209      	lsls	r1, r1, #8
 8006268:	430a      	orrs	r2, r1
 800626a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1e      	ldr	r2, [pc, #120]	@ (80062ec <HAL_TIM_PWM_Start+0x1c4>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d014      	beq.n	80062a0 <HAL_TIM_PWM_Start+0x178>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	2380      	movs	r3, #128	@ 0x80
 800627c:	05db      	lsls	r3, r3, #23
 800627e:	429a      	cmp	r2, r3
 8006280:	d00e      	beq.n	80062a0 <HAL_TIM_PWM_Start+0x178>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a1d      	ldr	r2, [pc, #116]	@ (80062fc <HAL_TIM_PWM_Start+0x1d4>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d009      	beq.n	80062a0 <HAL_TIM_PWM_Start+0x178>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a1b      	ldr	r2, [pc, #108]	@ (8006300 <HAL_TIM_PWM_Start+0x1d8>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d004      	beq.n	80062a0 <HAL_TIM_PWM_Start+0x178>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a15      	ldr	r2, [pc, #84]	@ (80062f0 <HAL_TIM_PWM_Start+0x1c8>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d116      	bne.n	80062ce <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	4a17      	ldr	r2, [pc, #92]	@ (8006304 <HAL_TIM_PWM_Start+0x1dc>)
 80062a8:	4013      	ands	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2b06      	cmp	r3, #6
 80062b0:	d016      	beq.n	80062e0 <HAL_TIM_PWM_Start+0x1b8>
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	2380      	movs	r3, #128	@ 0x80
 80062b6:	025b      	lsls	r3, r3, #9
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d011      	beq.n	80062e0 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2101      	movs	r1, #1
 80062c8:	430a      	orrs	r2, r1
 80062ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062cc:	e008      	b.n	80062e0 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2101      	movs	r1, #1
 80062da:	430a      	orrs	r2, r1
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	e000      	b.n	80062e2 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e0:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	0018      	movs	r0, r3
 80062e6:	46bd      	mov	sp, r7
 80062e8:	b004      	add	sp, #16
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	40012c00 	.word	0x40012c00
 80062f0:	40014000 	.word	0x40014000
 80062f4:	40014400 	.word	0x40014400
 80062f8:	40014800 	.word	0x40014800
 80062fc:	40000400 	.word	0x40000400
 8006300:	40000800 	.word	0x40000800
 8006304:	00010007 	.word	0x00010007

08006308 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006314:	2317      	movs	r3, #23
 8006316:	18fb      	adds	r3, r7, r3
 8006318:	2200      	movs	r2, #0
 800631a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	223c      	movs	r2, #60	@ 0x3c
 8006320:	5c9b      	ldrb	r3, [r3, r2]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d101      	bne.n	800632a <HAL_TIM_PWM_ConfigChannel+0x22>
 8006326:	2302      	movs	r3, #2
 8006328:	e0e5      	b.n	80064f6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	223c      	movs	r2, #60	@ 0x3c
 800632e:	2101      	movs	r1, #1
 8006330:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b14      	cmp	r3, #20
 8006336:	d900      	bls.n	800633a <HAL_TIM_PWM_ConfigChannel+0x32>
 8006338:	e0d1      	b.n	80064de <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	009a      	lsls	r2, r3, #2
 800633e:	4b70      	ldr	r3, [pc, #448]	@ (8006500 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8006340:	18d3      	adds	r3, r2, r3
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	0011      	movs	r1, r2
 800634e:	0018      	movs	r0, r3
 8006350:	f000 f972 	bl	8006638 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699a      	ldr	r2, [r3, #24]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2108      	movs	r1, #8
 8006360:	430a      	orrs	r2, r1
 8006362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	699a      	ldr	r2, [r3, #24]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2104      	movs	r1, #4
 8006370:	438a      	bics	r2, r1
 8006372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6999      	ldr	r1, [r3, #24]
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	691a      	ldr	r2, [r3, #16]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	430a      	orrs	r2, r1
 8006384:	619a      	str	r2, [r3, #24]
      break;
 8006386:	e0af      	b.n	80064e8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	0011      	movs	r1, r2
 8006390:	0018      	movs	r0, r3
 8006392:	f000 f9db 	bl	800674c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	699a      	ldr	r2, [r3, #24]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2180      	movs	r1, #128	@ 0x80
 80063a2:	0109      	lsls	r1, r1, #4
 80063a4:	430a      	orrs	r2, r1
 80063a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699a      	ldr	r2, [r3, #24]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4954      	ldr	r1, [pc, #336]	@ (8006504 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80063b4:	400a      	ands	r2, r1
 80063b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6999      	ldr	r1, [r3, #24]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	021a      	lsls	r2, r3, #8
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	619a      	str	r2, [r3, #24]
      break;
 80063cc:	e08c      	b.n	80064e8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	0011      	movs	r1, r2
 80063d6:	0018      	movs	r0, r3
 80063d8:	f000 fa3c 	bl	8006854 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	69da      	ldr	r2, [r3, #28]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2108      	movs	r1, #8
 80063e8:	430a      	orrs	r2, r1
 80063ea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	69da      	ldr	r2, [r3, #28]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2104      	movs	r1, #4
 80063f8:	438a      	bics	r2, r1
 80063fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	69d9      	ldr	r1, [r3, #28]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	691a      	ldr	r2, [r3, #16]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	61da      	str	r2, [r3, #28]
      break;
 800640e:	e06b      	b.n	80064e8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68ba      	ldr	r2, [r7, #8]
 8006416:	0011      	movs	r1, r2
 8006418:	0018      	movs	r0, r3
 800641a:	f000 faa3 	bl	8006964 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69da      	ldr	r2, [r3, #28]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2180      	movs	r1, #128	@ 0x80
 800642a:	0109      	lsls	r1, r1, #4
 800642c:	430a      	orrs	r2, r1
 800642e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	69da      	ldr	r2, [r3, #28]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4932      	ldr	r1, [pc, #200]	@ (8006504 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800643c:	400a      	ands	r2, r1
 800643e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	69d9      	ldr	r1, [r3, #28]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	021a      	lsls	r2, r3, #8
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	430a      	orrs	r2, r1
 8006452:	61da      	str	r2, [r3, #28]
      break;
 8006454:	e048      	b.n	80064e8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	0011      	movs	r1, r2
 800645e:	0018      	movs	r0, r3
 8006460:	f000 faea 	bl	8006a38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2108      	movs	r1, #8
 8006470:	430a      	orrs	r2, r1
 8006472:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2104      	movs	r1, #4
 8006480:	438a      	bics	r2, r1
 8006482:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	691a      	ldr	r2, [r3, #16]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	430a      	orrs	r2, r1
 8006494:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006496:	e027      	b.n	80064e8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	0011      	movs	r1, r2
 80064a0:	0018      	movs	r0, r3
 80064a2:	f000 fb29 	bl	8006af8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2180      	movs	r1, #128	@ 0x80
 80064b2:	0109      	lsls	r1, r1, #4
 80064b4:	430a      	orrs	r2, r1
 80064b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4910      	ldr	r1, [pc, #64]	@ (8006504 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80064c4:	400a      	ands	r2, r1
 80064c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	021a      	lsls	r2, r3, #8
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	430a      	orrs	r2, r1
 80064da:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80064dc:	e004      	b.n	80064e8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80064de:	2317      	movs	r3, #23
 80064e0:	18fb      	adds	r3, r7, r3
 80064e2:	2201      	movs	r2, #1
 80064e4:	701a      	strb	r2, [r3, #0]
      break;
 80064e6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	223c      	movs	r2, #60	@ 0x3c
 80064ec:	2100      	movs	r1, #0
 80064ee:	5499      	strb	r1, [r3, r2]

  return status;
 80064f0:	2317      	movs	r3, #23
 80064f2:	18fb      	adds	r3, r7, r3
 80064f4:	781b      	ldrb	r3, [r3, #0]
}
 80064f6:	0018      	movs	r0, r3
 80064f8:	46bd      	mov	sp, r7
 80064fa:	b006      	add	sp, #24
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	46c0      	nop			@ (mov r8, r8)
 8006500:	08008b00 	.word	0x08008b00
 8006504:	fffffbff 	.word	0xfffffbff

08006508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a3f      	ldr	r2, [pc, #252]	@ (8006618 <TIM_Base_SetConfig+0x110>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d00c      	beq.n	800653a <TIM_Base_SetConfig+0x32>
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	2380      	movs	r3, #128	@ 0x80
 8006524:	05db      	lsls	r3, r3, #23
 8006526:	429a      	cmp	r2, r3
 8006528:	d007      	beq.n	800653a <TIM_Base_SetConfig+0x32>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a3b      	ldr	r2, [pc, #236]	@ (800661c <TIM_Base_SetConfig+0x114>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d003      	beq.n	800653a <TIM_Base_SetConfig+0x32>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a3a      	ldr	r2, [pc, #232]	@ (8006620 <TIM_Base_SetConfig+0x118>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d108      	bne.n	800654c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2270      	movs	r2, #112	@ 0x70
 800653e:	4393      	bics	r3, r2
 8006540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	4313      	orrs	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a32      	ldr	r2, [pc, #200]	@ (8006618 <TIM_Base_SetConfig+0x110>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d01c      	beq.n	800658e <TIM_Base_SetConfig+0x86>
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	2380      	movs	r3, #128	@ 0x80
 8006558:	05db      	lsls	r3, r3, #23
 800655a:	429a      	cmp	r2, r3
 800655c:	d017      	beq.n	800658e <TIM_Base_SetConfig+0x86>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a2e      	ldr	r2, [pc, #184]	@ (800661c <TIM_Base_SetConfig+0x114>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d013      	beq.n	800658e <TIM_Base_SetConfig+0x86>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a2d      	ldr	r2, [pc, #180]	@ (8006620 <TIM_Base_SetConfig+0x118>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d00f      	beq.n	800658e <TIM_Base_SetConfig+0x86>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a2c      	ldr	r2, [pc, #176]	@ (8006624 <TIM_Base_SetConfig+0x11c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d00b      	beq.n	800658e <TIM_Base_SetConfig+0x86>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a2b      	ldr	r2, [pc, #172]	@ (8006628 <TIM_Base_SetConfig+0x120>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d007      	beq.n	800658e <TIM_Base_SetConfig+0x86>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a2a      	ldr	r2, [pc, #168]	@ (800662c <TIM_Base_SetConfig+0x124>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d003      	beq.n	800658e <TIM_Base_SetConfig+0x86>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a29      	ldr	r2, [pc, #164]	@ (8006630 <TIM_Base_SetConfig+0x128>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d108      	bne.n	80065a0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4a28      	ldr	r2, [pc, #160]	@ (8006634 <TIM_Base_SetConfig+0x12c>)
 8006592:	4013      	ands	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	4313      	orrs	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2280      	movs	r2, #128	@ 0x80
 80065a4:	4393      	bics	r3, r2
 80065a6:	001a      	movs	r2, r3
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	689a      	ldr	r2, [r3, #8]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a13      	ldr	r2, [pc, #76]	@ (8006618 <TIM_Base_SetConfig+0x110>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d00b      	beq.n	80065e6 <TIM_Base_SetConfig+0xde>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a15      	ldr	r2, [pc, #84]	@ (8006628 <TIM_Base_SetConfig+0x120>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d007      	beq.n	80065e6 <TIM_Base_SetConfig+0xde>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a14      	ldr	r2, [pc, #80]	@ (800662c <TIM_Base_SetConfig+0x124>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d003      	beq.n	80065e6 <TIM_Base_SetConfig+0xde>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a13      	ldr	r2, [pc, #76]	@ (8006630 <TIM_Base_SetConfig+0x128>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d103      	bne.n	80065ee <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	691a      	ldr	r2, [r3, #16]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	2201      	movs	r2, #1
 80065fa:	4013      	ands	r3, r2
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d106      	bne.n	800660e <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	2201      	movs	r2, #1
 8006606:	4393      	bics	r3, r2
 8006608:	001a      	movs	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	611a      	str	r2, [r3, #16]
  }
}
 800660e:	46c0      	nop			@ (mov r8, r8)
 8006610:	46bd      	mov	sp, r7
 8006612:	b004      	add	sp, #16
 8006614:	bd80      	pop	{r7, pc}
 8006616:	46c0      	nop			@ (mov r8, r8)
 8006618:	40012c00 	.word	0x40012c00
 800661c:	40000400 	.word	0x40000400
 8006620:	40000800 	.word	0x40000800
 8006624:	40002000 	.word	0x40002000
 8006628:	40014000 	.word	0x40014000
 800662c:	40014400 	.word	0x40014400
 8006630:	40014800 	.word	0x40014800
 8006634:	fffffcff 	.word	0xfffffcff

08006638 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a1b      	ldr	r3, [r3, #32]
 800664c:	2201      	movs	r2, #1
 800664e:	4393      	bics	r3, r2
 8006650:	001a      	movs	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4a32      	ldr	r2, [pc, #200]	@ (8006730 <TIM_OC1_SetConfig+0xf8>)
 8006666:	4013      	ands	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2203      	movs	r2, #3
 800666e:	4393      	bics	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	4313      	orrs	r3, r2
 800667a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	2202      	movs	r2, #2
 8006680:	4393      	bics	r3, r2
 8006682:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	4313      	orrs	r3, r2
 800668c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a28      	ldr	r2, [pc, #160]	@ (8006734 <TIM_OC1_SetConfig+0xfc>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d00b      	beq.n	80066ae <TIM_OC1_SetConfig+0x76>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a27      	ldr	r2, [pc, #156]	@ (8006738 <TIM_OC1_SetConfig+0x100>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d007      	beq.n	80066ae <TIM_OC1_SetConfig+0x76>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a26      	ldr	r2, [pc, #152]	@ (800673c <TIM_OC1_SetConfig+0x104>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d003      	beq.n	80066ae <TIM_OC1_SetConfig+0x76>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a25      	ldr	r2, [pc, #148]	@ (8006740 <TIM_OC1_SetConfig+0x108>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d10c      	bne.n	80066c8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	2208      	movs	r2, #8
 80066b2:	4393      	bics	r3, r2
 80066b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	4313      	orrs	r3, r2
 80066be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	2204      	movs	r2, #4
 80066c4:	4393      	bics	r3, r2
 80066c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a1a      	ldr	r2, [pc, #104]	@ (8006734 <TIM_OC1_SetConfig+0xfc>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d00b      	beq.n	80066e8 <TIM_OC1_SetConfig+0xb0>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a19      	ldr	r2, [pc, #100]	@ (8006738 <TIM_OC1_SetConfig+0x100>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d007      	beq.n	80066e8 <TIM_OC1_SetConfig+0xb0>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a18      	ldr	r2, [pc, #96]	@ (800673c <TIM_OC1_SetConfig+0x104>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d003      	beq.n	80066e8 <TIM_OC1_SetConfig+0xb0>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a17      	ldr	r2, [pc, #92]	@ (8006740 <TIM_OC1_SetConfig+0x108>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d111      	bne.n	800670c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	4a16      	ldr	r2, [pc, #88]	@ (8006744 <TIM_OC1_SetConfig+0x10c>)
 80066ec:	4013      	ands	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	4a15      	ldr	r2, [pc, #84]	@ (8006748 <TIM_OC1_SetConfig+0x110>)
 80066f4:	4013      	ands	r3, r2
 80066f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	4313      	orrs	r3, r2
 8006700:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	4313      	orrs	r3, r2
 800670a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	621a      	str	r2, [r3, #32]
}
 8006726:	46c0      	nop			@ (mov r8, r8)
 8006728:	46bd      	mov	sp, r7
 800672a:	b006      	add	sp, #24
 800672c:	bd80      	pop	{r7, pc}
 800672e:	46c0      	nop			@ (mov r8, r8)
 8006730:	fffeff8f 	.word	0xfffeff8f
 8006734:	40012c00 	.word	0x40012c00
 8006738:	40014000 	.word	0x40014000
 800673c:	40014400 	.word	0x40014400
 8006740:	40014800 	.word	0x40014800
 8006744:	fffffeff 	.word	0xfffffeff
 8006748:	fffffdff 	.word	0xfffffdff

0800674c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	2210      	movs	r2, #16
 8006762:	4393      	bics	r3, r2
 8006764:	001a      	movs	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	4a2e      	ldr	r2, [pc, #184]	@ (8006834 <TIM_OC2_SetConfig+0xe8>)
 800677a:	4013      	ands	r3, r2
 800677c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	4a2d      	ldr	r2, [pc, #180]	@ (8006838 <TIM_OC2_SetConfig+0xec>)
 8006782:	4013      	ands	r3, r2
 8006784:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	021b      	lsls	r3, r3, #8
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4313      	orrs	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	2220      	movs	r2, #32
 8006796:	4393      	bics	r3, r2
 8006798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	011b      	lsls	r3, r3, #4
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a24      	ldr	r2, [pc, #144]	@ (800683c <TIM_OC2_SetConfig+0xf0>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d10d      	bne.n	80067ca <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	2280      	movs	r2, #128	@ 0x80
 80067b2:	4393      	bics	r3, r2
 80067b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2240      	movs	r2, #64	@ 0x40
 80067c6:	4393      	bics	r3, r2
 80067c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a1b      	ldr	r2, [pc, #108]	@ (800683c <TIM_OC2_SetConfig+0xf0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d00b      	beq.n	80067ea <TIM_OC2_SetConfig+0x9e>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a1a      	ldr	r2, [pc, #104]	@ (8006840 <TIM_OC2_SetConfig+0xf4>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d007      	beq.n	80067ea <TIM_OC2_SetConfig+0x9e>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a19      	ldr	r2, [pc, #100]	@ (8006844 <TIM_OC2_SetConfig+0xf8>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d003      	beq.n	80067ea <TIM_OC2_SetConfig+0x9e>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a18      	ldr	r2, [pc, #96]	@ (8006848 <TIM_OC2_SetConfig+0xfc>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d113      	bne.n	8006812 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	4a17      	ldr	r2, [pc, #92]	@ (800684c <TIM_OC2_SetConfig+0x100>)
 80067ee:	4013      	ands	r3, r2
 80067f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	4a16      	ldr	r2, [pc, #88]	@ (8006850 <TIM_OC2_SetConfig+0x104>)
 80067f6:	4013      	ands	r3, r2
 80067f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	4313      	orrs	r3, r2
 8006804:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4313      	orrs	r3, r2
 8006810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	621a      	str	r2, [r3, #32]
}
 800682c:	46c0      	nop			@ (mov r8, r8)
 800682e:	46bd      	mov	sp, r7
 8006830:	b006      	add	sp, #24
 8006832:	bd80      	pop	{r7, pc}
 8006834:	feff8fff 	.word	0xfeff8fff
 8006838:	fffffcff 	.word	0xfffffcff
 800683c:	40012c00 	.word	0x40012c00
 8006840:	40014000 	.word	0x40014000
 8006844:	40014400 	.word	0x40014400
 8006848:	40014800 	.word	0x40014800
 800684c:	fffffbff 	.word	0xfffffbff
 8006850:	fffff7ff 	.word	0xfffff7ff

08006854 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a1b      	ldr	r3, [r3, #32]
 8006868:	4a33      	ldr	r2, [pc, #204]	@ (8006938 <TIM_OC3_SetConfig+0xe4>)
 800686a:	401a      	ands	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4a2f      	ldr	r2, [pc, #188]	@ (800693c <TIM_OC3_SetConfig+0xe8>)
 8006880:	4013      	ands	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2203      	movs	r2, #3
 8006888:	4393      	bics	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	4a29      	ldr	r2, [pc, #164]	@ (8006940 <TIM_OC3_SetConfig+0xec>)
 800689a:	4013      	ands	r3, r2
 800689c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	021b      	lsls	r3, r3, #8
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a25      	ldr	r2, [pc, #148]	@ (8006944 <TIM_OC3_SetConfig+0xf0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d10d      	bne.n	80068ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	4a24      	ldr	r2, [pc, #144]	@ (8006948 <TIM_OC3_SetConfig+0xf4>)
 80068b6:	4013      	ands	r3, r2
 80068b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	021b      	lsls	r3, r3, #8
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	4a20      	ldr	r2, [pc, #128]	@ (800694c <TIM_OC3_SetConfig+0xf8>)
 80068ca:	4013      	ands	r3, r2
 80068cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a1c      	ldr	r2, [pc, #112]	@ (8006944 <TIM_OC3_SetConfig+0xf0>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d00b      	beq.n	80068ee <TIM_OC3_SetConfig+0x9a>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006950 <TIM_OC3_SetConfig+0xfc>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d007      	beq.n	80068ee <TIM_OC3_SetConfig+0x9a>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a1c      	ldr	r2, [pc, #112]	@ (8006954 <TIM_OC3_SetConfig+0x100>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d003      	beq.n	80068ee <TIM_OC3_SetConfig+0x9a>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006958 <TIM_OC3_SetConfig+0x104>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d113      	bne.n	8006916 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	4a1a      	ldr	r2, [pc, #104]	@ (800695c <TIM_OC3_SetConfig+0x108>)
 80068f2:	4013      	ands	r3, r2
 80068f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	4a19      	ldr	r2, [pc, #100]	@ (8006960 <TIM_OC3_SetConfig+0x10c>)
 80068fa:	4013      	ands	r3, r2
 80068fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	011b      	lsls	r3, r3, #4
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	4313      	orrs	r3, r2
 8006908:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	011b      	lsls	r3, r3, #4
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	4313      	orrs	r3, r2
 8006914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	621a      	str	r2, [r3, #32]
}
 8006930:	46c0      	nop			@ (mov r8, r8)
 8006932:	46bd      	mov	sp, r7
 8006934:	b006      	add	sp, #24
 8006936:	bd80      	pop	{r7, pc}
 8006938:	fffffeff 	.word	0xfffffeff
 800693c:	fffeff8f 	.word	0xfffeff8f
 8006940:	fffffdff 	.word	0xfffffdff
 8006944:	40012c00 	.word	0x40012c00
 8006948:	fffff7ff 	.word	0xfffff7ff
 800694c:	fffffbff 	.word	0xfffffbff
 8006950:	40014000 	.word	0x40014000
 8006954:	40014400 	.word	0x40014400
 8006958:	40014800 	.word	0x40014800
 800695c:	ffffefff 	.word	0xffffefff
 8006960:	ffffdfff 	.word	0xffffdfff

08006964 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	4a26      	ldr	r2, [pc, #152]	@ (8006a14 <TIM_OC4_SetConfig+0xb0>)
 800697a:	401a      	ands	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	69db      	ldr	r3, [r3, #28]
 800698a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4a22      	ldr	r2, [pc, #136]	@ (8006a18 <TIM_OC4_SetConfig+0xb4>)
 8006990:	4013      	ands	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4a21      	ldr	r2, [pc, #132]	@ (8006a1c <TIM_OC4_SetConfig+0xb8>)
 8006998:	4013      	ands	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	021b      	lsls	r3, r3, #8
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	4a1d      	ldr	r2, [pc, #116]	@ (8006a20 <TIM_OC4_SetConfig+0xbc>)
 80069ac:	4013      	ands	r3, r2
 80069ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	031b      	lsls	r3, r3, #12
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a19      	ldr	r2, [pc, #100]	@ (8006a24 <TIM_OC4_SetConfig+0xc0>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d00b      	beq.n	80069dc <TIM_OC4_SetConfig+0x78>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a18      	ldr	r2, [pc, #96]	@ (8006a28 <TIM_OC4_SetConfig+0xc4>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d007      	beq.n	80069dc <TIM_OC4_SetConfig+0x78>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a17      	ldr	r2, [pc, #92]	@ (8006a2c <TIM_OC4_SetConfig+0xc8>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d003      	beq.n	80069dc <TIM_OC4_SetConfig+0x78>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a16      	ldr	r2, [pc, #88]	@ (8006a30 <TIM_OC4_SetConfig+0xcc>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d109      	bne.n	80069f0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	4a15      	ldr	r2, [pc, #84]	@ (8006a34 <TIM_OC4_SetConfig+0xd0>)
 80069e0:	4013      	ands	r3, r2
 80069e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	019b      	lsls	r3, r3, #6
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	621a      	str	r2, [r3, #32]
}
 8006a0a:	46c0      	nop			@ (mov r8, r8)
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	b006      	add	sp, #24
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	46c0      	nop			@ (mov r8, r8)
 8006a14:	ffffefff 	.word	0xffffefff
 8006a18:	feff8fff 	.word	0xfeff8fff
 8006a1c:	fffffcff 	.word	0xfffffcff
 8006a20:	ffffdfff 	.word	0xffffdfff
 8006a24:	40012c00 	.word	0x40012c00
 8006a28:	40014000 	.word	0x40014000
 8006a2c:	40014400 	.word	0x40014400
 8006a30:	40014800 	.word	0x40014800
 8006a34:	ffffbfff 	.word	0xffffbfff

08006a38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a1b      	ldr	r3, [r3, #32]
 8006a4c:	4a23      	ldr	r2, [pc, #140]	@ (8006adc <TIM_OC5_SetConfig+0xa4>)
 8006a4e:	401a      	ands	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4a1f      	ldr	r2, [pc, #124]	@ (8006ae0 <TIM_OC5_SetConfig+0xa8>)
 8006a64:	4013      	ands	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	4a1b      	ldr	r2, [pc, #108]	@ (8006ae4 <TIM_OC5_SetConfig+0xac>)
 8006a76:	4013      	ands	r3, r2
 8006a78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	041b      	lsls	r3, r3, #16
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a17      	ldr	r2, [pc, #92]	@ (8006ae8 <TIM_OC5_SetConfig+0xb0>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d00b      	beq.n	8006aa6 <TIM_OC5_SetConfig+0x6e>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a16      	ldr	r2, [pc, #88]	@ (8006aec <TIM_OC5_SetConfig+0xb4>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d007      	beq.n	8006aa6 <TIM_OC5_SetConfig+0x6e>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a15      	ldr	r2, [pc, #84]	@ (8006af0 <TIM_OC5_SetConfig+0xb8>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d003      	beq.n	8006aa6 <TIM_OC5_SetConfig+0x6e>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a14      	ldr	r2, [pc, #80]	@ (8006af4 <TIM_OC5_SetConfig+0xbc>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d109      	bne.n	8006aba <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	4a0c      	ldr	r2, [pc, #48]	@ (8006adc <TIM_OC5_SetConfig+0xa4>)
 8006aaa:	4013      	ands	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	021b      	lsls	r3, r3, #8
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	621a      	str	r2, [r3, #32]
}
 8006ad4:	46c0      	nop			@ (mov r8, r8)
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	b006      	add	sp, #24
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	fffeffff 	.word	0xfffeffff
 8006ae0:	fffeff8f 	.word	0xfffeff8f
 8006ae4:	fffdffff 	.word	0xfffdffff
 8006ae8:	40012c00 	.word	0x40012c00
 8006aec:	40014000 	.word	0x40014000
 8006af0:	40014400 	.word	0x40014400
 8006af4:	40014800 	.word	0x40014800

08006af8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a1b      	ldr	r3, [r3, #32]
 8006b0c:	4a24      	ldr	r2, [pc, #144]	@ (8006ba0 <TIM_OC6_SetConfig+0xa8>)
 8006b0e:	401a      	ands	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4a20      	ldr	r2, [pc, #128]	@ (8006ba4 <TIM_OC6_SetConfig+0xac>)
 8006b24:	4013      	ands	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	021b      	lsls	r3, r3, #8
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	4a1c      	ldr	r2, [pc, #112]	@ (8006ba8 <TIM_OC6_SetConfig+0xb0>)
 8006b38:	4013      	ands	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	051b      	lsls	r3, r3, #20
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a18      	ldr	r2, [pc, #96]	@ (8006bac <TIM_OC6_SetConfig+0xb4>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00b      	beq.n	8006b68 <TIM_OC6_SetConfig+0x70>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a17      	ldr	r2, [pc, #92]	@ (8006bb0 <TIM_OC6_SetConfig+0xb8>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d007      	beq.n	8006b68 <TIM_OC6_SetConfig+0x70>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a16      	ldr	r2, [pc, #88]	@ (8006bb4 <TIM_OC6_SetConfig+0xbc>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d003      	beq.n	8006b68 <TIM_OC6_SetConfig+0x70>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a15      	ldr	r2, [pc, #84]	@ (8006bb8 <TIM_OC6_SetConfig+0xc0>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d109      	bne.n	8006b7c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	4a14      	ldr	r2, [pc, #80]	@ (8006bbc <TIM_OC6_SetConfig+0xc4>)
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	695b      	ldr	r3, [r3, #20]
 8006b74:	029b      	lsls	r3, r3, #10
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	621a      	str	r2, [r3, #32]
}
 8006b96:	46c0      	nop			@ (mov r8, r8)
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	b006      	add	sp, #24
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	46c0      	nop			@ (mov r8, r8)
 8006ba0:	ffefffff 	.word	0xffefffff
 8006ba4:	feff8fff 	.word	0xfeff8fff
 8006ba8:	ffdfffff 	.word	0xffdfffff
 8006bac:	40012c00 	.word	0x40012c00
 8006bb0:	40014000 	.word	0x40014000
 8006bb4:	40014400 	.word	0x40014400
 8006bb8:	40014800 	.word	0x40014800
 8006bbc:	fffbffff 	.word	0xfffbffff

08006bc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	221f      	movs	r2, #31
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	409a      	lsls	r2, r3
 8006bd6:	0013      	movs	r3, r2
 8006bd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	43d2      	mvns	r2, r2
 8006be2:	401a      	ands	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a1a      	ldr	r2, [r3, #32]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	211f      	movs	r1, #31
 8006bf0:	400b      	ands	r3, r1
 8006bf2:	6879      	ldr	r1, [r7, #4]
 8006bf4:	4099      	lsls	r1, r3
 8006bf6:	000b      	movs	r3, r1
 8006bf8:	431a      	orrs	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	621a      	str	r2, [r3, #32]
}
 8006bfe:	46c0      	nop			@ (mov r8, r8)
 8006c00:	46bd      	mov	sp, r7
 8006c02:	b006      	add	sp, #24
 8006c04:	bd80      	pop	{r7, pc}
	...

08006c08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	223c      	movs	r2, #60	@ 0x3c
 8006c1a:	5c9b      	ldrb	r3, [r3, r2]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d101      	bne.n	8006c24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c20:	2302      	movs	r3, #2
 8006c22:	e06f      	b.n	8006d04 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	223c      	movs	r2, #60	@ 0x3c
 8006c28:	2101      	movs	r1, #1
 8006c2a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	22ff      	movs	r2, #255	@ 0xff
 8006c30:	4393      	bics	r3, r2
 8006c32:	001a      	movs	r2, r3
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4a33      	ldr	r2, [pc, #204]	@ (8006d0c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8006c40:	401a      	ands	r2, r3
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4a30      	ldr	r2, [pc, #192]	@ (8006d10 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8006c4e:	401a      	ands	r2, r3
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4a2e      	ldr	r2, [pc, #184]	@ (8006d14 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8006c5c:	401a      	ands	r2, r3
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	4a2b      	ldr	r2, [pc, #172]	@ (8006d18 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006c6a:	401a      	ands	r2, r3
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4a29      	ldr	r2, [pc, #164]	@ (8006d1c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006c78:	401a      	ands	r2, r3
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4a26      	ldr	r2, [pc, #152]	@ (8006d20 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8006c86:	401a      	ands	r2, r3
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4a24      	ldr	r2, [pc, #144]	@ (8006d24 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006c94:	401a      	ands	r2, r3
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	041b      	lsls	r3, r3, #16
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4a21      	ldr	r2, [pc, #132]	@ (8006d28 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006ca4:	401a      	ands	r2, r3
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8006d2c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d11c      	bne.n	8006cf2 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	4a1d      	ldr	r2, [pc, #116]	@ (8006d30 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006cbc:	401a      	ands	r2, r3
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc2:	051b      	lsls	r3, r3, #20
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4a1a      	ldr	r2, [pc, #104]	@ (8006d34 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006ccc:	401a      	ands	r2, r3
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4a17      	ldr	r2, [pc, #92]	@ (8006d38 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006cda:	401a      	ands	r2, r3
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4a15      	ldr	r2, [pc, #84]	@ (8006d3c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006ce8:	401a      	ands	r2, r3
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	223c      	movs	r2, #60	@ 0x3c
 8006cfe:	2100      	movs	r1, #0
 8006d00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	0018      	movs	r0, r3
 8006d06:	46bd      	mov	sp, r7
 8006d08:	b004      	add	sp, #16
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	fffffcff 	.word	0xfffffcff
 8006d10:	fffffbff 	.word	0xfffffbff
 8006d14:	fffff7ff 	.word	0xfffff7ff
 8006d18:	ffffefff 	.word	0xffffefff
 8006d1c:	ffffdfff 	.word	0xffffdfff
 8006d20:	ffffbfff 	.word	0xffffbfff
 8006d24:	fff0ffff 	.word	0xfff0ffff
 8006d28:	efffffff 	.word	0xefffffff
 8006d2c:	40012c00 	.word	0x40012c00
 8006d30:	ff0fffff 	.word	0xff0fffff
 8006d34:	feffffff 	.word	0xfeffffff
 8006d38:	fdffffff 	.word	0xfdffffff
 8006d3c:	dfffffff 	.word	0xdfffffff

08006d40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e046      	b.n	8006de0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2288      	movs	r2, #136	@ 0x88
 8006d56:	589b      	ldr	r3, [r3, r2]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d107      	bne.n	8006d6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2284      	movs	r2, #132	@ 0x84
 8006d60:	2100      	movs	r1, #0
 8006d62:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	0018      	movs	r0, r3
 8006d68:	f7fb fd6a 	bl	8002840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2288      	movs	r2, #136	@ 0x88
 8006d70:	2124      	movs	r1, #36	@ 0x24
 8006d72:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2101      	movs	r1, #1
 8006d80:	438a      	bics	r2, r1
 8006d82:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d003      	beq.n	8006d94 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	0018      	movs	r0, r3
 8006d90:	f000 fb82 	bl	8007498 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	0018      	movs	r0, r3
 8006d98:	f000 f828 	bl	8006dec <UART_SetConfig>
 8006d9c:	0003      	movs	r3, r0
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d101      	bne.n	8006da6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e01c      	b.n	8006de0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	490d      	ldr	r1, [pc, #52]	@ (8006de8 <HAL_UART_Init+0xa8>)
 8006db2:	400a      	ands	r2, r1
 8006db4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	689a      	ldr	r2, [r3, #8]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	212a      	movs	r1, #42	@ 0x2a
 8006dc2:	438a      	bics	r2, r1
 8006dc4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	0018      	movs	r0, r3
 8006dda:	f000 fc11 	bl	8007600 <UART_CheckIdleState>
 8006dde:	0003      	movs	r3, r0
}
 8006de0:	0018      	movs	r0, r3
 8006de2:	46bd      	mov	sp, r7
 8006de4:	b002      	add	sp, #8
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	ffffb7ff 	.word	0xffffb7ff

08006dec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dec:	b5b0      	push	{r4, r5, r7, lr}
 8006dee:	b090      	sub	sp, #64	@ 0x40
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006df4:	231a      	movs	r3, #26
 8006df6:	2220      	movs	r2, #32
 8006df8:	189b      	adds	r3, r3, r2
 8006dfa:	19db      	adds	r3, r3, r7
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e02:	689a      	ldr	r2, [r3, #8]
 8006e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	431a      	orrs	r2, r3
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4ac1      	ldr	r2, [pc, #772]	@ (8007124 <UART_SetConfig+0x338>)
 8006e20:	4013      	ands	r3, r2
 8006e22:	0019      	movs	r1, r3
 8006e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e2a:	430b      	orrs	r3, r1
 8006e2c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	4abc      	ldr	r2, [pc, #752]	@ (8007128 <UART_SetConfig+0x33c>)
 8006e36:	4013      	ands	r3, r2
 8006e38:	0018      	movs	r0, r3
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3c:	68d9      	ldr	r1, [r3, #12]
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	0003      	movs	r3, r0
 8006e44:	430b      	orrs	r3, r1
 8006e46:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4ab6      	ldr	r2, [pc, #728]	@ (800712c <UART_SetConfig+0x340>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d009      	beq.n	8006e6c <UART_SetConfig+0x80>
 8006e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4ab4      	ldr	r2, [pc, #720]	@ (8007130 <UART_SetConfig+0x344>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d004      	beq.n	8006e6c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	4ab0      	ldr	r2, [pc, #704]	@ (8007134 <UART_SetConfig+0x348>)
 8006e74:	4013      	ands	r3, r2
 8006e76:	0019      	movs	r1, r3
 8006e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e7e:	430b      	orrs	r3, r1
 8006e80:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e88:	220f      	movs	r2, #15
 8006e8a:	4393      	bics	r3, r2
 8006e8c:	0018      	movs	r0, r3
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e90:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	0003      	movs	r3, r0
 8006e98:	430b      	orrs	r3, r1
 8006e9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4aa5      	ldr	r2, [pc, #660]	@ (8007138 <UART_SetConfig+0x34c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d131      	bne.n	8006f0a <UART_SetConfig+0x11e>
 8006ea6:	4ba5      	ldr	r3, [pc, #660]	@ (800713c <UART_SetConfig+0x350>)
 8006ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eaa:	2203      	movs	r2, #3
 8006eac:	4013      	ands	r3, r2
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d01d      	beq.n	8006eee <UART_SetConfig+0x102>
 8006eb2:	d823      	bhi.n	8006efc <UART_SetConfig+0x110>
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d00c      	beq.n	8006ed2 <UART_SetConfig+0xe6>
 8006eb8:	d820      	bhi.n	8006efc <UART_SetConfig+0x110>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d002      	beq.n	8006ec4 <UART_SetConfig+0xd8>
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d00e      	beq.n	8006ee0 <UART_SetConfig+0xf4>
 8006ec2:	e01b      	b.n	8006efc <UART_SetConfig+0x110>
 8006ec4:	231b      	movs	r3, #27
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	189b      	adds	r3, r3, r2
 8006eca:	19db      	adds	r3, r3, r7
 8006ecc:	2200      	movs	r2, #0
 8006ece:	701a      	strb	r2, [r3, #0]
 8006ed0:	e154      	b.n	800717c <UART_SetConfig+0x390>
 8006ed2:	231b      	movs	r3, #27
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	189b      	adds	r3, r3, r2
 8006ed8:	19db      	adds	r3, r3, r7
 8006eda:	2202      	movs	r2, #2
 8006edc:	701a      	strb	r2, [r3, #0]
 8006ede:	e14d      	b.n	800717c <UART_SetConfig+0x390>
 8006ee0:	231b      	movs	r3, #27
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	189b      	adds	r3, r3, r2
 8006ee6:	19db      	adds	r3, r3, r7
 8006ee8:	2204      	movs	r2, #4
 8006eea:	701a      	strb	r2, [r3, #0]
 8006eec:	e146      	b.n	800717c <UART_SetConfig+0x390>
 8006eee:	231b      	movs	r3, #27
 8006ef0:	2220      	movs	r2, #32
 8006ef2:	189b      	adds	r3, r3, r2
 8006ef4:	19db      	adds	r3, r3, r7
 8006ef6:	2208      	movs	r2, #8
 8006ef8:	701a      	strb	r2, [r3, #0]
 8006efa:	e13f      	b.n	800717c <UART_SetConfig+0x390>
 8006efc:	231b      	movs	r3, #27
 8006efe:	2220      	movs	r2, #32
 8006f00:	189b      	adds	r3, r3, r2
 8006f02:	19db      	adds	r3, r3, r7
 8006f04:	2210      	movs	r2, #16
 8006f06:	701a      	strb	r2, [r3, #0]
 8006f08:	e138      	b.n	800717c <UART_SetConfig+0x390>
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a8c      	ldr	r2, [pc, #560]	@ (8007140 <UART_SetConfig+0x354>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d131      	bne.n	8006f78 <UART_SetConfig+0x18c>
 8006f14:	4b89      	ldr	r3, [pc, #548]	@ (800713c <UART_SetConfig+0x350>)
 8006f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f18:	220c      	movs	r2, #12
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	2b0c      	cmp	r3, #12
 8006f1e:	d01d      	beq.n	8006f5c <UART_SetConfig+0x170>
 8006f20:	d823      	bhi.n	8006f6a <UART_SetConfig+0x17e>
 8006f22:	2b08      	cmp	r3, #8
 8006f24:	d00c      	beq.n	8006f40 <UART_SetConfig+0x154>
 8006f26:	d820      	bhi.n	8006f6a <UART_SetConfig+0x17e>
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <UART_SetConfig+0x146>
 8006f2c:	2b04      	cmp	r3, #4
 8006f2e:	d00e      	beq.n	8006f4e <UART_SetConfig+0x162>
 8006f30:	e01b      	b.n	8006f6a <UART_SetConfig+0x17e>
 8006f32:	231b      	movs	r3, #27
 8006f34:	2220      	movs	r2, #32
 8006f36:	189b      	adds	r3, r3, r2
 8006f38:	19db      	adds	r3, r3, r7
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	701a      	strb	r2, [r3, #0]
 8006f3e:	e11d      	b.n	800717c <UART_SetConfig+0x390>
 8006f40:	231b      	movs	r3, #27
 8006f42:	2220      	movs	r2, #32
 8006f44:	189b      	adds	r3, r3, r2
 8006f46:	19db      	adds	r3, r3, r7
 8006f48:	2202      	movs	r2, #2
 8006f4a:	701a      	strb	r2, [r3, #0]
 8006f4c:	e116      	b.n	800717c <UART_SetConfig+0x390>
 8006f4e:	231b      	movs	r3, #27
 8006f50:	2220      	movs	r2, #32
 8006f52:	189b      	adds	r3, r3, r2
 8006f54:	19db      	adds	r3, r3, r7
 8006f56:	2204      	movs	r2, #4
 8006f58:	701a      	strb	r2, [r3, #0]
 8006f5a:	e10f      	b.n	800717c <UART_SetConfig+0x390>
 8006f5c:	231b      	movs	r3, #27
 8006f5e:	2220      	movs	r2, #32
 8006f60:	189b      	adds	r3, r3, r2
 8006f62:	19db      	adds	r3, r3, r7
 8006f64:	2208      	movs	r2, #8
 8006f66:	701a      	strb	r2, [r3, #0]
 8006f68:	e108      	b.n	800717c <UART_SetConfig+0x390>
 8006f6a:	231b      	movs	r3, #27
 8006f6c:	2220      	movs	r2, #32
 8006f6e:	189b      	adds	r3, r3, r2
 8006f70:	19db      	adds	r3, r3, r7
 8006f72:	2210      	movs	r2, #16
 8006f74:	701a      	strb	r2, [r3, #0]
 8006f76:	e101      	b.n	800717c <UART_SetConfig+0x390>
 8006f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a71      	ldr	r2, [pc, #452]	@ (8007144 <UART_SetConfig+0x358>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d131      	bne.n	8006fe6 <UART_SetConfig+0x1fa>
 8006f82:	4b6e      	ldr	r3, [pc, #440]	@ (800713c <UART_SetConfig+0x350>)
 8006f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f86:	2230      	movs	r2, #48	@ 0x30
 8006f88:	4013      	ands	r3, r2
 8006f8a:	2b30      	cmp	r3, #48	@ 0x30
 8006f8c:	d01d      	beq.n	8006fca <UART_SetConfig+0x1de>
 8006f8e:	d823      	bhi.n	8006fd8 <UART_SetConfig+0x1ec>
 8006f90:	2b20      	cmp	r3, #32
 8006f92:	d00c      	beq.n	8006fae <UART_SetConfig+0x1c2>
 8006f94:	d820      	bhi.n	8006fd8 <UART_SetConfig+0x1ec>
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d002      	beq.n	8006fa0 <UART_SetConfig+0x1b4>
 8006f9a:	2b10      	cmp	r3, #16
 8006f9c:	d00e      	beq.n	8006fbc <UART_SetConfig+0x1d0>
 8006f9e:	e01b      	b.n	8006fd8 <UART_SetConfig+0x1ec>
 8006fa0:	231b      	movs	r3, #27
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	189b      	adds	r3, r3, r2
 8006fa6:	19db      	adds	r3, r3, r7
 8006fa8:	2200      	movs	r2, #0
 8006faa:	701a      	strb	r2, [r3, #0]
 8006fac:	e0e6      	b.n	800717c <UART_SetConfig+0x390>
 8006fae:	231b      	movs	r3, #27
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	189b      	adds	r3, r3, r2
 8006fb4:	19db      	adds	r3, r3, r7
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	701a      	strb	r2, [r3, #0]
 8006fba:	e0df      	b.n	800717c <UART_SetConfig+0x390>
 8006fbc:	231b      	movs	r3, #27
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	189b      	adds	r3, r3, r2
 8006fc2:	19db      	adds	r3, r3, r7
 8006fc4:	2204      	movs	r2, #4
 8006fc6:	701a      	strb	r2, [r3, #0]
 8006fc8:	e0d8      	b.n	800717c <UART_SetConfig+0x390>
 8006fca:	231b      	movs	r3, #27
 8006fcc:	2220      	movs	r2, #32
 8006fce:	189b      	adds	r3, r3, r2
 8006fd0:	19db      	adds	r3, r3, r7
 8006fd2:	2208      	movs	r2, #8
 8006fd4:	701a      	strb	r2, [r3, #0]
 8006fd6:	e0d1      	b.n	800717c <UART_SetConfig+0x390>
 8006fd8:	231b      	movs	r3, #27
 8006fda:	2220      	movs	r2, #32
 8006fdc:	189b      	adds	r3, r3, r2
 8006fde:	19db      	adds	r3, r3, r7
 8006fe0:	2210      	movs	r2, #16
 8006fe2:	701a      	strb	r2, [r3, #0]
 8006fe4:	e0ca      	b.n	800717c <UART_SetConfig+0x390>
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a57      	ldr	r2, [pc, #348]	@ (8007148 <UART_SetConfig+0x35c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d106      	bne.n	8006ffe <UART_SetConfig+0x212>
 8006ff0:	231b      	movs	r3, #27
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	189b      	adds	r3, r3, r2
 8006ff6:	19db      	adds	r3, r3, r7
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	e0be      	b.n	800717c <UART_SetConfig+0x390>
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a52      	ldr	r2, [pc, #328]	@ (800714c <UART_SetConfig+0x360>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d106      	bne.n	8007016 <UART_SetConfig+0x22a>
 8007008:	231b      	movs	r3, #27
 800700a:	2220      	movs	r2, #32
 800700c:	189b      	adds	r3, r3, r2
 800700e:	19db      	adds	r3, r3, r7
 8007010:	2200      	movs	r2, #0
 8007012:	701a      	strb	r2, [r3, #0]
 8007014:	e0b2      	b.n	800717c <UART_SetConfig+0x390>
 8007016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a4d      	ldr	r2, [pc, #308]	@ (8007150 <UART_SetConfig+0x364>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d106      	bne.n	800702e <UART_SetConfig+0x242>
 8007020:	231b      	movs	r3, #27
 8007022:	2220      	movs	r2, #32
 8007024:	189b      	adds	r3, r3, r2
 8007026:	19db      	adds	r3, r3, r7
 8007028:	2200      	movs	r2, #0
 800702a:	701a      	strb	r2, [r3, #0]
 800702c:	e0a6      	b.n	800717c <UART_SetConfig+0x390>
 800702e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a3e      	ldr	r2, [pc, #248]	@ (800712c <UART_SetConfig+0x340>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d13e      	bne.n	80070b6 <UART_SetConfig+0x2ca>
 8007038:	4b40      	ldr	r3, [pc, #256]	@ (800713c <UART_SetConfig+0x350>)
 800703a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800703c:	23c0      	movs	r3, #192	@ 0xc0
 800703e:	011b      	lsls	r3, r3, #4
 8007040:	4013      	ands	r3, r2
 8007042:	22c0      	movs	r2, #192	@ 0xc0
 8007044:	0112      	lsls	r2, r2, #4
 8007046:	4293      	cmp	r3, r2
 8007048:	d027      	beq.n	800709a <UART_SetConfig+0x2ae>
 800704a:	22c0      	movs	r2, #192	@ 0xc0
 800704c:	0112      	lsls	r2, r2, #4
 800704e:	4293      	cmp	r3, r2
 8007050:	d82a      	bhi.n	80070a8 <UART_SetConfig+0x2bc>
 8007052:	2280      	movs	r2, #128	@ 0x80
 8007054:	0112      	lsls	r2, r2, #4
 8007056:	4293      	cmp	r3, r2
 8007058:	d011      	beq.n	800707e <UART_SetConfig+0x292>
 800705a:	2280      	movs	r2, #128	@ 0x80
 800705c:	0112      	lsls	r2, r2, #4
 800705e:	4293      	cmp	r3, r2
 8007060:	d822      	bhi.n	80070a8 <UART_SetConfig+0x2bc>
 8007062:	2b00      	cmp	r3, #0
 8007064:	d004      	beq.n	8007070 <UART_SetConfig+0x284>
 8007066:	2280      	movs	r2, #128	@ 0x80
 8007068:	00d2      	lsls	r2, r2, #3
 800706a:	4293      	cmp	r3, r2
 800706c:	d00e      	beq.n	800708c <UART_SetConfig+0x2a0>
 800706e:	e01b      	b.n	80070a8 <UART_SetConfig+0x2bc>
 8007070:	231b      	movs	r3, #27
 8007072:	2220      	movs	r2, #32
 8007074:	189b      	adds	r3, r3, r2
 8007076:	19db      	adds	r3, r3, r7
 8007078:	2200      	movs	r2, #0
 800707a:	701a      	strb	r2, [r3, #0]
 800707c:	e07e      	b.n	800717c <UART_SetConfig+0x390>
 800707e:	231b      	movs	r3, #27
 8007080:	2220      	movs	r2, #32
 8007082:	189b      	adds	r3, r3, r2
 8007084:	19db      	adds	r3, r3, r7
 8007086:	2202      	movs	r2, #2
 8007088:	701a      	strb	r2, [r3, #0]
 800708a:	e077      	b.n	800717c <UART_SetConfig+0x390>
 800708c:	231b      	movs	r3, #27
 800708e:	2220      	movs	r2, #32
 8007090:	189b      	adds	r3, r3, r2
 8007092:	19db      	adds	r3, r3, r7
 8007094:	2204      	movs	r2, #4
 8007096:	701a      	strb	r2, [r3, #0]
 8007098:	e070      	b.n	800717c <UART_SetConfig+0x390>
 800709a:	231b      	movs	r3, #27
 800709c:	2220      	movs	r2, #32
 800709e:	189b      	adds	r3, r3, r2
 80070a0:	19db      	adds	r3, r3, r7
 80070a2:	2208      	movs	r2, #8
 80070a4:	701a      	strb	r2, [r3, #0]
 80070a6:	e069      	b.n	800717c <UART_SetConfig+0x390>
 80070a8:	231b      	movs	r3, #27
 80070aa:	2220      	movs	r2, #32
 80070ac:	189b      	adds	r3, r3, r2
 80070ae:	19db      	adds	r3, r3, r7
 80070b0:	2210      	movs	r2, #16
 80070b2:	701a      	strb	r2, [r3, #0]
 80070b4:	e062      	b.n	800717c <UART_SetConfig+0x390>
 80070b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a1d      	ldr	r2, [pc, #116]	@ (8007130 <UART_SetConfig+0x344>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d157      	bne.n	8007170 <UART_SetConfig+0x384>
 80070c0:	4b1e      	ldr	r3, [pc, #120]	@ (800713c <UART_SetConfig+0x350>)
 80070c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80070c4:	23c0      	movs	r3, #192	@ 0xc0
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4013      	ands	r3, r2
 80070ca:	22c0      	movs	r2, #192	@ 0xc0
 80070cc:	0092      	lsls	r2, r2, #2
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d040      	beq.n	8007154 <UART_SetConfig+0x368>
 80070d2:	22c0      	movs	r2, #192	@ 0xc0
 80070d4:	0092      	lsls	r2, r2, #2
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d843      	bhi.n	8007162 <UART_SetConfig+0x376>
 80070da:	2280      	movs	r2, #128	@ 0x80
 80070dc:	0092      	lsls	r2, r2, #2
 80070de:	4293      	cmp	r3, r2
 80070e0:	d011      	beq.n	8007106 <UART_SetConfig+0x31a>
 80070e2:	2280      	movs	r2, #128	@ 0x80
 80070e4:	0092      	lsls	r2, r2, #2
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d83b      	bhi.n	8007162 <UART_SetConfig+0x376>
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d004      	beq.n	80070f8 <UART_SetConfig+0x30c>
 80070ee:	2280      	movs	r2, #128	@ 0x80
 80070f0:	0052      	lsls	r2, r2, #1
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d00e      	beq.n	8007114 <UART_SetConfig+0x328>
 80070f6:	e034      	b.n	8007162 <UART_SetConfig+0x376>
 80070f8:	231b      	movs	r3, #27
 80070fa:	2220      	movs	r2, #32
 80070fc:	189b      	adds	r3, r3, r2
 80070fe:	19db      	adds	r3, r3, r7
 8007100:	2200      	movs	r2, #0
 8007102:	701a      	strb	r2, [r3, #0]
 8007104:	e03a      	b.n	800717c <UART_SetConfig+0x390>
 8007106:	231b      	movs	r3, #27
 8007108:	2220      	movs	r2, #32
 800710a:	189b      	adds	r3, r3, r2
 800710c:	19db      	adds	r3, r3, r7
 800710e:	2202      	movs	r2, #2
 8007110:	701a      	strb	r2, [r3, #0]
 8007112:	e033      	b.n	800717c <UART_SetConfig+0x390>
 8007114:	231b      	movs	r3, #27
 8007116:	2220      	movs	r2, #32
 8007118:	189b      	adds	r3, r3, r2
 800711a:	19db      	adds	r3, r3, r7
 800711c:	2204      	movs	r2, #4
 800711e:	701a      	strb	r2, [r3, #0]
 8007120:	e02c      	b.n	800717c <UART_SetConfig+0x390>
 8007122:	46c0      	nop			@ (mov r8, r8)
 8007124:	cfff69f3 	.word	0xcfff69f3
 8007128:	ffffcfff 	.word	0xffffcfff
 800712c:	40008000 	.word	0x40008000
 8007130:	40008400 	.word	0x40008400
 8007134:	11fff4ff 	.word	0x11fff4ff
 8007138:	40013800 	.word	0x40013800
 800713c:	40021000 	.word	0x40021000
 8007140:	40004400 	.word	0x40004400
 8007144:	40004800 	.word	0x40004800
 8007148:	40004c00 	.word	0x40004c00
 800714c:	40005000 	.word	0x40005000
 8007150:	40013c00 	.word	0x40013c00
 8007154:	231b      	movs	r3, #27
 8007156:	2220      	movs	r2, #32
 8007158:	189b      	adds	r3, r3, r2
 800715a:	19db      	adds	r3, r3, r7
 800715c:	2208      	movs	r2, #8
 800715e:	701a      	strb	r2, [r3, #0]
 8007160:	e00c      	b.n	800717c <UART_SetConfig+0x390>
 8007162:	231b      	movs	r3, #27
 8007164:	2220      	movs	r2, #32
 8007166:	189b      	adds	r3, r3, r2
 8007168:	19db      	adds	r3, r3, r7
 800716a:	2210      	movs	r2, #16
 800716c:	701a      	strb	r2, [r3, #0]
 800716e:	e005      	b.n	800717c <UART_SetConfig+0x390>
 8007170:	231b      	movs	r3, #27
 8007172:	2220      	movs	r2, #32
 8007174:	189b      	adds	r3, r3, r2
 8007176:	19db      	adds	r3, r3, r7
 8007178:	2210      	movs	r2, #16
 800717a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800717c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4ac1      	ldr	r2, [pc, #772]	@ (8007488 <UART_SetConfig+0x69c>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d005      	beq.n	8007192 <UART_SetConfig+0x3a6>
 8007186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4ac0      	ldr	r2, [pc, #768]	@ (800748c <UART_SetConfig+0x6a0>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d000      	beq.n	8007192 <UART_SetConfig+0x3a6>
 8007190:	e093      	b.n	80072ba <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007192:	231b      	movs	r3, #27
 8007194:	2220      	movs	r2, #32
 8007196:	189b      	adds	r3, r3, r2
 8007198:	19db      	adds	r3, r3, r7
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	2b08      	cmp	r3, #8
 800719e:	d015      	beq.n	80071cc <UART_SetConfig+0x3e0>
 80071a0:	dc18      	bgt.n	80071d4 <UART_SetConfig+0x3e8>
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	d00d      	beq.n	80071c2 <UART_SetConfig+0x3d6>
 80071a6:	dc15      	bgt.n	80071d4 <UART_SetConfig+0x3e8>
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <UART_SetConfig+0x3c6>
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d005      	beq.n	80071bc <UART_SetConfig+0x3d0>
 80071b0:	e010      	b.n	80071d4 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071b2:	f7fd fb47 	bl	8004844 <HAL_RCC_GetPCLK1Freq>
 80071b6:	0003      	movs	r3, r0
 80071b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071ba:	e014      	b.n	80071e6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071bc:	4bb4      	ldr	r3, [pc, #720]	@ (8007490 <UART_SetConfig+0x6a4>)
 80071be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071c0:	e011      	b.n	80071e6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071c2:	f7fd fab3 	bl	800472c <HAL_RCC_GetSysClockFreq>
 80071c6:	0003      	movs	r3, r0
 80071c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071ca:	e00c      	b.n	80071e6 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071cc:	2380      	movs	r3, #128	@ 0x80
 80071ce:	021b      	lsls	r3, r3, #8
 80071d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071d2:	e008      	b.n	80071e6 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80071d4:	2300      	movs	r3, #0
 80071d6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80071d8:	231a      	movs	r3, #26
 80071da:	2220      	movs	r2, #32
 80071dc:	189b      	adds	r3, r3, r2
 80071de:	19db      	adds	r3, r3, r7
 80071e0:	2201      	movs	r2, #1
 80071e2:	701a      	strb	r2, [r3, #0]
        break;
 80071e4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d100      	bne.n	80071ee <UART_SetConfig+0x402>
 80071ec:	e135      	b.n	800745a <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80071f2:	4ba8      	ldr	r3, [pc, #672]	@ (8007494 <UART_SetConfig+0x6a8>)
 80071f4:	0052      	lsls	r2, r2, #1
 80071f6:	5ad3      	ldrh	r3, [r2, r3]
 80071f8:	0019      	movs	r1, r3
 80071fa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80071fc:	f7f8 ff8c 	bl	8000118 <__udivsi3>
 8007200:	0003      	movs	r3, r0
 8007202:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	0013      	movs	r3, r2
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	189b      	adds	r3, r3, r2
 800720e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007210:	429a      	cmp	r2, r3
 8007212:	d305      	bcc.n	8007220 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800721a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800721c:	429a      	cmp	r2, r3
 800721e:	d906      	bls.n	800722e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8007220:	231a      	movs	r3, #26
 8007222:	2220      	movs	r2, #32
 8007224:	189b      	adds	r3, r3, r2
 8007226:	19db      	adds	r3, r3, r7
 8007228:	2201      	movs	r2, #1
 800722a:	701a      	strb	r2, [r3, #0]
 800722c:	e044      	b.n	80072b8 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800722e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007230:	61bb      	str	r3, [r7, #24]
 8007232:	2300      	movs	r3, #0
 8007234:	61fb      	str	r3, [r7, #28]
 8007236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007238:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800723a:	4b96      	ldr	r3, [pc, #600]	@ (8007494 <UART_SetConfig+0x6a8>)
 800723c:	0052      	lsls	r2, r2, #1
 800723e:	5ad3      	ldrh	r3, [r2, r3]
 8007240:	613b      	str	r3, [r7, #16]
 8007242:	2300      	movs	r3, #0
 8007244:	617b      	str	r3, [r7, #20]
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	69b8      	ldr	r0, [r7, #24]
 800724c:	69f9      	ldr	r1, [r7, #28]
 800724e:	f7f9 f8d9 	bl	8000404 <__aeabi_uldivmod>
 8007252:	0002      	movs	r2, r0
 8007254:	000b      	movs	r3, r1
 8007256:	0e11      	lsrs	r1, r2, #24
 8007258:	021d      	lsls	r5, r3, #8
 800725a:	430d      	orrs	r5, r1
 800725c:	0214      	lsls	r4, r2, #8
 800725e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	085b      	lsrs	r3, r3, #1
 8007264:	60bb      	str	r3, [r7, #8]
 8007266:	2300      	movs	r3, #0
 8007268:	60fb      	str	r3, [r7, #12]
 800726a:	68b8      	ldr	r0, [r7, #8]
 800726c:	68f9      	ldr	r1, [r7, #12]
 800726e:	1900      	adds	r0, r0, r4
 8007270:	4169      	adcs	r1, r5
 8007272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	603b      	str	r3, [r7, #0]
 8007278:	2300      	movs	r3, #0
 800727a:	607b      	str	r3, [r7, #4]
 800727c:	683a      	ldr	r2, [r7, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f7f9 f8c0 	bl	8000404 <__aeabi_uldivmod>
 8007284:	0002      	movs	r2, r0
 8007286:	000b      	movs	r3, r1
 8007288:	0013      	movs	r3, r2
 800728a:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800728c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800728e:	23c0      	movs	r3, #192	@ 0xc0
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	429a      	cmp	r2, r3
 8007294:	d309      	bcc.n	80072aa <UART_SetConfig+0x4be>
 8007296:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007298:	2380      	movs	r3, #128	@ 0x80
 800729a:	035b      	lsls	r3, r3, #13
 800729c:	429a      	cmp	r2, r3
 800729e:	d204      	bcs.n	80072aa <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80072a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072a6:	60da      	str	r2, [r3, #12]
 80072a8:	e006      	b.n	80072b8 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80072aa:	231a      	movs	r3, #26
 80072ac:	2220      	movs	r2, #32
 80072ae:	189b      	adds	r3, r3, r2
 80072b0:	19db      	adds	r3, r3, r7
 80072b2:	2201      	movs	r2, #1
 80072b4:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80072b6:	e0d0      	b.n	800745a <UART_SetConfig+0x66e>
 80072b8:	e0cf      	b.n	800745a <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072bc:	69da      	ldr	r2, [r3, #28]
 80072be:	2380      	movs	r3, #128	@ 0x80
 80072c0:	021b      	lsls	r3, r3, #8
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d000      	beq.n	80072c8 <UART_SetConfig+0x4dc>
 80072c6:	e070      	b.n	80073aa <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80072c8:	231b      	movs	r3, #27
 80072ca:	2220      	movs	r2, #32
 80072cc:	189b      	adds	r3, r3, r2
 80072ce:	19db      	adds	r3, r3, r7
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	2b08      	cmp	r3, #8
 80072d4:	d015      	beq.n	8007302 <UART_SetConfig+0x516>
 80072d6:	dc18      	bgt.n	800730a <UART_SetConfig+0x51e>
 80072d8:	2b04      	cmp	r3, #4
 80072da:	d00d      	beq.n	80072f8 <UART_SetConfig+0x50c>
 80072dc:	dc15      	bgt.n	800730a <UART_SetConfig+0x51e>
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d002      	beq.n	80072e8 <UART_SetConfig+0x4fc>
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d005      	beq.n	80072f2 <UART_SetConfig+0x506>
 80072e6:	e010      	b.n	800730a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072e8:	f7fd faac 	bl	8004844 <HAL_RCC_GetPCLK1Freq>
 80072ec:	0003      	movs	r3, r0
 80072ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072f0:	e014      	b.n	800731c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072f2:	4b67      	ldr	r3, [pc, #412]	@ (8007490 <UART_SetConfig+0x6a4>)
 80072f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80072f6:	e011      	b.n	800731c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072f8:	f7fd fa18 	bl	800472c <HAL_RCC_GetSysClockFreq>
 80072fc:	0003      	movs	r3, r0
 80072fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007300:	e00c      	b.n	800731c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007302:	2380      	movs	r3, #128	@ 0x80
 8007304:	021b      	lsls	r3, r3, #8
 8007306:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007308:	e008      	b.n	800731c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 800730a:	2300      	movs	r3, #0
 800730c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800730e:	231a      	movs	r3, #26
 8007310:	2220      	movs	r2, #32
 8007312:	189b      	adds	r3, r3, r2
 8007314:	19db      	adds	r3, r3, r7
 8007316:	2201      	movs	r2, #1
 8007318:	701a      	strb	r2, [r3, #0]
        break;
 800731a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800731c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800731e:	2b00      	cmp	r3, #0
 8007320:	d100      	bne.n	8007324 <UART_SetConfig+0x538>
 8007322:	e09a      	b.n	800745a <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007326:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007328:	4b5a      	ldr	r3, [pc, #360]	@ (8007494 <UART_SetConfig+0x6a8>)
 800732a:	0052      	lsls	r2, r2, #1
 800732c:	5ad3      	ldrh	r3, [r2, r3]
 800732e:	0019      	movs	r1, r3
 8007330:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007332:	f7f8 fef1 	bl	8000118 <__udivsi3>
 8007336:	0003      	movs	r3, r0
 8007338:	005a      	lsls	r2, r3, #1
 800733a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	085b      	lsrs	r3, r3, #1
 8007340:	18d2      	adds	r2, r2, r3
 8007342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	0019      	movs	r1, r3
 8007348:	0010      	movs	r0, r2
 800734a:	f7f8 fee5 	bl	8000118 <__udivsi3>
 800734e:	0003      	movs	r3, r0
 8007350:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007354:	2b0f      	cmp	r3, #15
 8007356:	d921      	bls.n	800739c <UART_SetConfig+0x5b0>
 8007358:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800735a:	2380      	movs	r3, #128	@ 0x80
 800735c:	025b      	lsls	r3, r3, #9
 800735e:	429a      	cmp	r2, r3
 8007360:	d21c      	bcs.n	800739c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007364:	b29a      	uxth	r2, r3
 8007366:	200e      	movs	r0, #14
 8007368:	2420      	movs	r4, #32
 800736a:	1903      	adds	r3, r0, r4
 800736c:	19db      	adds	r3, r3, r7
 800736e:	210f      	movs	r1, #15
 8007370:	438a      	bics	r2, r1
 8007372:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007376:	085b      	lsrs	r3, r3, #1
 8007378:	b29b      	uxth	r3, r3
 800737a:	2207      	movs	r2, #7
 800737c:	4013      	ands	r3, r2
 800737e:	b299      	uxth	r1, r3
 8007380:	1903      	adds	r3, r0, r4
 8007382:	19db      	adds	r3, r3, r7
 8007384:	1902      	adds	r2, r0, r4
 8007386:	19d2      	adds	r2, r2, r7
 8007388:	8812      	ldrh	r2, [r2, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800738e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	1902      	adds	r2, r0, r4
 8007394:	19d2      	adds	r2, r2, r7
 8007396:	8812      	ldrh	r2, [r2, #0]
 8007398:	60da      	str	r2, [r3, #12]
 800739a:	e05e      	b.n	800745a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800739c:	231a      	movs	r3, #26
 800739e:	2220      	movs	r2, #32
 80073a0:	189b      	adds	r3, r3, r2
 80073a2:	19db      	adds	r3, r3, r7
 80073a4:	2201      	movs	r2, #1
 80073a6:	701a      	strb	r2, [r3, #0]
 80073a8:	e057      	b.n	800745a <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073aa:	231b      	movs	r3, #27
 80073ac:	2220      	movs	r2, #32
 80073ae:	189b      	adds	r3, r3, r2
 80073b0:	19db      	adds	r3, r3, r7
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	2b08      	cmp	r3, #8
 80073b6:	d015      	beq.n	80073e4 <UART_SetConfig+0x5f8>
 80073b8:	dc18      	bgt.n	80073ec <UART_SetConfig+0x600>
 80073ba:	2b04      	cmp	r3, #4
 80073bc:	d00d      	beq.n	80073da <UART_SetConfig+0x5ee>
 80073be:	dc15      	bgt.n	80073ec <UART_SetConfig+0x600>
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d002      	beq.n	80073ca <UART_SetConfig+0x5de>
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d005      	beq.n	80073d4 <UART_SetConfig+0x5e8>
 80073c8:	e010      	b.n	80073ec <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073ca:	f7fd fa3b 	bl	8004844 <HAL_RCC_GetPCLK1Freq>
 80073ce:	0003      	movs	r3, r0
 80073d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073d2:	e014      	b.n	80073fe <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073d4:	4b2e      	ldr	r3, [pc, #184]	@ (8007490 <UART_SetConfig+0x6a4>)
 80073d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073d8:	e011      	b.n	80073fe <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073da:	f7fd f9a7 	bl	800472c <HAL_RCC_GetSysClockFreq>
 80073de:	0003      	movs	r3, r0
 80073e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073e2:	e00c      	b.n	80073fe <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073e4:	2380      	movs	r3, #128	@ 0x80
 80073e6:	021b      	lsls	r3, r3, #8
 80073e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073ea:	e008      	b.n	80073fe <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80073ec:	2300      	movs	r3, #0
 80073ee:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80073f0:	231a      	movs	r3, #26
 80073f2:	2220      	movs	r2, #32
 80073f4:	189b      	adds	r3, r3, r2
 80073f6:	19db      	adds	r3, r3, r7
 80073f8:	2201      	movs	r2, #1
 80073fa:	701a      	strb	r2, [r3, #0]
        break;
 80073fc:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80073fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007400:	2b00      	cmp	r3, #0
 8007402:	d02a      	beq.n	800745a <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007406:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007408:	4b22      	ldr	r3, [pc, #136]	@ (8007494 <UART_SetConfig+0x6a8>)
 800740a:	0052      	lsls	r2, r2, #1
 800740c:	5ad3      	ldrh	r3, [r2, r3]
 800740e:	0019      	movs	r1, r3
 8007410:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007412:	f7f8 fe81 	bl	8000118 <__udivsi3>
 8007416:	0003      	movs	r3, r0
 8007418:	001a      	movs	r2, r3
 800741a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	085b      	lsrs	r3, r3, #1
 8007420:	18d2      	adds	r2, r2, r3
 8007422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	0019      	movs	r1, r3
 8007428:	0010      	movs	r0, r2
 800742a:	f7f8 fe75 	bl	8000118 <__udivsi3>
 800742e:	0003      	movs	r3, r0
 8007430:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007434:	2b0f      	cmp	r3, #15
 8007436:	d90a      	bls.n	800744e <UART_SetConfig+0x662>
 8007438:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800743a:	2380      	movs	r3, #128	@ 0x80
 800743c:	025b      	lsls	r3, r3, #9
 800743e:	429a      	cmp	r2, r3
 8007440:	d205      	bcs.n	800744e <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007444:	b29a      	uxth	r2, r3
 8007446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	60da      	str	r2, [r3, #12]
 800744c:	e005      	b.n	800745a <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800744e:	231a      	movs	r3, #26
 8007450:	2220      	movs	r2, #32
 8007452:	189b      	adds	r3, r3, r2
 8007454:	19db      	adds	r3, r3, r7
 8007456:	2201      	movs	r2, #1
 8007458:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800745a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745c:	226a      	movs	r2, #106	@ 0x6a
 800745e:	2101      	movs	r1, #1
 8007460:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007464:	2268      	movs	r2, #104	@ 0x68
 8007466:	2101      	movs	r1, #1
 8007468:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800746a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746c:	2200      	movs	r2, #0
 800746e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007472:	2200      	movs	r2, #0
 8007474:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007476:	231a      	movs	r3, #26
 8007478:	2220      	movs	r2, #32
 800747a:	189b      	adds	r3, r3, r2
 800747c:	19db      	adds	r3, r3, r7
 800747e:	781b      	ldrb	r3, [r3, #0]
}
 8007480:	0018      	movs	r0, r3
 8007482:	46bd      	mov	sp, r7
 8007484:	b010      	add	sp, #64	@ 0x40
 8007486:	bdb0      	pop	{r4, r5, r7, pc}
 8007488:	40008000 	.word	0x40008000
 800748c:	40008400 	.word	0x40008400
 8007490:	00f42400 	.word	0x00f42400
 8007494:	08008b54 	.word	0x08008b54

08007498 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a4:	2208      	movs	r2, #8
 80074a6:	4013      	ands	r3, r2
 80074a8:	d00b      	beq.n	80074c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	4a4a      	ldr	r2, [pc, #296]	@ (80075dc <UART_AdvFeatureConfig+0x144>)
 80074b2:	4013      	ands	r3, r2
 80074b4:	0019      	movs	r1, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	430a      	orrs	r2, r1
 80074c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c6:	2201      	movs	r2, #1
 80074c8:	4013      	ands	r3, r2
 80074ca:	d00b      	beq.n	80074e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	4a43      	ldr	r2, [pc, #268]	@ (80075e0 <UART_AdvFeatureConfig+0x148>)
 80074d4:	4013      	ands	r3, r2
 80074d6:	0019      	movs	r1, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	430a      	orrs	r2, r1
 80074e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e8:	2202      	movs	r2, #2
 80074ea:	4013      	ands	r3, r2
 80074ec:	d00b      	beq.n	8007506 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	4a3b      	ldr	r2, [pc, #236]	@ (80075e4 <UART_AdvFeatureConfig+0x14c>)
 80074f6:	4013      	ands	r3, r2
 80074f8:	0019      	movs	r1, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	430a      	orrs	r2, r1
 8007504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800750a:	2204      	movs	r2, #4
 800750c:	4013      	ands	r3, r2
 800750e:	d00b      	beq.n	8007528 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	4a34      	ldr	r2, [pc, #208]	@ (80075e8 <UART_AdvFeatureConfig+0x150>)
 8007518:	4013      	ands	r3, r2
 800751a:	0019      	movs	r1, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800752c:	2210      	movs	r2, #16
 800752e:	4013      	ands	r3, r2
 8007530:	d00b      	beq.n	800754a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	4a2c      	ldr	r2, [pc, #176]	@ (80075ec <UART_AdvFeatureConfig+0x154>)
 800753a:	4013      	ands	r3, r2
 800753c:	0019      	movs	r1, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	430a      	orrs	r2, r1
 8007548:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800754e:	2220      	movs	r2, #32
 8007550:	4013      	ands	r3, r2
 8007552:	d00b      	beq.n	800756c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	4a25      	ldr	r2, [pc, #148]	@ (80075f0 <UART_AdvFeatureConfig+0x158>)
 800755c:	4013      	ands	r3, r2
 800755e:	0019      	movs	r1, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	430a      	orrs	r2, r1
 800756a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007570:	2240      	movs	r2, #64	@ 0x40
 8007572:	4013      	ands	r3, r2
 8007574:	d01d      	beq.n	80075b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	4a1d      	ldr	r2, [pc, #116]	@ (80075f4 <UART_AdvFeatureConfig+0x15c>)
 800757e:	4013      	ands	r3, r2
 8007580:	0019      	movs	r1, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	430a      	orrs	r2, r1
 800758c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007592:	2380      	movs	r3, #128	@ 0x80
 8007594:	035b      	lsls	r3, r3, #13
 8007596:	429a      	cmp	r2, r3
 8007598:	d10b      	bne.n	80075b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	4a15      	ldr	r2, [pc, #84]	@ (80075f8 <UART_AdvFeatureConfig+0x160>)
 80075a2:	4013      	ands	r3, r2
 80075a4:	0019      	movs	r1, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b6:	2280      	movs	r2, #128	@ 0x80
 80075b8:	4013      	ands	r3, r2
 80075ba:	d00b      	beq.n	80075d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	4a0e      	ldr	r2, [pc, #56]	@ (80075fc <UART_AdvFeatureConfig+0x164>)
 80075c4:	4013      	ands	r3, r2
 80075c6:	0019      	movs	r1, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	430a      	orrs	r2, r1
 80075d2:	605a      	str	r2, [r3, #4]
  }
}
 80075d4:	46c0      	nop			@ (mov r8, r8)
 80075d6:	46bd      	mov	sp, r7
 80075d8:	b002      	add	sp, #8
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	ffff7fff 	.word	0xffff7fff
 80075e0:	fffdffff 	.word	0xfffdffff
 80075e4:	fffeffff 	.word	0xfffeffff
 80075e8:	fffbffff 	.word	0xfffbffff
 80075ec:	ffffefff 	.word	0xffffefff
 80075f0:	ffffdfff 	.word	0xffffdfff
 80075f4:	ffefffff 	.word	0xffefffff
 80075f8:	ff9fffff 	.word	0xff9fffff
 80075fc:	fff7ffff 	.word	0xfff7ffff

08007600 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b092      	sub	sp, #72	@ 0x48
 8007604:	af02      	add	r7, sp, #8
 8007606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2290      	movs	r2, #144	@ 0x90
 800760c:	2100      	movs	r1, #0
 800760e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007610:	f7fb facc 	bl	8002bac <HAL_GetTick>
 8007614:	0003      	movs	r3, r0
 8007616:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2208      	movs	r2, #8
 8007620:	4013      	ands	r3, r2
 8007622:	2b08      	cmp	r3, #8
 8007624:	d12d      	bne.n	8007682 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007628:	2280      	movs	r2, #128	@ 0x80
 800762a:	0391      	lsls	r1, r2, #14
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	4a47      	ldr	r2, [pc, #284]	@ (800774c <UART_CheckIdleState+0x14c>)
 8007630:	9200      	str	r2, [sp, #0]
 8007632:	2200      	movs	r2, #0
 8007634:	f000 f88e 	bl	8007754 <UART_WaitOnFlagUntilTimeout>
 8007638:	1e03      	subs	r3, r0, #0
 800763a:	d022      	beq.n	8007682 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800763c:	f3ef 8310 	mrs	r3, PRIMASK
 8007640:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007644:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007646:	2301      	movs	r3, #1
 8007648:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800764a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800764c:	f383 8810 	msr	PRIMASK, r3
}
 8007650:	46c0      	nop			@ (mov r8, r8)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2180      	movs	r1, #128	@ 0x80
 800765e:	438a      	bics	r2, r1
 8007660:	601a      	str	r2, [r3, #0]
 8007662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007664:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007668:	f383 8810 	msr	PRIMASK, r3
}
 800766c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2288      	movs	r2, #136	@ 0x88
 8007672:	2120      	movs	r1, #32
 8007674:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2284      	movs	r2, #132	@ 0x84
 800767a:	2100      	movs	r1, #0
 800767c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e060      	b.n	8007744 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2204      	movs	r2, #4
 800768a:	4013      	ands	r3, r2
 800768c:	2b04      	cmp	r3, #4
 800768e:	d146      	bne.n	800771e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007692:	2280      	movs	r2, #128	@ 0x80
 8007694:	03d1      	lsls	r1, r2, #15
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	4a2c      	ldr	r2, [pc, #176]	@ (800774c <UART_CheckIdleState+0x14c>)
 800769a:	9200      	str	r2, [sp, #0]
 800769c:	2200      	movs	r2, #0
 800769e:	f000 f859 	bl	8007754 <UART_WaitOnFlagUntilTimeout>
 80076a2:	1e03      	subs	r3, r0, #0
 80076a4:	d03b      	beq.n	800771e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076a6:	f3ef 8310 	mrs	r3, PRIMASK
 80076aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80076ac:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80076b0:	2301      	movs	r3, #1
 80076b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	f383 8810 	msr	PRIMASK, r3
}
 80076ba:	46c0      	nop			@ (mov r8, r8)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4922      	ldr	r1, [pc, #136]	@ (8007750 <UART_CheckIdleState+0x150>)
 80076c8:	400a      	ands	r2, r1
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f383 8810 	msr	PRIMASK, r3
}
 80076d6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076d8:	f3ef 8310 	mrs	r3, PRIMASK
 80076dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80076de:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80076e2:	2301      	movs	r3, #1
 80076e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	f383 8810 	msr	PRIMASK, r3
}
 80076ec:	46c0      	nop			@ (mov r8, r8)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	689a      	ldr	r2, [r3, #8]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2101      	movs	r1, #1
 80076fa:	438a      	bics	r2, r1
 80076fc:	609a      	str	r2, [r3, #8]
 80076fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007700:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007702:	6a3b      	ldr	r3, [r7, #32]
 8007704:	f383 8810 	msr	PRIMASK, r3
}
 8007708:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	228c      	movs	r2, #140	@ 0x8c
 800770e:	2120      	movs	r1, #32
 8007710:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2284      	movs	r2, #132	@ 0x84
 8007716:	2100      	movs	r1, #0
 8007718:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e012      	b.n	8007744 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2288      	movs	r2, #136	@ 0x88
 8007722:	2120      	movs	r1, #32
 8007724:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	228c      	movs	r2, #140	@ 0x8c
 800772a:	2120      	movs	r1, #32
 800772c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2284      	movs	r2, #132	@ 0x84
 800773e:	2100      	movs	r1, #0
 8007740:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	0018      	movs	r0, r3
 8007746:	46bd      	mov	sp, r7
 8007748:	b010      	add	sp, #64	@ 0x40
 800774a:	bd80      	pop	{r7, pc}
 800774c:	01ffffff 	.word	0x01ffffff
 8007750:	fffffedf 	.word	0xfffffedf

08007754 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	603b      	str	r3, [r7, #0]
 8007760:	1dfb      	adds	r3, r7, #7
 8007762:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007764:	e051      	b.n	800780a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	3301      	adds	r3, #1
 800776a:	d04e      	beq.n	800780a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800776c:	f7fb fa1e 	bl	8002bac <HAL_GetTick>
 8007770:	0002      	movs	r2, r0
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	69ba      	ldr	r2, [r7, #24]
 8007778:	429a      	cmp	r2, r3
 800777a:	d302      	bcc.n	8007782 <UART_WaitOnFlagUntilTimeout+0x2e>
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d101      	bne.n	8007786 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e051      	b.n	800782a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2204      	movs	r2, #4
 800778e:	4013      	ands	r3, r2
 8007790:	d03b      	beq.n	800780a <UART_WaitOnFlagUntilTimeout+0xb6>
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	2b80      	cmp	r3, #128	@ 0x80
 8007796:	d038      	beq.n	800780a <UART_WaitOnFlagUntilTimeout+0xb6>
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2b40      	cmp	r3, #64	@ 0x40
 800779c:	d035      	beq.n	800780a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	69db      	ldr	r3, [r3, #28]
 80077a4:	2208      	movs	r2, #8
 80077a6:	4013      	ands	r3, r2
 80077a8:	2b08      	cmp	r3, #8
 80077aa:	d111      	bne.n	80077d0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2208      	movs	r2, #8
 80077b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	0018      	movs	r0, r3
 80077b8:	f000 f83c 	bl	8007834 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2290      	movs	r2, #144	@ 0x90
 80077c0:	2108      	movs	r1, #8
 80077c2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2284      	movs	r2, #132	@ 0x84
 80077c8:	2100      	movs	r1, #0
 80077ca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e02c      	b.n	800782a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	69da      	ldr	r2, [r3, #28]
 80077d6:	2380      	movs	r3, #128	@ 0x80
 80077d8:	011b      	lsls	r3, r3, #4
 80077da:	401a      	ands	r2, r3
 80077dc:	2380      	movs	r3, #128	@ 0x80
 80077de:	011b      	lsls	r3, r3, #4
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d112      	bne.n	800780a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2280      	movs	r2, #128	@ 0x80
 80077ea:	0112      	lsls	r2, r2, #4
 80077ec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	0018      	movs	r0, r3
 80077f2:	f000 f81f 	bl	8007834 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2290      	movs	r2, #144	@ 0x90
 80077fa:	2120      	movs	r1, #32
 80077fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2284      	movs	r2, #132	@ 0x84
 8007802:	2100      	movs	r1, #0
 8007804:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e00f      	b.n	800782a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	69db      	ldr	r3, [r3, #28]
 8007810:	68ba      	ldr	r2, [r7, #8]
 8007812:	4013      	ands	r3, r2
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	425a      	negs	r2, r3
 800781a:	4153      	adcs	r3, r2
 800781c:	b2db      	uxtb	r3, r3
 800781e:	001a      	movs	r2, r3
 8007820:	1dfb      	adds	r3, r7, #7
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	429a      	cmp	r2, r3
 8007826:	d09e      	beq.n	8007766 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	0018      	movs	r0, r3
 800782c:	46bd      	mov	sp, r7
 800782e:	b004      	add	sp, #16
 8007830:	bd80      	pop	{r7, pc}
	...

08007834 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b08e      	sub	sp, #56	@ 0x38
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800783c:	f3ef 8310 	mrs	r3, PRIMASK
 8007840:	617b      	str	r3, [r7, #20]
  return(result);
 8007842:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007844:	637b      	str	r3, [r7, #52]	@ 0x34
 8007846:	2301      	movs	r3, #1
 8007848:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	f383 8810 	msr	PRIMASK, r3
}
 8007850:	46c0      	nop			@ (mov r8, r8)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4926      	ldr	r1, [pc, #152]	@ (80078f8 <UART_EndRxTransfer+0xc4>)
 800785e:	400a      	ands	r2, r1
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007864:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	f383 8810 	msr	PRIMASK, r3
}
 800786c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800786e:	f3ef 8310 	mrs	r3, PRIMASK
 8007872:	623b      	str	r3, [r7, #32]
  return(result);
 8007874:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007876:	633b      	str	r3, [r7, #48]	@ 0x30
 8007878:	2301      	movs	r3, #1
 800787a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800787c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787e:	f383 8810 	msr	PRIMASK, r3
}
 8007882:	46c0      	nop			@ (mov r8, r8)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689a      	ldr	r2, [r3, #8]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	491b      	ldr	r1, [pc, #108]	@ (80078fc <UART_EndRxTransfer+0xc8>)
 8007890:	400a      	ands	r2, r1
 8007892:	609a      	str	r2, [r3, #8]
 8007894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007896:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800789a:	f383 8810 	msr	PRIMASK, r3
}
 800789e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d118      	bne.n	80078da <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078a8:	f3ef 8310 	mrs	r3, PRIMASK
 80078ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80078ae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078b2:	2301      	movs	r3, #1
 80078b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f383 8810 	msr	PRIMASK, r3
}
 80078bc:	46c0      	nop			@ (mov r8, r8)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2110      	movs	r1, #16
 80078ca:	438a      	bics	r2, r1
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	f383 8810 	msr	PRIMASK, r3
}
 80078d8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	228c      	movs	r2, #140	@ 0x8c
 80078de:	2120      	movs	r1, #32
 80078e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80078ee:	46c0      	nop			@ (mov r8, r8)
 80078f0:	46bd      	mov	sp, r7
 80078f2:	b00e      	add	sp, #56	@ 0x38
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	46c0      	nop			@ (mov r8, r8)
 80078f8:	fffffedf 	.word	0xfffffedf
 80078fc:	effffffe 	.word	0xeffffffe

08007900 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2284      	movs	r2, #132	@ 0x84
 800790c:	5c9b      	ldrb	r3, [r3, r2]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d101      	bne.n	8007916 <HAL_UARTEx_DisableFifoMode+0x16>
 8007912:	2302      	movs	r3, #2
 8007914:	e027      	b.n	8007966 <HAL_UARTEx_DisableFifoMode+0x66>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2284      	movs	r2, #132	@ 0x84
 800791a:	2101      	movs	r1, #1
 800791c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2288      	movs	r2, #136	@ 0x88
 8007922:	2124      	movs	r1, #36	@ 0x24
 8007924:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2101      	movs	r1, #1
 800793a:	438a      	bics	r2, r1
 800793c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	4a0b      	ldr	r2, [pc, #44]	@ (8007970 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007942:	4013      	ands	r3, r2
 8007944:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2288      	movs	r2, #136	@ 0x88
 8007958:	2120      	movs	r1, #32
 800795a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2284      	movs	r2, #132	@ 0x84
 8007960:	2100      	movs	r1, #0
 8007962:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	0018      	movs	r0, r3
 8007968:	46bd      	mov	sp, r7
 800796a:	b004      	add	sp, #16
 800796c:	bd80      	pop	{r7, pc}
 800796e:	46c0      	nop			@ (mov r8, r8)
 8007970:	dfffffff 	.word	0xdfffffff

08007974 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2284      	movs	r2, #132	@ 0x84
 8007982:	5c9b      	ldrb	r3, [r3, r2]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d101      	bne.n	800798c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007988:	2302      	movs	r3, #2
 800798a:	e02e      	b.n	80079ea <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2284      	movs	r2, #132	@ 0x84
 8007990:	2101      	movs	r1, #1
 8007992:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2288      	movs	r2, #136	@ 0x88
 8007998:	2124      	movs	r1, #36	@ 0x24
 800799a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2101      	movs	r1, #1
 80079b0:	438a      	bics	r2, r1
 80079b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	00db      	lsls	r3, r3, #3
 80079bc:	08d9      	lsrs	r1, r3, #3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	683a      	ldr	r2, [r7, #0]
 80079c4:	430a      	orrs	r2, r1
 80079c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	0018      	movs	r0, r3
 80079cc:	f000 f854 	bl	8007a78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2288      	movs	r2, #136	@ 0x88
 80079dc:	2120      	movs	r1, #32
 80079de:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2284      	movs	r2, #132	@ 0x84
 80079e4:	2100      	movs	r1, #0
 80079e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	0018      	movs	r0, r3
 80079ec:	46bd      	mov	sp, r7
 80079ee:	b004      	add	sp, #16
 80079f0:	bd80      	pop	{r7, pc}
	...

080079f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2284      	movs	r2, #132	@ 0x84
 8007a02:	5c9b      	ldrb	r3, [r3, r2]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d101      	bne.n	8007a0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a08:	2302      	movs	r3, #2
 8007a0a:	e02f      	b.n	8007a6c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2284      	movs	r2, #132	@ 0x84
 8007a10:	2101      	movs	r1, #1
 8007a12:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2288      	movs	r2, #136	@ 0x88
 8007a18:	2124      	movs	r1, #36	@ 0x24
 8007a1a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2101      	movs	r1, #1
 8007a30:	438a      	bics	r2, r1
 8007a32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	4a0e      	ldr	r2, [pc, #56]	@ (8007a74 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	0019      	movs	r1, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	430a      	orrs	r2, r1
 8007a48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	0018      	movs	r0, r3
 8007a4e:	f000 f813 	bl	8007a78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2288      	movs	r2, #136	@ 0x88
 8007a5e:	2120      	movs	r1, #32
 8007a60:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2284      	movs	r2, #132	@ 0x84
 8007a66:	2100      	movs	r1, #0
 8007a68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	0018      	movs	r0, r3
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	b004      	add	sp, #16
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	f1ffffff 	.word	0xf1ffffff

08007a78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d108      	bne.n	8007a9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	226a      	movs	r2, #106	@ 0x6a
 8007a8c:	2101      	movs	r1, #1
 8007a8e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2268      	movs	r2, #104	@ 0x68
 8007a94:	2101      	movs	r1, #1
 8007a96:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a98:	e043      	b.n	8007b22 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a9a:	260f      	movs	r6, #15
 8007a9c:	19bb      	adds	r3, r7, r6
 8007a9e:	2208      	movs	r2, #8
 8007aa0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007aa2:	200e      	movs	r0, #14
 8007aa4:	183b      	adds	r3, r7, r0
 8007aa6:	2208      	movs	r2, #8
 8007aa8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	0e5b      	lsrs	r3, r3, #25
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	240d      	movs	r4, #13
 8007ab6:	193b      	adds	r3, r7, r4
 8007ab8:	2107      	movs	r1, #7
 8007aba:	400a      	ands	r2, r1
 8007abc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	0f5b      	lsrs	r3, r3, #29
 8007ac6:	b2da      	uxtb	r2, r3
 8007ac8:	250c      	movs	r5, #12
 8007aca:	197b      	adds	r3, r7, r5
 8007acc:	2107      	movs	r1, #7
 8007ace:	400a      	ands	r2, r1
 8007ad0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ad2:	183b      	adds	r3, r7, r0
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	197a      	adds	r2, r7, r5
 8007ad8:	7812      	ldrb	r2, [r2, #0]
 8007ada:	4914      	ldr	r1, [pc, #80]	@ (8007b2c <UARTEx_SetNbDataToProcess+0xb4>)
 8007adc:	5c8a      	ldrb	r2, [r1, r2]
 8007ade:	435a      	muls	r2, r3
 8007ae0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ae2:	197b      	adds	r3, r7, r5
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	4a12      	ldr	r2, [pc, #72]	@ (8007b30 <UARTEx_SetNbDataToProcess+0xb8>)
 8007ae8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007aea:	0019      	movs	r1, r3
 8007aec:	f7f8 fb9e 	bl	800022c <__divsi3>
 8007af0:	0003      	movs	r3, r0
 8007af2:	b299      	uxth	r1, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	226a      	movs	r2, #106	@ 0x6a
 8007af8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007afa:	19bb      	adds	r3, r7, r6
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	193a      	adds	r2, r7, r4
 8007b00:	7812      	ldrb	r2, [r2, #0]
 8007b02:	490a      	ldr	r1, [pc, #40]	@ (8007b2c <UARTEx_SetNbDataToProcess+0xb4>)
 8007b04:	5c8a      	ldrb	r2, [r1, r2]
 8007b06:	435a      	muls	r2, r3
 8007b08:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b0a:	193b      	adds	r3, r7, r4
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	4a08      	ldr	r2, [pc, #32]	@ (8007b30 <UARTEx_SetNbDataToProcess+0xb8>)
 8007b10:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b12:	0019      	movs	r1, r3
 8007b14:	f7f8 fb8a 	bl	800022c <__divsi3>
 8007b18:	0003      	movs	r3, r0
 8007b1a:	b299      	uxth	r1, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2268      	movs	r2, #104	@ 0x68
 8007b20:	5299      	strh	r1, [r3, r2]
}
 8007b22:	46c0      	nop			@ (mov r8, r8)
 8007b24:	46bd      	mov	sp, r7
 8007b26:	b005      	add	sp, #20
 8007b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b2a:	46c0      	nop			@ (mov r8, r8)
 8007b2c:	08008b6c 	.word	0x08008b6c
 8007b30:	08008b74 	.word	0x08008b74

08007b34 <siprintf>:
 8007b34:	b40e      	push	{r1, r2, r3}
 8007b36:	b500      	push	{lr}
 8007b38:	490b      	ldr	r1, [pc, #44]	@ (8007b68 <siprintf+0x34>)
 8007b3a:	b09c      	sub	sp, #112	@ 0x70
 8007b3c:	ab1d      	add	r3, sp, #116	@ 0x74
 8007b3e:	9002      	str	r0, [sp, #8]
 8007b40:	9006      	str	r0, [sp, #24]
 8007b42:	9107      	str	r1, [sp, #28]
 8007b44:	9104      	str	r1, [sp, #16]
 8007b46:	4809      	ldr	r0, [pc, #36]	@ (8007b6c <siprintf+0x38>)
 8007b48:	4909      	ldr	r1, [pc, #36]	@ (8007b70 <siprintf+0x3c>)
 8007b4a:	cb04      	ldmia	r3!, {r2}
 8007b4c:	9105      	str	r1, [sp, #20]
 8007b4e:	6800      	ldr	r0, [r0, #0]
 8007b50:	a902      	add	r1, sp, #8
 8007b52:	9301      	str	r3, [sp, #4]
 8007b54:	f000 f9a8 	bl	8007ea8 <_svfiprintf_r>
 8007b58:	2200      	movs	r2, #0
 8007b5a:	9b02      	ldr	r3, [sp, #8]
 8007b5c:	701a      	strb	r2, [r3, #0]
 8007b5e:	b01c      	add	sp, #112	@ 0x70
 8007b60:	bc08      	pop	{r3}
 8007b62:	b003      	add	sp, #12
 8007b64:	4718      	bx	r3
 8007b66:	46c0      	nop			@ (mov r8, r8)
 8007b68:	7fffffff 	.word	0x7fffffff
 8007b6c:	200004fc 	.word	0x200004fc
 8007b70:	ffff0208 	.word	0xffff0208

08007b74 <memset>:
 8007b74:	0003      	movs	r3, r0
 8007b76:	1882      	adds	r2, r0, r2
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d100      	bne.n	8007b7e <memset+0xa>
 8007b7c:	4770      	bx	lr
 8007b7e:	7019      	strb	r1, [r3, #0]
 8007b80:	3301      	adds	r3, #1
 8007b82:	e7f9      	b.n	8007b78 <memset+0x4>

08007b84 <__errno>:
 8007b84:	4b01      	ldr	r3, [pc, #4]	@ (8007b8c <__errno+0x8>)
 8007b86:	6818      	ldr	r0, [r3, #0]
 8007b88:	4770      	bx	lr
 8007b8a:	46c0      	nop			@ (mov r8, r8)
 8007b8c:	200004fc 	.word	0x200004fc

08007b90 <__libc_init_array>:
 8007b90:	b570      	push	{r4, r5, r6, lr}
 8007b92:	2600      	movs	r6, #0
 8007b94:	4c0c      	ldr	r4, [pc, #48]	@ (8007bc8 <__libc_init_array+0x38>)
 8007b96:	4d0d      	ldr	r5, [pc, #52]	@ (8007bcc <__libc_init_array+0x3c>)
 8007b98:	1b64      	subs	r4, r4, r5
 8007b9a:	10a4      	asrs	r4, r4, #2
 8007b9c:	42a6      	cmp	r6, r4
 8007b9e:	d109      	bne.n	8007bb4 <__libc_init_array+0x24>
 8007ba0:	2600      	movs	r6, #0
 8007ba2:	f000 fc65 	bl	8008470 <_init>
 8007ba6:	4c0a      	ldr	r4, [pc, #40]	@ (8007bd0 <__libc_init_array+0x40>)
 8007ba8:	4d0a      	ldr	r5, [pc, #40]	@ (8007bd4 <__libc_init_array+0x44>)
 8007baa:	1b64      	subs	r4, r4, r5
 8007bac:	10a4      	asrs	r4, r4, #2
 8007bae:	42a6      	cmp	r6, r4
 8007bb0:	d105      	bne.n	8007bbe <__libc_init_array+0x2e>
 8007bb2:	bd70      	pop	{r4, r5, r6, pc}
 8007bb4:	00b3      	lsls	r3, r6, #2
 8007bb6:	58eb      	ldr	r3, [r5, r3]
 8007bb8:	4798      	blx	r3
 8007bba:	3601      	adds	r6, #1
 8007bbc:	e7ee      	b.n	8007b9c <__libc_init_array+0xc>
 8007bbe:	00b3      	lsls	r3, r6, #2
 8007bc0:	58eb      	ldr	r3, [r5, r3]
 8007bc2:	4798      	blx	r3
 8007bc4:	3601      	adds	r6, #1
 8007bc6:	e7f2      	b.n	8007bae <__libc_init_array+0x1e>
 8007bc8:	08008bb8 	.word	0x08008bb8
 8007bcc:	08008bb8 	.word	0x08008bb8
 8007bd0:	08008bbc 	.word	0x08008bbc
 8007bd4:	08008bb8 	.word	0x08008bb8

08007bd8 <__retarget_lock_acquire_recursive>:
 8007bd8:	4770      	bx	lr

08007bda <__retarget_lock_release_recursive>:
 8007bda:	4770      	bx	lr

08007bdc <memcpy>:
 8007bdc:	2300      	movs	r3, #0
 8007bde:	b510      	push	{r4, lr}
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d100      	bne.n	8007be6 <memcpy+0xa>
 8007be4:	bd10      	pop	{r4, pc}
 8007be6:	5ccc      	ldrb	r4, [r1, r3]
 8007be8:	54c4      	strb	r4, [r0, r3]
 8007bea:	3301      	adds	r3, #1
 8007bec:	e7f8      	b.n	8007be0 <memcpy+0x4>
	...

08007bf0 <_free_r>:
 8007bf0:	b570      	push	{r4, r5, r6, lr}
 8007bf2:	0005      	movs	r5, r0
 8007bf4:	1e0c      	subs	r4, r1, #0
 8007bf6:	d010      	beq.n	8007c1a <_free_r+0x2a>
 8007bf8:	3c04      	subs	r4, #4
 8007bfa:	6823      	ldr	r3, [r4, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	da00      	bge.n	8007c02 <_free_r+0x12>
 8007c00:	18e4      	adds	r4, r4, r3
 8007c02:	0028      	movs	r0, r5
 8007c04:	f000 f8e0 	bl	8007dc8 <__malloc_lock>
 8007c08:	4a1d      	ldr	r2, [pc, #116]	@ (8007c80 <_free_r+0x90>)
 8007c0a:	6813      	ldr	r3, [r2, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d105      	bne.n	8007c1c <_free_r+0x2c>
 8007c10:	6063      	str	r3, [r4, #4]
 8007c12:	6014      	str	r4, [r2, #0]
 8007c14:	0028      	movs	r0, r5
 8007c16:	f000 f8df 	bl	8007dd8 <__malloc_unlock>
 8007c1a:	bd70      	pop	{r4, r5, r6, pc}
 8007c1c:	42a3      	cmp	r3, r4
 8007c1e:	d908      	bls.n	8007c32 <_free_r+0x42>
 8007c20:	6820      	ldr	r0, [r4, #0]
 8007c22:	1821      	adds	r1, r4, r0
 8007c24:	428b      	cmp	r3, r1
 8007c26:	d1f3      	bne.n	8007c10 <_free_r+0x20>
 8007c28:	6819      	ldr	r1, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	1809      	adds	r1, r1, r0
 8007c2e:	6021      	str	r1, [r4, #0]
 8007c30:	e7ee      	b.n	8007c10 <_free_r+0x20>
 8007c32:	001a      	movs	r2, r3
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d001      	beq.n	8007c3e <_free_r+0x4e>
 8007c3a:	42a3      	cmp	r3, r4
 8007c3c:	d9f9      	bls.n	8007c32 <_free_r+0x42>
 8007c3e:	6811      	ldr	r1, [r2, #0]
 8007c40:	1850      	adds	r0, r2, r1
 8007c42:	42a0      	cmp	r0, r4
 8007c44:	d10b      	bne.n	8007c5e <_free_r+0x6e>
 8007c46:	6820      	ldr	r0, [r4, #0]
 8007c48:	1809      	adds	r1, r1, r0
 8007c4a:	1850      	adds	r0, r2, r1
 8007c4c:	6011      	str	r1, [r2, #0]
 8007c4e:	4283      	cmp	r3, r0
 8007c50:	d1e0      	bne.n	8007c14 <_free_r+0x24>
 8007c52:	6818      	ldr	r0, [r3, #0]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	1841      	adds	r1, r0, r1
 8007c58:	6011      	str	r1, [r2, #0]
 8007c5a:	6053      	str	r3, [r2, #4]
 8007c5c:	e7da      	b.n	8007c14 <_free_r+0x24>
 8007c5e:	42a0      	cmp	r0, r4
 8007c60:	d902      	bls.n	8007c68 <_free_r+0x78>
 8007c62:	230c      	movs	r3, #12
 8007c64:	602b      	str	r3, [r5, #0]
 8007c66:	e7d5      	b.n	8007c14 <_free_r+0x24>
 8007c68:	6820      	ldr	r0, [r4, #0]
 8007c6a:	1821      	adds	r1, r4, r0
 8007c6c:	428b      	cmp	r3, r1
 8007c6e:	d103      	bne.n	8007c78 <_free_r+0x88>
 8007c70:	6819      	ldr	r1, [r3, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	1809      	adds	r1, r1, r0
 8007c76:	6021      	str	r1, [r4, #0]
 8007c78:	6063      	str	r3, [r4, #4]
 8007c7a:	6054      	str	r4, [r2, #4]
 8007c7c:	e7ca      	b.n	8007c14 <_free_r+0x24>
 8007c7e:	46c0      	nop			@ (mov r8, r8)
 8007c80:	20000984 	.word	0x20000984

08007c84 <sbrk_aligned>:
 8007c84:	b570      	push	{r4, r5, r6, lr}
 8007c86:	4e0f      	ldr	r6, [pc, #60]	@ (8007cc4 <sbrk_aligned+0x40>)
 8007c88:	000d      	movs	r5, r1
 8007c8a:	6831      	ldr	r1, [r6, #0]
 8007c8c:	0004      	movs	r4, r0
 8007c8e:	2900      	cmp	r1, #0
 8007c90:	d102      	bne.n	8007c98 <sbrk_aligned+0x14>
 8007c92:	f000 fb99 	bl	80083c8 <_sbrk_r>
 8007c96:	6030      	str	r0, [r6, #0]
 8007c98:	0029      	movs	r1, r5
 8007c9a:	0020      	movs	r0, r4
 8007c9c:	f000 fb94 	bl	80083c8 <_sbrk_r>
 8007ca0:	1c43      	adds	r3, r0, #1
 8007ca2:	d103      	bne.n	8007cac <sbrk_aligned+0x28>
 8007ca4:	2501      	movs	r5, #1
 8007ca6:	426d      	negs	r5, r5
 8007ca8:	0028      	movs	r0, r5
 8007caa:	bd70      	pop	{r4, r5, r6, pc}
 8007cac:	2303      	movs	r3, #3
 8007cae:	1cc5      	adds	r5, r0, #3
 8007cb0:	439d      	bics	r5, r3
 8007cb2:	42a8      	cmp	r0, r5
 8007cb4:	d0f8      	beq.n	8007ca8 <sbrk_aligned+0x24>
 8007cb6:	1a29      	subs	r1, r5, r0
 8007cb8:	0020      	movs	r0, r4
 8007cba:	f000 fb85 	bl	80083c8 <_sbrk_r>
 8007cbe:	3001      	adds	r0, #1
 8007cc0:	d1f2      	bne.n	8007ca8 <sbrk_aligned+0x24>
 8007cc2:	e7ef      	b.n	8007ca4 <sbrk_aligned+0x20>
 8007cc4:	20000980 	.word	0x20000980

08007cc8 <_malloc_r>:
 8007cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cca:	2203      	movs	r2, #3
 8007ccc:	1ccb      	adds	r3, r1, #3
 8007cce:	4393      	bics	r3, r2
 8007cd0:	3308      	adds	r3, #8
 8007cd2:	0005      	movs	r5, r0
 8007cd4:	001f      	movs	r7, r3
 8007cd6:	2b0c      	cmp	r3, #12
 8007cd8:	d234      	bcs.n	8007d44 <_malloc_r+0x7c>
 8007cda:	270c      	movs	r7, #12
 8007cdc:	42b9      	cmp	r1, r7
 8007cde:	d833      	bhi.n	8007d48 <_malloc_r+0x80>
 8007ce0:	0028      	movs	r0, r5
 8007ce2:	f000 f871 	bl	8007dc8 <__malloc_lock>
 8007ce6:	4e37      	ldr	r6, [pc, #220]	@ (8007dc4 <_malloc_r+0xfc>)
 8007ce8:	6833      	ldr	r3, [r6, #0]
 8007cea:	001c      	movs	r4, r3
 8007cec:	2c00      	cmp	r4, #0
 8007cee:	d12f      	bne.n	8007d50 <_malloc_r+0x88>
 8007cf0:	0039      	movs	r1, r7
 8007cf2:	0028      	movs	r0, r5
 8007cf4:	f7ff ffc6 	bl	8007c84 <sbrk_aligned>
 8007cf8:	0004      	movs	r4, r0
 8007cfa:	1c43      	adds	r3, r0, #1
 8007cfc:	d15f      	bne.n	8007dbe <_malloc_r+0xf6>
 8007cfe:	6834      	ldr	r4, [r6, #0]
 8007d00:	9400      	str	r4, [sp, #0]
 8007d02:	9b00      	ldr	r3, [sp, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d14a      	bne.n	8007d9e <_malloc_r+0xd6>
 8007d08:	2c00      	cmp	r4, #0
 8007d0a:	d052      	beq.n	8007db2 <_malloc_r+0xea>
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	0028      	movs	r0, r5
 8007d10:	18e3      	adds	r3, r4, r3
 8007d12:	9900      	ldr	r1, [sp, #0]
 8007d14:	9301      	str	r3, [sp, #4]
 8007d16:	f000 fb57 	bl	80083c8 <_sbrk_r>
 8007d1a:	9b01      	ldr	r3, [sp, #4]
 8007d1c:	4283      	cmp	r3, r0
 8007d1e:	d148      	bne.n	8007db2 <_malloc_r+0xea>
 8007d20:	6823      	ldr	r3, [r4, #0]
 8007d22:	0028      	movs	r0, r5
 8007d24:	1aff      	subs	r7, r7, r3
 8007d26:	0039      	movs	r1, r7
 8007d28:	f7ff ffac 	bl	8007c84 <sbrk_aligned>
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	d040      	beq.n	8007db2 <_malloc_r+0xea>
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	19db      	adds	r3, r3, r7
 8007d34:	6023      	str	r3, [r4, #0]
 8007d36:	6833      	ldr	r3, [r6, #0]
 8007d38:	685a      	ldr	r2, [r3, #4]
 8007d3a:	2a00      	cmp	r2, #0
 8007d3c:	d133      	bne.n	8007da6 <_malloc_r+0xde>
 8007d3e:	9b00      	ldr	r3, [sp, #0]
 8007d40:	6033      	str	r3, [r6, #0]
 8007d42:	e019      	b.n	8007d78 <_malloc_r+0xb0>
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	dac9      	bge.n	8007cdc <_malloc_r+0x14>
 8007d48:	230c      	movs	r3, #12
 8007d4a:	602b      	str	r3, [r5, #0]
 8007d4c:	2000      	movs	r0, #0
 8007d4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d50:	6821      	ldr	r1, [r4, #0]
 8007d52:	1bc9      	subs	r1, r1, r7
 8007d54:	d420      	bmi.n	8007d98 <_malloc_r+0xd0>
 8007d56:	290b      	cmp	r1, #11
 8007d58:	d90a      	bls.n	8007d70 <_malloc_r+0xa8>
 8007d5a:	19e2      	adds	r2, r4, r7
 8007d5c:	6027      	str	r7, [r4, #0]
 8007d5e:	42a3      	cmp	r3, r4
 8007d60:	d104      	bne.n	8007d6c <_malloc_r+0xa4>
 8007d62:	6032      	str	r2, [r6, #0]
 8007d64:	6863      	ldr	r3, [r4, #4]
 8007d66:	6011      	str	r1, [r2, #0]
 8007d68:	6053      	str	r3, [r2, #4]
 8007d6a:	e005      	b.n	8007d78 <_malloc_r+0xb0>
 8007d6c:	605a      	str	r2, [r3, #4]
 8007d6e:	e7f9      	b.n	8007d64 <_malloc_r+0x9c>
 8007d70:	6862      	ldr	r2, [r4, #4]
 8007d72:	42a3      	cmp	r3, r4
 8007d74:	d10e      	bne.n	8007d94 <_malloc_r+0xcc>
 8007d76:	6032      	str	r2, [r6, #0]
 8007d78:	0028      	movs	r0, r5
 8007d7a:	f000 f82d 	bl	8007dd8 <__malloc_unlock>
 8007d7e:	0020      	movs	r0, r4
 8007d80:	2207      	movs	r2, #7
 8007d82:	300b      	adds	r0, #11
 8007d84:	1d23      	adds	r3, r4, #4
 8007d86:	4390      	bics	r0, r2
 8007d88:	1ac2      	subs	r2, r0, r3
 8007d8a:	4298      	cmp	r0, r3
 8007d8c:	d0df      	beq.n	8007d4e <_malloc_r+0x86>
 8007d8e:	1a1b      	subs	r3, r3, r0
 8007d90:	50a3      	str	r3, [r4, r2]
 8007d92:	e7dc      	b.n	8007d4e <_malloc_r+0x86>
 8007d94:	605a      	str	r2, [r3, #4]
 8007d96:	e7ef      	b.n	8007d78 <_malloc_r+0xb0>
 8007d98:	0023      	movs	r3, r4
 8007d9a:	6864      	ldr	r4, [r4, #4]
 8007d9c:	e7a6      	b.n	8007cec <_malloc_r+0x24>
 8007d9e:	9c00      	ldr	r4, [sp, #0]
 8007da0:	6863      	ldr	r3, [r4, #4]
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	e7ad      	b.n	8007d02 <_malloc_r+0x3a>
 8007da6:	001a      	movs	r2, r3
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	42a3      	cmp	r3, r4
 8007dac:	d1fb      	bne.n	8007da6 <_malloc_r+0xde>
 8007dae:	2300      	movs	r3, #0
 8007db0:	e7da      	b.n	8007d68 <_malloc_r+0xa0>
 8007db2:	230c      	movs	r3, #12
 8007db4:	0028      	movs	r0, r5
 8007db6:	602b      	str	r3, [r5, #0]
 8007db8:	f000 f80e 	bl	8007dd8 <__malloc_unlock>
 8007dbc:	e7c6      	b.n	8007d4c <_malloc_r+0x84>
 8007dbe:	6007      	str	r7, [r0, #0]
 8007dc0:	e7da      	b.n	8007d78 <_malloc_r+0xb0>
 8007dc2:	46c0      	nop			@ (mov r8, r8)
 8007dc4:	20000984 	.word	0x20000984

08007dc8 <__malloc_lock>:
 8007dc8:	b510      	push	{r4, lr}
 8007dca:	4802      	ldr	r0, [pc, #8]	@ (8007dd4 <__malloc_lock+0xc>)
 8007dcc:	f7ff ff04 	bl	8007bd8 <__retarget_lock_acquire_recursive>
 8007dd0:	bd10      	pop	{r4, pc}
 8007dd2:	46c0      	nop			@ (mov r8, r8)
 8007dd4:	2000097c 	.word	0x2000097c

08007dd8 <__malloc_unlock>:
 8007dd8:	b510      	push	{r4, lr}
 8007dda:	4802      	ldr	r0, [pc, #8]	@ (8007de4 <__malloc_unlock+0xc>)
 8007ddc:	f7ff fefd 	bl	8007bda <__retarget_lock_release_recursive>
 8007de0:	bd10      	pop	{r4, pc}
 8007de2:	46c0      	nop			@ (mov r8, r8)
 8007de4:	2000097c 	.word	0x2000097c

08007de8 <__ssputs_r>:
 8007de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dea:	688e      	ldr	r6, [r1, #8]
 8007dec:	b085      	sub	sp, #20
 8007dee:	001f      	movs	r7, r3
 8007df0:	000c      	movs	r4, r1
 8007df2:	680b      	ldr	r3, [r1, #0]
 8007df4:	9002      	str	r0, [sp, #8]
 8007df6:	9203      	str	r2, [sp, #12]
 8007df8:	42be      	cmp	r6, r7
 8007dfa:	d830      	bhi.n	8007e5e <__ssputs_r+0x76>
 8007dfc:	210c      	movs	r1, #12
 8007dfe:	5e62      	ldrsh	r2, [r4, r1]
 8007e00:	2190      	movs	r1, #144	@ 0x90
 8007e02:	00c9      	lsls	r1, r1, #3
 8007e04:	420a      	tst	r2, r1
 8007e06:	d028      	beq.n	8007e5a <__ssputs_r+0x72>
 8007e08:	2003      	movs	r0, #3
 8007e0a:	6921      	ldr	r1, [r4, #16]
 8007e0c:	1a5b      	subs	r3, r3, r1
 8007e0e:	9301      	str	r3, [sp, #4]
 8007e10:	6963      	ldr	r3, [r4, #20]
 8007e12:	4343      	muls	r3, r0
 8007e14:	9801      	ldr	r0, [sp, #4]
 8007e16:	0fdd      	lsrs	r5, r3, #31
 8007e18:	18ed      	adds	r5, r5, r3
 8007e1a:	1c7b      	adds	r3, r7, #1
 8007e1c:	181b      	adds	r3, r3, r0
 8007e1e:	106d      	asrs	r5, r5, #1
 8007e20:	42ab      	cmp	r3, r5
 8007e22:	d900      	bls.n	8007e26 <__ssputs_r+0x3e>
 8007e24:	001d      	movs	r5, r3
 8007e26:	0552      	lsls	r2, r2, #21
 8007e28:	d528      	bpl.n	8007e7c <__ssputs_r+0x94>
 8007e2a:	0029      	movs	r1, r5
 8007e2c:	9802      	ldr	r0, [sp, #8]
 8007e2e:	f7ff ff4b 	bl	8007cc8 <_malloc_r>
 8007e32:	1e06      	subs	r6, r0, #0
 8007e34:	d02c      	beq.n	8007e90 <__ssputs_r+0xa8>
 8007e36:	9a01      	ldr	r2, [sp, #4]
 8007e38:	6921      	ldr	r1, [r4, #16]
 8007e3a:	f7ff fecf 	bl	8007bdc <memcpy>
 8007e3e:	89a2      	ldrh	r2, [r4, #12]
 8007e40:	4b18      	ldr	r3, [pc, #96]	@ (8007ea4 <__ssputs_r+0xbc>)
 8007e42:	401a      	ands	r2, r3
 8007e44:	2380      	movs	r3, #128	@ 0x80
 8007e46:	4313      	orrs	r3, r2
 8007e48:	81a3      	strh	r3, [r4, #12]
 8007e4a:	9b01      	ldr	r3, [sp, #4]
 8007e4c:	6126      	str	r6, [r4, #16]
 8007e4e:	18f6      	adds	r6, r6, r3
 8007e50:	6026      	str	r6, [r4, #0]
 8007e52:	003e      	movs	r6, r7
 8007e54:	6165      	str	r5, [r4, #20]
 8007e56:	1aed      	subs	r5, r5, r3
 8007e58:	60a5      	str	r5, [r4, #8]
 8007e5a:	42be      	cmp	r6, r7
 8007e5c:	d900      	bls.n	8007e60 <__ssputs_r+0x78>
 8007e5e:	003e      	movs	r6, r7
 8007e60:	0032      	movs	r2, r6
 8007e62:	9903      	ldr	r1, [sp, #12]
 8007e64:	6820      	ldr	r0, [r4, #0]
 8007e66:	f000 fa9b 	bl	80083a0 <memmove>
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	68a3      	ldr	r3, [r4, #8]
 8007e6e:	1b9b      	subs	r3, r3, r6
 8007e70:	60a3      	str	r3, [r4, #8]
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	199b      	adds	r3, r3, r6
 8007e76:	6023      	str	r3, [r4, #0]
 8007e78:	b005      	add	sp, #20
 8007e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e7c:	002a      	movs	r2, r5
 8007e7e:	9802      	ldr	r0, [sp, #8]
 8007e80:	f000 fabf 	bl	8008402 <_realloc_r>
 8007e84:	1e06      	subs	r6, r0, #0
 8007e86:	d1e0      	bne.n	8007e4a <__ssputs_r+0x62>
 8007e88:	6921      	ldr	r1, [r4, #16]
 8007e8a:	9802      	ldr	r0, [sp, #8]
 8007e8c:	f7ff feb0 	bl	8007bf0 <_free_r>
 8007e90:	230c      	movs	r3, #12
 8007e92:	2001      	movs	r0, #1
 8007e94:	9a02      	ldr	r2, [sp, #8]
 8007e96:	4240      	negs	r0, r0
 8007e98:	6013      	str	r3, [r2, #0]
 8007e9a:	89a2      	ldrh	r2, [r4, #12]
 8007e9c:	3334      	adds	r3, #52	@ 0x34
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	81a3      	strh	r3, [r4, #12]
 8007ea2:	e7e9      	b.n	8007e78 <__ssputs_r+0x90>
 8007ea4:	fffffb7f 	.word	0xfffffb7f

08007ea8 <_svfiprintf_r>:
 8007ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eaa:	b0a1      	sub	sp, #132	@ 0x84
 8007eac:	9003      	str	r0, [sp, #12]
 8007eae:	001d      	movs	r5, r3
 8007eb0:	898b      	ldrh	r3, [r1, #12]
 8007eb2:	000f      	movs	r7, r1
 8007eb4:	0016      	movs	r6, r2
 8007eb6:	061b      	lsls	r3, r3, #24
 8007eb8:	d511      	bpl.n	8007ede <_svfiprintf_r+0x36>
 8007eba:	690b      	ldr	r3, [r1, #16]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d10e      	bne.n	8007ede <_svfiprintf_r+0x36>
 8007ec0:	2140      	movs	r1, #64	@ 0x40
 8007ec2:	f7ff ff01 	bl	8007cc8 <_malloc_r>
 8007ec6:	6038      	str	r0, [r7, #0]
 8007ec8:	6138      	str	r0, [r7, #16]
 8007eca:	2800      	cmp	r0, #0
 8007ecc:	d105      	bne.n	8007eda <_svfiprintf_r+0x32>
 8007ece:	230c      	movs	r3, #12
 8007ed0:	9a03      	ldr	r2, [sp, #12]
 8007ed2:	6013      	str	r3, [r2, #0]
 8007ed4:	2001      	movs	r0, #1
 8007ed6:	4240      	negs	r0, r0
 8007ed8:	e0cf      	b.n	800807a <_svfiprintf_r+0x1d2>
 8007eda:	2340      	movs	r3, #64	@ 0x40
 8007edc:	617b      	str	r3, [r7, #20]
 8007ede:	2300      	movs	r3, #0
 8007ee0:	ac08      	add	r4, sp, #32
 8007ee2:	6163      	str	r3, [r4, #20]
 8007ee4:	3320      	adds	r3, #32
 8007ee6:	7663      	strb	r3, [r4, #25]
 8007ee8:	3310      	adds	r3, #16
 8007eea:	76a3      	strb	r3, [r4, #26]
 8007eec:	9507      	str	r5, [sp, #28]
 8007eee:	0035      	movs	r5, r6
 8007ef0:	782b      	ldrb	r3, [r5, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <_svfiprintf_r+0x52>
 8007ef6:	2b25      	cmp	r3, #37	@ 0x25
 8007ef8:	d148      	bne.n	8007f8c <_svfiprintf_r+0xe4>
 8007efa:	1bab      	subs	r3, r5, r6
 8007efc:	9305      	str	r3, [sp, #20]
 8007efe:	42b5      	cmp	r5, r6
 8007f00:	d00b      	beq.n	8007f1a <_svfiprintf_r+0x72>
 8007f02:	0032      	movs	r2, r6
 8007f04:	0039      	movs	r1, r7
 8007f06:	9803      	ldr	r0, [sp, #12]
 8007f08:	f7ff ff6e 	bl	8007de8 <__ssputs_r>
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	d100      	bne.n	8007f12 <_svfiprintf_r+0x6a>
 8007f10:	e0ae      	b.n	8008070 <_svfiprintf_r+0x1c8>
 8007f12:	6963      	ldr	r3, [r4, #20]
 8007f14:	9a05      	ldr	r2, [sp, #20]
 8007f16:	189b      	adds	r3, r3, r2
 8007f18:	6163      	str	r3, [r4, #20]
 8007f1a:	782b      	ldrb	r3, [r5, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d100      	bne.n	8007f22 <_svfiprintf_r+0x7a>
 8007f20:	e0a6      	b.n	8008070 <_svfiprintf_r+0x1c8>
 8007f22:	2201      	movs	r2, #1
 8007f24:	2300      	movs	r3, #0
 8007f26:	4252      	negs	r2, r2
 8007f28:	6062      	str	r2, [r4, #4]
 8007f2a:	a904      	add	r1, sp, #16
 8007f2c:	3254      	adds	r2, #84	@ 0x54
 8007f2e:	1852      	adds	r2, r2, r1
 8007f30:	1c6e      	adds	r6, r5, #1
 8007f32:	6023      	str	r3, [r4, #0]
 8007f34:	60e3      	str	r3, [r4, #12]
 8007f36:	60a3      	str	r3, [r4, #8]
 8007f38:	7013      	strb	r3, [r2, #0]
 8007f3a:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007f3c:	4b54      	ldr	r3, [pc, #336]	@ (8008090 <_svfiprintf_r+0x1e8>)
 8007f3e:	2205      	movs	r2, #5
 8007f40:	0018      	movs	r0, r3
 8007f42:	7831      	ldrb	r1, [r6, #0]
 8007f44:	9305      	str	r3, [sp, #20]
 8007f46:	f000 fa51 	bl	80083ec <memchr>
 8007f4a:	1c75      	adds	r5, r6, #1
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	d11f      	bne.n	8007f90 <_svfiprintf_r+0xe8>
 8007f50:	6822      	ldr	r2, [r4, #0]
 8007f52:	06d3      	lsls	r3, r2, #27
 8007f54:	d504      	bpl.n	8007f60 <_svfiprintf_r+0xb8>
 8007f56:	2353      	movs	r3, #83	@ 0x53
 8007f58:	a904      	add	r1, sp, #16
 8007f5a:	185b      	adds	r3, r3, r1
 8007f5c:	2120      	movs	r1, #32
 8007f5e:	7019      	strb	r1, [r3, #0]
 8007f60:	0713      	lsls	r3, r2, #28
 8007f62:	d504      	bpl.n	8007f6e <_svfiprintf_r+0xc6>
 8007f64:	2353      	movs	r3, #83	@ 0x53
 8007f66:	a904      	add	r1, sp, #16
 8007f68:	185b      	adds	r3, r3, r1
 8007f6a:	212b      	movs	r1, #43	@ 0x2b
 8007f6c:	7019      	strb	r1, [r3, #0]
 8007f6e:	7833      	ldrb	r3, [r6, #0]
 8007f70:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f72:	d016      	beq.n	8007fa2 <_svfiprintf_r+0xfa>
 8007f74:	0035      	movs	r5, r6
 8007f76:	2100      	movs	r1, #0
 8007f78:	200a      	movs	r0, #10
 8007f7a:	68e3      	ldr	r3, [r4, #12]
 8007f7c:	782a      	ldrb	r2, [r5, #0]
 8007f7e:	1c6e      	adds	r6, r5, #1
 8007f80:	3a30      	subs	r2, #48	@ 0x30
 8007f82:	2a09      	cmp	r2, #9
 8007f84:	d950      	bls.n	8008028 <_svfiprintf_r+0x180>
 8007f86:	2900      	cmp	r1, #0
 8007f88:	d111      	bne.n	8007fae <_svfiprintf_r+0x106>
 8007f8a:	e017      	b.n	8007fbc <_svfiprintf_r+0x114>
 8007f8c:	3501      	adds	r5, #1
 8007f8e:	e7af      	b.n	8007ef0 <_svfiprintf_r+0x48>
 8007f90:	9b05      	ldr	r3, [sp, #20]
 8007f92:	6822      	ldr	r2, [r4, #0]
 8007f94:	1ac0      	subs	r0, r0, r3
 8007f96:	2301      	movs	r3, #1
 8007f98:	4083      	lsls	r3, r0
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	002e      	movs	r6, r5
 8007f9e:	6023      	str	r3, [r4, #0]
 8007fa0:	e7cc      	b.n	8007f3c <_svfiprintf_r+0x94>
 8007fa2:	9b07      	ldr	r3, [sp, #28]
 8007fa4:	1d19      	adds	r1, r3, #4
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	9107      	str	r1, [sp, #28]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	db01      	blt.n	8007fb2 <_svfiprintf_r+0x10a>
 8007fae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fb0:	e004      	b.n	8007fbc <_svfiprintf_r+0x114>
 8007fb2:	425b      	negs	r3, r3
 8007fb4:	60e3      	str	r3, [r4, #12]
 8007fb6:	2302      	movs	r3, #2
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	6023      	str	r3, [r4, #0]
 8007fbc:	782b      	ldrb	r3, [r5, #0]
 8007fbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fc0:	d10c      	bne.n	8007fdc <_svfiprintf_r+0x134>
 8007fc2:	786b      	ldrb	r3, [r5, #1]
 8007fc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fc6:	d134      	bne.n	8008032 <_svfiprintf_r+0x18a>
 8007fc8:	9b07      	ldr	r3, [sp, #28]
 8007fca:	3502      	adds	r5, #2
 8007fcc:	1d1a      	adds	r2, r3, #4
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	9207      	str	r2, [sp, #28]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	da01      	bge.n	8007fda <_svfiprintf_r+0x132>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	425b      	negs	r3, r3
 8007fda:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fdc:	4e2d      	ldr	r6, [pc, #180]	@ (8008094 <_svfiprintf_r+0x1ec>)
 8007fde:	2203      	movs	r2, #3
 8007fe0:	0030      	movs	r0, r6
 8007fe2:	7829      	ldrb	r1, [r5, #0]
 8007fe4:	f000 fa02 	bl	80083ec <memchr>
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	d006      	beq.n	8007ffa <_svfiprintf_r+0x152>
 8007fec:	2340      	movs	r3, #64	@ 0x40
 8007fee:	1b80      	subs	r0, r0, r6
 8007ff0:	4083      	lsls	r3, r0
 8007ff2:	6822      	ldr	r2, [r4, #0]
 8007ff4:	3501      	adds	r5, #1
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	6023      	str	r3, [r4, #0]
 8007ffa:	7829      	ldrb	r1, [r5, #0]
 8007ffc:	2206      	movs	r2, #6
 8007ffe:	4826      	ldr	r0, [pc, #152]	@ (8008098 <_svfiprintf_r+0x1f0>)
 8008000:	1c6e      	adds	r6, r5, #1
 8008002:	7621      	strb	r1, [r4, #24]
 8008004:	f000 f9f2 	bl	80083ec <memchr>
 8008008:	2800      	cmp	r0, #0
 800800a:	d038      	beq.n	800807e <_svfiprintf_r+0x1d6>
 800800c:	4b23      	ldr	r3, [pc, #140]	@ (800809c <_svfiprintf_r+0x1f4>)
 800800e:	2b00      	cmp	r3, #0
 8008010:	d122      	bne.n	8008058 <_svfiprintf_r+0x1b0>
 8008012:	2207      	movs	r2, #7
 8008014:	9b07      	ldr	r3, [sp, #28]
 8008016:	3307      	adds	r3, #7
 8008018:	4393      	bics	r3, r2
 800801a:	3308      	adds	r3, #8
 800801c:	9307      	str	r3, [sp, #28]
 800801e:	6963      	ldr	r3, [r4, #20]
 8008020:	9a04      	ldr	r2, [sp, #16]
 8008022:	189b      	adds	r3, r3, r2
 8008024:	6163      	str	r3, [r4, #20]
 8008026:	e762      	b.n	8007eee <_svfiprintf_r+0x46>
 8008028:	4343      	muls	r3, r0
 800802a:	0035      	movs	r5, r6
 800802c:	2101      	movs	r1, #1
 800802e:	189b      	adds	r3, r3, r2
 8008030:	e7a4      	b.n	8007f7c <_svfiprintf_r+0xd4>
 8008032:	2300      	movs	r3, #0
 8008034:	200a      	movs	r0, #10
 8008036:	0019      	movs	r1, r3
 8008038:	3501      	adds	r5, #1
 800803a:	6063      	str	r3, [r4, #4]
 800803c:	782a      	ldrb	r2, [r5, #0]
 800803e:	1c6e      	adds	r6, r5, #1
 8008040:	3a30      	subs	r2, #48	@ 0x30
 8008042:	2a09      	cmp	r2, #9
 8008044:	d903      	bls.n	800804e <_svfiprintf_r+0x1a6>
 8008046:	2b00      	cmp	r3, #0
 8008048:	d0c8      	beq.n	8007fdc <_svfiprintf_r+0x134>
 800804a:	9109      	str	r1, [sp, #36]	@ 0x24
 800804c:	e7c6      	b.n	8007fdc <_svfiprintf_r+0x134>
 800804e:	4341      	muls	r1, r0
 8008050:	0035      	movs	r5, r6
 8008052:	2301      	movs	r3, #1
 8008054:	1889      	adds	r1, r1, r2
 8008056:	e7f1      	b.n	800803c <_svfiprintf_r+0x194>
 8008058:	aa07      	add	r2, sp, #28
 800805a:	9200      	str	r2, [sp, #0]
 800805c:	0021      	movs	r1, r4
 800805e:	003a      	movs	r2, r7
 8008060:	4b0f      	ldr	r3, [pc, #60]	@ (80080a0 <_svfiprintf_r+0x1f8>)
 8008062:	9803      	ldr	r0, [sp, #12]
 8008064:	e000      	b.n	8008068 <_svfiprintf_r+0x1c0>
 8008066:	bf00      	nop
 8008068:	9004      	str	r0, [sp, #16]
 800806a:	9b04      	ldr	r3, [sp, #16]
 800806c:	3301      	adds	r3, #1
 800806e:	d1d6      	bne.n	800801e <_svfiprintf_r+0x176>
 8008070:	89bb      	ldrh	r3, [r7, #12]
 8008072:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008074:	065b      	lsls	r3, r3, #25
 8008076:	d500      	bpl.n	800807a <_svfiprintf_r+0x1d2>
 8008078:	e72c      	b.n	8007ed4 <_svfiprintf_r+0x2c>
 800807a:	b021      	add	sp, #132	@ 0x84
 800807c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800807e:	aa07      	add	r2, sp, #28
 8008080:	9200      	str	r2, [sp, #0]
 8008082:	0021      	movs	r1, r4
 8008084:	003a      	movs	r2, r7
 8008086:	4b06      	ldr	r3, [pc, #24]	@ (80080a0 <_svfiprintf_r+0x1f8>)
 8008088:	9803      	ldr	r0, [sp, #12]
 800808a:	f000 f87b 	bl	8008184 <_printf_i>
 800808e:	e7eb      	b.n	8008068 <_svfiprintf_r+0x1c0>
 8008090:	08008b7c 	.word	0x08008b7c
 8008094:	08008b82 	.word	0x08008b82
 8008098:	08008b86 	.word	0x08008b86
 800809c:	00000000 	.word	0x00000000
 80080a0:	08007de9 	.word	0x08007de9

080080a4 <_printf_common>:
 80080a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080a6:	0016      	movs	r6, r2
 80080a8:	9301      	str	r3, [sp, #4]
 80080aa:	688a      	ldr	r2, [r1, #8]
 80080ac:	690b      	ldr	r3, [r1, #16]
 80080ae:	000c      	movs	r4, r1
 80080b0:	9000      	str	r0, [sp, #0]
 80080b2:	4293      	cmp	r3, r2
 80080b4:	da00      	bge.n	80080b8 <_printf_common+0x14>
 80080b6:	0013      	movs	r3, r2
 80080b8:	0022      	movs	r2, r4
 80080ba:	6033      	str	r3, [r6, #0]
 80080bc:	3243      	adds	r2, #67	@ 0x43
 80080be:	7812      	ldrb	r2, [r2, #0]
 80080c0:	2a00      	cmp	r2, #0
 80080c2:	d001      	beq.n	80080c8 <_printf_common+0x24>
 80080c4:	3301      	adds	r3, #1
 80080c6:	6033      	str	r3, [r6, #0]
 80080c8:	6823      	ldr	r3, [r4, #0]
 80080ca:	069b      	lsls	r3, r3, #26
 80080cc:	d502      	bpl.n	80080d4 <_printf_common+0x30>
 80080ce:	6833      	ldr	r3, [r6, #0]
 80080d0:	3302      	adds	r3, #2
 80080d2:	6033      	str	r3, [r6, #0]
 80080d4:	6822      	ldr	r2, [r4, #0]
 80080d6:	2306      	movs	r3, #6
 80080d8:	0015      	movs	r5, r2
 80080da:	401d      	ands	r5, r3
 80080dc:	421a      	tst	r2, r3
 80080de:	d027      	beq.n	8008130 <_printf_common+0x8c>
 80080e0:	0023      	movs	r3, r4
 80080e2:	3343      	adds	r3, #67	@ 0x43
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	1e5a      	subs	r2, r3, #1
 80080e8:	4193      	sbcs	r3, r2
 80080ea:	6822      	ldr	r2, [r4, #0]
 80080ec:	0692      	lsls	r2, r2, #26
 80080ee:	d430      	bmi.n	8008152 <_printf_common+0xae>
 80080f0:	0022      	movs	r2, r4
 80080f2:	9901      	ldr	r1, [sp, #4]
 80080f4:	9800      	ldr	r0, [sp, #0]
 80080f6:	9d08      	ldr	r5, [sp, #32]
 80080f8:	3243      	adds	r2, #67	@ 0x43
 80080fa:	47a8      	blx	r5
 80080fc:	3001      	adds	r0, #1
 80080fe:	d025      	beq.n	800814c <_printf_common+0xa8>
 8008100:	2206      	movs	r2, #6
 8008102:	6823      	ldr	r3, [r4, #0]
 8008104:	2500      	movs	r5, #0
 8008106:	4013      	ands	r3, r2
 8008108:	2b04      	cmp	r3, #4
 800810a:	d105      	bne.n	8008118 <_printf_common+0x74>
 800810c:	6833      	ldr	r3, [r6, #0]
 800810e:	68e5      	ldr	r5, [r4, #12]
 8008110:	1aed      	subs	r5, r5, r3
 8008112:	43eb      	mvns	r3, r5
 8008114:	17db      	asrs	r3, r3, #31
 8008116:	401d      	ands	r5, r3
 8008118:	68a3      	ldr	r3, [r4, #8]
 800811a:	6922      	ldr	r2, [r4, #16]
 800811c:	4293      	cmp	r3, r2
 800811e:	dd01      	ble.n	8008124 <_printf_common+0x80>
 8008120:	1a9b      	subs	r3, r3, r2
 8008122:	18ed      	adds	r5, r5, r3
 8008124:	2600      	movs	r6, #0
 8008126:	42b5      	cmp	r5, r6
 8008128:	d120      	bne.n	800816c <_printf_common+0xc8>
 800812a:	2000      	movs	r0, #0
 800812c:	e010      	b.n	8008150 <_printf_common+0xac>
 800812e:	3501      	adds	r5, #1
 8008130:	68e3      	ldr	r3, [r4, #12]
 8008132:	6832      	ldr	r2, [r6, #0]
 8008134:	1a9b      	subs	r3, r3, r2
 8008136:	42ab      	cmp	r3, r5
 8008138:	ddd2      	ble.n	80080e0 <_printf_common+0x3c>
 800813a:	0022      	movs	r2, r4
 800813c:	2301      	movs	r3, #1
 800813e:	9901      	ldr	r1, [sp, #4]
 8008140:	9800      	ldr	r0, [sp, #0]
 8008142:	9f08      	ldr	r7, [sp, #32]
 8008144:	3219      	adds	r2, #25
 8008146:	47b8      	blx	r7
 8008148:	3001      	adds	r0, #1
 800814a:	d1f0      	bne.n	800812e <_printf_common+0x8a>
 800814c:	2001      	movs	r0, #1
 800814e:	4240      	negs	r0, r0
 8008150:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008152:	2030      	movs	r0, #48	@ 0x30
 8008154:	18e1      	adds	r1, r4, r3
 8008156:	3143      	adds	r1, #67	@ 0x43
 8008158:	7008      	strb	r0, [r1, #0]
 800815a:	0021      	movs	r1, r4
 800815c:	1c5a      	adds	r2, r3, #1
 800815e:	3145      	adds	r1, #69	@ 0x45
 8008160:	7809      	ldrb	r1, [r1, #0]
 8008162:	18a2      	adds	r2, r4, r2
 8008164:	3243      	adds	r2, #67	@ 0x43
 8008166:	3302      	adds	r3, #2
 8008168:	7011      	strb	r1, [r2, #0]
 800816a:	e7c1      	b.n	80080f0 <_printf_common+0x4c>
 800816c:	0022      	movs	r2, r4
 800816e:	2301      	movs	r3, #1
 8008170:	9901      	ldr	r1, [sp, #4]
 8008172:	9800      	ldr	r0, [sp, #0]
 8008174:	9f08      	ldr	r7, [sp, #32]
 8008176:	321a      	adds	r2, #26
 8008178:	47b8      	blx	r7
 800817a:	3001      	adds	r0, #1
 800817c:	d0e6      	beq.n	800814c <_printf_common+0xa8>
 800817e:	3601      	adds	r6, #1
 8008180:	e7d1      	b.n	8008126 <_printf_common+0x82>
	...

08008184 <_printf_i>:
 8008184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008186:	b08b      	sub	sp, #44	@ 0x2c
 8008188:	9206      	str	r2, [sp, #24]
 800818a:	000a      	movs	r2, r1
 800818c:	3243      	adds	r2, #67	@ 0x43
 800818e:	9307      	str	r3, [sp, #28]
 8008190:	9005      	str	r0, [sp, #20]
 8008192:	9203      	str	r2, [sp, #12]
 8008194:	7e0a      	ldrb	r2, [r1, #24]
 8008196:	000c      	movs	r4, r1
 8008198:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800819a:	2a78      	cmp	r2, #120	@ 0x78
 800819c:	d809      	bhi.n	80081b2 <_printf_i+0x2e>
 800819e:	2a62      	cmp	r2, #98	@ 0x62
 80081a0:	d80b      	bhi.n	80081ba <_printf_i+0x36>
 80081a2:	2a00      	cmp	r2, #0
 80081a4:	d100      	bne.n	80081a8 <_printf_i+0x24>
 80081a6:	e0bc      	b.n	8008322 <_printf_i+0x19e>
 80081a8:	497b      	ldr	r1, [pc, #492]	@ (8008398 <_printf_i+0x214>)
 80081aa:	9104      	str	r1, [sp, #16]
 80081ac:	2a58      	cmp	r2, #88	@ 0x58
 80081ae:	d100      	bne.n	80081b2 <_printf_i+0x2e>
 80081b0:	e090      	b.n	80082d4 <_printf_i+0x150>
 80081b2:	0025      	movs	r5, r4
 80081b4:	3542      	adds	r5, #66	@ 0x42
 80081b6:	702a      	strb	r2, [r5, #0]
 80081b8:	e022      	b.n	8008200 <_printf_i+0x7c>
 80081ba:	0010      	movs	r0, r2
 80081bc:	3863      	subs	r0, #99	@ 0x63
 80081be:	2815      	cmp	r0, #21
 80081c0:	d8f7      	bhi.n	80081b2 <_printf_i+0x2e>
 80081c2:	f7f7 ff9f 	bl	8000104 <__gnu_thumb1_case_shi>
 80081c6:	0016      	.short	0x0016
 80081c8:	fff6001f 	.word	0xfff6001f
 80081cc:	fff6fff6 	.word	0xfff6fff6
 80081d0:	001ffff6 	.word	0x001ffff6
 80081d4:	fff6fff6 	.word	0xfff6fff6
 80081d8:	fff6fff6 	.word	0xfff6fff6
 80081dc:	003600a1 	.word	0x003600a1
 80081e0:	fff60080 	.word	0xfff60080
 80081e4:	00b2fff6 	.word	0x00b2fff6
 80081e8:	0036fff6 	.word	0x0036fff6
 80081ec:	fff6fff6 	.word	0xfff6fff6
 80081f0:	0084      	.short	0x0084
 80081f2:	0025      	movs	r5, r4
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	3542      	adds	r5, #66	@ 0x42
 80081f8:	1d11      	adds	r1, r2, #4
 80081fa:	6019      	str	r1, [r3, #0]
 80081fc:	6813      	ldr	r3, [r2, #0]
 80081fe:	702b      	strb	r3, [r5, #0]
 8008200:	2301      	movs	r3, #1
 8008202:	e0a0      	b.n	8008346 <_printf_i+0x1c2>
 8008204:	6818      	ldr	r0, [r3, #0]
 8008206:	6809      	ldr	r1, [r1, #0]
 8008208:	1d02      	adds	r2, r0, #4
 800820a:	060d      	lsls	r5, r1, #24
 800820c:	d50b      	bpl.n	8008226 <_printf_i+0xa2>
 800820e:	6806      	ldr	r6, [r0, #0]
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	2e00      	cmp	r6, #0
 8008214:	da03      	bge.n	800821e <_printf_i+0x9a>
 8008216:	232d      	movs	r3, #45	@ 0x2d
 8008218:	9a03      	ldr	r2, [sp, #12]
 800821a:	4276      	negs	r6, r6
 800821c:	7013      	strb	r3, [r2, #0]
 800821e:	4b5e      	ldr	r3, [pc, #376]	@ (8008398 <_printf_i+0x214>)
 8008220:	270a      	movs	r7, #10
 8008222:	9304      	str	r3, [sp, #16]
 8008224:	e018      	b.n	8008258 <_printf_i+0xd4>
 8008226:	6806      	ldr	r6, [r0, #0]
 8008228:	601a      	str	r2, [r3, #0]
 800822a:	0649      	lsls	r1, r1, #25
 800822c:	d5f1      	bpl.n	8008212 <_printf_i+0x8e>
 800822e:	b236      	sxth	r6, r6
 8008230:	e7ef      	b.n	8008212 <_printf_i+0x8e>
 8008232:	6808      	ldr	r0, [r1, #0]
 8008234:	6819      	ldr	r1, [r3, #0]
 8008236:	c940      	ldmia	r1!, {r6}
 8008238:	0605      	lsls	r5, r0, #24
 800823a:	d402      	bmi.n	8008242 <_printf_i+0xbe>
 800823c:	0640      	lsls	r0, r0, #25
 800823e:	d500      	bpl.n	8008242 <_printf_i+0xbe>
 8008240:	b2b6      	uxth	r6, r6
 8008242:	6019      	str	r1, [r3, #0]
 8008244:	4b54      	ldr	r3, [pc, #336]	@ (8008398 <_printf_i+0x214>)
 8008246:	270a      	movs	r7, #10
 8008248:	9304      	str	r3, [sp, #16]
 800824a:	2a6f      	cmp	r2, #111	@ 0x6f
 800824c:	d100      	bne.n	8008250 <_printf_i+0xcc>
 800824e:	3f02      	subs	r7, #2
 8008250:	0023      	movs	r3, r4
 8008252:	2200      	movs	r2, #0
 8008254:	3343      	adds	r3, #67	@ 0x43
 8008256:	701a      	strb	r2, [r3, #0]
 8008258:	6863      	ldr	r3, [r4, #4]
 800825a:	60a3      	str	r3, [r4, #8]
 800825c:	2b00      	cmp	r3, #0
 800825e:	db03      	blt.n	8008268 <_printf_i+0xe4>
 8008260:	2104      	movs	r1, #4
 8008262:	6822      	ldr	r2, [r4, #0]
 8008264:	438a      	bics	r2, r1
 8008266:	6022      	str	r2, [r4, #0]
 8008268:	2e00      	cmp	r6, #0
 800826a:	d102      	bne.n	8008272 <_printf_i+0xee>
 800826c:	9d03      	ldr	r5, [sp, #12]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00c      	beq.n	800828c <_printf_i+0x108>
 8008272:	9d03      	ldr	r5, [sp, #12]
 8008274:	0030      	movs	r0, r6
 8008276:	0039      	movs	r1, r7
 8008278:	f7f7 ffd4 	bl	8000224 <__aeabi_uidivmod>
 800827c:	9b04      	ldr	r3, [sp, #16]
 800827e:	3d01      	subs	r5, #1
 8008280:	5c5b      	ldrb	r3, [r3, r1]
 8008282:	702b      	strb	r3, [r5, #0]
 8008284:	0033      	movs	r3, r6
 8008286:	0006      	movs	r6, r0
 8008288:	429f      	cmp	r7, r3
 800828a:	d9f3      	bls.n	8008274 <_printf_i+0xf0>
 800828c:	2f08      	cmp	r7, #8
 800828e:	d109      	bne.n	80082a4 <_printf_i+0x120>
 8008290:	6823      	ldr	r3, [r4, #0]
 8008292:	07db      	lsls	r3, r3, #31
 8008294:	d506      	bpl.n	80082a4 <_printf_i+0x120>
 8008296:	6862      	ldr	r2, [r4, #4]
 8008298:	6923      	ldr	r3, [r4, #16]
 800829a:	429a      	cmp	r2, r3
 800829c:	dc02      	bgt.n	80082a4 <_printf_i+0x120>
 800829e:	2330      	movs	r3, #48	@ 0x30
 80082a0:	3d01      	subs	r5, #1
 80082a2:	702b      	strb	r3, [r5, #0]
 80082a4:	9b03      	ldr	r3, [sp, #12]
 80082a6:	1b5b      	subs	r3, r3, r5
 80082a8:	6123      	str	r3, [r4, #16]
 80082aa:	9b07      	ldr	r3, [sp, #28]
 80082ac:	0021      	movs	r1, r4
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	9805      	ldr	r0, [sp, #20]
 80082b2:	9b06      	ldr	r3, [sp, #24]
 80082b4:	aa09      	add	r2, sp, #36	@ 0x24
 80082b6:	f7ff fef5 	bl	80080a4 <_printf_common>
 80082ba:	3001      	adds	r0, #1
 80082bc:	d148      	bne.n	8008350 <_printf_i+0x1cc>
 80082be:	2001      	movs	r0, #1
 80082c0:	4240      	negs	r0, r0
 80082c2:	b00b      	add	sp, #44	@ 0x2c
 80082c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082c6:	2220      	movs	r2, #32
 80082c8:	6809      	ldr	r1, [r1, #0]
 80082ca:	430a      	orrs	r2, r1
 80082cc:	6022      	str	r2, [r4, #0]
 80082ce:	2278      	movs	r2, #120	@ 0x78
 80082d0:	4932      	ldr	r1, [pc, #200]	@ (800839c <_printf_i+0x218>)
 80082d2:	9104      	str	r1, [sp, #16]
 80082d4:	0021      	movs	r1, r4
 80082d6:	3145      	adds	r1, #69	@ 0x45
 80082d8:	700a      	strb	r2, [r1, #0]
 80082da:	6819      	ldr	r1, [r3, #0]
 80082dc:	6822      	ldr	r2, [r4, #0]
 80082de:	c940      	ldmia	r1!, {r6}
 80082e0:	0610      	lsls	r0, r2, #24
 80082e2:	d402      	bmi.n	80082ea <_printf_i+0x166>
 80082e4:	0650      	lsls	r0, r2, #25
 80082e6:	d500      	bpl.n	80082ea <_printf_i+0x166>
 80082e8:	b2b6      	uxth	r6, r6
 80082ea:	6019      	str	r1, [r3, #0]
 80082ec:	07d3      	lsls	r3, r2, #31
 80082ee:	d502      	bpl.n	80082f6 <_printf_i+0x172>
 80082f0:	2320      	movs	r3, #32
 80082f2:	4313      	orrs	r3, r2
 80082f4:	6023      	str	r3, [r4, #0]
 80082f6:	2e00      	cmp	r6, #0
 80082f8:	d001      	beq.n	80082fe <_printf_i+0x17a>
 80082fa:	2710      	movs	r7, #16
 80082fc:	e7a8      	b.n	8008250 <_printf_i+0xcc>
 80082fe:	2220      	movs	r2, #32
 8008300:	6823      	ldr	r3, [r4, #0]
 8008302:	4393      	bics	r3, r2
 8008304:	6023      	str	r3, [r4, #0]
 8008306:	e7f8      	b.n	80082fa <_printf_i+0x176>
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	680d      	ldr	r5, [r1, #0]
 800830c:	1d10      	adds	r0, r2, #4
 800830e:	6949      	ldr	r1, [r1, #20]
 8008310:	6018      	str	r0, [r3, #0]
 8008312:	6813      	ldr	r3, [r2, #0]
 8008314:	062e      	lsls	r6, r5, #24
 8008316:	d501      	bpl.n	800831c <_printf_i+0x198>
 8008318:	6019      	str	r1, [r3, #0]
 800831a:	e002      	b.n	8008322 <_printf_i+0x19e>
 800831c:	066d      	lsls	r5, r5, #25
 800831e:	d5fb      	bpl.n	8008318 <_printf_i+0x194>
 8008320:	8019      	strh	r1, [r3, #0]
 8008322:	2300      	movs	r3, #0
 8008324:	9d03      	ldr	r5, [sp, #12]
 8008326:	6123      	str	r3, [r4, #16]
 8008328:	e7bf      	b.n	80082aa <_printf_i+0x126>
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	1d11      	adds	r1, r2, #4
 800832e:	6019      	str	r1, [r3, #0]
 8008330:	6815      	ldr	r5, [r2, #0]
 8008332:	2100      	movs	r1, #0
 8008334:	0028      	movs	r0, r5
 8008336:	6862      	ldr	r2, [r4, #4]
 8008338:	f000 f858 	bl	80083ec <memchr>
 800833c:	2800      	cmp	r0, #0
 800833e:	d001      	beq.n	8008344 <_printf_i+0x1c0>
 8008340:	1b40      	subs	r0, r0, r5
 8008342:	6060      	str	r0, [r4, #4]
 8008344:	6863      	ldr	r3, [r4, #4]
 8008346:	6123      	str	r3, [r4, #16]
 8008348:	2300      	movs	r3, #0
 800834a:	9a03      	ldr	r2, [sp, #12]
 800834c:	7013      	strb	r3, [r2, #0]
 800834e:	e7ac      	b.n	80082aa <_printf_i+0x126>
 8008350:	002a      	movs	r2, r5
 8008352:	6923      	ldr	r3, [r4, #16]
 8008354:	9906      	ldr	r1, [sp, #24]
 8008356:	9805      	ldr	r0, [sp, #20]
 8008358:	9d07      	ldr	r5, [sp, #28]
 800835a:	47a8      	blx	r5
 800835c:	3001      	adds	r0, #1
 800835e:	d0ae      	beq.n	80082be <_printf_i+0x13a>
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	079b      	lsls	r3, r3, #30
 8008364:	d415      	bmi.n	8008392 <_printf_i+0x20e>
 8008366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008368:	68e0      	ldr	r0, [r4, #12]
 800836a:	4298      	cmp	r0, r3
 800836c:	daa9      	bge.n	80082c2 <_printf_i+0x13e>
 800836e:	0018      	movs	r0, r3
 8008370:	e7a7      	b.n	80082c2 <_printf_i+0x13e>
 8008372:	0022      	movs	r2, r4
 8008374:	2301      	movs	r3, #1
 8008376:	9906      	ldr	r1, [sp, #24]
 8008378:	9805      	ldr	r0, [sp, #20]
 800837a:	9e07      	ldr	r6, [sp, #28]
 800837c:	3219      	adds	r2, #25
 800837e:	47b0      	blx	r6
 8008380:	3001      	adds	r0, #1
 8008382:	d09c      	beq.n	80082be <_printf_i+0x13a>
 8008384:	3501      	adds	r5, #1
 8008386:	68e3      	ldr	r3, [r4, #12]
 8008388:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800838a:	1a9b      	subs	r3, r3, r2
 800838c:	42ab      	cmp	r3, r5
 800838e:	dcf0      	bgt.n	8008372 <_printf_i+0x1ee>
 8008390:	e7e9      	b.n	8008366 <_printf_i+0x1e2>
 8008392:	2500      	movs	r5, #0
 8008394:	e7f7      	b.n	8008386 <_printf_i+0x202>
 8008396:	46c0      	nop			@ (mov r8, r8)
 8008398:	08008b8d 	.word	0x08008b8d
 800839c:	08008b9e 	.word	0x08008b9e

080083a0 <memmove>:
 80083a0:	b510      	push	{r4, lr}
 80083a2:	4288      	cmp	r0, r1
 80083a4:	d806      	bhi.n	80083b4 <memmove+0x14>
 80083a6:	2300      	movs	r3, #0
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d008      	beq.n	80083be <memmove+0x1e>
 80083ac:	5ccc      	ldrb	r4, [r1, r3]
 80083ae:	54c4      	strb	r4, [r0, r3]
 80083b0:	3301      	adds	r3, #1
 80083b2:	e7f9      	b.n	80083a8 <memmove+0x8>
 80083b4:	188b      	adds	r3, r1, r2
 80083b6:	4298      	cmp	r0, r3
 80083b8:	d2f5      	bcs.n	80083a6 <memmove+0x6>
 80083ba:	3a01      	subs	r2, #1
 80083bc:	d200      	bcs.n	80083c0 <memmove+0x20>
 80083be:	bd10      	pop	{r4, pc}
 80083c0:	5c8b      	ldrb	r3, [r1, r2]
 80083c2:	5483      	strb	r3, [r0, r2]
 80083c4:	e7f9      	b.n	80083ba <memmove+0x1a>
	...

080083c8 <_sbrk_r>:
 80083c8:	2300      	movs	r3, #0
 80083ca:	b570      	push	{r4, r5, r6, lr}
 80083cc:	4d06      	ldr	r5, [pc, #24]	@ (80083e8 <_sbrk_r+0x20>)
 80083ce:	0004      	movs	r4, r0
 80083d0:	0008      	movs	r0, r1
 80083d2:	602b      	str	r3, [r5, #0]
 80083d4:	f7fa fb08 	bl	80029e8 <_sbrk>
 80083d8:	1c43      	adds	r3, r0, #1
 80083da:	d103      	bne.n	80083e4 <_sbrk_r+0x1c>
 80083dc:	682b      	ldr	r3, [r5, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d000      	beq.n	80083e4 <_sbrk_r+0x1c>
 80083e2:	6023      	str	r3, [r4, #0]
 80083e4:	bd70      	pop	{r4, r5, r6, pc}
 80083e6:	46c0      	nop			@ (mov r8, r8)
 80083e8:	20000978 	.word	0x20000978

080083ec <memchr>:
 80083ec:	b2c9      	uxtb	r1, r1
 80083ee:	1882      	adds	r2, r0, r2
 80083f0:	4290      	cmp	r0, r2
 80083f2:	d101      	bne.n	80083f8 <memchr+0xc>
 80083f4:	2000      	movs	r0, #0
 80083f6:	4770      	bx	lr
 80083f8:	7803      	ldrb	r3, [r0, #0]
 80083fa:	428b      	cmp	r3, r1
 80083fc:	d0fb      	beq.n	80083f6 <memchr+0xa>
 80083fe:	3001      	adds	r0, #1
 8008400:	e7f6      	b.n	80083f0 <memchr+0x4>

08008402 <_realloc_r>:
 8008402:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008404:	0006      	movs	r6, r0
 8008406:	000c      	movs	r4, r1
 8008408:	0015      	movs	r5, r2
 800840a:	2900      	cmp	r1, #0
 800840c:	d105      	bne.n	800841a <_realloc_r+0x18>
 800840e:	0011      	movs	r1, r2
 8008410:	f7ff fc5a 	bl	8007cc8 <_malloc_r>
 8008414:	0004      	movs	r4, r0
 8008416:	0020      	movs	r0, r4
 8008418:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800841a:	2a00      	cmp	r2, #0
 800841c:	d103      	bne.n	8008426 <_realloc_r+0x24>
 800841e:	f7ff fbe7 	bl	8007bf0 <_free_r>
 8008422:	2400      	movs	r4, #0
 8008424:	e7f7      	b.n	8008416 <_realloc_r+0x14>
 8008426:	f000 f81b 	bl	8008460 <_malloc_usable_size_r>
 800842a:	0007      	movs	r7, r0
 800842c:	4285      	cmp	r5, r0
 800842e:	d802      	bhi.n	8008436 <_realloc_r+0x34>
 8008430:	0843      	lsrs	r3, r0, #1
 8008432:	42ab      	cmp	r3, r5
 8008434:	d3ef      	bcc.n	8008416 <_realloc_r+0x14>
 8008436:	0029      	movs	r1, r5
 8008438:	0030      	movs	r0, r6
 800843a:	f7ff fc45 	bl	8007cc8 <_malloc_r>
 800843e:	9001      	str	r0, [sp, #4]
 8008440:	2800      	cmp	r0, #0
 8008442:	d0ee      	beq.n	8008422 <_realloc_r+0x20>
 8008444:	002a      	movs	r2, r5
 8008446:	42bd      	cmp	r5, r7
 8008448:	d900      	bls.n	800844c <_realloc_r+0x4a>
 800844a:	003a      	movs	r2, r7
 800844c:	0021      	movs	r1, r4
 800844e:	9801      	ldr	r0, [sp, #4]
 8008450:	f7ff fbc4 	bl	8007bdc <memcpy>
 8008454:	0021      	movs	r1, r4
 8008456:	0030      	movs	r0, r6
 8008458:	f7ff fbca 	bl	8007bf0 <_free_r>
 800845c:	9c01      	ldr	r4, [sp, #4]
 800845e:	e7da      	b.n	8008416 <_realloc_r+0x14>

08008460 <_malloc_usable_size_r>:
 8008460:	1f0b      	subs	r3, r1, #4
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	1f18      	subs	r0, r3, #4
 8008466:	2b00      	cmp	r3, #0
 8008468:	da01      	bge.n	800846e <_malloc_usable_size_r+0xe>
 800846a:	580b      	ldr	r3, [r1, r0]
 800846c:	18c0      	adds	r0, r0, r3
 800846e:	4770      	bx	lr

08008470 <_init>:
 8008470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008472:	46c0      	nop			@ (mov r8, r8)
 8008474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008476:	bc08      	pop	{r3}
 8008478:	469e      	mov	lr, r3
 800847a:	4770      	bx	lr

0800847c <_fini>:
 800847c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800847e:	46c0      	nop			@ (mov r8, r8)
 8008480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008482:	bc08      	pop	{r3}
 8008484:	469e      	mov	lr, r3
 8008486:	4770      	bx	lr
