
ynotag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005244  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  08005300  08005300  00006300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800594c  0800594c  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  0800594c  0800594c  0000694c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005954  08005954  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005954  08005954  00006954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005958  08005958  00006958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800595c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000000c  08005968  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08005968  00007254  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017083  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bbb  00000000  00000000  0001e0b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  00020c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000109f  00000000  00000000  00022160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e30d  00000000  00000000  000231ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a4ac  00000000  00000000  0004150c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3228  00000000  00000000  0005b9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ebe0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d88  00000000  00000000  0011ec24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001239ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080052e8 	.word	0x080052e8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080052e8 	.word	0x080052e8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	0004      	movs	r4, r0
 8000624:	0008      	movs	r0, r1
 8000626:	0011      	movs	r1, r2
 8000628:	1dbb      	adds	r3, r7, #6
 800062a:	1c22      	adds	r2, r4, #0
 800062c:	801a      	strh	r2, [r3, #0]
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	1c02      	adds	r2, r0, #0
 8000632:	801a      	strh	r2, [r3, #0]
 8000634:	1cbb      	adds	r3, r7, #2
 8000636:	1c0a      	adds	r2, r1, #0
 8000638:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(x, y, color);
 800063a:	1dbb      	adds	r3, r7, #6
 800063c:	8818      	ldrh	r0, [r3, #0]
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	8819      	ldrh	r1, [r3, #0]
 8000642:	1cbb      	adds	r3, r7, #2
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	001a      	movs	r2, r3
 8000648:	f000 fba4 	bl	8000d94 <ST7735_DrawPixel>
}
 800064c:	46c0      	nop			@ (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b003      	add	sp, #12
 8000652:	bd90      	pop	{r4, r7, pc}

08000654 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000654:	b5b0      	push	{r4, r5, r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af02      	add	r7, sp, #8
 800065a:	0005      	movs	r5, r0
 800065c:	000c      	movs	r4, r1
 800065e:	0010      	movs	r0, r2
 8000660:	0019      	movs	r1, r3
 8000662:	1dbb      	adds	r3, r7, #6
 8000664:	1c2a      	adds	r2, r5, #0
 8000666:	801a      	strh	r2, [r3, #0]
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	1c22      	adds	r2, r4, #0
 800066c:	801a      	strh	r2, [r3, #0]
 800066e:	1cbb      	adds	r3, r7, #2
 8000670:	1c02      	adds	r2, r0, #0
 8000672:	801a      	strh	r2, [r3, #0]
 8000674:	003b      	movs	r3, r7
 8000676:	1c0a      	adds	r2, r1, #0
 8000678:	801a      	strh	r2, [r3, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 800067a:	1dbb      	adds	r3, r7, #6
 800067c:	8818      	ldrh	r0, [r3, #0]
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	8819      	ldrh	r1, [r3, #0]
 8000682:	1cbb      	adds	r3, r7, #2
 8000684:	881a      	ldrh	r2, [r3, #0]
 8000686:	003b      	movs	r3, r7
 8000688:	881c      	ldrh	r4, [r3, #0]
 800068a:	2318      	movs	r3, #24
 800068c:	18fb      	adds	r3, r7, r3
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	0023      	movs	r3, r4
 8000694:	f000 fbcc 	bl	8000e30 <ST7735_FillRectangle>
}
 8000698:	46c0      	nop			@ (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	b002      	add	sp, #8
 800069e:	bdb0      	pop	{r4, r5, r7, pc}

080006a0 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	0004      	movs	r4, r0
 80006a8:	0008      	movs	r0, r1
 80006aa:	0011      	movs	r1, r2
 80006ac:	1dbb      	adds	r3, r7, #6
 80006ae:	1c22      	adds	r2, r4, #0
 80006b0:	801a      	strh	r2, [r3, #0]
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	1c02      	adds	r2, r0, #0
 80006b6:	801a      	strh	r2, [r3, #0]
 80006b8:	1cbb      	adds	r3, r7, #2
 80006ba:	1c0a      	adds	r2, r1, #0
 80006bc:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 80006be:	1cbb      	adds	r3, r7, #2
 80006c0:	881a      	ldrh	r2, [r3, #0]
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2100      	movs	r1, #0
 80006c6:	5e59      	ldrsh	r1, [r3, r1]
 80006c8:	1dbb      	adds	r3, r7, #6
 80006ca:	2000      	movs	r0, #0
 80006cc:	5e1b      	ldrsh	r3, [r3, r0]
 80006ce:	0018      	movs	r0, r3
 80006d0:	f7ff ffa4 	bl	800061c <drawPixel>
}
 80006d4:	46c0      	nop			@ (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b003      	add	sp, #12
 80006da:	bd90      	pop	{r4, r7, pc}

080006dc <drawString>:
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
void drawString(int16_t x, int16_t y, char* c, int16_t textColor, int16_t bgColor, uint8_t size, uint8_t spacing)
{
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	b089      	sub	sp, #36	@ 0x24
 80006e0:	af02      	add	r7, sp, #8
 80006e2:	0004      	movs	r4, r0
 80006e4:	0008      	movs	r0, r1
 80006e6:	60ba      	str	r2, [r7, #8]
 80006e8:	0019      	movs	r1, r3
 80006ea:	230e      	movs	r3, #14
 80006ec:	18fb      	adds	r3, r7, r3
 80006ee:	1c22      	adds	r2, r4, #0
 80006f0:	801a      	strh	r2, [r3, #0]
 80006f2:	230c      	movs	r3, #12
 80006f4:	18fb      	adds	r3, r7, r3
 80006f6:	1c02      	adds	r2, r0, #0
 80006f8:	801a      	strh	r2, [r3, #0]
 80006fa:	1dbb      	adds	r3, r7, #6
 80006fc:	1c0a      	adds	r2, r1, #0
 80006fe:	801a      	strh	r2, [r3, #0]
	uint16_t i =0;
 8000700:	2316      	movs	r3, #22
 8000702:	18fb      	adds	r3, r7, r3
 8000704:	2200      	movs	r2, #0
 8000706:	801a      	strh	r2, [r3, #0]

	while(c[i])
 8000708:	e03f      	b.n	800078a <drawString+0xae>
	{
		drawChar(x, y, c[i], textColor, bgColor, size);
 800070a:	2516      	movs	r5, #22
 800070c:	197b      	adds	r3, r7, r5
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	68ba      	ldr	r2, [r7, #8]
 8000712:	18d3      	adds	r3, r2, r3
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	469c      	mov	ip, r3
 8000718:	1dbb      	adds	r3, r7, #6
 800071a:	2400      	movs	r4, #0
 800071c:	5f1c      	ldrsh	r4, [r3, r4]
 800071e:	230c      	movs	r3, #12
 8000720:	18fb      	adds	r3, r7, r3
 8000722:	2100      	movs	r1, #0
 8000724:	5e59      	ldrsh	r1, [r3, r1]
 8000726:	260e      	movs	r6, #14
 8000728:	19bb      	adds	r3, r7, r6
 800072a:	2000      	movs	r0, #0
 800072c:	5e18      	ldrsh	r0, [r3, r0]
 800072e:	232c      	movs	r3, #44	@ 0x2c
 8000730:	2208      	movs	r2, #8
 8000732:	189b      	adds	r3, r3, r2
 8000734:	19db      	adds	r3, r3, r7
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	9301      	str	r3, [sp, #4]
 800073a:	2328      	movs	r3, #40	@ 0x28
 800073c:	189b      	adds	r3, r3, r2
 800073e:	19db      	adds	r3, r3, r7
 8000740:	2200      	movs	r2, #0
 8000742:	5e9b      	ldrsh	r3, [r3, r2]
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	0023      	movs	r3, r4
 8000748:	4662      	mov	r2, ip
 800074a:	f000 f82b 	bl	80007a4 <drawChar>
		x+=(size*6)+spacing;
 800074e:	232c      	movs	r3, #44	@ 0x2c
 8000750:	2108      	movs	r1, #8
 8000752:	185b      	adds	r3, r3, r1
 8000754:	19db      	adds	r3, r3, r7
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	b29b      	uxth	r3, r3
 800075a:	1c1a      	adds	r2, r3, #0
 800075c:	1c13      	adds	r3, r2, #0
 800075e:	18db      	adds	r3, r3, r3
 8000760:	189b      	adds	r3, r3, r2
 8000762:	18db      	adds	r3, r3, r3
 8000764:	b29a      	uxth	r2, r3
 8000766:	2330      	movs	r3, #48	@ 0x30
 8000768:	185b      	adds	r3, r3, r1
 800076a:	19db      	adds	r3, r3, r7
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	b29b      	uxth	r3, r3
 8000770:	18d3      	adds	r3, r2, r3
 8000772:	b29a      	uxth	r2, r3
 8000774:	19bb      	adds	r3, r7, r6
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	18d3      	adds	r3, r2, r3
 800077a:	b29a      	uxth	r2, r3
 800077c:	19bb      	adds	r3, r7, r6
 800077e:	801a      	strh	r2, [r3, #0]
		i++;
 8000780:	197b      	adds	r3, r7, r5
 8000782:	881a      	ldrh	r2, [r3, #0]
 8000784:	197b      	adds	r3, r7, r5
 8000786:	3201      	adds	r2, #1
 8000788:	801a      	strh	r2, [r3, #0]
	while(c[i])
 800078a:	2316      	movs	r3, #22
 800078c:	18fb      	adds	r3, r7, r3
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	68ba      	ldr	r2, [r7, #8]
 8000792:	18d3      	adds	r3, r2, r3
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1b7      	bne.n	800070a <drawString+0x2e>
	}
}
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	46c0      	nop			@ (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	b007      	add	sp, #28
 80007a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080007a4 <drawChar>:
void drawChar(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 80007a4:	b5b0      	push	{r4, r5, r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	0005      	movs	r5, r0
 80007ac:	000c      	movs	r4, r1
 80007ae:	0010      	movs	r0, r2
 80007b0:	0019      	movs	r1, r3
 80007b2:	1dbb      	adds	r3, r7, #6
 80007b4:	1c2a      	adds	r2, r5, #0
 80007b6:	801a      	strh	r2, [r3, #0]
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	1c22      	adds	r2, r4, #0
 80007bc:	801a      	strh	r2, [r3, #0]
 80007be:	1cfb      	adds	r3, r7, #3
 80007c0:	1c02      	adds	r2, r0, #0
 80007c2:	701a      	strb	r2, [r3, #0]
 80007c4:	003b      	movs	r3, r7
 80007c6:	1c0a      	adds	r2, r1, #0
 80007c8:	801a      	strh	r2, [r3, #0]
  uint8_t line;
  int32_t i, j;
  if((x >= _width)            ||
 80007ca:	4b74      	ldr	r3, [pc, #464]	@ (800099c <drawChar+0x1f8>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	5e9b      	ldrsh	r3, [r3, r2]
 80007d0:	1dba      	adds	r2, r7, #6
 80007d2:	2100      	movs	r1, #0
 80007d4:	5e52      	ldrsh	r2, [r2, r1]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	db00      	blt.n	80007dc <drawChar+0x38>
 80007da:	e0db      	b.n	8000994 <drawChar+0x1f0>
     (y >= _height)           ||
 80007dc:	4b70      	ldr	r3, [pc, #448]	@ (80009a0 <drawChar+0x1fc>)
 80007de:	2200      	movs	r2, #0
 80007e0:	5e9b      	ldrsh	r3, [r3, r2]
  if((x >= _width)            ||
 80007e2:	1d3a      	adds	r2, r7, #4
 80007e4:	2100      	movs	r1, #0
 80007e6:	5e52      	ldrsh	r2, [r2, r1]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	db00      	blt.n	80007ee <drawChar+0x4a>
 80007ec:	e0d2      	b.n	8000994 <drawChar+0x1f0>
     ((x + 5 * size - 1) < 0) ||
 80007ee:	1dbb      	adds	r3, r7, #6
 80007f0:	2100      	movs	r1, #0
 80007f2:	5e59      	ldrsh	r1, [r3, r1]
 80007f4:	202c      	movs	r0, #44	@ 0x2c
 80007f6:	183b      	adds	r3, r7, r0
 80007f8:	781a      	ldrb	r2, [r3, #0]
 80007fa:	0013      	movs	r3, r2
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	189b      	adds	r3, r3, r2
 8000800:	18cb      	adds	r3, r1, r3
     (y >= _height)           ||
 8000802:	2b00      	cmp	r3, #0
 8000804:	dc00      	bgt.n	8000808 <drawChar+0x64>
 8000806:	e0c5      	b.n	8000994 <drawChar+0x1f0>
     ((y + 8 * size - 1) < 0))
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2200      	movs	r2, #0
 800080c:	5e9a      	ldrsh	r2, [r3, r2]
 800080e:	183b      	adds	r3, r7, r0
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	00db      	lsls	r3, r3, #3
 8000814:	18d3      	adds	r3, r2, r3
     ((x + 5 * size - 1) < 0) ||
 8000816:	2b00      	cmp	r3, #0
 8000818:	dc00      	bgt.n	800081c <drawChar+0x78>
 800081a:	e0bb      	b.n	8000994 <drawChar+0x1f0>
    return;

  for (i=0; i<6; i++ ) {
 800081c:	2300      	movs	r3, #0
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	e0b3      	b.n	800098a <drawChar+0x1e6>
    if (i == 5)
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	2b05      	cmp	r3, #5
 8000826:	d104      	bne.n	8000832 <drawChar+0x8e>
      line = 0x0;
 8000828:	2317      	movs	r3, #23
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]
 8000830:	e00b      	b.n	800084a <drawChar+0xa6>
    else
      line = Font[(c*5)+i];
 8000832:	1cfb      	adds	r3, r7, #3
 8000834:	781a      	ldrb	r2, [r3, #0]
 8000836:	0013      	movs	r3, r2
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	189a      	adds	r2, r3, r2
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	18d2      	adds	r2, r2, r3
 8000840:	2317      	movs	r3, #23
 8000842:	18fb      	adds	r3, r7, r3
 8000844:	4957      	ldr	r1, [pc, #348]	@ (80009a4 <drawChar+0x200>)
 8000846:	5c8a      	ldrb	r2, [r1, r2]
 8000848:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	e095      	b.n	800097c <drawChar+0x1d8>
      if (line & 0x1) {
 8000850:	2317      	movs	r3, #23
 8000852:	18fb      	adds	r3, r7, r3
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2201      	movs	r2, #1
 8000858:	4013      	ands	r3, r2
 800085a:	d03e      	beq.n	80008da <drawChar+0x136>
        if (size == 1)
 800085c:	232c      	movs	r3, #44	@ 0x2c
 800085e:	18fb      	adds	r3, r7, r3
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d113      	bne.n	800088e <drawChar+0xea>
          writePixel(x+i, y+j, textColor);
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	b29a      	uxth	r2, r3
 800086a:	1dbb      	adds	r3, r7, #6
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	18d3      	adds	r3, r2, r3
 8000870:	b29b      	uxth	r3, r3
 8000872:	b218      	sxth	r0, r3
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	b29a      	uxth	r2, r3
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	18d3      	adds	r3, r2, r3
 800087e:	b29b      	uxth	r3, r3
 8000880:	b219      	sxth	r1, r3
 8000882:	003b      	movs	r3, r7
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	001a      	movs	r2, r3
 8000888:	f7ff ff0a 	bl	80006a0 <writePixel>
 800088c:	e06d      	b.n	800096a <drawChar+0x1c6>
        else {
          fillRect(x+(i*size), y+(j*size), size, size, textColor);
 800088e:	242c      	movs	r4, #44	@ 0x2c
 8000890:	193b      	adds	r3, r7, r4
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	b29b      	uxth	r3, r3
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	b292      	uxth	r2, r2
 800089a:	4353      	muls	r3, r2
 800089c:	b29a      	uxth	r2, r3
 800089e:	1dbb      	adds	r3, r7, #6
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	18d3      	adds	r3, r2, r3
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	b218      	sxth	r0, r3
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	b292      	uxth	r2, r2
 80008b2:	4353      	muls	r3, r2
 80008b4:	b29a      	uxth	r2, r3
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	18d3      	adds	r3, r2, r3
 80008bc:	b29b      	uxth	r3, r3
 80008be:	b219      	sxth	r1, r3
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	b21a      	sxth	r2, r3
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	b21c      	sxth	r4, r3
 80008cc:	003b      	movs	r3, r7
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	0023      	movs	r3, r4
 80008d4:	f7ff febe 	bl	8000654 <fillRect>
 80008d8:	e047      	b.n	800096a <drawChar+0x1c6>
        }
      } else if (bgColor != textColor) {
 80008da:	2428      	movs	r4, #40	@ 0x28
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	0039      	movs	r1, r7
 80008e0:	2200      	movs	r2, #0
 80008e2:	5e9a      	ldrsh	r2, [r3, r2]
 80008e4:	2300      	movs	r3, #0
 80008e6:	5ecb      	ldrsh	r3, [r1, r3]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d03e      	beq.n	800096a <drawChar+0x1c6>
        if (size == 1) // default size
 80008ec:	232c      	movs	r3, #44	@ 0x2c
 80008ee:	18fb      	adds	r3, r7, r3
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d113      	bne.n	800091e <drawChar+0x17a>
          writePixel(x+i, y+j, bgColor);
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	1dbb      	adds	r3, r7, #6
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	18d3      	adds	r3, r2, r3
 8000900:	b29b      	uxth	r3, r3
 8000902:	b218      	sxth	r0, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	b29a      	uxth	r2, r3
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	18d3      	adds	r3, r2, r3
 800090e:	b29b      	uxth	r3, r3
 8000910:	b219      	sxth	r1, r3
 8000912:	193b      	adds	r3, r7, r4
 8000914:	881b      	ldrh	r3, [r3, #0]
 8000916:	001a      	movs	r2, r3
 8000918:	f7ff fec2 	bl	80006a0 <writePixel>
 800091c:	e025      	b.n	800096a <drawChar+0x1c6>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bgColor);
 800091e:	242c      	movs	r4, #44	@ 0x2c
 8000920:	193b      	adds	r3, r7, r4
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	b29b      	uxth	r3, r3
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	b292      	uxth	r2, r2
 800092a:	4353      	muls	r3, r2
 800092c:	b29a      	uxth	r2, r3
 800092e:	1dbb      	adds	r3, r7, #6
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	18d3      	adds	r3, r2, r3
 8000934:	b29b      	uxth	r3, r3
 8000936:	b218      	sxth	r0, r3
 8000938:	193b      	adds	r3, r7, r4
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	b29b      	uxth	r3, r3
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	b292      	uxth	r2, r2
 8000942:	4353      	muls	r3, r2
 8000944:	b29a      	uxth	r2, r3
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	18d3      	adds	r3, r2, r3
 800094c:	b29b      	uxth	r3, r3
 800094e:	b219      	sxth	r1, r3
 8000950:	193b      	adds	r3, r7, r4
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b21a      	sxth	r2, r3
 8000956:	193b      	adds	r3, r7, r4
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	b21c      	sxth	r4, r3
 800095c:	2328      	movs	r3, #40	@ 0x28
 800095e:	18fb      	adds	r3, r7, r3
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	9300      	str	r3, [sp, #0]
 8000964:	0023      	movs	r3, r4
 8000966:	f7ff fe75 	bl	8000654 <fillRect>
        }
      }
      line >>= 1;
 800096a:	2217      	movs	r2, #23
 800096c:	18bb      	adds	r3, r7, r2
 800096e:	18ba      	adds	r2, r7, r2
 8000970:	7812      	ldrb	r2, [r2, #0]
 8000972:	0852      	lsrs	r2, r2, #1
 8000974:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	3301      	adds	r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	2b07      	cmp	r3, #7
 8000980:	dc00      	bgt.n	8000984 <drawChar+0x1e0>
 8000982:	e765      	b.n	8000850 <drawChar+0xac>
  for (i=0; i<6; i++ ) {
 8000984:	693b      	ldr	r3, [r7, #16]
 8000986:	3301      	adds	r3, #1
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	2b05      	cmp	r3, #5
 800098e:	dc00      	bgt.n	8000992 <drawChar+0x1ee>
 8000990:	e747      	b.n	8000822 <drawChar+0x7e>
 8000992:	e000      	b.n	8000996 <drawChar+0x1f2>
    return;
 8000994:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8000996:	46bd      	mov	sp, r7
 8000998:	b006      	add	sp, #24
 800099a:	bdb0      	pop	{r4, r5, r7, pc}
 800099c:	20000028 	.word	0x20000028
 80009a0:	2000002a 	.word	0x2000002a
 80009a4:	08005300 	.word	0x08005300

080009a8 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af02      	add	r7, sp, #8
 80009ae:	0002      	movs	r2, r0
 80009b0:	1dbb      	adds	r3, r7, #6
 80009b2:	801a      	strh	r2, [r3, #0]
    fillRect(0, 0, _width, _height, color);
 80009b4:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <fillScreen+0x30>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	5e9a      	ldrsh	r2, [r3, r2]
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <fillScreen+0x34>)
 80009bc:	2100      	movs	r1, #0
 80009be:	5e59      	ldrsh	r1, [r3, r1]
 80009c0:	1dbb      	adds	r3, r7, #6
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	000b      	movs	r3, r1
 80009c8:	2100      	movs	r1, #0
 80009ca:	2000      	movs	r0, #0
 80009cc:	f7ff fe42 	bl	8000654 <fillRect>
}
 80009d0:	46c0      	nop			@ (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b002      	add	sp, #8
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000028 	.word	0x20000028
 80009dc:	2000002a 	.word	0x2000002a

080009e0 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80009e4:	23a0      	movs	r3, #160	@ 0xa0
 80009e6:	05db      	lsls	r3, r3, #23
 80009e8:	2200      	movs	r2, #0
 80009ea:	2120      	movs	r1, #32
 80009ec:	0018      	movs	r0, r3
 80009ee:	f001 fa43 	bl	8001e78 <HAL_GPIO_WritePin>
}
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <ST7735_Unselect>:

void ST7735_Unselect()
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80009fc:	23a0      	movs	r3, #160	@ 0xa0
 80009fe:	05db      	lsls	r3, r3, #23
 8000a00:	2201      	movs	r2, #1
 8000a02:	2120      	movs	r1, #32
 8000a04:	0018      	movs	r0, r3
 8000a06:	f001 fa37 	bl	8001e78 <HAL_GPIO_WritePin>
}
 8000a0a:	46c0      	nop			@ (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <ST7735_Reset>:

void ST7735_Reset()
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000a14:	23a0      	movs	r3, #160	@ 0xa0
 8000a16:	05db      	lsls	r3, r3, #23
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2108      	movs	r1, #8
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f001 fa2b 	bl	8001e78 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000a22:	2005      	movs	r0, #5
 8000a24:	f000 ffce 	bl	80019c4 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000a28:	23a0      	movs	r3, #160	@ 0xa0
 8000a2a:	05db      	lsls	r3, r3, #23
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2108      	movs	r1, #8
 8000a30:	0018      	movs	r0, r3
 8000a32:	f001 fa21 	bl	8001e78 <HAL_GPIO_WritePin>
}
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	0002      	movs	r2, r0
 8000a44:	1dfb      	adds	r3, r7, #7
 8000a46:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000a48:	23a0      	movs	r3, #160	@ 0xa0
 8000a4a:	05db      	lsls	r3, r3, #23
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2110      	movs	r1, #16
 8000a50:	0018      	movs	r0, r3
 8000a52:	f001 fa11 	bl	8001e78 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000a56:	2301      	movs	r3, #1
 8000a58:	425b      	negs	r3, r3
 8000a5a:	1df9      	adds	r1, r7, #7
 8000a5c:	4803      	ldr	r0, [pc, #12]	@ (8000a6c <ST7735_WriteCommand+0x30>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f002 fbb0 	bl	80031c4 <HAL_SPI_Transmit>
}
 8000a64:	46c0      	nop			@ (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b002      	add	sp, #8
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	2000010c 	.word	0x2000010c

08000a70 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000a7a:	23a0      	movs	r3, #160	@ 0xa0
 8000a7c:	05db      	lsls	r3, r3, #23
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2110      	movs	r1, #16
 8000a82:	0018      	movs	r0, r3
 8000a84:	f001 f9f8 	bl	8001e78 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	425b      	negs	r3, r3
 8000a90:	6879      	ldr	r1, [r7, #4]
 8000a92:	4803      	ldr	r0, [pc, #12]	@ (8000aa0 <ST7735_WriteData+0x30>)
 8000a94:	f002 fb96 	bl	80031c4 <HAL_SPI_Transmit>
}
 8000a98:	46c0      	nop			@ (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b002      	add	sp, #8
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	2000010c 	.word	0x2000010c

08000aa4 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000aa4:	b590      	push	{r4, r7, lr}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	1c5a      	adds	r2, r3, #1
 8000ab0:	607a      	str	r2, [r7, #4]
 8000ab2:	220f      	movs	r2, #15
 8000ab4:	18ba      	adds	r2, r7, r2
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 8000aba:	e04a      	b.n	8000b52 <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	1c5a      	adds	r2, r3, #1
 8000ac0:	607a      	str	r2, [r7, #4]
 8000ac2:	210b      	movs	r1, #11
 8000ac4:	187a      	adds	r2, r7, r1
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f7ff ffb4 	bl	8000a3c <ST7735_WriteCommand>

        numArgs = *addr++;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	1c5a      	adds	r2, r3, #1
 8000ad8:	607a      	str	r2, [r7, #4]
 8000ada:	200a      	movs	r0, #10
 8000adc:	183a      	adds	r2, r7, r0
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000ae2:	183b      	adds	r3, r7, r0
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	230c      	movs	r3, #12
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	2180      	movs	r1, #128	@ 0x80
 8000aee:	400a      	ands	r2, r1
 8000af0:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 8000af2:	183b      	adds	r3, r7, r0
 8000af4:	183a      	adds	r2, r7, r0
 8000af6:	7812      	ldrb	r2, [r2, #0]
 8000af8:	217f      	movs	r1, #127	@ 0x7f
 8000afa:	400a      	ands	r2, r1
 8000afc:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 8000afe:	183b      	adds	r3, r7, r0
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d00c      	beq.n	8000b20 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000b06:	0004      	movs	r4, r0
 8000b08:	183b      	adds	r3, r7, r0
 8000b0a:	781a      	ldrb	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	0011      	movs	r1, r2
 8000b10:	0018      	movs	r0, r3
 8000b12:	f7ff ffad 	bl	8000a70 <ST7735_WriteData>
            addr += numArgs;
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	18d3      	adds	r3, r2, r3
 8000b1e:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000b20:	210c      	movs	r1, #12
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d013      	beq.n	8000b52 <DisplayInit+0xae>
            ms = *addr++;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	1c5a      	adds	r2, r3, #1
 8000b2e:	607a      	str	r2, [r7, #4]
 8000b30:	781a      	ldrb	r2, [r3, #0]
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	2bff      	cmp	r3, #255	@ 0xff
 8000b3c:	d103      	bne.n	8000b46 <DisplayInit+0xa2>
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	22fa      	movs	r2, #250	@ 0xfa
 8000b42:	0052      	lsls	r2, r2, #1
 8000b44:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 8000b46:	230c      	movs	r3, #12
 8000b48:	18fb      	adds	r3, r7, r3
 8000b4a:	881b      	ldrh	r3, [r3, #0]
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f000 ff39 	bl	80019c4 <HAL_Delay>
    while(numCommands--) {
 8000b52:	220f      	movs	r2, #15
 8000b54:	18bb      	adds	r3, r7, r2
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	18ba      	adds	r2, r7, r2
 8000b5a:	1e59      	subs	r1, r3, #1
 8000b5c:	7011      	strb	r1, [r2, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d1ac      	bne.n	8000abc <DisplayInit+0x18>
        }
    }
}
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	46c0      	nop			@ (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b005      	add	sp, #20
 8000b6a:	bd90      	pop	{r4, r7, pc}

08000b6c <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000b6c:	b5b0      	push	{r4, r5, r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	0005      	movs	r5, r0
 8000b74:	000c      	movs	r4, r1
 8000b76:	0010      	movs	r0, r2
 8000b78:	0019      	movs	r1, r3
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	1c2a      	adds	r2, r5, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
 8000b80:	1dbb      	adds	r3, r7, #6
 8000b82:	1c22      	adds	r2, r4, #0
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	1d7b      	adds	r3, r7, #5
 8000b88:	1c02      	adds	r2, r0, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	1c0a      	adds	r2, r1, #0
 8000b90:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000b92:	202a      	movs	r0, #42	@ 0x2a
 8000b94:	f7ff ff52 	bl	8000a3c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8000b98:	210c      	movs	r1, #12
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c14 <ST7735_SetAddressWindow+0xa8>)
 8000ba2:	781a      	ldrb	r2, [r3, #0]
 8000ba4:	1dfb      	adds	r3, r7, #7
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	18d3      	adds	r3, r2, r3
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	705a      	strb	r2, [r3, #1]
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	709a      	strb	r2, [r3, #2]
 8000bb6:	4b17      	ldr	r3, [pc, #92]	@ (8000c14 <ST7735_SetAddressWindow+0xa8>)
 8000bb8:	781a      	ldrb	r2, [r3, #0]
 8000bba:	1d7b      	adds	r3, r7, #5
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	18d3      	adds	r3, r2, r3
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8000bc6:	000c      	movs	r4, r1
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2104      	movs	r1, #4
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f7ff ff4f 	bl	8000a70 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000bd2:	202b      	movs	r0, #43	@ 0x2b
 8000bd4:	f7ff ff32 	bl	8000a3c <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c18 <ST7735_SetAddressWindow+0xac>)
 8000bda:	781a      	ldrb	r2, [r3, #0]
 8000bdc:	1dbb      	adds	r3, r7, #6
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	18d3      	adds	r3, r2, r3
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	0021      	movs	r1, r4
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	@ (8000c18 <ST7735_SetAddressWindow+0xac>)
 8000bec:	781a      	ldrb	r2, [r3, #0]
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	18d3      	adds	r3, r2, r3
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2104      	movs	r1, #4
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f7ff ff36 	bl	8000a70 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000c04:	202c      	movs	r0, #44	@ 0x2c
 8000c06:	f7ff ff19 	bl	8000a3c <ST7735_WriteCommand>
}
 8000c0a:	46c0      	nop			@ (mov r8, r8)
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	b004      	add	sp, #16
 8000c10:	bdb0      	pop	{r4, r5, r7, pc}
 8000c12:	46c0      	nop			@ (mov r8, r8)
 8000c14:	2000002f 	.word	0x2000002f
 8000c18:	20000030 	.word	0x20000030

08000c1c <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	0002      	movs	r2, r0
 8000c24:	1dfb      	adds	r3, r7, #7
 8000c26:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 8000c28:	f7ff feda 	bl	80009e0 <ST7735_Select>
    ST7735_Reset();
 8000c2c:	f7ff fef0 	bl	8000a10 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8000c30:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <ST7735_Init+0x50>)
 8000c32:	0018      	movs	r0, r3
 8000c34:	f7ff ff36 	bl	8000aa4 <DisplayInit>
    DisplayInit(init_cmds2);
 8000c38:	4b0d      	ldr	r3, [pc, #52]	@ (8000c70 <ST7735_Init+0x54>)
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f7ff ff32 	bl	8000aa4 <DisplayInit>
    DisplayInit(init_cmds3);
 8000c40:	4b0c      	ldr	r3, [pc, #48]	@ (8000c74 <ST7735_Init+0x58>)
 8000c42:	0018      	movs	r0, r3
 8000c44:	f7ff ff2e 	bl	8000aa4 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8000c48:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <ST7735_Init+0x5c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <ST7735_Init+0x60>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8000c54:	1dfb      	adds	r3, r7, #7
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f000 f811 	bl	8000c80 <ST7735_SetRotation>
    ST7735_Unselect();
 8000c5e:	f7ff fecb 	bl	80009f8 <ST7735_Unselect>

}
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b002      	add	sp, #8
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	080057fc 	.word	0x080057fc
 8000c70:	08005834 	.word	0x08005834
 8000c74:	08005844 	.word	0x08005844
 8000c78:	2000002d 	.word	0x2000002d
 8000c7c:	2000002e 	.word	0x2000002e

08000c80 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	0002      	movs	r2, r0
 8000c88:	1dfb      	adds	r3, r7, #7
 8000c8a:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8000c8c:	230f      	movs	r3, #15
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8000c94:	1dfb      	adds	r3, r7, #7
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2203      	movs	r2, #3
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4b36      	ldr	r3, [pc, #216]	@ (8000d78 <ST7735_SetRotation+0xf8>)
 8000ca0:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8000ca2:	4b35      	ldr	r3, [pc, #212]	@ (8000d78 <ST7735_SetRotation+0xf8>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b03      	cmp	r3, #3
 8000ca8:	d041      	beq.n	8000d2e <ST7735_SetRotation+0xae>
 8000caa:	dc53      	bgt.n	8000d54 <ST7735_SetRotation+0xd4>
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d02b      	beq.n	8000d08 <ST7735_SetRotation+0x88>
 8000cb0:	dc50      	bgt.n	8000d54 <ST7735_SetRotation+0xd4>
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d002      	beq.n	8000cbc <ST7735_SetRotation+0x3c>
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d013      	beq.n	8000ce2 <ST7735_SetRotation+0x62>
 8000cba:	e04b      	b.n	8000d54 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	18fb      	adds	r3, r7, r3
 8000cc0:	22c0      	movs	r2, #192	@ 0xc0
 8000cc2:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8000cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d7c <ST7735_SetRotation+0xfc>)
 8000cc6:	22a0      	movs	r2, #160	@ 0xa0
 8000cc8:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000cca:	4b2d      	ldr	r3, [pc, #180]	@ (8000d80 <ST7735_SetRotation+0x100>)
 8000ccc:	2280      	movs	r2, #128	@ 0x80
 8000cce:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8000cd0:	4b2c      	ldr	r3, [pc, #176]	@ (8000d84 <ST7735_SetRotation+0x104>)
 8000cd2:	781a      	ldrb	r2, [r3, #0]
 8000cd4:	4b2c      	ldr	r3, [pc, #176]	@ (8000d88 <ST7735_SetRotation+0x108>)
 8000cd6:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8000d8c <ST7735_SetRotation+0x10c>)
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8000d90 <ST7735_SetRotation+0x110>)
 8000cde:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000ce0:	e038      	b.n	8000d54 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	22a0      	movs	r2, #160	@ 0xa0
 8000ce8:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8000cea:	4b25      	ldr	r3, [pc, #148]	@ (8000d80 <ST7735_SetRotation+0x100>)
 8000cec:	22a0      	movs	r2, #160	@ 0xa0
 8000cee:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000cf0:	4b22      	ldr	r3, [pc, #136]	@ (8000d7c <ST7735_SetRotation+0xfc>)
 8000cf2:	2280      	movs	r2, #128	@ 0x80
 8000cf4:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000cf6:	4b23      	ldr	r3, [pc, #140]	@ (8000d84 <ST7735_SetRotation+0x104>)
 8000cf8:	781a      	ldrb	r2, [r3, #0]
 8000cfa:	4b25      	ldr	r3, [pc, #148]	@ (8000d90 <ST7735_SetRotation+0x110>)
 8000cfc:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000cfe:	4b23      	ldr	r3, [pc, #140]	@ (8000d8c <ST7735_SetRotation+0x10c>)
 8000d00:	781a      	ldrb	r2, [r3, #0]
 8000d02:	4b21      	ldr	r3, [pc, #132]	@ (8000d88 <ST7735_SetRotation+0x108>)
 8000d04:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000d06:	e025      	b.n	8000d54 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000d08:	230f      	movs	r3, #15
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <ST7735_SetRotation+0xfc>)
 8000d12:	22a0      	movs	r2, #160	@ 0xa0
 8000d14:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000d16:	4b1a      	ldr	r3, [pc, #104]	@ (8000d80 <ST7735_SetRotation+0x100>)
 8000d18:	2280      	movs	r2, #128	@ 0x80
 8000d1a:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000d1c:	4b19      	ldr	r3, [pc, #100]	@ (8000d84 <ST7735_SetRotation+0x104>)
 8000d1e:	781a      	ldrb	r2, [r3, #0]
 8000d20:	4b19      	ldr	r3, [pc, #100]	@ (8000d88 <ST7735_SetRotation+0x108>)
 8000d22:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000d24:	4b19      	ldr	r3, [pc, #100]	@ (8000d8c <ST7735_SetRotation+0x10c>)
 8000d26:	781a      	ldrb	r2, [r3, #0]
 8000d28:	4b19      	ldr	r3, [pc, #100]	@ (8000d90 <ST7735_SetRotation+0x110>)
 8000d2a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000d2c:	e012      	b.n	8000d54 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000d2e:	230f      	movs	r3, #15
 8000d30:	18fb      	adds	r3, r7, r3
 8000d32:	2260      	movs	r2, #96	@ 0x60
 8000d34:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8000d36:	4b12      	ldr	r3, [pc, #72]	@ (8000d80 <ST7735_SetRotation+0x100>)
 8000d38:	22a0      	movs	r2, #160	@ 0xa0
 8000d3a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <ST7735_SetRotation+0xfc>)
 8000d3e:	2280      	movs	r2, #128	@ 0x80
 8000d40:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <ST7735_SetRotation+0x104>)
 8000d44:	781a      	ldrb	r2, [r3, #0]
 8000d46:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <ST7735_SetRotation+0x110>)
 8000d48:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000d4a:	4b10      	ldr	r3, [pc, #64]	@ (8000d8c <ST7735_SetRotation+0x10c>)
 8000d4c:	781a      	ldrb	r2, [r3, #0]
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <ST7735_SetRotation+0x108>)
 8000d50:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000d52:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 8000d54:	f7ff fe44 	bl	80009e0 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000d58:	2036      	movs	r0, #54	@ 0x36
 8000d5a:	f7ff fe6f 	bl	8000a3c <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000d5e:	230f      	movs	r3, #15
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	2101      	movs	r1, #1
 8000d64:	0018      	movs	r0, r3
 8000d66:	f7ff fe83 	bl	8000a70 <ST7735_WriteData>
  ST7735_Unselect();
 8000d6a:	f7ff fe45 	bl	80009f8 <ST7735_Unselect>
}
 8000d6e:	46c0      	nop			@ (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b004      	add	sp, #16
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	2000002c 	.word	0x2000002c
 8000d7c:	2000002a 	.word	0x2000002a
 8000d80:	20000028 	.word	0x20000028
 8000d84:	2000002d 	.word	0x2000002d
 8000d88:	2000002f 	.word	0x2000002f
 8000d8c:	2000002e 	.word	0x2000002e
 8000d90:	20000030 	.word	0x20000030

08000d94 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000d94:	b590      	push	{r4, r7, lr}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	0004      	movs	r4, r0
 8000d9c:	0008      	movs	r0, r1
 8000d9e:	0011      	movs	r1, r2
 8000da0:	1dbb      	adds	r3, r7, #6
 8000da2:	1c22      	adds	r2, r4, #0
 8000da4:	801a      	strh	r2, [r3, #0]
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	1c02      	adds	r2, r0, #0
 8000daa:	801a      	strh	r2, [r3, #0]
 8000dac:	1cbb      	adds	r3, r7, #2
 8000dae:	1c0a      	adds	r2, r1, #0
 8000db0:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 8000db2:	1dbb      	adds	r3, r7, #6
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e28 <ST7735_DrawPixel+0x94>)
 8000db8:	2100      	movs	r1, #0
 8000dba:	5e52      	ldrsh	r2, [r2, r1]
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	da2f      	bge.n	8000e20 <ST7735_DrawPixel+0x8c>
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	881b      	ldrh	r3, [r3, #0]
 8000dc4:	4a19      	ldr	r2, [pc, #100]	@ (8000e2c <ST7735_DrawPixel+0x98>)
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	5e52      	ldrsh	r2, [r2, r1]
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	da28      	bge.n	8000e20 <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 8000dce:	f7ff fe07 	bl	80009e0 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8000dd2:	1dbb      	adds	r3, r7, #6
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	b2d8      	uxtb	r0, r3
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	b2d9      	uxtb	r1, r3
 8000dde:	1dbb      	adds	r3, r7, #6
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	3301      	adds	r3, #1
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	3301      	adds	r3, #1
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	f7ff febb 	bl	8000b6c <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000df6:	1cbb      	adds	r3, r7, #2
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	0a1b      	lsrs	r3, r3, #8
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	210c      	movs	r1, #12
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	701a      	strb	r2, [r3, #0]
 8000e06:	1cbb      	adds	r3, r7, #2
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	2102      	movs	r1, #2
 8000e14:	0018      	movs	r0, r3
 8000e16:	f7ff fe2b 	bl	8000a70 <ST7735_WriteData>

    ST7735_Unselect();
 8000e1a:	f7ff fded 	bl	80009f8 <ST7735_Unselect>
 8000e1e:	e000      	b.n	8000e22 <ST7735_DrawPixel+0x8e>
        return;
 8000e20:	46c0      	nop			@ (mov r8, r8)
}
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b005      	add	sp, #20
 8000e26:	bd90      	pop	{r4, r7, pc}
 8000e28:	20000028 	.word	0x20000028
 8000e2c:	2000002a 	.word	0x2000002a

08000e30 <ST7735_FillRectangle>:

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000e30:	b5b0      	push	{r4, r5, r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	0005      	movs	r5, r0
 8000e38:	000c      	movs	r4, r1
 8000e3a:	0010      	movs	r0, r2
 8000e3c:	0019      	movs	r1, r3
 8000e3e:	1dbb      	adds	r3, r7, #6
 8000e40:	1c2a      	adds	r2, r5, #0
 8000e42:	801a      	strh	r2, [r3, #0]
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	1c22      	adds	r2, r4, #0
 8000e48:	801a      	strh	r2, [r3, #0]
 8000e4a:	1cbb      	adds	r3, r7, #2
 8000e4c:	1c02      	adds	r2, r0, #0
 8000e4e:	801a      	strh	r2, [r3, #0]
 8000e50:	003b      	movs	r3, r7
 8000e52:	1c0a      	adds	r2, r1, #0
 8000e54:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8000e56:	1dbb      	adds	r3, r7, #6
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	4a49      	ldr	r2, [pc, #292]	@ (8000f80 <ST7735_FillRectangle+0x150>)
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	5e52      	ldrsh	r2, [r2, r1]
 8000e60:	4293      	cmp	r3, r2
 8000e62:	db00      	blt.n	8000e66 <ST7735_FillRectangle+0x36>
 8000e64:	e088      	b.n	8000f78 <ST7735_FillRectangle+0x148>
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	4a46      	ldr	r2, [pc, #280]	@ (8000f84 <ST7735_FillRectangle+0x154>)
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	5e52      	ldrsh	r2, [r2, r1]
 8000e70:	4293      	cmp	r3, r2
 8000e72:	db00      	blt.n	8000e76 <ST7735_FillRectangle+0x46>
 8000e74:	e080      	b.n	8000f78 <ST7735_FillRectangle+0x148>
    if((x + w - 1) >= _width) w = _width - x;
 8000e76:	1dbb      	adds	r3, r7, #6
 8000e78:	881a      	ldrh	r2, [r3, #0]
 8000e7a:	1cbb      	adds	r3, r7, #2
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	18d3      	adds	r3, r2, r3
 8000e80:	4a3f      	ldr	r2, [pc, #252]	@ (8000f80 <ST7735_FillRectangle+0x150>)
 8000e82:	2100      	movs	r1, #0
 8000e84:	5e52      	ldrsh	r2, [r2, r1]
 8000e86:	4293      	cmp	r3, r2
 8000e88:	dd08      	ble.n	8000e9c <ST7735_FillRectangle+0x6c>
 8000e8a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f80 <ST7735_FillRectangle+0x150>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	5e9b      	ldrsh	r3, [r3, r2]
 8000e90:	b299      	uxth	r1, r3
 8000e92:	1cbb      	adds	r3, r7, #2
 8000e94:	1dba      	adds	r2, r7, #6
 8000e96:	8812      	ldrh	r2, [r2, #0]
 8000e98:	1a8a      	subs	r2, r1, r2
 8000e9a:	801a      	strh	r2, [r3, #0]
    if((y + h - 1) >= _height) h = _height - y;
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	881a      	ldrh	r2, [r3, #0]
 8000ea0:	003b      	movs	r3, r7
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	18d3      	adds	r3, r2, r3
 8000ea6:	4a37      	ldr	r2, [pc, #220]	@ (8000f84 <ST7735_FillRectangle+0x154>)
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	5e52      	ldrsh	r2, [r2, r1]
 8000eac:	4293      	cmp	r3, r2
 8000eae:	dd08      	ble.n	8000ec2 <ST7735_FillRectangle+0x92>
 8000eb0:	4b34      	ldr	r3, [pc, #208]	@ (8000f84 <ST7735_FillRectangle+0x154>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	5e9b      	ldrsh	r3, [r3, r2]
 8000eb6:	b299      	uxth	r1, r3
 8000eb8:	003b      	movs	r3, r7
 8000eba:	1d3a      	adds	r2, r7, #4
 8000ebc:	8812      	ldrh	r2, [r2, #0]
 8000ebe:	1a8a      	subs	r2, r1, r2
 8000ec0:	801a      	strh	r2, [r3, #0]

    ST7735_Select();
 8000ec2:	f7ff fd8d 	bl	80009e0 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000ec6:	1dbb      	adds	r3, r7, #6
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	b2d8      	uxtb	r0, r3
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	b2d9      	uxtb	r1, r3
 8000ed2:	1dbb      	adds	r3, r7, #6
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	1cbb      	adds	r3, r7, #2
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	18d3      	adds	r3, r2, r3
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	b2dc      	uxtb	r4, r3
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	003b      	movs	r3, r7
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	18d3      	adds	r3, r2, r3
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	0022      	movs	r2, r4
 8000efc:	f7ff fe36 	bl	8000b6c <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000f00:	2120      	movs	r1, #32
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	0a1b      	lsrs	r3, r3, #8
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	200c      	movs	r0, #12
 8000f0e:	183b      	adds	r3, r7, r0
 8000f10:	701a      	strb	r2, [r3, #0]
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	183b      	adds	r3, r7, r0
 8000f1a:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000f1c:	23a0      	movs	r3, #160	@ 0xa0
 8000f1e:	05db      	lsls	r3, r3, #23
 8000f20:	2201      	movs	r2, #1
 8000f22:	2110      	movs	r1, #16
 8000f24:	0018      	movs	r0, r3
 8000f26:	f000 ffa7 	bl	8001e78 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	003a      	movs	r2, r7
 8000f2e:	8812      	ldrh	r2, [r2, #0]
 8000f30:	801a      	strh	r2, [r3, #0]
 8000f32:	e01a      	b.n	8000f6a <ST7735_FillRectangle+0x13a>
        for(x = w; x > 0; x--) {
 8000f34:	1dbb      	adds	r3, r7, #6
 8000f36:	1cba      	adds	r2, r7, #2
 8000f38:	8812      	ldrh	r2, [r2, #0]
 8000f3a:	801a      	strh	r2, [r3, #0]
 8000f3c:	e00c      	b.n	8000f58 <ST7735_FillRectangle+0x128>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000f3e:	2301      	movs	r3, #1
 8000f40:	425b      	negs	r3, r3
 8000f42:	220c      	movs	r2, #12
 8000f44:	18b9      	adds	r1, r7, r2
 8000f46:	4810      	ldr	r0, [pc, #64]	@ (8000f88 <ST7735_FillRectangle+0x158>)
 8000f48:	2202      	movs	r2, #2
 8000f4a:	f002 f93b 	bl	80031c4 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000f4e:	1dbb      	adds	r3, r7, #6
 8000f50:	881a      	ldrh	r2, [r3, #0]
 8000f52:	1dbb      	adds	r3, r7, #6
 8000f54:	3a01      	subs	r2, #1
 8000f56:	801a      	strh	r2, [r3, #0]
 8000f58:	1dbb      	adds	r3, r7, #6
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1ee      	bne.n	8000f3e <ST7735_FillRectangle+0x10e>
    for(y = h; y > 0; y--) {
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	881a      	ldrh	r2, [r3, #0]
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	3a01      	subs	r2, #1
 8000f68:	801a      	strh	r2, [r3, #0]
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1e0      	bne.n	8000f34 <ST7735_FillRectangle+0x104>
        }
    }

    ST7735_Unselect();
 8000f72:	f7ff fd41 	bl	80009f8 <ST7735_Unselect>
 8000f76:	e000      	b.n	8000f7a <ST7735_FillRectangle+0x14a>
    if((x >= _width) || (y >= _height)) return;
 8000f78:	46c0      	nop			@ (mov r8, r8)
}
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b004      	add	sp, #16
 8000f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f80:	20000028 	.word	0x20000028
 8000f84:	2000002a 	.word	0x2000002a
 8000f88:	2000010c 	.word	0x2000010c

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f92:	f000 fc91 	bl	80018b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f96:	f000 f86f 	bl	8001078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9a:	f000 fa21 	bl	80013e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f9e:	f000 f8c9 	bl	8001134 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000fa2:	f000 f907 	bl	80011b4 <MX_SPI1_Init>
  MX_TIM17_Init();
 8000fa6:	f000 f945 	bl	8001234 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8000faa:	f000 f9cb 	bl	8001344 <MX_USART1_UART_Init>
  //MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  ST7735_Unselect();
 8000fae:	f7ff fd23 	bl	80009f8 <ST7735_Unselect>
  ST7735_Init(1);
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f7ff fe32 	bl	8000c1c <ST7735_Init>
  fillScreen(BLUE);
 8000fb8:	201f      	movs	r0, #31
 8000fba:	f7ff fcf5 	bl	80009a8 <fillScreen>
  buffer[0] = 'A';
 8000fbe:	4b28      	ldr	r3, [pc, #160]	@ (8001060 <main+0xd4>)
 8000fc0:	2241      	movs	r2, #65	@ 0x41
 8000fc2:	701a      	strb	r2, [r3, #0]
  buffer[1] = 'B';
 8000fc4:	4b26      	ldr	r3, [pc, #152]	@ (8001060 <main+0xd4>)
 8000fc6:	2242      	movs	r2, #66	@ 0x42
 8000fc8:	705a      	strb	r2, [r3, #1]
  HAL_UART_Receive(&huart1, &buffer, 1, 0xFFFF);
 8000fca:	4b26      	ldr	r3, [pc, #152]	@ (8001064 <main+0xd8>)
 8000fcc:	4924      	ldr	r1, [pc, #144]	@ (8001060 <main+0xd4>)
 8000fce:	4826      	ldr	r0, [pc, #152]	@ (8001068 <main+0xdc>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	f003 f9d3 	bl	800437c <HAL_UART_Receive>
 8000fd6:	e000      	b.n	8000fda <main+0x4e>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(true){
		  ii++;
 8000fd8:	46c0      	nop			@ (mov r8, r8)
 8000fda:	4b24      	ldr	r3, [pc, #144]	@ (800106c <main+0xe0>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	4b21      	ldr	r3, [pc, #132]	@ (800106c <main+0xe0>)
 8000fe6:	801a      	strh	r2, [r3, #0]
		  if(ii>60000) break;
 8000fe8:	4b20      	ldr	r3, [pc, #128]	@ (800106c <main+0xe0>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	4a20      	ldr	r2, [pc, #128]	@ (8001070 <main+0xe4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d824      	bhi.n	800103e <main+0xb2>
		  if(HAL_UART_Receive(&huart1, &(buffer[i]), 1, 0xFFFF)==HAL_OK)
 8000ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8001074 <main+0xe8>)
 8000ff6:	881b      	ldrh	r3, [r3, #0]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	001a      	movs	r2, r3
 8000ffc:	4b18      	ldr	r3, [pc, #96]	@ (8001060 <main+0xd4>)
 8000ffe:	18d1      	adds	r1, r2, r3
 8001000:	4b18      	ldr	r3, [pc, #96]	@ (8001064 <main+0xd8>)
 8001002:	4819      	ldr	r0, [pc, #100]	@ (8001068 <main+0xdc>)
 8001004:	2201      	movs	r2, #1
 8001006:	f003 f9b9 	bl	800437c <HAL_UART_Receive>
 800100a:	1e03      	subs	r3, r0, #0
 800100c:	d1e4      	bne.n	8000fd8 <main+0x4c>
		  	{

			  if(buffer[i]&&buffer[i]=='\n') break;
 800100e:	4b19      	ldr	r3, [pc, #100]	@ (8001074 <main+0xe8>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	b29b      	uxth	r3, r3
 8001014:	001a      	movs	r2, r3
 8001016:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <main+0xd4>)
 8001018:	5c9b      	ldrb	r3, [r3, r2]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d007      	beq.n	800102e <main+0xa2>
 800101e:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <main+0xe8>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	b29b      	uxth	r3, r3
 8001024:	001a      	movs	r2, r3
 8001026:	4b0e      	ldr	r3, [pc, #56]	@ (8001060 <main+0xd4>)
 8001028:	5c9b      	ldrb	r3, [r3, r2]
 800102a:	2b0a      	cmp	r3, #10
 800102c:	d009      	beq.n	8001042 <main+0xb6>
			  	        i++;
 800102e:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <main+0xe8>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	b29b      	uxth	r3, r3
 8001034:	3301      	adds	r3, #1
 8001036:	b29a      	uxth	r2, r3
 8001038:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <main+0xe8>)
 800103a:	801a      	strh	r2, [r3, #0]
		  ii++;
 800103c:	e7cc      	b.n	8000fd8 <main+0x4c>
		  if(ii>60000) break;
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	e000      	b.n	8001044 <main+0xb8>
			  if(buffer[i]&&buffer[i]=='\n') break;
 8001042:	46c0      	nop			@ (mov r8, r8)

		  	}
	      }
	  drawString(70, 70, buffer, BLACK, GREEN, 1, 1);
 8001044:	4a06      	ldr	r2, [pc, #24]	@ (8001060 <main+0xd4>)
 8001046:	2301      	movs	r3, #1
 8001048:	9302      	str	r3, [sp, #8]
 800104a:	2301      	movs	r3, #1
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	23fc      	movs	r3, #252	@ 0xfc
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	2300      	movs	r3, #0
 8001056:	2146      	movs	r1, #70	@ 0x46
 8001058:	2046      	movs	r0, #70	@ 0x46
 800105a:	f7ff fb3f 	bl	80006dc <drawString>
  while (1)
 800105e:	e7bc      	b.n	8000fda <main+0x4e>
 8001060:	20000038 	.word	0x20000038
 8001064:	0000ffff 	.word	0x0000ffff
 8001068:	200001bc 	.word	0x200001bc
 800106c:	20000034 	.word	0x20000034
 8001070:	0000ea60 	.word	0x0000ea60
 8001074:	20000032 	.word	0x20000032

08001078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b095      	sub	sp, #84	@ 0x54
 800107c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	2414      	movs	r4, #20
 8001080:	193b      	adds	r3, r7, r4
 8001082:	0018      	movs	r0, r3
 8001084:	233c      	movs	r3, #60	@ 0x3c
 8001086:	001a      	movs	r2, r3
 8001088:	2100      	movs	r1, #0
 800108a:	f004 f901 	bl	8005290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	0018      	movs	r0, r3
 8001092:	2310      	movs	r3, #16
 8001094:	001a      	movs	r2, r3
 8001096:	2100      	movs	r1, #0
 8001098:	f004 f8fa 	bl	8005290 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800109c:	2380      	movs	r3, #128	@ 0x80
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	0018      	movs	r0, r3
 80010a2:	f001 f845 	bl	8002130 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a6:	193b      	adds	r3, r7, r4
 80010a8:	2202      	movs	r2, #2
 80010aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ac:	193b      	adds	r3, r7, r4
 80010ae:	2280      	movs	r2, #128	@ 0x80
 80010b0:	0052      	lsls	r2, r2, #1
 80010b2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80010b4:	0021      	movs	r1, r4
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	2240      	movs	r2, #64	@ 0x40
 80010c0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	2202      	movs	r2, #2
 80010c6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	2202      	movs	r2, #2
 80010cc:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80010ce:	187b      	adds	r3, r7, r1
 80010d0:	2200      	movs	r2, #0
 80010d2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80010d4:	187b      	adds	r3, r7, r1
 80010d6:	2208      	movs	r2, #8
 80010d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	0292      	lsls	r2, r2, #10
 80010e0:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	2280      	movs	r2, #128	@ 0x80
 80010e6:	0492      	lsls	r2, r2, #18
 80010e8:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	2280      	movs	r2, #128	@ 0x80
 80010ee:	0592      	lsls	r2, r2, #22
 80010f0:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f2:	187b      	adds	r3, r7, r1
 80010f4:	0018      	movs	r0, r3
 80010f6:	f001 f867 	bl	80021c8 <HAL_RCC_OscConfig>
 80010fa:	1e03      	subs	r3, r0, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80010fe:	f000 f9b3 	bl	8001468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2207      	movs	r2, #7
 8001106:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	2202      	movs	r2, #2
 800110c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2102      	movs	r1, #2
 800111e:	0018      	movs	r0, r3
 8001120:	f001 fbb2 	bl	8002888 <HAL_RCC_ClockConfig>
 8001124:	1e03      	subs	r3, r0, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001128:	f000 f99e 	bl	8001468 <Error_Handler>
  }
}
 800112c:	46c0      	nop			@ (mov r8, r8)
 800112e:	46bd      	mov	sp, r7
 8001130:	b015      	add	sp, #84	@ 0x54
 8001132:	bd90      	pop	{r4, r7, pc}

08001134 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001138:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <MX_I2C1_Init+0x74>)
 800113a:	4a1c      	ldr	r2, [pc, #112]	@ (80011ac <MX_I2C1_Init+0x78>)
 800113c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 800113e:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <MX_I2C1_Init+0x74>)
 8001140:	4a1b      	ldr	r2, [pc, #108]	@ (80011b0 <MX_I2C1_Init+0x7c>)
 8001142:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001144:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <MX_I2C1_Init+0x74>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800114a:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <MX_I2C1_Init+0x74>)
 800114c:	2201      	movs	r2, #1
 800114e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001150:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <MX_I2C1_Init+0x74>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001156:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <MX_I2C1_Init+0x74>)
 8001158:	2200      	movs	r2, #0
 800115a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800115c:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <MX_I2C1_Init+0x74>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <MX_I2C1_Init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001168:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <MX_I2C1_Init+0x74>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <MX_I2C1_Init+0x74>)
 8001170:	0018      	movs	r0, r3
 8001172:	f000 fe9f 	bl	8001eb4 <HAL_I2C_Init>
 8001176:	1e03      	subs	r3, r0, #0
 8001178:	d001      	beq.n	800117e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800117a:	f000 f975 	bl	8001468 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800117e:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <MX_I2C1_Init+0x74>)
 8001180:	2100      	movs	r1, #0
 8001182:	0018      	movs	r0, r3
 8001184:	f000 ff3c 	bl	8002000 <HAL_I2CEx_ConfigAnalogFilter>
 8001188:	1e03      	subs	r3, r0, #0
 800118a:	d001      	beq.n	8001190 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800118c:	f000 f96c 	bl	8001468 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001190:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <MX_I2C1_Init+0x74>)
 8001192:	2100      	movs	r1, #0
 8001194:	0018      	movs	r0, r3
 8001196:	f000 ff7f 	bl	8002098 <HAL_I2CEx_ConfigDigitalFilter>
 800119a:	1e03      	subs	r3, r0, #0
 800119c:	d001      	beq.n	80011a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800119e:	f000 f963 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011a2:	46c0      	nop			@ (mov r8, r8)
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	200000b8 	.word	0x200000b8
 80011ac:	40005400 	.word	0x40005400
 80011b0:	10b17db5 	.word	0x10b17db5

080011b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011b8:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <MX_SPI1_Init+0x78>)
 80011ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001230 <MX_SPI1_Init+0x7c>)
 80011bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011be:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <MX_SPI1_Init+0x78>)
 80011c0:	2282      	movs	r2, #130	@ 0x82
 80011c2:	0052      	lsls	r2, r2, #1
 80011c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80011c6:	4b19      	ldr	r3, [pc, #100]	@ (800122c <MX_SPI1_Init+0x78>)
 80011c8:	2280      	movs	r2, #128	@ 0x80
 80011ca:	0212      	lsls	r2, r2, #8
 80011cc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ce:	4b17      	ldr	r3, [pc, #92]	@ (800122c <MX_SPI1_Init+0x78>)
 80011d0:	22e0      	movs	r2, #224	@ 0xe0
 80011d2:	00d2      	lsls	r2, r2, #3
 80011d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011d6:	4b15      	ldr	r3, [pc, #84]	@ (800122c <MX_SPI1_Init+0x78>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011dc:	4b13      	ldr	r3, [pc, #76]	@ (800122c <MX_SPI1_Init+0x78>)
 80011de:	2200      	movs	r2, #0
 80011e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011e2:	4b12      	ldr	r3, [pc, #72]	@ (800122c <MX_SPI1_Init+0x78>)
 80011e4:	2280      	movs	r2, #128	@ 0x80
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80011ea:	4b10      	ldr	r3, [pc, #64]	@ (800122c <MX_SPI1_Init+0x78>)
 80011ec:	2220      	movs	r2, #32
 80011ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f0:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <MX_SPI1_Init+0x78>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011f6:	4b0d      	ldr	r3, [pc, #52]	@ (800122c <MX_SPI1_Init+0x78>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011fc:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <MX_SPI1_Init+0x78>)
 80011fe:	2200      	movs	r2, #0
 8001200:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001202:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <MX_SPI1_Init+0x78>)
 8001204:	2207      	movs	r2, #7
 8001206:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001208:	4b08      	ldr	r3, [pc, #32]	@ (800122c <MX_SPI1_Init+0x78>)
 800120a:	2200      	movs	r2, #0
 800120c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800120e:	4b07      	ldr	r3, [pc, #28]	@ (800122c <MX_SPI1_Init+0x78>)
 8001210:	2208      	movs	r2, #8
 8001212:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001214:	4b05      	ldr	r3, [pc, #20]	@ (800122c <MX_SPI1_Init+0x78>)
 8001216:	0018      	movs	r0, r3
 8001218:	f001 ff1c 	bl	8003054 <HAL_SPI_Init>
 800121c:	1e03      	subs	r3, r0, #0
 800121e:	d001      	beq.n	8001224 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8001220:	f000 f922 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001224:	46c0      	nop			@ (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	2000010c 	.word	0x2000010c
 8001230:	40013000 	.word	0x40013000

08001234 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b094      	sub	sp, #80	@ 0x50
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800123a:	2334      	movs	r3, #52	@ 0x34
 800123c:	18fb      	adds	r3, r7, r3
 800123e:	0018      	movs	r0, r3
 8001240:	231c      	movs	r3, #28
 8001242:	001a      	movs	r2, r3
 8001244:	2100      	movs	r1, #0
 8001246:	f004 f823 	bl	8005290 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800124a:	003b      	movs	r3, r7
 800124c:	0018      	movs	r0, r3
 800124e:	2334      	movs	r3, #52	@ 0x34
 8001250:	001a      	movs	r2, r3
 8001252:	2100      	movs	r1, #0
 8001254:	f004 f81c 	bl	8005290 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001258:	4b37      	ldr	r3, [pc, #220]	@ (8001338 <MX_TIM17_Init+0x104>)
 800125a:	4a38      	ldr	r2, [pc, #224]	@ (800133c <MX_TIM17_Init+0x108>)
 800125c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800125e:	4b36      	ldr	r3, [pc, #216]	@ (8001338 <MX_TIM17_Init+0x104>)
 8001260:	2200      	movs	r2, #0
 8001262:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	4b34      	ldr	r3, [pc, #208]	@ (8001338 <MX_TIM17_Init+0x104>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800126a:	4b33      	ldr	r3, [pc, #204]	@ (8001338 <MX_TIM17_Init+0x104>)
 800126c:	4a34      	ldr	r2, [pc, #208]	@ (8001340 <MX_TIM17_Init+0x10c>)
 800126e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001270:	4b31      	ldr	r3, [pc, #196]	@ (8001338 <MX_TIM17_Init+0x104>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001276:	4b30      	ldr	r3, [pc, #192]	@ (8001338 <MX_TIM17_Init+0x104>)
 8001278:	2200      	movs	r2, #0
 800127a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127c:	4b2e      	ldr	r3, [pc, #184]	@ (8001338 <MX_TIM17_Init+0x104>)
 800127e:	2200      	movs	r2, #0
 8001280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001282:	4b2d      	ldr	r3, [pc, #180]	@ (8001338 <MX_TIM17_Init+0x104>)
 8001284:	0018      	movs	r0, r3
 8001286:	f002 fa73 	bl	8003770 <HAL_TIM_Base_Init>
 800128a:	1e03      	subs	r3, r0, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800128e:	f000 f8eb 	bl	8001468 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001292:	4b29      	ldr	r3, [pc, #164]	@ (8001338 <MX_TIM17_Init+0x104>)
 8001294:	0018      	movs	r0, r3
 8001296:	f002 fac3 	bl	8003820 <HAL_TIM_PWM_Init>
 800129a:	1e03      	subs	r3, r0, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 800129e:	f000 f8e3 	bl	8001468 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a2:	2134      	movs	r1, #52	@ 0x34
 80012a4:	187b      	adds	r3, r7, r1
 80012a6:	2260      	movs	r2, #96	@ 0x60
 80012a8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80012aa:	187b      	adds	r3, r7, r1
 80012ac:	2200      	movs	r2, #0
 80012ae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012b6:	187b      	adds	r3, r7, r1
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012bc:	187b      	adds	r3, r7, r1
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012c2:	187b      	adds	r3, r7, r1
 80012c4:	2200      	movs	r2, #0
 80012c6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012c8:	187b      	adds	r3, r7, r1
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ce:	1879      	adds	r1, r7, r1
 80012d0:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <MX_TIM17_Init+0x104>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	0018      	movs	r0, r3
 80012d6:	f002 fb03 	bl	80038e0 <HAL_TIM_PWM_ConfigChannel>
 80012da:	1e03      	subs	r3, r0, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 80012de:	f000 f8c3 	bl	8001468 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012e2:	003b      	movs	r3, r7
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012e8:	003b      	movs	r3, r7
 80012ea:	2200      	movs	r2, #0
 80012ec:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012ee:	003b      	movs	r3, r7
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012f4:	003b      	movs	r3, r7
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012fa:	003b      	movs	r3, r7
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001300:	003b      	movs	r3, r7
 8001302:	2280      	movs	r2, #128	@ 0x80
 8001304:	0192      	lsls	r2, r2, #6
 8001306:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001308:	003b      	movs	r3, r7
 800130a:	2200      	movs	r2, #0
 800130c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800130e:	003b      	movs	r3, r7
 8001310:	2200      	movs	r2, #0
 8001312:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001314:	003a      	movs	r2, r7
 8001316:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <MX_TIM17_Init+0x104>)
 8001318:	0011      	movs	r1, r2
 800131a:	0018      	movs	r0, r3
 800131c:	f002 ff3c 	bl	8004198 <HAL_TIMEx_ConfigBreakDeadTime>
 8001320:	1e03      	subs	r3, r0, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8001324:	f000 f8a0 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001328:	4b03      	ldr	r3, [pc, #12]	@ (8001338 <MX_TIM17_Init+0x104>)
 800132a:	0018      	movs	r0, r3
 800132c:	f000 f996 	bl	800165c <HAL_TIM_MspPostInit>

}
 8001330:	46c0      	nop			@ (mov r8, r8)
 8001332:	46bd      	mov	sp, r7
 8001334:	b014      	add	sp, #80	@ 0x50
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000170 	.word	0x20000170
 800133c:	40014800 	.word	0x40014800
 8001340:	0000ffff 	.word	0x0000ffff

08001344 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001348:	4b23      	ldr	r3, [pc, #140]	@ (80013d8 <MX_USART1_UART_Init+0x94>)
 800134a:	4a24      	ldr	r2, [pc, #144]	@ (80013dc <MX_USART1_UART_Init+0x98>)
 800134c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800134e:	4b22      	ldr	r3, [pc, #136]	@ (80013d8 <MX_USART1_UART_Init+0x94>)
 8001350:	2296      	movs	r2, #150	@ 0x96
 8001352:	0192      	lsls	r2, r2, #6
 8001354:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b20      	ldr	r3, [pc, #128]	@ (80013d8 <MX_USART1_UART_Init+0x94>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b1e      	ldr	r3, [pc, #120]	@ (80013d8 <MX_USART1_UART_Init+0x94>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001362:	4b1d      	ldr	r3, [pc, #116]	@ (80013d8 <MX_USART1_UART_Init+0x94>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b1b      	ldr	r3, [pc, #108]	@ (80013d8 <MX_USART1_UART_Init+0x94>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <MX_USART1_UART_Init+0x94>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <MX_USART1_UART_Init+0x94>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800137a:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <MX_USART1_UART_Init+0x94>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001380:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <MX_USART1_UART_Init+0x94>)
 8001382:	2200      	movs	r2, #0
 8001384:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001386:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <MX_USART1_UART_Init+0x94>)
 8001388:	2200      	movs	r2, #0
 800138a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800138c:	4b12      	ldr	r3, [pc, #72]	@ (80013d8 <MX_USART1_UART_Init+0x94>)
 800138e:	0018      	movs	r0, r3
 8001390:	f002 ff9e 	bl	80042d0 <HAL_UART_Init>
 8001394:	1e03      	subs	r3, r0, #0
 8001396:	d001      	beq.n	800139c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001398:	f000 f866 	bl	8001468 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800139c:	4b0e      	ldr	r3, [pc, #56]	@ (80013d8 <MX_USART1_UART_Init+0x94>)
 800139e:	2100      	movs	r1, #0
 80013a0:	0018      	movs	r0, r3
 80013a2:	f003 fe95 	bl	80050d0 <HAL_UARTEx_SetTxFifoThreshold>
 80013a6:	1e03      	subs	r3, r0, #0
 80013a8:	d001      	beq.n	80013ae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013aa:	f000 f85d 	bl	8001468 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ae:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <MX_USART1_UART_Init+0x94>)
 80013b0:	2100      	movs	r1, #0
 80013b2:	0018      	movs	r0, r3
 80013b4:	f003 fecc 	bl	8005150 <HAL_UARTEx_SetRxFifoThreshold>
 80013b8:	1e03      	subs	r3, r0, #0
 80013ba:	d001      	beq.n	80013c0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013bc:	f000 f854 	bl	8001468 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <MX_USART1_UART_Init+0x94>)
 80013c2:	0018      	movs	r0, r3
 80013c4:	f003 fe4a 	bl	800505c <HAL_UARTEx_DisableFifoMode>
 80013c8:	1e03      	subs	r3, r0, #0
 80013ca:	d001      	beq.n	80013d0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013cc:	f000 f84c 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013d0:	46c0      	nop			@ (mov r8, r8)
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	46c0      	nop			@ (mov r8, r8)
 80013d8:	200001bc 	.word	0x200001bc
 80013dc:	40013800 	.word	0x40013800

080013e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e0:	b590      	push	{r4, r7, lr}
 80013e2:	b089      	sub	sp, #36	@ 0x24
 80013e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e6:	240c      	movs	r4, #12
 80013e8:	193b      	adds	r3, r7, r4
 80013ea:	0018      	movs	r0, r3
 80013ec:	2314      	movs	r3, #20
 80013ee:	001a      	movs	r2, r3
 80013f0:	2100      	movs	r1, #0
 80013f2:	f003 ff4d 	bl	8005290 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <MX_GPIO_Init+0x84>)
 80013f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001464 <MX_GPIO_Init+0x84>)
 80013fc:	2101      	movs	r1, #1
 80013fe:	430a      	orrs	r2, r1
 8001400:	635a      	str	r2, [r3, #52]	@ 0x34
 8001402:	4b18      	ldr	r3, [pc, #96]	@ (8001464 <MX_GPIO_Init+0x84>)
 8001404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001406:	2201      	movs	r2, #1
 8001408:	4013      	ands	r3, r2
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140e:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <MX_GPIO_Init+0x84>)
 8001410:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001412:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <MX_GPIO_Init+0x84>)
 8001414:	2104      	movs	r1, #4
 8001416:	430a      	orrs	r2, r1
 8001418:	635a      	str	r2, [r3, #52]	@ 0x34
 800141a:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <MX_GPIO_Init+0x84>)
 800141c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800141e:	2204      	movs	r2, #4
 8001420:	4013      	ands	r3, r2
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001426:	23a0      	movs	r3, #160	@ 0xa0
 8001428:	05db      	lsls	r3, r3, #23
 800142a:	2200      	movs	r2, #0
 800142c:	2138      	movs	r1, #56	@ 0x38
 800142e:	0018      	movs	r0, r3
 8001430:	f000 fd22 	bl	8001e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001434:	0021      	movs	r1, r4
 8001436:	187b      	adds	r3, r7, r1
 8001438:	2238      	movs	r2, #56	@ 0x38
 800143a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	187b      	adds	r3, r7, r1
 800143e:	2201      	movs	r2, #1
 8001440:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	187b      	adds	r3, r7, r1
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	187b      	adds	r3, r7, r1
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144e:	187a      	adds	r2, r7, r1
 8001450:	23a0      	movs	r3, #160	@ 0xa0
 8001452:	05db      	lsls	r3, r3, #23
 8001454:	0011      	movs	r1, r2
 8001456:	0018      	movs	r0, r3
 8001458:	f000 fba2 	bl	8001ba0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800145c:	46c0      	nop			@ (mov r8, r8)
 800145e:	46bd      	mov	sp, r7
 8001460:	b009      	add	sp, #36	@ 0x24
 8001462:	bd90      	pop	{r4, r7, pc}
 8001464:	40021000 	.word	0x40021000

08001468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800146c:	b672      	cpsid	i
}
 800146e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001470:	46c0      	nop			@ (mov r8, r8)
 8001472:	e7fd      	b.n	8001470 <Error_Handler+0x8>

08001474 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147a:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <HAL_MspInit+0x4c>)
 800147c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800147e:	4b10      	ldr	r3, [pc, #64]	@ (80014c0 <HAL_MspInit+0x4c>)
 8001480:	2101      	movs	r1, #1
 8001482:	430a      	orrs	r2, r1
 8001484:	641a      	str	r2, [r3, #64]	@ 0x40
 8001486:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <HAL_MspInit+0x4c>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	2201      	movs	r2, #1
 800148c:	4013      	ands	r3, r2
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	4b0b      	ldr	r3, [pc, #44]	@ (80014c0 <HAL_MspInit+0x4c>)
 8001494:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001496:	4b0a      	ldr	r3, [pc, #40]	@ (80014c0 <HAL_MspInit+0x4c>)
 8001498:	2180      	movs	r1, #128	@ 0x80
 800149a:	0549      	lsls	r1, r1, #21
 800149c:	430a      	orrs	r2, r1
 800149e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014a0:	4b07      	ldr	r3, [pc, #28]	@ (80014c0 <HAL_MspInit+0x4c>)
 80014a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014a4:	2380      	movs	r3, #128	@ 0x80
 80014a6:	055b      	lsls	r3, r3, #21
 80014a8:	4013      	ands	r3, r2
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80014ae:	23c0      	movs	r3, #192	@ 0xc0
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	0018      	movs	r0, r3
 80014b4:	f000 faaa 	bl	8001a0c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b8:	46c0      	nop			@ (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b002      	add	sp, #8
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40021000 	.word	0x40021000

080014c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b09d      	sub	sp, #116	@ 0x74
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	235c      	movs	r3, #92	@ 0x5c
 80014ce:	18fb      	adds	r3, r7, r3
 80014d0:	0018      	movs	r0, r3
 80014d2:	2314      	movs	r3, #20
 80014d4:	001a      	movs	r2, r3
 80014d6:	2100      	movs	r1, #0
 80014d8:	f003 feda 	bl	8005290 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014dc:	2410      	movs	r4, #16
 80014de:	193b      	adds	r3, r7, r4
 80014e0:	0018      	movs	r0, r3
 80014e2:	234c      	movs	r3, #76	@ 0x4c
 80014e4:	001a      	movs	r2, r3
 80014e6:	2100      	movs	r1, #0
 80014e8:	f003 fed2 	bl	8005290 <memset>
  if(hi2c->Instance==I2C1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a23      	ldr	r2, [pc, #140]	@ (8001580 <HAL_I2C_MspInit+0xbc>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d13f      	bne.n	8001576 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014f6:	193b      	adds	r3, r7, r4
 80014f8:	2220      	movs	r2, #32
 80014fa:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014fc:	193b      	adds	r3, r7, r4
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001502:	193b      	adds	r3, r7, r4
 8001504:	0018      	movs	r0, r3
 8001506:	f001 fb69 	bl	8002bdc <HAL_RCCEx_PeriphCLKConfig>
 800150a:	1e03      	subs	r3, r0, #0
 800150c:	d001      	beq.n	8001512 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800150e:	f7ff ffab 	bl	8001468 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <HAL_I2C_MspInit+0xc0>)
 8001514:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001516:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <HAL_I2C_MspInit+0xc0>)
 8001518:	2101      	movs	r1, #1
 800151a:	430a      	orrs	r2, r1
 800151c:	635a      	str	r2, [r3, #52]	@ 0x34
 800151e:	4b19      	ldr	r3, [pc, #100]	@ (8001584 <HAL_I2C_MspInit+0xc0>)
 8001520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001522:	2201      	movs	r2, #1
 8001524:	4013      	ands	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800152a:	215c      	movs	r1, #92	@ 0x5c
 800152c:	187b      	adds	r3, r7, r1
 800152e:	22c0      	movs	r2, #192	@ 0xc0
 8001530:	00d2      	lsls	r2, r2, #3
 8001532:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001534:	187b      	adds	r3, r7, r1
 8001536:	2212      	movs	r2, #18
 8001538:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	187b      	adds	r3, r7, r1
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	187b      	adds	r3, r7, r1
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001546:	187b      	adds	r3, r7, r1
 8001548:	2206      	movs	r2, #6
 800154a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	187a      	adds	r2, r7, r1
 800154e:	23a0      	movs	r3, #160	@ 0xa0
 8001550:	05db      	lsls	r3, r3, #23
 8001552:	0011      	movs	r1, r2
 8001554:	0018      	movs	r0, r3
 8001556:	f000 fb23 	bl	8001ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800155a:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <HAL_I2C_MspInit+0xc0>)
 800155c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800155e:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <HAL_I2C_MspInit+0xc0>)
 8001560:	2180      	movs	r1, #128	@ 0x80
 8001562:	0389      	lsls	r1, r1, #14
 8001564:	430a      	orrs	r2, r1
 8001566:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001568:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <HAL_I2C_MspInit+0xc0>)
 800156a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800156c:	2380      	movs	r3, #128	@ 0x80
 800156e:	039b      	lsls	r3, r3, #14
 8001570:	4013      	ands	r3, r2
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001576:	46c0      	nop			@ (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	b01d      	add	sp, #116	@ 0x74
 800157c:	bd90      	pop	{r4, r7, pc}
 800157e:	46c0      	nop			@ (mov r8, r8)
 8001580:	40005400 	.word	0x40005400
 8001584:	40021000 	.word	0x40021000

08001588 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b08b      	sub	sp, #44	@ 0x2c
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	2414      	movs	r4, #20
 8001592:	193b      	adds	r3, r7, r4
 8001594:	0018      	movs	r0, r3
 8001596:	2314      	movs	r3, #20
 8001598:	001a      	movs	r2, r3
 800159a:	2100      	movs	r1, #0
 800159c:	f003 fe78 	bl	8005290 <memset>
  if(hspi->Instance==SPI1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001614 <HAL_SPI_MspInit+0x8c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d130      	bne.n	800160c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <HAL_SPI_MspInit+0x90>)
 80015ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <HAL_SPI_MspInit+0x90>)
 80015b0:	2180      	movs	r1, #128	@ 0x80
 80015b2:	0149      	lsls	r1, r1, #5
 80015b4:	430a      	orrs	r2, r1
 80015b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80015b8:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <HAL_SPI_MspInit+0x90>)
 80015ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015bc:	2380      	movs	r3, #128	@ 0x80
 80015be:	015b      	lsls	r3, r3, #5
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <HAL_SPI_MspInit+0x90>)
 80015c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015ca:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <HAL_SPI_MspInit+0x90>)
 80015cc:	2101      	movs	r1, #1
 80015ce:	430a      	orrs	r2, r1
 80015d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80015d2:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <HAL_SPI_MspInit+0x90>)
 80015d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015d6:	2201      	movs	r2, #1
 80015d8:	4013      	ands	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80015de:	0021      	movs	r1, r4
 80015e0:	187b      	adds	r3, r7, r1
 80015e2:	2206      	movs	r2, #6
 80015e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	187b      	adds	r3, r7, r1
 80015e8:	2202      	movs	r2, #2
 80015ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	187b      	adds	r3, r7, r1
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	187b      	adds	r3, r7, r1
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80015f8:	187b      	adds	r3, r7, r1
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fe:	187a      	adds	r2, r7, r1
 8001600:	23a0      	movs	r3, #160	@ 0xa0
 8001602:	05db      	lsls	r3, r3, #23
 8001604:	0011      	movs	r1, r2
 8001606:	0018      	movs	r0, r3
 8001608:	f000 faca 	bl	8001ba0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800160c:	46c0      	nop			@ (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	b00b      	add	sp, #44	@ 0x2c
 8001612:	bd90      	pop	{r4, r7, pc}
 8001614:	40013000 	.word	0x40013000
 8001618:	40021000 	.word	0x40021000

0800161c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0a      	ldr	r2, [pc, #40]	@ (8001654 <HAL_TIM_Base_MspInit+0x38>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d10d      	bne.n	800164a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800162e:	4b0a      	ldr	r3, [pc, #40]	@ (8001658 <HAL_TIM_Base_MspInit+0x3c>)
 8001630:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001632:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <HAL_TIM_Base_MspInit+0x3c>)
 8001634:	2180      	movs	r1, #128	@ 0x80
 8001636:	02c9      	lsls	r1, r1, #11
 8001638:	430a      	orrs	r2, r1
 800163a:	641a      	str	r2, [r3, #64]	@ 0x40
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <HAL_TIM_Base_MspInit+0x3c>)
 800163e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001640:	2380      	movs	r3, #128	@ 0x80
 8001642:	02db      	lsls	r3, r3, #11
 8001644:	4013      	ands	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM17_MspInit 1 */

  }

}
 800164a:	46c0      	nop			@ (mov r8, r8)
 800164c:	46bd      	mov	sp, r7
 800164e:	b004      	add	sp, #16
 8001650:	bd80      	pop	{r7, pc}
 8001652:	46c0      	nop			@ (mov r8, r8)
 8001654:	40014800 	.word	0x40014800
 8001658:	40021000 	.word	0x40021000

0800165c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b089      	sub	sp, #36	@ 0x24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	240c      	movs	r4, #12
 8001666:	193b      	adds	r3, r7, r4
 8001668:	0018      	movs	r0, r3
 800166a:	2314      	movs	r3, #20
 800166c:	001a      	movs	r2, r3
 800166e:	2100      	movs	r1, #0
 8001670:	f003 fe0e 	bl	8005290 <memset>
  if(htim->Instance==TIM17)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a14      	ldr	r2, [pc, #80]	@ (80016cc <HAL_TIM_MspPostInit+0x70>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d122      	bne.n	80016c4 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <HAL_TIM_MspPostInit+0x74>)
 8001680:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001682:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <HAL_TIM_MspPostInit+0x74>)
 8001684:	2101      	movs	r1, #1
 8001686:	430a      	orrs	r2, r1
 8001688:	635a      	str	r2, [r3, #52]	@ 0x34
 800168a:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <HAL_TIM_MspPostInit+0x74>)
 800168c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800168e:	2201      	movs	r2, #1
 8001690:	4013      	ands	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001696:	0021      	movs	r1, r4
 8001698:	187b      	adds	r3, r7, r1
 800169a:	2280      	movs	r2, #128	@ 0x80
 800169c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	187b      	adds	r3, r7, r1
 80016a0:	2202      	movs	r2, #2
 80016a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	187b      	adds	r3, r7, r1
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	187b      	adds	r3, r7, r1
 80016ac:	2200      	movs	r2, #0
 80016ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 80016b0:	187b      	adds	r3, r7, r1
 80016b2:	2205      	movs	r2, #5
 80016b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	187a      	adds	r2, r7, r1
 80016b8:	23a0      	movs	r3, #160	@ 0xa0
 80016ba:	05db      	lsls	r3, r3, #23
 80016bc:	0011      	movs	r1, r2
 80016be:	0018      	movs	r0, r3
 80016c0:	f000 fa6e 	bl	8001ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80016c4:	46c0      	nop			@ (mov r8, r8)
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b009      	add	sp, #36	@ 0x24
 80016ca:	bd90      	pop	{r4, r7, pc}
 80016cc:	40014800 	.word	0x40014800
 80016d0:	40021000 	.word	0x40021000

080016d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b09f      	sub	sp, #124	@ 0x7c
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	2364      	movs	r3, #100	@ 0x64
 80016de:	18fb      	adds	r3, r7, r3
 80016e0:	0018      	movs	r0, r3
 80016e2:	2314      	movs	r3, #20
 80016e4:	001a      	movs	r2, r3
 80016e6:	2100      	movs	r1, #0
 80016e8:	f003 fdd2 	bl	8005290 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016ec:	2418      	movs	r4, #24
 80016ee:	193b      	adds	r3, r7, r4
 80016f0:	0018      	movs	r0, r3
 80016f2:	234c      	movs	r3, #76	@ 0x4c
 80016f4:	001a      	movs	r2, r3
 80016f6:	2100      	movs	r1, #0
 80016f8:	f003 fdca 	bl	8005290 <memset>
  if(huart->Instance==USART1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a45      	ldr	r2, [pc, #276]	@ (8001818 <HAL_UART_MspInit+0x144>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d13e      	bne.n	8001784 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001706:	193b      	adds	r3, r7, r4
 8001708:	2201      	movs	r2, #1
 800170a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800170c:	193b      	adds	r3, r7, r4
 800170e:	2200      	movs	r2, #0
 8001710:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001712:	193b      	adds	r3, r7, r4
 8001714:	0018      	movs	r0, r3
 8001716:	f001 fa61 	bl	8002bdc <HAL_RCCEx_PeriphCLKConfig>
 800171a:	1e03      	subs	r3, r0, #0
 800171c:	d001      	beq.n	8001722 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800171e:	f7ff fea3 	bl	8001468 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001722:	4b3e      	ldr	r3, [pc, #248]	@ (800181c <HAL_UART_MspInit+0x148>)
 8001724:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001726:	4b3d      	ldr	r3, [pc, #244]	@ (800181c <HAL_UART_MspInit+0x148>)
 8001728:	2180      	movs	r1, #128	@ 0x80
 800172a:	01c9      	lsls	r1, r1, #7
 800172c:	430a      	orrs	r2, r1
 800172e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001730:	4b3a      	ldr	r3, [pc, #232]	@ (800181c <HAL_UART_MspInit+0x148>)
 8001732:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001734:	2380      	movs	r3, #128	@ 0x80
 8001736:	01db      	lsls	r3, r3, #7
 8001738:	4013      	ands	r3, r2
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800173e:	4b37      	ldr	r3, [pc, #220]	@ (800181c <HAL_UART_MspInit+0x148>)
 8001740:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001742:	4b36      	ldr	r3, [pc, #216]	@ (800181c <HAL_UART_MspInit+0x148>)
 8001744:	2104      	movs	r1, #4
 8001746:	430a      	orrs	r2, r1
 8001748:	635a      	str	r2, [r3, #52]	@ 0x34
 800174a:	4b34      	ldr	r3, [pc, #208]	@ (800181c <HAL_UART_MspInit+0x148>)
 800174c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800174e:	2204      	movs	r2, #4
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001756:	2164      	movs	r1, #100	@ 0x64
 8001758:	187b      	adds	r3, r7, r1
 800175a:	2230      	movs	r2, #48	@ 0x30
 800175c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	187b      	adds	r3, r7, r1
 8001760:	2202      	movs	r2, #2
 8001762:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	187b      	adds	r3, r7, r1
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	187b      	adds	r3, r7, r1
 800176c:	2200      	movs	r2, #0
 800176e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001770:	187b      	adds	r3, r7, r1
 8001772:	2201      	movs	r2, #1
 8001774:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001776:	187b      	adds	r3, r7, r1
 8001778:	4a29      	ldr	r2, [pc, #164]	@ (8001820 <HAL_UART_MspInit+0x14c>)
 800177a:	0019      	movs	r1, r3
 800177c:	0010      	movs	r0, r2
 800177e:	f000 fa0f 	bl	8001ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001782:	e045      	b.n	8001810 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a26      	ldr	r2, [pc, #152]	@ (8001824 <HAL_UART_MspInit+0x150>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d140      	bne.n	8001810 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800178e:	2118      	movs	r1, #24
 8001790:	187b      	adds	r3, r7, r1
 8001792:	2202      	movs	r2, #2
 8001794:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001796:	187b      	adds	r3, r7, r1
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800179c:	187b      	adds	r3, r7, r1
 800179e:	0018      	movs	r0, r3
 80017a0:	f001 fa1c 	bl	8002bdc <HAL_RCCEx_PeriphCLKConfig>
 80017a4:	1e03      	subs	r3, r0, #0
 80017a6:	d001      	beq.n	80017ac <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80017a8:	f7ff fe5e 	bl	8001468 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ac:	4b1b      	ldr	r3, [pc, #108]	@ (800181c <HAL_UART_MspInit+0x148>)
 80017ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017b0:	4b1a      	ldr	r3, [pc, #104]	@ (800181c <HAL_UART_MspInit+0x148>)
 80017b2:	2180      	movs	r1, #128	@ 0x80
 80017b4:	0289      	lsls	r1, r1, #10
 80017b6:	430a      	orrs	r2, r1
 80017b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017ba:	4b18      	ldr	r3, [pc, #96]	@ (800181c <HAL_UART_MspInit+0x148>)
 80017bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017be:	2380      	movs	r3, #128	@ 0x80
 80017c0:	029b      	lsls	r3, r3, #10
 80017c2:	4013      	ands	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c8:	4b14      	ldr	r3, [pc, #80]	@ (800181c <HAL_UART_MspInit+0x148>)
 80017ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017cc:	4b13      	ldr	r3, [pc, #76]	@ (800181c <HAL_UART_MspInit+0x148>)
 80017ce:	2101      	movs	r1, #1
 80017d0:	430a      	orrs	r2, r1
 80017d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80017d4:	4b11      	ldr	r3, [pc, #68]	@ (800181c <HAL_UART_MspInit+0x148>)
 80017d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017d8:	2201      	movs	r2, #1
 80017da:	4013      	ands	r3, r2
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80017e0:	2164      	movs	r1, #100	@ 0x64
 80017e2:	187b      	adds	r3, r7, r1
 80017e4:	22c0      	movs	r2, #192	@ 0xc0
 80017e6:	0212      	lsls	r2, r2, #8
 80017e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	187b      	adds	r3, r7, r1
 80017ec:	2202      	movs	r2, #2
 80017ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	187b      	adds	r3, r7, r1
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	187b      	adds	r3, r7, r1
 80017f8:	2200      	movs	r2, #0
 80017fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80017fc:	187b      	adds	r3, r7, r1
 80017fe:	2201      	movs	r2, #1
 8001800:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001802:	187a      	adds	r2, r7, r1
 8001804:	23a0      	movs	r3, #160	@ 0xa0
 8001806:	05db      	lsls	r3, r3, #23
 8001808:	0011      	movs	r1, r2
 800180a:	0018      	movs	r0, r3
 800180c:	f000 f9c8 	bl	8001ba0 <HAL_GPIO_Init>
}
 8001810:	46c0      	nop			@ (mov r8, r8)
 8001812:	46bd      	mov	sp, r7
 8001814:	b01f      	add	sp, #124	@ 0x7c
 8001816:	bd90      	pop	{r4, r7, pc}
 8001818:	40013800 	.word	0x40013800
 800181c:	40021000 	.word	0x40021000
 8001820:	50000800 	.word	0x50000800
 8001824:	40004400 	.word	0x40004400

08001828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800182c:	46c0      	nop			@ (mov r8, r8)
 800182e:	e7fd      	b.n	800182c <NMI_Handler+0x4>

08001830 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001834:	46c0      	nop			@ (mov r8, r8)
 8001836:	e7fd      	b.n	8001834 <HardFault_Handler+0x4>

08001838 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800183c:	46c0      	nop			@ (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001846:	46c0      	nop			@ (mov r8, r8)
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001850:	f000 f89c 	bl	800198c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001854:	46c0      	nop			@ (mov r8, r8)
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800185e:	46c0      	nop			@ (mov r8, r8)
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001864:	480d      	ldr	r0, [pc, #52]	@ (800189c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001866:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001868:	f7ff fff7 	bl	800185a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800186c:	480c      	ldr	r0, [pc, #48]	@ (80018a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800186e:	490d      	ldr	r1, [pc, #52]	@ (80018a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001870:	4a0d      	ldr	r2, [pc, #52]	@ (80018a8 <LoopForever+0xe>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001874:	e002      	b.n	800187c <LoopCopyDataInit>

08001876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187a:	3304      	adds	r3, #4

0800187c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800187c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001880:	d3f9      	bcc.n	8001876 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001882:	4a0a      	ldr	r2, [pc, #40]	@ (80018ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001884:	4c0a      	ldr	r4, [pc, #40]	@ (80018b0 <LoopForever+0x16>)
  movs r3, #0
 8001886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001888:	e001      	b.n	800188e <LoopFillZerobss>

0800188a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800188c:	3204      	adds	r2, #4

0800188e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001890:	d3fb      	bcc.n	800188a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001892:	f003 fd05 	bl	80052a0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001896:	f7ff fb79 	bl	8000f8c <main>

0800189a <LoopForever>:

LoopForever:
  b LoopForever
 800189a:	e7fe      	b.n	800189a <LoopForever>
  ldr   r0, =_estack
 800189c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80018a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018a8:	0800595c 	.word	0x0800595c
  ldr r2, =_sbss
 80018ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018b0:	20000254 	.word	0x20000254

080018b4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018b4:	e7fe      	b.n	80018b4 <ADC1_COMP_IRQHandler>
	...

080018b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018be:	1dfb      	adds	r3, r7, #7
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c4:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <HAL_Init+0x3c>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <HAL_Init+0x3c>)
 80018ca:	2180      	movs	r1, #128	@ 0x80
 80018cc:	0049      	lsls	r1, r1, #1
 80018ce:	430a      	orrs	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018d2:	2003      	movs	r0, #3
 80018d4:	f000 f810 	bl	80018f8 <HAL_InitTick>
 80018d8:	1e03      	subs	r3, r0, #0
 80018da:	d003      	beq.n	80018e4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80018dc:	1dfb      	adds	r3, r7, #7
 80018de:	2201      	movs	r2, #1
 80018e0:	701a      	strb	r2, [r3, #0]
 80018e2:	e001      	b.n	80018e8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80018e4:	f7ff fdc6 	bl	8001474 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018e8:	1dfb      	adds	r3, r7, #7
 80018ea:	781b      	ldrb	r3, [r3, #0]
}
 80018ec:	0018      	movs	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b002      	add	sp, #8
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40022000 	.word	0x40022000

080018f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f8:	b590      	push	{r4, r7, lr}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001900:	230f      	movs	r3, #15
 8001902:	18fb      	adds	r3, r7, r3
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001908:	4b1d      	ldr	r3, [pc, #116]	@ (8001980 <HAL_InitTick+0x88>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d02b      	beq.n	8001968 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001910:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <HAL_InitTick+0x8c>)
 8001912:	681c      	ldr	r4, [r3, #0]
 8001914:	4b1a      	ldr	r3, [pc, #104]	@ (8001980 <HAL_InitTick+0x88>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	0019      	movs	r1, r3
 800191a:	23fa      	movs	r3, #250	@ 0xfa
 800191c:	0098      	lsls	r0, r3, #2
 800191e:	f7fe fbf1 	bl	8000104 <__udivsi3>
 8001922:	0003      	movs	r3, r0
 8001924:	0019      	movs	r1, r3
 8001926:	0020      	movs	r0, r4
 8001928:	f7fe fbec 	bl	8000104 <__udivsi3>
 800192c:	0003      	movs	r3, r0
 800192e:	0018      	movs	r0, r3
 8001930:	f000 f929 	bl	8001b86 <HAL_SYSTICK_Config>
 8001934:	1e03      	subs	r3, r0, #0
 8001936:	d112      	bne.n	800195e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b03      	cmp	r3, #3
 800193c:	d80a      	bhi.n	8001954 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	2301      	movs	r3, #1
 8001942:	425b      	negs	r3, r3
 8001944:	2200      	movs	r2, #0
 8001946:	0018      	movs	r0, r3
 8001948:	f000 f908 	bl	8001b5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800194c:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <HAL_InitTick+0x90>)
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	e00d      	b.n	8001970 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001954:	230f      	movs	r3, #15
 8001956:	18fb      	adds	r3, r7, r3
 8001958:	2201      	movs	r2, #1
 800195a:	701a      	strb	r2, [r3, #0]
 800195c:	e008      	b.n	8001970 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800195e:	230f      	movs	r3, #15
 8001960:	18fb      	adds	r3, r7, r3
 8001962:	2201      	movs	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]
 8001966:	e003      	b.n	8001970 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001968:	230f      	movs	r3, #15
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	2201      	movs	r2, #1
 800196e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001970:	230f      	movs	r3, #15
 8001972:	18fb      	adds	r3, r7, r3
 8001974:	781b      	ldrb	r3, [r3, #0]
}
 8001976:	0018      	movs	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	b005      	add	sp, #20
 800197c:	bd90      	pop	{r4, r7, pc}
 800197e:	46c0      	nop			@ (mov r8, r8)
 8001980:	20000008 	.word	0x20000008
 8001984:	20000000 	.word	0x20000000
 8001988:	20000004 	.word	0x20000004

0800198c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001990:	4b05      	ldr	r3, [pc, #20]	@ (80019a8 <HAL_IncTick+0x1c>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	001a      	movs	r2, r3
 8001996:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <HAL_IncTick+0x20>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	18d2      	adds	r2, r2, r3
 800199c:	4b03      	ldr	r3, [pc, #12]	@ (80019ac <HAL_IncTick+0x20>)
 800199e:	601a      	str	r2, [r3, #0]
}
 80019a0:	46c0      	nop			@ (mov r8, r8)
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			@ (mov r8, r8)
 80019a8:	20000008 	.word	0x20000008
 80019ac:	20000250 	.word	0x20000250

080019b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  return uwTick;
 80019b4:	4b02      	ldr	r3, [pc, #8]	@ (80019c0 <HAL_GetTick+0x10>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	0018      	movs	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	46c0      	nop			@ (mov r8, r8)
 80019c0:	20000250 	.word	0x20000250

080019c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019cc:	f7ff fff0 	bl	80019b0 <HAL_GetTick>
 80019d0:	0003      	movs	r3, r0
 80019d2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	3301      	adds	r3, #1
 80019dc:	d005      	beq.n	80019ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019de:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <HAL_Delay+0x44>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	001a      	movs	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	189b      	adds	r3, r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ea:	46c0      	nop			@ (mov r8, r8)
 80019ec:	f7ff ffe0 	bl	80019b0 <HAL_GetTick>
 80019f0:	0002      	movs	r2, r0
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d8f7      	bhi.n	80019ec <HAL_Delay+0x28>
  {
  }
}
 80019fc:	46c0      	nop			@ (mov r8, r8)
 80019fe:	46c0      	nop			@ (mov r8, r8)
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b004      	add	sp, #16
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			@ (mov r8, r8)
 8001a08:	20000008 	.word	0x20000008

08001a0c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001a14:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a06      	ldr	r2, [pc, #24]	@ (8001a34 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	0019      	movs	r1, r3
 8001a1e:	4b04      	ldr	r3, [pc, #16]	@ (8001a30 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	601a      	str	r2, [r3, #0]
}
 8001a26:	46c0      	nop			@ (mov r8, r8)
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b002      	add	sp, #8
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	46c0      	nop			@ (mov r8, r8)
 8001a30:	40010000 	.word	0x40010000
 8001a34:	fffff9ff 	.word	0xfffff9ff

08001a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	0002      	movs	r2, r0
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	1dfb      	adds	r3, r7, #7
 8001a44:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a46:	1dfb      	adds	r3, r7, #7
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a4c:	d828      	bhi.n	8001aa0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a4e:	4a2f      	ldr	r2, [pc, #188]	@ (8001b0c <__NVIC_SetPriority+0xd4>)
 8001a50:	1dfb      	adds	r3, r7, #7
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	b25b      	sxtb	r3, r3
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	33c0      	adds	r3, #192	@ 0xc0
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	589b      	ldr	r3, [r3, r2]
 8001a5e:	1dfa      	adds	r2, r7, #7
 8001a60:	7812      	ldrb	r2, [r2, #0]
 8001a62:	0011      	movs	r1, r2
 8001a64:	2203      	movs	r2, #3
 8001a66:	400a      	ands	r2, r1
 8001a68:	00d2      	lsls	r2, r2, #3
 8001a6a:	21ff      	movs	r1, #255	@ 0xff
 8001a6c:	4091      	lsls	r1, r2
 8001a6e:	000a      	movs	r2, r1
 8001a70:	43d2      	mvns	r2, r2
 8001a72:	401a      	ands	r2, r3
 8001a74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	019b      	lsls	r3, r3, #6
 8001a7a:	22ff      	movs	r2, #255	@ 0xff
 8001a7c:	401a      	ands	r2, r3
 8001a7e:	1dfb      	adds	r3, r7, #7
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	0018      	movs	r0, r3
 8001a84:	2303      	movs	r3, #3
 8001a86:	4003      	ands	r3, r0
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a8c:	481f      	ldr	r0, [pc, #124]	@ (8001b0c <__NVIC_SetPriority+0xd4>)
 8001a8e:	1dfb      	adds	r3, r7, #7
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	b25b      	sxtb	r3, r3
 8001a94:	089b      	lsrs	r3, r3, #2
 8001a96:	430a      	orrs	r2, r1
 8001a98:	33c0      	adds	r3, #192	@ 0xc0
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a9e:	e031      	b.n	8001b04 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b10 <__NVIC_SetPriority+0xd8>)
 8001aa2:	1dfb      	adds	r3, r7, #7
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	0019      	movs	r1, r3
 8001aa8:	230f      	movs	r3, #15
 8001aaa:	400b      	ands	r3, r1
 8001aac:	3b08      	subs	r3, #8
 8001aae:	089b      	lsrs	r3, r3, #2
 8001ab0:	3306      	adds	r3, #6
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	18d3      	adds	r3, r2, r3
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	1dfa      	adds	r2, r7, #7
 8001abc:	7812      	ldrb	r2, [r2, #0]
 8001abe:	0011      	movs	r1, r2
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	400a      	ands	r2, r1
 8001ac4:	00d2      	lsls	r2, r2, #3
 8001ac6:	21ff      	movs	r1, #255	@ 0xff
 8001ac8:	4091      	lsls	r1, r2
 8001aca:	000a      	movs	r2, r1
 8001acc:	43d2      	mvns	r2, r2
 8001ace:	401a      	ands	r2, r3
 8001ad0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	019b      	lsls	r3, r3, #6
 8001ad6:	22ff      	movs	r2, #255	@ 0xff
 8001ad8:	401a      	ands	r2, r3
 8001ada:	1dfb      	adds	r3, r7, #7
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	0018      	movs	r0, r3
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	4003      	ands	r3, r0
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ae8:	4809      	ldr	r0, [pc, #36]	@ (8001b10 <__NVIC_SetPriority+0xd8>)
 8001aea:	1dfb      	adds	r3, r7, #7
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	001c      	movs	r4, r3
 8001af0:	230f      	movs	r3, #15
 8001af2:	4023      	ands	r3, r4
 8001af4:	3b08      	subs	r3, #8
 8001af6:	089b      	lsrs	r3, r3, #2
 8001af8:	430a      	orrs	r2, r1
 8001afa:	3306      	adds	r3, #6
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	18c3      	adds	r3, r0, r3
 8001b00:	3304      	adds	r3, #4
 8001b02:	601a      	str	r2, [r3, #0]
}
 8001b04:	46c0      	nop			@ (mov r8, r8)
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b003      	add	sp, #12
 8001b0a:	bd90      	pop	{r4, r7, pc}
 8001b0c:	e000e100 	.word	0xe000e100
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	1e5a      	subs	r2, r3, #1
 8001b20:	2380      	movs	r3, #128	@ 0x80
 8001b22:	045b      	lsls	r3, r3, #17
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d301      	bcc.n	8001b2c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e010      	b.n	8001b4e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <SysTick_Config+0x44>)
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	3a01      	subs	r2, #1
 8001b32:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b34:	2301      	movs	r3, #1
 8001b36:	425b      	negs	r3, r3
 8001b38:	2103      	movs	r1, #3
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f7ff ff7c 	bl	8001a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b40:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <SysTick_Config+0x44>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b46:	4b04      	ldr	r3, [pc, #16]	@ (8001b58 <SysTick_Config+0x44>)
 8001b48:	2207      	movs	r2, #7
 8001b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	0018      	movs	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b002      	add	sp, #8
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	46c0      	nop			@ (mov r8, r8)
 8001b58:	e000e010 	.word	0xe000e010

08001b5c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	210f      	movs	r1, #15
 8001b68:	187b      	adds	r3, r7, r1
 8001b6a:	1c02      	adds	r2, r0, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	187b      	adds	r3, r7, r1
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	b25b      	sxtb	r3, r3
 8001b76:	0011      	movs	r1, r2
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f7ff ff5d 	bl	8001a38 <__NVIC_SetPriority>
}
 8001b7e:	46c0      	nop			@ (mov r8, r8)
 8001b80:	46bd      	mov	sp, r7
 8001b82:	b004      	add	sp, #16
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	0018      	movs	r0, r3
 8001b92:	f7ff ffbf 	bl	8001b14 <SysTick_Config>
 8001b96:	0003      	movs	r3, r0
}
 8001b98:	0018      	movs	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b002      	add	sp, #8
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bae:	e14d      	b.n	8001e4c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	4091      	lsls	r1, r2
 8001bba:	000a      	movs	r2, r1
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d100      	bne.n	8001bc8 <HAL_GPIO_Init+0x28>
 8001bc6:	e13e      	b.n	8001e46 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2203      	movs	r2, #3
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d005      	beq.n	8001be0 <HAL_GPIO_Init+0x40>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2203      	movs	r2, #3
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d130      	bne.n	8001c42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	2203      	movs	r2, #3
 8001bec:	409a      	lsls	r2, r3
 8001bee:	0013      	movs	r3, r2
 8001bf0:	43da      	mvns	r2, r3
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	409a      	lsls	r2, r3
 8001c02:	0013      	movs	r3, r2
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c16:	2201      	movs	r2, #1
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	409a      	lsls	r2, r3
 8001c1c:	0013      	movs	r3, r2
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
 8001c34:	0013      	movs	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2203      	movs	r2, #3
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d017      	beq.n	8001c7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	2203      	movs	r2, #3
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	0013      	movs	r3, r2
 8001c5e:	43da      	mvns	r2, r3
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	0013      	movs	r3, r2
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2203      	movs	r2, #3
 8001c84:	4013      	ands	r3, r2
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d123      	bne.n	8001cd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	08da      	lsrs	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3208      	adds	r2, #8
 8001c92:	0092      	lsls	r2, r2, #2
 8001c94:	58d3      	ldr	r3, [r2, r3]
 8001c96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2207      	movs	r2, #7
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	409a      	lsls	r2, r3
 8001ca4:	0013      	movs	r3, r2
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	691a      	ldr	r2, [r3, #16]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	2107      	movs	r1, #7
 8001cb6:	400b      	ands	r3, r1
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	0013      	movs	r3, r2
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	08da      	lsrs	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3208      	adds	r2, #8
 8001ccc:	0092      	lsls	r2, r2, #2
 8001cce:	6939      	ldr	r1, [r7, #16]
 8001cd0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	2203      	movs	r2, #3
 8001cde:	409a      	lsls	r2, r3
 8001ce0:	0013      	movs	r3, r2
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2203      	movs	r2, #3
 8001cf0:	401a      	ands	r2, r3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	0013      	movs	r3, r2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	23c0      	movs	r3, #192	@ 0xc0
 8001d0c:	029b      	lsls	r3, r3, #10
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d100      	bne.n	8001d14 <HAL_GPIO_Init+0x174>
 8001d12:	e098      	b.n	8001e46 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001d14:	4a53      	ldr	r2, [pc, #332]	@ (8001e64 <HAL_GPIO_Init+0x2c4>)
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	089b      	lsrs	r3, r3, #2
 8001d1a:	3318      	adds	r3, #24
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	589b      	ldr	r3, [r3, r2]
 8001d20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	2203      	movs	r2, #3
 8001d26:	4013      	ands	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	220f      	movs	r2, #15
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	0013      	movs	r3, r2
 8001d30:	43da      	mvns	r2, r3
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	23a0      	movs	r3, #160	@ 0xa0
 8001d3c:	05db      	lsls	r3, r3, #23
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d019      	beq.n	8001d76 <HAL_GPIO_Init+0x1d6>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a48      	ldr	r2, [pc, #288]	@ (8001e68 <HAL_GPIO_Init+0x2c8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d013      	beq.n	8001d72 <HAL_GPIO_Init+0x1d2>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a47      	ldr	r2, [pc, #284]	@ (8001e6c <HAL_GPIO_Init+0x2cc>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00d      	beq.n	8001d6e <HAL_GPIO_Init+0x1ce>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a46      	ldr	r2, [pc, #280]	@ (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d007      	beq.n	8001d6a <HAL_GPIO_Init+0x1ca>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a45      	ldr	r2, [pc, #276]	@ (8001e74 <HAL_GPIO_Init+0x2d4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d101      	bne.n	8001d66 <HAL_GPIO_Init+0x1c6>
 8001d62:	2304      	movs	r3, #4
 8001d64:	e008      	b.n	8001d78 <HAL_GPIO_Init+0x1d8>
 8001d66:	2305      	movs	r3, #5
 8001d68:	e006      	b.n	8001d78 <HAL_GPIO_Init+0x1d8>
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e004      	b.n	8001d78 <HAL_GPIO_Init+0x1d8>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e002      	b.n	8001d78 <HAL_GPIO_Init+0x1d8>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <HAL_GPIO_Init+0x1d8>
 8001d76:	2300      	movs	r3, #0
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	2103      	movs	r1, #3
 8001d7c:	400a      	ands	r2, r1
 8001d7e:	00d2      	lsls	r2, r2, #3
 8001d80:	4093      	lsls	r3, r2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001d88:	4936      	ldr	r1, [pc, #216]	@ (8001e64 <HAL_GPIO_Init+0x2c4>)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	3318      	adds	r3, #24
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d96:	4b33      	ldr	r3, [pc, #204]	@ (8001e64 <HAL_GPIO_Init+0x2c4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	2380      	movs	r3, #128	@ 0x80
 8001dac:	035b      	lsls	r3, r3, #13
 8001dae:	4013      	ands	r3, r2
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dba:	4b2a      	ldr	r3, [pc, #168]	@ (8001e64 <HAL_GPIO_Init+0x2c4>)
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001dc0:	4b28      	ldr	r3, [pc, #160]	@ (8001e64 <HAL_GPIO_Init+0x2c4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	43da      	mvns	r2, r3
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	2380      	movs	r3, #128	@ 0x80
 8001dd6:	039b      	lsls	r3, r3, #14
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001de4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e64 <HAL_GPIO_Init+0x2c4>)
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001dea:	4a1e      	ldr	r2, [pc, #120]	@ (8001e64 <HAL_GPIO_Init+0x2c4>)
 8001dec:	2384      	movs	r3, #132	@ 0x84
 8001dee:	58d3      	ldr	r3, [r2, r3]
 8001df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	43da      	mvns	r2, r3
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	2380      	movs	r3, #128	@ 0x80
 8001e02:	029b      	lsls	r3, r3, #10
 8001e04:	4013      	ands	r3, r2
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e10:	4914      	ldr	r1, [pc, #80]	@ (8001e64 <HAL_GPIO_Init+0x2c4>)
 8001e12:	2284      	movs	r2, #132	@ 0x84
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001e18:	4a12      	ldr	r2, [pc, #72]	@ (8001e64 <HAL_GPIO_Init+0x2c4>)
 8001e1a:	2380      	movs	r3, #128	@ 0x80
 8001e1c:	58d3      	ldr	r3, [r2, r3]
 8001e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	43da      	mvns	r2, r3
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	2380      	movs	r3, #128	@ 0x80
 8001e30:	025b      	lsls	r3, r3, #9
 8001e32:	4013      	ands	r3, r2
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e3e:	4909      	ldr	r1, [pc, #36]	@ (8001e64 <HAL_GPIO_Init+0x2c4>)
 8001e40:	2280      	movs	r2, #128	@ 0x80
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	40da      	lsrs	r2, r3
 8001e54:	1e13      	subs	r3, r2, #0
 8001e56:	d000      	beq.n	8001e5a <HAL_GPIO_Init+0x2ba>
 8001e58:	e6aa      	b.n	8001bb0 <HAL_GPIO_Init+0x10>
  }
}
 8001e5a:	46c0      	nop			@ (mov r8, r8)
 8001e5c:	46c0      	nop			@ (mov r8, r8)
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	b006      	add	sp, #24
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40021800 	.word	0x40021800
 8001e68:	50000400 	.word	0x50000400
 8001e6c:	50000800 	.word	0x50000800
 8001e70:	50000c00 	.word	0x50000c00
 8001e74:	50001000 	.word	0x50001000

08001e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	0008      	movs	r0, r1
 8001e82:	0011      	movs	r1, r2
 8001e84:	1cbb      	adds	r3, r7, #2
 8001e86:	1c02      	adds	r2, r0, #0
 8001e88:	801a      	strh	r2, [r3, #0]
 8001e8a:	1c7b      	adds	r3, r7, #1
 8001e8c:	1c0a      	adds	r2, r1, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e90:	1c7b      	adds	r3, r7, #1
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d004      	beq.n	8001ea2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e98:	1cbb      	adds	r3, r7, #2
 8001e9a:	881a      	ldrh	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ea0:	e003      	b.n	8001eaa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ea2:	1cbb      	adds	r3, r7, #2
 8001ea4:	881a      	ldrh	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001eaa:	46c0      	nop			@ (mov r8, r8)
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b002      	add	sp, #8
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e08f      	b.n	8001fe6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2241      	movs	r2, #65	@ 0x41
 8001eca:	5c9b      	ldrb	r3, [r3, r2]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d107      	bne.n	8001ee2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2240      	movs	r2, #64	@ 0x40
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	0018      	movs	r0, r3
 8001ede:	f7ff faf1 	bl	80014c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2241      	movs	r2, #65	@ 0x41
 8001ee6:	2124      	movs	r1, #36	@ 0x24
 8001ee8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	438a      	bics	r2, r1
 8001ef8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	493b      	ldr	r1, [pc, #236]	@ (8001ff0 <HAL_I2C_Init+0x13c>)
 8001f04:	400a      	ands	r2, r1
 8001f06:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4938      	ldr	r1, [pc, #224]	@ (8001ff4 <HAL_I2C_Init+0x140>)
 8001f14:	400a      	ands	r2, r1
 8001f16:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d108      	bne.n	8001f32 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2180      	movs	r1, #128	@ 0x80
 8001f2a:	0209      	lsls	r1, r1, #8
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	e007      	b.n	8001f42 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2184      	movs	r1, #132	@ 0x84
 8001f3c:	0209      	lsls	r1, r1, #8
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d109      	bne.n	8001f5e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0109      	lsls	r1, r1, #4
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	e007      	b.n	8001f6e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4923      	ldr	r1, [pc, #140]	@ (8001ff8 <HAL_I2C_Init+0x144>)
 8001f6a:	400a      	ands	r2, r1
 8001f6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4920      	ldr	r1, [pc, #128]	@ (8001ffc <HAL_I2C_Init+0x148>)
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	491a      	ldr	r1, [pc, #104]	@ (8001ff4 <HAL_I2C_Init+0x140>)
 8001f8a:	400a      	ands	r2, r1
 8001f8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691a      	ldr	r2, [r3, #16]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	431a      	orrs	r2, r3
 8001f98:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69d9      	ldr	r1, [r3, #28]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a1a      	ldr	r2, [r3, #32]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2241      	movs	r2, #65	@ 0x41
 8001fd2:	2120      	movs	r1, #32
 8001fd4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2242      	movs	r2, #66	@ 0x42
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b002      	add	sp, #8
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	46c0      	nop			@ (mov r8, r8)
 8001ff0:	f0ffffff 	.word	0xf0ffffff
 8001ff4:	ffff7fff 	.word	0xffff7fff
 8001ff8:	fffff7ff 	.word	0xfffff7ff
 8001ffc:	02008000 	.word	0x02008000

08002000 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2241      	movs	r2, #65	@ 0x41
 800200e:	5c9b      	ldrb	r3, [r3, r2]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b20      	cmp	r3, #32
 8002014:	d138      	bne.n	8002088 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2240      	movs	r2, #64	@ 0x40
 800201a:	5c9b      	ldrb	r3, [r3, r2]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002020:	2302      	movs	r3, #2
 8002022:	e032      	b.n	800208a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2240      	movs	r2, #64	@ 0x40
 8002028:	2101      	movs	r1, #1
 800202a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2241      	movs	r2, #65	@ 0x41
 8002030:	2124      	movs	r1, #36	@ 0x24
 8002032:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2101      	movs	r1, #1
 8002040:	438a      	bics	r2, r1
 8002042:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4911      	ldr	r1, [pc, #68]	@ (8002094 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002050:	400a      	ands	r2, r1
 8002052:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6819      	ldr	r1, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2101      	movs	r1, #1
 8002070:	430a      	orrs	r2, r1
 8002072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2241      	movs	r2, #65	@ 0x41
 8002078:	2120      	movs	r1, #32
 800207a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2240      	movs	r2, #64	@ 0x40
 8002080:	2100      	movs	r1, #0
 8002082:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	e000      	b.n	800208a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002088:	2302      	movs	r3, #2
  }
}
 800208a:	0018      	movs	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	b002      	add	sp, #8
 8002090:	bd80      	pop	{r7, pc}
 8002092:	46c0      	nop			@ (mov r8, r8)
 8002094:	ffffefff 	.word	0xffffefff

08002098 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2241      	movs	r2, #65	@ 0x41
 80020a6:	5c9b      	ldrb	r3, [r3, r2]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b20      	cmp	r3, #32
 80020ac:	d139      	bne.n	8002122 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2240      	movs	r2, #64	@ 0x40
 80020b2:	5c9b      	ldrb	r3, [r3, r2]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e033      	b.n	8002124 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2240      	movs	r2, #64	@ 0x40
 80020c0:	2101      	movs	r1, #1
 80020c2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2241      	movs	r2, #65	@ 0x41
 80020c8:	2124      	movs	r1, #36	@ 0x24
 80020ca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2101      	movs	r1, #1
 80020d8:	438a      	bics	r2, r1
 80020da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4a11      	ldr	r2, [pc, #68]	@ (800212c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2101      	movs	r1, #1
 800210a:	430a      	orrs	r2, r1
 800210c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2241      	movs	r2, #65	@ 0x41
 8002112:	2120      	movs	r1, #32
 8002114:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2240      	movs	r2, #64	@ 0x40
 800211a:	2100      	movs	r1, #0
 800211c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	e000      	b.n	8002124 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002122:	2302      	movs	r3, #2
  }
}
 8002124:	0018      	movs	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	b004      	add	sp, #16
 800212a:	bd80      	pop	{r7, pc}
 800212c:	fffff0ff 	.word	0xfffff0ff

08002130 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002138:	4b19      	ldr	r3, [pc, #100]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a19      	ldr	r2, [pc, #100]	@ (80021a4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800213e:	4013      	ands	r3, r2
 8002140:	0019      	movs	r1, r3
 8002142:	4b17      	ldr	r3, [pc, #92]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	430a      	orrs	r2, r1
 8002148:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	2380      	movs	r3, #128	@ 0x80
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	429a      	cmp	r2, r3
 8002152:	d11f      	bne.n	8002194 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002154:	4b14      	ldr	r3, [pc, #80]	@ (80021a8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	0013      	movs	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	189b      	adds	r3, r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4912      	ldr	r1, [pc, #72]	@ (80021ac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002162:	0018      	movs	r0, r3
 8002164:	f7fd ffce 	bl	8000104 <__udivsi3>
 8002168:	0003      	movs	r3, r0
 800216a:	3301      	adds	r3, #1
 800216c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800216e:	e008      	b.n	8002182 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	3b01      	subs	r3, #1
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	e001      	b.n	8002182 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e009      	b.n	8002196 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002182:	4b07      	ldr	r3, [pc, #28]	@ (80021a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002184:	695a      	ldr	r2, [r3, #20]
 8002186:	2380      	movs	r3, #128	@ 0x80
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	401a      	ands	r2, r3
 800218c:	2380      	movs	r3, #128	@ 0x80
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	429a      	cmp	r2, r3
 8002192:	d0ed      	beq.n	8002170 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	0018      	movs	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	b004      	add	sp, #16
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			@ (mov r8, r8)
 80021a0:	40007000 	.word	0x40007000
 80021a4:	fffff9ff 	.word	0xfffff9ff
 80021a8:	20000000 	.word	0x20000000
 80021ac:	000f4240 	.word	0x000f4240

080021b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80021b4:	4b03      	ldr	r3, [pc, #12]	@ (80021c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	23e0      	movs	r3, #224	@ 0xe0
 80021ba:	01db      	lsls	r3, r3, #7
 80021bc:	4013      	ands	r3, r2
}
 80021be:	0018      	movs	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000

080021c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d102      	bne.n	80021dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	f000 fb50 	bl	800287c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2201      	movs	r2, #1
 80021e2:	4013      	ands	r3, r2
 80021e4:	d100      	bne.n	80021e8 <HAL_RCC_OscConfig+0x20>
 80021e6:	e07c      	b.n	80022e2 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021e8:	4bc3      	ldr	r3, [pc, #780]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2238      	movs	r2, #56	@ 0x38
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021f2:	4bc1      	ldr	r3, [pc, #772]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2203      	movs	r2, #3
 80021f8:	4013      	ands	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	2b10      	cmp	r3, #16
 8002200:	d102      	bne.n	8002208 <HAL_RCC_OscConfig+0x40>
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2b03      	cmp	r3, #3
 8002206:	d002      	beq.n	800220e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	2b08      	cmp	r3, #8
 800220c:	d10b      	bne.n	8002226 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220e:	4bba      	ldr	r3, [pc, #744]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	2380      	movs	r3, #128	@ 0x80
 8002214:	029b      	lsls	r3, r3, #10
 8002216:	4013      	ands	r3, r2
 8002218:	d062      	beq.n	80022e0 <HAL_RCC_OscConfig+0x118>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d15e      	bne.n	80022e0 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e32a      	b.n	800287c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	2380      	movs	r3, #128	@ 0x80
 800222c:	025b      	lsls	r3, r3, #9
 800222e:	429a      	cmp	r2, r3
 8002230:	d107      	bne.n	8002242 <HAL_RCC_OscConfig+0x7a>
 8002232:	4bb1      	ldr	r3, [pc, #708]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	4bb0      	ldr	r3, [pc, #704]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 8002238:	2180      	movs	r1, #128	@ 0x80
 800223a:	0249      	lsls	r1, r1, #9
 800223c:	430a      	orrs	r2, r1
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	e020      	b.n	8002284 <HAL_RCC_OscConfig+0xbc>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	23a0      	movs	r3, #160	@ 0xa0
 8002248:	02db      	lsls	r3, r3, #11
 800224a:	429a      	cmp	r2, r3
 800224c:	d10e      	bne.n	800226c <HAL_RCC_OscConfig+0xa4>
 800224e:	4baa      	ldr	r3, [pc, #680]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	4ba9      	ldr	r3, [pc, #676]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 8002254:	2180      	movs	r1, #128	@ 0x80
 8002256:	02c9      	lsls	r1, r1, #11
 8002258:	430a      	orrs	r2, r1
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	4ba6      	ldr	r3, [pc, #664]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4ba5      	ldr	r3, [pc, #660]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 8002262:	2180      	movs	r1, #128	@ 0x80
 8002264:	0249      	lsls	r1, r1, #9
 8002266:	430a      	orrs	r2, r1
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	e00b      	b.n	8002284 <HAL_RCC_OscConfig+0xbc>
 800226c:	4ba2      	ldr	r3, [pc, #648]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4ba1      	ldr	r3, [pc, #644]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 8002272:	49a2      	ldr	r1, [pc, #648]	@ (80024fc <HAL_RCC_OscConfig+0x334>)
 8002274:	400a      	ands	r2, r1
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	4b9f      	ldr	r3, [pc, #636]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b9e      	ldr	r3, [pc, #632]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 800227e:	49a0      	ldr	r1, [pc, #640]	@ (8002500 <HAL_RCC_OscConfig+0x338>)
 8002280:	400a      	ands	r2, r1
 8002282:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d014      	beq.n	80022b6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7ff fb90 	bl	80019b0 <HAL_GetTick>
 8002290:	0003      	movs	r3, r0
 8002292:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002296:	f7ff fb8b 	bl	80019b0 <HAL_GetTick>
 800229a:	0002      	movs	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b64      	cmp	r3, #100	@ 0x64
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e2e9      	b.n	800287c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022a8:	4b93      	ldr	r3, [pc, #588]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	2380      	movs	r3, #128	@ 0x80
 80022ae:	029b      	lsls	r3, r3, #10
 80022b0:	4013      	ands	r3, r2
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0xce>
 80022b4:	e015      	b.n	80022e2 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b6:	f7ff fb7b 	bl	80019b0 <HAL_GetTick>
 80022ba:	0003      	movs	r3, r0
 80022bc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c0:	f7ff fb76 	bl	80019b0 <HAL_GetTick>
 80022c4:	0002      	movs	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	@ 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e2d4      	b.n	800287c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022d2:	4b89      	ldr	r3, [pc, #548]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	2380      	movs	r3, #128	@ 0x80
 80022d8:	029b      	lsls	r3, r3, #10
 80022da:	4013      	ands	r3, r2
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0xf8>
 80022de:	e000      	b.n	80022e2 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2202      	movs	r2, #2
 80022e8:	4013      	ands	r3, r2
 80022ea:	d100      	bne.n	80022ee <HAL_RCC_OscConfig+0x126>
 80022ec:	e099      	b.n	8002422 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ee:	4b82      	ldr	r3, [pc, #520]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2238      	movs	r2, #56	@ 0x38
 80022f4:	4013      	ands	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022f8:	4b7f      	ldr	r3, [pc, #508]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2203      	movs	r2, #3
 80022fe:	4013      	ands	r3, r2
 8002300:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	2b10      	cmp	r3, #16
 8002306:	d102      	bne.n	800230e <HAL_RCC_OscConfig+0x146>
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d002      	beq.n	8002314 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d135      	bne.n	8002380 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002314:	4b78      	ldr	r3, [pc, #480]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	2380      	movs	r3, #128	@ 0x80
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4013      	ands	r3, r2
 800231e:	d005      	beq.n	800232c <HAL_RCC_OscConfig+0x164>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e2a7      	b.n	800287c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232c:	4b72      	ldr	r3, [pc, #456]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	4a74      	ldr	r2, [pc, #464]	@ (8002504 <HAL_RCC_OscConfig+0x33c>)
 8002332:	4013      	ands	r3, r2
 8002334:	0019      	movs	r1, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	021a      	lsls	r2, r3, #8
 800233c:	4b6e      	ldr	r3, [pc, #440]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 800233e:	430a      	orrs	r2, r1
 8002340:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d112      	bne.n	800236e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002348:	4b6b      	ldr	r3, [pc, #428]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a6e      	ldr	r2, [pc, #440]	@ (8002508 <HAL_RCC_OscConfig+0x340>)
 800234e:	4013      	ands	r3, r2
 8002350:	0019      	movs	r1, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691a      	ldr	r2, [r3, #16]
 8002356:	4b68      	ldr	r3, [pc, #416]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 8002358:	430a      	orrs	r2, r1
 800235a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800235c:	4b66      	ldr	r3, [pc, #408]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	0adb      	lsrs	r3, r3, #11
 8002362:	2207      	movs	r2, #7
 8002364:	4013      	ands	r3, r2
 8002366:	4a69      	ldr	r2, [pc, #420]	@ (800250c <HAL_RCC_OscConfig+0x344>)
 8002368:	40da      	lsrs	r2, r3
 800236a:	4b69      	ldr	r3, [pc, #420]	@ (8002510 <HAL_RCC_OscConfig+0x348>)
 800236c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800236e:	4b69      	ldr	r3, [pc, #420]	@ (8002514 <HAL_RCC_OscConfig+0x34c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	0018      	movs	r0, r3
 8002374:	f7ff fac0 	bl	80018f8 <HAL_InitTick>
 8002378:	1e03      	subs	r3, r0, #0
 800237a:	d051      	beq.n	8002420 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e27d      	b.n	800287c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d030      	beq.n	80023ea <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002388:	4b5b      	ldr	r3, [pc, #364]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a5e      	ldr	r2, [pc, #376]	@ (8002508 <HAL_RCC_OscConfig+0x340>)
 800238e:	4013      	ands	r3, r2
 8002390:	0019      	movs	r1, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691a      	ldr	r2, [r3, #16]
 8002396:	4b58      	ldr	r3, [pc, #352]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 8002398:	430a      	orrs	r2, r1
 800239a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800239c:	4b56      	ldr	r3, [pc, #344]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4b55      	ldr	r3, [pc, #340]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 80023a2:	2180      	movs	r1, #128	@ 0x80
 80023a4:	0049      	lsls	r1, r1, #1
 80023a6:	430a      	orrs	r2, r1
 80023a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023aa:	f7ff fb01 	bl	80019b0 <HAL_GetTick>
 80023ae:	0003      	movs	r3, r0
 80023b0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b4:	f7ff fafc 	bl	80019b0 <HAL_GetTick>
 80023b8:	0002      	movs	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e25a      	b.n	800287c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c6:	4b4c      	ldr	r3, [pc, #304]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	2380      	movs	r3, #128	@ 0x80
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4013      	ands	r3, r2
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d2:	4b49      	ldr	r3, [pc, #292]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4a4b      	ldr	r2, [pc, #300]	@ (8002504 <HAL_RCC_OscConfig+0x33c>)
 80023d8:	4013      	ands	r3, r2
 80023da:	0019      	movs	r1, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	021a      	lsls	r2, r3, #8
 80023e2:	4b45      	ldr	r3, [pc, #276]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 80023e4:	430a      	orrs	r2, r1
 80023e6:	605a      	str	r2, [r3, #4]
 80023e8:	e01b      	b.n	8002422 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80023ea:	4b43      	ldr	r3, [pc, #268]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	4b42      	ldr	r3, [pc, #264]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 80023f0:	4949      	ldr	r1, [pc, #292]	@ (8002518 <HAL_RCC_OscConfig+0x350>)
 80023f2:	400a      	ands	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f6:	f7ff fadb 	bl	80019b0 <HAL_GetTick>
 80023fa:	0003      	movs	r3, r0
 80023fc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002400:	f7ff fad6 	bl	80019b0 <HAL_GetTick>
 8002404:	0002      	movs	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e234      	b.n	800287c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002412:	4b39      	ldr	r3, [pc, #228]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	2380      	movs	r3, #128	@ 0x80
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4013      	ands	r3, r2
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x238>
 800241e:	e000      	b.n	8002422 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002420:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2208      	movs	r2, #8
 8002428:	4013      	ands	r3, r2
 800242a:	d047      	beq.n	80024bc <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800242c:	4b32      	ldr	r3, [pc, #200]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	2238      	movs	r2, #56	@ 0x38
 8002432:	4013      	ands	r3, r2
 8002434:	2b18      	cmp	r3, #24
 8002436:	d10a      	bne.n	800244e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002438:	4b2f      	ldr	r3, [pc, #188]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 800243a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800243c:	2202      	movs	r2, #2
 800243e:	4013      	ands	r3, r2
 8002440:	d03c      	beq.n	80024bc <HAL_RCC_OscConfig+0x2f4>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d138      	bne.n	80024bc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e216      	b.n	800287c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d019      	beq.n	800248a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002456:	4b28      	ldr	r3, [pc, #160]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 8002458:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800245a:	4b27      	ldr	r3, [pc, #156]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 800245c:	2101      	movs	r1, #1
 800245e:	430a      	orrs	r2, r1
 8002460:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002462:	f7ff faa5 	bl	80019b0 <HAL_GetTick>
 8002466:	0003      	movs	r3, r0
 8002468:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246c:	f7ff faa0 	bl	80019b0 <HAL_GetTick>
 8002470:	0002      	movs	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e1fe      	b.n	800287c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800247e:	4b1e      	ldr	r3, [pc, #120]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 8002480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002482:	2202      	movs	r2, #2
 8002484:	4013      	ands	r3, r2
 8002486:	d0f1      	beq.n	800246c <HAL_RCC_OscConfig+0x2a4>
 8002488:	e018      	b.n	80024bc <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800248a:	4b1b      	ldr	r3, [pc, #108]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 800248c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800248e:	4b1a      	ldr	r3, [pc, #104]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 8002490:	2101      	movs	r1, #1
 8002492:	438a      	bics	r2, r1
 8002494:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002496:	f7ff fa8b 	bl	80019b0 <HAL_GetTick>
 800249a:	0003      	movs	r3, r0
 800249c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a0:	f7ff fa86 	bl	80019b0 <HAL_GetTick>
 80024a4:	0002      	movs	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e1e4      	b.n	800287c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024b2:	4b11      	ldr	r3, [pc, #68]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 80024b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024b6:	2202      	movs	r2, #2
 80024b8:	4013      	ands	r3, r2
 80024ba:	d1f1      	bne.n	80024a0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2204      	movs	r2, #4
 80024c2:	4013      	ands	r3, r2
 80024c4:	d100      	bne.n	80024c8 <HAL_RCC_OscConfig+0x300>
 80024c6:	e0c7      	b.n	8002658 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024c8:	231f      	movs	r3, #31
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80024d0:	4b09      	ldr	r3, [pc, #36]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2238      	movs	r2, #56	@ 0x38
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b20      	cmp	r3, #32
 80024da:	d11f      	bne.n	800251c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80024dc:	4b06      	ldr	r3, [pc, #24]	@ (80024f8 <HAL_RCC_OscConfig+0x330>)
 80024de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e0:	2202      	movs	r2, #2
 80024e2:	4013      	ands	r3, r2
 80024e4:	d100      	bne.n	80024e8 <HAL_RCC_OscConfig+0x320>
 80024e6:	e0b7      	b.n	8002658 <HAL_RCC_OscConfig+0x490>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d000      	beq.n	80024f2 <HAL_RCC_OscConfig+0x32a>
 80024f0:	e0b2      	b.n	8002658 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e1c2      	b.n	800287c <HAL_RCC_OscConfig+0x6b4>
 80024f6:	46c0      	nop			@ (mov r8, r8)
 80024f8:	40021000 	.word	0x40021000
 80024fc:	fffeffff 	.word	0xfffeffff
 8002500:	fffbffff 	.word	0xfffbffff
 8002504:	ffff80ff 	.word	0xffff80ff
 8002508:	ffffc7ff 	.word	0xffffc7ff
 800250c:	00f42400 	.word	0x00f42400
 8002510:	20000000 	.word	0x20000000
 8002514:	20000004 	.word	0x20000004
 8002518:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800251c:	4bb5      	ldr	r3, [pc, #724]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 800251e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002520:	2380      	movs	r3, #128	@ 0x80
 8002522:	055b      	lsls	r3, r3, #21
 8002524:	4013      	ands	r3, r2
 8002526:	d101      	bne.n	800252c <HAL_RCC_OscConfig+0x364>
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <HAL_RCC_OscConfig+0x366>
 800252c:	2300      	movs	r3, #0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d011      	beq.n	8002556 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	4bb0      	ldr	r3, [pc, #704]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 8002534:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002536:	4baf      	ldr	r3, [pc, #700]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 8002538:	2180      	movs	r1, #128	@ 0x80
 800253a:	0549      	lsls	r1, r1, #21
 800253c:	430a      	orrs	r2, r1
 800253e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002540:	4bac      	ldr	r3, [pc, #688]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 8002542:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002544:	2380      	movs	r3, #128	@ 0x80
 8002546:	055b      	lsls	r3, r3, #21
 8002548:	4013      	ands	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800254e:	231f      	movs	r3, #31
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002556:	4ba8      	ldr	r3, [pc, #672]	@ (80027f8 <HAL_RCC_OscConfig+0x630>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	2380      	movs	r3, #128	@ 0x80
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	4013      	ands	r3, r2
 8002560:	d11a      	bne.n	8002598 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002562:	4ba5      	ldr	r3, [pc, #660]	@ (80027f8 <HAL_RCC_OscConfig+0x630>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	4ba4      	ldr	r3, [pc, #656]	@ (80027f8 <HAL_RCC_OscConfig+0x630>)
 8002568:	2180      	movs	r1, #128	@ 0x80
 800256a:	0049      	lsls	r1, r1, #1
 800256c:	430a      	orrs	r2, r1
 800256e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002570:	f7ff fa1e 	bl	80019b0 <HAL_GetTick>
 8002574:	0003      	movs	r3, r0
 8002576:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257a:	f7ff fa19 	bl	80019b0 <HAL_GetTick>
 800257e:	0002      	movs	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e177      	b.n	800287c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800258c:	4b9a      	ldr	r3, [pc, #616]	@ (80027f8 <HAL_RCC_OscConfig+0x630>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	2380      	movs	r3, #128	@ 0x80
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4013      	ands	r3, r2
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d106      	bne.n	80025ae <HAL_RCC_OscConfig+0x3e6>
 80025a0:	4b94      	ldr	r3, [pc, #592]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 80025a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025a4:	4b93      	ldr	r3, [pc, #588]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 80025a6:	2101      	movs	r1, #1
 80025a8:	430a      	orrs	r2, r1
 80025aa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025ac:	e01c      	b.n	80025e8 <HAL_RCC_OscConfig+0x420>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b05      	cmp	r3, #5
 80025b4:	d10c      	bne.n	80025d0 <HAL_RCC_OscConfig+0x408>
 80025b6:	4b8f      	ldr	r3, [pc, #572]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 80025b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025ba:	4b8e      	ldr	r3, [pc, #568]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 80025bc:	2104      	movs	r1, #4
 80025be:	430a      	orrs	r2, r1
 80025c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025c2:	4b8c      	ldr	r3, [pc, #560]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 80025c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025c6:	4b8b      	ldr	r3, [pc, #556]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 80025c8:	2101      	movs	r1, #1
 80025ca:	430a      	orrs	r2, r1
 80025cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025ce:	e00b      	b.n	80025e8 <HAL_RCC_OscConfig+0x420>
 80025d0:	4b88      	ldr	r3, [pc, #544]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 80025d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025d4:	4b87      	ldr	r3, [pc, #540]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 80025d6:	2101      	movs	r1, #1
 80025d8:	438a      	bics	r2, r1
 80025da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025dc:	4b85      	ldr	r3, [pc, #532]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 80025de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80025e0:	4b84      	ldr	r3, [pc, #528]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 80025e2:	2104      	movs	r1, #4
 80025e4:	438a      	bics	r2, r1
 80025e6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d014      	beq.n	800261a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7ff f9de 	bl	80019b0 <HAL_GetTick>
 80025f4:	0003      	movs	r3, r0
 80025f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f8:	e009      	b.n	800260e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fa:	f7ff f9d9 	bl	80019b0 <HAL_GetTick>
 80025fe:	0002      	movs	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	4a7d      	ldr	r2, [pc, #500]	@ (80027fc <HAL_RCC_OscConfig+0x634>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e136      	b.n	800287c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800260e:	4b79      	ldr	r3, [pc, #484]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 8002610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002612:	2202      	movs	r2, #2
 8002614:	4013      	ands	r3, r2
 8002616:	d0f0      	beq.n	80025fa <HAL_RCC_OscConfig+0x432>
 8002618:	e013      	b.n	8002642 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261a:	f7ff f9c9 	bl	80019b0 <HAL_GetTick>
 800261e:	0003      	movs	r3, r0
 8002620:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002622:	e009      	b.n	8002638 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002624:	f7ff f9c4 	bl	80019b0 <HAL_GetTick>
 8002628:	0002      	movs	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	4a73      	ldr	r2, [pc, #460]	@ (80027fc <HAL_RCC_OscConfig+0x634>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e121      	b.n	800287c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002638:	4b6e      	ldr	r3, [pc, #440]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 800263a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800263c:	2202      	movs	r2, #2
 800263e:	4013      	ands	r3, r2
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002642:	231f      	movs	r3, #31
 8002644:	18fb      	adds	r3, r7, r3
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d105      	bne.n	8002658 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800264c:	4b69      	ldr	r3, [pc, #420]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 800264e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002650:	4b68      	ldr	r3, [pc, #416]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 8002652:	496b      	ldr	r1, [pc, #428]	@ (8002800 <HAL_RCC_OscConfig+0x638>)
 8002654:	400a      	ands	r2, r1
 8002656:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2220      	movs	r2, #32
 800265e:	4013      	ands	r3, r2
 8002660:	d039      	beq.n	80026d6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d01b      	beq.n	80026a2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800266a:	4b62      	ldr	r3, [pc, #392]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	4b61      	ldr	r3, [pc, #388]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 8002670:	2180      	movs	r1, #128	@ 0x80
 8002672:	03c9      	lsls	r1, r1, #15
 8002674:	430a      	orrs	r2, r1
 8002676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002678:	f7ff f99a 	bl	80019b0 <HAL_GetTick>
 800267c:	0003      	movs	r3, r0
 800267e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002682:	f7ff f995 	bl	80019b0 <HAL_GetTick>
 8002686:	0002      	movs	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e0f3      	b.n	800287c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002694:	4b57      	ldr	r3, [pc, #348]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	2380      	movs	r3, #128	@ 0x80
 800269a:	041b      	lsls	r3, r3, #16
 800269c:	4013      	ands	r3, r2
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x4ba>
 80026a0:	e019      	b.n	80026d6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026a2:	4b54      	ldr	r3, [pc, #336]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	4b53      	ldr	r3, [pc, #332]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 80026a8:	4956      	ldr	r1, [pc, #344]	@ (8002804 <HAL_RCC_OscConfig+0x63c>)
 80026aa:	400a      	ands	r2, r1
 80026ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ae:	f7ff f97f 	bl	80019b0 <HAL_GetTick>
 80026b2:	0003      	movs	r3, r0
 80026b4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026b8:	f7ff f97a 	bl	80019b0 <HAL_GetTick>
 80026bc:	0002      	movs	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e0d8      	b.n	800287c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80026ca:	4b4a      	ldr	r3, [pc, #296]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	2380      	movs	r3, #128	@ 0x80
 80026d0:	041b      	lsls	r3, r3, #16
 80026d2:	4013      	ands	r3, r2
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d100      	bne.n	80026e0 <HAL_RCC_OscConfig+0x518>
 80026de:	e0cc      	b.n	800287a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026e0:	4b44      	ldr	r3, [pc, #272]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2238      	movs	r2, #56	@ 0x38
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b10      	cmp	r3, #16
 80026ea:	d100      	bne.n	80026ee <HAL_RCC_OscConfig+0x526>
 80026ec:	e07b      	b.n	80027e6 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d156      	bne.n	80027a4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f6:	4b3f      	ldr	r3, [pc, #252]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	4b3e      	ldr	r3, [pc, #248]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 80026fc:	4942      	ldr	r1, [pc, #264]	@ (8002808 <HAL_RCC_OscConfig+0x640>)
 80026fe:	400a      	ands	r2, r1
 8002700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7ff f955 	bl	80019b0 <HAL_GetTick>
 8002706:	0003      	movs	r3, r0
 8002708:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270c:	f7ff f950 	bl	80019b0 <HAL_GetTick>
 8002710:	0002      	movs	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e0ae      	b.n	800287c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800271e:	4b35      	ldr	r3, [pc, #212]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	2380      	movs	r3, #128	@ 0x80
 8002724:	049b      	lsls	r3, r3, #18
 8002726:	4013      	ands	r3, r2
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800272a:	4b32      	ldr	r3, [pc, #200]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	4a37      	ldr	r2, [pc, #220]	@ (800280c <HAL_RCC_OscConfig+0x644>)
 8002730:	4013      	ands	r3, r2
 8002732:	0019      	movs	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002756:	431a      	orrs	r2, r3
 8002758:	4b26      	ldr	r3, [pc, #152]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 800275a:	430a      	orrs	r2, r1
 800275c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800275e:	4b25      	ldr	r3, [pc, #148]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4b24      	ldr	r3, [pc, #144]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 8002764:	2180      	movs	r1, #128	@ 0x80
 8002766:	0449      	lsls	r1, r1, #17
 8002768:	430a      	orrs	r2, r1
 800276a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800276c:	4b21      	ldr	r3, [pc, #132]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	4b20      	ldr	r3, [pc, #128]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 8002772:	2180      	movs	r1, #128	@ 0x80
 8002774:	0549      	lsls	r1, r1, #21
 8002776:	430a      	orrs	r2, r1
 8002778:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277a:	f7ff f919 	bl	80019b0 <HAL_GetTick>
 800277e:	0003      	movs	r3, r0
 8002780:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002784:	f7ff f914 	bl	80019b0 <HAL_GetTick>
 8002788:	0002      	movs	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e072      	b.n	800287c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002796:	4b17      	ldr	r3, [pc, #92]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	2380      	movs	r3, #128	@ 0x80
 800279c:	049b      	lsls	r3, r3, #18
 800279e:	4013      	ands	r3, r2
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0x5bc>
 80027a2:	e06a      	b.n	800287a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a4:	4b13      	ldr	r3, [pc, #76]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b12      	ldr	r3, [pc, #72]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 80027aa:	4917      	ldr	r1, [pc, #92]	@ (8002808 <HAL_RCC_OscConfig+0x640>)
 80027ac:	400a      	ands	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7ff f8fe 	bl	80019b0 <HAL_GetTick>
 80027b4:	0003      	movs	r3, r0
 80027b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ba:	f7ff f8f9 	bl	80019b0 <HAL_GetTick>
 80027be:	0002      	movs	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e057      	b.n	800287c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027cc:	4b09      	ldr	r3, [pc, #36]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	2380      	movs	r3, #128	@ 0x80
 80027d2:	049b      	lsls	r3, r3, #18
 80027d4:	4013      	ands	r3, r2
 80027d6:	d1f0      	bne.n	80027ba <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80027d8:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	4b05      	ldr	r3, [pc, #20]	@ (80027f4 <HAL_RCC_OscConfig+0x62c>)
 80027de:	490c      	ldr	r1, [pc, #48]	@ (8002810 <HAL_RCC_OscConfig+0x648>)
 80027e0:	400a      	ands	r2, r1
 80027e2:	60da      	str	r2, [r3, #12]
 80027e4:	e049      	b.n	800287a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d112      	bne.n	8002814 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e044      	b.n	800287c <HAL_RCC_OscConfig+0x6b4>
 80027f2:	46c0      	nop			@ (mov r8, r8)
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40007000 	.word	0x40007000
 80027fc:	00001388 	.word	0x00001388
 8002800:	efffffff 	.word	0xefffffff
 8002804:	ffbfffff 	.word	0xffbfffff
 8002808:	feffffff 	.word	0xfeffffff
 800280c:	11c1808c 	.word	0x11c1808c
 8002810:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002814:	4b1b      	ldr	r3, [pc, #108]	@ (8002884 <HAL_RCC_OscConfig+0x6bc>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2203      	movs	r2, #3
 800281e:	401a      	ands	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	429a      	cmp	r2, r3
 8002826:	d126      	bne.n	8002876 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2270      	movs	r2, #112	@ 0x70
 800282c:	401a      	ands	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002832:	429a      	cmp	r2, r3
 8002834:	d11f      	bne.n	8002876 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	23fe      	movs	r3, #254	@ 0xfe
 800283a:	01db      	lsls	r3, r3, #7
 800283c:	401a      	ands	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002842:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002844:	429a      	cmp	r2, r3
 8002846:	d116      	bne.n	8002876 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	23f8      	movs	r3, #248	@ 0xf8
 800284c:	039b      	lsls	r3, r3, #14
 800284e:	401a      	ands	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002854:	429a      	cmp	r2, r3
 8002856:	d10e      	bne.n	8002876 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	23e0      	movs	r3, #224	@ 0xe0
 800285c:	051b      	lsls	r3, r3, #20
 800285e:	401a      	ands	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d106      	bne.n	8002876 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	0f5b      	lsrs	r3, r3, #29
 800286c:	075a      	lsls	r2, r3, #29
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d001      	beq.n	800287a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	0018      	movs	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	b008      	add	sp, #32
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40021000 	.word	0x40021000

08002888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0e9      	b.n	8002a70 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800289c:	4b76      	ldr	r3, [pc, #472]	@ (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2207      	movs	r2, #7
 80028a2:	4013      	ands	r3, r2
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d91e      	bls.n	80028e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028aa:	4b73      	ldr	r3, [pc, #460]	@ (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2207      	movs	r2, #7
 80028b0:	4393      	bics	r3, r2
 80028b2:	0019      	movs	r1, r3
 80028b4:	4b70      	ldr	r3, [pc, #448]	@ (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028bc:	f7ff f878 	bl	80019b0 <HAL_GetTick>
 80028c0:	0003      	movs	r3, r0
 80028c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028c4:	e009      	b.n	80028da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c6:	f7ff f873 	bl	80019b0 <HAL_GetTick>
 80028ca:	0002      	movs	r2, r0
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	4a6a      	ldr	r2, [pc, #424]	@ (8002a7c <HAL_RCC_ClockConfig+0x1f4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e0ca      	b.n	8002a70 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028da:	4b67      	ldr	r3, [pc, #412]	@ (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2207      	movs	r2, #7
 80028e0:	4013      	ands	r3, r2
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d1ee      	bne.n	80028c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2202      	movs	r2, #2
 80028ee:	4013      	ands	r3, r2
 80028f0:	d015      	beq.n	800291e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2204      	movs	r2, #4
 80028f8:	4013      	ands	r3, r2
 80028fa:	d006      	beq.n	800290a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80028fc:	4b60      	ldr	r3, [pc, #384]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	4b5f      	ldr	r3, [pc, #380]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 8002902:	21e0      	movs	r1, #224	@ 0xe0
 8002904:	01c9      	lsls	r1, r1, #7
 8002906:	430a      	orrs	r2, r1
 8002908:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800290a:	4b5d      	ldr	r3, [pc, #372]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	4a5d      	ldr	r2, [pc, #372]	@ (8002a84 <HAL_RCC_ClockConfig+0x1fc>)
 8002910:	4013      	ands	r3, r2
 8002912:	0019      	movs	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	4b59      	ldr	r3, [pc, #356]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 800291a:	430a      	orrs	r2, r1
 800291c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2201      	movs	r2, #1
 8002924:	4013      	ands	r3, r2
 8002926:	d057      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d107      	bne.n	8002940 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002930:	4b53      	ldr	r3, [pc, #332]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	2380      	movs	r3, #128	@ 0x80
 8002936:	029b      	lsls	r3, r3, #10
 8002938:	4013      	ands	r3, r2
 800293a:	d12b      	bne.n	8002994 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e097      	b.n	8002a70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d107      	bne.n	8002958 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002948:	4b4d      	ldr	r3, [pc, #308]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	2380      	movs	r3, #128	@ 0x80
 800294e:	049b      	lsls	r3, r3, #18
 8002950:	4013      	ands	r3, r2
 8002952:	d11f      	bne.n	8002994 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e08b      	b.n	8002a70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d107      	bne.n	8002970 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002960:	4b47      	ldr	r3, [pc, #284]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	2380      	movs	r3, #128	@ 0x80
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4013      	ands	r3, r2
 800296a:	d113      	bne.n	8002994 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e07f      	b.n	8002a70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b03      	cmp	r3, #3
 8002976:	d106      	bne.n	8002986 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002978:	4b41      	ldr	r3, [pc, #260]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 800297a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800297c:	2202      	movs	r2, #2
 800297e:	4013      	ands	r3, r2
 8002980:	d108      	bne.n	8002994 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e074      	b.n	8002a70 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002986:	4b3e      	ldr	r3, [pc, #248]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 8002988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298a:	2202      	movs	r2, #2
 800298c:	4013      	ands	r3, r2
 800298e:	d101      	bne.n	8002994 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e06d      	b.n	8002a70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002994:	4b3a      	ldr	r3, [pc, #232]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2207      	movs	r2, #7
 800299a:	4393      	bics	r3, r2
 800299c:	0019      	movs	r1, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	4b37      	ldr	r3, [pc, #220]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 80029a4:	430a      	orrs	r2, r1
 80029a6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a8:	f7ff f802 	bl	80019b0 <HAL_GetTick>
 80029ac:	0003      	movs	r3, r0
 80029ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b0:	e009      	b.n	80029c6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b2:	f7fe fffd 	bl	80019b0 <HAL_GetTick>
 80029b6:	0002      	movs	r2, r0
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	4a2f      	ldr	r2, [pc, #188]	@ (8002a7c <HAL_RCC_ClockConfig+0x1f4>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e054      	b.n	8002a70 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2238      	movs	r2, #56	@ 0x38
 80029cc:	401a      	ands	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d1ec      	bne.n	80029b2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029d8:	4b27      	ldr	r3, [pc, #156]	@ (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2207      	movs	r2, #7
 80029de:	4013      	ands	r3, r2
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d21e      	bcs.n	8002a24 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e6:	4b24      	ldr	r3, [pc, #144]	@ (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2207      	movs	r2, #7
 80029ec:	4393      	bics	r3, r2
 80029ee:	0019      	movs	r1, r3
 80029f0:	4b21      	ldr	r3, [pc, #132]	@ (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029f8:	f7fe ffda 	bl	80019b0 <HAL_GetTick>
 80029fc:	0003      	movs	r3, r0
 80029fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a00:	e009      	b.n	8002a16 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a02:	f7fe ffd5 	bl	80019b0 <HAL_GetTick>
 8002a06:	0002      	movs	r2, r0
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8002a7c <HAL_RCC_ClockConfig+0x1f4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e02c      	b.n	8002a70 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a16:	4b18      	ldr	r3, [pc, #96]	@ (8002a78 <HAL_RCC_ClockConfig+0x1f0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2207      	movs	r2, #7
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d1ee      	bne.n	8002a02 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2204      	movs	r2, #4
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d009      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a2e:	4b14      	ldr	r3, [pc, #80]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	4a15      	ldr	r2, [pc, #84]	@ (8002a88 <HAL_RCC_ClockConfig+0x200>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	0019      	movs	r1, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	4b10      	ldr	r3, [pc, #64]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002a42:	f000 f829 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
 8002a46:	0001      	movs	r1, r0
 8002a48:	4b0d      	ldr	r3, [pc, #52]	@ (8002a80 <HAL_RCC_ClockConfig+0x1f8>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	0a1b      	lsrs	r3, r3, #8
 8002a4e:	220f      	movs	r2, #15
 8002a50:	401a      	ands	r2, r3
 8002a52:	4b0e      	ldr	r3, [pc, #56]	@ (8002a8c <HAL_RCC_ClockConfig+0x204>)
 8002a54:	0092      	lsls	r2, r2, #2
 8002a56:	58d3      	ldr	r3, [r2, r3]
 8002a58:	221f      	movs	r2, #31
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	000a      	movs	r2, r1
 8002a5e:	40da      	lsrs	r2, r3
 8002a60:	4b0b      	ldr	r3, [pc, #44]	@ (8002a90 <HAL_RCC_ClockConfig+0x208>)
 8002a62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a64:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <HAL_RCC_ClockConfig+0x20c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f7fe ff45 	bl	80018f8 <HAL_InitTick>
 8002a6e:	0003      	movs	r3, r0
}
 8002a70:	0018      	movs	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b004      	add	sp, #16
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40022000 	.word	0x40022000
 8002a7c:	00001388 	.word	0x00001388
 8002a80:	40021000 	.word	0x40021000
 8002a84:	fffff0ff 	.word	0xfffff0ff
 8002a88:	ffff8fff 	.word	0xffff8fff
 8002a8c:	08005870 	.word	0x08005870
 8002a90:	20000000 	.word	0x20000000
 8002a94:	20000004 	.word	0x20000004

08002a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a9e:	4b3c      	ldr	r3, [pc, #240]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2238      	movs	r2, #56	@ 0x38
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d10f      	bne.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002aa8:	4b39      	ldr	r3, [pc, #228]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	0adb      	lsrs	r3, r3, #11
 8002aae:	2207      	movs	r2, #7
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	0013      	movs	r3, r2
 8002ab8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002aba:	6839      	ldr	r1, [r7, #0]
 8002abc:	4835      	ldr	r0, [pc, #212]	@ (8002b94 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002abe:	f7fd fb21 	bl	8000104 <__udivsi3>
 8002ac2:	0003      	movs	r3, r0
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	e05d      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ac8:	4b31      	ldr	r3, [pc, #196]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2238      	movs	r2, #56	@ 0x38
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d102      	bne.n	8002ada <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ad4:	4b30      	ldr	r3, [pc, #192]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	e054      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ada:	4b2d      	ldr	r3, [pc, #180]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2238      	movs	r2, #56	@ 0x38
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b10      	cmp	r3, #16
 8002ae4:	d138      	bne.n	8002b58 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	2203      	movs	r2, #3
 8002aec:	4013      	ands	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002af0:	4b27      	ldr	r3, [pc, #156]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	2207      	movs	r2, #7
 8002af8:	4013      	ands	r3, r2
 8002afa:	3301      	adds	r3, #1
 8002afc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d10d      	bne.n	8002b20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	4824      	ldr	r0, [pc, #144]	@ (8002b98 <HAL_RCC_GetSysClockFreq+0x100>)
 8002b08:	f7fd fafc 	bl	8000104 <__udivsi3>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	0019      	movs	r1, r3
 8002b10:	4b1f      	ldr	r3, [pc, #124]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	0a1b      	lsrs	r3, r3, #8
 8002b16:	227f      	movs	r2, #127	@ 0x7f
 8002b18:	4013      	ands	r3, r2
 8002b1a:	434b      	muls	r3, r1
 8002b1c:	617b      	str	r3, [r7, #20]
        break;
 8002b1e:	e00d      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	481c      	ldr	r0, [pc, #112]	@ (8002b94 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b24:	f7fd faee 	bl	8000104 <__udivsi3>
 8002b28:	0003      	movs	r3, r0
 8002b2a:	0019      	movs	r1, r3
 8002b2c:	4b18      	ldr	r3, [pc, #96]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	0a1b      	lsrs	r3, r3, #8
 8002b32:	227f      	movs	r2, #127	@ 0x7f
 8002b34:	4013      	ands	r3, r2
 8002b36:	434b      	muls	r3, r1
 8002b38:	617b      	str	r3, [r7, #20]
        break;
 8002b3a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002b3c:	4b14      	ldr	r3, [pc, #80]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	0f5b      	lsrs	r3, r3, #29
 8002b42:	2207      	movs	r2, #7
 8002b44:	4013      	ands	r3, r2
 8002b46:	3301      	adds	r3, #1
 8002b48:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	6978      	ldr	r0, [r7, #20]
 8002b4e:	f7fd fad9 	bl	8000104 <__udivsi3>
 8002b52:	0003      	movs	r3, r0
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	e015      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002b58:	4b0d      	ldr	r3, [pc, #52]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2238      	movs	r2, #56	@ 0x38
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	d103      	bne.n	8002b6c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002b64:	2380      	movs	r3, #128	@ 0x80
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	e00b      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b6c:	4b08      	ldr	r3, [pc, #32]	@ (8002b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2238      	movs	r2, #56	@ 0x38
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b18      	cmp	r3, #24
 8002b76:	d103      	bne.n	8002b80 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002b78:	23fa      	movs	r3, #250	@ 0xfa
 8002b7a:	01db      	lsls	r3, r3, #7
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	e001      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b84:	693b      	ldr	r3, [r7, #16]
}
 8002b86:	0018      	movs	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b006      	add	sp, #24
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	46c0      	nop			@ (mov r8, r8)
 8002b90:	40021000 	.word	0x40021000
 8002b94:	00f42400 	.word	0x00f42400
 8002b98:	007a1200 	.word	0x007a1200

08002b9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ba0:	4b02      	ldr	r3, [pc, #8]	@ (8002bac <HAL_RCC_GetHCLKFreq+0x10>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
}
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	46c0      	nop			@ (mov r8, r8)
 8002bac:	20000000 	.word	0x20000000

08002bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb0:	b5b0      	push	{r4, r5, r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002bb4:	f7ff fff2 	bl	8002b9c <HAL_RCC_GetHCLKFreq>
 8002bb8:	0004      	movs	r4, r0
 8002bba:	f7ff faf9 	bl	80021b0 <LL_RCC_GetAPB1Prescaler>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	0b1a      	lsrs	r2, r3, #12
 8002bc2:	4b05      	ldr	r3, [pc, #20]	@ (8002bd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bc4:	0092      	lsls	r2, r2, #2
 8002bc6:	58d3      	ldr	r3, [r2, r3]
 8002bc8:	221f      	movs	r2, #31
 8002bca:	4013      	ands	r3, r2
 8002bcc:	40dc      	lsrs	r4, r3
 8002bce:	0023      	movs	r3, r4
}
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8002bd6:	46c0      	nop			@ (mov r8, r8)
 8002bd8:	080058b0 	.word	0x080058b0

08002bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002be4:	2313      	movs	r3, #19
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bec:	2312      	movs	r3, #18
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	2380      	movs	r3, #128	@ 0x80
 8002bfa:	029b      	lsls	r3, r3, #10
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d100      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002c00:	e0ad      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c02:	2011      	movs	r0, #17
 8002c04:	183b      	adds	r3, r7, r0
 8002c06:	2200      	movs	r2, #0
 8002c08:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c0a:	4b47      	ldr	r3, [pc, #284]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c0e:	2380      	movs	r3, #128	@ 0x80
 8002c10:	055b      	lsls	r3, r3, #21
 8002c12:	4013      	ands	r3, r2
 8002c14:	d110      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c16:	4b44      	ldr	r3, [pc, #272]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c1a:	4b43      	ldr	r3, [pc, #268]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c1c:	2180      	movs	r1, #128	@ 0x80
 8002c1e:	0549      	lsls	r1, r1, #21
 8002c20:	430a      	orrs	r2, r1
 8002c22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c24:	4b40      	ldr	r3, [pc, #256]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c28:	2380      	movs	r3, #128	@ 0x80
 8002c2a:	055b      	lsls	r3, r3, #21
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c32:	183b      	adds	r3, r7, r0
 8002c34:	2201      	movs	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c38:	4b3c      	ldr	r3, [pc, #240]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002c3e:	2180      	movs	r1, #128	@ 0x80
 8002c40:	0049      	lsls	r1, r1, #1
 8002c42:	430a      	orrs	r2, r1
 8002c44:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c46:	f7fe feb3 	bl	80019b0 <HAL_GetTick>
 8002c4a:	0003      	movs	r3, r0
 8002c4c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c4e:	e00b      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c50:	f7fe feae 	bl	80019b0 <HAL_GetTick>
 8002c54:	0002      	movs	r2, r0
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d904      	bls.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002c5e:	2313      	movs	r3, #19
 8002c60:	18fb      	adds	r3, r7, r3
 8002c62:	2203      	movs	r2, #3
 8002c64:	701a      	strb	r2, [r3, #0]
        break;
 8002c66:	e005      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c68:	4b30      	ldr	r3, [pc, #192]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	2380      	movs	r3, #128	@ 0x80
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4013      	ands	r3, r2
 8002c72:	d0ed      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002c74:	2313      	movs	r3, #19
 8002c76:	18fb      	adds	r3, r7, r3
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d15e      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c80:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002c82:	23c0      	movs	r3, #192	@ 0xc0
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4013      	ands	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d019      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d014      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c9a:	4b23      	ldr	r3, [pc, #140]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c9e:	4a24      	ldr	r2, [pc, #144]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ca4:	4b20      	ldr	r3, [pc, #128]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ca6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002caa:	2180      	movs	r1, #128	@ 0x80
 8002cac:	0249      	lsls	r1, r1, #9
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002cb4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002cb8:	491e      	ldr	r1, [pc, #120]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002cba:	400a      	ands	r2, r1
 8002cbc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d016      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fe70 	bl	80019b0 <HAL_GetTick>
 8002cd0:	0003      	movs	r3, r0
 8002cd2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd4:	e00c      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd6:	f7fe fe6b 	bl	80019b0 <HAL_GetTick>
 8002cda:	0002      	movs	r2, r0
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	4a15      	ldr	r2, [pc, #84]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d904      	bls.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002ce6:	2313      	movs	r3, #19
 8002ce8:	18fb      	adds	r3, r7, r3
 8002cea:	2203      	movs	r2, #3
 8002cec:	701a      	strb	r2, [r3, #0]
            break;
 8002cee:	e004      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d0ed      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002cfa:	2313      	movs	r3, #19
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10a      	bne.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d04:	4b08      	ldr	r3, [pc, #32]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d08:	4a09      	ldr	r2, [pc, #36]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	0019      	movs	r1, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d12:	4b05      	ldr	r3, [pc, #20]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d14:	430a      	orrs	r2, r1
 8002d16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d18:	e016      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d1a:	2312      	movs	r3, #18
 8002d1c:	18fb      	adds	r3, r7, r3
 8002d1e:	2213      	movs	r2, #19
 8002d20:	18ba      	adds	r2, r7, r2
 8002d22:	7812      	ldrb	r2, [r2, #0]
 8002d24:	701a      	strb	r2, [r3, #0]
 8002d26:	e00f      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40007000 	.word	0x40007000
 8002d30:	fffffcff 	.word	0xfffffcff
 8002d34:	fffeffff 	.word	0xfffeffff
 8002d38:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d3c:	2312      	movs	r3, #18
 8002d3e:	18fb      	adds	r3, r7, r3
 8002d40:	2213      	movs	r2, #19
 8002d42:	18ba      	adds	r2, r7, r2
 8002d44:	7812      	ldrb	r2, [r2, #0]
 8002d46:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d48:	2311      	movs	r3, #17
 8002d4a:	18fb      	adds	r3, r7, r3
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d105      	bne.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d52:	4bb6      	ldr	r3, [pc, #728]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d56:	4bb5      	ldr	r3, [pc, #724]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d58:	49b5      	ldr	r1, [pc, #724]	@ (8003030 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002d5a:	400a      	ands	r2, r1
 8002d5c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2201      	movs	r2, #1
 8002d64:	4013      	ands	r3, r2
 8002d66:	d009      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d68:	4bb0      	ldr	r3, [pc, #704]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	4393      	bics	r3, r2
 8002d70:	0019      	movs	r1, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	4bad      	ldr	r3, [pc, #692]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2202      	movs	r2, #2
 8002d82:	4013      	ands	r3, r2
 8002d84:	d009      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d86:	4ba9      	ldr	r3, [pc, #676]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d8a:	220c      	movs	r2, #12
 8002d8c:	4393      	bics	r3, r2
 8002d8e:	0019      	movs	r1, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	4ba5      	ldr	r3, [pc, #660]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002d96:	430a      	orrs	r2, r1
 8002d98:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2204      	movs	r2, #4
 8002da0:	4013      	ands	r3, r2
 8002da2:	d009      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002da4:	4ba1      	ldr	r3, [pc, #644]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da8:	2230      	movs	r2, #48	@ 0x30
 8002daa:	4393      	bics	r3, r2
 8002dac:	0019      	movs	r1, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68da      	ldr	r2, [r3, #12]
 8002db2:	4b9e      	ldr	r3, [pc, #632]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002db4:	430a      	orrs	r2, r1
 8002db6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2210      	movs	r2, #16
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d009      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dc2:	4b9a      	ldr	r3, [pc, #616]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc6:	4a9b      	ldr	r2, [pc, #620]	@ (8003034 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	0019      	movs	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691a      	ldr	r2, [r3, #16]
 8002dd0:	4b96      	ldr	r3, [pc, #600]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	2380      	movs	r3, #128	@ 0x80
 8002ddc:	015b      	lsls	r3, r3, #5
 8002dde:	4013      	ands	r3, r2
 8002de0:	d009      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002de2:	4b92      	ldr	r3, [pc, #584]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de6:	4a94      	ldr	r2, [pc, #592]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002de8:	4013      	ands	r3, r2
 8002dea:	0019      	movs	r1, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	695a      	ldr	r2, [r3, #20]
 8002df0:	4b8e      	ldr	r3, [pc, #568]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002df2:	430a      	orrs	r2, r1
 8002df4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	2380      	movs	r3, #128	@ 0x80
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d009      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e02:	4b8a      	ldr	r3, [pc, #552]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e06:	4a8d      	ldr	r2, [pc, #564]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	0019      	movs	r1, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e10:	4b86      	ldr	r3, [pc, #536]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e12:	430a      	orrs	r2, r1
 8002e14:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	2380      	movs	r3, #128	@ 0x80
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d009      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e22:	4b82      	ldr	r3, [pc, #520]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e26:	4a86      	ldr	r2, [pc, #536]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	0019      	movs	r1, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e30:	4b7e      	ldr	r3, [pc, #504]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e32:	430a      	orrs	r2, r1
 8002e34:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d009      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e40:	4b7a      	ldr	r3, [pc, #488]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e44:	4a7f      	ldr	r2, [pc, #508]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	0019      	movs	r1, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	4b77      	ldr	r3, [pc, #476]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e50:	430a      	orrs	r2, r1
 8002e52:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2240      	movs	r2, #64	@ 0x40
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d009      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e5e:	4b73      	ldr	r3, [pc, #460]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e62:	4a79      	ldr	r2, [pc, #484]	@ (8003048 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	0019      	movs	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69da      	ldr	r2, [r3, #28]
 8002e6c:	4b6f      	ldr	r3, [pc, #444]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	2380      	movs	r3, #128	@ 0x80
 8002e78:	01db      	lsls	r3, r3, #7
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d015      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e7e:	4b6b      	ldr	r3, [pc, #428]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	0899      	lsrs	r1, r3, #2
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e8a:	4b68      	ldr	r3, [pc, #416]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e94:	2380      	movs	r3, #128	@ 0x80
 8002e96:	05db      	lsls	r3, r3, #23
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d106      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e9c:	4b63      	ldr	r3, [pc, #396]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	4b62      	ldr	r3, [pc, #392]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ea2:	2180      	movs	r1, #128	@ 0x80
 8002ea4:	0249      	lsls	r1, r1, #9
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	2380      	movs	r3, #128	@ 0x80
 8002eb0:	031b      	lsls	r3, r3, #12
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d009      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002eb6:	4b5d      	ldr	r3, [pc, #372]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eba:	2240      	movs	r2, #64	@ 0x40
 8002ebc:	4393      	bics	r3, r2
 8002ebe:	0019      	movs	r1, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ec4:	4b59      	ldr	r3, [pc, #356]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	2380      	movs	r3, #128	@ 0x80
 8002ed0:	039b      	lsls	r3, r3, #14
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d016      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ed6:	4b55      	ldr	r3, [pc, #340]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eda:	4a5c      	ldr	r2, [pc, #368]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	0019      	movs	r1, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ee4:	4b51      	ldr	r3, [pc, #324]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002eee:	2380      	movs	r3, #128	@ 0x80
 8002ef0:	03db      	lsls	r3, r3, #15
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d106      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002ef6:	4b4d      	ldr	r3, [pc, #308]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	4b4c      	ldr	r3, [pc, #304]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002efc:	2180      	movs	r1, #128	@ 0x80
 8002efe:	0449      	lsls	r1, r1, #17
 8002f00:	430a      	orrs	r2, r1
 8002f02:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	2380      	movs	r3, #128	@ 0x80
 8002f0a:	03db      	lsls	r3, r3, #15
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d016      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f10:	4b46      	ldr	r3, [pc, #280]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f14:	4a4e      	ldr	r2, [pc, #312]	@ (8003050 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	0019      	movs	r1, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f1e:	4b43      	ldr	r3, [pc, #268]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f20:	430a      	orrs	r2, r1
 8002f22:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f28:	2380      	movs	r3, #128	@ 0x80
 8002f2a:	045b      	lsls	r3, r3, #17
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d106      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002f30:	4b3e      	ldr	r3, [pc, #248]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	4b3d      	ldr	r3, [pc, #244]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f36:	2180      	movs	r1, #128	@ 0x80
 8002f38:	0449      	lsls	r1, r1, #17
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	2380      	movs	r3, #128	@ 0x80
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	4013      	ands	r3, r2
 8002f48:	d014      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002f4a:	4b38      	ldr	r3, [pc, #224]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4e:	2203      	movs	r2, #3
 8002f50:	4393      	bics	r3, r2
 8002f52:	0019      	movs	r1, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1a      	ldr	r2, [r3, #32]
 8002f58:	4b34      	ldr	r3, [pc, #208]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d106      	bne.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f66:	4b31      	ldr	r3, [pc, #196]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	4b30      	ldr	r3, [pc, #192]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f6c:	2180      	movs	r1, #128	@ 0x80
 8002f6e:	0249      	lsls	r1, r1, #9
 8002f70:	430a      	orrs	r2, r1
 8002f72:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	2380      	movs	r3, #128	@ 0x80
 8002f7a:	019b      	lsls	r3, r3, #6
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d014      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002f80:	4b2a      	ldr	r3, [pc, #168]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f84:	220c      	movs	r2, #12
 8002f86:	4393      	bics	r3, r2
 8002f88:	0019      	movs	r1, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f8e:	4b27      	ldr	r3, [pc, #156]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f90:	430a      	orrs	r2, r1
 8002f92:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d106      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f9c:	4b23      	ldr	r3, [pc, #140]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	4b22      	ldr	r3, [pc, #136]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fa2:	2180      	movs	r1, #128	@ 0x80
 8002fa4:	0249      	lsls	r1, r1, #9
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	2380      	movs	r3, #128	@ 0x80
 8002fb0:	045b      	lsls	r3, r3, #17
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d016      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fba:	4a22      	ldr	r2, [pc, #136]	@ (8003044 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	0019      	movs	r1, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fc4:	4b19      	ldr	r3, [pc, #100]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fce:	2380      	movs	r3, #128	@ 0x80
 8002fd0:	019b      	lsls	r3, r3, #6
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d106      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002fd6:	4b15      	ldr	r3, [pc, #84]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	4b14      	ldr	r3, [pc, #80]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fdc:	2180      	movs	r1, #128	@ 0x80
 8002fde:	0449      	lsls	r1, r1, #17
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	2380      	movs	r3, #128	@ 0x80
 8002fea:	049b      	lsls	r3, r3, #18
 8002fec:	4013      	ands	r3, r2
 8002fee:	d016      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff4:	4a10      	ldr	r2, [pc, #64]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	0019      	movs	r1, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003000:	430a      	orrs	r2, r1
 8003002:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003008:	2380      	movs	r3, #128	@ 0x80
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	429a      	cmp	r2, r3
 800300e:	d106      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003010:	4b06      	ldr	r3, [pc, #24]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	4b05      	ldr	r3, [pc, #20]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003016:	2180      	movs	r1, #128	@ 0x80
 8003018:	0449      	lsls	r1, r1, #17
 800301a:	430a      	orrs	r2, r1
 800301c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800301e:	2312      	movs	r3, #18
 8003020:	18fb      	adds	r3, r7, r3
 8003022:	781b      	ldrb	r3, [r3, #0]
}
 8003024:	0018      	movs	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	b006      	add	sp, #24
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40021000 	.word	0x40021000
 8003030:	efffffff 	.word	0xefffffff
 8003034:	fffff3ff 	.word	0xfffff3ff
 8003038:	fffffcff 	.word	0xfffffcff
 800303c:	fff3ffff 	.word	0xfff3ffff
 8003040:	ffcfffff 	.word	0xffcfffff
 8003044:	ffffcfff 	.word	0xffffcfff
 8003048:	ffff3fff 	.word	0xffff3fff
 800304c:	ffbfffff 	.word	0xffbfffff
 8003050:	feffffff 	.word	0xfeffffff

08003054 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e0a8      	b.n	80031b8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800306a:	2b00      	cmp	r3, #0
 800306c:	d109      	bne.n	8003082 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	2382      	movs	r3, #130	@ 0x82
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	429a      	cmp	r2, r3
 8003078:	d009      	beq.n	800308e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	61da      	str	r2, [r3, #28]
 8003080:	e005      	b.n	800308e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	225d      	movs	r2, #93	@ 0x5d
 8003098:	5c9b      	ldrb	r3, [r3, r2]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d107      	bne.n	80030b0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	225c      	movs	r2, #92	@ 0x5c
 80030a4:	2100      	movs	r1, #0
 80030a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	0018      	movs	r0, r3
 80030ac:	f7fe fa6c 	bl	8001588 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	225d      	movs	r2, #93	@ 0x5d
 80030b4:	2102      	movs	r1, #2
 80030b6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2140      	movs	r1, #64	@ 0x40
 80030c4:	438a      	bics	r2, r1
 80030c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	23e0      	movs	r3, #224	@ 0xe0
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d902      	bls.n	80030da <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	e002      	b.n	80030e0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030da:	2380      	movs	r3, #128	@ 0x80
 80030dc:	015b      	lsls	r3, r3, #5
 80030de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	23f0      	movs	r3, #240	@ 0xf0
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d008      	beq.n	80030fe <HAL_SPI_Init+0xaa>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	23e0      	movs	r3, #224	@ 0xe0
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d002      	beq.n	80030fe <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	2382      	movs	r3, #130	@ 0x82
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	401a      	ands	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6899      	ldr	r1, [r3, #8]
 800310c:	2384      	movs	r3, #132	@ 0x84
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	400b      	ands	r3, r1
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	2102      	movs	r1, #2
 800311a:	400b      	ands	r3, r1
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	2101      	movs	r1, #1
 8003124:	400b      	ands	r3, r1
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6999      	ldr	r1, [r3, #24]
 800312c:	2380      	movs	r3, #128	@ 0x80
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	400b      	ands	r3, r1
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	2138      	movs	r1, #56	@ 0x38
 800313a:	400b      	ands	r3, r1
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	2180      	movs	r1, #128	@ 0x80
 8003144:	400b      	ands	r3, r1
 8003146:	431a      	orrs	r2, r3
 8003148:	0011      	movs	r1, r2
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800314e:	2380      	movs	r3, #128	@ 0x80
 8003150:	019b      	lsls	r3, r3, #6
 8003152:	401a      	ands	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	0c1b      	lsrs	r3, r3, #16
 8003162:	2204      	movs	r2, #4
 8003164:	401a      	ands	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316a:	2110      	movs	r1, #16
 800316c:	400b      	ands	r3, r1
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003174:	2108      	movs	r1, #8
 8003176:	400b      	ands	r3, r1
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68d9      	ldr	r1, [r3, #12]
 800317e:	23f0      	movs	r3, #240	@ 0xf0
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	400b      	ands	r3, r1
 8003184:	431a      	orrs	r2, r3
 8003186:	0011      	movs	r1, r2
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	2380      	movs	r3, #128	@ 0x80
 800318c:	015b      	lsls	r3, r3, #5
 800318e:	401a      	ands	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	69da      	ldr	r2, [r3, #28]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4907      	ldr	r1, [pc, #28]	@ (80031c0 <HAL_SPI_Init+0x16c>)
 80031a4:	400a      	ands	r2, r1
 80031a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	225d      	movs	r2, #93	@ 0x5d
 80031b2:	2101      	movs	r1, #1
 80031b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	0018      	movs	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	b004      	add	sp, #16
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	fffff7ff 	.word	0xfffff7ff

080031c4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b088      	sub	sp, #32
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	603b      	str	r3, [r7, #0]
 80031d0:	1dbb      	adds	r3, r7, #6
 80031d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031d4:	231f      	movs	r3, #31
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	2200      	movs	r2, #0
 80031da:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	225c      	movs	r2, #92	@ 0x5c
 80031e0:	5c9b      	ldrb	r3, [r3, r2]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_SPI_Transmit+0x26>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e147      	b.n	800347a <HAL_SPI_Transmit+0x2b6>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	225c      	movs	r2, #92	@ 0x5c
 80031ee:	2101      	movs	r1, #1
 80031f0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031f2:	f7fe fbdd 	bl	80019b0 <HAL_GetTick>
 80031f6:	0003      	movs	r3, r0
 80031f8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80031fa:	2316      	movs	r3, #22
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	1dba      	adds	r2, r7, #6
 8003200:	8812      	ldrh	r2, [r2, #0]
 8003202:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	225d      	movs	r2, #93	@ 0x5d
 8003208:	5c9b      	ldrb	r3, [r3, r2]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b01      	cmp	r3, #1
 800320e:	d004      	beq.n	800321a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003210:	231f      	movs	r3, #31
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	2202      	movs	r2, #2
 8003216:	701a      	strb	r2, [r3, #0]
    goto error;
 8003218:	e128      	b.n	800346c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_SPI_Transmit+0x64>
 8003220:	1dbb      	adds	r3, r7, #6
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d104      	bne.n	8003232 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003228:	231f      	movs	r3, #31
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	2201      	movs	r2, #1
 800322e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003230:	e11c      	b.n	800346c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	225d      	movs	r2, #93	@ 0x5d
 8003236:	2103      	movs	r1, #3
 8003238:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1dba      	adds	r2, r7, #6
 800324a:	8812      	ldrh	r2, [r2, #0]
 800324c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1dba      	adds	r2, r7, #6
 8003252:	8812      	ldrh	r2, [r2, #0]
 8003254:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2244      	movs	r2, #68	@ 0x44
 8003260:	2100      	movs	r1, #0
 8003262:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2246      	movs	r2, #70	@ 0x46
 8003268:	2100      	movs	r1, #0
 800326a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	2380      	movs	r3, #128	@ 0x80
 800327e:	021b      	lsls	r3, r3, #8
 8003280:	429a      	cmp	r2, r3
 8003282:	d110      	bne.n	80032a6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2140      	movs	r1, #64	@ 0x40
 8003290:	438a      	bics	r2, r1
 8003292:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2180      	movs	r1, #128	@ 0x80
 80032a0:	01c9      	lsls	r1, r1, #7
 80032a2:	430a      	orrs	r2, r1
 80032a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2240      	movs	r2, #64	@ 0x40
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b40      	cmp	r3, #64	@ 0x40
 80032b2:	d007      	beq.n	80032c4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2140      	movs	r1, #64	@ 0x40
 80032c0:	430a      	orrs	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	23e0      	movs	r3, #224	@ 0xe0
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d952      	bls.n	8003376 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d004      	beq.n	80032e2 <HAL_SPI_Transmit+0x11e>
 80032d8:	2316      	movs	r3, #22
 80032da:	18fb      	adds	r3, r7, r3
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d143      	bne.n	800336a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e6:	881a      	ldrh	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f2:	1c9a      	adds	r2, r3, #2
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003306:	e030      	b.n	800336a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2202      	movs	r2, #2
 8003310:	4013      	ands	r3, r2
 8003312:	2b02      	cmp	r3, #2
 8003314:	d112      	bne.n	800333c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800331a:	881a      	ldrh	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003326:	1c9a      	adds	r2, r3, #2
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800333a:	e016      	b.n	800336a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800333c:	f7fe fb38 	bl	80019b0 <HAL_GetTick>
 8003340:	0002      	movs	r2, r0
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d802      	bhi.n	8003352 <HAL_SPI_Transmit+0x18e>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	3301      	adds	r3, #1
 8003350:	d102      	bne.n	8003358 <HAL_SPI_Transmit+0x194>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d108      	bne.n	800336a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003358:	231f      	movs	r3, #31
 800335a:	18fb      	adds	r3, r7, r3
 800335c:	2203      	movs	r2, #3
 800335e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	225d      	movs	r2, #93	@ 0x5d
 8003364:	2101      	movs	r1, #1
 8003366:	5499      	strb	r1, [r3, r2]
          goto error;
 8003368:	e080      	b.n	800346c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1c9      	bne.n	8003308 <HAL_SPI_Transmit+0x144>
 8003374:	e053      	b.n	800341e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d004      	beq.n	8003388 <HAL_SPI_Transmit+0x1c4>
 800337e:	2316      	movs	r3, #22
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d145      	bne.n	8003414 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	330c      	adds	r3, #12
 8003392:	7812      	ldrb	r2, [r2, #0]
 8003394:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	3b01      	subs	r3, #1
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80033ae:	e031      	b.n	8003414 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2202      	movs	r2, #2
 80033b8:	4013      	ands	r3, r2
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d113      	bne.n	80033e6 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	330c      	adds	r3, #12
 80033c8:	7812      	ldrb	r2, [r2, #0]
 80033ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033e4:	e016      	b.n	8003414 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033e6:	f7fe fae3 	bl	80019b0 <HAL_GetTick>
 80033ea:	0002      	movs	r2, r0
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d802      	bhi.n	80033fc <HAL_SPI_Transmit+0x238>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	3301      	adds	r3, #1
 80033fa:	d102      	bne.n	8003402 <HAL_SPI_Transmit+0x23e>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d108      	bne.n	8003414 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8003402:	231f      	movs	r3, #31
 8003404:	18fb      	adds	r3, r7, r3
 8003406:	2203      	movs	r2, #3
 8003408:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	225d      	movs	r2, #93	@ 0x5d
 800340e:	2101      	movs	r1, #1
 8003410:	5499      	strb	r1, [r3, r2]
          goto error;
 8003412:	e02b      	b.n	800346c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003418:	b29b      	uxth	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1c8      	bne.n	80033b0 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	6839      	ldr	r1, [r7, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	0018      	movs	r0, r3
 8003426:	f000 f95d 	bl	80036e4 <SPI_EndRxTxTransaction>
 800342a:	1e03      	subs	r3, r0, #0
 800342c:	d002      	beq.n	8003434 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2220      	movs	r2, #32
 8003432:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10a      	bne.n	8003452 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800343c:	2300      	movs	r3, #0
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003456:	2b00      	cmp	r3, #0
 8003458:	d004      	beq.n	8003464 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800345a:	231f      	movs	r3, #31
 800345c:	18fb      	adds	r3, r7, r3
 800345e:	2201      	movs	r2, #1
 8003460:	701a      	strb	r2, [r3, #0]
 8003462:	e003      	b.n	800346c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	225d      	movs	r2, #93	@ 0x5d
 8003468:	2101      	movs	r1, #1
 800346a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	225c      	movs	r2, #92	@ 0x5c
 8003470:	2100      	movs	r1, #0
 8003472:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003474:	231f      	movs	r3, #31
 8003476:	18fb      	adds	r3, r7, r3
 8003478:	781b      	ldrb	r3, [r3, #0]
}
 800347a:	0018      	movs	r0, r3
 800347c:	46bd      	mov	sp, r7
 800347e:	b008      	add	sp, #32
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	1dfb      	adds	r3, r7, #7
 8003492:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003494:	f7fe fa8c 	bl	80019b0 <HAL_GetTick>
 8003498:	0002      	movs	r2, r0
 800349a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349c:	1a9b      	subs	r3, r3, r2
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	18d3      	adds	r3, r2, r3
 80034a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034a4:	f7fe fa84 	bl	80019b0 <HAL_GetTick>
 80034a8:	0003      	movs	r3, r0
 80034aa:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034ac:	4b3a      	ldr	r3, [pc, #232]	@ (8003598 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	015b      	lsls	r3, r3, #5
 80034b2:	0d1b      	lsrs	r3, r3, #20
 80034b4:	69fa      	ldr	r2, [r7, #28]
 80034b6:	4353      	muls	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034ba:	e058      	b.n	800356e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	3301      	adds	r3, #1
 80034c0:	d055      	beq.n	800356e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034c2:	f7fe fa75 	bl	80019b0 <HAL_GetTick>
 80034c6:	0002      	movs	r2, r0
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d902      	bls.n	80034d8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d142      	bne.n	800355e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	21e0      	movs	r1, #224	@ 0xe0
 80034e4:	438a      	bics	r2, r1
 80034e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	2382      	movs	r3, #130	@ 0x82
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d113      	bne.n	800351c <SPI_WaitFlagStateUntilTimeout+0x98>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	2380      	movs	r3, #128	@ 0x80
 80034fa:	021b      	lsls	r3, r3, #8
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d005      	beq.n	800350c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	2380      	movs	r3, #128	@ 0x80
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	429a      	cmp	r2, r3
 800350a:	d107      	bne.n	800351c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2140      	movs	r1, #64	@ 0x40
 8003518:	438a      	bics	r2, r1
 800351a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003520:	2380      	movs	r3, #128	@ 0x80
 8003522:	019b      	lsls	r3, r3, #6
 8003524:	429a      	cmp	r2, r3
 8003526:	d110      	bne.n	800354a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	491a      	ldr	r1, [pc, #104]	@ (800359c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003534:	400a      	ands	r2, r1
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2180      	movs	r1, #128	@ 0x80
 8003544:	0189      	lsls	r1, r1, #6
 8003546:	430a      	orrs	r2, r1
 8003548:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	225d      	movs	r2, #93	@ 0x5d
 800354e:	2101      	movs	r1, #1
 8003550:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	225c      	movs	r2, #92	@ 0x5c
 8003556:	2100      	movs	r1, #0
 8003558:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e017      	b.n	800358e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	3b01      	subs	r3, #1
 800356c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	4013      	ands	r3, r2
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	425a      	negs	r2, r3
 800357e:	4153      	adcs	r3, r2
 8003580:	b2db      	uxtb	r3, r3
 8003582:	001a      	movs	r2, r3
 8003584:	1dfb      	adds	r3, r7, #7
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d197      	bne.n	80034bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	0018      	movs	r0, r3
 8003590:	46bd      	mov	sp, r7
 8003592:	b008      	add	sp, #32
 8003594:	bd80      	pop	{r7, pc}
 8003596:	46c0      	nop			@ (mov r8, r8)
 8003598:	20000000 	.word	0x20000000
 800359c:	ffffdfff 	.word	0xffffdfff

080035a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08a      	sub	sp, #40	@ 0x28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80035ae:	2317      	movs	r3, #23
 80035b0:	18fb      	adds	r3, r7, r3
 80035b2:	2200      	movs	r2, #0
 80035b4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80035b6:	f7fe f9fb 	bl	80019b0 <HAL_GetTick>
 80035ba:	0002      	movs	r2, r0
 80035bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	18d3      	adds	r3, r2, r3
 80035c4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80035c6:	f7fe f9f3 	bl	80019b0 <HAL_GetTick>
 80035ca:	0003      	movs	r3, r0
 80035cc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	330c      	adds	r3, #12
 80035d4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80035d6:	4b41      	ldr	r3, [pc, #260]	@ (80036dc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	0013      	movs	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	189b      	adds	r3, r3, r2
 80035e0:	00da      	lsls	r2, r3, #3
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	0d1b      	lsrs	r3, r3, #20
 80035e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e8:	4353      	muls	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80035ec:	e068      	b.n	80036c0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	23c0      	movs	r3, #192	@ 0xc0
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d10a      	bne.n	800360e <SPI_WaitFifoStateUntilTimeout+0x6e>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d107      	bne.n	800360e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	b2da      	uxtb	r2, r3
 8003604:	2117      	movs	r1, #23
 8003606:	187b      	adds	r3, r7, r1
 8003608:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800360a:	187b      	adds	r3, r7, r1
 800360c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	3301      	adds	r3, #1
 8003612:	d055      	beq.n	80036c0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003614:	f7fe f9cc 	bl	80019b0 <HAL_GetTick>
 8003618:	0002      	movs	r2, r0
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003620:	429a      	cmp	r2, r3
 8003622:	d902      	bls.n	800362a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003626:	2b00      	cmp	r3, #0
 8003628:	d142      	bne.n	80036b0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	21e0      	movs	r1, #224	@ 0xe0
 8003636:	438a      	bics	r2, r1
 8003638:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	2382      	movs	r3, #130	@ 0x82
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	429a      	cmp	r2, r3
 8003644:	d113      	bne.n	800366e <SPI_WaitFifoStateUntilTimeout+0xce>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	2380      	movs	r3, #128	@ 0x80
 800364c:	021b      	lsls	r3, r3, #8
 800364e:	429a      	cmp	r2, r3
 8003650:	d005      	beq.n	800365e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	2380      	movs	r3, #128	@ 0x80
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	429a      	cmp	r2, r3
 800365c:	d107      	bne.n	800366e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2140      	movs	r1, #64	@ 0x40
 800366a:	438a      	bics	r2, r1
 800366c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003672:	2380      	movs	r3, #128	@ 0x80
 8003674:	019b      	lsls	r3, r3, #6
 8003676:	429a      	cmp	r2, r3
 8003678:	d110      	bne.n	800369c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4916      	ldr	r1, [pc, #88]	@ (80036e0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003686:	400a      	ands	r2, r1
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2180      	movs	r1, #128	@ 0x80
 8003696:	0189      	lsls	r1, r1, #6
 8003698:	430a      	orrs	r2, r1
 800369a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	225d      	movs	r2, #93	@ 0x5d
 80036a0:	2101      	movs	r1, #1
 80036a2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	225c      	movs	r2, #92	@ 0x5c
 80036a8:	2100      	movs	r1, #0
 80036aa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e010      	b.n	80036d2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80036b6:	2300      	movs	r3, #0
 80036b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	3b01      	subs	r3, #1
 80036be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	4013      	ands	r3, r2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d18e      	bne.n	80035ee <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	0018      	movs	r0, r3
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b00a      	add	sp, #40	@ 0x28
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	20000000 	.word	0x20000000
 80036e0:	ffffdfff 	.word	0xffffdfff

080036e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	23c0      	movs	r3, #192	@ 0xc0
 80036f4:	0159      	lsls	r1, r3, #5
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	0013      	movs	r3, r2
 80036fe:	2200      	movs	r2, #0
 8003700:	f7ff ff4e 	bl	80035a0 <SPI_WaitFifoStateUntilTimeout>
 8003704:	1e03      	subs	r3, r0, #0
 8003706:	d007      	beq.n	8003718 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800370c:	2220      	movs	r2, #32
 800370e:	431a      	orrs	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e027      	b.n	8003768 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	0013      	movs	r3, r2
 8003722:	2200      	movs	r2, #0
 8003724:	2180      	movs	r1, #128	@ 0x80
 8003726:	f7ff fead 	bl	8003484 <SPI_WaitFlagStateUntilTimeout>
 800372a:	1e03      	subs	r3, r0, #0
 800372c:	d007      	beq.n	800373e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003732:	2220      	movs	r2, #32
 8003734:	431a      	orrs	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e014      	b.n	8003768 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	23c0      	movs	r3, #192	@ 0xc0
 8003742:	00d9      	lsls	r1, r3, #3
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	0013      	movs	r3, r2
 800374c:	2200      	movs	r2, #0
 800374e:	f7ff ff27 	bl	80035a0 <SPI_WaitFifoStateUntilTimeout>
 8003752:	1e03      	subs	r3, r0, #0
 8003754:	d007      	beq.n	8003766 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800375a:	2220      	movs	r2, #32
 800375c:	431a      	orrs	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e000      	b.n	8003768 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	0018      	movs	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	b004      	add	sp, #16
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e04a      	b.n	8003818 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	223d      	movs	r2, #61	@ 0x3d
 8003786:	5c9b      	ldrb	r3, [r3, r2]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d107      	bne.n	800379e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	223c      	movs	r2, #60	@ 0x3c
 8003792:	2100      	movs	r1, #0
 8003794:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	0018      	movs	r0, r3
 800379a:	f7fd ff3f 	bl	800161c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	223d      	movs	r2, #61	@ 0x3d
 80037a2:	2102      	movs	r1, #2
 80037a4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3304      	adds	r3, #4
 80037ae:	0019      	movs	r1, r3
 80037b0:	0010      	movs	r0, r2
 80037b2:	f000 f995 	bl	8003ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2248      	movs	r2, #72	@ 0x48
 80037ba:	2101      	movs	r1, #1
 80037bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	223e      	movs	r2, #62	@ 0x3e
 80037c2:	2101      	movs	r1, #1
 80037c4:	5499      	strb	r1, [r3, r2]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	223f      	movs	r2, #63	@ 0x3f
 80037ca:	2101      	movs	r1, #1
 80037cc:	5499      	strb	r1, [r3, r2]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2240      	movs	r2, #64	@ 0x40
 80037d2:	2101      	movs	r1, #1
 80037d4:	5499      	strb	r1, [r3, r2]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2241      	movs	r2, #65	@ 0x41
 80037da:	2101      	movs	r1, #1
 80037dc:	5499      	strb	r1, [r3, r2]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2242      	movs	r2, #66	@ 0x42
 80037e2:	2101      	movs	r1, #1
 80037e4:	5499      	strb	r1, [r3, r2]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2243      	movs	r2, #67	@ 0x43
 80037ea:	2101      	movs	r1, #1
 80037ec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2244      	movs	r2, #68	@ 0x44
 80037f2:	2101      	movs	r1, #1
 80037f4:	5499      	strb	r1, [r3, r2]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2245      	movs	r2, #69	@ 0x45
 80037fa:	2101      	movs	r1, #1
 80037fc:	5499      	strb	r1, [r3, r2]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2246      	movs	r2, #70	@ 0x46
 8003802:	2101      	movs	r1, #1
 8003804:	5499      	strb	r1, [r3, r2]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2247      	movs	r2, #71	@ 0x47
 800380a:	2101      	movs	r1, #1
 800380c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	223d      	movs	r2, #61	@ 0x3d
 8003812:	2101      	movs	r1, #1
 8003814:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	0018      	movs	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	b002      	add	sp, #8
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e04a      	b.n	80038c8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	223d      	movs	r2, #61	@ 0x3d
 8003836:	5c9b      	ldrb	r3, [r3, r2]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d107      	bne.n	800384e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	223c      	movs	r2, #60	@ 0x3c
 8003842:	2100      	movs	r1, #0
 8003844:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	0018      	movs	r0, r3
 800384a:	f000 f841 	bl	80038d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	223d      	movs	r2, #61	@ 0x3d
 8003852:	2102      	movs	r1, #2
 8003854:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3304      	adds	r3, #4
 800385e:	0019      	movs	r1, r3
 8003860:	0010      	movs	r0, r2
 8003862:	f000 f93d 	bl	8003ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2248      	movs	r2, #72	@ 0x48
 800386a:	2101      	movs	r1, #1
 800386c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	223e      	movs	r2, #62	@ 0x3e
 8003872:	2101      	movs	r1, #1
 8003874:	5499      	strb	r1, [r3, r2]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	223f      	movs	r2, #63	@ 0x3f
 800387a:	2101      	movs	r1, #1
 800387c:	5499      	strb	r1, [r3, r2]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2240      	movs	r2, #64	@ 0x40
 8003882:	2101      	movs	r1, #1
 8003884:	5499      	strb	r1, [r3, r2]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2241      	movs	r2, #65	@ 0x41
 800388a:	2101      	movs	r1, #1
 800388c:	5499      	strb	r1, [r3, r2]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2242      	movs	r2, #66	@ 0x42
 8003892:	2101      	movs	r1, #1
 8003894:	5499      	strb	r1, [r3, r2]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2243      	movs	r2, #67	@ 0x43
 800389a:	2101      	movs	r1, #1
 800389c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2244      	movs	r2, #68	@ 0x44
 80038a2:	2101      	movs	r1, #1
 80038a4:	5499      	strb	r1, [r3, r2]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2245      	movs	r2, #69	@ 0x45
 80038aa:	2101      	movs	r1, #1
 80038ac:	5499      	strb	r1, [r3, r2]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2246      	movs	r2, #70	@ 0x46
 80038b2:	2101      	movs	r1, #1
 80038b4:	5499      	strb	r1, [r3, r2]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2247      	movs	r2, #71	@ 0x47
 80038ba:	2101      	movs	r1, #1
 80038bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	223d      	movs	r2, #61	@ 0x3d
 80038c2:	2101      	movs	r1, #1
 80038c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	0018      	movs	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b002      	add	sp, #8
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038d8:	46c0      	nop			@ (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	b002      	add	sp, #8
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038ec:	2317      	movs	r3, #23
 80038ee:	18fb      	adds	r3, r7, r3
 80038f0:	2200      	movs	r2, #0
 80038f2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	223c      	movs	r2, #60	@ 0x3c
 80038f8:	5c9b      	ldrb	r3, [r3, r2]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_TIM_PWM_ConfigChannel+0x22>
 80038fe:	2302      	movs	r3, #2
 8003900:	e0e5      	b.n	8003ace <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	223c      	movs	r2, #60	@ 0x3c
 8003906:	2101      	movs	r1, #1
 8003908:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b14      	cmp	r3, #20
 800390e:	d900      	bls.n	8003912 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003910:	e0d1      	b.n	8003ab6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	009a      	lsls	r2, r3, #2
 8003916:	4b70      	ldr	r3, [pc, #448]	@ (8003ad8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003918:	18d3      	adds	r3, r2, r3
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	0011      	movs	r1, r2
 8003926:	0018      	movs	r0, r3
 8003928:	f000 f972 	bl	8003c10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699a      	ldr	r2, [r3, #24]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2108      	movs	r1, #8
 8003938:	430a      	orrs	r2, r1
 800393a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699a      	ldr	r2, [r3, #24]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2104      	movs	r1, #4
 8003948:	438a      	bics	r2, r1
 800394a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6999      	ldr	r1, [r3, #24]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	691a      	ldr	r2, [r3, #16]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	619a      	str	r2, [r3, #24]
      break;
 800395e:	e0af      	b.n	8003ac0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	0011      	movs	r1, r2
 8003968:	0018      	movs	r0, r3
 800396a:	f000 f9db 	bl	8003d24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699a      	ldr	r2, [r3, #24]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2180      	movs	r1, #128	@ 0x80
 800397a:	0109      	lsls	r1, r1, #4
 800397c:	430a      	orrs	r2, r1
 800397e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	699a      	ldr	r2, [r3, #24]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4954      	ldr	r1, [pc, #336]	@ (8003adc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800398c:	400a      	ands	r2, r1
 800398e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6999      	ldr	r1, [r3, #24]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	021a      	lsls	r2, r3, #8
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	619a      	str	r2, [r3, #24]
      break;
 80039a4:	e08c      	b.n	8003ac0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	0011      	movs	r1, r2
 80039ae:	0018      	movs	r0, r3
 80039b0:	f000 fa3c 	bl	8003e2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	69da      	ldr	r2, [r3, #28]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2108      	movs	r1, #8
 80039c0:	430a      	orrs	r2, r1
 80039c2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	69da      	ldr	r2, [r3, #28]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2104      	movs	r1, #4
 80039d0:	438a      	bics	r2, r1
 80039d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	69d9      	ldr	r1, [r3, #28]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	61da      	str	r2, [r3, #28]
      break;
 80039e6:	e06b      	b.n	8003ac0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	0011      	movs	r1, r2
 80039f0:	0018      	movs	r0, r3
 80039f2:	f000 faa3 	bl	8003f3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69da      	ldr	r2, [r3, #28]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2180      	movs	r1, #128	@ 0x80
 8003a02:	0109      	lsls	r1, r1, #4
 8003a04:	430a      	orrs	r2, r1
 8003a06:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	69da      	ldr	r2, [r3, #28]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4932      	ldr	r1, [pc, #200]	@ (8003adc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003a14:	400a      	ands	r2, r1
 8003a16:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	69d9      	ldr	r1, [r3, #28]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	021a      	lsls	r2, r3, #8
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	61da      	str	r2, [r3, #28]
      break;
 8003a2c:	e048      	b.n	8003ac0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	0011      	movs	r1, r2
 8003a36:	0018      	movs	r0, r3
 8003a38:	f000 faea 	bl	8004010 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2108      	movs	r1, #8
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2104      	movs	r1, #4
 8003a58:	438a      	bics	r2, r1
 8003a5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003a6e:	e027      	b.n	8003ac0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	0011      	movs	r1, r2
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f000 fb29 	bl	80040d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2180      	movs	r1, #128	@ 0x80
 8003a8a:	0109      	lsls	r1, r1, #4
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4910      	ldr	r1, [pc, #64]	@ (8003adc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003a9c:	400a      	ands	r2, r1
 8003a9e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	021a      	lsls	r2, r3, #8
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003ab4:	e004      	b.n	8003ac0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003ab6:	2317      	movs	r3, #23
 8003ab8:	18fb      	adds	r3, r7, r3
 8003aba:	2201      	movs	r2, #1
 8003abc:	701a      	strb	r2, [r3, #0]
      break;
 8003abe:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	223c      	movs	r2, #60	@ 0x3c
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	5499      	strb	r1, [r3, r2]

  return status;
 8003ac8:	2317      	movs	r3, #23
 8003aca:	18fb      	adds	r3, r7, r3
 8003acc:	781b      	ldrb	r3, [r3, #0]
}
 8003ace:	0018      	movs	r0, r3
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	b006      	add	sp, #24
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	46c0      	nop			@ (mov r8, r8)
 8003ad8:	080058d0 	.word	0x080058d0
 8003adc:	fffffbff 	.word	0xfffffbff

08003ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a3f      	ldr	r2, [pc, #252]	@ (8003bf0 <TIM_Base_SetConfig+0x110>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d00c      	beq.n	8003b12 <TIM_Base_SetConfig+0x32>
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	2380      	movs	r3, #128	@ 0x80
 8003afc:	05db      	lsls	r3, r3, #23
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d007      	beq.n	8003b12 <TIM_Base_SetConfig+0x32>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a3b      	ldr	r2, [pc, #236]	@ (8003bf4 <TIM_Base_SetConfig+0x114>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d003      	beq.n	8003b12 <TIM_Base_SetConfig+0x32>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a3a      	ldr	r2, [pc, #232]	@ (8003bf8 <TIM_Base_SetConfig+0x118>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d108      	bne.n	8003b24 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2270      	movs	r2, #112	@ 0x70
 8003b16:	4393      	bics	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a32      	ldr	r2, [pc, #200]	@ (8003bf0 <TIM_Base_SetConfig+0x110>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d01c      	beq.n	8003b66 <TIM_Base_SetConfig+0x86>
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	2380      	movs	r3, #128	@ 0x80
 8003b30:	05db      	lsls	r3, r3, #23
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d017      	beq.n	8003b66 <TIM_Base_SetConfig+0x86>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a2e      	ldr	r2, [pc, #184]	@ (8003bf4 <TIM_Base_SetConfig+0x114>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d013      	beq.n	8003b66 <TIM_Base_SetConfig+0x86>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a2d      	ldr	r2, [pc, #180]	@ (8003bf8 <TIM_Base_SetConfig+0x118>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d00f      	beq.n	8003b66 <TIM_Base_SetConfig+0x86>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a2c      	ldr	r2, [pc, #176]	@ (8003bfc <TIM_Base_SetConfig+0x11c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d00b      	beq.n	8003b66 <TIM_Base_SetConfig+0x86>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a2b      	ldr	r2, [pc, #172]	@ (8003c00 <TIM_Base_SetConfig+0x120>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d007      	beq.n	8003b66 <TIM_Base_SetConfig+0x86>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a2a      	ldr	r2, [pc, #168]	@ (8003c04 <TIM_Base_SetConfig+0x124>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d003      	beq.n	8003b66 <TIM_Base_SetConfig+0x86>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a29      	ldr	r2, [pc, #164]	@ (8003c08 <TIM_Base_SetConfig+0x128>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d108      	bne.n	8003b78 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4a28      	ldr	r2, [pc, #160]	@ (8003c0c <TIM_Base_SetConfig+0x12c>)
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2280      	movs	r2, #128	@ 0x80
 8003b7c:	4393      	bics	r3, r2
 8003b7e:	001a      	movs	r2, r3
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a13      	ldr	r2, [pc, #76]	@ (8003bf0 <TIM_Base_SetConfig+0x110>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d00b      	beq.n	8003bbe <TIM_Base_SetConfig+0xde>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a15      	ldr	r2, [pc, #84]	@ (8003c00 <TIM_Base_SetConfig+0x120>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d007      	beq.n	8003bbe <TIM_Base_SetConfig+0xde>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a14      	ldr	r2, [pc, #80]	@ (8003c04 <TIM_Base_SetConfig+0x124>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d003      	beq.n	8003bbe <TIM_Base_SetConfig+0xde>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a13      	ldr	r2, [pc, #76]	@ (8003c08 <TIM_Base_SetConfig+0x128>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d103      	bne.n	8003bc6 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	691a      	ldr	r2, [r3, #16]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d106      	bne.n	8003be6 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	4393      	bics	r3, r2
 8003be0:	001a      	movs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	611a      	str	r2, [r3, #16]
  }
}
 8003be6:	46c0      	nop			@ (mov r8, r8)
 8003be8:	46bd      	mov	sp, r7
 8003bea:	b004      	add	sp, #16
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	46c0      	nop			@ (mov r8, r8)
 8003bf0:	40012c00 	.word	0x40012c00
 8003bf4:	40000400 	.word	0x40000400
 8003bf8:	40000800 	.word	0x40000800
 8003bfc:	40002000 	.word	0x40002000
 8003c00:	40014000 	.word	0x40014000
 8003c04:	40014400 	.word	0x40014400
 8003c08:	40014800 	.word	0x40014800
 8003c0c:	fffffcff 	.word	0xfffffcff

08003c10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	2201      	movs	r2, #1
 8003c26:	4393      	bics	r3, r2
 8003c28:	001a      	movs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4a32      	ldr	r2, [pc, #200]	@ (8003d08 <TIM_OC1_SetConfig+0xf8>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2203      	movs	r2, #3
 8003c46:	4393      	bics	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	2202      	movs	r2, #2
 8003c58:	4393      	bics	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a28      	ldr	r2, [pc, #160]	@ (8003d0c <TIM_OC1_SetConfig+0xfc>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00b      	beq.n	8003c86 <TIM_OC1_SetConfig+0x76>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a27      	ldr	r2, [pc, #156]	@ (8003d10 <TIM_OC1_SetConfig+0x100>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d007      	beq.n	8003c86 <TIM_OC1_SetConfig+0x76>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a26      	ldr	r2, [pc, #152]	@ (8003d14 <TIM_OC1_SetConfig+0x104>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d003      	beq.n	8003c86 <TIM_OC1_SetConfig+0x76>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a25      	ldr	r2, [pc, #148]	@ (8003d18 <TIM_OC1_SetConfig+0x108>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d10c      	bne.n	8003ca0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2208      	movs	r2, #8
 8003c8a:	4393      	bics	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2204      	movs	r2, #4
 8003c9c:	4393      	bics	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8003d0c <TIM_OC1_SetConfig+0xfc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00b      	beq.n	8003cc0 <TIM_OC1_SetConfig+0xb0>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a19      	ldr	r2, [pc, #100]	@ (8003d10 <TIM_OC1_SetConfig+0x100>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d007      	beq.n	8003cc0 <TIM_OC1_SetConfig+0xb0>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a18      	ldr	r2, [pc, #96]	@ (8003d14 <TIM_OC1_SetConfig+0x104>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d003      	beq.n	8003cc0 <TIM_OC1_SetConfig+0xb0>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a17      	ldr	r2, [pc, #92]	@ (8003d18 <TIM_OC1_SetConfig+0x108>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d111      	bne.n	8003ce4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	4a16      	ldr	r2, [pc, #88]	@ (8003d1c <TIM_OC1_SetConfig+0x10c>)
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	4a15      	ldr	r2, [pc, #84]	@ (8003d20 <TIM_OC1_SetConfig+0x110>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685a      	ldr	r2, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	621a      	str	r2, [r3, #32]
}
 8003cfe:	46c0      	nop			@ (mov r8, r8)
 8003d00:	46bd      	mov	sp, r7
 8003d02:	b006      	add	sp, #24
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	46c0      	nop			@ (mov r8, r8)
 8003d08:	fffeff8f 	.word	0xfffeff8f
 8003d0c:	40012c00 	.word	0x40012c00
 8003d10:	40014000 	.word	0x40014000
 8003d14:	40014400 	.word	0x40014400
 8003d18:	40014800 	.word	0x40014800
 8003d1c:	fffffeff 	.word	0xfffffeff
 8003d20:	fffffdff 	.word	0xfffffdff

08003d24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	2210      	movs	r2, #16
 8003d3a:	4393      	bics	r3, r2
 8003d3c:	001a      	movs	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4a2e      	ldr	r2, [pc, #184]	@ (8003e0c <TIM_OC2_SetConfig+0xe8>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4a2d      	ldr	r2, [pc, #180]	@ (8003e10 <TIM_OC2_SetConfig+0xec>)
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	021b      	lsls	r3, r3, #8
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	4393      	bics	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a24      	ldr	r2, [pc, #144]	@ (8003e14 <TIM_OC2_SetConfig+0xf0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d10d      	bne.n	8003da2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2280      	movs	r2, #128	@ 0x80
 8003d8a:	4393      	bics	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2240      	movs	r2, #64	@ 0x40
 8003d9e:	4393      	bics	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a1b      	ldr	r2, [pc, #108]	@ (8003e14 <TIM_OC2_SetConfig+0xf0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00b      	beq.n	8003dc2 <TIM_OC2_SetConfig+0x9e>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a1a      	ldr	r2, [pc, #104]	@ (8003e18 <TIM_OC2_SetConfig+0xf4>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d007      	beq.n	8003dc2 <TIM_OC2_SetConfig+0x9e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a19      	ldr	r2, [pc, #100]	@ (8003e1c <TIM_OC2_SetConfig+0xf8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d003      	beq.n	8003dc2 <TIM_OC2_SetConfig+0x9e>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a18      	ldr	r2, [pc, #96]	@ (8003e20 <TIM_OC2_SetConfig+0xfc>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d113      	bne.n	8003dea <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	4a17      	ldr	r2, [pc, #92]	@ (8003e24 <TIM_OC2_SetConfig+0x100>)
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4a16      	ldr	r2, [pc, #88]	@ (8003e28 <TIM_OC2_SetConfig+0x104>)
 8003dce:	4013      	ands	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	621a      	str	r2, [r3, #32]
}
 8003e04:	46c0      	nop			@ (mov r8, r8)
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b006      	add	sp, #24
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	feff8fff 	.word	0xfeff8fff
 8003e10:	fffffcff 	.word	0xfffffcff
 8003e14:	40012c00 	.word	0x40012c00
 8003e18:	40014000 	.word	0x40014000
 8003e1c:	40014400 	.word	0x40014400
 8003e20:	40014800 	.word	0x40014800
 8003e24:	fffffbff 	.word	0xfffffbff
 8003e28:	fffff7ff 	.word	0xfffff7ff

08003e2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	4a33      	ldr	r2, [pc, #204]	@ (8003f10 <TIM_OC3_SetConfig+0xe4>)
 8003e42:	401a      	ands	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4a2f      	ldr	r2, [pc, #188]	@ (8003f14 <TIM_OC3_SetConfig+0xe8>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2203      	movs	r2, #3
 8003e60:	4393      	bics	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	4a29      	ldr	r2, [pc, #164]	@ (8003f18 <TIM_OC3_SetConfig+0xec>)
 8003e72:	4013      	ands	r3, r2
 8003e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a25      	ldr	r2, [pc, #148]	@ (8003f1c <TIM_OC3_SetConfig+0xf0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d10d      	bne.n	8003ea6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	4a24      	ldr	r2, [pc, #144]	@ (8003f20 <TIM_OC3_SetConfig+0xf4>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	021b      	lsls	r3, r3, #8
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	4a20      	ldr	r2, [pc, #128]	@ (8003f24 <TIM_OC3_SetConfig+0xf8>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f1c <TIM_OC3_SetConfig+0xf0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00b      	beq.n	8003ec6 <TIM_OC3_SetConfig+0x9a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f28 <TIM_OC3_SetConfig+0xfc>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d007      	beq.n	8003ec6 <TIM_OC3_SetConfig+0x9a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f2c <TIM_OC3_SetConfig+0x100>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d003      	beq.n	8003ec6 <TIM_OC3_SetConfig+0x9a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a1b      	ldr	r2, [pc, #108]	@ (8003f30 <TIM_OC3_SetConfig+0x104>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d113      	bne.n	8003eee <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4a1a      	ldr	r2, [pc, #104]	@ (8003f34 <TIM_OC3_SetConfig+0x108>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	4a19      	ldr	r2, [pc, #100]	@ (8003f38 <TIM_OC3_SetConfig+0x10c>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	621a      	str	r2, [r3, #32]
}
 8003f08:	46c0      	nop			@ (mov r8, r8)
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	b006      	add	sp, #24
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	fffffeff 	.word	0xfffffeff
 8003f14:	fffeff8f 	.word	0xfffeff8f
 8003f18:	fffffdff 	.word	0xfffffdff
 8003f1c:	40012c00 	.word	0x40012c00
 8003f20:	fffff7ff 	.word	0xfffff7ff
 8003f24:	fffffbff 	.word	0xfffffbff
 8003f28:	40014000 	.word	0x40014000
 8003f2c:	40014400 	.word	0x40014400
 8003f30:	40014800 	.word	0x40014800
 8003f34:	ffffefff 	.word	0xffffefff
 8003f38:	ffffdfff 	.word	0xffffdfff

08003f3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	4a26      	ldr	r2, [pc, #152]	@ (8003fec <TIM_OC4_SetConfig+0xb0>)
 8003f52:	401a      	ands	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4a22      	ldr	r2, [pc, #136]	@ (8003ff0 <TIM_OC4_SetConfig+0xb4>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4a21      	ldr	r2, [pc, #132]	@ (8003ff4 <TIM_OC4_SetConfig+0xb8>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	021b      	lsls	r3, r3, #8
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4a1d      	ldr	r2, [pc, #116]	@ (8003ff8 <TIM_OC4_SetConfig+0xbc>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	031b      	lsls	r3, r3, #12
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a19      	ldr	r2, [pc, #100]	@ (8003ffc <TIM_OC4_SetConfig+0xc0>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00b      	beq.n	8003fb4 <TIM_OC4_SetConfig+0x78>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a18      	ldr	r2, [pc, #96]	@ (8004000 <TIM_OC4_SetConfig+0xc4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d007      	beq.n	8003fb4 <TIM_OC4_SetConfig+0x78>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a17      	ldr	r2, [pc, #92]	@ (8004004 <TIM_OC4_SetConfig+0xc8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d003      	beq.n	8003fb4 <TIM_OC4_SetConfig+0x78>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a16      	ldr	r2, [pc, #88]	@ (8004008 <TIM_OC4_SetConfig+0xcc>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d109      	bne.n	8003fc8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	4a15      	ldr	r2, [pc, #84]	@ (800400c <TIM_OC4_SetConfig+0xd0>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	019b      	lsls	r3, r3, #6
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	621a      	str	r2, [r3, #32]
}
 8003fe2:	46c0      	nop			@ (mov r8, r8)
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	b006      	add	sp, #24
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	46c0      	nop			@ (mov r8, r8)
 8003fec:	ffffefff 	.word	0xffffefff
 8003ff0:	feff8fff 	.word	0xfeff8fff
 8003ff4:	fffffcff 	.word	0xfffffcff
 8003ff8:	ffffdfff 	.word	0xffffdfff
 8003ffc:	40012c00 	.word	0x40012c00
 8004000:	40014000 	.word	0x40014000
 8004004:	40014400 	.word	0x40014400
 8004008:	40014800 	.word	0x40014800
 800400c:	ffffbfff 	.word	0xffffbfff

08004010 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	4a23      	ldr	r2, [pc, #140]	@ (80040b4 <TIM_OC5_SetConfig+0xa4>)
 8004026:	401a      	ands	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4a1f      	ldr	r2, [pc, #124]	@ (80040b8 <TIM_OC5_SetConfig+0xa8>)
 800403c:	4013      	ands	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	4a1b      	ldr	r2, [pc, #108]	@ (80040bc <TIM_OC5_SetConfig+0xac>)
 800404e:	4013      	ands	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	041b      	lsls	r3, r3, #16
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a17      	ldr	r2, [pc, #92]	@ (80040c0 <TIM_OC5_SetConfig+0xb0>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00b      	beq.n	800407e <TIM_OC5_SetConfig+0x6e>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a16      	ldr	r2, [pc, #88]	@ (80040c4 <TIM_OC5_SetConfig+0xb4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d007      	beq.n	800407e <TIM_OC5_SetConfig+0x6e>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a15      	ldr	r2, [pc, #84]	@ (80040c8 <TIM_OC5_SetConfig+0xb8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d003      	beq.n	800407e <TIM_OC5_SetConfig+0x6e>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a14      	ldr	r2, [pc, #80]	@ (80040cc <TIM_OC5_SetConfig+0xbc>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d109      	bne.n	8004092 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	4a0c      	ldr	r2, [pc, #48]	@ (80040b4 <TIM_OC5_SetConfig+0xa4>)
 8004082:	4013      	ands	r3, r2
 8004084:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	021b      	lsls	r3, r3, #8
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	4313      	orrs	r3, r2
 8004090:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	621a      	str	r2, [r3, #32]
}
 80040ac:	46c0      	nop			@ (mov r8, r8)
 80040ae:	46bd      	mov	sp, r7
 80040b0:	b006      	add	sp, #24
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	fffeffff 	.word	0xfffeffff
 80040b8:	fffeff8f 	.word	0xfffeff8f
 80040bc:	fffdffff 	.word	0xfffdffff
 80040c0:	40012c00 	.word	0x40012c00
 80040c4:	40014000 	.word	0x40014000
 80040c8:	40014400 	.word	0x40014400
 80040cc:	40014800 	.word	0x40014800

080040d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	4a24      	ldr	r2, [pc, #144]	@ (8004178 <TIM_OC6_SetConfig+0xa8>)
 80040e6:	401a      	ands	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4a20      	ldr	r2, [pc, #128]	@ (800417c <TIM_OC6_SetConfig+0xac>)
 80040fc:	4013      	ands	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	021b      	lsls	r3, r3, #8
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4313      	orrs	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	4a1c      	ldr	r2, [pc, #112]	@ (8004180 <TIM_OC6_SetConfig+0xb0>)
 8004110:	4013      	ands	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	051b      	lsls	r3, r3, #20
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a18      	ldr	r2, [pc, #96]	@ (8004184 <TIM_OC6_SetConfig+0xb4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00b      	beq.n	8004140 <TIM_OC6_SetConfig+0x70>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a17      	ldr	r2, [pc, #92]	@ (8004188 <TIM_OC6_SetConfig+0xb8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d007      	beq.n	8004140 <TIM_OC6_SetConfig+0x70>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a16      	ldr	r2, [pc, #88]	@ (800418c <TIM_OC6_SetConfig+0xbc>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d003      	beq.n	8004140 <TIM_OC6_SetConfig+0x70>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a15      	ldr	r2, [pc, #84]	@ (8004190 <TIM_OC6_SetConfig+0xc0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d109      	bne.n	8004154 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	4a14      	ldr	r2, [pc, #80]	@ (8004194 <TIM_OC6_SetConfig+0xc4>)
 8004144:	4013      	ands	r3, r2
 8004146:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	029b      	lsls	r3, r3, #10
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	621a      	str	r2, [r3, #32]
}
 800416e:	46c0      	nop			@ (mov r8, r8)
 8004170:	46bd      	mov	sp, r7
 8004172:	b006      	add	sp, #24
 8004174:	bd80      	pop	{r7, pc}
 8004176:	46c0      	nop			@ (mov r8, r8)
 8004178:	ffefffff 	.word	0xffefffff
 800417c:	feff8fff 	.word	0xfeff8fff
 8004180:	ffdfffff 	.word	0xffdfffff
 8004184:	40012c00 	.word	0x40012c00
 8004188:	40014000 	.word	0x40014000
 800418c:	40014400 	.word	0x40014400
 8004190:	40014800 	.word	0x40014800
 8004194:	fffbffff 	.word	0xfffbffff

08004198 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	223c      	movs	r2, #60	@ 0x3c
 80041aa:	5c9b      	ldrb	r3, [r3, r2]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d101      	bne.n	80041b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80041b0:	2302      	movs	r3, #2
 80041b2:	e06f      	b.n	8004294 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	223c      	movs	r2, #60	@ 0x3c
 80041b8:	2101      	movs	r1, #1
 80041ba:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	22ff      	movs	r2, #255	@ 0xff
 80041c0:	4393      	bics	r3, r2
 80041c2:	001a      	movs	r2, r3
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4a33      	ldr	r2, [pc, #204]	@ (800429c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80041d0:	401a      	ands	r2, r3
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4a30      	ldr	r2, [pc, #192]	@ (80042a0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80041de:	401a      	ands	r2, r3
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4a2e      	ldr	r2, [pc, #184]	@ (80042a4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80041ec:	401a      	ands	r2, r3
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4a2b      	ldr	r2, [pc, #172]	@ (80042a8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80041fa:	401a      	ands	r2, r3
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4a29      	ldr	r2, [pc, #164]	@ (80042ac <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004208:	401a      	ands	r2, r3
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4a26      	ldr	r2, [pc, #152]	@ (80042b0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004216:	401a      	ands	r2, r3
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421c:	4313      	orrs	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4a24      	ldr	r2, [pc, #144]	@ (80042b4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004224:	401a      	ands	r2, r3
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	041b      	lsls	r3, r3, #16
 800422c:	4313      	orrs	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4a21      	ldr	r2, [pc, #132]	@ (80042b8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004234:	401a      	ands	r2, r3
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a1e      	ldr	r2, [pc, #120]	@ (80042bc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d11c      	bne.n	8004282 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4a1d      	ldr	r2, [pc, #116]	@ (80042c0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800424c:	401a      	ands	r2, r3
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004252:	051b      	lsls	r3, r3, #20
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4a1a      	ldr	r2, [pc, #104]	@ (80042c4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800425c:	401a      	ands	r2, r3
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4a17      	ldr	r2, [pc, #92]	@ (80042c8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800426a:	401a      	ands	r2, r3
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004270:	4313      	orrs	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4a15      	ldr	r2, [pc, #84]	@ (80042cc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004278:	401a      	ands	r2, r3
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	223c      	movs	r2, #60	@ 0x3c
 800428e:	2100      	movs	r1, #0
 8004290:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	0018      	movs	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	b004      	add	sp, #16
 800429a:	bd80      	pop	{r7, pc}
 800429c:	fffffcff 	.word	0xfffffcff
 80042a0:	fffffbff 	.word	0xfffffbff
 80042a4:	fffff7ff 	.word	0xfffff7ff
 80042a8:	ffffefff 	.word	0xffffefff
 80042ac:	ffffdfff 	.word	0xffffdfff
 80042b0:	ffffbfff 	.word	0xffffbfff
 80042b4:	fff0ffff 	.word	0xfff0ffff
 80042b8:	efffffff 	.word	0xefffffff
 80042bc:	40012c00 	.word	0x40012c00
 80042c0:	ff0fffff 	.word	0xff0fffff
 80042c4:	feffffff 	.word	0xfeffffff
 80042c8:	fdffffff 	.word	0xfdffffff
 80042cc:	dfffffff 	.word	0xdfffffff

080042d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e046      	b.n	8004370 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2288      	movs	r2, #136	@ 0x88
 80042e6:	589b      	ldr	r3, [r3, r2]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d107      	bne.n	80042fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2284      	movs	r2, #132	@ 0x84
 80042f0:	2100      	movs	r1, #0
 80042f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	0018      	movs	r0, r3
 80042f8:	f7fd f9ec 	bl	80016d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2288      	movs	r2, #136	@ 0x88
 8004300:	2124      	movs	r1, #36	@ 0x24
 8004302:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2101      	movs	r1, #1
 8004310:	438a      	bics	r2, r1
 8004312:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	0018      	movs	r0, r3
 8004320:	f000 fc68 	bl	8004bf4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	0018      	movs	r0, r3
 8004328:	f000 f90e 	bl	8004548 <UART_SetConfig>
 800432c:	0003      	movs	r3, r0
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e01c      	b.n	8004370 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	490d      	ldr	r1, [pc, #52]	@ (8004378 <HAL_UART_Init+0xa8>)
 8004342:	400a      	ands	r2, r1
 8004344:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	212a      	movs	r1, #42	@ 0x2a
 8004352:	438a      	bics	r2, r1
 8004354:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2101      	movs	r1, #1
 8004362:	430a      	orrs	r2, r1
 8004364:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	0018      	movs	r0, r3
 800436a:	f000 fcf7 	bl	8004d5c <UART_CheckIdleState>
 800436e:	0003      	movs	r3, r0
}
 8004370:	0018      	movs	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	b002      	add	sp, #8
 8004376:	bd80      	pop	{r7, pc}
 8004378:	ffffb7ff 	.word	0xffffb7ff

0800437c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08a      	sub	sp, #40	@ 0x28
 8004380:	af02      	add	r7, sp, #8
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	1dbb      	adds	r3, r7, #6
 800438a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	228c      	movs	r2, #140	@ 0x8c
 8004390:	589b      	ldr	r3, [r3, r2]
 8004392:	2b20      	cmp	r3, #32
 8004394:	d000      	beq.n	8004398 <HAL_UART_Receive+0x1c>
 8004396:	e0d0      	b.n	800453a <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_UART_Receive+0x2a>
 800439e:	1dbb      	adds	r3, r7, #6
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e0c8      	b.n	800453c <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	2380      	movs	r3, #128	@ 0x80
 80043b0:	015b      	lsls	r3, r3, #5
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d109      	bne.n	80043ca <HAL_UART_Receive+0x4e>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d105      	bne.n	80043ca <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2201      	movs	r2, #1
 80043c2:	4013      	ands	r3, r2
 80043c4:	d001      	beq.n	80043ca <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e0b8      	b.n	800453c <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2290      	movs	r2, #144	@ 0x90
 80043ce:	2100      	movs	r1, #0
 80043d0:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	228c      	movs	r2, #140	@ 0x8c
 80043d6:	2122      	movs	r1, #34	@ 0x22
 80043d8:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043e0:	f7fd fae6 	bl	80019b0 <HAL_GetTick>
 80043e4:	0003      	movs	r3, r0
 80043e6:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	1dba      	adds	r2, r7, #6
 80043ec:	215c      	movs	r1, #92	@ 0x5c
 80043ee:	8812      	ldrh	r2, [r2, #0]
 80043f0:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1dba      	adds	r2, r7, #6
 80043f6:	215e      	movs	r1, #94	@ 0x5e
 80043f8:	8812      	ldrh	r2, [r2, #0]
 80043fa:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	2380      	movs	r3, #128	@ 0x80
 8004402:	015b      	lsls	r3, r3, #5
 8004404:	429a      	cmp	r2, r3
 8004406:	d10d      	bne.n	8004424 <HAL_UART_Receive+0xa8>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d104      	bne.n	800441a <HAL_UART_Receive+0x9e>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2260      	movs	r2, #96	@ 0x60
 8004414:	494b      	ldr	r1, [pc, #300]	@ (8004544 <HAL_UART_Receive+0x1c8>)
 8004416:	5299      	strh	r1, [r3, r2]
 8004418:	e02e      	b.n	8004478 <HAL_UART_Receive+0xfc>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2260      	movs	r2, #96	@ 0x60
 800441e:	21ff      	movs	r1, #255	@ 0xff
 8004420:	5299      	strh	r1, [r3, r2]
 8004422:	e029      	b.n	8004478 <HAL_UART_Receive+0xfc>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10d      	bne.n	8004448 <HAL_UART_Receive+0xcc>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d104      	bne.n	800443e <HAL_UART_Receive+0xc2>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2260      	movs	r2, #96	@ 0x60
 8004438:	21ff      	movs	r1, #255	@ 0xff
 800443a:	5299      	strh	r1, [r3, r2]
 800443c:	e01c      	b.n	8004478 <HAL_UART_Receive+0xfc>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2260      	movs	r2, #96	@ 0x60
 8004442:	217f      	movs	r1, #127	@ 0x7f
 8004444:	5299      	strh	r1, [r3, r2]
 8004446:	e017      	b.n	8004478 <HAL_UART_Receive+0xfc>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	2380      	movs	r3, #128	@ 0x80
 800444e:	055b      	lsls	r3, r3, #21
 8004450:	429a      	cmp	r2, r3
 8004452:	d10d      	bne.n	8004470 <HAL_UART_Receive+0xf4>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d104      	bne.n	8004466 <HAL_UART_Receive+0xea>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2260      	movs	r2, #96	@ 0x60
 8004460:	217f      	movs	r1, #127	@ 0x7f
 8004462:	5299      	strh	r1, [r3, r2]
 8004464:	e008      	b.n	8004478 <HAL_UART_Receive+0xfc>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2260      	movs	r2, #96	@ 0x60
 800446a:	213f      	movs	r1, #63	@ 0x3f
 800446c:	5299      	strh	r1, [r3, r2]
 800446e:	e003      	b.n	8004478 <HAL_UART_Receive+0xfc>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2260      	movs	r2, #96	@ 0x60
 8004474:	2100      	movs	r1, #0
 8004476:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004478:	2312      	movs	r3, #18
 800447a:	18fb      	adds	r3, r7, r3
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	2160      	movs	r1, #96	@ 0x60
 8004480:	5a52      	ldrh	r2, [r2, r1]
 8004482:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	2380      	movs	r3, #128	@ 0x80
 800448a:	015b      	lsls	r3, r3, #5
 800448c:	429a      	cmp	r2, r3
 800448e:	d108      	bne.n	80044a2 <HAL_UART_Receive+0x126>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d104      	bne.n	80044a2 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8004498:	2300      	movs	r3, #0
 800449a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	61bb      	str	r3, [r7, #24]
 80044a0:	e003      	b.n	80044aa <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80044aa:	e03a      	b.n	8004522 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	0013      	movs	r3, r2
 80044b6:	2200      	movs	r2, #0
 80044b8:	2120      	movs	r1, #32
 80044ba:	f000 fcf9 	bl	8004eb0 <UART_WaitOnFlagUntilTimeout>
 80044be:	1e03      	subs	r3, r0, #0
 80044c0:	d005      	beq.n	80044ce <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	228c      	movs	r2, #140	@ 0x8c
 80044c6:	2120      	movs	r1, #32
 80044c8:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e036      	b.n	800453c <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10e      	bne.n	80044f2 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044da:	b29b      	uxth	r3, r3
 80044dc:	2212      	movs	r2, #18
 80044de:	18ba      	adds	r2, r7, r2
 80044e0:	8812      	ldrh	r2, [r2, #0]
 80044e2:	4013      	ands	r3, r2
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	3302      	adds	r3, #2
 80044ee:	61bb      	str	r3, [r7, #24]
 80044f0:	e00e      	b.n	8004510 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2212      	movs	r2, #18
 80044fc:	18ba      	adds	r2, r7, r2
 80044fe:	8812      	ldrh	r2, [r2, #0]
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	4013      	ands	r3, r2
 8004504:	b2da      	uxtb	r2, r3
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	3301      	adds	r3, #1
 800450e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	225e      	movs	r2, #94	@ 0x5e
 8004514:	5a9b      	ldrh	r3, [r3, r2]
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	b299      	uxth	r1, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	225e      	movs	r2, #94	@ 0x5e
 8004520:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	225e      	movs	r2, #94	@ 0x5e
 8004526:	5a9b      	ldrh	r3, [r3, r2]
 8004528:	b29b      	uxth	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1be      	bne.n	80044ac <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	228c      	movs	r2, #140	@ 0x8c
 8004532:	2120      	movs	r1, #32
 8004534:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	e000      	b.n	800453c <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800453a:	2302      	movs	r3, #2
  }
}
 800453c:	0018      	movs	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	b008      	add	sp, #32
 8004542:	bd80      	pop	{r7, pc}
 8004544:	000001ff 	.word	0x000001ff

08004548 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004548:	b5b0      	push	{r4, r5, r7, lr}
 800454a:	b090      	sub	sp, #64	@ 0x40
 800454c:	af00      	add	r7, sp, #0
 800454e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004550:	231a      	movs	r3, #26
 8004552:	2220      	movs	r2, #32
 8004554:	189b      	adds	r3, r3, r2
 8004556:	19db      	adds	r3, r3, r7
 8004558:	2200      	movs	r2, #0
 800455a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800455c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	431a      	orrs	r2, r3
 8004566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	431a      	orrs	r2, r3
 800456c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456e:	69db      	ldr	r3, [r3, #28]
 8004570:	4313      	orrs	r3, r2
 8004572:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4ac1      	ldr	r2, [pc, #772]	@ (8004880 <UART_SetConfig+0x338>)
 800457c:	4013      	ands	r3, r2
 800457e:	0019      	movs	r1, r3
 8004580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004586:	430b      	orrs	r3, r1
 8004588:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	4abc      	ldr	r2, [pc, #752]	@ (8004884 <UART_SetConfig+0x33c>)
 8004592:	4013      	ands	r3, r2
 8004594:	0018      	movs	r0, r3
 8004596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004598:	68d9      	ldr	r1, [r3, #12]
 800459a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	0003      	movs	r3, r0
 80045a0:	430b      	orrs	r3, r1
 80045a2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4ab6      	ldr	r2, [pc, #728]	@ (8004888 <UART_SetConfig+0x340>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d009      	beq.n	80045c8 <UART_SetConfig+0x80>
 80045b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4ab4      	ldr	r2, [pc, #720]	@ (800488c <UART_SetConfig+0x344>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d004      	beq.n	80045c8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80045c4:	4313      	orrs	r3, r2
 80045c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	4ab0      	ldr	r2, [pc, #704]	@ (8004890 <UART_SetConfig+0x348>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	0019      	movs	r1, r3
 80045d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045da:	430b      	orrs	r3, r1
 80045dc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80045de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e4:	220f      	movs	r2, #15
 80045e6:	4393      	bics	r3, r2
 80045e8:	0018      	movs	r0, r3
 80045ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ec:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80045ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	0003      	movs	r3, r0
 80045f4:	430b      	orrs	r3, r1
 80045f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4aa5      	ldr	r2, [pc, #660]	@ (8004894 <UART_SetConfig+0x34c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d131      	bne.n	8004666 <UART_SetConfig+0x11e>
 8004602:	4ba5      	ldr	r3, [pc, #660]	@ (8004898 <UART_SetConfig+0x350>)
 8004604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004606:	2203      	movs	r2, #3
 8004608:	4013      	ands	r3, r2
 800460a:	2b03      	cmp	r3, #3
 800460c:	d01d      	beq.n	800464a <UART_SetConfig+0x102>
 800460e:	d823      	bhi.n	8004658 <UART_SetConfig+0x110>
 8004610:	2b02      	cmp	r3, #2
 8004612:	d00c      	beq.n	800462e <UART_SetConfig+0xe6>
 8004614:	d820      	bhi.n	8004658 <UART_SetConfig+0x110>
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <UART_SetConfig+0xd8>
 800461a:	2b01      	cmp	r3, #1
 800461c:	d00e      	beq.n	800463c <UART_SetConfig+0xf4>
 800461e:	e01b      	b.n	8004658 <UART_SetConfig+0x110>
 8004620:	231b      	movs	r3, #27
 8004622:	2220      	movs	r2, #32
 8004624:	189b      	adds	r3, r3, r2
 8004626:	19db      	adds	r3, r3, r7
 8004628:	2200      	movs	r2, #0
 800462a:	701a      	strb	r2, [r3, #0]
 800462c:	e154      	b.n	80048d8 <UART_SetConfig+0x390>
 800462e:	231b      	movs	r3, #27
 8004630:	2220      	movs	r2, #32
 8004632:	189b      	adds	r3, r3, r2
 8004634:	19db      	adds	r3, r3, r7
 8004636:	2202      	movs	r2, #2
 8004638:	701a      	strb	r2, [r3, #0]
 800463a:	e14d      	b.n	80048d8 <UART_SetConfig+0x390>
 800463c:	231b      	movs	r3, #27
 800463e:	2220      	movs	r2, #32
 8004640:	189b      	adds	r3, r3, r2
 8004642:	19db      	adds	r3, r3, r7
 8004644:	2204      	movs	r2, #4
 8004646:	701a      	strb	r2, [r3, #0]
 8004648:	e146      	b.n	80048d8 <UART_SetConfig+0x390>
 800464a:	231b      	movs	r3, #27
 800464c:	2220      	movs	r2, #32
 800464e:	189b      	adds	r3, r3, r2
 8004650:	19db      	adds	r3, r3, r7
 8004652:	2208      	movs	r2, #8
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	e13f      	b.n	80048d8 <UART_SetConfig+0x390>
 8004658:	231b      	movs	r3, #27
 800465a:	2220      	movs	r2, #32
 800465c:	189b      	adds	r3, r3, r2
 800465e:	19db      	adds	r3, r3, r7
 8004660:	2210      	movs	r2, #16
 8004662:	701a      	strb	r2, [r3, #0]
 8004664:	e138      	b.n	80048d8 <UART_SetConfig+0x390>
 8004666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a8c      	ldr	r2, [pc, #560]	@ (800489c <UART_SetConfig+0x354>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d131      	bne.n	80046d4 <UART_SetConfig+0x18c>
 8004670:	4b89      	ldr	r3, [pc, #548]	@ (8004898 <UART_SetConfig+0x350>)
 8004672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004674:	220c      	movs	r2, #12
 8004676:	4013      	ands	r3, r2
 8004678:	2b0c      	cmp	r3, #12
 800467a:	d01d      	beq.n	80046b8 <UART_SetConfig+0x170>
 800467c:	d823      	bhi.n	80046c6 <UART_SetConfig+0x17e>
 800467e:	2b08      	cmp	r3, #8
 8004680:	d00c      	beq.n	800469c <UART_SetConfig+0x154>
 8004682:	d820      	bhi.n	80046c6 <UART_SetConfig+0x17e>
 8004684:	2b00      	cmp	r3, #0
 8004686:	d002      	beq.n	800468e <UART_SetConfig+0x146>
 8004688:	2b04      	cmp	r3, #4
 800468a:	d00e      	beq.n	80046aa <UART_SetConfig+0x162>
 800468c:	e01b      	b.n	80046c6 <UART_SetConfig+0x17e>
 800468e:	231b      	movs	r3, #27
 8004690:	2220      	movs	r2, #32
 8004692:	189b      	adds	r3, r3, r2
 8004694:	19db      	adds	r3, r3, r7
 8004696:	2200      	movs	r2, #0
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	e11d      	b.n	80048d8 <UART_SetConfig+0x390>
 800469c:	231b      	movs	r3, #27
 800469e:	2220      	movs	r2, #32
 80046a0:	189b      	adds	r3, r3, r2
 80046a2:	19db      	adds	r3, r3, r7
 80046a4:	2202      	movs	r2, #2
 80046a6:	701a      	strb	r2, [r3, #0]
 80046a8:	e116      	b.n	80048d8 <UART_SetConfig+0x390>
 80046aa:	231b      	movs	r3, #27
 80046ac:	2220      	movs	r2, #32
 80046ae:	189b      	adds	r3, r3, r2
 80046b0:	19db      	adds	r3, r3, r7
 80046b2:	2204      	movs	r2, #4
 80046b4:	701a      	strb	r2, [r3, #0]
 80046b6:	e10f      	b.n	80048d8 <UART_SetConfig+0x390>
 80046b8:	231b      	movs	r3, #27
 80046ba:	2220      	movs	r2, #32
 80046bc:	189b      	adds	r3, r3, r2
 80046be:	19db      	adds	r3, r3, r7
 80046c0:	2208      	movs	r2, #8
 80046c2:	701a      	strb	r2, [r3, #0]
 80046c4:	e108      	b.n	80048d8 <UART_SetConfig+0x390>
 80046c6:	231b      	movs	r3, #27
 80046c8:	2220      	movs	r2, #32
 80046ca:	189b      	adds	r3, r3, r2
 80046cc:	19db      	adds	r3, r3, r7
 80046ce:	2210      	movs	r2, #16
 80046d0:	701a      	strb	r2, [r3, #0]
 80046d2:	e101      	b.n	80048d8 <UART_SetConfig+0x390>
 80046d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a71      	ldr	r2, [pc, #452]	@ (80048a0 <UART_SetConfig+0x358>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d131      	bne.n	8004742 <UART_SetConfig+0x1fa>
 80046de:	4b6e      	ldr	r3, [pc, #440]	@ (8004898 <UART_SetConfig+0x350>)
 80046e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e2:	2230      	movs	r2, #48	@ 0x30
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b30      	cmp	r3, #48	@ 0x30
 80046e8:	d01d      	beq.n	8004726 <UART_SetConfig+0x1de>
 80046ea:	d823      	bhi.n	8004734 <UART_SetConfig+0x1ec>
 80046ec:	2b20      	cmp	r3, #32
 80046ee:	d00c      	beq.n	800470a <UART_SetConfig+0x1c2>
 80046f0:	d820      	bhi.n	8004734 <UART_SetConfig+0x1ec>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <UART_SetConfig+0x1b4>
 80046f6:	2b10      	cmp	r3, #16
 80046f8:	d00e      	beq.n	8004718 <UART_SetConfig+0x1d0>
 80046fa:	e01b      	b.n	8004734 <UART_SetConfig+0x1ec>
 80046fc:	231b      	movs	r3, #27
 80046fe:	2220      	movs	r2, #32
 8004700:	189b      	adds	r3, r3, r2
 8004702:	19db      	adds	r3, r3, r7
 8004704:	2200      	movs	r2, #0
 8004706:	701a      	strb	r2, [r3, #0]
 8004708:	e0e6      	b.n	80048d8 <UART_SetConfig+0x390>
 800470a:	231b      	movs	r3, #27
 800470c:	2220      	movs	r2, #32
 800470e:	189b      	adds	r3, r3, r2
 8004710:	19db      	adds	r3, r3, r7
 8004712:	2202      	movs	r2, #2
 8004714:	701a      	strb	r2, [r3, #0]
 8004716:	e0df      	b.n	80048d8 <UART_SetConfig+0x390>
 8004718:	231b      	movs	r3, #27
 800471a:	2220      	movs	r2, #32
 800471c:	189b      	adds	r3, r3, r2
 800471e:	19db      	adds	r3, r3, r7
 8004720:	2204      	movs	r2, #4
 8004722:	701a      	strb	r2, [r3, #0]
 8004724:	e0d8      	b.n	80048d8 <UART_SetConfig+0x390>
 8004726:	231b      	movs	r3, #27
 8004728:	2220      	movs	r2, #32
 800472a:	189b      	adds	r3, r3, r2
 800472c:	19db      	adds	r3, r3, r7
 800472e:	2208      	movs	r2, #8
 8004730:	701a      	strb	r2, [r3, #0]
 8004732:	e0d1      	b.n	80048d8 <UART_SetConfig+0x390>
 8004734:	231b      	movs	r3, #27
 8004736:	2220      	movs	r2, #32
 8004738:	189b      	adds	r3, r3, r2
 800473a:	19db      	adds	r3, r3, r7
 800473c:	2210      	movs	r2, #16
 800473e:	701a      	strb	r2, [r3, #0]
 8004740:	e0ca      	b.n	80048d8 <UART_SetConfig+0x390>
 8004742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a57      	ldr	r2, [pc, #348]	@ (80048a4 <UART_SetConfig+0x35c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d106      	bne.n	800475a <UART_SetConfig+0x212>
 800474c:	231b      	movs	r3, #27
 800474e:	2220      	movs	r2, #32
 8004750:	189b      	adds	r3, r3, r2
 8004752:	19db      	adds	r3, r3, r7
 8004754:	2200      	movs	r2, #0
 8004756:	701a      	strb	r2, [r3, #0]
 8004758:	e0be      	b.n	80048d8 <UART_SetConfig+0x390>
 800475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a52      	ldr	r2, [pc, #328]	@ (80048a8 <UART_SetConfig+0x360>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d106      	bne.n	8004772 <UART_SetConfig+0x22a>
 8004764:	231b      	movs	r3, #27
 8004766:	2220      	movs	r2, #32
 8004768:	189b      	adds	r3, r3, r2
 800476a:	19db      	adds	r3, r3, r7
 800476c:	2200      	movs	r2, #0
 800476e:	701a      	strb	r2, [r3, #0]
 8004770:	e0b2      	b.n	80048d8 <UART_SetConfig+0x390>
 8004772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a4d      	ldr	r2, [pc, #308]	@ (80048ac <UART_SetConfig+0x364>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d106      	bne.n	800478a <UART_SetConfig+0x242>
 800477c:	231b      	movs	r3, #27
 800477e:	2220      	movs	r2, #32
 8004780:	189b      	adds	r3, r3, r2
 8004782:	19db      	adds	r3, r3, r7
 8004784:	2200      	movs	r2, #0
 8004786:	701a      	strb	r2, [r3, #0]
 8004788:	e0a6      	b.n	80048d8 <UART_SetConfig+0x390>
 800478a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a3e      	ldr	r2, [pc, #248]	@ (8004888 <UART_SetConfig+0x340>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d13e      	bne.n	8004812 <UART_SetConfig+0x2ca>
 8004794:	4b40      	ldr	r3, [pc, #256]	@ (8004898 <UART_SetConfig+0x350>)
 8004796:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004798:	23c0      	movs	r3, #192	@ 0xc0
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	4013      	ands	r3, r2
 800479e:	22c0      	movs	r2, #192	@ 0xc0
 80047a0:	0112      	lsls	r2, r2, #4
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d027      	beq.n	80047f6 <UART_SetConfig+0x2ae>
 80047a6:	22c0      	movs	r2, #192	@ 0xc0
 80047a8:	0112      	lsls	r2, r2, #4
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d82a      	bhi.n	8004804 <UART_SetConfig+0x2bc>
 80047ae:	2280      	movs	r2, #128	@ 0x80
 80047b0:	0112      	lsls	r2, r2, #4
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d011      	beq.n	80047da <UART_SetConfig+0x292>
 80047b6:	2280      	movs	r2, #128	@ 0x80
 80047b8:	0112      	lsls	r2, r2, #4
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d822      	bhi.n	8004804 <UART_SetConfig+0x2bc>
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d004      	beq.n	80047cc <UART_SetConfig+0x284>
 80047c2:	2280      	movs	r2, #128	@ 0x80
 80047c4:	00d2      	lsls	r2, r2, #3
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00e      	beq.n	80047e8 <UART_SetConfig+0x2a0>
 80047ca:	e01b      	b.n	8004804 <UART_SetConfig+0x2bc>
 80047cc:	231b      	movs	r3, #27
 80047ce:	2220      	movs	r2, #32
 80047d0:	189b      	adds	r3, r3, r2
 80047d2:	19db      	adds	r3, r3, r7
 80047d4:	2200      	movs	r2, #0
 80047d6:	701a      	strb	r2, [r3, #0]
 80047d8:	e07e      	b.n	80048d8 <UART_SetConfig+0x390>
 80047da:	231b      	movs	r3, #27
 80047dc:	2220      	movs	r2, #32
 80047de:	189b      	adds	r3, r3, r2
 80047e0:	19db      	adds	r3, r3, r7
 80047e2:	2202      	movs	r2, #2
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	e077      	b.n	80048d8 <UART_SetConfig+0x390>
 80047e8:	231b      	movs	r3, #27
 80047ea:	2220      	movs	r2, #32
 80047ec:	189b      	adds	r3, r3, r2
 80047ee:	19db      	adds	r3, r3, r7
 80047f0:	2204      	movs	r2, #4
 80047f2:	701a      	strb	r2, [r3, #0]
 80047f4:	e070      	b.n	80048d8 <UART_SetConfig+0x390>
 80047f6:	231b      	movs	r3, #27
 80047f8:	2220      	movs	r2, #32
 80047fa:	189b      	adds	r3, r3, r2
 80047fc:	19db      	adds	r3, r3, r7
 80047fe:	2208      	movs	r2, #8
 8004800:	701a      	strb	r2, [r3, #0]
 8004802:	e069      	b.n	80048d8 <UART_SetConfig+0x390>
 8004804:	231b      	movs	r3, #27
 8004806:	2220      	movs	r2, #32
 8004808:	189b      	adds	r3, r3, r2
 800480a:	19db      	adds	r3, r3, r7
 800480c:	2210      	movs	r2, #16
 800480e:	701a      	strb	r2, [r3, #0]
 8004810:	e062      	b.n	80048d8 <UART_SetConfig+0x390>
 8004812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a1d      	ldr	r2, [pc, #116]	@ (800488c <UART_SetConfig+0x344>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d157      	bne.n	80048cc <UART_SetConfig+0x384>
 800481c:	4b1e      	ldr	r3, [pc, #120]	@ (8004898 <UART_SetConfig+0x350>)
 800481e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004820:	23c0      	movs	r3, #192	@ 0xc0
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4013      	ands	r3, r2
 8004826:	22c0      	movs	r2, #192	@ 0xc0
 8004828:	0092      	lsls	r2, r2, #2
 800482a:	4293      	cmp	r3, r2
 800482c:	d040      	beq.n	80048b0 <UART_SetConfig+0x368>
 800482e:	22c0      	movs	r2, #192	@ 0xc0
 8004830:	0092      	lsls	r2, r2, #2
 8004832:	4293      	cmp	r3, r2
 8004834:	d843      	bhi.n	80048be <UART_SetConfig+0x376>
 8004836:	2280      	movs	r2, #128	@ 0x80
 8004838:	0092      	lsls	r2, r2, #2
 800483a:	4293      	cmp	r3, r2
 800483c:	d011      	beq.n	8004862 <UART_SetConfig+0x31a>
 800483e:	2280      	movs	r2, #128	@ 0x80
 8004840:	0092      	lsls	r2, r2, #2
 8004842:	4293      	cmp	r3, r2
 8004844:	d83b      	bhi.n	80048be <UART_SetConfig+0x376>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d004      	beq.n	8004854 <UART_SetConfig+0x30c>
 800484a:	2280      	movs	r2, #128	@ 0x80
 800484c:	0052      	lsls	r2, r2, #1
 800484e:	4293      	cmp	r3, r2
 8004850:	d00e      	beq.n	8004870 <UART_SetConfig+0x328>
 8004852:	e034      	b.n	80048be <UART_SetConfig+0x376>
 8004854:	231b      	movs	r3, #27
 8004856:	2220      	movs	r2, #32
 8004858:	189b      	adds	r3, r3, r2
 800485a:	19db      	adds	r3, r3, r7
 800485c:	2200      	movs	r2, #0
 800485e:	701a      	strb	r2, [r3, #0]
 8004860:	e03a      	b.n	80048d8 <UART_SetConfig+0x390>
 8004862:	231b      	movs	r3, #27
 8004864:	2220      	movs	r2, #32
 8004866:	189b      	adds	r3, r3, r2
 8004868:	19db      	adds	r3, r3, r7
 800486a:	2202      	movs	r2, #2
 800486c:	701a      	strb	r2, [r3, #0]
 800486e:	e033      	b.n	80048d8 <UART_SetConfig+0x390>
 8004870:	231b      	movs	r3, #27
 8004872:	2220      	movs	r2, #32
 8004874:	189b      	adds	r3, r3, r2
 8004876:	19db      	adds	r3, r3, r7
 8004878:	2204      	movs	r2, #4
 800487a:	701a      	strb	r2, [r3, #0]
 800487c:	e02c      	b.n	80048d8 <UART_SetConfig+0x390>
 800487e:	46c0      	nop			@ (mov r8, r8)
 8004880:	cfff69f3 	.word	0xcfff69f3
 8004884:	ffffcfff 	.word	0xffffcfff
 8004888:	40008000 	.word	0x40008000
 800488c:	40008400 	.word	0x40008400
 8004890:	11fff4ff 	.word	0x11fff4ff
 8004894:	40013800 	.word	0x40013800
 8004898:	40021000 	.word	0x40021000
 800489c:	40004400 	.word	0x40004400
 80048a0:	40004800 	.word	0x40004800
 80048a4:	40004c00 	.word	0x40004c00
 80048a8:	40005000 	.word	0x40005000
 80048ac:	40013c00 	.word	0x40013c00
 80048b0:	231b      	movs	r3, #27
 80048b2:	2220      	movs	r2, #32
 80048b4:	189b      	adds	r3, r3, r2
 80048b6:	19db      	adds	r3, r3, r7
 80048b8:	2208      	movs	r2, #8
 80048ba:	701a      	strb	r2, [r3, #0]
 80048bc:	e00c      	b.n	80048d8 <UART_SetConfig+0x390>
 80048be:	231b      	movs	r3, #27
 80048c0:	2220      	movs	r2, #32
 80048c2:	189b      	adds	r3, r3, r2
 80048c4:	19db      	adds	r3, r3, r7
 80048c6:	2210      	movs	r2, #16
 80048c8:	701a      	strb	r2, [r3, #0]
 80048ca:	e005      	b.n	80048d8 <UART_SetConfig+0x390>
 80048cc:	231b      	movs	r3, #27
 80048ce:	2220      	movs	r2, #32
 80048d0:	189b      	adds	r3, r3, r2
 80048d2:	19db      	adds	r3, r3, r7
 80048d4:	2210      	movs	r2, #16
 80048d6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4ac1      	ldr	r2, [pc, #772]	@ (8004be4 <UART_SetConfig+0x69c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d005      	beq.n	80048ee <UART_SetConfig+0x3a6>
 80048e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4ac0      	ldr	r2, [pc, #768]	@ (8004be8 <UART_SetConfig+0x6a0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d000      	beq.n	80048ee <UART_SetConfig+0x3a6>
 80048ec:	e093      	b.n	8004a16 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048ee:	231b      	movs	r3, #27
 80048f0:	2220      	movs	r2, #32
 80048f2:	189b      	adds	r3, r3, r2
 80048f4:	19db      	adds	r3, r3, r7
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d015      	beq.n	8004928 <UART_SetConfig+0x3e0>
 80048fc:	dc18      	bgt.n	8004930 <UART_SetConfig+0x3e8>
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d00d      	beq.n	800491e <UART_SetConfig+0x3d6>
 8004902:	dc15      	bgt.n	8004930 <UART_SetConfig+0x3e8>
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <UART_SetConfig+0x3c6>
 8004908:	2b02      	cmp	r3, #2
 800490a:	d005      	beq.n	8004918 <UART_SetConfig+0x3d0>
 800490c:	e010      	b.n	8004930 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800490e:	f7fe f94f 	bl	8002bb0 <HAL_RCC_GetPCLK1Freq>
 8004912:	0003      	movs	r3, r0
 8004914:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004916:	e014      	b.n	8004942 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004918:	4bb4      	ldr	r3, [pc, #720]	@ (8004bec <UART_SetConfig+0x6a4>)
 800491a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800491c:	e011      	b.n	8004942 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800491e:	f7fe f8bb 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
 8004922:	0003      	movs	r3, r0
 8004924:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004926:	e00c      	b.n	8004942 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004928:	2380      	movs	r3, #128	@ 0x80
 800492a:	021b      	lsls	r3, r3, #8
 800492c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800492e:	e008      	b.n	8004942 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004934:	231a      	movs	r3, #26
 8004936:	2220      	movs	r2, #32
 8004938:	189b      	adds	r3, r3, r2
 800493a:	19db      	adds	r3, r3, r7
 800493c:	2201      	movs	r2, #1
 800493e:	701a      	strb	r2, [r3, #0]
        break;
 8004940:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004944:	2b00      	cmp	r3, #0
 8004946:	d100      	bne.n	800494a <UART_SetConfig+0x402>
 8004948:	e135      	b.n	8004bb6 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800494a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800494e:	4ba8      	ldr	r3, [pc, #672]	@ (8004bf0 <UART_SetConfig+0x6a8>)
 8004950:	0052      	lsls	r2, r2, #1
 8004952:	5ad3      	ldrh	r3, [r2, r3]
 8004954:	0019      	movs	r1, r3
 8004956:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004958:	f7fb fbd4 	bl	8000104 <__udivsi3>
 800495c:	0003      	movs	r3, r0
 800495e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	0013      	movs	r3, r2
 8004966:	005b      	lsls	r3, r3, #1
 8004968:	189b      	adds	r3, r3, r2
 800496a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800496c:	429a      	cmp	r2, r3
 800496e:	d305      	bcc.n	800497c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004976:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004978:	429a      	cmp	r2, r3
 800497a:	d906      	bls.n	800498a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800497c:	231a      	movs	r3, #26
 800497e:	2220      	movs	r2, #32
 8004980:	189b      	adds	r3, r3, r2
 8004982:	19db      	adds	r3, r3, r7
 8004984:	2201      	movs	r2, #1
 8004986:	701a      	strb	r2, [r3, #0]
 8004988:	e044      	b.n	8004a14 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800498a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800498c:	61bb      	str	r3, [r7, #24]
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]
 8004992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004994:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004996:	4b96      	ldr	r3, [pc, #600]	@ (8004bf0 <UART_SetConfig+0x6a8>)
 8004998:	0052      	lsls	r2, r2, #1
 800499a:	5ad3      	ldrh	r3, [r2, r3]
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	2300      	movs	r3, #0
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	69b8      	ldr	r0, [r7, #24]
 80049a8:	69f9      	ldr	r1, [r7, #28]
 80049aa:	f7fb fd21 	bl	80003f0 <__aeabi_uldivmod>
 80049ae:	0002      	movs	r2, r0
 80049b0:	000b      	movs	r3, r1
 80049b2:	0e11      	lsrs	r1, r2, #24
 80049b4:	021d      	lsls	r5, r3, #8
 80049b6:	430d      	orrs	r5, r1
 80049b8:	0214      	lsls	r4, r2, #8
 80049ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	085b      	lsrs	r3, r3, #1
 80049c0:	60bb      	str	r3, [r7, #8]
 80049c2:	2300      	movs	r3, #0
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	68b8      	ldr	r0, [r7, #8]
 80049c8:	68f9      	ldr	r1, [r7, #12]
 80049ca:	1900      	adds	r0, r0, r4
 80049cc:	4169      	adcs	r1, r5
 80049ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	603b      	str	r3, [r7, #0]
 80049d4:	2300      	movs	r3, #0
 80049d6:	607b      	str	r3, [r7, #4]
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f7fb fd08 	bl	80003f0 <__aeabi_uldivmod>
 80049e0:	0002      	movs	r2, r0
 80049e2:	000b      	movs	r3, r1
 80049e4:	0013      	movs	r3, r2
 80049e6:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049ea:	23c0      	movs	r3, #192	@ 0xc0
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d309      	bcc.n	8004a06 <UART_SetConfig+0x4be>
 80049f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049f4:	2380      	movs	r3, #128	@ 0x80
 80049f6:	035b      	lsls	r3, r3, #13
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d204      	bcs.n	8004a06 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80049fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a02:	60da      	str	r2, [r3, #12]
 8004a04:	e006      	b.n	8004a14 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004a06:	231a      	movs	r3, #26
 8004a08:	2220      	movs	r2, #32
 8004a0a:	189b      	adds	r3, r3, r2
 8004a0c:	19db      	adds	r3, r3, r7
 8004a0e:	2201      	movs	r2, #1
 8004a10:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8004a12:	e0d0      	b.n	8004bb6 <UART_SetConfig+0x66e>
 8004a14:	e0cf      	b.n	8004bb6 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a18:	69da      	ldr	r2, [r3, #28]
 8004a1a:	2380      	movs	r3, #128	@ 0x80
 8004a1c:	021b      	lsls	r3, r3, #8
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d000      	beq.n	8004a24 <UART_SetConfig+0x4dc>
 8004a22:	e070      	b.n	8004b06 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8004a24:	231b      	movs	r3, #27
 8004a26:	2220      	movs	r2, #32
 8004a28:	189b      	adds	r3, r3, r2
 8004a2a:	19db      	adds	r3, r3, r7
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	2b08      	cmp	r3, #8
 8004a30:	d015      	beq.n	8004a5e <UART_SetConfig+0x516>
 8004a32:	dc18      	bgt.n	8004a66 <UART_SetConfig+0x51e>
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d00d      	beq.n	8004a54 <UART_SetConfig+0x50c>
 8004a38:	dc15      	bgt.n	8004a66 <UART_SetConfig+0x51e>
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <UART_SetConfig+0x4fc>
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d005      	beq.n	8004a4e <UART_SetConfig+0x506>
 8004a42:	e010      	b.n	8004a66 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a44:	f7fe f8b4 	bl	8002bb0 <HAL_RCC_GetPCLK1Freq>
 8004a48:	0003      	movs	r3, r0
 8004a4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a4c:	e014      	b.n	8004a78 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a4e:	4b67      	ldr	r3, [pc, #412]	@ (8004bec <UART_SetConfig+0x6a4>)
 8004a50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a52:	e011      	b.n	8004a78 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a54:	f7fe f820 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
 8004a58:	0003      	movs	r3, r0
 8004a5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a5c:	e00c      	b.n	8004a78 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a5e:	2380      	movs	r3, #128	@ 0x80
 8004a60:	021b      	lsls	r3, r3, #8
 8004a62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004a64:	e008      	b.n	8004a78 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004a6a:	231a      	movs	r3, #26
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	189b      	adds	r3, r3, r2
 8004a70:	19db      	adds	r3, r3, r7
 8004a72:	2201      	movs	r2, #1
 8004a74:	701a      	strb	r2, [r3, #0]
        break;
 8004a76:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d100      	bne.n	8004a80 <UART_SetConfig+0x538>
 8004a7e:	e09a      	b.n	8004bb6 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a84:	4b5a      	ldr	r3, [pc, #360]	@ (8004bf0 <UART_SetConfig+0x6a8>)
 8004a86:	0052      	lsls	r2, r2, #1
 8004a88:	5ad3      	ldrh	r3, [r2, r3]
 8004a8a:	0019      	movs	r1, r3
 8004a8c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004a8e:	f7fb fb39 	bl	8000104 <__udivsi3>
 8004a92:	0003      	movs	r3, r0
 8004a94:	005a      	lsls	r2, r3, #1
 8004a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	085b      	lsrs	r3, r3, #1
 8004a9c:	18d2      	adds	r2, r2, r3
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	0019      	movs	r1, r3
 8004aa4:	0010      	movs	r0, r2
 8004aa6:	f7fb fb2d 	bl	8000104 <__udivsi3>
 8004aaa:	0003      	movs	r3, r0
 8004aac:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab0:	2b0f      	cmp	r3, #15
 8004ab2:	d921      	bls.n	8004af8 <UART_SetConfig+0x5b0>
 8004ab4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ab6:	2380      	movs	r3, #128	@ 0x80
 8004ab8:	025b      	lsls	r3, r3, #9
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d21c      	bcs.n	8004af8 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	200e      	movs	r0, #14
 8004ac4:	2420      	movs	r4, #32
 8004ac6:	1903      	adds	r3, r0, r4
 8004ac8:	19db      	adds	r3, r3, r7
 8004aca:	210f      	movs	r1, #15
 8004acc:	438a      	bics	r2, r1
 8004ace:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad2:	085b      	lsrs	r3, r3, #1
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2207      	movs	r2, #7
 8004ad8:	4013      	ands	r3, r2
 8004ada:	b299      	uxth	r1, r3
 8004adc:	1903      	adds	r3, r0, r4
 8004ade:	19db      	adds	r3, r3, r7
 8004ae0:	1902      	adds	r2, r0, r4
 8004ae2:	19d2      	adds	r2, r2, r7
 8004ae4:	8812      	ldrh	r2, [r2, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	1902      	adds	r2, r0, r4
 8004af0:	19d2      	adds	r2, r2, r7
 8004af2:	8812      	ldrh	r2, [r2, #0]
 8004af4:	60da      	str	r2, [r3, #12]
 8004af6:	e05e      	b.n	8004bb6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004af8:	231a      	movs	r3, #26
 8004afa:	2220      	movs	r2, #32
 8004afc:	189b      	adds	r3, r3, r2
 8004afe:	19db      	adds	r3, r3, r7
 8004b00:	2201      	movs	r2, #1
 8004b02:	701a      	strb	r2, [r3, #0]
 8004b04:	e057      	b.n	8004bb6 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b06:	231b      	movs	r3, #27
 8004b08:	2220      	movs	r2, #32
 8004b0a:	189b      	adds	r3, r3, r2
 8004b0c:	19db      	adds	r3, r3, r7
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d015      	beq.n	8004b40 <UART_SetConfig+0x5f8>
 8004b14:	dc18      	bgt.n	8004b48 <UART_SetConfig+0x600>
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d00d      	beq.n	8004b36 <UART_SetConfig+0x5ee>
 8004b1a:	dc15      	bgt.n	8004b48 <UART_SetConfig+0x600>
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <UART_SetConfig+0x5de>
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d005      	beq.n	8004b30 <UART_SetConfig+0x5e8>
 8004b24:	e010      	b.n	8004b48 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b26:	f7fe f843 	bl	8002bb0 <HAL_RCC_GetPCLK1Freq>
 8004b2a:	0003      	movs	r3, r0
 8004b2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b2e:	e014      	b.n	8004b5a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b30:	4b2e      	ldr	r3, [pc, #184]	@ (8004bec <UART_SetConfig+0x6a4>)
 8004b32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b34:	e011      	b.n	8004b5a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b36:	f7fd ffaf 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
 8004b3a:	0003      	movs	r3, r0
 8004b3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b3e:	e00c      	b.n	8004b5a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b40:	2380      	movs	r3, #128	@ 0x80
 8004b42:	021b      	lsls	r3, r3, #8
 8004b44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004b46:	e008      	b.n	8004b5a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004b4c:	231a      	movs	r3, #26
 8004b4e:	2220      	movs	r2, #32
 8004b50:	189b      	adds	r3, r3, r2
 8004b52:	19db      	adds	r3, r3, r7
 8004b54:	2201      	movs	r2, #1
 8004b56:	701a      	strb	r2, [r3, #0]
        break;
 8004b58:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d02a      	beq.n	8004bb6 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b64:	4b22      	ldr	r3, [pc, #136]	@ (8004bf0 <UART_SetConfig+0x6a8>)
 8004b66:	0052      	lsls	r2, r2, #1
 8004b68:	5ad3      	ldrh	r3, [r2, r3]
 8004b6a:	0019      	movs	r1, r3
 8004b6c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004b6e:	f7fb fac9 	bl	8000104 <__udivsi3>
 8004b72:	0003      	movs	r3, r0
 8004b74:	001a      	movs	r2, r3
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	085b      	lsrs	r3, r3, #1
 8004b7c:	18d2      	adds	r2, r2, r3
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	0019      	movs	r1, r3
 8004b84:	0010      	movs	r0, r2
 8004b86:	f7fb fabd 	bl	8000104 <__udivsi3>
 8004b8a:	0003      	movs	r3, r0
 8004b8c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b90:	2b0f      	cmp	r3, #15
 8004b92:	d90a      	bls.n	8004baa <UART_SetConfig+0x662>
 8004b94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b96:	2380      	movs	r3, #128	@ 0x80
 8004b98:	025b      	lsls	r3, r3, #9
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d205      	bcs.n	8004baa <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60da      	str	r2, [r3, #12]
 8004ba8:	e005      	b.n	8004bb6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004baa:	231a      	movs	r3, #26
 8004bac:	2220      	movs	r2, #32
 8004bae:	189b      	adds	r3, r3, r2
 8004bb0:	19db      	adds	r3, r3, r7
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb8:	226a      	movs	r2, #106	@ 0x6a
 8004bba:	2101      	movs	r1, #1
 8004bbc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc0:	2268      	movs	r2, #104	@ 0x68
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc8:	2200      	movs	r2, #0
 8004bca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bce:	2200      	movs	r2, #0
 8004bd0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004bd2:	231a      	movs	r3, #26
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	189b      	adds	r3, r3, r2
 8004bd8:	19db      	adds	r3, r3, r7
 8004bda:	781b      	ldrb	r3, [r3, #0]
}
 8004bdc:	0018      	movs	r0, r3
 8004bde:	46bd      	mov	sp, r7
 8004be0:	b010      	add	sp, #64	@ 0x40
 8004be2:	bdb0      	pop	{r4, r5, r7, pc}
 8004be4:	40008000 	.word	0x40008000
 8004be8:	40008400 	.word	0x40008400
 8004bec:	00f42400 	.word	0x00f42400
 8004bf0:	08005924 	.word	0x08005924

08004bf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c00:	2208      	movs	r2, #8
 8004c02:	4013      	ands	r3, r2
 8004c04:	d00b      	beq.n	8004c1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	4a4a      	ldr	r2, [pc, #296]	@ (8004d38 <UART_AdvFeatureConfig+0x144>)
 8004c0e:	4013      	ands	r3, r2
 8004c10:	0019      	movs	r1, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c22:	2201      	movs	r2, #1
 8004c24:	4013      	ands	r3, r2
 8004c26:	d00b      	beq.n	8004c40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	4a43      	ldr	r2, [pc, #268]	@ (8004d3c <UART_AdvFeatureConfig+0x148>)
 8004c30:	4013      	ands	r3, r2
 8004c32:	0019      	movs	r1, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c44:	2202      	movs	r2, #2
 8004c46:	4013      	ands	r3, r2
 8004c48:	d00b      	beq.n	8004c62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	4a3b      	ldr	r2, [pc, #236]	@ (8004d40 <UART_AdvFeatureConfig+0x14c>)
 8004c52:	4013      	ands	r3, r2
 8004c54:	0019      	movs	r1, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c66:	2204      	movs	r2, #4
 8004c68:	4013      	ands	r3, r2
 8004c6a:	d00b      	beq.n	8004c84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	4a34      	ldr	r2, [pc, #208]	@ (8004d44 <UART_AdvFeatureConfig+0x150>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	0019      	movs	r1, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c88:	2210      	movs	r2, #16
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d00b      	beq.n	8004ca6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	4a2c      	ldr	r2, [pc, #176]	@ (8004d48 <UART_AdvFeatureConfig+0x154>)
 8004c96:	4013      	ands	r3, r2
 8004c98:	0019      	movs	r1, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004caa:	2220      	movs	r2, #32
 8004cac:	4013      	ands	r3, r2
 8004cae:	d00b      	beq.n	8004cc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	4a25      	ldr	r2, [pc, #148]	@ (8004d4c <UART_AdvFeatureConfig+0x158>)
 8004cb8:	4013      	ands	r3, r2
 8004cba:	0019      	movs	r1, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ccc:	2240      	movs	r2, #64	@ 0x40
 8004cce:	4013      	ands	r3, r2
 8004cd0:	d01d      	beq.n	8004d0e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d50 <UART_AdvFeatureConfig+0x15c>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	0019      	movs	r1, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cee:	2380      	movs	r3, #128	@ 0x80
 8004cf0:	035b      	lsls	r3, r3, #13
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d10b      	bne.n	8004d0e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	4a15      	ldr	r2, [pc, #84]	@ (8004d54 <UART_AdvFeatureConfig+0x160>)
 8004cfe:	4013      	ands	r3, r2
 8004d00:	0019      	movs	r1, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d12:	2280      	movs	r2, #128	@ 0x80
 8004d14:	4013      	ands	r3, r2
 8004d16:	d00b      	beq.n	8004d30 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8004d58 <UART_AdvFeatureConfig+0x164>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	0019      	movs	r1, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	605a      	str	r2, [r3, #4]
  }
}
 8004d30:	46c0      	nop			@ (mov r8, r8)
 8004d32:	46bd      	mov	sp, r7
 8004d34:	b002      	add	sp, #8
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	ffff7fff 	.word	0xffff7fff
 8004d3c:	fffdffff 	.word	0xfffdffff
 8004d40:	fffeffff 	.word	0xfffeffff
 8004d44:	fffbffff 	.word	0xfffbffff
 8004d48:	ffffefff 	.word	0xffffefff
 8004d4c:	ffffdfff 	.word	0xffffdfff
 8004d50:	ffefffff 	.word	0xffefffff
 8004d54:	ff9fffff 	.word	0xff9fffff
 8004d58:	fff7ffff 	.word	0xfff7ffff

08004d5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b092      	sub	sp, #72	@ 0x48
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2290      	movs	r2, #144	@ 0x90
 8004d68:	2100      	movs	r1, #0
 8004d6a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d6c:	f7fc fe20 	bl	80019b0 <HAL_GetTick>
 8004d70:	0003      	movs	r3, r0
 8004d72:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2208      	movs	r2, #8
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	d12d      	bne.n	8004dde <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d84:	2280      	movs	r2, #128	@ 0x80
 8004d86:	0391      	lsls	r1, r2, #14
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	4a47      	ldr	r2, [pc, #284]	@ (8004ea8 <UART_CheckIdleState+0x14c>)
 8004d8c:	9200      	str	r2, [sp, #0]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f000 f88e 	bl	8004eb0 <UART_WaitOnFlagUntilTimeout>
 8004d94:	1e03      	subs	r3, r0, #0
 8004d96:	d022      	beq.n	8004dde <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d98:	f3ef 8310 	mrs	r3, PRIMASK
 8004d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004da0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004da2:	2301      	movs	r3, #1
 8004da4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da8:	f383 8810 	msr	PRIMASK, r3
}
 8004dac:	46c0      	nop			@ (mov r8, r8)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2180      	movs	r1, #128	@ 0x80
 8004dba:	438a      	bics	r2, r1
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc4:	f383 8810 	msr	PRIMASK, r3
}
 8004dc8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2288      	movs	r2, #136	@ 0x88
 8004dce:	2120      	movs	r1, #32
 8004dd0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2284      	movs	r2, #132	@ 0x84
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e060      	b.n	8004ea0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2204      	movs	r2, #4
 8004de6:	4013      	ands	r3, r2
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d146      	bne.n	8004e7a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dee:	2280      	movs	r2, #128	@ 0x80
 8004df0:	03d1      	lsls	r1, r2, #15
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	4a2c      	ldr	r2, [pc, #176]	@ (8004ea8 <UART_CheckIdleState+0x14c>)
 8004df6:	9200      	str	r2, [sp, #0]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f000 f859 	bl	8004eb0 <UART_WaitOnFlagUntilTimeout>
 8004dfe:	1e03      	subs	r3, r0, #0
 8004e00:	d03b      	beq.n	8004e7a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e02:	f3ef 8310 	mrs	r3, PRIMASK
 8004e06:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e08:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f383 8810 	msr	PRIMASK, r3
}
 8004e16:	46c0      	nop			@ (mov r8, r8)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4922      	ldr	r1, [pc, #136]	@ (8004eac <UART_CheckIdleState+0x150>)
 8004e24:	400a      	ands	r2, r1
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f383 8810 	msr	PRIMASK, r3
}
 8004e32:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e34:	f3ef 8310 	mrs	r3, PRIMASK
 8004e38:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e3a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e3e:	2301      	movs	r3, #1
 8004e40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	f383 8810 	msr	PRIMASK, r3
}
 8004e48:	46c0      	nop			@ (mov r8, r8)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2101      	movs	r1, #1
 8004e56:	438a      	bics	r2, r1
 8004e58:	609a      	str	r2, [r3, #8]
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	f383 8810 	msr	PRIMASK, r3
}
 8004e64:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	228c      	movs	r2, #140	@ 0x8c
 8004e6a:	2120      	movs	r1, #32
 8004e6c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2284      	movs	r2, #132	@ 0x84
 8004e72:	2100      	movs	r1, #0
 8004e74:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e012      	b.n	8004ea0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2288      	movs	r2, #136	@ 0x88
 8004e7e:	2120      	movs	r1, #32
 8004e80:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	228c      	movs	r2, #140	@ 0x8c
 8004e86:	2120      	movs	r1, #32
 8004e88:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2284      	movs	r2, #132	@ 0x84
 8004e9a:	2100      	movs	r1, #0
 8004e9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	0018      	movs	r0, r3
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	b010      	add	sp, #64	@ 0x40
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	01ffffff 	.word	0x01ffffff
 8004eac:	fffffedf 	.word	0xfffffedf

08004eb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	603b      	str	r3, [r7, #0]
 8004ebc:	1dfb      	adds	r3, r7, #7
 8004ebe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ec0:	e051      	b.n	8004f66 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	d04e      	beq.n	8004f66 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec8:	f7fc fd72 	bl	80019b0 <HAL_GetTick>
 8004ecc:	0002      	movs	r2, r0
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d302      	bcc.n	8004ede <UART_WaitOnFlagUntilTimeout+0x2e>
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e051      	b.n	8004f86 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2204      	movs	r2, #4
 8004eea:	4013      	ands	r3, r2
 8004eec:	d03b      	beq.n	8004f66 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b80      	cmp	r3, #128	@ 0x80
 8004ef2:	d038      	beq.n	8004f66 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2b40      	cmp	r3, #64	@ 0x40
 8004ef8:	d035      	beq.n	8004f66 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	2208      	movs	r2, #8
 8004f02:	4013      	ands	r3, r2
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d111      	bne.n	8004f2c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2208      	movs	r2, #8
 8004f0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	0018      	movs	r0, r3
 8004f14:	f000 f83c 	bl	8004f90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2290      	movs	r2, #144	@ 0x90
 8004f1c:	2108      	movs	r1, #8
 8004f1e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2284      	movs	r2, #132	@ 0x84
 8004f24:	2100      	movs	r1, #0
 8004f26:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e02c      	b.n	8004f86 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	69da      	ldr	r2, [r3, #28]
 8004f32:	2380      	movs	r3, #128	@ 0x80
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	401a      	ands	r2, r3
 8004f38:	2380      	movs	r3, #128	@ 0x80
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d112      	bne.n	8004f66 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2280      	movs	r2, #128	@ 0x80
 8004f46:	0112      	lsls	r2, r2, #4
 8004f48:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	0018      	movs	r0, r3
 8004f4e:	f000 f81f 	bl	8004f90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2290      	movs	r2, #144	@ 0x90
 8004f56:	2120      	movs	r1, #32
 8004f58:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2284      	movs	r2, #132	@ 0x84
 8004f5e:	2100      	movs	r1, #0
 8004f60:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e00f      	b.n	8004f86 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	425a      	negs	r2, r3
 8004f76:	4153      	adcs	r3, r2
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	001a      	movs	r2, r3
 8004f7c:	1dfb      	adds	r3, r7, #7
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d09e      	beq.n	8004ec2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	0018      	movs	r0, r3
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	b004      	add	sp, #16
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08e      	sub	sp, #56	@ 0x38
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f98:	f3ef 8310 	mrs	r3, PRIMASK
 8004f9c:	617b      	str	r3, [r7, #20]
  return(result);
 8004f9e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	f383 8810 	msr	PRIMASK, r3
}
 8004fac:	46c0      	nop			@ (mov r8, r8)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4926      	ldr	r1, [pc, #152]	@ (8005054 <UART_EndRxTransfer+0xc4>)
 8004fba:	400a      	ands	r2, r1
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	f383 8810 	msr	PRIMASK, r3
}
 8004fc8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fca:	f3ef 8310 	mrs	r3, PRIMASK
 8004fce:	623b      	str	r3, [r7, #32]
  return(result);
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004fd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fda:	f383 8810 	msr	PRIMASK, r3
}
 8004fde:	46c0      	nop			@ (mov r8, r8)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689a      	ldr	r2, [r3, #8]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	491b      	ldr	r1, [pc, #108]	@ (8005058 <UART_EndRxTransfer+0xc8>)
 8004fec:	400a      	ands	r2, r1
 8004fee:	609a      	str	r2, [r3, #8]
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff6:	f383 8810 	msr	PRIMASK, r3
}
 8004ffa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005000:	2b01      	cmp	r3, #1
 8005002:	d118      	bne.n	8005036 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005004:	f3ef 8310 	mrs	r3, PRIMASK
 8005008:	60bb      	str	r3, [r7, #8]
  return(result);
 800500a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800500c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800500e:	2301      	movs	r3, #1
 8005010:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f383 8810 	msr	PRIMASK, r3
}
 8005018:	46c0      	nop			@ (mov r8, r8)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2110      	movs	r1, #16
 8005026:	438a      	bics	r2, r1
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800502c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f383 8810 	msr	PRIMASK, r3
}
 8005034:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	228c      	movs	r2, #140	@ 0x8c
 800503a:	2120      	movs	r1, #32
 800503c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800504a:	46c0      	nop			@ (mov r8, r8)
 800504c:	46bd      	mov	sp, r7
 800504e:	b00e      	add	sp, #56	@ 0x38
 8005050:	bd80      	pop	{r7, pc}
 8005052:	46c0      	nop			@ (mov r8, r8)
 8005054:	fffffedf 	.word	0xfffffedf
 8005058:	effffffe 	.word	0xeffffffe

0800505c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2284      	movs	r2, #132	@ 0x84
 8005068:	5c9b      	ldrb	r3, [r3, r2]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d101      	bne.n	8005072 <HAL_UARTEx_DisableFifoMode+0x16>
 800506e:	2302      	movs	r3, #2
 8005070:	e027      	b.n	80050c2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2284      	movs	r2, #132	@ 0x84
 8005076:	2101      	movs	r1, #1
 8005078:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2288      	movs	r2, #136	@ 0x88
 800507e:	2124      	movs	r1, #36	@ 0x24
 8005080:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2101      	movs	r1, #1
 8005096:	438a      	bics	r2, r1
 8005098:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4a0b      	ldr	r2, [pc, #44]	@ (80050cc <HAL_UARTEx_DisableFifoMode+0x70>)
 800509e:	4013      	ands	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2288      	movs	r2, #136	@ 0x88
 80050b4:	2120      	movs	r1, #32
 80050b6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2284      	movs	r2, #132	@ 0x84
 80050bc:	2100      	movs	r1, #0
 80050be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	0018      	movs	r0, r3
 80050c4:	46bd      	mov	sp, r7
 80050c6:	b004      	add	sp, #16
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	46c0      	nop			@ (mov r8, r8)
 80050cc:	dfffffff 	.word	0xdfffffff

080050d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2284      	movs	r2, #132	@ 0x84
 80050de:	5c9b      	ldrb	r3, [r3, r2]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e02e      	b.n	8005146 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2284      	movs	r2, #132	@ 0x84
 80050ec:	2101      	movs	r1, #1
 80050ee:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2288      	movs	r2, #136	@ 0x88
 80050f4:	2124      	movs	r1, #36	@ 0x24
 80050f6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2101      	movs	r1, #1
 800510c:	438a      	bics	r2, r1
 800510e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	08d9      	lsrs	r1, r3, #3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	0018      	movs	r0, r3
 8005128:	f000 f854 	bl	80051d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2288      	movs	r2, #136	@ 0x88
 8005138:	2120      	movs	r1, #32
 800513a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2284      	movs	r2, #132	@ 0x84
 8005140:	2100      	movs	r1, #0
 8005142:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	0018      	movs	r0, r3
 8005148:	46bd      	mov	sp, r7
 800514a:	b004      	add	sp, #16
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2284      	movs	r2, #132	@ 0x84
 800515e:	5c9b      	ldrb	r3, [r3, r2]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d101      	bne.n	8005168 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005164:	2302      	movs	r3, #2
 8005166:	e02f      	b.n	80051c8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2284      	movs	r2, #132	@ 0x84
 800516c:	2101      	movs	r1, #1
 800516e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2288      	movs	r2, #136	@ 0x88
 8005174:	2124      	movs	r1, #36	@ 0x24
 8005176:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2101      	movs	r1, #1
 800518c:	438a      	bics	r2, r1
 800518e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	4a0e      	ldr	r2, [pc, #56]	@ (80051d0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005198:	4013      	ands	r3, r2
 800519a:	0019      	movs	r1, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	0018      	movs	r0, r3
 80051aa:	f000 f813 	bl	80051d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2288      	movs	r2, #136	@ 0x88
 80051ba:	2120      	movs	r1, #32
 80051bc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2284      	movs	r2, #132	@ 0x84
 80051c2:	2100      	movs	r1, #0
 80051c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	0018      	movs	r0, r3
 80051ca:	46bd      	mov	sp, r7
 80051cc:	b004      	add	sp, #16
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	f1ffffff 	.word	0xf1ffffff

080051d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80051d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d108      	bne.n	80051f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	226a      	movs	r2, #106	@ 0x6a
 80051e8:	2101      	movs	r1, #1
 80051ea:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2268      	movs	r2, #104	@ 0x68
 80051f0:	2101      	movs	r1, #1
 80051f2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80051f4:	e043      	b.n	800527e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80051f6:	260f      	movs	r6, #15
 80051f8:	19bb      	adds	r3, r7, r6
 80051fa:	2208      	movs	r2, #8
 80051fc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80051fe:	200e      	movs	r0, #14
 8005200:	183b      	adds	r3, r7, r0
 8005202:	2208      	movs	r2, #8
 8005204:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	0e5b      	lsrs	r3, r3, #25
 800520e:	b2da      	uxtb	r2, r3
 8005210:	240d      	movs	r4, #13
 8005212:	193b      	adds	r3, r7, r4
 8005214:	2107      	movs	r1, #7
 8005216:	400a      	ands	r2, r1
 8005218:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	0f5b      	lsrs	r3, r3, #29
 8005222:	b2da      	uxtb	r2, r3
 8005224:	250c      	movs	r5, #12
 8005226:	197b      	adds	r3, r7, r5
 8005228:	2107      	movs	r1, #7
 800522a:	400a      	ands	r2, r1
 800522c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800522e:	183b      	adds	r3, r7, r0
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	197a      	adds	r2, r7, r5
 8005234:	7812      	ldrb	r2, [r2, #0]
 8005236:	4914      	ldr	r1, [pc, #80]	@ (8005288 <UARTEx_SetNbDataToProcess+0xb4>)
 8005238:	5c8a      	ldrb	r2, [r1, r2]
 800523a:	435a      	muls	r2, r3
 800523c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800523e:	197b      	adds	r3, r7, r5
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	4a12      	ldr	r2, [pc, #72]	@ (800528c <UARTEx_SetNbDataToProcess+0xb8>)
 8005244:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005246:	0019      	movs	r1, r3
 8005248:	f7fa ffe6 	bl	8000218 <__divsi3>
 800524c:	0003      	movs	r3, r0
 800524e:	b299      	uxth	r1, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	226a      	movs	r2, #106	@ 0x6a
 8005254:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005256:	19bb      	adds	r3, r7, r6
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	193a      	adds	r2, r7, r4
 800525c:	7812      	ldrb	r2, [r2, #0]
 800525e:	490a      	ldr	r1, [pc, #40]	@ (8005288 <UARTEx_SetNbDataToProcess+0xb4>)
 8005260:	5c8a      	ldrb	r2, [r1, r2]
 8005262:	435a      	muls	r2, r3
 8005264:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005266:	193b      	adds	r3, r7, r4
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	4a08      	ldr	r2, [pc, #32]	@ (800528c <UARTEx_SetNbDataToProcess+0xb8>)
 800526c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800526e:	0019      	movs	r1, r3
 8005270:	f7fa ffd2 	bl	8000218 <__divsi3>
 8005274:	0003      	movs	r3, r0
 8005276:	b299      	uxth	r1, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2268      	movs	r2, #104	@ 0x68
 800527c:	5299      	strh	r1, [r3, r2]
}
 800527e:	46c0      	nop			@ (mov r8, r8)
 8005280:	46bd      	mov	sp, r7
 8005282:	b005      	add	sp, #20
 8005284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005286:	46c0      	nop			@ (mov r8, r8)
 8005288:	0800593c 	.word	0x0800593c
 800528c:	08005944 	.word	0x08005944

08005290 <memset>:
 8005290:	0003      	movs	r3, r0
 8005292:	1882      	adds	r2, r0, r2
 8005294:	4293      	cmp	r3, r2
 8005296:	d100      	bne.n	800529a <memset+0xa>
 8005298:	4770      	bx	lr
 800529a:	7019      	strb	r1, [r3, #0]
 800529c:	3301      	adds	r3, #1
 800529e:	e7f9      	b.n	8005294 <memset+0x4>

080052a0 <__libc_init_array>:
 80052a0:	b570      	push	{r4, r5, r6, lr}
 80052a2:	2600      	movs	r6, #0
 80052a4:	4c0c      	ldr	r4, [pc, #48]	@ (80052d8 <__libc_init_array+0x38>)
 80052a6:	4d0d      	ldr	r5, [pc, #52]	@ (80052dc <__libc_init_array+0x3c>)
 80052a8:	1b64      	subs	r4, r4, r5
 80052aa:	10a4      	asrs	r4, r4, #2
 80052ac:	42a6      	cmp	r6, r4
 80052ae:	d109      	bne.n	80052c4 <__libc_init_array+0x24>
 80052b0:	2600      	movs	r6, #0
 80052b2:	f000 f819 	bl	80052e8 <_init>
 80052b6:	4c0a      	ldr	r4, [pc, #40]	@ (80052e0 <__libc_init_array+0x40>)
 80052b8:	4d0a      	ldr	r5, [pc, #40]	@ (80052e4 <__libc_init_array+0x44>)
 80052ba:	1b64      	subs	r4, r4, r5
 80052bc:	10a4      	asrs	r4, r4, #2
 80052be:	42a6      	cmp	r6, r4
 80052c0:	d105      	bne.n	80052ce <__libc_init_array+0x2e>
 80052c2:	bd70      	pop	{r4, r5, r6, pc}
 80052c4:	00b3      	lsls	r3, r6, #2
 80052c6:	58eb      	ldr	r3, [r5, r3]
 80052c8:	4798      	blx	r3
 80052ca:	3601      	adds	r6, #1
 80052cc:	e7ee      	b.n	80052ac <__libc_init_array+0xc>
 80052ce:	00b3      	lsls	r3, r6, #2
 80052d0:	58eb      	ldr	r3, [r5, r3]
 80052d2:	4798      	blx	r3
 80052d4:	3601      	adds	r6, #1
 80052d6:	e7f2      	b.n	80052be <__libc_init_array+0x1e>
 80052d8:	08005954 	.word	0x08005954
 80052dc:	08005954 	.word	0x08005954
 80052e0:	08005958 	.word	0x08005958
 80052e4:	08005954 	.word	0x08005954

080052e8 <_init>:
 80052e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ea:	46c0      	nop			@ (mov r8, r8)
 80052ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ee:	bc08      	pop	{r3}
 80052f0:	469e      	mov	lr, r3
 80052f2:	4770      	bx	lr

080052f4 <_fini>:
 80052f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f6:	46c0      	nop			@ (mov r8, r8)
 80052f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fa:	bc08      	pop	{r3}
 80052fc:	469e      	mov	lr, r3
 80052fe:	4770      	bx	lr
