
ynotag.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c44  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  08007d00  08007d00  00008d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008428  08008428  0000a54c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008428  08008428  00009428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008430  08008430  0000a54c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008430  08008430  00009430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008434  08008434  00009434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000054c  20000000  08008438  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  20000550  08008984  0000a550  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000988  08008984  0000a988  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a54c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a155  00000000  00000000  0000a574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031e6  00000000  00000000  000246c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a8  00000000  00000000  000278b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012c1  00000000  00000000  00029058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f3b9  00000000  00000000  0002a319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d317  00000000  00000000  000496d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9e53  00000000  00000000  000669e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013083c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e20  00000000  00000000  00130880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  001366a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000550 	.word	0x20000550
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08007ce8 	.word	0x08007ce8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000554 	.word	0x20000554
 8000100:	08007ce8 	.word	0x08007ce8

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	@ 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			@ (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	@ 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	@ 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	@ (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			@ (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f81e 	bl	8000474 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			@ (mov r8, r8)

08000444 <__aeabi_f2uiz>:
 8000444:	219e      	movs	r1, #158	@ 0x9e
 8000446:	b510      	push	{r4, lr}
 8000448:	05c9      	lsls	r1, r1, #23
 800044a:	1c04      	adds	r4, r0, #0
 800044c:	f000 fd2a 	bl	8000ea4 <__aeabi_fcmpge>
 8000450:	2800      	cmp	r0, #0
 8000452:	d103      	bne.n	800045c <__aeabi_f2uiz+0x18>
 8000454:	1c20      	adds	r0, r4, #0
 8000456:	f000 fc53 	bl	8000d00 <__aeabi_f2iz>
 800045a:	bd10      	pop	{r4, pc}
 800045c:	219e      	movs	r1, #158	@ 0x9e
 800045e:	1c20      	adds	r0, r4, #0
 8000460:	05c9      	lsls	r1, r1, #23
 8000462:	f000 f9e9 	bl	8000838 <__aeabi_fsub>
 8000466:	f000 fc4b 	bl	8000d00 <__aeabi_f2iz>
 800046a:	2380      	movs	r3, #128	@ 0x80
 800046c:	061b      	lsls	r3, r3, #24
 800046e:	469c      	mov	ip, r3
 8000470:	4460      	add	r0, ip
 8000472:	e7f2      	b.n	800045a <__aeabi_f2uiz+0x16>

08000474 <__udivmoddi4>:
 8000474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000476:	4657      	mov	r7, sl
 8000478:	464e      	mov	r6, r9
 800047a:	4645      	mov	r5, r8
 800047c:	46de      	mov	lr, fp
 800047e:	b5e0      	push	{r5, r6, r7, lr}
 8000480:	0004      	movs	r4, r0
 8000482:	000d      	movs	r5, r1
 8000484:	4692      	mov	sl, r2
 8000486:	4699      	mov	r9, r3
 8000488:	b083      	sub	sp, #12
 800048a:	428b      	cmp	r3, r1
 800048c:	d830      	bhi.n	80004f0 <__udivmoddi4+0x7c>
 800048e:	d02d      	beq.n	80004ec <__udivmoddi4+0x78>
 8000490:	4649      	mov	r1, r9
 8000492:	4650      	mov	r0, sl
 8000494:	f000 fd2e 	bl	8000ef4 <__clzdi2>
 8000498:	0029      	movs	r1, r5
 800049a:	0006      	movs	r6, r0
 800049c:	0020      	movs	r0, r4
 800049e:	f000 fd29 	bl	8000ef4 <__clzdi2>
 80004a2:	1a33      	subs	r3, r6, r0
 80004a4:	4698      	mov	r8, r3
 80004a6:	3b20      	subs	r3, #32
 80004a8:	d434      	bmi.n	8000514 <__udivmoddi4+0xa0>
 80004aa:	469b      	mov	fp, r3
 80004ac:	4653      	mov	r3, sl
 80004ae:	465a      	mov	r2, fp
 80004b0:	4093      	lsls	r3, r2
 80004b2:	4642      	mov	r2, r8
 80004b4:	001f      	movs	r7, r3
 80004b6:	4653      	mov	r3, sl
 80004b8:	4093      	lsls	r3, r2
 80004ba:	001e      	movs	r6, r3
 80004bc:	42af      	cmp	r7, r5
 80004be:	d83b      	bhi.n	8000538 <__udivmoddi4+0xc4>
 80004c0:	42af      	cmp	r7, r5
 80004c2:	d100      	bne.n	80004c6 <__udivmoddi4+0x52>
 80004c4:	e079      	b.n	80005ba <__udivmoddi4+0x146>
 80004c6:	465b      	mov	r3, fp
 80004c8:	1ba4      	subs	r4, r4, r6
 80004ca:	41bd      	sbcs	r5, r7
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	da00      	bge.n	80004d2 <__udivmoddi4+0x5e>
 80004d0:	e076      	b.n	80005c0 <__udivmoddi4+0x14c>
 80004d2:	2200      	movs	r2, #0
 80004d4:	2300      	movs	r3, #0
 80004d6:	9200      	str	r2, [sp, #0]
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	2301      	movs	r3, #1
 80004dc:	465a      	mov	r2, fp
 80004de:	4093      	lsls	r3, r2
 80004e0:	9301      	str	r3, [sp, #4]
 80004e2:	2301      	movs	r3, #1
 80004e4:	4642      	mov	r2, r8
 80004e6:	4093      	lsls	r3, r2
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	e029      	b.n	8000540 <__udivmoddi4+0xcc>
 80004ec:	4282      	cmp	r2, r0
 80004ee:	d9cf      	bls.n	8000490 <__udivmoddi4+0x1c>
 80004f0:	2200      	movs	r2, #0
 80004f2:	2300      	movs	r3, #0
 80004f4:	9200      	str	r2, [sp, #0]
 80004f6:	9301      	str	r3, [sp, #4]
 80004f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <__udivmoddi4+0x8e>
 80004fe:	601c      	str	r4, [r3, #0]
 8000500:	605d      	str	r5, [r3, #4]
 8000502:	9800      	ldr	r0, [sp, #0]
 8000504:	9901      	ldr	r1, [sp, #4]
 8000506:	b003      	add	sp, #12
 8000508:	bcf0      	pop	{r4, r5, r6, r7}
 800050a:	46bb      	mov	fp, r7
 800050c:	46b2      	mov	sl, r6
 800050e:	46a9      	mov	r9, r5
 8000510:	46a0      	mov	r8, r4
 8000512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000514:	4642      	mov	r2, r8
 8000516:	469b      	mov	fp, r3
 8000518:	2320      	movs	r3, #32
 800051a:	1a9b      	subs	r3, r3, r2
 800051c:	4652      	mov	r2, sl
 800051e:	40da      	lsrs	r2, r3
 8000520:	4641      	mov	r1, r8
 8000522:	0013      	movs	r3, r2
 8000524:	464a      	mov	r2, r9
 8000526:	408a      	lsls	r2, r1
 8000528:	0017      	movs	r7, r2
 800052a:	4642      	mov	r2, r8
 800052c:	431f      	orrs	r7, r3
 800052e:	4653      	mov	r3, sl
 8000530:	4093      	lsls	r3, r2
 8000532:	001e      	movs	r6, r3
 8000534:	42af      	cmp	r7, r5
 8000536:	d9c3      	bls.n	80004c0 <__udivmoddi4+0x4c>
 8000538:	2200      	movs	r2, #0
 800053a:	2300      	movs	r3, #0
 800053c:	9200      	str	r2, [sp, #0]
 800053e:	9301      	str	r3, [sp, #4]
 8000540:	4643      	mov	r3, r8
 8000542:	2b00      	cmp	r3, #0
 8000544:	d0d8      	beq.n	80004f8 <__udivmoddi4+0x84>
 8000546:	07fb      	lsls	r3, r7, #31
 8000548:	0872      	lsrs	r2, r6, #1
 800054a:	431a      	orrs	r2, r3
 800054c:	4646      	mov	r6, r8
 800054e:	087b      	lsrs	r3, r7, #1
 8000550:	e00e      	b.n	8000570 <__udivmoddi4+0xfc>
 8000552:	42ab      	cmp	r3, r5
 8000554:	d101      	bne.n	800055a <__udivmoddi4+0xe6>
 8000556:	42a2      	cmp	r2, r4
 8000558:	d80c      	bhi.n	8000574 <__udivmoddi4+0x100>
 800055a:	1aa4      	subs	r4, r4, r2
 800055c:	419d      	sbcs	r5, r3
 800055e:	2001      	movs	r0, #1
 8000560:	1924      	adds	r4, r4, r4
 8000562:	416d      	adcs	r5, r5
 8000564:	2100      	movs	r1, #0
 8000566:	3e01      	subs	r6, #1
 8000568:	1824      	adds	r4, r4, r0
 800056a:	414d      	adcs	r5, r1
 800056c:	2e00      	cmp	r6, #0
 800056e:	d006      	beq.n	800057e <__udivmoddi4+0x10a>
 8000570:	42ab      	cmp	r3, r5
 8000572:	d9ee      	bls.n	8000552 <__udivmoddi4+0xde>
 8000574:	3e01      	subs	r6, #1
 8000576:	1924      	adds	r4, r4, r4
 8000578:	416d      	adcs	r5, r5
 800057a:	2e00      	cmp	r6, #0
 800057c:	d1f8      	bne.n	8000570 <__udivmoddi4+0xfc>
 800057e:	9800      	ldr	r0, [sp, #0]
 8000580:	9901      	ldr	r1, [sp, #4]
 8000582:	465b      	mov	r3, fp
 8000584:	1900      	adds	r0, r0, r4
 8000586:	4169      	adcs	r1, r5
 8000588:	2b00      	cmp	r3, #0
 800058a:	db24      	blt.n	80005d6 <__udivmoddi4+0x162>
 800058c:	002b      	movs	r3, r5
 800058e:	465a      	mov	r2, fp
 8000590:	4644      	mov	r4, r8
 8000592:	40d3      	lsrs	r3, r2
 8000594:	002a      	movs	r2, r5
 8000596:	40e2      	lsrs	r2, r4
 8000598:	001c      	movs	r4, r3
 800059a:	465b      	mov	r3, fp
 800059c:	0015      	movs	r5, r2
 800059e:	2b00      	cmp	r3, #0
 80005a0:	db2a      	blt.n	80005f8 <__udivmoddi4+0x184>
 80005a2:	0026      	movs	r6, r4
 80005a4:	409e      	lsls	r6, r3
 80005a6:	0033      	movs	r3, r6
 80005a8:	0026      	movs	r6, r4
 80005aa:	4647      	mov	r7, r8
 80005ac:	40be      	lsls	r6, r7
 80005ae:	0032      	movs	r2, r6
 80005b0:	1a80      	subs	r0, r0, r2
 80005b2:	4199      	sbcs	r1, r3
 80005b4:	9000      	str	r0, [sp, #0]
 80005b6:	9101      	str	r1, [sp, #4]
 80005b8:	e79e      	b.n	80004f8 <__udivmoddi4+0x84>
 80005ba:	42a3      	cmp	r3, r4
 80005bc:	d8bc      	bhi.n	8000538 <__udivmoddi4+0xc4>
 80005be:	e782      	b.n	80004c6 <__udivmoddi4+0x52>
 80005c0:	4642      	mov	r2, r8
 80005c2:	2320      	movs	r3, #32
 80005c4:	2100      	movs	r1, #0
 80005c6:	1a9b      	subs	r3, r3, r2
 80005c8:	2200      	movs	r2, #0
 80005ca:	9100      	str	r1, [sp, #0]
 80005cc:	9201      	str	r2, [sp, #4]
 80005ce:	2201      	movs	r2, #1
 80005d0:	40da      	lsrs	r2, r3
 80005d2:	9201      	str	r2, [sp, #4]
 80005d4:	e785      	b.n	80004e2 <__udivmoddi4+0x6e>
 80005d6:	4642      	mov	r2, r8
 80005d8:	2320      	movs	r3, #32
 80005da:	1a9b      	subs	r3, r3, r2
 80005dc:	002a      	movs	r2, r5
 80005de:	4646      	mov	r6, r8
 80005e0:	409a      	lsls	r2, r3
 80005e2:	0023      	movs	r3, r4
 80005e4:	40f3      	lsrs	r3, r6
 80005e6:	4644      	mov	r4, r8
 80005e8:	4313      	orrs	r3, r2
 80005ea:	002a      	movs	r2, r5
 80005ec:	40e2      	lsrs	r2, r4
 80005ee:	001c      	movs	r4, r3
 80005f0:	465b      	mov	r3, fp
 80005f2:	0015      	movs	r5, r2
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	dad4      	bge.n	80005a2 <__udivmoddi4+0x12e>
 80005f8:	4642      	mov	r2, r8
 80005fa:	002f      	movs	r7, r5
 80005fc:	2320      	movs	r3, #32
 80005fe:	0026      	movs	r6, r4
 8000600:	4097      	lsls	r7, r2
 8000602:	1a9b      	subs	r3, r3, r2
 8000604:	40de      	lsrs	r6, r3
 8000606:	003b      	movs	r3, r7
 8000608:	4333      	orrs	r3, r6
 800060a:	e7cd      	b.n	80005a8 <__udivmoddi4+0x134>

0800060c <__aeabi_fdiv>:
 800060c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060e:	4646      	mov	r6, r8
 8000610:	464f      	mov	r7, r9
 8000612:	46d6      	mov	lr, sl
 8000614:	0245      	lsls	r5, r0, #9
 8000616:	b5c0      	push	{r6, r7, lr}
 8000618:	0fc3      	lsrs	r3, r0, #31
 800061a:	0047      	lsls	r7, r0, #1
 800061c:	4698      	mov	r8, r3
 800061e:	1c0e      	adds	r6, r1, #0
 8000620:	0a6d      	lsrs	r5, r5, #9
 8000622:	0e3f      	lsrs	r7, r7, #24
 8000624:	d05b      	beq.n	80006de <__aeabi_fdiv+0xd2>
 8000626:	2fff      	cmp	r7, #255	@ 0xff
 8000628:	d021      	beq.n	800066e <__aeabi_fdiv+0x62>
 800062a:	2380      	movs	r3, #128	@ 0x80
 800062c:	00ed      	lsls	r5, r5, #3
 800062e:	04db      	lsls	r3, r3, #19
 8000630:	431d      	orrs	r5, r3
 8000632:	2300      	movs	r3, #0
 8000634:	4699      	mov	r9, r3
 8000636:	469a      	mov	sl, r3
 8000638:	3f7f      	subs	r7, #127	@ 0x7f
 800063a:	0274      	lsls	r4, r6, #9
 800063c:	0073      	lsls	r3, r6, #1
 800063e:	0a64      	lsrs	r4, r4, #9
 8000640:	0e1b      	lsrs	r3, r3, #24
 8000642:	0ff6      	lsrs	r6, r6, #31
 8000644:	2b00      	cmp	r3, #0
 8000646:	d020      	beq.n	800068a <__aeabi_fdiv+0x7e>
 8000648:	2bff      	cmp	r3, #255	@ 0xff
 800064a:	d043      	beq.n	80006d4 <__aeabi_fdiv+0xc8>
 800064c:	2280      	movs	r2, #128	@ 0x80
 800064e:	2000      	movs	r0, #0
 8000650:	00e4      	lsls	r4, r4, #3
 8000652:	04d2      	lsls	r2, r2, #19
 8000654:	4314      	orrs	r4, r2
 8000656:	3b7f      	subs	r3, #127	@ 0x7f
 8000658:	4642      	mov	r2, r8
 800065a:	1aff      	subs	r7, r7, r3
 800065c:	464b      	mov	r3, r9
 800065e:	4072      	eors	r2, r6
 8000660:	2b0f      	cmp	r3, #15
 8000662:	d900      	bls.n	8000666 <__aeabi_fdiv+0x5a>
 8000664:	e09d      	b.n	80007a2 <__aeabi_fdiv+0x196>
 8000666:	4971      	ldr	r1, [pc, #452]	@ (800082c <__aeabi_fdiv+0x220>)
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	58cb      	ldr	r3, [r1, r3]
 800066c:	469f      	mov	pc, r3
 800066e:	2d00      	cmp	r5, #0
 8000670:	d15a      	bne.n	8000728 <__aeabi_fdiv+0x11c>
 8000672:	2308      	movs	r3, #8
 8000674:	4699      	mov	r9, r3
 8000676:	3b06      	subs	r3, #6
 8000678:	0274      	lsls	r4, r6, #9
 800067a:	469a      	mov	sl, r3
 800067c:	0073      	lsls	r3, r6, #1
 800067e:	27ff      	movs	r7, #255	@ 0xff
 8000680:	0a64      	lsrs	r4, r4, #9
 8000682:	0e1b      	lsrs	r3, r3, #24
 8000684:	0ff6      	lsrs	r6, r6, #31
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1de      	bne.n	8000648 <__aeabi_fdiv+0x3c>
 800068a:	2c00      	cmp	r4, #0
 800068c:	d13b      	bne.n	8000706 <__aeabi_fdiv+0xfa>
 800068e:	2301      	movs	r3, #1
 8000690:	4642      	mov	r2, r8
 8000692:	4649      	mov	r1, r9
 8000694:	4072      	eors	r2, r6
 8000696:	4319      	orrs	r1, r3
 8000698:	290e      	cmp	r1, #14
 800069a:	d818      	bhi.n	80006ce <__aeabi_fdiv+0xc2>
 800069c:	4864      	ldr	r0, [pc, #400]	@ (8000830 <__aeabi_fdiv+0x224>)
 800069e:	0089      	lsls	r1, r1, #2
 80006a0:	5841      	ldr	r1, [r0, r1]
 80006a2:	468f      	mov	pc, r1
 80006a4:	4653      	mov	r3, sl
 80006a6:	2b02      	cmp	r3, #2
 80006a8:	d100      	bne.n	80006ac <__aeabi_fdiv+0xa0>
 80006aa:	e0b8      	b.n	800081e <__aeabi_fdiv+0x212>
 80006ac:	2b03      	cmp	r3, #3
 80006ae:	d06e      	beq.n	800078e <__aeabi_fdiv+0x182>
 80006b0:	4642      	mov	r2, r8
 80006b2:	002c      	movs	r4, r5
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d140      	bne.n	800073a <__aeabi_fdiv+0x12e>
 80006b8:	2000      	movs	r0, #0
 80006ba:	2400      	movs	r4, #0
 80006bc:	05c0      	lsls	r0, r0, #23
 80006be:	4320      	orrs	r0, r4
 80006c0:	07d2      	lsls	r2, r2, #31
 80006c2:	4310      	orrs	r0, r2
 80006c4:	bce0      	pop	{r5, r6, r7}
 80006c6:	46ba      	mov	sl, r7
 80006c8:	46b1      	mov	r9, r6
 80006ca:	46a8      	mov	r8, r5
 80006cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ce:	20ff      	movs	r0, #255	@ 0xff
 80006d0:	2400      	movs	r4, #0
 80006d2:	e7f3      	b.n	80006bc <__aeabi_fdiv+0xb0>
 80006d4:	2c00      	cmp	r4, #0
 80006d6:	d120      	bne.n	800071a <__aeabi_fdiv+0x10e>
 80006d8:	2302      	movs	r3, #2
 80006da:	3fff      	subs	r7, #255	@ 0xff
 80006dc:	e7d8      	b.n	8000690 <__aeabi_fdiv+0x84>
 80006de:	2d00      	cmp	r5, #0
 80006e0:	d105      	bne.n	80006ee <__aeabi_fdiv+0xe2>
 80006e2:	2304      	movs	r3, #4
 80006e4:	4699      	mov	r9, r3
 80006e6:	3b03      	subs	r3, #3
 80006e8:	2700      	movs	r7, #0
 80006ea:	469a      	mov	sl, r3
 80006ec:	e7a5      	b.n	800063a <__aeabi_fdiv+0x2e>
 80006ee:	0028      	movs	r0, r5
 80006f0:	f000 fbe2 	bl	8000eb8 <__clzsi2>
 80006f4:	2776      	movs	r7, #118	@ 0x76
 80006f6:	1f43      	subs	r3, r0, #5
 80006f8:	409d      	lsls	r5, r3
 80006fa:	2300      	movs	r3, #0
 80006fc:	427f      	negs	r7, r7
 80006fe:	4699      	mov	r9, r3
 8000700:	469a      	mov	sl, r3
 8000702:	1a3f      	subs	r7, r7, r0
 8000704:	e799      	b.n	800063a <__aeabi_fdiv+0x2e>
 8000706:	0020      	movs	r0, r4
 8000708:	f000 fbd6 	bl	8000eb8 <__clzsi2>
 800070c:	1f43      	subs	r3, r0, #5
 800070e:	409c      	lsls	r4, r3
 8000710:	2376      	movs	r3, #118	@ 0x76
 8000712:	425b      	negs	r3, r3
 8000714:	1a1b      	subs	r3, r3, r0
 8000716:	2000      	movs	r0, #0
 8000718:	e79e      	b.n	8000658 <__aeabi_fdiv+0x4c>
 800071a:	2303      	movs	r3, #3
 800071c:	464a      	mov	r2, r9
 800071e:	431a      	orrs	r2, r3
 8000720:	4691      	mov	r9, r2
 8000722:	2003      	movs	r0, #3
 8000724:	33fc      	adds	r3, #252	@ 0xfc
 8000726:	e797      	b.n	8000658 <__aeabi_fdiv+0x4c>
 8000728:	230c      	movs	r3, #12
 800072a:	4699      	mov	r9, r3
 800072c:	3b09      	subs	r3, #9
 800072e:	27ff      	movs	r7, #255	@ 0xff
 8000730:	469a      	mov	sl, r3
 8000732:	e782      	b.n	800063a <__aeabi_fdiv+0x2e>
 8000734:	2803      	cmp	r0, #3
 8000736:	d02c      	beq.n	8000792 <__aeabi_fdiv+0x186>
 8000738:	0032      	movs	r2, r6
 800073a:	0038      	movs	r0, r7
 800073c:	307f      	adds	r0, #127	@ 0x7f
 800073e:	2800      	cmp	r0, #0
 8000740:	dd47      	ble.n	80007d2 <__aeabi_fdiv+0x1c6>
 8000742:	0763      	lsls	r3, r4, #29
 8000744:	d004      	beq.n	8000750 <__aeabi_fdiv+0x144>
 8000746:	230f      	movs	r3, #15
 8000748:	4023      	ands	r3, r4
 800074a:	2b04      	cmp	r3, #4
 800074c:	d000      	beq.n	8000750 <__aeabi_fdiv+0x144>
 800074e:	3404      	adds	r4, #4
 8000750:	0123      	lsls	r3, r4, #4
 8000752:	d503      	bpl.n	800075c <__aeabi_fdiv+0x150>
 8000754:	0038      	movs	r0, r7
 8000756:	4b37      	ldr	r3, [pc, #220]	@ (8000834 <__aeabi_fdiv+0x228>)
 8000758:	3080      	adds	r0, #128	@ 0x80
 800075a:	401c      	ands	r4, r3
 800075c:	28fe      	cmp	r0, #254	@ 0xfe
 800075e:	dcb6      	bgt.n	80006ce <__aeabi_fdiv+0xc2>
 8000760:	01a4      	lsls	r4, r4, #6
 8000762:	0a64      	lsrs	r4, r4, #9
 8000764:	b2c0      	uxtb	r0, r0
 8000766:	e7a9      	b.n	80006bc <__aeabi_fdiv+0xb0>
 8000768:	2480      	movs	r4, #128	@ 0x80
 800076a:	2200      	movs	r2, #0
 800076c:	20ff      	movs	r0, #255	@ 0xff
 800076e:	03e4      	lsls	r4, r4, #15
 8000770:	e7a4      	b.n	80006bc <__aeabi_fdiv+0xb0>
 8000772:	2380      	movs	r3, #128	@ 0x80
 8000774:	03db      	lsls	r3, r3, #15
 8000776:	421d      	tst	r5, r3
 8000778:	d001      	beq.n	800077e <__aeabi_fdiv+0x172>
 800077a:	421c      	tst	r4, r3
 800077c:	d00b      	beq.n	8000796 <__aeabi_fdiv+0x18a>
 800077e:	2480      	movs	r4, #128	@ 0x80
 8000780:	03e4      	lsls	r4, r4, #15
 8000782:	432c      	orrs	r4, r5
 8000784:	0264      	lsls	r4, r4, #9
 8000786:	4642      	mov	r2, r8
 8000788:	20ff      	movs	r0, #255	@ 0xff
 800078a:	0a64      	lsrs	r4, r4, #9
 800078c:	e796      	b.n	80006bc <__aeabi_fdiv+0xb0>
 800078e:	4646      	mov	r6, r8
 8000790:	002c      	movs	r4, r5
 8000792:	2380      	movs	r3, #128	@ 0x80
 8000794:	03db      	lsls	r3, r3, #15
 8000796:	431c      	orrs	r4, r3
 8000798:	0264      	lsls	r4, r4, #9
 800079a:	0032      	movs	r2, r6
 800079c:	20ff      	movs	r0, #255	@ 0xff
 800079e:	0a64      	lsrs	r4, r4, #9
 80007a0:	e78c      	b.n	80006bc <__aeabi_fdiv+0xb0>
 80007a2:	016d      	lsls	r5, r5, #5
 80007a4:	0160      	lsls	r0, r4, #5
 80007a6:	4285      	cmp	r5, r0
 80007a8:	d22d      	bcs.n	8000806 <__aeabi_fdiv+0x1fa>
 80007aa:	231b      	movs	r3, #27
 80007ac:	2400      	movs	r4, #0
 80007ae:	3f01      	subs	r7, #1
 80007b0:	2601      	movs	r6, #1
 80007b2:	0029      	movs	r1, r5
 80007b4:	0064      	lsls	r4, r4, #1
 80007b6:	006d      	lsls	r5, r5, #1
 80007b8:	2900      	cmp	r1, #0
 80007ba:	db01      	blt.n	80007c0 <__aeabi_fdiv+0x1b4>
 80007bc:	4285      	cmp	r5, r0
 80007be:	d301      	bcc.n	80007c4 <__aeabi_fdiv+0x1b8>
 80007c0:	1a2d      	subs	r5, r5, r0
 80007c2:	4334      	orrs	r4, r6
 80007c4:	3b01      	subs	r3, #1
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1f3      	bne.n	80007b2 <__aeabi_fdiv+0x1a6>
 80007ca:	1e6b      	subs	r3, r5, #1
 80007cc:	419d      	sbcs	r5, r3
 80007ce:	432c      	orrs	r4, r5
 80007d0:	e7b3      	b.n	800073a <__aeabi_fdiv+0x12e>
 80007d2:	2301      	movs	r3, #1
 80007d4:	1a1b      	subs	r3, r3, r0
 80007d6:	2b1b      	cmp	r3, #27
 80007d8:	dd00      	ble.n	80007dc <__aeabi_fdiv+0x1d0>
 80007da:	e76d      	b.n	80006b8 <__aeabi_fdiv+0xac>
 80007dc:	0021      	movs	r1, r4
 80007de:	379e      	adds	r7, #158	@ 0x9e
 80007e0:	40d9      	lsrs	r1, r3
 80007e2:	40bc      	lsls	r4, r7
 80007e4:	000b      	movs	r3, r1
 80007e6:	1e61      	subs	r1, r4, #1
 80007e8:	418c      	sbcs	r4, r1
 80007ea:	4323      	orrs	r3, r4
 80007ec:	0759      	lsls	r1, r3, #29
 80007ee:	d004      	beq.n	80007fa <__aeabi_fdiv+0x1ee>
 80007f0:	210f      	movs	r1, #15
 80007f2:	4019      	ands	r1, r3
 80007f4:	2904      	cmp	r1, #4
 80007f6:	d000      	beq.n	80007fa <__aeabi_fdiv+0x1ee>
 80007f8:	3304      	adds	r3, #4
 80007fa:	0159      	lsls	r1, r3, #5
 80007fc:	d413      	bmi.n	8000826 <__aeabi_fdiv+0x21a>
 80007fe:	019b      	lsls	r3, r3, #6
 8000800:	2000      	movs	r0, #0
 8000802:	0a5c      	lsrs	r4, r3, #9
 8000804:	e75a      	b.n	80006bc <__aeabi_fdiv+0xb0>
 8000806:	231a      	movs	r3, #26
 8000808:	2401      	movs	r4, #1
 800080a:	1a2d      	subs	r5, r5, r0
 800080c:	e7d0      	b.n	80007b0 <__aeabi_fdiv+0x1a4>
 800080e:	1e98      	subs	r0, r3, #2
 8000810:	4243      	negs	r3, r0
 8000812:	4158      	adcs	r0, r3
 8000814:	4240      	negs	r0, r0
 8000816:	0032      	movs	r2, r6
 8000818:	2400      	movs	r4, #0
 800081a:	b2c0      	uxtb	r0, r0
 800081c:	e74e      	b.n	80006bc <__aeabi_fdiv+0xb0>
 800081e:	4642      	mov	r2, r8
 8000820:	20ff      	movs	r0, #255	@ 0xff
 8000822:	2400      	movs	r4, #0
 8000824:	e74a      	b.n	80006bc <__aeabi_fdiv+0xb0>
 8000826:	2001      	movs	r0, #1
 8000828:	2400      	movs	r4, #0
 800082a:	e747      	b.n	80006bc <__aeabi_fdiv+0xb0>
 800082c:	08007d2c 	.word	0x08007d2c
 8000830:	08007d6c 	.word	0x08007d6c
 8000834:	f7ffffff 	.word	0xf7ffffff

08000838 <__aeabi_fsub>:
 8000838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800083a:	4647      	mov	r7, r8
 800083c:	46ce      	mov	lr, r9
 800083e:	0243      	lsls	r3, r0, #9
 8000840:	b580      	push	{r7, lr}
 8000842:	0a5f      	lsrs	r7, r3, #9
 8000844:	099b      	lsrs	r3, r3, #6
 8000846:	0045      	lsls	r5, r0, #1
 8000848:	004a      	lsls	r2, r1, #1
 800084a:	469c      	mov	ip, r3
 800084c:	024b      	lsls	r3, r1, #9
 800084e:	0fc4      	lsrs	r4, r0, #31
 8000850:	0fce      	lsrs	r6, r1, #31
 8000852:	0e2d      	lsrs	r5, r5, #24
 8000854:	0a58      	lsrs	r0, r3, #9
 8000856:	0e12      	lsrs	r2, r2, #24
 8000858:	0999      	lsrs	r1, r3, #6
 800085a:	2aff      	cmp	r2, #255	@ 0xff
 800085c:	d06b      	beq.n	8000936 <__aeabi_fsub+0xfe>
 800085e:	2301      	movs	r3, #1
 8000860:	405e      	eors	r6, r3
 8000862:	1aab      	subs	r3, r5, r2
 8000864:	42b4      	cmp	r4, r6
 8000866:	d04b      	beq.n	8000900 <__aeabi_fsub+0xc8>
 8000868:	2b00      	cmp	r3, #0
 800086a:	dc00      	bgt.n	800086e <__aeabi_fsub+0x36>
 800086c:	e0ff      	b.n	8000a6e <__aeabi_fsub+0x236>
 800086e:	2a00      	cmp	r2, #0
 8000870:	d100      	bne.n	8000874 <__aeabi_fsub+0x3c>
 8000872:	e088      	b.n	8000986 <__aeabi_fsub+0x14e>
 8000874:	2dff      	cmp	r5, #255	@ 0xff
 8000876:	d100      	bne.n	800087a <__aeabi_fsub+0x42>
 8000878:	e0ef      	b.n	8000a5a <__aeabi_fsub+0x222>
 800087a:	2280      	movs	r2, #128	@ 0x80
 800087c:	04d2      	lsls	r2, r2, #19
 800087e:	4311      	orrs	r1, r2
 8000880:	2001      	movs	r0, #1
 8000882:	2b1b      	cmp	r3, #27
 8000884:	dc08      	bgt.n	8000898 <__aeabi_fsub+0x60>
 8000886:	0008      	movs	r0, r1
 8000888:	2220      	movs	r2, #32
 800088a:	40d8      	lsrs	r0, r3
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	4099      	lsls	r1, r3
 8000890:	000b      	movs	r3, r1
 8000892:	1e5a      	subs	r2, r3, #1
 8000894:	4193      	sbcs	r3, r2
 8000896:	4318      	orrs	r0, r3
 8000898:	4663      	mov	r3, ip
 800089a:	1a1b      	subs	r3, r3, r0
 800089c:	469c      	mov	ip, r3
 800089e:	4663      	mov	r3, ip
 80008a0:	015b      	lsls	r3, r3, #5
 80008a2:	d400      	bmi.n	80008a6 <__aeabi_fsub+0x6e>
 80008a4:	e0cd      	b.n	8000a42 <__aeabi_fsub+0x20a>
 80008a6:	4663      	mov	r3, ip
 80008a8:	019f      	lsls	r7, r3, #6
 80008aa:	09bf      	lsrs	r7, r7, #6
 80008ac:	0038      	movs	r0, r7
 80008ae:	f000 fb03 	bl	8000eb8 <__clzsi2>
 80008b2:	003b      	movs	r3, r7
 80008b4:	3805      	subs	r0, #5
 80008b6:	4083      	lsls	r3, r0
 80008b8:	4285      	cmp	r5, r0
 80008ba:	dc00      	bgt.n	80008be <__aeabi_fsub+0x86>
 80008bc:	e0a2      	b.n	8000a04 <__aeabi_fsub+0x1cc>
 80008be:	4ab7      	ldr	r2, [pc, #732]	@ (8000b9c <__aeabi_fsub+0x364>)
 80008c0:	1a2d      	subs	r5, r5, r0
 80008c2:	401a      	ands	r2, r3
 80008c4:	4694      	mov	ip, r2
 80008c6:	075a      	lsls	r2, r3, #29
 80008c8:	d100      	bne.n	80008cc <__aeabi_fsub+0x94>
 80008ca:	e0c3      	b.n	8000a54 <__aeabi_fsub+0x21c>
 80008cc:	220f      	movs	r2, #15
 80008ce:	4013      	ands	r3, r2
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	d100      	bne.n	80008d6 <__aeabi_fsub+0x9e>
 80008d4:	e0be      	b.n	8000a54 <__aeabi_fsub+0x21c>
 80008d6:	2304      	movs	r3, #4
 80008d8:	4698      	mov	r8, r3
 80008da:	44c4      	add	ip, r8
 80008dc:	4663      	mov	r3, ip
 80008de:	015b      	lsls	r3, r3, #5
 80008e0:	d400      	bmi.n	80008e4 <__aeabi_fsub+0xac>
 80008e2:	e0b7      	b.n	8000a54 <__aeabi_fsub+0x21c>
 80008e4:	1c68      	adds	r0, r5, #1
 80008e6:	2dfe      	cmp	r5, #254	@ 0xfe
 80008e8:	d000      	beq.n	80008ec <__aeabi_fsub+0xb4>
 80008ea:	e0a5      	b.n	8000a38 <__aeabi_fsub+0x200>
 80008ec:	20ff      	movs	r0, #255	@ 0xff
 80008ee:	2200      	movs	r2, #0
 80008f0:	05c0      	lsls	r0, r0, #23
 80008f2:	4310      	orrs	r0, r2
 80008f4:	07e4      	lsls	r4, r4, #31
 80008f6:	4320      	orrs	r0, r4
 80008f8:	bcc0      	pop	{r6, r7}
 80008fa:	46b9      	mov	r9, r7
 80008fc:	46b0      	mov	r8, r6
 80008fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000900:	2b00      	cmp	r3, #0
 8000902:	dc00      	bgt.n	8000906 <__aeabi_fsub+0xce>
 8000904:	e1eb      	b.n	8000cde <__aeabi_fsub+0x4a6>
 8000906:	2a00      	cmp	r2, #0
 8000908:	d046      	beq.n	8000998 <__aeabi_fsub+0x160>
 800090a:	2dff      	cmp	r5, #255	@ 0xff
 800090c:	d100      	bne.n	8000910 <__aeabi_fsub+0xd8>
 800090e:	e0a4      	b.n	8000a5a <__aeabi_fsub+0x222>
 8000910:	2280      	movs	r2, #128	@ 0x80
 8000912:	04d2      	lsls	r2, r2, #19
 8000914:	4311      	orrs	r1, r2
 8000916:	2b1b      	cmp	r3, #27
 8000918:	dc00      	bgt.n	800091c <__aeabi_fsub+0xe4>
 800091a:	e0fb      	b.n	8000b14 <__aeabi_fsub+0x2dc>
 800091c:	2305      	movs	r3, #5
 800091e:	4698      	mov	r8, r3
 8000920:	002b      	movs	r3, r5
 8000922:	44c4      	add	ip, r8
 8000924:	4662      	mov	r2, ip
 8000926:	08d7      	lsrs	r7, r2, #3
 8000928:	2bff      	cmp	r3, #255	@ 0xff
 800092a:	d100      	bne.n	800092e <__aeabi_fsub+0xf6>
 800092c:	e095      	b.n	8000a5a <__aeabi_fsub+0x222>
 800092e:	027a      	lsls	r2, r7, #9
 8000930:	0a52      	lsrs	r2, r2, #9
 8000932:	b2d8      	uxtb	r0, r3
 8000934:	e7dc      	b.n	80008f0 <__aeabi_fsub+0xb8>
 8000936:	002b      	movs	r3, r5
 8000938:	3bff      	subs	r3, #255	@ 0xff
 800093a:	4699      	mov	r9, r3
 800093c:	2900      	cmp	r1, #0
 800093e:	d118      	bne.n	8000972 <__aeabi_fsub+0x13a>
 8000940:	2301      	movs	r3, #1
 8000942:	405e      	eors	r6, r3
 8000944:	42b4      	cmp	r4, r6
 8000946:	d100      	bne.n	800094a <__aeabi_fsub+0x112>
 8000948:	e0ca      	b.n	8000ae0 <__aeabi_fsub+0x2a8>
 800094a:	464b      	mov	r3, r9
 800094c:	2b00      	cmp	r3, #0
 800094e:	d02d      	beq.n	80009ac <__aeabi_fsub+0x174>
 8000950:	2d00      	cmp	r5, #0
 8000952:	d000      	beq.n	8000956 <__aeabi_fsub+0x11e>
 8000954:	e13c      	b.n	8000bd0 <__aeabi_fsub+0x398>
 8000956:	23ff      	movs	r3, #255	@ 0xff
 8000958:	4664      	mov	r4, ip
 800095a:	2c00      	cmp	r4, #0
 800095c:	d100      	bne.n	8000960 <__aeabi_fsub+0x128>
 800095e:	e15f      	b.n	8000c20 <__aeabi_fsub+0x3e8>
 8000960:	1e5d      	subs	r5, r3, #1
 8000962:	2b01      	cmp	r3, #1
 8000964:	d100      	bne.n	8000968 <__aeabi_fsub+0x130>
 8000966:	e174      	b.n	8000c52 <__aeabi_fsub+0x41a>
 8000968:	0034      	movs	r4, r6
 800096a:	2bff      	cmp	r3, #255	@ 0xff
 800096c:	d074      	beq.n	8000a58 <__aeabi_fsub+0x220>
 800096e:	002b      	movs	r3, r5
 8000970:	e103      	b.n	8000b7a <__aeabi_fsub+0x342>
 8000972:	42b4      	cmp	r4, r6
 8000974:	d100      	bne.n	8000978 <__aeabi_fsub+0x140>
 8000976:	e09c      	b.n	8000ab2 <__aeabi_fsub+0x27a>
 8000978:	2b00      	cmp	r3, #0
 800097a:	d017      	beq.n	80009ac <__aeabi_fsub+0x174>
 800097c:	2d00      	cmp	r5, #0
 800097e:	d0ea      	beq.n	8000956 <__aeabi_fsub+0x11e>
 8000980:	0007      	movs	r7, r0
 8000982:	0034      	movs	r4, r6
 8000984:	e06c      	b.n	8000a60 <__aeabi_fsub+0x228>
 8000986:	2900      	cmp	r1, #0
 8000988:	d0cc      	beq.n	8000924 <__aeabi_fsub+0xec>
 800098a:	1e5a      	subs	r2, r3, #1
 800098c:	2b01      	cmp	r3, #1
 800098e:	d02b      	beq.n	80009e8 <__aeabi_fsub+0x1b0>
 8000990:	2bff      	cmp	r3, #255	@ 0xff
 8000992:	d062      	beq.n	8000a5a <__aeabi_fsub+0x222>
 8000994:	0013      	movs	r3, r2
 8000996:	e773      	b.n	8000880 <__aeabi_fsub+0x48>
 8000998:	2900      	cmp	r1, #0
 800099a:	d0c3      	beq.n	8000924 <__aeabi_fsub+0xec>
 800099c:	1e5a      	subs	r2, r3, #1
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d100      	bne.n	80009a4 <__aeabi_fsub+0x16c>
 80009a2:	e11e      	b.n	8000be2 <__aeabi_fsub+0x3aa>
 80009a4:	2bff      	cmp	r3, #255	@ 0xff
 80009a6:	d058      	beq.n	8000a5a <__aeabi_fsub+0x222>
 80009a8:	0013      	movs	r3, r2
 80009aa:	e7b4      	b.n	8000916 <__aeabi_fsub+0xde>
 80009ac:	22fe      	movs	r2, #254	@ 0xfe
 80009ae:	1c6b      	adds	r3, r5, #1
 80009b0:	421a      	tst	r2, r3
 80009b2:	d10d      	bne.n	80009d0 <__aeabi_fsub+0x198>
 80009b4:	2d00      	cmp	r5, #0
 80009b6:	d060      	beq.n	8000a7a <__aeabi_fsub+0x242>
 80009b8:	4663      	mov	r3, ip
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fsub+0x188>
 80009be:	e120      	b.n	8000c02 <__aeabi_fsub+0x3ca>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	d000      	beq.n	80009c6 <__aeabi_fsub+0x18e>
 80009c4:	e128      	b.n	8000c18 <__aeabi_fsub+0x3e0>
 80009c6:	2280      	movs	r2, #128	@ 0x80
 80009c8:	2400      	movs	r4, #0
 80009ca:	20ff      	movs	r0, #255	@ 0xff
 80009cc:	03d2      	lsls	r2, r2, #15
 80009ce:	e78f      	b.n	80008f0 <__aeabi_fsub+0xb8>
 80009d0:	4663      	mov	r3, ip
 80009d2:	1a5f      	subs	r7, r3, r1
 80009d4:	017b      	lsls	r3, r7, #5
 80009d6:	d500      	bpl.n	80009da <__aeabi_fsub+0x1a2>
 80009d8:	e0fe      	b.n	8000bd8 <__aeabi_fsub+0x3a0>
 80009da:	2f00      	cmp	r7, #0
 80009dc:	d000      	beq.n	80009e0 <__aeabi_fsub+0x1a8>
 80009de:	e765      	b.n	80008ac <__aeabi_fsub+0x74>
 80009e0:	2400      	movs	r4, #0
 80009e2:	2000      	movs	r0, #0
 80009e4:	2200      	movs	r2, #0
 80009e6:	e783      	b.n	80008f0 <__aeabi_fsub+0xb8>
 80009e8:	4663      	mov	r3, ip
 80009ea:	1a59      	subs	r1, r3, r1
 80009ec:	014b      	lsls	r3, r1, #5
 80009ee:	d400      	bmi.n	80009f2 <__aeabi_fsub+0x1ba>
 80009f0:	e119      	b.n	8000c26 <__aeabi_fsub+0x3ee>
 80009f2:	018f      	lsls	r7, r1, #6
 80009f4:	09bf      	lsrs	r7, r7, #6
 80009f6:	0038      	movs	r0, r7
 80009f8:	f000 fa5e 	bl	8000eb8 <__clzsi2>
 80009fc:	003b      	movs	r3, r7
 80009fe:	3805      	subs	r0, #5
 8000a00:	4083      	lsls	r3, r0
 8000a02:	2501      	movs	r5, #1
 8000a04:	2220      	movs	r2, #32
 8000a06:	1b40      	subs	r0, r0, r5
 8000a08:	3001      	adds	r0, #1
 8000a0a:	1a12      	subs	r2, r2, r0
 8000a0c:	0019      	movs	r1, r3
 8000a0e:	4093      	lsls	r3, r2
 8000a10:	40c1      	lsrs	r1, r0
 8000a12:	1e5a      	subs	r2, r3, #1
 8000a14:	4193      	sbcs	r3, r2
 8000a16:	4319      	orrs	r1, r3
 8000a18:	468c      	mov	ip, r1
 8000a1a:	1e0b      	subs	r3, r1, #0
 8000a1c:	d0e1      	beq.n	80009e2 <__aeabi_fsub+0x1aa>
 8000a1e:	075b      	lsls	r3, r3, #29
 8000a20:	d100      	bne.n	8000a24 <__aeabi_fsub+0x1ec>
 8000a22:	e152      	b.n	8000cca <__aeabi_fsub+0x492>
 8000a24:	230f      	movs	r3, #15
 8000a26:	2500      	movs	r5, #0
 8000a28:	400b      	ands	r3, r1
 8000a2a:	2b04      	cmp	r3, #4
 8000a2c:	d000      	beq.n	8000a30 <__aeabi_fsub+0x1f8>
 8000a2e:	e752      	b.n	80008d6 <__aeabi_fsub+0x9e>
 8000a30:	2001      	movs	r0, #1
 8000a32:	014a      	lsls	r2, r1, #5
 8000a34:	d400      	bmi.n	8000a38 <__aeabi_fsub+0x200>
 8000a36:	e092      	b.n	8000b5e <__aeabi_fsub+0x326>
 8000a38:	b2c0      	uxtb	r0, r0
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	019a      	lsls	r2, r3, #6
 8000a3e:	0a52      	lsrs	r2, r2, #9
 8000a40:	e756      	b.n	80008f0 <__aeabi_fsub+0xb8>
 8000a42:	4663      	mov	r3, ip
 8000a44:	075b      	lsls	r3, r3, #29
 8000a46:	d005      	beq.n	8000a54 <__aeabi_fsub+0x21c>
 8000a48:	230f      	movs	r3, #15
 8000a4a:	4662      	mov	r2, ip
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	d000      	beq.n	8000a54 <__aeabi_fsub+0x21c>
 8000a52:	e740      	b.n	80008d6 <__aeabi_fsub+0x9e>
 8000a54:	002b      	movs	r3, r5
 8000a56:	e765      	b.n	8000924 <__aeabi_fsub+0xec>
 8000a58:	0007      	movs	r7, r0
 8000a5a:	2f00      	cmp	r7, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fsub+0x228>
 8000a5e:	e745      	b.n	80008ec <__aeabi_fsub+0xb4>
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	03d2      	lsls	r2, r2, #15
 8000a64:	433a      	orrs	r2, r7
 8000a66:	0252      	lsls	r2, r2, #9
 8000a68:	20ff      	movs	r0, #255	@ 0xff
 8000a6a:	0a52      	lsrs	r2, r2, #9
 8000a6c:	e740      	b.n	80008f0 <__aeabi_fsub+0xb8>
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d179      	bne.n	8000b66 <__aeabi_fsub+0x32e>
 8000a72:	22fe      	movs	r2, #254	@ 0xfe
 8000a74:	1c6b      	adds	r3, r5, #1
 8000a76:	421a      	tst	r2, r3
 8000a78:	d1aa      	bne.n	80009d0 <__aeabi_fsub+0x198>
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_fsub+0x24a>
 8000a80:	e0f5      	b.n	8000c6e <__aeabi_fsub+0x436>
 8000a82:	2900      	cmp	r1, #0
 8000a84:	d100      	bne.n	8000a88 <__aeabi_fsub+0x250>
 8000a86:	e0d1      	b.n	8000c2c <__aeabi_fsub+0x3f4>
 8000a88:	1a5f      	subs	r7, r3, r1
 8000a8a:	2380      	movs	r3, #128	@ 0x80
 8000a8c:	04db      	lsls	r3, r3, #19
 8000a8e:	421f      	tst	r7, r3
 8000a90:	d100      	bne.n	8000a94 <__aeabi_fsub+0x25c>
 8000a92:	e10e      	b.n	8000cb2 <__aeabi_fsub+0x47a>
 8000a94:	4662      	mov	r2, ip
 8000a96:	2401      	movs	r4, #1
 8000a98:	1a8a      	subs	r2, r1, r2
 8000a9a:	4694      	mov	ip, r2
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	4034      	ands	r4, r6
 8000aa0:	2a00      	cmp	r2, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fsub+0x26e>
 8000aa4:	e724      	b.n	80008f0 <__aeabi_fsub+0xb8>
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	421a      	tst	r2, r3
 8000aaa:	d1c6      	bne.n	8000a3a <__aeabi_fsub+0x202>
 8000aac:	2300      	movs	r3, #0
 8000aae:	08d7      	lsrs	r7, r2, #3
 8000ab0:	e73d      	b.n	800092e <__aeabi_fsub+0xf6>
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d017      	beq.n	8000ae6 <__aeabi_fsub+0x2ae>
 8000ab6:	2d00      	cmp	r5, #0
 8000ab8:	d000      	beq.n	8000abc <__aeabi_fsub+0x284>
 8000aba:	e0af      	b.n	8000c1c <__aeabi_fsub+0x3e4>
 8000abc:	23ff      	movs	r3, #255	@ 0xff
 8000abe:	4665      	mov	r5, ip
 8000ac0:	2d00      	cmp	r5, #0
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_fsub+0x28e>
 8000ac4:	e0ad      	b.n	8000c22 <__aeabi_fsub+0x3ea>
 8000ac6:	1e5e      	subs	r6, r3, #1
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d100      	bne.n	8000ace <__aeabi_fsub+0x296>
 8000acc:	e089      	b.n	8000be2 <__aeabi_fsub+0x3aa>
 8000ace:	2bff      	cmp	r3, #255	@ 0xff
 8000ad0:	d0c2      	beq.n	8000a58 <__aeabi_fsub+0x220>
 8000ad2:	2e1b      	cmp	r6, #27
 8000ad4:	dc00      	bgt.n	8000ad8 <__aeabi_fsub+0x2a0>
 8000ad6:	e0ab      	b.n	8000c30 <__aeabi_fsub+0x3f8>
 8000ad8:	1d4b      	adds	r3, r1, #5
 8000ada:	469c      	mov	ip, r3
 8000adc:	0013      	movs	r3, r2
 8000ade:	e721      	b.n	8000924 <__aeabi_fsub+0xec>
 8000ae0:	464b      	mov	r3, r9
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d170      	bne.n	8000bc8 <__aeabi_fsub+0x390>
 8000ae6:	22fe      	movs	r2, #254	@ 0xfe
 8000ae8:	1c6b      	adds	r3, r5, #1
 8000aea:	421a      	tst	r2, r3
 8000aec:	d15e      	bne.n	8000bac <__aeabi_fsub+0x374>
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	d000      	beq.n	8000af4 <__aeabi_fsub+0x2bc>
 8000af2:	e0c3      	b.n	8000c7c <__aeabi_fsub+0x444>
 8000af4:	4663      	mov	r3, ip
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d100      	bne.n	8000afc <__aeabi_fsub+0x2c4>
 8000afa:	e0d0      	b.n	8000c9e <__aeabi_fsub+0x466>
 8000afc:	2900      	cmp	r1, #0
 8000afe:	d100      	bne.n	8000b02 <__aeabi_fsub+0x2ca>
 8000b00:	e094      	b.n	8000c2c <__aeabi_fsub+0x3f4>
 8000b02:	000a      	movs	r2, r1
 8000b04:	4462      	add	r2, ip
 8000b06:	0153      	lsls	r3, r2, #5
 8000b08:	d400      	bmi.n	8000b0c <__aeabi_fsub+0x2d4>
 8000b0a:	e0d8      	b.n	8000cbe <__aeabi_fsub+0x486>
 8000b0c:	0192      	lsls	r2, r2, #6
 8000b0e:	2001      	movs	r0, #1
 8000b10:	0a52      	lsrs	r2, r2, #9
 8000b12:	e6ed      	b.n	80008f0 <__aeabi_fsub+0xb8>
 8000b14:	0008      	movs	r0, r1
 8000b16:	2220      	movs	r2, #32
 8000b18:	40d8      	lsrs	r0, r3
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	4099      	lsls	r1, r3
 8000b1e:	000b      	movs	r3, r1
 8000b20:	1e5a      	subs	r2, r3, #1
 8000b22:	4193      	sbcs	r3, r2
 8000b24:	4303      	orrs	r3, r0
 8000b26:	449c      	add	ip, r3
 8000b28:	4663      	mov	r3, ip
 8000b2a:	015b      	lsls	r3, r3, #5
 8000b2c:	d589      	bpl.n	8000a42 <__aeabi_fsub+0x20a>
 8000b2e:	3501      	adds	r5, #1
 8000b30:	2dff      	cmp	r5, #255	@ 0xff
 8000b32:	d100      	bne.n	8000b36 <__aeabi_fsub+0x2fe>
 8000b34:	e6da      	b.n	80008ec <__aeabi_fsub+0xb4>
 8000b36:	4662      	mov	r2, ip
 8000b38:	2301      	movs	r3, #1
 8000b3a:	4919      	ldr	r1, [pc, #100]	@ (8000ba0 <__aeabi_fsub+0x368>)
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	0852      	lsrs	r2, r2, #1
 8000b40:	400a      	ands	r2, r1
 8000b42:	431a      	orrs	r2, r3
 8000b44:	0013      	movs	r3, r2
 8000b46:	4694      	mov	ip, r2
 8000b48:	075b      	lsls	r3, r3, #29
 8000b4a:	d004      	beq.n	8000b56 <__aeabi_fsub+0x31e>
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	4013      	ands	r3, r2
 8000b50:	2b04      	cmp	r3, #4
 8000b52:	d000      	beq.n	8000b56 <__aeabi_fsub+0x31e>
 8000b54:	e6bf      	b.n	80008d6 <__aeabi_fsub+0x9e>
 8000b56:	4663      	mov	r3, ip
 8000b58:	015b      	lsls	r3, r3, #5
 8000b5a:	d500      	bpl.n	8000b5e <__aeabi_fsub+0x326>
 8000b5c:	e6c2      	b.n	80008e4 <__aeabi_fsub+0xac>
 8000b5e:	4663      	mov	r3, ip
 8000b60:	08df      	lsrs	r7, r3, #3
 8000b62:	002b      	movs	r3, r5
 8000b64:	e6e3      	b.n	800092e <__aeabi_fsub+0xf6>
 8000b66:	1b53      	subs	r3, r2, r5
 8000b68:	2d00      	cmp	r5, #0
 8000b6a:	d100      	bne.n	8000b6e <__aeabi_fsub+0x336>
 8000b6c:	e6f4      	b.n	8000958 <__aeabi_fsub+0x120>
 8000b6e:	2080      	movs	r0, #128	@ 0x80
 8000b70:	4664      	mov	r4, ip
 8000b72:	04c0      	lsls	r0, r0, #19
 8000b74:	4304      	orrs	r4, r0
 8000b76:	46a4      	mov	ip, r4
 8000b78:	0034      	movs	r4, r6
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	2b1b      	cmp	r3, #27
 8000b7e:	dc09      	bgt.n	8000b94 <__aeabi_fsub+0x35c>
 8000b80:	2520      	movs	r5, #32
 8000b82:	4660      	mov	r0, ip
 8000b84:	40d8      	lsrs	r0, r3
 8000b86:	1aeb      	subs	r3, r5, r3
 8000b88:	4665      	mov	r5, ip
 8000b8a:	409d      	lsls	r5, r3
 8000b8c:	002b      	movs	r3, r5
 8000b8e:	1e5d      	subs	r5, r3, #1
 8000b90:	41ab      	sbcs	r3, r5
 8000b92:	4318      	orrs	r0, r3
 8000b94:	1a0b      	subs	r3, r1, r0
 8000b96:	469c      	mov	ip, r3
 8000b98:	0015      	movs	r5, r2
 8000b9a:	e680      	b.n	800089e <__aeabi_fsub+0x66>
 8000b9c:	fbffffff 	.word	0xfbffffff
 8000ba0:	7dffffff 	.word	0x7dffffff
 8000ba4:	22fe      	movs	r2, #254	@ 0xfe
 8000ba6:	1c6b      	adds	r3, r5, #1
 8000ba8:	4213      	tst	r3, r2
 8000baa:	d0a3      	beq.n	8000af4 <__aeabi_fsub+0x2bc>
 8000bac:	2bff      	cmp	r3, #255	@ 0xff
 8000bae:	d100      	bne.n	8000bb2 <__aeabi_fsub+0x37a>
 8000bb0:	e69c      	b.n	80008ec <__aeabi_fsub+0xb4>
 8000bb2:	4461      	add	r1, ip
 8000bb4:	0849      	lsrs	r1, r1, #1
 8000bb6:	074a      	lsls	r2, r1, #29
 8000bb8:	d049      	beq.n	8000c4e <__aeabi_fsub+0x416>
 8000bba:	220f      	movs	r2, #15
 8000bbc:	400a      	ands	r2, r1
 8000bbe:	2a04      	cmp	r2, #4
 8000bc0:	d045      	beq.n	8000c4e <__aeabi_fsub+0x416>
 8000bc2:	1d0a      	adds	r2, r1, #4
 8000bc4:	4694      	mov	ip, r2
 8000bc6:	e6ad      	b.n	8000924 <__aeabi_fsub+0xec>
 8000bc8:	2d00      	cmp	r5, #0
 8000bca:	d100      	bne.n	8000bce <__aeabi_fsub+0x396>
 8000bcc:	e776      	b.n	8000abc <__aeabi_fsub+0x284>
 8000bce:	e68d      	b.n	80008ec <__aeabi_fsub+0xb4>
 8000bd0:	0034      	movs	r4, r6
 8000bd2:	20ff      	movs	r0, #255	@ 0xff
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	e68b      	b.n	80008f0 <__aeabi_fsub+0xb8>
 8000bd8:	4663      	mov	r3, ip
 8000bda:	2401      	movs	r4, #1
 8000bdc:	1acf      	subs	r7, r1, r3
 8000bde:	4034      	ands	r4, r6
 8000be0:	e664      	b.n	80008ac <__aeabi_fsub+0x74>
 8000be2:	4461      	add	r1, ip
 8000be4:	014b      	lsls	r3, r1, #5
 8000be6:	d56d      	bpl.n	8000cc4 <__aeabi_fsub+0x48c>
 8000be8:	0848      	lsrs	r0, r1, #1
 8000bea:	4944      	ldr	r1, [pc, #272]	@ (8000cfc <__aeabi_fsub+0x4c4>)
 8000bec:	4001      	ands	r1, r0
 8000bee:	0743      	lsls	r3, r0, #29
 8000bf0:	d02c      	beq.n	8000c4c <__aeabi_fsub+0x414>
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	4003      	ands	r3, r0
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	d028      	beq.n	8000c4c <__aeabi_fsub+0x414>
 8000bfa:	1d0b      	adds	r3, r1, #4
 8000bfc:	469c      	mov	ip, r3
 8000bfe:	2302      	movs	r3, #2
 8000c00:	e690      	b.n	8000924 <__aeabi_fsub+0xec>
 8000c02:	2900      	cmp	r1, #0
 8000c04:	d100      	bne.n	8000c08 <__aeabi_fsub+0x3d0>
 8000c06:	e72b      	b.n	8000a60 <__aeabi_fsub+0x228>
 8000c08:	2380      	movs	r3, #128	@ 0x80
 8000c0a:	03db      	lsls	r3, r3, #15
 8000c0c:	429f      	cmp	r7, r3
 8000c0e:	d200      	bcs.n	8000c12 <__aeabi_fsub+0x3da>
 8000c10:	e726      	b.n	8000a60 <__aeabi_fsub+0x228>
 8000c12:	4298      	cmp	r0, r3
 8000c14:	d300      	bcc.n	8000c18 <__aeabi_fsub+0x3e0>
 8000c16:	e723      	b.n	8000a60 <__aeabi_fsub+0x228>
 8000c18:	2401      	movs	r4, #1
 8000c1a:	4034      	ands	r4, r6
 8000c1c:	0007      	movs	r7, r0
 8000c1e:	e71f      	b.n	8000a60 <__aeabi_fsub+0x228>
 8000c20:	0034      	movs	r4, r6
 8000c22:	468c      	mov	ip, r1
 8000c24:	e67e      	b.n	8000924 <__aeabi_fsub+0xec>
 8000c26:	2301      	movs	r3, #1
 8000c28:	08cf      	lsrs	r7, r1, #3
 8000c2a:	e680      	b.n	800092e <__aeabi_fsub+0xf6>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	e67e      	b.n	800092e <__aeabi_fsub+0xf6>
 8000c30:	2020      	movs	r0, #32
 8000c32:	4665      	mov	r5, ip
 8000c34:	1b80      	subs	r0, r0, r6
 8000c36:	4085      	lsls	r5, r0
 8000c38:	4663      	mov	r3, ip
 8000c3a:	0028      	movs	r0, r5
 8000c3c:	40f3      	lsrs	r3, r6
 8000c3e:	1e45      	subs	r5, r0, #1
 8000c40:	41a8      	sbcs	r0, r5
 8000c42:	4303      	orrs	r3, r0
 8000c44:	469c      	mov	ip, r3
 8000c46:	0015      	movs	r5, r2
 8000c48:	448c      	add	ip, r1
 8000c4a:	e76d      	b.n	8000b28 <__aeabi_fsub+0x2f0>
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	08cf      	lsrs	r7, r1, #3
 8000c50:	e66d      	b.n	800092e <__aeabi_fsub+0xf6>
 8000c52:	1b0f      	subs	r7, r1, r4
 8000c54:	017b      	lsls	r3, r7, #5
 8000c56:	d528      	bpl.n	8000caa <__aeabi_fsub+0x472>
 8000c58:	01bf      	lsls	r7, r7, #6
 8000c5a:	09bf      	lsrs	r7, r7, #6
 8000c5c:	0038      	movs	r0, r7
 8000c5e:	f000 f92b 	bl	8000eb8 <__clzsi2>
 8000c62:	003b      	movs	r3, r7
 8000c64:	3805      	subs	r0, #5
 8000c66:	4083      	lsls	r3, r0
 8000c68:	0034      	movs	r4, r6
 8000c6a:	2501      	movs	r5, #1
 8000c6c:	e6ca      	b.n	8000a04 <__aeabi_fsub+0x1cc>
 8000c6e:	2900      	cmp	r1, #0
 8000c70:	d100      	bne.n	8000c74 <__aeabi_fsub+0x43c>
 8000c72:	e6b5      	b.n	80009e0 <__aeabi_fsub+0x1a8>
 8000c74:	2401      	movs	r4, #1
 8000c76:	0007      	movs	r7, r0
 8000c78:	4034      	ands	r4, r6
 8000c7a:	e658      	b.n	800092e <__aeabi_fsub+0xf6>
 8000c7c:	4663      	mov	r3, ip
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d100      	bne.n	8000c84 <__aeabi_fsub+0x44c>
 8000c82:	e6e9      	b.n	8000a58 <__aeabi_fsub+0x220>
 8000c84:	2900      	cmp	r1, #0
 8000c86:	d100      	bne.n	8000c8a <__aeabi_fsub+0x452>
 8000c88:	e6ea      	b.n	8000a60 <__aeabi_fsub+0x228>
 8000c8a:	2380      	movs	r3, #128	@ 0x80
 8000c8c:	03db      	lsls	r3, r3, #15
 8000c8e:	429f      	cmp	r7, r3
 8000c90:	d200      	bcs.n	8000c94 <__aeabi_fsub+0x45c>
 8000c92:	e6e5      	b.n	8000a60 <__aeabi_fsub+0x228>
 8000c94:	4298      	cmp	r0, r3
 8000c96:	d300      	bcc.n	8000c9a <__aeabi_fsub+0x462>
 8000c98:	e6e2      	b.n	8000a60 <__aeabi_fsub+0x228>
 8000c9a:	0007      	movs	r7, r0
 8000c9c:	e6e0      	b.n	8000a60 <__aeabi_fsub+0x228>
 8000c9e:	2900      	cmp	r1, #0
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_fsub+0x46c>
 8000ca2:	e69e      	b.n	80009e2 <__aeabi_fsub+0x1aa>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	08cf      	lsrs	r7, r1, #3
 8000ca8:	e641      	b.n	800092e <__aeabi_fsub+0xf6>
 8000caa:	0034      	movs	r4, r6
 8000cac:	2301      	movs	r3, #1
 8000cae:	08ff      	lsrs	r7, r7, #3
 8000cb0:	e63d      	b.n	800092e <__aeabi_fsub+0xf6>
 8000cb2:	2f00      	cmp	r7, #0
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_fsub+0x480>
 8000cb6:	e693      	b.n	80009e0 <__aeabi_fsub+0x1a8>
 8000cb8:	2300      	movs	r3, #0
 8000cba:	08ff      	lsrs	r7, r7, #3
 8000cbc:	e637      	b.n	800092e <__aeabi_fsub+0xf6>
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	08d7      	lsrs	r7, r2, #3
 8000cc2:	e634      	b.n	800092e <__aeabi_fsub+0xf6>
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	08cf      	lsrs	r7, r1, #3
 8000cc8:	e631      	b.n	800092e <__aeabi_fsub+0xf6>
 8000cca:	2280      	movs	r2, #128	@ 0x80
 8000ccc:	000b      	movs	r3, r1
 8000cce:	04d2      	lsls	r2, r2, #19
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	4211      	tst	r1, r2
 8000cd6:	d000      	beq.n	8000cda <__aeabi_fsub+0x4a2>
 8000cd8:	e6ae      	b.n	8000a38 <__aeabi_fsub+0x200>
 8000cda:	08cf      	lsrs	r7, r1, #3
 8000cdc:	e627      	b.n	800092e <__aeabi_fsub+0xf6>
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_fsub+0x4ac>
 8000ce2:	e75f      	b.n	8000ba4 <__aeabi_fsub+0x36c>
 8000ce4:	1b56      	subs	r6, r2, r5
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d101      	bne.n	8000cee <__aeabi_fsub+0x4b6>
 8000cea:	0033      	movs	r3, r6
 8000cec:	e6e7      	b.n	8000abe <__aeabi_fsub+0x286>
 8000cee:	2380      	movs	r3, #128	@ 0x80
 8000cf0:	4660      	mov	r0, ip
 8000cf2:	04db      	lsls	r3, r3, #19
 8000cf4:	4318      	orrs	r0, r3
 8000cf6:	4684      	mov	ip, r0
 8000cf8:	e6eb      	b.n	8000ad2 <__aeabi_fsub+0x29a>
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	7dffffff 	.word	0x7dffffff

08000d00 <__aeabi_f2iz>:
 8000d00:	0241      	lsls	r1, r0, #9
 8000d02:	0042      	lsls	r2, r0, #1
 8000d04:	0fc3      	lsrs	r3, r0, #31
 8000d06:	0a49      	lsrs	r1, r1, #9
 8000d08:	2000      	movs	r0, #0
 8000d0a:	0e12      	lsrs	r2, r2, #24
 8000d0c:	2a7e      	cmp	r2, #126	@ 0x7e
 8000d0e:	dd03      	ble.n	8000d18 <__aeabi_f2iz+0x18>
 8000d10:	2a9d      	cmp	r2, #157	@ 0x9d
 8000d12:	dd02      	ble.n	8000d1a <__aeabi_f2iz+0x1a>
 8000d14:	4a09      	ldr	r2, [pc, #36]	@ (8000d3c <__aeabi_f2iz+0x3c>)
 8000d16:	1898      	adds	r0, r3, r2
 8000d18:	4770      	bx	lr
 8000d1a:	2080      	movs	r0, #128	@ 0x80
 8000d1c:	0400      	lsls	r0, r0, #16
 8000d1e:	4301      	orrs	r1, r0
 8000d20:	2a95      	cmp	r2, #149	@ 0x95
 8000d22:	dc07      	bgt.n	8000d34 <__aeabi_f2iz+0x34>
 8000d24:	2096      	movs	r0, #150	@ 0x96
 8000d26:	1a82      	subs	r2, r0, r2
 8000d28:	40d1      	lsrs	r1, r2
 8000d2a:	4248      	negs	r0, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1f3      	bne.n	8000d18 <__aeabi_f2iz+0x18>
 8000d30:	0008      	movs	r0, r1
 8000d32:	e7f1      	b.n	8000d18 <__aeabi_f2iz+0x18>
 8000d34:	3a96      	subs	r2, #150	@ 0x96
 8000d36:	4091      	lsls	r1, r2
 8000d38:	e7f7      	b.n	8000d2a <__aeabi_f2iz+0x2a>
 8000d3a:	46c0      	nop			@ (mov r8, r8)
 8000d3c:	7fffffff 	.word	0x7fffffff

08000d40 <__aeabi_d2f>:
 8000d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d42:	004b      	lsls	r3, r1, #1
 8000d44:	030f      	lsls	r7, r1, #12
 8000d46:	0d5b      	lsrs	r3, r3, #21
 8000d48:	4c3a      	ldr	r4, [pc, #232]	@ (8000e34 <__aeabi_d2f+0xf4>)
 8000d4a:	0f45      	lsrs	r5, r0, #29
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	0a7f      	lsrs	r7, r7, #9
 8000d50:	1c5e      	adds	r6, r3, #1
 8000d52:	432f      	orrs	r7, r5
 8000d54:	9000      	str	r0, [sp, #0]
 8000d56:	9101      	str	r1, [sp, #4]
 8000d58:	0fca      	lsrs	r2, r1, #31
 8000d5a:	00c5      	lsls	r5, r0, #3
 8000d5c:	4226      	tst	r6, r4
 8000d5e:	d00b      	beq.n	8000d78 <__aeabi_d2f+0x38>
 8000d60:	4935      	ldr	r1, [pc, #212]	@ (8000e38 <__aeabi_d2f+0xf8>)
 8000d62:	185c      	adds	r4, r3, r1
 8000d64:	2cfe      	cmp	r4, #254	@ 0xfe
 8000d66:	dd13      	ble.n	8000d90 <__aeabi_d2f+0x50>
 8000d68:	20ff      	movs	r0, #255	@ 0xff
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	05c0      	lsls	r0, r0, #23
 8000d6e:	4318      	orrs	r0, r3
 8000d70:	07d2      	lsls	r2, r2, #31
 8000d72:	4310      	orrs	r0, r2
 8000d74:	b003      	add	sp, #12
 8000d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d78:	433d      	orrs	r5, r7
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d101      	bne.n	8000d82 <__aeabi_d2f+0x42>
 8000d7e:	2000      	movs	r0, #0
 8000d80:	e7f4      	b.n	8000d6c <__aeabi_d2f+0x2c>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d0f0      	beq.n	8000d68 <__aeabi_d2f+0x28>
 8000d86:	2380      	movs	r3, #128	@ 0x80
 8000d88:	03db      	lsls	r3, r3, #15
 8000d8a:	20ff      	movs	r0, #255	@ 0xff
 8000d8c:	433b      	orrs	r3, r7
 8000d8e:	e7ed      	b.n	8000d6c <__aeabi_d2f+0x2c>
 8000d90:	2c00      	cmp	r4, #0
 8000d92:	dd0c      	ble.n	8000dae <__aeabi_d2f+0x6e>
 8000d94:	9b00      	ldr	r3, [sp, #0]
 8000d96:	00ff      	lsls	r7, r7, #3
 8000d98:	019b      	lsls	r3, r3, #6
 8000d9a:	1e58      	subs	r0, r3, #1
 8000d9c:	4183      	sbcs	r3, r0
 8000d9e:	0f69      	lsrs	r1, r5, #29
 8000da0:	433b      	orrs	r3, r7
 8000da2:	430b      	orrs	r3, r1
 8000da4:	0759      	lsls	r1, r3, #29
 8000da6:	d127      	bne.n	8000df8 <__aeabi_d2f+0xb8>
 8000da8:	08db      	lsrs	r3, r3, #3
 8000daa:	b2e0      	uxtb	r0, r4
 8000dac:	e7de      	b.n	8000d6c <__aeabi_d2f+0x2c>
 8000dae:	0021      	movs	r1, r4
 8000db0:	3117      	adds	r1, #23
 8000db2:	db31      	blt.n	8000e18 <__aeabi_d2f+0xd8>
 8000db4:	2180      	movs	r1, #128	@ 0x80
 8000db6:	201e      	movs	r0, #30
 8000db8:	0409      	lsls	r1, r1, #16
 8000dba:	4339      	orrs	r1, r7
 8000dbc:	1b00      	subs	r0, r0, r4
 8000dbe:	281f      	cmp	r0, #31
 8000dc0:	dd2d      	ble.n	8000e1e <__aeabi_d2f+0xde>
 8000dc2:	2602      	movs	r6, #2
 8000dc4:	4276      	negs	r6, r6
 8000dc6:	1b34      	subs	r4, r6, r4
 8000dc8:	000e      	movs	r6, r1
 8000dca:	40e6      	lsrs	r6, r4
 8000dcc:	0034      	movs	r4, r6
 8000dce:	2820      	cmp	r0, #32
 8000dd0:	d004      	beq.n	8000ddc <__aeabi_d2f+0x9c>
 8000dd2:	481a      	ldr	r0, [pc, #104]	@ (8000e3c <__aeabi_d2f+0xfc>)
 8000dd4:	4684      	mov	ip, r0
 8000dd6:	4463      	add	r3, ip
 8000dd8:	4099      	lsls	r1, r3
 8000dda:	430d      	orrs	r5, r1
 8000ddc:	002b      	movs	r3, r5
 8000dde:	1e59      	subs	r1, r3, #1
 8000de0:	418b      	sbcs	r3, r1
 8000de2:	4323      	orrs	r3, r4
 8000de4:	0759      	lsls	r1, r3, #29
 8000de6:	d003      	beq.n	8000df0 <__aeabi_d2f+0xb0>
 8000de8:	210f      	movs	r1, #15
 8000dea:	4019      	ands	r1, r3
 8000dec:	2904      	cmp	r1, #4
 8000dee:	d10b      	bne.n	8000e08 <__aeabi_d2f+0xc8>
 8000df0:	019b      	lsls	r3, r3, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a5b      	lsrs	r3, r3, #9
 8000df6:	e7b9      	b.n	8000d6c <__aeabi_d2f+0x2c>
 8000df8:	210f      	movs	r1, #15
 8000dfa:	4019      	ands	r1, r3
 8000dfc:	2904      	cmp	r1, #4
 8000dfe:	d104      	bne.n	8000e0a <__aeabi_d2f+0xca>
 8000e00:	019b      	lsls	r3, r3, #6
 8000e02:	0a5b      	lsrs	r3, r3, #9
 8000e04:	b2e0      	uxtb	r0, r4
 8000e06:	e7b1      	b.n	8000d6c <__aeabi_d2f+0x2c>
 8000e08:	2400      	movs	r4, #0
 8000e0a:	3304      	adds	r3, #4
 8000e0c:	0159      	lsls	r1, r3, #5
 8000e0e:	d5f7      	bpl.n	8000e00 <__aeabi_d2f+0xc0>
 8000e10:	3401      	adds	r4, #1
 8000e12:	2300      	movs	r3, #0
 8000e14:	b2e0      	uxtb	r0, r4
 8000e16:	e7a9      	b.n	8000d6c <__aeabi_d2f+0x2c>
 8000e18:	2000      	movs	r0, #0
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e7a6      	b.n	8000d6c <__aeabi_d2f+0x2c>
 8000e1e:	4c08      	ldr	r4, [pc, #32]	@ (8000e40 <__aeabi_d2f+0x100>)
 8000e20:	191c      	adds	r4, r3, r4
 8000e22:	002b      	movs	r3, r5
 8000e24:	40a5      	lsls	r5, r4
 8000e26:	40c3      	lsrs	r3, r0
 8000e28:	40a1      	lsls	r1, r4
 8000e2a:	1e68      	subs	r0, r5, #1
 8000e2c:	4185      	sbcs	r5, r0
 8000e2e:	4329      	orrs	r1, r5
 8000e30:	430b      	orrs	r3, r1
 8000e32:	e7d7      	b.n	8000de4 <__aeabi_d2f+0xa4>
 8000e34:	000007fe 	.word	0x000007fe
 8000e38:	fffffc80 	.word	0xfffffc80
 8000e3c:	fffffca2 	.word	0xfffffca2
 8000e40:	fffffc82 	.word	0xfffffc82

08000e44 <__aeabi_cfrcmple>:
 8000e44:	4684      	mov	ip, r0
 8000e46:	0008      	movs	r0, r1
 8000e48:	4661      	mov	r1, ip
 8000e4a:	e7ff      	b.n	8000e4c <__aeabi_cfcmpeq>

08000e4c <__aeabi_cfcmpeq>:
 8000e4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000e4e:	f000 f8cd 	bl	8000fec <__lesf2>
 8000e52:	2800      	cmp	r0, #0
 8000e54:	d401      	bmi.n	8000e5a <__aeabi_cfcmpeq+0xe>
 8000e56:	2100      	movs	r1, #0
 8000e58:	42c8      	cmn	r0, r1
 8000e5a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000e5c <__aeabi_fcmpeq>:
 8000e5c:	b510      	push	{r4, lr}
 8000e5e:	f000 f855 	bl	8000f0c <__eqsf2>
 8000e62:	4240      	negs	r0, r0
 8000e64:	3001      	adds	r0, #1
 8000e66:	bd10      	pop	{r4, pc}

08000e68 <__aeabi_fcmplt>:
 8000e68:	b510      	push	{r4, lr}
 8000e6a:	f000 f8bf 	bl	8000fec <__lesf2>
 8000e6e:	2800      	cmp	r0, #0
 8000e70:	db01      	blt.n	8000e76 <__aeabi_fcmplt+0xe>
 8000e72:	2000      	movs	r0, #0
 8000e74:	bd10      	pop	{r4, pc}
 8000e76:	2001      	movs	r0, #1
 8000e78:	bd10      	pop	{r4, pc}
 8000e7a:	46c0      	nop			@ (mov r8, r8)

08000e7c <__aeabi_fcmple>:
 8000e7c:	b510      	push	{r4, lr}
 8000e7e:	f000 f8b5 	bl	8000fec <__lesf2>
 8000e82:	2800      	cmp	r0, #0
 8000e84:	dd01      	ble.n	8000e8a <__aeabi_fcmple+0xe>
 8000e86:	2000      	movs	r0, #0
 8000e88:	bd10      	pop	{r4, pc}
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	bd10      	pop	{r4, pc}
 8000e8e:	46c0      	nop			@ (mov r8, r8)

08000e90 <__aeabi_fcmpgt>:
 8000e90:	b510      	push	{r4, lr}
 8000e92:	f000 f863 	bl	8000f5c <__gesf2>
 8000e96:	2800      	cmp	r0, #0
 8000e98:	dc01      	bgt.n	8000e9e <__aeabi_fcmpgt+0xe>
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	bd10      	pop	{r4, pc}
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	bd10      	pop	{r4, pc}
 8000ea2:	46c0      	nop			@ (mov r8, r8)

08000ea4 <__aeabi_fcmpge>:
 8000ea4:	b510      	push	{r4, lr}
 8000ea6:	f000 f859 	bl	8000f5c <__gesf2>
 8000eaa:	2800      	cmp	r0, #0
 8000eac:	da01      	bge.n	8000eb2 <__aeabi_fcmpge+0xe>
 8000eae:	2000      	movs	r0, #0
 8000eb0:	bd10      	pop	{r4, pc}
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	bd10      	pop	{r4, pc}
 8000eb6:	46c0      	nop			@ (mov r8, r8)

08000eb8 <__clzsi2>:
 8000eb8:	211c      	movs	r1, #28
 8000eba:	2301      	movs	r3, #1
 8000ebc:	041b      	lsls	r3, r3, #16
 8000ebe:	4298      	cmp	r0, r3
 8000ec0:	d301      	bcc.n	8000ec6 <__clzsi2+0xe>
 8000ec2:	0c00      	lsrs	r0, r0, #16
 8000ec4:	3910      	subs	r1, #16
 8000ec6:	0a1b      	lsrs	r3, r3, #8
 8000ec8:	4298      	cmp	r0, r3
 8000eca:	d301      	bcc.n	8000ed0 <__clzsi2+0x18>
 8000ecc:	0a00      	lsrs	r0, r0, #8
 8000ece:	3908      	subs	r1, #8
 8000ed0:	091b      	lsrs	r3, r3, #4
 8000ed2:	4298      	cmp	r0, r3
 8000ed4:	d301      	bcc.n	8000eda <__clzsi2+0x22>
 8000ed6:	0900      	lsrs	r0, r0, #4
 8000ed8:	3904      	subs	r1, #4
 8000eda:	a202      	add	r2, pc, #8	@ (adr r2, 8000ee4 <__clzsi2+0x2c>)
 8000edc:	5c10      	ldrb	r0, [r2, r0]
 8000ede:	1840      	adds	r0, r0, r1
 8000ee0:	4770      	bx	lr
 8000ee2:	46c0      	nop			@ (mov r8, r8)
 8000ee4:	02020304 	.word	0x02020304
 8000ee8:	01010101 	.word	0x01010101
	...

08000ef4 <__clzdi2>:
 8000ef4:	b510      	push	{r4, lr}
 8000ef6:	2900      	cmp	r1, #0
 8000ef8:	d103      	bne.n	8000f02 <__clzdi2+0xe>
 8000efa:	f7ff ffdd 	bl	8000eb8 <__clzsi2>
 8000efe:	3020      	adds	r0, #32
 8000f00:	e002      	b.n	8000f08 <__clzdi2+0x14>
 8000f02:	0008      	movs	r0, r1
 8000f04:	f7ff ffd8 	bl	8000eb8 <__clzsi2>
 8000f08:	bd10      	pop	{r4, pc}
 8000f0a:	46c0      	nop			@ (mov r8, r8)

08000f0c <__eqsf2>:
 8000f0c:	b570      	push	{r4, r5, r6, lr}
 8000f0e:	0042      	lsls	r2, r0, #1
 8000f10:	024e      	lsls	r6, r1, #9
 8000f12:	004c      	lsls	r4, r1, #1
 8000f14:	0245      	lsls	r5, r0, #9
 8000f16:	0a6d      	lsrs	r5, r5, #9
 8000f18:	0e12      	lsrs	r2, r2, #24
 8000f1a:	0fc3      	lsrs	r3, r0, #31
 8000f1c:	0a76      	lsrs	r6, r6, #9
 8000f1e:	0e24      	lsrs	r4, r4, #24
 8000f20:	0fc9      	lsrs	r1, r1, #31
 8000f22:	2aff      	cmp	r2, #255	@ 0xff
 8000f24:	d010      	beq.n	8000f48 <__eqsf2+0x3c>
 8000f26:	2cff      	cmp	r4, #255	@ 0xff
 8000f28:	d00c      	beq.n	8000f44 <__eqsf2+0x38>
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	42a2      	cmp	r2, r4
 8000f2e:	d10a      	bne.n	8000f46 <__eqsf2+0x3a>
 8000f30:	42b5      	cmp	r5, r6
 8000f32:	d108      	bne.n	8000f46 <__eqsf2+0x3a>
 8000f34:	428b      	cmp	r3, r1
 8000f36:	d00f      	beq.n	8000f58 <__eqsf2+0x4c>
 8000f38:	2a00      	cmp	r2, #0
 8000f3a:	d104      	bne.n	8000f46 <__eqsf2+0x3a>
 8000f3c:	0028      	movs	r0, r5
 8000f3e:	1e43      	subs	r3, r0, #1
 8000f40:	4198      	sbcs	r0, r3
 8000f42:	e000      	b.n	8000f46 <__eqsf2+0x3a>
 8000f44:	2001      	movs	r0, #1
 8000f46:	bd70      	pop	{r4, r5, r6, pc}
 8000f48:	2001      	movs	r0, #1
 8000f4a:	2cff      	cmp	r4, #255	@ 0xff
 8000f4c:	d1fb      	bne.n	8000f46 <__eqsf2+0x3a>
 8000f4e:	4335      	orrs	r5, r6
 8000f50:	d1f9      	bne.n	8000f46 <__eqsf2+0x3a>
 8000f52:	404b      	eors	r3, r1
 8000f54:	0018      	movs	r0, r3
 8000f56:	e7f6      	b.n	8000f46 <__eqsf2+0x3a>
 8000f58:	2000      	movs	r0, #0
 8000f5a:	e7f4      	b.n	8000f46 <__eqsf2+0x3a>

08000f5c <__gesf2>:
 8000f5c:	b530      	push	{r4, r5, lr}
 8000f5e:	0042      	lsls	r2, r0, #1
 8000f60:	0244      	lsls	r4, r0, #9
 8000f62:	024d      	lsls	r5, r1, #9
 8000f64:	0fc3      	lsrs	r3, r0, #31
 8000f66:	0048      	lsls	r0, r1, #1
 8000f68:	0a64      	lsrs	r4, r4, #9
 8000f6a:	0e12      	lsrs	r2, r2, #24
 8000f6c:	0a6d      	lsrs	r5, r5, #9
 8000f6e:	0e00      	lsrs	r0, r0, #24
 8000f70:	0fc9      	lsrs	r1, r1, #31
 8000f72:	2aff      	cmp	r2, #255	@ 0xff
 8000f74:	d018      	beq.n	8000fa8 <__gesf2+0x4c>
 8000f76:	28ff      	cmp	r0, #255	@ 0xff
 8000f78:	d00a      	beq.n	8000f90 <__gesf2+0x34>
 8000f7a:	2a00      	cmp	r2, #0
 8000f7c:	d11e      	bne.n	8000fbc <__gesf2+0x60>
 8000f7e:	2800      	cmp	r0, #0
 8000f80:	d10a      	bne.n	8000f98 <__gesf2+0x3c>
 8000f82:	2d00      	cmp	r5, #0
 8000f84:	d029      	beq.n	8000fda <__gesf2+0x7e>
 8000f86:	2c00      	cmp	r4, #0
 8000f88:	d12d      	bne.n	8000fe6 <__gesf2+0x8a>
 8000f8a:	0048      	lsls	r0, r1, #1
 8000f8c:	3801      	subs	r0, #1
 8000f8e:	bd30      	pop	{r4, r5, pc}
 8000f90:	2d00      	cmp	r5, #0
 8000f92:	d125      	bne.n	8000fe0 <__gesf2+0x84>
 8000f94:	2a00      	cmp	r2, #0
 8000f96:	d101      	bne.n	8000f9c <__gesf2+0x40>
 8000f98:	2c00      	cmp	r4, #0
 8000f9a:	d0f6      	beq.n	8000f8a <__gesf2+0x2e>
 8000f9c:	428b      	cmp	r3, r1
 8000f9e:	d019      	beq.n	8000fd4 <__gesf2+0x78>
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	425b      	negs	r3, r3
 8000fa4:	4318      	orrs	r0, r3
 8000fa6:	e7f2      	b.n	8000f8e <__gesf2+0x32>
 8000fa8:	2c00      	cmp	r4, #0
 8000faa:	d119      	bne.n	8000fe0 <__gesf2+0x84>
 8000fac:	28ff      	cmp	r0, #255	@ 0xff
 8000fae:	d1f7      	bne.n	8000fa0 <__gesf2+0x44>
 8000fb0:	2d00      	cmp	r5, #0
 8000fb2:	d115      	bne.n	8000fe0 <__gesf2+0x84>
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d1f2      	bne.n	8000fa0 <__gesf2+0x44>
 8000fba:	e7e8      	b.n	8000f8e <__gesf2+0x32>
 8000fbc:	2800      	cmp	r0, #0
 8000fbe:	d0ef      	beq.n	8000fa0 <__gesf2+0x44>
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	d1ed      	bne.n	8000fa0 <__gesf2+0x44>
 8000fc4:	4282      	cmp	r2, r0
 8000fc6:	dceb      	bgt.n	8000fa0 <__gesf2+0x44>
 8000fc8:	db04      	blt.n	8000fd4 <__gesf2+0x78>
 8000fca:	42ac      	cmp	r4, r5
 8000fcc:	d8e8      	bhi.n	8000fa0 <__gesf2+0x44>
 8000fce:	2000      	movs	r0, #0
 8000fd0:	42ac      	cmp	r4, r5
 8000fd2:	d2dc      	bcs.n	8000f8e <__gesf2+0x32>
 8000fd4:	0058      	lsls	r0, r3, #1
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7d9      	b.n	8000f8e <__gesf2+0x32>
 8000fda:	2c00      	cmp	r4, #0
 8000fdc:	d0d7      	beq.n	8000f8e <__gesf2+0x32>
 8000fde:	e7df      	b.n	8000fa0 <__gesf2+0x44>
 8000fe0:	2002      	movs	r0, #2
 8000fe2:	4240      	negs	r0, r0
 8000fe4:	e7d3      	b.n	8000f8e <__gesf2+0x32>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d1da      	bne.n	8000fa0 <__gesf2+0x44>
 8000fea:	e7ee      	b.n	8000fca <__gesf2+0x6e>

08000fec <__lesf2>:
 8000fec:	b530      	push	{r4, r5, lr}
 8000fee:	0042      	lsls	r2, r0, #1
 8000ff0:	0244      	lsls	r4, r0, #9
 8000ff2:	024d      	lsls	r5, r1, #9
 8000ff4:	0fc3      	lsrs	r3, r0, #31
 8000ff6:	0048      	lsls	r0, r1, #1
 8000ff8:	0a64      	lsrs	r4, r4, #9
 8000ffa:	0e12      	lsrs	r2, r2, #24
 8000ffc:	0a6d      	lsrs	r5, r5, #9
 8000ffe:	0e00      	lsrs	r0, r0, #24
 8001000:	0fc9      	lsrs	r1, r1, #31
 8001002:	2aff      	cmp	r2, #255	@ 0xff
 8001004:	d017      	beq.n	8001036 <__lesf2+0x4a>
 8001006:	28ff      	cmp	r0, #255	@ 0xff
 8001008:	d00a      	beq.n	8001020 <__lesf2+0x34>
 800100a:	2a00      	cmp	r2, #0
 800100c:	d11b      	bne.n	8001046 <__lesf2+0x5a>
 800100e:	2800      	cmp	r0, #0
 8001010:	d10a      	bne.n	8001028 <__lesf2+0x3c>
 8001012:	2d00      	cmp	r5, #0
 8001014:	d01d      	beq.n	8001052 <__lesf2+0x66>
 8001016:	2c00      	cmp	r4, #0
 8001018:	d12d      	bne.n	8001076 <__lesf2+0x8a>
 800101a:	0048      	lsls	r0, r1, #1
 800101c:	3801      	subs	r0, #1
 800101e:	e011      	b.n	8001044 <__lesf2+0x58>
 8001020:	2d00      	cmp	r5, #0
 8001022:	d10e      	bne.n	8001042 <__lesf2+0x56>
 8001024:	2a00      	cmp	r2, #0
 8001026:	d101      	bne.n	800102c <__lesf2+0x40>
 8001028:	2c00      	cmp	r4, #0
 800102a:	d0f6      	beq.n	800101a <__lesf2+0x2e>
 800102c:	428b      	cmp	r3, r1
 800102e:	d10c      	bne.n	800104a <__lesf2+0x5e>
 8001030:	0058      	lsls	r0, r3, #1
 8001032:	3801      	subs	r0, #1
 8001034:	e006      	b.n	8001044 <__lesf2+0x58>
 8001036:	2c00      	cmp	r4, #0
 8001038:	d103      	bne.n	8001042 <__lesf2+0x56>
 800103a:	28ff      	cmp	r0, #255	@ 0xff
 800103c:	d105      	bne.n	800104a <__lesf2+0x5e>
 800103e:	2d00      	cmp	r5, #0
 8001040:	d015      	beq.n	800106e <__lesf2+0x82>
 8001042:	2002      	movs	r0, #2
 8001044:	bd30      	pop	{r4, r5, pc}
 8001046:	2800      	cmp	r0, #0
 8001048:	d106      	bne.n	8001058 <__lesf2+0x6c>
 800104a:	2001      	movs	r0, #1
 800104c:	425b      	negs	r3, r3
 800104e:	4318      	orrs	r0, r3
 8001050:	e7f8      	b.n	8001044 <__lesf2+0x58>
 8001052:	2c00      	cmp	r4, #0
 8001054:	d0f6      	beq.n	8001044 <__lesf2+0x58>
 8001056:	e7f8      	b.n	800104a <__lesf2+0x5e>
 8001058:	428b      	cmp	r3, r1
 800105a:	d1f6      	bne.n	800104a <__lesf2+0x5e>
 800105c:	4282      	cmp	r2, r0
 800105e:	dcf4      	bgt.n	800104a <__lesf2+0x5e>
 8001060:	dbe6      	blt.n	8001030 <__lesf2+0x44>
 8001062:	42ac      	cmp	r4, r5
 8001064:	d8f1      	bhi.n	800104a <__lesf2+0x5e>
 8001066:	2000      	movs	r0, #0
 8001068:	42ac      	cmp	r4, r5
 800106a:	d2eb      	bcs.n	8001044 <__lesf2+0x58>
 800106c:	e7e0      	b.n	8001030 <__lesf2+0x44>
 800106e:	2000      	movs	r0, #0
 8001070:	428b      	cmp	r3, r1
 8001072:	d1ea      	bne.n	800104a <__lesf2+0x5e>
 8001074:	e7e6      	b.n	8001044 <__lesf2+0x58>
 8001076:	428b      	cmp	r3, r1
 8001078:	d1e7      	bne.n	800104a <__lesf2+0x5e>
 800107a:	e7f2      	b.n	8001062 <__lesf2+0x76>

0800107c <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	0004      	movs	r4, r0
 8001084:	0008      	movs	r0, r1
 8001086:	0011      	movs	r1, r2
 8001088:	1dbb      	adds	r3, r7, #6
 800108a:	1c22      	adds	r2, r4, #0
 800108c:	801a      	strh	r2, [r3, #0]
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	1c02      	adds	r2, r0, #0
 8001092:	801a      	strh	r2, [r3, #0]
 8001094:	1cbb      	adds	r3, r7, #2
 8001096:	1c0a      	adds	r2, r1, #0
 8001098:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(y,x, color);
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	8818      	ldrh	r0, [r3, #0]
 800109e:	1dbb      	adds	r3, r7, #6
 80010a0:	8819      	ldrh	r1, [r3, #0]
 80010a2:	1cbb      	adds	r3, r7, #2
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	001a      	movs	r2, r3
 80010a8:	f000 fccc 	bl	8001a44 <ST7735_DrawPixel>
}
 80010ac:	46c0      	nop			@ (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b003      	add	sp, #12
 80010b2:	bd90      	pop	{r4, r7, pc}

080010b4 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80010b4:	b5b0      	push	{r4, r5, r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af02      	add	r7, sp, #8
 80010ba:	0005      	movs	r5, r0
 80010bc:	000c      	movs	r4, r1
 80010be:	0010      	movs	r0, r2
 80010c0:	0019      	movs	r1, r3
 80010c2:	1dbb      	adds	r3, r7, #6
 80010c4:	1c2a      	adds	r2, r5, #0
 80010c6:	801a      	strh	r2, [r3, #0]
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	1c22      	adds	r2, r4, #0
 80010cc:	801a      	strh	r2, [r3, #0]
 80010ce:	1cbb      	adds	r3, r7, #2
 80010d0:	1c02      	adds	r2, r0, #0
 80010d2:	801a      	strh	r2, [r3, #0]
 80010d4:	003b      	movs	r3, r7
 80010d6:	1c0a      	adds	r2, r1, #0
 80010d8:	801a      	strh	r2, [r3, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 80010da:	1dbb      	adds	r3, r7, #6
 80010dc:	8818      	ldrh	r0, [r3, #0]
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	8819      	ldrh	r1, [r3, #0]
 80010e2:	1cbb      	adds	r3, r7, #2
 80010e4:	881a      	ldrh	r2, [r3, #0]
 80010e6:	003b      	movs	r3, r7
 80010e8:	881c      	ldrh	r4, [r3, #0]
 80010ea:	2318      	movs	r3, #24
 80010ec:	18fb      	adds	r3, r7, r3
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	0023      	movs	r3, r4
 80010f4:	f000 fcf4 	bl	8001ae0 <ST7735_FillRectangle>
}
 80010f8:	46c0      	nop			@ (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b002      	add	sp, #8
 80010fe:	bdb0      	pop	{r4, r5, r7, pc}

08001100 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	0004      	movs	r4, r0
 8001108:	0008      	movs	r0, r1
 800110a:	0011      	movs	r1, r2
 800110c:	1dbb      	adds	r3, r7, #6
 800110e:	1c22      	adds	r2, r4, #0
 8001110:	801a      	strh	r2, [r3, #0]
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	1c02      	adds	r2, r0, #0
 8001116:	801a      	strh	r2, [r3, #0]
 8001118:	1cbb      	adds	r3, r7, #2
 800111a:	1c0a      	adds	r2, r1, #0
 800111c:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 800111e:	1cbb      	adds	r3, r7, #2
 8001120:	881a      	ldrh	r2, [r3, #0]
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	2100      	movs	r1, #0
 8001126:	5e59      	ldrsh	r1, [r3, r1]
 8001128:	1dbb      	adds	r3, r7, #6
 800112a:	2000      	movs	r0, #0
 800112c:	5e1b      	ldrsh	r3, [r3, r0]
 800112e:	0018      	movs	r0, r3
 8001130:	f7ff ffa4 	bl	800107c <drawPixel>
}
 8001134:	46c0      	nop			@ (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b003      	add	sp, #12
 800113a:	bd90      	pop	{r4, r7, pc}

0800113c <drawString>:
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
void drawString(int16_t x, int16_t y, char* c, int16_t textColor, int16_t bgColor, uint8_t size, uint8_t spacing)
{
 800113c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113e:	b089      	sub	sp, #36	@ 0x24
 8001140:	af02      	add	r7, sp, #8
 8001142:	0004      	movs	r4, r0
 8001144:	0008      	movs	r0, r1
 8001146:	60ba      	str	r2, [r7, #8]
 8001148:	0019      	movs	r1, r3
 800114a:	230e      	movs	r3, #14
 800114c:	18fb      	adds	r3, r7, r3
 800114e:	1c22      	adds	r2, r4, #0
 8001150:	801a      	strh	r2, [r3, #0]
 8001152:	230c      	movs	r3, #12
 8001154:	18fb      	adds	r3, r7, r3
 8001156:	1c02      	adds	r2, r0, #0
 8001158:	801a      	strh	r2, [r3, #0]
 800115a:	1dbb      	adds	r3, r7, #6
 800115c:	1c0a      	adds	r2, r1, #0
 800115e:	801a      	strh	r2, [r3, #0]
	uint16_t i =0;
 8001160:	2316      	movs	r3, #22
 8001162:	18fb      	adds	r3, r7, r3
 8001164:	2200      	movs	r2, #0
 8001166:	801a      	strh	r2, [r3, #0]

	while(c[i])
 8001168:	e03f      	b.n	80011ea <drawString+0xae>
	{
		drawChar(x, y, c[i], textColor, bgColor, size);
 800116a:	2516      	movs	r5, #22
 800116c:	197b      	adds	r3, r7, r5
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	68ba      	ldr	r2, [r7, #8]
 8001172:	18d3      	adds	r3, r2, r3
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	469c      	mov	ip, r3
 8001178:	1dbb      	adds	r3, r7, #6
 800117a:	2400      	movs	r4, #0
 800117c:	5f1c      	ldrsh	r4, [r3, r4]
 800117e:	230c      	movs	r3, #12
 8001180:	18fb      	adds	r3, r7, r3
 8001182:	2100      	movs	r1, #0
 8001184:	5e59      	ldrsh	r1, [r3, r1]
 8001186:	260e      	movs	r6, #14
 8001188:	19bb      	adds	r3, r7, r6
 800118a:	2000      	movs	r0, #0
 800118c:	5e18      	ldrsh	r0, [r3, r0]
 800118e:	232c      	movs	r3, #44	@ 0x2c
 8001190:	2208      	movs	r2, #8
 8001192:	189b      	adds	r3, r3, r2
 8001194:	19db      	adds	r3, r3, r7
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	9301      	str	r3, [sp, #4]
 800119a:	2328      	movs	r3, #40	@ 0x28
 800119c:	189b      	adds	r3, r3, r2
 800119e:	19db      	adds	r3, r3, r7
 80011a0:	2200      	movs	r2, #0
 80011a2:	5e9b      	ldrsh	r3, [r3, r2]
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	0023      	movs	r3, r4
 80011a8:	4662      	mov	r2, ip
 80011aa:	f000 f82b 	bl	8001204 <drawChar>
		x+=(size*6)+spacing;
 80011ae:	232c      	movs	r3, #44	@ 0x2c
 80011b0:	2108      	movs	r1, #8
 80011b2:	185b      	adds	r3, r3, r1
 80011b4:	19db      	adds	r3, r3, r7
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	1c1a      	adds	r2, r3, #0
 80011bc:	1c13      	adds	r3, r2, #0
 80011be:	18db      	adds	r3, r3, r3
 80011c0:	189b      	adds	r3, r3, r2
 80011c2:	18db      	adds	r3, r3, r3
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	2330      	movs	r3, #48	@ 0x30
 80011c8:	185b      	adds	r3, r3, r1
 80011ca:	19db      	adds	r3, r3, r7
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	18d3      	adds	r3, r2, r3
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	19bb      	adds	r3, r7, r6
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	18d3      	adds	r3, r2, r3
 80011da:	b29a      	uxth	r2, r3
 80011dc:	19bb      	adds	r3, r7, r6
 80011de:	801a      	strh	r2, [r3, #0]
		i++;
 80011e0:	197b      	adds	r3, r7, r5
 80011e2:	881a      	ldrh	r2, [r3, #0]
 80011e4:	197b      	adds	r3, r7, r5
 80011e6:	3201      	adds	r2, #1
 80011e8:	801a      	strh	r2, [r3, #0]
	while(c[i])
 80011ea:	2316      	movs	r3, #22
 80011ec:	18fb      	adds	r3, r7, r3
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	68ba      	ldr	r2, [r7, #8]
 80011f2:	18d3      	adds	r3, r2, r3
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1b7      	bne.n	800116a <drawString+0x2e>
	}
}
 80011fa:	46c0      	nop			@ (mov r8, r8)
 80011fc:	46c0      	nop			@ (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	b007      	add	sp, #28
 8001202:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001204 <drawChar>:
void drawChar(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 8001204:	b5b0      	push	{r4, r5, r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af02      	add	r7, sp, #8
 800120a:	0005      	movs	r5, r0
 800120c:	000c      	movs	r4, r1
 800120e:	0010      	movs	r0, r2
 8001210:	0019      	movs	r1, r3
 8001212:	1dbb      	adds	r3, r7, #6
 8001214:	1c2a      	adds	r2, r5, #0
 8001216:	801a      	strh	r2, [r3, #0]
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	1c22      	adds	r2, r4, #0
 800121c:	801a      	strh	r2, [r3, #0]
 800121e:	1cfb      	adds	r3, r7, #3
 8001220:	1c02      	adds	r2, r0, #0
 8001222:	701a      	strb	r2, [r3, #0]
 8001224:	003b      	movs	r3, r7
 8001226:	1c0a      	adds	r2, r1, #0
 8001228:	801a      	strh	r2, [r3, #0]
  uint8_t line;
  int32_t i, j;
  if((x >= _width)            ||
 800122a:	4b79      	ldr	r3, [pc, #484]	@ (8001410 <drawChar+0x20c>)
 800122c:	2200      	movs	r2, #0
 800122e:	5e9b      	ldrsh	r3, [r3, r2]
 8001230:	1dba      	adds	r2, r7, #6
 8001232:	2100      	movs	r1, #0
 8001234:	5e52      	ldrsh	r2, [r2, r1]
 8001236:	429a      	cmp	r2, r3
 8001238:	db00      	blt.n	800123c <drawChar+0x38>
 800123a:	e0e5      	b.n	8001408 <drawChar+0x204>
     (y >= _height)           ||
 800123c:	4b75      	ldr	r3, [pc, #468]	@ (8001414 <drawChar+0x210>)
 800123e:	2200      	movs	r2, #0
 8001240:	5e9b      	ldrsh	r3, [r3, r2]
  if((x >= _width)            ||
 8001242:	1d3a      	adds	r2, r7, #4
 8001244:	2100      	movs	r1, #0
 8001246:	5e52      	ldrsh	r2, [r2, r1]
 8001248:	429a      	cmp	r2, r3
 800124a:	db00      	blt.n	800124e <drawChar+0x4a>
 800124c:	e0dc      	b.n	8001408 <drawChar+0x204>
     ((x + 5 * size - 1) < 0) ||
 800124e:	1dbb      	adds	r3, r7, #6
 8001250:	2100      	movs	r1, #0
 8001252:	5e59      	ldrsh	r1, [r3, r1]
 8001254:	202c      	movs	r0, #44	@ 0x2c
 8001256:	183b      	adds	r3, r7, r0
 8001258:	781a      	ldrb	r2, [r3, #0]
 800125a:	0013      	movs	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	189b      	adds	r3, r3, r2
 8001260:	18cb      	adds	r3, r1, r3
     (y >= _height)           ||
 8001262:	2b00      	cmp	r3, #0
 8001264:	dc00      	bgt.n	8001268 <drawChar+0x64>
 8001266:	e0cf      	b.n	8001408 <drawChar+0x204>
     ((y + 8 * size - 1) < 0))
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2200      	movs	r2, #0
 800126c:	5e9a      	ldrsh	r2, [r3, r2]
 800126e:	183b      	adds	r3, r7, r0
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	18d3      	adds	r3, r2, r3
     ((x + 5 * size - 1) < 0) ||
 8001276:	2b00      	cmp	r3, #0
 8001278:	dc00      	bgt.n	800127c <drawChar+0x78>
 800127a:	e0c5      	b.n	8001408 <drawChar+0x204>
    return;

  for (i=0; i<6; i++ ) {
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e0bd      	b.n	80013fe <drawChar+0x1fa>
    if ((i) == 5)
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	2b05      	cmp	r3, #5
 8001286:	d104      	bne.n	8001292 <drawChar+0x8e>
      line = 0x0;
 8001288:	2317      	movs	r3, #23
 800128a:	18fb      	adds	r3, r7, r3
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
 8001290:	e00b      	b.n	80012aa <drawChar+0xa6>
    else
      line = Font[(c*5)+(i)];
 8001292:	1cfb      	adds	r3, r7, #3
 8001294:	781a      	ldrb	r2, [r3, #0]
 8001296:	0013      	movs	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	189a      	adds	r2, r3, r2
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	18d2      	adds	r2, r2, r3
 80012a0:	2317      	movs	r3, #23
 80012a2:	18fb      	adds	r3, r7, r3
 80012a4:	495c      	ldr	r1, [pc, #368]	@ (8001418 <drawChar+0x214>)
 80012a6:	5c8a      	ldrb	r2, [r1, r2]
 80012a8:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e09f      	b.n	80013f0 <drawChar+0x1ec>
      if (line & 0x1) {
 80012b0:	2317      	movs	r3, #23
 80012b2:	18fb      	adds	r3, r7, r3
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2201      	movs	r2, #1
 80012b8:	4013      	ands	r3, r2
 80012ba:	d043      	beq.n	8001344 <drawChar+0x140>
        if (size == 1)
 80012bc:	232c      	movs	r3, #44	@ 0x2c
 80012be:	18fb      	adds	r3, r7, r3
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d115      	bne.n	80012f2 <drawChar+0xee>
          writePixel(x+(i), y+(7-j), textColor);
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	1dbb      	adds	r3, r7, #6
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	18d3      	adds	r3, r2, r3
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	b218      	sxth	r0, r3
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	881a      	ldrh	r2, [r3, #0]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	b29b      	uxth	r3, r3
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	b29b      	uxth	r3, r3
 80012e0:	3307      	adds	r3, #7
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	b219      	sxth	r1, r3
 80012e6:	003b      	movs	r3, r7
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	001a      	movs	r2, r3
 80012ec:	f7ff ff08 	bl	8001100 <writePixel>
 80012f0:	e075      	b.n	80013de <drawChar+0x1da>
        else {
          fillRect(x+((i)*size), y+((7-j)*size), size, size, textColor);
 80012f2:	212c      	movs	r1, #44	@ 0x2c
 80012f4:	187b      	adds	r3, r7, r1
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	b292      	uxth	r2, r2
 80012fe:	4353      	muls	r3, r2
 8001300:	b29a      	uxth	r2, r3
 8001302:	1dbb      	adds	r3, r7, #6
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	18d3      	adds	r3, r2, r3
 8001308:	b29b      	uxth	r3, r3
 800130a:	b218      	sxth	r0, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2207      	movs	r2, #7
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	b29b      	uxth	r3, r3
 8001314:	000c      	movs	r4, r1
 8001316:	187a      	adds	r2, r7, r1
 8001318:	7812      	ldrb	r2, [r2, #0]
 800131a:	b292      	uxth	r2, r2
 800131c:	4353      	muls	r3, r2
 800131e:	b29a      	uxth	r2, r3
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	18d3      	adds	r3, r2, r3
 8001326:	b29b      	uxth	r3, r3
 8001328:	b219      	sxth	r1, r3
 800132a:	193b      	adds	r3, r7, r4
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b21a      	sxth	r2, r3
 8001330:	193b      	adds	r3, r7, r4
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b21c      	sxth	r4, r3
 8001336:	003b      	movs	r3, r7
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	0023      	movs	r3, r4
 800133e:	f7ff feb9 	bl	80010b4 <fillRect>
 8001342:	e04c      	b.n	80013de <drawChar+0x1da>
        }
      } else if (bgColor != textColor) {
 8001344:	2428      	movs	r4, #40	@ 0x28
 8001346:	193b      	adds	r3, r7, r4
 8001348:	0039      	movs	r1, r7
 800134a:	2200      	movs	r2, #0
 800134c:	5e9a      	ldrsh	r2, [r3, r2]
 800134e:	2300      	movs	r3, #0
 8001350:	5ecb      	ldrsh	r3, [r1, r3]
 8001352:	429a      	cmp	r2, r3
 8001354:	d043      	beq.n	80013de <drawChar+0x1da>
        if (size == 1) // default size
 8001356:	232c      	movs	r3, #44	@ 0x2c
 8001358:	18fb      	adds	r3, r7, r3
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d115      	bne.n	800138c <drawChar+0x188>
          writePixel(x+(i), y+(7-j), bgColor);
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	b29a      	uxth	r2, r3
 8001364:	1dbb      	adds	r3, r7, #6
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	18d3      	adds	r3, r2, r3
 800136a:	b29b      	uxth	r3, r3
 800136c:	b218      	sxth	r0, r3
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	881a      	ldrh	r2, [r3, #0]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	b29b      	uxth	r3, r3
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	b29b      	uxth	r3, r3
 800137a:	3307      	adds	r3, #7
 800137c:	b29b      	uxth	r3, r3
 800137e:	b219      	sxth	r1, r3
 8001380:	193b      	adds	r3, r7, r4
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	001a      	movs	r2, r3
 8001386:	f7ff febb 	bl	8001100 <writePixel>
 800138a:	e028      	b.n	80013de <drawChar+0x1da>
        else {  // big size
          fillRect(x+(i)*size, y+(7-j)*size, size, size, bgColor);
 800138c:	212c      	movs	r1, #44	@ 0x2c
 800138e:	187b      	adds	r3, r7, r1
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b29b      	uxth	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	b292      	uxth	r2, r2
 8001398:	4353      	muls	r3, r2
 800139a:	b29a      	uxth	r2, r3
 800139c:	1dbb      	adds	r3, r7, #6
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	18d3      	adds	r3, r2, r3
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	b218      	sxth	r0, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2207      	movs	r2, #7
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	000c      	movs	r4, r1
 80013b0:	187a      	adds	r2, r7, r1
 80013b2:	7812      	ldrb	r2, [r2, #0]
 80013b4:	b292      	uxth	r2, r2
 80013b6:	4353      	muls	r3, r2
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	18d3      	adds	r3, r2, r3
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	b219      	sxth	r1, r3
 80013c4:	193b      	adds	r3, r7, r4
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b21a      	sxth	r2, r3
 80013ca:	193b      	adds	r3, r7, r4
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	b21c      	sxth	r4, r3
 80013d0:	2328      	movs	r3, #40	@ 0x28
 80013d2:	18fb      	adds	r3, r7, r3
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	0023      	movs	r3, r4
 80013da:	f7ff fe6b 	bl	80010b4 <fillRect>
        }
      }
      line >>= 1;
 80013de:	2217      	movs	r2, #23
 80013e0:	18bb      	adds	r3, r7, r2
 80013e2:	18ba      	adds	r2, r7, r2
 80013e4:	7812      	ldrb	r2, [r2, #0]
 80013e6:	0852      	lsrs	r2, r2, #1
 80013e8:	701a      	strb	r2, [r3, #0]
    for (j = 0; j<8; j++) {
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	3301      	adds	r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b07      	cmp	r3, #7
 80013f4:	dc00      	bgt.n	80013f8 <drawChar+0x1f4>
 80013f6:	e75b      	b.n	80012b0 <drawChar+0xac>
  for (i=0; i<6; i++ ) {
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	3301      	adds	r3, #1
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	2b05      	cmp	r3, #5
 8001402:	dc00      	bgt.n	8001406 <drawChar+0x202>
 8001404:	e73d      	b.n	8001282 <drawChar+0x7e>
 8001406:	e000      	b.n	800140a <drawChar+0x206>
    return;
 8001408:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800140a:	46bd      	mov	sp, r7
 800140c:	b006      	add	sp, #24
 800140e:	bdb0      	pop	{r4, r5, r7, pc}
 8001410:	2000056c 	.word	0x2000056c
 8001414:	2000056e 	.word	0x2000056e
 8001418:	08007da8 	.word	0x08007da8

0800141c <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 800141c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800141e:	b091      	sub	sp, #68	@ 0x44
 8001420:	af04      	add	r7, sp, #16
 8001422:	231e      	movs	r3, #30
 8001424:	18f9      	adds	r1, r7, r3
 8001426:	8008      	strh	r0, [r1, #0]
 8001428:	4669      	mov	r1, sp
 800142a:	000e      	movs	r6, r1
    uint16_t pallette[] = {color};
 800142c:	210c      	movs	r1, #12
 800142e:	2318      	movs	r3, #24
 8001430:	18cb      	adds	r3, r1, r3
 8001432:	19d9      	adds	r1, r3, r7
 8001434:	231e      	movs	r3, #30
 8001436:	18f8      	adds	r0, r7, r3
 8001438:	8800      	ldrh	r0, [r0, #0]
 800143a:	8008      	strh	r0, [r1, #0]
    uint16_t pixels[_width*_height][2];
 800143c:	492f      	ldr	r1, [pc, #188]	@ (80014fc <fillScreen+0xe0>)
 800143e:	2300      	movs	r3, #0
 8001440:	5ec9      	ldrsh	r1, [r1, r3]
 8001442:	0008      	movs	r0, r1
 8001444:	492e      	ldr	r1, [pc, #184]	@ (8001500 <fillScreen+0xe4>)
 8001446:	2300      	movs	r3, #0
 8001448:	5ec9      	ldrsh	r1, [r1, r3]
 800144a:	4341      	muls	r1, r0
 800144c:	1e48      	subs	r0, r1, #1
 800144e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001450:	0008      	movs	r0, r1
 8001452:	6138      	str	r0, [r7, #16]
 8001454:	2000      	movs	r0, #0
 8001456:	6178      	str	r0, [r7, #20]
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	0010      	movs	r0, r2
 800145e:	0ec0      	lsrs	r0, r0, #27
 8001460:	613a      	str	r2, [r7, #16]
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	015d      	lsls	r5, r3, #5
 8001466:	4305      	orrs	r5, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	015c      	lsls	r4, r3, #5
 800146c:	0008      	movs	r0, r1
 800146e:	6038      	str	r0, [r7, #0]
 8001470:	2000      	movs	r0, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	683c      	ldr	r4, [r7, #0]
 8001476:	687d      	ldr	r5, [r7, #4]
 8001478:	0023      	movs	r3, r4
 800147a:	0ed8      	lsrs	r0, r3, #27
 800147c:	002b      	movs	r3, r5
 800147e:	015b      	lsls	r3, r3, #5
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4303      	orrs	r3, r0
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	0023      	movs	r3, r4
 800148a:	015b      	lsls	r3, r3, #5
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	000b      	movs	r3, r1
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	3307      	adds	r3, #7
 8001494:	08db      	lsrs	r3, r3, #3
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	466a      	mov	r2, sp
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	469d      	mov	sp, r3
 800149e:	ab04      	add	r3, sp, #16
 80014a0:	3301      	adds	r3, #1
 80014a2:	085b      	lsrs	r3, r3, #1
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	62bb      	str	r3, [r7, #40]	@ 0x28

    pixels[0][0] = 0;
 80014a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014aa:	2200      	movs	r2, #0
 80014ac:	801a      	strh	r2, [r3, #0]
    pixels[0][1] = _width*_height;
 80014ae:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <fillScreen+0xe0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	5e9b      	ldrsh	r3, [r3, r2]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	4a12      	ldr	r2, [pc, #72]	@ (8001500 <fillScreen+0xe4>)
 80014b8:	2000      	movs	r0, #0
 80014ba:	5e12      	ldrsh	r2, [r2, r0]
 80014bc:	b292      	uxth	r2, r2
 80014be:	4353      	muls	r3, r2
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014c4:	805a      	strh	r2, [r3, #2]
    drawImage(pixels, pallette, 0, 0, _width, _height, 1);
 80014c6:	4b0d      	ldr	r3, [pc, #52]	@ (80014fc <fillScreen+0xe0>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	5e9b      	ldrsh	r3, [r3, r2]
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001500 <fillScreen+0xe4>)
 80014d0:	2000      	movs	r0, #0
 80014d2:	5e12      	ldrsh	r2, [r2, r0]
 80014d4:	b292      	uxth	r2, r2
 80014d6:	210c      	movs	r1, #12
 80014d8:	2018      	movs	r0, #24
 80014da:	1809      	adds	r1, r1, r0
 80014dc:	19c9      	adds	r1, r1, r7
 80014de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80014e0:	2401      	movs	r4, #1
 80014e2:	9402      	str	r4, [sp, #8]
 80014e4:	9201      	str	r2, [sp, #4]
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2300      	movs	r3, #0
 80014ea:	2200      	movs	r2, #0
 80014ec:	f000 f80a 	bl	8001504 <drawImage>
 80014f0:	46b5      	mov	sp, r6
	//fillRect(0, 0, _width, _height, color);
}
 80014f2:	46c0      	nop			@ (mov r8, r8)
 80014f4:	46bd      	mov	sp, r7
 80014f6:	b00d      	add	sp, #52	@ 0x34
 80014f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014fa:	46c0      	nop			@ (mov r8, r8)
 80014fc:	2000056c 	.word	0x2000056c
 8001500:	2000056e 	.word	0x2000056e

08001504 <drawImage>:

void drawImage(uint16_t image[][2], uint16_t palette[], uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
{
 8001504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001506:	46c6      	mov	lr, r8
 8001508:	b500      	push	{lr}
 800150a:	b092      	sub	sp, #72	@ 0x48
 800150c:	af02      	add	r7, sp, #8
 800150e:	6278      	str	r0, [r7, #36]	@ 0x24
 8001510:	6239      	str	r1, [r7, #32]
 8001512:	0019      	movs	r1, r3
 8001514:	231e      	movs	r3, #30
 8001516:	18fb      	adds	r3, r7, r3
 8001518:	801a      	strh	r2, [r3, #0]
 800151a:	231c      	movs	r3, #28
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	1c0a      	adds	r2, r1, #0
 8001520:	801a      	strh	r2, [r3, #0]
 8001522:	466b      	mov	r3, sp
 8001524:	4698      	mov	r8, r3
	uint16_t i;
	uint16_t j;
	uint16_t totalInd =0;
 8001526:	2322      	movs	r3, #34	@ 0x22
 8001528:	2118      	movs	r1, #24
 800152a:	185b      	adds	r3, r3, r1
 800152c:	19db      	adds	r3, r3, r7
 800152e:	2200      	movs	r2, #0
 8001530:	801a      	strh	r2, [r3, #0]
	uint16_t ind;
	uint16_t count;
	uint16_t bufffer[w*h];
 8001532:	2340      	movs	r3, #64	@ 0x40
 8001534:	185b      	adds	r3, r3, r1
 8001536:	19db      	adds	r3, r3, r7
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	2244      	movs	r2, #68	@ 0x44
 800153c:	1852      	adds	r2, r2, r1
 800153e:	19d2      	adds	r2, r2, r7
 8001540:	8812      	ldrh	r2, [r2, #0]
 8001542:	4353      	muls	r3, r2
 8001544:	1e5a      	subs	r2, r3, #1
 8001546:	637a      	str	r2, [r7, #52]	@ 0x34
 8001548:	001a      	movs	r2, r3
 800154a:	60ba      	str	r2, [r7, #8]
 800154c:	2200      	movs	r2, #0
 800154e:	60fa      	str	r2, [r7, #12]
 8001550:	68b8      	ldr	r0, [r7, #8]
 8001552:	68f9      	ldr	r1, [r7, #12]
 8001554:	0002      	movs	r2, r0
 8001556:	0f12      	lsrs	r2, r2, #28
 8001558:	000e      	movs	r6, r1
 800155a:	0136      	lsls	r6, r6, #4
 800155c:	617e      	str	r6, [r7, #20]
 800155e:	697e      	ldr	r6, [r7, #20]
 8001560:	4316      	orrs	r6, r2
 8001562:	617e      	str	r6, [r7, #20]
 8001564:	0002      	movs	r2, r0
 8001566:	0112      	lsls	r2, r2, #4
 8001568:	613a      	str	r2, [r7, #16]
 800156a:	001a      	movs	r2, r3
 800156c:	603a      	str	r2, [r7, #0]
 800156e:	2200      	movs	r2, #0
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	6838      	ldr	r0, [r7, #0]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	0002      	movs	r2, r0
 8001578:	0f12      	lsrs	r2, r2, #28
 800157a:	000e      	movs	r6, r1
 800157c:	0135      	lsls	r5, r6, #4
 800157e:	4315      	orrs	r5, r2
 8001580:	0002      	movs	r2, r0
 8001582:	0114      	lsls	r4, r2, #4
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	3307      	adds	r3, #7
 8001588:	08db      	lsrs	r3, r3, #3
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	466a      	mov	r2, sp
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	469d      	mov	sp, r3
 8001592:	ab02      	add	r3, sp, #8
 8001594:	3301      	adds	r3, #1
 8001596:	085b      	lsrs	r3, r3, #1
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	633b      	str	r3, [r7, #48]	@ 0x30
for(i=0; i<c; i++)
 800159c:	2326      	movs	r3, #38	@ 0x26
 800159e:	2118      	movs	r1, #24
 80015a0:	185b      	adds	r3, r3, r1
 80015a2:	19db      	adds	r3, r3, r7
 80015a4:	2200      	movs	r2, #0
 80015a6:	801a      	strh	r2, [r3, #0]
 80015a8:	e04d      	b.n	8001646 <drawImage+0x142>
{
	ind = image[i][0];
 80015aa:	2126      	movs	r1, #38	@ 0x26
 80015ac:	2018      	movs	r0, #24
 80015ae:	180b      	adds	r3, r1, r0
 80015b0:	19db      	adds	r3, r3, r7
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015b8:	18d2      	adds	r2, r2, r3
 80015ba:	2316      	movs	r3, #22
 80015bc:	181b      	adds	r3, r3, r0
 80015be:	19db      	adds	r3, r3, r7
 80015c0:	8812      	ldrh	r2, [r2, #0]
 80015c2:	801a      	strh	r2, [r3, #0]
	count = image[i][1];
 80015c4:	180b      	adds	r3, r1, r0
 80015c6:	19db      	adds	r3, r3, r7
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015ce:	18d2      	adds	r2, r2, r3
 80015d0:	2314      	movs	r3, #20
 80015d2:	181b      	adds	r3, r3, r0
 80015d4:	19db      	adds	r3, r3, r7
 80015d6:	8852      	ldrh	r2, [r2, #2]
 80015d8:	801a      	strh	r2, [r3, #0]
	for(j=0; j<count; j++)
 80015da:	2324      	movs	r3, #36	@ 0x24
 80015dc:	181b      	adds	r3, r3, r0
 80015de:	19db      	adds	r3, r3, r7
 80015e0:	2200      	movs	r2, #0
 80015e2:	801a      	strh	r2, [r3, #0]
 80015e4:	e01c      	b.n	8001620 <drawImage+0x11c>
	{
		bufffer[totalInd++] = palette[ind];
 80015e6:	2316      	movs	r3, #22
 80015e8:	2418      	movs	r4, #24
 80015ea:	191b      	adds	r3, r3, r4
 80015ec:	19db      	adds	r3, r3, r7
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	6a3a      	ldr	r2, [r7, #32]
 80015f4:	18d2      	adds	r2, r2, r3
 80015f6:	2122      	movs	r1, #34	@ 0x22
 80015f8:	190b      	adds	r3, r1, r4
 80015fa:	19db      	adds	r3, r3, r7
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	1909      	adds	r1, r1, r4
 8001600:	19c9      	adds	r1, r1, r7
 8001602:	1c58      	adds	r0, r3, #1
 8001604:	8008      	strh	r0, [r1, #0]
 8001606:	0018      	movs	r0, r3
 8001608:	8811      	ldrh	r1, [r2, #0]
 800160a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800160c:	0042      	lsls	r2, r0, #1
 800160e:	52d1      	strh	r1, [r2, r3]
	for(j=0; j<count; j++)
 8001610:	2124      	movs	r1, #36	@ 0x24
 8001612:	190b      	adds	r3, r1, r4
 8001614:	19db      	adds	r3, r3, r7
 8001616:	881a      	ldrh	r2, [r3, #0]
 8001618:	190b      	adds	r3, r1, r4
 800161a:	19db      	adds	r3, r3, r7
 800161c:	3201      	adds	r2, #1
 800161e:	801a      	strh	r2, [r3, #0]
 8001620:	2324      	movs	r3, #36	@ 0x24
 8001622:	2018      	movs	r0, #24
 8001624:	181b      	adds	r3, r3, r0
 8001626:	19da      	adds	r2, r3, r7
 8001628:	2314      	movs	r3, #20
 800162a:	181b      	adds	r3, r3, r0
 800162c:	19db      	adds	r3, r3, r7
 800162e:	8812      	ldrh	r2, [r2, #0]
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d3d7      	bcc.n	80015e6 <drawImage+0xe2>
for(i=0; i<c; i++)
 8001636:	2126      	movs	r1, #38	@ 0x26
 8001638:	180b      	adds	r3, r1, r0
 800163a:	19db      	adds	r3, r3, r7
 800163c:	881a      	ldrh	r2, [r3, #0]
 800163e:	180b      	adds	r3, r1, r0
 8001640:	19db      	adds	r3, r3, r7
 8001642:	3201      	adds	r2, #1
 8001644:	801a      	strh	r2, [r3, #0]
 8001646:	2326      	movs	r3, #38	@ 0x26
 8001648:	2118      	movs	r1, #24
 800164a:	185b      	adds	r3, r3, r1
 800164c:	19da      	adds	r2, r3, r7
 800164e:	2348      	movs	r3, #72	@ 0x48
 8001650:	185b      	adds	r3, r3, r1
 8001652:	19db      	adds	r3, r3, r7
 8001654:	8812      	ldrh	r2, [r2, #0]
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	429a      	cmp	r2, r3
 800165a:	d3a6      	bcc.n	80015aa <drawImage+0xa6>
	}
}
ST7735_DrawImage(y, x, w, h, bufffer);
 800165c:	2344      	movs	r3, #68	@ 0x44
 800165e:	185b      	adds	r3, r3, r1
 8001660:	19db      	adds	r3, r3, r7
 8001662:	881c      	ldrh	r4, [r3, #0]
 8001664:	2340      	movs	r3, #64	@ 0x40
 8001666:	185b      	adds	r3, r3, r1
 8001668:	19db      	adds	r3, r3, r7
 800166a:	881a      	ldrh	r2, [r3, #0]
 800166c:	231e      	movs	r3, #30
 800166e:	18fb      	adds	r3, r7, r3
 8001670:	8819      	ldrh	r1, [r3, #0]
 8001672:	231c      	movs	r3, #28
 8001674:	18fb      	adds	r3, r7, r3
 8001676:	8818      	ldrh	r0, [r3, #0]
 8001678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	0023      	movs	r3, r4
 800167e:	f000 fadd 	bl	8001c3c <ST7735_DrawImage>
 8001682:	46c5      	mov	sp, r8
}
 8001684:	46c0      	nop			@ (mov r8, r8)
 8001686:	46bd      	mov	sp, r7
 8001688:	b010      	add	sp, #64	@ 0x40
 800168a:	bc80      	pop	{r7}
 800168c:	46b8      	mov	r8, r7
 800168e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001690 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8001694:	23a0      	movs	r3, #160	@ 0xa0
 8001696:	05db      	lsls	r3, r3, #23
 8001698:	2200      	movs	r2, #0
 800169a:	2120      	movs	r1, #32
 800169c:	0018      	movs	r0, r3
 800169e:	f001 fc8e 	bl	8002fbe <HAL_GPIO_WritePin>
}
 80016a2:	46c0      	nop			@ (mov r8, r8)
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <ST7735_Unselect>:

void ST7735_Unselect()
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80016ac:	23a0      	movs	r3, #160	@ 0xa0
 80016ae:	05db      	lsls	r3, r3, #23
 80016b0:	2201      	movs	r2, #1
 80016b2:	2120      	movs	r1, #32
 80016b4:	0018      	movs	r0, r3
 80016b6:	f001 fc82 	bl	8002fbe <HAL_GPIO_WritePin>
}
 80016ba:	46c0      	nop			@ (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <ST7735_Reset>:

void ST7735_Reset()
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80016c4:	23a0      	movs	r3, #160	@ 0xa0
 80016c6:	05db      	lsls	r3, r3, #23
 80016c8:	2200      	movs	r2, #0
 80016ca:	2108      	movs	r1, #8
 80016cc:	0018      	movs	r0, r3
 80016ce:	f001 fc76 	bl	8002fbe <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80016d2:	2005      	movs	r0, #5
 80016d4:	f001 f9fc 	bl	8002ad0 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80016d8:	23a0      	movs	r3, #160	@ 0xa0
 80016da:	05db      	lsls	r3, r3, #23
 80016dc:	2201      	movs	r2, #1
 80016de:	2108      	movs	r1, #8
 80016e0:	0018      	movs	r0, r3
 80016e2:	f001 fc6c 	bl	8002fbe <HAL_GPIO_WritePin>
}
 80016e6:	46c0      	nop			@ (mov r8, r8)
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	0002      	movs	r2, r0
 80016f4:	1dfb      	adds	r3, r7, #7
 80016f6:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80016f8:	23a0      	movs	r3, #160	@ 0xa0
 80016fa:	05db      	lsls	r3, r3, #23
 80016fc:	2200      	movs	r2, #0
 80016fe:	2110      	movs	r1, #16
 8001700:	0018      	movs	r0, r3
 8001702:	f001 fc5c 	bl	8002fbe <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001706:	2301      	movs	r3, #1
 8001708:	425b      	negs	r3, r3
 800170a:	1df9      	adds	r1, r7, #7
 800170c:	4803      	ldr	r0, [pc, #12]	@ (800171c <ST7735_WriteCommand+0x30>)
 800170e:	2201      	movs	r2, #1
 8001710:	f003 fdb8 	bl	8005284 <HAL_SPI_Transmit>
}
 8001714:	46c0      	nop			@ (mov r8, r8)
 8001716:	46bd      	mov	sp, r7
 8001718:	b002      	add	sp, #8
 800171a:	bd80      	pop	{r7, pc}
 800171c:	200006f4 	.word	0x200006f4

08001720 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 800172a:	23a0      	movs	r3, #160	@ 0xa0
 800172c:	05db      	lsls	r3, r3, #23
 800172e:	2201      	movs	r2, #1
 8001730:	2110      	movs	r1, #16
 8001732:	0018      	movs	r0, r3
 8001734:	f001 fc43 	bl	8002fbe <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	b29a      	uxth	r2, r3
 800173c:	2301      	movs	r3, #1
 800173e:	425b      	negs	r3, r3
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	4803      	ldr	r0, [pc, #12]	@ (8001750 <ST7735_WriteData+0x30>)
 8001744:	f003 fd9e 	bl	8005284 <HAL_SPI_Transmit>
}
 8001748:	46c0      	nop			@ (mov r8, r8)
 800174a:	46bd      	mov	sp, r7
 800174c:	b002      	add	sp, #8
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200006f4 	.word	0x200006f4

08001754 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8001754:	b590      	push	{r4, r7, lr}
 8001756:	b085      	sub	sp, #20
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	220f      	movs	r2, #15
 8001764:	18ba      	adds	r2, r7, r2
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 800176a:	e04a      	b.n	8001802 <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	607a      	str	r2, [r7, #4]
 8001772:	210b      	movs	r1, #11
 8001774:	187a      	adds	r2, r7, r1
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 800177a:	187b      	adds	r3, r7, r1
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	0018      	movs	r0, r3
 8001780:	f7ff ffb4 	bl	80016ec <ST7735_WriteCommand>

        numArgs = *addr++;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	200a      	movs	r0, #10
 800178c:	183a      	adds	r2, r7, r0
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001792:	183b      	adds	r3, r7, r0
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	b29a      	uxth	r2, r3
 8001798:	230c      	movs	r3, #12
 800179a:	18fb      	adds	r3, r7, r3
 800179c:	2180      	movs	r1, #128	@ 0x80
 800179e:	400a      	ands	r2, r1
 80017a0:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 80017a2:	183b      	adds	r3, r7, r0
 80017a4:	183a      	adds	r2, r7, r0
 80017a6:	7812      	ldrb	r2, [r2, #0]
 80017a8:	217f      	movs	r1, #127	@ 0x7f
 80017aa:	400a      	ands	r2, r1
 80017ac:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 80017ae:	183b      	adds	r3, r7, r0
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00c      	beq.n	80017d0 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80017b6:	0004      	movs	r4, r0
 80017b8:	183b      	adds	r3, r7, r0
 80017ba:	781a      	ldrb	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	0011      	movs	r1, r2
 80017c0:	0018      	movs	r0, r3
 80017c2:	f7ff ffad 	bl	8001720 <ST7735_WriteData>
            addr += numArgs;
 80017c6:	193b      	adds	r3, r7, r4
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	18d3      	adds	r3, r2, r3
 80017ce:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80017d0:	210c      	movs	r1, #12
 80017d2:	187b      	adds	r3, r7, r1
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d013      	beq.n	8001802 <DisplayInit+0xae>
            ms = *addr++;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	1c5a      	adds	r2, r3, #1
 80017de:	607a      	str	r2, [r7, #4]
 80017e0:	781a      	ldrb	r2, [r3, #0]
 80017e2:	187b      	adds	r3, r7, r1
 80017e4:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 80017e6:	187b      	adds	r3, r7, r1
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	2bff      	cmp	r3, #255	@ 0xff
 80017ec:	d103      	bne.n	80017f6 <DisplayInit+0xa2>
 80017ee:	187b      	adds	r3, r7, r1
 80017f0:	22fa      	movs	r2, #250	@ 0xfa
 80017f2:	0052      	lsls	r2, r2, #1
 80017f4:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 80017f6:	230c      	movs	r3, #12
 80017f8:	18fb      	adds	r3, r7, r3
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	0018      	movs	r0, r3
 80017fe:	f001 f967 	bl	8002ad0 <HAL_Delay>
    while(numCommands--) {
 8001802:	220f      	movs	r2, #15
 8001804:	18bb      	adds	r3, r7, r2
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	18ba      	adds	r2, r7, r2
 800180a:	1e59      	subs	r1, r3, #1
 800180c:	7011      	strb	r1, [r2, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1ac      	bne.n	800176c <DisplayInit+0x18>
        }
    }
}
 8001812:	46c0      	nop			@ (mov r8, r8)
 8001814:	46c0      	nop			@ (mov r8, r8)
 8001816:	46bd      	mov	sp, r7
 8001818:	b005      	add	sp, #20
 800181a:	bd90      	pop	{r4, r7, pc}

0800181c <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 800181c:	b5b0      	push	{r4, r5, r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	0005      	movs	r5, r0
 8001824:	000c      	movs	r4, r1
 8001826:	0010      	movs	r0, r2
 8001828:	0019      	movs	r1, r3
 800182a:	1dfb      	adds	r3, r7, #7
 800182c:	1c2a      	adds	r2, r5, #0
 800182e:	701a      	strb	r2, [r3, #0]
 8001830:	1dbb      	adds	r3, r7, #6
 8001832:	1c22      	adds	r2, r4, #0
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	1d7b      	adds	r3, r7, #5
 8001838:	1c02      	adds	r2, r0, #0
 800183a:	701a      	strb	r2, [r3, #0]
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	1c0a      	adds	r2, r1, #0
 8001840:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001842:	202a      	movs	r0, #42	@ 0x2a
 8001844:	f7ff ff52 	bl	80016ec <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8001848:	210c      	movs	r1, #12
 800184a:	187b      	adds	r3, r7, r1
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
 8001850:	4b1c      	ldr	r3, [pc, #112]	@ (80018c4 <ST7735_SetAddressWindow+0xa8>)
 8001852:	781a      	ldrb	r2, [r3, #0]
 8001854:	1dfb      	adds	r3, r7, #7
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	18d3      	adds	r3, r2, r3
 800185a:	b2da      	uxtb	r2, r3
 800185c:	187b      	adds	r3, r7, r1
 800185e:	705a      	strb	r2, [r3, #1]
 8001860:	187b      	adds	r3, r7, r1
 8001862:	2200      	movs	r2, #0
 8001864:	709a      	strb	r2, [r3, #2]
 8001866:	4b17      	ldr	r3, [pc, #92]	@ (80018c4 <ST7735_SetAddressWindow+0xa8>)
 8001868:	781a      	ldrb	r2, [r3, #0]
 800186a:	1d7b      	adds	r3, r7, #5
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	18d3      	adds	r3, r2, r3
 8001870:	b2da      	uxtb	r2, r3
 8001872:	187b      	adds	r3, r7, r1
 8001874:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8001876:	000c      	movs	r4, r1
 8001878:	187b      	adds	r3, r7, r1
 800187a:	2104      	movs	r1, #4
 800187c:	0018      	movs	r0, r3
 800187e:	f7ff ff4f 	bl	8001720 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001882:	202b      	movs	r0, #43	@ 0x2b
 8001884:	f7ff ff32 	bl	80016ec <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8001888:	4b0f      	ldr	r3, [pc, #60]	@ (80018c8 <ST7735_SetAddressWindow+0xac>)
 800188a:	781a      	ldrb	r2, [r3, #0]
 800188c:	1dbb      	adds	r3, r7, #6
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	18d3      	adds	r3, r2, r3
 8001892:	b2da      	uxtb	r2, r3
 8001894:	0021      	movs	r1, r4
 8001896:	187b      	adds	r3, r7, r1
 8001898:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 800189a:	4b0b      	ldr	r3, [pc, #44]	@ (80018c8 <ST7735_SetAddressWindow+0xac>)
 800189c:	781a      	ldrb	r2, [r3, #0]
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	18d3      	adds	r3, r2, r3
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	187b      	adds	r3, r7, r1
 80018a8:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 80018aa:	187b      	adds	r3, r7, r1
 80018ac:	2104      	movs	r1, #4
 80018ae:	0018      	movs	r0, r3
 80018b0:	f7ff ff36 	bl	8001720 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80018b4:	202c      	movs	r0, #44	@ 0x2c
 80018b6:	f7ff ff19 	bl	80016ec <ST7735_WriteCommand>
}
 80018ba:	46c0      	nop			@ (mov r8, r8)
 80018bc:	46bd      	mov	sp, r7
 80018be:	b004      	add	sp, #16
 80018c0:	bdb0      	pop	{r4, r5, r7, pc}
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	20000573 	.word	0x20000573
 80018c8:	20000574 	.word	0x20000574

080018cc <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	0002      	movs	r2, r0
 80018d4:	1dfb      	adds	r3, r7, #7
 80018d6:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 80018d8:	f7ff feda 	bl	8001690 <ST7735_Select>
    ST7735_Reset();
 80018dc:	f7ff fef0 	bl	80016c0 <ST7735_Reset>
    DisplayInit(init_cmds1);
 80018e0:	4b0e      	ldr	r3, [pc, #56]	@ (800191c <ST7735_Init+0x50>)
 80018e2:	0018      	movs	r0, r3
 80018e4:	f7ff ff36 	bl	8001754 <DisplayInit>
    DisplayInit(init_cmds2);
 80018e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001920 <ST7735_Init+0x54>)
 80018ea:	0018      	movs	r0, r3
 80018ec:	f7ff ff32 	bl	8001754 <DisplayInit>
    DisplayInit(init_cmds3);
 80018f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <ST7735_Init+0x58>)
 80018f2:	0018      	movs	r0, r3
 80018f4:	f7ff ff2e 	bl	8001754 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 80018f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <ST7735_Init+0x5c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 80018fe:	4b0b      	ldr	r3, [pc, #44]	@ (800192c <ST7735_Init+0x60>)
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8001904:	1dfb      	adds	r3, r7, #7
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	0018      	movs	r0, r3
 800190a:	f000 f811 	bl	8001930 <ST7735_SetRotation>
    ST7735_Unselect();
 800190e:	f7ff fecb 	bl	80016a8 <ST7735_Unselect>

}
 8001912:	46c0      	nop			@ (mov r8, r8)
 8001914:	46bd      	mov	sp, r7
 8001916:	b002      	add	sp, #8
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			@ (mov r8, r8)
 800191c:	080082a4 	.word	0x080082a4
 8001920:	080082dc 	.word	0x080082dc
 8001924:	080082ec 	.word	0x080082ec
 8001928:	20000571 	.word	0x20000571
 800192c:	20000572 	.word	0x20000572

08001930 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	0002      	movs	r2, r0
 8001938:	1dfb      	adds	r3, r7, #7
 800193a:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 800193c:	230f      	movs	r3, #15
 800193e:	18fb      	adds	r3, r7, r3
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8001944:	1dfb      	adds	r3, r7, #7
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2203      	movs	r2, #3
 800194a:	4013      	ands	r3, r2
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4b36      	ldr	r3, [pc, #216]	@ (8001a28 <ST7735_SetRotation+0xf8>)
 8001950:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8001952:	4b35      	ldr	r3, [pc, #212]	@ (8001a28 <ST7735_SetRotation+0xf8>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b03      	cmp	r3, #3
 8001958:	d041      	beq.n	80019de <ST7735_SetRotation+0xae>
 800195a:	dc53      	bgt.n	8001a04 <ST7735_SetRotation+0xd4>
 800195c:	2b02      	cmp	r3, #2
 800195e:	d02b      	beq.n	80019b8 <ST7735_SetRotation+0x88>
 8001960:	dc50      	bgt.n	8001a04 <ST7735_SetRotation+0xd4>
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <ST7735_SetRotation+0x3c>
 8001966:	2b01      	cmp	r3, #1
 8001968:	d013      	beq.n	8001992 <ST7735_SetRotation+0x62>
 800196a:	e04b      	b.n	8001a04 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 800196c:	230f      	movs	r3, #15
 800196e:	18fb      	adds	r3, r7, r3
 8001970:	22c0      	movs	r2, #192	@ 0xc0
 8001972:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8001974:	4b2d      	ldr	r3, [pc, #180]	@ (8001a2c <ST7735_SetRotation+0xfc>)
 8001976:	22a0      	movs	r2, #160	@ 0xa0
 8001978:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800197a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a30 <ST7735_SetRotation+0x100>)
 800197c:	2280      	movs	r2, #128	@ 0x80
 800197e:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8001980:	4b2c      	ldr	r3, [pc, #176]	@ (8001a34 <ST7735_SetRotation+0x104>)
 8001982:	781a      	ldrb	r2, [r3, #0]
 8001984:	4b2c      	ldr	r3, [pc, #176]	@ (8001a38 <ST7735_SetRotation+0x108>)
 8001986:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8001988:	4b2c      	ldr	r3, [pc, #176]	@ (8001a3c <ST7735_SetRotation+0x10c>)
 800198a:	781a      	ldrb	r2, [r3, #0]
 800198c:	4b2c      	ldr	r3, [pc, #176]	@ (8001a40 <ST7735_SetRotation+0x110>)
 800198e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001990:	e038      	b.n	8001a04 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8001992:	230f      	movs	r3, #15
 8001994:	18fb      	adds	r3, r7, r3
 8001996:	22a0      	movs	r2, #160	@ 0xa0
 8001998:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 800199a:	4b25      	ldr	r3, [pc, #148]	@ (8001a30 <ST7735_SetRotation+0x100>)
 800199c:	22a0      	movs	r2, #160	@ 0xa0
 800199e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80019a0:	4b22      	ldr	r3, [pc, #136]	@ (8001a2c <ST7735_SetRotation+0xfc>)
 80019a2:	2280      	movs	r2, #128	@ 0x80
 80019a4:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80019a6:	4b23      	ldr	r3, [pc, #140]	@ (8001a34 <ST7735_SetRotation+0x104>)
 80019a8:	781a      	ldrb	r2, [r3, #0]
 80019aa:	4b25      	ldr	r3, [pc, #148]	@ (8001a40 <ST7735_SetRotation+0x110>)
 80019ac:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80019ae:	4b23      	ldr	r3, [pc, #140]	@ (8001a3c <ST7735_SetRotation+0x10c>)
 80019b0:	781a      	ldrb	r2, [r3, #0]
 80019b2:	4b21      	ldr	r3, [pc, #132]	@ (8001a38 <ST7735_SetRotation+0x108>)
 80019b4:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80019b6:	e025      	b.n	8001a04 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 80019b8:	230f      	movs	r3, #15
 80019ba:	18fb      	adds	r3, r7, r3
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 80019c0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a2c <ST7735_SetRotation+0xfc>)
 80019c2:	22a0      	movs	r2, #160	@ 0xa0
 80019c4:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80019c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a30 <ST7735_SetRotation+0x100>)
 80019c8:	2280      	movs	r2, #128	@ 0x80
 80019ca:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 80019cc:	4b19      	ldr	r3, [pc, #100]	@ (8001a34 <ST7735_SetRotation+0x104>)
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	4b19      	ldr	r3, [pc, #100]	@ (8001a38 <ST7735_SetRotation+0x108>)
 80019d2:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 80019d4:	4b19      	ldr	r3, [pc, #100]	@ (8001a3c <ST7735_SetRotation+0x10c>)
 80019d6:	781a      	ldrb	r2, [r3, #0]
 80019d8:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <ST7735_SetRotation+0x110>)
 80019da:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80019dc:	e012      	b.n	8001a04 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80019de:	230f      	movs	r3, #15
 80019e0:	18fb      	adds	r3, r7, r3
 80019e2:	2260      	movs	r2, #96	@ 0x60
 80019e4:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 80019e6:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <ST7735_SetRotation+0x100>)
 80019e8:	22a0      	movs	r2, #160	@ 0xa0
 80019ea:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80019ec:	4b0f      	ldr	r3, [pc, #60]	@ (8001a2c <ST7735_SetRotation+0xfc>)
 80019ee:	2280      	movs	r2, #128	@ 0x80
 80019f0:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80019f2:	4b10      	ldr	r3, [pc, #64]	@ (8001a34 <ST7735_SetRotation+0x104>)
 80019f4:	781a      	ldrb	r2, [r3, #0]
 80019f6:	4b12      	ldr	r3, [pc, #72]	@ (8001a40 <ST7735_SetRotation+0x110>)
 80019f8:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80019fa:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <ST7735_SetRotation+0x10c>)
 80019fc:	781a      	ldrb	r2, [r3, #0]
 80019fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001a38 <ST7735_SetRotation+0x108>)
 8001a00:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001a02:	46c0      	nop			@ (mov r8, r8)
  }
  ST7735_Select();
 8001a04:	f7ff fe44 	bl	8001690 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8001a08:	2036      	movs	r0, #54	@ 0x36
 8001a0a:	f7ff fe6f 	bl	80016ec <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8001a0e:	230f      	movs	r3, #15
 8001a10:	18fb      	adds	r3, r7, r3
 8001a12:	2101      	movs	r1, #1
 8001a14:	0018      	movs	r0, r3
 8001a16:	f7ff fe83 	bl	8001720 <ST7735_WriteData>
  ST7735_Unselect();
 8001a1a:	f7ff fe45 	bl	80016a8 <ST7735_Unselect>
}
 8001a1e:	46c0      	nop			@ (mov r8, r8)
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b004      	add	sp, #16
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			@ (mov r8, r8)
 8001a28:	20000570 	.word	0x20000570
 8001a2c:	2000056e 	.word	0x2000056e
 8001a30:	2000056c 	.word	0x2000056c
 8001a34:	20000571 	.word	0x20000571
 8001a38:	20000573 	.word	0x20000573
 8001a3c:	20000572 	.word	0x20000572
 8001a40:	20000574 	.word	0x20000574

08001a44 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	0004      	movs	r4, r0
 8001a4c:	0008      	movs	r0, r1
 8001a4e:	0011      	movs	r1, r2
 8001a50:	1dbb      	adds	r3, r7, #6
 8001a52:	1c22      	adds	r2, r4, #0
 8001a54:	801a      	strh	r2, [r3, #0]
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	1c02      	adds	r2, r0, #0
 8001a5a:	801a      	strh	r2, [r3, #0]
 8001a5c:	1cbb      	adds	r3, r7, #2
 8001a5e:	1c0a      	adds	r2, r1, #0
 8001a60:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 8001a62:	1dbb      	adds	r3, r7, #6
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	4a1c      	ldr	r2, [pc, #112]	@ (8001ad8 <ST7735_DrawPixel+0x94>)
 8001a68:	2100      	movs	r1, #0
 8001a6a:	5e52      	ldrsh	r2, [r2, r1]
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	da2f      	bge.n	8001ad0 <ST7735_DrawPixel+0x8c>
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	4a19      	ldr	r2, [pc, #100]	@ (8001adc <ST7735_DrawPixel+0x98>)
 8001a76:	2100      	movs	r1, #0
 8001a78:	5e52      	ldrsh	r2, [r2, r1]
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	da28      	bge.n	8001ad0 <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 8001a7e:	f7ff fe07 	bl	8001690 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8001a82:	1dbb      	adds	r3, r7, #6
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	b2d8      	uxtb	r0, r3
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	b2d9      	uxtb	r1, r3
 8001a8e:	1dbb      	adds	r3, r7, #6
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	3301      	adds	r3, #1
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	f7ff febb 	bl	800181c <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8001aa6:	1cbb      	adds	r3, r7, #2
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	0a1b      	lsrs	r3, r3, #8
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	210c      	movs	r1, #12
 8001ab2:	187b      	adds	r3, r7, r1
 8001ab4:	701a      	strb	r2, [r3, #0]
 8001ab6:	1cbb      	adds	r3, r7, #2
 8001ab8:	881b      	ldrh	r3, [r3, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 8001ac0:	187b      	adds	r3, r7, r1
 8001ac2:	2102      	movs	r1, #2
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f7ff fe2b 	bl	8001720 <ST7735_WriteData>

    ST7735_Unselect();
 8001aca:	f7ff fded 	bl	80016a8 <ST7735_Unselect>
 8001ace:	e000      	b.n	8001ad2 <ST7735_DrawPixel+0x8e>
        return;
 8001ad0:	46c0      	nop			@ (mov r8, r8)
}
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b005      	add	sp, #20
 8001ad6:	bd90      	pop	{r4, r7, pc}
 8001ad8:	2000056c 	.word	0x2000056c
 8001adc:	2000056e 	.word	0x2000056e

08001ae0 <ST7735_FillRectangle>:

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001ae0:	b5b0      	push	{r4, r5, r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	0005      	movs	r5, r0
 8001ae8:	000c      	movs	r4, r1
 8001aea:	0010      	movs	r0, r2
 8001aec:	0019      	movs	r1, r3
 8001aee:	1dbb      	adds	r3, r7, #6
 8001af0:	1c2a      	adds	r2, r5, #0
 8001af2:	801a      	strh	r2, [r3, #0]
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	1c22      	adds	r2, r4, #0
 8001af8:	801a      	strh	r2, [r3, #0]
 8001afa:	1cbb      	adds	r3, r7, #2
 8001afc:	1c02      	adds	r2, r0, #0
 8001afe:	801a      	strh	r2, [r3, #0]
 8001b00:	003b      	movs	r3, r7
 8001b02:	1c0a      	adds	r2, r1, #0
 8001b04:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8001b06:	1dbb      	adds	r3, r7, #6
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	4a49      	ldr	r2, [pc, #292]	@ (8001c30 <ST7735_FillRectangle+0x150>)
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	5e52      	ldrsh	r2, [r2, r1]
 8001b10:	4293      	cmp	r3, r2
 8001b12:	db00      	blt.n	8001b16 <ST7735_FillRectangle+0x36>
 8001b14:	e088      	b.n	8001c28 <ST7735_FillRectangle+0x148>
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	4a46      	ldr	r2, [pc, #280]	@ (8001c34 <ST7735_FillRectangle+0x154>)
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	5e52      	ldrsh	r2, [r2, r1]
 8001b20:	4293      	cmp	r3, r2
 8001b22:	db00      	blt.n	8001b26 <ST7735_FillRectangle+0x46>
 8001b24:	e080      	b.n	8001c28 <ST7735_FillRectangle+0x148>
    if((x + w - 1) >= _width) w = _width - x;
 8001b26:	1dbb      	adds	r3, r7, #6
 8001b28:	881a      	ldrh	r2, [r3, #0]
 8001b2a:	1cbb      	adds	r3, r7, #2
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	18d3      	adds	r3, r2, r3
 8001b30:	4a3f      	ldr	r2, [pc, #252]	@ (8001c30 <ST7735_FillRectangle+0x150>)
 8001b32:	2100      	movs	r1, #0
 8001b34:	5e52      	ldrsh	r2, [r2, r1]
 8001b36:	4293      	cmp	r3, r2
 8001b38:	dd08      	ble.n	8001b4c <ST7735_FillRectangle+0x6c>
 8001b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c30 <ST7735_FillRectangle+0x150>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	5e9b      	ldrsh	r3, [r3, r2]
 8001b40:	b299      	uxth	r1, r3
 8001b42:	1cbb      	adds	r3, r7, #2
 8001b44:	1dba      	adds	r2, r7, #6
 8001b46:	8812      	ldrh	r2, [r2, #0]
 8001b48:	1a8a      	subs	r2, r1, r2
 8001b4a:	801a      	strh	r2, [r3, #0]
    if((y + h - 1) >= _height) h = _height - y;
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	881a      	ldrh	r2, [r3, #0]
 8001b50:	003b      	movs	r3, r7
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	18d3      	adds	r3, r2, r3
 8001b56:	4a37      	ldr	r2, [pc, #220]	@ (8001c34 <ST7735_FillRectangle+0x154>)
 8001b58:	2100      	movs	r1, #0
 8001b5a:	5e52      	ldrsh	r2, [r2, r1]
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	dd08      	ble.n	8001b72 <ST7735_FillRectangle+0x92>
 8001b60:	4b34      	ldr	r3, [pc, #208]	@ (8001c34 <ST7735_FillRectangle+0x154>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	5e9b      	ldrsh	r3, [r3, r2]
 8001b66:	b299      	uxth	r1, r3
 8001b68:	003b      	movs	r3, r7
 8001b6a:	1d3a      	adds	r2, r7, #4
 8001b6c:	8812      	ldrh	r2, [r2, #0]
 8001b6e:	1a8a      	subs	r2, r1, r2
 8001b70:	801a      	strh	r2, [r3, #0]

    ST7735_Select();
 8001b72:	f7ff fd8d 	bl	8001690 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001b76:	1dbb      	adds	r3, r7, #6
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	b2d8      	uxtb	r0, r3
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	b2d9      	uxtb	r1, r3
 8001b82:	1dbb      	adds	r3, r7, #6
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	1cbb      	adds	r3, r7, #2
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	18d3      	adds	r3, r2, r3
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	3b01      	subs	r3, #1
 8001b94:	b2dc      	uxtb	r4, r3
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	003b      	movs	r3, r7
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	18d3      	adds	r3, r2, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	0022      	movs	r2, r4
 8001bac:	f7ff fe36 	bl	800181c <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001bb0:	2120      	movs	r1, #32
 8001bb2:	187b      	adds	r3, r7, r1
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	200c      	movs	r0, #12
 8001bbe:	183b      	adds	r3, r7, r0
 8001bc0:	701a      	strb	r2, [r3, #0]
 8001bc2:	187b      	adds	r3, r7, r1
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	183b      	adds	r3, r7, r0
 8001bca:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001bcc:	23a0      	movs	r3, #160	@ 0xa0
 8001bce:	05db      	lsls	r3, r3, #23
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	2110      	movs	r1, #16
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f001 f9f2 	bl	8002fbe <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	003a      	movs	r2, r7
 8001bde:	8812      	ldrh	r2, [r2, #0]
 8001be0:	801a      	strh	r2, [r3, #0]
 8001be2:	e01a      	b.n	8001c1a <ST7735_FillRectangle+0x13a>
        for(x = w; x > 0; x--) {
 8001be4:	1dbb      	adds	r3, r7, #6
 8001be6:	1cba      	adds	r2, r7, #2
 8001be8:	8812      	ldrh	r2, [r2, #0]
 8001bea:	801a      	strh	r2, [r3, #0]
 8001bec:	e00c      	b.n	8001c08 <ST7735_FillRectangle+0x128>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001bee:	2301      	movs	r3, #1
 8001bf0:	425b      	negs	r3, r3
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	18b9      	adds	r1, r7, r2
 8001bf6:	4810      	ldr	r0, [pc, #64]	@ (8001c38 <ST7735_FillRectangle+0x158>)
 8001bf8:	2202      	movs	r2, #2
 8001bfa:	f003 fb43 	bl	8005284 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001bfe:	1dbb      	adds	r3, r7, #6
 8001c00:	881a      	ldrh	r2, [r3, #0]
 8001c02:	1dbb      	adds	r3, r7, #6
 8001c04:	3a01      	subs	r2, #1
 8001c06:	801a      	strh	r2, [r3, #0]
 8001c08:	1dbb      	adds	r3, r7, #6
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1ee      	bne.n	8001bee <ST7735_FillRectangle+0x10e>
    for(y = h; y > 0; y--) {
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	881a      	ldrh	r2, [r3, #0]
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	3a01      	subs	r2, #1
 8001c18:	801a      	strh	r2, [r3, #0]
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1e0      	bne.n	8001be4 <ST7735_FillRectangle+0x104>
        }
    }

    ST7735_Unselect();
 8001c22:	f7ff fd41 	bl	80016a8 <ST7735_Unselect>
 8001c26:	e000      	b.n	8001c2a <ST7735_FillRectangle+0x14a>
    if((x >= _width) || (y >= _height)) return;
 8001c28:	46c0      	nop			@ (mov r8, r8)
}
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b004      	add	sp, #16
 8001c2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c30:	2000056c 	.word	0x2000056c
 8001c34:	2000056e 	.word	0x2000056e
 8001c38:	200006f4 	.word	0x200006f4

08001c3c <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8001c3c:	b5b0      	push	{r4, r5, r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	0005      	movs	r5, r0
 8001c44:	000c      	movs	r4, r1
 8001c46:	0010      	movs	r0, r2
 8001c48:	0019      	movs	r1, r3
 8001c4a:	1dbb      	adds	r3, r7, #6
 8001c4c:	1c2a      	adds	r2, r5, #0
 8001c4e:	801a      	strh	r2, [r3, #0]
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	1c22      	adds	r2, r4, #0
 8001c54:	801a      	strh	r2, [r3, #0]
 8001c56:	1cbb      	adds	r3, r7, #2
 8001c58:	1c02      	adds	r2, r0, #0
 8001c5a:	801a      	strh	r2, [r3, #0]
 8001c5c:	003b      	movs	r3, r7
 8001c5e:	1c0a      	adds	r2, r1, #0
 8001c60:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8001c62:	1dbb      	adds	r3, r7, #6
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	4a2a      	ldr	r2, [pc, #168]	@ (8001d10 <ST7735_DrawImage+0xd4>)
 8001c68:	2100      	movs	r1, #0
 8001c6a:	5e52      	ldrsh	r2, [r2, r1]
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	da47      	bge.n	8001d00 <ST7735_DrawImage+0xc4>
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	4a27      	ldr	r2, [pc, #156]	@ (8001d14 <ST7735_DrawImage+0xd8>)
 8001c76:	2100      	movs	r1, #0
 8001c78:	5e52      	ldrsh	r2, [r2, r1]
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	da40      	bge.n	8001d00 <ST7735_DrawImage+0xc4>
    if((x + w - 1) >= _width) return;
 8001c7e:	1dbb      	adds	r3, r7, #6
 8001c80:	881a      	ldrh	r2, [r3, #0]
 8001c82:	1cbb      	adds	r3, r7, #2
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	18d3      	adds	r3, r2, r3
 8001c88:	4a21      	ldr	r2, [pc, #132]	@ (8001d10 <ST7735_DrawImage+0xd4>)
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	5e52      	ldrsh	r2, [r2, r1]
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	dc38      	bgt.n	8001d04 <ST7735_DrawImage+0xc8>
    if((y + h - 1) >= _height) return;
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	881a      	ldrh	r2, [r3, #0]
 8001c96:	003b      	movs	r3, r7
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	18d3      	adds	r3, r2, r3
 8001c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001d14 <ST7735_DrawImage+0xd8>)
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	5e52      	ldrsh	r2, [r2, r1]
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	dc30      	bgt.n	8001d08 <ST7735_DrawImage+0xcc>

    ST7735_Select();
 8001ca6:	f7ff fcf3 	bl	8001690 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001caa:	1dbb      	adds	r3, r7, #6
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	b2d8      	uxtb	r0, r3
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	b2d9      	uxtb	r1, r3
 8001cb6:	1dbb      	adds	r3, r7, #6
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	1cbb      	adds	r3, r7, #2
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	18d3      	adds	r3, r2, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	b2dc      	uxtb	r4, r3
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	003b      	movs	r3, r7
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	18d3      	adds	r3, r2, r3
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	0022      	movs	r2, r4
 8001ce0:	f7ff fd9c 	bl	800181c <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8001ce4:	1cbb      	adds	r3, r7, #2
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	003a      	movs	r2, r7
 8001cea:	8812      	ldrh	r2, [r2, #0]
 8001cec:	4353      	muls	r3, r2
 8001cee:	005a      	lsls	r2, r3, #1
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	0011      	movs	r1, r2
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f7ff fd13 	bl	8001720 <ST7735_WriteData>
    ST7735_Unselect();
 8001cfa:	f7ff fcd5 	bl	80016a8 <ST7735_Unselect>
 8001cfe:	e004      	b.n	8001d0a <ST7735_DrawImage+0xce>
    if((x >= _width) || (y >= _height)) return;
 8001d00:	46c0      	nop			@ (mov r8, r8)
 8001d02:	e002      	b.n	8001d0a <ST7735_DrawImage+0xce>
    if((x + w - 1) >= _width) return;
 8001d04:	46c0      	nop			@ (mov r8, r8)
 8001d06:	e000      	b.n	8001d0a <ST7735_DrawImage+0xce>
    if((y + h - 1) >= _height) return;
 8001d08:	46c0      	nop			@ (mov r8, r8)
}
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b002      	add	sp, #8
 8001d0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d10:	2000056c 	.word	0x2000056c
 8001d14:	2000056e 	.word	0x2000056e

08001d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b087      	sub	sp, #28
 8001d1c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d1e:	f000 fe51 	bl	80029c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d22:	f000 f92f 	bl	8001f84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d26:	f000 fae5 	bl	80022f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001d2a:	f000 f98d 	bl	8002048 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001d2e:	f000 f9cb 	bl	80020c8 <MX_SPI1_Init>
  MX_TIM17_Init();
 8001d32:	f000 fa09 	bl	8002148 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8001d36:	f000 fa8f 	bl	8002258 <MX_USART1_UART_Init>
  //MX_USART2_UART_Init();
  //MX_RTC_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001d3a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f30 <main+0x218>)
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f003 fe2e 	bl	80059a0 <HAL_TIM_PWM_Start>
  ST7735_Unselect();
 8001d44:	f7ff fcb0 	bl	80016a8 <ST7735_Unselect>
  ST7735_Init(1);
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f7ff fdbf 	bl	80018cc <ST7735_Init>
  //testAll();
  buffer[0] = 'A';
 8001d4e:	4b79      	ldr	r3, [pc, #484]	@ (8001f34 <main+0x21c>)
 8001d50:	2241      	movs	r2, #65	@ 0x41
 8001d52:	701a      	strb	r2, [r3, #0]
  buffer[1] = 'B';
 8001d54:	4b77      	ldr	r3, [pc, #476]	@ (8001f34 <main+0x21c>)
 8001d56:	2242      	movs	r2, #66	@ 0x42
 8001d58:	705a      	strb	r2, [r3, #1]
  TIM17->CCR1 = 5;
 8001d5a:	4b77      	ldr	r3, [pc, #476]	@ (8001f38 <main+0x220>)
 8001d5c:	2205      	movs	r2, #5
 8001d5e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM17->PSC=64;
 8001d60:	4b75      	ldr	r3, [pc, #468]	@ (8001f38 <main+0x220>)
 8001d62:	2240      	movs	r2, #64	@ 0x40
 8001d64:	629a      	str	r2, [r3, #40]	@ 0x28
  uint8_t ret=0;
 8001d66:	1dfb      	adds	r3, r7, #7
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
    //_ADXL343_Init();

      //Pedometer Setup
      _ADXL343_WriteReg8(0x19, 0x02);
 8001d6c:	2102      	movs	r1, #2
 8001d6e:	2019      	movs	r0, #25
 8001d70:	f000 fb58 	bl	8002424 <_ADXL343_WriteReg8>
      ////wait

      _ADXL343_WriteReg8(0x7C, 0x01);
 8001d74:	2101      	movs	r1, #1
 8001d76:	207c      	movs	r0, #124	@ 0x7c
 8001d78:	f000 fb54 	bl	8002424 <_ADXL343_WriteReg8>
       _ADXL343_WriteReg8(0x1A, 0x38);
 8001d7c:	2138      	movs	r1, #56	@ 0x38
 8001d7e:	201a      	movs	r0, #26
 8001d80:	f000 fb50 	bl	8002424 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1B, 0x04);
 8001d84:	2104      	movs	r1, #4
 8001d86:	201b      	movs	r0, #27
 8001d88:	f000 fb4c 	bl	8002424 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x1F, 0x80);
 8001d8c:	2180      	movs	r1, #128	@ 0x80
 8001d8e:	201f      	movs	r0, #31
 8001d90:	f000 fb48 	bl	8002424 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x21, 0x80);
 8001d94:	2180      	movs	r1, #128	@ 0x80
 8001d96:	2021      	movs	r0, #33	@ 0x21
 8001d98:	f000 fb44 	bl	8002424 <_ADXL343_WriteReg8>



      //  //Step Counter
      _ADXL343_WriteReg8(0x18, 0x01); // enable walking mode
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	2018      	movs	r0, #24
 8001da0:	f000 fb40 	bl	8002424 <_ADXL343_WriteReg8>
      _ADXL343_WriteReg8(0x20, 0x01); // enable step interrupt
 8001da4:	2101      	movs	r1, #1
 8001da6:	2020      	movs	r0, #32
 8001da8:	f000 fb3c 	bl	8002424 <_ADXL343_WriteReg8>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  steps=0;
 8001dac:	4b63      	ldr	r3, [pc, #396]	@ (8001f3c <main+0x224>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]
	  if((whileI++)%3==0)
 8001db2:	4b63      	ldr	r3, [pc, #396]	@ (8001f40 <main+0x228>)
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	b291      	uxth	r1, r2
 8001dbc:	4a60      	ldr	r2, [pc, #384]	@ (8001f40 <main+0x228>)
 8001dbe:	8011      	strh	r1, [r2, #0]
 8001dc0:	2103      	movs	r1, #3
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f7fe fa2e 	bl	8000224 <__aeabi_uidivmod>
 8001dc8:	000b      	movs	r3, r1
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10f      	bne.n	8001df0 <main+0xd8>
		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET)
 8001dd0:	4b5c      	ldr	r3, [pc, #368]	@ (8001f44 <main+0x22c>)
 8001dd2:	2102      	movs	r1, #2
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f001 f8d5 	bl	8002f84 <HAL_GPIO_ReadPin>
 8001dda:	0003      	movs	r3, r0
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d104      	bne.n	8001dea <main+0xd2>
		  		  fillScreen(WHITE);
 8001de0:	4b59      	ldr	r3, [pc, #356]	@ (8001f48 <main+0x230>)
 8001de2:	0018      	movs	r0, r3
 8001de4:	f7ff fb1a 	bl	800141c <fillScreen>
 8001de8:	e002      	b.n	8001df0 <main+0xd8>
		  	  else
		  		  fillScreen(BLACK);
 8001dea:	2000      	movs	r0, #0
 8001dec:	f7ff fb16 	bl	800141c <fillScreen>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == GPIO_PIN_SET)
 8001df0:	2380      	movs	r3, #128	@ 0x80
 8001df2:	011a      	lsls	r2, r3, #4
 8001df4:	23a0      	movs	r3, #160	@ 0xa0
 8001df6:	05db      	lsls	r3, r3, #23
 8001df8:	0011      	movs	r1, r2
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	f001 f8c2 	bl	8002f84 <HAL_GPIO_ReadPin>
 8001e00:	0003      	movs	r3, r0
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d106      	bne.n	8001e14 <main+0xfc>
		  petXPos-=5;
 8001e06:	4b51      	ldr	r3, [pc, #324]	@ (8001f4c <main+0x234>)
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	3b05      	subs	r3, #5
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	4b4e      	ldr	r3, [pc, #312]	@ (8001f4c <main+0x234>)
 8001e12:	801a      	strh	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12) == GPIO_PIN_SET)
 8001e14:	2380      	movs	r3, #128	@ 0x80
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	23a0      	movs	r3, #160	@ 0xa0
 8001e1a:	05db      	lsls	r3, r3, #23
 8001e1c:	0011      	movs	r1, r2
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f001 f8b0 	bl	8002f84 <HAL_GPIO_ReadPin>
 8001e24:	0003      	movs	r3, r0
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d106      	bne.n	8001e38 <main+0x120>
		  petXPos+=5;
 8001e2a:	4b48      	ldr	r3, [pc, #288]	@ (8001f4c <main+0x234>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	3305      	adds	r3, #5
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	4b45      	ldr	r3, [pc, #276]	@ (8001f4c <main+0x234>)
 8001e36:	801a      	strh	r2, [r3, #0]
	  if(petXPos<3)petXPos=0;
 8001e38:	4b44      	ldr	r3, [pc, #272]	@ (8001f4c <main+0x234>)
 8001e3a:	881b      	ldrh	r3, [r3, #0]
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d802      	bhi.n	8001e48 <main+0x130>
 8001e42:	4b42      	ldr	r3, [pc, #264]	@ (8001f4c <main+0x234>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	801a      	strh	r2, [r3, #0]
	  if(petXPos>60) petXPos=60;
 8001e48:	4b40      	ldr	r3, [pc, #256]	@ (8001f4c <main+0x234>)
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	2b3c      	cmp	r3, #60	@ 0x3c
 8001e50:	d902      	bls.n	8001e58 <main+0x140>
 8001e52:	4b3e      	ldr	r3, [pc, #248]	@ (8001f4c <main+0x234>)
 8001e54:	223c      	movs	r2, #60	@ 0x3c
 8001e56:	801a      	strh	r2, [r3, #0]
	  freq = freqs[(toneIndex++)%8];
 8001e58:	4b3d      	ldr	r3, [pc, #244]	@ (8001f50 <main+0x238>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	1c5a      	adds	r2, r3, #1
 8001e60:	b291      	uxth	r1, r2
 8001e62:	4a3b      	ldr	r2, [pc, #236]	@ (8001f50 <main+0x238>)
 8001e64:	8011      	strh	r1, [r2, #0]
 8001e66:	001a      	movs	r2, r3
 8001e68:	2307      	movs	r3, #7
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	4a39      	ldr	r2, [pc, #228]	@ (8001f54 <main+0x23c>)
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	18d3      	adds	r3, r2, r3
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4938      	ldr	r1, [pc, #224]	@ (8001f58 <main+0x240>)
 8001e78:	600a      	str	r2, [r1, #0]
 8001e7a:	604b      	str	r3, [r1, #4]
	  TIM17->ARR=(uint32_t)(987*(float)1000/(float)freq);
 8001e7c:	4b36      	ldr	r3, [pc, #216]	@ (8001f58 <main+0x240>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	0010      	movs	r0, r2
 8001e84:	0019      	movs	r1, r3
 8001e86:	f7fe ff5b 	bl	8000d40 <__aeabi_d2f>
 8001e8a:	1c03      	adds	r3, r0, #0
 8001e8c:	1c19      	adds	r1, r3, #0
 8001e8e:	4833      	ldr	r0, [pc, #204]	@ (8001f5c <main+0x244>)
 8001e90:	f7fe fbbc 	bl	800060c <__aeabi_fdiv>
 8001e94:	1c03      	adds	r3, r0, #0
 8001e96:	4c28      	ldr	r4, [pc, #160]	@ (8001f38 <main+0x220>)
 8001e98:	1c18      	adds	r0, r3, #0
 8001e9a:	f7fe fad3 	bl	8000444 <__aeabi_f2uiz>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	62e3      	str	r3, [r4, #44]	@ 0x2c
	  //fillScreen(WHITE);
	  drawImage(testImage, palette, petXPos, 40, 64, 64, 296);
 8001ea2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f4c <main+0x234>)
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	492d      	ldr	r1, [pc, #180]	@ (8001f60 <main+0x248>)
 8001eaa:	482e      	ldr	r0, [pc, #184]	@ (8001f64 <main+0x24c>)
 8001eac:	2394      	movs	r3, #148	@ 0x94
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	9302      	str	r3, [sp, #8]
 8001eb2:	2340      	movs	r3, #64	@ 0x40
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	2340      	movs	r3, #64	@ 0x40
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	2328      	movs	r3, #40	@ 0x28
 8001ebc:	f7ff fb22 	bl	8001504 <drawImage>
	  //_ADXL343_ReadReg8(0x06, &accelZ, 1);
	  //_ADXL343_ReadReg8(0x07, &accelX, 1);
	  //_ADXL343_ReadReg8(0x08, &accelY, 1);
	  //_ADXL343_ReadReg8(0x09, &accelZ, 1);

	  sprintf(buffer2, "X:%d - Y:%d - Z:%d ", accelX, accelY, accelZ);
 8001ec0:	4b29      	ldr	r3, [pc, #164]	@ (8001f68 <main+0x250>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	001a      	movs	r2, r3
 8001ec6:	4b29      	ldr	r3, [pc, #164]	@ (8001f6c <main+0x254>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	001c      	movs	r4, r3
 8001ecc:	4b28      	ldr	r3, [pc, #160]	@ (8001f70 <main+0x258>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	4928      	ldr	r1, [pc, #160]	@ (8001f74 <main+0x25c>)
 8001ed2:	4829      	ldr	r0, [pc, #164]	@ (8001f78 <main+0x260>)
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	0023      	movs	r3, r4
 8001ed8:	f005 fa68 	bl	80073ac <siprintf>
	  drawString(0, 10, buffer2, BLACK, GREEN, 1, 1);
 8001edc:	4a26      	ldr	r2, [pc, #152]	@ (8001f78 <main+0x260>)
 8001ede:	2301      	movs	r3, #1
 8001ee0:	9302      	str	r3, [sp, #8]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	4b25      	ldr	r3, [pc, #148]	@ (8001f7c <main+0x264>)
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	2300      	movs	r3, #0
 8001eec:	210a      	movs	r1, #10
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f7ff f924 	bl	800113c <drawString>

	  _ADXL343_ReadReg8(0x15, &steps, 1);
 8001ef4:	4b11      	ldr	r3, [pc, #68]	@ (8001f3c <main+0x224>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	0019      	movs	r1, r3
 8001efa:	2015      	movs	r0, #21
 8001efc:	f000 fa60 	bl	80023c0 <_ADXL343_ReadReg8>
	  sprintf(buffer2, "Steps: %d ", (steps&0b00000011));
 8001f00:	4b0e      	ldr	r3, [pc, #56]	@ (8001f3c <main+0x224>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	001a      	movs	r2, r3
 8001f06:	2303      	movs	r3, #3
 8001f08:	401a      	ands	r2, r3
 8001f0a:	491d      	ldr	r1, [pc, #116]	@ (8001f80 <main+0x268>)
 8001f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f78 <main+0x260>)
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f005 fa4c 	bl	80073ac <siprintf>
	  drawString(0, 20, buffer2, BLACK, GREEN, 1, 1);
 8001f14:	4a18      	ldr	r2, [pc, #96]	@ (8001f78 <main+0x260>)
 8001f16:	2301      	movs	r3, #1
 8001f18:	9302      	str	r3, [sp, #8]
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	9301      	str	r3, [sp, #4]
 8001f1e:	4b17      	ldr	r3, [pc, #92]	@ (8001f7c <main+0x264>)
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	2300      	movs	r3, #0
 8001f24:	2114      	movs	r1, #20
 8001f26:	2000      	movs	r0, #0
 8001f28:	f7ff f908 	bl	800113c <drawString>
	  steps=0;
 8001f2c:	e73e      	b.n	8001dac <main+0x94>
 8001f2e:	46c0      	nop			@ (mov r8, r8)
 8001f30:	20000758 	.word	0x20000758
 8001f34:	2000057c 	.word	0x2000057c
 8001f38:	40014800 	.word	0x40014800
 8001f3c:	20000673 	.word	0x20000673
 8001f40:	20000576 	.word	0x20000576
 8001f44:	50000800 	.word	0x50000800
 8001f48:	0000ffff 	.word	0x0000ffff
 8001f4c:	20000578 	.word	0x20000578
 8001f50:	20000608 	.word	0x20000608
 8001f54:	200004b0 	.word	0x200004b0
 8001f58:	20000600 	.word	0x20000600
 8001f5c:	4970f780 	.word	0x4970f780
 8001f60:	200004a0 	.word	0x200004a0
 8001f64:	20000000 	.word	0x20000000
 8001f68:	20000670 	.word	0x20000670
 8001f6c:	20000671 	.word	0x20000671
 8001f70:	20000672 	.word	0x20000672
 8001f74:	08007d00 	.word	0x08007d00
 8001f78:	2000060c 	.word	0x2000060c
 8001f7c:	ffffe007 	.word	0xffffe007
 8001f80:	08007d14 	.word	0x08007d14

08001f84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f84:	b590      	push	{r4, r7, lr}
 8001f86:	b095      	sub	sp, #84	@ 0x54
 8001f88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f8a:	2414      	movs	r4, #20
 8001f8c:	193b      	adds	r3, r7, r4
 8001f8e:	0018      	movs	r0, r3
 8001f90:	233c      	movs	r3, #60	@ 0x3c
 8001f92:	001a      	movs	r2, r3
 8001f94:	2100      	movs	r1, #0
 8001f96:	f005 fa2b 	bl	80073f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	2310      	movs	r3, #16
 8001fa0:	001a      	movs	r2, r3
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	f005 fa24 	bl	80073f0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fa8:	2380      	movs	r3, #128	@ 0x80
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	0018      	movs	r0, r3
 8001fae:	f001 fe67 	bl	8003c80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001fb2:	193b      	adds	r3, r7, r4
 8001fb4:	220a      	movs	r2, #10
 8001fb6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fb8:	193b      	adds	r3, r7, r4
 8001fba:	2280      	movs	r2, #128	@ 0x80
 8001fbc:	0052      	lsls	r2, r2, #1
 8001fbe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001fc0:	0021      	movs	r1, r4
 8001fc2:	187b      	adds	r3, r7, r1
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fc8:	187b      	adds	r3, r7, r1
 8001fca:	2240      	movs	r2, #64	@ 0x40
 8001fcc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001fce:	187b      	adds	r3, r7, r1
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fd4:	187b      	adds	r3, r7, r1
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fda:	187b      	adds	r3, r7, r1
 8001fdc:	2202      	movs	r2, #2
 8001fde:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001fe0:	187b      	adds	r3, r7, r1
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001fe6:	187b      	adds	r3, r7, r1
 8001fe8:	2208      	movs	r2, #8
 8001fea:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fec:	187b      	adds	r3, r7, r1
 8001fee:	2280      	movs	r2, #128	@ 0x80
 8001ff0:	0292      	lsls	r2, r2, #10
 8001ff2:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ff4:	187b      	adds	r3, r7, r1
 8001ff6:	2280      	movs	r2, #128	@ 0x80
 8001ff8:	0492      	lsls	r2, r2, #18
 8001ffa:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ffc:	187b      	adds	r3, r7, r1
 8001ffe:	2280      	movs	r2, #128	@ 0x80
 8002000:	0592      	lsls	r2, r2, #22
 8002002:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002004:	187b      	adds	r3, r7, r1
 8002006:	0018      	movs	r0, r3
 8002008:	f001 fe86 	bl	8003d18 <HAL_RCC_OscConfig>
 800200c:	1e03      	subs	r3, r0, #0
 800200e:	d001      	beq.n	8002014 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002010:	f000 fa68 	bl	80024e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	2207      	movs	r2, #7
 8002018:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	2202      	movs	r2, #2
 800201e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	2200      	movs	r2, #0
 800202a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	2102      	movs	r1, #2
 8002030:	0018      	movs	r0, r3
 8002032:	f002 f9d1 	bl	80043d8 <HAL_RCC_ClockConfig>
 8002036:	1e03      	subs	r3, r0, #0
 8002038:	d001      	beq.n	800203e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800203a:	f000 fa53 	bl	80024e4 <Error_Handler>
  }
}
 800203e:	46c0      	nop			@ (mov r8, r8)
 8002040:	46bd      	mov	sp, r7
 8002042:	b015      	add	sp, #84	@ 0x54
 8002044:	bd90      	pop	{r4, r7, pc}
	...

08002048 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800204c:	4b1b      	ldr	r3, [pc, #108]	@ (80020bc <MX_I2C1_Init+0x74>)
 800204e:	4a1c      	ldr	r2, [pc, #112]	@ (80020c0 <MX_I2C1_Init+0x78>)
 8002050:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8002052:	4b1a      	ldr	r3, [pc, #104]	@ (80020bc <MX_I2C1_Init+0x74>)
 8002054:	4a1b      	ldr	r2, [pc, #108]	@ (80020c4 <MX_I2C1_Init+0x7c>)
 8002056:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002058:	4b18      	ldr	r3, [pc, #96]	@ (80020bc <MX_I2C1_Init+0x74>)
 800205a:	2200      	movs	r2, #0
 800205c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800205e:	4b17      	ldr	r3, [pc, #92]	@ (80020bc <MX_I2C1_Init+0x74>)
 8002060:	2201      	movs	r2, #1
 8002062:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002064:	4b15      	ldr	r3, [pc, #84]	@ (80020bc <MX_I2C1_Init+0x74>)
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800206a:	4b14      	ldr	r3, [pc, #80]	@ (80020bc <MX_I2C1_Init+0x74>)
 800206c:	2200      	movs	r2, #0
 800206e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002070:	4b12      	ldr	r3, [pc, #72]	@ (80020bc <MX_I2C1_Init+0x74>)
 8002072:	2200      	movs	r2, #0
 8002074:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002076:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <MX_I2C1_Init+0x74>)
 8002078:	2200      	movs	r2, #0
 800207a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800207c:	4b0f      	ldr	r3, [pc, #60]	@ (80020bc <MX_I2C1_Init+0x74>)
 800207e:	2200      	movs	r2, #0
 8002080:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002082:	4b0e      	ldr	r3, [pc, #56]	@ (80020bc <MX_I2C1_Init+0x74>)
 8002084:	0018      	movs	r0, r3
 8002086:	f000 ffb7 	bl	8002ff8 <HAL_I2C_Init>
 800208a:	1e03      	subs	r3, r0, #0
 800208c:	d001      	beq.n	8002092 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800208e:	f000 fa29 	bl	80024e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002092:	4b0a      	ldr	r3, [pc, #40]	@ (80020bc <MX_I2C1_Init+0x74>)
 8002094:	2100      	movs	r1, #0
 8002096:	0018      	movs	r0, r3
 8002098:	f001 fd5a 	bl	8003b50 <HAL_I2CEx_ConfigAnalogFilter>
 800209c:	1e03      	subs	r3, r0, #0
 800209e:	d001      	beq.n	80020a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80020a0:	f000 fa20 	bl	80024e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020a4:	4b05      	ldr	r3, [pc, #20]	@ (80020bc <MX_I2C1_Init+0x74>)
 80020a6:	2100      	movs	r1, #0
 80020a8:	0018      	movs	r0, r3
 80020aa:	f001 fd9d 	bl	8003be8 <HAL_I2CEx_ConfigDigitalFilter>
 80020ae:	1e03      	subs	r3, r0, #0
 80020b0:	d001      	beq.n	80020b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80020b2:	f000 fa17 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020b6:	46c0      	nop			@ (mov r8, r8)
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000674 	.word	0x20000674
 80020c0:	40005400 	.word	0x40005400
 80020c4:	10b17db5 	.word	0x10b17db5

080020c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80020cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002140 <MX_SPI1_Init+0x78>)
 80020ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002144 <MX_SPI1_Init+0x7c>)
 80020d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002140 <MX_SPI1_Init+0x78>)
 80020d4:	2282      	movs	r2, #130	@ 0x82
 80020d6:	0052      	lsls	r2, r2, #1
 80020d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80020da:	4b19      	ldr	r3, [pc, #100]	@ (8002140 <MX_SPI1_Init+0x78>)
 80020dc:	2280      	movs	r2, #128	@ 0x80
 80020de:	0212      	lsls	r2, r2, #8
 80020e0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020e2:	4b17      	ldr	r3, [pc, #92]	@ (8002140 <MX_SPI1_Init+0x78>)
 80020e4:	22e0      	movs	r2, #224	@ 0xe0
 80020e6:	00d2      	lsls	r2, r2, #3
 80020e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ea:	4b15      	ldr	r3, [pc, #84]	@ (8002140 <MX_SPI1_Init+0x78>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020f0:	4b13      	ldr	r3, [pc, #76]	@ (8002140 <MX_SPI1_Init+0x78>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020f6:	4b12      	ldr	r3, [pc, #72]	@ (8002140 <MX_SPI1_Init+0x78>)
 80020f8:	2280      	movs	r2, #128	@ 0x80
 80020fa:	0092      	lsls	r2, r2, #2
 80020fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80020fe:	4b10      	ldr	r3, [pc, #64]	@ (8002140 <MX_SPI1_Init+0x78>)
 8002100:	2220      	movs	r2, #32
 8002102:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002104:	4b0e      	ldr	r3, [pc, #56]	@ (8002140 <MX_SPI1_Init+0x78>)
 8002106:	2200      	movs	r2, #0
 8002108:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800210a:	4b0d      	ldr	r3, [pc, #52]	@ (8002140 <MX_SPI1_Init+0x78>)
 800210c:	2200      	movs	r2, #0
 800210e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002110:	4b0b      	ldr	r3, [pc, #44]	@ (8002140 <MX_SPI1_Init+0x78>)
 8002112:	2200      	movs	r2, #0
 8002114:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002116:	4b0a      	ldr	r3, [pc, #40]	@ (8002140 <MX_SPI1_Init+0x78>)
 8002118:	2207      	movs	r2, #7
 800211a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800211c:	4b08      	ldr	r3, [pc, #32]	@ (8002140 <MX_SPI1_Init+0x78>)
 800211e:	2200      	movs	r2, #0
 8002120:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002122:	4b07      	ldr	r3, [pc, #28]	@ (8002140 <MX_SPI1_Init+0x78>)
 8002124:	2208      	movs	r2, #8
 8002126:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002128:	4b05      	ldr	r3, [pc, #20]	@ (8002140 <MX_SPI1_Init+0x78>)
 800212a:	0018      	movs	r0, r3
 800212c:	f002 fff2 	bl	8005114 <HAL_SPI_Init>
 8002130:	1e03      	subs	r3, r0, #0
 8002132:	d001      	beq.n	8002138 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8002134:	f000 f9d6 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002138:	46c0      	nop			@ (mov r8, r8)
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	46c0      	nop			@ (mov r8, r8)
 8002140:	200006f4 	.word	0x200006f4
 8002144:	40013000 	.word	0x40013000

08002148 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b094      	sub	sp, #80	@ 0x50
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800214e:	2334      	movs	r3, #52	@ 0x34
 8002150:	18fb      	adds	r3, r7, r3
 8002152:	0018      	movs	r0, r3
 8002154:	231c      	movs	r3, #28
 8002156:	001a      	movs	r2, r3
 8002158:	2100      	movs	r1, #0
 800215a:	f005 f949 	bl	80073f0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800215e:	003b      	movs	r3, r7
 8002160:	0018      	movs	r0, r3
 8002162:	2334      	movs	r3, #52	@ 0x34
 8002164:	001a      	movs	r2, r3
 8002166:	2100      	movs	r1, #0
 8002168:	f005 f942 	bl	80073f0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800216c:	4b37      	ldr	r3, [pc, #220]	@ (800224c <MX_TIM17_Init+0x104>)
 800216e:	4a38      	ldr	r2, [pc, #224]	@ (8002250 <MX_TIM17_Init+0x108>)
 8002170:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8002172:	4b36      	ldr	r3, [pc, #216]	@ (800224c <MX_TIM17_Init+0x104>)
 8002174:	2200      	movs	r2, #0
 8002176:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002178:	4b34      	ldr	r3, [pc, #208]	@ (800224c <MX_TIM17_Init+0x104>)
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800217e:	4b33      	ldr	r3, [pc, #204]	@ (800224c <MX_TIM17_Init+0x104>)
 8002180:	4a34      	ldr	r2, [pc, #208]	@ (8002254 <MX_TIM17_Init+0x10c>)
 8002182:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002184:	4b31      	ldr	r3, [pc, #196]	@ (800224c <MX_TIM17_Init+0x104>)
 8002186:	2200      	movs	r2, #0
 8002188:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800218a:	4b30      	ldr	r3, [pc, #192]	@ (800224c <MX_TIM17_Init+0x104>)
 800218c:	2200      	movs	r2, #0
 800218e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002190:	4b2e      	ldr	r3, [pc, #184]	@ (800224c <MX_TIM17_Init+0x104>)
 8002192:	2200      	movs	r2, #0
 8002194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002196:	4b2d      	ldr	r3, [pc, #180]	@ (800224c <MX_TIM17_Init+0x104>)
 8002198:	0018      	movs	r0, r3
 800219a:	f003 fb49 	bl	8005830 <HAL_TIM_Base_Init>
 800219e:	1e03      	subs	r3, r0, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80021a2:	f000 f99f 	bl	80024e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80021a6:	4b29      	ldr	r3, [pc, #164]	@ (800224c <MX_TIM17_Init+0x104>)
 80021a8:	0018      	movs	r0, r3
 80021aa:	f003 fb99 	bl	80058e0 <HAL_TIM_PWM_Init>
 80021ae:	1e03      	subs	r3, r0, #0
 80021b0:	d001      	beq.n	80021b6 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 80021b2:	f000 f997 	bl	80024e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021b6:	2134      	movs	r1, #52	@ 0x34
 80021b8:	187b      	adds	r3, r7, r1
 80021ba:	2260      	movs	r2, #96	@ 0x60
 80021bc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80021be:	187b      	adds	r3, r7, r1
 80021c0:	2200      	movs	r2, #0
 80021c2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021c4:	187b      	adds	r3, r7, r1
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021ca:	187b      	adds	r3, r7, r1
 80021cc:	2200      	movs	r2, #0
 80021ce:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021d0:	187b      	adds	r3, r7, r1
 80021d2:	2200      	movs	r2, #0
 80021d4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021d6:	187b      	adds	r3, r7, r1
 80021d8:	2200      	movs	r2, #0
 80021da:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021dc:	187b      	adds	r3, r7, r1
 80021de:	2200      	movs	r2, #0
 80021e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021e2:	1879      	adds	r1, r7, r1
 80021e4:	4b19      	ldr	r3, [pc, #100]	@ (800224c <MX_TIM17_Init+0x104>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	0018      	movs	r0, r3
 80021ea:	f003 fcc9 	bl	8005b80 <HAL_TIM_PWM_ConfigChannel>
 80021ee:	1e03      	subs	r3, r0, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 80021f2:	f000 f977 	bl	80024e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021f6:	003b      	movs	r3, r7
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021fc:	003b      	movs	r3, r7
 80021fe:	2200      	movs	r2, #0
 8002200:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002202:	003b      	movs	r3, r7
 8002204:	2200      	movs	r2, #0
 8002206:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002208:	003b      	movs	r3, r7
 800220a:	2200      	movs	r2, #0
 800220c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800220e:	003b      	movs	r3, r7
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002214:	003b      	movs	r3, r7
 8002216:	2280      	movs	r2, #128	@ 0x80
 8002218:	0192      	lsls	r2, r2, #6
 800221a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800221c:	003b      	movs	r3, r7
 800221e:	2200      	movs	r2, #0
 8002220:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002222:	003b      	movs	r3, r7
 8002224:	2200      	movs	r2, #0
 8002226:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002228:	003a      	movs	r2, r7
 800222a:	4b08      	ldr	r3, [pc, #32]	@ (800224c <MX_TIM17_Init+0x104>)
 800222c:	0011      	movs	r1, r2
 800222e:	0018      	movs	r0, r3
 8002230:	f004 f926 	bl	8006480 <HAL_TIMEx_ConfigBreakDeadTime>
 8002234:	1e03      	subs	r3, r0, #0
 8002236:	d001      	beq.n	800223c <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8002238:	f000 f954 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800223c:	4b03      	ldr	r3, [pc, #12]	@ (800224c <MX_TIM17_Init+0x104>)
 800223e:	0018      	movs	r0, r3
 8002240:	f000 fa4a 	bl	80026d8 <HAL_TIM_MspPostInit>

}
 8002244:	46c0      	nop			@ (mov r8, r8)
 8002246:	46bd      	mov	sp, r7
 8002248:	b014      	add	sp, #80	@ 0x50
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000758 	.word	0x20000758
 8002250:	40014800 	.word	0x40014800
 8002254:	0000ffff 	.word	0x0000ffff

08002258 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800225c:	4b23      	ldr	r3, [pc, #140]	@ (80022ec <MX_USART1_UART_Init+0x94>)
 800225e:	4a24      	ldr	r2, [pc, #144]	@ (80022f0 <MX_USART1_UART_Init+0x98>)
 8002260:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002262:	4b22      	ldr	r3, [pc, #136]	@ (80022ec <MX_USART1_UART_Init+0x94>)
 8002264:	2296      	movs	r2, #150	@ 0x96
 8002266:	0192      	lsls	r2, r2, #6
 8002268:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800226a:	4b20      	ldr	r3, [pc, #128]	@ (80022ec <MX_USART1_UART_Init+0x94>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002270:	4b1e      	ldr	r3, [pc, #120]	@ (80022ec <MX_USART1_UART_Init+0x94>)
 8002272:	2200      	movs	r2, #0
 8002274:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002276:	4b1d      	ldr	r3, [pc, #116]	@ (80022ec <MX_USART1_UART_Init+0x94>)
 8002278:	2200      	movs	r2, #0
 800227a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800227c:	4b1b      	ldr	r3, [pc, #108]	@ (80022ec <MX_USART1_UART_Init+0x94>)
 800227e:	220c      	movs	r2, #12
 8002280:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002282:	4b1a      	ldr	r3, [pc, #104]	@ (80022ec <MX_USART1_UART_Init+0x94>)
 8002284:	2200      	movs	r2, #0
 8002286:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002288:	4b18      	ldr	r3, [pc, #96]	@ (80022ec <MX_USART1_UART_Init+0x94>)
 800228a:	2200      	movs	r2, #0
 800228c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800228e:	4b17      	ldr	r3, [pc, #92]	@ (80022ec <MX_USART1_UART_Init+0x94>)
 8002290:	2200      	movs	r2, #0
 8002292:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002294:	4b15      	ldr	r3, [pc, #84]	@ (80022ec <MX_USART1_UART_Init+0x94>)
 8002296:	2200      	movs	r2, #0
 8002298:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800229a:	4b14      	ldr	r3, [pc, #80]	@ (80022ec <MX_USART1_UART_Init+0x94>)
 800229c:	2200      	movs	r2, #0
 800229e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022a0:	4b12      	ldr	r3, [pc, #72]	@ (80022ec <MX_USART1_UART_Init+0x94>)
 80022a2:	0018      	movs	r0, r3
 80022a4:	f004 f988 	bl	80065b8 <HAL_UART_Init>
 80022a8:	1e03      	subs	r3, r0, #0
 80022aa:	d001      	beq.n	80022b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80022ac:	f000 f91a 	bl	80024e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022b0:	4b0e      	ldr	r3, [pc, #56]	@ (80022ec <MX_USART1_UART_Init+0x94>)
 80022b2:	2100      	movs	r1, #0
 80022b4:	0018      	movs	r0, r3
 80022b6:	f004 ff99 	bl	80071ec <HAL_UARTEx_SetTxFifoThreshold>
 80022ba:	1e03      	subs	r3, r0, #0
 80022bc:	d001      	beq.n	80022c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80022be:	f000 f911 	bl	80024e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022c2:	4b0a      	ldr	r3, [pc, #40]	@ (80022ec <MX_USART1_UART_Init+0x94>)
 80022c4:	2100      	movs	r1, #0
 80022c6:	0018      	movs	r0, r3
 80022c8:	f004 ffd0 	bl	800726c <HAL_UARTEx_SetRxFifoThreshold>
 80022cc:	1e03      	subs	r3, r0, #0
 80022ce:	d001      	beq.n	80022d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80022d0:	f000 f908 	bl	80024e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80022d4:	4b05      	ldr	r3, [pc, #20]	@ (80022ec <MX_USART1_UART_Init+0x94>)
 80022d6:	0018      	movs	r0, r3
 80022d8:	f004 ff4e 	bl	8007178 <HAL_UARTEx_DisableFifoMode>
 80022dc:	1e03      	subs	r3, r0, #0
 80022de:	d001      	beq.n	80022e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80022e0:	f000 f900 	bl	80024e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022e4:	46c0      	nop			@ (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	46c0      	nop			@ (mov r8, r8)
 80022ec:	200007a4 	.word	0x200007a4
 80022f0:	40013800 	.word	0x40013800

080022f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022f4:	b590      	push	{r4, r7, lr}
 80022f6:	b089      	sub	sp, #36	@ 0x24
 80022f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fa:	240c      	movs	r4, #12
 80022fc:	193b      	adds	r3, r7, r4
 80022fe:	0018      	movs	r0, r3
 8002300:	2314      	movs	r3, #20
 8002302:	001a      	movs	r2, r3
 8002304:	2100      	movs	r1, #0
 8002306:	f005 f873 	bl	80073f0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800230a:	4b2b      	ldr	r3, [pc, #172]	@ (80023b8 <MX_GPIO_Init+0xc4>)
 800230c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800230e:	4b2a      	ldr	r3, [pc, #168]	@ (80023b8 <MX_GPIO_Init+0xc4>)
 8002310:	2104      	movs	r1, #4
 8002312:	430a      	orrs	r2, r1
 8002314:	635a      	str	r2, [r3, #52]	@ 0x34
 8002316:	4b28      	ldr	r3, [pc, #160]	@ (80023b8 <MX_GPIO_Init+0xc4>)
 8002318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800231a:	2204      	movs	r2, #4
 800231c:	4013      	ands	r3, r2
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002322:	4b25      	ldr	r3, [pc, #148]	@ (80023b8 <MX_GPIO_Init+0xc4>)
 8002324:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002326:	4b24      	ldr	r3, [pc, #144]	@ (80023b8 <MX_GPIO_Init+0xc4>)
 8002328:	2101      	movs	r1, #1
 800232a:	430a      	orrs	r2, r1
 800232c:	635a      	str	r2, [r3, #52]	@ 0x34
 800232e:	4b22      	ldr	r3, [pc, #136]	@ (80023b8 <MX_GPIO_Init+0xc4>)
 8002330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002332:	2201      	movs	r2, #1
 8002334:	4013      	ands	r3, r2
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800233a:	23a0      	movs	r3, #160	@ 0xa0
 800233c:	05db      	lsls	r3, r3, #23
 800233e:	2200      	movs	r2, #0
 8002340:	2138      	movs	r1, #56	@ 0x38
 8002342:	0018      	movs	r0, r3
 8002344:	f000 fe3b 	bl	8002fbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002348:	193b      	adds	r3, r7, r4
 800234a:	2202      	movs	r2, #2
 800234c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800234e:	193b      	adds	r3, r7, r4
 8002350:	2200      	movs	r2, #0
 8002352:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	193b      	adds	r3, r7, r4
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800235a:	193b      	adds	r3, r7, r4
 800235c:	4a17      	ldr	r2, [pc, #92]	@ (80023bc <MX_GPIO_Init+0xc8>)
 800235e:	0019      	movs	r1, r3
 8002360:	0010      	movs	r0, r2
 8002362:	f000 fca3 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002366:	193b      	adds	r3, r7, r4
 8002368:	2238      	movs	r2, #56	@ 0x38
 800236a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800236c:	193b      	adds	r3, r7, r4
 800236e:	2201      	movs	r2, #1
 8002370:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	193b      	adds	r3, r7, r4
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002378:	193b      	adds	r3, r7, r4
 800237a:	2200      	movs	r2, #0
 800237c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237e:	193a      	adds	r2, r7, r4
 8002380:	23a0      	movs	r3, #160	@ 0xa0
 8002382:	05db      	lsls	r3, r3, #23
 8002384:	0011      	movs	r1, r2
 8002386:	0018      	movs	r0, r3
 8002388:	f000 fc90 	bl	8002cac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800238c:	0021      	movs	r1, r4
 800238e:	187b      	adds	r3, r7, r1
 8002390:	22c0      	movs	r2, #192	@ 0xc0
 8002392:	0152      	lsls	r2, r2, #5
 8002394:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002396:	187b      	adds	r3, r7, r1
 8002398:	2200      	movs	r2, #0
 800239a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	187b      	adds	r3, r7, r1
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a2:	187a      	adds	r2, r7, r1
 80023a4:	23a0      	movs	r3, #160	@ 0xa0
 80023a6:	05db      	lsls	r3, r3, #23
 80023a8:	0011      	movs	r1, r2
 80023aa:	0018      	movs	r0, r3
 80023ac:	f000 fc7e 	bl	8002cac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80023b0:	46c0      	nop			@ (mov r8, r8)
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b009      	add	sp, #36	@ 0x24
 80023b6:	bd90      	pop	{r4, r7, pc}
 80023b8:	40021000 	.word	0x40021000
 80023bc:	50000800 	.word	0x50000800

080023c0 <_ADXL343_ReadReg8>:

/* USER CODE BEGIN 4 */
int _ADXL343_ReadReg8 (unsigned char TargetRegister, unsigned char * TargetValue, uint8_t size)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	6039      	str	r1, [r7, #0]
 80023c8:	0011      	movs	r1, r2
 80023ca:	1dfb      	adds	r3, r7, #7
 80023cc:	1c02      	adds	r2, r0, #0
 80023ce:	701a      	strb	r2, [r3, #0]
 80023d0:	1dbb      	adds	r3, r7, #6
 80023d2:	1c0a      	adds	r2, r1, #0
 80023d4:	701a      	strb	r2, [r3, #0]
  if (!HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, &TargetRegister, 1, 1000)==HAL_OK)
 80023d6:	1dfa      	adds	r2, r7, #7
 80023d8:	4811      	ldr	r0, [pc, #68]	@ (8002420 <_ADXL343_ReadReg8+0x60>)
 80023da:	23fa      	movs	r3, #250	@ 0xfa
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	2301      	movs	r3, #1
 80023e2:	2128      	movs	r1, #40	@ 0x28
 80023e4:	f000 feae 	bl	8003144 <HAL_I2C_Master_Transmit>
 80023e8:	1e03      	subs	r3, r0, #0
 80023ea:	d002      	beq.n	80023f2 <_ADXL343_ReadReg8+0x32>
      return -1;
 80023ec:	2301      	movs	r3, #1
 80023ee:	425b      	negs	r3, r3
 80023f0:	e011      	b.n	8002416 <_ADXL343_ReadReg8+0x56>

  if (!HAL_I2C_Master_Receive(&hi2c1, 0x14<<1, TargetValue, size, 1000)==HAL_OK)
 80023f2:	1dbb      	adds	r3, r7, #6
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	b299      	uxth	r1, r3
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	4809      	ldr	r0, [pc, #36]	@ (8002420 <_ADXL343_ReadReg8+0x60>)
 80023fc:	23fa      	movs	r3, #250	@ 0xfa
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	000b      	movs	r3, r1
 8002404:	2128      	movs	r1, #40	@ 0x28
 8002406:	f000 ffc7 	bl	8003398 <HAL_I2C_Master_Receive>
 800240a:	1e03      	subs	r3, r0, #0
 800240c:	d002      	beq.n	8002414 <_ADXL343_ReadReg8+0x54>
    return -2;
 800240e:	2302      	movs	r3, #2
 8002410:	425b      	negs	r3, r3
 8002412:	e000      	b.n	8002416 <_ADXL343_ReadReg8+0x56>

  return 0;
 8002414:	2300      	movs	r3, #0
}
 8002416:	0018      	movs	r0, r3
 8002418:	46bd      	mov	sp, r7
 800241a:	b002      	add	sp, #8
 800241c:	bd80      	pop	{r7, pc}
 800241e:	46c0      	nop			@ (mov r8, r8)
 8002420:	20000674 	.word	0x20000674

08002424 <_ADXL343_WriteReg8>:

int _ADXL343_WriteReg8 (unsigned char TargetRegister, unsigned char TargetValue)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af02      	add	r7, sp, #8
 800242a:	0002      	movs	r2, r0
 800242c:	1dfb      	adds	r3, r7, #7
 800242e:	701a      	strb	r2, [r3, #0]
 8002430:	1dbb      	adds	r3, r7, #6
 8002432:	1c0a      	adds	r2, r1, #0
 8002434:	701a      	strb	r2, [r3, #0]
  unsigned char buff [2];
  buff[0] = TargetRegister;
 8002436:	210c      	movs	r1, #12
 8002438:	187b      	adds	r3, r7, r1
 800243a:	1dfa      	adds	r2, r7, #7
 800243c:	7812      	ldrb	r2, [r2, #0]
 800243e:	701a      	strb	r2, [r3, #0]
  buff[1] = TargetValue;
 8002440:	187b      	adds	r3, r7, r1
 8002442:	1dba      	adds	r2, r7, #6
 8002444:	7812      	ldrb	r2, [r2, #0]
 8002446:	705a      	strb	r2, [r3, #1]

  if (HAL_I2C_Master_Transmit(&hi2c1, 0x14<<1, buff, 2, 100))
 8002448:	187a      	adds	r2, r7, r1
 800244a:	4808      	ldr	r0, [pc, #32]	@ (800246c <_ADXL343_WriteReg8+0x48>)
 800244c:	2364      	movs	r3, #100	@ 0x64
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	2302      	movs	r3, #2
 8002452:	2128      	movs	r1, #40	@ 0x28
 8002454:	f000 fe76 	bl	8003144 <HAL_I2C_Master_Transmit>
 8002458:	1e03      	subs	r3, r0, #0
 800245a:	d002      	beq.n	8002462 <_ADXL343_WriteReg8+0x3e>
      return -1;
 800245c:	2301      	movs	r3, #1
 800245e:	425b      	negs	r3, r3
 8002460:	e000      	b.n	8002464 <_ADXL343_WriteReg8+0x40>

  return 0;
 8002462:	2300      	movs	r3, #0
}
 8002464:	0018      	movs	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	b004      	add	sp, #16
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20000674 	.word	0x20000674

08002470 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8002470:	b590      	push	{r4, r7, lr}
 8002472:	b091      	sub	sp, #68	@ 0x44
 8002474:	af04      	add	r7, sp, #16
 8002476:	6078      	str	r0, [r7, #4]
  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 8002478:	2380      	movs	r3, #128	@ 0x80
 800247a:	005a      	lsls	r2, r3, #1
 800247c:	2408      	movs	r4, #8
 800247e:	1939      	adds	r1, r7, r4
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	2300      	movs	r3, #0
 8002484:	f002 fcce 	bl	8004e24 <HAL_RTC_GetAlarm>
  if(sAlarm.AlarmTime.Seconds>58) {
 8002488:	0022      	movs	r2, r4
 800248a:	18bb      	adds	r3, r7, r2
 800248c:	789b      	ldrb	r3, [r3, #2]
 800248e:	2b3a      	cmp	r3, #58	@ 0x3a
 8002490:	d903      	bls.n	800249a <HAL_RTC_AlarmAEventCallback+0x2a>
    sAlarm.AlarmTime.Seconds=0;
 8002492:	18bb      	adds	r3, r7, r2
 8002494:	2200      	movs	r2, #0
 8002496:	709a      	strb	r2, [r3, #2]
 8002498:	e006      	b.n	80024a8 <HAL_RTC_AlarmAEventCallback+0x38>
  }else{
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 800249a:	2108      	movs	r1, #8
 800249c:	187b      	adds	r3, r7, r1
 800249e:	789b      	ldrb	r3, [r3, #2]
 80024a0:	3301      	adds	r3, #1
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	187b      	adds	r3, r7, r1
 80024a6:	709a      	strb	r2, [r3, #2]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 80024a8:	46c0      	nop			@ (mov r8, r8)
 80024aa:	2308      	movs	r3, #8
 80024ac:	18f9      	adds	r1, r7, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	0018      	movs	r0, r3
 80024b4:	f002 fb76 	bl	8004ba4 <HAL_RTC_SetAlarm_IT>
 80024b8:	1e03      	subs	r3, r0, #0
 80024ba:	d1f6      	bne.n	80024aa <HAL_RTC_AlarmAEventCallback+0x3a>
  	  drawString(30, 30, "testTime", BLACK, GREEN, 1, 1);
 80024bc:	4a07      	ldr	r2, [pc, #28]	@ (80024dc <HAL_RTC_AlarmAEventCallback+0x6c>)
 80024be:	2301      	movs	r3, #1
 80024c0:	9302      	str	r3, [sp, #8]
 80024c2:	2301      	movs	r3, #1
 80024c4:	9301      	str	r3, [sp, #4]
 80024c6:	4b06      	ldr	r3, [pc, #24]	@ (80024e0 <HAL_RTC_AlarmAEventCallback+0x70>)
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	2300      	movs	r3, #0
 80024cc:	211e      	movs	r1, #30
 80024ce:	201e      	movs	r0, #30
 80024d0:	f7fe fe34 	bl	800113c <drawString>
}
 80024d4:	46c0      	nop			@ (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b00d      	add	sp, #52	@ 0x34
 80024da:	bd90      	pop	{r4, r7, pc}
 80024dc:	08007d20 	.word	0x08007d20
 80024e0:	ffffe007 	.word	0xffffe007

080024e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024e8:	b672      	cpsid	i
}
 80024ea:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024ec:	46c0      	nop			@ (mov r8, r8)
 80024ee:	e7fd      	b.n	80024ec <Error_Handler+0x8>

080024f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f6:	4b11      	ldr	r3, [pc, #68]	@ (800253c <HAL_MspInit+0x4c>)
 80024f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024fa:	4b10      	ldr	r3, [pc, #64]	@ (800253c <HAL_MspInit+0x4c>)
 80024fc:	2101      	movs	r1, #1
 80024fe:	430a      	orrs	r2, r1
 8002500:	641a      	str	r2, [r3, #64]	@ 0x40
 8002502:	4b0e      	ldr	r3, [pc, #56]	@ (800253c <HAL_MspInit+0x4c>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	2201      	movs	r2, #1
 8002508:	4013      	ands	r3, r2
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	4b0b      	ldr	r3, [pc, #44]	@ (800253c <HAL_MspInit+0x4c>)
 8002510:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002512:	4b0a      	ldr	r3, [pc, #40]	@ (800253c <HAL_MspInit+0x4c>)
 8002514:	2180      	movs	r1, #128	@ 0x80
 8002516:	0549      	lsls	r1, r1, #21
 8002518:	430a      	orrs	r2, r1
 800251a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800251c:	4b07      	ldr	r3, [pc, #28]	@ (800253c <HAL_MspInit+0x4c>)
 800251e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002520:	2380      	movs	r3, #128	@ 0x80
 8002522:	055b      	lsls	r3, r3, #21
 8002524:	4013      	ands	r3, r2
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800252a:	23c0      	movs	r3, #192	@ 0xc0
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	0018      	movs	r0, r3
 8002530:	f000 faf2 	bl	8002b18 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002534:	46c0      	nop			@ (mov r8, r8)
 8002536:	46bd      	mov	sp, r7
 8002538:	b002      	add	sp, #8
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40021000 	.word	0x40021000

08002540 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002540:	b590      	push	{r4, r7, lr}
 8002542:	b09d      	sub	sp, #116	@ 0x74
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	235c      	movs	r3, #92	@ 0x5c
 800254a:	18fb      	adds	r3, r7, r3
 800254c:	0018      	movs	r0, r3
 800254e:	2314      	movs	r3, #20
 8002550:	001a      	movs	r2, r3
 8002552:	2100      	movs	r1, #0
 8002554:	f004 ff4c 	bl	80073f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002558:	2410      	movs	r4, #16
 800255a:	193b      	adds	r3, r7, r4
 800255c:	0018      	movs	r0, r3
 800255e:	234c      	movs	r3, #76	@ 0x4c
 8002560:	001a      	movs	r2, r3
 8002562:	2100      	movs	r1, #0
 8002564:	f004 ff44 	bl	80073f0 <memset>
  if(hi2c->Instance==I2C1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a23      	ldr	r2, [pc, #140]	@ (80025fc <HAL_I2C_MspInit+0xbc>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d13f      	bne.n	80025f2 <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002572:	193b      	adds	r3, r7, r4
 8002574:	2220      	movs	r2, #32
 8002576:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002578:	193b      	adds	r3, r7, r4
 800257a:	2200      	movs	r2, #0
 800257c:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800257e:	193b      	adds	r3, r7, r4
 8002580:	0018      	movs	r0, r3
 8002582:	f002 f8d3 	bl	800472c <HAL_RCCEx_PeriphCLKConfig>
 8002586:	1e03      	subs	r3, r0, #0
 8002588:	d001      	beq.n	800258e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800258a:	f7ff ffab 	bl	80024e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258e:	4b1c      	ldr	r3, [pc, #112]	@ (8002600 <HAL_I2C_MspInit+0xc0>)
 8002590:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002592:	4b1b      	ldr	r3, [pc, #108]	@ (8002600 <HAL_I2C_MspInit+0xc0>)
 8002594:	2101      	movs	r1, #1
 8002596:	430a      	orrs	r2, r1
 8002598:	635a      	str	r2, [r3, #52]	@ 0x34
 800259a:	4b19      	ldr	r3, [pc, #100]	@ (8002600 <HAL_I2C_MspInit+0xc0>)
 800259c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800259e:	2201      	movs	r2, #1
 80025a0:	4013      	ands	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025a6:	215c      	movs	r1, #92	@ 0x5c
 80025a8:	187b      	adds	r3, r7, r1
 80025aa:	22c0      	movs	r2, #192	@ 0xc0
 80025ac:	00d2      	lsls	r2, r2, #3
 80025ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025b0:	187b      	adds	r3, r7, r1
 80025b2:	2212      	movs	r2, #18
 80025b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b6:	187b      	adds	r3, r7, r1
 80025b8:	2200      	movs	r2, #0
 80025ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025bc:	187b      	adds	r3, r7, r1
 80025be:	2200      	movs	r2, #0
 80025c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80025c2:	187b      	adds	r3, r7, r1
 80025c4:	2206      	movs	r2, #6
 80025c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c8:	187a      	adds	r2, r7, r1
 80025ca:	23a0      	movs	r3, #160	@ 0xa0
 80025cc:	05db      	lsls	r3, r3, #23
 80025ce:	0011      	movs	r1, r2
 80025d0:	0018      	movs	r0, r3
 80025d2:	f000 fb6b 	bl	8002cac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002600 <HAL_I2C_MspInit+0xc0>)
 80025d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025da:	4b09      	ldr	r3, [pc, #36]	@ (8002600 <HAL_I2C_MspInit+0xc0>)
 80025dc:	2180      	movs	r1, #128	@ 0x80
 80025de:	0389      	lsls	r1, r1, #14
 80025e0:	430a      	orrs	r2, r1
 80025e2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025e4:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <HAL_I2C_MspInit+0xc0>)
 80025e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025e8:	2380      	movs	r3, #128	@ 0x80
 80025ea:	039b      	lsls	r3, r3, #14
 80025ec:	4013      	ands	r3, r2
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80025f2:	46c0      	nop			@ (mov r8, r8)
 80025f4:	46bd      	mov	sp, r7
 80025f6:	b01d      	add	sp, #116	@ 0x74
 80025f8:	bd90      	pop	{r4, r7, pc}
 80025fa:	46c0      	nop			@ (mov r8, r8)
 80025fc:	40005400 	.word	0x40005400
 8002600:	40021000 	.word	0x40021000

08002604 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002604:	b590      	push	{r4, r7, lr}
 8002606:	b08b      	sub	sp, #44	@ 0x2c
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260c:	2414      	movs	r4, #20
 800260e:	193b      	adds	r3, r7, r4
 8002610:	0018      	movs	r0, r3
 8002612:	2314      	movs	r3, #20
 8002614:	001a      	movs	r2, r3
 8002616:	2100      	movs	r1, #0
 8002618:	f004 feea 	bl	80073f0 <memset>
  if(hspi->Instance==SPI1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a1b      	ldr	r2, [pc, #108]	@ (8002690 <HAL_SPI_MspInit+0x8c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d130      	bne.n	8002688 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002626:	4b1b      	ldr	r3, [pc, #108]	@ (8002694 <HAL_SPI_MspInit+0x90>)
 8002628:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800262a:	4b1a      	ldr	r3, [pc, #104]	@ (8002694 <HAL_SPI_MspInit+0x90>)
 800262c:	2180      	movs	r1, #128	@ 0x80
 800262e:	0149      	lsls	r1, r1, #5
 8002630:	430a      	orrs	r2, r1
 8002632:	641a      	str	r2, [r3, #64]	@ 0x40
 8002634:	4b17      	ldr	r3, [pc, #92]	@ (8002694 <HAL_SPI_MspInit+0x90>)
 8002636:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002638:	2380      	movs	r3, #128	@ 0x80
 800263a:	015b      	lsls	r3, r3, #5
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002642:	4b14      	ldr	r3, [pc, #80]	@ (8002694 <HAL_SPI_MspInit+0x90>)
 8002644:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002646:	4b13      	ldr	r3, [pc, #76]	@ (8002694 <HAL_SPI_MspInit+0x90>)
 8002648:	2101      	movs	r1, #1
 800264a:	430a      	orrs	r2, r1
 800264c:	635a      	str	r2, [r3, #52]	@ 0x34
 800264e:	4b11      	ldr	r3, [pc, #68]	@ (8002694 <HAL_SPI_MspInit+0x90>)
 8002650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002652:	2201      	movs	r2, #1
 8002654:	4013      	ands	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800265a:	0021      	movs	r1, r4
 800265c:	187b      	adds	r3, r7, r1
 800265e:	2206      	movs	r2, #6
 8002660:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002662:	187b      	adds	r3, r7, r1
 8002664:	2202      	movs	r2, #2
 8002666:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	187b      	adds	r3, r7, r1
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	187b      	adds	r3, r7, r1
 8002670:	2200      	movs	r2, #0
 8002672:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002674:	187b      	adds	r3, r7, r1
 8002676:	2200      	movs	r2, #0
 8002678:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267a:	187a      	adds	r2, r7, r1
 800267c:	23a0      	movs	r3, #160	@ 0xa0
 800267e:	05db      	lsls	r3, r3, #23
 8002680:	0011      	movs	r1, r2
 8002682:	0018      	movs	r0, r3
 8002684:	f000 fb12 	bl	8002cac <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002688:	46c0      	nop			@ (mov r8, r8)
 800268a:	46bd      	mov	sp, r7
 800268c:	b00b      	add	sp, #44	@ 0x2c
 800268e:	bd90      	pop	{r4, r7, pc}
 8002690:	40013000 	.word	0x40013000
 8002694:	40021000 	.word	0x40021000

08002698 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a0a      	ldr	r2, [pc, #40]	@ (80026d0 <HAL_TIM_Base_MspInit+0x38>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d10d      	bne.n	80026c6 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80026aa:	4b0a      	ldr	r3, [pc, #40]	@ (80026d4 <HAL_TIM_Base_MspInit+0x3c>)
 80026ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026ae:	4b09      	ldr	r3, [pc, #36]	@ (80026d4 <HAL_TIM_Base_MspInit+0x3c>)
 80026b0:	2180      	movs	r1, #128	@ 0x80
 80026b2:	02c9      	lsls	r1, r1, #11
 80026b4:	430a      	orrs	r2, r1
 80026b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80026b8:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <HAL_TIM_Base_MspInit+0x3c>)
 80026ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026bc:	2380      	movs	r3, #128	@ 0x80
 80026be:	02db      	lsls	r3, r3, #11
 80026c0:	4013      	ands	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 80026c6:	46c0      	nop			@ (mov r8, r8)
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b004      	add	sp, #16
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	46c0      	nop			@ (mov r8, r8)
 80026d0:	40014800 	.word	0x40014800
 80026d4:	40021000 	.word	0x40021000

080026d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b089      	sub	sp, #36	@ 0x24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e0:	240c      	movs	r4, #12
 80026e2:	193b      	adds	r3, r7, r4
 80026e4:	0018      	movs	r0, r3
 80026e6:	2314      	movs	r3, #20
 80026e8:	001a      	movs	r2, r3
 80026ea:	2100      	movs	r1, #0
 80026ec:	f004 fe80 	bl	80073f0 <memset>
  if(htim->Instance==TIM17)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a14      	ldr	r2, [pc, #80]	@ (8002748 <HAL_TIM_MspPostInit+0x70>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d122      	bne.n	8002740 <HAL_TIM_MspPostInit+0x68>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fa:	4b14      	ldr	r3, [pc, #80]	@ (800274c <HAL_TIM_MspPostInit+0x74>)
 80026fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026fe:	4b13      	ldr	r3, [pc, #76]	@ (800274c <HAL_TIM_MspPostInit+0x74>)
 8002700:	2101      	movs	r1, #1
 8002702:	430a      	orrs	r2, r1
 8002704:	635a      	str	r2, [r3, #52]	@ 0x34
 8002706:	4b11      	ldr	r3, [pc, #68]	@ (800274c <HAL_TIM_MspPostInit+0x74>)
 8002708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800270a:	2201      	movs	r2, #1
 800270c:	4013      	ands	r3, r2
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002712:	0021      	movs	r1, r4
 8002714:	187b      	adds	r3, r7, r1
 8002716:	2280      	movs	r2, #128	@ 0x80
 8002718:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271a:	187b      	adds	r3, r7, r1
 800271c:	2202      	movs	r2, #2
 800271e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	187b      	adds	r3, r7, r1
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	187b      	adds	r3, r7, r1
 8002728:	2200      	movs	r2, #0
 800272a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 800272c:	187b      	adds	r3, r7, r1
 800272e:	2205      	movs	r2, #5
 8002730:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002732:	187a      	adds	r2, r7, r1
 8002734:	23a0      	movs	r3, #160	@ 0xa0
 8002736:	05db      	lsls	r3, r3, #23
 8002738:	0011      	movs	r1, r2
 800273a:	0018      	movs	r0, r3
 800273c:	f000 fab6 	bl	8002cac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002740:	46c0      	nop			@ (mov r8, r8)
 8002742:	46bd      	mov	sp, r7
 8002744:	b009      	add	sp, #36	@ 0x24
 8002746:	bd90      	pop	{r4, r7, pc}
 8002748:	40014800 	.word	0x40014800
 800274c:	40021000 	.word	0x40021000

08002750 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b09f      	sub	sp, #124	@ 0x7c
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	2364      	movs	r3, #100	@ 0x64
 800275a:	18fb      	adds	r3, r7, r3
 800275c:	0018      	movs	r0, r3
 800275e:	2314      	movs	r3, #20
 8002760:	001a      	movs	r2, r3
 8002762:	2100      	movs	r1, #0
 8002764:	f004 fe44 	bl	80073f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002768:	2418      	movs	r4, #24
 800276a:	193b      	adds	r3, r7, r4
 800276c:	0018      	movs	r0, r3
 800276e:	234c      	movs	r3, #76	@ 0x4c
 8002770:	001a      	movs	r2, r3
 8002772:	2100      	movs	r1, #0
 8002774:	f004 fe3c 	bl	80073f0 <memset>
  if(huart->Instance==USART1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a45      	ldr	r2, [pc, #276]	@ (8002894 <HAL_UART_MspInit+0x144>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d13e      	bne.n	8002800 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002782:	193b      	adds	r3, r7, r4
 8002784:	2201      	movs	r2, #1
 8002786:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002788:	193b      	adds	r3, r7, r4
 800278a:	2200      	movs	r2, #0
 800278c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800278e:	193b      	adds	r3, r7, r4
 8002790:	0018      	movs	r0, r3
 8002792:	f001 ffcb 	bl	800472c <HAL_RCCEx_PeriphCLKConfig>
 8002796:	1e03      	subs	r3, r0, #0
 8002798:	d001      	beq.n	800279e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800279a:	f7ff fea3 	bl	80024e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800279e:	4b3e      	ldr	r3, [pc, #248]	@ (8002898 <HAL_UART_MspInit+0x148>)
 80027a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002898 <HAL_UART_MspInit+0x148>)
 80027a4:	2180      	movs	r1, #128	@ 0x80
 80027a6:	01c9      	lsls	r1, r1, #7
 80027a8:	430a      	orrs	r2, r1
 80027aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80027ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002898 <HAL_UART_MspInit+0x148>)
 80027ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027b0:	2380      	movs	r3, #128	@ 0x80
 80027b2:	01db      	lsls	r3, r3, #7
 80027b4:	4013      	ands	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ba:	4b37      	ldr	r3, [pc, #220]	@ (8002898 <HAL_UART_MspInit+0x148>)
 80027bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027be:	4b36      	ldr	r3, [pc, #216]	@ (8002898 <HAL_UART_MspInit+0x148>)
 80027c0:	2104      	movs	r1, #4
 80027c2:	430a      	orrs	r2, r1
 80027c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80027c6:	4b34      	ldr	r3, [pc, #208]	@ (8002898 <HAL_UART_MspInit+0x148>)
 80027c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ca:	2204      	movs	r2, #4
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80027d2:	2164      	movs	r1, #100	@ 0x64
 80027d4:	187b      	adds	r3, r7, r1
 80027d6:	2230      	movs	r2, #48	@ 0x30
 80027d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027da:	187b      	adds	r3, r7, r1
 80027dc:	2202      	movs	r2, #2
 80027de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e0:	187b      	adds	r3, r7, r1
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e6:	187b      	adds	r3, r7, r1
 80027e8:	2200      	movs	r2, #0
 80027ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80027ec:	187b      	adds	r3, r7, r1
 80027ee:	2201      	movs	r2, #1
 80027f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027f2:	187b      	adds	r3, r7, r1
 80027f4:	4a29      	ldr	r2, [pc, #164]	@ (800289c <HAL_UART_MspInit+0x14c>)
 80027f6:	0019      	movs	r1, r3
 80027f8:	0010      	movs	r0, r2
 80027fa:	f000 fa57 	bl	8002cac <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80027fe:	e045      	b.n	800288c <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a26      	ldr	r2, [pc, #152]	@ (80028a0 <HAL_UART_MspInit+0x150>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d140      	bne.n	800288c <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800280a:	2118      	movs	r1, #24
 800280c:	187b      	adds	r3, r7, r1
 800280e:	2202      	movs	r2, #2
 8002810:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002812:	187b      	adds	r3, r7, r1
 8002814:	2200      	movs	r2, #0
 8002816:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002818:	187b      	adds	r3, r7, r1
 800281a:	0018      	movs	r0, r3
 800281c:	f001 ff86 	bl	800472c <HAL_RCCEx_PeriphCLKConfig>
 8002820:	1e03      	subs	r3, r0, #0
 8002822:	d001      	beq.n	8002828 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8002824:	f7ff fe5e 	bl	80024e4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002828:	4b1b      	ldr	r3, [pc, #108]	@ (8002898 <HAL_UART_MspInit+0x148>)
 800282a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800282c:	4b1a      	ldr	r3, [pc, #104]	@ (8002898 <HAL_UART_MspInit+0x148>)
 800282e:	2180      	movs	r1, #128	@ 0x80
 8002830:	0289      	lsls	r1, r1, #10
 8002832:	430a      	orrs	r2, r1
 8002834:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002836:	4b18      	ldr	r3, [pc, #96]	@ (8002898 <HAL_UART_MspInit+0x148>)
 8002838:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800283a:	2380      	movs	r3, #128	@ 0x80
 800283c:	029b      	lsls	r3, r3, #10
 800283e:	4013      	ands	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002844:	4b14      	ldr	r3, [pc, #80]	@ (8002898 <HAL_UART_MspInit+0x148>)
 8002846:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002848:	4b13      	ldr	r3, [pc, #76]	@ (8002898 <HAL_UART_MspInit+0x148>)
 800284a:	2101      	movs	r1, #1
 800284c:	430a      	orrs	r2, r1
 800284e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002850:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <HAL_UART_MspInit+0x148>)
 8002852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002854:	2201      	movs	r2, #1
 8002856:	4013      	ands	r3, r2
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800285c:	2164      	movs	r1, #100	@ 0x64
 800285e:	187b      	adds	r3, r7, r1
 8002860:	22c0      	movs	r2, #192	@ 0xc0
 8002862:	0212      	lsls	r2, r2, #8
 8002864:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002866:	187b      	adds	r3, r7, r1
 8002868:	2202      	movs	r2, #2
 800286a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	187b      	adds	r3, r7, r1
 800286e:	2200      	movs	r2, #0
 8002870:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002872:	187b      	adds	r3, r7, r1
 8002874:	2200      	movs	r2, #0
 8002876:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002878:	187b      	adds	r3, r7, r1
 800287a:	2201      	movs	r2, #1
 800287c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287e:	187a      	adds	r2, r7, r1
 8002880:	23a0      	movs	r3, #160	@ 0xa0
 8002882:	05db      	lsls	r3, r3, #23
 8002884:	0011      	movs	r1, r2
 8002886:	0018      	movs	r0, r3
 8002888:	f000 fa10 	bl	8002cac <HAL_GPIO_Init>
}
 800288c:	46c0      	nop			@ (mov r8, r8)
 800288e:	46bd      	mov	sp, r7
 8002890:	b01f      	add	sp, #124	@ 0x7c
 8002892:	bd90      	pop	{r4, r7, pc}
 8002894:	40013800 	.word	0x40013800
 8002898:	40021000 	.word	0x40021000
 800289c:	50000800 	.word	0x50000800
 80028a0:	40004400 	.word	0x40004400

080028a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028a8:	46c0      	nop			@ (mov r8, r8)
 80028aa:	e7fd      	b.n	80028a8 <NMI_Handler+0x4>

080028ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028b0:	46c0      	nop			@ (mov r8, r8)
 80028b2:	e7fd      	b.n	80028b0 <HardFault_Handler+0x4>

080028b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80028b8:	46c0      	nop			@ (mov r8, r8)
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028c2:	46c0      	nop			@ (mov r8, r8)
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028cc:	f000 f8e4 	bl	8002a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028d0:	46c0      	nop			@ (mov r8, r8)
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80028dc:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <RTC_TAMP_IRQHandler+0x1c>)
 80028de:	0018      	movs	r0, r3
 80028e0:	f002 fb66 	bl	8004fb0 <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80028e4:	4b03      	ldr	r3, [pc, #12]	@ (80028f4 <RTC_TAMP_IRQHandler+0x1c>)
 80028e6:	0018      	movs	r0, r3
 80028e8:	f002 fbe5 	bl	80050b6 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80028ec:	46c0      	nop			@ (mov r8, r8)
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	46c0      	nop			@ (mov r8, r8)
 80028f4:	200006c8 	.word	0x200006c8

080028f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002900:	4a14      	ldr	r2, [pc, #80]	@ (8002954 <_sbrk+0x5c>)
 8002902:	4b15      	ldr	r3, [pc, #84]	@ (8002958 <_sbrk+0x60>)
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800290c:	4b13      	ldr	r3, [pc, #76]	@ (800295c <_sbrk+0x64>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d102      	bne.n	800291a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002914:	4b11      	ldr	r3, [pc, #68]	@ (800295c <_sbrk+0x64>)
 8002916:	4a12      	ldr	r2, [pc, #72]	@ (8002960 <_sbrk+0x68>)
 8002918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800291a:	4b10      	ldr	r3, [pc, #64]	@ (800295c <_sbrk+0x64>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	18d3      	adds	r3, r2, r3
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	429a      	cmp	r2, r3
 8002926:	d207      	bcs.n	8002938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002928:	f004 fd6a 	bl	8007400 <__errno>
 800292c:	0003      	movs	r3, r0
 800292e:	220c      	movs	r2, #12
 8002930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002932:	2301      	movs	r3, #1
 8002934:	425b      	negs	r3, r3
 8002936:	e009      	b.n	800294c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002938:	4b08      	ldr	r3, [pc, #32]	@ (800295c <_sbrk+0x64>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800293e:	4b07      	ldr	r3, [pc, #28]	@ (800295c <_sbrk+0x64>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	18d2      	adds	r2, r2, r3
 8002946:	4b05      	ldr	r3, [pc, #20]	@ (800295c <_sbrk+0x64>)
 8002948:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800294a:	68fb      	ldr	r3, [r7, #12]
}
 800294c:	0018      	movs	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	b006      	add	sp, #24
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20024000 	.word	0x20024000
 8002958:	00000400 	.word	0x00000400
 800295c:	20000838 	.word	0x20000838
 8002960:	20000988 	.word	0x20000988

08002964 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002968:	46c0      	nop			@ (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002970:	480d      	ldr	r0, [pc, #52]	@ (80029a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002972:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002974:	f7ff fff6 	bl	8002964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002978:	480c      	ldr	r0, [pc, #48]	@ (80029ac <LoopForever+0x6>)
  ldr r1, =_edata
 800297a:	490d      	ldr	r1, [pc, #52]	@ (80029b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800297c:	4a0d      	ldr	r2, [pc, #52]	@ (80029b4 <LoopForever+0xe>)
  movs r3, #0
 800297e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002980:	e002      	b.n	8002988 <LoopCopyDataInit>

08002982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002986:	3304      	adds	r3, #4

08002988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800298a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800298c:	d3f9      	bcc.n	8002982 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800298e:	4a0a      	ldr	r2, [pc, #40]	@ (80029b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002990:	4c0a      	ldr	r4, [pc, #40]	@ (80029bc <LoopForever+0x16>)
  movs r3, #0
 8002992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002994:	e001      	b.n	800299a <LoopFillZerobss>

08002996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002998:	3204      	adds	r2, #4

0800299a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800299a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800299c:	d3fb      	bcc.n	8002996 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800299e:	f004 fd35 	bl	800740c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80029a2:	f7ff f9b9 	bl	8001d18 <main>

080029a6 <LoopForever>:

LoopForever:
  b LoopForever
 80029a6:	e7fe      	b.n	80029a6 <LoopForever>
  ldr   r0, =_estack
 80029a8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80029ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029b0:	2000054c 	.word	0x2000054c
  ldr r2, =_sidata
 80029b4:	08008438 	.word	0x08008438
  ldr r2, =_sbss
 80029b8:	20000550 	.word	0x20000550
  ldr r4, =_ebss
 80029bc:	20000988 	.word	0x20000988

080029c0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029c0:	e7fe      	b.n	80029c0 <ADC1_COMP_IRQHandler>
	...

080029c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029ca:	1dfb      	adds	r3, r7, #7
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a00 <HAL_Init+0x3c>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a00 <HAL_Init+0x3c>)
 80029d6:	2180      	movs	r1, #128	@ 0x80
 80029d8:	0049      	lsls	r1, r1, #1
 80029da:	430a      	orrs	r2, r1
 80029dc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029de:	2003      	movs	r0, #3
 80029e0:	f000 f810 	bl	8002a04 <HAL_InitTick>
 80029e4:	1e03      	subs	r3, r0, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80029e8:	1dfb      	adds	r3, r7, #7
 80029ea:	2201      	movs	r2, #1
 80029ec:	701a      	strb	r2, [r3, #0]
 80029ee:	e001      	b.n	80029f4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80029f0:	f7ff fd7e 	bl	80024f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029f4:	1dfb      	adds	r3, r7, #7
 80029f6:	781b      	ldrb	r3, [r3, #0]
}
 80029f8:	0018      	movs	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b002      	add	sp, #8
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40022000 	.word	0x40022000

08002a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a0c:	230f      	movs	r3, #15
 8002a0e:	18fb      	adds	r3, r7, r3
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002a14:	4b1d      	ldr	r3, [pc, #116]	@ (8002a8c <HAL_InitTick+0x88>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d02b      	beq.n	8002a74 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8002a90 <HAL_InitTick+0x8c>)
 8002a1e:	681c      	ldr	r4, [r3, #0]
 8002a20:	4b1a      	ldr	r3, [pc, #104]	@ (8002a8c <HAL_InitTick+0x88>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	0019      	movs	r1, r3
 8002a26:	23fa      	movs	r3, #250	@ 0xfa
 8002a28:	0098      	lsls	r0, r3, #2
 8002a2a:	f7fd fb75 	bl	8000118 <__udivsi3>
 8002a2e:	0003      	movs	r3, r0
 8002a30:	0019      	movs	r1, r3
 8002a32:	0020      	movs	r0, r4
 8002a34:	f7fd fb70 	bl	8000118 <__udivsi3>
 8002a38:	0003      	movs	r3, r0
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f000 f929 	bl	8002c92 <HAL_SYSTICK_Config>
 8002a40:	1e03      	subs	r3, r0, #0
 8002a42:	d112      	bne.n	8002a6a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	d80a      	bhi.n	8002a60 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	425b      	negs	r3, r3
 8002a50:	2200      	movs	r2, #0
 8002a52:	0018      	movs	r0, r3
 8002a54:	f000 f908 	bl	8002c68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a58:	4b0e      	ldr	r3, [pc, #56]	@ (8002a94 <HAL_InitTick+0x90>)
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	e00d      	b.n	8002a7c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002a60:	230f      	movs	r3, #15
 8002a62:	18fb      	adds	r3, r7, r3
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]
 8002a68:	e008      	b.n	8002a7c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a6a:	230f      	movs	r3, #15
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	2201      	movs	r2, #1
 8002a70:	701a      	strb	r2, [r3, #0]
 8002a72:	e003      	b.n	8002a7c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a74:	230f      	movs	r3, #15
 8002a76:	18fb      	adds	r3, r7, r3
 8002a78:	2201      	movs	r2, #1
 8002a7a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002a7c:	230f      	movs	r3, #15
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	781b      	ldrb	r3, [r3, #0]
}
 8002a82:	0018      	movs	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b005      	add	sp, #20
 8002a88:	bd90      	pop	{r4, r7, pc}
 8002a8a:	46c0      	nop			@ (mov r8, r8)
 8002a8c:	200004f8 	.word	0x200004f8
 8002a90:	200004f0 	.word	0x200004f0
 8002a94:	200004f4 	.word	0x200004f4

08002a98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a9c:	4b05      	ldr	r3, [pc, #20]	@ (8002ab4 <HAL_IncTick+0x1c>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	001a      	movs	r2, r3
 8002aa2:	4b05      	ldr	r3, [pc, #20]	@ (8002ab8 <HAL_IncTick+0x20>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	18d2      	adds	r2, r2, r3
 8002aa8:	4b03      	ldr	r3, [pc, #12]	@ (8002ab8 <HAL_IncTick+0x20>)
 8002aaa:	601a      	str	r2, [r3, #0]
}
 8002aac:	46c0      	nop			@ (mov r8, r8)
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	46c0      	nop			@ (mov r8, r8)
 8002ab4:	200004f8 	.word	0x200004f8
 8002ab8:	2000083c 	.word	0x2000083c

08002abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  return uwTick;
 8002ac0:	4b02      	ldr	r3, [pc, #8]	@ (8002acc <HAL_GetTick+0x10>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
}
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	46c0      	nop			@ (mov r8, r8)
 8002acc:	2000083c 	.word	0x2000083c

08002ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ad8:	f7ff fff0 	bl	8002abc <HAL_GetTick>
 8002adc:	0003      	movs	r3, r0
 8002ade:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	d005      	beq.n	8002af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aea:	4b0a      	ldr	r3, [pc, #40]	@ (8002b14 <HAL_Delay+0x44>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	001a      	movs	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	189b      	adds	r3, r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002af6:	46c0      	nop			@ (mov r8, r8)
 8002af8:	f7ff ffe0 	bl	8002abc <HAL_GetTick>
 8002afc:	0002      	movs	r2, r0
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d8f7      	bhi.n	8002af8 <HAL_Delay+0x28>
  {
  }
}
 8002b08:	46c0      	nop			@ (mov r8, r8)
 8002b0a:	46c0      	nop			@ (mov r8, r8)
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b004      	add	sp, #16
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	46c0      	nop			@ (mov r8, r8)
 8002b14:	200004f8 	.word	0x200004f8

08002b18 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002b20:	4b06      	ldr	r3, [pc, #24]	@ (8002b3c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a06      	ldr	r2, [pc, #24]	@ (8002b40 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	0019      	movs	r1, r3
 8002b2a:	4b04      	ldr	r3, [pc, #16]	@ (8002b3c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	601a      	str	r2, [r3, #0]
}
 8002b32:	46c0      	nop			@ (mov r8, r8)
 8002b34:	46bd      	mov	sp, r7
 8002b36:	b002      	add	sp, #8
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	46c0      	nop			@ (mov r8, r8)
 8002b3c:	40010000 	.word	0x40010000
 8002b40:	fffff9ff 	.word	0xfffff9ff

08002b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b44:	b590      	push	{r4, r7, lr}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	0002      	movs	r2, r0
 8002b4c:	6039      	str	r1, [r7, #0]
 8002b4e:	1dfb      	adds	r3, r7, #7
 8002b50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b52:	1dfb      	adds	r3, r7, #7
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b58:	d828      	bhi.n	8002bac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b5a:	4a2f      	ldr	r2, [pc, #188]	@ (8002c18 <__NVIC_SetPriority+0xd4>)
 8002b5c:	1dfb      	adds	r3, r7, #7
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	b25b      	sxtb	r3, r3
 8002b62:	089b      	lsrs	r3, r3, #2
 8002b64:	33c0      	adds	r3, #192	@ 0xc0
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	589b      	ldr	r3, [r3, r2]
 8002b6a:	1dfa      	adds	r2, r7, #7
 8002b6c:	7812      	ldrb	r2, [r2, #0]
 8002b6e:	0011      	movs	r1, r2
 8002b70:	2203      	movs	r2, #3
 8002b72:	400a      	ands	r2, r1
 8002b74:	00d2      	lsls	r2, r2, #3
 8002b76:	21ff      	movs	r1, #255	@ 0xff
 8002b78:	4091      	lsls	r1, r2
 8002b7a:	000a      	movs	r2, r1
 8002b7c:	43d2      	mvns	r2, r2
 8002b7e:	401a      	ands	r2, r3
 8002b80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	019b      	lsls	r3, r3, #6
 8002b86:	22ff      	movs	r2, #255	@ 0xff
 8002b88:	401a      	ands	r2, r3
 8002b8a:	1dfb      	adds	r3, r7, #7
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	0018      	movs	r0, r3
 8002b90:	2303      	movs	r3, #3
 8002b92:	4003      	ands	r3, r0
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b98:	481f      	ldr	r0, [pc, #124]	@ (8002c18 <__NVIC_SetPriority+0xd4>)
 8002b9a:	1dfb      	adds	r3, r7, #7
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	b25b      	sxtb	r3, r3
 8002ba0:	089b      	lsrs	r3, r3, #2
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	33c0      	adds	r3, #192	@ 0xc0
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002baa:	e031      	b.n	8002c10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bac:	4a1b      	ldr	r2, [pc, #108]	@ (8002c1c <__NVIC_SetPriority+0xd8>)
 8002bae:	1dfb      	adds	r3, r7, #7
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	0019      	movs	r1, r3
 8002bb4:	230f      	movs	r3, #15
 8002bb6:	400b      	ands	r3, r1
 8002bb8:	3b08      	subs	r3, #8
 8002bba:	089b      	lsrs	r3, r3, #2
 8002bbc:	3306      	adds	r3, #6
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	18d3      	adds	r3, r2, r3
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	1dfa      	adds	r2, r7, #7
 8002bc8:	7812      	ldrb	r2, [r2, #0]
 8002bca:	0011      	movs	r1, r2
 8002bcc:	2203      	movs	r2, #3
 8002bce:	400a      	ands	r2, r1
 8002bd0:	00d2      	lsls	r2, r2, #3
 8002bd2:	21ff      	movs	r1, #255	@ 0xff
 8002bd4:	4091      	lsls	r1, r2
 8002bd6:	000a      	movs	r2, r1
 8002bd8:	43d2      	mvns	r2, r2
 8002bda:	401a      	ands	r2, r3
 8002bdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	019b      	lsls	r3, r3, #6
 8002be2:	22ff      	movs	r2, #255	@ 0xff
 8002be4:	401a      	ands	r2, r3
 8002be6:	1dfb      	adds	r3, r7, #7
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	0018      	movs	r0, r3
 8002bec:	2303      	movs	r3, #3
 8002bee:	4003      	ands	r3, r0
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bf4:	4809      	ldr	r0, [pc, #36]	@ (8002c1c <__NVIC_SetPriority+0xd8>)
 8002bf6:	1dfb      	adds	r3, r7, #7
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	001c      	movs	r4, r3
 8002bfc:	230f      	movs	r3, #15
 8002bfe:	4023      	ands	r3, r4
 8002c00:	3b08      	subs	r3, #8
 8002c02:	089b      	lsrs	r3, r3, #2
 8002c04:	430a      	orrs	r2, r1
 8002c06:	3306      	adds	r3, #6
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	18c3      	adds	r3, r0, r3
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	601a      	str	r2, [r3, #0]
}
 8002c10:	46c0      	nop			@ (mov r8, r8)
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b003      	add	sp, #12
 8002c16:	bd90      	pop	{r4, r7, pc}
 8002c18:	e000e100 	.word	0xe000e100
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	1e5a      	subs	r2, r3, #1
 8002c2c:	2380      	movs	r3, #128	@ 0x80
 8002c2e:	045b      	lsls	r3, r3, #17
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d301      	bcc.n	8002c38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c34:	2301      	movs	r3, #1
 8002c36:	e010      	b.n	8002c5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c38:	4b0a      	ldr	r3, [pc, #40]	@ (8002c64 <SysTick_Config+0x44>)
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	3a01      	subs	r2, #1
 8002c3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c40:	2301      	movs	r3, #1
 8002c42:	425b      	negs	r3, r3
 8002c44:	2103      	movs	r1, #3
 8002c46:	0018      	movs	r0, r3
 8002c48:	f7ff ff7c 	bl	8002b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c4c:	4b05      	ldr	r3, [pc, #20]	@ (8002c64 <SysTick_Config+0x44>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c52:	4b04      	ldr	r3, [pc, #16]	@ (8002c64 <SysTick_Config+0x44>)
 8002c54:	2207      	movs	r2, #7
 8002c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b002      	add	sp, #8
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			@ (mov r8, r8)
 8002c64:	e000e010 	.word	0xe000e010

08002c68 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	607a      	str	r2, [r7, #4]
 8002c72:	210f      	movs	r1, #15
 8002c74:	187b      	adds	r3, r7, r1
 8002c76:	1c02      	adds	r2, r0, #0
 8002c78:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	187b      	adds	r3, r7, r1
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	b25b      	sxtb	r3, r3
 8002c82:	0011      	movs	r1, r2
 8002c84:	0018      	movs	r0, r3
 8002c86:	f7ff ff5d 	bl	8002b44 <__NVIC_SetPriority>
}
 8002c8a:	46c0      	nop			@ (mov r8, r8)
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b004      	add	sp, #16
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f7ff ffbf 	bl	8002c20 <SysTick_Config>
 8002ca2:	0003      	movs	r3, r0
}
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b002      	add	sp, #8
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cba:	e14d      	b.n	8002f58 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4091      	lsls	r1, r2
 8002cc6:	000a      	movs	r2, r1
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d100      	bne.n	8002cd4 <HAL_GPIO_Init+0x28>
 8002cd2:	e13e      	b.n	8002f52 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2203      	movs	r2, #3
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d005      	beq.n	8002cec <HAL_GPIO_Init+0x40>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d130      	bne.n	8002d4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	409a      	lsls	r2, r3
 8002cfa:	0013      	movs	r3, r2
 8002cfc:	43da      	mvns	r2, r3
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4013      	ands	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	0013      	movs	r3, r2
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d22:	2201      	movs	r2, #1
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	409a      	lsls	r2, r3
 8002d28:	0013      	movs	r3, r2
 8002d2a:	43da      	mvns	r2, r3
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	091b      	lsrs	r3, r3, #4
 8002d38:	2201      	movs	r2, #1
 8002d3a:	401a      	ands	r2, r3
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	409a      	lsls	r2, r3
 8002d40:	0013      	movs	r3, r2
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2203      	movs	r2, #3
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d017      	beq.n	8002d8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	2203      	movs	r2, #3
 8002d66:	409a      	lsls	r2, r3
 8002d68:	0013      	movs	r3, r2
 8002d6a:	43da      	mvns	r2, r3
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	409a      	lsls	r2, r3
 8002d7c:	0013      	movs	r3, r2
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2203      	movs	r2, #3
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d123      	bne.n	8002dde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	08da      	lsrs	r2, r3, #3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3208      	adds	r2, #8
 8002d9e:	0092      	lsls	r2, r2, #2
 8002da0:	58d3      	ldr	r3, [r2, r3]
 8002da2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	2207      	movs	r2, #7
 8002da8:	4013      	ands	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	220f      	movs	r2, #15
 8002dae:	409a      	lsls	r2, r3
 8002db0:	0013      	movs	r3, r2
 8002db2:	43da      	mvns	r2, r3
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4013      	ands	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	691a      	ldr	r2, [r3, #16]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2107      	movs	r1, #7
 8002dc2:	400b      	ands	r3, r1
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	409a      	lsls	r2, r3
 8002dc8:	0013      	movs	r3, r2
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	08da      	lsrs	r2, r3, #3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3208      	adds	r2, #8
 8002dd8:	0092      	lsls	r2, r2, #2
 8002dda:	6939      	ldr	r1, [r7, #16]
 8002ddc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	2203      	movs	r2, #3
 8002dea:	409a      	lsls	r2, r3
 8002dec:	0013      	movs	r3, r2
 8002dee:	43da      	mvns	r2, r3
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4013      	ands	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2203      	movs	r2, #3
 8002dfc:	401a      	ands	r2, r3
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	409a      	lsls	r2, r3
 8002e04:	0013      	movs	r3, r2
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	23c0      	movs	r3, #192	@ 0xc0
 8002e18:	029b      	lsls	r3, r3, #10
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d100      	bne.n	8002e20 <HAL_GPIO_Init+0x174>
 8002e1e:	e098      	b.n	8002f52 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002e20:	4a53      	ldr	r2, [pc, #332]	@ (8002f70 <HAL_GPIO_Init+0x2c4>)
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	089b      	lsrs	r3, r3, #2
 8002e26:	3318      	adds	r3, #24
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	589b      	ldr	r3, [r3, r2]
 8002e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2203      	movs	r2, #3
 8002e32:	4013      	ands	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	220f      	movs	r2, #15
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	0013      	movs	r3, r2
 8002e3c:	43da      	mvns	r2, r3
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4013      	ands	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	23a0      	movs	r3, #160	@ 0xa0
 8002e48:	05db      	lsls	r3, r3, #23
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d019      	beq.n	8002e82 <HAL_GPIO_Init+0x1d6>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a48      	ldr	r2, [pc, #288]	@ (8002f74 <HAL_GPIO_Init+0x2c8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d013      	beq.n	8002e7e <HAL_GPIO_Init+0x1d2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a47      	ldr	r2, [pc, #284]	@ (8002f78 <HAL_GPIO_Init+0x2cc>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00d      	beq.n	8002e7a <HAL_GPIO_Init+0x1ce>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a46      	ldr	r2, [pc, #280]	@ (8002f7c <HAL_GPIO_Init+0x2d0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d007      	beq.n	8002e76 <HAL_GPIO_Init+0x1ca>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a45      	ldr	r2, [pc, #276]	@ (8002f80 <HAL_GPIO_Init+0x2d4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <HAL_GPIO_Init+0x1c6>
 8002e6e:	2304      	movs	r3, #4
 8002e70:	e008      	b.n	8002e84 <HAL_GPIO_Init+0x1d8>
 8002e72:	2305      	movs	r3, #5
 8002e74:	e006      	b.n	8002e84 <HAL_GPIO_Init+0x1d8>
 8002e76:	2303      	movs	r3, #3
 8002e78:	e004      	b.n	8002e84 <HAL_GPIO_Init+0x1d8>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e002      	b.n	8002e84 <HAL_GPIO_Init+0x1d8>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <HAL_GPIO_Init+0x1d8>
 8002e82:	2300      	movs	r3, #0
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	2103      	movs	r1, #3
 8002e88:	400a      	ands	r2, r1
 8002e8a:	00d2      	lsls	r2, r2, #3
 8002e8c:	4093      	lsls	r3, r2
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002e94:	4936      	ldr	r1, [pc, #216]	@ (8002f70 <HAL_GPIO_Init+0x2c4>)
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	089b      	lsrs	r3, r3, #2
 8002e9a:	3318      	adds	r3, #24
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ea2:	4b33      	ldr	r3, [pc, #204]	@ (8002f70 <HAL_GPIO_Init+0x2c4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	43da      	mvns	r2, r3
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	2380      	movs	r3, #128	@ 0x80
 8002eb8:	035b      	lsls	r3, r3, #13
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ec6:	4b2a      	ldr	r3, [pc, #168]	@ (8002f70 <HAL_GPIO_Init+0x2c4>)
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002ecc:	4b28      	ldr	r3, [pc, #160]	@ (8002f70 <HAL_GPIO_Init+0x2c4>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	43da      	mvns	r2, r3
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	2380      	movs	r3, #128	@ 0x80
 8002ee2:	039b      	lsls	r3, r3, #14
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d003      	beq.n	8002ef0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f70 <HAL_GPIO_Init+0x2c4>)
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ef6:	4a1e      	ldr	r2, [pc, #120]	@ (8002f70 <HAL_GPIO_Init+0x2c4>)
 8002ef8:	2384      	movs	r3, #132	@ 0x84
 8002efa:	58d3      	ldr	r3, [r2, r3]
 8002efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	43da      	mvns	r2, r3
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4013      	ands	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	2380      	movs	r3, #128	@ 0x80
 8002f0e:	029b      	lsls	r3, r3, #10
 8002f10:	4013      	ands	r3, r2
 8002f12:	d003      	beq.n	8002f1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f1c:	4914      	ldr	r1, [pc, #80]	@ (8002f70 <HAL_GPIO_Init+0x2c4>)
 8002f1e:	2284      	movs	r2, #132	@ 0x84
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002f24:	4a12      	ldr	r2, [pc, #72]	@ (8002f70 <HAL_GPIO_Init+0x2c4>)
 8002f26:	2380      	movs	r3, #128	@ 0x80
 8002f28:	58d3      	ldr	r3, [r2, r3]
 8002f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	43da      	mvns	r2, r3
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4013      	ands	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	2380      	movs	r3, #128	@ 0x80
 8002f3c:	025b      	lsls	r3, r3, #9
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f4a:	4909      	ldr	r1, [pc, #36]	@ (8002f70 <HAL_GPIO_Init+0x2c4>)
 8002f4c:	2280      	movs	r2, #128	@ 0x80
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	3301      	adds	r3, #1
 8002f56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	40da      	lsrs	r2, r3
 8002f60:	1e13      	subs	r3, r2, #0
 8002f62:	d000      	beq.n	8002f66 <HAL_GPIO_Init+0x2ba>
 8002f64:	e6aa      	b.n	8002cbc <HAL_GPIO_Init+0x10>
  }
}
 8002f66:	46c0      	nop			@ (mov r8, r8)
 8002f68:	46c0      	nop			@ (mov r8, r8)
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	b006      	add	sp, #24
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021800 	.word	0x40021800
 8002f74:	50000400 	.word	0x50000400
 8002f78:	50000800 	.word	0x50000800
 8002f7c:	50000c00 	.word	0x50000c00
 8002f80:	50001000 	.word	0x50001000

08002f84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	000a      	movs	r2, r1
 8002f8e:	1cbb      	adds	r3, r7, #2
 8002f90:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	1cba      	adds	r2, r7, #2
 8002f98:	8812      	ldrh	r2, [r2, #0]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d004      	beq.n	8002fa8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002f9e:	230f      	movs	r3, #15
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	701a      	strb	r2, [r3, #0]
 8002fa6:	e003      	b.n	8002fb0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fa8:	230f      	movs	r3, #15
 8002faa:	18fb      	adds	r3, r7, r3
 8002fac:	2200      	movs	r2, #0
 8002fae:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002fb0:	230f      	movs	r3, #15
 8002fb2:	18fb      	adds	r3, r7, r3
 8002fb4:	781b      	ldrb	r3, [r3, #0]
}
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b004      	add	sp, #16
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
 8002fc6:	0008      	movs	r0, r1
 8002fc8:	0011      	movs	r1, r2
 8002fca:	1cbb      	adds	r3, r7, #2
 8002fcc:	1c02      	adds	r2, r0, #0
 8002fce:	801a      	strh	r2, [r3, #0]
 8002fd0:	1c7b      	adds	r3, r7, #1
 8002fd2:	1c0a      	adds	r2, r1, #0
 8002fd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fd6:	1c7b      	adds	r3, r7, #1
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d004      	beq.n	8002fe8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fde:	1cbb      	adds	r3, r7, #2
 8002fe0:	881a      	ldrh	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fe6:	e003      	b.n	8002ff0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fe8:	1cbb      	adds	r3, r7, #2
 8002fea:	881a      	ldrh	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ff0:	46c0      	nop			@ (mov r8, r8)
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b002      	add	sp, #8
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e08f      	b.n	800312a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2241      	movs	r2, #65	@ 0x41
 800300e:	5c9b      	ldrb	r3, [r3, r2]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d107      	bne.n	8003026 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2240      	movs	r2, #64	@ 0x40
 800301a:	2100      	movs	r1, #0
 800301c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	0018      	movs	r0, r3
 8003022:	f7ff fa8d 	bl	8002540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2241      	movs	r2, #65	@ 0x41
 800302a:	2124      	movs	r1, #36	@ 0x24
 800302c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2101      	movs	r1, #1
 800303a:	438a      	bics	r2, r1
 800303c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	493b      	ldr	r1, [pc, #236]	@ (8003134 <HAL_I2C_Init+0x13c>)
 8003048:	400a      	ands	r2, r1
 800304a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4938      	ldr	r1, [pc, #224]	@ (8003138 <HAL_I2C_Init+0x140>)
 8003058:	400a      	ands	r2, r1
 800305a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d108      	bne.n	8003076 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2180      	movs	r1, #128	@ 0x80
 800306e:	0209      	lsls	r1, r1, #8
 8003070:	430a      	orrs	r2, r1
 8003072:	609a      	str	r2, [r3, #8]
 8003074:	e007      	b.n	8003086 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2184      	movs	r1, #132	@ 0x84
 8003080:	0209      	lsls	r1, r1, #8
 8003082:	430a      	orrs	r2, r1
 8003084:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d109      	bne.n	80030a2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2180      	movs	r1, #128	@ 0x80
 800309a:	0109      	lsls	r1, r1, #4
 800309c:	430a      	orrs	r2, r1
 800309e:	605a      	str	r2, [r3, #4]
 80030a0:	e007      	b.n	80030b2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4923      	ldr	r1, [pc, #140]	@ (800313c <HAL_I2C_Init+0x144>)
 80030ae:	400a      	ands	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4920      	ldr	r1, [pc, #128]	@ (8003140 <HAL_I2C_Init+0x148>)
 80030be:	430a      	orrs	r2, r1
 80030c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	491a      	ldr	r1, [pc, #104]	@ (8003138 <HAL_I2C_Init+0x140>)
 80030ce:	400a      	ands	r2, r1
 80030d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691a      	ldr	r2, [r3, #16]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	431a      	orrs	r2, r3
 80030dc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	69d9      	ldr	r1, [r3, #28]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a1a      	ldr	r2, [r3, #32]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2101      	movs	r1, #1
 8003108:	430a      	orrs	r2, r1
 800310a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2241      	movs	r2, #65	@ 0x41
 8003116:	2120      	movs	r1, #32
 8003118:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2242      	movs	r2, #66	@ 0x42
 8003124:	2100      	movs	r1, #0
 8003126:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	0018      	movs	r0, r3
 800312c:	46bd      	mov	sp, r7
 800312e:	b002      	add	sp, #8
 8003130:	bd80      	pop	{r7, pc}
 8003132:	46c0      	nop			@ (mov r8, r8)
 8003134:	f0ffffff 	.word	0xf0ffffff
 8003138:	ffff7fff 	.word	0xffff7fff
 800313c:	fffff7ff 	.word	0xfffff7ff
 8003140:	02008000 	.word	0x02008000

08003144 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b089      	sub	sp, #36	@ 0x24
 8003148:	af02      	add	r7, sp, #8
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	0008      	movs	r0, r1
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	0019      	movs	r1, r3
 8003152:	230a      	movs	r3, #10
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	1c02      	adds	r2, r0, #0
 8003158:	801a      	strh	r2, [r3, #0]
 800315a:	2308      	movs	r3, #8
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	1c0a      	adds	r2, r1, #0
 8003160:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2241      	movs	r2, #65	@ 0x41
 8003166:	5c9b      	ldrb	r3, [r3, r2]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b20      	cmp	r3, #32
 800316c:	d000      	beq.n	8003170 <HAL_I2C_Master_Transmit+0x2c>
 800316e:	e10a      	b.n	8003386 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2240      	movs	r2, #64	@ 0x40
 8003174:	5c9b      	ldrb	r3, [r3, r2]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <HAL_I2C_Master_Transmit+0x3a>
 800317a:	2302      	movs	r3, #2
 800317c:	e104      	b.n	8003388 <HAL_I2C_Master_Transmit+0x244>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2240      	movs	r2, #64	@ 0x40
 8003182:	2101      	movs	r1, #1
 8003184:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003186:	f7ff fc99 	bl	8002abc <HAL_GetTick>
 800318a:	0003      	movs	r3, r0
 800318c:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800318e:	2380      	movs	r3, #128	@ 0x80
 8003190:	0219      	lsls	r1, r3, #8
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	2319      	movs	r3, #25
 800319a:	2201      	movs	r2, #1
 800319c:	f000 fa26 	bl	80035ec <I2C_WaitOnFlagUntilTimeout>
 80031a0:	1e03      	subs	r3, r0, #0
 80031a2:	d001      	beq.n	80031a8 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0ef      	b.n	8003388 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2241      	movs	r2, #65	@ 0x41
 80031ac:	2121      	movs	r1, #33	@ 0x21
 80031ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2242      	movs	r2, #66	@ 0x42
 80031b4:	2110      	movs	r1, #16
 80031b6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2208      	movs	r2, #8
 80031c8:	18ba      	adds	r2, r7, r2
 80031ca:	8812      	ldrh	r2, [r2, #0]
 80031cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2bff      	cmp	r3, #255	@ 0xff
 80031dc:	d906      	bls.n	80031ec <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	22ff      	movs	r2, #255	@ 0xff
 80031e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80031e4:	2380      	movs	r3, #128	@ 0x80
 80031e6:	045b      	lsls	r3, r3, #17
 80031e8:	617b      	str	r3, [r7, #20]
 80031ea:	e007      	b.n	80031fc <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80031f6:	2380      	movs	r3, #128	@ 0x80
 80031f8:	049b      	lsls	r3, r3, #18
 80031fa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003200:	2b00      	cmp	r3, #0
 8003202:	d027      	beq.n	8003254 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003208:	781a      	ldrb	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321e:	b29b      	uxth	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b29a      	uxth	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003238:	b2db      	uxtb	r3, r3
 800323a:	3301      	adds	r3, #1
 800323c:	b2da      	uxtb	r2, r3
 800323e:	697c      	ldr	r4, [r7, #20]
 8003240:	230a      	movs	r3, #10
 8003242:	18fb      	adds	r3, r7, r3
 8003244:	8819      	ldrh	r1, [r3, #0]
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	4b51      	ldr	r3, [pc, #324]	@ (8003390 <HAL_I2C_Master_Transmit+0x24c>)
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	0023      	movs	r3, r4
 800324e:	f000 fc45 	bl	8003adc <I2C_TransferConfig>
 8003252:	e06f      	b.n	8003334 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003258:	b2da      	uxtb	r2, r3
 800325a:	697c      	ldr	r4, [r7, #20]
 800325c:	230a      	movs	r3, #10
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	8819      	ldrh	r1, [r3, #0]
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	4b4a      	ldr	r3, [pc, #296]	@ (8003390 <HAL_I2C_Master_Transmit+0x24c>)
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	0023      	movs	r3, r4
 800326a:	f000 fc37 	bl	8003adc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800326e:	e061      	b.n	8003334 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	0018      	movs	r0, r3
 8003278:	f000 fa10 	bl	800369c <I2C_WaitOnTXISFlagUntilTimeout>
 800327c:	1e03      	subs	r3, r0, #0
 800327e:	d001      	beq.n	8003284 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e081      	b.n	8003388 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003288:	781a      	ldrb	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d03a      	beq.n	8003334 <HAL_I2C_Master_Transmit+0x1f0>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d136      	bne.n	8003334 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	0013      	movs	r3, r2
 80032d0:	2200      	movs	r2, #0
 80032d2:	2180      	movs	r1, #128	@ 0x80
 80032d4:	f000 f98a 	bl	80035ec <I2C_WaitOnFlagUntilTimeout>
 80032d8:	1e03      	subs	r3, r0, #0
 80032da:	d001      	beq.n	80032e0 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e053      	b.n	8003388 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	2bff      	cmp	r3, #255	@ 0xff
 80032e8:	d911      	bls.n	800330e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	22ff      	movs	r2, #255	@ 0xff
 80032ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	2380      	movs	r3, #128	@ 0x80
 80032f8:	045c      	lsls	r4, r3, #17
 80032fa:	230a      	movs	r3, #10
 80032fc:	18fb      	adds	r3, r7, r3
 80032fe:	8819      	ldrh	r1, [r3, #0]
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	2300      	movs	r3, #0
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	0023      	movs	r3, r4
 8003308:	f000 fbe8 	bl	8003adc <I2C_TransferConfig>
 800330c:	e012      	b.n	8003334 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800331c:	b2da      	uxtb	r2, r3
 800331e:	2380      	movs	r3, #128	@ 0x80
 8003320:	049c      	lsls	r4, r3, #18
 8003322:	230a      	movs	r3, #10
 8003324:	18fb      	adds	r3, r7, r3
 8003326:	8819      	ldrh	r1, [r3, #0]
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	2300      	movs	r3, #0
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	0023      	movs	r3, r4
 8003330:	f000 fbd4 	bl	8003adc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d198      	bne.n	8003270 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	0018      	movs	r0, r3
 8003346:	f000 f9ef 	bl	8003728 <I2C_WaitOnSTOPFlagUntilTimeout>
 800334a:	1e03      	subs	r3, r0, #0
 800334c:	d001      	beq.n	8003352 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e01a      	b.n	8003388 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2220      	movs	r2, #32
 8003358:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	490b      	ldr	r1, [pc, #44]	@ (8003394 <HAL_I2C_Master_Transmit+0x250>)
 8003366:	400a      	ands	r2, r1
 8003368:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2241      	movs	r2, #65	@ 0x41
 800336e:	2120      	movs	r1, #32
 8003370:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2242      	movs	r2, #66	@ 0x42
 8003376:	2100      	movs	r1, #0
 8003378:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2240      	movs	r2, #64	@ 0x40
 800337e:	2100      	movs	r1, #0
 8003380:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	e000      	b.n	8003388 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003386:	2302      	movs	r3, #2
  }
}
 8003388:	0018      	movs	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	b007      	add	sp, #28
 800338e:	bd90      	pop	{r4, r7, pc}
 8003390:	80002000 	.word	0x80002000
 8003394:	fe00e800 	.word	0xfe00e800

08003398 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003398:	b590      	push	{r4, r7, lr}
 800339a:	b089      	sub	sp, #36	@ 0x24
 800339c:	af02      	add	r7, sp, #8
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	0008      	movs	r0, r1
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	0019      	movs	r1, r3
 80033a6:	230a      	movs	r3, #10
 80033a8:	18fb      	adds	r3, r7, r3
 80033aa:	1c02      	adds	r2, r0, #0
 80033ac:	801a      	strh	r2, [r3, #0]
 80033ae:	2308      	movs	r3, #8
 80033b0:	18fb      	adds	r3, r7, r3
 80033b2:	1c0a      	adds	r2, r1, #0
 80033b4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2241      	movs	r2, #65	@ 0x41
 80033ba:	5c9b      	ldrb	r3, [r3, r2]
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b20      	cmp	r3, #32
 80033c0:	d000      	beq.n	80033c4 <HAL_I2C_Master_Receive+0x2c>
 80033c2:	e0e8      	b.n	8003596 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2240      	movs	r2, #64	@ 0x40
 80033c8:	5c9b      	ldrb	r3, [r3, r2]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d101      	bne.n	80033d2 <HAL_I2C_Master_Receive+0x3a>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e0e2      	b.n	8003598 <HAL_I2C_Master_Receive+0x200>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2240      	movs	r2, #64	@ 0x40
 80033d6:	2101      	movs	r1, #1
 80033d8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033da:	f7ff fb6f 	bl	8002abc <HAL_GetTick>
 80033de:	0003      	movs	r3, r0
 80033e0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033e2:	2380      	movs	r3, #128	@ 0x80
 80033e4:	0219      	lsls	r1, r3, #8
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	2319      	movs	r3, #25
 80033ee:	2201      	movs	r2, #1
 80033f0:	f000 f8fc 	bl	80035ec <I2C_WaitOnFlagUntilTimeout>
 80033f4:	1e03      	subs	r3, r0, #0
 80033f6:	d001      	beq.n	80033fc <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0cd      	b.n	8003598 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2241      	movs	r2, #65	@ 0x41
 8003400:	2122      	movs	r1, #34	@ 0x22
 8003402:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2242      	movs	r2, #66	@ 0x42
 8003408:	2110      	movs	r1, #16
 800340a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2208      	movs	r2, #8
 800341c:	18ba      	adds	r2, r7, r2
 800341e:	8812      	ldrh	r2, [r2, #0]
 8003420:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800342c:	b29b      	uxth	r3, r3
 800342e:	2bff      	cmp	r3, #255	@ 0xff
 8003430:	d911      	bls.n	8003456 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	22ff      	movs	r2, #255	@ 0xff
 8003436:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800343c:	b2da      	uxtb	r2, r3
 800343e:	2380      	movs	r3, #128	@ 0x80
 8003440:	045c      	lsls	r4, r3, #17
 8003442:	230a      	movs	r3, #10
 8003444:	18fb      	adds	r3, r7, r3
 8003446:	8819      	ldrh	r1, [r3, #0]
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	4b55      	ldr	r3, [pc, #340]	@ (80035a0 <HAL_I2C_Master_Receive+0x208>)
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	0023      	movs	r3, r4
 8003450:	f000 fb44 	bl	8003adc <I2C_TransferConfig>
 8003454:	e076      	b.n	8003544 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800345a:	b29a      	uxth	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003464:	b2da      	uxtb	r2, r3
 8003466:	2380      	movs	r3, #128	@ 0x80
 8003468:	049c      	lsls	r4, r3, #18
 800346a:	230a      	movs	r3, #10
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	8819      	ldrh	r1, [r3, #0]
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	4b4b      	ldr	r3, [pc, #300]	@ (80035a0 <HAL_I2C_Master_Receive+0x208>)
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	0023      	movs	r3, r4
 8003478:	f000 fb30 	bl	8003adc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800347c:	e062      	b.n	8003544 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	0018      	movs	r0, r3
 8003486:	f000 f993 	bl	80037b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800348a:	1e03      	subs	r3, r0, #0
 800348c:	d001      	beq.n	8003492 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e082      	b.n	8003598 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d03a      	beq.n	8003544 <HAL_I2C_Master_Receive+0x1ac>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d136      	bne.n	8003544 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	0013      	movs	r3, r2
 80034e0:	2200      	movs	r2, #0
 80034e2:	2180      	movs	r1, #128	@ 0x80
 80034e4:	f000 f882 	bl	80035ec <I2C_WaitOnFlagUntilTimeout>
 80034e8:	1e03      	subs	r3, r0, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e053      	b.n	8003598 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	2bff      	cmp	r3, #255	@ 0xff
 80034f8:	d911      	bls.n	800351e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	22ff      	movs	r2, #255	@ 0xff
 80034fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003504:	b2da      	uxtb	r2, r3
 8003506:	2380      	movs	r3, #128	@ 0x80
 8003508:	045c      	lsls	r4, r3, #17
 800350a:	230a      	movs	r3, #10
 800350c:	18fb      	adds	r3, r7, r3
 800350e:	8819      	ldrh	r1, [r3, #0]
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	2300      	movs	r3, #0
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	0023      	movs	r3, r4
 8003518:	f000 fae0 	bl	8003adc <I2C_TransferConfig>
 800351c:	e012      	b.n	8003544 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352c:	b2da      	uxtb	r2, r3
 800352e:	2380      	movs	r3, #128	@ 0x80
 8003530:	049c      	lsls	r4, r3, #18
 8003532:	230a      	movs	r3, #10
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	8819      	ldrh	r1, [r3, #0]
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	2300      	movs	r3, #0
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	0023      	movs	r3, r4
 8003540:	f000 facc 	bl	8003adc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d197      	bne.n	800347e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	0018      	movs	r0, r3
 8003556:	f000 f8e7 	bl	8003728 <I2C_WaitOnSTOPFlagUntilTimeout>
 800355a:	1e03      	subs	r3, r0, #0
 800355c:	d001      	beq.n	8003562 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e01a      	b.n	8003598 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2220      	movs	r2, #32
 8003568:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	490b      	ldr	r1, [pc, #44]	@ (80035a4 <HAL_I2C_Master_Receive+0x20c>)
 8003576:	400a      	ands	r2, r1
 8003578:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2241      	movs	r2, #65	@ 0x41
 800357e:	2120      	movs	r1, #32
 8003580:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2242      	movs	r2, #66	@ 0x42
 8003586:	2100      	movs	r1, #0
 8003588:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2240      	movs	r2, #64	@ 0x40
 800358e:	2100      	movs	r1, #0
 8003590:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	e000      	b.n	8003598 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003596:	2302      	movs	r3, #2
  }
}
 8003598:	0018      	movs	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	b007      	add	sp, #28
 800359e:	bd90      	pop	{r4, r7, pc}
 80035a0:	80002400 	.word	0x80002400
 80035a4:	fe00e800 	.word	0xfe00e800

080035a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	2202      	movs	r2, #2
 80035b8:	4013      	ands	r3, r2
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d103      	bne.n	80035c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2200      	movs	r2, #0
 80035c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	2201      	movs	r2, #1
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d007      	beq.n	80035e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2101      	movs	r1, #1
 80035e0:	430a      	orrs	r2, r1
 80035e2:	619a      	str	r2, [r3, #24]
  }
}
 80035e4:	46c0      	nop			@ (mov r8, r8)
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b002      	add	sp, #8
 80035ea:	bd80      	pop	{r7, pc}

080035ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	1dfb      	adds	r3, r7, #7
 80035fa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035fc:	e03a      	b.n	8003674 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	6839      	ldr	r1, [r7, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	0018      	movs	r0, r3
 8003606:	f000 f971 	bl	80038ec <I2C_IsErrorOccurred>
 800360a:	1e03      	subs	r3, r0, #0
 800360c:	d001      	beq.n	8003612 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e040      	b.n	8003694 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	3301      	adds	r3, #1
 8003616:	d02d      	beq.n	8003674 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003618:	f7ff fa50 	bl	8002abc <HAL_GetTick>
 800361c:	0002      	movs	r2, r0
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d302      	bcc.n	800362e <I2C_WaitOnFlagUntilTimeout+0x42>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d122      	bne.n	8003674 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	4013      	ands	r3, r2
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	425a      	negs	r2, r3
 800363e:	4153      	adcs	r3, r2
 8003640:	b2db      	uxtb	r3, r3
 8003642:	001a      	movs	r2, r3
 8003644:	1dfb      	adds	r3, r7, #7
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d113      	bne.n	8003674 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003650:	2220      	movs	r2, #32
 8003652:	431a      	orrs	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2241      	movs	r2, #65	@ 0x41
 800365c:	2120      	movs	r1, #32
 800365e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2242      	movs	r2, #66	@ 0x42
 8003664:	2100      	movs	r1, #0
 8003666:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2240      	movs	r2, #64	@ 0x40
 800366c:	2100      	movs	r1, #0
 800366e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e00f      	b.n	8003694 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	4013      	ands	r3, r2
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	425a      	negs	r2, r3
 8003684:	4153      	adcs	r3, r2
 8003686:	b2db      	uxtb	r3, r3
 8003688:	001a      	movs	r2, r3
 800368a:	1dfb      	adds	r3, r7, #7
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d0b5      	beq.n	80035fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	0018      	movs	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	b004      	add	sp, #16
 800369a:	bd80      	pop	{r7, pc}

0800369c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036a8:	e032      	b.n	8003710 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	68b9      	ldr	r1, [r7, #8]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	0018      	movs	r0, r3
 80036b2:	f000 f91b 	bl	80038ec <I2C_IsErrorOccurred>
 80036b6:	1e03      	subs	r3, r0, #0
 80036b8:	d001      	beq.n	80036be <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e030      	b.n	8003720 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	3301      	adds	r3, #1
 80036c2:	d025      	beq.n	8003710 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c4:	f7ff f9fa 	bl	8002abc <HAL_GetTick>
 80036c8:	0002      	movs	r2, r0
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d302      	bcc.n	80036da <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d11a      	bne.n	8003710 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	2202      	movs	r2, #2
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d013      	beq.n	8003710 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ec:	2220      	movs	r2, #32
 80036ee:	431a      	orrs	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2241      	movs	r2, #65	@ 0x41
 80036f8:	2120      	movs	r1, #32
 80036fa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2242      	movs	r2, #66	@ 0x42
 8003700:	2100      	movs	r1, #0
 8003702:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2240      	movs	r2, #64	@ 0x40
 8003708:	2100      	movs	r1, #0
 800370a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e007      	b.n	8003720 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	2202      	movs	r2, #2
 8003718:	4013      	ands	r3, r2
 800371a:	2b02      	cmp	r3, #2
 800371c:	d1c5      	bne.n	80036aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	0018      	movs	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	b004      	add	sp, #16
 8003726:	bd80      	pop	{r7, pc}

08003728 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003734:	e02f      	b.n	8003796 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	0018      	movs	r0, r3
 800373e:	f000 f8d5 	bl	80038ec <I2C_IsErrorOccurred>
 8003742:	1e03      	subs	r3, r0, #0
 8003744:	d001      	beq.n	800374a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e02d      	b.n	80037a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374a:	f7ff f9b7 	bl	8002abc <HAL_GetTick>
 800374e:	0002      	movs	r2, r0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	429a      	cmp	r2, r3
 8003758:	d302      	bcc.n	8003760 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d11a      	bne.n	8003796 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	2220      	movs	r2, #32
 8003768:	4013      	ands	r3, r2
 800376a:	2b20      	cmp	r3, #32
 800376c:	d013      	beq.n	8003796 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003772:	2220      	movs	r2, #32
 8003774:	431a      	orrs	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2241      	movs	r2, #65	@ 0x41
 800377e:	2120      	movs	r1, #32
 8003780:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2242      	movs	r2, #66	@ 0x42
 8003786:	2100      	movs	r1, #0
 8003788:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2240      	movs	r2, #64	@ 0x40
 800378e:	2100      	movs	r1, #0
 8003790:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e007      	b.n	80037a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	2220      	movs	r2, #32
 800379e:	4013      	ands	r3, r2
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	d1c8      	bne.n	8003736 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	0018      	movs	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	b004      	add	sp, #16
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037bc:	2317      	movs	r3, #23
 80037be:	18fb      	adds	r3, r7, r3
 80037c0:	2200      	movs	r2, #0
 80037c2:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80037c4:	e07b      	b.n	80038be <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	0018      	movs	r0, r3
 80037ce:	f000 f88d 	bl	80038ec <I2C_IsErrorOccurred>
 80037d2:	1e03      	subs	r3, r0, #0
 80037d4:	d003      	beq.n	80037de <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80037d6:	2317      	movs	r3, #23
 80037d8:	18fb      	adds	r3, r7, r3
 80037da:	2201      	movs	r2, #1
 80037dc:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	2220      	movs	r2, #32
 80037e6:	4013      	ands	r3, r2
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d140      	bne.n	800386e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80037ec:	2117      	movs	r1, #23
 80037ee:	187b      	adds	r3, r7, r1
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d13b      	bne.n	800386e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	2204      	movs	r2, #4
 80037fe:	4013      	ands	r3, r2
 8003800:	2b04      	cmp	r3, #4
 8003802:	d106      	bne.n	8003812 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800380c:	187b      	adds	r3, r7, r1
 800380e:	2200      	movs	r2, #0
 8003810:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	2210      	movs	r2, #16
 800381a:	4013      	ands	r3, r2
 800381c:	2b10      	cmp	r3, #16
 800381e:	d123      	bne.n	8003868 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2210      	movs	r2, #16
 8003826:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2204      	movs	r2, #4
 800382c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2220      	movs	r2, #32
 8003834:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4929      	ldr	r1, [pc, #164]	@ (80038e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8003842:	400a      	ands	r2, r1
 8003844:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2241      	movs	r2, #65	@ 0x41
 800384a:	2120      	movs	r1, #32
 800384c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2242      	movs	r2, #66	@ 0x42
 8003852:	2100      	movs	r1, #0
 8003854:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2240      	movs	r2, #64	@ 0x40
 800385a:	2100      	movs	r1, #0
 800385c:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800385e:	2317      	movs	r3, #23
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]
 8003866:	e002      	b.n	800386e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800386e:	f7ff f925 	bl	8002abc <HAL_GetTick>
 8003872:	0002      	movs	r2, r0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	429a      	cmp	r2, r3
 800387c:	d302      	bcc.n	8003884 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d11c      	bne.n	80038be <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8003884:	2017      	movs	r0, #23
 8003886:	183b      	adds	r3, r7, r0
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d117      	bne.n	80038be <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	2204      	movs	r2, #4
 8003896:	4013      	ands	r3, r2
 8003898:	2b04      	cmp	r3, #4
 800389a:	d010      	beq.n	80038be <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a0:	2220      	movs	r2, #32
 80038a2:	431a      	orrs	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2241      	movs	r2, #65	@ 0x41
 80038ac:	2120      	movs	r1, #32
 80038ae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2240      	movs	r2, #64	@ 0x40
 80038b4:	2100      	movs	r1, #0
 80038b6:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80038b8:	183b      	adds	r3, r7, r0
 80038ba:	2201      	movs	r2, #1
 80038bc:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	2204      	movs	r2, #4
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d005      	beq.n	80038d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80038cc:	2317      	movs	r3, #23
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d100      	bne.n	80038d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80038d6:	e776      	b.n	80037c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80038d8:	2317      	movs	r3, #23
 80038da:	18fb      	adds	r3, r7, r3
 80038dc:	781b      	ldrb	r3, [r3, #0]
}
 80038de:	0018      	movs	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b006      	add	sp, #24
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	46c0      	nop			@ (mov r8, r8)
 80038e8:	fe00e800 	.word	0xfe00e800

080038ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08a      	sub	sp, #40	@ 0x28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f8:	2327      	movs	r3, #39	@ 0x27
 80038fa:	18fb      	adds	r3, r7, r3
 80038fc:	2200      	movs	r2, #0
 80038fe:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003908:	2300      	movs	r3, #0
 800390a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	2210      	movs	r2, #16
 8003914:	4013      	ands	r3, r2
 8003916:	d100      	bne.n	800391a <I2C_IsErrorOccurred+0x2e>
 8003918:	e079      	b.n	8003a0e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2210      	movs	r2, #16
 8003920:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003922:	e057      	b.n	80039d4 <I2C_IsErrorOccurred+0xe8>
 8003924:	2227      	movs	r2, #39	@ 0x27
 8003926:	18bb      	adds	r3, r7, r2
 8003928:	18ba      	adds	r2, r7, r2
 800392a:	7812      	ldrb	r2, [r2, #0]
 800392c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	3301      	adds	r3, #1
 8003932:	d04f      	beq.n	80039d4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003934:	f7ff f8c2 	bl	8002abc <HAL_GetTick>
 8003938:	0002      	movs	r2, r0
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	429a      	cmp	r2, r3
 8003942:	d302      	bcc.n	800394a <I2C_IsErrorOccurred+0x5e>
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d144      	bne.n	80039d4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	2380      	movs	r3, #128	@ 0x80
 8003952:	01db      	lsls	r3, r3, #7
 8003954:	4013      	ands	r3, r2
 8003956:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003958:	2013      	movs	r0, #19
 800395a:	183b      	adds	r3, r7, r0
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	2142      	movs	r1, #66	@ 0x42
 8003960:	5c52      	ldrb	r2, [r2, r1]
 8003962:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	2380      	movs	r3, #128	@ 0x80
 800396c:	021b      	lsls	r3, r3, #8
 800396e:	401a      	ands	r2, r3
 8003970:	2380      	movs	r3, #128	@ 0x80
 8003972:	021b      	lsls	r3, r3, #8
 8003974:	429a      	cmp	r2, r3
 8003976:	d126      	bne.n	80039c6 <I2C_IsErrorOccurred+0xda>
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	2380      	movs	r3, #128	@ 0x80
 800397c:	01db      	lsls	r3, r3, #7
 800397e:	429a      	cmp	r2, r3
 8003980:	d021      	beq.n	80039c6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003982:	183b      	adds	r3, r7, r0
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b20      	cmp	r3, #32
 8003988:	d01d      	beq.n	80039c6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2180      	movs	r1, #128	@ 0x80
 8003996:	01c9      	lsls	r1, r1, #7
 8003998:	430a      	orrs	r2, r1
 800399a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800399c:	f7ff f88e 	bl	8002abc <HAL_GetTick>
 80039a0:	0003      	movs	r3, r0
 80039a2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039a4:	e00f      	b.n	80039c6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80039a6:	f7ff f889 	bl	8002abc <HAL_GetTick>
 80039aa:	0002      	movs	r2, r0
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b19      	cmp	r3, #25
 80039b2:	d908      	bls.n	80039c6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	2220      	movs	r2, #32
 80039b8:	4313      	orrs	r3, r2
 80039ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80039bc:	2327      	movs	r3, #39	@ 0x27
 80039be:	18fb      	adds	r3, r7, r3
 80039c0:	2201      	movs	r2, #1
 80039c2:	701a      	strb	r2, [r3, #0]

              break;
 80039c4:	e006      	b.n	80039d4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	2220      	movs	r2, #32
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	d1e8      	bne.n	80039a6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	2220      	movs	r2, #32
 80039dc:	4013      	ands	r3, r2
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d004      	beq.n	80039ec <I2C_IsErrorOccurred+0x100>
 80039e2:	2327      	movs	r3, #39	@ 0x27
 80039e4:	18fb      	adds	r3, r7, r3
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d09b      	beq.n	8003924 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80039ec:	2327      	movs	r3, #39	@ 0x27
 80039ee:	18fb      	adds	r3, r7, r3
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d103      	bne.n	80039fe <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2220      	movs	r2, #32
 80039fc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	2204      	movs	r2, #4
 8003a02:	4313      	orrs	r3, r2
 8003a04:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a06:	2327      	movs	r3, #39	@ 0x27
 8003a08:	18fb      	adds	r3, r7, r3
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	2380      	movs	r3, #128	@ 0x80
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d00c      	beq.n	8003a3a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	2201      	movs	r2, #1
 8003a24:	4313      	orrs	r3, r2
 8003a26:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2280      	movs	r2, #128	@ 0x80
 8003a2e:	0052      	lsls	r2, r2, #1
 8003a30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a32:	2327      	movs	r3, #39	@ 0x27
 8003a34:	18fb      	adds	r3, r7, r3
 8003a36:	2201      	movs	r2, #1
 8003a38:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	2380      	movs	r3, #128	@ 0x80
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4013      	ands	r3, r2
 8003a42:	d00c      	beq.n	8003a5e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	2208      	movs	r2, #8
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2280      	movs	r2, #128	@ 0x80
 8003a52:	00d2      	lsls	r2, r2, #3
 8003a54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a56:	2327      	movs	r3, #39	@ 0x27
 8003a58:	18fb      	adds	r3, r7, r3
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	2380      	movs	r3, #128	@ 0x80
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4013      	ands	r3, r2
 8003a66:	d00c      	beq.n	8003a82 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2280      	movs	r2, #128	@ 0x80
 8003a76:	0092      	lsls	r2, r2, #2
 8003a78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a7a:	2327      	movs	r3, #39	@ 0x27
 8003a7c:	18fb      	adds	r3, r7, r3
 8003a7e:	2201      	movs	r2, #1
 8003a80:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003a82:	2327      	movs	r3, #39	@ 0x27
 8003a84:	18fb      	adds	r3, r7, r3
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d01d      	beq.n	8003ac8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f7ff fd8a 	bl	80035a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	490e      	ldr	r1, [pc, #56]	@ (8003ad8 <I2C_IsErrorOccurred+0x1ec>)
 8003aa0:	400a      	ands	r2, r1
 8003aa2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2241      	movs	r2, #65	@ 0x41
 8003ab4:	2120      	movs	r1, #32
 8003ab6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2242      	movs	r2, #66	@ 0x42
 8003abc:	2100      	movs	r1, #0
 8003abe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2240      	movs	r2, #64	@ 0x40
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003ac8:	2327      	movs	r3, #39	@ 0x27
 8003aca:	18fb      	adds	r3, r7, r3
 8003acc:	781b      	ldrb	r3, [r3, #0]
}
 8003ace:	0018      	movs	r0, r3
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	b00a      	add	sp, #40	@ 0x28
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	46c0      	nop			@ (mov r8, r8)
 8003ad8:	fe00e800 	.word	0xfe00e800

08003adc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003adc:	b590      	push	{r4, r7, lr}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	0008      	movs	r0, r1
 8003ae6:	0011      	movs	r1, r2
 8003ae8:	607b      	str	r3, [r7, #4]
 8003aea:	240a      	movs	r4, #10
 8003aec:	193b      	adds	r3, r7, r4
 8003aee:	1c02      	adds	r2, r0, #0
 8003af0:	801a      	strh	r2, [r3, #0]
 8003af2:	2009      	movs	r0, #9
 8003af4:	183b      	adds	r3, r7, r0
 8003af6:	1c0a      	adds	r2, r1, #0
 8003af8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003afa:	193b      	adds	r3, r7, r4
 8003afc:	881b      	ldrh	r3, [r3, #0]
 8003afe:	059b      	lsls	r3, r3, #22
 8003b00:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b02:	183b      	adds	r3, r7, r0
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	0419      	lsls	r1, r3, #16
 8003b08:	23ff      	movs	r3, #255	@ 0xff
 8003b0a:	041b      	lsls	r3, r3, #16
 8003b0c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b0e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b16:	4313      	orrs	r3, r2
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	085b      	lsrs	r3, r3, #1
 8003b1c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b26:	0d51      	lsrs	r1, r2, #21
 8003b28:	2280      	movs	r2, #128	@ 0x80
 8003b2a:	00d2      	lsls	r2, r2, #3
 8003b2c:	400a      	ands	r2, r1
 8003b2e:	4907      	ldr	r1, [pc, #28]	@ (8003b4c <I2C_TransferConfig+0x70>)
 8003b30:	430a      	orrs	r2, r1
 8003b32:	43d2      	mvns	r2, r2
 8003b34:	401a      	ands	r2, r3
 8003b36:	0011      	movs	r1, r2
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b42:	46c0      	nop			@ (mov r8, r8)
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b007      	add	sp, #28
 8003b48:	bd90      	pop	{r4, r7, pc}
 8003b4a:	46c0      	nop			@ (mov r8, r8)
 8003b4c:	03ff63ff 	.word	0x03ff63ff

08003b50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2241      	movs	r2, #65	@ 0x41
 8003b5e:	5c9b      	ldrb	r3, [r3, r2]
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b20      	cmp	r3, #32
 8003b64:	d138      	bne.n	8003bd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2240      	movs	r2, #64	@ 0x40
 8003b6a:	5c9b      	ldrb	r3, [r3, r2]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e032      	b.n	8003bda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2240      	movs	r2, #64	@ 0x40
 8003b78:	2101      	movs	r1, #1
 8003b7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2241      	movs	r2, #65	@ 0x41
 8003b80:	2124      	movs	r1, #36	@ 0x24
 8003b82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2101      	movs	r1, #1
 8003b90:	438a      	bics	r2, r1
 8003b92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4911      	ldr	r1, [pc, #68]	@ (8003be4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003ba0:	400a      	ands	r2, r1
 8003ba2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6819      	ldr	r1, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2241      	movs	r2, #65	@ 0x41
 8003bc8:	2120      	movs	r1, #32
 8003bca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2240      	movs	r2, #64	@ 0x40
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	e000      	b.n	8003bda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
  }
}
 8003bda:	0018      	movs	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	b002      	add	sp, #8
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	46c0      	nop			@ (mov r8, r8)
 8003be4:	ffffefff 	.word	0xffffefff

08003be8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2241      	movs	r2, #65	@ 0x41
 8003bf6:	5c9b      	ldrb	r3, [r3, r2]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b20      	cmp	r3, #32
 8003bfc:	d139      	bne.n	8003c72 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2240      	movs	r2, #64	@ 0x40
 8003c02:	5c9b      	ldrb	r3, [r3, r2]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e033      	b.n	8003c74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2240      	movs	r2, #64	@ 0x40
 8003c10:	2101      	movs	r1, #1
 8003c12:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2241      	movs	r2, #65	@ 0x41
 8003c18:	2124      	movs	r1, #36	@ 0x24
 8003c1a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2101      	movs	r1, #1
 8003c28:	438a      	bics	r2, r1
 8003c2a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4a11      	ldr	r2, [pc, #68]	@ (8003c7c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	021b      	lsls	r3, r3, #8
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2101      	movs	r1, #1
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2241      	movs	r2, #65	@ 0x41
 8003c62:	2120      	movs	r1, #32
 8003c64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2240      	movs	r2, #64	@ 0x40
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	e000      	b.n	8003c74 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c72:	2302      	movs	r3, #2
  }
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b004      	add	sp, #16
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	fffff0ff 	.word	0xfffff0ff

08003c80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003c88:	4b19      	ldr	r3, [pc, #100]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a19      	ldr	r2, [pc, #100]	@ (8003cf4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003c8e:	4013      	ands	r3, r2
 8003c90:	0019      	movs	r1, r3
 8003c92:	4b17      	ldr	r3, [pc, #92]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	2380      	movs	r3, #128	@ 0x80
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d11f      	bne.n	8003ce4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003ca4:	4b14      	ldr	r3, [pc, #80]	@ (8003cf8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	0013      	movs	r3, r2
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	189b      	adds	r3, r3, r2
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	4912      	ldr	r1, [pc, #72]	@ (8003cfc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f7fc fa30 	bl	8000118 <__udivsi3>
 8003cb8:	0003      	movs	r3, r0
 8003cba:	3301      	adds	r3, #1
 8003cbc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cbe:	e008      	b.n	8003cd2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	e001      	b.n	8003cd2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e009      	b.n	8003ce6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cd2:	4b07      	ldr	r3, [pc, #28]	@ (8003cf0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003cd4:	695a      	ldr	r2, [r3, #20]
 8003cd6:	2380      	movs	r3, #128	@ 0x80
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	401a      	ands	r2, r3
 8003cdc:	2380      	movs	r3, #128	@ 0x80
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d0ed      	beq.n	8003cc0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b004      	add	sp, #16
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	46c0      	nop			@ (mov r8, r8)
 8003cf0:	40007000 	.word	0x40007000
 8003cf4:	fffff9ff 	.word	0xfffff9ff
 8003cf8:	200004f0 	.word	0x200004f0
 8003cfc:	000f4240 	.word	0x000f4240

08003d00 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003d04:	4b03      	ldr	r3, [pc, #12]	@ (8003d14 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	23e0      	movs	r3, #224	@ 0xe0
 8003d0a:	01db      	lsls	r3, r3, #7
 8003d0c:	4013      	ands	r3, r2
}
 8003d0e:	0018      	movs	r0, r3
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40021000 	.word	0x40021000

08003d18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d102      	bne.n	8003d2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	f000 fb50 	bl	80043cc <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2201      	movs	r2, #1
 8003d32:	4013      	ands	r3, r2
 8003d34:	d100      	bne.n	8003d38 <HAL_RCC_OscConfig+0x20>
 8003d36:	e07c      	b.n	8003e32 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d38:	4bc3      	ldr	r3, [pc, #780]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	2238      	movs	r2, #56	@ 0x38
 8003d3e:	4013      	ands	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d42:	4bc1      	ldr	r3, [pc, #772]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	2203      	movs	r2, #3
 8003d48:	4013      	ands	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	2b10      	cmp	r3, #16
 8003d50:	d102      	bne.n	8003d58 <HAL_RCC_OscConfig+0x40>
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d002      	beq.n	8003d5e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d10b      	bne.n	8003d76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5e:	4bba      	ldr	r3, [pc, #744]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	2380      	movs	r3, #128	@ 0x80
 8003d64:	029b      	lsls	r3, r3, #10
 8003d66:	4013      	ands	r3, r2
 8003d68:	d062      	beq.n	8003e30 <HAL_RCC_OscConfig+0x118>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d15e      	bne.n	8003e30 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e32a      	b.n	80043cc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	2380      	movs	r3, #128	@ 0x80
 8003d7c:	025b      	lsls	r3, r3, #9
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d107      	bne.n	8003d92 <HAL_RCC_OscConfig+0x7a>
 8003d82:	4bb1      	ldr	r3, [pc, #708]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	4bb0      	ldr	r3, [pc, #704]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003d88:	2180      	movs	r1, #128	@ 0x80
 8003d8a:	0249      	lsls	r1, r1, #9
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	e020      	b.n	8003dd4 <HAL_RCC_OscConfig+0xbc>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	23a0      	movs	r3, #160	@ 0xa0
 8003d98:	02db      	lsls	r3, r3, #11
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d10e      	bne.n	8003dbc <HAL_RCC_OscConfig+0xa4>
 8003d9e:	4baa      	ldr	r3, [pc, #680]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	4ba9      	ldr	r3, [pc, #676]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003da4:	2180      	movs	r1, #128	@ 0x80
 8003da6:	02c9      	lsls	r1, r1, #11
 8003da8:	430a      	orrs	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	4ba6      	ldr	r3, [pc, #664]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	4ba5      	ldr	r3, [pc, #660]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003db2:	2180      	movs	r1, #128	@ 0x80
 8003db4:	0249      	lsls	r1, r1, #9
 8003db6:	430a      	orrs	r2, r1
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	e00b      	b.n	8003dd4 <HAL_RCC_OscConfig+0xbc>
 8003dbc:	4ba2      	ldr	r3, [pc, #648]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	4ba1      	ldr	r3, [pc, #644]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003dc2:	49a2      	ldr	r1, [pc, #648]	@ (800404c <HAL_RCC_OscConfig+0x334>)
 8003dc4:	400a      	ands	r2, r1
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	4b9f      	ldr	r3, [pc, #636]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	4b9e      	ldr	r3, [pc, #632]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003dce:	49a0      	ldr	r1, [pc, #640]	@ (8004050 <HAL_RCC_OscConfig+0x338>)
 8003dd0:	400a      	ands	r2, r1
 8003dd2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d014      	beq.n	8003e06 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fe fe6e 	bl	8002abc <HAL_GetTick>
 8003de0:	0003      	movs	r3, r0
 8003de2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de6:	f7fe fe69 	bl	8002abc <HAL_GetTick>
 8003dea:	0002      	movs	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b64      	cmp	r3, #100	@ 0x64
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e2e9      	b.n	80043cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003df8:	4b93      	ldr	r3, [pc, #588]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	2380      	movs	r3, #128	@ 0x80
 8003dfe:	029b      	lsls	r3, r3, #10
 8003e00:	4013      	ands	r3, r2
 8003e02:	d0f0      	beq.n	8003de6 <HAL_RCC_OscConfig+0xce>
 8003e04:	e015      	b.n	8003e32 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e06:	f7fe fe59 	bl	8002abc <HAL_GetTick>
 8003e0a:	0003      	movs	r3, r0
 8003e0c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e10:	f7fe fe54 	bl	8002abc <HAL_GetTick>
 8003e14:	0002      	movs	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b64      	cmp	r3, #100	@ 0x64
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e2d4      	b.n	80043cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e22:	4b89      	ldr	r3, [pc, #548]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	2380      	movs	r3, #128	@ 0x80
 8003e28:	029b      	lsls	r3, r3, #10
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d1f0      	bne.n	8003e10 <HAL_RCC_OscConfig+0xf8>
 8003e2e:	e000      	b.n	8003e32 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e30:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2202      	movs	r2, #2
 8003e38:	4013      	ands	r3, r2
 8003e3a:	d100      	bne.n	8003e3e <HAL_RCC_OscConfig+0x126>
 8003e3c:	e099      	b.n	8003f72 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e3e:	4b82      	ldr	r3, [pc, #520]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2238      	movs	r2, #56	@ 0x38
 8003e44:	4013      	ands	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e48:	4b7f      	ldr	r3, [pc, #508]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	2203      	movs	r2, #3
 8003e4e:	4013      	ands	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	2b10      	cmp	r3, #16
 8003e56:	d102      	bne.n	8003e5e <HAL_RCC_OscConfig+0x146>
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d002      	beq.n	8003e64 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d135      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e64:	4b78      	ldr	r3, [pc, #480]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	2380      	movs	r3, #128	@ 0x80
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d005      	beq.n	8003e7c <HAL_RCC_OscConfig+0x164>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e2a7      	b.n	80043cc <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e7c:	4b72      	ldr	r3, [pc, #456]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	4a74      	ldr	r2, [pc, #464]	@ (8004054 <HAL_RCC_OscConfig+0x33c>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	0019      	movs	r1, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	021a      	lsls	r2, r3, #8
 8003e8c:	4b6e      	ldr	r3, [pc, #440]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d112      	bne.n	8003ebe <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e98:	4b6b      	ldr	r3, [pc, #428]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a6e      	ldr	r2, [pc, #440]	@ (8004058 <HAL_RCC_OscConfig+0x340>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	0019      	movs	r1, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691a      	ldr	r2, [r3, #16]
 8003ea6:	4b68      	ldr	r3, [pc, #416]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003eac:	4b66      	ldr	r3, [pc, #408]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	0adb      	lsrs	r3, r3, #11
 8003eb2:	2207      	movs	r2, #7
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	4a69      	ldr	r2, [pc, #420]	@ (800405c <HAL_RCC_OscConfig+0x344>)
 8003eb8:	40da      	lsrs	r2, r3
 8003eba:	4b69      	ldr	r3, [pc, #420]	@ (8004060 <HAL_RCC_OscConfig+0x348>)
 8003ebc:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ebe:	4b69      	ldr	r3, [pc, #420]	@ (8004064 <HAL_RCC_OscConfig+0x34c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f7fe fd9e 	bl	8002a04 <HAL_InitTick>
 8003ec8:	1e03      	subs	r3, r0, #0
 8003eca:	d051      	beq.n	8003f70 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e27d      	b.n	80043cc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d030      	beq.n	8003f3a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003ed8:	4b5b      	ldr	r3, [pc, #364]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a5e      	ldr	r2, [pc, #376]	@ (8004058 <HAL_RCC_OscConfig+0x340>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	0019      	movs	r1, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691a      	ldr	r2, [r3, #16]
 8003ee6:	4b58      	ldr	r3, [pc, #352]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003eec:	4b56      	ldr	r3, [pc, #344]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	4b55      	ldr	r3, [pc, #340]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003ef2:	2180      	movs	r1, #128	@ 0x80
 8003ef4:	0049      	lsls	r1, r1, #1
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efa:	f7fe fddf 	bl	8002abc <HAL_GetTick>
 8003efe:	0003      	movs	r3, r0
 8003f00:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f04:	f7fe fdda 	bl	8002abc <HAL_GetTick>
 8003f08:	0002      	movs	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e25a      	b.n	80043cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f16:	4b4c      	ldr	r3, [pc, #304]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	2380      	movs	r3, #128	@ 0x80
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f22:	4b49      	ldr	r3, [pc, #292]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	4a4b      	ldr	r2, [pc, #300]	@ (8004054 <HAL_RCC_OscConfig+0x33c>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	0019      	movs	r1, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	021a      	lsls	r2, r3, #8
 8003f32:	4b45      	ldr	r3, [pc, #276]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003f34:	430a      	orrs	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]
 8003f38:	e01b      	b.n	8003f72 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003f3a:	4b43      	ldr	r3, [pc, #268]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	4b42      	ldr	r3, [pc, #264]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003f40:	4949      	ldr	r1, [pc, #292]	@ (8004068 <HAL_RCC_OscConfig+0x350>)
 8003f42:	400a      	ands	r2, r1
 8003f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f46:	f7fe fdb9 	bl	8002abc <HAL_GetTick>
 8003f4a:	0003      	movs	r3, r0
 8003f4c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f50:	f7fe fdb4 	bl	8002abc <HAL_GetTick>
 8003f54:	0002      	movs	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e234      	b.n	80043cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f62:	4b39      	ldr	r3, [pc, #228]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	2380      	movs	r3, #128	@ 0x80
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	d1f0      	bne.n	8003f50 <HAL_RCC_OscConfig+0x238>
 8003f6e:	e000      	b.n	8003f72 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f70:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2208      	movs	r2, #8
 8003f78:	4013      	ands	r3, r2
 8003f7a:	d047      	beq.n	800400c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003f7c:	4b32      	ldr	r3, [pc, #200]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	2238      	movs	r2, #56	@ 0x38
 8003f82:	4013      	ands	r3, r2
 8003f84:	2b18      	cmp	r3, #24
 8003f86:	d10a      	bne.n	8003f9e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003f88:	4b2f      	ldr	r3, [pc, #188]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003f8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d03c      	beq.n	800400c <HAL_RCC_OscConfig+0x2f4>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d138      	bne.n	800400c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e216      	b.n	80043cc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d019      	beq.n	8003fda <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003fa6:	4b28      	ldr	r3, [pc, #160]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003fa8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003faa:	4b27      	ldr	r3, [pc, #156]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003fac:	2101      	movs	r1, #1
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb2:	f7fe fd83 	bl	8002abc <HAL_GetTick>
 8003fb6:	0003      	movs	r3, r0
 8003fb8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fbc:	f7fe fd7e 	bl	8002abc <HAL_GetTick>
 8003fc0:	0002      	movs	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e1fe      	b.n	80043cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fce:	4b1e      	ldr	r3, [pc, #120]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	d0f1      	beq.n	8003fbc <HAL_RCC_OscConfig+0x2a4>
 8003fd8:	e018      	b.n	800400c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003fda:	4b1b      	ldr	r3, [pc, #108]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003fdc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003fde:	4b1a      	ldr	r3, [pc, #104]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	438a      	bics	r2, r1
 8003fe4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe6:	f7fe fd69 	bl	8002abc <HAL_GetTick>
 8003fea:	0003      	movs	r3, r0
 8003fec:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ff0:	f7fe fd64 	bl	8002abc <HAL_GetTick>
 8003ff4:	0002      	movs	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e1e4      	b.n	80043cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004002:	4b11      	ldr	r3, [pc, #68]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8004004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004006:	2202      	movs	r2, #2
 8004008:	4013      	ands	r3, r2
 800400a:	d1f1      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2204      	movs	r2, #4
 8004012:	4013      	ands	r3, r2
 8004014:	d100      	bne.n	8004018 <HAL_RCC_OscConfig+0x300>
 8004016:	e0c7      	b.n	80041a8 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004018:	231f      	movs	r3, #31
 800401a:	18fb      	adds	r3, r7, r3
 800401c:	2200      	movs	r2, #0
 800401e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004020:	4b09      	ldr	r3, [pc, #36]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	2238      	movs	r2, #56	@ 0x38
 8004026:	4013      	ands	r3, r2
 8004028:	2b20      	cmp	r3, #32
 800402a:	d11f      	bne.n	800406c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800402c:	4b06      	ldr	r3, [pc, #24]	@ (8004048 <HAL_RCC_OscConfig+0x330>)
 800402e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004030:	2202      	movs	r2, #2
 8004032:	4013      	ands	r3, r2
 8004034:	d100      	bne.n	8004038 <HAL_RCC_OscConfig+0x320>
 8004036:	e0b7      	b.n	80041a8 <HAL_RCC_OscConfig+0x490>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d000      	beq.n	8004042 <HAL_RCC_OscConfig+0x32a>
 8004040:	e0b2      	b.n	80041a8 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e1c2      	b.n	80043cc <HAL_RCC_OscConfig+0x6b4>
 8004046:	46c0      	nop			@ (mov r8, r8)
 8004048:	40021000 	.word	0x40021000
 800404c:	fffeffff 	.word	0xfffeffff
 8004050:	fffbffff 	.word	0xfffbffff
 8004054:	ffff80ff 	.word	0xffff80ff
 8004058:	ffffc7ff 	.word	0xffffc7ff
 800405c:	00f42400 	.word	0x00f42400
 8004060:	200004f0 	.word	0x200004f0
 8004064:	200004f4 	.word	0x200004f4
 8004068:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800406c:	4bb5      	ldr	r3, [pc, #724]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 800406e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004070:	2380      	movs	r3, #128	@ 0x80
 8004072:	055b      	lsls	r3, r3, #21
 8004074:	4013      	ands	r3, r2
 8004076:	d101      	bne.n	800407c <HAL_RCC_OscConfig+0x364>
 8004078:	2301      	movs	r3, #1
 800407a:	e000      	b.n	800407e <HAL_RCC_OscConfig+0x366>
 800407c:	2300      	movs	r3, #0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d011      	beq.n	80040a6 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004082:	4bb0      	ldr	r3, [pc, #704]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 8004084:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004086:	4baf      	ldr	r3, [pc, #700]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 8004088:	2180      	movs	r1, #128	@ 0x80
 800408a:	0549      	lsls	r1, r1, #21
 800408c:	430a      	orrs	r2, r1
 800408e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004090:	4bac      	ldr	r3, [pc, #688]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 8004092:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004094:	2380      	movs	r3, #128	@ 0x80
 8004096:	055b      	lsls	r3, r3, #21
 8004098:	4013      	ands	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800409e:	231f      	movs	r3, #31
 80040a0:	18fb      	adds	r3, r7, r3
 80040a2:	2201      	movs	r2, #1
 80040a4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040a6:	4ba8      	ldr	r3, [pc, #672]	@ (8004348 <HAL_RCC_OscConfig+0x630>)
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	2380      	movs	r3, #128	@ 0x80
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	4013      	ands	r3, r2
 80040b0:	d11a      	bne.n	80040e8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040b2:	4ba5      	ldr	r3, [pc, #660]	@ (8004348 <HAL_RCC_OscConfig+0x630>)
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	4ba4      	ldr	r3, [pc, #656]	@ (8004348 <HAL_RCC_OscConfig+0x630>)
 80040b8:	2180      	movs	r1, #128	@ 0x80
 80040ba:	0049      	lsls	r1, r1, #1
 80040bc:	430a      	orrs	r2, r1
 80040be:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80040c0:	f7fe fcfc 	bl	8002abc <HAL_GetTick>
 80040c4:	0003      	movs	r3, r0
 80040c6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ca:	f7fe fcf7 	bl	8002abc <HAL_GetTick>
 80040ce:	0002      	movs	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e177      	b.n	80043cc <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040dc:	4b9a      	ldr	r3, [pc, #616]	@ (8004348 <HAL_RCC_OscConfig+0x630>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	2380      	movs	r3, #128	@ 0x80
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	4013      	ands	r3, r2
 80040e6:	d0f0      	beq.n	80040ca <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d106      	bne.n	80040fe <HAL_RCC_OscConfig+0x3e6>
 80040f0:	4b94      	ldr	r3, [pc, #592]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 80040f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80040f4:	4b93      	ldr	r3, [pc, #588]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 80040f6:	2101      	movs	r1, #1
 80040f8:	430a      	orrs	r2, r1
 80040fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80040fc:	e01c      	b.n	8004138 <HAL_RCC_OscConfig+0x420>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	2b05      	cmp	r3, #5
 8004104:	d10c      	bne.n	8004120 <HAL_RCC_OscConfig+0x408>
 8004106:	4b8f      	ldr	r3, [pc, #572]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 8004108:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800410a:	4b8e      	ldr	r3, [pc, #568]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 800410c:	2104      	movs	r1, #4
 800410e:	430a      	orrs	r2, r1
 8004110:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004112:	4b8c      	ldr	r3, [pc, #560]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 8004114:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004116:	4b8b      	ldr	r3, [pc, #556]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 8004118:	2101      	movs	r1, #1
 800411a:	430a      	orrs	r2, r1
 800411c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800411e:	e00b      	b.n	8004138 <HAL_RCC_OscConfig+0x420>
 8004120:	4b88      	ldr	r3, [pc, #544]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 8004122:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004124:	4b87      	ldr	r3, [pc, #540]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 8004126:	2101      	movs	r1, #1
 8004128:	438a      	bics	r2, r1
 800412a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800412c:	4b85      	ldr	r3, [pc, #532]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 800412e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004130:	4b84      	ldr	r3, [pc, #528]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 8004132:	2104      	movs	r1, #4
 8004134:	438a      	bics	r2, r1
 8004136:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d014      	beq.n	800416a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004140:	f7fe fcbc 	bl	8002abc <HAL_GetTick>
 8004144:	0003      	movs	r3, r0
 8004146:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004148:	e009      	b.n	800415e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800414a:	f7fe fcb7 	bl	8002abc <HAL_GetTick>
 800414e:	0002      	movs	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	4a7d      	ldr	r2, [pc, #500]	@ (800434c <HAL_RCC_OscConfig+0x634>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e136      	b.n	80043cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800415e:	4b79      	ldr	r3, [pc, #484]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 8004160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004162:	2202      	movs	r2, #2
 8004164:	4013      	ands	r3, r2
 8004166:	d0f0      	beq.n	800414a <HAL_RCC_OscConfig+0x432>
 8004168:	e013      	b.n	8004192 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416a:	f7fe fca7 	bl	8002abc <HAL_GetTick>
 800416e:	0003      	movs	r3, r0
 8004170:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004172:	e009      	b.n	8004188 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004174:	f7fe fca2 	bl	8002abc <HAL_GetTick>
 8004178:	0002      	movs	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	4a73      	ldr	r2, [pc, #460]	@ (800434c <HAL_RCC_OscConfig+0x634>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e121      	b.n	80043cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004188:	4b6e      	ldr	r3, [pc, #440]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 800418a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800418c:	2202      	movs	r2, #2
 800418e:	4013      	ands	r3, r2
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004192:	231f      	movs	r3, #31
 8004194:	18fb      	adds	r3, r7, r3
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d105      	bne.n	80041a8 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800419c:	4b69      	ldr	r3, [pc, #420]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 800419e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80041a0:	4b68      	ldr	r3, [pc, #416]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 80041a2:	496b      	ldr	r1, [pc, #428]	@ (8004350 <HAL_RCC_OscConfig+0x638>)
 80041a4:	400a      	ands	r2, r1
 80041a6:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2220      	movs	r2, #32
 80041ae:	4013      	ands	r3, r2
 80041b0:	d039      	beq.n	8004226 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d01b      	beq.n	80041f2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041ba:	4b62      	ldr	r3, [pc, #392]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	4b61      	ldr	r3, [pc, #388]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 80041c0:	2180      	movs	r1, #128	@ 0x80
 80041c2:	03c9      	lsls	r1, r1, #15
 80041c4:	430a      	orrs	r2, r1
 80041c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c8:	f7fe fc78 	bl	8002abc <HAL_GetTick>
 80041cc:	0003      	movs	r3, r0
 80041ce:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041d2:	f7fe fc73 	bl	8002abc <HAL_GetTick>
 80041d6:	0002      	movs	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e0f3      	b.n	80043cc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80041e4:	4b57      	ldr	r3, [pc, #348]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	2380      	movs	r3, #128	@ 0x80
 80041ea:	041b      	lsls	r3, r3, #16
 80041ec:	4013      	ands	r3, r2
 80041ee:	d0f0      	beq.n	80041d2 <HAL_RCC_OscConfig+0x4ba>
 80041f0:	e019      	b.n	8004226 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041f2:	4b54      	ldr	r3, [pc, #336]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	4b53      	ldr	r3, [pc, #332]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 80041f8:	4956      	ldr	r1, [pc, #344]	@ (8004354 <HAL_RCC_OscConfig+0x63c>)
 80041fa:	400a      	ands	r2, r1
 80041fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fe:	f7fe fc5d 	bl	8002abc <HAL_GetTick>
 8004202:	0003      	movs	r3, r0
 8004204:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004208:	f7fe fc58 	bl	8002abc <HAL_GetTick>
 800420c:	0002      	movs	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e0d8      	b.n	80043cc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800421a:	4b4a      	ldr	r3, [pc, #296]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	2380      	movs	r3, #128	@ 0x80
 8004220:	041b      	lsls	r3, r3, #16
 8004222:	4013      	ands	r3, r2
 8004224:	d1f0      	bne.n	8004208 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d100      	bne.n	8004230 <HAL_RCC_OscConfig+0x518>
 800422e:	e0cc      	b.n	80043ca <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004230:	4b44      	ldr	r3, [pc, #272]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2238      	movs	r2, #56	@ 0x38
 8004236:	4013      	ands	r3, r2
 8004238:	2b10      	cmp	r3, #16
 800423a:	d100      	bne.n	800423e <HAL_RCC_OscConfig+0x526>
 800423c:	e07b      	b.n	8004336 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d156      	bne.n	80042f4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004246:	4b3f      	ldr	r3, [pc, #252]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4b3e      	ldr	r3, [pc, #248]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 800424c:	4942      	ldr	r1, [pc, #264]	@ (8004358 <HAL_RCC_OscConfig+0x640>)
 800424e:	400a      	ands	r2, r1
 8004250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004252:	f7fe fc33 	bl	8002abc <HAL_GetTick>
 8004256:	0003      	movs	r3, r0
 8004258:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425c:	f7fe fc2e 	bl	8002abc <HAL_GetTick>
 8004260:	0002      	movs	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e0ae      	b.n	80043cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800426e:	4b35      	ldr	r3, [pc, #212]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	2380      	movs	r3, #128	@ 0x80
 8004274:	049b      	lsls	r3, r3, #18
 8004276:	4013      	ands	r3, r2
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800427a:	4b32      	ldr	r3, [pc, #200]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	4a37      	ldr	r2, [pc, #220]	@ (800435c <HAL_RCC_OscConfig+0x644>)
 8004280:	4013      	ands	r3, r2
 8004282:	0019      	movs	r1, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004292:	021b      	lsls	r3, r3, #8
 8004294:	431a      	orrs	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a6:	431a      	orrs	r2, r3
 80042a8:	4b26      	ldr	r3, [pc, #152]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 80042aa:	430a      	orrs	r2, r1
 80042ac:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042ae:	4b25      	ldr	r3, [pc, #148]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	4b24      	ldr	r3, [pc, #144]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 80042b4:	2180      	movs	r1, #128	@ 0x80
 80042b6:	0449      	lsls	r1, r1, #17
 80042b8:	430a      	orrs	r2, r1
 80042ba:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80042bc:	4b21      	ldr	r3, [pc, #132]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 80042be:	68da      	ldr	r2, [r3, #12]
 80042c0:	4b20      	ldr	r3, [pc, #128]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 80042c2:	2180      	movs	r1, #128	@ 0x80
 80042c4:	0549      	lsls	r1, r1, #21
 80042c6:	430a      	orrs	r2, r1
 80042c8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ca:	f7fe fbf7 	bl	8002abc <HAL_GetTick>
 80042ce:	0003      	movs	r3, r0
 80042d0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d4:	f7fe fbf2 	bl	8002abc <HAL_GetTick>
 80042d8:	0002      	movs	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e072      	b.n	80043cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042e6:	4b17      	ldr	r3, [pc, #92]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	2380      	movs	r3, #128	@ 0x80
 80042ec:	049b      	lsls	r3, r3, #18
 80042ee:	4013      	ands	r3, r2
 80042f0:	d0f0      	beq.n	80042d4 <HAL_RCC_OscConfig+0x5bc>
 80042f2:	e06a      	b.n	80043ca <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f4:	4b13      	ldr	r3, [pc, #76]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	4b12      	ldr	r3, [pc, #72]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 80042fa:	4917      	ldr	r1, [pc, #92]	@ (8004358 <HAL_RCC_OscConfig+0x640>)
 80042fc:	400a      	ands	r2, r1
 80042fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7fe fbdc 	bl	8002abc <HAL_GetTick>
 8004304:	0003      	movs	r3, r0
 8004306:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800430a:	f7fe fbd7 	bl	8002abc <HAL_GetTick>
 800430e:	0002      	movs	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e057      	b.n	80043cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800431c:	4b09      	ldr	r3, [pc, #36]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	2380      	movs	r3, #128	@ 0x80
 8004322:	049b      	lsls	r3, r3, #18
 8004324:	4013      	ands	r3, r2
 8004326:	d1f0      	bne.n	800430a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004328:	4b06      	ldr	r3, [pc, #24]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	4b05      	ldr	r3, [pc, #20]	@ (8004344 <HAL_RCC_OscConfig+0x62c>)
 800432e:	490c      	ldr	r1, [pc, #48]	@ (8004360 <HAL_RCC_OscConfig+0x648>)
 8004330:	400a      	ands	r2, r1
 8004332:	60da      	str	r2, [r3, #12]
 8004334:	e049      	b.n	80043ca <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d112      	bne.n	8004364 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e044      	b.n	80043cc <HAL_RCC_OscConfig+0x6b4>
 8004342:	46c0      	nop			@ (mov r8, r8)
 8004344:	40021000 	.word	0x40021000
 8004348:	40007000 	.word	0x40007000
 800434c:	00001388 	.word	0x00001388
 8004350:	efffffff 	.word	0xefffffff
 8004354:	ffbfffff 	.word	0xffbfffff
 8004358:	feffffff 	.word	0xfeffffff
 800435c:	11c1808c 	.word	0x11c1808c
 8004360:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004364:	4b1b      	ldr	r3, [pc, #108]	@ (80043d4 <HAL_RCC_OscConfig+0x6bc>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2203      	movs	r2, #3
 800436e:	401a      	ands	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004374:	429a      	cmp	r2, r3
 8004376:	d126      	bne.n	80043c6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2270      	movs	r2, #112	@ 0x70
 800437c:	401a      	ands	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004382:	429a      	cmp	r2, r3
 8004384:	d11f      	bne.n	80043c6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	23fe      	movs	r3, #254	@ 0xfe
 800438a:	01db      	lsls	r3, r3, #7
 800438c:	401a      	ands	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004392:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004394:	429a      	cmp	r2, r3
 8004396:	d116      	bne.n	80043c6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	23f8      	movs	r3, #248	@ 0xf8
 800439c:	039b      	lsls	r3, r3, #14
 800439e:	401a      	ands	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d10e      	bne.n	80043c6 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	23e0      	movs	r3, #224	@ 0xe0
 80043ac:	051b      	lsls	r3, r3, #20
 80043ae:	401a      	ands	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d106      	bne.n	80043c6 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	0f5b      	lsrs	r3, r3, #29
 80043bc:	075a      	lsls	r2, r3, #29
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d001      	beq.n	80043ca <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	0018      	movs	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	b008      	add	sp, #32
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40021000 	.word	0x40021000

080043d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0e9      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043ec:	4b76      	ldr	r3, [pc, #472]	@ (80045c8 <HAL_RCC_ClockConfig+0x1f0>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2207      	movs	r2, #7
 80043f2:	4013      	ands	r3, r2
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d91e      	bls.n	8004438 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fa:	4b73      	ldr	r3, [pc, #460]	@ (80045c8 <HAL_RCC_ClockConfig+0x1f0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2207      	movs	r2, #7
 8004400:	4393      	bics	r3, r2
 8004402:	0019      	movs	r1, r3
 8004404:	4b70      	ldr	r3, [pc, #448]	@ (80045c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800440c:	f7fe fb56 	bl	8002abc <HAL_GetTick>
 8004410:	0003      	movs	r3, r0
 8004412:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004414:	e009      	b.n	800442a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004416:	f7fe fb51 	bl	8002abc <HAL_GetTick>
 800441a:	0002      	movs	r2, r0
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	4a6a      	ldr	r2, [pc, #424]	@ (80045cc <HAL_RCC_ClockConfig+0x1f4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d901      	bls.n	800442a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e0ca      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800442a:	4b67      	ldr	r3, [pc, #412]	@ (80045c8 <HAL_RCC_ClockConfig+0x1f0>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2207      	movs	r2, #7
 8004430:	4013      	ands	r3, r2
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d1ee      	bne.n	8004416 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2202      	movs	r2, #2
 800443e:	4013      	ands	r3, r2
 8004440:	d015      	beq.n	800446e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2204      	movs	r2, #4
 8004448:	4013      	ands	r3, r2
 800444a:	d006      	beq.n	800445a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800444c:	4b60      	ldr	r3, [pc, #384]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	4b5f      	ldr	r3, [pc, #380]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004452:	21e0      	movs	r1, #224	@ 0xe0
 8004454:	01c9      	lsls	r1, r1, #7
 8004456:	430a      	orrs	r2, r1
 8004458:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800445a:	4b5d      	ldr	r3, [pc, #372]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	4a5d      	ldr	r2, [pc, #372]	@ (80045d4 <HAL_RCC_ClockConfig+0x1fc>)
 8004460:	4013      	ands	r3, r2
 8004462:	0019      	movs	r1, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	4b59      	ldr	r3, [pc, #356]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 800446a:	430a      	orrs	r2, r1
 800446c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2201      	movs	r2, #1
 8004474:	4013      	ands	r3, r2
 8004476:	d057      	beq.n	8004528 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d107      	bne.n	8004490 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004480:	4b53      	ldr	r3, [pc, #332]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	2380      	movs	r3, #128	@ 0x80
 8004486:	029b      	lsls	r3, r3, #10
 8004488:	4013      	ands	r3, r2
 800448a:	d12b      	bne.n	80044e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e097      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d107      	bne.n	80044a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004498:	4b4d      	ldr	r3, [pc, #308]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	2380      	movs	r3, #128	@ 0x80
 800449e:	049b      	lsls	r3, r3, #18
 80044a0:	4013      	ands	r3, r2
 80044a2:	d11f      	bne.n	80044e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e08b      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d107      	bne.n	80044c0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044b0:	4b47      	ldr	r3, [pc, #284]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	2380      	movs	r3, #128	@ 0x80
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4013      	ands	r3, r2
 80044ba:	d113      	bne.n	80044e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e07f      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2b03      	cmp	r3, #3
 80044c6:	d106      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044c8:	4b41      	ldr	r3, [pc, #260]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 80044ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044cc:	2202      	movs	r2, #2
 80044ce:	4013      	ands	r3, r2
 80044d0:	d108      	bne.n	80044e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e074      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044d6:	4b3e      	ldr	r3, [pc, #248]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 80044d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044da:	2202      	movs	r2, #2
 80044dc:	4013      	ands	r3, r2
 80044de:	d101      	bne.n	80044e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e06d      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044e4:	4b3a      	ldr	r3, [pc, #232]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2207      	movs	r2, #7
 80044ea:	4393      	bics	r3, r2
 80044ec:	0019      	movs	r1, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	4b37      	ldr	r3, [pc, #220]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 80044f4:	430a      	orrs	r2, r1
 80044f6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f8:	f7fe fae0 	bl	8002abc <HAL_GetTick>
 80044fc:	0003      	movs	r3, r0
 80044fe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004500:	e009      	b.n	8004516 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004502:	f7fe fadb 	bl	8002abc <HAL_GetTick>
 8004506:	0002      	movs	r2, r0
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	4a2f      	ldr	r2, [pc, #188]	@ (80045cc <HAL_RCC_ClockConfig+0x1f4>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e054      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004516:	4b2e      	ldr	r3, [pc, #184]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	2238      	movs	r2, #56	@ 0x38
 800451c:	401a      	ands	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	429a      	cmp	r2, r3
 8004526:	d1ec      	bne.n	8004502 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004528:	4b27      	ldr	r3, [pc, #156]	@ (80045c8 <HAL_RCC_ClockConfig+0x1f0>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2207      	movs	r2, #7
 800452e:	4013      	ands	r3, r2
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	429a      	cmp	r2, r3
 8004534:	d21e      	bcs.n	8004574 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004536:	4b24      	ldr	r3, [pc, #144]	@ (80045c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2207      	movs	r2, #7
 800453c:	4393      	bics	r3, r2
 800453e:	0019      	movs	r1, r3
 8004540:	4b21      	ldr	r3, [pc, #132]	@ (80045c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004548:	f7fe fab8 	bl	8002abc <HAL_GetTick>
 800454c:	0003      	movs	r3, r0
 800454e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004550:	e009      	b.n	8004566 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004552:	f7fe fab3 	bl	8002abc <HAL_GetTick>
 8004556:	0002      	movs	r2, r0
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	4a1b      	ldr	r2, [pc, #108]	@ (80045cc <HAL_RCC_ClockConfig+0x1f4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e02c      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004566:	4b18      	ldr	r3, [pc, #96]	@ (80045c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2207      	movs	r2, #7
 800456c:	4013      	ands	r3, r2
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d1ee      	bne.n	8004552 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2204      	movs	r2, #4
 800457a:	4013      	ands	r3, r2
 800457c:	d009      	beq.n	8004592 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800457e:	4b14      	ldr	r3, [pc, #80]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	4a15      	ldr	r2, [pc, #84]	@ (80045d8 <HAL_RCC_ClockConfig+0x200>)
 8004584:	4013      	ands	r3, r2
 8004586:	0019      	movs	r1, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	4b10      	ldr	r3, [pc, #64]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 800458e:	430a      	orrs	r2, r1
 8004590:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004592:	f000 f829 	bl	80045e8 <HAL_RCC_GetSysClockFreq>
 8004596:	0001      	movs	r1, r0
 8004598:	4b0d      	ldr	r3, [pc, #52]	@ (80045d0 <HAL_RCC_ClockConfig+0x1f8>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	0a1b      	lsrs	r3, r3, #8
 800459e:	220f      	movs	r2, #15
 80045a0:	401a      	ands	r2, r3
 80045a2:	4b0e      	ldr	r3, [pc, #56]	@ (80045dc <HAL_RCC_ClockConfig+0x204>)
 80045a4:	0092      	lsls	r2, r2, #2
 80045a6:	58d3      	ldr	r3, [r2, r3]
 80045a8:	221f      	movs	r2, #31
 80045aa:	4013      	ands	r3, r2
 80045ac:	000a      	movs	r2, r1
 80045ae:	40da      	lsrs	r2, r3
 80045b0:	4b0b      	ldr	r3, [pc, #44]	@ (80045e0 <HAL_RCC_ClockConfig+0x208>)
 80045b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80045b4:	4b0b      	ldr	r3, [pc, #44]	@ (80045e4 <HAL_RCC_ClockConfig+0x20c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	0018      	movs	r0, r3
 80045ba:	f7fe fa23 	bl	8002a04 <HAL_InitTick>
 80045be:	0003      	movs	r3, r0
}
 80045c0:	0018      	movs	r0, r3
 80045c2:	46bd      	mov	sp, r7
 80045c4:	b004      	add	sp, #16
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40022000 	.word	0x40022000
 80045cc:	00001388 	.word	0x00001388
 80045d0:	40021000 	.word	0x40021000
 80045d4:	fffff0ff 	.word	0xfffff0ff
 80045d8:	ffff8fff 	.word	0xffff8fff
 80045dc:	08008318 	.word	0x08008318
 80045e0:	200004f0 	.word	0x200004f0
 80045e4:	200004f4 	.word	0x200004f4

080045e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045ee:	4b3c      	ldr	r3, [pc, #240]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2238      	movs	r2, #56	@ 0x38
 80045f4:	4013      	ands	r3, r2
 80045f6:	d10f      	bne.n	8004618 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80045f8:	4b39      	ldr	r3, [pc, #228]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	0adb      	lsrs	r3, r3, #11
 80045fe:	2207      	movs	r2, #7
 8004600:	4013      	ands	r3, r2
 8004602:	2201      	movs	r2, #1
 8004604:	409a      	lsls	r2, r3
 8004606:	0013      	movs	r3, r2
 8004608:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800460a:	6839      	ldr	r1, [r7, #0]
 800460c:	4835      	ldr	r0, [pc, #212]	@ (80046e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800460e:	f7fb fd83 	bl	8000118 <__udivsi3>
 8004612:	0003      	movs	r3, r0
 8004614:	613b      	str	r3, [r7, #16]
 8004616:	e05d      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004618:	4b31      	ldr	r3, [pc, #196]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2238      	movs	r2, #56	@ 0x38
 800461e:	4013      	ands	r3, r2
 8004620:	2b08      	cmp	r3, #8
 8004622:	d102      	bne.n	800462a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004624:	4b30      	ldr	r3, [pc, #192]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004626:	613b      	str	r3, [r7, #16]
 8004628:	e054      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800462a:	4b2d      	ldr	r3, [pc, #180]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	2238      	movs	r2, #56	@ 0x38
 8004630:	4013      	ands	r3, r2
 8004632:	2b10      	cmp	r3, #16
 8004634:	d138      	bne.n	80046a8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004636:	4b2a      	ldr	r3, [pc, #168]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	2203      	movs	r2, #3
 800463c:	4013      	ands	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004640:	4b27      	ldr	r3, [pc, #156]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	091b      	lsrs	r3, r3, #4
 8004646:	2207      	movs	r2, #7
 8004648:	4013      	ands	r3, r2
 800464a:	3301      	adds	r3, #1
 800464c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2b03      	cmp	r3, #3
 8004652:	d10d      	bne.n	8004670 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004654:	68b9      	ldr	r1, [r7, #8]
 8004656:	4824      	ldr	r0, [pc, #144]	@ (80046e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004658:	f7fb fd5e 	bl	8000118 <__udivsi3>
 800465c:	0003      	movs	r3, r0
 800465e:	0019      	movs	r1, r3
 8004660:	4b1f      	ldr	r3, [pc, #124]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	0a1b      	lsrs	r3, r3, #8
 8004666:	227f      	movs	r2, #127	@ 0x7f
 8004668:	4013      	ands	r3, r2
 800466a:	434b      	muls	r3, r1
 800466c:	617b      	str	r3, [r7, #20]
        break;
 800466e:	e00d      	b.n	800468c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	481c      	ldr	r0, [pc, #112]	@ (80046e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004674:	f7fb fd50 	bl	8000118 <__udivsi3>
 8004678:	0003      	movs	r3, r0
 800467a:	0019      	movs	r1, r3
 800467c:	4b18      	ldr	r3, [pc, #96]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	0a1b      	lsrs	r3, r3, #8
 8004682:	227f      	movs	r2, #127	@ 0x7f
 8004684:	4013      	ands	r3, r2
 8004686:	434b      	muls	r3, r1
 8004688:	617b      	str	r3, [r7, #20]
        break;
 800468a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800468c:	4b14      	ldr	r3, [pc, #80]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	0f5b      	lsrs	r3, r3, #29
 8004692:	2207      	movs	r2, #7
 8004694:	4013      	ands	r3, r2
 8004696:	3301      	adds	r3, #1
 8004698:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	6978      	ldr	r0, [r7, #20]
 800469e:	f7fb fd3b 	bl	8000118 <__udivsi3>
 80046a2:	0003      	movs	r3, r0
 80046a4:	613b      	str	r3, [r7, #16]
 80046a6:	e015      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80046a8:	4b0d      	ldr	r3, [pc, #52]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2238      	movs	r2, #56	@ 0x38
 80046ae:	4013      	ands	r3, r2
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d103      	bne.n	80046bc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80046b4:	2380      	movs	r3, #128	@ 0x80
 80046b6:	021b      	lsls	r3, r3, #8
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	e00b      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80046bc:	4b08      	ldr	r3, [pc, #32]	@ (80046e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2238      	movs	r2, #56	@ 0x38
 80046c2:	4013      	ands	r3, r2
 80046c4:	2b18      	cmp	r3, #24
 80046c6:	d103      	bne.n	80046d0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80046c8:	23fa      	movs	r3, #250	@ 0xfa
 80046ca:	01db      	lsls	r3, r3, #7
 80046cc:	613b      	str	r3, [r7, #16]
 80046ce:	e001      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80046d4:	693b      	ldr	r3, [r7, #16]
}
 80046d6:	0018      	movs	r0, r3
 80046d8:	46bd      	mov	sp, r7
 80046da:	b006      	add	sp, #24
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	46c0      	nop			@ (mov r8, r8)
 80046e0:	40021000 	.word	0x40021000
 80046e4:	00f42400 	.word	0x00f42400
 80046e8:	007a1200 	.word	0x007a1200

080046ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046f0:	4b02      	ldr	r3, [pc, #8]	@ (80046fc <HAL_RCC_GetHCLKFreq+0x10>)
 80046f2:	681b      	ldr	r3, [r3, #0]
}
 80046f4:	0018      	movs	r0, r3
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	46c0      	nop			@ (mov r8, r8)
 80046fc:	200004f0 	.word	0x200004f0

08004700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004700:	b5b0      	push	{r4, r5, r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004704:	f7ff fff2 	bl	80046ec <HAL_RCC_GetHCLKFreq>
 8004708:	0004      	movs	r4, r0
 800470a:	f7ff faf9 	bl	8003d00 <LL_RCC_GetAPB1Prescaler>
 800470e:	0003      	movs	r3, r0
 8004710:	0b1a      	lsrs	r2, r3, #12
 8004712:	4b05      	ldr	r3, [pc, #20]	@ (8004728 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004714:	0092      	lsls	r2, r2, #2
 8004716:	58d3      	ldr	r3, [r2, r3]
 8004718:	221f      	movs	r2, #31
 800471a:	4013      	ands	r3, r2
 800471c:	40dc      	lsrs	r4, r3
 800471e:	0023      	movs	r3, r4
}
 8004720:	0018      	movs	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	bdb0      	pop	{r4, r5, r7, pc}
 8004726:	46c0      	nop			@ (mov r8, r8)
 8004728:	08008358 	.word	0x08008358

0800472c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004734:	2313      	movs	r3, #19
 8004736:	18fb      	adds	r3, r7, r3
 8004738:	2200      	movs	r2, #0
 800473a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800473c:	2312      	movs	r3, #18
 800473e:	18fb      	adds	r3, r7, r3
 8004740:	2200      	movs	r2, #0
 8004742:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	2380      	movs	r3, #128	@ 0x80
 800474a:	029b      	lsls	r3, r3, #10
 800474c:	4013      	ands	r3, r2
 800474e:	d100      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004750:	e0ad      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004752:	2011      	movs	r0, #17
 8004754:	183b      	adds	r3, r7, r0
 8004756:	2200      	movs	r2, #0
 8004758:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800475a:	4b47      	ldr	r3, [pc, #284]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800475c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800475e:	2380      	movs	r3, #128	@ 0x80
 8004760:	055b      	lsls	r3, r3, #21
 8004762:	4013      	ands	r3, r2
 8004764:	d110      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004766:	4b44      	ldr	r3, [pc, #272]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004768:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800476a:	4b43      	ldr	r3, [pc, #268]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800476c:	2180      	movs	r1, #128	@ 0x80
 800476e:	0549      	lsls	r1, r1, #21
 8004770:	430a      	orrs	r2, r1
 8004772:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004774:	4b40      	ldr	r3, [pc, #256]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004776:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004778:	2380      	movs	r3, #128	@ 0x80
 800477a:	055b      	lsls	r3, r3, #21
 800477c:	4013      	ands	r3, r2
 800477e:	60bb      	str	r3, [r7, #8]
 8004780:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004782:	183b      	adds	r3, r7, r0
 8004784:	2201      	movs	r2, #1
 8004786:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004788:	4b3c      	ldr	r3, [pc, #240]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	4b3b      	ldr	r3, [pc, #236]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800478e:	2180      	movs	r1, #128	@ 0x80
 8004790:	0049      	lsls	r1, r1, #1
 8004792:	430a      	orrs	r2, r1
 8004794:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004796:	f7fe f991 	bl	8002abc <HAL_GetTick>
 800479a:	0003      	movs	r3, r0
 800479c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800479e:	e00b      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a0:	f7fe f98c 	bl	8002abc <HAL_GetTick>
 80047a4:	0002      	movs	r2, r0
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d904      	bls.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80047ae:	2313      	movs	r3, #19
 80047b0:	18fb      	adds	r3, r7, r3
 80047b2:	2203      	movs	r2, #3
 80047b4:	701a      	strb	r2, [r3, #0]
        break;
 80047b6:	e005      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047b8:	4b30      	ldr	r3, [pc, #192]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	2380      	movs	r3, #128	@ 0x80
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	4013      	ands	r3, r2
 80047c2:	d0ed      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80047c4:	2313      	movs	r3, #19
 80047c6:	18fb      	adds	r3, r7, r3
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d15e      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80047d2:	23c0      	movs	r3, #192	@ 0xc0
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4013      	ands	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d019      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d014      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047ea:	4b23      	ldr	r3, [pc, #140]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ee:	4a24      	ldr	r2, [pc, #144]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80047f0:	4013      	ands	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047f4:	4b20      	ldr	r3, [pc, #128]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80047f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80047fa:	2180      	movs	r1, #128	@ 0x80
 80047fc:	0249      	lsls	r1, r1, #9
 80047fe:	430a      	orrs	r2, r1
 8004800:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004802:	4b1d      	ldr	r3, [pc, #116]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004804:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004806:	4b1c      	ldr	r3, [pc, #112]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004808:	491e      	ldr	r1, [pc, #120]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800480a:	400a      	ands	r2, r1
 800480c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800480e:	4b1a      	ldr	r3, [pc, #104]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2201      	movs	r2, #1
 8004818:	4013      	ands	r3, r2
 800481a:	d016      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481c:	f7fe f94e 	bl	8002abc <HAL_GetTick>
 8004820:	0003      	movs	r3, r0
 8004822:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004824:	e00c      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004826:	f7fe f949 	bl	8002abc <HAL_GetTick>
 800482a:	0002      	movs	r2, r0
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	4a15      	ldr	r2, [pc, #84]	@ (8004888 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d904      	bls.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004836:	2313      	movs	r3, #19
 8004838:	18fb      	adds	r3, r7, r3
 800483a:	2203      	movs	r2, #3
 800483c:	701a      	strb	r2, [r3, #0]
            break;
 800483e:	e004      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004840:	4b0d      	ldr	r3, [pc, #52]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004844:	2202      	movs	r2, #2
 8004846:	4013      	ands	r3, r2
 8004848:	d0ed      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800484a:	2313      	movs	r3, #19
 800484c:	18fb      	adds	r3, r7, r3
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10a      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004854:	4b08      	ldr	r3, [pc, #32]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004858:	4a09      	ldr	r2, [pc, #36]	@ (8004880 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800485a:	4013      	ands	r3, r2
 800485c:	0019      	movs	r1, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004862:	4b05      	ldr	r3, [pc, #20]	@ (8004878 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004864:	430a      	orrs	r2, r1
 8004866:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004868:	e016      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800486a:	2312      	movs	r3, #18
 800486c:	18fb      	adds	r3, r7, r3
 800486e:	2213      	movs	r2, #19
 8004870:	18ba      	adds	r2, r7, r2
 8004872:	7812      	ldrb	r2, [r2, #0]
 8004874:	701a      	strb	r2, [r3, #0]
 8004876:	e00f      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004878:	40021000 	.word	0x40021000
 800487c:	40007000 	.word	0x40007000
 8004880:	fffffcff 	.word	0xfffffcff
 8004884:	fffeffff 	.word	0xfffeffff
 8004888:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488c:	2312      	movs	r3, #18
 800488e:	18fb      	adds	r3, r7, r3
 8004890:	2213      	movs	r2, #19
 8004892:	18ba      	adds	r2, r7, r2
 8004894:	7812      	ldrb	r2, [r2, #0]
 8004896:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004898:	2311      	movs	r3, #17
 800489a:	18fb      	adds	r3, r7, r3
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d105      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a2:	4bb6      	ldr	r3, [pc, #728]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048a6:	4bb5      	ldr	r3, [pc, #724]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048a8:	49b5      	ldr	r1, [pc, #724]	@ (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80048aa:	400a      	ands	r2, r1
 80048ac:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2201      	movs	r2, #1
 80048b4:	4013      	ands	r3, r2
 80048b6:	d009      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048b8:	4bb0      	ldr	r3, [pc, #704]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048bc:	2203      	movs	r2, #3
 80048be:	4393      	bics	r3, r2
 80048c0:	0019      	movs	r1, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	4bad      	ldr	r3, [pc, #692]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048c8:	430a      	orrs	r2, r1
 80048ca:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2202      	movs	r2, #2
 80048d2:	4013      	ands	r3, r2
 80048d4:	d009      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048d6:	4ba9      	ldr	r3, [pc, #676]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048da:	220c      	movs	r2, #12
 80048dc:	4393      	bics	r3, r2
 80048de:	0019      	movs	r1, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	4ba5      	ldr	r3, [pc, #660]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048e6:	430a      	orrs	r2, r1
 80048e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2204      	movs	r2, #4
 80048f0:	4013      	ands	r3, r2
 80048f2:	d009      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048f4:	4ba1      	ldr	r3, [pc, #644]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80048f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f8:	2230      	movs	r2, #48	@ 0x30
 80048fa:	4393      	bics	r3, r2
 80048fc:	0019      	movs	r1, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	4b9e      	ldr	r3, [pc, #632]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004904:	430a      	orrs	r2, r1
 8004906:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2210      	movs	r2, #16
 800490e:	4013      	ands	r3, r2
 8004910:	d009      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004912:	4b9a      	ldr	r3, [pc, #616]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004916:	4a9b      	ldr	r2, [pc, #620]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004918:	4013      	ands	r3, r2
 800491a:	0019      	movs	r1, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	691a      	ldr	r2, [r3, #16]
 8004920:	4b96      	ldr	r3, [pc, #600]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004922:	430a      	orrs	r2, r1
 8004924:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	2380      	movs	r3, #128	@ 0x80
 800492c:	015b      	lsls	r3, r3, #5
 800492e:	4013      	ands	r3, r2
 8004930:	d009      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8004932:	4b92      	ldr	r3, [pc, #584]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004936:	4a94      	ldr	r2, [pc, #592]	@ (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004938:	4013      	ands	r3, r2
 800493a:	0019      	movs	r1, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	695a      	ldr	r2, [r3, #20]
 8004940:	4b8e      	ldr	r3, [pc, #568]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004942:	430a      	orrs	r2, r1
 8004944:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	2380      	movs	r3, #128	@ 0x80
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4013      	ands	r3, r2
 8004950:	d009      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004952:	4b8a      	ldr	r3, [pc, #552]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004956:	4a8d      	ldr	r2, [pc, #564]	@ (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004958:	4013      	ands	r3, r2
 800495a:	0019      	movs	r1, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004960:	4b86      	ldr	r3, [pc, #536]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004962:	430a      	orrs	r2, r1
 8004964:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	2380      	movs	r3, #128	@ 0x80
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	4013      	ands	r3, r2
 8004970:	d009      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004972:	4b82      	ldr	r3, [pc, #520]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004976:	4a86      	ldr	r2, [pc, #536]	@ (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004978:	4013      	ands	r3, r2
 800497a:	0019      	movs	r1, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004980:	4b7e      	ldr	r3, [pc, #504]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004982:	430a      	orrs	r2, r1
 8004984:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2220      	movs	r2, #32
 800498c:	4013      	ands	r3, r2
 800498e:	d009      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004990:	4b7a      	ldr	r3, [pc, #488]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004994:	4a7f      	ldr	r2, [pc, #508]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004996:	4013      	ands	r3, r2
 8004998:	0019      	movs	r1, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699a      	ldr	r2, [r3, #24]
 800499e:	4b77      	ldr	r3, [pc, #476]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049a0:	430a      	orrs	r2, r1
 80049a2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2240      	movs	r2, #64	@ 0x40
 80049aa:	4013      	ands	r3, r2
 80049ac:	d009      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049ae:	4b73      	ldr	r3, [pc, #460]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b2:	4a79      	ldr	r2, [pc, #484]	@ (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	0019      	movs	r1, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69da      	ldr	r2, [r3, #28]
 80049bc:	4b6f      	ldr	r3, [pc, #444]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049be:	430a      	orrs	r2, r1
 80049c0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	2380      	movs	r3, #128	@ 0x80
 80049c8:	01db      	lsls	r3, r3, #7
 80049ca:	4013      	ands	r3, r2
 80049cc:	d015      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049ce:	4b6b      	ldr	r3, [pc, #428]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	0899      	lsrs	r1, r3, #2
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049da:	4b68      	ldr	r3, [pc, #416]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049dc:	430a      	orrs	r2, r1
 80049de:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049e4:	2380      	movs	r3, #128	@ 0x80
 80049e6:	05db      	lsls	r3, r3, #23
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d106      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80049ec:	4b63      	ldr	r3, [pc, #396]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049ee:	68da      	ldr	r2, [r3, #12]
 80049f0:	4b62      	ldr	r3, [pc, #392]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80049f2:	2180      	movs	r1, #128	@ 0x80
 80049f4:	0249      	lsls	r1, r1, #9
 80049f6:	430a      	orrs	r2, r1
 80049f8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	2380      	movs	r3, #128	@ 0x80
 8004a00:	031b      	lsls	r3, r3, #12
 8004a02:	4013      	ands	r3, r2
 8004a04:	d009      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a06:	4b5d      	ldr	r3, [pc, #372]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a0a:	2240      	movs	r2, #64	@ 0x40
 8004a0c:	4393      	bics	r3, r2
 8004a0e:	0019      	movs	r1, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a14:	4b59      	ldr	r3, [pc, #356]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a16:	430a      	orrs	r2, r1
 8004a18:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	2380      	movs	r3, #128	@ 0x80
 8004a20:	039b      	lsls	r3, r3, #14
 8004a22:	4013      	ands	r3, r2
 8004a24:	d016      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a26:	4b55      	ldr	r3, [pc, #340]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a2a:	4a5c      	ldr	r2, [pc, #368]	@ (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	0019      	movs	r1, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a34:	4b51      	ldr	r3, [pc, #324]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a36:	430a      	orrs	r2, r1
 8004a38:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a3e:	2380      	movs	r3, #128	@ 0x80
 8004a40:	03db      	lsls	r3, r3, #15
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d106      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004a46:	4b4d      	ldr	r3, [pc, #308]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a48:	68da      	ldr	r2, [r3, #12]
 8004a4a:	4b4c      	ldr	r3, [pc, #304]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a4c:	2180      	movs	r1, #128	@ 0x80
 8004a4e:	0449      	lsls	r1, r1, #17
 8004a50:	430a      	orrs	r2, r1
 8004a52:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	2380      	movs	r3, #128	@ 0x80
 8004a5a:	03db      	lsls	r3, r3, #15
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	d016      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004a60:	4b46      	ldr	r3, [pc, #280]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a64:	4a4e      	ldr	r2, [pc, #312]	@ (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004a66:	4013      	ands	r3, r2
 8004a68:	0019      	movs	r1, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a6e:	4b43      	ldr	r3, [pc, #268]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a70:	430a      	orrs	r2, r1
 8004a72:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a78:	2380      	movs	r3, #128	@ 0x80
 8004a7a:	045b      	lsls	r3, r3, #17
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d106      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004a80:	4b3e      	ldr	r3, [pc, #248]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	4b3d      	ldr	r3, [pc, #244]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a86:	2180      	movs	r1, #128	@ 0x80
 8004a88:	0449      	lsls	r1, r1, #17
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	2380      	movs	r3, #128	@ 0x80
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	4013      	ands	r3, r2
 8004a98:	d014      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004a9a:	4b38      	ldr	r3, [pc, #224]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a9e:	2203      	movs	r2, #3
 8004aa0:	4393      	bics	r3, r2
 8004aa2:	0019      	movs	r1, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a1a      	ldr	r2, [r3, #32]
 8004aa8:	4b34      	ldr	r3, [pc, #208]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d106      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004ab6:	4b31      	ldr	r3, [pc, #196]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	4b30      	ldr	r3, [pc, #192]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004abc:	2180      	movs	r1, #128	@ 0x80
 8004abe:	0249      	lsls	r1, r1, #9
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	2380      	movs	r3, #128	@ 0x80
 8004aca:	019b      	lsls	r3, r3, #6
 8004acc:	4013      	ands	r3, r2
 8004ace:	d014      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ad4:	220c      	movs	r2, #12
 8004ad6:	4393      	bics	r3, r2
 8004ad8:	0019      	movs	r1, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ade:	4b27      	ldr	r3, [pc, #156]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d106      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004aec:	4b23      	ldr	r3, [pc, #140]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	4b22      	ldr	r3, [pc, #136]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004af2:	2180      	movs	r1, #128	@ 0x80
 8004af4:	0249      	lsls	r1, r1, #9
 8004af6:	430a      	orrs	r2, r1
 8004af8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	2380      	movs	r3, #128	@ 0x80
 8004b00:	045b      	lsls	r3, r3, #17
 8004b02:	4013      	ands	r3, r2
 8004b04:	d016      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b06:	4b1d      	ldr	r3, [pc, #116]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b0a:	4a22      	ldr	r2, [pc, #136]	@ (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	0019      	movs	r1, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b14:	4b19      	ldr	r3, [pc, #100]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b16:	430a      	orrs	r2, r1
 8004b18:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b1e:	2380      	movs	r3, #128	@ 0x80
 8004b20:	019b      	lsls	r3, r3, #6
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d106      	bne.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004b26:	4b15      	ldr	r3, [pc, #84]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	4b14      	ldr	r3, [pc, #80]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b2c:	2180      	movs	r1, #128	@ 0x80
 8004b2e:	0449      	lsls	r1, r1, #17
 8004b30:	430a      	orrs	r2, r1
 8004b32:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	2380      	movs	r3, #128	@ 0x80
 8004b3a:	049b      	lsls	r3, r3, #18
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	d016      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b40:	4b0e      	ldr	r3, [pc, #56]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b44:	4a10      	ldr	r2, [pc, #64]	@ (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004b46:	4013      	ands	r3, r2
 8004b48:	0019      	movs	r1, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b50:	430a      	orrs	r2, r1
 8004b52:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b58:	2380      	movs	r3, #128	@ 0x80
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d106      	bne.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004b60:	4b06      	ldr	r3, [pc, #24]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b62:	68da      	ldr	r2, [r3, #12]
 8004b64:	4b05      	ldr	r3, [pc, #20]	@ (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b66:	2180      	movs	r1, #128	@ 0x80
 8004b68:	0449      	lsls	r1, r1, #17
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004b6e:	2312      	movs	r3, #18
 8004b70:	18fb      	adds	r3, r7, r3
 8004b72:	781b      	ldrb	r3, [r3, #0]
}
 8004b74:	0018      	movs	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	b006      	add	sp, #24
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40021000 	.word	0x40021000
 8004b80:	efffffff 	.word	0xefffffff
 8004b84:	fffff3ff 	.word	0xfffff3ff
 8004b88:	fffffcff 	.word	0xfffffcff
 8004b8c:	fff3ffff 	.word	0xfff3ffff
 8004b90:	ffcfffff 	.word	0xffcfffff
 8004b94:	ffffcfff 	.word	0xffffcfff
 8004b98:	ffff3fff 	.word	0xffff3fff
 8004b9c:	ffbfffff 	.word	0xffbfffff
 8004ba0:	feffffff 	.word	0xfeffffff

08004ba4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004ba4:	b590      	push	{r4, r7, lr}
 8004ba6:	b089      	sub	sp, #36	@ 0x24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2228      	movs	r2, #40	@ 0x28
 8004bb4:	5c9b      	ldrb	r3, [r3, r2]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d101      	bne.n	8004bbe <HAL_RTC_SetAlarm_IT+0x1a>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	e127      	b.n	8004e0e <HAL_RTC_SetAlarm_IT+0x26a>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2228      	movs	r2, #40	@ 0x28
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2229      	movs	r2, #41	@ 0x29
 8004bca:	2102      	movs	r1, #2
 8004bcc:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d136      	bne.n	8004c42 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	2240      	movs	r2, #64	@ 0x40
 8004bdc:	4013      	ands	r3, r2
 8004bde:	d102      	bne.n	8004be6 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2200      	movs	r2, #0
 8004be4:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	0018      	movs	r0, r3
 8004bec:	f000 fa1e 	bl	800502c <RTC_ByteToBcd2>
 8004bf0:	0003      	movs	r3, r0
 8004bf2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	785b      	ldrb	r3, [r3, #1]
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f000 fa17 	bl	800502c <RTC_ByteToBcd2>
 8004bfe:	0003      	movs	r3, r0
 8004c00:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c02:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	789b      	ldrb	r3, [r3, #2]
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f000 fa0f 	bl	800502c <RTC_ByteToBcd2>
 8004c0e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004c10:	0022      	movs	r2, r4
 8004c12:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	78db      	ldrb	r3, [r3, #3]
 8004c18:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2220      	movs	r2, #32
 8004c22:	5c9b      	ldrb	r3, [r3, r2]
 8004c24:	0018      	movs	r0, r3
 8004c26:	f000 fa01 	bl	800502c <RTC_ByteToBcd2>
 8004c2a:	0003      	movs	r3, r0
 8004c2c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004c2e:	0022      	movs	r2, r4
 8004c30:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004c36:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	61fb      	str	r3, [r7, #28]
 8004c40:	e022      	b.n	8004c88 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	2240      	movs	r2, #64	@ 0x40
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d102      	bne.n	8004c54 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	2200      	movs	r2, #0
 8004c52:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	785b      	ldrb	r3, [r3, #1]
 8004c5e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c60:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004c66:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	78db      	ldrb	r3, [r3, #3]
 8004c6c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004c6e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2120      	movs	r1, #32
 8004c74:	5c5b      	ldrb	r3, [r3, r1]
 8004c76:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004c78:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004c7e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004c84:	4313      	orrs	r3, r2
 8004c86:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	22ca      	movs	r2, #202	@ 0xca
 8004c9a:	625a      	str	r2, [r3, #36]	@ 0x24
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2253      	movs	r2, #83	@ 0x53
 8004ca2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ca8:	2380      	movs	r3, #128	@ 0x80
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d14c      	bne.n	8004d4a <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4957      	ldr	r1, [pc, #348]	@ (8004e18 <HAL_RTC_SetAlarm_IT+0x274>)
 8004cbc:	400a      	ands	r2, r1
 8004cbe:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2101      	movs	r1, #1
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004cd0:	f7fd fef4 	bl	8002abc <HAL_GetTick>
 8004cd4:	0003      	movs	r3, r0
 8004cd6:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004cd8:	e016      	b.n	8004d08 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004cda:	f7fd feef 	bl	8002abc <HAL_GetTick>
 8004cde:	0002      	movs	r2, r0
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	1ad2      	subs	r2, r2, r3
 8004ce4:	23fa      	movs	r3, #250	@ 0xfa
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d90d      	bls.n	8004d08 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	22ff      	movs	r2, #255	@ 0xff
 8004cf2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2229      	movs	r2, #41	@ 0x29
 8004cf8:	2103      	movs	r1, #3
 8004cfa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2228      	movs	r2, #40	@ 0x28
 8004d00:	2100      	movs	r1, #0
 8004d02:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e082      	b.n	8004e0e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	4013      	ands	r3, r2
 8004d12:	d0e2      	beq.n	8004cda <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	69fa      	ldr	r2, [r7, #28]
 8004d1a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699a      	ldr	r2, [r3, #24]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2180      	movs	r1, #128	@ 0x80
 8004d30:	0049      	lsls	r1, r1, #1
 8004d32:	430a      	orrs	r2, r1
 8004d34:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699a      	ldr	r2, [r3, #24]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2180      	movs	r1, #128	@ 0x80
 8004d42:	0149      	lsls	r1, r1, #5
 8004d44:	430a      	orrs	r2, r1
 8004d46:	619a      	str	r2, [r3, #24]
 8004d48:	e04b      	b.n	8004de2 <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	699a      	ldr	r2, [r3, #24]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4931      	ldr	r1, [pc, #196]	@ (8004e1c <HAL_RTC_SetAlarm_IT+0x278>)
 8004d56:	400a      	ands	r2, r1
 8004d58:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2102      	movs	r1, #2
 8004d66:	430a      	orrs	r2, r1
 8004d68:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8004d6a:	f7fd fea7 	bl	8002abc <HAL_GetTick>
 8004d6e:	0003      	movs	r3, r0
 8004d70:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004d72:	e016      	b.n	8004da2 <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004d74:	f7fd fea2 	bl	8002abc <HAL_GetTick>
 8004d78:	0002      	movs	r2, r0
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	1ad2      	subs	r2, r2, r3
 8004d7e:	23fa      	movs	r3, #250	@ 0xfa
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d90d      	bls.n	8004da2 <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	22ff      	movs	r2, #255	@ 0xff
 8004d8c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2229      	movs	r2, #41	@ 0x29
 8004d92:	2103      	movs	r1, #3
 8004d94:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2228      	movs	r2, #40	@ 0x28
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e035      	b.n	8004e0e <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	2202      	movs	r2, #2
 8004daa:	4013      	ands	r3, r2
 8004dac:	d0e2      	beq.n	8004d74 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	699a      	ldr	r2, [r3, #24]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2180      	movs	r1, #128	@ 0x80
 8004dca:	0089      	lsls	r1, r1, #2
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699a      	ldr	r2, [r3, #24]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2180      	movs	r1, #128	@ 0x80
 8004ddc:	0189      	lsls	r1, r1, #6
 8004dde:	430a      	orrs	r2, r1
 8004de0:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004de2:	4a0f      	ldr	r2, [pc, #60]	@ (8004e20 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004de4:	2380      	movs	r3, #128	@ 0x80
 8004de6:	58d3      	ldr	r3, [r2, r3]
 8004de8:	490d      	ldr	r1, [pc, #52]	@ (8004e20 <HAL_RTC_SetAlarm_IT+0x27c>)
 8004dea:	2280      	movs	r2, #128	@ 0x80
 8004dec:	0312      	lsls	r2, r2, #12
 8004dee:	4313      	orrs	r3, r2
 8004df0:	2280      	movs	r2, #128	@ 0x80
 8004df2:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	22ff      	movs	r2, #255	@ 0xff
 8004dfa:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2229      	movs	r2, #41	@ 0x29
 8004e00:	2101      	movs	r1, #1
 8004e02:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2228      	movs	r2, #40	@ 0x28
 8004e08:	2100      	movs	r1, #0
 8004e0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	0018      	movs	r0, r3
 8004e10:	46bd      	mov	sp, r7
 8004e12:	b009      	add	sp, #36	@ 0x24
 8004e14:	bd90      	pop	{r4, r7, pc}
 8004e16:	46c0      	nop			@ (mov r8, r8)
 8004e18:	fffffeff 	.word	0xfffffeff
 8004e1c:	fffffdff 	.word	0xfffffdff
 8004e20:	40021800 	.word	0x40021800

08004e24 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
 8004e30:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if(Alarm == RTC_ALARM_A)
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	2380      	movs	r3, #128	@ 0x80
 8004e36:	005b      	lsls	r3, r3, #1
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d144      	bne.n	8004ec6 <HAL_RTC_GetAlarm+0xa2>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2280      	movs	r2, #128	@ 0x80
 8004e40:	0052      	lsls	r2, r2, #1
 8004e42:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4a:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e52:	045b      	lsls	r3, r3, #17
 8004e54:	0c5b      	lsrs	r3, r3, #17
 8004e56:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	0c1b      	lsrs	r3, r3, #16
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	223f      	movs	r2, #63	@ 0x3f
 8004e60:	4013      	ands	r3, r2
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	0a1b      	lsrs	r3, r3, #8
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	227f      	movs	r2, #127	@ 0x7f
 8004e70:	4013      	ands	r3, r2
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	227f      	movs	r2, #127	@ 0x7f
 8004e7e:	4013      	ands	r3, r2
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	0d9b      	lsrs	r3, r3, #22
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	4013      	ands	r3, r2
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	0e1b      	lsrs	r3, r3, #24
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	223f      	movs	r2, #63	@ 0x3f
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	b2d9      	uxtb	r1, r3
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	2380      	movs	r3, #128	@ 0x80
 8004eb2:	05db      	lsls	r3, r3, #23
 8004eb4:	401a      	ands	r2, r3
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	4a3b      	ldr	r2, [pc, #236]	@ (8004fac <HAL_RTC_GetAlarm+0x188>)
 8004ebe:	401a      	ands	r2, r3
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	615a      	str	r2, [r3, #20]
 8004ec4:	e043      	b.n	8004f4e <HAL_RTC_GetAlarm+0x12a>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2280      	movs	r2, #128	@ 0x80
 8004eca:	0092      	lsls	r2, r2, #2
 8004ecc:	625a      	str	r2, [r3, #36]	@ 0x24

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ed4:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004edc:	045b      	lsls	r3, r3, #17
 8004ede:	0c5b      	lsrs	r3, r3, #17
 8004ee0:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	0c1b      	lsrs	r3, r3, #16
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	223f      	movs	r2, #63	@ 0x3f
 8004eea:	4013      	ands	r3, r2
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	0a1b      	lsrs	r3, r3, #8
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	227f      	movs	r2, #127	@ 0x7f
 8004efa:	4013      	ands	r3, r2
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	227f      	movs	r2, #127	@ 0x7f
 8004f08:	4013      	ands	r3, r2
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	0d9b      	lsrs	r3, r3, #22
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2201      	movs	r2, #1
 8004f18:	4013      	ands	r3, r2
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	0e1b      	lsrs	r3, r3, #24
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	223f      	movs	r2, #63	@ 0x3f
 8004f2e:	4013      	ands	r3, r2
 8004f30:	b2d9      	uxtb	r1, r3
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2220      	movs	r2, #32
 8004f36:	5499      	strb	r1, [r3, r2]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	2380      	movs	r3, #128	@ 0x80
 8004f3c:	05db      	lsls	r3, r3, #23
 8004f3e:	401a      	ands	r2, r3
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	4a19      	ldr	r2, [pc, #100]	@ (8004fac <HAL_RTC_GetAlarm+0x188>)
 8004f48:	401a      	ands	r2, r3
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	615a      	str	r2, [r3, #20]
  }

  if(Format == RTC_FORMAT_BIN)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d125      	bne.n	8004fa0 <HAL_RTC_GetAlarm+0x17c>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	0018      	movs	r0, r3
 8004f5a:	f000 f88f 	bl	800507c <RTC_Bcd2ToByte>
 8004f5e:	0003      	movs	r3, r0
 8004f60:	001a      	movs	r2, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	785b      	ldrb	r3, [r3, #1]
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	f000 f886 	bl	800507c <RTC_Bcd2ToByte>
 8004f70:	0003      	movs	r3, r0
 8004f72:	001a      	movs	r2, r3
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	789b      	ldrb	r3, [r3, #2]
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	f000 f87d 	bl	800507c <RTC_Bcd2ToByte>
 8004f82:	0003      	movs	r3, r0
 8004f84:	001a      	movs	r2, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	5c9b      	ldrb	r3, [r3, r2]
 8004f90:	0018      	movs	r0, r3
 8004f92:	f000 f873 	bl	800507c <RTC_Bcd2ToByte>
 8004f96:	0003      	movs	r3, r0
 8004f98:	0019      	movs	r1, r3
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	b006      	add	sp, #24
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	46c0      	nop			@ (mov r8, r8)
 8004fac:	80808080 	.word	0x80808080

08004fb0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699a      	ldr	r2, [r3, #24]
 8004fbe:	2380      	movs	r3, #128	@ 0x80
 8004fc0:	015b      	lsls	r3, r3, #5
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	d011      	beq.n	8004fea <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fcc:	2201      	movs	r2, #1
 8004fce:	4013      	ands	r3, r2
 8004fd0:	d00b      	beq.n	8004fea <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2101      	movs	r1, #1
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	f7fd fa43 	bl	8002470 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	699a      	ldr	r2, [r3, #24]
 8004ff0:	2380      	movs	r3, #128	@ 0x80
 8004ff2:	019b      	lsls	r3, r3, #6
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d011      	beq.n	800501c <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ffe:	2202      	movs	r2, #2
 8005000:	4013      	ands	r3, r2
 8005002:	d00b      	beq.n	800501c <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2102      	movs	r1, #2
 8005010:	430a      	orrs	r2, r1
 8005012:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	0018      	movs	r0, r3
 8005018:	f000 f873 	bl	8005102 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2229      	movs	r2, #41	@ 0x29
 8005020:	2101      	movs	r1, #1
 8005022:	5499      	strb	r1, [r3, r2]
}
 8005024:	46c0      	nop			@ (mov r8, r8)
 8005026:	46bd      	mov	sp, r7
 8005028:	b002      	add	sp, #8
 800502a:	bd80      	pop	{r7, pc}

0800502c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	0002      	movs	r2, r0
 8005034:	1dfb      	adds	r3, r7, #7
 8005036:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800503c:	230b      	movs	r3, #11
 800503e:	18fb      	adds	r3, r7, r3
 8005040:	1dfa      	adds	r2, r7, #7
 8005042:	7812      	ldrb	r2, [r2, #0]
 8005044:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8005046:	e008      	b.n	800505a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	3301      	adds	r3, #1
 800504c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800504e:	220b      	movs	r2, #11
 8005050:	18bb      	adds	r3, r7, r2
 8005052:	18ba      	adds	r2, r7, r2
 8005054:	7812      	ldrb	r2, [r2, #0]
 8005056:	3a0a      	subs	r2, #10
 8005058:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800505a:	210b      	movs	r1, #11
 800505c:	187b      	adds	r3, r7, r1
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	2b09      	cmp	r3, #9
 8005062:	d8f1      	bhi.n	8005048 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	b2db      	uxtb	r3, r3
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	b2da      	uxtb	r2, r3
 800506c:	187b      	adds	r3, r7, r1
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	4313      	orrs	r3, r2
 8005072:	b2db      	uxtb	r3, r3
}
 8005074:	0018      	movs	r0, r3
 8005076:	46bd      	mov	sp, r7
 8005078:	b004      	add	sp, #16
 800507a:	bd80      	pop	{r7, pc}

0800507c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	0002      	movs	r2, r0
 8005084:	1dfb      	adds	r3, r7, #7
 8005086:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005088:	1dfb      	adds	r3, r7, #7
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	091b      	lsrs	r3, r3, #4
 800508e:	b2db      	uxtb	r3, r3
 8005090:	001a      	movs	r2, r3
 8005092:	0013      	movs	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	189b      	adds	r3, r3, r2
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	b2da      	uxtb	r2, r3
 80050a0:	1dfb      	adds	r3, r7, #7
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	210f      	movs	r1, #15
 80050a6:	400b      	ands	r3, r1
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	18d3      	adds	r3, r2, r3
 80050ac:	b2db      	uxtb	r3, r3
}
 80050ae:	0018      	movs	r0, r3
 80050b0:	46bd      	mov	sp, r7
 80050b2:	b004      	add	sp, #16
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050c4:	2204      	movs	r2, #4
 80050c6:	4013      	ands	r3, r2
 80050c8:	d00b      	beq.n	80050e2 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2104      	movs	r1, #4
 80050d6:	430a      	orrs	r2, r1
 80050d8:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	0018      	movs	r0, r3
 80050de:	f000 f808 	bl	80050f2 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2229      	movs	r2, #41	@ 0x29
 80050e6:	2101      	movs	r1, #1
 80050e8:	5499      	strb	r1, [r3, r2]
}
 80050ea:	46c0      	nop			@ (mov r8, r8)
 80050ec:	46bd      	mov	sp, r7
 80050ee:	b002      	add	sp, #8
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b082      	sub	sp, #8
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80050fa:	46c0      	nop			@ (mov r8, r8)
 80050fc:	46bd      	mov	sp, r7
 80050fe:	b002      	add	sp, #8
 8005100:	bd80      	pop	{r7, pc}

08005102 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b082      	sub	sp, #8
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800510a:	46c0      	nop			@ (mov r8, r8)
 800510c:	46bd      	mov	sp, r7
 800510e:	b002      	add	sp, #8
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e0a8      	b.n	8005278 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512a:	2b00      	cmp	r3, #0
 800512c:	d109      	bne.n	8005142 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	2382      	movs	r3, #130	@ 0x82
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	429a      	cmp	r2, r3
 8005138:	d009      	beq.n	800514e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	61da      	str	r2, [r3, #28]
 8005140:	e005      	b.n	800514e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	225d      	movs	r2, #93	@ 0x5d
 8005158:	5c9b      	ldrb	r3, [r3, r2]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	d107      	bne.n	8005170 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	225c      	movs	r2, #92	@ 0x5c
 8005164:	2100      	movs	r1, #0
 8005166:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	0018      	movs	r0, r3
 800516c:	f7fd fa4a 	bl	8002604 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	225d      	movs	r2, #93	@ 0x5d
 8005174:	2102      	movs	r1, #2
 8005176:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2140      	movs	r1, #64	@ 0x40
 8005184:	438a      	bics	r2, r1
 8005186:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	23e0      	movs	r3, #224	@ 0xe0
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	429a      	cmp	r2, r3
 8005192:	d902      	bls.n	800519a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005194:	2300      	movs	r3, #0
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	e002      	b.n	80051a0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800519a:	2380      	movs	r3, #128	@ 0x80
 800519c:	015b      	lsls	r3, r3, #5
 800519e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	23f0      	movs	r3, #240	@ 0xf0
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d008      	beq.n	80051be <HAL_SPI_Init+0xaa>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	23e0      	movs	r3, #224	@ 0xe0
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d002      	beq.n	80051be <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	2382      	movs	r3, #130	@ 0x82
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	401a      	ands	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6899      	ldr	r1, [r3, #8]
 80051cc:	2384      	movs	r3, #132	@ 0x84
 80051ce:	021b      	lsls	r3, r3, #8
 80051d0:	400b      	ands	r3, r1
 80051d2:	431a      	orrs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	2102      	movs	r1, #2
 80051da:	400b      	ands	r3, r1
 80051dc:	431a      	orrs	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	2101      	movs	r1, #1
 80051e4:	400b      	ands	r3, r1
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6999      	ldr	r1, [r3, #24]
 80051ec:	2380      	movs	r3, #128	@ 0x80
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	400b      	ands	r3, r1
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	2138      	movs	r1, #56	@ 0x38
 80051fa:	400b      	ands	r3, r1
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	2180      	movs	r1, #128	@ 0x80
 8005204:	400b      	ands	r3, r1
 8005206:	431a      	orrs	r2, r3
 8005208:	0011      	movs	r1, r2
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800520e:	2380      	movs	r3, #128	@ 0x80
 8005210:	019b      	lsls	r3, r3, #6
 8005212:	401a      	ands	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	0c1b      	lsrs	r3, r3, #16
 8005222:	2204      	movs	r2, #4
 8005224:	401a      	ands	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522a:	2110      	movs	r1, #16
 800522c:	400b      	ands	r3, r1
 800522e:	431a      	orrs	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005234:	2108      	movs	r1, #8
 8005236:	400b      	ands	r3, r1
 8005238:	431a      	orrs	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68d9      	ldr	r1, [r3, #12]
 800523e:	23f0      	movs	r3, #240	@ 0xf0
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	400b      	ands	r3, r1
 8005244:	431a      	orrs	r2, r3
 8005246:	0011      	movs	r1, r2
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	2380      	movs	r3, #128	@ 0x80
 800524c:	015b      	lsls	r3, r3, #5
 800524e:	401a      	ands	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	69da      	ldr	r2, [r3, #28]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4907      	ldr	r1, [pc, #28]	@ (8005280 <HAL_SPI_Init+0x16c>)
 8005264:	400a      	ands	r2, r1
 8005266:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	225d      	movs	r2, #93	@ 0x5d
 8005272:	2101      	movs	r1, #1
 8005274:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	0018      	movs	r0, r3
 800527a:	46bd      	mov	sp, r7
 800527c:	b004      	add	sp, #16
 800527e:	bd80      	pop	{r7, pc}
 8005280:	fffff7ff 	.word	0xfffff7ff

08005284 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	603b      	str	r3, [r7, #0]
 8005290:	1dbb      	adds	r3, r7, #6
 8005292:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005294:	231f      	movs	r3, #31
 8005296:	18fb      	adds	r3, r7, r3
 8005298:	2200      	movs	r2, #0
 800529a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	225c      	movs	r2, #92	@ 0x5c
 80052a0:	5c9b      	ldrb	r3, [r3, r2]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d101      	bne.n	80052aa <HAL_SPI_Transmit+0x26>
 80052a6:	2302      	movs	r3, #2
 80052a8:	e147      	b.n	800553a <HAL_SPI_Transmit+0x2b6>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	225c      	movs	r2, #92	@ 0x5c
 80052ae:	2101      	movs	r1, #1
 80052b0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052b2:	f7fd fc03 	bl	8002abc <HAL_GetTick>
 80052b6:	0003      	movs	r3, r0
 80052b8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80052ba:	2316      	movs	r3, #22
 80052bc:	18fb      	adds	r3, r7, r3
 80052be:	1dba      	adds	r2, r7, #6
 80052c0:	8812      	ldrh	r2, [r2, #0]
 80052c2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	225d      	movs	r2, #93	@ 0x5d
 80052c8:	5c9b      	ldrb	r3, [r3, r2]
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d004      	beq.n	80052da <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80052d0:	231f      	movs	r3, #31
 80052d2:	18fb      	adds	r3, r7, r3
 80052d4:	2202      	movs	r2, #2
 80052d6:	701a      	strb	r2, [r3, #0]
    goto error;
 80052d8:	e128      	b.n	800552c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <HAL_SPI_Transmit+0x64>
 80052e0:	1dbb      	adds	r3, r7, #6
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d104      	bne.n	80052f2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80052e8:	231f      	movs	r3, #31
 80052ea:	18fb      	adds	r3, r7, r3
 80052ec:	2201      	movs	r2, #1
 80052ee:	701a      	strb	r2, [r3, #0]
    goto error;
 80052f0:	e11c      	b.n	800552c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	225d      	movs	r2, #93	@ 0x5d
 80052f6:	2103      	movs	r1, #3
 80052f8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	1dba      	adds	r2, r7, #6
 800530a:	8812      	ldrh	r2, [r2, #0]
 800530c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	1dba      	adds	r2, r7, #6
 8005312:	8812      	ldrh	r2, [r2, #0]
 8005314:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2244      	movs	r2, #68	@ 0x44
 8005320:	2100      	movs	r1, #0
 8005322:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2246      	movs	r2, #70	@ 0x46
 8005328:	2100      	movs	r1, #0
 800532a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	2380      	movs	r3, #128	@ 0x80
 800533e:	021b      	lsls	r3, r3, #8
 8005340:	429a      	cmp	r2, r3
 8005342:	d110      	bne.n	8005366 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2140      	movs	r1, #64	@ 0x40
 8005350:	438a      	bics	r2, r1
 8005352:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2180      	movs	r1, #128	@ 0x80
 8005360:	01c9      	lsls	r1, r1, #7
 8005362:	430a      	orrs	r2, r1
 8005364:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2240      	movs	r2, #64	@ 0x40
 800536e:	4013      	ands	r3, r2
 8005370:	2b40      	cmp	r3, #64	@ 0x40
 8005372:	d007      	beq.n	8005384 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2140      	movs	r1, #64	@ 0x40
 8005380:	430a      	orrs	r2, r1
 8005382:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	23e0      	movs	r3, #224	@ 0xe0
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	429a      	cmp	r2, r3
 800538e:	d952      	bls.n	8005436 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d004      	beq.n	80053a2 <HAL_SPI_Transmit+0x11e>
 8005398:	2316      	movs	r3, #22
 800539a:	18fb      	adds	r3, r7, r3
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d143      	bne.n	800542a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a6:	881a      	ldrh	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b2:	1c9a      	adds	r2, r3, #2
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053bc:	b29b      	uxth	r3, r3
 80053be:	3b01      	subs	r3, #1
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80053c6:	e030      	b.n	800542a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	2202      	movs	r2, #2
 80053d0:	4013      	ands	r3, r2
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d112      	bne.n	80053fc <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053da:	881a      	ldrh	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e6:	1c9a      	adds	r2, r3, #2
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	3b01      	subs	r3, #1
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80053fa:	e016      	b.n	800542a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053fc:	f7fd fb5e 	bl	8002abc <HAL_GetTick>
 8005400:	0002      	movs	r2, r0
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d802      	bhi.n	8005412 <HAL_SPI_Transmit+0x18e>
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	3301      	adds	r3, #1
 8005410:	d102      	bne.n	8005418 <HAL_SPI_Transmit+0x194>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d108      	bne.n	800542a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8005418:	231f      	movs	r3, #31
 800541a:	18fb      	adds	r3, r7, r3
 800541c:	2203      	movs	r2, #3
 800541e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	225d      	movs	r2, #93	@ 0x5d
 8005424:	2101      	movs	r1, #1
 8005426:	5499      	strb	r1, [r3, r2]
          goto error;
 8005428:	e080      	b.n	800552c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800542e:	b29b      	uxth	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1c9      	bne.n	80053c8 <HAL_SPI_Transmit+0x144>
 8005434:	e053      	b.n	80054de <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d004      	beq.n	8005448 <HAL_SPI_Transmit+0x1c4>
 800543e:	2316      	movs	r3, #22
 8005440:	18fb      	adds	r3, r7, r3
 8005442:	881b      	ldrh	r3, [r3, #0]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d145      	bne.n	80054d4 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	330c      	adds	r3, #12
 8005452:	7812      	ldrb	r2, [r2, #0]
 8005454:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005464:	b29b      	uxth	r3, r3
 8005466:	3b01      	subs	r3, #1
 8005468:	b29a      	uxth	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800546e:	e031      	b.n	80054d4 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	2202      	movs	r2, #2
 8005478:	4013      	ands	r3, r2
 800547a:	2b02      	cmp	r3, #2
 800547c:	d113      	bne.n	80054a6 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	330c      	adds	r3, #12
 8005488:	7812      	ldrb	r2, [r2, #0]
 800548a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800549a:	b29b      	uxth	r3, r3
 800549c:	3b01      	subs	r3, #1
 800549e:	b29a      	uxth	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80054a4:	e016      	b.n	80054d4 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054a6:	f7fd fb09 	bl	8002abc <HAL_GetTick>
 80054aa:	0002      	movs	r2, r0
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d802      	bhi.n	80054bc <HAL_SPI_Transmit+0x238>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	3301      	adds	r3, #1
 80054ba:	d102      	bne.n	80054c2 <HAL_SPI_Transmit+0x23e>
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d108      	bne.n	80054d4 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80054c2:	231f      	movs	r3, #31
 80054c4:	18fb      	adds	r3, r7, r3
 80054c6:	2203      	movs	r2, #3
 80054c8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	225d      	movs	r2, #93	@ 0x5d
 80054ce:	2101      	movs	r1, #1
 80054d0:	5499      	strb	r1, [r3, r2]
          goto error;
 80054d2:	e02b      	b.n	800552c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054d8:	b29b      	uxth	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1c8      	bne.n	8005470 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	6839      	ldr	r1, [r7, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	0018      	movs	r0, r3
 80054e6:	f000 f95d 	bl	80057a4 <SPI_EndRxTxTransaction>
 80054ea:	1e03      	subs	r3, r0, #0
 80054ec:	d002      	beq.n	80054f4 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2220      	movs	r2, #32
 80054f2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10a      	bne.n	8005512 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054fc:	2300      	movs	r3, #0
 80054fe:	613b      	str	r3, [r7, #16]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	613b      	str	r3, [r7, #16]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	613b      	str	r3, [r7, #16]
 8005510:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005516:	2b00      	cmp	r3, #0
 8005518:	d004      	beq.n	8005524 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800551a:	231f      	movs	r3, #31
 800551c:	18fb      	adds	r3, r7, r3
 800551e:	2201      	movs	r2, #1
 8005520:	701a      	strb	r2, [r3, #0]
 8005522:	e003      	b.n	800552c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	225d      	movs	r2, #93	@ 0x5d
 8005528:	2101      	movs	r1, #1
 800552a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	225c      	movs	r2, #92	@ 0x5c
 8005530:	2100      	movs	r1, #0
 8005532:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005534:	231f      	movs	r3, #31
 8005536:	18fb      	adds	r3, r7, r3
 8005538:	781b      	ldrb	r3, [r3, #0]
}
 800553a:	0018      	movs	r0, r3
 800553c:	46bd      	mov	sp, r7
 800553e:	b008      	add	sp, #32
 8005540:	bd80      	pop	{r7, pc}
	...

08005544 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	603b      	str	r3, [r7, #0]
 8005550:	1dfb      	adds	r3, r7, #7
 8005552:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005554:	f7fd fab2 	bl	8002abc <HAL_GetTick>
 8005558:	0002      	movs	r2, r0
 800555a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555c:	1a9b      	subs	r3, r3, r2
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	18d3      	adds	r3, r2, r3
 8005562:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005564:	f7fd faaa 	bl	8002abc <HAL_GetTick>
 8005568:	0003      	movs	r3, r0
 800556a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800556c:	4b3a      	ldr	r3, [pc, #232]	@ (8005658 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	015b      	lsls	r3, r3, #5
 8005572:	0d1b      	lsrs	r3, r3, #20
 8005574:	69fa      	ldr	r2, [r7, #28]
 8005576:	4353      	muls	r3, r2
 8005578:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800557a:	e058      	b.n	800562e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	3301      	adds	r3, #1
 8005580:	d055      	beq.n	800562e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005582:	f7fd fa9b 	bl	8002abc <HAL_GetTick>
 8005586:	0002      	movs	r2, r0
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	69fa      	ldr	r2, [r7, #28]
 800558e:	429a      	cmp	r2, r3
 8005590:	d902      	bls.n	8005598 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d142      	bne.n	800561e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	21e0      	movs	r1, #224	@ 0xe0
 80055a4:	438a      	bics	r2, r1
 80055a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	685a      	ldr	r2, [r3, #4]
 80055ac:	2382      	movs	r3, #130	@ 0x82
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d113      	bne.n	80055dc <SPI_WaitFlagStateUntilTimeout+0x98>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	2380      	movs	r3, #128	@ 0x80
 80055ba:	021b      	lsls	r3, r3, #8
 80055bc:	429a      	cmp	r2, r3
 80055be:	d005      	beq.n	80055cc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	2380      	movs	r3, #128	@ 0x80
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d107      	bne.n	80055dc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2140      	movs	r1, #64	@ 0x40
 80055d8:	438a      	bics	r2, r1
 80055da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055e0:	2380      	movs	r3, #128	@ 0x80
 80055e2:	019b      	lsls	r3, r3, #6
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d110      	bne.n	800560a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	491a      	ldr	r1, [pc, #104]	@ (800565c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80055f4:	400a      	ands	r2, r1
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2180      	movs	r1, #128	@ 0x80
 8005604:	0189      	lsls	r1, r1, #6
 8005606:	430a      	orrs	r2, r1
 8005608:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	225d      	movs	r2, #93	@ 0x5d
 800560e:	2101      	movs	r1, #1
 8005610:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	225c      	movs	r2, #92	@ 0x5c
 8005616:	2100      	movs	r1, #0
 8005618:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e017      	b.n	800564e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	3b01      	subs	r3, #1
 800562c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	4013      	ands	r3, r2
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	425a      	negs	r2, r3
 800563e:	4153      	adcs	r3, r2
 8005640:	b2db      	uxtb	r3, r3
 8005642:	001a      	movs	r2, r3
 8005644:	1dfb      	adds	r3, r7, #7
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	d197      	bne.n	800557c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	0018      	movs	r0, r3
 8005650:	46bd      	mov	sp, r7
 8005652:	b008      	add	sp, #32
 8005654:	bd80      	pop	{r7, pc}
 8005656:	46c0      	nop			@ (mov r8, r8)
 8005658:	200004f0 	.word	0x200004f0
 800565c:	ffffdfff 	.word	0xffffdfff

08005660 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b08a      	sub	sp, #40	@ 0x28
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
 800566c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800566e:	2317      	movs	r3, #23
 8005670:	18fb      	adds	r3, r7, r3
 8005672:	2200      	movs	r2, #0
 8005674:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005676:	f7fd fa21 	bl	8002abc <HAL_GetTick>
 800567a:	0002      	movs	r2, r0
 800567c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567e:	1a9b      	subs	r3, r3, r2
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	18d3      	adds	r3, r2, r3
 8005684:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005686:	f7fd fa19 	bl	8002abc <HAL_GetTick>
 800568a:	0003      	movs	r3, r0
 800568c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	330c      	adds	r3, #12
 8005694:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005696:	4b41      	ldr	r3, [pc, #260]	@ (800579c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	0013      	movs	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	189b      	adds	r3, r3, r2
 80056a0:	00da      	lsls	r2, r3, #3
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	0d1b      	lsrs	r3, r3, #20
 80056a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056a8:	4353      	muls	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80056ac:	e068      	b.n	8005780 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	23c0      	movs	r3, #192	@ 0xc0
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d10a      	bne.n	80056ce <SPI_WaitFifoStateUntilTimeout+0x6e>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d107      	bne.n	80056ce <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	2117      	movs	r1, #23
 80056c6:	187b      	adds	r3, r7, r1
 80056c8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80056ca:	187b      	adds	r3, r7, r1
 80056cc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	3301      	adds	r3, #1
 80056d2:	d055      	beq.n	8005780 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056d4:	f7fd f9f2 	bl	8002abc <HAL_GetTick>
 80056d8:	0002      	movs	r2, r0
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d902      	bls.n	80056ea <SPI_WaitFifoStateUntilTimeout+0x8a>
 80056e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d142      	bne.n	8005770 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	21e0      	movs	r1, #224	@ 0xe0
 80056f6:	438a      	bics	r2, r1
 80056f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	2382      	movs	r3, #130	@ 0x82
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	429a      	cmp	r2, r3
 8005704:	d113      	bne.n	800572e <SPI_WaitFifoStateUntilTimeout+0xce>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	689a      	ldr	r2, [r3, #8]
 800570a:	2380      	movs	r3, #128	@ 0x80
 800570c:	021b      	lsls	r3, r3, #8
 800570e:	429a      	cmp	r2, r3
 8005710:	d005      	beq.n	800571e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	2380      	movs	r3, #128	@ 0x80
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	429a      	cmp	r2, r3
 800571c:	d107      	bne.n	800572e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2140      	movs	r1, #64	@ 0x40
 800572a:	438a      	bics	r2, r1
 800572c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005732:	2380      	movs	r3, #128	@ 0x80
 8005734:	019b      	lsls	r3, r3, #6
 8005736:	429a      	cmp	r2, r3
 8005738:	d110      	bne.n	800575c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4916      	ldr	r1, [pc, #88]	@ (80057a0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005746:	400a      	ands	r2, r1
 8005748:	601a      	str	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2180      	movs	r1, #128	@ 0x80
 8005756:	0189      	lsls	r1, r1, #6
 8005758:	430a      	orrs	r2, r1
 800575a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	225d      	movs	r2, #93	@ 0x5d
 8005760:	2101      	movs	r1, #1
 8005762:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	225c      	movs	r2, #92	@ 0x5c
 8005768:	2100      	movs	r1, #0
 800576a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e010      	b.n	8005792 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005776:	2300      	movs	r3, #0
 8005778:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	3b01      	subs	r3, #1
 800577e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	4013      	ands	r3, r2
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	429a      	cmp	r2, r3
 800578e:	d18e      	bne.n	80056ae <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	0018      	movs	r0, r3
 8005794:	46bd      	mov	sp, r7
 8005796:	b00a      	add	sp, #40	@ 0x28
 8005798:	bd80      	pop	{r7, pc}
 800579a:	46c0      	nop			@ (mov r8, r8)
 800579c:	200004f0 	.word	0x200004f0
 80057a0:	ffffdfff 	.word	0xffffdfff

080057a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af02      	add	r7, sp, #8
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	23c0      	movs	r3, #192	@ 0xc0
 80057b4:	0159      	lsls	r1, r3, #5
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	0013      	movs	r3, r2
 80057be:	2200      	movs	r2, #0
 80057c0:	f7ff ff4e 	bl	8005660 <SPI_WaitFifoStateUntilTimeout>
 80057c4:	1e03      	subs	r3, r0, #0
 80057c6:	d007      	beq.n	80057d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057cc:	2220      	movs	r2, #32
 80057ce:	431a      	orrs	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e027      	b.n	8005828 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	0013      	movs	r3, r2
 80057e2:	2200      	movs	r2, #0
 80057e4:	2180      	movs	r1, #128	@ 0x80
 80057e6:	f7ff fead 	bl	8005544 <SPI_WaitFlagStateUntilTimeout>
 80057ea:	1e03      	subs	r3, r0, #0
 80057ec:	d007      	beq.n	80057fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057f2:	2220      	movs	r2, #32
 80057f4:	431a      	orrs	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e014      	b.n	8005828 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	23c0      	movs	r3, #192	@ 0xc0
 8005802:	00d9      	lsls	r1, r3, #3
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	0013      	movs	r3, r2
 800580c:	2200      	movs	r2, #0
 800580e:	f7ff ff27 	bl	8005660 <SPI_WaitFifoStateUntilTimeout>
 8005812:	1e03      	subs	r3, r0, #0
 8005814:	d007      	beq.n	8005826 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800581a:	2220      	movs	r2, #32
 800581c:	431a      	orrs	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e000      	b.n	8005828 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	0018      	movs	r0, r3
 800582a:	46bd      	mov	sp, r7
 800582c:	b004      	add	sp, #16
 800582e:	bd80      	pop	{r7, pc}

08005830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e04a      	b.n	80058d8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	223d      	movs	r2, #61	@ 0x3d
 8005846:	5c9b      	ldrb	r3, [r3, r2]
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d107      	bne.n	800585e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	223c      	movs	r2, #60	@ 0x3c
 8005852:	2100      	movs	r1, #0
 8005854:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	0018      	movs	r0, r3
 800585a:	f7fc ff1d 	bl	8002698 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	223d      	movs	r2, #61	@ 0x3d
 8005862:	2102      	movs	r1, #2
 8005864:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	3304      	adds	r3, #4
 800586e:	0019      	movs	r1, r3
 8005870:	0010      	movs	r0, r2
 8005872:	f000 fa85 	bl	8005d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2248      	movs	r2, #72	@ 0x48
 800587a:	2101      	movs	r1, #1
 800587c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	223e      	movs	r2, #62	@ 0x3e
 8005882:	2101      	movs	r1, #1
 8005884:	5499      	strb	r1, [r3, r2]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	223f      	movs	r2, #63	@ 0x3f
 800588a:	2101      	movs	r1, #1
 800588c:	5499      	strb	r1, [r3, r2]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2240      	movs	r2, #64	@ 0x40
 8005892:	2101      	movs	r1, #1
 8005894:	5499      	strb	r1, [r3, r2]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2241      	movs	r2, #65	@ 0x41
 800589a:	2101      	movs	r1, #1
 800589c:	5499      	strb	r1, [r3, r2]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2242      	movs	r2, #66	@ 0x42
 80058a2:	2101      	movs	r1, #1
 80058a4:	5499      	strb	r1, [r3, r2]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2243      	movs	r2, #67	@ 0x43
 80058aa:	2101      	movs	r1, #1
 80058ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2244      	movs	r2, #68	@ 0x44
 80058b2:	2101      	movs	r1, #1
 80058b4:	5499      	strb	r1, [r3, r2]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2245      	movs	r2, #69	@ 0x45
 80058ba:	2101      	movs	r1, #1
 80058bc:	5499      	strb	r1, [r3, r2]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2246      	movs	r2, #70	@ 0x46
 80058c2:	2101      	movs	r1, #1
 80058c4:	5499      	strb	r1, [r3, r2]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2247      	movs	r2, #71	@ 0x47
 80058ca:	2101      	movs	r1, #1
 80058cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	223d      	movs	r2, #61	@ 0x3d
 80058d2:	2101      	movs	r1, #1
 80058d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	0018      	movs	r0, r3
 80058da:	46bd      	mov	sp, r7
 80058dc:	b002      	add	sp, #8
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e04a      	b.n	8005988 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	223d      	movs	r2, #61	@ 0x3d
 80058f6:	5c9b      	ldrb	r3, [r3, r2]
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d107      	bne.n	800590e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	223c      	movs	r2, #60	@ 0x3c
 8005902:	2100      	movs	r1, #0
 8005904:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	0018      	movs	r0, r3
 800590a:	f000 f841 	bl	8005990 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	223d      	movs	r2, #61	@ 0x3d
 8005912:	2102      	movs	r1, #2
 8005914:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	3304      	adds	r3, #4
 800591e:	0019      	movs	r1, r3
 8005920:	0010      	movs	r0, r2
 8005922:	f000 fa2d 	bl	8005d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2248      	movs	r2, #72	@ 0x48
 800592a:	2101      	movs	r1, #1
 800592c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	223e      	movs	r2, #62	@ 0x3e
 8005932:	2101      	movs	r1, #1
 8005934:	5499      	strb	r1, [r3, r2]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	223f      	movs	r2, #63	@ 0x3f
 800593a:	2101      	movs	r1, #1
 800593c:	5499      	strb	r1, [r3, r2]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2240      	movs	r2, #64	@ 0x40
 8005942:	2101      	movs	r1, #1
 8005944:	5499      	strb	r1, [r3, r2]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2241      	movs	r2, #65	@ 0x41
 800594a:	2101      	movs	r1, #1
 800594c:	5499      	strb	r1, [r3, r2]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2242      	movs	r2, #66	@ 0x42
 8005952:	2101      	movs	r1, #1
 8005954:	5499      	strb	r1, [r3, r2]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2243      	movs	r2, #67	@ 0x43
 800595a:	2101      	movs	r1, #1
 800595c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2244      	movs	r2, #68	@ 0x44
 8005962:	2101      	movs	r1, #1
 8005964:	5499      	strb	r1, [r3, r2]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2245      	movs	r2, #69	@ 0x45
 800596a:	2101      	movs	r1, #1
 800596c:	5499      	strb	r1, [r3, r2]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2246      	movs	r2, #70	@ 0x46
 8005972:	2101      	movs	r1, #1
 8005974:	5499      	strb	r1, [r3, r2]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2247      	movs	r2, #71	@ 0x47
 800597a:	2101      	movs	r1, #1
 800597c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	223d      	movs	r2, #61	@ 0x3d
 8005982:	2101      	movs	r1, #1
 8005984:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	0018      	movs	r0, r3
 800598a:	46bd      	mov	sp, r7
 800598c:	b002      	add	sp, #8
 800598e:	bd80      	pop	{r7, pc}

08005990 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005998:	46c0      	nop			@ (mov r8, r8)
 800599a:	46bd      	mov	sp, r7
 800599c:	b002      	add	sp, #8
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d108      	bne.n	80059c2 <HAL_TIM_PWM_Start+0x22>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	223e      	movs	r2, #62	@ 0x3e
 80059b4:	5c9b      	ldrb	r3, [r3, r2]
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	1e5a      	subs	r2, r3, #1
 80059bc:	4193      	sbcs	r3, r2
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	e037      	b.n	8005a32 <HAL_TIM_PWM_Start+0x92>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b04      	cmp	r3, #4
 80059c6:	d108      	bne.n	80059da <HAL_TIM_PWM_Start+0x3a>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	223f      	movs	r2, #63	@ 0x3f
 80059cc:	5c9b      	ldrb	r3, [r3, r2]
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	3b01      	subs	r3, #1
 80059d2:	1e5a      	subs	r2, r3, #1
 80059d4:	4193      	sbcs	r3, r2
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	e02b      	b.n	8005a32 <HAL_TIM_PWM_Start+0x92>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d108      	bne.n	80059f2 <HAL_TIM_PWM_Start+0x52>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2240      	movs	r2, #64	@ 0x40
 80059e4:	5c9b      	ldrb	r3, [r3, r2]
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	1e5a      	subs	r2, r3, #1
 80059ec:	4193      	sbcs	r3, r2
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	e01f      	b.n	8005a32 <HAL_TIM_PWM_Start+0x92>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b0c      	cmp	r3, #12
 80059f6:	d108      	bne.n	8005a0a <HAL_TIM_PWM_Start+0x6a>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2241      	movs	r2, #65	@ 0x41
 80059fc:	5c9b      	ldrb	r3, [r3, r2]
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	3b01      	subs	r3, #1
 8005a02:	1e5a      	subs	r2, r3, #1
 8005a04:	4193      	sbcs	r3, r2
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	e013      	b.n	8005a32 <HAL_TIM_PWM_Start+0x92>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b10      	cmp	r3, #16
 8005a0e:	d108      	bne.n	8005a22 <HAL_TIM_PWM_Start+0x82>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2242      	movs	r2, #66	@ 0x42
 8005a14:	5c9b      	ldrb	r3, [r3, r2]
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	1e5a      	subs	r2, r3, #1
 8005a1c:	4193      	sbcs	r3, r2
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	e007      	b.n	8005a32 <HAL_TIM_PWM_Start+0x92>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2243      	movs	r2, #67	@ 0x43
 8005a26:	5c9b      	ldrb	r3, [r3, r2]
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	1e5a      	subs	r2, r3, #1
 8005a2e:	4193      	sbcs	r3, r2
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e090      	b.n	8005b5c <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d104      	bne.n	8005a4a <HAL_TIM_PWM_Start+0xaa>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	223e      	movs	r2, #62	@ 0x3e
 8005a44:	2102      	movs	r1, #2
 8005a46:	5499      	strb	r1, [r3, r2]
 8005a48:	e023      	b.n	8005a92 <HAL_TIM_PWM_Start+0xf2>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d104      	bne.n	8005a5a <HAL_TIM_PWM_Start+0xba>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	223f      	movs	r2, #63	@ 0x3f
 8005a54:	2102      	movs	r1, #2
 8005a56:	5499      	strb	r1, [r3, r2]
 8005a58:	e01b      	b.n	8005a92 <HAL_TIM_PWM_Start+0xf2>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d104      	bne.n	8005a6a <HAL_TIM_PWM_Start+0xca>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2240      	movs	r2, #64	@ 0x40
 8005a64:	2102      	movs	r1, #2
 8005a66:	5499      	strb	r1, [r3, r2]
 8005a68:	e013      	b.n	8005a92 <HAL_TIM_PWM_Start+0xf2>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b0c      	cmp	r3, #12
 8005a6e:	d104      	bne.n	8005a7a <HAL_TIM_PWM_Start+0xda>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2241      	movs	r2, #65	@ 0x41
 8005a74:	2102      	movs	r1, #2
 8005a76:	5499      	strb	r1, [r3, r2]
 8005a78:	e00b      	b.n	8005a92 <HAL_TIM_PWM_Start+0xf2>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b10      	cmp	r3, #16
 8005a7e:	d104      	bne.n	8005a8a <HAL_TIM_PWM_Start+0xea>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2242      	movs	r2, #66	@ 0x42
 8005a84:	2102      	movs	r1, #2
 8005a86:	5499      	strb	r1, [r3, r2]
 8005a88:	e003      	b.n	8005a92 <HAL_TIM_PWM_Start+0xf2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2243      	movs	r2, #67	@ 0x43
 8005a8e:	2102      	movs	r1, #2
 8005a90:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6839      	ldr	r1, [r7, #0]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	f000 fccc 	bl	8006438 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a2f      	ldr	r2, [pc, #188]	@ (8005b64 <HAL_TIM_PWM_Start+0x1c4>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d00e      	beq.n	8005ac8 <HAL_TIM_PWM_Start+0x128>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a2e      	ldr	r2, [pc, #184]	@ (8005b68 <HAL_TIM_PWM_Start+0x1c8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d009      	beq.n	8005ac8 <HAL_TIM_PWM_Start+0x128>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8005b6c <HAL_TIM_PWM_Start+0x1cc>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d004      	beq.n	8005ac8 <HAL_TIM_PWM_Start+0x128>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a2b      	ldr	r2, [pc, #172]	@ (8005b70 <HAL_TIM_PWM_Start+0x1d0>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d101      	bne.n	8005acc <HAL_TIM_PWM_Start+0x12c>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e000      	b.n	8005ace <HAL_TIM_PWM_Start+0x12e>
 8005acc:	2300      	movs	r3, #0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d008      	beq.n	8005ae4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2180      	movs	r1, #128	@ 0x80
 8005ade:	0209      	lsls	r1, r1, #8
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a1e      	ldr	r2, [pc, #120]	@ (8005b64 <HAL_TIM_PWM_Start+0x1c4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d014      	beq.n	8005b18 <HAL_TIM_PWM_Start+0x178>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	2380      	movs	r3, #128	@ 0x80
 8005af4:	05db      	lsls	r3, r3, #23
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d00e      	beq.n	8005b18 <HAL_TIM_PWM_Start+0x178>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1d      	ldr	r2, [pc, #116]	@ (8005b74 <HAL_TIM_PWM_Start+0x1d4>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d009      	beq.n	8005b18 <HAL_TIM_PWM_Start+0x178>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a1b      	ldr	r2, [pc, #108]	@ (8005b78 <HAL_TIM_PWM_Start+0x1d8>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d004      	beq.n	8005b18 <HAL_TIM_PWM_Start+0x178>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a15      	ldr	r2, [pc, #84]	@ (8005b68 <HAL_TIM_PWM_Start+0x1c8>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d116      	bne.n	8005b46 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	4a17      	ldr	r2, [pc, #92]	@ (8005b7c <HAL_TIM_PWM_Start+0x1dc>)
 8005b20:	4013      	ands	r3, r2
 8005b22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b06      	cmp	r3, #6
 8005b28:	d016      	beq.n	8005b58 <HAL_TIM_PWM_Start+0x1b8>
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	2380      	movs	r3, #128	@ 0x80
 8005b2e:	025b      	lsls	r3, r3, #9
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d011      	beq.n	8005b58 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2101      	movs	r1, #1
 8005b40:	430a      	orrs	r2, r1
 8005b42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b44:	e008      	b.n	8005b58 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2101      	movs	r1, #1
 8005b52:	430a      	orrs	r2, r1
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	e000      	b.n	8005b5a <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b58:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	b004      	add	sp, #16
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	40012c00 	.word	0x40012c00
 8005b68:	40014000 	.word	0x40014000
 8005b6c:	40014400 	.word	0x40014400
 8005b70:	40014800 	.word	0x40014800
 8005b74:	40000400 	.word	0x40000400
 8005b78:	40000800 	.word	0x40000800
 8005b7c:	00010007 	.word	0x00010007

08005b80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b8c:	2317      	movs	r3, #23
 8005b8e:	18fb      	adds	r3, r7, r3
 8005b90:	2200      	movs	r2, #0
 8005b92:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	223c      	movs	r2, #60	@ 0x3c
 8005b98:	5c9b      	ldrb	r3, [r3, r2]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d101      	bne.n	8005ba2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	e0e5      	b.n	8005d6e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	223c      	movs	r2, #60	@ 0x3c
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b14      	cmp	r3, #20
 8005bae:	d900      	bls.n	8005bb2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005bb0:	e0d1      	b.n	8005d56 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	009a      	lsls	r2, r3, #2
 8005bb6:	4b70      	ldr	r3, [pc, #448]	@ (8005d78 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005bb8:	18d3      	adds	r3, r2, r3
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	0011      	movs	r1, r2
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f000 f972 	bl	8005eb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2108      	movs	r1, #8
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	699a      	ldr	r2, [r3, #24]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2104      	movs	r1, #4
 8005be8:	438a      	bics	r2, r1
 8005bea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6999      	ldr	r1, [r3, #24]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	691a      	ldr	r2, [r3, #16]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	619a      	str	r2, [r3, #24]
      break;
 8005bfe:	e0af      	b.n	8005d60 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	0011      	movs	r1, r2
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f000 f9db 	bl	8005fc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	699a      	ldr	r2, [r3, #24]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2180      	movs	r1, #128	@ 0x80
 8005c1a:	0109      	lsls	r1, r1, #4
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699a      	ldr	r2, [r3, #24]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4954      	ldr	r1, [pc, #336]	@ (8005d7c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005c2c:	400a      	ands	r2, r1
 8005c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6999      	ldr	r1, [r3, #24]
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	021a      	lsls	r2, r3, #8
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	430a      	orrs	r2, r1
 8005c42:	619a      	str	r2, [r3, #24]
      break;
 8005c44:	e08c      	b.n	8005d60 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	0011      	movs	r1, r2
 8005c4e:	0018      	movs	r0, r3
 8005c50:	f000 fa3c 	bl	80060cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	69da      	ldr	r2, [r3, #28]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2108      	movs	r1, #8
 8005c60:	430a      	orrs	r2, r1
 8005c62:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	69da      	ldr	r2, [r3, #28]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2104      	movs	r1, #4
 8005c70:	438a      	bics	r2, r1
 8005c72:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	69d9      	ldr	r1, [r3, #28]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	691a      	ldr	r2, [r3, #16]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	61da      	str	r2, [r3, #28]
      break;
 8005c86:	e06b      	b.n	8005d60 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	0011      	movs	r1, r2
 8005c90:	0018      	movs	r0, r3
 8005c92:	f000 faa3 	bl	80061dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69da      	ldr	r2, [r3, #28]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2180      	movs	r1, #128	@ 0x80
 8005ca2:	0109      	lsls	r1, r1, #4
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	69da      	ldr	r2, [r3, #28]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4932      	ldr	r1, [pc, #200]	@ (8005d7c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005cb4:	400a      	ands	r2, r1
 8005cb6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	69d9      	ldr	r1, [r3, #28]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	021a      	lsls	r2, r3, #8
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	61da      	str	r2, [r3, #28]
      break;
 8005ccc:	e048      	b.n	8005d60 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	0011      	movs	r1, r2
 8005cd6:	0018      	movs	r0, r3
 8005cd8:	f000 faea 	bl	80062b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2108      	movs	r1, #8
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2104      	movs	r1, #4
 8005cf8:	438a      	bics	r2, r1
 8005cfa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	691a      	ldr	r2, [r3, #16]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d0e:	e027      	b.n	8005d60 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	0011      	movs	r1, r2
 8005d18:	0018      	movs	r0, r3
 8005d1a:	f000 fb29 	bl	8006370 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2180      	movs	r1, #128	@ 0x80
 8005d2a:	0109      	lsls	r1, r1, #4
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4910      	ldr	r1, [pc, #64]	@ (8005d7c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005d3c:	400a      	ands	r2, r1
 8005d3e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	021a      	lsls	r2, r3, #8
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d54:	e004      	b.n	8005d60 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005d56:	2317      	movs	r3, #23
 8005d58:	18fb      	adds	r3, r7, r3
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	701a      	strb	r2, [r3, #0]
      break;
 8005d5e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	223c      	movs	r2, #60	@ 0x3c
 8005d64:	2100      	movs	r1, #0
 8005d66:	5499      	strb	r1, [r3, r2]

  return status;
 8005d68:	2317      	movs	r3, #23
 8005d6a:	18fb      	adds	r3, r7, r3
 8005d6c:	781b      	ldrb	r3, [r3, #0]
}
 8005d6e:	0018      	movs	r0, r3
 8005d70:	46bd      	mov	sp, r7
 8005d72:	b006      	add	sp, #24
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	46c0      	nop			@ (mov r8, r8)
 8005d78:	08008378 	.word	0x08008378
 8005d7c:	fffffbff 	.word	0xfffffbff

08005d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a3f      	ldr	r2, [pc, #252]	@ (8005e90 <TIM_Base_SetConfig+0x110>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00c      	beq.n	8005db2 <TIM_Base_SetConfig+0x32>
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	2380      	movs	r3, #128	@ 0x80
 8005d9c:	05db      	lsls	r3, r3, #23
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d007      	beq.n	8005db2 <TIM_Base_SetConfig+0x32>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a3b      	ldr	r2, [pc, #236]	@ (8005e94 <TIM_Base_SetConfig+0x114>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d003      	beq.n	8005db2 <TIM_Base_SetConfig+0x32>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a3a      	ldr	r2, [pc, #232]	@ (8005e98 <TIM_Base_SetConfig+0x118>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d108      	bne.n	8005dc4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2270      	movs	r2, #112	@ 0x70
 8005db6:	4393      	bics	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a32      	ldr	r2, [pc, #200]	@ (8005e90 <TIM_Base_SetConfig+0x110>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d01c      	beq.n	8005e06 <TIM_Base_SetConfig+0x86>
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	2380      	movs	r3, #128	@ 0x80
 8005dd0:	05db      	lsls	r3, r3, #23
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d017      	beq.n	8005e06 <TIM_Base_SetConfig+0x86>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a2e      	ldr	r2, [pc, #184]	@ (8005e94 <TIM_Base_SetConfig+0x114>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d013      	beq.n	8005e06 <TIM_Base_SetConfig+0x86>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a2d      	ldr	r2, [pc, #180]	@ (8005e98 <TIM_Base_SetConfig+0x118>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d00f      	beq.n	8005e06 <TIM_Base_SetConfig+0x86>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a2c      	ldr	r2, [pc, #176]	@ (8005e9c <TIM_Base_SetConfig+0x11c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00b      	beq.n	8005e06 <TIM_Base_SetConfig+0x86>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a2b      	ldr	r2, [pc, #172]	@ (8005ea0 <TIM_Base_SetConfig+0x120>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d007      	beq.n	8005e06 <TIM_Base_SetConfig+0x86>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a2a      	ldr	r2, [pc, #168]	@ (8005ea4 <TIM_Base_SetConfig+0x124>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d003      	beq.n	8005e06 <TIM_Base_SetConfig+0x86>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a29      	ldr	r2, [pc, #164]	@ (8005ea8 <TIM_Base_SetConfig+0x128>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d108      	bne.n	8005e18 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4a28      	ldr	r2, [pc, #160]	@ (8005eac <TIM_Base_SetConfig+0x12c>)
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2280      	movs	r2, #128	@ 0x80
 8005e1c:	4393      	bics	r3, r2
 8005e1e:	001a      	movs	r2, r3
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a13      	ldr	r2, [pc, #76]	@ (8005e90 <TIM_Base_SetConfig+0x110>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00b      	beq.n	8005e5e <TIM_Base_SetConfig+0xde>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a15      	ldr	r2, [pc, #84]	@ (8005ea0 <TIM_Base_SetConfig+0x120>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d007      	beq.n	8005e5e <TIM_Base_SetConfig+0xde>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a14      	ldr	r2, [pc, #80]	@ (8005ea4 <TIM_Base_SetConfig+0x124>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d003      	beq.n	8005e5e <TIM_Base_SetConfig+0xde>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a13      	ldr	r2, [pc, #76]	@ (8005ea8 <TIM_Base_SetConfig+0x128>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d103      	bne.n	8005e66 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	691a      	ldr	r2, [r3, #16]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	2201      	movs	r2, #1
 8005e72:	4013      	ands	r3, r2
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d106      	bne.n	8005e86 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	4393      	bics	r3, r2
 8005e80:	001a      	movs	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	611a      	str	r2, [r3, #16]
  }
}
 8005e86:	46c0      	nop			@ (mov r8, r8)
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	b004      	add	sp, #16
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	46c0      	nop			@ (mov r8, r8)
 8005e90:	40012c00 	.word	0x40012c00
 8005e94:	40000400 	.word	0x40000400
 8005e98:	40000800 	.word	0x40000800
 8005e9c:	40002000 	.word	0x40002000
 8005ea0:	40014000 	.word	0x40014000
 8005ea4:	40014400 	.word	0x40014400
 8005ea8:	40014800 	.word	0x40014800
 8005eac:	fffffcff 	.word	0xfffffcff

08005eb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	4393      	bics	r3, r2
 8005ec8:	001a      	movs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	4a32      	ldr	r2, [pc, #200]	@ (8005fa8 <TIM_OC1_SetConfig+0xf8>)
 8005ede:	4013      	ands	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2203      	movs	r2, #3
 8005ee6:	4393      	bics	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	4393      	bics	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	697a      	ldr	r2, [r7, #20]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a28      	ldr	r2, [pc, #160]	@ (8005fac <TIM_OC1_SetConfig+0xfc>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d00b      	beq.n	8005f26 <TIM_OC1_SetConfig+0x76>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a27      	ldr	r2, [pc, #156]	@ (8005fb0 <TIM_OC1_SetConfig+0x100>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d007      	beq.n	8005f26 <TIM_OC1_SetConfig+0x76>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a26      	ldr	r2, [pc, #152]	@ (8005fb4 <TIM_OC1_SetConfig+0x104>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d003      	beq.n	8005f26 <TIM_OC1_SetConfig+0x76>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a25      	ldr	r2, [pc, #148]	@ (8005fb8 <TIM_OC1_SetConfig+0x108>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d10c      	bne.n	8005f40 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2208      	movs	r2, #8
 8005f2a:	4393      	bics	r3, r2
 8005f2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	2204      	movs	r2, #4
 8005f3c:	4393      	bics	r3, r2
 8005f3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a1a      	ldr	r2, [pc, #104]	@ (8005fac <TIM_OC1_SetConfig+0xfc>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d00b      	beq.n	8005f60 <TIM_OC1_SetConfig+0xb0>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a19      	ldr	r2, [pc, #100]	@ (8005fb0 <TIM_OC1_SetConfig+0x100>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d007      	beq.n	8005f60 <TIM_OC1_SetConfig+0xb0>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a18      	ldr	r2, [pc, #96]	@ (8005fb4 <TIM_OC1_SetConfig+0x104>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d003      	beq.n	8005f60 <TIM_OC1_SetConfig+0xb0>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a17      	ldr	r2, [pc, #92]	@ (8005fb8 <TIM_OC1_SetConfig+0x108>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d111      	bne.n	8005f84 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	4a16      	ldr	r2, [pc, #88]	@ (8005fbc <TIM_OC1_SetConfig+0x10c>)
 8005f64:	4013      	ands	r3, r2
 8005f66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	4a15      	ldr	r2, [pc, #84]	@ (8005fc0 <TIM_OC1_SetConfig+0x110>)
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	695b      	ldr	r3, [r3, #20]
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	693a      	ldr	r2, [r7, #16]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	621a      	str	r2, [r3, #32]
}
 8005f9e:	46c0      	nop			@ (mov r8, r8)
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	b006      	add	sp, #24
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	46c0      	nop			@ (mov r8, r8)
 8005fa8:	fffeff8f 	.word	0xfffeff8f
 8005fac:	40012c00 	.word	0x40012c00
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40014400 	.word	0x40014400
 8005fb8:	40014800 	.word	0x40014800
 8005fbc:	fffffeff 	.word	0xfffffeff
 8005fc0:	fffffdff 	.word	0xfffffdff

08005fc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	2210      	movs	r2, #16
 8005fda:	4393      	bics	r3, r2
 8005fdc:	001a      	movs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4a2e      	ldr	r2, [pc, #184]	@ (80060ac <TIM_OC2_SetConfig+0xe8>)
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4a2d      	ldr	r2, [pc, #180]	@ (80060b0 <TIM_OC2_SetConfig+0xec>)
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	021b      	lsls	r3, r3, #8
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2220      	movs	r2, #32
 800600e:	4393      	bics	r3, r2
 8006010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	4313      	orrs	r3, r2
 800601c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a24      	ldr	r2, [pc, #144]	@ (80060b4 <TIM_OC2_SetConfig+0xf0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d10d      	bne.n	8006042 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2280      	movs	r2, #128	@ 0x80
 800602a:	4393      	bics	r3, r2
 800602c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2240      	movs	r2, #64	@ 0x40
 800603e:	4393      	bics	r3, r2
 8006040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a1b      	ldr	r2, [pc, #108]	@ (80060b4 <TIM_OC2_SetConfig+0xf0>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00b      	beq.n	8006062 <TIM_OC2_SetConfig+0x9e>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a1a      	ldr	r2, [pc, #104]	@ (80060b8 <TIM_OC2_SetConfig+0xf4>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d007      	beq.n	8006062 <TIM_OC2_SetConfig+0x9e>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a19      	ldr	r2, [pc, #100]	@ (80060bc <TIM_OC2_SetConfig+0xf8>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d003      	beq.n	8006062 <TIM_OC2_SetConfig+0x9e>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a18      	ldr	r2, [pc, #96]	@ (80060c0 <TIM_OC2_SetConfig+0xfc>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d113      	bne.n	800608a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	4a17      	ldr	r2, [pc, #92]	@ (80060c4 <TIM_OC2_SetConfig+0x100>)
 8006066:	4013      	ands	r3, r2
 8006068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	4a16      	ldr	r2, [pc, #88]	@ (80060c8 <TIM_OC2_SetConfig+0x104>)
 800606e:	4013      	ands	r3, r2
 8006070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	4313      	orrs	r3, r2
 800607c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	4313      	orrs	r3, r2
 8006088:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	621a      	str	r2, [r3, #32]
}
 80060a4:	46c0      	nop			@ (mov r8, r8)
 80060a6:	46bd      	mov	sp, r7
 80060a8:	b006      	add	sp, #24
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	feff8fff 	.word	0xfeff8fff
 80060b0:	fffffcff 	.word	0xfffffcff
 80060b4:	40012c00 	.word	0x40012c00
 80060b8:	40014000 	.word	0x40014000
 80060bc:	40014400 	.word	0x40014400
 80060c0:	40014800 	.word	0x40014800
 80060c4:	fffffbff 	.word	0xfffffbff
 80060c8:	fffff7ff 	.word	0xfffff7ff

080060cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	4a33      	ldr	r2, [pc, #204]	@ (80061b0 <TIM_OC3_SetConfig+0xe4>)
 80060e2:	401a      	ands	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4a2f      	ldr	r2, [pc, #188]	@ (80061b4 <TIM_OC3_SetConfig+0xe8>)
 80060f8:	4013      	ands	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2203      	movs	r2, #3
 8006100:	4393      	bics	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	4a29      	ldr	r2, [pc, #164]	@ (80061b8 <TIM_OC3_SetConfig+0xec>)
 8006112:	4013      	ands	r3, r2
 8006114:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	021b      	lsls	r3, r3, #8
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	4313      	orrs	r3, r2
 8006120:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a25      	ldr	r2, [pc, #148]	@ (80061bc <TIM_OC3_SetConfig+0xf0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d10d      	bne.n	8006146 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	4a24      	ldr	r2, [pc, #144]	@ (80061c0 <TIM_OC3_SetConfig+0xf4>)
 800612e:	4013      	ands	r3, r2
 8006130:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	021b      	lsls	r3, r3, #8
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	4a20      	ldr	r2, [pc, #128]	@ (80061c4 <TIM_OC3_SetConfig+0xf8>)
 8006142:	4013      	ands	r3, r2
 8006144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a1c      	ldr	r2, [pc, #112]	@ (80061bc <TIM_OC3_SetConfig+0xf0>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d00b      	beq.n	8006166 <TIM_OC3_SetConfig+0x9a>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a1d      	ldr	r2, [pc, #116]	@ (80061c8 <TIM_OC3_SetConfig+0xfc>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d007      	beq.n	8006166 <TIM_OC3_SetConfig+0x9a>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a1c      	ldr	r2, [pc, #112]	@ (80061cc <TIM_OC3_SetConfig+0x100>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d003      	beq.n	8006166 <TIM_OC3_SetConfig+0x9a>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a1b      	ldr	r2, [pc, #108]	@ (80061d0 <TIM_OC3_SetConfig+0x104>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d113      	bne.n	800618e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	4a1a      	ldr	r2, [pc, #104]	@ (80061d4 <TIM_OC3_SetConfig+0x108>)
 800616a:	4013      	ands	r3, r2
 800616c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	4a19      	ldr	r2, [pc, #100]	@ (80061d8 <TIM_OC3_SetConfig+0x10c>)
 8006172:	4013      	ands	r3, r2
 8006174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	011b      	lsls	r3, r3, #4
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4313      	orrs	r3, r2
 800618c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	621a      	str	r2, [r3, #32]
}
 80061a8:	46c0      	nop			@ (mov r8, r8)
 80061aa:	46bd      	mov	sp, r7
 80061ac:	b006      	add	sp, #24
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	fffffeff 	.word	0xfffffeff
 80061b4:	fffeff8f 	.word	0xfffeff8f
 80061b8:	fffffdff 	.word	0xfffffdff
 80061bc:	40012c00 	.word	0x40012c00
 80061c0:	fffff7ff 	.word	0xfffff7ff
 80061c4:	fffffbff 	.word	0xfffffbff
 80061c8:	40014000 	.word	0x40014000
 80061cc:	40014400 	.word	0x40014400
 80061d0:	40014800 	.word	0x40014800
 80061d4:	ffffefff 	.word	0xffffefff
 80061d8:	ffffdfff 	.word	0xffffdfff

080061dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	4a26      	ldr	r2, [pc, #152]	@ (800628c <TIM_OC4_SetConfig+0xb0>)
 80061f2:	401a      	ands	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4a22      	ldr	r2, [pc, #136]	@ (8006290 <TIM_OC4_SetConfig+0xb4>)
 8006208:	4013      	ands	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4a21      	ldr	r2, [pc, #132]	@ (8006294 <TIM_OC4_SetConfig+0xb8>)
 8006210:	4013      	ands	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	021b      	lsls	r3, r3, #8
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4313      	orrs	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	4a1d      	ldr	r2, [pc, #116]	@ (8006298 <TIM_OC4_SetConfig+0xbc>)
 8006224:	4013      	ands	r3, r2
 8006226:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	031b      	lsls	r3, r3, #12
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a19      	ldr	r2, [pc, #100]	@ (800629c <TIM_OC4_SetConfig+0xc0>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00b      	beq.n	8006254 <TIM_OC4_SetConfig+0x78>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a18      	ldr	r2, [pc, #96]	@ (80062a0 <TIM_OC4_SetConfig+0xc4>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d007      	beq.n	8006254 <TIM_OC4_SetConfig+0x78>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a17      	ldr	r2, [pc, #92]	@ (80062a4 <TIM_OC4_SetConfig+0xc8>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d003      	beq.n	8006254 <TIM_OC4_SetConfig+0x78>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a16      	ldr	r2, [pc, #88]	@ (80062a8 <TIM_OC4_SetConfig+0xcc>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d109      	bne.n	8006268 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	4a15      	ldr	r2, [pc, #84]	@ (80062ac <TIM_OC4_SetConfig+0xd0>)
 8006258:	4013      	ands	r3, r2
 800625a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	019b      	lsls	r3, r3, #6
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	4313      	orrs	r3, r2
 8006266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685a      	ldr	r2, [r3, #4]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	621a      	str	r2, [r3, #32]
}
 8006282:	46c0      	nop			@ (mov r8, r8)
 8006284:	46bd      	mov	sp, r7
 8006286:	b006      	add	sp, #24
 8006288:	bd80      	pop	{r7, pc}
 800628a:	46c0      	nop			@ (mov r8, r8)
 800628c:	ffffefff 	.word	0xffffefff
 8006290:	feff8fff 	.word	0xfeff8fff
 8006294:	fffffcff 	.word	0xfffffcff
 8006298:	ffffdfff 	.word	0xffffdfff
 800629c:	40012c00 	.word	0x40012c00
 80062a0:	40014000 	.word	0x40014000
 80062a4:	40014400 	.word	0x40014400
 80062a8:	40014800 	.word	0x40014800
 80062ac:	ffffbfff 	.word	0xffffbfff

080062b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	4a23      	ldr	r2, [pc, #140]	@ (8006354 <TIM_OC5_SetConfig+0xa4>)
 80062c6:	401a      	ands	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4a1f      	ldr	r2, [pc, #124]	@ (8006358 <TIM_OC5_SetConfig+0xa8>)
 80062dc:	4013      	ands	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	4a1b      	ldr	r2, [pc, #108]	@ (800635c <TIM_OC5_SetConfig+0xac>)
 80062ee:	4013      	ands	r3, r2
 80062f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	041b      	lsls	r3, r3, #16
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a17      	ldr	r2, [pc, #92]	@ (8006360 <TIM_OC5_SetConfig+0xb0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d00b      	beq.n	800631e <TIM_OC5_SetConfig+0x6e>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a16      	ldr	r2, [pc, #88]	@ (8006364 <TIM_OC5_SetConfig+0xb4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d007      	beq.n	800631e <TIM_OC5_SetConfig+0x6e>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a15      	ldr	r2, [pc, #84]	@ (8006368 <TIM_OC5_SetConfig+0xb8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d003      	beq.n	800631e <TIM_OC5_SetConfig+0x6e>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a14      	ldr	r2, [pc, #80]	@ (800636c <TIM_OC5_SetConfig+0xbc>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d109      	bne.n	8006332 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	4a0c      	ldr	r2, [pc, #48]	@ (8006354 <TIM_OC5_SetConfig+0xa4>)
 8006322:	4013      	ands	r3, r2
 8006324:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	021b      	lsls	r3, r3, #8
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	4313      	orrs	r3, r2
 8006330:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	621a      	str	r2, [r3, #32]
}
 800634c:	46c0      	nop			@ (mov r8, r8)
 800634e:	46bd      	mov	sp, r7
 8006350:	b006      	add	sp, #24
 8006352:	bd80      	pop	{r7, pc}
 8006354:	fffeffff 	.word	0xfffeffff
 8006358:	fffeff8f 	.word	0xfffeff8f
 800635c:	fffdffff 	.word	0xfffdffff
 8006360:	40012c00 	.word	0x40012c00
 8006364:	40014000 	.word	0x40014000
 8006368:	40014400 	.word	0x40014400
 800636c:	40014800 	.word	0x40014800

08006370 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	4a24      	ldr	r2, [pc, #144]	@ (8006418 <TIM_OC6_SetConfig+0xa8>)
 8006386:	401a      	ands	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4a20      	ldr	r2, [pc, #128]	@ (800641c <TIM_OC6_SetConfig+0xac>)
 800639c:	4013      	ands	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	021b      	lsls	r3, r3, #8
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	4a1c      	ldr	r2, [pc, #112]	@ (8006420 <TIM_OC6_SetConfig+0xb0>)
 80063b0:	4013      	ands	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	051b      	lsls	r3, r3, #20
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4313      	orrs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a18      	ldr	r2, [pc, #96]	@ (8006424 <TIM_OC6_SetConfig+0xb4>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d00b      	beq.n	80063e0 <TIM_OC6_SetConfig+0x70>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a17      	ldr	r2, [pc, #92]	@ (8006428 <TIM_OC6_SetConfig+0xb8>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d007      	beq.n	80063e0 <TIM_OC6_SetConfig+0x70>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a16      	ldr	r2, [pc, #88]	@ (800642c <TIM_OC6_SetConfig+0xbc>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d003      	beq.n	80063e0 <TIM_OC6_SetConfig+0x70>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a15      	ldr	r2, [pc, #84]	@ (8006430 <TIM_OC6_SetConfig+0xc0>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d109      	bne.n	80063f4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	4a14      	ldr	r2, [pc, #80]	@ (8006434 <TIM_OC6_SetConfig+0xc4>)
 80063e4:	4013      	ands	r3, r2
 80063e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	695b      	ldr	r3, [r3, #20]
 80063ec:	029b      	lsls	r3, r3, #10
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	621a      	str	r2, [r3, #32]
}
 800640e:	46c0      	nop			@ (mov r8, r8)
 8006410:	46bd      	mov	sp, r7
 8006412:	b006      	add	sp, #24
 8006414:	bd80      	pop	{r7, pc}
 8006416:	46c0      	nop			@ (mov r8, r8)
 8006418:	ffefffff 	.word	0xffefffff
 800641c:	feff8fff 	.word	0xfeff8fff
 8006420:	ffdfffff 	.word	0xffdfffff
 8006424:	40012c00 	.word	0x40012c00
 8006428:	40014000 	.word	0x40014000
 800642c:	40014400 	.word	0x40014400
 8006430:	40014800 	.word	0x40014800
 8006434:	fffbffff 	.word	0xfffbffff

08006438 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	221f      	movs	r2, #31
 8006448:	4013      	ands	r3, r2
 800644a:	2201      	movs	r2, #1
 800644c:	409a      	lsls	r2, r3
 800644e:	0013      	movs	r3, r2
 8006450:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	43d2      	mvns	r2, r2
 800645a:	401a      	ands	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6a1a      	ldr	r2, [r3, #32]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	211f      	movs	r1, #31
 8006468:	400b      	ands	r3, r1
 800646a:	6879      	ldr	r1, [r7, #4]
 800646c:	4099      	lsls	r1, r3
 800646e:	000b      	movs	r3, r1
 8006470:	431a      	orrs	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	621a      	str	r2, [r3, #32]
}
 8006476:	46c0      	nop			@ (mov r8, r8)
 8006478:	46bd      	mov	sp, r7
 800647a:	b006      	add	sp, #24
 800647c:	bd80      	pop	{r7, pc}
	...

08006480 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800648a:	2300      	movs	r3, #0
 800648c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	223c      	movs	r2, #60	@ 0x3c
 8006492:	5c9b      	ldrb	r3, [r3, r2]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d101      	bne.n	800649c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006498:	2302      	movs	r3, #2
 800649a:	e06f      	b.n	800657c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	223c      	movs	r2, #60	@ 0x3c
 80064a0:	2101      	movs	r1, #1
 80064a2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	22ff      	movs	r2, #255	@ 0xff
 80064a8:	4393      	bics	r3, r2
 80064aa:	001a      	movs	r2, r3
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	4a33      	ldr	r2, [pc, #204]	@ (8006584 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80064b8:	401a      	ands	r2, r3
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	4313      	orrs	r3, r2
 80064c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4a30      	ldr	r2, [pc, #192]	@ (8006588 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80064c6:	401a      	ands	r2, r3
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4a2e      	ldr	r2, [pc, #184]	@ (800658c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80064d4:	401a      	ands	r2, r3
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4313      	orrs	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4a2b      	ldr	r2, [pc, #172]	@ (8006590 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80064e2:	401a      	ands	r2, r3
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	4a29      	ldr	r2, [pc, #164]	@ (8006594 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80064f0:	401a      	ands	r2, r3
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	4a26      	ldr	r2, [pc, #152]	@ (8006598 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80064fe:	401a      	ands	r2, r3
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006504:	4313      	orrs	r3, r2
 8006506:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4a24      	ldr	r2, [pc, #144]	@ (800659c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800650c:	401a      	ands	r2, r3
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	041b      	lsls	r3, r3, #16
 8006514:	4313      	orrs	r3, r2
 8006516:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4a21      	ldr	r2, [pc, #132]	@ (80065a0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800651c:	401a      	ands	r2, r3
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a1e      	ldr	r2, [pc, #120]	@ (80065a4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d11c      	bne.n	800656a <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4a1d      	ldr	r2, [pc, #116]	@ (80065a8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006534:	401a      	ands	r2, r3
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800653a:	051b      	lsls	r3, r3, #20
 800653c:	4313      	orrs	r3, r2
 800653e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4a1a      	ldr	r2, [pc, #104]	@ (80065ac <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006544:	401a      	ands	r2, r3
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4a17      	ldr	r2, [pc, #92]	@ (80065b0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006552:	401a      	ands	r2, r3
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006558:	4313      	orrs	r3, r2
 800655a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4a15      	ldr	r2, [pc, #84]	@ (80065b4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006560:	401a      	ands	r2, r3
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006566:	4313      	orrs	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	223c      	movs	r2, #60	@ 0x3c
 8006576:	2100      	movs	r1, #0
 8006578:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	0018      	movs	r0, r3
 800657e:	46bd      	mov	sp, r7
 8006580:	b004      	add	sp, #16
 8006582:	bd80      	pop	{r7, pc}
 8006584:	fffffcff 	.word	0xfffffcff
 8006588:	fffffbff 	.word	0xfffffbff
 800658c:	fffff7ff 	.word	0xfffff7ff
 8006590:	ffffefff 	.word	0xffffefff
 8006594:	ffffdfff 	.word	0xffffdfff
 8006598:	ffffbfff 	.word	0xffffbfff
 800659c:	fff0ffff 	.word	0xfff0ffff
 80065a0:	efffffff 	.word	0xefffffff
 80065a4:	40012c00 	.word	0x40012c00
 80065a8:	ff0fffff 	.word	0xff0fffff
 80065ac:	feffffff 	.word	0xfeffffff
 80065b0:	fdffffff 	.word	0xfdffffff
 80065b4:	dfffffff 	.word	0xdfffffff

080065b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e046      	b.n	8006658 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2288      	movs	r2, #136	@ 0x88
 80065ce:	589b      	ldr	r3, [r3, r2]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d107      	bne.n	80065e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2284      	movs	r2, #132	@ 0x84
 80065d8:	2100      	movs	r1, #0
 80065da:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	0018      	movs	r0, r3
 80065e0:	f7fc f8b6 	bl	8002750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2288      	movs	r2, #136	@ 0x88
 80065e8:	2124      	movs	r1, #36	@ 0x24
 80065ea:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2101      	movs	r1, #1
 80065f8:	438a      	bics	r2, r1
 80065fa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006600:	2b00      	cmp	r3, #0
 8006602:	d003      	beq.n	800660c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	0018      	movs	r0, r3
 8006608:	f000 fb82 	bl	8006d10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	0018      	movs	r0, r3
 8006610:	f000 f828 	bl	8006664 <UART_SetConfig>
 8006614:	0003      	movs	r3, r0
 8006616:	2b01      	cmp	r3, #1
 8006618:	d101      	bne.n	800661e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e01c      	b.n	8006658 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	490d      	ldr	r1, [pc, #52]	@ (8006660 <HAL_UART_Init+0xa8>)
 800662a:	400a      	ands	r2, r1
 800662c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	212a      	movs	r1, #42	@ 0x2a
 800663a:	438a      	bics	r2, r1
 800663c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2101      	movs	r1, #1
 800664a:	430a      	orrs	r2, r1
 800664c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	0018      	movs	r0, r3
 8006652:	f000 fc11 	bl	8006e78 <UART_CheckIdleState>
 8006656:	0003      	movs	r3, r0
}
 8006658:	0018      	movs	r0, r3
 800665a:	46bd      	mov	sp, r7
 800665c:	b002      	add	sp, #8
 800665e:	bd80      	pop	{r7, pc}
 8006660:	ffffb7ff 	.word	0xffffb7ff

08006664 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006664:	b5b0      	push	{r4, r5, r7, lr}
 8006666:	b090      	sub	sp, #64	@ 0x40
 8006668:	af00      	add	r7, sp, #0
 800666a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800666c:	231a      	movs	r3, #26
 800666e:	2220      	movs	r2, #32
 8006670:	189b      	adds	r3, r3, r2
 8006672:	19db      	adds	r3, r3, r7
 8006674:	2200      	movs	r2, #0
 8006676:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667a:	689a      	ldr	r2, [r3, #8]
 800667c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	431a      	orrs	r2, r3
 8006682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	431a      	orrs	r2, r3
 8006688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	4313      	orrs	r3, r2
 800668e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4ac1      	ldr	r2, [pc, #772]	@ (800699c <UART_SetConfig+0x338>)
 8006698:	4013      	ands	r3, r2
 800669a:	0019      	movs	r1, r3
 800669c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066a2:	430b      	orrs	r3, r1
 80066a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	4abc      	ldr	r2, [pc, #752]	@ (80069a0 <UART_SetConfig+0x33c>)
 80066ae:	4013      	ands	r3, r2
 80066b0:	0018      	movs	r0, r3
 80066b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b4:	68d9      	ldr	r1, [r3, #12]
 80066b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	0003      	movs	r3, r0
 80066bc:	430b      	orrs	r3, r1
 80066be:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4ab6      	ldr	r2, [pc, #728]	@ (80069a4 <UART_SetConfig+0x340>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d009      	beq.n	80066e4 <UART_SetConfig+0x80>
 80066d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4ab4      	ldr	r2, [pc, #720]	@ (80069a8 <UART_SetConfig+0x344>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d004      	beq.n	80066e4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80066e0:	4313      	orrs	r3, r2
 80066e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	4ab0      	ldr	r2, [pc, #704]	@ (80069ac <UART_SetConfig+0x348>)
 80066ec:	4013      	ands	r3, r2
 80066ee:	0019      	movs	r1, r3
 80066f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066f6:	430b      	orrs	r3, r1
 80066f8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80066fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006700:	220f      	movs	r2, #15
 8006702:	4393      	bics	r3, r2
 8006704:	0018      	movs	r0, r3
 8006706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006708:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800670a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	0003      	movs	r3, r0
 8006710:	430b      	orrs	r3, r1
 8006712:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4aa5      	ldr	r2, [pc, #660]	@ (80069b0 <UART_SetConfig+0x34c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d131      	bne.n	8006782 <UART_SetConfig+0x11e>
 800671e:	4ba5      	ldr	r3, [pc, #660]	@ (80069b4 <UART_SetConfig+0x350>)
 8006720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006722:	2203      	movs	r2, #3
 8006724:	4013      	ands	r3, r2
 8006726:	2b03      	cmp	r3, #3
 8006728:	d01d      	beq.n	8006766 <UART_SetConfig+0x102>
 800672a:	d823      	bhi.n	8006774 <UART_SetConfig+0x110>
 800672c:	2b02      	cmp	r3, #2
 800672e:	d00c      	beq.n	800674a <UART_SetConfig+0xe6>
 8006730:	d820      	bhi.n	8006774 <UART_SetConfig+0x110>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <UART_SetConfig+0xd8>
 8006736:	2b01      	cmp	r3, #1
 8006738:	d00e      	beq.n	8006758 <UART_SetConfig+0xf4>
 800673a:	e01b      	b.n	8006774 <UART_SetConfig+0x110>
 800673c:	231b      	movs	r3, #27
 800673e:	2220      	movs	r2, #32
 8006740:	189b      	adds	r3, r3, r2
 8006742:	19db      	adds	r3, r3, r7
 8006744:	2200      	movs	r2, #0
 8006746:	701a      	strb	r2, [r3, #0]
 8006748:	e154      	b.n	80069f4 <UART_SetConfig+0x390>
 800674a:	231b      	movs	r3, #27
 800674c:	2220      	movs	r2, #32
 800674e:	189b      	adds	r3, r3, r2
 8006750:	19db      	adds	r3, r3, r7
 8006752:	2202      	movs	r2, #2
 8006754:	701a      	strb	r2, [r3, #0]
 8006756:	e14d      	b.n	80069f4 <UART_SetConfig+0x390>
 8006758:	231b      	movs	r3, #27
 800675a:	2220      	movs	r2, #32
 800675c:	189b      	adds	r3, r3, r2
 800675e:	19db      	adds	r3, r3, r7
 8006760:	2204      	movs	r2, #4
 8006762:	701a      	strb	r2, [r3, #0]
 8006764:	e146      	b.n	80069f4 <UART_SetConfig+0x390>
 8006766:	231b      	movs	r3, #27
 8006768:	2220      	movs	r2, #32
 800676a:	189b      	adds	r3, r3, r2
 800676c:	19db      	adds	r3, r3, r7
 800676e:	2208      	movs	r2, #8
 8006770:	701a      	strb	r2, [r3, #0]
 8006772:	e13f      	b.n	80069f4 <UART_SetConfig+0x390>
 8006774:	231b      	movs	r3, #27
 8006776:	2220      	movs	r2, #32
 8006778:	189b      	adds	r3, r3, r2
 800677a:	19db      	adds	r3, r3, r7
 800677c:	2210      	movs	r2, #16
 800677e:	701a      	strb	r2, [r3, #0]
 8006780:	e138      	b.n	80069f4 <UART_SetConfig+0x390>
 8006782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a8c      	ldr	r2, [pc, #560]	@ (80069b8 <UART_SetConfig+0x354>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d131      	bne.n	80067f0 <UART_SetConfig+0x18c>
 800678c:	4b89      	ldr	r3, [pc, #548]	@ (80069b4 <UART_SetConfig+0x350>)
 800678e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006790:	220c      	movs	r2, #12
 8006792:	4013      	ands	r3, r2
 8006794:	2b0c      	cmp	r3, #12
 8006796:	d01d      	beq.n	80067d4 <UART_SetConfig+0x170>
 8006798:	d823      	bhi.n	80067e2 <UART_SetConfig+0x17e>
 800679a:	2b08      	cmp	r3, #8
 800679c:	d00c      	beq.n	80067b8 <UART_SetConfig+0x154>
 800679e:	d820      	bhi.n	80067e2 <UART_SetConfig+0x17e>
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d002      	beq.n	80067aa <UART_SetConfig+0x146>
 80067a4:	2b04      	cmp	r3, #4
 80067a6:	d00e      	beq.n	80067c6 <UART_SetConfig+0x162>
 80067a8:	e01b      	b.n	80067e2 <UART_SetConfig+0x17e>
 80067aa:	231b      	movs	r3, #27
 80067ac:	2220      	movs	r2, #32
 80067ae:	189b      	adds	r3, r3, r2
 80067b0:	19db      	adds	r3, r3, r7
 80067b2:	2200      	movs	r2, #0
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	e11d      	b.n	80069f4 <UART_SetConfig+0x390>
 80067b8:	231b      	movs	r3, #27
 80067ba:	2220      	movs	r2, #32
 80067bc:	189b      	adds	r3, r3, r2
 80067be:	19db      	adds	r3, r3, r7
 80067c0:	2202      	movs	r2, #2
 80067c2:	701a      	strb	r2, [r3, #0]
 80067c4:	e116      	b.n	80069f4 <UART_SetConfig+0x390>
 80067c6:	231b      	movs	r3, #27
 80067c8:	2220      	movs	r2, #32
 80067ca:	189b      	adds	r3, r3, r2
 80067cc:	19db      	adds	r3, r3, r7
 80067ce:	2204      	movs	r2, #4
 80067d0:	701a      	strb	r2, [r3, #0]
 80067d2:	e10f      	b.n	80069f4 <UART_SetConfig+0x390>
 80067d4:	231b      	movs	r3, #27
 80067d6:	2220      	movs	r2, #32
 80067d8:	189b      	adds	r3, r3, r2
 80067da:	19db      	adds	r3, r3, r7
 80067dc:	2208      	movs	r2, #8
 80067de:	701a      	strb	r2, [r3, #0]
 80067e0:	e108      	b.n	80069f4 <UART_SetConfig+0x390>
 80067e2:	231b      	movs	r3, #27
 80067e4:	2220      	movs	r2, #32
 80067e6:	189b      	adds	r3, r3, r2
 80067e8:	19db      	adds	r3, r3, r7
 80067ea:	2210      	movs	r2, #16
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	e101      	b.n	80069f4 <UART_SetConfig+0x390>
 80067f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a71      	ldr	r2, [pc, #452]	@ (80069bc <UART_SetConfig+0x358>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d131      	bne.n	800685e <UART_SetConfig+0x1fa>
 80067fa:	4b6e      	ldr	r3, [pc, #440]	@ (80069b4 <UART_SetConfig+0x350>)
 80067fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067fe:	2230      	movs	r2, #48	@ 0x30
 8006800:	4013      	ands	r3, r2
 8006802:	2b30      	cmp	r3, #48	@ 0x30
 8006804:	d01d      	beq.n	8006842 <UART_SetConfig+0x1de>
 8006806:	d823      	bhi.n	8006850 <UART_SetConfig+0x1ec>
 8006808:	2b20      	cmp	r3, #32
 800680a:	d00c      	beq.n	8006826 <UART_SetConfig+0x1c2>
 800680c:	d820      	bhi.n	8006850 <UART_SetConfig+0x1ec>
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <UART_SetConfig+0x1b4>
 8006812:	2b10      	cmp	r3, #16
 8006814:	d00e      	beq.n	8006834 <UART_SetConfig+0x1d0>
 8006816:	e01b      	b.n	8006850 <UART_SetConfig+0x1ec>
 8006818:	231b      	movs	r3, #27
 800681a:	2220      	movs	r2, #32
 800681c:	189b      	adds	r3, r3, r2
 800681e:	19db      	adds	r3, r3, r7
 8006820:	2200      	movs	r2, #0
 8006822:	701a      	strb	r2, [r3, #0]
 8006824:	e0e6      	b.n	80069f4 <UART_SetConfig+0x390>
 8006826:	231b      	movs	r3, #27
 8006828:	2220      	movs	r2, #32
 800682a:	189b      	adds	r3, r3, r2
 800682c:	19db      	adds	r3, r3, r7
 800682e:	2202      	movs	r2, #2
 8006830:	701a      	strb	r2, [r3, #0]
 8006832:	e0df      	b.n	80069f4 <UART_SetConfig+0x390>
 8006834:	231b      	movs	r3, #27
 8006836:	2220      	movs	r2, #32
 8006838:	189b      	adds	r3, r3, r2
 800683a:	19db      	adds	r3, r3, r7
 800683c:	2204      	movs	r2, #4
 800683e:	701a      	strb	r2, [r3, #0]
 8006840:	e0d8      	b.n	80069f4 <UART_SetConfig+0x390>
 8006842:	231b      	movs	r3, #27
 8006844:	2220      	movs	r2, #32
 8006846:	189b      	adds	r3, r3, r2
 8006848:	19db      	adds	r3, r3, r7
 800684a:	2208      	movs	r2, #8
 800684c:	701a      	strb	r2, [r3, #0]
 800684e:	e0d1      	b.n	80069f4 <UART_SetConfig+0x390>
 8006850:	231b      	movs	r3, #27
 8006852:	2220      	movs	r2, #32
 8006854:	189b      	adds	r3, r3, r2
 8006856:	19db      	adds	r3, r3, r7
 8006858:	2210      	movs	r2, #16
 800685a:	701a      	strb	r2, [r3, #0]
 800685c:	e0ca      	b.n	80069f4 <UART_SetConfig+0x390>
 800685e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a57      	ldr	r2, [pc, #348]	@ (80069c0 <UART_SetConfig+0x35c>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d106      	bne.n	8006876 <UART_SetConfig+0x212>
 8006868:	231b      	movs	r3, #27
 800686a:	2220      	movs	r2, #32
 800686c:	189b      	adds	r3, r3, r2
 800686e:	19db      	adds	r3, r3, r7
 8006870:	2200      	movs	r2, #0
 8006872:	701a      	strb	r2, [r3, #0]
 8006874:	e0be      	b.n	80069f4 <UART_SetConfig+0x390>
 8006876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a52      	ldr	r2, [pc, #328]	@ (80069c4 <UART_SetConfig+0x360>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d106      	bne.n	800688e <UART_SetConfig+0x22a>
 8006880:	231b      	movs	r3, #27
 8006882:	2220      	movs	r2, #32
 8006884:	189b      	adds	r3, r3, r2
 8006886:	19db      	adds	r3, r3, r7
 8006888:	2200      	movs	r2, #0
 800688a:	701a      	strb	r2, [r3, #0]
 800688c:	e0b2      	b.n	80069f4 <UART_SetConfig+0x390>
 800688e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a4d      	ldr	r2, [pc, #308]	@ (80069c8 <UART_SetConfig+0x364>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d106      	bne.n	80068a6 <UART_SetConfig+0x242>
 8006898:	231b      	movs	r3, #27
 800689a:	2220      	movs	r2, #32
 800689c:	189b      	adds	r3, r3, r2
 800689e:	19db      	adds	r3, r3, r7
 80068a0:	2200      	movs	r2, #0
 80068a2:	701a      	strb	r2, [r3, #0]
 80068a4:	e0a6      	b.n	80069f4 <UART_SetConfig+0x390>
 80068a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a3e      	ldr	r2, [pc, #248]	@ (80069a4 <UART_SetConfig+0x340>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d13e      	bne.n	800692e <UART_SetConfig+0x2ca>
 80068b0:	4b40      	ldr	r3, [pc, #256]	@ (80069b4 <UART_SetConfig+0x350>)
 80068b2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80068b4:	23c0      	movs	r3, #192	@ 0xc0
 80068b6:	011b      	lsls	r3, r3, #4
 80068b8:	4013      	ands	r3, r2
 80068ba:	22c0      	movs	r2, #192	@ 0xc0
 80068bc:	0112      	lsls	r2, r2, #4
 80068be:	4293      	cmp	r3, r2
 80068c0:	d027      	beq.n	8006912 <UART_SetConfig+0x2ae>
 80068c2:	22c0      	movs	r2, #192	@ 0xc0
 80068c4:	0112      	lsls	r2, r2, #4
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d82a      	bhi.n	8006920 <UART_SetConfig+0x2bc>
 80068ca:	2280      	movs	r2, #128	@ 0x80
 80068cc:	0112      	lsls	r2, r2, #4
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d011      	beq.n	80068f6 <UART_SetConfig+0x292>
 80068d2:	2280      	movs	r2, #128	@ 0x80
 80068d4:	0112      	lsls	r2, r2, #4
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d822      	bhi.n	8006920 <UART_SetConfig+0x2bc>
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d004      	beq.n	80068e8 <UART_SetConfig+0x284>
 80068de:	2280      	movs	r2, #128	@ 0x80
 80068e0:	00d2      	lsls	r2, r2, #3
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d00e      	beq.n	8006904 <UART_SetConfig+0x2a0>
 80068e6:	e01b      	b.n	8006920 <UART_SetConfig+0x2bc>
 80068e8:	231b      	movs	r3, #27
 80068ea:	2220      	movs	r2, #32
 80068ec:	189b      	adds	r3, r3, r2
 80068ee:	19db      	adds	r3, r3, r7
 80068f0:	2200      	movs	r2, #0
 80068f2:	701a      	strb	r2, [r3, #0]
 80068f4:	e07e      	b.n	80069f4 <UART_SetConfig+0x390>
 80068f6:	231b      	movs	r3, #27
 80068f8:	2220      	movs	r2, #32
 80068fa:	189b      	adds	r3, r3, r2
 80068fc:	19db      	adds	r3, r3, r7
 80068fe:	2202      	movs	r2, #2
 8006900:	701a      	strb	r2, [r3, #0]
 8006902:	e077      	b.n	80069f4 <UART_SetConfig+0x390>
 8006904:	231b      	movs	r3, #27
 8006906:	2220      	movs	r2, #32
 8006908:	189b      	adds	r3, r3, r2
 800690a:	19db      	adds	r3, r3, r7
 800690c:	2204      	movs	r2, #4
 800690e:	701a      	strb	r2, [r3, #0]
 8006910:	e070      	b.n	80069f4 <UART_SetConfig+0x390>
 8006912:	231b      	movs	r3, #27
 8006914:	2220      	movs	r2, #32
 8006916:	189b      	adds	r3, r3, r2
 8006918:	19db      	adds	r3, r3, r7
 800691a:	2208      	movs	r2, #8
 800691c:	701a      	strb	r2, [r3, #0]
 800691e:	e069      	b.n	80069f4 <UART_SetConfig+0x390>
 8006920:	231b      	movs	r3, #27
 8006922:	2220      	movs	r2, #32
 8006924:	189b      	adds	r3, r3, r2
 8006926:	19db      	adds	r3, r3, r7
 8006928:	2210      	movs	r2, #16
 800692a:	701a      	strb	r2, [r3, #0]
 800692c:	e062      	b.n	80069f4 <UART_SetConfig+0x390>
 800692e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a1d      	ldr	r2, [pc, #116]	@ (80069a8 <UART_SetConfig+0x344>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d157      	bne.n	80069e8 <UART_SetConfig+0x384>
 8006938:	4b1e      	ldr	r3, [pc, #120]	@ (80069b4 <UART_SetConfig+0x350>)
 800693a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800693c:	23c0      	movs	r3, #192	@ 0xc0
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4013      	ands	r3, r2
 8006942:	22c0      	movs	r2, #192	@ 0xc0
 8006944:	0092      	lsls	r2, r2, #2
 8006946:	4293      	cmp	r3, r2
 8006948:	d040      	beq.n	80069cc <UART_SetConfig+0x368>
 800694a:	22c0      	movs	r2, #192	@ 0xc0
 800694c:	0092      	lsls	r2, r2, #2
 800694e:	4293      	cmp	r3, r2
 8006950:	d843      	bhi.n	80069da <UART_SetConfig+0x376>
 8006952:	2280      	movs	r2, #128	@ 0x80
 8006954:	0092      	lsls	r2, r2, #2
 8006956:	4293      	cmp	r3, r2
 8006958:	d011      	beq.n	800697e <UART_SetConfig+0x31a>
 800695a:	2280      	movs	r2, #128	@ 0x80
 800695c:	0092      	lsls	r2, r2, #2
 800695e:	4293      	cmp	r3, r2
 8006960:	d83b      	bhi.n	80069da <UART_SetConfig+0x376>
 8006962:	2b00      	cmp	r3, #0
 8006964:	d004      	beq.n	8006970 <UART_SetConfig+0x30c>
 8006966:	2280      	movs	r2, #128	@ 0x80
 8006968:	0052      	lsls	r2, r2, #1
 800696a:	4293      	cmp	r3, r2
 800696c:	d00e      	beq.n	800698c <UART_SetConfig+0x328>
 800696e:	e034      	b.n	80069da <UART_SetConfig+0x376>
 8006970:	231b      	movs	r3, #27
 8006972:	2220      	movs	r2, #32
 8006974:	189b      	adds	r3, r3, r2
 8006976:	19db      	adds	r3, r3, r7
 8006978:	2200      	movs	r2, #0
 800697a:	701a      	strb	r2, [r3, #0]
 800697c:	e03a      	b.n	80069f4 <UART_SetConfig+0x390>
 800697e:	231b      	movs	r3, #27
 8006980:	2220      	movs	r2, #32
 8006982:	189b      	adds	r3, r3, r2
 8006984:	19db      	adds	r3, r3, r7
 8006986:	2202      	movs	r2, #2
 8006988:	701a      	strb	r2, [r3, #0]
 800698a:	e033      	b.n	80069f4 <UART_SetConfig+0x390>
 800698c:	231b      	movs	r3, #27
 800698e:	2220      	movs	r2, #32
 8006990:	189b      	adds	r3, r3, r2
 8006992:	19db      	adds	r3, r3, r7
 8006994:	2204      	movs	r2, #4
 8006996:	701a      	strb	r2, [r3, #0]
 8006998:	e02c      	b.n	80069f4 <UART_SetConfig+0x390>
 800699a:	46c0      	nop			@ (mov r8, r8)
 800699c:	cfff69f3 	.word	0xcfff69f3
 80069a0:	ffffcfff 	.word	0xffffcfff
 80069a4:	40008000 	.word	0x40008000
 80069a8:	40008400 	.word	0x40008400
 80069ac:	11fff4ff 	.word	0x11fff4ff
 80069b0:	40013800 	.word	0x40013800
 80069b4:	40021000 	.word	0x40021000
 80069b8:	40004400 	.word	0x40004400
 80069bc:	40004800 	.word	0x40004800
 80069c0:	40004c00 	.word	0x40004c00
 80069c4:	40005000 	.word	0x40005000
 80069c8:	40013c00 	.word	0x40013c00
 80069cc:	231b      	movs	r3, #27
 80069ce:	2220      	movs	r2, #32
 80069d0:	189b      	adds	r3, r3, r2
 80069d2:	19db      	adds	r3, r3, r7
 80069d4:	2208      	movs	r2, #8
 80069d6:	701a      	strb	r2, [r3, #0]
 80069d8:	e00c      	b.n	80069f4 <UART_SetConfig+0x390>
 80069da:	231b      	movs	r3, #27
 80069dc:	2220      	movs	r2, #32
 80069de:	189b      	adds	r3, r3, r2
 80069e0:	19db      	adds	r3, r3, r7
 80069e2:	2210      	movs	r2, #16
 80069e4:	701a      	strb	r2, [r3, #0]
 80069e6:	e005      	b.n	80069f4 <UART_SetConfig+0x390>
 80069e8:	231b      	movs	r3, #27
 80069ea:	2220      	movs	r2, #32
 80069ec:	189b      	adds	r3, r3, r2
 80069ee:	19db      	adds	r3, r3, r7
 80069f0:	2210      	movs	r2, #16
 80069f2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4ac1      	ldr	r2, [pc, #772]	@ (8006d00 <UART_SetConfig+0x69c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d005      	beq.n	8006a0a <UART_SetConfig+0x3a6>
 80069fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4ac0      	ldr	r2, [pc, #768]	@ (8006d04 <UART_SetConfig+0x6a0>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d000      	beq.n	8006a0a <UART_SetConfig+0x3a6>
 8006a08:	e093      	b.n	8006b32 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006a0a:	231b      	movs	r3, #27
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	189b      	adds	r3, r3, r2
 8006a10:	19db      	adds	r3, r3, r7
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b08      	cmp	r3, #8
 8006a16:	d015      	beq.n	8006a44 <UART_SetConfig+0x3e0>
 8006a18:	dc18      	bgt.n	8006a4c <UART_SetConfig+0x3e8>
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	d00d      	beq.n	8006a3a <UART_SetConfig+0x3d6>
 8006a1e:	dc15      	bgt.n	8006a4c <UART_SetConfig+0x3e8>
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <UART_SetConfig+0x3c6>
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d005      	beq.n	8006a34 <UART_SetConfig+0x3d0>
 8006a28:	e010      	b.n	8006a4c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a2a:	f7fd fe69 	bl	8004700 <HAL_RCC_GetPCLK1Freq>
 8006a2e:	0003      	movs	r3, r0
 8006a30:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a32:	e014      	b.n	8006a5e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a34:	4bb4      	ldr	r3, [pc, #720]	@ (8006d08 <UART_SetConfig+0x6a4>)
 8006a36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a38:	e011      	b.n	8006a5e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a3a:	f7fd fdd5 	bl	80045e8 <HAL_RCC_GetSysClockFreq>
 8006a3e:	0003      	movs	r3, r0
 8006a40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a42:	e00c      	b.n	8006a5e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a44:	2380      	movs	r3, #128	@ 0x80
 8006a46:	021b      	lsls	r3, r3, #8
 8006a48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a4a:	e008      	b.n	8006a5e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8006a50:	231a      	movs	r3, #26
 8006a52:	2220      	movs	r2, #32
 8006a54:	189b      	adds	r3, r3, r2
 8006a56:	19db      	adds	r3, r3, r7
 8006a58:	2201      	movs	r2, #1
 8006a5a:	701a      	strb	r2, [r3, #0]
        break;
 8006a5c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d100      	bne.n	8006a66 <UART_SetConfig+0x402>
 8006a64:	e135      	b.n	8006cd2 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a6a:	4ba8      	ldr	r3, [pc, #672]	@ (8006d0c <UART_SetConfig+0x6a8>)
 8006a6c:	0052      	lsls	r2, r2, #1
 8006a6e:	5ad3      	ldrh	r3, [r2, r3]
 8006a70:	0019      	movs	r1, r3
 8006a72:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006a74:	f7f9 fb50 	bl	8000118 <__udivsi3>
 8006a78:	0003      	movs	r3, r0
 8006a7a:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	0013      	movs	r3, r2
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	189b      	adds	r3, r3, r2
 8006a86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d305      	bcc.n	8006a98 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d906      	bls.n	8006aa6 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8006a98:	231a      	movs	r3, #26
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	189b      	adds	r3, r3, r2
 8006a9e:	19db      	adds	r3, r3, r7
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	701a      	strb	r2, [r3, #0]
 8006aa4:	e044      	b.n	8006b30 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aa8:	61bb      	str	r3, [r7, #24]
 8006aaa:	2300      	movs	r3, #0
 8006aac:	61fb      	str	r3, [r7, #28]
 8006aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ab2:	4b96      	ldr	r3, [pc, #600]	@ (8006d0c <UART_SetConfig+0x6a8>)
 8006ab4:	0052      	lsls	r2, r2, #1
 8006ab6:	5ad3      	ldrh	r3, [r2, r3]
 8006ab8:	613b      	str	r3, [r7, #16]
 8006aba:	2300      	movs	r3, #0
 8006abc:	617b      	str	r3, [r7, #20]
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	69b8      	ldr	r0, [r7, #24]
 8006ac4:	69f9      	ldr	r1, [r7, #28]
 8006ac6:	f7f9 fc9d 	bl	8000404 <__aeabi_uldivmod>
 8006aca:	0002      	movs	r2, r0
 8006acc:	000b      	movs	r3, r1
 8006ace:	0e11      	lsrs	r1, r2, #24
 8006ad0:	021d      	lsls	r5, r3, #8
 8006ad2:	430d      	orrs	r5, r1
 8006ad4:	0214      	lsls	r4, r2, #8
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	085b      	lsrs	r3, r3, #1
 8006adc:	60bb      	str	r3, [r7, #8]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60fb      	str	r3, [r7, #12]
 8006ae2:	68b8      	ldr	r0, [r7, #8]
 8006ae4:	68f9      	ldr	r1, [r7, #12]
 8006ae6:	1900      	adds	r0, r0, r4
 8006ae8:	4169      	adcs	r1, r5
 8006aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	603b      	str	r3, [r7, #0]
 8006af0:	2300      	movs	r3, #0
 8006af2:	607b      	str	r3, [r7, #4]
 8006af4:	683a      	ldr	r2, [r7, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f7f9 fc84 	bl	8000404 <__aeabi_uldivmod>
 8006afc:	0002      	movs	r2, r0
 8006afe:	000b      	movs	r3, r1
 8006b00:	0013      	movs	r3, r2
 8006b02:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b06:	23c0      	movs	r3, #192	@ 0xc0
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d309      	bcc.n	8006b22 <UART_SetConfig+0x4be>
 8006b0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b10:	2380      	movs	r3, #128	@ 0x80
 8006b12:	035b      	lsls	r3, r3, #13
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d204      	bcs.n	8006b22 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8006b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b1e:	60da      	str	r2, [r3, #12]
 8006b20:	e006      	b.n	8006b30 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8006b22:	231a      	movs	r3, #26
 8006b24:	2220      	movs	r2, #32
 8006b26:	189b      	adds	r3, r3, r2
 8006b28:	19db      	adds	r3, r3, r7
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8006b2e:	e0d0      	b.n	8006cd2 <UART_SetConfig+0x66e>
 8006b30:	e0cf      	b.n	8006cd2 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b34:	69da      	ldr	r2, [r3, #28]
 8006b36:	2380      	movs	r3, #128	@ 0x80
 8006b38:	021b      	lsls	r3, r3, #8
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d000      	beq.n	8006b40 <UART_SetConfig+0x4dc>
 8006b3e:	e070      	b.n	8006c22 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8006b40:	231b      	movs	r3, #27
 8006b42:	2220      	movs	r2, #32
 8006b44:	189b      	adds	r3, r3, r2
 8006b46:	19db      	adds	r3, r3, r7
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	2b08      	cmp	r3, #8
 8006b4c:	d015      	beq.n	8006b7a <UART_SetConfig+0x516>
 8006b4e:	dc18      	bgt.n	8006b82 <UART_SetConfig+0x51e>
 8006b50:	2b04      	cmp	r3, #4
 8006b52:	d00d      	beq.n	8006b70 <UART_SetConfig+0x50c>
 8006b54:	dc15      	bgt.n	8006b82 <UART_SetConfig+0x51e>
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d002      	beq.n	8006b60 <UART_SetConfig+0x4fc>
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d005      	beq.n	8006b6a <UART_SetConfig+0x506>
 8006b5e:	e010      	b.n	8006b82 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b60:	f7fd fdce 	bl	8004700 <HAL_RCC_GetPCLK1Freq>
 8006b64:	0003      	movs	r3, r0
 8006b66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b68:	e014      	b.n	8006b94 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b6a:	4b67      	ldr	r3, [pc, #412]	@ (8006d08 <UART_SetConfig+0x6a4>)
 8006b6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b6e:	e011      	b.n	8006b94 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b70:	f7fd fd3a 	bl	80045e8 <HAL_RCC_GetSysClockFreq>
 8006b74:	0003      	movs	r3, r0
 8006b76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b78:	e00c      	b.n	8006b94 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b7a:	2380      	movs	r3, #128	@ 0x80
 8006b7c:	021b      	lsls	r3, r3, #8
 8006b7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b80:	e008      	b.n	8006b94 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8006b86:	231a      	movs	r3, #26
 8006b88:	2220      	movs	r2, #32
 8006b8a:	189b      	adds	r3, r3, r2
 8006b8c:	19db      	adds	r3, r3, r7
 8006b8e:	2201      	movs	r2, #1
 8006b90:	701a      	strb	r2, [r3, #0]
        break;
 8006b92:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d100      	bne.n	8006b9c <UART_SetConfig+0x538>
 8006b9a:	e09a      	b.n	8006cd2 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ba0:	4b5a      	ldr	r3, [pc, #360]	@ (8006d0c <UART_SetConfig+0x6a8>)
 8006ba2:	0052      	lsls	r2, r2, #1
 8006ba4:	5ad3      	ldrh	r3, [r2, r3]
 8006ba6:	0019      	movs	r1, r3
 8006ba8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006baa:	f7f9 fab5 	bl	8000118 <__udivsi3>
 8006bae:	0003      	movs	r3, r0
 8006bb0:	005a      	lsls	r2, r3, #1
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	085b      	lsrs	r3, r3, #1
 8006bb8:	18d2      	adds	r2, r2, r3
 8006bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	0019      	movs	r1, r3
 8006bc0:	0010      	movs	r0, r2
 8006bc2:	f7f9 faa9 	bl	8000118 <__udivsi3>
 8006bc6:	0003      	movs	r3, r0
 8006bc8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bcc:	2b0f      	cmp	r3, #15
 8006bce:	d921      	bls.n	8006c14 <UART_SetConfig+0x5b0>
 8006bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bd2:	2380      	movs	r3, #128	@ 0x80
 8006bd4:	025b      	lsls	r3, r3, #9
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d21c      	bcs.n	8006c14 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	200e      	movs	r0, #14
 8006be0:	2420      	movs	r4, #32
 8006be2:	1903      	adds	r3, r0, r4
 8006be4:	19db      	adds	r3, r3, r7
 8006be6:	210f      	movs	r1, #15
 8006be8:	438a      	bics	r2, r1
 8006bea:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bee:	085b      	lsrs	r3, r3, #1
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	2207      	movs	r2, #7
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	b299      	uxth	r1, r3
 8006bf8:	1903      	adds	r3, r0, r4
 8006bfa:	19db      	adds	r3, r3, r7
 8006bfc:	1902      	adds	r2, r0, r4
 8006bfe:	19d2      	adds	r2, r2, r7
 8006c00:	8812      	ldrh	r2, [r2, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	1902      	adds	r2, r0, r4
 8006c0c:	19d2      	adds	r2, r2, r7
 8006c0e:	8812      	ldrh	r2, [r2, #0]
 8006c10:	60da      	str	r2, [r3, #12]
 8006c12:	e05e      	b.n	8006cd2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8006c14:	231a      	movs	r3, #26
 8006c16:	2220      	movs	r2, #32
 8006c18:	189b      	adds	r3, r3, r2
 8006c1a:	19db      	adds	r3, r3, r7
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	701a      	strb	r2, [r3, #0]
 8006c20:	e057      	b.n	8006cd2 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c22:	231b      	movs	r3, #27
 8006c24:	2220      	movs	r2, #32
 8006c26:	189b      	adds	r3, r3, r2
 8006c28:	19db      	adds	r3, r3, r7
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b08      	cmp	r3, #8
 8006c2e:	d015      	beq.n	8006c5c <UART_SetConfig+0x5f8>
 8006c30:	dc18      	bgt.n	8006c64 <UART_SetConfig+0x600>
 8006c32:	2b04      	cmp	r3, #4
 8006c34:	d00d      	beq.n	8006c52 <UART_SetConfig+0x5ee>
 8006c36:	dc15      	bgt.n	8006c64 <UART_SetConfig+0x600>
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d002      	beq.n	8006c42 <UART_SetConfig+0x5de>
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d005      	beq.n	8006c4c <UART_SetConfig+0x5e8>
 8006c40:	e010      	b.n	8006c64 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c42:	f7fd fd5d 	bl	8004700 <HAL_RCC_GetPCLK1Freq>
 8006c46:	0003      	movs	r3, r0
 8006c48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c4a:	e014      	b.n	8006c76 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c4c:	4b2e      	ldr	r3, [pc, #184]	@ (8006d08 <UART_SetConfig+0x6a4>)
 8006c4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c50:	e011      	b.n	8006c76 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c52:	f7fd fcc9 	bl	80045e8 <HAL_RCC_GetSysClockFreq>
 8006c56:	0003      	movs	r3, r0
 8006c58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c5a:	e00c      	b.n	8006c76 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c5c:	2380      	movs	r3, #128	@ 0x80
 8006c5e:	021b      	lsls	r3, r3, #8
 8006c60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c62:	e008      	b.n	8006c76 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8006c68:	231a      	movs	r3, #26
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	189b      	adds	r3, r3, r2
 8006c6e:	19db      	adds	r3, r3, r7
 8006c70:	2201      	movs	r2, #1
 8006c72:	701a      	strb	r2, [r3, #0]
        break;
 8006c74:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d02a      	beq.n	8006cd2 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c80:	4b22      	ldr	r3, [pc, #136]	@ (8006d0c <UART_SetConfig+0x6a8>)
 8006c82:	0052      	lsls	r2, r2, #1
 8006c84:	5ad3      	ldrh	r3, [r2, r3]
 8006c86:	0019      	movs	r1, r3
 8006c88:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006c8a:	f7f9 fa45 	bl	8000118 <__udivsi3>
 8006c8e:	0003      	movs	r3, r0
 8006c90:	001a      	movs	r2, r3
 8006c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	085b      	lsrs	r3, r3, #1
 8006c98:	18d2      	adds	r2, r2, r3
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	0019      	movs	r1, r3
 8006ca0:	0010      	movs	r0, r2
 8006ca2:	f7f9 fa39 	bl	8000118 <__udivsi3>
 8006ca6:	0003      	movs	r3, r0
 8006ca8:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cac:	2b0f      	cmp	r3, #15
 8006cae:	d90a      	bls.n	8006cc6 <UART_SetConfig+0x662>
 8006cb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cb2:	2380      	movs	r3, #128	@ 0x80
 8006cb4:	025b      	lsls	r3, r3, #9
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d205      	bcs.n	8006cc6 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	60da      	str	r2, [r3, #12]
 8006cc4:	e005      	b.n	8006cd2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8006cc6:	231a      	movs	r3, #26
 8006cc8:	2220      	movs	r2, #32
 8006cca:	189b      	adds	r3, r3, r2
 8006ccc:	19db      	adds	r3, r3, r7
 8006cce:	2201      	movs	r2, #1
 8006cd0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd4:	226a      	movs	r2, #106	@ 0x6a
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cdc:	2268      	movs	r2, #104	@ 0x68
 8006cde:	2101      	movs	r1, #1
 8006ce0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cea:	2200      	movs	r2, #0
 8006cec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006cee:	231a      	movs	r3, #26
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	189b      	adds	r3, r3, r2
 8006cf4:	19db      	adds	r3, r3, r7
 8006cf6:	781b      	ldrb	r3, [r3, #0]
}
 8006cf8:	0018      	movs	r0, r3
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	b010      	add	sp, #64	@ 0x40
 8006cfe:	bdb0      	pop	{r4, r5, r7, pc}
 8006d00:	40008000 	.word	0x40008000
 8006d04:	40008400 	.word	0x40008400
 8006d08:	00f42400 	.word	0x00f42400
 8006d0c:	080083cc 	.word	0x080083cc

08006d10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d1c:	2208      	movs	r2, #8
 8006d1e:	4013      	ands	r3, r2
 8006d20:	d00b      	beq.n	8006d3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	4a4a      	ldr	r2, [pc, #296]	@ (8006e54 <UART_AdvFeatureConfig+0x144>)
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	0019      	movs	r1, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d3e:	2201      	movs	r2, #1
 8006d40:	4013      	ands	r3, r2
 8006d42:	d00b      	beq.n	8006d5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	4a43      	ldr	r2, [pc, #268]	@ (8006e58 <UART_AdvFeatureConfig+0x148>)
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	0019      	movs	r1, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	430a      	orrs	r2, r1
 8006d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d60:	2202      	movs	r2, #2
 8006d62:	4013      	ands	r3, r2
 8006d64:	d00b      	beq.n	8006d7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	4a3b      	ldr	r2, [pc, #236]	@ (8006e5c <UART_AdvFeatureConfig+0x14c>)
 8006d6e:	4013      	ands	r3, r2
 8006d70:	0019      	movs	r1, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d82:	2204      	movs	r2, #4
 8006d84:	4013      	ands	r3, r2
 8006d86:	d00b      	beq.n	8006da0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	4a34      	ldr	r2, [pc, #208]	@ (8006e60 <UART_AdvFeatureConfig+0x150>)
 8006d90:	4013      	ands	r3, r2
 8006d92:	0019      	movs	r1, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	430a      	orrs	r2, r1
 8006d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da4:	2210      	movs	r2, #16
 8006da6:	4013      	ands	r3, r2
 8006da8:	d00b      	beq.n	8006dc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	4a2c      	ldr	r2, [pc, #176]	@ (8006e64 <UART_AdvFeatureConfig+0x154>)
 8006db2:	4013      	ands	r3, r2
 8006db4:	0019      	movs	r1, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	4013      	ands	r3, r2
 8006dca:	d00b      	beq.n	8006de4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	4a25      	ldr	r2, [pc, #148]	@ (8006e68 <UART_AdvFeatureConfig+0x158>)
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	0019      	movs	r1, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	430a      	orrs	r2, r1
 8006de2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de8:	2240      	movs	r2, #64	@ 0x40
 8006dea:	4013      	ands	r3, r2
 8006dec:	d01d      	beq.n	8006e2a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	4a1d      	ldr	r2, [pc, #116]	@ (8006e6c <UART_AdvFeatureConfig+0x15c>)
 8006df6:	4013      	ands	r3, r2
 8006df8:	0019      	movs	r1, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	430a      	orrs	r2, r1
 8006e04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e0a:	2380      	movs	r3, #128	@ 0x80
 8006e0c:	035b      	lsls	r3, r3, #13
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d10b      	bne.n	8006e2a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	4a15      	ldr	r2, [pc, #84]	@ (8006e70 <UART_AdvFeatureConfig+0x160>)
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	0019      	movs	r1, r3
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e2e:	2280      	movs	r2, #128	@ 0x80
 8006e30:	4013      	ands	r3, r2
 8006e32:	d00b      	beq.n	8006e4c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8006e74 <UART_AdvFeatureConfig+0x164>)
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	0019      	movs	r1, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	605a      	str	r2, [r3, #4]
  }
}
 8006e4c:	46c0      	nop			@ (mov r8, r8)
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	b002      	add	sp, #8
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	ffff7fff 	.word	0xffff7fff
 8006e58:	fffdffff 	.word	0xfffdffff
 8006e5c:	fffeffff 	.word	0xfffeffff
 8006e60:	fffbffff 	.word	0xfffbffff
 8006e64:	ffffefff 	.word	0xffffefff
 8006e68:	ffffdfff 	.word	0xffffdfff
 8006e6c:	ffefffff 	.word	0xffefffff
 8006e70:	ff9fffff 	.word	0xff9fffff
 8006e74:	fff7ffff 	.word	0xfff7ffff

08006e78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b092      	sub	sp, #72	@ 0x48
 8006e7c:	af02      	add	r7, sp, #8
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2290      	movs	r2, #144	@ 0x90
 8006e84:	2100      	movs	r1, #0
 8006e86:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e88:	f7fb fe18 	bl	8002abc <HAL_GetTick>
 8006e8c:	0003      	movs	r3, r0
 8006e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2208      	movs	r2, #8
 8006e98:	4013      	ands	r3, r2
 8006e9a:	2b08      	cmp	r3, #8
 8006e9c:	d12d      	bne.n	8006efa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ea0:	2280      	movs	r2, #128	@ 0x80
 8006ea2:	0391      	lsls	r1, r2, #14
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	4a47      	ldr	r2, [pc, #284]	@ (8006fc4 <UART_CheckIdleState+0x14c>)
 8006ea8:	9200      	str	r2, [sp, #0]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f000 f88e 	bl	8006fcc <UART_WaitOnFlagUntilTimeout>
 8006eb0:	1e03      	subs	r3, r0, #0
 8006eb2:	d022      	beq.n	8006efa <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8006eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ec4:	f383 8810 	msr	PRIMASK, r3
}
 8006ec8:	46c0      	nop			@ (mov r8, r8)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2180      	movs	r1, #128	@ 0x80
 8006ed6:	438a      	bics	r2, r1
 8006ed8:	601a      	str	r2, [r3, #0]
 8006eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee0:	f383 8810 	msr	PRIMASK, r3
}
 8006ee4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2288      	movs	r2, #136	@ 0x88
 8006eea:	2120      	movs	r1, #32
 8006eec:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2284      	movs	r2, #132	@ 0x84
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e060      	b.n	8006fbc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2204      	movs	r2, #4
 8006f02:	4013      	ands	r3, r2
 8006f04:	2b04      	cmp	r3, #4
 8006f06:	d146      	bne.n	8006f96 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f0a:	2280      	movs	r2, #128	@ 0x80
 8006f0c:	03d1      	lsls	r1, r2, #15
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	4a2c      	ldr	r2, [pc, #176]	@ (8006fc4 <UART_CheckIdleState+0x14c>)
 8006f12:	9200      	str	r2, [sp, #0]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f000 f859 	bl	8006fcc <UART_WaitOnFlagUntilTimeout>
 8006f1a:	1e03      	subs	r3, r0, #0
 8006f1c:	d03b      	beq.n	8006f96 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8006f22:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f24:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f26:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f28:	2301      	movs	r3, #1
 8006f2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f383 8810 	msr	PRIMASK, r3
}
 8006f32:	46c0      	nop			@ (mov r8, r8)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4922      	ldr	r1, [pc, #136]	@ (8006fc8 <UART_CheckIdleState+0x150>)
 8006f40:	400a      	ands	r2, r1
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	f383 8810 	msr	PRIMASK, r3
}
 8006f4e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f50:	f3ef 8310 	mrs	r3, PRIMASK
 8006f54:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f56:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f58:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	f383 8810 	msr	PRIMASK, r3
}
 8006f64:	46c0      	nop			@ (mov r8, r8)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	689a      	ldr	r2, [r3, #8]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2101      	movs	r1, #1
 8006f72:	438a      	bics	r2, r1
 8006f74:	609a      	str	r2, [r3, #8]
 8006f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f78:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f7a:	6a3b      	ldr	r3, [r7, #32]
 8006f7c:	f383 8810 	msr	PRIMASK, r3
}
 8006f80:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	228c      	movs	r2, #140	@ 0x8c
 8006f86:	2120      	movs	r1, #32
 8006f88:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2284      	movs	r2, #132	@ 0x84
 8006f8e:	2100      	movs	r1, #0
 8006f90:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e012      	b.n	8006fbc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2288      	movs	r2, #136	@ 0x88
 8006f9a:	2120      	movs	r1, #32
 8006f9c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	228c      	movs	r2, #140	@ 0x8c
 8006fa2:	2120      	movs	r1, #32
 8006fa4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2284      	movs	r2, #132	@ 0x84
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006fba:	2300      	movs	r3, #0
}
 8006fbc:	0018      	movs	r0, r3
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	b010      	add	sp, #64	@ 0x40
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	01ffffff 	.word	0x01ffffff
 8006fc8:	fffffedf 	.word	0xfffffedf

08006fcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	603b      	str	r3, [r7, #0]
 8006fd8:	1dfb      	adds	r3, r7, #7
 8006fda:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fdc:	e051      	b.n	8007082 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	d04e      	beq.n	8007082 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fe4:	f7fb fd6a 	bl	8002abc <HAL_GetTick>
 8006fe8:	0002      	movs	r2, r0
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d302      	bcc.n	8006ffa <UART_WaitOnFlagUntilTimeout+0x2e>
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e051      	b.n	80070a2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2204      	movs	r2, #4
 8007006:	4013      	ands	r3, r2
 8007008:	d03b      	beq.n	8007082 <UART_WaitOnFlagUntilTimeout+0xb6>
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	2b80      	cmp	r3, #128	@ 0x80
 800700e:	d038      	beq.n	8007082 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	2b40      	cmp	r3, #64	@ 0x40
 8007014:	d035      	beq.n	8007082 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	69db      	ldr	r3, [r3, #28]
 800701c:	2208      	movs	r2, #8
 800701e:	4013      	ands	r3, r2
 8007020:	2b08      	cmp	r3, #8
 8007022:	d111      	bne.n	8007048 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2208      	movs	r2, #8
 800702a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	0018      	movs	r0, r3
 8007030:	f000 f83c 	bl	80070ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2290      	movs	r2, #144	@ 0x90
 8007038:	2108      	movs	r1, #8
 800703a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2284      	movs	r2, #132	@ 0x84
 8007040:	2100      	movs	r1, #0
 8007042:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e02c      	b.n	80070a2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	69da      	ldr	r2, [r3, #28]
 800704e:	2380      	movs	r3, #128	@ 0x80
 8007050:	011b      	lsls	r3, r3, #4
 8007052:	401a      	ands	r2, r3
 8007054:	2380      	movs	r3, #128	@ 0x80
 8007056:	011b      	lsls	r3, r3, #4
 8007058:	429a      	cmp	r2, r3
 800705a:	d112      	bne.n	8007082 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2280      	movs	r2, #128	@ 0x80
 8007062:	0112      	lsls	r2, r2, #4
 8007064:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	0018      	movs	r0, r3
 800706a:	f000 f81f 	bl	80070ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2290      	movs	r2, #144	@ 0x90
 8007072:	2120      	movs	r1, #32
 8007074:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2284      	movs	r2, #132	@ 0x84
 800707a:	2100      	movs	r1, #0
 800707c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e00f      	b.n	80070a2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	69db      	ldr	r3, [r3, #28]
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	4013      	ands	r3, r2
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	425a      	negs	r2, r3
 8007092:	4153      	adcs	r3, r2
 8007094:	b2db      	uxtb	r3, r3
 8007096:	001a      	movs	r2, r3
 8007098:	1dfb      	adds	r3, r7, #7
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	429a      	cmp	r2, r3
 800709e:	d09e      	beq.n	8006fde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	0018      	movs	r0, r3
 80070a4:	46bd      	mov	sp, r7
 80070a6:	b004      	add	sp, #16
 80070a8:	bd80      	pop	{r7, pc}
	...

080070ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b08e      	sub	sp, #56	@ 0x38
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070b4:	f3ef 8310 	mrs	r3, PRIMASK
 80070b8:	617b      	str	r3, [r7, #20]
  return(result);
 80070ba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80070be:	2301      	movs	r3, #1
 80070c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	f383 8810 	msr	PRIMASK, r3
}
 80070c8:	46c0      	nop			@ (mov r8, r8)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4926      	ldr	r1, [pc, #152]	@ (8007170 <UART_EndRxTransfer+0xc4>)
 80070d6:	400a      	ands	r2, r1
 80070d8:	601a      	str	r2, [r3, #0]
 80070da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	f383 8810 	msr	PRIMASK, r3
}
 80070e4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070e6:	f3ef 8310 	mrs	r3, PRIMASK
 80070ea:	623b      	str	r3, [r7, #32]
  return(result);
 80070ec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80070f0:	2301      	movs	r3, #1
 80070f2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f6:	f383 8810 	msr	PRIMASK, r3
}
 80070fa:	46c0      	nop			@ (mov r8, r8)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689a      	ldr	r2, [r3, #8]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	491b      	ldr	r1, [pc, #108]	@ (8007174 <UART_EndRxTransfer+0xc8>)
 8007108:	400a      	ands	r2, r1
 800710a:	609a      	str	r2, [r3, #8]
 800710c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800710e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007112:	f383 8810 	msr	PRIMASK, r3
}
 8007116:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800711c:	2b01      	cmp	r3, #1
 800711e:	d118      	bne.n	8007152 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007120:	f3ef 8310 	mrs	r3, PRIMASK
 8007124:	60bb      	str	r3, [r7, #8]
  return(result);
 8007126:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007128:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800712a:	2301      	movs	r3, #1
 800712c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f383 8810 	msr	PRIMASK, r3
}
 8007134:	46c0      	nop			@ (mov r8, r8)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2110      	movs	r1, #16
 8007142:	438a      	bics	r2, r1
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007148:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	f383 8810 	msr	PRIMASK, r3
}
 8007150:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	228c      	movs	r2, #140	@ 0x8c
 8007156:	2120      	movs	r1, #32
 8007158:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007166:	46c0      	nop			@ (mov r8, r8)
 8007168:	46bd      	mov	sp, r7
 800716a:	b00e      	add	sp, #56	@ 0x38
 800716c:	bd80      	pop	{r7, pc}
 800716e:	46c0      	nop			@ (mov r8, r8)
 8007170:	fffffedf 	.word	0xfffffedf
 8007174:	effffffe 	.word	0xeffffffe

08007178 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2284      	movs	r2, #132	@ 0x84
 8007184:	5c9b      	ldrb	r3, [r3, r2]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d101      	bne.n	800718e <HAL_UARTEx_DisableFifoMode+0x16>
 800718a:	2302      	movs	r3, #2
 800718c:	e027      	b.n	80071de <HAL_UARTEx_DisableFifoMode+0x66>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2284      	movs	r2, #132	@ 0x84
 8007192:	2101      	movs	r1, #1
 8007194:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2288      	movs	r2, #136	@ 0x88
 800719a:	2124      	movs	r1, #36	@ 0x24
 800719c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2101      	movs	r1, #1
 80071b2:	438a      	bics	r2, r1
 80071b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4a0b      	ldr	r2, [pc, #44]	@ (80071e8 <HAL_UARTEx_DisableFifoMode+0x70>)
 80071ba:	4013      	ands	r3, r2
 80071bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2288      	movs	r2, #136	@ 0x88
 80071d0:	2120      	movs	r1, #32
 80071d2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2284      	movs	r2, #132	@ 0x84
 80071d8:	2100      	movs	r1, #0
 80071da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	0018      	movs	r0, r3
 80071e0:	46bd      	mov	sp, r7
 80071e2:	b004      	add	sp, #16
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	46c0      	nop			@ (mov r8, r8)
 80071e8:	dfffffff 	.word	0xdfffffff

080071ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2284      	movs	r2, #132	@ 0x84
 80071fa:	5c9b      	ldrb	r3, [r3, r2]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d101      	bne.n	8007204 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007200:	2302      	movs	r3, #2
 8007202:	e02e      	b.n	8007262 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2284      	movs	r2, #132	@ 0x84
 8007208:	2101      	movs	r1, #1
 800720a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2288      	movs	r2, #136	@ 0x88
 8007210:	2124      	movs	r1, #36	@ 0x24
 8007212:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2101      	movs	r1, #1
 8007228:	438a      	bics	r2, r1
 800722a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	00db      	lsls	r3, r3, #3
 8007234:	08d9      	lsrs	r1, r3, #3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	430a      	orrs	r2, r1
 800723e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	0018      	movs	r0, r3
 8007244:	f000 f854 	bl	80072f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2288      	movs	r2, #136	@ 0x88
 8007254:	2120      	movs	r1, #32
 8007256:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2284      	movs	r2, #132	@ 0x84
 800725c:	2100      	movs	r1, #0
 800725e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	0018      	movs	r0, r3
 8007264:	46bd      	mov	sp, r7
 8007266:	b004      	add	sp, #16
 8007268:	bd80      	pop	{r7, pc}
	...

0800726c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b084      	sub	sp, #16
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2284      	movs	r2, #132	@ 0x84
 800727a:	5c9b      	ldrb	r3, [r3, r2]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d101      	bne.n	8007284 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007280:	2302      	movs	r3, #2
 8007282:	e02f      	b.n	80072e4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2284      	movs	r2, #132	@ 0x84
 8007288:	2101      	movs	r1, #1
 800728a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2288      	movs	r2, #136	@ 0x88
 8007290:	2124      	movs	r1, #36	@ 0x24
 8007292:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2101      	movs	r1, #1
 80072a8:	438a      	bics	r2, r1
 80072aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	4a0e      	ldr	r2, [pc, #56]	@ (80072ec <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80072b4:	4013      	ands	r3, r2
 80072b6:	0019      	movs	r1, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	683a      	ldr	r2, [r7, #0]
 80072be:	430a      	orrs	r2, r1
 80072c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	0018      	movs	r0, r3
 80072c6:	f000 f813 	bl	80072f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2288      	movs	r2, #136	@ 0x88
 80072d6:	2120      	movs	r1, #32
 80072d8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2284      	movs	r2, #132	@ 0x84
 80072de:	2100      	movs	r1, #0
 80072e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	0018      	movs	r0, r3
 80072e6:	46bd      	mov	sp, r7
 80072e8:	b004      	add	sp, #16
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	f1ffffff 	.word	0xf1ffffff

080072f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80072f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d108      	bne.n	8007312 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	226a      	movs	r2, #106	@ 0x6a
 8007304:	2101      	movs	r1, #1
 8007306:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2268      	movs	r2, #104	@ 0x68
 800730c:	2101      	movs	r1, #1
 800730e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007310:	e043      	b.n	800739a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007312:	260f      	movs	r6, #15
 8007314:	19bb      	adds	r3, r7, r6
 8007316:	2208      	movs	r2, #8
 8007318:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800731a:	200e      	movs	r0, #14
 800731c:	183b      	adds	r3, r7, r0
 800731e:	2208      	movs	r2, #8
 8007320:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	0e5b      	lsrs	r3, r3, #25
 800732a:	b2da      	uxtb	r2, r3
 800732c:	240d      	movs	r4, #13
 800732e:	193b      	adds	r3, r7, r4
 8007330:	2107      	movs	r1, #7
 8007332:	400a      	ands	r2, r1
 8007334:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	0f5b      	lsrs	r3, r3, #29
 800733e:	b2da      	uxtb	r2, r3
 8007340:	250c      	movs	r5, #12
 8007342:	197b      	adds	r3, r7, r5
 8007344:	2107      	movs	r1, #7
 8007346:	400a      	ands	r2, r1
 8007348:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800734a:	183b      	adds	r3, r7, r0
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	197a      	adds	r2, r7, r5
 8007350:	7812      	ldrb	r2, [r2, #0]
 8007352:	4914      	ldr	r1, [pc, #80]	@ (80073a4 <UARTEx_SetNbDataToProcess+0xb4>)
 8007354:	5c8a      	ldrb	r2, [r1, r2]
 8007356:	435a      	muls	r2, r3
 8007358:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800735a:	197b      	adds	r3, r7, r5
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	4a12      	ldr	r2, [pc, #72]	@ (80073a8 <UARTEx_SetNbDataToProcess+0xb8>)
 8007360:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007362:	0019      	movs	r1, r3
 8007364:	f7f8 ff62 	bl	800022c <__divsi3>
 8007368:	0003      	movs	r3, r0
 800736a:	b299      	uxth	r1, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	226a      	movs	r2, #106	@ 0x6a
 8007370:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007372:	19bb      	adds	r3, r7, r6
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	193a      	adds	r2, r7, r4
 8007378:	7812      	ldrb	r2, [r2, #0]
 800737a:	490a      	ldr	r1, [pc, #40]	@ (80073a4 <UARTEx_SetNbDataToProcess+0xb4>)
 800737c:	5c8a      	ldrb	r2, [r1, r2]
 800737e:	435a      	muls	r2, r3
 8007380:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007382:	193b      	adds	r3, r7, r4
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	4a08      	ldr	r2, [pc, #32]	@ (80073a8 <UARTEx_SetNbDataToProcess+0xb8>)
 8007388:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800738a:	0019      	movs	r1, r3
 800738c:	f7f8 ff4e 	bl	800022c <__divsi3>
 8007390:	0003      	movs	r3, r0
 8007392:	b299      	uxth	r1, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2268      	movs	r2, #104	@ 0x68
 8007398:	5299      	strh	r1, [r3, r2]
}
 800739a:	46c0      	nop			@ (mov r8, r8)
 800739c:	46bd      	mov	sp, r7
 800739e:	b005      	add	sp, #20
 80073a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073a2:	46c0      	nop			@ (mov r8, r8)
 80073a4:	080083e4 	.word	0x080083e4
 80073a8:	080083ec 	.word	0x080083ec

080073ac <siprintf>:
 80073ac:	b40e      	push	{r1, r2, r3}
 80073ae:	b510      	push	{r4, lr}
 80073b0:	2400      	movs	r4, #0
 80073b2:	490c      	ldr	r1, [pc, #48]	@ (80073e4 <siprintf+0x38>)
 80073b4:	b09d      	sub	sp, #116	@ 0x74
 80073b6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80073b8:	9002      	str	r0, [sp, #8]
 80073ba:	9006      	str	r0, [sp, #24]
 80073bc:	9107      	str	r1, [sp, #28]
 80073be:	9104      	str	r1, [sp, #16]
 80073c0:	4809      	ldr	r0, [pc, #36]	@ (80073e8 <siprintf+0x3c>)
 80073c2:	490a      	ldr	r1, [pc, #40]	@ (80073ec <siprintf+0x40>)
 80073c4:	cb04      	ldmia	r3!, {r2}
 80073c6:	9105      	str	r1, [sp, #20]
 80073c8:	6800      	ldr	r0, [r0, #0]
 80073ca:	a902      	add	r1, sp, #8
 80073cc:	9301      	str	r3, [sp, #4]
 80073ce:	941b      	str	r4, [sp, #108]	@ 0x6c
 80073d0:	f000 f9a8 	bl	8007724 <_svfiprintf_r>
 80073d4:	9b02      	ldr	r3, [sp, #8]
 80073d6:	701c      	strb	r4, [r3, #0]
 80073d8:	b01d      	add	sp, #116	@ 0x74
 80073da:	bc10      	pop	{r4}
 80073dc:	bc08      	pop	{r3}
 80073de:	b003      	add	sp, #12
 80073e0:	4718      	bx	r3
 80073e2:	46c0      	nop			@ (mov r8, r8)
 80073e4:	7fffffff 	.word	0x7fffffff
 80073e8:	200004fc 	.word	0x200004fc
 80073ec:	ffff0208 	.word	0xffff0208

080073f0 <memset>:
 80073f0:	0003      	movs	r3, r0
 80073f2:	1882      	adds	r2, r0, r2
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d100      	bne.n	80073fa <memset+0xa>
 80073f8:	4770      	bx	lr
 80073fa:	7019      	strb	r1, [r3, #0]
 80073fc:	3301      	adds	r3, #1
 80073fe:	e7f9      	b.n	80073f4 <memset+0x4>

08007400 <__errno>:
 8007400:	4b01      	ldr	r3, [pc, #4]	@ (8007408 <__errno+0x8>)
 8007402:	6818      	ldr	r0, [r3, #0]
 8007404:	4770      	bx	lr
 8007406:	46c0      	nop			@ (mov r8, r8)
 8007408:	200004fc 	.word	0x200004fc

0800740c <__libc_init_array>:
 800740c:	b570      	push	{r4, r5, r6, lr}
 800740e:	2600      	movs	r6, #0
 8007410:	4c0c      	ldr	r4, [pc, #48]	@ (8007444 <__libc_init_array+0x38>)
 8007412:	4d0d      	ldr	r5, [pc, #52]	@ (8007448 <__libc_init_array+0x3c>)
 8007414:	1b64      	subs	r4, r4, r5
 8007416:	10a4      	asrs	r4, r4, #2
 8007418:	42a6      	cmp	r6, r4
 800741a:	d109      	bne.n	8007430 <__libc_init_array+0x24>
 800741c:	2600      	movs	r6, #0
 800741e:	f000 fc63 	bl	8007ce8 <_init>
 8007422:	4c0a      	ldr	r4, [pc, #40]	@ (800744c <__libc_init_array+0x40>)
 8007424:	4d0a      	ldr	r5, [pc, #40]	@ (8007450 <__libc_init_array+0x44>)
 8007426:	1b64      	subs	r4, r4, r5
 8007428:	10a4      	asrs	r4, r4, #2
 800742a:	42a6      	cmp	r6, r4
 800742c:	d105      	bne.n	800743a <__libc_init_array+0x2e>
 800742e:	bd70      	pop	{r4, r5, r6, pc}
 8007430:	00b3      	lsls	r3, r6, #2
 8007432:	58eb      	ldr	r3, [r5, r3]
 8007434:	4798      	blx	r3
 8007436:	3601      	adds	r6, #1
 8007438:	e7ee      	b.n	8007418 <__libc_init_array+0xc>
 800743a:	00b3      	lsls	r3, r6, #2
 800743c:	58eb      	ldr	r3, [r5, r3]
 800743e:	4798      	blx	r3
 8007440:	3601      	adds	r6, #1
 8007442:	e7f2      	b.n	800742a <__libc_init_array+0x1e>
 8007444:	08008430 	.word	0x08008430
 8007448:	08008430 	.word	0x08008430
 800744c:	08008434 	.word	0x08008434
 8007450:	08008430 	.word	0x08008430

08007454 <__retarget_lock_acquire_recursive>:
 8007454:	4770      	bx	lr

08007456 <__retarget_lock_release_recursive>:
 8007456:	4770      	bx	lr

08007458 <memcpy>:
 8007458:	2300      	movs	r3, #0
 800745a:	b510      	push	{r4, lr}
 800745c:	429a      	cmp	r2, r3
 800745e:	d100      	bne.n	8007462 <memcpy+0xa>
 8007460:	bd10      	pop	{r4, pc}
 8007462:	5ccc      	ldrb	r4, [r1, r3]
 8007464:	54c4      	strb	r4, [r0, r3]
 8007466:	3301      	adds	r3, #1
 8007468:	e7f8      	b.n	800745c <memcpy+0x4>
	...

0800746c <_free_r>:
 800746c:	b570      	push	{r4, r5, r6, lr}
 800746e:	0005      	movs	r5, r0
 8007470:	1e0c      	subs	r4, r1, #0
 8007472:	d010      	beq.n	8007496 <_free_r+0x2a>
 8007474:	3c04      	subs	r4, #4
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	da00      	bge.n	800747e <_free_r+0x12>
 800747c:	18e4      	adds	r4, r4, r3
 800747e:	0028      	movs	r0, r5
 8007480:	f000 f8e0 	bl	8007644 <__malloc_lock>
 8007484:	4a1d      	ldr	r2, [pc, #116]	@ (80074fc <_free_r+0x90>)
 8007486:	6813      	ldr	r3, [r2, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d105      	bne.n	8007498 <_free_r+0x2c>
 800748c:	6063      	str	r3, [r4, #4]
 800748e:	6014      	str	r4, [r2, #0]
 8007490:	0028      	movs	r0, r5
 8007492:	f000 f8df 	bl	8007654 <__malloc_unlock>
 8007496:	bd70      	pop	{r4, r5, r6, pc}
 8007498:	42a3      	cmp	r3, r4
 800749a:	d908      	bls.n	80074ae <_free_r+0x42>
 800749c:	6820      	ldr	r0, [r4, #0]
 800749e:	1821      	adds	r1, r4, r0
 80074a0:	428b      	cmp	r3, r1
 80074a2:	d1f3      	bne.n	800748c <_free_r+0x20>
 80074a4:	6819      	ldr	r1, [r3, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	1809      	adds	r1, r1, r0
 80074aa:	6021      	str	r1, [r4, #0]
 80074ac:	e7ee      	b.n	800748c <_free_r+0x20>
 80074ae:	001a      	movs	r2, r3
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d001      	beq.n	80074ba <_free_r+0x4e>
 80074b6:	42a3      	cmp	r3, r4
 80074b8:	d9f9      	bls.n	80074ae <_free_r+0x42>
 80074ba:	6811      	ldr	r1, [r2, #0]
 80074bc:	1850      	adds	r0, r2, r1
 80074be:	42a0      	cmp	r0, r4
 80074c0:	d10b      	bne.n	80074da <_free_r+0x6e>
 80074c2:	6820      	ldr	r0, [r4, #0]
 80074c4:	1809      	adds	r1, r1, r0
 80074c6:	1850      	adds	r0, r2, r1
 80074c8:	6011      	str	r1, [r2, #0]
 80074ca:	4283      	cmp	r3, r0
 80074cc:	d1e0      	bne.n	8007490 <_free_r+0x24>
 80074ce:	6818      	ldr	r0, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	1841      	adds	r1, r0, r1
 80074d4:	6011      	str	r1, [r2, #0]
 80074d6:	6053      	str	r3, [r2, #4]
 80074d8:	e7da      	b.n	8007490 <_free_r+0x24>
 80074da:	42a0      	cmp	r0, r4
 80074dc:	d902      	bls.n	80074e4 <_free_r+0x78>
 80074de:	230c      	movs	r3, #12
 80074e0:	602b      	str	r3, [r5, #0]
 80074e2:	e7d5      	b.n	8007490 <_free_r+0x24>
 80074e4:	6820      	ldr	r0, [r4, #0]
 80074e6:	1821      	adds	r1, r4, r0
 80074e8:	428b      	cmp	r3, r1
 80074ea:	d103      	bne.n	80074f4 <_free_r+0x88>
 80074ec:	6819      	ldr	r1, [r3, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	1809      	adds	r1, r1, r0
 80074f2:	6021      	str	r1, [r4, #0]
 80074f4:	6063      	str	r3, [r4, #4]
 80074f6:	6054      	str	r4, [r2, #4]
 80074f8:	e7ca      	b.n	8007490 <_free_r+0x24>
 80074fa:	46c0      	nop			@ (mov r8, r8)
 80074fc:	20000984 	.word	0x20000984

08007500 <sbrk_aligned>:
 8007500:	b570      	push	{r4, r5, r6, lr}
 8007502:	4e0f      	ldr	r6, [pc, #60]	@ (8007540 <sbrk_aligned+0x40>)
 8007504:	000d      	movs	r5, r1
 8007506:	6831      	ldr	r1, [r6, #0]
 8007508:	0004      	movs	r4, r0
 800750a:	2900      	cmp	r1, #0
 800750c:	d102      	bne.n	8007514 <sbrk_aligned+0x14>
 800750e:	f000 fb95 	bl	8007c3c <_sbrk_r>
 8007512:	6030      	str	r0, [r6, #0]
 8007514:	0029      	movs	r1, r5
 8007516:	0020      	movs	r0, r4
 8007518:	f000 fb90 	bl	8007c3c <_sbrk_r>
 800751c:	1c43      	adds	r3, r0, #1
 800751e:	d103      	bne.n	8007528 <sbrk_aligned+0x28>
 8007520:	2501      	movs	r5, #1
 8007522:	426d      	negs	r5, r5
 8007524:	0028      	movs	r0, r5
 8007526:	bd70      	pop	{r4, r5, r6, pc}
 8007528:	2303      	movs	r3, #3
 800752a:	1cc5      	adds	r5, r0, #3
 800752c:	439d      	bics	r5, r3
 800752e:	42a8      	cmp	r0, r5
 8007530:	d0f8      	beq.n	8007524 <sbrk_aligned+0x24>
 8007532:	1a29      	subs	r1, r5, r0
 8007534:	0020      	movs	r0, r4
 8007536:	f000 fb81 	bl	8007c3c <_sbrk_r>
 800753a:	3001      	adds	r0, #1
 800753c:	d1f2      	bne.n	8007524 <sbrk_aligned+0x24>
 800753e:	e7ef      	b.n	8007520 <sbrk_aligned+0x20>
 8007540:	20000980 	.word	0x20000980

08007544 <_malloc_r>:
 8007544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007546:	2203      	movs	r2, #3
 8007548:	1ccb      	adds	r3, r1, #3
 800754a:	4393      	bics	r3, r2
 800754c:	3308      	adds	r3, #8
 800754e:	0005      	movs	r5, r0
 8007550:	001f      	movs	r7, r3
 8007552:	2b0c      	cmp	r3, #12
 8007554:	d234      	bcs.n	80075c0 <_malloc_r+0x7c>
 8007556:	270c      	movs	r7, #12
 8007558:	42b9      	cmp	r1, r7
 800755a:	d833      	bhi.n	80075c4 <_malloc_r+0x80>
 800755c:	0028      	movs	r0, r5
 800755e:	f000 f871 	bl	8007644 <__malloc_lock>
 8007562:	4e37      	ldr	r6, [pc, #220]	@ (8007640 <_malloc_r+0xfc>)
 8007564:	6833      	ldr	r3, [r6, #0]
 8007566:	001c      	movs	r4, r3
 8007568:	2c00      	cmp	r4, #0
 800756a:	d12f      	bne.n	80075cc <_malloc_r+0x88>
 800756c:	0039      	movs	r1, r7
 800756e:	0028      	movs	r0, r5
 8007570:	f7ff ffc6 	bl	8007500 <sbrk_aligned>
 8007574:	0004      	movs	r4, r0
 8007576:	1c43      	adds	r3, r0, #1
 8007578:	d15f      	bne.n	800763a <_malloc_r+0xf6>
 800757a:	6834      	ldr	r4, [r6, #0]
 800757c:	9400      	str	r4, [sp, #0]
 800757e:	9b00      	ldr	r3, [sp, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d14a      	bne.n	800761a <_malloc_r+0xd6>
 8007584:	2c00      	cmp	r4, #0
 8007586:	d052      	beq.n	800762e <_malloc_r+0xea>
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	0028      	movs	r0, r5
 800758c:	18e3      	adds	r3, r4, r3
 800758e:	9900      	ldr	r1, [sp, #0]
 8007590:	9301      	str	r3, [sp, #4]
 8007592:	f000 fb53 	bl	8007c3c <_sbrk_r>
 8007596:	9b01      	ldr	r3, [sp, #4]
 8007598:	4283      	cmp	r3, r0
 800759a:	d148      	bne.n	800762e <_malloc_r+0xea>
 800759c:	6823      	ldr	r3, [r4, #0]
 800759e:	0028      	movs	r0, r5
 80075a0:	1aff      	subs	r7, r7, r3
 80075a2:	0039      	movs	r1, r7
 80075a4:	f7ff ffac 	bl	8007500 <sbrk_aligned>
 80075a8:	3001      	adds	r0, #1
 80075aa:	d040      	beq.n	800762e <_malloc_r+0xea>
 80075ac:	6823      	ldr	r3, [r4, #0]
 80075ae:	19db      	adds	r3, r3, r7
 80075b0:	6023      	str	r3, [r4, #0]
 80075b2:	6833      	ldr	r3, [r6, #0]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	2a00      	cmp	r2, #0
 80075b8:	d133      	bne.n	8007622 <_malloc_r+0xde>
 80075ba:	9b00      	ldr	r3, [sp, #0]
 80075bc:	6033      	str	r3, [r6, #0]
 80075be:	e019      	b.n	80075f4 <_malloc_r+0xb0>
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	dac9      	bge.n	8007558 <_malloc_r+0x14>
 80075c4:	230c      	movs	r3, #12
 80075c6:	602b      	str	r3, [r5, #0]
 80075c8:	2000      	movs	r0, #0
 80075ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80075cc:	6821      	ldr	r1, [r4, #0]
 80075ce:	1bc9      	subs	r1, r1, r7
 80075d0:	d420      	bmi.n	8007614 <_malloc_r+0xd0>
 80075d2:	290b      	cmp	r1, #11
 80075d4:	d90a      	bls.n	80075ec <_malloc_r+0xa8>
 80075d6:	19e2      	adds	r2, r4, r7
 80075d8:	6027      	str	r7, [r4, #0]
 80075da:	42a3      	cmp	r3, r4
 80075dc:	d104      	bne.n	80075e8 <_malloc_r+0xa4>
 80075de:	6032      	str	r2, [r6, #0]
 80075e0:	6863      	ldr	r3, [r4, #4]
 80075e2:	6011      	str	r1, [r2, #0]
 80075e4:	6053      	str	r3, [r2, #4]
 80075e6:	e005      	b.n	80075f4 <_malloc_r+0xb0>
 80075e8:	605a      	str	r2, [r3, #4]
 80075ea:	e7f9      	b.n	80075e0 <_malloc_r+0x9c>
 80075ec:	6862      	ldr	r2, [r4, #4]
 80075ee:	42a3      	cmp	r3, r4
 80075f0:	d10e      	bne.n	8007610 <_malloc_r+0xcc>
 80075f2:	6032      	str	r2, [r6, #0]
 80075f4:	0028      	movs	r0, r5
 80075f6:	f000 f82d 	bl	8007654 <__malloc_unlock>
 80075fa:	0020      	movs	r0, r4
 80075fc:	2207      	movs	r2, #7
 80075fe:	300b      	adds	r0, #11
 8007600:	1d23      	adds	r3, r4, #4
 8007602:	4390      	bics	r0, r2
 8007604:	1ac2      	subs	r2, r0, r3
 8007606:	4298      	cmp	r0, r3
 8007608:	d0df      	beq.n	80075ca <_malloc_r+0x86>
 800760a:	1a1b      	subs	r3, r3, r0
 800760c:	50a3      	str	r3, [r4, r2]
 800760e:	e7dc      	b.n	80075ca <_malloc_r+0x86>
 8007610:	605a      	str	r2, [r3, #4]
 8007612:	e7ef      	b.n	80075f4 <_malloc_r+0xb0>
 8007614:	0023      	movs	r3, r4
 8007616:	6864      	ldr	r4, [r4, #4]
 8007618:	e7a6      	b.n	8007568 <_malloc_r+0x24>
 800761a:	9c00      	ldr	r4, [sp, #0]
 800761c:	6863      	ldr	r3, [r4, #4]
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	e7ad      	b.n	800757e <_malloc_r+0x3a>
 8007622:	001a      	movs	r2, r3
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	42a3      	cmp	r3, r4
 8007628:	d1fb      	bne.n	8007622 <_malloc_r+0xde>
 800762a:	2300      	movs	r3, #0
 800762c:	e7da      	b.n	80075e4 <_malloc_r+0xa0>
 800762e:	230c      	movs	r3, #12
 8007630:	0028      	movs	r0, r5
 8007632:	602b      	str	r3, [r5, #0]
 8007634:	f000 f80e 	bl	8007654 <__malloc_unlock>
 8007638:	e7c6      	b.n	80075c8 <_malloc_r+0x84>
 800763a:	6007      	str	r7, [r0, #0]
 800763c:	e7da      	b.n	80075f4 <_malloc_r+0xb0>
 800763e:	46c0      	nop			@ (mov r8, r8)
 8007640:	20000984 	.word	0x20000984

08007644 <__malloc_lock>:
 8007644:	b510      	push	{r4, lr}
 8007646:	4802      	ldr	r0, [pc, #8]	@ (8007650 <__malloc_lock+0xc>)
 8007648:	f7ff ff04 	bl	8007454 <__retarget_lock_acquire_recursive>
 800764c:	bd10      	pop	{r4, pc}
 800764e:	46c0      	nop			@ (mov r8, r8)
 8007650:	2000097c 	.word	0x2000097c

08007654 <__malloc_unlock>:
 8007654:	b510      	push	{r4, lr}
 8007656:	4802      	ldr	r0, [pc, #8]	@ (8007660 <__malloc_unlock+0xc>)
 8007658:	f7ff fefd 	bl	8007456 <__retarget_lock_release_recursive>
 800765c:	bd10      	pop	{r4, pc}
 800765e:	46c0      	nop			@ (mov r8, r8)
 8007660:	2000097c 	.word	0x2000097c

08007664 <__ssputs_r>:
 8007664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007666:	688e      	ldr	r6, [r1, #8]
 8007668:	b085      	sub	sp, #20
 800766a:	001f      	movs	r7, r3
 800766c:	000c      	movs	r4, r1
 800766e:	680b      	ldr	r3, [r1, #0]
 8007670:	9002      	str	r0, [sp, #8]
 8007672:	9203      	str	r2, [sp, #12]
 8007674:	42be      	cmp	r6, r7
 8007676:	d830      	bhi.n	80076da <__ssputs_r+0x76>
 8007678:	210c      	movs	r1, #12
 800767a:	5e62      	ldrsh	r2, [r4, r1]
 800767c:	2190      	movs	r1, #144	@ 0x90
 800767e:	00c9      	lsls	r1, r1, #3
 8007680:	420a      	tst	r2, r1
 8007682:	d028      	beq.n	80076d6 <__ssputs_r+0x72>
 8007684:	2003      	movs	r0, #3
 8007686:	6921      	ldr	r1, [r4, #16]
 8007688:	1a5b      	subs	r3, r3, r1
 800768a:	9301      	str	r3, [sp, #4]
 800768c:	6963      	ldr	r3, [r4, #20]
 800768e:	4343      	muls	r3, r0
 8007690:	9801      	ldr	r0, [sp, #4]
 8007692:	0fdd      	lsrs	r5, r3, #31
 8007694:	18ed      	adds	r5, r5, r3
 8007696:	1c7b      	adds	r3, r7, #1
 8007698:	181b      	adds	r3, r3, r0
 800769a:	106d      	asrs	r5, r5, #1
 800769c:	42ab      	cmp	r3, r5
 800769e:	d900      	bls.n	80076a2 <__ssputs_r+0x3e>
 80076a0:	001d      	movs	r5, r3
 80076a2:	0552      	lsls	r2, r2, #21
 80076a4:	d528      	bpl.n	80076f8 <__ssputs_r+0x94>
 80076a6:	0029      	movs	r1, r5
 80076a8:	9802      	ldr	r0, [sp, #8]
 80076aa:	f7ff ff4b 	bl	8007544 <_malloc_r>
 80076ae:	1e06      	subs	r6, r0, #0
 80076b0:	d02c      	beq.n	800770c <__ssputs_r+0xa8>
 80076b2:	9a01      	ldr	r2, [sp, #4]
 80076b4:	6921      	ldr	r1, [r4, #16]
 80076b6:	f7ff fecf 	bl	8007458 <memcpy>
 80076ba:	89a2      	ldrh	r2, [r4, #12]
 80076bc:	4b18      	ldr	r3, [pc, #96]	@ (8007720 <__ssputs_r+0xbc>)
 80076be:	401a      	ands	r2, r3
 80076c0:	2380      	movs	r3, #128	@ 0x80
 80076c2:	4313      	orrs	r3, r2
 80076c4:	81a3      	strh	r3, [r4, #12]
 80076c6:	9b01      	ldr	r3, [sp, #4]
 80076c8:	6126      	str	r6, [r4, #16]
 80076ca:	18f6      	adds	r6, r6, r3
 80076cc:	6026      	str	r6, [r4, #0]
 80076ce:	003e      	movs	r6, r7
 80076d0:	6165      	str	r5, [r4, #20]
 80076d2:	1aed      	subs	r5, r5, r3
 80076d4:	60a5      	str	r5, [r4, #8]
 80076d6:	42be      	cmp	r6, r7
 80076d8:	d900      	bls.n	80076dc <__ssputs_r+0x78>
 80076da:	003e      	movs	r6, r7
 80076dc:	0032      	movs	r2, r6
 80076de:	9903      	ldr	r1, [sp, #12]
 80076e0:	6820      	ldr	r0, [r4, #0]
 80076e2:	f000 fa99 	bl	8007c18 <memmove>
 80076e6:	2000      	movs	r0, #0
 80076e8:	68a3      	ldr	r3, [r4, #8]
 80076ea:	1b9b      	subs	r3, r3, r6
 80076ec:	60a3      	str	r3, [r4, #8]
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	199b      	adds	r3, r3, r6
 80076f2:	6023      	str	r3, [r4, #0]
 80076f4:	b005      	add	sp, #20
 80076f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076f8:	002a      	movs	r2, r5
 80076fa:	9802      	ldr	r0, [sp, #8]
 80076fc:	f000 fabb 	bl	8007c76 <_realloc_r>
 8007700:	1e06      	subs	r6, r0, #0
 8007702:	d1e0      	bne.n	80076c6 <__ssputs_r+0x62>
 8007704:	6921      	ldr	r1, [r4, #16]
 8007706:	9802      	ldr	r0, [sp, #8]
 8007708:	f7ff feb0 	bl	800746c <_free_r>
 800770c:	230c      	movs	r3, #12
 800770e:	2001      	movs	r0, #1
 8007710:	9a02      	ldr	r2, [sp, #8]
 8007712:	4240      	negs	r0, r0
 8007714:	6013      	str	r3, [r2, #0]
 8007716:	89a2      	ldrh	r2, [r4, #12]
 8007718:	3334      	adds	r3, #52	@ 0x34
 800771a:	4313      	orrs	r3, r2
 800771c:	81a3      	strh	r3, [r4, #12]
 800771e:	e7e9      	b.n	80076f4 <__ssputs_r+0x90>
 8007720:	fffffb7f 	.word	0xfffffb7f

08007724 <_svfiprintf_r>:
 8007724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007726:	b0a1      	sub	sp, #132	@ 0x84
 8007728:	9003      	str	r0, [sp, #12]
 800772a:	001d      	movs	r5, r3
 800772c:	898b      	ldrh	r3, [r1, #12]
 800772e:	000f      	movs	r7, r1
 8007730:	0016      	movs	r6, r2
 8007732:	061b      	lsls	r3, r3, #24
 8007734:	d511      	bpl.n	800775a <_svfiprintf_r+0x36>
 8007736:	690b      	ldr	r3, [r1, #16]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10e      	bne.n	800775a <_svfiprintf_r+0x36>
 800773c:	2140      	movs	r1, #64	@ 0x40
 800773e:	f7ff ff01 	bl	8007544 <_malloc_r>
 8007742:	6038      	str	r0, [r7, #0]
 8007744:	6138      	str	r0, [r7, #16]
 8007746:	2800      	cmp	r0, #0
 8007748:	d105      	bne.n	8007756 <_svfiprintf_r+0x32>
 800774a:	230c      	movs	r3, #12
 800774c:	9a03      	ldr	r2, [sp, #12]
 800774e:	6013      	str	r3, [r2, #0]
 8007750:	2001      	movs	r0, #1
 8007752:	4240      	negs	r0, r0
 8007754:	e0cf      	b.n	80078f6 <_svfiprintf_r+0x1d2>
 8007756:	2340      	movs	r3, #64	@ 0x40
 8007758:	617b      	str	r3, [r7, #20]
 800775a:	2300      	movs	r3, #0
 800775c:	ac08      	add	r4, sp, #32
 800775e:	6163      	str	r3, [r4, #20]
 8007760:	3320      	adds	r3, #32
 8007762:	7663      	strb	r3, [r4, #25]
 8007764:	3310      	adds	r3, #16
 8007766:	76a3      	strb	r3, [r4, #26]
 8007768:	9507      	str	r5, [sp, #28]
 800776a:	0035      	movs	r5, r6
 800776c:	782b      	ldrb	r3, [r5, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <_svfiprintf_r+0x52>
 8007772:	2b25      	cmp	r3, #37	@ 0x25
 8007774:	d148      	bne.n	8007808 <_svfiprintf_r+0xe4>
 8007776:	1bab      	subs	r3, r5, r6
 8007778:	9305      	str	r3, [sp, #20]
 800777a:	42b5      	cmp	r5, r6
 800777c:	d00b      	beq.n	8007796 <_svfiprintf_r+0x72>
 800777e:	0032      	movs	r2, r6
 8007780:	0039      	movs	r1, r7
 8007782:	9803      	ldr	r0, [sp, #12]
 8007784:	f7ff ff6e 	bl	8007664 <__ssputs_r>
 8007788:	3001      	adds	r0, #1
 800778a:	d100      	bne.n	800778e <_svfiprintf_r+0x6a>
 800778c:	e0ae      	b.n	80078ec <_svfiprintf_r+0x1c8>
 800778e:	6963      	ldr	r3, [r4, #20]
 8007790:	9a05      	ldr	r2, [sp, #20]
 8007792:	189b      	adds	r3, r3, r2
 8007794:	6163      	str	r3, [r4, #20]
 8007796:	782b      	ldrb	r3, [r5, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d100      	bne.n	800779e <_svfiprintf_r+0x7a>
 800779c:	e0a6      	b.n	80078ec <_svfiprintf_r+0x1c8>
 800779e:	2201      	movs	r2, #1
 80077a0:	2300      	movs	r3, #0
 80077a2:	4252      	negs	r2, r2
 80077a4:	6062      	str	r2, [r4, #4]
 80077a6:	a904      	add	r1, sp, #16
 80077a8:	3254      	adds	r2, #84	@ 0x54
 80077aa:	1852      	adds	r2, r2, r1
 80077ac:	1c6e      	adds	r6, r5, #1
 80077ae:	6023      	str	r3, [r4, #0]
 80077b0:	60e3      	str	r3, [r4, #12]
 80077b2:	60a3      	str	r3, [r4, #8]
 80077b4:	7013      	strb	r3, [r2, #0]
 80077b6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80077b8:	4b54      	ldr	r3, [pc, #336]	@ (800790c <_svfiprintf_r+0x1e8>)
 80077ba:	2205      	movs	r2, #5
 80077bc:	0018      	movs	r0, r3
 80077be:	7831      	ldrb	r1, [r6, #0]
 80077c0:	9305      	str	r3, [sp, #20]
 80077c2:	f000 fa4d 	bl	8007c60 <memchr>
 80077c6:	1c75      	adds	r5, r6, #1
 80077c8:	2800      	cmp	r0, #0
 80077ca:	d11f      	bne.n	800780c <_svfiprintf_r+0xe8>
 80077cc:	6822      	ldr	r2, [r4, #0]
 80077ce:	06d3      	lsls	r3, r2, #27
 80077d0:	d504      	bpl.n	80077dc <_svfiprintf_r+0xb8>
 80077d2:	2353      	movs	r3, #83	@ 0x53
 80077d4:	a904      	add	r1, sp, #16
 80077d6:	185b      	adds	r3, r3, r1
 80077d8:	2120      	movs	r1, #32
 80077da:	7019      	strb	r1, [r3, #0]
 80077dc:	0713      	lsls	r3, r2, #28
 80077de:	d504      	bpl.n	80077ea <_svfiprintf_r+0xc6>
 80077e0:	2353      	movs	r3, #83	@ 0x53
 80077e2:	a904      	add	r1, sp, #16
 80077e4:	185b      	adds	r3, r3, r1
 80077e6:	212b      	movs	r1, #43	@ 0x2b
 80077e8:	7019      	strb	r1, [r3, #0]
 80077ea:	7833      	ldrb	r3, [r6, #0]
 80077ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80077ee:	d016      	beq.n	800781e <_svfiprintf_r+0xfa>
 80077f0:	0035      	movs	r5, r6
 80077f2:	2100      	movs	r1, #0
 80077f4:	200a      	movs	r0, #10
 80077f6:	68e3      	ldr	r3, [r4, #12]
 80077f8:	782a      	ldrb	r2, [r5, #0]
 80077fa:	1c6e      	adds	r6, r5, #1
 80077fc:	3a30      	subs	r2, #48	@ 0x30
 80077fe:	2a09      	cmp	r2, #9
 8007800:	d950      	bls.n	80078a4 <_svfiprintf_r+0x180>
 8007802:	2900      	cmp	r1, #0
 8007804:	d111      	bne.n	800782a <_svfiprintf_r+0x106>
 8007806:	e017      	b.n	8007838 <_svfiprintf_r+0x114>
 8007808:	3501      	adds	r5, #1
 800780a:	e7af      	b.n	800776c <_svfiprintf_r+0x48>
 800780c:	9b05      	ldr	r3, [sp, #20]
 800780e:	6822      	ldr	r2, [r4, #0]
 8007810:	1ac0      	subs	r0, r0, r3
 8007812:	2301      	movs	r3, #1
 8007814:	4083      	lsls	r3, r0
 8007816:	4313      	orrs	r3, r2
 8007818:	002e      	movs	r6, r5
 800781a:	6023      	str	r3, [r4, #0]
 800781c:	e7cc      	b.n	80077b8 <_svfiprintf_r+0x94>
 800781e:	9b07      	ldr	r3, [sp, #28]
 8007820:	1d19      	adds	r1, r3, #4
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	9107      	str	r1, [sp, #28]
 8007826:	2b00      	cmp	r3, #0
 8007828:	db01      	blt.n	800782e <_svfiprintf_r+0x10a>
 800782a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800782c:	e004      	b.n	8007838 <_svfiprintf_r+0x114>
 800782e:	425b      	negs	r3, r3
 8007830:	60e3      	str	r3, [r4, #12]
 8007832:	2302      	movs	r3, #2
 8007834:	4313      	orrs	r3, r2
 8007836:	6023      	str	r3, [r4, #0]
 8007838:	782b      	ldrb	r3, [r5, #0]
 800783a:	2b2e      	cmp	r3, #46	@ 0x2e
 800783c:	d10c      	bne.n	8007858 <_svfiprintf_r+0x134>
 800783e:	786b      	ldrb	r3, [r5, #1]
 8007840:	2b2a      	cmp	r3, #42	@ 0x2a
 8007842:	d134      	bne.n	80078ae <_svfiprintf_r+0x18a>
 8007844:	9b07      	ldr	r3, [sp, #28]
 8007846:	3502      	adds	r5, #2
 8007848:	1d1a      	adds	r2, r3, #4
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	9207      	str	r2, [sp, #28]
 800784e:	2b00      	cmp	r3, #0
 8007850:	da01      	bge.n	8007856 <_svfiprintf_r+0x132>
 8007852:	2301      	movs	r3, #1
 8007854:	425b      	negs	r3, r3
 8007856:	9309      	str	r3, [sp, #36]	@ 0x24
 8007858:	4e2d      	ldr	r6, [pc, #180]	@ (8007910 <_svfiprintf_r+0x1ec>)
 800785a:	2203      	movs	r2, #3
 800785c:	0030      	movs	r0, r6
 800785e:	7829      	ldrb	r1, [r5, #0]
 8007860:	f000 f9fe 	bl	8007c60 <memchr>
 8007864:	2800      	cmp	r0, #0
 8007866:	d006      	beq.n	8007876 <_svfiprintf_r+0x152>
 8007868:	2340      	movs	r3, #64	@ 0x40
 800786a:	1b80      	subs	r0, r0, r6
 800786c:	4083      	lsls	r3, r0
 800786e:	6822      	ldr	r2, [r4, #0]
 8007870:	3501      	adds	r5, #1
 8007872:	4313      	orrs	r3, r2
 8007874:	6023      	str	r3, [r4, #0]
 8007876:	7829      	ldrb	r1, [r5, #0]
 8007878:	2206      	movs	r2, #6
 800787a:	4826      	ldr	r0, [pc, #152]	@ (8007914 <_svfiprintf_r+0x1f0>)
 800787c:	1c6e      	adds	r6, r5, #1
 800787e:	7621      	strb	r1, [r4, #24]
 8007880:	f000 f9ee 	bl	8007c60 <memchr>
 8007884:	2800      	cmp	r0, #0
 8007886:	d038      	beq.n	80078fa <_svfiprintf_r+0x1d6>
 8007888:	4b23      	ldr	r3, [pc, #140]	@ (8007918 <_svfiprintf_r+0x1f4>)
 800788a:	2b00      	cmp	r3, #0
 800788c:	d122      	bne.n	80078d4 <_svfiprintf_r+0x1b0>
 800788e:	2207      	movs	r2, #7
 8007890:	9b07      	ldr	r3, [sp, #28]
 8007892:	3307      	adds	r3, #7
 8007894:	4393      	bics	r3, r2
 8007896:	3308      	adds	r3, #8
 8007898:	9307      	str	r3, [sp, #28]
 800789a:	6963      	ldr	r3, [r4, #20]
 800789c:	9a04      	ldr	r2, [sp, #16]
 800789e:	189b      	adds	r3, r3, r2
 80078a0:	6163      	str	r3, [r4, #20]
 80078a2:	e762      	b.n	800776a <_svfiprintf_r+0x46>
 80078a4:	4343      	muls	r3, r0
 80078a6:	0035      	movs	r5, r6
 80078a8:	2101      	movs	r1, #1
 80078aa:	189b      	adds	r3, r3, r2
 80078ac:	e7a4      	b.n	80077f8 <_svfiprintf_r+0xd4>
 80078ae:	2300      	movs	r3, #0
 80078b0:	200a      	movs	r0, #10
 80078b2:	0019      	movs	r1, r3
 80078b4:	3501      	adds	r5, #1
 80078b6:	6063      	str	r3, [r4, #4]
 80078b8:	782a      	ldrb	r2, [r5, #0]
 80078ba:	1c6e      	adds	r6, r5, #1
 80078bc:	3a30      	subs	r2, #48	@ 0x30
 80078be:	2a09      	cmp	r2, #9
 80078c0:	d903      	bls.n	80078ca <_svfiprintf_r+0x1a6>
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d0c8      	beq.n	8007858 <_svfiprintf_r+0x134>
 80078c6:	9109      	str	r1, [sp, #36]	@ 0x24
 80078c8:	e7c6      	b.n	8007858 <_svfiprintf_r+0x134>
 80078ca:	4341      	muls	r1, r0
 80078cc:	0035      	movs	r5, r6
 80078ce:	2301      	movs	r3, #1
 80078d0:	1889      	adds	r1, r1, r2
 80078d2:	e7f1      	b.n	80078b8 <_svfiprintf_r+0x194>
 80078d4:	aa07      	add	r2, sp, #28
 80078d6:	9200      	str	r2, [sp, #0]
 80078d8:	0021      	movs	r1, r4
 80078da:	003a      	movs	r2, r7
 80078dc:	4b0f      	ldr	r3, [pc, #60]	@ (800791c <_svfiprintf_r+0x1f8>)
 80078de:	9803      	ldr	r0, [sp, #12]
 80078e0:	e000      	b.n	80078e4 <_svfiprintf_r+0x1c0>
 80078e2:	bf00      	nop
 80078e4:	9004      	str	r0, [sp, #16]
 80078e6:	9b04      	ldr	r3, [sp, #16]
 80078e8:	3301      	adds	r3, #1
 80078ea:	d1d6      	bne.n	800789a <_svfiprintf_r+0x176>
 80078ec:	89bb      	ldrh	r3, [r7, #12]
 80078ee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80078f0:	065b      	lsls	r3, r3, #25
 80078f2:	d500      	bpl.n	80078f6 <_svfiprintf_r+0x1d2>
 80078f4:	e72c      	b.n	8007750 <_svfiprintf_r+0x2c>
 80078f6:	b021      	add	sp, #132	@ 0x84
 80078f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078fa:	aa07      	add	r2, sp, #28
 80078fc:	9200      	str	r2, [sp, #0]
 80078fe:	0021      	movs	r1, r4
 8007900:	003a      	movs	r2, r7
 8007902:	4b06      	ldr	r3, [pc, #24]	@ (800791c <_svfiprintf_r+0x1f8>)
 8007904:	9803      	ldr	r0, [sp, #12]
 8007906:	f000 f87b 	bl	8007a00 <_printf_i>
 800790a:	e7eb      	b.n	80078e4 <_svfiprintf_r+0x1c0>
 800790c:	080083f4 	.word	0x080083f4
 8007910:	080083fa 	.word	0x080083fa
 8007914:	080083fe 	.word	0x080083fe
 8007918:	00000000 	.word	0x00000000
 800791c:	08007665 	.word	0x08007665

08007920 <_printf_common>:
 8007920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007922:	0016      	movs	r6, r2
 8007924:	9301      	str	r3, [sp, #4]
 8007926:	688a      	ldr	r2, [r1, #8]
 8007928:	690b      	ldr	r3, [r1, #16]
 800792a:	000c      	movs	r4, r1
 800792c:	9000      	str	r0, [sp, #0]
 800792e:	4293      	cmp	r3, r2
 8007930:	da00      	bge.n	8007934 <_printf_common+0x14>
 8007932:	0013      	movs	r3, r2
 8007934:	0022      	movs	r2, r4
 8007936:	6033      	str	r3, [r6, #0]
 8007938:	3243      	adds	r2, #67	@ 0x43
 800793a:	7812      	ldrb	r2, [r2, #0]
 800793c:	2a00      	cmp	r2, #0
 800793e:	d001      	beq.n	8007944 <_printf_common+0x24>
 8007940:	3301      	adds	r3, #1
 8007942:	6033      	str	r3, [r6, #0]
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	069b      	lsls	r3, r3, #26
 8007948:	d502      	bpl.n	8007950 <_printf_common+0x30>
 800794a:	6833      	ldr	r3, [r6, #0]
 800794c:	3302      	adds	r3, #2
 800794e:	6033      	str	r3, [r6, #0]
 8007950:	6822      	ldr	r2, [r4, #0]
 8007952:	2306      	movs	r3, #6
 8007954:	0015      	movs	r5, r2
 8007956:	401d      	ands	r5, r3
 8007958:	421a      	tst	r2, r3
 800795a:	d027      	beq.n	80079ac <_printf_common+0x8c>
 800795c:	0023      	movs	r3, r4
 800795e:	3343      	adds	r3, #67	@ 0x43
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	1e5a      	subs	r2, r3, #1
 8007964:	4193      	sbcs	r3, r2
 8007966:	6822      	ldr	r2, [r4, #0]
 8007968:	0692      	lsls	r2, r2, #26
 800796a:	d430      	bmi.n	80079ce <_printf_common+0xae>
 800796c:	0022      	movs	r2, r4
 800796e:	9901      	ldr	r1, [sp, #4]
 8007970:	9800      	ldr	r0, [sp, #0]
 8007972:	9d08      	ldr	r5, [sp, #32]
 8007974:	3243      	adds	r2, #67	@ 0x43
 8007976:	47a8      	blx	r5
 8007978:	3001      	adds	r0, #1
 800797a:	d025      	beq.n	80079c8 <_printf_common+0xa8>
 800797c:	2206      	movs	r2, #6
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	2500      	movs	r5, #0
 8007982:	4013      	ands	r3, r2
 8007984:	2b04      	cmp	r3, #4
 8007986:	d105      	bne.n	8007994 <_printf_common+0x74>
 8007988:	6833      	ldr	r3, [r6, #0]
 800798a:	68e5      	ldr	r5, [r4, #12]
 800798c:	1aed      	subs	r5, r5, r3
 800798e:	43eb      	mvns	r3, r5
 8007990:	17db      	asrs	r3, r3, #31
 8007992:	401d      	ands	r5, r3
 8007994:	68a3      	ldr	r3, [r4, #8]
 8007996:	6922      	ldr	r2, [r4, #16]
 8007998:	4293      	cmp	r3, r2
 800799a:	dd01      	ble.n	80079a0 <_printf_common+0x80>
 800799c:	1a9b      	subs	r3, r3, r2
 800799e:	18ed      	adds	r5, r5, r3
 80079a0:	2600      	movs	r6, #0
 80079a2:	42b5      	cmp	r5, r6
 80079a4:	d120      	bne.n	80079e8 <_printf_common+0xc8>
 80079a6:	2000      	movs	r0, #0
 80079a8:	e010      	b.n	80079cc <_printf_common+0xac>
 80079aa:	3501      	adds	r5, #1
 80079ac:	68e3      	ldr	r3, [r4, #12]
 80079ae:	6832      	ldr	r2, [r6, #0]
 80079b0:	1a9b      	subs	r3, r3, r2
 80079b2:	42ab      	cmp	r3, r5
 80079b4:	ddd2      	ble.n	800795c <_printf_common+0x3c>
 80079b6:	0022      	movs	r2, r4
 80079b8:	2301      	movs	r3, #1
 80079ba:	9901      	ldr	r1, [sp, #4]
 80079bc:	9800      	ldr	r0, [sp, #0]
 80079be:	9f08      	ldr	r7, [sp, #32]
 80079c0:	3219      	adds	r2, #25
 80079c2:	47b8      	blx	r7
 80079c4:	3001      	adds	r0, #1
 80079c6:	d1f0      	bne.n	80079aa <_printf_common+0x8a>
 80079c8:	2001      	movs	r0, #1
 80079ca:	4240      	negs	r0, r0
 80079cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80079ce:	2030      	movs	r0, #48	@ 0x30
 80079d0:	18e1      	adds	r1, r4, r3
 80079d2:	3143      	adds	r1, #67	@ 0x43
 80079d4:	7008      	strb	r0, [r1, #0]
 80079d6:	0021      	movs	r1, r4
 80079d8:	1c5a      	adds	r2, r3, #1
 80079da:	3145      	adds	r1, #69	@ 0x45
 80079dc:	7809      	ldrb	r1, [r1, #0]
 80079de:	18a2      	adds	r2, r4, r2
 80079e0:	3243      	adds	r2, #67	@ 0x43
 80079e2:	3302      	adds	r3, #2
 80079e4:	7011      	strb	r1, [r2, #0]
 80079e6:	e7c1      	b.n	800796c <_printf_common+0x4c>
 80079e8:	0022      	movs	r2, r4
 80079ea:	2301      	movs	r3, #1
 80079ec:	9901      	ldr	r1, [sp, #4]
 80079ee:	9800      	ldr	r0, [sp, #0]
 80079f0:	9f08      	ldr	r7, [sp, #32]
 80079f2:	321a      	adds	r2, #26
 80079f4:	47b8      	blx	r7
 80079f6:	3001      	adds	r0, #1
 80079f8:	d0e6      	beq.n	80079c8 <_printf_common+0xa8>
 80079fa:	3601      	adds	r6, #1
 80079fc:	e7d1      	b.n	80079a2 <_printf_common+0x82>
	...

08007a00 <_printf_i>:
 8007a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a02:	b08b      	sub	sp, #44	@ 0x2c
 8007a04:	9206      	str	r2, [sp, #24]
 8007a06:	000a      	movs	r2, r1
 8007a08:	3243      	adds	r2, #67	@ 0x43
 8007a0a:	9307      	str	r3, [sp, #28]
 8007a0c:	9005      	str	r0, [sp, #20]
 8007a0e:	9203      	str	r2, [sp, #12]
 8007a10:	7e0a      	ldrb	r2, [r1, #24]
 8007a12:	000c      	movs	r4, r1
 8007a14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007a16:	2a78      	cmp	r2, #120	@ 0x78
 8007a18:	d809      	bhi.n	8007a2e <_printf_i+0x2e>
 8007a1a:	2a62      	cmp	r2, #98	@ 0x62
 8007a1c:	d80b      	bhi.n	8007a36 <_printf_i+0x36>
 8007a1e:	2a00      	cmp	r2, #0
 8007a20:	d100      	bne.n	8007a24 <_printf_i+0x24>
 8007a22:	e0ba      	b.n	8007b9a <_printf_i+0x19a>
 8007a24:	497a      	ldr	r1, [pc, #488]	@ (8007c10 <_printf_i+0x210>)
 8007a26:	9104      	str	r1, [sp, #16]
 8007a28:	2a58      	cmp	r2, #88	@ 0x58
 8007a2a:	d100      	bne.n	8007a2e <_printf_i+0x2e>
 8007a2c:	e08e      	b.n	8007b4c <_printf_i+0x14c>
 8007a2e:	0025      	movs	r5, r4
 8007a30:	3542      	adds	r5, #66	@ 0x42
 8007a32:	702a      	strb	r2, [r5, #0]
 8007a34:	e022      	b.n	8007a7c <_printf_i+0x7c>
 8007a36:	0010      	movs	r0, r2
 8007a38:	3863      	subs	r0, #99	@ 0x63
 8007a3a:	2815      	cmp	r0, #21
 8007a3c:	d8f7      	bhi.n	8007a2e <_printf_i+0x2e>
 8007a3e:	f7f8 fb61 	bl	8000104 <__gnu_thumb1_case_shi>
 8007a42:	0016      	.short	0x0016
 8007a44:	fff6001f 	.word	0xfff6001f
 8007a48:	fff6fff6 	.word	0xfff6fff6
 8007a4c:	001ffff6 	.word	0x001ffff6
 8007a50:	fff6fff6 	.word	0xfff6fff6
 8007a54:	fff6fff6 	.word	0xfff6fff6
 8007a58:	0036009f 	.word	0x0036009f
 8007a5c:	fff6007e 	.word	0xfff6007e
 8007a60:	00b0fff6 	.word	0x00b0fff6
 8007a64:	0036fff6 	.word	0x0036fff6
 8007a68:	fff6fff6 	.word	0xfff6fff6
 8007a6c:	0082      	.short	0x0082
 8007a6e:	0025      	movs	r5, r4
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	3542      	adds	r5, #66	@ 0x42
 8007a74:	1d11      	adds	r1, r2, #4
 8007a76:	6019      	str	r1, [r3, #0]
 8007a78:	6813      	ldr	r3, [r2, #0]
 8007a7a:	702b      	strb	r3, [r5, #0]
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e09e      	b.n	8007bbe <_printf_i+0x1be>
 8007a80:	6818      	ldr	r0, [r3, #0]
 8007a82:	6809      	ldr	r1, [r1, #0]
 8007a84:	1d02      	adds	r2, r0, #4
 8007a86:	060d      	lsls	r5, r1, #24
 8007a88:	d50b      	bpl.n	8007aa2 <_printf_i+0xa2>
 8007a8a:	6806      	ldr	r6, [r0, #0]
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	2e00      	cmp	r6, #0
 8007a90:	da03      	bge.n	8007a9a <_printf_i+0x9a>
 8007a92:	232d      	movs	r3, #45	@ 0x2d
 8007a94:	9a03      	ldr	r2, [sp, #12]
 8007a96:	4276      	negs	r6, r6
 8007a98:	7013      	strb	r3, [r2, #0]
 8007a9a:	4b5d      	ldr	r3, [pc, #372]	@ (8007c10 <_printf_i+0x210>)
 8007a9c:	270a      	movs	r7, #10
 8007a9e:	9304      	str	r3, [sp, #16]
 8007aa0:	e018      	b.n	8007ad4 <_printf_i+0xd4>
 8007aa2:	6806      	ldr	r6, [r0, #0]
 8007aa4:	601a      	str	r2, [r3, #0]
 8007aa6:	0649      	lsls	r1, r1, #25
 8007aa8:	d5f1      	bpl.n	8007a8e <_printf_i+0x8e>
 8007aaa:	b236      	sxth	r6, r6
 8007aac:	e7ef      	b.n	8007a8e <_printf_i+0x8e>
 8007aae:	6808      	ldr	r0, [r1, #0]
 8007ab0:	6819      	ldr	r1, [r3, #0]
 8007ab2:	c940      	ldmia	r1!, {r6}
 8007ab4:	0605      	lsls	r5, r0, #24
 8007ab6:	d402      	bmi.n	8007abe <_printf_i+0xbe>
 8007ab8:	0640      	lsls	r0, r0, #25
 8007aba:	d500      	bpl.n	8007abe <_printf_i+0xbe>
 8007abc:	b2b6      	uxth	r6, r6
 8007abe:	6019      	str	r1, [r3, #0]
 8007ac0:	4b53      	ldr	r3, [pc, #332]	@ (8007c10 <_printf_i+0x210>)
 8007ac2:	270a      	movs	r7, #10
 8007ac4:	9304      	str	r3, [sp, #16]
 8007ac6:	2a6f      	cmp	r2, #111	@ 0x6f
 8007ac8:	d100      	bne.n	8007acc <_printf_i+0xcc>
 8007aca:	3f02      	subs	r7, #2
 8007acc:	0023      	movs	r3, r4
 8007ace:	2200      	movs	r2, #0
 8007ad0:	3343      	adds	r3, #67	@ 0x43
 8007ad2:	701a      	strb	r2, [r3, #0]
 8007ad4:	6863      	ldr	r3, [r4, #4]
 8007ad6:	60a3      	str	r3, [r4, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	db06      	blt.n	8007aea <_printf_i+0xea>
 8007adc:	2104      	movs	r1, #4
 8007ade:	6822      	ldr	r2, [r4, #0]
 8007ae0:	9d03      	ldr	r5, [sp, #12]
 8007ae2:	438a      	bics	r2, r1
 8007ae4:	6022      	str	r2, [r4, #0]
 8007ae6:	4333      	orrs	r3, r6
 8007ae8:	d00c      	beq.n	8007b04 <_printf_i+0x104>
 8007aea:	9d03      	ldr	r5, [sp, #12]
 8007aec:	0030      	movs	r0, r6
 8007aee:	0039      	movs	r1, r7
 8007af0:	f7f8 fb98 	bl	8000224 <__aeabi_uidivmod>
 8007af4:	9b04      	ldr	r3, [sp, #16]
 8007af6:	3d01      	subs	r5, #1
 8007af8:	5c5b      	ldrb	r3, [r3, r1]
 8007afa:	702b      	strb	r3, [r5, #0]
 8007afc:	0033      	movs	r3, r6
 8007afe:	0006      	movs	r6, r0
 8007b00:	429f      	cmp	r7, r3
 8007b02:	d9f3      	bls.n	8007aec <_printf_i+0xec>
 8007b04:	2f08      	cmp	r7, #8
 8007b06:	d109      	bne.n	8007b1c <_printf_i+0x11c>
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	07db      	lsls	r3, r3, #31
 8007b0c:	d506      	bpl.n	8007b1c <_printf_i+0x11c>
 8007b0e:	6862      	ldr	r2, [r4, #4]
 8007b10:	6923      	ldr	r3, [r4, #16]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	dc02      	bgt.n	8007b1c <_printf_i+0x11c>
 8007b16:	2330      	movs	r3, #48	@ 0x30
 8007b18:	3d01      	subs	r5, #1
 8007b1a:	702b      	strb	r3, [r5, #0]
 8007b1c:	9b03      	ldr	r3, [sp, #12]
 8007b1e:	1b5b      	subs	r3, r3, r5
 8007b20:	6123      	str	r3, [r4, #16]
 8007b22:	9b07      	ldr	r3, [sp, #28]
 8007b24:	0021      	movs	r1, r4
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	9805      	ldr	r0, [sp, #20]
 8007b2a:	9b06      	ldr	r3, [sp, #24]
 8007b2c:	aa09      	add	r2, sp, #36	@ 0x24
 8007b2e:	f7ff fef7 	bl	8007920 <_printf_common>
 8007b32:	3001      	adds	r0, #1
 8007b34:	d148      	bne.n	8007bc8 <_printf_i+0x1c8>
 8007b36:	2001      	movs	r0, #1
 8007b38:	4240      	negs	r0, r0
 8007b3a:	b00b      	add	sp, #44	@ 0x2c
 8007b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b3e:	2220      	movs	r2, #32
 8007b40:	6809      	ldr	r1, [r1, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	6022      	str	r2, [r4, #0]
 8007b46:	2278      	movs	r2, #120	@ 0x78
 8007b48:	4932      	ldr	r1, [pc, #200]	@ (8007c14 <_printf_i+0x214>)
 8007b4a:	9104      	str	r1, [sp, #16]
 8007b4c:	0021      	movs	r1, r4
 8007b4e:	3145      	adds	r1, #69	@ 0x45
 8007b50:	700a      	strb	r2, [r1, #0]
 8007b52:	6819      	ldr	r1, [r3, #0]
 8007b54:	6822      	ldr	r2, [r4, #0]
 8007b56:	c940      	ldmia	r1!, {r6}
 8007b58:	0610      	lsls	r0, r2, #24
 8007b5a:	d402      	bmi.n	8007b62 <_printf_i+0x162>
 8007b5c:	0650      	lsls	r0, r2, #25
 8007b5e:	d500      	bpl.n	8007b62 <_printf_i+0x162>
 8007b60:	b2b6      	uxth	r6, r6
 8007b62:	6019      	str	r1, [r3, #0]
 8007b64:	07d3      	lsls	r3, r2, #31
 8007b66:	d502      	bpl.n	8007b6e <_printf_i+0x16e>
 8007b68:	2320      	movs	r3, #32
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	6023      	str	r3, [r4, #0]
 8007b6e:	2e00      	cmp	r6, #0
 8007b70:	d001      	beq.n	8007b76 <_printf_i+0x176>
 8007b72:	2710      	movs	r7, #16
 8007b74:	e7aa      	b.n	8007acc <_printf_i+0xcc>
 8007b76:	2220      	movs	r2, #32
 8007b78:	6823      	ldr	r3, [r4, #0]
 8007b7a:	4393      	bics	r3, r2
 8007b7c:	6023      	str	r3, [r4, #0]
 8007b7e:	e7f8      	b.n	8007b72 <_printf_i+0x172>
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	680d      	ldr	r5, [r1, #0]
 8007b84:	1d10      	adds	r0, r2, #4
 8007b86:	6949      	ldr	r1, [r1, #20]
 8007b88:	6018      	str	r0, [r3, #0]
 8007b8a:	6813      	ldr	r3, [r2, #0]
 8007b8c:	062e      	lsls	r6, r5, #24
 8007b8e:	d501      	bpl.n	8007b94 <_printf_i+0x194>
 8007b90:	6019      	str	r1, [r3, #0]
 8007b92:	e002      	b.n	8007b9a <_printf_i+0x19a>
 8007b94:	066d      	lsls	r5, r5, #25
 8007b96:	d5fb      	bpl.n	8007b90 <_printf_i+0x190>
 8007b98:	8019      	strh	r1, [r3, #0]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	9d03      	ldr	r5, [sp, #12]
 8007b9e:	6123      	str	r3, [r4, #16]
 8007ba0:	e7bf      	b.n	8007b22 <_printf_i+0x122>
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	1d11      	adds	r1, r2, #4
 8007ba6:	6019      	str	r1, [r3, #0]
 8007ba8:	6815      	ldr	r5, [r2, #0]
 8007baa:	2100      	movs	r1, #0
 8007bac:	0028      	movs	r0, r5
 8007bae:	6862      	ldr	r2, [r4, #4]
 8007bb0:	f000 f856 	bl	8007c60 <memchr>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	d001      	beq.n	8007bbc <_printf_i+0x1bc>
 8007bb8:	1b40      	subs	r0, r0, r5
 8007bba:	6060      	str	r0, [r4, #4]
 8007bbc:	6863      	ldr	r3, [r4, #4]
 8007bbe:	6123      	str	r3, [r4, #16]
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	9a03      	ldr	r2, [sp, #12]
 8007bc4:	7013      	strb	r3, [r2, #0]
 8007bc6:	e7ac      	b.n	8007b22 <_printf_i+0x122>
 8007bc8:	002a      	movs	r2, r5
 8007bca:	6923      	ldr	r3, [r4, #16]
 8007bcc:	9906      	ldr	r1, [sp, #24]
 8007bce:	9805      	ldr	r0, [sp, #20]
 8007bd0:	9d07      	ldr	r5, [sp, #28]
 8007bd2:	47a8      	blx	r5
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	d0ae      	beq.n	8007b36 <_printf_i+0x136>
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	079b      	lsls	r3, r3, #30
 8007bdc:	d415      	bmi.n	8007c0a <_printf_i+0x20a>
 8007bde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007be0:	68e0      	ldr	r0, [r4, #12]
 8007be2:	4298      	cmp	r0, r3
 8007be4:	daa9      	bge.n	8007b3a <_printf_i+0x13a>
 8007be6:	0018      	movs	r0, r3
 8007be8:	e7a7      	b.n	8007b3a <_printf_i+0x13a>
 8007bea:	0022      	movs	r2, r4
 8007bec:	2301      	movs	r3, #1
 8007bee:	9906      	ldr	r1, [sp, #24]
 8007bf0:	9805      	ldr	r0, [sp, #20]
 8007bf2:	9e07      	ldr	r6, [sp, #28]
 8007bf4:	3219      	adds	r2, #25
 8007bf6:	47b0      	blx	r6
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	d09c      	beq.n	8007b36 <_printf_i+0x136>
 8007bfc:	3501      	adds	r5, #1
 8007bfe:	68e3      	ldr	r3, [r4, #12]
 8007c00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c02:	1a9b      	subs	r3, r3, r2
 8007c04:	42ab      	cmp	r3, r5
 8007c06:	dcf0      	bgt.n	8007bea <_printf_i+0x1ea>
 8007c08:	e7e9      	b.n	8007bde <_printf_i+0x1de>
 8007c0a:	2500      	movs	r5, #0
 8007c0c:	e7f7      	b.n	8007bfe <_printf_i+0x1fe>
 8007c0e:	46c0      	nop			@ (mov r8, r8)
 8007c10:	08008405 	.word	0x08008405
 8007c14:	08008416 	.word	0x08008416

08007c18 <memmove>:
 8007c18:	b510      	push	{r4, lr}
 8007c1a:	4288      	cmp	r0, r1
 8007c1c:	d902      	bls.n	8007c24 <memmove+0xc>
 8007c1e:	188b      	adds	r3, r1, r2
 8007c20:	4298      	cmp	r0, r3
 8007c22:	d308      	bcc.n	8007c36 <memmove+0x1e>
 8007c24:	2300      	movs	r3, #0
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d007      	beq.n	8007c3a <memmove+0x22>
 8007c2a:	5ccc      	ldrb	r4, [r1, r3]
 8007c2c:	54c4      	strb	r4, [r0, r3]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	e7f9      	b.n	8007c26 <memmove+0xe>
 8007c32:	5c8b      	ldrb	r3, [r1, r2]
 8007c34:	5483      	strb	r3, [r0, r2]
 8007c36:	3a01      	subs	r2, #1
 8007c38:	d2fb      	bcs.n	8007c32 <memmove+0x1a>
 8007c3a:	bd10      	pop	{r4, pc}

08007c3c <_sbrk_r>:
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	b570      	push	{r4, r5, r6, lr}
 8007c40:	4d06      	ldr	r5, [pc, #24]	@ (8007c5c <_sbrk_r+0x20>)
 8007c42:	0004      	movs	r4, r0
 8007c44:	0008      	movs	r0, r1
 8007c46:	602b      	str	r3, [r5, #0]
 8007c48:	f7fa fe56 	bl	80028f8 <_sbrk>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d103      	bne.n	8007c58 <_sbrk_r+0x1c>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d000      	beq.n	8007c58 <_sbrk_r+0x1c>
 8007c56:	6023      	str	r3, [r4, #0]
 8007c58:	bd70      	pop	{r4, r5, r6, pc}
 8007c5a:	46c0      	nop			@ (mov r8, r8)
 8007c5c:	20000978 	.word	0x20000978

08007c60 <memchr>:
 8007c60:	b2c9      	uxtb	r1, r1
 8007c62:	1882      	adds	r2, r0, r2
 8007c64:	4290      	cmp	r0, r2
 8007c66:	d101      	bne.n	8007c6c <memchr+0xc>
 8007c68:	2000      	movs	r0, #0
 8007c6a:	4770      	bx	lr
 8007c6c:	7803      	ldrb	r3, [r0, #0]
 8007c6e:	428b      	cmp	r3, r1
 8007c70:	d0fb      	beq.n	8007c6a <memchr+0xa>
 8007c72:	3001      	adds	r0, #1
 8007c74:	e7f6      	b.n	8007c64 <memchr+0x4>

08007c76 <_realloc_r>:
 8007c76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c78:	0006      	movs	r6, r0
 8007c7a:	000c      	movs	r4, r1
 8007c7c:	0015      	movs	r5, r2
 8007c7e:	2900      	cmp	r1, #0
 8007c80:	d105      	bne.n	8007c8e <_realloc_r+0x18>
 8007c82:	0011      	movs	r1, r2
 8007c84:	f7ff fc5e 	bl	8007544 <_malloc_r>
 8007c88:	0004      	movs	r4, r0
 8007c8a:	0020      	movs	r0, r4
 8007c8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c8e:	2a00      	cmp	r2, #0
 8007c90:	d103      	bne.n	8007c9a <_realloc_r+0x24>
 8007c92:	f7ff fbeb 	bl	800746c <_free_r>
 8007c96:	002c      	movs	r4, r5
 8007c98:	e7f7      	b.n	8007c8a <_realloc_r+0x14>
 8007c9a:	f000 f81c 	bl	8007cd6 <_malloc_usable_size_r>
 8007c9e:	0007      	movs	r7, r0
 8007ca0:	4285      	cmp	r5, r0
 8007ca2:	d802      	bhi.n	8007caa <_realloc_r+0x34>
 8007ca4:	0843      	lsrs	r3, r0, #1
 8007ca6:	42ab      	cmp	r3, r5
 8007ca8:	d3ef      	bcc.n	8007c8a <_realloc_r+0x14>
 8007caa:	0029      	movs	r1, r5
 8007cac:	0030      	movs	r0, r6
 8007cae:	f7ff fc49 	bl	8007544 <_malloc_r>
 8007cb2:	9001      	str	r0, [sp, #4]
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	d101      	bne.n	8007cbc <_realloc_r+0x46>
 8007cb8:	9c01      	ldr	r4, [sp, #4]
 8007cba:	e7e6      	b.n	8007c8a <_realloc_r+0x14>
 8007cbc:	002a      	movs	r2, r5
 8007cbe:	42bd      	cmp	r5, r7
 8007cc0:	d900      	bls.n	8007cc4 <_realloc_r+0x4e>
 8007cc2:	003a      	movs	r2, r7
 8007cc4:	0021      	movs	r1, r4
 8007cc6:	9801      	ldr	r0, [sp, #4]
 8007cc8:	f7ff fbc6 	bl	8007458 <memcpy>
 8007ccc:	0021      	movs	r1, r4
 8007cce:	0030      	movs	r0, r6
 8007cd0:	f7ff fbcc 	bl	800746c <_free_r>
 8007cd4:	e7f0      	b.n	8007cb8 <_realloc_r+0x42>

08007cd6 <_malloc_usable_size_r>:
 8007cd6:	1f0b      	subs	r3, r1, #4
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	1f18      	subs	r0, r3, #4
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	da01      	bge.n	8007ce4 <_malloc_usable_size_r+0xe>
 8007ce0:	580b      	ldr	r3, [r1, r0]
 8007ce2:	18c0      	adds	r0, r0, r3
 8007ce4:	4770      	bx	lr
	...

08007ce8 <_init>:
 8007ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cea:	46c0      	nop			@ (mov r8, r8)
 8007cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cee:	bc08      	pop	{r3}
 8007cf0:	469e      	mov	lr, r3
 8007cf2:	4770      	bx	lr

08007cf4 <_fini>:
 8007cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf6:	46c0      	nop			@ (mov r8, r8)
 8007cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cfa:	bc08      	pop	{r3}
 8007cfc:	469e      	mov	lr, r3
 8007cfe:	4770      	bx	lr
